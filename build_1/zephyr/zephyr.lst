
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	b0 c3 00 20 a5 ca 00 00 1f c1 01 00 79 ca 00 00     ... ........y...
    8010:	79 ca 00 00 79 ca 00 00 79 ca 00 00 79 ca 00 00     y...y...y...y...
	...
    802c:	2d c3 00 00 79 ca 00 00 00 00 00 00 cd c2 00 00     -...y...........
    803c:	79 ca 00 00                                         y...

00008040 <_irq_vector_table>:
    8040:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8050:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8060:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8070:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8080:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8090:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    80a0:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    80b0:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    80c0:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    80d0:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    80e0:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    80f0:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8100:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8110:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8120:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8130:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8140:	b5 c3 00 00 b5 c3 00 00 b5 c3 00 00 b5 c3 00 00     ................
    8150:	b5 c3 00 00                                         ....

Disassembly of section text:

00008158 <__aeabi_uldivmod>:
    8158:	b953      	cbnz	r3, 8170 <__aeabi_uldivmod+0x18>
    815a:	b94a      	cbnz	r2, 8170 <__aeabi_uldivmod+0x18>
    815c:	2900      	cmp	r1, #0
    815e:	bf08      	it	eq
    8160:	2800      	cmpeq	r0, #0
    8162:	bf1c      	itt	ne
    8164:	f04f 31ff 	movne.w	r1, #4294967295
    8168:	f04f 30ff 	movne.w	r0, #4294967295
    816c:	f000 b80c 	b.w	8188 <__aeabi_idiv0>
    8170:	f1ad 0c08 	sub.w	ip, sp, #8
    8174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8178:	f000 f808 	bl	818c <__udivmoddi4>
    817c:	f8dd e004 	ldr.w	lr, [sp, #4]
    8180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8184:	b004      	add	sp, #16
    8186:	4770      	bx	lr

00008188 <__aeabi_idiv0>:
    8188:	4770      	bx	lr
    818a:	bf00      	nop

0000818c <__udivmoddi4>:
    818c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8190:	4686      	mov	lr, r0
    8192:	468c      	mov	ip, r1
    8194:	4608      	mov	r0, r1
    8196:	9e08      	ldr	r6, [sp, #32]
    8198:	4615      	mov	r5, r2
    819a:	4674      	mov	r4, lr
    819c:	4619      	mov	r1, r3
    819e:	2b00      	cmp	r3, #0
    81a0:	f040 80c1 	bne.w	8326 <__udivmoddi4+0x19a>
    81a4:	4285      	cmp	r5, r0
    81a6:	fab2 f282 	clz	r2, r2
    81aa:	d945      	bls.n	8238 <__udivmoddi4+0xac>
    81ac:	b14a      	cbz	r2, 81c2 <__udivmoddi4+0x36>
    81ae:	f1c2 0320 	rsb	r3, r2, #32
    81b2:	fa00 fc02 	lsl.w	ip, r0, r2
    81b6:	4095      	lsls	r5, r2
    81b8:	4094      	lsls	r4, r2
    81ba:	fa2e f303 	lsr.w	r3, lr, r3
    81be:	ea43 0c0c 	orr.w	ip, r3, ip
    81c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c6:	b2a8      	uxth	r0, r5
    81c8:	0c23      	lsrs	r3, r4, #16
    81ca:	fbbc f8fe 	udiv	r8, ip, lr
    81ce:	fb0e cc18 	mls	ip, lr, r8, ip
    81d2:	fb08 f900 	mul.w	r9, r8, r0
    81d6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81da:	4599      	cmp	r9, r3
    81dc:	d928      	bls.n	8230 <__udivmoddi4+0xa4>
    81de:	18eb      	adds	r3, r5, r3
    81e0:	f108 37ff 	add.w	r7, r8, #4294967295
    81e4:	d204      	bcs.n	81f0 <__udivmoddi4+0x64>
    81e6:	4599      	cmp	r9, r3
    81e8:	d902      	bls.n	81f0 <__udivmoddi4+0x64>
    81ea:	f1a8 0702 	sub.w	r7, r8, #2
    81ee:	442b      	add	r3, r5
    81f0:	eba3 0309 	sub.w	r3, r3, r9
    81f4:	b2a4      	uxth	r4, r4
    81f6:	fbb3 fcfe 	udiv	ip, r3, lr
    81fa:	fb0e 331c 	mls	r3, lr, ip, r3
    81fe:	fb0c f000 	mul.w	r0, ip, r0
    8202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8206:	42a0      	cmp	r0, r4
    8208:	d914      	bls.n	8234 <__udivmoddi4+0xa8>
    820a:	192c      	adds	r4, r5, r4
    820c:	f10c 33ff 	add.w	r3, ip, #4294967295
    8210:	d204      	bcs.n	821c <__udivmoddi4+0x90>
    8212:	42a0      	cmp	r0, r4
    8214:	d902      	bls.n	821c <__udivmoddi4+0x90>
    8216:	f1ac 0302 	sub.w	r3, ip, #2
    821a:	442c      	add	r4, r5
    821c:	1a24      	subs	r4, r4, r0
    821e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    8222:	b11e      	cbz	r6, 822c <__udivmoddi4+0xa0>
    8224:	40d4      	lsrs	r4, r2
    8226:	2300      	movs	r3, #0
    8228:	6034      	str	r4, [r6, #0]
    822a:	6073      	str	r3, [r6, #4]
    822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8230:	4647      	mov	r7, r8
    8232:	e7dd      	b.n	81f0 <__udivmoddi4+0x64>
    8234:	4663      	mov	r3, ip
    8236:	e7f1      	b.n	821c <__udivmoddi4+0x90>
    8238:	bb92      	cbnz	r2, 82a0 <__udivmoddi4+0x114>
    823a:	1b43      	subs	r3, r0, r5
    823c:	2101      	movs	r1, #1
    823e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8242:	b2af      	uxth	r7, r5
    8244:	0c20      	lsrs	r0, r4, #16
    8246:	fbb3 fcfe 	udiv	ip, r3, lr
    824a:	fb0e 331c 	mls	r3, lr, ip, r3
    824e:	fb0c f807 	mul.w	r8, ip, r7
    8252:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8256:	4598      	cmp	r8, r3
    8258:	d961      	bls.n	831e <__udivmoddi4+0x192>
    825a:	18eb      	adds	r3, r5, r3
    825c:	f10c 30ff 	add.w	r0, ip, #4294967295
    8260:	d204      	bcs.n	826c <__udivmoddi4+0xe0>
    8262:	4598      	cmp	r8, r3
    8264:	d902      	bls.n	826c <__udivmoddi4+0xe0>
    8266:	f1ac 0002 	sub.w	r0, ip, #2
    826a:	442b      	add	r3, r5
    826c:	eba3 0308 	sub.w	r3, r3, r8
    8270:	b2a4      	uxth	r4, r4
    8272:	fbb3 fcfe 	udiv	ip, r3, lr
    8276:	fb0e 331c 	mls	r3, lr, ip, r3
    827a:	fb0c f707 	mul.w	r7, ip, r7
    827e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8282:	42a7      	cmp	r7, r4
    8284:	d94d      	bls.n	8322 <__udivmoddi4+0x196>
    8286:	192c      	adds	r4, r5, r4
    8288:	f10c 33ff 	add.w	r3, ip, #4294967295
    828c:	d204      	bcs.n	8298 <__udivmoddi4+0x10c>
    828e:	42a7      	cmp	r7, r4
    8290:	d902      	bls.n	8298 <__udivmoddi4+0x10c>
    8292:	f1ac 0302 	sub.w	r3, ip, #2
    8296:	442c      	add	r4, r5
    8298:	1be4      	subs	r4, r4, r7
    829a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829e:	e7c0      	b.n	8222 <__udivmoddi4+0x96>
    82a0:	f1c2 0320 	rsb	r3, r2, #32
    82a4:	4095      	lsls	r5, r2
    82a6:	4094      	lsls	r4, r2
    82a8:	fa20 f103 	lsr.w	r1, r0, r3
    82ac:	fa2e f303 	lsr.w	r3, lr, r3
    82b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b4:	4090      	lsls	r0, r2
    82b6:	b2af      	uxth	r7, r5
    82b8:	4303      	orrs	r3, r0
    82ba:	fbb1 fcfe 	udiv	ip, r1, lr
    82be:	fb0e 101c 	mls	r0, lr, ip, r1
    82c2:	0c19      	lsrs	r1, r3, #16
    82c4:	fb0c f807 	mul.w	r8, ip, r7
    82c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82cc:	4588      	cmp	r8, r1
    82ce:	d922      	bls.n	8316 <__udivmoddi4+0x18a>
    82d0:	1869      	adds	r1, r5, r1
    82d2:	f10c 30ff 	add.w	r0, ip, #4294967295
    82d6:	d204      	bcs.n	82e2 <__udivmoddi4+0x156>
    82d8:	4588      	cmp	r8, r1
    82da:	d902      	bls.n	82e2 <__udivmoddi4+0x156>
    82dc:	f1ac 0002 	sub.w	r0, ip, #2
    82e0:	4429      	add	r1, r5
    82e2:	eba1 0108 	sub.w	r1, r1, r8
    82e6:	b29b      	uxth	r3, r3
    82e8:	fbb1 fcfe 	udiv	ip, r1, lr
    82ec:	fb0e 111c 	mls	r1, lr, ip, r1
    82f0:	fb0c f707 	mul.w	r7, ip, r7
    82f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f8:	429f      	cmp	r7, r3
    82fa:	d90e      	bls.n	831a <__udivmoddi4+0x18e>
    82fc:	18eb      	adds	r3, r5, r3
    82fe:	f10c 31ff 	add.w	r1, ip, #4294967295
    8302:	d204      	bcs.n	830e <__udivmoddi4+0x182>
    8304:	429f      	cmp	r7, r3
    8306:	d902      	bls.n	830e <__udivmoddi4+0x182>
    8308:	f1ac 0102 	sub.w	r1, ip, #2
    830c:	442b      	add	r3, r5
    830e:	1bdb      	subs	r3, r3, r7
    8310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8314:	e793      	b.n	823e <__udivmoddi4+0xb2>
    8316:	4660      	mov	r0, ip
    8318:	e7e3      	b.n	82e2 <__udivmoddi4+0x156>
    831a:	4661      	mov	r1, ip
    831c:	e7f7      	b.n	830e <__udivmoddi4+0x182>
    831e:	4660      	mov	r0, ip
    8320:	e7a4      	b.n	826c <__udivmoddi4+0xe0>
    8322:	4663      	mov	r3, ip
    8324:	e7b8      	b.n	8298 <__udivmoddi4+0x10c>
    8326:	4283      	cmp	r3, r0
    8328:	d906      	bls.n	8338 <__udivmoddi4+0x1ac>
    832a:	b916      	cbnz	r6, 8332 <__udivmoddi4+0x1a6>
    832c:	2100      	movs	r1, #0
    832e:	4608      	mov	r0, r1
    8330:	e77c      	b.n	822c <__udivmoddi4+0xa0>
    8332:	e9c6 e000 	strd	lr, r0, [r6]
    8336:	e7f9      	b.n	832c <__udivmoddi4+0x1a0>
    8338:	fab3 f783 	clz	r7, r3
    833c:	b98f      	cbnz	r7, 8362 <__udivmoddi4+0x1d6>
    833e:	4283      	cmp	r3, r0
    8340:	d301      	bcc.n	8346 <__udivmoddi4+0x1ba>
    8342:	4572      	cmp	r2, lr
    8344:	d808      	bhi.n	8358 <__udivmoddi4+0x1cc>
    8346:	ebbe 0402 	subs.w	r4, lr, r2
    834a:	eb60 0303 	sbc.w	r3, r0, r3
    834e:	2001      	movs	r0, #1
    8350:	469c      	mov	ip, r3
    8352:	b91e      	cbnz	r6, 835c <__udivmoddi4+0x1d0>
    8354:	2100      	movs	r1, #0
    8356:	e769      	b.n	822c <__udivmoddi4+0xa0>
    8358:	4638      	mov	r0, r7
    835a:	e7fa      	b.n	8352 <__udivmoddi4+0x1c6>
    835c:	e9c6 4c00 	strd	r4, ip, [r6]
    8360:	e7f8      	b.n	8354 <__udivmoddi4+0x1c8>
    8362:	f1c7 0c20 	rsb	ip, r7, #32
    8366:	40bb      	lsls	r3, r7
    8368:	fa0e f507 	lsl.w	r5, lr, r7
    836c:	fa22 f40c 	lsr.w	r4, r2, ip
    8370:	fa2e f10c 	lsr.w	r1, lr, ip
    8374:	40ba      	lsls	r2, r7
    8376:	431c      	orrs	r4, r3
    8378:	fa20 f30c 	lsr.w	r3, r0, ip
    837c:	40b8      	lsls	r0, r7
    837e:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8382:	4301      	orrs	r1, r0
    8384:	fa1f fe84 	uxth.w	lr, r4
    8388:	fbb3 f8f9 	udiv	r8, r3, r9
    838c:	fb09 3018 	mls	r0, r9, r8, r3
    8390:	0c0b      	lsrs	r3, r1, #16
    8392:	fb08 fa0e 	mul.w	sl, r8, lr
    8396:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    839a:	459a      	cmp	sl, r3
    839c:	d940      	bls.n	8420 <__udivmoddi4+0x294>
    839e:	18e3      	adds	r3, r4, r3
    83a0:	f108 30ff 	add.w	r0, r8, #4294967295
    83a4:	d204      	bcs.n	83b0 <__udivmoddi4+0x224>
    83a6:	459a      	cmp	sl, r3
    83a8:	d902      	bls.n	83b0 <__udivmoddi4+0x224>
    83aa:	f1a8 0002 	sub.w	r0, r8, #2
    83ae:	4423      	add	r3, r4
    83b0:	eba3 030a 	sub.w	r3, r3, sl
    83b4:	b289      	uxth	r1, r1
    83b6:	fbb3 f8f9 	udiv	r8, r3, r9
    83ba:	fb09 3318 	mls	r3, r9, r8, r3
    83be:	fb08 fe0e 	mul.w	lr, r8, lr
    83c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c6:	458e      	cmp	lr, r1
    83c8:	d92c      	bls.n	8424 <__udivmoddi4+0x298>
    83ca:	1861      	adds	r1, r4, r1
    83cc:	f108 33ff 	add.w	r3, r8, #4294967295
    83d0:	d204      	bcs.n	83dc <__udivmoddi4+0x250>
    83d2:	458e      	cmp	lr, r1
    83d4:	d902      	bls.n	83dc <__udivmoddi4+0x250>
    83d6:	f1a8 0302 	sub.w	r3, r8, #2
    83da:	4421      	add	r1, r4
    83dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83e0:	eba1 010e 	sub.w	r1, r1, lr
    83e4:	fba0 9802 	umull	r9, r8, r0, r2
    83e8:	4541      	cmp	r1, r8
    83ea:	46ce      	mov	lr, r9
    83ec:	4643      	mov	r3, r8
    83ee:	d302      	bcc.n	83f6 <__udivmoddi4+0x26a>
    83f0:	d106      	bne.n	8400 <__udivmoddi4+0x274>
    83f2:	454d      	cmp	r5, r9
    83f4:	d204      	bcs.n	8400 <__udivmoddi4+0x274>
    83f6:	3801      	subs	r0, #1
    83f8:	ebb9 0e02 	subs.w	lr, r9, r2
    83fc:	eb68 0304 	sbc.w	r3, r8, r4
    8400:	2e00      	cmp	r6, #0
    8402:	d0a7      	beq.n	8354 <__udivmoddi4+0x1c8>
    8404:	ebb5 020e 	subs.w	r2, r5, lr
    8408:	eb61 0103 	sbc.w	r1, r1, r3
    840c:	fa01 fc0c 	lsl.w	ip, r1, ip
    8410:	fa22 f307 	lsr.w	r3, r2, r7
    8414:	40f9      	lsrs	r1, r7
    8416:	ea4c 0303 	orr.w	r3, ip, r3
    841a:	e9c6 3100 	strd	r3, r1, [r6]
    841e:	e799      	b.n	8354 <__udivmoddi4+0x1c8>
    8420:	4640      	mov	r0, r8
    8422:	e7c5      	b.n	83b0 <__udivmoddi4+0x224>
    8424:	4643      	mov	r3, r8
    8426:	e7d9      	b.n	83dc <__udivmoddi4+0x250>

00008428 <pwm_set_pulse_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
    8428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    842c:	b089      	sub	sp, #36	; 0x24
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    842e:	e9d0 6300 	ldrd	r6, r3, [r0]
    8432:	9303      	str	r3, [sp, #12]
		       spec->flags);
    8434:	8983      	ldrh	r3, [r0, #12]
{
    8436:	460d      	mov	r5, r1
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    8438:	6887      	ldr	r7, [r0, #8]
		       spec->flags);
    843a:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
    843c:	68b3      	ldr	r3, [r6, #8]
    843e:	4630      	mov	r0, r6
    8440:	685b      	ldr	r3, [r3, #4]
    8442:	9903      	ldr	r1, [sp, #12]
    8444:	aa06      	add	r2, sp, #24
    8446:	4798      	blx	r3
	if (err < 0) {
    8448:	2800      	cmp	r0, #0
    844a:	db31      	blt.n	84b0 <pwm_set_pulse_dt+0x88>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    844c:	e9dd 4b06 	ldrd	r4, fp, [sp, #24]
    8450:	fba7 2304 	umull	r2, r3, r7, r4
    8454:	fb07 380b 	mla	r8, r7, fp, r3
    8458:	9204      	str	r2, [sp, #16]
	if (period_cycles > UINT32_MAX) {
    845a:	f04f 3aff 	mov.w	sl, #4294967295
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    845e:	a31a      	add	r3, pc, #104	; (adr r3, 84c8 <pwm_set_pulse_dt+0xa0>)
    8460:	e9d3 2300 	ldrd	r2, r3, [r3]
    8464:	4641      	mov	r1, r8
    8466:	9804      	ldr	r0, [sp, #16]
    8468:	f7ff fe76 	bl	8158 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
    846c:	9b04      	ldr	r3, [sp, #16]
    846e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 84d0 <pwm_set_pulse_dt+0xa8>
    8472:	459a      	cmp	sl, r3
    8474:	eb79 0308 	sbcs.w	r3, r9, r8
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    8478:	4607      	mov	r7, r0
	if (period_cycles > UINT32_MAX) {
    847a:	d31c      	bcc.n	84b6 <pwm_set_pulse_dt+0x8e>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    847c:	fba5 4304 	umull	r4, r3, r5, r4
    8480:	fb05 350b 	mla	r5, r5, fp, r3
    8484:	a310      	add	r3, pc, #64	; (adr r3, 84c8 <pwm_set_pulse_dt+0xa0>)
    8486:	e9d3 2300 	ldrd	r2, r3, [r3]
    848a:	4629      	mov	r1, r5
    848c:	4620      	mov	r0, r4
    848e:	f7ff fe63 	bl	8158 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
    8492:	45a2      	cmp	sl, r4
    8494:	eb79 0505 	sbcs.w	r5, r9, r5
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    8498:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
    849a:	d30c      	bcc.n	84b6 <pwm_set_pulse_dt+0x8e>
	if (pulse > period) {
    849c:	4287      	cmp	r7, r0
	const struct pwm_driver_api *api =
    849e:	68b2      	ldr	r2, [r6, #8]
	if (pulse > period) {
    84a0:	d30c      	bcc.n	84bc <pwm_set_pulse_dt+0x94>
	return api->set_cycles(dev, channel, period, pulse, flags);
    84a2:	9905      	ldr	r1, [sp, #20]
    84a4:	4630      	mov	r0, r6
    84a6:	9100      	str	r1, [sp, #0]
    84a8:	6814      	ldr	r4, [r2, #0]
    84aa:	9903      	ldr	r1, [sp, #12]
    84ac:	463a      	mov	r2, r7
    84ae:	47a0      	blx	r4
}
    84b0:	b009      	add	sp, #36	; 0x24
    84b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
    84b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    84ba:	e7f9      	b.n	84b0 <pwm_set_pulse_dt+0x88>
		return -EINVAL;
    84bc:	f06f 0015 	mvn.w	r0, #21
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    84c0:	e7f6      	b.n	84b0 <pwm_set_pulse_dt+0x88>
    84c2:	bf00      	nop
    84c4:	f3af 8000 	nop.w
    84c8:	3b9aca00 	.word	0x3b9aca00
    84cc:	00000000 	.word	0x00000000
    84d0:	3b9ac9ff 	.word	0x3b9ac9ff

000084d4 <on_disconnected>:
	dk_set_led_on(CONN_STATUS_LED);
} /* on_connected */


void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
    84d4:	b598      	push	{r3, r4, r7, lr}
	LOG_INF("Disconnected (reason: %d)", reason);
    84d6:	466c      	mov	r4, sp
{
    84d8:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason: %d)", reason);
    84da:	b088      	sub	sp, #32
    84dc:	466a      	mov	r2, sp
    84de:	4b0c      	ldr	r3, [pc, #48]	; (8510 <on_disconnected+0x3c>)
    84e0:	480c      	ldr	r0, [pc, #48]	; (8514 <on_disconnected+0x40>)
    84e2:	e9c2 3105 	strd	r3, r1, [r2, #20]
    84e6:	2303      	movs	r3, #3
    84e8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    84ec:	f842 3f10 	str.w	r3, [r2, #16]!
    84f0:	f012 fc26 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    84f4:	46a5      	mov	sp, r4
	dk_set_led_off(CONN_STATUS_LED);
	if(current_conn) {
    84f6:	4c08      	ldr	r4, [pc, #32]	; (8518 <on_disconnected+0x44>)
	dk_set_led_off(CONN_STATUS_LED);
    84f8:	2001      	movs	r0, #1
    84fa:	f015 fa74 	bl	1d9e6 <dk_set_led_off>
	if(current_conn) {
    84fe:	6820      	ldr	r0, [r4, #0]
    8500:	b118      	cbz	r0, 850a <on_disconnected+0x36>
		bt_conn_unref(current_conn);
    8502:	f007 fbd7 	bl	fcb4 <bt_conn_unref>
		current_conn = NULL;
    8506:	2300      	movs	r3, #0
    8508:	6023      	str	r3, [r4, #0]
	}
} /* on_disconnected */
    850a:	46bd      	mov	sp, r7
    850c:	bd98      	pop	{r3, r4, r7, pc}
    850e:	bf00      	nop
    8510:	0001f66c 	.word	0x0001f66c
    8514:	0001ed64 	.word	0x0001ed64
    8518:	200095e8 	.word	0x200095e8

0000851c <reset_motors>:
    return;
} /* update_motors */


void reset_motors(void)
{
    851c:	b590      	push	{r4, r7, lr}
    851e:	b087      	sub	sp, #28
    int motor_err;
    motor_err = pwm_set_pulse_dt(&motors_l, PWM_USEC(1500));
    8520:	4917      	ldr	r1, [pc, #92]	; (8580 <reset_motors+0x64>)
    8522:	4818      	ldr	r0, [pc, #96]	; (8584 <reset_motors+0x68>)
{
    8524:	af00      	add	r7, sp, #0
    motor_err = pwm_set_pulse_dt(&motors_l, PWM_USEC(1500));
    8526:	f7ff ff7f 	bl	8428 <pwm_set_pulse_dt>
     if (motor_err < 0) {
    852a:	2800      	cmp	r0, #0
    852c:	da11      	bge.n	8552 <reset_motors+0x36>
			LOG_ERR("Error %d: failed to reset left motors", motor_err);
    852e:	466c      	mov	r4, sp
    8530:	b088      	sub	sp, #32
    8532:	466a      	mov	r2, sp
    8534:	4b14      	ldr	r3, [pc, #80]	; (8588 <reset_motors+0x6c>)
			return;
		}
    motor_err = pwm_set_pulse_dt(&motors_r, PWM_USEC(1500));
    if (motor_err < 0) {
			LOG_ERR("Error %d: failed to reset right motors", motor_err);
    8536:	e9c2 3005 	strd	r3, r0, [r2, #20]
    853a:	2303      	movs	r3, #3
    853c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8540:	4812      	ldr	r0, [pc, #72]	; (858c <reset_motors+0x70>)
    8542:	f842 3f10 	str.w	r3, [r2, #16]!
    8546:	f012 fbfb 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    854a:	46a5      	mov	sp, r4
			return;
		}
    LOG_INF("Motors turned off (1500 us)");
    return;
} /* reset_motors */
    854c:	371c      	adds	r7, #28
    854e:	46bd      	mov	sp, r7
    8550:	bd90      	pop	{r4, r7, pc}
    motor_err = pwm_set_pulse_dt(&motors_r, PWM_USEC(1500));
    8552:	490b      	ldr	r1, [pc, #44]	; (8580 <reset_motors+0x64>)
    8554:	480e      	ldr	r0, [pc, #56]	; (8590 <reset_motors+0x74>)
    8556:	f7ff ff67 	bl	8428 <pwm_set_pulse_dt>
    if (motor_err < 0) {
    855a:	2800      	cmp	r0, #0
    855c:	da04      	bge.n	8568 <reset_motors+0x4c>
			LOG_ERR("Error %d: failed to reset right motors", motor_err);
    855e:	466c      	mov	r4, sp
    8560:	b088      	sub	sp, #32
    8562:	466a      	mov	r2, sp
    8564:	4b0b      	ldr	r3, [pc, #44]	; (8594 <reset_motors+0x78>)
    8566:	e7e6      	b.n	8536 <reset_motors+0x1a>
    LOG_INF("Motors turned off (1500 us)");
    8568:	4b0b      	ldr	r3, [pc, #44]	; (8598 <reset_motors+0x7c>)
    856a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    856e:	617b      	str	r3, [r7, #20]
    8570:	2302      	movs	r3, #2
    8572:	4806      	ldr	r0, [pc, #24]	; (858c <reset_motors+0x70>)
    8574:	613b      	str	r3, [r7, #16]
    8576:	f107 0210 	add.w	r2, r7, #16
    857a:	f012 fbe1 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    857e:	e7e5      	b.n	854c <reset_motors+0x30>
    8580:	0016e360 	.word	0x0016e360
    8584:	0001ef08 	.word	0x0001ef08
    8588:	0001f686 	.word	0x0001f686
    858c:	0001ed64 	.word	0x0001ed64
    8590:	0001eef8 	.word	0x0001eef8
    8594:	0001f6ac 	.word	0x0001f6ac
    8598:	0001f6d3 	.word	0x0001f6d3

0000859c <on_connected>:
{
    859c:	b590      	push	{r4, r7, lr}
    859e:	b087      	sub	sp, #28
    85a0:	4604      	mov	r4, r0
    85a2:	af00      	add	r7, sp, #0
	if(err) {
    85a4:	b189      	cbz	r1, 85ca <on_connected+0x2e>
		LOG_ERR("connection err: %d", err);
    85a6:	466c      	mov	r4, sp
    85a8:	b088      	sub	sp, #32
    85aa:	466a      	mov	r2, sp
    85ac:	4b11      	ldr	r3, [pc, #68]	; (85f4 <on_connected+0x58>)
    85ae:	4812      	ldr	r0, [pc, #72]	; (85f8 <on_connected+0x5c>)
    85b0:	e9c2 3105 	strd	r3, r1, [r2, #20]
    85b4:	2303      	movs	r3, #3
    85b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    85ba:	f842 3f10 	str.w	r3, [r2, #16]!
    85be:	f012 fbbf 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    85c2:	46a5      	mov	sp, r4
} /* on_connected */
    85c4:	371c      	adds	r7, #28
    85c6:	46bd      	mov	sp, r7
    85c8:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Connected.");
    85ca:	4b0c      	ldr	r3, [pc, #48]	; (85fc <on_connected+0x60>)
    85cc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    85d0:	617b      	str	r3, [r7, #20]
    85d2:	2302      	movs	r3, #2
    85d4:	f107 0210 	add.w	r2, r7, #16
    85d8:	613b      	str	r3, [r7, #16]
    85da:	4807      	ldr	r0, [pc, #28]	; (85f8 <on_connected+0x5c>)
    85dc:	f012 fbb0 	bl	1ad40 <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    85e0:	4620      	mov	r0, r4
    85e2:	f007 fb3f 	bl	fc64 <bt_conn_ref>
    85e6:	4b06      	ldr	r3, [pc, #24]	; (8600 <on_connected+0x64>)
    85e8:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CONN_STATUS_LED);
    85ea:	2001      	movs	r0, #1
    85ec:	f015 f9f8 	bl	1d9e0 <dk_set_led_on>
    85f0:	e7e8      	b.n	85c4 <on_connected+0x28>
    85f2:	bf00      	nop
    85f4:	0001f6ef 	.word	0x0001f6ef
    85f8:	0001ed64 	.word	0x0001ed64
    85fc:	0001f702 	.word	0x0001f702
    8600:	200095e8 	.word	0x200095e8

00008604 <update_motors>:
{
    8604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t dir = dir_ascii - '0';          // Convert to uint8
    8608:	3830      	subs	r0, #48	; 0x30
    860a:	b2c0      	uxtb	r0, r0
{
    860c:	b086      	sub	sp, #24
    860e:	2803      	cmp	r0, #3
    8610:	af00      	add	r7, sp, #0
    8612:	d81e      	bhi.n	8652 <update_motors+0x4e>
    8614:	4b2d      	ldr	r3, [pc, #180]	; (86cc <update_motors+0xc8>)
    8616:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    861a:	4b2d      	ldr	r3, [pc, #180]	; (86d0 <update_motors+0xcc>)
    861c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    motor_err = pwm_set_pulse_dt(&motors_l, motors_l_pwm_ns);
    8620:	4629      	mov	r1, r5
    8622:	482c      	ldr	r0, [pc, #176]	; (86d4 <update_motors+0xd0>)
    8624:	f7ff ff00 	bl	8428 <pwm_set_pulse_dt>
    if (motor_err < 0) {
    8628:	2800      	cmp	r0, #0
    862a:	da1e      	bge.n	866a <update_motors+0x66>
			LOG_ERR("Error %d: failed to set pulse width of left motors", motor_err);
    862c:	466c      	mov	r4, sp
    862e:	b088      	sub	sp, #32
    8630:	466a      	mov	r2, sp
    8632:	4b29      	ldr	r3, [pc, #164]	; (86d8 <update_motors+0xd4>)
			LOG_ERR("Error %d: failed to set pulse width of right motors", motor_err);
    8634:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8638:	2303      	movs	r3, #3
    863a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    863e:	4827      	ldr	r0, [pc, #156]	; (86dc <update_motors+0xd8>)
    8640:	f842 3f10 	str.w	r3, [r2, #16]!
    8644:	f012 fb7c 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    8648:	46a5      	mov	sp, r4
} /* update_motors */
    864a:	3718      	adds	r7, #24
    864c:	46bd      	mov	sp, r7
    864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            LOG_INF("Controller incorrectly configured. Set forwards = 0, right = 1, backwards = 2, left = 3.");
    8652:	4b23      	ldr	r3, [pc, #140]	; (86e0 <update_motors+0xdc>)
    8654:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8658:	617b      	str	r3, [r7, #20]
    865a:	2302      	movs	r3, #2
    865c:	481f      	ldr	r0, [pc, #124]	; (86dc <update_motors+0xd8>)
    865e:	613b      	str	r3, [r7, #16]
    8660:	f107 0210 	add.w	r2, r7, #16
    8664:	f012 fb6c 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    8668:	e7da      	b.n	8620 <update_motors+0x1c>
    motor_err = pwm_set_pulse_dt(&motors_r, motors_r_pwm_ns);
    866a:	4631      	mov	r1, r6
    866c:	481d      	ldr	r0, [pc, #116]	; (86e4 <update_motors+0xe0>)
    866e:	f7ff fedb 	bl	8428 <pwm_set_pulse_dt>
    if (motor_err < 0) {
    8672:	2800      	cmp	r0, #0
    8674:	da04      	bge.n	8680 <update_motors+0x7c>
			LOG_ERR("Error %d: failed to set pulse width of right motors", motor_err);
    8676:	466c      	mov	r4, sp
    8678:	b088      	sub	sp, #32
    867a:	466a      	mov	r2, sp
    867c:	4b1a      	ldr	r3, [pc, #104]	; (86e8 <update_motors+0xe4>)
    867e:	e7d9      	b.n	8634 <update_motors+0x30>
    LOG_INF("Left motor set to %u us", motors_l_pwm_ns/1000);
    8680:	46e8      	mov	r8, sp
    8682:	b088      	sub	sp, #32
    8684:	466c      	mov	r4, sp
    8686:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    868a:	fbb5 f5fa 	udiv	r5, r5, sl
    868e:	f04f 0903 	mov.w	r9, #3
    8692:	61a5      	str	r5, [r4, #24]
    8694:	4625      	mov	r5, r4
    8696:	4b15      	ldr	r3, [pc, #84]	; (86ec <update_motors+0xe8>)
    8698:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    869c:	6163      	str	r3, [r4, #20]
    869e:	f845 9f10 	str.w	r9, [r5, #16]!
    86a2:	462a      	mov	r2, r5
    86a4:	480d      	ldr	r0, [pc, #52]	; (86dc <update_motors+0xd8>)
    86a6:	f012 fb4b 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    86aa:	46c5      	mov	sp, r8
    LOG_INF("Right motor set to %u us", motors_r_pwm_ns/1000);
    86ac:	46a5      	mov	sp, r4
    86ae:	fbb6 f6fa 	udiv	r6, r6, sl
    86b2:	4b0f      	ldr	r3, [pc, #60]	; (86f0 <update_motors+0xec>)
    86b4:	462a      	mov	r2, r5
    86b6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    86ba:	4808      	ldr	r0, [pc, #32]	; (86dc <update_motors+0xd8>)
    86bc:	6163      	str	r3, [r4, #20]
    86be:	61a6      	str	r6, [r4, #24]
    86c0:	f8c4 9010 	str.w	r9, [r4, #16]
    86c4:	f012 fb3c 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    86c8:	46c5      	mov	sp, r8
    86ca:	e7be      	b.n	864a <update_motors+0x46>
    86cc:	0001eee8 	.word	0x0001eee8
    86d0:	0001eed8 	.word	0x0001eed8
    86d4:	0001ef08 	.word	0x0001ef08
    86d8:	0001f766 	.word	0x0001f766
    86dc:	0001ed64 	.word	0x0001ed64
    86e0:	0001f70d 	.word	0x0001f70d
    86e4:	0001eef8 	.word	0x0001eef8
    86e8:	0001f799 	.word	0x0001f799
    86ec:	0001f7cd 	.word	0x0001f7cd
    86f0:	0001f7e5 	.word	0x0001f7e5

000086f4 <on_data_received>:
{
    86f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86f8:	b082      	sub	sp, #8
    86fa:	4680      	mov	r8, r0
    uint8_t temp_str[len+1];
    86fc:	4668      	mov	r0, sp
    86fe:	f102 0308 	add.w	r3, r2, #8
    8702:	08db      	lsrs	r3, r3, #3
    8704:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
{
    8708:	af02      	add	r7, sp, #8
    uint8_t temp_str[len+1];
    870a:	469d      	mov	sp, r3
    870c:	ad02      	add	r5, sp, #8
    memcpy(temp_str, data, len);
    870e:	4628      	mov	r0, r5
{
    8710:	4614      	mov	r4, r2
    memcpy(temp_str, data, len);
    8712:	f013 fd9a 	bl	1c24a <memcpy>
    temp_str[len] = 0x00;
    8716:	2300      	movs	r3, #0
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
    8718:	466e      	mov	r6, sp
    871a:	b088      	sub	sp, #32
    temp_str[len] = 0x00;
    871c:	552b      	strb	r3, [r5, r4]
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
    871e:	aa02      	add	r2, sp, #8
    8720:	4b16      	ldr	r3, [pc, #88]	; (877c <on_data_received+0x88>)
    8722:	61d4      	str	r4, [r2, #28]
    8724:	e9c2 3805 	strd	r3, r8, [r2, #20]
    8728:	2304      	movs	r3, #4
    872a:	4c15      	ldr	r4, [pc, #84]	; (8780 <on_data_received+0x8c>)
    872c:	f842 3f10 	str.w	r3, [r2, #16]!
    8730:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    8734:	4620      	mov	r0, r4
    8736:	f012 fb03 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    LOG_INF("Data: %s", temp_str);
    873a:	aa02      	add	r2, sp, #8
    873c:	4b11      	ldr	r3, [pc, #68]	; (8784 <on_data_received+0x90>)
    873e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    8742:	e9c2 3505 	strd	r3, r5, [r2, #20]
    8746:	f44f 7300 	mov.w	r3, #512	; 0x200
    874a:	8393      	strh	r3, [r2, #28]
    874c:	4b0e      	ldr	r3, [pc, #56]	; (8788 <on_data_received+0x94>)
    874e:	4620      	mov	r0, r4
    8750:	f842 3f10 	str.w	r3, [r2, #16]!
    8754:	f012 faf4 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    8758:	46b5      	mov	sp, r6
    update_motors(temp_str[0]); 
    875a:	7828      	ldrb	r0, [r5, #0]
    875c:	f7ff ff52 	bl	8604 <update_motors>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    8760:	2200      	movs	r2, #0
    8762:	2300      	movs	r3, #0
    8764:	4809      	ldr	r0, [pc, #36]	; (878c <on_data_received+0x98>)
    8766:	e9cd 2300 	strd	r2, r3, [sp]
    876a:	f640 02f6 	movw	r2, #2294	; 0x8f6
    876e:	2300      	movs	r3, #0
    8770:	f011 fec2 	bl	1a4f8 <z_impl_k_timer_start>
} /* on_data_received */
    8774:	46bd      	mov	sp, r7
    8776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    877a:	bf00      	nop
    877c:	0001f7fe 	.word	0x0001f7fe
    8780:	0001ed64 	.word	0x0001ed64
    8784:	0001f820 	.word	0x0001f820
    8788:	01000003 	.word	0x01000003
    878c:	20008488 	.word	0x20008488

00008790 <main>:
    }
    return;
} /* config_dk_leds */

void main(void)
{
    8790:	b590      	push	{r4, r7, lr}
    8792:	b087      	sub	sp, #28
    int err;
    int blink_status = 0;
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    8794:	466c      	mov	r4, sp
{
    8796:	af00      	add	r7, sp, #0
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    8798:	b088      	sub	sp, #32
    879a:	466a      	mov	r2, sp
    879c:	4b36      	ldr	r3, [pc, #216]	; (8878 <main+0xe8>)
    879e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    87a2:	6153      	str	r3, [r2, #20]
    87a4:	4b35      	ldr	r3, [pc, #212]	; (887c <main+0xec>)
    87a6:	4836      	ldr	r0, [pc, #216]	; (8880 <main+0xf0>)
    87a8:	6193      	str	r3, [r2, #24]
    87aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    87ae:	8393      	strh	r3, [r2, #28]
    87b0:	4b34      	ldr	r3, [pc, #208]	; (8884 <main+0xf4>)
    87b2:	f842 3f10 	str.w	r3, [r2, #16]!
    87b6:	f012 fac3 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    87ba:	46a5      	mov	sp, r4
    err = dk_leds_init();
    87bc:	f00c fb8c 	bl	14ed8 <dk_leds_init>
    if (err) {
    87c0:	b168      	cbz	r0, 87de <main+0x4e>
        LOG_ERR("Couldn't init LEDS (err %d)", err);
    87c2:	b088      	sub	sp, #32
    87c4:	466a      	mov	r2, sp
    87c6:	4b30      	ldr	r3, [pc, #192]	; (8888 <main+0xf8>)
    87c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    87cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    87d0:	2303      	movs	r3, #3
    87d2:	482b      	ldr	r0, [pc, #172]	; (8880 <main+0xf0>)
    87d4:	f842 3f10 	str.w	r3, [r2, #16]!
    87d8:	f012 fab2 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    87dc:	46a5      	mov	sp, r4

    config_dk_leds();

    err = bluetooth_init(&bluetooth_callbacks, &remote_callbacks);
    87de:	492b      	ldr	r1, [pc, #172]	; (888c <main+0xfc>)
    87e0:	482b      	ldr	r0, [pc, #172]	; (8890 <main+0x100>)
    87e2:	f000 f8a7 	bl	8934 <bluetooth_init>
    if (err) {
    87e6:	b170      	cbz	r0, 8806 <main+0x76>
        LOG_INF("Couldn't initialize Bluetooth. err: %d", err);
    87e8:	466c      	mov	r4, sp
    87ea:	b088      	sub	sp, #32
    87ec:	466a      	mov	r2, sp
    87ee:	4b29      	ldr	r3, [pc, #164]	; (8894 <main+0x104>)
    87f0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    87f4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    87f8:	2303      	movs	r3, #3
    87fa:	4821      	ldr	r0, [pc, #132]	; (8880 <main+0xf0>)
    87fc:	f842 3f10 	str.w	r3, [r2, #16]!
    8800:	f012 fa9e 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    8804:	46a5      	mov	sp, r4
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    8806:	4c24      	ldr	r4, [pc, #144]	; (8898 <main+0x108>)
    8808:	4620      	mov	r0, r4
    880a:	f015 fe6c 	bl	1e4e6 <z_device_is_ready>
    }

    if (!device_is_ready(motors_l.dev)) {
    880e:	b9a8      	cbnz	r0, 883c <main+0xac>
		LOG_ERR("Error: PWM device %s is not ready\n", motors_l.dev->name);
		return;
	}
	if (!device_is_ready(motors_r.dev)) {
		LOG_ERR("Error: PWM device %s is not ready\n", motors_r.dev->name);
    8810:	6823      	ldr	r3, [r4, #0]
    8812:	466c      	mov	r4, sp
    8814:	b088      	sub	sp, #32
    8816:	466a      	mov	r2, sp
    8818:	4920      	ldr	r1, [pc, #128]	; (889c <main+0x10c>)
    881a:	4819      	ldr	r0, [pc, #100]	; (8880 <main+0xf0>)
    881c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    8820:	f44f 7300 	mov.w	r3, #512	; 0x200
    8824:	8393      	strh	r3, [r2, #28]
    8826:	4b17      	ldr	r3, [pc, #92]	; (8884 <main+0xf4>)
    8828:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    882c:	f842 3f10 	str.w	r3, [r2, #16]!
    8830:	f012 fa86 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    8834:	46a5      	mov	sp, r4
    for (;;) {

        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
        k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    }
} /* main */
    8836:	371c      	adds	r7, #28
    8838:	46bd      	mov	sp, r7
    883a:	bd90      	pop	{r4, r7, pc}
    883c:	4620      	mov	r0, r4
    883e:	f015 fe52 	bl	1e4e6 <z_device_is_ready>
	if (!device_is_ready(motors_r.dev)) {
    8842:	2800      	cmp	r0, #0
    8844:	d0e4      	beq.n	8810 <main+0x80>
    LOG_INF("Running...");
    8846:	4b16      	ldr	r3, [pc, #88]	; (88a0 <main+0x110>)
    8848:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    884c:	617b      	str	r3, [r7, #20]
    884e:	2302      	movs	r3, #2
    8850:	480b      	ldr	r0, [pc, #44]	; (8880 <main+0xf0>)
    8852:	613b      	str	r3, [r7, #16]
    8854:	f107 0210 	add.w	r2, r7, #16
    8858:	f012 fa72 	bl	1ad40 <z_log_msg_static_create.constprop.0>
    int blink_status = 0;
    885c:	2100      	movs	r1, #0
        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
    885e:	1c4c      	adds	r4, r1, #1
    8860:	2000      	movs	r0, #0
    8862:	f001 0101 	and.w	r1, r1, #1
    8866:	f00c fb63 	bl	14f30 <dk_set_led>
	return z_impl_k_sleep(timeout);
    886a:	2100      	movs	r1, #0
    886c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8870:	f011 f924 	bl	19abc <z_impl_k_sleep>
    8874:	4621      	mov	r1, r4
    8876:	e7f2      	b.n	885e <main+0xce>
    8878:	0001f829 	.word	0x0001f829
    887c:	0001f83a 	.word	0x0001f83a
    8880:	0001ed64 	.word	0x0001ed64
    8884:	01000003 	.word	0x01000003
    8888:	0001f853 	.word	0x0001f853
    888c:	20008160 	.word	0x20008160
    8890:	20008164 	.word	0x20008164
    8894:	0001f86f 	.word	0x0001f86f
    8898:	0001ea94 	.word	0x0001ea94
    889c:	0001f896 	.word	0x0001f896
    88a0:	0001f8b9 	.word	0x0001f8b9

000088a4 <on_write>:
                        const struct bt_gatt_attr *attr,
                        const void *buf,
                        uint16_t len,
                        uint16_t offset,
                        uint8_t flags)
{
    88a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LOG_INF("Received data, handle %d, conn %p",
    88a8:	46e8      	mov	r8, sp
{
    88aa:	af00      	add	r7, sp, #0
    LOG_INF("Received data, handle %d, conn %p",
    88ac:	b088      	sub	sp, #32
{
    88ae:	4616      	mov	r6, r2
    88b0:	461c      	mov	r4, r3
    88b2:	4605      	mov	r5, r0
    LOG_INF("Received data, handle %d, conn %p",
    88b4:	466a      	mov	r2, sp
    88b6:	8a0b      	ldrh	r3, [r1, #16]
    88b8:	490c      	ldr	r1, [pc, #48]	; (88ec <on_write+0x48>)
    88ba:	61d0      	str	r0, [r2, #28]
    88bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    88c0:	2304      	movs	r3, #4
    88c2:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    88c6:	2300      	movs	r3, #0
    88c8:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    88cc:	4808      	ldr	r0, [pc, #32]	; (88f0 <on_write+0x4c>)
    88ce:	f002 fa15 	bl	acfc <z_impl_z_log_msg_static_create>
        attr->handle, (void *)conn);

    if (remote_service_callbacks.data_received) {
    88d2:	4b08      	ldr	r3, [pc, #32]	; (88f4 <on_write+0x50>)
    88d4:	46c5      	mov	sp, r8
    88d6:	681b      	ldr	r3, [r3, #0]
    88d8:	b11b      	cbz	r3, 88e2 <on_write+0x3e>
        remote_service_callbacks.data_received(conn, buf, len);
    88da:	4622      	mov	r2, r4
    88dc:	4631      	mov	r1, r6
    88de:	4628      	mov	r0, r5
    88e0:	4798      	blx	r3
    }
    return len;
} /* on_write */
    88e2:	4620      	mov	r0, r4
    88e4:	46bd      	mov	sp, r7
    88e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88ea:	bf00      	nop
    88ec:	0001f8c4 	.word	0x0001f8c4
    88f0:	0001ee3c 	.word	0x0001ee3c
    88f4:	200095ec 	.word	0x200095ec

000088f8 <bt_ready>:
{
    88f8:	b598      	push	{r3, r4, r7, lr}
    88fa:	af00      	add	r7, sp, #0
    if (err) {
    88fc:	b178      	cbz	r0, 891e <bt_ready+0x26>
        LOG_ERR("bt_ready returned %d", err);
    88fe:	466c      	mov	r4, sp
    8900:	b088      	sub	sp, #32
    8902:	466a      	mov	r2, sp
    8904:	4b08      	ldr	r3, [pc, #32]	; (8928 <bt_ready+0x30>)
    8906:	e9c2 3005 	strd	r3, r0, [r2, #20]
    890a:	2303      	movs	r3, #3
    890c:	f842 3f10 	str.w	r3, [r2, #16]!
    8910:	2300      	movs	r3, #0
    8912:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8916:	4805      	ldr	r0, [pc, #20]	; (892c <bt_ready+0x34>)
    8918:	f002 f9f0 	bl	acfc <z_impl_z_log_msg_static_create>
    891c:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    891e:	4804      	ldr	r0, [pc, #16]	; (8930 <bt_ready+0x38>)
    8920:	f00f f9d8 	bl	17cd4 <z_impl_k_sem_give>
} /* bt_ready */
    8924:	46bd      	mov	sp, r7
    8926:	bd98      	pop	{r3, r4, r7, pc}
    8928:	0001f8e6 	.word	0x0001f8e6
    892c:	0001ee3c 	.word	0x0001ee3c
    8930:	2000854c 	.word	0x2000854c

00008934 <bluetooth_init>:


int bluetooth_init(struct bt_conn_cb *bt_cb, struct bt_remote_service_cb *remote_cb)
{
    8934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8938:	b088      	sub	sp, #32
    893a:	4604      	mov	r4, r0
    893c:	af02      	add	r7, sp, #8
    893e:	460d      	mov	r5, r1
    int err;
    LOG_INF("Initializing Bluetooth");
    8940:	466e      	mov	r6, sp
    8942:	f04f 0802 	mov.w	r8, #2
    8946:	4b25      	ldr	r3, [pc, #148]	; (89dc <bluetooth_init+0xa8>)
    8948:	f8c7 8010 	str.w	r8, [r7, #16]
    894c:	617b      	str	r3, [r7, #20]
    894e:	2300      	movs	r3, #0
    8950:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8954:	4822      	ldr	r0, [pc, #136]	; (89e0 <bluetooth_init+0xac>)
    8956:	f107 0210 	add.w	r2, r7, #16
    895a:	f002 f9cf 	bl	acfc <z_impl_z_log_msg_static_create>

    if (bt_cb == NULL){
    895e:	2c00      	cmp	r4, #0
    8960:	d03a      	beq.n	89d8 <bluetooth_init+0xa4>
        return NRFX_ERROR_NULL;
    }
    bt_conn_cb_register(bt_cb);
    8962:	4620      	mov	r0, r4
    8964:	f007 fbe0 	bl	10128 <bt_conn_cb_register>
    remote_service_callbacks.data_received = remote_cb->data_received;
    8968:	682a      	ldr	r2, [r5, #0]
    896a:	4b1e      	ldr	r3, [pc, #120]	; (89e4 <bluetooth_init+0xb0>)

    err = bt_enable(bt_ready);
    896c:	481e      	ldr	r0, [pc, #120]	; (89e8 <bluetooth_init+0xb4>)
    remote_service_callbacks.data_received = remote_cb->data_received;
    896e:	601a      	str	r2, [r3, #0]
    err = bt_enable(bt_ready);
    8970:	f006 f83a 	bl	e9e8 <bt_enable>
    if (err) {
    8974:	4604      	mov	r4, r0
    8976:	b198      	cbz	r0, 89a0 <bluetooth_init+0x6c>
        LOG_ERR("bt_enable returned %d", err);
    8978:	b088      	sub	sp, #32
    897a:	aa02      	add	r2, sp, #8
    897c:	4b1b      	ldr	r3, [pc, #108]	; (89ec <bluetooth_init+0xb8>)

    k_sem_take(&bt_init_ok, K_FOREVER);

    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    if (err){
        LOG_ERR("couldn't start advertising (err = %d", err);
    897e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    8982:	2303      	movs	r3, #3
    8984:	f842 3f10 	str.w	r3, [r2, #16]!
    8988:	2300      	movs	r3, #0
    898a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    898e:	4814      	ldr	r0, [pc, #80]	; (89e0 <bluetooth_init+0xac>)
    8990:	f002 f9b4 	bl	acfc <z_impl_z_log_msg_static_create>
    8994:	46b5      	mov	sp, r6
        return err;
    }

    return err;
} /* bluetooth_init */
    8996:	4620      	mov	r0, r4
    8998:	3718      	adds	r7, #24
    899a:	46bd      	mov	sp, r7
    899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    89a0:	463c      	mov	r4, r7
    89a2:	4d13      	ldr	r5, [pc, #76]	; (89f0 <bluetooth_init+0xbc>)
	return z_impl_k_sem_take(sem, timeout);
    89a4:	f04f 32ff 	mov.w	r2, #4294967295
    89a8:	f04f 33ff 	mov.w	r3, #4294967295
    89ac:	4811      	ldr	r0, [pc, #68]	; (89f4 <bluetooth_init+0xc0>)
    89ae:	f00f f9d5 	bl	17d5c <z_impl_k_sem_take>
    89b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    89b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    89b6:	682b      	ldr	r3, [r5, #0]
    89b8:	4642      	mov	r2, r8
    89ba:	6023      	str	r3, [r4, #0]
    89bc:	2301      	movs	r3, #1
    89be:	4638      	mov	r0, r7
    89c0:	9300      	str	r3, [sp, #0]
    89c2:	490d      	ldr	r1, [pc, #52]	; (89f8 <bluetooth_init+0xc4>)
    89c4:	4b0d      	ldr	r3, [pc, #52]	; (89fc <bluetooth_init+0xc8>)
    89c6:	f006 fcfb 	bl	f3c0 <bt_le_adv_start>
    if (err){
    89ca:	4604      	mov	r4, r0
    89cc:	2800      	cmp	r0, #0
    89ce:	d0e2      	beq.n	8996 <bluetooth_init+0x62>
        LOG_ERR("couldn't start advertising (err = %d", err);
    89d0:	b088      	sub	sp, #32
    89d2:	aa02      	add	r2, sp, #8
    89d4:	4b0a      	ldr	r3, [pc, #40]	; (8a00 <bluetooth_init+0xcc>)
    89d6:	e7d2      	b.n	897e <bluetooth_init+0x4a>
        return NRFX_ERROR_NULL;
    89d8:	4c0a      	ldr	r4, [pc, #40]	; (8a04 <bluetooth_init+0xd0>)
    89da:	e7dc      	b.n	8996 <bluetooth_init+0x62>
    89dc:	0001f8fb 	.word	0x0001f8fb
    89e0:	0001ee3c 	.word	0x0001ee3c
    89e4:	200095ec 	.word	0x200095ec
    89e8:	000088f9 	.word	0x000088f9
    89ec:	0001f912 	.word	0x0001f912
    89f0:	0001ee70 	.word	0x0001ee70
    89f4:	2000854c 	.word	0x2000854c
    89f8:	0001ef5c 	.word	0x0001ef5c
    89fc:	0001ef54 	.word	0x0001ef54
    8a00:	0001f928 	.word	0x0001f928
    8a04:	0bad0009 	.word	0x0bad0009

00008a08 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    8a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a0c:	b095      	sub	sp, #84	; 0x54
    8a0e:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    8a10:	4604      	mov	r4, r0
{
    8a12:	e9c7 1208 	strd	r1, r2, [r7, #32]
    8a16:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    8a1a:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
    8a1c:	b958      	cbnz	r0, 8a36 <cbprintf_package_convert+0x2e>
    8a1e:	49aa      	ldr	r1, [pc, #680]	; (8cc8 <cbprintf_package_convert+0x2c0>)
    8a20:	f44f 7365 	mov.w	r3, #916	; 0x394
    8a24:	4aa9      	ldr	r2, [pc, #676]	; (8ccc <cbprintf_package_convert+0x2c4>)
    8a26:	48aa      	ldr	r0, [pc, #680]	; (8cd0 <cbprintf_package_convert+0x2c8>)
    8a28:	f012 fc00 	bl	1b22c <assert_print>
    8a2c:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    8a30:	48a6      	ldr	r0, [pc, #664]	; (8ccc <cbprintf_package_convert+0x2c4>)
    8a32:	f012 fbf4 	bl	1b21e <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    8a36:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    8a3a:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    8a3c:	6a3b      	ldr	r3, [r7, #32]
    8a3e:	b953      	cbnz	r3, 8a56 <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    8a40:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    8a42:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    8a44:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    8a46:	6a3d      	ldr	r5, [r7, #32]
	buf += ros_nbr;
    8a48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8a4c:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    8a4e:	42ae      	cmp	r6, r5
    8a50:	d81a      	bhi.n	8a88 <cbprintf_package_convert+0x80>
	return (size_t)(uintptr_t)(buf - start);
    8a52:	1b03      	subs	r3, r0, r4
    8a54:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
    8a56:	f894 9002 	ldrb.w	r9, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    8a5a:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    8a5c:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
    8a5e:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    8a60:	f1b9 0f00 	cmp.w	r9, #0
    8a64:	d002      	beq.n	8a6c <cbprintf_package_convert+0x64>
    8a66:	f01b 0f01 	tst.w	fp, #1
    8a6a:	d116      	bne.n	8a9a <cbprintf_package_convert+0x92>
	rw_cpy = rws_nbr > 0 &&
    8a6c:	697b      	ldr	r3, [r7, #20]
    8a6e:	bb53      	cbnz	r3, 8ac6 <cbprintf_package_convert+0xbe>
		if (cb) {
    8a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a72:	b11b      	cbz	r3, 8a7c <cbprintf_package_convert+0x74>
			cb(in_packaged, in_len, ctx);
    8a74:	4620      	mov	r0, r4
    8a76:	69ba      	ldr	r2, [r7, #24]
    8a78:	6a39      	ldr	r1, [r7, #32]
    8a7a:	4798      	blx	r3
		return in_len;
    8a7c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    8a7e:	4628      	mov	r0, r5
    8a80:	3754      	adds	r7, #84	; 0x54
    8a82:	46bd      	mov	sp, r7
    8a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    8a88:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    8a8c:	4640      	mov	r0, r8
    8a8e:	f013 fb9d 	bl	1c1cc <strlen>
    8a92:	3001      	adds	r0, #1
    8a94:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    8a96:	3501      	adds	r5, #1
    8a98:	e7d9      	b.n	8a4e <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    8a9a:	6863      	ldr	r3, [r4, #4]
    8a9c:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8aa0:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    8aa4:	ea4f 028a 	mov.w	r2, sl, lsl #2
    8aa8:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    8aaa:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    8aae:	2b00      	cmp	r3, #0
    8ab0:	f040 8105 	bne.w	8cbe <cbprintf_package_convert+0x2b6>
		out_len = (int)in_len;
    8ab4:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
    8ab6:	2600      	movs	r6, #0
		out_len = (int)in_len;
    8ab8:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    8aba:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
    8abe:	4598      	cmp	r8, r3
    8ac0:	d14e      	bne.n	8b60 <cbprintf_package_convert+0x158>
    8ac2:	44ca      	add	sl, r9
    8ac4:	e013      	b.n	8aee <cbprintf_package_convert+0xe6>
	rw_cpy = rws_nbr > 0 &&
    8ac6:	f01b 0f02 	tst.w	fp, #2
    8aca:	d0d1      	beq.n	8a70 <cbprintf_package_convert+0x68>
	args_size = in_desc->len * sizeof(int);
    8acc:	f894 a000 	ldrb.w	sl, [r4]
    8ad0:	ea4f 038a 	mov.w	r3, sl, lsl #2
    8ad4:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8ad6:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    8ad8:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8adc:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	d178      	bne.n	8bd6 <cbprintf_package_convert+0x1ce>
		out_len = (int)in_len;
    8ae4:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8ae6:	f1b9 0f00 	cmp.w	r9, #0
    8aea:	d14e      	bne.n	8b8a <cbprintf_package_convert+0x182>
	size_t strl_cnt = 0;
    8aec:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    8aee:	f01b 0f05 	tst.w	fp, #5
    8af2:	bf0c      	ite	eq
    8af4:	2302      	moveq	r3, #2
    8af6:	2301      	movne	r3, #1
    8af8:	627b      	str	r3, [r7, #36]	; 0x24
    8afa:	697b      	ldr	r3, [r7, #20]
    8afc:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8b00:	f00b 0302 	and.w	r3, fp, #2
    8b04:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    8b06:	45ca      	cmp	sl, r9
    8b08:	d0b9      	beq.n	8a7e <cbprintf_package_convert+0x76>
			uint8_t arg_idx = *str_pos++;
    8b0a:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    8b0e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    8b12:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    8b16:	4b6f      	ldr	r3, [pc, #444]	; (8cd4 <cbprintf_package_convert+0x2cc>)
    8b18:	4598      	cmp	r8, r3
    8b1a:	d302      	bcc.n	8b22 <cbprintf_package_convert+0x11a>
    8b1c:	4b6e      	ldr	r3, [pc, #440]	; (8cd8 <cbprintf_package_convert+0x2d0>)
    8b1e:	4598      	cmp	r8, r3
    8b20:	d339      	bcc.n	8b96 <cbprintf_package_convert+0x18e>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8b22:	693b      	ldr	r3, [r7, #16]
    8b24:	2b00      	cmp	r3, #0
    8b26:	d043      	beq.n	8bb0 <cbprintf_package_convert+0x1a8>
    8b28:	69f8      	ldr	r0, [r7, #28]
    8b2a:	f012 f93d 	bl	1ada8 <is_ptr>
    8b2e:	2800      	cmp	r0, #0
    8b30:	d03e      	beq.n	8bb0 <cbprintf_package_convert+0x1a8>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    8b32:	46e8      	mov	r8, sp
    8b34:	b08a      	sub	sp, #40	; 0x28
    8b36:	466a      	mov	r2, sp
    8b38:	4b68      	ldr	r3, [pc, #416]	; (8cdc <cbprintf_package_convert+0x2d4>)
    8b3a:	6153      	str	r3, [r2, #20]
    8b3c:	69fb      	ldr	r3, [r7, #28]
    8b3e:	e9c2 3106 	strd	r3, r1, [r2, #24]
    8b42:	f44f 7300 	mov.w	r3, #512	; 0x200
    8b46:	8413      	strh	r3, [r2, #32]
    8b48:	4b65      	ldr	r3, [pc, #404]	; (8ce0 <cbprintf_package_convert+0x2d8>)
    8b4a:	f842 3f10 	str.w	r3, [r2, #16]!
    8b4e:	2300      	movs	r3, #0
    8b50:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    8b54:	4863      	ldr	r0, [pc, #396]	; (8ce4 <cbprintf_package_convert+0x2dc>)
    8b56:	f002 f8d1 	bl	acfc <z_impl_z_log_msg_static_create>
				out_len -= 2;
    8b5a:	3d02      	subs	r5, #2
    8b5c:	46c5      	mov	sp, r8
				continue;
    8b5e:	e7d2      	b.n	8b06 <cbprintf_package_convert+0xfe>
				const char *str = *(const char **)&buf32[*str_pos];
    8b60:	f818 2b01 	ldrb.w	r2, [r8], #1
    8b64:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8b66:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    8b6a:	f013 fb2f 	bl	1c1cc <strlen>
				if (strl && strl_cnt < strl_len) {
    8b6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8b72:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    8b74:	b13a      	cbz	r2, 8b86 <cbprintf_package_convert+0x17e>
    8b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    8b7a:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    8b7c:	bf3e      	ittt	cc
    8b7e:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    8b80:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    8b84:	3601      	addcc	r6, #1
				out_len += len;
    8b86:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    8b88:	e799      	b.n	8abe <cbprintf_package_convert+0xb6>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8b8a:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    8b8e:	bf1c      	itt	ne
    8b90:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    8b92:	44ca      	addne	sl, r9
    8b94:	e7ab      	b.n	8aee <cbprintf_package_convert+0xe6>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8b96:	693b      	ldr	r3, [r7, #16]
    8b98:	b123      	cbz	r3, 8ba4 <cbprintf_package_convert+0x19c>
    8b9a:	69f8      	ldr	r0, [r7, #28]
    8b9c:	f012 f904 	bl	1ada8 <is_ptr>
    8ba0:	2800      	cmp	r0, #0
    8ba2:	d1c6      	bne.n	8b32 <cbprintf_package_convert+0x12a>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8ba4:	f01b 0f01 	tst.w	fp, #1
    8ba8:	d105      	bne.n	8bb6 <cbprintf_package_convert+0x1ae>
					out_len -= drop_ro_str_pos ? 2 : 1;
    8baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8bac:	1aed      	subs	r5, r5, r3
    8bae:	e7aa      	b.n	8b06 <cbprintf_package_convert+0xfe>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8bb0:	6a3b      	ldr	r3, [r7, #32]
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d0a7      	beq.n	8b06 <cbprintf_package_convert+0xfe>
		return 1 + strlen(str);
    8bb6:	4640      	mov	r0, r8
    8bb8:	f013 fb08 	bl	1c1cc <strlen>
				if (strl && strl_cnt < strl_len) {
    8bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8bbe:	b143      	cbz	r3, 8bd2 <cbprintf_package_convert+0x1ca>
    8bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    8bc4:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    8bc6:	bf3f      	itttt	cc
    8bc8:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    8bca:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    8bcc:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    8bd0:	3601      	addcc	r6, #1
				out_len += (len - 1);
    8bd2:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    8bd4:	e797      	b.n	8b06 <cbprintf_package_convert+0xfe>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8bd6:	f1b9 0f00 	cmp.w	r9, #0
    8bda:	f000 8085 	beq.w	8ce8 <cbprintf_package_convert+0x2e0>
    8bde:	f01b 0604 	ands.w	r6, fp, #4
    8be2:	f000 8084 	beq.w	8cee <cbprintf_package_convert+0x2e6>
		keep_cnt = ros_nbr;
    8be6:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    8be8:	2600      	movs	r6, #0
		dst = keep_str_pos;
    8bea:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    8bee:	464a      	mov	r2, r9
    8bf0:	4651      	mov	r1, sl
    8bf2:	f013 fb2a 	bl	1c24a <memcpy>
	str_pos += ros_nbr;
    8bf6:	697b      	ldr	r3, [r7, #20]
    8bf8:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    8bfa:	005b      	lsls	r3, r3, #1
    8bfc:	60bb      	str	r3, [r7, #8]
    8bfe:	697b      	ldr	r3, [r7, #20]
    8c00:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    8c04:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8c06:	f00b 0302 	and.w	r3, fp, #2
    8c0a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    8c0c:	697b      	ldr	r3, [r7, #20]
    8c0e:	459a      	cmp	sl, r3
    8c10:	d16f      	bne.n	8cf2 <cbprintf_package_convert+0x2ea>
	out_desc.len = in_desc->len;
    8c12:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8c14:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    8c18:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8c1a:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8c1c:	bf18      	it	ne
    8c1e:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8c20:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8c24:	bf08      	it	eq
    8c26:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8c2a:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8c2e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8c30:	f040 80e2 	bne.w	8df8 <cbprintf_package_convert+0x3f0>
    8c34:	f01b 0f04 	tst.w	fp, #4
    8c38:	bf14      	ite	ne
    8c3a:	4640      	movne	r0, r8
    8c3c:	2000      	moveq	r0, #0
    8c3e:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    8c40:	78a3      	ldrb	r3, [r4, #2]
    8c42:	f894 b003 	ldrb.w	fp, [r4, #3]
    8c46:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    8c48:	7062      	strb	r2, [r4, #1]
    8c4a:	70a0      	strb	r0, [r4, #2]
    8c4c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    8c4e:	4620      	mov	r0, r4
    8c50:	69ba      	ldr	r2, [r7, #24]
    8c52:	68f9      	ldr	r1, [r7, #12]
    8c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c56:	4798      	blx	r3
	if (rv < 0) {
    8c58:	1e05      	subs	r5, r0, #0
    8c5a:	f6ff af10 	blt.w	8a7e <cbprintf_package_convert+0x76>
	*in_desc = in_desc_backup;
    8c5e:	697b      	ldr	r3, [r7, #20]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8c60:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    8c62:	7023      	strb	r3, [r4, #0]
    8c64:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8c66:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    8c68:	7063      	strb	r3, [r4, #1]
    8c6a:	69fb      	ldr	r3, [r7, #28]
    8c6c:	f884 b003 	strb.w	fp, [r4, #3]
    8c70:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8c72:	f107 0040 	add.w	r0, r7, #64	; 0x40
    8c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c78:	4798      	blx	r3
	if (rv < 0) {
    8c7a:	f1b0 0800 	subs.w	r8, r0, #0
    8c7e:	f2c0 80e8 	blt.w	8e52 <cbprintf_package_convert+0x44a>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8c82:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    8c84:	4650      	mov	r0, sl
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8c86:	eba3 0109 	sub.w	r1, r3, r9
    8c8a:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    8c8c:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8c8e:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    8c90:	68bb      	ldr	r3, [r7, #8]
    8c92:	1ac9      	subs	r1, r1, r3
    8c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c96:	4798      	blx	r3
	if (rv < 0) {
    8c98:	2800      	cmp	r0, #0
    8c9a:	f2c0 80dc 	blt.w	8e56 <cbprintf_package_convert+0x44e>
	for (int i = 0; i < scpy_cnt; i++) {
    8c9e:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    8ca2:	44a8      	add	r8, r5
	out_len += rv;
    8ca4:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    8ca8:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    8cac:	45b3      	cmp	fp, r6
    8cae:	f2c0 80a5 	blt.w	8dfc <cbprintf_package_convert+0x3f4>
	(void)cb(NULL, 0, ctx);
    8cb2:	2100      	movs	r1, #0
    8cb4:	69ba      	ldr	r2, [r7, #24]
    8cb6:	4608      	mov	r0, r1
    8cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cba:	4798      	blx	r3
	return out_len;
    8cbc:	e6df      	b.n	8a7e <cbprintf_package_convert+0x76>
	if (cb == NULL) {
    8cbe:	f04f 0800 	mov.w	r8, #0
    8cc2:	f107 0030 	add.w	r0, r7, #48	; 0x30
    8cc6:	e792      	b.n	8bee <cbprintf_package_convert+0x1e6>
    8cc8:	0001fa19 	.word	0x0001fa19
    8ccc:	0001f967 	.word	0x0001f967
    8cd0:	0001f995 	.word	0x0001f995
    8cd4:	0001e934 	.word	0x0001e934
    8cd8:	00023a30 	.word	0x00023a30
    8cdc:	0001fa34 	.word	0x0001fa34
    8ce0:	01000004 	.word	0x01000004
    8ce4:	0001edc4 	.word	0x0001edc4
		scpy_cnt = 0;
    8ce8:	464e      	mov	r6, r9
		keep_cnt = 0;
    8cea:	46c8      	mov	r8, r9
    8cec:	e783      	b.n	8bf6 <cbprintf_package_convert+0x1ee>
    8cee:	46b0      	mov	r8, r6
    8cf0:	e781      	b.n	8bf6 <cbprintf_package_convert+0x1ee>
		uint8_t arg_idx = *str_pos++;
    8cf2:	f81a 1b02 	ldrb.w	r1, [sl], #2
    8cf6:	4b59      	ldr	r3, [pc, #356]	; (8e5c <cbprintf_package_convert+0x454>)
		uint8_t arg_pos = *str_pos++;
    8cf8:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    8cfc:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    8d00:	429a      	cmp	r2, r3
    8d02:	d302      	bcc.n	8d0a <cbprintf_package_convert+0x302>
    8d04:	4b56      	ldr	r3, [pc, #344]	; (8e60 <cbprintf_package_convert+0x458>)
    8d06:	429a      	cmp	r2, r3
    8d08:	d316      	bcc.n	8d38 <cbprintf_package_convert+0x330>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8d0a:	693b      	ldr	r3, [r7, #16]
    8d0c:	b12b      	cbz	r3, 8d1a <cbprintf_package_convert+0x312>
    8d0e:	69f8      	ldr	r0, [r7, #28]
    8d10:	f012 f84a 	bl	1ada8 <is_ptr>
    8d14:	2800      	cmp	r0, #0
    8d16:	f47f af79 	bne.w	8c0c <cbprintf_package_convert+0x204>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8d1a:	687b      	ldr	r3, [r7, #4]
    8d1c:	2b00      	cmp	r3, #0
    8d1e:	d04a      	beq.n	8db6 <cbprintf_package_convert+0x3ae>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    8d20:	2e0f      	cmp	r6, #15
    8d22:	d93e      	bls.n	8da2 <cbprintf_package_convert+0x39a>
    8d24:	494f      	ldr	r1, [pc, #316]	; (8e64 <cbprintf_package_convert+0x45c>)
    8d26:	f44f 6389 	mov.w	r3, #1096	; 0x448
    8d2a:	4a4f      	ldr	r2, [pc, #316]	; (8e68 <cbprintf_package_convert+0x460>)
    8d2c:	484f      	ldr	r0, [pc, #316]	; (8e6c <cbprintf_package_convert+0x464>)
    8d2e:	f012 fa7d 	bl	1b22c <assert_print>
    8d32:	f44f 6189 	mov.w	r1, #1096	; 0x448
    8d36:	e67b      	b.n	8a30 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8d38:	693b      	ldr	r3, [r7, #16]
    8d3a:	b12b      	cbz	r3, 8d48 <cbprintf_package_convert+0x340>
    8d3c:	69f8      	ldr	r0, [r7, #28]
    8d3e:	f012 f833 	bl	1ada8 <is_ptr>
    8d42:	2800      	cmp	r0, #0
    8d44:	f47f af62 	bne.w	8c0c <cbprintf_package_convert+0x204>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8d48:	f01b 0f01 	tst.w	fp, #1
    8d4c:	d00b      	beq.n	8d66 <cbprintf_package_convert+0x35e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    8d4e:	2e0f      	cmp	r6, #15
    8d50:	d927      	bls.n	8da2 <cbprintf_package_convert+0x39a>
    8d52:	4944      	ldr	r1, [pc, #272]	; (8e64 <cbprintf_package_convert+0x45c>)
    8d54:	f240 433e 	movw	r3, #1086	; 0x43e
    8d58:	4a43      	ldr	r2, [pc, #268]	; (8e68 <cbprintf_package_convert+0x460>)
    8d5a:	4844      	ldr	r0, [pc, #272]	; (8e6c <cbprintf_package_convert+0x464>)
    8d5c:	f012 fa66 	bl	1b22c <assert_print>
    8d60:	f240 413e 	movw	r1, #1086	; 0x43e
    8d64:	e664      	b.n	8a30 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8d66:	f01b 0f04 	tst.w	fp, #4
    8d6a:	f43f af4f 	beq.w	8c0c <cbprintf_package_convert+0x204>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    8d6e:	f1b8 0f0f 	cmp.w	r8, #15
    8d72:	d909      	bls.n	8d88 <cbprintf_package_convert+0x380>
    8d74:	493e      	ldr	r1, [pc, #248]	; (8e70 <cbprintf_package_convert+0x468>)
    8d76:	f240 4341 	movw	r3, #1089	; 0x441
    8d7a:	4a3b      	ldr	r2, [pc, #236]	; (8e68 <cbprintf_package_convert+0x460>)
    8d7c:	483b      	ldr	r0, [pc, #236]	; (8e6c <cbprintf_package_convert+0x464>)
    8d7e:	f012 fa55 	bl	1b22c <assert_print>
    8d82:	f240 4141 	movw	r1, #1089	; 0x441
    8d86:	e653      	b.n	8a30 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    8d88:	f108 0328 	add.w	r3, r8, #40	; 0x28
    8d8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8d90:	f108 0201 	add.w	r2, r8, #1
    8d94:	eb03 0801 	add.w	r8, r3, r1
    8d98:	f808 5c10 	strb.w	r5, [r8, #-16]
    8d9c:	fa5f f882 	uxtb.w	r8, r2
    8da0:	e734      	b.n	8c0c <cbprintf_package_convert+0x204>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    8da2:	f106 0328 	add.w	r3, r6, #40	; 0x28
    8da6:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8daa:	1c72      	adds	r2, r6, #1
    8dac:	185e      	adds	r6, r3, r1
    8dae:	f806 5c20 	strb.w	r5, [r6, #-32]
    8db2:	b2d6      	uxtb	r6, r2
    8db4:	e72a      	b.n	8c0c <cbprintf_package_convert+0x204>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    8db6:	f1b8 0f0f 	cmp.w	r8, #15
    8dba:	d909      	bls.n	8dd0 <cbprintf_package_convert+0x3c8>
    8dbc:	492c      	ldr	r1, [pc, #176]	; (8e70 <cbprintf_package_convert+0x468>)
    8dbe:	f240 434b 	movw	r3, #1099	; 0x44b
    8dc2:	4a29      	ldr	r2, [pc, #164]	; (8e68 <cbprintf_package_convert+0x460>)
    8dc4:	4829      	ldr	r0, [pc, #164]	; (8e6c <cbprintf_package_convert+0x464>)
    8dc6:	f012 fa31 	bl	1b22c <assert_print>
    8dca:	f240 414b 	movw	r1, #1099	; 0x44b
    8dce:	e62f      	b.n	8a30 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    8dd0:	f108 0328 	add.w	r3, r8, #40	; 0x28
    8dd4:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8dd8:	f108 0201 	add.w	r2, r8, #1
    8ddc:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
    8dde:	f107 0350 	add.w	r3, r7, #80	; 0x50
    8de2:	f108 0802 	add.w	r8, r8, #2
    8de6:	fa53 f282 	uxtab	r2, r3, r2
				keep_str_pos[keep_cnt++] = arg_idx;
    8dea:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    8dee:	fa5f f888 	uxtb.w	r8, r8
    8df2:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    8df6:	e709      	b.n	8c0c <cbprintf_package_convert+0x204>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8df8:	2000      	movs	r0, #0
    8dfa:	e720      	b.n	8c3e <cbprintf_package_convert+0x236>
		uint8_t loc = cpy_str_pos[i];
    8dfc:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    8e00:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    8e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    8e08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8e0a:	b1fb      	cbz	r3, 8e4c <cbprintf_package_convert+0x444>
    8e0c:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    8e10:	2101      	movs	r1, #1
    8e12:	69ba      	ldr	r2, [r7, #24]
    8e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e16:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    8e1a:	4798      	blx	r3
		if (rv < 0) {
    8e1c:	2800      	cmp	r0, #0
    8e1e:	db1a      	blt.n	8e56 <cbprintf_package_convert+0x44e>
		out_len += rv;
    8e20:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    8e22:	f1b8 0f00 	cmp.w	r8, #0
    8e26:	d106      	bne.n	8e36 <cbprintf_package_convert+0x42e>
    8e28:	4648      	mov	r0, r9
    8e2a:	f013 f9cf 	bl	1c1cc <strlen>
    8e2e:	f100 0801 	add.w	r8, r0, #1
    8e32:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    8e36:	4641      	mov	r1, r8
    8e38:	4648      	mov	r0, r9
    8e3a:	69ba      	ldr	r2, [r7, #24]
    8e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e3e:	4798      	blx	r3
		if (rv < 0) {
    8e40:	2800      	cmp	r0, #0
    8e42:	db08      	blt.n	8e56 <cbprintf_package_convert+0x44e>
		out_len += rv;
    8e44:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    8e46:	f10b 0b01 	add.w	fp, fp, #1
    8e4a:	e72f      	b.n	8cac <cbprintf_package_convert+0x2a4>
		uint16_t str_len = strl ? strl[i] : 0;
    8e4c:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    8e50:	e7de      	b.n	8e10 <cbprintf_package_convert+0x408>
    8e52:	4645      	mov	r5, r8
    8e54:	e613      	b.n	8a7e <cbprintf_package_convert+0x76>
    8e56:	4605      	mov	r5, r0
    8e58:	e611      	b.n	8a7e <cbprintf_package_convert+0x76>
    8e5a:	bf00      	nop
    8e5c:	0001e934 	.word	0x0001e934
    8e60:	00023a30 	.word	0x00023a30
    8e64:	0001fad7 	.word	0x0001fad7
    8e68:	0001f967 	.word	0x0001f967
    8e6c:	0001f995 	.word	0x0001f995
    8e70:	0001faf6 	.word	0x0001faf6

00008e74 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    8e74:	4b01      	ldr	r3, [pc, #4]	; (8e7c <char_out+0x8>)
    8e76:	681b      	ldr	r3, [r3, #0]
    8e78:	4718      	bx	r3
    8e7a:	bf00      	nop
    8e7c:	20008180 	.word	0x20008180

00008e80 <__printk_hook_install>:
	_char_out = fn;
    8e80:	4b01      	ldr	r3, [pc, #4]	; (8e88 <__printk_hook_install+0x8>)
    8e82:	6018      	str	r0, [r3, #0]
}
    8e84:	4770      	bx	lr
    8e86:	bf00      	nop
    8e88:	20008180 	.word	0x20008180

00008e8c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    8e8c:	b507      	push	{r0, r1, r2, lr}
    8e8e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8e90:	2100      	movs	r1, #0
    8e92:	4602      	mov	r2, r0
    8e94:	9100      	str	r1, [sp, #0]
    8e96:	4803      	ldr	r0, [pc, #12]	; (8ea4 <vprintk+0x18>)
    8e98:	f000 fc38 	bl	970c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    8e9c:	b003      	add	sp, #12
    8e9e:	f85d fb04 	ldr.w	pc, [sp], #4
    8ea2:	bf00      	nop
    8ea4:	00008e75 	.word	0x00008e75

00008ea8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    8ea8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    8eaa:	2500      	movs	r5, #0
{
    8eac:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    8eae:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    8eb2:	4604      	mov	r4, r0
    8eb4:	9500      	str	r5, [sp, #0]
    8eb6:	a903      	add	r1, sp, #12
    8eb8:	4805      	ldr	r0, [pc, #20]	; (8ed0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    8eba:	9505      	str	r5, [sp, #20]
    8ebc:	f000 fc26 	bl	970c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    8ec0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    8ec4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    8ec6:	bfb8      	it	lt
    8ec8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    8eca:	b007      	add	sp, #28
    8ecc:	bd30      	pop	{r4, r5, pc}
    8ece:	bf00      	nop
    8ed0:	0001adf7 	.word	0x0001adf7

00008ed4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    8ed4:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    8ed6:	460c      	mov	r4, r1
    8ed8:	2900      	cmp	r1, #0
    8eda:	d034      	beq.n	8f46 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    8edc:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8ede:	1f0b      	subs	r3, r1, #4
    8ee0:	1a9b      	subs	r3, r3, r2
    8ee2:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    8ee4:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    8ee8:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8eea:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    8eec:	07e8      	lsls	r0, r5, #31
    8eee:	d40d      	bmi.n	8f0c <sys_heap_free+0x38>
    8ef0:	23af      	movs	r3, #175	; 0xaf
    8ef2:	4a15      	ldr	r2, [pc, #84]	; (8f48 <sys_heap_free+0x74>)
    8ef4:	4915      	ldr	r1, [pc, #84]	; (8f4c <sys_heap_free+0x78>)
    8ef6:	4816      	ldr	r0, [pc, #88]	; (8f50 <sys_heap_free+0x7c>)
    8ef8:	f012 f998 	bl	1b22c <assert_print>
    8efc:	4621      	mov	r1, r4
    8efe:	4815      	ldr	r0, [pc, #84]	; (8f54 <sys_heap_free+0x80>)
    8f00:	f012 f994 	bl	1b22c <assert_print>
    8f04:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    8f06:	4810      	ldr	r0, [pc, #64]	; (8f48 <sys_heap_free+0x74>)
    8f08:	f012 f989 	bl	1b21e <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    8f0c:	4610      	mov	r0, r2
    8f0e:	f011 ffa9 	bl	1ae64 <chunk_size>
    8f12:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    8f14:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8f18:	1b80      	subs	r0, r0, r6
    8f1a:	4281      	cmp	r1, r0
    8f1c:	d00b      	beq.n	8f36 <sys_heap_free+0x62>
    8f1e:	23b7      	movs	r3, #183	; 0xb7
    8f20:	4a09      	ldr	r2, [pc, #36]	; (8f48 <sys_heap_free+0x74>)
    8f22:	490d      	ldr	r1, [pc, #52]	; (8f58 <sys_heap_free+0x84>)
    8f24:	480a      	ldr	r0, [pc, #40]	; (8f50 <sys_heap_free+0x7c>)
    8f26:	f012 f981 	bl	1b22c <assert_print>
    8f2a:	4621      	mov	r1, r4
    8f2c:	480b      	ldr	r0, [pc, #44]	; (8f5c <sys_heap_free+0x88>)
    8f2e:	f012 f97d 	bl	1b22c <assert_print>
    8f32:	21b7      	movs	r1, #183	; 0xb7
    8f34:	e7e7      	b.n	8f06 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    8f36:	f025 0501 	bic.w	r5, r5, #1
    8f3a:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    8f3c:	4610      	mov	r0, r2
}
    8f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    8f42:	f012 b84c 	b.w	1afde <free_chunk>
}
    8f46:	bd70      	pop	{r4, r5, r6, pc}
    8f48:	0001fb27 	.word	0x0001fb27
    8f4c:	0001fb48 	.word	0x0001fb48
    8f50:	0001f995 	.word	0x0001f995
    8f54:	0001fb59 	.word	0x0001fb59
    8f58:	0001fb91 	.word	0x0001fb91
    8f5c:	0001fbb7 	.word	0x0001fbb7

00008f60 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    8f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f64:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    8f66:	400b      	ands	r3, r1
{
    8f68:	460f      	mov	r7, r1
    8f6a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    8f6c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    8f6e:	d010      	beq.n	8f92 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    8f70:	f1c1 0900 	rsb	r9, r1, #0
    8f74:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    8f78:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    8f7a:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    8f7c:	2a04      	cmp	r2, #4
    8f7e:	bf28      	it	cs
    8f80:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    8f82:	4219      	tst	r1, r3
    8f84:	d10c      	bne.n	8fa0 <sys_heap_aligned_alloc+0x40>
    8f86:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    8f88:	b9e4      	cbnz	r4, 8fc4 <sys_heap_aligned_alloc+0x64>
		return NULL;
    8f8a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    8f8c:	4628      	mov	r0, r5
    8f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    8f92:	2904      	cmp	r1, #4
    8f94:	d813      	bhi.n	8fbe <sys_heap_aligned_alloc+0x5e>
}
    8f96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    8f9a:	4611      	mov	r1, r2
    8f9c:	f012 b850 	b.w	1b040 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    8fa0:	492c      	ldr	r1, [pc, #176]	; (9054 <sys_heap_aligned_alloc+0xf4>)
    8fa2:	f44f 73a2 	mov.w	r3, #324	; 0x144
    8fa6:	4a2c      	ldr	r2, [pc, #176]	; (9058 <sys_heap_aligned_alloc+0xf8>)
    8fa8:	482c      	ldr	r0, [pc, #176]	; (905c <sys_heap_aligned_alloc+0xfc>)
    8faa:	f012 f93f 	bl	1b22c <assert_print>
    8fae:	482c      	ldr	r0, [pc, #176]	; (9060 <sys_heap_aligned_alloc+0x100>)
    8fb0:	f012 f93c 	bl	1b22c <assert_print>
    8fb4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8fb8:	4827      	ldr	r0, [pc, #156]	; (9058 <sys_heap_aligned_alloc+0xf8>)
    8fba:	f012 f930 	bl	1b21e <assert_post_action>
		rew = 0;
    8fbe:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    8fc0:	2204      	movs	r2, #4
    8fc2:	e7e1      	b.n	8f88 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    8fc4:	68b3      	ldr	r3, [r6, #8]
    8fc6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    8fca:	d9de      	bls.n	8f8a <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8fcc:	f104 010b 	add.w	r1, r4, #11
    8fd0:	4439      	add	r1, r7
    8fd2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    8fd4:	4630      	mov	r0, r6
    8fd6:	08c9      	lsrs	r1, r1, #3
    8fd8:	f011 ff9a 	bl	1af10 <alloc_chunk>
	if (c0 == 0) {
    8fdc:	4680      	mov	r8, r0
    8fde:	2800      	cmp	r0, #0
    8fe0:	d0d3      	beq.n	8f8a <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    8fe2:	f109 0504 	add.w	r5, r9, #4
    8fe6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    8fea:	1e7b      	subs	r3, r7, #1
    8fec:	4435      	add	r5, r6
    8fee:	441d      	add	r5, r3
    8ff0:	427f      	negs	r7, r7
    8ff2:	403d      	ands	r5, r7
    8ff4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8ff8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8ffa:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8ffc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8ffe:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9000:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9004:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9006:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    900a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    900e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9012:	d208      	bcs.n	9026 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    9014:	4601      	mov	r1, r0
    9016:	463a      	mov	r2, r7
    9018:	4630      	mov	r0, r6
    901a:	f011 ffc6 	bl	1afaa <split_chunks>
		free_list_add(h, c0);
    901e:	4641      	mov	r1, r8
    9020:	4630      	mov	r0, r6
    9022:	f011 ff24 	bl	1ae6e <free_list_add>
	return c + chunk_size(h, c);
    9026:	4639      	mov	r1, r7
    9028:	4630      	mov	r0, r6
    902a:	f011 ff1b 	bl	1ae64 <chunk_size>
    902e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    9030:	4284      	cmp	r4, r0
    9032:	d207      	bcs.n	9044 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    9034:	4630      	mov	r0, r6
    9036:	4622      	mov	r2, r4
    9038:	f011 ffb7 	bl	1afaa <split_chunks>
		free_list_add(h, c_end);
    903c:	4621      	mov	r1, r4
    903e:	4630      	mov	r0, r6
    9040:	f011 ff15 	bl	1ae6e <free_list_add>
	void *cmem = &buf[c];
    9044:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9048:	8873      	ldrh	r3, [r6, #2]
    904a:	f043 0301 	orr.w	r3, r3, #1
    904e:	8073      	strh	r3, [r6, #2]
    9050:	e79c      	b.n	8f8c <sys_heap_aligned_alloc+0x2c>
    9052:	bf00      	nop
    9054:	0001fbf3 	.word	0x0001fbf3
    9058:	0001fb27 	.word	0x0001fb27
    905c:	0001f995 	.word	0x0001f995
    9060:	0001fc0e 	.word	0x0001fc0e

00009064 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    9064:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    9068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    906a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    906c:	d30e      	bcc.n	908c <sys_heap_init+0x28>
    906e:	493a      	ldr	r1, [pc, #232]	; (9158 <sys_heap_init+0xf4>)
    9070:	f240 13eb 	movw	r3, #491	; 0x1eb
    9074:	4a39      	ldr	r2, [pc, #228]	; (915c <sys_heap_init+0xf8>)
    9076:	483a      	ldr	r0, [pc, #232]	; (9160 <sys_heap_init+0xfc>)
    9078:	f012 f8d8 	bl	1b22c <assert_print>
    907c:	4839      	ldr	r0, [pc, #228]	; (9164 <sys_heap_init+0x100>)
    907e:	f012 f8d5 	bl	1b22c <assert_print>
    9082:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    9086:	4835      	ldr	r0, [pc, #212]	; (915c <sys_heap_init+0xf8>)
    9088:	f012 f8c9 	bl	1b21e <assert_post_action>
    908c:	2a04      	cmp	r2, #4
    908e:	d80c      	bhi.n	90aa <sys_heap_init+0x46>
    9090:	4935      	ldr	r1, [pc, #212]	; (9168 <sys_heap_init+0x104>)
    9092:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    9096:	4a31      	ldr	r2, [pc, #196]	; (915c <sys_heap_init+0xf8>)
    9098:	4831      	ldr	r0, [pc, #196]	; (9160 <sys_heap_init+0xfc>)
    909a:	f012 f8c7 	bl	1b22c <assert_print>
    909e:	4833      	ldr	r0, [pc, #204]	; (916c <sys_heap_init+0x108>)
    90a0:	f012 f8c4 	bl	1b22c <assert_print>
    90a4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    90a8:	e7ed      	b.n	9086 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    90aa:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    90ac:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    90ae:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    90b0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    90b4:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    90b8:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    90ba:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    90bc:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    90c0:	d80c      	bhi.n	90dc <sys_heap_init+0x78>
    90c2:	492b      	ldr	r1, [pc, #172]	; (9170 <sys_heap_init+0x10c>)
    90c4:	f240 13fb 	movw	r3, #507	; 0x1fb
    90c8:	4a24      	ldr	r2, [pc, #144]	; (915c <sys_heap_init+0xf8>)
    90ca:	4825      	ldr	r0, [pc, #148]	; (9160 <sys_heap_init+0xfc>)
    90cc:	f012 f8ae 	bl	1b22c <assert_print>
    90d0:	4826      	ldr	r0, [pc, #152]	; (916c <sys_heap_init+0x108>)
    90d2:	f012 f8ab 	bl	1b22c <assert_print>
    90d6:	f240 11fb 	movw	r1, #507	; 0x1fb
    90da:	e7d4      	b.n	9086 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    90dc:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    90e0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    90e2:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    90e4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    90e8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    90ec:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    90ee:	3107      	adds	r1, #7
    90f0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    90f2:	1c4d      	adds	r5, r1, #1
    90f4:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    90f6:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    90f8:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    90fa:	d90c      	bls.n	9116 <sys_heap_init+0xb2>
    90fc:	491d      	ldr	r1, [pc, #116]	; (9174 <sys_heap_init+0x110>)
    90fe:	f44f 7303 	mov.w	r3, #524	; 0x20c
    9102:	4a16      	ldr	r2, [pc, #88]	; (915c <sys_heap_init+0xf8>)
    9104:	4816      	ldr	r0, [pc, #88]	; (9160 <sys_heap_init+0xfc>)
    9106:	f012 f891 	bl	1b22c <assert_print>
    910a:	4818      	ldr	r0, [pc, #96]	; (916c <sys_heap_init+0x108>)
    910c:	f012 f88e 	bl	1b22c <assert_print>
    9110:	f44f 7103 	mov.w	r1, #524	; 0x20c
    9114:	e7b7      	b.n	9086 <sys_heap_init+0x22>
    9116:	f100 050c 	add.w	r5, r0, #12
    911a:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    911e:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    9122:	42b5      	cmp	r5, r6
    9124:	d1fb      	bne.n	911e <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9126:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9128:	f045 0501 	orr.w	r5, r5, #1
    912c:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    912e:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    9130:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9134:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    9136:	8004      	strh	r4, [r0, #0]
    9138:	8077      	strh	r7, [r6, #2]
    913a:	1886      	adds	r6, r0, r2
    913c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    9140:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    9144:	8074      	strh	r4, [r6, #2]
    9146:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9148:	885a      	ldrh	r2, [r3, #2]
    914a:	f042 0201 	orr.w	r2, r2, #1
    914e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    9150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    9154:	f011 be8b 	b.w	1ae6e <free_list_add>
    9158:	0001fc2b 	.word	0x0001fc2b
    915c:	0001fb27 	.word	0x0001fb27
    9160:	0001f995 	.word	0x0001f995
    9164:	0001fc41 	.word	0x0001fc41
    9168:	0001fc58 	.word	0x0001fc58
    916c:	0001fc79 	.word	0x0001fc79
    9170:	0001fc92 	.word	0x0001fc92
    9174:	0001fcbb 	.word	0x0001fcbb

00009178 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    917c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    917e:	8ba3      	ldrh	r3, [r4, #28]
{
    9180:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9182:	0719      	lsls	r1, r3, #28
{
    9184:	4615      	mov	r5, r2
	if (processing) {
    9186:	d412      	bmi.n	91ae <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    9188:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    918a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    918e:	d164      	bne.n	925a <process_event+0xe2>
			evt = process_recheck(mgr);
    9190:	4620      	mov	r0, r4
    9192:	f011 ff7e 	bl	1b092 <process_recheck>
		}

		if (evt == EVT_NOP) {
    9196:	b188      	cbz	r0, 91bc <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    9198:	3801      	subs	r0, #1
    919a:	2804      	cmp	r0, #4
    919c:	f200 8134 	bhi.w	9408 <process_event+0x290>
    91a0:	e8df f010 	tbh	[pc, r0, lsl #1]
    91a4:	0132005b 	.word	0x0132005b
    91a8:	00d10081 	.word	0x00d10081
    91ac:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    91ae:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    91b0:	bf0c      	ite	eq
    91b2:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    91b6:	f043 0120 	orrne.w	r1, r3, #32
    91ba:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    91bc:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    91be:	4620      	mov	r0, r4
    91c0:	f00e fa80 	bl	176c4 <z_spin_unlock_valid>
    91c4:	2800      	cmp	r0, #0
    91c6:	f040 819b 	bne.w	9500 <process_event+0x388>
    91ca:	4998      	ldr	r1, [pc, #608]	; (942c <process_event+0x2b4>)
    91cc:	23c2      	movs	r3, #194	; 0xc2
    91ce:	4a98      	ldr	r2, [pc, #608]	; (9430 <process_event+0x2b8>)
    91d0:	4898      	ldr	r0, [pc, #608]	; (9434 <process_event+0x2bc>)
    91d2:	f012 f82b 	bl	1b22c <assert_print>
    91d6:	4621      	mov	r1, r4
    91d8:	e0b0      	b.n	933c <process_event+0x1c4>
    91da:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    91de:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    91e0:	2801      	cmp	r0, #1
    91e2:	d81e      	bhi.n	9222 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    91e4:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    91e6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    91e8:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    91ea:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    91ee:	d114      	bne.n	921a <process_event+0xa2>
		*clients = mgr->clients;
    91f0:	463a      	mov	r2, r7
    91f2:	e003      	b.n	91fc <process_event+0x84>
				mgr->refs += 1U;
    91f4:	8be0      	ldrh	r0, [r4, #30]
    91f6:	3001      	adds	r0, #1
    91f8:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    91fa:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    91fc:	2a00      	cmp	r2, #0
    91fe:	d1f9      	bne.n	91f4 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9200:	f023 0307 	bic.w	r3, r3, #7
    9204:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    9208:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    920a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    920c:	f011 ff41 	bl	1b092 <process_recheck>
    9210:	b390      	cbz	r0, 9278 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9212:	f042 0220 	orr.w	r2, r2, #32
    9216:	83a2      	strh	r2, [r4, #28]
    9218:	e02e      	b.n	9278 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    921a:	f023 0307 	bic.w	r3, r3, #7
    921e:	b29a      	uxth	r2, r3
}
    9220:	e7f2      	b.n	9208 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9222:	2a04      	cmp	r2, #4
    9224:	d133      	bne.n	928e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9226:	f023 0307 	bic.w	r3, r3, #7
    922a:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    922c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    922e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9230:	f011 ff2f 	bl	1b092 <process_recheck>
    9234:	b110      	cbz	r0, 923c <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9236:	f042 0220 	orr.w	r2, r2, #32
    923a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    923c:	8ba3      	ldrh	r3, [r4, #28]
    923e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9242:	4589      	cmp	r9, r1
    9244:	f040 80ea 	bne.w	941c <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9248:	8ba1      	ldrh	r1, [r4, #28]
    924a:	06ca      	lsls	r2, r1, #27
    924c:	f140 814f 	bpl.w	94ee <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9250:	f021 0310 	bic.w	r3, r1, #16
    9254:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    9256:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    925a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    925e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    9260:	f1b8 0f00 	cmp.w	r8, #0
    9264:	dab9      	bge.n	91da <process_event+0x62>
	list->head = NULL;
    9266:	2200      	movs	r2, #0
		*clients = mgr->clients;
    9268:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    926a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    926e:	e9c4 2200 	strd	r2, r2, [r4]
    9272:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9276:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9278:	8ba3      	ldrh	r3, [r4, #28]
    927a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    927e:	4589      	cmp	r9, r1
    9280:	f040 80cd 	bne.w	941e <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    9284:	2f00      	cmp	r7, #0
    9286:	d0df      	beq.n	9248 <process_event+0xd0>
    9288:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    928a:	46b2      	mov	sl, r6
    928c:	e044      	b.n	9318 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    928e:	496a      	ldr	r1, [pc, #424]	; (9438 <process_event+0x2c0>)
    9290:	f240 131b 	movw	r3, #283	; 0x11b
    9294:	4a69      	ldr	r2, [pc, #420]	; (943c <process_event+0x2c4>)
    9296:	4867      	ldr	r0, [pc, #412]	; (9434 <process_event+0x2bc>)
    9298:	f011 ffc8 	bl	1b22c <assert_print>
    929c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    92a0:	4866      	ldr	r0, [pc, #408]	; (943c <process_event+0x2c4>)
    92a2:	f011 ffbc 	bl	1b21e <assert_post_action>
    92a6:	b149      	cbz	r1, 92bc <process_event+0x144>
    92a8:	4965      	ldr	r1, [pc, #404]	; (9440 <process_event+0x2c8>)
    92aa:	f44f 73ab 	mov.w	r3, #342	; 0x156
    92ae:	4a63      	ldr	r2, [pc, #396]	; (943c <process_event+0x2c4>)
    92b0:	4860      	ldr	r0, [pc, #384]	; (9434 <process_event+0x2bc>)
    92b2:	f011 ffbb 	bl	1b22c <assert_print>
    92b6:	f44f 71ab 	mov.w	r1, #342	; 0x156
    92ba:	e7f1      	b.n	92a0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    92bc:	6823      	ldr	r3, [r4, #0]
    92be:	b94b      	cbnz	r3, 92d4 <process_event+0x15c>
    92c0:	4960      	ldr	r1, [pc, #384]	; (9444 <process_event+0x2cc>)
    92c2:	f240 1357 	movw	r3, #343	; 0x157
    92c6:	4a5d      	ldr	r2, [pc, #372]	; (943c <process_event+0x2c4>)
    92c8:	485a      	ldr	r0, [pc, #360]	; (9434 <process_event+0x2bc>)
    92ca:	f011 ffaf 	bl	1b22c <assert_print>
    92ce:	f240 1157 	movw	r1, #343	; 0x157
    92d2:	e7e5      	b.n	92a0 <process_event+0x128>
			transit = mgr->transitions->start;
    92d4:	6923      	ldr	r3, [r4, #16]
    92d6:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    92d8:	b94e      	cbnz	r6, 92ee <process_event+0x176>
    92da:	495b      	ldr	r1, [pc, #364]	; (9448 <process_event+0x2d0>)
    92dc:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    92e0:	4a56      	ldr	r2, [pc, #344]	; (943c <process_event+0x2c4>)
    92e2:	4854      	ldr	r0, [pc, #336]	; (9434 <process_event+0x2bc>)
    92e4:	f011 ffa2 	bl	1b22c <assert_print>
    92e8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    92ec:	e7d8      	b.n	92a0 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    92ee:	460f      	mov	r7, r1
		res = 0;
    92f0:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    92f2:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    92f6:	8ba3      	ldrh	r3, [r4, #28]
    92f8:	f023 0307 	bic.w	r3, r3, #7
    92fc:	f043 0306 	orr.w	r3, r3, #6
    9300:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    9302:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    9304:	68a2      	ldr	r2, [r4, #8]
    9306:	2a00      	cmp	r2, #0
    9308:	f040 808b 	bne.w	9422 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    930c:	2f00      	cmp	r7, #0
    930e:	f040 808b 	bne.w	9428 <process_event+0x2b0>
		    || (transit != NULL)) {
    9312:	2e00      	cmp	r6, #0
    9314:	d098      	beq.n	9248 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9316:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9318:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    931c:	f104 0b14 	add.w	fp, r4, #20
    9320:	4658      	mov	r0, fp
			mgr->flags = flags;
    9322:	83a3      	strh	r3, [r4, #28]
    9324:	f00e f9ce 	bl	176c4 <z_spin_unlock_valid>
    9328:	2800      	cmp	r0, #0
    932a:	f040 8097 	bne.w	945c <process_event+0x2e4>
    932e:	493f      	ldr	r1, [pc, #252]	; (942c <process_event+0x2b4>)
    9330:	23c2      	movs	r3, #194	; 0xc2
    9332:	4a3f      	ldr	r2, [pc, #252]	; (9430 <process_event+0x2b8>)
    9334:	483f      	ldr	r0, [pc, #252]	; (9434 <process_event+0x2bc>)
    9336:	f011 ff79 	bl	1b22c <assert_print>
    933a:	4659      	mov	r1, fp
    933c:	4843      	ldr	r0, [pc, #268]	; (944c <process_event+0x2d4>)
    933e:	f011 ff75 	bl	1b22c <assert_print>
    9342:	21c2      	movs	r1, #194	; 0xc2
    9344:	e0ae      	b.n	94a4 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    9346:	2902      	cmp	r1, #2
    9348:	d009      	beq.n	935e <process_event+0x1e6>
    934a:	4941      	ldr	r1, [pc, #260]	; (9450 <process_event+0x2d8>)
    934c:	f240 135d 	movw	r3, #349	; 0x15d
    9350:	4a3a      	ldr	r2, [pc, #232]	; (943c <process_event+0x2c4>)
    9352:	4838      	ldr	r0, [pc, #224]	; (9434 <process_event+0x2bc>)
    9354:	f011 ff6a 	bl	1b22c <assert_print>
    9358:	f240 115d 	movw	r1, #349	; 0x15d
    935c:	e7a0      	b.n	92a0 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    935e:	8be7      	ldrh	r7, [r4, #30]
    9360:	b14f      	cbz	r7, 9376 <process_event+0x1fe>
    9362:	493c      	ldr	r1, [pc, #240]	; (9454 <process_event+0x2dc>)
    9364:	f44f 73af 	mov.w	r3, #350	; 0x15e
    9368:	4a34      	ldr	r2, [pc, #208]	; (943c <process_event+0x2c4>)
    936a:	4832      	ldr	r0, [pc, #200]	; (9434 <process_event+0x2bc>)
    936c:	f011 ff5e 	bl	1b22c <assert_print>
    9370:	f44f 71af 	mov.w	r1, #350	; 0x15e
    9374:	e794      	b.n	92a0 <process_event+0x128>
			transit = mgr->transitions->stop;
    9376:	6923      	ldr	r3, [r4, #16]
    9378:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    937a:	b94e      	cbnz	r6, 9390 <process_event+0x218>
    937c:	4932      	ldr	r1, [pc, #200]	; (9448 <process_event+0x2d0>)
    937e:	f240 1361 	movw	r3, #353	; 0x161
    9382:	4a2e      	ldr	r2, [pc, #184]	; (943c <process_event+0x2c4>)
    9384:	482b      	ldr	r0, [pc, #172]	; (9434 <process_event+0x2bc>)
    9386:	f011 ff51 	bl	1b22c <assert_print>
    938a:	f240 1161 	movw	r1, #353	; 0x161
    938e:	e787      	b.n	92a0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9390:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    9392:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9394:	f023 0307 	bic.w	r3, r3, #7
    9398:	f043 0304 	orr.w	r3, r3, #4
    939c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    939e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    93a2:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    93a4:	e7ae      	b.n	9304 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    93a6:	2901      	cmp	r1, #1
    93a8:	d009      	beq.n	93be <process_event+0x246>
    93aa:	492b      	ldr	r1, [pc, #172]	; (9458 <process_event+0x2e0>)
    93ac:	f44f 73b2 	mov.w	r3, #356	; 0x164
    93b0:	4a22      	ldr	r2, [pc, #136]	; (943c <process_event+0x2c4>)
    93b2:	4820      	ldr	r0, [pc, #128]	; (9434 <process_event+0x2bc>)
    93b4:	f011 ff3a 	bl	1b22c <assert_print>
    93b8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    93bc:	e770      	b.n	92a0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    93be:	6823      	ldr	r3, [r4, #0]
    93c0:	b94b      	cbnz	r3, 93d6 <process_event+0x25e>
    93c2:	4920      	ldr	r1, [pc, #128]	; (9444 <process_event+0x2cc>)
    93c4:	f240 1365 	movw	r3, #357	; 0x165
    93c8:	4a1c      	ldr	r2, [pc, #112]	; (943c <process_event+0x2c4>)
    93ca:	481a      	ldr	r0, [pc, #104]	; (9434 <process_event+0x2bc>)
    93cc:	f011 ff2e 	bl	1b22c <assert_print>
    93d0:	f240 1165 	movw	r1, #357	; 0x165
    93d4:	e764      	b.n	92a0 <process_event+0x128>
			transit = mgr->transitions->reset;
    93d6:	6923      	ldr	r3, [r4, #16]
    93d8:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    93da:	b94e      	cbnz	r6, 93f0 <process_event+0x278>
    93dc:	491a      	ldr	r1, [pc, #104]	; (9448 <process_event+0x2d0>)
    93de:	f44f 73b4 	mov.w	r3, #360	; 0x168
    93e2:	4a16      	ldr	r2, [pc, #88]	; (943c <process_event+0x2c4>)
    93e4:	4813      	ldr	r0, [pc, #76]	; (9434 <process_event+0x2bc>)
    93e6:	f011 ff21 	bl	1b22c <assert_print>
    93ea:	f44f 71b4 	mov.w	r1, #360	; 0x168
    93ee:	e757      	b.n	92a0 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    93f0:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    93f2:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    93f4:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    93f6:	f023 0307 	bic.w	r3, r3, #7
    93fa:	f043 0305 	orr.w	r3, r3, #5
    93fe:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9400:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    9404:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9406:	e77d      	b.n	9304 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    9408:	490b      	ldr	r1, [pc, #44]	; (9438 <process_event+0x2c0>)
    940a:	f240 136b 	movw	r3, #363	; 0x16b
    940e:	4a0b      	ldr	r2, [pc, #44]	; (943c <process_event+0x2c4>)
    9410:	4808      	ldr	r0, [pc, #32]	; (9434 <process_event+0x2bc>)
    9412:	f011 ff0b 	bl	1b22c <assert_print>
    9416:	f240 116b 	movw	r1, #363	; 0x16b
    941a:	e741      	b.n	92a0 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    941c:	2700      	movs	r7, #0
    941e:	2600      	movs	r6, #0
    9420:	e770      	b.n	9304 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9422:	f04f 0a01 	mov.w	sl, #1
    9426:	e777      	b.n	9318 <process_event+0x1a0>
    9428:	4692      	mov	sl, r2
    942a:	e775      	b.n	9318 <process_event+0x1a0>
    942c:	0001fdb6 	.word	0x0001fdb6
    9430:	0001fd89 	.word	0x0001fd89
    9434:	0001f995 	.word	0x0001f995
    9438:	00022960 	.word	0x00022960
    943c:	0001fce6 	.word	0x0001fce6
    9440:	0001fd08 	.word	0x0001fd08
    9444:	0001fd14 	.word	0x0001fd14
    9448:	0001fd37 	.word	0x0001fd37
    944c:	0001fdcd 	.word	0x0001fdcd
    9450:	0001fd4e 	.word	0x0001fd4e
    9454:	0001fd64 	.word	0x0001fd64
    9458:	0001fd73 	.word	0x0001fd73
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    945c:	f385 8811 	msr	BASEPRI, r5
    9460:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    9464:	f1ba 0f00 	cmp.w	sl, #0
    9468:	d11e      	bne.n	94a8 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    946a:	2f00      	cmp	r7, #0
    946c:	d12f      	bne.n	94ce <process_event+0x356>
			if (transit != NULL) {
    946e:	b116      	cbz	r6, 9476 <process_event+0x2fe>
				transit(mgr, transition_complete);
    9470:	4620      	mov	r0, r4
    9472:	4926      	ldr	r1, [pc, #152]	; (950c <process_event+0x394>)
    9474:	47b0      	blx	r6
	__asm__ volatile(
    9476:	f04f 0320 	mov.w	r3, #32
    947a:	f3ef 8511 	mrs	r5, BASEPRI
    947e:	f383 8812 	msr	BASEPRI_MAX, r3
    9482:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9486:	4658      	mov	r0, fp
    9488:	f00e f90e 	bl	176a8 <z_spin_lock_valid>
    948c:	bb38      	cbnz	r0, 94de <process_event+0x366>
    948e:	2394      	movs	r3, #148	; 0x94
    9490:	4a1f      	ldr	r2, [pc, #124]	; (9510 <process_event+0x398>)
    9492:	4920      	ldr	r1, [pc, #128]	; (9514 <process_event+0x39c>)
    9494:	4820      	ldr	r0, [pc, #128]	; (9518 <process_event+0x3a0>)
    9496:	f011 fec9 	bl	1b22c <assert_print>
    949a:	4659      	mov	r1, fp
    949c:	481f      	ldr	r0, [pc, #124]	; (951c <process_event+0x3a4>)
    949e:	f011 fec5 	bl	1b22c <assert_print>
    94a2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    94a4:	481a      	ldr	r0, [pc, #104]	; (9510 <process_event+0x398>)
    94a6:	e6fc      	b.n	92a2 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    94a8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    94aa:	2900      	cmp	r1, #0
    94ac:	d0dd      	beq.n	946a <process_event+0x2f2>
	return node->next;
    94ae:	680d      	ldr	r5, [r1, #0]
    94b0:	2900      	cmp	r1, #0
    94b2:	d0da      	beq.n	946a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    94b4:	4643      	mov	r3, r8
    94b6:	464a      	mov	r2, r9
    94b8:	4620      	mov	r0, r4
    94ba:	f8d1 a004 	ldr.w	sl, [r1, #4]
    94be:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    94c0:	b11d      	cbz	r5, 94ca <process_event+0x352>
    94c2:	682b      	ldr	r3, [r5, #0]
    94c4:	4629      	mov	r1, r5
    94c6:	461d      	mov	r5, r3
    94c8:	e7f2      	b.n	94b0 <process_event+0x338>
    94ca:	462b      	mov	r3, r5
    94cc:	e7fa      	b.n	94c4 <process_event+0x34c>
    94ce:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    94d0:	4643      	mov	r3, r8
    94d2:	464a      	mov	r2, r9
    94d4:	4620      	mov	r0, r4
    94d6:	683f      	ldr	r7, [r7, #0]
    94d8:	f011 fe07 	bl	1b0ea <notify_one>
    94dc:	e7c5      	b.n	946a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    94de:	4658      	mov	r0, fp
    94e0:	f00e f8fe 	bl	176e0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    94e4:	8ba3      	ldrh	r3, [r4, #28]
    94e6:	f023 0308 	bic.w	r3, r3, #8
    94ea:	83a3      	strh	r3, [r4, #28]
    94ec:	e6ac      	b.n	9248 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    94ee:	068b      	lsls	r3, r1, #26
    94f0:	f57f ae64 	bpl.w	91bc <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    94f4:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    94f8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    94fa:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    94fe:	e647      	b.n	9190 <process_event+0x18>
	__asm__ volatile(
    9500:	f385 8811 	msr	BASEPRI, r5
    9504:	f3bf 8f6f 	isb	sy
}
    9508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    950c:	00009521 	.word	0x00009521
    9510:	0001fd89 	.word	0x0001fd89
    9514:	0001fde2 	.word	0x0001fde2
    9518:	0001f995 	.word	0x0001f995
    951c:	0001fdf7 	.word	0x0001fdf7

00009520 <transition_complete>:
{
    9520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9522:	4604      	mov	r4, r0
    9524:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    9526:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    952a:	f04f 0320 	mov.w	r3, #32
    952e:	f3ef 8711 	mrs	r7, BASEPRI
    9532:	f383 8812 	msr	BASEPRI_MAX, r3
    9536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    953a:	4630      	mov	r0, r6
    953c:	f00e f8b4 	bl	176a8 <z_spin_lock_valid>
    9540:	b968      	cbnz	r0, 955e <transition_complete+0x3e>
    9542:	2394      	movs	r3, #148	; 0x94
    9544:	4a0b      	ldr	r2, [pc, #44]	; (9574 <transition_complete+0x54>)
    9546:	490c      	ldr	r1, [pc, #48]	; (9578 <transition_complete+0x58>)
    9548:	480c      	ldr	r0, [pc, #48]	; (957c <transition_complete+0x5c>)
    954a:	f011 fe6f 	bl	1b22c <assert_print>
    954e:	4631      	mov	r1, r6
    9550:	480b      	ldr	r0, [pc, #44]	; (9580 <transition_complete+0x60>)
    9552:	f011 fe6b 	bl	1b22c <assert_print>
    9556:	2194      	movs	r1, #148	; 0x94
    9558:	4806      	ldr	r0, [pc, #24]	; (9574 <transition_complete+0x54>)
    955a:	f011 fe60 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
    955e:	4630      	mov	r0, r6
    9560:	f00e f8be 	bl	176e0 <z_spin_lock_set_owner>
	mgr->last_res = res;
    9564:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    9566:	463a      	mov	r2, r7
    9568:	4620      	mov	r0, r4
}
    956a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    956e:	2101      	movs	r1, #1
    9570:	f7ff be02 	b.w	9178 <process_event>
    9574:	0001fd89 	.word	0x0001fd89
    9578:	0001fde2 	.word	0x0001fde2
    957c:	0001f995 	.word	0x0001f995
    9580:	0001fdf7 	.word	0x0001fdf7

00009584 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9588:	4604      	mov	r4, r0
    958a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    958c:	f011 fd9d 	bl	1b0ca <validate_args>

	if (rv < 0) {
    9590:	1e05      	subs	r5, r0, #0
    9592:	db67      	blt.n	9664 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    9594:	f104 0914 	add.w	r9, r4, #20
    9598:	f04f 0320 	mov.w	r3, #32
    959c:	f3ef 8a11 	mrs	sl, BASEPRI
    95a0:	f383 8812 	msr	BASEPRI_MAX, r3
    95a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95a8:	4648      	mov	r0, r9
    95aa:	f00e f87d 	bl	176a8 <z_spin_lock_valid>
    95ae:	4680      	mov	r8, r0
    95b0:	b960      	cbnz	r0, 95cc <onoff_request+0x48>
    95b2:	2394      	movs	r3, #148	; 0x94
    95b4:	4a37      	ldr	r2, [pc, #220]	; (9694 <onoff_request+0x110>)
    95b6:	4938      	ldr	r1, [pc, #224]	; (9698 <onoff_request+0x114>)
    95b8:	4838      	ldr	r0, [pc, #224]	; (969c <onoff_request+0x118>)
    95ba:	f011 fe37 	bl	1b22c <assert_print>
    95be:	4649      	mov	r1, r9
    95c0:	4837      	ldr	r0, [pc, #220]	; (96a0 <onoff_request+0x11c>)
    95c2:	f011 fe33 	bl	1b22c <assert_print>
    95c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95c8:	4832      	ldr	r0, [pc, #200]	; (9694 <onoff_request+0x110>)
    95ca:	e040      	b.n	964e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    95cc:	4648      	mov	r0, r9
    95ce:	f00e f887 	bl	176e0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    95d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    95d6:	8be3      	ldrh	r3, [r4, #30]
    95d8:	8ba6      	ldrh	r6, [r4, #28]
    95da:	4293      	cmp	r3, r2
    95dc:	f006 0607 	and.w	r6, r6, #7
    95e0:	d043      	beq.n	966a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    95e2:	2e02      	cmp	r6, #2
    95e4:	d113      	bne.n	960e <onoff_request+0x8a>
	rv = state;
    95e6:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    95e8:	3301      	adds	r3, #1
    95ea:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95ec:	4648      	mov	r0, r9
    95ee:	f00e f869 	bl	176c4 <z_spin_unlock_valid>
    95f2:	2800      	cmp	r0, #0
    95f4:	d13f      	bne.n	9676 <onoff_request+0xf2>
    95f6:	23c2      	movs	r3, #194	; 0xc2
    95f8:	4a26      	ldr	r2, [pc, #152]	; (9694 <onoff_request+0x110>)
    95fa:	492a      	ldr	r1, [pc, #168]	; (96a4 <onoff_request+0x120>)
    95fc:	4827      	ldr	r0, [pc, #156]	; (969c <onoff_request+0x118>)
    95fe:	f011 fe15 	bl	1b22c <assert_print>
    9602:	4649      	mov	r1, r9
    9604:	4828      	ldr	r0, [pc, #160]	; (96a8 <onoff_request+0x124>)
    9606:	f011 fe11 	bl	1b22c <assert_print>
    960a:	21c2      	movs	r1, #194	; 0xc2
    960c:	e7dc      	b.n	95c8 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    960e:	2e06      	cmp	r6, #6
    9610:	d813      	bhi.n	963a <onoff_request+0xb6>
    9612:	e8df f006 	tbb	[pc, r6]
    9616:	2d09      	.short	0x2d09
    9618:	04091212 	.word	0x04091212
    961c:	09          	.byte	0x09
    961d:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    961e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    9622:	f04f 0800 	mov.w	r8, #0
    9626:	e7e1      	b.n	95ec <onoff_request+0x68>
	parent->next = child;
    9628:	2300      	movs	r3, #0
    962a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    962c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    962e:	b983      	cbnz	r3, 9652 <onoff_request+0xce>
	list->head = node;
    9630:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    9634:	b186      	cbz	r6, 9658 <onoff_request+0xd4>
	rv = state;
    9636:	4635      	mov	r5, r6
    9638:	e7f3      	b.n	9622 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    963a:	491c      	ldr	r1, [pc, #112]	; (96ac <onoff_request+0x128>)
    963c:	4817      	ldr	r0, [pc, #92]	; (969c <onoff_request+0x118>)
    963e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    9642:	4a1b      	ldr	r2, [pc, #108]	; (96b0 <onoff_request+0x12c>)
    9644:	f011 fdf2 	bl	1b22c <assert_print>
    9648:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    964c:	4818      	ldr	r0, [pc, #96]	; (96b0 <onoff_request+0x12c>)
    964e:	f011 fde6 	bl	1b21e <assert_post_action>
	parent->next = child;
    9652:	601f      	str	r7, [r3, #0]
	list->tail = node;
    9654:	6067      	str	r7, [r4, #4]
}
    9656:	e7ed      	b.n	9634 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    9658:	4652      	mov	r2, sl
    965a:	2102      	movs	r1, #2
    965c:	4620      	mov	r0, r4
    965e:	f7ff fd8b 	bl	9178 <process_event>
    9662:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    9664:	4628      	mov	r0, r5
    9666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    966a:	f06f 050a 	mvn.w	r5, #10
    966e:	e7d8      	b.n	9622 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    9670:	f06f 0504 	mvn.w	r5, #4
    9674:	e7d5      	b.n	9622 <onoff_request+0x9e>
	__asm__ volatile(
    9676:	f38a 8811 	msr	BASEPRI, sl
    967a:	f3bf 8f6f 	isb	sy
		if (notify) {
    967e:	f1b8 0f00 	cmp.w	r8, #0
    9682:	d0ef      	beq.n	9664 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    9684:	2300      	movs	r3, #0
    9686:	4632      	mov	r2, r6
    9688:	4639      	mov	r1, r7
    968a:	4620      	mov	r0, r4
    968c:	f011 fd2d 	bl	1b0ea <notify_one>
    9690:	e7e8      	b.n	9664 <onoff_request+0xe0>
    9692:	bf00      	nop
    9694:	0001fd89 	.word	0x0001fd89
    9698:	0001fde2 	.word	0x0001fde2
    969c:	0001f995 	.word	0x0001f995
    96a0:	0001fdf7 	.word	0x0001fdf7
    96a4:	0001fdb6 	.word	0x0001fdb6
    96a8:	0001fdcd 	.word	0x0001fdcd
    96ac:	0001fd73 	.word	0x0001fd73
    96b0:	0001fce6 	.word	0x0001fce6

000096b4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    96b4:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    96b6:	6842      	ldr	r2, [r0, #4]
    96b8:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    96ba:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    96be:	2a02      	cmp	r2, #2
	notify->result = res;
    96c0:	6081      	str	r1, [r0, #8]
	switch (method) {
    96c2:	d00a      	beq.n	96da <sys_notify_finalize+0x26>
    96c4:	2a03      	cmp	r2, #3
    96c6:	f04f 0100 	mov.w	r1, #0
    96ca:	d003      	beq.n	96d4 <sys_notify_finalize+0x20>
    96cc:	2a01      	cmp	r2, #1
    96ce:	d10a      	bne.n	96e6 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    96d0:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    96d2:	e006      	b.n	96e2 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    96d4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    96d6:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    96d8:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    96da:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    96dc:	2200      	movs	r2, #0
    96de:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    96e0:	b958      	cbnz	r0, 96fa <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    96e2:	2000      	movs	r0, #0
    96e4:	e7f8      	b.n	96d8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    96e6:	4906      	ldr	r1, [pc, #24]	; (9700 <sys_notify_finalize+0x4c>)
    96e8:	4806      	ldr	r0, [pc, #24]	; (9704 <sys_notify_finalize+0x50>)
    96ea:	2345      	movs	r3, #69	; 0x45
    96ec:	4a06      	ldr	r2, [pc, #24]	; (9708 <sys_notify_finalize+0x54>)
    96ee:	f011 fd9d 	bl	1b22c <assert_print>
    96f2:	2145      	movs	r1, #69	; 0x45
    96f4:	4804      	ldr	r0, [pc, #16]	; (9708 <sys_notify_finalize+0x54>)
    96f6:	f011 fd92 	bl	1b21e <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    96fa:	f011 fa39 	bl	1ab70 <z_impl_k_poll_signal_raise>
    96fe:	e7f0      	b.n	96e2 <sys_notify_finalize+0x2e>
    9700:	00022960 	.word	0x00022960
    9704:	0001f995 	.word	0x0001f995
    9708:	0001fe0f 	.word	0x0001fe0f

0000970c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9710:	4681      	mov	r9, r0
    9712:	468b      	mov	fp, r1
    9714:	4617      	mov	r7, r2
    9716:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    9718:	2500      	movs	r5, #0
{
    971a:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    971c:	7838      	ldrb	r0, [r7, #0]
    971e:	b908      	cbnz	r0, 9724 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    9720:	4628      	mov	r0, r5
    9722:	e357      	b.n	9dd4 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    9724:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    9726:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    9728:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    972a:	d006      	beq.n	973a <z_cbvprintf_impl+0x2e>
			OUTC('%');
    972c:	4659      	mov	r1, fp
    972e:	47c8      	blx	r9
    9730:	2800      	cmp	r0, #0
    9732:	f2c0 834f 	blt.w	9dd4 <z_cbvprintf_impl+0x6c8>
    9736:	3501      	adds	r5, #1
		if (bps == NULL) {
    9738:	e1fb      	b.n	9b32 <z_cbvprintf_impl+0x426>
		} state = {
    973a:	2218      	movs	r2, #24
    973c:	2100      	movs	r1, #0
    973e:	a80e      	add	r0, sp, #56	; 0x38
    9740:	f012 fd8e 	bl	1c260 <memset>
	if (*sp == '%') {
    9744:	787b      	ldrb	r3, [r7, #1]
    9746:	2b25      	cmp	r3, #37	; 0x25
    9748:	d07d      	beq.n	9846 <z_cbvprintf_impl+0x13a>
    974a:	2300      	movs	r3, #0
    974c:	4698      	mov	r8, r3
    974e:	469e      	mov	lr, r3
    9750:	469c      	mov	ip, r3
    9752:	461e      	mov	r6, r3
    9754:	1c78      	adds	r0, r7, #1
    9756:	4601      	mov	r1, r0
		switch (*sp) {
    9758:	f810 2b01 	ldrb.w	r2, [r0], #1
    975c:	2a2b      	cmp	r2, #43	; 0x2b
    975e:	f000 80a1 	beq.w	98a4 <z_cbvprintf_impl+0x198>
    9762:	f200 8098 	bhi.w	9896 <z_cbvprintf_impl+0x18a>
    9766:	2a20      	cmp	r2, #32
    9768:	f000 809f 	beq.w	98aa <z_cbvprintf_impl+0x19e>
    976c:	2a23      	cmp	r2, #35	; 0x23
    976e:	f000 809f 	beq.w	98b0 <z_cbvprintf_impl+0x1a4>
    9772:	b12b      	cbz	r3, 9780 <z_cbvprintf_impl+0x74>
    9774:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    977c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9780:	f1b8 0f00 	cmp.w	r8, #0
    9784:	d005      	beq.n	9792 <z_cbvprintf_impl+0x86>
    9786:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    978a:	f043 0320 	orr.w	r3, r3, #32
    978e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9792:	f1be 0f00 	cmp.w	lr, #0
    9796:	d005      	beq.n	97a4 <z_cbvprintf_impl+0x98>
    9798:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    979c:	f043 0310 	orr.w	r3, r3, #16
    97a0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    97a4:	f1bc 0f00 	cmp.w	ip, #0
    97a8:	d005      	beq.n	97b6 <z_cbvprintf_impl+0xaa>
    97aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    97ae:	f043 0308 	orr.w	r3, r3, #8
    97b2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    97b6:	b12e      	cbz	r6, 97c4 <z_cbvprintf_impl+0xb8>
    97b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    97bc:	f043 0304 	orr.w	r3, r3, #4
    97c0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    97c4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    97c8:	f003 0044 	and.w	r0, r3, #68	; 0x44
    97cc:	2844      	cmp	r0, #68	; 0x44
    97ce:	d103      	bne.n	97d8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    97d0:	f36f 1386 	bfc	r3, #6, #1
    97d4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    97d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    97dc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    97de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    97e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    97e6:	d17f      	bne.n	98e8 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    97e8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    97ec:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    97ee:	f042 0201 	orr.w	r2, r2, #1
    97f2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    97f6:	781a      	ldrb	r2, [r3, #0]
    97f8:	2a2e      	cmp	r2, #46	; 0x2e
    97fa:	bf0c      	ite	eq
    97fc:	2101      	moveq	r1, #1
    97fe:	2100      	movne	r1, #0
    9800:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9804:	f361 0241 	bfi	r2, r1, #1, #1
    9808:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    980c:	d178      	bne.n	9900 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    980e:	785a      	ldrb	r2, [r3, #1]
    9810:	2a2a      	cmp	r2, #42	; 0x2a
    9812:	d06e      	beq.n	98f2 <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    9814:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    9816:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    981a:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    981c:	4619      	mov	r1, r3
    981e:	f811 0b01 	ldrb.w	r0, [r1], #1
    9822:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9826:	2e09      	cmp	r6, #9
    9828:	f240 8095 	bls.w	9956 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    982c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    9830:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    9832:	f3c1 0040 	ubfx	r0, r1, #1, #1
    9836:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    983a:	460a      	mov	r2, r1
    983c:	f360 0241 	bfi	r2, r0, #1, #1
    9840:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    9844:	e05c      	b.n	9900 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    9846:	1cba      	adds	r2, r7, #2
    9848:	9203      	str	r2, [sp, #12]
    984a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    984e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    9852:	07da      	lsls	r2, r3, #31
    9854:	f140 812e 	bpl.w	9ab4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    9858:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    985c:	f1b8 0f00 	cmp.w	r8, #0
    9860:	da07      	bge.n	9872 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    9862:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    9866:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    986a:	f042 0204 	orr.w	r2, r2, #4
    986e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    9872:	075e      	lsls	r6, r3, #29
    9874:	f140 8127 	bpl.w	9ac6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    9878:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    987c:	f1ba 0f00 	cmp.w	sl, #0
    9880:	f280 8126 	bge.w	9ad0 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    9884:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    9888:	f36f 0341 	bfc	r3, #1, #1
    988c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    9890:	f04f 3aff 	mov.w	sl, #4294967295
    9894:	e11c      	b.n	9ad0 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    9896:	2a2d      	cmp	r2, #45	; 0x2d
    9898:	d00d      	beq.n	98b6 <z_cbvprintf_impl+0x1aa>
    989a:	2a30      	cmp	r2, #48	; 0x30
    989c:	f47f af69 	bne.w	9772 <z_cbvprintf_impl+0x66>
    98a0:	2301      	movs	r3, #1
	} while (loop);
    98a2:	e758      	b.n	9756 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    98a4:	f04f 0c01 	mov.w	ip, #1
    98a8:	e755      	b.n	9756 <z_cbvprintf_impl+0x4a>
    98aa:	f04f 0e01 	mov.w	lr, #1
    98ae:	e752      	b.n	9756 <z_cbvprintf_impl+0x4a>
    98b0:	f04f 0801 	mov.w	r8, #1
    98b4:	e74f      	b.n	9756 <z_cbvprintf_impl+0x4a>
    98b6:	2601      	movs	r6, #1
    98b8:	e74d      	b.n	9756 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    98ba:	4603      	mov	r3, r0
    98bc:	fb0e 6202 	mla	r2, lr, r2, r6
    98c0:	3a30      	subs	r2, #48	; 0x30
    98c2:	4618      	mov	r0, r3
    98c4:	f810 6b01 	ldrb.w	r6, [r0], #1
    98c8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    98cc:	f1bc 0f09 	cmp.w	ip, #9
    98d0:	d9f3      	bls.n	98ba <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    98d2:	4299      	cmp	r1, r3
    98d4:	d08f      	beq.n	97f6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    98d6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    98da:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    98dc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    98de:	f362 0141 	bfi	r1, r2, #1, #1
    98e2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    98e6:	e786      	b.n	97f6 <z_cbvprintf_impl+0xea>
    98e8:	460b      	mov	r3, r1
	size_t val = 0;
    98ea:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    98ec:	f04f 0e0a 	mov.w	lr, #10
    98f0:	e7e7      	b.n	98c2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    98f2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    98f6:	3302      	adds	r3, #2
		conv->prec_star = true;
    98f8:	f042 0204 	orr.w	r2, r2, #4
    98fc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    9900:	781a      	ldrb	r2, [r3, #0]
    9902:	2a6c      	cmp	r2, #108	; 0x6c
    9904:	d047      	beq.n	9996 <z_cbvprintf_impl+0x28a>
    9906:	d82b      	bhi.n	9960 <z_cbvprintf_impl+0x254>
    9908:	2a68      	cmp	r2, #104	; 0x68
    990a:	d031      	beq.n	9970 <z_cbvprintf_impl+0x264>
    990c:	2a6a      	cmp	r2, #106	; 0x6a
    990e:	d04b      	beq.n	99a8 <z_cbvprintf_impl+0x29c>
    9910:	2a4c      	cmp	r2, #76	; 0x4c
    9912:	d051      	beq.n	99b8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    9914:	461a      	mov	r2, r3
    9916:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    991a:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    991c:	9203      	str	r2, [sp, #12]
    991e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    9922:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    9926:	f200 80be 	bhi.w	9aa6 <z_cbvprintf_impl+0x39a>
    992a:	2b6d      	cmp	r3, #109	; 0x6d
    992c:	d851      	bhi.n	99d2 <z_cbvprintf_impl+0x2c6>
    992e:	2b69      	cmp	r3, #105	; 0x69
    9930:	f200 80b9 	bhi.w	9aa6 <z_cbvprintf_impl+0x39a>
    9934:	2b57      	cmp	r3, #87	; 0x57
    9936:	d867      	bhi.n	9a08 <z_cbvprintf_impl+0x2fc>
    9938:	2b41      	cmp	r3, #65	; 0x41
    993a:	d003      	beq.n	9944 <z_cbvprintf_impl+0x238>
    993c:	3b45      	subs	r3, #69	; 0x45
    993e:	2b02      	cmp	r3, #2
    9940:	f200 80b1 	bhi.w	9aa6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    9944:	2204      	movs	r2, #4
    9946:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    994a:	f362 0302 	bfi	r3, r2, #0, #3
    994e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    9952:	2301      	movs	r3, #1
			break;
    9954:	e073      	b.n	9a3e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    9956:	fb0c 0202 	mla	r2, ip, r2, r0
    995a:	460b      	mov	r3, r1
    995c:	3a30      	subs	r2, #48	; 0x30
    995e:	e75d      	b.n	981c <z_cbvprintf_impl+0x110>
	switch (*sp) {
    9960:	2a74      	cmp	r2, #116	; 0x74
    9962:	d025      	beq.n	99b0 <z_cbvprintf_impl+0x2a4>
    9964:	2a7a      	cmp	r2, #122	; 0x7a
    9966:	d1d5      	bne.n	9914 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    9968:	2106      	movs	r1, #6
    996a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    996e:	e00c      	b.n	998a <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    9970:	785a      	ldrb	r2, [r3, #1]
    9972:	2a68      	cmp	r2, #104	; 0x68
    9974:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9978:	d106      	bne.n	9988 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    997a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    997c:	f361 02c6 	bfi	r2, r1, #3, #4
    9980:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    9984:	3302      	adds	r3, #2
    9986:	e7c5      	b.n	9914 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    9988:	2102      	movs	r1, #2
    998a:	f361 02c6 	bfi	r2, r1, #3, #4
    998e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    9992:	3301      	adds	r3, #1
    9994:	e7be      	b.n	9914 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    9996:	785a      	ldrb	r2, [r3, #1]
    9998:	2a6c      	cmp	r2, #108	; 0x6c
    999a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    999e:	d101      	bne.n	99a4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    99a0:	2104      	movs	r1, #4
    99a2:	e7eb      	b.n	997c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    99a4:	2103      	movs	r1, #3
    99a6:	e7f0      	b.n	998a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    99a8:	2105      	movs	r1, #5
    99aa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    99ae:	e7ec      	b.n	998a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    99b0:	2107      	movs	r1, #7
    99b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    99b6:	e7e8      	b.n	998a <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    99b8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    99bc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    99c0:	f022 0202 	bic.w	r2, r2, #2
    99c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    99c8:	f042 0202 	orr.w	r2, r2, #2
    99cc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    99d0:	e7df      	b.n	9992 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    99d2:	3b6e      	subs	r3, #110	; 0x6e
    99d4:	b2d9      	uxtb	r1, r3
    99d6:	2301      	movs	r3, #1
    99d8:	408b      	lsls	r3, r1
    99da:	f240 4182 	movw	r1, #1154	; 0x482
    99de:	420b      	tst	r3, r1
    99e0:	d137      	bne.n	9a52 <z_cbvprintf_impl+0x346>
    99e2:	f013 0f24 	tst.w	r3, #36	; 0x24
    99e6:	d151      	bne.n	9a8c <z_cbvprintf_impl+0x380>
    99e8:	07d8      	lsls	r0, r3, #31
    99ea:	d55c      	bpl.n	9aa6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    99ec:	2103      	movs	r1, #3
    99ee:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    99f2:	f361 0302 	bfi	r3, r1, #0, #3
    99f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    99fa:	f002 0378 	and.w	r3, r2, #120	; 0x78
    99fe:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    9a02:	424b      	negs	r3, r1
    9a04:	414b      	adcs	r3, r1
    9a06:	e01a      	b.n	9a3e <z_cbvprintf_impl+0x332>
    9a08:	2001      	movs	r0, #1
	switch (conv->specifier) {
    9a0a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    9a0e:	b2c9      	uxtb	r1, r1
    9a10:	fa00 f101 	lsl.w	r1, r0, r1
    9a14:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9a18:	d194      	bne.n	9944 <z_cbvprintf_impl+0x238>
    9a1a:	f640 0601 	movw	r6, #2049	; 0x801
    9a1e:	4231      	tst	r1, r6
    9a20:	d11d      	bne.n	9a5e <z_cbvprintf_impl+0x352>
    9a22:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    9a26:	d03e      	beq.n	9aa6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    9a28:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9a2c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9a30:	f002 0278 	and.w	r2, r2, #120	; 0x78
    9a34:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    9a36:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9a3a:	d034      	beq.n	9aa6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    9a3c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    9a3e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    9a42:	f3c2 0140 	ubfx	r1, r2, #1, #1
    9a46:	430b      	orrs	r3, r1
    9a48:	f363 0241 	bfi	r2, r3, #1, #1
    9a4c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    9a50:	e6fd      	b.n	984e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    9a52:	2102      	movs	r1, #2
    9a54:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9a58:	f361 0302 	bfi	r3, r1, #0, #3
    9a5c:	e7e8      	b.n	9a30 <z_cbvprintf_impl+0x324>
    9a5e:	2002      	movs	r0, #2
    9a60:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9a64:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9a68:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9a6c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    9a6e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    9a72:	bf02      	ittt	eq
    9a74:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    9a78:	f041 0101 	orreq.w	r1, r1, #1
    9a7c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    9a80:	2b63      	cmp	r3, #99	; 0x63
    9a82:	d1db      	bne.n	9a3c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    9a84:	1e13      	subs	r3, r2, #0
    9a86:	bf18      	it	ne
    9a88:	2301      	movne	r3, #1
    9a8a:	e7d8      	b.n	9a3e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    9a8c:	2103      	movs	r1, #3
    9a8e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    9a92:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    9a96:	f361 0302 	bfi	r3, r1, #0, #3
    9a9a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    9a9e:	bf14      	ite	ne
    9aa0:	2301      	movne	r3, #1
    9aa2:	2300      	moveq	r3, #0
    9aa4:	e7cb      	b.n	9a3e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    9aa6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9aaa:	f043 0301 	orr.w	r3, r3, #1
    9aae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    9ab2:	e7c3      	b.n	9a3c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    9ab4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    9ab8:	2a00      	cmp	r2, #0
		int width = -1;
    9aba:	bfac      	ite	ge
    9abc:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    9ac0:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    9ac4:	e6d5      	b.n	9872 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    9ac6:	0798      	lsls	r0, r3, #30
    9ac8:	f57f aee2 	bpl.w	9890 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    9acc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    9ad0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    9ad2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    9ad6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    9ada:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    9ade:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    9ae2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    9ae4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    9ae8:	d133      	bne.n	9b52 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    9aea:	1ecb      	subs	r3, r1, #3
    9aec:	2b04      	cmp	r3, #4
    9aee:	d804      	bhi.n	9afa <z_cbvprintf_impl+0x3ee>
    9af0:	e8df f003 	tbb	[pc, r3]
    9af4:	21464621 	.word	0x21464621
    9af8:	21          	.byte	0x21
    9af9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    9afa:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    9afc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    9afe:	ea4f 72e3 	mov.w	r2, r3, asr #31
    9b02:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9b06:	d11c      	bne.n	9b42 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    9b08:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    9b0c:	17da      	asrs	r2, r3, #31
    9b0e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    9b12:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    9b14:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9b18:	f013 0603 	ands.w	r6, r3, #3
    9b1c:	d050      	beq.n	9bc0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    9b1e:	463a      	mov	r2, r7
    9b20:	4659      	mov	r1, fp
    9b22:	4648      	mov	r0, r9
    9b24:	9b03      	ldr	r3, [sp, #12]
    9b26:	f011 fb63 	bl	1b1f0 <outs>
    9b2a:	2800      	cmp	r0, #0
    9b2c:	f2c0 8152 	blt.w	9dd4 <z_cbvprintf_impl+0x6c8>
    9b30:	4405      	add	r5, r0
			continue;
    9b32:	9f03      	ldr	r7, [sp, #12]
    9b34:	e5f2      	b.n	971c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9b36:	f854 3b04 	ldr.w	r3, [r4], #4
    9b3a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    9b3c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    9b40:	e7e8      	b.n	9b14 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    9b42:	2902      	cmp	r1, #2
    9b44:	d1e5      	bne.n	9b12 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    9b46:	b21a      	sxth	r2, r3
    9b48:	f343 33c0 	sbfx	r3, r3, #15, #1
    9b4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9b50:	e7df      	b.n	9b12 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9b52:	2b02      	cmp	r3, #2
    9b54:	d124      	bne.n	9ba0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    9b56:	1ecb      	subs	r3, r1, #3
    9b58:	2b04      	cmp	r3, #4
    9b5a:	d804      	bhi.n	9b66 <z_cbvprintf_impl+0x45a>
    9b5c:	e8df f003 	tbb	[pc, r3]
    9b60:	18101018 	.word	0x18101018
    9b64:	18          	.byte	0x18
    9b65:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    9b66:	2901      	cmp	r1, #1
    9b68:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    9b6c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    9b70:	d014      	beq.n	9b9c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    9b72:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9b74:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    9b78:	d1cc      	bne.n	9b14 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    9b7a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    9b7c:	930e      	str	r3, [sp, #56]	; 0x38
    9b7e:	e7c9      	b.n	9b14 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    9b80:	3407      	adds	r4, #7
    9b82:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    9b86:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    9b8a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9b8e:	e7c1      	b.n	9b14 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    9b90:	f854 3b04 	ldr.w	r3, [r4], #4
    9b94:	930e      	str	r3, [sp, #56]	; 0x38
    9b96:	2300      	movs	r3, #0
    9b98:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    9b9a:	e7bb      	b.n	9b14 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    9b9c:	b2db      	uxtb	r3, r3
    9b9e:	e7cd      	b.n	9b3c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    9ba0:	2b04      	cmp	r3, #4
    9ba2:	d108      	bne.n	9bb6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    9ba4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    9ba6:	f024 0407 	bic.w	r4, r4, #7
    9baa:	e9d4 2300 	ldrd	r2, r3, [r4]
    9bae:	3408      	adds	r4, #8
    9bb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9bb4:	e7ae      	b.n	9b14 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    9bb6:	2b03      	cmp	r3, #3
    9bb8:	d1ac      	bne.n	9b14 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    9bba:	f854 3b04 	ldr.w	r3, [r4], #4
    9bbe:	e7dd      	b.n	9b7c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    9bc0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9bc4:	2878      	cmp	r0, #120	; 0x78
    9bc6:	d8b4      	bhi.n	9b32 <z_cbvprintf_impl+0x426>
    9bc8:	2862      	cmp	r0, #98	; 0x62
    9bca:	d81c      	bhi.n	9c06 <z_cbvprintf_impl+0x4fa>
    9bcc:	2825      	cmp	r0, #37	; 0x25
    9bce:	f43f adad 	beq.w	972c <z_cbvprintf_impl+0x20>
    9bd2:	2858      	cmp	r0, #88	; 0x58
    9bd4:	d1ad      	bne.n	9b32 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    9bd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9bda:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9bde:	9300      	str	r3, [sp, #0]
    9be0:	aa10      	add	r2, sp, #64	; 0x40
    9be2:	ab08      	add	r3, sp, #32
    9be4:	f011 fabe 	bl	1b164 <encode_uint>
			if (precision >= 0) {
    9be8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    9bec:	4607      	mov	r7, r0
			if (precision >= 0) {
    9bee:	f280 8099 	bge.w	9d24 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    9bf2:	2f00      	cmp	r7, #0
    9bf4:	d09d      	beq.n	9b32 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    9bf6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9bfa:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    9bfc:	2e00      	cmp	r6, #0
    9bfe:	f000 80c0 	beq.w	9d82 <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    9c02:	3001      	adds	r0, #1
    9c04:	e0bd      	b.n	9d82 <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    9c06:	3863      	subs	r0, #99	; 0x63
    9c08:	2815      	cmp	r0, #21
    9c0a:	d892      	bhi.n	9b32 <z_cbvprintf_impl+0x426>
    9c0c:	a201      	add	r2, pc, #4	; (adr r2, 9c14 <z_cbvprintf_impl+0x508>)
    9c0e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    9c12:	bf00      	nop
    9c14:	00009ce9 	.word	0x00009ce9
    9c18:	00009cfb 	.word	0x00009cfb
    9c1c:	00009b33 	.word	0x00009b33
    9c20:	00009b33 	.word	0x00009b33
    9c24:	00009b33 	.word	0x00009b33
    9c28:	00009b33 	.word	0x00009b33
    9c2c:	00009cfb 	.word	0x00009cfb
    9c30:	00009b33 	.word	0x00009b33
    9c34:	00009b33 	.word	0x00009b33
    9c38:	00009b33 	.word	0x00009b33
    9c3c:	00009b33 	.word	0x00009b33
    9c40:	00009d87 	.word	0x00009d87
    9c44:	00009d1f 	.word	0x00009d1f
    9c48:	00009d45 	.word	0x00009d45
    9c4c:	00009b33 	.word	0x00009b33
    9c50:	00009b33 	.word	0x00009b33
    9c54:	00009c6d 	.word	0x00009c6d
    9c58:	00009b33 	.word	0x00009b33
    9c5c:	00009d1f 	.word	0x00009d1f
    9c60:	00009b33 	.word	0x00009b33
    9c64:	00009b33 	.word	0x00009b33
    9c68:	00009d1f 	.word	0x00009d1f
			if (precision >= 0) {
    9c6c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    9c70:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    9c72:	db35      	blt.n	9ce0 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    9c74:	4651      	mov	r1, sl
    9c76:	4638      	mov	r0, r7
    9c78:	f012 faaf 	bl	1c1da <strnlen>
			bpe = bps + len;
    9c7c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    9c80:	2f00      	cmp	r7, #0
    9c82:	f43f af56 	beq.w	9b32 <z_cbvprintf_impl+0x426>
		char sign = 0;
    9c86:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    9c88:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9c8c:	f013 0210 	ands.w	r2, r3, #16
    9c90:	9205      	str	r2, [sp, #20]
    9c92:	f000 8092 	beq.w	9dba <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    9c96:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    9c98:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    9c9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    9c9c:	bf48      	it	mi
    9c9e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    9ca0:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    9ca2:	bf48      	it	mi
    9ca4:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    9ca6:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    9caa:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    9cac:	f340 809f 	ble.w	9dee <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    9cb0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    9cb4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    9cb8:	f3c2 0380 	ubfx	r3, r2, #2, #1
    9cbc:	0750      	lsls	r0, r2, #29
    9cbe:	9306      	str	r3, [sp, #24]
    9cc0:	f100 8095 	bmi.w	9dee <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    9cc4:	0651      	lsls	r1, r2, #25
    9cc6:	f140 8088 	bpl.w	9dda <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    9cca:	b13e      	cbz	r6, 9cdc <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    9ccc:	4659      	mov	r1, fp
    9cce:	4630      	mov	r0, r6
    9cd0:	47c8      	blx	r9
    9cd2:	2800      	cmp	r0, #0
    9cd4:	db7e      	blt.n	9dd4 <z_cbvprintf_impl+0x6c8>
    9cd6:	9b06      	ldr	r3, [sp, #24]
    9cd8:	3501      	adds	r5, #1
    9cda:	461e      	mov	r6, r3
					pad = '0';
    9cdc:	2230      	movs	r2, #48	; 0x30
    9cde:	e07d      	b.n	9ddc <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    9ce0:	4638      	mov	r0, r7
    9ce2:	f012 fa73 	bl	1c1cc <strlen>
    9ce6:	e7c9      	b.n	9c7c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    9cea:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9cec:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9cee:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    9cf2:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    9cf4:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    9cf8:	e7c6      	b.n	9c88 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    9cfa:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    9cfc:	bf5a      	itte	pl
    9cfe:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    9d02:	015e      	lslpl	r6, r3, #5
				sign = '+';
    9d04:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    9d06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	f6bf af63 	bge.w	9bd6 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    9d10:	4252      	negs	r2, r2
    9d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    9d16:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    9d18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9d1c:	e75b      	b.n	9bd6 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    9d1e:	2600      	movs	r6, #0
    9d20:	e759      	b.n	9bd6 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    9d22:	2600      	movs	r6, #0
				conv->flag_zero = false;
    9d24:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    9d28:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9d2c:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    9d2e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9d32:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    9d34:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    9d38:	f67f af5b 	bls.w	9bf2 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    9d3c:	ebaa 0303 	sub.w	r3, sl, r3
    9d40:	9311      	str	r3, [sp, #68]	; 0x44
    9d42:	e756      	b.n	9bf2 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    9d44:	980e      	ldr	r0, [sp, #56]	; 0x38
    9d46:	b390      	cbz	r0, 9dae <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9d48:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9d4c:	9300      	str	r3, [sp, #0]
    9d4e:	2100      	movs	r1, #0
    9d50:	ab08      	add	r3, sp, #32
    9d52:	aa10      	add	r2, sp, #64	; 0x40
    9d54:	f011 fa06 	bl	1b164 <encode_uint>
				conv->altform_0c = true;
    9d58:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9d5c:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    9d60:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9d64:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    9d68:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9d6c:	4607      	mov	r7, r0
				conv->altform_0c = true;
    9d6e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9d72:	dad6      	bge.n	9d22 <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    9d74:	2800      	cmp	r0, #0
    9d76:	f43f aedc 	beq.w	9b32 <z_cbvprintf_impl+0x426>
		char sign = 0;
    9d7a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9d7c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9d80:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    9d82:	469a      	mov	sl, r3
    9d84:	e780      	b.n	9c88 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    9d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    9d88:	2907      	cmp	r1, #7
    9d8a:	f63f aed2 	bhi.w	9b32 <z_cbvprintf_impl+0x426>
    9d8e:	e8df f001 	tbb	[pc, r1]
    9d92:	040c      	.short	0x040c
    9d94:	08080c06 	.word	0x08080c06
    9d98:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    9d9a:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9d9c:	e6c9      	b.n	9b32 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    9d9e:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    9da0:	e6c7      	b.n	9b32 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    9da2:	17ea      	asrs	r2, r5, #31
    9da4:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    9da8:	e6c3      	b.n	9b32 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9daa:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9dac:	e6c1      	b.n	9b32 <z_cbvprintf_impl+0x426>
    9dae:	4f2f      	ldr	r7, [pc, #188]	; (9e6c <z_cbvprintf_impl+0x760>)
		char sign = 0;
    9db0:	4606      	mov	r6, r0
			bpe = bps + 5;
    9db2:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    9db6:	2005      	movs	r0, #5
    9db8:	e766      	b.n	9c88 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    9dba:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9dbc:	bf48      	it	mi
    9dbe:	3001      	addmi	r0, #1
    9dc0:	e76a      	b.n	9c98 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    9dc2:	4610      	mov	r0, r2
    9dc4:	9307      	str	r3, [sp, #28]
    9dc6:	9206      	str	r2, [sp, #24]
    9dc8:	4659      	mov	r1, fp
    9dca:	47c8      	blx	r9
    9dcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9dd0:	2800      	cmp	r0, #0
    9dd2:	da04      	bge.n	9dde <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    9dd4:	b015      	add	sp, #84	; 0x54
    9dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    9dda:	2220      	movs	r2, #32
					pad = '0';
    9ddc:	4643      	mov	r3, r8
				while (width-- > 0) {
    9dde:	4619      	mov	r1, r3
    9de0:	2900      	cmp	r1, #0
    9de2:	f103 33ff 	add.w	r3, r3, #4294967295
    9de6:	dcec      	bgt.n	9dc2 <z_cbvprintf_impl+0x6b6>
    9de8:	4445      	add	r5, r8
    9dea:	4698      	mov	r8, r3
    9dec:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    9dee:	b12e      	cbz	r6, 9dfc <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    9df0:	4659      	mov	r1, fp
    9df2:	4630      	mov	r0, r6
    9df4:	47c8      	blx	r9
    9df6:	2800      	cmp	r0, #0
    9df8:	dbec      	blt.n	9dd4 <z_cbvprintf_impl+0x6c8>
    9dfa:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    9dfc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9e00:	06da      	lsls	r2, r3, #27
    9e02:	d401      	bmi.n	9e08 <z_cbvprintf_impl+0x6fc>
    9e04:	071b      	lsls	r3, r3, #28
    9e06:	d505      	bpl.n	9e14 <z_cbvprintf_impl+0x708>
				OUTC('0');
    9e08:	4659      	mov	r1, fp
    9e0a:	2030      	movs	r0, #48	; 0x30
    9e0c:	47c8      	blx	r9
    9e0e:	2800      	cmp	r0, #0
    9e10:	dbe0      	blt.n	9dd4 <z_cbvprintf_impl+0x6c8>
    9e12:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9e14:	9b05      	ldr	r3, [sp, #20]
    9e16:	b133      	cbz	r3, 9e26 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    9e18:	4659      	mov	r1, fp
    9e1a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9e1e:	47c8      	blx	r9
    9e20:	2800      	cmp	r0, #0
    9e22:	dbd7      	blt.n	9dd4 <z_cbvprintf_impl+0x6c8>
    9e24:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9e26:	9e04      	ldr	r6, [sp, #16]
    9e28:	442e      	add	r6, r5
    9e2a:	e005      	b.n	9e38 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    9e2c:	4659      	mov	r1, fp
    9e2e:	2030      	movs	r0, #48	; 0x30
    9e30:	47c8      	blx	r9
    9e32:	2800      	cmp	r0, #0
    9e34:	dbce      	blt.n	9dd4 <z_cbvprintf_impl+0x6c8>
    9e36:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9e38:	1b73      	subs	r3, r6, r5
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	dcf6      	bgt.n	9e2c <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    9e3e:	4653      	mov	r3, sl
    9e40:	463a      	mov	r2, r7
    9e42:	4659      	mov	r1, fp
    9e44:	4648      	mov	r0, r9
    9e46:	f011 f9d3 	bl	1b1f0 <outs>
    9e4a:	2800      	cmp	r0, #0
    9e4c:	dbc2      	blt.n	9dd4 <z_cbvprintf_impl+0x6c8>
    9e4e:	4405      	add	r5, r0
		while (width > 0) {
    9e50:	44a8      	add	r8, r5
    9e52:	eba8 0305 	sub.w	r3, r8, r5
    9e56:	2b00      	cmp	r3, #0
    9e58:	f77f ae6b 	ble.w	9b32 <z_cbvprintf_impl+0x426>
			OUTC(' ');
    9e5c:	4659      	mov	r1, fp
    9e5e:	2020      	movs	r0, #32
    9e60:	47c8      	blx	r9
    9e62:	2800      	cmp	r0, #0
    9e64:	dbb6      	blt.n	9dd4 <z_cbvprintf_impl+0x6c8>
    9e66:	3501      	adds	r5, #1
			--width;
    9e68:	e7f3      	b.n	9e52 <z_cbvprintf_impl+0x746>
    9e6a:	bf00      	nop
    9e6c:	0001fe32 	.word	0x0001fe32

00009e70 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    9e70:	b538      	push	{r3, r4, r5, lr}
    9e72:	460d      	mov	r5, r1
    9e74:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    9e76:	2220      	movs	r2, #32
    9e78:	2100      	movs	r1, #0
    9e7a:	f012 f9f1 	bl	1c260 <memset>
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    9e7e:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    9e80:	68eb      	ldr	r3, [r5, #12]
    9e82:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    9e84:	68ab      	ldr	r3, [r5, #8]
    9e86:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    9e88:	682b      	ldr	r3, [r5, #0]
    9e8a:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    9e8c:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    9e8e:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    9e90:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    9e92:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    9e94:	b123      	cbz	r3, 9ea0 <mpsc_pbuf_init+0x30>
    9e96:	1e59      	subs	r1, r3, #1
    9e98:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    9e9a:	bf08      	it	eq
    9e9c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    9ea0:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    9ea2:	2201      	movs	r2, #1
    9ea4:	2100      	movs	r1, #0
    9ea6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9eaa:	f014 fb9a 	bl	1e5e2 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    9eae:	b148      	cbz	r0, 9ec4 <mpsc_pbuf_init+0x54>
    9eb0:	4905      	ldr	r1, [pc, #20]	; (9ec8 <mpsc_pbuf_init+0x58>)
    9eb2:	4806      	ldr	r0, [pc, #24]	; (9ecc <mpsc_pbuf_init+0x5c>)
    9eb4:	232e      	movs	r3, #46	; 0x2e
    9eb6:	4a06      	ldr	r2, [pc, #24]	; (9ed0 <mpsc_pbuf_init+0x60>)
    9eb8:	f011 f9b8 	bl	1b22c <assert_print>
    9ebc:	212e      	movs	r1, #46	; 0x2e
    9ebe:	4804      	ldr	r0, [pc, #16]	; (9ed0 <mpsc_pbuf_init+0x60>)
    9ec0:	f011 f9ad 	bl	1b21e <assert_post_action>
	ARG_UNUSED(err);
}
    9ec4:	bd38      	pop	{r3, r4, r5, pc}
    9ec6:	bf00      	nop
    9ec8:	0001fe5e 	.word	0x0001fe5e
    9ecc:	0001f995 	.word	0x0001f995
    9ed0:	0001fe38 	.word	0x0001fe38

00009ed4 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    9ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ed8:	b087      	sub	sp, #28
    9eda:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    9ede:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    9ee0:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    9ee2:	3b01      	subs	r3, #1
    9ee4:	428b      	cmp	r3, r1
{
    9ee6:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    9ee8:	f0c0 80a0 	bcc.w	a02c <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    9eec:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    9eee:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    9ef0:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    9ef4:	f04f 0320 	mov.w	r3, #32
    9ef8:	f3ef 8b11 	mrs	fp, BASEPRI
    9efc:	f383 8812 	msr	BASEPRI_MAX, r3
    9f00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f04:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    9f06:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f08:	f00d fbce 	bl	176a8 <z_spin_lock_valid>
    9f0c:	b958      	cbnz	r0, 9f26 <mpsc_pbuf_alloc+0x52>
    9f0e:	2394      	movs	r3, #148	; 0x94
    9f10:	4a49      	ldr	r2, [pc, #292]	; (a038 <mpsc_pbuf_alloc+0x164>)
    9f12:	494a      	ldr	r1, [pc, #296]	; (a03c <mpsc_pbuf_alloc+0x168>)
    9f14:	484a      	ldr	r0, [pc, #296]	; (a040 <mpsc_pbuf_alloc+0x16c>)
    9f16:	f011 f989 	bl	1b22c <assert_print>
    9f1a:	4629      	mov	r1, r5
    9f1c:	4849      	ldr	r0, [pc, #292]	; (a044 <mpsc_pbuf_alloc+0x170>)
    9f1e:	f011 f985 	bl	1b22c <assert_print>
    9f22:	2194      	movs	r1, #148	; 0x94
    9f24:	e050      	b.n	9fc8 <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    9f26:	4628      	mov	r0, r5
    9f28:	f00d fbda 	bl	176e0 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    9f2c:	a905      	add	r1, sp, #20
    9f2e:	4620      	mov	r0, r4
    9f30:	f011 f989 	bl	1b246 <free_space>

		if (free_wlen >= wlen) {
    9f34:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    9f36:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    9f38:	42b9      	cmp	r1, r7
    9f3a:	d328      	bcc.n	9f8e <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    9f3c:	6822      	ldr	r2, [r4, #0]
			item =
    9f3e:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    9f40:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    9f42:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    9f46:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    9f4a:	f021 0103 	bic.w	r1, r1, #3
    9f4e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    9f52:	6821      	ldr	r1, [r4, #0]
    9f54:	463a      	mov	r2, r7
    9f56:	f011 f998 	bl	1b28a <idx_inc>
		cont = false;
    9f5a:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    9f5e:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f60:	4628      	mov	r0, r5
    9f62:	f00d fbaf 	bl	176c4 <z_spin_unlock_valid>
    9f66:	b320      	cbz	r0, 9fb2 <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    9f68:	f389 8811 	msr	BASEPRI, r9
    9f6c:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    9f70:	f1b8 0f00 	cmp.w	r8, #0
    9f74:	d05c      	beq.n	a030 <mpsc_pbuf_alloc+0x15c>
    9f76:	b146      	cbz	r6, 9f8a <mpsc_pbuf_alloc+0xb6>
    9f78:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d0b9      	beq.n	9ef4 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    9f80:	69a3      	ldr	r3, [r4, #24]
    9f82:	b113      	cbz	r3, 9f8a <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    9f84:	4631      	mov	r1, r6
    9f86:	4620      	mov	r0, r4
    9f88:	4798      	blx	r3
{
    9f8a:	2600      	movs	r6, #0
    9f8c:	e7b2      	b.n	9ef4 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    9f8e:	b118      	cbz	r0, 9f98 <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    9f90:	4620      	mov	r0, r4
    9f92:	f011 f988 	bl	1b2a6 <add_skip_item>
			cont = true;
    9f96:	e7e3      	b.n	9f60 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    9f98:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    9f9c:	4313      	orrs	r3, r2
    9f9e:	d036      	beq.n	a00e <mpsc_pbuf_alloc+0x13a>
    9fa0:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    9fa2:	f014 facd 	bl	1e540 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    9fa6:	9903      	ldr	r1, [sp, #12]
    9fa8:	bb88      	cbnz	r0, a00e <mpsc_pbuf_alloc+0x13a>
    9faa:	4628      	mov	r0, r5
    9fac:	f00d fb8a 	bl	176c4 <z_spin_unlock_valid>
    9fb0:	b968      	cbnz	r0, 9fce <mpsc_pbuf_alloc+0xfa>
    9fb2:	23c2      	movs	r3, #194	; 0xc2
    9fb4:	4a20      	ldr	r2, [pc, #128]	; (a038 <mpsc_pbuf_alloc+0x164>)
    9fb6:	4924      	ldr	r1, [pc, #144]	; (a048 <mpsc_pbuf_alloc+0x174>)
    9fb8:	4821      	ldr	r0, [pc, #132]	; (a040 <mpsc_pbuf_alloc+0x16c>)
    9fba:	f011 f937 	bl	1b22c <assert_print>
    9fbe:	4629      	mov	r1, r5
    9fc0:	4822      	ldr	r0, [pc, #136]	; (a04c <mpsc_pbuf_alloc+0x178>)
    9fc2:	f011 f933 	bl	1b22c <assert_print>
    9fc6:	21c2      	movs	r1, #194	; 0xc2
    9fc8:	481b      	ldr	r0, [pc, #108]	; (a038 <mpsc_pbuf_alloc+0x164>)
    9fca:	f011 f928 	bl	1b21e <assert_post_action>
    9fce:	f38b 8811 	msr	BASEPRI, fp
    9fd2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    9fd6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9fda:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    9fde:	f00d febd 	bl	17d5c <z_impl_k_sem_take>
    9fe2:	4680      	mov	r8, r0
	__asm__ volatile(
    9fe4:	f04f 0320 	mov.w	r3, #32
    9fe8:	f3ef 8911 	mrs	r9, BASEPRI
    9fec:	f383 8812 	msr	BASEPRI_MAX, r3
    9ff0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ff4:	4628      	mov	r0, r5
    9ff6:	f00d fb57 	bl	176a8 <z_spin_lock_valid>
    9ffa:	2800      	cmp	r0, #0
    9ffc:	d087      	beq.n	9f0e <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    9ffe:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    a002:	4628      	mov	r0, r5
    a004:	f00d fb6c 	bl	176e0 <z_spin_lock_set_owner>
    a008:	ea4f 1858 	mov.w	r8, r8, lsr #5
    a00c:	e7a8      	b.n	9f60 <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    a00e:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    a010:	4620      	mov	r0, r4
    a012:	f10d 0313 	add.w	r3, sp, #19
    a016:	f3c2 0240 	ubfx	r2, r2, #1, #1
    a01a:	f011 f967 	bl	1b2ec <drop_item_locked>
			cont = dropped_item != NULL;
    a01e:	f1b0 0800 	subs.w	r8, r0, #0
    a022:	4606      	mov	r6, r0
    a024:	bf18      	it	ne
    a026:	f04f 0801 	movne.w	r8, #1
    a02a:	e799      	b.n	9f60 <mpsc_pbuf_alloc+0x8c>
		return NULL;
    a02c:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    a030:	4650      	mov	r0, sl
    a032:	b007      	add	sp, #28
    a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a038:	0001fd89 	.word	0x0001fd89
    a03c:	0001fde2 	.word	0x0001fde2
    a040:	0001f995 	.word	0x0001f995
    a044:	0001fdf7 	.word	0x0001fdf7
    a048:	0001fdb6 	.word	0x0001fdb6
    a04c:	0001fdcd 	.word	0x0001fdcd

0000a050 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a054:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    a056:	69c3      	ldr	r3, [r0, #28]
    a058:	4608      	mov	r0, r1
{
    a05a:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    a05c:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    a05e:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    a062:	4607      	mov	r7, r0
    a064:	f04f 0320 	mov.w	r3, #32
    a068:	f3ef 8811 	mrs	r8, BASEPRI
    a06c:	f383 8812 	msr	BASEPRI_MAX, r3
    a070:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a074:	4628      	mov	r0, r5
    a076:	f00d fb17 	bl	176a8 <z_spin_lock_valid>
    a07a:	b968      	cbnz	r0, a098 <mpsc_pbuf_commit+0x48>
    a07c:	2394      	movs	r3, #148	; 0x94
    a07e:	4a19      	ldr	r2, [pc, #100]	; (a0e4 <mpsc_pbuf_commit+0x94>)
    a080:	4919      	ldr	r1, [pc, #100]	; (a0e8 <mpsc_pbuf_commit+0x98>)
    a082:	481a      	ldr	r0, [pc, #104]	; (a0ec <mpsc_pbuf_commit+0x9c>)
    a084:	f011 f8d2 	bl	1b22c <assert_print>
    a088:	4629      	mov	r1, r5
    a08a:	4819      	ldr	r0, [pc, #100]	; (a0f0 <mpsc_pbuf_commit+0xa0>)
    a08c:	f011 f8ce 	bl	1b22c <assert_print>
    a090:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a092:	4814      	ldr	r0, [pc, #80]	; (a0e4 <mpsc_pbuf_commit+0x94>)
    a094:	f011 f8c3 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
    a098:	4628      	mov	r0, r5
    a09a:	f00d fb21 	bl	176e0 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    a09e:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a0a0:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    a0a2:	f043 0301 	orr.w	r3, r3, #1
    a0a6:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a0a8:	6861      	ldr	r1, [r4, #4]
    a0aa:	4620      	mov	r0, r4
    a0ac:	f011 f8ed 	bl	1b28a <idx_inc>
    a0b0:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    a0b2:	4620      	mov	r0, r4
    a0b4:	f011 f90d 	bl	1b2d2 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a0b8:	4628      	mov	r0, r5
    a0ba:	f00d fb03 	bl	176c4 <z_spin_unlock_valid>
    a0be:	b958      	cbnz	r0, a0d8 <mpsc_pbuf_commit+0x88>
    a0c0:	23c2      	movs	r3, #194	; 0xc2
    a0c2:	4a08      	ldr	r2, [pc, #32]	; (a0e4 <mpsc_pbuf_commit+0x94>)
    a0c4:	490b      	ldr	r1, [pc, #44]	; (a0f4 <mpsc_pbuf_commit+0xa4>)
    a0c6:	4809      	ldr	r0, [pc, #36]	; (a0ec <mpsc_pbuf_commit+0x9c>)
    a0c8:	f011 f8b0 	bl	1b22c <assert_print>
    a0cc:	4629      	mov	r1, r5
    a0ce:	480a      	ldr	r0, [pc, #40]	; (a0f8 <mpsc_pbuf_commit+0xa8>)
    a0d0:	f011 f8ac 	bl	1b22c <assert_print>
    a0d4:	21c2      	movs	r1, #194	; 0xc2
    a0d6:	e7dc      	b.n	a092 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    a0d8:	f388 8811 	msr	BASEPRI, r8
    a0dc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0e4:	0001fd89 	.word	0x0001fd89
    a0e8:	0001fde2 	.word	0x0001fde2
    a0ec:	0001f995 	.word	0x0001f995
    a0f0:	0001fdf7 	.word	0x0001fdf7
    a0f4:	0001fdb6 	.word	0x0001fdb6
    a0f8:	0001fdcd 	.word	0x0001fdcd

0000a0fc <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    a0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a100:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    a102:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    a106:	f04f 0320 	mov.w	r3, #32
    a10a:	f3ef 8811 	mrs	r8, BASEPRI
    a10e:	f383 8812 	msr	BASEPRI_MAX, r3
    a112:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a116:	4638      	mov	r0, r7
    a118:	f00d fac6 	bl	176a8 <z_spin_lock_valid>
    a11c:	4605      	mov	r5, r0
    a11e:	b968      	cbnz	r0, a13c <mpsc_pbuf_claim+0x40>
    a120:	2394      	movs	r3, #148	; 0x94
    a122:	4a33      	ldr	r2, [pc, #204]	; (a1f0 <mpsc_pbuf_claim+0xf4>)
    a124:	4933      	ldr	r1, [pc, #204]	; (a1f4 <mpsc_pbuf_claim+0xf8>)
    a126:	4834      	ldr	r0, [pc, #208]	; (a1f8 <mpsc_pbuf_claim+0xfc>)
    a128:	f011 f880 	bl	1b22c <assert_print>
    a12c:	4639      	mov	r1, r7
    a12e:	4833      	ldr	r0, [pc, #204]	; (a1fc <mpsc_pbuf_claim+0x100>)
    a130:	f011 f87c 	bl	1b22c <assert_print>
    a134:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a136:	482e      	ldr	r0, [pc, #184]	; (a1f0 <mpsc_pbuf_claim+0xf4>)
    a138:	f011 f871 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
    a13c:	4638      	mov	r0, r7
    a13e:	f00d facf 	bl	176e0 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    a142:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    a146:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    a148:	bf88      	it	hi
    a14a:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    a14c:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    a14e:	2b00      	cmp	r3, #0
    a150:	d03f      	beq.n	a1d2 <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    a152:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    a154:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    a158:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    a15c:	f013 0003 	ands.w	r0, r3, #3
    a160:	d03a      	beq.n	a1d8 <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    a162:	2802      	cmp	r0, #2
    a164:	d103      	bne.n	a16e <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    a166:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    a16a:	08b6      	lsrs	r6, r6, #2
    a16c:	d105      	bne.n	a17a <mpsc_pbuf_claim+0x7e>
    a16e:	07d8      	lsls	r0, r3, #31
    a170:	d41f      	bmi.n	a1b2 <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    a172:	4648      	mov	r0, r9
    a174:	69e3      	ldr	r3, [r4, #28]
    a176:	4798      	blx	r3
    a178:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    a17a:	68a1      	ldr	r1, [r4, #8]
    a17c:	4632      	mov	r2, r6
    a17e:	4620      	mov	r0, r4
    a180:	f011 f883 	bl	1b28a <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    a184:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    a186:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    a188:	4632      	mov	r2, r6
    a18a:	4620      	mov	r0, r4
    a18c:	f011 f87d 	bl	1b28a <idx_inc>
				buffer->rd_idx =
    a190:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a192:	4638      	mov	r0, r7
    a194:	f00d fa96 	bl	176c4 <z_spin_unlock_valid>
    a198:	bb00      	cbnz	r0, a1dc <mpsc_pbuf_claim+0xe0>
    a19a:	23c2      	movs	r3, #194	; 0xc2
    a19c:	4a14      	ldr	r2, [pc, #80]	; (a1f0 <mpsc_pbuf_claim+0xf4>)
    a19e:	4918      	ldr	r1, [pc, #96]	; (a200 <mpsc_pbuf_claim+0x104>)
    a1a0:	4815      	ldr	r0, [pc, #84]	; (a1f8 <mpsc_pbuf_claim+0xfc>)
    a1a2:	f011 f843 	bl	1b22c <assert_print>
    a1a6:	4639      	mov	r1, r7
    a1a8:	4816      	ldr	r0, [pc, #88]	; (a204 <mpsc_pbuf_claim+0x108>)
    a1aa:	f011 f83f 	bl	1b22c <assert_print>
    a1ae:	21c2      	movs	r1, #194	; 0xc2
    a1b0:	e7c1      	b.n	a136 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    a1b2:	f043 0302 	orr.w	r3, r3, #2
    a1b6:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    a1ba:	69e3      	ldr	r3, [r4, #28]
    a1bc:	4648      	mov	r0, r9
    a1be:	68a5      	ldr	r5, [r4, #8]
    a1c0:	4798      	blx	r3
    a1c2:	4629      	mov	r1, r5
    a1c4:	4602      	mov	r2, r0
    a1c6:	4620      	mov	r0, r4
    a1c8:	f011 f85f 	bl	1b28a <idx_inc>
		cont = false;
    a1cc:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    a1ce:	60a0      	str	r0, [r4, #8]
    a1d0:	e7df      	b.n	a192 <mpsc_pbuf_claim+0x96>
		cont = false;
    a1d2:	461d      	mov	r5, r3
			item = NULL;
    a1d4:	46a9      	mov	r9, r5
    a1d6:	e7dc      	b.n	a192 <mpsc_pbuf_claim+0x96>
		cont = false;
    a1d8:	4605      	mov	r5, r0
    a1da:	e7fb      	b.n	a1d4 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    a1dc:	f388 8811 	msr	BASEPRI, r8
    a1e0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    a1e4:	2d00      	cmp	r5, #0
    a1e6:	d18e      	bne.n	a106 <mpsc_pbuf_claim+0xa>

	return item;
}
    a1e8:	4648      	mov	r0, r9
    a1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a1ee:	bf00      	nop
    a1f0:	0001fd89 	.word	0x0001fd89
    a1f4:	0001fde2 	.word	0x0001fde2
    a1f8:	0001f995 	.word	0x0001f995
    a1fc:	0001fdf7 	.word	0x0001fdf7
    a200:	0001fdb6 	.word	0x0001fdb6
    a204:	0001fdcd 	.word	0x0001fdcd

0000a208 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    a208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a20c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    a20e:	69c3      	ldr	r3, [r0, #28]
    a210:	4608      	mov	r0, r1
{
    a212:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    a214:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    a216:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    a21a:	4607      	mov	r7, r0
	__asm__ volatile(
    a21c:	f04f 0320 	mov.w	r3, #32
    a220:	f3ef 8811 	mrs	r8, BASEPRI
    a224:	f383 8812 	msr	BASEPRI_MAX, r3
    a228:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a22c:	4630      	mov	r0, r6
    a22e:	f00d fa3b 	bl	176a8 <z_spin_lock_valid>
    a232:	b968      	cbnz	r0, a250 <mpsc_pbuf_free+0x48>
    a234:	2394      	movs	r3, #148	; 0x94
    a236:	4a23      	ldr	r2, [pc, #140]	; (a2c4 <mpsc_pbuf_free+0xbc>)
    a238:	4923      	ldr	r1, [pc, #140]	; (a2c8 <mpsc_pbuf_free+0xc0>)
    a23a:	4824      	ldr	r0, [pc, #144]	; (a2cc <mpsc_pbuf_free+0xc4>)
    a23c:	f010 fff6 	bl	1b22c <assert_print>
    a240:	4631      	mov	r1, r6
    a242:	4823      	ldr	r0, [pc, #140]	; (a2d0 <mpsc_pbuf_free+0xc8>)
    a244:	f010 fff2 	bl	1b22c <assert_print>
    a248:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a24a:	481e      	ldr	r0, [pc, #120]	; (a2c4 <mpsc_pbuf_free+0xbc>)
    a24c:	f010 ffe7 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
    a250:	4630      	mov	r0, r6
    a252:	f00d fa45 	bl	176e0 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    a256:	782b      	ldrb	r3, [r5, #0]
    a258:	f36f 0300 	bfc	r3, #0, #1
    a25c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a25e:	6923      	ldr	r3, [r4, #16]
    a260:	079b      	lsls	r3, r3, #30
    a262:	d505      	bpl.n	a270 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    a264:	68e2      	ldr	r2, [r4, #12]
    a266:	6a23      	ldr	r3, [r4, #32]
    a268:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a26c:	429d      	cmp	r5, r3
    a26e:	d119      	bne.n	a2a4 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    a270:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a272:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    a274:	f36f 0341 	bfc	r3, #1, #1
    a278:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a27a:	68e1      	ldr	r1, [r4, #12]
    a27c:	4620      	mov	r0, r4
    a27e:	f011 f804 	bl	1b28a <idx_inc>
    a282:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a284:	4630      	mov	r0, r6
    a286:	f00d fa1d 	bl	176c4 <z_spin_unlock_valid>
    a28a:	b980      	cbnz	r0, a2ae <mpsc_pbuf_free+0xa6>
    a28c:	23c2      	movs	r3, #194	; 0xc2
    a28e:	4a0d      	ldr	r2, [pc, #52]	; (a2c4 <mpsc_pbuf_free+0xbc>)
    a290:	4910      	ldr	r1, [pc, #64]	; (a2d4 <mpsc_pbuf_free+0xcc>)
    a292:	480e      	ldr	r0, [pc, #56]	; (a2cc <mpsc_pbuf_free+0xc4>)
    a294:	f010 ffca 	bl	1b22c <assert_print>
    a298:	4631      	mov	r1, r6
    a29a:	480f      	ldr	r0, [pc, #60]	; (a2d8 <mpsc_pbuf_free+0xd0>)
    a29c:	f010 ffc6 	bl	1b22c <assert_print>
    a2a0:	21c2      	movs	r1, #194	; 0xc2
    a2a2:	e7d2      	b.n	a24a <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    a2a4:	682b      	ldr	r3, [r5, #0]
    a2a6:	f367 039f 	bfi	r3, r7, #2, #30
    a2aa:	602b      	str	r3, [r5, #0]
    a2ac:	e7ea      	b.n	a284 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    a2ae:	f388 8811 	msr	BASEPRI, r8
    a2b2:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a2b6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    a2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a2be:	f00d bd09 	b.w	17cd4 <z_impl_k_sem_give>
    a2c2:	bf00      	nop
    a2c4:	0001fd89 	.word	0x0001fd89
    a2c8:	0001fde2 	.word	0x0001fde2
    a2cc:	0001f995 	.word	0x0001f995
    a2d0:	0001fdf7 	.word	0x0001fdf7
    a2d4:	0001fdb6 	.word	0x0001fdb6
    a2d8:	0001fdcd 	.word	0x0001fdcd

0000a2dc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    a2dc:	b148      	cbz	r0, a2f2 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    a2de:	4b05      	ldr	r3, [pc, #20]	; (a2f4 <arch_busy_wait+0x18>)
    a2e0:	4a05      	ldr	r2, [pc, #20]	; (a2f8 <arch_busy_wait+0x1c>)
    a2e2:	681b      	ldr	r3, [r3, #0]
    a2e4:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    a2e8:	4358      	muls	r0, r3
    a2ea:	4b04      	ldr	r3, [pc, #16]	; (a2fc <arch_busy_wait+0x20>)
    a2ec:	f043 0301 	orr.w	r3, r3, #1
    a2f0:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    a2f2:	4770      	bx	lr
    a2f4:	200082c4 	.word	0x200082c4
    a2f8:	000f4240 	.word	0x000f4240
    a2fc:	0001eed0 	.word	0x0001eed0

0000a300 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    a300:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    a302:	b570      	push	{r4, r5, r6, lr}
    a304:	4605      	mov	r5, r0
    a306:	461e      	mov	r6, r3
    a308:	4608      	mov	r0, r1
    a30a:	d90b      	bls.n	a324 <ppi_ipc_to_rtc.isra.0+0x24>
    a30c:	491d      	ldr	r1, [pc, #116]	; (a384 <ppi_ipc_to_rtc.isra.0+0x84>)
    a30e:	481e      	ldr	r0, [pc, #120]	; (a388 <ppi_ipc_to_rtc.isra.0+0x88>)
    a310:	f240 13e7 	movw	r3, #487	; 0x1e7
    a314:	4a1d      	ldr	r2, [pc, #116]	; (a38c <ppi_ipc_to_rtc.isra.0+0x8c>)
    a316:	f010 ff89 	bl	1b22c <assert_print>
    a31a:	f240 11e7 	movw	r1, #487	; 0x1e7
    a31e:	481b      	ldr	r0, [pc, #108]	; (a38c <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    a320:	f010 ff7d 	bl	1b21e <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    a324:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    a326:	f00a f925 	bl	14574 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    a32a:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    a32e:	b1ae      	cbz	r6, a35c <ppi_ipc_to_rtc.isra.0+0x5c>
    a330:	b950      	cbnz	r0, a348 <ppi_ipc_to_rtc.isra.0+0x48>
    a332:	4917      	ldr	r1, [pc, #92]	; (a390 <ppi_ipc_to_rtc.isra.0+0x90>)
    a334:	f240 234e 	movw	r3, #590	; 0x24e
    a338:	4a16      	ldr	r2, [pc, #88]	; (a394 <ppi_ipc_to_rtc.isra.0+0x94>)
    a33a:	4813      	ldr	r0, [pc, #76]	; (a388 <ppi_ipc_to_rtc.isra.0+0x88>)
    a33c:	f010 ff76 	bl	1b22c <assert_print>
    a340:	f240 214e 	movw	r1, #590	; 0x24e
    a344:	4813      	ldr	r0, [pc, #76]	; (a394 <ppi_ipc_to_rtc.isra.0+0x94>)
    a346:	e7eb      	b.n	a320 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    a348:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a34c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    a350:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    a354:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    a358:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    a35a:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    a35c:	b948      	cbnz	r0, a372 <ppi_ipc_to_rtc.isra.0+0x72>
    a35e:	490c      	ldr	r1, [pc, #48]	; (a390 <ppi_ipc_to_rtc.isra.0+0x90>)
    a360:	f240 2363 	movw	r3, #611	; 0x263
    a364:	4a0b      	ldr	r2, [pc, #44]	; (a394 <ppi_ipc_to_rtc.isra.0+0x94>)
    a366:	4808      	ldr	r0, [pc, #32]	; (a388 <ppi_ipc_to_rtc.isra.0+0x88>)
    a368:	f010 ff60 	bl	1b22c <assert_print>
    a36c:	f240 2163 	movw	r1, #611	; 0x263
    a370:	e7e8      	b.n	a344 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    a372:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    a376:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    a37a:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    a37e:	6016      	str	r6, [r2, #0]
    a380:	e7eb      	b.n	a35a <ppi_ipc_to_rtc.isra.0+0x5a>
    a382:	bf00      	nop
    a384:	0001fe9d 	.word	0x0001fe9d
    a388:	0001f995 	.word	0x0001f995
    a38c:	0001fe6b 	.word	0x0001fe6b
    a390:	0001fee0 	.word	0x0001fee0
    a394:	0001fea8 	.word	0x0001fea8

0000a398 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    a398:	b5f0      	push	{r4, r5, r6, r7, lr}
    a39a:	b083      	sub	sp, #12
    a39c:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    a39e:	1d38      	adds	r0, r7, #4
    a3a0:	f00b f8f2 	bl	15588 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    a3a4:	4b24      	ldr	r3, [pc, #144]	; (a438 <sync_rtc_setup+0xa0>)
    a3a6:	4298      	cmp	r0, r3
    a3a8:	d143      	bne.n	a432 <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    a3aa:	f00a facb 	bl	14944 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    a3ae:	1e04      	subs	r4, r0, #0
    a3b0:	da13      	bge.n	a3da <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    a3b2:	7938      	ldrb	r0, [r7, #4]
    a3b4:	f00b f8ee 	bl	15594 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    a3b8:	466d      	mov	r5, sp
    a3ba:	b088      	sub	sp, #32
    a3bc:	466a      	mov	r2, sp
    a3be:	4b1f      	ldr	r3, [pc, #124]	; (a43c <sync_rtc_setup+0xa4>)
    a3c0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    a3c4:	2303      	movs	r3, #3
    a3c6:	f842 3f10 	str.w	r3, [r2, #16]!
    a3ca:	2300      	movs	r3, #0
    a3cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a3d0:	481b      	ldr	r0, [pc, #108]	; (a440 <sync_rtc_setup+0xa8>)
    a3d2:	f000 fc93 	bl	acfc <z_impl_z_log_msg_static_create>
    a3d6:	46ad      	mov	sp, r5
	}

	return rv;
    a3d8:	e027      	b.n	a42a <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    a3da:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    a3de:	4d19      	ldr	r5, [pc, #100]	; (a444 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    a3e0:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    a3e2:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    a3e4:	80fb      	strh	r3, [r7, #6]
    a3e6:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    a3e8:	687b      	ldr	r3, [r7, #4]
    a3ea:	b914      	cbnz	r4, a3f2 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    a3ec:	f06f 0457 	mvn.w	r4, #87	; 0x57
    a3f0:	e7e2      	b.n	a3b8 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    a3f2:	2108      	movs	r1, #8
    a3f4:	4628      	mov	r0, r5
    a3f6:	4a14      	ldr	r2, [pc, #80]	; (a448 <sync_rtc_setup+0xb0>)
    a3f8:	47a0      	blx	r4
	if (err < 0) {
    a3fa:	1e04      	subs	r4, r0, #0
    a3fc:	dbdc      	blt.n	a3b8 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    a3fe:	6933      	ldr	r3, [r6, #16]
    a400:	2b00      	cmp	r3, #0
    a402:	d0f3      	beq.n	a3ec <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    a404:	2201      	movs	r2, #1
    a406:	2108      	movs	r1, #8
    a408:	4628      	mov	r0, r5
    a40a:	4798      	blx	r3
	if (rv < 0) {
    a40c:	1e04      	subs	r4, r0, #0
    a40e:	dbd3      	blt.n	a3b8 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    a410:	2301      	movs	r3, #1
    a412:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    a414:	4a0d      	ldr	r2, [pc, #52]	; (a44c <sync_rtc_setup+0xb4>)
    a416:	fa03 f100 	lsl.w	r1, r3, r0
    a41a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    a41e:	79fa      	ldrb	r2, [r7, #7]
    a420:	7979      	ldrb	r1, [r7, #5]
    a422:	f7ff ff6d 	bl	a300 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    a426:	2c00      	cmp	r4, #0
    a428:	d1c6      	bne.n	a3b8 <sync_rtc_setup+0x20>
}
    a42a:	4620      	mov	r0, r4
    a42c:	370c      	adds	r7, #12
    a42e:	46bd      	mov	sp, r7
    a430:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    a432:	f06f 0412 	mvn.w	r4, #18
    a436:	e7bf      	b.n	a3b8 <sync_rtc_setup+0x20>
    a438:	0bad0000 	.word	0x0bad0000
    a43c:	0001fee4 	.word	0x0001fee4
    a440:	0001ee4c 	.word	0x0001ee4c
    a444:	0001eaac 	.word	0x0001eaac
    a448:	0000a501 	.word	0x0000a501
    a44c:	40017000 	.word	0x40017000

0000a450 <rtc_cb>:
{
    a450:	b570      	push	{r4, r5, r6, lr}
    a452:	9e04      	ldr	r6, [sp, #16]
    a454:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    a458:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    a45a:	f3c6 2607 	ubfx	r6, r6, #8, #8
    a45e:	4630      	mov	r0, r6
    a460:	f00a f86e 	bl	14540 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    a464:	2c0f      	cmp	r4, #15
    a466:	d90b      	bls.n	a480 <rtc_cb+0x30>
    a468:	491b      	ldr	r1, [pc, #108]	; (a4d8 <rtc_cb+0x88>)
    a46a:	481c      	ldr	r0, [pc, #112]	; (a4dc <rtc_cb+0x8c>)
    a46c:	f240 13e1 	movw	r3, #481	; 0x1e1
    a470:	4a1b      	ldr	r2, [pc, #108]	; (a4e0 <rtc_cb+0x90>)
    a472:	f010 fedb 	bl	1b22c <assert_print>
    a476:	f240 11e1 	movw	r1, #481	; 0x1e1
    a47a:	4819      	ldr	r0, [pc, #100]	; (a4e0 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    a47c:	f010 fecf 	bl	1b21e <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    a480:	00a4      	lsls	r4, r4, #2
    a482:	b2e4      	uxtb	r4, r4
    a484:	b950      	cbnz	r0, a49c <rtc_cb+0x4c>
    a486:	4917      	ldr	r1, [pc, #92]	; (a4e4 <rtc_cb+0x94>)
    a488:	4814      	ldr	r0, [pc, #80]	; (a4dc <rtc_cb+0x8c>)
    a48a:	f44f 7317 	mov.w	r3, #604	; 0x25c
    a48e:	4a16      	ldr	r2, [pc, #88]	; (a4e8 <rtc_cb+0x98>)
    a490:	f010 fecc 	bl	1b22c <assert_print>
    a494:	f44f 7117 	mov.w	r1, #604	; 0x25c
    a498:	4813      	ldr	r0, [pc, #76]	; (a4e8 <rtc_cb+0x98>)
    a49a:	e7ef      	b.n	a47c <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    a49c:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    a49e:	4b13      	ldr	r3, [pc, #76]	; (a4ec <rtc_cb+0x9c>)
    a4a0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    a4a4:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    a4a6:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    a4a8:	4a11      	ldr	r2, [pc, #68]	; (a4f0 <rtc_cb+0xa0>)
    a4aa:	40ab      	lsls	r3, r5
    a4ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    a4b0:	4630      	mov	r0, r6
    a4b2:	f00a fa65 	bl	14980 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    a4b6:	4628      	mov	r0, r5
    a4b8:	f00b f86c 	bl	15594 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    a4bc:	4b0d      	ldr	r3, [pc, #52]	; (a4f4 <rtc_cb+0xa4>)
    a4be:	4298      	cmp	r0, r3
    a4c0:	d008      	beq.n	a4d4 <rtc_cb+0x84>
    a4c2:	490d      	ldr	r1, [pc, #52]	; (a4f8 <rtc_cb+0xa8>)
    a4c4:	4805      	ldr	r0, [pc, #20]	; (a4dc <rtc_cb+0x8c>)
    a4c6:	2374      	movs	r3, #116	; 0x74
    a4c8:	4a0c      	ldr	r2, [pc, #48]	; (a4fc <rtc_cb+0xac>)
    a4ca:	f010 feaf 	bl	1b22c <assert_print>
    a4ce:	2174      	movs	r1, #116	; 0x74
    a4d0:	480a      	ldr	r0, [pc, #40]	; (a4fc <rtc_cb+0xac>)
    a4d2:	e7d3      	b.n	a47c <rtc_cb+0x2c>
}
    a4d4:	bd70      	pop	{r4, r5, r6, pc}
    a4d6:	bf00      	nop
    a4d8:	0001fe9d 	.word	0x0001fe9d
    a4dc:	0001f995 	.word	0x0001f995
    a4e0:	0001fe6b 	.word	0x0001fe6b
    a4e4:	0001ff0c 	.word	0x0001ff0c
    a4e8:	0001fea8 	.word	0x0001fea8
    a4ec:	4002a080 	.word	0x4002a080
    a4f0:	40017000 	.word	0x40017000
    a4f4:	0bad0000 	.word	0x0bad0000
    a4f8:	0001ff47 	.word	0x0001ff47
    a4fc:	0001ff10 	.word	0x0001ff10

0000a500 <mbox_callback>:
{
    a500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a504:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    a506:	6883      	ldr	r3, [r0, #8]
    a508:	691b      	ldr	r3, [r3, #16]
    a50a:	b94b      	cbnz	r3, a520 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    a50c:	4927      	ldr	r1, [pc, #156]	; (a5ac <mbox_callback+0xac>)
    a50e:	4828      	ldr	r0, [pc, #160]	; (a5b0 <mbox_callback+0xb0>)
    a510:	23ca      	movs	r3, #202	; 0xca
    a512:	4a28      	ldr	r2, [pc, #160]	; (a5b4 <mbox_callback+0xb4>)
    a514:	f010 fe8a 	bl	1b22c <assert_print>
    a518:	21ca      	movs	r1, #202	; 0xca
    a51a:	4826      	ldr	r0, [pc, #152]	; (a5b4 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    a51c:	f010 fe7f 	bl	1b21e <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    a520:	2200      	movs	r2, #0
    a522:	4798      	blx	r3
    a524:	4606      	mov	r6, r0
    a526:	2800      	cmp	r0, #0
    a528:	d1f0      	bne.n	a50c <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    a52a:	f3c4 2907 	ubfx	r9, r4, #8, #8
    a52e:	4648      	mov	r0, r9
    a530:	f00a f83a 	bl	145a8 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    a534:	fa5f f884 	uxtb.w	r8, r4
    a538:	4633      	mov	r3, r6
    a53a:	4649      	mov	r1, r9
    a53c:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    a53e:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    a540:	4640      	mov	r0, r8
    a542:	f7ff fedd 	bl	a300 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    a546:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    a54a:	4648      	mov	r0, r9
    a54c:	f009 fff8 	bl	14540 <z_nrf_rtc_timer_compare_evt_address_get>
    a550:	2d0f      	cmp	r5, #15
    a552:	d90a      	bls.n	a56a <mbox_callback+0x6a>
    a554:	4918      	ldr	r1, [pc, #96]	; (a5b8 <mbox_callback+0xb8>)
    a556:	4816      	ldr	r0, [pc, #88]	; (a5b0 <mbox_callback+0xb0>)
    a558:	f240 13e1 	movw	r3, #481	; 0x1e1
    a55c:	4a17      	ldr	r2, [pc, #92]	; (a5bc <mbox_callback+0xbc>)
    a55e:	f010 fe65 	bl	1b22c <assert_print>
    a562:	f240 11e1 	movw	r1, #481	; 0x1e1
    a566:	4815      	ldr	r0, [pc, #84]	; (a5bc <mbox_callback+0xbc>)
    a568:	e7d8      	b.n	a51c <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a56a:	4a15      	ldr	r2, [pc, #84]	; (a5c0 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    a56c:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a56e:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    a570:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a574:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    a576:	b950      	cbnz	r0, a58e <mbox_callback+0x8e>
    a578:	4912      	ldr	r1, [pc, #72]	; (a5c4 <mbox_callback+0xc4>)
    a57a:	480d      	ldr	r0, [pc, #52]	; (a5b0 <mbox_callback+0xb0>)
    a57c:	f44f 7312 	mov.w	r3, #584	; 0x248
    a580:	4a11      	ldr	r2, [pc, #68]	; (a5c8 <mbox_callback+0xc8>)
    a582:	f010 fe53 	bl	1b22c <assert_print>
    a586:	f44f 7112 	mov.w	r1, #584	; 0x248
    a58a:	480f      	ldr	r0, [pc, #60]	; (a5c8 <mbox_callback+0xc8>)
    a58c:	e7c6      	b.n	a51c <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a58e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    a592:	4b0e      	ldr	r3, [pc, #56]	; (a5cc <mbox_callback+0xcc>)
    a594:	f107 0232 	add.w	r2, r7, #50	; 0x32
    a598:	9300      	str	r3, [sp, #0]
    a59a:	4648      	mov	r0, r9
    a59c:	4633      	mov	r3, r6
    a59e:	9401      	str	r4, [sp, #4]
    a5a0:	0052      	lsls	r2, r2, #1
    a5a2:	f00a f8df 	bl	14764 <z_nrf_rtc_timer_set>
}
    a5a6:	b003      	add	sp, #12
    a5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a5ac:	0001fe5e 	.word	0x0001fe5e
    a5b0:	0001f995 	.word	0x0001f995
    a5b4:	0001ff10 	.word	0x0001ff10
    a5b8:	0001fe9d 	.word	0x0001fe9d
    a5bc:	0001fe6b 	.word	0x0001fe6b
    a5c0:	4002a080 	.word	0x4002a080
    a5c4:	0001ff0c 	.word	0x0001ff0c
    a5c8:	0001fea8 	.word	0x0001fea8
    a5cc:	0000a451 	.word	0x0000a451

0000a5d0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a5d0:	f013 ba57 	b.w	1da82 <SystemInit>

0000a5d4 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    a5d4:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    a5d6:	aa01      	add	r2, sp, #4
    a5d8:	f013 fa3a 	bl	1da50 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    a5dc:	4604      	mov	r4, r0
    a5de:	b168      	cbz	r0, a5fc <soc_secure_gpio_pin_mcu_select+0x28>
    a5e0:	2316      	movs	r3, #22
    a5e2:	4a0e      	ldr	r2, [pc, #56]	; (a61c <soc_secure_gpio_pin_mcu_select+0x48>)
    a5e4:	490e      	ldr	r1, [pc, #56]	; (a620 <soc_secure_gpio_pin_mcu_select+0x4c>)
    a5e6:	480f      	ldr	r0, [pc, #60]	; (a624 <soc_secure_gpio_pin_mcu_select+0x50>)
    a5e8:	f010 fe20 	bl	1b22c <assert_print>
    a5ec:	4621      	mov	r1, r4
    a5ee:	480e      	ldr	r0, [pc, #56]	; (a628 <soc_secure_gpio_pin_mcu_select+0x54>)
    a5f0:	f010 fe1c 	bl	1b22c <assert_print>
    a5f4:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    a5f6:	4809      	ldr	r0, [pc, #36]	; (a61c <soc_secure_gpio_pin_mcu_select+0x48>)
    a5f8:	f010 fe11 	bl	1b21e <assert_post_action>
    a5fc:	9b01      	ldr	r3, [sp, #4]
    a5fe:	b15b      	cbz	r3, a618 <soc_secure_gpio_pin_mcu_select+0x44>
    a600:	2317      	movs	r3, #23
    a602:	4a06      	ldr	r2, [pc, #24]	; (a61c <soc_secure_gpio_pin_mcu_select+0x48>)
    a604:	4909      	ldr	r1, [pc, #36]	; (a62c <soc_secure_gpio_pin_mcu_select+0x58>)
    a606:	4807      	ldr	r0, [pc, #28]	; (a624 <soc_secure_gpio_pin_mcu_select+0x50>)
    a608:	f010 fe10 	bl	1b22c <assert_print>
    a60c:	9901      	ldr	r1, [sp, #4]
    a60e:	4808      	ldr	r0, [pc, #32]	; (a630 <soc_secure_gpio_pin_mcu_select+0x5c>)
    a610:	f010 fe0c 	bl	1b22c <assert_print>
    a614:	2117      	movs	r1, #23
    a616:	e7ee      	b.n	a5f6 <soc_secure_gpio_pin_mcu_select+0x22>
}
    a618:	b002      	add	sp, #8
    a61a:	bd10      	pop	{r4, pc}
    a61c:	0001ff64 	.word	0x0001ff64
    a620:	0001ff9e 	.word	0x0001ff9e
    a624:	0001f995 	.word	0x0001f995
    a628:	0001ffbe 	.word	0x0001ffbe
    a62c:	0001ffd8 	.word	0x0001ffd8
    a630:	0001ffe4 	.word	0x0001ffe4

0000a634 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a634:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    a636:	2200      	movs	r2, #0
{
    a638:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    a63a:	490f      	ldr	r1, [pc, #60]	; (a678 <enable_logger+0x44>)
    a63c:	480f      	ldr	r0, [pc, #60]	; (a67c <enable_logger+0x48>)
    a63e:	f014 f8a1 	bl	1e784 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a642:	2200      	movs	r2, #0
    a644:	2300      	movs	r3, #0
    a646:	2400      	movs	r4, #0
    a648:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a64c:	230e      	movs	r3, #14
    a64e:	4d0c      	ldr	r5, [pc, #48]	; (a680 <enable_logger+0x4c>)
    a650:	e9cd 3403 	strd	r3, r4, [sp, #12]
    a654:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a658:	4628      	mov	r0, r5
    a65a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a65e:	4b09      	ldr	r3, [pc, #36]	; (a684 <enable_logger+0x50>)
    a660:	4909      	ldr	r1, [pc, #36]	; (a688 <enable_logger+0x54>)
    a662:	9400      	str	r4, [sp, #0]
    a664:	f00c ff56 	bl	17514 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a668:	4908      	ldr	r1, [pc, #32]	; (a68c <enable_logger+0x58>)
    a66a:	4628      	mov	r0, r5
    a66c:	f013 ff6e 	bl	1e54c <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    a670:	4620      	mov	r0, r4
    a672:	b009      	add	sp, #36	; 0x24
    a674:	bd30      	pop	{r4, r5, pc}
    a676:	bf00      	nop
    a678:	0000a7d5 	.word	0x0000a7d5
    a67c:	20008bc8 	.word	0x20008bc8
    a680:	20008738 	.word	0x20008738
    a684:	0000aaa5 	.word	0x0000aaa5
    a688:	20009bb0 	.word	0x20009bb0
    a68c:	0001fffe 	.word	0x0001fffe

0000a690 <activate_foreach_backend>:
{
    a690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a694:	4604      	mov	r4, r0
	while (mask_cpy) {
    a696:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    a698:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a69c:	f8df 8050 	ldr.w	r8, [pc, #80]	; a6f0 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    a6a0:	b914      	cbnz	r4, a6a8 <activate_foreach_backend+0x18>
}
    a6a2:	4638      	mov	r0, r7
    a6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    a6a8:	fa94 f5a4 	rbit	r5, r4
    a6ac:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    a6b0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a6b4:	012e      	lsls	r6, r5, #4
    a6b6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    a6ba:	ea6f 0a03 	mvn.w	sl, r3
    a6be:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a6c2:	7b2b      	ldrb	r3, [r5, #12]
    a6c4:	2b00      	cmp	r3, #0
    a6c6:	d0eb      	beq.n	a6a0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    a6c8:	f858 3006 	ldr.w	r3, [r8, r6]
    a6cc:	691b      	ldr	r3, [r3, #16]
    a6ce:	b94b      	cbnz	r3, a6e4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    a6d0:	4446      	add	r6, r8
			log_backend_enable(backend,
    a6d2:	6873      	ldr	r3, [r6, #4]
    a6d4:	2204      	movs	r2, #4
    a6d6:	4628      	mov	r0, r5
    a6d8:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    a6da:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    a6de:	f000 fae7 	bl	acb0 <log_backend_enable>
    a6e2:	e7dd      	b.n	a6a0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    a6e4:	4628      	mov	r0, r5
    a6e6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a6e8:	2800      	cmp	r0, #0
    a6ea:	d1d9      	bne.n	a6a0 <activate_foreach_backend+0x10>
    a6ec:	e7f0      	b.n	a6d0 <activate_foreach_backend+0x40>
    a6ee:	bf00      	nop
    a6f0:	0001ee5c 	.word	0x0001ee5c

0000a6f4 <z_log_init>:
{
    a6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    a6f8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; a7b4 <z_log_init+0xc0>
    a6fc:	4c2e      	ldr	r4, [pc, #184]	; (a7b8 <z_log_init+0xc4>)
    a6fe:	4680      	mov	r8, r0
    a700:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    a704:	2b9f      	cmp	r3, #159	; 0x9f
{
    a706:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    a708:	d90b      	bls.n	a722 <z_log_init+0x2e>
    a70a:	492c      	ldr	r1, [pc, #176]	; (a7bc <z_log_init+0xc8>)
    a70c:	f240 1315 	movw	r3, #277	; 0x115
    a710:	4a2b      	ldr	r2, [pc, #172]	; (a7c0 <z_log_init+0xcc>)
    a712:	482c      	ldr	r0, [pc, #176]	; (a7c4 <z_log_init+0xd0>)
    a714:	f010 fd8a 	bl	1b22c <assert_print>
    a718:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a71c:	4828      	ldr	r0, [pc, #160]	; (a7c0 <z_log_init+0xcc>)
    a71e:	f010 fd7e 	bl	1b21e <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    a722:	4829      	ldr	r0, [pc, #164]	; (a7c8 <z_log_init+0xd4>)
    a724:	f010 fe99 	bl	1b45a <atomic_inc>
    a728:	4606      	mov	r6, r0
    a72a:	b360      	cbz	r0, a786 <z_log_init+0x92>
	uint32_t mask = 0;
    a72c:	2500      	movs	r5, #0
}
    a72e:	4628      	mov	r0, r5
    a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    a734:	7b23      	ldrb	r3, [r4, #12]
    a736:	b173      	cbz	r3, a756 <z_log_init+0x62>
	if (backend->api->init) {
    a738:	6823      	ldr	r3, [r4, #0]
    a73a:	68db      	ldr	r3, [r3, #12]
    a73c:	b10b      	cbz	r3, a742 <z_log_init+0x4e>
		backend->api->init(backend);
    a73e:	4620      	mov	r0, r4
    a740:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    a742:	6823      	ldr	r3, [r4, #0]
    a744:	691b      	ldr	r3, [r3, #16]
    a746:	b9b3      	cbnz	r3, a776 <z_log_init+0x82>
				log_backend_enable(backend,
    a748:	6863      	ldr	r3, [r4, #4]
    a74a:	2204      	movs	r2, #4
    a74c:	4620      	mov	r0, r4
    a74e:	6819      	ldr	r1, [r3, #0]
    a750:	f000 faae 	bl	acb0 <log_backend_enable>
			i++;
    a754:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a756:	3410      	adds	r4, #16
    a758:	454c      	cmp	r4, r9
    a75a:	d918      	bls.n	a78e <z_log_init+0x9a>
    a75c:	491b      	ldr	r1, [pc, #108]	; (a7cc <z_log_init+0xd8>)
    a75e:	f44f 7391 	mov.w	r3, #290	; 0x122
    a762:	4a17      	ldr	r2, [pc, #92]	; (a7c0 <z_log_init+0xcc>)
    a764:	4817      	ldr	r0, [pc, #92]	; (a7c4 <z_log_init+0xd0>)
    a766:	f010 fd61 	bl	1b22c <assert_print>
    a76a:	4819      	ldr	r0, [pc, #100]	; (a7d0 <z_log_init+0xdc>)
    a76c:	f010 fd5e 	bl	1b22c <assert_print>
    a770:	f44f 7191 	mov.w	r1, #290	; 0x122
    a774:	e7d2      	b.n	a71c <z_log_init+0x28>
		return backend->api->is_ready(backend);
    a776:	4620      	mov	r0, r4
    a778:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    a77a:	2800      	cmp	r0, #0
    a77c:	d0e4      	beq.n	a748 <z_log_init+0x54>
				mask |= BIT(i);
    a77e:	fa0a f306 	lsl.w	r3, sl, r6
    a782:	431d      	orrs	r5, r3
    a784:	e7e6      	b.n	a754 <z_log_init+0x60>
	uint32_t mask = 0;
    a786:	4605      	mov	r5, r0
				mask |= BIT(i);
    a788:	f04f 0a01 	mov.w	sl, #1
    a78c:	e7e4      	b.n	a758 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a78e:	d3d1      	bcc.n	a734 <z_log_init+0x40>
	if (blocking) {
    a790:	f1b8 0f00 	cmp.w	r8, #0
    a794:	d0cb      	beq.n	a72e <z_log_init+0x3a>
		while (mask) {
    a796:	2d00      	cmp	r5, #0
    a798:	d0c8      	beq.n	a72c <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    a79a:	4628      	mov	r0, r5
    a79c:	f7ff ff78 	bl	a690 <activate_foreach_backend>
    a7a0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    a7a2:	2f00      	cmp	r7, #0
    a7a4:	d0f7      	beq.n	a796 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    a7a6:	2100      	movs	r1, #0
    a7a8:	f44f 70a4 	mov.w	r0, #328	; 0x148
    a7ac:	f00f f986 	bl	19abc <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    a7b0:	e7f1      	b.n	a796 <z_log_init+0xa2>
    a7b2:	bf00      	nop
    a7b4:	0001ee6c 	.word	0x0001ee6c
    a7b8:	0001ee5c 	.word	0x0001ee5c
    a7bc:	00020033 	.word	0x00020033
    a7c0:	00020006 	.word	0x00020006
    a7c4:	0001f995 	.word	0x0001f995
    a7c8:	20009604 	.word	0x20009604
    a7cc:	00020057 	.word	0x00020057
    a7d0:	00020078 	.word	0x00020078

0000a7d4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    a7d4:	4801      	ldr	r0, [pc, #4]	; (a7dc <log_process_thread_timer_expiry_fn+0x8>)
    a7d6:	f00d ba7d 	b.w	17cd4 <z_impl_k_sem_give>
    a7da:	bf00      	nop
    a7dc:	2000857c 	.word	0x2000857c

0000a7e0 <log_format_func_t_get>:
}
    a7e0:	4b01      	ldr	r3, [pc, #4]	; (a7e8 <log_format_func_t_get+0x8>)
    a7e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a7e6:	4770      	bx	lr
    a7e8:	0001ef80 	.word	0x0001ef80

0000a7ec <log_set_timestamp_func>:
{
    a7ec:	b508      	push	{r3, lr}
    a7ee:	4603      	mov	r3, r0
    a7f0:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    a7f2:	b12b      	cbz	r3, a800 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    a7f4:	4a04      	ldr	r2, [pc, #16]	; (a808 <log_set_timestamp_func+0x1c>)
    a7f6:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    a7f8:	f000 fcfc 	bl	b1f4 <log_output_timestamp_freq_set>
	return 0;
    a7fc:	2000      	movs	r0, #0
}
    a7fe:	bd08      	pop	{r3, pc}
		return -EINVAL;
    a800:	f06f 0015 	mvn.w	r0, #21
    a804:	e7fb      	b.n	a7fe <log_set_timestamp_func+0x12>
    a806:	bf00      	nop
    a808:	20008184 	.word	0x20008184

0000a80c <z_log_notify_backend_enabled>:
{
    a80c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    a80e:	4c04      	ldr	r4, [pc, #16]	; (a820 <z_log_notify_backend_enabled+0x14>)
    a810:	7823      	ldrb	r3, [r4, #0]
    a812:	b913      	cbnz	r3, a81a <z_log_notify_backend_enabled+0xe>
    a814:	4803      	ldr	r0, [pc, #12]	; (a824 <z_log_notify_backend_enabled+0x18>)
    a816:	f00d fa5d 	bl	17cd4 <z_impl_k_sem_give>
	backend_attached = true;
    a81a:	2301      	movs	r3, #1
    a81c:	7023      	strb	r3, [r4, #0]
}
    a81e:	bd10      	pop	{r4, pc}
    a820:	20009b08 	.word	0x20009b08
    a824:	2000857c 	.word	0x2000857c

0000a828 <z_log_dropped>:
{
    a828:	b510      	push	{r4, lr}
    a82a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    a82c:	4806      	ldr	r0, [pc, #24]	; (a848 <z_log_dropped+0x20>)
    a82e:	f010 fe14 	bl	1b45a <atomic_inc>
	if (buffered) {
    a832:	b13c      	cbz	r4, a844 <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a834:	4b05      	ldr	r3, [pc, #20]	; (a84c <z_log_dropped+0x24>)
    a836:	e8d3 1fef 	ldaex	r1, [r3]
    a83a:	3901      	subs	r1, #1
    a83c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a840:	2a00      	cmp	r2, #0
    a842:	d1f8      	bne.n	a836 <z_log_dropped+0xe>
}
    a844:	bd10      	pop	{r4, pc}
    a846:	bf00      	nop
    a848:	200095fc 	.word	0x200095fc
    a84c:	20009600 	.word	0x20009600

0000a850 <z_log_dropped_read_and_clear>:
}
    a850:	2000      	movs	r0, #0
    a852:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a854:	4b03      	ldr	r3, [pc, #12]	; (a864 <z_log_dropped_read_and_clear+0x14>)
    a856:	e8d3 0fef 	ldaex	r0, [r3]
    a85a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a85e:	2a00      	cmp	r2, #0
    a860:	d1f9      	bne.n	a856 <z_log_dropped_read_and_clear+0x6>
    a862:	4770      	bx	lr
    a864:	200095fc 	.word	0x200095fc

0000a868 <dropped_notify>:
{
    a868:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    a86a:	f7ff fff1 	bl	a850 <z_log_dropped_read_and_clear>
    a86e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a870:	4c0f      	ldr	r4, [pc, #60]	; (a8b0 <dropped_notify+0x48>)
    a872:	4e10      	ldr	r6, [pc, #64]	; (a8b4 <dropped_notify+0x4c>)
    a874:	42b4      	cmp	r4, r6
    a876:	d919      	bls.n	a8ac <dropped_notify+0x44>
    a878:	490f      	ldr	r1, [pc, #60]	; (a8b8 <dropped_notify+0x50>)
    a87a:	f240 13cd 	movw	r3, #461	; 0x1cd
    a87e:	4a0f      	ldr	r2, [pc, #60]	; (a8bc <dropped_notify+0x54>)
    a880:	480f      	ldr	r0, [pc, #60]	; (a8c0 <dropped_notify+0x58>)
    a882:	f010 fcd3 	bl	1b22c <assert_print>
    a886:	480f      	ldr	r0, [pc, #60]	; (a8c4 <dropped_notify+0x5c>)
    a888:	f010 fcd0 	bl	1b22c <assert_print>
    a88c:	f240 11cd 	movw	r1, #461	; 0x1cd
    a890:	480a      	ldr	r0, [pc, #40]	; (a8bc <dropped_notify+0x54>)
    a892:	f010 fcc4 	bl	1b21e <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    a896:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a898:	795b      	ldrb	r3, [r3, #5]
    a89a:	b12b      	cbz	r3, a8a8 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    a89c:	6823      	ldr	r3, [r4, #0]
    a89e:	685b      	ldr	r3, [r3, #4]
    a8a0:	b113      	cbz	r3, a8a8 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    a8a2:	4629      	mov	r1, r5
    a8a4:	4620      	mov	r0, r4
    a8a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a8a8:	3410      	adds	r4, #16
    a8aa:	e7e3      	b.n	a874 <dropped_notify+0xc>
    a8ac:	d3f3      	bcc.n	a896 <dropped_notify+0x2e>
}
    a8ae:	bd70      	pop	{r4, r5, r6, pc}
    a8b0:	0001ee5c 	.word	0x0001ee5c
    a8b4:	0001ee6c 	.word	0x0001ee6c
    a8b8:	00020057 	.word	0x00020057
    a8bc:	00020006 	.word	0x00020006
    a8c0:	0001f995 	.word	0x0001f995
    a8c4:	00020078 	.word	0x00020078

0000a8c8 <z_log_msg_init>:
{
    a8c8:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    a8ca:	4c04      	ldr	r4, [pc, #16]	; (a8dc <z_log_msg_init+0x14>)
    a8cc:	4904      	ldr	r1, [pc, #16]	; (a8e0 <z_log_msg_init+0x18>)
    a8ce:	4620      	mov	r0, r4
    a8d0:	f7ff face 	bl	9e70 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    a8d4:	4b03      	ldr	r3, [pc, #12]	; (a8e4 <z_log_msg_init+0x1c>)
    a8d6:	601c      	str	r4, [r3, #0]
}
    a8d8:	bd10      	pop	{r4, pc}
    a8da:	bf00      	nop
    a8dc:	20008440 	.word	0x20008440
    a8e0:	0001ef6c 	.word	0x0001ef6c
    a8e4:	200095f4 	.word	0x200095f4

0000a8e8 <log_core_init>:
{
    a8e8:	b508      	push	{r3, lr}
	panic_mode = false;
    a8ea:	2300      	movs	r3, #0
    a8ec:	4a06      	ldr	r2, [pc, #24]	; (a908 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    a8ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    a8f2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    a8f4:	4a05      	ldr	r2, [pc, #20]	; (a90c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    a8f6:	4806      	ldr	r0, [pc, #24]	; (a910 <log_core_init+0x28>)
	dropped_cnt = 0;
    a8f8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    a8fa:	f7ff ff77 	bl	a7ec <log_set_timestamp_func>
}
    a8fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    a902:	f7ff bfe1 	b.w	a8c8 <z_log_msg_init>
    a906:	bf00      	nop
    a908:	20009b09 	.word	0x20009b09
    a90c:	200095fc 	.word	0x200095fc
    a910:	0001b457 	.word	0x0001b457

0000a914 <z_log_msg_alloc>:
{
    a914:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    a916:	2200      	movs	r2, #0
    a918:	2300      	movs	r3, #0
    a91a:	4801      	ldr	r0, [pc, #4]	; (a920 <z_log_msg_alloc+0xc>)
    a91c:	f7ff bada 	b.w	9ed4 <mpsc_pbuf_alloc>
    a920:	20008440 	.word	0x20008440

0000a924 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    a924:	4801      	ldr	r0, [pc, #4]	; (a92c <z_log_msg_local_claim+0x8>)
    a926:	f7ff bbe9 	b.w	a0fc <mpsc_pbuf_claim>
    a92a:	bf00      	nop
    a92c:	20008440 	.word	0x20008440

0000a930 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    a930:	4b02      	ldr	r3, [pc, #8]	; (a93c <z_log_msg_free+0xc>)
{
    a932:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    a934:	6818      	ldr	r0, [r3, #0]
    a936:	f7ff bc67 	b.w	a208 <mpsc_pbuf_free>
    a93a:	bf00      	nop
    a93c:	200095f4 	.word	0x200095f4

0000a940 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    a940:	4801      	ldr	r0, [pc, #4]	; (a948 <z_log_msg_pending+0x8>)
    a942:	f010 bd2d 	b.w	1b3a0 <mpsc_pbuf_is_pending>
    a946:	bf00      	nop
    a948:	20008440 	.word	0x20008440

0000a94c <z_impl_log_process>:
{
    a94c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    a94e:	4b2e      	ldr	r3, [pc, #184]	; (aa08 <z_impl_log_process+0xbc>)
    a950:	7818      	ldrb	r0, [r3, #0]
    a952:	2800      	cmp	r0, #0
    a954:	d057      	beq.n	aa06 <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    a956:	f7ff ffe5 	bl	a924 <z_log_msg_local_claim>
	if (msg) {
    a95a:	4605      	mov	r5, r0
    a95c:	b340      	cbz	r0, a9b0 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a95e:	4b2b      	ldr	r3, [pc, #172]	; (aa0c <z_impl_log_process+0xc0>)
    a960:	e8d3 1fef 	ldaex	r1, [r3]
    a964:	3901      	subs	r1, #1
    a966:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a96a:	2a00      	cmp	r2, #0
    a96c:	d1f8      	bne.n	a960 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a96e:	4c28      	ldr	r4, [pc, #160]	; (aa10 <z_impl_log_process+0xc4>)
    a970:	4e28      	ldr	r6, [pc, #160]	; (aa14 <z_impl_log_process+0xc8>)
    a972:	42b4      	cmp	r4, r6
    a974:	d918      	bls.n	a9a8 <z_impl_log_process+0x5c>
    a976:	4928      	ldr	r1, [pc, #160]	; (aa18 <z_impl_log_process+0xcc>)
    a978:	f240 13c1 	movw	r3, #449	; 0x1c1
    a97c:	4a27      	ldr	r2, [pc, #156]	; (aa1c <z_impl_log_process+0xd0>)
    a97e:	4828      	ldr	r0, [pc, #160]	; (aa20 <z_impl_log_process+0xd4>)
    a980:	f010 fc54 	bl	1b22c <assert_print>
    a984:	4827      	ldr	r0, [pc, #156]	; (aa24 <z_impl_log_process+0xd8>)
    a986:	f010 fc51 	bl	1b22c <assert_print>
    a98a:	f240 11c1 	movw	r1, #449	; 0x1c1
    a98e:	4823      	ldr	r0, [pc, #140]	; (aa1c <z_impl_log_process+0xd0>)
    a990:	f010 fc45 	bl	1b21e <assert_post_action>
	return backend->cb->active;
    a994:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    a996:	795b      	ldrb	r3, [r3, #5]
    a998:	b123      	cbz	r3, a9a4 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    a99a:	6823      	ldr	r3, [r4, #0]
    a99c:	4629      	mov	r1, r5
    a99e:	4620      	mov	r0, r4
    a9a0:	681b      	ldr	r3, [r3, #0]
    a9a2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a9a4:	3410      	adds	r4, #16
    a9a6:	e7e4      	b.n	a972 <z_impl_log_process+0x26>
    a9a8:	d3f4      	bcc.n	a994 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    a9aa:	4628      	mov	r0, r5
    a9ac:	f7ff ffc0 	bl	a930 <z_log_msg_free>
	return dropped_cnt > 0;
    a9b0:	4b1d      	ldr	r3, [pc, #116]	; (aa28 <z_impl_log_process+0xdc>)
    a9b2:	4c1e      	ldr	r4, [pc, #120]	; (aa2c <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    a9b4:	681b      	ldr	r3, [r3, #0]
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	dd19      	ble.n	a9ee <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    a9ba:	f013 febb 	bl	1e734 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    a9be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a9c2:	fba0 0302 	umull	r0, r3, r0, r2
    a9c6:	fb02 3101 	mla	r1, r2, r1, r3
    a9ca:	0bc3      	lsrs	r3, r0, #15
    a9cc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a9d0:	e9d4 2000 	ldrd	r2, r0, [r4]
    a9d4:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    a9d6:	f240 32e9 	movw	r2, #1001	; 0x3e9
    a9da:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a9de:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    a9e2:	4293      	cmp	r3, r2
    a9e4:	f171 0100 	sbcs.w	r1, r1, #0
    a9e8:	d301      	bcc.n	a9ee <z_impl_log_process+0xa2>
				dropped_notify();
    a9ea:	f7ff ff3d 	bl	a868 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    a9ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    a9f2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    a9f6:	f142 0200 	adc.w	r2, r2, #0
    a9fa:	e9c4 3200 	strd	r3, r2, [r4]
}
    a9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    aa02:	f7ff bf9d 	b.w	a940 <z_log_msg_pending>
}
    aa06:	bd70      	pop	{r4, r5, r6, pc}
    aa08:	20009b08 	.word	0x20009b08
    aa0c:	20009600 	.word	0x20009600
    aa10:	0001ee5c 	.word	0x0001ee5c
    aa14:	0001ee6c 	.word	0x0001ee6c
    aa18:	00020057 	.word	0x00020057
    aa1c:	00020006 	.word	0x00020006
    aa20:	0001f995 	.word	0x0001f995
    aa24:	00020078 	.word	0x00020078
    aa28:	200095fc 	.word	0x200095fc
    aa2c:	20008bc0 	.word	0x20008bc0

0000aa30 <z_impl_log_panic>:
{
    aa30:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    aa32:	4d15      	ldr	r5, [pc, #84]	; (aa88 <z_impl_log_panic+0x58>)
    aa34:	7829      	ldrb	r1, [r5, #0]
    aa36:	bb29      	cbnz	r1, aa84 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    aa38:	2001      	movs	r0, #1
    aa3a:	f7ff fe5b 	bl	a6f4 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    aa3e:	4c13      	ldr	r4, [pc, #76]	; (aa8c <z_impl_log_panic+0x5c>)
    aa40:	4e13      	ldr	r6, [pc, #76]	; (aa90 <z_impl_log_panic+0x60>)
    aa42:	42b4      	cmp	r4, r6
    aa44:	d917      	bls.n	aa76 <z_impl_log_panic+0x46>
    aa46:	4913      	ldr	r1, [pc, #76]	; (aa94 <z_impl_log_panic+0x64>)
    aa48:	f44f 73c2 	mov.w	r3, #388	; 0x184
    aa4c:	4a12      	ldr	r2, [pc, #72]	; (aa98 <z_impl_log_panic+0x68>)
    aa4e:	4813      	ldr	r0, [pc, #76]	; (aa9c <z_impl_log_panic+0x6c>)
    aa50:	f010 fbec 	bl	1b22c <assert_print>
    aa54:	4812      	ldr	r0, [pc, #72]	; (aaa0 <z_impl_log_panic+0x70>)
    aa56:	f010 fbe9 	bl	1b22c <assert_print>
    aa5a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    aa5e:	480e      	ldr	r0, [pc, #56]	; (aa98 <z_impl_log_panic+0x68>)
    aa60:	f010 fbdd 	bl	1b21e <assert_post_action>
	return backend->cb->active;
    aa64:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    aa66:	795b      	ldrb	r3, [r3, #5]
    aa68:	b11b      	cbz	r3, aa72 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    aa6a:	6823      	ldr	r3, [r4, #0]
    aa6c:	4620      	mov	r0, r4
    aa6e:	689b      	ldr	r3, [r3, #8]
    aa70:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    aa72:	3410      	adds	r4, #16
    aa74:	e7e5      	b.n	aa42 <z_impl_log_panic+0x12>
    aa76:	d3f5      	bcc.n	aa64 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    aa78:	f7ff ff68 	bl	a94c <z_impl_log_process>
		while (log_process() == true) {
    aa7c:	2800      	cmp	r0, #0
    aa7e:	d1fb      	bne.n	aa78 <z_impl_log_panic+0x48>
	panic_mode = true;
    aa80:	2301      	movs	r3, #1
    aa82:	702b      	strb	r3, [r5, #0]
}
    aa84:	bd70      	pop	{r4, r5, r6, pc}
    aa86:	bf00      	nop
    aa88:	20009b09 	.word	0x20009b09
    aa8c:	0001ee5c 	.word	0x0001ee5c
    aa90:	0001ee6c 	.word	0x0001ee6c
    aa94:	00020057 	.word	0x00020057
    aa98:	00020006 	.word	0x00020006
    aa9c:	0001f995 	.word	0x0001f995
    aaa0:	00020078 	.word	0x00020078

0000aaa4 <log_process_thread_func>:
{
    aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    aaa8:	4b2f      	ldr	r3, [pc, #188]	; (ab68 <log_process_thread_func+0xc4>)
    aaaa:	4f30      	ldr	r7, [pc, #192]	; (ab6c <log_process_thread_func+0xc8>)
    aaac:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    aaae:	091b      	lsrs	r3, r3, #4
    aab0:	d10b      	bne.n	aaca <log_process_thread_func+0x26>
    aab2:	492f      	ldr	r1, [pc, #188]	; (ab70 <log_process_thread_func+0xcc>)
    aab4:	f240 3347 	movw	r3, #839	; 0x347
    aab8:	4a2e      	ldr	r2, [pc, #184]	; (ab74 <log_process_thread_func+0xd0>)
    aaba:	482f      	ldr	r0, [pc, #188]	; (ab78 <log_process_thread_func+0xd4>)
    aabc:	f010 fbb6 	bl	1b22c <assert_print>
    aac0:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    aac4:	482b      	ldr	r0, [pc, #172]	; (ab74 <log_process_thread_func+0xd0>)
    aac6:	f010 fbaa 	bl	1b21e <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    aaca:	2100      	movs	r1, #0
    aacc:	4608      	mov	r0, r1
    aace:	f7ff fe11 	bl	a6f4 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    aad2:	4604      	mov	r4, r0
    aad4:	b340      	cbz	r0, ab28 <log_process_thread_func+0x84>
    aad6:	f240 6867 	movw	r8, #1639	; 0x667
    aada:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    aade:	f00f f821 	bl	19b24 <z_impl_z_current_get>
	proc_tid = process_tid;
    aae2:	4b26      	ldr	r3, [pc, #152]	; (ab7c <log_process_thread_func+0xd8>)
    aae4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    aae6:	b130      	cbz	r0, aaf6 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    aae8:	4b25      	ldr	r3, [pc, #148]	; (ab80 <log_process_thread_func+0xdc>)
	    process_tid &&
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	2b09      	cmp	r3, #9
    aaee:	dd02      	ble.n	aaf6 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    aaf0:	4824      	ldr	r0, [pc, #144]	; (ab84 <log_process_thread_func+0xe0>)
    aaf2:	f00d f8ef 	bl	17cd4 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    aaf6:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    aaf8:	f8df a088 	ldr.w	sl, [pc, #136]	; ab84 <log_process_thread_func+0xe0>
		if (activate_mask) {
    aafc:	b144      	cbz	r4, ab10 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    aafe:	4620      	mov	r0, r4
    ab00:	f7ff fdc6 	bl	a690 <activate_foreach_backend>
			if (!activate_mask) {
    ab04:	4604      	mov	r4, r0
    ab06:	b918      	cbnz	r0, ab10 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    ab08:	f04f 38ff 	mov.w	r8, #4294967295
    ab0c:	f04f 39ff 	mov.w	r9, #4294967295
    ab10:	f7ff ff1c 	bl	a94c <z_impl_log_process>
		if (log_process() == false) {
    ab14:	4606      	mov	r6, r0
    ab16:	b928      	cbnz	r0, ab24 <log_process_thread_func+0x80>
			if (processed_any) {
    ab18:	b95d      	cbnz	r5, ab32 <log_process_thread_func+0x8e>
    ab1a:	4642      	mov	r2, r8
    ab1c:	464b      	mov	r3, r9
    ab1e:	4650      	mov	r0, sl
    ab20:	f00d f91c 	bl	17d5c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ab24:	4635      	mov	r5, r6
    ab26:	e7e9      	b.n	aafc <log_process_thread_func+0x58>
    ab28:	f04f 38ff 	mov.w	r8, #4294967295
    ab2c:	f04f 39ff 	mov.w	r9, #4294967295
    ab30:	e7d5      	b.n	aade <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ab32:	4d0d      	ldr	r5, [pc, #52]	; (ab68 <log_process_thread_func+0xc4>)
    ab34:	e008      	b.n	ab48 <log_process_thread_func+0xa4>
    ab36:	d2f0      	bcs.n	ab1a <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    ab38:	682b      	ldr	r3, [r5, #0]
    ab3a:	699b      	ldr	r3, [r3, #24]
    ab3c:	b11b      	cbz	r3, ab46 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    ab3e:	2200      	movs	r2, #0
    ab40:	4628      	mov	r0, r5
    ab42:	4611      	mov	r1, r2
    ab44:	4798      	blx	r3
    ab46:	3510      	adds	r5, #16
    ab48:	42bd      	cmp	r5, r7
    ab4a:	d9f4      	bls.n	ab36 <log_process_thread_func+0x92>
    ab4c:	490e      	ldr	r1, [pc, #56]	; (ab88 <log_process_thread_func+0xe4>)
    ab4e:	f240 333b 	movw	r3, #827	; 0x33b
    ab52:	4a08      	ldr	r2, [pc, #32]	; (ab74 <log_process_thread_func+0xd0>)
    ab54:	4808      	ldr	r0, [pc, #32]	; (ab78 <log_process_thread_func+0xd4>)
    ab56:	f010 fb69 	bl	1b22c <assert_print>
    ab5a:	480c      	ldr	r0, [pc, #48]	; (ab8c <log_process_thread_func+0xe8>)
    ab5c:	f010 fb66 	bl	1b22c <assert_print>
    ab60:	f240 313b 	movw	r1, #827	; 0x33b
    ab64:	e7ae      	b.n	aac4 <log_process_thread_func+0x20>
    ab66:	bf00      	nop
    ab68:	0001ee5c 	.word	0x0001ee5c
    ab6c:	0001ee6c 	.word	0x0001ee6c
    ab70:	00020097 	.word	0x00020097
    ab74:	00020006 	.word	0x00020006
    ab78:	0001f995 	.word	0x0001f995
    ab7c:	200095f8 	.word	0x200095f8
    ab80:	20009600 	.word	0x20009600
    ab84:	2000857c 	.word	0x2000857c
    ab88:	00020057 	.word	0x00020057
    ab8c:	00020078 	.word	0x00020078

0000ab90 <z_log_msg_post_finalize>:
{
    ab90:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    ab92:	482b      	ldr	r0, [pc, #172]	; (ac40 <z_log_msg_post_finalize+0xb0>)
    ab94:	f010 fc61 	bl	1b45a <atomic_inc>
	if (panic_mode) {
    ab98:	4b2a      	ldr	r3, [pc, #168]	; (ac44 <z_log_msg_post_finalize+0xb4>)
    ab9a:	781b      	ldrb	r3, [r3, #0]
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d034      	beq.n	ac0a <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    aba0:	f04f 0320 	mov.w	r3, #32
    aba4:	f3ef 8411 	mrs	r4, BASEPRI
    aba8:	f383 8812 	msr	BASEPRI_MAX, r3
    abac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    abb0:	4825      	ldr	r0, [pc, #148]	; (ac48 <z_log_msg_post_finalize+0xb8>)
    abb2:	f00c fd79 	bl	176a8 <z_spin_lock_valid>
    abb6:	b968      	cbnz	r0, abd4 <z_log_msg_post_finalize+0x44>
    abb8:	2394      	movs	r3, #148	; 0x94
    abba:	4a24      	ldr	r2, [pc, #144]	; (ac4c <z_log_msg_post_finalize+0xbc>)
    abbc:	4924      	ldr	r1, [pc, #144]	; (ac50 <z_log_msg_post_finalize+0xc0>)
    abbe:	4825      	ldr	r0, [pc, #148]	; (ac54 <z_log_msg_post_finalize+0xc4>)
    abc0:	f010 fb34 	bl	1b22c <assert_print>
    abc4:	4920      	ldr	r1, [pc, #128]	; (ac48 <z_log_msg_post_finalize+0xb8>)
    abc6:	4824      	ldr	r0, [pc, #144]	; (ac58 <z_log_msg_post_finalize+0xc8>)
    abc8:	f010 fb30 	bl	1b22c <assert_print>
    abcc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abce:	481f      	ldr	r0, [pc, #124]	; (ac4c <z_log_msg_post_finalize+0xbc>)
    abd0:	f010 fb25 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
    abd4:	481c      	ldr	r0, [pc, #112]	; (ac48 <z_log_msg_post_finalize+0xb8>)
    abd6:	f00c fd83 	bl	176e0 <z_spin_lock_set_owner>
    abda:	f7ff feb7 	bl	a94c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abde:	481a      	ldr	r0, [pc, #104]	; (ac48 <z_log_msg_post_finalize+0xb8>)
    abe0:	f00c fd70 	bl	176c4 <z_spin_unlock_valid>
    abe4:	b958      	cbnz	r0, abfe <z_log_msg_post_finalize+0x6e>
    abe6:	23c2      	movs	r3, #194	; 0xc2
    abe8:	4a18      	ldr	r2, [pc, #96]	; (ac4c <z_log_msg_post_finalize+0xbc>)
    abea:	491c      	ldr	r1, [pc, #112]	; (ac5c <z_log_msg_post_finalize+0xcc>)
    abec:	4819      	ldr	r0, [pc, #100]	; (ac54 <z_log_msg_post_finalize+0xc4>)
    abee:	f010 fb1d 	bl	1b22c <assert_print>
    abf2:	4915      	ldr	r1, [pc, #84]	; (ac48 <z_log_msg_post_finalize+0xb8>)
    abf4:	481a      	ldr	r0, [pc, #104]	; (ac60 <z_log_msg_post_finalize+0xd0>)
    abf6:	f010 fb19 	bl	1b22c <assert_print>
    abfa:	21c2      	movs	r1, #194	; 0xc2
    abfc:	e7e7      	b.n	abce <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    abfe:	f384 8811 	msr	BASEPRI, r4
    ac02:	f3bf 8f6f 	isb	sy
}
    ac06:	b002      	add	sp, #8
    ac08:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    ac0a:	4b16      	ldr	r3, [pc, #88]	; (ac64 <z_log_msg_post_finalize+0xd4>)
    ac0c:	681b      	ldr	r3, [r3, #0]
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d0f9      	beq.n	ac06 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    ac12:	b950      	cbnz	r0, ac2a <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    ac14:	2200      	movs	r2, #0
    ac16:	2300      	movs	r3, #0
    ac18:	4813      	ldr	r0, [pc, #76]	; (ac68 <z_log_msg_post_finalize+0xd8>)
    ac1a:	e9cd 2300 	strd	r2, r3, [sp]
    ac1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ac22:	2300      	movs	r3, #0
    ac24:	f00f fc68 	bl	1a4f8 <z_impl_k_timer_start>
    ac28:	e7ed      	b.n	ac06 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ac2a:	280a      	cmp	r0, #10
    ac2c:	d1eb      	bne.n	ac06 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    ac2e:	480e      	ldr	r0, [pc, #56]	; (ac68 <z_log_msg_post_finalize+0xd8>)
    ac30:	f013 fdb4 	bl	1e79c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    ac34:	480d      	ldr	r0, [pc, #52]	; (ac6c <z_log_msg_post_finalize+0xdc>)
}
    ac36:	b002      	add	sp, #8
    ac38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac3c:	f00d b84a 	b.w	17cd4 <z_impl_k_sem_give>
    ac40:	20009600 	.word	0x20009600
    ac44:	20009b09 	.word	0x20009b09
    ac48:	200095f0 	.word	0x200095f0
    ac4c:	0001fd89 	.word	0x0001fd89
    ac50:	0001fde2 	.word	0x0001fde2
    ac54:	0001f995 	.word	0x0001f995
    ac58:	0001fdf7 	.word	0x0001fdf7
    ac5c:	0001fdb6 	.word	0x0001fdb6
    ac60:	0001fdcd 	.word	0x0001fdcd
    ac64:	200095f8 	.word	0x200095f8
    ac68:	20008bc8 	.word	0x20008bc8
    ac6c:	2000857c 	.word	0x2000857c

0000ac70 <z_log_msg_commit>:
{
    ac70:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    ac72:	4b06      	ldr	r3, [pc, #24]	; (ac8c <z_log_msg_commit+0x1c>)
{
    ac74:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    ac76:	681b      	ldr	r3, [r3, #0]
    ac78:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    ac7a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    ac7c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    ac7e:	4804      	ldr	r0, [pc, #16]	; (ac90 <z_log_msg_commit+0x20>)
    ac80:	f7ff f9e6 	bl	a050 <mpsc_pbuf_commit>
}
    ac84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    ac88:	f7ff bf82 	b.w	ab90 <z_log_msg_post_finalize>
    ac8c:	20008184 	.word	0x20008184
    ac90:	20008440 	.word	0x20008440

0000ac94 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    ac94:	4a04      	ldr	r2, [pc, #16]	; (aca8 <log_source_name_get+0x14>)
    ac96:	4b05      	ldr	r3, [pc, #20]	; (acac <log_source_name_get+0x18>)
    ac98:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    ac9a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    ac9e:	bf34      	ite	cc
    aca0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    aca4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    aca6:	4770      	bx	lr
    aca8:	0001ed64 	.word	0x0001ed64
    acac:	0001ee5c 	.word	0x0001ee5c

0000acb0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    acb0:	4b0e      	ldr	r3, [pc, #56]	; (acec <log_backend_enable+0x3c>)
{
    acb2:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    acb4:	1ac3      	subs	r3, r0, r3
    acb6:	111b      	asrs	r3, r3, #4
    acb8:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    acba:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    acbc:	b948      	cbnz	r0, acd2 <log_backend_enable+0x22>
    acbe:	490c      	ldr	r1, [pc, #48]	; (acf0 <log_backend_enable+0x40>)
    acc0:	480c      	ldr	r0, [pc, #48]	; (acf4 <log_backend_enable+0x44>)
    acc2:	23de      	movs	r3, #222	; 0xde
    acc4:	4a0c      	ldr	r2, [pc, #48]	; (acf8 <log_backend_enable+0x48>)
    acc6:	f010 fab1 	bl	1b22c <assert_print>
    acca:	21de      	movs	r1, #222	; 0xde
    accc:	480a      	ldr	r0, [pc, #40]	; (acf8 <log_backend_enable+0x48>)
    acce:	f010 faa6 	bl	1b21e <assert_post_action>
	backend->cb->id = id;
    acd2:	6844      	ldr	r4, [r0, #4]
    acd4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    acd6:	6843      	ldr	r3, [r0, #4]
    acd8:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    acda:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    acdc:	6843      	ldr	r3, [r0, #4]
    acde:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    ace0:	6843      	ldr	r3, [r0, #4]
    ace2:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    ace4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    ace8:	f7ff bd90 	b.w	a80c <z_log_notify_backend_enabled>
    acec:	0001ee5c 	.word	0x0001ee5c
    acf0:	00020137 	.word	0x00020137
    acf4:	0001f995 	.word	0x0001f995
    acf8:	000200ff 	.word	0x000200ff

0000acfc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    ad00:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    ad04:	b08f      	sub	sp, #60	; 0x3c
    ad06:	f3c1 2649 	ubfx	r6, r1, #9, #10
    ad0a:	460d      	mov	r5, r1
    ad0c:	4690      	mov	r8, r2
    ad0e:	4699      	mov	r9, r3
    ad10:	9005      	str	r0, [sp, #20]
    ad12:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    ad14:	2e00      	cmp	r6, #0
    ad16:	d03d      	beq.n	ad94 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    ad18:	f04f 0b04 	mov.w	fp, #4
    ad1c:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    ad20:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    ad22:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    ad24:	4631      	mov	r1, r6
    ad26:	ab0b      	add	r3, sp, #44	; 0x2c
    ad28:	4640      	mov	r0, r8
    ad2a:	f8cd b008 	str.w	fp, [sp, #8]
    ad2e:	9701      	str	r7, [sp, #4]
    ad30:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    ad34:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    ad38:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    ad3a:	9607      	str	r6, [sp, #28]
    ad3c:	f7fd fe64 	bl	8a08 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    ad40:	f3c0 0309 	ubfx	r3, r0, #0, #10
    ad44:	1918      	adds	r0, r3, r4
    ad46:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    ad4a:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    ad4c:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    ad4e:	f363 2552 	bfi	r5, r3, #9, #10
    ad52:	9306      	str	r3, [sp, #24]
    ad54:	f7ff fdde 	bl	a914 <z_log_msg_alloc>
		if (msg) {
    ad58:	4604      	mov	r4, r0
    ad5a:	b308      	cbz	r0, ada0 <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    ad5c:	2200      	movs	r2, #0
    ad5e:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    ad60:	3010      	adds	r0, #16
    ad62:	900b      	str	r0, [sp, #44]	; 0x2c
    ad64:	930c      	str	r3, [sp, #48]	; 0x30
    ad66:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    ad68:	4640      	mov	r0, r8
    ad6a:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    ad6e:	4a12      	ldr	r2, [pc, #72]	; (adb8 <z_impl_z_log_msg_static_create+0xbc>)
    ad70:	9907      	ldr	r1, [sp, #28]
    ad72:	f8cd a000 	str.w	sl, [sp]
    ad76:	ab0b      	add	r3, sp, #44	; 0x2c
    ad78:	f7fd fe46 	bl	8a08 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    ad7c:	2800      	cmp	r0, #0
    ad7e:	da0f      	bge.n	ada0 <z_impl_z_log_msg_static_create+0xa4>
    ad80:	490e      	ldr	r1, [pc, #56]	; (adbc <z_impl_z_log_msg_static_create+0xc0>)
    ad82:	480f      	ldr	r0, [pc, #60]	; (adc0 <z_impl_z_log_msg_static_create+0xc4>)
    ad84:	2349      	movs	r3, #73	; 0x49
    ad86:	4a0f      	ldr	r2, [pc, #60]	; (adc4 <z_impl_z_log_msg_static_create+0xc8>)
    ad88:	f010 fa50 	bl	1b22c <assert_print>
    ad8c:	2149      	movs	r1, #73	; 0x49
    ad8e:	480d      	ldr	r0, [pc, #52]	; (adc4 <z_impl_z_log_msg_static_create+0xc8>)
    ad90:	f010 fa45 	bl	1b21e <assert_post_action>
    ad94:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    ad98:	0880      	lsrs	r0, r0, #2
    ad9a:	f7ff fdbb 	bl	a914 <z_log_msg_alloc>
    ad9e:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    ada0:	f366 2552 	bfi	r5, r6, #9, #10
    ada4:	464b      	mov	r3, r9
    ada6:	462a      	mov	r2, r5
    ada8:	4620      	mov	r0, r4
    adaa:	9905      	ldr	r1, [sp, #20]
}
    adac:	b00f      	add	sp, #60	; 0x3c
    adae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    adb2:	f010 bb76 	b.w	1b4a2 <z_log_msg_finalize>
    adb6:	bf00      	nop
    adb8:	0001b477 	.word	0x0001b477
    adbc:	00020183 	.word	0x00020183
    adc0:	0001f995 	.word	0x0001f995
    adc4:	00020157 	.word	0x00020157

0000adc8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    adc8:	b40e      	push	{r1, r2, r3}
    adca:	b503      	push	{r0, r1, lr}
    adcc:	ab03      	add	r3, sp, #12
    adce:	f853 2b04 	ldr.w	r2, [r3], #4
    add2:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    add4:	4804      	ldr	r0, [pc, #16]	; (ade8 <print_formatted+0x20>)
	va_start(args, fmt);
    add6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    add8:	f010 fb8a 	bl	1b4f0 <cbvprintf>
	va_end(args);

	return length;
}
    addc:	b002      	add	sp, #8
    adde:	f85d eb04 	ldr.w	lr, [sp], #4
    ade2:	b003      	add	sp, #12
    ade4:	4770      	bx	lr
    ade6:	bf00      	nop
    ade8:	0000ae09 	.word	0x0000ae09

0000adec <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    adec:	06ca      	lsls	r2, r1, #27
    adee:	d405      	bmi.n	adfc <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    adf0:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    adf2:	bf4c      	ite	mi
    adf4:	4902      	ldrmi	r1, [pc, #8]	; (ae00 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    adf6:	4903      	ldrpl	r1, [pc, #12]	; (ae04 <newline_print+0x18>)
    adf8:	f7ff bfe6 	b.w	adc8 <print_formatted>
	}
}
    adfc:	4770      	bx	lr
    adfe:	bf00      	nop
    ae00:	0002200a 	.word	0x0002200a
    ae04:	00022f3b 	.word	0x00022f3b

0000ae08 <out_func>:
{
    ae08:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    ae0a:	684b      	ldr	r3, [r1, #4]
{
    ae0c:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    ae0e:	681a      	ldr	r2, [r3, #0]
    ae10:	68cb      	ldr	r3, [r1, #12]
{
    ae12:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    ae14:	429a      	cmp	r2, r3
    ae16:	d102      	bne.n	ae1e <out_func+0x16>
		log_output_flush(out_ctx);
    ae18:	4608      	mov	r0, r1
    ae1a:	f010 fb70 	bl	1b4fe <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ae1e:	6863      	ldr	r3, [r4, #4]
    ae20:	e8d3 2fef 	ldaex	r2, [r3]
    ae24:	1c51      	adds	r1, r2, #1
    ae26:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ae2a:	2800      	cmp	r0, #0
    ae2c:	d1f8      	bne.n	ae20 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    ae2e:	68a3      	ldr	r3, [r4, #8]
    ae30:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    ae32:	6863      	ldr	r3, [r4, #4]
    ae34:	681a      	ldr	r2, [r3, #0]
    ae36:	68e3      	ldr	r3, [r4, #12]
    ae38:	429a      	cmp	r2, r3
    ae3a:	d909      	bls.n	ae50 <out_func+0x48>
    ae3c:	4905      	ldr	r1, [pc, #20]	; (ae54 <out_func+0x4c>)
    ae3e:	4806      	ldr	r0, [pc, #24]	; (ae58 <out_func+0x50>)
    ae40:	2379      	movs	r3, #121	; 0x79
    ae42:	4a06      	ldr	r2, [pc, #24]	; (ae5c <out_func+0x54>)
    ae44:	f010 f9f2 	bl	1b22c <assert_print>
    ae48:	2179      	movs	r1, #121	; 0x79
    ae4a:	4804      	ldr	r0, [pc, #16]	; (ae5c <out_func+0x54>)
    ae4c:	f010 f9e7 	bl	1b21e <assert_post_action>
}
    ae50:	2000      	movs	r0, #0
    ae52:	bd38      	pop	{r3, r4, r5, pc}
    ae54:	000201bb 	.word	0x000201bb
    ae58:	0001f995 	.word	0x0001f995
    ae5c:	0002018c 	.word	0x0002018c

0000ae60 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae64:	b089      	sub	sp, #36	; 0x24
    ae66:	469b      	mov	fp, r3
    ae68:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    ae6c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ae70:	4604      	mov	r4, r0
    ae72:	9304      	str	r3, [sp, #16]
    ae74:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    ae78:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    ae7a:	9b04      	ldr	r3, [sp, #16]
{
    ae7c:	460d      	mov	r5, r1
    ae7e:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    ae80:	2b00      	cmp	r3, #0
    ae82:	f000 8087 	beq.w	af94 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ae86:	f006 0308 	and.w	r3, r6, #8
    ae8a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    ae8c:	f010 faf1 	bl	1b472 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    ae90:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    ae94:	4602      	mov	r2, r0
    ae96:	2800      	cmp	r0, #0
    ae98:	d04b      	beq.n	af32 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    ae9a:	4620      	mov	r0, r4
    ae9c:	498d      	ldr	r1, [pc, #564]	; (b0d4 <log_output_process+0x274>)
    ae9e:	f7ff ff93 	bl	adc8 <print_formatted>
    aea2:	4680      	mov	r8, r0
	if (stamp) {
    aea4:	f1ba 0f00 	cmp.w	sl, #0
    aea8:	d008      	beq.n	aebc <log_output_process+0x5c>
	if (!format) {
    aeaa:	f016 0f44 	tst.w	r6, #68	; 0x44
    aeae:	d142      	bne.n	af36 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    aeb0:	462a      	mov	r2, r5
    aeb2:	4620      	mov	r0, r4
    aeb4:	4988      	ldr	r1, [pc, #544]	; (b0d8 <log_output_process+0x278>)
    aeb6:	f7ff ff87 	bl	adc8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    aeba:	4480      	add	r8, r0
	if (color) {
    aebc:	f006 0301 	and.w	r3, r6, #1
    aec0:	b15b      	cbz	r3, aeda <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    aec2:	4b86      	ldr	r3, [pc, #536]	; (b0dc <log_output_process+0x27c>)
    aec4:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    aec6:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    aec8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    aecc:	4b84      	ldr	r3, [pc, #528]	; (b0e0 <log_output_process+0x280>)
    aece:	4985      	ldr	r1, [pc, #532]	; (b0e4 <log_output_process+0x284>)
    aed0:	2a00      	cmp	r2, #0
    aed2:	bf08      	it	eq
    aed4:	461a      	moveq	r2, r3
    aed6:	f7ff ff77 	bl	adc8 <print_formatted>
	if (level_on) {
    aeda:	f006 0308 	and.w	r3, r6, #8
    aede:	2b00      	cmp	r3, #0
    aee0:	d055      	beq.n	af8e <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    aee2:	4b81      	ldr	r3, [pc, #516]	; (b0e8 <log_output_process+0x288>)
    aee4:	9a04      	ldr	r2, [sp, #16]
    aee6:	4620      	mov	r0, r4
    aee8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    aeec:	497f      	ldr	r1, [pc, #508]	; (b0ec <log_output_process+0x28c>)
    aeee:	f7ff ff6b 	bl	adc8 <print_formatted>
    aef2:	4605      	mov	r5, r0
	if (domain) {
    aef4:	9b06      	ldr	r3, [sp, #24]
    aef6:	b12b      	cbz	r3, af04 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    aef8:	461a      	mov	r2, r3
    aefa:	4620      	mov	r0, r4
    aefc:	497c      	ldr	r1, [pc, #496]	; (b0f0 <log_output_process+0x290>)
    aefe:	f7ff ff63 	bl	adc8 <print_formatted>
    af02:	4405      	add	r5, r0
	if (source) {
    af04:	f1bb 0f00 	cmp.w	fp, #0
    af08:	d005      	beq.n	af16 <log_output_process+0xb6>
		total += print_formatted(output,
    af0a:	465a      	mov	r2, fp
    af0c:	4620      	mov	r0, r4
    af0e:	4979      	ldr	r1, [pc, #484]	; (b0f4 <log_output_process+0x294>)
    af10:	f7ff ff5a 	bl	adc8 <print_formatted>
    af14:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    af16:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    af18:	f1b9 0f00 	cmp.w	r9, #0
    af1c:	d14a      	bne.n	afb4 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    af1e:	2f00      	cmp	r7, #0
    af20:	d161      	bne.n	afe6 <log_output_process+0x186>
	if (color) {
    af22:	07f3      	lsls	r3, r6, #31
    af24:	f100 80cf 	bmi.w	b0c6 <log_output_process+0x266>
	newline_print(output, flags);
    af28:	4631      	mov	r1, r6
    af2a:	4620      	mov	r0, r4
    af2c:	f7ff ff5e 	bl	adec <newline_print>
}
    af30:	e0c3      	b.n	b0ba <log_output_process+0x25a>
	uint32_t length = 0U;
    af32:	4680      	mov	r8, r0
    af34:	e7b6      	b.n	aea4 <log_output_process+0x44>
	} else if (freq != 0U) {
    af36:	4b70      	ldr	r3, [pc, #448]	; (b0f8 <log_output_process+0x298>)
    af38:	6818      	ldr	r0, [r3, #0]
    af3a:	2800      	cmp	r0, #0
    af3c:	d0bd      	beq.n	aeba <log_output_process+0x5a>
		timestamp /= timestamp_div;
    af3e:	4b6f      	ldr	r3, [pc, #444]	; (b0fc <log_output_process+0x29c>)
		ms = (remainder * 1000U) / freq;
    af40:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    af44:	681b      	ldr	r3, [r3, #0]
    af46:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    af4a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    af4e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    af52:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    af56:	fb0e f505 	mul.w	r5, lr, r5
    af5a:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    af5e:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    af62:	213c      	movs	r1, #60	; 0x3c
    af64:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    af68:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    af6c:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    af70:	fb0e f505 	mul.w	r5, lr, r5
    af74:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    af78:	fb01 2213 	mls	r2, r1, r3, r2
    af7c:	4620      	mov	r0, r4
    af7e:	9200      	str	r2, [sp, #0]
    af80:	e9cd c501 	strd	ip, r5, [sp, #4]
    af84:	4652      	mov	r2, sl
    af86:	495e      	ldr	r1, [pc, #376]	; (b100 <log_output_process+0x2a0>)
    af88:	f7ff ff1e 	bl	adc8 <print_formatted>
    af8c:	e795      	b.n	aeba <log_output_process+0x5a>
	int total = 0;
    af8e:	f006 0508 	and.w	r5, r6, #8
    af92:	e7af      	b.n	aef4 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    af94:	f1bb 0f01 	cmp.w	fp, #1
    af98:	d107      	bne.n	afaa <log_output_process+0x14a>
	if (package) {
    af9a:	f1b9 0f00 	cmp.w	r9, #0
    af9e:	d11d      	bne.n	afdc <log_output_process+0x17c>
	if (data_len) {
    afa0:	2f00      	cmp	r7, #0
    afa2:	f000 808a 	beq.w	b0ba <log_output_process+0x25a>
		prefix_offset = 0;
    afa6:	2500      	movs	r5, #0
    afa8:	e01d      	b.n	afe6 <log_output_process+0x186>
	if (package) {
    afaa:	f1b9 0f00 	cmp.w	r9, #0
    afae:	d0f7      	beq.n	afa0 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    afb0:	4854      	ldr	r0, [pc, #336]	; (b104 <log_output_process+0x2a4>)
    afb2:	e014      	b.n	afde <log_output_process+0x17e>
		cb = out_func;
    afb4:	4854      	ldr	r0, [pc, #336]	; (b108 <log_output_process+0x2a8>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    afb6:	464b      	mov	r3, r9
    afb8:	4622      	mov	r2, r4
    afba:	4954      	ldr	r1, [pc, #336]	; (b10c <log_output_process+0x2ac>)
    afbc:	f00f fec3 	bl	1ad46 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    afc0:	2800      	cmp	r0, #0
    afc2:	da0e      	bge.n	afe2 <log_output_process+0x182>
    afc4:	4952      	ldr	r1, [pc, #328]	; (b110 <log_output_process+0x2b0>)
    afc6:	4853      	ldr	r0, [pc, #332]	; (b114 <log_output_process+0x2b4>)
    afc8:	f44f 7300 	mov.w	r3, #512	; 0x200
    afcc:	4a52      	ldr	r2, [pc, #328]	; (b118 <log_output_process+0x2b8>)
    afce:	f010 f92d 	bl	1b22c <assert_print>
    afd2:	f44f 7100 	mov.w	r1, #512	; 0x200
    afd6:	4850      	ldr	r0, [pc, #320]	; (b118 <log_output_process+0x2b8>)
    afd8:	f010 f921 	bl	1b21e <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    afdc:	484a      	ldr	r0, [pc, #296]	; (b108 <log_output_process+0x2a8>)
		prefix_offset = 0;
    afde:	9d04      	ldr	r5, [sp, #16]
    afe0:	e7e9      	b.n	afb6 <log_output_process+0x156>
	if (data_len) {
    afe2:	2f00      	cmp	r7, #0
    afe4:	d065      	beq.n	b0b2 <log_output_process+0x252>
		print_formatted(output, " ");
    afe6:	f8df 9134 	ldr.w	r9, [pc, #308]	; b11c <log_output_process+0x2bc>
			print_formatted(output, "%02x ", data[i]);
    afea:	f8df a134 	ldr.w	sl, [pc, #308]	; b120 <log_output_process+0x2c0>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    afee:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    aff0:	4631      	mov	r1, r6
    aff2:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    aff4:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    aff6:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    affa:	bf28      	it	cs
    affc:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    b000:	f7ff fef4 	bl	adec <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    b004:	455d      	cmp	r5, fp
    b006:	dc42      	bgt.n	b08e <log_output_process+0x22e>
			print_formatted(output, "%02x ", data[i]);
    b008:	9b05      	ldr	r3, [sp, #20]
    b00a:	4651      	mov	r1, sl
    b00c:	4620      	mov	r0, r4
    b00e:	781a      	ldrb	r2, [r3, #0]
    b010:	f7ff feda 	bl	adc8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b014:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    b018:	f01b 0f07 	tst.w	fp, #7
    b01c:	d103      	bne.n	b026 <log_output_process+0x1c6>
			print_formatted(output, " ");
    b01e:	4649      	mov	r1, r9
    b020:	4620      	mov	r0, r4
    b022:	f7ff fed1 	bl	adc8 <print_formatted>
		if (i < length) {
    b026:	45d8      	cmp	r8, fp
    b028:	d938      	bls.n	b09c <log_output_process+0x23c>
			print_formatted(output, "%02x ", data[i]);
    b02a:	9b05      	ldr	r3, [sp, #20]
    b02c:	4651      	mov	r1, sl
    b02e:	4620      	mov	r0, r4
    b030:	f813 200b 	ldrb.w	r2, [r3, fp]
    b034:	f7ff fec8 	bl	adc8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b038:	f10b 0b01 	add.w	fp, fp, #1
    b03c:	f1bb 0f10 	cmp.w	fp, #16
    b040:	d1ea      	bne.n	b018 <log_output_process+0x1b8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b042:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    b046:	4620      	mov	r0, r4
    b048:	4936      	ldr	r1, [pc, #216]	; (b124 <log_output_process+0x2c4>)
    b04a:	f7ff febd 	bl	adc8 <print_formatted>
		if (i < length) {
    b04e:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    b050:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    b052:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    b054:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    b056:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    b05a:	295f      	cmp	r1, #95	; 0x5f
    b05c:	bf28      	it	cs
    b05e:	222e      	movcs	r2, #46	; 0x2e
    b060:	4931      	ldr	r1, [pc, #196]	; (b128 <log_output_process+0x2c8>)
    b062:	f7ff feb1 	bl	adc8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    b066:	f10b 0b01 	add.w	fp, fp, #1
    b06a:	f1bb 0f10 	cmp.w	fp, #16
    b06e:	d01a      	beq.n	b0a6 <log_output_process+0x246>
		if (i > 0 && !(i % 8)) {
    b070:	f01b 0f07 	tst.w	fp, #7
    b074:	d103      	bne.n	b07e <log_output_process+0x21e>
			print_formatted(output, " ");
    b076:	4649      	mov	r1, r9
    b078:	4620      	mov	r0, r4
    b07a:	f7ff fea5 	bl	adc8 <print_formatted>
		if (i < length) {
    b07e:	45d8      	cmp	r8, fp
    b080:	465a      	mov	r2, fp
    b082:	d8e5      	bhi.n	b050 <log_output_process+0x1f0>
			print_formatted(output, " ");
    b084:	4649      	mov	r1, r9
    b086:	4620      	mov	r0, r4
    b088:	f7ff fe9e 	bl	adc8 <print_formatted>
    b08c:	e7eb      	b.n	b066 <log_output_process+0x206>
		print_formatted(output, " ");
    b08e:	4649      	mov	r1, r9
    b090:	4620      	mov	r0, r4
    b092:	f7ff fe99 	bl	adc8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    b096:	f10b 0b01 	add.w	fp, fp, #1
    b09a:	e7b3      	b.n	b004 <log_output_process+0x1a4>
			print_formatted(output, "   ");
    b09c:	4620      	mov	r0, r4
    b09e:	4923      	ldr	r1, [pc, #140]	; (b12c <log_output_process+0x2cc>)
    b0a0:	f7ff fe92 	bl	adc8 <print_formatted>
    b0a4:	e7c8      	b.n	b038 <log_output_process+0x1d8>
		data += length;
    b0a6:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    b0a8:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    b0ac:	4443      	add	r3, r8
    b0ae:	9305      	str	r3, [sp, #20]
	} while (len);
    b0b0:	d19d      	bne.n	afee <log_output_process+0x18e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    b0b2:	9b04      	ldr	r3, [sp, #16]
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	f47f af34 	bne.w	af22 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    b0ba:	4620      	mov	r0, r4
}
    b0bc:	b009      	add	sp, #36	; 0x24
    b0be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    b0c2:	f010 ba1c 	b.w	1b4fe <log_output_flush>
		print_formatted(output, "%s", log_color);
    b0c6:	4620      	mov	r0, r4
    b0c8:	4a05      	ldr	r2, [pc, #20]	; (b0e0 <log_output_process+0x280>)
    b0ca:	4906      	ldr	r1, [pc, #24]	; (b0e4 <log_output_process+0x284>)
    b0cc:	f7ff fe7c 	bl	adc8 <print_formatted>
}
    b0d0:	e72a      	b.n	af28 <log_output_process+0xc8>
    b0d2:	bf00      	nop
    b0d4:	000201f0 	.word	0x000201f0
    b0d8:	000201f4 	.word	0x000201f4
    b0dc:	0001ef90 	.word	0x0001ef90
    b0e0:	000201eb 	.word	0x000201eb
    b0e4:	0001f826 	.word	0x0001f826
    b0e8:	0001efa4 	.word	0x0001efa4
    b0ec:	00020219 	.word	0x00020219
    b0f0:	0002021f 	.word	0x0002021f
    b0f4:	00020223 	.word	0x00020223
    b0f8:	2000960c 	.word	0x2000960c
    b0fc:	20009608 	.word	0x20009608
    b100:	000201fd 	.word	0x000201fd
    b104:	0001b519 	.word	0x0001b519
    b108:	0000ae09 	.word	0x0000ae09
    b10c:	0001b4f1 	.word	0x0001b4f1
    b110:	00020228 	.word	0x00020228
    b114:	0001f995 	.word	0x0001f995
    b118:	0002018c 	.word	0x0002018c
    b11c:	00022f07 	.word	0x00022f07
    b120:	00020231 	.word	0x00020231
    b124:	00020237 	.word	0x00020237
    b128:	00020239 	.word	0x00020239
    b12c:	00022f05 	.word	0x00022f05

0000b130 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    b134:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    b136:	684b      	ldr	r3, [r1, #4]
    b138:	4605      	mov	r5, r0
    b13a:	460c      	mov	r4, r1
    b13c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    b13e:	688e      	ldr	r6, [r1, #8]
    b140:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    b142:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    b146:	b15b      	cbz	r3, b160 <log_output_msg_process+0x30>
    b148:	4a13      	ldr	r2, [pc, #76]	; (b198 <log_output_msg_process+0x68>)
    b14a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    b14c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b150:	2900      	cmp	r1, #0
    b152:	db1f      	blt.n	b194 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    b154:	7820      	ldrb	r0, [r4, #0]
    b156:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    b15a:	f7ff fd9b 	bl	ac94 <log_source_name_get>
    b15e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    b160:	4621      	mov	r1, r4
    b162:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    b166:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    b168:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    b16c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    b16e:	eb01 0402 	add.w	r4, r1, r2
    b172:	bf08      	it	eq
    b174:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    b176:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    b17a:	e9cd 0803 	strd	r0, r8, [sp, #12]
    b17e:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b182:	2200      	movs	r2, #0
    b184:	4631      	mov	r1, r6
    b186:	4628      	mov	r0, r5
    b188:	9700      	str	r7, [sp, #0]
    b18a:	f7ff fe69 	bl	ae60 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    b18e:	b006      	add	sp, #24
    b190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b194:	2300      	movs	r3, #0
    b196:	e7e3      	b.n	b160 <log_output_msg_process+0x30>
    b198:	0001ed64 	.word	0x0001ed64

0000b19c <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b19c:	f242 730f 	movw	r3, #9999	; 0x270f
{
    b1a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b1a2:	428b      	cmp	r3, r1
    b1a4:	bf28      	it	cs
    b1a6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    b1a8:	6805      	ldr	r5, [r0, #0]
{
    b1aa:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b1ac:	2105      	movs	r1, #5
    b1ae:	4668      	mov	r0, sp
    b1b0:	4a0d      	ldr	r2, [pc, #52]	; (b1e8 <log_output_dropped_process+0x4c>)
    b1b2:	f00f fe40 	bl	1ae36 <snprintk>
    b1b6:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    b1b8:	6863      	ldr	r3, [r4, #4]
    b1ba:	4628      	mov	r0, r5
    b1bc:	220b      	movs	r2, #11
    b1be:	685b      	ldr	r3, [r3, #4]
    b1c0:	490a      	ldr	r1, [pc, #40]	; (b1ec <log_output_dropped_process+0x50>)
    b1c2:	f010 f988 	bl	1b4d6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    b1c6:	6863      	ldr	r3, [r4, #4]
    b1c8:	4632      	mov	r2, r6
    b1ca:	4669      	mov	r1, sp
    b1cc:	4628      	mov	r0, r5
    b1ce:	685b      	ldr	r3, [r3, #4]
    b1d0:	f010 f981 	bl	1b4d6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    b1d4:	6863      	ldr	r3, [r4, #4]
    b1d6:	221b      	movs	r2, #27
    b1d8:	4628      	mov	r0, r5
    b1da:	685b      	ldr	r3, [r3, #4]
    b1dc:	4904      	ldr	r1, [pc, #16]	; (b1f0 <log_output_dropped_process+0x54>)
    b1de:	f010 f97a 	bl	1b4d6 <buffer_write>
		     output->control_block->ctx);
}
    b1e2:	b002      	add	sp, #8
    b1e4:	bd70      	pop	{r4, r5, r6, pc}
    b1e6:	bf00      	nop
    b1e8:	00020e59 	.word	0x00020e59
    b1ec:	00020258 	.word	0x00020258
    b1f0:	0002023c 	.word	0x0002023c

0000b1f4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    b1f4:	2100      	movs	r1, #0
    b1f6:	2301      	movs	r3, #1
    b1f8:	4a06      	ldr	r2, [pc, #24]	; (b214 <log_output_timestamp_freq_set+0x20>)
    b1fa:	4290      	cmp	r0, r2
    b1fc:	d806      	bhi.n	b20c <log_output_timestamp_freq_set+0x18>
    b1fe:	4a06      	ldr	r2, [pc, #24]	; (b218 <log_output_timestamp_freq_set+0x24>)
    b200:	b901      	cbnz	r1, b204 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    b202:	2301      	movs	r3, #1
    b204:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    b206:	4b05      	ldr	r3, [pc, #20]	; (b21c <log_output_timestamp_freq_set+0x28>)
    b208:	6018      	str	r0, [r3, #0]
}
    b20a:	4770      	bx	lr
		timestamp_div *= 2U;
    b20c:	2101      	movs	r1, #1
		frequency /= 2U;
    b20e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    b210:	005b      	lsls	r3, r3, #1
    b212:	e7f2      	b.n	b1fa <log_output_timestamp_freq_set+0x6>
    b214:	000f4240 	.word	0x000f4240
    b218:	20009608 	.word	0x20009608
    b21c:	2000960c 	.word	0x2000960c

0000b220 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    b220:	4b01      	ldr	r3, [pc, #4]	; (b228 <format_set+0x8>)
	return 0;
}
    b222:	2000      	movs	r0, #0
	log_format_current = log_type;
    b224:	6019      	str	r1, [r3, #0]
}
    b226:	4770      	bx	lr
    b228:	20009624 	.word	0x20009624

0000b22c <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    b22c:	2201      	movs	r2, #1
    b22e:	4b02      	ldr	r3, [pc, #8]	; (b238 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    b230:	4802      	ldr	r0, [pc, #8]	; (b23c <panic+0x10>)
    b232:	701a      	strb	r2, [r3, #0]
    b234:	f010 b963 	b.w	1b4fe <log_output_flush>
    b238:	20009b0b 	.word	0x20009b0b
    b23c:	0001efd4 	.word	0x0001efd4

0000b240 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    b240:	4801      	ldr	r0, [pc, #4]	; (b248 <dropped+0x8>)
    b242:	f7ff bfab 	b.w	b19c <log_output_dropped_process>
    b246:	bf00      	nop
    b248:	0001efd4 	.word	0x0001efd4

0000b24c <process>:
{
    b24c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b24e:	4b06      	ldr	r3, [pc, #24]	; (b268 <process+0x1c>)
{
    b250:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b252:	6818      	ldr	r0, [r3, #0]
    b254:	f7ff fac4 	bl	a7e0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    b258:	4621      	mov	r1, r4
}
    b25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b25e:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    b260:	220f      	movs	r2, #15
    b262:	4802      	ldr	r0, [pc, #8]	; (b26c <process+0x20>)
    b264:	4718      	bx	r3
    b266:	bf00      	nop
    b268:	20009624 	.word	0x20009624
    b26c:	0001efd4 	.word	0x0001efd4

0000b270 <char_out>:
{
    b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b272:	460d      	mov	r5, r1
    b274:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    b276:	4f06      	ldr	r7, [pc, #24]	; (b290 <char_out+0x20>)
    b278:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    b27a:	42b4      	cmp	r4, r6
    b27c:	d101      	bne.n	b282 <char_out+0x12>
}
    b27e:	4628      	mov	r0, r5
    b280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    b282:	f814 1b01 	ldrb.w	r1, [r4], #1
    b286:	68bb      	ldr	r3, [r7, #8]
    b288:	4801      	ldr	r0, [pc, #4]	; (b290 <char_out+0x20>)
    b28a:	685b      	ldr	r3, [r3, #4]
    b28c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    b28e:	e7f4      	b.n	b27a <char_out+0xa>
    b290:	0001ea64 	.word	0x0001ea64

0000b294 <log_backend_uart_init>:
{
    b294:	b508      	push	{r3, lr}
    b296:	4807      	ldr	r0, [pc, #28]	; (b2b4 <log_backend_uart_init+0x20>)
    b298:	f013 f925 	bl	1e4e6 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    b29c:	b948      	cbnz	r0, b2b2 <log_backend_uart_init+0x1e>
    b29e:	4906      	ldr	r1, [pc, #24]	; (b2b8 <log_backend_uart_init+0x24>)
    b2a0:	4806      	ldr	r0, [pc, #24]	; (b2bc <log_backend_uart_init+0x28>)
    b2a2:	236f      	movs	r3, #111	; 0x6f
    b2a4:	4a06      	ldr	r2, [pc, #24]	; (b2c0 <log_backend_uart_init+0x2c>)
    b2a6:	f00f ffc1 	bl	1b22c <assert_print>
    b2aa:	216f      	movs	r1, #111	; 0x6f
    b2ac:	4804      	ldr	r0, [pc, #16]	; (b2c0 <log_backend_uart_init+0x2c>)
    b2ae:	f00f ffb6 	bl	1b21e <assert_post_action>
}
    b2b2:	bd08      	pop	{r3, pc}
    b2b4:	0001ea64 	.word	0x0001ea64
    b2b8:	000202c2 	.word	0x000202c2
    b2bc:	0001f995 	.word	0x0001f995
    b2c0:	00020284 	.word	0x00020284

0000b2c4 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    b2c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    b2c6:	b970      	cbnz	r0, b2e6 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    b2c8:	4b12      	ldr	r3, [pc, #72]	; (b314 <ipc_service_open_instance+0x50>)
    b2ca:	4813      	ldr	r0, [pc, #76]	; (b318 <ipc_service_open_instance+0x54>)
    b2cc:	9305      	str	r3, [sp, #20]
    b2ce:	2302      	movs	r3, #2
    b2d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b2d4:	aa04      	add	r2, sp, #16
    b2d6:	9304      	str	r3, [sp, #16]
    b2d8:	f010 f92c 	bl	1b534 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    b2dc:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    b2e0:	b007      	add	sp, #28
    b2e2:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    b2e6:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    b2e8:	b963      	cbnz	r3, b304 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    b2ea:	4b0c      	ldr	r3, [pc, #48]	; (b31c <ipc_service_open_instance+0x58>)
    b2ec:	480a      	ldr	r0, [pc, #40]	; (b318 <ipc_service_open_instance+0x54>)
    b2ee:	9305      	str	r3, [sp, #20]
    b2f0:	2302      	movs	r3, #2
    b2f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b2f6:	aa04      	add	r2, sp, #16
    b2f8:	9304      	str	r3, [sp, #16]
    b2fa:	f010 f91b 	bl	1b534 <z_log_msg_static_create.constprop.0>
		return -EIO;
    b2fe:	f06f 0004 	mvn.w	r0, #4
    b302:	e7ed      	b.n	b2e0 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    b304:	681b      	ldr	r3, [r3, #0]
    b306:	b11b      	cbz	r3, b310 <ipc_service_open_instance+0x4c>
}
    b308:	b007      	add	sp, #28
    b30a:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    b30e:	4718      	bx	r3
		return 0;
    b310:	4618      	mov	r0, r3
    b312:	e7e5      	b.n	b2e0 <ipc_service_open_instance+0x1c>
    b314:	000202f6 	.word	0x000202f6
    b318:	0001ede4 	.word	0x0001ede4
    b31c:	00020307 	.word	0x00020307

0000b320 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    b320:	b530      	push	{r4, r5, lr}
    b322:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    b324:	b108      	cbz	r0, b32a <ipc_service_register_endpoint+0xa>
    b326:	b101      	cbz	r1, b32a <ipc_service_register_endpoint+0xa>
    b328:	b96a      	cbnz	r2, b346 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    b32a:	4b13      	ldr	r3, [pc, #76]	; (b378 <ipc_service_register_endpoint+0x58>)
    b32c:	4813      	ldr	r0, [pc, #76]	; (b37c <ipc_service_register_endpoint+0x5c>)
    b32e:	9305      	str	r3, [sp, #20]
    b330:	2302      	movs	r3, #2
    b332:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b336:	aa04      	add	r2, sp, #16
    b338:	9304      	str	r3, [sp, #16]
    b33a:	f010 f8fb 	bl	1b534 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    b33e:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    b342:	b007      	add	sp, #28
    b344:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    b346:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    b348:	b10c      	cbz	r4, b34e <ipc_service_register_endpoint+0x2e>
    b34a:	68e5      	ldr	r5, [r4, #12]
    b34c:	b965      	cbnz	r5, b368 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    b34e:	4b0c      	ldr	r3, [pc, #48]	; (b380 <ipc_service_register_endpoint+0x60>)
    b350:	480a      	ldr	r0, [pc, #40]	; (b37c <ipc_service_register_endpoint+0x5c>)
    b352:	9305      	str	r3, [sp, #20]
    b354:	2302      	movs	r3, #2
    b356:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b35a:	aa04      	add	r2, sp, #16
    b35c:	9304      	str	r3, [sp, #16]
    b35e:	f010 f8e9 	bl	1b534 <z_log_msg_static_create.constprop.0>
		return -EIO;
    b362:	f06f 0004 	mvn.w	r0, #4
    b366:	e7ec      	b.n	b342 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    b368:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    b36c:	68e3      	ldr	r3, [r4, #12]
}
    b36e:	b007      	add	sp, #28
    b370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    b374:	4718      	bx	r3
    b376:	bf00      	nop
    b378:	00020325 	.word	0x00020325
    b37c:	0001ede4 	.word	0x0001ede4
    b380:	00020307 	.word	0x00020307

0000b384 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    b384:	b530      	push	{r4, r5, lr}
    b386:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    b388:	4604      	mov	r4, r0
{
    b38a:	b087      	sub	sp, #28
	if (!ept) {
    b38c:	b968      	cbnz	r0, b3aa <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    b38e:	4b1a      	ldr	r3, [pc, #104]	; (b3f8 <ipc_service_send+0x74>)
    b390:	481a      	ldr	r0, [pc, #104]	; (b3fc <ipc_service_send+0x78>)
    b392:	9305      	str	r3, [sp, #20]
    b394:	2302      	movs	r3, #2
    b396:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b39a:	aa04      	add	r2, sp, #16
    b39c:	9304      	str	r3, [sp, #16]
    b39e:	f010 f8c9 	bl	1b534 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    b3a2:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    b3a6:	b007      	add	sp, #28
    b3a8:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    b3aa:	6800      	ldr	r0, [r0, #0]
    b3ac:	b960      	cbnz	r0, b3c8 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    b3ae:	4b14      	ldr	r3, [pc, #80]	; (b400 <ipc_service_send+0x7c>)
    b3b0:	4812      	ldr	r0, [pc, #72]	; (b3fc <ipc_service_send+0x78>)
    b3b2:	9305      	str	r3, [sp, #20]
    b3b4:	2302      	movs	r3, #2
    b3b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b3ba:	aa04      	add	r2, sp, #16
    b3bc:	9304      	str	r3, [sp, #16]
    b3be:	f010 f8b9 	bl	1b534 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    b3c2:	f06f 0001 	mvn.w	r0, #1
    b3c6:	e7ee      	b.n	b3a6 <ipc_service_send+0x22>
	backend = ept->instance->api;
    b3c8:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    b3ca:	b10a      	cbz	r2, b3d0 <ipc_service_send+0x4c>
    b3cc:	6895      	ldr	r5, [r2, #8]
    b3ce:	b965      	cbnz	r5, b3ea <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    b3d0:	4b0c      	ldr	r3, [pc, #48]	; (b404 <ipc_service_send+0x80>)
    b3d2:	480a      	ldr	r0, [pc, #40]	; (b3fc <ipc_service_send+0x78>)
    b3d4:	9305      	str	r3, [sp, #20]
    b3d6:	2302      	movs	r3, #2
    b3d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b3dc:	aa04      	add	r2, sp, #16
    b3de:	9304      	str	r3, [sp, #16]
    b3e0:	f010 f8a8 	bl	1b534 <z_log_msg_static_create.constprop.0>
		return -EIO;
    b3e4:	f06f 0004 	mvn.w	r0, #4
    b3e8:	e7dd      	b.n	b3a6 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    b3ea:	460a      	mov	r2, r1
    b3ec:	46ac      	mov	ip, r5
    b3ee:	6861      	ldr	r1, [r4, #4]
}
    b3f0:	b007      	add	sp, #28
    b3f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    b3f6:	4760      	bx	ip
    b3f8:	00020351 	.word	0x00020351
    b3fc:	0001ede4 	.word	0x0001ede4
    b400:	00020362 	.word	0x00020362
    b404:	00020307 	.word	0x00020307

0000b408 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    b408:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    b40a:	2204      	movs	r2, #4
    b40c:	2100      	movs	r1, #0
    b40e:	4802      	ldr	r0, [pc, #8]	; (b418 <shared_memory_prepare+0x10>)
    b410:	f010 ff26 	bl	1c260 <memset>
		}
	}

	return 0;
}
    b414:	2000      	movs	r0, #0
    b416:	bd08      	pop	{r3, pc}
    b418:	20070000 	.word	0x20070000

0000b41c <bound_cb>:
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b41c:	2300      	movs	r3, #0
    b41e:	2201      	movs	r2, #1
{
    b420:	b513      	push	{r0, r1, r4, lr}
    b422:	4604      	mov	r4, r0
    b424:	e9cd 3200 	strd	r3, r2, [sp]
    b428:	4b07      	ldr	r3, [pc, #28]	; (b448 <bound_cb+0x2c>)
    b42a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    b42e:	f00b f95d 	bl	166ec <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    b432:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    b434:	681b      	ldr	r3, [r3, #0]
    b436:	b123      	cbz	r3, b442 <bound_cb+0x26>
		ept->cb->bound(ept->priv);
    b438:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    b43a:	b002      	add	sp, #8
    b43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    b440:	4718      	bx	r3
}
    b442:	b002      	add	sp, #8
    b444:	bd10      	pop	{r4, pc}
    b446:	bf00      	nop
    b448:	0002200b 	.word	0x0002200b

0000b44c <advertise_ept>:
{
    b44c:	b530      	push	{r4, r5, lr}
    b44e:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b450:	490e      	ldr	r1, [pc, #56]	; (b48c <advertise_ept+0x40>)
{
    b452:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b454:	9102      	str	r1, [sp, #8]
    b456:	f8d0 1198 	ldr.w	r1, [r0, #408]	; 0x198
{
    b45a:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b45c:	e9cd 3100 	strd	r3, r1, [sp]
    b460:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    b464:	f04f 33ff 	mov.w	r3, #4294967295
    b468:	4620      	mov	r0, r4
    b46a:	f00b f985 	bl	16778 <rpmsg_create_ept>
	if (err != 0) {
    b46e:	b950      	cbnz	r0, b486 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    b470:	2301      	movs	r3, #1
    b472:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    b476:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
    b47a:	b123      	cbz	r3, b486 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    b47c:	4620      	mov	r0, r4
}
    b47e:	b005      	add	sp, #20
    b480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    b484:	4718      	bx	r3
}
    b486:	b005      	add	sp, #20
    b488:	bd30      	pop	{r4, r5, pc}
    b48a:	bf00      	nop
    b48c:	0001b62b 	.word	0x0001b62b

0000b490 <get_ept>:
{
    b490:	b538      	push	{r3, r4, r5, lr}
    b492:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    b494:	4611      	mov	r1, r2
{
    b496:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    b498:	f010 f8c9 	bl	1b62e <get_ept_slot_with_name>
	if (ept != NULL) {
    b49c:	4603      	mov	r3, r0
    b49e:	b938      	cbnz	r0, b4b0 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    b4a0:	4628      	mov	r0, r5
    b4a2:	4904      	ldr	r1, [pc, #16]	; (b4b4 <get_ept+0x24>)
    b4a4:	f010 f8c3 	bl	1b62e <get_ept_slot_with_name>
    b4a8:	4603      	mov	r3, r0
	if (ept != NULL) {
    b4aa:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    b4ac:	6023      	str	r3, [r4, #0]
}
    b4ae:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    b4b0:	2001      	movs	r0, #1
    b4b2:	e7fb      	b.n	b4ac <get_ept+0x1c>
    b4b4:	0002200b 	.word	0x0002200b

0000b4b8 <open>:
{
    b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b4bc:	2301      	movs	r3, #1
    b4be:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    b4c0:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    b4c2:	6846      	ldr	r6, [r0, #4]
{
    b4c4:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    b4c6:	f505 7755 	add.w	r7, r5, #852	; 0x354
    b4ca:	e8d7 2fef 	ldaex	r2, [r7]
    b4ce:	2a00      	cmp	r2, #0
    b4d0:	d103      	bne.n	b4da <open+0x22>
    b4d2:	e8c7 3fe1 	stlex	r1, r3, [r7]
    b4d6:	2900      	cmp	r1, #0
    b4d8:	d1f7      	bne.n	b4ca <open+0x12>
    b4da:	f040 80b8 	bne.w	b64e <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    b4de:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    b4e0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    b4e2:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    b4e4:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    b4e6:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    b4ea:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    b4ee:	bf26      	itte	cs
    b4f0:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    b4f4:	fab3 f383 	clzcs	r3, r3
		return 0;
    b4f8:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    b4fa:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    b4fe:	bf28      	it	cs
    b500:	f1c3 0320 	rsbcs	r3, r3, #32
    b504:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    b506:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    b508:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
	if (num_desc == 0) {
    b50c:	f000 8099 	beq.w	b642 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    b510:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    b512:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    b514:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    b516:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    b518:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    b51c:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    b51e:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    b520:	3209      	adds	r2, #9
    b522:	f8c5 0248 	str.w	r0, [r5, #584]	; 0x248
	size += sizeof(struct vring_used) +
    b526:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    b528:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    b52c:	440a      	add	r2, r1
	return (buf_size * num);
    b52e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    b530:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    b534:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    b536:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    b53a:	f8c5 124c 	str.w	r1, [r5, #588]	; 0x24c
	return (buf_size * num);
    b53e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    b540:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    b542:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    b546:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    b54a:	3303      	adds	r3, #3
    b54c:	4413      	add	r3, r2
    b54e:	f023 0303 	bic.w	r3, r3, #3
    b552:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
	vr->status_reg_addr = conf->shm_addr;
    b556:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    b558:	f8c5 4244 	str.w	r4, [r5, #580]	; 0x244
	vr->status_reg_addr = conf->shm_addr;
    b55c:	f8c5 3238 	str.w	r3, [r5, #568]	; 0x238
	data->vr.notify_cb = virtio_notify_cb;
    b560:	4b3c      	ldr	r3, [pc, #240]	; (b654 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    b562:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    b564:	e9c5 63a3 	strd	r6, r3, [r5, #652]	; 0x28c
	err = ipc_static_vrings_init(&data->vr, conf->role);
    b568:	6831      	ldr	r1, [r6, #0]
    b56a:	f000 fa03 	bl	b974 <ipc_static_vrings_init>
	if (err != 0) {
    b56e:	4604      	mov	r4, r0
    b570:	bb30      	cbnz	r0, b5c0 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    b572:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    b576:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    b57a:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    b57e:	f509 7b2a 	add.w	fp, r9, #680	; 0x2a8
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    b582:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    b584:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    b586:	bf08      	it	eq
    b588:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    b58a:	f00c ff17 	bl	183bc <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    b58e:	2300      	movs	r3, #0
    b590:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    b594:	4930      	ldr	r1, [pc, #192]	; (b658 <open+0x1a0>)
    b596:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b59a:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    b59e:	9300      	str	r3, [sp, #0]
    b5a0:	4658      	mov	r0, fp
    b5a2:	4623      	mov	r3, r4
    b5a4:	f00c ff24 	bl	183f0 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    b5a8:	f509 7026 	add.w	r0, r9, #664	; 0x298
    b5ac:	492b      	ldr	r1, [pc, #172]	; (b65c <open+0x1a4>)
    b5ae:	f00c fe39 	bl	18224 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    b5b2:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    b5b6:	6883      	ldr	r3, [r0, #8]
    b5b8:	685c      	ldr	r4, [r3, #4]
    b5ba:	b91c      	cbnz	r4, b5c4 <open+0x10c>
		return -ENOSYS;
    b5bc:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    b5c0:	2100      	movs	r1, #0
    b5c2:	e037      	b.n	b634 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    b5c4:	464b      	mov	r3, r9
    b5c6:	4a26      	ldr	r2, [pc, #152]	; (b660 <open+0x1a8>)
    b5c8:	f8da 1018 	ldr.w	r1, [sl, #24]
    b5cc:	47a0      	blx	r4
	if (err != 0) {
    b5ce:	4604      	mov	r4, r0
    b5d0:	2800      	cmp	r0, #0
    b5d2:	d1f5      	bne.n	b5c0 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    b5d4:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    b5d8:	6883      	ldr	r3, [r0, #8]
    b5da:	691b      	ldr	r3, [r3, #16]
    b5dc:	2b00      	cmp	r3, #0
    b5de:	d0ed      	beq.n	b5bc <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    b5e0:	2201      	movs	r2, #1
    b5e2:	f8da 1018 	ldr.w	r1, [sl, #24]
    b5e6:	4798      	blx	r3
	if (err != 0) {
    b5e8:	4604      	mov	r4, r0
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d1e8      	bne.n	b5c0 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    b5ee:	4b1d      	ldr	r3, [pc, #116]	; (b664 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    b5f0:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    b5f2:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	rpmsg_inst->cb = ept_cb;
    b5f6:	4b1c      	ldr	r3, [pc, #112]	; (b668 <open+0x1b0>)
    b5f8:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    b5fc:	4b1b      	ldr	r3, [pc, #108]	; (b66c <open+0x1b4>)
    b5fe:	9303      	str	r3, [sp, #12]
    b600:	f8d5 31f8 	ldr.w	r3, [r5, #504]	; 0x1f8
    b604:	9302      	str	r3, [sp, #8]
    b606:	f8d5 31f0 	ldr.w	r3, [r5, #496]	; 0x1f0
    b60a:	e9cd 8300 	strd	r8, r3, [sp]
    b60e:	f8d5 3250 	ldr.w	r3, [r5, #592]	; 0x250
    b612:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    b614:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    b618:	f000 f976 	bl	b908 <ipc_rpmsg_init>
	if (err != 0) {
    b61c:	4604      	mov	r4, r0
    b61e:	2800      	cmp	r0, #0
    b620:	d1ce      	bne.n	b5c0 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    b622:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    b626:	f00b fa45 	bl	16ab4 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    b62a:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    b62c:	f8c5 0358 	str.w	r0, [r5, #856]	; 0x358
	if (data->tx_buffer_size < 0) {
    b630:	db0a      	blt.n	b648 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    b632:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    b634:	4638      	mov	r0, r7
    b636:	f010 f846 	bl	1b6c6 <atomic_set.isra.0>
}
    b63a:	4620      	mov	r0, r4
    b63c:	b005      	add	sp, #20
    b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    b642:	f06f 040b 	mvn.w	r4, #11
    b646:	e7bb      	b.n	b5c0 <open+0x108>
		err = -EINVAL;
    b648:	f06f 0415 	mvn.w	r4, #21
    b64c:	e7b8      	b.n	b5c0 <open+0x108>
		return -EALREADY;
    b64e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    b652:	e7f2      	b.n	b63a <open+0x182>
    b654:	0001b6af 	.word	0x0001b6af
    b658:	2000a3b0 	.word	0x2000a3b0
    b65c:	0001b667 	.word	0x0001b667
    b660:	0001b65b 	.word	0x0001b65b
    b664:	0000b41d 	.word	0x0000b41d
    b668:	0001b681 	.word	0x0001b681
    b66c:	0001b6f7 	.word	0x0001b6f7

0000b670 <close>:
{
    b670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b674:	4606      	mov	r6, r0
    b676:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    b67a:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    b67c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    b680:	f505 7755 	add.w	r7, r5, #852	; 0x354
    b684:	e8d7 3fef 	ldaex	r3, [r7]
    b688:	2b02      	cmp	r3, #2
    b68a:	d103      	bne.n	b694 <close+0x24>
    b68c:	e8c7 9fe2 	stlex	r2, r9, [r7]
    b690:	2a00      	cmp	r2, #0
    b692:	d1f7      	bne.n	b684 <close+0x14>
    b694:	d149      	bne.n	b72a <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    b696:	4826      	ldr	r0, [pc, #152]	; (b730 <close+0xc0>)
    b698:	f105 0140 	add.w	r1, r5, #64	; 0x40
    b69c:	f010 fda6 	bl	1c1ec <strcmp>
    b6a0:	b120      	cbz	r0, b6ac <close+0x3c>
		return -EBUSY;
    b6a2:	f06f 040f 	mvn.w	r4, #15
}
    b6a6:	4620      	mov	r0, r4
    b6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    b6ac:	4820      	ldr	r0, [pc, #128]	; (b730 <close+0xc0>)
    b6ae:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    b6b2:	f010 fd9b 	bl	1c1ec <strcmp>
    b6b6:	2800      	cmp	r0, #0
    b6b8:	d1f3      	bne.n	b6a2 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    b6ba:	4628      	mov	r0, r5
    b6bc:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    b6c0:	f010 f86d 	bl	1b79e <ipc_rpmsg_deinit>
	if (err != 0) {
    b6c4:	4604      	mov	r4, r0
    b6c6:	bb70      	cbnz	r0, b726 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    b6c8:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    b6ca:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    b6cc:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    b6ce:	6883      	ldr	r3, [r0, #8]
    b6d0:	691b      	ldr	r3, [r3, #16]
    b6d2:	b333      	cbz	r3, b722 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    b6d4:	4622      	mov	r2, r4
    b6d6:	6989      	ldr	r1, [r1, #24]
    b6d8:	4798      	blx	r3
	if (err != 0) {
    b6da:	4604      	mov	r4, r0
    b6dc:	bb18      	cbnz	r0, b726 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    b6de:	f506 762a 	add.w	r6, r6, #680	; 0x2a8
    b6e2:	4649      	mov	r1, r9
    b6e4:	4630      	mov	r0, r6
    b6e6:	f00c feeb 	bl	184c0 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    b6ea:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    b6ec:	f505 76d8 	add.w	r6, r5, #432	; 0x1b0
    b6f0:	f001 fa52 	bl	cb98 <z_impl_k_thread_abort>
    b6f4:	4630      	mov	r0, r6
    b6f6:	f8d8 1000 	ldr.w	r1, [r8]
    b6fa:	f010 f88d 	bl	1b818 <ipc_static_vrings_deinit>
	if (err != 0) {
    b6fe:	4604      	mov	r4, r0
    b700:	b988      	cbnz	r0, b726 <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    b702:	4601      	mov	r1, r0
    b704:	22e8      	movs	r2, #232	; 0xe8
    b706:	4630      	mov	r0, r6
    b708:	f010 fdaa 	bl	1c260 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    b70c:	4621      	mov	r1, r4
    b70e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
    b712:	4628      	mov	r0, r5
    b714:	f010 fda4 	bl	1c260 <memset>
	atomic_set(&data->state, STATE_READY);
    b718:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    b71a:	4638      	mov	r0, r7
    b71c:	f00f ffd3 	bl	1b6c6 <atomic_set.isra.0>
	return err;
    b720:	e7c1      	b.n	b6a6 <close+0x36>
		return -ENOSYS;
    b722:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    b726:	2102      	movs	r1, #2
    b728:	e7f7      	b.n	b71a <close+0xaa>
		return -EALREADY;
    b72a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    b72e:	e7ba      	b.n	b6a6 <close+0x36>
    b730:	0002200b 	.word	0x0002200b

0000b734 <send>:
{
    b734:	b513      	push	{r0, r1, r4, lr}
    b736:	4604      	mov	r4, r0
    b738:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b73a:	6921      	ldr	r1, [r4, #16]
    b73c:	f501 7155 	add.w	r1, r1, #852	; 0x354
    b740:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    b744:	2902      	cmp	r1, #2
    b746:	d110      	bne.n	b76a <send+0x36>
	if (len == 0) {
    b748:	b193      	cbz	r3, b770 <send+0x3c>
	if (!rpmsg_ept) {
    b74a:	b1a0      	cbz	r0, b776 <send+0x42>
    b74c:	2101      	movs	r1, #1
    b74e:	e9cd 3100 	strd	r3, r1, [sp]
    b752:	4613      	mov	r3, r2
    b754:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    b758:	f00a ffc8 	bl	166ec <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    b75c:	4b07      	ldr	r3, [pc, #28]	; (b77c <send+0x48>)
		return -ENOMEM;
    b75e:	4298      	cmp	r0, r3
    b760:	bf08      	it	eq
    b762:	f06f 000b 	mvneq.w	r0, #11
}
    b766:	b002      	add	sp, #8
    b768:	bd10      	pop	{r4, pc}
		return -EBUSY;
    b76a:	f06f 000f 	mvn.w	r0, #15
    b76e:	e7fa      	b.n	b766 <send+0x32>
		return -EBADMSG;
    b770:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    b774:	e7f7      	b.n	b766 <send+0x32>
		return -ENOENT;
    b776:	f06f 0001 	mvn.w	r0, #1
    b77a:	e7f4      	b.n	b766 <send+0x32>
    b77c:	fffff82e 	.word	0xfffff82e

0000b780 <register_ept>:
{
    b780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b784:	4688      	mov	r8, r1
    b786:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    b788:	6906      	ldr	r6, [r0, #16]
    b78a:	f506 7355 	add.w	r3, r6, #852	; 0x354
    b78e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    b792:	2b02      	cmp	r3, #2
    b794:	d15f      	bne.n	b856 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    b796:	6813      	ldr	r3, [r2, #0]
    b798:	b923      	cbnz	r3, b7a4 <register_ept+0x24>
		return -EINVAL;
    b79a:	f06f 0015 	mvn.w	r0, #21
}
    b79e:	b003      	add	sp, #12
    b7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    b7a4:	781b      	ldrb	r3, [r3, #0]
    b7a6:	2b00      	cmp	r3, #0
    b7a8:	d0f7      	beq.n	b79a <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    b7aa:	f8d6 9350 	ldr.w	r9, [r6, #848]	; 0x350
    b7ae:	f1b9 0f00 	cmp.w	r9, #0
    b7b2:	d133      	bne.n	b81c <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    b7b4:	f506 77ce 	add.w	r7, r6, #412	; 0x19c
	return z_impl_k_mutex_lock(mutex, timeout);
    b7b8:	f04f 32ff 	mov.w	r2, #4294967295
    b7bc:	f04f 33ff 	mov.w	r3, #4294967295
    b7c0:	4638      	mov	r0, r7
    b7c2:	f00b ffc7 	bl	17754 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    b7c6:	4630      	mov	r0, r6
    b7c8:	682a      	ldr	r2, [r5, #0]
    b7ca:	a901      	add	r1, sp, #4
    b7cc:	f7ff fe60 	bl	b490 <get_ept>
	if (rpmsg_ept == NULL) {
    b7d0:	9c01      	ldr	r4, [sp, #4]
    b7d2:	b91c      	cbnz	r4, b7dc <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    b7d4:	4638      	mov	r0, r7
    b7d6:	f00f ff74 	bl	1b6c2 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    b7da:	e7de      	b.n	b79a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    b7dc:	f105 0308 	add.w	r3, r5, #8
    b7e0:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    b7e2:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    b7e4:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    b7e8:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    b7ea:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    b7ec:	b160      	cbz	r0, b808 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    b7ee:	4638      	mov	r0, r7
    b7f0:	f00f ff67 	bl	1b6c2 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    b7f4:	4621      	mov	r1, r4
    b7f6:	4630      	mov	r0, r6
    b7f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    b7fa:	682a      	ldr	r2, [r5, #0]
    b7fc:	f7ff fe26 	bl	b44c <advertise_ept>
	return 0;
    b800:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    b802:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    b806:	e7ca      	b.n	b79e <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    b808:	2220      	movs	r2, #32
    b80a:	6829      	ldr	r1, [r5, #0]
    b80c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    b810:	f010 fcc8 	bl	1c1a4 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    b814:	4638      	mov	r0, r7
    b816:	f00f ff54 	bl	1b6c2 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    b81a:	e7f1      	b.n	b800 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    b81c:	4630      	mov	r0, r6
    b81e:	490f      	ldr	r1, [pc, #60]	; (b85c <register_ept+0xdc>)
    b820:	f00f ff05 	bl	1b62e <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    b824:	4604      	mov	r4, r0
    b826:	2800      	cmp	r0, #0
    b828:	d0b7      	beq.n	b79a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    b82a:	f105 0308 	add.w	r3, r5, #8
    b82e:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    b830:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    b832:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    b834:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    b836:	2300      	movs	r3, #0
    b838:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    b83c:	2220      	movs	r2, #32
    b83e:	6829      	ldr	r1, [r5, #0]
    b840:	3040      	adds	r0, #64	; 0x40
    b842:	f010 fcaf 	bl	1c1a4 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    b846:	4622      	mov	r2, r4
    b848:	2101      	movs	r1, #1
    b84a:	4630      	mov	r0, r6
    b84c:	f000 f83e 	bl	b8cc <ipc_rpmsg_register_ept>
	if (err != 0) {
    b850:	2800      	cmp	r0, #0
    b852:	d0d5      	beq.n	b800 <register_ept+0x80>
    b854:	e7a1      	b.n	b79a <register_ept+0x1a>
		return -EBUSY;
    b856:	f06f 000f 	mvn.w	r0, #15
    b85a:	e7a0      	b.n	b79e <register_ept+0x1e>
    b85c:	0002200b 	.word	0x0002200b

0000b860 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b864:	4605      	mov	r5, r0
    b866:	460e      	mov	r6, r1
    b868:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    b86a:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    b86c:	f8d0 a0a4 	ldr.w	sl, [r0, #164]	; 0xa4
{
    b870:	b085      	sub	sp, #20
    b872:	f5aa 74a4 	sub.w	r4, sl, #328	; 0x148
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    b876:	4621      	mov	r1, r4
    b878:	4630      	mov	r0, r6
    b87a:	f010 fcb7 	bl	1c1ec <strcmp>
    b87e:	b9e0      	cbnz	r0, b8ba <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b880:	4b11      	ldr	r3, [pc, #68]	; (b8c8 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    b882:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b886:	9302      	str	r3, [sp, #8]
    b888:	f8da 3010 	ldr.w	r3, [sl, #16]
    b88c:	4632      	mov	r2, r6
    b88e:	e9cd 8300 	strd	r8, r3, [sp]
    b892:	4629      	mov	r1, r5
    b894:	f04f 33ff 	mov.w	r3, #4294967295
    b898:	4658      	mov	r0, fp
    b89a:	f5aa 79c4 	sub.w	r9, sl, #392	; 0x188
    b89e:	f00a ff6b 	bl	16778 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    b8a2:	b960      	cbnz	r0, b8be <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    b8a4:	2370      	movs	r3, #112	; 0x70
    b8a6:	2201      	movs	r2, #1
    b8a8:	fb03 9307 	mla	r3, r3, r7, r9
    b8ac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    b8b0:	f8da 300c 	ldr.w	r3, [sl, #12]
    b8b4:	b10b      	cbz	r3, b8ba <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    b8b6:	4658      	mov	r0, fp
    b8b8:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    b8ba:	3470      	adds	r4, #112	; 0x70
    b8bc:	b117      	cbz	r7, b8c4 <ns_bind_cb+0x64>
			}
		}
	}
}
    b8be:	b005      	add	sp, #20
    b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    b8c4:	2701      	movs	r7, #1
    b8c6:	e7d6      	b.n	b876 <ns_bind_cb+0x16>
    b8c8:	0001b79b 	.word	0x0001b79b

0000b8cc <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    b8cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b8ce:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    b8d0:	b190      	cbz	r0, b8f8 <ipc_rpmsg_register_ept+0x2c>
    b8d2:	b18a      	cbz	r2, b8f8 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    b8d4:	2901      	cmp	r1, #1
    b8d6:	d112      	bne.n	b8fe <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    b8d8:	4b0a      	ldr	r3, [pc, #40]	; (b904 <ipc_rpmsg_register_ept+0x38>)
    b8da:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    b8de:	9302      	str	r3, [sp, #8]
    b8e0:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    b8e4:	3240      	adds	r2, #64	; 0x40
    b8e6:	9301      	str	r3, [sp, #4]
    b8e8:	f04f 33ff 	mov.w	r3, #4294967295
    b8ec:	4620      	mov	r0, r4
    b8ee:	9300      	str	r3, [sp, #0]
    b8f0:	f00a ff42 	bl	16778 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    b8f4:	b004      	add	sp, #16
    b8f6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b8f8:	f06f 0015 	mvn.w	r0, #21
    b8fc:	e7fa      	b.n	b8f4 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    b8fe:	2000      	movs	r0, #0
    b900:	e7f8      	b.n	b8f4 <ipc_rpmsg_register_ept+0x28>
    b902:	bf00      	nop
    b904:	0001b79b 	.word	0x0001b79b

0000b908 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    b908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b90c:	b085      	sub	sp, #20
    b90e:	460f      	mov	r7, r1
    b910:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	; 0x30
    b914:	4614      	mov	r4, r2
    b916:	e9dd 250e 	ldrd	r2, r5, [sp, #56]	; 0x38
    b91a:	461e      	mov	r6, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    b91c:	b328      	cbz	r0, b96a <ipc_rpmsg_init+0x62>
    b91e:	b321      	cbz	r1, b96a <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    b920:	f8df c04c 	ldr.w	ip, [pc, #76]	; b970 <ipc_rpmsg_init+0x68>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    b924:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    b928:	2d00      	cmp	r5, #0
    b92a:	bf08      	it	eq
    b92c:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    b92e:	b997      	cbnz	r7, b956 <ipc_rpmsg_init+0x4e>
		config.r2h_buf_size = (uint32_t) buffer_size;
    b930:	e9cd 4402 	strd	r4, r4, [sp, #8]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    b934:	f500 74c4 	add.w	r4, r0, #392	; 0x188
    b938:	4620      	mov	r0, r4
    b93a:	f012 fdc1 	bl	1e4c0 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    b93e:	ab02      	add	r3, sp, #8
    b940:	e9cd 4300 	strd	r4, r3, [sp]
    b944:	462a      	mov	r2, r5
    b946:	4633      	mov	r3, r6
    b948:	4641      	mov	r1, r8
    b94a:	4648      	mov	r0, r9
    b94c:	f00b f8d8 	bl	16b00 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    b950:	b005      	add	sp, #20
    b952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    b956:	2200      	movs	r2, #0
    b958:	4641      	mov	r1, r8
    b95a:	920c      	str	r2, [sp, #48]	; 0x30
    b95c:	4648      	mov	r0, r9
    b95e:	462a      	mov	r2, r5
}
    b960:	b005      	add	sp, #20
    b962:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    b966:	f00b b9db 	b.w	16d20 <rpmsg_init_vdev>
		return -EINVAL;
    b96a:	f06f 0015 	mvn.w	r0, #21
    b96e:	e7ef      	b.n	b950 <ipc_rpmsg_init+0x48>
    b970:	0000b861 	.word	0x0000b861

0000b974 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    b974:	b5f0      	push	{r4, r5, r6, r7, lr}
    b976:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    b978:	4604      	mov	r4, r0
{
    b97a:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    b97c:	2800      	cmp	r0, #0
    b97e:	d06f      	beq.n	ba60 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    b980:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    b982:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    b984:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    b986:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    b988:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    b98c:	4f36      	ldr	r7, [pc, #216]	; (ba68 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    b98e:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    b990:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    b994:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    b998:	e9cd 3301 	strd	r3, r3, [sp, #4]
    b99c:	f04f 33ff 	mov.w	r3, #4294967295
    b9a0:	9300      	str	r3, [sp, #0]
    b9a2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    b9a4:	f012 f938 	bl	1dc18 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b9a8:	4a30      	ldr	r2, [pc, #192]	; (ba6c <ipc_static_vrings_init+0xf8>)
    b9aa:	ab06      	add	r3, sp, #24
    b9ac:	e892 0003 	ldmia.w	r2, {r0, r1}
    b9b0:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    b9b4:	4618      	mov	r0, r3
    b9b6:	f00a fdb9 	bl	1652c <metal_init>
	if (err != 0) {
    b9ba:	4605      	mov	r5, r0
    b9bc:	b9d8      	cbnz	r0, b9f6 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    b9be:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b9c2:	f00a fd93 	bl	164ec <metal_register_generic_device>
	if (err != 0) {
    b9c6:	4605      	mov	r5, r0
    b9c8:	b9a8      	cbnz	r0, b9f6 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b9ca:	4639      	mov	r1, r7
    b9cc:	4828      	ldr	r0, [pc, #160]	; (ba70 <ipc_static_vrings_init+0xfc>)
    b9ce:	aa05      	add	r2, sp, #20
    b9d0:	f012 f8fa 	bl	1dbc8 <metal_device_open>
	if (err != 0) {
    b9d4:	4605      	mov	r5, r0
    b9d6:	b970      	cbnz	r0, b9f6 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    b9d8:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b9da:	689a      	ldr	r2, [r3, #8]
    b9dc:	b172      	cbz	r2, b9fc <ipc_static_vrings_init+0x88>
    b9de:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    b9e0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    b9e4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    b9e8:	f00f ff08 	bl	1b7fc <virtqueue_allocate>
    b9ec:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    b9f0:	b930      	cbnz	r0, ba00 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    b9f2:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    b9f6:	4628      	mov	r0, r5
    b9f8:	b009      	add	sp, #36	; 0x24
    b9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9fc:	4603      	mov	r3, r0
    b9fe:	e7ef      	b.n	b9e0 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    ba00:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ba04:	f00f fefa 	bl	1b7fc <virtqueue_allocate>
    ba08:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    ba0c:	2800      	cmp	r0, #0
    ba0e:	d0f0      	beq.n	b9f2 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    ba10:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    ba14:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    ba18:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    ba1c:	2304      	movs	r3, #4
    ba1e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    ba22:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    ba26:	2302      	movs	r3, #2
    ba28:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    ba2a:	4b12      	ldr	r3, [pc, #72]	; (ba74 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    ba2c:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    ba30:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    ba34:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    ba38:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    ba3c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    ba40:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    ba42:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    ba46:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    ba4a:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    ba4e:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    ba52:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    ba56:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    ba5a:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    ba5c:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    ba5e:	e7ca      	b.n	b9f6 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    ba60:	f06f 0515 	mvn.w	r5, #21
    ba64:	e7c7      	b.n	b9f6 <ipc_static_vrings_init+0x82>
    ba66:	bf00      	nop
    ba68:	0002038c 	.word	0x0002038c
    ba6c:	0001ee84 	.word	0x0001ee84
    ba70:	00020396 	.word	0x00020396
    ba74:	0001f010 	.word	0x0001f010

0000ba78 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    ba78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ba7c:	4605      	mov	r5, r0
	__asm__ volatile(
    ba7e:	f04f 0320 	mov.w	r3, #32
    ba82:	f3ef 8611 	mrs	r6, BASEPRI
    ba86:	f383 8812 	msr	BASEPRI_MAX, r3
    ba8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba8e:	4820      	ldr	r0, [pc, #128]	; (bb10 <pm_state_notify+0x98>)
    ba90:	f00b fe0a 	bl	176a8 <z_spin_lock_valid>
    ba94:	b968      	cbnz	r0, bab2 <pm_state_notify+0x3a>
    ba96:	2394      	movs	r3, #148	; 0x94
    ba98:	4a1e      	ldr	r2, [pc, #120]	; (bb14 <pm_state_notify+0x9c>)
    ba9a:	491f      	ldr	r1, [pc, #124]	; (bb18 <pm_state_notify+0xa0>)
    ba9c:	481f      	ldr	r0, [pc, #124]	; (bb1c <pm_state_notify+0xa4>)
    ba9e:	f00f fbc5 	bl	1b22c <assert_print>
    baa2:	491b      	ldr	r1, [pc, #108]	; (bb10 <pm_state_notify+0x98>)
    baa4:	481e      	ldr	r0, [pc, #120]	; (bb20 <pm_state_notify+0xa8>)
    baa6:	f00f fbc1 	bl	1b22c <assert_print>
    baaa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    baac:	4819      	ldr	r0, [pc, #100]	; (bb14 <pm_state_notify+0x9c>)
    baae:	f00f fbb6 	bl	1b21e <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    bab2:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    bab6:	4816      	ldr	r0, [pc, #88]	; (bb10 <pm_state_notify+0x98>)
    bab8:	f00b fe12 	bl	176e0 <z_spin_lock_set_owner>
	return list->head;
    babc:	4b19      	ldr	r3, [pc, #100]	; (bb24 <pm_state_notify+0xac>)
    babe:	4f1a      	ldr	r7, [pc, #104]	; (bb28 <pm_state_notify+0xb0>)
    bac0:	681c      	ldr	r4, [r3, #0]
    bac2:	f8df 8068 	ldr.w	r8, [pc, #104]	; bb2c <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    bac6:	b97c      	cbnz	r4, bae8 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bac8:	4811      	ldr	r0, [pc, #68]	; (bb10 <pm_state_notify+0x98>)
    baca:	f00b fdfb 	bl	176c4 <z_spin_unlock_valid>
    bace:	b9c8      	cbnz	r0, bb04 <pm_state_notify+0x8c>
    bad0:	23c2      	movs	r3, #194	; 0xc2
    bad2:	4a10      	ldr	r2, [pc, #64]	; (bb14 <pm_state_notify+0x9c>)
    bad4:	4916      	ldr	r1, [pc, #88]	; (bb30 <pm_state_notify+0xb8>)
    bad6:	4811      	ldr	r0, [pc, #68]	; (bb1c <pm_state_notify+0xa4>)
    bad8:	f00f fba8 	bl	1b22c <assert_print>
    badc:	490c      	ldr	r1, [pc, #48]	; (bb10 <pm_state_notify+0x98>)
    bade:	4815      	ldr	r0, [pc, #84]	; (bb34 <pm_state_notify+0xbc>)
    bae0:	f00f fba4 	bl	1b22c <assert_print>
    bae4:	21c2      	movs	r1, #194	; 0xc2
    bae6:	e7e1      	b.n	baac <pm_state_notify+0x34>
			callback = notifier->state_exit;
    bae8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    baec:	2d00      	cmp	r5, #0
    baee:	bf18      	it	ne
    baf0:	4613      	movne	r3, r2
		if (callback) {
    baf2:	b12b      	cbz	r3, bb00 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    baf4:	f898 2014 	ldrb.w	r2, [r8, #20]
    baf8:	fb09 f202 	mul.w	r2, r9, r2
    bafc:	5cb8      	ldrb	r0, [r7, r2]
    bafe:	4798      	blx	r3
	return node->next;
    bb00:	6824      	ldr	r4, [r4, #0]
    bb02:	e7e0      	b.n	bac6 <pm_state_notify+0x4e>
	__asm__ volatile(
    bb04:	f386 8811 	msr	BASEPRI, r6
    bb08:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    bb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bb10:	20009628 	.word	0x20009628
    bb14:	0001fd89 	.word	0x0001fd89
    bb18:	0001fde2 	.word	0x0001fde2
    bb1c:	0001f995 	.word	0x0001f995
    bb20:	0001fdf7 	.word	0x0001fdf7
    bb24:	20009648 	.word	0x20009648
    bb28:	2000963c 	.word	0x2000963c
    bb2c:	20009a9c 	.word	0x20009a9c
    bb30:	0001fdb6 	.word	0x0001fdb6
    bb34:	0001fdcd 	.word	0x0001fdcd

0000bb38 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    bb38:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    bb3a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    bb3c:	4b16      	ldr	r3, [pc, #88]	; (bb98 <pm_system_resume+0x60>)
    bb3e:	7d1c      	ldrb	r4, [r3, #20]
    bb40:	f004 031f 	and.w	r3, r4, #31
    bb44:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb46:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bb48:	4b14      	ldr	r3, [pc, #80]	; (bb9c <pm_system_resume+0x64>)
    bb4a:	0961      	lsrs	r1, r4, #5
    bb4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bb50:	e8d3 1fef 	ldaex	r1, [r3]
    bb54:	ea01 0500 	and.w	r5, r1, r0
    bb58:	e8c3 5fe6 	stlex	r6, r5, [r3]
    bb5c:	2e00      	cmp	r6, #0
    bb5e:	d1f7      	bne.n	bb50 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    bb60:	420a      	tst	r2, r1
    bb62:	d013      	beq.n	bb8c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    bb64:	4b0e      	ldr	r3, [pc, #56]	; (bba0 <pm_system_resume+0x68>)
    bb66:	4d0f      	ldr	r5, [pc, #60]	; (bba4 <pm_system_resume+0x6c>)
    bb68:	b18b      	cbz	r3, bb8e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    bb6a:	230c      	movs	r3, #12
    bb6c:	4363      	muls	r3, r4
    bb6e:	18ea      	adds	r2, r5, r3
    bb70:	7851      	ldrb	r1, [r2, #1]
    bb72:	5ce8      	ldrb	r0, [r5, r3]
    bb74:	f00f fc56 	bl	1b424 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    bb78:	2000      	movs	r0, #0
    bb7a:	f7ff ff7d 	bl	ba78 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    bb7e:	230c      	movs	r3, #12
    bb80:	435c      	muls	r4, r3
    bb82:	2300      	movs	r3, #0
    bb84:	192a      	adds	r2, r5, r4
    bb86:	512b      	str	r3, [r5, r4]
    bb88:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    bb8c:	bd70      	pop	{r4, r5, r6, pc}
    bb8e:	f383 8811 	msr	BASEPRI, r3
    bb92:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    bb96:	e7ef      	b.n	bb78 <pm_system_resume+0x40>
    bb98:	20009a9c 	.word	0x20009a9c
    bb9c:	20009650 	.word	0x20009650
    bba0:	0001b425 	.word	0x0001b425
    bba4:	2000963c 	.word	0x2000963c

0000bba8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    bbac:	4b45      	ldr	r3, [pc, #276]	; (bcc4 <pm_system_suspend+0x11c>)
{
    bbae:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    bbb0:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    bbb2:	f04f 0320 	mov.w	r3, #32
    bbb6:	f3ef 8811 	mrs	r8, BASEPRI
    bbba:	f383 8812 	msr	BASEPRI_MAX, r3
    bbbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bbc2:	4841      	ldr	r0, [pc, #260]	; (bcc8 <pm_system_suspend+0x120>)
    bbc4:	f00b fd70 	bl	176a8 <z_spin_lock_valid>
    bbc8:	b968      	cbnz	r0, bbe6 <pm_system_suspend+0x3e>
    bbca:	2394      	movs	r3, #148	; 0x94
    bbcc:	4a3f      	ldr	r2, [pc, #252]	; (bccc <pm_system_suspend+0x124>)
    bbce:	4940      	ldr	r1, [pc, #256]	; (bcd0 <pm_system_suspend+0x128>)
    bbd0:	4840      	ldr	r0, [pc, #256]	; (bcd4 <pm_system_suspend+0x12c>)
    bbd2:	f00f fb2b 	bl	1b22c <assert_print>
    bbd6:	493c      	ldr	r1, [pc, #240]	; (bcc8 <pm_system_suspend+0x120>)
    bbd8:	483f      	ldr	r0, [pc, #252]	; (bcd8 <pm_system_suspend+0x130>)
    bbda:	f00f fb27 	bl	1b22c <assert_print>
    bbde:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bbe0:	483a      	ldr	r0, [pc, #232]	; (bccc <pm_system_suspend+0x124>)
    bbe2:	f00f fb1c 	bl	1b21e <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    bbe6:	240c      	movs	r4, #12
    bbe8:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    bbea:	4837      	ldr	r0, [pc, #220]	; (bcc8 <pm_system_suspend+0x120>)
    bbec:	f00b fd78 	bl	176e0 <z_spin_lock_set_owner>
    bbf0:	4b3a      	ldr	r3, [pc, #232]	; (bcdc <pm_system_suspend+0x134>)
    bbf2:	4e3b      	ldr	r6, [pc, #236]	; (bce0 <pm_system_suspend+0x138>)
    bbf4:	5d19      	ldrb	r1, [r3, r4]
    bbf6:	191a      	adds	r2, r3, r4
    bbf8:	b1b9      	cbz	r1, bc2a <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    bbfa:	ca07      	ldmia	r2, {r0, r1, r2}
    bbfc:	eb06 0c04 	add.w	ip, r6, r4
    bc00:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    bc04:	2200      	movs	r2, #0
    bc06:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bc08:	482f      	ldr	r0, [pc, #188]	; (bcc8 <pm_system_suspend+0x120>)
    bc0a:	f00b fd5b 	bl	176c4 <z_spin_unlock_valid>
    bc0e:	4604      	mov	r4, r0
    bc10:	b9b0      	cbnz	r0, bc40 <pm_system_suspend+0x98>
    bc12:	23c2      	movs	r3, #194	; 0xc2
    bc14:	4a2d      	ldr	r2, [pc, #180]	; (bccc <pm_system_suspend+0x124>)
    bc16:	4933      	ldr	r1, [pc, #204]	; (bce4 <pm_system_suspend+0x13c>)
    bc18:	482e      	ldr	r0, [pc, #184]	; (bcd4 <pm_system_suspend+0x12c>)
    bc1a:	f00f fb07 	bl	1b22c <assert_print>
    bc1e:	492a      	ldr	r1, [pc, #168]	; (bcc8 <pm_system_suspend+0x120>)
    bc20:	4831      	ldr	r0, [pc, #196]	; (bce8 <pm_system_suspend+0x140>)
    bc22:	f00f fb03 	bl	1b22c <assert_print>
    bc26:	21c2      	movs	r1, #194	; 0xc2
    bc28:	e7da      	b.n	bbe0 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    bc2a:	4639      	mov	r1, r7
    bc2c:	4628      	mov	r0, r5
    bc2e:	f000 f865 	bl	bcfc <pm_policy_next_state>
		if (info != NULL) {
    bc32:	2800      	cmp	r0, #0
    bc34:	d0e8      	beq.n	bc08 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    bc36:	c807      	ldmia	r0, {r0, r1, r2}
    bc38:	4434      	add	r4, r6
    bc3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    bc3e:	e7e3      	b.n	bc08 <pm_system_suspend+0x60>
	__asm__ volatile(
    bc40:	f388 8811 	msr	BASEPRI, r8
    bc44:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    bc48:	230c      	movs	r3, #12
    bc4a:	436b      	muls	r3, r5
    bc4c:	18f2      	adds	r2, r6, r3
    bc4e:	5cf3      	ldrb	r3, [r6, r3]
    bc50:	b3ab      	cbz	r3, bcbe <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    bc52:	1c7b      	adds	r3, r7, #1
    bc54:	d00f      	beq.n	bc76 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    bc56:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    bc5a:	2100      	movs	r1, #0
    bc5c:	f8d2 e008 	ldr.w	lr, [r2, #8]
    bc60:	4822      	ldr	r0, [pc, #136]	; (bcec <pm_system_suspend+0x144>)
    bc62:	2300      	movs	r3, #0
    bc64:	fbee 010c 	umlal	r0, r1, lr, ip
    bc68:	4a21      	ldr	r2, [pc, #132]	; (bcf0 <pm_system_suspend+0x148>)
    bc6a:	f7fc fa75 	bl	8158 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    bc6e:	2101      	movs	r1, #1
    bc70:	1a38      	subs	r0, r7, r0
    bc72:	f00e fa55 	bl	1a120 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    bc76:	f00d f8d3 	bl	18e20 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    bc7a:	2001      	movs	r0, #1
    bc7c:	f7ff fefc 	bl	ba78 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bc80:	4b1c      	ldr	r3, [pc, #112]	; (bcf4 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    bc82:	096a      	lsrs	r2, r5, #5
    bc84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    bc88:	2201      	movs	r2, #1
    bc8a:	f005 011f 	and.w	r1, r5, #31
    bc8e:	408a      	lsls	r2, r1
    bc90:	e8d3 0fef 	ldaex	r0, [r3]
    bc94:	4310      	orrs	r0, r2
    bc96:	e8c3 0fe1 	stlex	r1, r0, [r3]
    bc9a:	2900      	cmp	r1, #0
    bc9c:	d1f8      	bne.n	bc90 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    bc9e:	4b16      	ldr	r3, [pc, #88]	; (bcf8 <pm_system_suspend+0x150>)
    bca0:	b133      	cbz	r3, bcb0 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    bca2:	230c      	movs	r3, #12
    bca4:	436b      	muls	r3, r5
    bca6:	18f2      	adds	r2, r6, r3
    bca8:	7851      	ldrb	r1, [r2, #1]
    bcaa:	5cf0      	ldrb	r0, [r6, r3]
    bcac:	f00f fbae 	bl	1b40c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    bcb0:	f7ff ff42 	bl	bb38 <pm_system_resume>
	k_sched_unlock();
    bcb4:	f00d f920 	bl	18ef8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    bcb8:	4620      	mov	r0, r4
    bcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    bcbe:	461c      	mov	r4, r3
    bcc0:	e7fa      	b.n	bcb8 <pm_system_suspend+0x110>
    bcc2:	bf00      	nop
    bcc4:	20009a9c 	.word	0x20009a9c
    bcc8:	2000962c 	.word	0x2000962c
    bccc:	0001fd89 	.word	0x0001fd89
    bcd0:	0001fde2 	.word	0x0001fde2
    bcd4:	0001f995 	.word	0x0001f995
    bcd8:	0001fdf7 	.word	0x0001fdf7
    bcdc:	20009630 	.word	0x20009630
    bce0:	2000963c 	.word	0x2000963c
    bce4:	0001fdb6 	.word	0x0001fdb6
    bce8:	0001fdcd 	.word	0x0001fdcd
    bcec:	000f423f 	.word	0x000f423f
    bcf0:	000f4240 	.word	0x000f4240
    bcf4:	20009650 	.word	0x20009650
    bcf8:	0001b40d 	.word	0x0001b40d

0000bcfc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd00:	b085      	sub	sp, #20
    bd02:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    bd04:	a903      	add	r1, sp, #12
    bd06:	f000 f843 	bl	bd90 <pm_state_cpu_get_all>
    bd0a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bd0e:	4604      	mov	r4, r0
    bd10:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bd14:	4b1b      	ldr	r3, [pc, #108]	; (bd84 <pm_policy_next_state+0x88>)
    bd16:	9d03      	ldr	r5, [sp, #12]
    bd18:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bd1c:	1e43      	subs	r3, r0, #1
    bd1e:	b21b      	sxth	r3, r3
    bd20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bd24:	f8df 8060 	ldr.w	r8, [pc, #96]	; bd88 <pm_policy_next_state+0x8c>
    bd28:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    bd2c:	b924      	cbnz	r4, bd38 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    bd2e:	46a1      	mov	r9, r4
}
    bd30:	4648      	mov	r0, r9
    bd32:	b005      	add	sp, #20
    bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd38:	46c4      	mov	ip, r8
    bd3a:	4659      	mov	r1, fp
    bd3c:	6868      	ldr	r0, [r5, #4]
    bd3e:	2300      	movs	r3, #0
    bd40:	fbe0 c107 	umlal	ip, r1, r0, r7
    bd44:	4a11      	ldr	r2, [pc, #68]	; (bd8c <pm_policy_next_state+0x90>)
    bd46:	4660      	mov	r0, ip
    bd48:	f7fc fa06 	bl	8158 <__aeabi_uldivmod>
    bd4c:	46c4      	mov	ip, r8
    bd4e:	4659      	mov	r1, fp
    bd50:	9001      	str	r0, [sp, #4]
    bd52:	68a8      	ldr	r0, [r5, #8]
    bd54:	2300      	movs	r3, #0
    bd56:	fbe0 c107 	umlal	ip, r1, r0, r7
    bd5a:	4a0c      	ldr	r2, [pc, #48]	; (bd8c <pm_policy_next_state+0x90>)
    bd5c:	4660      	mov	r0, ip
    bd5e:	f7fc f9fb 	bl	8158 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bd62:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    bd66:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bd68:	d001      	beq.n	bd6e <pm_policy_next_state+0x72>
    bd6a:	4582      	cmp	sl, r0
    bd6c:	d905      	bls.n	bd7a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    bd6e:	1c73      	adds	r3, r6, #1
    bd70:	d0de      	beq.n	bd30 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    bd72:	9b01      	ldr	r3, [sp, #4]
    bd74:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    bd76:	42b0      	cmp	r0, r6
    bd78:	d9da      	bls.n	bd30 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bd7a:	3c01      	subs	r4, #1
    bd7c:	b2a4      	uxth	r4, r4
    bd7e:	3d0c      	subs	r5, #12
    bd80:	e7d4      	b.n	bd2c <pm_policy_next_state+0x30>
    bd82:	bf00      	nop
    bd84:	200081b4 	.word	0x200081b4
    bd88:	000f423f 	.word	0x000f423f
    bd8c:	000f4240 	.word	0x000f4240

0000bd90 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    bd90:	b908      	cbnz	r0, bd96 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    bd92:	4b02      	ldr	r3, [pc, #8]	; (bd9c <pm_state_cpu_get_all+0xc>)
    bd94:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    bd96:	2000      	movs	r0, #0
    bd98:	4770      	bx	lr
    bd9a:	bf00      	nop
    bd9c:	0001f034 	.word	0x0001f034

0000bda0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    bda0:	4904      	ldr	r1, [pc, #16]	; (bdb4 <sub_bytes+0x14>)
    bda2:	1e43      	subs	r3, r0, #1
    bda4:	300f      	adds	r0, #15
    bda6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    bdaa:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    bdac:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    bdae:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    bdb0:	d1f9      	bne.n	bda6 <sub_bytes+0x6>
	}
}
    bdb2:	4770      	bx	lr
    bdb4:	000203a1 	.word	0x000203a1

0000bdb8 <tc_aes128_set_encrypt_key>:
{
    bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdba:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    bdbc:	4e26      	ldr	r6, [pc, #152]	; (be58 <tc_aes128_set_encrypt_key+0xa0>)
{
    bdbe:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    bdc0:	ad01      	add	r5, sp, #4
{
    bdc2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    bdc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    bdc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bdc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    bdca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bdcc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    bdd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    bdd4:	4638      	mov	r0, r7
    bdd6:	2f00      	cmp	r7, #0
    bdd8:	d039      	beq.n	be4e <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    bdda:	2c00      	cmp	r4, #0
    bddc:	d039      	beq.n	be52 <tc_aes128_set_encrypt_key+0x9a>
    bdde:	1f38      	subs	r0, r7, #4
    bde0:	4602      	mov	r2, r0
    bde2:	4621      	mov	r1, r4
    bde4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    bde6:	784b      	ldrb	r3, [r1, #1]
    bde8:	780d      	ldrb	r5, [r1, #0]
    bdea:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    bdec:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    bdf0:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    bdf2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    bdf4:	432b      	orrs	r3, r5
    bdf6:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    bdfa:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    bdfc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    be00:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    be04:	d1ef      	bne.n	bde6 <tc_aes128_set_encrypt_key+0x2e>
    be06:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    be08:	4c14      	ldr	r4, [pc, #80]	; (be5c <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    be0a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    be0c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    be0e:	d116      	bne.n	be3e <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    be10:	f3c3 4207 	ubfx	r2, r3, #16, #8
    be14:	5ca5      	ldrb	r5, [r4, r2]
    be16:	0e1a      	lsrs	r2, r3, #24
    be18:	5ca2      	ldrb	r2, [r4, r2]
    be1a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    be1e:	f3c3 2507 	ubfx	r5, r3, #8, #8
    be22:	5d65      	ldrb	r5, [r4, r5]
    be24:	b2db      	uxtb	r3, r3
    be26:	5ce3      	ldrb	r3, [r4, r3]
    be28:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    be2c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    be30:	f021 0303 	bic.w	r3, r1, #3
    be34:	3330      	adds	r3, #48	; 0x30
    be36:	446b      	add	r3, sp
    be38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    be3c:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    be3e:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    be42:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    be44:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    be46:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    be48:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    be4a:	d1de      	bne.n	be0a <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    be4c:	2001      	movs	r0, #1
}
    be4e:	b00d      	add	sp, #52	; 0x34
    be50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    be52:	4620      	mov	r0, r4
    be54:	e7fb      	b.n	be4e <tc_aes128_set_encrypt_key+0x96>
    be56:	bf00      	nop
    be58:	0001ee8c 	.word	0x0001ee8c
    be5c:	000203a1 	.word	0x000203a1

0000be60 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    be64:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    be66:	6803      	ldr	r3, [r0, #0]
{
    be68:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    be6a:	9302      	str	r3, [sp, #8]
    be6c:	6843      	ldr	r3, [r0, #4]
    be6e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; c02c <compress+0x1cc>
    be72:	9303      	str	r3, [sp, #12]
    be74:	6883      	ldr	r3, [r0, #8]
    be76:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    be7a:	9304      	str	r3, [sp, #16]
    be7c:	68c3      	ldr	r3, [r0, #12]
    be7e:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    be80:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    be82:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    be86:	9306      	str	r3, [sp, #24]
    be88:	6943      	ldr	r3, [r0, #20]
    be8a:	9307      	str	r3, [sp, #28]
    be8c:	6983      	ldr	r3, [r0, #24]
    be8e:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    be92:	9308      	str	r3, [sp, #32]
    be94:	69c3      	ldr	r3, [r0, #28]
    be96:	4698      	mov	r8, r3
    be98:	9309      	str	r3, [sp, #36]	; 0x24
    be9a:	9b08      	ldr	r3, [sp, #32]
    be9c:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    be9e:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    bea0:	ab0c      	add	r3, sp, #48	; 0x30
    bea2:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    bea4:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    bea8:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    beaa:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    beae:	44a9      	add	r9, r5
    beb0:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    beb4:	9d00      	ldr	r5, [sp, #0]
    beb6:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    beba:	444b      	add	r3, r9
    bebc:	ea25 0502 	bic.w	r5, r5, r2
    bec0:	ea02 090c 	and.w	r9, r2, ip
    bec4:	ea85 0509 	eor.w	r5, r5, r9
    bec8:	442b      	add	r3, r5
    beca:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    becc:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    bed0:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    bed4:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    bed8:	4025      	ands	r5, r4
    beda:	ea06 090b 	and.w	r9, r6, fp
    bede:	ea85 0509 	eor.w	r5, r5, r9
    bee2:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    bee6:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    bee8:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    beea:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    beec:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    bef0:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    bef2:	46de      	mov	lr, fp
    bef4:	f8dd 8000 	ldr.w	r8, [sp]
    bef8:	f040 8088 	bne.w	c00c <compress+0x1ac>
    befc:	f04f 0a10 	mov.w	sl, #16
    bf00:	494b      	ldr	r1, [pc, #300]	; (c030 <compress+0x1d0>)
    bf02:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    bf04:	4651      	mov	r1, sl
    bf06:	f10a 0a01 	add.w	sl, sl, #1
    bf0a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    bf0e:	f00a 070f 	and.w	r7, sl, #15
    bf12:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    bf16:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    bf1a:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    bf1e:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    bf22:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    bf24:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    bf28:	f101 070e 	add.w	r7, r1, #14
    bf2c:	f007 070f 	and.w	r7, r7, #15
    bf30:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    bf34:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    bf38:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    bf3a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    bf3e:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    bf42:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    bf46:	f001 010f 	and.w	r1, r1, #15
    bf4a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    bf4e:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    bf52:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    bf56:	f859 ec40 	ldr.w	lr, [r9, #-64]
    bf5a:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    bf5e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    bf62:	4471      	add	r1, lr
		s0 = sigma0(s0);
    bf64:	f8dd e004 	ldr.w	lr, [sp, #4]
    bf68:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    bf6c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    bf70:	4441      	add	r1, r8
		s1 = sigma1(s1);
    bf72:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    bf76:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    bf78:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    bf7c:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    bf80:	ea2c 0705 	bic.w	r7, ip, r5
    bf84:	ea87 0708 	eor.w	r7, r7, r8
    bf88:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    bf8c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    bf90:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    bf94:	4477      	add	r7, lr
    bf96:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    bf9a:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    bf9e:	4477      	add	r7, lr
    bfa0:	440f      	add	r7, r1
    bfa2:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    bfa4:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    bfa8:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    bfaa:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    bfae:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    bfb2:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    bfb6:	ea07 0703 	and.w	r7, r7, r3
    bfba:	ea04 0806 	and.w	r8, r4, r6
    bfbe:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    bfc2:	ea87 0708 	eor.w	r7, r7, r8
    bfc6:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    bfc8:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    bfca:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    bfce:	f8cd c000 	str.w	ip, [sp]
    bfd2:	46b3      	mov	fp, r6
    bfd4:	d122      	bne.n	c01c <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    bfd6:	9902      	ldr	r1, [sp, #8]
    bfd8:	4439      	add	r1, r7
    bfda:	6001      	str	r1, [r0, #0]
    bfdc:	9903      	ldr	r1, [sp, #12]
    bfde:	4419      	add	r1, r3
    bfe0:	9b04      	ldr	r3, [sp, #16]
    bfe2:	6041      	str	r1, [r0, #4]
    bfe4:	4423      	add	r3, r4
    bfe6:	6083      	str	r3, [r0, #8]
    bfe8:	9b05      	ldr	r3, [sp, #20]
    bfea:	4433      	add	r3, r6
    bfec:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    bfee:	9b06      	ldr	r3, [sp, #24]
    bff0:	4473      	add	r3, lr
    bff2:	6103      	str	r3, [r0, #16]
    bff4:	9b07      	ldr	r3, [sp, #28]
    bff6:	442b      	add	r3, r5
    bff8:	6143      	str	r3, [r0, #20]
    bffa:	9b08      	ldr	r3, [sp, #32]
    bffc:	4413      	add	r3, r2
    bffe:	6183      	str	r3, [r0, #24]
    c000:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c002:	4463      	add	r3, ip
    c004:	61c3      	str	r3, [r0, #28]
}
    c006:	b01d      	add	sp, #116	; 0x74
    c008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c00c:	46b3      	mov	fp, r6
    c00e:	f8cd c000 	str.w	ip, [sp]
    c012:	4626      	mov	r6, r4
    c014:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    c016:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    c018:	462a      	mov	r2, r5
    c01a:	e740      	b.n	be9e <compress+0x3e>
    c01c:	4694      	mov	ip, r2
    c01e:	4626      	mov	r6, r4
    c020:	462a      	mov	r2, r5
    c022:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    c024:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    c026:	463b      	mov	r3, r7
    c028:	e76c      	b.n	bf04 <compress+0xa4>
    c02a:	bf00      	nop
    c02c:	0001f034 	.word	0x0001f034
    c030:	0001f070 	.word	0x0001f070

0000c034 <tc_sha256_init>:
{
    c034:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    c036:	4604      	mov	r4, r0
    c038:	b1c8      	cbz	r0, c06e <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    c03a:	2270      	movs	r2, #112	; 0x70
    c03c:	2100      	movs	r1, #0
    c03e:	f00f fc28 	bl	1b892 <_set>
	s->iv[1] = 0xbb67ae85;
    c042:	4b0b      	ldr	r3, [pc, #44]	; (c070 <tc_sha256_init+0x3c>)
    c044:	4a0b      	ldr	r2, [pc, #44]	; (c074 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    c046:	490c      	ldr	r1, [pc, #48]	; (c078 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    c048:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    c04c:	4b0b      	ldr	r3, [pc, #44]	; (c07c <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    c04e:	480c      	ldr	r0, [pc, #48]	; (c080 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    c050:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    c054:	4b0b      	ldr	r3, [pc, #44]	; (c084 <tc_sha256_init+0x50>)
    c056:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    c05a:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    c05c:	4b0a      	ldr	r3, [pc, #40]	; (c088 <tc_sha256_init+0x54>)
    c05e:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    c060:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    c064:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    c068:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    c06c:	61e3      	str	r3, [r4, #28]
}
    c06e:	bd10      	pop	{r4, pc}
    c070:	bb67ae85 	.word	0xbb67ae85
    c074:	6a09e667 	.word	0x6a09e667
    c078:	3c6ef372 	.word	0x3c6ef372
    c07c:	a54ff53a 	.word	0xa54ff53a
    c080:	510e527f 	.word	0x510e527f
    c084:	9b05688c 	.word	0x9b05688c
    c088:	1f83d9ab 	.word	0x1f83d9ab

0000c08c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c08c:	4901      	ldr	r1, [pc, #4]	; (c094 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c08e:	2210      	movs	r2, #16
	str	r2, [r1]
    c090:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c092:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c094:	e000ed10 	.word	0xe000ed10

0000c098 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c098:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c09a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c09c:	f380 8811 	msr	BASEPRI, r0
	isb
    c0a0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    c0a4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    c0a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c0aa:	b662      	cpsie	i
	isb
    c0ac:	f3bf 8f6f 	isb	sy

	bx	lr
    c0b0:	4770      	bx	lr
    c0b2:	bf00      	nop

0000c0b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c0b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c0b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c0b8:	f381 8811 	msr	BASEPRI, r1

	wfe
    c0bc:	bf20      	wfe

	msr	BASEPRI, r0
    c0be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c0c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c0c4:	4770      	bx	lr
    c0c6:	bf00      	nop

0000c0c8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0cc:	4681      	mov	r9, r0

	if (esf != NULL) {
    c0ce:	460c      	mov	r4, r1
{
    c0d0:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    c0d2:	2900      	cmp	r1, #0
    c0d4:	d04c      	beq.n	c170 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    c0d6:	e9d1 1200 	ldrd	r1, r2, [r1]
    c0da:	466e      	mov	r6, sp
    c0dc:	b08a      	sub	sp, #40	; 0x28
    c0de:	68a3      	ldr	r3, [r4, #8]
    c0e0:	466d      	mov	r5, sp
    c0e2:	f04f 0a05 	mov.w	sl, #5
    c0e6:	46a8      	mov	r8, r5
    c0e8:	4825      	ldr	r0, [pc, #148]	; (c180 <z_arm_fatal_error+0xb8>)
    c0ea:	e9c5 2307 	strd	r2, r3, [r5, #28]
    c0ee:	e9c5 0105 	strd	r0, r1, [r5, #20]
    c0f2:	f848 af10 	str.w	sl, [r8, #16]!
    c0f6:	2300      	movs	r3, #0
    c0f8:	4642      	mov	r2, r8
    c0fa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    c0fe:	4821      	ldr	r0, [pc, #132]	; (c184 <z_arm_fatal_error+0xbc>)
    c100:	f7fe fdfc 	bl	acfc <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    c104:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    c108:	46b5      	mov	sp, r6
    c10a:	6963      	ldr	r3, [r4, #20]
    c10c:	46ad      	mov	sp, r5
    c10e:	481e      	ldr	r0, [pc, #120]	; (c188 <z_arm_fatal_error+0xc0>)
    c110:	e9c5 2307 	strd	r2, r3, [r5, #28]
    c114:	e9c5 0105 	strd	r0, r1, [r5, #20]
    c118:	f8c5 a010 	str.w	sl, [r5, #16]
    c11c:	2300      	movs	r3, #0
    c11e:	4642      	mov	r2, r8
    c120:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    c124:	4817      	ldr	r0, [pc, #92]	; (c184 <z_arm_fatal_error+0xbc>)
    c126:	f7fe fde9 	bl	acfc <z_impl_z_log_msg_static_create>
    c12a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    c12c:	b088      	sub	sp, #32
    c12e:	69e3      	ldr	r3, [r4, #28]
    c130:	466d      	mov	r5, sp
    c132:	f04f 0a03 	mov.w	sl, #3
    c136:	46a8      	mov	r8, r5
    c138:	4a14      	ldr	r2, [pc, #80]	; (c18c <z_arm_fatal_error+0xc4>)
    c13a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    c13e:	f848 af10 	str.w	sl, [r8, #16]!
    c142:	2300      	movs	r3, #0
    c144:	4642      	mov	r2, r8
    c146:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c14a:	480e      	ldr	r0, [pc, #56]	; (c184 <z_arm_fatal_error+0xbc>)
    c14c:	f7fe fdd6 	bl	acfc <z_impl_z_log_msg_static_create>
    c150:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    c152:	69a3      	ldr	r3, [r4, #24]
    c154:	46ad      	mov	sp, r5
    c156:	4a0e      	ldr	r2, [pc, #56]	; (c190 <z_arm_fatal_error+0xc8>)
    c158:	f8c5 a010 	str.w	sl, [r5, #16]
    c15c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    c160:	2300      	movs	r3, #0
    c162:	4642      	mov	r2, r8
    c164:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c168:	4806      	ldr	r0, [pc, #24]	; (c184 <z_arm_fatal_error+0xbc>)
    c16a:	f7fe fdc7 	bl	acfc <z_impl_z_log_msg_static_create>
    c16e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    c170:	4621      	mov	r1, r4
    c172:	4648      	mov	r0, r9
    c174:	f00a fde8 	bl	16d48 <z_fatal_error>
}
    c178:	46bd      	mov	sp, r7
    c17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c17e:	bf00      	nop
    c180:	000204a1 	.word	0x000204a1
    c184:	0001ee24 	.word	0x0001ee24
    c188:	000204d0 	.word	0x000204d0
    c18c:	000204ff 	.word	0x000204ff
    c190:	0002050e 	.word	0x0002050e

0000c194 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    c194:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c196:	2800      	cmp	r0, #0
    c198:	db07      	blt.n	c1aa <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c19a:	2301      	movs	r3, #1
    c19c:	0941      	lsrs	r1, r0, #5
    c19e:	4a03      	ldr	r2, [pc, #12]	; (c1ac <arch_irq_enable+0x18>)
    c1a0:	f000 001f 	and.w	r0, r0, #31
    c1a4:	4083      	lsls	r3, r0
    c1a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    c1aa:	4770      	bx	lr
    c1ac:	e000e100 	.word	0xe000e100

0000c1b0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    c1b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c1b2:	2800      	cmp	r0, #0
    c1b4:	db0c      	blt.n	c1d0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b6:	2201      	movs	r2, #1
    c1b8:	4906      	ldr	r1, [pc, #24]	; (c1d4 <arch_irq_disable+0x24>)
    c1ba:	0943      	lsrs	r3, r0, #5
    c1bc:	f000 001f 	and.w	r0, r0, #31
    c1c0:	4082      	lsls	r2, r0
    c1c2:	3320      	adds	r3, #32
    c1c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c1c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c1cc:	f3bf 8f6f 	isb	sy
}
    c1d0:	4770      	bx	lr
    c1d2:	bf00      	nop
    c1d4:	e000e100 	.word	0xe000e100

0000c1d8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    c1d8:	4b05      	ldr	r3, [pc, #20]	; (c1f0 <arch_irq_is_enabled+0x18>)
    c1da:	0942      	lsrs	r2, r0, #5
    c1dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c1e0:	2301      	movs	r3, #1
    c1e2:	f000 001f 	and.w	r0, r0, #31
    c1e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    c1ea:	4010      	ands	r0, r2
    c1ec:	4770      	bx	lr
    c1ee:	bf00      	nop
    c1f0:	e000e100 	.word	0xe000e100

0000c1f4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    c1f4:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    c1f6:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    c1f8:	2b07      	cmp	r3, #7
{
    c1fa:	4604      	mov	r4, r0
    c1fc:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    c1fe:	d90f      	bls.n	c220 <z_arm_irq_priority_set+0x2c>
    c200:	235b      	movs	r3, #91	; 0x5b
    c202:	4a10      	ldr	r2, [pc, #64]	; (c244 <z_arm_irq_priority_set+0x50>)
    c204:	4910      	ldr	r1, [pc, #64]	; (c248 <z_arm_irq_priority_set+0x54>)
    c206:	4811      	ldr	r0, [pc, #68]	; (c24c <z_arm_irq_priority_set+0x58>)
    c208:	f00f f810 	bl	1b22c <assert_print>
    c20c:	4629      	mov	r1, r5
    c20e:	4810      	ldr	r0, [pc, #64]	; (c250 <z_arm_irq_priority_set+0x5c>)
    c210:	2307      	movs	r3, #7
    c212:	4622      	mov	r2, r4
    c214:	f00f f80a 	bl	1b22c <assert_print>
    c218:	215b      	movs	r1, #91	; 0x5b
    c21a:	480a      	ldr	r0, [pc, #40]	; (c244 <z_arm_irq_priority_set+0x50>)
    c21c:	f00e ffff 	bl	1b21e <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    c220:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    c222:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c224:	bfac      	ite	ge
    c226:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c22a:	4a0a      	ldrlt	r2, [pc, #40]	; (c254 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c22c:	ea4f 1343 	mov.w	r3, r3, lsl #5
    c230:	b2db      	uxtb	r3, r3
    c232:	bfab      	itete	ge
    c234:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c238:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c23c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c240:	5413      	strblt	r3, [r2, r0]
}
    c242:	bd38      	pop	{r3, r4, r5, pc}
    c244:	0002053c 	.word	0x0002053c
    c248:	00020572 	.word	0x00020572
    c24c:	0001f995 	.word	0x0001f995
    c250:	0002058d 	.word	0x0002058d
    c254:	e000ed14 	.word	0xe000ed14

0000c258 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    c258:	bf30      	wfi
    b z_SysNmiOnReset
    c25a:	f7ff bffd 	b.w	c258 <z_SysNmiOnReset>
    c25e:	bf00      	nop

0000c260 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c260:	4a0b      	ldr	r2, [pc, #44]	; (c290 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    c262:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c264:	4b0b      	ldr	r3, [pc, #44]	; (c294 <z_arm_prep_c+0x34>)
    c266:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    c26a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    c26c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c270:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    c274:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c278:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    c27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    c280:	f00a fe34 	bl	16eec <z_bss_zero>
	z_data_copy();
    c284:	f00d fd8c 	bl	19da0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    c288:	f000 fc00 	bl	ca8c <z_arm_interrupt_init>
	z_cstart();
    c28c:	f00a fe6e 	bl	16f6c <z_cstart>
    c290:	00008000 	.word	0x00008000
    c294:	e000ed00 	.word	0xe000ed00

0000c298 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    c298:	4a09      	ldr	r2, [pc, #36]	; (c2c0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    c29a:	490a      	ldr	r1, [pc, #40]	; (c2c4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    c29c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    c29e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    c2a0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    c2a2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c2a4:	4908      	ldr	r1, [pc, #32]	; (c2c8 <arch_swap+0x30>)
    c2a6:	684b      	ldr	r3, [r1, #4]
    c2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c2ac:	604b      	str	r3, [r1, #4]
    c2ae:	2300      	movs	r3, #0
    c2b0:	f383 8811 	msr	BASEPRI, r3
    c2b4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    c2b8:	6893      	ldr	r3, [r2, #8]
}
    c2ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    c2bc:	4770      	bx	lr
    c2be:	bf00      	nop
    c2c0:	20009a9c 	.word	0x20009a9c
    c2c4:	0001f63c 	.word	0x0001f63c
    c2c8:	e000ed00 	.word	0xe000ed00

0000c2cc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c2cc:	4915      	ldr	r1, [pc, #84]	; (c324 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c2ce:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    c2d0:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c2d4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    c2d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    c2da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    c2de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c2e2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    c2e4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    c2e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    c2ec:	4f0e      	ldr	r7, [pc, #56]	; (c328 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c2ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    c2f2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    c2f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    c2f6:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    c2f8:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    c2fc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    c2fe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c300:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c302:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    c306:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    c30a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    c30e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    c312:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    c316:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    c318:	f00f ff08 	bl	1c12c <configure_builtin_stack_guard>
    pop {r2, lr}
    c31c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    c320:	4770      	bx	lr
    c322:	0000      	.short	0x0000
    ldr r1, =_kernel
    c324:	20009a9c 	.word	0x20009a9c
    ldr v4, =_SCS_ICSR
    c328:	e000ed04 	.word	0xe000ed04

0000c32c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    c32c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    c330:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    c332:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    c336:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    c33a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    c33c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    c340:	2902      	cmp	r1, #2
    beq _oops
    c342:	d0ff      	beq.n	c344 <_oops>

0000c344 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    c344:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    c346:	f00f fee2 	bl	1c10e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    c34a:	bd01      	pop	{r0, pc}

0000c34c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    c34c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    c350:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    c352:	490d      	ldr	r1, [pc, #52]	; (c388 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    c354:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    c358:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    c35a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    c35e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    c362:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    c364:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    c368:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    c36c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c370:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    c374:	2300      	movs	r3, #0
    c376:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    c378:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    c37c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    c37e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    c380:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    c384:	4770      	bx	lr
    c386:	bf00      	nop
    c388:	0001ae51 	.word	0x0001ae51

0000c38c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c38c:	4b08      	ldr	r3, [pc, #32]	; (c3b0 <arch_switch_to_main_thread+0x24>)
    c38e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    c390:	6e83      	ldr	r3, [r0, #104]	; 0x68
    c392:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c396:	4610      	mov	r0, r2
    c398:	f381 8809 	msr	PSP, r1
    c39c:	2100      	movs	r1, #0
    c39e:	b663      	cpsie	if
    c3a0:	f381 8811 	msr	BASEPRI, r1
    c3a4:	f3bf 8f6f 	isb	sy
    c3a8:	2200      	movs	r2, #0
    c3aa:	2300      	movs	r3, #0
    c3ac:	f00e fd50 	bl	1ae50 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    c3b0:	20009a9c 	.word	0x20009a9c

0000c3b4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    c3b4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    c3b6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c3b8:	4a0b      	ldr	r2, [pc, #44]	; (c3e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c3ba:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    c3bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    c3be:	bf1e      	ittt	ne
	movne	r1, #0
    c3c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    c3c2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    c3c4:	f012 f8c9 	blne	1e55a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    c3c8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    c3ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    c3ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    c3d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    c3d6:	4905      	ldr	r1, [pc, #20]	; (c3ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    c3d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    c3da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    c3dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    c3de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    c3e2:	4903      	ldr	r1, [pc, #12]	; (c3f0 <_isr_wrapper+0x3c>)
	bx r1
    c3e4:	4708      	bx	r1
    c3e6:	0000      	.short	0x0000
	ldr r2, =_kernel
    c3e8:	20009a9c 	.word	0x20009a9c
	ldr r1, =_sw_isr_table
    c3ec:	0001eac4 	.word	0x0001eac4
	ldr r1, =z_arm_int_exit
    c3f0:	0000c3f5 	.word	0x0000c3f5

0000c3f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    c3f4:	4b04      	ldr	r3, [pc, #16]	; (c408 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    c3f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    c3f8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    c3fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    c3fc:	d003      	beq.n	c406 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    c3fe:	4903      	ldr	r1, [pc, #12]	; (c40c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    c400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    c404:	600a      	str	r2, [r1, #0]

0000c406 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    c406:	4770      	bx	lr
	ldr r3, =_kernel
    c408:	20009a9c 	.word	0x20009a9c
	ldr r1, =_SCS_ICSR
    c40c:	e000ed04 	.word	0xe000ed04

0000c410 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c414:	b086      	sub	sp, #24
    c416:	4606      	mov	r6, r0
    c418:	460d      	mov	r5, r1
    c41a:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    c41c:	2402      	movs	r4, #2
    c41e:	4b4b      	ldr	r3, [pc, #300]	; (c54c <mem_manage_fault.constprop.0+0x13c>)
    c420:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c424:	617b      	str	r3, [r7, #20]
    c426:	484a      	ldr	r0, [pc, #296]	; (c550 <mem_manage_fault.constprop.0+0x140>)
    c428:	613c      	str	r4, [r7, #16]
    c42a:	f107 0210 	add.w	r2, r7, #16
    c42e:	f00f fe81 	bl	1c134 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c432:	4b48      	ldr	r3, [pc, #288]	; (c554 <mem_manage_fault.constprop.0+0x144>)
    c434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c436:	06db      	lsls	r3, r3, #27
    c438:	d509      	bpl.n	c44e <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    c43a:	4b47      	ldr	r3, [pc, #284]	; (c558 <mem_manage_fault.constprop.0+0x148>)
    c43c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c440:	e9c7 4304 	strd	r4, r3, [r7, #16]
    c444:	4842      	ldr	r0, [pc, #264]	; (c550 <mem_manage_fault.constprop.0+0x140>)
    c446:	f107 0210 	add.w	r2, r7, #16
    c44a:	f00f fe73 	bl	1c134 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    c44e:	4b41      	ldr	r3, [pc, #260]	; (c554 <mem_manage_fault.constprop.0+0x144>)
    c450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c452:	0718      	lsls	r0, r3, #28
    c454:	d50a      	bpl.n	c46c <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    c456:	4b41      	ldr	r3, [pc, #260]	; (c55c <mem_manage_fault.constprop.0+0x14c>)
    c458:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c45c:	617b      	str	r3, [r7, #20]
    c45e:	2302      	movs	r3, #2
    c460:	483b      	ldr	r0, [pc, #236]	; (c550 <mem_manage_fault.constprop.0+0x140>)
    c462:	613b      	str	r3, [r7, #16]
    c464:	f107 0210 	add.w	r2, r7, #16
    c468:	f00f fe64 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c46c:	4c39      	ldr	r4, [pc, #228]	; (c554 <mem_manage_fault.constprop.0+0x144>)
    c46e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c470:	0799      	lsls	r1, r3, #30
    c472:	d522      	bpl.n	c4ba <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    c474:	46e8      	mov	r8, sp
    c476:	4b3a      	ldr	r3, [pc, #232]	; (c560 <mem_manage_fault.constprop.0+0x150>)
    c478:	f107 0210 	add.w	r2, r7, #16
    c47c:	617b      	str	r3, [r7, #20]
    c47e:	2302      	movs	r3, #2
    c480:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c484:	613b      	str	r3, [r7, #16]
    c486:	4832      	ldr	r0, [pc, #200]	; (c550 <mem_manage_fault.constprop.0+0x140>)
    c488:	f00f fe54 	bl	1c134 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    c48c:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    c48e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c490:	0612      	lsls	r2, r2, #24
    c492:	d512      	bpl.n	c4ba <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    c494:	b088      	sub	sp, #32
    c496:	466a      	mov	r2, sp
    c498:	4932      	ldr	r1, [pc, #200]	; (c564 <mem_manage_fault.constprop.0+0x154>)
    c49a:	482d      	ldr	r0, [pc, #180]	; (c550 <mem_manage_fault.constprop.0+0x140>)
    c49c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c4a0:	2303      	movs	r3, #3
    c4a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c4a6:	f842 3f10 	str.w	r3, [r2, #16]!
    c4aa:	f00f fe43 	bl	1c134 <z_log_msg_static_create.constprop.0>
    c4ae:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    c4b0:	b11e      	cbz	r6, c4ba <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    c4b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c4b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c4b8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    c4ba:	4b26      	ldr	r3, [pc, #152]	; (c554 <mem_manage_fault.constprop.0+0x144>)
    c4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c4be:	07db      	lsls	r3, r3, #31
    c4c0:	d50a      	bpl.n	c4d8 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    c4c2:	4b29      	ldr	r3, [pc, #164]	; (c568 <mem_manage_fault.constprop.0+0x158>)
    c4c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c4c8:	617b      	str	r3, [r7, #20]
    c4ca:	2302      	movs	r3, #2
    c4cc:	4820      	ldr	r0, [pc, #128]	; (c550 <mem_manage_fault.constprop.0+0x140>)
    c4ce:	613b      	str	r3, [r7, #16]
    c4d0:	f107 0210 	add.w	r2, r7, #16
    c4d4:	f00f fe2e 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c4d8:	4b1e      	ldr	r3, [pc, #120]	; (c554 <mem_manage_fault.constprop.0+0x144>)
    c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c4dc:	069e      	lsls	r6, r3, #26
    c4de:	d50a      	bpl.n	c4f6 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    c4e0:	4b22      	ldr	r3, [pc, #136]	; (c56c <mem_manage_fault.constprop.0+0x15c>)
    c4e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c4e6:	617b      	str	r3, [r7, #20]
    c4e8:	2302      	movs	r3, #2
    c4ea:	4819      	ldr	r0, [pc, #100]	; (c550 <mem_manage_fault.constprop.0+0x140>)
    c4ec:	613b      	str	r3, [r7, #16]
    c4ee:	f107 0210 	add.w	r2, r7, #16
    c4f2:	f00f fe1f 	bl	1c134 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c4f6:	4b17      	ldr	r3, [pc, #92]	; (c554 <mem_manage_fault.constprop.0+0x144>)
    c4f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c4fa:	06d4      	lsls	r4, r2, #27
    c4fc:	d402      	bmi.n	c504 <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    c4fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c500:	0790      	lsls	r0, r2, #30
    c502:	d511      	bpl.n	c528 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    c504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c506:	06d9      	lsls	r1, r3, #27
    c508:	d50e      	bpl.n	c528 <mem_manage_fault.constprop.0+0x118>
    c50a:	4919      	ldr	r1, [pc, #100]	; (c570 <mem_manage_fault.constprop.0+0x160>)
    c50c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
    c510:	4a18      	ldr	r2, [pc, #96]	; (c574 <mem_manage_fault.constprop.0+0x164>)
    c512:	4819      	ldr	r0, [pc, #100]	; (c578 <mem_manage_fault.constprop.0+0x168>)
    c514:	f00e fe8a 	bl	1b22c <assert_print>
    c518:	4818      	ldr	r0, [pc, #96]	; (c57c <mem_manage_fault.constprop.0+0x16c>)
    c51a:	f00e fe87 	bl	1b22c <assert_print>
    c51e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    c522:	4814      	ldr	r0, [pc, #80]	; (c574 <mem_manage_fault.constprop.0+0x164>)
    c524:	f00e fe7b 	bl	1b21e <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    c528:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c52a:	4b0a      	ldr	r3, [pc, #40]	; (c554 <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
    c52c:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c52e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c530:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    c532:	bf42      	ittt	mi
    c534:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    c536:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    c53a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    c53c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c53e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    c542:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    c544:	7028      	strb	r0, [r5, #0]
}
    c546:	46bd      	mov	sp, r7
    c548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c54c:	000205cd 	.word	0x000205cd
    c550:	0001ee24 	.word	0x0001ee24
    c554:	e000ed00 	.word	0xe000ed00
    c558:	000205e3 	.word	0x000205e3
    c55c:	00020616 	.word	0x00020616
    c560:	00020629 	.word	0x00020629
    c564:	00020641 	.word	0x00020641
    c568:	00020657 	.word	0x00020657
    c56c:	00020676 	.word	0x00020676
    c570:	000206df 	.word	0x000206df
    c574:	000206a5 	.word	0x000206a5
    c578:	0001f995 	.word	0x0001f995
    c57c:	00020729 	.word	0x00020729

0000c580 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    c580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c584:	b086      	sub	sp, #24
    c586:	4606      	mov	r6, r0
    c588:	460d      	mov	r5, r1
    c58a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    c58c:	2402      	movs	r4, #2
    c58e:	4b3e      	ldr	r3, [pc, #248]	; (c688 <bus_fault.constprop.0+0x108>)
    c590:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c594:	617b      	str	r3, [r7, #20]
    c596:	483d      	ldr	r0, [pc, #244]	; (c68c <bus_fault.constprop.0+0x10c>)
    c598:	613c      	str	r4, [r7, #16]
    c59a:	f107 0210 	add.w	r2, r7, #16
    c59e:	f00f fdc9 	bl	1c134 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    c5a2:	4b3b      	ldr	r3, [pc, #236]	; (c690 <bus_fault.constprop.0+0x110>)
    c5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c5a6:	04d9      	lsls	r1, r3, #19
    c5a8:	d509      	bpl.n	c5be <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    c5aa:	4b3a      	ldr	r3, [pc, #232]	; (c694 <bus_fault.constprop.0+0x114>)
    c5ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c5b0:	e9c7 4304 	strd	r4, r3, [r7, #16]
    c5b4:	4835      	ldr	r0, [pc, #212]	; (c68c <bus_fault.constprop.0+0x10c>)
    c5b6:	f107 0210 	add.w	r2, r7, #16
    c5ba:	f00f fdbb 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    c5be:	4b34      	ldr	r3, [pc, #208]	; (c690 <bus_fault.constprop.0+0x110>)
    c5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c5c2:	051a      	lsls	r2, r3, #20
    c5c4:	d50a      	bpl.n	c5dc <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    c5c6:	4b34      	ldr	r3, [pc, #208]	; (c698 <bus_fault.constprop.0+0x118>)
    c5c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c5cc:	617b      	str	r3, [r7, #20]
    c5ce:	2302      	movs	r3, #2
    c5d0:	482e      	ldr	r0, [pc, #184]	; (c68c <bus_fault.constprop.0+0x10c>)
    c5d2:	613b      	str	r3, [r7, #16]
    c5d4:	f107 0210 	add.w	r2, r7, #16
    c5d8:	f00f fdac 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    c5dc:	4c2c      	ldr	r4, [pc, #176]	; (c690 <bus_fault.constprop.0+0x110>)
    c5de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c5e0:	059b      	lsls	r3, r3, #22
    c5e2:	d522      	bpl.n	c62a <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    c5e4:	46e8      	mov	r8, sp
    c5e6:	4b2d      	ldr	r3, [pc, #180]	; (c69c <bus_fault.constprop.0+0x11c>)
    c5e8:	4828      	ldr	r0, [pc, #160]	; (c68c <bus_fault.constprop.0+0x10c>)
    c5ea:	617b      	str	r3, [r7, #20]
    c5ec:	2302      	movs	r3, #2
    c5ee:	f107 0210 	add.w	r2, r7, #16
    c5f2:	613b      	str	r3, [r7, #16]
    c5f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c5f8:	f00f fd9c 	bl	1c134 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    c5fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    c5fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c600:	0410      	lsls	r0, r2, #16
    c602:	d512      	bpl.n	c62a <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    c604:	b088      	sub	sp, #32
    c606:	466a      	mov	r2, sp
    c608:	4925      	ldr	r1, [pc, #148]	; (c6a0 <bus_fault.constprop.0+0x120>)
    c60a:	4820      	ldr	r0, [pc, #128]	; (c68c <bus_fault.constprop.0+0x10c>)
    c60c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c610:	2303      	movs	r3, #3
    c612:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c616:	f842 3f10 	str.w	r3, [r2, #16]!
    c61a:	f00f fd8b 	bl	1c134 <z_log_msg_static_create.constprop.0>
    c61e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    c620:	b11e      	cbz	r6, c62a <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    c622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c624:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    c628:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    c62a:	4b19      	ldr	r3, [pc, #100]	; (c690 <bus_fault.constprop.0+0x110>)
    c62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c62e:	0559      	lsls	r1, r3, #21
    c630:	d50a      	bpl.n	c648 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    c632:	4b1c      	ldr	r3, [pc, #112]	; (c6a4 <bus_fault.constprop.0+0x124>)
    c634:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c638:	617b      	str	r3, [r7, #20]
    c63a:	2302      	movs	r3, #2
    c63c:	4813      	ldr	r0, [pc, #76]	; (c68c <bus_fault.constprop.0+0x10c>)
    c63e:	613b      	str	r3, [r7, #16]
    c640:	f107 0210 	add.w	r2, r7, #16
    c644:	f00f fd76 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    c648:	4b11      	ldr	r3, [pc, #68]	; (c690 <bus_fault.constprop.0+0x110>)
    c64a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c64c:	05d2      	lsls	r2, r2, #23
    c64e:	d515      	bpl.n	c67c <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    c650:	4b15      	ldr	r3, [pc, #84]	; (c6a8 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    c652:	617b      	str	r3, [r7, #20]
    c654:	2302      	movs	r3, #2
    c656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c65a:	480c      	ldr	r0, [pc, #48]	; (c68c <bus_fault.constprop.0+0x10c>)
    c65c:	613b      	str	r3, [r7, #16]
    c65e:	f107 0210 	add.w	r2, r7, #16
    c662:	f00f fd67 	bl	1c134 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    c666:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c668:	4a09      	ldr	r2, [pc, #36]	; (c690 <bus_fault.constprop.0+0x110>)

	return reason;
}
    c66a:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c66c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c66e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    c672:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    c674:	7028      	strb	r0, [r5, #0]
}
    c676:	46bd      	mov	sp, r7
    c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    c67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c67e:	049b      	lsls	r3, r3, #18
    c680:	d5f1      	bpl.n	c666 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    c682:	4b0a      	ldr	r3, [pc, #40]	; (c6ac <bus_fault.constprop.0+0x12c>)
    c684:	e7e5      	b.n	c652 <bus_fault.constprop.0+0xd2>
    c686:	bf00      	nop
    c688:	0002078d 	.word	0x0002078d
    c68c:	0001ee24 	.word	0x0001ee24
    c690:	e000ed00 	.word	0xe000ed00
    c694:	000207a3 	.word	0x000207a3
    c698:	00020616 	.word	0x00020616
    c69c:	000207b4 	.word	0x000207b4
    c6a0:	000207cd 	.word	0x000207cd
    c6a4:	000207e2 	.word	0x000207e2
    c6a8:	000207fd 	.word	0x000207fd
    c6ac:	00020676 	.word	0x00020676

0000c6b0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    c6b0:	b510      	push	{r4, lr}
    c6b2:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    c6b4:	2402      	movs	r4, #2
    c6b6:	4b3a      	ldr	r3, [pc, #232]	; (c7a0 <usage_fault.constprop.0+0xf0>)
    c6b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c6bc:	4839      	ldr	r0, [pc, #228]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c6be:	aa04      	add	r2, sp, #16
    c6c0:	9305      	str	r3, [sp, #20]
    c6c2:	9404      	str	r4, [sp, #16]
    c6c4:	f00f fd36 	bl	1c134 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c6c8:	4b37      	ldr	r3, [pc, #220]	; (c7a8 <usage_fault.constprop.0+0xf8>)
    c6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c6cc:	019b      	lsls	r3, r3, #6
    c6ce:	d508      	bpl.n	c6e2 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    c6d0:	4b36      	ldr	r3, [pc, #216]	; (c7ac <usage_fault.constprop.0+0xfc>)
    c6d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c6d6:	4833      	ldr	r0, [pc, #204]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c6d8:	aa04      	add	r2, sp, #16
    c6da:	e9cd 4304 	strd	r4, r3, [sp, #16]
    c6de:	f00f fd29 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c6e2:	4b31      	ldr	r3, [pc, #196]	; (c7a8 <usage_fault.constprop.0+0xf8>)
    c6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c6e6:	01dc      	lsls	r4, r3, #7
    c6e8:	d509      	bpl.n	c6fe <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    c6ea:	4b31      	ldr	r3, [pc, #196]	; (c7b0 <usage_fault.constprop.0+0x100>)
    c6ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c6f0:	9305      	str	r3, [sp, #20]
    c6f2:	2302      	movs	r3, #2
    c6f4:	482b      	ldr	r0, [pc, #172]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c6f6:	aa04      	add	r2, sp, #16
    c6f8:	9304      	str	r3, [sp, #16]
    c6fa:	f00f fd1b 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    c6fe:	4b2a      	ldr	r3, [pc, #168]	; (c7a8 <usage_fault.constprop.0+0xf8>)
    c700:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    c702:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    c706:	d009      	beq.n	c71c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    c708:	2402      	movs	r4, #2
    c70a:	4b2a      	ldr	r3, [pc, #168]	; (c7b4 <usage_fault.constprop.0+0x104>)
    c70c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c710:	4824      	ldr	r0, [pc, #144]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c712:	aa04      	add	r2, sp, #16
    c714:	9305      	str	r3, [sp, #20]
    c716:	9404      	str	r4, [sp, #16]
    c718:	f00f fd0c 	bl	1c134 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c71c:	4b22      	ldr	r3, [pc, #136]	; (c7a8 <usage_fault.constprop.0+0xf8>)
    c71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c720:	0318      	lsls	r0, r3, #12
    c722:	d509      	bpl.n	c738 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    c724:	4b24      	ldr	r3, [pc, #144]	; (c7b8 <usage_fault.constprop.0+0x108>)
    c726:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c72a:	9305      	str	r3, [sp, #20]
    c72c:	2302      	movs	r3, #2
    c72e:	481d      	ldr	r0, [pc, #116]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c730:	aa04      	add	r2, sp, #16
    c732:	9304      	str	r3, [sp, #16]
    c734:	f00f fcfe 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c738:	4b1b      	ldr	r3, [pc, #108]	; (c7a8 <usage_fault.constprop.0+0xf8>)
    c73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c73c:	0359      	lsls	r1, r3, #13
    c73e:	d509      	bpl.n	c754 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    c740:	4b1e      	ldr	r3, [pc, #120]	; (c7bc <usage_fault.constprop.0+0x10c>)
    c742:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c746:	9305      	str	r3, [sp, #20]
    c748:	2302      	movs	r3, #2
    c74a:	4816      	ldr	r0, [pc, #88]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c74c:	aa04      	add	r2, sp, #16
    c74e:	9304      	str	r3, [sp, #16]
    c750:	f00f fcf0 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c754:	4b14      	ldr	r3, [pc, #80]	; (c7a8 <usage_fault.constprop.0+0xf8>)
    c756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c758:	039a      	lsls	r2, r3, #14
    c75a:	d509      	bpl.n	c770 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    c75c:	4b18      	ldr	r3, [pc, #96]	; (c7c0 <usage_fault.constprop.0+0x110>)
    c75e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c762:	9305      	str	r3, [sp, #20]
    c764:	2302      	movs	r3, #2
    c766:	480f      	ldr	r0, [pc, #60]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c768:	aa04      	add	r2, sp, #16
    c76a:	9304      	str	r3, [sp, #16]
    c76c:	f00f fce2 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c770:	4b0d      	ldr	r3, [pc, #52]	; (c7a8 <usage_fault.constprop.0+0xf8>)
    c772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c774:	03db      	lsls	r3, r3, #15
    c776:	d509      	bpl.n	c78c <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    c778:	4b12      	ldr	r3, [pc, #72]	; (c7c4 <usage_fault.constprop.0+0x114>)
    c77a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c77e:	9305      	str	r3, [sp, #20]
    c780:	2302      	movs	r3, #2
    c782:	4808      	ldr	r0, [pc, #32]	; (c7a4 <usage_fault.constprop.0+0xf4>)
    c784:	aa04      	add	r2, sp, #16
    c786:	9304      	str	r3, [sp, #16]
    c788:	f00f fcd4 	bl	1c134 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c78c:	4a06      	ldr	r2, [pc, #24]	; (c7a8 <usage_fault.constprop.0+0xf8>)

	return reason;
}
    c78e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c790:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c792:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    c796:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    c79a:	6293      	str	r3, [r2, #40]	; 0x28
}
    c79c:	b006      	add	sp, #24
    c79e:	bd10      	pop	{r4, pc}
    c7a0:	00020815 	.word	0x00020815
    c7a4:	0001ee24 	.word	0x0001ee24
    c7a8:	e000ed00 	.word	0xe000ed00
    c7ac:	0002082d 	.word	0x0002082d
    c7b0:	00020840 	.word	0x00020840
    c7b4:	0002085a 	.word	0x0002085a
    c7b8:	00020884 	.word	0x00020884
    c7bc:	000208a2 	.word	0x000208a2
    c7c0:	000208c7 	.word	0x000208c7
    c7c4:	000208e1 	.word	0x000208e1

0000c7c8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    c7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7cc:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c7ce:	4b90      	ldr	r3, [pc, #576]	; (ca10 <z_arm_fault+0x248>)
{
    c7d0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c7d2:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
    c7d6:	4688      	mov	r8, r1
    c7d8:	4616      	mov	r6, r2
    c7da:	2300      	movs	r3, #0
    c7dc:	af00      	add	r7, sp, #0
    c7de:	f3ca 0908 	ubfx	r9, sl, #0, #9
    c7e2:	f383 8811 	msr	BASEPRI, r3
    c7e6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    c7ea:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    c7ee:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    c7f2:	d00e      	beq.n	c812 <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    c7f4:	4987      	ldr	r1, [pc, #540]	; (ca14 <z_arm_fault+0x24c>)
    c7f6:	f44f 6384 	mov.w	r3, #1056	; 0x420
    c7fa:	4a87      	ldr	r2, [pc, #540]	; (ca18 <z_arm_fault+0x250>)
    c7fc:	4887      	ldr	r0, [pc, #540]	; (ca1c <z_arm_fault+0x254>)
    c7fe:	f00e fd15 	bl	1b22c <assert_print>
    c802:	4887      	ldr	r0, [pc, #540]	; (ca20 <z_arm_fault+0x258>)
    c804:	f00e fd12 	bl	1b22c <assert_print>
    c808:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
    c80c:	4882      	ldr	r0, [pc, #520]	; (ca18 <z_arm_fault+0x250>)
    c80e:	f00e fd06 	bl	1b21e <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    c812:	f012 0401 	ands.w	r4, r2, #1
    c816:	d1ed      	bne.n	c7f4 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    c818:	0653      	lsls	r3, r2, #25
    c81a:	d404      	bmi.n	c826 <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    c81c:	0710      	lsls	r0, r2, #28
    c81e:	d40f      	bmi.n	c840 <z_arm_fault+0x78>
			*nested_exc = true;
    c820:	f04f 0801 	mov.w	r8, #1
    c824:	e00f      	b.n	c846 <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
    c826:	4b7f      	ldr	r3, [pc, #508]	; (ca24 <z_arm_fault+0x25c>)
    c828:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c82c:	61fb      	str	r3, [r7, #28]
    c82e:	2302      	movs	r3, #2
    c830:	487d      	ldr	r0, [pc, #500]	; (ca28 <z_arm_fault+0x260>)
    c832:	61bb      	str	r3, [r7, #24]
    c834:	f107 0218 	add.w	r2, r7, #24
    c838:	f00f fc7c 	bl	1c134 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    c83c:	0771      	lsls	r1, r6, #29
    c83e:	d500      	bpl.n	c842 <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
    c840:	4645      	mov	r5, r8
	*nested_exc = false;
    c842:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
    c846:	2d00      	cmp	r5, #0
    c848:	d0d4      	beq.n	c7f4 <z_arm_fault+0x2c>
	*recoverable = false;
    c84a:	2300      	movs	r3, #0
    c84c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    c84e:	f1a9 0303 	sub.w	r3, r9, #3
    c852:	2b09      	cmp	r3, #9
    c854:	f200 80ba 	bhi.w	c9cc <z_arm_fault+0x204>
    c858:	e8df f003 	tbb	[pc, r3]
    c85c:	90b0ad05 	.word	0x90b0ad05
    c860:	b8b8b8b8 	.word	0xb8b8b8b8
    c864:	b3b8      	.short	0xb3b8
	PR_FAULT_INFO("***** HARD FAULT *****");
    c866:	46e9      	mov	r9, sp
    c868:	f04f 0a02 	mov.w	sl, #2
    c86c:	4b6f      	ldr	r3, [pc, #444]	; (ca2c <z_arm_fault+0x264>)
    c86e:	f107 0218 	add.w	r2, r7, #24
    c872:	61fb      	str	r3, [r7, #28]
    c874:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c878:	486b      	ldr	r0, [pc, #428]	; (ca28 <z_arm_fault+0x260>)
    c87a:	f8c7 a018 	str.w	sl, [r7, #24]
    c87e:	f00f fc59 	bl	1c134 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    c882:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c884:	4e62      	ldr	r6, [pc, #392]	; (ca10 <z_arm_fault+0x248>)
	*recoverable = false;
    c886:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c888:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    c88a:	079a      	lsls	r2, r3, #30
    c88c:	d50a      	bpl.n	c8a4 <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
    c88e:	4b68      	ldr	r3, [pc, #416]	; (ca30 <z_arm_fault+0x268>)
		PR_EXC("  Debug event");
    c890:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    c894:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c898:	4863      	ldr	r0, [pc, #396]	; (ca28 <z_arm_fault+0x260>)
    c89a:	f107 0218 	add.w	r2, r7, #24
    c89e:	f00f fc49 	bl	1c134 <z_log_msg_static_create.constprop.0>
}
    c8a2:	e041      	b.n	c928 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    c8a4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	da01      	bge.n	c8ae <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
    c8aa:	4b62      	ldr	r3, [pc, #392]	; (ca34 <z_arm_fault+0x26c>)
    c8ac:	e7f0      	b.n	c890 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    c8ae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    c8b0:	005b      	lsls	r3, r3, #1
    c8b2:	d573      	bpl.n	c99c <z_arm_fault+0x1d4>
		PR_EXC("  Fault escalation (see below)");
    c8b4:	4b60      	ldr	r3, [pc, #384]	; (ca38 <z_arm_fault+0x270>)
    c8b6:	f107 0218 	add.w	r2, r7, #24
    c8ba:	e9c7 a306 	strd	sl, r3, [r7, #24]
    c8be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c8c2:	4859      	ldr	r0, [pc, #356]	; (ca28 <z_arm_fault+0x260>)
    c8c4:	f00f fc36 	bl	1c134 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c8c8:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    c8ca:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c8cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c8d0:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c8d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c8d6:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c8da:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    c8dc:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c8e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c8e4:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c8e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c8ea:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    c8ee:	f64d 7302 	movw	r3, #57090	; 0xdf02
    c8f2:	429a      	cmp	r2, r3
    c8f4:	d008      	beq.n	c908 <z_arm_fault+0x140>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    c8f6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c8f8:	b2db      	uxtb	r3, r3
    c8fa:	b393      	cbz	r3, c962 <z_arm_fault+0x19a>
			reason = mem_manage_fault(esf, 1, recoverable);
    c8fc:	2001      	movs	r0, #1
    c8fe:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    c900:	f7ff fd86 	bl	c410 <mem_manage_fault.constprop.0>
    c904:	4604      	mov	r4, r0
		break;
    c906:	e00f      	b.n	c928 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    c908:	b088      	sub	sp, #32
    c90a:	682b      	ldr	r3, [r5, #0]
    c90c:	466a      	mov	r2, sp
    c90e:	494b      	ldr	r1, [pc, #300]	; (ca3c <z_arm_fault+0x274>)
    c910:	4845      	ldr	r0, [pc, #276]	; (ca28 <z_arm_fault+0x260>)
    c912:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c916:	2303      	movs	r3, #3
    c918:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c91c:	f842 3f10 	str.w	r3, [r2, #16]!
    c920:	f00f fc08 	bl	1c134 <z_log_msg_static_create.constprop.0>
    c924:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    c926:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    c928:	79fb      	ldrb	r3, [r7, #7]
    c92a:	b9b3      	cbnz	r3, c95a <z_arm_fault+0x192>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    c92c:	2220      	movs	r2, #32
    c92e:	4629      	mov	r1, r5
    c930:	f107 0008 	add.w	r0, r7, #8
    c934:	f00f fc89 	bl	1c24a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c93a:	f1b8 0f00 	cmp.w	r8, #0
    c93e:	d061      	beq.n	ca04 <z_arm_fault+0x23c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    c940:	f3c3 0208 	ubfx	r2, r3, #0, #9
    c944:	b922      	cbnz	r2, c950 <z_arm_fault+0x188>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    c946:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    c94a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c94e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    c950:	4620      	mov	r0, r4
    c952:	f107 0108 	add.w	r1, r7, #8
    c956:	f7ff fbb7 	bl	c0c8 <z_arm_fatal_error>
}
    c95a:	3728      	adds	r7, #40	; 0x28
    c95c:	46bd      	mov	sp, r7
    c95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    c962:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c964:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    c968:	d004      	beq.n	c974 <z_arm_fault+0x1ac>
			reason = bus_fault(esf, 1, recoverable);
    c96a:	2001      	movs	r0, #1
    c96c:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    c96e:	f7ff fe07 	bl	c580 <bus_fault.constprop.0>
    c972:	e7c7      	b.n	c904 <z_arm_fault+0x13c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    c974:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c97a:	d302      	bcc.n	c982 <z_arm_fault+0x1ba>
		reason = usage_fault(esf);
    c97c:	f7ff fe98 	bl	c6b0 <usage_fault.constprop.0>
    c980:	e7c0      	b.n	c904 <z_arm_fault+0x13c>
			__ASSERT(0,
    c982:	492f      	ldr	r1, [pc, #188]	; (ca40 <z_arm_fault+0x278>)
    c984:	f240 23f2 	movw	r3, #754	; 0x2f2
    c988:	4a23      	ldr	r2, [pc, #140]	; (ca18 <z_arm_fault+0x250>)
    c98a:	4824      	ldr	r0, [pc, #144]	; (ca1c <z_arm_fault+0x254>)
    c98c:	f00e fc4e 	bl	1b22c <assert_print>
    c990:	482c      	ldr	r0, [pc, #176]	; (ca44 <z_arm_fault+0x27c>)
    c992:	f00e fc4b 	bl	1b22c <assert_print>
    c996:	f240 21f2 	movw	r1, #754	; 0x2f2
    c99a:	e737      	b.n	c80c <z_arm_fault+0x44>
		__ASSERT(0,
    c99c:	4928      	ldr	r1, [pc, #160]	; (ca40 <z_arm_fault+0x278>)
    c99e:	f240 23f6 	movw	r3, #758	; 0x2f6
    c9a2:	4a1d      	ldr	r2, [pc, #116]	; (ca18 <z_arm_fault+0x250>)
    c9a4:	481d      	ldr	r0, [pc, #116]	; (ca1c <z_arm_fault+0x254>)
    c9a6:	f00e fc41 	bl	1b22c <assert_print>
    c9aa:	4827      	ldr	r0, [pc, #156]	; (ca48 <z_arm_fault+0x280>)
    c9ac:	f00e fc3e 	bl	1b22c <assert_print>
    c9b0:	f240 21f6 	movw	r1, #758	; 0x2f6
    c9b4:	e72a      	b.n	c80c <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    c9b6:	2000      	movs	r0, #0
    c9b8:	1df9      	adds	r1, r7, #7
    c9ba:	e7a1      	b.n	c900 <z_arm_fault+0x138>
		reason = bus_fault(esf, 0, recoverable);
    c9bc:	2000      	movs	r0, #0
    c9be:	1df9      	adds	r1, r7, #7
    c9c0:	e7d5      	b.n	c96e <z_arm_fault+0x1a6>
	PR_FAULT_INFO(
    c9c2:	4b22      	ldr	r3, [pc, #136]	; (ca4c <z_arm_fault+0x284>)
    c9c4:	61fb      	str	r3, [r7, #28]
    c9c6:	2302      	movs	r3, #2
    c9c8:	61bb      	str	r3, [r7, #24]
    c9ca:	e763      	b.n	c894 <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
    c9cc:	4a20      	ldr	r2, [pc, #128]	; (ca50 <z_arm_fault+0x288>)
    c9ce:	466e      	mov	r6, sp
    c9d0:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
    c9d4:	b08a      	sub	sp, #40	; 0x28
    c9d6:	4b1f      	ldr	r3, [pc, #124]	; (ca54 <z_arm_fault+0x28c>)
    c9d8:	bf18      	it	ne
    c9da:	4613      	movne	r3, r2
    c9dc:	466a      	mov	r2, sp
    c9de:	491e      	ldr	r1, [pc, #120]	; (ca58 <z_arm_fault+0x290>)
    c9e0:	4811      	ldr	r0, [pc, #68]	; (ca28 <z_arm_fault+0x260>)
    c9e2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c9e6:	f1a9 0310 	sub.w	r3, r9, #16
    c9ea:	61d3      	str	r3, [r2, #28]
    c9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
    c9f0:	8413      	strh	r3, [r2, #32]
    c9f2:	4b1a      	ldr	r3, [pc, #104]	; (ca5c <z_arm_fault+0x294>)
    c9f4:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    c9f8:	f842 3f10 	str.w	r3, [r2, #16]!
    c9fc:	f00f fb9a 	bl	1c134 <z_log_msg_static_create.constprop.0>
    ca00:	46b5      	mov	sp, r6
}
    ca02:	e791      	b.n	c928 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    ca04:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    ca08:	f023 0301 	bic.w	r3, r3, #1
    ca0c:	e79f      	b.n	c94e <z_arm_fault+0x186>
    ca0e:	bf00      	nop
    ca10:	e000ed00 	.word	0xe000ed00
    ca14:	0002093a 	.word	0x0002093a
    ca18:	000206a5 	.word	0x000206a5
    ca1c:	0001f995 	.word	0x0001f995
    ca20:	0002094d 	.word	0x0002094d
    ca24:	0002098b 	.word	0x0002098b
    ca28:	0001ee24 	.word	0x0001ee24
    ca2c:	000209ae 	.word	0x000209ae
    ca30:	000209c5 	.word	0x000209c5
    ca34:	000209e6 	.word	0x000209e6
    ca38:	000209f4 	.word	0x000209f4
    ca3c:	00020a13 	.word	0x00020a13
    ca40:	00022960 	.word	0x00022960
    ca44:	00020a2f 	.word	0x00020a2f
    ca48:	00020a53 	.word	0x00020a53
    ca4c:	00020a83 	.word	0x00020a83
    ca50:	00020921 	.word	0x00020921
    ca54:	0002090c 	.word	0x0002090c
    ca58:	00020aa7 	.word	0x00020aa7
    ca5c:	01000004 	.word	0x01000004

0000ca60 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    ca60:	4b04      	ldr	r3, [pc, #16]	; (ca74 <z_arm_fault_init+0x14>)
    ca62:	695a      	ldr	r2, [r3, #20]
    ca64:	f042 0210 	orr.w	r2, r2, #16
    ca68:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    ca6a:	695a      	ldr	r2, [r3, #20]
    ca6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    ca70:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    ca72:	4770      	bx	lr
    ca74:	e000ed00 	.word	0xe000ed00

0000ca78 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    ca78:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    ca7c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    ca80:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    ca82:	4672      	mov	r2, lr
	bl z_arm_fault
    ca84:	f7ff fea0 	bl	c7c8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    ca88:	bd01      	pop	{r0, pc}
    ca8a:	bf00      	nop

0000ca8c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    ca8c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ca8e:	2120      	movs	r1, #32
    ca90:	4803      	ldr	r0, [pc, #12]	; (caa0 <z_arm_interrupt_init+0x14>)
    ca92:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    ca94:	3301      	adds	r3, #1
    ca96:	2b45      	cmp	r3, #69	; 0x45
    ca98:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    ca9c:	d1f9      	bne.n	ca92 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    ca9e:	4770      	bx	lr
    caa0:	e000e100 	.word	0xe000e100

0000caa4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    caa4:	2000      	movs	r0, #0
    msr CONTROL, r0
    caa6:	f380 8814 	msr	CONTROL, r0
    isb
    caaa:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    caae:	2000      	movs	r0, #0
    msr MSPLIM, r0
    cab0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    cab4:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    cab8:	f7fd fd8a 	bl	a5d0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    cabc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    cabe:	490e      	ldr	r1, [pc, #56]	; (caf8 <__start+0x54>)
    str r0, [r1]
    cac0:	6008      	str	r0, [r1, #0]
    dsb
    cac2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    cac6:	480d      	ldr	r0, [pc, #52]	; (cafc <__start+0x58>)
    msr msp, r0
    cac8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    cacc:	f000 f83e 	bl	cb4c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cad0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cad2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    cad6:	480a      	ldr	r0, [pc, #40]	; (cb00 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    cad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    cadc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    cade:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    cae2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    cae6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    cae8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    caea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    caee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    caf2:	f7ff fbb5 	bl	c260 <z_arm_prep_c>
    caf6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    caf8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    cafc:	2000c3b0 	.word	0x2000c3b0
    ldr r0, =z_interrupt_stacks
    cb00:	2000b670 	.word	0x2000b670

0000cb04 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    cb04:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    cb08:	4905      	ldr	r1, [pc, #20]	; (cb20 <sys_arch_reboot+0x1c>)
    cb0a:	4b06      	ldr	r3, [pc, #24]	; (cb24 <sys_arch_reboot+0x20>)
    cb0c:	68ca      	ldr	r2, [r1, #12]
    cb0e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    cb12:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    cb14:	60cb      	str	r3, [r1, #12]
    cb16:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    cb1a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    cb1c:	e7fd      	b.n	cb1a <sys_arch_reboot+0x16>
    cb1e:	bf00      	nop
    cb20:	e000ed00 	.word	0xe000ed00
    cb24:	05fa0004 	.word	0x05fa0004

0000cb28 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    cb28:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    cb2a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    cb2c:	4906      	ldr	r1, [pc, #24]	; (cb48 <z_arm_clear_arm_mpu_config+0x20>)
    cb2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    cb32:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    cb36:	4293      	cmp	r3, r2
    cb38:	db00      	blt.n	cb3c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    cb3a:	4770      	bx	lr
  mpu->RNR = rnr;
    cb3c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    cb40:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    cb44:	3301      	adds	r3, #1
    cb46:	e7f6      	b.n	cb36 <z_arm_clear_arm_mpu_config+0xe>
    cb48:	e000ed00 	.word	0xe000ed00

0000cb4c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    cb4c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    cb4e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    cb50:	2400      	movs	r4, #0
    cb52:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    cb56:	f7ff ffe7 	bl	cb28 <z_arm_clear_arm_mpu_config>
    cb5a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    cb5c:	f04f 30ff 	mov.w	r0, #4294967295
    cb60:	4a0c      	ldr	r2, [pc, #48]	; (cb94 <z_arm_init_arch_hw_at_boot+0x48>)
    cb62:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    cb66:	3301      	adds	r3, #1
    cb68:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    cb6a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    cb6e:	d1f8      	bne.n	cb62 <z_arm_init_arch_hw_at_boot+0x16>
    cb70:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    cb72:	f04f 30ff 	mov.w	r0, #4294967295
    cb76:	4a07      	ldr	r2, [pc, #28]	; (cb94 <z_arm_init_arch_hw_at_boot+0x48>)
    cb78:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    cb7c:	3301      	adds	r3, #1
    cb7e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    cb80:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    cb84:	d1f8      	bne.n	cb78 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    cb86:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    cb88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb8c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    cb90:	bd10      	pop	{r4, pc}
    cb92:	bf00      	nop
    cb94:	e000e100 	.word	0xe000e100

0000cb98 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    cb98:	4b08      	ldr	r3, [pc, #32]	; (cbbc <z_impl_k_thread_abort+0x24>)
    cb9a:	689b      	ldr	r3, [r3, #8]
    cb9c:	4283      	cmp	r3, r0
    cb9e:	d10b      	bne.n	cbb8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    cba0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    cba4:	b143      	cbz	r3, cbb8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cba6:	4b06      	ldr	r3, [pc, #24]	; (cbc0 <z_impl_k_thread_abort+0x28>)
    cba8:	685a      	ldr	r2, [r3, #4]
    cbaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    cbae:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    cbb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    cbb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    cbb6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    cbb8:	f00c bfba 	b.w	19b30 <z_thread_abort>
    cbbc:	20009a9c 	.word	0x20009a9c
    cbc0:	e000ed00 	.word	0xe000ed00

0000cbc4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    cbc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    cbc6:	4c09      	ldr	r4, [pc, #36]	; (cbec <z_arm_configure_static_mpu_regions+0x28>)
    cbc8:	4a09      	ldr	r2, [pc, #36]	; (cbf0 <z_arm_configure_static_mpu_regions+0x2c>)
    cbca:	4623      	mov	r3, r4
    cbcc:	2101      	movs	r1, #1
    cbce:	4809      	ldr	r0, [pc, #36]	; (cbf4 <z_arm_configure_static_mpu_regions+0x30>)
    cbd0:	f000 f92a 	bl	ce28 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    cbd4:	2300      	movs	r3, #0
    cbd6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    cbd8:	4b07      	ldr	r3, [pc, #28]	; (cbf8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    cbda:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    cbdc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    cbde:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    cbe0:	9301      	str	r3, [sp, #4]
    cbe2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    cbe4:	f000 f944 	bl	ce70 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    cbe8:	b004      	add	sp, #16
    cbea:	bd10      	pop	{r4, pc}
    cbec:	20070000 	.word	0x20070000
    cbf0:	20008000 	.word	0x20008000
    cbf4:	0001f134 	.word	0x0001f134
    cbf8:	20008738 	.word	0x20008738

0000cbfc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    cbfc:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    cbfe:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    cc00:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    cc02:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    cc06:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    cc0a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    cc0c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    cc0e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    cc10:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    cc14:	4905      	ldr	r1, [pc, #20]	; (cc2c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    cc16:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    cc1a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    cc1e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    cc22:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    cc26:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    cc2a:	bd10      	pop	{r4, pc}
    cc2c:	e000ed00 	.word	0xe000ed00

0000cc30 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    cc30:	b580      	push	{r7, lr}
    cc32:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    cc34:	b088      	sub	sp, #32
    cc36:	466a      	mov	r2, sp
    cc38:	4b07      	ldr	r3, [pc, #28]	; (cc58 <region_allocate_and_init.part.0+0x28>)
    cc3a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    cc3e:	2303      	movs	r3, #3
    cc40:	f842 3f10 	str.w	r3, [r2, #16]!
    cc44:	2300      	movs	r3, #0
    cc46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc4a:	4804      	ldr	r0, [pc, #16]	; (cc5c <region_allocate_and_init.part.0+0x2c>)
    cc4c:	f7fe f856 	bl	acfc <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    cc50:	f06f 0015 	mvn.w	r0, #21
    cc54:	46bd      	mov	sp, r7
    cc56:	bd80      	pop	{r7, pc}
    cc58:	00020abe 	.word	0x00020abe
    cc5c:	0001ee0c 	.word	0x0001ee0c

0000cc60 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc64:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    cc66:	4606      	mov	r6, r0
    cc68:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    cc6c:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    cc6e:	4d5f      	ldr	r5, [pc, #380]	; (cdec <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    cc70:	af00      	add	r7, sp, #0
    cc72:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    cc74:	687b      	ldr	r3, [r7, #4]
    cc76:	4599      	cmp	r9, r3
    cc78:	da35      	bge.n	cce6 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    cc7a:	f8d6 8004 	ldr.w	r8, [r6, #4]
    cc7e:	f1b8 0f00 	cmp.w	r8, #0
    cc82:	d054      	beq.n	cd2e <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    cc84:	f1b8 0f1f 	cmp.w	r8, #31
    cc88:	d91b      	bls.n	ccc2 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    cc8a:	f018 0f1f 	tst.w	r8, #31
    cc8e:	d118      	bne.n	ccc2 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    cc90:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    cc94:	f01b 0f1f 	tst.w	fp, #31
    cc98:	d113      	bne.n	ccc2 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    cc9a:	4658      	mov	r0, fp
    cc9c:	f00f fa4f 	bl	1c13e <arm_cmse_mpu_region_get>
    cca0:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    cca2:	eb08 000b 	add.w	r0, r8, fp
    cca6:	3801      	subs	r0, #1
    cca8:	f00f fa49 	bl	1c13e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ccac:	4582      	cmp	sl, r0
    ccae:	d01f      	beq.n	ccf0 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    ccb0:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    ccb4:	466c      	mov	r4, sp
    ccb6:	b088      	sub	sp, #32
    ccb8:	466a      	mov	r2, sp
    ccba:	494d      	ldr	r1, [pc, #308]	; (cdf0 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    ccbc:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    ccc0:	e005      	b.n	ccce <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    ccc2:	466c      	mov	r4, sp
    ccc4:	b088      	sub	sp, #32
    ccc6:	466a      	mov	r2, sp
    ccc8:	4b4a      	ldr	r3, [pc, #296]	; (cdf4 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    ccca:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    ccce:	2303      	movs	r3, #3
    ccd0:	f842 3f10 	str.w	r3, [r2, #16]!
    ccd4:	2300      	movs	r3, #0
    ccd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ccda:	4847      	ldr	r0, [pc, #284]	; (cdf8 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    ccdc:	f7fe f80e 	bl	acfc <z_impl_z_log_msg_static_create>
    cce0:	46a5      	mov	sp, r4
			return -EINVAL;
    cce2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    cce6:	4620      	mov	r0, r4
    cce8:	371c      	adds	r7, #28
    ccea:	46bd      	mov	sp, r7
    ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    ccf0:	f11a 0f16 	cmn.w	sl, #22
    ccf4:	d0de      	beq.n	ccb4 <mpu_configure_regions_and_partition.constprop.0+0x54>
    ccf6:	4554      	cmp	r4, sl
    ccf8:	dddc      	ble.n	ccb4 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    ccfa:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    ccfe:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    cd02:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    cd06:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    cd0a:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    cd0e:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    cd12:	e9d6 2100 	ldrd	r2, r1, [r6]
    cd16:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    cd18:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    cd1a:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    cd1e:	d11e      	bne.n	cd5e <mpu_configure_regions_and_partition.constprop.0+0xfe>
    cd20:	45d8      	cmp	r8, fp
    cd22:	d108      	bne.n	cd36 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    cd24:	4631      	mov	r1, r6
    cd26:	fa5f f08a 	uxtb.w	r0, sl
    cd2a:	f00f fa11 	bl	1c150 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    cd2e:	f109 0901 	add.w	r9, r9, #1
    cd32:	360c      	adds	r6, #12
    cd34:	e79e      	b.n	cc74 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    cd36:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    cd3a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    cd3e:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    cd42:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    cd46:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    cd48:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    cd4a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    cd4e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    cd50:	f00f f9fe 	bl	1c150 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    cd54:	f110 0f16 	cmn.w	r0, #22
    cd58:	d0c3      	beq.n	cce2 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    cd5a:	1c44      	adds	r4, r0, #1
    cd5c:	e7e7      	b.n	cd2e <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    cd5e:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    cd60:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    cd62:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    cd64:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    cd68:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    cd6c:	d108      	bne.n	cd80 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    cd6e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    cd72:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    cd74:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    cd78:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    cd7a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    cd7e:	e7e7      	b.n	cd50 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    cd80:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    cd84:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    cd88:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    cd8a:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    cd8e:	4631      	mov	r1, r6
    cd90:	f00f f9de 	bl	1c150 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    cd94:	f110 0f16 	cmn.w	r0, #22
    cd98:	d0a3      	beq.n	cce2 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    cd9a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    cd9e:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    cda2:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    cda4:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    cda8:	f362 0304 	bfi	r3, r2, #0, #5
    cdac:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    cdae:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    cdb2:	7c3a      	ldrb	r2, [r7, #16]
    cdb4:	085b      	lsrs	r3, r3, #1
    cdb6:	f363 1247 	bfi	r2, r3, #5, #3
    cdba:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    cdbc:	e9d6 3200 	ldrd	r3, r2, [r6]
    cdc0:	4413      	add	r3, r2
    cdc2:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    cdc4:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    cdc8:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    cdca:	4443      	add	r3, r8
    cdcc:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    cdd0:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    cdd2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    cdd6:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    cdd8:	617b      	str	r3, [r7, #20]
    cdda:	d902      	bls.n	cde2 <mpu_configure_regions_and_partition.constprop.0+0x182>
    cddc:	f7ff ff28 	bl	cc30 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    cde0:	e7b8      	b.n	cd54 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    cde2:	f107 0108 	add.w	r1, r7, #8
    cde6:	f7ff ff09 	bl	cbfc <region_init>
    cdea:	e7b6      	b.n	cd5a <mpu_configure_regions_and_partition.constprop.0+0xfa>
    cdec:	e000ed00 	.word	0xe000ed00
    cdf0:	00020b07 	.word	0x00020b07
    cdf4:	00020ae4 	.word	0x00020ae4
    cdf8:	0001ee0c 	.word	0x0001ee0c

0000cdfc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    cdfc:	2205      	movs	r2, #5
    cdfe:	4b04      	ldr	r3, [pc, #16]	; (ce10 <arm_core_mpu_enable+0x14>)
    ce00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    ce04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ce08:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    ce0c:	4770      	bx	lr
    ce0e:	bf00      	nop
    ce10:	e000ed00 	.word	0xe000ed00

0000ce14 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    ce14:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    ce18:	2200      	movs	r2, #0
    ce1a:	4b02      	ldr	r3, [pc, #8]	; (ce24 <arm_core_mpu_disable+0x10>)
    ce1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    ce20:	4770      	bx	lr
    ce22:	bf00      	nop
    ce24:	e000ed00 	.word	0xe000ed00

0000ce28 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    ce28:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    ce2a:	4d0c      	ldr	r5, [pc, #48]	; (ce5c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    ce2c:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    ce2e:	782a      	ldrb	r2, [r5, #0]
    ce30:	f7ff ff16 	bl	cc60 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    ce34:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    ce36:	3016      	adds	r0, #22
    ce38:	d10f      	bne.n	ce5a <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    ce3a:	f44f 738b 	mov.w	r3, #278	; 0x116
    ce3e:	4a08      	ldr	r2, [pc, #32]	; (ce60 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    ce40:	4908      	ldr	r1, [pc, #32]	; (ce64 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    ce42:	4809      	ldr	r0, [pc, #36]	; (ce68 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    ce44:	f00e f9f2 	bl	1b22c <assert_print>
    ce48:	4621      	mov	r1, r4
    ce4a:	4808      	ldr	r0, [pc, #32]	; (ce6c <arm_core_mpu_configure_static_mpu_regions+0x44>)
    ce4c:	f00e f9ee 	bl	1b22c <assert_print>
    ce50:	f44f 718b 	mov.w	r1, #278	; 0x116
    ce54:	4802      	ldr	r0, [pc, #8]	; (ce60 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    ce56:	f00e f9e2 	bl	1b21e <assert_post_action>
			regions_num);
	}
}
    ce5a:	bd38      	pop	{r3, r4, r5, pc}
    ce5c:	20009b0c 	.word	0x20009b0c
    ce60:	00020b2a 	.word	0x00020b2a
    ce64:	00022960 	.word	0x00022960
    ce68:	0001f995 	.word	0x0001f995
    ce6c:	00020b61 	.word	0x00020b61

0000ce70 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    ce70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce74:	4e31      	ldr	r6, [pc, #196]	; (cf3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    ce76:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ce78:	4605      	mov	r5, r0
    ce7a:	f04f 0800 	mov.w	r8, #0
    ce7e:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
    ce80:	4f2f      	ldr	r7, [pc, #188]	; (cf40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ce82:	45c8      	cmp	r8, r9
    ce84:	db02      	blt.n	ce8c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    ce86:	b003      	add	sp, #12
    ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    ce8c:	f8d5 a004 	ldr.w	sl, [r5, #4]
    ce90:	f1ba 0f00 	cmp.w	sl, #0
    ce94:	d04c      	beq.n	cf30 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    ce96:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    ce98:	4608      	mov	r0, r1
    ce9a:	9101      	str	r1, [sp, #4]
    ce9c:	f00f f94f 	bl	1c13e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    cea0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    cea2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    cea4:	eb0a 0001 	add.w	r0, sl, r1
    cea8:	3801      	subs	r0, #1
    ceaa:	f00f f948 	bl	1c13e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ceae:	4284      	cmp	r4, r0
    ceb0:	f04f 0214 	mov.w	r2, #20
    ceb4:	4b23      	ldr	r3, [pc, #140]	; (cf44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    ceb6:	d015      	beq.n	cee4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
    ceb8:	fb02 f308 	mul.w	r3, r2, r8
    cebc:	f06f 0215 	mvn.w	r2, #21
    cec0:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    cec4:	f44f 7393 	mov.w	r3, #294	; 0x126
    cec8:	4a1f      	ldr	r2, [pc, #124]	; (cf48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    ceca:	4920      	ldr	r1, [pc, #128]	; (cf4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    cecc:	4820      	ldr	r0, [pc, #128]	; (cf50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
    cece:	f00e f9ad 	bl	1b22c <assert_print>
    ced2:	4649      	mov	r1, r9
    ced4:	481f      	ldr	r0, [pc, #124]	; (cf54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
    ced6:	f00e f9a9 	bl	1b22c <assert_print>
    ceda:	f44f 7193 	mov.w	r1, #294	; 0x126
    cede:	481a      	ldr	r0, [pc, #104]	; (cf48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    cee0:	f00e f99d 	bl	1b21e <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    cee4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    cee8:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    ceea:	d0eb      	beq.n	cec4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    ceec:	7819      	ldrb	r1, [r3, #0]
    ceee:	42a1      	cmp	r1, r4
    cef0:	dde8      	ble.n	cec4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
    cef2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    cef6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    cefa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    cefe:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    cf02:	f100 0108 	add.w	r1, r0, #8
    cf06:	7b00      	ldrb	r0, [r0, #12]
    cf08:	f364 0004 	bfi	r0, r4, #0, #5
    cf0c:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    cf0e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    cf12:	790c      	ldrb	r4, [r1, #4]
    cf14:	0840      	lsrs	r0, r0, #1
    cf16:	f360 1447 	bfi	r4, r0, #5, #3
    cf1a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    cf1c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    cf20:	f021 011f 	bic.w	r1, r1, #31
    cf24:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
    cf26:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    cf2a:	f021 011f 	bic.w	r1, r1, #31
    cf2e:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    cf30:	f108 0801 	add.w	r8, r8, #1
    cf34:	3614      	adds	r6, #20
    cf36:	350c      	adds	r5, #12
    cf38:	e7a3      	b.n	ce82 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    cf3a:	bf00      	nop
    cf3c:	20009654 	.word	0x20009654
    cf40:	e000ed00 	.word	0xe000ed00
    cf44:	20009b0c 	.word	0x20009b0c
    cf48:	00020b2a 	.word	0x00020b2a
    cf4c:	00022960 	.word	0x00022960
    cf50:	0001f995 	.word	0x0001f995
    cf54:	00020b8d 	.word	0x00020b8d

0000cf58 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    cf58:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    cf5a:	4d1f      	ldr	r5, [pc, #124]	; (cfd8 <z_arm_mpu_init+0x80>)
    cf5c:	682c      	ldr	r4, [r5, #0]
    cf5e:	2c08      	cmp	r4, #8
    cf60:	d910      	bls.n	cf84 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    cf62:	f240 134d 	movw	r3, #333	; 0x14d
    cf66:	4a1d      	ldr	r2, [pc, #116]	; (cfdc <z_arm_mpu_init+0x84>)
    cf68:	491d      	ldr	r1, [pc, #116]	; (cfe0 <z_arm_mpu_init+0x88>)
    cf6a:	481e      	ldr	r0, [pc, #120]	; (cfe4 <z_arm_mpu_init+0x8c>)
    cf6c:	f00e f95e 	bl	1b22c <assert_print>
    cf70:	4621      	mov	r1, r4
    cf72:	2208      	movs	r2, #8
    cf74:	481c      	ldr	r0, [pc, #112]	; (cfe8 <z_arm_mpu_init+0x90>)
    cf76:	f00e f959 	bl	1b22c <assert_print>
    cf7a:	f240 114d 	movw	r1, #333	; 0x14d
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    cf7e:	4817      	ldr	r0, [pc, #92]	; (cfdc <z_arm_mpu_init+0x84>)
    cf80:	f00e f94d 	bl	1b21e <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    cf84:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    cf86:	f7ff ff45 	bl	ce14 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    cf8a:	4b18      	ldr	r3, [pc, #96]	; (cfec <z_arm_mpu_init+0x94>)
    cf8c:	4a18      	ldr	r2, [pc, #96]	; (cff0 <z_arm_mpu_init+0x98>)
    cf8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    cf92:	4284      	cmp	r4, r0
    cf94:	d117      	bne.n	cfc6 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
    cf96:	4b17      	ldr	r3, [pc, #92]	; (cff4 <z_arm_mpu_init+0x9c>)
    cf98:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    cf9a:	f7ff ff2f 	bl	cdfc <arm_core_mpu_enable>
	__ASSERT(
    cf9e:	4b13      	ldr	r3, [pc, #76]	; (cfec <z_arm_mpu_init+0x94>)
    cfa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    cfa4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    cfa8:	2b08      	cmp	r3, #8
    cfaa:	d013      	beq.n	cfd4 <z_arm_mpu_init+0x7c>
    cfac:	4912      	ldr	r1, [pc, #72]	; (cff8 <z_arm_mpu_init+0xa0>)
    cfae:	f240 13b1 	movw	r3, #433	; 0x1b1
    cfb2:	4a0a      	ldr	r2, [pc, #40]	; (cfdc <z_arm_mpu_init+0x84>)
    cfb4:	480b      	ldr	r0, [pc, #44]	; (cfe4 <z_arm_mpu_init+0x8c>)
    cfb6:	f00e f939 	bl	1b22c <assert_print>
    cfba:	4810      	ldr	r0, [pc, #64]	; (cffc <z_arm_mpu_init+0xa4>)
    cfbc:	f00e f936 	bl	1b22c <assert_print>
    cfc0:	f240 11b1 	movw	r1, #433	; 0x1b1
    cfc4:	e7db      	b.n	cf7e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    cfc6:	6869      	ldr	r1, [r5, #4]
    cfc8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    cfcc:	f7ff fe16 	bl	cbfc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    cfd0:	3001      	adds	r0, #1
    cfd2:	e7de      	b.n	cf92 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    cfd4:	2000      	movs	r0, #0
    cfd6:	bd38      	pop	{r3, r4, r5, pc}
    cfd8:	0001f140 	.word	0x0001f140
    cfdc:	00020b2a 	.word	0x00020b2a
    cfe0:	00022960 	.word	0x00022960
    cfe4:	0001f995 	.word	0x0001f995
    cfe8:	00020bbc 	.word	0x00020bbc
    cfec:	e000ed00 	.word	0xe000ed00
    cff0:	0044ffaa 	.word	0x0044ffaa
    cff4:	20009b0c 	.word	0x20009b0c
    cff8:	00020bf0 	.word	0x00020bf0
    cffc:	00020c40 	.word	0x00020c40

0000d000 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    d000:	4b01      	ldr	r3, [pc, #4]	; (d008 <__stdout_hook_install+0x8>)
    d002:	6018      	str	r0, [r3, #0]
}
    d004:	4770      	bx	lr
    d006:	bf00      	nop
    d008:	200081b8 	.word	0x200081b8

0000d00c <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    d00c:	2000      	movs	r0, #0
    d00e:	4b02      	ldr	r3, [pc, #8]	; (d018 <remoteproc_mgr_boot+0xc>)
    d010:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    d014:	4770      	bx	lr
    d016:	bf00      	nop
    d018:	40005000 	.word	0x40005000

0000d01c <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    d01c:	4b0e      	ldr	r3, [pc, #56]	; (d058 <bt_hex+0x3c>)
    d01e:	2940      	cmp	r1, #64	; 0x40
    d020:	bf28      	it	cs
    d022:	2140      	movcs	r1, #64	; 0x40
{
    d024:	b570      	push	{r4, r5, r6, lr}
    d026:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    d028:	4c0c      	ldr	r4, [pc, #48]	; (d05c <bt_hex+0x40>)
    d02a:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    d02c:	42b0      	cmp	r0, r6
    d02e:	f103 0302 	add.w	r3, r3, #2
    d032:	d104      	bne.n	d03e <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    d034:	2300      	movs	r3, #0
    d036:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    d03a:	4807      	ldr	r0, [pc, #28]	; (d058 <bt_hex+0x3c>)
    d03c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    d03e:	7802      	ldrb	r2, [r0, #0]
    d040:	0912      	lsrs	r2, r2, #4
    d042:	5ca2      	ldrb	r2, [r4, r2]
    d044:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    d048:	f810 2b01 	ldrb.w	r2, [r0], #1
    d04c:	f002 020f 	and.w	r2, r2, #15
    d050:	5ca2      	ldrb	r2, [r4, r2]
    d052:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    d056:	e7e9      	b.n	d02c <bt_hex+0x10>
    d058:	20009b2b 	.word	0x20009b2b
    d05c:	00020ccf 	.word	0x00020ccf

0000d060 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    d060:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    d062:	7803      	ldrb	r3, [r0, #0]
    d064:	b08b      	sub	sp, #44	; 0x2c
    d066:	4604      	mov	r4, r0
    d068:	ad07      	add	r5, sp, #28
    d06a:	2b03      	cmp	r3, #3
    d06c:	d821      	bhi.n	d0b2 <bt_addr_le_str+0x52>
    d06e:	e8df f003 	tbb	[pc, r3]
    d072:	1a02      	.short	0x1a02
    d074:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    d076:	4912      	ldr	r1, [pc, #72]	; (d0c0 <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    d078:	4628      	mov	r0, r5
    d07a:	f00f f889 	bl	1c190 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d07e:	9505      	str	r5, [sp, #20]
    d080:	7863      	ldrb	r3, [r4, #1]
    d082:	211e      	movs	r1, #30
    d084:	9304      	str	r3, [sp, #16]
    d086:	78a3      	ldrb	r3, [r4, #2]
    d088:	4a0e      	ldr	r2, [pc, #56]	; (d0c4 <bt_addr_le_str+0x64>)
    d08a:	9303      	str	r3, [sp, #12]
    d08c:	78e3      	ldrb	r3, [r4, #3]
    d08e:	480e      	ldr	r0, [pc, #56]	; (d0c8 <bt_addr_le_str+0x68>)
    d090:	9302      	str	r3, [sp, #8]
    d092:	7923      	ldrb	r3, [r4, #4]
    d094:	9301      	str	r3, [sp, #4]
    d096:	7963      	ldrb	r3, [r4, #5]
    d098:	9300      	str	r3, [sp, #0]
    d09a:	79a3      	ldrb	r3, [r4, #6]
    d09c:	f00d fecb 	bl	1ae36 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    d0a0:	4809      	ldr	r0, [pc, #36]	; (d0c8 <bt_addr_le_str+0x68>)
    d0a2:	b00b      	add	sp, #44	; 0x2c
    d0a4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    d0a6:	4909      	ldr	r1, [pc, #36]	; (d0cc <bt_addr_le_str+0x6c>)
    d0a8:	e7e6      	b.n	d078 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    d0aa:	4909      	ldr	r1, [pc, #36]	; (d0d0 <bt_addr_le_str+0x70>)
    d0ac:	e7e4      	b.n	d078 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    d0ae:	4909      	ldr	r1, [pc, #36]	; (d0d4 <bt_addr_le_str+0x74>)
    d0b0:	e7e2      	b.n	d078 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d0b2:	210a      	movs	r1, #10
    d0b4:	4628      	mov	r0, r5
    d0b6:	4a08      	ldr	r2, [pc, #32]	; (d0d8 <bt_addr_le_str+0x78>)
    d0b8:	f00d febd 	bl	1ae36 <snprintk>
		break;
    d0bc:	e7df      	b.n	d07e <bt_addr_le_str+0x1e>
    d0be:	bf00      	nop
    d0c0:	00020c8a 	.word	0x00020c8a
    d0c4:	00020cac 	.word	0x00020cac
    d0c8:	20009b0d 	.word	0x20009b0d
    d0cc:	00020c91 	.word	0x00020c91
    d0d0:	00020c98 	.word	0x00020c98
    d0d4:	00020ca2 	.word	0x00020ca2
    d0d8:	00021c55 	.word	0x00021c55

0000d0dc <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    d0dc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    d0de:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    d0e0:	4d09      	ldr	r5, [pc, #36]	; (d108 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    d0e2:	4b0a      	ldr	r3, [pc, #40]	; (d10c <long_wq_init+0x30>)
{
    d0e4:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    d0e6:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    d0e8:	9302      	str	r3, [sp, #8]
    d0ea:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    d0ec:	f00b f966 	bl	183bc <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    d0f0:	ab02      	add	r3, sp, #8
    d0f2:	4628      	mov	r0, r5
    d0f4:	9300      	str	r3, [sp, #0]
    d0f6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    d0fa:	230a      	movs	r3, #10
    d0fc:	4904      	ldr	r1, [pc, #16]	; (d110 <long_wq_init+0x34>)
    d0fe:	f00b f977 	bl	183f0 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    d102:	4620      	mov	r0, r4
    d104:	b005      	add	sp, #20
    d106:	bd30      	pop	{r4, r5, pc}
    d108:	20008f60 	.word	0x20008f60
    d10c:	00020ce0 	.word	0x00020ce0
    d110:	2000a7b0 	.word	0x2000a7b0

0000d114 <bt_long_wq_schedule>:
{
    d114:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    d116:	4801      	ldr	r0, [pc, #4]	; (d11c <bt_long_wq_schedule+0x8>)
    d118:	f00b ba8c 	b.w	18634 <k_work_schedule_for_queue>
    d11c:	20008f60 	.word	0x20008f60

0000d120 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    d120:	4603      	mov	r3, r0
    d122:	b430      	push	{r4, r5}
	switch (src->type) {
    d124:	781a      	ldrb	r2, [r3, #0]
{
    d126:	4608      	mov	r0, r1
	switch (src->type) {
    d128:	2a01      	cmp	r2, #1
    d12a:	d013      	beq.n	d154 <uuid_to_uuid128+0x34>
    d12c:	2a02      	cmp	r2, #2
    d12e:	d026      	beq.n	d17e <uuid_to_uuid128+0x5e>
    d130:	b972      	cbnz	r2, d150 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    d132:	4a15      	ldr	r2, [pc, #84]	; (d188 <uuid_to_uuid128+0x68>)
    d134:	f102 0410 	add.w	r4, r2, #16
    d138:	f852 5b04 	ldr.w	r5, [r2], #4
    d13c:	42a2      	cmp	r2, r4
    d13e:	f841 5b04 	str.w	r5, [r1], #4
    d142:	d1f9      	bne.n	d138 <uuid_to_uuid128+0x18>
    d144:	7812      	ldrb	r2, [r2, #0]
    d146:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    d148:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    d14a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    d14c:	0a1b      	lsrs	r3, r3, #8
    d14e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    d150:	bc30      	pop	{r4, r5}
    d152:	4770      	bx	lr
		*dst = uuid128_base;
    d154:	4a0c      	ldr	r2, [pc, #48]	; (d188 <uuid_to_uuid128+0x68>)
    d156:	f102 0410 	add.w	r4, r2, #16
    d15a:	f852 5b04 	ldr.w	r5, [r2], #4
    d15e:	42a2      	cmp	r2, r4
    d160:	f841 5b04 	str.w	r5, [r1], #4
    d164:	d1f9      	bne.n	d15a <uuid_to_uuid128+0x3a>
    d166:	7812      	ldrb	r2, [r2, #0]
    d168:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    d16a:	685b      	ldr	r3, [r3, #4]
    d16c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    d170:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    d172:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d174:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    d176:	0a1b      	lsrs	r3, r3, #8
    d178:	7382      	strb	r2, [r0, #14]
    d17a:	7403      	strb	r3, [r0, #16]
}
    d17c:	e7e8      	b.n	d150 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    d17e:	2211      	movs	r2, #17
}
    d180:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    d182:	4619      	mov	r1, r3
    d184:	f00f b861 	b.w	1c24a <memcpy>
    d188:	00020ce9 	.word	0x00020ce9

0000d18c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    d18c:	b538      	push	{r3, r4, r5, lr}
    d18e:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    d190:	2d01      	cmp	r5, #1
{
    d192:	4610      	mov	r0, r2
    d194:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    d196:	d010      	beq.n	d1ba <bt_buf_get_rx+0x2e>
    d198:	2d03      	cmp	r5, #3
    d19a:	d01a      	beq.n	d1d2 <bt_buf_get_rx+0x46>
    d19c:	2d05      	cmp	r5, #5
    d19e:	d018      	beq.n	d1d2 <bt_buf_get_rx+0x46>
    d1a0:	490e      	ldr	r1, [pc, #56]	; (d1dc <bt_buf_get_rx+0x50>)
    d1a2:	233f      	movs	r3, #63	; 0x3f
    d1a4:	4a0e      	ldr	r2, [pc, #56]	; (d1e0 <bt_buf_get_rx+0x54>)
    d1a6:	480f      	ldr	r0, [pc, #60]	; (d1e4 <bt_buf_get_rx+0x58>)
    d1a8:	f00e f840 	bl	1b22c <assert_print>
    d1ac:	480e      	ldr	r0, [pc, #56]	; (d1e8 <bt_buf_get_rx+0x5c>)
    d1ae:	f00e f83d 	bl	1b22c <assert_print>
    d1b2:	213f      	movs	r1, #63	; 0x3f
    d1b4:	480a      	ldr	r0, [pc, #40]	; (d1e0 <bt_buf_get_rx+0x54>)
    d1b6:	f00e f832 	bl	1b21e <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    d1ba:	480c      	ldr	r0, [pc, #48]	; (d1ec <bt_buf_get_rx+0x60>)
    d1bc:	f010 f9e7 	bl	1d58e <net_buf_alloc_fixed>
    d1c0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    d1c2:	b120      	cbz	r0, d1ce <bt_buf_get_rx+0x42>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    d1c4:	2101      	movs	r1, #1
    d1c6:	3008      	adds	r0, #8
    d1c8:	f005 fd74 	bl	12cb4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    d1cc:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    d1ce:	4620      	mov	r0, r4
    d1d0:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
    d1d2:	4602      	mov	r2, r0
    d1d4:	460b      	mov	r3, r1
    d1d6:	4806      	ldr	r0, [pc, #24]	; (d1f0 <bt_buf_get_rx+0x64>)
    d1d8:	e7f0      	b.n	d1bc <bt_buf_get_rx+0x30>
    d1da:	bf00      	nop
    d1dc:	00020d29 	.word	0x00020d29
    d1e0:	00020cfa 	.word	0x00020cfa
    d1e4:	0001f995 	.word	0x0001f995
    d1e8:	00020d6e 	.word	0x00020d6e
    d1ec:	20008668 	.word	0x20008668
    d1f0:	200085cc 	.word	0x200085cc

0000d1f4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    d1f4:	b510      	push	{r4, lr}
    d1f6:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    d1f8:	490a      	ldr	r1, [pc, #40]	; (d224 <bt_buf_get_cmd_complete+0x30>)
{
    d1fa:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    d1fc:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
    d200:	b920      	cbnz	r0, d20c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    d202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d206:	2001      	movs	r0, #1
    d208:	f7ff bfc0 	b.w	d18c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    d20c:	f005 feda 	bl	12fc4 <net_buf_ref>
    d210:	2101      	movs	r1, #1
		buf->len = 0U;
    d212:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
    d214:	4604      	mov	r4, r0
    d216:	7501      	strb	r1, [r0, #20]
		buf->len = 0U;
    d218:	8183      	strh	r3, [r0, #12]
	net_buf_simple_reserve(&buf->b, reserve);
    d21a:	3008      	adds	r0, #8
    d21c:	f005 fd4a 	bl	12cb4 <net_buf_simple_reserve>
}
    d220:	4620      	mov	r0, r4
    d222:	bd10      	pop	{r4, pc}
    d224:	20008000 	.word	0x20008000

0000d228 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    d228:	b570      	push	{r4, r5, r6, lr}
    d22a:	4604      	mov	r4, r0
	switch (evt) {
    d22c:	2c0f      	cmp	r4, #15
{
    d22e:	460d      	mov	r5, r1
    d230:	4610      	mov	r0, r2
    d232:	4619      	mov	r1, r3
	switch (evt) {
    d234:	d805      	bhi.n	d242 <bt_buf_get_evt+0x1a>
    d236:	2c0d      	cmp	r4, #13
    d238:	d90d      	bls.n	d256 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    d23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    d23e:	f7ff bfd9 	b.w	d1f4 <bt_buf_get_cmd_complete>
	switch (evt) {
    d242:	2c13      	cmp	r4, #19
    d244:	d107      	bne.n	d256 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    d246:	480c      	ldr	r0, [pc, #48]	; (d278 <bt_buf_get_evt+0x50>)
    d248:	f010 f9a1 	bl	1d58e <net_buf_alloc_fixed>
			if (buf) {
    d24c:	4604      	mov	r4, r0
    d24e:	b938      	cbnz	r0, d260 <bt_buf_get_evt+0x38>
{
    d250:	2400      	movs	r4, #0
}
    d252:	4620      	mov	r0, r4
    d254:	bd70      	pop	{r4, r5, r6, pc}
    d256:	4602      	mov	r2, r0
    d258:	460b      	mov	r3, r1
		if (discardable) {
    d25a:	b145      	cbz	r5, d26e <bt_buf_get_evt+0x46>
    d25c:	4807      	ldr	r0, [pc, #28]	; (d27c <bt_buf_get_evt+0x54>)
    d25e:	e7f3      	b.n	d248 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    d260:	2101      	movs	r1, #1
    d262:	3008      	adds	r0, #8
    d264:	f005 fd26 	bl	12cb4 <net_buf_simple_reserve>
    d268:	2301      	movs	r3, #1
    d26a:	7523      	strb	r3, [r4, #20]
}
    d26c:	e7f1      	b.n	d252 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d26e:	2001      	movs	r0, #1
}
    d270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d274:	f7ff bf8a 	b.w	d18c <bt_buf_get_rx>
    d278:	20008704 	.word	0x20008704
    d27c:	20008634 	.word	0x20008634

0000d280 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    d280:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    d282:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d284:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    d288:	781b      	ldrb	r3, [r3, #0]
    d28a:	b963      	cbnz	r3, d2a6 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    d28c:	4620      	mov	r0, r4
    d28e:	f002 fd41 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    d292:	4605      	mov	r5, r0
    d294:	b940      	cbnz	r0, d2a8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    d296:	4b08      	ldr	r3, [pc, #32]	; (d2b8 <hci_disconn_complete_prio+0x38>)
    d298:	881a      	ldrh	r2, [r3, #0]
    d29a:	b922      	cbnz	r2, d2a6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    d29c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    d2a0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    d2a4:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    d2a6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    d2a8:	2101      	movs	r1, #1
    d2aa:	f002 fd3b 	bl	fd24 <bt_conn_set_state>
	bt_conn_unref(conn);
    d2ae:	4628      	mov	r0, r5
}
    d2b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    d2b4:	f002 bcfe 	b.w	fcb4 <bt_conn_unref>
    d2b8:	20009af8 	.word	0x20009af8

0000d2bc <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    d2bc:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    d2be:	4c08      	ldr	r4, [pc, #32]	; (d2e0 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    d2c0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    d2c2:	2205      	movs	r2, #5
    d2c4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    d2c8:	f002 ff9a 	bl	10200 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
    d2cc:	b938      	cbnz	r0, d2de <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    d2ce:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    d2d2:	2204      	movs	r2, #4

		return conn;
	}

	return NULL;
}
    d2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    d2d8:	4902      	ldr	r1, [pc, #8]	; (d2e4 <find_pending_connect.part.0+0x28>)
    d2da:	f002 bf91 	b.w	10200 <bt_conn_lookup_state_le>
}
    d2de:	bd10      	pop	{r4, pc}
    d2e0:	20008000 	.word	0x20008000
    d2e4:	00020c70 	.word	0x00020c70

0000d2e8 <hci_data_buf_overflow>:
{
    d2e8:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    d2ea:	6883      	ldr	r3, [r0, #8]
{
    d2ec:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    d2ee:	b088      	sub	sp, #32
    d2f0:	466a      	mov	r2, sp
    d2f2:	781b      	ldrb	r3, [r3, #0]
    d2f4:	4906      	ldr	r1, [pc, #24]	; (d310 <hci_data_buf_overflow+0x28>)
    d2f6:	4807      	ldr	r0, [pc, #28]	; (d314 <hci_data_buf_overflow+0x2c>)
    d2f8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d2fc:	2303      	movs	r3, #3
    d2fe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d302:	f842 3f10 	str.w	r3, [r2, #16]!
    d306:	f00f f82f 	bl	1c368 <z_log_msg_static_create.constprop.0>
}
    d30a:	46bd      	mov	sp, r7
    d30c:	bd80      	pop	{r7, pc}
    d30e:	bf00      	nop
    d310:	00020d95 	.word	0x00020d95
    d314:	0001ed9c 	.word	0x0001ed9c

0000d318 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    d318:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		BT_ERR("Unable to allocate buffer");
    d31a:	4b06      	ldr	r3, [pc, #24]	; (d334 <le_conn_param_neg_reply.part.0+0x1c>)
    d31c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d320:	9305      	str	r3, [sp, #20]
    d322:	2302      	movs	r3, #2
    d324:	4804      	ldr	r0, [pc, #16]	; (d338 <le_conn_param_neg_reply.part.0+0x20>)
    d326:	aa04      	add	r2, sp, #16
    d328:	9304      	str	r3, [sp, #16]
    d32a:	f00f f81d 	bl	1c368 <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    d32e:	b007      	add	sp, #28
    d330:	f85d fb04 	ldr.w	pc, [sp], #4
    d334:	00020dbd 	.word	0x00020dbd
    d338:	0001ed9c 	.word	0x0001ed9c

0000d33c <le_conn_update_complete>:

	bt_conn_unref(conn);
}

static void le_conn_update_complete(struct net_buf *buf)
{
    d33c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d33e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    d340:	6885      	ldr	r5, [r0, #8]
{
    d342:	af00      	add	r7, sp, #0
	struct bt_conn *conn;
	uint16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    d344:	f8b5 6001 	ldrh.w	r6, [r5, #1]

	BT_DBG("status 0x%02x, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    d348:	4630      	mov	r0, r6
    d34a:	f002 fce3 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    d34e:	4604      	mov	r4, r0
    d350:	b988      	cbnz	r0, d376 <le_conn_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d352:	466c      	mov	r4, sp
    d354:	b088      	sub	sp, #32
    d356:	466a      	mov	r2, sp
    d358:	4b1c      	ldr	r3, [pc, #112]	; (d3cc <le_conn_update_complete+0x90>)
    d35a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d35e:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d362:	2303      	movs	r3, #3
    d364:	481a      	ldr	r0, [pc, #104]	; (d3d0 <le_conn_update_complete+0x94>)
    d366:	f842 3f10 	str.w	r3, [r2, #16]!
    d36a:	f00e fffd 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d36e:	46a5      	mov	sp, r4

		bt_l2cap_update_conn_param(conn, &param);
	}

	bt_conn_unref(conn);
}
    d370:	370c      	adds	r7, #12
    d372:	46bd      	mov	sp, r7
    d374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
    d376:	782b      	ldrb	r3, [r5, #0]
    d378:	b98b      	cbnz	r3, d39e <le_conn_update_complete+0x62>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    d37a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    d37e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    d382:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    d386:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    d38a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    d38e:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
    d392:	f002 fe1b 	bl	ffcc <notify_le_param_updated>
	bt_conn_unref(conn);
    d396:	4620      	mov	r0, r4
    d398:	f002 fc8c 	bl	fcb4 <bt_conn_unref>
    d39c:	e7e8      	b.n	d370 <le_conn_update_complete+0x34>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    d39e:	2b1a      	cmp	r3, #26
    d3a0:	d1f9      	bne.n	d396 <le_conn_update_complete+0x5a>
    d3a2:	78c3      	ldrb	r3, [r0, #3]
    d3a4:	2b01      	cmp	r3, #1
    d3a6:	d1f6      	bne.n	d396 <le_conn_update_complete+0x5a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d3a8:	f44f 7100 	mov.w	r1, #512	; 0x200
    d3ac:	3004      	adds	r0, #4
    d3ae:	f00e ffd0 	bl	1c352 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    d3b2:	0583      	lsls	r3, r0, #22
    d3b4:	d4ef      	bmi.n	d396 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    d3b6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    d3ba:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    d3bc:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    d3be:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
    d3c2:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    d3c4:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    d3c6:	f003 fa01 	bl	107cc <bt_l2cap_update_conn_param>
    d3ca:	e7e4      	b.n	d396 <le_conn_update_complete+0x5a>
    d3cc:	00020dd7 	.word	0x00020dd7
    d3d0:	0001ed9c 	.word	0x0001ed9c

0000d3d4 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    d3d4:	b598      	push	{r3, r4, r7, lr}
    d3d6:	4601      	mov	r1, r0
    d3d8:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    d3da:	480d      	ldr	r0, [pc, #52]	; (d410 <rx_queue_put+0x3c>)
    d3dc:	f005 fc90 	bl	12d00 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    d3e0:	490c      	ldr	r1, [pc, #48]	; (d414 <rx_queue_put+0x40>)
    d3e2:	480d      	ldr	r0, [pc, #52]	; (d418 <rx_queue_put+0x44>)
    d3e4:	f011 f960 	bl	1e6a8 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    d3e8:	2800      	cmp	r0, #0
    d3ea:	da0e      	bge.n	d40a <rx_queue_put+0x36>
		BT_ERR("Could not submit rx_work: %d", err);
    d3ec:	466c      	mov	r4, sp
    d3ee:	b088      	sub	sp, #32
    d3f0:	466a      	mov	r2, sp
    d3f2:	4b0a      	ldr	r3, [pc, #40]	; (d41c <rx_queue_put+0x48>)
    d3f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d3f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d3fc:	2303      	movs	r3, #3
    d3fe:	4808      	ldr	r0, [pc, #32]	; (d420 <rx_queue_put+0x4c>)
    d400:	f842 3f10 	str.w	r3, [r2, #16]!
    d404:	f00e ffb0 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d408:	46a5      	mov	sp, r4
	}
}
    d40a:	46bd      	mov	sp, r7
    d40c:	bd98      	pop	{r3, r4, r7, pc}
    d40e:	bf00      	nop
    d410:	20008134 	.word	0x20008134
    d414:	200081f8 	.word	0x200081f8
    d418:	20009090 	.word	0x20009090
    d41c:	00020dfb 	.word	0x00020dfb
    d420:	0001ed9c 	.word	0x0001ed9c

0000d424 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    d424:	460b      	mov	r3, r1
    d426:	b5b0      	push	{r4, r5, r7, lr}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    d428:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    d42a:	af00      	add	r7, sp, #0
    d42c:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    d42e:	4629      	mov	r1, r5
    d430:	6898      	ldr	r0, [r3, #8]
    d432:	f7ff fdf3 	bl	d01c <bt_hex>
    d436:	b08a      	sub	sp, #40	; 0x28
    d438:	466a      	mov	r2, sp
    d43a:	4b09      	ldr	r3, [pc, #36]	; (d460 <handle_event.part.0+0x3c>)
    d43c:	e9c2 5007 	strd	r5, r0, [r2, #28]
    d440:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d444:	f240 4302 	movw	r3, #1026	; 0x402
    d448:	8493      	strh	r3, [r2, #36]	; 0x24
    d44a:	4b06      	ldr	r3, [pc, #24]	; (d464 <handle_event.part.0+0x40>)
    d44c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    d450:	4805      	ldr	r0, [pc, #20]	; (d468 <handle_event.part.0+0x44>)
    d452:	f842 3f10 	str.w	r3, [r2, #16]!
    d456:	f00e ff87 	bl	1c368 <z_log_msg_static_create.constprop.0>
}
    d45a:	46bd      	mov	sp, r7
    d45c:	bdb0      	pop	{r4, r5, r7, pc}
    d45e:	bf00      	nop
    d460:	00020e18 	.word	0x00020e18
    d464:	01000005 	.word	0x01000005
    d468:	0001ed9c 	.word	0x0001ed9c

0000d46c <hci_hardware_error>:
{
    d46c:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    d46e:	2101      	movs	r1, #1
    d470:	af00      	add	r7, sp, #0
    d472:	3008      	adds	r0, #8
    d474:	f005 fe66 	bl	13144 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    d478:	b088      	sub	sp, #32
    d47a:	466a      	mov	r2, sp
    d47c:	7803      	ldrb	r3, [r0, #0]
    d47e:	4906      	ldr	r1, [pc, #24]	; (d498 <hci_hardware_error+0x2c>)
    d480:	4806      	ldr	r0, [pc, #24]	; (d49c <hci_hardware_error+0x30>)
    d482:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d486:	2303      	movs	r3, #3
    d488:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d48c:	f842 3f10 	str.w	r3, [r2, #16]!
    d490:	f00e ff6a 	bl	1c368 <z_log_msg_static_create.constprop.0>
}
    d494:	46bd      	mov	sp, r7
    d496:	bd80      	pop	{r7, pc}
    d498:	00020e3a 	.word	0x00020e3a
    d49c:	0001ed9c 	.word	0x0001ed9c

0000d4a0 <le_data_len_change>:
{
    d4a0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d4a2:	6883      	ldr	r3, [r0, #8]
{
    d4a4:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d4a6:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    d4a8:	4620      	mov	r0, r4
    d4aa:	f002 fc33 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    d4ae:	b980      	cbnz	r0, d4d2 <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d4b0:	466d      	mov	r5, sp
    d4b2:	b088      	sub	sp, #32
    d4b4:	466a      	mov	r2, sp
    d4b6:	4b08      	ldr	r3, [pc, #32]	; (d4d8 <le_data_len_change+0x38>)
    d4b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d4bc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d4c0:	2303      	movs	r3, #3
    d4c2:	4806      	ldr	r0, [pc, #24]	; (d4dc <le_data_len_change+0x3c>)
    d4c4:	f842 3f10 	str.w	r3, [r2, #16]!
    d4c8:	f00e ff4e 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d4cc:	46ad      	mov	sp, r5
}
    d4ce:	46bd      	mov	sp, r7
    d4d0:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    d4d2:	f002 fbef 	bl	fcb4 <bt_conn_unref>
    d4d6:	e7fa      	b.n	d4ce <le_data_len_change+0x2e>
    d4d8:	00020dd7 	.word	0x00020dd7
    d4dc:	0001ed9c 	.word	0x0001ed9c

0000d4e0 <le_phy_update_complete>:
{
    d4e0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d4e2:	6883      	ldr	r3, [r0, #8]
{
    d4e4:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d4e6:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    d4ea:	4620      	mov	r0, r4
    d4ec:	f002 fc12 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    d4f0:	b980      	cbnz	r0, d514 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d4f2:	466d      	mov	r5, sp
    d4f4:	b088      	sub	sp, #32
    d4f6:	466a      	mov	r2, sp
    d4f8:	4b08      	ldr	r3, [pc, #32]	; (d51c <le_phy_update_complete+0x3c>)
    d4fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d4fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d502:	2303      	movs	r3, #3
    d504:	4806      	ldr	r0, [pc, #24]	; (d520 <le_phy_update_complete+0x40>)
    d506:	f842 3f10 	str.w	r3, [r2, #16]!
    d50a:	f00e ff2d 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d50e:	46ad      	mov	sp, r5
}
    d510:	46bd      	mov	sp, r7
    d512:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    d514:	f002 fbce 	bl	fcb4 <bt_conn_unref>
    d518:	e7fa      	b.n	d510 <le_phy_update_complete+0x30>
    d51a:	bf00      	nop
    d51c:	00020dd7 	.word	0x00020dd7
    d520:	0001ed9c 	.word	0x0001ed9c

0000d524 <hci_disconn_complete>:
{
    d524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    d528:	6885      	ldr	r5, [r0, #8]
{
    d52a:	af00      	add	r7, sp, #0
	if (evt->status) {
    d52c:	782e      	ldrb	r6, [r5, #0]
    d52e:	b9ae      	cbnz	r6, d55c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d530:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    d534:	4640      	mov	r0, r8
    d536:	f002 fbed 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    d53a:	4604      	mov	r4, r0
    d53c:	b988      	cbnz	r0, d562 <hci_disconn_complete+0x3e>
		BT_ERR("Unable to look up conn with handle %u", handle);
    d53e:	466c      	mov	r4, sp
    d540:	b088      	sub	sp, #32
    d542:	466a      	mov	r2, sp
    d544:	4b0b      	ldr	r3, [pc, #44]	; (d574 <hci_disconn_complete+0x50>)
    d546:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d54a:	e9c2 3805 	strd	r3, r8, [r2, #20]
    d54e:	2303      	movs	r3, #3
    d550:	4809      	ldr	r0, [pc, #36]	; (d578 <hci_disconn_complete+0x54>)
    d552:	f842 3f10 	str.w	r3, [r2, #16]!
    d556:	f00e ff07 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d55a:	46a5      	mov	sp, r4
}
    d55c:	46bd      	mov	sp, r7
    d55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    d562:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d564:	4631      	mov	r1, r6
	conn->err = evt->reason;
    d566:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d568:	f002 fbdc 	bl	fd24 <bt_conn_set_state>
		bt_conn_unref(conn);
    d56c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    d56e:	f002 fba1 	bl	fcb4 <bt_conn_unref>
    d572:	e7f3      	b.n	d55c <hci_disconn_complete+0x38>
    d574:	00020e5c 	.word	0x00020e5c
    d578:	0001ed9c 	.word	0x0001ed9c

0000d57c <handle_event>:
{
    d57c:	b5b0      	push	{r4, r5, r7, lr}
    d57e:	4604      	mov	r4, r0
    d580:	af00      	add	r7, sp, #0
    d582:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    d586:	4293      	cmp	r3, r2
    d588:	d103      	bne.n	d592 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    d58a:	4620      	mov	r0, r4
    d58c:	f7ff ff4a 	bl	d424 <handle_event.part.0>
}
    d590:	e018      	b.n	d5c4 <handle_event+0x48>
		if (handler->event != event) {
    d592:	4610      	mov	r0, r2
    d594:	f810 5b08 	ldrb.w	r5, [r0], #8
    d598:	42a5      	cmp	r5, r4
    d59a:	d119      	bne.n	d5d0 <handle_event+0x54>
		if (buf->len < handler->min_len) {
    d59c:	898b      	ldrh	r3, [r1, #12]
    d59e:	7850      	ldrb	r0, [r2, #1]
    d5a0:	4298      	cmp	r0, r3
    d5a2:	d911      	bls.n	d5c8 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    d5a4:	466d      	mov	r5, sp
    d5a6:	b088      	sub	sp, #32
    d5a8:	466a      	mov	r2, sp
    d5aa:	490a      	ldr	r1, [pc, #40]	; (d5d4 <handle_event+0x58>)
    d5ac:	61d4      	str	r4, [r2, #28]
    d5ae:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d5b2:	2304      	movs	r3, #4
    d5b4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d5b8:	4807      	ldr	r0, [pc, #28]	; (d5d8 <handle_event+0x5c>)
    d5ba:	f842 3f10 	str.w	r3, [r2, #16]!
    d5be:	f00e fed3 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d5c2:	46ad      	mov	sp, r5
}
    d5c4:	46bd      	mov	sp, r7
    d5c6:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    d5c8:	4608      	mov	r0, r1
    d5ca:	6853      	ldr	r3, [r2, #4]
    d5cc:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    d5ce:	e7f9      	b.n	d5c4 <handle_event+0x48>
    d5d0:	4602      	mov	r2, r0
    d5d2:	e7d8      	b.n	d586 <handle_event+0xa>
    d5d4:	00020e82 	.word	0x00020e82
    d5d8:	0001ed9c 	.word	0x0001ed9c

0000d5dc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    d5de:	4855      	ldr	r0, [pc, #340]	; (d734 <rx_work_handler+0x158>)
{
    d5e0:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    d5e2:	f005 fbfd 	bl	12de0 <net_buf_slist_get>
	if (!buf) {
    d5e6:	4604      	mov	r4, r0
    d5e8:	2800      	cmp	r0, #0
    d5ea:	d06a      	beq.n	d6c2 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    d5ec:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    d5ee:	2b01      	cmp	r3, #1
    d5f0:	d069      	beq.n	d6c6 <rx_work_handler+0xea>
    d5f2:	2b03      	cmp	r3, #3
    d5f4:	f040 8099 	bne.w	d72a <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d5f8:	8983      	ldrh	r3, [r0, #12]
    d5fa:	2b03      	cmp	r3, #3
    d5fc:	d80c      	bhi.n	d618 <rx_work_handler+0x3c>
    d5fe:	f240 13ed 	movw	r3, #493	; 0x1ed
    d602:	4a4d      	ldr	r2, [pc, #308]	; (d738 <rx_work_handler+0x15c>)
    d604:	494d      	ldr	r1, [pc, #308]	; (d73c <rx_work_handler+0x160>)
    d606:	484e      	ldr	r0, [pc, #312]	; (d740 <rx_work_handler+0x164>)
    d608:	f00d fe10 	bl	1b22c <assert_print>
    d60c:	4040      	eors	r0, r0
    d60e:	f380 8811 	msr	BASEPRI, r0
    d612:	f04f 0003 	mov.w	r0, #3
    d616:	df02      	svc	2
    d618:	2104      	movs	r1, #4
    d61a:	f104 0008 	add.w	r0, r4, #8
    d61e:	f005 fd91 	bl	13144 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    d622:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    d624:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    d626:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    d628:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    d62a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    d62e:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    d630:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    d632:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    d634:	d010      	beq.n	d658 <rx_work_handler+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    d636:	466d      	mov	r5, sp
    d638:	b088      	sub	sp, #32
    d63a:	466a      	mov	r2, sp
    d63c:	4841      	ldr	r0, [pc, #260]	; (d744 <rx_work_handler+0x168>)
    d63e:	61d3      	str	r3, [r2, #28]
    d640:	2304      	movs	r3, #4
    d642:	e9c2 0105 	strd	r0, r1, [r2, #20]
    d646:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d64a:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    d64e:	483e      	ldr	r0, [pc, #248]	; (d748 <rx_work_handler+0x16c>)
    d650:	f00e fe8a 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d654:	46ad      	mov	sp, r5
    d656:	e064      	b.n	d722 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    d658:	f002 fb5c 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    d65c:	4605      	mov	r5, r0
    d65e:	b960      	cbnz	r0, d67a <rx_work_handler+0x9e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    d660:	466d      	mov	r5, sp
    d662:	b088      	sub	sp, #32
    d664:	8ae3      	ldrh	r3, [r4, #22]
    d666:	466a      	mov	r2, sp
    d668:	4938      	ldr	r1, [pc, #224]	; (d74c <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
    d66a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    d66e:	2303      	movs	r3, #3
    d670:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d674:	f842 3f10 	str.w	r3, [r2, #16]!
    d678:	e7e9      	b.n	d64e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
    d67a:	f002 fc43 	bl	ff04 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    d67e:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    d680:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    d682:	0b32      	lsrs	r2, r6, #12
    d684:	4628      	mov	r0, r5
    d686:	f002 f9af 	bl	f9e8 <bt_conn_recv>
	bt_conn_unref(conn);
    d68a:	4628      	mov	r0, r5
    d68c:	f002 fb12 	bl	fcb4 <bt_conn_unref>
	return list->head;
    d690:	4b2f      	ldr	r3, [pc, #188]	; (d750 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    d692:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    d696:	b1a3      	cbz	r3, d6c2 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    d698:	492e      	ldr	r1, [pc, #184]	; (d754 <rx_work_handler+0x178>)
    d69a:	482f      	ldr	r0, [pc, #188]	; (d758 <rx_work_handler+0x17c>)
    d69c:	f011 f804 	bl	1e6a8 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    d6a0:	2800      	cmp	r0, #0
    d6a2:	da0e      	bge.n	d6c2 <rx_work_handler+0xe6>
			BT_ERR("Could not submit rx_work: %d", err);
    d6a4:	466c      	mov	r4, sp
    d6a6:	b088      	sub	sp, #32
    d6a8:	466a      	mov	r2, sp
    d6aa:	4b2c      	ldr	r3, [pc, #176]	; (d75c <rx_work_handler+0x180>)
    d6ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d6b0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d6b4:	2303      	movs	r3, #3
    d6b6:	4824      	ldr	r0, [pc, #144]	; (d748 <rx_work_handler+0x16c>)
    d6b8:	f842 3f10 	str.w	r3, [r2, #16]!
    d6bc:	f00e fe54 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d6c0:	46a5      	mov	sp, r4
		}
	}
}
    d6c2:	46bd      	mov	sp, r7
    d6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d6c6:	8983      	ldrh	r3, [r0, #12]
    d6c8:	2b01      	cmp	r3, #1
    d6ca:	d80c      	bhi.n	d6e6 <rx_work_handler+0x10a>
    d6cc:	f44f 6316 	mov.w	r3, #2400	; 0x960
    d6d0:	4a19      	ldr	r2, [pc, #100]	; (d738 <rx_work_handler+0x15c>)
    d6d2:	491a      	ldr	r1, [pc, #104]	; (d73c <rx_work_handler+0x160>)
    d6d4:	481a      	ldr	r0, [pc, #104]	; (d740 <rx_work_handler+0x164>)
    d6d6:	f00d fda9 	bl	1b22c <assert_print>
    d6da:	4040      	eors	r0, r0
    d6dc:	f380 8811 	msr	BASEPRI, r0
    d6e0:	f04f 0003 	mov.w	r0, #3
    d6e4:	df02      	svc	2
    d6e6:	2102      	movs	r1, #2
    d6e8:	f104 0008 	add.w	r0, r4, #8
    d6ec:	f005 fd2a 	bl	13144 <net_buf_simple_pull_mem>
    d6f0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    d6f2:	7800      	ldrb	r0, [r0, #0]
    d6f4:	f00e fe17 	bl	1c326 <bt_hci_evt_get_flags>
    d6f8:	0783      	lsls	r3, r0, #30
    d6fa:	d40c      	bmi.n	d716 <rx_work_handler+0x13a>
    d6fc:	f640 1364 	movw	r3, #2404	; 0x964
    d700:	4a0d      	ldr	r2, [pc, #52]	; (d738 <rx_work_handler+0x15c>)
    d702:	4917      	ldr	r1, [pc, #92]	; (d760 <rx_work_handler+0x184>)
    d704:	480e      	ldr	r0, [pc, #56]	; (d740 <rx_work_handler+0x164>)
    d706:	f00d fd91 	bl	1b22c <assert_print>
    d70a:	4040      	eors	r0, r0
    d70c:	f380 8811 	msr	BASEPRI, r0
    d710:	f04f 0003 	mov.w	r0, #3
    d714:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    d716:	2304      	movs	r3, #4
    d718:	4621      	mov	r1, r4
    d71a:	4a12      	ldr	r2, [pc, #72]	; (d764 <rx_work_handler+0x188>)
    d71c:	7828      	ldrb	r0, [r5, #0]
    d71e:	f7ff ff2d 	bl	d57c <handle_event>
		net_buf_unref(buf);
    d722:	4620      	mov	r0, r4
    d724:	f005 fc0a 	bl	12f3c <net_buf_unref>
		break;
    d728:	e7b2      	b.n	d690 <rx_work_handler+0xb4>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    d72a:	466d      	mov	r5, sp
    d72c:	b088      	sub	sp, #32
    d72e:	466a      	mov	r2, sp
    d730:	490d      	ldr	r1, [pc, #52]	; (d768 <rx_work_handler+0x18c>)
    d732:	e79a      	b.n	d66a <rx_work_handler+0x8e>
    d734:	20008134 	.word	0x20008134
    d738:	00020ea4 	.word	0x00020ea4
    d73c:	00020ed8 	.word	0x00020ed8
    d740:	0001f995 	.word	0x0001f995
    d744:	00020ef1 	.word	0x00020ef1
    d748:	0001ed9c 	.word	0x0001ed9c
    d74c:	00020f15 	.word	0x00020f15
    d750:	20008000 	.word	0x20008000
    d754:	200081f8 	.word	0x200081f8
    d758:	20009090 	.word	0x20009090
    d75c:	00020dfb 	.word	0x00020dfb
    d760:	00020f37 	.word	0x00020f37
    d764:	0001f1d0 	.word	0x0001f1d0
    d768:	00020f65 	.word	0x00020f65

0000d76c <hci_le_meta_event>:
{
    d76c:	b510      	push	{r4, lr}
    d76e:	2101      	movs	r1, #1
    d770:	4604      	mov	r4, r0
    d772:	3008      	adds	r0, #8
    d774:	f005 fce6 	bl	13144 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    d778:	4621      	mov	r1, r4
}
    d77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    d77e:	2307      	movs	r3, #7
    d780:	4a01      	ldr	r2, [pc, #4]	; (d788 <hci_le_meta_event+0x1c>)
    d782:	7800      	ldrb	r0, [r0, #0]
    d784:	f7ff befa 	b.w	d57c <handle_event>
    d788:	0001f1f0 	.word	0x0001f1f0

0000d78c <le_remote_feat_complete>:
{
    d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    d78e:	6885      	ldr	r5, [r0, #8]
{
    d790:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    d792:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    d796:	4630      	mov	r0, r6
    d798:	f002 fabc 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    d79c:	4604      	mov	r4, r0
    d79e:	b980      	cbnz	r0, d7c2 <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    d7a0:	466c      	mov	r4, sp
    d7a2:	b088      	sub	sp, #32
    d7a4:	466a      	mov	r2, sp
    d7a6:	4b0f      	ldr	r3, [pc, #60]	; (d7e4 <le_remote_feat_complete+0x58>)
    d7a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d7ac:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d7b0:	2303      	movs	r3, #3
    d7b2:	480d      	ldr	r0, [pc, #52]	; (d7e8 <le_remote_feat_complete+0x5c>)
    d7b4:	f842 3f10 	str.w	r3, [r2, #16]!
    d7b8:	f00e fdd6 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d7bc:	46a5      	mov	sp, r4
}
    d7be:	46bd      	mov	sp, r7
    d7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    d7c2:	782b      	ldrb	r3, [r5, #0]
    d7c4:	b923      	cbnz	r3, d7d0 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    d7c6:	2208      	movs	r2, #8
    d7c8:	1ce9      	adds	r1, r5, #3
    d7ca:	30b4      	adds	r0, #180	; 0xb4
    d7cc:	f00e fd3d 	bl	1c24a <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d7d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    d7d4:	1d20      	adds	r0, r4, #4
    d7d6:	f00e fdbc 	bl	1c352 <atomic_or>
	bt_conn_unref(conn);
    d7da:	4620      	mov	r0, r4
    d7dc:	f002 fa6a 	bl	fcb4 <bt_conn_unref>
    d7e0:	e7ed      	b.n	d7be <le_remote_feat_complete+0x32>
    d7e2:	bf00      	nop
    d7e4:	00020dd7 	.word	0x00020dd7
    d7e8:	0001ed9c 	.word	0x0001ed9c

0000d7ec <hci_cmd_done>:
{
    d7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7f0:	4606      	mov	r6, r0
    d7f2:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    d7f4:	7990      	ldrb	r0, [r2, #6]
{
    d7f6:	4688      	mov	r8, r1
    d7f8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    d7fa:	f005 f905 	bl	12a08 <net_buf_pool_get>
    d7fe:	4d41      	ldr	r5, [pc, #260]	; (d904 <hci_cmd_done+0x118>)
    d800:	4285      	cmp	r5, r0
    d802:	d018      	beq.n	d836 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    d804:	79a4      	ldrb	r4, [r4, #6]
    d806:	46e8      	mov	r8, sp
    d808:	4620      	mov	r0, r4
    d80a:	f005 f8fd 	bl	12a08 <net_buf_pool_get>
    d80e:	b08a      	sub	sp, #40	; 0x28
    d810:	466a      	mov	r2, sp
    d812:	4b3d      	ldr	r3, [pc, #244]	; (d908 <hci_cmd_done+0x11c>)
    d814:	e9c2 4007 	strd	r4, r0, [r2, #28]
    d818:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d81c:	2306      	movs	r3, #6
    d81e:	6255      	str	r5, [r2, #36]	; 0x24
    d820:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    d824:	4839      	ldr	r0, [pc, #228]	; (d90c <hci_cmd_done+0x120>)
    d826:	f842 3f10 	str.w	r3, [r2, #16]!
    d82a:	f00e fd9d 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d82e:	46c5      	mov	sp, r8
}
    d830:	46bd      	mov	sp, r7
    d832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    d836:	4620      	mov	r0, r4
    d838:	f005 f8ee 	bl	12a18 <net_buf_id>
    d83c:	f04f 090c 	mov.w	r9, #12
    d840:	4d33      	ldr	r5, [pc, #204]	; (d910 <hci_cmd_done+0x124>)
    d842:	fb09 5000 	mla	r0, r9, r0, r5
    d846:	8843      	ldrh	r3, [r0, #2]
    d848:	42b3      	cmp	r3, r6
    d84a:	d016      	beq.n	d87a <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    d84c:	4620      	mov	r0, r4
    d84e:	f005 f8e3 	bl	12a18 <net_buf_id>
    d852:	fb09 5000 	mla	r0, r9, r0, r5
    d856:	466c      	mov	r4, sp
    d858:	b088      	sub	sp, #32
    d85a:	466a      	mov	r2, sp
    d85c:	8843      	ldrh	r3, [r0, #2]
    d85e:	61d3      	str	r3, [r2, #28]
    d860:	2304      	movs	r3, #4
    d862:	492c      	ldr	r1, [pc, #176]	; (d914 <hci_cmd_done+0x128>)
    d864:	4829      	ldr	r0, [pc, #164]	; (d90c <hci_cmd_done+0x120>)
    d866:	e9c2 1605 	strd	r1, r6, [r2, #20]
    d86a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    d86e:	f842 3f10 	str.w	r3, [r2, #16]!
    d872:	f00e fd79 	bl	1c368 <z_log_msg_static_create.constprop.0>
    d876:	46a5      	mov	sp, r4
		return;
    d878:	e7da      	b.n	d830 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
    d87a:	4e27      	ldr	r6, [pc, #156]	; (d918 <hci_cmd_done+0x12c>)
    d87c:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
    d880:	b120      	cbz	r0, d88c <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
    d882:	f005 fb5b 	bl	12f3c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d886:	2300      	movs	r3, #0
    d888:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    d88c:	4620      	mov	r0, r4
    d88e:	f005 f8c3 	bl	12a18 <net_buf_id>
    d892:	260c      	movs	r6, #12
    d894:	fb06 5000 	mla	r0, r6, r0, r5
    d898:	6843      	ldr	r3, [r0, #4]
    d89a:	b1ab      	cbz	r3, d8c8 <hci_cmd_done+0xdc>
    d89c:	f1b8 0f00 	cmp.w	r8, #0
    d8a0:	d112      	bne.n	d8c8 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    d8a2:	4620      	mov	r0, r4
    d8a4:	f005 f8b8 	bl	12a18 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d8a8:	2101      	movs	r1, #1
    d8aa:	fb06 5000 	mla	r0, r6, r0, r5
    d8ae:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    d8b0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    d8b4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    d8b6:	f003 061f 	and.w	r6, r3, #31
    d8ba:	40b1      	lsls	r1, r6
	if (val) {
    d8bc:	095b      	lsrs	r3, r3, #5
    d8be:	b1da      	cbz	r2, d8f8 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d8c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d8c4:	f00e fd45 	bl	1c352 <atomic_or>
	if (cmd(buf)->sync) {
    d8c8:	4620      	mov	r0, r4
    d8ca:	f005 f8a5 	bl	12a18 <net_buf_id>
    d8ce:	260c      	movs	r6, #12
    d8d0:	fb06 5000 	mla	r0, r6, r0, r5
    d8d4:	6883      	ldr	r3, [r0, #8]
    d8d6:	2b00      	cmp	r3, #0
    d8d8:	d0aa      	beq.n	d830 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    d8da:	4620      	mov	r0, r4
    d8dc:	f005 f89c 	bl	12a18 <net_buf_id>
    d8e0:	4370      	muls	r0, r6
    d8e2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    d8e6:	4620      	mov	r0, r4
    d8e8:	f005 f896 	bl	12a18 <net_buf_id>
    d8ec:	fb06 5500 	mla	r5, r6, r0, r5
    d8f0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    d8f2:	f00a f9ef 	bl	17cd4 <z_impl_k_sem_give>
}
    d8f6:	e79b      	b.n	d830 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d8f8:	43c9      	mvns	r1, r1
    d8fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d8fe:	f00e fd36 	bl	1c36e <atomic_and.isra.0>
    d902:	e7e1      	b.n	d8c8 <hci_cmd_done+0xdc>
    d904:	200086d0 	.word	0x200086d0
    d908:	00020f79 	.word	0x00020f79
    d90c:	0001ed9c 	.word	0x0001ed9c
    d910:	20009668 	.word	0x20009668
    d914:	00020fae 	.word	0x00020fae
    d918:	20008000 	.word	0x20008000

0000d91c <hci_cmd_status>:
{
    d91c:	b538      	push	{r3, r4, r5, lr}
    d91e:	2104      	movs	r1, #4
    d920:	4604      	mov	r4, r0
    d922:	3008      	adds	r0, #8
    d924:	f005 fc0e 	bl	13144 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    d928:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    d92a:	7801      	ldrb	r1, [r0, #0]
    d92c:	4622      	mov	r2, r4
    d92e:	8840      	ldrh	r0, [r0, #2]
    d930:	f7ff ff5c 	bl	d7ec <hci_cmd_done>
	if (ncmd) {
    d934:	b125      	cbz	r5, d940 <hci_cmd_status+0x24>
}
    d936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    d93a:	4802      	ldr	r0, [pc, #8]	; (d944 <hci_cmd_status+0x28>)
    d93c:	f00a b9ca 	b.w	17cd4 <z_impl_k_sem_give>
    d940:	bd38      	pop	{r3, r4, r5, pc}
    d942:	bf00      	nop
    d944:	20008118 	.word	0x20008118

0000d948 <hci_cmd_complete>:
{
    d948:	b538      	push	{r3, r4, r5, lr}
    d94a:	2103      	movs	r1, #3
    d94c:	4604      	mov	r4, r0
    d94e:	3008      	adds	r0, #8
    d950:	f005 fbf8 	bl	13144 <net_buf_simple_pull_mem>
	status = buf->data[0];
    d954:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    d956:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    d958:	4622      	mov	r2, r4
    d95a:	7819      	ldrb	r1, [r3, #0]
    d95c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    d960:	f7ff ff44 	bl	d7ec <hci_cmd_done>
	if (ncmd) {
    d964:	b125      	cbz	r5, d970 <hci_cmd_complete+0x28>
}
    d966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d96a:	4802      	ldr	r0, [pc, #8]	; (d974 <hci_cmd_complete+0x2c>)
    d96c:	f00a b9b2 	b.w	17cd4 <z_impl_k_sem_give>
    d970:	bd38      	pop	{r3, r4, r5, pc}
    d972:	bf00      	nop
    d974:	20008118 	.word	0x20008118

0000d978 <hci_num_completed_packets>:
{
    d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    d97c:	2500      	movs	r5, #0
{
    d97e:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
    d980:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    d982:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    d986:	f8df a0fc 	ldr.w	sl, [pc, #252]	; da84 <hci_num_completed_packets+0x10c>
{
    d98a:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
    d98c:	f898 3000 	ldrb.w	r3, [r8]
    d990:	429d      	cmp	r5, r3
    d992:	db03      	blt.n	d99c <hci_num_completed_packets+0x24>
}
    d994:	371c      	adds	r7, #28
    d996:	46bd      	mov	sp, r7
    d998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    d99c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    d9a0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    d9a4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    d9a8:	4658      	mov	r0, fp
    d9aa:	f002 f9b3 	bl	fd14 <bt_conn_lookup_handle>
		if (!conn) {
    d9ae:	4604      	mov	r4, r0
    d9b0:	b1d8      	cbz	r0, d9ea <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    d9b2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    d9b6:	2e00      	cmp	r6, #0
    d9b8:	d039      	beq.n	da2e <hci_num_completed_packets+0xb6>
	__asm__ volatile(
    d9ba:	f04f 0320 	mov.w	r3, #32
    d9be:	f3ef 8211 	mrs	r2, BASEPRI
    d9c2:	f383 8812 	msr	BASEPRI_MAX, r3
    d9c6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    d9ca:	69e3      	ldr	r3, [r4, #28]
    d9cc:	b1f3      	cbz	r3, da0c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
    d9ce:	3b01      	subs	r3, #1
    d9d0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    d9d2:	f382 8811 	msr	BASEPRI, r2
    d9d6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    d9da:	4620      	mov	r0, r4
    d9dc:	f001 ff88 	bl	f8f0 <bt_conn_get_pkts>
    d9e0:	3e01      	subs	r6, #1
    d9e2:	f00a f977 	bl	17cd4 <z_impl_k_sem_give>
    d9e6:	b2b6      	uxth	r6, r6
    d9e8:	e7e5      	b.n	d9b6 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    d9ea:	466c      	mov	r4, sp
    d9ec:	b088      	sub	sp, #32
    d9ee:	466a      	mov	r2, sp
    d9f0:	4b25      	ldr	r3, [pc, #148]	; (da88 <hci_num_completed_packets+0x110>)
    d9f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d9f6:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    d9fa:	2303      	movs	r3, #3
    d9fc:	4823      	ldr	r0, [pc, #140]	; (da8c <hci_num_completed_packets+0x114>)
    d9fe:	f842 3f10 	str.w	r3, [r2, #16]!
    da02:	f00e fcb1 	bl	1c368 <z_log_msg_static_create.constprop.0>
    da06:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    da08:	3501      	adds	r5, #1
    da0a:	e7bf      	b.n	d98c <hci_num_completed_packets+0x14>
    da0c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    da0e:	b993      	cbnz	r3, da36 <hci_num_completed_packets+0xbe>
    da10:	f382 8811 	msr	BASEPRI, r2
    da14:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
    da18:	2302      	movs	r3, #2
    da1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    da1e:	481b      	ldr	r0, [pc, #108]	; (da8c <hci_num_completed_packets+0x114>)
    da20:	f8c7 a014 	str.w	sl, [r7, #20]
    da24:	613b      	str	r3, [r7, #16]
    da26:	f107 0210 	add.w	r2, r7, #16
    da2a:	f00e fc9d 	bl	1c368 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    da2e:	4620      	mov	r0, r4
    da30:	f002 f940 	bl	fcb4 <bt_conn_unref>
    da34:	e7e8      	b.n	da08 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    da36:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    da38:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    da3a:	428b      	cmp	r3, r1
	list->head = node;
    da3c:	6160      	str	r0, [r4, #20]
	list->tail = node;
    da3e:	bf08      	it	eq
    da40:	61a0      	streq	r0, [r4, #24]
    da42:	f382 8811 	msr	BASEPRI, r2
    da46:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    da4a:	f04f 0220 	mov.w	r2, #32
    da4e:	f3ef 8111 	mrs	r1, BASEPRI
    da52:	f382 8812 	msr	BASEPRI_MAX, r2
    da56:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    da5a:	68da      	ldr	r2, [r3, #12]
    da5c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    da5e:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    da62:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    da66:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    da68:	b94a      	cbnz	r2, da7e <hci_num_completed_packets+0x106>
	list->head = node;
    da6a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    da6e:	f381 8811 	msr	BASEPRI, r1
    da72:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    da76:	4658      	mov	r0, fp
    da78:	f00a fc9a 	bl	183b0 <k_work_submit>
    da7c:	e7ad      	b.n	d9da <hci_num_completed_packets+0x62>
	parent->next = child;
    da7e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    da80:	6263      	str	r3, [r4, #36]	; 0x24
}
    da82:	e7f4      	b.n	da6e <hci_num_completed_packets+0xf6>
    da84:	00020ffd 	.word	0x00020ffd
    da88:	00020fe1 	.word	0x00020fe1
    da8c:	0001ed9c 	.word	0x0001ed9c

0000da90 <bt_hci_cmd_state_set_init>:
{
    da90:	b510      	push	{r4, lr}
	state->bit = bit;
    da92:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    da96:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    da9a:	460c      	mov	r4, r1
	state->val = val;
    da9c:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    da9e:	f004 ffbb 	bl	12a18 <net_buf_id>
    daa2:	220c      	movs	r2, #12
    daa4:	4b02      	ldr	r3, [pc, #8]	; (dab0 <bt_hci_cmd_state_set_init+0x20>)
    daa6:	fb02 3300 	mla	r3, r2, r0, r3
    daaa:	605c      	str	r4, [r3, #4]
}
    daac:	bd10      	pop	{r4, pc}
    daae:	bf00      	nop
    dab0:	20009668 	.word	0x20009668

0000dab4 <bt_hci_cmd_create>:
{
    dab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    dab8:	f04f 32ff 	mov.w	r2, #4294967295
    dabc:	4606      	mov	r6, r0
    dabe:	f04f 33ff 	mov.w	r3, #4294967295
    dac2:	481e      	ldr	r0, [pc, #120]	; (db3c <bt_hci_cmd_create+0x88>)
    dac4:	460f      	mov	r7, r1
    dac6:	f00f fd62 	bl	1d58e <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    daca:	4604      	mov	r4, r0
    dacc:	b958      	cbnz	r0, dae6 <bt_hci_cmd_create+0x32>
    dace:	491c      	ldr	r1, [pc, #112]	; (db40 <bt_hci_cmd_create+0x8c>)
    dad0:	481c      	ldr	r0, [pc, #112]	; (db44 <bt_hci_cmd_create+0x90>)
    dad2:	f240 1301 	movw	r3, #257	; 0x101
    dad6:	4a1c      	ldr	r2, [pc, #112]	; (db48 <bt_hci_cmd_create+0x94>)
    dad8:	f00d fba8 	bl	1b22c <assert_print>
    dadc:	f240 1101 	movw	r1, #257	; 0x101
    dae0:	4819      	ldr	r0, [pc, #100]	; (db48 <bt_hci_cmd_create+0x94>)
    dae2:	f00d fb9c 	bl	1b21e <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    dae6:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    daea:	f100 0a08 	add.w	sl, r0, #8
    daee:	2101      	movs	r1, #1
    daf0:	4650      	mov	r0, sl
    daf2:	f005 f8df 	bl	12cb4 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    daf6:	4620      	mov	r0, r4
    daf8:	f884 8014 	strb.w	r8, [r4, #20]
    dafc:	f004 ff8c 	bl	12a18 <net_buf_id>
    db00:	f04f 090c 	mov.w	r9, #12
    db04:	4d11      	ldr	r5, [pc, #68]	; (db4c <bt_hci_cmd_create+0x98>)
    db06:	fb09 5000 	mla	r0, r9, r0, r5
    db0a:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    db0c:	4620      	mov	r0, r4
    db0e:	f004 ff83 	bl	12a18 <net_buf_id>
    db12:	fb09 5000 	mla	r0, r9, r0, r5
    db16:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    db1a:	4620      	mov	r0, r4
    db1c:	f004 ff7c 	bl	12a18 <net_buf_id>
    db20:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    db24:	2103      	movs	r1, #3
    db26:	4650      	mov	r0, sl
    db28:	f8c5 8004 	str.w	r8, [r5, #4]
    db2c:	f005 fb28 	bl	13180 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    db30:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    db32:	7087      	strb	r7, [r0, #2]
}
    db34:	4620      	mov	r0, r4
    db36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db3a:	bf00      	nop
    db3c:	200086d0 	.word	0x200086d0
    db40:	00020d91 	.word	0x00020d91
    db44:	0001f995 	.word	0x0001f995
    db48:	00020ea4 	.word	0x00020ea4
    db4c:	20009668 	.word	0x20009668

0000db50 <bt_hci_cmd_send_sync>:
{
    db50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    db54:	b087      	sub	sp, #28
    db56:	4680      	mov	r8, r0
    db58:	4615      	mov	r5, r2
	if (!buf) {
    db5a:	460c      	mov	r4, r1
{
    db5c:	af00      	add	r7, sp, #0
	if (!buf) {
    db5e:	b921      	cbnz	r1, db6a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    db60:	f7ff ffa8 	bl	dab4 <bt_hci_cmd_create>
		if (!buf) {
    db64:	4604      	mov	r4, r0
    db66:	2800      	cmp	r0, #0
    db68:	d05a      	beq.n	dc20 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    db6a:	2201      	movs	r2, #1
    db6c:	2100      	movs	r1, #0
    db6e:	4638      	mov	r0, r7
    db70:	f010 fd37 	bl	1e5e2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    db74:	4620      	mov	r0, r4
    db76:	f004 ff4f 	bl	12a18 <net_buf_id>
    db7a:	230c      	movs	r3, #12
    db7c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; dc28 <bt_hci_cmd_send_sync+0xd8>
    db80:	fb03 9000 	mla	r0, r3, r0, r9
    db84:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    db86:	4620      	mov	r0, r4
    db88:	f005 fa1c 	bl	12fc4 <net_buf_ref>
    db8c:	4601      	mov	r1, r0
    db8e:	4827      	ldr	r0, [pc, #156]	; (dc2c <bt_hci_cmd_send_sync+0xdc>)
    db90:	f005 f9a4 	bl	12edc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    db94:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    db98:	2300      	movs	r3, #0
    db9a:	4638      	mov	r0, r7
    db9c:	f00a f8de 	bl	17d5c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    dba0:	4606      	mov	r6, r0
    dba2:	b180      	cbz	r0, dbc6 <bt_hci_cmd_send_sync+0x76>
    dba4:	f240 1349 	movw	r3, #329	; 0x149
    dba8:	4a21      	ldr	r2, [pc, #132]	; (dc30 <bt_hci_cmd_send_sync+0xe0>)
    dbaa:	4922      	ldr	r1, [pc, #136]	; (dc34 <bt_hci_cmd_send_sync+0xe4>)
    dbac:	4822      	ldr	r0, [pc, #136]	; (dc38 <bt_hci_cmd_send_sync+0xe8>)
    dbae:	f00d fb3d 	bl	1b22c <assert_print>
    dbb2:	4631      	mov	r1, r6
    dbb4:	4821      	ldr	r0, [pc, #132]	; (dc3c <bt_hci_cmd_send_sync+0xec>)
    dbb6:	f00d fb39 	bl	1b22c <assert_print>
    dbba:	4040      	eors	r0, r0
    dbbc:	f380 8811 	msr	BASEPRI, r0
    dbc0:	f04f 0003 	mov.w	r0, #3
    dbc4:	df02      	svc	2
	status = cmd(buf)->status;
    dbc6:	4620      	mov	r0, r4
    dbc8:	f004 ff26 	bl	12a18 <net_buf_id>
    dbcc:	230c      	movs	r3, #12
    dbce:	4358      	muls	r0, r3
    dbd0:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    dbd4:	b1e6      	cbz	r6, dc10 <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    dbd6:	466d      	mov	r5, sp
    dbd8:	b088      	sub	sp, #32
    dbda:	466a      	mov	r2, sp
    dbdc:	4b18      	ldr	r3, [pc, #96]	; (dc40 <bt_hci_cmd_send_sync+0xf0>)
    dbde:	61d6      	str	r6, [r2, #28]
    dbe0:	e9c2 3805 	strd	r3, r8, [r2, #20]
    dbe4:	2304      	movs	r3, #4
    dbe6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    dbea:	4816      	ldr	r0, [pc, #88]	; (dc44 <bt_hci_cmd_send_sync+0xf4>)
    dbec:	f842 3f10 	str.w	r3, [r2, #16]!
    dbf0:	f00e fbba 	bl	1c368 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    dbf4:	4620      	mov	r0, r4
    dbf6:	46ad      	mov	sp, r5
    dbf8:	f005 f9a0 	bl	12f3c <net_buf_unref>
			return -ECONNREFUSED;
    dbfc:	2e09      	cmp	r6, #9
    dbfe:	bf14      	ite	ne
    dc00:	f06f 0004 	mvnne.w	r0, #4
    dc04:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    dc08:	371c      	adds	r7, #28
    dc0a:	46bd      	mov	sp, r7
    dc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    dc10:	b115      	cbz	r5, dc18 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
    dc12:	602c      	str	r4, [r5, #0]
	return 0;
    dc14:	2000      	movs	r0, #0
    dc16:	e7f7      	b.n	dc08 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
    dc18:	4620      	mov	r0, r4
    dc1a:	f005 f98f 	bl	12f3c <net_buf_unref>
    dc1e:	e7f9      	b.n	dc14 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
    dc20:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dc24:	e7f0      	b.n	dc08 <bt_hci_cmd_send_sync+0xb8>
    dc26:	bf00      	nop
    dc28:	20009668 	.word	0x20009668
    dc2c:	2000813c 	.word	0x2000813c
    dc30:	00020ea4 	.word	0x00020ea4
    dc34:	0001fe5e 	.word	0x0001fe5e
    dc38:	0001f995 	.word	0x0001f995
    dc3c:	00021014 	.word	0x00021014
    dc40:	00021034 	.word	0x00021034
    dc44:	0001ed9c 	.word	0x0001ed9c

0000dc48 <hci_le_read_max_data_len>:
{
    dc48:	b570      	push	{r4, r5, r6, lr}
    dc4a:	b088      	sub	sp, #32
    dc4c:	4606      	mov	r6, r0
    dc4e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    dc50:	f242 002f 	movw	r0, #8239	; 0x202f
    dc54:	2100      	movs	r1, #0
    dc56:	aa01      	add	r2, sp, #4
    dc58:	f7ff ff7a 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    dc5c:	4604      	mov	r4, r0
    dc5e:	b160      	cbz	r0, dc7a <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
    dc60:	4b0b      	ldr	r3, [pc, #44]	; (dc90 <hci_le_read_max_data_len+0x48>)
    dc62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dc66:	9307      	str	r3, [sp, #28]
    dc68:	2302      	movs	r3, #2
    dc6a:	480a      	ldr	r0, [pc, #40]	; (dc94 <hci_le_read_max_data_len+0x4c>)
    dc6c:	aa06      	add	r2, sp, #24
    dc6e:	9306      	str	r3, [sp, #24]
    dc70:	f00e fb7a 	bl	1c368 <z_log_msg_static_create.constprop.0>
}
    dc74:	4620      	mov	r0, r4
    dc76:	b008      	add	sp, #32
    dc78:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    dc7a:	9801      	ldr	r0, [sp, #4]
    dc7c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    dc7e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    dc82:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    dc84:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    dc88:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    dc8a:	f005 f957 	bl	12f3c <net_buf_unref>
	return 0;
    dc8e:	e7f1      	b.n	dc74 <hci_le_read_max_data_len+0x2c>
    dc90:	00021050 	.word	0x00021050
    dc94:	0001ed9c 	.word	0x0001ed9c

0000dc98 <bt_hci_le_rand>:
{
    dc98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    dc9a:	4b14      	ldr	r3, [pc, #80]	; (dcec <bt_hci_le_rand+0x54>)
{
    dc9c:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    dc9e:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
    dca2:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    dca4:	2b00      	cmp	r3, #0
    dca6:	da1d      	bge.n	dce4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    dca8:	b914      	cbnz	r4, dcb0 <bt_hci_le_rand+0x18>
	return 0;
    dcaa:	4620      	mov	r0, r4
}
    dcac:	b003      	add	sp, #12
    dcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    dcb0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    dcb2:	f04f 0100 	mov.w	r1, #0
    dcb6:	f242 0018 	movw	r0, #8216	; 0x2018
    dcba:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    dcbc:	4626      	mov	r6, r4
    dcbe:	bf28      	it	cs
    dcc0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    dcc2:	f7ff ff45 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    dcc6:	2800      	cmp	r0, #0
    dcc8:	d1f0      	bne.n	dcac <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    dcca:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    dccc:	4632      	mov	r2, r6
    dcce:	68b9      	ldr	r1, [r7, #8]
    dcd0:	4628      	mov	r0, r5
    dcd2:	3101      	adds	r1, #1
    dcd4:	f00e fab9 	bl	1c24a <memcpy>
		net_buf_unref(rsp);
    dcd8:	4638      	mov	r0, r7
    dcda:	f005 f92f 	bl	12f3c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    dcde:	4435      	add	r5, r6
		len -= count;
    dce0:	1ba4      	subs	r4, r4, r6
    dce2:	e7e1      	b.n	dca8 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    dce4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    dce8:	e7e0      	b.n	dcac <bt_hci_le_rand+0x14>
    dcea:	bf00      	nop
    dcec:	20008000 	.word	0x20008000

0000dcf0 <bt_hci_le_enh_conn_complete>:
{
    dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcf4:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dcf6:	f8b0 9001 	ldrh.w	r9, [r0, #1]
    dcfa:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
    dcfc:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    dd00:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    dd04:	4aa9      	ldr	r2, [pc, #676]	; (dfac <bt_hci_le_enh_conn_complete+0x2bc>)
    dd06:	b29b      	uxth	r3, r3
    dd08:	8811      	ldrh	r1, [r2, #0]
{
    dd0a:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
    dd0c:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
    dd0e:	bf08      	it	eq
    dd10:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
    dd12:	7804      	ldrb	r4, [r0, #0]
			return true;
    dd14:	bf08      	it	eq
    dd16:	2601      	moveq	r6, #1
{
    dd18:	af02      	add	r7, sp, #8
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd1a:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
    dd1e:	b3a4      	cbz	r4, dd8a <bt_hci_le_enh_conn_complete+0x9a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    dd20:	2c3c      	cmp	r4, #60	; 0x3c
    dd22:	d122      	bne.n	dd6a <bt_hci_le_enh_conn_complete+0x7a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    dd24:	f001 fa0e 	bl	f144 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    dd28:	f06f 0180 	mvn.w	r1, #128	; 0x80
    dd2c:	3010      	adds	r0, #16
    dd2e:	f00e fb1e 	bl	1c36e <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    dd32:	2000      	movs	r0, #0
    dd34:	f7ff fac2 	bl	d2bc <find_pending_connect.part.0>
		if (!conn) {
    dd38:	4605      	mov	r5, r0
    dd3a:	b970      	cbnz	r0, dd5a <bt_hci_le_enh_conn_complete+0x6a>
			BT_ERR("No pending peripheral connection");
    dd3c:	4b9c      	ldr	r3, [pc, #624]	; (dfb0 <bt_hci_le_enh_conn_complete+0x2c0>)
    dd3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dd42:	627b      	str	r3, [r7, #36]	; 0x24
    dd44:	2302      	movs	r3, #2
    dd46:	489b      	ldr	r0, [pc, #620]	; (dfb4 <bt_hci_le_enh_conn_complete+0x2c4>)
    dd48:	623b      	str	r3, [r7, #32]
    dd4a:	f107 0220 	add.w	r2, r7, #32
    dd4e:	f00e fb0b 	bl	1c368 <z_log_msg_static_create.constprop.0>
}
    dd52:	372c      	adds	r7, #44	; 0x2c
    dd54:	46bd      	mov	sp, r7
    dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    dd5a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    dd5c:	2100      	movs	r1, #0
    dd5e:	f001 ffe1 	bl	fd24 <bt_conn_set_state>
		bt_conn_unref(conn);
    dd62:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    dd64:	f001 ffa6 	bl	fcb4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    dd68:	e7f3      	b.n	dd52 <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    dd6a:	466d      	mov	r5, sp
    dd6c:	b088      	sub	sp, #32
    dd6e:	aa02      	add	r2, sp, #8
    dd70:	4b91      	ldr	r3, [pc, #580]	; (dfb8 <bt_hci_le_enh_conn_complete+0x2c8>)
    dd72:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    dd76:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dd7a:	2303      	movs	r3, #3
    dd7c:	488d      	ldr	r0, [pc, #564]	; (dfb4 <bt_hci_le_enh_conn_complete+0x2c4>)
    dd7e:	f842 3f10 	str.w	r3, [r2, #16]!
    dd82:	f00e faf1 	bl	1c368 <z_log_msg_static_create.constprop.0>
    dd86:	46ad      	mov	sp, r5
		return;
    dd88:	e7e3      	b.n	dd52 <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    dd8a:	7903      	ldrb	r3, [r0, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    dd8c:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    dd90:	3b02      	subs	r3, #2
    dd92:	2b01      	cmp	r3, #1
    dd94:	d82d      	bhi.n	ddf2 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    dd96:	4651      	mov	r1, sl
    dd98:	f107 0010 	add.w	r0, r7, #16
    dd9c:	f00e fad6 	bl	1c34c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    dda0:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
    dda2:	2206      	movs	r2, #6
    dda4:	3b02      	subs	r3, #2
    dda6:	743b      	strb	r3, [r7, #16]
    dda8:	f105 0111 	add.w	r1, r5, #17
    ddac:	f107 0009 	add.w	r0, r7, #9
    ddb0:	f00e fa4b 	bl	1c24a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    ddb4:	2301      	movs	r3, #1
    ddb6:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    ddb8:	78eb      	ldrb	r3, [r5, #3]
    ddba:	2b01      	cmp	r3, #1
    ddbc:	d02e      	beq.n	de1c <bt_hci_le_enh_conn_complete+0x12c>
		BT_ERR("No pending conn for peer %s",
    ddbe:	4650      	mov	r0, sl
    ddc0:	f7ff f94e 	bl	d060 <bt_addr_le_str>
    ddc4:	466c      	mov	r4, sp
    ddc6:	b088      	sub	sp, #32
    ddc8:	aa02      	add	r2, sp, #8
    ddca:	4b7c      	ldr	r3, [pc, #496]	; (dfbc <bt_hci_le_enh_conn_complete+0x2cc>)
    ddcc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    ddd0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ddd4:	f44f 7300 	mov.w	r3, #512	; 0x200
    ddd8:	8393      	strh	r3, [r2, #28]
    ddda:	4b79      	ldr	r3, [pc, #484]	; (dfc0 <bt_hci_le_enh_conn_complete+0x2d0>)
    dddc:	4875      	ldr	r0, [pc, #468]	; (dfb4 <bt_hci_le_enh_conn_complete+0x2c4>)
    ddde:	f842 3f10 	str.w	r3, [r2, #16]!
    dde2:	f00e fac1 	bl	1c368 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    dde6:	211f      	movs	r1, #31
    dde8:	46a5      	mov	sp, r4
    ddea:	4640      	mov	r0, r8
    ddec:	f00e fac7 	bl	1c37e <bt_hci_disconnect>
		return;
    ddf0:	e7af      	b.n	dd52 <bt_hci_le_enh_conn_complete+0x62>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    ddf2:	78c3      	ldrb	r3, [r0, #3]
		bt_addr_le_copy(&id_addr,
    ddf4:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    ddf6:	2b01      	cmp	r3, #1
    ddf8:	bf04      	itt	eq
    ddfa:	4b72      	ldreq	r3, [pc, #456]	; (dfc4 <bt_hci_le_enh_conn_complete+0x2d4>)
    ddfc:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    de00:	4620      	mov	r0, r4
    de02:	f00e fb6b 	bl	1c4dc <bt_lookup_id_addr>
    de06:	4601      	mov	r1, r0
    de08:	f107 0010 	add.w	r0, r7, #16
    de0c:	f00e fa9e 	bl	1c34c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    de10:	4651      	mov	r1, sl
    de12:	f107 0008 	add.w	r0, r7, #8
    de16:	f00e fa99 	bl	1c34c <bt_addr_le_copy>
    de1a:	e7cd      	b.n	ddb8 <bt_hci_le_enh_conn_complete+0xc8>
    de1c:	f107 0010 	add.w	r0, r7, #16
    de20:	f7ff fa4c 	bl	d2bc <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    de24:	78eb      	ldrb	r3, [r5, #3]
    de26:	4604      	mov	r4, r0
    de28:	2b01      	cmp	r3, #1
    de2a:	d10a      	bne.n	de42 <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    de2c:	f001 f98a 	bl	f144 <bt_le_adv_lookup_legacy>
    de30:	4683      	mov	fp, r0
    de32:	f06f 0180 	mvn.w	r1, #128	; 0x80
    de36:	3010      	adds	r0, #16
    de38:	f00e fa99 	bl	1c36e <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    de3c:	4658      	mov	r0, fp
    de3e:	f00e fc4c 	bl	1c6da <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    de42:	2c00      	cmp	r4, #0
    de44:	d0bb      	beq.n	ddbe <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
    de46:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    de48:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
    de4c:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    de50:	f00e fa7c 	bl	1c34c <bt_addr_le_copy>
	conn->err = 0U;
    de54:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    de56:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    de5a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    de5e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    de62:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    de66:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    de6a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
    de6e:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    de70:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    de72:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    de74:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    de76:	d116      	bne.n	dea6 <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    de78:	f107 0108 	add.w	r1, r7, #8
    de7c:	f104 0097 	add.w	r0, r4, #151	; 0x97
    de80:	f00e fa64 	bl	1c34c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    de84:	f001 f95e 	bl	f144 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    de88:	7a21      	ldrb	r1, [r4, #8]
    de8a:	4d4e      	ldr	r5, [pc, #312]	; (dfc4 <bt_hci_le_enh_conn_complete+0x2d4>)
    de8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    de90:	4429      	add	r1, r5
    de92:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    de96:	f00e fa59 	bl	1c34c <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    de9a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    de9e:	065d      	lsls	r5, r3, #25
    dea0:	d501      	bpl.n	dea6 <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
    dea2:	f001 fb19 	bl	f4d8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    dea6:	2107      	movs	r1, #7
    dea8:	4620      	mov	r0, r4
    deaa:	f001 ff3b 	bl	fd24 <bt_conn_set_state>
	if (is_disconnected) {
    deae:	b11e      	cbz	r6, deb8 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    deb0:	2101      	movs	r1, #1
    deb2:	4620      	mov	r0, r4
    deb4:	f001 ff36 	bl	fd24 <bt_conn_set_state>
	bt_conn_connected(conn);
    deb8:	4620      	mov	r0, r4
    deba:	f00e fc42 	bl	1c742 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    debe:	7aa3      	ldrb	r3, [r4, #10]
    dec0:	2b07      	cmp	r3, #7
    dec2:	d16e      	bne.n	dfa2 <bt_hci_le_enh_conn_complete+0x2b2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dec4:	1d23      	adds	r3, r4, #4
    dec6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    deca:	f413 6f00 	tst.w	r3, #2048	; 0x800
    dece:	4d3d      	ldr	r5, [pc, #244]	; (dfc4 <bt_hci_le_enh_conn_complete+0x2d4>)
    ded0:	d129      	bne.n	df26 <bt_hci_le_enh_conn_complete+0x236>
    ded2:	78e3      	ldrb	r3, [r4, #3]
    ded4:	b11b      	cbz	r3, dede <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    ded6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    deda:	0718      	lsls	r0, r3, #28
    dedc:	d523      	bpl.n	df26 <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    dede:	2102      	movs	r1, #2
    dee0:	f242 0016 	movw	r0, #8214	; 0x2016
    dee4:	f7ff fde6 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    dee8:	4606      	mov	r6, r0
    deea:	2800      	cmp	r0, #0
    deec:	d05b      	beq.n	dfa6 <bt_hci_le_enh_conn_complete+0x2b6>
    deee:	2102      	movs	r1, #2
    def0:	3008      	adds	r0, #8
    def2:	f005 f945 	bl	13180 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    def6:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    def8:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    defa:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    defc:	4631      	mov	r1, r6
    defe:	f242 0016 	movw	r0, #8214	; 0x2016
    df02:	f7ff fe25 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    df06:	b170      	cbz	r0, df26 <bt_hci_le_enh_conn_complete+0x236>
			BT_ERR("Failed read remote features (%d)", err);
    df08:	466e      	mov	r6, sp
    df0a:	b088      	sub	sp, #32
    df0c:	aa02      	add	r2, sp, #8
    df0e:	4b2e      	ldr	r3, [pc, #184]	; (dfc8 <bt_hci_le_enh_conn_complete+0x2d8>)
    df10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df14:	e9c2 3005 	strd	r3, r0, [r2, #20]
    df18:	2303      	movs	r3, #3
    df1a:	4826      	ldr	r0, [pc, #152]	; (dfb4 <bt_hci_le_enh_conn_complete+0x2c4>)
    df1c:	f842 3f10 	str.w	r3, [r2, #16]!
    df20:	f00e fa22 	bl	1c368 <z_log_msg_static_create.constprop.0>
    df24:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    df26:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    df2a:	07d9      	lsls	r1, r3, #31
    df2c:	d516      	bpl.n	df5c <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    df2e:	2100      	movs	r1, #0
    df30:	2302      	movs	r3, #2
    df32:	4620      	mov	r0, r4
    df34:	461a      	mov	r2, r3
    df36:	9100      	str	r1, [sp, #0]
    df38:	f00e fa5a 	bl	1c3f0 <bt_le_set_phy>
		if (err) {
    df3c:	b170      	cbz	r0, df5c <bt_hci_le_enh_conn_complete+0x26c>
			BT_ERR("Failed LE Set PHY (%d)", err);
    df3e:	466e      	mov	r6, sp
    df40:	b088      	sub	sp, #32
    df42:	aa02      	add	r2, sp, #8
    df44:	4b21      	ldr	r3, [pc, #132]	; (dfcc <bt_hci_le_enh_conn_complete+0x2dc>)
    df46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df4a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    df4e:	2303      	movs	r3, #3
    df50:	4818      	ldr	r0, [pc, #96]	; (dfb4 <bt_hci_le_enh_conn_complete+0x2c4>)
    df52:	f842 3f10 	str.w	r3, [r2, #16]!
    df56:	f00e fa07 	bl	1c368 <z_log_msg_static_create.constprop.0>
    df5a:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    df5c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    df60:	069a      	lsls	r2, r3, #26
    df62:	d51e      	bpl.n	dfa2 <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    df64:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    df68:	689b      	ldr	r3, [r3, #8]
    df6a:	079b      	lsls	r3, r3, #30
    df6c:	d519      	bpl.n	dfa2 <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    df6e:	1db9      	adds	r1, r7, #6
    df70:	1d38      	adds	r0, r7, #4
    df72:	f7ff fe69 	bl	dc48 <hci_le_read_max_data_len>
			if (!err) {
    df76:	b9a0      	cbnz	r0, dfa2 <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
    df78:	4620      	mov	r0, r4
    df7a:	88fa      	ldrh	r2, [r7, #6]
    df7c:	88b9      	ldrh	r1, [r7, #4]
    df7e:	f00e fa19 	bl	1c3b4 <bt_le_set_data_len>
				if (err) {
    df82:	b170      	cbz	r0, dfa2 <bt_hci_le_enh_conn_complete+0x2b2>
					BT_ERR("Failed to set data len (%d)", err);
    df84:	466d      	mov	r5, sp
    df86:	b088      	sub	sp, #32
    df88:	aa02      	add	r2, sp, #8
    df8a:	4b11      	ldr	r3, [pc, #68]	; (dfd0 <bt_hci_le_enh_conn_complete+0x2e0>)
    df8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df90:	e9c2 3005 	strd	r3, r0, [r2, #20]
    df94:	2303      	movs	r3, #3
    df96:	4807      	ldr	r0, [pc, #28]	; (dfb4 <bt_hci_le_enh_conn_complete+0x2c4>)
    df98:	f842 3f10 	str.w	r3, [r2, #16]!
    df9c:	f00e f9e4 	bl	1c368 <z_log_msg_static_create.constprop.0>
    dfa0:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    dfa2:	4620      	mov	r0, r4
    dfa4:	e6de      	b.n	dd64 <bt_hci_le_enh_conn_complete+0x74>
		return -ENOBUFS;
    dfa6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dfaa:	e7ad      	b.n	df08 <bt_hci_le_enh_conn_complete+0x218>
    dfac:	20009af8 	.word	0x20009af8
    dfb0:	00021070 	.word	0x00021070
    dfb4:	0001ed9c 	.word	0x0001ed9c
    dfb8:	00021091 	.word	0x00021091
    dfbc:	000210aa 	.word	0x000210aa
    dfc0:	01000003 	.word	0x01000003
    dfc4:	20008000 	.word	0x20008000
    dfc8:	000210c6 	.word	0x000210c6
    dfcc:	000210e7 	.word	0x000210e7
    dfd0:	000210fe 	.word	0x000210fe

0000dfd4 <le_legacy_conn_complete>:
{
    dfd4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    dfd6:	6881      	ldr	r1, [r0, #8]
{
    dfd8:	b088      	sub	sp, #32
	enh.status         = evt->status;
    dfda:	780b      	ldrb	r3, [r1, #0]
    dfdc:	4c16      	ldr	r4, [pc, #88]	; (e038 <le_legacy_conn_complete+0x64>)
    dfde:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    dfe2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    dfe6:	a801      	add	r0, sp, #4
	enh.handle         = evt->handle;
    dfe8:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    dfec:	78cb      	ldrb	r3, [r1, #3]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    dfee:	3104      	adds	r1, #4
	enh.role           = evt->role;
    dff0:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    dff4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    dff8:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    dffc:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    e000:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    e004:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    e008:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    e00c:	7b4b      	ldrb	r3, [r1, #13]
    e00e:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    e012:	f00e f99b 	bl	1c34c <bt_addr_le_copy>
    e016:	4621      	mov	r1, r4
    e018:	2206      	movs	r2, #6
    e01a:	f10d 000b 	add.w	r0, sp, #11
    e01e:	f00e f914 	bl	1c24a <memcpy>
    e022:	2206      	movs	r2, #6
    e024:	4621      	mov	r1, r4
    e026:	f10d 0011 	add.w	r0, sp, #17
    e02a:	f00e f90e 	bl	1c24a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    e02e:	4668      	mov	r0, sp
    e030:	f7ff fe5e 	bl	dcf0 <bt_hci_le_enh_conn_complete>
}
    e034:	b008      	add	sp, #32
    e036:	bd10      	pop	{r4, pc}
    e038:	00020c84 	.word	0x00020c84

0000e03c <bt_send>:
	return bt_dev.drv->send(buf);
    e03c:	4b02      	ldr	r3, [pc, #8]	; (e048 <bt_send+0xc>)
    e03e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    e042:	695b      	ldr	r3, [r3, #20]
    e044:	4718      	bx	r3
    e046:	bf00      	nop
    e048:	20008000 	.word	0x20008000

0000e04c <bt_hci_cmd_send>:
{
    e04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e04e:	4605      	mov	r5, r0
	if (!buf) {
    e050:	460c      	mov	r4, r1
{
    e052:	af00      	add	r7, sp, #0
	if (!buf) {
    e054:	b919      	cbnz	r1, e05e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    e056:	f7ff fd2d 	bl	dab4 <bt_hci_cmd_create>
		if (!buf) {
    e05a:	4604      	mov	r4, r0
    e05c:	b318      	cbz	r0, e0a6 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    e05e:	f640 4335 	movw	r3, #3125	; 0xc35
    e062:	429d      	cmp	r5, r3
    e064:	d119      	bne.n	e09a <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
    e066:	4620      	mov	r0, r4
    e068:	f7ff ffe8 	bl	e03c <bt_send>
		if (err) {
    e06c:	4605      	mov	r5, r0
    e06e:	b188      	cbz	r0, e094 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
    e070:	466e      	mov	r6, sp
    e072:	b088      	sub	sp, #32
    e074:	466a      	mov	r2, sp
    e076:	4b0d      	ldr	r3, [pc, #52]	; (e0ac <bt_hci_cmd_send+0x60>)
    e078:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e07c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e080:	2303      	movs	r3, #3
    e082:	480b      	ldr	r0, [pc, #44]	; (e0b0 <bt_hci_cmd_send+0x64>)
    e084:	f842 3f10 	str.w	r3, [r2, #16]!
    e088:	f00e f96e 	bl	1c368 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    e08c:	4620      	mov	r0, r4
    e08e:	46b5      	mov	sp, r6
    e090:	f004 ff54 	bl	12f3c <net_buf_unref>
}
    e094:	4628      	mov	r0, r5
    e096:	46bd      	mov	sp, r7
    e098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    e09a:	4621      	mov	r1, r4
    e09c:	4805      	ldr	r0, [pc, #20]	; (e0b4 <bt_hci_cmd_send+0x68>)
    e09e:	f004 ff1d 	bl	12edc <net_buf_put>
	return 0;
    e0a2:	2500      	movs	r5, #0
    e0a4:	e7f6      	b.n	e094 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    e0a6:	f06f 0568 	mvn.w	r5, #104	; 0x68
    e0aa:	e7f3      	b.n	e094 <bt_hci_cmd_send+0x48>
    e0ac:	0002111a 	.word	0x0002111a
    e0b0:	0001ed9c 	.word	0x0001ed9c
    e0b4:	2000813c 	.word	0x2000813c

0000e0b8 <bt_hci_host_num_completed_packets>:
{
    e0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0bc:	b086      	sub	sp, #24
    e0be:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    e0c0:	8ac5      	ldrh	r5, [r0, #22]
	uint8_t index = acl(buf)->index;
    e0c2:	7d46      	ldrb	r6, [r0, #21]
{
    e0c4:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    e0c6:	7980      	ldrb	r0, [r0, #6]
    e0c8:	f004 fc9e 	bl	12a08 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    e0cc:	4621      	mov	r1, r4
    e0ce:	f010 fa7e 	bl	1e5ce <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    e0d2:	4b2d      	ldr	r3, [pc, #180]	; (e188 <bt_hci_host_num_completed_packets+0xd0>)
    e0d4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    e0d8:	069b      	lsls	r3, r3, #26
    e0da:	d513      	bpl.n	e104 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
    e0dc:	4630      	mov	r0, r6
    e0de:	f002 f9fd 	bl	104dc <bt_conn_lookup_index>
	if (!conn) {
    e0e2:	4604      	mov	r4, r0
    e0e4:	b990      	cbnz	r0, e10c <bt_hci_host_num_completed_packets+0x54>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
    e0e6:	466c      	mov	r4, sp
    e0e8:	b088      	sub	sp, #32
    e0ea:	466a      	mov	r2, sp
    e0ec:	4b27      	ldr	r3, [pc, #156]	; (e18c <bt_hci_host_num_completed_packets+0xd4>)
    e0ee:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e0f2:	e9c2 3605 	strd	r3, r6, [r2, #20]
    e0f6:	2303      	movs	r3, #3
    e0f8:	4825      	ldr	r0, [pc, #148]	; (e190 <bt_hci_host_num_completed_packets+0xd8>)
    e0fa:	f842 3f10 	str.w	r3, [r2, #16]!
    e0fe:	f00e f933 	bl	1c368 <z_log_msg_static_create.constprop.0>
    e102:	46a5      	mov	sp, r4
}
    e104:	3718      	adds	r7, #24
    e106:	46bd      	mov	sp, r7
    e108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
    e10c:	7a83      	ldrb	r3, [r0, #10]
    e10e:	3b07      	subs	r3, #7
    e110:	2b01      	cmp	r3, #1
    e112:	d90e      	bls.n	e132 <bt_hci_host_num_completed_packets+0x7a>
		BT_WARN("Not reporting packet for non-connected conn");
    e114:	4b1f      	ldr	r3, [pc, #124]	; (e194 <bt_hci_host_num_completed_packets+0xdc>)
    e116:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e11a:	617b      	str	r3, [r7, #20]
    e11c:	2302      	movs	r3, #2
    e11e:	481c      	ldr	r0, [pc, #112]	; (e190 <bt_hci_host_num_completed_packets+0xd8>)
    e120:	613b      	str	r3, [r7, #16]
    e122:	f107 0210 	add.w	r2, r7, #16
    e126:	f00e f91f 	bl	1c368 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    e12a:	4620      	mov	r0, r4
    e12c:	f001 fdc2 	bl	fcb4 <bt_conn_unref>
		return;
    e130:	e7e8      	b.n	e104 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
    e132:	f001 fdbf 	bl	fcb4 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    e136:	2105      	movs	r1, #5
    e138:	f640 4035 	movw	r0, #3125	; 0xc35
    e13c:	f7ff fcba 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    e140:	4604      	mov	r4, r0
    e142:	b958      	cbnz	r0, e15c <bt_hci_host_num_completed_packets+0xa4>
		BT_ERR("Unable to allocate new HCI command");
    e144:	4b14      	ldr	r3, [pc, #80]	; (e198 <bt_hci_host_num_completed_packets+0xe0>)
    e146:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e14a:	617b      	str	r3, [r7, #20]
    e14c:	2302      	movs	r3, #2
    e14e:	4810      	ldr	r0, [pc, #64]	; (e190 <bt_hci_host_num_completed_packets+0xd8>)
    e150:	613b      	str	r3, [r7, #16]
    e152:	f107 0210 	add.w	r2, r7, #16
    e156:	f00e f907 	bl	1c368 <z_log_msg_static_create.constprop.0>
		return;
    e15a:	e7d3      	b.n	e104 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
    e15c:	f100 0808 	add.w	r8, r0, #8
    e160:	2101      	movs	r1, #1
    e162:	4640      	mov	r0, r8
    e164:	f005 f80c 	bl	13180 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    e168:	2601      	movs	r6, #1
    e16a:	2104      	movs	r1, #4
    e16c:	7006      	strb	r6, [r0, #0]
    e16e:	4640      	mov	r0, r8
    e170:	f005 f806 	bl	13180 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    e174:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    e176:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    e178:	7086      	strb	r6, [r0, #2]
    e17a:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    e17c:	4621      	mov	r1, r4
    e17e:	f640 4035 	movw	r0, #3125	; 0xc35
    e182:	f7ff ff63 	bl	e04c <bt_hci_cmd_send>
    e186:	e7bd      	b.n	e104 <bt_hci_host_num_completed_packets+0x4c>
    e188:	20008000 	.word	0x20008000
    e18c:	0002113c 	.word	0x0002113c
    e190:	0001ed9c 	.word	0x0001ed9c
    e194:	00021165 	.word	0x00021165
    e198:	00021191 	.word	0x00021191

0000e19c <le_conn_param_req>:
{
    e19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1a0:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    e1a2:	6883      	ldr	r3, [r0, #8]
{
    e1a4:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    e1a6:	78d9      	ldrb	r1, [r3, #3]
    e1a8:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    e1aa:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    e1ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e1b2:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    e1b4:	7959      	ldrb	r1, [r3, #5]
    e1b6:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    e1b8:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    e1bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e1c0:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    e1c2:	799a      	ldrb	r2, [r3, #6]
    e1c4:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    e1c6:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    e1c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e1cc:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    e1ce:	7a1a      	ldrb	r2, [r3, #8]
    e1d0:	7a5b      	ldrb	r3, [r3, #9]
    e1d2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e1d6:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    e1d8:	f001 fd9c 	bl	fd14 <bt_conn_lookup_handle>
	if (!conn) {
    e1dc:	4606      	mov	r6, r0
    e1de:	b9b0      	cbnz	r0, e20e <le_conn_param_req+0x72>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e1e0:	466d      	mov	r5, sp
    e1e2:	b088      	sub	sp, #32
    e1e4:	466a      	mov	r2, sp
    e1e6:	4b20      	ldr	r3, [pc, #128]	; (e268 <le_conn_param_req+0xcc>)
    e1e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e1ec:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e1f0:	2303      	movs	r3, #3
    e1f2:	481e      	ldr	r0, [pc, #120]	; (e26c <le_conn_param_req+0xd0>)
    e1f4:	f842 3f10 	str.w	r3, [r2, #16]!
    e1f8:	f00e f8b6 	bl	1c368 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    e1fc:	2102      	movs	r1, #2
    e1fe:	46ad      	mov	sp, r5
    e200:	4620      	mov	r0, r4
    e202:	f00e f941 	bl	1c488 <le_conn_param_neg_reply>
}
    e206:	3708      	adds	r7, #8
    e208:	46bd      	mov	sp, r7
    e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    e20e:	4639      	mov	r1, r7
    e210:	f001 ff38 	bl	10084 <le_param_req>
    e214:	b938      	cbnz	r0, e226 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    e216:	211e      	movs	r1, #30
    e218:	4620      	mov	r0, r4
    e21a:	f00e f935 	bl	1c488 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    e21e:	4630      	mov	r0, r6
    e220:	f001 fd48 	bl	fcb4 <bt_conn_unref>
    e224:	e7ef      	b.n	e206 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    e226:	210e      	movs	r1, #14
    e228:	f242 0020 	movw	r0, #8224	; 0x2020
    e22c:	f7ff fc42 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    e230:	4605      	mov	r5, r0
    e232:	2800      	cmp	r0, #0
    e234:	d0f3      	beq.n	e21e <le_conn_param_req+0x82>
    e236:	210e      	movs	r1, #14
    e238:	3008      	adds	r0, #8
    e23a:	f004 ffa1 	bl	13180 <net_buf_simple_add>
    e23e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    e240:	220e      	movs	r2, #14
    e242:	2100      	movs	r1, #0
    e244:	f00e f80c 	bl	1c260 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    e248:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    e24c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    e24e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    e250:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    e252:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    e254:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    e258:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    e25a:	88bb      	ldrh	r3, [r7, #4]
    e25c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    e25e:	88fb      	ldrh	r3, [r7, #6]
    e260:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    e262:	f7ff fef3 	bl	e04c <bt_hci_cmd_send>
    e266:	e7da      	b.n	e21e <le_conn_param_req+0x82>
    e268:	00020dd7 	.word	0x00020dd7
    e26c:	0001ed9c 	.word	0x0001ed9c

0000e270 <hci_tx_thread>:
{
    e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    e274:	f8df 8154 	ldr.w	r8, [pc, #340]	; e3cc <hci_tx_thread+0x15c>
{
    e278:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
    e27a:	f8df 9154 	ldr.w	r9, [pc, #340]	; e3d0 <hci_tx_thread+0x160>
{
    e27e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    e280:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    e284:	4853      	ldr	r0, [pc, #332]	; (e3d4 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
    e286:	f36f 3394 	bfc	r3, #14, #7
    e28a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    e28e:	f001 fcaf 	bl	fbf0 <bt_conn_prepare_events>
    e292:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    e294:	f04f 32ff 	mov.w	r2, #4294967295
    e298:	f04f 33ff 	mov.w	r3, #4294967295
    e29c:	4629      	mov	r1, r5
    e29e:	484b      	ldr	r0, [pc, #300]	; (e3cc <hci_tx_thread+0x15c>)
    e2a0:	f00c fb8a 	bl	1a9b8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    e2a4:	b160      	cbz	r0, e2c0 <hci_tx_thread+0x50>
    e2a6:	f640 13da 	movw	r3, #2522	; 0x9da
    e2aa:	464a      	mov	r2, r9
    e2ac:	494a      	ldr	r1, [pc, #296]	; (e3d8 <hci_tx_thread+0x168>)
    e2ae:	484b      	ldr	r0, [pc, #300]	; (e3dc <hci_tx_thread+0x16c>)
    e2b0:	f00c ffbc 	bl	1b22c <assert_print>
    e2b4:	4040      	eors	r0, r0
    e2b6:	f380 8811 	msr	BASEPRI, r0
    e2ba:	f04f 0003 	mov.w	r0, #3
    e2be:	df02      	svc	2
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    e2c0:	f04f 0a03 	mov.w	sl, #3
{
    e2c4:	4e41      	ldr	r6, [pc, #260]	; (e3cc <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
    e2c6:	b915      	cbnz	r5, e2ce <hci_tx_thread+0x5e>
	z_impl_k_yield();
    e2c8:	f00b fabe 	bl	19848 <z_impl_k_yield>
	while (1) {
    e2cc:	e7d8      	b.n	e280 <hci_tx_thread+0x10>
		switch (ev->state) {
    e2ce:	68f3      	ldr	r3, [r6, #12]
    e2d0:	f3c3 3386 	ubfx	r3, r3, #14, #7
    e2d4:	2b01      	cmp	r3, #1
    e2d6:	d960      	bls.n	e39a <hci_tx_thread+0x12a>
    e2d8:	2b04      	cmp	r3, #4
    e2da:	d168      	bne.n	e3ae <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    e2dc:	7b33      	ldrb	r3, [r6, #12]
    e2de:	2b00      	cmp	r3, #0
    e2e0:	d15e      	bne.n	e3a0 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    e2e2:	2200      	movs	r2, #0
    e2e4:	2300      	movs	r3, #0
    e2e6:	483e      	ldr	r0, [pc, #248]	; (e3e0 <hci_tx_thread+0x170>)
    e2e8:	f004 fcb6 	bl	12c58 <net_buf_get>
	BT_ASSERT(buf);
    e2ec:	4604      	mov	r4, r0
    e2ee:	b960      	cbnz	r0, e30a <hci_tx_thread+0x9a>
    e2f0:	f640 1373 	movw	r3, #2419	; 0x973
    e2f4:	464a      	mov	r2, r9
    e2f6:	493b      	ldr	r1, [pc, #236]	; (e3e4 <hci_tx_thread+0x174>)
    e2f8:	4838      	ldr	r0, [pc, #224]	; (e3dc <hci_tx_thread+0x16c>)
    e2fa:	f00c ff97 	bl	1b22c <assert_print>
    e2fe:	4040      	eors	r0, r0
    e300:	f380 8811 	msr	BASEPRI, r0
    e304:	f04f 0003 	mov.w	r0, #3
    e308:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    e30a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; e3e8 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
    e30e:	f04f 33ff 	mov.w	r3, #4294967295
    e312:	f04f 32ff 	mov.w	r2, #4294967295
    e316:	4835      	ldr	r0, [pc, #212]	; (e3ec <hci_tx_thread+0x17c>)
    e318:	f009 fd20 	bl	17d5c <z_impl_k_sem_take>
    e31c:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
    e320:	b18b      	cbz	r3, e346 <hci_tx_thread+0xd6>
		BT_ERR("Uncleared pending sent_cmd");
    e322:	4b33      	ldr	r3, [pc, #204]	; (e3f0 <hci_tx_thread+0x180>)
    e324:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e328:	617b      	str	r3, [r7, #20]
    e32a:	2302      	movs	r3, #2
    e32c:	4831      	ldr	r0, [pc, #196]	; (e3f4 <hci_tx_thread+0x184>)
    e32e:	613b      	str	r3, [r7, #16]
    e330:	f107 0210 	add.w	r2, r7, #16
    e334:	f00e f818 	bl	1c368 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    e338:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
    e33c:	f004 fdfe 	bl	12f3c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e340:	2300      	movs	r3, #0
    e342:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    e346:	4620      	mov	r0, r4
    e348:	f004 fe3c 	bl	12fc4 <net_buf_ref>
    e34c:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
    e350:	4620      	mov	r0, r4
    e352:	f7ff fe73 	bl	e03c <bt_send>
	if (err) {
    e356:	b300      	cbz	r0, e39a <hci_tx_thread+0x12a>
		BT_ERR("Unable to send to driver (err %d)", err);
    e358:	46eb      	mov	fp, sp
    e35a:	b088      	sub	sp, #32
    e35c:	466a      	mov	r2, sp
    e35e:	4b26      	ldr	r3, [pc, #152]	; (e3f8 <hci_tx_thread+0x188>)
    e360:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e364:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e368:	2303      	movs	r3, #3
    e36a:	4822      	ldr	r0, [pc, #136]	; (e3f4 <hci_tx_thread+0x184>)
    e36c:	f842 3f10 	str.w	r3, [r2, #16]!
    e370:	f00d fffa 	bl	1c368 <z_log_msg_static_create.constprop.0>
    e374:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    e376:	481d      	ldr	r0, [pc, #116]	; (e3ec <hci_tx_thread+0x17c>)
    e378:	f009 fcac 	bl	17cd4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    e37c:	4620      	mov	r0, r4
    e37e:	f004 fb4b 	bl	12a18 <net_buf_id>
    e382:	220c      	movs	r2, #12
    e384:	4b1d      	ldr	r3, [pc, #116]	; (e3fc <hci_tx_thread+0x18c>)
    e386:	211f      	movs	r1, #31
    e388:	fb02 3000 	mla	r0, r2, r0, r3
    e38c:	4622      	mov	r2, r4
    e38e:	8840      	ldrh	r0, [r0, #2]
    e390:	f7ff fa2c 	bl	d7ec <hci_cmd_done>
		net_buf_unref(buf);
    e394:	4620      	mov	r0, r4
    e396:	f004 fdd1 	bl	12f3c <net_buf_unref>
	for (; count; ev++, count--) {
    e39a:	3614      	adds	r6, #20
    e39c:	3d01      	subs	r5, #1
    e39e:	e792      	b.n	e2c6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    e3a0:	2b01      	cmp	r3, #1
    e3a2:	d1fa      	bne.n	e39a <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
    e3a4:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    e3a6:	3838      	subs	r0, #56	; 0x38
    e3a8:	f002 f82c 	bl	10404 <bt_conn_process_tx>
    e3ac:	e7f5      	b.n	e39a <hci_tx_thread+0x12a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    e3ae:	466c      	mov	r4, sp
    e3b0:	b088      	sub	sp, #32
    e3b2:	466a      	mov	r2, sp
    e3b4:	4912      	ldr	r1, [pc, #72]	; (e400 <hci_tx_thread+0x190>)
    e3b6:	480f      	ldr	r0, [pc, #60]	; (e3f4 <hci_tx_thread+0x184>)
		switch (ev->state) {
    e3b8:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    e3bc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e3c0:	f842 af10 	str.w	sl, [r2, #16]!
    e3c4:	f00d ffd0 	bl	1c368 <z_log_msg_static_create.constprop.0>
    e3c8:	46a5      	mov	sp, r4
    e3ca:	e7e6      	b.n	e39a <hci_tx_thread+0x12a>
    e3cc:	200081bc 	.word	0x200081bc
    e3d0:	00020ea4 	.word	0x00020ea4
    e3d4:	200081d0 	.word	0x200081d0
    e3d8:	0001fe5e 	.word	0x0001fe5e
    e3dc:	0001f995 	.word	0x0001f995
    e3e0:	2000813c 	.word	0x2000813c
    e3e4:	00020d91 	.word	0x00020d91
    e3e8:	20008000 	.word	0x20008000
    e3ec:	20008118 	.word	0x20008118
    e3f0:	000211b4 	.word	0x000211b4
    e3f4:	0001ed9c 	.word	0x0001ed9c
    e3f8:	0002111a 	.word	0x0002111a
    e3fc:	20009668 	.word	0x20009668
    e400:	000211cf 	.word	0x000211cf

0000e404 <hci_event_prio>:
{
    e404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e408:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    e40a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    e40e:	4630      	mov	r0, r6
    e410:	f00f f8d1 	bl	1d5b6 <net_buf_simple_headroom>
	state->len = buf->len;
    e414:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    e418:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e41a:	f1b8 0f01 	cmp.w	r8, #1
    e41e:	d80c      	bhi.n	e43a <hci_event_prio+0x36>
    e420:	f640 5377 	movw	r3, #3447	; 0xd77
    e424:	4a1b      	ldr	r2, [pc, #108]	; (e494 <hci_event_prio+0x90>)
    e426:	491c      	ldr	r1, [pc, #112]	; (e498 <hci_event_prio+0x94>)
    e428:	481c      	ldr	r0, [pc, #112]	; (e49c <hci_event_prio+0x98>)
    e42a:	f00c feff 	bl	1b22c <assert_print>
    e42e:	4040      	eors	r0, r0
    e430:	f380 8811 	msr	BASEPRI, r0
    e434:	f04f 0003 	mov.w	r0, #3
    e438:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    e43a:	4630      	mov	r0, r6
    e43c:	2102      	movs	r1, #2
    e43e:	f004 fe81 	bl	13144 <net_buf_simple_pull_mem>
    e442:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    e444:	7800      	ldrb	r0, [r0, #0]
    e446:	f00d ff6e 	bl	1c326 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    e44a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    e44c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    e44e:	d40c      	bmi.n	e46a <hci_event_prio+0x66>
    e450:	f640 537b 	movw	r3, #3451	; 0xd7b
    e454:	4a0f      	ldr	r2, [pc, #60]	; (e494 <hci_event_prio+0x90>)
    e456:	4912      	ldr	r1, [pc, #72]	; (e4a0 <hci_event_prio+0x9c>)
    e458:	4810      	ldr	r0, [pc, #64]	; (e49c <hci_event_prio+0x98>)
    e45a:	f00c fee7 	bl	1b22c <assert_print>
    e45e:	4040      	eors	r0, r0
    e460:	f380 8811 	msr	BASEPRI, r0
    e464:	f04f 0003 	mov.w	r0, #3
    e468:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    e46a:	2305      	movs	r3, #5
    e46c:	4621      	mov	r1, r4
    e46e:	4a0d      	ldr	r2, [pc, #52]	; (e4a4 <hci_event_prio+0xa0>)
    e470:	7838      	ldrb	r0, [r7, #0]
    e472:	f7ff f883 	bl	d57c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    e476:	07b3      	lsls	r3, r6, #30
    e478:	d507      	bpl.n	e48a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    e47a:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    e47c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    e480:	fa13 f585 	uxtah	r5, r3, r5
    e484:	60a5      	str	r5, [r4, #8]
}
    e486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    e48a:	4620      	mov	r0, r4
}
    e48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    e490:	f004 bd54 	b.w	12f3c <net_buf_unref>
    e494:	00020ea4 	.word	0x00020ea4
    e498:	00020ed8 	.word	0x00020ed8
    e49c:	0001f995 	.word	0x0001f995
    e4a0:	000211f0 	.word	0x000211f0
    e4a4:	0001f1a8 	.word	0x0001f1a8

0000e4a8 <bt_recv>:
{
    e4a8:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e4aa:	7d03      	ldrb	r3, [r0, #20]
    e4ac:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    e4ae:	2b01      	cmp	r3, #1
{
    e4b0:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    e4b2:	d006      	beq.n	e4c2 <bt_recv+0x1a>
    e4b4:	2b03      	cmp	r3, #3
    e4b6:	d112      	bne.n	e4de <bt_recv+0x36>
			rx_queue_put(buf);
    e4b8:	f7fe ff8c 	bl	d3d4 <rx_queue_put>
		return 0;
    e4bc:	2000      	movs	r0, #0
}
    e4be:	46bd      	mov	sp, r7
    e4c0:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    e4c2:	6883      	ldr	r3, [r0, #8]
    e4c4:	7818      	ldrb	r0, [r3, #0]
    e4c6:	f00d ff2e 	bl	1c326 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    e4ca:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    e4cc:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    e4ce:	d502      	bpl.n	e4d6 <bt_recv+0x2e>
			hci_event_prio(buf);
    e4d0:	4620      	mov	r0, r4
    e4d2:	f7ff ff97 	bl	e404 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    e4d6:	07ab      	lsls	r3, r5, #30
    e4d8:	d5f0      	bpl.n	e4bc <bt_recv+0x14>
			rx_queue_put(buf);
    e4da:	4620      	mov	r0, r4
    e4dc:	e7ec      	b.n	e4b8 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    e4de:	466d      	mov	r5, sp
    e4e0:	b088      	sub	sp, #32
    e4e2:	466a      	mov	r2, sp
    e4e4:	4908      	ldr	r1, [pc, #32]	; (e508 <bt_recv+0x60>)
    e4e6:	4809      	ldr	r0, [pc, #36]	; (e50c <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
    e4e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    e4ec:	2303      	movs	r3, #3
    e4ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e4f2:	f842 3f10 	str.w	r3, [r2, #16]!
    e4f6:	f00d ff37 	bl	1c368 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    e4fa:	4620      	mov	r0, r4
    e4fc:	46ad      	mov	sp, r5
    e4fe:	f004 fd1d 	bl	12f3c <net_buf_unref>
		return -EINVAL;
    e502:	f06f 0015 	mvn.w	r0, #21
    e506:	e7da      	b.n	e4be <bt_recv+0x16>
    e508:	00021209 	.word	0x00021209
    e50c:	0001ed9c 	.word	0x0001ed9c

0000e510 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    e510:	4a08      	ldr	r2, [pc, #32]	; (e534 <bt_hci_driver_register+0x24>)
{
    e512:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    e514:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
    e518:	b930      	cbnz	r0, e528 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    e51a:	68d9      	ldr	r1, [r3, #12]
    e51c:	b139      	cbz	r1, e52e <bt_hci_driver_register+0x1e>
    e51e:	6959      	ldr	r1, [r3, #20]
    e520:	b129      	cbz	r1, e52e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    e522:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	return 0;
    e526:	4770      	bx	lr
		return -EALREADY;
    e528:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e52c:	4770      	bx	lr
		return -EINVAL;
    e52e:	f06f 0015 	mvn.w	r0, #21
}
    e532:	4770      	bx	lr
    e534:	20008000 	.word	0x20008000

0000e538 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e538:	2104      	movs	r1, #4
    e53a:	4801      	ldr	r0, [pc, #4]	; (e540 <bt_finalize_init+0x8>)
    e53c:	f00d bf09 	b.w	1c352 <atomic_or>
    e540:	200080cc 	.word	0x200080cc

0000e544 <bt_init>:
{
    e544:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    e546:	4d63      	ldr	r5, [pc, #396]	; (e6d4 <bt_init+0x190>)
{
    e548:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    e54a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    e54e:	6899      	ldr	r1, [r3, #8]
    e550:	f011 0101 	ands.w	r1, r1, #1
    e554:	d11a      	bne.n	e58c <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    e556:	f640 4003 	movw	r0, #3075	; 0xc03
    e55a:	aa01      	add	r2, sp, #4
    e55c:	f7ff faf8 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    e560:	4604      	mov	r4, r0
    e562:	2800      	cmp	r0, #0
    e564:	f040 80b2 	bne.w	e6cc <bt_init+0x188>
		hci_reset_complete(rsp);
    e568:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    e56a:	6883      	ldr	r3, [r0, #8]
	if (status) {
    e56c:	781b      	ldrb	r3, [r3, #0]
    e56e:	b95b      	cbnz	r3, e588 <bt_init+0x44>
    e570:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    e574:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e578:	f002 0209 	and.w	r2, r2, #9
    e57c:	e8d3 1fef 	ldaex	r1, [r3]
    e580:	e8c3 2fe4 	stlex	r4, r2, [r3]
    e584:	2c00      	cmp	r4, #0
    e586:	d1f9      	bne.n	e57c <bt_init+0x38>
		net_buf_unref(rsp);
    e588:	f004 fcd8 	bl	12f3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    e58c:	2100      	movs	r1, #0
    e58e:	f241 0003 	movw	r0, #4099	; 0x1003
    e592:	aa01      	add	r2, sp, #4
    e594:	f7ff fadc 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e598:	4604      	mov	r4, r0
    e59a:	2800      	cmp	r0, #0
    e59c:	f040 8096 	bne.w	e6cc <bt_init+0x188>
	read_local_features_complete(rsp);
    e5a0:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    e5a2:	2208      	movs	r2, #8
    e5a4:	68b1      	ldr	r1, [r6, #8]
    e5a6:	484c      	ldr	r0, [pc, #304]	; (e6d8 <bt_init+0x194>)
    e5a8:	3101      	adds	r1, #1
    e5aa:	f00d fe4e 	bl	1c24a <memcpy>
	net_buf_unref(rsp);
    e5ae:	4630      	mov	r0, r6
    e5b0:	f004 fcc4 	bl	12f3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    e5b4:	4621      	mov	r1, r4
    e5b6:	f241 0001 	movw	r0, #4097	; 0x1001
    e5ba:	aa01      	add	r2, sp, #4
    e5bc:	f7ff fac8 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e5c0:	4604      	mov	r4, r0
    e5c2:	2800      	cmp	r0, #0
    e5c4:	f040 8082 	bne.w	e6cc <bt_init+0x188>
	read_local_ver_complete(rsp);
    e5c8:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    e5ca:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    e5cc:	785a      	ldrb	r2, [r3, #1]
    e5ce:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    e5d2:	885a      	ldrh	r2, [r3, #2]
    e5d4:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    e5d8:	791a      	ldrb	r2, [r3, #4]
    e5da:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    e5de:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    e5e2:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    e5e6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    e5ea:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    e5ee:	f004 fca5 	bl	12f3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    e5f2:	4621      	mov	r1, r4
    e5f4:	f241 0002 	movw	r0, #4098	; 0x1002
    e5f8:	aa01      	add	r2, sp, #4
    e5fa:	f7ff faa9 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e5fe:	4604      	mov	r4, r0
    e600:	2800      	cmp	r0, #0
    e602:	d163      	bne.n	e6cc <bt_init+0x188>
	read_supported_commands_complete(rsp);
    e604:	9c01      	ldr	r4, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    e606:	2240      	movs	r2, #64	; 0x40
    e608:	68a1      	ldr	r1, [r4, #8]
    e60a:	4834      	ldr	r0, [pc, #208]	; (e6dc <bt_init+0x198>)
    e60c:	3101      	adds	r1, #1
    e60e:	f00d fe1c 	bl	1c24a <memcpy>
	net_buf_unref(rsp);
    e612:	4620      	mov	r0, r4
    e614:	f004 fc92 	bl	12f3c <net_buf_unref>
		err = prng_init();
    e618:	f000 ffd4 	bl	f5c4 <prng_init>
		if (err) {
    e61c:	4604      	mov	r4, r0
    e61e:	2800      	cmp	r0, #0
    e620:	d154      	bne.n	e6cc <bt_init+0x188>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    e622:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    e626:	069f      	lsls	r7, r3, #26
    e628:	d41a      	bmi.n	e660 <bt_init+0x11c>
		BT_WARN("Controller to host flow control not supported");
    e62a:	4b2d      	ldr	r3, [pc, #180]	; (e6e0 <bt_init+0x19c>)
    e62c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e630:	9307      	str	r3, [sp, #28]
    e632:	2302      	movs	r3, #2
    e634:	482b      	ldr	r0, [pc, #172]	; (e6e4 <bt_init+0x1a0>)
    e636:	aa06      	add	r2, sp, #24
    e638:	9306      	str	r3, [sp, #24]
    e63a:	f00d fe95 	bl	1c368 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    e63e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e642:	065e      	lsls	r6, r3, #25
    e644:	d452      	bmi.n	e6ec <bt_init+0x1a8>
		BT_ERR("Non-LE capable controller detected!");
    e646:	4b28      	ldr	r3, [pc, #160]	; (e6e8 <bt_init+0x1a4>)
    e648:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e64c:	9307      	str	r3, [sp, #28]
    e64e:	2302      	movs	r3, #2
    e650:	4824      	ldr	r0, [pc, #144]	; (e6e4 <bt_init+0x1a0>)
    e652:	aa06      	add	r2, sp, #24
    e654:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    e656:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
    e65a:	f00d fe85 	bl	1c368 <z_log_msg_static_create.constprop.0>
	if (err) {
    e65e:	e035      	b.n	e6cc <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    e660:	2107      	movs	r1, #7
    e662:	f640 4033 	movw	r0, #3123	; 0xc33
    e666:	f7ff fa25 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    e66a:	4607      	mov	r7, r0
    e66c:	2800      	cmp	r0, #0
    e66e:	f000 8121 	beq.w	e8b4 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    e672:	2107      	movs	r1, #7
    e674:	3008      	adds	r0, #8
    e676:	f004 fd83 	bl	13180 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    e67a:	4621      	mov	r1, r4
    e67c:	2207      	movs	r2, #7
    e67e:	4606      	mov	r6, r0
    e680:	f00d fdee 	bl	1c260 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    e684:	231b      	movs	r3, #27
    e686:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    e688:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    e68a:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    e68c:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    e68e:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    e690:	4639      	mov	r1, r7
    e692:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    e696:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    e698:	f7ff fa5a 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e69c:	4604      	mov	r4, r0
    e69e:	b9a8      	cbnz	r0, e6cc <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    e6a0:	2101      	movs	r1, #1
    e6a2:	f640 4031 	movw	r0, #3121	; 0xc31
    e6a6:	f7ff fa05 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    e6aa:	4606      	mov	r6, r0
    e6ac:	2800      	cmp	r0, #0
    e6ae:	f000 8101 	beq.w	e8b4 <bt_init+0x370>
	return net_buf_simple_add_u8(&buf->b, val);
    e6b2:	2101      	movs	r1, #1
    e6b4:	3008      	adds	r0, #8
    e6b6:	f00e ff96 	bl	1d5e6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    e6ba:	4622      	mov	r2, r4
    e6bc:	4631      	mov	r1, r6
    e6be:	f640 4031 	movw	r0, #3121	; 0xc31
    e6c2:	f7ff fa45 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e6c6:	4604      	mov	r4, r0
    e6c8:	2800      	cmp	r0, #0
    e6ca:	d0b8      	beq.n	e63e <bt_init+0xfa>
}
    e6cc:	4620      	mov	r0, r4
    e6ce:	b009      	add	sp, #36	; 0x24
    e6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6d2:	bf00      	nop
    e6d4:	20008000 	.word	0x20008000
    e6d8:	20008070 	.word	0x20008070
    e6dc:	20008078 	.word	0x20008078
    e6e0:	0002121d 	.word	0x0002121d
    e6e4:	0001ed9c 	.word	0x0001ed9c
    e6e8:	0002124b 	.word	0x0002124b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    e6ec:	2100      	movs	r1, #0
    e6ee:	f242 0003 	movw	r0, #8195	; 0x2003
    e6f2:	aa02      	add	r2, sp, #8
    e6f4:	f7ff fa2c 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e6f8:	4604      	mov	r4, r0
    e6fa:	2800      	cmp	r0, #0
    e6fc:	d1e6      	bne.n	e6cc <bt_init+0x188>
	read_le_features_complete(rsp);
    e6fe:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    e700:	2208      	movs	r2, #8
    e702:	68b1      	ldr	r1, [r6, #8]
    e704:	48a9      	ldr	r0, [pc, #676]	; (e9ac <bt_init+0x468>)
    e706:	3101      	adds	r1, #1
    e708:	f00d fd9f 	bl	1c24a <memcpy>
	net_buf_unref(rsp);
    e70c:	4630      	mov	r0, r6
    e70e:	f004 fc15 	bl	12f3c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    e712:	4621      	mov	r1, r4
    e714:	f242 0002 	movw	r0, #8194	; 0x2002
    e718:	aa02      	add	r2, sp, #8
    e71a:	f7ff fa19 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    e71e:	4604      	mov	r4, r0
    e720:	2800      	cmp	r0, #0
    e722:	d1d3      	bne.n	e6cc <bt_init+0x188>
		le_read_buffer_size_complete(rsp);
    e724:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    e726:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    e728:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e72c:	b291      	uxth	r1, r2
    e72e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    e732:	b121      	cbz	r1, e73e <bt_init+0x1fa>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    e734:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    e736:	489e      	ldr	r0, [pc, #632]	; (e9b0 <bt_init+0x46c>)
    e738:	4611      	mov	r1, r2
    e73a:	f00f ff52 	bl	1e5e2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    e73e:	4620      	mov	r0, r4
    e740:	f004 fbfc 	bl	12f3c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    e744:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    e748:	f016 0620 	ands.w	r6, r6, #32
    e74c:	d118      	bne.n	e780 <bt_init+0x23c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    e74e:	2102      	movs	r1, #2
    e750:	f640 406d 	movw	r0, #3181	; 0xc6d
    e754:	f7ff f9ae 	bl	dab4 <bt_hci_cmd_create>
		if (!buf) {
    e758:	4604      	mov	r4, r0
    e75a:	2800      	cmp	r0, #0
    e75c:	f000 80aa 	beq.w	e8b4 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    e760:	2102      	movs	r1, #2
    e762:	3008      	adds	r0, #8
    e764:	f004 fd0c 	bl	13180 <net_buf_simple_add>
		cp_le->le = 0x01;
    e768:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    e76a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    e76c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    e76e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    e770:	4632      	mov	r2, r6
    e772:	f640 406d 	movw	r0, #3181	; 0xc6d
    e776:	f7ff f9eb 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    e77a:	4604      	mov	r4, r0
    e77c:	2800      	cmp	r0, #0
    e77e:	d1a5      	bne.n	e6cc <bt_init+0x188>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    e780:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    e784:	071c      	lsls	r4, r3, #28
    e786:	d512      	bpl.n	e7ae <bt_init+0x26a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    e788:	2100      	movs	r1, #0
    e78a:	f242 001c 	movw	r0, #8220	; 0x201c
    e78e:	aa02      	add	r2, sp, #8
    e790:	f7ff f9de 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    e794:	4604      	mov	r4, r0
    e796:	2800      	cmp	r0, #0
    e798:	d198      	bne.n	e6cc <bt_init+0x188>
		le_read_supp_states_complete(rsp);
    e79a:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    e79c:	6883      	ldr	r3, [r0, #8]
    e79e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    e7a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    e7a6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    e7aa:	f004 fbc7 	bl	12f3c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    e7ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    e7b2:	0698      	lsls	r0, r3, #26
    e7b4:	d523      	bpl.n	e7fe <bt_init+0x2ba>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    e7b6:	a901      	add	r1, sp, #4
    e7b8:	f10d 0002 	add.w	r0, sp, #2
    e7bc:	f7ff fa44 	bl	dc48 <hci_le_read_max_data_len>
		if (err) {
    e7c0:	4604      	mov	r4, r0
    e7c2:	2800      	cmp	r0, #0
    e7c4:	d182      	bne.n	e6cc <bt_init+0x188>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    e7c6:	2104      	movs	r1, #4
    e7c8:	f242 0024 	movw	r0, #8228	; 0x2024
    e7cc:	f7ff f972 	bl	dab4 <bt_hci_cmd_create>
		if (!buf) {
    e7d0:	4606      	mov	r6, r0
    e7d2:	2800      	cmp	r0, #0
    e7d4:	d06e      	beq.n	e8b4 <bt_init+0x370>
    e7d6:	2104      	movs	r1, #4
    e7d8:	3008      	adds	r0, #8
    e7da:	f004 fcd1 	bl	13180 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    e7de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    e7e2:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    e7e4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    e7e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    e7ea:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    e7ec:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    e7ee:	f242 0024 	movw	r0, #8228	; 0x2024
    e7f2:	f7ff f9ad 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    e7f6:	4604      	mov	r4, r0
    e7f8:	2800      	cmp	r0, #0
    e7fa:	f47f af67 	bne.w	e6cc <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    e7fe:	2108      	movs	r1, #8
    e800:	f242 0001 	movw	r0, #8193	; 0x2001
    e804:	f7ff f956 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    e808:	4604      	mov	r4, r0
    e80a:	2800      	cmp	r0, #0
    e80c:	d052      	beq.n	e8b4 <bt_init+0x370>
    e80e:	2108      	movs	r1, #8
    e810:	4408      	add	r0, r1
    e812:	f004 fcb5 	bl	13180 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    e816:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    e81a:	f012 0f02 	tst.w	r2, #2
    e81e:	bf14      	ite	ne
    e820:	232f      	movne	r3, #47	; 0x2f
    e822:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    e824:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    e826:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    e82a:	bf48      	it	mi
    e82c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    e830:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    e834:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    e838:	bf18      	it	ne
    e83a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    e83e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    e840:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    e844:	4621      	mov	r1, r4
    e846:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    e848:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    e84a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    e84c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    e84e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    e850:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    e852:	71c2      	strb	r2, [r0, #7]
    e854:	f242 0001 	movw	r0, #8193	; 0x2001
    e858:	f7ff f97a 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e85c:	4604      	mov	r4, r0
    e85e:	2800      	cmp	r0, #0
    e860:	f47f af34 	bne.w	e6cc <bt_init+0x188>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    e864:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    e868:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    e86c:	069a      	lsls	r2, r3, #26
    e86e:	d424      	bmi.n	e8ba <bt_init+0x376>
	if (bt_dev.le.acl_mtu) {
    e870:	b9c9      	cbnz	r1, e8a6 <bt_init+0x362>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    e872:	f241 0005 	movw	r0, #4101	; 0x1005
    e876:	aa02      	add	r2, sp, #8
    e878:	f7ff f96a 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e87c:	4604      	mov	r4, r0
    e87e:	2800      	cmp	r0, #0
    e880:	f47f af24 	bne.w	e6cc <bt_init+0x188>
	if (bt_dev.le.acl_mtu) {
    e884:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    e888:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    e88a:	b94b      	cbnz	r3, e8a0 <bt_init+0x35c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    e88c:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    e88e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e892:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    e896:	889a      	ldrh	r2, [r3, #4]
    e898:	4845      	ldr	r0, [pc, #276]	; (e9b0 <bt_init+0x46c>)
    e89a:	4611      	mov	r1, r2
    e89c:	f00f fea1 	bl	1e5e2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    e8a0:	4620      	mov	r0, r4
    e8a2:	f004 fb4b 	bl	12f3c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    e8a6:	2108      	movs	r1, #8
    e8a8:	f640 4001 	movw	r0, #3073	; 0xc01
    e8ac:	f7ff f902 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    e8b0:	4604      	mov	r4, r0
    e8b2:	b988      	cbnz	r0, e8d8 <bt_init+0x394>
		return -ENOBUFS;
    e8b4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e8b8:	e708      	b.n	e6cc <bt_init+0x188>
	else if (!bt_dev.le.acl_mtu) {
    e8ba:	2900      	cmp	r1, #0
    e8bc:	d1f3      	bne.n	e8a6 <bt_init+0x362>
		BT_ERR("ACL BR/EDR buffers not initialized");
    e8be:	4b3d      	ldr	r3, [pc, #244]	; (e9b4 <bt_init+0x470>)
    e8c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e8c4:	9307      	str	r3, [sp, #28]
    e8c6:	2302      	movs	r3, #2
    e8c8:	483b      	ldr	r0, [pc, #236]	; (e9b8 <bt_init+0x474>)
    e8ca:	aa06      	add	r2, sp, #24
    e8cc:	9306      	str	r3, [sp, #24]
		return -EIO;
    e8ce:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
    e8d2:	f00d fd49 	bl	1c368 <z_log_msg_static_create.constprop.0>
	if (err) {
    e8d6:	e6f9      	b.n	e6cc <bt_init+0x188>
    e8d8:	2108      	movs	r1, #8
    e8da:	4408      	add	r0, r1
    e8dc:	f004 fc50 	bl	13180 <net_buf_simple_add>
	dst[0] = val;
    e8e0:	2310      	movs	r3, #16
    e8e2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    e8e4:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    e8e6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    e8e8:	7043      	strb	r3, [r0, #1]
    e8ea:	2602      	movs	r6, #2
    e8ec:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    e8ee:	4621      	mov	r1, r4
	dst[0] = val;
    e8f0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    e8f2:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    e8f4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    e8f6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    e8f8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    e8fa:	71c3      	strb	r3, [r0, #7]
    e8fc:	f640 4001 	movw	r0, #3073	; 0xc01
    e900:	f7ff f926 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e904:	4604      	mov	r4, r0
    e906:	2800      	cmp	r0, #0
    e908:	f47f aee0 	bne.w	e6cc <bt_init+0x188>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    e90c:	4601      	mov	r1, r0
    e90e:	aa01      	add	r2, sp, #4
    e910:	f64f 4001 	movw	r0, #64513	; 0xfc01
    e914:	f7ff f91c 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e918:	4604      	mov	r4, r0
    e91a:	b1b8      	cbz	r0, e94c <bt_init+0x408>
		BT_WARN("Vendor HCI extensions not available");
    e91c:	4b27      	ldr	r3, [pc, #156]	; (e9bc <bt_init+0x478>)
			BT_WARN("Failed to read supported vendor features");
    e91e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e922:	4825      	ldr	r0, [pc, #148]	; (e9b8 <bt_init+0x474>)
    e924:	aa06      	add	r2, sp, #24
    e926:	e9cd 6306 	strd	r6, r3, [sp, #24]
    e92a:	f00d fd1d 	bl	1c368 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    e92e:	f000 faf1 	bl	ef14 <bt_id_init>
	if (err) {
    e932:	4604      	mov	r4, r0
    e934:	2800      	cmp	r0, #0
    e936:	f47f aec9 	bne.w	e6cc <bt_init+0x188>
		err = bt_conn_init();
    e93a:	f001 fdd7 	bl	104ec <bt_conn_init>
		if (err) {
    e93e:	4604      	mov	r4, r0
    e940:	2800      	cmp	r0, #0
    e942:	f47f aec3 	bne.w	e6cc <bt_init+0x188>
	bt_finalize_init();
    e946:	f7ff fdf7 	bl	e538 <bt_finalize_init>
	return 0;
    e94a:	e6bf      	b.n	e6cc <bt_init+0x188>
	net_buf_unref(rsp);
    e94c:	9801      	ldr	r0, [sp, #4]
    e94e:	f004 faf5 	bl	12f3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    e952:	4621      	mov	r1, r4
    e954:	f64f 4002 	movw	r0, #64514	; 0xfc02
    e958:	aa01      	add	r2, sp, #4
    e95a:	f7ff f8f9 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    e95e:	4604      	mov	r4, r0
    e960:	b108      	cbz	r0, e966 <bt_init+0x422>
		BT_WARN("Failed to read supported vendor commands");
    e962:	4b17      	ldr	r3, [pc, #92]	; (e9c0 <bt_init+0x47c>)
    e964:	e7db      	b.n	e91e <bt_init+0x3da>
	rp.cmds = (void *)rsp->data;
    e966:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    e968:	4632      	mov	r2, r6
    e96a:	68b9      	ldr	r1, [r7, #8]
    e96c:	4815      	ldr	r0, [pc, #84]	; (e9c4 <bt_init+0x480>)
    e96e:	3101      	adds	r1, #1
    e970:	f00d fc6b 	bl	1c24a <memcpy>
	net_buf_unref(rsp);
    e974:	4638      	mov	r0, r7
    e976:	f004 fae1 	bl	12f3c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    e97a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    e97e:	075b      	lsls	r3, r3, #29
    e980:	d5d5      	bpl.n	e92e <bt_init+0x3ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    e982:	4621      	mov	r1, r4
    e984:	f64f 4003 	movw	r0, #64515	; 0xfc03
    e988:	aa01      	add	r2, sp, #4
    e98a:	f7ff f8e1 	bl	db50 <bt_hci_cmd_send_sync>
		if (err) {
    e98e:	b108      	cbz	r0, e994 <bt_init+0x450>
			BT_WARN("Failed to read supported vendor features");
    e990:	4b0d      	ldr	r3, [pc, #52]	; (e9c8 <bt_init+0x484>)
    e992:	e7c4      	b.n	e91e <bt_init+0x3da>
		memcpy(bt_dev.vs_features, rp.feat->features,
    e994:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    e996:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    e998:	480c      	ldr	r0, [pc, #48]	; (e9cc <bt_init+0x488>)
    e99a:	68a1      	ldr	r1, [r4, #8]
    e99c:	4411      	add	r1, r2
    e99e:	f00d fc54 	bl	1c24a <memcpy>
		net_buf_unref(rsp);
    e9a2:	4620      	mov	r0, r4
    e9a4:	f004 faca 	bl	12f3c <net_buf_unref>
    e9a8:	e7c1      	b.n	e92e <bt_init+0x3ea>
    e9aa:	bf00      	nop
    e9ac:	200080d0 	.word	0x200080d0
    e9b0:	20008100 	.word	0x20008100
    e9b4:	0002126f 	.word	0x0002126f
    e9b8:	0001ed9c 	.word	0x0001ed9c
    e9bc:	00021292 	.word	0x00021292
    e9c0:	000212b6 	.word	0x000212b6
    e9c4:	200080b9 	.word	0x200080b9
    e9c8:	000212df 	.word	0x000212df
    e9cc:	200080b8 	.word	0x200080b8

0000e9d0 <init_work>:
{
    e9d0:	b510      	push	{r4, lr}
	err = bt_init();
    e9d2:	f7ff fdb7 	bl	e544 <bt_init>
	if (ready_cb) {
    e9d6:	4b03      	ldr	r3, [pc, #12]	; (e9e4 <init_work+0x14>)
    e9d8:	681b      	ldr	r3, [r3, #0]
    e9da:	b113      	cbz	r3, e9e2 <init_work+0x12>
}
    e9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    e9e0:	4718      	bx	r3
}
    e9e2:	bd10      	pop	{r4, pc}
    e9e4:	200096e0 	.word	0x200096e0

0000e9e8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    e9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9ea:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
    e9ec:	4d3b      	ldr	r5, [pc, #236]	; (eadc <bt_enable+0xf4>)
{
    e9ee:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    e9f0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
{
    e9f4:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    e9f6:	b983      	cbnz	r3, ea1a <bt_enable+0x32>
		BT_ERR("No HCI driver registered");
    e9f8:	4b39      	ldr	r3, [pc, #228]	; (eae0 <bt_enable+0xf8>)
		return -ENODEV;
    e9fa:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
    e9fe:	617b      	str	r3, [r7, #20]
    ea00:	2302      	movs	r3, #2
    ea02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ea06:	4837      	ldr	r0, [pc, #220]	; (eae4 <bt_enable+0xfc>)
    ea08:	613b      	str	r3, [r7, #16]
    ea0a:	f107 0210 	add.w	r2, r7, #16
    ea0e:	f00d fcab 	bl	1c368 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    ea12:	4620      	mov	r0, r4
    ea14:	371c      	adds	r7, #28
    ea16:	46bd      	mov	sp, r7
    ea18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ea1a:	f06f 0102 	mvn.w	r1, #2
    ea1e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    ea22:	f00d fca4 	bl	1c36e <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ea26:	2101      	movs	r1, #1
    ea28:	f00d fc93 	bl	1c352 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    ea2c:	ea10 0401 	ands.w	r4, r0, r1
    ea30:	d150      	bne.n	ead4 <bt_enable+0xec>
	ready_cb = cb;
    ea32:	4b2d      	ldr	r3, [pc, #180]	; (eae8 <bt_enable+0x100>)
    ea34:	601e      	str	r6, [r3, #0]
    ea36:	460a      	mov	r2, r1
    ea38:	f505 708c 	add.w	r0, r5, #280	; 0x118
    ea3c:	f00f fdd1 	bl	1e5e2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    ea40:	f505 709e 	add.w	r0, r5, #316	; 0x13c
    ea44:	f00f fdab 	bl	1e59e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ea48:	2200      	movs	r2, #0
    ea4a:	2300      	movs	r3, #0
    ea4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ea50:	f06f 0308 	mvn.w	r3, #8
    ea54:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ea58:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ea5c:	e9cd 4400 	strd	r4, r4, [sp]
    ea60:	4b22      	ldr	r3, [pc, #136]	; (eaec <bt_enable+0x104>)
    ea62:	4923      	ldr	r1, [pc, #140]	; (eaf0 <bt_enable+0x108>)
    ea64:	9404      	str	r4, [sp, #16]
    ea66:	4823      	ldr	r0, [pc, #140]	; (eaf4 <bt_enable+0x10c>)
    ea68:	f008 fd54 	bl	17514 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ea6c:	4922      	ldr	r1, [pc, #136]	; (eaf8 <bt_enable+0x110>)
    ea6e:	4821      	ldr	r0, [pc, #132]	; (eaf4 <bt_enable+0x10c>)
    ea70:	f00f fd6c 	bl	1e54c <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    ea74:	4821      	ldr	r0, [pc, #132]	; (eafc <bt_enable+0x114>)
    ea76:	f009 fca1 	bl	183bc <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    ea7a:	f06f 0307 	mvn.w	r3, #7
    ea7e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    ea82:	491f      	ldr	r1, [pc, #124]	; (eb00 <bt_enable+0x118>)
    ea84:	481d      	ldr	r0, [pc, #116]	; (eafc <bt_enable+0x114>)
    ea86:	9400      	str	r4, [sp, #0]
    ea88:	f009 fcb2 	bl	183f0 <k_work_queue_start>
    ea8c:	491d      	ldr	r1, [pc, #116]	; (eb04 <bt_enable+0x11c>)
    ea8e:	481b      	ldr	r0, [pc, #108]	; (eafc <bt_enable+0x114>)
    ea90:	f00f fd5c 	bl	1e54c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    ea94:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    ea98:	68db      	ldr	r3, [r3, #12]
    ea9a:	4798      	blx	r3
	if (err) {
    ea9c:	4604      	mov	r4, r0
    ea9e:	b178      	cbz	r0, eac0 <bt_enable+0xd8>
		BT_ERR("HCI driver open failed (%d)", err);
    eaa0:	466d      	mov	r5, sp
    eaa2:	b088      	sub	sp, #32
    eaa4:	462a      	mov	r2, r5
    eaa6:	4b18      	ldr	r3, [pc, #96]	; (eb08 <bt_enable+0x120>)
    eaa8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eaac:	e9c5 3005 	strd	r3, r0, [r5, #20]
    eab0:	2303      	movs	r3, #3
    eab2:	480c      	ldr	r0, [pc, #48]	; (eae4 <bt_enable+0xfc>)
    eab4:	f842 3f10 	str.w	r3, [r2, #16]!
    eab8:	f00d fc56 	bl	1c368 <z_log_msg_static_create.constprop.0>
    eabc:	46ad      	mov	sp, r5
		return err;
    eabe:	e7a8      	b.n	ea12 <bt_enable+0x2a>
	if (!cb) {
    eac0:	b91e      	cbnz	r6, eaca <bt_enable+0xe2>
		return bt_init();
    eac2:	f7ff fd3f 	bl	e544 <bt_init>
    eac6:	4604      	mov	r4, r0
    eac8:	e7a3      	b.n	ea12 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    eaca:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    eace:	f009 fc6f 	bl	183b0 <k_work_submit>
	return 0;
    ead2:	e79e      	b.n	ea12 <bt_enable+0x2a>
		return -EALREADY;
    ead4:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ead8:	e79b      	b.n	ea12 <bt_enable+0x2a>
    eada:	bf00      	nop
    eadc:	20008000 	.word	0x20008000
    eae0:	00021308 	.word	0x00021308
    eae4:	0001ed9c 	.word	0x0001ed9c
    eae8:	200096e0 	.word	0x200096e0
    eaec:	0000e271 	.word	0x0000e271
    eaf0:	2000acc8 	.word	0x2000acc8
    eaf4:	20009008 	.word	0x20009008
    eaf8:	00021321 	.word	0x00021321
    eafc:	20009090 	.word	0x20009090
    eb00:	2000b0c8 	.word	0x2000b0c8
    eb04:	00021327 	.word	0x00021327
    eb08:	0002132d 	.word	0x0002132d

0000eb0c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    eb0c:	4b02      	ldr	r3, [pc, #8]	; (eb18 <bt_is_ready+0xc>)
    eb0e:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    eb12:	f3c0 0080 	ubfx	r0, r0, #2, #1
    eb16:	4770      	bx	lr
    eb18:	200080cc 	.word	0x200080cc

0000eb1c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    eb1c:	4800      	ldr	r0, [pc, #0]	; (eb20 <bt_get_name+0x4>)
    eb1e:	4770      	bx	lr
    eb20:	0001f94d 	.word	0x0001f94d

0000eb24 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb26:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    eb28:	2500      	movs	r5, #0
    eb2a:	4f09      	ldr	r7, [pc, #36]	; (eb50 <id_find+0x2c>)
    eb2c:	79fb      	ldrb	r3, [r7, #7]
    eb2e:	b2ec      	uxtb	r4, r5
    eb30:	42a3      	cmp	r3, r4
    eb32:	d802      	bhi.n	eb3a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    eb34:	f06f 0001 	mvn.w	r0, #1
    eb38:	e009      	b.n	eb4e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    eb3a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    eb3e:	4630      	mov	r0, r6
    eb40:	4439      	add	r1, r7
    eb42:	f00d fcc0 	bl	1c4c6 <bt_addr_le_eq>
    eb46:	3501      	adds	r5, #1
    eb48:	2800      	cmp	r0, #0
    eb4a:	d0ef      	beq.n	eb2c <id_find+0x8>
    eb4c:	4620      	mov	r0, r4
}
    eb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb50:	20008000 	.word	0x20008000

0000eb54 <set_random_address>:
{
    eb54:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    eb56:	2206      	movs	r2, #6
    eb58:	4912      	ldr	r1, [pc, #72]	; (eba4 <set_random_address+0x50>)
    eb5a:	4605      	mov	r5, r0
    eb5c:	f00d fb65 	bl	1c22a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    eb60:	b1d8      	cbz	r0, eb9a <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    eb62:	2106      	movs	r1, #6
    eb64:	f242 0005 	movw	r0, #8197	; 0x2005
    eb68:	f7fe ffa4 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    eb6c:	4604      	mov	r4, r0
    eb6e:	b1b0      	cbz	r0, eb9e <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    eb70:	2206      	movs	r2, #6
    eb72:	4629      	mov	r1, r5
    eb74:	3008      	adds	r0, #8
    eb76:	f00e fd2a 	bl	1d5ce <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    eb7a:	2200      	movs	r2, #0
    eb7c:	4621      	mov	r1, r4
    eb7e:	f242 0005 	movw	r0, #8197	; 0x2005
    eb82:	f7fe ffe5 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    eb86:	b948      	cbnz	r0, eb9c <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    eb88:	2206      	movs	r2, #6
    eb8a:	4629      	mov	r1, r5
    eb8c:	4805      	ldr	r0, [pc, #20]	; (eba4 <set_random_address+0x50>)
    eb8e:	f00d fb5c 	bl	1c24a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    eb92:	2201      	movs	r2, #1
    eb94:	4b04      	ldr	r3, [pc, #16]	; (eba8 <set_random_address+0x54>)
    eb96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
    eb9a:	2000      	movs	r0, #0
}
    eb9c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    eb9e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    eba2:	e7fb      	b.n	eb9c <set_random_address+0x48>
    eba4:	20008061 	.word	0x20008061
    eba8:	20008000 	.word	0x20008000

0000ebac <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ebac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ebae:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    ebb0:	460d      	mov	r5, r1
    ebb2:	b179      	cbz	r1, ebd4 <id_create.constprop.0+0x28>
    ebb4:	4628      	mov	r0, r5
    ebb6:	4914      	ldr	r1, [pc, #80]	; (ec08 <id_create.constprop.0+0x5c>)
    ebb8:	f00d fc85 	bl	1c4c6 <bt_addr_le_eq>
    ebbc:	b950      	cbnz	r0, ebd4 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    ebbe:	2207      	movs	r2, #7
    ebc0:	4629      	mov	r1, r5
    ebc2:	4812      	ldr	r0, [pc, #72]	; (ec0c <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    ebc4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ebc8:	4420      	add	r0, r4
    ebca:	f00d fb3e 	bl	1c24a <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    ebce:	2000      	movs	r0, #0
}
    ebd0:	b003      	add	sp, #12
    ebd2:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    ebd4:	4668      	mov	r0, sp
    ebd6:	f00d fb98 	bl	1c30a <bt_addr_le_create_static>
			if (err) {
    ebda:	2800      	cmp	r0, #0
    ebdc:	d1f8      	bne.n	ebd0 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    ebde:	4668      	mov	r0, sp
    ebe0:	f7ff ffa0 	bl	eb24 <id_find>
    ebe4:	2800      	cmp	r0, #0
    ebe6:	daf5      	bge.n	ebd4 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ebe8:	4b08      	ldr	r3, [pc, #32]	; (ec0c <id_create.constprop.0+0x60>)
    ebea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ebee:	441c      	add	r4, r3
    ebf0:	2207      	movs	r2, #7
    ebf2:	4669      	mov	r1, sp
    ebf4:	4620      	mov	r0, r4
    ebf6:	f00d fb28 	bl	1c24a <memcpy>
		if (addr) {
    ebfa:	2d00      	cmp	r5, #0
    ebfc:	d0e7      	beq.n	ebce <id_create.constprop.0+0x22>
    ebfe:	2207      	movs	r2, #7
    ec00:	4621      	mov	r1, r4
    ec02:	4628      	mov	r0, r5
    ec04:	e7e1      	b.n	ebca <id_create.constprop.0+0x1e>
    ec06:	bf00      	nop
    ec08:	00020c77 	.word	0x00020c77
    ec0c:	20008000 	.word	0x20008000

0000ec10 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    ec10:	b570      	push	{r4, r5, r6, lr}
    ec12:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    ec14:	4604      	mov	r4, r0
{
    ec16:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    ec18:	b920      	cbnz	r0, ec24 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    ec1a:	b31d      	cbz	r5, ec64 <bt_id_create+0x54>
			return -EINVAL;
    ec1c:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    ec20:	b006      	add	sp, #24
    ec22:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    ec24:	4920      	ldr	r1, [pc, #128]	; (eca8 <bt_id_create+0x98>)
    ec26:	f00d fc4e 	bl	1c4c6 <bt_addr_le_eq>
    ec2a:	2800      	cmp	r0, #0
    ec2c:	d1f5      	bne.n	ec1a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    ec2e:	7823      	ldrb	r3, [r4, #0]
    ec30:	2b01      	cmp	r3, #1
    ec32:	d104      	bne.n	ec3e <bt_id_create+0x2e>
    ec34:	79a3      	ldrb	r3, [r4, #6]
    ec36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ec3a:	2bc0      	cmp	r3, #192	; 0xc0
    ec3c:	d00a      	beq.n	ec54 <bt_id_create+0x44>
			BT_ERR("Only static random identity address supported");
    ec3e:	4b1b      	ldr	r3, [pc, #108]	; (ecac <bt_id_create+0x9c>)
    ec40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ec44:	9305      	str	r3, [sp, #20]
    ec46:	2302      	movs	r3, #2
    ec48:	4819      	ldr	r0, [pc, #100]	; (ecb0 <bt_id_create+0xa0>)
    ec4a:	aa04      	add	r2, sp, #16
    ec4c:	9304      	str	r3, [sp, #16]
    ec4e:	f00d fc42 	bl	1c4d6 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
    ec52:	e7e3      	b.n	ec1c <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    ec54:	4620      	mov	r0, r4
    ec56:	f7ff ff65 	bl	eb24 <id_find>
    ec5a:	2800      	cmp	r0, #0
    ec5c:	dbdd      	blt.n	ec1a <bt_id_create+0xa>
			return -EALREADY;
    ec5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ec62:	e7dd      	b.n	ec20 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    ec64:	4d13      	ldr	r5, [pc, #76]	; (ecb4 <bt_id_create+0xa4>)
    ec66:	79eb      	ldrb	r3, [r5, #7]
    ec68:	2b01      	cmp	r3, #1
    ec6a:	d01a      	beq.n	eca2 <bt_id_create+0x92>
    ec6c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    ec70:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    ec74:	07db      	lsls	r3, r3, #31
    ec76:	d50b      	bpl.n	ec90 <bt_id_create+0x80>
	new_id = bt_dev.id_count;
    ec78:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    ec7a:	4621      	mov	r1, r4
    ec7c:	4630      	mov	r0, r6
    ec7e:	f7ff ff95 	bl	ebac <id_create.constprop.0>
	if (err) {
    ec82:	2800      	cmp	r0, #0
    ec84:	d1cc      	bne.n	ec20 <bt_id_create+0x10>
		bt_dev.id_count++;
    ec86:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    ec88:	4630      	mov	r0, r6
		bt_dev.id_count++;
    ec8a:	3301      	adds	r3, #1
    ec8c:	71eb      	strb	r3, [r5, #7]
	return new_id;
    ec8e:	e7c7      	b.n	ec20 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    ec90:	2c00      	cmp	r4, #0
    ec92:	d0c3      	beq.n	ec1c <bt_id_create+0xc>
    ec94:	4620      	mov	r0, r4
    ec96:	4904      	ldr	r1, [pc, #16]	; (eca8 <bt_id_create+0x98>)
    ec98:	f00d fc15 	bl	1c4c6 <bt_addr_le_eq>
    ec9c:	2800      	cmp	r0, #0
    ec9e:	d0eb      	beq.n	ec78 <bt_id_create+0x68>
    eca0:	e7bc      	b.n	ec1c <bt_id_create+0xc>
		return -ENOMEM;
    eca2:	f06f 000b 	mvn.w	r0, #11
    eca6:	e7bb      	b.n	ec20 <bt_id_create+0x10>
    eca8:	00020c77 	.word	0x00020c77
    ecac:	00021355 	.word	0x00021355
    ecb0:	0001edac 	.word	0x0001edac
    ecb4:	20008000 	.word	0x20008000

0000ecb8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    ecb8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    ecba:	4604      	mov	r4, r0
{
    ecbc:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
    ecbe:	b960      	cbnz	r0, ecda <bt_id_read_public_addr+0x22>
		BT_WARN("Invalid input parameters");
    ecc0:	4b1a      	ldr	r3, [pc, #104]	; (ed2c <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
    ecc2:	9307      	str	r3, [sp, #28]
    ecc4:	2302      	movs	r3, #2
    ecc6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ecca:	4819      	ldr	r0, [pc, #100]	; (ed30 <bt_id_read_public_addr+0x78>)
    eccc:	aa06      	add	r2, sp, #24
    ecce:	9306      	str	r3, [sp, #24]
    ecd0:	f00d fc01 	bl	1c4d6 <z_log_msg_static_create.constprop.0>
		return 0U;
    ecd4:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    ecd6:	b008      	add	sp, #32
    ecd8:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    ecda:	2100      	movs	r1, #0
    ecdc:	f241 0009 	movw	r0, #4105	; 0x1009
    ece0:	aa01      	add	r2, sp, #4
    ece2:	f7fe ff35 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    ece6:	4606      	mov	r6, r0
    ece8:	b108      	cbz	r0, ecee <bt_id_read_public_addr+0x36>
		BT_WARN("Failed to read public address");
    ecea:	4b12      	ldr	r3, [pc, #72]	; (ed34 <bt_id_read_public_addr+0x7c>)
    ecec:	e7e9      	b.n	ecc2 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    ecee:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    ecf0:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    ecf2:	689d      	ldr	r5, [r3, #8]
    ecf4:	4910      	ldr	r1, [pc, #64]	; (ed38 <bt_id_read_public_addr+0x80>)
    ecf6:	3501      	adds	r5, #1
    ecf8:	4628      	mov	r0, r5
    ecfa:	f00d fa96 	bl	1c22a <memcmp>
    ecfe:	b918      	cbnz	r0, ed08 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    ed00:	9801      	ldr	r0, [sp, #4]
    ed02:	f004 f91b 	bl	12f3c <net_buf_unref>
		return 0U;
    ed06:	e7e5      	b.n	ecd4 <bt_id_read_public_addr+0x1c>
    ed08:	2206      	movs	r2, #6
    ed0a:	4628      	mov	r0, r5
    ed0c:	490b      	ldr	r1, [pc, #44]	; (ed3c <bt_id_read_public_addr+0x84>)
    ed0e:	f00d fa8c 	bl	1c22a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    ed12:	2800      	cmp	r0, #0
    ed14:	d0f4      	beq.n	ed00 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    ed16:	2206      	movs	r2, #6
    ed18:	4629      	mov	r1, r5
    ed1a:	1c60      	adds	r0, r4, #1
    ed1c:	f00d fa95 	bl	1c24a <memcpy>
	net_buf_unref(rsp);
    ed20:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    ed22:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    ed24:	f004 f90a 	bl	12f3c <net_buf_unref>
	return 1U;
    ed28:	2001      	movs	r0, #1
    ed2a:	e7d4      	b.n	ecd6 <bt_id_read_public_addr+0x1e>
    ed2c:	00021383 	.word	0x00021383
    ed30:	0001edac 	.word	0x0001edac
    ed34:	0002139c 	.word	0x0002139c
    ed38:	00020c84 	.word	0x00020c84
    ed3c:	00020c7e 	.word	0x00020c7e

0000ed40 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    ed40:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    ed42:	4668      	mov	r0, sp
    ed44:	f7ff ffb8 	bl	ecb8 <bt_id_read_public_addr>
    ed48:	4b04      	ldr	r3, [pc, #16]	; (ed5c <bt_setup_public_id_addr+0x1c>)
    ed4a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    ed4c:	b118      	cbz	r0, ed56 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    ed4e:	4669      	mov	r1, sp
    ed50:	2000      	movs	r0, #0
    ed52:	f7ff ff2b 	bl	ebac <id_create.constprop.0>
}
    ed56:	b003      	add	sp, #12
    ed58:	f85d fb04 	ldr.w	pc, [sp], #4
    ed5c:	20008000 	.word	0x20008000

0000ed60 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    ed60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ed64:	4b22      	ldr	r3, [pc, #136]	; (edf0 <bt_read_static_addr+0x90>)
{
    ed66:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ed68:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
    ed6c:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ed6e:	07db      	lsls	r3, r3, #31
{
    ed70:	b088      	sub	sp, #32
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ed72:	d40e      	bmi.n	ed92 <bt_read_static_addr+0x32>
		BT_WARN("Read Static Addresses command not available");
    ed74:	4b1f      	ldr	r3, [pc, #124]	; (edf4 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
    ed76:	9307      	str	r3, [sp, #28]
		return 0;
    ed78:	2500      	movs	r5, #0
		BT_WARN("Failed to read static addresses");
    ed7a:	2302      	movs	r3, #2
    ed7c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ed80:	481d      	ldr	r0, [pc, #116]	; (edf8 <bt_read_static_addr+0x98>)
    ed82:	aa06      	add	r2, sp, #24
    ed84:	9306      	str	r3, [sp, #24]
    ed86:	f00d fba6 	bl	1c4d6 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    ed8a:	4628      	mov	r0, r5
    ed8c:	b008      	add	sp, #32
    ed8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    ed92:	2100      	movs	r1, #0
    ed94:	f64f 4009 	movw	r0, #64521	; 0xfc09
    ed98:	aa01      	add	r2, sp, #4
    ed9a:	f7fe fed9 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    ed9e:	4604      	mov	r4, r0
    eda0:	b108      	cbz	r0, eda6 <bt_read_static_addr+0x46>
		BT_WARN("Failed to read static addresses");
    eda2:	4b16      	ldr	r3, [pc, #88]	; (edfc <bt_read_static_addr+0x9c>)
    eda4:	e7e7      	b.n	ed76 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
    eda6:	9b01      	ldr	r3, [sp, #4]
    eda8:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    edaa:	7875      	ldrb	r5, [r6, #1]
    edac:	3602      	adds	r6, #2
    edae:	4545      	cmp	r5, r8
    edb0:	bf28      	it	cs
    edb2:	4645      	movcs	r5, r8
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    edb4:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    edb8:	42a5      	cmp	r5, r4
    edba:	dc0f      	bgt.n	eddc <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
    edbc:	9801      	ldr	r0, [sp, #4]
    edbe:	f004 f8bd 	bl	12f3c <net_buf_unref>
	if (!cnt) {
    edc2:	2d00      	cmp	r5, #0
    edc4:	d1e1      	bne.n	ed8a <bt_read_static_addr+0x2a>
		BT_WARN("No static addresses stored in controller");
    edc6:	4b0e      	ldr	r3, [pc, #56]	; (ee00 <bt_read_static_addr+0xa0>)
    edc8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    edcc:	9307      	str	r3, [sp, #28]
    edce:	2302      	movs	r3, #2
    edd0:	4809      	ldr	r0, [pc, #36]	; (edf8 <bt_read_static_addr+0x98>)
    edd2:	aa06      	add	r2, sp, #24
    edd4:	9306      	str	r3, [sp, #24]
    edd6:	f00d fb7e 	bl	1c4d6 <z_log_msg_static_create.constprop.0>
    edda:	e7d6      	b.n	ed8a <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    eddc:	4631      	mov	r1, r6
    edde:	fb08 7004 	mla	r0, r8, r4, r7
    ede2:	2216      	movs	r2, #22
    ede4:	f00d fa31 	bl	1c24a <memcpy>
	for (i = 0; i < cnt; i++) {
    ede8:	3401      	adds	r4, #1
    edea:	3616      	adds	r6, #22
    edec:	e7e4      	b.n	edb8 <bt_read_static_addr+0x58>
    edee:	bf00      	nop
    edf0:	20008000 	.word	0x20008000
    edf4:	000213ba 	.word	0x000213ba
    edf8:	0001edac 	.word	0x0001edac
    edfc:	000213e6 	.word	0x000213e6
    ee00:	00021406 	.word	0x00021406

0000ee04 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    ee06:	4e15      	ldr	r6, [pc, #84]	; (ee5c <bt_setup_random_id_addr+0x58>)
{
    ee08:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    ee0a:	79f4      	ldrb	r4, [r6, #7]
    ee0c:	b92c      	cbnz	r4, ee1a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    ee0e:	2101      	movs	r1, #1
    ee10:	a802      	add	r0, sp, #8
    ee12:	f7ff ffa5 	bl	ed60 <bt_read_static_addr>
    ee16:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    ee18:	b9c8      	cbnz	r0, ee4e <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    ee1a:	2100      	movs	r1, #0
    ee1c:	4608      	mov	r0, r1
}
    ee1e:	b009      	add	sp, #36	; 0x24
    ee20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    ee24:	f7ff bef4 	b.w	ec10 <bt_id_create>
    ee28:	ab02      	add	r3, sp, #8
    ee2a:	fb07 3105 	mla	r1, r7, r5, r3
    ee2e:	2206      	movs	r2, #6
    ee30:	f10d 0001 	add.w	r0, sp, #1
    ee34:	f00d fa09 	bl	1c24a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    ee38:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    ee3a:	4669      	mov	r1, sp
    ee3c:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    ee3e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    ee42:	f7ff feb3 	bl	ebac <id_create.constprop.0>
				if (err) {
    ee46:	3401      	adds	r4, #1
    ee48:	b110      	cbz	r0, ee50 <bt_setup_random_id_addr+0x4c>
}
    ee4a:	b009      	add	sp, #36	; 0x24
    ee4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    ee4e:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    ee50:	79f3      	ldrb	r3, [r6, #7]
    ee52:	b2e5      	uxtb	r5, r4
    ee54:	42ab      	cmp	r3, r5
    ee56:	d8e7      	bhi.n	ee28 <bt_setup_random_id_addr+0x24>
			return 0;
    ee58:	2000      	movs	r0, #0
    ee5a:	e7f6      	b.n	ee4a <bt_setup_random_id_addr+0x46>
    ee5c:	20008000 	.word	0x20008000

0000ee60 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee64:	4690      	mov	r8, r2
    ee66:	460e      	mov	r6, r1
    ee68:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    ee6a:	4602      	mov	r2, r0
    ee6c:	2800      	cmp	r0, #0
    ee6e:	d04b      	beq.n	ef08 <bt_id_set_adv_own_addr+0xa8>
    ee70:	2b00      	cmp	r3, #0
    ee72:	d049      	beq.n	ef08 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    ee74:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    ee76:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    ee78:	d531      	bpl.n	eede <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    ee7a:	4f25      	ldr	r7, [pc, #148]	; (ef10 <bt_id_set_adv_own_addr+0xb0>)
    ee7c:	f1b8 0f00 	cmp.w	r8, #0
    ee80:	d013      	beq.n	eeaa <bt_id_set_adv_own_addr+0x4a>
    ee82:	0688      	lsls	r0, r1, #26
    ee84:	d40a      	bmi.n	ee9c <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    ee86:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    ee8a:	5cfb      	ldrb	r3, [r7, r3]
    ee8c:	2b01      	cmp	r3, #1
    ee8e:	d015      	beq.n	eebc <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    ee90:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    ee92:	06b2      	lsls	r2, r6, #26
    ee94:	d50f      	bpl.n	eeb6 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    ee96:	f043 0302 	orr.w	r3, r3, #2
    ee9a:	e00b      	b.n	eeb4 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    ee9c:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    eea0:	0659      	lsls	r1, r3, #25
    eea2:	d4f0      	bmi.n	ee86 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    eea4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    eea8:	e006      	b.n	eeb8 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    eeaa:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    eeae:	5cfb      	ldrb	r3, [r7, r3]
    eeb0:	2b01      	cmp	r3, #1
    eeb2:	d003      	beq.n	eebc <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    eeb4:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    eeb6:	2000      	movs	r0, #0
}
    eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    eebc:	2107      	movs	r1, #7
    eebe:	fb01 7104 	mla	r1, r1, r4, r7
    eec2:	4610      	mov	r0, r2
    eec4:	3101      	adds	r1, #1
    eec6:	f00d fb0e 	bl	1c4e6 <bt_id_set_adv_random_addr>
				if (err) {
    eeca:	2800      	cmp	r0, #0
    eecc:	d1f4      	bne.n	eeb8 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    eece:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    eed2:	5d3b      	ldrb	r3, [r7, r4]
    eed4:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    eed6:	f1b8 0f00 	cmp.w	r8, #0
    eeda:	d0ec      	beq.n	eeb6 <bt_id_set_adv_own_addr+0x56>
    eedc:	e7d9      	b.n	ee92 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    eede:	074b      	lsls	r3, r1, #29
    eee0:	d50e      	bpl.n	ef00 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    eee2:	4e0b      	ldr	r6, [pc, #44]	; (ef10 <bt_id_set_adv_own_addr+0xb0>)
    eee4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    eee8:	5df3      	ldrb	r3, [r6, r7]
    eeea:	2b01      	cmp	r3, #1
    eeec:	d1e2      	bne.n	eeb4 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    eeee:	2107      	movs	r1, #7
    eef0:	fb11 3104 	smlabb	r1, r1, r4, r3
    eef4:	4431      	add	r1, r6
    eef6:	f00d faf6 	bl	1c4e6 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    eefa:	5df3      	ldrb	r3, [r6, r7]
    eefc:	702b      	strb	r3, [r5, #0]
		if (err) {
    eefe:	e7db      	b.n	eeb8 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    ef00:	f00d faf9 	bl	1c4f6 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    ef04:	2301      	movs	r3, #1
    ef06:	e7f9      	b.n	eefc <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    ef08:	f06f 0015 	mvn.w	r0, #21
    ef0c:	e7d4      	b.n	eeb8 <bt_id_set_adv_own_addr+0x58>
    ef0e:	bf00      	nop
    ef10:	20008000 	.word	0x20008000

0000ef14 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    ef14:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ef16:	4d13      	ldr	r5, [pc, #76]	; (ef64 <bt_id_init+0x50>)
{
    ef18:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ef1a:	79eb      	ldrb	r3, [r5, #7]
    ef1c:	b11b      	cbz	r3, ef26 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    ef1e:	2400      	movs	r4, #0
}
    ef20:	4620      	mov	r0, r4
    ef22:	b007      	add	sp, #28
    ef24:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    ef26:	f7ff ff0b 	bl	ed40 <bt_setup_public_id_addr>
		if (err) {
    ef2a:	4604      	mov	r4, r0
    ef2c:	b150      	cbz	r0, ef44 <bt_id_init+0x30>
			BT_ERR("Unable to set identity address");
    ef2e:	4b0e      	ldr	r3, [pc, #56]	; (ef68 <bt_id_init+0x54>)
			BT_ERR("Unable to set random address");
    ef30:	9305      	str	r3, [sp, #20]
    ef32:	2302      	movs	r3, #2
    ef34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef38:	480c      	ldr	r0, [pc, #48]	; (ef6c <bt_id_init+0x58>)
    ef3a:	aa04      	add	r2, sp, #16
    ef3c:	9304      	str	r3, [sp, #16]
    ef3e:	f00d faca 	bl	1c4d6 <z_log_msg_static_create.constprop.0>
			return err;
    ef42:	e7ed      	b.n	ef20 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ef44:	79eb      	ldrb	r3, [r5, #7]
    ef46:	2b00      	cmp	r3, #0
    ef48:	d1e9      	bne.n	ef1e <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    ef4a:	f7ff ff5b 	bl	ee04 <bt_setup_random_id_addr>
		if (err) {
    ef4e:	4604      	mov	r4, r0
    ef50:	2800      	cmp	r0, #0
    ef52:	d1ec      	bne.n	ef2e <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    ef54:	1c68      	adds	r0, r5, #1
    ef56:	f7ff fdfd 	bl	eb54 <set_random_address>
		if (err) {
    ef5a:	4604      	mov	r4, r0
    ef5c:	2800      	cmp	r0, #0
    ef5e:	d0df      	beq.n	ef20 <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
    ef60:	4b03      	ldr	r3, [pc, #12]	; (ef70 <bt_id_init+0x5c>)
    ef62:	e7e5      	b.n	ef30 <bt_id_init+0x1c>
    ef64:	20008000 	.word	0x20008000
    ef68:	0002142f 	.word	0x0002142f
    ef6c:	0001edac 	.word	0x0001edac
    ef70:	0002144e 	.word	0x0002144e

0000ef74 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef78:	460c      	mov	r4, r1
    ef7a:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    ef7c:	2120      	movs	r1, #32
{
    ef7e:	4692      	mov	sl, r2
    ef80:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    ef82:	f7fe fd97 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    ef86:	4605      	mov	r5, r0
    ef88:	2800      	cmp	r0, #0
    ef8a:	d05b      	beq.n	f044 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    ef8c:	2120      	movs	r1, #32
    ef8e:	3008      	adds	r0, #8
    ef90:	f004 f8f6 	bl	13180 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    ef94:	2220      	movs	r2, #32
    ef96:	4681      	mov	r9, r0
    ef98:	2100      	movs	r1, #0
    ef9a:	f00d f961 	bl	1c260 <memset>
	uint8_t set_data_len = 0;
    ef9e:	2600      	movs	r6, #0

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    efa0:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    efa4:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
    efa8:	2300      	movs	r3, #0
    efaa:	f8d4 8000 	ldr.w	r8, [r4]
    efae:	6862      	ldr	r2, [r4, #4]
    efb0:	4293      	cmp	r3, r2
    efb2:	d30c      	bcc.n	efce <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    efb4:	3408      	adds	r4, #8
    efb6:	45a2      	cmp	sl, r4
    efb8:	d1f6      	bne.n	efa8 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    efba:	2200      	movs	r2, #0
    efbc:	4629      	mov	r1, r5
    efbe:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
    efc0:	f889 6000 	strb.w	r6, [r9]
}
    efc4:	b009      	add	sp, #36	; 0x24
    efc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    efca:	f7fe bdc1 	b.w	db50 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    efce:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    efd2:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    efd4:	1811      	adds	r1, r2, r0
    efd6:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    efd8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    efdc:	d91b      	bls.n	f016 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    efde:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    efe2:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    efe6:	d101      	bne.n	efec <hci_set_ad+0x78>
    efe8:	2a00      	cmp	r2, #0
    efea:	dc12      	bgt.n	f012 <hci_set_ad+0x9e>
					BT_ERR("Too big advertising data");
    efec:	4b17      	ldr	r3, [pc, #92]	; (f04c <hci_set_ad+0xd8>)
    efee:	9307      	str	r3, [sp, #28]
    eff0:	2302      	movs	r3, #2
    eff2:	9306      	str	r3, [sp, #24]
    eff4:	2300      	movs	r3, #0
    eff6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    effa:	4815      	ldr	r0, [pc, #84]	; (f050 <hci_set_ad+0xdc>)
    effc:	aa06      	add	r2, sp, #24
    effe:	f7fb fe7d 	bl	acfc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    f002:	4628      	mov	r0, r5
    f004:	f003 ff9a 	bl	12f3c <net_buf_unref>
					return -EINVAL;
    f008:	f06f 0015 	mvn.w	r0, #21
}
    f00c:	b009      	add	sp, #36	; 0x24
    f00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f012:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f016:	b2d7      	uxtb	r7, r2
    f018:	1c79      	adds	r1, r7, #1
    f01a:	f80b 1006 	strb.w	r1, [fp, r6]
    f01e:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    f020:	b2c9      	uxtb	r1, r1
    f022:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f026:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f02a:	fa5b f080 	uxtab	r0, fp, r0
    f02e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f030:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f032:	f00d f90a 	bl	1c24a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f036:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f038:	4437      	add	r7, r6
    f03a:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
    f03c:	3301      	adds	r3, #1
    f03e:	f108 0808 	add.w	r8, r8, #8
    f042:	e7b4      	b.n	efae <hci_set_ad+0x3a>
		return -ENOBUFS;
    f044:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f048:	e7e0      	b.n	f00c <hci_set_ad+0x98>
    f04a:	bf00      	nop
    f04c:	00021471 	.word	0x00021471
    f050:	0001ed6c 	.word	0x0001ed6c

0000f054 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    f054:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    f056:	4605      	mov	r5, r0
    f058:	4b16      	ldr	r3, [pc, #88]	; (f0b4 <le_adv_start_add_conn+0x60>)
    f05a:	f815 2b09 	ldrb.w	r2, [r5], #9
{
    f05e:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    f060:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    f064:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
    f066:	2207      	movs	r2, #7
    f068:	4628      	mov	r0, r5
    f06a:	4913      	ldr	r1, [pc, #76]	; (f0b8 <le_adv_start_add_conn+0x64>)
    f06c:	f00d f8dd 	bl	1c22a <memcmp>
    f070:	4603      	mov	r3, r0
    f072:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f074:	b96b      	cbnz	r3, f092 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    f076:	4911      	ldr	r1, [pc, #68]	; (f0bc <le_adv_start_add_conn+0x68>)
    f078:	f001 f85e 	bl	10138 <bt_conn_add_le>
		if (!conn) {
    f07c:	4604      	mov	r4, r0
    f07e:	b910      	cbnz	r0, f086 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
    f080:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    f084:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    f086:	2104      	movs	r1, #4
    f088:	f000 fe4c 	bl	fd24 <bt_conn_set_state>
		return 0;
    f08c:	2000      	movs	r0, #0
		*out_conn = conn;
    f08e:	6034      	str	r4, [r6, #0]
    f090:	e7f8      	b.n	f084 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    f092:	4629      	mov	r1, r5
    f094:	f001 f884 	bl	101a0 <bt_conn_exists_le>
    f098:	b940      	cbnz	r0, f0ac <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    f09a:	7820      	ldrb	r0, [r4, #0]
    f09c:	4629      	mov	r1, r5
    f09e:	f001 f84b 	bl	10138 <bt_conn_add_le>
	if (!conn) {
    f0a2:	4604      	mov	r4, r0
    f0a4:	2800      	cmp	r0, #0
    f0a6:	d0eb      	beq.n	f080 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    f0a8:	2105      	movs	r1, #5
    f0aa:	e7ed      	b.n	f088 <le_adv_start_add_conn+0x34>
		return -EINVAL;
    f0ac:	f06f 0015 	mvn.w	r0, #21
    f0b0:	e7e8      	b.n	f084 <le_adv_start_add_conn+0x30>
    f0b2:	bf00      	nop
    f0b4:	20008000 	.word	0x20008000
    f0b8:	00020c77 	.word	0x00020c77
    f0bc:	00020c70 	.word	0x00020c70

0000f0c0 <valid_adv_param>:
{
    f0c0:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    f0c2:	6843      	ldr	r3, [r0, #4]
{
    f0c4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    f0c6:	0558      	lsls	r0, r3, #21
    f0c8:	d501      	bpl.n	f0ce <valid_adv_param+0xe>
		return false;
    f0ca:	2000      	movs	r0, #0
}
    f0cc:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    f0ce:	6922      	ldr	r2, [r4, #16]
    f0d0:	b10a      	cbz	r2, f0d6 <valid_adv_param+0x16>
    f0d2:	07d9      	lsls	r1, r3, #31
    f0d4:	d5f9      	bpl.n	f0ca <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    f0d6:	4d19      	ldr	r5, [pc, #100]	; (f13c <valid_adv_param+0x7c>)
    f0d8:	7820      	ldrb	r0, [r4, #0]
    f0da:	79eb      	ldrb	r3, [r5, #7]
    f0dc:	4283      	cmp	r3, r0
    f0de:	d9f4      	bls.n	f0ca <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    f0e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    f0e4:	2207      	movs	r2, #7
    f0e6:	4916      	ldr	r1, [pc, #88]	; (f140 <valid_adv_param+0x80>)
    f0e8:	4428      	add	r0, r5
    f0ea:	f00d f89e 	bl	1c22a <memcmp>
	if (param->id >= bt_dev.id_count ||
    f0ee:	2800      	cmp	r0, #0
    f0f0:	d0eb      	beq.n	f0ca <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    f0f2:	6860      	ldr	r0, [r4, #4]
    f0f4:	07c2      	lsls	r2, r0, #31
    f0f6:	d406      	bmi.n	f106 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    f0f8:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    f0fc:	2b08      	cmp	r3, #8
    f0fe:	d802      	bhi.n	f106 <valid_adv_param+0x46>
    f100:	68a3      	ldr	r3, [r4, #8]
    f102:	2b9f      	cmp	r3, #159	; 0x9f
    f104:	d9e1      	bls.n	f0ca <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    f106:	f010 0f30 	tst.w	r0, #48	; 0x30
    f10a:	d002      	beq.n	f112 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    f10c:	6923      	ldr	r3, [r4, #16]
    f10e:	2b00      	cmp	r3, #0
    f110:	d0db      	beq.n	f0ca <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    f112:	06c3      	lsls	r3, r0, #27
    f114:	d401      	bmi.n	f11a <valid_adv_param+0x5a>
    f116:	6923      	ldr	r3, [r4, #16]
    f118:	b943      	cbnz	r3, f12c <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    f11a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    f11e:	429a      	cmp	r2, r3
    f120:	d8d3      	bhi.n	f0ca <valid_adv_param+0xa>
    f122:	2a1f      	cmp	r2, #31
    f124:	d9d1      	bls.n	f0ca <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    f126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    f12a:	d8ce      	bhi.n	f0ca <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    f12c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    f130:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    f134:	bf18      	it	ne
    f136:	2001      	movne	r0, #1
    f138:	e7c8      	b.n	f0cc <valid_adv_param+0xc>
    f13a:	bf00      	nop
    f13c:	20008000 	.word	0x20008000
    f140:	00020c77 	.word	0x00020c77

0000f144 <bt_le_adv_lookup_legacy>:
}
    f144:	4800      	ldr	r0, [pc, #0]	; (f148 <bt_le_adv_lookup_legacy+0x4>)
    f146:	4770      	bx	lr
    f148:	20008018 	.word	0x20008018

0000f14c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    f14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f150:	b093      	sub	sp, #76	; 0x4c
    f152:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    f154:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    f156:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    f15a:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
    f15c:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f160:	4892      	ldr	r0, [pc, #584]	; (f3ac <bt_le_adv_start_legacy+0x260>)
    f162:	bf18      	it	ne
    f164:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
    f166:	9307      	str	r3, [sp, #28]
    f168:	f00d f9ef 	bl	1c54a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    f16c:	0747      	lsls	r7, r0, #29
{
    f16e:	460d      	mov	r5, r1
    f170:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    f172:	f140 8112 	bpl.w	f39a <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    f176:	4608      	mov	r0, r1
    f178:	f7ff ffa2 	bl	f0c0 <valid_adv_param>
    f17c:	b928      	cbnz	r0, f18a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    f17e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    f182:	4620      	mov	r0, r4
    f184:	b013      	add	sp, #76	; 0x4c
    f186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    f18a:	4628      	mov	r0, r5
    f18c:	f00d f9ca 	bl	1c524 <bt_id_adv_random_addr_check>
    f190:	4681      	mov	r9, r0
    f192:	2800      	cmp	r0, #0
    f194:	d0f3      	beq.n	f17e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    f196:	f106 0810 	add.w	r8, r6, #16
    f19a:	4640      	mov	r0, r8
    f19c:	f00d f9d5 	bl	1c54a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f1a0:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    f1a4:	0600      	lsls	r0, r0, #24
    f1a6:	f100 80fb 	bmi.w	f3a0 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
    f1aa:	220f      	movs	r2, #15
    f1ac:	4639      	mov	r1, r7
    f1ae:	a808      	add	r0, sp, #32
    f1b0:	f00d f856 	bl	1c260 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    f1b4:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    f1b6:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    f1b8:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    f1bc:	68eb      	ldr	r3, [r5, #12]
    f1be:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    f1c2:	f00d f9b3 	bl	1c52c <get_adv_channel_map>
	if (adv->id != param->id) {
    f1c6:	7832      	ldrb	r2, [r6, #0]
    f1c8:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    f1ca:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    f1ce:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    f1d0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    f1d4:	d004      	beq.n	f1e0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f1d6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    f1da:	4874      	ldr	r0, [pc, #464]	; (f3ac <bt_le_adv_start_legacy+0x260>)
    f1dc:	f00d f9b8 	bl	1c550 <atomic_and>
	adv->id = param->id;
    f1e0:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    f1e2:	4a73      	ldr	r2, [pc, #460]	; (f3b0 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
    f1e4:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    f1e6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    f1ea:	4630      	mov	r0, r6
    f1ec:	4622      	mov	r2, r4
    f1ee:	6869      	ldr	r1, [r5, #4]
    f1f0:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    f1f4:	f7ff fe34 	bl	ee60 <bt_id_set_adv_own_addr>
	if (err) {
    f1f8:	4604      	mov	r4, r0
    f1fa:	2800      	cmp	r0, #0
    f1fc:	d1c1      	bne.n	f182 <bt_le_adv_start_legacy+0x36>
	memcpy(dst, src, sizeof(*dst));
    f1fe:	2207      	movs	r2, #7
		bt_addr_le_copy(&adv->target_addr, param->peer);
    f200:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    f204:	f1ba 0f00 	cmp.w	sl, #0
    f208:	d013      	beq.n	f232 <bt_le_adv_start_legacy+0xe6>
    f20a:	6929      	ldr	r1, [r5, #16]
    f20c:	f00d f81d 	bl	1c24a <memcpy>
	name_type = get_adv_name_type_param(param);
    f210:	4628      	mov	r0, r5
    f212:	f00d fa2d 	bl	1c670 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    f216:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    f218:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    f21a:	07d9      	lsls	r1, r3, #31
    f21c:	d416      	bmi.n	f24c <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    f21e:	059b      	lsls	r3, r3, #22
    f220:	d403      	bmi.n	f22a <bt_le_adv_start_legacy+0xde>
    f222:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    f224:	b90b      	cbnz	r3, f22a <bt_le_adv_start_legacy+0xde>
    f226:	2f02      	cmp	r7, #2
    f228:	d15a      	bne.n	f2e0 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    f22a:	2302      	movs	r3, #2
    f22c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    f230:	e01a      	b.n	f268 <bt_le_adv_start_legacy+0x11c>
    f232:	4960      	ldr	r1, [pc, #384]	; (f3b4 <bt_le_adv_start_legacy+0x268>)
    f234:	f00d f809 	bl	1c24a <memcpy>
	name_type = get_adv_name_type_param(param);
    f238:	4628      	mov	r0, r5
    f23a:	f00d fa19 	bl	1c670 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    f23e:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    f240:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    f242:	07da      	lsls	r2, r3, #31
    f244:	d5eb      	bpl.n	f21e <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    f246:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    f24a:	e00d      	b.n	f268 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    f24c:	f013 0f10 	tst.w	r3, #16
    f250:	bf0c      	ite	eq
    f252:	2301      	moveq	r3, #1
    f254:	2304      	movne	r3, #4
    f256:	2207      	movs	r2, #7
    f258:	6929      	ldr	r1, [r5, #16]
    f25a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    f25e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
    f262:	46a1      	mov	r9, r4
    f264:	f00c fff1 	bl	1c24a <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    f268:	210f      	movs	r1, #15
    f26a:	f242 0006 	movw	r0, #8198	; 0x2006
    f26e:	f7fe fc21 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
    f272:	4604      	mov	r4, r0
    f274:	2800      	cmp	r0, #0
    f276:	f000 8096 	beq.w	f3a6 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f27a:	220f      	movs	r2, #15
    f27c:	a908      	add	r1, sp, #32
    f27e:	3008      	adds	r0, #8
    f280:	f00e f9a5 	bl	1d5ce <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    f284:	4621      	mov	r1, r4
    f286:	2200      	movs	r2, #0
    f288:	f242 0006 	movw	r0, #8198	; 0x2006
    f28c:	f7fe fc60 	bl	db50 <bt_hci_cmd_send_sync>
	if (err) {
    f290:	4604      	mov	r4, r0
    f292:	2800      	cmp	r0, #0
    f294:	f47f af75 	bne.w	f182 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
    f298:	f1ba 0f00 	cmp.w	sl, #0
    f29c:	d026      	beq.n	f2ec <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    f29e:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f2a0:	07dc      	lsls	r4, r3, #31
    f2a2:	d431      	bmi.n	f308 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
    f2a4:	2101      	movs	r1, #1
    f2a6:	4630      	mov	r0, r6
    f2a8:	f00d f9f2 	bl	1c690 <bt_le_adv_set_enable_legacy>
	if (err) {
    f2ac:	4604      	mov	r4, r0
    f2ae:	2800      	cmp	r0, #0
    f2b0:	d06b      	beq.n	f38a <bt_le_adv_start_legacy+0x23e>
		BT_ERR("Failed to start advertiser");
    f2b2:	4b41      	ldr	r3, [pc, #260]	; (f3b8 <bt_le_adv_start_legacy+0x26c>)
    f2b4:	9311      	str	r3, [sp, #68]	; 0x44
    f2b6:	2302      	movs	r3, #2
    f2b8:	9310      	str	r3, [sp, #64]	; 0x40
    f2ba:	2300      	movs	r3, #0
    f2bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f2c0:	483e      	ldr	r0, [pc, #248]	; (f3bc <bt_le_adv_start_legacy+0x270>)
    f2c2:	aa10      	add	r2, sp, #64	; 0x40
    f2c4:	f7fb fd1a 	bl	acfc <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    f2c8:	9d07      	ldr	r5, [sp, #28]
    f2ca:	2d00      	cmp	r5, #0
    f2cc:	f43f af59 	beq.w	f182 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f2d0:	4628      	mov	r0, r5
    f2d2:	2100      	movs	r1, #0
    f2d4:	f000 fd26 	bl	fd24 <bt_conn_set_state>
			bt_conn_unref(conn);
    f2d8:	4628      	mov	r0, r5
    f2da:	f000 fceb 	bl	fcb4 <bt_conn_unref>
    f2de:	e750      	b.n	f182 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    f2e0:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    f2e2:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    f2e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    f2ea:	e7bd      	b.n	f268 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    f2ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f2ee:	4659      	mov	r1, fp
    f2f0:	9300      	str	r3, [sp, #0]
    f2f2:	4630      	mov	r0, r6
    f2f4:	e9cd 9701 	strd	r9, r7, [sp, #4]
    f2f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    f2fa:	9a05      	ldr	r2, [sp, #20]
    f2fc:	f00d f946 	bl	1c58c <le_adv_update.constprop.0>
		if (err) {
    f300:	4604      	mov	r4, r0
    f302:	2800      	cmp	r0, #0
    f304:	d0cb      	beq.n	f29e <bt_le_adv_start_legacy+0x152>
    f306:	e73c      	b.n	f182 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    f308:	4630      	mov	r0, r6
    f30a:	a907      	add	r1, sp, #28
    f30c:	f7ff fea2 	bl	f054 <le_adv_start_add_conn>
		if (err) {
    f310:	4604      	mov	r4, r0
    f312:	2800      	cmp	r0, #0
    f314:	d0c6      	beq.n	f2a4 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
    f316:	f110 0f0c 	cmn.w	r0, #12
    f31a:	f47f af32 	bne.w	f182 <bt_le_adv_start_legacy+0x36>
    f31e:	f1ba 0f00 	cmp.w	sl, #0
    f322:	f47f af2e 	bne.w	f182 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    f326:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    f328:	0798      	lsls	r0, r3, #30
    f32a:	f53f af2a 	bmi.w	f182 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    f32e:	686c      	ldr	r4, [r5, #4]
    f330:	f084 0402 	eor.w	r4, r4, #2
    f334:	f3c4 0440 	ubfx	r4, r4, #1, #1
    f338:	f004 0201 	and.w	r2, r4, #1
    f33c:	210e      	movs	r1, #14
    f33e:	4640      	mov	r0, r8
    f340:	f00d f911 	bl	1c566 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    f344:	1e7b      	subs	r3, r7, #1
    f346:	425a      	negs	r2, r3
    f348:	415a      	adcs	r2, r3
    f34a:	2108      	movs	r1, #8
    f34c:	4640      	mov	r0, r8
    f34e:	f00d f90a 	bl	1c566 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    f352:	1eb9      	subs	r1, r7, #2
    f354:	424a      	negs	r2, r1
    f356:	414a      	adcs	r2, r1
    f358:	4640      	mov	r0, r8
    f35a:	2109      	movs	r1, #9
    f35c:	f00d f903 	bl	1c566 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    f360:	686a      	ldr	r2, [r5, #4]
    f362:	210a      	movs	r1, #10
    f364:	4640      	mov	r0, r8
    f366:	f002 0201 	and.w	r2, r2, #1
    f36a:	f00d f8fc 	bl	1c566 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    f36e:	464a      	mov	r2, r9
    f370:	210b      	movs	r1, #11
    f372:	4640      	mov	r0, r8
    f374:	f00d f8f7 	bl	1c566 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    f378:	686a      	ldr	r2, [r5, #4]
    f37a:	210d      	movs	r1, #13
    f37c:	4640      	mov	r0, r8
    f37e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    f382:	f00d f8f0 	bl	1c566 <atomic_set_bit_to>
	return 0;
    f386:	2400      	movs	r4, #0
    f388:	e6fb      	b.n	f182 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    f38a:	9807      	ldr	r0, [sp, #28]
    f38c:	b108      	cbz	r0, f392 <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
    f38e:	f000 fc91 	bl	fcb4 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    f392:	f1ba 0f00 	cmp.w	sl, #0
    f396:	d1cf      	bne.n	f338 <bt_le_adv_start_legacy+0x1ec>
    f398:	e7c9      	b.n	f32e <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
    f39a:	f06f 040a 	mvn.w	r4, #10
    f39e:	e6f0      	b.n	f182 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    f3a0:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f3a4:	e6ed      	b.n	f182 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    f3a6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f3aa:	e6ea      	b.n	f182 <bt_le_adv_start_legacy+0x36>
    f3ac:	200080cc 	.word	0x200080cc
    f3b0:	20008000 	.word	0x20008000
    f3b4:	00020c77 	.word	0x00020c77
    f3b8:	0002148a 	.word	0x0002148a
    f3bc:	0001ed6c 	.word	0x0001ed6c

0000f3c0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    f3c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f3c2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    f3c4:	9a06      	ldr	r2, [sp, #24]
{
    f3c6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    f3c8:	e9cd 3200 	strd	r3, r2, [sp]
    f3cc:	462b      	mov	r3, r5
    f3ce:	460a      	mov	r2, r1
    f3d0:	4601      	mov	r1, r0
    f3d2:	4811      	ldr	r0, [pc, #68]	; (f418 <bt_le_adv_start+0x58>)
    f3d4:	f7ff feba 	bl	f14c <bt_le_adv_start_legacy>
    f3d8:	4621      	mov	r1, r4
    f3da:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    f3dc:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    f3de:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    f3e2:	429d      	cmp	r5, r3
    f3e4:	d102      	bne.n	f3ec <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    f3e6:	4630      	mov	r0, r6
    f3e8:	b002      	add	sp, #8
    f3ea:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    f3ec:	880a      	ldrh	r2, [r1, #0]
    f3ee:	4282      	cmp	r2, r0
    f3f0:	d104      	bne.n	f3fc <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    f3f2:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    f3f4:	b112      	cbz	r2, f3fc <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    f3f6:	7812      	ldrb	r2, [r2, #0]
    f3f8:	07d2      	lsls	r2, r2, #31
    f3fa:	d402      	bmi.n	f402 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    f3fc:	3301      	adds	r3, #1
    f3fe:	3108      	adds	r1, #8
    f400:	e7ef      	b.n	f3e2 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    f402:	4906      	ldr	r1, [pc, #24]	; (f41c <bt_le_adv_start+0x5c>)
    f404:	4806      	ldr	r0, [pc, #24]	; (f420 <bt_le_adv_start+0x60>)
    f406:	f009 f8e9 	bl	185dc <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    f40a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    f40e:	2300      	movs	r3, #0
    f410:	4803      	ldr	r0, [pc, #12]	; (f420 <bt_le_adv_start+0x60>)
    f412:	f009 f9ff 	bl	18814 <k_work_reschedule>
    f416:	e7e6      	b.n	f3e6 <bt_le_adv_start+0x26>
    f418:	20008018 	.word	0x20008018
    f41c:	0000f4a9 	.word	0x0000f4a9
    f420:	20008030 	.word	0x20008030

0000f424 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    f424:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    f426:	481a      	ldr	r0, [pc, #104]	; (f490 <bt_le_adv_stop+0x6c>)
    f428:	f00d f957 	bl	1c6da <bt_le_lim_adv_cancel_timeout>
    f42c:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    f430:	4818      	ldr	r0, [pc, #96]	; (f494 <bt_le_adv_stop+0x70>)
    f432:	f00d f88d 	bl	1c550 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f436:	4817      	ldr	r0, [pc, #92]	; (f494 <bt_le_adv_stop+0x70>)
    f438:	f00d f887 	bl	1c54a <atomic_get>
    f43c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    f43e:	061a      	lsls	r2, r3, #24
    f440:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    f444:	d523      	bpl.n	f48e <bt_le_adv_stop+0x6a>
    f446:	4813      	ldr	r0, [pc, #76]	; (f494 <bt_le_adv_stop+0x70>)
    f448:	f00d f87f 	bl	1c54a <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f44c:	0543      	lsls	r3, r0, #21
    f44e:	d514      	bpl.n	f47a <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
    f450:	2207      	movs	r2, #7
    f452:	4911      	ldr	r1, [pc, #68]	; (f498 <bt_le_adv_stop+0x74>)
    f454:	4811      	ldr	r0, [pc, #68]	; (f49c <bt_le_adv_stop+0x78>)
    f456:	f00c fee8 	bl	1c22a <memcmp>
    f45a:	4b11      	ldr	r3, [pc, #68]	; (f4a0 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f45c:	b998      	cbnz	r0, f486 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    f45e:	2204      	movs	r2, #4
    f460:	4910      	ldr	r1, [pc, #64]	; (f4a4 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    f462:	7e18      	ldrb	r0, [r3, #24]
    f464:	f000 fecc 	bl	10200 <bt_conn_lookup_state_le>
    f468:	4604      	mov	r4, r0
	if (conn) {
    f46a:	b130      	cbz	r0, f47a <bt_le_adv_stop+0x56>
		conn->err = status;
    f46c:	2100      	movs	r1, #0
    f46e:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f470:	f000 fc58 	bl	fd24 <bt_conn_set_state>
		bt_conn_unref(conn);
    f474:	4620      	mov	r0, r4
    f476:	f000 fc1d 	bl	fcb4 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    f47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    f47e:	2100      	movs	r1, #0
    f480:	4803      	ldr	r0, [pc, #12]	; (f490 <bt_le_adv_stop+0x6c>)
    f482:	f00d b905 	b.w	1c690 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    f486:	2205      	movs	r2, #5
    f488:	f103 0121 	add.w	r1, r3, #33	; 0x21
    f48c:	e7e9      	b.n	f462 <bt_le_adv_stop+0x3e>
}
    f48e:	bd10      	pop	{r4, pc}
    f490:	20008018 	.word	0x20008018
    f494:	20008028 	.word	0x20008028
    f498:	00020c77 	.word	0x00020c77
    f49c:	20008021 	.word	0x20008021
    f4a0:	20008000 	.word	0x20008000
    f4a4:	00020c70 	.word	0x00020c70

0000f4a8 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    f4a8:	b580      	push	{r7, lr}
    f4aa:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    f4ac:	f7ff ffba 	bl	f424 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
    f4b0:	b088      	sub	sp, #32
    f4b2:	466a      	mov	r2, sp
    f4b4:	4b06      	ldr	r3, [pc, #24]	; (f4d0 <adv_timeout+0x28>)
    f4b6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f4ba:	2303      	movs	r3, #3
    f4bc:	f842 3f10 	str.w	r3, [r2, #16]!
    f4c0:	2300      	movs	r3, #0
    f4c2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f4c6:	4803      	ldr	r0, [pc, #12]	; (f4d4 <adv_timeout+0x2c>)
    f4c8:	f7fb fc18 	bl	acfc <z_impl_z_log_msg_static_create>
}
    f4cc:	46bd      	mov	sp, r7
    f4ce:	bd80      	pop	{r7, pc}
    f4d0:	000214a5 	.word	0x000214a5
    f4d4:	0001ed6c 	.word	0x0001ed6c

0000f4d8 <bt_le_adv_resume>:
{
    f4d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f4da:	4c1e      	ldr	r4, [pc, #120]	; (f554 <bt_le_adv_resume+0x7c>)
    f4dc:	4620      	mov	r0, r4
    f4de:	f00d f834 	bl	1c54a <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    f4e2:	0440      	lsls	r0, r0, #17
    f4e4:	d534      	bpl.n	f550 <bt_le_adv_resume+0x78>
    f4e6:	4620      	mov	r0, r4
    f4e8:	f00d f82f 	bl	1c54a <atomic_get>
    f4ec:	0601      	lsls	r1, r0, #24
    f4ee:	d42f      	bmi.n	f550 <bt_le_adv_resume+0x78>
    f4f0:	4620      	mov	r0, r4
    f4f2:	f00d f82a 	bl	1c54a <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    f4f6:	0542      	lsls	r2, r0, #21
    f4f8:	d52a      	bpl.n	f550 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
    f4fa:	a901      	add	r1, sp, #4
    f4fc:	f1a4 0010 	sub.w	r0, r4, #16
    f500:	f7ff fda8 	bl	f054 <le_adv_start_add_conn>
	if (err) {
    f504:	4605      	mov	r5, r0
    f506:	bb18      	cbnz	r0, f550 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
    f508:	2101      	movs	r1, #1
    f50a:	f1a4 0010 	sub.w	r0, r4, #16
    f50e:	f00d f8bf 	bl	1c690 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
    f512:	9e01      	ldr	r6, [sp, #4]
	if (err) {
    f514:	b928      	cbnz	r0, f522 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
    f516:	4630      	mov	r0, r6
}
    f518:	b002      	add	sp, #8
    f51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f51e:	f000 bbc9 	b.w	fcb4 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f522:	4629      	mov	r1, r5
    f524:	4630      	mov	r0, r6
    f526:	f000 fbfd 	bl	fd24 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f52a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    f52e:	4620      	mov	r0, r4
    f530:	f00d f80e 	bl	1c550 <atomic_and>
    f534:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    f536:	4630      	mov	r0, r6
    f538:	f000 fbbc 	bl	fcb4 <bt_conn_unref>
	if (persist_paused) {
    f53c:	046b      	lsls	r3, r5, #17
    f53e:	d507      	bpl.n	f550 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f540:	e8d4 3fef 	ldaex	r3, [r4]
    f544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f548:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f54c:	2a00      	cmp	r2, #0
    f54e:	d1f7      	bne.n	f540 <bt_le_adv_resume+0x68>
}
    f550:	b002      	add	sp, #8
    f552:	bd70      	pop	{r4, r5, r6, pc}
    f554:	20008028 	.word	0x20008028

0000f558 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    f558:	b530      	push	{r4, r5, lr}
    f55a:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
    f55c:	2120      	movs	r1, #32
    f55e:	a80a      	add	r0, sp, #40	; 0x28
    f560:	f7fe fb9a 	bl	dc98 <bt_hci_le_rand>
	if (ret) {
    f564:	4604      	mov	r4, r0
    f566:	bb18      	cbnz	r0, f5b0 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
    f568:	f00f f8e4 	bl	1e734 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    f56c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    f570:	fba0 2305 	umull	r2, r3, r0, r5
    f574:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    f578:	2308      	movs	r3, #8
    f57a:	0bd2      	lsrs	r2, r2, #15
    f57c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    f580:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
    f582:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    f586:	9300      	str	r3, [sp, #0]
    f588:	2220      	movs	r2, #32
    f58a:	480b      	ldr	r0, [pc, #44]	; (f5b8 <prng_reseed.constprop.0+0x60>)
    f58c:	446b      	add	r3, sp
    f58e:	a90a      	add	r1, sp, #40	; 0x28
    f590:	f00c fd5d 	bl	1c04e <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    f594:	b960      	cbnz	r0, f5b0 <prng_reseed.constprop.0+0x58>
		BT_ERR("Failed to re-seed PRNG");
    f596:	4b09      	ldr	r3, [pc, #36]	; (f5bc <prng_reseed.constprop.0+0x64>)
    f598:	9309      	str	r3, [sp, #36]	; 0x24
    f59a:	2302      	movs	r3, #2
    f59c:	9308      	str	r3, [sp, #32]
    f59e:	4623      	mov	r3, r4
    f5a0:	f06f 0404 	mvn.w	r4, #4
    f5a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5a8:	4805      	ldr	r0, [pc, #20]	; (f5c0 <prng_reseed.constprop.0+0x68>)
    f5aa:	aa08      	add	r2, sp, #32
    f5ac:	f7fb fba6 	bl	acfc <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
    f5b0:	4620      	mov	r0, r4
    f5b2:	b013      	add	sp, #76	; 0x4c
    f5b4:	bd30      	pop	{r4, r5, pc}
    f5b6:	bf00      	nop
    f5b8:	20009138 	.word	0x20009138
    f5bc:	000214cb 	.word	0x000214cb
    f5c0:	0001ed8c 	.word	0x0001ed8c

0000f5c4 <prng_init>:

int prng_init(void)
{
    f5c4:	b510      	push	{r4, lr}
    f5c6:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
    f5c8:	2108      	movs	r1, #8
    f5ca:	4668      	mov	r0, sp
    f5cc:	f7fe fb64 	bl	dc98 <bt_hci_le_rand>
	if (ret) {
    f5d0:	4604      	mov	r4, r0
    f5d2:	b990      	cbnz	r0, f5fa <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
    f5d4:	2208      	movs	r2, #8
    f5d6:	4669      	mov	r1, sp
    f5d8:	480b      	ldr	r0, [pc, #44]	; (f608 <prng_init+0x44>)
    f5da:	f00c fd18 	bl	1c00e <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
    f5de:	b978      	cbnz	r0, f600 <prng_init+0x3c>
		BT_ERR("Failed to initialize PRNG");
    f5e0:	4b0a      	ldr	r3, [pc, #40]	; (f60c <prng_init+0x48>)
    f5e2:	9307      	str	r3, [sp, #28]
    f5e4:	2302      	movs	r3, #2
    f5e6:	9306      	str	r3, [sp, #24]
    f5e8:	4623      	mov	r3, r4
		return -EIO;
    f5ea:	f06f 0404 	mvn.w	r4, #4
    f5ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5f2:	4807      	ldr	r0, [pc, #28]	; (f610 <prng_init+0x4c>)
    f5f4:	aa06      	add	r2, sp, #24
    f5f6:	f7fb fb81 	bl	acfc <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    f5fa:	4620      	mov	r0, r4
    f5fc:	b008      	add	sp, #32
    f5fe:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    f600:	f7ff ffaa 	bl	f558 <prng_reseed.constprop.0>
    f604:	4604      	mov	r4, r0
    f606:	e7f8      	b.n	f5fa <prng_init+0x36>
    f608:	20009138 	.word	0x20009138
    f60c:	000214e2 	.word	0x000214e2
    f610:	0001ed8c 	.word	0x0001ed8c

0000f614 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
    f614:	b538      	push	{r3, r4, r5, lr}
    f616:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
    f618:	4604      	mov	r4, r0
    f61a:	b198      	cbz	r0, f644 <bt_rand+0x30>
    f61c:	b191      	cbz	r1, f644 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
    f61e:	4a0b      	ldr	r2, [pc, #44]	; (f64c <bt_rand+0x38>)
    f620:	f00c fd2e 	bl	1c080 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    f624:	1c43      	adds	r3, r0, #1
    f626:	d107      	bne.n	f638 <bt_rand+0x24>
		ret = prng_reseed(&prng);
    f628:	f7ff ff96 	bl	f558 <prng_reseed.constprop.0>
		if (ret) {
    f62c:	b948      	cbnz	r0, f642 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    f62e:	4629      	mov	r1, r5
    f630:	4620      	mov	r0, r4
    f632:	4a06      	ldr	r2, [pc, #24]	; (f64c <bt_rand+0x38>)
    f634:	f00c fd24 	bl	1c080 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
    f638:	2801      	cmp	r0, #1
    f63a:	bf0c      	ite	eq
    f63c:	2000      	moveq	r0, #0
    f63e:	f06f 0004 	mvnne.w	r0, #4
}
    f642:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f644:	f06f 0015 	mvn.w	r0, #21
    f648:	e7fb      	b.n	f642 <bt_rand+0x2e>
    f64a:	bf00      	nop
    f64c:	20009138 	.word	0x20009138

0000f650 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    f650:	b570      	push	{r4, r5, r6, lr}
    f652:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    f654:	4b12      	ldr	r3, [pc, #72]	; (f6a0 <notify_connected+0x50>)
    f656:	681d      	ldr	r5, [r3, #0]
    f658:	b995      	cbnz	r5, f680 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f65a:	4d12      	ldr	r5, [pc, #72]	; (f6a4 <notify_connected+0x54>)
    f65c:	4e12      	ldr	r6, [pc, #72]	; (f6a8 <notify_connected+0x58>)
    f65e:	42b5      	cmp	r5, r6
    f660:	d91c      	bls.n	f69c <notify_connected+0x4c>
    f662:	4912      	ldr	r1, [pc, #72]	; (f6ac <notify_connected+0x5c>)
    f664:	f44f 63ab 	mov.w	r3, #1368	; 0x558
    f668:	4a11      	ldr	r2, [pc, #68]	; (f6b0 <notify_connected+0x60>)
    f66a:	4812      	ldr	r0, [pc, #72]	; (f6b4 <notify_connected+0x64>)
    f66c:	f00b fdde 	bl	1b22c <assert_print>
    f670:	4811      	ldr	r0, [pc, #68]	; (f6b8 <notify_connected+0x68>)
    f672:	f00b fddb 	bl	1b22c <assert_print>
    f676:	f44f 61ab 	mov.w	r1, #1368	; 0x558
    f67a:	480d      	ldr	r0, [pc, #52]	; (f6b0 <notify_connected+0x60>)
    f67c:	f00b fdcf 	bl	1b21e <assert_post_action>
		if (cb->connected) {
    f680:	682b      	ldr	r3, [r5, #0]
    f682:	b113      	cbz	r3, f68a <notify_connected+0x3a>
			cb->connected(conn, conn->err);
    f684:	4620      	mov	r0, r4
    f686:	7a61      	ldrb	r1, [r4, #9]
    f688:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f68a:	692d      	ldr	r5, [r5, #16]
    f68c:	e7e4      	b.n	f658 <notify_connected+0x8>
		if (cb->connected) {
    f68e:	682b      	ldr	r3, [r5, #0]
    f690:	b113      	cbz	r3, f698 <notify_connected+0x48>
			cb->connected(conn, conn->err);
    f692:	4620      	mov	r0, r4
    f694:	7a61      	ldrb	r1, [r4, #9]
    f696:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f698:	3514      	adds	r5, #20
    f69a:	e7e0      	b.n	f65e <notify_connected+0xe>
    f69c:	d3f7      	bcc.n	f68e <notify_connected+0x3e>
		}
	}
}
    f69e:	bd70      	pop	{r4, r5, r6, pc}
    f6a0:	20009714 	.word	0x20009714
    f6a4:	0001ed4c 	.word	0x0001ed4c
    f6a8:	0001ed4c 	.word	0x0001ed4c
    f6ac:	00021536 	.word	0x00021536
    f6b0:	00021506 	.word	0x00021506
    f6b4:	0001f995 	.word	0x0001f995
    f6b8:	00020078 	.word	0x00020078

0000f6bc <tx_notify>:
{
    f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6c0:	4604      	mov	r4, r0
	tx->cb = NULL;
    f6c2:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
    f6c6:	4f14      	ldr	r7, [pc, #80]	; (f718 <tx_notify+0x5c>)
	__asm__ volatile(
    f6c8:	f04f 0220 	mov.w	r2, #32
    f6cc:	f3ef 8311 	mrs	r3, BASEPRI
    f6d0:	f382 8812 	msr	BASEPRI_MAX, r2
    f6d4:	f3bf 8f6f 	isb	sy
	return list->head;
    f6d8:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    f6da:	b929      	cbnz	r1, f6e8 <tx_notify+0x2c>
	__asm__ volatile(
    f6dc:	f383 8811 	msr	BASEPRI, r3
    f6e0:	f3bf 8f6f 	isb	sy
}
    f6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f6e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    f6ea:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f6ec:	4281      	cmp	r1, r0
	list->tail = node;
    f6ee:	bf08      	it	eq
    f6f0:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
    f6f2:	6222      	str	r2, [r4, #32]
    f6f4:	f383 8811 	msr	BASEPRI, r3
    f6f8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    f6fc:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
    f700:	4638      	mov	r0, r7
	tx->user_data = NULL;
    f702:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
    f706:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
    f70a:	f00e ff55 	bl	1e5b8 <k_queue_append>
		cb(conn, user_data, 0);
    f70e:	2200      	movs	r2, #0
    f710:	4631      	mov	r1, r6
    f712:	4620      	mov	r0, r4
    f714:	47a8      	blx	r5
	while (1) {
    f716:	e7d7      	b.n	f6c8 <tx_notify+0xc>
    f718:	200085b0 	.word	0x200085b0

0000f71c <conn_tx_destroy>:
{
    f71c:	b570      	push	{r4, r5, r6, lr}
    f71e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
    f720:	b949      	cbnz	r1, f736 <conn_tx_destroy+0x1a>
    f722:	490d      	ldr	r1, [pc, #52]	; (f758 <conn_tx_destroy+0x3c>)
    f724:	480d      	ldr	r0, [pc, #52]	; (f75c <conn_tx_destroy+0x40>)
    f726:	2338      	movs	r3, #56	; 0x38
    f728:	4a0d      	ldr	r2, [pc, #52]	; (f760 <conn_tx_destroy+0x44>)
    f72a:	f00b fd7f 	bl	1b22c <assert_print>
    f72e:	2138      	movs	r1, #56	; 0x38
    f730:	480b      	ldr	r0, [pc, #44]	; (f760 <conn_tx_destroy+0x44>)
    f732:	f00b fd74 	bl	1b21e <assert_post_action>
	tx->cb = NULL;
    f736:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
    f738:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    f73c:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
    f73e:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
    f742:	4808      	ldr	r0, [pc, #32]	; (f764 <conn_tx_destroy+0x48>)
    f744:	f00e ff38 	bl	1e5b8 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    f748:	4631      	mov	r1, r6
    f74a:	4620      	mov	r0, r4
    f74c:	462b      	mov	r3, r5
}
    f74e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    f752:	f06f 026d 	mvn.w	r2, #109	; 0x6d
    f756:	4718      	bx	r3
    f758:	00021551 	.word	0x00021551
    f75c:	0001f995 	.word	0x0001f995
    f760:	00021506 	.word	0x00021506
    f764:	200085b0 	.word	0x200085b0

0000f768 <send_frag>:
{
    f768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f76c:	4604      	mov	r4, r0
    f76e:	460e      	mov	r6, r1
    f770:	4692      	mov	sl, r2
    f772:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    f774:	694d      	ldr	r5, [r1, #20]
{
    f776:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
    f778:	f04f 33ff 	mov.w	r3, #4294967295
    f77c:	f04f 32ff 	mov.w	r2, #4294967295
    f780:	4855      	ldr	r0, [pc, #340]	; (f8d8 <send_frag+0x170>)
    f782:	f008 faeb 	bl	17d5c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    f786:	7aa3      	ldrb	r3, [r4, #10]
    f788:	2b07      	cmp	r3, #7
    f78a:	f040 8099 	bne.w	f8c0 <send_frag+0x158>
	__asm__ volatile(
    f78e:	f04f 0320 	mov.w	r3, #32
    f792:	f3ef 8211 	mrs	r2, BASEPRI
    f796:	f383 8812 	msr	BASEPRI_MAX, r3
    f79a:	f3bf 8f6f 	isb	sy
	if (tx) {
    f79e:	2d00      	cmp	r5, #0
    f7a0:	d058      	beq.n	f854 <send_frag+0xec>
	parent->next = child;
    f7a2:	2300      	movs	r3, #0
    f7a4:	602b      	str	r3, [r5, #0]
	return list->tail;
    f7a6:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    f7a8:	2b00      	cmp	r3, #0
    f7aa:	d150      	bne.n	f84e <send_frag+0xe6>
	list->head = node;
    f7ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    f7b0:	f382 8811 	msr	BASEPRI, r2
    f7b4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    f7b8:	2104      	movs	r1, #4
    f7ba:	f106 0008 	add.w	r0, r6, #8
    f7be:	f003 fc83 	bl	130c8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    f7c2:	8823      	ldrh	r3, [r4, #0]
    f7c4:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
    f7c8:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
    f7cc:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    f7d0:	89b3      	ldrh	r3, [r6, #12]
    f7d2:	3b04      	subs	r3, #4
    f7d4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f7d6:	2302      	movs	r3, #2
	return bt_send(buf);
    f7d8:	4630      	mov	r0, r6
    f7da:	7533      	strb	r3, [r6, #20]
    f7dc:	f7fe fc2e 	bl	e03c <bt_send>
	if (err) {
    f7e0:	2800      	cmp	r0, #0
    f7e2:	d077      	beq.n	f8d4 <send_frag+0x16c>
		BT_ERR("Unable to send to driver (err %d)", err);
    f7e4:	46ea      	mov	sl, sp
    f7e6:	b088      	sub	sp, #32
    f7e8:	466a      	mov	r2, sp
    f7ea:	4b3c      	ldr	r3, [pc, #240]	; (f8dc <send_frag+0x174>)
    f7ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f7f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f7f4:	2303      	movs	r3, #3
    f7f6:	483a      	ldr	r0, [pc, #232]	; (f8e0 <send_frag+0x178>)
    f7f8:	f842 3f10 	str.w	r3, [r2, #16]!
    f7fc:	f00c ff70 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
    f800:	46d5      	mov	sp, sl
	__asm__ volatile(
    f802:	f04f 0320 	mov.w	r3, #32
    f806:	f3ef 8111 	mrs	r1, BASEPRI
    f80a:	f383 8812 	msr	BASEPRI_MAX, r3
    f80e:	f3bf 8f6f 	isb	sy
		if (tx) {
    f812:	2d00      	cmp	r5, #0
    f814:	d034      	beq.n	f880 <send_frag+0x118>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f816:	2200      	movs	r2, #0
	return list->head;
    f818:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f81a:	b153      	cbz	r3, f832 <send_frag+0xca>
    f81c:	429d      	cmp	r5, r3
    f81e:	d12c      	bne.n	f87a <send_frag+0x112>
	return node->next;
    f820:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    f822:	bb22      	cbnz	r2, f86e <send_frag+0x106>
    f824:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    f826:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    f828:	4295      	cmp	r5, r2
    f82a:	d100      	bne.n	f82e <send_frag+0xc6>
	list->tail = node;
    f82c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    f82e:	2300      	movs	r3, #0
    f830:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    f832:	f381 8811 	msr	BASEPRI, r1
    f836:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    f83a:	4827      	ldr	r0, [pc, #156]	; (f8d8 <send_frag+0x170>)
    f83c:	f008 fa4a 	bl	17cd4 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
    f840:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
    f842:	4629      	mov	r1, r5
    f844:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
    f846:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
    f848:	f7ff ff68 	bl	f71c <conn_tx_destroy>
    f84c:	e031      	b.n	f8b2 <send_frag+0x14a>
    f84e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f850:	61a5      	str	r5, [r4, #24]
}
    f852:	e7ad      	b.n	f7b0 <send_frag+0x48>
	return list->tail;
    f854:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    f856:	b133      	cbz	r3, f866 <send_frag+0xfe>
			pending_no_cb = &tail_tx->pending_no_cb;
    f858:	f103 080c 	add.w	r8, r3, #12
    f85c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    f85e:	3301      	adds	r3, #1
    f860:	f8c8 3000 	str.w	r3, [r8]
    f864:	e7a4      	b.n	f7b0 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
    f866:	69e3      	ldr	r3, [r4, #28]
    f868:	f104 081c 	add.w	r8, r4, #28
    f86c:	e7f7      	b.n	f85e <send_frag+0xf6>
	parent->next = child;
    f86e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    f870:	69a3      	ldr	r3, [r4, #24]
    f872:	429d      	cmp	r5, r3
	list->tail = node;
    f874:	bf08      	it	eq
    f876:	61a2      	streq	r2, [r4, #24]
}
    f878:	e7d9      	b.n	f82e <send_frag+0xc6>
	return node->next;
    f87a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f87c:	681b      	ldr	r3, [r3, #0]
    f87e:	e7cc      	b.n	f81a <send_frag+0xb2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    f880:	f8d8 3000 	ldr.w	r3, [r8]
    f884:	b95b      	cbnz	r3, f89e <send_frag+0x136>
    f886:	4917      	ldr	r1, [pc, #92]	; (f8e4 <send_frag+0x17c>)
    f888:	4817      	ldr	r0, [pc, #92]	; (f8e8 <send_frag+0x180>)
    f88a:	f240 2329 	movw	r3, #553	; 0x229
    f88e:	4a17      	ldr	r2, [pc, #92]	; (f8ec <send_frag+0x184>)
    f890:	f00b fccc 	bl	1b22c <assert_print>
    f894:	f240 2129 	movw	r1, #553	; 0x229
    f898:	4814      	ldr	r0, [pc, #80]	; (f8ec <send_frag+0x184>)
    f89a:	f00b fcc0 	bl	1b21e <assert_post_action>
			(*pending_no_cb)--;
    f89e:	3b01      	subs	r3, #1
    f8a0:	f8c8 3000 	str.w	r3, [r8]
    f8a4:	f381 8811 	msr	BASEPRI, r1
    f8a8:	f3bf 8f6f 	isb	sy
    f8ac:	480a      	ldr	r0, [pc, #40]	; (f8d8 <send_frag+0x170>)
    f8ae:	f008 fa11 	bl	17cd4 <z_impl_k_sem_give>
	if (always_consume) {
    f8b2:	f1b9 0f00 	cmp.w	r9, #0
    f8b6:	d109      	bne.n	f8cc <send_frag+0x164>
	return false;
    f8b8:	2000      	movs	r0, #0
}
    f8ba:	46bd      	mov	sp, r7
    f8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8c0:	4805      	ldr	r0, [pc, #20]	; (f8d8 <send_frag+0x170>)
    f8c2:	f008 fa07 	bl	17cd4 <z_impl_k_sem_give>
	if (tx) {
    f8c6:	2d00      	cmp	r5, #0
    f8c8:	d1ba      	bne.n	f840 <send_frag+0xd8>
    f8ca:	e7f2      	b.n	f8b2 <send_frag+0x14a>
		net_buf_unref(buf);
    f8cc:	4630      	mov	r0, r6
    f8ce:	f003 fb35 	bl	12f3c <net_buf_unref>
    f8d2:	e7f1      	b.n	f8b8 <send_frag+0x150>
	return true;
    f8d4:	2001      	movs	r0, #1
    f8d6:	e7f0      	b.n	f8ba <send_frag+0x152>
    f8d8:	20008100 	.word	0x20008100
    f8dc:	0002111a 	.word	0x0002111a
    f8e0:	0001ed84 	.word	0x0001ed84
    f8e4:	00021554 	.word	0x00021554
    f8e8:	0001f995 	.word	0x0001f995
    f8ec:	00021506 	.word	0x00021506

0000f8f0 <bt_conn_get_pkts>:
}
    f8f0:	4800      	ldr	r0, [pc, #0]	; (f8f4 <bt_conn_get_pkts+0x4>)
    f8f2:	4770      	bx	lr
    f8f4:	20008100 	.word	0x20008100

0000f8f8 <bt_conn_new>:
{
    f8f8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    f8fa:	2200      	movs	r2, #0
    f8fc:	4604      	mov	r4, r0
    f8fe:	428a      	cmp	r2, r1
    f900:	d102      	bne.n	f908 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    f902:	2400      	movs	r4, #0
}
    f904:	4620      	mov	r0, r4
    f906:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f908:	2001      	movs	r0, #1
    f90a:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
    f90e:	e8d3 5fef 	ldaex	r5, [r3]
    f912:	2d00      	cmp	r5, #0
    f914:	d104      	bne.n	f920 <bt_conn_new+0x28>
    f916:	e8c3 0fec 	stlex	ip, r0, [r3]
    f91a:	f1bc 0f00 	cmp.w	ip, #0
    f91e:	d1f6      	bne.n	f90e <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    f920:	d002      	beq.n	f928 <bt_conn_new+0x30>
    f922:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
    f924:	4402      	add	r2, r0
    f926:	e7ea      	b.n	f8fe <bt_conn_new+0x6>
	if (!conn) {
    f928:	2c00      	cmp	r4, #0
    f92a:	d0ea      	beq.n	f902 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    f92c:	22c0      	movs	r2, #192	; 0xc0
    f92e:	2100      	movs	r1, #0
    f930:	4620      	mov	r0, r4
    f932:	f00c fc95 	bl	1c260 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    f936:	f104 0060 	add.w	r0, r4, #96	; 0x60
    f93a:	4904      	ldr	r1, [pc, #16]	; (f94c <bt_conn_new+0x54>)
    f93c:	f008 fe4e 	bl	185dc <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    f940:	4903      	ldr	r1, [pc, #12]	; (f950 <bt_conn_new+0x58>)
    f942:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f946:	f008 fc6d 	bl	18224 <k_work_init>
	return conn;
    f94a:	e7db      	b.n	f904 <bt_conn_new+0xc>
    f94c:	000102ad 	.word	0x000102ad
    f950:	0001c6e7 	.word	0x0001c6e7

0000f954 <conn_cleanup>:
{
    f954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f958:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
    f95a:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    f95c:	f104 0638 	add.w	r6, r4, #56	; 0x38
    f960:	2300      	movs	r3, #0
    f962:	2200      	movs	r2, #0
    f964:	4630      	mov	r0, r6
    f966:	f003 f977 	bl	12c58 <net_buf_get>
    f96a:	4603      	mov	r3, r0
    f96c:	b980      	cbnz	r0, f990 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    f96e:	6963      	ldr	r3, [r4, #20]
    f970:	b1cb      	cbz	r3, f9a6 <conn_cleanup+0x52>
    f972:	4918      	ldr	r1, [pc, #96]	; (f9d4 <conn_cleanup+0x80>)
    f974:	f240 23b6 	movw	r3, #694	; 0x2b6
    f978:	4a17      	ldr	r2, [pc, #92]	; (f9d8 <conn_cleanup+0x84>)
    f97a:	4818      	ldr	r0, [pc, #96]	; (f9dc <conn_cleanup+0x88>)
    f97c:	f00b fc56 	bl	1b22c <assert_print>
    f980:	4817      	ldr	r0, [pc, #92]	; (f9e0 <conn_cleanup+0x8c>)
    f982:	f00b fc53 	bl	1b22c <assert_print>
    f986:	f240 21b6 	movw	r1, #694	; 0x2b6
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    f98a:	4813      	ldr	r0, [pc, #76]	; (f9d8 <conn_cleanup+0x84>)
    f98c:	f00b fc47 	bl	1b21e <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    f990:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
    f992:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
    f994:	f003 fad2 	bl	12f3c <net_buf_unref>
		if (tx) {
    f998:	2d00      	cmp	r5, #0
    f99a:	d0e1      	beq.n	f960 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
    f99c:	4629      	mov	r1, r5
    f99e:	4620      	mov	r0, r4
    f9a0:	f7ff febc 	bl	f71c <conn_tx_destroy>
    f9a4:	e7da      	b.n	f95c <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    f9a6:	69e3      	ldr	r3, [r4, #28]
    f9a8:	b14b      	cbz	r3, f9be <conn_cleanup+0x6a>
    f9aa:	490e      	ldr	r1, [pc, #56]	; (f9e4 <conn_cleanup+0x90>)
    f9ac:	f240 23b7 	movw	r3, #695	; 0x2b7
    f9b0:	4a09      	ldr	r2, [pc, #36]	; (f9d8 <conn_cleanup+0x84>)
    f9b2:	480a      	ldr	r0, [pc, #40]	; (f9dc <conn_cleanup+0x88>)
    f9b4:	f00b fc3a 	bl	1b22c <assert_print>
    f9b8:	f240 21b7 	movw	r1, #695	; 0x2b7
    f9bc:	e7e5      	b.n	f98a <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
    f9be:	4620      	mov	r0, r4
    f9c0:	f00c fe94 	bl	1c6ec <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
    f9c4:	f104 0060 	add.w	r0, r4, #96	; 0x60
    f9c8:	2200      	movs	r2, #0
}
    f9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
    f9ce:	2300      	movs	r3, #0
    f9d0:	f008 bf20 	b.w	18814 <k_work_reschedule>
    f9d4:	00021567 	.word	0x00021567
    f9d8:	00021506 	.word	0x00021506
    f9dc:	0001f995 	.word	0x0001f995
    f9e0:	0002158d 	.word	0x0002158d
    f9e4:	000215a2 	.word	0x000215a2

0000f9e8 <bt_conn_recv>:
{
    f9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9ec:	4616      	mov	r6, r2
    f9ee:	b086      	sub	sp, #24
    f9f0:	af00      	add	r7, sp, #0
    f9f2:	4604      	mov	r4, r0
    f9f4:	460d      	mov	r5, r1
	tx_notify(conn);
    f9f6:	f7ff fe61 	bl	f6bc <tx_notify>
	switch (flags) {
    f9fa:	2e01      	cmp	r6, #1
    f9fc:	d030      	beq.n	fa60 <bt_conn_recv+0x78>
    f9fe:	2e02      	cmp	r6, #2
    fa00:	d16a      	bne.n	fad8 <bt_conn_recv+0xf0>
		if (conn->rx) {
    fa02:	6923      	ldr	r3, [r4, #16]
    fa04:	b163      	cbz	r3, fa20 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
    fa06:	4b40      	ldr	r3, [pc, #256]	; (fb08 <bt_conn_recv+0x120>)
    fa08:	4840      	ldr	r0, [pc, #256]	; (fb0c <bt_conn_recv+0x124>)
    fa0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fa0e:	e9c7 6304 	strd	r6, r3, [r7, #16]
    fa12:	f107 0210 	add.w	r2, r7, #16
    fa16:	f00c fe63 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    fa1a:	4620      	mov	r0, r4
    fa1c:	f00c fe66 	bl	1c6ec <bt_conn_reset_rx_state>
		conn->rx = buf;
    fa20:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    fa22:	6921      	ldr	r1, [r4, #16]
    fa24:	8988      	ldrh	r0, [r1, #12]
    fa26:	2801      	cmp	r0, #1
    fa28:	d930      	bls.n	fa8c <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    fa2a:	688b      	ldr	r3, [r1, #8]
    fa2c:	881b      	ldrh	r3, [r3, #0]
    fa2e:	3304      	adds	r3, #4
    fa30:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    fa32:	4298      	cmp	r0, r3
    fa34:	d32a      	bcc.n	fa8c <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
    fa36:	d95f      	bls.n	faf8 <bt_conn_recv+0x110>
		BT_ERR("ACL len mismatch (%u > %u)",
    fa38:	466d      	mov	r5, sp
    fa3a:	b088      	sub	sp, #32
    fa3c:	466a      	mov	r2, sp
    fa3e:	61d3      	str	r3, [r2, #28]
    fa40:	2304      	movs	r3, #4
    fa42:	4933      	ldr	r1, [pc, #204]	; (fb10 <bt_conn_recv+0x128>)
    fa44:	e9c2 1005 	strd	r1, r0, [r2, #20]
    fa48:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    fa4c:	482f      	ldr	r0, [pc, #188]	; (fb0c <bt_conn_recv+0x124>)
    fa4e:	f842 3f10 	str.w	r3, [r2, #16]!
    fa52:	f00c fe45 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    fa56:	4620      	mov	r0, r4
    fa58:	46ad      	mov	sp, r5
    fa5a:	f00c fe47 	bl	1c6ec <bt_conn_reset_rx_state>
		return;
    fa5e:	e015      	b.n	fa8c <bt_conn_recv+0xa4>
		if (!conn->rx) {
    fa60:	6920      	ldr	r0, [r4, #16]
    fa62:	b970      	cbnz	r0, fa82 <bt_conn_recv+0x9a>
			BT_ERR("Unexpected L2CAP continuation");
    fa64:	4b2b      	ldr	r3, [pc, #172]	; (fb14 <bt_conn_recv+0x12c>)
    fa66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fa6a:	617b      	str	r3, [r7, #20]
    fa6c:	2302      	movs	r3, #2
    fa6e:	4827      	ldr	r0, [pc, #156]	; (fb0c <bt_conn_recv+0x124>)
    fa70:	613b      	str	r3, [r7, #16]
    fa72:	f107 0210 	add.w	r2, r7, #16
    fa76:	f00c fe33 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    fa7a:	4620      	mov	r0, r4
    fa7c:	f00c fe36 	bl	1c6ec <bt_conn_reset_rx_state>
    fa80:	e001      	b.n	fa86 <bt_conn_recv+0x9e>
		if (!buf->len) {
    fa82:	89ae      	ldrh	r6, [r5, #12]
    fa84:	b936      	cbnz	r6, fa94 <bt_conn_recv+0xac>
		net_buf_unref(buf);
    fa86:	4628      	mov	r0, r5
    fa88:	f003 fa58 	bl	12f3c <net_buf_unref>
}
    fa8c:	3718      	adds	r7, #24
    fa8e:	46bd      	mov	sp, r7
    fa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    fa94:	3008      	adds	r0, #8
    fa96:	f00d fd92 	bl	1d5be <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    fa9a:	4286      	cmp	r6, r0
    fa9c:	d912      	bls.n	fac4 <bt_conn_recv+0xdc>
			BT_ERR("Not enough buffer space for L2CAP data");
    fa9e:	4b1e      	ldr	r3, [pc, #120]	; (fb18 <bt_conn_recv+0x130>)
    faa0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    faa4:	617b      	str	r3, [r7, #20]
    faa6:	2302      	movs	r3, #2
    faa8:	4818      	ldr	r0, [pc, #96]	; (fb0c <bt_conn_recv+0x124>)
    faaa:	613b      	str	r3, [r7, #16]
    faac:	f107 0210 	add.w	r2, r7, #16
    fab0:	f00c fe16 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    fab4:	2200      	movs	r2, #0
    fab6:	4620      	mov	r0, r4
    fab8:	6921      	ldr	r1, [r4, #16]
    faba:	f000 fe49 	bl	10750 <bt_l2cap_recv>
			conn->rx = NULL;
    fabe:	2300      	movs	r3, #0
    fac0:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
    fac2:	e7e0      	b.n	fa86 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fac4:	6920      	ldr	r0, [r4, #16]
    fac6:	89aa      	ldrh	r2, [r5, #12]
    fac8:	68a9      	ldr	r1, [r5, #8]
    faca:	3008      	adds	r0, #8
    facc:	f00d fd7f 	bl	1d5ce <net_buf_simple_add_mem>
		net_buf_unref(buf);
    fad0:	4628      	mov	r0, r5
    fad2:	f003 fa33 	bl	12f3c <net_buf_unref>
		break;
    fad6:	e7a4      	b.n	fa22 <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    fad8:	46e8      	mov	r8, sp
    fada:	b088      	sub	sp, #32
    fadc:	466a      	mov	r2, sp
    fade:	4b0f      	ldr	r3, [pc, #60]	; (fb1c <bt_conn_recv+0x134>)
    fae0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
    fae4:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    fae8:	2303      	movs	r3, #3
    faea:	4808      	ldr	r0, [pc, #32]	; (fb0c <bt_conn_recv+0x124>)
    faec:	f842 3f10 	str.w	r3, [r2, #16]!
    faf0:	f00c fdf6 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
    faf4:	46c5      	mov	sp, r8
    faf6:	e7c0      	b.n	fa7a <bt_conn_recv+0x92>
	conn->rx = NULL;
    faf8:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
    fafa:	2201      	movs	r2, #1
    fafc:	4620      	mov	r0, r4
	conn->rx = NULL;
    fafe:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    fb00:	f000 fe26 	bl	10750 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    fb04:	e7c2      	b.n	fa8c <bt_conn_recv+0xa4>
    fb06:	bf00      	nop
    fb08:	000215bb 	.word	0x000215bb
    fb0c:	0001ed84 	.word	0x0001ed84
    fb10:	0002163b 	.word	0x0002163b
    fb14:	000215d8 	.word	0x000215d8
    fb18:	000215f6 	.word	0x000215f6
    fb1c:	0002161d 	.word	0x0002161d

0000fb20 <bt_conn_send_cb>:
{
    fb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb24:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    fb26:	7a83      	ldrb	r3, [r0, #10]
{
    fb28:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    fb2a:	2b07      	cmp	r3, #7
{
    fb2c:	460f      	mov	r7, r1
    fb2e:	4616      	mov	r6, r2
    fb30:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
    fb32:	d00c      	beq.n	fb4e <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
    fb34:	4b28      	ldr	r3, [pc, #160]	; (fbd8 <bt_conn_send_cb+0xb8>)
    fb36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fb3a:	9305      	str	r3, [sp, #20]
    fb3c:	2302      	movs	r3, #2
    fb3e:	4827      	ldr	r0, [pc, #156]	; (fbdc <bt_conn_send_cb+0xbc>)
    fb40:	aa04      	add	r2, sp, #16
    fb42:	9304      	str	r3, [sp, #16]
    fb44:	f00c fdcc 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
    fb48:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fb4c:	e01d      	b.n	fb8a <bt_conn_send_cb+0x6a>
	if (cb) {
    fb4e:	2a00      	cmp	r2, #0
    fb50:	d040      	beq.n	fbd4 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
    fb52:	f009 ffe7 	bl	19b24 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    fb56:	4b22      	ldr	r3, [pc, #136]	; (fbe0 <bt_conn_send_cb+0xc0>)
    fb58:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    fb5a:	4822      	ldr	r0, [pc, #136]	; (fbe4 <bt_conn_send_cb+0xc4>)
    fb5c:	bf07      	ittee	eq
    fb5e:	2200      	moveq	r2, #0
    fb60:	2300      	moveq	r3, #0
    fb62:	f04f 32ff 	movne.w	r2, #4294967295
    fb66:	f04f 33ff 	movne.w	r3, #4294967295
    fb6a:	f008 f849 	bl	17c00 <z_impl_k_queue_get>
    fb6e:	4604      	mov	r4, r0
		if (!tx) {
    fb70:	b970      	cbnz	r0, fb90 <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
    fb72:	4b1d      	ldr	r3, [pc, #116]	; (fbe8 <bt_conn_send_cb+0xc8>)
    fb74:	4819      	ldr	r0, [pc, #100]	; (fbdc <bt_conn_send_cb+0xbc>)
    fb76:	9305      	str	r3, [sp, #20]
    fb78:	2302      	movs	r3, #2
    fb7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fb7e:	aa04      	add	r2, sp, #16
    fb80:	9304      	str	r3, [sp, #16]
    fb82:	f00c fdad 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
    fb86:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    fb8a:	b006      	add	sp, #24
    fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    fb90:	7aab      	ldrb	r3, [r5, #10]
    fb92:	2b07      	cmp	r3, #7
    fb94:	d012      	beq.n	fbbc <bt_conn_send_cb+0x9c>
			BT_WARN("Disconnected while allocating context");
    fb96:	4b15      	ldr	r3, [pc, #84]	; (fbec <bt_conn_send_cb+0xcc>)
    fb98:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    fb9c:	9305      	str	r3, [sp, #20]
    fb9e:	2302      	movs	r3, #2
    fba0:	480e      	ldr	r0, [pc, #56]	; (fbdc <bt_conn_send_cb+0xbc>)
    fba2:	aa04      	add	r2, sp, #16
    fba4:	9304      	str	r3, [sp, #16]
    fba6:	f00c fd9b 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
    fbaa:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
    fbac:	4621      	mov	r1, r4
	tx->user_data = NULL;
    fbae:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
    fbb2:	480c      	ldr	r0, [pc, #48]	; (fbe4 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
    fbb4:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
    fbb6:	f00e fcff 	bl	1e5b8 <k_queue_append>
}
    fbba:	e7c5      	b.n	fb48 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
    fbbc:	2300      	movs	r3, #0
		tx->user_data = user_data;
    fbbe:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    fbc2:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
    fbc4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    fbc8:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
    fbca:	617c      	str	r4, [r7, #20]
	net_buf_put(&conn->tx_queue, buf);
    fbcc:	f003 f986 	bl	12edc <net_buf_put>
	return 0;
    fbd0:	2000      	movs	r0, #0
    fbd2:	e7da      	b.n	fb8a <bt_conn_send_cb+0x6a>
    fbd4:	4614      	mov	r4, r2
    fbd6:	e7f5      	b.n	fbc4 <bt_conn_send_cb+0xa4>
    fbd8:	00021656 	.word	0x00021656
    fbdc:	0001ed84 	.word	0x0001ed84
    fbe0:	20009538 	.word	0x20009538
    fbe4:	200085b0 	.word	0x200085b0
    fbe8:	00021665 	.word	0x00021665
    fbec:	00021683 	.word	0x00021683

0000fbf0 <bt_conn_prepare_events>:
{
    fbf0:	b570      	push	{r4, r5, r6, lr}
    fbf2:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
    fbf4:	4818      	ldr	r0, [pc, #96]	; (fc58 <bt_conn_prepare_events+0x68>)
    fbf6:	f00e fe87 	bl	1e908 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    fbfa:	4620      	mov	r0, r4
    fbfc:	2200      	movs	r2, #0
    fbfe:	2101      	movs	r1, #1
    fc00:	4b15      	ldr	r3, [pc, #84]	; (fc58 <bt_conn_prepare_events+0x68>)
    fc02:	f00a fe97 	bl	1a934 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fc06:	4a15      	ldr	r2, [pc, #84]	; (fc5c <bt_conn_prepare_events+0x6c>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
    fc08:	f104 0014 	add.w	r0, r4, #20
    fc0c:	e8d2 3faf 	lda	r3, [r2]
	if (!atomic_get(&conn->ref)) {
    fc10:	b90b      	cbnz	r3, fc16 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    fc12:	2001      	movs	r0, #1
}
    fc14:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    fc16:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
    fc1a:	f812 2cb6 	ldrb.w	r2, [r2, #-182]
    fc1e:	b972      	cbnz	r2, fc3e <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fc20:	1d1a      	adds	r2, r3, #4
    fc22:	e8d2 1fef 	ldaex	r1, [r2]
    fc26:	f021 0540 	bic.w	r5, r1, #64	; 0x40
    fc2a:	e8c2 5fe6 	stlex	r6, r5, [r2]
    fc2e:	2e00      	cmp	r6, #0
    fc30:	d1f7      	bne.n	fc22 <bt_conn_prepare_events+0x32>
    fc32:	064a      	lsls	r2, r1, #25
    fc34:	d503      	bpl.n	fc3e <bt_conn_prepare_events+0x4e>
		conn_cleanup(conn);
    fc36:	4618      	mov	r0, r3
    fc38:	f7ff fe8c 	bl	f954 <conn_cleanup>
		return -ENOTCONN;
    fc3c:	e7e9      	b.n	fc12 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    fc3e:	7a9b      	ldrb	r3, [r3, #10]
    fc40:	2b07      	cmp	r3, #7
    fc42:	d1e6      	bne.n	fc12 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    fc44:	4b06      	ldr	r3, [pc, #24]	; (fc60 <bt_conn_prepare_events+0x70>)
    fc46:	2200      	movs	r2, #0
    fc48:	2104      	movs	r1, #4
    fc4a:	f00a fe73 	bl	1a934 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    fc4e:	2301      	movs	r3, #1
			ev_count++;
    fc50:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    fc52:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    fc56:	e7dd      	b.n	fc14 <bt_conn_prepare_events+0x24>
    fc58:	20008208 	.word	0x20008208
    fc5c:	20009330 	.word	0x20009330
    fc60:	200092a8 	.word	0x200092a8

0000fc64 <bt_conn_ref>:
{
    fc64:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
    fc66:	b180      	cbz	r0, fc8a <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
    fc68:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fc6c:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
    fc70:	b1bb      	cbz	r3, fca2 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
    fc72:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    fc74:	e8d2 4fef 	ldaex	r4, [r2]
    fc78:	429c      	cmp	r4, r3
    fc7a:	d104      	bne.n	fc86 <bt_conn_ref+0x22>
    fc7c:	e8c2 1fec 	stlex	ip, r1, [r2]
    fc80:	f1bc 0f00 	cmp.w	ip, #0
    fc84:	d1f6      	bne.n	fc74 <bt_conn_ref+0x10>
    fc86:	d1f1      	bne.n	fc6c <bt_conn_ref+0x8>
}
    fc88:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
    fc8a:	4907      	ldr	r1, [pc, #28]	; (fca8 <bt_conn_ref+0x44>)
    fc8c:	4807      	ldr	r0, [pc, #28]	; (fcac <bt_conn_ref+0x48>)
    fc8e:	f44f 638f 	mov.w	r3, #1144	; 0x478
    fc92:	4a07      	ldr	r2, [pc, #28]	; (fcb0 <bt_conn_ref+0x4c>)
    fc94:	f00b faca 	bl	1b22c <assert_print>
    fc98:	f44f 618f 	mov.w	r1, #1144	; 0x478
    fc9c:	4804      	ldr	r0, [pc, #16]	; (fcb0 <bt_conn_ref+0x4c>)
    fc9e:	f00b fabe 	bl	1b21e <assert_post_action>
			return NULL;
    fca2:	4618      	mov	r0, r3
    fca4:	e7f0      	b.n	fc88 <bt_conn_ref+0x24>
    fca6:	bf00      	nop
    fca8:	0002118c 	.word	0x0002118c
    fcac:	0001f995 	.word	0x0001f995
    fcb0:	00021506 	.word	0x00021506

0000fcb4 <bt_conn_unref>:
{
    fcb4:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
    fcb6:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    fcba:	e8d3 2fef 	ldaex	r2, [r3]
    fcbe:	1e51      	subs	r1, r2, #1
    fcc0:	e8c3 1fe4 	stlex	r4, r1, [r3]
    fcc4:	2c00      	cmp	r4, #0
    fcc6:	d1f8      	bne.n	fcba <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
    fcc8:	2a00      	cmp	r2, #0
    fcca:	dc0e      	bgt.n	fcea <bt_conn_unref+0x36>
    fccc:	490d      	ldr	r1, [pc, #52]	; (fd04 <bt_conn_unref+0x50>)
    fcce:	f240 4395 	movw	r3, #1173	; 0x495
    fcd2:	4a0d      	ldr	r2, [pc, #52]	; (fd08 <bt_conn_unref+0x54>)
    fcd4:	480d      	ldr	r0, [pc, #52]	; (fd0c <bt_conn_unref+0x58>)
    fcd6:	f00b faa9 	bl	1b22c <assert_print>
    fcda:	480d      	ldr	r0, [pc, #52]	; (fd10 <bt_conn_unref+0x5c>)
    fcdc:	f00b faa6 	bl	1b22c <assert_print>
    fce0:	f240 4195 	movw	r1, #1173	; 0x495
    fce4:	4808      	ldr	r0, [pc, #32]	; (fd08 <bt_conn_unref+0x54>)
    fce6:	f00b fa9a 	bl	1b21e <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
    fcea:	f240 1201 	movw	r2, #257	; 0x101
    fcee:	8841      	ldrh	r1, [r0, #2]
    fcf0:	4291      	cmp	r1, r2
    fcf2:	d106      	bne.n	fd02 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fcf4:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
    fcf8:	b91b      	cbnz	r3, fd02 <bt_conn_unref+0x4e>
}
    fcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
    fcfe:	f7ff bbeb 	b.w	f4d8 <bt_le_adv_resume>
}
    fd02:	bd10      	pop	{r4, pc}
    fd04:	000216a9 	.word	0x000216a9
    fd08:	00021506 	.word	0x00021506
    fd0c:	0001f995 	.word	0x0001f995
    fd10:	000216b1 	.word	0x000216b1

0000fd14 <bt_conn_lookup_handle>:
{
    fd14:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    fd16:	2101      	movs	r1, #1
    fd18:	4801      	ldr	r0, [pc, #4]	; (fd20 <bt_conn_lookup_handle+0xc>)
    fd1a:	f00c bcf0 	b.w	1c6fe <conn_lookup_handle>
    fd1e:	bf00      	nop
    fd20:	20009270 	.word	0x20009270

0000fd24 <bt_conn_set_state>:
{
    fd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    fd26:	7a86      	ldrb	r6, [r0, #10]
{
    fd28:	4604      	mov	r4, r0
	if (conn->state == state) {
    fd2a:	428e      	cmp	r6, r1
{
    fd2c:	460d      	mov	r5, r1
    fd2e:	af00      	add	r7, sp, #0
	if (conn->state == state) {
    fd30:	d119      	bne.n	fd66 <bt_conn_set_state+0x42>
	switch (state) {
    fd32:	2e08      	cmp	r6, #8
    fd34:	bf98      	it	ls
    fd36:	4b6a      	ldrls	r3, [pc, #424]	; (fee0 <bt_conn_set_state+0x1bc>)
		BT_WARN("no transition %s", state2str(state));
    fd38:	466c      	mov	r4, sp
    fd3a:	b088      	sub	sp, #32
    fd3c:	bf94      	ite	ls
    fd3e:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
    fd42:	4b68      	ldrhi	r3, [pc, #416]	; (fee4 <bt_conn_set_state+0x1c0>)
		BT_WARN("no transition %s", state2str(state));
    fd44:	466a      	mov	r2, sp
    fd46:	4968      	ldr	r1, [pc, #416]	; (fee8 <bt_conn_set_state+0x1c4>)
    fd48:	e9c2 1305 	strd	r1, r3, [r2, #20]
    fd4c:	f44f 7300 	mov.w	r3, #512	; 0x200
    fd50:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    fd54:	8393      	strh	r3, [r2, #28]
    fd56:	4b65      	ldr	r3, [pc, #404]	; (feec <bt_conn_set_state+0x1c8>)
    fd58:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("no valid (%u) state was set", state);
    fd5c:	4864      	ldr	r0, [pc, #400]	; (fef0 <bt_conn_set_state+0x1cc>)
    fd5e:	f00c fcbf 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
    fd62:	46a5      	mov	sp, r4
    fd64:	e040      	b.n	fde8 <bt_conn_set_state+0xc4>
	conn->state = state;
    fd66:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    fd68:	b926      	cbnz	r6, fd74 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
    fd6a:	7883      	ldrb	r3, [r0, #2]
    fd6c:	2b08      	cmp	r3, #8
    fd6e:	d001      	beq.n	fd74 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
    fd70:	f7ff ff78 	bl	fc64 <bt_conn_ref>
	switch (conn->state) {
    fd74:	7aa3      	ldrb	r3, [r4, #10]
    fd76:	2b08      	cmp	r3, #8
    fd78:	f200 80ac 	bhi.w	fed4 <bt_conn_set_state+0x1b0>
    fd7c:	e8df f003 	tbb	[pc, r3]
    fd80:	34340536 	.word	0x34340536
    fd84:	1c343434 	.word	0x1c343434
    fd88:	34          	.byte	0x34
    fd89:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    fd8a:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    fd8c:	4d59      	ldr	r5, [pc, #356]	; (fef4 <bt_conn_set_state+0x1d0>)
	__asm__ volatile(
    fd8e:	f04f 0220 	mov.w	r2, #32
    fd92:	f3ef 8311 	mrs	r3, BASEPRI
    fd96:	f382 8812 	msr	BASEPRI_MAX, r2
    fd9a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    fd9e:	69e2      	ldr	r2, [r4, #28]
    fda0:	2a00      	cmp	r2, #0
    fda2:	d073      	beq.n	fe8c <bt_conn_set_state+0x168>
			conn->pending_no_cb--;
    fda4:	3a01      	subs	r2, #1
    fda6:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    fda8:	f383 8811 	msr	BASEPRI, r3
    fdac:	f3bf 8f6f 	isb	sy
    fdb0:	4628      	mov	r0, r5
    fdb2:	f007 ff8f 	bl	17cd4 <z_impl_k_sem_give>
}
    fdb6:	e7ea      	b.n	fd8e <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    fdb8:	78a3      	ldrb	r3, [r4, #2]
    fdba:	2b04      	cmp	r3, #4
    fdbc:	d014      	beq.n	fde8 <bt_conn_set_state+0xc4>
	z_impl_k_queue_init(queue);
    fdbe:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fdc2:	f00e fbec 	bl	1e59e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
    fdc6:	2100      	movs	r1, #0
    fdc8:	484b      	ldr	r0, [pc, #300]	; (fef8 <bt_conn_set_state+0x1d4>)
    fdca:	f00a fed1 	bl	1ab70 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    fdce:	2300      	movs	r3, #0
	list->tail = NULL;
    fdd0:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fdd4:	78e3      	ldrb	r3, [r4, #3]
    fdd6:	2b01      	cmp	r3, #1
    fdd8:	d106      	bne.n	fde8 <bt_conn_set_state+0xc4>
			k_work_schedule(&conn->deferred_work,
    fdda:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    fdde:	2300      	movs	r3, #0
    fde0:	f104 0060 	add.w	r0, r4, #96	; 0x60
    fde4:	f008 fc9c 	bl	18720 <k_work_schedule>
}
    fde8:	46bd      	mov	sp, r7
    fdea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    fdec:	78a3      	ldrb	r3, [r4, #2]
    fdee:	2b04      	cmp	r3, #4
    fdf0:	d103      	bne.n	fdfa <bt_conn_set_state+0xd6>
			bt_conn_unref(conn);
    fdf2:	4620      	mov	r0, r4
    fdf4:	f7ff ff5e 	bl	fcb4 <bt_conn_unref>
			break;
    fdf8:	e7f6      	b.n	fde8 <bt_conn_set_state+0xc4>
		switch (old_state) {
    fdfa:	2e08      	cmp	r6, #8
    fdfc:	d8f4      	bhi.n	fde8 <bt_conn_set_state+0xc4>
    fdfe:	a301      	add	r3, pc, #4	; (adr r3, fe04 <bt_conn_set_state+0xe0>)
    fe00:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    fe04:	0000fe75 	.word	0x0000fe75
    fe08:	0000fe29 	.word	0x0000fe29
    fe0c:	0000fe67 	.word	0x0000fe67
    fe10:	0000fdf3 	.word	0x0000fdf3
    fe14:	0000fdf3 	.word	0x0000fdf3
    fe18:	0000fe67 	.word	0x0000fe67
    fe1c:	0000fe67 	.word	0x0000fe67
    fe20:	0000fde9 	.word	0x0000fde9
    fe24:	0000fe75 	.word	0x0000fe75
			tx_notify(conn);
    fe28:	4620      	mov	r0, r4
    fe2a:	f7ff fc47 	bl	f6bc <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    fe2e:	78a3      	ldrb	r3, [r4, #2]
    fe30:	2b01      	cmp	r3, #1
    fe32:	d10a      	bne.n	fe4a <bt_conn_set_state+0x126>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    fe34:	f104 0560 	add.w	r5, r4, #96	; 0x60
    fe38:	4628      	mov	r0, r5
    fe3a:	f00e fc46 	bl	1e6ca <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    fe3e:	f010 0f0c 	tst.w	r0, #12
    fe42:	d002      	beq.n	fe4a <bt_conn_set_state+0x126>
				k_work_cancel_delayable(&conn->deferred_work);
    fe44:	4628      	mov	r0, r5
    fe46:	f008 fceb 	bl	18820 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fe4a:	3404      	adds	r4, #4
    fe4c:	e8d4 3fef 	ldaex	r3, [r4]
    fe50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fe54:	e8c4 3fe2 	stlex	r2, r3, [r4]
    fe58:	2a00      	cmp	r2, #0
    fe5a:	d1f7      	bne.n	fe4c <bt_conn_set_state+0x128>
    fe5c:	2100      	movs	r1, #0
    fe5e:	4826      	ldr	r0, [pc, #152]	; (fef8 <bt_conn_set_state+0x1d4>)
    fe60:	f00a fe86 	bl	1ab70 <z_impl_k_poll_signal_raise>
    fe64:	e7c0      	b.n	fde8 <bt_conn_set_state+0xc4>
			if (conn->err) {
    fe66:	7a63      	ldrb	r3, [r4, #9]
    fe68:	2b00      	cmp	r3, #0
    fe6a:	d0c2      	beq.n	fdf2 <bt_conn_set_state+0xce>
				notify_connected(conn);
    fe6c:	4620      	mov	r0, r4
    fe6e:	f7ff fbef 	bl	f650 <notify_connected>
    fe72:	e7be      	b.n	fdf2 <bt_conn_set_state+0xce>
			BT_WARN("Invalid (%u) old state", state);
    fe74:	466c      	mov	r4, sp
    fe76:	b088      	sub	sp, #32
    fe78:	466a      	mov	r2, sp
    fe7a:	4b20      	ldr	r3, [pc, #128]	; (fefc <bt_conn_set_state+0x1d8>)
		BT_WARN("no valid (%u) state was set", state);
    fe7c:	e9c2 3505 	strd	r3, r5, [r2, #20]
    fe80:	2303      	movs	r3, #3
    fe82:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fe86:	f842 3f10 	str.w	r3, [r2, #16]!
    fe8a:	e767      	b.n	fd5c <bt_conn_set_state+0x38>
	return list->head;
    fe8c:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    fe8e:	b921      	cbnz	r1, fe9a <bt_conn_set_state+0x176>
    fe90:	f383 8811 	msr	BASEPRI, r3
    fe94:	f3bf 8f6f 	isb	sy
		if (!node) {
    fe98:	e7a6      	b.n	fde8 <bt_conn_set_state+0xc4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fe9a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    fe9c:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fe9e:	4281      	cmp	r1, r0
	list->tail = node;
    fea0:	bf08      	it	eq
    fea2:	61a2      	streq	r2, [r4, #24]
	list->head = node;
    fea4:	6162      	str	r2, [r4, #20]
    fea6:	f383 8811 	msr	BASEPRI, r3
    feaa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    feae:	f04f 0220 	mov.w	r2, #32
    feb2:	f3ef 8311 	mrs	r3, BASEPRI
    feb6:	f382 8812 	msr	BASEPRI_MAX, r2
    feba:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    febe:	68ca      	ldr	r2, [r1, #12]
    fec0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    fec2:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
    fec4:	f383 8811 	msr	BASEPRI, r3
    fec8:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    fecc:	4620      	mov	r0, r4
    fece:	f7ff fc25 	bl	f71c <conn_tx_destroy>
    fed2:	e76d      	b.n	fdb0 <bt_conn_set_state+0x8c>
		BT_WARN("no valid (%u) state was set", state);
    fed4:	466c      	mov	r4, sp
    fed6:	b088      	sub	sp, #32
    fed8:	466a      	mov	r2, sp
    feda:	4b09      	ldr	r3, [pc, #36]	; (ff00 <bt_conn_set_state+0x1dc>)
    fedc:	e7ce      	b.n	fe7c <bt_conn_set_state+0x158>
    fede:	bf00      	nop
    fee0:	0001f238 	.word	0x0001f238
    fee4:	000216cf 	.word	0x000216cf
    fee8:	000216d9 	.word	0x000216d9
    feec:	01000003 	.word	0x01000003
    fef0:	0001ed84 	.word	0x0001ed84
    fef4:	20008100 	.word	0x20008100
    fef8:	20008208 	.word	0x20008208
    fefc:	000216ea 	.word	0x000216ea
    ff00:	00021701 	.word	0x00021701

0000ff04 <bt_conn_index>:
		index = conn - acl_conns;
    ff04:	4a0c      	ldr	r2, [pc, #48]	; (ff38 <bt_conn_index+0x34>)
{
    ff06:	b508      	push	{r3, lr}
		index = conn - acl_conns;
    ff08:	490c      	ldr	r1, [pc, #48]	; (ff3c <bt_conn_index+0x38>)
    ff0a:	1a83      	subs	r3, r0, r2
    ff0c:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
    ff0e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
    ff10:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
    ff14:	d00e      	beq.n	ff34 <bt_conn_index+0x30>
    ff16:	490a      	ldr	r1, [pc, #40]	; (ff40 <bt_conn_index+0x3c>)
    ff18:	f240 43b3 	movw	r3, #1203	; 0x4b3
    ff1c:	4a09      	ldr	r2, [pc, #36]	; (ff44 <bt_conn_index+0x40>)
    ff1e:	480a      	ldr	r0, [pc, #40]	; (ff48 <bt_conn_index+0x44>)
    ff20:	f00b f984 	bl	1b22c <assert_print>
    ff24:	4809      	ldr	r0, [pc, #36]	; (ff4c <bt_conn_index+0x48>)
    ff26:	f00b f981 	bl	1b22c <assert_print>
    ff2a:	f240 41b3 	movw	r1, #1203	; 0x4b3
    ff2e:	4805      	ldr	r0, [pc, #20]	; (ff44 <bt_conn_index+0x40>)
    ff30:	f00b f975 	bl	1b21e <assert_post_action>
}
    ff34:	b2d8      	uxtb	r0, r3
    ff36:	bd08      	pop	{r3, pc}
    ff38:	20009270 	.word	0x20009270
    ff3c:	c28f5c29 	.word	0xc28f5c29
    ff40:	0002171d 	.word	0x0002171d
    ff44:	00021506 	.word	0x00021506
    ff48:	0001f995 	.word	0x0001f995
    ff4c:	000217e6 	.word	0x000217e6

0000ff50 <bt_conn_create_pdu_timeout>:
{
    ff50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff52:	b087      	sub	sp, #28
    ff54:	4604      	mov	r4, r0
    ff56:	460d      	mov	r5, r1
    ff58:	4617      	mov	r7, r2
    ff5a:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
    ff5c:	f00e faf0 	bl	1e540 <k_is_in_isr>
    ff60:	b158      	cbz	r0, ff7a <bt_conn_create_pdu_timeout+0x2a>
    ff62:	4914      	ldr	r1, [pc, #80]	; (ffb4 <bt_conn_create_pdu_timeout+0x64>)
    ff64:	4814      	ldr	r0, [pc, #80]	; (ffb8 <bt_conn_create_pdu_timeout+0x68>)
    ff66:	f240 43cf 	movw	r3, #1231	; 0x4cf
    ff6a:	4a14      	ldr	r2, [pc, #80]	; (ffbc <bt_conn_create_pdu_timeout+0x6c>)
    ff6c:	f00b f95e 	bl	1b22c <assert_print>
    ff70:	f240 41cf 	movw	r1, #1231	; 0x4cf
    ff74:	4811      	ldr	r0, [pc, #68]	; (ffbc <bt_conn_create_pdu_timeout+0x6c>)
    ff76:	f00b f952 	bl	1b21e <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    ff7a:	4911      	ldr	r1, [pc, #68]	; (ffc0 <bt_conn_create_pdu_timeout+0x70>)
    ff7c:	463a      	mov	r2, r7
    ff7e:	2c00      	cmp	r4, #0
    ff80:	bf14      	ite	ne
    ff82:	4620      	movne	r0, r4
    ff84:	4608      	moveq	r0, r1
    ff86:	4633      	mov	r3, r6
    ff88:	f00d fb01 	bl	1d58e <net_buf_alloc_fixed>
	if (!buf) {
    ff8c:	4604      	mov	r4, r0
    ff8e:	b960      	cbnz	r0, ffaa <bt_conn_create_pdu_timeout+0x5a>
		BT_WARN("Unable to allocate buffer within timeout");
    ff90:	4b0c      	ldr	r3, [pc, #48]	; (ffc4 <bt_conn_create_pdu_timeout+0x74>)
    ff92:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ff96:	9305      	str	r3, [sp, #20]
    ff98:	2302      	movs	r3, #2
    ff9a:	480b      	ldr	r0, [pc, #44]	; (ffc8 <bt_conn_create_pdu_timeout+0x78>)
    ff9c:	aa04      	add	r2, sp, #16
    ff9e:	9304      	str	r3, [sp, #16]
    ffa0:	f00c fb9e 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
}
    ffa4:	4620      	mov	r0, r4
    ffa6:	b007      	add	sp, #28
    ffa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    ffaa:	1d69      	adds	r1, r5, #5
    ffac:	3008      	adds	r0, #8
    ffae:	f002 fe81 	bl	12cb4 <net_buf_simple_reserve>
	return buf;
    ffb2:	e7f7      	b.n	ffa4 <bt_conn_create_pdu_timeout+0x54>
    ffb4:	00021800 	.word	0x00021800
    ffb8:	0001f995 	.word	0x0001f995
    ffbc:	00021506 	.word	0x00021506
    ffc0:	20008600 	.word	0x20008600
    ffc4:	0002180f 	.word	0x0002180f
    ffc8:	0001ed84 	.word	0x0001ed84

0000ffcc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    ffcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffce:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    ffd0:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ffd2:	e8d3 2faf 	lda	r2, [r3]
    ffd6:	05d2      	lsls	r2, r2, #23
    ffd8:	d515      	bpl.n	10006 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6>
	    conn->le.interval >= conn->le.interval_min &&
    ffda:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    ffde:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    ffe2:	4291      	cmp	r1, r2
    ffe4:	d80f      	bhi.n	10006 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6>
	    conn->le.interval >= conn->le.interval_min &&
    ffe6:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    ffea:	4291      	cmp	r1, r2
    ffec:	d30b      	bcc.n	10006 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    ffee:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    fff2:	4291      	cmp	r1, r2
    fff4:	d107      	bne.n	10006 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fff6:	e8d3 1fef 	ldaex	r1, [r3]
    fffa:	f421 7180 	bic.w	r1, r1, #256	; 0x100
    fffe:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10002:	2a00      	cmp	r2, #0
   10004:	d1f7      	bne.n	fff6 <notify_le_param_updated+0x2a>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   10006:	4b18      	ldr	r3, [pc, #96]	; (10068 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x68>)
   10008:	681d      	ldr	r5, [r3, #0]
   1000a:	b995      	cbnz	r5, 10032 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x32>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1000c:	4d17      	ldr	r5, [pc, #92]	; (1006c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6c>)
   1000e:	4f18      	ldr	r7, [pc, #96]	; (10070 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x70>)
   10010:	42bd      	cmp	r5, r7
   10012:	d926      	bls.n	10062 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x62>
   10014:	4917      	ldr	r1, [pc, #92]	; (10074 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x74>)
   10016:	f240 53a2 	movw	r3, #1442	; 0x5a2
   1001a:	4a17      	ldr	r2, [pc, #92]	; (10078 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x78>)
   1001c:	4817      	ldr	r0, [pc, #92]	; (1007c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x7c>)
   1001e:	f00b f905 	bl	1b22c <assert_print>
   10022:	4817      	ldr	r0, [pc, #92]	; (10080 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x80>)
   10024:	f00b f902 	bl	1b22c <assert_print>
   10028:	f240 51a2 	movw	r1, #1442	; 0x5a2
   1002c:	4812      	ldr	r0, [pc, #72]	; (10078 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x78>)
   1002e:	f00b f8f6 	bl	1b21e <assert_post_action>
		if (cb->le_param_updated) {
   10032:	68ee      	ldr	r6, [r5, #12]
   10034:	b13e      	cbz	r6, 10046 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x46>
			cb->le_param_updated(conn, conn->le.interval,
   10036:	4620      	mov	r0, r4
   10038:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1003c:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   10040:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   10044:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10046:	692d      	ldr	r5, [r5, #16]
   10048:	e7df      	b.n	1000a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa>
		if (cb->le_param_updated) {
   1004a:	68ee      	ldr	r6, [r5, #12]
   1004c:	b13e      	cbz	r6, 1005e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   1004e:	4620      	mov	r0, r4
   10050:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   10054:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   10058:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1005c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1005e:	3514      	adds	r5, #20
   10060:	e7d6      	b.n	10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>
   10062:	d3f2      	bcc.n	1004a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   10064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10066:	bf00      	nop
   10068:	20009714 	.word	0x20009714
   1006c:	0001ed4c 	.word	0x0001ed4c
   10070:	0001ed4c 	.word	0x0001ed4c
   10074:	00021536 	.word	0x00021536
   10078:	00021506 	.word	0x00021506
   1007c:	0001f995 	.word	0x0001f995
   10080:	00020078 	.word	0x00020078

00010084 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   10084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10088:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1008a:	4608      	mov	r0, r1
{
   1008c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1008e:	f00c f9da 	bl	1c446 <bt_le_conn_params_valid>
   10092:	4605      	mov	r5, r0
   10094:	b918      	cbnz	r0, 1009e <le_param_req+0x1a>
		return false;
   10096:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   10098:	4628      	mov	r0, r5
   1009a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1009e:	4b1b      	ldr	r3, [pc, #108]	; (1010c <le_param_req+0x88>)
   100a0:	681e      	ldr	r6, [r3, #0]
   100a2:	b99e      	cbnz	r6, 100cc <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   100a4:	4e1a      	ldr	r6, [pc, #104]	; (10110 <le_param_req+0x8c>)
   100a6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 10114 <le_param_req+0x90>
   100aa:	4546      	cmp	r6, r8
   100ac:	d927      	bls.n	100fe <le_param_req+0x7a>
   100ae:	491a      	ldr	r1, [pc, #104]	; (10118 <le_param_req+0x94>)
   100b0:	f240 53ea 	movw	r3, #1514	; 0x5ea
   100b4:	4a19      	ldr	r2, [pc, #100]	; (1011c <le_param_req+0x98>)
   100b6:	481a      	ldr	r0, [pc, #104]	; (10120 <le_param_req+0x9c>)
   100b8:	f00b f8b8 	bl	1b22c <assert_print>
   100bc:	4819      	ldr	r0, [pc, #100]	; (10124 <le_param_req+0xa0>)
   100be:	f00b f8b5 	bl	1b22c <assert_print>
   100c2:	f240 51ea 	movw	r1, #1514	; 0x5ea
   100c6:	4815      	ldr	r0, [pc, #84]	; (1011c <le_param_req+0x98>)
   100c8:	f00b f8a9 	bl	1b21e <assert_post_action>
		if (!cb->le_param_req) {
   100cc:	68b3      	ldr	r3, [r6, #8]
   100ce:	b90b      	cbnz	r3, 100d4 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   100d0:	6936      	ldr	r6, [r6, #16]
   100d2:	e7e6      	b.n	100a2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   100d4:	4621      	mov	r1, r4
   100d6:	4638      	mov	r0, r7
   100d8:	4798      	blx	r3
   100da:	2800      	cmp	r0, #0
   100dc:	d0db      	beq.n	10096 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   100de:	4620      	mov	r0, r4
   100e0:	f00c f9b1 	bl	1c446 <bt_le_conn_params_valid>
   100e4:	2800      	cmp	r0, #0
   100e6:	d1f3      	bne.n	100d0 <le_param_req+0x4c>
   100e8:	e7d5      	b.n	10096 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   100ea:	4621      	mov	r1, r4
   100ec:	4638      	mov	r0, r7
   100ee:	4798      	blx	r3
   100f0:	2800      	cmp	r0, #0
   100f2:	d0d0      	beq.n	10096 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   100f4:	4620      	mov	r0, r4
   100f6:	f00c f9a6 	bl	1c446 <bt_le_conn_params_valid>
   100fa:	b920      	cbnz	r0, 10106 <le_param_req+0x82>
   100fc:	e7cb      	b.n	10096 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   100fe:	d2cb      	bcs.n	10098 <le_param_req+0x14>
		if (!cb->le_param_req) {
   10100:	68b3      	ldr	r3, [r6, #8]
   10102:	2b00      	cmp	r3, #0
   10104:	d1f1      	bne.n	100ea <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10106:	3614      	adds	r6, #20
   10108:	e7cf      	b.n	100aa <le_param_req+0x26>
   1010a:	bf00      	nop
   1010c:	20009714 	.word	0x20009714
   10110:	0001ed4c 	.word	0x0001ed4c
   10114:	0001ed4c 	.word	0x0001ed4c
   10118:	00021536 	.word	0x00021536
   1011c:	00021506 	.word	0x00021506
   10120:	0001f995 	.word	0x0001f995
   10124:	00020078 	.word	0x00020078

00010128 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   10128:	4b02      	ldr	r3, [pc, #8]	; (10134 <bt_conn_cb_register+0xc>)
   1012a:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   1012c:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   1012e:	6102      	str	r2, [r0, #16]
}
   10130:	4770      	bx	lr
   10132:	bf00      	nop
   10134:	20009714 	.word	0x20009714

00010138 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   10138:	b570      	push	{r4, r5, r6, lr}
   1013a:	4606      	mov	r6, r0
   1013c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1013e:	4809      	ldr	r0, [pc, #36]	; (10164 <bt_conn_add_le+0x2c>)
   10140:	2101      	movs	r1, #1
   10142:	f7ff fbd9 	bl	f8f8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   10146:	4604      	mov	r4, r0
   10148:	b150      	cbz	r0, 10160 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   1014a:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   1014c:	2207      	movs	r2, #7
   1014e:	4629      	mov	r1, r5
   10150:	3090      	adds	r0, #144	; 0x90
   10152:	f00c f87a 	bl	1c24a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   10156:	2301      	movs	r3, #1
   10158:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1015a:	4b03      	ldr	r3, [pc, #12]	; (10168 <bt_conn_add_le+0x30>)
   1015c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   10160:	4620      	mov	r0, r4
   10162:	bd70      	pop	{r4, r5, r6, pc}
   10164:	20009270 	.word	0x20009270
   10168:	00280018 	.word	0x00280018

0001016c <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1016c:	b570      	push	{r4, r5, r6, lr}
   1016e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10170:	480a      	ldr	r0, [pc, #40]	; (1019c <bt_conn_lookup_addr_le+0x30>)
{
   10172:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10174:	f7ff fd76 	bl	fc64 <bt_conn_ref>
   10178:	4604      	mov	r4, r0

		if (!conn) {
   1017a:	b120      	cbz	r0, 10186 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1017c:	7883      	ldrb	r3, [r0, #2]
   1017e:	2b01      	cmp	r3, #1
   10180:	d004      	beq.n	1018c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   10182:	f7ff fd97 	bl	fcb4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   10186:	2400      	movs	r4, #0
}
   10188:	4620      	mov	r0, r4
   1018a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1018c:	4632      	mov	r2, r6
   1018e:	4629      	mov	r1, r5
   10190:	f00c fae2 	bl	1c758 <bt_conn_is_peer_addr_le>
   10194:	2800      	cmp	r0, #0
   10196:	d1f7      	bne.n	10188 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   10198:	4620      	mov	r0, r4
   1019a:	e7f2      	b.n	10182 <bt_conn_lookup_addr_le+0x16>
   1019c:	20009270 	.word	0x20009270

000101a0 <bt_conn_exists_le>:
{
   101a0:	b5b0      	push	{r4, r5, r7, lr}
   101a2:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   101a4:	f7ff ffe2 	bl	1016c <bt_conn_lookup_addr_le>
	if (conn) {
   101a8:	4604      	mov	r4, r0
   101aa:	b1e8      	cbz	r0, 101e8 <bt_conn_exists_le+0x48>
		BT_WARN("Found valid connection in %s state",
   101ac:	7a83      	ldrb	r3, [r0, #10]
   101ae:	466d      	mov	r5, sp
   101b0:	2b08      	cmp	r3, #8
   101b2:	bf98      	it	ls
   101b4:	4a0d      	ldrls	r2, [pc, #52]	; (101ec <bt_conn_exists_le+0x4c>)
   101b6:	b088      	sub	sp, #32
   101b8:	bf94      	ite	ls
   101ba:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   101be:	4b0c      	ldrhi	r3, [pc, #48]	; (101f0 <bt_conn_exists_le+0x50>)
   101c0:	466a      	mov	r2, sp
   101c2:	490c      	ldr	r1, [pc, #48]	; (101f4 <bt_conn_exists_le+0x54>)
   101c4:	480c      	ldr	r0, [pc, #48]	; (101f8 <bt_conn_exists_le+0x58>)
   101c6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   101ca:	f44f 7300 	mov.w	r3, #512	; 0x200
   101ce:	8393      	strh	r3, [r2, #28]
   101d0:	4b0a      	ldr	r3, [pc, #40]	; (101fc <bt_conn_exists_le+0x5c>)
   101d2:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   101d6:	f842 3f10 	str.w	r3, [r2, #16]!
   101da:	f00c fa81 	bl	1c6e0 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   101de:	4620      	mov	r0, r4
   101e0:	46ad      	mov	sp, r5
   101e2:	f7ff fd67 	bl	fcb4 <bt_conn_unref>
		return true;
   101e6:	2001      	movs	r0, #1
}
   101e8:	46bd      	mov	sp, r7
   101ea:	bdb0      	pop	{r4, r5, r7, pc}
   101ec:	0001f238 	.word	0x0001f238
   101f0:	000216cf 	.word	0x000216cf
   101f4:	00021838 	.word	0x00021838
   101f8:	0001ed84 	.word	0x0001ed84
   101fc:	01000003 	.word	0x01000003

00010200 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   10200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10202:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10204:	480e      	ldr	r0, [pc, #56]	; (10240 <bt_conn_lookup_state_le+0x40>)
{
   10206:	460e      	mov	r6, r1
   10208:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1020a:	f7ff fd2b 	bl	fc64 <bt_conn_ref>

		if (!conn) {
   1020e:	4604      	mov	r4, r0
   10210:	b120      	cbz	r0, 1021c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   10212:	7883      	ldrb	r3, [r0, #2]
   10214:	2b01      	cmp	r3, #1
   10216:	d003      	beq.n	10220 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   10218:	f7ff fd4c 	bl	fcb4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1021c:	2400      	movs	r4, #0
   1021e:	e00d      	b.n	1023c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   10220:	b136      	cbz	r6, 10230 <bt_conn_lookup_state_le+0x30>
   10222:	4632      	mov	r2, r6
   10224:	4629      	mov	r1, r5
   10226:	f00c fa97 	bl	1c758 <bt_conn_is_peer_addr_le>
   1022a:	b908      	cbnz	r0, 10230 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1022c:	4620      	mov	r0, r4
   1022e:	e7f3      	b.n	10218 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   10230:	7aa3      	ldrb	r3, [r4, #10]
   10232:	42bb      	cmp	r3, r7
   10234:	d1fa      	bne.n	1022c <bt_conn_lookup_state_le+0x2c>
   10236:	7a23      	ldrb	r3, [r4, #8]
   10238:	42ab      	cmp	r3, r5
   1023a:	d1f7      	bne.n	1022c <bt_conn_lookup_state_le+0x2c>
}
   1023c:	4620      	mov	r0, r4
   1023e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10240:	20009270 	.word	0x20009270

00010244 <send_conn_le_param_update>:
{
   10244:	b538      	push	{r3, r4, r5, lr}
   10246:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   10248:	4608      	mov	r0, r1
{
   1024a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1024c:	f00c f8fb 	bl	1c446 <bt_le_conn_params_valid>
   10250:	b338      	cbz	r0, 102a2 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10252:	4b15      	ldr	r3, [pc, #84]	; (102a8 <send_conn_le_param_update+0x64>)
   10254:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   10258:	0799      	lsls	r1, r3, #30
   1025a:	d407      	bmi.n	1026c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1025c:	78e3      	ldrb	r3, [r4, #3]
   1025e:	b173      	cbz	r3, 1027e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   10260:	4629      	mov	r1, r5
   10262:	4620      	mov	r0, r4
}
   10264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   10268:	f000 bab0 	b.w	107cc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1026c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   10270:	079a      	lsls	r2, r3, #30
   10272:	d5f3      	bpl.n	1025c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10274:	1d23      	adds	r3, r4, #4
   10276:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1027a:	059b      	lsls	r3, r3, #22
   1027c:	d4ee      	bmi.n	1025c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1027e:	4629      	mov	r1, r5
   10280:	4620      	mov	r0, r4
   10282:	f00c fa89 	bl	1c798 <bt_conn_le_conn_update>
		if (rc == 0) {
   10286:	b958      	cbnz	r0, 102a0 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   10288:	882b      	ldrh	r3, [r5, #0]
   1028a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1028e:	886b      	ldrh	r3, [r5, #2]
   10290:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   10294:	88ab      	ldrh	r3, [r5, #4]
   10296:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1029a:	88eb      	ldrh	r3, [r5, #6]
   1029c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   102a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   102a2:	f06f 0015 	mvn.w	r0, #21
   102a6:	e7fb      	b.n	102a0 <send_conn_le_param_update+0x5c>
   102a8:	20008000 	.word	0x20008000

000102ac <deferred_work>:
{
   102ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   102ae:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   102b2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   102b4:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   102b8:	bb7b      	cbnz	r3, 1031a <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   102ba:	4628      	mov	r0, r5
   102bc:	f00c fac9 	bl	1c852 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   102c0:	4b2a      	ldr	r3, [pc, #168]	; (1036c <deferred_work+0xc0>)
   102c2:	681e      	ldr	r6, [r3, #0]
   102c4:	b996      	cbnz	r6, 102ec <deferred_work+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   102c6:	4e2a      	ldr	r6, [pc, #168]	; (10370 <deferred_work+0xc4>)
   102c8:	4f2a      	ldr	r7, [pc, #168]	; (10374 <deferred_work+0xc8>)
   102ca:	42be      	cmp	r6, r7
   102cc:	d91e      	bls.n	1030c <deferred_work+0x60>
   102ce:	492a      	ldr	r1, [pc, #168]	; (10378 <deferred_work+0xcc>)
   102d0:	f240 5369 	movw	r3, #1385	; 0x569
   102d4:	4a29      	ldr	r2, [pc, #164]	; (1037c <deferred_work+0xd0>)
   102d6:	482a      	ldr	r0, [pc, #168]	; (10380 <deferred_work+0xd4>)
   102d8:	f00a ffa8 	bl	1b22c <assert_print>
   102dc:	4829      	ldr	r0, [pc, #164]	; (10384 <deferred_work+0xd8>)
   102de:	f00a ffa5 	bl	1b22c <assert_print>
   102e2:	f240 5169 	movw	r1, #1385	; 0x569
   102e6:	4825      	ldr	r0, [pc, #148]	; (1037c <deferred_work+0xd0>)
   102e8:	f00a ff99 	bl	1b21e <assert_post_action>
		if (cb->disconnected) {
   102ec:	6873      	ldr	r3, [r6, #4]
   102ee:	b11b      	cbz	r3, 102f8 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
   102f0:	4628      	mov	r0, r5
   102f2:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   102f6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   102f8:	6936      	ldr	r6, [r6, #16]
   102fa:	e7e3      	b.n	102c4 <deferred_work+0x18>
		if (cb->disconnected) {
   102fc:	6873      	ldr	r3, [r6, #4]
   102fe:	b11b      	cbz	r3, 10308 <deferred_work+0x5c>
			cb->disconnected(conn, conn->err);
   10300:	4628      	mov	r0, r5
   10302:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   10306:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10308:	3614      	adds	r6, #20
   1030a:	e7de      	b.n	102ca <deferred_work+0x1e>
   1030c:	d3f6      	bcc.n	102fc <deferred_work+0x50>
		bt_conn_unref(conn);
   1030e:	4628      	mov	r0, r5
}
   10310:	b003      	add	sp, #12
   10312:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   10316:	f7ff bccd 	b.w	fcb4 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   1031a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1031e:	2b01      	cmp	r3, #1
   10320:	d11b      	bne.n	1035a <deferred_work+0xae>
	if (atomic_test_and_clear_bit(conn->flags,
   10322:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10326:	e8d6 3fef 	ldaex	r3, [r6]
   1032a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   1032e:	e8c6 2fe1 	stlex	r1, r2, [r6]
   10332:	2900      	cmp	r1, #0
   10334:	d1f7      	bne.n	10326 <deferred_work+0x7a>
   10336:	05db      	lsls	r3, r3, #23
   10338:	d511      	bpl.n	1035e <deferred_work+0xb2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1033a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1033c:	9300      	str	r3, [sp, #0]
   1033e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   10340:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   10342:	4669      	mov	r1, sp
   10344:	4628      	mov	r0, r5
   10346:	f7ff ff7d 	bl	10244 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1034a:	e8d6 3fef 	ldaex	r3, [r6]
   1034e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10352:	e8c6 3fe2 	stlex	r2, r3, [r6]
   10356:	2a00      	cmp	r2, #0
   10358:	d1f7      	bne.n	1034a <deferred_work+0x9e>
}
   1035a:	b003      	add	sp, #12
   1035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   1035e:	466b      	mov	r3, sp
   10360:	4a09      	ldr	r2, [pc, #36]	; (10388 <deferred_work+0xdc>)
   10362:	6810      	ldr	r0, [r2, #0]
   10364:	6851      	ldr	r1, [r2, #4]
   10366:	c303      	stmia	r3!, {r0, r1}
   10368:	e7eb      	b.n	10342 <deferred_work+0x96>
   1036a:	bf00      	nop
   1036c:	20009714 	.word	0x20009714
   10370:	0001ed4c 	.word	0x0001ed4c
   10374:	0001ed4c 	.word	0x0001ed4c
   10378:	00021536 	.word	0x00021536
   1037c:	00021506 	.word	0x00021506
   10380:	0001f995 	.word	0x0001f995
   10384:	00020078 	.word	0x00020078
   10388:	0001eec0 	.word	0x0001eec0

0001038c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1038c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1038e:	4801      	ldr	r0, [pc, #4]	; (10394 <bt_conn_create_frag_timeout+0x8>)
   10390:	f7ff bdde 	b.w	ff50 <bt_conn_create_pdu_timeout>
   10394:	2000869c 	.word	0x2000869c

00010398 <create_frag>:
{
   10398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1039c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1039e:	f04f 33ff 	mov.w	r3, #4294967295
   103a2:	f04f 32ff 	mov.w	r2, #4294967295
   103a6:	2000      	movs	r0, #0
{
   103a8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   103aa:	f7ff ffef 	bl	1038c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   103ae:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   103b0:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   103b2:	2b07      	cmp	r3, #7
   103b4:	f04f 0600 	mov.w	r6, #0
   103b8:	d005      	beq.n	103c6 <create_frag+0x2e>
		net_buf_unref(frag);
   103ba:	f002 fdbf 	bl	12f3c <net_buf_unref>
		return NULL;
   103be:	4635      	mov	r5, r6
}
   103c0:	4628      	mov	r0, r5
   103c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   103c6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   103c8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   103cc:	4e0c      	ldr	r6, [pc, #48]	; (10400 <create_frag+0x68>)
   103ce:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   103d0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   103d4:	f00d f8f3 	bl	1d5be <net_buf_simple_tailroom>
   103d8:	4580      	cmp	r8, r0
   103da:	d20c      	bcs.n	103f6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   103dc:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   103e0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   103e4:	4632      	mov	r2, r6
   103e6:	4638      	mov	r0, r7
   103e8:	f00d f8f1 	bl	1d5ce <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   103ec:	4631      	mov	r1, r6
   103ee:	4620      	mov	r0, r4
   103f0:	f002 fe8a 	bl	13108 <net_buf_simple_pull>
   103f4:	e7e4      	b.n	103c0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   103f6:	4638      	mov	r0, r7
   103f8:	f00d f8e1 	bl	1d5be <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   103fc:	b286      	uxth	r6, r0
   103fe:	e7ef      	b.n	103e0 <create_frag+0x48>
   10400:	20008000 	.word	0x20008000

00010404 <bt_conn_process_tx>:
{
   10404:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10406:	7a83      	ldrb	r3, [r0, #10]
{
   10408:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1040a:	b973      	cbnz	r3, 1042a <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1040c:	1d03      	adds	r3, r0, #4
   1040e:	e8d3 2fef 	ldaex	r2, [r3]
   10412:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   10416:	e8c3 1fe5 	stlex	r5, r1, [r3]
   1041a:	2d00      	cmp	r5, #0
   1041c:	d1f7      	bne.n	1040e <bt_conn_process_tx+0xa>
   1041e:	0653      	lsls	r3, r2, #25
   10420:	d503      	bpl.n	1042a <bt_conn_process_tx+0x26>
}
   10422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   10426:	f7ff ba95 	b.w	f954 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1042a:	2200      	movs	r2, #0
   1042c:	2300      	movs	r3, #0
   1042e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   10432:	f002 fc11 	bl	12c58 <net_buf_get>
	BT_ASSERT(buf);
   10436:	4605      	mov	r5, r0
   10438:	b960      	cbnz	r0, 10454 <bt_conn_process_tx+0x50>
   1043a:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1043e:	4a23      	ldr	r2, [pc, #140]	; (104cc <bt_conn_process_tx+0xc8>)
   10440:	4923      	ldr	r1, [pc, #140]	; (104d0 <bt_conn_process_tx+0xcc>)
   10442:	4824      	ldr	r0, [pc, #144]	; (104d4 <bt_conn_process_tx+0xd0>)
   10444:	f00a fef2 	bl	1b22c <assert_print>
   10448:	4040      	eors	r0, r0
   1044a:	f380 8811 	msr	BASEPRI, r0
   1044e:	f04f 0003 	mov.w	r0, #3
   10452:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   10454:	4e20      	ldr	r6, [pc, #128]	; (104d8 <bt_conn_process_tx+0xd4>)
	if (buf->len <= conn_mtu(conn)) {
   10456:	89aa      	ldrh	r2, [r5, #12]
   10458:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1045c:	429a      	cmp	r2, r3
   1045e:	d807      	bhi.n	10470 <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   10460:	2300      	movs	r3, #0
   10462:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   10464:	4629      	mov	r1, r5
   10466:	4620      	mov	r0, r4
   10468:	f7ff f97e 	bl	f768 <send_frag>
	if (!send_buf(conn, buf)) {
   1046c:	b968      	cbnz	r0, 1048a <bt_conn_process_tx+0x86>
   1046e:	e005      	b.n	1047c <bt_conn_process_tx+0x78>
	frag = create_frag(conn, buf);
   10470:	4629      	mov	r1, r5
   10472:	4620      	mov	r0, r4
   10474:	f7ff ff90 	bl	10398 <create_frag>
	if (!frag) {
   10478:	4601      	mov	r1, r0
   1047a:	b938      	cbnz	r0, 1048c <bt_conn_process_tx+0x88>
		tx_data(buf)->tx = NULL;
   1047c:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1047e:	696e      	ldr	r6, [r5, #20]
		net_buf_unref(buf);
   10480:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   10482:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   10484:	f002 fd5a 	bl	12f3c <net_buf_unref>
		if (tx) {
   10488:	b9ce      	cbnz	r6, 104be <bt_conn_process_tx+0xba>
}
   1048a:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1048c:	2301      	movs	r3, #1
   1048e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   10490:	4620      	mov	r0, r4
   10492:	f7ff f969 	bl	f768 <send_frag>
   10496:	2800      	cmp	r0, #0
   10498:	d0f0      	beq.n	1047c <bt_conn_process_tx+0x78>
	while (buf->len > conn_mtu(conn)) {
   1049a:	89aa      	ldrh	r2, [r5, #12]
   1049c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   104a0:	429a      	cmp	r2, r3
   104a2:	d802      	bhi.n	104aa <bt_conn_process_tx+0xa6>
	return send_frag(conn, buf, FRAG_END, false);
   104a4:	2300      	movs	r3, #0
   104a6:	2203      	movs	r2, #3
   104a8:	e7dc      	b.n	10464 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
   104aa:	4629      	mov	r1, r5
   104ac:	4620      	mov	r0, r4
   104ae:	f7ff ff73 	bl	10398 <create_frag>
		if (!frag) {
   104b2:	4601      	mov	r1, r0
   104b4:	2800      	cmp	r0, #0
   104b6:	d0e1      	beq.n	1047c <bt_conn_process_tx+0x78>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   104b8:	2301      	movs	r3, #1
   104ba:	461a      	mov	r2, r3
   104bc:	e7e8      	b.n	10490 <bt_conn_process_tx+0x8c>
			conn_tx_destroy(conn, tx);
   104be:	4631      	mov	r1, r6
   104c0:	4620      	mov	r0, r4
}
   104c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   104c6:	f7ff b929 	b.w	f71c <conn_tx_destroy>
   104ca:	bf00      	nop
   104cc:	00021506 	.word	0x00021506
   104d0:	00020d91 	.word	0x00020d91
   104d4:	0001f995 	.word	0x0001f995
   104d8:	20008000 	.word	0x20008000

000104dc <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   104dc:	b910      	cbnz	r0, 104e4 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   104de:	4802      	ldr	r0, [pc, #8]	; (104e8 <bt_conn_lookup_index+0xc>)
   104e0:	f7ff bbc0 	b.w	fc64 <bt_conn_ref>
}
   104e4:	2000      	movs	r0, #0
   104e6:	4770      	bx	lr
   104e8:	20009270 	.word	0x20009270

000104ec <bt_conn_init>:

int bt_conn_init(void)
{
   104ec:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   104ee:	480c      	ldr	r0, [pc, #48]	; (10520 <bt_conn_init+0x34>)
   104f0:	f00e f855 	bl	1e59e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   104f4:	490b      	ldr	r1, [pc, #44]	; (10524 <bt_conn_init+0x38>)
   104f6:	480a      	ldr	r0, [pc, #40]	; (10520 <bt_conn_init+0x34>)
   104f8:	f00e f85e 	bl	1e5b8 <k_queue_append>
   104fc:	490a      	ldr	r1, [pc, #40]	; (10528 <bt_conn_init+0x3c>)
   104fe:	4808      	ldr	r0, [pc, #32]	; (10520 <bt_conn_init+0x34>)
   10500:	f00e f85a 	bl	1e5b8 <k_queue_append>
   10504:	4909      	ldr	r1, [pc, #36]	; (1052c <bt_conn_init+0x40>)
   10506:	4806      	ldr	r0, [pc, #24]	; (10520 <bt_conn_init+0x34>)
   10508:	f00e f856 	bl	1e5b8 <k_queue_append>
	}

	bt_att_init();
   1050c:	f001 f930 	bl	11770 <bt_att_init>

	err = bt_smp_init();
   10510:	f00d f83a 	bl	1d588 <bt_smp_init>
	if (err) {
   10514:	4604      	mov	r4, r0
   10516:	b908      	cbnz	r0, 1051c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   10518:	f00c f9d8 	bl	1c8cc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1051c:	4620      	mov	r0, r4
   1051e:	bd10      	pop	{r4, pc}
   10520:	200085b0 	.word	0x200085b0
   10524:	200096e4 	.word	0x200096e4
   10528:	200096f4 	.word	0x200096f4
   1052c:	20009704 	.word	0x20009704

00010530 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   10530:	b580      	push	{r7, lr}
   10532:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   10534:	b088      	sub	sp, #32
   10536:	466a      	mov	r2, sp
   10538:	4b06      	ldr	r3, [pc, #24]	; (10554 <l2cap_create_le_sig_pdu.part.0+0x24>)
   1053a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1053e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10542:	2303      	movs	r3, #3
   10544:	4804      	ldr	r0, [pc, #16]	; (10558 <l2cap_create_le_sig_pdu.part.0+0x28>)
   10546:	f842 3f10 	str.w	r3, [r2, #16]!
   1054a:	f00c f94e 	bl	1c7ea <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1054e:	2000      	movs	r0, #0
   10550:	46bd      	mov	sp, r7
   10552:	bd80      	pop	{r7, pc}
   10554:	000218d4 	.word	0x000218d4
   10558:	0001edb4 	.word	0x0001edb4

0001055c <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1055c:	b580      	push	{r7, lr}
   1055e:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   10560:	b088      	sub	sp, #32
   10562:	466a      	mov	r2, sp
   10564:	4b07      	ldr	r3, [pc, #28]	; (10584 <l2cap_accept.part.0+0x28>)
   10566:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1056a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1056e:	2303      	movs	r3, #3
   10570:	4805      	ldr	r0, [pc, #20]	; (10588 <l2cap_accept.part.0+0x2c>)
   10572:	f842 3f10 	str.w	r3, [r2, #16]!
   10576:	f00c f938 	bl	1c7ea <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1057a:	f06f 000b 	mvn.w	r0, #11
   1057e:	46bd      	mov	sp, r7
   10580:	bd80      	pop	{r7, pc}
   10582:	bf00      	nop
   10584:	000218fc 	.word	0x000218fc
   10588:	0001edb4 	.word	0x0001edb4

0001058c <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   1058c:	4b04      	ldr	r3, [pc, #16]	; (105a0 <l2cap_accept+0x14>)
   1058e:	681a      	ldr	r2, [r3, #0]
   10590:	b10a      	cbz	r2, 10596 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   10592:	f7ff bfe3 	b.w	1055c <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   10596:	4803      	ldr	r0, [pc, #12]	; (105a4 <l2cap_accept+0x18>)
   10598:	6058      	str	r0, [r3, #4]
}
   1059a:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   1059c:	600b      	str	r3, [r1, #0]
}
   1059e:	4770      	bx	lr
   105a0:	20009718 	.word	0x20009718
   105a4:	0001f27c 	.word	0x0001f27c

000105a8 <bt_l2cap_connected>:
{
   105a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   105aa:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   105ac:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   105ae:	4d27      	ldr	r5, [pc, #156]	; (1064c <bt_l2cap_connected+0xa4>)
   105b0:	4f27      	ldr	r7, [pc, #156]	; (10650 <bt_l2cap_connected+0xa8>)
   105b2:	42bd      	cmp	r5, r7
   105b4:	d946      	bls.n	10644 <bt_l2cap_connected+0x9c>
   105b6:	4927      	ldr	r1, [pc, #156]	; (10654 <bt_l2cap_connected+0xac>)
   105b8:	f240 1381 	movw	r3, #385	; 0x181
   105bc:	4a26      	ldr	r2, [pc, #152]	; (10658 <bt_l2cap_connected+0xb0>)
   105be:	4827      	ldr	r0, [pc, #156]	; (1065c <bt_l2cap_connected+0xb4>)
   105c0:	f00a fe34 	bl	1b22c <assert_print>
   105c4:	4826      	ldr	r0, [pc, #152]	; (10660 <bt_l2cap_connected+0xb8>)
   105c6:	f00a fe31 	bl	1b22c <assert_print>
   105ca:	f240 1181 	movw	r1, #385	; 0x181
   105ce:	4822      	ldr	r0, [pc, #136]	; (10658 <bt_l2cap_connected+0xb0>)
   105d0:	f00a fe25 	bl	1b21e <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   105d4:	4620      	mov	r0, r4
   105d6:	686b      	ldr	r3, [r5, #4]
   105d8:	a901      	add	r1, sp, #4
   105da:	4798      	blx	r3
   105dc:	2800      	cmp	r0, #0
   105de:	db2c      	blt.n	1063a <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   105e0:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   105e2:	882a      	ldrh	r2, [r5, #0]
   105e4:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   105e6:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   105e8:	68a8      	ldr	r0, [r5, #8]
   105ea:	f103 0210 	add.w	r2, r3, #16
   105ee:	e8d2 1fef 	ldaex	r1, [r2]
   105f2:	e8c2 6fec 	stlex	ip, r6, [r2]
   105f6:	f1bc 0f00 	cmp.w	ip, #0
   105fa:	d1f8      	bne.n	105ee <bt_l2cap_connected+0x46>
	parent->next = child;
   105fc:	609e      	str	r6, [r3, #8]
	return list->tail;
   105fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   10600:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   10604:	b9d9      	cbnz	r1, 1063e <bt_l2cap_connected+0x96>
	list->head = node;
   10606:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1060a:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1060c:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1060e:	9801      	ldr	r0, [sp, #4]
   10610:	6843      	ldr	r3, [r0, #4]
   10612:	681b      	ldr	r3, [r3, #0]
   10614:	b103      	cbz	r3, 10618 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   10616:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10618:	9b01      	ldr	r3, [sp, #4]
   1061a:	3310      	adds	r3, #16
   1061c:	e8d3 1fef 	ldaex	r1, [r3]
   10620:	f041 0101 	orr.w	r1, r1, #1
   10624:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10628:	2a00      	cmp	r2, #0
   1062a:	d1f7      	bne.n	1061c <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   1062c:	9801      	ldr	r0, [sp, #4]
   1062e:	6843      	ldr	r3, [r0, #4]
   10630:	69db      	ldr	r3, [r3, #28]
   10632:	b113      	cbz	r3, 1063a <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   10634:	f100 0110 	add.w	r1, r0, #16
   10638:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1063a:	350c      	adds	r5, #12
   1063c:	e7b9      	b.n	105b2 <bt_l2cap_connected+0xa>
	parent->next = child;
   1063e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10640:	65a2      	str	r2, [r4, #88]	; 0x58
}
   10642:	e7e2      	b.n	1060a <bt_l2cap_connected+0x62>
   10644:	d3c6      	bcc.n	105d4 <bt_l2cap_connected+0x2c>
}
   10646:	b003      	add	sp, #12
   10648:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1064a:	bf00      	nop
   1064c:	0001ed28 	.word	0x0001ed28
   10650:	0001ed4c 	.word	0x0001ed4c
   10654:	00021954 	.word	0x00021954
   10658:	00021923 	.word	0x00021923
   1065c:	0001f995 	.word	0x0001f995
   10660:	00020078 	.word	0x00020078

00010664 <l2cap_recv>:
{
   10664:	b5f0      	push	{r4, r5, r6, r7, lr}
   10666:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   10668:	898b      	ldrh	r3, [r1, #12]
{
   1066a:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1066c:	2b03      	cmp	r3, #3
{
   1066e:	460d      	mov	r5, r1
   10670:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   10672:	d80b      	bhi.n	1068c <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   10674:	4b30      	ldr	r3, [pc, #192]	; (10738 <l2cap_recv+0xd4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   10676:	617b      	str	r3, [r7, #20]
   10678:	2302      	movs	r3, #2
   1067a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1067e:	482f      	ldr	r0, [pc, #188]	; (1073c <l2cap_recv+0xd8>)
   10680:	613b      	str	r3, [r7, #16]
   10682:	f107 0210 	add.w	r2, r7, #16
   10686:	f00c f8b0 	bl	1c7ea <z_log_msg_static_create.constprop.0>
		return 0;
   1068a:	e019      	b.n	106c0 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1068c:	2104      	movs	r1, #4
   1068e:	f105 0008 	add.w	r0, r5, #8
   10692:	f002 fd57 	bl	13144 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   10696:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   10698:	8843      	ldrh	r3, [r0, #2]
   1069a:	4604      	mov	r4, r0
	if (buf->len != len) {
   1069c:	4299      	cmp	r1, r3
   1069e:	d013      	beq.n	106c8 <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   106a0:	466c      	mov	r4, sp
   106a2:	b088      	sub	sp, #32
   106a4:	aa02      	add	r2, sp, #8
   106a6:	61d3      	str	r3, [r2, #28]
   106a8:	2304      	movs	r3, #4
   106aa:	4825      	ldr	r0, [pc, #148]	; (10740 <l2cap_recv+0xdc>)
   106ac:	e9c2 0105 	strd	r0, r1, [r2, #20]
   106b0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   106b4:	4821      	ldr	r0, [pc, #132]	; (1073c <l2cap_recv+0xd8>)
   106b6:	f842 3f10 	str.w	r3, [r2, #16]!
   106ba:	f00c f896 	bl	1c7ea <z_log_msg_static_create.constprop.0>
   106be:	46a5      	mov	sp, r4
}
   106c0:	2000      	movs	r0, #0
   106c2:	371c      	adds	r7, #28
   106c4:	46bd      	mov	sp, r7
   106c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   106c8:	7843      	ldrb	r3, [r0, #1]
   106ca:	b90b      	cbnz	r3, 106d0 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   106cc:	4b1d      	ldr	r3, [pc, #116]	; (10744 <l2cap_recv+0xe0>)
   106ce:	e7d2      	b.n	10676 <l2cap_recv+0x12>
	switch (hdr->code) {
   106d0:	7803      	ldrb	r3, [r0, #0]
   106d2:	2b01      	cmp	r3, #1
   106d4:	d0f4      	beq.n	106c0 <l2cap_recv+0x5c>
   106d6:	2b13      	cmp	r3, #19
   106d8:	d103      	bne.n	106e2 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   106da:	2901      	cmp	r1, #1
   106dc:	d8f0      	bhi.n	106c0 <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   106de:	4b1a      	ldr	r3, [pc, #104]	; (10748 <l2cap_recv+0xe4>)
   106e0:	e7c9      	b.n	10676 <l2cap_recv+0x12>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   106e2:	466d      	mov	r5, sp
   106e4:	b088      	sub	sp, #32
   106e6:	aa02      	add	r2, sp, #8
   106e8:	4918      	ldr	r1, [pc, #96]	; (1074c <l2cap_recv+0xe8>)
   106ea:	4814      	ldr	r0, [pc, #80]	; (1073c <l2cap_recv+0xd8>)
	switch (hdr->code) {
   106ec:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   106f0:	2303      	movs	r3, #3
   106f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   106f6:	f842 3f10 	str.w	r3, [r2, #16]!
   106fa:	f00c f876 	bl	1c7ea <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   106fe:	2202      	movs	r2, #2
   10700:	46ad      	mov	sp, r5
   10702:	7861      	ldrb	r1, [r4, #1]
   10704:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   10706:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   10708:	f00c f872 	bl	1c7f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1070c:	4604      	mov	r4, r0
   1070e:	2800      	cmp	r0, #0
   10710:	d0d6      	beq.n	106c0 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   10712:	2102      	movs	r1, #2
   10714:	3008      	adds	r0, #8
   10716:	f002 fd33 	bl	13180 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1071a:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1071c:	4622      	mov	r2, r4
   1071e:	7003      	strb	r3, [r0, #0]
   10720:	7043      	strb	r3, [r0, #1]
   10722:	2105      	movs	r1, #5
   10724:	4628      	mov	r0, r5
   10726:	9300      	str	r3, [sp, #0]
   10728:	f00c f8ae 	bl	1c888 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1072c:	2800      	cmp	r0, #0
   1072e:	d0c7      	beq.n	106c0 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   10730:	4620      	mov	r0, r4
   10732:	f002 fc03 	bl	12f3c <net_buf_unref>
   10736:	e7c3      	b.n	106c0 <l2cap_recv+0x5c>
   10738:	0002197b 	.word	0x0002197b
   1073c:	0001edb4 	.word	0x0001edb4
   10740:	00021999 	.word	0x00021999
   10744:	000219ba 	.word	0x000219ba
   10748:	000219db 	.word	0x000219db
   1074c:	000219f7 	.word	0x000219f7

00010750 <bt_l2cap_recv>:
{
   10750:	b5b0      	push	{r4, r5, r7, lr}
   10752:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   10754:	898b      	ldrh	r3, [r1, #12]
{
   10756:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   10758:	2b03      	cmp	r3, #3
{
   1075a:	460c      	mov	r4, r1
   1075c:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1075e:	d810      	bhi.n	10782 <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
   10760:	4b17      	ldr	r3, [pc, #92]	; (107c0 <bt_l2cap_recv+0x70>)
   10762:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10766:	617b      	str	r3, [r7, #20]
   10768:	2302      	movs	r3, #2
   1076a:	4816      	ldr	r0, [pc, #88]	; (107c4 <bt_l2cap_recv+0x74>)
   1076c:	613b      	str	r3, [r7, #16]
   1076e:	f107 0210 	add.w	r2, r7, #16
   10772:	f00c f83a 	bl	1c7ea <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   10776:	4620      	mov	r0, r4
   10778:	f002 fbe0 	bl	12f3c <net_buf_unref>
}
   1077c:	3718      	adds	r7, #24
   1077e:	46bd      	mov	sp, r7
   10780:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10782:	2104      	movs	r1, #4
   10784:	f104 0008 	add.w	r0, r4, #8
   10788:	f002 fcdc 	bl	13144 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1078c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1078e:	4628      	mov	r0, r5
   10790:	f00c f893 	bl	1c8ba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   10794:	b978      	cbnz	r0, 107b6 <bt_l2cap_recv+0x66>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   10796:	466d      	mov	r5, sp
   10798:	b088      	sub	sp, #32
   1079a:	466a      	mov	r2, sp
   1079c:	4b0a      	ldr	r3, [pc, #40]	; (107c8 <bt_l2cap_recv+0x78>)
   1079e:	4809      	ldr	r0, [pc, #36]	; (107c4 <bt_l2cap_recv+0x74>)
   107a0:	e9c2 3105 	strd	r3, r1, [r2, #20]
   107a4:	2303      	movs	r3, #3
   107a6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   107aa:	f842 3f10 	str.w	r3, [r2, #16]!
   107ae:	f00c f81c 	bl	1c7ea <z_log_msg_static_create.constprop.0>
   107b2:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   107b4:	e7df      	b.n	10776 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   107b6:	6843      	ldr	r3, [r0, #4]
   107b8:	4621      	mov	r1, r4
   107ba:	695b      	ldr	r3, [r3, #20]
   107bc:	4798      	blx	r3
   107be:	e7da      	b.n	10776 <bt_l2cap_recv+0x26>
   107c0:	00021a1f 	.word	0x00021a1f
   107c4:	0001edb4 	.word	0x0001edb4
   107c8:	00021a3c 	.word	0x00021a3c

000107cc <bt_l2cap_update_conn_param>:
{
   107cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   107ce:	4b17      	ldr	r3, [pc, #92]	; (1082c <bt_l2cap_update_conn_param+0x60>)
{
   107d0:	460e      	mov	r6, r1
	ident++;
   107d2:	7819      	ldrb	r1, [r3, #0]
{
   107d4:	4605      	mov	r5, r0
	ident++;
   107d6:	3101      	adds	r1, #1
   107d8:	b2c9      	uxtb	r1, r1
   107da:	2901      	cmp	r1, #1
   107dc:	bf38      	it	cc
   107de:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   107e0:	2208      	movs	r2, #8
   107e2:	2012      	movs	r0, #18
	ident++;
   107e4:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   107e6:	f00c f803 	bl	1c7f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   107ea:	4604      	mov	r4, r0
   107ec:	b1d0      	cbz	r0, 10824 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   107ee:	2108      	movs	r1, #8
   107f0:	4408      	add	r0, r1
   107f2:	f002 fcc5 	bl	13180 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   107f6:	8833      	ldrh	r3, [r6, #0]
   107f8:	4622      	mov	r2, r4
   107fa:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   107fc:	8873      	ldrh	r3, [r6, #2]
   107fe:	2105      	movs	r1, #5
   10800:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   10802:	88b3      	ldrh	r3, [r6, #4]
   10804:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   10806:	88f3      	ldrh	r3, [r6, #6]
   10808:	80c3      	strh	r3, [r0, #6]
   1080a:	2300      	movs	r3, #0
   1080c:	4628      	mov	r0, r5
   1080e:	9300      	str	r3, [sp, #0]
   10810:	f00c f83a 	bl	1c888 <bt_l2cap_send_cb>
	if (err) {
   10814:	4605      	mov	r5, r0
   10816:	b110      	cbz	r0, 1081e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   10818:	4620      	mov	r0, r4
   1081a:	f002 fb8f 	bl	12f3c <net_buf_unref>
}
   1081e:	4628      	mov	r0, r5
   10820:	b002      	add	sp, #8
   10822:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   10824:	f06f 050b 	mvn.w	r5, #11
   10828:	e7f9      	b.n	1081e <bt_l2cap_update_conn_param+0x52>
   1082a:	bf00      	nop
   1082c:	20009bac 	.word	0x20009bac

00010830 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   10830:	2823      	cmp	r0, #35	; 0x23
   10832:	d81f      	bhi.n	10874 <att_op_get_type+0x44>
   10834:	281a      	cmp	r0, #26
   10836:	d804      	bhi.n	10842 <att_op_get_type+0x12>
   10838:	1e43      	subs	r3, r0, #1
   1083a:	2b18      	cmp	r3, #24
   1083c:	d90e      	bls.n	1085c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1083e:	2006      	movs	r0, #6
   10840:	4770      	bx	lr
	switch (op) {
   10842:	f1a0 031b 	sub.w	r3, r0, #27
   10846:	2b08      	cmp	r3, #8
   10848:	d81e      	bhi.n	10888 <att_op_get_type+0x58>
   1084a:	e8df f003 	tbb	[pc, r3]
   1084e:	1d05      	.short	0x1d05
   10850:	191d231b 	.word	0x191d231b
   10854:	1d25      	.short	0x1d25
   10856:	05          	.byte	0x05
   10857:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   10858:	2003      	movs	r0, #3
   1085a:	4770      	bx	lr
   1085c:	2301      	movs	r3, #1
	switch (op) {
   1085e:	4a0f      	ldr	r2, [pc, #60]	; (1089c <att_op_get_type+0x6c>)
   10860:	4083      	lsls	r3, r0
   10862:	401a      	ands	r2, r3
   10864:	b9c2      	cbnz	r2, 10898 <att_op_get_type+0x68>
   10866:	4a0e      	ldr	r2, [pc, #56]	; (108a0 <att_op_get_type+0x70>)
   10868:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1086a:	2a00      	cmp	r2, #0
   1086c:	bf14      	ite	ne
   1086e:	2001      	movne	r0, #1
   10870:	2006      	moveq	r0, #6
   10872:	4770      	bx	lr
	switch (op) {
   10874:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   10878:	2b52      	cmp	r3, #82	; 0x52
   1087a:	d105      	bne.n	10888 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1087c:	2000      	movs	r0, #0
}
   1087e:	4770      	bx	lr
		return ATT_REQUEST;
   10880:	2001      	movs	r0, #1
   10882:	4770      	bx	lr
		return ATT_INDICATION;
   10884:	2005      	movs	r0, #5
   10886:	4770      	bx	lr
		return ATT_COMMAND;
   10888:	f010 0f40 	tst.w	r0, #64	; 0x40
   1088c:	bf0c      	ite	eq
   1088e:	2006      	moveq	r0, #6
   10890:	2000      	movne	r0, #0
   10892:	4770      	bx	lr
	switch (op) {
   10894:	2004      	movs	r0, #4
   10896:	4770      	bx	lr
		return ATT_RESPONSE;
   10898:	2002      	movs	r0, #2
   1089a:	4770      	bx	lr
   1089c:	028aaaaa 	.word	0x028aaaaa
   108a0:	01455554 	.word	0x01455554

000108a4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   108a4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   108a6:	3804      	subs	r0, #4
   108a8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   108aa:	a901      	add	r1, sp, #4
   108ac:	4802      	ldr	r0, [pc, #8]	; (108b8 <bt_att_released+0x14>)
   108ae:	f006 fd7b 	bl	173a8 <k_mem_slab_free>
}
   108b2:	b003      	add	sp, #12
   108b4:	f85d fb04 	ldr.w	pc, [sp], #4
   108b8:	200084e0 	.word	0x200084e0

000108bc <tx_meta_data_free>:
{
   108bc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   108be:	4604      	mov	r4, r0
   108c0:	b948      	cbnz	r0, 108d6 <tx_meta_data_free+0x1a>
   108c2:	490a      	ldr	r1, [pc, #40]	; (108ec <tx_meta_data_free+0x30>)
   108c4:	480a      	ldr	r0, [pc, #40]	; (108f0 <tx_meta_data_free+0x34>)
   108c6:	23a5      	movs	r3, #165	; 0xa5
   108c8:	4a0a      	ldr	r2, [pc, #40]	; (108f4 <tx_meta_data_free+0x38>)
   108ca:	f00a fcaf 	bl	1b22c <assert_print>
   108ce:	21a5      	movs	r1, #165	; 0xa5
   108d0:	4808      	ldr	r0, [pc, #32]	; (108f4 <tx_meta_data_free+0x38>)
   108d2:	f00a fca4 	bl	1b21e <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   108d6:	2100      	movs	r1, #0
   108d8:	2214      	movs	r2, #20
   108da:	f00b fcc1 	bl	1c260 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   108de:	4621      	mov	r1, r4
}
   108e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   108e4:	4804      	ldr	r0, [pc, #16]	; (108f8 <tx_meta_data_free+0x3c>)
   108e6:	f00d be67 	b.w	1e5b8 <k_queue_append>
   108ea:	bf00      	nop
   108ec:	00021618 	.word	0x00021618
   108f0:	0001f995 	.word	0x0001f995
   108f4:	00021a71 	.word	0x00021a71
   108f8:	20008594 	.word	0x20008594

000108fc <find_type_cb>:
{
   108fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10900:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   10902:	f8d2 a000 	ldr.w	sl, [r2]
{
   10906:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   10908:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1090c:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1090e:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10910:	f642 0301 	movw	r3, #10241	; 0x2801
{
   10914:	4680      	mov	r8, r0
   10916:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10918:	6800      	ldr	r0, [r0, #0]
   1091a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1091e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   10920:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   10924:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10926:	f00b fca7 	bl	1c278 <bt_uuid_cmp>
   1092a:	2800      	cmp	r0, #0
   1092c:	d070      	beq.n	10a10 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1092e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   10932:	f8d8 0000 	ldr.w	r0, [r8]
   10936:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1093a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1093c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   10940:	f00b fc9a 	bl	1c278 <bt_uuid_cmp>
   10944:	b138      	cbz	r0, 10956 <find_type_cb+0x5a>
		if (data->group &&
   10946:	68a3      	ldr	r3, [r4, #8]
   10948:	b11b      	cbz	r3, 10952 <find_type_cb+0x56>
   1094a:	885a      	ldrh	r2, [r3, #2]
   1094c:	42b2      	cmp	r2, r6
   1094e:	d200      	bcs.n	10952 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   10950:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   10952:	2001      	movs	r0, #1
   10954:	e009      	b.n	1096a <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   10956:	6861      	ldr	r1, [r4, #4]
   10958:	4608      	mov	r0, r1
   1095a:	f00b ffc2 	bl	1c8e2 <net_buf_frags_len>
   1095e:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   10962:	1a1b      	subs	r3, r3, r0
   10964:	2b03      	cmp	r3, #3
   10966:	d804      	bhi.n	10972 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   10968:	2000      	movs	r0, #0
}
   1096a:	3744      	adds	r7, #68	; 0x44
   1096c:	46bd      	mov	sp, r7
   1096e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   10972:	4608      	mov	r0, r1
   10974:	f002 fb3e 	bl	12ff4 <net_buf_frag_last>
   10978:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1097a:	6860      	ldr	r0, [r4, #4]
   1097c:	f00b ffb1 	bl	1c8e2 <net_buf_frags_len>
   10980:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   10984:	f105 0908 	add.w	r9, r5, #8
   10988:	ebab 0b00 	sub.w	fp, fp, r0
   1098c:	4648      	mov	r0, r9
   1098e:	f00c fe16 	bl	1d5be <net_buf_simple_tailroom>
   10992:	4558      	cmp	r0, fp
   10994:	d93f      	bls.n	10a16 <find_type_cb+0x11a>
   10996:	6860      	ldr	r0, [r4, #4]
   10998:	f00b ffa3 	bl	1c8e2 <net_buf_frags_len>
   1099c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   109a0:	1a18      	subs	r0, r3, r0
	if (!len) {
   109a2:	b970      	cbnz	r0, 109c2 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   109a4:	6863      	ldr	r3, [r4, #4]
   109a6:	7998      	ldrb	r0, [r3, #6]
   109a8:	f002 f82e 	bl	12a08 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   109ac:	2200      	movs	r2, #0
   109ae:	2300      	movs	r3, #0
   109b0:	f00c fded 	bl	1d58e <net_buf_alloc_fixed>
		if (!frag) {
   109b4:	4605      	mov	r5, r0
   109b6:	2800      	cmp	r0, #0
   109b8:	d0d6      	beq.n	10968 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   109ba:	4601      	mov	r1, r0
   109bc:	6860      	ldr	r0, [r4, #4]
   109be:	f002 fb5f 	bl	13080 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   109c2:	2300      	movs	r3, #0
   109c4:	9300      	str	r3, [sp, #0]
   109c6:	4641      	mov	r1, r8
   109c8:	f8d8 a004 	ldr.w	sl, [r8, #4]
   109cc:	2310      	movs	r3, #16
   109ce:	6878      	ldr	r0, [r7, #4]
   109d0:	f107 0208 	add.w	r2, r7, #8
   109d4:	47d0      	blx	sl
	if (read < 0) {
   109d6:	f1b0 0800 	subs.w	r8, r0, #0
   109da:	db19      	blt.n	10a10 <find_type_cb+0x114>
	if (read != data->value_len) {
   109dc:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   109de:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   109e0:	4542      	cmp	r2, r8
   109e2:	d03f      	beq.n	10a64 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   109e4:	4601      	mov	r1, r0
   109e6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   109ea:	f00b fc73 	bl	1c2d4 <bt_uuid_create>
   109ee:	b9b0      	cbnz	r0, 10a1e <find_type_cb+0x122>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   109f0:	466d      	mov	r5, sp
   109f2:	b088      	sub	sp, #32
   109f4:	7c23      	ldrb	r3, [r4, #16]
   109f6:	aa02      	add	r2, sp, #8
   109f8:	491d      	ldr	r1, [pc, #116]	; (10a70 <find_type_cb+0x174>)
   109fa:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   109fe:	2303      	movs	r3, #3
   10a00:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10a04:	481b      	ldr	r0, [pc, #108]	; (10a74 <find_type_cb+0x178>)
   10a06:	f842 3f10 	str.w	r3, [r2, #16]!
   10a0a:	f00c f855 	bl	1cab8 <z_log_msg_static_create.constprop.0>
   10a0e:	46ad      	mov	sp, r5
	data->group = NULL;
   10a10:	2300      	movs	r3, #0
   10a12:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   10a14:	e79d      	b.n	10952 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   10a16:	4648      	mov	r0, r9
   10a18:	f00c fdd1 	bl	1d5be <net_buf_simple_tailroom>
   10a1c:	e7c1      	b.n	109a2 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   10a1e:	fa5f f288 	uxtb.w	r2, r8
   10a22:	f107 0108 	add.w	r1, r7, #8
   10a26:	f107 0018 	add.w	r0, r7, #24
   10a2a:	f00b fc53 	bl	1c2d4 <bt_uuid_create>
   10a2e:	b930      	cbnz	r0, 10a3e <find_type_cb+0x142>
			BT_WARN("Unable to create UUID: size %d", read);
   10a30:	466d      	mov	r5, sp
   10a32:	b088      	sub	sp, #32
   10a34:	aa02      	add	r2, sp, #8
   10a36:	4b10      	ldr	r3, [pc, #64]	; (10a78 <find_type_cb+0x17c>)
   10a38:	e9c2 3805 	strd	r3, r8, [r2, #20]
   10a3c:	e7df      	b.n	109fe <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   10a3e:	f107 0118 	add.w	r1, r7, #24
   10a42:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   10a46:	f00b fc17 	bl	1c278 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   10a4a:	2800      	cmp	r0, #0
   10a4c:	d1e0      	bne.n	10a10 <find_type_cb+0x114>
	data->err = 0x00;
   10a4e:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   10a50:	2104      	movs	r1, #4
   10a52:	7463      	strb	r3, [r4, #17]
   10a54:	f105 0008 	add.w	r0, r5, #8
   10a58:	f002 fb92 	bl	13180 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   10a5c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   10a5e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   10a60:	68a3      	ldr	r3, [r4, #8]
   10a62:	e775      	b.n	10950 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   10a64:	f107 0108 	add.w	r1, r7, #8
   10a68:	f00b fbdf 	bl	1c22a <memcmp>
   10a6c:	e7ed      	b.n	10a4a <find_type_cb+0x14e>
   10a6e:	bf00      	nop
   10a70:	00021aa0 	.word	0x00021aa0
   10a74:	0001ed74 	.word	0x0001ed74
   10a78:	00021abf 	.word	0x00021abf

00010a7c <chan_send>:
{
   10a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a80:	4606      	mov	r6, r0
   10a82:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   10a84:	f8d1 9014 	ldr.w	r9, [r1, #20]
	hdr = (void *)buf->data;
   10a88:	688b      	ldr	r3, [r1, #8]
{
   10a8a:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   10a8c:	2102      	movs	r1, #2
   10a8e:	3098      	adds	r0, #152	; 0x98
   10a90:	f00b ff41 	bl	1c916 <atomic_test_bit>
   10a94:	2800      	cmp	r0, #0
   10a96:	d053      	beq.n	10b40 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   10a98:	781b      	ldrb	r3, [r3, #0]
   10a9a:	2bd2      	cmp	r3, #210	; 0xd2
   10a9c:	d11a      	bne.n	10ad4 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   10a9e:	6833      	ldr	r3, [r6, #0]
   10aa0:	4621      	mov	r1, r4
   10aa2:	6818      	ldr	r0, [r3, #0]
   10aa4:	f00c fd6d 	bl	1d582 <bt_smp_sign>
		if (err) {
   10aa8:	4605      	mov	r5, r0
   10aaa:	b198      	cbz	r0, 10ad4 <chan_send+0x58>
			BT_ERR("Error signing data");
   10aac:	4b26      	ldr	r3, [pc, #152]	; (10b48 <chan_send+0xcc>)
   10aae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ab2:	9307      	str	r3, [sp, #28]
   10ab4:	2302      	movs	r3, #2
   10ab6:	4825      	ldr	r0, [pc, #148]	; (10b4c <chan_send+0xd0>)
   10ab8:	aa06      	add	r2, sp, #24
   10aba:	9306      	str	r3, [sp, #24]
   10abc:	f00b fffc 	bl	1cab8 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   10ac0:	6960      	ldr	r0, [r4, #20]
   10ac2:	f7ff fefb 	bl	108bc <tx_meta_data_free>
			net_buf_unref(buf);
   10ac6:	4620      	mov	r0, r4
   10ac8:	f002 fa38 	bl	12f3c <net_buf_unref>
}
   10acc:	4628      	mov	r0, r5
   10ace:	b009      	add	sp, #36	; 0x24
   10ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   10ad4:	f104 0008 	add.w	r0, r4, #8
   10ad8:	f00c fd6d 	bl	1d5b6 <net_buf_simple_headroom>
	state->len = buf->len;
   10adc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	data->att_chan = chan;
   10ae0:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   10ae4:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   10ae6:	4607      	mov	r7, r0
   10ae8:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   10aea:	68a3      	ldr	r3, [r4, #8]
   10aec:	7818      	ldrb	r0, [r3, #0]
   10aee:	f7ff fe9f 	bl	10830 <att_op_get_type>
   10af2:	2805      	cmp	r0, #5
   10af4:	4605      	mov	r5, r0
	switch (op_type) {
   10af6:	d813      	bhi.n	10b20 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   10af8:	4b15      	ldr	r3, [pc, #84]	; (10b50 <chan_send+0xd4>)
   10afa:	4622      	mov	r2, r4
   10afc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10b00:	2104      	movs	r1, #4
   10b02:	4630      	mov	r0, r6
   10b04:	f8cd 9000 	str.w	r9, [sp]
   10b08:	f00b febe 	bl	1c888 <bt_l2cap_send_cb>
	if (err) {
   10b0c:	4605      	mov	r5, r0
   10b0e:	2800      	cmp	r0, #0
   10b10:	d0dc      	beq.n	10acc <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   10b12:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   10b14:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   10b18:	fa13 f787 	uxtah	r7, r3, r7
   10b1c:	60a7      	str	r7, [r4, #8]
}
   10b1e:	e7d5      	b.n	10acc <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   10b20:	f240 2357 	movw	r3, #599	; 0x257
   10b24:	4a0b      	ldr	r2, [pc, #44]	; (10b54 <chan_send+0xd8>)
   10b26:	490c      	ldr	r1, [pc, #48]	; (10b58 <chan_send+0xdc>)
   10b28:	480c      	ldr	r0, [pc, #48]	; (10b5c <chan_send+0xe0>)
   10b2a:	f00a fb7f 	bl	1b22c <assert_print>
   10b2e:	4629      	mov	r1, r5
   10b30:	480b      	ldr	r0, [pc, #44]	; (10b60 <chan_send+0xe4>)
   10b32:	f00a fb7b 	bl	1b22c <assert_print>
   10b36:	f240 2157 	movw	r1, #599	; 0x257
   10b3a:	4806      	ldr	r0, [pc, #24]	; (10b54 <chan_send+0xd8>)
   10b3c:	f00a fb6f 	bl	1b21e <assert_post_action>
		return -EINVAL;
   10b40:	f06f 0515 	mvn.w	r5, #21
   10b44:	e7c2      	b.n	10acc <chan_send+0x50>
   10b46:	bf00      	nop
   10b48:	00021ade 	.word	0x00021ade
   10b4c:	0001ed74 	.word	0x0001ed74
   10b50:	0001f2a4 	.word	0x0001f2a4
   10b54:	00021a71 	.word	0x00021a71
   10b58:	00022960 	.word	0x00022960
   10b5c:	0001f995 	.word	0x0001f995
   10b60:	00021af1 	.word	0x00021af1

00010b64 <bt_att_chan_req_send>:
{
   10b64:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   10b66:	b958      	cbnz	r0, 10b80 <bt_att_chan_req_send+0x1c>
   10b68:	4919      	ldr	r1, [pc, #100]	; (10bd0 <bt_att_chan_req_send+0x6c>)
   10b6a:	f44f 7346 	mov.w	r3, #792	; 0x318
   10b6e:	4a19      	ldr	r2, [pc, #100]	; (10bd4 <bt_att_chan_req_send+0x70>)
   10b70:	4819      	ldr	r0, [pc, #100]	; (10bd8 <bt_att_chan_req_send+0x74>)
   10b72:	f00a fb5b 	bl	1b22c <assert_print>
   10b76:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   10b7a:	4816      	ldr	r0, [pc, #88]	; (10bd4 <bt_att_chan_req_send+0x70>)
   10b7c:	f00a fb4f 	bl	1b21e <assert_post_action>
   10b80:	b949      	cbnz	r1, 10b96 <bt_att_chan_req_send+0x32>
   10b82:	4916      	ldr	r1, [pc, #88]	; (10bdc <bt_att_chan_req_send+0x78>)
   10b84:	f240 3319 	movw	r3, #793	; 0x319
   10b88:	4a12      	ldr	r2, [pc, #72]	; (10bd4 <bt_att_chan_req_send+0x70>)
   10b8a:	4813      	ldr	r0, [pc, #76]	; (10bd8 <bt_att_chan_req_send+0x74>)
   10b8c:	f00a fb4e 	bl	1b22c <assert_print>
   10b90:	f240 3119 	movw	r1, #793	; 0x319
   10b94:	e7f1      	b.n	10b7a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   10b96:	684a      	ldr	r2, [r1, #4]
   10b98:	b94a      	cbnz	r2, 10bae <bt_att_chan_req_send+0x4a>
   10b9a:	4911      	ldr	r1, [pc, #68]	; (10be0 <bt_att_chan_req_send+0x7c>)
   10b9c:	f240 331a 	movw	r3, #794	; 0x31a
   10ba0:	4a0c      	ldr	r2, [pc, #48]	; (10bd4 <bt_att_chan_req_send+0x70>)
   10ba2:	480d      	ldr	r0, [pc, #52]	; (10bd8 <bt_att_chan_req_send+0x74>)
   10ba4:	f00a fb42 	bl	1b22c <assert_print>
   10ba8:	f240 311a 	movw	r1, #794	; 0x31a
   10bac:	e7e5      	b.n	10b7a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   10bae:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   10bb2:	b14b      	cbz	r3, 10bc8 <bt_att_chan_req_send+0x64>
   10bb4:	490b      	ldr	r1, [pc, #44]	; (10be4 <bt_att_chan_req_send+0x80>)
   10bb6:	f240 331b 	movw	r3, #795	; 0x31b
   10bba:	4a06      	ldr	r2, [pc, #24]	; (10bd4 <bt_att_chan_req_send+0x70>)
   10bbc:	4806      	ldr	r0, [pc, #24]	; (10bd8 <bt_att_chan_req_send+0x74>)
   10bbe:	f00a fb35 	bl	1b22c <assert_print>
   10bc2:	f240 311b 	movw	r1, #795	; 0x31b
   10bc6:	e7d8      	b.n	10b7a <bt_att_chan_req_send+0x16>
}
   10bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   10bcc:	f00b bf77 	b.w	1cabe <chan_req_send>
   10bd0:	00021b0a 	.word	0x00021b0a
   10bd4:	00021a71 	.word	0x00021a71
   10bd8:	0001f995 	.word	0x0001f995
   10bdc:	00021b20 	.word	0x00021b20
   10be0:	00021b0f 	.word	0x00021b0f
   10be4:	00021b19 	.word	0x00021b19

00010be8 <att_get>:
{
   10be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   10bea:	7a83      	ldrb	r3, [r0, #10]
   10bec:	2b07      	cmp	r3, #7
   10bee:	d00d      	beq.n	10c0c <att_get+0x24>
		BT_WARN("Not connected");
   10bf0:	4b18      	ldr	r3, [pc, #96]	; (10c54 <att_get+0x6c>)
   10bf2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10bf6:	9305      	str	r3, [sp, #20]
   10bf8:	2302      	movs	r3, #2
   10bfa:	aa04      	add	r2, sp, #16
   10bfc:	9304      	str	r3, [sp, #16]
		BT_ERR("Unable to find ATT channel");
   10bfe:	4816      	ldr	r0, [pc, #88]	; (10c58 <att_get+0x70>)
   10c00:	f00b ff5a 	bl	1cab8 <z_log_msg_static_create.constprop.0>
		return NULL;
   10c04:	2000      	movs	r0, #0
}
   10c06:	b007      	add	sp, #28
   10c08:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   10c0c:	2104      	movs	r1, #4
   10c0e:	f00b fe54 	bl	1c8ba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   10c12:	4603      	mov	r3, r0
   10c14:	b938      	cbnz	r0, 10c26 <att_get+0x3e>
		BT_ERR("Unable to find ATT channel");
   10c16:	4b11      	ldr	r3, [pc, #68]	; (10c5c <att_get+0x74>)
   10c18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c1c:	9305      	str	r3, [sp, #20]
   10c1e:	2302      	movs	r3, #2
   10c20:	aa04      	add	r2, sp, #16
   10c22:	9304      	str	r3, [sp, #16]
   10c24:	e7eb      	b.n	10bfe <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   10c26:	2102      	movs	r1, #2
   10c28:	3094      	adds	r0, #148	; 0x94
   10c2a:	f00b fe74 	bl	1c916 <atomic_test_bit>
   10c2e:	b970      	cbnz	r0, 10c4e <att_get+0x66>
   10c30:	490b      	ldr	r1, [pc, #44]	; (10c60 <att_get+0x78>)
   10c32:	f640 332e 	movw	r3, #2862	; 0xb2e
   10c36:	4a0b      	ldr	r2, [pc, #44]	; (10c64 <att_get+0x7c>)
   10c38:	480b      	ldr	r0, [pc, #44]	; (10c68 <att_get+0x80>)
   10c3a:	f00a faf7 	bl	1b22c <assert_print>
   10c3e:	480b      	ldr	r0, [pc, #44]	; (10c6c <att_get+0x84>)
   10c40:	f00a faf4 	bl	1b22c <assert_print>
   10c44:	f640 312e 	movw	r1, #2862	; 0xb2e
   10c48:	4806      	ldr	r0, [pc, #24]	; (10c64 <att_get+0x7c>)
   10c4a:	f00a fae8 	bl	1b21e <assert_post_action>
	return att_chan->att;
   10c4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   10c52:	e7d8      	b.n	10c06 <att_get+0x1e>
   10c54:	00021b24 	.word	0x00021b24
   10c58:	0001ed74 	.word	0x0001ed74
   10c5c:	00021b32 	.word	0x00021b32
   10c60:	00021b4d 	.word	0x00021b4d
   10c64:	00021a71 	.word	0x00021a71
   10c68:	0001f995 	.word	0x0001f995
   10c6c:	00021b7d 	.word	0x00021b7d

00010c70 <bt_att_connected>:
{
   10c70:	b510      	push	{r4, lr}
   10c72:	4604      	mov	r4, r0
   10c74:	f100 0394 	add.w	r3, r0, #148	; 0x94
   10c78:	e8d3 1fef 	ldaex	r1, [r3]
   10c7c:	f041 0104 	orr.w	r1, r1, #4
   10c80:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10c84:	2a00      	cmp	r2, #0
   10c86:	d1f7      	bne.n	10c78 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10c88:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   10c8a:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10c8c:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   10c8e:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   10c90:	f00b fecf 	bl	1ca32 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   10c94:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   10c98:	4903      	ldr	r1, [pc, #12]	; (10ca8 <bt_att_connected+0x38>)
   10c9a:	f007 fc9f 	bl	185dc <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   10c9e:	6820      	ldr	r0, [r4, #0]
}
   10ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   10ca4:	f001 be42 	b.w	1292c <bt_gatt_connected>
   10ca8:	00011975 	.word	0x00011975

00010cac <read_group_cb>:
{
   10cac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10cb0:	f04f 0800 	mov.w	r8, #0
   10cb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   10cb8:	4605      	mov	r5, r0
   10cba:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10cbc:	6800      	ldr	r0, [r0, #0]
   10cbe:	a902      	add	r1, sp, #8
{
   10cc0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   10cc2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10cc4:	f88d 8008 	strb.w	r8, [sp, #8]
   10cc8:	f8ad 300a 	strh.w	r3, [sp, #10]
   10ccc:	f00b fad4 	bl	1c278 <bt_uuid_cmp>
   10cd0:	b1a0      	cbz	r0, 10cfc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   10cd2:	f642 0301 	movw	r3, #10241	; 0x2801
   10cd6:	6828      	ldr	r0, [r5, #0]
   10cd8:	a903      	add	r1, sp, #12
   10cda:	f88d 800c 	strb.w	r8, [sp, #12]
   10cde:	f8ad 300e 	strh.w	r3, [sp, #14]
   10ce2:	f00b fac9 	bl	1c278 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10ce6:	b148      	cbz	r0, 10cfc <read_group_cb+0x50>
		if (data->group &&
   10ce8:	6923      	ldr	r3, [r4, #16]
   10cea:	b11b      	cbz	r3, 10cf4 <read_group_cb+0x48>
   10cec:	885a      	ldrh	r2, [r3, #2]
   10cee:	42b2      	cmp	r2, r6
   10cf0:	d200      	bcs.n	10cf4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   10cf2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   10cf4:	2001      	movs	r0, #1
}
   10cf6:	b004      	add	sp, #16
   10cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10cfc:	6861      	ldr	r1, [r4, #4]
   10cfe:	6828      	ldr	r0, [r5, #0]
   10d00:	f00b faba 	bl	1c278 <bt_uuid_cmp>
   10d04:	b110      	cbz	r0, 10d0c <read_group_cb+0x60>
		data->group = NULL;
   10d06:	2300      	movs	r3, #0
   10d08:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   10d0a:	e7f3      	b.n	10cf4 <read_group_cb+0x48>
	if (data->rsp->len &&
   10d0c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   10d0e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   10d10:	781a      	ldrb	r2, [r3, #0]
   10d12:	b132      	cbz	r2, 10d22 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   10d14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   10d16:	8981      	ldrh	r1, [r0, #12]
   10d18:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   10d1a:	4293      	cmp	r3, r2
   10d1c:	da01      	bge.n	10d22 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   10d1e:	2000      	movs	r0, #0
   10d20:	e7e9      	b.n	10cf6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   10d22:	2104      	movs	r1, #4
   10d24:	3008      	adds	r0, #8
   10d26:	f002 fa2b 	bl	13180 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   10d2a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   10d2c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   10d2e:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   10d30:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   10d32:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   10d34:	4b07      	ldr	r3, [pc, #28]	; (10d54 <read_group_cb+0xa8>)
   10d36:	9401      	str	r4, [sp, #4]
   10d38:	9300      	str	r3, [sp, #0]
   10d3a:	4638      	mov	r0, r7
   10d3c:	2300      	movs	r3, #0
   10d3e:	68a2      	ldr	r2, [r4, #8]
   10d40:	f00b fefe 	bl	1cb40 <att_chan_read>
	if (read < 0) {
   10d44:	2800      	cmp	r0, #0
   10d46:	dbea      	blt.n	10d1e <read_group_cb+0x72>
	if (!data->group) {
   10d48:	6920      	ldr	r0, [r4, #16]
   10d4a:	3800      	subs	r0, #0
   10d4c:	bf18      	it	ne
   10d4e:	2001      	movne	r0, #1
   10d50:	e7d1      	b.n	10cf6 <read_group_cb+0x4a>
   10d52:	bf00      	nop
   10d54:	0001ca99 	.word	0x0001ca99

00010d58 <read_type_cb>:
{
   10d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   10d5c:	6817      	ldr	r7, [r2, #0]
{
   10d5e:	4605      	mov	r5, r0
   10d60:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10d62:	6800      	ldr	r0, [r0, #0]
   10d64:	6851      	ldr	r1, [r2, #4]
{
   10d66:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   10d68:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10d6a:	f00b fa85 	bl	1c278 <bt_uuid_cmp>
   10d6e:	4681      	mov	r9, r0
   10d70:	2800      	cmp	r0, #0
   10d72:	d13c      	bne.n	10dee <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   10d74:	4630      	mov	r0, r6
   10d76:	2295      	movs	r2, #149	; 0x95
   10d78:	4629      	mov	r1, r5
   10d7a:	f00c fb77 	bl	1d46c <bt_gatt_check_perm>
   10d7e:	4606      	mov	r6, r0
   10d80:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   10d82:	b140      	cbz	r0, 10d96 <read_type_cb+0x3e>
		if (data->rsp->len) {
   10d84:	68e3      	ldr	r3, [r4, #12]
   10d86:	781b      	ldrb	r3, [r3, #0]
   10d88:	b10b      	cbz	r3, 10d8e <read_type_cb+0x36>
			data->err = 0x00;
   10d8a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   10d8e:	2000      	movs	r0, #0
}
   10d90:	b003      	add	sp, #12
   10d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   10d96:	68a0      	ldr	r0, [r4, #8]
   10d98:	f002 f92c 	bl	12ff4 <net_buf_frag_last>
   10d9c:	2102      	movs	r1, #2
   10d9e:	3008      	adds	r0, #8
   10da0:	f002 f9ee 	bl	13180 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10da4:	4b13      	ldr	r3, [pc, #76]	; (10df4 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   10da6:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   10da8:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10dac:	9300      	str	r3, [sp, #0]
   10dae:	9401      	str	r4, [sp, #4]
   10db0:	4633      	mov	r3, r6
   10db2:	4629      	mov	r1, r5
   10db4:	4638      	mov	r0, r7
   10db6:	68a2      	ldr	r2, [r4, #8]
   10db8:	f00b fec2 	bl	1cb40 <att_chan_read>
	if (read < 0) {
   10dbc:	2800      	cmp	r0, #0
   10dbe:	da07      	bge.n	10dd0 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   10dc0:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   10dc4:	bf32      	itee	cc
   10dc6:	200e      	movcc	r0, #14
		return -err;
   10dc8:	4240      	negcs	r0, r0
   10dca:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   10dcc:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   10dce:	e7de      	b.n	10d8e <read_type_cb+0x36>
	if (!data->item) {
   10dd0:	6923      	ldr	r3, [r4, #16]
   10dd2:	2b00      	cmp	r3, #0
   10dd4:	d0db      	beq.n	10d8e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   10dd6:	68a0      	ldr	r0, [r4, #8]
   10dd8:	f00b fd83 	bl	1c8e2 <net_buf_frags_len>
   10ddc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   10dde:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   10de0:	68e3      	ldr	r3, [r4, #12]
   10de2:	781b      	ldrb	r3, [r3, #0]
   10de4:	4298      	cmp	r0, r3
   10de6:	bf94      	ite	ls
   10de8:	2000      	movls	r0, #0
   10dea:	2001      	movhi	r0, #1
   10dec:	e7d0      	b.n	10d90 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   10dee:	2001      	movs	r0, #1
   10df0:	e7ce      	b.n	10d90 <read_type_cb+0x38>
   10df2:	bf00      	nop
   10df4:	0001c8f3 	.word	0x0001c8f3

00010df8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   10df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dfc:	b082      	sub	sp, #8
   10dfe:	af00      	add	r7, sp, #0
   10e00:	4604      	mov	r4, r0
   10e02:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   10e04:	2200      	movs	r2, #0
   10e06:	2300      	movs	r3, #0
   10e08:	4639      	mov	r1, r7
   10e0a:	4838      	ldr	r0, [pc, #224]	; (10eec <bt_att_accept+0xf4>)
   10e0c:	f006 fa62 	bl	172d4 <k_mem_slab_alloc>
   10e10:	4605      	mov	r5, r0
   10e12:	b1a8      	cbz	r0, 10e40 <bt_att_accept+0x48>
		BT_ERR("No available ATT context for conn %p", conn);
   10e14:	466d      	mov	r5, sp
   10e16:	b088      	sub	sp, #32
   10e18:	466a      	mov	r2, sp
   10e1a:	4b35      	ldr	r3, [pc, #212]	; (10ef0 <bt_att_accept+0xf8>)
   10e1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10e20:	e9c2 3405 	strd	r3, r4, [r2, #20]
   10e24:	2303      	movs	r3, #3
   10e26:	4833      	ldr	r0, [pc, #204]	; (10ef4 <bt_att_accept+0xfc>)
   10e28:	f842 3f10 	str.w	r3, [r2, #16]!
   10e2c:	f00b fe44 	bl	1cab8 <z_log_msg_static_create.constprop.0>
   10e30:	46ad      	mov	sp, r5
		return -ENOMEM;
   10e32:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   10e36:	4628      	mov	r0, r5
   10e38:	3708      	adds	r7, #8
   10e3a:	46bd      	mov	sp, r7
   10e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   10e40:	f008 fe70 	bl	19b24 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   10e44:	4b2c      	ldr	r3, [pc, #176]	; (10ef8 <bt_att_accept+0x100>)
	(void)memset(att, 0, sizeof(*att));
   10e46:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   10e48:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   10e4a:	2230      	movs	r2, #48	; 0x30
   10e4c:	6838      	ldr	r0, [r7, #0]
   10e4e:	f00b fa07 	bl	1c260 <memset>
	att->conn = conn;
   10e52:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10e54:	2200      	movs	r2, #0
	att->conn = conn;
   10e56:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   10e58:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10e5a:	2300      	movs	r3, #0
	list->tail = NULL;
   10e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   10e60:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   10e64:	4825      	ldr	r0, [pc, #148]	; (10efc <bt_att_accept+0x104>)
   10e66:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   10e68:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10e6a:	f006 fa33 	bl	172d4 <k_mem_slab_alloc>
   10e6e:	4605      	mov	r5, r0
   10e70:	b180      	cbz	r0, 10e94 <bt_att_accept+0x9c>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   10e72:	6823      	ldr	r3, [r4, #0]
   10e74:	466c      	mov	r4, sp
   10e76:	b088      	sub	sp, #32
   10e78:	466a      	mov	r2, sp
   10e7a:	4921      	ldr	r1, [pc, #132]	; (10f00 <bt_att_accept+0x108>)
   10e7c:	481d      	ldr	r0, [pc, #116]	; (10ef4 <bt_att_accept+0xfc>)
   10e7e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10e82:	2303      	movs	r3, #3
   10e84:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10e88:	f842 3f10 	str.w	r3, [r2, #16]!
   10e8c:	f00b fe14 	bl	1cab8 <z_log_msg_static_create.constprop.0>
   10e90:	46a5      	mov	sp, r4
	if (!chan) {
   10e92:	e7ce      	b.n	10e32 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   10e94:	4601      	mov	r1, r0
   10e96:	22f8      	movs	r2, #248	; 0xf8
   10e98:	6878      	ldr	r0, [r7, #4]
   10e9a:	f00b f9e1 	bl	1c260 <memset>
	chan->chan.chan.ops = &ops;
   10e9e:	6878      	ldr	r0, [r7, #4]
   10ea0:	4b18      	ldr	r3, [pc, #96]	; (10f04 <bt_att_accept+0x10c>)
   10ea2:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   10ea4:	30a0      	adds	r0, #160	; 0xa0
   10ea6:	f00d fb7a 	bl	1e59e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10eaa:	687b      	ldr	r3, [r7, #4]
   10eac:	3398      	adds	r3, #152	; 0x98
   10eae:	e8d3 2fef 	ldaex	r2, [r3]
   10eb2:	e8c3 5fe1 	stlex	r1, r5, [r3]
   10eb6:	2900      	cmp	r1, #0
   10eb8:	d1f9      	bne.n	10eae <bt_att_accept+0xb6>
	chan->att = att;
   10eba:	687b      	ldr	r3, [r7, #4]
   10ebc:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   10ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   10ec0:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   10ec4:	b91b      	cbnz	r3, 10ece <bt_att_accept+0xd6>
   10ec6:	f104 000c 	add.w	r0, r4, #12
   10eca:	f00d fb68 	bl	1e59e <z_impl_k_queue_init>
	return list->head;
   10ece:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   10ed0:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   10ed4:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   10ed8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   10eda:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   10edc:	b902      	cbnz	r2, 10ee0 <bt_att_accept+0xe8>
	list->tail = node;
   10ede:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   10ee0:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   10ee2:	2b00      	cmp	r3, #0
   10ee4:	d0a5      	beq.n	10e32 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   10ee6:	3304      	adds	r3, #4
   10ee8:	6033      	str	r3, [r6, #0]
	return 0;
   10eea:	e7a4      	b.n	10e36 <bt_att_accept+0x3e>
   10eec:	200084c0 	.word	0x200084c0
   10ef0:	00021b99 	.word	0x00021b99
   10ef4:	0001ed74 	.word	0x0001ed74
   10ef8:	200097e8 	.word	0x200097e8
   10efc:	200084e0 	.word	0x200084e0
   10f00:	00021bbe 	.word	0x00021bbe
   10f04:	20008218 	.word	0x20008218

00010f08 <bt_att_chan_create_pdu>:
{
   10f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10f0c:	b086      	sub	sp, #24
   10f0e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10f10:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   10f12:	1c53      	adds	r3, r2, #1
   10f14:	428b      	cmp	r3, r1
{
   10f16:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10f18:	d915      	bls.n	10f46 <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   10f1a:	466c      	mov	r4, sp
   10f1c:	b088      	sub	sp, #32
   10f1e:	466a      	mov	r2, sp
   10f20:	4829      	ldr	r0, [pc, #164]	; (10fc8 <bt_att_chan_create_pdu+0xc0>)
   10f22:	61d3      	str	r3, [r2, #28]
   10f24:	2304      	movs	r3, #4
   10f26:	e9c2 0105 	strd	r0, r1, [r2, #20]
   10f2a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10f2e:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   10f32:	4826      	ldr	r0, [pc, #152]	; (10fcc <bt_att_chan_create_pdu+0xc4>)
   10f34:	f00b fdc0 	bl	1cab8 <z_log_msg_static_create.constprop.0>
   10f38:	46a5      	mov	sp, r4
		return NULL;
   10f3a:	2400      	movs	r4, #0
}
   10f3c:	4620      	mov	r0, r4
   10f3e:	3718      	adds	r7, #24
   10f40:	46bd      	mov	sp, r7
   10f42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   10f46:	4628      	mov	r0, r5
   10f48:	f7ff fc72 	bl	10830 <att_op_get_type>
   10f4c:	2802      	cmp	r0, #2
   10f4e:	d019      	beq.n	10f84 <bt_att_chan_create_pdu+0x7c>
   10f50:	2804      	cmp	r0, #4
   10f52:	d017      	beq.n	10f84 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   10f54:	f04f 38ff 	mov.w	r8, #4294967295
   10f58:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   10f5c:	2100      	movs	r1, #0
   10f5e:	4642      	mov	r2, r8
   10f60:	464b      	mov	r3, r9
   10f62:	4608      	mov	r0, r1
   10f64:	f00b fc8d 	bl	1c882 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   10f68:	4604      	mov	r4, r0
   10f6a:	b980      	cbnz	r0, 10f8e <bt_att_chan_create_pdu+0x86>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   10f6c:	466c      	mov	r4, sp
   10f6e:	b088      	sub	sp, #32
   10f70:	466a      	mov	r2, sp
   10f72:	4b17      	ldr	r3, [pc, #92]	; (10fd0 <bt_att_chan_create_pdu+0xc8>)
   10f74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10f78:	e9c2 3505 	strd	r3, r5, [r2, #20]
   10f7c:	2303      	movs	r3, #3
   10f7e:	f842 3f10 	str.w	r3, [r2, #16]!
   10f82:	e7d6      	b.n	10f32 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   10f84:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   10f88:	f04f 0900 	mov.w	r9, #0
   10f8c:	e7e6      	b.n	10f5c <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   10f8e:	4811      	ldr	r0, [pc, #68]	; (10fd4 <bt_att_chan_create_pdu+0xcc>)
   10f90:	4642      	mov	r2, r8
   10f92:	464b      	mov	r3, r9
   10f94:	f006 fe34 	bl	17c00 <z_impl_k_queue_get>
	if (!data) {
   10f98:	b970      	cbnz	r0, 10fb8 <bt_att_chan_create_pdu+0xb0>
		BT_WARN("Unable to allocate ATT TX meta");
   10f9a:	4b0f      	ldr	r3, [pc, #60]	; (10fd8 <bt_att_chan_create_pdu+0xd0>)
   10f9c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10fa0:	617b      	str	r3, [r7, #20]
   10fa2:	2302      	movs	r3, #2
   10fa4:	4809      	ldr	r0, [pc, #36]	; (10fcc <bt_att_chan_create_pdu+0xc4>)
   10fa6:	613b      	str	r3, [r7, #16]
   10fa8:	f107 0210 	add.w	r2, r7, #16
   10fac:	f00b fd84 	bl	1cab8 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   10fb0:	4620      	mov	r0, r4
   10fb2:	f001 ffc3 	bl	12f3c <net_buf_unref>
		return NULL;
   10fb6:	e7c0      	b.n	10f3a <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   10fb8:	6160      	str	r0, [r4, #20]
   10fba:	2101      	movs	r1, #1
   10fbc:	f104 0008 	add.w	r0, r4, #8
   10fc0:	f002 f8de 	bl	13180 <net_buf_simple_add>
	hdr->code = op;
   10fc4:	7005      	strb	r5, [r0, #0]
	return buf;
   10fc6:	e7b9      	b.n	10f3c <bt_att_chan_create_pdu+0x34>
   10fc8:	00021be3 	.word	0x00021be3
   10fcc:	0001ed74 	.word	0x0001ed74
   10fd0:	000218d4 	.word	0x000218d4
   10fd4:	20008594 	.word	0x20008594
   10fd8:	00021c08 	.word	0x00021c08

00010fdc <bt_att_recv>:
{
   10fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   10fe2:	898b      	ldrh	r3, [r1, #12]
{
   10fe4:	4682      	mov	sl, r0
   10fe6:	460c      	mov	r4, r1
   10fe8:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   10fea:	b97b      	cbnz	r3, 1100c <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   10fec:	4b4c      	ldr	r3, [pc, #304]	; (11120 <bt_att_recv+0x144>)
   10fee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ff2:	617b      	str	r3, [r7, #20]
   10ff4:	2302      	movs	r3, #2
   10ff6:	f107 0210 	add.w	r2, r7, #16
   10ffa:	613b      	str	r3, [r7, #16]
			BT_WARN("Ignoring unexpected request");
   10ffc:	4849      	ldr	r0, [pc, #292]	; (11124 <bt_att_recv+0x148>)
   10ffe:	f00b fd5b 	bl	1cab8 <z_log_msg_static_create.constprop.0>
}
   11002:	2000      	movs	r0, #0
   11004:	371c      	adds	r7, #28
   11006:	46bd      	mov	sp, r7
   11008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1100c:	2101      	movs	r1, #1
   1100e:	f104 0008 	add.w	r0, r4, #8
   11012:	f002 f897 	bl	13144 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11016:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1101a:	4605      	mov	r5, r0
   1101c:	2b00      	cmp	r3, #0
   1101e:	d0f0      	beq.n	11002 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11020:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11022:	7801      	ldrb	r1, [r0, #0]
   11024:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11128 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11028:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   1102c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   11030:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   11034:	4288      	cmp	r0, r1
   11036:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1103a:	d114      	bne.n	11066 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1103c:	f892 9002 	ldrb.w	r9, [r2, #2]
   11040:	f1b9 0f01 	cmp.w	r9, #1
   11044:	d131      	bne.n	110aa <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   11046:	2100      	movs	r1, #0
   11048:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   1104c:	f00b fe1e 	bl	1cc8c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   11050:	2800      	cmp	r0, #0
   11052:	d035      	beq.n	110c0 <bt_att_recv+0xe4>
			BT_WARN("Ignoring unexpected request");
   11054:	4b35      	ldr	r3, [pc, #212]	; (1112c <bt_att_recv+0x150>)
   11056:	617b      	str	r3, [r7, #20]
   11058:	2302      	movs	r3, #2
   1105a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1105e:	613b      	str	r3, [r7, #16]
   11060:	f107 0210 	add.w	r2, r7, #16
   11064:	e7ca      	b.n	10ffc <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11066:	3301      	adds	r3, #1
   11068:	2b0e      	cmp	r3, #14
   1106a:	d1df      	bne.n	1102c <bt_att_recv+0x50>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1106c:	466c      	mov	r4, sp
   1106e:	b088      	sub	sp, #32
   11070:	466a      	mov	r2, sp
   11072:	4b2f      	ldr	r3, [pc, #188]	; (11130 <bt_att_recv+0x154>)
   11074:	482b      	ldr	r0, [pc, #172]	; (11124 <bt_att_recv+0x148>)
   11076:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1107a:	2303      	movs	r3, #3
   1107c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11080:	f842 3f10 	str.w	r3, [r2, #16]!
   11084:	f00b fd18 	bl	1cab8 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   11088:	7829      	ldrb	r1, [r5, #0]
   1108a:	46a5      	mov	sp, r4
   1108c:	4608      	mov	r0, r1
   1108e:	f7ff fbcf 	bl	10830 <att_op_get_type>
   11092:	2800      	cmp	r0, #0
   11094:	d0b5      	beq.n	11002 <bt_att_recv+0x26>
   11096:	2805      	cmp	r0, #5
   11098:	d0b3      	beq.n	11002 <bt_att_recv+0x26>
	if (!req) {
   1109a:	2900      	cmp	r1, #0
   1109c:	d0b1      	beq.n	11002 <bt_att_recv+0x26>
   1109e:	2306      	movs	r3, #6
   110a0:	2200      	movs	r2, #0
   110a2:	4630      	mov	r0, r6
   110a4:	f00b ff56 	bl	1cf54 <send_err_rsp.part.0>
   110a8:	e7ab      	b.n	11002 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   110aa:	f1b9 0f05 	cmp.w	r9, #5
   110ae:	d107      	bne.n	110c0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   110b0:	2101      	movs	r1, #1
   110b2:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   110b6:	f00b fde9 	bl	1cc8c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   110ba:	b108      	cbz	r0, 110c0 <bt_att_recv+0xe4>
			BT_WARN("Ignoring unexpected indication");
   110bc:	4b1d      	ldr	r3, [pc, #116]	; (11134 <bt_att_recv+0x158>)
   110be:	e7ca      	b.n	11056 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   110c0:	44d8      	add	r8, fp
   110c2:	89a3      	ldrh	r3, [r4, #12]
   110c4:	f898 2001 	ldrb.w	r2, [r8, #1]
   110c8:	429a      	cmp	r2, r3
   110ca:	d916      	bls.n	110fa <bt_att_recv+0x11e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   110cc:	46e9      	mov	r9, sp
   110ce:	b088      	sub	sp, #32
   110d0:	466a      	mov	r2, sp
   110d2:	7829      	ldrb	r1, [r5, #0]
   110d4:	2404      	movs	r4, #4
   110d6:	4818      	ldr	r0, [pc, #96]	; (11138 <bt_att_recv+0x15c>)
   110d8:	61d1      	str	r1, [r2, #28]
   110da:	e9c2 0305 	strd	r0, r3, [r2, #20]
   110de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   110e2:	4810      	ldr	r0, [pc, #64]	; (11124 <bt_att_recv+0x148>)
   110e4:	f842 4f10 	str.w	r4, [r2, #16]!
   110e8:	f00b fce6 	bl	1cab8 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   110ec:	f898 3002 	ldrb.w	r3, [r8, #2]
   110f0:	46cd      	mov	sp, r9
   110f2:	2b01      	cmp	r3, #1
   110f4:	d185      	bne.n	11002 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   110f6:	4623      	mov	r3, r4
   110f8:	e00c      	b.n	11114 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   110fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   110fe:	4621      	mov	r1, r4
   11100:	4630      	mov	r0, r6
   11102:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   11104:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   11108:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1110a:	f47f af7a 	bne.w	11002 <bt_att_recv+0x26>
   1110e:	2800      	cmp	r0, #0
   11110:	f43f af77 	beq.w	11002 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   11114:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   11116:	2900      	cmp	r1, #0
   11118:	f43f af73 	beq.w	11002 <bt_att_recv+0x26>
   1111c:	e7c0      	b.n	110a0 <bt_att_recv+0xc4>
   1111e:	bf00      	nop
   11120:	00021c27 	.word	0x00021c27
   11124:	0001ed74 	.word	0x0001ed74
   11128:	0001f2bc 	.word	0x0001f2bc
   1112c:	00021c5c 	.word	0x00021c5c
   11130:	00021c42 	.word	0x00021c42
   11134:	00021c78 	.word	0x00021c78
   11138:	00021c97 	.word	0x00021c97

0001113c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1113c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1113e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11140:	6803      	ldr	r3, [r0, #0]
   11142:	460d      	mov	r5, r1
   11144:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11146:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11148:	bf18      	it	ne
   1114a:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1114c:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1114e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11150:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11152:	f00c f9b4 	bl	1d4be <bt_gatt_change_aware>
   11156:	b948      	cbnz	r0, 1116c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11158:	2105      	movs	r1, #5
   1115a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1115e:	f00b fd95 	bl	1cc8c <atomic_test_and_set_bit>
   11162:	2800      	cmp	r0, #0
   11164:	d048      	beq.n	111f8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   11166:	2000      	movs	r0, #0
}
   11168:	b007      	add	sp, #28
   1116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1116c:	2e00      	cmp	r6, #0
   1116e:	d045      	beq.n	111fc <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   11170:	2218      	movs	r2, #24
   11172:	2100      	movs	r1, #0
   11174:	4668      	mov	r0, sp
   11176:	f00b f873 	bl	1c260 <memset>
	if (rsp) {
   1117a:	bb67      	cbnz	r7, 111d6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1117c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1117e:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   11180:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11182:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   11184:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   11186:	2300      	movs	r3, #0
   11188:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1118c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1118e:	4a1c      	ldr	r2, [pc, #112]	; (11200 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   11190:	9303      	str	r3, [sp, #12]
	data.len = len;
   11192:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   11196:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   1119a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1119e:	2301      	movs	r3, #1
   111a0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   111a4:	466b      	mov	r3, sp
   111a6:	f00b fbed 	bl	1c984 <bt_gatt_foreach_attr>
	if (data.err) {
   111aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   111ae:	b1e3      	cbz	r3, 111ea <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   111b0:	2f00      	cmp	r7, #0
   111b2:	d0d8      	beq.n	11166 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   111b4:	9b01      	ldr	r3, [sp, #4]
   111b6:	6958      	ldr	r0, [r3, #20]
   111b8:	f7ff fb80 	bl	108bc <tx_meta_data_free>
			net_buf_unref(data.buf);
   111bc:	9801      	ldr	r0, [sp, #4]
   111be:	f001 febd 	bl	12f3c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   111c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   111c6:	2d00      	cmp	r5, #0
   111c8:	d0cd      	beq.n	11166 <att_write_rsp.constprop.0+0x2a>
   111ca:	4632      	mov	r2, r6
   111cc:	4629      	mov	r1, r5
   111ce:	4620      	mov	r0, r4
   111d0:	f00b fec0 	bl	1cf54 <send_err_rsp.part.0>
   111d4:	e7c7      	b.n	11166 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   111d6:	2200      	movs	r2, #0
   111d8:	4639      	mov	r1, r7
   111da:	4620      	mov	r0, r4
   111dc:	f7ff fe94 	bl	10f08 <bt_att_chan_create_pdu>
   111e0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   111e2:	2800      	cmp	r0, #0
   111e4:	d1ca      	bne.n	1117c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   111e6:	200e      	movs	r0, #14
   111e8:	e7be      	b.n	11168 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   111ea:	9901      	ldr	r1, [sp, #4]
   111ec:	2900      	cmp	r1, #0
   111ee:	d0ba      	beq.n	11166 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   111f0:	4620      	mov	r0, r4
   111f2:	f00b fc97 	bl	1cb24 <bt_att_chan_send_rsp>
   111f6:	e7b6      	b.n	11166 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   111f8:	2012      	movs	r0, #18
   111fa:	e7b5      	b.n	11168 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   111fc:	2001      	movs	r0, #1
   111fe:	e7b3      	b.n	11168 <att_write_rsp.constprop.0+0x2c>
   11200:	0001c923 	.word	0x0001c923

00011204 <bt_att_create_pdu>:
{
   11204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11206:	af00      	add	r7, sp, #0
   11208:	460e      	mov	r6, r1
   1120a:	4615      	mov	r5, r2
	att = att_get(conn);
   1120c:	f7ff fcec 	bl	10be8 <att_get>
	if (!att) {
   11210:	b1e0      	cbz	r0, 1124c <bt_att_create_pdu+0x48>
	return list->head;
   11212:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11214:	4618      	mov	r0, r3
   11216:	b11b      	cbz	r3, 11220 <bt_att_create_pdu+0x1c>
	return node->next;
   11218:	f850 39f0 	ldr.w	r3, [r0], #-240
   1121c:	b103      	cbz	r3, 11220 <bt_att_create_pdu+0x1c>
   1121e:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11220:	1c6c      	adds	r4, r5, #1
   11222:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11224:	b118      	cbz	r0, 1122e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11226:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   11228:	42a1      	cmp	r1, r4
   1122a:	d219      	bcs.n	11260 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1122c:	b983      	cbnz	r3, 11250 <bt_att_create_pdu+0x4c>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1122e:	466d      	mov	r5, sp
   11230:	b088      	sub	sp, #32
   11232:	466a      	mov	r2, sp
   11234:	4b0e      	ldr	r3, [pc, #56]	; (11270 <bt_att_create_pdu+0x6c>)
   11236:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1123a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1123e:	2303      	movs	r3, #3
   11240:	480c      	ldr	r0, [pc, #48]	; (11274 <bt_att_create_pdu+0x70>)
   11242:	f842 3f10 	str.w	r3, [r2, #16]!
   11246:	f00b fc37 	bl	1cab8 <z_log_msg_static_create.constprop.0>
   1124a:	46ad      	mov	sp, r5
		return NULL;
   1124c:	2000      	movs	r0, #0
   1124e:	e00b      	b.n	11268 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11250:	4618      	mov	r0, r3
   11252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   11256:	b14b      	cbz	r3, 1126c <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11258:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1125a:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1125c:	428a      	cmp	r2, r1
   1125e:	d8f7      	bhi.n	11250 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   11260:	462a      	mov	r2, r5
   11262:	4631      	mov	r1, r6
   11264:	f7ff fe50 	bl	10f08 <bt_att_chan_create_pdu>
}
   11268:	46bd      	mov	sp, r7
   1126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1126c:	4614      	mov	r4, r2
   1126e:	e7da      	b.n	11226 <bt_att_create_pdu+0x22>
   11270:	00021cb6 	.word	0x00021cb6
   11274:	0001ed74 	.word	0x0001ed74

00011278 <att_read_group_req>:
{
   11278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1127c:	898e      	ldrh	r6, [r1, #12]
{
   1127e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11280:	3e04      	subs	r6, #4
   11282:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   11284:	2e02      	cmp	r6, #2
{
   11286:	4608      	mov	r0, r1
   11288:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1128a:	d001      	beq.n	11290 <att_read_group_req+0x18>
   1128c:	2e10      	cmp	r6, #16
   1128e:	d16a      	bne.n	11366 <att_read_group_req+0xee>
   11290:	2104      	movs	r1, #4
   11292:	3008      	adds	r0, #8
   11294:	f001 ff56 	bl	13144 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11298:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1129c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1129e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   112a0:	1d01      	adds	r1, r0, #4
   112a2:	4632      	mov	r2, r6
   112a4:	4640      	mov	r0, r8
   112a6:	f00b f815 	bl	1c2d4 <bt_uuid_create>
   112aa:	2800      	cmp	r0, #0
   112ac:	d05d      	beq.n	1136a <att_read_group_req+0xf2>
	if (!start || !end) {
   112ae:	2d00      	cmp	r5, #0
   112b0:	d03a      	beq.n	11328 <att_read_group_req+0xb0>
   112b2:	2600      	movs	r6, #0
   112b4:	2f00      	cmp	r7, #0
   112b6:	d036      	beq.n	11326 <att_read_group_req+0xae>
	if (start > end) {
   112b8:	42bd      	cmp	r5, r7
   112ba:	d835      	bhi.n	11328 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   112bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   112c0:	4640      	mov	r0, r8
   112c2:	a901      	add	r1, sp, #4
   112c4:	f88d 6004 	strb.w	r6, [sp, #4]
   112c8:	f8ad 3006 	strh.w	r3, [sp, #6]
   112cc:	f00a ffd4 	bl	1c278 <bt_uuid_cmp>
   112d0:	bb70      	cbnz	r0, 11330 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   112d2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   112d4:	2214      	movs	r2, #20
   112d6:	2100      	movs	r1, #0
   112d8:	a807      	add	r0, sp, #28
   112da:	f00a ffc1 	bl	1c260 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   112de:	2201      	movs	r2, #1
   112e0:	2111      	movs	r1, #17
   112e2:	4630      	mov	r0, r6
   112e4:	f7ff ff8e 	bl	11204 <bt_att_create_pdu>
   112e8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   112ea:	2800      	cmp	r0, #0
   112ec:	d03d      	beq.n	1136a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   112ee:	2101      	movs	r1, #1
   112f0:	3008      	adds	r0, #8
	data.uuid = uuid;
   112f2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   112f6:	f001 ff43 	bl	13180 <net_buf_simple_add>
	data.rsp->len = 0U;
   112fa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   112fc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   112fe:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   11300:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11302:	4a1b      	ldr	r2, [pc, #108]	; (11370 <att_read_group_req+0xf8>)
	data.group = NULL;
   11304:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11306:	4628      	mov	r0, r5
   11308:	ab07      	add	r3, sp, #28
   1130a:	f00b fb3b 	bl	1c984 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1130e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11310:	781b      	ldrb	r3, [r3, #0]
   11312:	bb1b      	cbnz	r3, 1135c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11314:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11316:	6958      	ldr	r0, [r3, #20]
   11318:	f7ff fad0 	bl	108bc <tx_meta_data_free>
		net_buf_unref(data.buf);
   1131c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1131e:	f001 fe0d 	bl	12f3c <net_buf_unref>
	if (!req) {
   11322:	230a      	movs	r3, #10
   11324:	e001      	b.n	1132a <att_read_group_req+0xb2>
			*err = 0U;
   11326:	463d      	mov	r5, r7
	if (!req) {
   11328:	2301      	movs	r3, #1
   1132a:	462a      	mov	r2, r5
   1132c:	2110      	movs	r1, #16
   1132e:	e00e      	b.n	1134e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   11330:	f642 0301 	movw	r3, #10241	; 0x2801
   11334:	4640      	mov	r0, r8
   11336:	a907      	add	r1, sp, #28
   11338:	f88d 601c 	strb.w	r6, [sp, #28]
   1133c:	f8ad 301e 	strh.w	r3, [sp, #30]
   11340:	f00a ff9a 	bl	1c278 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11344:	2800      	cmp	r0, #0
   11346:	d0c4      	beq.n	112d2 <att_read_group_req+0x5a>
	if (!req) {
   11348:	2310      	movs	r3, #16
   1134a:	462a      	mov	r2, r5
   1134c:	4619      	mov	r1, r3
   1134e:	4620      	mov	r0, r4
   11350:	f00b fe00 	bl	1cf54 <send_err_rsp.part.0>
		return 0;
   11354:	2000      	movs	r0, #0
}
   11356:	b00c      	add	sp, #48	; 0x30
   11358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1135c:	4620      	mov	r0, r4
   1135e:	9909      	ldr	r1, [sp, #36]	; 0x24
   11360:	f00b fbe0 	bl	1cb24 <bt_att_chan_send_rsp>
	return 0;
   11364:	e7f6      	b.n	11354 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   11366:	2004      	movs	r0, #4
   11368:	e7f5      	b.n	11356 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1136a:	200e      	movs	r0, #14
   1136c:	e7f3      	b.n	11356 <att_read_group_req+0xde>
   1136e:	bf00      	nop
   11370:	00010cad 	.word	0x00010cad

00011374 <att_read_mult_vl_req>:
{
   11374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11378:	6846      	ldr	r6, [r0, #4]
{
   1137a:	4604      	mov	r4, r0
   1137c:	460d      	mov	r5, r1
   1137e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   11380:	2101      	movs	r1, #1
   11382:	4630      	mov	r0, r6
   11384:	f00c f89b 	bl	1d4be <bt_gatt_change_aware>
   11388:	b950      	cbnz	r0, 113a0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1138a:	2105      	movs	r1, #5
   1138c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11390:	f00b fc7c 	bl	1cc8c <atomic_test_and_set_bit>
   11394:	2800      	cmp	r0, #0
   11396:	d13b      	bne.n	11410 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11398:	2012      	movs	r0, #18
}
   1139a:	b005      	add	sp, #20
   1139c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   113a0:	2210      	movs	r2, #16
   113a2:	2100      	movs	r1, #0
   113a4:	4668      	mov	r0, sp
   113a6:	f00a ff5b 	bl	1c260 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   113aa:	2200      	movs	r2, #0
   113ac:	2121      	movs	r1, #33	; 0x21
   113ae:	4630      	mov	r0, r6
   113b0:	f7ff ff28 	bl	11204 <bt_att_create_pdu>
   113b4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   113b6:	b368      	cbz	r0, 11414 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   113b8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   113bc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 11418 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   113c0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   113c2:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   113c6:	89ab      	ldrh	r3, [r5, #12]
   113c8:	2b01      	cmp	r3, #1
   113ca:	d804      	bhi.n	113d6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   113cc:	4620      	mov	r0, r4
   113ce:	9902      	ldr	r1, [sp, #8]
   113d0:	f00b fba8 	bl	1cb24 <bt_att_chan_send_rsp>
	return 0;
   113d4:	e01c      	b.n	11410 <att_read_mult_vl_req+0x9c>
   113d6:	4638      	mov	r0, r7
   113d8:	f00c f8e5 	bl	1d5a6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   113dc:	466b      	mov	r3, sp
   113de:	464a      	mov	r2, r9
   113e0:	4601      	mov	r1, r0
   113e2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   113e4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   113e8:	f00b facc 	bl	1c984 <bt_gatt_foreach_attr>
		if (data.err) {
   113ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   113f0:	2b00      	cmp	r3, #0
   113f2:	d0e8      	beq.n	113c6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   113f4:	9b02      	ldr	r3, [sp, #8]
   113f6:	6958      	ldr	r0, [r3, #20]
   113f8:	f7ff fa60 	bl	108bc <tx_meta_data_free>
			net_buf_unref(data.buf);
   113fc:	9802      	ldr	r0, [sp, #8]
   113fe:	f001 fd9d 	bl	12f3c <net_buf_unref>
	if (!req) {
   11402:	4632      	mov	r2, r6
   11404:	2120      	movs	r1, #32
   11406:	4620      	mov	r0, r4
   11408:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1140c:	f00b fda2 	bl	1cf54 <send_err_rsp.part.0>
			return 0;
   11410:	2000      	movs	r0, #0
   11412:	e7c2      	b.n	1139a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   11414:	200e      	movs	r0, #14
   11416:	e7c0      	b.n	1139a <att_read_mult_vl_req+0x26>
   11418:	0001ccf5 	.word	0x0001ccf5

0001141c <att_read_mult_req>:
{
   1141c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11420:	6846      	ldr	r6, [r0, #4]
{
   11422:	4604      	mov	r4, r0
   11424:	460d      	mov	r5, r1
   11426:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   11428:	2101      	movs	r1, #1
   1142a:	4630      	mov	r0, r6
   1142c:	f00c f847 	bl	1d4be <bt_gatt_change_aware>
   11430:	b950      	cbnz	r0, 11448 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11432:	2105      	movs	r1, #5
   11434:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11438:	f00b fc28 	bl	1cc8c <atomic_test_and_set_bit>
   1143c:	2800      	cmp	r0, #0
   1143e:	d13b      	bne.n	114b8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11440:	2012      	movs	r0, #18
}
   11442:	b005      	add	sp, #20
   11444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   11448:	2210      	movs	r2, #16
   1144a:	2100      	movs	r1, #0
   1144c:	4668      	mov	r0, sp
   1144e:	f00a ff07 	bl	1c260 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   11452:	2200      	movs	r2, #0
   11454:	210f      	movs	r1, #15
   11456:	4630      	mov	r0, r6
   11458:	f7ff fed4 	bl	11204 <bt_att_create_pdu>
   1145c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1145e:	b368      	cbz	r0, 114bc <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11460:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11464:	f8df 9058 	ldr.w	r9, [pc, #88]	; 114c0 <att_read_mult_req+0xa4>
	data.chan = chan;
   11468:	9400      	str	r4, [sp, #0]
   1146a:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1146e:	89ab      	ldrh	r3, [r5, #12]
   11470:	2b01      	cmp	r3, #1
   11472:	d804      	bhi.n	1147e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   11474:	4620      	mov	r0, r4
   11476:	9902      	ldr	r1, [sp, #8]
   11478:	f00b fb54 	bl	1cb24 <bt_att_chan_send_rsp>
	return 0;
   1147c:	e01c      	b.n	114b8 <att_read_mult_req+0x9c>
   1147e:	4638      	mov	r0, r7
   11480:	f00c f891 	bl	1d5a6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11484:	466b      	mov	r3, sp
   11486:	464a      	mov	r2, r9
   11488:	4601      	mov	r1, r0
   1148a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1148c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11490:	f00b fa78 	bl	1c984 <bt_gatt_foreach_attr>
		if (data.err) {
   11494:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11498:	2b00      	cmp	r3, #0
   1149a:	d0e8      	beq.n	1146e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1149c:	9b02      	ldr	r3, [sp, #8]
   1149e:	6958      	ldr	r0, [r3, #20]
   114a0:	f7ff fa0c 	bl	108bc <tx_meta_data_free>
			net_buf_unref(data.buf);
   114a4:	9802      	ldr	r0, [sp, #8]
   114a6:	f001 fd49 	bl	12f3c <net_buf_unref>
	if (!req) {
   114aa:	4632      	mov	r2, r6
   114ac:	210e      	movs	r1, #14
   114ae:	4620      	mov	r0, r4
   114b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   114b4:	f00b fd4e 	bl	1cf54 <send_err_rsp.part.0>
			return 0;
   114b8:	2000      	movs	r0, #0
   114ba:	e7c2      	b.n	11442 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   114bc:	200e      	movs	r0, #14
   114be:	e7c0      	b.n	11442 <att_read_mult_req+0x26>
   114c0:	0001ccaf 	.word	0x0001ccaf

000114c4 <att_read_rsp>:
{
   114c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   114c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   114cc:	4604      	mov	r4, r0
   114ce:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   114d0:	4640      	mov	r0, r8
   114d2:	2101      	movs	r1, #1
{
   114d4:	4617      	mov	r7, r2
   114d6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   114d8:	f00b fff1 	bl	1d4be <bt_gatt_change_aware>
   114dc:	b948      	cbnz	r0, 114f2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   114de:	2105      	movs	r1, #5
   114e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   114e4:	f00b fbd2 	bl	1cc8c <atomic_test_and_set_bit>
   114e8:	bb78      	cbnz	r0, 1154a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   114ea:	2012      	movs	r0, #18
}
   114ec:	b004      	add	sp, #16
   114ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   114f2:	b38d      	cbz	r5, 11558 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   114f4:	2210      	movs	r2, #16
   114f6:	2100      	movs	r1, #0
   114f8:	4668      	mov	r0, sp
   114fa:	f00a feb1 	bl	1c260 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   114fe:	2200      	movs	r2, #0
   11500:	4639      	mov	r1, r7
   11502:	4640      	mov	r0, r8
   11504:	f7ff fe7e 	bl	11204 <bt_att_create_pdu>
   11508:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1150a:	b338      	cbz	r0, 1155c <att_read_rsp+0x98>
	data.offset = offset;
   1150c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11510:	4629      	mov	r1, r5
	data.offset = offset;
   11512:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11516:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11518:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1151a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1151e:	4a10      	ldr	r2, [pc, #64]	; (11560 <att_read_rsp+0x9c>)
   11520:	466b      	mov	r3, sp
	data.chan = chan;
   11522:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11524:	f00b fa2e 	bl	1c984 <bt_gatt_foreach_attr>
	if (data.err) {
   11528:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1152c:	b17b      	cbz	r3, 1154e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1152e:	9b02      	ldr	r3, [sp, #8]
   11530:	6958      	ldr	r0, [r3, #20]
   11532:	f7ff f9c3 	bl	108bc <tx_meta_data_free>
		net_buf_unref(data.buf);
   11536:	9802      	ldr	r0, [sp, #8]
   11538:	f001 fd00 	bl	12f3c <net_buf_unref>
	if (!req) {
   1153c:	462a      	mov	r2, r5
   1153e:	4631      	mov	r1, r6
   11540:	4620      	mov	r0, r4
   11542:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11546:	f00b fd05 	bl	1cf54 <send_err_rsp.part.0>
			return 0;
   1154a:	2000      	movs	r0, #0
   1154c:	e7ce      	b.n	114ec <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1154e:	4620      	mov	r0, r4
   11550:	9902      	ldr	r1, [sp, #8]
   11552:	f00b fae7 	bl	1cb24 <bt_att_chan_send_rsp>
	return 0;
   11556:	e7f8      	b.n	1154a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   11558:	2001      	movs	r0, #1
   1155a:	e7c7      	b.n	114ec <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1155c:	200e      	movs	r0, #14
   1155e:	e7c5      	b.n	114ec <att_read_rsp+0x28>
   11560:	0001ccaf 	.word	0x0001ccaf

00011564 <att_read_type_req>:
{
   11564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11568:	898d      	ldrh	r5, [r1, #12]
{
   1156a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1156c:	3d04      	subs	r5, #4
   1156e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   11570:	2d02      	cmp	r5, #2
{
   11572:	4608      	mov	r0, r1
   11574:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11576:	d001      	beq.n	1157c <att_read_type_req+0x18>
   11578:	2d10      	cmp	r5, #16
   1157a:	d150      	bne.n	1161e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1157c:	2104      	movs	r1, #4
   1157e:	3008      	adds	r0, #8
   11580:	f001 fde0 	bl	13144 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11584:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   11588:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1158a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1158c:	1d01      	adds	r1, r0, #4
   1158e:	462a      	mov	r2, r5
   11590:	4640      	mov	r0, r8
   11592:	f00a fe9f 	bl	1c2d4 <bt_uuid_create>
   11596:	b188      	cbz	r0, 115bc <att_read_type_req+0x58>
	if (!start || !end) {
   11598:	b19e      	cbz	r6, 115c2 <att_read_type_req+0x5e>
   1159a:	b18f      	cbz	r7, 115c0 <att_read_type_req+0x5c>
	if (start > end) {
   1159c:	42b7      	cmp	r7, r6
   1159e:	d310      	bcc.n	115c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   115a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   115a2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   115a4:	2100      	movs	r1, #0
   115a6:	eb0d 0002 	add.w	r0, sp, r2
   115aa:	f00a fe59 	bl	1c260 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   115ae:	2201      	movs	r2, #1
   115b0:	2109      	movs	r1, #9
   115b2:	4628      	mov	r0, r5
   115b4:	f7ff fe26 	bl	11204 <bt_att_create_pdu>
   115b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   115ba:	b960      	cbnz	r0, 115d6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   115bc:	200e      	movs	r0, #14
   115be:	e007      	b.n	115d0 <att_read_type_req+0x6c>
			*err = 0U;
   115c0:	463e      	mov	r6, r7
	if (!req) {
   115c2:	2301      	movs	r3, #1
   115c4:	4632      	mov	r2, r6
   115c6:	2108      	movs	r1, #8
   115c8:	4620      	mov	r0, r4
   115ca:	f00b fcc3 	bl	1cf54 <send_err_rsp.part.0>
		return 0;
   115ce:	2000      	movs	r0, #0
}
   115d0:	b00c      	add	sp, #48	; 0x30
   115d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   115d6:	2101      	movs	r1, #1
   115d8:	3008      	adds	r0, #8
	data.uuid = uuid;
   115da:	e9cd 4806 	strd	r4, r8, [sp, #24]
   115de:	f001 fdcf 	bl	13180 <net_buf_simple_add>
	data.rsp->len = 0U;
   115e2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   115e4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   115e6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   115e8:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   115ea:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   115ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   115f0:	4630      	mov	r0, r6
   115f2:	ab06      	add	r3, sp, #24
   115f4:	4a0b      	ldr	r2, [pc, #44]	; (11624 <att_read_type_req+0xc0>)
   115f6:	f00b f9c5 	bl	1c984 <bt_gatt_foreach_attr>
	if (data.err) {
   115fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   115fe:	b14b      	cbz	r3, 11614 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11600:	9b08      	ldr	r3, [sp, #32]
   11602:	6958      	ldr	r0, [r3, #20]
   11604:	f7ff f95a 	bl	108bc <tx_meta_data_free>
		net_buf_unref(data.buf);
   11608:	9808      	ldr	r0, [sp, #32]
   1160a:	f001 fc97 	bl	12f3c <net_buf_unref>
	if (!req) {
   1160e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   11612:	e7d7      	b.n	115c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   11614:	4620      	mov	r0, r4
   11616:	9908      	ldr	r1, [sp, #32]
   11618:	f00b fa84 	bl	1cb24 <bt_att_chan_send_rsp>
	return 0;
   1161c:	e7d7      	b.n	115ce <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1161e:	2004      	movs	r0, #4
   11620:	e7d6      	b.n	115d0 <att_read_type_req+0x6c>
   11622:	bf00      	nop
   11624:	00010d59 	.word	0x00010d59

00011628 <att_find_type_req>:
{
   11628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1162c:	460f      	mov	r7, r1
   1162e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   11630:	2106      	movs	r1, #6
   11632:	b086      	sub	sp, #24
   11634:	f107 0008 	add.w	r0, r7, #8
   11638:	f001 fd84 	bl	13144 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1163c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1163e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   11642:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   11644:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   11648:	b1c5      	cbz	r5, 1167c <att_find_type_req+0x54>
   1164a:	2300      	movs	r3, #0
   1164c:	f1b8 0f00 	cmp.w	r8, #0
   11650:	d013      	beq.n	1167a <att_find_type_req+0x52>
	if (start > end) {
   11652:	4545      	cmp	r5, r8
   11654:	d812      	bhi.n	1167c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   11656:	f88d 3000 	strb.w	r3, [sp]
   1165a:	f88d 3004 	strb.w	r3, [sp, #4]
   1165e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11662:	4668      	mov	r0, sp
   11664:	a901      	add	r1, sp, #4
   11666:	f8ad 2002 	strh.w	r2, [sp, #2]
   1166a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1166e:	f00a fe03 	bl	1c278 <bt_uuid_cmp>
   11672:	4606      	mov	r6, r0
   11674:	b160      	cbz	r0, 11690 <att_find_type_req+0x68>
	if (!req) {
   11676:	230a      	movs	r3, #10
   11678:	e001      	b.n	1167e <att_find_type_req+0x56>
			*err = 0U;
   1167a:	4645      	mov	r5, r8
	if (!req) {
   1167c:	2301      	movs	r3, #1
   1167e:	462a      	mov	r2, r5
   11680:	2106      	movs	r1, #6
   11682:	4620      	mov	r0, r4
   11684:	f00b fc66 	bl	1cf54 <send_err_rsp.part.0>
		return 0;
   11688:	2000      	movs	r0, #0
}
   1168a:	b006      	add	sp, #24
   1168c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   11690:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   11694:	4601      	mov	r1, r0
   11696:	2214      	movs	r2, #20
   11698:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1169a:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   1169c:	f00a fde0 	bl	1c260 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   116a0:	4632      	mov	r2, r6
   116a2:	2107      	movs	r1, #7
   116a4:	4650      	mov	r0, sl
   116a6:	f7ff fdad 	bl	11204 <bt_att_create_pdu>
   116aa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   116ac:	b1f8      	cbz	r0, 116ee <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   116ae:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   116b0:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   116b2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   116b6:	4628      	mov	r0, r5
   116b8:	ab01      	add	r3, sp, #4
   116ba:	4a0e      	ldr	r2, [pc, #56]	; (116f4 <att_find_type_req+0xcc>)
	data.value = value;
   116bc:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   116c0:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   116c2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   116c6:	f00b f95d 	bl	1c984 <bt_gatt_foreach_attr>
	if (data.err) {
   116ca:	f89d 3015 	ldrb.w	r3, [sp, #21]
   116ce:	b14b      	cbz	r3, 116e4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   116d0:	9b02      	ldr	r3, [sp, #8]
   116d2:	6958      	ldr	r0, [r3, #20]
   116d4:	f7ff f8f2 	bl	108bc <tx_meta_data_free>
		net_buf_unref(data.buf);
   116d8:	9802      	ldr	r0, [sp, #8]
   116da:	f001 fc2f 	bl	12f3c <net_buf_unref>
	if (!req) {
   116de:	f89d 3015 	ldrb.w	r3, [sp, #21]
   116e2:	e7cc      	b.n	1167e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   116e4:	4620      	mov	r0, r4
   116e6:	9902      	ldr	r1, [sp, #8]
   116e8:	f00b fa1c 	bl	1cb24 <bt_att_chan_send_rsp>
	return 0;
   116ec:	e7cc      	b.n	11688 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   116ee:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   116f0:	e7cb      	b.n	1168a <att_find_type_req+0x62>
   116f2:	bf00      	nop
   116f4:	000108fd 	.word	0x000108fd

000116f8 <att_find_info_req>:
{
   116f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   116fa:	688b      	ldr	r3, [r1, #8]
{
   116fc:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   116fe:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11700:	885e      	ldrh	r6, [r3, #2]
{
   11702:	b085      	sub	sp, #20
	if (!start || !end) {
   11704:	b195      	cbz	r5, 1172c <att_find_info_req+0x34>
   11706:	b186      	cbz	r6, 1172a <att_find_info_req+0x32>
	if (start > end) {
   11708:	42b5      	cmp	r5, r6
   1170a:	d80f      	bhi.n	1172c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1170c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1170e:	2210      	movs	r2, #16
   11710:	2100      	movs	r1, #0
   11712:	4668      	mov	r0, sp
   11714:	f00a fda4 	bl	1c260 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   11718:	2200      	movs	r2, #0
   1171a:	2105      	movs	r1, #5
   1171c:	4638      	mov	r0, r7
   1171e:	f7ff fd71 	bl	11204 <bt_att_create_pdu>
   11722:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   11724:	b958      	cbnz	r0, 1173e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   11726:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   11728:	e007      	b.n	1173a <att_find_info_req+0x42>
			*err = 0U;
   1172a:	4635      	mov	r5, r6
	if (!req) {
   1172c:	2301      	movs	r3, #1
   1172e:	462a      	mov	r2, r5
   11730:	2104      	movs	r1, #4
   11732:	4620      	mov	r0, r4
   11734:	f00b fc0e 	bl	1cf54 <send_err_rsp.part.0>
		return 0;
   11738:	2000      	movs	r0, #0
}
   1173a:	b005      	add	sp, #20
   1173c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1173e:	466b      	mov	r3, sp
   11740:	4631      	mov	r1, r6
   11742:	4628      	mov	r0, r5
   11744:	4a09      	ldr	r2, [pc, #36]	; (1176c <att_find_info_req+0x74>)
	data.chan = chan;
   11746:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   11748:	f00b f91c 	bl	1c984 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1174c:	9b02      	ldr	r3, [sp, #8]
   1174e:	b943      	cbnz	r3, 11762 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11750:	9b01      	ldr	r3, [sp, #4]
   11752:	6958      	ldr	r0, [r3, #20]
   11754:	f7ff f8b2 	bl	108bc <tx_meta_data_free>
		net_buf_unref(data.buf);
   11758:	9801      	ldr	r0, [sp, #4]
   1175a:	f001 fbef 	bl	12f3c <net_buf_unref>
	if (!req) {
   1175e:	230a      	movs	r3, #10
   11760:	e7e5      	b.n	1172e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   11762:	4620      	mov	r0, r4
   11764:	9901      	ldr	r1, [sp, #4]
   11766:	f00b f9dd 	bl	1cb24 <bt_att_chan_send_rsp>
	return 0;
   1176a:	e7e5      	b.n	11738 <att_find_info_req+0x40>
   1176c:	0001c99b 	.word	0x0001c99b

00011770 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   11770:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   11772:	4c0b      	ldr	r4, [pc, #44]	; (117a0 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   11774:	4d0b      	ldr	r5, [pc, #44]	; (117a4 <bt_att_init+0x34>)
   11776:	4620      	mov	r0, r4
   11778:	f00c ff11 	bl	1e59e <z_impl_k_queue_init>
   1177c:	4629      	mov	r1, r5
   1177e:	4620      	mov	r0, r4
   11780:	f00c ff1a 	bl	1e5b8 <k_queue_append>
   11784:	4620      	mov	r0, r4
   11786:	f105 0114 	add.w	r1, r5, #20
   1178a:	f00c ff15 	bl	1e5b8 <k_queue_append>
   1178e:	4620      	mov	r0, r4
   11790:	f105 0128 	add.w	r1, r5, #40	; 0x28
   11794:	f00c ff10 	bl	1e5b8 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   11798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1179c:	f000 bb6c 	b.w	11e78 <bt_gatt_init>
   117a0:	20008594 	.word	0x20008594
   117a4:	200097ac 	.word	0x200097ac

000117a8 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   117a8:	2300      	movs	r3, #0
{
   117aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   117ac:	4605      	mov	r5, r0
   117ae:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   117b0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   117b2:	f008 f9b7 	bl	19b24 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   117b6:	4b0b      	ldr	r3, [pc, #44]	; (117e4 <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   117b8:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   117ba:	681b      	ldr	r3, [r3, #0]
   117bc:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   117be:	bf04      	itt	eq
   117c0:	2500      	moveq	r5, #0
   117c2:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   117c4:	462a      	mov	r2, r5
   117c6:	4623      	mov	r3, r4
   117c8:	4807      	ldr	r0, [pc, #28]	; (117e8 <bt_att_req_alloc+0x40>)
   117ca:	f005 fd83 	bl	172d4 <k_mem_slab_alloc>
   117ce:	4601      	mov	r1, r0
   117d0:	b930      	cbnz	r0, 117e0 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   117d2:	2210      	movs	r2, #16
   117d4:	9801      	ldr	r0, [sp, #4]
   117d6:	f00a fd43 	bl	1c260 <memset>

	return req;
   117da:	9801      	ldr	r0, [sp, #4]
}
   117dc:	b003      	add	sp, #12
   117de:	bd30      	pop	{r4, r5, pc}
		return NULL;
   117e0:	2000      	movs	r0, #0
   117e2:	e7fb      	b.n	117dc <bt_att_req_alloc+0x34>
   117e4:	200097e8 	.word	0x200097e8
   117e8:	20008500 	.word	0x20008500

000117ec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   117ec:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   117ee:	6883      	ldr	r3, [r0, #8]
{
   117f0:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   117f2:	b14b      	cbz	r3, 11808 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   117f4:	6958      	ldr	r0, [r3, #20]
   117f6:	f7ff f861 	bl	108bc <tx_meta_data_free>
		net_buf_unref(req->buf);
   117fa:	9b01      	ldr	r3, [sp, #4]
   117fc:	6898      	ldr	r0, [r3, #8]
   117fe:	f001 fb9d 	bl	12f3c <net_buf_unref>
		req->buf = NULL;
   11802:	2200      	movs	r2, #0
   11804:	9b01      	ldr	r3, [sp, #4]
   11806:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   11808:	4803      	ldr	r0, [pc, #12]	; (11818 <bt_att_req_free+0x2c>)
   1180a:	a901      	add	r1, sp, #4
   1180c:	f005 fdcc 	bl	173a8 <k_mem_slab_free>
}
   11810:	b003      	add	sp, #12
   11812:	f85d fb04 	ldr.w	pc, [sp], #4
   11816:	bf00      	nop
   11818:	20008500 	.word	0x20008500

0001181c <att_handle_rsp>:
{
   1181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11820:	4604      	mov	r4, r0
   11822:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   11824:	30c0      	adds	r0, #192	; 0xc0
{
   11826:	460e      	mov	r6, r1
   11828:	4617      	mov	r7, r2
   1182a:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1182c:	f006 fff8 	bl	18820 <k_work_cancel_delayable>
	if (!chan->req) {
   11830:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   11834:	b980      	cbnz	r0, 11858 <att_handle_rsp+0x3c>
		BT_WARN("No pending ATT request");
   11836:	4b1a      	ldr	r3, [pc, #104]	; (118a0 <att_handle_rsp+0x84>)
   11838:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1183c:	9307      	str	r3, [sp, #28]
   1183e:	2302      	movs	r3, #2
   11840:	4818      	ldr	r0, [pc, #96]	; (118a4 <att_handle_rsp+0x88>)
   11842:	aa06      	add	r2, sp, #24
   11844:	9306      	str	r3, [sp, #24]
   11846:	f00b f937 	bl	1cab8 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1184a:	6820      	ldr	r0, [r4, #0]
   1184c:	f00b faba 	bl	1cdc4 <att_req_send_process>
}
   11850:	2000      	movs	r0, #0
   11852:	b008      	add	sp, #32
   11854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   11858:	4b13      	ldr	r3, [pc, #76]	; (118a8 <att_handle_rsp+0x8c>)
   1185a:	f04f 0800 	mov.w	r8, #0
   1185e:	4298      	cmp	r0, r3
   11860:	d102      	bne.n	11868 <att_handle_rsp+0x4c>
		chan->req = NULL;
   11862:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   11866:	e7f0      	b.n	1184a <att_handle_rsp+0x2e>
	func = chan->req->func;
   11868:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1186c:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   11870:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   11874:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   11878:	f7ff ffb8 	bl	117ec <bt_att_req_free>
	att_req_send_process(chan->att);
   1187c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1187e:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   11882:	f00b fa9f 	bl	1cdc4 <att_req_send_process>
	if (func) {
   11886:	f1b9 0f00 	cmp.w	r9, #0
   1188a:	d0e1      	beq.n	11850 <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   1188c:	6820      	ldr	r0, [r4, #0]
   1188e:	f8cd a000 	str.w	sl, [sp]
   11892:	463b      	mov	r3, r7
   11894:	4632      	mov	r2, r6
   11896:	4629      	mov	r1, r5
   11898:	6800      	ldr	r0, [r0, #0]
   1189a:	47c8      	blx	r9
   1189c:	e7d8      	b.n	11850 <att_handle_rsp+0x34>
   1189e:	bf00      	nop
   118a0:	00021cd1 	.word	0x00021cd1
   118a4:	0001ed74 	.word	0x0001ed74
   118a8:	200097ec 	.word	0x200097ec

000118ac <bt_att_disconnected>:
{
   118ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   118b0:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   118b4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   118b6:	2e00      	cmp	r6, #0
   118b8:	d056      	beq.n	11968 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   118ba:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   118be:	f106 0028 	add.w	r0, r6, #40	; 0x28
   118c2:	f00b f9c8 	bl	1cc56 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   118c6:	1f27      	subs	r7, r4, #4
   118c8:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   118cc:	2200      	movs	r2, #0
   118ce:	2300      	movs	r3, #0
   118d0:	4640      	mov	r0, r8
   118d2:	f001 f9c1 	bl	12c58 <net_buf_get>
   118d6:	4605      	mov	r5, r0
   118d8:	bb28      	cbnz	r0, 11926 <bt_att_disconnected+0x7a>
	if (chan->req) {
   118da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   118de:	b12b      	cbz	r3, 118ec <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   118e0:	4602      	mov	r2, r0
   118e2:	4601      	mov	r1, r0
   118e4:	230e      	movs	r3, #14
   118e6:	4638      	mov	r0, r7
   118e8:	f7ff ff98 	bl	1181c <att_handle_rsp>
	chan->att = NULL;
   118ec:	2300      	movs	r3, #0
   118ee:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   118f2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   118f4:	2b00      	cmp	r3, #0
   118f6:	d137      	bne.n	11968 <bt_att_disconnected+0xbc>
	att_reset(att);
   118f8:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   118fa:	9803      	ldr	r0, [sp, #12]
   118fc:	2200      	movs	r2, #0
   118fe:	2300      	movs	r3, #0
   11900:	300c      	adds	r0, #12
   11902:	f001 f9a9 	bl	12c58 <net_buf_get>
   11906:	4605      	mov	r5, r0
   11908:	b9a0      	cbnz	r0, 11934 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1190a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1190c:	6845      	ldr	r5, [r0, #4]
   1190e:	b9c5      	cbnz	r5, 11942 <bt_att_disconnected+0x96>
	att->conn = NULL;
   11910:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   11912:	a903      	add	r1, sp, #12
   11914:	4816      	ldr	r0, [pc, #88]	; (11970 <bt_att_disconnected+0xc4>)
   11916:	f005 fd47 	bl	173a8 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1191a:	6820      	ldr	r0, [r4, #0]
}
   1191c:	b004      	add	sp, #16
   1191e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   11922:	f001 b827 	b.w	12974 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   11926:	6968      	ldr	r0, [r5, #20]
   11928:	f7fe ffc8 	bl	108bc <tx_meta_data_free>
		net_buf_unref(buf);
   1192c:	4628      	mov	r0, r5
   1192e:	f001 fb05 	bl	12f3c <net_buf_unref>
   11932:	e7cb      	b.n	118cc <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   11934:	6968      	ldr	r0, [r5, #20]
   11936:	f7fe ffc1 	bl	108bc <tx_meta_data_free>
		net_buf_unref(buf);
   1193a:	4628      	mov	r0, r5
   1193c:	f001 fafe 	bl	12f3c <net_buf_unref>
   11940:	e7db      	b.n	118fa <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11942:	6882      	ldr	r2, [r0, #8]
	return node->next;
   11944:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11946:	4295      	cmp	r5, r2
	list->head = node;
   11948:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1194a:	bf08      	it	eq
   1194c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1194e:	686e      	ldr	r6, [r5, #4]
   11950:	b136      	cbz	r6, 11960 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   11952:	68eb      	ldr	r3, [r5, #12]
   11954:	210e      	movs	r1, #14
   11956:	9300      	str	r3, [sp, #0]
   11958:	2300      	movs	r3, #0
   1195a:	6800      	ldr	r0, [r0, #0]
   1195c:	461a      	mov	r2, r3
   1195e:	47b0      	blx	r6
		bt_att_req_free(req);
   11960:	4628      	mov	r0, r5
   11962:	f7ff ff43 	bl	117ec <bt_att_req_free>
   11966:	e7d0      	b.n	1190a <bt_att_disconnected+0x5e>
}
   11968:	b004      	add	sp, #16
   1196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1196e:	bf00      	nop
   11970:	200084c0 	.word	0x200084c0

00011974 <att_timeout>:
{
   11974:	b510      	push	{r4, lr}
   11976:	4604      	mov	r4, r0
   11978:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   1197a:	4b08      	ldr	r3, [pc, #32]	; (1199c <att_timeout+0x28>)
   1197c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11980:	9305      	str	r3, [sp, #20]
   11982:	2302      	movs	r3, #2
   11984:	4806      	ldr	r0, [pc, #24]	; (119a0 <att_timeout+0x2c>)
   11986:	aa04      	add	r2, sp, #16
   11988:	9304      	str	r3, [sp, #16]
   1198a:	f00b f895 	bl	1cab8 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1198e:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   11992:	b006      	add	sp, #24
   11994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   11998:	f7ff bf88 	b.w	118ac <bt_att_disconnected>
   1199c:	00021ce8 	.word	0x00021ce8
   119a0:	0001ed74 	.word	0x0001ed74

000119a4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   119a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119a6:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   119a8:	b958      	cbnz	r0, 119c2 <bt_att_send+0x1e>
   119aa:	4929      	ldr	r1, [pc, #164]	; (11a50 <bt_att_send+0xac>)
   119ac:	f640 63a8 	movw	r3, #3752	; 0xea8
   119b0:	4a28      	ldr	r2, [pc, #160]	; (11a54 <bt_att_send+0xb0>)
   119b2:	4829      	ldr	r0, [pc, #164]	; (11a58 <bt_att_send+0xb4>)
   119b4:	f009 fc3a 	bl	1b22c <assert_print>
   119b8:	f640 61a8 	movw	r1, #3752	; 0xea8
	__ASSERT_NO_MSG(buf);
   119bc:	4825      	ldr	r0, [pc, #148]	; (11a54 <bt_att_send+0xb0>)
   119be:	f009 fc2e 	bl	1b21e <assert_post_action>
   119c2:	b949      	cbnz	r1, 119d8 <bt_att_send+0x34>
   119c4:	4925      	ldr	r1, [pc, #148]	; (11a5c <bt_att_send+0xb8>)
   119c6:	f640 63a9 	movw	r3, #3753	; 0xea9
   119ca:	4a22      	ldr	r2, [pc, #136]	; (11a54 <bt_att_send+0xb0>)
   119cc:	4822      	ldr	r0, [pc, #136]	; (11a58 <bt_att_send+0xb4>)
   119ce:	f009 fc2d 	bl	1b22c <assert_print>
   119d2:	f640 61a9 	movw	r1, #3753	; 0xea9
   119d6:	e7f1      	b.n	119bc <bt_att_send+0x18>

	att = att_get(conn);
   119d8:	f7ff f906 	bl	10be8 <att_get>
	if (!att) {
   119dc:	4605      	mov	r5, r0
   119de:	b940      	cbnz	r0, 119f2 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   119e0:	6960      	ldr	r0, [r4, #20]
   119e2:	f7fe ff6b 	bl	108bc <tx_meta_data_free>
		net_buf_unref(buf);
   119e6:	4620      	mov	r0, r4
   119e8:	f001 faa8 	bl	12f3c <net_buf_unref>
		return -ENOTCONN;
   119ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   119f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   119f2:	f100 060c 	add.w	r6, r0, #12
   119f6:	4621      	mov	r1, r4
   119f8:	4630      	mov	r0, r6
   119fa:	f001 fa6f 	bl	12edc <net_buf_put>
	return list->head;
   119fe:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11a00:	b14d      	cbz	r5, 11a16 <bt_att_send+0x72>
	return node->next;
   11a02:	f855 49f0 	ldr.w	r4, [r5], #-240
   11a06:	b104      	cbz	r4, 11a0a <bt_att_send+0x66>
   11a08:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   11a0a:	4631      	mov	r1, r6
   11a0c:	4628      	mov	r0, r5
   11a0e:	f00b f870 	bl	1caf2 <process_queue>
		if (!err) {
   11a12:	4603      	mov	r3, r0
   11a14:	b980      	cbnz	r0, 11a38 <bt_att_send+0x94>
	return 0;
   11a16:	2000      	movs	r0, #0
   11a18:	e7ea      	b.n	119f0 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   11a1a:	2103      	movs	r1, #3
   11a1c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11a20:	f00a ff79 	bl	1c916 <atomic_test_bit>
   11a24:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   11a26:	f105 0098 	add.w	r0, r5, #152	; 0x98
   11a2a:	f00a ff74 	bl	1c916 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   11a2e:	4287      	cmp	r7, r0
   11a30:	f06f 0301 	mvn.w	r3, #1
   11a34:	d107      	bne.n	11a46 <bt_att_send+0xa2>
   11a36:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11a38:	2c00      	cmp	r4, #0
   11a3a:	d0ec      	beq.n	11a16 <bt_att_send+0x72>
   11a3c:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   11a40:	b922      	cbnz	r2, 11a4c <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   11a42:	3302      	adds	r3, #2
   11a44:	d0e9      	beq.n	11a1a <bt_att_send+0x76>
{
   11a46:	4625      	mov	r5, r4
   11a48:	4614      	mov	r4, r2
   11a4a:	e7de      	b.n	11a0a <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11a4c:	3af0      	subs	r2, #240	; 0xf0
   11a4e:	e7f8      	b.n	11a42 <bt_att_send+0x9e>
   11a50:	0002118c 	.word	0x0002118c
   11a54:	00021a71 	.word	0x00021a71
   11a58:	0001f995 	.word	0x0001f995
   11a5c:	00020d91 	.word	0x00020d91

00011a60 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   11a60:	b510      	push	{r4, lr}
   11a62:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   11a64:	b958      	cbnz	r0, 11a7e <bt_att_req_send+0x1e>
   11a66:	4915      	ldr	r1, [pc, #84]	; (11abc <bt_att_req_send+0x5c>)
   11a68:	f640 63be 	movw	r3, #3774	; 0xebe
   11a6c:	4a14      	ldr	r2, [pc, #80]	; (11ac0 <bt_att_req_send+0x60>)
   11a6e:	4815      	ldr	r0, [pc, #84]	; (11ac4 <bt_att_req_send+0x64>)
   11a70:	f009 fbdc 	bl	1b22c <assert_print>
   11a74:	f640 61be 	movw	r1, #3774	; 0xebe
	__ASSERT_NO_MSG(req);
   11a78:	4811      	ldr	r0, [pc, #68]	; (11ac0 <bt_att_req_send+0x60>)
   11a7a:	f009 fbd0 	bl	1b21e <assert_post_action>
   11a7e:	b949      	cbnz	r1, 11a94 <bt_att_req_send+0x34>
   11a80:	4911      	ldr	r1, [pc, #68]	; (11ac8 <bt_att_req_send+0x68>)
   11a82:	f640 63bf 	movw	r3, #3775	; 0xebf
   11a86:	4a0e      	ldr	r2, [pc, #56]	; (11ac0 <bt_att_req_send+0x60>)
   11a88:	480e      	ldr	r0, [pc, #56]	; (11ac4 <bt_att_req_send+0x64>)
   11a8a:	f009 fbcf 	bl	1b22c <assert_print>
   11a8e:	f640 61bf 	movw	r1, #3775	; 0xebf
   11a92:	e7f1      	b.n	11a78 <bt_att_req_send+0x18>

	att = att_get(conn);
   11a94:	f7ff f8a8 	bl	10be8 <att_get>
	if (!att) {
   11a98:	b160      	cbz	r0, 11ab4 <bt_att_req_send+0x54>
	parent->next = child;
   11a9a:	2300      	movs	r3, #0
   11a9c:	6023      	str	r3, [r4, #0]
	return list->tail;
   11a9e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   11aa0:	b92b      	cbnz	r3, 11aae <bt_att_req_send+0x4e>
	list->head = node;
   11aa2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   11aa6:	f00b f98d 	bl	1cdc4 <att_req_send_process>

	return 0;
   11aaa:	2000      	movs	r0, #0
}
   11aac:	bd10      	pop	{r4, pc}
	parent->next = child;
   11aae:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11ab0:	6084      	str	r4, [r0, #8]
}
   11ab2:	e7f8      	b.n	11aa6 <bt_att_req_send+0x46>
		return -ENOTCONN;
   11ab4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11ab8:	e7f8      	b.n	11aac <bt_att_req_send+0x4c>
   11aba:	bf00      	nop
   11abc:	0002118c 	.word	0x0002118c
   11ac0:	00021a71 	.word	0x00021a71
   11ac4:	0001f995 	.word	0x0001f995
   11ac8:	00021b20 	.word	0x00021b20

00011acc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   11acc:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   11ace:	b930      	cbnz	r0, 11ade <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   11ad0:	4907      	ldr	r1, [pc, #28]	; (11af0 <find_cf_cfg+0x24>)
   11ad2:	4808      	ldr	r0, [pc, #32]	; (11af4 <find_cf_cfg+0x28>)
   11ad4:	f00b fb6c 	bl	1d1b0 <bt_addr_le_eq>
   11ad8:	b138      	cbz	r0, 11aea <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   11ada:	4807      	ldr	r0, [pc, #28]	; (11af8 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   11adc:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11ade:	4a05      	ldr	r2, [pc, #20]	; (11af4 <find_cf_cfg+0x28>)
   11ae0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   11ae4:	f00a fe38 	bl	1c758 <bt_conn_is_peer_addr_le>
   11ae8:	e7f6      	b.n	11ad8 <find_cf_cfg+0xc>
	return NULL;
   11aea:	2000      	movs	r0, #0
   11aec:	e7f6      	b.n	11adc <find_cf_cfg+0x10>
   11aee:	bf00      	nop
   11af0:	00020c77 	.word	0x00020c77
   11af4:	20009815 	.word	0x20009815
   11af8:	20009814 	.word	0x20009814

00011afc <find_sc_cfg>:
{
   11afc:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   11afe:	4c06      	ldr	r4, [pc, #24]	; (11b18 <find_sc_cfg+0x1c>)
   11b00:	7823      	ldrb	r3, [r4, #0]
   11b02:	4283      	cmp	r3, r0
   11b04:	d103      	bne.n	11b0e <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   11b06:	1c60      	adds	r0, r4, #1
   11b08:	f00b fb52 	bl	1d1b0 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   11b0c:	b908      	cbnz	r0, 11b12 <find_sc_cfg+0x16>
	return NULL;
   11b0e:	2000      	movs	r0, #0
}
   11b10:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   11b12:	4620      	mov	r0, r4
   11b14:	e7fc      	b.n	11b10 <find_sc_cfg+0x14>
   11b16:	bf00      	nop
   11b18:	20009afa 	.word	0x20009afa

00011b1c <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   11b1c:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   11b1e:	1c4a      	adds	r2, r1, #1
{
   11b20:	460c      	mov	r4, r1
		if (conn) {
   11b22:	b138      	cbz	r0, 11b34 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   11b24:	7809      	ldrb	r1, [r1, #0]
   11b26:	f00a fe17 	bl	1c758 <bt_conn_is_peer_addr_le>
   11b2a:	b108      	cbz	r0, 11b30 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   11b2c:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   11b2e:	bd10      	pop	{r4, pc}
	return NULL;
   11b30:	2000      	movs	r0, #0
   11b32:	e7fc      	b.n	11b2e <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   11b34:	4610      	mov	r0, r2
   11b36:	4902      	ldr	r1, [pc, #8]	; (11b40 <find_ccc_cfg+0x24>)
   11b38:	f00b fb3a 	bl	1d1b0 <bt_addr_le_eq>
   11b3c:	e7f5      	b.n	11b2a <find_ccc_cfg+0xe>
   11b3e:	bf00      	nop
   11b40:	00020c77 	.word	0x00020c77

00011b44 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   11b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11b48:	b087      	sub	sp, #28
   11b4a:	461e      	mov	r6, r3
   11b4c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   11b50:	4681      	mov	r9, r0
   11b52:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   11b54:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   11b58:	2b00      	cmp	r3, #0
   11b5a:	d14b      	bne.n	11bf4 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   11b5c:	1e73      	subs	r3, r6, #1
   11b5e:	2b01      	cmp	r3, #1
   11b60:	d84b      	bhi.n	11bfa <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   11b62:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   11b64:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   11b66:	7815      	ldrb	r5, [r2, #0]
   11b68:	bf18      	it	ne
   11b6a:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   11b6c:	f7ff ffd6 	bl	11b1c <find_ccc_cfg>
	if (!cfg) {
   11b70:	4604      	mov	r4, r0
   11b72:	b9f0      	cbnz	r0, 11bb2 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   11b74:	b91d      	cbnz	r5, 11b7e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   11b76:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   11b78:	b007      	add	sp, #28
   11b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   11b7e:	4641      	mov	r1, r8
   11b80:	f7ff ffcc 	bl	11b1c <find_ccc_cfg>
		if (!cfg) {
   11b84:	4604      	mov	r4, r0
   11b86:	b960      	cbnz	r0, 11ba2 <bt_gatt_attr_write_ccc+0x5e>
			BT_WARN("No space to store CCC cfg");
   11b88:	4b1d      	ldr	r3, [pc, #116]	; (11c00 <bt_gatt_attr_write_ccc+0xbc>)
   11b8a:	481e      	ldr	r0, [pc, #120]	; (11c04 <bt_gatt_attr_write_ccc+0xc0>)
   11b8c:	9305      	str	r3, [sp, #20]
   11b8e:	2302      	movs	r3, #2
   11b90:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11b94:	aa04      	add	r2, sp, #16
   11b96:	9304      	str	r3, [sp, #16]
   11b98:	f00b fb15 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   11b9c:	f06f 0010 	mvn.w	r0, #16
   11ba0:	e7ea      	b.n	11b78 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11ba2:	f109 0190 	add.w	r1, r9, #144	; 0x90
   11ba6:	3001      	adds	r0, #1
   11ba8:	f00b fb0a 	bl	1d1c0 <bt_addr_le_copy>
		cfg->id = conn->id;
   11bac:	f899 3008 	ldrb.w	r3, [r9, #8]
   11bb0:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   11bb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   11bb6:	b98b      	cbnz	r3, 11bdc <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   11bb8:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   11bba:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   11bbe:	42ab      	cmp	r3, r5
   11bc0:	d003      	beq.n	11bca <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   11bc2:	4641      	mov	r1, r8
   11bc4:	4638      	mov	r0, r7
   11bc6:	f00b fa7f 	bl	1d0c8 <gatt_ccc_changed>
	if (!value) {
   11bca:	2d00      	cmp	r5, #0
   11bcc:	d1d3      	bne.n	11b76 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11bce:	490e      	ldr	r1, [pc, #56]	; (11c08 <bt_gatt_attr_write_ccc+0xc4>)
   11bd0:	1c60      	adds	r0, r4, #1
   11bd2:	f00b faf5 	bl	1d1c0 <bt_addr_le_copy>
	cfg->id = 0U;
   11bd6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   11bd8:	8125      	strh	r5, [r4, #8]
}
   11bda:	e7cc      	b.n	11b76 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   11bdc:	462a      	mov	r2, r5
   11bde:	4639      	mov	r1, r7
   11be0:	4648      	mov	r0, r9
   11be2:	4798      	blx	r3
		if (write < 0) {
   11be4:	2800      	cmp	r0, #0
   11be6:	dbc7      	blt.n	11b78 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   11be8:	3801      	subs	r0, #1
   11bea:	2801      	cmp	r0, #1
   11bec:	d9e4      	bls.n	11bb8 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   11bee:	f06f 000d 	mvn.w	r0, #13
   11bf2:	e7c1      	b.n	11b78 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11bf4:	f06f 0006 	mvn.w	r0, #6
   11bf8:	e7be      	b.n	11b78 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11bfa:	f06f 000c 	mvn.w	r0, #12
   11bfe:	e7bb      	b.n	11b78 <bt_gatt_attr_write_ccc+0x34>
   11c00:	00021cfb 	.word	0x00021cfb
   11c04:	0001ed94 	.word	0x0001ed94
   11c08:	00020c77 	.word	0x00020c77

00011c0c <clear_cf_cfg>:
{
   11c0c:	b510      	push	{r4, lr}
   11c0e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11c10:	4909      	ldr	r1, [pc, #36]	; (11c38 <clear_cf_cfg+0x2c>)
   11c12:	3001      	adds	r0, #1
   11c14:	f00b fad4 	bl	1d1c0 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   11c18:	f104 0008 	add.w	r0, r4, #8
   11c1c:	2201      	movs	r2, #1
   11c1e:	2100      	movs	r1, #0
   11c20:	f00a fb1e 	bl	1c260 <memset>
   11c24:	2300      	movs	r3, #0
   11c26:	340c      	adds	r4, #12
   11c28:	e8d4 2fef 	ldaex	r2, [r4]
   11c2c:	e8c4 3fe1 	stlex	r1, r3, [r4]
   11c30:	2900      	cmp	r1, #0
   11c32:	d1f9      	bne.n	11c28 <clear_cf_cfg+0x1c>
}
   11c34:	bd10      	pop	{r4, pc}
   11c36:	bf00      	nop
   11c38:	00020c77 	.word	0x00020c77

00011c3c <sc_save>:
{
   11c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c40:	b086      	sub	sp, #24
   11c42:	4680      	mov	r8, r0
   11c44:	460f      	mov	r7, r1
   11c46:	4616      	mov	r6, r2
   11c48:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   11c4a:	f7ff ff57 	bl	11afc <find_sc_cfg>
	if (!cfg) {
   11c4e:	4604      	mov	r4, r0
   11c50:	b9b0      	cbnz	r0, 11c80 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   11c52:	4912      	ldr	r1, [pc, #72]	; (11c9c <sc_save+0x60>)
   11c54:	f7ff ff52 	bl	11afc <find_sc_cfg>
		if (!cfg) {
   11c58:	4604      	mov	r4, r0
   11c5a:	b960      	cbnz	r0, 11c76 <sc_save+0x3a>
			BT_ERR("unable to save SC: no cfg left");
   11c5c:	4b10      	ldr	r3, [pc, #64]	; (11ca0 <sc_save+0x64>)
   11c5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11c62:	9305      	str	r3, [sp, #20]
   11c64:	2302      	movs	r3, #2
   11c66:	480f      	ldr	r0, [pc, #60]	; (11ca4 <sc_save+0x68>)
   11c68:	aa04      	add	r2, sp, #16
   11c6a:	9304      	str	r3, [sp, #16]
   11c6c:	f00b faab 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
}
   11c70:	b006      	add	sp, #24
   11c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   11c76:	4639      	mov	r1, r7
		cfg->id = id;
   11c78:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   11c7c:	f00b faa0 	bl	1d1c0 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   11c80:	8922      	ldrh	r2, [r4, #8]
   11c82:	8963      	ldrh	r3, [r4, #10]
   11c84:	b91a      	cbnz	r2, 11c8e <sc_save+0x52>
   11c86:	b92b      	cbnz	r3, 11c94 <sc_save+0x58>
		cfg->data.start = start;
   11c88:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   11c8a:	8165      	strh	r5, [r4, #10]
   11c8c:	e7f0      	b.n	11c70 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   11c8e:	4296      	cmp	r6, r2
		*start = new_start;
   11c90:	bf38      	it	cc
   11c92:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   11c94:	429d      	cmp	r5, r3
   11c96:	d9eb      	bls.n	11c70 <sc_save+0x34>
   11c98:	e7f7      	b.n	11c8a <sc_save+0x4e>
   11c9a:	bf00      	nop
   11c9c:	00020c77 	.word	0x00020c77
   11ca0:	00021d15 	.word	0x00021d15
   11ca4:	0001ed94 	.word	0x0001ed94

00011ca8 <cf_write>:
{
   11ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cac:	b086      	sub	sp, #24
   11cae:	461f      	mov	r7, r3
   11cb0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   11cb4:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   11cb6:	2b01      	cmp	r3, #1
{
   11cb8:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   11cba:	d83c      	bhi.n	11d36 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   11cbc:	443b      	add	r3, r7
   11cbe:	2b01      	cmp	r3, #1
   11cc0:	463d      	mov	r5, r7
   11cc2:	dc3b      	bgt.n	11d3c <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   11cc4:	f7ff ff02 	bl	11acc <find_cf_cfg>
	if (!cfg) {
   11cc8:	4604      	mov	r4, r0
   11cca:	b998      	cbnz	r0, 11cf4 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   11ccc:	f7ff fefe 	bl	11acc <find_cf_cfg>
	if (!cfg) {
   11cd0:	4604      	mov	r4, r0
   11cd2:	b978      	cbnz	r0, 11cf4 <cf_write+0x4c>
		BT_WARN("No space to store Client Supported Features");
   11cd4:	4b1c      	ldr	r3, [pc, #112]	; (11d48 <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   11cd6:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   11cda:	9305      	str	r3, [sp, #20]
   11cdc:	2302      	movs	r3, #2
   11cde:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11ce2:	481a      	ldr	r0, [pc, #104]	; (11d4c <cf_write+0xa4>)
   11ce4:	aa04      	add	r2, sp, #16
   11ce6:	9304      	str	r3, [sp, #16]
   11ce8:	f00b fa6d 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
}
   11cec:	4628      	mov	r0, r5
   11cee:	b006      	add	sp, #24
   11cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   11cf4:	b197      	cbz	r7, 11d1c <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   11cf6:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   11cf8:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   11cfa:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   11cfe:	fa21 f003 	lsr.w	r0, r1, r3
   11d02:	07c7      	lsls	r7, r0, #31
   11d04:	d503      	bpl.n	11d0e <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   11d06:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   11d0a:	07c0      	lsls	r0, r0, #31
   11d0c:	d519      	bpl.n	11d42 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   11d0e:	3301      	adds	r3, #1
   11d10:	2b03      	cmp	r3, #3
   11d12:	d1f4      	bne.n	11cfe <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   11d14:	f002 0207 	and.w	r2, r2, #7
   11d18:	4311      	orrs	r1, r2
   11d1a:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11d1c:	f106 0190 	add.w	r1, r6, #144	; 0x90
   11d20:	1c60      	adds	r0, r4, #1
   11d22:	f00b fa4d 	bl	1d1c0 <bt_addr_le_copy>
	cfg->id = conn->id;
   11d26:	4620      	mov	r0, r4
   11d28:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   11d2a:	2100      	movs	r1, #0
	cfg->id = conn->id;
   11d2c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   11d30:	f00b fa4c 	bl	1d1cc <atomic_set_bit>
	return len;
   11d34:	e7da      	b.n	11cec <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11d36:	f06f 0506 	mvn.w	r5, #6
   11d3a:	e7d7      	b.n	11cec <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11d3c:	f06f 050c 	mvn.w	r5, #12
   11d40:	e7d4      	b.n	11cec <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   11d42:	f06f 0512 	mvn.w	r5, #18
   11d46:	e7d1      	b.n	11cec <cf_write+0x44>
   11d48:	00021d34 	.word	0x00021d34
   11d4c:	0001ed94 	.word	0x0001ed94

00011d50 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   11d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   11d54:	4b23      	ldr	r3, [pc, #140]	; (11de4 <disconnected_cb+0x94>)
{
   11d56:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   11d58:	6882      	ldr	r2, [r0, #8]
{
   11d5a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11d5c:	429a      	cmp	r2, r3
   11d5e:	d102      	bne.n	11d66 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   11d60:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   11d62:	8963      	ldrh	r3, [r4, #10]
   11d64:	bb33      	cbnz	r3, 11db4 <disconnected_cb+0x64>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   11d66:	2001      	movs	r0, #1
   11d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   11d6c:	f7fd ffa2 	bl	fcb4 <bt_conn_unref>
		ccc->value = 0U;
   11d70:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   11d72:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   11d74:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   11d76:	2b00      	cmp	r3, #0
   11d78:	d0f5      	beq.n	11d66 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   11d7a:	4638      	mov	r0, r7
   11d7c:	4798      	blx	r3
   11d7e:	e7f2      	b.n	11d66 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   11d80:	f105 0890 	add.w	r8, r5, #144	; 0x90
   11d84:	4641      	mov	r1, r8
   11d86:	7a28      	ldrb	r0, [r5, #8]
   11d88:	f00a fb9b 	bl	1c4c2 <bt_addr_le_is_bonded>
   11d8c:	b968      	cbnz	r0, 11daa <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   11d8e:	4b16      	ldr	r3, [pc, #88]	; (11de8 <disconnected_cb+0x98>)
   11d90:	429c      	cmp	r4, r3
   11d92:	d102      	bne.n	11d9a <disconnected_cb+0x4a>
					sc_clear(conn);
   11d94:	4628      	mov	r0, r5
   11d96:	f00b fa43 	bl	1d220 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   11d9a:	4630      	mov	r0, r6
   11d9c:	4913      	ldr	r1, [pc, #76]	; (11dec <disconnected_cb+0x9c>)
   11d9e:	f00b fa0f 	bl	1d1c0 <bt_addr_le_copy>
	cfg->id = 0U;
   11da2:	2300      	movs	r3, #0
   11da4:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   11da6:	8123      	strh	r3, [r4, #8]
}
   11da8:	e7e2      	b.n	11d70 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11daa:	4641      	mov	r1, r8
   11dac:	4630      	mov	r0, r6
   11dae:	f00b fa07 	bl	1d1c0 <bt_addr_le_copy>
   11db2:	e7dd      	b.n	11d70 <disconnected_cb+0x20>
		if (!cfg->value) {
   11db4:	8923      	ldrh	r3, [r4, #8]
   11db6:	2b00      	cmp	r3, #0
   11db8:	d0da      	beq.n	11d70 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11dba:	4626      	mov	r6, r4
   11dbc:	f816 1b01 	ldrb.w	r1, [r6], #1
   11dc0:	4628      	mov	r0, r5
   11dc2:	4632      	mov	r2, r6
   11dc4:	f00a fcc8 	bl	1c758 <bt_conn_is_peer_addr_le>
   11dc8:	2800      	cmp	r0, #0
   11dca:	d1d9      	bne.n	11d80 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   11dcc:	4631      	mov	r1, r6
   11dce:	7820      	ldrb	r0, [r4, #0]
   11dd0:	f7fe f9cc 	bl	1016c <bt_conn_lookup_addr_le>
			if (tmp) {
   11dd4:	2800      	cmp	r0, #0
   11dd6:	d0cb      	beq.n	11d70 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   11dd8:	7a83      	ldrb	r3, [r0, #10]
   11dda:	2b07      	cmp	r3, #7
   11ddc:	d1c6      	bne.n	11d6c <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   11dde:	f7fd ff69 	bl	fcb4 <bt_conn_unref>
	if (!value_used) {
   11de2:	e7c0      	b.n	11d66 <disconnected_cb+0x16>
   11de4:	00011b45 	.word	0x00011b45
   11de8:	20008258 	.word	0x20008258
   11dec:	00020c77 	.word	0x00020c77

00011df0 <read_ppcp>:
{
   11df0:	b513      	push	{r0, r1, r4, lr}
   11df2:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   11df4:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   11df8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   11dfc:	4c09      	ldr	r4, [pc, #36]	; (11e24 <read_ppcp+0x34>)
	if (offset > value_len) {
   11dfe:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   11e00:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   11e04:	d80b      	bhi.n	11e1e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   11e06:	f1c1 0408 	rsb	r4, r1, #8
   11e0a:	429c      	cmp	r4, r3
   11e0c:	bfa8      	it	ge
   11e0e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   11e10:	4469      	add	r1, sp
   11e12:	4622      	mov	r2, r4
   11e14:	f00a fa19 	bl	1c24a <memcpy>
}
   11e18:	4620      	mov	r0, r4
   11e1a:	b002      	add	sp, #8
   11e1c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11e1e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   11e22:	e7f9      	b.n	11e18 <read_ppcp+0x28>
   11e24:	00280018 	.word	0x00280018

00011e28 <sc_indicate_rsp>:
{
   11e28:	b510      	push	{r4, lr}
   11e2a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11e2c:	4811      	ldr	r0, [pc, #68]	; (11e74 <sc_indicate_rsp+0x4c>)
   11e2e:	e8d0 3fef 	ldaex	r3, [r0]
   11e32:	f023 0302 	bic.w	r3, r3, #2
   11e36:	e8c0 3fe2 	stlex	r2, r3, [r0]
   11e3a:	2a00      	cmp	r2, #0
   11e3c:	d1f7      	bne.n	11e2e <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11e3e:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   11e42:	07da      	lsls	r2, r3, #31
   11e44:	d504      	bpl.n	11e50 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   11e46:	2200      	movs	r2, #0
   11e48:	2300      	movs	r3, #0
   11e4a:	3830      	subs	r0, #48	; 0x30
   11e4c:	f006 fce2 	bl	18814 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   11e50:	4620      	mov	r0, r4
   11e52:	f00b f90c 	bl	1d06e <bt_att_fixed_chan_only>
   11e56:	b160      	cbz	r0, 11e72 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   11e58:	4620      	mov	r0, r4
   11e5a:	f7ff fe37 	bl	11acc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   11e5e:	b140      	cbz	r0, 11e72 <sc_indicate_rsp+0x4a>
   11e60:	7a03      	ldrb	r3, [r0, #8]
   11e62:	07db      	lsls	r3, r3, #31
   11e64:	d505      	bpl.n	11e72 <sc_indicate_rsp+0x4a>
}
   11e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   11e6a:	2100      	movs	r1, #0
   11e6c:	300c      	adds	r0, #12
   11e6e:	f00b b9ad 	b.w	1d1cc <atomic_set_bit>
}
   11e72:	bd10      	pop	{r4, pc}
   11e74:	200093f0 	.word	0x200093f0

00011e78 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11e78:	2201      	movs	r2, #1
{
   11e7a:	b510      	push	{r4, lr}
   11e7c:	4b24      	ldr	r3, [pc, #144]	; (11f10 <bt_gatt_init+0x98>)
   11e7e:	e8d3 1fef 	ldaex	r1, [r3]
   11e82:	2900      	cmp	r1, #0
   11e84:	d103      	bne.n	11e8e <bt_gatt_init+0x16>
   11e86:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11e8a:	2800      	cmp	r0, #0
   11e8c:	d1f7      	bne.n	11e7e <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   11e8e:	d13e      	bne.n	11f0e <bt_gatt_init+0x96>
   11e90:	4b20      	ldr	r3, [pc, #128]	; (11f14 <bt_gatt_init+0x9c>)
   11e92:	e8d3 1fef 	ldaex	r1, [r3]
   11e96:	2900      	cmp	r1, #0
   11e98:	d103      	bne.n	11ea2 <bt_gatt_init+0x2a>
   11e9a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11e9e:	2800      	cmp	r0, #0
   11ea0:	d1f7      	bne.n	11e92 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   11ea2:	d120      	bne.n	11ee6 <bt_gatt_init+0x6e>
   11ea4:	2000      	movs	r0, #0
   11ea6:	491c      	ldr	r1, [pc, #112]	; (11f18 <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11ea8:	4a1c      	ldr	r2, [pc, #112]	; (11f1c <bt_gatt_init+0xa4>)
   11eaa:	880b      	ldrh	r3, [r1, #0]
   11eac:	4c1c      	ldr	r4, [pc, #112]	; (11f20 <bt_gatt_init+0xa8>)
   11eae:	42a2      	cmp	r2, r4
   11eb0:	d916      	bls.n	11ee0 <bt_gatt_init+0x68>
   11eb2:	b100      	cbz	r0, 11eb6 <bt_gatt_init+0x3e>
   11eb4:	800b      	strh	r3, [r1, #0]
   11eb6:	491b      	ldr	r1, [pc, #108]	; (11f24 <bt_gatt_init+0xac>)
   11eb8:	f240 530e 	movw	r3, #1294	; 0x50e
   11ebc:	4a1a      	ldr	r2, [pc, #104]	; (11f28 <bt_gatt_init+0xb0>)
   11ebe:	481b      	ldr	r0, [pc, #108]	; (11f2c <bt_gatt_init+0xb4>)
   11ec0:	f009 f9b4 	bl	1b22c <assert_print>
   11ec4:	481a      	ldr	r0, [pc, #104]	; (11f30 <bt_gatt_init+0xb8>)
   11ec6:	f009 f9b1 	bl	1b22c <assert_print>
   11eca:	f240 510e 	movw	r1, #1294	; 0x50e
   11ece:	4816      	ldr	r0, [pc, #88]	; (11f28 <bt_gatt_init+0xb0>)
   11ed0:	f009 f9a5 	bl	1b21e <assert_post_action>
		last_static_handle += svc->attr_count;
   11ed4:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11ed6:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   11ed8:	4403      	add	r3, r0
   11eda:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11edc:	2001      	movs	r0, #1
   11ede:	e7e6      	b.n	11eae <bt_gatt_init+0x36>
   11ee0:	d3f8      	bcc.n	11ed4 <bt_gatt_init+0x5c>
   11ee2:	b100      	cbz	r0, 11ee6 <bt_gatt_init+0x6e>
   11ee4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   11ee6:	2200      	movs	r2, #0
   11ee8:	4b12      	ldr	r3, [pc, #72]	; (11f34 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   11eea:	4913      	ldr	r1, [pc, #76]	; (11f38 <bt_gatt_init+0xc0>)
   11eec:	4813      	ldr	r0, [pc, #76]	; (11f3c <bt_gatt_init+0xc4>)
	list->tail = NULL;
   11eee:	e9c3 2200 	strd	r2, r2, [r3]
   11ef2:	f006 fb73 	bl	185dc <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   11ef6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   11efa:	2300      	movs	r3, #0
   11efc:	480f      	ldr	r0, [pc, #60]	; (11f3c <bt_gatt_init+0xc4>)
   11efe:	f7fb f909 	bl	d114 <bt_long_wq_schedule>
}
   11f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   11f06:	490e      	ldr	r1, [pc, #56]	; (11f40 <bt_gatt_init+0xc8>)
   11f08:	480e      	ldr	r0, [pc, #56]	; (11f44 <bt_gatt_init+0xcc>)
   11f0a:	f006 bb67 	b.w	185dc <k_work_init_delayable>
}
   11f0e:	bd10      	pop	{r4, pc}
   11f10:	20009828 	.word	0x20009828
   11f14:	20009824 	.word	0x20009824
   11f18:	20009b06 	.word	0x20009b06
   11f1c:	0001ed4c 	.word	0x0001ed4c
   11f20:	0001ed64 	.word	0x0001ed64
   11f24:	00021d97 	.word	0x00021d97
   11f28:	00021d60 	.word	0x00021d60
   11f2c:	0001f995 	.word	0x0001f995
   11f30:	00020078 	.word	0x00020078
   11f34:	2000982c 	.word	0x2000982c
   11f38:	0001d469 	.word	0x0001d469
   11f3c:	20009348 	.word	0x20009348
   11f40:	000125bd 	.word	0x000125bd
   11f44:	200093c0 	.word	0x200093c0

00011f48 <bt_gatt_attr_get_handle>:
	if (!attr) {
   11f48:	4603      	mov	r3, r0
{
   11f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   11f4e:	b398      	cbz	r0, 11fb8 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   11f50:	8a00      	ldrh	r0, [r0, #16]
   11f52:	bb88      	cbnz	r0, 11fb8 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   11f54:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11f56:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11f5a:	4919      	ldr	r1, [pc, #100]	; (11fc0 <bt_gatt_attr_get_handle+0x78>)
   11f5c:	f8df e064 	ldr.w	lr, [pc, #100]	; 11fc4 <bt_gatt_attr_get_handle+0x7c>
   11f60:	4571      	cmp	r1, lr
   11f62:	d928      	bls.n	11fb6 <bt_gatt_attr_get_handle+0x6e>
   11f64:	4918      	ldr	r1, [pc, #96]	; (11fc8 <bt_gatt_attr_get_handle+0x80>)
   11f66:	f240 6365 	movw	r3, #1637	; 0x665
   11f6a:	4a18      	ldr	r2, [pc, #96]	; (11fcc <bt_gatt_attr_get_handle+0x84>)
   11f6c:	4818      	ldr	r0, [pc, #96]	; (11fd0 <bt_gatt_attr_get_handle+0x88>)
   11f6e:	f009 f95d 	bl	1b22c <assert_print>
   11f72:	4818      	ldr	r0, [pc, #96]	; (11fd4 <bt_gatt_attr_get_handle+0x8c>)
   11f74:	f009 f95a 	bl	1b22c <assert_print>
   11f78:	f240 6165 	movw	r1, #1637	; 0x665
   11f7c:	4813      	ldr	r0, [pc, #76]	; (11fcc <bt_gatt_attr_get_handle+0x84>)
   11f7e:	f009 f94e 	bl	1b21e <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11f82:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   11f86:	42bb      	cmp	r3, r7
   11f88:	d304      	bcc.n	11f94 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   11f8a:	fb0c 7206 	mla	r2, ip, r6, r7
   11f8e:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   11f90:	4293      	cmp	r3, r2
   11f92:	d90e      	bls.n	11fb2 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   11f94:	4434      	add	r4, r6
   11f96:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11f98:	4614      	mov	r4, r2
   11f9a:	3108      	adds	r1, #8
   11f9c:	e7e0      	b.n	11f60 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   11f9e:	fb0c 7805 	mla	r8, ip, r5, r7
   11fa2:	4543      	cmp	r3, r8
   11fa4:	d00a      	beq.n	11fbc <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   11fa6:	3501      	adds	r5, #1
   11fa8:	1962      	adds	r2, r4, r5
   11faa:	42b5      	cmp	r5, r6
   11fac:	b292      	uxth	r2, r2
   11fae:	d1f6      	bne.n	11f9e <bt_gatt_attr_get_handle+0x56>
   11fb0:	e7f2      	b.n	11f98 <bt_gatt_attr_get_handle+0x50>
   11fb2:	2500      	movs	r5, #0
   11fb4:	e7f8      	b.n	11fa8 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11fb6:	d3e4      	bcc.n	11f82 <bt_gatt_attr_get_handle+0x3a>
}
   11fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fbc:	4610      	mov	r0, r2
   11fbe:	e7fb      	b.n	11fb8 <bt_gatt_attr_get_handle+0x70>
   11fc0:	0001ed4c 	.word	0x0001ed4c
   11fc4:	0001ed64 	.word	0x0001ed64
   11fc8:	00021d90 	.word	0x00021d90
   11fcc:	00021d60 	.word	0x00021d60
   11fd0:	0001f995 	.word	0x0001f995
   11fd4:	00020078 	.word	0x00020078

00011fd8 <bt_gatt_foreach_attr_type>:
{
   11fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fdc:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   11fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   11fe2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11fe6:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   11fe8:	2d00      	cmp	r5, #0
   11fea:	bf08      	it	eq
   11fec:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   11fee:	4b2b      	ldr	r3, [pc, #172]	; (1209c <bt_gatt_foreach_attr_type+0xc4>)
{
   11ff0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   11ff2:	881b      	ldrh	r3, [r3, #0]
{
   11ff4:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   11ff6:	4283      	cmp	r3, r0
   11ff8:	d232      	bcs.n	12060 <bt_gatt_foreach_attr_type+0x88>
}
   11ffa:	b003      	add	sp, #12
   11ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12000:	4640      	mov	r0, r8
   12002:	5889      	ldr	r1, [r1, r2]
   12004:	9301      	str	r3, [sp, #4]
   12006:	f00a f937 	bl	1c278 <bt_uuid_cmp>
   1200a:	9b01      	ldr	r3, [sp, #4]
   1200c:	b190      	cbz	r0, 12034 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1200e:	3401      	adds	r4, #1
   12010:	f10a 0a01 	add.w	sl, sl, #1
   12014:	b2a4      	uxth	r4, r4
   12016:	6873      	ldr	r3, [r6, #4]
   12018:	4553      	cmp	r3, sl
   1201a:	d92c      	bls.n	12076 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1201c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1201e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   12020:	429c      	cmp	r4, r3
   12022:	d8ea      	bhi.n	11ffa <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   12024:	42bc      	cmp	r4, r7
   12026:	d3f2      	bcc.n	1200e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12028:	fb0b f20a 	mul.w	r2, fp, sl
   1202c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1202e:	f1b8 0f00 	cmp.w	r8, #0
   12032:	d1e5      	bne.n	12000 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   12034:	f1b9 0f00 	cmp.w	r9, #0
   12038:	d10b      	bne.n	12052 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1203a:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1203c:	4618      	mov	r0, r3
	*num_matches -= 1;
   1203e:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   12040:	4621      	mov	r1, r4
   12042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12046:	4798      	blx	r3
	if (!*num_matches) {
   12048:	2d00      	cmp	r5, #0
   1204a:	d0d6      	beq.n	11ffa <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1204c:	2800      	cmp	r0, #0
   1204e:	d1de      	bne.n	1200e <bt_gatt_foreach_attr_type+0x36>
   12050:	e7d3      	b.n	11ffa <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   12052:	68da      	ldr	r2, [r3, #12]
   12054:	4591      	cmp	r9, r2
   12056:	d1da      	bne.n	1200e <bt_gatt_foreach_attr_type+0x36>
   12058:	e7ef      	b.n	1203a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1205a:	f04f 0a00 	mov.w	sl, #0
   1205e:	e7da      	b.n	12016 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   12060:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12062:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12066:	4e0e      	ldr	r6, [pc, #56]	; (120a0 <bt_gatt_foreach_attr_type+0xc8>)
   12068:	e006      	b.n	12078 <bt_gatt_foreach_attr_type+0xa0>
   1206a:	d2c6      	bcs.n	11ffa <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1206c:	6873      	ldr	r3, [r6, #4]
   1206e:	4423      	add	r3, r4
   12070:	42bb      	cmp	r3, r7
   12072:	d2f2      	bcs.n	1205a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   12074:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12076:	3608      	adds	r6, #8
   12078:	4b0a      	ldr	r3, [pc, #40]	; (120a4 <bt_gatt_foreach_attr_type+0xcc>)
   1207a:	429e      	cmp	r6, r3
   1207c:	d9f5      	bls.n	1206a <bt_gatt_foreach_attr_type+0x92>
   1207e:	490a      	ldr	r1, [pc, #40]	; (120a8 <bt_gatt_foreach_attr_type+0xd0>)
   12080:	f240 7329 	movw	r3, #1833	; 0x729
   12084:	4a09      	ldr	r2, [pc, #36]	; (120ac <bt_gatt_foreach_attr_type+0xd4>)
   12086:	480a      	ldr	r0, [pc, #40]	; (120b0 <bt_gatt_foreach_attr_type+0xd8>)
   12088:	f009 f8d0 	bl	1b22c <assert_print>
   1208c:	4809      	ldr	r0, [pc, #36]	; (120b4 <bt_gatt_foreach_attr_type+0xdc>)
   1208e:	f009 f8cd 	bl	1b22c <assert_print>
   12092:	f240 7129 	movw	r1, #1833	; 0x729
   12096:	4805      	ldr	r0, [pc, #20]	; (120ac <bt_gatt_foreach_attr_type+0xd4>)
   12098:	f009 f8c1 	bl	1b21e <assert_post_action>
   1209c:	20009b06 	.word	0x20009b06
   120a0:	0001ed4c 	.word	0x0001ed4c
   120a4:	0001ed64 	.word	0x0001ed64
   120a8:	00021d90 	.word	0x00021d90
   120ac:	00021d60 	.word	0x00021d60
   120b0:	0001f995 	.word	0x0001f995
   120b4:	00020078 	.word	0x00020078

000120b8 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   120b8:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   120ba:	b510      	push	{r4, lr}
   120bc:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   120be:	4669      	mov	r1, sp
   120c0:	aa22      	add	r2, sp, #136	; 0x88
   120c2:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   120c4:	e9cd 3300 	strd	r3, r3, [sp]
   120c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   120cc:	f009 fd34 	bl	1bb38 <tc_cmac_setup>
   120d0:	b958      	cbnz	r0, 120ea <db_hash_gen.constprop.0+0x32>
		BT_ERR("Unable to setup AES CMAC");
   120d2:	4b18      	ldr	r3, [pc, #96]	; (12134 <db_hash_gen.constprop.0+0x7c>)
		BT_ERR("Unable to calculate hash");
   120d4:	9309      	str	r3, [sp, #36]	; 0x24
   120d6:	2302      	movs	r3, #2
   120d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   120dc:	4816      	ldr	r0, [pc, #88]	; (12138 <db_hash_gen.constprop.0+0x80>)
   120de:	aa08      	add	r2, sp, #32
   120e0:	9308      	str	r3, [sp, #32]
   120e2:	f00b f870 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
}
   120e6:	b04e      	add	sp, #312	; 0x138
   120e8:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   120ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   120ee:	2001      	movs	r0, #1
   120f0:	4a12      	ldr	r2, [pc, #72]	; (1213c <db_hash_gen.constprop.0+0x84>)
   120f2:	ab0a      	add	r3, sp, #40	; 0x28
   120f4:	f00b f9ad 	bl	1d452 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   120f8:	4811      	ldr	r0, [pc, #68]	; (12140 <db_hash_gen.constprop.0+0x88>)
   120fa:	a90a      	add	r1, sp, #40	; 0x28
   120fc:	f009 fdb1 	bl	1bc62 <tc_cmac_final>
   12100:	b908      	cbnz	r0, 12106 <db_hash_gen.constprop.0+0x4e>
		BT_ERR("Unable to calculate hash");
   12102:	4b10      	ldr	r3, [pc, #64]	; (12144 <db_hash_gen.constprop.0+0x8c>)
   12104:	e7e6      	b.n	120d4 <db_hash_gen.constprop.0+0x1c>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   12106:	2208      	movs	r2, #8
   12108:	4b0d      	ldr	r3, [pc, #52]	; (12140 <db_hash_gen.constprop.0+0x88>)
   1210a:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1210e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12110:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   12114:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12116:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1211a:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1211c:	d1f7      	bne.n	1210e <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1211e:	4b0a      	ldr	r3, [pc, #40]	; (12148 <db_hash_gen.constprop.0+0x90>)
   12120:	e8d3 1fef 	ldaex	r1, [r3]
   12124:	f041 0104 	orr.w	r1, r1, #4
   12128:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1212c:	2a00      	cmp	r2, #0
   1212e:	d0da      	beq.n	120e6 <db_hash_gen.constprop.0+0x2e>
   12130:	e7f6      	b.n	12120 <db_hash_gen.constprop.0+0x68>
   12132:	bf00      	nop
   12134:	00021dbf 	.word	0x00021dbf
   12138:	0001ed94 	.word	0x0001ed94
   1213c:	0001d10b 	.word	0x0001d10b
   12140:	20009338 	.word	0x20009338
   12144:	00021dd8 	.word	0x00021dd8
   12148:	200093f0 	.word	0x200093f0

0001214c <db_hash_read>:
{
   1214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1214e:	4919      	ldr	r1, [pc, #100]	; (121b4 <db_hash_read+0x68>)
{
   12150:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12152:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   12156:	4615      	mov	r5, r2
   12158:	461f      	mov	r7, r3
   1215a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1215e:	f006 fbb9 	bl	188d4 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12162:	4b15      	ldr	r3, [pc, #84]	; (121b8 <db_hash_read+0x6c>)
   12164:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   12168:	0759      	lsls	r1, r3, #29
   1216a:	d401      	bmi.n	12170 <db_hash_read+0x24>
		db_hash_gen(true);
   1216c:	f7ff ffa4 	bl	120b8 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   12170:	4620      	mov	r0, r4
   12172:	f7ff fcab 	bl	11acc <find_cf_cfg>
	if (cfg &&
   12176:	b150      	cbz	r0, 1218e <db_hash_read+0x42>
   12178:	7a03      	ldrb	r3, [r0, #8]
   1217a:	07da      	lsls	r2, r3, #31
   1217c:	d507      	bpl.n	1218e <db_hash_read+0x42>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1217e:	300c      	adds	r0, #12
   12180:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   12184:	07db      	lsls	r3, r3, #31
   12186:	d402      	bmi.n	1218e <db_hash_read+0x42>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   12188:	2101      	movs	r1, #1
   1218a:	f00b f81f 	bl	1d1cc <atomic_set_bit>
	if (offset > value_len) {
   1218e:	2e10      	cmp	r6, #16
   12190:	d80c      	bhi.n	121ac <db_hash_read+0x60>
	len = MIN(buf_len, value_len - offset);
   12192:	f1c6 0410 	rsb	r4, r6, #16
   12196:	42bc      	cmp	r4, r7
   12198:	bfa8      	it	ge
   1219a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1219c:	4907      	ldr	r1, [pc, #28]	; (121bc <db_hash_read+0x70>)
   1219e:	4622      	mov	r2, r4
   121a0:	4628      	mov	r0, r5
   121a2:	4431      	add	r1, r6
   121a4:	f00a f851 	bl	1c24a <memcpy>
}
   121a8:	4620      	mov	r0, r4
   121aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   121ac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   121b0:	e7fa      	b.n	121a8 <db_hash_read+0x5c>
   121b2:	bf00      	nop
   121b4:	20009378 	.word	0x20009378
   121b8:	200093f0 	.word	0x200093f0
   121bc:	20009338 	.word	0x20009338

000121c0 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   121c0:	2300      	movs	r3, #0
{
   121c2:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   121c4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   121c6:	f7ff febf 	bl	11f48 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   121ca:	1c41      	adds	r1, r0, #1
   121cc:	b289      	uxth	r1, r1
   121ce:	4608      	mov	r0, r1
   121d0:	4a03      	ldr	r2, [pc, #12]	; (121e0 <bt_gatt_attr_next+0x20>)
   121d2:	ab01      	add	r3, sp, #4
   121d4:	f00b f93d 	bl	1d452 <bt_gatt_foreach_attr>
}
   121d8:	9801      	ldr	r0, [sp, #4]
   121da:	b003      	add	sp, #12
   121dc:	f85d fb04 	ldr.w	pc, [sp], #4
   121e0:	0001d0c3 	.word	0x0001d0c3

000121e4 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   121e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   121e8:	460c      	mov	r4, r1
   121ea:	4617      	mov	r7, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   121ec:	4605      	mov	r5, r0
   121ee:	b970      	cbnz	r0, 1220e <bt_gatt_is_subscribed+0x2a>
   121f0:	495b      	ldr	r1, [pc, #364]	; (12360 <bt_gatt_is_subscribed+0x17c>)
   121f2:	f640 434b 	movw	r3, #3147	; 0xc4b
   121f6:	4a5b      	ldr	r2, [pc, #364]	; (12364 <bt_gatt_is_subscribed+0x180>)
   121f8:	485b      	ldr	r0, [pc, #364]	; (12368 <bt_gatt_is_subscribed+0x184>)
   121fa:	f009 f817 	bl	1b22c <assert_print>
   121fe:	485b      	ldr	r0, [pc, #364]	; (1236c <bt_gatt_is_subscribed+0x188>)
   12200:	f009 f814 	bl	1b22c <assert_print>
   12204:	f640 414b 	movw	r1, #3147	; 0xc4b
	__ASSERT(attr, "invalid parameter\n");
   12208:	4856      	ldr	r0, [pc, #344]	; (12364 <bt_gatt_is_subscribed+0x180>)
   1220a:	f009 f808 	bl	1b21e <assert_post_action>
   1220e:	b961      	cbnz	r1, 1222a <bt_gatt_is_subscribed+0x46>
   12210:	4957      	ldr	r1, [pc, #348]	; (12370 <bt_gatt_is_subscribed+0x18c>)
   12212:	f640 434c 	movw	r3, #3148	; 0xc4c
   12216:	4a53      	ldr	r2, [pc, #332]	; (12364 <bt_gatt_is_subscribed+0x180>)
   12218:	4853      	ldr	r0, [pc, #332]	; (12368 <bt_gatt_is_subscribed+0x184>)
   1221a:	f009 f807 	bl	1b22c <assert_print>
   1221e:	4853      	ldr	r0, [pc, #332]	; (1236c <bt_gatt_is_subscribed+0x188>)
   12220:	f009 f804 	bl	1b22c <assert_print>
   12224:	f640 414c 	movw	r1, #3148	; 0xc4c
   12228:	e7ee      	b.n	12208 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   1222a:	7a83      	ldrb	r3, [r0, #10]
   1222c:	2b07      	cmp	r3, #7
   1222e:	d110      	bne.n	12252 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   12230:	2300      	movs	r3, #0
   12232:	f88d 300c 	strb.w	r3, [sp, #12]
   12236:	f642 0303 	movw	r3, #10243	; 0x2803
   1223a:	6820      	ldr	r0, [r4, #0]
   1223c:	a903      	add	r1, sp, #12
   1223e:	f8ad 300e 	strh.w	r3, [sp, #14]
   12242:	f00a f819 	bl	1c278 <bt_uuid_cmp>
   12246:	b9d0      	cbnz	r0, 1227e <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   12248:	68e3      	ldr	r3, [r4, #12]
   1224a:	799b      	ldrb	r3, [r3, #6]
   1224c:	f013 0f30 	tst.w	r3, #48	; 0x30
   12250:	d103      	bne.n	1225a <bt_gatt_is_subscribed+0x76>
		return false;
   12252:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   12254:	b004      	add	sp, #16
   12256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1225a:	4620      	mov	r0, r4
   1225c:	f7ff ffb0 	bl	121c0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   12260:	4604      	mov	r4, r0
   12262:	b960      	cbnz	r0, 1227e <bt_gatt_is_subscribed+0x9a>
   12264:	4942      	ldr	r1, [pc, #264]	; (12370 <bt_gatt_is_subscribed+0x18c>)
   12266:	f640 435d 	movw	r3, #3165	; 0xc5d
   1226a:	4a3e      	ldr	r2, [pc, #248]	; (12364 <bt_gatt_is_subscribed+0x180>)
   1226c:	483e      	ldr	r0, [pc, #248]	; (12368 <bt_gatt_is_subscribed+0x184>)
   1226e:	f008 ffdd 	bl	1b22c <assert_print>
   12272:	4840      	ldr	r0, [pc, #256]	; (12374 <bt_gatt_is_subscribed+0x190>)
   12274:	f008 ffda 	bl	1b22c <assert_print>
   12278:	f640 415d 	movw	r1, #3165	; 0xc5d
   1227c:	e7c4      	b.n	12208 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1227e:	2300      	movs	r3, #0
   12280:	6820      	ldr	r0, [r4, #0]
   12282:	f88d 300c 	strb.w	r3, [sp, #12]
   12286:	f642 1302 	movw	r3, #10498	; 0x2902
   1228a:	a903      	add	r1, sp, #12
   1228c:	f8ad 300e 	strh.w	r3, [sp, #14]
   12290:	f009 fff2 	bl	1c278 <bt_uuid_cmp>
   12294:	b188      	cbz	r0, 122ba <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   12296:	4620      	mov	r0, r4
   12298:	f7ff ff92 	bl	121c0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1229c:	4604      	mov	r4, r0
   1229e:	b960      	cbnz	r0, 122ba <bt_gatt_is_subscribed+0xd6>
   122a0:	4933      	ldr	r1, [pc, #204]	; (12370 <bt_gatt_is_subscribed+0x18c>)
   122a2:	f640 4363 	movw	r3, #3171	; 0xc63
   122a6:	4a2f      	ldr	r2, [pc, #188]	; (12364 <bt_gatt_is_subscribed+0x180>)
   122a8:	482f      	ldr	r0, [pc, #188]	; (12368 <bt_gatt_is_subscribed+0x184>)
   122aa:	f008 ffbf 	bl	1b22c <assert_print>
   122ae:	4831      	ldr	r0, [pc, #196]	; (12374 <bt_gatt_is_subscribed+0x190>)
   122b0:	f008 ffbc 	bl	1b22c <assert_print>
   122b4:	f640 4163 	movw	r1, #3171	; 0xc63
   122b8:	e7a6      	b.n	12208 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   122ba:	2600      	movs	r6, #0
   122bc:	f642 1802 	movw	r8, #10498	; 0x2902
   122c0:	6820      	ldr	r0, [r4, #0]
   122c2:	4669      	mov	r1, sp
   122c4:	f88d 6000 	strb.w	r6, [sp]
   122c8:	f8ad 8002 	strh.w	r8, [sp, #2]
   122cc:	f009 ffd4 	bl	1c278 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   122d0:	b9d8      	cbnz	r0, 1230a <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   122d2:	2300      	movs	r3, #0
   122d4:	6820      	ldr	r0, [r4, #0]
   122d6:	f88d 300c 	strb.w	r3, [sp, #12]
   122da:	f642 1302 	movw	r3, #10498	; 0x2902
   122de:	a903      	add	r1, sp, #12
   122e0:	f8ad 300e 	strh.w	r3, [sp, #14]
   122e4:	f009 ffc8 	bl	1c278 <bt_uuid_cmp>
   122e8:	2800      	cmp	r0, #0
   122ea:	d1b2      	bne.n	12252 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   122ec:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   122ee:	4628      	mov	r0, r5
   122f0:	4622      	mov	r2, r4
   122f2:	f812 1b01 	ldrb.w	r1, [r2], #1
   122f6:	f00a fa2f 	bl	1c758 <bt_conn_is_peer_addr_le>
   122fa:	2800      	cmp	r0, #0
   122fc:	d0a9      	beq.n	12252 <bt_gatt_is_subscribed+0x6e>
   122fe:	8923      	ldrh	r3, [r4, #8]
   12300:	421f      	tst	r7, r3
   12302:	bf14      	ite	ne
   12304:	2001      	movne	r0, #1
   12306:	2000      	moveq	r0, #0
   12308:	e7a4      	b.n	12254 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1230a:	f642 0303 	movw	r3, #10243	; 0x2803
   1230e:	6820      	ldr	r0, [r4, #0]
   12310:	a901      	add	r1, sp, #4
   12312:	f88d 6004 	strb.w	r6, [sp, #4]
   12316:	f8ad 3006 	strh.w	r3, [sp, #6]
   1231a:	f009 ffad 	bl	1c278 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1231e:	2800      	cmp	r0, #0
   12320:	d0d7      	beq.n	122d2 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12322:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12326:	6820      	ldr	r0, [r4, #0]
   12328:	a902      	add	r1, sp, #8
   1232a:	f88d 6008 	strb.w	r6, [sp, #8]
   1232e:	f8ad 300a 	strh.w	r3, [sp, #10]
   12332:	f009 ffa1 	bl	1c278 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   12336:	2800      	cmp	r0, #0
   12338:	d0cb      	beq.n	122d2 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1233a:	f642 0301 	movw	r3, #10241	; 0x2801
   1233e:	6820      	ldr	r0, [r4, #0]
   12340:	a903      	add	r1, sp, #12
   12342:	f88d 600c 	strb.w	r6, [sp, #12]
   12346:	f8ad 300e 	strh.w	r3, [sp, #14]
   1234a:	f009 ff95 	bl	1c278 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1234e:	2800      	cmp	r0, #0
   12350:	d0bf      	beq.n	122d2 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   12352:	4620      	mov	r0, r4
   12354:	f7ff ff34 	bl	121c0 <bt_gatt_attr_next>
		if (!attr) {
   12358:	4604      	mov	r4, r0
   1235a:	2800      	cmp	r0, #0
   1235c:	d1b0      	bne.n	122c0 <bt_gatt_is_subscribed+0xdc>
   1235e:	e778      	b.n	12252 <bt_gatt_is_subscribed+0x6e>
   12360:	0002118c 	.word	0x0002118c
   12364:	00021d60 	.word	0x00021d60
   12368:	0001f995 	.word	0x0001f995
   1236c:	00021df1 	.word	0x00021df1
   12370:	00021e06 	.word	0x00021e06
   12374:	00021e0b 	.word	0x00021e0b

00012378 <gatt_indicate>:
{
   12378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1237c:	4615      	mov	r5, r2
   1237e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12380:	2294      	movs	r2, #148	; 0x94
   12382:	6869      	ldr	r1, [r5, #4]
{
   12384:	b086      	sub	sp, #24
   12386:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12388:	f00b f870 	bl	1d46c <bt_gatt_check_perm>
   1238c:	4680      	mov	r8, r0
   1238e:	b178      	cbz	r0, 123b0 <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   12390:	4b34      	ldr	r3, [pc, #208]	; (12464 <gatt_indicate+0xec>)
		return -EPERM;
   12392:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
   12396:	9305      	str	r3, [sp, #20]
   12398:	2302      	movs	r3, #2
   1239a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1239e:	4832      	ldr	r0, [pc, #200]	; (12468 <gatt_indicate+0xf0>)
   123a0:	aa04      	add	r2, sp, #16
   123a2:	9304      	str	r3, [sp, #16]
   123a4:	f00a ff0f 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
}
   123a8:	4628      	mov	r0, r5
   123aa:	b006      	add	sp, #24
   123ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   123b0:	2202      	movs	r2, #2
   123b2:	4630      	mov	r0, r6
   123b4:	6869      	ldr	r1, [r5, #4]
   123b6:	f7ff ff15 	bl	121e4 <bt_gatt_is_subscribed>
   123ba:	b960      	cbnz	r0, 123d6 <gatt_indicate+0x5e>
			BT_WARN("Device is not subscribed to characteristic");
   123bc:	4b2b      	ldr	r3, [pc, #172]	; (1246c <gatt_indicate+0xf4>)
   123be:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   123c2:	9305      	str	r3, [sp, #20]
   123c4:	2302      	movs	r3, #2
   123c6:	4828      	ldr	r0, [pc, #160]	; (12468 <gatt_indicate+0xf0>)
   123c8:	aa04      	add	r2, sp, #16
   123ca:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   123cc:	f06f 0515 	mvn.w	r5, #21
			BT_WARN("Device is not subscribed to characteristic");
   123d0:	f00a fef9 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   123d4:	e7e8      	b.n	123a8 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   123d6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   123da:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   123dc:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   123de:	f7ff f9e3 	bl	117a8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   123e2:	3702      	adds	r7, #2
	if (!req) {
   123e4:	4604      	mov	r4, r0
   123e6:	b1b0      	cbz	r0, 12416 <gatt_indicate+0x9e>
	req->func = func;
   123e8:	4b21      	ldr	r3, [pc, #132]	; (12470 <gatt_indicate+0xf8>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   123ea:	463a      	mov	r2, r7
	req->func = func;
   123ec:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   123ee:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   123f0:	211d      	movs	r1, #29
   123f2:	4630      	mov	r0, r6
   123f4:	f7fe ff06 	bl	11204 <bt_att_create_pdu>
	if (!buf) {
   123f8:	4607      	mov	r7, r0
   123fa:	b978      	cbnz	r0, 1241c <gatt_indicate+0xa4>
		BT_WARN("No buffer available to send indication");
   123fc:	4b1d      	ldr	r3, [pc, #116]	; (12474 <gatt_indicate+0xfc>)
   123fe:	481a      	ldr	r0, [pc, #104]	; (12468 <gatt_indicate+0xf0>)
   12400:	9305      	str	r3, [sp, #20]
   12402:	2302      	movs	r3, #2
   12404:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12408:	aa04      	add	r2, sp, #16
   1240a:	9304      	str	r3, [sp, #16]
   1240c:	f00a fedb 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   12410:	4620      	mov	r0, r4
   12412:	f7ff f9eb 	bl	117ec <bt_att_req_free>
		return -ENOMEM;
   12416:	f06f 050b 	mvn.w	r5, #11
   1241a:	e7c5      	b.n	123a8 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1241c:	2301      	movs	r3, #1
   1241e:	4642      	mov	r2, r8
   12420:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   12422:	f107 0a08 	add.w	sl, r7, #8
   12426:	f00a fe45 	bl	1d0b4 <bt_att_set_tx_meta_data>
   1242a:	2102      	movs	r1, #2
   1242c:	4650      	mov	r0, sl
   1242e:	f000 fea7 	bl	13180 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   12432:	4680      	mov	r8, r0
   12434:	f828 9b02 	strh.w	r9, [r8], #2
   12438:	8aa9      	ldrh	r1, [r5, #20]
   1243a:	4650      	mov	r0, sl
   1243c:	f000 fea0 	bl	13180 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   12440:	8aaa      	ldrh	r2, [r5, #20]
   12442:	6929      	ldr	r1, [r5, #16]
   12444:	4640      	mov	r0, r8
   12446:	f009 ff00 	bl	1c24a <memcpy>
	err = bt_att_req_send(conn, req);
   1244a:	4621      	mov	r1, r4
   1244c:	4630      	mov	r0, r6
	req->buf = buf;
   1244e:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   12450:	f7ff fb06 	bl	11a60 <bt_att_req_send>
	if (err) {
   12454:	4605      	mov	r5, r0
   12456:	2800      	cmp	r0, #0
   12458:	d0a6      	beq.n	123a8 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1245a:	4620      	mov	r0, r4
   1245c:	f7ff f9c6 	bl	117ec <bt_att_req_free>
   12460:	e7a2      	b.n	123a8 <gatt_indicate+0x30>
   12462:	bf00      	nop
   12464:	00021e21 	.word	0x00021e21
   12468:	0001ed94 	.word	0x0001ed94
   1246c:	00021e37 	.word	0x00021e37
   12470:	0001d0dd 	.word	0x0001d0dd
   12474:	00021e62 	.word	0x00021e62

00012478 <bt_gatt_indicate>:
{
   12478:	b530      	push	{r4, r5, lr}
   1247a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1247c:	460c      	mov	r4, r1
{
   1247e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   12480:	b971      	cbnz	r1, 124a0 <bt_gatt_indicate+0x28>
   12482:	4946      	ldr	r1, [pc, #280]	; (1259c <bt_gatt_indicate+0x124>)
   12484:	f640 330b 	movw	r3, #2827	; 0xb0b
   12488:	4a45      	ldr	r2, [pc, #276]	; (125a0 <bt_gatt_indicate+0x128>)
   1248a:	4846      	ldr	r0, [pc, #280]	; (125a4 <bt_gatt_indicate+0x12c>)
   1248c:	f008 fece 	bl	1b22c <assert_print>
   12490:	4845      	ldr	r0, [pc, #276]	; (125a8 <bt_gatt_indicate+0x130>)
   12492:	f008 fecb 	bl	1b22c <assert_print>
   12496:	f640 310b 	movw	r1, #2827	; 0xb0b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1249a:	4841      	ldr	r0, [pc, #260]	; (125a0 <bt_gatt_indicate+0x128>)
   1249c:	f008 febf 	bl	1b21e <assert_post_action>
   124a0:	684b      	ldr	r3, [r1, #4]
   124a2:	b973      	cbnz	r3, 124c2 <bt_gatt_indicate+0x4a>
   124a4:	680b      	ldr	r3, [r1, #0]
   124a6:	b963      	cbnz	r3, 124c2 <bt_gatt_indicate+0x4a>
   124a8:	4940      	ldr	r1, [pc, #256]	; (125ac <bt_gatt_indicate+0x134>)
   124aa:	f640 330c 	movw	r3, #2828	; 0xb0c
   124ae:	4a3c      	ldr	r2, [pc, #240]	; (125a0 <bt_gatt_indicate+0x128>)
   124b0:	483c      	ldr	r0, [pc, #240]	; (125a4 <bt_gatt_indicate+0x12c>)
   124b2:	f008 febb 	bl	1b22c <assert_print>
   124b6:	483c      	ldr	r0, [pc, #240]	; (125a8 <bt_gatt_indicate+0x130>)
   124b8:	f008 feb8 	bl	1b22c <assert_print>
   124bc:	f640 310c 	movw	r1, #2828	; 0xb0c
   124c0:	e7eb      	b.n	1249a <bt_gatt_indicate+0x22>
   124c2:	4b3b      	ldr	r3, [pc, #236]	; (125b0 <bt_gatt_indicate+0x138>)
   124c4:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   124c8:	075a      	lsls	r2, r3, #29
   124ca:	d561      	bpl.n	12590 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   124cc:	b115      	cbz	r5, 124d4 <bt_gatt_indicate+0x5c>
   124ce:	7aab      	ldrb	r3, [r5, #10]
   124d0:	2b07      	cmp	r3, #7
   124d2:	d160      	bne.n	12596 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   124d4:	6860      	ldr	r0, [r4, #4]
   124d6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   124d8:	f7ff fd36 	bl	11f48 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   124dc:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   124de:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   124e2:	b33a      	cbz	r2, 12534 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   124e4:	a905      	add	r1, sp, #20
   124e6:	9102      	str	r1, [sp, #8]
   124e8:	4932      	ldr	r1, [pc, #200]	; (125b4 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   124ea:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   124ec:	9101      	str	r1, [sp, #4]
   124ee:	2101      	movs	r1, #1
   124f0:	9100      	str	r1, [sp, #0]
   124f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   124f6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   124f8:	f7ff fd6e 	bl	11fd8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   124fc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   124fe:	b91b      	cbnz	r3, 12508 <bt_gatt_indicate+0x90>
			return -ENOENT;
   12500:	f06f 0001 	mvn.w	r0, #1
}
   12504:	b00b      	add	sp, #44	; 0x2c
   12506:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   12508:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1250a:	9b05      	ldr	r3, [sp, #20]
   1250c:	a904      	add	r1, sp, #16
   1250e:	6818      	ldr	r0, [r3, #0]
   12510:	2300      	movs	r3, #0
   12512:	f88d 3010 	strb.w	r3, [sp, #16]
   12516:	f642 0303 	movw	r3, #10243	; 0x2803
   1251a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1251e:	f009 feab 	bl	1c278 <bt_uuid_cmp>
   12522:	b970      	cbnz	r0, 12542 <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   12524:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   12526:	68c3      	ldr	r3, [r0, #12]
   12528:	799b      	ldrb	r3, [r3, #6]
   1252a:	069b      	lsls	r3, r3, #26
   1252c:	d405      	bmi.n	1253a <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1252e:	f06f 0015 	mvn.w	r0, #21
   12532:	e7e7      	b.n	12504 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   12534:	2800      	cmp	r0, #0
   12536:	d1e8      	bne.n	1250a <bt_gatt_indicate+0x92>
   12538:	e7e2      	b.n	12500 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1253a:	f00a ff3c 	bl	1d3b6 <bt_gatt_attr_value_handle>
   1253e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   12542:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   12546:	b13d      	cbz	r5, 12558 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   12548:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1254a:	4601      	mov	r1, r0
   1254c:	4622      	mov	r2, r4
   1254e:	4628      	mov	r0, r5
		params->_ref = 1;
   12550:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   12552:	f7ff ff11 	bl	12378 <gatt_indicate>
   12556:	e7d5      	b.n	12504 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   12558:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1255c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1255e:	2302      	movs	r3, #2
   12560:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   12564:	f642 1302 	movw	r3, #10498	; 0x2902
   12568:	f8ad 3012 	strh.w	r3, [sp, #18]
   1256c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1256e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   12570:	9302      	str	r3, [sp, #8]
   12572:	4b11      	ldr	r3, [pc, #68]	; (125b8 <bt_gatt_indicate+0x140>)
   12574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12578:	9301      	str	r3, [sp, #4]
   1257a:	2301      	movs	r3, #1
   1257c:	aa04      	add	r2, sp, #16
   1257e:	9300      	str	r3, [sp, #0]
   12580:	462b      	mov	r3, r5
	data.ind_params = params;
   12582:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   12584:	f88d 5010 	strb.w	r5, [sp, #16]
   12588:	f7ff fd26 	bl	11fd8 <bt_gatt_foreach_attr_type>
	return data.err;
   1258c:	9807      	ldr	r0, [sp, #28]
   1258e:	e7b9      	b.n	12504 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   12590:	f06f 000a 	mvn.w	r0, #10
   12594:	e7b6      	b.n	12504 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   12596:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1259a:	e7b3      	b.n	12504 <bt_gatt_indicate+0x8c>
   1259c:	00021e89 	.word	0x00021e89
   125a0:	00021d60 	.word	0x00021d60
   125a4:	0001f995 	.word	0x0001f995
   125a8:	00021e90 	.word	0x00021e90
   125ac:	00021ea6 	.word	0x00021ea6
   125b0:	200080cc 	.word	0x200080cc
   125b4:	0001d103 	.word	0x0001d103
   125b8:	00012815 	.word	0x00012815

000125bc <sc_process>:
{
   125bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   125be:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   125c0:	f1a0 0120 	sub.w	r1, r0, #32
   125c4:	f100 0430 	add.w	r4, r0, #48	; 0x30
   125c8:	e8d4 2faf 	lda	r2, [r4]
   125cc:	f3c2 0040 	ubfx	r0, r2, #1, #1
   125d0:	0792      	lsls	r2, r2, #30
   125d2:	d50e      	bpl.n	125f2 <sc_process+0x36>
   125d4:	4919      	ldr	r1, [pc, #100]	; (1263c <sc_process+0x80>)
   125d6:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   125da:	4a19      	ldr	r2, [pc, #100]	; (12640 <sc_process+0x84>)
   125dc:	4819      	ldr	r0, [pc, #100]	; (12644 <sc_process+0x88>)
   125de:	f008 fe25 	bl	1b22c <assert_print>
   125e2:	4819      	ldr	r0, [pc, #100]	; (12648 <sc_process+0x8c>)
   125e4:	f008 fe22 	bl	1b22c <assert_print>
   125e8:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   125ec:	4814      	ldr	r0, [pc, #80]	; (12640 <sc_process+0x84>)
   125ee:	f008 fe16 	bl	1b21e <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   125f2:	f853 2c08 	ldr.w	r2, [r3, #-8]
   125f6:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   125f8:	e8d4 2fef 	ldaex	r2, [r4]
   125fc:	f022 0201 	bic.w	r2, r2, #1
   12600:	e8c4 2fe5 	stlex	r5, r2, [r4]
   12604:	2d00      	cmp	r5, #0
   12606:	d1f7      	bne.n	125f8 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   12608:	4a10      	ldr	r2, [pc, #64]	; (1264c <sc_process+0x90>)
	sc->start = 0U;
   1260a:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1260e:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   12612:	4a0f      	ldr	r2, [pc, #60]	; (12650 <sc_process+0x94>)
	sc->end = 0U;
   12614:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   12618:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1261c:	aa01      	add	r2, sp, #4
   1261e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   12622:	2204      	movs	r2, #4
   12624:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   12628:	f7ff ff26 	bl	12478 <bt_gatt_indicate>
   1262c:	b918      	cbnz	r0, 12636 <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1262e:	2101      	movs	r1, #1
   12630:	4620      	mov	r0, r4
   12632:	f00a fdcb 	bl	1d1cc <atomic_set_bit>
}
   12636:	b003      	add	sp, #12
   12638:	bd30      	pop	{r4, r5, pc}
   1263a:	bf00      	nop
   1263c:	00021ec3 	.word	0x00021ec3
   12640:	00021d60 	.word	0x00021d60
   12644:	0001f995 	.word	0x0001f995
   12648:	00021ef4 	.word	0x00021ef4
   1264c:	0001f354 	.word	0x0001f354
   12650:	00011e29 	.word	0x00011e29

00012654 <update_ccc>:
{
   12654:	b5f0      	push	{r4, r5, r6, r7, lr}
   12656:	b089      	sub	sp, #36	; 0x24
	if (attr->write != bt_gatt_attr_write_ccc) {
   12658:	4b31      	ldr	r3, [pc, #196]	; (12720 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   1265a:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1265c:	6882      	ldr	r2, [r0, #8]
{
   1265e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12660:	429a      	cmp	r2, r3
{
   12662:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12664:	d11e      	bne.n	126a4 <update_ccc+0x50>
	ccc = attr->user_data;
   12666:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   12668:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1266a:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1266c:	b1d3      	cbz	r3, 126a4 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1266e:	4628      	mov	r0, r5
   12670:	7831      	ldrb	r1, [r6, #0]
   12672:	f00a f871 	bl	1c758 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   12676:	b1a8      	cbz	r0, 126a4 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   12678:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1267c:	4621      	mov	r1, r4
   1267e:	4628      	mov	r0, r5
   12680:	f00a fef4 	bl	1d46c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   12684:	2803      	cmp	r0, #3
   12686:	d111      	bne.n	126ac <update_ccc+0x58>
				BT_WARN("CCC %p not writable", attr);
   12688:	466d      	mov	r5, sp
   1268a:	b088      	sub	sp, #32
   1268c:	466a      	mov	r2, sp
   1268e:	4b25      	ldr	r3, [pc, #148]	; (12724 <update_ccc+0xd0>)
   12690:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12694:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12698:	f842 0f10 	str.w	r0, [r2, #16]!
   1269c:	4822      	ldr	r0, [pc, #136]	; (12728 <update_ccc+0xd4>)
   1269e:	f00a fd92 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
   126a2:	46ad      	mov	sp, r5
}
   126a4:	2001      	movs	r0, #1
   126a6:	3724      	adds	r7, #36	; 0x24
   126a8:	46bd      	mov	sp, r7
   126aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   126ac:	4631      	mov	r1, r6
   126ae:	4620      	mov	r0, r4
   126b0:	f00a fd0a 	bl	1d0c8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   126b4:	4b1d      	ldr	r3, [pc, #116]	; (1272c <update_ccc+0xd8>)
   126b6:	429e      	cmp	r6, r3
   126b8:	d1f4      	bne.n	126a4 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   126ba:	7a28      	ldrb	r0, [r5, #8]
   126bc:	f105 0190 	add.w	r1, r5, #144	; 0x90
   126c0:	f7ff fa1c 	bl	11afc <find_sc_cfg>
	if (!cfg) {
   126c4:	2800      	cmp	r0, #0
   126c6:	d0ed      	beq.n	126a4 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   126c8:	8902      	ldrh	r2, [r0, #8]
   126ca:	8943      	ldrh	r3, [r0, #10]
   126cc:	ea52 0103 	orrs.w	r1, r2, r3
   126d0:	d0e8      	beq.n	126a4 <update_ccc+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   126d2:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   126d4:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   126d6:	4628      	mov	r0, r5
   126d8:	f7fd fc14 	bl	ff04 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   126dc:	2318      	movs	r3, #24
   126de:	4914      	ldr	r1, [pc, #80]	; (12730 <update_ccc+0xdc>)
   126e0:	4a14      	ldr	r2, [pc, #80]	; (12734 <update_ccc+0xe0>)
   126e2:	fb03 1300 	mla	r3, r3, r0, r1
   126e6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   126e8:	4a13      	ldr	r2, [pc, #76]	; (12738 <update_ccc+0xe4>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   126ea:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   126ec:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   126ee:	1d3a      	adds	r2, r7, #4
   126f0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   126f2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   126f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   126f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   126fc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   126fe:	4628      	mov	r0, r5
   12700:	f7ff feba 	bl	12478 <bt_gatt_indicate>
   12704:	2800      	cmp	r0, #0
   12706:	d0cd      	beq.n	126a4 <update_ccc+0x50>
		BT_ERR("SC restore indication failed");
   12708:	4b0c      	ldr	r3, [pc, #48]	; (1273c <update_ccc+0xe8>)
   1270a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1270e:	61fb      	str	r3, [r7, #28]
   12710:	2302      	movs	r3, #2
   12712:	4805      	ldr	r0, [pc, #20]	; (12728 <update_ccc+0xd4>)
   12714:	61bb      	str	r3, [r7, #24]
   12716:	f107 0218 	add.w	r2, r7, #24
   1271a:	f00a fd54 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
   1271e:	e7c1      	b.n	126a4 <update_ccc+0x50>
   12720:	00011b45 	.word	0x00011b45
   12724:	00021f0f 	.word	0x00021f0f
   12728:	0001ed94 	.word	0x0001ed94
   1272c:	20008258 	.word	0x20008258
   12730:	200097fc 	.word	0x200097fc
   12734:	0001f354 	.word	0x0001f354
   12738:	0001d1e1 	.word	0x0001d1e1
   1273c:	00021f23 	.word	0x00021f23

00012740 <gatt_notify>:
{
   12740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12744:	4614      	mov	r4, r2
   12746:	4688      	mov	r8, r1
   12748:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1274a:	2294      	movs	r2, #148	; 0x94
   1274c:	6861      	ldr	r1, [r4, #4]
{
   1274e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12750:	f00a fe8c 	bl	1d46c <bt_gatt_check_perm>
   12754:	b170      	cbz	r0, 12774 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   12756:	4b2b      	ldr	r3, [pc, #172]	; (12804 <gatt_notify+0xc4>)
   12758:	482b      	ldr	r0, [pc, #172]	; (12808 <gatt_notify+0xc8>)
   1275a:	9305      	str	r3, [sp, #20]
   1275c:	2302      	movs	r3, #2
   1275e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12762:	aa04      	add	r2, sp, #16
   12764:	9304      	str	r3, [sp, #16]
   12766:	f00a fd2e 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1276a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1276e:	b007      	add	sp, #28
   12770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   12774:	2201      	movs	r2, #1
   12776:	4630      	mov	r0, r6
   12778:	6861      	ldr	r1, [r4, #4]
   1277a:	f7ff fd33 	bl	121e4 <bt_gatt_is_subscribed>
   1277e:	b960      	cbnz	r0, 1279a <gatt_notify+0x5a>
			BT_WARN("Device is not subscribed to characteristic");
   12780:	4b22      	ldr	r3, [pc, #136]	; (1280c <gatt_notify+0xcc>)
   12782:	4821      	ldr	r0, [pc, #132]	; (12808 <gatt_notify+0xc8>)
   12784:	9305      	str	r3, [sp, #20]
   12786:	2302      	movs	r3, #2
   12788:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1278c:	aa04      	add	r2, sp, #16
   1278e:	9304      	str	r3, [sp, #16]
   12790:	f00a fd19 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   12794:	f06f 0015 	mvn.w	r0, #21
   12798:	e7e9      	b.n	1276e <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1279a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1279c:	211b      	movs	r1, #27
   1279e:	4630      	mov	r0, r6
   127a0:	3202      	adds	r2, #2
   127a2:	f7fe fd2f 	bl	11204 <bt_att_create_pdu>
	if (!buf) {
   127a6:	4605      	mov	r5, r0
   127a8:	b960      	cbnz	r0, 127c4 <gatt_notify+0x84>
		BT_WARN("No buffer available to send notification");
   127aa:	4b19      	ldr	r3, [pc, #100]	; (12810 <gatt_notify+0xd0>)
   127ac:	4816      	ldr	r0, [pc, #88]	; (12808 <gatt_notify+0xc8>)
   127ae:	9305      	str	r3, [sp, #20]
   127b0:	2302      	movs	r3, #2
   127b2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   127b6:	aa04      	add	r2, sp, #16
   127b8:	9304      	str	r3, [sp, #16]
   127ba:	f00a fd04 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   127be:	f06f 000b 	mvn.w	r0, #11
   127c2:	e7d4      	b.n	1276e <gatt_notify+0x2e>
   127c4:	f100 0908 	add.w	r9, r0, #8
   127c8:	2102      	movs	r1, #2
   127ca:	4648      	mov	r0, r9
   127cc:	f000 fcd8 	bl	13180 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   127d0:	4607      	mov	r7, r0
   127d2:	f827 8b02 	strh.w	r8, [r7], #2
   127d6:	89a1      	ldrh	r1, [r4, #12]
   127d8:	4648      	mov	r0, r9
   127da:	f000 fcd1 	bl	13180 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   127de:	89a2      	ldrh	r2, [r4, #12]
   127e0:	68a1      	ldr	r1, [r4, #8]
   127e2:	4638      	mov	r0, r7
   127e4:	f009 fd31 	bl	1c24a <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   127e8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   127ec:	4628      	mov	r0, r5
   127ee:	2301      	movs	r3, #1
   127f0:	f00a fc60 	bl	1d0b4 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   127f4:	4629      	mov	r1, r5
   127f6:	4630      	mov	r0, r6
}
   127f8:	b007      	add	sp, #28
   127fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   127fe:	f7ff b8d1 	b.w	119a4 <bt_att_send>
   12802:	bf00      	nop
   12804:	00021e21 	.word	0x00021e21
   12808:	0001ed94 	.word	0x0001ed94
   1280c:	00021e37 	.word	0x00021e37
   12810:	00021f40 	.word	0x00021f40

00012814 <notify_cb>:
{
   12814:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12816:	4b3f      	ldr	r3, [pc, #252]	; (12914 <notify_cb+0x100>)
{
   12818:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1281a:	6882      	ldr	r2, [r0, #8]
{
   1281c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1281e:	429a      	cmp	r2, r3
{
   12820:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   12822:	d003      	beq.n	1282c <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   12824:	2701      	movs	r7, #1
}
   12826:	4638      	mov	r0, r7
   12828:	b007      	add	sp, #28
   1282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1282c:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1282e:	4b3a      	ldr	r3, [pc, #232]	; (12918 <notify_cb+0x104>)
   12830:	429e      	cmp	r6, r3
   12832:	d055      	beq.n	128e0 <notify_cb+0xcc>
		if (cfg->value != data->type) {
   12834:	8932      	ldrh	r2, [r6, #8]
   12836:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12838:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   1283a:	429a      	cmp	r2, r3
   1283c:	d1f2      	bne.n	12824 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1283e:	7830      	ldrb	r0, [r6, #0]
   12840:	f7fd fc94 	bl	1016c <bt_conn_lookup_addr_le>
		if (!conn) {
   12844:	4604      	mov	r4, r0
   12846:	2800      	cmp	r0, #0
   12848:	d0ec      	beq.n	12824 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   1284a:	7a83      	ldrb	r3, [r0, #10]
   1284c:	2b07      	cmp	r3, #7
   1284e:	d005      	beq.n	1285c <notify_cb+0x48>
			bt_conn_unref(conn);
   12850:	f7fd fa30 	bl	fcb4 <bt_conn_unref>
			continue;
   12854:	e7e6      	b.n	12824 <notify_cb+0x10>
			bt_conn_unref(conn);
   12856:	f7fd fa2d 	bl	fcb4 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1285a:	e7eb      	b.n	12834 <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1285c:	6973      	ldr	r3, [r6, #20]
   1285e:	b123      	cbz	r3, 1286a <notify_cb+0x56>
   12860:	4639      	mov	r1, r7
   12862:	4798      	blx	r3
   12864:	b908      	cbnz	r0, 1286a <notify_cb+0x56>
			bt_conn_unref(conn);
   12866:	4620      	mov	r0, r4
   12868:	e7f2      	b.n	12850 <notify_cb+0x3c>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1286a:	4639      	mov	r1, r7
   1286c:	2294      	movs	r2, #148	; 0x94
   1286e:	4620      	mov	r0, r4
   12870:	f00a fdfc 	bl	1d46c <bt_gatt_check_perm>
   12874:	4607      	mov	r7, r0
   12876:	b150      	cbz	r0, 1288e <notify_cb+0x7a>
			BT_WARN("Link is not encrypted");
   12878:	4b28      	ldr	r3, [pc, #160]	; (1291c <notify_cb+0x108>)
   1287a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1287e:	9305      	str	r3, [sp, #20]
   12880:	2302      	movs	r3, #2
   12882:	4827      	ldr	r0, [pc, #156]	; (12920 <notify_cb+0x10c>)
   12884:	aa04      	add	r2, sp, #16
   12886:	9304      	str	r3, [sp, #16]
   12888:	f00a fc9d 	bl	1d1c6 <z_log_msg_static_create.constprop.0>
   1288c:	e7eb      	b.n	12866 <notify_cb+0x52>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1288e:	89ab      	ldrh	r3, [r5, #12]
   12890:	2b02      	cmp	r3, #2
   12892:	d114      	bne.n	128be <notify_cb+0xaa>
   12894:	8933      	ldrh	r3, [r6, #8]
   12896:	079a      	lsls	r2, r3, #30
   12898:	d405      	bmi.n	128a6 <notify_cb+0x92>
		bt_conn_unref(conn);
   1289a:	4620      	mov	r0, r4
   1289c:	f7fd fa0a 	bl	fcb4 <bt_conn_unref>
		data->err = 0;
   128a0:	2300      	movs	r3, #0
   128a2:	60ab      	str	r3, [r5, #8]
   128a4:	e7be      	b.n	12824 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   128a6:	4620      	mov	r0, r4
   128a8:	692a      	ldr	r2, [r5, #16]
   128aa:	88a9      	ldrh	r1, [r5, #4]
   128ac:	f7ff fd64 	bl	12378 <gatt_indicate>
			if (err == 0) {
   128b0:	4606      	mov	r6, r0
   128b2:	b978      	cbnz	r0, 128d4 <notify_cb+0xc0>
				data->ind_params->_ref++;
   128b4:	692a      	ldr	r2, [r5, #16]
   128b6:	7d93      	ldrb	r3, [r2, #22]
   128b8:	3301      	adds	r3, #1
   128ba:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   128bc:	e7ed      	b.n	1289a <notify_cb+0x86>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   128be:	2b01      	cmp	r3, #1
   128c0:	d1eb      	bne.n	1289a <notify_cb+0x86>
   128c2:	8933      	ldrh	r3, [r6, #8]
   128c4:	07db      	lsls	r3, r3, #31
   128c6:	d5e8      	bpl.n	1289a <notify_cb+0x86>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   128c8:	4620      	mov	r0, r4
   128ca:	692a      	ldr	r2, [r5, #16]
   128cc:	88a9      	ldrh	r1, [r5, #4]
   128ce:	f7ff ff37 	bl	12740 <gatt_notify>
   128d2:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   128d4:	4620      	mov	r0, r4
   128d6:	f7fd f9ed 	bl	fcb4 <bt_conn_unref>
		if (err < 0) {
   128da:	2e00      	cmp	r6, #0
   128dc:	dba3      	blt.n	12826 <notify_cb+0x12>
   128de:	e7df      	b.n	128a0 <notify_cb+0x8c>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   128e0:	4c10      	ldr	r4, [pc, #64]	; (12924 <notify_cb+0x110>)
   128e2:	4911      	ldr	r1, [pc, #68]	; (12928 <notify_cb+0x114>)
   128e4:	4620      	mov	r0, r4
   128e6:	f00a fc63 	bl	1d1b0 <bt_addr_le_eq>
   128ea:	2800      	cmp	r0, #0
   128ec:	d1a2      	bne.n	12834 <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   128ee:	2207      	movs	r2, #7
   128f0:	4621      	mov	r1, r4
   128f2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   128f6:	f7fd fc83 	bl	10200 <bt_conn_lookup_state_le>
			if (!conn) {
   128fa:	2800      	cmp	r0, #0
   128fc:	d1ab      	bne.n	12856 <notify_cb+0x42>
				sc = (struct sc_data *)data->ind_params->data;
   128fe:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   12900:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   12902:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   12904:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   12908:	8853      	ldrh	r3, [r2, #2]
   1290a:	8812      	ldrh	r2, [r2, #0]
   1290c:	f7ff f996 	bl	11c3c <sc_save>
				continue;
   12910:	e790      	b.n	12834 <notify_cb+0x20>
   12912:	bf00      	nop
   12914:	00011b45 	.word	0x00011b45
   12918:	20008258 	.word	0x20008258
   1291c:	00021e21 	.word	0x00021e21
   12920:	0001ed94 	.word	0x0001ed94
   12924:	20009afb 	.word	0x20009afb
   12928:	00020c77 	.word	0x00020c77

0001292c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1292c:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1292e:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   12930:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   12932:	466b      	mov	r3, sp
   12934:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12938:	4a03      	ldr	r2, [pc, #12]	; (12948 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   1293a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1293e:	f00a fd88 	bl	1d452 <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   12942:	b003      	add	sp, #12
   12944:	f85d fb04 	ldr.w	pc, [sp], #4
   12948:	00012655 	.word	0x00012655

0001294c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1294e:	4605      	mov	r5, r0
   12950:	460e      	mov	r6, r1
   12952:	4617      	mov	r7, r2
	return list->head;
   12954:	4b06      	ldr	r3, [pc, #24]	; (12970 <bt_gatt_att_max_mtu_changed+0x24>)
   12956:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12958:	b14c      	cbz	r4, 1296e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1295a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1295e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   12960:	b11b      	cbz	r3, 1296a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   12962:	463a      	mov	r2, r7
   12964:	4631      	mov	r1, r6
   12966:	4628      	mov	r0, r5
   12968:	4798      	blx	r3
	return node->next;
   1296a:	6864      	ldr	r4, [r4, #4]
   1296c:	e7f4      	b.n	12958 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12970:	2000982c 	.word	0x2000982c

00012974 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   12974:	b570      	push	{r4, r5, r6, lr}
   12976:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   12978:	4603      	mov	r3, r0
   1297a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1297e:	2001      	movs	r0, #1
   12980:	4a0d      	ldr	r2, [pc, #52]	; (129b8 <bt_gatt_disconnected+0x44>)
   12982:	f00a fd66 	bl	1d452 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   12986:	4620      	mov	r0, r4
   12988:	f7ff f8a0 	bl	11acc <find_cf_cfg>
	if (!cfg) {
   1298c:	4605      	mov	r5, r0
   1298e:	b188      	cbz	r0, 129b4 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12990:	f104 0690 	add.w	r6, r4, #144	; 0x90
   12994:	4631      	mov	r1, r6
   12996:	7a20      	ldrb	r0, [r4, #8]
   12998:	f009 fd93 	bl	1c4c2 <bt_addr_le_is_bonded>
   1299c:	b920      	cbnz	r0, 129a8 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1299e:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   129a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   129a4:	f7ff b932 	b.w	11c0c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   129a8:	4631      	mov	r1, r6
   129aa:	1c68      	adds	r0, r5, #1
}
   129ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   129b0:	f00a bc06 	b.w	1d1c0 <bt_addr_le_copy>
}
   129b4:	bd70      	pop	{r4, r5, r6, pc}
   129b6:	bf00      	nop
   129b8:	00011d51 	.word	0x00011d51

000129bc <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   129bc:	b580      	push	{r7, lr}
   129be:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   129c0:	b088      	sub	sp, #32
   129c2:	466a      	mov	r2, sp
   129c4:	4b07      	ldr	r3, [pc, #28]	; (129e4 <bt_smp_accept.part.0+0x28>)
   129c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   129ca:	2303      	movs	r3, #3
   129cc:	f842 3f10 	str.w	r3, [r2, #16]!
   129d0:	2300      	movs	r3, #0
   129d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   129d6:	4804      	ldr	r0, [pc, #16]	; (129e8 <bt_smp_accept.part.0+0x2c>)
   129d8:	f7f8 f990 	bl	acfc <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   129dc:	f06f 000b 	mvn.w	r0, #11
   129e0:	46bd      	mov	sp, r7
   129e2:	bd80      	pop	{r7, pc}
   129e4:	00021f78 	.word	0x00021f78
   129e8:	0001edbc 	.word	0x0001edbc

000129ec <bt_smp_accept>:
		if (smp->chan.conn) {
   129ec:	4b04      	ldr	r3, [pc, #16]	; (12a00 <bt_smp_accept+0x14>)
   129ee:	681a      	ldr	r2, [r3, #0]
   129f0:	b10a      	cbz	r2, 129f6 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   129f2:	f7ff bfe3 	b.w	129bc <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   129f6:	4803      	ldr	r0, [pc, #12]	; (12a04 <bt_smp_accept+0x18>)
   129f8:	6058      	str	r0, [r3, #4]
}
   129fa:	4610      	mov	r0, r2
		*chan = &smp->chan;
   129fc:	600b      	str	r3, [r1, #0]
}
   129fe:	4770      	bx	lr
   12a00:	20009834 	.word	0x20009834
   12a04:	0001f458 	.word	0x0001f458

00012a08 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   12a08:	2234      	movs	r2, #52	; 0x34
   12a0a:	4b02      	ldr	r3, [pc, #8]	; (12a14 <net_buf_pool_get+0xc>)
   12a0c:	fb02 3000 	mla	r0, r2, r0, r3
   12a10:	4770      	bx	lr
   12a12:	bf00      	nop
   12a14:	200085cc 	.word	0x200085cc

00012a18 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   12a18:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12a1a:	7982      	ldrb	r2, [r0, #6]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   12a1c:	4b06      	ldr	r3, [pc, #24]	; (12a38 <net_buf_id+0x20>)
   12a1e:	fb01 3302 	mla	r3, r1, r2, r3
   12a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   12a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   12a28:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   12a2a:	3317      	adds	r3, #23
   12a2c:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   12a30:	fbb0 f0f3 	udiv	r0, r0, r3
   12a34:	4770      	bx	lr
   12a36:	bf00      	nop
   12a38:	200085cc 	.word	0x200085cc

00012a3c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   12a3c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12a3e:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12a40:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12a42:	4b09      	ldr	r3, [pc, #36]	; (12a68 <fixed_data_alloc+0x2c>)
   12a44:	fb04 3302 	mla	r3, r4, r2, r3
   12a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   12a4a:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12a4c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   12a4e:	681a      	ldr	r2, [r3, #0]
   12a50:	4294      	cmp	r4, r2
   12a52:	bf94      	ite	ls
   12a54:	600c      	strls	r4, [r1, #0]
   12a56:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12a58:	e9d3 5400 	ldrd	r5, r4, [r3]
   12a5c:	f7ff ffdc 	bl	12a18 <net_buf_id>
}
   12a60:	fb05 4000 	mla	r0, r5, r0, r4
   12a64:	bd38      	pop	{r3, r4, r5, pc}
   12a66:	bf00      	nop
   12a68:	200085cc 	.word	0x200085cc

00012a6c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   12a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a70:	b085      	sub	sp, #20
   12a72:	9103      	str	r1, [sp, #12]
   12a74:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   12a76:	4619      	mov	r1, r3
   12a78:	4610      	mov	r0, r2
{
   12a7a:	4692      	mov	sl, r2
   12a7c:	4699      	mov	r9, r3
   12a7e:	4690      	mov	r8, r2
   12a80:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   12a82:	f00b fe5d 	bl	1e740 <sys_clock_timeout_end_calc>
   12a86:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   12a8a:	b945      	cbnz	r5, 12a9e <net_buf_alloc_len+0x32>
   12a8c:	4966      	ldr	r1, [pc, #408]	; (12c28 <net_buf_alloc_len+0x1bc>)
   12a8e:	23f4      	movs	r3, #244	; 0xf4
   12a90:	4a66      	ldr	r2, [pc, #408]	; (12c2c <net_buf_alloc_len+0x1c0>)
   12a92:	4867      	ldr	r0, [pc, #412]	; (12c30 <net_buf_alloc_len+0x1c4>)
   12a94:	f008 fbca 	bl	1b22c <assert_print>
   12a98:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   12a9a:	4864      	ldr	r0, [pc, #400]	; (12c2c <net_buf_alloc_len+0x1c0>)
   12a9c:	e019      	b.n	12ad2 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   12a9e:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   12aa2:	f04f 0320 	mov.w	r3, #32
   12aa6:	f3ef 8b11 	mrs	fp, BASEPRI
   12aaa:	f383 8812 	msr	BASEPRI_MAX, r3
   12aae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12ab2:	4630      	mov	r0, r6
   12ab4:	f004 fdf8 	bl	176a8 <z_spin_lock_valid>
   12ab8:	b968      	cbnz	r0, 12ad6 <net_buf_alloc_len+0x6a>
   12aba:	2394      	movs	r3, #148	; 0x94
   12abc:	4a5d      	ldr	r2, [pc, #372]	; (12c34 <net_buf_alloc_len+0x1c8>)
   12abe:	495e      	ldr	r1, [pc, #376]	; (12c38 <net_buf_alloc_len+0x1cc>)
   12ac0:	485b      	ldr	r0, [pc, #364]	; (12c30 <net_buf_alloc_len+0x1c4>)
   12ac2:	f008 fbb3 	bl	1b22c <assert_print>
   12ac6:	4631      	mov	r1, r6
   12ac8:	485c      	ldr	r0, [pc, #368]	; (12c3c <net_buf_alloc_len+0x1d0>)
   12aca:	f008 fbaf 	bl	1b22c <assert_print>
   12ace:	2194      	movs	r1, #148	; 0x94
   12ad0:	4858      	ldr	r0, [pc, #352]	; (12c34 <net_buf_alloc_len+0x1c8>)
   12ad2:	f008 fba4 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   12ad6:	4630      	mov	r0, r6
   12ad8:	f004 fe02 	bl	176e0 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   12adc:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   12ade:	2b00      	cmp	r3, #0
   12ae0:	d070      	beq.n	12bc4 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   12ae2:	8c2a      	ldrh	r2, [r5, #32]
   12ae4:	429a      	cmp	r2, r3
   12ae6:	d94d      	bls.n	12b84 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   12ae8:	2200      	movs	r2, #0
   12aea:	2300      	movs	r3, #0
   12aec:	4628      	mov	r0, r5
   12aee:	f005 f887 	bl	17c00 <z_impl_k_queue_get>
			if (buf) {
   12af2:	4604      	mov	r4, r0
   12af4:	2800      	cmp	r0, #0
   12af6:	d045      	beq.n	12b84 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12af8:	4630      	mov	r0, r6
   12afa:	f004 fde3 	bl	176c4 <z_spin_unlock_valid>
   12afe:	b958      	cbnz	r0, 12b18 <net_buf_alloc_len+0xac>
   12b00:	23c2      	movs	r3, #194	; 0xc2
   12b02:	4a4c      	ldr	r2, [pc, #304]	; (12c34 <net_buf_alloc_len+0x1c8>)
   12b04:	494e      	ldr	r1, [pc, #312]	; (12c40 <net_buf_alloc_len+0x1d4>)
   12b06:	484a      	ldr	r0, [pc, #296]	; (12c30 <net_buf_alloc_len+0x1c4>)
   12b08:	f008 fb90 	bl	1b22c <assert_print>
   12b0c:	4631      	mov	r1, r6
   12b0e:	484d      	ldr	r0, [pc, #308]	; (12c44 <net_buf_alloc_len+0x1d8>)
   12b10:	f008 fb8c 	bl	1b22c <assert_print>
   12b14:	21c2      	movs	r1, #194	; 0xc2
   12b16:	e7db      	b.n	12ad0 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   12b18:	f38b 8811 	msr	BASEPRI, fp
   12b1c:	f3bf 8f6f 	isb	sy
	if (size) {
   12b20:	9d03      	ldr	r5, [sp, #12]
   12b22:	2d00      	cmp	r5, #0
   12b24:	d074      	beq.n	12c10 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   12b26:	ea59 030a 	orrs.w	r3, r9, sl
   12b2a:	d012      	beq.n	12b52 <net_buf_alloc_len+0xe6>
   12b2c:	f1b9 3fff 	cmp.w	r9, #4294967295
   12b30:	bf08      	it	eq
   12b32:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   12b36:	d00c      	beq.n	12b52 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   12b38:	f007 fbe2 	bl	1a300 <sys_clock_tick_get>
   12b3c:	9b01      	ldr	r3, [sp, #4]
   12b3e:	ebb3 0800 	subs.w	r8, r3, r0
   12b42:	9b02      	ldr	r3, [sp, #8]
   12b44:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   12b48:	2f00      	cmp	r7, #0
   12b4a:	bfbc      	itt	lt
   12b4c:	f04f 0800 	movlt.w	r8, #0
   12b50:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   12b52:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12b56:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   12b58:	4e3b      	ldr	r6, [pc, #236]	; (12c48 <net_buf_alloc_len+0x1dc>)
   12b5a:	4642      	mov	r2, r8
   12b5c:	fb09 6303 	mla	r3, r9, r3, r6
   12b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12b62:	4620      	mov	r0, r4
   12b64:	681b      	ldr	r3, [r3, #0]
   12b66:	a903      	add	r1, sp, #12
   12b68:	f8d3 a000 	ldr.w	sl, [r3]
   12b6c:	463b      	mov	r3, r7
   12b6e:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   12b70:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   12b72:	2800      	cmp	r0, #0
   12b74:	d13c      	bne.n	12bf0 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   12b76:	79a0      	ldrb	r0, [r4, #6]
   12b78:	4621      	mov	r1, r4
   12b7a:	fb00 6009 	mla	r0, r0, r9, r6
   12b7e:	f00b fd26 	bl	1e5ce <k_queue_prepend>
}
   12b82:	e030      	b.n	12be6 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   12b84:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   12b86:	4630      	mov	r0, r6
   12b88:	1e63      	subs	r3, r4, #1
   12b8a:	846b      	strh	r3, [r5, #34]	; 0x22
   12b8c:	f004 fd9a 	bl	176c4 <z_spin_unlock_valid>
   12b90:	2800      	cmp	r0, #0
   12b92:	d0b5      	beq.n	12b00 <net_buf_alloc_len+0x94>
   12b94:	f38b 8811 	msr	BASEPRI, fp
   12b98:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   12b9c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   12ba0:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   12ba2:	3317      	adds	r3, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   12ba4:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   12ba6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   12ba8:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   12bac:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   12bb0:	4b25      	ldr	r3, [pc, #148]	; (12c48 <net_buf_alloc_len+0x1dc>)
   12bb2:	4a26      	ldr	r2, [pc, #152]	; (12c4c <net_buf_alloc_len+0x1e0>)
   12bb4:	1aeb      	subs	r3, r5, r3
   12bb6:	109b      	asrs	r3, r3, #2
   12bb8:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   12bba:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   12bbc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   12bc0:	71e3      	strb	r3, [r4, #7]
		goto success;
   12bc2:	e7ad      	b.n	12b20 <net_buf_alloc_len+0xb4>
   12bc4:	4630      	mov	r0, r6
   12bc6:	f004 fd7d 	bl	176c4 <z_spin_unlock_valid>
   12bca:	2800      	cmp	r0, #0
   12bcc:	d098      	beq.n	12b00 <net_buf_alloc_len+0x94>
   12bce:	f38b 8811 	msr	BASEPRI, fp
   12bd2:	f3bf 8f6f 	isb	sy
   12bd6:	4652      	mov	r2, sl
   12bd8:	464b      	mov	r3, r9
   12bda:	4628      	mov	r0, r5
   12bdc:	f005 f810 	bl	17c00 <z_impl_k_queue_get>
	if (!buf) {
   12be0:	4604      	mov	r4, r0
   12be2:	2800      	cmp	r0, #0
   12be4:	d19c      	bne.n	12b20 <net_buf_alloc_len+0xb4>
		return NULL;
   12be6:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   12be8:	4620      	mov	r0, r4
   12bea:	b005      	add	sp, #20
   12bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   12bf0:	9b03      	ldr	r3, [sp, #12]
   12bf2:	429d      	cmp	r5, r3
   12bf4:	d90d      	bls.n	12c12 <net_buf_alloc_len+0x1a6>
   12bf6:	4916      	ldr	r1, [pc, #88]	; (12c50 <net_buf_alloc_len+0x1e4>)
   12bf8:	f240 1355 	movw	r3, #341	; 0x155
   12bfc:	4a0b      	ldr	r2, [pc, #44]	; (12c2c <net_buf_alloc_len+0x1c0>)
   12bfe:	480c      	ldr	r0, [pc, #48]	; (12c30 <net_buf_alloc_len+0x1c4>)
   12c00:	f008 fb14 	bl	1b22c <assert_print>
   12c04:	4813      	ldr	r0, [pc, #76]	; (12c54 <net_buf_alloc_len+0x1e8>)
   12c06:	f008 fb11 	bl	1b22c <assert_print>
   12c0a:	f240 1155 	movw	r1, #341	; 0x155
   12c0e:	e744      	b.n	12a9a <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   12c10:	6125      	str	r5, [r4, #16]
	buf->frags = NULL;
   12c12:	2300      	movs	r3, #0
	buf->ref   = 1U;
   12c14:	2201      	movs	r2, #1
	buf->frags = NULL;
   12c16:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   12c18:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   12c1a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   12c1c:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   12c1e:	6923      	ldr	r3, [r4, #16]
   12c20:	81e2      	strh	r2, [r4, #14]
   12c22:	60a3      	str	r3, [r4, #8]
}
   12c24:	e7e0      	b.n	12be8 <net_buf_alloc_len+0x17c>
   12c26:	bf00      	nop
   12c28:	00021ff3 	.word	0x00021ff3
   12c2c:	00021fa4 	.word	0x00021fa4
   12c30:	0001f995 	.word	0x0001f995
   12c34:	0001fd89 	.word	0x0001fd89
   12c38:	0001fde2 	.word	0x0001fde2
   12c3c:	0001fdf7 	.word	0x0001fdf7
   12c40:	0001fdb6 	.word	0x0001fdb6
   12c44:	0001fdcd 	.word	0x0001fdcd
   12c48:	200085cc 	.word	0x200085cc
   12c4c:	c4ec4ec5 	.word	0xc4ec4ec5
   12c50:	00021ff8 	.word	0x00021ff8
   12c54:	00022009 	.word	0x00022009

00012c58 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   12c58:	b570      	push	{r4, r5, r6, lr}
   12c5a:	4606      	mov	r6, r0
   12c5c:	f004 ffd0 	bl	17c00 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   12c60:	4605      	mov	r5, r0
   12c62:	b128      	cbz	r0, 12c70 <net_buf_get+0x18>
   12c64:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12c66:	7963      	ldrb	r3, [r4, #5]
   12c68:	f013 0301 	ands.w	r3, r3, #1
   12c6c:	d102      	bne.n	12c74 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   12c6e:	6023      	str	r3, [r4, #0]

	return buf;
}
   12c70:	4628      	mov	r0, r5
   12c72:	bd70      	pop	{r4, r5, r6, pc}
   12c74:	2200      	movs	r2, #0
   12c76:	2300      	movs	r3, #0
   12c78:	4630      	mov	r0, r6
   12c7a:	f004 ffc1 	bl	17c00 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   12c7e:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   12c80:	b958      	cbnz	r0, 12c9a <net_buf_get+0x42>
   12c82:	4909      	ldr	r1, [pc, #36]	; (12ca8 <net_buf_get+0x50>)
   12c84:	4809      	ldr	r0, [pc, #36]	; (12cac <net_buf_get+0x54>)
   12c86:	f240 13ad 	movw	r3, #429	; 0x1ad
   12c8a:	4a09      	ldr	r2, [pc, #36]	; (12cb0 <net_buf_get+0x58>)
   12c8c:	f008 face 	bl	1b22c <assert_print>
   12c90:	f240 11ad 	movw	r1, #429	; 0x1ad
   12c94:	4806      	ldr	r0, [pc, #24]	; (12cb0 <net_buf_get+0x58>)
   12c96:	f008 fac2 	bl	1b21e <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   12c9a:	7963      	ldrb	r3, [r4, #5]
   12c9c:	f023 0301 	bic.w	r3, r3, #1
   12ca0:	7163      	strb	r3, [r4, #5]
   12ca2:	4604      	mov	r4, r0
   12ca4:	e7df      	b.n	12c66 <net_buf_get+0xe>
   12ca6:	bf00      	nop
   12ca8:	0002200c 	.word	0x0002200c
   12cac:	0001f995 	.word	0x0001f995
   12cb0:	00021fa4 	.word	0x00021fa4

00012cb4 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   12cb4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   12cb6:	b958      	cbnz	r0, 12cd0 <net_buf_simple_reserve+0x1c>
   12cb8:	490d      	ldr	r1, [pc, #52]	; (12cf0 <net_buf_simple_reserve+0x3c>)
   12cba:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   12cbe:	4a0d      	ldr	r2, [pc, #52]	; (12cf4 <net_buf_simple_reserve+0x40>)
   12cc0:	480d      	ldr	r0, [pc, #52]	; (12cf8 <net_buf_simple_reserve+0x44>)
   12cc2:	f008 fab3 	bl	1b22c <assert_print>
   12cc6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT_NO_MSG(buf->len == 0U);
   12cca:	480a      	ldr	r0, [pc, #40]	; (12cf4 <net_buf_simple_reserve+0x40>)
   12ccc:	f008 faa7 	bl	1b21e <assert_post_action>
   12cd0:	8883      	ldrh	r3, [r0, #4]
   12cd2:	b14b      	cbz	r3, 12ce8 <net_buf_simple_reserve+0x34>
   12cd4:	4909      	ldr	r1, [pc, #36]	; (12cfc <net_buf_simple_reserve+0x48>)
   12cd6:	f240 13c5 	movw	r3, #453	; 0x1c5
   12cda:	4a06      	ldr	r2, [pc, #24]	; (12cf4 <net_buf_simple_reserve+0x40>)
   12cdc:	4806      	ldr	r0, [pc, #24]	; (12cf8 <net_buf_simple_reserve+0x44>)
   12cde:	f008 faa5 	bl	1b22c <assert_print>
   12ce2:	f240 11c5 	movw	r1, #453	; 0x1c5
   12ce6:	e7f0      	b.n	12cca <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12ce8:	6883      	ldr	r3, [r0, #8]
   12cea:	440b      	add	r3, r1
   12cec:	6003      	str	r3, [r0, #0]
}
   12cee:	bd08      	pop	{r3, pc}
   12cf0:	00020d91 	.word	0x00020d91
   12cf4:	00021fa4 	.word	0x00021fa4
   12cf8:	0001f995 	.word	0x0001f995
   12cfc:	00022018 	.word	0x00022018

00012d00 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   12d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d02:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   12d04:	4604      	mov	r4, r0
   12d06:	b958      	cbnz	r0, 12d20 <net_buf_slist_put+0x20>
   12d08:	492b      	ldr	r1, [pc, #172]	; (12db8 <net_buf_slist_put+0xb8>)
   12d0a:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   12d0e:	4a2b      	ldr	r2, [pc, #172]	; (12dbc <net_buf_slist_put+0xbc>)
   12d10:	482b      	ldr	r0, [pc, #172]	; (12dc0 <net_buf_slist_put+0xc0>)
   12d12:	f008 fa8b 	bl	1b22c <assert_print>
   12d16:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(buf);
   12d1a:	4828      	ldr	r0, [pc, #160]	; (12dbc <net_buf_slist_put+0xbc>)
   12d1c:	f008 fa7f 	bl	1b21e <assert_post_action>
   12d20:	bb51      	cbnz	r1, 12d78 <net_buf_slist_put+0x78>
   12d22:	4928      	ldr	r1, [pc, #160]	; (12dc4 <net_buf_slist_put+0xc4>)
   12d24:	f240 13d3 	movw	r3, #467	; 0x1d3
   12d28:	4a24      	ldr	r2, [pc, #144]	; (12dbc <net_buf_slist_put+0xbc>)
   12d2a:	4825      	ldr	r0, [pc, #148]	; (12dc0 <net_buf_slist_put+0xc0>)
   12d2c:	f008 fa7e 	bl	1b22c <assert_print>
   12d30:	f240 11d3 	movw	r1, #467	; 0x1d3
   12d34:	e7f1      	b.n	12d1a <net_buf_slist_put+0x1a>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   12d36:	7973      	ldrb	r3, [r6, #5]
   12d38:	f043 0301 	orr.w	r3, r3, #1
   12d3c:	7173      	strb	r3, [r6, #5]
   12d3e:	4616      	mov	r6, r2
	for (tail = buf; tail->frags; tail = tail->frags) {
   12d40:	6832      	ldr	r2, [r6, #0]
   12d42:	2a00      	cmp	r2, #0
   12d44:	d1f7      	bne.n	12d36 <net_buf_slist_put+0x36>
	__asm__ volatile(
   12d46:	f04f 0320 	mov.w	r3, #32
   12d4a:	f3ef 8711 	mrs	r7, BASEPRI
   12d4e:	f383 8812 	msr	BASEPRI_MAX, r3
   12d52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12d56:	481c      	ldr	r0, [pc, #112]	; (12dc8 <net_buf_slist_put+0xc8>)
   12d58:	f004 fca6 	bl	176a8 <z_spin_lock_valid>
   12d5c:	b970      	cbnz	r0, 12d7c <net_buf_slist_put+0x7c>
   12d5e:	2394      	movs	r3, #148	; 0x94
   12d60:	4a1a      	ldr	r2, [pc, #104]	; (12dcc <net_buf_slist_put+0xcc>)
   12d62:	491b      	ldr	r1, [pc, #108]	; (12dd0 <net_buf_slist_put+0xd0>)
   12d64:	4816      	ldr	r0, [pc, #88]	; (12dc0 <net_buf_slist_put+0xc0>)
   12d66:	f008 fa61 	bl	1b22c <assert_print>
   12d6a:	4917      	ldr	r1, [pc, #92]	; (12dc8 <net_buf_slist_put+0xc8>)
   12d6c:	4819      	ldr	r0, [pc, #100]	; (12dd4 <net_buf_slist_put+0xd4>)
   12d6e:	f008 fa5d 	bl	1b22c <assert_print>
   12d72:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12d74:	4815      	ldr	r0, [pc, #84]	; (12dcc <net_buf_slist_put+0xcc>)
   12d76:	e7d1      	b.n	12d1c <net_buf_slist_put+0x1c>
   12d78:	460e      	mov	r6, r1
   12d7a:	e7e1      	b.n	12d40 <net_buf_slist_put+0x40>
	z_spin_lock_set_owner(l);
   12d7c:	4812      	ldr	r0, [pc, #72]	; (12dc8 <net_buf_slist_put+0xc8>)
   12d7e:	f004 fcaf 	bl	176e0 <z_spin_lock_set_owner>
	return list->tail;
   12d82:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   12d84:	b98b      	cbnz	r3, 12daa <net_buf_slist_put+0xaa>
	list->head = node;
   12d86:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12d88:	480f      	ldr	r0, [pc, #60]	; (12dc8 <net_buf_slist_put+0xc8>)
	list->tail = node;
   12d8a:	6066      	str	r6, [r4, #4]
   12d8c:	f004 fc9a 	bl	176c4 <z_spin_unlock_valid>
   12d90:	b968      	cbnz	r0, 12dae <net_buf_slist_put+0xae>
   12d92:	23c2      	movs	r3, #194	; 0xc2
   12d94:	4a0d      	ldr	r2, [pc, #52]	; (12dcc <net_buf_slist_put+0xcc>)
   12d96:	4910      	ldr	r1, [pc, #64]	; (12dd8 <net_buf_slist_put+0xd8>)
   12d98:	4809      	ldr	r0, [pc, #36]	; (12dc0 <net_buf_slist_put+0xc0>)
   12d9a:	f008 fa47 	bl	1b22c <assert_print>
   12d9e:	490a      	ldr	r1, [pc, #40]	; (12dc8 <net_buf_slist_put+0xc8>)
   12da0:	480e      	ldr	r0, [pc, #56]	; (12ddc <net_buf_slist_put+0xdc>)
   12da2:	f008 fa43 	bl	1b22c <assert_print>
   12da6:	21c2      	movs	r1, #194	; 0xc2
   12da8:	e7e4      	b.n	12d74 <net_buf_slist_put+0x74>
	parent->next = child;
   12daa:	601d      	str	r5, [r3, #0]
}
   12dac:	e7ec      	b.n	12d88 <net_buf_slist_put+0x88>
	__asm__ volatile(
   12dae:	f387 8811 	msr	BASEPRI, r7
   12db2:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   12db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12db8:	00022027 	.word	0x00022027
   12dbc:	00021fa4 	.word	0x00021fa4
   12dc0:	0001f995 	.word	0x0001f995
   12dc4:	00020d91 	.word	0x00020d91
   12dc8:	200098c8 	.word	0x200098c8
   12dcc:	0001fd89 	.word	0x0001fd89
   12dd0:	0001fde2 	.word	0x0001fde2
   12dd4:	0001fdf7 	.word	0x0001fdf7
   12dd8:	0001fdb6 	.word	0x0001fdb6
   12ddc:	0001fdcd 	.word	0x0001fdcd

00012de0 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   12de0:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   12de2:	4604      	mov	r4, r0
   12de4:	b950      	cbnz	r0, 12dfc <net_buf_slist_get+0x1c>
   12de6:	4933      	ldr	r1, [pc, #204]	; (12eb4 <net_buf_slist_get+0xd4>)
   12de8:	f240 13e3 	movw	r3, #483	; 0x1e3
   12dec:	4a32      	ldr	r2, [pc, #200]	; (12eb8 <net_buf_slist_get+0xd8>)
   12dee:	4833      	ldr	r0, [pc, #204]	; (12ebc <net_buf_slist_get+0xdc>)
   12df0:	f008 fa1c 	bl	1b22c <assert_print>
   12df4:	f240 11e3 	movw	r1, #483	; 0x1e3

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   12df8:	482f      	ldr	r0, [pc, #188]	; (12eb8 <net_buf_slist_get+0xd8>)
   12dfa:	e017      	b.n	12e2c <net_buf_slist_get+0x4c>
	__asm__ volatile(
   12dfc:	f04f 0320 	mov.w	r3, #32
   12e00:	f3ef 8611 	mrs	r6, BASEPRI
   12e04:	f383 8812 	msr	BASEPRI_MAX, r3
   12e08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12e0c:	482c      	ldr	r0, [pc, #176]	; (12ec0 <net_buf_slist_get+0xe0>)
   12e0e:	f004 fc4b 	bl	176a8 <z_spin_lock_valid>
   12e12:	b968      	cbnz	r0, 12e30 <net_buf_slist_get+0x50>
   12e14:	2394      	movs	r3, #148	; 0x94
   12e16:	4a2b      	ldr	r2, [pc, #172]	; (12ec4 <net_buf_slist_get+0xe4>)
   12e18:	492b      	ldr	r1, [pc, #172]	; (12ec8 <net_buf_slist_get+0xe8>)
   12e1a:	4828      	ldr	r0, [pc, #160]	; (12ebc <net_buf_slist_get+0xdc>)
   12e1c:	f008 fa06 	bl	1b22c <assert_print>
   12e20:	4927      	ldr	r1, [pc, #156]	; (12ec0 <net_buf_slist_get+0xe0>)
   12e22:	482a      	ldr	r0, [pc, #168]	; (12ecc <net_buf_slist_get+0xec>)
   12e24:	f008 fa02 	bl	1b22c <assert_print>
   12e28:	2194      	movs	r1, #148	; 0x94
   12e2a:	4826      	ldr	r0, [pc, #152]	; (12ec4 <net_buf_slist_get+0xe4>)
   12e2c:	f008 f9f7 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   12e30:	4823      	ldr	r0, [pc, #140]	; (12ec0 <net_buf_slist_get+0xe0>)
   12e32:	f004 fc55 	bl	176e0 <z_spin_lock_set_owner>
	return list->head;
   12e36:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   12e38:	b15d      	cbz	r5, 12e52 <net_buf_slist_get+0x72>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e3a:	6862      	ldr	r2, [r4, #4]
	return node->next;
   12e3c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e3e:	4295      	cmp	r5, r2
	list->head = node;
   12e40:	6023      	str	r3, [r4, #0]
	list->tail = node;
   12e42:	bf08      	it	eq
   12e44:	6063      	streq	r3, [r4, #4]
{
   12e46:	462b      	mov	r3, r5
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12e48:	795a      	ldrb	r2, [r3, #5]
   12e4a:	f012 0201 	ands.w	r2, r2, #1
   12e4e:	d110      	bne.n	12e72 <net_buf_slist_get+0x92>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   12e50:	601a      	str	r2, [r3, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12e52:	481b      	ldr	r0, [pc, #108]	; (12ec0 <net_buf_slist_get+0xe0>)
   12e54:	f004 fc36 	bl	176c4 <z_spin_unlock_valid>
   12e58:	bb28      	cbnz	r0, 12ea6 <net_buf_slist_get+0xc6>
   12e5a:	23c2      	movs	r3, #194	; 0xc2
   12e5c:	4a19      	ldr	r2, [pc, #100]	; (12ec4 <net_buf_slist_get+0xe4>)
   12e5e:	491c      	ldr	r1, [pc, #112]	; (12ed0 <net_buf_slist_get+0xf0>)
   12e60:	4816      	ldr	r0, [pc, #88]	; (12ebc <net_buf_slist_get+0xdc>)
   12e62:	f008 f9e3 	bl	1b22c <assert_print>
   12e66:	4916      	ldr	r1, [pc, #88]	; (12ec0 <net_buf_slist_get+0xe0>)
   12e68:	481a      	ldr	r0, [pc, #104]	; (12ed4 <net_buf_slist_get+0xf4>)
   12e6a:	f008 f9df 	bl	1b22c <assert_print>
   12e6e:	21c2      	movs	r1, #194	; 0xc2
   12e70:	e7db      	b.n	12e2a <net_buf_slist_get+0x4a>
	return list->head;
   12e72:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_GET(slist, snode)
   12e74:	b162      	cbz	r2, 12e90 <net_buf_slist_get+0xb0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e76:	6860      	ldr	r0, [r4, #4]
	return node->next;
   12e78:	6811      	ldr	r1, [r2, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e7a:	4282      	cmp	r2, r0
	list->head = node;
   12e7c:	6021      	str	r1, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e7e:	d100      	bne.n	12e82 <net_buf_slist_get+0xa2>
	list->tail = node;
   12e80:	6061      	str	r1, [r4, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   12e82:	7959      	ldrb	r1, [r3, #5]
			frag->frags = (void *)sys_slist_get(list);
   12e84:	601a      	str	r2, [r3, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   12e86:	f021 0101 	bic.w	r1, r1, #1
   12e8a:	7159      	strb	r1, [r3, #5]
   12e8c:	4613      	mov	r3, r2
   12e8e:	e7db      	b.n	12e48 <net_buf_slist_get+0x68>
			frag->frags = (void *)sys_slist_get(list);
   12e90:	601a      	str	r2, [r3, #0]
			__ASSERT_NO_MSG(frag->frags);
   12e92:	4911      	ldr	r1, [pc, #68]	; (12ed8 <net_buf_slist_get+0xf8>)
   12e94:	f240 13ed 	movw	r3, #493	; 0x1ed
   12e98:	4a07      	ldr	r2, [pc, #28]	; (12eb8 <net_buf_slist_get+0xd8>)
   12e9a:	4808      	ldr	r0, [pc, #32]	; (12ebc <net_buf_slist_get+0xdc>)
   12e9c:	f008 f9c6 	bl	1b22c <assert_print>
   12ea0:	f240 11ed 	movw	r1, #493	; 0x1ed
   12ea4:	e7a8      	b.n	12df8 <net_buf_slist_get+0x18>
	__asm__ volatile(
   12ea6:	f386 8811 	msr	BASEPRI, r6
   12eaa:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   12eae:	4628      	mov	r0, r5
   12eb0:	bd70      	pop	{r4, r5, r6, pc}
   12eb2:	bf00      	nop
   12eb4:	00022027 	.word	0x00022027
   12eb8:	00021fa4 	.word	0x00021fa4
   12ebc:	0001f995 	.word	0x0001f995
   12ec0:	200098c8 	.word	0x200098c8
   12ec4:	0001fd89 	.word	0x0001fd89
   12ec8:	0001fde2 	.word	0x0001fde2
   12ecc:	0001fdf7 	.word	0x0001fdf7
   12ed0:	0001fdb6 	.word	0x0001fdb6
   12ed4:	0001fdcd 	.word	0x0001fdcd
   12ed8:	0002200c 	.word	0x0002200c

00012edc <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   12edc:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   12ede:	b958      	cbnz	r0, 12ef8 <net_buf_put+0x1c>
   12ee0:	4912      	ldr	r1, [pc, #72]	; (12f2c <net_buf_put+0x50>)
   12ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
   12ee6:	4a12      	ldr	r2, [pc, #72]	; (12f30 <net_buf_put+0x54>)
   12ee8:	4812      	ldr	r0, [pc, #72]	; (12f34 <net_buf_put+0x58>)
   12eea:	f008 f99f 	bl	1b22c <assert_print>
   12eee:	f44f 7100 	mov.w	r1, #512	; 0x200
	__ASSERT_NO_MSG(buf);
   12ef2:	480f      	ldr	r0, [pc, #60]	; (12f30 <net_buf_put+0x54>)
   12ef4:	f008 f993 	bl	1b21e <assert_post_action>
   12ef8:	b9a9      	cbnz	r1, 12f26 <net_buf_put+0x4a>
   12efa:	490f      	ldr	r1, [pc, #60]	; (12f38 <net_buf_put+0x5c>)
   12efc:	f240 2301 	movw	r3, #513	; 0x201
   12f00:	4a0b      	ldr	r2, [pc, #44]	; (12f30 <net_buf_put+0x54>)
   12f02:	480c      	ldr	r0, [pc, #48]	; (12f34 <net_buf_put+0x58>)
   12f04:	f008 f992 	bl	1b22c <assert_print>
   12f08:	f240 2101 	movw	r1, #513	; 0x201
   12f0c:	e7f1      	b.n	12ef2 <net_buf_put+0x16>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   12f0e:	7953      	ldrb	r3, [r2, #5]
   12f10:	f043 0301 	orr.w	r3, r3, #1
   12f14:	7153      	strb	r3, [r2, #5]
   12f16:	4622      	mov	r2, r4
	for (tail = buf; tail->frags; tail = tail->frags) {
   12f18:	6814      	ldr	r4, [r2, #0]
   12f1a:	2c00      	cmp	r4, #0
   12f1c:	d1f7      	bne.n	12f0e <net_buf_put+0x32>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put_list(fifo, buf, tail);
   12f22:	f004 be0f 	b.w	17b44 <k_queue_append_list>
   12f26:	460a      	mov	r2, r1
   12f28:	e7f6      	b.n	12f18 <net_buf_put+0x3c>
   12f2a:	bf00      	nop
   12f2c:	0002202c 	.word	0x0002202c
   12f30:	00021fa4 	.word	0x00021fa4
   12f34:	0001f995 	.word	0x0001f995
   12f38:	00020d91 	.word	0x00020d91

00012f3c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   12f40:	4605      	mov	r5, r0
   12f42:	b328      	cbz	r0, 12f90 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12f44:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   12f46:	f04f 0834 	mov.w	r8, #52	; 0x34
   12f4a:	4e1a      	ldr	r6, [pc, #104]	; (12fb4 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   12f4c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   12f4e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   12f50:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   12f52:	3b01      	subs	r3, #1
   12f54:	b2db      	uxtb	r3, r3
   12f56:	7123      	strb	r3, [r4, #4]
   12f58:	b9c3      	cbnz	r3, 12f8c <net_buf_unref+0x50>
		if (buf->__buf) {
   12f5a:	6921      	ldr	r1, [r4, #16]
   12f5c:	b159      	cbz	r1, 12f76 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   12f5e:	7963      	ldrb	r3, [r4, #5]
   12f60:	079b      	lsls	r3, r3, #30
   12f62:	d407      	bmi.n	12f74 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12f64:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   12f66:	4620      	mov	r0, r4
   12f68:	fb08 6303 	mla	r3, r8, r3, r6
   12f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12f6e:	681b      	ldr	r3, [r3, #0]
   12f70:	689b      	ldr	r3, [r3, #8]
   12f72:	4798      	blx	r3
			buf->__buf = NULL;
   12f74:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   12f76:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   12f78:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   12f7a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   12f7e:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   12f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f82:	b18b      	cbz	r3, 12fa8 <net_buf_unref+0x6c>
			pool->destroy(buf);
   12f84:	4620      	mov	r0, r4
   12f86:	4798      	blx	r3
	while (buf) {
   12f88:	2d00      	cmp	r5, #0
   12f8a:	d1df      	bne.n	12f4c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   12f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   12f90:	4909      	ldr	r1, [pc, #36]	; (12fb8 <net_buf_unref+0x7c>)
   12f92:	480a      	ldr	r0, [pc, #40]	; (12fbc <net_buf_unref+0x80>)
   12f94:	f44f 7304 	mov.w	r3, #528	; 0x210
   12f98:	4a09      	ldr	r2, [pc, #36]	; (12fc0 <net_buf_unref+0x84>)
   12f9a:	f008 f947 	bl	1b22c <assert_print>
   12f9e:	f44f 7104 	mov.w	r1, #528	; 0x210
   12fa2:	4807      	ldr	r0, [pc, #28]	; (12fc0 <net_buf_unref+0x84>)
   12fa4:	f008 f93b 	bl	1b21e <assert_post_action>
	k_lifo_put(&pool->free, buf);
   12fa8:	4621      	mov	r1, r4
   12faa:	fb00 6008 	mla	r0, r0, r8, r6
   12fae:	f00b fb0e 	bl	1e5ce <k_queue_prepend>
}
   12fb2:	e7e9      	b.n	12f88 <net_buf_unref+0x4c>
   12fb4:	200085cc 	.word	0x200085cc
   12fb8:	00020d91 	.word	0x00020d91
   12fbc:	0001f995 	.word	0x0001f995
   12fc0:	00021fa4 	.word	0x00021fa4

00012fc4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   12fc4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   12fc6:	b958      	cbnz	r0, 12fe0 <net_buf_ref+0x1c>
   12fc8:	4907      	ldr	r1, [pc, #28]	; (12fe8 <net_buf_ref+0x24>)
   12fca:	4808      	ldr	r0, [pc, #32]	; (12fec <net_buf_ref+0x28>)
   12fcc:	f240 233f 	movw	r3, #575	; 0x23f
   12fd0:	4a07      	ldr	r2, [pc, #28]	; (12ff0 <net_buf_ref+0x2c>)
   12fd2:	f008 f92b 	bl	1b22c <assert_print>
   12fd6:	f240 213f 	movw	r1, #575	; 0x23f
   12fda:	4805      	ldr	r0, [pc, #20]	; (12ff0 <net_buf_ref+0x2c>)
   12fdc:	f008 f91f 	bl	1b21e <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   12fe0:	7902      	ldrb	r2, [r0, #4]
   12fe2:	3201      	adds	r2, #1
   12fe4:	7102      	strb	r2, [r0, #4]
	return buf;
}
   12fe6:	bd08      	pop	{r3, pc}
   12fe8:	00020d91 	.word	0x00020d91
   12fec:	0001f995 	.word	0x0001f995
   12ff0:	00021fa4 	.word	0x00021fa4

00012ff4 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   12ff4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   12ff6:	4603      	mov	r3, r0
   12ff8:	b958      	cbnz	r0, 13012 <net_buf_frag_last+0x1e>
   12ffa:	4908      	ldr	r1, [pc, #32]	; (1301c <net_buf_frag_last+0x28>)
   12ffc:	4808      	ldr	r0, [pc, #32]	; (13020 <net_buf_frag_last+0x2c>)
   12ffe:	f44f 731f 	mov.w	r3, #636	; 0x27c
   13002:	4a08      	ldr	r2, [pc, #32]	; (13024 <net_buf_frag_last+0x30>)
   13004:	f008 f912 	bl	1b22c <assert_print>
   13008:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1300c:	4805      	ldr	r0, [pc, #20]	; (13024 <net_buf_frag_last+0x30>)
   1300e:	f008 f906 	bl	1b21e <assert_post_action>

	while (buf->frags) {
   13012:	4618      	mov	r0, r3
   13014:	681b      	ldr	r3, [r3, #0]
   13016:	2b00      	cmp	r3, #0
   13018:	d1fb      	bne.n	13012 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1301a:	bd08      	pop	{r3, pc}
   1301c:	00020d91 	.word	0x00020d91
   13020:	0001f995 	.word	0x0001f995
   13024:	00021fa4 	.word	0x00021fa4

00013028 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   13028:	b570      	push	{r4, r5, r6, lr}
   1302a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1302c:	4604      	mov	r4, r0
   1302e:	b958      	cbnz	r0, 13048 <net_buf_frag_insert+0x20>
   13030:	490f      	ldr	r1, [pc, #60]	; (13070 <net_buf_frag_insert+0x48>)
   13032:	f240 2387 	movw	r3, #647	; 0x287
   13036:	4a0f      	ldr	r2, [pc, #60]	; (13074 <net_buf_frag_insert+0x4c>)
   13038:	480f      	ldr	r0, [pc, #60]	; (13078 <net_buf_frag_insert+0x50>)
   1303a:	f008 f8f7 	bl	1b22c <assert_print>
   1303e:	f240 2187 	movw	r1, #647	; 0x287
	__ASSERT_NO_MSG(frag);
   13042:	480c      	ldr	r0, [pc, #48]	; (13074 <net_buf_frag_insert+0x4c>)
   13044:	f008 f8eb 	bl	1b21e <assert_post_action>
   13048:	b949      	cbnz	r1, 1305e <net_buf_frag_insert+0x36>
   1304a:	490c      	ldr	r1, [pc, #48]	; (1307c <net_buf_frag_insert+0x54>)
   1304c:	f44f 7322 	mov.w	r3, #648	; 0x288
   13050:	4a08      	ldr	r2, [pc, #32]	; (13074 <net_buf_frag_insert+0x4c>)
   13052:	4809      	ldr	r0, [pc, #36]	; (13078 <net_buf_frag_insert+0x50>)
   13054:	f008 f8ea 	bl	1b22c <assert_print>
   13058:	f44f 7122 	mov.w	r1, #648	; 0x288
   1305c:	e7f1      	b.n	13042 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1305e:	6806      	ldr	r6, [r0, #0]
   13060:	b11e      	cbz	r6, 1306a <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   13062:	4608      	mov	r0, r1
   13064:	f7ff ffc6 	bl	12ff4 <net_buf_frag_last>
   13068:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1306a:	6025      	str	r5, [r4, #0]
}
   1306c:	bd70      	pop	{r4, r5, r6, pc}
   1306e:	bf00      	nop
   13070:	00022031 	.word	0x00022031
   13074:	00021fa4 	.word	0x00021fa4
   13078:	0001f995 	.word	0x0001f995
   1307c:	00022038 	.word	0x00022038

00013080 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   13080:	b538      	push	{r3, r4, r5, lr}
   13082:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   13084:	460c      	mov	r4, r1
   13086:	b959      	cbnz	r1, 130a0 <net_buf_frag_add+0x20>
   13088:	490c      	ldr	r1, [pc, #48]	; (130bc <net_buf_frag_add+0x3c>)
   1308a:	480d      	ldr	r0, [pc, #52]	; (130c0 <net_buf_frag_add+0x40>)
   1308c:	f240 2393 	movw	r3, #659	; 0x293
   13090:	4a0c      	ldr	r2, [pc, #48]	; (130c4 <net_buf_frag_add+0x44>)
   13092:	f008 f8cb 	bl	1b22c <assert_print>
   13096:	f240 2193 	movw	r1, #659	; 0x293
   1309a:	480a      	ldr	r0, [pc, #40]	; (130c4 <net_buf_frag_add+0x44>)
   1309c:	f008 f8bf 	bl	1b21e <assert_post_action>

	if (!head) {
   130a0:	b920      	cbnz	r0, 130ac <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   130a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   130a6:	4608      	mov	r0, r1
   130a8:	f7ff bf8c 	b.w	12fc4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   130ac:	f7ff ffa2 	bl	12ff4 <net_buf_frag_last>
   130b0:	4621      	mov	r1, r4
   130b2:	f7ff ffb9 	bl	13028 <net_buf_frag_insert>
}
   130b6:	4628      	mov	r0, r5
   130b8:	bd38      	pop	{r3, r4, r5, pc}
   130ba:	bf00      	nop
   130bc:	00022038 	.word	0x00022038
   130c0:	0001f995 	.word	0x0001f995
   130c4:	00021fa4 	.word	0x00021fa4

000130c8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   130c8:	b508      	push	{r3, lr}
   130ca:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   130cc:	6800      	ldr	r0, [r0, #0]
   130ce:	689a      	ldr	r2, [r3, #8]
   130d0:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   130d2:	4291      	cmp	r1, r2
   130d4:	d90b      	bls.n	130ee <net_buf_simple_push+0x26>
   130d6:	4909      	ldr	r1, [pc, #36]	; (130fc <net_buf_simple_push+0x34>)
   130d8:	4809      	ldr	r0, [pc, #36]	; (13100 <net_buf_simple_push+0x38>)
   130da:	f240 4317 	movw	r3, #1047	; 0x417
   130de:	4a09      	ldr	r2, [pc, #36]	; (13104 <net_buf_simple_push+0x3c>)
   130e0:	f008 f8a4 	bl	1b22c <assert_print>
   130e4:	f240 4117 	movw	r1, #1047	; 0x417
   130e8:	4806      	ldr	r0, [pc, #24]	; (13104 <net_buf_simple_push+0x3c>)
   130ea:	f008 f898 	bl	1b21e <assert_post_action>
	buf->len += len;
   130ee:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   130f0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   130f2:	4411      	add	r1, r2
	buf->data -= len;
   130f4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   130f6:	8099      	strh	r1, [r3, #4]
}
   130f8:	bd08      	pop	{r3, pc}
   130fa:	bf00      	nop
   130fc:	0002204d 	.word	0x0002204d
   13100:	0001f995 	.word	0x0001f995
   13104:	00021fa4 	.word	0x00021fa4

00013108 <net_buf_simple_pull>:
{
   13108:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1310a:	8882      	ldrh	r2, [r0, #4]
{
   1310c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1310e:	428a      	cmp	r2, r1
   13110:	d20b      	bcs.n	1312a <net_buf_simple_pull+0x22>
   13112:	4909      	ldr	r1, [pc, #36]	; (13138 <net_buf_simple_pull+0x30>)
   13114:	4809      	ldr	r0, [pc, #36]	; (1313c <net_buf_simple_pull+0x34>)
   13116:	f240 4377 	movw	r3, #1143	; 0x477
   1311a:	4a09      	ldr	r2, [pc, #36]	; (13140 <net_buf_simple_pull+0x38>)
   1311c:	f008 f886 	bl	1b22c <assert_print>
   13120:	f240 4177 	movw	r1, #1143	; 0x477
   13124:	4806      	ldr	r0, [pc, #24]	; (13140 <net_buf_simple_pull+0x38>)
   13126:	f008 f87a 	bl	1b21e <assert_post_action>
	buf->len -= len;
   1312a:	1a52      	subs	r2, r2, r1
   1312c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1312e:	6800      	ldr	r0, [r0, #0]
   13130:	4408      	add	r0, r1
   13132:	6018      	str	r0, [r3, #0]
}
   13134:	bd08      	pop	{r3, pc}
   13136:	bf00      	nop
   13138:	0002203d 	.word	0x0002203d
   1313c:	0001f995 	.word	0x0001f995
   13140:	00021fa4 	.word	0x00021fa4

00013144 <net_buf_simple_pull_mem>:
{
   13144:	b508      	push	{r3, lr}
   13146:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   13148:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1314a:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1314c:	428a      	cmp	r2, r1
   1314e:	d20b      	bcs.n	13168 <net_buf_simple_pull_mem+0x24>
   13150:	4908      	ldr	r1, [pc, #32]	; (13174 <net_buf_simple_pull_mem+0x30>)
   13152:	4809      	ldr	r0, [pc, #36]	; (13178 <net_buf_simple_pull_mem+0x34>)
   13154:	f240 4383 	movw	r3, #1155	; 0x483
   13158:	4a08      	ldr	r2, [pc, #32]	; (1317c <net_buf_simple_pull_mem+0x38>)
   1315a:	f008 f867 	bl	1b22c <assert_print>
   1315e:	f240 4183 	movw	r1, #1155	; 0x483
   13162:	4806      	ldr	r0, [pc, #24]	; (1317c <net_buf_simple_pull_mem+0x38>)
   13164:	f008 f85b 	bl	1b21e <assert_post_action>
	buf->len -= len;
   13168:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1316a:	4401      	add	r1, r0
	buf->len -= len;
   1316c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1316e:	6019      	str	r1, [r3, #0]
}
   13170:	bd08      	pop	{r3, pc}
   13172:	bf00      	nop
   13174:	0002203d 	.word	0x0002203d
   13178:	0001f995 	.word	0x0001f995
   1317c:	00021fa4 	.word	0x00021fa4

00013180 <net_buf_simple_add>:
{
   13180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   13182:	8885      	ldrh	r5, [r0, #4]
   13184:	6803      	ldr	r3, [r0, #0]
   13186:	460e      	mov	r6, r1
   13188:	4604      	mov	r4, r0
   1318a:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1318c:	f00a fa17 	bl	1d5be <net_buf_simple_tailroom>
   13190:	42b0      	cmp	r0, r6
   13192:	d20b      	bcs.n	131ac <net_buf_simple_add+0x2c>
   13194:	4907      	ldr	r1, [pc, #28]	; (131b4 <net_buf_simple_add+0x34>)
   13196:	4808      	ldr	r0, [pc, #32]	; (131b8 <net_buf_simple_add+0x38>)
   13198:	f44f 734a 	mov.w	r3, #808	; 0x328
   1319c:	4a07      	ldr	r2, [pc, #28]	; (131bc <net_buf_simple_add+0x3c>)
   1319e:	f008 f845 	bl	1b22c <assert_print>
   131a2:	f44f 714a 	mov.w	r1, #808	; 0x328
   131a6:	4805      	ldr	r0, [pc, #20]	; (131bc <net_buf_simple_add+0x3c>)
   131a8:	f008 f839 	bl	1b21e <assert_post_action>
	buf->len += len;
   131ac:	4435      	add	r5, r6
   131ae:	80a5      	strh	r5, [r4, #4]
}
   131b0:	4638      	mov	r0, r7
   131b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131b4:	00022071 	.word	0x00022071
   131b8:	0001f995 	.word	0x0001f995
   131bc:	00021fa4 	.word	0x00021fa4

000131c0 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   131c0:	b508      	push	{r3, lr}
   131c2:	4804      	ldr	r0, [pc, #16]	; (131d4 <xoshiro128_initialize+0x14>)
   131c4:	f00b f98f 	bl	1e4e6 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   131c8:	2800      	cmp	r0, #0
}
   131ca:	bf0c      	ite	eq
   131cc:	f06f 0012 	mvneq.w	r0, #18
   131d0:	2000      	movne	r0, #0
   131d2:	bd08      	pop	{r3, pc}
   131d4:	0001ea4c 	.word	0x0001ea4c

000131d8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   131d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   131da:	2340      	movs	r3, #64	; 0x40
{
   131dc:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   131de:	490a      	ldr	r1, [pc, #40]	; (13208 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   131e0:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   131e2:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   131e4:	1149      	asrs	r1, r1, #5
{
   131e6:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   131e8:	4623      	mov	r3, r4
   131ea:	4a08      	ldr	r2, [pc, #32]	; (1320c <onoff_start+0x34>)
   131ec:	4808      	ldr	r0, [pc, #32]	; (13210 <onoff_start+0x38>)
   131ee:	f00a fa14 	bl	1d61a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   131f2:	1e01      	subs	r1, r0, #0
   131f4:	da05      	bge.n	13202 <onoff_start+0x2a>
		notify(mgr, err);
   131f6:	4628      	mov	r0, r5
   131f8:	4623      	mov	r3, r4
	}
}
   131fa:	b003      	add	sp, #12
   131fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   13200:	4718      	bx	r3
}
   13202:	b003      	add	sp, #12
   13204:	bd30      	pop	{r4, r5, pc}
   13206:	bf00      	nop
   13208:	200098e0 	.word	0x200098e0
   1320c:	0001d689 	.word	0x0001d689
   13210:	0001e9ec 	.word	0x0001e9ec

00013214 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13214:	b2c9      	uxtb	r1, r1
   13216:	2903      	cmp	r1, #3
{
   13218:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1321a:	d909      	bls.n	13230 <get_status+0x1c>
   1321c:	4909      	ldr	r1, [pc, #36]	; (13244 <get_status+0x30>)
   1321e:	480a      	ldr	r0, [pc, #40]	; (13248 <get_status+0x34>)
   13220:	237a      	movs	r3, #122	; 0x7a
   13222:	4a0a      	ldr	r2, [pc, #40]	; (1324c <get_status+0x38>)
   13224:	f008 f802 	bl	1b22c <assert_print>
   13228:	217a      	movs	r1, #122	; 0x7a
   1322a:	4808      	ldr	r0, [pc, #32]	; (1324c <get_status+0x38>)
   1322c:	f007 fff7 	bl	1b21e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13230:	220c      	movs	r2, #12
   13232:	6903      	ldr	r3, [r0, #16]
   13234:	fb01 3302 	mla	r3, r1, r2, r3
   13238:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1323c:	f000 0007 	and.w	r0, r0, #7
   13240:	bd08      	pop	{r3, pc}
   13242:	bf00      	nop
   13244:	000220da 	.word	0x000220da
   13248:	0001f995 	.word	0x0001f995
   1324c:	0002209d 	.word	0x0002209d

00013250 <stop>:
{
   13250:	b570      	push	{r4, r5, r6, lr}
   13252:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13254:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   13256:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13258:	d90b      	bls.n	13272 <stop+0x22>
   1325a:	491a      	ldr	r1, [pc, #104]	; (132c4 <stop+0x74>)
   1325c:	481a      	ldr	r0, [pc, #104]	; (132c8 <stop+0x78>)
   1325e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   13262:	4a1a      	ldr	r2, [pc, #104]	; (132cc <stop+0x7c>)
   13264:	f007 ffe2 	bl	1b22c <assert_print>
   13268:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1326c:	4817      	ldr	r0, [pc, #92]	; (132cc <stop+0x7c>)
   1326e:	f007 ffd6 	bl	1b21e <assert_post_action>
	__asm__ volatile(
   13272:	f04f 0420 	mov.w	r4, #32
   13276:	f3ef 8511 	mrs	r5, BASEPRI
   1327a:	f384 8812 	msr	BASEPRI_MAX, r4
   1327e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13282:	260c      	movs	r6, #12
   13284:	fb06 3401 	mla	r4, r6, r1, r3
   13288:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1328c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   13290:	d008      	beq.n	132a4 <stop+0x54>
   13292:	42a2      	cmp	r2, r4
   13294:	d006      	beq.n	132a4 <stop+0x54>
	__asm__ volatile(
   13296:	f385 8811 	msr	BASEPRI, r5
   1329a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1329e:	f04f 30ff 	mov.w	r0, #4294967295
}
   132a2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   132a4:	2201      	movs	r2, #1
   132a6:	4371      	muls	r1, r6
   132a8:	440b      	add	r3, r1
   132aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   132ae:	f385 8811 	msr	BASEPRI, r5
   132b2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   132b6:	6843      	ldr	r3, [r0, #4]
   132b8:	440b      	add	r3, r1
   132ba:	685b      	ldr	r3, [r3, #4]
   132bc:	4798      	blx	r3
	return 0;
   132be:	2000      	movs	r0, #0
   132c0:	e7ef      	b.n	132a2 <stop+0x52>
   132c2:	bf00      	nop
   132c4:	000220da 	.word	0x000220da
   132c8:	0001f995 	.word	0x0001f995
   132cc:	0002209d 	.word	0x0002209d

000132d0 <onoff_stop>:
{
   132d0:	b570      	push	{r4, r5, r6, lr}
   132d2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   132d4:	4906      	ldr	r1, [pc, #24]	; (132f0 <onoff_stop+0x20>)
{
   132d6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   132d8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   132da:	1149      	asrs	r1, r1, #5
   132dc:	2240      	movs	r2, #64	; 0x40
   132de:	4805      	ldr	r0, [pc, #20]	; (132f4 <onoff_stop+0x24>)
   132e0:	f7ff ffb6 	bl	13250 <stop>
	notify(mgr, res);
   132e4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   132e6:	4601      	mov	r1, r0
	notify(mgr, res);
   132e8:	4620      	mov	r0, r4
}
   132ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   132ee:	4718      	bx	r3
   132f0:	200098e0 	.word	0x200098e0
   132f4:	0001e9ec 	.word	0x0001e9ec

000132f8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   132f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   132fc:	2200      	movs	r2, #0
   132fe:	2101      	movs	r1, #1
{
   13300:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13302:	2005      	movs	r0, #5
   13304:	f7f8 ff76 	bl	c1f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13308:	4811      	ldr	r0, [pc, #68]	; (13350 <clk_init+0x58>)
   1330a:	f001 ffff 	bl	1530c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1330e:	4b11      	ldr	r3, [pc, #68]	; (13354 <clk_init+0x5c>)
   13310:	4298      	cmp	r0, r3
   13312:	d119      	bne.n	13348 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13314:	f002 f81e 	bl	15354 <nrfx_clock_enable>
   13318:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1331a:	f04f 080c 	mov.w	r8, #12
   1331e:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13320:	f8df 9034 	ldr.w	r9, [pc, #52]	; 13358 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   13324:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13326:	4649      	mov	r1, r9
   13328:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1332c:	f007 fef3 	bl	1b116 <onoff_manager_init>
		if (err < 0) {
   13330:	2800      	cmp	r0, #0
   13332:	db07      	blt.n	13344 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13334:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13338:	3401      	adds	r4, #1
   1333a:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1333c:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13340:	d1f0      	bne.n	13324 <clk_init+0x2c>
	}

	return 0;
   13342:	2000      	movs	r0, #0
}
   13344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   13348:	f06f 0004 	mvn.w	r0, #4
   1334c:	e7fa      	b.n	13344 <clk_init+0x4c>
   1334e:	bf00      	nop
   13350:	00013395 	.word	0x00013395
   13354:	0bad0000 	.word	0x0bad0000
   13358:	0001f48c 	.word	0x0001f48c

0001335c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1335c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1335e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   13360:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   13362:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13364:	434b      	muls	r3, r1
   13366:	4809      	ldr	r0, [pc, #36]	; (1338c <clkstarted_handle.constprop.0+0x30>)
   13368:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1336a:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1336c:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   13370:	4418      	add	r0, r3
	sub_data->cb = NULL;
   13372:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   13376:	f00a f93d 	bl	1d5f4 <set_on_state>
	if (callback) {
   1337a:	b12d      	cbz	r5, 13388 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1337c:	4632      	mov	r2, r6
   1337e:	462b      	mov	r3, r5
}
   13380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13384:	4802      	ldr	r0, [pc, #8]	; (13390 <clkstarted_handle.constprop.0+0x34>)
   13386:	4718      	bx	r3
}
   13388:	bd70      	pop	{r4, r5, r6, pc}
   1338a:	bf00      	nop
   1338c:	200098e0 	.word	0x200098e0
   13390:	0001e9ec 	.word	0x0001e9ec

00013394 <clock_event_handler>:
{
   13394:	b508      	push	{r3, lr}
	switch (event) {
   13396:	2805      	cmp	r0, #5
   13398:	d820      	bhi.n	133dc <clock_event_handler+0x48>
   1339a:	e8df f000 	tbb	[pc, r0]
   1339e:	1103      	.short	0x1103
   133a0:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   133a4:	4b13      	ldr	r3, [pc, #76]	; (133f4 <clock_event_handler+0x60>)
   133a6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   133aa:	f010 0007 	ands.w	r0, r0, #7
   133ae:	d11f      	bne.n	133f0 <clock_event_handler+0x5c>
}
   133b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   133b4:	f7ff bfd2 	b.w	1335c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   133b8:	2002      	movs	r0, #2
   133ba:	e7f9      	b.n	133b0 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   133bc:	2003      	movs	r0, #3
   133be:	e7f7      	b.n	133b0 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   133c0:	2001      	movs	r0, #1
   133c2:	e7f5      	b.n	133b0 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   133c4:	490c      	ldr	r1, [pc, #48]	; (133f8 <clock_event_handler+0x64>)
   133c6:	f240 235f 	movw	r3, #607	; 0x25f
   133ca:	4a0c      	ldr	r2, [pc, #48]	; (133fc <clock_event_handler+0x68>)
   133cc:	480c      	ldr	r0, [pc, #48]	; (13400 <clock_event_handler+0x6c>)
   133ce:	f007 ff2d 	bl	1b22c <assert_print>
   133d2:	f240 215f 	movw	r1, #607	; 0x25f
		__ASSERT_NO_MSG(0);
   133d6:	4809      	ldr	r0, [pc, #36]	; (133fc <clock_event_handler+0x68>)
   133d8:	f007 ff21 	bl	1b21e <assert_post_action>
   133dc:	4906      	ldr	r1, [pc, #24]	; (133f8 <clock_event_handler+0x64>)
   133de:	f240 2363 	movw	r3, #611	; 0x263
   133e2:	4a06      	ldr	r2, [pc, #24]	; (133fc <clock_event_handler+0x68>)
   133e4:	4806      	ldr	r0, [pc, #24]	; (13400 <clock_event_handler+0x6c>)
   133e6:	f007 ff21 	bl	1b22c <assert_print>
   133ea:	f240 2163 	movw	r1, #611	; 0x263
   133ee:	e7f2      	b.n	133d6 <clock_event_handler+0x42>
}
   133f0:	bd08      	pop	{r3, pc}
   133f2:	bf00      	nop
   133f4:	200098e0 	.word	0x200098e0
   133f8:	00022960 	.word	0x00022960
   133fc:	0002209d 	.word	0x0002209d
   13400:	0001f995 	.word	0x0001f995

00013404 <generic_hfclk_start>:
{
   13404:	b508      	push	{r3, lr}
	__asm__ volatile(
   13406:	f04f 0320 	mov.w	r3, #32
   1340a:	f3ef 8111 	mrs	r1, BASEPRI
   1340e:	f383 8812 	msr	BASEPRI_MAX, r3
   13412:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13416:	4a11      	ldr	r2, [pc, #68]	; (1345c <generic_hfclk_start+0x58>)
   13418:	6813      	ldr	r3, [r2, #0]
   1341a:	f043 0002 	orr.w	r0, r3, #2
   1341e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13420:	07da      	lsls	r2, r3, #31
   13422:	d408      	bmi.n	13436 <generic_hfclk_start+0x32>
	__asm__ volatile(
   13424:	f381 8811 	msr	BASEPRI, r1
   13428:	f3bf 8f6f 	isb	sy
}
   1342c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13430:	2001      	movs	r0, #1
   13432:	f001 bfb9 	b.w	153a8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13436:	4b0a      	ldr	r3, [pc, #40]	; (13460 <generic_hfclk_start+0x5c>)
   13438:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1343c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13440:	07d3      	lsls	r3, r2, #31
   13442:	d5ef      	bpl.n	13424 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   13444:	4807      	ldr	r0, [pc, #28]	; (13464 <generic_hfclk_start+0x60>)
   13446:	f00a f8d5 	bl	1d5f4 <set_on_state>
   1344a:	f381 8811 	msr	BASEPRI, r1
   1344e:	f3bf 8f6f 	isb	sy
}
   13452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   13456:	2000      	movs	r0, #0
   13458:	f7ff bf80 	b.w	1335c <clkstarted_handle.constprop.0>
   1345c:	20009990 	.word	0x20009990
   13460:	40005000 	.word	0x40005000
   13464:	20009968 	.word	0x20009968

00013468 <api_blocking_start>:
{
   13468:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1346a:	2200      	movs	r2, #0
   1346c:	2301      	movs	r3, #1
   1346e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   13472:	ab04      	add	r3, sp, #16
   13474:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13478:	4a09      	ldr	r2, [pc, #36]	; (134a0 <api_blocking_start+0x38>)
   1347a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1347c:	f8cd d000 	str.w	sp, [sp]
   13480:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13484:	f00a f8f9 	bl	1d67a <api_start>
	if (err < 0) {
   13488:	2800      	cmp	r0, #0
   1348a:	db05      	blt.n	13498 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1348c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13490:	2300      	movs	r3, #0
   13492:	4668      	mov	r0, sp
   13494:	f004 fc62 	bl	17d5c <z_impl_k_sem_take>
}
   13498:	b007      	add	sp, #28
   1349a:	f85d fb04 	ldr.w	pc, [sp], #4
   1349e:	bf00      	nop
   134a0:	0001d6b9 	.word	0x0001d6b9

000134a4 <generic_hfclk_stop>:
   134a4:	4b07      	ldr	r3, [pc, #28]	; (134c4 <generic_hfclk_stop+0x20>)
   134a6:	e8d3 2fef 	ldaex	r2, [r3]
   134aa:	f022 0102 	bic.w	r1, r2, #2
   134ae:	e8c3 1fe0 	stlex	r0, r1, [r3]
   134b2:	2800      	cmp	r0, #0
   134b4:	d1f7      	bne.n	134a6 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   134b6:	07d3      	lsls	r3, r2, #31
   134b8:	d402      	bmi.n	134c0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   134ba:	2001      	movs	r0, #1
   134bc:	f001 bff2 	b.w	154a4 <nrfx_clock_stop>
}
   134c0:	4770      	bx	lr
   134c2:	bf00      	nop
   134c4:	20009990 	.word	0x20009990

000134c8 <z_nrf_clock_control_lf_on>:
{
   134c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   134cc:	2201      	movs	r2, #1
   134ce:	4606      	mov	r6, r0
   134d0:	4941      	ldr	r1, [pc, #260]	; (135d8 <z_nrf_clock_control_lf_on+0x110>)
   134d2:	e8d1 3fef 	ldaex	r3, [r1]
   134d6:	e8c1 2fe0 	stlex	r0, r2, [r1]
   134da:	2800      	cmp	r0, #0
   134dc:	d1f9      	bne.n	134d2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   134de:	b9a3      	cbnz	r3, 1350a <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   134e0:	493e      	ldr	r1, [pc, #248]	; (135dc <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   134e2:	483f      	ldr	r0, [pc, #252]	; (135e0 <z_nrf_clock_control_lf_on+0x118>)
   134e4:	604b      	str	r3, [r1, #4]
   134e6:	60cb      	str	r3, [r1, #12]
   134e8:	608a      	str	r2, [r1, #8]
   134ea:	f7f6 f84b 	bl	9584 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   134ee:	2800      	cmp	r0, #0
   134f0:	da0b      	bge.n	1350a <z_nrf_clock_control_lf_on+0x42>
   134f2:	493c      	ldr	r1, [pc, #240]	; (135e4 <z_nrf_clock_control_lf_on+0x11c>)
   134f4:	f240 2321 	movw	r3, #545	; 0x221
   134f8:	4a3b      	ldr	r2, [pc, #236]	; (135e8 <z_nrf_clock_control_lf_on+0x120>)
   134fa:	483c      	ldr	r0, [pc, #240]	; (135ec <z_nrf_clock_control_lf_on+0x124>)
   134fc:	f007 fe96 	bl	1b22c <assert_print>
   13500:	f240 2121 	movw	r1, #545	; 0x221
		__ASSERT_NO_MSG(false);
   13504:	4838      	ldr	r0, [pc, #224]	; (135e8 <z_nrf_clock_control_lf_on+0x120>)
   13506:	f007 fe8a 	bl	1b21e <assert_post_action>
	switch (start_mode) {
   1350a:	b35e      	cbz	r6, 13564 <z_nrf_clock_control_lf_on+0x9c>
   1350c:	1e73      	subs	r3, r6, #1
   1350e:	2b01      	cmp	r3, #1
   13510:	d858      	bhi.n	135c4 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13512:	2e01      	cmp	r6, #1
   13514:	d106      	bne.n	13524 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13516:	4b36      	ldr	r3, [pc, #216]	; (135f0 <z_nrf_clock_control_lf_on+0x128>)
   13518:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1351c:	f003 0303 	and.w	r3, r3, #3
   13520:	2b02      	cmp	r3, #2
   13522:	d01f      	beq.n	13564 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13524:	f00b f80c 	bl	1e540 <k_is_in_isr>
   13528:	4605      	mov	r5, r0
   1352a:	b9e8      	cbnz	r0, 13568 <z_nrf_clock_control_lf_on+0xa0>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1352c:	4b31      	ldr	r3, [pc, #196]	; (135f4 <z_nrf_clock_control_lf_on+0x12c>)
   1352e:	781b      	ldrb	r3, [r3, #0]
   13530:	b1d3      	cbz	r3, 13568 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   13532:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   13534:	4607      	mov	r7, r0
   13536:	4b2e      	ldr	r3, [pc, #184]	; (135f0 <z_nrf_clock_control_lf_on+0x128>)
   13538:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1353c:	4c2c      	ldr	r4, [pc, #176]	; (135f0 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1353e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 135f8 <z_nrf_clock_control_lf_on+0x130>
   13542:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13546:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1354a:	03d2      	lsls	r2, r2, #15
   1354c:	d516      	bpl.n	1357c <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1354e:	f003 0303 	and.w	r3, r3, #3
   13552:	2b02      	cmp	r3, #2
   13554:	d001      	beq.n	1355a <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   13556:	2e01      	cmp	r6, #1
   13558:	d110      	bne.n	1357c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1355a:	b375      	cbz	r5, 135ba <z_nrf_clock_control_lf_on+0xf2>
   1355c:	f387 8811 	msr	BASEPRI, r7
   13560:	f3bf 8f6f 	isb	sy
}
   13564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   13568:	f04f 0320 	mov.w	r3, #32
   1356c:	f3ef 8711 	mrs	r7, BASEPRI
   13570:	f383 8812 	msr	BASEPRI_MAX, r3
   13574:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13578:	2501      	movs	r5, #1
   1357a:	e7df      	b.n	1353c <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1357c:	b1c5      	cbz	r5, 135b0 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1357e:	4638      	mov	r0, r7
   13580:	f7f8 fd98 	bl	c0b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   13584:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13588:	b2db      	uxtb	r3, r3
   1358a:	2b01      	cmp	r3, #1
   1358c:	d1d9      	bne.n	13542 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1358e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   13592:	2a00      	cmp	r2, #0
   13594:	d0d5      	beq.n	13542 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13596:	2200      	movs	r2, #0
   13598:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1359c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   135a0:	2202      	movs	r2, #2
   135a2:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   135a6:	2220      	movs	r2, #32
   135a8:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   135ac:	60a3      	str	r3, [r4, #8]
}
   135ae:	e7c8      	b.n	13542 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   135b0:	2100      	movs	r1, #0
   135b2:	2021      	movs	r0, #33	; 0x21
   135b4:	f006 fa82 	bl	19abc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   135b8:	e7e4      	b.n	13584 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   135ba:	2202      	movs	r2, #2
   135bc:	4b0c      	ldr	r3, [pc, #48]	; (135f0 <z_nrf_clock_control_lf_on+0x128>)
   135be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   135c2:	e7cf      	b.n	13564 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   135c4:	490d      	ldr	r1, [pc, #52]	; (135fc <z_nrf_clock_control_lf_on+0x134>)
   135c6:	f240 2333 	movw	r3, #563	; 0x233
   135ca:	4a07      	ldr	r2, [pc, #28]	; (135e8 <z_nrf_clock_control_lf_on+0x120>)
   135cc:	4807      	ldr	r0, [pc, #28]	; (135ec <z_nrf_clock_control_lf_on+0x124>)
   135ce:	f007 fe2d 	bl	1b22c <assert_print>
   135d2:	f240 2133 	movw	r1, #563	; 0x233
   135d6:	e795      	b.n	13504 <z_nrf_clock_control_lf_on+0x3c>
   135d8:	200098dc 	.word	0x200098dc
   135dc:	200098cc 	.word	0x200098cc
   135e0:	20009900 	.word	0x20009900
   135e4:	00020228 	.word	0x00020228
   135e8:	0002209d 	.word	0x0002209d
   135ec:	0001f995 	.word	0x0001f995
   135f0:	40005000 	.word	0x40005000
   135f4:	20009baf 	.word	0x20009baf
   135f8:	e000e100 	.word	0xe000e100
   135fc:	00022960 	.word	0x00022960

00013600 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13600:	b508      	push	{r3, lr}
   13602:	4807      	ldr	r0, [pc, #28]	; (13620 <uart_console_init+0x20>)
   13604:	f00a ff6f 	bl	1e4e6 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   13608:	b138      	cbz	r0, 1361a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1360a:	4806      	ldr	r0, [pc, #24]	; (13624 <uart_console_init+0x24>)
   1360c:	f7f9 fcf8 	bl	d000 <__stdout_hook_install>
	__printk_hook_install(console_out);
   13610:	4804      	ldr	r0, [pc, #16]	; (13624 <uart_console_init+0x24>)
   13612:	f7f5 fc35 	bl	8e80 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   13616:	2000      	movs	r0, #0
}
   13618:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1361a:	f06f 0012 	mvn.w	r0, #18
   1361e:	e7fb      	b.n	13618 <uart_console_init+0x18>
   13620:	0001ea64 	.word	0x0001ea64
   13624:	00013629 	.word	0x00013629

00013628 <console_out>:
	if ('\n' == c) {
   13628:	280a      	cmp	r0, #10
{
   1362a:	b538      	push	{r3, r4, r5, lr}
   1362c:	4604      	mov	r4, r0
   1362e:	4d07      	ldr	r5, [pc, #28]	; (1364c <console_out+0x24>)
	if ('\n' == c) {
   13630:	d104      	bne.n	1363c <console_out+0x14>
   13632:	68ab      	ldr	r3, [r5, #8]
   13634:	210d      	movs	r1, #13
   13636:	4628      	mov	r0, r5
   13638:	685b      	ldr	r3, [r3, #4]
   1363a:	4798      	blx	r3
   1363c:	68ab      	ldr	r3, [r5, #8]
   1363e:	4803      	ldr	r0, [pc, #12]	; (1364c <console_out+0x24>)
   13640:	685b      	ldr	r3, [r3, #4]
   13642:	b2e1      	uxtb	r1, r4
   13644:	4798      	blx	r3
}
   13646:	4620      	mov	r0, r4
   13648:	bd38      	pop	{r3, r4, r5, pc}
   1364a:	bf00      	nop
   1364c:	0001ea64 	.word	0x0001ea64

00013650 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   13650:	b510      	push	{r4, lr}
	return port->data;
   13652:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   13654:	b961      	cbnz	r1, 13670 <gpio_nrfx_manage_callback+0x20>
   13656:	4920      	ldr	r1, [pc, #128]	; (136d8 <gpio_nrfx_manage_callback+0x88>)
   13658:	232a      	movs	r3, #42	; 0x2a
   1365a:	4a20      	ldr	r2, [pc, #128]	; (136dc <gpio_nrfx_manage_callback+0x8c>)
   1365c:	4820      	ldr	r0, [pc, #128]	; (136e0 <gpio_nrfx_manage_callback+0x90>)
   1365e:	f007 fde5 	bl	1b22c <assert_print>
   13662:	4820      	ldr	r0, [pc, #128]	; (136e4 <gpio_nrfx_manage_callback+0x94>)
   13664:	f007 fde2 	bl	1b22c <assert_print>
   13668:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1366a:	481c      	ldr	r0, [pc, #112]	; (136dc <gpio_nrfx_manage_callback+0x8c>)
   1366c:	f007 fdd7 	bl	1b21e <assert_post_action>
   13670:	6848      	ldr	r0, [r1, #4]
   13672:	b950      	cbnz	r0, 1368a <gpio_nrfx_manage_callback+0x3a>
   13674:	491c      	ldr	r1, [pc, #112]	; (136e8 <gpio_nrfx_manage_callback+0x98>)
   13676:	232b      	movs	r3, #43	; 0x2b
   13678:	4a18      	ldr	r2, [pc, #96]	; (136dc <gpio_nrfx_manage_callback+0x8c>)
   1367a:	4819      	ldr	r0, [pc, #100]	; (136e0 <gpio_nrfx_manage_callback+0x90>)
   1367c:	f007 fdd6 	bl	1b22c <assert_print>
   13680:	481a      	ldr	r0, [pc, #104]	; (136ec <gpio_nrfx_manage_callback+0x9c>)
   13682:	f007 fdd3 	bl	1b22c <assert_print>
   13686:	212b      	movs	r1, #43	; 0x2b
   13688:	e7ef      	b.n	1366a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1368a:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1368c:	b1f8      	cbz	r0, 136ce <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1368e:	4288      	cmp	r0, r1
   13690:	d119      	bne.n	136c6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   13692:	689c      	ldr	r4, [r3, #8]
	return node->next;
   13694:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   13696:	42a1      	cmp	r1, r4
	list->head = node;
   13698:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1369a:	d100      	bne.n	1369e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1369c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1369e:	2000      	movs	r0, #0
   136a0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   136a2:	b12a      	cbz	r2, 136b0 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   136a4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   136a6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   136a8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   136aa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   136ac:	b902      	cbnz	r2, 136b0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   136ae:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   136b0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   136b2:	e010      	b.n	136d6 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   136b4:	4281      	cmp	r1, r0
   136b6:	d106      	bne.n	136c6 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   136b8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   136ba:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   136bc:	6898      	ldr	r0, [r3, #8]
   136be:	4281      	cmp	r1, r0
   136c0:	d1ed      	bne.n	1369e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   136c2:	609c      	str	r4, [r3, #8]
}
   136c4:	e7eb      	b.n	1369e <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   136c6:	4604      	mov	r4, r0
   136c8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   136ca:	2800      	cmp	r0, #0
   136cc:	d1f2      	bne.n	136b4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   136ce:	2a00      	cmp	r2, #0
   136d0:	d1e8      	bne.n	136a4 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   136d2:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   136d6:	bd10      	pop	{r4, pc}
   136d8:	00022174 	.word	0x00022174
   136dc:	00022138 	.word	0x00022138
   136e0:	0001f995 	.word	0x0001f995
   136e4:	0002217d 	.word	0x0002217d
   136e8:	0002218c 	.word	0x0002218c
   136ec:	0002219e 	.word	0x0002219e

000136f0 <gpio_nrfx_pin_interrupt_configure>:
{
   136f0:	b530      	push	{r4, r5, lr}
	return port->config;
   136f2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   136f4:	f001 041f 	and.w	r4, r1, #31
   136f8:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   136fa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   136fe:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13700:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   13704:	d105      	bne.n	13712 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   13706:	4620      	mov	r0, r4
   13708:	f002 fa16 	bl	15b38 <nrfx_gpiote_trigger_disable>
		return 0;
   1370c:	2000      	movs	r0, #0
}
   1370e:	b005      	add	sp, #20
   13710:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   13712:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   13714:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   13718:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1371c:	d114      	bne.n	13748 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1371e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   13722:	bf0c      	ite	eq
   13724:	2304      	moveq	r3, #4
   13726:	2305      	movne	r3, #5
   13728:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1372c:	2300      	movs	r3, #0
   1372e:	4620      	mov	r0, r4
   13730:	4619      	mov	r1, r3
   13732:	aa02      	add	r2, sp, #8
   13734:	f002 f80a 	bl	1574c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13738:	4b2a      	ldr	r3, [pc, #168]	; (137e4 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1373a:	4298      	cmp	r0, r3
   1373c:	d14f      	bne.n	137de <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1373e:	2101      	movs	r1, #1
   13740:	4620      	mov	r0, r4
   13742:	f002 f98f 	bl	15a64 <nrfx_gpiote_trigger_enable>
	return 0;
   13746:	e7e1      	b.n	1370c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13748:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1374c:	d024      	beq.n	13798 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1374e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   13752:	bf14      	ite	ne
   13754:	2301      	movne	r3, #1
   13756:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   13758:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1375c:	6883      	ldr	r3, [r0, #8]
   1375e:	40cb      	lsrs	r3, r1
   13760:	07d8      	lsls	r0, r3, #31
   13762:	d4e3      	bmi.n	1372c <gpio_nrfx_pin_interrupt_configure+0x3c>
   13764:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   13768:	d1e0      	bne.n	1372c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1376a:	0962      	lsrs	r2, r4, #5
   1376c:	f004 031f 	and.w	r3, r4, #31
   13770:	d014      	beq.n	1379c <gpio_nrfx_pin_interrupt_configure+0xac>
   13772:	2a01      	cmp	r2, #1
   13774:	d104      	bne.n	13780 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   13776:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1377a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1377c:	07d1      	lsls	r1, r2, #31
   1377e:	d414      	bmi.n	137aa <gpio_nrfx_pin_interrupt_configure+0xba>
   13780:	4919      	ldr	r1, [pc, #100]	; (137e8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   13782:	481a      	ldr	r0, [pc, #104]	; (137ec <gpio_nrfx_pin_interrupt_configure+0xfc>)
   13784:	f240 2347 	movw	r3, #583	; 0x247
   13788:	4a19      	ldr	r2, [pc, #100]	; (137f0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1378a:	f007 fd4f 	bl	1b22c <assert_print>
   1378e:	f240 2147 	movw	r1, #583	; 0x247
   13792:	4817      	ldr	r0, [pc, #92]	; (137f0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   13794:	f007 fd43 	bl	1b21e <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13798:	2303      	movs	r3, #3
   1379a:	e7dd      	b.n	13758 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1379c:	f04f 32ff 	mov.w	r2, #4294967295
   137a0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   137a2:	07d2      	lsls	r2, r2, #31
   137a4:	d5ec      	bpl.n	13780 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   137a6:	4a13      	ldr	r2, [pc, #76]	; (137f4 <gpio_nrfx_pin_interrupt_configure+0x104>)
   137a8:	e000      	b.n	137ac <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   137aa:	4a13      	ldr	r2, [pc, #76]	; (137f8 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   137ac:	3380      	adds	r3, #128	; 0x80
   137ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   137b2:	07db      	lsls	r3, r3, #31
   137b4:	d4ba      	bmi.n	1372c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   137b6:	f10d 0507 	add.w	r5, sp, #7
   137ba:	4629      	mov	r1, r5
   137bc:	4620      	mov	r0, r4
   137be:	f002 f8eb 	bl	15998 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   137c2:	4b0e      	ldr	r3, [pc, #56]	; (137fc <gpio_nrfx_pin_interrupt_configure+0x10c>)
   137c4:	4298      	cmp	r0, r3
   137c6:	d001      	beq.n	137cc <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   137c8:	9503      	str	r5, [sp, #12]
   137ca:	e7af      	b.n	1372c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   137cc:	4628      	mov	r0, r5
   137ce:	f002 f943 	bl	15a58 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   137d2:	4b04      	ldr	r3, [pc, #16]	; (137e4 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   137d4:	4298      	cmp	r0, r3
   137d6:	d0f7      	beq.n	137c8 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   137d8:	f06f 000b 	mvn.w	r0, #11
   137dc:	e797      	b.n	1370e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   137de:	f06f 0015 	mvn.w	r0, #21
   137e2:	e794      	b.n	1370e <gpio_nrfx_pin_interrupt_configure+0x1e>
   137e4:	0bad0000 	.word	0x0bad0000
   137e8:	000221e8 	.word	0x000221e8
   137ec:	0001f995 	.word	0x0001f995
   137f0:	000221b5 	.word	0x000221b5
   137f4:	40842500 	.word	0x40842500
   137f8:	40842800 	.word	0x40842800
   137fc:	0bad0004 	.word	0x0bad0004

00013800 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   13800:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   13802:	f002 f919 	bl	15a38 <nrfx_gpiote_is_init>
   13806:	4604      	mov	r4, r0
   13808:	b968      	cbnz	r0, 13826 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1380a:	f002 f8ed 	bl	159e8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1380e:	4b08      	ldr	r3, [pc, #32]	; (13830 <gpio_nrfx_init+0x30>)
   13810:	4298      	cmp	r0, r3
   13812:	d10a      	bne.n	1382a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   13814:	4621      	mov	r1, r4
   13816:	4807      	ldr	r0, [pc, #28]	; (13834 <gpio_nrfx_init+0x34>)
   13818:	f002 f8b8 	bl	1598c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1381c:	4622      	mov	r2, r4
   1381e:	2105      	movs	r1, #5
   13820:	202f      	movs	r0, #47	; 0x2f
   13822:	f7f8 fce7 	bl	c1f4 <z_arm_irq_priority_set>
		return 0;
   13826:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   13828:	bd10      	pop	{r4, pc}
		return -EIO;
   1382a:	f06f 0004 	mvn.w	r0, #4
   1382e:	e7fb      	b.n	13828 <gpio_nrfx_init+0x28>
   13830:	0bad0000 	.word	0x0bad0000
   13834:	00013839 	.word	0x00013839

00013838 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13838:	0942      	lsrs	r2, r0, #5
{
   1383a:	4603      	mov	r3, r0
   1383c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1383e:	d002      	beq.n	13846 <nrfx_gpio_handler+0xe>
   13840:	2a01      	cmp	r2, #1
   13842:	d01e      	beq.n	13882 <nrfx_gpio_handler+0x4a>
}
   13844:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13846:	4e14      	ldr	r6, [pc, #80]	; (13898 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   13848:	6932      	ldr	r2, [r6, #16]
   1384a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1384c:	2900      	cmp	r1, #0
   1384e:	d0f9      	beq.n	13844 <nrfx_gpio_handler+0xc>
   13850:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   13852:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   13856:	680c      	ldr	r4, [r1, #0]
   13858:	409d      	lsls	r5, r3
   1385a:	2900      	cmp	r1, #0
   1385c:	d0f2      	beq.n	13844 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1385e:	688a      	ldr	r2, [r1, #8]
   13860:	402a      	ands	r2, r5
   13862:	d012      	beq.n	1388a <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   13864:	684b      	ldr	r3, [r1, #4]
   13866:	b973      	cbnz	r3, 13886 <nrfx_gpio_handler+0x4e>
   13868:	490c      	ldr	r1, [pc, #48]	; (1389c <nrfx_gpio_handler+0x64>)
   1386a:	234d      	movs	r3, #77	; 0x4d
   1386c:	4a0c      	ldr	r2, [pc, #48]	; (138a0 <nrfx_gpio_handler+0x68>)
   1386e:	480d      	ldr	r0, [pc, #52]	; (138a4 <nrfx_gpio_handler+0x6c>)
   13870:	f007 fcdc 	bl	1b22c <assert_print>
   13874:	480c      	ldr	r0, [pc, #48]	; (138a8 <nrfx_gpio_handler+0x70>)
   13876:	f007 fcd9 	bl	1b22c <assert_print>
   1387a:	214d      	movs	r1, #77	; 0x4d
   1387c:	4808      	ldr	r0, [pc, #32]	; (138a0 <nrfx_gpio_handler+0x68>)
   1387e:	f007 fcce 	bl	1b21e <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13882:	4e0a      	ldr	r6, [pc, #40]	; (138ac <nrfx_gpio_handler+0x74>)
   13884:	e7e0      	b.n	13848 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   13886:	4630      	mov	r0, r6
   13888:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1388a:	b11c      	cbz	r4, 13894 <nrfx_gpio_handler+0x5c>
   1388c:	6823      	ldr	r3, [r4, #0]
   1388e:	4621      	mov	r1, r4
   13890:	461c      	mov	r4, r3
   13892:	e7e2      	b.n	1385a <nrfx_gpio_handler+0x22>
   13894:	4623      	mov	r3, r4
   13896:	e7fa      	b.n	1388e <nrfx_gpio_handler+0x56>
   13898:	0001ea1c 	.word	0x0001ea1c
   1389c:	0002220b 	.word	0x0002220b
   138a0:	00022138 	.word	0x00022138
   138a4:	0001f995 	.word	0x0001f995
   138a8:	0002219e 	.word	0x0002219e
   138ac:	0001ea04 	.word	0x0001ea04

000138b0 <gpio_nrfx_pin_configure>:
{
   138b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   138b4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   138b8:	f001 051f 	and.w	r5, r1, #31
   138bc:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   138c0:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   138c2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   138c6:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   138c8:	4628      	mov	r0, r5
   138ca:	f10d 0103 	add.w	r1, sp, #3
   138ce:	f002 f863 	bl	15998 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   138d2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   138d6:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   138d8:	d115      	bne.n	13906 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   138da:	4628      	mov	r0, r5
   138dc:	f002 f956 	bl	15b8c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   138e0:	4b48      	ldr	r3, [pc, #288]	; (13a04 <gpio_nrfx_pin_configure+0x154>)
   138e2:	429e      	cmp	r6, r3
   138e4:	d170      	bne.n	139c8 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   138e6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   138ea:	f002 f8af 	bl	15a4c <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   138ee:	42b0      	cmp	r0, r6
   138f0:	d06a      	beq.n	139c8 <gpio_nrfx_pin_configure+0x118>
   138f2:	4945      	ldr	r1, [pc, #276]	; (13a08 <gpio_nrfx_pin_configure+0x158>)
   138f4:	236a      	movs	r3, #106	; 0x6a
   138f6:	4a45      	ldr	r2, [pc, #276]	; (13a0c <gpio_nrfx_pin_configure+0x15c>)
   138f8:	4845      	ldr	r0, [pc, #276]	; (13a10 <gpio_nrfx_pin_configure+0x160>)
   138fa:	f007 fc97 	bl	1b22c <assert_print>
   138fe:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   13900:	4842      	ldr	r0, [pc, #264]	; (13a0c <gpio_nrfx_pin_configure+0x15c>)
   13902:	f007 fc8c 	bl	1b21e <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   13906:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13908:	4628      	mov	r0, r5
   1390a:	4619      	mov	r1, r3
   1390c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1390e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13912:	f001 ff1b 	bl	1574c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13916:	4b3b      	ldr	r3, [pc, #236]	; (13a04 <gpio_nrfx_pin_configure+0x154>)
   13918:	4298      	cmp	r0, r3
   1391a:	d004      	beq.n	13926 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1391c:	f06f 0015 	mvn.w	r0, #21
}
   13920:	b004      	add	sp, #16
   13922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   13926:	4286      	cmp	r6, r0
   13928:	d10d      	bne.n	13946 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1392a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1392e:	f002 f88d 	bl	15a4c <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   13932:	42b0      	cmp	r0, r6
   13934:	d007      	beq.n	13946 <gpio_nrfx_pin_configure+0x96>
   13936:	4934      	ldr	r1, [pc, #208]	; (13a08 <gpio_nrfx_pin_configure+0x158>)
   13938:	237c      	movs	r3, #124	; 0x7c
   1393a:	4a34      	ldr	r2, [pc, #208]	; (13a0c <gpio_nrfx_pin_configure+0x15c>)
   1393c:	4834      	ldr	r0, [pc, #208]	; (13a10 <gpio_nrfx_pin_configure+0x160>)
   1393e:	f007 fc75 	bl	1b22c <assert_print>
   13942:	217c      	movs	r1, #124	; 0x7c
   13944:	e7dc      	b.n	13900 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   13946:	03a6      	lsls	r6, r4, #14
   13948:	d54c      	bpl.n	139e4 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1394a:	f240 3306 	movw	r3, #774	; 0x306
   1394e:	4023      	ands	r3, r4
   13950:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   13954:	d019      	beq.n	1398a <gpio_nrfx_pin_configure+0xda>
   13956:	d80c      	bhi.n	13972 <gpio_nrfx_pin_configure+0xc2>
   13958:	2b06      	cmp	r3, #6
   1395a:	d017      	beq.n	1398c <gpio_nrfx_pin_configure+0xdc>
   1395c:	d804      	bhi.n	13968 <gpio_nrfx_pin_configure+0xb8>
   1395e:	b1ab      	cbz	r3, 1398c <gpio_nrfx_pin_configure+0xdc>
   13960:	2b02      	cmp	r3, #2
   13962:	d1db      	bne.n	1391c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   13964:	2304      	movs	r3, #4
   13966:	e011      	b.n	1398c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1396c:	d1d6      	bne.n	1391c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1396e:	2301      	movs	r3, #1
   13970:	e00c      	b.n	1398c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13972:	f240 2202 	movw	r2, #514	; 0x202
   13976:	4293      	cmp	r3, r2
   13978:	d028      	beq.n	139cc <gpio_nrfx_pin_configure+0x11c>
   1397a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1397e:	d027      	beq.n	139d0 <gpio_nrfx_pin_configure+0x120>
   13980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13984:	d1ca      	bne.n	1391c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   13986:	2302      	movs	r3, #2
   13988:	e000      	b.n	1398c <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1398a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1398c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   13990:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   13994:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   13998:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1399a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1399e:	bf4c      	ite	mi
   139a0:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   139a2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   139a6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   139a8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   139ac:	d512      	bpl.n	139d4 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   139ae:	2301      	movs	r3, #1
   139b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   139b4:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   139b6:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   139b8:	2200      	movs	r2, #0
   139ba:	4628      	mov	r0, r5
   139bc:	a901      	add	r1, sp, #4
   139be:	f001 ff6d 	bl	1589c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   139c2:	4b10      	ldr	r3, [pc, #64]	; (13a04 <gpio_nrfx_pin_configure+0x154>)
   139c4:	4298      	cmp	r0, r3
   139c6:	d1a9      	bne.n	1391c <gpio_nrfx_pin_configure+0x6c>
   139c8:	2000      	movs	r0, #0
   139ca:	e7a9      	b.n	13920 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   139cc:	2305      	movs	r3, #5
   139ce:	e7dd      	b.n	1398c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   139d0:	2303      	movs	r3, #3
   139d2:	e7db      	b.n	1398c <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   139d4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   139d6:	bf41      	itttt	mi
   139d8:	2301      	movmi	r3, #1
   139da:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   139de:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   139e0:	60d3      	strmi	r3, [r2, #12]
}
   139e2:	e7e9      	b.n	139b8 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   139e4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   139e6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   139ea:	bf4c      	ite	mi
   139ec:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   139ee:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   139f2:	461a      	mov	r2, r3
   139f4:	4628      	mov	r0, r5
   139f6:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   139f8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   139fc:	f001 fea6 	bl	1574c <nrfx_gpiote_input_configure>
   13a00:	e7df      	b.n	139c2 <gpio_nrfx_pin_configure+0x112>
   13a02:	bf00      	nop
   13a04:	0bad0000 	.word	0x0bad0000
   13a08:	0001ff47 	.word	0x0001ff47
   13a0c:	00022217 	.word	0x00022217
   13a10:	0001f995 	.word	0x0001f995

00013a14 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   13a14:	2100      	movs	r1, #0
   13a16:	4802      	ldr	r0, [pc, #8]	; (13a20 <pwm_nrfx_get_cycles_per_sec+0xc>)
   13a18:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   13a1c:	2000      	movs	r0, #0
   13a1e:	4770      	bx	lr
   13a20:	00f42400 	.word	0x00f42400

00013a24 <nrf_gpio_pin_port_decode>:
{
   13a24:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   13a26:	6803      	ldr	r3, [r0, #0]
    switch (port)
   13a28:	095a      	lsrs	r2, r3, #5
   13a2a:	d00d      	beq.n	13a48 <nrf_gpio_pin_port_decode+0x24>
   13a2c:	2a01      	cmp	r2, #1
   13a2e:	d013      	beq.n	13a58 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   13a30:	490e      	ldr	r1, [pc, #56]	; (13a6c <nrf_gpio_pin_port_decode+0x48>)
   13a32:	480f      	ldr	r0, [pc, #60]	; (13a70 <nrf_gpio_pin_port_decode+0x4c>)
   13a34:	f240 2347 	movw	r3, #583	; 0x247
   13a38:	4a0e      	ldr	r2, [pc, #56]	; (13a74 <nrf_gpio_pin_port_decode+0x50>)
   13a3a:	f007 fbf7 	bl	1b22c <assert_print>
   13a3e:	f240 2147 	movw	r1, #583	; 0x247
   13a42:	480c      	ldr	r0, [pc, #48]	; (13a74 <nrf_gpio_pin_port_decode+0x50>)
   13a44:	f007 fbeb 	bl	1b21e <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   13a48:	f04f 32ff 	mov.w	r2, #4294967295
   13a4c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   13a50:	07d9      	lsls	r1, r3, #31
   13a52:	d5ed      	bpl.n	13a30 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   13a54:	4808      	ldr	r0, [pc, #32]	; (13a78 <nrf_gpio_pin_port_decode+0x54>)
   13a56:	e008      	b.n	13a6a <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   13a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   13a5c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   13a60:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   13a62:	07d2      	lsls	r2, r2, #31
   13a64:	d5e4      	bpl.n	13a30 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   13a66:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   13a68:	4804      	ldr	r0, [pc, #16]	; (13a7c <nrf_gpio_pin_port_decode+0x58>)
}
   13a6a:	bd08      	pop	{r3, pc}
   13a6c:	000221e8 	.word	0x000221e8
   13a70:	0001f995 	.word	0x0001f995
   13a74:	000221b5 	.word	0x000221b5
   13a78:	40842500 	.word	0x40842500
   13a7c:	40842800 	.word	0x40842800

00013a80 <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   13a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a84:	b082      	sub	sp, #8
	const struct pwm_nrfx_config *config = dev->config;
   13a86:	6845      	ldr	r5, [r0, #4]
{
   13a88:	af00      	add	r7, sp, #0
	struct pwm_nrfx_data *data = dev->data;

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   13a8a:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
	struct pwm_nrfx_data *data = dev->data;
   13a8e:	6906      	ldr	r6, [r0, #16]
{
   13a90:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   13a92:	2100      	movs	r1, #0
   13a94:	4640      	mov	r0, r8
   13a96:	1d3a      	adds	r2, r7, #4
   13a98:	f009 fec5 	bl	1d826 <pinctrl_lookup_state>
	if (ret < 0) {
   13a9c:	2800      	cmp	r0, #0
   13a9e:	db59      	blt.n	13b54 <pwm_nrfx_init+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   13aa0:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13aa2:	f8d8 2000 	ldr.w	r2, [r8]
   13aa6:	7919      	ldrb	r1, [r3, #4]
   13aa8:	6818      	ldr	r0, [r3, #0]
   13aaa:	f009 fed2 	bl	1d852 <pinctrl_configure_pins>

	if (ret < 0) {
   13aae:	2800      	cmp	r0, #0
   13ab0:	db50      	blt.n	13b54 <pwm_nrfx_init+0xd4>
		return ret;
	}

	data->initially_inverted = 0;
   13ab2:	f04f 0800 	mov.w	r8, #0
   13ab6:	f886 800e 	strb.w	r8, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
   13aba:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    return p_reg->PSEL.OUT[channel];
   13abc:	f508 72ac 	add.w	r2, r8, #344	; 0x158
   13ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13ac4:	2b00      	cmp	r3, #0
   13ac6:	db10      	blt.n	13aea <pwm_nrfx_init+0x6a>
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
   13ac8:	607b      	str	r3, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13aca:	1d38      	adds	r0, r7, #4
   13acc:	f7ff ffaa 	bl	13a24 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   13ad0:	687a      	ldr	r2, [r7, #4]
    return p_reg->OUT;
   13ad2:	6843      	ldr	r3, [r0, #4]
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   13ad4:	40d3      	lsrs	r3, r2
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   13ad6:	f013 0301 	ands.w	r3, r3, #1
   13ada:	bf18      	it	ne
   13adc:	2301      	movne	r3, #1
			data->initially_inverted |=
   13ade:	7bb2      	ldrb	r2, [r6, #14]
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   13ae0:	bf18      	it	ne
   13ae2:	fa03 f308 	lslne.w	r3, r3, r8
			data->initially_inverted |=
   13ae6:	4313      	orrs	r3, r2
   13ae8:	73b3      	strb	r3, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   13aea:	f108 0801 	add.w	r8, r8, #1
   13aee:	f1b8 0f04 	cmp.w	r8, #4
   13af2:	d1e2      	bne.n	13aba <pwm_nrfx_init+0x3a>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   13af4:	2300      	movs	r3, #0
		bool inverted = data->initially_inverted & BIT(i);
   13af6:	2001      	movs	r0, #1
   13af8:	7bb1      	ldrb	r1, [r6, #14]
   13afa:	3602      	adds	r6, #2
   13afc:	fa00 f203 	lsl.w	r2, r0, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   13b00:	420a      	tst	r2, r1
   13b02:	bf0c      	ite	eq
   13b04:	2201      	moveq	r2, #1
   13b06:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   13b08:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   13b0a:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   13b0c:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   13b0e:	f826 2f02 	strh.w	r2, [r6, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   13b12:	d1f3      	bne.n	13afc <pwm_nrfx_init+0x7c>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   13b14:	2300      	movs	r3, #0
   13b16:	4628      	mov	r0, r5
   13b18:	461a      	mov	r2, r3
   13b1a:	f105 0108 	add.w	r1, r5, #8
   13b1e:	f002 fa9b 	bl	16058 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   13b22:	4b0f      	ldr	r3, [pc, #60]	; (13b60 <pwm_nrfx_init+0xe0>)
   13b24:	4298      	cmp	r0, r3
   13b26:	d019      	beq.n	13b5c <pwm_nrfx_init+0xdc>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   13b28:	6823      	ldr	r3, [r4, #0]
   13b2a:	466c      	mov	r4, sp
   13b2c:	b088      	sub	sp, #32
   13b2e:	466a      	mov	r2, sp
   13b30:	490c      	ldr	r1, [pc, #48]	; (13b64 <pwm_nrfx_init+0xe4>)
   13b32:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13b36:	f44f 7300 	mov.w	r3, #512	; 0x200
   13b3a:	8393      	strh	r3, [r2, #28]
   13b3c:	4b0a      	ldr	r3, [pc, #40]	; (13b68 <pwm_nrfx_init+0xe8>)
   13b3e:	f842 3f10 	str.w	r3, [r2, #16]!
   13b42:	480a      	ldr	r0, [pc, #40]	; (13b6c <pwm_nrfx_init+0xec>)
   13b44:	2300      	movs	r3, #0
   13b46:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   13b4a:	f7f7 f8d7 	bl	acfc <z_impl_z_log_msg_static_create>
		return -EBUSY;
   13b4e:	f06f 000f 	mvn.w	r0, #15
   13b52:	46a5      	mov	sp, r4
	}

	return 0;
}
   13b54:	3708      	adds	r7, #8
   13b56:	46bd      	mov	sp, r7
   13b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   13b5c:	2000      	movs	r0, #0
   13b5e:	e7f9      	b.n	13b54 <pwm_nrfx_init+0xd4>
   13b60:	0bad0000 	.word	0x0bad0000
   13b64:	0002225b 	.word	0x0002225b
   13b68:	01000003 	.word	0x01000003
   13b6c:	0001ee34 	.word	0x0001ee34

00013b70 <pwm_nrfx_set_cycles>:
{
   13b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b74:	b086      	sub	sp, #24
   13b76:	af00      	add	r7, sp, #0
   13b78:	f8b7 c030 	ldrh.w	ip, [r7, #48]	; 0x30
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   13b7c:	2903      	cmp	r1, #3
{
   13b7e:	4616      	mov	r6, r2
	const struct pwm_nrfx_config *config = dev->config;
   13b80:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   13b82:	6904      	ldr	r4, [r0, #16]
	bool inverted = (flags & PWM_POLARITY_INVERTED);
   13b84:	f00c 0c01 	and.w	ip, ip, #1
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   13b88:	d910      	bls.n	13bac <pwm_nrfx_set_cycles+0x3c>
		LOG_ERR("Invalid channel: %u.", channel);
   13b8a:	466c      	mov	r4, sp
   13b8c:	b088      	sub	sp, #32
   13b8e:	466a      	mov	r2, sp
   13b90:	4b59      	ldr	r3, [pc, #356]	; (13cf8 <pwm_nrfx_set_cycles+0x188>)
   13b92:	e9c2 3105 	strd	r3, r1, [r2, #20]
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   13b96:	2303      	movs	r3, #3
   13b98:	f842 3f10 	str.w	r3, [r2, #16]!
   13b9c:	2300      	movs	r3, #0
   13b9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13ba2:	4856      	ldr	r0, [pc, #344]	; (13cfc <pwm_nrfx_set_cycles+0x18c>)
   13ba4:	f7f7 f8aa 	bl	acfc <z_impl_z_log_msg_static_create>
   13ba8:	46a5      	mov	sp, r4
	return false;
   13baa:	e01f      	b.n	13bec <pwm_nrfx_set_cycles+0x7c>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   13bac:	f04f 0801 	mov.w	r8, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   13bb0:	7baa      	ldrb	r2, [r5, #14]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   13bb2:	fa08 f801 	lsl.w	r8, r8, r1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   13bb6:	2a01      	cmp	r2, #1
		pulse_cycles /= 2;
   13bb8:	bf04      	itt	eq
   13bba:	085b      	lsreq	r3, r3, #1
		period_cycles /= 2;
   13bbc:	0876      	lsreq	r6, r6, #1
	if (pulse_cycles == 0) {
   13bbe:	2b00      	cmp	r3, #0
   13bc0:	d074      	beq.n	13cac <pwm_nrfx_set_cycles+0x13c>
	} else if (pulse_cycles >= period_cycles) {
   13bc2:	429e      	cmp	r6, r3
   13bc4:	d943      	bls.n	13c4e <pwm_nrfx_set_cycles+0xde>
	if (period_cycles == data->period_cycles) {
   13bc6:	6820      	ldr	r0, [r4, #0]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   13bc8:	7b22      	ldrb	r2, [r4, #12]
	if (period_cycles == data->period_cycles) {
   13bca:	4286      	cmp	r6, r0
   13bcc:	d023      	beq.n	13c16 <pwm_nrfx_set_cycles+0xa6>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   13bce:	ea32 0208 	bics.w	r2, r2, r8
   13bd2:	d011      	beq.n	13bf8 <pwm_nrfx_set_cycles+0x88>
		LOG_ERR("Incompatible period.");
   13bd4:	4b4a      	ldr	r3, [pc, #296]	; (13d00 <pwm_nrfx_set_cycles+0x190>)
   13bd6:	617b      	str	r3, [r7, #20]
   13bd8:	2302      	movs	r3, #2
   13bda:	613b      	str	r3, [r7, #16]
   13bdc:	2300      	movs	r3, #0
   13bde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13be2:	4846      	ldr	r0, [pc, #280]	; (13cfc <pwm_nrfx_set_cycles+0x18c>)
   13be4:	f107 0210 	add.w	r2, r7, #16
   13be8:	f7f7 f888 	bl	acfc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   13bec:	f06f 0015 	mvn.w	r0, #21
}
   13bf0:	3718      	adds	r7, #24
   13bf2:	46bd      	mov	sp, r7
   13bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bf8:	4630      	mov	r0, r6
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   13bfa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   13bfe:	d21a      	bcs.n	13c36 <pwm_nrfx_set_cycles+0xc6>
			data->period_cycles = period_cycles;
   13c00:	6026      	str	r6, [r4, #0]
			data->prescaler     = prescaler;
   13c02:	7362      	strb	r2, [r4, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   13c04:	682e      	ldr	r6, [r5, #0]
					  config->initial_config.count_mode,
   13c06:	f895 e00e 	ldrb.w	lr, [r5, #14]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   13c0a:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->MODE       = mode;
   13c0e:	f8c6 e504 	str.w	lr, [r6, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   13c12:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   13c16:	7b62      	ldrb	r2, [r4, #13]
   13c18:	40d3      	lsrs	r3, r2
   13c1a:	b29b      	uxth	r3, r3
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   13c1c:	f1bc 0f00 	cmp.w	ip, #0
   13c20:	d101      	bne.n	13c26 <pwm_nrfx_set_cycles+0xb6>
   13c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	if (!needs_pwm) {
   13c26:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   13c2a:	808b      	strh	r3, [r1, #4]
		data->pwm_needed |= BIT(channel);
   13c2c:	7b23      	ldrb	r3, [r4, #12]
   13c2e:	ea43 0308 	orr.w	r3, r3, r8
   13c32:	7323      	strb	r3, [r4, #12]
	if (data->pwm_needed == 0) {
   13c34:	e030      	b.n	13c98 <pwm_nrfx_set_cycles+0x128>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   13c36:	3201      	adds	r2, #1
   13c38:	2a08      	cmp	r2, #8
		countertop >>= 1;
   13c3a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   13c3e:	d1dc      	bne.n	13bfa <pwm_nrfx_set_cycles+0x8a>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   13c40:	466c      	mov	r4, sp
   13c42:	b088      	sub	sp, #32
   13c44:	466a      	mov	r2, sp
   13c46:	4b2f      	ldr	r3, [pc, #188]	; (13d04 <pwm_nrfx_set_cycles+0x194>)
   13c48:	e9c2 3605 	strd	r3, r6, [r2, #20]
   13c4c:	e7a3      	b.n	13b96 <pwm_nrfx_set_cycles+0x26>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   13c4e:	004b      	lsls	r3, r1, #1
   13c50:	4423      	add	r3, r4
   13c52:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   13c56:	f1bc 0f00 	cmp.w	ip, #0
   13c5a:	d010      	beq.n	13c7e <pwm_nrfx_set_cycles+0x10e>
   13c5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   13c60:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   13c62:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.OUT[channel];
   13c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   13c68:	2b00      	cmp	r3, #0
   13c6a:	db10      	blt.n	13c8e <pwm_nrfx_set_cycles+0x11e>
        nrf_gpio_pin_clear(pin_number);
   13c6c:	603b      	str	r3, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13c6e:	4638      	mov	r0, r7
   13c70:	f7ff fed8 	bl	13a24 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   13c74:	2301      	movs	r3, #1
   13c76:	683a      	ldr	r2, [r7, #0]
   13c78:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   13c7a:	60c3      	str	r3, [r0, #12]
   13c7c:	e007      	b.n	13c8e <pwm_nrfx_set_cycles+0x11e>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   13c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c82:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   13c84:	682b      	ldr	r3, [r5, #0]
   13c86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   13c8a:	2b00      	cmp	r3, #0
   13c8c:	da1b      	bge.n	13cc6 <pwm_nrfx_set_cycles+0x156>
		data->pwm_needed &= ~BIT(channel);
   13c8e:	7b21      	ldrb	r1, [r4, #12]
   13c90:	ea21 0108 	bic.w	r1, r1, r8
   13c94:	7321      	strb	r1, [r4, #12]
	if (data->pwm_needed == 0) {
   13c96:	b1f9      	cbz	r1, 13cd8 <pwm_nrfx_set_cycles+0x168>
		if (data->stop_requested) {
   13c98:	7be3      	ldrb	r3, [r4, #15]
   13c9a:	bb23      	cbnz	r3, 13ce6 <pwm_nrfx_set_cycles+0x176>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   13c9c:	2300      	movs	r3, #0
   13c9e:	2201      	movs	r2, #1
   13ca0:	4628      	mov	r0, r5
   13ca2:	f105 0118 	add.w	r1, r5, #24
   13ca6:	f002 faa5 	bl	161f4 <nrfx_pwm_simple_playback>
   13caa:	e01a      	b.n	13ce2 <pwm_nrfx_set_cycles+0x172>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   13cac:	004a      	lsls	r2, r1, #1
   13cae:	4422      	add	r2, r4
   13cb0:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   13cb4:	f1bc 0f00 	cmp.w	ip, #0
   13cb8:	d001      	beq.n	13cbe <pwm_nrfx_set_cycles+0x14e>
   13cba:	8093      	strh	r3, [r2, #4]
   13cbc:	e7e2      	b.n	13c84 <pwm_nrfx_set_cycles+0x114>
   13cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13cc2:	8093      	strh	r3, [r2, #4]
   13cc4:	e7cd      	b.n	13c62 <pwm_nrfx_set_cycles+0xf2>
        nrf_gpio_pin_set(pin_number);
   13cc6:	603b      	str	r3, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13cc8:	4638      	mov	r0, r7
   13cca:	f7ff feab 	bl	13a24 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13cce:	2301      	movs	r3, #1
   13cd0:	683a      	ldr	r2, [r7, #0]
   13cd2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   13cd4:	6083      	str	r3, [r0, #8]
   13cd6:	e7da      	b.n	13c8e <pwm_nrfx_set_cycles+0x11e>
		nrfx_pwm_stop(&config->pwm, false);
   13cd8:	4628      	mov	r0, r5
   13cda:	f002 fb29 	bl	16330 <nrfx_pwm_stop>
		data->stop_requested = true;
   13cde:	2301      	movs	r3, #1
   13ce0:	73e3      	strb	r3, [r4, #15]
	return 0;
   13ce2:	2000      	movs	r0, #0
   13ce4:	e784      	b.n	13bf0 <pwm_nrfx_set_cycles+0x80>
			data->stop_requested = false;
   13ce6:	2300      	movs	r3, #0
   13ce8:	73e3      	strb	r3, [r4, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   13cea:	4628      	mov	r0, r5
   13cec:	f002 faf6 	bl	162dc <nrfx_pwm_is_stopped>
   13cf0:	2800      	cmp	r0, #0
   13cf2:	d0fa      	beq.n	13cea <pwm_nrfx_set_cycles+0x17a>
   13cf4:	e7d2      	b.n	13c9c <pwm_nrfx_set_cycles+0x12c>
   13cf6:	bf00      	nop
   13cf8:	0002227b 	.word	0x0002227b
   13cfc:	0001ee34 	.word	0x0001ee34
   13d00:	00022290 	.word	0x00022290
   13d04:	000222a5 	.word	0x000222a5

00013d08 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   13d08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   13d0a:	794b      	ldrb	r3, [r1, #5]
   13d0c:	2b01      	cmp	r3, #1
   13d0e:	d029      	beq.n	13d64 <uarte_nrfx_configure+0x5c>
   13d10:	2b03      	cmp	r3, #3
   13d12:	d124      	bne.n	13d5e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   13d14:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13d16:	798b      	ldrb	r3, [r1, #6]
   13d18:	2b03      	cmp	r3, #3
   13d1a:	d120      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13d1c:	79ce      	ldrb	r6, [r1, #7]
   13d1e:	b10e      	cbz	r6, 13d24 <uarte_nrfx_configure+0x1c>
   13d20:	2e01      	cmp	r6, #1
   13d22:	d11c      	bne.n	13d5e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   13d24:	790a      	ldrb	r2, [r1, #4]
   13d26:	2a01      	cmp	r2, #1
   13d28:	d01e      	beq.n	13d68 <uarte_nrfx_configure+0x60>
   13d2a:	2a02      	cmp	r2, #2
   13d2c:	d020      	beq.n	13d70 <uarte_nrfx_configure+0x68>
   13d2e:	b9b2      	cbnz	r2, 13d5e <uarte_nrfx_configure+0x56>
   13d30:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13d32:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   13d34:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   13d36:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   13d3a:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   13d3e:	d06e      	beq.n	13e1e <uarte_nrfx_configure+0x116>
   13d40:	d833      	bhi.n	13daa <uarte_nrfx_configure+0xa2>
   13d42:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   13d46:	d06d      	beq.n	13e24 <uarte_nrfx_configure+0x11c>
   13d48:	d81c      	bhi.n	13d84 <uarte_nrfx_configure+0x7c>
   13d4a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   13d4e:	d06b      	beq.n	13e28 <uarte_nrfx_configure+0x120>
   13d50:	d810      	bhi.n	13d74 <uarte_nrfx_configure+0x6c>
   13d52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   13d56:	d06a      	beq.n	13e2e <uarte_nrfx_configure+0x126>
   13d58:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   13d5c:	d06a      	beq.n	13e34 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   13d5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13d62:	e05b      	b.n	13e1c <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   13d64:	2700      	movs	r7, #0
   13d66:	e7d6      	b.n	13d16 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   13d68:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   13d6c:	220e      	movs	r2, #14
   13d6e:	e7e0      	b.n	13d32 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   13d70:	2400      	movs	r4, #0
   13d72:	e7fb      	b.n	13d6c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   13d74:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   13d78:	d05f      	beq.n	13e3a <uarte_nrfx_configure+0x132>
   13d7a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   13d7e:	d1ee      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   13d80:	4b38      	ldr	r3, [pc, #224]	; (13e64 <uarte_nrfx_configure+0x15c>)
   13d82:	e03c      	b.n	13dfe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   13d84:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   13d88:	d05a      	beq.n	13e40 <uarte_nrfx_configure+0x138>
   13d8a:	d807      	bhi.n	13d9c <uarte_nrfx_configure+0x94>
   13d8c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   13d90:	d058      	beq.n	13e44 <uarte_nrfx_configure+0x13c>
   13d92:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   13d96:	d1e2      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   13d98:	4b33      	ldr	r3, [pc, #204]	; (13e68 <uarte_nrfx_configure+0x160>)
   13d9a:	e030      	b.n	13dfe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   13d9c:	f647 2512 	movw	r5, #31250	; 0x7a12
   13da0:	42ab      	cmp	r3, r5
   13da2:	d1dc      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   13da4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   13da8:	e029      	b.n	13dfe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   13daa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   13dae:	d04b      	beq.n	13e48 <uarte_nrfx_configure+0x140>
   13db0:	d813      	bhi.n	13dda <uarte_nrfx_configure+0xd2>
   13db2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   13db6:	d04a      	beq.n	13e4e <uarte_nrfx_configure+0x146>
   13db8:	d809      	bhi.n	13dce <uarte_nrfx_configure+0xc6>
   13dba:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   13dbe:	42ab      	cmp	r3, r5
   13dc0:	d047      	beq.n	13e52 <uarte_nrfx_configure+0x14a>
   13dc2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   13dc6:	d1ca      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   13dc8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   13dcc:	e017      	b.n	13dfe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   13dce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   13dd2:	d1c4      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   13dd4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   13dd8:	e011      	b.n	13dfe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   13dda:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   13dde:	d03b      	beq.n	13e58 <uarte_nrfx_configure+0x150>
   13de0:	d808      	bhi.n	13df4 <uarte_nrfx_configure+0xec>
   13de2:	4d22      	ldr	r5, [pc, #136]	; (13e6c <uarte_nrfx_configure+0x164>)
   13de4:	42ab      	cmp	r3, r5
   13de6:	d03a      	beq.n	13e5e <uarte_nrfx_configure+0x156>
   13de8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   13dec:	d1b7      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   13dee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   13df2:	e004      	b.n	13dfe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   13df4:	4d1e      	ldr	r5, [pc, #120]	; (13e70 <uarte_nrfx_configure+0x168>)
   13df6:	42ab      	cmp	r3, r5
   13df8:	d1b1      	bne.n	13d5e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   13dfe:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13e00:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   13e04:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   13e06:	433a      	orrs	r2, r7
   13e08:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   13e0a:	4334      	orrs	r4, r6
   13e0c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13e0e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   13e12:	1d2b      	adds	r3, r5, #4
   13e14:	c903      	ldmia	r1, {r0, r1}
   13e16:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   13e1a:	2000      	movs	r0, #0
}
   13e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13e1e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   13e22:	e7ec      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   13e24:	4b13      	ldr	r3, [pc, #76]	; (13e74 <uarte_nrfx_configure+0x16c>)
   13e26:	e7ea      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13e28:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13e2c:	e7e7      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   13e2e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   13e32:	e7e4      	b.n	13dfe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   13e34:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   13e38:	e7e1      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   13e3a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   13e3e:	e7de      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   13e40:	4b0d      	ldr	r3, [pc, #52]	; (13e78 <uarte_nrfx_configure+0x170>)
   13e42:	e7dc      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   13e44:	4b0d      	ldr	r3, [pc, #52]	; (13e7c <uarte_nrfx_configure+0x174>)
   13e46:	e7da      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   13e48:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   13e4c:	e7d7      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   13e4e:	4b0c      	ldr	r3, [pc, #48]	; (13e80 <uarte_nrfx_configure+0x178>)
   13e50:	e7d5      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   13e52:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   13e56:	e7d2      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   13e58:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   13e5c:	e7cf      	b.n	13dfe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   13e5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   13e62:	e7cc      	b.n	13dfe <uarte_nrfx_configure+0xf6>
   13e64:	0013b000 	.word	0x0013b000
   13e68:	004ea000 	.word	0x004ea000
   13e6c:	0003d090 	.word	0x0003d090
   13e70:	000f4240 	.word	0x000f4240
   13e74:	00275000 	.word	0x00275000
   13e78:	0075c000 	.word	0x0075c000
   13e7c:	003af000 	.word	0x003af000
   13e80:	013a9000 	.word	0x013a9000

00013e84 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   13e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13e88:	4680      	mov	r8, r0
   13e8a:	b087      	sub	sp, #28
   13e8c:	2200      	movs	r2, #0
   13e8e:	2101      	movs	r1, #1
   13e90:	2008      	movs	r0, #8
   13e92:	f7f8 f9af 	bl	c1f4 <z_arm_irq_priority_set>
   13e96:	2008      	movs	r0, #8
   13e98:	f7f8 f97c 	bl	c194 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13e9c:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   13e9e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   13ea2:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   13ea6:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   13ea8:	466a      	mov	r2, sp
   13eaa:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   13eae:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   13eb2:	f8d7 900c 	ldr.w	r9, [r7, #12]
   13eb6:	4648      	mov	r0, r9
   13eb8:	f009 fcb5 	bl	1d826 <pinctrl_lookup_state>
	if (ret < 0) {
   13ebc:	1e05      	subs	r5, r0, #0
   13ebe:	db25      	blt.n	13f0c <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   13ec0:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13ec2:	f8d9 2000 	ldr.w	r2, [r9]
   13ec6:	7919      	ldrb	r1, [r3, #4]
   13ec8:	6818      	ldr	r0, [r3, #0]
   13eca:	f009 fcc2 	bl	1d852 <pinctrl_configure_pins>
	if (err < 0) {
   13ece:	1e05      	subs	r5, r0, #0
   13ed0:	db1c      	blt.n	13f0c <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   13ed2:	4640      	mov	r0, r8
   13ed4:	1d31      	adds	r1, r6, #4
   13ed6:	f7ff ff17 	bl	13d08 <uarte_nrfx_configure>
	if (err) {
   13eda:	4605      	mov	r5, r0
   13edc:	b9b0      	cbnz	r0, 13f0c <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   13ede:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   13ee0:	0799      	lsls	r1, r3, #30
   13ee2:	d533      	bpl.n	13f4c <uarte_0_init+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   13ee4:	f106 0018 	add.w	r0, r6, #24
   13ee8:	f001 fb4e 	bl	15588 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   13eec:	4b2b      	ldr	r3, [pc, #172]	; (13f9c <uarte_0_init+0x118>)
   13eee:	4298      	cmp	r0, r3
   13ef0:	d010      	beq.n	13f14 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   13ef2:	4b2b      	ldr	r3, [pc, #172]	; (13fa0 <uarte_0_init+0x11c>)
   13ef4:	9305      	str	r3, [sp, #20]
   13ef6:	2302      	movs	r3, #2
   13ef8:	9304      	str	r3, [sp, #16]
   13efa:	462b      	mov	r3, r5
		return -EIO;
   13efc:	f06f 0504 	mvn.w	r5, #4
   13f00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13f04:	4827      	ldr	r0, [pc, #156]	; (13fa4 <uarte_0_init+0x120>)
   13f06:	aa04      	add	r2, sp, #16
   13f08:	f7f6 fef8 	bl	acfc <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   13f0c:	4628      	mov	r0, r5
   13f0e:	b007      	add	sp, #28
   13f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13f14:	7e33      	ldrb	r3, [r6, #24]
    NRFX_ASSERT(tep);
   13f16:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   13f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13f1e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   13f22:	d10b      	bne.n	13f3c <uarte_0_init+0xb8>
   13f24:	4920      	ldr	r1, [pc, #128]	; (13fa8 <uarte_0_init+0x124>)
   13f26:	4821      	ldr	r0, [pc, #132]	; (13fac <uarte_0_init+0x128>)
   13f28:	f240 234e 	movw	r3, #590	; 0x24e
   13f2c:	4a20      	ldr	r2, [pc, #128]	; (13fb0 <uarte_0_init+0x12c>)
   13f2e:	f007 f97d 	bl	1b22c <assert_print>
   13f32:	f240 214e 	movw	r1, #590	; 0x24e
   13f36:	481e      	ldr	r0, [pc, #120]	; (13fb0 <uarte_0_init+0x12c>)
   13f38:	f007 f971 	bl	1b21e <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   13f3c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   13f40:	2301      	movs	r3, #1
   13f42:	7e32      	ldrb	r2, [r6, #24]
   13f44:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   13f46:	4a1b      	ldr	r2, [pc, #108]	; (13fb4 <uarte_0_init+0x130>)
   13f48:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13f4c:	2308      	movs	r3, #8
   13f4e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   13f52:	7a3b      	ldrb	r3, [r7, #8]
   13f54:	b953      	cbnz	r3, 13f6c <uarte_0_init+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f56:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   13f5a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13f5e:	6973      	ldr	r3, [r6, #20]
   13f60:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   13f64:	2301      	movs	r3, #1
   13f66:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13f6a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   13f6c:	687b      	ldr	r3, [r7, #4]
   13f6e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   13f70:	bf5c      	itt	pl
   13f72:	f44f 7380 	movpl.w	r3, #256	; 0x100
   13f76:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13f7a:	687b      	ldr	r3, [r7, #4]
   13f7c:	06db      	lsls	r3, r3, #27
   13f7e:	bf44      	itt	mi
   13f80:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   13f84:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13f88:	6933      	ldr	r3, [r6, #16]
   13f8a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13f8e:	2300      	movs	r3, #0
   13f90:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13f94:	2301      	movs	r3, #1
   13f96:	60a3      	str	r3, [r4, #8]
   13f98:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   13f9a:	e7b7      	b.n	13f0c <uarte_0_init+0x88>
   13f9c:	0bad0000 	.word	0x0bad0000
   13fa0:	000222e2 	.word	0x000222e2
   13fa4:	0001ee54 	.word	0x0001ee54
   13fa8:	0001fee0 	.word	0x0001fee0
   13fac:	0001f995 	.word	0x0001f995
   13fb0:	0001fea8 	.word	0x0001fea8
   13fb4:	40017000 	.word	0x40017000

00013fb8 <uarte_nrfx_poll_out>:
{
   13fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13fba:	4604      	mov	r4, r0
   13fbc:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   13fbe:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13fc0:	f00a fabe 	bl	1e540 <k_is_in_isr>
   13fc4:	b9b0      	cbnz	r0, 13ff4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   13fc6:	4b2e      	ldr	r3, [pc, #184]	; (14080 <uarte_nrfx_poll_out+0xc8>)
   13fc8:	781b      	ldrb	r3, [r3, #0]
   13fca:	b19b      	cbz	r3, 13ff4 <uarte_nrfx_poll_out+0x3c>
{
   13fcc:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   13fce:	6860      	ldr	r0, [r4, #4]
   13fd0:	f009 fbbf 	bl	1d752 <is_tx_ready.isra.0>
   13fd4:	bb00      	cbnz	r0, 14018 <uarte_nrfx_poll_out+0x60>
   13fd6:	2001      	movs	r0, #1
   13fd8:	f009 fd56 	bl	1da88 <nrfx_busy_wait>
   13fdc:	3e01      	subs	r6, #1
   13fde:	d1f6      	bne.n	13fce <uarte_nrfx_poll_out+0x16>
   13fe0:	2100      	movs	r1, #0
   13fe2:	2021      	movs	r0, #33	; 0x21
   13fe4:	f005 fd6a 	bl	19abc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13fe8:	e7f0      	b.n	13fcc <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   13fea:	f386 8811 	msr	BASEPRI, r6
   13fee:	f3bf 8f6f 	isb	sy
}
   13ff2:	e7f5      	b.n	13fe0 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   13ff4:	f04f 0320 	mov.w	r3, #32
   13ff8:	f3ef 8611 	mrs	r6, BASEPRI
   13ffc:	f383 8812 	msr	BASEPRI_MAX, r3
   14000:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14004:	6860      	ldr	r0, [r4, #4]
   14006:	4631      	mov	r1, r6
   14008:	f009 fba3 	bl	1d752 <is_tx_ready.isra.0>
   1400c:	b990      	cbnz	r0, 14034 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1400e:	f386 8811 	msr	BASEPRI, r6
   14012:	f3bf 8f6f 	isb	sy
}
   14016:	e7ed      	b.n	13ff4 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   14018:	f04f 0320 	mov.w	r3, #32
   1401c:	f3ef 8611 	mrs	r6, BASEPRI
   14020:	f383 8812 	msr	BASEPRI_MAX, r3
   14024:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14028:	6860      	ldr	r0, [r4, #4]
   1402a:	4631      	mov	r1, r6
   1402c:	f009 fb91 	bl	1d752 <is_tx_ready.isra.0>
   14030:	2800      	cmp	r0, #0
   14032:	d0da      	beq.n	13fea <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   14034:	693b      	ldr	r3, [r7, #16]
   14036:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   14038:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1403a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1403c:	6813      	ldr	r3, [r2, #0]
   1403e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14042:	2001      	movs	r0, #1
   14044:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14048:	2000      	movs	r0, #0
   1404a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1404e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   14052:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14056:	6852      	ldr	r2, [r2, #4]
   14058:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1405c:	06d2      	lsls	r2, r2, #27
   1405e:	d508      	bpl.n	14072 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14060:	2008      	movs	r0, #8
	return config->uarte_regs;
   14062:	6862      	ldr	r2, [r4, #4]
   14064:	6812      	ldr	r2, [r2, #0]
   14066:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1406a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1406e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14072:	2201      	movs	r2, #1
   14074:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   14076:	f381 8811 	msr	BASEPRI, r1
   1407a:	f3bf 8f6f 	isb	sy
}
   1407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14080:	20009baf 	.word	0x20009baf

00014084 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   14084:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14086:	7d01      	ldrb	r1, [r0, #20]
   14088:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1408a:	2902      	cmp	r1, #2
{
   1408c:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   1408e:	d018      	beq.n	140c2 <bt_rpmsg_send+0x3e>
   14090:	2904      	cmp	r1, #4
   14092:	d015      	beq.n	140c0 <bt_rpmsg_send+0x3c>
   14094:	b339      	cbz	r1, 140e6 <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   14096:	466d      	mov	r5, sp
   14098:	b088      	sub	sp, #32
   1409a:	466a      	mov	r2, sp
   1409c:	4b13      	ldr	r3, [pc, #76]	; (140ec <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   1409e:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		BT_ERR("Failed to send (err %d)", err);
   140a2:	2303      	movs	r3, #3
   140a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   140a8:	4811      	ldr	r0, [pc, #68]	; (140f0 <bt_rpmsg_send+0x6c>)
   140aa:	f842 3f10 	str.w	r3, [r2, #16]!
   140ae:	f009 fb99 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
   140b2:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   140b4:	4620      	mov	r0, r4
   140b6:	f7fe ff41 	bl	12f3c <net_buf_unref>
	return 0;
}
   140ba:	2000      	movs	r0, #0
   140bc:	46bd      	mov	sp, r7
   140be:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   140c0:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   140c2:	f104 0008 	add.w	r0, r4, #8
   140c6:	f009 fa67 	bl	1d598 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   140ca:	89a2      	ldrh	r2, [r4, #12]
   140cc:	68a1      	ldr	r1, [r4, #8]
   140ce:	4809      	ldr	r0, [pc, #36]	; (140f4 <bt_rpmsg_send+0x70>)
   140d0:	f7f7 f958 	bl	b384 <ipc_service_send>
	if (err < 0) {
   140d4:	2800      	cmp	r0, #0
   140d6:	daed      	bge.n	140b4 <bt_rpmsg_send+0x30>
		BT_ERR("Failed to send (err %d)", err);
   140d8:	466d      	mov	r5, sp
   140da:	b088      	sub	sp, #32
   140dc:	466a      	mov	r2, sp
   140de:	4b06      	ldr	r3, [pc, #24]	; (140f8 <bt_rpmsg_send+0x74>)
   140e0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   140e4:	e7dd      	b.n	140a2 <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   140e6:	2101      	movs	r1, #1
   140e8:	e7eb      	b.n	140c2 <bt_rpmsg_send+0x3e>
   140ea:	bf00      	nop
   140ec:	0002231b 	.word	0x0002231b
   140f0:	0001eda4 	.word	0x0001eda4
   140f4:	200099bc 	.word	0x200099bc
   140f8:	0002232b 	.word	0x0002232b

000140fc <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   140fc:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   140fe:	480c      	ldr	r0, [pc, #48]	; (14130 <bt_rpmsg_init+0x34>)
{
   14100:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   14102:	f7fa fa05 	bl	e510 <bt_hci_driver_register>
	if (err < 0) {
   14106:	1e04      	subs	r4, r0, #0
   14108:	da0e      	bge.n	14128 <bt_rpmsg_init+0x2c>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   1410a:	466d      	mov	r5, sp
   1410c:	b088      	sub	sp, #32
   1410e:	466a      	mov	r2, sp
   14110:	4b08      	ldr	r3, [pc, #32]	; (14134 <bt_rpmsg_init+0x38>)
   14112:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14116:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1411a:	2303      	movs	r3, #3
   1411c:	4806      	ldr	r0, [pc, #24]	; (14138 <bt_rpmsg_init+0x3c>)
   1411e:	f842 3f10 	str.w	r3, [r2, #16]!
   14122:	f009 fb5f 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
   14126:	46ad      	mov	sp, r5
	}

	return err;
}
   14128:	4620      	mov	r0, r4
   1412a:	46bd      	mov	sp, r7
   1412c:	bdb0      	pop	{r4, r5, r7, pc}
   1412e:	bf00      	nop
   14130:	0001f5c0 	.word	0x0001f5c0
   14134:	00022343 	.word	0x00022343
   14138:	0001eda4 	.word	0x0001eda4

0001413c <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1413c:	4801      	ldr	r0, [pc, #4]	; (14144 <hci_ept_bound+0x8>)
   1413e:	f003 bdc9 	b.w	17cd4 <z_impl_k_sem_give>
   14142:	bf00      	nop
   14144:	20008564 	.word	0x20008564

00014148 <bt_rpmsg_open>:
{
   14148:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1414a:	481a      	ldr	r0, [pc, #104]	; (141b4 <bt_rpmsg_open+0x6c>)
{
   1414c:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1414e:	f7f7 f8b9 	bl	b2c4 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   14152:	4604      	mov	r4, r0
   14154:	b1a0      	cbz	r0, 14180 <bt_rpmsg_open+0x38>
   14156:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1415a:	d011      	beq.n	14180 <bt_rpmsg_open+0x38>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   1415c:	466d      	mov	r5, sp
   1415e:	b088      	sub	sp, #32
   14160:	466a      	mov	r2, sp
   14162:	4b15      	ldr	r3, [pc, #84]	; (141b8 <bt_rpmsg_open+0x70>)
		BT_ERR("Endpoint binding failed with %d", err);
   14164:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14168:	2303      	movs	r3, #3
   1416a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1416e:	4813      	ldr	r0, [pc, #76]	; (141bc <bt_rpmsg_open+0x74>)
   14170:	f842 3f10 	str.w	r3, [r2, #16]!
   14174:	f009 fb36 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
   14178:	46ad      	mov	sp, r5
}
   1417a:	4620      	mov	r0, r4
   1417c:	46bd      	mov	sp, r7
   1417e:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   14180:	4a0f      	ldr	r2, [pc, #60]	; (141c0 <bt_rpmsg_open+0x78>)
   14182:	4910      	ldr	r1, [pc, #64]	; (141c4 <bt_rpmsg_open+0x7c>)
   14184:	480b      	ldr	r0, [pc, #44]	; (141b4 <bt_rpmsg_open+0x6c>)
   14186:	f7f7 f8cb 	bl	b320 <ipc_service_register_endpoint>
	if (err) {
   1418a:	4604      	mov	r4, r0
   1418c:	b120      	cbz	r0, 14198 <bt_rpmsg_open+0x50>
		BT_ERR("Registering endpoint failed with %d", err);
   1418e:	466d      	mov	r5, sp
   14190:	b088      	sub	sp, #32
   14192:	466a      	mov	r2, sp
   14194:	4b0c      	ldr	r3, [pc, #48]	; (141c8 <bt_rpmsg_open+0x80>)
   14196:	e7e5      	b.n	14164 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   14198:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1419c:	2300      	movs	r3, #0
   1419e:	480b      	ldr	r0, [pc, #44]	; (141cc <bt_rpmsg_open+0x84>)
   141a0:	f003 fddc 	bl	17d5c <z_impl_k_sem_take>
	if (err) {
   141a4:	4604      	mov	r4, r0
   141a6:	2800      	cmp	r0, #0
   141a8:	d0e7      	beq.n	1417a <bt_rpmsg_open+0x32>
		BT_ERR("Endpoint binding failed with %d", err);
   141aa:	466d      	mov	r5, sp
   141ac:	b088      	sub	sp, #32
   141ae:	466a      	mov	r2, sp
   141b0:	4b07      	ldr	r3, [pc, #28]	; (141d0 <bt_rpmsg_open+0x88>)
   141b2:	e7d7      	b.n	14164 <bt_rpmsg_open+0x1c>
   141b4:	0001ea7c 	.word	0x0001ea7c
   141b8:	0002236d 	.word	0x0002236d
   141bc:	0001eda4 	.word	0x0001eda4
   141c0:	200082a4 	.word	0x200082a4
   141c4:	200099bc 	.word	0x200099bc
   141c8:	0002239d 	.word	0x0002239d
   141cc:	20008564 	.word	0x20008564
   141d0:	000223c1 	.word	0x000223c1

000141d4 <hci_ept_recv>:
{
   141d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d8:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   141da:	4680      	mov	r8, r0
   141dc:	f818 9b01 	ldrb.w	r9, [r8], #1
{
   141e0:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   141e2:	f1b9 0f04 	cmp.w	r9, #4
{
   141e6:	460c      	mov	r4, r1
   141e8:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   141ea:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   141ee:	d00d      	beq.n	1420c <hci_ept_recv+0x38>
   141f0:	f1b9 0f05 	cmp.w	r9, #5
   141f4:	f000 80a3 	beq.w	1433e <hci_ept_recv+0x16a>
   141f8:	f1b9 0f02 	cmp.w	r9, #2
   141fc:	f040 80cc 	bne.w	14398 <hci_ept_recv+0x1c4>
	if (remaining < sizeof(hdr)) {
   14200:	2b03      	cmp	r3, #3
   14202:	d875      	bhi.n	142f0 <hci_ept_recv+0x11c>
		BT_ERR("Not enough data for ACL header");
   14204:	4b6c      	ldr	r3, [pc, #432]	; (143b8 <hci_ept_recv+0x1e4>)
		BT_ERR("No available ACL buffers!");
   14206:	e9c7 9306 	strd	r9, r3, [r7, #24]
   1420a:	e005      	b.n	14218 <hci_ept_recv+0x44>
	if (remaining < sizeof(hdr)) {
   1420c:	2b01      	cmp	r3, #1
   1420e:	d80e      	bhi.n	1422e <hci_ept_recv+0x5a>
		BT_ERR("Not enough data for event header");
   14210:	4b6a      	ldr	r3, [pc, #424]	; (143bc <hci_ept_recv+0x1e8>)
		BT_ERR("Event payload length is not correct");
   14212:	61fb      	str	r3, [r7, #28]
   14214:	2302      	movs	r3, #2
   14216:	61bb      	str	r3, [r7, #24]
   14218:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1421c:	4868      	ldr	r0, [pc, #416]	; (143c0 <hci_ept_recv+0x1ec>)
   1421e:	f107 0218 	add.w	r2, r7, #24
   14222:	f009 fadf 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
}
   14226:	3724      	adds	r7, #36	; 0x24
   14228:	46bd      	mov	sp, r7
   1422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1422e:	7843      	ldrb	r3, [r0, #1]
   14230:	2b3e      	cmp	r3, #62	; 0x3e
   14232:	d13e      	bne.n	142b2 <hci_ept_recv+0xde>
		switch (subevt_type) {
   14234:	f890 a003 	ldrb.w	sl, [r0, #3]
   14238:	f1aa 0302 	sub.w	r3, sl, #2
   1423c:	f1d3 0a00 	rsbs	sl, r3, #0
   14240:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   14244:	2202      	movs	r2, #2
   14246:	4641      	mov	r1, r8
   14248:	1d38      	adds	r0, r7, #4
   1424a:	f007 fffe 	bl	1c24a <memcpy>
	if (remaining != hdr.len) {
   1424e:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   14250:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   14252:	429c      	cmp	r4, r3
   14254:	d133      	bne.n	142be <hci_ept_recv+0xea>
   14256:	f1ba 0f00 	cmp.w	sl, #0
   1425a:	d02d      	beq.n	142b8 <hci_ept_recv+0xe4>
   1425c:	f04f 0800 	mov.w	r8, #0
   14260:	f04f 0900 	mov.w	r9, #0
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   14264:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   14268:	4642      	mov	r2, r8
   1426a:	464b      	mov	r3, r9
   1426c:	4651      	mov	r1, sl
   1426e:	7938      	ldrb	r0, [r7, #4]
   14270:	f7f8 ffda 	bl	d228 <bt_buf_get_evt>
		if (!buf) {
   14274:	4605      	mov	r5, r0
   14276:	b320      	cbz	r0, 142c2 <hci_ept_recv+0xee>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14278:	f100 0808 	add.w	r8, r0, #8
   1427c:	2202      	movs	r2, #2
   1427e:	1d39      	adds	r1, r7, #4
   14280:	4640      	mov	r0, r8
   14282:	f009 f9a4 	bl	1d5ce <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   14286:	4640      	mov	r0, r8
   14288:	f009 f999 	bl	1d5be <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1428c:	4284      	cmp	r4, r0
   1428e:	d926      	bls.n	142de <hci_ept_recv+0x10a>
		BT_ERR("Not enough space in buffer %zu/%zu",
   14290:	466e      	mov	r6, sp
   14292:	b088      	sub	sp, #32
   14294:	466a      	mov	r2, sp
   14296:	4b4b      	ldr	r3, [pc, #300]	; (143c4 <hci_ept_recv+0x1f0>)
   14298:	61d0      	str	r0, [r2, #28]
   1429a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1429e:	2304      	movs	r3, #4
   142a0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   142a4:	4846      	ldr	r0, [pc, #280]	; (143c0 <hci_ept_recv+0x1ec>)
   142a6:	f842 3f10 	str.w	r3, [r2, #16]!
   142aa:	f009 fa9b 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
   142ae:	46b5      	mov	sp, r6
   142b0:	e03f      	b.n	14332 <hci_ept_recv+0x15e>
			return false;
   142b2:	f04f 0a00 	mov.w	sl, #0
   142b6:	e7c5      	b.n	14244 <hci_ept_recv+0x70>
   142b8:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   142bc:	e7d0      	b.n	14260 <hci_ept_recv+0x8c>
		BT_ERR("Event payload length is not correct");
   142be:	4b42      	ldr	r3, [pc, #264]	; (143c8 <hci_ept_recv+0x1f4>)
   142c0:	e7a7      	b.n	14212 <hci_ept_recv+0x3e>
			if (discardable) {
   142c2:	f1ba 0f00 	cmp.w	sl, #0
   142c6:	d1ae      	bne.n	14226 <hci_ept_recv+0x52>
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   142c8:	4b40      	ldr	r3, [pc, #256]	; (143cc <hci_ept_recv+0x1f8>)
   142ca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   142ce:	e9c7 b306 	strd	fp, r3, [r7, #24]
   142d2:	483b      	ldr	r0, [pc, #236]	; (143c0 <hci_ept_recv+0x1ec>)
   142d4:	f107 0218 	add.w	r2, r7, #24
   142d8:	f009 fa84 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
	} while (!buf);
   142dc:	e7c4      	b.n	14268 <hci_ept_recv+0x94>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   142de:	4622      	mov	r2, r4
   142e0:	1cf1      	adds	r1, r6, #3
   142e2:	4640      	mov	r0, r8
   142e4:	f009 f973 	bl	1d5ce <net_buf_simple_add_mem>
		bt_recv(buf);
   142e8:	4628      	mov	r0, r5
   142ea:	f7fa f8dd 	bl	e4a8 <bt_recv>
}
   142ee:	e79a      	b.n	14226 <hci_ept_recv+0x52>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   142f0:	2200      	movs	r2, #0
   142f2:	2300      	movs	r3, #0
   142f4:	2003      	movs	r0, #3
   142f6:	f7f8 ff49 	bl	d18c <bt_buf_get_rx>
	if (buf) {
   142fa:	4605      	mov	r5, r0
   142fc:	b1e8      	cbz	r0, 1433a <hci_ept_recv+0x166>
		memcpy((void *)&hdr, data, sizeof(hdr));
   142fe:	2204      	movs	r2, #4
   14300:	4641      	mov	r1, r8
   14302:	18b8      	adds	r0, r7, r2
   14304:	f007 ffa1 	bl	1c24a <memcpy>
   14308:	2204      	movs	r2, #4
   1430a:	f105 0808 	add.w	r8, r5, #8
   1430e:	4640      	mov	r0, r8
   14310:	18b9      	adds	r1, r7, r2
   14312:	f009 f95c 	bl	1d5ce <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   14316:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   14318:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1431a:	429c      	cmp	r4, r3
   1431c:	d033      	beq.n	14386 <hci_ept_recv+0x1b2>
		BT_ERR("ACL payload length is not correct");
   1431e:	4b2c      	ldr	r3, [pc, #176]	; (143d0 <hci_ept_recv+0x1fc>)
   14320:	e9c7 9306 	strd	r9, r3, [r7, #24]
		BT_ERR("ISO payload length is not correct");
   14324:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14328:	4825      	ldr	r0, [pc, #148]	; (143c0 <hci_ept_recv+0x1ec>)
   1432a:	f107 0218 	add.w	r2, r7, #24
   1432e:	f009 fa59 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   14332:	4628      	mov	r0, r5
   14334:	f7fe fe02 	bl	12f3c <net_buf_unref>
	if (buf) {
   14338:	e775      	b.n	14226 <hci_ept_recv+0x52>
		BT_ERR("No available ACL buffers!");
   1433a:	4b26      	ldr	r3, [pc, #152]	; (143d4 <hci_ept_recv+0x200>)
   1433c:	e763      	b.n	14206 <hci_ept_recv+0x32>
	if (remaining < sizeof(hdr)) {
   1433e:	2b03      	cmp	r3, #3
   14340:	d801      	bhi.n	14346 <hci_ept_recv+0x172>
		BT_ERR("Not enough data for ISO header");
   14342:	4b25      	ldr	r3, [pc, #148]	; (143d8 <hci_ept_recv+0x204>)
   14344:	e765      	b.n	14212 <hci_ept_recv+0x3e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   14346:	2200      	movs	r2, #0
   14348:	2300      	movs	r3, #0
   1434a:	4648      	mov	r0, r9
   1434c:	f7f8 ff1e 	bl	d18c <bt_buf_get_rx>
	if (buf) {
   14350:	4605      	mov	r5, r0
   14352:	b1b0      	cbz	r0, 14382 <hci_ept_recv+0x1ae>
		memcpy((void *)&hdr, data, sizeof(hdr));
   14354:	2204      	movs	r2, #4
   14356:	4641      	mov	r1, r8
   14358:	18b8      	adds	r0, r7, r2
   1435a:	f007 ff76 	bl	1c24a <memcpy>
   1435e:	2204      	movs	r2, #4
   14360:	f105 0808 	add.w	r8, r5, #8
   14364:	4640      	mov	r0, r8
   14366:	18b9      	adds	r1, r7, r2
   14368:	f009 f931 	bl	1d5ce <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1436c:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1436e:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   14370:	f3c3 030d 	ubfx	r3, r3, #0, #14
   14374:	429c      	cmp	r4, r3
   14376:	d006      	beq.n	14386 <hci_ept_recv+0x1b2>
		BT_ERR("ISO payload length is not correct");
   14378:	4b18      	ldr	r3, [pc, #96]	; (143dc <hci_ept_recv+0x208>)
   1437a:	61fb      	str	r3, [r7, #28]
   1437c:	2302      	movs	r3, #2
   1437e:	61bb      	str	r3, [r7, #24]
   14380:	e7d0      	b.n	14324 <hci_ept_recv+0x150>
		BT_ERR("No available ISO buffers!");
   14382:	4b17      	ldr	r3, [pc, #92]	; (143e0 <hci_ept_recv+0x20c>)
   14384:	e745      	b.n	14212 <hci_ept_recv+0x3e>
	return net_buf_simple_tailroom(&buf->b);
   14386:	4640      	mov	r0, r8
   14388:	f009 f919 	bl	1d5be <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1438c:	4284      	cmp	r4, r0
   1438e:	f63f af7f 	bhi.w	14290 <hci_ept_recv+0xbc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14392:	4622      	mov	r2, r4
   14394:	1d71      	adds	r1, r6, #5
   14396:	e7a4      	b.n	142e2 <hci_ept_recv+0x10e>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   14398:	466c      	mov	r4, sp
   1439a:	b088      	sub	sp, #32
   1439c:	466a      	mov	r2, sp
   1439e:	4b11      	ldr	r3, [pc, #68]	; (143e4 <hci_ept_recv+0x210>)
   143a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   143a4:	e9c2 3905 	strd	r3, r9, [r2, #20]
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   143a8:	2303      	movs	r3, #3
   143aa:	4805      	ldr	r0, [pc, #20]	; (143c0 <hci_ept_recv+0x1ec>)
   143ac:	f842 3f10 	str.w	r3, [r2, #16]!
   143b0:	f009 fa18 	bl	1d7e4 <z_log_msg_static_create.constprop.0>
   143b4:	46a5      	mov	sp, r4
   143b6:	e736      	b.n	14226 <hci_ept_recv+0x52>
   143b8:	0002247e 	.word	0x0002247e
   143bc:	000223e1 	.word	0x000223e1
   143c0:	0001eda4 	.word	0x0001eda4
   143c4:	0002245b 	.word	0x0002245b
   143c8:	00022402 	.word	0x00022402
   143cc:	00022426 	.word	0x00022426
   143d0:	000224b7 	.word	0x000224b7
   143d4:	0002249d 	.word	0x0002249d
   143d8:	000224d9 	.word	0x000224d9
   143dc:	00022512 	.word	0x00022512
   143e0:	000224f8 	.word	0x000224f8
   143e4:	00022534 	.word	0x00022534

000143e8 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   143e8:	b508      	push	{r3, lr}
   143ea:	4603      	mov	r3, r0
   143ec:	4608      	mov	r0, r1
   143ee:	4611      	mov	r1, r2
	__ASSERT_NO_MSG(dev != NULL);
   143f0:	b94b      	cbnz	r3, 14406 <entropy_cc3xx_rng_get_entropy+0x1e>
   143f2:	490c      	ldr	r1, [pc, #48]	; (14424 <entropy_cc3xx_rng_get_entropy+0x3c>)
   143f4:	2320      	movs	r3, #32
   143f6:	4a0c      	ldr	r2, [pc, #48]	; (14428 <entropy_cc3xx_rng_get_entropy+0x40>)
   143f8:	480c      	ldr	r0, [pc, #48]	; (1442c <entropy_cc3xx_rng_get_entropy+0x44>)
   143fa:	f006 ff17 	bl	1b22c <assert_print>
   143fe:	2120      	movs	r1, #32
	__ASSERT_NO_MSG(buffer != NULL);
   14400:	4809      	ldr	r0, [pc, #36]	; (14428 <entropy_cc3xx_rng_get_entropy+0x40>)
   14402:	f006 ff0c 	bl	1b21e <assert_post_action>
   14406:	b938      	cbnz	r0, 14418 <entropy_cc3xx_rng_get_entropy+0x30>
   14408:	4909      	ldr	r1, [pc, #36]	; (14430 <entropy_cc3xx_rng_get_entropy+0x48>)
   1440a:	2321      	movs	r3, #33	; 0x21
   1440c:	4a06      	ldr	r2, [pc, #24]	; (14428 <entropy_cc3xx_rng_get_entropy+0x40>)
   1440e:	4807      	ldr	r0, [pc, #28]	; (1442c <entropy_cc3xx_rng_get_entropy+0x44>)
   14410:	f006 ff0c 	bl	1b22c <assert_print>
   14414:	2121      	movs	r1, #33	; 0x21
   14416:	e7f3      	b.n	14400 <entropy_cc3xx_rng_get_entropy+0x18>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   14418:	f000 fe04 	bl	15024 <psa_generate_random>
	int err = EINVAL;
   1441c:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1441e:	bf18      	it	ne
   14420:	2016      	movne	r0, #22
   14422:	bd08      	pop	{r3, pc}
   14424:	000225a6 	.word	0x000225a6
   14428:	00022576 	.word	0x00022576
   1442c:	0001f995 	.word	0x0001f995
   14430:	000225b9 	.word	0x000225b9

00014434 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14434:	2301      	movs	r3, #1
   14436:	4083      	lsls	r3, r0
{
   14438:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1443a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1443c:	4a0b      	ldr	r2, [pc, #44]	; (1446c <compare_int_lock+0x38>)
   1443e:	e8d2 1fef 	ldaex	r1, [r2]
   14442:	ea01 0504 	and.w	r5, r1, r4
   14446:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1444a:	2e00      	cmp	r6, #0
   1444c:	d1f7      	bne.n	1443e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1444e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14452:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   14454:	4806      	ldr	r0, [pc, #24]	; (14470 <compare_int_lock+0x3c>)
   14456:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1445a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1445e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   14462:	420b      	tst	r3, r1
}
   14464:	bf14      	ite	ne
   14466:	2001      	movne	r0, #1
   14468:	2000      	moveq	r0, #0
   1446a:	bd70      	pop	{r4, r5, r6, pc}
   1446c:	200099cc 	.word	0x200099cc
   14470:	40015000 	.word	0x40015000

00014474 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   14474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14476:	491b      	ldr	r1, [pc, #108]	; (144e4 <sys_clock_timeout_handler+0x70>)
{
   14478:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1447a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1447e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   14480:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   14484:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14488:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1448a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1448e:	d30f      	bcc.n	144b0 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14490:	f005 fe96 	bl	1a1c0 <sys_clock_announce>
    return p_reg->CC[ch];
   14494:	00a3      	lsls	r3, r4, #2
   14496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1449a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1449e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   144a2:	4295      	cmp	r5, r2
   144a4:	d11d      	bne.n	144e2 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   144a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   144aa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   144ae:	e012      	b.n	144d6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   144b0:	4b0d      	ldr	r3, [pc, #52]	; (144e8 <sys_clock_timeout_handler+0x74>)
   144b2:	681b      	ldr	r3, [r3, #0]
   144b4:	0a1a      	lsrs	r2, r3, #8
   144b6:	061b      	lsls	r3, r3, #24
   144b8:	195e      	adds	r6, r3, r5
   144ba:	4b0c      	ldr	r3, [pc, #48]	; (144ec <sys_clock_timeout_handler+0x78>)
   144bc:	f142 0700 	adc.w	r7, r2, #0
   144c0:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   144c4:	f005 fe7c 	bl	1a1c0 <sys_clock_announce>
    return p_reg->CC[ch];
   144c8:	4a09      	ldr	r2, [pc, #36]	; (144f0 <sys_clock_timeout_handler+0x7c>)
   144ca:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   144ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   144d2:	429d      	cmp	r5, r3
   144d4:	d105      	bne.n	144e2 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   144d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   144da:	4a05      	ldr	r2, [pc, #20]	; (144f0 <sys_clock_timeout_handler+0x7c>)
   144dc:	40a3      	lsls	r3, r4
   144de:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   144e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144e4:	20009418 	.word	0x20009418
   144e8:	200099d0 	.word	0x200099d0
   144ec:	20009420 	.word	0x20009420
   144f0:	40015000 	.word	0x40015000

000144f4 <compare_int_unlock>:
	if (key) {
   144f4:	b1d9      	cbz	r1, 1452e <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   144f6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   144f8:	4a0d      	ldr	r2, [pc, #52]	; (14530 <compare_int_unlock+0x3c>)
   144fa:	4083      	lsls	r3, r0
   144fc:	e8d2 cfef 	ldaex	ip, [r2]
   14500:	ea4c 0c03 	orr.w	ip, ip, r3
   14504:	e8c2 cfe1 	stlex	r1, ip, [r2]
   14508:	2900      	cmp	r1, #0
   1450a:	d1f7      	bne.n	144fc <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1450c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   14510:	4a08      	ldr	r2, [pc, #32]	; (14534 <compare_int_unlock+0x40>)
   14512:	4083      	lsls	r3, r0
   14514:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14518:	4b07      	ldr	r3, [pc, #28]	; (14538 <compare_int_unlock+0x44>)
   1451a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1451e:	40c3      	lsrs	r3, r0
   14520:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14522:	bf42      	ittt	mi
   14524:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   14528:	4b04      	ldrmi	r3, [pc, #16]	; (1453c <compare_int_unlock+0x48>)
   1452a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1452e:	4770      	bx	lr
   14530:	200099cc 	.word	0x200099cc
   14534:	40015000 	.word	0x40015000
   14538:	200099c4 	.word	0x200099c4
   1453c:	e000e100 	.word	0xe000e100

00014540 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   14540:	2801      	cmp	r0, #1
{
   14542:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   14544:	d909      	bls.n	1455a <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   14546:	4907      	ldr	r1, [pc, #28]	; (14564 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   14548:	4807      	ldr	r0, [pc, #28]	; (14568 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1454a:	237b      	movs	r3, #123	; 0x7b
   1454c:	4a07      	ldr	r2, [pc, #28]	; (1456c <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1454e:	f006 fe6d 	bl	1b22c <assert_print>
   14552:	217b      	movs	r1, #123	; 0x7b
   14554:	4805      	ldr	r0, [pc, #20]	; (1456c <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   14556:	f006 fe62 	bl	1b21e <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1455a:	0083      	lsls	r3, r0, #2
}
   1455c:	4804      	ldr	r0, [pc, #16]	; (14570 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1455e:	4418      	add	r0, r3
   14560:	bd08      	pop	{r3, pc}
   14562:	bf00      	nop
   14564:	0002260e 	.word	0x0002260e
   14568:	0001f995 	.word	0x0001f995
   1456c:	000225dd 	.word	0x000225dd
   14570:	40015140 	.word	0x40015140

00014574 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   14574:	2801      	cmp	r0, #1
{
   14576:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   14578:	d909      	bls.n	1458e <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1457a:	4907      	ldr	r1, [pc, #28]	; (14598 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1457c:	4807      	ldr	r0, [pc, #28]	; (1459c <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1457e:	2382      	movs	r3, #130	; 0x82
   14580:	4a07      	ldr	r2, [pc, #28]	; (145a0 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   14582:	f006 fe53 	bl	1b22c <assert_print>
   14586:	2182      	movs	r1, #130	; 0x82
   14588:	4805      	ldr	r0, [pc, #20]	; (145a0 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1458a:	f006 fe48 	bl	1b21e <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1458e:	2800      	cmp	r0, #0
}
   14590:	4804      	ldr	r0, [pc, #16]	; (145a4 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   14592:	bf08      	it	eq
   14594:	2000      	moveq	r0, #0
   14596:	bd08      	pop	{r3, pc}
   14598:	0002260e 	.word	0x0002260e
   1459c:	0001f995 	.word	0x0001f995
   145a0:	000225dd 	.word	0x000225dd
   145a4:	40015044 	.word	0x40015044

000145a8 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   145a8:	2801      	cmp	r0, #1
{
   145aa:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   145ac:	d909      	bls.n	145c2 <z_nrf_rtc_timer_compare_read+0x1a>
   145ae:	4908      	ldr	r1, [pc, #32]	; (145d0 <z_nrf_rtc_timer_compare_read+0x28>)
   145b0:	4808      	ldr	r0, [pc, #32]	; (145d4 <z_nrf_rtc_timer_compare_read+0x2c>)
   145b2:	23b8      	movs	r3, #184	; 0xb8
   145b4:	4a08      	ldr	r2, [pc, #32]	; (145d8 <z_nrf_rtc_timer_compare_read+0x30>)
   145b6:	f006 fe39 	bl	1b22c <assert_print>
   145ba:	21b8      	movs	r1, #184	; 0xb8
   145bc:	4806      	ldr	r0, [pc, #24]	; (145d8 <z_nrf_rtc_timer_compare_read+0x30>)
   145be:	f006 fe2e 	bl	1b21e <assert_post_action>
    return p_reg->CC[ch];
   145c2:	4b06      	ldr	r3, [pc, #24]	; (145dc <z_nrf_rtc_timer_compare_read+0x34>)
   145c4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   145c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   145cc:	bd08      	pop	{r3, pc}
   145ce:	bf00      	nop
   145d0:	0002260e 	.word	0x0002260e
   145d4:	0001f995 	.word	0x0001f995
   145d8:	000225dd 	.word	0x000225dd
   145dc:	40015000 	.word	0x40015000

000145e0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   145e0:	4b0d      	ldr	r3, [pc, #52]	; (14618 <z_nrf_rtc_timer_read+0x38>)
   145e2:	6818      	ldr	r0, [r3, #0]
   145e4:	0a01      	lsrs	r1, r0, #8
   145e6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   145e8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   145ec:	4b0b      	ldr	r3, [pc, #44]	; (1461c <z_nrf_rtc_timer_read+0x3c>)
   145ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   145f2:	1818      	adds	r0, r3, r0
   145f4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   145f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   145fc:	d20a      	bcs.n	14614 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   145fe:	4b08      	ldr	r3, [pc, #32]	; (14620 <z_nrf_rtc_timer_read+0x40>)
   14600:	e9d3 2300 	ldrd	r2, r3, [r3]
   14604:	4290      	cmp	r0, r2
   14606:	eb71 0303 	sbcs.w	r3, r1, r3
   1460a:	d203      	bcs.n	14614 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1460c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   14610:	f141 0100 	adc.w	r1, r1, #0
}
   14614:	4770      	bx	lr
   14616:	bf00      	nop
   14618:	200099d0 	.word	0x200099d0
   1461c:	40015000 	.word	0x40015000
   14620:	20009420 	.word	0x20009420

00014624 <compare_set>:
{
   14624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14628:	4614      	mov	r4, r2
   1462a:	461d      	mov	r5, r3
   1462c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1462e:	f7ff ff01 	bl	14434 <compare_int_lock>
   14632:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   14634:	f7ff ffd4 	bl	145e0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   14638:	42a0      	cmp	r0, r4
   1463a:	eb71 0305 	sbcs.w	r3, r1, r5
   1463e:	d27a      	bcs.n	14736 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   14640:	4b44      	ldr	r3, [pc, #272]	; (14754 <compare_set+0x130>)
   14642:	1a20      	subs	r0, r4, r0
   14644:	eb65 0101 	sbc.w	r1, r5, r1
   14648:	4298      	cmp	r0, r3
   1464a:	f171 0100 	sbcs.w	r1, r1, #0
   1464e:	d27d      	bcs.n	1474c <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
   14650:	4b41      	ldr	r3, [pc, #260]	; (14758 <compare_set+0x134>)
   14652:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   14656:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1465a:	429d      	cmp	r5, r3
   1465c:	bf08      	it	eq
   1465e:	4294      	cmpeq	r4, r2
   14660:	d054      	beq.n	1470c <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   14666:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1466a:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1466c:	2100      	movs	r1, #0
   1466e:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14672:	f107 0850 	add.w	r8, r7, #80	; 0x50
   14676:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1467a:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1467e:	40bb      	lsls	r3, r7
   14680:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
   14684:	fa1f f888 	uxth.w	r8, r8
   14688:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1468c:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1468e:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14692:	4b32      	ldr	r3, [pc, #200]	; (1475c <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14694:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   14698:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1469c:	eba0 000a 	sub.w	r0, r0, sl
   146a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   146a4:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   146a8:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   146aa:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
   146ae:	d104      	bne.n	146ba <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
   146b0:	2013      	movs	r0, #19
   146b2:	f00a f841 	bl	1e738 <z_impl_k_busy_wait>
   146b6:	2100      	movs	r1, #0
   146b8:	4b28      	ldr	r3, [pc, #160]	; (1475c <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   146ba:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   146be:	eba6 000c 	sub.w	r0, r6, ip
   146c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   146c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   146ca:	bf88      	it	hi
   146cc:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   146ce:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
   146d2:	9a01      	ldr	r2, [sp, #4]
   146d4:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   146d8:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   146dc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   146e0:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   146e4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
   146e8:	4582      	cmp	sl, r0
   146ea:	d006      	beq.n	146fa <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   146ec:	1a30      	subs	r0, r6, r0
   146ee:	3802      	subs	r0, #2
   146f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   146f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   146f8:	d81b      	bhi.n	14732 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   146fa:	eba6 060b 	sub.w	r6, r6, fp
   146fe:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   14702:	1936      	adds	r6, r6, r4
   14704:	f145 0300 	adc.w	r3, r5, #0
   14708:	4634      	mov	r4, r6
   1470a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1470c:	4912      	ldr	r1, [pc, #72]	; (14758 <compare_set+0x134>)
	cc_data[chan].callback = handler;
   1470e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   14710:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   14714:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   14718:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1471a:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1471c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1471e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14720:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   14722:	4638      	mov	r0, r7
   14724:	9900      	ldr	r1, [sp, #0]
   14726:	f7ff fee5 	bl	144f4 <compare_int_unlock>
}
   1472a:	4620      	mov	r0, r4
   1472c:	b003      	add	sp, #12
   1472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14732:	4630      	mov	r0, r6
   14734:	e7b0      	b.n	14698 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   14736:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14738:	4a09      	ldr	r2, [pc, #36]	; (14760 <compare_set+0x13c>)
   1473a:	40bb      	lsls	r3, r7
   1473c:	e8d2 0fef 	ldaex	r0, [r2]
   14740:	4318      	orrs	r0, r3
   14742:	e8c2 0fe1 	stlex	r1, r0, [r2]
   14746:	2900      	cmp	r1, #0
   14748:	d0e0      	beq.n	1470c <compare_set+0xe8>
   1474a:	e7f7      	b.n	1473c <compare_set+0x118>
			return -EINVAL;
   1474c:	f06f 0415 	mvn.w	r4, #21
   14750:	e7e7      	b.n	14722 <compare_set+0xfe>
   14752:	bf00      	nop
   14754:	01000001 	.word	0x01000001
   14758:	200093f8 	.word	0x200093f8
   1475c:	40015000 	.word	0x40015000
   14760:	200099c4 	.word	0x200099c4

00014764 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   14764:	2801      	cmp	r0, #1
{
   14766:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   14768:	d00b      	beq.n	14782 <z_nrf_rtc_timer_set+0x1e>
   1476a:	4908      	ldr	r1, [pc, #32]	; (1478c <z_nrf_rtc_timer_set+0x28>)
   1476c:	4808      	ldr	r0, [pc, #32]	; (14790 <z_nrf_rtc_timer_set+0x2c>)
   1476e:	f240 134d 	movw	r3, #333	; 0x14d
   14772:	4a08      	ldr	r2, [pc, #32]	; (14794 <z_nrf_rtc_timer_set+0x30>)
   14774:	f006 fd5a 	bl	1b22c <assert_print>
   14778:	f240 114d 	movw	r1, #333	; 0x14d
   1477c:	4805      	ldr	r0, [pc, #20]	; (14794 <z_nrf_rtc_timer_set+0x30>)
   1477e:	f006 fd4e 	bl	1b21e <assert_post_action>
}
   14782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   14786:	f7ff bf4d 	b.w	14624 <compare_set>
   1478a:	bf00      	nop
   1478c:	0002262a 	.word	0x0002262a
   14790:	0001f995 	.word	0x0001f995
   14794:	000225dd 	.word	0x000225dd

00014798 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   14798:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1479a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1479e:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   147a0:	f04f 30ff 	mov.w	r0, #4294967295
   147a4:	f04f 31ff 	mov.w	r1, #4294967295
   147a8:	4c19      	ldr	r4, [pc, #100]	; (14810 <sys_clock_driver_init+0x78>)
   147aa:	4b1a      	ldr	r3, [pc, #104]	; (14814 <sys_clock_driver_init+0x7c>)
   147ac:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   147b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   147b4:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   147b8:	e9c3 0106 	strd	r0, r1, [r3, #24]
   147bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   147c0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   147c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   147c6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   147ca:	4b13      	ldr	r3, [pc, #76]	; (14818 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   147cc:	2101      	movs	r1, #1
   147ce:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   147d2:	2015      	movs	r0, #21
   147d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   147d8:	462a      	mov	r2, r5
   147da:	f7f7 fd0b 	bl	c1f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   147de:	2015      	movs	r0, #21
   147e0:	f7f7 fcd8 	bl	c194 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   147e4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   147e6:	2203      	movs	r2, #3
   147e8:	60a3      	str	r3, [r4, #8]
   147ea:	6023      	str	r3, [r4, #0]
   147ec:	4b0b      	ldr	r3, [pc, #44]	; (1481c <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   147ee:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   147f0:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   147f2:	4b0b      	ldr	r3, [pc, #44]	; (14820 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   147f4:	4a0b      	ldr	r2, [pc, #44]	; (14824 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   147f6:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   147f8:	4b0b      	ldr	r3, [pc, #44]	; (14828 <sys_clock_driver_init+0x90>)
   147fa:	9501      	str	r5, [sp, #4]
   147fc:	9300      	str	r3, [sp, #0]
   147fe:	2300      	movs	r3, #0
   14800:	f7ff ff10 	bl	14624 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   14804:	4630      	mov	r0, r6
   14806:	f7fe fe5f 	bl	134c8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1480a:	4628      	mov	r0, r5
   1480c:	b002      	add	sp, #8
   1480e:	bd70      	pop	{r4, r5, r6, pc}
   14810:	40015000 	.word	0x40015000
   14814:	200093f8 	.word	0x200093f8
   14818:	e000e100 	.word	0xe000e100
   1481c:	200099cc 	.word	0x200099cc
   14820:	200099c8 	.word	0x200099c8
   14824:	007fffff 	.word	0x007fffff
   14828:	00014475 	.word	0x00014475

0001482c <rtc_nrf_isr>:
{
   1482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   14830:	4b3f      	ldr	r3, [pc, #252]	; (14930 <rtc_nrf_isr+0x104>)
   14832:	b085      	sub	sp, #20
   14834:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   14838:	0792      	lsls	r2, r2, #30
   1483a:	d50b      	bpl.n	14854 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1483c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   14840:	b142      	cbz	r2, 14854 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14842:	2200      	movs	r2, #0
   14844:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   14848:	4a3a      	ldr	r2, [pc, #232]	; (14934 <rtc_nrf_isr+0x108>)
   1484a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1484e:	6813      	ldr	r3, [r2, #0]
   14850:	3301      	adds	r3, #1
   14852:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14854:	4d38      	ldr	r5, [pc, #224]	; (14938 <rtc_nrf_isr+0x10c>)
   14856:	2400      	movs	r4, #0
   14858:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1485a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1485e:	4e34      	ldr	r6, [pc, #208]	; (14930 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   14860:	f04f 0320 	mov.w	r3, #32
   14864:	f3ef 8211 	mrs	r2, BASEPRI
   14868:	f383 8812 	msr	BASEPRI_MAX, r3
   1486c:	f3bf 8f6f 	isb	sy
   14870:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   14874:	fa0b f904 	lsl.w	r9, fp, r4
   14878:	ea19 0f03 	tst.w	r9, r3
   1487c:	d10a      	bne.n	14894 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1487e:	f382 8811 	msr	BASEPRI, r2
   14882:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14886:	3510      	adds	r5, #16
   14888:	b114      	cbz	r4, 14890 <rtc_nrf_isr+0x64>
}
   1488a:	b005      	add	sp, #20
   1488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14890:	2401      	movs	r4, #1
   14892:	e7e5      	b.n	14860 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14894:	2301      	movs	r3, #1
   14896:	40a3      	lsls	r3, r4
   14898:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1489a:	4928      	ldr	r1, [pc, #160]	; (1493c <rtc_nrf_isr+0x110>)
   1489c:	e8d1 0fef 	ldaex	r0, [r1]
   148a0:	ea00 0c03 	and.w	ip, r0, r3
   148a4:	e8c1 cfee 	stlex	lr, ip, [r1]
   148a8:	f1be 0f00 	cmp.w	lr, #0
   148ac:	d1f6      	bne.n	1489c <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   148ae:	4b24      	ldr	r3, [pc, #144]	; (14940 <rtc_nrf_isr+0x114>)
   148b0:	00a1      	lsls	r1, r4, #2
   148b2:	b918      	cbnz	r0, 148bc <rtc_nrf_isr+0x90>
   148b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   148b8:	2800      	cmp	r0, #0
   148ba:	d0e0      	beq.n	1487e <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   148bc:	f04f 0a00 	mov.w	sl, #0
   148c0:	f841 a003 	str.w	sl, [r1, r3]
   148c4:	58cb      	ldr	r3, [r1, r3]
   148c6:	f382 8811 	msr	BASEPRI, r2
   148ca:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   148ce:	f7ff fe87 	bl	145e0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   148d2:	f04f 0320 	mov.w	r3, #32
   148d6:	f3ef 8c11 	mrs	ip, BASEPRI
   148da:	f383 8812 	msr	BASEPRI_MAX, r3
   148de:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   148e2:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   148e6:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   148ea:	4290      	cmp	r0, r2
   148ec:	4199      	sbcs	r1, r3
   148ee:	d204      	bcs.n	148fa <rtc_nrf_isr+0xce>
	__asm__ volatile(
   148f0:	f38c 8811 	msr	BASEPRI, ip
   148f4:	f3bf 8f6f 	isb	sy
		if (handler) {
   148f8:	e7c5      	b.n	14886 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   148fa:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   148fe:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   14902:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   14904:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   14908:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1490c:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   14910:	4907      	ldr	r1, [pc, #28]	; (14930 <rtc_nrf_isr+0x104>)
   14912:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   14916:	f38c 8811 	msr	BASEPRI, ip
   1491a:	f3bf 8f6f 	isb	sy
		if (handler) {
   1491e:	f1b8 0f00 	cmp.w	r8, #0
   14922:	d0b0      	beq.n	14886 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   14924:	9903      	ldr	r1, [sp, #12]
   14926:	4620      	mov	r0, r4
   14928:	9100      	str	r1, [sp, #0]
   1492a:	47c0      	blx	r8
   1492c:	e7ab      	b.n	14886 <rtc_nrf_isr+0x5a>
   1492e:	bf00      	nop
   14930:	40015000 	.word	0x40015000
   14934:	200099d0 	.word	0x200099d0
   14938:	200093f8 	.word	0x200093f8
   1493c:	200099c4 	.word	0x200099c4
   14940:	40015140 	.word	0x40015140

00014944 <z_nrf_rtc_timer_chan_alloc>:
{
   14944:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   14946:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   14948:	4b0c      	ldr	r3, [pc, #48]	; (1497c <z_nrf_rtc_timer_chan_alloc+0x38>)
   1494a:	6818      	ldr	r0, [r3, #0]
   1494c:	b190      	cbz	r0, 14974 <z_nrf_rtc_timer_chan_alloc+0x30>
   1494e:	fab0 f080 	clz	r0, r0
   14952:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   14956:	fa04 f100 	lsl.w	r1, r4, r0
   1495a:	43c9      	mvns	r1, r1
   1495c:	e8d3 2fef 	ldaex	r2, [r3]
   14960:	ea02 0501 	and.w	r5, r2, r1
   14964:	e8c3 5fe6 	stlex	r6, r5, [r3]
   14968:	2e00      	cmp	r6, #0
   1496a:	d1f7      	bne.n	1495c <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1496c:	40c2      	lsrs	r2, r0
   1496e:	07d2      	lsls	r2, r2, #31
   14970:	d5eb      	bpl.n	1494a <z_nrf_rtc_timer_chan_alloc+0x6>
}
   14972:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   14974:	f06f 000b 	mvn.w	r0, #11
   14978:	e7fb      	b.n	14972 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1497a:	bf00      	nop
   1497c:	200099c8 	.word	0x200099c8

00014980 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   14980:	2801      	cmp	r0, #1
{
   14982:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   14984:	d00b      	beq.n	1499e <z_nrf_rtc_timer_chan_free+0x1e>
   14986:	490b      	ldr	r1, [pc, #44]	; (149b4 <z_nrf_rtc_timer_chan_free+0x34>)
   14988:	480b      	ldr	r0, [pc, #44]	; (149b8 <z_nrf_rtc_timer_chan_free+0x38>)
   1498a:	f240 231b 	movw	r3, #539	; 0x21b
   1498e:	4a0b      	ldr	r2, [pc, #44]	; (149bc <z_nrf_rtc_timer_chan_free+0x3c>)
   14990:	f006 fc4c 	bl	1b22c <assert_print>
   14994:	f240 211b 	movw	r1, #539	; 0x21b
   14998:	4808      	ldr	r0, [pc, #32]	; (149bc <z_nrf_rtc_timer_chan_free+0x3c>)
   1499a:	f006 fc40 	bl	1b21e <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1499e:	4b08      	ldr	r3, [pc, #32]	; (149c0 <z_nrf_rtc_timer_chan_free+0x40>)
   149a0:	e8d3 1fef 	ldaex	r1, [r3]
   149a4:	f041 0102 	orr.w	r1, r1, #2
   149a8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   149ac:	2a00      	cmp	r2, #0
   149ae:	d1f7      	bne.n	149a0 <z_nrf_rtc_timer_chan_free+0x20>
}
   149b0:	bd08      	pop	{r3, pc}
   149b2:	bf00      	nop
   149b4:	0002262a 	.word	0x0002262a
   149b8:	0001f995 	.word	0x0001f995
   149bc:	000225dd 	.word	0x000225dd
   149c0:	200099c8 	.word	0x200099c8

000149c4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   149c4:	1c43      	adds	r3, r0, #1
{
   149c6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   149c8:	d020      	beq.n	14a0c <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   149ca:	2801      	cmp	r0, #1
   149cc:	dd20      	ble.n	14a10 <sys_clock_set_timeout+0x4c>
   149ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   149d2:	da1f      	bge.n	14a14 <sys_clock_set_timeout+0x50>
   149d4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   149d6:	f7ff fe03 	bl	145e0 <z_nrf_rtc_timer_read>
   149da:	4b0f      	ldr	r3, [pc, #60]	; (14a18 <sys_clock_set_timeout+0x54>)
   149dc:	e9d3 1300 	ldrd	r1, r3, [r3]
   149e0:	1a42      	subs	r2, r0, r1
		ticks = 0;
   149e2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   149e6:	bf28      	it	cs
   149e8:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   149ea:	480c      	ldr	r0, [pc, #48]	; (14a1c <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   149ec:	3201      	adds	r2, #1
   149ee:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   149f0:	4282      	cmp	r2, r0
   149f2:	bf28      	it	cs
   149f4:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   149f6:	2000      	movs	r0, #0
   149f8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   149fa:	4909      	ldr	r1, [pc, #36]	; (14a20 <sys_clock_set_timeout+0x5c>)
   149fc:	9001      	str	r0, [sp, #4]
   149fe:	9100      	str	r1, [sp, #0]
   14a00:	f143 0300 	adc.w	r3, r3, #0
   14a04:	f7ff fe0e 	bl	14624 <compare_set>
}
   14a08:	b002      	add	sp, #8
   14a0a:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14a0c:	4803      	ldr	r0, [pc, #12]	; (14a1c <sys_clock_set_timeout+0x58>)
   14a0e:	e7e1      	b.n	149d4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   14a10:	2400      	movs	r4, #0
   14a12:	e7e0      	b.n	149d6 <sys_clock_set_timeout+0x12>
   14a14:	4c01      	ldr	r4, [pc, #4]	; (14a1c <sys_clock_set_timeout+0x58>)
   14a16:	e7de      	b.n	149d6 <sys_clock_set_timeout+0x12>
   14a18:	20009418 	.word	0x20009418
   14a1c:	007fffff 	.word	0x007fffff
   14a20:	00014475 	.word	0x00014475

00014a24 <sys_clock_elapsed>:
{
   14a24:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   14a26:	f7ff fddb 	bl	145e0 <z_nrf_rtc_timer_read>
   14a2a:	4b02      	ldr	r3, [pc, #8]	; (14a34 <sys_clock_elapsed+0x10>)
   14a2c:	681b      	ldr	r3, [r3, #0]
}
   14a2e:	1ac0      	subs	r0, r0, r3
   14a30:	bd08      	pop	{r3, pc}
   14a32:	bf00      	nop
   14a34:	20009418 	.word	0x20009418

00014a38 <nrf_gpio_pin_port_decode>:
{
   14a38:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14a3a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   14a3c:	095a      	lsrs	r2, r3, #5
   14a3e:	d00d      	beq.n	14a5c <nrf_gpio_pin_port_decode+0x24>
   14a40:	2a01      	cmp	r2, #1
   14a42:	d013      	beq.n	14a6c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14a44:	490e      	ldr	r1, [pc, #56]	; (14a80 <nrf_gpio_pin_port_decode+0x48>)
   14a46:	480f      	ldr	r0, [pc, #60]	; (14a84 <nrf_gpio_pin_port_decode+0x4c>)
   14a48:	f240 2347 	movw	r3, #583	; 0x247
   14a4c:	4a0e      	ldr	r2, [pc, #56]	; (14a88 <nrf_gpio_pin_port_decode+0x50>)
   14a4e:	f006 fbed 	bl	1b22c <assert_print>
   14a52:	f240 2147 	movw	r1, #583	; 0x247
   14a56:	480c      	ldr	r0, [pc, #48]	; (14a88 <nrf_gpio_pin_port_decode+0x50>)
   14a58:	f006 fbe1 	bl	1b21e <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   14a5c:	f04f 32ff 	mov.w	r2, #4294967295
   14a60:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14a64:	07d9      	lsls	r1, r3, #31
   14a66:	d5ed      	bpl.n	14a44 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   14a68:	4808      	ldr	r0, [pc, #32]	; (14a8c <nrf_gpio_pin_port_decode+0x54>)
   14a6a:	e008      	b.n	14a7e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   14a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   14a70:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   14a74:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14a76:	07d2      	lsls	r2, r2, #31
   14a78:	d5e4      	bpl.n	14a44 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   14a7a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   14a7c:	4804      	ldr	r0, [pc, #16]	; (14a90 <nrf_gpio_pin_port_decode+0x58>)
}
   14a7e:	bd08      	pop	{r3, pc}
   14a80:	000221e8 	.word	0x000221e8
   14a84:	0001f995 	.word	0x0001f995
   14a88:	000221b5 	.word	0x000221b5
   14a8c:	40842500 	.word	0x40842500
   14a90:	40842800 	.word	0x40842800

00014a94 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   14a94:	b510      	push	{r4, lr}
   14a96:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   14a98:	6902      	ldr	r2, [r0, #16]
{
   14a9a:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   14a9c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   14aa0:	4925      	ldr	r1, [pc, #148]	; (14b38 <mbox_nrf_init+0xa4>)
   14aa2:	2000      	movs	r0, #0
   14aa4:	f001 f974 	bl	15d90 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14aa8:	2200      	movs	r2, #0
   14aaa:	2101      	movs	r1, #1
   14aac:	202a      	movs	r0, #42	; 0x2a
   14aae:	f7f7 fba1 	bl	c1f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   14ab2:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   14ab4:	2284      	movs	r2, #132	; 0x84
   14ab6:	2100      	movs	r1, #0
   14ab8:	a807      	add	r0, sp, #28
   14aba:	f007 fbd1 	bl	1c260 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   14abe:	6863      	ldr	r3, [r4, #4]
   14ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   14ac4:	d30a      	bcc.n	14adc <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   14ac6:	4b1d      	ldr	r3, [pc, #116]	; (14b3c <mbox_nrf_init+0xa8>)
   14ac8:	9305      	str	r3, [sp, #20]
   14aca:	2302      	movs	r3, #2
   14acc:	9304      	str	r3, [sp, #16]
   14ace:	2300      	movs	r3, #0
   14ad0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14ad4:	481a      	ldr	r0, [pc, #104]	; (14b40 <mbox_nrf_init+0xac>)
   14ad6:	aa04      	add	r2, sp, #16
   14ad8:	f7f6 f910 	bl	acfc <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   14adc:	6823      	ldr	r3, [r4, #0]
   14ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   14ae2:	d30a      	bcc.n	14afa <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   14ae4:	4b17      	ldr	r3, [pc, #92]	; (14b44 <mbox_nrf_init+0xb0>)
   14ae6:	9305      	str	r3, [sp, #20]
   14ae8:	2302      	movs	r3, #2
   14aea:	9304      	str	r3, [sp, #16]
   14aec:	2300      	movs	r3, #0
   14aee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14af2:	4813      	ldr	r0, [pc, #76]	; (14b40 <mbox_nrf_init+0xac>)
   14af4:	aa04      	add	r2, sp, #16
   14af6:	f7f6 f901 	bl	acfc <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   14afa:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   14afc:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   14afe:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14b00:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   14b02:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14b04:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   14b06:	40d9      	lsrs	r1, r3
   14b08:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   14b0a:	bf44      	itt	mi
   14b0c:	fa00 f103 	lslmi.w	r1, r0, r3
   14b10:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   14b14:	6821      	ldr	r1, [r4, #0]
   14b16:	40d9      	lsrs	r1, r3
   14b18:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   14b1a:	bf48      	it	mi
   14b1c:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14b20:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   14b24:	bf48      	it	mi
   14b26:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   14b28:	2b10      	cmp	r3, #16
   14b2a:	d1ea      	bne.n	14b02 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   14b2c:	a807      	add	r0, sp, #28
   14b2e:	f001 f947 	bl	15dc0 <nrfx_ipc_config_load>

	return 0;
}
   14b32:	2000      	movs	r0, #0
   14b34:	b028      	add	sp, #160	; 0xa0
   14b36:	bd10      	pop	{r4, pc}
   14b38:	00014c3d 	.word	0x00014c3d
   14b3c:	00022645 	.word	0x00022645
   14b40:	0001ee04 	.word	0x0001ee04
   14b44:	00022671 	.word	0x00022671

00014b48 <mbox_nrf_set_enabled>:
{
   14b48:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14b4a:	290f      	cmp	r1, #15
{
   14b4c:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   14b4e:	6905      	ldr	r5, [r0, #16]
{
   14b50:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14b52:	d842      	bhi.n	14bda <mbox_nrf_set_enabled+0x92>
   14b54:	6843      	ldr	r3, [r0, #4]
   14b56:	681b      	ldr	r3, [r3, #0]
   14b58:	40cb      	lsrs	r3, r1
   14b5a:	07db      	lsls	r3, r3, #31
   14b5c:	d53d      	bpl.n	14bda <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   14b5e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14b62:	40cb      	lsrs	r3, r1
   14b64:	f003 0301 	and.w	r3, r3, #1
   14b68:	b91a      	cbnz	r2, 14b72 <mbox_nrf_set_enabled+0x2a>
   14b6a:	bb13      	cbnz	r3, 14bb2 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   14b6c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14b70:	e031      	b.n	14bd6 <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   14b72:	2b00      	cmp	r3, #0
   14b74:	d1fa      	bne.n	14b6c <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   14b76:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   14b7a:	b94b      	cbnz	r3, 14b90 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   14b7c:	4a18      	ldr	r2, [pc, #96]	; (14be0 <mbox_nrf_set_enabled+0x98>)
   14b7e:	9205      	str	r2, [sp, #20]
   14b80:	2202      	movs	r2, #2
   14b82:	9204      	str	r2, [sp, #16]
   14b84:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14b88:	4816      	ldr	r0, [pc, #88]	; (14be4 <mbox_nrf_set_enabled+0x9c>)
   14b8a:	aa04      	add	r2, sp, #16
   14b8c:	f7f6 f8b6 	bl	acfc <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   14b90:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14b94:	b913      	cbnz	r3, 14b9c <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   14b96:	202a      	movs	r0, #42	; 0x2a
   14b98:	f7f7 fafc 	bl	c194 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   14b9c:	2201      	movs	r2, #1
   14b9e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14ba2:	40a2      	lsls	r2, r4
   14ba4:	4313      	orrs	r3, r2
   14ba6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   14baa:	b2e0      	uxtb	r0, r4
   14bac:	f001 f94a 	bl	15e44 <nrfx_ipc_receive_event_enable>
   14bb0:	e00a      	b.n	14bc8 <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   14bb2:	b2c8      	uxtb	r0, r1
   14bb4:	f001 f964 	bl	15e80 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   14bb8:	2201      	movs	r2, #1
   14bba:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14bbe:	40a2      	lsls	r2, r4
   14bc0:	ea23 0302 	bic.w	r3, r3, r2
   14bc4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   14bc8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14bcc:	b913      	cbnz	r3, 14bd4 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   14bce:	202a      	movs	r0, #42	; 0x2a
   14bd0:	f7f7 faee 	bl	c1b0 <arch_irq_disable>
	return 0;
   14bd4:	2000      	movs	r0, #0
}
   14bd6:	b007      	add	sp, #28
   14bd8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   14bda:	f06f 0015 	mvn.w	r0, #21
   14bde:	e7fa      	b.n	14bd6 <mbox_nrf_set_enabled+0x8e>
   14be0:	0002269d 	.word	0x0002269d
   14be4:	0001ee04 	.word	0x0001ee04

00014be8 <mbox_nrf_send>:
{
   14be8:	b530      	push	{r4, r5, lr}
   14bea:	4605      	mov	r5, r0
   14bec:	460c      	mov	r4, r1
   14bee:	b087      	sub	sp, #28
	if (msg) {
   14bf0:	b152      	cbz	r2, 14c08 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   14bf2:	4b10      	ldr	r3, [pc, #64]	; (14c34 <mbox_nrf_send+0x4c>)
   14bf4:	9305      	str	r3, [sp, #20]
   14bf6:	2302      	movs	r3, #2
   14bf8:	9304      	str	r3, [sp, #16]
   14bfa:	2300      	movs	r3, #0
   14bfc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14c00:	480d      	ldr	r0, [pc, #52]	; (14c38 <mbox_nrf_send+0x50>)
   14c02:	aa04      	add	r2, sp, #16
   14c04:	f7f6 f87a 	bl	acfc <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   14c08:	2c0f      	cmp	r4, #15
   14c0a:	d80f      	bhi.n	14c2c <mbox_nrf_send+0x44>
   14c0c:	686b      	ldr	r3, [r5, #4]
   14c0e:	685b      	ldr	r3, [r3, #4]
   14c10:	40e3      	lsrs	r3, r4
   14c12:	07db      	lsls	r3, r3, #31
   14c14:	d50a      	bpl.n	14c2c <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c16:	2301      	movs	r3, #1
	return 0;
   14c18:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   14c1a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c1c:	b2e4      	uxtb	r4, r4
   14c1e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   14c22:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   14c26:	6023      	str	r3, [r4, #0]
}
   14c28:	b007      	add	sp, #28
   14c2a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   14c2c:	f06f 0015 	mvn.w	r0, #21
   14c30:	e7fa      	b.n	14c28 <mbox_nrf_send+0x40>
   14c32:	bf00      	nop
   14c34:	000226cd 	.word	0x000226cd
   14c38:	0001ee04 	.word	0x0001ee04

00014c3c <mbox_dispatcher>:
{
   14c3c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   14c3e:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14c42:	280f      	cmp	r0, #15
{
   14c44:	4604      	mov	r4, r0
   14c46:	460d      	mov	r5, r1
   14c48:	6873      	ldr	r3, [r6, #4]
   14c4a:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   14c4c:	d803      	bhi.n	14c56 <mbox_dispatcher+0x1a>
   14c4e:	681b      	ldr	r3, [r3, #0]
   14c50:	40c3      	lsrs	r3, r0
   14c52:	07db      	lsls	r3, r3, #31
   14c54:	d40a      	bmi.n	14c6c <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   14c56:	4b15      	ldr	r3, [pc, #84]	; (14cac <mbox_dispatcher+0x70>)
   14c58:	9305      	str	r3, [sp, #20]
   14c5a:	2302      	movs	r3, #2
   14c5c:	9304      	str	r3, [sp, #16]
   14c5e:	2300      	movs	r3, #0
   14c60:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14c64:	4812      	ldr	r0, [pc, #72]	; (14cb0 <mbox_dispatcher+0x74>)
   14c66:	aa04      	add	r2, sp, #16
   14c68:	f7f6 f848 	bl	acfc <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   14c6c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   14c70:	40e3      	lsrs	r3, r4
   14c72:	f013 0301 	ands.w	r3, r3, #1
   14c76:	d109      	bne.n	14c8c <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   14c78:	4a0e      	ldr	r2, [pc, #56]	; (14cb4 <mbox_dispatcher+0x78>)
   14c7a:	9205      	str	r2, [sp, #20]
   14c7c:	2202      	movs	r2, #2
   14c7e:	9204      	str	r2, [sp, #16]
   14c80:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14c84:	480a      	ldr	r0, [pc, #40]	; (14cb0 <mbox_dispatcher+0x74>)
   14c86:	aa04      	add	r2, sp, #16
   14c88:	f7f6 f838 	bl	acfc <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   14c8c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   14c90:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   14c94:	b145      	cbz	r5, 14ca8 <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   14c96:	2300      	movs	r3, #0
   14c98:	4621      	mov	r1, r4
   14c9a:	4630      	mov	r0, r6
   14c9c:	46ac      	mov	ip, r5
   14c9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   14ca0:	b006      	add	sp, #24
   14ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   14ca6:	4760      	bx	ip
}
   14ca8:	b006      	add	sp, #24
   14caa:	bd70      	pop	{r4, r5, r6, pc}
   14cac:	000226e8 	.word	0x000226e8
   14cb0:	0001ee04 	.word	0x0001ee04
   14cb4:	00022704 	.word	0x00022704

00014cb8 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   14cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   14cbc:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   14cc0:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   14cc2:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   14cc6:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   14cc8:	d00e      	beq.n	14ce8 <z_impl_gpio_pin_configure+0x30>
   14cca:	4942      	ldr	r1, [pc, #264]	; (14dd4 <z_impl_gpio_pin_configure+0x11c>)
   14ccc:	f240 23be 	movw	r3, #702	; 0x2be
   14cd0:	4a41      	ldr	r2, [pc, #260]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14cd2:	4842      	ldr	r0, [pc, #264]	; (14ddc <z_impl_gpio_pin_configure+0x124>)
   14cd4:	f006 faaa 	bl	1b22c <assert_print>
   14cd8:	4841      	ldr	r0, [pc, #260]	; (14de0 <z_impl_gpio_pin_configure+0x128>)
   14cda:	f006 faa7 	bl	1b22c <assert_print>
   14cde:	f240 21be 	movw	r1, #702	; 0x2be
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   14ce2:	483d      	ldr	r0, [pc, #244]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14ce4:	f006 fa9b 	bl	1b21e <assert_post_action>
   14ce8:	f002 0230 	and.w	r2, r2, #48	; 0x30
   14cec:	2a30      	cmp	r2, #48	; 0x30
   14cee:	d10c      	bne.n	14d0a <z_impl_gpio_pin_configure+0x52>
   14cf0:	493c      	ldr	r1, [pc, #240]	; (14de4 <z_impl_gpio_pin_configure+0x12c>)
   14cf2:	f240 23c1 	movw	r3, #705	; 0x2c1
   14cf6:	4a38      	ldr	r2, [pc, #224]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14cf8:	4838      	ldr	r0, [pc, #224]	; (14ddc <z_impl_gpio_pin_configure+0x124>)
   14cfa:	f006 fa97 	bl	1b22c <assert_print>
   14cfe:	483a      	ldr	r0, [pc, #232]	; (14de8 <z_impl_gpio_pin_configure+0x130>)
   14d00:	f006 fa94 	bl	1b22c <assert_print>
   14d04:	f240 21c1 	movw	r1, #705	; 0x2c1
   14d08:	e7eb      	b.n	14ce2 <z_impl_gpio_pin_configure+0x2a>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   14d0a:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   14d0e:	2a02      	cmp	r2, #2
   14d10:	d10c      	bne.n	14d2c <z_impl_gpio_pin_configure+0x74>
   14d12:	4936      	ldr	r1, [pc, #216]	; (14dec <z_impl_gpio_pin_configure+0x134>)
   14d14:	f240 23c5 	movw	r3, #709	; 0x2c5
   14d18:	4a2f      	ldr	r2, [pc, #188]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14d1a:	4830      	ldr	r0, [pc, #192]	; (14ddc <z_impl_gpio_pin_configure+0x124>)
   14d1c:	f006 fa86 	bl	1b22c <assert_print>
   14d20:	4833      	ldr	r0, [pc, #204]	; (14df0 <z_impl_gpio_pin_configure+0x138>)
   14d22:	f006 fa83 	bl	1b22c <assert_print>
   14d26:	f240 21c5 	movw	r1, #709	; 0x2c5
   14d2a:	e7da      	b.n	14ce2 <z_impl_gpio_pin_configure+0x2a>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   14d2c:	f003 0206 	and.w	r2, r3, #6
   14d30:	2a04      	cmp	r2, #4
   14d32:	d109      	bne.n	14d48 <z_impl_gpio_pin_configure+0x90>
   14d34:	492f      	ldr	r1, [pc, #188]	; (14df4 <z_impl_gpio_pin_configure+0x13c>)
   14d36:	f240 23c9 	movw	r3, #713	; 0x2c9
   14d3a:	4a27      	ldr	r2, [pc, #156]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14d3c:	4827      	ldr	r0, [pc, #156]	; (14ddc <z_impl_gpio_pin_configure+0x124>)
   14d3e:	f006 fa75 	bl	1b22c <assert_print>
   14d42:	f240 21c9 	movw	r1, #713	; 0x2c9
   14d46:	e7cc      	b.n	14ce2 <z_impl_gpio_pin_configure+0x2a>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   14d48:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   14d4c:	d016      	beq.n	14d7c <z_impl_gpio_pin_configure+0xc4>
   14d4e:	039d      	lsls	r5, r3, #14
   14d50:	d40c      	bmi.n	14d6c <z_impl_gpio_pin_configure+0xb4>
   14d52:	4929      	ldr	r1, [pc, #164]	; (14df8 <z_impl_gpio_pin_configure+0x140>)
   14d54:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   14d58:	4a1f      	ldr	r2, [pc, #124]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14d5a:	4820      	ldr	r0, [pc, #128]	; (14ddc <z_impl_gpio_pin_configure+0x124>)
   14d5c:	f006 fa66 	bl	1b22c <assert_print>
   14d60:	4826      	ldr	r0, [pc, #152]	; (14dfc <z_impl_gpio_pin_configure+0x144>)
   14d62:	f006 fa63 	bl	1b22c <assert_print>
   14d66:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   14d6a:	e7ba      	b.n	14ce2 <z_impl_gpio_pin_configure+0x2a>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   14d6c:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   14d70:	d018      	beq.n	14da4 <z_impl_gpio_pin_configure+0xec>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   14d72:	4a23      	ldr	r2, [pc, #140]	; (14e00 <z_impl_gpio_pin_configure+0x148>)
   14d74:	439a      	bics	r2, r3
   14d76:	d101      	bne.n	14d7c <z_impl_gpio_pin_configure+0xc4>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   14d78:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14d7c:	2501      	movs	r5, #1
   14d7e:	6824      	ldr	r4, [r4, #0]
   14d80:	408d      	lsls	r5, r1
   14d82:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   14d84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14d88:	d119      	bne.n	14dbe <z_impl_gpio_pin_configure+0x106>
   14d8a:	491e      	ldr	r1, [pc, #120]	; (14e04 <z_impl_gpio_pin_configure+0x14c>)
   14d8c:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   14d90:	4a11      	ldr	r2, [pc, #68]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14d92:	4812      	ldr	r0, [pc, #72]	; (14ddc <z_impl_gpio_pin_configure+0x124>)
   14d94:	f006 fa4a 	bl	1b22c <assert_print>
   14d98:	481b      	ldr	r0, [pc, #108]	; (14e08 <z_impl_gpio_pin_configure+0x150>)
   14d9a:	f006 fa47 	bl	1b22c <assert_print>
   14d9e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   14da2:	e79e      	b.n	14ce2 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   14da4:	4919      	ldr	r1, [pc, #100]	; (14e0c <z_impl_gpio_pin_configure+0x154>)
   14da6:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   14daa:	4a0b      	ldr	r2, [pc, #44]	; (14dd8 <z_impl_gpio_pin_configure+0x120>)
   14dac:	480b      	ldr	r0, [pc, #44]	; (14ddc <z_impl_gpio_pin_configure+0x124>)
   14dae:	f006 fa3d 	bl	1b22c <assert_print>
   14db2:	4817      	ldr	r0, [pc, #92]	; (14e10 <z_impl_gpio_pin_configure+0x158>)
   14db4:	f006 fa3a 	bl	1b22c <assert_print>
   14db8:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   14dbc:	e791      	b.n	14ce2 <z_impl_gpio_pin_configure+0x2a>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14dbe:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   14dc0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14dc2:	bf4c      	ite	mi
   14dc4:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   14dc6:	43ac      	bicpl	r4, r5
   14dc8:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   14dca:	683b      	ldr	r3, [r7, #0]
}
   14dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   14dd0:	4718      	bx	r3
   14dd2:	bf00      	nop
   14dd4:	0002276b 	.word	0x0002276b
   14dd8:	0002273a 	.word	0x0002273a
   14ddc:	0001f995 	.word	0x0001f995
   14de0:	000227c8 	.word	0x000227c8
   14de4:	000227ec 	.word	0x000227ec
   14de8:	00022825 	.word	0x00022825
   14dec:	00022862 	.word	0x00022862
   14df0:	00022897 	.word	0x00022897
   14df4:	000228e9 	.word	0x000228e9
   14df8:	0002291c 	.word	0x0002291c
   14dfc:	00022962 	.word	0x00022962
   14e00:	00100001 	.word	0x00100001
   14e04:	00022a0a 	.word	0x00022a0a
   14e08:	00022a48 	.word	0x00022a48
   14e0c:	0002299d 	.word	0x0002299d
   14e10:	000229de 	.word	0x000229de

00014e14 <gpio_pin_set>:
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14e14:	2301      	movs	r3, #1
{
   14e16:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14e18:	fa03 f101 	lsl.w	r1, r3, r1
   14e1c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   14e1e:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14e20:	681b      	ldr	r3, [r3, #0]
   14e22:	4219      	tst	r1, r3
   14e24:	d10e      	bne.n	14e44 <gpio_pin_set+0x30>
   14e26:	490e      	ldr	r1, [pc, #56]	; (14e60 <gpio_pin_set+0x4c>)
   14e28:	f240 5327 	movw	r3, #1319	; 0x527
   14e2c:	4a0d      	ldr	r2, [pc, #52]	; (14e64 <gpio_pin_set+0x50>)
   14e2e:	480e      	ldr	r0, [pc, #56]	; (14e68 <gpio_pin_set+0x54>)
   14e30:	f006 f9fc 	bl	1b22c <assert_print>
   14e34:	480d      	ldr	r0, [pc, #52]	; (14e6c <gpio_pin_set+0x58>)
   14e36:	f006 f9f9 	bl	1b22c <assert_print>
   14e3a:	f240 5127 	movw	r1, #1319	; 0x527
   14e3e:	4809      	ldr	r0, [pc, #36]	; (14e64 <gpio_pin_set+0x50>)
   14e40:	f006 f9ed 	bl	1b21e <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   14e44:	6823      	ldr	r3, [r4, #0]
   14e46:	4219      	tst	r1, r3
   14e48:	d003      	beq.n	14e52 <gpio_pin_set+0x3e>
	if (value != 0)	{
   14e4a:	b122      	cbz	r2, 14e56 <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   14e4c:	6883      	ldr	r3, [r0, #8]
   14e4e:	691b      	ldr	r3, [r3, #16]
   14e50:	e003      	b.n	14e5a <gpio_pin_set+0x46>
	if (value != 0)	{
   14e52:	2a00      	cmp	r2, #0
   14e54:	d0fa      	beq.n	14e4c <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   14e56:	6883      	ldr	r3, [r0, #8]
   14e58:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   14e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   14e5e:	4718      	bx	r3
   14e60:	00022a0a 	.word	0x00022a0a
   14e64:	0002273a 	.word	0x0002273a
   14e68:	0001f995 	.word	0x0001f995
   14e6c:	00022a48 	.word	0x00022a48

00014e70 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   14e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e74:	4607      	mov	r7, r0
   14e76:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   14e78:	2500      	movs	r5, #0
   14e7a:	4e14      	ldr	r6, [pc, #80]	; (14ecc <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   14e7c:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   14e7e:	fa27 f205 	lsr.w	r2, r7, r5
   14e82:	f012 0201 	ands.w	r2, r2, #1
   14e86:	d117      	bne.n	14eb8 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   14e88:	fa28 f305 	lsr.w	r3, r8, r5
   14e8c:	07db      	lsls	r3, r3, #31
   14e8e:	d515      	bpl.n	14ebc <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   14e90:	7931      	ldrb	r1, [r6, #4]
   14e92:	6830      	ldr	r0, [r6, #0]
   14e94:	f7ff ffbe 	bl	14e14 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   14e98:	4604      	mov	r4, r0
   14e9a:	b178      	cbz	r0, 14ebc <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   14e9c:	4b0c      	ldr	r3, [pc, #48]	; (14ed0 <dk_set_leds_state.part.0+0x60>)
   14e9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ea2:	9305      	str	r3, [sp, #20]
   14ea4:	2302      	movs	r3, #2
   14ea6:	480b      	ldr	r0, [pc, #44]	; (14ed4 <dk_set_leds_state.part.0+0x64>)
   14ea8:	aa04      	add	r2, sp, #16
   14eaa:	9304      	str	r3, [sp, #16]
   14eac:	f008 fd95 	bl	1d9da <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   14eb0:	4620      	mov	r0, r4
   14eb2:	b006      	add	sp, #24
   14eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   14eb8:	2201      	movs	r2, #1
   14eba:	e7e9      	b.n	14e90 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   14ebc:	3501      	adds	r5, #1
   14ebe:	2d04      	cmp	r5, #4
   14ec0:	f106 0608 	add.w	r6, r6, #8
   14ec4:	d1db      	bne.n	14e7e <dk_set_leds_state.part.0+0xe>
	return 0;
   14ec6:	2400      	movs	r4, #0
   14ec8:	e7f2      	b.n	14eb0 <dk_set_leds_state.part.0+0x40>
   14eca:	bf00      	nop
   14ecc:	0001f5fc 	.word	0x0001f5fc
   14ed0:	00022a5a 	.word	0x00022a5a
   14ed4:	0001edd4 	.word	0x0001edd4

00014ed8 <dk_leds_init>:
{
   14ed8:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   14eda:	2600      	movs	r6, #0
   14edc:	4c11      	ldr	r4, [pc, #68]	; (14f24 <dk_leds_init+0x4c>)
{
   14ede:	b086      	sub	sp, #24
				  spec->dt_flags | extra_flags);
   14ee0:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   14ee2:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   14ee4:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   14ee6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   14eea:	f7ff fee5 	bl	14cb8 <z_impl_gpio_pin_configure>
		if (err) {
   14eee:	4605      	mov	r5, r0
   14ef0:	b950      	cbnz	r0, 14f08 <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   14ef2:	3601      	adds	r6, #1
   14ef4:	2e04      	cmp	r6, #4
   14ef6:	f104 0408 	add.w	r4, r4, #8
   14efa:	d1f1      	bne.n	14ee0 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   14efc:	210f      	movs	r1, #15
}
   14efe:	b006      	add	sp, #24
   14f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14f04:	f7ff bfb4 	b.w	14e70 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   14f08:	4b07      	ldr	r3, [pc, #28]	; (14f28 <dk_leds_init+0x50>)
   14f0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f0e:	9305      	str	r3, [sp, #20]
   14f10:	2302      	movs	r3, #2
   14f12:	4806      	ldr	r0, [pc, #24]	; (14f2c <dk_leds_init+0x54>)
   14f14:	aa04      	add	r2, sp, #16
   14f16:	9304      	str	r3, [sp, #16]
   14f18:	f008 fd5f 	bl	1d9da <z_log_msg_static_create.constprop.0>
}
   14f1c:	4628      	mov	r0, r5
   14f1e:	b006      	add	sp, #24
   14f20:	bd70      	pop	{r4, r5, r6, pc}
   14f22:	bf00      	nop
   14f24:	0001f5fc 	.word	0x0001f5fc
   14f28:	00022a70 	.word	0x00022a70
   14f2c:	0001edd4 	.word	0x0001edd4

00014f30 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   14f30:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   14f32:	2803      	cmp	r0, #3
{
   14f34:	460a      	mov	r2, r1
   14f36:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   14f38:	d90e      	bls.n	14f58 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   14f3a:	4b12      	ldr	r3, [pc, #72]	; (14f84 <dk_set_led+0x54>)
		return -EINVAL;
   14f3c:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   14f40:	9305      	str	r3, [sp, #20]
   14f42:	2302      	movs	r3, #2
   14f44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f48:	480f      	ldr	r0, [pc, #60]	; (14f88 <dk_set_led+0x58>)
   14f4a:	aa04      	add	r2, sp, #16
   14f4c:	9304      	str	r3, [sp, #16]
   14f4e:	f008 fd44 	bl	1d9da <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   14f52:	4620      	mov	r0, r4
   14f54:	b006      	add	sp, #24
   14f56:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   14f58:	4b0c      	ldr	r3, [pc, #48]	; (14f8c <dk_set_led+0x5c>)
   14f5a:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   14f5e:	7909      	ldrb	r1, [r1, #4]
   14f60:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   14f64:	f7ff ff56 	bl	14e14 <gpio_pin_set>
	if (err) {
   14f68:	4604      	mov	r4, r0
   14f6a:	2800      	cmp	r0, #0
   14f6c:	d0f1      	beq.n	14f52 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   14f6e:	4b08      	ldr	r3, [pc, #32]	; (14f90 <dk_set_led+0x60>)
   14f70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f74:	9305      	str	r3, [sp, #20]
   14f76:	2302      	movs	r3, #2
   14f78:	4803      	ldr	r0, [pc, #12]	; (14f88 <dk_set_led+0x58>)
   14f7a:	aa04      	add	r2, sp, #16
   14f7c:	9304      	str	r3, [sp, #16]
   14f7e:	f008 fd2c 	bl	1d9da <z_log_msg_static_create.constprop.0>
   14f82:	e7e6      	b.n	14f52 <dk_set_led+0x22>
   14f84:	00022a8a 	.word	0x00022a8a
   14f88:	0001edd4 	.word	0x0001edd4
   14f8c:	0001f5fc 	.word	0x0001f5fc
   14f90:	00022a5a 	.word	0x00022a5a

00014f94 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   14f94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   14f96:	f7f5 fd4b 	bl	aa30 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   14f9a:	4b07      	ldr	r3, [pc, #28]	; (14fb8 <k_sys_fatal_error_handler+0x24>)
   14f9c:	9305      	str	r3, [sp, #20]
   14f9e:	2302      	movs	r3, #2
   14fa0:	9304      	str	r3, [sp, #16]
   14fa2:	4806      	ldr	r0, [pc, #24]	; (14fbc <k_sys_fatal_error_handler+0x28>)
   14fa4:	2300      	movs	r3, #0
   14fa6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14faa:	aa04      	add	r2, sp, #16
   14fac:	f7f5 fea6 	bl	acfc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   14fb0:	2000      	movs	r0, #0
   14fb2:	f7f7 fda7 	bl	cb04 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   14fb6:	bf00      	nop
   14fb8:	00022ab9 	.word	0x00022ab9
   14fbc:	0001eddc 	.word	0x0001eddc

00014fc0 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   14fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fc4:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   14fc6:	4b15      	ldr	r3, [pc, #84]	; (1501c <tfm_ns_interface_dispatch+0x5c>)
   14fc8:	4604      	mov	r4, r0
   14fca:	f893 8000 	ldrb.w	r8, [r3]
   14fce:	460d      	mov	r5, r1
   14fd0:	4616      	mov	r6, r2
   14fd2:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   14fd4:	f1b8 0f00 	cmp.w	r8, #0
   14fd8:	d115      	bne.n	15006 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   14fda:	4668      	mov	r0, sp
   14fdc:	f007 f8ad 	bl	1c13a <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   14fe0:	463a      	mov	r2, r7
   14fe2:	4631      	mov	r1, r6
   14fe4:	4628      	mov	r0, r5
   14fe6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   14fe8:	47a0      	blx	r4
   14fea:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   14fec:	4668      	mov	r0, sp
   14fee:	f007 f8a5 	bl	1c13c <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   14ff2:	f1b8 0f00 	cmp.w	r8, #0
   14ff6:	d002      	beq.n	14ffe <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   14ff8:	4809      	ldr	r0, [pc, #36]	; (15020 <tfm_ns_interface_dispatch+0x60>)
   14ffa:	f002 fc7b 	bl	178f4 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   14ffe:	4620      	mov	r0, r4
   15000:	b022      	add	sp, #136	; 0x88
   15002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   15006:	f04f 32ff 	mov.w	r2, #4294967295
   1500a:	f04f 33ff 	mov.w	r3, #4294967295
   1500e:	4804      	ldr	r0, [pc, #16]	; (15020 <tfm_ns_interface_dispatch+0x60>)
   15010:	f002 fba0 	bl	17754 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   15014:	2800      	cmp	r0, #0
   15016:	d0e0      	beq.n	14fda <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   15018:	241f      	movs	r4, #31
   1501a:	e7f0      	b.n	14ffe <tfm_ns_interface_dispatch+0x3e>
   1501c:	20009baf 	.word	0x20009baf
   15020:	20008538 	.word	0x20008538

00015024 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   15024:	b530      	push	{r4, r5, lr}
   15026:	b095      	sub	sp, #84	; 0x54
   15028:	4605      	mov	r5, r0
   1502a:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1502c:	2230      	movs	r2, #48	; 0x30
   1502e:	2100      	movs	r1, #0
   15030:	a808      	add	r0, sp, #32
   15032:	f007 f915 	bl	1c260 <memset>
   15036:	233f      	movs	r3, #63	; 0x3f
   15038:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1503a:	ab07      	add	r3, sp, #28
   1503c:	9303      	str	r3, [sp, #12]
   1503e:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   15040:	9406      	str	r4, [sp, #24]
   15042:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   15046:	b154      	cbz	r4, 1505e <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   15048:	2301      	movs	r3, #1
   1504a:	aa05      	add	r2, sp, #20
   1504c:	9200      	str	r2, [sp, #0]
   1504e:	2100      	movs	r1, #0
   15050:	4804      	ldr	r0, [pc, #16]	; (15064 <psa_generate_random+0x40>)
   15052:	9301      	str	r3, [sp, #4]
   15054:	aa03      	add	r2, sp, #12
   15056:	f000 f807 	bl	15068 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1505a:	b015      	add	sp, #84	; 0x54
   1505c:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1505e:	4620      	mov	r0, r4
   15060:	e7fb      	b.n	1505a <psa_generate_random+0x36>
   15062:	bf00      	nop
   15064:	40000100 	.word	0x40000100

00015068 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   15068:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1506a:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1506e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   15072:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   15074:	d20d      	bcs.n	15092 <psa_call+0x2a>
        (type < INT16_MIN) ||
   15076:	ea43 0504 	orr.w	r5, r3, r4
   1507a:	2dff      	cmp	r5, #255	; 0xff
   1507c:	d809      	bhi.n	15092 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1507e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   15082:	4613      	mov	r3, r2
   15084:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   15088:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1508a:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1508c:	4803      	ldr	r0, [pc, #12]	; (1509c <psa_call+0x34>)
   1508e:	f7ff bf97 	b.w	14fc0 <tfm_ns_interface_dispatch>
}
   15092:	f06f 0080 	mvn.w	r0, #128	; 0x80
   15096:	bc30      	pop	{r4, r5}
   15098:	4770      	bx	lr
   1509a:	bf00      	nop
   1509c:	00007c21 	.word	0x00007c21

000150a0 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   150a0:	2300      	movs	r3, #0
{
   150a2:	b507      	push	{r0, r1, r2, lr}
   150a4:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   150a6:	9300      	str	r3, [sp, #0]
   150a8:	4601      	mov	r1, r0
   150aa:	4803      	ldr	r0, [pc, #12]	; (150b8 <psa_connect+0x18>)
   150ac:	f7ff ff88 	bl	14fc0 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   150b0:	b003      	add	sp, #12
   150b2:	f85d fb04 	ldr.w	pc, [sp], #4
   150b6:	bf00      	nop
   150b8:	00007c19 	.word	0x00007c19

000150bc <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   150bc:	2300      	movs	r3, #0
{
   150be:	b507      	push	{r0, r1, r2, lr}
   150c0:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   150c2:	461a      	mov	r2, r3
   150c4:	9300      	str	r3, [sp, #0]
   150c6:	4803      	ldr	r0, [pc, #12]	; (150d4 <psa_close+0x18>)
   150c8:	f7ff ff7a 	bl	14fc0 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   150cc:	b003      	add	sp, #12
   150ce:	f85d fb04 	ldr.w	pc, [sp], #4
   150d2:	bf00      	nop
   150d4:	00007c11 	.word	0x00007c11

000150d8 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   150d8:	4b04      	ldr	r3, [pc, #16]	; (150ec <SystemCoreClockUpdate+0x14>)
   150da:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   150de:	4b04      	ldr	r3, [pc, #16]	; (150f0 <SystemCoreClockUpdate+0x18>)
   150e0:	f002 0203 	and.w	r2, r2, #3
   150e4:	40d3      	lsrs	r3, r2
   150e6:	4a03      	ldr	r2, [pc, #12]	; (150f4 <SystemCoreClockUpdate+0x1c>)
   150e8:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   150ea:	4770      	bx	lr
   150ec:	40005000 	.word	0x40005000
   150f0:	07a12000 	.word	0x07a12000
   150f4:	200082c4 	.word	0x200082c4

000150f8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   150f8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   150fa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   150fc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   150fe:	fab2 f382 	clz	r3, r2
   15102:	f1c3 031f 	rsb	r3, r3, #31
   15106:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   15108:	fa05 f403 	lsl.w	r4, r5, r3
   1510c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15110:	e8d0 6fef 	ldaex	r6, [r0]
   15114:	4296      	cmp	r6, r2
   15116:	d104      	bne.n	15122 <nrfx_flag32_alloc+0x2a>
   15118:	e8c0 4fec 	stlex	ip, r4, [r0]
   1511c:	f1bc 0f00 	cmp.w	ip, #0
   15120:	d1f6      	bne.n	15110 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15122:	d1eb      	bne.n	150fc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   15124:	4801      	ldr	r0, [pc, #4]	; (1512c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   15126:	700b      	strb	r3, [r1, #0]
}
   15128:	bd70      	pop	{r4, r5, r6, pc}
   1512a:	bf00      	nop
   1512c:	0bad0000 	.word	0x0bad0000

00015130 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   15130:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   15132:	6803      	ldr	r3, [r0, #0]
   15134:	40cb      	lsrs	r3, r1
   15136:	07db      	lsls	r3, r3, #31
   15138:	d410      	bmi.n	1515c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1513a:	2301      	movs	r3, #1
   1513c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1513e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   15140:	ea43 0102 	orr.w	r1, r3, r2
   15144:	e8d0 4fef 	ldaex	r4, [r0]
   15148:	4294      	cmp	r4, r2
   1514a:	d104      	bne.n	15156 <nrfx_flag32_free+0x26>
   1514c:	e8c0 1fec 	stlex	ip, r1, [r0]
   15150:	f1bc 0f00 	cmp.w	ip, #0
   15154:	d1f6      	bne.n	15144 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15156:	d1f2      	bne.n	1513e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   15158:	4801      	ldr	r0, [pc, #4]	; (15160 <nrfx_flag32_free+0x30>)
}
   1515a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1515c:	4801      	ldr	r0, [pc, #4]	; (15164 <nrfx_flag32_free+0x34>)
   1515e:	e7fc      	b.n	1515a <nrfx_flag32_free+0x2a>
   15160:	0bad0000 	.word	0x0bad0000
   15164:	0bad0004 	.word	0x0bad0004

00015168 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   15168:	2200      	movs	r2, #0
{
   1516a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1516c:	4b62      	ldr	r3, [pc, #392]	; (152f8 <clock_stop+0x190>)
    switch (domain)
   1516e:	2803      	cmp	r0, #3
   15170:	d838      	bhi.n	151e4 <clock_stop+0x7c>
   15172:	e8df f000 	tbb	[pc, r0]
   15176:	0d02      	.short	0x0d02
   15178:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1517a:	2102      	movs	r1, #2
   1517c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15180:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15184:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15188:	2201      	movs	r2, #1
   1518a:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1518c:	2400      	movs	r4, #0
   1518e:	e009      	b.n	151a4 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   15190:	2101      	movs	r1, #1
   15192:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15196:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1519a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1519e:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151a2:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   151a4:	2301      	movs	r3, #1
   151a6:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   151aa:	2803      	cmp	r0, #3
   151ac:	f200 8093 	bhi.w	152d6 <clock_stop+0x16e>
   151b0:	e8df f000 	tbb	[pc, r0]
   151b4:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   151b8:	f44f 7100 	mov.w	r1, #512	; 0x200
   151bc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151c0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   151c4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151c8:	2201      	movs	r2, #1
   151ca:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   151cc:	e7de      	b.n	1518c <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   151ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   151d2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151d6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   151da:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151de:	2201      	movs	r2, #1
   151e0:	61da      	str	r2, [r3, #28]
   151e2:	e7d3      	b.n	1518c <clock_stop+0x24>
            NRFX_ASSERT(0);
   151e4:	4945      	ldr	r1, [pc, #276]	; (152fc <clock_stop+0x194>)
   151e6:	4846      	ldr	r0, [pc, #280]	; (15300 <clock_stop+0x198>)
   151e8:	23d8      	movs	r3, #216	; 0xd8
   151ea:	4a46      	ldr	r2, [pc, #280]	; (15304 <clock_stop+0x19c>)
   151ec:	f006 f81e 	bl	1b22c <assert_print>
   151f0:	21d8      	movs	r1, #216	; 0xd8
   151f2:	4844      	ldr	r0, [pc, #272]	; (15304 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   151f4:	f006 f813 	bl	1b21e <assert_post_action>
    switch (domain)
   151f8:	f242 7510 	movw	r5, #10000	; 0x2710
   151fc:	4e3e      	ldr	r6, [pc, #248]	; (152f8 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   151fe:	b194      	cbz	r4, 15226 <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15200:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   15204:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   15208:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1520a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1520e:	03d9      	lsls	r1, r3, #15
   15210:	d507      	bpl.n	15222 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   15212:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15216:	2801      	cmp	r0, #1
   15218:	d103      	bne.n	15222 <clock_stop+0xba>
   1521a:	f008 fc35 	bl	1da88 <nrfx_busy_wait>
   1521e:	3d01      	subs	r5, #1
   15220:	d1ed      	bne.n	151fe <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15222:	b002      	add	sp, #8
   15224:	bd70      	pop	{r4, r5, r6, pc}
   15226:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1522a:	03da      	lsls	r2, r3, #15
   1522c:	d5f9      	bpl.n	15222 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1522e:	2001      	movs	r0, #1
   15230:	f008 fc2a 	bl	1da88 <nrfx_busy_wait>
   15234:	3d01      	subs	r5, #1
   15236:	d1f6      	bne.n	15226 <clock_stop+0xbe>
   15238:	e7f3      	b.n	15222 <clock_stop+0xba>
    switch (domain)
   1523a:	f242 7510 	movw	r5, #10000	; 0x2710
   1523e:	4e2e      	ldr	r6, [pc, #184]	; (152f8 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   15240:	b18c      	cbz	r4, 15266 <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15242:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15246:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1524a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1524c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15250:	03db      	lsls	r3, r3, #15
   15252:	d5e6      	bpl.n	15222 <clock_stop+0xba>
   15254:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15258:	2801      	cmp	r0, #1
   1525a:	d1e2      	bne.n	15222 <clock_stop+0xba>
   1525c:	f008 fc14 	bl	1da88 <nrfx_busy_wait>
   15260:	3d01      	subs	r5, #1
   15262:	d1ed      	bne.n	15240 <clock_stop+0xd8>
   15264:	e7dd      	b.n	15222 <clock_stop+0xba>
   15266:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1526a:	03d8      	lsls	r0, r3, #15
   1526c:	d5d9      	bpl.n	15222 <clock_stop+0xba>
   1526e:	2001      	movs	r0, #1
   15270:	f008 fc0a 	bl	1da88 <nrfx_busy_wait>
   15274:	3d01      	subs	r5, #1
   15276:	d1f6      	bne.n	15266 <clock_stop+0xfe>
   15278:	e7d3      	b.n	15222 <clock_stop+0xba>
    switch (domain)
   1527a:	f242 7510 	movw	r5, #10000	; 0x2710
   1527e:	4e1e      	ldr	r6, [pc, #120]	; (152f8 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   15280:	b18c      	cbz	r4, 152a6 <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   15282:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15286:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1528a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1528c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15290:	03d9      	lsls	r1, r3, #15
   15292:	d5c6      	bpl.n	15222 <clock_stop+0xba>
   15294:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15298:	2801      	cmp	r0, #1
   1529a:	d1c2      	bne.n	15222 <clock_stop+0xba>
   1529c:	f008 fbf4 	bl	1da88 <nrfx_busy_wait>
   152a0:	3d01      	subs	r5, #1
   152a2:	d1ed      	bne.n	15280 <clock_stop+0x118>
   152a4:	e7bd      	b.n	15222 <clock_stop+0xba>
   152a6:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   152aa:	03da      	lsls	r2, r3, #15
   152ac:	d5b9      	bpl.n	15222 <clock_stop+0xba>
   152ae:	2001      	movs	r0, #1
   152b0:	f008 fbea 	bl	1da88 <nrfx_busy_wait>
   152b4:	3d01      	subs	r5, #1
   152b6:	d1f6      	bne.n	152a6 <clock_stop+0x13e>
   152b8:	e7b3      	b.n	15222 <clock_stop+0xba>
    switch (domain)
   152ba:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   152be:	4e0e      	ldr	r6, [pc, #56]	; (152f8 <clock_stop+0x190>)
   152c0:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   152c4:	03db      	lsls	r3, r3, #15
   152c6:	d5ac      	bpl.n	15222 <clock_stop+0xba>
   152c8:	b984      	cbnz	r4, 152ec <clock_stop+0x184>
   152ca:	2001      	movs	r0, #1
   152cc:	f008 fbdc 	bl	1da88 <nrfx_busy_wait>
   152d0:	3d01      	subs	r5, #1
   152d2:	d1f5      	bne.n	152c0 <clock_stop+0x158>
   152d4:	e7a5      	b.n	15222 <clock_stop+0xba>
            NRFX_ASSERT(0);
   152d6:	4909      	ldr	r1, [pc, #36]	; (152fc <clock_stop+0x194>)
   152d8:	4809      	ldr	r0, [pc, #36]	; (15300 <clock_stop+0x198>)
   152da:	f240 3347 	movw	r3, #839	; 0x347
   152de:	4a0a      	ldr	r2, [pc, #40]	; (15308 <clock_stop+0x1a0>)
   152e0:	f005 ffa4 	bl	1b22c <assert_print>
   152e4:	f240 3147 	movw	r1, #839	; 0x347
   152e8:	4807      	ldr	r0, [pc, #28]	; (15308 <clock_stop+0x1a0>)
   152ea:	e783      	b.n	151f4 <clock_stop+0x8c>
   152ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   152f0:	2801      	cmp	r0, #1
   152f2:	d0eb      	beq.n	152cc <clock_stop+0x164>
   152f4:	e795      	b.n	15222 <clock_stop+0xba>
   152f6:	bf00      	nop
   152f8:	40005000 	.word	0x40005000
   152fc:	00022960 	.word	0x00022960
   15300:	0001f995 	.word	0x0001f995
   15304:	00022ad6 	.word	0x00022ad6
   15308:	00022b13 	.word	0x00022b13

0001530c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1530c:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1530e:	b958      	cbnz	r0, 15328 <nrfx_clock_init+0x1c>
   15310:	490a      	ldr	r1, [pc, #40]	; (1533c <nrfx_clock_init+0x30>)
   15312:	480b      	ldr	r0, [pc, #44]	; (15340 <nrfx_clock_init+0x34>)
   15314:	f240 1315 	movw	r3, #277	; 0x115
   15318:	4a0a      	ldr	r2, [pc, #40]	; (15344 <nrfx_clock_init+0x38>)
   1531a:	f005 ff87 	bl	1b22c <assert_print>
   1531e:	f240 1115 	movw	r1, #277	; 0x115
   15322:	4808      	ldr	r0, [pc, #32]	; (15344 <nrfx_clock_init+0x38>)
   15324:	f005 ff7b 	bl	1b21e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15328:	4b07      	ldr	r3, [pc, #28]	; (15348 <nrfx_clock_init+0x3c>)
   1532a:	791a      	ldrb	r2, [r3, #4]
   1532c:	b922      	cbnz	r2, 15338 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1532e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   15330:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   15332:	4806      	ldr	r0, [pc, #24]	; (1534c <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   15334:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15336:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15338:	4805      	ldr	r0, [pc, #20]	; (15350 <nrfx_clock_init+0x44>)
    return err_code;
   1533a:	e7fc      	b.n	15336 <nrfx_clock_init+0x2a>
   1533c:	00022b47 	.word	0x00022b47
   15340:	0001f995 	.word	0x0001f995
   15344:	00022ad6 	.word	0x00022ad6
   15348:	20009a5c 	.word	0x20009a5c
   1534c:	0bad0000 	.word	0x0bad0000
   15350:	0bad000c 	.word	0x0bad000c

00015354 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15354:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15356:	4b0f      	ldr	r3, [pc, #60]	; (15394 <nrfx_clock_enable+0x40>)
   15358:	791b      	ldrb	r3, [r3, #4]
   1535a:	b95b      	cbnz	r3, 15374 <nrfx_clock_enable+0x20>
   1535c:	490e      	ldr	r1, [pc, #56]	; (15398 <nrfx_clock_enable+0x44>)
   1535e:	480f      	ldr	r0, [pc, #60]	; (1539c <nrfx_clock_enable+0x48>)
   15360:	f44f 7397 	mov.w	r3, #302	; 0x12e
   15364:	4a0e      	ldr	r2, [pc, #56]	; (153a0 <nrfx_clock_enable+0x4c>)
   15366:	f005 ff61 	bl	1b22c <assert_print>
   1536a:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1536e:	480c      	ldr	r0, [pc, #48]	; (153a0 <nrfx_clock_enable+0x4c>)
   15370:	f005 ff55 	bl	1b21e <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15374:	2005      	movs	r0, #5
   15376:	f7f6 ff2f 	bl	c1d8 <arch_irq_is_enabled>
   1537a:	b910      	cbnz	r0, 15382 <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1537c:	2005      	movs	r0, #5
   1537e:	f7f6 ff09 	bl	c194 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15382:	2201      	movs	r2, #1
   15384:	4b07      	ldr	r3, [pc, #28]	; (153a4 <nrfx_clock_enable+0x50>)
   15386:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   1538a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1538e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15392:	bd08      	pop	{r3, pc}
   15394:	20009a5c 	.word	0x20009a5c
   15398:	00022b55 	.word	0x00022b55
   1539c:	0001f995 	.word	0x0001f995
   153a0:	00022ad6 	.word	0x00022ad6
   153a4:	40005000 	.word	0x40005000

000153a8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   153a8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   153aa:	4b38      	ldr	r3, [pc, #224]	; (1548c <nrfx_clock_start+0xe4>)
   153ac:	791b      	ldrb	r3, [r3, #4]
   153ae:	b95b      	cbnz	r3, 153c8 <nrfx_clock_start+0x20>
   153b0:	4937      	ldr	r1, [pc, #220]	; (15490 <nrfx_clock_start+0xe8>)
   153b2:	f44f 73b4 	mov.w	r3, #360	; 0x168
   153b6:	4a37      	ldr	r2, [pc, #220]	; (15494 <nrfx_clock_start+0xec>)
   153b8:	4837      	ldr	r0, [pc, #220]	; (15498 <nrfx_clock_start+0xf0>)
   153ba:	f005 ff37 	bl	1b22c <assert_print>
   153be:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   153c2:	4834      	ldr	r0, [pc, #208]	; (15494 <nrfx_clock_start+0xec>)
   153c4:	f005 ff2b 	bl	1b21e <assert_post_action>
    switch (domain)
   153c8:	4b34      	ldr	r3, [pc, #208]	; (1549c <nrfx_clock_start+0xf4>)
   153ca:	2803      	cmp	r0, #3
   153cc:	d853      	bhi.n	15476 <nrfx_clock_start+0xce>
   153ce:	e8df f000 	tbb	[pc, r0]
   153d2:	3002      	.short	0x3002
   153d4:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   153d6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   153da:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   153de:	03c9      	lsls	r1, r1, #15
   153e0:	d511      	bpl.n	15406 <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   153e2:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   153e6:	2b02      	cmp	r3, #2
   153e8:	d11c      	bne.n	15424 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   153ea:	4a2c      	ldr	r2, [pc, #176]	; (1549c <nrfx_clock_start+0xf4>)
   153ec:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   153f0:	2300      	movs	r3, #0
   153f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   153f6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   153fa:	2302      	movs	r3, #2
   153fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15400:	2301      	movs	r3, #1
   15402:	6093      	str	r3, [r2, #8]
}
   15404:	e00d      	b.n	15422 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   15406:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1540a:	07d2      	lsls	r2, r2, #31
   1540c:	d50f      	bpl.n	1542e <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1540e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   15412:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   15416:	3a01      	subs	r2, #1
   15418:	2a01      	cmp	r2, #1
   1541a:	d805      	bhi.n	15428 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1541c:	2202      	movs	r2, #2
   1541e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   15422:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   15424:	2b01      	cmp	r3, #1
   15426:	d002      	beq.n	1542e <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   15428:	2000      	movs	r0, #0
   1542a:	f7ff fe9d 	bl	15168 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1542e:	2301      	movs	r3, #1
   15430:	e7db      	b.n	153ea <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15432:	2200      	movs	r2, #0
   15434:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15438:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1543c:	2201      	movs	r2, #1
   1543e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15442:	601a      	str	r2, [r3, #0]
}
   15444:	e7ed      	b.n	15422 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15446:	2200      	movs	r2, #0
   15448:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1544c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   15450:	f44f 7200 	mov.w	r2, #512	; 0x200
   15454:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15458:	2201      	movs	r2, #1
   1545a:	621a      	str	r2, [r3, #32]
}
   1545c:	e7e1      	b.n	15422 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1545e:	2200      	movs	r2, #0
   15460:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15464:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15468:	f44f 7280 	mov.w	r2, #256	; 0x100
   1546c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15470:	2201      	movs	r2, #1
   15472:	619a      	str	r2, [r3, #24]
}
   15474:	e7d5      	b.n	15422 <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   15476:	490a      	ldr	r1, [pc, #40]	; (154a0 <nrfx_clock_start+0xf8>)
   15478:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1547c:	4a05      	ldr	r2, [pc, #20]	; (15494 <nrfx_clock_start+0xec>)
   1547e:	4806      	ldr	r0, [pc, #24]	; (15498 <nrfx_clock_start+0xf0>)
   15480:	f005 fed4 	bl	1b22c <assert_print>
   15484:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   15488:	e79b      	b.n	153c2 <nrfx_clock_start+0x1a>
   1548a:	bf00      	nop
   1548c:	20009a5c 	.word	0x20009a5c
   15490:	00022b55 	.word	0x00022b55
   15494:	00022ad6 	.word	0x00022ad6
   15498:	0001f995 	.word	0x0001f995
   1549c:	40005000 	.word	0x40005000
   154a0:	00022960 	.word	0x00022960

000154a4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   154a4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   154a6:	4b09      	ldr	r3, [pc, #36]	; (154cc <nrfx_clock_stop+0x28>)
   154a8:	791b      	ldrb	r3, [r3, #4]
   154aa:	b95b      	cbnz	r3, 154c4 <nrfx_clock_stop+0x20>
   154ac:	4908      	ldr	r1, [pc, #32]	; (154d0 <nrfx_clock_stop+0x2c>)
   154ae:	4809      	ldr	r0, [pc, #36]	; (154d4 <nrfx_clock_stop+0x30>)
   154b0:	f240 13ad 	movw	r3, #429	; 0x1ad
   154b4:	4a08      	ldr	r2, [pc, #32]	; (154d8 <nrfx_clock_stop+0x34>)
   154b6:	f005 feb9 	bl	1b22c <assert_print>
   154ba:	f240 11ad 	movw	r1, #429	; 0x1ad
   154be:	4806      	ldr	r0, [pc, #24]	; (154d8 <nrfx_clock_stop+0x34>)
   154c0:	f005 fead 	bl	1b21e <assert_post_action>
    clock_stop(domain);
}
   154c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   154c8:	f7ff be4e 	b.w	15168 <clock_stop>
   154cc:	20009a5c 	.word	0x20009a5c
   154d0:	00022b55 	.word	0x00022b55
   154d4:	0001f995 	.word	0x0001f995
   154d8:	00022ad6 	.word	0x00022ad6

000154dc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   154dc:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   154de:	4b28      	ldr	r3, [pc, #160]	; (15580 <nrfx_power_clock_irq_handler+0xa4>)
   154e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   154e4:	b152      	cbz	r2, 154fc <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154e6:	2000      	movs	r0, #0
   154e8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   154ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   154f0:	2201      	movs	r2, #1
   154f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   154f6:	4b23      	ldr	r3, [pc, #140]	; (15584 <nrfx_power_clock_irq_handler+0xa8>)
   154f8:	681b      	ldr	r3, [r3, #0]
   154fa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   154fc:	4b20      	ldr	r3, [pc, #128]	; (15580 <nrfx_power_clock_irq_handler+0xa4>)
   154fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   15502:	b18a      	cbz	r2, 15528 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15504:	2200      	movs	r2, #0
   15506:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1550a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1550e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15512:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   15516:	f002 0203 	and.w	r2, r2, #3
   1551a:	2a01      	cmp	r2, #1
   1551c:	f04f 0102 	mov.w	r1, #2
   15520:	d126      	bne.n	15570 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15522:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15526:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15528:	4b15      	ldr	r3, [pc, #84]	; (15580 <nrfx_power_clock_irq_handler+0xa4>)
   1552a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1552e:	b162      	cbz	r2, 1554a <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15530:	2200      	movs	r2, #0
   15532:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15536:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1553a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1553e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   15542:	4b10      	ldr	r3, [pc, #64]	; (15584 <nrfx_power_clock_irq_handler+0xa8>)
   15544:	2004      	movs	r0, #4
   15546:	681b      	ldr	r3, [r3, #0]
   15548:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1554a:	4b0d      	ldr	r3, [pc, #52]	; (15580 <nrfx_power_clock_irq_handler+0xa4>)
   1554c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   15550:	b1aa      	cbz	r2, 1557e <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15552:	2200      	movs	r2, #0
   15554:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15558:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1555c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15560:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   15564:	4b07      	ldr	r3, [pc, #28]	; (15584 <nrfx_power_clock_irq_handler+0xa8>)
   15566:	2005      	movs	r0, #5
    }
#endif
}
   15568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1556c:	681b      	ldr	r3, [r3, #0]
   1556e:	4718      	bx	r3
   15570:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   15574:	4b03      	ldr	r3, [pc, #12]	; (15584 <nrfx_power_clock_irq_handler+0xa8>)
   15576:	2001      	movs	r0, #1
   15578:	681b      	ldr	r3, [r3, #0]
   1557a:	4798      	blx	r3
   1557c:	e7d4      	b.n	15528 <nrfx_power_clock_irq_handler+0x4c>
}
   1557e:	bd10      	pop	{r4, pc}
   15580:	40005000 	.word	0x40005000
   15584:	20009a5c 	.word	0x20009a5c

00015588 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   15588:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1558a:	4801      	ldr	r0, [pc, #4]	; (15590 <nrfx_dppi_channel_alloc+0x8>)
   1558c:	f7ff bdb4 	b.w	150f8 <nrfx_flag32_alloc>
   15590:	200082c8 	.word	0x200082c8

00015594 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   15594:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   15596:	4a04      	ldr	r2, [pc, #16]	; (155a8 <nrfx_dppi_channel_free+0x14>)
   15598:	4083      	lsls	r3, r0
{
   1559a:	4601      	mov	r1, r0
   1559c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   155a0:	4802      	ldr	r0, [pc, #8]	; (155ac <nrfx_dppi_channel_free+0x18>)
   155a2:	f7ff bdc5 	b.w	15130 <nrfx_flag32_free>
   155a6:	bf00      	nop
   155a8:	40017000 	.word	0x40017000
   155ac:	200082c8 	.word	0x200082c8

000155b0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   155b0:	4b03      	ldr	r3, [pc, #12]	; (155c0 <pin_in_use_by_te+0x10>)
   155b2:	3008      	adds	r0, #8
   155b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   155b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   155bc:	4770      	bx	lr
   155be:	bf00      	nop
   155c0:	200082cc 	.word	0x200082cc

000155c4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   155c4:	4b04      	ldr	r3, [pc, #16]	; (155d8 <pin_has_trigger+0x14>)
   155c6:	3008      	adds	r0, #8
   155c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   155cc:	f010 001c 	ands.w	r0, r0, #28
   155d0:	bf18      	it	ne
   155d2:	2001      	movne	r0, #1
   155d4:	4770      	bx	lr
   155d6:	bf00      	nop
   155d8:	200082cc 	.word	0x200082cc

000155dc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   155dc:	4b03      	ldr	r3, [pc, #12]	; (155ec <pin_is_output+0x10>)
   155de:	3008      	adds	r0, #8
   155e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   155e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   155e8:	4770      	bx	lr
   155ea:	bf00      	nop
   155ec:	200082cc 	.word	0x200082cc

000155f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   155f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   155f2:	4c0d      	ldr	r4, [pc, #52]	; (15628 <call_handler+0x38>)
   155f4:	f100 0308 	add.w	r3, r0, #8
   155f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   155fc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   155fe:	05da      	lsls	r2, r3, #23
{
   15600:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   15602:	d507      	bpl.n	15614 <call_handler+0x24>
   15604:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   15608:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1560c:	6852      	ldr	r2, [r2, #4]
   1560e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   15612:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   15614:	68a3      	ldr	r3, [r4, #8]
   15616:	b12b      	cbz	r3, 15624 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   15618:	4631      	mov	r1, r6
   1561a:	4628      	mov	r0, r5
   1561c:	68e2      	ldr	r2, [r4, #12]
    }
}
   1561e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   15622:	4718      	bx	r3
}
   15624:	bd70      	pop	{r4, r5, r6, pc}
   15626:	bf00      	nop
   15628:	200082cc 	.word	0x200082cc

0001562c <release_handler>:
{
   1562c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1562e:	4a18      	ldr	r2, [pc, #96]	; (15690 <release_handler+0x64>)
   15630:	3008      	adds	r0, #8
   15632:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   15636:	05d9      	lsls	r1, r3, #23
   15638:	d51d      	bpl.n	15676 <release_handler+0x4a>
   1563a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1563e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   15642:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   15646:	2000      	movs	r0, #0
   15648:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1564c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   15650:	f413 7f80 	tst.w	r3, #256	; 0x100
   15654:	d003      	beq.n	1565e <release_handler+0x32>
   15656:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1565a:	4299      	cmp	r1, r3
   1565c:	d00b      	beq.n	15676 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1565e:	3001      	adds	r0, #1
   15660:	2830      	cmp	r0, #48	; 0x30
   15662:	d1f3      	bne.n	1564c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   15664:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   15666:	480b      	ldr	r0, [pc, #44]	; (15694 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   15668:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1566c:	f7ff fd60 	bl	15130 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   15670:	4b09      	ldr	r3, [pc, #36]	; (15698 <release_handler+0x6c>)
   15672:	4298      	cmp	r0, r3
   15674:	d100      	bne.n	15678 <release_handler+0x4c>
}
   15676:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   15678:	4908      	ldr	r1, [pc, #32]	; (1569c <release_handler+0x70>)
   1567a:	4809      	ldr	r0, [pc, #36]	; (156a0 <release_handler+0x74>)
   1567c:	f44f 7399 	mov.w	r3, #306	; 0x132
   15680:	4a08      	ldr	r2, [pc, #32]	; (156a4 <release_handler+0x78>)
   15682:	f005 fdd3 	bl	1b22c <assert_print>
   15686:	f44f 7199 	mov.w	r1, #306	; 0x132
   1568a:	4806      	ldr	r0, [pc, #24]	; (156a4 <release_handler+0x78>)
   1568c:	f005 fdc7 	bl	1b21e <assert_post_action>
   15690:	200082cc 	.word	0x200082cc
   15694:	20008340 	.word	0x20008340
   15698:	0bad0000 	.word	0x0bad0000
   1569c:	0001ff47 	.word	0x0001ff47
   156a0:	0001f995 	.word	0x0001f995
   156a4:	00022b73 	.word	0x00022b73

000156a8 <pin_handler_trigger_uninit>:
{
   156a8:	b538      	push	{r3, r4, r5, lr}
   156aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   156ac:	f7ff ff80 	bl	155b0 <pin_in_use_by_te>
   156b0:	4c0b      	ldr	r4, [pc, #44]	; (156e0 <pin_handler_trigger_uninit+0x38>)
   156b2:	f102 0508 	add.w	r5, r2, #8
   156b6:	b160      	cbz	r0, 156d2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   156b8:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   156ba:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   156be:	0b5b      	lsrs	r3, r3, #13
   156c0:	009b      	lsls	r3, r3, #2
   156c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   156c6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   156ca:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   156ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   156d2:	4610      	mov	r0, r2
   156d4:	f7ff ffaa 	bl	1562c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   156d8:	2300      	movs	r3, #0
   156da:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   156de:	bd38      	pop	{r3, r4, r5, pc}
   156e0:	200082cc 	.word	0x200082cc

000156e4 <nrf_gpio_pin_port_decode>:
{
   156e4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   156e6:	6802      	ldr	r2, [r0, #0]
{
   156e8:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   156ea:	4610      	mov	r0, r2
   156ec:	f008 f9ce 	bl	1da8c <nrf_gpio_pin_present_check>
   156f0:	b958      	cbnz	r0, 1570a <nrf_gpio_pin_port_decode+0x26>
   156f2:	4910      	ldr	r1, [pc, #64]	; (15734 <nrf_gpio_pin_port_decode+0x50>)
   156f4:	f240 2347 	movw	r3, #583	; 0x247
   156f8:	4a0f      	ldr	r2, [pc, #60]	; (15738 <nrf_gpio_pin_port_decode+0x54>)
   156fa:	4810      	ldr	r0, [pc, #64]	; (1573c <nrf_gpio_pin_port_decode+0x58>)
   156fc:	f005 fd96 	bl	1b22c <assert_print>
   15700:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   15704:	480c      	ldr	r0, [pc, #48]	; (15738 <nrf_gpio_pin_port_decode+0x54>)
   15706:	f005 fd8a 	bl	1b21e <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1570a:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1570e:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   15710:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15712:	d00b      	beq.n	1572c <nrf_gpio_pin_port_decode+0x48>
   15714:	2a01      	cmp	r2, #1
   15716:	d00b      	beq.n	15730 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   15718:	4909      	ldr	r1, [pc, #36]	; (15740 <nrf_gpio_pin_port_decode+0x5c>)
   1571a:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1571e:	4a06      	ldr	r2, [pc, #24]	; (15738 <nrf_gpio_pin_port_decode+0x54>)
   15720:	4806      	ldr	r0, [pc, #24]	; (1573c <nrf_gpio_pin_port_decode+0x58>)
   15722:	f005 fd83 	bl	1b22c <assert_print>
   15726:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1572a:	e7eb      	b.n	15704 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1572c:	4805      	ldr	r0, [pc, #20]	; (15744 <nrf_gpio_pin_port_decode+0x60>)
}
   1572e:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15730:	4805      	ldr	r0, [pc, #20]	; (15748 <nrf_gpio_pin_port_decode+0x64>)
   15732:	e7fc      	b.n	1572e <nrf_gpio_pin_port_decode+0x4a>
   15734:	000221e8 	.word	0x000221e8
   15738:	000221b5 	.word	0x000221b5
   1573c:	0001f995 	.word	0x0001f995
   15740:	00022960 	.word	0x00022960
   15744:	40842500 	.word	0x40842500
   15748:	40842800 	.word	0x40842800

0001574c <nrfx_gpiote_input_configure>:
{
   1574c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1574e:	4604      	mov	r4, r0
   15750:	4617      	mov	r7, r2
   15752:	461d      	mov	r5, r3
   15754:	b085      	sub	sp, #20
    if (p_input_config)
   15756:	b1d9      	cbz	r1, 15790 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   15758:	f008 f9a9 	bl	1daae <pin_is_task_output>
   1575c:	bb00      	cbnz	r0, 157a0 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1575e:	460b      	mov	r3, r1
   15760:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   15764:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   15768:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1576c:	f10d 020f 	add.w	r2, sp, #15
   15770:	f10d 010e 	add.w	r1, sp, #14
   15774:	4620      	mov	r0, r4
   15776:	f008 f9a5 	bl	1dac4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1577a:	4a44      	ldr	r2, [pc, #272]	; (1588c <nrfx_gpiote_input_configure+0x140>)
   1577c:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   15780:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   15784:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   15788:	f043 0301 	orr.w	r3, r3, #1
   1578c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   15790:	b36f      	cbz	r7, 157ee <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   15792:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   15794:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   15796:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   15798:	f7ff ff20 	bl	155dc <pin_is_output>
   1579c:	b110      	cbz	r0, 157a4 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1579e:	b1da      	cbz	r2, 157d8 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   157a0:	483b      	ldr	r0, [pc, #236]	; (15890 <nrfx_gpiote_input_configure+0x144>)
   157a2:	e026      	b.n	157f2 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   157a4:	4839      	ldr	r0, [pc, #228]	; (1588c <nrfx_gpiote_input_configure+0x140>)
   157a6:	f104 0c08 	add.w	ip, r4, #8
   157aa:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   157ae:	f021 0120 	bic.w	r1, r1, #32
   157b2:	04c9      	lsls	r1, r1, #19
   157b4:	0cc9      	lsrs	r1, r1, #19
   157b6:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   157ba:	b16a      	cbz	r2, 157d8 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   157bc:	2e03      	cmp	r6, #3
   157be:	d8ef      	bhi.n	157a0 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   157c0:	687b      	ldr	r3, [r7, #4]
   157c2:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   157c4:	00ba      	lsls	r2, r7, #2
   157c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   157ca:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   157ce:	b996      	cbnz	r6, 157f6 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   157d0:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   157d4:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   157d8:	4a2c      	ldr	r2, [pc, #176]	; (1588c <nrfx_gpiote_input_configure+0x140>)
   157da:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   157de:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   157e2:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   157e6:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   157ea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   157ee:	bb15      	cbnz	r5, 15836 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   157f0:	4828      	ldr	r0, [pc, #160]	; (15894 <nrfx_gpiote_input_configure+0x148>)
}
   157f2:	b005      	add	sp, #20
   157f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   157f6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   157fa:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   157fe:	f023 0303 	bic.w	r3, r3, #3
   15802:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15806:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1580a:	f041 0120 	orr.w	r1, r1, #32
   1580e:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   15812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   15816:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1581a:	0223      	lsls	r3, r4, #8
   1581c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   15820:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   15824:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15828:	ea43 030e 	orr.w	r3, r3, lr
   1582c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   15830:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   15834:	e7d0      	b.n	157d8 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   15836:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   15838:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1583c:	f7ff fef6 	bl	1562c <release_handler>
    if (!handler)
   15840:	2e00      	cmp	r6, #0
   15842:	d0d5      	beq.n	157f0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   15844:	4d11      	ldr	r5, [pc, #68]	; (1588c <nrfx_gpiote_input_configure+0x140>)
   15846:	e9d5 2300 	ldrd	r2, r3, [r5]
   1584a:	4296      	cmp	r6, r2
   1584c:	d101      	bne.n	15852 <nrfx_gpiote_input_configure+0x106>
   1584e:	429f      	cmp	r7, r3
   15850:	d019      	beq.n	15886 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   15852:	4811      	ldr	r0, [pc, #68]	; (15898 <nrfx_gpiote_input_configure+0x14c>)
   15854:	f10d 010f 	add.w	r1, sp, #15
   15858:	f7ff fc4e 	bl	150f8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1585c:	4b0d      	ldr	r3, [pc, #52]	; (15894 <nrfx_gpiote_input_configure+0x148>)
   1585e:	4298      	cmp	r0, r3
   15860:	d1c7      	bne.n	157f2 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   15862:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   15866:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1586a:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1586e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   15870:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   15874:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   15878:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15880:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   15884:	e7b4      	b.n	157f0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   15886:	2200      	movs	r2, #0
   15888:	e7ed      	b.n	15866 <nrfx_gpiote_input_configure+0x11a>
   1588a:	bf00      	nop
   1588c:	200082cc 	.word	0x200082cc
   15890:	0bad0004 	.word	0x0bad0004
   15894:	0bad0000 	.word	0x0bad0000
   15898:	20008340 	.word	0x20008340

0001589c <nrfx_gpiote_output_configure>:
{
   1589c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1589e:	4604      	mov	r4, r0
   158a0:	4615      	mov	r5, r2
   158a2:	b085      	sub	sp, #20
    if (p_config)
   158a4:	b321      	cbz	r1, 158f0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   158a6:	f7ff fe99 	bl	155dc <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   158aa:	b920      	cbnz	r0, 158b6 <nrfx_gpiote_output_configure+0x1a>
   158ac:	4620      	mov	r0, r4
   158ae:	f7ff fe7f 	bl	155b0 <pin_in_use_by_te>
   158b2:	2800      	cmp	r0, #0
   158b4:	d161      	bne.n	1597a <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   158b6:	4620      	mov	r0, r4
   158b8:	f7ff fe84 	bl	155c4 <pin_has_trigger>
   158bc:	b110      	cbz	r0, 158c4 <nrfx_gpiote_output_configure+0x28>
   158be:	784b      	ldrb	r3, [r1, #1]
   158c0:	2b01      	cmp	r3, #1
   158c2:	d05a      	beq.n	1597a <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   158c4:	2301      	movs	r3, #1
   158c6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   158ca:	2300      	movs	r3, #0
   158cc:	1c4a      	adds	r2, r1, #1
   158ce:	e9cd 1300 	strd	r1, r3, [sp]
   158d2:	4620      	mov	r0, r4
   158d4:	1c8b      	adds	r3, r1, #2
   158d6:	f10d 010f 	add.w	r1, sp, #15
   158da:	f008 f8f3 	bl	1dac4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   158de:	4a28      	ldr	r2, [pc, #160]	; (15980 <nrfx_gpiote_output_configure+0xe4>)
   158e0:	f104 0108 	add.w	r1, r4, #8
   158e4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   158e8:	f043 0303 	orr.w	r3, r3, #3
   158ec:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   158f0:	b915      	cbnz	r5, 158f8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   158f2:	4824      	ldr	r0, [pc, #144]	; (15984 <nrfx_gpiote_output_configure+0xe8>)
}
   158f4:	b005      	add	sp, #20
   158f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   158f8:	4620      	mov	r0, r4
   158fa:	f7ff fe6f 	bl	155dc <pin_is_output>
        if (pin_is_input(pin))
   158fe:	2800      	cmp	r0, #0
   15900:	d03b      	beq.n	1597a <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   15902:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   15906:	2300      	movs	r3, #0
   15908:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1590a:	4e1d      	ldr	r6, [pc, #116]	; (15980 <nrfx_gpiote_output_configure+0xe4>)
   1590c:	f104 0708 	add.w	r7, r4, #8
   15910:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   15914:	0089      	lsls	r1, r1, #2
   15916:	f020 0020 	bic.w	r0, r0, #32
   1591a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1591e:	04c0      	lsls	r0, r0, #19
   15920:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   15924:	0cc0      	lsrs	r0, r0, #19
   15926:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1592a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1592e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   15932:	786a      	ldrb	r2, [r5, #1]
   15934:	2a00      	cmp	r2, #0
   15936:	d0dc      	beq.n	158f2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   15938:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1593c:	78ad      	ldrb	r5, [r5, #2]
   1593e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   15942:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   15946:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1594a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1594e:	0223      	lsls	r3, r4, #8
   15950:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   15954:	0412      	lsls	r2, r2, #16
   15956:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1595a:	ea43 030e 	orr.w	r3, r3, lr
   1595e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   15960:	052a      	lsls	r2, r5, #20
   15962:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   15966:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1596a:	4313      	orrs	r3, r2
   1596c:	f040 0020 	orr.w	r0, r0, #32
   15970:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   15974:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   15978:	e7bb      	b.n	158f2 <nrfx_gpiote_output_configure+0x56>
{
   1597a:	4803      	ldr	r0, [pc, #12]	; (15988 <nrfx_gpiote_output_configure+0xec>)
   1597c:	e7ba      	b.n	158f4 <nrfx_gpiote_output_configure+0x58>
   1597e:	bf00      	nop
   15980:	200082cc 	.word	0x200082cc
   15984:	0bad0000 	.word	0x0bad0000
   15988:	0bad0004 	.word	0x0bad0004

0001598c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1598c:	4b01      	ldr	r3, [pc, #4]	; (15994 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1598e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   15992:	4770      	bx	lr
   15994:	200082cc 	.word	0x200082cc

00015998 <nrfx_gpiote_channel_get>:
{
   15998:	4602      	mov	r2, r0
   1599a:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1599c:	b959      	cbnz	r1, 159b6 <nrfx_gpiote_channel_get+0x1e>
   1599e:	490c      	ldr	r1, [pc, #48]	; (159d0 <nrfx_gpiote_channel_get+0x38>)
   159a0:	480c      	ldr	r0, [pc, #48]	; (159d4 <nrfx_gpiote_channel_get+0x3c>)
   159a2:	f240 2335 	movw	r3, #565	; 0x235
   159a6:	4a0c      	ldr	r2, [pc, #48]	; (159d8 <nrfx_gpiote_channel_get+0x40>)
   159a8:	f005 fc40 	bl	1b22c <assert_print>
   159ac:	f240 2135 	movw	r1, #565	; 0x235
   159b0:	4809      	ldr	r0, [pc, #36]	; (159d8 <nrfx_gpiote_channel_get+0x40>)
   159b2:	f005 fc34 	bl	1b21e <assert_post_action>
    if (pin_in_use_by_te(pin))
   159b6:	f7ff fdfb 	bl	155b0 <pin_in_use_by_te>
   159ba:	b138      	cbz	r0, 159cc <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   159bc:	4b07      	ldr	r3, [pc, #28]	; (159dc <nrfx_gpiote_channel_get+0x44>)
   159be:	3208      	adds	r2, #8
   159c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   159c4:	4806      	ldr	r0, [pc, #24]	; (159e0 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   159c6:	0b5b      	lsrs	r3, r3, #13
   159c8:	700b      	strb	r3, [r1, #0]
}
   159ca:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   159cc:	4805      	ldr	r0, [pc, #20]	; (159e4 <nrfx_gpiote_channel_get+0x4c>)
   159ce:	e7fc      	b.n	159ca <nrfx_gpiote_channel_get+0x32>
   159d0:	00022bb1 	.word	0x00022bb1
   159d4:	0001f995 	.word	0x0001f995
   159d8:	00022b73 	.word	0x00022b73
   159dc:	200082cc 	.word	0x200082cc
   159e0:	0bad0000 	.word	0x0bad0000
   159e4:	0bad0004 	.word	0x0bad0004

000159e8 <nrfx_gpiote_init>:
{
   159e8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   159ea:	4c0f      	ldr	r4, [pc, #60]	; (15a28 <nrfx_gpiote_init+0x40>)
   159ec:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   159f0:	b9bd      	cbnz	r5, 15a22 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   159f2:	2260      	movs	r2, #96	; 0x60
   159f4:	4629      	mov	r1, r5
   159f6:	f104 0010 	add.w	r0, r4, #16
   159fa:	f006 fc31 	bl	1c260 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   159fe:	202f      	movs	r0, #47	; 0x2f
   15a00:	f7f6 fbc8 	bl	c194 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a04:	4b09      	ldr	r3, [pc, #36]	; (15a2c <nrfx_gpiote_init+0x44>)
    return err_code;
   15a06:	480a      	ldr	r0, [pc, #40]	; (15a30 <nrfx_gpiote_init+0x48>)
   15a08:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   15a0c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   15a10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15a14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15a18:	2301      	movs	r3, #1
   15a1a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   15a1e:	6763      	str	r3, [r4, #116]	; 0x74
}
   15a20:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   15a22:	4804      	ldr	r0, [pc, #16]	; (15a34 <nrfx_gpiote_init+0x4c>)
   15a24:	e7fc      	b.n	15a20 <nrfx_gpiote_init+0x38>
   15a26:	bf00      	nop
   15a28:	200082cc 	.word	0x200082cc
   15a2c:	4002f000 	.word	0x4002f000
   15a30:	0bad0000 	.word	0x0bad0000
   15a34:	0bad0005 	.word	0x0bad0005

00015a38 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   15a38:	4b03      	ldr	r3, [pc, #12]	; (15a48 <nrfx_gpiote_is_init+0x10>)
   15a3a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   15a3e:	3800      	subs	r0, #0
   15a40:	bf18      	it	ne
   15a42:	2001      	movne	r0, #1
   15a44:	4770      	bx	lr
   15a46:	bf00      	nop
   15a48:	200082cc 	.word	0x200082cc

00015a4c <nrfx_gpiote_channel_free>:
{
   15a4c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   15a4e:	4801      	ldr	r0, [pc, #4]	; (15a54 <nrfx_gpiote_channel_free+0x8>)
   15a50:	f7ff bb6e 	b.w	15130 <nrfx_flag32_free>
   15a54:	2000833c 	.word	0x2000833c

00015a58 <nrfx_gpiote_channel_alloc>:
{
   15a58:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   15a5a:	4801      	ldr	r0, [pc, #4]	; (15a60 <nrfx_gpiote_channel_alloc+0x8>)
   15a5c:	f7ff bb4c 	b.w	150f8 <nrfx_flag32_alloc>
   15a60:	2000833c 	.word	0x2000833c

00015a64 <nrfx_gpiote_trigger_enable>:
{
   15a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15a66:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   15a68:	f7ff fdac 	bl	155c4 <pin_has_trigger>
   15a6c:	b958      	cbnz	r0, 15a86 <nrfx_gpiote_trigger_enable+0x22>
   15a6e:	492b      	ldr	r1, [pc, #172]	; (15b1c <nrfx_gpiote_trigger_enable+0xb8>)
   15a70:	f240 33df 	movw	r3, #991	; 0x3df
   15a74:	4a2a      	ldr	r2, [pc, #168]	; (15b20 <nrfx_gpiote_trigger_enable+0xbc>)
   15a76:	482b      	ldr	r0, [pc, #172]	; (15b24 <nrfx_gpiote_trigger_enable+0xc0>)
   15a78:	f005 fbd8 	bl	1b22c <assert_print>
   15a7c:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   15a80:	4827      	ldr	r0, [pc, #156]	; (15b20 <nrfx_gpiote_trigger_enable+0xbc>)
   15a82:	f005 fbcc 	bl	1b21e <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15a86:	4620      	mov	r0, r4
   15a88:	f7ff fd92 	bl	155b0 <pin_in_use_by_te>
   15a8c:	4a26      	ldr	r2, [pc, #152]	; (15b28 <nrfx_gpiote_trigger_enable+0xc4>)
   15a8e:	f104 0508 	add.w	r5, r4, #8
   15a92:	b1e0      	cbz	r0, 15ace <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   15a94:	4620      	mov	r0, r4
   15a96:	f7ff fda1 	bl	155dc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15a9a:	b9c0      	cbnz	r0, 15ace <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15a9c:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   15aa0:	4c22      	ldr	r4, [pc, #136]	; (15b2c <nrfx_gpiote_trigger_enable+0xc8>)
   15aa2:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   15aa4:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15aa6:	50e0      	str	r0, [r4, r3]
   15aa8:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15aaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15aae:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15ab2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   15ab6:	f040 0001 	orr.w	r0, r0, #1
   15aba:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   15abe:	b121      	cbz	r1, 15aca <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   15ac0:	2301      	movs	r3, #1
   15ac2:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   15ac4:	4a1a      	ldr	r2, [pc, #104]	; (15b30 <nrfx_gpiote_trigger_enable+0xcc>)
   15ac6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15aca:	b003      	add	sp, #12
   15acc:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   15ace:	b949      	cbnz	r1, 15ae4 <nrfx_gpiote_trigger_enable+0x80>
   15ad0:	4918      	ldr	r1, [pc, #96]	; (15b34 <nrfx_gpiote_trigger_enable+0xd0>)
   15ad2:	f240 33ee 	movw	r3, #1006	; 0x3ee
   15ad6:	4a12      	ldr	r2, [pc, #72]	; (15b20 <nrfx_gpiote_trigger_enable+0xbc>)
   15ad8:	4812      	ldr	r0, [pc, #72]	; (15b24 <nrfx_gpiote_trigger_enable+0xc0>)
   15ada:	f005 fba7 	bl	1b22c <assert_print>
   15ade:	f240 31ee 	movw	r1, #1006	; 0x3ee
   15ae2:	e7cd      	b.n	15a80 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15ae4:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   15ae8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   15aec:	2b04      	cmp	r3, #4
   15aee:	d011      	beq.n	15b14 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   15af0:	2b05      	cmp	r3, #5
   15af2:	d011      	beq.n	15b18 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15af4:	a801      	add	r0, sp, #4
   15af6:	9401      	str	r4, [sp, #4]
   15af8:	f7ff fdf4 	bl	156e4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   15afc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   15afe:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   15b00:	40d9      	lsrs	r1, r3
   15b02:	f001 0101 	and.w	r1, r1, #1
   15b06:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   15b08:	4620      	mov	r0, r4
}
   15b0a:	b003      	add	sp, #12
   15b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   15b10:	f008 b825 	b.w	1db5e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   15b14:	2103      	movs	r1, #3
   15b16:	e7f7      	b.n	15b08 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   15b18:	2102      	movs	r1, #2
   15b1a:	e7f5      	b.n	15b08 <nrfx_gpiote_trigger_enable+0xa4>
   15b1c:	00022bbb 	.word	0x00022bbb
   15b20:	00022b73 	.word	0x00022b73
   15b24:	0001f995 	.word	0x0001f995
   15b28:	200082cc 	.word	0x200082cc
   15b2c:	4002f100 	.word	0x4002f100
   15b30:	4002f000 	.word	0x4002f000
   15b34:	00022bd0 	.word	0x00022bd0

00015b38 <nrfx_gpiote_trigger_disable>:
{
   15b38:	b508      	push	{r3, lr}
   15b3a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15b3c:	f7ff fd38 	bl	155b0 <pin_in_use_by_te>
   15b40:	b1c8      	cbz	r0, 15b76 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   15b42:	4610      	mov	r0, r2
   15b44:	f7ff fd4a 	bl	155dc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15b48:	b9a8      	cbnz	r0, 15b76 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15b4a:	4b0e      	ldr	r3, [pc, #56]	; (15b84 <nrfx_gpiote_trigger_disable+0x4c>)
   15b4c:	3208      	adds	r2, #8
   15b4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   15b52:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15b54:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   15b56:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   15b58:	490b      	ldr	r1, [pc, #44]	; (15b88 <nrfx_gpiote_trigger_disable+0x50>)
   15b5a:	009b      	lsls	r3, r3, #2
   15b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15b60:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   15b64:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15b68:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15b6c:	f022 0203 	bic.w	r2, r2, #3
   15b70:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   15b74:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   15b76:	2100      	movs	r1, #0
}
   15b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   15b7c:	4610      	mov	r0, r2
   15b7e:	f007 bfee 	b.w	1db5e <nrf_gpio_cfg_sense_set>
   15b82:	bf00      	nop
   15b84:	200082cc 	.word	0x200082cc
   15b88:	4002f000 	.word	0x4002f000

00015b8c <nrfx_gpiote_pin_uninit>:
{
   15b8c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15b8e:	4b10      	ldr	r3, [pc, #64]	; (15bd0 <nrfx_gpiote_pin_uninit+0x44>)
   15b90:	f100 0208 	add.w	r2, r0, #8
   15b94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   15b98:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   15b9a:	07db      	lsls	r3, r3, #31
   15b9c:	d516      	bpl.n	15bcc <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   15b9e:	f7ff ffcb 	bl	15b38 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   15ba2:	4620      	mov	r0, r4
   15ba4:	f7ff fd80 	bl	156a8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ba8:	a801      	add	r0, sp, #4
   15baa:	9401      	str	r4, [sp, #4]
   15bac:	f7ff fd9a 	bl	156e4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   15bb0:	9b01      	ldr	r3, [sp, #4]
   15bb2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15bb6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   15bba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15bbe:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   15bc2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   15bc6:	4803      	ldr	r0, [pc, #12]	; (15bd4 <nrfx_gpiote_pin_uninit+0x48>)
}
   15bc8:	b002      	add	sp, #8
   15bca:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15bcc:	4802      	ldr	r0, [pc, #8]	; (15bd8 <nrfx_gpiote_pin_uninit+0x4c>)
   15bce:	e7fb      	b.n	15bc8 <nrfx_gpiote_pin_uninit+0x3c>
   15bd0:	200082cc 	.word	0x200082cc
   15bd4:	0bad0000 	.word	0x0bad0000
   15bd8:	0bad0004 	.word	0x0bad0004

00015bdc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   15bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   15be0:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   15be2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15be4:	4634      	mov	r4, r6
{
   15be6:	4b64      	ldr	r3, [pc, #400]	; (15d78 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   15be8:	4864      	ldr	r0, [pc, #400]	; (15d7c <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15bea:	4965      	ldr	r1, [pc, #404]	; (15d80 <nrfx_gpiote_irq_handler+0x1a4>)
{
   15bec:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15bee:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   15bf0:	b135      	cbz	r5, 15c00 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   15bf2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   15bf6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15bf8:	bf1e      	ittt	ne
   15bfa:	601c      	strne	r4, [r3, #0]
   15bfc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   15bfe:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15c00:	3304      	adds	r3, #4
   15c02:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   15c04:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15c08:	d1f1      	bne.n	15bee <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c0a:	f8df a170 	ldr.w	sl, [pc, #368]	; 15d7c <nrfx_gpiote_irq_handler+0x1a0>
   15c0e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   15c12:	2b00      	cmp	r3, #0
   15c14:	f000 8093 	beq.w	15d3e <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   15c18:	f8df 8168 	ldr.w	r8, [pc, #360]	; 15d84 <nrfx_gpiote_irq_handler+0x1a8>
   15c1c:	f8d8 3020 	ldr.w	r3, [r8, #32]
   15c20:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   15c22:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   15c26:	4b58      	ldr	r3, [pc, #352]	; (15d88 <nrfx_gpiote_irq_handler+0x1ac>)
   15c28:	6a1a      	ldr	r2, [r3, #32]
   15c2a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   15c2c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   15c2e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   15c32:	f10d 0b10 	add.w	fp, sp, #16
   15c36:	ea4f 1349 	mov.w	r3, r9, lsl #5
   15c3a:	9300      	str	r3, [sp, #0]
   15c3c:	e04a      	b.n	15cd4 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   15c3e:	fa94 f4a4 	rbit	r4, r4
   15c42:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   15c46:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15c48:	4a50      	ldr	r2, [pc, #320]	; (15d8c <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   15c4a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15c4c:	f104 0308 	add.w	r3, r4, #8
   15c50:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   15c54:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   15c56:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   15c58:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   15c5c:	fa03 f101 	lsl.w	r1, r3, r1
   15c60:	f81b 3000 	ldrb.w	r3, [fp, r0]
   15c64:	08ba      	lsrs	r2, r7, #2
   15c66:	ea23 0301 	bic.w	r3, r3, r1
   15c6a:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c6e:	a803      	add	r0, sp, #12
   15c70:	9201      	str	r2, [sp, #4]
   15c72:	9403      	str	r4, [sp, #12]
   15c74:	f7ff fd36 	bl	156e4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15c78:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   15c7a:	9a01      	ldr	r2, [sp, #4]
   15c7c:	3380      	adds	r3, #128	; 0x80
   15c7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15c82:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   15c86:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15c88:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   15c8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   15c8e:	d52b      	bpl.n	15ce8 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   15c90:	4639      	mov	r1, r7
   15c92:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15c94:	b2dd      	uxtb	r5, r3
   15c96:	f7ff fcab 	bl	155f0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c9a:	a803      	add	r0, sp, #12
   15c9c:	9403      	str	r4, [sp, #12]
   15c9e:	f7ff fd21 	bl	156e4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15ca2:	9b03      	ldr	r3, [sp, #12]
   15ca4:	3380      	adds	r3, #128	; 0x80
   15ca6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   15caa:	f3c3 4301 	ubfx	r3, r3, #16, #2
   15cae:	429d      	cmp	r5, r3
   15cb0:	d107      	bne.n	15cc2 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   15cb2:	2100      	movs	r1, #0
   15cb4:	4620      	mov	r0, r4
   15cb6:	f007 ff52 	bl	1db5e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   15cba:	4629      	mov	r1, r5
   15cbc:	4620      	mov	r0, r4
   15cbe:	f007 ff4e 	bl	1db5e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15cc2:	a803      	add	r0, sp, #12
   15cc4:	9403      	str	r4, [sp, #12]
   15cc6:	f7ff fd0d 	bl	156e4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   15cca:	2201      	movs	r2, #1
   15ccc:	9b03      	ldr	r3, [sp, #12]
   15cce:	fa02 f303 	lsl.w	r3, r2, r3
   15cd2:	6203      	str	r3, [r0, #32]
            while (latch[i])
   15cd4:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   15cd8:	2c00      	cmp	r4, #0
   15cda:	d1b0      	bne.n	15c3e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   15cdc:	f1b9 0f00 	cmp.w	r9, #0
   15ce0:	d11d      	bne.n	15d1e <nrfx_gpiote_irq_handler+0x142>
   15ce2:	f04f 0901 	mov.w	r9, #1
   15ce6:	e7a6      	b.n	15c36 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15ce8:	2b02      	cmp	r3, #2
   15cea:	d10c      	bne.n	15d06 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   15cec:	2103      	movs	r1, #3
   15cee:	4620      	mov	r0, r4
   15cf0:	f007 ff35 	bl	1db5e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   15cf4:	f005 0305 	and.w	r3, r5, #5
   15cf8:	2b01      	cmp	r3, #1
   15cfa:	d1e2      	bne.n	15cc2 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   15cfc:	4639      	mov	r1, r7
   15cfe:	4620      	mov	r0, r4
   15d00:	f7ff fc76 	bl	155f0 <call_handler>
   15d04:	e7dd      	b.n	15cc2 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   15d06:	2102      	movs	r1, #2
   15d08:	4620      	mov	r0, r4
   15d0a:	9301      	str	r3, [sp, #4]
   15d0c:	f007 ff27 	bl	1db5e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   15d10:	2d03      	cmp	r5, #3
   15d12:	d0f3      	beq.n	15cfc <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   15d14:	9b01      	ldr	r3, [sp, #4]
   15d16:	2b03      	cmp	r3, #3
   15d18:	d1d3      	bne.n	15cc2 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   15d1a:	2d02      	cmp	r5, #2
   15d1c:	e7ed      	b.n	15cfa <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15d1e:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   15d22:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   15d26:	f8d8 3020 	ldr.w	r3, [r8, #32]
   15d2a:	4917      	ldr	r1, [pc, #92]	; (15d88 <nrfx_gpiote_irq_handler+0x1ac>)
   15d2c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   15d2e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   15d32:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   15d34:	4313      	orrs	r3, r2
   15d36:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   15d38:	620a      	str	r2, [r1, #32]
   15d3a:	f47f af78 	bne.w	15c2e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   15d3e:	2401      	movs	r4, #1
    while (mask)
   15d40:	b916      	cbnz	r6, 15d48 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   15d42:	b007      	add	sp, #28
   15d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   15d48:	fa96 f3a6 	rbit	r3, r6
   15d4c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   15d50:	fa04 f203 	lsl.w	r2, r4, r3
   15d54:	009b      	lsls	r3, r3, #2
   15d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d5a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15d5e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   15d62:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   15d66:	f3c0 2005 	ubfx	r0, r0, #8, #6
   15d6a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   15d6e:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   15d72:	f7ff fc3d 	bl	155f0 <call_handler>
   15d76:	e7e3      	b.n	15d40 <nrfx_gpiote_irq_handler+0x164>
   15d78:	4002f100 	.word	0x4002f100
   15d7c:	4002f000 	.word	0x4002f000
   15d80:	4002f120 	.word	0x4002f120
   15d84:	40842500 	.word	0x40842500
   15d88:	40842800 	.word	0x40842800
   15d8c:	200082cc 	.word	0x200082cc

00015d90 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   15d90:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   15d92:	4c08      	ldr	r4, [pc, #32]	; (15db4 <nrfx_ipc_init+0x24>)
{
   15d94:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   15d96:	7923      	ldrb	r3, [r4, #4]
{
   15d98:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   15d9a:	b943      	cbnz	r3, 15dae <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   15d9c:	202a      	movs	r0, #42	; 0x2a
   15d9e:	f7f6 f9f9 	bl	c194 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15da2:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   15da4:	4804      	ldr	r0, [pc, #16]	; (15db8 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15da6:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   15da8:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   15daa:	60a5      	str	r5, [r4, #8]
}
   15dac:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   15dae:	4803      	ldr	r0, [pc, #12]	; (15dbc <nrfx_ipc_init+0x2c>)
   15db0:	e7fc      	b.n	15dac <nrfx_ipc_init+0x1c>
   15db2:	bf00      	nop
   15db4:	20009a64 	.word	0x20009a64
   15db8:	0bad0000 	.word	0x0bad0000
   15dbc:	0bad000c 	.word	0x0bad000c

00015dc0 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   15dc0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   15dc2:	b948      	cbnz	r0, 15dd8 <nrfx_ipc_config_load+0x18>
   15dc4:	4919      	ldr	r1, [pc, #100]	; (15e2c <nrfx_ipc_config_load+0x6c>)
   15dc6:	2345      	movs	r3, #69	; 0x45
   15dc8:	4a19      	ldr	r2, [pc, #100]	; (15e30 <nrfx_ipc_config_load+0x70>)
   15dca:	481a      	ldr	r0, [pc, #104]	; (15e34 <nrfx_ipc_config_load+0x74>)
   15dcc:	f005 fa2e 	bl	1b22c <assert_print>
   15dd0:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15dd2:	4817      	ldr	r0, [pc, #92]	; (15e30 <nrfx_ipc_config_load+0x70>)
   15dd4:	f005 fa23 	bl	1b21e <assert_post_action>
   15dd8:	4b17      	ldr	r3, [pc, #92]	; (15e38 <nrfx_ipc_config_load+0x78>)
   15dda:	791b      	ldrb	r3, [r3, #4]
   15ddc:	2b01      	cmp	r3, #1
   15dde:	d007      	beq.n	15df0 <nrfx_ipc_config_load+0x30>
   15de0:	4916      	ldr	r1, [pc, #88]	; (15e3c <nrfx_ipc_config_load+0x7c>)
   15de2:	2346      	movs	r3, #70	; 0x46
   15de4:	4a12      	ldr	r2, [pc, #72]	; (15e30 <nrfx_ipc_config_load+0x70>)
   15de6:	4813      	ldr	r0, [pc, #76]	; (15e34 <nrfx_ipc_config_load+0x74>)
   15de8:	f005 fa20 	bl	1b22c <assert_print>
   15dec:	2146      	movs	r1, #70	; 0x46
   15dee:	e7f0      	b.n	15dd2 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15df0:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   15df2:	4a13      	ldr	r2, [pc, #76]	; (15e40 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   15df4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   15df8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15dfc:	3301      	adds	r3, #1
   15dfe:	2b10      	cmp	r3, #16
   15e00:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   15e04:	d1f6      	bne.n	15df4 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   15e06:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   15e08:	4a0d      	ldr	r2, [pc, #52]	; (15e40 <nrfx_ipc_config_load+0x80>)
   15e0a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   15e0e:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   15e12:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15e16:	3301      	adds	r3, #1
   15e18:	2b10      	cmp	r3, #16
   15e1a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   15e1e:	d1f6      	bne.n	15e0e <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   15e20:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   15e24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15e28:	bd38      	pop	{r3, r4, r5, pc}
   15e2a:	bf00      	nop
   15e2c:	00022c16 	.word	0x00022c16
   15e30:	00022bdb 	.word	0x00022bdb
   15e34:	0001f995 	.word	0x0001f995
   15e38:	20009a64 	.word	0x20009a64
   15e3c:	00022c1f 	.word	0x00022c1f
   15e40:	4002a000 	.word	0x4002a000

00015e44 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   15e44:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15e46:	4b09      	ldr	r3, [pc, #36]	; (15e6c <nrfx_ipc_receive_event_enable+0x28>)
   15e48:	791b      	ldrb	r3, [r3, #4]
   15e4a:	2b01      	cmp	r3, #1
   15e4c:	d009      	beq.n	15e62 <nrfx_ipc_receive_event_enable+0x1e>
   15e4e:	4908      	ldr	r1, [pc, #32]	; (15e70 <nrfx_ipc_receive_event_enable+0x2c>)
   15e50:	4808      	ldr	r0, [pc, #32]	; (15e74 <nrfx_ipc_receive_event_enable+0x30>)
   15e52:	236b      	movs	r3, #107	; 0x6b
   15e54:	4a08      	ldr	r2, [pc, #32]	; (15e78 <nrfx_ipc_receive_event_enable+0x34>)
   15e56:	f005 f9e9 	bl	1b22c <assert_print>
   15e5a:	216b      	movs	r1, #107	; 0x6b
   15e5c:	4806      	ldr	r0, [pc, #24]	; (15e78 <nrfx_ipc_receive_event_enable+0x34>)
   15e5e:	f005 f9de 	bl	1b21e <assert_post_action>
   15e62:	4a06      	ldr	r2, [pc, #24]	; (15e7c <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   15e64:	4083      	lsls	r3, r0
   15e66:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15e6a:	bd08      	pop	{r3, pc}
   15e6c:	20009a64 	.word	0x20009a64
   15e70:	00022c1f 	.word	0x00022c1f
   15e74:	0001f995 	.word	0x0001f995
   15e78:	00022bdb 	.word	0x00022bdb
   15e7c:	4002a000 	.word	0x4002a000

00015e80 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   15e80:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   15e82:	4b09      	ldr	r3, [pc, #36]	; (15ea8 <nrfx_ipc_receive_event_disable+0x28>)
   15e84:	791b      	ldrb	r3, [r3, #4]
   15e86:	2b01      	cmp	r3, #1
   15e88:	d009      	beq.n	15e9e <nrfx_ipc_receive_event_disable+0x1e>
   15e8a:	4908      	ldr	r1, [pc, #32]	; (15eac <nrfx_ipc_receive_event_disable+0x2c>)
   15e8c:	4808      	ldr	r0, [pc, #32]	; (15eb0 <nrfx_ipc_receive_event_disable+0x30>)
   15e8e:	2371      	movs	r3, #113	; 0x71
   15e90:	4a08      	ldr	r2, [pc, #32]	; (15eb4 <nrfx_ipc_receive_event_disable+0x34>)
   15e92:	f005 f9cb 	bl	1b22c <assert_print>
   15e96:	2171      	movs	r1, #113	; 0x71
   15e98:	4806      	ldr	r0, [pc, #24]	; (15eb4 <nrfx_ipc_receive_event_disable+0x34>)
   15e9a:	f005 f9c0 	bl	1b21e <assert_post_action>
    p_reg->INTENCLR = mask;
   15e9e:	4a06      	ldr	r2, [pc, #24]	; (15eb8 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   15ea0:	4083      	lsls	r3, r0
   15ea2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   15ea6:	bd08      	pop	{r3, pc}
   15ea8:	20009a64 	.word	0x20009a64
   15eac:	00022c1f 	.word	0x00022c1f
   15eb0:	0001f995 	.word	0x0001f995
   15eb4:	00022bdb 	.word	0x00022bdb
   15eb8:	4002a000 	.word	0x4002a000

00015ebc <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   15ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   15ebe:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ec0:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   15ec2:	4b12      	ldr	r3, [pc, #72]	; (15f0c <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   15ec4:	4d12      	ldr	r5, [pc, #72]	; (15f10 <nrfx_ipc_irq_handler+0x54>)
   15ec6:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   15eca:	b904      	cbnz	r4, 15ece <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   15ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   15ece:	fa94 f0a4 	rbit	r0, r4
   15ed2:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   15ed6:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   15eda:	280f      	cmp	r0, #15
   15edc:	ea24 0403 	bic.w	r4, r4, r3
   15ee0:	dd0b      	ble.n	15efa <nrfx_ipc_irq_handler+0x3e>
   15ee2:	490c      	ldr	r1, [pc, #48]	; (15f14 <nrfx_ipc_irq_handler+0x58>)
   15ee4:	480c      	ldr	r0, [pc, #48]	; (15f18 <nrfx_ipc_irq_handler+0x5c>)
   15ee6:	f240 13e7 	movw	r3, #487	; 0x1e7
   15eea:	4a0c      	ldr	r2, [pc, #48]	; (15f1c <nrfx_ipc_irq_handler+0x60>)
   15eec:	f005 f99e 	bl	1b22c <assert_print>
   15ef0:	f240 11e7 	movw	r1, #487	; 0x1e7
   15ef4:	4809      	ldr	r0, [pc, #36]	; (15f1c <nrfx_ipc_irq_handler+0x60>)
   15ef6:	f005 f992 	bl	1b21e <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15efa:	4b09      	ldr	r3, [pc, #36]	; (15f20 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   15efc:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15efe:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   15f00:	682b      	ldr	r3, [r5, #0]
   15f02:	2b00      	cmp	r3, #0
   15f04:	d0e1      	beq.n	15eca <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   15f06:	68a9      	ldr	r1, [r5, #8]
   15f08:	4798      	blx	r3
   15f0a:	e7de      	b.n	15eca <nrfx_ipc_irq_handler+0xe>
   15f0c:	4002a000 	.word	0x4002a000
   15f10:	20009a64 	.word	0x20009a64
   15f14:	0001fe9d 	.word	0x0001fe9d
   15f18:	0001f995 	.word	0x0001f995
   15f1c:	0001fe6b 	.word	0x0001fe6b
   15f20:	4002a100 	.word	0x4002a100

00015f24 <nrf_gpio_pin_port_decode>:
{
   15f24:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15f26:	6803      	ldr	r3, [r0, #0]
    switch (port)
   15f28:	095a      	lsrs	r2, r3, #5
   15f2a:	d00d      	beq.n	15f48 <nrf_gpio_pin_port_decode+0x24>
   15f2c:	2a01      	cmp	r2, #1
   15f2e:	d013      	beq.n	15f58 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15f30:	490e      	ldr	r1, [pc, #56]	; (15f6c <nrf_gpio_pin_port_decode+0x48>)
   15f32:	480f      	ldr	r0, [pc, #60]	; (15f70 <nrf_gpio_pin_port_decode+0x4c>)
   15f34:	f240 2347 	movw	r3, #583	; 0x247
   15f38:	4a0e      	ldr	r2, [pc, #56]	; (15f74 <nrf_gpio_pin_port_decode+0x50>)
   15f3a:	f005 f977 	bl	1b22c <assert_print>
   15f3e:	f240 2147 	movw	r1, #583	; 0x247
   15f42:	480c      	ldr	r0, [pc, #48]	; (15f74 <nrf_gpio_pin_port_decode+0x50>)
   15f44:	f005 f96b 	bl	1b21e <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   15f48:	f04f 32ff 	mov.w	r2, #4294967295
   15f4c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15f50:	07d9      	lsls	r1, r3, #31
   15f52:	d5ed      	bpl.n	15f30 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   15f54:	4808      	ldr	r0, [pc, #32]	; (15f78 <nrf_gpio_pin_port_decode+0x54>)
   15f56:	e008      	b.n	15f6a <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   15f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   15f5c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   15f60:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15f62:	07d2      	lsls	r2, r2, #31
   15f64:	d5e4      	bpl.n	15f30 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   15f66:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   15f68:	4804      	ldr	r0, [pc, #16]	; (15f7c <nrf_gpio_pin_port_decode+0x58>)
}
   15f6a:	bd08      	pop	{r3, pc}
   15f6c:	000221e8 	.word	0x000221e8
   15f70:	0001f995 	.word	0x0001f995
   15f74:	000221b5 	.word	0x000221b5
   15f78:	40842500 	.word	0x40842500
   15f7c:	40842800 	.word	0x40842800

00015f80 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
   15f80:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_seq != NULL);
   15f82:	b95a      	cbnz	r2, 15f9c <nrf_pwm_sequence_set+0x1c>
   15f84:	492c      	ldr	r1, [pc, #176]	; (16038 <nrf_pwm_sequence_set+0xb8>)
   15f86:	f44f 732c 	mov.w	r3, #688	; 0x2b0
   15f8a:	4a2c      	ldr	r2, [pc, #176]	; (1603c <nrf_pwm_sequence_set+0xbc>)
   15f8c:	482c      	ldr	r0, [pc, #176]	; (16040 <nrf_pwm_sequence_set+0xc0>)
   15f8e:	f005 f94d 	bl	1b22c <assert_print>
   15f92:	f44f 712c 	mov.w	r1, #688	; 0x2b0
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   15f96:	4829      	ldr	r0, [pc, #164]	; (1603c <nrf_pwm_sequence_set+0xbc>)
   15f98:	f005 f941 	bl	1b21e <assert_post_action>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   15f9c:	6813      	ldr	r3, [r2, #0]
    NRFX_ASSERT(p_values != NULL);
   15f9e:	b94b      	cbnz	r3, 15fb4 <nrf_pwm_sequence_set+0x34>
   15fa0:	4928      	ldr	r1, [pc, #160]	; (16044 <nrf_pwm_sequence_set+0xc4>)
   15fa2:	f240 23bd 	movw	r3, #701	; 0x2bd
   15fa6:	4a25      	ldr	r2, [pc, #148]	; (1603c <nrf_pwm_sequence_set+0xbc>)
   15fa8:	4825      	ldr	r0, [pc, #148]	; (16040 <nrf_pwm_sequence_set+0xc0>)
   15faa:	f005 f93f 	bl	1b22c <assert_print>
   15fae:	f240 21bd 	movw	r1, #701	; 0x2bd
   15fb2:	e7f0      	b.n	15f96 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   15fb4:	eb00 1441 	add.w	r4, r0, r1, lsl #5
   15fb8:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   15fbc:	8893      	ldrh	r3, [r2, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   15fbe:	b94b      	cbnz	r3, 15fd4 <nrf_pwm_sequence_set+0x54>
   15fc0:	4921      	ldr	r1, [pc, #132]	; (16048 <nrf_pwm_sequence_set+0xc8>)
   15fc2:	f240 23c6 	movw	r3, #710	; 0x2c6
   15fc6:	4a1d      	ldr	r2, [pc, #116]	; (1603c <nrf_pwm_sequence_set+0xbc>)
   15fc8:	481d      	ldr	r0, [pc, #116]	; (16040 <nrf_pwm_sequence_set+0xc0>)
   15fca:	f005 f92f 	bl	1b22c <assert_print>
   15fce:	f240 21c6 	movw	r1, #710	; 0x2c6
   15fd2:	e7e0      	b.n	15f96 <nrf_pwm_sequence_set+0x16>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   15fd4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15fd8:	d009      	beq.n	15fee <nrf_pwm_sequence_set+0x6e>
   15fda:	491c      	ldr	r1, [pc, #112]	; (1604c <nrf_pwm_sequence_set+0xcc>)
   15fdc:	f240 23c7 	movw	r3, #711	; 0x2c7
   15fe0:	4a16      	ldr	r2, [pc, #88]	; (1603c <nrf_pwm_sequence_set+0xbc>)
   15fe2:	4817      	ldr	r0, [pc, #92]	; (16040 <nrf_pwm_sequence_set+0xc0>)
   15fe4:	f005 f922 	bl	1b22c <assert_print>
   15fe8:	f240 21c7 	movw	r1, #711	; 0x2c7
   15fec:	e7d3      	b.n	15f96 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].CNT = length;
   15fee:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   15ff2:	6893      	ldr	r3, [r2, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   15ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   15ff8:	d309      	bcc.n	1600e <nrf_pwm_sequence_set+0x8e>
   15ffa:	4915      	ldr	r1, [pc, #84]	; (16050 <nrf_pwm_sequence_set+0xd0>)
   15ffc:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   16000:	4a0e      	ldr	r2, [pc, #56]	; (1603c <nrf_pwm_sequence_set+0xbc>)
   16002:	480f      	ldr	r0, [pc, #60]	; (16040 <nrf_pwm_sequence_set+0xc0>)
   16004:	f005 f912 	bl	1b22c <assert_print>
   16008:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   1600c:	e7c3      	b.n	15f96 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1600e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   16012:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   16016:	68d3      	ldr	r3, [r2, #12]
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   16018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1601c:	d309      	bcc.n	16032 <nrf_pwm_sequence_set+0xb2>
   1601e:	490d      	ldr	r1, [pc, #52]	; (16054 <nrf_pwm_sequence_set+0xd4>)
   16020:	f240 23d9 	movw	r3, #729	; 0x2d9
   16024:	4a05      	ldr	r2, [pc, #20]	; (1603c <nrf_pwm_sequence_set+0xbc>)
   16026:	4806      	ldr	r0, [pc, #24]	; (16040 <nrf_pwm_sequence_set+0xc0>)
   16028:	f005 f900 	bl	1b22c <assert_print>
   1602c:	f240 21d9 	movw	r1, #729	; 0x2d9
   16030:	e7b1      	b.n	15f96 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   16032:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
}
   16036:	bd10      	pop	{r4, pc}
   16038:	00022c7e 	.word	0x00022c7e
   1603c:	00022c4c 	.word	0x00022c4c
   16040:	0001f995 	.word	0x0001f995
   16044:	00022c93 	.word	0x00022c93
   16048:	00022cab 	.word	0x00022cab
   1604c:	00022cb7 	.word	0x00022cb7
   16050:	00022cd5 	.word	0x00022cd5
   16054:	00022cf6 	.word	0x00022cf6

00016058 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   16058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1605c:	4604      	mov	r4, r0
    NRFX_ASSERT(p_config);
   1605e:	460d      	mov	r5, r1
{
   16060:	b087      	sub	sp, #28
    NRFX_ASSERT(p_config);
   16062:	b949      	cbnz	r1, 16078 <nrfx_pwm_init+0x20>
   16064:	495b      	ldr	r1, [pc, #364]	; (161d4 <nrfx_pwm_init+0x17c>)
   16066:	485c      	ldr	r0, [pc, #368]	; (161d8 <nrfx_pwm_init+0x180>)
   16068:	238c      	movs	r3, #140	; 0x8c
   1606a:	4a5c      	ldr	r2, [pc, #368]	; (161dc <nrfx_pwm_init+0x184>)
   1606c:	f005 f8de 	bl	1b22c <assert_print>
   16070:	218c      	movs	r1, #140	; 0x8c
   16072:	485a      	ldr	r0, [pc, #360]	; (161dc <nrfx_pwm_init+0x184>)
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   16074:	f005 f8d3 	bl	1b21e <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   16078:	210c      	movs	r1, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1607a:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1607e:	4e58      	ldr	r6, [pc, #352]	; (161e0 <nrfx_pwm_init+0x188>)
   16080:	fb01 f108 	mul.w	r1, r1, r8
   16084:	1870      	adds	r0, r6, r1
   16086:	7a07      	ldrb	r7, [r0, #8]
   16088:	2f00      	cmp	r7, #0
   1608a:	f040 80a0 	bne.w	161ce <nrfx_pwm_init+0x176>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1608e:	6043      	str	r3, [r0, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   16090:	7b2b      	ldrb	r3, [r5, #12]
    p_cb->handler = handler;
   16092:	5072      	str	r2, [r6, r1]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   16094:	7283      	strb	r3, [r0, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   16096:	b1c3      	cbz	r3, 160ca <nrfx_pwm_init+0x72>
   16098:	7b6b      	ldrb	r3, [r5, #13]
   1609a:	b1b3      	cbz	r3, 160ca <nrfx_pwm_init+0x72>
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   1609c:	2201      	movs	r2, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   1609e:	6823      	ldr	r3, [r4, #0]
   160a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   160a4:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    nrf_pwm_configure(p_instance->p_registers,
   160a8:	6823      	ldr	r3, [r4, #0]
   160aa:	2f00      	cmp	r7, #0
        p_config->base_clock, p_config->count_mode, p_config->top_value);
   160ac:	7968      	ldrb	r0, [r5, #5]
   160ae:	79a9      	ldrb	r1, [r5, #6]
   160b0:	892a      	ldrh	r2, [r5, #8]
   160b2:	da54      	bge.n	1615e <nrfx_pwm_init+0x106>
   160b4:	494b      	ldr	r1, [pc, #300]	; (161e4 <nrfx_pwm_init+0x18c>)
   160b6:	4848      	ldr	r0, [pc, #288]	; (161d8 <nrfx_pwm_init+0x180>)
   160b8:	f240 23a5 	movw	r3, #677	; 0x2a5
   160bc:	4a4a      	ldr	r2, [pc, #296]	; (161e8 <nrfx_pwm_init+0x190>)
   160be:	f005 f8b5 	bl	1b22c <assert_print>
   160c2:	f240 21a5 	movw	r1, #677	; 0x2a5
   160c6:	4848      	ldr	r0, [pc, #288]	; (161e8 <nrfx_pwm_init+0x190>)
   160c8:	e7d4      	b.n	16074 <nrfx_pwm_init+0x1c>
   160ca:	f105 39ff 	add.w	r9, r5, #4294967295
   160ce:	af02      	add	r7, sp, #8
   160d0:	f105 0a03 	add.w	sl, r5, #3
        uint8_t output_pin = p_config->output_pins[i];
   160d4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   160d8:	2aff      	cmp	r2, #255	; 0xff
   160da:	d03c      	beq.n	16156 <nrfx_pwm_init+0xfe>
            if (!p_config->skip_gpio_cfg)
   160dc:	7b29      	ldrb	r1, [r5, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   160de:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
   160e2:	f8c7 b000 	str.w	fp, [r7]
            if (!p_config->skip_gpio_cfg)
   160e6:	b9d1      	cbnz	r1, 1611e <nrfx_pwm_init+0xc6>
    if (value == 0)
   160e8:	0613      	lsls	r3, r2, #24
   160ea:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   160ee:	a801      	add	r0, sp, #4
    if (value == 0)
   160f0:	d42a      	bmi.n	16148 <nrfx_pwm_init+0xf0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   160f2:	f7ff ff17 	bl	15f24 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   160f6:	2201      	movs	r2, #1
   160f8:	9901      	ldr	r1, [sp, #4]
   160fa:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   160fc:	60c2      	str	r2, [r0, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   160fe:	a801      	add	r0, sp, #4
   16100:	f8cd b004 	str.w	fp, [sp, #4]
   16104:	f7ff ff0e 	bl	15f24 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16108:	9b01      	ldr	r3, [sp, #4]
   1610a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1610e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   16112:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16116:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   1611a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1611e:	45ca      	cmp	sl, r9
   16120:	f107 0704 	add.w	r7, r7, #4
   16124:	d1d6      	bne.n	160d4 <nrfx_pwm_init+0x7c>
    if (!p_config->skip_psel_cfg)
   16126:	7b6b      	ldrb	r3, [r5, #13]
   16128:	2b00      	cmp	r3, #0
   1612a:	d1b7      	bne.n	1609c <nrfx_pwm_init+0x44>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   1612c:	6823      	ldr	r3, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   1612e:	9a02      	ldr	r2, [sp, #8]
   16130:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
   16134:	9a03      	ldr	r2, [sp, #12]
   16136:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   1613a:	9a04      	ldr	r2, [sp, #16]
   1613c:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
   16140:	9a05      	ldr	r2, [sp, #20]
   16142:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   16146:	e7a9      	b.n	1609c <nrfx_pwm_init+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16148:	f7ff feec 	bl	15f24 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1614c:	2201      	movs	r2, #1
   1614e:	9901      	ldr	r1, [sp, #4]
   16150:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   16152:	6082      	str	r2, [r0, #8]
   16154:	e7d3      	b.n	160fe <nrfx_pwm_init+0xa6>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   16156:	f04f 33ff 	mov.w	r3, #4294967295
   1615a:	603b      	str	r3, [r7, #0]
   1615c:	e7df      	b.n	1611e <nrfx_pwm_init+0xc6>
    p_reg->PRESCALER  = base_clock;
   1615e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
   16162:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   16166:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
   1616a:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   1616c:	896a      	ldrh	r2, [r5, #10]
   1616e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->SHORTS = mask;
   16172:	2300      	movs	r3, #0
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   16174:	6822      	ldr	r2, [r4, #0]
   16176:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   1617a:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
   1617c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   16180:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16182:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
   16186:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   1618a:	6822      	ldr	r2, [r4, #0]
   1618c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
   16190:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   16194:	6822      	ldr	r2, [r4, #0]
   16196:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   1619a:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1619e:	6822      	ldr	r2, [r4, #0]
   161a0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   161a4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   161a8:	230c      	movs	r3, #12
   161aa:	fb03 f308 	mul.w	r3, r3, r8
   161ae:	58f3      	ldr	r3, [r6, r3]
   161b0:	b123      	cbz	r3, 161bc <nrfx_pwm_init+0x164>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   161b2:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   161b4:	f340 3007 	sbfx	r0, r0, #12, #8
   161b8:	f7f5 ffec 	bl	c194 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   161bc:	230c      	movs	r3, #12
   161be:	fb03 6608 	mla	r6, r3, r8, r6
   161c2:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   161c4:	4809      	ldr	r0, [pc, #36]	; (161ec <nrfx_pwm_init+0x194>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   161c6:	7233      	strb	r3, [r6, #8]
}
   161c8:	b007      	add	sp, #28
   161ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
   161ce:	4808      	ldr	r0, [pc, #32]	; (161f0 <nrfx_pwm_init+0x198>)
   161d0:	e7fa      	b.n	161c8 <nrfx_pwm_init+0x170>
   161d2:	bf00      	nop
   161d4:	00022c16 	.word	0x00022c16
   161d8:	0001f995 	.word	0x0001f995
   161dc:	00022d19 	.word	0x00022d19
   161e0:	20009a70 	.word	0x20009a70
   161e4:	00022d54 	.word	0x00022d54
   161e8:	00022c4c 	.word	0x00022c4c
   161ec:	0bad0000 	.word	0x0bad0000
   161f0:	0bad0005 	.word	0x0bad0005

000161f4 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   161f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161f8:	4688      	mov	r8, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   161fa:	210c      	movs	r1, #12
{
   161fc:	4616      	mov	r6, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   161fe:	7902      	ldrb	r2, [r0, #4]
{
   16200:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   16202:	4b30      	ldr	r3, [pc, #192]	; (162c4 <nrfx_pwm_simple_playback+0xd0>)
   16204:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   16208:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1620c:	fb01 3302 	mla	r3, r1, r2, r3
   16210:	7a1b      	ldrb	r3, [r3, #8]
{
   16212:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   16214:	b95b      	cbnz	r3, 1622e <nrfx_pwm_simple_playback+0x3a>
   16216:	492c      	ldr	r1, [pc, #176]	; (162c8 <nrfx_pwm_simple_playback+0xd4>)
   16218:	f44f 7396 	mov.w	r3, #300	; 0x12c
   1621c:	4a2b      	ldr	r2, [pc, #172]	; (162cc <nrfx_pwm_simple_playback+0xd8>)
   1621e:	482c      	ldr	r0, [pc, #176]	; (162d0 <nrfx_pwm_simple_playback+0xdc>)
   16220:	f005 f804 	bl	1b22c <assert_print>
   16224:	f44f 7196 	mov.w	r1, #300	; 0x12c
    NRFX_ASSERT(playback_count > 0);
   16228:	4828      	ldr	r0, [pc, #160]	; (162cc <nrfx_pwm_simple_playback+0xd8>)
   1622a:	f004 fff8 	bl	1b21e <assert_post_action>
   1622e:	b94e      	cbnz	r6, 16244 <nrfx_pwm_simple_playback+0x50>
   16230:	4928      	ldr	r1, [pc, #160]	; (162d4 <nrfx_pwm_simple_playback+0xe0>)
   16232:	f240 132d 	movw	r3, #301	; 0x12d
   16236:	4a25      	ldr	r2, [pc, #148]	; (162cc <nrfx_pwm_simple_playback+0xd8>)
   16238:	4825      	ldr	r0, [pc, #148]	; (162d0 <nrfx_pwm_simple_playback+0xdc>)
   1623a:	f004 fff7 	bl	1b22c <assert_print>
   1623e:	f240 112d 	movw	r1, #301	; 0x12d
   16242:	e7f1      	b.n	16228 <nrfx_pwm_simple_playback+0x34>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   16244:	f8d8 3000 	ldr.w	r3, [r8]
   16248:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   1624c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   16250:	d009      	beq.n	16266 <nrfx_pwm_simple_playback+0x72>
   16252:	4921      	ldr	r1, [pc, #132]	; (162d8 <nrfx_pwm_simple_playback+0xe4>)
   16254:	f44f 7397 	mov.w	r3, #302	; 0x12e
   16258:	4a1c      	ldr	r2, [pc, #112]	; (162cc <nrfx_pwm_simple_playback+0xd8>)
   1625a:	481d      	ldr	r0, [pc, #116]	; (162d0 <nrfx_pwm_simple_playback+0xdc>)
   1625c:	f004 ffe6 	bl	1b22c <assert_print>
   16260:	f44f 7197 	mov.w	r1, #302	; 0x12e
   16264:	e7e0      	b.n	16228 <nrfx_pwm_simple_playback+0x34>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   16266:	4642      	mov	r2, r8
   16268:	2100      	movs	r1, #0
   1626a:	6800      	ldr	r0, [r0, #0]
   1626c:	f7ff fe88 	bl	15f80 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   16270:	4642      	mov	r2, r8
   16272:	2101      	movs	r1, #1
   16274:	6820      	ldr	r0, [r4, #0]
   16276:	f7ff fe83 	bl	15f80 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   1627a:	6822      	ldr	r2, [r4, #0]
   1627c:	f006 0301 	and.w	r3, r6, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   16280:	eb03 0656 	add.w	r6, r3, r6, lsr #1
   16284:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   16288:	f015 0f01 	tst.w	r5, #1
   1628c:	6821      	ldr	r1, [r4, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   1628e:	b2ea      	uxtb	r2, r5
    if (flags & NRFX_PWM_FLAG_STOP)
   16290:	d112      	bne.n	162b8 <nrfx_pwm_simple_playback+0xc4>
    else if (flags & NRFX_PWM_FLAG_LOOP)
   16292:	f015 0502 	ands.w	r5, r5, #2
   16296:	d010      	beq.n	162ba <nrfx_pwm_simple_playback+0xc6>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   16298:	b94b      	cbnz	r3, 162ae <nrfx_pwm_simple_playback+0xba>
    p_reg->SHORTS = mask;
   1629a:	2304      	movs	r3, #4
   1629c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   162a0:	2308      	movs	r3, #8
   162a2:	4639      	mov	r1, r7
   162a4:	4620      	mov	r0, r4
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   162a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   162aa:	f007 bc67 	b.w	1db7c <start_playback>
   162ae:	2308      	movs	r3, #8
   162b0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
   162b4:	230c      	movs	r3, #12
   162b6:	e7f4      	b.n	162a2 <nrfx_pwm_simple_playback+0xae>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   162b8:	2510      	movs	r5, #16
   162ba:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   162be:	2b00      	cmp	r3, #0
   162c0:	d1f8      	bne.n	162b4 <nrfx_pwm_simple_playback+0xc0>
   162c2:	e7ed      	b.n	162a0 <nrfx_pwm_simple_playback+0xac>
   162c4:	20009a70 	.word	0x20009a70
   162c8:	00022d75 	.word	0x00022d75
   162cc:	00022d19 	.word	0x00022d19
   162d0:	0001f995 	.word	0x0001f995
   162d4:	00022da1 	.word	0x00022da1
   162d8:	00022db4 	.word	0x00022db4

000162dc <nrfx_pwm_is_stopped>:


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   162dc:	210c      	movs	r1, #12
{
   162de:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   162e0:	4a0f      	ldr	r2, [pc, #60]	; (16320 <nrfx_pwm_is_stopped+0x44>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   162e2:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   162e4:	fb01 2203 	mla	r2, r1, r3, r2
   162e8:	7a13      	ldrb	r3, [r2, #8]
   162ea:	b95b      	cbnz	r3, 16304 <nrfx_pwm_is_stopped+0x28>
   162ec:	490d      	ldr	r1, [pc, #52]	; (16324 <nrfx_pwm_is_stopped+0x48>)
   162ee:	480e      	ldr	r0, [pc, #56]	; (16328 <nrfx_pwm_is_stopped+0x4c>)
   162f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   162f4:	4a0d      	ldr	r2, [pc, #52]	; (1632c <nrfx_pwm_is_stopped+0x50>)
   162f6:	f004 ff99 	bl	1b22c <assert_print>
   162fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   162fe:	480b      	ldr	r0, [pc, #44]	; (1632c <nrfx_pwm_is_stopped+0x50>)
   16300:	f004 ff8d 	bl	1b21e <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   16304:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   16306:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16308:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   1630c:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   1630e:	b919      	cbnz	r1, 16318 <nrfx_pwm_is_stopped+0x3c>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   16310:	1e98      	subs	r0, r3, #2
   16312:	bf18      	it	ne
   16314:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   16316:	bd08      	pop	{r3, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   16318:	2001      	movs	r0, #1
   1631a:	7210      	strb	r0, [r2, #8]
        ret_val = true;
   1631c:	e7fb      	b.n	16316 <nrfx_pwm_is_stopped+0x3a>
   1631e:	bf00      	nop
   16320:	20009a70 	.word	0x20009a70
   16324:	00022d75 	.word	0x00022d75
   16328:	0001f995 	.word	0x0001f995
   1632c:	00022d19 	.word	0x00022d19

00016330 <nrfx_pwm_stop>:
{
   16330:	b538      	push	{r3, r4, r5, lr}
   16332:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   16334:	210c      	movs	r1, #12
   16336:	7902      	ldrb	r2, [r0, #4]
   16338:	4b12      	ldr	r3, [pc, #72]	; (16384 <nrfx_pwm_stop+0x54>)
{
   1633a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   1633c:	fb01 3302 	mla	r3, r1, r2, r3
   16340:	7a1b      	ldrb	r3, [r3, #8]
   16342:	b95b      	cbnz	r3, 1635c <nrfx_pwm_stop+0x2c>
   16344:	4910      	ldr	r1, [pc, #64]	; (16388 <nrfx_pwm_stop+0x58>)
   16346:	4811      	ldr	r0, [pc, #68]	; (1638c <nrfx_pwm_stop+0x5c>)
   16348:	f240 1385 	movw	r3, #389	; 0x185
   1634c:	4a10      	ldr	r2, [pc, #64]	; (16390 <nrfx_pwm_stop+0x60>)
   1634e:	f004 ff6d 	bl	1b22c <assert_print>
   16352:	f240 1185 	movw	r1, #389	; 0x185
   16356:	480e      	ldr	r0, [pc, #56]	; (16390 <nrfx_pwm_stop+0x60>)
   16358:	f004 ff61 	bl	1b21e <assert_post_action>
    p_reg->SHORTS = mask;
   1635c:	2200      	movs	r2, #0
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1635e:	6803      	ldr	r3, [r0, #0]
   16360:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16364:	2201      	movs	r2, #1
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   16366:	6803      	ldr	r3, [r0, #0]
   16368:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   1636a:	f7ff ffb7 	bl	162dc <nrfx_pwm_is_stopped>
   1636e:	b938      	cbnz	r0, 16380 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
   16370:	4620      	mov	r0, r4
   16372:	f7ff ffb3 	bl	162dc <nrfx_pwm_is_stopped>
   16376:	b918      	cbnz	r0, 16380 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
   16378:	2d00      	cmp	r5, #0
   1637a:	d1f9      	bne.n	16370 <nrfx_pwm_stop+0x40>
}
   1637c:	4628      	mov	r0, r5
   1637e:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
   16380:	2501      	movs	r5, #1
   16382:	e7fb      	b.n	1637c <nrfx_pwm_stop+0x4c>
   16384:	20009a70 	.word	0x20009a70
   16388:	00022ddd 	.word	0x00022ddd
   1638c:	0001f995 	.word	0x0001f995
   16390:	00022d19 	.word	0x00022d19

00016394 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   16394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16398:	460e      	mov	r6, r1
   1639a:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1639c:	4d0c      	ldr	r5, [pc, #48]	; (163d0 <metal_generic_dev_open+0x3c>)
   1639e:	f855 4f18 	ldr.w	r4, [r5, #24]!
   163a2:	42ac      	cmp	r4, r5
   163a4:	d103      	bne.n	163ae <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   163a6:	f06f 0012 	mvn.w	r0, #18
   163aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   163ae:	4631      	mov	r1, r6
   163b0:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   163b4:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   163b8:	f005 ff18 	bl	1c1ec <strcmp>
   163bc:	b930      	cbnz	r0, 163cc <metal_generic_dev_open+0x38>
			*device = dev;
   163be:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   163c2:	4640      	mov	r0, r8
}
   163c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   163c8:	f007 bcf7 	b.w	1ddba <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   163cc:	6824      	ldr	r4, [r4, #0]
   163ce:	e7e8      	b.n	163a2 <metal_generic_dev_open+0xe>
   163d0:	20009a7c 	.word	0x20009a7c

000163d4 <metal_bus_unregister>:
{
   163d4:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   163d6:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   163da:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   163dc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   163de:	f100 0324 	add.w	r3, r0, #36	; 0x24
   163e2:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   163e4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   163e8:	6843      	ldr	r3, [r0, #4]
{
   163ea:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   163ec:	b103      	cbz	r3, 163f0 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   163ee:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   163f0:	4b05      	ldr	r3, [pc, #20]	; (16408 <metal_bus_unregister+0x34>)
   163f2:	781a      	ldrb	r2, [r3, #0]
   163f4:	2a06      	cmp	r2, #6
   163f6:	d905      	bls.n	16404 <metal_bus_unregister+0x30>
   163f8:	685b      	ldr	r3, [r3, #4]
   163fa:	b11b      	cbz	r3, 16404 <metal_bus_unregister+0x30>
   163fc:	2007      	movs	r0, #7
   163fe:	6822      	ldr	r2, [r4, #0]
   16400:	4902      	ldr	r1, [pc, #8]	; (1640c <metal_bus_unregister+0x38>)
   16402:	4798      	blx	r3
}
   16404:	2000      	movs	r0, #0
   16406:	bd10      	pop	{r4, pc}
   16408:	20009a7c 	.word	0x20009a7c
   1640c:	00022e22 	.word	0x00022e22

00016410 <metal_bus_find>:
{
   16410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16414:	4607      	mov	r7, r0
   16416:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   16418:	4e0b      	ldr	r6, [pc, #44]	; (16448 <metal_bus_find+0x38>)
   1641a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1641e:	42b4      	cmp	r4, r6
   16420:	d102      	bne.n	16428 <metal_bus_find+0x18>
	return -ENOENT;
   16422:	f06f 0001 	mvn.w	r0, #1
   16426:	e00a      	b.n	1643e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   16428:	4639      	mov	r1, r7
   1642a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1642e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   16432:	f005 fedb 	bl	1c1ec <strcmp>
   16436:	b920      	cbnz	r0, 16442 <metal_bus_find+0x32>
   16438:	b11d      	cbz	r5, 16442 <metal_bus_find+0x32>
			*result = bus;
   1643a:	f8c5 8000 	str.w	r8, [r5]
}
   1643e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   16442:	6824      	ldr	r4, [r4, #0]
   16444:	e7eb      	b.n	1641e <metal_bus_find+0xe>
   16446:	bf00      	nop
   16448:	20009a7c 	.word	0x20009a7c

0001644c <metal_bus_register>:
{
   1644c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1644e:	4604      	mov	r4, r0
   16450:	b910      	cbnz	r0, 16458 <metal_bus_register+0xc>
		return -EINVAL;
   16452:	f06f 0015 	mvn.w	r0, #21
}
   16456:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   16458:	6800      	ldr	r0, [r0, #0]
   1645a:	2800      	cmp	r0, #0
   1645c:	d0f9      	beq.n	16452 <metal_bus_register+0x6>
   1645e:	f005 feb5 	bl	1c1cc <strlen>
   16462:	2800      	cmp	r0, #0
   16464:	d0f5      	beq.n	16452 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   16466:	2100      	movs	r1, #0
   16468:	6820      	ldr	r0, [r4, #0]
   1646a:	f7ff ffd1 	bl	16410 <metal_bus_find>
   1646e:	b1c8      	cbz	r0, 164a4 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   16470:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   16474:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   16478:	4b0c      	ldr	r3, [pc, #48]	; (164ac <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1647a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1647e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   16480:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   16484:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   16486:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   16488:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1648a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1648c:	781a      	ldrb	r2, [r3, #0]
   1648e:	2a06      	cmp	r2, #6
   16490:	d901      	bls.n	16496 <metal_bus_register+0x4a>
   16492:	685b      	ldr	r3, [r3, #4]
   16494:	b90b      	cbnz	r3, 1649a <metal_bus_register+0x4e>
	return 0;
   16496:	2000      	movs	r0, #0
   16498:	e7dd      	b.n	16456 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1649a:	2007      	movs	r0, #7
   1649c:	6822      	ldr	r2, [r4, #0]
   1649e:	4904      	ldr	r1, [pc, #16]	; (164b0 <metal_bus_register+0x64>)
   164a0:	4798      	blx	r3
   164a2:	e7f8      	b.n	16496 <metal_bus_register+0x4a>
		return -EEXIST;
   164a4:	f06f 0010 	mvn.w	r0, #16
   164a8:	e7d5      	b.n	16456 <metal_bus_register+0xa>
   164aa:	bf00      	nop
   164ac:	20009a7c 	.word	0x20009a7c
   164b0:	00022e24 	.word	0x00022e24

000164b4 <metal_device_close>:
	metal_assert(device && device->bus);
   164b4:	4601      	mov	r1, r0
{
   164b6:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   164b8:	b108      	cbz	r0, 164be <metal_device_close+0xa>
   164ba:	6840      	ldr	r0, [r0, #4]
   164bc:	b948      	cbnz	r0, 164d2 <metal_device_close+0x1e>
   164be:	4908      	ldr	r1, [pc, #32]	; (164e0 <metal_device_close+0x2c>)
   164c0:	4808      	ldr	r0, [pc, #32]	; (164e4 <metal_device_close+0x30>)
   164c2:	2351      	movs	r3, #81	; 0x51
   164c4:	4a08      	ldr	r2, [pc, #32]	; (164e8 <metal_device_close+0x34>)
   164c6:	f004 feb1 	bl	1b22c <assert_print>
   164ca:	2151      	movs	r1, #81	; 0x51
   164cc:	4806      	ldr	r0, [pc, #24]	; (164e8 <metal_device_close+0x34>)
   164ce:	f004 fea6 	bl	1b21e <assert_post_action>
	if (device->bus->ops.dev_close)
   164d2:	68c3      	ldr	r3, [r0, #12]
   164d4:	b113      	cbz	r3, 164dc <metal_device_close+0x28>
}
   164d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   164da:	4718      	bx	r3
}
   164dc:	bd10      	pop	{r4, pc}
   164de:	bf00      	nop
   164e0:	00022e6e 	.word	0x00022e6e
   164e4:	0001f995 	.word	0x0001f995
   164e8:	00022e37 	.word	0x00022e37

000164ec <metal_register_generic_device>:
{
   164ec:	b510      	push	{r4, lr}
   164ee:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   164f0:	6800      	ldr	r0, [r0, #0]
   164f2:	b910      	cbnz	r0, 164fa <metal_register_generic_device+0xe>
		return -EINVAL;
   164f4:	f06f 0015 	mvn.w	r0, #21
}
   164f8:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   164fa:	f005 fe67 	bl	1c1cc <strlen>
   164fe:	2800      	cmp	r0, #0
   16500:	d0f8      	beq.n	164f4 <metal_register_generic_device+0x8>
   16502:	68a3      	ldr	r3, [r4, #8]
   16504:	2b01      	cmp	r3, #1
   16506:	d8f5      	bhi.n	164f4 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   16508:	4b06      	ldr	r3, [pc, #24]	; (16524 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1650a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1650e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   16510:	4b05      	ldr	r3, [pc, #20]	; (16528 <metal_register_generic_device+0x3c>)
   16512:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   16514:	f103 0018 	add.w	r0, r3, #24
   16518:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1651a:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1651c:	61d9      	str	r1, [r3, #28]
	return 0;
   1651e:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   16520:	6011      	str	r1, [r2, #0]
}
   16522:	e7e9      	b.n	164f8 <metal_register_generic_device+0xc>
   16524:	20008348 	.word	0x20008348
   16528:	20009a7c 	.word	0x20009a7c

0001652c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   1652c:	b538      	push	{r3, r4, r5, lr}
   1652e:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   16530:	4c0d      	ldr	r4, [pc, #52]	; (16568 <metal_init+0x3c>)
   16532:	2220      	movs	r2, #32
   16534:	4620      	mov	r0, r4
   16536:	2100      	movs	r1, #0
   16538:	f005 fe92 	bl	1c260 <memset>

	_metal.common.log_handler   = params->log_handler;
   1653c:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1653e:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   16540:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   16542:	4623      	mov	r3, r4
   16544:	792a      	ldrb	r2, [r5, #4]
   16546:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   1654a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   1654e:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   16552:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   16556:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   1655a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   1655e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   16562:	f000 b80f 	b.w	16584 <metal_sys_init>
   16566:	bf00      	nop
   16568:	20009a7c 	.word	0x20009a7c

0001656c <metal_finish>:

void metal_finish(void)
{
   1656c:	b508      	push	{r3, lr}
	metal_sys_finish();
   1656e:	f000 f811 	bl	16594 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   16572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   16576:	2220      	movs	r2, #32
   16578:	2100      	movs	r1, #0
   1657a:	4801      	ldr	r0, [pc, #4]	; (16580 <metal_finish+0x14>)
   1657c:	f005 be70 	b.w	1c260 <memset>
   16580:	20009a7c 	.word	0x20009a7c

00016584 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   16584:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   16586:	4802      	ldr	r0, [pc, #8]	; (16590 <metal_sys_init+0xc>)
   16588:	f7ff ff60 	bl	1644c <metal_bus_register>
	return 0;
}
   1658c:	2000      	movs	r0, #0
   1658e:	bd08      	pop	{r3, pc}
   16590:	20008348 	.word	0x20008348

00016594 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   16594:	4801      	ldr	r0, [pc, #4]	; (1659c <metal_sys_finish+0x8>)
   16596:	f7ff bf1d 	b.w	163d4 <metal_bus_unregister>
   1659a:	bf00      	nop
   1659c:	20008348 	.word	0x20008348

000165a0 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   165a0:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   165a2:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   165a4:	2b06      	cmp	r3, #6
{
   165a6:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   165a8:	bf88      	it	hi
   165aa:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   165ac:	4b09      	ldr	r3, [pc, #36]	; (165d4 <metal_zephyr_log_handler+0x34>)
{
   165ae:	ac05      	add	r4, sp, #20
   165b0:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   165b4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   165b8:	4807      	ldr	r0, [pc, #28]	; (165d8 <metal_zephyr_log_handler+0x38>)
   165ba:	f004 fc2f 	bl	1ae1c <printk>

	va_start(args, format);
	vprintk(format, args);
   165be:	4621      	mov	r1, r4
   165c0:	4628      	mov	r0, r5
	va_start(args, format);
   165c2:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   165c4:	f7f2 fc62 	bl	8e8c <vprintk>
	va_end(args);
}
   165c8:	b002      	add	sp, #8
   165ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   165ce:	b003      	add	sp, #12
   165d0:	4770      	bx	lr
   165d2:	bf00      	nop
   165d4:	0001f61c 	.word	0x0001f61c
   165d8:	0001f826 	.word	0x0001f826

000165dc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   165dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165e0:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   165e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   165e4:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   165e6:	4293      	cmp	r3, r2
{
   165e8:	4617      	mov	r7, r2
   165ea:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   165ec:	d341      	bcc.n	16672 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   165ee:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   165f0:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   165f4:	42bd      	cmp	r5, r7
   165f6:	d103      	bne.n	16600 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   165f8:	2000      	movs	r0, #0
}
   165fa:	b007      	add	sp, #28
   165fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   16600:	fb0b f805 	mul.w	r8, fp, r5
   16604:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   16608:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1660a:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1660e:	1d23      	adds	r3, r4, #4
   16610:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   16612:	b9ca      	cbnz	r2, 16648 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   16614:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   16616:	6861      	ldr	r1, [r4, #4]
   16618:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1661a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1661e:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   16620:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   16622:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   16626:	1e5c      	subs	r4, r3, #1
   16628:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1662c:	425b      	negs	r3, r3
   1662e:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   16632:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   16634:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   16638:	6884      	ldr	r4, [r0, #8]
   1663a:	3306      	adds	r3, #6
   1663c:	42a1      	cmp	r1, r4
   1663e:	bf28      	it	cs
   16640:	f04f 31ff 	movcs.w	r1, #4294967295
   16644:	f007 fb85 	bl	1dd52 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   16648:	f859 3008 	ldr.w	r3, [r9, r8]
   1664c:	4630      	mov	r0, r6
   1664e:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   16650:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   16652:	b2a9      	uxth	r1, r5
   16654:	6a1b      	ldr	r3, [r3, #32]
   16656:	9301      	str	r3, [sp, #4]
   16658:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1665a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1665e:	9300      	str	r3, [sp, #0]
   16660:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   16664:	9b05      	ldr	r3, [sp, #20]
   16666:	f007 fbc6 	bl	1ddf6 <virtqueue_create>
		if (ret)
   1666a:	2800      	cmp	r0, #0
   1666c:	d1c5      	bne.n	165fa <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1666e:	3501      	adds	r5, #1
   16670:	e7c0      	b.n	165f4 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   16672:	4801      	ldr	r0, [pc, #4]	; (16678 <virtio_create_virtqueues+0x9c>)
   16674:	e7c1      	b.n	165fa <virtio_create_virtqueues+0x1e>
   16676:	bf00      	nop
   16678:	fffff440 	.word	0xfffff440

0001667c <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1667c:	b510      	push	{r4, lr}
	if (vq) {
   1667e:	4604      	mov	r4, r0
   16680:	b190      	cbz	r0, 166a8 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   16682:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   16684:	8943      	ldrh	r3, [r0, #10]
   16686:	429a      	cmp	r2, r3
   16688:	d009      	beq.n	1669e <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1668a:	4b08      	ldr	r3, [pc, #32]	; (166ac <virtqueue_free+0x30>)
   1668c:	781a      	ldrb	r2, [r3, #0]
   1668e:	2a03      	cmp	r2, #3
   16690:	d905      	bls.n	1669e <virtqueue_free+0x22>
   16692:	685b      	ldr	r3, [r3, #4]
   16694:	b11b      	cbz	r3, 1669e <virtqueue_free+0x22>
   16696:	6842      	ldr	r2, [r0, #4]
   16698:	4905      	ldr	r1, [pc, #20]	; (166b0 <virtqueue_free+0x34>)
   1669a:	2004      	movs	r0, #4
   1669c:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1669e:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   166a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   166a4:	f008 b935 	b.w	1e912 <k_free>
   166a8:	bd10      	pop	{r4, pc}
   166aa:	bf00      	nop
   166ac:	20009a7c 	.word	0x20009a7c
   166b0:	00022f1c 	.word	0x00022f1c

000166b4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   166b4:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   166b6:	8944      	ldrh	r4, [r0, #10]
   166b8:	428c      	cmp	r4, r1
   166ba:	d312      	bcc.n	166e2 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   166bc:	6a03      	ldr	r3, [r0, #32]
   166be:	3c01      	subs	r4, #1
   166c0:	885d      	ldrh	r5, [r3, #2]
   166c2:	402c      	ands	r4, r5
   166c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   166c8:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   166ca:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   166cc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   166d0:	6a02      	ldr	r2, [r0, #32]
   166d2:	8853      	ldrh	r3, [r2, #2]
   166d4:	3301      	adds	r3, #1
   166d6:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   166d8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   166da:	3301      	adds	r3, #1
   166dc:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   166de:	2000      	movs	r0, #0
}
   166e0:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   166e2:	4801      	ldr	r0, [pc, #4]	; (166e8 <virtqueue_add_consumed_buffer+0x34>)
   166e4:	e7fc      	b.n	166e0 <virtqueue_add_consumed_buffer+0x2c>
   166e6:	bf00      	nop
   166e8:	fffff441 	.word	0xfffff441

000166ec <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   166ec:	b430      	push	{r4, r5}
   166ee:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   166f0:	b148      	cbz	r0, 16706 <rpmsg_send_offchannel_raw+0x1a>
   166f2:	6a00      	ldr	r0, [r0, #32]
   166f4:	b138      	cbz	r0, 16706 <rpmsg_send_offchannel_raw+0x1a>
   166f6:	b133      	cbz	r3, 16706 <rpmsg_send_offchannel_raw+0x1a>
   166f8:	3401      	adds	r4, #1
   166fa:	d004      	beq.n	16706 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   166fc:	6f44      	ldr	r4, [r0, #116]	; 0x74
   166fe:	b114      	cbz	r4, 16706 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16700:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   16702:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16704:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   16706:	4801      	ldr	r0, [pc, #4]	; (1670c <rpmsg_send_offchannel_raw+0x20>)
}
   16708:	bc30      	pop	{r4, r5}
   1670a:	4770      	bx	lr
   1670c:	fffff82d 	.word	0xfffff82d

00016710 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   16710:	b430      	push	{r4, r5}
   16712:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   16714:	b150      	cbz	r0, 1672c <rpmsg_send_offchannel_nocopy+0x1c>
   16716:	6a00      	ldr	r0, [r0, #32]
   16718:	b140      	cbz	r0, 1672c <rpmsg_send_offchannel_nocopy+0x1c>
   1671a:	b13b      	cbz	r3, 1672c <rpmsg_send_offchannel_nocopy+0x1c>
   1671c:	3401      	adds	r4, #1
   1671e:	d005      	beq.n	1672c <rpmsg_send_offchannel_nocopy+0x1c>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   16720:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
   16724:	b114      	cbz	r4, 1672c <rpmsg_send_offchannel_nocopy+0x1c>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   16726:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   16728:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1672a:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1672c:	4801      	ldr	r0, [pc, #4]	; (16734 <rpmsg_send_offchannel_nocopy+0x24>)
}
   1672e:	bc30      	pop	{r4, r5}
   16730:	4770      	bx	lr
   16732:	bf00      	nop
   16734:	fffff82d 	.word	0xfffff82d

00016738 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   16738:	b570      	push	{r4, r5, r6, lr}
   1673a:	460c      	mov	r4, r1
   1673c:	4611      	mov	r1, r2
   1673e:	4605      	mov	r5, r0
   16740:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   16742:	4b0c      	ldr	r3, [pc, #48]	; (16774 <rpmsg_register_endpoint+0x3c>)
   16744:	2220      	movs	r2, #32
   16746:	2900      	cmp	r1, #0
   16748:	bf08      	it	eq
   1674a:	4619      	moveq	r1, r3
   1674c:	4620      	mov	r0, r4
   1674e:	f005 fd29 	bl	1c1a4 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   16752:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   16754:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   16756:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   16758:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1675a:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1675c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1675e:	9b06      	ldr	r3, [sp, #24]
   16760:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   16762:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   16764:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   16768:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1676c:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1676e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16770:	6013      	str	r3, [r2, #0]
}
   16772:	bd70      	pop	{r4, r5, r6, pc}
   16774:	0002200b 	.word	0x0002200b

00016778 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   16778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1677c:	460e      	mov	r6, r1
   1677e:	4691      	mov	r9, r2
   16780:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   16782:	4605      	mov	r5, r0
{
   16784:	b085      	sub	sp, #20
	if (!ept)
   16786:	2800      	cmp	r0, #0
   16788:	d068      	beq.n	1685c <rpmsg_create_ept+0xe4>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1678a:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1678e:	4640      	mov	r0, r8
   16790:	f007 fcca 	bl	1e128 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   16794:	1c78      	adds	r0, r7, #1
   16796:	d141      	bne.n	1681c <rpmsg_create_ept+0xa4>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   16798:	6cb4      	ldr	r4, [r6, #72]	; 0x48
   1679a:	f106 0348 	add.w	r3, r6, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1679e:	f014 0401 	ands.w	r4, r4, #1
   167a2:	d00b      	beq.n	167bc <rpmsg_create_ept+0x44>
	for (bit = start;
   167a4:	2400      	movs	r4, #0
	     bit++)
   167a6:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   167a8:	2c80      	cmp	r4, #128	; 0x80
   167aa:	d055      	beq.n	16858 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   167ac:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   167ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   167b2:	f004 011f 	and.w	r1, r4, #31
   167b6:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   167b8:	07d1      	lsls	r1, r2, #31
   167ba:	d4f4      	bmi.n	167a6 <rpmsg_create_ept+0x2e>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   167bc:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   167be:	0960      	lsrs	r0, r4, #5
   167c0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   167c4:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   167c8:	f004 041f 	and.w	r4, r4, #31
   167cc:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   167ce:	430a      	orrs	r2, r1
   167d0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   167d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   167d6:	464a      	mov	r2, r9
   167d8:	9302      	str	r3, [sp, #8]
   167da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   167dc:	4629      	mov	r1, r5
   167de:	9301      	str	r3, [sp, #4]
   167e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   167e2:	4630      	mov	r0, r6
   167e4:	9300      	str	r3, [sp, #0]
   167e6:	463b      	mov	r3, r7
   167e8:	f7ff ffa6 	bl	16738 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   167ec:	4640      	mov	r0, r8
   167ee:	f001 fa71 	bl	17cd4 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   167f2:	782c      	ldrb	r4, [r5, #0]
   167f4:	b174      	cbz	r4, 16814 <rpmsg_create_ept+0x9c>
   167f6:	f896 4088 	ldrb.w	r4, [r6, #136]	; 0x88
   167fa:	b15c      	cbz	r4, 16814 <rpmsg_create_ept+0x9c>
   167fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   167fe:	3301      	adds	r3, #1
   16800:	d12e      	bne.n	16860 <rpmsg_create_ept+0xe8>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   16802:	2100      	movs	r1, #0
   16804:	4628      	mov	r0, r5
   16806:	f007 fcbe 	bl	1e186 <rpmsg_send_ns_message>

	if (status)
   1680a:	4604      	mov	r4, r0
   1680c:	b110      	cbz	r0, 16814 <rpmsg_create_ept+0x9c>
		rpmsg_unregister_endpoint(ept);
   1680e:	4628      	mov	r0, r5
   16810:	f007 fc90 	bl	1e134 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   16814:	4620      	mov	r0, r4
   16816:	b005      	add	sp, #20
   16818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1681c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   16820:	d3d8      	bcc.n	167d4 <rpmsg_create_ept+0x5c>
	addr -= RPMSG_RESERVED_ADDRESSES;
   16822:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   16826:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   16828:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   1682c:	d80f      	bhi.n	1684e <rpmsg_create_ept+0xd6>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1682e:	0958      	lsrs	r0, r3, #5
   16830:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   16834:	f003 031f 	and.w	r3, r3, #31
   16838:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1683c:	07d2      	lsls	r2, r2, #31
   1683e:	d40b      	bmi.n	16858 <rpmsg_create_ept+0xe0>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16840:	2201      	movs	r2, #1
   16842:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   16846:	4323      	orrs	r3, r4
   16848:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1684c:	e7c2      	b.n	167d4 <rpmsg_create_ept+0x5c>
   1684e:	4c05      	ldr	r4, [pc, #20]	; (16864 <rpmsg_create_ept+0xec>)
   16850:	4640      	mov	r0, r8
   16852:	f001 fa3f 	bl	17cd4 <z_impl_k_sem_give>
}
   16856:	e7dd      	b.n	16814 <rpmsg_create_ept+0x9c>
			status = RPMSG_ERR_ADDR;
   16858:	4c03      	ldr	r4, [pc, #12]	; (16868 <rpmsg_create_ept+0xf0>)
   1685a:	e7f9      	b.n	16850 <rpmsg_create_ept+0xd8>
		return RPMSG_ERR_PARAM;
   1685c:	4c01      	ldr	r4, [pc, #4]	; (16864 <rpmsg_create_ept+0xec>)
   1685e:	e7d9      	b.n	16814 <rpmsg_create_ept+0x9c>
   16860:	2400      	movs	r4, #0
   16862:	e7d7      	b.n	16814 <rpmsg_create_ept+0x9c>
   16864:	fffff82d 	.word	0xfffff82d
   16868:	fffff829 	.word	0xfffff829

0001686c <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   1686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   16870:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   16874:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   16878:	2300      	movs	r3, #0
{
   1687a:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1687c:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1687e:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   16882:	2310      	movs	r3, #16
	rp_hdr.src = src;
   16884:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   16888:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1688a:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   1688c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	rp_hdr.len = len;
   16890:	f8ad 501c 	strh.w	r5, [sp, #28]
   16894:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16896:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   16898:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1689c:	42b1      	cmp	r1, r6
   1689e:	bf28      	it	cs
   168a0:	f04f 31ff 	movcs.w	r1, #4294967295
   168a4:	eb0d 0203 	add.w	r2, sp, r3
   168a8:	f007 fa19 	bl	1dcde <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   168ac:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   168ae:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   168b0:	d00b      	beq.n	168ca <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   168b2:	4924      	ldr	r1, [pc, #144]	; (16944 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   168b4:	f240 138b 	movw	r3, #395	; 0x18b
   168b8:	4a23      	ldr	r2, [pc, #140]	; (16948 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   168ba:	4824      	ldr	r0, [pc, #144]	; (1694c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   168bc:	f004 fcb6 	bl	1b22c <assert_print>
   168c0:	f240 118b 	movw	r1, #395	; 0x18b
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   168c4:	4820      	ldr	r0, [pc, #128]	; (16948 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   168c6:	f004 fcaa 	bl	1b21e <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   168ca:	f104 0658 	add.w	r6, r4, #88	; 0x58
   168ce:	4630      	mov	r0, r6
   168d0:	f007 fce8 	bl	1e2a4 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   168d4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   168d8:	699b      	ldr	r3, [r3, #24]
   168da:	b9d3      	cbnz	r3, 16912 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   168dc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   168e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   168e4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   168e8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   168ea:	b9cb      	cbnz	r3, 16920 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   168ec:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   168f0:	f8cd 8000 	str.w	r8, [sp]
   168f4:	2201      	movs	r2, #1
   168f6:	a902      	add	r1, sp, #8
   168f8:	f007 faaa 	bl	1de50 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   168fc:	b1b0      	cbz	r0, 1692c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   168fe:	4914      	ldr	r1, [pc, #80]	; (16950 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   16900:	f44f 73cc 	mov.w	r3, #408	; 0x198
   16904:	4a10      	ldr	r2, [pc, #64]	; (16948 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   16906:	4811      	ldr	r0, [pc, #68]	; (1694c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   16908:	f004 fc90 	bl	1b22c <assert_print>
   1690c:	f44f 71cc 	mov.w	r1, #408	; 0x198
   16910:	e7d8      	b.n	168c4 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   16912:	4639      	mov	r1, r7
   16914:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16918:	f007 fb30 	bl	1df7c <virtqueue_get_buffer_length>
   1691c:	4602      	mov	r2, r0
   1691e:	e7df      	b.n	168e0 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   16920:	2b01      	cmp	r3, #1
   16922:	d103      	bne.n	1692c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   16924:	4639      	mov	r1, r7
   16926:	f7ff fec5 	bl	166b4 <virtqueue_add_consumed_buffer>
   1692a:	e7e7      	b.n	168fc <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1692c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16930:	f007 fbab 	bl	1e08a <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   16934:	4630      	mov	r0, r6
   16936:	f007 fcb3 	bl	1e2a0 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   1693a:	4628      	mov	r0, r5
   1693c:	b008      	add	sp, #32
   1693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16942:	bf00      	nop
   16944:	00022f81 	.word	0x00022f81
   16948:	00022f3e 	.word	0x00022f3e
   1694c:	0001f995 	.word	0x0001f995
   16950:	00022f9a 	.word	0x00022f9a

00016954 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   16954:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   16958:	6803      	ldr	r3, [r0, #0]
   1695a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   1695c:	f107 0658 	add.w	r6, r7, #88	; 0x58
   16960:	4630      	mov	r0, r6
   16962:	f007 fc9f 	bl	1e2a4 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   16966:	4638      	mov	r0, r7
   16968:	f10d 020a 	add.w	r2, sp, #10
   1696c:	a903      	add	r1, sp, #12
   1696e:	f007 fce7 	bl	1e340 <rpmsg_virtio_get_rx_buffer>
   16972:	4604      	mov	r4, r0
   16974:	4630      	mov	r0, r6
   16976:	f007 fc93 	bl	1e2a0 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   1697a:	2c00      	cmp	r4, #0
   1697c:	d04f      	beq.n	16a1e <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1697e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   16982:	4630      	mov	r0, r6
   16984:	60a3      	str	r3, [r4, #8]
   16986:	f007 fc8d 	bl	1e2a4 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1698a:	f04f 33ff 	mov.w	r3, #4294967295
   1698e:	2100      	movs	r1, #0
   16990:	4638      	mov	r0, r7
   16992:	6862      	ldr	r2, [r4, #4]
   16994:	f007 fc2a 	bl	1e1ec <rpmsg_get_endpoint>
   16998:	4605      	mov	r5, r0
   1699a:	4630      	mov	r0, r6
   1699c:	f007 fc80 	bl	1e2a0 <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   169a0:	b1ed      	cbz	r5, 169de <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   169a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   169a4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   169a6:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   169a8:	bf08      	it	eq
   169aa:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   169ac:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   169ae:	bf08      	it	eq
   169b0:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   169b2:	6823      	ldr	r3, [r4, #0]
   169b4:	89a2      	ldrh	r2, [r4, #12]
   169b6:	9100      	str	r1, [sp, #0]
   169b8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   169bc:	f104 0110 	add.w	r1, r4, #16
   169c0:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   169c2:	2800      	cmp	r0, #0
   169c4:	da0b      	bge.n	169de <rpmsg_virtio_rx_callback+0x8a>
   169c6:	4917      	ldr	r1, [pc, #92]	; (16a24 <rpmsg_virtio_rx_callback+0xd0>)
   169c8:	4817      	ldr	r0, [pc, #92]	; (16a28 <rpmsg_virtio_rx_callback+0xd4>)
   169ca:	f44f 7302 	mov.w	r3, #520	; 0x208
   169ce:	4a17      	ldr	r2, [pc, #92]	; (16a2c <rpmsg_virtio_rx_callback+0xd8>)
   169d0:	f004 fc2c 	bl	1b22c <assert_print>
   169d4:	f44f 7102 	mov.w	r1, #520	; 0x208
   169d8:	4814      	ldr	r0, [pc, #80]	; (16a2c <rpmsg_virtio_rx_callback+0xd8>)
   169da:	f004 fc20 	bl	1b21e <assert_post_action>
   169de:	4630      	mov	r0, r6
   169e0:	f007 fc60 	bl	1e2a4 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   169e4:	68a3      	ldr	r3, [r4, #8]
   169e6:	2b00      	cmp	r3, #0
   169e8:	db06      	blt.n	169f8 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   169ea:	4621      	mov	r1, r4
   169ec:	4638      	mov	r0, r7
   169ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   169f2:	9a03      	ldr	r2, [sp, #12]
   169f4:	f007 fcbb 	bl	1e36e <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   169f8:	4638      	mov	r0, r7
   169fa:	f10d 020a 	add.w	r2, sp, #10
   169fe:	a903      	add	r1, sp, #12
   16a00:	f007 fc9e 	bl	1e340 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   16a04:	4604      	mov	r4, r0
   16a06:	b118      	cbz	r0, 16a10 <rpmsg_virtio_rx_callback+0xbc>
   16a08:	4630      	mov	r0, r6
   16a0a:	f007 fc49 	bl	1e2a0 <k_sem_give>
	while (rp_hdr) {
   16a0e:	e7b6      	b.n	1697e <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   16a10:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   16a14:	f007 fb39 	bl	1e08a <virtqueue_kick>
   16a18:	4630      	mov	r0, r6
   16a1a:	f007 fc41 	bl	1e2a0 <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   16a1e:	b004      	add	sp, #16
   16a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a24:	00022fa6 	.word	0x00022fa6
   16a28:	0001f995 	.word	0x0001f995
   16a2c:	00022f3e 	.word	0x00022f3e

00016a30 <rpmsg_virtio_send_offchannel_raw>:
{
   16a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16a34:	b085      	sub	sp, #20
   16a36:	460f      	mov	r7, r1
   16a38:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   16a3a:	a903      	add	r1, sp, #12
   16a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   16a3e:	4606      	mov	r6, r0
   16a40:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   16a42:	f007 fcda 	bl	1e3fa <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   16a46:	4604      	mov	r4, r0
   16a48:	b350      	cbz	r0, 16aa0 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   16a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   16a4c:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   16a4e:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
   16a52:	429d      	cmp	r5, r3
   16a54:	bfa8      	it	ge
   16a56:	461d      	movge	r5, r3
   16a58:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16a5a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   16a5e:	1a61      	subs	r1, r4, r1
   16a60:	4561      	cmp	r1, ip
   16a62:	bf28      	it	cs
   16a64:	f04f 31ff 	movcs.w	r1, #4294967295
   16a68:	462b      	mov	r3, r5
   16a6a:	464a      	mov	r2, r9
   16a6c:	f007 f937 	bl	1dcde <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   16a70:	4285      	cmp	r5, r0
   16a72:	d00b      	beq.n	16a8c <rpmsg_virtio_send_offchannel_raw+0x5c>
   16a74:	490b      	ldr	r1, [pc, #44]	; (16aa4 <rpmsg_virtio_send_offchannel_raw+0x74>)
   16a76:	480c      	ldr	r0, [pc, #48]	; (16aa8 <rpmsg_virtio_send_offchannel_raw+0x78>)
   16a78:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   16a7c:	4a0b      	ldr	r2, [pc, #44]	; (16aac <rpmsg_virtio_send_offchannel_raw+0x7c>)
   16a7e:	f004 fbd5 	bl	1b22c <assert_print>
   16a82:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   16a86:	4809      	ldr	r0, [pc, #36]	; (16aac <rpmsg_virtio_send_offchannel_raw+0x7c>)
   16a88:	f004 fbc9 	bl	1b21e <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   16a8c:	4623      	mov	r3, r4
   16a8e:	4642      	mov	r2, r8
   16a90:	4639      	mov	r1, r7
   16a92:	4630      	mov	r0, r6
   16a94:	9500      	str	r5, [sp, #0]
   16a96:	f7ff fee9 	bl	1686c <rpmsg_virtio_send_offchannel_nocopy>
}
   16a9a:	b005      	add	sp, #20
   16a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   16aa0:	4803      	ldr	r0, [pc, #12]	; (16ab0 <rpmsg_virtio_send_offchannel_raw+0x80>)
   16aa2:	e7fa      	b.n	16a9a <rpmsg_virtio_send_offchannel_raw+0x6a>
   16aa4:	00022fb2 	.word	0x00022fb2
   16aa8:	0001f995 	.word	0x0001f995
   16aac:	00022f3e 	.word	0x00022f3e
   16ab0:	fffff82e 	.word	0xfffff82e

00016ab4 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   16ab4:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   16ab6:	4604      	mov	r4, r0
   16ab8:	b1e0      	cbz	r0, 16af4 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   16aba:	f100 0558 	add.w	r5, r0, #88	; 0x58
   16abe:	4628      	mov	r0, r5
   16ac0:	f007 fbf0 	bl	1e2a4 <__metal_mutex_acquire>
   16ac4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   16ac8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   16aca:	b953      	cbnz	r3, 16ae2 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   16acc:	f8d4 408c 	ldr.w	r4, [r4, #140]	; 0x8c
   16ad0:	3c10      	subs	r4, #16
	if (length <= 0) {
   16ad2:	2c00      	cmp	r4, #0
   16ad4:	dc00      	bgt.n	16ad8 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   16ad6:	4c08      	ldr	r4, [pc, #32]	; (16af8 <rpmsg_virtio_get_buffer_size+0x44>)
   16ad8:	4628      	mov	r0, r5
   16ada:	f007 fbe1 	bl	1e2a0 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   16ade:	4620      	mov	r0, r4
   16ae0:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   16ae2:	2b01      	cmp	r3, #1
   16ae4:	d1f7      	bne.n	16ad6 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   16ae6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16aea:	f007 fb05 	bl	1e0f8 <virtqueue_get_desc_size>
   16aee:	f1a0 0410 	sub.w	r4, r0, #16
   16af2:	e7ee      	b.n	16ad2 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   16af4:	4c01      	ldr	r4, [pc, #4]	; (16afc <rpmsg_virtio_get_buffer_size+0x48>)
   16af6:	e7f2      	b.n	16ade <rpmsg_virtio_get_buffer_size+0x2a>
   16af8:	fffff82e 	.word	0xfffff82e
   16afc:	fffff82d 	.word	0xfffff82d

00016b00 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   16b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b04:	460d      	mov	r5, r1
   16b06:	b08a      	sub	sp, #40	; 0x28
   16b08:	4690      	mov	r8, r2
   16b0a:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   16b0e:	228c      	movs	r2, #140	; 0x8c
   16b10:	2100      	movs	r1, #0
{
   16b12:	4604      	mov	r4, r0
   16b14:	461e      	mov	r6, r3
	memset(rdev, 0, sizeof(*rdev));
   16b16:	f005 fba3 	bl	1c260 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16b1a:	2201      	movs	r2, #1
   16b1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16b20:	4611      	mov	r1, r2
   16b22:	f007 fd5e 	bl	1e5e2 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   16b26:	4b71      	ldr	r3, [pc, #452]	; (16cec <rpmsg_init_vdev_with_config+0x1ec>)
	rvdev->vdev = vdev;
   16b28:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	rdev->ns_bind_cb = ns_bind_cb;
   16b2c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   16b30:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   16b32:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   16b34:	4b6e      	ldr	r3, [pc, #440]	; (16cf0 <rpmsg_init_vdev_with_config+0x1f0>)
   16b36:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   16b38:	4b6e      	ldr	r3, [pc, #440]	; (16cf4 <rpmsg_init_vdev_with_config+0x1f4>)
   16b3a:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   16b3c:	4b6e      	ldr	r3, [pc, #440]	; (16cf8 <rpmsg_init_vdev_with_config+0x1f8>)
   16b3e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   16b42:	4b6e      	ldr	r3, [pc, #440]	; (16cfc <rpmsg_init_vdev_with_config+0x1fc>)
   16b44:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   16b48:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   16b4c:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   16b50:	f1b8 0f00 	cmp.w	r8, #0
   16b54:	d165      	bne.n	16c22 <rpmsg_init_vdev_with_config+0x122>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   16b56:	b927      	cbnz	r7, 16b62 <rpmsg_init_vdev_with_config+0x62>
			return RPMSG_ERR_PARAM;
   16b58:	4f69      	ldr	r7, [pc, #420]	; (16d00 <rpmsg_init_vdev_with_config+0x200>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   16b5a:	4638      	mov	r0, r7
   16b5c:	b00a      	add	sp, #40	; 0x28
   16b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rvdev->config = *config;
   16b62:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   16b66:	e897 0003 	ldmia.w	r7, {r0, r1}
   16b6a:	e883 0003 	stmia.w	r3, {r0, r1}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   16b6e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   16b72:	6a03      	ldr	r3, [r0, #32]
   16b74:	689b      	ldr	r3, [r3, #8]
   16b76:	4798      	blx	r3
   16b78:	2300      	movs	r3, #0
   16b7a:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   16b7c:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   16b80:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   16b82:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	if (role == RPMSG_HOST) {
   16b86:	f1b8 0f00 	cmp.w	r8, #0
   16b8a:	d15e      	bne.n	16c4a <rpmsg_init_vdev_with_config+0x14a>
		if (!shpool)
   16b8c:	f1b9 0f00 	cmp.w	r9, #0
   16b90:	d0e2      	beq.n	16b58 <rpmsg_init_vdev_with_config+0x58>
		if (!shpool->size)
   16b92:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16b96:	2b00      	cmp	r3, #0
   16b98:	f000 80a5 	beq.w	16ce6 <rpmsg_init_vdev_with_config+0x1e6>
		vq_names[0] = "rx_vq";
   16b9c:	4b59      	ldr	r3, [pc, #356]	; (16d04 <rpmsg_init_vdev_with_config+0x204>)
		rvdev->shpool = shpool;
   16b9e:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
		vq_names[0] = "rx_vq";
   16ba2:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   16ba4:	4b58      	ldr	r3, [pc, #352]	; (16d08 <rpmsg_init_vdev_with_config+0x208>)
   16ba6:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   16ba8:	4b58      	ldr	r3, [pc, #352]	; (16d0c <rpmsg_init_vdev_with_config+0x20c>)
   16baa:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   16bac:	4b58      	ldr	r3, [pc, #352]	; (16d10 <rpmsg_init_vdev_with_config+0x210>)
   16bae:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16bb0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16bb2:	681b      	ldr	r3, [r3, #0]
   16bb4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[1].vq;
   16bb8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16bba:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   16bbc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   16bc0:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   16bc2:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
   16bc6:	9300      	str	r3, [sp, #0]
   16bc8:	2202      	movs	r2, #2
   16bca:	2100      	movs	r1, #0
   16bcc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   16bd0:	ab04      	add	r3, sp, #16
   16bd2:	f7ff fd03 	bl	165dc <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   16bd6:	4607      	mov	r7, r0
   16bd8:	2800      	cmp	r0, #0
   16bda:	d1be      	bne.n	16b5a <rpmsg_init_vdev_with_config+0x5a>
	virtqueue_disable_cb(rvdev->svq);
   16bdc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16be0:	f007 fa25 	bl	1e02e <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   16be4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16be6:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   16be8:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   16bea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16bec:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   16bee:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   16bf0:	f1b8 0f00 	cmp.w	r8, #0
   16bf4:	d15f      	bne.n	16cb6 <rpmsg_init_vdev_with_config+0x1b6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16bf6:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   16bf8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   16bfc:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16bfe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16c02:	895b      	ldrh	r3, [r3, #10]
   16c04:	4553      	cmp	r3, sl
   16c06:	d832      	bhi.n	16c6e <rpmsg_init_vdev_with_config+0x16e>
	if (rdev->support_ns) {
   16c08:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
	list->next = list;
   16c0c:	e9c4 4400 	strd	r4, r4, [r4]
   16c10:	2b00      	cmp	r3, #0
   16c12:	d157      	bne.n	16cc4 <rpmsg_init_vdev_with_config+0x1c4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   16c14:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16c18:	2104      	movs	r1, #4
   16c1a:	6a03      	ldr	r3, [r0, #32]
   16c1c:	685b      	ldr	r3, [r3, #4]
   16c1e:	4798      	blx	r3
}
   16c20:	e79b      	b.n	16b5a <rpmsg_init_vdev_with_config+0x5a>
	if (role == RPMSG_REMOTE) {
   16c22:	f1b8 0f01 	cmp.w	r8, #1
   16c26:	d1a2      	bne.n	16b6e <rpmsg_init_vdev_with_config+0x6e>
		status = rpmsg_virtio_get_status(rvdev);
   16c28:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	return rvdev->vdev->func->get_status(rvdev->vdev);
   16c2c:	6a03      	ldr	r3, [r0, #32]
   16c2e:	681b      	ldr	r3, [r3, #0]
   16c30:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   16c32:	0642      	lsls	r2, r0, #25
   16c34:	d506      	bpl.n	16c44 <rpmsg_init_vdev_with_config+0x144>
			rpmsg_virtio_set_status(rvdev, 0);
   16c36:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16c3a:	2100      	movs	r1, #0
   16c3c:	6a03      	ldr	r3, [r0, #32]
   16c3e:	685b      	ldr	r3, [r3, #4]
   16c40:	4798      	blx	r3
}
   16c42:	e7f1      	b.n	16c28 <rpmsg_init_vdev_with_config+0x128>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   16c44:	0743      	lsls	r3, r0, #29
   16c46:	d5ef      	bpl.n	16c28 <rpmsg_init_vdev_with_config+0x128>
   16c48:	e791      	b.n	16b6e <rpmsg_init_vdev_with_config+0x6e>
	if (role == RPMSG_REMOTE) {
   16c4a:	f1b8 0f01 	cmp.w	r8, #1
   16c4e:	d1b7      	bne.n	16bc0 <rpmsg_init_vdev_with_config+0xc0>
		vq_names[0] = "tx_vq";
   16c50:	4b2d      	ldr	r3, [pc, #180]	; (16d08 <rpmsg_init_vdev_with_config+0x208>)
   16c52:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   16c54:	4b2b      	ldr	r3, [pc, #172]	; (16d04 <rpmsg_init_vdev_with_config+0x204>)
   16c56:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   16c58:	4b2d      	ldr	r3, [pc, #180]	; (16d10 <rpmsg_init_vdev_with_config+0x210>)
   16c5a:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   16c5c:	4b2b      	ldr	r3, [pc, #172]	; (16d0c <rpmsg_init_vdev_with_config+0x20c>)
   16c5e:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   16c60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16c62:	699b      	ldr	r3, [r3, #24]
   16c64:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[0].vq;
   16c68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16c6a:	681b      	ldr	r3, [r3, #0]
   16c6c:	e7a6      	b.n	16bbc <rpmsg_init_vdev_with_config+0xbc>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   16c6e:	4648      	mov	r0, r9
   16c70:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   16c74:	f007 fbb3 	bl	1e3de <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   16c78:	4605      	mov	r5, r0
   16c7a:	b1c8      	cbz	r0, 16cb0 <rpmsg_init_vdev_with_config+0x1b0>
   16c7c:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   16c7e:	9008      	str	r0, [sp, #32]
   16c80:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16c82:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   16c84:	2200      	movs	r2, #0
   16c86:	4281      	cmp	r1, r0
   16c88:	bf28      	it	cs
   16c8a:	f04f 31ff 	movcs.w	r1, #4294967295
   16c8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   16c92:	4630      	mov	r0, r6
   16c94:	f007 f85d 	bl	1dd52 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   16c98:	9500      	str	r5, [sp, #0]
   16c9a:	2301      	movs	r3, #1
   16c9c:	2200      	movs	r2, #0
   16c9e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   16ca2:	a908      	add	r1, sp, #32
   16ca4:	f007 f8d4 	bl	1de50 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   16ca8:	b918      	cbnz	r0, 16cb2 <rpmsg_init_vdev_with_config+0x1b2>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16caa:	f10a 0a01 	add.w	sl, sl, #1
   16cae:	e7a6      	b.n	16bfe <rpmsg_init_vdev_with_config+0xfe>
				return RPMSG_ERR_NO_BUFF;
   16cb0:	4818      	ldr	r0, [pc, #96]	; (16d14 <rpmsg_init_vdev_with_config+0x214>)
   16cb2:	4607      	mov	r7, r0
   16cb4:	e751      	b.n	16b5a <rpmsg_init_vdev_with_config+0x5a>
	if (rdev->support_ns) {
   16cb6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   16cba:	e9c4 4400 	strd	r4, r4, [r4]
   16cbe:	2b00      	cmp	r3, #0
   16cc0:	f43f af4b 	beq.w	16b5a <rpmsg_init_vdev_with_config+0x5a>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   16cc4:	2300      	movs	r3, #0
   16cc6:	9302      	str	r3, [sp, #8]
   16cc8:	4b13      	ldr	r3, [pc, #76]	; (16d18 <rpmsg_init_vdev_with_config+0x218>)
   16cca:	4620      	mov	r0, r4
   16ccc:	9301      	str	r3, [sp, #4]
   16cce:	2335      	movs	r3, #53	; 0x35
   16cd0:	4a12      	ldr	r2, [pc, #72]	; (16d1c <rpmsg_init_vdev_with_config+0x21c>)
   16cd2:	9300      	str	r3, [sp, #0]
   16cd4:	f104 0108 	add.w	r1, r4, #8
   16cd8:	f7ff fd2e 	bl	16738 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   16cdc:	f1b8 0f00 	cmp.w	r8, #0
   16ce0:	f47f af3b 	bne.w	16b5a <rpmsg_init_vdev_with_config+0x5a>
   16ce4:	e796      	b.n	16c14 <rpmsg_init_vdev_with_config+0x114>
			return RPMSG_ERR_NO_BUFF;
   16ce6:	4f0b      	ldr	r7, [pc, #44]	; (16d14 <rpmsg_init_vdev_with_config+0x214>)
   16ce8:	e737      	b.n	16b5a <rpmsg_init_vdev_with_config+0x5a>
   16cea:	bf00      	nop
   16cec:	00016a31 	.word	0x00016a31
   16cf0:	0001e291 	.word	0x0001e291
   16cf4:	0001e3a7 	.word	0x0001e3a7
   16cf8:	0001e3fb 	.word	0x0001e3fb
   16cfc:	0001686d 	.word	0x0001686d
   16d00:	fffff82d 	.word	0xfffff82d
   16d04:	00022fc0 	.word	0x00022fc0
   16d08:	00022fc6 	.word	0x00022fc6
   16d0c:	00016955 	.word	0x00016955
   16d10:	0001e29f 	.word	0x0001e29f
   16d14:	fffff82e 	.word	0xfffff82e
   16d18:	0001e2b1 	.word	0x0001e2b1
   16d1c:	00022fcc 	.word	0x00022fcc

00016d20 <rpmsg_init_vdev>:
{
   16d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16d22:	4605      	mov	r5, r0
   16d24:	460e      	mov	r6, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   16d26:	4907      	ldr	r1, [pc, #28]	; (16d44 <rpmsg_init_vdev+0x24>)
   16d28:	ac02      	add	r4, sp, #8
   16d2a:	c903      	ldmia	r1, {r0, r1}
   16d2c:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   16d30:	9908      	ldr	r1, [sp, #32]
   16d32:	4628      	mov	r0, r5
   16d34:	9100      	str	r1, [sp, #0]
   16d36:	9401      	str	r4, [sp, #4]
   16d38:	4631      	mov	r1, r6
   16d3a:	f7ff fee1 	bl	16b00 <rpmsg_init_vdev_with_config>
}
   16d3e:	b004      	add	sp, #16
   16d40:	bd70      	pop	{r4, r5, r6, pc}
   16d42:	bf00      	nop
   16d44:	0001eeb8 	.word	0x0001eeb8

00016d48 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d4c:	b086      	sub	sp, #24
   16d4e:	4604      	mov	r4, r0
   16d50:	460e      	mov	r6, r1
   16d52:	af00      	add	r7, sp, #0
	__asm__ volatile(
   16d54:	f04f 0320 	mov.w	r3, #32
   16d58:	f3ef 8811 	mrs	r8, BASEPRI
   16d5c:	f383 8812 	msr	BASEPRI_MAX, r3
   16d60:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   16d64:	f002 fede 	bl	19b24 <z_impl_z_current_get>
   16d68:	2c04      	cmp	r4, #4
   16d6a:	bf98      	it	ls
   16d6c:	4b34      	ldrls	r3, [pc, #208]	; (16e40 <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16d6e:	46e9      	mov	r9, sp
   16d70:	b08a      	sub	sp, #40	; 0x28
   16d72:	4605      	mov	r5, r0
   16d74:	466a      	mov	r2, sp
   16d76:	bf94      	ite	ls
   16d78:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   16d7c:	4b31      	ldrhi	r3, [pc, #196]	; (16e44 <z_fatal_error+0xfc>)
   16d7e:	61d3      	str	r3, [r2, #28]
   16d80:	f240 3301 	movw	r3, #769	; 0x301
   16d84:	f04f 0a00 	mov.w	sl, #0
   16d88:	8493      	strh	r3, [r2, #36]	; 0x24
   16d8a:	492f      	ldr	r1, [pc, #188]	; (16e48 <z_fatal_error+0x100>)
   16d8c:	4b2f      	ldr	r3, [pc, #188]	; (16e4c <z_fatal_error+0x104>)
   16d8e:	e9c2 1405 	strd	r1, r4, [r2, #20]
   16d92:	f8c2 a020 	str.w	sl, [r2, #32]
   16d96:	f842 3f10 	str.w	r3, [r2, #16]!
   16d9a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   16d9e:	4653      	mov	r3, sl
   16da0:	482b      	ldr	r0, [pc, #172]	; (16e50 <z_fatal_error+0x108>)
   16da2:	f7f3 ffab 	bl	acfc <z_impl_z_log_msg_static_create>
   16da6:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   16da8:	b17e      	cbz	r6, 16dca <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   16daa:	69f3      	ldr	r3, [r6, #28]
   16dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16db0:	b15b      	cbz	r3, 16dca <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   16db2:	4b28      	ldr	r3, [pc, #160]	; (16e54 <z_fatal_error+0x10c>)
   16db4:	617b      	str	r3, [r7, #20]
   16db6:	2302      	movs	r3, #2
   16db8:	613b      	str	r3, [r7, #16]
   16dba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16dbe:	4653      	mov	r3, sl
   16dc0:	4823      	ldr	r0, [pc, #140]	; (16e50 <z_fatal_error+0x108>)
   16dc2:	f107 0210 	add.w	r2, r7, #16
   16dc6:	f7f3 ff99 	bl	acfc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   16dca:	b12d      	cbz	r5, 16dd8 <z_fatal_error+0x90>
   16dcc:	4628      	mov	r0, r5
   16dce:	f007 fbc0 	bl	1e552 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   16dd2:	b108      	cbz	r0, 16dd8 <z_fatal_error+0x90>
   16dd4:	7803      	ldrb	r3, [r0, #0]
   16dd6:	b903      	cbnz	r3, 16dda <z_fatal_error+0x92>
		thread_name = "unknown";
   16dd8:	481f      	ldr	r0, [pc, #124]	; (16e58 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   16dda:	46e9      	mov	r9, sp
   16ddc:	b08a      	sub	sp, #40	; 0x28
   16dde:	466a      	mov	r2, sp
   16de0:	4b1e      	ldr	r3, [pc, #120]	; (16e5c <z_fatal_error+0x114>)
   16de2:	61d0      	str	r0, [r2, #28]
   16de4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   16de8:	f240 3301 	movw	r3, #769	; 0x301
   16dec:	8413      	strh	r3, [r2, #32]
   16dee:	4b1c      	ldr	r3, [pc, #112]	; (16e60 <z_fatal_error+0x118>)
   16df0:	f842 3f10 	str.w	r3, [r2, #16]!
   16df4:	2300      	movs	r3, #0
   16df6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   16dfa:	4815      	ldr	r0, [pc, #84]	; (16e50 <z_fatal_error+0x108>)
   16dfc:	f7f3 ff7e 	bl	acfc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   16e00:	4631      	mov	r1, r6
   16e02:	46cd      	mov	sp, r9
   16e04:	4620      	mov	r0, r4
   16e06:	f7fe f8c5 	bl	14f94 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   16e0a:	2c04      	cmp	r4, #4
   16e0c:	d10c      	bne.n	16e28 <z_fatal_error+0xe0>
   16e0e:	4915      	ldr	r1, [pc, #84]	; (16e64 <z_fatal_error+0x11c>)
   16e10:	2393      	movs	r3, #147	; 0x93
   16e12:	4a15      	ldr	r2, [pc, #84]	; (16e68 <z_fatal_error+0x120>)
   16e14:	4815      	ldr	r0, [pc, #84]	; (16e6c <z_fatal_error+0x124>)
   16e16:	f004 fa09 	bl	1b22c <assert_print>
   16e1a:	4815      	ldr	r0, [pc, #84]	; (16e70 <z_fatal_error+0x128>)
   16e1c:	f004 fa06 	bl	1b22c <assert_print>
   16e20:	2193      	movs	r1, #147	; 0x93
   16e22:	4811      	ldr	r0, [pc, #68]	; (16e68 <z_fatal_error+0x120>)
   16e24:	f004 f9fb 	bl	1b21e <assert_post_action>
	__asm__ volatile(
   16e28:	f388 8811 	msr	BASEPRI, r8
   16e2c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   16e30:	4628      	mov	r0, r5
   16e32:	f7f5 feb1 	bl	cb98 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   16e36:	3718      	adds	r7, #24
   16e38:	46bd      	mov	sp, r7
   16e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16e3e:	bf00      	nop
   16e40:	0001f640 	.word	0x0001f640
   16e44:	00022fcf 	.word	0x00022fcf
   16e48:	00022fe5 	.word	0x00022fe5
   16e4c:	01000005 	.word	0x01000005
   16e50:	0001ee24 	.word	0x0001ee24
   16e54:	0002300d 	.word	0x0002300d
   16e58:	00022fdd 	.word	0x00022fdd
   16e5c:	0002302e 	.word	0x0002302e
   16e60:	01000004 	.word	0x01000004
   16e64:	00023068 	.word	0x00023068
   16e68:	00023046 	.word	0x00023046
   16e6c:	0001f995 	.word	0x0001f995
   16e70:	00023085 	.word	0x00023085

00016e74 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16e74:	4b0f      	ldr	r3, [pc, #60]	; (16eb4 <z_sys_init_run_level+0x40>)
{
   16e76:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16e78:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   16e7c:	3001      	adds	r0, #1
   16e7e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16e82:	42a6      	cmp	r6, r4
   16e84:	d800      	bhi.n	16e88 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   16e86:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   16e88:	e9d4 3500 	ldrd	r3, r5, [r4]
   16e8c:	4628      	mov	r0, r5
   16e8e:	4798      	blx	r3
		if (dev != NULL) {
   16e90:	b16d      	cbz	r5, 16eae <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   16e92:	b138      	cbz	r0, 16ea4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   16e94:	2800      	cmp	r0, #0
   16e96:	bfb8      	it	lt
   16e98:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   16e9a:	28ff      	cmp	r0, #255	; 0xff
   16e9c:	bfa8      	it	ge
   16e9e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   16ea0:	68eb      	ldr	r3, [r5, #12]
   16ea2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   16ea4:	68ea      	ldr	r2, [r5, #12]
   16ea6:	7853      	ldrb	r3, [r2, #1]
   16ea8:	f043 0301 	orr.w	r3, r3, #1
   16eac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16eae:	3408      	adds	r4, #8
   16eb0:	e7e7      	b.n	16e82 <z_sys_init_run_level+0xe>
   16eb2:	bf00      	nop
   16eb4:	0001f654 	.word	0x0001f654

00016eb8 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   16eb8:	2201      	movs	r2, #1
{
   16eba:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16ebc:	4b09      	ldr	r3, [pc, #36]	; (16ee4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   16ebe:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   16ec0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   16ec2:	f7ff ffd7 	bl	16e74 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   16ec6:	f003 ff35 	bl	1ad34 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   16eca:	2004      	movs	r0, #4
   16ecc:	f7ff ffd2 	bl	16e74 <z_sys_init_run_level>

	z_init_static_threads();
   16ed0:	f000 fb66 	bl	175a0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   16ed4:	f7f1 fc5c 	bl	8790 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16ed8:	4a03      	ldr	r2, [pc, #12]	; (16ee8 <bg_thread_main+0x30>)
   16eda:	7b13      	ldrb	r3, [r2, #12]
   16edc:	f023 0301 	bic.w	r3, r3, #1
   16ee0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16ee2:	bd08      	pop	{r3, pc}
   16ee4:	20009baf 	.word	0x20009baf
   16ee8:	200094b0 	.word	0x200094b0

00016eec <z_bss_zero>:
{
   16eec:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   16eee:	4803      	ldr	r0, [pc, #12]	; (16efc <z_bss_zero+0x10>)
   16ef0:	4a03      	ldr	r2, [pc, #12]	; (16f00 <z_bss_zero+0x14>)
   16ef2:	2100      	movs	r1, #0
   16ef4:	1a12      	subs	r2, r2, r0
   16ef6:	f007 fb01 	bl	1e4fc <z_early_memset>
}
   16efa:	bd08      	pop	{r3, pc}
   16efc:	20008738 	.word	0x20008738
   16f00:	20009bb0 	.word	0x20009bb0

00016f04 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   16f04:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   16f06:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   16f08:	4e13      	ldr	r6, [pc, #76]	; (16f58 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   16f0a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   16f0c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   16f10:	2300      	movs	r3, #0
{
   16f12:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   16f14:	e9cd 2304 	strd	r2, r3, [sp, #16]
   16f18:	220f      	movs	r2, #15
   16f1a:	9301      	str	r3, [sp, #4]
   16f1c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16f20:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   16f22:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16f26:	4d0d      	ldr	r5, [pc, #52]	; (16f5c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   16f28:	490d      	ldr	r1, [pc, #52]	; (16f60 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16f2a:	fb03 5500 	mla	r5, r3, r0, r5
{
   16f2e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   16f30:	fb02 1100 	mla	r1, r2, r0, r1
   16f34:	4b0b      	ldr	r3, [pc, #44]	; (16f64 <z_init_cpu+0x60>)
   16f36:	4630      	mov	r0, r6
   16f38:	9500      	str	r5, [sp, #0]
   16f3a:	f000 fa97 	bl	1746c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16f3e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   16f40:	752c      	strb	r4, [r5, #20]
   16f42:	f023 0304 	bic.w	r3, r3, #4
   16f46:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   16f48:	4b07      	ldr	r3, [pc, #28]	; (16f68 <z_init_cpu+0x64>)
   16f4a:	3401      	adds	r4, #1
   16f4c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   16f50:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   16f52:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   16f54:	b006      	add	sp, #24
   16f56:	bd70      	pop	{r4, r5, r6, pc}
   16f58:	20009428 	.word	0x20009428
   16f5c:	20009a9c 	.word	0x20009a9c
   16f60:	2000be70 	.word	0x2000be70
   16f64:	000176f1 	.word	0x000176f1
   16f68:	2000b670 	.word	0x2000b670

00016f6c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   16f6c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   16f6e:	2000      	movs	r0, #0
{
   16f70:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   16f72:	f7ff ff7f 	bl	16e74 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   16f76:	4b2f      	ldr	r3, [pc, #188]	; (17034 <z_cstart+0xc8>)
	uint32_t msp =
   16f78:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16f7c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   16f80:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16f84:	2400      	movs	r4, #0
   16f86:	23e0      	movs	r3, #224	; 0xe0
   16f88:	4d2b      	ldr	r5, [pc, #172]	; (17038 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   16f8a:	4e2c      	ldr	r6, [pc, #176]	; (1703c <z_cstart+0xd0>)
   16f8c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   16f90:	77ec      	strb	r4, [r5, #31]
   16f92:	762c      	strb	r4, [r5, #24]
   16f94:	766c      	strb	r4, [r5, #25]
   16f96:	76ac      	strb	r4, [r5, #26]
   16f98:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16f9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16f9e:	4f28      	ldr	r7, [pc, #160]	; (17040 <z_cstart+0xd4>)
   16fa0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16fa4:	626b      	str	r3, [r5, #36]	; 0x24
   16fa6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16faa:	f7f5 fd59 	bl	ca60 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16fae:	f7f5 f86d 	bl	c08c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16fb2:	f04f 33ff 	mov.w	r3, #4294967295
   16fb6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16fb8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   16fba:	f7f5 ffcd 	bl	cf58 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   16fbe:	f7f5 fe01 	bl	cbc4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   16fc2:	f7f3 fc91 	bl	a8e8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   16fc6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   16fca:	ad06      	add	r5, sp, #24
   16fcc:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   16fce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   16fd2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   16fd6:	f003 fe8f 	bl	1acf8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   16fda:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   16fdc:	f007 fa82 	bl	1e4e4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   16fe0:	2001      	movs	r0, #1
   16fe2:	f7ff ff47 	bl	16e74 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   16fe6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   16fe8:	4d16      	ldr	r5, [pc, #88]	; (17044 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   16fea:	f7ff ff43 	bl	16e74 <z_sys_init_run_level>
	z_sched_init();
   16fee:	f002 fc1f 	bl	19830 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16ff2:	4b15      	ldr	r3, [pc, #84]	; (17048 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   16ff4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16ff6:	9305      	str	r3, [sp, #20]
   16ff8:	2301      	movs	r3, #1
   16ffa:	4914      	ldr	r1, [pc, #80]	; (1704c <z_cstart+0xe0>)
   16ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17000:	e9cd 4303 	strd	r4, r3, [sp, #12]
   17004:	4628      	mov	r0, r5
   17006:	463b      	mov	r3, r7
   17008:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1700c:	9400      	str	r4, [sp, #0]
   1700e:	f000 fa2d 	bl	1746c <z_setup_new_thread>
   17012:	4606      	mov	r6, r0
   17014:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   17016:	4628      	mov	r0, r5
   17018:	f022 0204 	bic.w	r2, r2, #4
   1701c:	736a      	strb	r2, [r5, #13]
   1701e:	f001 fddf 	bl	18be0 <z_ready_thread>
	z_init_cpu(0);
   17022:	4620      	mov	r0, r4
   17024:	f7ff ff6e 	bl	16f04 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17028:	463a      	mov	r2, r7
   1702a:	4631      	mov	r1, r6
   1702c:	4628      	mov	r0, r5
   1702e:	f7f5 f9ad 	bl	c38c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17032:	bf00      	nop
   17034:	2000b670 	.word	0x2000b670
   17038:	e000ed00 	.word	0xe000ed00
   1703c:	20009a9c 	.word	0x20009a9c
   17040:	00016eb9 	.word	0x00016eb9
   17044:	200094b0 	.word	0x200094b0
   17048:	00023104 	.word	0x00023104
   1704c:	2000bfb0 	.word	0x2000bfb0

00017050 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   17050:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17052:	4c0d      	ldr	r4, [pc, #52]	; (17088 <statics_init+0x38>)
   17054:	4d0d      	ldr	r5, [pc, #52]	; (1708c <statics_init+0x3c>)
   17056:	42ac      	cmp	r4, r5
   17058:	d913      	bls.n	17082 <statics_init+0x32>
   1705a:	490d      	ldr	r1, [pc, #52]	; (17090 <statics_init+0x40>)
   1705c:	2318      	movs	r3, #24
   1705e:	4a0d      	ldr	r2, [pc, #52]	; (17094 <statics_init+0x44>)
   17060:	480d      	ldr	r0, [pc, #52]	; (17098 <statics_init+0x48>)
   17062:	f004 f8e3 	bl	1b22c <assert_print>
   17066:	480d      	ldr	r0, [pc, #52]	; (1709c <statics_init+0x4c>)
   17068:	f004 f8e0 	bl	1b22c <assert_print>
   1706c:	2118      	movs	r1, #24
   1706e:	4809      	ldr	r0, [pc, #36]	; (17094 <statics_init+0x44>)
   17070:	f004 f8d5 	bl	1b21e <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17074:	4620      	mov	r0, r4
   17076:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1707a:	f007 fa43 	bl	1e504 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1707e:	3418      	adds	r4, #24
   17080:	e7e9      	b.n	17056 <statics_init+0x6>
   17082:	d3f7      	bcc.n	17074 <statics_init+0x24>
		}
	}
	return 0;
}
   17084:	2000      	movs	r0, #0
   17086:	bd38      	pop	{r3, r4, r5, pc}
   17088:	20008520 	.word	0x20008520
   1708c:	20008538 	.word	0x20008538
   17090:	0002312e 	.word	0x0002312e
   17094:	0002310c 	.word	0x0002310c
   17098:	0001f995 	.word	0x0001f995
   1709c:	00020078 	.word	0x00020078

000170a0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   170a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170a4:	b085      	sub	sp, #20
   170a6:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   170aa:	4680      	mov	r8, r0
   170ac:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   170ae:	4648      	mov	r0, r9
   170b0:	4659      	mov	r1, fp
{
   170b2:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   170b4:	f007 fb44 	bl	1e740 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   170b8:	f1bb 3fff 	cmp.w	fp, #4294967295
   170bc:	bf08      	it	eq
   170be:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   170c2:	4606      	mov	r6, r0
   170c4:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   170c6:	bf04      	itt	eq
   170c8:	f04f 36ff 	moveq.w	r6, #4294967295
   170cc:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   170d0:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   170d4:	f04f 0320 	mov.w	r3, #32
   170d8:	f3ef 8511 	mrs	r5, BASEPRI
   170dc:	f383 8812 	msr	BASEPRI_MAX, r3
   170e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   170e4:	4620      	mov	r0, r4
   170e6:	f000 fadf 	bl	176a8 <z_spin_lock_valid>
   170ea:	b960      	cbnz	r0, 17106 <k_heap_aligned_alloc+0x66>
   170ec:	2394      	movs	r3, #148	; 0x94
   170ee:	4a33      	ldr	r2, [pc, #204]	; (171bc <k_heap_aligned_alloc+0x11c>)
   170f0:	4933      	ldr	r1, [pc, #204]	; (171c0 <k_heap_aligned_alloc+0x120>)
   170f2:	4834      	ldr	r0, [pc, #208]	; (171c4 <k_heap_aligned_alloc+0x124>)
   170f4:	f004 f89a 	bl	1b22c <assert_print>
   170f8:	4621      	mov	r1, r4
   170fa:	4833      	ldr	r0, [pc, #204]	; (171c8 <k_heap_aligned_alloc+0x128>)
   170fc:	f004 f896 	bl	1b22c <assert_print>
   17100:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17102:	482e      	ldr	r0, [pc, #184]	; (171bc <k_heap_aligned_alloc+0x11c>)
   17104:	e031      	b.n	1716a <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   17106:	4620      	mov	r0, r4
   17108:	f000 faea 	bl	176e0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1710c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17110:	b113      	cbz	r3, 17118 <k_heap_aligned_alloc+0x78>
   17112:	ea5b 0909 	orrs.w	r9, fp, r9
   17116:	d11d      	bne.n	17154 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17118:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1711c:	4652      	mov	r2, sl
   1711e:	4640      	mov	r0, r8
   17120:	9903      	ldr	r1, [sp, #12]
   17122:	f7f1 ff1d 	bl	8f60 <sys_heap_aligned_alloc>
   17126:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   17128:	f003 f8ea 	bl	1a300 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1712c:	f1b9 0f00 	cmp.w	r9, #0
   17130:	d01d      	beq.n	1716e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17132:	4620      	mov	r0, r4
   17134:	f000 fac6 	bl	176c4 <z_spin_unlock_valid>
   17138:	2800      	cmp	r0, #0
   1713a:	d137      	bne.n	171ac <k_heap_aligned_alloc+0x10c>
   1713c:	23c2      	movs	r3, #194	; 0xc2
   1713e:	4a1f      	ldr	r2, [pc, #124]	; (171bc <k_heap_aligned_alloc+0x11c>)
   17140:	4922      	ldr	r1, [pc, #136]	; (171cc <k_heap_aligned_alloc+0x12c>)
   17142:	4820      	ldr	r0, [pc, #128]	; (171c4 <k_heap_aligned_alloc+0x124>)
   17144:	f004 f872 	bl	1b22c <assert_print>
   17148:	4621      	mov	r1, r4
   1714a:	4821      	ldr	r0, [pc, #132]	; (171d0 <k_heap_aligned_alloc+0x130>)
   1714c:	f004 f86e 	bl	1b22c <assert_print>
   17150:	21c2      	movs	r1, #194	; 0xc2
   17152:	e7d6      	b.n	17102 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17154:	491f      	ldr	r1, [pc, #124]	; (171d4 <k_heap_aligned_alloc+0x134>)
   17156:	234c      	movs	r3, #76	; 0x4c
   17158:	4a1f      	ldr	r2, [pc, #124]	; (171d8 <k_heap_aligned_alloc+0x138>)
   1715a:	481a      	ldr	r0, [pc, #104]	; (171c4 <k_heap_aligned_alloc+0x124>)
   1715c:	f004 f866 	bl	1b22c <assert_print>
   17160:	481e      	ldr	r0, [pc, #120]	; (171dc <k_heap_aligned_alloc+0x13c>)
   17162:	f004 f863 	bl	1b22c <assert_print>
   17166:	214c      	movs	r1, #76	; 0x4c
   17168:	481b      	ldr	r0, [pc, #108]	; (171d8 <k_heap_aligned_alloc+0x138>)
   1716a:	f004 f858 	bl	1b21e <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1716e:	1a30      	subs	r0, r6, r0
   17170:	eb67 0101 	sbc.w	r1, r7, r1
   17174:	2801      	cmp	r0, #1
   17176:	f171 0300 	sbcs.w	r3, r1, #0
   1717a:	dbda      	blt.n	17132 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1717c:	e9cd 0100 	strd	r0, r1, [sp]
   17180:	465a      	mov	r2, fp
   17182:	4629      	mov	r1, r5
   17184:	4620      	mov	r0, r4
   17186:	f002 f885 	bl	19294 <z_pend_curr>
   1718a:	f04f 0320 	mov.w	r3, #32
   1718e:	f3ef 8511 	mrs	r5, BASEPRI
   17192:	f383 8812 	msr	BASEPRI_MAX, r3
   17196:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1719a:	4620      	mov	r0, r4
   1719c:	f000 fa84 	bl	176a8 <z_spin_lock_valid>
   171a0:	2800      	cmp	r0, #0
   171a2:	d0a3      	beq.n	170ec <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   171a4:	4620      	mov	r0, r4
   171a6:	f000 fa9b 	bl	176e0 <z_spin_lock_set_owner>
	return k;
   171aa:	e7b7      	b.n	1711c <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   171ac:	f385 8811 	msr	BASEPRI, r5
   171b0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   171b4:	4648      	mov	r0, r9
   171b6:	b005      	add	sp, #20
   171b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171bc:	0001fd89 	.word	0x0001fd89
   171c0:	0001fde2 	.word	0x0001fde2
   171c4:	0001f995 	.word	0x0001f995
   171c8:	0001fdf7 	.word	0x0001fdf7
   171cc:	0001fdb6 	.word	0x0001fdb6
   171d0:	0001fdcd 	.word	0x0001fdcd
   171d4:	00023144 	.word	0x00023144
   171d8:	0002310c 	.word	0x0002310c
   171dc:	00022009 	.word	0x00022009

000171e0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   171e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   171e2:	4605      	mov	r5, r0
   171e4:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   171e6:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   171ea:	f04f 0320 	mov.w	r3, #32
   171ee:	f3ef 8711 	mrs	r7, BASEPRI
   171f2:	f383 8812 	msr	BASEPRI_MAX, r3
   171f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   171fa:	4620      	mov	r0, r4
   171fc:	f000 fa54 	bl	176a8 <z_spin_lock_valid>
   17200:	b968      	cbnz	r0, 1721e <k_heap_free+0x3e>
   17202:	2394      	movs	r3, #148	; 0x94
   17204:	4a19      	ldr	r2, [pc, #100]	; (1726c <k_heap_free+0x8c>)
   17206:	491a      	ldr	r1, [pc, #104]	; (17270 <k_heap_free+0x90>)
   17208:	481a      	ldr	r0, [pc, #104]	; (17274 <k_heap_free+0x94>)
   1720a:	f004 f80f 	bl	1b22c <assert_print>
   1720e:	4621      	mov	r1, r4
   17210:	4819      	ldr	r0, [pc, #100]	; (17278 <k_heap_free+0x98>)
   17212:	f004 f80b 	bl	1b22c <assert_print>
   17216:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17218:	4814      	ldr	r0, [pc, #80]	; (1726c <k_heap_free+0x8c>)
   1721a:	f004 f800 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1721e:	4620      	mov	r0, r4
   17220:	f000 fa5e 	bl	176e0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17224:	4628      	mov	r0, r5
   17226:	4631      	mov	r1, r6
   17228:	f7f1 fe54 	bl	8ed4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1722c:	f105 000c 	add.w	r0, r5, #12
   17230:	f007 fa6c 	bl	1e70c <z_unpend_all>
   17234:	b128      	cbz	r0, 17242 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   17236:	4639      	mov	r1, r7
   17238:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1723a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1723e:	f001 bd5b 	b.w	18cf8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17242:	4620      	mov	r0, r4
   17244:	f000 fa3e 	bl	176c4 <z_spin_unlock_valid>
   17248:	b958      	cbnz	r0, 17262 <k_heap_free+0x82>
   1724a:	23c2      	movs	r3, #194	; 0xc2
   1724c:	4a07      	ldr	r2, [pc, #28]	; (1726c <k_heap_free+0x8c>)
   1724e:	490b      	ldr	r1, [pc, #44]	; (1727c <k_heap_free+0x9c>)
   17250:	4808      	ldr	r0, [pc, #32]	; (17274 <k_heap_free+0x94>)
   17252:	f003 ffeb 	bl	1b22c <assert_print>
   17256:	4621      	mov	r1, r4
   17258:	4809      	ldr	r0, [pc, #36]	; (17280 <k_heap_free+0xa0>)
   1725a:	f003 ffe7 	bl	1b22c <assert_print>
   1725e:	21c2      	movs	r1, #194	; 0xc2
   17260:	e7da      	b.n	17218 <k_heap_free+0x38>
	__asm__ volatile(
   17262:	f387 8811 	msr	BASEPRI, r7
   17266:	f3bf 8f6f 	isb	sy
}
   1726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1726c:	0001fd89 	.word	0x0001fd89
   17270:	0001fde2 	.word	0x0001fde2
   17274:	0001f995 	.word	0x0001f995
   17278:	0001fdf7 	.word	0x0001fdf7
   1727c:	0001fdb6 	.word	0x0001fdb6
   17280:	0001fdcd 	.word	0x0001fdcd

00017284 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   17284:	2000      	movs	r0, #0
{
   17286:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17288:	4c0c      	ldr	r4, [pc, #48]	; (172bc <init_mem_slab_module+0x38>)
   1728a:	4d0d      	ldr	r5, [pc, #52]	; (172c0 <init_mem_slab_module+0x3c>)
   1728c:	42ac      	cmp	r4, r5
   1728e:	d913      	bls.n	172b8 <init_mem_slab_module+0x34>
   17290:	490c      	ldr	r1, [pc, #48]	; (172c4 <init_mem_slab_module+0x40>)
   17292:	233d      	movs	r3, #61	; 0x3d
   17294:	4a0c      	ldr	r2, [pc, #48]	; (172c8 <init_mem_slab_module+0x44>)
   17296:	480d      	ldr	r0, [pc, #52]	; (172cc <init_mem_slab_module+0x48>)
   17298:	f003 ffc8 	bl	1b22c <assert_print>
   1729c:	480c      	ldr	r0, [pc, #48]	; (172d0 <init_mem_slab_module+0x4c>)
   1729e:	f003 ffc5 	bl	1b22c <assert_print>
   172a2:	213d      	movs	r1, #61	; 0x3d
   172a4:	4808      	ldr	r0, [pc, #32]	; (172c8 <init_mem_slab_module+0x44>)
   172a6:	f003 ffba 	bl	1b21e <assert_post_action>
		rc = create_free_list(slab);
   172aa:	4620      	mov	r0, r4
   172ac:	f007 f932 	bl	1e514 <create_free_list>
		if (rc < 0) {
   172b0:	2800      	cmp	r0, #0
   172b2:	db02      	blt.n	172ba <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   172b4:	3420      	adds	r4, #32
   172b6:	e7e9      	b.n	1728c <init_mem_slab_module+0x8>
   172b8:	d3f7      	bcc.n	172aa <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   172ba:	bd38      	pop	{r3, r4, r5, pc}
   172bc:	200084c0 	.word	0x200084c0
   172c0:	20008520 	.word	0x20008520
   172c4:	000231af 	.word	0x000231af
   172c8:	0002318a 	.word	0x0002318a
   172cc:	0001f995 	.word	0x0001f995
   172d0:	00020078 	.word	0x00020078

000172d4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   172d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   172d8:	4604      	mov	r4, r0
   172da:	460e      	mov	r6, r1
   172dc:	4690      	mov	r8, r2
   172de:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   172e0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   172e4:	f04f 0320 	mov.w	r3, #32
   172e8:	f3ef 8911 	mrs	r9, BASEPRI
   172ec:	f383 8812 	msr	BASEPRI_MAX, r3
   172f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   172f4:	4628      	mov	r0, r5
   172f6:	f000 f9d7 	bl	176a8 <z_spin_lock_valid>
   172fa:	b968      	cbnz	r0, 17318 <k_mem_slab_alloc+0x44>
   172fc:	2394      	movs	r3, #148	; 0x94
   172fe:	4a23      	ldr	r2, [pc, #140]	; (1738c <k_mem_slab_alloc+0xb8>)
   17300:	4923      	ldr	r1, [pc, #140]	; (17390 <k_mem_slab_alloc+0xbc>)
   17302:	4824      	ldr	r0, [pc, #144]	; (17394 <k_mem_slab_alloc+0xc0>)
   17304:	f003 ff92 	bl	1b22c <assert_print>
   17308:	4629      	mov	r1, r5
   1730a:	4823      	ldr	r0, [pc, #140]	; (17398 <k_mem_slab_alloc+0xc4>)
   1730c:	f003 ff8e 	bl	1b22c <assert_print>
   17310:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17312:	481e      	ldr	r0, [pc, #120]	; (1738c <k_mem_slab_alloc+0xb8>)
   17314:	f003 ff83 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   17318:	4628      	mov	r0, r5
   1731a:	f000 f9e1 	bl	176e0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1731e:	69a3      	ldr	r3, [r4, #24]
   17320:	b1b3      	cbz	r3, 17350 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   17322:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   17324:	681b      	ldr	r3, [r3, #0]
   17326:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   17328:	69e3      	ldr	r3, [r4, #28]
   1732a:	3301      	adds	r3, #1
   1732c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1732e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17330:	4628      	mov	r0, r5
   17332:	f000 f9c7 	bl	176c4 <z_spin_unlock_valid>
   17336:	bb18      	cbnz	r0, 17380 <k_mem_slab_alloc+0xac>
   17338:	23c2      	movs	r3, #194	; 0xc2
   1733a:	4a14      	ldr	r2, [pc, #80]	; (1738c <k_mem_slab_alloc+0xb8>)
   1733c:	4917      	ldr	r1, [pc, #92]	; (1739c <k_mem_slab_alloc+0xc8>)
   1733e:	4815      	ldr	r0, [pc, #84]	; (17394 <k_mem_slab_alloc+0xc0>)
   17340:	f003 ff74 	bl	1b22c <assert_print>
   17344:	4629      	mov	r1, r5
   17346:	4816      	ldr	r0, [pc, #88]	; (173a0 <k_mem_slab_alloc+0xcc>)
   17348:	f003 ff70 	bl	1b22c <assert_print>
   1734c:	21c2      	movs	r1, #194	; 0xc2
   1734e:	e7e0      	b.n	17312 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17350:	ea58 0207 	orrs.w	r2, r8, r7
   17354:	d103      	bne.n	1735e <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   17356:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   1735a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1735c:	e7e8      	b.n	17330 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1735e:	4622      	mov	r2, r4
   17360:	4649      	mov	r1, r9
   17362:	4628      	mov	r0, r5
   17364:	e9cd 8700 	strd	r8, r7, [sp]
   17368:	f001 ff94 	bl	19294 <z_pend_curr>
		if (result == 0) {
   1736c:	4604      	mov	r4, r0
   1736e:	b918      	cbnz	r0, 17378 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   17370:	4b0c      	ldr	r3, [pc, #48]	; (173a4 <k_mem_slab_alloc+0xd0>)
   17372:	689b      	ldr	r3, [r3, #8]
   17374:	695b      	ldr	r3, [r3, #20]
   17376:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   17378:	4620      	mov	r0, r4
   1737a:	b003      	add	sp, #12
   1737c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   17380:	f389 8811 	msr	BASEPRI, r9
   17384:	f3bf 8f6f 	isb	sy
	return result;
   17388:	e7f6      	b.n	17378 <k_mem_slab_alloc+0xa4>
   1738a:	bf00      	nop
   1738c:	0001fd89 	.word	0x0001fd89
   17390:	0001fde2 	.word	0x0001fde2
   17394:	0001f995 	.word	0x0001f995
   17398:	0001fdf7 	.word	0x0001fdf7
   1739c:	0001fdb6 	.word	0x0001fdb6
   173a0:	0001fdcd 	.word	0x0001fdcd
   173a4:	20009a9c 	.word	0x20009a9c

000173a8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   173a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173ac:	4604      	mov	r4, r0
   173ae:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   173b0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   173b4:	f04f 0320 	mov.w	r3, #32
   173b8:	f3ef 8711 	mrs	r7, BASEPRI
   173bc:	f383 8812 	msr	BASEPRI_MAX, r3
   173c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   173c4:	4628      	mov	r0, r5
   173c6:	f000 f96f 	bl	176a8 <z_spin_lock_valid>
   173ca:	b968      	cbnz	r0, 173e8 <k_mem_slab_free+0x40>
   173cc:	2394      	movs	r3, #148	; 0x94
   173ce:	4a21      	ldr	r2, [pc, #132]	; (17454 <k_mem_slab_free+0xac>)
   173d0:	4921      	ldr	r1, [pc, #132]	; (17458 <k_mem_slab_free+0xb0>)
   173d2:	4822      	ldr	r0, [pc, #136]	; (1745c <k_mem_slab_free+0xb4>)
   173d4:	f003 ff2a 	bl	1b22c <assert_print>
   173d8:	4629      	mov	r1, r5
   173da:	4821      	ldr	r0, [pc, #132]	; (17460 <k_mem_slab_free+0xb8>)
   173dc:	f003 ff26 	bl	1b22c <assert_print>
   173e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   173e2:	481c      	ldr	r0, [pc, #112]	; (17454 <k_mem_slab_free+0xac>)
   173e4:	f003 ff1b 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   173e8:	4628      	mov	r0, r5
   173ea:	f000 f979 	bl	176e0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   173ee:	f8d4 8018 	ldr.w	r8, [r4, #24]
   173f2:	f1b8 0f00 	cmp.w	r8, #0
   173f6:	d10f      	bne.n	17418 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   173f8:	4620      	mov	r0, r4
   173fa:	f002 f9c9 	bl	19790 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   173fe:	b158      	cbz	r0, 17418 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   17400:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17402:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17406:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   17408:	f001 fbea 	bl	18be0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1740c:	4639      	mov	r1, r7
   1740e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   17410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   17414:	f001 bc70 	b.w	18cf8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   17418:	6833      	ldr	r3, [r6, #0]
   1741a:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1741c:	4628      	mov	r0, r5
   1741e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   17420:	6833      	ldr	r3, [r6, #0]
   17422:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   17424:	69e3      	ldr	r3, [r4, #28]
   17426:	3b01      	subs	r3, #1
   17428:	61e3      	str	r3, [r4, #28]
   1742a:	f000 f94b 	bl	176c4 <z_spin_unlock_valid>
   1742e:	b958      	cbnz	r0, 17448 <k_mem_slab_free+0xa0>
   17430:	23c2      	movs	r3, #194	; 0xc2
   17432:	4a08      	ldr	r2, [pc, #32]	; (17454 <k_mem_slab_free+0xac>)
   17434:	490b      	ldr	r1, [pc, #44]	; (17464 <k_mem_slab_free+0xbc>)
   17436:	4809      	ldr	r0, [pc, #36]	; (1745c <k_mem_slab_free+0xb4>)
   17438:	f003 fef8 	bl	1b22c <assert_print>
   1743c:	4629      	mov	r1, r5
   1743e:	480a      	ldr	r0, [pc, #40]	; (17468 <k_mem_slab_free+0xc0>)
   17440:	f003 fef4 	bl	1b22c <assert_print>
   17444:	21c2      	movs	r1, #194	; 0xc2
   17446:	e7cc      	b.n	173e2 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   17448:	f387 8811 	msr	BASEPRI, r7
   1744c:	f3bf 8f6f 	isb	sy
}
   17450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17454:	0001fd89 	.word	0x0001fd89
   17458:	0001fde2 	.word	0x0001fde2
   1745c:	0001f995 	.word	0x0001f995
   17460:	0001fdf7 	.word	0x0001fdf7
   17464:	0001fdb6 	.word	0x0001fdb6
   17468:	0001fdcd 	.word	0x0001fdcd

0001746c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1746c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1746e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   17470:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   17472:	2e0f      	cmp	r6, #15
   17474:	d12a      	bne.n	174cc <z_setup_new_thread+0x60>
   17476:	4821      	ldr	r0, [pc, #132]	; (174fc <z_setup_new_thread+0x90>)
   17478:	4283      	cmp	r3, r0
   1747a:	d12b      	bne.n	174d4 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1747c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   17480:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17484:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   17486:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   17488:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1748a:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1748c:	3207      	adds	r2, #7
   1748e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   17492:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   17496:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   17498:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1749a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   1749c:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1749e:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   174a2:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   174a4:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   174a6:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   174a8:	9202      	str	r2, [sp, #8]
   174aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   174ac:	4620      	mov	r0, r4
   174ae:	9201      	str	r2, [sp, #4]
   174b0:	9a08      	ldr	r2, [sp, #32]
   174b2:	9200      	str	r2, [sp, #0]
   174b4:	4632      	mov	r2, r6
   174b6:	f7f4 ff49 	bl	c34c <arch_new_thread>
	if (!_current) {
   174ba:	4b11      	ldr	r3, [pc, #68]	; (17500 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   174bc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   174be:	689b      	ldr	r3, [r3, #8]
   174c0:	b103      	cbz	r3, 174c4 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   174c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   174c4:	4630      	mov	r0, r6
   174c6:	6763      	str	r3, [r4, #116]	; 0x74
   174c8:	b004      	add	sp, #16
   174ca:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   174cc:	f106 0010 	add.w	r0, r6, #16
   174d0:	281e      	cmp	r0, #30
   174d2:	d9d3      	bls.n	1747c <z_setup_new_thread+0x10>
   174d4:	f44f 7306 	mov.w	r3, #536	; 0x218
   174d8:	4a0a      	ldr	r2, [pc, #40]	; (17504 <z_setup_new_thread+0x98>)
   174da:	490b      	ldr	r1, [pc, #44]	; (17508 <z_setup_new_thread+0x9c>)
   174dc:	480b      	ldr	r0, [pc, #44]	; (1750c <z_setup_new_thread+0xa0>)
   174de:	f003 fea5 	bl	1b22c <assert_print>
   174e2:	4631      	mov	r1, r6
   174e4:	480a      	ldr	r0, [pc, #40]	; (17510 <z_setup_new_thread+0xa4>)
   174e6:	f06f 030f 	mvn.w	r3, #15
   174ea:	220e      	movs	r2, #14
   174ec:	f003 fe9e 	bl	1b22c <assert_print>
   174f0:	f44f 7106 	mov.w	r1, #536	; 0x218
   174f4:	4803      	ldr	r0, [pc, #12]	; (17504 <z_setup_new_thread+0x98>)
   174f6:	f003 fe92 	bl	1b21e <assert_post_action>
   174fa:	bf00      	nop
   174fc:	000176f1 	.word	0x000176f1
   17500:	20009a9c 	.word	0x20009a9c
   17504:	000231cc 	.word	0x000231cc
   17508:	000231ef 	.word	0x000231ef
   1750c:	0001f995 	.word	0x0001f995
   17510:	0002326f 	.word	0x0002326f

00017514 <z_impl_k_thread_create>:
{
   17514:	b5f0      	push	{r4, r5, r6, r7, lr}
   17516:	b087      	sub	sp, #28
   17518:	4604      	mov	r4, r0
   1751a:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1751e:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   17522:	b175      	cbz	r5, 17542 <z_impl_k_thread_create+0x2e>
   17524:	4919      	ldr	r1, [pc, #100]	; (1758c <z_impl_k_thread_create+0x78>)
   17526:	f240 2387 	movw	r3, #647	; 0x287
   1752a:	4a19      	ldr	r2, [pc, #100]	; (17590 <z_impl_k_thread_create+0x7c>)
   1752c:	4819      	ldr	r0, [pc, #100]	; (17594 <z_impl_k_thread_create+0x80>)
   1752e:	f003 fe7d 	bl	1b22c <assert_print>
   17532:	4819      	ldr	r0, [pc, #100]	; (17598 <z_impl_k_thread_create+0x84>)
   17534:	f003 fe7a 	bl	1b22c <assert_print>
   17538:	f240 2187 	movw	r1, #647	; 0x287
   1753c:	4814      	ldr	r0, [pc, #80]	; (17590 <z_impl_k_thread_create+0x7c>)
   1753e:	f003 fe6e 	bl	1b21e <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17542:	9505      	str	r5, [sp, #20]
   17544:	9d10      	ldr	r5, [sp, #64]	; 0x40
   17546:	9504      	str	r5, [sp, #16]
   17548:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1754a:	9503      	str	r5, [sp, #12]
   1754c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1754e:	9502      	str	r5, [sp, #8]
   17550:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   17552:	9501      	str	r5, [sp, #4]
   17554:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   17556:	9500      	str	r5, [sp, #0]
   17558:	f7ff ff88 	bl	1746c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1755c:	f1b6 3fff 	cmp.w	r6, #4294967295
   17560:	bf08      	it	eq
   17562:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   17566:	d005      	beq.n	17574 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17568:	ea56 0307 	orrs.w	r3, r6, r7
   1756c:	d105      	bne.n	1757a <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   1756e:	4620      	mov	r0, r4
   17570:	f001 fc04 	bl	18d7c <z_sched_start>
}
   17574:	4620      	mov	r0, r4
   17576:	b007      	add	sp, #28
   17578:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1757a:	463a      	mov	r2, r7
   1757c:	4633      	mov	r3, r6
   1757e:	4907      	ldr	r1, [pc, #28]	; (1759c <z_impl_k_thread_create+0x88>)
   17580:	f104 0018 	add.w	r0, r4, #24
   17584:	f002 fc74 	bl	19e70 <z_add_timeout>
   17588:	e7f4      	b.n	17574 <z_impl_k_thread_create+0x60>
   1758a:	bf00      	nop
   1758c:	000232a0 	.word	0x000232a0
   17590:	000231cc 	.word	0x000231cc
   17594:	0001f995 	.word	0x0001f995
   17598:	000232b2 	.word	0x000232b2
   1759c:	00019649 	.word	0x00019649

000175a0 <z_init_static_threads>:
{
   175a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   175a4:	4c39      	ldr	r4, [pc, #228]	; (1768c <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   175a6:	4d3a      	ldr	r5, [pc, #232]	; (17690 <z_init_static_threads+0xf0>)
{
   175a8:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   175aa:	42ac      	cmp	r4, r5
   175ac:	4626      	mov	r6, r4
   175ae:	d92a      	bls.n	17606 <z_init_static_threads+0x66>
   175b0:	4938      	ldr	r1, [pc, #224]	; (17694 <z_init_static_threads+0xf4>)
   175b2:	f240 23ee 	movw	r3, #750	; 0x2ee
   175b6:	4a38      	ldr	r2, [pc, #224]	; (17698 <z_init_static_threads+0xf8>)
   175b8:	4838      	ldr	r0, [pc, #224]	; (1769c <z_init_static_threads+0xfc>)
   175ba:	f003 fe37 	bl	1b22c <assert_print>
   175be:	4838      	ldr	r0, [pc, #224]	; (176a0 <z_init_static_threads+0x100>)
   175c0:	f003 fe34 	bl	1b22c <assert_print>
   175c4:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   175c8:	4833      	ldr	r0, [pc, #204]	; (17698 <z_init_static_threads+0xf8>)
   175ca:	f003 fe28 	bl	1b21e <assert_post_action>
		z_setup_new_thread(
   175ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   175d2:	9305      	str	r3, [sp, #20]
   175d4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   175d8:	9304      	str	r3, [sp, #16]
   175da:	f854 3c14 	ldr.w	r3, [r4, #-20]
   175de:	9303      	str	r3, [sp, #12]
   175e0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   175e4:	9302      	str	r3, [sp, #8]
   175e6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   175ea:	9301      	str	r3, [sp, #4]
   175ec:	f854 3c20 	ldr.w	r3, [r4, #-32]
   175f0:	9300      	str	r3, [sp, #0]
   175f2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   175f6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   175fa:	f7ff ff37 	bl	1746c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   175fe:	f854 3c30 	ldr.w	r3, [r4, #-48]
   17602:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17604:	e7d1      	b.n	175aa <z_init_static_threads+0xa>
   17606:	42ae      	cmp	r6, r5
   17608:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1760c:	d3df      	bcc.n	175ce <z_init_static_threads+0x2e>
	k_sched_lock();
   1760e:	f001 fc07 	bl	18e20 <k_sched_lock>
   17612:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17616:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   1761a:	4c1c      	ldr	r4, [pc, #112]	; (1768c <z_init_static_threads+0xec>)
   1761c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 176a4 <z_init_static_threads+0x104>
   17620:	42ac      	cmp	r4, r5
   17622:	d92c      	bls.n	1767e <z_init_static_threads+0xde>
   17624:	491b      	ldr	r1, [pc, #108]	; (17694 <z_init_static_threads+0xf4>)
   17626:	f240 330d 	movw	r3, #781	; 0x30d
   1762a:	4a1b      	ldr	r2, [pc, #108]	; (17698 <z_init_static_threads+0xf8>)
   1762c:	481b      	ldr	r0, [pc, #108]	; (1769c <z_init_static_threads+0xfc>)
   1762e:	f003 fdfd 	bl	1b22c <assert_print>
   17632:	481b      	ldr	r0, [pc, #108]	; (176a0 <z_init_static_threads+0x100>)
   17634:	f003 fdfa 	bl	1b22c <assert_print>
   17638:	f240 310d 	movw	r1, #781	; 0x30d
   1763c:	e7c4      	b.n	175c8 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1763e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17640:	1c5a      	adds	r2, r3, #1
   17642:	d00d      	beq.n	17660 <z_init_static_threads+0xc0>
   17644:	2100      	movs	r1, #0
   17646:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   17648:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1764c:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17650:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   17654:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17658:	d104      	bne.n	17664 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   1765a:	4640      	mov	r0, r8
   1765c:	f001 fb8e 	bl	18d7c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   17660:	3430      	adds	r4, #48	; 0x30
   17662:	e7dd      	b.n	17620 <z_init_static_threads+0x80>
   17664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17668:	2300      	movs	r3, #0
   1766a:	f7f0 fd75 	bl	8158 <__aeabi_uldivmod>
   1766e:	4602      	mov	r2, r0
   17670:	460b      	mov	r3, r1
   17672:	f108 0018 	add.w	r0, r8, #24
   17676:	4649      	mov	r1, r9
   17678:	f002 fbfa 	bl	19e70 <z_add_timeout>
   1767c:	e7f0      	b.n	17660 <z_init_static_threads+0xc0>
   1767e:	d3de      	bcc.n	1763e <z_init_static_threads+0x9e>
}
   17680:	b007      	add	sp, #28
   17682:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   17686:	f001 bc37 	b.w	18ef8 <k_sched_unlock>
   1768a:	bf00      	nop
   1768c:	0001ecec 	.word	0x0001ecec
   17690:	0001ecec 	.word	0x0001ecec
   17694:	000232d7 	.word	0x000232d7
   17698:	000231cc 	.word	0x000231cc
   1769c:	0001f995 	.word	0x0001f995
   176a0:	00020078 	.word	0x00020078
   176a4:	00019649 	.word	0x00019649

000176a8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   176a8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   176aa:	b138      	cbz	r0, 176bc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   176ac:	4b04      	ldr	r3, [pc, #16]	; (176c0 <z_spin_lock_valid+0x18>)
   176ae:	f000 0003 	and.w	r0, r0, #3
   176b2:	7d1b      	ldrb	r3, [r3, #20]
   176b4:	1ac0      	subs	r0, r0, r3
   176b6:	bf18      	it	ne
   176b8:	2001      	movne	r0, #1
   176ba:	4770      	bx	lr
			return false;
		}
	}
	return true;
   176bc:	2001      	movs	r0, #1
}
   176be:	4770      	bx	lr
   176c0:	20009a9c 	.word	0x20009a9c

000176c4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   176c4:	4a05      	ldr	r2, [pc, #20]	; (176dc <z_spin_unlock_valid+0x18>)
{
   176c6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   176c8:	7d11      	ldrb	r1, [r2, #20]
   176ca:	6892      	ldr	r2, [r2, #8]
   176cc:	430a      	orrs	r2, r1
   176ce:	6801      	ldr	r1, [r0, #0]
   176d0:	2000      	movs	r0, #0
   176d2:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   176d4:	bf04      	itt	eq
   176d6:	6018      	streq	r0, [r3, #0]
	return true;
   176d8:	2001      	moveq	r0, #1
}
   176da:	4770      	bx	lr
   176dc:	20009a9c 	.word	0x20009a9c

000176e0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   176e0:	4b02      	ldr	r3, [pc, #8]	; (176ec <z_spin_lock_set_owner+0xc>)
   176e2:	7d1a      	ldrb	r2, [r3, #20]
   176e4:	689b      	ldr	r3, [r3, #8]
   176e6:	4313      	orrs	r3, r2
   176e8:	6003      	str	r3, [r0, #0]
}
   176ea:	4770      	bx	lr
   176ec:	20009a9c 	.word	0x20009a9c

000176f0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   176f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   176f2:	4c13      	ldr	r4, [pc, #76]	; (17740 <idle+0x50>)
   176f4:	68a3      	ldr	r3, [r4, #8]
   176f6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   176fa:	2b00      	cmp	r3, #0
   176fc:	db10      	blt.n	17720 <idle+0x30>
   176fe:	4d11      	ldr	r5, [pc, #68]	; (17744 <idle+0x54>)
	__asm__ volatile(
   17700:	f04f 0220 	mov.w	r2, #32
   17704:	f3ef 8311 	mrs	r3, BASEPRI
   17708:	f382 8812 	msr	BASEPRI_MAX, r2
   1770c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   17710:	f002 fcc0 	bl	1a094 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17714:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   17716:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17718:	b963      	cbnz	r3, 17734 <idle+0x44>
	arch_cpu_idle();
   1771a:	f7f4 fcbd 	bl	c098 <arch_cpu_idle>
}
   1771e:	e7ef      	b.n	17700 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   17720:	4909      	ldr	r1, [pc, #36]	; (17748 <idle+0x58>)
   17722:	480a      	ldr	r0, [pc, #40]	; (1774c <idle+0x5c>)
   17724:	2327      	movs	r3, #39	; 0x27
   17726:	4a0a      	ldr	r2, [pc, #40]	; (17750 <idle+0x60>)
   17728:	f003 fd80 	bl	1b22c <assert_print>
   1772c:	2127      	movs	r1, #39	; 0x27
   1772e:	4808      	ldr	r0, [pc, #32]	; (17750 <idle+0x60>)
   17730:	f003 fd75 	bl	1b21e <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17734:	f7f4 fa38 	bl	bba8 <pm_system_suspend>
   17738:	2800      	cmp	r0, #0
   1773a:	d1e1      	bne.n	17700 <idle+0x10>
   1773c:	e7ed      	b.n	1771a <idle+0x2a>
   1773e:	bf00      	nop
   17740:	20009a9c 	.word	0x20009a9c
   17744:	20009baf 	.word	0x20009baf
   17748:	00023325 	.word	0x00023325
   1774c:	0001f995 	.word	0x0001f995
   17750:	00023304 	.word	0x00023304

00017754 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   17754:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17758:	4604      	mov	r4, r0
   1775a:	4617      	mov	r7, r2
   1775c:	461e      	mov	r6, r3
   1775e:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17762:	b165      	cbz	r5, 1777e <z_impl_k_mutex_lock+0x2a>
   17764:	4958      	ldr	r1, [pc, #352]	; (178c8 <z_impl_k_mutex_lock+0x174>)
   17766:	2365      	movs	r3, #101	; 0x65
   17768:	4a58      	ldr	r2, [pc, #352]	; (178cc <z_impl_k_mutex_lock+0x178>)
   1776a:	4859      	ldr	r0, [pc, #356]	; (178d0 <z_impl_k_mutex_lock+0x17c>)
   1776c:	f003 fd5e 	bl	1b22c <assert_print>
   17770:	4858      	ldr	r0, [pc, #352]	; (178d4 <z_impl_k_mutex_lock+0x180>)
   17772:	f003 fd5b 	bl	1b22c <assert_print>
   17776:	2165      	movs	r1, #101	; 0x65
   17778:	4854      	ldr	r0, [pc, #336]	; (178cc <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1777a:	f003 fd50 	bl	1b21e <assert_post_action>
   1777e:	f04f 0320 	mov.w	r3, #32
   17782:	f3ef 8811 	mrs	r8, BASEPRI
   17786:	f383 8812 	msr	BASEPRI_MAX, r3
   1778a:	f3bf 8f6f 	isb	sy
   1778e:	4852      	ldr	r0, [pc, #328]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   17790:	f7ff ff8a 	bl	176a8 <z_spin_lock_valid>
   17794:	b960      	cbnz	r0, 177b0 <z_impl_k_mutex_lock+0x5c>
   17796:	2394      	movs	r3, #148	; 0x94
   17798:	4a50      	ldr	r2, [pc, #320]	; (178dc <z_impl_k_mutex_lock+0x188>)
   1779a:	4951      	ldr	r1, [pc, #324]	; (178e0 <z_impl_k_mutex_lock+0x18c>)
   1779c:	484c      	ldr	r0, [pc, #304]	; (178d0 <z_impl_k_mutex_lock+0x17c>)
   1779e:	f003 fd45 	bl	1b22c <assert_print>
   177a2:	494d      	ldr	r1, [pc, #308]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   177a4:	484f      	ldr	r0, [pc, #316]	; (178e4 <z_impl_k_mutex_lock+0x190>)
   177a6:	f003 fd41 	bl	1b22c <assert_print>
   177aa:	2194      	movs	r1, #148	; 0x94
   177ac:	484b      	ldr	r0, [pc, #300]	; (178dc <z_impl_k_mutex_lock+0x188>)
   177ae:	e7e4      	b.n	1777a <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   177b0:	4849      	ldr	r0, [pc, #292]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   177b2:	f7ff ff95 	bl	176e0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   177b6:	68e3      	ldr	r3, [r4, #12]
   177b8:	4a4b      	ldr	r2, [pc, #300]	; (178e8 <z_impl_k_mutex_lock+0x194>)
   177ba:	b19b      	cbz	r3, 177e4 <z_impl_k_mutex_lock+0x90>
   177bc:	68a0      	ldr	r0, [r4, #8]
   177be:	6891      	ldr	r1, [r2, #8]
   177c0:	4288      	cmp	r0, r1
   177c2:	d027      	beq.n	17814 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   177c4:	ea57 0306 	orrs.w	r3, r7, r6
   177c8:	d12c      	bne.n	17824 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   177ca:	4843      	ldr	r0, [pc, #268]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   177cc:	f7ff ff7a 	bl	176c4 <z_spin_unlock_valid>
   177d0:	b1a0      	cbz	r0, 177fc <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   177d2:	f388 8811 	msr	BASEPRI, r8
   177d6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   177da:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   177de:	b002      	add	sp, #8
   177e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   177e4:	6891      	ldr	r1, [r2, #8]
   177e6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   177ea:	3301      	adds	r3, #1
   177ec:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   177ee:	6893      	ldr	r3, [r2, #8]
   177f0:	4839      	ldr	r0, [pc, #228]	; (178d8 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   177f2:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   177f4:	60a3      	str	r3, [r4, #8]
   177f6:	f7ff ff65 	bl	176c4 <z_spin_unlock_valid>
   177fa:	b968      	cbnz	r0, 17818 <z_impl_k_mutex_lock+0xc4>
   177fc:	23c2      	movs	r3, #194	; 0xc2
   177fe:	4a37      	ldr	r2, [pc, #220]	; (178dc <z_impl_k_mutex_lock+0x188>)
   17800:	493a      	ldr	r1, [pc, #232]	; (178ec <z_impl_k_mutex_lock+0x198>)
   17802:	4833      	ldr	r0, [pc, #204]	; (178d0 <z_impl_k_mutex_lock+0x17c>)
   17804:	f003 fd12 	bl	1b22c <assert_print>
   17808:	4933      	ldr	r1, [pc, #204]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   1780a:	4839      	ldr	r0, [pc, #228]	; (178f0 <z_impl_k_mutex_lock+0x19c>)
   1780c:	f003 fd0e 	bl	1b22c <assert_print>
   17810:	21c2      	movs	r1, #194	; 0xc2
   17812:	e7cb      	b.n	177ac <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   17814:	6921      	ldr	r1, [r4, #16]
   17816:	e7e8      	b.n	177ea <z_impl_k_mutex_lock+0x96>
   17818:	f388 8811 	msr	BASEPRI, r8
   1781c:	f3bf 8f6f 	isb	sy
		return 0;
   17820:	2000      	movs	r0, #0
   17822:	e7dc      	b.n	177de <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17824:	f991 100e 	ldrsb.w	r1, [r1, #14]
   17828:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1782c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   17830:	4299      	cmp	r1, r3
   17832:	bfa8      	it	ge
   17834:	4619      	movge	r1, r3
   17836:	4291      	cmp	r1, r2
   17838:	bfb8      	it	lt
   1783a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1783c:	428b      	cmp	r3, r1
   1783e:	dd02      	ble.n	17846 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   17840:	f006 fe92 	bl	1e568 <adjust_owner_prio.isra.0>
   17844:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17846:	4622      	mov	r2, r4
   17848:	4641      	mov	r1, r8
   1784a:	e9cd 7600 	strd	r7, r6, [sp]
   1784e:	4822      	ldr	r0, [pc, #136]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   17850:	f001 fd20 	bl	19294 <z_pend_curr>
	if (got_mutex == 0) {
   17854:	2800      	cmp	r0, #0
   17856:	d0e3      	beq.n	17820 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   17858:	f04f 0320 	mov.w	r3, #32
   1785c:	f3ef 8611 	mrs	r6, BASEPRI
   17860:	f383 8812 	msr	BASEPRI_MAX, r3
   17864:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17868:	481b      	ldr	r0, [pc, #108]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   1786a:	f7ff ff1d 	bl	176a8 <z_spin_lock_valid>
   1786e:	2800      	cmp	r0, #0
   17870:	d091      	beq.n	17796 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   17872:	4819      	ldr	r0, [pc, #100]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   17874:	f7ff ff34 	bl	176e0 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   17878:	68a0      	ldr	r0, [r4, #8]
   1787a:	b1c0      	cbz	r0, 178ae <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1787c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1787e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17880:	429c      	cmp	r4, r3
   17882:	d00a      	beq.n	1789a <z_impl_k_mutex_lock+0x146>
   17884:	b14b      	cbz	r3, 1789a <z_impl_k_mutex_lock+0x146>
   17886:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1788a:	4299      	cmp	r1, r3
   1788c:	bfa8      	it	ge
   1788e:	4619      	movge	r1, r3
   17890:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   17894:	4299      	cmp	r1, r3
   17896:	bfb8      	it	lt
   17898:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1789a:	f006 fe65 	bl	1e568 <adjust_owner_prio.isra.0>
   1789e:	b130      	cbz	r0, 178ae <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   178a0:	4631      	mov	r1, r6
   178a2:	480d      	ldr	r0, [pc, #52]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   178a4:	f001 fa28 	bl	18cf8 <z_reschedule>
	return -EAGAIN;
   178a8:	f06f 000a 	mvn.w	r0, #10
   178ac:	e797      	b.n	177de <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   178ae:	2d00      	cmp	r5, #0
   178b0:	d1f6      	bne.n	178a0 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   178b2:	4809      	ldr	r0, [pc, #36]	; (178d8 <z_impl_k_mutex_lock+0x184>)
   178b4:	f7ff ff06 	bl	176c4 <z_spin_unlock_valid>
   178b8:	2800      	cmp	r0, #0
   178ba:	d09f      	beq.n	177fc <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   178bc:	f386 8811 	msr	BASEPRI, r6
   178c0:	f3bf 8f6f 	isb	sy
   178c4:	e7f0      	b.n	178a8 <z_impl_k_mutex_lock+0x154>
   178c6:	bf00      	nop
   178c8:	000232a0 	.word	0x000232a0
   178cc:	0002334d 	.word	0x0002334d
   178d0:	0001f995 	.word	0x0001f995
   178d4:	0002336f 	.word	0x0002336f
   178d8:	20009ac4 	.word	0x20009ac4
   178dc:	0001fd89 	.word	0x0001fd89
   178e0:	0001fde2 	.word	0x0001fde2
   178e4:	0001fdf7 	.word	0x0001fdf7
   178e8:	20009a9c 	.word	0x20009a9c
   178ec:	0001fdb6 	.word	0x0001fdb6
   178f0:	0001fdcd 	.word	0x0001fdcd

000178f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   178f4:	b570      	push	{r4, r5, r6, lr}
   178f6:	4604      	mov	r4, r0
   178f8:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   178fc:	b166      	cbz	r6, 17918 <z_impl_k_mutex_unlock+0x24>
   178fe:	4938      	ldr	r1, [pc, #224]	; (179e0 <z_impl_k_mutex_unlock+0xec>)
   17900:	23cd      	movs	r3, #205	; 0xcd
   17902:	4a38      	ldr	r2, [pc, #224]	; (179e4 <z_impl_k_mutex_unlock+0xf0>)
   17904:	4838      	ldr	r0, [pc, #224]	; (179e8 <z_impl_k_mutex_unlock+0xf4>)
   17906:	f003 fc91 	bl	1b22c <assert_print>
   1790a:	4838      	ldr	r0, [pc, #224]	; (179ec <z_impl_k_mutex_unlock+0xf8>)
   1790c:	f003 fc8e 	bl	1b22c <assert_print>
   17910:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   17912:	4834      	ldr	r0, [pc, #208]	; (179e4 <z_impl_k_mutex_unlock+0xf0>)
   17914:	f003 fc83 	bl	1b21e <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   17918:	6883      	ldr	r3, [r0, #8]
   1791a:	2b00      	cmp	r3, #0
   1791c:	d059      	beq.n	179d2 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   1791e:	4a34      	ldr	r2, [pc, #208]	; (179f0 <z_impl_k_mutex_unlock+0xfc>)
   17920:	6892      	ldr	r2, [r2, #8]
   17922:	4293      	cmp	r3, r2
   17924:	d158      	bne.n	179d8 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   17926:	68c3      	ldr	r3, [r0, #12]
   17928:	b93b      	cbnz	r3, 1793a <z_impl_k_mutex_unlock+0x46>
   1792a:	4932      	ldr	r1, [pc, #200]	; (179f4 <z_impl_k_mutex_unlock+0x100>)
   1792c:	23e5      	movs	r3, #229	; 0xe5
   1792e:	4a2d      	ldr	r2, [pc, #180]	; (179e4 <z_impl_k_mutex_unlock+0xf0>)
   17930:	482d      	ldr	r0, [pc, #180]	; (179e8 <z_impl_k_mutex_unlock+0xf4>)
   17932:	f003 fc7b 	bl	1b22c <assert_print>
   17936:	21e5      	movs	r1, #229	; 0xe5
   17938:	e7eb      	b.n	17912 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1793a:	2b01      	cmp	r3, #1
   1793c:	d003      	beq.n	17946 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   1793e:	3b01      	subs	r3, #1
   17940:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   17942:	2000      	movs	r0, #0
}
   17944:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   17946:	f04f 0320 	mov.w	r3, #32
   1794a:	f3ef 8511 	mrs	r5, BASEPRI
   1794e:	f383 8812 	msr	BASEPRI_MAX, r3
   17952:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17956:	4828      	ldr	r0, [pc, #160]	; (179f8 <z_impl_k_mutex_unlock+0x104>)
   17958:	f7ff fea6 	bl	176a8 <z_spin_lock_valid>
   1795c:	b960      	cbnz	r0, 17978 <z_impl_k_mutex_unlock+0x84>
   1795e:	2394      	movs	r3, #148	; 0x94
   17960:	4a26      	ldr	r2, [pc, #152]	; (179fc <z_impl_k_mutex_unlock+0x108>)
   17962:	4927      	ldr	r1, [pc, #156]	; (17a00 <z_impl_k_mutex_unlock+0x10c>)
   17964:	4820      	ldr	r0, [pc, #128]	; (179e8 <z_impl_k_mutex_unlock+0xf4>)
   17966:	f003 fc61 	bl	1b22c <assert_print>
   1796a:	4923      	ldr	r1, [pc, #140]	; (179f8 <z_impl_k_mutex_unlock+0x104>)
   1796c:	4825      	ldr	r0, [pc, #148]	; (17a04 <z_impl_k_mutex_unlock+0x110>)
   1796e:	f003 fc5d 	bl	1b22c <assert_print>
   17972:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17974:	4821      	ldr	r0, [pc, #132]	; (179fc <z_impl_k_mutex_unlock+0x108>)
   17976:	e7cd      	b.n	17914 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   17978:	481f      	ldr	r0, [pc, #124]	; (179f8 <z_impl_k_mutex_unlock+0x104>)
   1797a:	f7ff feb1 	bl	176e0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1797e:	6921      	ldr	r1, [r4, #16]
   17980:	68a0      	ldr	r0, [r4, #8]
   17982:	f006 fdf1 	bl	1e568 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17986:	4620      	mov	r0, r4
   17988:	f001 ff02 	bl	19790 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1798c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1798e:	b150      	cbz	r0, 179a6 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   17990:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17994:	6122      	str	r2, [r4, #16]
   17996:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   17998:	f001 f922 	bl	18be0 <z_ready_thread>
		z_reschedule(&lock, key);
   1799c:	4629      	mov	r1, r5
   1799e:	4816      	ldr	r0, [pc, #88]	; (179f8 <z_impl_k_mutex_unlock+0x104>)
   179a0:	f001 f9aa 	bl	18cf8 <z_reschedule>
   179a4:	e7cd      	b.n	17942 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   179a6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   179a8:	4813      	ldr	r0, [pc, #76]	; (179f8 <z_impl_k_mutex_unlock+0x104>)
   179aa:	f7ff fe8b 	bl	176c4 <z_spin_unlock_valid>
   179ae:	b958      	cbnz	r0, 179c8 <z_impl_k_mutex_unlock+0xd4>
   179b0:	23c2      	movs	r3, #194	; 0xc2
   179b2:	4a12      	ldr	r2, [pc, #72]	; (179fc <z_impl_k_mutex_unlock+0x108>)
   179b4:	4914      	ldr	r1, [pc, #80]	; (17a08 <z_impl_k_mutex_unlock+0x114>)
   179b6:	480c      	ldr	r0, [pc, #48]	; (179e8 <z_impl_k_mutex_unlock+0xf4>)
   179b8:	f003 fc38 	bl	1b22c <assert_print>
   179bc:	490e      	ldr	r1, [pc, #56]	; (179f8 <z_impl_k_mutex_unlock+0x104>)
   179be:	4813      	ldr	r0, [pc, #76]	; (17a0c <z_impl_k_mutex_unlock+0x118>)
   179c0:	f003 fc34 	bl	1b22c <assert_print>
   179c4:	21c2      	movs	r1, #194	; 0xc2
   179c6:	e7d5      	b.n	17974 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   179c8:	f385 8811 	msr	BASEPRI, r5
   179cc:	f3bf 8f6f 	isb	sy
   179d0:	e7b7      	b.n	17942 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   179d2:	f06f 0015 	mvn.w	r0, #21
   179d6:	e7b5      	b.n	17944 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   179d8:	f04f 30ff 	mov.w	r0, #4294967295
   179dc:	e7b2      	b.n	17944 <z_impl_k_mutex_unlock+0x50>
   179de:	bf00      	nop
   179e0:	000232a0 	.word	0x000232a0
   179e4:	0002334d 	.word	0x0002334d
   179e8:	0001f995 	.word	0x0001f995
   179ec:	0002336f 	.word	0x0002336f
   179f0:	20009a9c 	.word	0x20009a9c
   179f4:	00023394 	.word	0x00023394
   179f8:	20009ac4 	.word	0x20009ac4
   179fc:	0001fd89 	.word	0x0001fd89
   17a00:	0001fde2 	.word	0x0001fde2
   17a04:	0001fdf7 	.word	0x0001fdf7
   17a08:	0001fdb6 	.word	0x0001fdb6
   17a0c:	0001fdcd 	.word	0x0001fdcd

00017a10 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   17a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17a14:	4604      	mov	r4, r0
   17a16:	460e      	mov	r6, r1
   17a18:	4690      	mov	r8, r2
   17a1a:	4699      	mov	r9, r3
   17a1c:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17a20:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   17a24:	f04f 0320 	mov.w	r3, #32
   17a28:	f3ef 8711 	mrs	r7, BASEPRI
   17a2c:	f383 8812 	msr	BASEPRI_MAX, r3
   17a30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a34:	4628      	mov	r0, r5
   17a36:	f7ff fe37 	bl	176a8 <z_spin_lock_valid>
   17a3a:	b968      	cbnz	r0, 17a58 <queue_insert+0x48>
   17a3c:	2394      	movs	r3, #148	; 0x94
   17a3e:	4a3b      	ldr	r2, [pc, #236]	; (17b2c <queue_insert+0x11c>)
   17a40:	493b      	ldr	r1, [pc, #236]	; (17b30 <queue_insert+0x120>)
   17a42:	483c      	ldr	r0, [pc, #240]	; (17b34 <queue_insert+0x124>)
   17a44:	f003 fbf2 	bl	1b22c <assert_print>
   17a48:	4629      	mov	r1, r5
   17a4a:	483b      	ldr	r0, [pc, #236]	; (17b38 <queue_insert+0x128>)
   17a4c:	f003 fbee 	bl	1b22c <assert_print>
   17a50:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17a52:	4836      	ldr	r0, [pc, #216]	; (17b2c <queue_insert+0x11c>)
   17a54:	f003 fbe3 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   17a58:	4628      	mov	r0, r5
   17a5a:	f7ff fe41 	bl	176e0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   17a5e:	f1ba 0f00 	cmp.w	sl, #0
   17a62:	d000      	beq.n	17a66 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   17a64:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   17a66:	f104 000c 	add.w	r0, r4, #12
   17a6a:	f001 fe91 	bl	19790 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   17a6e:	b158      	cbz	r0, 17a88 <queue_insert+0x78>
   17a70:	2300      	movs	r3, #0
   17a72:	f8c0 8014 	str.w	r8, [r0, #20]
   17a76:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   17a78:	f001 f8b2 	bl	18be0 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17a7c:	4628      	mov	r0, r5
   17a7e:	4639      	mov	r1, r7
   17a80:	f001 f93a 	bl	18cf8 <z_reschedule>
		return 0;
   17a84:	2000      	movs	r0, #0
   17a86:	e01c      	b.n	17ac2 <queue_insert+0xb2>
	if (alloc) {
   17a88:	f1b9 0f00 	cmp.w	r9, #0
   17a8c:	d02b      	beq.n	17ae6 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   17a8e:	2108      	movs	r1, #8
   17a90:	f003 f938 	bl	1ad04 <z_thread_aligned_alloc>
		if (anode == NULL) {
   17a94:	b9b8      	cbnz	r0, 17ac6 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17a96:	4628      	mov	r0, r5
   17a98:	f7ff fe14 	bl	176c4 <z_spin_unlock_valid>
   17a9c:	b958      	cbnz	r0, 17ab6 <queue_insert+0xa6>
   17a9e:	23c2      	movs	r3, #194	; 0xc2
   17aa0:	4a22      	ldr	r2, [pc, #136]	; (17b2c <queue_insert+0x11c>)
   17aa2:	4926      	ldr	r1, [pc, #152]	; (17b3c <queue_insert+0x12c>)
   17aa4:	4823      	ldr	r0, [pc, #140]	; (17b34 <queue_insert+0x124>)
   17aa6:	f003 fbc1 	bl	1b22c <assert_print>
   17aaa:	4629      	mov	r1, r5
   17aac:	4824      	ldr	r0, [pc, #144]	; (17b40 <queue_insert+0x130>)
   17aae:	f003 fbbd 	bl	1b22c <assert_print>
   17ab2:	21c2      	movs	r1, #194	; 0xc2
   17ab4:	e7cd      	b.n	17a52 <queue_insert+0x42>
	__asm__ volatile(
   17ab6:	f387 8811 	msr	BASEPRI, r7
   17aba:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   17abe:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   17ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   17ac6:	2201      	movs	r2, #1
		anode->data = data;
   17ac8:	f8c0 8004 	str.w	r8, [r0, #4]
   17acc:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17ace:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ad0:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   17ad4:	b95e      	cbnz	r6, 17aee <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ad6:	6822      	ldr	r2, [r4, #0]
   17ad8:	430a      	orrs	r2, r1
   17ada:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   17adc:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   17ade:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   17ae0:	b96a      	cbnz	r2, 17afe <queue_insert+0xee>
	list->tail = node;
   17ae2:	6060      	str	r0, [r4, #4]
}
   17ae4:	e00b      	b.n	17afe <queue_insert+0xee>
}
   17ae6:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   17ae8:	f8c8 9000 	str.w	r9, [r8]
}
   17aec:	e7ef      	b.n	17ace <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17aee:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   17af0:	2a03      	cmp	r2, #3
   17af2:	d810      	bhi.n	17b16 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17af4:	6001      	str	r1, [r0, #0]
	return list->tail;
   17af6:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   17af8:	b939      	cbnz	r1, 17b0a <queue_insert+0xfa>
	list->head = node;
   17afa:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   17afe:	2104      	movs	r1, #4
   17b00:	f104 0014 	add.w	r0, r4, #20
   17b04:	f006 fef2 	bl	1e8ec <z_handle_obj_poll_events>
   17b08:	e7b8      	b.n	17a7c <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17b0a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17b0c:	f002 0203 	and.w	r2, r2, #3
   17b10:	4302      	orrs	r2, r0
   17b12:	600a      	str	r2, [r1, #0]
   17b14:	e7e5      	b.n	17ae2 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17b16:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   17b1a:	430a      	orrs	r2, r1
   17b1c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17b1e:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17b20:	f002 0203 	and.w	r2, r2, #3
   17b24:	ea40 0302 	orr.w	r3, r0, r2
   17b28:	6033      	str	r3, [r6, #0]
}
   17b2a:	e7e8      	b.n	17afe <queue_insert+0xee>
   17b2c:	0001fd89 	.word	0x0001fd89
   17b30:	0001fde2 	.word	0x0001fde2
   17b34:	0001f995 	.word	0x0001f995
   17b38:	0001fdf7 	.word	0x0001fdf7
   17b3c:	0001fdb6 	.word	0x0001fdb6
   17b40:	0001fdcd 	.word	0x0001fdcd

00017b44 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   17b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b48:	4605      	mov	r5, r0
   17b4a:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   17b4c:	460c      	mov	r4, r1
   17b4e:	2900      	cmp	r1, #0
   17b50:	d04a      	beq.n	17be8 <k_queue_append_list+0xa4>
   17b52:	2a00      	cmp	r2, #0
   17b54:	d048      	beq.n	17be8 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17b56:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   17b5a:	f04f 0320 	mov.w	r3, #32
   17b5e:	f3ef 8911 	mrs	r9, BASEPRI
   17b62:	f383 8812 	msr	BASEPRI_MAX, r3
   17b66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b6a:	4630      	mov	r0, r6
   17b6c:	f7ff fd9c 	bl	176a8 <z_spin_lock_valid>
   17b70:	b968      	cbnz	r0, 17b8e <k_queue_append_list+0x4a>
   17b72:	2394      	movs	r3, #148	; 0x94
   17b74:	4a1e      	ldr	r2, [pc, #120]	; (17bf0 <k_queue_append_list+0xac>)
   17b76:	491f      	ldr	r1, [pc, #124]	; (17bf4 <k_queue_append_list+0xb0>)
   17b78:	481f      	ldr	r0, [pc, #124]	; (17bf8 <k_queue_append_list+0xb4>)
   17b7a:	f003 fb57 	bl	1b22c <assert_print>
   17b7e:	4631      	mov	r1, r6
   17b80:	481e      	ldr	r0, [pc, #120]	; (17bfc <k_queue_append_list+0xb8>)
   17b82:	f003 fb53 	bl	1b22c <assert_print>
   17b86:	2194      	movs	r1, #148	; 0x94
   17b88:	4819      	ldr	r0, [pc, #100]	; (17bf0 <k_queue_append_list+0xac>)
   17b8a:	f003 fb48 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   17b8e:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   17b90:	f105 080c 	add.w	r8, r5, #12
   17b94:	f7ff fda4 	bl	176e0 <z_spin_lock_set_owner>
   17b98:	4640      	mov	r0, r8
   17b9a:	f001 fdf9 	bl	19790 <z_unpend_first_thread>
	}

	while ((head != NULL) && (thread != NULL)) {
   17b9e:	b168      	cbz	r0, 17bbc <k_queue_append_list+0x78>
   17ba0:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   17ba4:	6144      	str	r4, [r0, #20]
   17ba6:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   17baa:	f001 f819 	bl	18be0 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   17bae:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   17bb0:	4640      	mov	r0, r8
   17bb2:	f001 fded 	bl	19790 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   17bb6:	b12c      	cbz	r4, 17bc4 <k_queue_append_list+0x80>
   17bb8:	2800      	cmp	r0, #0
   17bba:	d1f3      	bne.n	17ba4 <k_queue_append_list+0x60>
	return list->tail;
   17bbc:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17bbe:	b96b      	cbnz	r3, 17bdc <k_queue_append_list+0x98>
	list->head = node;
   17bc0:	602c      	str	r4, [r5, #0]
	list->tail = node;
   17bc2:	606f      	str	r7, [r5, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   17bc4:	2104      	movs	r1, #4
   17bc6:	f105 0014 	add.w	r0, r5, #20
   17bca:	f006 fe8f 	bl	1e8ec <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17bce:	4630      	mov	r0, r6
   17bd0:	4649      	mov	r1, r9
   17bd2:	f001 f891 	bl	18cf8 <z_reschedule>
	return 0;
   17bd6:	2000      	movs	r0, #0
}
   17bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17bdc:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17bde:	f002 0203 	and.w	r2, r2, #3
   17be2:	4314      	orrs	r4, r2
   17be4:	601c      	str	r4, [r3, #0]
}
   17be6:	e7ec      	b.n	17bc2 <k_queue_append_list+0x7e>
		return -EINVAL;
   17be8:	f06f 0015 	mvn.w	r0, #21
   17bec:	e7f4      	b.n	17bd8 <k_queue_append_list+0x94>
   17bee:	bf00      	nop
   17bf0:	0001fd89 	.word	0x0001fd89
   17bf4:	0001fde2 	.word	0x0001fde2
   17bf8:	0001f995 	.word	0x0001f995
   17bfc:	0001fdf7 	.word	0x0001fdf7

00017c00 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17c04:	4606      	mov	r6, r0
   17c06:	4691      	mov	r9, r2
   17c08:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17c0a:	f100 0508 	add.w	r5, r0, #8
   17c0e:	f04f 0320 	mov.w	r3, #32
   17c12:	f3ef 8811 	mrs	r8, BASEPRI
   17c16:	f383 8812 	msr	BASEPRI_MAX, r3
   17c1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c1e:	4628      	mov	r0, r5
   17c20:	f7ff fd42 	bl	176a8 <z_spin_lock_valid>
   17c24:	b968      	cbnz	r0, 17c42 <z_impl_k_queue_get+0x42>
   17c26:	2394      	movs	r3, #148	; 0x94
   17c28:	4a23      	ldr	r2, [pc, #140]	; (17cb8 <z_impl_k_queue_get+0xb8>)
   17c2a:	4924      	ldr	r1, [pc, #144]	; (17cbc <z_impl_k_queue_get+0xbc>)
   17c2c:	4824      	ldr	r0, [pc, #144]	; (17cc0 <z_impl_k_queue_get+0xc0>)
   17c2e:	f003 fafd 	bl	1b22c <assert_print>
   17c32:	4629      	mov	r1, r5
   17c34:	4823      	ldr	r0, [pc, #140]	; (17cc4 <z_impl_k_queue_get+0xc4>)
   17c36:	f003 faf9 	bl	1b22c <assert_print>
   17c3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c3c:	481e      	ldr	r0, [pc, #120]	; (17cb8 <z_impl_k_queue_get+0xb8>)
   17c3e:	f003 faee 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   17c42:	4628      	mov	r0, r5
   17c44:	f7ff fd4c 	bl	176e0 <z_spin_lock_set_owner>
	return list->head;
   17c48:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17c4a:	b1ec      	cbz	r4, 17c88 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17c4c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17c4e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17c50:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17c54:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17c56:	4620      	mov	r0, r4
   17c58:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   17c5c:	6033      	str	r3, [r6, #0]
	list->tail = node;
   17c5e:	bf08      	it	eq
   17c60:	6073      	streq	r3, [r6, #4]
   17c62:	f006 fc90 	bl	1e586 <z_queue_node_peek>
   17c66:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c68:	4628      	mov	r0, r5
   17c6a:	f7ff fd2b 	bl	176c4 <z_spin_unlock_valid>
   17c6e:	b9d8      	cbnz	r0, 17ca8 <z_impl_k_queue_get+0xa8>
   17c70:	23c2      	movs	r3, #194	; 0xc2
   17c72:	4a11      	ldr	r2, [pc, #68]	; (17cb8 <z_impl_k_queue_get+0xb8>)
   17c74:	4914      	ldr	r1, [pc, #80]	; (17cc8 <z_impl_k_queue_get+0xc8>)
   17c76:	4812      	ldr	r0, [pc, #72]	; (17cc0 <z_impl_k_queue_get+0xc0>)
   17c78:	f003 fad8 	bl	1b22c <assert_print>
   17c7c:	4629      	mov	r1, r5
   17c7e:	4813      	ldr	r0, [pc, #76]	; (17ccc <z_impl_k_queue_get+0xcc>)
   17c80:	f003 fad4 	bl	1b22c <assert_print>
   17c84:	21c2      	movs	r1, #194	; 0xc2
   17c86:	e7d9      	b.n	17c3c <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17c88:	ea59 0307 	orrs.w	r3, r9, r7
   17c8c:	d0ec      	beq.n	17c68 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17c8e:	4641      	mov	r1, r8
   17c90:	4628      	mov	r0, r5
   17c92:	e9cd 9700 	strd	r9, r7, [sp]
   17c96:	f106 020c 	add.w	r2, r6, #12
   17c9a:	f001 fafb 	bl	19294 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   17c9e:	b938      	cbnz	r0, 17cb0 <z_impl_k_queue_get+0xb0>
   17ca0:	4b0b      	ldr	r3, [pc, #44]	; (17cd0 <z_impl_k_queue_get+0xd0>)
   17ca2:	689b      	ldr	r3, [r3, #8]
   17ca4:	695c      	ldr	r4, [r3, #20]
   17ca6:	e003      	b.n	17cb0 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   17ca8:	f388 8811 	msr	BASEPRI, r8
   17cac:	f3bf 8f6f 	isb	sy
}
   17cb0:	4620      	mov	r0, r4
   17cb2:	b003      	add	sp, #12
   17cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17cb8:	0001fd89 	.word	0x0001fd89
   17cbc:	0001fde2 	.word	0x0001fde2
   17cc0:	0001f995 	.word	0x0001f995
   17cc4:	0001fdf7 	.word	0x0001fdf7
   17cc8:	0001fdb6 	.word	0x0001fdb6
   17ccc:	0001fdcd 	.word	0x0001fdcd
   17cd0:	20009a9c 	.word	0x20009a9c

00017cd4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17cd4:	b538      	push	{r3, r4, r5, lr}
   17cd6:	4604      	mov	r4, r0
	__asm__ volatile(
   17cd8:	f04f 0320 	mov.w	r3, #32
   17cdc:	f3ef 8511 	mrs	r5, BASEPRI
   17ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   17ce4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ce8:	4817      	ldr	r0, [pc, #92]	; (17d48 <z_impl_k_sem_give+0x74>)
   17cea:	f7ff fcdd 	bl	176a8 <z_spin_lock_valid>
   17cee:	b968      	cbnz	r0, 17d0c <z_impl_k_sem_give+0x38>
   17cf0:	2394      	movs	r3, #148	; 0x94
   17cf2:	4a16      	ldr	r2, [pc, #88]	; (17d4c <z_impl_k_sem_give+0x78>)
   17cf4:	4916      	ldr	r1, [pc, #88]	; (17d50 <z_impl_k_sem_give+0x7c>)
   17cf6:	4817      	ldr	r0, [pc, #92]	; (17d54 <z_impl_k_sem_give+0x80>)
   17cf8:	f003 fa98 	bl	1b22c <assert_print>
   17cfc:	4912      	ldr	r1, [pc, #72]	; (17d48 <z_impl_k_sem_give+0x74>)
   17cfe:	4816      	ldr	r0, [pc, #88]	; (17d58 <z_impl_k_sem_give+0x84>)
   17d00:	f003 fa94 	bl	1b22c <assert_print>
   17d04:	2194      	movs	r1, #148	; 0x94
   17d06:	4811      	ldr	r0, [pc, #68]	; (17d4c <z_impl_k_sem_give+0x78>)
   17d08:	f003 fa89 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   17d0c:	480e      	ldr	r0, [pc, #56]	; (17d48 <z_impl_k_sem_give+0x74>)
   17d0e:	f7ff fce7 	bl	176e0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   17d12:	4620      	mov	r0, r4
   17d14:	f001 fd3c 	bl	19790 <z_unpend_first_thread>

	if (thread != NULL) {
   17d18:	b148      	cbz	r0, 17d2e <z_impl_k_sem_give+0x5a>
   17d1a:	2200      	movs	r2, #0
   17d1c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   17d1e:	f000 ff5f 	bl	18be0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   17d22:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   17d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   17d28:	4807      	ldr	r0, [pc, #28]	; (17d48 <z_impl_k_sem_give+0x74>)
   17d2a:	f000 bfe5 	b.w	18cf8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17d2e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   17d32:	429a      	cmp	r2, r3
   17d34:	bf18      	it	ne
   17d36:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17d38:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17d3a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17d3c:	f104 0010 	add.w	r0, r4, #16
   17d40:	f006 fdd4 	bl	1e8ec <z_handle_obj_poll_events>
}
   17d44:	e7ed      	b.n	17d22 <z_impl_k_sem_give+0x4e>
   17d46:	bf00      	nop
   17d48:	20009ac8 	.word	0x20009ac8
   17d4c:	0001fd89 	.word	0x0001fd89
   17d50:	0001fde2 	.word	0x0001fde2
   17d54:	0001f995 	.word	0x0001f995
   17d58:	0001fdf7 	.word	0x0001fdf7

00017d5c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17d5e:	4604      	mov	r4, r0
   17d60:	4616      	mov	r6, r2
   17d62:	461d      	mov	r5, r3
   17d64:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   17d68:	b17b      	cbz	r3, 17d8a <z_impl_k_sem_take+0x2e>
   17d6a:	ea52 0305 	orrs.w	r3, r2, r5
   17d6e:	d00c      	beq.n	17d8a <z_impl_k_sem_take+0x2e>
   17d70:	492d      	ldr	r1, [pc, #180]	; (17e28 <z_impl_k_sem_take+0xcc>)
   17d72:	2379      	movs	r3, #121	; 0x79
   17d74:	4a2d      	ldr	r2, [pc, #180]	; (17e2c <z_impl_k_sem_take+0xd0>)
   17d76:	482e      	ldr	r0, [pc, #184]	; (17e30 <z_impl_k_sem_take+0xd4>)
   17d78:	f003 fa58 	bl	1b22c <assert_print>
   17d7c:	482d      	ldr	r0, [pc, #180]	; (17e34 <z_impl_k_sem_take+0xd8>)
   17d7e:	f003 fa55 	bl	1b22c <assert_print>
   17d82:	2179      	movs	r1, #121	; 0x79
   17d84:	4829      	ldr	r0, [pc, #164]	; (17e2c <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d86:	f003 fa4a 	bl	1b21e <assert_post_action>
   17d8a:	f04f 0320 	mov.w	r3, #32
   17d8e:	f3ef 8711 	mrs	r7, BASEPRI
   17d92:	f383 8812 	msr	BASEPRI_MAX, r3
   17d96:	f3bf 8f6f 	isb	sy
   17d9a:	4827      	ldr	r0, [pc, #156]	; (17e38 <z_impl_k_sem_take+0xdc>)
   17d9c:	f7ff fc84 	bl	176a8 <z_spin_lock_valid>
   17da0:	b960      	cbnz	r0, 17dbc <z_impl_k_sem_take+0x60>
   17da2:	2394      	movs	r3, #148	; 0x94
   17da4:	4a25      	ldr	r2, [pc, #148]	; (17e3c <z_impl_k_sem_take+0xe0>)
   17da6:	4926      	ldr	r1, [pc, #152]	; (17e40 <z_impl_k_sem_take+0xe4>)
   17da8:	4821      	ldr	r0, [pc, #132]	; (17e30 <z_impl_k_sem_take+0xd4>)
   17daa:	f003 fa3f 	bl	1b22c <assert_print>
   17dae:	4922      	ldr	r1, [pc, #136]	; (17e38 <z_impl_k_sem_take+0xdc>)
   17db0:	4824      	ldr	r0, [pc, #144]	; (17e44 <z_impl_k_sem_take+0xe8>)
   17db2:	f003 fa3b 	bl	1b22c <assert_print>
   17db6:	2194      	movs	r1, #148	; 0x94
   17db8:	4820      	ldr	r0, [pc, #128]	; (17e3c <z_impl_k_sem_take+0xe0>)
   17dba:	e7e4      	b.n	17d86 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   17dbc:	481e      	ldr	r0, [pc, #120]	; (17e38 <z_impl_k_sem_take+0xdc>)
   17dbe:	f7ff fc8f 	bl	176e0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   17dc2:	68a3      	ldr	r3, [r4, #8]
   17dc4:	b1c3      	cbz	r3, 17df8 <z_impl_k_sem_take+0x9c>
		sem->count--;
   17dc6:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17dc8:	481b      	ldr	r0, [pc, #108]	; (17e38 <z_impl_k_sem_take+0xdc>)
   17dca:	60a3      	str	r3, [r4, #8]
   17dcc:	f7ff fc7a 	bl	176c4 <z_spin_unlock_valid>
   17dd0:	b958      	cbnz	r0, 17dea <z_impl_k_sem_take+0x8e>
   17dd2:	23c2      	movs	r3, #194	; 0xc2
   17dd4:	4a19      	ldr	r2, [pc, #100]	; (17e3c <z_impl_k_sem_take+0xe0>)
   17dd6:	491c      	ldr	r1, [pc, #112]	; (17e48 <z_impl_k_sem_take+0xec>)
   17dd8:	4815      	ldr	r0, [pc, #84]	; (17e30 <z_impl_k_sem_take+0xd4>)
   17dda:	f003 fa27 	bl	1b22c <assert_print>
   17dde:	4916      	ldr	r1, [pc, #88]	; (17e38 <z_impl_k_sem_take+0xdc>)
   17de0:	481a      	ldr	r0, [pc, #104]	; (17e4c <z_impl_k_sem_take+0xf0>)
   17de2:	f003 fa23 	bl	1b22c <assert_print>
   17de6:	21c2      	movs	r1, #194	; 0xc2
   17de8:	e7e6      	b.n	17db8 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   17dea:	f387 8811 	msr	BASEPRI, r7
   17dee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   17df2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   17df4:	b003      	add	sp, #12
   17df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17df8:	ea56 0305 	orrs.w	r3, r6, r5
   17dfc:	d10b      	bne.n	17e16 <z_impl_k_sem_take+0xba>
   17dfe:	480e      	ldr	r0, [pc, #56]	; (17e38 <z_impl_k_sem_take+0xdc>)
   17e00:	f7ff fc60 	bl	176c4 <z_spin_unlock_valid>
   17e04:	2800      	cmp	r0, #0
   17e06:	d0e4      	beq.n	17dd2 <z_impl_k_sem_take+0x76>
   17e08:	f387 8811 	msr	BASEPRI, r7
   17e0c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   17e10:	f06f 000f 	mvn.w	r0, #15
   17e14:	e7ee      	b.n	17df4 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17e16:	4622      	mov	r2, r4
   17e18:	4639      	mov	r1, r7
   17e1a:	e9cd 6500 	strd	r6, r5, [sp]
   17e1e:	4806      	ldr	r0, [pc, #24]	; (17e38 <z_impl_k_sem_take+0xdc>)
   17e20:	f001 fa38 	bl	19294 <z_pend_curr>
	return ret;
   17e24:	e7e6      	b.n	17df4 <z_impl_k_sem_take+0x98>
   17e26:	bf00      	nop
   17e28:	000233cb 	.word	0x000233cb
   17e2c:	000233ab 	.word	0x000233ab
   17e30:	0001f995 	.word	0x0001f995
   17e34:	00022009 	.word	0x00022009
   17e38:	20009ac8 	.word	0x20009ac8
   17e3c:	0001fd89 	.word	0x0001fd89
   17e40:	0001fde2 	.word	0x0001fde2
   17e44:	0001fdf7 	.word	0x0001fdf7
   17e48:	0001fdb6 	.word	0x0001fdb6
   17e4c:	0001fdcd 	.word	0x0001fdcd

00017e50 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   17e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   17e52:	2400      	movs	r4, #0
   17e54:	4b08      	ldr	r3, [pc, #32]	; (17e78 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   17e5a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   17e5c:	ab02      	add	r3, sp, #8
   17e5e:	9300      	str	r3, [sp, #0]
   17e60:	4906      	ldr	r1, [pc, #24]	; (17e7c <k_sys_work_q_init+0x2c>)
   17e62:	f04f 33ff 	mov.w	r3, #4294967295
   17e66:	4806      	ldr	r0, [pc, #24]	; (17e80 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   17e68:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   17e6c:	f000 fac0 	bl	183f0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   17e70:	4620      	mov	r0, r4
   17e72:	b004      	add	sp, #16
   17e74:	bd10      	pop	{r4, pc}
   17e76:	bf00      	nop
   17e78:	00023419 	.word	0x00023419
   17e7c:	2000c3b0 	.word	0x2000c3b0
   17e80:	20009538 	.word	0x20009538

00017e84 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   17e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e88:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e8a:	4e6e      	ldr	r6, [pc, #440]	; (18044 <work_queue_main+0x1c0>)
	return list->head;
   17e8c:	4f6e      	ldr	r7, [pc, #440]	; (18048 <work_queue_main+0x1c4>)
   17e8e:	b085      	sub	sp, #20
	__asm__ volatile(
   17e90:	f04f 0320 	mov.w	r3, #32
   17e94:	f3ef 8811 	mrs	r8, BASEPRI
   17e98:	f383 8812 	msr	BASEPRI_MAX, r3
   17e9c:	f3bf 8f6f 	isb	sy
   17ea0:	4630      	mov	r0, r6
   17ea2:	f7ff fc01 	bl	176a8 <z_spin_lock_valid>
   17ea6:	b968      	cbnz	r0, 17ec4 <work_queue_main+0x40>
   17ea8:	2394      	movs	r3, #148	; 0x94
   17eaa:	4a68      	ldr	r2, [pc, #416]	; (1804c <work_queue_main+0x1c8>)
   17eac:	4968      	ldr	r1, [pc, #416]	; (18050 <work_queue_main+0x1cc>)
   17eae:	4869      	ldr	r0, [pc, #420]	; (18054 <work_queue_main+0x1d0>)
   17eb0:	f003 f9bc 	bl	1b22c <assert_print>
   17eb4:	4963      	ldr	r1, [pc, #396]	; (18044 <work_queue_main+0x1c0>)
   17eb6:	4868      	ldr	r0, [pc, #416]	; (18058 <work_queue_main+0x1d4>)
   17eb8:	f003 f9b8 	bl	1b22c <assert_print>
   17ebc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ebe:	4863      	ldr	r0, [pc, #396]	; (1804c <work_queue_main+0x1c8>)
   17ec0:	f003 f9ad 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   17ec4:	4630      	mov	r0, r6
   17ec6:	f7ff fc0b 	bl	176e0 <z_spin_lock_set_owner>
   17eca:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   17ece:	b9ad      	cbnz	r5, 17efc <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   17ed0:	2102      	movs	r1, #2
   17ed2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   17ed6:	f006 fb94 	bl	1e602 <flag_test_and_clear>
   17eda:	2800      	cmp	r0, #0
   17edc:	d135      	bne.n	17f4a <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   17ede:	2300      	movs	r3, #0
   17ee0:	f04f 32ff 	mov.w	r2, #4294967295
   17ee4:	9302      	str	r3, [sp, #8]
   17ee6:	f04f 33ff 	mov.w	r3, #4294967295
   17eea:	4641      	mov	r1, r8
   17eec:	e9cd 2300 	strd	r2, r3, [sp]
   17ef0:	4630      	mov	r0, r6
   17ef2:	f104 0290 	add.w	r2, r4, #144	; 0x90
   17ef6:	f001 ff41 	bl	19d7c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   17efa:	e7c9      	b.n	17e90 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17efc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   17f00:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f02:	4295      	cmp	r5, r2
	list->tail = node;
   17f04:	bf08      	it	eq
   17f06:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   17f0a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   17f0e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f12:	4630      	mov	r0, r6
   17f14:	f043 0302 	orr.w	r3, r3, #2
   17f18:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   17f1c:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   17f1e:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   17f22:	f023 0304 	bic.w	r3, r3, #4
   17f26:	f043 0301 	orr.w	r3, r3, #1
   17f2a:	60eb      	str	r3, [r5, #12]
   17f2c:	f7ff fbca 	bl	176c4 <z_spin_unlock_valid>
   17f30:	b9a8      	cbnz	r0, 17f5e <work_queue_main+0xda>
   17f32:	23c2      	movs	r3, #194	; 0xc2
   17f34:	4a45      	ldr	r2, [pc, #276]	; (1804c <work_queue_main+0x1c8>)
   17f36:	4949      	ldr	r1, [pc, #292]	; (1805c <work_queue_main+0x1d8>)
   17f38:	4846      	ldr	r0, [pc, #280]	; (18054 <work_queue_main+0x1d0>)
   17f3a:	f003 f977 	bl	1b22c <assert_print>
   17f3e:	4941      	ldr	r1, [pc, #260]	; (18044 <work_queue_main+0x1c0>)
   17f40:	4847      	ldr	r0, [pc, #284]	; (18060 <work_queue_main+0x1dc>)
   17f42:	f003 f973 	bl	1b22c <assert_print>
   17f46:	21c2      	movs	r1, #194	; 0xc2
   17f48:	e7b9      	b.n	17ebe <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   17f4a:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   17f4e:	2200      	movs	r2, #0
   17f50:	2101      	movs	r1, #1
   17f52:	4628      	mov	r0, r5
   17f54:	f001 feb4 	bl	19cc0 <z_sched_wake>
   17f58:	2800      	cmp	r0, #0
   17f5a:	d1f8      	bne.n	17f4e <work_queue_main+0xca>
   17f5c:	e7bf      	b.n	17ede <work_queue_main+0x5a>
	__asm__ volatile(
   17f5e:	f388 8811 	msr	BASEPRI, r8
   17f62:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   17f66:	f1b9 0f00 	cmp.w	r9, #0
   17f6a:	d10a      	bne.n	17f82 <work_queue_main+0xfe>
   17f6c:	493d      	ldr	r1, [pc, #244]	; (18064 <work_queue_main+0x1e0>)
   17f6e:	4839      	ldr	r0, [pc, #228]	; (18054 <work_queue_main+0x1d0>)
   17f70:	f240 239b 	movw	r3, #667	; 0x29b
   17f74:	4a3c      	ldr	r2, [pc, #240]	; (18068 <work_queue_main+0x1e4>)
   17f76:	f003 f959 	bl	1b22c <assert_print>
   17f7a:	f240 219b 	movw	r1, #667	; 0x29b
   17f7e:	483a      	ldr	r0, [pc, #232]	; (18068 <work_queue_main+0x1e4>)
   17f80:	e79e      	b.n	17ec0 <work_queue_main+0x3c>
		handler(work);
   17f82:	4628      	mov	r0, r5
   17f84:	47c8      	blx	r9
	__asm__ volatile(
   17f86:	f04f 0320 	mov.w	r3, #32
   17f8a:	f3ef 8a11 	mrs	sl, BASEPRI
   17f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   17f92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f96:	4630      	mov	r0, r6
   17f98:	f7ff fb86 	bl	176a8 <z_spin_lock_valid>
   17f9c:	2800      	cmp	r0, #0
   17f9e:	d083      	beq.n	17ea8 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   17fa0:	4630      	mov	r0, r6
   17fa2:	f7ff fb9d 	bl	176e0 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   17fa6:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17fa8:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   17faa:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17fae:	d417      	bmi.n	17fe0 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   17fb0:	60ea      	str	r2, [r5, #12]
   17fb2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fb6:	4630      	mov	r0, r6
   17fb8:	f023 0302 	bic.w	r3, r3, #2
   17fbc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   17fc0:	f3c3 2500 	ubfx	r5, r3, #8, #1
   17fc4:	f7ff fb7e 	bl	176c4 <z_spin_unlock_valid>
   17fc8:	2800      	cmp	r0, #0
   17fca:	d0b2      	beq.n	17f32 <work_queue_main+0xae>
	__asm__ volatile(
   17fcc:	f38a 8811 	msr	BASEPRI, sl
   17fd0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   17fd4:	2d00      	cmp	r5, #0
   17fd6:	f47f af5b 	bne.w	17e90 <work_queue_main+0xc>
	z_impl_k_yield();
   17fda:	f001 fc35 	bl	19848 <z_impl_k_yield>
}
   17fde:	e757      	b.n	17e90 <work_queue_main+0xc>
	return list->head;
   17fe0:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   17fe2:	f023 0303 	bic.w	r3, r3, #3
   17fe6:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   17fe8:	2800      	cmp	r0, #0
   17fea:	d0e2      	beq.n	17fb2 <work_queue_main+0x12e>
	return node->next;
   17fec:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   17ff0:	46c3      	mov	fp, r8
	return node->next;
   17ff2:	f8d0 9000 	ldr.w	r9, [r0]
   17ff6:	2800      	cmp	r0, #0
   17ff8:	d0db      	beq.n	17fb2 <work_queue_main+0x12e>
		if (wc->work == work) {
   17ffa:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   17ffc:	4602      	mov	r2, r0
		if (wc->work == work) {
   17ffe:	429d      	cmp	r5, r3
   18000:	d10d      	bne.n	1801e <work_queue_main+0x19a>
   18002:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18004:	f1b8 0f00 	cmp.w	r8, #0
   18008:	d112      	bne.n	18030 <work_queue_main+0x1ac>
   1800a:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1800c:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1800e:	4283      	cmp	r3, r0
   18010:	d100      	bne.n	18014 <work_queue_main+0x190>
	list->tail = node;
   18012:	607a      	str	r2, [r7, #4]
	parent->next = child;
   18014:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   18018:	f7ff fe5c 	bl	17cd4 <z_impl_k_sem_give>
}
   1801c:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1801e:	f1b9 0f00 	cmp.w	r9, #0
   18022:	d00d      	beq.n	18040 <work_queue_main+0x1bc>
	return node->next;
   18024:	f8d9 3000 	ldr.w	r3, [r9]
   18028:	4648      	mov	r0, r9
   1802a:	4690      	mov	r8, r2
   1802c:	4699      	mov	r9, r3
   1802e:	e7e2      	b.n	17ff6 <work_queue_main+0x172>
	parent->next = child;
   18030:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   18034:	687b      	ldr	r3, [r7, #4]
   18036:	4283      	cmp	r3, r0
	list->tail = node;
   18038:	bf08      	it	eq
   1803a:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   1803e:	e7e9      	b.n	18014 <work_queue_main+0x190>
   18040:	464b      	mov	r3, r9
   18042:	e7f1      	b.n	18028 <work_queue_main+0x1a4>
   18044:	20009ad4 	.word	0x20009ad4
   18048:	20009acc 	.word	0x20009acc
   1804c:	0001fd89 	.word	0x0001fd89
   18050:	0001fde2 	.word	0x0001fde2
   18054:	0001f995 	.word	0x0001f995
   18058:	0001fdf7 	.word	0x0001fdf7
   1805c:	0001fdb6 	.word	0x0001fdb6
   18060:	0001fdcd 	.word	0x0001fdcd
   18064:	00023443 	.word	0x00023443
   18068:	00023422 	.word	0x00023422

0001806c <cancel_sync_locked>:
{
   1806c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1806e:	68c3      	ldr	r3, [r0, #12]
{
   18070:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   18072:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   18076:	079b      	lsls	r3, r3, #30
{
   18078:	460c      	mov	r4, r1
	if (ret) {
   1807a:	d50d      	bpl.n	18098 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1807c:	2201      	movs	r2, #1
   1807e:	2100      	movs	r1, #0
   18080:	f104 0008 	add.w	r0, r4, #8
   18084:	f006 faad 	bl	1e5e2 <z_impl_k_sem_init>
	parent->next = child;
   18088:	2300      	movs	r3, #0
   1808a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1808c:	4b05      	ldr	r3, [pc, #20]	; (180a4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1808e:	6065      	str	r5, [r4, #4]
   18090:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   18092:	b91a      	cbnz	r2, 1809c <cancel_sync_locked+0x30>
	list->head = node;
   18094:	e9c3 4400 	strd	r4, r4, [r3]
}
   18098:	4630      	mov	r0, r6
   1809a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1809c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1809e:	605c      	str	r4, [r3, #4]
}
   180a0:	e7fa      	b.n	18098 <cancel_sync_locked+0x2c>
   180a2:	bf00      	nop
   180a4:	20009acc 	.word	0x20009acc

000180a8 <submit_to_queue_locked>:
{
   180a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   180aa:	68c3      	ldr	r3, [r0, #12]
{
   180ac:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180ae:	079a      	lsls	r2, r3, #30
{
   180b0:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180b2:	f3c3 0640 	ubfx	r6, r3, #1, #1
   180b6:	d439      	bmi.n	1812c <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   180b8:	075b      	lsls	r3, r3, #29
   180ba:	d425      	bmi.n	18108 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   180bc:	680b      	ldr	r3, [r1, #0]
   180be:	b90b      	cbnz	r3, 180c4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   180c0:	6883      	ldr	r3, [r0, #8]
   180c2:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   180c4:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   180c6:	07dd      	lsls	r5, r3, #31
   180c8:	d521      	bpl.n	1810e <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   180ca:	68a3      	ldr	r3, [r4, #8]
   180cc:	b95b      	cbnz	r3, 180e6 <submit_to_queue_locked+0x3e>
   180ce:	4928      	ldr	r1, [pc, #160]	; (18170 <submit_to_queue_locked+0xc8>)
   180d0:	4828      	ldr	r0, [pc, #160]	; (18174 <submit_to_queue_locked+0xcc>)
   180d2:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   180d6:	4a28      	ldr	r2, [pc, #160]	; (18178 <submit_to_queue_locked+0xd0>)
   180d8:	f003 f8a8 	bl	1b22c <assert_print>
   180dc:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   180e0:	4825      	ldr	r0, [pc, #148]	; (18178 <submit_to_queue_locked+0xd0>)
   180e2:	f003 f89c 	bl	1b21e <assert_post_action>
			ret = 2;
   180e6:	2602      	movs	r6, #2
			*queuep = work->queue;
   180e8:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   180ea:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   180ec:	2d00      	cmp	r5, #0
   180ee:	d03c      	beq.n	1816a <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   180f0:	4b22      	ldr	r3, [pc, #136]	; (1817c <submit_to_queue_locked+0xd4>)
   180f2:	689b      	ldr	r3, [r3, #8]
   180f4:	42ab      	cmp	r3, r5
   180f6:	d00c      	beq.n	18112 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   180f8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   180fc:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   180fe:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18102:	d416      	bmi.n	18132 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   18104:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   18108:	2300      	movs	r3, #0
   1810a:	603b      	str	r3, [r7, #0]
	return ret;
   1810c:	e027      	b.n	1815e <submit_to_queue_locked+0xb6>
		ret = 1;
   1810e:	2601      	movs	r6, #1
   18110:	e7eb      	b.n	180ea <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18112:	f006 fa15 	bl	1e540 <k_is_in_isr>
   18116:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   1811a:	2800      	cmp	r0, #0
   1811c:	d1ee      	bne.n	180fc <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1811e:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18120:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18124:	d5ee      	bpl.n	18104 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   18126:	b152      	cbz	r2, 1813e <submit_to_queue_locked+0x96>
   18128:	075b      	lsls	r3, r3, #29
   1812a:	d408      	bmi.n	1813e <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   1812c:	f06f 060f 	mvn.w	r6, #15
   18130:	e7ea      	b.n	18108 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   18132:	2a00      	cmp	r2, #0
   18134:	d1fa      	bne.n	1812c <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   18136:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1813a:	2b00      	cmp	r3, #0
   1813c:	d1f6      	bne.n	1812c <submit_to_queue_locked+0x84>
	parent->next = child;
   1813e:	2300      	movs	r3, #0
   18140:	6023      	str	r3, [r4, #0]
	return list->tail;
   18142:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   18146:	b963      	cbnz	r3, 18162 <submit_to_queue_locked+0xba>
	list->head = node;
   18148:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   1814c:	4628      	mov	r0, r5
   1814e:	f006 fa71 	bl	1e634 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18152:	68e3      	ldr	r3, [r4, #12]
   18154:	f043 0304 	orr.w	r3, r3, #4
   18158:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1815a:	683b      	ldr	r3, [r7, #0]
   1815c:	60a3      	str	r3, [r4, #8]
}
   1815e:	4630      	mov	r0, r6
   18160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18162:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18164:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   18168:	e7f0      	b.n	1814c <submit_to_queue_locked+0xa4>
		return -EINVAL;
   1816a:	f06f 0615 	mvn.w	r6, #21
   1816e:	e7cb      	b.n	18108 <submit_to_queue_locked+0x60>
   18170:	0002345a 	.word	0x0002345a
   18174:	0001f995 	.word	0x0001f995
   18178:	00023422 	.word	0x00023422
   1817c:	20009a9c 	.word	0x20009a9c

00018180 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   18180:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18182:	4604      	mov	r4, r0
	__asm__ volatile(
   18184:	f04f 0320 	mov.w	r3, #32
   18188:	f3ef 8511 	mrs	r5, BASEPRI
   1818c:	f383 8812 	msr	BASEPRI_MAX, r3
   18190:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18194:	481c      	ldr	r0, [pc, #112]	; (18208 <work_timeout+0x88>)
   18196:	f7ff fa87 	bl	176a8 <z_spin_lock_valid>
   1819a:	b968      	cbnz	r0, 181b8 <work_timeout+0x38>
   1819c:	2394      	movs	r3, #148	; 0x94
   1819e:	4a1b      	ldr	r2, [pc, #108]	; (1820c <work_timeout+0x8c>)
   181a0:	491b      	ldr	r1, [pc, #108]	; (18210 <work_timeout+0x90>)
   181a2:	481c      	ldr	r0, [pc, #112]	; (18214 <work_timeout+0x94>)
   181a4:	f003 f842 	bl	1b22c <assert_print>
   181a8:	4917      	ldr	r1, [pc, #92]	; (18208 <work_timeout+0x88>)
   181aa:	481b      	ldr	r0, [pc, #108]	; (18218 <work_timeout+0x98>)
   181ac:	f003 f83e 	bl	1b22c <assert_print>
   181b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181b2:	4816      	ldr	r0, [pc, #88]	; (1820c <work_timeout+0x8c>)
   181b4:	f003 f833 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   181b8:	4813      	ldr	r0, [pc, #76]	; (18208 <work_timeout+0x88>)
   181ba:	f7ff fa91 	bl	176e0 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   181be:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   181c0:	2103      	movs	r1, #3
   181c2:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   181c4:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   181c6:	f1a4 0610 	sub.w	r6, r4, #16
   181ca:	f006 fa1a 	bl	1e602 <flag_test_and_clear>
   181ce:	b128      	cbz	r0, 181dc <work_timeout+0x5c>
		queue = dw->queue;
   181d0:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   181d2:	4630      	mov	r0, r6
   181d4:	a901      	add	r1, sp, #4
		queue = dw->queue;
   181d6:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   181d8:	f7ff ff66 	bl	180a8 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181dc:	480a      	ldr	r0, [pc, #40]	; (18208 <work_timeout+0x88>)
   181de:	f7ff fa71 	bl	176c4 <z_spin_unlock_valid>
   181e2:	b958      	cbnz	r0, 181fc <work_timeout+0x7c>
   181e4:	23c2      	movs	r3, #194	; 0xc2
   181e6:	4a09      	ldr	r2, [pc, #36]	; (1820c <work_timeout+0x8c>)
   181e8:	490c      	ldr	r1, [pc, #48]	; (1821c <work_timeout+0x9c>)
   181ea:	480a      	ldr	r0, [pc, #40]	; (18214 <work_timeout+0x94>)
   181ec:	f003 f81e 	bl	1b22c <assert_print>
   181f0:	4905      	ldr	r1, [pc, #20]	; (18208 <work_timeout+0x88>)
   181f2:	480b      	ldr	r0, [pc, #44]	; (18220 <work_timeout+0xa0>)
   181f4:	f003 f81a 	bl	1b22c <assert_print>
   181f8:	21c2      	movs	r1, #194	; 0xc2
   181fa:	e7da      	b.n	181b2 <work_timeout+0x32>
	__asm__ volatile(
   181fc:	f385 8811 	msr	BASEPRI, r5
   18200:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   18204:	b002      	add	sp, #8
   18206:	bd70      	pop	{r4, r5, r6, pc}
   18208:	20009ad4 	.word	0x20009ad4
   1820c:	0001fd89 	.word	0x0001fd89
   18210:	0001fde2 	.word	0x0001fde2
   18214:	0001f995 	.word	0x0001f995
   18218:	0001fdf7 	.word	0x0001fdf7
   1821c:	0001fdb6 	.word	0x0001fdb6
   18220:	0001fdcd 	.word	0x0001fdcd

00018224 <k_work_init>:
{
   18224:	b538      	push	{r3, r4, r5, lr}
   18226:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   18228:	4604      	mov	r4, r0
   1822a:	b948      	cbnz	r0, 18240 <k_work_init+0x1c>
   1822c:	490c      	ldr	r1, [pc, #48]	; (18260 <k_work_init+0x3c>)
   1822e:	2389      	movs	r3, #137	; 0x89
   18230:	4a0c      	ldr	r2, [pc, #48]	; (18264 <k_work_init+0x40>)
   18232:	480d      	ldr	r0, [pc, #52]	; (18268 <k_work_init+0x44>)
   18234:	f002 fffa 	bl	1b22c <assert_print>
   18238:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   1823a:	480a      	ldr	r0, [pc, #40]	; (18264 <k_work_init+0x40>)
   1823c:	f002 ffef 	bl	1b21e <assert_post_action>
   18240:	b939      	cbnz	r1, 18252 <k_work_init+0x2e>
   18242:	490a      	ldr	r1, [pc, #40]	; (1826c <k_work_init+0x48>)
   18244:	238a      	movs	r3, #138	; 0x8a
   18246:	4a07      	ldr	r2, [pc, #28]	; (18264 <k_work_init+0x40>)
   18248:	4807      	ldr	r0, [pc, #28]	; (18268 <k_work_init+0x44>)
   1824a:	f002 ffef 	bl	1b22c <assert_print>
   1824e:	218a      	movs	r1, #138	; 0x8a
   18250:	e7f3      	b.n	1823a <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18252:	2210      	movs	r2, #16
   18254:	2100      	movs	r1, #0
   18256:	f004 f803 	bl	1c260 <memset>
   1825a:	6065      	str	r5, [r4, #4]
}
   1825c:	bd38      	pop	{r3, r4, r5, pc}
   1825e:	bf00      	nop
   18260:	000234f9 	.word	0x000234f9
   18264:	00023422 	.word	0x00023422
   18268:	0001f995 	.word	0x0001f995
   1826c:	00023443 	.word	0x00023443

00018270 <k_work_busy_get>:
{
   18270:	b538      	push	{r3, r4, r5, lr}
   18272:	4604      	mov	r4, r0
	__asm__ volatile(
   18274:	f04f 0320 	mov.w	r3, #32
   18278:	f3ef 8511 	mrs	r5, BASEPRI
   1827c:	f383 8812 	msr	BASEPRI_MAX, r3
   18280:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18284:	4816      	ldr	r0, [pc, #88]	; (182e0 <k_work_busy_get+0x70>)
   18286:	f7ff fa0f 	bl	176a8 <z_spin_lock_valid>
   1828a:	b968      	cbnz	r0, 182a8 <k_work_busy_get+0x38>
   1828c:	2394      	movs	r3, #148	; 0x94
   1828e:	4a15      	ldr	r2, [pc, #84]	; (182e4 <k_work_busy_get+0x74>)
   18290:	4915      	ldr	r1, [pc, #84]	; (182e8 <k_work_busy_get+0x78>)
   18292:	4816      	ldr	r0, [pc, #88]	; (182ec <k_work_busy_get+0x7c>)
   18294:	f002 ffca 	bl	1b22c <assert_print>
   18298:	4911      	ldr	r1, [pc, #68]	; (182e0 <k_work_busy_get+0x70>)
   1829a:	4815      	ldr	r0, [pc, #84]	; (182f0 <k_work_busy_get+0x80>)
   1829c:	f002 ffc6 	bl	1b22c <assert_print>
   182a0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182a2:	4810      	ldr	r0, [pc, #64]	; (182e4 <k_work_busy_get+0x74>)
   182a4:	f002 ffbb 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   182a8:	480d      	ldr	r0, [pc, #52]	; (182e0 <k_work_busy_get+0x70>)
   182aa:	f7ff fa19 	bl	176e0 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   182ae:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182b0:	480b      	ldr	r0, [pc, #44]	; (182e0 <k_work_busy_get+0x70>)
   182b2:	f004 040f 	and.w	r4, r4, #15
   182b6:	f7ff fa05 	bl	176c4 <z_spin_unlock_valid>
   182ba:	b958      	cbnz	r0, 182d4 <k_work_busy_get+0x64>
   182bc:	23c2      	movs	r3, #194	; 0xc2
   182be:	4a09      	ldr	r2, [pc, #36]	; (182e4 <k_work_busy_get+0x74>)
   182c0:	490c      	ldr	r1, [pc, #48]	; (182f4 <k_work_busy_get+0x84>)
   182c2:	480a      	ldr	r0, [pc, #40]	; (182ec <k_work_busy_get+0x7c>)
   182c4:	f002 ffb2 	bl	1b22c <assert_print>
   182c8:	4905      	ldr	r1, [pc, #20]	; (182e0 <k_work_busy_get+0x70>)
   182ca:	480b      	ldr	r0, [pc, #44]	; (182f8 <k_work_busy_get+0x88>)
   182cc:	f002 ffae 	bl	1b22c <assert_print>
   182d0:	21c2      	movs	r1, #194	; 0xc2
   182d2:	e7e6      	b.n	182a2 <k_work_busy_get+0x32>
	__asm__ volatile(
   182d4:	f385 8811 	msr	BASEPRI, r5
   182d8:	f3bf 8f6f 	isb	sy
}
   182dc:	4620      	mov	r0, r4
   182de:	bd38      	pop	{r3, r4, r5, pc}
   182e0:	20009ad4 	.word	0x20009ad4
   182e4:	0001fd89 	.word	0x0001fd89
   182e8:	0001fde2 	.word	0x0001fde2
   182ec:	0001f995 	.word	0x0001f995
   182f0:	0001fdf7 	.word	0x0001fdf7
   182f4:	0001fdb6 	.word	0x0001fdb6
   182f8:	0001fdcd 	.word	0x0001fdcd

000182fc <z_work_submit_to_queue>:
{
   182fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   182fe:	460c      	mov	r4, r1
{
   18300:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   18302:	b959      	cbnz	r1, 1831c <z_work_submit_to_queue+0x20>
   18304:	4921      	ldr	r1, [pc, #132]	; (1838c <z_work_submit_to_queue+0x90>)
   18306:	4822      	ldr	r0, [pc, #136]	; (18390 <z_work_submit_to_queue+0x94>)
   18308:	f44f 73ba 	mov.w	r3, #372	; 0x174
   1830c:	4a21      	ldr	r2, [pc, #132]	; (18394 <z_work_submit_to_queue+0x98>)
   1830e:	f002 ff8d 	bl	1b22c <assert_print>
   18312:	f44f 71ba 	mov.w	r1, #372	; 0x174
   18316:	481f      	ldr	r0, [pc, #124]	; (18394 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18318:	f002 ff81 	bl	1b21e <assert_post_action>
	__asm__ volatile(
   1831c:	f04f 0320 	mov.w	r3, #32
   18320:	f3ef 8511 	mrs	r5, BASEPRI
   18324:	f383 8812 	msr	BASEPRI_MAX, r3
   18328:	f3bf 8f6f 	isb	sy
   1832c:	481a      	ldr	r0, [pc, #104]	; (18398 <z_work_submit_to_queue+0x9c>)
   1832e:	f7ff f9bb 	bl	176a8 <z_spin_lock_valid>
   18332:	b960      	cbnz	r0, 1834e <z_work_submit_to_queue+0x52>
   18334:	2394      	movs	r3, #148	; 0x94
   18336:	4a19      	ldr	r2, [pc, #100]	; (1839c <z_work_submit_to_queue+0xa0>)
   18338:	4919      	ldr	r1, [pc, #100]	; (183a0 <z_work_submit_to_queue+0xa4>)
   1833a:	4815      	ldr	r0, [pc, #84]	; (18390 <z_work_submit_to_queue+0x94>)
   1833c:	f002 ff76 	bl	1b22c <assert_print>
   18340:	4915      	ldr	r1, [pc, #84]	; (18398 <z_work_submit_to_queue+0x9c>)
   18342:	4818      	ldr	r0, [pc, #96]	; (183a4 <z_work_submit_to_queue+0xa8>)
   18344:	f002 ff72 	bl	1b22c <assert_print>
   18348:	2194      	movs	r1, #148	; 0x94
   1834a:	4814      	ldr	r0, [pc, #80]	; (1839c <z_work_submit_to_queue+0xa0>)
   1834c:	e7e4      	b.n	18318 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   1834e:	4812      	ldr	r0, [pc, #72]	; (18398 <z_work_submit_to_queue+0x9c>)
   18350:	f7ff f9c6 	bl	176e0 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   18354:	4620      	mov	r0, r4
   18356:	a901      	add	r1, sp, #4
   18358:	f7ff fea6 	bl	180a8 <submit_to_queue_locked>
   1835c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1835e:	480e      	ldr	r0, [pc, #56]	; (18398 <z_work_submit_to_queue+0x9c>)
   18360:	f7ff f9b0 	bl	176c4 <z_spin_unlock_valid>
   18364:	b958      	cbnz	r0, 1837e <z_work_submit_to_queue+0x82>
   18366:	23c2      	movs	r3, #194	; 0xc2
   18368:	4a0c      	ldr	r2, [pc, #48]	; (1839c <z_work_submit_to_queue+0xa0>)
   1836a:	490f      	ldr	r1, [pc, #60]	; (183a8 <z_work_submit_to_queue+0xac>)
   1836c:	4808      	ldr	r0, [pc, #32]	; (18390 <z_work_submit_to_queue+0x94>)
   1836e:	f002 ff5d 	bl	1b22c <assert_print>
   18372:	4909      	ldr	r1, [pc, #36]	; (18398 <z_work_submit_to_queue+0x9c>)
   18374:	480d      	ldr	r0, [pc, #52]	; (183ac <z_work_submit_to_queue+0xb0>)
   18376:	f002 ff59 	bl	1b22c <assert_print>
   1837a:	21c2      	movs	r1, #194	; 0xc2
   1837c:	e7e5      	b.n	1834a <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   1837e:	f385 8811 	msr	BASEPRI, r5
   18382:	f3bf 8f6f 	isb	sy
}
   18386:	4620      	mov	r0, r4
   18388:	b003      	add	sp, #12
   1838a:	bd30      	pop	{r4, r5, pc}
   1838c:	000234f9 	.word	0x000234f9
   18390:	0001f995 	.word	0x0001f995
   18394:	00023422 	.word	0x00023422
   18398:	20009ad4 	.word	0x20009ad4
   1839c:	0001fd89 	.word	0x0001fd89
   183a0:	0001fde2 	.word	0x0001fde2
   183a4:	0001fdf7 	.word	0x0001fdf7
   183a8:	0001fdb6 	.word	0x0001fdb6
   183ac:	0001fdcd 	.word	0x0001fdcd

000183b0 <k_work_submit>:
{
   183b0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   183b2:	4801      	ldr	r0, [pc, #4]	; (183b8 <k_work_submit+0x8>)
   183b4:	f006 b978 	b.w	1e6a8 <k_work_submit_to_queue>
   183b8:	20009538 	.word	0x20009538

000183bc <k_work_queue_init>:
{
   183bc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   183be:	b958      	cbnz	r0, 183d8 <k_work_queue_init+0x1c>
   183c0:	4908      	ldr	r1, [pc, #32]	; (183e4 <k_work_queue_init+0x28>)
   183c2:	4809      	ldr	r0, [pc, #36]	; (183e8 <k_work_queue_init+0x2c>)
   183c4:	f240 23b9 	movw	r3, #697	; 0x2b9
   183c8:	4a08      	ldr	r2, [pc, #32]	; (183ec <k_work_queue_init+0x30>)
   183ca:	f002 ff2f 	bl	1b22c <assert_print>
   183ce:	f240 21b9 	movw	r1, #697	; 0x2b9
   183d2:	4806      	ldr	r0, [pc, #24]	; (183ec <k_work_queue_init+0x30>)
   183d4:	f002 ff23 	bl	1b21e <assert_post_action>
	*queue = (struct k_work_q) {
   183d8:	22a8      	movs	r2, #168	; 0xa8
   183da:	2100      	movs	r1, #0
   183dc:	f003 ff40 	bl	1c260 <memset>
}
   183e0:	bd08      	pop	{r3, pc}
   183e2:	bf00      	nop
   183e4:	00023460 	.word	0x00023460
   183e8:	0001f995 	.word	0x0001f995
   183ec:	00023422 	.word	0x00023422

000183f0 <k_work_queue_start>:
{
   183f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   183f2:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   183f4:	4604      	mov	r4, r0
{
   183f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   183f8:	b958      	cbnz	r0, 18412 <k_work_queue_start+0x22>
   183fa:	492b      	ldr	r1, [pc, #172]	; (184a8 <k_work_queue_start+0xb8>)
   183fc:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   18400:	4a2a      	ldr	r2, [pc, #168]	; (184ac <k_work_queue_start+0xbc>)
   18402:	482b      	ldr	r0, [pc, #172]	; (184b0 <k_work_queue_start+0xc0>)
   18404:	f002 ff12 	bl	1b22c <assert_print>
   18408:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   1840c:	4827      	ldr	r0, [pc, #156]	; (184ac <k_work_queue_start+0xbc>)
   1840e:	f002 ff06 	bl	1b21e <assert_post_action>
   18412:	b949      	cbnz	r1, 18428 <k_work_queue_start+0x38>
   18414:	4927      	ldr	r1, [pc, #156]	; (184b4 <k_work_queue_start+0xc4>)
   18416:	f240 23c9 	movw	r3, #713	; 0x2c9
   1841a:	4a24      	ldr	r2, [pc, #144]	; (184ac <k_work_queue_start+0xbc>)
   1841c:	4824      	ldr	r0, [pc, #144]	; (184b0 <k_work_queue_start+0xc0>)
   1841e:	f002 ff05 	bl	1b22c <assert_print>
   18422:	f240 21c9 	movw	r1, #713	; 0x2c9
   18426:	e7f1      	b.n	1840c <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   18428:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1842c:	f010 0001 	ands.w	r0, r0, #1
   18430:	d009      	beq.n	18446 <k_work_queue_start+0x56>
   18432:	4921      	ldr	r1, [pc, #132]	; (184b8 <k_work_queue_start+0xc8>)
   18434:	f240 23ca 	movw	r3, #714	; 0x2ca
   18438:	4a1c      	ldr	r2, [pc, #112]	; (184ac <k_work_queue_start+0xbc>)
   1843a:	481d      	ldr	r0, [pc, #116]	; (184b0 <k_work_queue_start+0xc0>)
   1843c:	f002 fef6 	bl	1b22c <assert_print>
   18440:	f240 21ca 	movw	r1, #714	; 0x2ca
   18444:	e7e2      	b.n	1840c <k_work_queue_start+0x1c>
	list->tail = NULL;
   18446:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1844a:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   1844e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   18452:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18456:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   1845a:	b31d      	cbz	r5, 184a4 <k_work_queue_start+0xb4>
   1845c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1845e:	2800      	cmp	r0, #0
   18460:	f240 1001 	movw	r0, #257	; 0x101
   18464:	bf08      	it	eq
   18466:	2001      	moveq	r0, #1
	*flagp = flags;
   18468:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1846c:	2000      	movs	r0, #0
   1846e:	f04f 36ff 	mov.w	r6, #4294967295
   18472:	f04f 37ff 	mov.w	r7, #4294967295
   18476:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1847a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1847e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18482:	4620      	mov	r0, r4
   18484:	4b0d      	ldr	r3, [pc, #52]	; (184bc <k_work_queue_start+0xcc>)
   18486:	9400      	str	r4, [sp, #0]
   18488:	f7ff f844 	bl	17514 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1848c:	b125      	cbz	r5, 18498 <k_work_queue_start+0xa8>
   1848e:	6829      	ldr	r1, [r5, #0]
   18490:	b111      	cbz	r1, 18498 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   18492:	4620      	mov	r0, r4
   18494:	f006 f85a 	bl	1e54c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18498:	4620      	mov	r0, r4
}
   1849a:	b009      	add	sp, #36	; 0x24
   1849c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   184a0:	f006 b859 	b.w	1e556 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   184a4:	2001      	movs	r0, #1
   184a6:	e7df      	b.n	18468 <k_work_queue_start+0x78>
   184a8:	000234b8 	.word	0x000234b8
   184ac:	00023422 	.word	0x00023422
   184b0:	0001f995 	.word	0x0001f995
   184b4:	000234be 	.word	0x000234be
   184b8:	000234c4 	.word	0x000234c4
   184bc:	00017e85 	.word	0x00017e85

000184c0 <k_work_queue_drain>:
{
   184c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   184c2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   184c4:	4604      	mov	r4, r0
   184c6:	b958      	cbnz	r0, 184e0 <k_work_queue_drain+0x20>
   184c8:	493a      	ldr	r1, [pc, #232]	; (185b4 <k_work_queue_drain+0xf4>)
   184ca:	f240 23ed 	movw	r3, #749	; 0x2ed
   184ce:	4a3a      	ldr	r2, [pc, #232]	; (185b8 <k_work_queue_drain+0xf8>)
   184d0:	483a      	ldr	r0, [pc, #232]	; (185bc <k_work_queue_drain+0xfc>)
   184d2:	f002 feab 	bl	1b22c <assert_print>
   184d6:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   184da:	4837      	ldr	r0, [pc, #220]	; (185b8 <k_work_queue_drain+0xf8>)
   184dc:	f002 fe9f 	bl	1b21e <assert_post_action>
   184e0:	f006 f82e 	bl	1e540 <k_is_in_isr>
   184e4:	b148      	cbz	r0, 184fa <k_work_queue_drain+0x3a>
   184e6:	4936      	ldr	r1, [pc, #216]	; (185c0 <k_work_queue_drain+0x100>)
   184e8:	f240 23ee 	movw	r3, #750	; 0x2ee
   184ec:	4a32      	ldr	r2, [pc, #200]	; (185b8 <k_work_queue_drain+0xf8>)
   184ee:	4833      	ldr	r0, [pc, #204]	; (185bc <k_work_queue_drain+0xfc>)
   184f0:	f002 fe9c 	bl	1b22c <assert_print>
   184f4:	f240 21ee 	movw	r1, #750	; 0x2ee
   184f8:	e7ef      	b.n	184da <k_work_queue_drain+0x1a>
	__asm__ volatile(
   184fa:	f04f 0320 	mov.w	r3, #32
   184fe:	f3ef 8611 	mrs	r6, BASEPRI
   18502:	f383 8812 	msr	BASEPRI_MAX, r3
   18506:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1850a:	482e      	ldr	r0, [pc, #184]	; (185c4 <k_work_queue_drain+0x104>)
   1850c:	f7ff f8cc 	bl	176a8 <z_spin_lock_valid>
   18510:	b960      	cbnz	r0, 1852c <k_work_queue_drain+0x6c>
   18512:	2394      	movs	r3, #148	; 0x94
   18514:	4a2c      	ldr	r2, [pc, #176]	; (185c8 <k_work_queue_drain+0x108>)
   18516:	492d      	ldr	r1, [pc, #180]	; (185cc <k_work_queue_drain+0x10c>)
   18518:	4828      	ldr	r0, [pc, #160]	; (185bc <k_work_queue_drain+0xfc>)
   1851a:	f002 fe87 	bl	1b22c <assert_print>
   1851e:	4929      	ldr	r1, [pc, #164]	; (185c4 <k_work_queue_drain+0x104>)
   18520:	482b      	ldr	r0, [pc, #172]	; (185d0 <k_work_queue_drain+0x110>)
   18522:	f002 fe83 	bl	1b22c <assert_print>
   18526:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18528:	4827      	ldr	r0, [pc, #156]	; (185c8 <k_work_queue_drain+0x108>)
   1852a:	e7d7      	b.n	184dc <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   1852c:	4825      	ldr	r0, [pc, #148]	; (185c4 <k_work_queue_drain+0x104>)
   1852e:	f7ff f8d7 	bl	176e0 <z_spin_lock_set_owner>
	return *flagp;
   18532:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   18536:	f013 0f06 	tst.w	r3, #6
   1853a:	d11d      	bne.n	18578 <k_work_queue_drain+0xb8>
	    || plug
   1853c:	b1b5      	cbz	r5, 1856c <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   1853e:	f043 030c 	orr.w	r3, r3, #12
   18542:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   18546:	4620      	mov	r0, r4
   18548:	f006 f874 	bl	1e634 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   1854c:	2300      	movs	r3, #0
   1854e:	f04f 32ff 	mov.w	r2, #4294967295
   18552:	9302      	str	r3, [sp, #8]
   18554:	f04f 33ff 	mov.w	r3, #4294967295
   18558:	4631      	mov	r1, r6
   1855a:	e9cd 2300 	strd	r2, r3, [sp]
   1855e:	4819      	ldr	r0, [pc, #100]	; (185c4 <k_work_queue_drain+0x104>)
   18560:	f104 0298 	add.w	r2, r4, #152	; 0x98
   18564:	f001 fc0a 	bl	19d7c <z_sched_wait>
}
   18568:	b004      	add	sp, #16
   1856a:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   1856c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   18570:	b14d      	cbz	r5, 18586 <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   18572:	f043 0304 	orr.w	r3, r3, #4
   18576:	e7e4      	b.n	18542 <k_work_queue_drain+0x82>
   18578:	f043 0204 	orr.w	r2, r3, #4
   1857c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   18580:	2d00      	cmp	r5, #0
   18582:	d0e0      	beq.n	18546 <k_work_queue_drain+0x86>
   18584:	e7db      	b.n	1853e <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18586:	480f      	ldr	r0, [pc, #60]	; (185c4 <k_work_queue_drain+0x104>)
   18588:	f7ff f89c 	bl	176c4 <z_spin_unlock_valid>
   1858c:	b958      	cbnz	r0, 185a6 <k_work_queue_drain+0xe6>
   1858e:	23c2      	movs	r3, #194	; 0xc2
   18590:	4a0d      	ldr	r2, [pc, #52]	; (185c8 <k_work_queue_drain+0x108>)
   18592:	4910      	ldr	r1, [pc, #64]	; (185d4 <k_work_queue_drain+0x114>)
   18594:	4809      	ldr	r0, [pc, #36]	; (185bc <k_work_queue_drain+0xfc>)
   18596:	f002 fe49 	bl	1b22c <assert_print>
   1859a:	490a      	ldr	r1, [pc, #40]	; (185c4 <k_work_queue_drain+0x104>)
   1859c:	480e      	ldr	r0, [pc, #56]	; (185d8 <k_work_queue_drain+0x118>)
   1859e:	f002 fe45 	bl	1b22c <assert_print>
   185a2:	21c2      	movs	r1, #194	; 0xc2
   185a4:	e7c0      	b.n	18528 <k_work_queue_drain+0x68>
	__asm__ volatile(
   185a6:	f386 8811 	msr	BASEPRI, r6
   185aa:	f3bf 8f6f 	isb	sy
	int ret = 0;
   185ae:	4628      	mov	r0, r5
	return ret;
   185b0:	e7da      	b.n	18568 <k_work_queue_drain+0xa8>
   185b2:	bf00      	nop
   185b4:	000234b8 	.word	0x000234b8
   185b8:	00023422 	.word	0x00023422
   185bc:	0001f995 	.word	0x0001f995
   185c0:	00021800 	.word	0x00021800
   185c4:	20009ad4 	.word	0x20009ad4
   185c8:	0001fd89 	.word	0x0001fd89
   185cc:	0001fde2 	.word	0x0001fde2
   185d0:	0001fdf7 	.word	0x0001fdf7
   185d4:	0001fdb6 	.word	0x0001fdb6
   185d8:	0001fdcd 	.word	0x0001fdcd

000185dc <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   185dc:	b538      	push	{r3, r4, r5, lr}
   185de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   185e0:	4604      	mov	r4, r0
   185e2:	b958      	cbnz	r0, 185fc <k_work_init_delayable+0x20>
   185e4:	490f      	ldr	r1, [pc, #60]	; (18624 <k_work_init_delayable+0x48>)
   185e6:	f44f 7350 	mov.w	r3, #832	; 0x340
   185ea:	4a0f      	ldr	r2, [pc, #60]	; (18628 <k_work_init_delayable+0x4c>)
   185ec:	480f      	ldr	r0, [pc, #60]	; (1862c <k_work_init_delayable+0x50>)
   185ee:	f002 fe1d 	bl	1b22c <assert_print>
   185f2:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   185f6:	480c      	ldr	r0, [pc, #48]	; (18628 <k_work_init_delayable+0x4c>)
   185f8:	f002 fe11 	bl	1b21e <assert_post_action>
   185fc:	b949      	cbnz	r1, 18612 <k_work_init_delayable+0x36>
   185fe:	490c      	ldr	r1, [pc, #48]	; (18630 <k_work_init_delayable+0x54>)
   18600:	f240 3341 	movw	r3, #833	; 0x341
   18604:	4a08      	ldr	r2, [pc, #32]	; (18628 <k_work_init_delayable+0x4c>)
   18606:	4809      	ldr	r0, [pc, #36]	; (1862c <k_work_init_delayable+0x50>)
   18608:	f002 fe10 	bl	1b22c <assert_print>
   1860c:	f240 3141 	movw	r1, #833	; 0x341
   18610:	e7f1      	b.n	185f6 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   18612:	2230      	movs	r2, #48	; 0x30
   18614:	2100      	movs	r1, #0
   18616:	f003 fe23 	bl	1c260 <memset>
   1861a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1861e:	6065      	str	r5, [r4, #4]
   18620:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   18622:	bd38      	pop	{r3, r4, r5, pc}
   18624:	000234f8 	.word	0x000234f8
   18628:	00023422 	.word	0x00023422
   1862c:	0001f995 	.word	0x0001f995
   18630:	00023443 	.word	0x00023443

00018634 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   18634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18636:	4616      	mov	r6, r2
   18638:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1863a:	460c      	mov	r4, r1
{
   1863c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   1863e:	b959      	cbnz	r1, 18658 <k_work_schedule_for_queue+0x24>
   18640:	492d      	ldr	r1, [pc, #180]	; (186f8 <k_work_schedule_for_queue+0xc4>)
   18642:	482e      	ldr	r0, [pc, #184]	; (186fc <k_work_schedule_for_queue+0xc8>)
   18644:	f240 33b7 	movw	r3, #951	; 0x3b7
   18648:	4a2d      	ldr	r2, [pc, #180]	; (18700 <k_work_schedule_for_queue+0xcc>)
   1864a:	f002 fdef 	bl	1b22c <assert_print>
   1864e:	f240 31b7 	movw	r1, #951	; 0x3b7
   18652:	482b      	ldr	r0, [pc, #172]	; (18700 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18654:	f002 fde3 	bl	1b21e <assert_post_action>
	__asm__ volatile(
   18658:	f04f 0320 	mov.w	r3, #32
   1865c:	f3ef 8711 	mrs	r7, BASEPRI
   18660:	f383 8812 	msr	BASEPRI_MAX, r3
   18664:	f3bf 8f6f 	isb	sy
   18668:	4826      	ldr	r0, [pc, #152]	; (18704 <k_work_schedule_for_queue+0xd0>)
   1866a:	f7ff f81d 	bl	176a8 <z_spin_lock_valid>
   1866e:	b960      	cbnz	r0, 1868a <k_work_schedule_for_queue+0x56>
   18670:	2394      	movs	r3, #148	; 0x94
   18672:	4a25      	ldr	r2, [pc, #148]	; (18708 <k_work_schedule_for_queue+0xd4>)
   18674:	4925      	ldr	r1, [pc, #148]	; (1870c <k_work_schedule_for_queue+0xd8>)
   18676:	4821      	ldr	r0, [pc, #132]	; (186fc <k_work_schedule_for_queue+0xc8>)
   18678:	f002 fdd8 	bl	1b22c <assert_print>
   1867c:	4921      	ldr	r1, [pc, #132]	; (18704 <k_work_schedule_for_queue+0xd0>)
   1867e:	4824      	ldr	r0, [pc, #144]	; (18710 <k_work_schedule_for_queue+0xdc>)
   18680:	f002 fdd4 	bl	1b22c <assert_print>
   18684:	2194      	movs	r1, #148	; 0x94
   18686:	4820      	ldr	r0, [pc, #128]	; (18708 <k_work_schedule_for_queue+0xd4>)
   18688:	e7e4      	b.n	18654 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   1868a:	481e      	ldr	r0, [pc, #120]	; (18704 <k_work_schedule_for_queue+0xd0>)
   1868c:	f7ff f828 	bl	176e0 <z_spin_lock_set_owner>
	return *flagp;
   18690:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   18692:	f013 0f0e 	tst.w	r3, #14
   18696:	d125      	bne.n	186e4 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18698:	ea55 0206 	orrs.w	r2, r5, r6
   1869c:	d114      	bne.n	186c8 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   1869e:	4620      	mov	r0, r4
   186a0:	a901      	add	r1, sp, #4
   186a2:	f7ff fd01 	bl	180a8 <submit_to_queue_locked>
   186a6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   186a8:	4816      	ldr	r0, [pc, #88]	; (18704 <k_work_schedule_for_queue+0xd0>)
   186aa:	f7ff f80b 	bl	176c4 <z_spin_unlock_valid>
   186ae:	b9d8      	cbnz	r0, 186e8 <k_work_schedule_for_queue+0xb4>
   186b0:	23c2      	movs	r3, #194	; 0xc2
   186b2:	4a15      	ldr	r2, [pc, #84]	; (18708 <k_work_schedule_for_queue+0xd4>)
   186b4:	4917      	ldr	r1, [pc, #92]	; (18714 <k_work_schedule_for_queue+0xe0>)
   186b6:	4811      	ldr	r0, [pc, #68]	; (186fc <k_work_schedule_for_queue+0xc8>)
   186b8:	f002 fdb8 	bl	1b22c <assert_print>
   186bc:	4911      	ldr	r1, [pc, #68]	; (18704 <k_work_schedule_for_queue+0xd0>)
   186be:	4816      	ldr	r0, [pc, #88]	; (18718 <k_work_schedule_for_queue+0xe4>)
   186c0:	f002 fdb4 	bl	1b22c <assert_print>
   186c4:	21c2      	movs	r1, #194	; 0xc2
   186c6:	e7de      	b.n	18686 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   186c8:	f043 0308 	orr.w	r3, r3, #8
   186cc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   186ce:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   186d0:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   186d4:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   186d6:	4632      	mov	r2, r6
   186d8:	462b      	mov	r3, r5
   186da:	4910      	ldr	r1, [pc, #64]	; (1871c <k_work_schedule_for_queue+0xe8>)
   186dc:	f001 fbc8 	bl	19e70 <z_add_timeout>
	return ret;
   186e0:	2401      	movs	r4, #1
   186e2:	e7e1      	b.n	186a8 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   186e4:	2400      	movs	r4, #0
   186e6:	e7df      	b.n	186a8 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   186e8:	f387 8811 	msr	BASEPRI, r7
   186ec:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   186f0:	4620      	mov	r0, r4
   186f2:	b003      	add	sp, #12
   186f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186f6:	bf00      	nop
   186f8:	000234f8 	.word	0x000234f8
   186fc:	0001f995 	.word	0x0001f995
   18700:	00023422 	.word	0x00023422
   18704:	20009ad4 	.word	0x20009ad4
   18708:	0001fd89 	.word	0x0001fd89
   1870c:	0001fde2 	.word	0x0001fde2
   18710:	0001fdf7 	.word	0x0001fdf7
   18714:	0001fdb6 	.word	0x0001fdb6
   18718:	0001fdcd 	.word	0x0001fdcd
   1871c:	00018181 	.word	0x00018181

00018720 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   18720:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   18722:	4801      	ldr	r0, [pc, #4]	; (18728 <k_work_schedule+0x8>)
   18724:	f7ff bf86 	b.w	18634 <k_work_schedule_for_queue>
   18728:	20009538 	.word	0x20009538

0001872c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1872c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1872e:	4616      	mov	r6, r2
   18730:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   18732:	460c      	mov	r4, r1
{
   18734:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   18736:	b959      	cbnz	r1, 18750 <k_work_reschedule_for_queue+0x24>
   18738:	492c      	ldr	r1, [pc, #176]	; (187ec <k_work_reschedule_for_queue+0xc0>)
   1873a:	482d      	ldr	r0, [pc, #180]	; (187f0 <k_work_reschedule_for_queue+0xc4>)
   1873c:	f240 33db 	movw	r3, #987	; 0x3db
   18740:	4a2c      	ldr	r2, [pc, #176]	; (187f4 <k_work_reschedule_for_queue+0xc8>)
   18742:	f002 fd73 	bl	1b22c <assert_print>
   18746:	f240 31db 	movw	r1, #987	; 0x3db
   1874a:	482a      	ldr	r0, [pc, #168]	; (187f4 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1874c:	f002 fd67 	bl	1b21e <assert_post_action>
	__asm__ volatile(
   18750:	f04f 0320 	mov.w	r3, #32
   18754:	f3ef 8711 	mrs	r7, BASEPRI
   18758:	f383 8812 	msr	BASEPRI_MAX, r3
   1875c:	f3bf 8f6f 	isb	sy
   18760:	4825      	ldr	r0, [pc, #148]	; (187f8 <k_work_reschedule_for_queue+0xcc>)
   18762:	f7fe ffa1 	bl	176a8 <z_spin_lock_valid>
   18766:	b960      	cbnz	r0, 18782 <k_work_reschedule_for_queue+0x56>
   18768:	2394      	movs	r3, #148	; 0x94
   1876a:	4a24      	ldr	r2, [pc, #144]	; (187fc <k_work_reschedule_for_queue+0xd0>)
   1876c:	4924      	ldr	r1, [pc, #144]	; (18800 <k_work_reschedule_for_queue+0xd4>)
   1876e:	4820      	ldr	r0, [pc, #128]	; (187f0 <k_work_reschedule_for_queue+0xc4>)
   18770:	f002 fd5c 	bl	1b22c <assert_print>
   18774:	4920      	ldr	r1, [pc, #128]	; (187f8 <k_work_reschedule_for_queue+0xcc>)
   18776:	4823      	ldr	r0, [pc, #140]	; (18804 <k_work_reschedule_for_queue+0xd8>)
   18778:	f002 fd58 	bl	1b22c <assert_print>
   1877c:	2194      	movs	r1, #148	; 0x94
   1877e:	481f      	ldr	r0, [pc, #124]	; (187fc <k_work_reschedule_for_queue+0xd0>)
   18780:	e7e4      	b.n	1874c <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   18782:	481d      	ldr	r0, [pc, #116]	; (187f8 <k_work_reschedule_for_queue+0xcc>)
   18784:	f7fe ffac 	bl	176e0 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   18788:	4620      	mov	r0, r4
   1878a:	f005 ff45 	bl	1e618 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1878e:	ea55 0306 	orrs.w	r3, r5, r6
   18792:	d114      	bne.n	187be <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   18794:	4620      	mov	r0, r4
   18796:	a901      	add	r1, sp, #4
   18798:	f7ff fc86 	bl	180a8 <submit_to_queue_locked>
   1879c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1879e:	4816      	ldr	r0, [pc, #88]	; (187f8 <k_work_reschedule_for_queue+0xcc>)
   187a0:	f7fe ff90 	bl	176c4 <z_spin_unlock_valid>
   187a4:	b9d0      	cbnz	r0, 187dc <k_work_reschedule_for_queue+0xb0>
   187a6:	23c2      	movs	r3, #194	; 0xc2
   187a8:	4a14      	ldr	r2, [pc, #80]	; (187fc <k_work_reschedule_for_queue+0xd0>)
   187aa:	4917      	ldr	r1, [pc, #92]	; (18808 <k_work_reschedule_for_queue+0xdc>)
   187ac:	4810      	ldr	r0, [pc, #64]	; (187f0 <k_work_reschedule_for_queue+0xc4>)
   187ae:	f002 fd3d 	bl	1b22c <assert_print>
   187b2:	4911      	ldr	r1, [pc, #68]	; (187f8 <k_work_reschedule_for_queue+0xcc>)
   187b4:	4815      	ldr	r0, [pc, #84]	; (1880c <k_work_reschedule_for_queue+0xe0>)
   187b6:	f002 fd39 	bl	1b22c <assert_print>
   187ba:	21c2      	movs	r1, #194	; 0xc2
   187bc:	e7df      	b.n	1877e <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   187be:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   187c0:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   187c4:	f043 0308 	orr.w	r3, r3, #8
   187c8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   187ca:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   187cc:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   187ce:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   187d0:	490f      	ldr	r1, [pc, #60]	; (18810 <k_work_reschedule_for_queue+0xe4>)
   187d2:	462b      	mov	r3, r5
   187d4:	f001 fb4c 	bl	19e70 <z_add_timeout>
	return ret;
   187d8:	2401      	movs	r4, #1
   187da:	e7e0      	b.n	1879e <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   187dc:	f387 8811 	msr	BASEPRI, r7
   187e0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   187e4:	4620      	mov	r0, r4
   187e6:	b003      	add	sp, #12
   187e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   187ea:	bf00      	nop
   187ec:	000234f8 	.word	0x000234f8
   187f0:	0001f995 	.word	0x0001f995
   187f4:	00023422 	.word	0x00023422
   187f8:	20009ad4 	.word	0x20009ad4
   187fc:	0001fd89 	.word	0x0001fd89
   18800:	0001fde2 	.word	0x0001fde2
   18804:	0001fdf7 	.word	0x0001fdf7
   18808:	0001fdb6 	.word	0x0001fdb6
   1880c:	0001fdcd 	.word	0x0001fdcd
   18810:	00018181 	.word	0x00018181

00018814 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   18814:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   18816:	4801      	ldr	r0, [pc, #4]	; (1881c <k_work_reschedule+0x8>)
   18818:	f7ff bf88 	b.w	1872c <k_work_reschedule_for_queue>
   1881c:	20009538 	.word	0x20009538

00018820 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   18820:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   18822:	4604      	mov	r4, r0
   18824:	b958      	cbnz	r0, 1883e <k_work_cancel_delayable+0x1e>
   18826:	4922      	ldr	r1, [pc, #136]	; (188b0 <k_work_cancel_delayable+0x90>)
   18828:	4822      	ldr	r0, [pc, #136]	; (188b4 <k_work_cancel_delayable+0x94>)
   1882a:	f240 33fd 	movw	r3, #1021	; 0x3fd
   1882e:	4a22      	ldr	r2, [pc, #136]	; (188b8 <k_work_cancel_delayable+0x98>)
   18830:	f002 fcfc 	bl	1b22c <assert_print>
   18834:	f240 31fd 	movw	r1, #1021	; 0x3fd
   18838:	481f      	ldr	r0, [pc, #124]	; (188b8 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1883a:	f002 fcf0 	bl	1b21e <assert_post_action>
	__asm__ volatile(
   1883e:	f04f 0320 	mov.w	r3, #32
   18842:	f3ef 8511 	mrs	r5, BASEPRI
   18846:	f383 8812 	msr	BASEPRI_MAX, r3
   1884a:	f3bf 8f6f 	isb	sy
   1884e:	481b      	ldr	r0, [pc, #108]	; (188bc <k_work_cancel_delayable+0x9c>)
   18850:	f7fe ff2a 	bl	176a8 <z_spin_lock_valid>
   18854:	b960      	cbnz	r0, 18870 <k_work_cancel_delayable+0x50>
   18856:	2394      	movs	r3, #148	; 0x94
   18858:	4a19      	ldr	r2, [pc, #100]	; (188c0 <k_work_cancel_delayable+0xa0>)
   1885a:	491a      	ldr	r1, [pc, #104]	; (188c4 <k_work_cancel_delayable+0xa4>)
   1885c:	4815      	ldr	r0, [pc, #84]	; (188b4 <k_work_cancel_delayable+0x94>)
   1885e:	f002 fce5 	bl	1b22c <assert_print>
   18862:	4916      	ldr	r1, [pc, #88]	; (188bc <k_work_cancel_delayable+0x9c>)
   18864:	4818      	ldr	r0, [pc, #96]	; (188c8 <k_work_cancel_delayable+0xa8>)
   18866:	f002 fce1 	bl	1b22c <assert_print>
   1886a:	2194      	movs	r1, #148	; 0x94
   1886c:	4814      	ldr	r0, [pc, #80]	; (188c0 <k_work_cancel_delayable+0xa0>)
   1886e:	e7e4      	b.n	1883a <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   18870:	4812      	ldr	r0, [pc, #72]	; (188bc <k_work_cancel_delayable+0x9c>)
   18872:	f7fe ff35 	bl	176e0 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   18876:	4620      	mov	r0, r4
   18878:	f005 fece 	bl	1e618 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1887c:	4620      	mov	r0, r4
   1887e:	f005 fee0 	bl	1e642 <cancel_async_locked>
   18882:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18884:	480d      	ldr	r0, [pc, #52]	; (188bc <k_work_cancel_delayable+0x9c>)
   18886:	f7fe ff1d 	bl	176c4 <z_spin_unlock_valid>
   1888a:	b958      	cbnz	r0, 188a4 <k_work_cancel_delayable+0x84>
   1888c:	23c2      	movs	r3, #194	; 0xc2
   1888e:	4a0c      	ldr	r2, [pc, #48]	; (188c0 <k_work_cancel_delayable+0xa0>)
   18890:	490e      	ldr	r1, [pc, #56]	; (188cc <k_work_cancel_delayable+0xac>)
   18892:	4808      	ldr	r0, [pc, #32]	; (188b4 <k_work_cancel_delayable+0x94>)
   18894:	f002 fcca 	bl	1b22c <assert_print>
   18898:	4908      	ldr	r1, [pc, #32]	; (188bc <k_work_cancel_delayable+0x9c>)
   1889a:	480d      	ldr	r0, [pc, #52]	; (188d0 <k_work_cancel_delayable+0xb0>)
   1889c:	f002 fcc6 	bl	1b22c <assert_print>
   188a0:	21c2      	movs	r1, #194	; 0xc2
   188a2:	e7e3      	b.n	1886c <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   188a4:	f385 8811 	msr	BASEPRI, r5
   188a8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   188ac:	4620      	mov	r0, r4
   188ae:	bd38      	pop	{r3, r4, r5, pc}
   188b0:	000234f8 	.word	0x000234f8
   188b4:	0001f995 	.word	0x0001f995
   188b8:	00023422 	.word	0x00023422
   188bc:	20009ad4 	.word	0x20009ad4
   188c0:	0001fd89 	.word	0x0001fd89
   188c4:	0001fde2 	.word	0x0001fde2
   188c8:	0001fdf7 	.word	0x0001fdf7
   188cc:	0001fdb6 	.word	0x0001fdb6
   188d0:	0001fdcd 	.word	0x0001fdcd

000188d4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   188d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188d8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   188da:	4605      	mov	r5, r0
   188dc:	b958      	cbnz	r0, 188f6 <k_work_cancel_delayable_sync+0x22>
   188de:	493a      	ldr	r1, [pc, #232]	; (189c8 <k_work_cancel_delayable_sync+0xf4>)
   188e0:	f240 430e 	movw	r3, #1038	; 0x40e
   188e4:	4a39      	ldr	r2, [pc, #228]	; (189cc <k_work_cancel_delayable_sync+0xf8>)
   188e6:	483a      	ldr	r0, [pc, #232]	; (189d0 <k_work_cancel_delayable_sync+0xfc>)
   188e8:	f002 fca0 	bl	1b22c <assert_print>
   188ec:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   188f0:	4836      	ldr	r0, [pc, #216]	; (189cc <k_work_cancel_delayable_sync+0xf8>)
   188f2:	f002 fc94 	bl	1b21e <assert_post_action>
   188f6:	b949      	cbnz	r1, 1890c <k_work_cancel_delayable_sync+0x38>
   188f8:	4936      	ldr	r1, [pc, #216]	; (189d4 <k_work_cancel_delayable_sync+0x100>)
   188fa:	f240 430f 	movw	r3, #1039	; 0x40f
   188fe:	4a33      	ldr	r2, [pc, #204]	; (189cc <k_work_cancel_delayable_sync+0xf8>)
   18900:	4833      	ldr	r0, [pc, #204]	; (189d0 <k_work_cancel_delayable_sync+0xfc>)
   18902:	f002 fc93 	bl	1b22c <assert_print>
   18906:	f240 410f 	movw	r1, #1039	; 0x40f
   1890a:	e7f1      	b.n	188f0 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1890c:	f005 fe18 	bl	1e540 <k_is_in_isr>
   18910:	4604      	mov	r4, r0
   18912:	b148      	cbz	r0, 18928 <k_work_cancel_delayable_sync+0x54>
   18914:	4930      	ldr	r1, [pc, #192]	; (189d8 <k_work_cancel_delayable_sync+0x104>)
   18916:	f44f 6382 	mov.w	r3, #1040	; 0x410
   1891a:	4a2c      	ldr	r2, [pc, #176]	; (189cc <k_work_cancel_delayable_sync+0xf8>)
   1891c:	482c      	ldr	r0, [pc, #176]	; (189d0 <k_work_cancel_delayable_sync+0xfc>)
   1891e:	f002 fc85 	bl	1b22c <assert_print>
   18922:	f44f 6182 	mov.w	r1, #1040	; 0x410
   18926:	e7e3      	b.n	188f0 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   18928:	f04f 0320 	mov.w	r3, #32
   1892c:	f3ef 8811 	mrs	r8, BASEPRI
   18930:	f383 8812 	msr	BASEPRI_MAX, r3
   18934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18938:	4828      	ldr	r0, [pc, #160]	; (189dc <k_work_cancel_delayable_sync+0x108>)
   1893a:	f7fe feb5 	bl	176a8 <z_spin_lock_valid>
   1893e:	b960      	cbnz	r0, 1895a <k_work_cancel_delayable_sync+0x86>
   18940:	2394      	movs	r3, #148	; 0x94
   18942:	4a27      	ldr	r2, [pc, #156]	; (189e0 <k_work_cancel_delayable_sync+0x10c>)
   18944:	4927      	ldr	r1, [pc, #156]	; (189e4 <k_work_cancel_delayable_sync+0x110>)
   18946:	4822      	ldr	r0, [pc, #136]	; (189d0 <k_work_cancel_delayable_sync+0xfc>)
   18948:	f002 fc70 	bl	1b22c <assert_print>
   1894c:	4923      	ldr	r1, [pc, #140]	; (189dc <k_work_cancel_delayable_sync+0x108>)
   1894e:	4826      	ldr	r0, [pc, #152]	; (189e8 <k_work_cancel_delayable_sync+0x114>)
   18950:	f002 fc6c 	bl	1b22c <assert_print>
   18954:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18956:	4822      	ldr	r0, [pc, #136]	; (189e0 <k_work_cancel_delayable_sync+0x10c>)
   18958:	e7cb      	b.n	188f2 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   1895a:	4820      	ldr	r0, [pc, #128]	; (189dc <k_work_cancel_delayable_sync+0x108>)
   1895c:	f7fe fec0 	bl	176e0 <z_spin_lock_set_owner>
	return *flagp;
   18960:	68eb      	ldr	r3, [r5, #12]
   18962:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   18966:	2b00      	cmp	r3, #0
   18968:	bf14      	ite	ne
   1896a:	2701      	movne	r7, #1
   1896c:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1896e:	d00a      	beq.n	18986 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   18970:	4628      	mov	r0, r5
   18972:	f005 fe51 	bl	1e618 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   18976:	4628      	mov	r0, r5
   18978:	f005 fe63 	bl	1e642 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1897c:	4631      	mov	r1, r6
   1897e:	4628      	mov	r0, r5
   18980:	f7ff fb74 	bl	1806c <cancel_sync_locked>
   18984:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18986:	4815      	ldr	r0, [pc, #84]	; (189dc <k_work_cancel_delayable_sync+0x108>)
   18988:	f7fe fe9c 	bl	176c4 <z_spin_unlock_valid>
   1898c:	b958      	cbnz	r0, 189a6 <k_work_cancel_delayable_sync+0xd2>
   1898e:	23c2      	movs	r3, #194	; 0xc2
   18990:	4a13      	ldr	r2, [pc, #76]	; (189e0 <k_work_cancel_delayable_sync+0x10c>)
   18992:	4916      	ldr	r1, [pc, #88]	; (189ec <k_work_cancel_delayable_sync+0x118>)
   18994:	480e      	ldr	r0, [pc, #56]	; (189d0 <k_work_cancel_delayable_sync+0xfc>)
   18996:	f002 fc49 	bl	1b22c <assert_print>
   1899a:	4910      	ldr	r1, [pc, #64]	; (189dc <k_work_cancel_delayable_sync+0x108>)
   1899c:	4814      	ldr	r0, [pc, #80]	; (189f0 <k_work_cancel_delayable_sync+0x11c>)
   1899e:	f002 fc45 	bl	1b22c <assert_print>
   189a2:	21c2      	movs	r1, #194	; 0xc2
   189a4:	e7d7      	b.n	18956 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   189a6:	f388 8811 	msr	BASEPRI, r8
   189aa:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   189ae:	b13c      	cbz	r4, 189c0 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   189b0:	f04f 32ff 	mov.w	r2, #4294967295
   189b4:	f04f 33ff 	mov.w	r3, #4294967295
   189b8:	f106 0008 	add.w	r0, r6, #8
   189bc:	f7ff f9ce 	bl	17d5c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   189c0:	4638      	mov	r0, r7
   189c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   189c6:	bf00      	nop
   189c8:	000234f8 	.word	0x000234f8
   189cc:	00023422 	.word	0x00023422
   189d0:	0001f995 	.word	0x0001f995
   189d4:	000234a4 	.word	0x000234a4
   189d8:	00021800 	.word	0x00021800
   189dc:	20009ad4 	.word	0x20009ad4
   189e0:	0001fd89 	.word	0x0001fd89
   189e4:	0001fde2 	.word	0x0001fde2
   189e8:	0001fdf7 	.word	0x0001fdf7
   189ec:	0001fdb6 	.word	0x0001fdb6
   189f0:	0001fdcd 	.word	0x0001fdcd

000189f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   189f4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   189f6:	4d07      	ldr	r5, [pc, #28]	; (18a14 <z_reset_time_slice+0x20>)
   189f8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   189fa:	b154      	cbz	r4, 18a12 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   189fc:	f7fc f812 	bl	14a24 <sys_clock_elapsed>
   18a00:	4b05      	ldr	r3, [pc, #20]	; (18a18 <z_reset_time_slice+0x24>)
   18a02:	4404      	add	r4, r0
   18a04:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   18a06:	6828      	ldr	r0, [r5, #0]
   18a08:	2100      	movs	r1, #0
	}
}
   18a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   18a0e:	f001 bb87 	b.w	1a120 <z_set_timeout_expiry>
}
   18a12:	bd38      	pop	{r3, r4, r5, pc}
   18a14:	20009ae0 	.word	0x20009ae0
   18a18:	20009a9c 	.word	0x20009a9c

00018a1c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   18a1c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   18a1e:	4d14      	ldr	r5, [pc, #80]	; (18a70 <update_cache+0x54>)
   18a20:	462b      	mov	r3, r5
   18a22:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a26:	429c      	cmp	r4, r3
   18a28:	d000      	beq.n	18a2c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   18a2a:	b904      	cbnz	r4, 18a2e <update_cache+0x12>
   18a2c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   18a2e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   18a30:	b9a8      	cbnz	r0, 18a5e <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   18a32:	b963      	cbnz	r3, 18a4e <update_cache+0x32>
   18a34:	490f      	ldr	r1, [pc, #60]	; (18a74 <update_cache+0x58>)
   18a36:	2389      	movs	r3, #137	; 0x89
   18a38:	4a0f      	ldr	r2, [pc, #60]	; (18a78 <update_cache+0x5c>)
   18a3a:	4810      	ldr	r0, [pc, #64]	; (18a7c <update_cache+0x60>)
   18a3c:	f002 fbf6 	bl	1b22c <assert_print>
   18a40:	480f      	ldr	r0, [pc, #60]	; (18a80 <update_cache+0x64>)
   18a42:	f002 fbf3 	bl	1b22c <assert_print>
   18a46:	2189      	movs	r1, #137	; 0x89
   18a48:	480b      	ldr	r0, [pc, #44]	; (18a78 <update_cache+0x5c>)
   18a4a:	f002 fbe8 	bl	1b21e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   18a4e:	7b5a      	ldrb	r2, [r3, #13]
   18a50:	06d2      	lsls	r2, r2, #27
   18a52:	d104      	bne.n	18a5e <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18a54:	69a2      	ldr	r2, [r4, #24]
   18a56:	b912      	cbnz	r2, 18a5e <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   18a58:	89da      	ldrh	r2, [r3, #14]
   18a5a:	2a7f      	cmp	r2, #127	; 0x7f
   18a5c:	d805      	bhi.n	18a6a <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   18a5e:	429c      	cmp	r4, r3
   18a60:	d002      	beq.n	18a68 <update_cache+0x4c>
			z_reset_time_slice(thread);
   18a62:	4620      	mov	r0, r4
   18a64:	f7ff ffc6 	bl	189f4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   18a68:	4623      	mov	r3, r4
   18a6a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   18a6c:	bd38      	pop	{r3, r4, r5, pc}
   18a6e:	bf00      	nop
   18a70:	20009a9c 	.word	0x20009a9c
   18a74:	0002352f 	.word	0x0002352f
   18a78:	0002350d 	.word	0x0002350d
   18a7c:	0001f995 	.word	0x0001f995
   18a80:	00022009 	.word	0x00022009

00018a84 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   18a84:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18a86:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18a8a:	7b42      	ldrb	r2, [r0, #13]
   18a8c:	2b00      	cmp	r3, #0
   18a8e:	db38      	blt.n	18b02 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18a90:	06d3      	lsls	r3, r2, #27
   18a92:	d136      	bne.n	18b02 <ready_thread+0x7e>
	return node->next != NULL;
   18a94:	6983      	ldr	r3, [r0, #24]
   18a96:	2b00      	cmp	r3, #0
   18a98:	d133      	bne.n	18b02 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   18a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   18a9e:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18aa0:	4a18      	ldr	r2, [pc, #96]	; (18b04 <ready_thread+0x80>)
   18aa2:	4290      	cmp	r0, r2
   18aa4:	d109      	bne.n	18aba <ready_thread+0x36>
   18aa6:	4918      	ldr	r1, [pc, #96]	; (18b08 <ready_thread+0x84>)
   18aa8:	4818      	ldr	r0, [pc, #96]	; (18b0c <ready_thread+0x88>)
   18aaa:	23ba      	movs	r3, #186	; 0xba
   18aac:	4a18      	ldr	r2, [pc, #96]	; (18b10 <ready_thread+0x8c>)
   18aae:	f002 fbbd 	bl	1b22c <assert_print>
   18ab2:	21ba      	movs	r1, #186	; 0xba
   18ab4:	4816      	ldr	r0, [pc, #88]	; (18b10 <ready_thread+0x8c>)
   18ab6:	f002 fbb2 	bl	1b21e <assert_post_action>
	return list->head == list;
   18aba:	4916      	ldr	r1, [pc, #88]	; (18b14 <ready_thread+0x90>)
   18abc:	460a      	mov	r2, r1
   18abe:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ac2:	4294      	cmp	r4, r2
   18ac4:	bf18      	it	ne
   18ac6:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   18ac8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18aca:	b923      	cbnz	r3, 18ad6 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   18acc:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   18ad0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   18ad2:	6248      	str	r0, [r1, #36]	; 0x24
}
   18ad4:	e00c      	b.n	18af0 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   18ad6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18ada:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   18ade:	42b5      	cmp	r5, r6
   18ae0:	d00b      	beq.n	18afa <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18ae2:	42ae      	cmp	r6, r5
   18ae4:	dd09      	ble.n	18afa <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   18ae6:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   18ae8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   18aec:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18aee:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   18af0:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   18af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   18af6:	f7ff bf91 	b.w	18a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18afa:	42a3      	cmp	r3, r4
   18afc:	d0e6      	beq.n	18acc <ready_thread+0x48>
   18afe:	681b      	ldr	r3, [r3, #0]
   18b00:	e7e3      	b.n	18aca <ready_thread+0x46>
}
   18b02:	bd70      	pop	{r4, r5, r6, pc}
   18b04:	20009428 	.word	0x20009428
   18b08:	00023556 	.word	0x00023556
   18b0c:	0001f995 	.word	0x0001f995
   18b10:	0002350d 	.word	0x0002350d
   18b14:	20009a9c 	.word	0x20009a9c

00018b18 <k_sched_time_slice_set>:
{
   18b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b1a:	4604      	mov	r4, r0
   18b1c:	460d      	mov	r5, r1
	__asm__ volatile(
   18b1e:	f04f 0320 	mov.w	r3, #32
   18b22:	f3ef 8711 	mrs	r7, BASEPRI
   18b26:	f383 8812 	msr	BASEPRI_MAX, r3
   18b2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b2e:	4822      	ldr	r0, [pc, #136]	; (18bb8 <k_sched_time_slice_set+0xa0>)
   18b30:	f7fe fdba 	bl	176a8 <z_spin_lock_valid>
   18b34:	b968      	cbnz	r0, 18b52 <k_sched_time_slice_set+0x3a>
   18b36:	2394      	movs	r3, #148	; 0x94
   18b38:	4a20      	ldr	r2, [pc, #128]	; (18bbc <k_sched_time_slice_set+0xa4>)
   18b3a:	4921      	ldr	r1, [pc, #132]	; (18bc0 <k_sched_time_slice_set+0xa8>)
   18b3c:	4821      	ldr	r0, [pc, #132]	; (18bc4 <k_sched_time_slice_set+0xac>)
   18b3e:	f002 fb75 	bl	1b22c <assert_print>
   18b42:	491d      	ldr	r1, [pc, #116]	; (18bb8 <k_sched_time_slice_set+0xa0>)
   18b44:	4820      	ldr	r0, [pc, #128]	; (18bc8 <k_sched_time_slice_set+0xb0>)
   18b46:	f002 fb71 	bl	1b22c <assert_print>
   18b4a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b4c:	481b      	ldr	r0, [pc, #108]	; (18bbc <k_sched_time_slice_set+0xa4>)
   18b4e:	f002 fb66 	bl	1b21e <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   18b52:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   18b54:	4818      	ldr	r0, [pc, #96]	; (18bb8 <k_sched_time_slice_set+0xa0>)
   18b56:	f7fe fdc3 	bl	176e0 <z_spin_lock_set_owner>
   18b5a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   18b5e:	f240 30e7 	movw	r0, #999	; 0x3e7
   18b62:	4631      	mov	r1, r6
   18b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18b68:	2300      	movs	r3, #0
   18b6a:	fbe4 010c 	umlal	r0, r1, r4, ip
   18b6e:	f7ef faf3 	bl	8158 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   18b72:	42b4      	cmp	r4, r6
   18b74:	dd02      	ble.n	18b7c <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   18b76:	2802      	cmp	r0, #2
   18b78:	bfb8      	it	lt
   18b7a:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   18b7c:	4a13      	ldr	r2, [pc, #76]	; (18bcc <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   18b7e:	4b14      	ldr	r3, [pc, #80]	; (18bd0 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   18b80:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   18b82:	4a14      	ldr	r2, [pc, #80]	; (18bd4 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   18b84:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   18b86:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   18b88:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   18b8a:	f7ff ff33 	bl	189f4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b8e:	480a      	ldr	r0, [pc, #40]	; (18bb8 <k_sched_time_slice_set+0xa0>)
   18b90:	f7fe fd98 	bl	176c4 <z_spin_unlock_valid>
   18b94:	b958      	cbnz	r0, 18bae <k_sched_time_slice_set+0x96>
   18b96:	23c2      	movs	r3, #194	; 0xc2
   18b98:	4a08      	ldr	r2, [pc, #32]	; (18bbc <k_sched_time_slice_set+0xa4>)
   18b9a:	490f      	ldr	r1, [pc, #60]	; (18bd8 <k_sched_time_slice_set+0xc0>)
   18b9c:	4809      	ldr	r0, [pc, #36]	; (18bc4 <k_sched_time_slice_set+0xac>)
   18b9e:	f002 fb45 	bl	1b22c <assert_print>
   18ba2:	4905      	ldr	r1, [pc, #20]	; (18bb8 <k_sched_time_slice_set+0xa0>)
   18ba4:	480d      	ldr	r0, [pc, #52]	; (18bdc <k_sched_time_slice_set+0xc4>)
   18ba6:	f002 fb41 	bl	1b22c <assert_print>
   18baa:	21c2      	movs	r1, #194	; 0xc2
   18bac:	e7ce      	b.n	18b4c <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   18bae:	f387 8811 	msr	BASEPRI, r7
   18bb2:	f3bf 8f6f 	isb	sy
}
   18bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bb8:	20009ae4 	.word	0x20009ae4
   18bbc:	0001fd89 	.word	0x0001fd89
   18bc0:	0001fde2 	.word	0x0001fde2
   18bc4:	0001f995 	.word	0x0001f995
   18bc8:	0001fdf7 	.word	0x0001fdf7
   18bcc:	20009ae0 	.word	0x20009ae0
   18bd0:	20009a9c 	.word	0x20009a9c
   18bd4:	20009adc 	.word	0x20009adc
   18bd8:	0001fdb6 	.word	0x0001fdb6
   18bdc:	0001fdcd 	.word	0x0001fdcd

00018be0 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   18be0:	b538      	push	{r3, r4, r5, lr}
   18be2:	4604      	mov	r4, r0
	__asm__ volatile(
   18be4:	f04f 0320 	mov.w	r3, #32
   18be8:	f3ef 8511 	mrs	r5, BASEPRI
   18bec:	f383 8812 	msr	BASEPRI_MAX, r3
   18bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18bf4:	4816      	ldr	r0, [pc, #88]	; (18c50 <z_ready_thread+0x70>)
   18bf6:	f7fe fd57 	bl	176a8 <z_spin_lock_valid>
   18bfa:	b968      	cbnz	r0, 18c18 <z_ready_thread+0x38>
   18bfc:	2394      	movs	r3, #148	; 0x94
   18bfe:	4a15      	ldr	r2, [pc, #84]	; (18c54 <z_ready_thread+0x74>)
   18c00:	4915      	ldr	r1, [pc, #84]	; (18c58 <z_ready_thread+0x78>)
   18c02:	4816      	ldr	r0, [pc, #88]	; (18c5c <z_ready_thread+0x7c>)
   18c04:	f002 fb12 	bl	1b22c <assert_print>
   18c08:	4911      	ldr	r1, [pc, #68]	; (18c50 <z_ready_thread+0x70>)
   18c0a:	4815      	ldr	r0, [pc, #84]	; (18c60 <z_ready_thread+0x80>)
   18c0c:	f002 fb0e 	bl	1b22c <assert_print>
   18c10:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c12:	4810      	ldr	r0, [pc, #64]	; (18c54 <z_ready_thread+0x74>)
   18c14:	f002 fb03 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   18c18:	480d      	ldr	r0, [pc, #52]	; (18c50 <z_ready_thread+0x70>)
   18c1a:	f7fe fd61 	bl	176e0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   18c1e:	4620      	mov	r0, r4
   18c20:	f7ff ff30 	bl	18a84 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c24:	480a      	ldr	r0, [pc, #40]	; (18c50 <z_ready_thread+0x70>)
   18c26:	f7fe fd4d 	bl	176c4 <z_spin_unlock_valid>
   18c2a:	b958      	cbnz	r0, 18c44 <z_ready_thread+0x64>
   18c2c:	23c2      	movs	r3, #194	; 0xc2
   18c2e:	4a09      	ldr	r2, [pc, #36]	; (18c54 <z_ready_thread+0x74>)
   18c30:	490c      	ldr	r1, [pc, #48]	; (18c64 <z_ready_thread+0x84>)
   18c32:	480a      	ldr	r0, [pc, #40]	; (18c5c <z_ready_thread+0x7c>)
   18c34:	f002 fafa 	bl	1b22c <assert_print>
   18c38:	4905      	ldr	r1, [pc, #20]	; (18c50 <z_ready_thread+0x70>)
   18c3a:	480b      	ldr	r0, [pc, #44]	; (18c68 <z_ready_thread+0x88>)
   18c3c:	f002 faf6 	bl	1b22c <assert_print>
   18c40:	21c2      	movs	r1, #194	; 0xc2
   18c42:	e7e6      	b.n	18c12 <z_ready_thread+0x32>
	__asm__ volatile(
   18c44:	f385 8811 	msr	BASEPRI, r5
   18c48:	f3bf 8f6f 	isb	sy
		}
	}
}
   18c4c:	bd38      	pop	{r3, r4, r5, pc}
   18c4e:	bf00      	nop
   18c50:	20009ae4 	.word	0x20009ae4
   18c54:	0001fd89 	.word	0x0001fd89
   18c58:	0001fde2 	.word	0x0001fde2
   18c5c:	0001f995 	.word	0x0001f995
   18c60:	0001fdf7 	.word	0x0001fdf7
   18c64:	0001fdb6 	.word	0x0001fdb6
   18c68:	0001fdcd 	.word	0x0001fdcd

00018c6c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   18c6c:	b538      	push	{r3, r4, r5, lr}
   18c6e:	4604      	mov	r4, r0
	__asm__ volatile(
   18c70:	f04f 0320 	mov.w	r3, #32
   18c74:	f3ef 8511 	mrs	r5, BASEPRI
   18c78:	f383 8812 	msr	BASEPRI_MAX, r3
   18c7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c80:	4816      	ldr	r0, [pc, #88]	; (18cdc <z_unpend_thread_no_timeout+0x70>)
   18c82:	f7fe fd11 	bl	176a8 <z_spin_lock_valid>
   18c86:	b968      	cbnz	r0, 18ca4 <z_unpend_thread_no_timeout+0x38>
   18c88:	2394      	movs	r3, #148	; 0x94
   18c8a:	4a15      	ldr	r2, [pc, #84]	; (18ce0 <z_unpend_thread_no_timeout+0x74>)
   18c8c:	4915      	ldr	r1, [pc, #84]	; (18ce4 <z_unpend_thread_no_timeout+0x78>)
   18c8e:	4816      	ldr	r0, [pc, #88]	; (18ce8 <z_unpend_thread_no_timeout+0x7c>)
   18c90:	f002 facc 	bl	1b22c <assert_print>
   18c94:	4911      	ldr	r1, [pc, #68]	; (18cdc <z_unpend_thread_no_timeout+0x70>)
   18c96:	4815      	ldr	r0, [pc, #84]	; (18cec <z_unpend_thread_no_timeout+0x80>)
   18c98:	f002 fac8 	bl	1b22c <assert_print>
   18c9c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c9e:	4810      	ldr	r0, [pc, #64]	; (18ce0 <z_unpend_thread_no_timeout+0x74>)
   18ca0:	f002 fabd 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   18ca4:	480d      	ldr	r0, [pc, #52]	; (18cdc <z_unpend_thread_no_timeout+0x70>)
   18ca6:	f7fe fd1b 	bl	176e0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   18caa:	4620      	mov	r0, r4
   18cac:	f000 fc62 	bl	19574 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18cb0:	480a      	ldr	r0, [pc, #40]	; (18cdc <z_unpend_thread_no_timeout+0x70>)
   18cb2:	f7fe fd07 	bl	176c4 <z_spin_unlock_valid>
   18cb6:	b958      	cbnz	r0, 18cd0 <z_unpend_thread_no_timeout+0x64>
   18cb8:	23c2      	movs	r3, #194	; 0xc2
   18cba:	4a09      	ldr	r2, [pc, #36]	; (18ce0 <z_unpend_thread_no_timeout+0x74>)
   18cbc:	490c      	ldr	r1, [pc, #48]	; (18cf0 <z_unpend_thread_no_timeout+0x84>)
   18cbe:	480a      	ldr	r0, [pc, #40]	; (18ce8 <z_unpend_thread_no_timeout+0x7c>)
   18cc0:	f002 fab4 	bl	1b22c <assert_print>
   18cc4:	4905      	ldr	r1, [pc, #20]	; (18cdc <z_unpend_thread_no_timeout+0x70>)
   18cc6:	480b      	ldr	r0, [pc, #44]	; (18cf4 <z_unpend_thread_no_timeout+0x88>)
   18cc8:	f002 fab0 	bl	1b22c <assert_print>
   18ccc:	21c2      	movs	r1, #194	; 0xc2
   18cce:	e7e6      	b.n	18c9e <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   18cd0:	f385 8811 	msr	BASEPRI, r5
   18cd4:	f3bf 8f6f 	isb	sy
	}
}
   18cd8:	bd38      	pop	{r3, r4, r5, pc}
   18cda:	bf00      	nop
   18cdc:	20009ae4 	.word	0x20009ae4
   18ce0:	0001fd89 	.word	0x0001fd89
   18ce4:	0001fde2 	.word	0x0001fde2
   18ce8:	0001f995 	.word	0x0001f995
   18cec:	0001fdf7 	.word	0x0001fdf7
   18cf0:	0001fdb6 	.word	0x0001fdb6
   18cf4:	0001fdcd 	.word	0x0001fdcd

00018cf8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   18cf8:	b570      	push	{r4, r5, r6, lr}
   18cfa:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18cfc:	460d      	mov	r5, r1
   18cfe:	b9e9      	cbnz	r1, 18d3c <z_reschedule+0x44>
   18d00:	f3ef 8605 	mrs	r6, IPSR
   18d04:	b9d6      	cbnz	r6, 18d3c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   18d06:	4b18      	ldr	r3, [pc, #96]	; (18d68 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   18d08:	69da      	ldr	r2, [r3, #28]
   18d0a:	689b      	ldr	r3, [r3, #8]
   18d0c:	429a      	cmp	r2, r3
   18d0e:	d015      	beq.n	18d3c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d10:	f7fe fcd8 	bl	176c4 <z_spin_unlock_valid>
   18d14:	b968      	cbnz	r0, 18d32 <z_reschedule+0x3a>
   18d16:	23e1      	movs	r3, #225	; 0xe1
   18d18:	4a14      	ldr	r2, [pc, #80]	; (18d6c <z_reschedule+0x74>)
   18d1a:	4915      	ldr	r1, [pc, #84]	; (18d70 <z_reschedule+0x78>)
   18d1c:	4815      	ldr	r0, [pc, #84]	; (18d74 <z_reschedule+0x7c>)
   18d1e:	f002 fa85 	bl	1b22c <assert_print>
   18d22:	4621      	mov	r1, r4
   18d24:	4814      	ldr	r0, [pc, #80]	; (18d78 <z_reschedule+0x80>)
   18d26:	f002 fa81 	bl	1b22c <assert_print>
   18d2a:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d2c:	480f      	ldr	r0, [pc, #60]	; (18d6c <z_reschedule+0x74>)
   18d2e:	f002 fa76 	bl	1b21e <assert_post_action>
	ret = arch_swap(key);
   18d32:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   18d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18d38:	f7f3 baae 	b.w	c298 <arch_swap>
   18d3c:	4620      	mov	r0, r4
   18d3e:	f7fe fcc1 	bl	176c4 <z_spin_unlock_valid>
   18d42:	b958      	cbnz	r0, 18d5c <z_reschedule+0x64>
   18d44:	23c2      	movs	r3, #194	; 0xc2
   18d46:	4a09      	ldr	r2, [pc, #36]	; (18d6c <z_reschedule+0x74>)
   18d48:	4909      	ldr	r1, [pc, #36]	; (18d70 <z_reschedule+0x78>)
   18d4a:	480a      	ldr	r0, [pc, #40]	; (18d74 <z_reschedule+0x7c>)
   18d4c:	f002 fa6e 	bl	1b22c <assert_print>
   18d50:	4621      	mov	r1, r4
   18d52:	4809      	ldr	r0, [pc, #36]	; (18d78 <z_reschedule+0x80>)
   18d54:	f002 fa6a 	bl	1b22c <assert_print>
   18d58:	21c2      	movs	r1, #194	; 0xc2
   18d5a:	e7e7      	b.n	18d2c <z_reschedule+0x34>
   18d5c:	f385 8811 	msr	BASEPRI, r5
   18d60:	f3bf 8f6f 	isb	sy
   18d64:	bd70      	pop	{r4, r5, r6, pc}
   18d66:	bf00      	nop
   18d68:	20009a9c 	.word	0x20009a9c
   18d6c:	0001fd89 	.word	0x0001fd89
   18d70:	0001fdb6 	.word	0x0001fdb6
   18d74:	0001f995 	.word	0x0001f995
   18d78:	0001fdcd 	.word	0x0001fdcd

00018d7c <z_sched_start>:
{
   18d7c:	b538      	push	{r3, r4, r5, lr}
   18d7e:	4604      	mov	r4, r0
	__asm__ volatile(
   18d80:	f04f 0320 	mov.w	r3, #32
   18d84:	f3ef 8511 	mrs	r5, BASEPRI
   18d88:	f383 8812 	msr	BASEPRI_MAX, r3
   18d8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d90:	481c      	ldr	r0, [pc, #112]	; (18e04 <z_sched_start+0x88>)
   18d92:	f7fe fc89 	bl	176a8 <z_spin_lock_valid>
   18d96:	b968      	cbnz	r0, 18db4 <z_sched_start+0x38>
   18d98:	2394      	movs	r3, #148	; 0x94
   18d9a:	4a1b      	ldr	r2, [pc, #108]	; (18e08 <z_sched_start+0x8c>)
   18d9c:	491b      	ldr	r1, [pc, #108]	; (18e0c <z_sched_start+0x90>)
   18d9e:	481c      	ldr	r0, [pc, #112]	; (18e10 <z_sched_start+0x94>)
   18da0:	f002 fa44 	bl	1b22c <assert_print>
   18da4:	4917      	ldr	r1, [pc, #92]	; (18e04 <z_sched_start+0x88>)
   18da6:	481b      	ldr	r0, [pc, #108]	; (18e14 <z_sched_start+0x98>)
   18da8:	f002 fa40 	bl	1b22c <assert_print>
   18dac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dae:	4816      	ldr	r0, [pc, #88]	; (18e08 <z_sched_start+0x8c>)
   18db0:	f002 fa35 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   18db4:	4813      	ldr	r0, [pc, #76]	; (18e04 <z_sched_start+0x88>)
   18db6:	f7fe fc93 	bl	176e0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18dba:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   18dbc:	075a      	lsls	r2, r3, #29
   18dbe:	d414      	bmi.n	18dea <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dc0:	4810      	ldr	r0, [pc, #64]	; (18e04 <z_sched_start+0x88>)
   18dc2:	f7fe fc7f 	bl	176c4 <z_spin_unlock_valid>
   18dc6:	b958      	cbnz	r0, 18de0 <z_sched_start+0x64>
   18dc8:	23c2      	movs	r3, #194	; 0xc2
   18dca:	4a0f      	ldr	r2, [pc, #60]	; (18e08 <z_sched_start+0x8c>)
   18dcc:	4912      	ldr	r1, [pc, #72]	; (18e18 <z_sched_start+0x9c>)
   18dce:	4810      	ldr	r0, [pc, #64]	; (18e10 <z_sched_start+0x94>)
   18dd0:	f002 fa2c 	bl	1b22c <assert_print>
   18dd4:	490b      	ldr	r1, [pc, #44]	; (18e04 <z_sched_start+0x88>)
   18dd6:	4811      	ldr	r0, [pc, #68]	; (18e1c <z_sched_start+0xa0>)
   18dd8:	f002 fa28 	bl	1b22c <assert_print>
   18ddc:	21c2      	movs	r1, #194	; 0xc2
   18dde:	e7e6      	b.n	18dae <z_sched_start+0x32>
	__asm__ volatile(
   18de0:	f385 8811 	msr	BASEPRI, r5
   18de4:	f3bf 8f6f 	isb	sy
}
   18de8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18dea:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   18dee:	4620      	mov	r0, r4
   18df0:	7363      	strb	r3, [r4, #13]
   18df2:	f7ff fe47 	bl	18a84 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18df6:	4629      	mov	r1, r5
}
   18df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   18dfc:	4801      	ldr	r0, [pc, #4]	; (18e04 <z_sched_start+0x88>)
   18dfe:	f7ff bf7b 	b.w	18cf8 <z_reschedule>
   18e02:	bf00      	nop
   18e04:	20009ae4 	.word	0x20009ae4
   18e08:	0001fd89 	.word	0x0001fd89
   18e0c:	0001fde2 	.word	0x0001fde2
   18e10:	0001f995 	.word	0x0001f995
   18e14:	0001fdf7 	.word	0x0001fdf7
   18e18:	0001fdb6 	.word	0x0001fdb6
   18e1c:	0001fdcd 	.word	0x0001fdcd

00018e20 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   18e20:	b510      	push	{r4, lr}
	__asm__ volatile(
   18e22:	f04f 0320 	mov.w	r3, #32
   18e26:	f3ef 8411 	mrs	r4, BASEPRI
   18e2a:	f383 8812 	msr	BASEPRI_MAX, r3
   18e2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e32:	4825      	ldr	r0, [pc, #148]	; (18ec8 <k_sched_lock+0xa8>)
   18e34:	f7fe fc38 	bl	176a8 <z_spin_lock_valid>
   18e38:	b960      	cbnz	r0, 18e54 <k_sched_lock+0x34>
   18e3a:	2394      	movs	r3, #148	; 0x94
   18e3c:	4a23      	ldr	r2, [pc, #140]	; (18ecc <k_sched_lock+0xac>)
   18e3e:	4924      	ldr	r1, [pc, #144]	; (18ed0 <k_sched_lock+0xb0>)
   18e40:	4824      	ldr	r0, [pc, #144]	; (18ed4 <k_sched_lock+0xb4>)
   18e42:	f002 f9f3 	bl	1b22c <assert_print>
   18e46:	4920      	ldr	r1, [pc, #128]	; (18ec8 <k_sched_lock+0xa8>)
   18e48:	4823      	ldr	r0, [pc, #140]	; (18ed8 <k_sched_lock+0xb8>)
   18e4a:	f002 f9ef 	bl	1b22c <assert_print>
   18e4e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e50:	481e      	ldr	r0, [pc, #120]	; (18ecc <k_sched_lock+0xac>)
   18e52:	e010      	b.n	18e76 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   18e54:	481c      	ldr	r0, [pc, #112]	; (18ec8 <k_sched_lock+0xa8>)
   18e56:	f7fe fc43 	bl	176e0 <z_spin_lock_set_owner>
   18e5a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   18e5e:	b163      	cbz	r3, 18e7a <k_sched_lock+0x5a>
   18e60:	491e      	ldr	r1, [pc, #120]	; (18edc <k_sched_lock+0xbc>)
   18e62:	23fd      	movs	r3, #253	; 0xfd
   18e64:	4a1e      	ldr	r2, [pc, #120]	; (18ee0 <k_sched_lock+0xc0>)
   18e66:	481b      	ldr	r0, [pc, #108]	; (18ed4 <k_sched_lock+0xb4>)
   18e68:	f002 f9e0 	bl	1b22c <assert_print>
   18e6c:	481d      	ldr	r0, [pc, #116]	; (18ee4 <k_sched_lock+0xc4>)
   18e6e:	f002 f9dd 	bl	1b22c <assert_print>
   18e72:	21fd      	movs	r1, #253	; 0xfd
   18e74:	481a      	ldr	r0, [pc, #104]	; (18ee0 <k_sched_lock+0xc0>)
   18e76:	f002 f9d2 	bl	1b21e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   18e7a:	4b1b      	ldr	r3, [pc, #108]	; (18ee8 <k_sched_lock+0xc8>)
   18e7c:	689a      	ldr	r2, [r3, #8]
   18e7e:	7bd3      	ldrb	r3, [r2, #15]
   18e80:	2b01      	cmp	r3, #1
   18e82:	d10a      	bne.n	18e9a <k_sched_lock+0x7a>
   18e84:	4919      	ldr	r1, [pc, #100]	; (18eec <k_sched_lock+0xcc>)
   18e86:	23fe      	movs	r3, #254	; 0xfe
   18e88:	4a15      	ldr	r2, [pc, #84]	; (18ee0 <k_sched_lock+0xc0>)
   18e8a:	4812      	ldr	r0, [pc, #72]	; (18ed4 <k_sched_lock+0xb4>)
   18e8c:	f002 f9ce 	bl	1b22c <assert_print>
   18e90:	4814      	ldr	r0, [pc, #80]	; (18ee4 <k_sched_lock+0xc4>)
   18e92:	f002 f9cb 	bl	1b22c <assert_print>
   18e96:	21fe      	movs	r1, #254	; 0xfe
   18e98:	e7ec      	b.n	18e74 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   18e9a:	3b01      	subs	r3, #1
   18e9c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e9e:	480a      	ldr	r0, [pc, #40]	; (18ec8 <k_sched_lock+0xa8>)
   18ea0:	f7fe fc10 	bl	176c4 <z_spin_unlock_valid>
   18ea4:	b958      	cbnz	r0, 18ebe <k_sched_lock+0x9e>
   18ea6:	23c2      	movs	r3, #194	; 0xc2
   18ea8:	4a08      	ldr	r2, [pc, #32]	; (18ecc <k_sched_lock+0xac>)
   18eaa:	4911      	ldr	r1, [pc, #68]	; (18ef0 <k_sched_lock+0xd0>)
   18eac:	4809      	ldr	r0, [pc, #36]	; (18ed4 <k_sched_lock+0xb4>)
   18eae:	f002 f9bd 	bl	1b22c <assert_print>
   18eb2:	4905      	ldr	r1, [pc, #20]	; (18ec8 <k_sched_lock+0xa8>)
   18eb4:	480f      	ldr	r0, [pc, #60]	; (18ef4 <k_sched_lock+0xd4>)
   18eb6:	f002 f9b9 	bl	1b22c <assert_print>
   18eba:	21c2      	movs	r1, #194	; 0xc2
   18ebc:	e7c8      	b.n	18e50 <k_sched_lock+0x30>
	__asm__ volatile(
   18ebe:	f384 8811 	msr	BASEPRI, r4
   18ec2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   18ec6:	bd10      	pop	{r4, pc}
   18ec8:	20009ae4 	.word	0x20009ae4
   18ecc:	0001fd89 	.word	0x0001fd89
   18ed0:	0001fde2 	.word	0x0001fde2
   18ed4:	0001f995 	.word	0x0001f995
   18ed8:	0001fdf7 	.word	0x0001fdf7
   18edc:	000232a0 	.word	0x000232a0
   18ee0:	00023577 	.word	0x00023577
   18ee4:	00022009 	.word	0x00022009
   18ee8:	20009a9c 	.word	0x20009a9c
   18eec:	000235a2 	.word	0x000235a2
   18ef0:	0001fdb6 	.word	0x0001fdb6
   18ef4:	0001fdcd 	.word	0x0001fdcd

00018ef8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   18ef8:	b510      	push	{r4, lr}
	__asm__ volatile(
   18efa:	f04f 0320 	mov.w	r3, #32
   18efe:	f3ef 8411 	mrs	r4, BASEPRI
   18f02:	f383 8812 	msr	BASEPRI_MAX, r3
   18f06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f0a:	4829      	ldr	r0, [pc, #164]	; (18fb0 <k_sched_unlock+0xb8>)
   18f0c:	f7fe fbcc 	bl	176a8 <z_spin_lock_valid>
   18f10:	b960      	cbnz	r0, 18f2c <k_sched_unlock+0x34>
   18f12:	2394      	movs	r3, #148	; 0x94
   18f14:	4a27      	ldr	r2, [pc, #156]	; (18fb4 <k_sched_unlock+0xbc>)
   18f16:	4928      	ldr	r1, [pc, #160]	; (18fb8 <k_sched_unlock+0xc0>)
   18f18:	4828      	ldr	r0, [pc, #160]	; (18fbc <k_sched_unlock+0xc4>)
   18f1a:	f002 f987 	bl	1b22c <assert_print>
   18f1e:	4924      	ldr	r1, [pc, #144]	; (18fb0 <k_sched_unlock+0xb8>)
   18f20:	4827      	ldr	r0, [pc, #156]	; (18fc0 <k_sched_unlock+0xc8>)
   18f22:	f002 f983 	bl	1b22c <assert_print>
   18f26:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f28:	4822      	ldr	r0, [pc, #136]	; (18fb4 <k_sched_unlock+0xbc>)
   18f2a:	e013      	b.n	18f54 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   18f2c:	4820      	ldr	r0, [pc, #128]	; (18fb0 <k_sched_unlock+0xb8>)
   18f2e:	f7fe fbd7 	bl	176e0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   18f32:	4b24      	ldr	r3, [pc, #144]	; (18fc4 <k_sched_unlock+0xcc>)
   18f34:	689a      	ldr	r2, [r3, #8]
   18f36:	7bd3      	ldrb	r3, [r2, #15]
   18f38:	b973      	cbnz	r3, 18f58 <k_sched_unlock+0x60>
   18f3a:	4923      	ldr	r1, [pc, #140]	; (18fc8 <k_sched_unlock+0xd0>)
   18f3c:	f240 33e7 	movw	r3, #999	; 0x3e7
   18f40:	4a22      	ldr	r2, [pc, #136]	; (18fcc <k_sched_unlock+0xd4>)
   18f42:	481e      	ldr	r0, [pc, #120]	; (18fbc <k_sched_unlock+0xc4>)
   18f44:	f002 f972 	bl	1b22c <assert_print>
   18f48:	4821      	ldr	r0, [pc, #132]	; (18fd0 <k_sched_unlock+0xd8>)
   18f4a:	f002 f96f 	bl	1b22c <assert_print>
   18f4e:	f240 31e7 	movw	r1, #999	; 0x3e7
   18f52:	481e      	ldr	r0, [pc, #120]	; (18fcc <k_sched_unlock+0xd4>)
   18f54:	f002 f963 	bl	1b21e <assert_post_action>
   18f58:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   18f5c:	b160      	cbz	r0, 18f78 <k_sched_unlock+0x80>
   18f5e:	491d      	ldr	r1, [pc, #116]	; (18fd4 <k_sched_unlock+0xdc>)
   18f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18f64:	4a19      	ldr	r2, [pc, #100]	; (18fcc <k_sched_unlock+0xd4>)
   18f66:	4815      	ldr	r0, [pc, #84]	; (18fbc <k_sched_unlock+0xc4>)
   18f68:	f002 f960 	bl	1b22c <assert_print>
   18f6c:	4818      	ldr	r0, [pc, #96]	; (18fd0 <k_sched_unlock+0xd8>)
   18f6e:	f002 f95d 	bl	1b22c <assert_print>
   18f72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18f76:	e7ec      	b.n	18f52 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   18f78:	3301      	adds	r3, #1
   18f7a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18f7c:	f7ff fd4e 	bl	18a1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f80:	480b      	ldr	r0, [pc, #44]	; (18fb0 <k_sched_unlock+0xb8>)
   18f82:	f7fe fb9f 	bl	176c4 <z_spin_unlock_valid>
   18f86:	b958      	cbnz	r0, 18fa0 <k_sched_unlock+0xa8>
   18f88:	23c2      	movs	r3, #194	; 0xc2
   18f8a:	4a0a      	ldr	r2, [pc, #40]	; (18fb4 <k_sched_unlock+0xbc>)
   18f8c:	4912      	ldr	r1, [pc, #72]	; (18fd8 <k_sched_unlock+0xe0>)
   18f8e:	480b      	ldr	r0, [pc, #44]	; (18fbc <k_sched_unlock+0xc4>)
   18f90:	f002 f94c 	bl	1b22c <assert_print>
   18f94:	4906      	ldr	r1, [pc, #24]	; (18fb0 <k_sched_unlock+0xb8>)
   18f96:	4811      	ldr	r0, [pc, #68]	; (18fdc <k_sched_unlock+0xe4>)
   18f98:	f002 f948 	bl	1b22c <assert_print>
   18f9c:	21c2      	movs	r1, #194	; 0xc2
   18f9e:	e7c3      	b.n	18f28 <k_sched_unlock+0x30>
	__asm__ volatile(
   18fa0:	f384 8811 	msr	BASEPRI, r4
   18fa4:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   18fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   18fac:	f005 bba4 	b.w	1e6f8 <z_reschedule_unlocked>
   18fb0:	20009ae4 	.word	0x20009ae4
   18fb4:	0001fd89 	.word	0x0001fd89
   18fb8:	0001fde2 	.word	0x0001fde2
   18fbc:	0001f995 	.word	0x0001f995
   18fc0:	0001fdf7 	.word	0x0001fdf7
   18fc4:	20009a9c 	.word	0x20009a9c
   18fc8:	000235d3 	.word	0x000235d3
   18fcc:	0002350d 	.word	0x0002350d
   18fd0:	00022009 	.word	0x00022009
   18fd4:	000232a0 	.word	0x000232a0
   18fd8:	0001fdb6 	.word	0x0001fdb6
   18fdc:	0001fdcd 	.word	0x0001fdcd

00018fe0 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   18fe0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18fe2:	4b0b      	ldr	r3, [pc, #44]	; (19010 <z_priq_dumb_remove+0x30>)
   18fe4:	4299      	cmp	r1, r3
   18fe6:	d10b      	bne.n	19000 <z_priq_dumb_remove+0x20>
   18fe8:	490a      	ldr	r1, [pc, #40]	; (19014 <z_priq_dumb_remove+0x34>)
   18fea:	480b      	ldr	r0, [pc, #44]	; (19018 <z_priq_dumb_remove+0x38>)
   18fec:	f240 4373 	movw	r3, #1139	; 0x473
   18ff0:	4a0a      	ldr	r2, [pc, #40]	; (1901c <z_priq_dumb_remove+0x3c>)
   18ff2:	f002 f91b 	bl	1b22c <assert_print>
   18ff6:	f240 4173 	movw	r1, #1139	; 0x473
   18ffa:	4808      	ldr	r0, [pc, #32]	; (1901c <z_priq_dumb_remove+0x3c>)
   18ffc:	f002 f90f 	bl	1b21e <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   19000:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   19004:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19006:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19008:	2300      	movs	r3, #0
	node->prev = NULL;
   1900a:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1900e:	bd08      	pop	{r3, pc}
   19010:	20009428 	.word	0x20009428
   19014:	00023556 	.word	0x00023556
   19018:	0001f995 	.word	0x0001f995
   1901c:	0002350d 	.word	0x0002350d

00019020 <move_thread_to_end_of_prio_q>:
{
   19020:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   19022:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19026:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   19028:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1902a:	7b43      	ldrb	r3, [r0, #13]
   1902c:	da06      	bge.n	1903c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1902e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   19032:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19034:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19036:	481d      	ldr	r0, [pc, #116]	; (190ac <move_thread_to_end_of_prio_q+0x8c>)
   19038:	f7ff ffd2 	bl	18fe0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1903c:	7b63      	ldrb	r3, [r4, #13]
   1903e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19042:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19044:	4b1a      	ldr	r3, [pc, #104]	; (190b0 <move_thread_to_end_of_prio_q+0x90>)
   19046:	429c      	cmp	r4, r3
   19048:	d109      	bne.n	1905e <move_thread_to_end_of_prio_q+0x3e>
   1904a:	491a      	ldr	r1, [pc, #104]	; (190b4 <move_thread_to_end_of_prio_q+0x94>)
   1904c:	481a      	ldr	r0, [pc, #104]	; (190b8 <move_thread_to_end_of_prio_q+0x98>)
   1904e:	23ba      	movs	r3, #186	; 0xba
   19050:	4a1a      	ldr	r2, [pc, #104]	; (190bc <move_thread_to_end_of_prio_q+0x9c>)
   19052:	f002 f8eb 	bl	1b22c <assert_print>
   19056:	21ba      	movs	r1, #186	; 0xba
   19058:	4818      	ldr	r0, [pc, #96]	; (190bc <move_thread_to_end_of_prio_q+0x9c>)
   1905a:	f002 f8e0 	bl	1b21e <assert_post_action>
	return list->head == list;
   1905e:	4a18      	ldr	r2, [pc, #96]	; (190c0 <move_thread_to_end_of_prio_q+0xa0>)
   19060:	4611      	mov	r1, r2
   19062:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   19066:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19068:	428b      	cmp	r3, r1
   1906a:	bf08      	it	eq
   1906c:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1906e:	b923      	cbnz	r3, 1907a <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   19070:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   19074:	6004      	str	r4, [r0, #0]
	list->tail = node;
   19076:	6254      	str	r4, [r2, #36]	; 0x24
}
   19078:	e00c      	b.n	19094 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   1907a:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1907e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   19082:	42b5      	cmp	r5, r6
   19084:	d00e      	beq.n	190a4 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19086:	42ae      	cmp	r6, r5
   19088:	dd0c      	ble.n	190a4 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   1908a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1908c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   19090:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19092:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   19094:	6890      	ldr	r0, [r2, #8]
   19096:	1b03      	subs	r3, r0, r4
   19098:	4258      	negs	r0, r3
   1909a:	4158      	adcs	r0, r3
}
   1909c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   190a0:	f7ff bcbc 	b.w	18a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   190a4:	4298      	cmp	r0, r3
   190a6:	d0e3      	beq.n	19070 <move_thread_to_end_of_prio_q+0x50>
   190a8:	681b      	ldr	r3, [r3, #0]
   190aa:	e7e0      	b.n	1906e <move_thread_to_end_of_prio_q+0x4e>
   190ac:	20009abc 	.word	0x20009abc
   190b0:	20009428 	.word	0x20009428
   190b4:	00023556 	.word	0x00023556
   190b8:	0001f995 	.word	0x0001f995
   190bc:	0002350d 	.word	0x0002350d
   190c0:	20009a9c 	.word	0x20009a9c

000190c4 <z_time_slice>:
{
   190c4:	b570      	push	{r4, r5, r6, lr}
   190c6:	4605      	mov	r5, r0
	__asm__ volatile(
   190c8:	f04f 0320 	mov.w	r3, #32
   190cc:	f3ef 8611 	mrs	r6, BASEPRI
   190d0:	f383 8812 	msr	BASEPRI_MAX, r3
   190d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   190d8:	4829      	ldr	r0, [pc, #164]	; (19180 <z_time_slice+0xbc>)
   190da:	f7fe fae5 	bl	176a8 <z_spin_lock_valid>
   190de:	b968      	cbnz	r0, 190fc <z_time_slice+0x38>
   190e0:	2394      	movs	r3, #148	; 0x94
   190e2:	4a28      	ldr	r2, [pc, #160]	; (19184 <z_time_slice+0xc0>)
   190e4:	4928      	ldr	r1, [pc, #160]	; (19188 <z_time_slice+0xc4>)
   190e6:	4829      	ldr	r0, [pc, #164]	; (1918c <z_time_slice+0xc8>)
   190e8:	f002 f8a0 	bl	1b22c <assert_print>
   190ec:	4924      	ldr	r1, [pc, #144]	; (19180 <z_time_slice+0xbc>)
   190ee:	4828      	ldr	r0, [pc, #160]	; (19190 <z_time_slice+0xcc>)
   190f0:	f002 f89c 	bl	1b22c <assert_print>
   190f4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   190f6:	4823      	ldr	r0, [pc, #140]	; (19184 <z_time_slice+0xc0>)
   190f8:	f002 f891 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   190fc:	4820      	ldr	r0, [pc, #128]	; (19180 <z_time_slice+0xbc>)
   190fe:	f7fe faef 	bl	176e0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   19102:	4b24      	ldr	r3, [pc, #144]	; (19194 <z_time_slice+0xd0>)
   19104:	4a24      	ldr	r2, [pc, #144]	; (19198 <z_time_slice+0xd4>)
   19106:	689c      	ldr	r4, [r3, #8]
   19108:	6811      	ldr	r1, [r2, #0]
   1910a:	428c      	cmp	r4, r1
   1910c:	d112      	bne.n	19134 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   1910e:	4620      	mov	r0, r4
   19110:	f7ff fc70 	bl	189f4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19114:	481a      	ldr	r0, [pc, #104]	; (19180 <z_time_slice+0xbc>)
   19116:	f7fe fad5 	bl	176c4 <z_spin_unlock_valid>
   1911a:	bb58      	cbnz	r0, 19174 <z_time_slice+0xb0>
   1911c:	23c2      	movs	r3, #194	; 0xc2
   1911e:	4a19      	ldr	r2, [pc, #100]	; (19184 <z_time_slice+0xc0>)
   19120:	491e      	ldr	r1, [pc, #120]	; (1919c <z_time_slice+0xd8>)
   19122:	481a      	ldr	r0, [pc, #104]	; (1918c <z_time_slice+0xc8>)
   19124:	f002 f882 	bl	1b22c <assert_print>
   19128:	4915      	ldr	r1, [pc, #84]	; (19180 <z_time_slice+0xbc>)
   1912a:	481d      	ldr	r0, [pc, #116]	; (191a0 <z_time_slice+0xdc>)
   1912c:	f002 f87e 	bl	1b22c <assert_print>
   19130:	21c2      	movs	r1, #194	; 0xc2
   19132:	e7e0      	b.n	190f6 <z_time_slice+0x32>
	pending_current = NULL;
   19134:	2100      	movs	r1, #0
   19136:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   19138:	4a1a      	ldr	r2, [pc, #104]	; (191a4 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   1913a:	6812      	ldr	r2, [r2, #0]
   1913c:	b1c2      	cbz	r2, 19170 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   1913e:	89e2      	ldrh	r2, [r4, #14]
   19140:	2a7f      	cmp	r2, #127	; 0x7f
   19142:	d815      	bhi.n	19170 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   19144:	7b62      	ldrb	r2, [r4, #13]
   19146:	06d2      	lsls	r2, r2, #27
   19148:	d112      	bne.n	19170 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1914a:	4a17      	ldr	r2, [pc, #92]	; (191a8 <z_time_slice+0xe4>)
   1914c:	f994 100e 	ldrsb.w	r1, [r4, #14]
   19150:	6812      	ldr	r2, [r2, #0]
   19152:	4291      	cmp	r1, r2
   19154:	db0c      	blt.n	19170 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   19156:	4a15      	ldr	r2, [pc, #84]	; (191ac <z_time_slice+0xe8>)
   19158:	4294      	cmp	r4, r2
   1915a:	d009      	beq.n	19170 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   1915c:	691a      	ldr	r2, [r3, #16]
   1915e:	42aa      	cmp	r2, r5
   19160:	dc03      	bgt.n	1916a <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   19162:	4620      	mov	r0, r4
   19164:	f7ff ff5c 	bl	19020 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   19168:	e7d1      	b.n	1910e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   1916a:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   1916c:	611a      	str	r2, [r3, #16]
   1916e:	e7d1      	b.n	19114 <z_time_slice+0x50>
   19170:	2200      	movs	r2, #0
   19172:	e7fb      	b.n	1916c <z_time_slice+0xa8>
	__asm__ volatile(
   19174:	f386 8811 	msr	BASEPRI, r6
   19178:	f3bf 8f6f 	isb	sy
}
   1917c:	bd70      	pop	{r4, r5, r6, pc}
   1917e:	bf00      	nop
   19180:	20009ae4 	.word	0x20009ae4
   19184:	0001fd89 	.word	0x0001fd89
   19188:	0001fde2 	.word	0x0001fde2
   1918c:	0001f995 	.word	0x0001f995
   19190:	0001fdf7 	.word	0x0001fdf7
   19194:	20009a9c 	.word	0x20009a9c
   19198:	20009ad8 	.word	0x20009ad8
   1919c:	0001fdb6 	.word	0x0001fdb6
   191a0:	0001fdcd 	.word	0x0001fdcd
   191a4:	20009ae0 	.word	0x20009ae0
   191a8:	20009adc 	.word	0x20009adc
   191ac:	20009428 	.word	0x20009428

000191b0 <unready_thread>:
{
   191b0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   191b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   191b6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   191b8:	2a00      	cmp	r2, #0
   191ba:	7b43      	ldrb	r3, [r0, #13]
   191bc:	da06      	bge.n	191cc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   191be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   191c2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   191c4:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   191c6:	4806      	ldr	r0, [pc, #24]	; (191e0 <unready_thread+0x30>)
   191c8:	f7ff ff0a 	bl	18fe0 <z_priq_dumb_remove>
	update_cache(thread == _current);
   191cc:	4b05      	ldr	r3, [pc, #20]	; (191e4 <unready_thread+0x34>)
   191ce:	6898      	ldr	r0, [r3, #8]
   191d0:	1b03      	subs	r3, r0, r4
   191d2:	4258      	negs	r0, r3
   191d4:	4158      	adcs	r0, r3
}
   191d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   191da:	f7ff bc1f 	b.w	18a1c <update_cache>
   191de:	bf00      	nop
   191e0:	20009abc 	.word	0x20009abc
   191e4:	20009a9c 	.word	0x20009a9c

000191e8 <add_to_waitq_locked>:
{
   191e8:	b538      	push	{r3, r4, r5, lr}
   191ea:	4604      	mov	r4, r0
   191ec:	460d      	mov	r5, r1
	unready_thread(thread);
   191ee:	f7ff ffdf 	bl	191b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   191f2:	7b63      	ldrb	r3, [r4, #13]
   191f4:	f043 0302 	orr.w	r3, r3, #2
   191f8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   191fa:	b34d      	cbz	r5, 19250 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   191fc:	4b15      	ldr	r3, [pc, #84]	; (19254 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   191fe:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19200:	429c      	cmp	r4, r3
   19202:	d109      	bne.n	19218 <add_to_waitq_locked+0x30>
   19204:	4914      	ldr	r1, [pc, #80]	; (19258 <add_to_waitq_locked+0x70>)
   19206:	4815      	ldr	r0, [pc, #84]	; (1925c <add_to_waitq_locked+0x74>)
   19208:	23ba      	movs	r3, #186	; 0xba
   1920a:	4a15      	ldr	r2, [pc, #84]	; (19260 <add_to_waitq_locked+0x78>)
   1920c:	f002 f80e 	bl	1b22c <assert_print>
   19210:	21ba      	movs	r1, #186	; 0xba
   19212:	4813      	ldr	r0, [pc, #76]	; (19260 <add_to_waitq_locked+0x78>)
   19214:	f002 f803 	bl	1b21e <assert_post_action>
	return list->head == list;
   19218:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1921a:	429d      	cmp	r5, r3
   1921c:	d109      	bne.n	19232 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   1921e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   19220:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   19224:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19226:	606c      	str	r4, [r5, #4]
}
   19228:	e012      	b.n	19250 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   1922a:	686a      	ldr	r2, [r5, #4]
   1922c:	4293      	cmp	r3, r2
   1922e:	d0f6      	beq.n	1921e <add_to_waitq_locked+0x36>
   19230:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19232:	2b00      	cmp	r3, #0
   19234:	d0f3      	beq.n	1921e <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   19236:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1923a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1923e:	428a      	cmp	r2, r1
   19240:	d0f3      	beq.n	1922a <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19242:	4291      	cmp	r1, r2
   19244:	ddf1      	ble.n	1922a <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   19246:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19248:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1924c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1924e:	605c      	str	r4, [r3, #4]
}
   19250:	bd38      	pop	{r3, r4, r5, pc}
   19252:	bf00      	nop
   19254:	20009428 	.word	0x20009428
   19258:	00023556 	.word	0x00023556
   1925c:	0001f995 	.word	0x0001f995
   19260:	0002350d 	.word	0x0002350d

00019264 <pend_locked>:
{
   19264:	b570      	push	{r4, r5, r6, lr}
   19266:	4615      	mov	r5, r2
   19268:	461c      	mov	r4, r3
   1926a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1926c:	f7ff ffbc 	bl	191e8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19270:	f1b4 3fff 	cmp.w	r4, #4294967295
   19274:	bf08      	it	eq
   19276:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1927a:	d008      	beq.n	1928e <pend_locked+0x2a>
   1927c:	462a      	mov	r2, r5
   1927e:	4623      	mov	r3, r4
   19280:	f106 0018 	add.w	r0, r6, #24
   19284:	4902      	ldr	r1, [pc, #8]	; (19290 <pend_locked+0x2c>)
}
   19286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1928a:	f000 bdf1 	b.w	19e70 <z_add_timeout>
   1928e:	bd70      	pop	{r4, r5, r6, pc}
   19290:	00019649 	.word	0x00019649

00019294 <z_pend_curr>:
{
   19294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19298:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   1929c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 19354 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   192a0:	4c2d      	ldr	r4, [pc, #180]	; (19358 <z_pend_curr+0xc4>)
{
   192a2:	4617      	mov	r7, r2
	pending_current = _current;
   192a4:	4b2d      	ldr	r3, [pc, #180]	; (1935c <z_pend_curr+0xc8>)
   192a6:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   192aa:	42a0      	cmp	r0, r4
{
   192ac:	4605      	mov	r5, r0
   192ae:	460e      	mov	r6, r1
	pending_current = _current;
   192b0:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   192b2:	d10b      	bne.n	192cc <z_pend_curr+0x38>
   192b4:	492a      	ldr	r1, [pc, #168]	; (19360 <z_pend_curr+0xcc>)
   192b6:	482b      	ldr	r0, [pc, #172]	; (19364 <z_pend_curr+0xd0>)
   192b8:	f240 334e 	movw	r3, #846	; 0x34e
   192bc:	4a2a      	ldr	r2, [pc, #168]	; (19368 <z_pend_curr+0xd4>)
   192be:	f001 ffb5 	bl	1b22c <assert_print>
   192c2:	f240 314e 	movw	r1, #846	; 0x34e
   192c6:	4828      	ldr	r0, [pc, #160]	; (19368 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192c8:	f001 ffa9 	bl	1b21e <assert_post_action>
	__asm__ volatile(
   192cc:	f04f 0220 	mov.w	r2, #32
   192d0:	f3ef 8311 	mrs	r3, BASEPRI
   192d4:	f382 8812 	msr	BASEPRI_MAX, r2
   192d8:	f3bf 8f6f 	isb	sy
   192dc:	4620      	mov	r0, r4
   192de:	f7fe f9e3 	bl	176a8 <z_spin_lock_valid>
   192e2:	b960      	cbnz	r0, 192fe <z_pend_curr+0x6a>
   192e4:	2394      	movs	r3, #148	; 0x94
   192e6:	4a21      	ldr	r2, [pc, #132]	; (1936c <z_pend_curr+0xd8>)
   192e8:	4921      	ldr	r1, [pc, #132]	; (19370 <z_pend_curr+0xdc>)
   192ea:	481e      	ldr	r0, [pc, #120]	; (19364 <z_pend_curr+0xd0>)
   192ec:	f001 ff9e 	bl	1b22c <assert_print>
   192f0:	4621      	mov	r1, r4
   192f2:	4820      	ldr	r0, [pc, #128]	; (19374 <z_pend_curr+0xe0>)
   192f4:	f001 ff9a 	bl	1b22c <assert_print>
   192f8:	2194      	movs	r1, #148	; 0x94
   192fa:	481c      	ldr	r0, [pc, #112]	; (1936c <z_pend_curr+0xd8>)
   192fc:	e7e4      	b.n	192c8 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   192fe:	4620      	mov	r0, r4
   19300:	f7fe f9ee 	bl	176e0 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   19304:	f8da 0008 	ldr.w	r0, [sl, #8]
   19308:	4642      	mov	r2, r8
   1930a:	464b      	mov	r3, r9
   1930c:	4639      	mov	r1, r7
   1930e:	f7ff ffa9 	bl	19264 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19312:	4628      	mov	r0, r5
   19314:	f7fe f9d6 	bl	176c4 <z_spin_unlock_valid>
   19318:	b958      	cbnz	r0, 19332 <z_pend_curr+0x9e>
   1931a:	4917      	ldr	r1, [pc, #92]	; (19378 <z_pend_curr+0xe4>)
   1931c:	23e1      	movs	r3, #225	; 0xe1
   1931e:	4a13      	ldr	r2, [pc, #76]	; (1936c <z_pend_curr+0xd8>)
   19320:	4810      	ldr	r0, [pc, #64]	; (19364 <z_pend_curr+0xd0>)
   19322:	f001 ff83 	bl	1b22c <assert_print>
   19326:	4629      	mov	r1, r5
   19328:	4814      	ldr	r0, [pc, #80]	; (1937c <z_pend_curr+0xe8>)
   1932a:	f001 ff7f 	bl	1b22c <assert_print>
   1932e:	21e1      	movs	r1, #225	; 0xe1
   19330:	e7e3      	b.n	192fa <z_pend_curr+0x66>
   19332:	4620      	mov	r0, r4
   19334:	f7fe f9c6 	bl	176c4 <z_spin_unlock_valid>
   19338:	b938      	cbnz	r0, 1934a <z_pend_curr+0xb6>
   1933a:	490f      	ldr	r1, [pc, #60]	; (19378 <z_pend_curr+0xe4>)
   1933c:	23e1      	movs	r3, #225	; 0xe1
   1933e:	4a0b      	ldr	r2, [pc, #44]	; (1936c <z_pend_curr+0xd8>)
   19340:	4808      	ldr	r0, [pc, #32]	; (19364 <z_pend_curr+0xd0>)
   19342:	f001 ff73 	bl	1b22c <assert_print>
   19346:	4621      	mov	r1, r4
   19348:	e7ee      	b.n	19328 <z_pend_curr+0x94>
   1934a:	4630      	mov	r0, r6
}
   1934c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19350:	f7f2 bfa2 	b.w	c298 <arch_swap>
   19354:	20009a9c 	.word	0x20009a9c
   19358:	20009ae4 	.word	0x20009ae4
   1935c:	20009ad8 	.word	0x20009ad8
   19360:	00023604 	.word	0x00023604
   19364:	0001f995 	.word	0x0001f995
   19368:	0002350d 	.word	0x0002350d
   1936c:	0001fd89 	.word	0x0001fd89
   19370:	0001fde2 	.word	0x0001fde2
   19374:	0001fdf7 	.word	0x0001fdf7
   19378:	0001fdb6 	.word	0x0001fdb6
   1937c:	0001fdcd 	.word	0x0001fdcd

00019380 <z_set_prio>:
{
   19380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19384:	4604      	mov	r4, r0
   19386:	460e      	mov	r6, r1
   19388:	f04f 0320 	mov.w	r3, #32
   1938c:	f3ef 8911 	mrs	r9, BASEPRI
   19390:	f383 8812 	msr	BASEPRI_MAX, r3
   19394:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19398:	4837      	ldr	r0, [pc, #220]	; (19478 <z_set_prio+0xf8>)
   1939a:	f7fe f985 	bl	176a8 <z_spin_lock_valid>
   1939e:	4607      	mov	r7, r0
   193a0:	b960      	cbnz	r0, 193bc <z_set_prio+0x3c>
   193a2:	2394      	movs	r3, #148	; 0x94
   193a4:	4a35      	ldr	r2, [pc, #212]	; (1947c <z_set_prio+0xfc>)
   193a6:	4936      	ldr	r1, [pc, #216]	; (19480 <z_set_prio+0x100>)
   193a8:	4836      	ldr	r0, [pc, #216]	; (19484 <z_set_prio+0x104>)
   193aa:	f001 ff3f 	bl	1b22c <assert_print>
   193ae:	4932      	ldr	r1, [pc, #200]	; (19478 <z_set_prio+0xf8>)
   193b0:	4835      	ldr	r0, [pc, #212]	; (19488 <z_set_prio+0x108>)
   193b2:	f001 ff3b 	bl	1b22c <assert_print>
   193b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193b8:	4830      	ldr	r0, [pc, #192]	; (1947c <z_set_prio+0xfc>)
   193ba:	e021      	b.n	19400 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   193bc:	482e      	ldr	r0, [pc, #184]	; (19478 <z_set_prio+0xf8>)
   193be:	f7fe f98f 	bl	176e0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   193c2:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   193c4:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   193c6:	06da      	lsls	r2, r3, #27
   193c8:	d11c      	bne.n	19404 <z_set_prio+0x84>
	return node->next != NULL;
   193ca:	69a5      	ldr	r5, [r4, #24]
   193cc:	b9d5      	cbnz	r5, 19404 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   193ce:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1948c <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   193d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   193d6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   193d8:	4621      	mov	r1, r4
   193da:	4640      	mov	r0, r8
   193dc:	f7ff fe00 	bl	18fe0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   193e0:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   193e2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   193e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   193e8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   193ea:	4b29      	ldr	r3, [pc, #164]	; (19490 <z_set_prio+0x110>)
   193ec:	429c      	cmp	r4, r3
   193ee:	d11b      	bne.n	19428 <z_set_prio+0xa8>
   193f0:	4928      	ldr	r1, [pc, #160]	; (19494 <z_set_prio+0x114>)
   193f2:	4824      	ldr	r0, [pc, #144]	; (19484 <z_set_prio+0x104>)
   193f4:	23ba      	movs	r3, #186	; 0xba
   193f6:	4a28      	ldr	r2, [pc, #160]	; (19498 <z_set_prio+0x118>)
   193f8:	f001 ff18 	bl	1b22c <assert_print>
   193fc:	21ba      	movs	r1, #186	; 0xba
   193fe:	4826      	ldr	r0, [pc, #152]	; (19498 <z_set_prio+0x118>)
   19400:	f001 ff0d 	bl	1b21e <assert_post_action>
   19404:	2700      	movs	r7, #0
			thread->base.prio = prio;
   19406:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19408:	481b      	ldr	r0, [pc, #108]	; (19478 <z_set_prio+0xf8>)
   1940a:	f7fe f95b 	bl	176c4 <z_spin_unlock_valid>
   1940e:	bb58      	cbnz	r0, 19468 <z_set_prio+0xe8>
   19410:	23c2      	movs	r3, #194	; 0xc2
   19412:	4a1a      	ldr	r2, [pc, #104]	; (1947c <z_set_prio+0xfc>)
   19414:	4921      	ldr	r1, [pc, #132]	; (1949c <z_set_prio+0x11c>)
   19416:	481b      	ldr	r0, [pc, #108]	; (19484 <z_set_prio+0x104>)
   19418:	f001 ff08 	bl	1b22c <assert_print>
   1941c:	4916      	ldr	r1, [pc, #88]	; (19478 <z_set_prio+0xf8>)
   1941e:	4820      	ldr	r0, [pc, #128]	; (194a0 <z_set_prio+0x120>)
   19420:	f001 ff04 	bl	1b22c <assert_print>
   19424:	21c2      	movs	r1, #194	; 0xc2
   19426:	e7c7      	b.n	193b8 <z_set_prio+0x38>
	return list->head == list;
   19428:	4643      	mov	r3, r8
   1942a:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1942e:	4542      	cmp	r2, r8
   19430:	bf18      	it	ne
   19432:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   19434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19436:	b925      	cbnz	r5, 19442 <z_set_prio+0xc2>
	node->prev = tail;
   19438:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   1943c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1943e:	625c      	str	r4, [r3, #36]	; 0x24
}
   19440:	e00a      	b.n	19458 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   19442:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   19446:	428e      	cmp	r6, r1
   19448:	d00a      	beq.n	19460 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1944a:	42b1      	cmp	r1, r6
   1944c:	dd08      	ble.n	19460 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   1944e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   19450:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   19454:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   19456:	606c      	str	r4, [r5, #4]
			update_cache(1);
   19458:	2001      	movs	r0, #1
   1945a:	f7ff fadf 	bl	18a1c <update_cache>
   1945e:	e7d3      	b.n	19408 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   19460:	42aa      	cmp	r2, r5
   19462:	d0e9      	beq.n	19438 <z_set_prio+0xb8>
   19464:	682d      	ldr	r5, [r5, #0]
   19466:	e7e6      	b.n	19436 <z_set_prio+0xb6>
	__asm__ volatile(
   19468:	f389 8811 	msr	BASEPRI, r9
   1946c:	f3bf 8f6f 	isb	sy
}
   19470:	4638      	mov	r0, r7
   19472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19476:	bf00      	nop
   19478:	20009ae4 	.word	0x20009ae4
   1947c:	0001fd89 	.word	0x0001fd89
   19480:	0001fde2 	.word	0x0001fde2
   19484:	0001f995 	.word	0x0001f995
   19488:	0001fdf7 	.word	0x0001fdf7
   1948c:	20009abc 	.word	0x20009abc
   19490:	20009428 	.word	0x20009428
   19494:	00023556 	.word	0x00023556
   19498:	0002350d 	.word	0x0002350d
   1949c:	0001fdb6 	.word	0x0001fdb6
   194a0:	0001fdcd 	.word	0x0001fdcd

000194a4 <z_impl_k_thread_suspend>:
{
   194a4:	b570      	push	{r4, r5, r6, lr}
   194a6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   194a8:	3018      	adds	r0, #24
   194aa:	f000 fda7 	bl	19ffc <z_abort_timeout>
	__asm__ volatile(
   194ae:	f04f 0320 	mov.w	r3, #32
   194b2:	f3ef 8611 	mrs	r6, BASEPRI
   194b6:	f383 8812 	msr	BASEPRI_MAX, r3
   194ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   194be:	4824      	ldr	r0, [pc, #144]	; (19550 <z_impl_k_thread_suspend+0xac>)
   194c0:	f7fe f8f2 	bl	176a8 <z_spin_lock_valid>
   194c4:	b968      	cbnz	r0, 194e2 <z_impl_k_thread_suspend+0x3e>
   194c6:	2394      	movs	r3, #148	; 0x94
   194c8:	4a22      	ldr	r2, [pc, #136]	; (19554 <z_impl_k_thread_suspend+0xb0>)
   194ca:	4923      	ldr	r1, [pc, #140]	; (19558 <z_impl_k_thread_suspend+0xb4>)
   194cc:	4823      	ldr	r0, [pc, #140]	; (1955c <z_impl_k_thread_suspend+0xb8>)
   194ce:	f001 fead 	bl	1b22c <assert_print>
   194d2:	491f      	ldr	r1, [pc, #124]	; (19550 <z_impl_k_thread_suspend+0xac>)
   194d4:	4822      	ldr	r0, [pc, #136]	; (19560 <z_impl_k_thread_suspend+0xbc>)
   194d6:	f001 fea9 	bl	1b22c <assert_print>
   194da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   194dc:	481d      	ldr	r0, [pc, #116]	; (19554 <z_impl_k_thread_suspend+0xb0>)
   194de:	f001 fe9e 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   194e2:	481b      	ldr	r0, [pc, #108]	; (19550 <z_impl_k_thread_suspend+0xac>)
   194e4:	f7fe f8fc 	bl	176e0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   194e8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   194ec:	7b63      	ldrb	r3, [r4, #13]
   194ee:	2a00      	cmp	r2, #0
   194f0:	da06      	bge.n	19500 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   194f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   194f6:	4621      	mov	r1, r4
   194f8:	481a      	ldr	r0, [pc, #104]	; (19564 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   194fa:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   194fc:	f7ff fd70 	bl	18fe0 <z_priq_dumb_remove>
		update_cache(thread == _current);
   19500:	4d19      	ldr	r5, [pc, #100]	; (19568 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19502:	7b63      	ldrb	r3, [r4, #13]
   19504:	68a8      	ldr	r0, [r5, #8]
   19506:	f043 0310 	orr.w	r3, r3, #16
   1950a:	7363      	strb	r3, [r4, #13]
   1950c:	1b03      	subs	r3, r0, r4
   1950e:	4258      	negs	r0, r3
   19510:	4158      	adcs	r0, r3
   19512:	f7ff fa83 	bl	18a1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19516:	480e      	ldr	r0, [pc, #56]	; (19550 <z_impl_k_thread_suspend+0xac>)
   19518:	f7fe f8d4 	bl	176c4 <z_spin_unlock_valid>
   1951c:	b958      	cbnz	r0, 19536 <z_impl_k_thread_suspend+0x92>
   1951e:	23c2      	movs	r3, #194	; 0xc2
   19520:	4a0c      	ldr	r2, [pc, #48]	; (19554 <z_impl_k_thread_suspend+0xb0>)
   19522:	4912      	ldr	r1, [pc, #72]	; (1956c <z_impl_k_thread_suspend+0xc8>)
   19524:	480d      	ldr	r0, [pc, #52]	; (1955c <z_impl_k_thread_suspend+0xb8>)
   19526:	f001 fe81 	bl	1b22c <assert_print>
   1952a:	4909      	ldr	r1, [pc, #36]	; (19550 <z_impl_k_thread_suspend+0xac>)
   1952c:	4810      	ldr	r0, [pc, #64]	; (19570 <z_impl_k_thread_suspend+0xcc>)
   1952e:	f001 fe7d 	bl	1b22c <assert_print>
   19532:	21c2      	movs	r1, #194	; 0xc2
   19534:	e7d2      	b.n	194dc <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   19536:	f386 8811 	msr	BASEPRI, r6
   1953a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1953e:	68ab      	ldr	r3, [r5, #8]
   19540:	42a3      	cmp	r3, r4
   19542:	d103      	bne.n	1954c <z_impl_k_thread_suspend+0xa8>
}
   19544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19548:	f005 b8d6 	b.w	1e6f8 <z_reschedule_unlocked>
}
   1954c:	bd70      	pop	{r4, r5, r6, pc}
   1954e:	bf00      	nop
   19550:	20009ae4 	.word	0x20009ae4
   19554:	0001fd89 	.word	0x0001fd89
   19558:	0001fde2 	.word	0x0001fde2
   1955c:	0001f995 	.word	0x0001f995
   19560:	0001fdf7 	.word	0x0001fdf7
   19564:	20009abc 	.word	0x20009abc
   19568:	20009a9c 	.word	0x20009a9c
   1956c:	0001fdb6 	.word	0x0001fdb6
   19570:	0001fdcd 	.word	0x0001fdcd

00019574 <unpend_thread_no_timeout>:
{
   19574:	b510      	push	{r4, lr}
   19576:	4604      	mov	r4, r0
   19578:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   1957a:	b958      	cbnz	r0, 19594 <unpend_thread_no_timeout+0x20>
   1957c:	490a      	ldr	r1, [pc, #40]	; (195a8 <unpend_thread_no_timeout+0x34>)
   1957e:	480b      	ldr	r0, [pc, #44]	; (195ac <unpend_thread_no_timeout+0x38>)
   19580:	f240 23d6 	movw	r3, #726	; 0x2d6
   19584:	4a0a      	ldr	r2, [pc, #40]	; (195b0 <unpend_thread_no_timeout+0x3c>)
   19586:	f001 fe51 	bl	1b22c <assert_print>
   1958a:	f240 21d6 	movw	r1, #726	; 0x2d6
   1958e:	4808      	ldr	r0, [pc, #32]	; (195b0 <unpend_thread_no_timeout+0x3c>)
   19590:	f001 fe45 	bl	1b21e <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   19594:	4621      	mov	r1, r4
   19596:	f7ff fd23 	bl	18fe0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1959a:	7b63      	ldrb	r3, [r4, #13]
   1959c:	f023 0302 	bic.w	r3, r3, #2
   195a0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   195a2:	2300      	movs	r3, #0
   195a4:	60a3      	str	r3, [r4, #8]
}
   195a6:	bd10      	pop	{r4, pc}
   195a8:	0002363b 	.word	0x0002363b
   195ac:	0001f995 	.word	0x0001f995
   195b0:	0002350d 	.word	0x0002350d

000195b4 <z_unpend_thread>:
{
   195b4:	b538      	push	{r3, r4, r5, lr}
   195b6:	4604      	mov	r4, r0
	__asm__ volatile(
   195b8:	f04f 0320 	mov.w	r3, #32
   195bc:	f3ef 8511 	mrs	r5, BASEPRI
   195c0:	f383 8812 	msr	BASEPRI_MAX, r3
   195c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   195c8:	4818      	ldr	r0, [pc, #96]	; (1962c <z_unpend_thread+0x78>)
   195ca:	f7fe f86d 	bl	176a8 <z_spin_lock_valid>
   195ce:	b968      	cbnz	r0, 195ec <z_unpend_thread+0x38>
   195d0:	2394      	movs	r3, #148	; 0x94
   195d2:	4a17      	ldr	r2, [pc, #92]	; (19630 <z_unpend_thread+0x7c>)
   195d4:	4917      	ldr	r1, [pc, #92]	; (19634 <z_unpend_thread+0x80>)
   195d6:	4818      	ldr	r0, [pc, #96]	; (19638 <z_unpend_thread+0x84>)
   195d8:	f001 fe28 	bl	1b22c <assert_print>
   195dc:	4913      	ldr	r1, [pc, #76]	; (1962c <z_unpend_thread+0x78>)
   195de:	4817      	ldr	r0, [pc, #92]	; (1963c <z_unpend_thread+0x88>)
   195e0:	f001 fe24 	bl	1b22c <assert_print>
   195e4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   195e6:	4812      	ldr	r0, [pc, #72]	; (19630 <z_unpend_thread+0x7c>)
   195e8:	f001 fe19 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   195ec:	480f      	ldr	r0, [pc, #60]	; (1962c <z_unpend_thread+0x78>)
   195ee:	f7fe f877 	bl	176e0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   195f2:	4620      	mov	r0, r4
   195f4:	f7ff ffbe 	bl	19574 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   195f8:	480c      	ldr	r0, [pc, #48]	; (1962c <z_unpend_thread+0x78>)
   195fa:	f7fe f863 	bl	176c4 <z_spin_unlock_valid>
   195fe:	b958      	cbnz	r0, 19618 <z_unpend_thread+0x64>
   19600:	23c2      	movs	r3, #194	; 0xc2
   19602:	4a0b      	ldr	r2, [pc, #44]	; (19630 <z_unpend_thread+0x7c>)
   19604:	490e      	ldr	r1, [pc, #56]	; (19640 <z_unpend_thread+0x8c>)
   19606:	480c      	ldr	r0, [pc, #48]	; (19638 <z_unpend_thread+0x84>)
   19608:	f001 fe10 	bl	1b22c <assert_print>
   1960c:	4907      	ldr	r1, [pc, #28]	; (1962c <z_unpend_thread+0x78>)
   1960e:	480d      	ldr	r0, [pc, #52]	; (19644 <z_unpend_thread+0x90>)
   19610:	f001 fe0c 	bl	1b22c <assert_print>
   19614:	21c2      	movs	r1, #194	; 0xc2
   19616:	e7e6      	b.n	195e6 <z_unpend_thread+0x32>
	__asm__ volatile(
   19618:	f385 8811 	msr	BASEPRI, r5
   1961c:	f3bf 8f6f 	isb	sy
   19620:	f104 0018 	add.w	r0, r4, #24
}
   19624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19628:	f000 bce8 	b.w	19ffc <z_abort_timeout>
   1962c:	20009ae4 	.word	0x20009ae4
   19630:	0001fd89 	.word	0x0001fd89
   19634:	0001fde2 	.word	0x0001fde2
   19638:	0001f995 	.word	0x0001f995
   1963c:	0001fdf7 	.word	0x0001fdf7
   19640:	0001fdb6 	.word	0x0001fdb6
   19644:	0001fdcd 	.word	0x0001fdcd

00019648 <z_thread_timeout>:
{
   19648:	b570      	push	{r4, r5, r6, lr}
   1964a:	4604      	mov	r4, r0
	__asm__ volatile(
   1964c:	f04f 0320 	mov.w	r3, #32
   19650:	f3ef 8611 	mrs	r6, BASEPRI
   19654:	f383 8812 	msr	BASEPRI_MAX, r3
   19658:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1965c:	481f      	ldr	r0, [pc, #124]	; (196dc <z_thread_timeout+0x94>)
   1965e:	f7fe f823 	bl	176a8 <z_spin_lock_valid>
   19662:	b968      	cbnz	r0, 19680 <z_thread_timeout+0x38>
   19664:	2394      	movs	r3, #148	; 0x94
   19666:	4a1e      	ldr	r2, [pc, #120]	; (196e0 <z_thread_timeout+0x98>)
   19668:	491e      	ldr	r1, [pc, #120]	; (196e4 <z_thread_timeout+0x9c>)
   1966a:	481f      	ldr	r0, [pc, #124]	; (196e8 <z_thread_timeout+0xa0>)
   1966c:	f001 fdde 	bl	1b22c <assert_print>
   19670:	491a      	ldr	r1, [pc, #104]	; (196dc <z_thread_timeout+0x94>)
   19672:	481e      	ldr	r0, [pc, #120]	; (196ec <z_thread_timeout+0xa4>)
   19674:	f001 fdda 	bl	1b22c <assert_print>
   19678:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1967a:	4819      	ldr	r0, [pc, #100]	; (196e0 <z_thread_timeout+0x98>)
   1967c:	f001 fdcf 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   19680:	4816      	ldr	r0, [pc, #88]	; (196dc <z_thread_timeout+0x94>)
   19682:	f7fe f82d 	bl	176e0 <z_spin_lock_set_owner>
		if (!killed) {
   19686:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1968a:	f013 0f28 	tst.w	r3, #40	; 0x28
   1968e:	d110      	bne.n	196b2 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   19690:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   19694:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   19698:	b113      	cbz	r3, 196a0 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   1969a:	4628      	mov	r0, r5
   1969c:	f7ff ff6a 	bl	19574 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   196a0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   196a4:	4628      	mov	r0, r5
   196a6:	f023 0314 	bic.w	r3, r3, #20
   196aa:	f804 3c0b 	strb.w	r3, [r4, #-11]
   196ae:	f7ff f9e9 	bl	18a84 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   196b2:	480a      	ldr	r0, [pc, #40]	; (196dc <z_thread_timeout+0x94>)
   196b4:	f7fe f806 	bl	176c4 <z_spin_unlock_valid>
   196b8:	b958      	cbnz	r0, 196d2 <z_thread_timeout+0x8a>
   196ba:	23c2      	movs	r3, #194	; 0xc2
   196bc:	4a08      	ldr	r2, [pc, #32]	; (196e0 <z_thread_timeout+0x98>)
   196be:	490c      	ldr	r1, [pc, #48]	; (196f0 <z_thread_timeout+0xa8>)
   196c0:	4809      	ldr	r0, [pc, #36]	; (196e8 <z_thread_timeout+0xa0>)
   196c2:	f001 fdb3 	bl	1b22c <assert_print>
   196c6:	4905      	ldr	r1, [pc, #20]	; (196dc <z_thread_timeout+0x94>)
   196c8:	480a      	ldr	r0, [pc, #40]	; (196f4 <z_thread_timeout+0xac>)
   196ca:	f001 fdaf 	bl	1b22c <assert_print>
   196ce:	21c2      	movs	r1, #194	; 0xc2
   196d0:	e7d3      	b.n	1967a <z_thread_timeout+0x32>
	__asm__ volatile(
   196d2:	f386 8811 	msr	BASEPRI, r6
   196d6:	f3bf 8f6f 	isb	sy
}
   196da:	bd70      	pop	{r4, r5, r6, pc}
   196dc:	20009ae4 	.word	0x20009ae4
   196e0:	0001fd89 	.word	0x0001fd89
   196e4:	0001fde2 	.word	0x0001fde2
   196e8:	0001f995 	.word	0x0001f995
   196ec:	0001fdf7 	.word	0x0001fdf7
   196f0:	0001fdb6 	.word	0x0001fdb6
   196f4:	0001fdcd 	.word	0x0001fdcd

000196f8 <z_unpend1_no_timeout>:
{
   196f8:	b570      	push	{r4, r5, r6, lr}
   196fa:	4605      	mov	r5, r0
	__asm__ volatile(
   196fc:	f04f 0320 	mov.w	r3, #32
   19700:	f3ef 8611 	mrs	r6, BASEPRI
   19704:	f383 8812 	msr	BASEPRI_MAX, r3
   19708:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1970c:	4819      	ldr	r0, [pc, #100]	; (19774 <z_unpend1_no_timeout+0x7c>)
   1970e:	f7fd ffcb 	bl	176a8 <z_spin_lock_valid>
   19712:	b968      	cbnz	r0, 19730 <z_unpend1_no_timeout+0x38>
   19714:	2394      	movs	r3, #148	; 0x94
   19716:	4a18      	ldr	r2, [pc, #96]	; (19778 <z_unpend1_no_timeout+0x80>)
   19718:	4918      	ldr	r1, [pc, #96]	; (1977c <z_unpend1_no_timeout+0x84>)
   1971a:	4819      	ldr	r0, [pc, #100]	; (19780 <z_unpend1_no_timeout+0x88>)
   1971c:	f001 fd86 	bl	1b22c <assert_print>
   19720:	4914      	ldr	r1, [pc, #80]	; (19774 <z_unpend1_no_timeout+0x7c>)
   19722:	4818      	ldr	r0, [pc, #96]	; (19784 <z_unpend1_no_timeout+0x8c>)
   19724:	f001 fd82 	bl	1b22c <assert_print>
   19728:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1972a:	4813      	ldr	r0, [pc, #76]	; (19778 <z_unpend1_no_timeout+0x80>)
   1972c:	f001 fd77 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   19730:	4810      	ldr	r0, [pc, #64]	; (19774 <z_unpend1_no_timeout+0x7c>)
   19732:	f7fd ffd5 	bl	176e0 <z_spin_lock_set_owner>
	return list->head == list;
   19736:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19738:	42a5      	cmp	r5, r4
   1973a:	d013      	beq.n	19764 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   1973c:	b114      	cbz	r4, 19744 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   1973e:	4620      	mov	r0, r4
   19740:	f7ff ff18 	bl	19574 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19744:	480b      	ldr	r0, [pc, #44]	; (19774 <z_unpend1_no_timeout+0x7c>)
   19746:	f7fd ffbd 	bl	176c4 <z_spin_unlock_valid>
   1974a:	b968      	cbnz	r0, 19768 <z_unpend1_no_timeout+0x70>
   1974c:	23c2      	movs	r3, #194	; 0xc2
   1974e:	4a0a      	ldr	r2, [pc, #40]	; (19778 <z_unpend1_no_timeout+0x80>)
   19750:	490d      	ldr	r1, [pc, #52]	; (19788 <z_unpend1_no_timeout+0x90>)
   19752:	480b      	ldr	r0, [pc, #44]	; (19780 <z_unpend1_no_timeout+0x88>)
   19754:	f001 fd6a 	bl	1b22c <assert_print>
   19758:	4906      	ldr	r1, [pc, #24]	; (19774 <z_unpend1_no_timeout+0x7c>)
   1975a:	480c      	ldr	r0, [pc, #48]	; (1978c <z_unpend1_no_timeout+0x94>)
   1975c:	f001 fd66 	bl	1b22c <assert_print>
   19760:	21c2      	movs	r1, #194	; 0xc2
   19762:	e7e2      	b.n	1972a <z_unpend1_no_timeout+0x32>
   19764:	2400      	movs	r4, #0
   19766:	e7ed      	b.n	19744 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   19768:	f386 8811 	msr	BASEPRI, r6
   1976c:	f3bf 8f6f 	isb	sy
}
   19770:	4620      	mov	r0, r4
   19772:	bd70      	pop	{r4, r5, r6, pc}
   19774:	20009ae4 	.word	0x20009ae4
   19778:	0001fd89 	.word	0x0001fd89
   1977c:	0001fde2 	.word	0x0001fde2
   19780:	0001f995 	.word	0x0001f995
   19784:	0001fdf7 	.word	0x0001fdf7
   19788:	0001fdb6 	.word	0x0001fdb6
   1978c:	0001fdcd 	.word	0x0001fdcd

00019790 <z_unpend_first_thread>:
{
   19790:	b570      	push	{r4, r5, r6, lr}
   19792:	4605      	mov	r5, r0
	__asm__ volatile(
   19794:	f04f 0320 	mov.w	r3, #32
   19798:	f3ef 8611 	mrs	r6, BASEPRI
   1979c:	f383 8812 	msr	BASEPRI_MAX, r3
   197a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   197a4:	481b      	ldr	r0, [pc, #108]	; (19814 <z_unpend_first_thread+0x84>)
   197a6:	f7fd ff7f 	bl	176a8 <z_spin_lock_valid>
   197aa:	b968      	cbnz	r0, 197c8 <z_unpend_first_thread+0x38>
   197ac:	2394      	movs	r3, #148	; 0x94
   197ae:	4a1a      	ldr	r2, [pc, #104]	; (19818 <z_unpend_first_thread+0x88>)
   197b0:	491a      	ldr	r1, [pc, #104]	; (1981c <z_unpend_first_thread+0x8c>)
   197b2:	481b      	ldr	r0, [pc, #108]	; (19820 <z_unpend_first_thread+0x90>)
   197b4:	f001 fd3a 	bl	1b22c <assert_print>
   197b8:	4916      	ldr	r1, [pc, #88]	; (19814 <z_unpend_first_thread+0x84>)
   197ba:	481a      	ldr	r0, [pc, #104]	; (19824 <z_unpend_first_thread+0x94>)
   197bc:	f001 fd36 	bl	1b22c <assert_print>
   197c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197c2:	4815      	ldr	r0, [pc, #84]	; (19818 <z_unpend_first_thread+0x88>)
   197c4:	f001 fd2b 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   197c8:	4812      	ldr	r0, [pc, #72]	; (19814 <z_unpend_first_thread+0x84>)
   197ca:	f7fd ff89 	bl	176e0 <z_spin_lock_set_owner>
	return list->head == list;
   197ce:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   197d0:	42a5      	cmp	r5, r4
   197d2:	d017      	beq.n	19804 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   197d4:	b134      	cbz	r4, 197e4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   197d6:	4620      	mov	r0, r4
   197d8:	f7ff fecc 	bl	19574 <unpend_thread_no_timeout>
   197dc:	f104 0018 	add.w	r0, r4, #24
   197e0:	f000 fc0c 	bl	19ffc <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197e4:	480b      	ldr	r0, [pc, #44]	; (19814 <z_unpend_first_thread+0x84>)
   197e6:	f7fd ff6d 	bl	176c4 <z_spin_unlock_valid>
   197ea:	b968      	cbnz	r0, 19808 <z_unpend_first_thread+0x78>
   197ec:	23c2      	movs	r3, #194	; 0xc2
   197ee:	4a0a      	ldr	r2, [pc, #40]	; (19818 <z_unpend_first_thread+0x88>)
   197f0:	490d      	ldr	r1, [pc, #52]	; (19828 <z_unpend_first_thread+0x98>)
   197f2:	480b      	ldr	r0, [pc, #44]	; (19820 <z_unpend_first_thread+0x90>)
   197f4:	f001 fd1a 	bl	1b22c <assert_print>
   197f8:	4906      	ldr	r1, [pc, #24]	; (19814 <z_unpend_first_thread+0x84>)
   197fa:	480c      	ldr	r0, [pc, #48]	; (1982c <z_unpend_first_thread+0x9c>)
   197fc:	f001 fd16 	bl	1b22c <assert_print>
   19800:	21c2      	movs	r1, #194	; 0xc2
   19802:	e7de      	b.n	197c2 <z_unpend_first_thread+0x32>
   19804:	2400      	movs	r4, #0
   19806:	e7ed      	b.n	197e4 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   19808:	f386 8811 	msr	BASEPRI, r6
   1980c:	f3bf 8f6f 	isb	sy
}
   19810:	4620      	mov	r0, r4
   19812:	bd70      	pop	{r4, r5, r6, pc}
   19814:	20009ae4 	.word	0x20009ae4
   19818:	0001fd89 	.word	0x0001fd89
   1981c:	0001fde2 	.word	0x0001fde2
   19820:	0001f995 	.word	0x0001f995
   19824:	0001fdf7 	.word	0x0001fdf7
   19828:	0001fdb6 	.word	0x0001fdb6
   1982c:	0001fdcd 	.word	0x0001fdcd

00019830 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19830:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   19832:	4b04      	ldr	r3, [pc, #16]	; (19844 <z_sched_init+0x14>)
   19834:	4608      	mov	r0, r1
   19836:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1983a:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1983e:	f7ff b96b 	b.w	18b18 <k_sched_time_slice_set>
   19842:	bf00      	nop
   19844:	20009a9c 	.word	0x20009a9c

00019848 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   19848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1984a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1984e:	b16b      	cbz	r3, 1986c <z_impl_k_yield+0x24>
   19850:	493c      	ldr	r1, [pc, #240]	; (19944 <z_impl_k_yield+0xfc>)
   19852:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   19856:	4a3c      	ldr	r2, [pc, #240]	; (19948 <z_impl_k_yield+0x100>)
   19858:	483c      	ldr	r0, [pc, #240]	; (1994c <z_impl_k_yield+0x104>)
   1985a:	f001 fce7 	bl	1b22c <assert_print>
   1985e:	483c      	ldr	r0, [pc, #240]	; (19950 <z_impl_k_yield+0x108>)
   19860:	f001 fce4 	bl	1b22c <assert_print>
   19864:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19868:	4837      	ldr	r0, [pc, #220]	; (19948 <z_impl_k_yield+0x100>)
   1986a:	e017      	b.n	1989c <z_impl_k_yield+0x54>
	__asm__ volatile(
   1986c:	f04f 0320 	mov.w	r3, #32
   19870:	f3ef 8611 	mrs	r6, BASEPRI
   19874:	f383 8812 	msr	BASEPRI_MAX, r3
   19878:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1987c:	4835      	ldr	r0, [pc, #212]	; (19954 <z_impl_k_yield+0x10c>)
   1987e:	f7fd ff13 	bl	176a8 <z_spin_lock_valid>
   19882:	b968      	cbnz	r0, 198a0 <z_impl_k_yield+0x58>
   19884:	2394      	movs	r3, #148	; 0x94
   19886:	4a34      	ldr	r2, [pc, #208]	; (19958 <z_impl_k_yield+0x110>)
   19888:	4934      	ldr	r1, [pc, #208]	; (1995c <z_impl_k_yield+0x114>)
   1988a:	4830      	ldr	r0, [pc, #192]	; (1994c <z_impl_k_yield+0x104>)
   1988c:	f001 fcce 	bl	1b22c <assert_print>
   19890:	4930      	ldr	r1, [pc, #192]	; (19954 <z_impl_k_yield+0x10c>)
   19892:	4833      	ldr	r0, [pc, #204]	; (19960 <z_impl_k_yield+0x118>)
   19894:	f001 fcca 	bl	1b22c <assert_print>
   19898:	2194      	movs	r1, #148	; 0x94
   1989a:	482f      	ldr	r0, [pc, #188]	; (19958 <z_impl_k_yield+0x110>)
   1989c:	f001 fcbf 	bl	1b21e <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   198a0:	4c30      	ldr	r4, [pc, #192]	; (19964 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   198a2:	482c      	ldr	r0, [pc, #176]	; (19954 <z_impl_k_yield+0x10c>)
   198a4:	f7fd ff1c 	bl	176e0 <z_spin_lock_set_owner>
   198a8:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   198aa:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   198ae:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   198b0:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   198b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   198b6:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   198b8:	f7ff fb92 	bl	18fe0 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   198bc:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   198be:	7b5a      	ldrb	r2, [r3, #13]
   198c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   198c4:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   198c6:	4a28      	ldr	r2, [pc, #160]	; (19968 <z_impl_k_yield+0x120>)
   198c8:	4293      	cmp	r3, r2
   198ca:	d107      	bne.n	198dc <z_impl_k_yield+0x94>
   198cc:	4927      	ldr	r1, [pc, #156]	; (1996c <z_impl_k_yield+0x124>)
   198ce:	23ba      	movs	r3, #186	; 0xba
   198d0:	4a1d      	ldr	r2, [pc, #116]	; (19948 <z_impl_k_yield+0x100>)
   198d2:	481e      	ldr	r0, [pc, #120]	; (1994c <z_impl_k_yield+0x104>)
   198d4:	f001 fcaa 	bl	1b22c <assert_print>
   198d8:	21ba      	movs	r1, #186	; 0xba
   198da:	e7c5      	b.n	19868 <z_impl_k_yield+0x20>
	return list->head == list;
   198dc:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   198de:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   198e0:	42aa      	cmp	r2, r5
   198e2:	bf08      	it	eq
   198e4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   198e6:	b922      	cbnz	r2, 198f2 <z_impl_k_yield+0xaa>
	node->prev = tail;
   198e8:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   198ec:	600b      	str	r3, [r1, #0]
	list->tail = node;
   198ee:	6263      	str	r3, [r4, #36]	; 0x24
}
   198f0:	e00c      	b.n	1990c <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   198f2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   198f6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   198fa:	42b8      	cmp	r0, r7
   198fc:	d019      	beq.n	19932 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   198fe:	4287      	cmp	r7, r0
   19900:	dd17      	ble.n	19932 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   19902:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   19904:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   19908:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1990a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1990c:	2001      	movs	r0, #1
   1990e:	f7ff f885 	bl	18a1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19912:	4810      	ldr	r0, [pc, #64]	; (19954 <z_impl_k_yield+0x10c>)
   19914:	f7fd fed6 	bl	176c4 <z_spin_unlock_valid>
   19918:	b978      	cbnz	r0, 1993a <z_impl_k_yield+0xf2>
   1991a:	23e1      	movs	r3, #225	; 0xe1
   1991c:	4a0e      	ldr	r2, [pc, #56]	; (19958 <z_impl_k_yield+0x110>)
   1991e:	4914      	ldr	r1, [pc, #80]	; (19970 <z_impl_k_yield+0x128>)
   19920:	480a      	ldr	r0, [pc, #40]	; (1994c <z_impl_k_yield+0x104>)
   19922:	f001 fc83 	bl	1b22c <assert_print>
   19926:	490b      	ldr	r1, [pc, #44]	; (19954 <z_impl_k_yield+0x10c>)
   19928:	4812      	ldr	r0, [pc, #72]	; (19974 <z_impl_k_yield+0x12c>)
   1992a:	f001 fc7f 	bl	1b22c <assert_print>
   1992e:	21e1      	movs	r1, #225	; 0xe1
   19930:	e7b3      	b.n	1989a <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   19932:	428a      	cmp	r2, r1
   19934:	d0d8      	beq.n	198e8 <z_impl_k_yield+0xa0>
   19936:	6812      	ldr	r2, [r2, #0]
   19938:	e7d5      	b.n	198e6 <z_impl_k_yield+0x9e>
   1993a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1993c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19940:	f7f2 bcaa 	b.w	c298 <arch_swap>
   19944:	000232a0 	.word	0x000232a0
   19948:	0002350d 	.word	0x0002350d
   1994c:	0001f995 	.word	0x0001f995
   19950:	00022009 	.word	0x00022009
   19954:	20009ae4 	.word	0x20009ae4
   19958:	0001fd89 	.word	0x0001fd89
   1995c:	0001fde2 	.word	0x0001fde2
   19960:	0001fdf7 	.word	0x0001fdf7
   19964:	20009a9c 	.word	0x20009a9c
   19968:	20009428 	.word	0x20009428
   1996c:	00023556 	.word	0x00023556
   19970:	0001fdb6 	.word	0x0001fdb6
   19974:	0001fdcd 	.word	0x0001fdcd

00019978 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   19978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1997c:	4605      	mov	r5, r0
   1997e:	460e      	mov	r6, r1
   19980:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   19984:	b16b      	cbz	r3, 199a2 <z_tick_sleep+0x2a>
   19986:	493f      	ldr	r1, [pc, #252]	; (19a84 <z_tick_sleep+0x10c>)
   19988:	f240 538c 	movw	r3, #1420	; 0x58c
   1998c:	4a3e      	ldr	r2, [pc, #248]	; (19a88 <z_tick_sleep+0x110>)
   1998e:	483f      	ldr	r0, [pc, #252]	; (19a8c <z_tick_sleep+0x114>)
   19990:	f001 fc4c 	bl	1b22c <assert_print>
   19994:	483e      	ldr	r0, [pc, #248]	; (19a90 <z_tick_sleep+0x118>)
   19996:	f001 fc49 	bl	1b22c <assert_print>
   1999a:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1999e:	483a      	ldr	r0, [pc, #232]	; (19a88 <z_tick_sleep+0x110>)
   199a0:	e025      	b.n	199ee <z_tick_sleep+0x76>
	if (ticks == 0) {
   199a2:	ea50 0301 	orrs.w	r3, r0, r1
   199a6:	d103      	bne.n	199b0 <z_tick_sleep+0x38>
	z_impl_k_yield();
   199a8:	f7ff ff4e 	bl	19848 <z_impl_k_yield>
		return 0;
   199ac:	2000      	movs	r0, #0
   199ae:	e066      	b.n	19a7e <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   199b0:	1c82      	adds	r2, r0, #2
   199b2:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   199b6:	db1c      	blt.n	199f2 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   199b8:	f004 feb8 	bl	1e72c <sys_clock_tick_get_32>
   199bc:	1944      	adds	r4, r0, r5
   199be:	f04f 0320 	mov.w	r3, #32
   199c2:	f3ef 8811 	mrs	r8, BASEPRI
   199c6:	f383 8812 	msr	BASEPRI_MAX, r3
   199ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   199ce:	4831      	ldr	r0, [pc, #196]	; (19a94 <z_tick_sleep+0x11c>)
   199d0:	f7fd fe6a 	bl	176a8 <z_spin_lock_valid>
   199d4:	b988      	cbnz	r0, 199fa <z_tick_sleep+0x82>
   199d6:	2394      	movs	r3, #148	; 0x94
   199d8:	4a2f      	ldr	r2, [pc, #188]	; (19a98 <z_tick_sleep+0x120>)
   199da:	4930      	ldr	r1, [pc, #192]	; (19a9c <z_tick_sleep+0x124>)
   199dc:	482b      	ldr	r0, [pc, #172]	; (19a8c <z_tick_sleep+0x114>)
   199de:	f001 fc25 	bl	1b22c <assert_print>
   199e2:	492c      	ldr	r1, [pc, #176]	; (19a94 <z_tick_sleep+0x11c>)
   199e4:	482e      	ldr	r0, [pc, #184]	; (19aa0 <z_tick_sleep+0x128>)
   199e6:	f001 fc21 	bl	1b22c <assert_print>
   199ea:	2194      	movs	r1, #148	; 0x94
   199ec:	482a      	ldr	r0, [pc, #168]	; (19a98 <z_tick_sleep+0x120>)
   199ee:	f001 fc16 	bl	1b21e <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   199f2:	f06f 0401 	mvn.w	r4, #1
   199f6:	1a24      	subs	r4, r4, r0
   199f8:	e7e1      	b.n	199be <z_tick_sleep+0x46>
	pending_current = _current;
   199fa:	4f2a      	ldr	r7, [pc, #168]	; (19aa4 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   199fc:	4825      	ldr	r0, [pc, #148]	; (19a94 <z_tick_sleep+0x11c>)
   199fe:	f7fd fe6f 	bl	176e0 <z_spin_lock_set_owner>
   19a02:	68b8      	ldr	r0, [r7, #8]
   19a04:	4b28      	ldr	r3, [pc, #160]	; (19aa8 <z_tick_sleep+0x130>)
   19a06:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   19a08:	f7ff fbd2 	bl	191b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   19a0c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   19a0e:	462a      	mov	r2, r5
   19a10:	4633      	mov	r3, r6
   19a12:	3018      	adds	r0, #24
   19a14:	4925      	ldr	r1, [pc, #148]	; (19aac <z_tick_sleep+0x134>)
   19a16:	f000 fa2b 	bl	19e70 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   19a1a:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a1c:	481d      	ldr	r0, [pc, #116]	; (19a94 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19a1e:	7b53      	ldrb	r3, [r2, #13]
   19a20:	f043 0310 	orr.w	r3, r3, #16
   19a24:	7353      	strb	r3, [r2, #13]
   19a26:	f7fd fe4d 	bl	176c4 <z_spin_unlock_valid>
   19a2a:	b958      	cbnz	r0, 19a44 <z_tick_sleep+0xcc>
   19a2c:	23e1      	movs	r3, #225	; 0xe1
   19a2e:	4a1a      	ldr	r2, [pc, #104]	; (19a98 <z_tick_sleep+0x120>)
   19a30:	491f      	ldr	r1, [pc, #124]	; (19ab0 <z_tick_sleep+0x138>)
   19a32:	4816      	ldr	r0, [pc, #88]	; (19a8c <z_tick_sleep+0x114>)
   19a34:	f001 fbfa 	bl	1b22c <assert_print>
   19a38:	4916      	ldr	r1, [pc, #88]	; (19a94 <z_tick_sleep+0x11c>)
   19a3a:	481e      	ldr	r0, [pc, #120]	; (19ab4 <z_tick_sleep+0x13c>)
   19a3c:	f001 fbf6 	bl	1b22c <assert_print>
   19a40:	21e1      	movs	r1, #225	; 0xe1
   19a42:	e7d3      	b.n	199ec <z_tick_sleep+0x74>
   19a44:	4640      	mov	r0, r8
   19a46:	f7f2 fc27 	bl	c298 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   19a4a:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   19a4c:	7b5b      	ldrb	r3, [r3, #13]
   19a4e:	06db      	lsls	r3, r3, #27
   19a50:	d50c      	bpl.n	19a6c <z_tick_sleep+0xf4>
   19a52:	4919      	ldr	r1, [pc, #100]	; (19ab8 <z_tick_sleep+0x140>)
   19a54:	f240 53ad 	movw	r3, #1453	; 0x5ad
   19a58:	4a0b      	ldr	r2, [pc, #44]	; (19a88 <z_tick_sleep+0x110>)
   19a5a:	480c      	ldr	r0, [pc, #48]	; (19a8c <z_tick_sleep+0x114>)
   19a5c:	f001 fbe6 	bl	1b22c <assert_print>
   19a60:	480b      	ldr	r0, [pc, #44]	; (19a90 <z_tick_sleep+0x118>)
   19a62:	f001 fbe3 	bl	1b22c <assert_print>
   19a66:	f240 51ad 	movw	r1, #1453	; 0x5ad
   19a6a:	e798      	b.n	1999e <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   19a6c:	f004 fe5e 	bl	1e72c <sys_clock_tick_get_32>
   19a70:	1a20      	subs	r0, r4, r0
   19a72:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   19a76:	2801      	cmp	r0, #1
   19a78:	f173 0300 	sbcs.w	r3, r3, #0
   19a7c:	db96      	blt.n	199ac <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   19a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a82:	bf00      	nop
   19a84:	000232a0 	.word	0x000232a0
   19a88:	0002350d 	.word	0x0002350d
   19a8c:	0001f995 	.word	0x0001f995
   19a90:	00022009 	.word	0x00022009
   19a94:	20009ae4 	.word	0x20009ae4
   19a98:	0001fd89 	.word	0x0001fd89
   19a9c:	0001fde2 	.word	0x0001fde2
   19aa0:	0001fdf7 	.word	0x0001fdf7
   19aa4:	20009a9c 	.word	0x20009a9c
   19aa8:	20009ad8 	.word	0x20009ad8
   19aac:	00019649 	.word	0x00019649
   19ab0:	0001fdb6 	.word	0x0001fdb6
   19ab4:	0001fdcd 	.word	0x0001fdcd
   19ab8:	00023652 	.word	0x00023652

00019abc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   19abc:	b508      	push	{r3, lr}
   19abe:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   19ac2:	b173      	cbz	r3, 19ae2 <z_impl_k_sleep+0x26>
   19ac4:	4912      	ldr	r1, [pc, #72]	; (19b10 <z_impl_k_sleep+0x54>)
   19ac6:	f240 53bc 	movw	r3, #1468	; 0x5bc
   19aca:	4a12      	ldr	r2, [pc, #72]	; (19b14 <z_impl_k_sleep+0x58>)
   19acc:	4812      	ldr	r0, [pc, #72]	; (19b18 <z_impl_k_sleep+0x5c>)
   19ace:	f001 fbad 	bl	1b22c <assert_print>
   19ad2:	4812      	ldr	r0, [pc, #72]	; (19b1c <z_impl_k_sleep+0x60>)
   19ad4:	f001 fbaa 	bl	1b22c <assert_print>
   19ad8:	f240 51bc 	movw	r1, #1468	; 0x5bc
   19adc:	480d      	ldr	r0, [pc, #52]	; (19b14 <z_impl_k_sleep+0x58>)
   19ade:	f001 fb9e 	bl	1b21e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19ae2:	f1b1 3fff 	cmp.w	r1, #4294967295
   19ae6:	bf08      	it	eq
   19ae8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   19aec:	d106      	bne.n	19afc <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   19aee:	4b0c      	ldr	r3, [pc, #48]	; (19b20 <z_impl_k_sleep+0x64>)
   19af0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   19af2:	f7ff fcd7 	bl	194a4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   19af6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   19afa:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   19afc:	f7ff ff3c 	bl	19978 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   19b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19b04:	fb80 0303 	smull	r0, r3, r0, r3
   19b08:	0bc0      	lsrs	r0, r0, #15
   19b0a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   19b0e:	e7f4      	b.n	19afa <z_impl_k_sleep+0x3e>
   19b10:	000232a0 	.word	0x000232a0
   19b14:	0002350d 	.word	0x0002350d
   19b18:	0001f995 	.word	0x0001f995
   19b1c:	00022009 	.word	0x00022009
   19b20:	20009a9c 	.word	0x20009a9c

00019b24 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   19b24:	4b01      	ldr	r3, [pc, #4]	; (19b2c <z_impl_z_current_get+0x8>)
   19b26:	6898      	ldr	r0, [r3, #8]
   19b28:	4770      	bx	lr
   19b2a:	bf00      	nop
   19b2c:	20009a9c 	.word	0x20009a9c

00019b30 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   19b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b34:	4604      	mov	r4, r0
   19b36:	f04f 0320 	mov.w	r3, #32
   19b3a:	f3ef 8611 	mrs	r6, BASEPRI
   19b3e:	f383 8812 	msr	BASEPRI_MAX, r3
   19b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b46:	4851      	ldr	r0, [pc, #324]	; (19c8c <z_thread_abort+0x15c>)
   19b48:	f7fd fdae 	bl	176a8 <z_spin_lock_valid>
   19b4c:	b968      	cbnz	r0, 19b6a <z_thread_abort+0x3a>
   19b4e:	2394      	movs	r3, #148	; 0x94
   19b50:	4a4f      	ldr	r2, [pc, #316]	; (19c90 <z_thread_abort+0x160>)
   19b52:	4950      	ldr	r1, [pc, #320]	; (19c94 <z_thread_abort+0x164>)
   19b54:	4850      	ldr	r0, [pc, #320]	; (19c98 <z_thread_abort+0x168>)
   19b56:	f001 fb69 	bl	1b22c <assert_print>
   19b5a:	494c      	ldr	r1, [pc, #304]	; (19c8c <z_thread_abort+0x15c>)
   19b5c:	484f      	ldr	r0, [pc, #316]	; (19c9c <z_thread_abort+0x16c>)
   19b5e:	f001 fb65 	bl	1b22c <assert_print>
   19b62:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b64:	484a      	ldr	r0, [pc, #296]	; (19c90 <z_thread_abort+0x160>)
   19b66:	f001 fb5a 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   19b6a:	4848      	ldr	r0, [pc, #288]	; (19c8c <z_thread_abort+0x15c>)
   19b6c:	f7fd fdb8 	bl	176e0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   19b70:	7b23      	ldrb	r3, [r4, #12]
   19b72:	07d9      	lsls	r1, r3, #31
   19b74:	d522      	bpl.n	19bbc <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b76:	4845      	ldr	r0, [pc, #276]	; (19c8c <z_thread_abort+0x15c>)
   19b78:	f7fd fda4 	bl	176c4 <z_spin_unlock_valid>
   19b7c:	b958      	cbnz	r0, 19b96 <z_thread_abort+0x66>
   19b7e:	23c2      	movs	r3, #194	; 0xc2
   19b80:	4a43      	ldr	r2, [pc, #268]	; (19c90 <z_thread_abort+0x160>)
   19b82:	4947      	ldr	r1, [pc, #284]	; (19ca0 <z_thread_abort+0x170>)
   19b84:	4844      	ldr	r0, [pc, #272]	; (19c98 <z_thread_abort+0x168>)
   19b86:	f001 fb51 	bl	1b22c <assert_print>
   19b8a:	4940      	ldr	r1, [pc, #256]	; (19c8c <z_thread_abort+0x15c>)
   19b8c:	4845      	ldr	r0, [pc, #276]	; (19ca4 <z_thread_abort+0x174>)
   19b8e:	f001 fb4d 	bl	1b22c <assert_print>
   19b92:	21c2      	movs	r1, #194	; 0xc2
   19b94:	e7e6      	b.n	19b64 <z_thread_abort+0x34>
	__asm__ volatile(
   19b96:	f386 8811 	msr	BASEPRI, r6
   19b9a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   19b9e:	f44f 63d9 	mov.w	r3, #1736	; 0x6c8
   19ba2:	4a41      	ldr	r2, [pc, #260]	; (19ca8 <z_thread_abort+0x178>)
   19ba4:	4941      	ldr	r1, [pc, #260]	; (19cac <z_thread_abort+0x17c>)
   19ba6:	483c      	ldr	r0, [pc, #240]	; (19c98 <z_thread_abort+0x168>)
   19ba8:	f001 fb40 	bl	1b22c <assert_print>
   19bac:	4621      	mov	r1, r4
   19bae:	4840      	ldr	r0, [pc, #256]	; (19cb0 <z_thread_abort+0x180>)
   19bb0:	f001 fb3c 	bl	1b22c <assert_print>
   19bb4:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   19bb8:	483b      	ldr	r0, [pc, #236]	; (19ca8 <z_thread_abort+0x178>)
   19bba:	e7d4      	b.n	19b66 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   19bbc:	7b63      	ldrb	r3, [r4, #13]
   19bbe:	071a      	lsls	r2, r3, #28
   19bc0:	d50a      	bpl.n	19bd8 <z_thread_abort+0xa8>
   19bc2:	4832      	ldr	r0, [pc, #200]	; (19c8c <z_thread_abort+0x15c>)
   19bc4:	f7fd fd7e 	bl	176c4 <z_spin_unlock_valid>
   19bc8:	2800      	cmp	r0, #0
   19bca:	d0d8      	beq.n	19b7e <z_thread_abort+0x4e>
   19bcc:	f386 8811 	msr	BASEPRI, r6
   19bd0:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   19bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   19bd8:	f023 0220 	bic.w	r2, r3, #32
   19bdc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   19be0:	09d2      	lsrs	r2, r2, #7
   19be2:	d12c      	bne.n	19c3e <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   19be4:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   19be6:	68a3      	ldr	r3, [r4, #8]
   19be8:	b113      	cbz	r3, 19bf0 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   19bea:	4620      	mov	r0, r4
   19bec:	f7ff fcc2 	bl	19574 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   19bf0:	f104 0018 	add.w	r0, r4, #24
   19bf4:	f000 fa02 	bl	19ffc <z_abort_timeout>
   19bf8:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   19bfc:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   19c00:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19c02:	42bd      	cmp	r5, r7
   19c04:	d000      	beq.n	19c08 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   19c06:	bb25      	cbnz	r5, 19c52 <z_thread_abort+0x122>
		update_cache(1);
   19c08:	2001      	movs	r0, #1
   19c0a:	f7fe ff07 	bl	18a1c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   19c0e:	4b29      	ldr	r3, [pc, #164]	; (19cb4 <z_thread_abort+0x184>)
   19c10:	689b      	ldr	r3, [r3, #8]
   19c12:	42a3      	cmp	r3, r4
   19c14:	d1d5      	bne.n	19bc2 <z_thread_abort+0x92>
   19c16:	f3ef 8305 	mrs	r3, IPSR
   19c1a:	2b00      	cmp	r3, #0
   19c1c:	d1d1      	bne.n	19bc2 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c1e:	481b      	ldr	r0, [pc, #108]	; (19c8c <z_thread_abort+0x15c>)
   19c20:	f7fd fd50 	bl	176c4 <z_spin_unlock_valid>
   19c24:	bb10      	cbnz	r0, 19c6c <z_thread_abort+0x13c>
   19c26:	23e1      	movs	r3, #225	; 0xe1
   19c28:	4a19      	ldr	r2, [pc, #100]	; (19c90 <z_thread_abort+0x160>)
   19c2a:	491d      	ldr	r1, [pc, #116]	; (19ca0 <z_thread_abort+0x170>)
   19c2c:	481a      	ldr	r0, [pc, #104]	; (19c98 <z_thread_abort+0x168>)
   19c2e:	f001 fafd 	bl	1b22c <assert_print>
   19c32:	4916      	ldr	r1, [pc, #88]	; (19c8c <z_thread_abort+0x15c>)
   19c34:	481b      	ldr	r0, [pc, #108]	; (19ca4 <z_thread_abort+0x174>)
   19c36:	f001 faf9 	bl	1b22c <assert_print>
   19c3a:	21e1      	movs	r1, #225	; 0xe1
   19c3c:	e792      	b.n	19b64 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19c3e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   19c42:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   19c46:	4621      	mov	r1, r4
   19c48:	481b      	ldr	r0, [pc, #108]	; (19cb8 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19c4a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19c4c:	f7ff f9c8 	bl	18fe0 <z_priq_dumb_remove>
}
   19c50:	e7c9      	b.n	19be6 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   19c52:	4628      	mov	r0, r5
   19c54:	f7ff fc8e 	bl	19574 <unpend_thread_no_timeout>
   19c58:	f105 0018 	add.w	r0, r5, #24
   19c5c:	f000 f9ce 	bl	19ffc <z_abort_timeout>
		ready_thread(thread);
   19c60:	4628      	mov	r0, r5
   19c62:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   19c66:	f7fe ff0d 	bl	18a84 <ready_thread>
   19c6a:	e7c9      	b.n	19c00 <z_thread_abort+0xd0>
   19c6c:	4630      	mov	r0, r6
   19c6e:	f7f2 fb13 	bl	c298 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   19c72:	490e      	ldr	r1, [pc, #56]	; (19cac <z_thread_abort+0x17c>)
   19c74:	f240 63f7 	movw	r3, #1783	; 0x6f7
   19c78:	4a0b      	ldr	r2, [pc, #44]	; (19ca8 <z_thread_abort+0x178>)
   19c7a:	4807      	ldr	r0, [pc, #28]	; (19c98 <z_thread_abort+0x168>)
   19c7c:	f001 fad6 	bl	1b22c <assert_print>
   19c80:	480e      	ldr	r0, [pc, #56]	; (19cbc <z_thread_abort+0x18c>)
   19c82:	f001 fad3 	bl	1b22c <assert_print>
   19c86:	f240 61f7 	movw	r1, #1783	; 0x6f7
   19c8a:	e795      	b.n	19bb8 <z_thread_abort+0x88>
   19c8c:	20009ae4 	.word	0x20009ae4
   19c90:	0001fd89 	.word	0x0001fd89
   19c94:	0001fde2 	.word	0x0001fde2
   19c98:	0001f995 	.word	0x0001f995
   19c9c:	0001fdf7 	.word	0x0001fdf7
   19ca0:	0001fdb6 	.word	0x0001fdb6
   19ca4:	0001fdcd 	.word	0x0001fdcd
   19ca8:	0002350d 	.word	0x0002350d
   19cac:	00022960 	.word	0x00022960
   19cb0:	00023692 	.word	0x00023692
   19cb4:	20009a9c 	.word	0x20009a9c
   19cb8:	20009abc 	.word	0x20009abc
   19cbc:	000236b1 	.word	0x000236b1

00019cc0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   19cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19cc4:	4606      	mov	r6, r0
   19cc6:	4688      	mov	r8, r1
   19cc8:	4617      	mov	r7, r2
	__asm__ volatile(
   19cca:	f04f 0320 	mov.w	r3, #32
   19cce:	f3ef 8911 	mrs	r9, BASEPRI
   19cd2:	f383 8812 	msr	BASEPRI_MAX, r3
   19cd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19cda:	4821      	ldr	r0, [pc, #132]	; (19d60 <z_sched_wake+0xa0>)
   19cdc:	f7fd fce4 	bl	176a8 <z_spin_lock_valid>
   19ce0:	4605      	mov	r5, r0
   19ce2:	b968      	cbnz	r0, 19d00 <z_sched_wake+0x40>
   19ce4:	2394      	movs	r3, #148	; 0x94
   19ce6:	4a1f      	ldr	r2, [pc, #124]	; (19d64 <z_sched_wake+0xa4>)
   19ce8:	491f      	ldr	r1, [pc, #124]	; (19d68 <z_sched_wake+0xa8>)
   19cea:	4820      	ldr	r0, [pc, #128]	; (19d6c <z_sched_wake+0xac>)
   19cec:	f001 fa9e 	bl	1b22c <assert_print>
   19cf0:	491b      	ldr	r1, [pc, #108]	; (19d60 <z_sched_wake+0xa0>)
   19cf2:	481f      	ldr	r0, [pc, #124]	; (19d70 <z_sched_wake+0xb0>)
   19cf4:	f001 fa9a 	bl	1b22c <assert_print>
   19cf8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19cfa:	481a      	ldr	r0, [pc, #104]	; (19d64 <z_sched_wake+0xa4>)
   19cfc:	f001 fa8f 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   19d00:	4817      	ldr	r0, [pc, #92]	; (19d60 <z_sched_wake+0xa0>)
   19d02:	f7fd fced 	bl	176e0 <z_spin_lock_set_owner>
	return list->head == list;
   19d06:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19d08:	42a6      	cmp	r6, r4
   19d0a:	d01d      	beq.n	19d48 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   19d0c:	b1f4      	cbz	r4, 19d4c <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   19d0e:	4620      	mov	r0, r4
   19d10:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   19d14:	6167      	str	r7, [r4, #20]
   19d16:	f7ff fc2d 	bl	19574 <unpend_thread_no_timeout>
   19d1a:	f104 0018 	add.w	r0, r4, #24
   19d1e:	f000 f96d 	bl	19ffc <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   19d22:	4620      	mov	r0, r4
   19d24:	f7fe feae 	bl	18a84 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d28:	480d      	ldr	r0, [pc, #52]	; (19d60 <z_sched_wake+0xa0>)
   19d2a:	f7fd fccb 	bl	176c4 <z_spin_unlock_valid>
   19d2e:	b978      	cbnz	r0, 19d50 <z_sched_wake+0x90>
   19d30:	23c2      	movs	r3, #194	; 0xc2
   19d32:	4a0c      	ldr	r2, [pc, #48]	; (19d64 <z_sched_wake+0xa4>)
   19d34:	490f      	ldr	r1, [pc, #60]	; (19d74 <z_sched_wake+0xb4>)
   19d36:	480d      	ldr	r0, [pc, #52]	; (19d6c <z_sched_wake+0xac>)
   19d38:	f001 fa78 	bl	1b22c <assert_print>
   19d3c:	4908      	ldr	r1, [pc, #32]	; (19d60 <z_sched_wake+0xa0>)
   19d3e:	480e      	ldr	r0, [pc, #56]	; (19d78 <z_sched_wake+0xb8>)
   19d40:	f001 fa74 	bl	1b22c <assert_print>
   19d44:	21c2      	movs	r1, #194	; 0xc2
   19d46:	e7d8      	b.n	19cfa <z_sched_wake+0x3a>
	bool ret = false;
   19d48:	2500      	movs	r5, #0
   19d4a:	e7ed      	b.n	19d28 <z_sched_wake+0x68>
   19d4c:	4625      	mov	r5, r4
   19d4e:	e7eb      	b.n	19d28 <z_sched_wake+0x68>
	__asm__ volatile(
   19d50:	f389 8811 	msr	BASEPRI, r9
   19d54:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   19d58:	4628      	mov	r0, r5
   19d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19d5e:	bf00      	nop
   19d60:	20009ae4 	.word	0x20009ae4
   19d64:	0001fd89 	.word	0x0001fd89
   19d68:	0001fde2 	.word	0x0001fde2
   19d6c:	0001f995 	.word	0x0001f995
   19d70:	0001fdf7 	.word	0x0001fdf7
   19d74:	0001fdb6 	.word	0x0001fdb6
   19d78:	0001fdcd 	.word	0x0001fdcd

00019d7c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   19d7c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19d7e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   19d82:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19d84:	e9cd 6700 	strd	r6, r7, [sp]
   19d88:	f7ff fa84 	bl	19294 <z_pend_curr>

	if (data != NULL) {
   19d8c:	b11c      	cbz	r4, 19d96 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   19d8e:	4b03      	ldr	r3, [pc, #12]	; (19d9c <z_sched_wait+0x20>)
   19d90:	689b      	ldr	r3, [r3, #8]
   19d92:	695b      	ldr	r3, [r3, #20]
   19d94:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   19d96:	b002      	add	sp, #8
   19d98:	bdd0      	pop	{r4, r6, r7, pc}
   19d9a:	bf00      	nop
   19d9c:	20009a9c 	.word	0x20009a9c

00019da0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   19da0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   19da2:	4806      	ldr	r0, [pc, #24]	; (19dbc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   19da4:	4a06      	ldr	r2, [pc, #24]	; (19dc0 <z_data_copy+0x20>)
   19da6:	4907      	ldr	r1, [pc, #28]	; (19dc4 <z_data_copy+0x24>)
   19da8:	1a12      	subs	r2, r2, r0
   19daa:	f004 fba9 	bl	1e500 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19dae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   19db2:	4a05      	ldr	r2, [pc, #20]	; (19dc8 <z_data_copy+0x28>)
   19db4:	4905      	ldr	r1, [pc, #20]	; (19dcc <z_data_copy+0x2c>)
   19db6:	4806      	ldr	r0, [pc, #24]	; (19dd0 <z_data_copy+0x30>)
   19db8:	f004 bba2 	b.w	1e500 <z_early_memcpy>
   19dbc:	20008000 	.word	0x20008000
   19dc0:	20008738 	.word	0x20008738
   19dc4:	00023a30 	.word	0x00023a30
   19dc8:	00000000 	.word	0x00000000
   19dcc:	00023a30 	.word	0x00023a30
   19dd0:	20008000 	.word	0x20008000

00019dd4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   19dd4:	4b03      	ldr	r3, [pc, #12]	; (19de4 <elapsed+0x10>)
   19dd6:	681b      	ldr	r3, [r3, #0]
   19dd8:	b90b      	cbnz	r3, 19dde <elapsed+0xa>
   19dda:	f7fa be23 	b.w	14a24 <sys_clock_elapsed>
}
   19dde:	2000      	movs	r0, #0
   19de0:	4770      	bx	lr
   19de2:	bf00      	nop
   19de4:	20009ae8 	.word	0x20009ae8

00019de8 <next_timeout>:

static int32_t next_timeout(void)
{
   19de8:	b510      	push	{r4, lr}
	return list->head == list;
   19dea:	4b11      	ldr	r3, [pc, #68]	; (19e30 <next_timeout+0x48>)
   19dec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19dee:	429c      	cmp	r4, r3
   19df0:	d10a      	bne.n	19e08 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19df2:	f7ff ffef 	bl	19dd4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   19df6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19dfa:	4b0e      	ldr	r3, [pc, #56]	; (19e34 <next_timeout+0x4c>)
   19dfc:	691b      	ldr	r3, [r3, #16]
   19dfe:	b113      	cbz	r3, 19e06 <next_timeout+0x1e>
   19e00:	4298      	cmp	r0, r3
   19e02:	bfa8      	it	ge
   19e04:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19e06:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   19e08:	f7ff ffe4 	bl	19dd4 <elapsed>
	if ((to == NULL) ||
   19e0c:	2c00      	cmp	r4, #0
   19e0e:	d0f2      	beq.n	19df6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   19e10:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   19e14:	1a1b      	subs	r3, r3, r0
   19e16:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   19e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   19e1e:	f172 0100 	sbcs.w	r1, r2, #0
   19e22:	dae8      	bge.n	19df6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   19e24:	2a00      	cmp	r2, #0
   19e26:	bfac      	ite	ge
   19e28:	4618      	movge	r0, r3
   19e2a:	2000      	movlt	r0, #0
   19e2c:	e7e5      	b.n	19dfa <next_timeout+0x12>
   19e2e:	bf00      	nop
   19e30:	20008374 	.word	0x20008374
   19e34:	20009a9c 	.word	0x20009a9c

00019e38 <remove_timeout>:
{
   19e38:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19e3a:	b170      	cbz	r0, 19e5a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   19e3c:	4b0b      	ldr	r3, [pc, #44]	; (19e6c <remove_timeout+0x34>)
   19e3e:	685b      	ldr	r3, [r3, #4]
   19e40:	4298      	cmp	r0, r3
   19e42:	d00a      	beq.n	19e5a <remove_timeout+0x22>
   19e44:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   19e46:	b143      	cbz	r3, 19e5a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19e48:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   19e4c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19e50:	1912      	adds	r2, r2, r4
   19e52:	eb41 0105 	adc.w	r1, r1, r5
   19e56:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   19e5a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19e5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19e60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19e62:	2300      	movs	r3, #0
	node->prev = NULL;
   19e64:	e9c0 3300 	strd	r3, r3, [r0]
}
   19e68:	bd30      	pop	{r4, r5, pc}
   19e6a:	bf00      	nop
   19e6c:	20008374 	.word	0x20008374

00019e70 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19e70:	f1b3 3fff 	cmp.w	r3, #4294967295
   19e74:	bf08      	it	eq
   19e76:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e7e:	4604      	mov	r4, r0
   19e80:	4692      	mov	sl, r2
   19e82:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19e84:	f000 809e 	beq.w	19fc4 <z_add_timeout+0x154>
	return node->next != NULL;
   19e88:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   19e8a:	b166      	cbz	r6, 19ea6 <z_add_timeout+0x36>
   19e8c:	494e      	ldr	r1, [pc, #312]	; (19fc8 <z_add_timeout+0x158>)
   19e8e:	2363      	movs	r3, #99	; 0x63
   19e90:	4a4e      	ldr	r2, [pc, #312]	; (19fcc <z_add_timeout+0x15c>)
   19e92:	484f      	ldr	r0, [pc, #316]	; (19fd0 <z_add_timeout+0x160>)
   19e94:	f001 f9ca 	bl	1b22c <assert_print>
   19e98:	484e      	ldr	r0, [pc, #312]	; (19fd4 <z_add_timeout+0x164>)
   19e9a:	f001 f9c7 	bl	1b22c <assert_print>
   19e9e:	2163      	movs	r1, #99	; 0x63
   19ea0:	484a      	ldr	r0, [pc, #296]	; (19fcc <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ea2:	f001 f9bc 	bl	1b21e <assert_post_action>
	to->fn = fn;
   19ea6:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   19ea8:	f04f 0320 	mov.w	r3, #32
   19eac:	f3ef 8711 	mrs	r7, BASEPRI
   19eb0:	f383 8812 	msr	BASEPRI_MAX, r3
   19eb4:	f3bf 8f6f 	isb	sy
   19eb8:	4847      	ldr	r0, [pc, #284]	; (19fd8 <z_add_timeout+0x168>)
   19eba:	f7fd fbf5 	bl	176a8 <z_spin_lock_valid>
   19ebe:	b960      	cbnz	r0, 19eda <z_add_timeout+0x6a>
   19ec0:	2394      	movs	r3, #148	; 0x94
   19ec2:	4a46      	ldr	r2, [pc, #280]	; (19fdc <z_add_timeout+0x16c>)
   19ec4:	4946      	ldr	r1, [pc, #280]	; (19fe0 <z_add_timeout+0x170>)
   19ec6:	4842      	ldr	r0, [pc, #264]	; (19fd0 <z_add_timeout+0x160>)
   19ec8:	f001 f9b0 	bl	1b22c <assert_print>
   19ecc:	4942      	ldr	r1, [pc, #264]	; (19fd8 <z_add_timeout+0x168>)
   19ece:	4845      	ldr	r0, [pc, #276]	; (19fe4 <z_add_timeout+0x174>)
   19ed0:	f001 f9ac 	bl	1b22c <assert_print>
   19ed4:	2194      	movs	r1, #148	; 0x94
   19ed6:	4841      	ldr	r0, [pc, #260]	; (19fdc <z_add_timeout+0x16c>)
   19ed8:	e7e3      	b.n	19ea2 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   19eda:	483f      	ldr	r0, [pc, #252]	; (19fd8 <z_add_timeout+0x168>)
   19edc:	f7fd fc00 	bl	176e0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   19ee0:	f1ba 3fff 	cmp.w	sl, #4294967295
   19ee4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   19ee8:	da23      	bge.n	19f32 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   19eea:	f06f 0301 	mvn.w	r3, #1
   19eee:	493e      	ldr	r1, [pc, #248]	; (19fe8 <z_add_timeout+0x178>)
   19ef0:	e9d1 2000 	ldrd	r2, r0, [r1]
   19ef4:	1a9b      	subs	r3, r3, r2
   19ef6:	f04f 32ff 	mov.w	r2, #4294967295
   19efa:	eb62 0000 	sbc.w	r0, r2, r0
   19efe:	ebb3 030a 	subs.w	r3, r3, sl
   19f02:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   19f06:	2b01      	cmp	r3, #1
   19f08:	f170 0200 	sbcs.w	r2, r0, #0
   19f0c:	da01      	bge.n	19f12 <z_add_timeout+0xa2>
   19f0e:	2301      	movs	r3, #1
   19f10:	4630      	mov	r0, r6
   19f12:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   19f16:	4b35      	ldr	r3, [pc, #212]	; (19fec <z_add_timeout+0x17c>)
   19f18:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   19f1a:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19f1e:	429a      	cmp	r2, r3
   19f20:	bf18      	it	ne
   19f22:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   19f24:	b986      	cbnz	r6, 19f48 <z_add_timeout+0xd8>
	node->prev = tail;
   19f26:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   19f2a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   19f2e:	605c      	str	r4, [r3, #4]
}
   19f30:	e01c      	b.n	19f6c <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   19f32:	f7ff ff4f 	bl	19dd4 <elapsed>
   19f36:	f11a 0801 	adds.w	r8, sl, #1
   19f3a:	f145 0500 	adc.w	r5, r5, #0
   19f3e:	eb18 0300 	adds.w	r3, r8, r0
   19f42:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   19f46:	e7e4      	b.n	19f12 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   19f48:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   19f4c:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   19f50:	428a      	cmp	r2, r1
   19f52:	eb70 0e05 	sbcs.w	lr, r0, r5
   19f56:	da28      	bge.n	19faa <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   19f58:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   19f5a:	6872      	ldr	r2, [r6, #4]
   19f5c:	eb65 0500 	sbc.w	r5, r5, r0
   19f60:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   19f64:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   19f68:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19f6a:	6074      	str	r4, [r6, #4]
	return list->head == list;
   19f6c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19f6e:	429a      	cmp	r2, r3
   19f70:	d00b      	beq.n	19f8a <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19f72:	4294      	cmp	r4, r2
   19f74:	d109      	bne.n	19f8a <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19f76:	f7ff ff37 	bl	19de8 <next_timeout>

			if (next_time == 0 ||
   19f7a:	b118      	cbz	r0, 19f84 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   19f7c:	4b1c      	ldr	r3, [pc, #112]	; (19ff0 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   19f7e:	691b      	ldr	r3, [r3, #16]
   19f80:	4283      	cmp	r3, r0
   19f82:	d002      	beq.n	19f8a <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   19f84:	2100      	movs	r1, #0
   19f86:	f7fa fd1d 	bl	149c4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f8a:	4813      	ldr	r0, [pc, #76]	; (19fd8 <z_add_timeout+0x168>)
   19f8c:	f7fd fb9a 	bl	176c4 <z_spin_unlock_valid>
   19f90:	b9a0      	cbnz	r0, 19fbc <z_add_timeout+0x14c>
   19f92:	23c2      	movs	r3, #194	; 0xc2
   19f94:	4a11      	ldr	r2, [pc, #68]	; (19fdc <z_add_timeout+0x16c>)
   19f96:	4917      	ldr	r1, [pc, #92]	; (19ff4 <z_add_timeout+0x184>)
   19f98:	480d      	ldr	r0, [pc, #52]	; (19fd0 <z_add_timeout+0x160>)
   19f9a:	f001 f947 	bl	1b22c <assert_print>
   19f9e:	490e      	ldr	r1, [pc, #56]	; (19fd8 <z_add_timeout+0x168>)
   19fa0:	4815      	ldr	r0, [pc, #84]	; (19ff8 <z_add_timeout+0x188>)
   19fa2:	f001 f943 	bl	1b22c <assert_print>
   19fa6:	21c2      	movs	r1, #194	; 0xc2
   19fa8:	e795      	b.n	19ed6 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   19faa:	1a52      	subs	r2, r2, r1
   19fac:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   19fb0:	4566      	cmp	r6, ip
   19fb2:	e9c4 2004 	strd	r2, r0, [r4, #16]
   19fb6:	d0b6      	beq.n	19f26 <z_add_timeout+0xb6>
   19fb8:	6836      	ldr	r6, [r6, #0]
   19fba:	e7b3      	b.n	19f24 <z_add_timeout+0xb4>
	__asm__ volatile(
   19fbc:	f387 8811 	msr	BASEPRI, r7
   19fc0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19fc8:	000236f7 	.word	0x000236f7
   19fcc:	000236d3 	.word	0x000236d3
   19fd0:	0001f995 	.word	0x0001f995
   19fd4:	00022009 	.word	0x00022009
   19fd8:	20009aec 	.word	0x20009aec
   19fdc:	0001fd89 	.word	0x0001fd89
   19fe0:	0001fde2 	.word	0x0001fde2
   19fe4:	0001fdf7 	.word	0x0001fdf7
   19fe8:	200095e0 	.word	0x200095e0
   19fec:	20008374 	.word	0x20008374
   19ff0:	20009a9c 	.word	0x20009a9c
   19ff4:	0001fdb6 	.word	0x0001fdb6
   19ff8:	0001fdcd 	.word	0x0001fdcd

00019ffc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   19ffc:	b538      	push	{r3, r4, r5, lr}
   19ffe:	4604      	mov	r4, r0
	__asm__ volatile(
   1a000:	f04f 0320 	mov.w	r3, #32
   1a004:	f3ef 8511 	mrs	r5, BASEPRI
   1a008:	f383 8812 	msr	BASEPRI_MAX, r3
   1a00c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a010:	4819      	ldr	r0, [pc, #100]	; (1a078 <z_abort_timeout+0x7c>)
   1a012:	f7fd fb49 	bl	176a8 <z_spin_lock_valid>
   1a016:	b968      	cbnz	r0, 1a034 <z_abort_timeout+0x38>
   1a018:	2394      	movs	r3, #148	; 0x94
   1a01a:	4a18      	ldr	r2, [pc, #96]	; (1a07c <z_abort_timeout+0x80>)
   1a01c:	4918      	ldr	r1, [pc, #96]	; (1a080 <z_abort_timeout+0x84>)
   1a01e:	4819      	ldr	r0, [pc, #100]	; (1a084 <z_abort_timeout+0x88>)
   1a020:	f001 f904 	bl	1b22c <assert_print>
   1a024:	4914      	ldr	r1, [pc, #80]	; (1a078 <z_abort_timeout+0x7c>)
   1a026:	4818      	ldr	r0, [pc, #96]	; (1a088 <z_abort_timeout+0x8c>)
   1a028:	f001 f900 	bl	1b22c <assert_print>
   1a02c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a02e:	4813      	ldr	r0, [pc, #76]	; (1a07c <z_abort_timeout+0x80>)
   1a030:	f001 f8f5 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1a034:	4810      	ldr	r0, [pc, #64]	; (1a078 <z_abort_timeout+0x7c>)
   1a036:	f7fd fb53 	bl	176e0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1a03a:	6823      	ldr	r3, [r4, #0]
   1a03c:	b19b      	cbz	r3, 1a066 <z_abort_timeout+0x6a>
			remove_timeout(to);
   1a03e:	4620      	mov	r0, r4
   1a040:	f7ff fefa 	bl	19e38 <remove_timeout>
			ret = 0;
   1a044:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a046:	480c      	ldr	r0, [pc, #48]	; (1a078 <z_abort_timeout+0x7c>)
   1a048:	f7fd fb3c 	bl	176c4 <z_spin_unlock_valid>
   1a04c:	b970      	cbnz	r0, 1a06c <z_abort_timeout+0x70>
   1a04e:	23c2      	movs	r3, #194	; 0xc2
   1a050:	4a0a      	ldr	r2, [pc, #40]	; (1a07c <z_abort_timeout+0x80>)
   1a052:	490e      	ldr	r1, [pc, #56]	; (1a08c <z_abort_timeout+0x90>)
   1a054:	480b      	ldr	r0, [pc, #44]	; (1a084 <z_abort_timeout+0x88>)
   1a056:	f001 f8e9 	bl	1b22c <assert_print>
   1a05a:	4907      	ldr	r1, [pc, #28]	; (1a078 <z_abort_timeout+0x7c>)
   1a05c:	480c      	ldr	r0, [pc, #48]	; (1a090 <z_abort_timeout+0x94>)
   1a05e:	f001 f8e5 	bl	1b22c <assert_print>
   1a062:	21c2      	movs	r1, #194	; 0xc2
   1a064:	e7e3      	b.n	1a02e <z_abort_timeout+0x32>
	int ret = -EINVAL;
   1a066:	f06f 0415 	mvn.w	r4, #21
   1a06a:	e7ec      	b.n	1a046 <z_abort_timeout+0x4a>
	__asm__ volatile(
   1a06c:	f385 8811 	msr	BASEPRI, r5
   1a070:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1a074:	4620      	mov	r0, r4
   1a076:	bd38      	pop	{r3, r4, r5, pc}
   1a078:	20009aec 	.word	0x20009aec
   1a07c:	0001fd89 	.word	0x0001fd89
   1a080:	0001fde2 	.word	0x0001fde2
   1a084:	0001f995 	.word	0x0001f995
   1a088:	0001fdf7 	.word	0x0001fdf7
   1a08c:	0001fdb6 	.word	0x0001fdb6
   1a090:	0001fdcd 	.word	0x0001fdcd

0001a094 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1a094:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a096:	f04f 0320 	mov.w	r3, #32
   1a09a:	f3ef 8511 	mrs	r5, BASEPRI
   1a09e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0a6:	4817      	ldr	r0, [pc, #92]	; (1a104 <z_get_next_timeout_expiry+0x70>)
   1a0a8:	f7fd fafe 	bl	176a8 <z_spin_lock_valid>
   1a0ac:	b968      	cbnz	r0, 1a0ca <z_get_next_timeout_expiry+0x36>
   1a0ae:	2394      	movs	r3, #148	; 0x94
   1a0b0:	4a15      	ldr	r2, [pc, #84]	; (1a108 <z_get_next_timeout_expiry+0x74>)
   1a0b2:	4916      	ldr	r1, [pc, #88]	; (1a10c <z_get_next_timeout_expiry+0x78>)
   1a0b4:	4816      	ldr	r0, [pc, #88]	; (1a110 <z_get_next_timeout_expiry+0x7c>)
   1a0b6:	f001 f8b9 	bl	1b22c <assert_print>
   1a0ba:	4912      	ldr	r1, [pc, #72]	; (1a104 <z_get_next_timeout_expiry+0x70>)
   1a0bc:	4815      	ldr	r0, [pc, #84]	; (1a114 <z_get_next_timeout_expiry+0x80>)
   1a0be:	f001 f8b5 	bl	1b22c <assert_print>
   1a0c2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0c4:	4810      	ldr	r0, [pc, #64]	; (1a108 <z_get_next_timeout_expiry+0x74>)
   1a0c6:	f001 f8aa 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1a0ca:	480e      	ldr	r0, [pc, #56]	; (1a104 <z_get_next_timeout_expiry+0x70>)
   1a0cc:	f7fd fb08 	bl	176e0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1a0d0:	f7ff fe8a 	bl	19de8 <next_timeout>
   1a0d4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0d6:	480b      	ldr	r0, [pc, #44]	; (1a104 <z_get_next_timeout_expiry+0x70>)
   1a0d8:	f7fd faf4 	bl	176c4 <z_spin_unlock_valid>
   1a0dc:	b958      	cbnz	r0, 1a0f6 <z_get_next_timeout_expiry+0x62>
   1a0de:	23c2      	movs	r3, #194	; 0xc2
   1a0e0:	4a09      	ldr	r2, [pc, #36]	; (1a108 <z_get_next_timeout_expiry+0x74>)
   1a0e2:	490d      	ldr	r1, [pc, #52]	; (1a118 <z_get_next_timeout_expiry+0x84>)
   1a0e4:	480a      	ldr	r0, [pc, #40]	; (1a110 <z_get_next_timeout_expiry+0x7c>)
   1a0e6:	f001 f8a1 	bl	1b22c <assert_print>
   1a0ea:	4906      	ldr	r1, [pc, #24]	; (1a104 <z_get_next_timeout_expiry+0x70>)
   1a0ec:	480b      	ldr	r0, [pc, #44]	; (1a11c <z_get_next_timeout_expiry+0x88>)
   1a0ee:	f001 f89d 	bl	1b22c <assert_print>
   1a0f2:	21c2      	movs	r1, #194	; 0xc2
   1a0f4:	e7e6      	b.n	1a0c4 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   1a0f6:	f385 8811 	msr	BASEPRI, r5
   1a0fa:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1a0fe:	4620      	mov	r0, r4
   1a100:	bd38      	pop	{r3, r4, r5, pc}
   1a102:	bf00      	nop
   1a104:	20009aec 	.word	0x20009aec
   1a108:	0001fd89 	.word	0x0001fd89
   1a10c:	0001fde2 	.word	0x0001fde2
   1a110:	0001f995 	.word	0x0001f995
   1a114:	0001fdf7 	.word	0x0001fdf7
   1a118:	0001fdb6 	.word	0x0001fdb6
   1a11c:	0001fdcd 	.word	0x0001fdcd

0001a120 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1a120:	b570      	push	{r4, r5, r6, lr}
   1a122:	4604      	mov	r4, r0
   1a124:	460d      	mov	r5, r1
	__asm__ volatile(
   1a126:	f04f 0320 	mov.w	r3, #32
   1a12a:	f3ef 8611 	mrs	r6, BASEPRI
   1a12e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a132:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a136:	481b      	ldr	r0, [pc, #108]	; (1a1a4 <z_set_timeout_expiry+0x84>)
   1a138:	f7fd fab6 	bl	176a8 <z_spin_lock_valid>
   1a13c:	b968      	cbnz	r0, 1a15a <z_set_timeout_expiry+0x3a>
   1a13e:	2394      	movs	r3, #148	; 0x94
   1a140:	4a19      	ldr	r2, [pc, #100]	; (1a1a8 <z_set_timeout_expiry+0x88>)
   1a142:	491a      	ldr	r1, [pc, #104]	; (1a1ac <z_set_timeout_expiry+0x8c>)
   1a144:	481a      	ldr	r0, [pc, #104]	; (1a1b0 <z_set_timeout_expiry+0x90>)
   1a146:	f001 f871 	bl	1b22c <assert_print>
   1a14a:	4916      	ldr	r1, [pc, #88]	; (1a1a4 <z_set_timeout_expiry+0x84>)
   1a14c:	4819      	ldr	r0, [pc, #100]	; (1a1b4 <z_set_timeout_expiry+0x94>)
   1a14e:	f001 f86d 	bl	1b22c <assert_print>
   1a152:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a154:	4814      	ldr	r0, [pc, #80]	; (1a1a8 <z_set_timeout_expiry+0x88>)
   1a156:	f001 f862 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1a15a:	4812      	ldr	r0, [pc, #72]	; (1a1a4 <z_set_timeout_expiry+0x84>)
   1a15c:	f7fd fac0 	bl	176e0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1a160:	f7ff fe42 	bl	19de8 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   1a164:	2801      	cmp	r0, #1
   1a166:	dd07      	ble.n	1a178 <z_set_timeout_expiry+0x58>
   1a168:	42a0      	cmp	r0, r4
   1a16a:	db05      	blt.n	1a178 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1a16c:	42a0      	cmp	r0, r4
   1a16e:	4629      	mov	r1, r5
   1a170:	bfa8      	it	ge
   1a172:	4620      	movge	r0, r4
   1a174:	f7fa fc26 	bl	149c4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a178:	480a      	ldr	r0, [pc, #40]	; (1a1a4 <z_set_timeout_expiry+0x84>)
   1a17a:	f7fd faa3 	bl	176c4 <z_spin_unlock_valid>
   1a17e:	b958      	cbnz	r0, 1a198 <z_set_timeout_expiry+0x78>
   1a180:	23c2      	movs	r3, #194	; 0xc2
   1a182:	4a09      	ldr	r2, [pc, #36]	; (1a1a8 <z_set_timeout_expiry+0x88>)
   1a184:	490c      	ldr	r1, [pc, #48]	; (1a1b8 <z_set_timeout_expiry+0x98>)
   1a186:	480a      	ldr	r0, [pc, #40]	; (1a1b0 <z_set_timeout_expiry+0x90>)
   1a188:	f001 f850 	bl	1b22c <assert_print>
   1a18c:	4905      	ldr	r1, [pc, #20]	; (1a1a4 <z_set_timeout_expiry+0x84>)
   1a18e:	480b      	ldr	r0, [pc, #44]	; (1a1bc <z_set_timeout_expiry+0x9c>)
   1a190:	f001 f84c 	bl	1b22c <assert_print>
   1a194:	21c2      	movs	r1, #194	; 0xc2
   1a196:	e7dd      	b.n	1a154 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   1a198:	f386 8811 	msr	BASEPRI, r6
   1a19c:	f3bf 8f6f 	isb	sy
		}
	}
}
   1a1a0:	bd70      	pop	{r4, r5, r6, pc}
   1a1a2:	bf00      	nop
   1a1a4:	20009aec 	.word	0x20009aec
   1a1a8:	0001fd89 	.word	0x0001fd89
   1a1ac:	0001fde2 	.word	0x0001fde2
   1a1b0:	0001f995 	.word	0x0001f995
   1a1b4:	0001fdf7 	.word	0x0001fdf7
   1a1b8:	0001fdb6 	.word	0x0001fdb6
   1a1bc:	0001fdcd 	.word	0x0001fdcd

0001a1c0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1a1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a1c4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1a1c6:	f7fe ff7d 	bl	190c4 <z_time_slice>
	__asm__ volatile(
   1a1ca:	f04f 0320 	mov.w	r3, #32
   1a1ce:	f3ef 8711 	mrs	r7, BASEPRI
   1a1d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1da:	483f      	ldr	r0, [pc, #252]	; (1a2d8 <sys_clock_announce+0x118>)
   1a1dc:	f7fd fa64 	bl	176a8 <z_spin_lock_valid>
   1a1e0:	b968      	cbnz	r0, 1a1fe <sys_clock_announce+0x3e>
   1a1e2:	2394      	movs	r3, #148	; 0x94
   1a1e4:	4a3d      	ldr	r2, [pc, #244]	; (1a2dc <sys_clock_announce+0x11c>)
   1a1e6:	493e      	ldr	r1, [pc, #248]	; (1a2e0 <sys_clock_announce+0x120>)
   1a1e8:	483e      	ldr	r0, [pc, #248]	; (1a2e4 <sys_clock_announce+0x124>)
   1a1ea:	f001 f81f 	bl	1b22c <assert_print>
   1a1ee:	493a      	ldr	r1, [pc, #232]	; (1a2d8 <sys_clock_announce+0x118>)
   1a1f0:	483d      	ldr	r0, [pc, #244]	; (1a2e8 <sys_clock_announce+0x128>)
   1a1f2:	f001 f81b 	bl	1b22c <assert_print>
   1a1f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1f8:	4838      	ldr	r0, [pc, #224]	; (1a2dc <sys_clock_announce+0x11c>)
   1a1fa:	f001 f810 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1fe:	4836      	ldr	r0, [pc, #216]	; (1a2d8 <sys_clock_announce+0x118>)
   1a200:	f7fd fa6e 	bl	176e0 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1a204:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1a2ec <sys_clock_announce+0x12c>
	return list->head == list;
   1a208:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1a2f0 <sys_clock_announce+0x130>
   1a20c:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1a210:	4a38      	ldr	r2, [pc, #224]	; (1a2f4 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a212:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   1a214:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   1a218:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   1a21c:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a220:	d00b      	beq.n	1a23a <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a222:	b155      	cbz	r5, 1a23a <sys_clock_announce+0x7a>
   1a224:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   1a228:	42b4      	cmp	r4, r6
   1a22a:	eb71 0e00 	sbcs.w	lr, r1, r0
   1a22e:	da1c      	bge.n	1a26a <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a230:	1b36      	subs	r6, r6, r4
   1a232:	eb60 0001 	sbc.w	r0, r0, r1
   1a236:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   1a23a:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   1a23c:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   1a240:	eb4c 0101 	adc.w	r1, ip, r1
   1a244:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1a248:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   1a24c:	f7ff fdcc 	bl	19de8 <next_timeout>
   1a250:	4621      	mov	r1, r4
   1a252:	f7fa fbb7 	bl	149c4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a256:	4820      	ldr	r0, [pc, #128]	; (1a2d8 <sys_clock_announce+0x118>)
   1a258:	f7fd fa34 	bl	176c4 <z_spin_unlock_valid>
   1a25c:	b1a8      	cbz	r0, 1a28a <sys_clock_announce+0xca>
	__asm__ volatile(
   1a25e:	f387 8811 	msr	BASEPRI, r7
   1a262:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1a26a:	18f3      	adds	r3, r6, r3
   1a26c:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   1a270:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1a274:	2200      	movs	r2, #0
   1a276:	2300      	movs	r3, #0
		remove_timeout(t);
   1a278:	4628      	mov	r0, r5
		t->dticks = 0;
   1a27a:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   1a27e:	f7ff fddb 	bl	19e38 <remove_timeout>
   1a282:	4815      	ldr	r0, [pc, #84]	; (1a2d8 <sys_clock_announce+0x118>)
   1a284:	f7fd fa1e 	bl	176c4 <z_spin_unlock_valid>
   1a288:	b958      	cbnz	r0, 1a2a2 <sys_clock_announce+0xe2>
   1a28a:	23c2      	movs	r3, #194	; 0xc2
   1a28c:	4a13      	ldr	r2, [pc, #76]	; (1a2dc <sys_clock_announce+0x11c>)
   1a28e:	491a      	ldr	r1, [pc, #104]	; (1a2f8 <sys_clock_announce+0x138>)
   1a290:	4814      	ldr	r0, [pc, #80]	; (1a2e4 <sys_clock_announce+0x124>)
   1a292:	f000 ffcb 	bl	1b22c <assert_print>
   1a296:	4910      	ldr	r1, [pc, #64]	; (1a2d8 <sys_clock_announce+0x118>)
   1a298:	4818      	ldr	r0, [pc, #96]	; (1a2fc <sys_clock_announce+0x13c>)
   1a29a:	f000 ffc7 	bl	1b22c <assert_print>
   1a29e:	21c2      	movs	r1, #194	; 0xc2
   1a2a0:	e7aa      	b.n	1a1f8 <sys_clock_announce+0x38>
   1a2a2:	f387 8811 	msr	BASEPRI, r7
   1a2a6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a2aa:	4628      	mov	r0, r5
   1a2ac:	68ab      	ldr	r3, [r5, #8]
   1a2ae:	4798      	blx	r3
	__asm__ volatile(
   1a2b0:	f04f 0320 	mov.w	r3, #32
   1a2b4:	f3ef 8711 	mrs	r7, BASEPRI
   1a2b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a2c0:	4805      	ldr	r0, [pc, #20]	; (1a2d8 <sys_clock_announce+0x118>)
   1a2c2:	f7fd f9f1 	bl	176a8 <z_spin_lock_valid>
   1a2c6:	2800      	cmp	r0, #0
   1a2c8:	d08b      	beq.n	1a1e2 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   1a2ca:	4803      	ldr	r0, [pc, #12]	; (1a2d8 <sys_clock_announce+0x118>)
   1a2cc:	f7fd fa08 	bl	176e0 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   1a2d0:	f8d8 4000 	ldr.w	r4, [r8]
   1a2d4:	1ba4      	subs	r4, r4, r6
   1a2d6:	e799      	b.n	1a20c <sys_clock_announce+0x4c>
   1a2d8:	20009aec 	.word	0x20009aec
   1a2dc:	0001fd89 	.word	0x0001fd89
   1a2e0:	0001fde2 	.word	0x0001fde2
   1a2e4:	0001f995 	.word	0x0001f995
   1a2e8:	0001fdf7 	.word	0x0001fdf7
   1a2ec:	20009ae8 	.word	0x20009ae8
   1a2f0:	20008374 	.word	0x20008374
   1a2f4:	200095e0 	.word	0x200095e0
   1a2f8:	0001fdb6 	.word	0x0001fdb6
   1a2fc:	0001fdcd 	.word	0x0001fdcd

0001a300 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1a300:	b570      	push	{r4, r5, r6, lr}
   1a302:	f04f 0320 	mov.w	r3, #32
   1a306:	f3ef 8611 	mrs	r6, BASEPRI
   1a30a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a30e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a312:	481a      	ldr	r0, [pc, #104]	; (1a37c <sys_clock_tick_get+0x7c>)
   1a314:	f7fd f9c8 	bl	176a8 <z_spin_lock_valid>
   1a318:	b968      	cbnz	r0, 1a336 <sys_clock_tick_get+0x36>
   1a31a:	2394      	movs	r3, #148	; 0x94
   1a31c:	4a18      	ldr	r2, [pc, #96]	; (1a380 <sys_clock_tick_get+0x80>)
   1a31e:	4919      	ldr	r1, [pc, #100]	; (1a384 <sys_clock_tick_get+0x84>)
   1a320:	4819      	ldr	r0, [pc, #100]	; (1a388 <sys_clock_tick_get+0x88>)
   1a322:	f000 ff83 	bl	1b22c <assert_print>
   1a326:	4915      	ldr	r1, [pc, #84]	; (1a37c <sys_clock_tick_get+0x7c>)
   1a328:	4818      	ldr	r0, [pc, #96]	; (1a38c <sys_clock_tick_get+0x8c>)
   1a32a:	f000 ff7f 	bl	1b22c <assert_print>
   1a32e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a330:	4813      	ldr	r0, [pc, #76]	; (1a380 <sys_clock_tick_get+0x80>)
   1a332:	f000 ff74 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1a336:	4811      	ldr	r0, [pc, #68]	; (1a37c <sys_clock_tick_get+0x7c>)
   1a338:	f7fd f9d2 	bl	176e0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1a33c:	f7ff fd4a 	bl	19dd4 <elapsed>
   1a340:	4a13      	ldr	r2, [pc, #76]	; (1a390 <sys_clock_tick_get+0x90>)
   1a342:	e9d2 4500 	ldrd	r4, r5, [r2]
   1a346:	1904      	adds	r4, r0, r4
   1a348:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a34c:	480b      	ldr	r0, [pc, #44]	; (1a37c <sys_clock_tick_get+0x7c>)
   1a34e:	f7fd f9b9 	bl	176c4 <z_spin_unlock_valid>
   1a352:	b958      	cbnz	r0, 1a36c <sys_clock_tick_get+0x6c>
   1a354:	23c2      	movs	r3, #194	; 0xc2
   1a356:	4a0a      	ldr	r2, [pc, #40]	; (1a380 <sys_clock_tick_get+0x80>)
   1a358:	490e      	ldr	r1, [pc, #56]	; (1a394 <sys_clock_tick_get+0x94>)
   1a35a:	480b      	ldr	r0, [pc, #44]	; (1a388 <sys_clock_tick_get+0x88>)
   1a35c:	f000 ff66 	bl	1b22c <assert_print>
   1a360:	4906      	ldr	r1, [pc, #24]	; (1a37c <sys_clock_tick_get+0x7c>)
   1a362:	480d      	ldr	r0, [pc, #52]	; (1a398 <sys_clock_tick_get+0x98>)
   1a364:	f000 ff62 	bl	1b22c <assert_print>
   1a368:	21c2      	movs	r1, #194	; 0xc2
   1a36a:	e7e1      	b.n	1a330 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   1a36c:	f386 8811 	msr	BASEPRI, r6
   1a370:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a374:	4620      	mov	r0, r4
   1a376:	4629      	mov	r1, r5
   1a378:	bd70      	pop	{r4, r5, r6, pc}
   1a37a:	bf00      	nop
   1a37c:	20009aec 	.word	0x20009aec
   1a380:	0001fd89 	.word	0x0001fd89
   1a384:	0001fde2 	.word	0x0001fde2
   1a388:	0001f995 	.word	0x0001f995
   1a38c:	0001fdf7 	.word	0x0001fdf7
   1a390:	200095e0 	.word	0x200095e0
   1a394:	0001fdb6 	.word	0x0001fdb6
   1a398:	0001fdcd 	.word	0x0001fdcd

0001a39c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1a39c:	b570      	push	{r4, r5, r6, lr}
   1a39e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a3a0:	f04f 0320 	mov.w	r3, #32
   1a3a4:	f3ef 8511 	mrs	r5, BASEPRI
   1a3a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a3ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a3b0:	4849      	ldr	r0, [pc, #292]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a3b2:	f7fd f979 	bl	176a8 <z_spin_lock_valid>
   1a3b6:	b968      	cbnz	r0, 1a3d4 <z_timer_expiration_handler+0x38>
   1a3b8:	2394      	movs	r3, #148	; 0x94
   1a3ba:	4a48      	ldr	r2, [pc, #288]	; (1a4dc <z_timer_expiration_handler+0x140>)
   1a3bc:	4948      	ldr	r1, [pc, #288]	; (1a4e0 <z_timer_expiration_handler+0x144>)
   1a3be:	4849      	ldr	r0, [pc, #292]	; (1a4e4 <z_timer_expiration_handler+0x148>)
   1a3c0:	f000 ff34 	bl	1b22c <assert_print>
   1a3c4:	4944      	ldr	r1, [pc, #272]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a3c6:	4848      	ldr	r0, [pc, #288]	; (1a4e8 <z_timer_expiration_handler+0x14c>)
   1a3c8:	f000 ff30 	bl	1b22c <assert_print>
   1a3cc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a3ce:	4843      	ldr	r0, [pc, #268]	; (1a4dc <z_timer_expiration_handler+0x140>)
   1a3d0:	f000 ff25 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1a3d4:	4840      	ldr	r0, [pc, #256]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a3d6:	f7fd f983 	bl	176e0 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1a3da:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1a3de:	3301      	adds	r3, #1
   1a3e0:	f142 0200 	adc.w	r2, r2, #0
   1a3e4:	2b02      	cmp	r3, #2
   1a3e6:	f172 0200 	sbcs.w	r2, r2, #0
   1a3ea:	d322      	bcc.n	1a432 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   1a3ec:	f004 f9a2 	bl	1e734 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1a3f0:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1a3f4:	3001      	adds	r0, #1
   1a3f6:	f141 0100 	adc.w	r1, r1, #0
   1a3fa:	18c0      	adds	r0, r0, r3
   1a3fc:	eb41 0102 	adc.w	r1, r1, r2
   1a400:	2801      	cmp	r0, #1
   1a402:	f171 0100 	sbcs.w	r1, r1, #0
   1a406:	db29      	blt.n	1a45c <z_timer_expiration_handler+0xc0>
   1a408:	f004 f994 	bl	1e734 <z_impl_k_uptime_ticks>
   1a40c:	3001      	adds	r0, #1
   1a40e:	f141 0300 	adc.w	r3, r1, #0
   1a412:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   1a416:	1880      	adds	r0, r0, r2
   1a418:	f06f 0201 	mvn.w	r2, #1
   1a41c:	eb43 0301 	adc.w	r3, r3, r1
   1a420:	f04f 31ff 	mov.w	r1, #4294967295
   1a424:	1a12      	subs	r2, r2, r0
   1a426:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a42a:	4620      	mov	r0, r4
   1a42c:	492f      	ldr	r1, [pc, #188]	; (1a4ec <z_timer_expiration_handler+0x150>)
   1a42e:	f7ff fd1f 	bl	19e70 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1a432:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a434:	3301      	adds	r3, #1
   1a436:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1a438:	6a23      	ldr	r3, [r4, #32]
   1a43a:	b35b      	cbz	r3, 1a494 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a43c:	4826      	ldr	r0, [pc, #152]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a43e:	f7fd f941 	bl	176c4 <z_spin_unlock_valid>
   1a442:	b980      	cbnz	r0, 1a466 <z_timer_expiration_handler+0xca>
   1a444:	23c2      	movs	r3, #194	; 0xc2
   1a446:	4a25      	ldr	r2, [pc, #148]	; (1a4dc <z_timer_expiration_handler+0x140>)
   1a448:	4929      	ldr	r1, [pc, #164]	; (1a4f0 <z_timer_expiration_handler+0x154>)
   1a44a:	4826      	ldr	r0, [pc, #152]	; (1a4e4 <z_timer_expiration_handler+0x148>)
   1a44c:	f000 feee 	bl	1b22c <assert_print>
   1a450:	4921      	ldr	r1, [pc, #132]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a452:	4828      	ldr	r0, [pc, #160]	; (1a4f4 <z_timer_expiration_handler+0x158>)
   1a454:	f000 feea 	bl	1b22c <assert_print>
   1a458:	21c2      	movs	r1, #194	; 0xc2
   1a45a:	e7b8      	b.n	1a3ce <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1a45c:	f06f 0201 	mvn.w	r2, #1
   1a460:	f04f 33ff 	mov.w	r3, #4294967295
   1a464:	e7e1      	b.n	1a42a <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   1a466:	f385 8811 	msr	BASEPRI, r5
   1a46a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1a46e:	4620      	mov	r0, r4
   1a470:	6a23      	ldr	r3, [r4, #32]
   1a472:	4798      	blx	r3
	__asm__ volatile(
   1a474:	f04f 0320 	mov.w	r3, #32
   1a478:	f3ef 8511 	mrs	r5, BASEPRI
   1a47c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a480:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a484:	4814      	ldr	r0, [pc, #80]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a486:	f7fd f90f 	bl	176a8 <z_spin_lock_valid>
   1a48a:	2800      	cmp	r0, #0
   1a48c:	d094      	beq.n	1a3b8 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   1a48e:	4812      	ldr	r0, [pc, #72]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a490:	f7fd f926 	bl	176e0 <z_spin_lock_set_owner>
	return list->head == list;
   1a494:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a498:	42a6      	cmp	r6, r4
   1a49a:	d000      	beq.n	1a49e <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1a49c:	b94e      	cbnz	r6, 1a4b2 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a49e:	480e      	ldr	r0, [pc, #56]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a4a0:	f7fd f910 	bl	176c4 <z_spin_unlock_valid>
   1a4a4:	2800      	cmp	r0, #0
   1a4a6:	d0cd      	beq.n	1a444 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   1a4a8:	f385 8811 	msr	BASEPRI, r5
   1a4ac:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1a4b0:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   1a4b2:	4630      	mov	r0, r6
   1a4b4:	f7fe fbda 	bl	18c6c <z_unpend_thread_no_timeout>
   1a4b8:	2300      	movs	r3, #0
   1a4ba:	4807      	ldr	r0, [pc, #28]	; (1a4d8 <z_timer_expiration_handler+0x13c>)
   1a4bc:	67f3      	str	r3, [r6, #124]	; 0x7c
   1a4be:	f7fd f901 	bl	176c4 <z_spin_unlock_valid>
   1a4c2:	2800      	cmp	r0, #0
   1a4c4:	d0be      	beq.n	1a444 <z_timer_expiration_handler+0xa8>
   1a4c6:	f385 8811 	msr	BASEPRI, r5
   1a4ca:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1a4ce:	4630      	mov	r0, r6
}
   1a4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1a4d4:	f7fe bb84 	b.w	18be0 <z_ready_thread>
   1a4d8:	20009af0 	.word	0x20009af0
   1a4dc:	0001fd89 	.word	0x0001fd89
   1a4e0:	0001fde2 	.word	0x0001fde2
   1a4e4:	0001f995 	.word	0x0001f995
   1a4e8:	0001fdf7 	.word	0x0001fdf7
   1a4ec:	0001a39d 	.word	0x0001a39d
   1a4f0:	0001fdb6 	.word	0x0001fdb6
   1a4f4:	0001fdcd 	.word	0x0001fdcd

0001a4f8 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a4fc:	bf08      	it	eq
   1a4fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1a502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a506:	4619      	mov	r1, r3
   1a508:	4605      	mov	r5, r0
   1a50a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   1a50e:	4614      	mov	r4, r2
   1a510:	4691      	mov	r9, r2
   1a512:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1a514:	d037      	beq.n	1a586 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1a516:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a51a:	bf08      	it	eq
   1a51c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a520:	4637      	mov	r7, r6
   1a522:	4682      	mov	sl, r0
   1a524:	d011      	beq.n	1a54a <z_impl_k_timer_start+0x52>
   1a526:	ea50 0306 	orrs.w	r3, r0, r6
   1a52a:	d00e      	beq.n	1a54a <z_impl_k_timer_start+0x52>
   1a52c:	1c72      	adds	r2, r6, #1
   1a52e:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   1a532:	db0a      	blt.n	1a54a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   1a534:	2e02      	cmp	r6, #2
   1a536:	4684      	mov	ip, r0
   1a538:	f170 0000 	sbcs.w	r0, r0, #0
   1a53c:	bfbc      	itt	lt
   1a53e:	2702      	movlt	r7, #2
   1a540:	f04f 0c00 	movlt.w	ip, #0
   1a544:	3f01      	subs	r7, #1
   1a546:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1a54a:	1c63      	adds	r3, r4, #1
   1a54c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1a550:	db0a      	blt.n	1a568 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1a552:	2c01      	cmp	r4, #1
   1a554:	f171 0300 	sbcs.w	r3, r1, #0
   1a558:	4622      	mov	r2, r4
   1a55a:	bfbc      	itt	lt
   1a55c:	2201      	movlt	r2, #1
   1a55e:	2100      	movlt	r1, #0
   1a560:	f112 39ff 	adds.w	r9, r2, #4294967295
   1a564:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1a568:	4628      	mov	r0, r5
   1a56a:	f7ff fd47 	bl	19ffc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1a56e:	2300      	movs	r3, #0
	timer->period = period;
   1a570:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   1a574:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a576:	464a      	mov	r2, r9
   1a578:	4643      	mov	r3, r8
   1a57a:	4628      	mov	r0, r5
		     duration);
}
   1a57c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a580:	4902      	ldr	r1, [pc, #8]	; (1a58c <z_impl_k_timer_start+0x94>)
   1a582:	f7ff bc75 	b.w	19e70 <z_add_timeout>
}
   1a586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a58a:	bf00      	nop
   1a58c:	0001a39d 	.word	0x0001a39d

0001a590 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1a590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1a594:	2600      	movs	r6, #0
{
   1a596:	4688      	mov	r8, r1
   1a598:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   1a59a:	4604      	mov	r4, r0
	int events_registered = 0;
   1a59c:	4637      	mov	r7, r6
	event->poller = NULL;
   1a59e:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a5a0:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 1a760 <register_events+0x1d0>
{
   1a5a4:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1a5a6:	4546      	cmp	r6, r8
   1a5a8:	db03      	blt.n	1a5b2 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1a5aa:	4638      	mov	r0, r7
   1a5ac:	b003      	add	sp, #12
   1a5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1a5b2:	f04f 0320 	mov.w	r3, #32
   1a5b6:	f3ef 8b11 	mrs	fp, BASEPRI
   1a5ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5be:	f3bf 8f6f 	isb	sy
   1a5c2:	4648      	mov	r0, r9
   1a5c4:	f7fd f870 	bl	176a8 <z_spin_lock_valid>
   1a5c8:	b960      	cbnz	r0, 1a5e4 <register_events+0x54>
   1a5ca:	2394      	movs	r3, #148	; 0x94
   1a5cc:	4a65      	ldr	r2, [pc, #404]	; (1a764 <register_events+0x1d4>)
   1a5ce:	4966      	ldr	r1, [pc, #408]	; (1a768 <register_events+0x1d8>)
   1a5d0:	4866      	ldr	r0, [pc, #408]	; (1a76c <register_events+0x1dc>)
   1a5d2:	f000 fe2b 	bl	1b22c <assert_print>
   1a5d6:	4962      	ldr	r1, [pc, #392]	; (1a760 <register_events+0x1d0>)
   1a5d8:	4865      	ldr	r0, [pc, #404]	; (1a770 <register_events+0x1e0>)
   1a5da:	f000 fe27 	bl	1b22c <assert_print>
   1a5de:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5e0:	4860      	ldr	r0, [pc, #384]	; (1a764 <register_events+0x1d4>)
   1a5e2:	e060      	b.n	1a6a6 <register_events+0x116>
	z_spin_lock_set_owner(l);
   1a5e4:	4648      	mov	r0, r9
   1a5e6:	f7fd f87b 	bl	176e0 <z_spin_lock_set_owner>
	switch (event->type) {
   1a5ea:	7b63      	ldrb	r3, [r4, #13]
   1a5ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a5f0:	2b08      	cmp	r3, #8
   1a5f2:	d84a      	bhi.n	1a68a <register_events+0xfa>
   1a5f4:	e8df f003 	tbb	[pc, r3]
   1a5f8:	49053d2b 	.word	0x49053d2b
   1a5fc:	49494927 	.word	0x49494927
   1a600:	43          	.byte	0x43
   1a601:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1a602:	6923      	ldr	r3, [r4, #16]
   1a604:	689b      	ldr	r3, [r3, #8]
   1a606:	b313      	cbz	r3, 1a64e <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1a608:	2302      	movs	r3, #2
	event->state |= state;
   1a60a:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1a60c:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   1a610:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1a614:	430b      	orrs	r3, r1
   1a616:	f363 3294 	bfi	r2, r3, #14, #7
   1a61a:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1a61c:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a620:	4648      	mov	r0, r9
   1a622:	f7fd f84f 	bl	176c4 <z_spin_unlock_valid>
   1a626:	3414      	adds	r4, #20
   1a628:	2800      	cmp	r0, #0
   1a62a:	f040 8092 	bne.w	1a752 <register_events+0x1c2>
   1a62e:	23c2      	movs	r3, #194	; 0xc2
   1a630:	4a4c      	ldr	r2, [pc, #304]	; (1a764 <register_events+0x1d4>)
   1a632:	4950      	ldr	r1, [pc, #320]	; (1a774 <register_events+0x1e4>)
   1a634:	484d      	ldr	r0, [pc, #308]	; (1a76c <register_events+0x1dc>)
   1a636:	f000 fdf9 	bl	1b22c <assert_print>
   1a63a:	4949      	ldr	r1, [pc, #292]	; (1a760 <register_events+0x1d0>)
   1a63c:	484e      	ldr	r0, [pc, #312]	; (1a778 <register_events+0x1e8>)
   1a63e:	f000 fdf5 	bl	1b22c <assert_print>
   1a642:	21c2      	movs	r1, #194	; 0xc2
   1a644:	e7cc      	b.n	1a5e0 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   1a646:	6923      	ldr	r3, [r4, #16]
   1a648:	681b      	ldr	r3, [r3, #0]
   1a64a:	2b00      	cmp	r3, #0
   1a64c:	d12d      	bne.n	1a6aa <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   1a64e:	9b01      	ldr	r3, [sp, #4]
   1a650:	2b00      	cmp	r3, #0
   1a652:	d1e5      	bne.n	1a620 <register_events+0x90>
   1a654:	782b      	ldrb	r3, [r5, #0]
   1a656:	2b00      	cmp	r3, #0
   1a658:	d0e2      	beq.n	1a620 <register_events+0x90>
	switch (event->type) {
   1a65a:	7b63      	ldrb	r3, [r4, #13]
   1a65c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a660:	2b08      	cmp	r3, #8
   1a662:	d86b      	bhi.n	1a73c <register_events+0x1ac>
   1a664:	e8df f003 	tbb	[pc, r3]
   1a668:	6a234935 	.word	0x6a234935
   1a66c:	6a6a6a38 	.word	0x6a6a6a38
   1a670:	59          	.byte	0x59
   1a671:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1a672:	6923      	ldr	r3, [r4, #16]
   1a674:	689b      	ldr	r3, [r3, #8]
   1a676:	2b00      	cmp	r3, #0
   1a678:	d0e9      	beq.n	1a64e <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   1a67a:	2301      	movs	r3, #1
   1a67c:	e7c5      	b.n	1a60a <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   1a67e:	6923      	ldr	r3, [r4, #16]
   1a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a682:	2b00      	cmp	r3, #0
   1a684:	d0e3      	beq.n	1a64e <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1a686:	2310      	movs	r3, #16
   1a688:	e7bf      	b.n	1a60a <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1a68a:	2363      	movs	r3, #99	; 0x63
   1a68c:	4a3b      	ldr	r2, [pc, #236]	; (1a77c <register_events+0x1ec>)
   1a68e:	493c      	ldr	r1, [pc, #240]	; (1a780 <register_events+0x1f0>)
   1a690:	4836      	ldr	r0, [pc, #216]	; (1a76c <register_events+0x1dc>)
   1a692:	f000 fdcb 	bl	1b22c <assert_print>
   1a696:	7b61      	ldrb	r1, [r4, #13]
   1a698:	483a      	ldr	r0, [pc, #232]	; (1a784 <register_events+0x1f4>)
   1a69a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1a69e:	f000 fdc5 	bl	1b22c <assert_print>
   1a6a2:	2163      	movs	r1, #99	; 0x63
   1a6a4:	4835      	ldr	r0, [pc, #212]	; (1a77c <register_events+0x1ec>)
   1a6a6:	f000 fdba 	bl	1b21e <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1a6aa:	2304      	movs	r3, #4
   1a6ac:	e7ad      	b.n	1a60a <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a6ae:	6920      	ldr	r0, [r4, #16]
   1a6b0:	b950      	cbnz	r0, 1a6c8 <register_events+0x138>
   1a6b2:	4935      	ldr	r1, [pc, #212]	; (1a788 <register_events+0x1f8>)
   1a6b4:	238d      	movs	r3, #141	; 0x8d
   1a6b6:	4a31      	ldr	r2, [pc, #196]	; (1a77c <register_events+0x1ec>)
   1a6b8:	482c      	ldr	r0, [pc, #176]	; (1a76c <register_events+0x1dc>)
   1a6ba:	f000 fdb7 	bl	1b22c <assert_print>
   1a6be:	4833      	ldr	r0, [pc, #204]	; (1a78c <register_events+0x1fc>)
   1a6c0:	f000 fdb4 	bl	1b22c <assert_print>
   1a6c4:	218d      	movs	r1, #141	; 0x8d
   1a6c6:	e7ed      	b.n	1a6a4 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   1a6c8:	462a      	mov	r2, r5
   1a6ca:	4621      	mov	r1, r4
   1a6cc:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1a6ce:	f004 f882 	bl	1e7d6 <add_event>
	event->poller = poller;
   1a6d2:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   1a6d4:	3701      	adds	r7, #1
   1a6d6:	e7a3      	b.n	1a620 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a6d8:	6920      	ldr	r0, [r4, #16]
   1a6da:	b950      	cbnz	r0, 1a6f2 <register_events+0x162>
   1a6dc:	492c      	ldr	r1, [pc, #176]	; (1a790 <register_events+0x200>)
   1a6de:	2391      	movs	r3, #145	; 0x91
   1a6e0:	4a26      	ldr	r2, [pc, #152]	; (1a77c <register_events+0x1ec>)
   1a6e2:	4822      	ldr	r0, [pc, #136]	; (1a76c <register_events+0x1dc>)
   1a6e4:	f000 fda2 	bl	1b22c <assert_print>
   1a6e8:	482a      	ldr	r0, [pc, #168]	; (1a794 <register_events+0x204>)
   1a6ea:	f000 fd9f 	bl	1b22c <assert_print>
   1a6ee:	2191      	movs	r1, #145	; 0x91
   1a6f0:	e7d8      	b.n	1a6a4 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   1a6f2:	462a      	mov	r2, r5
   1a6f4:	4621      	mov	r1, r4
   1a6f6:	3014      	adds	r0, #20
   1a6f8:	e7e9      	b.n	1a6ce <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a6fa:	6920      	ldr	r0, [r4, #16]
   1a6fc:	b950      	cbnz	r0, 1a714 <register_events+0x184>
   1a6fe:	4926      	ldr	r1, [pc, #152]	; (1a798 <register_events+0x208>)
   1a700:	2395      	movs	r3, #149	; 0x95
   1a702:	4a1e      	ldr	r2, [pc, #120]	; (1a77c <register_events+0x1ec>)
   1a704:	4819      	ldr	r0, [pc, #100]	; (1a76c <register_events+0x1dc>)
   1a706:	f000 fd91 	bl	1b22c <assert_print>
   1a70a:	4824      	ldr	r0, [pc, #144]	; (1a79c <register_events+0x20c>)
   1a70c:	f000 fd8e 	bl	1b22c <assert_print>
   1a710:	2195      	movs	r1, #149	; 0x95
   1a712:	e7c7      	b.n	1a6a4 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   1a714:	462a      	mov	r2, r5
   1a716:	4621      	mov	r1, r4
   1a718:	e7d9      	b.n	1a6ce <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1a71a:	6920      	ldr	r0, [r4, #16]
   1a71c:	b950      	cbnz	r0, 1a734 <register_events+0x1a4>
   1a71e:	4920      	ldr	r1, [pc, #128]	; (1a7a0 <register_events+0x210>)
   1a720:	2399      	movs	r3, #153	; 0x99
   1a722:	4a16      	ldr	r2, [pc, #88]	; (1a77c <register_events+0x1ec>)
   1a724:	4811      	ldr	r0, [pc, #68]	; (1a76c <register_events+0x1dc>)
   1a726:	f000 fd81 	bl	1b22c <assert_print>
   1a72a:	481e      	ldr	r0, [pc, #120]	; (1a7a4 <register_events+0x214>)
   1a72c:	f000 fd7e 	bl	1b22c <assert_print>
   1a730:	2199      	movs	r1, #153	; 0x99
   1a732:	e7b7      	b.n	1a6a4 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   1a734:	462a      	mov	r2, r5
   1a736:	4621      	mov	r1, r4
   1a738:	3028      	adds	r0, #40	; 0x28
   1a73a:	e7c8      	b.n	1a6ce <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   1a73c:	4910      	ldr	r1, [pc, #64]	; (1a780 <register_events+0x1f0>)
   1a73e:	23a6      	movs	r3, #166	; 0xa6
   1a740:	4a0e      	ldr	r2, [pc, #56]	; (1a77c <register_events+0x1ec>)
   1a742:	480a      	ldr	r0, [pc, #40]	; (1a76c <register_events+0x1dc>)
   1a744:	f000 fd72 	bl	1b22c <assert_print>
   1a748:	4817      	ldr	r0, [pc, #92]	; (1a7a8 <register_events+0x218>)
   1a74a:	f000 fd6f 	bl	1b22c <assert_print>
   1a74e:	21a6      	movs	r1, #166	; 0xa6
   1a750:	e7a8      	b.n	1a6a4 <register_events+0x114>
	__asm__ volatile(
   1a752:	f38b 8811 	msr	BASEPRI, fp
   1a756:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1a75a:	3601      	adds	r6, #1
   1a75c:	e723      	b.n	1a5a6 <register_events+0x16>
   1a75e:	bf00      	nop
   1a760:	20009af4 	.word	0x20009af4
   1a764:	0001fd89 	.word	0x0001fd89
   1a768:	0001fde2 	.word	0x0001fde2
   1a76c:	0001f995 	.word	0x0001f995
   1a770:	0001fdf7 	.word	0x0001fdf7
   1a774:	0001fdb6 	.word	0x0001fdb6
   1a778:	0001fdcd 	.word	0x0001fdcd
   1a77c:	00023717 	.word	0x00023717
   1a780:	00022960 	.word	0x00022960
   1a784:	00023738 	.word	0x00023738
   1a788:	00023755 	.word	0x00023755
   1a78c:	0002376f 	.word	0x0002376f
   1a790:	00023784 	.word	0x00023784
   1a794:	000237a0 	.word	0x000237a0
   1a798:	000237b1 	.word	0x000237b1
   1a79c:	000237ce 	.word	0x000237ce
   1a7a0:	000237e5 	.word	0x000237e5
   1a7a4:	00023800 	.word	0x00023800
   1a7a8:	00023819 	.word	0x00023819

0001a7ac <clear_event_registrations>:
{
   1a7ac:	2314      	movs	r3, #20
   1a7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7b2:	4615      	mov	r5, r2
	while (num_events--) {
   1a7b4:	460c      	mov	r4, r1
	event->poller = NULL;
   1a7b6:	2600      	movs	r6, #0
   1a7b8:	fb03 0001 	mla	r0, r3, r1, r0
   1a7bc:	4f4b      	ldr	r7, [pc, #300]	; (1a8ec <clear_event_registrations+0x140>)
	while (num_events--) {
   1a7be:	b90c      	cbnz	r4, 1a7c4 <clear_event_registrations+0x18>
}
   1a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   1a7c4:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1a7c8:	f1a0 0814 	sub.w	r8, r0, #20
   1a7cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   1a7d0:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   1a7d4:	2b08      	cmp	r3, #8
   1a7d6:	d842      	bhi.n	1a85e <clear_event_registrations+0xb2>
   1a7d8:	e8df f003 	tbb	[pc, r3]
   1a7dc:	41052555 	.word	0x41052555
   1a7e0:	41414116 	.word	0x41414116
   1a7e4:	33          	.byte	0x33
   1a7e5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a7e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1a7ea:	2b00      	cmp	r3, #0
   1a7ec:	d142      	bne.n	1a874 <clear_event_registrations+0xc8>
   1a7ee:	4940      	ldr	r1, [pc, #256]	; (1a8f0 <clear_event_registrations+0x144>)
   1a7f0:	23b6      	movs	r3, #182	; 0xb6
   1a7f2:	4a40      	ldr	r2, [pc, #256]	; (1a8f4 <clear_event_registrations+0x148>)
   1a7f4:	4840      	ldr	r0, [pc, #256]	; (1a8f8 <clear_event_registrations+0x14c>)
   1a7f6:	f000 fd19 	bl	1b22c <assert_print>
   1a7fa:	4840      	ldr	r0, [pc, #256]	; (1a8fc <clear_event_registrations+0x150>)
   1a7fc:	f000 fd16 	bl	1b22c <assert_print>
   1a800:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a802:	483c      	ldr	r0, [pc, #240]	; (1a8f4 <clear_event_registrations+0x148>)
   1a804:	f000 fd0b 	bl	1b21e <assert_post_action>
   1a808:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1a80c:	2b00      	cmp	r3, #0
   1a80e:	d131      	bne.n	1a874 <clear_event_registrations+0xc8>
   1a810:	493b      	ldr	r1, [pc, #236]	; (1a900 <clear_event_registrations+0x154>)
   1a812:	23ba      	movs	r3, #186	; 0xba
   1a814:	4a37      	ldr	r2, [pc, #220]	; (1a8f4 <clear_event_registrations+0x148>)
   1a816:	4838      	ldr	r0, [pc, #224]	; (1a8f8 <clear_event_registrations+0x14c>)
   1a818:	f000 fd08 	bl	1b22c <assert_print>
   1a81c:	4839      	ldr	r0, [pc, #228]	; (1a904 <clear_event_registrations+0x158>)
   1a81e:	f000 fd05 	bl	1b22c <assert_print>
   1a822:	21ba      	movs	r1, #186	; 0xba
   1a824:	e7ed      	b.n	1a802 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a826:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1a82a:	bb1b      	cbnz	r3, 1a874 <clear_event_registrations+0xc8>
   1a82c:	4936      	ldr	r1, [pc, #216]	; (1a908 <clear_event_registrations+0x15c>)
   1a82e:	23be      	movs	r3, #190	; 0xbe
   1a830:	4a30      	ldr	r2, [pc, #192]	; (1a8f4 <clear_event_registrations+0x148>)
   1a832:	4831      	ldr	r0, [pc, #196]	; (1a8f8 <clear_event_registrations+0x14c>)
   1a834:	f000 fcfa 	bl	1b22c <assert_print>
   1a838:	4834      	ldr	r0, [pc, #208]	; (1a90c <clear_event_registrations+0x160>)
   1a83a:	f000 fcf7 	bl	1b22c <assert_print>
   1a83e:	21be      	movs	r1, #190	; 0xbe
   1a840:	e7df      	b.n	1a802 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1a842:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1a846:	b9ab      	cbnz	r3, 1a874 <clear_event_registrations+0xc8>
   1a848:	4931      	ldr	r1, [pc, #196]	; (1a910 <clear_event_registrations+0x164>)
   1a84a:	23c2      	movs	r3, #194	; 0xc2
   1a84c:	4a29      	ldr	r2, [pc, #164]	; (1a8f4 <clear_event_registrations+0x148>)
   1a84e:	482a      	ldr	r0, [pc, #168]	; (1a8f8 <clear_event_registrations+0x14c>)
   1a850:	f000 fcec 	bl	1b22c <assert_print>
   1a854:	482f      	ldr	r0, [pc, #188]	; (1a914 <clear_event_registrations+0x168>)
   1a856:	f000 fce9 	bl	1b22c <assert_print>
   1a85a:	21c2      	movs	r1, #194	; 0xc2
   1a85c:	e7d1      	b.n	1a802 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   1a85e:	492e      	ldr	r1, [pc, #184]	; (1a918 <clear_event_registrations+0x16c>)
   1a860:	23cf      	movs	r3, #207	; 0xcf
   1a862:	4a24      	ldr	r2, [pc, #144]	; (1a8f4 <clear_event_registrations+0x148>)
   1a864:	4824      	ldr	r0, [pc, #144]	; (1a8f8 <clear_event_registrations+0x14c>)
   1a866:	f000 fce1 	bl	1b22c <assert_print>
   1a86a:	482c      	ldr	r0, [pc, #176]	; (1a91c <clear_event_registrations+0x170>)
   1a86c:	f000 fcde 	bl	1b22c <assert_print>
   1a870:	21cf      	movs	r1, #207	; 0xcf
   1a872:	e7c6      	b.n	1a802 <clear_event_registrations+0x56>
	return node->next != NULL;
   1a874:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1a878:	b12b      	cbz	r3, 1a886 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   1a87a:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   1a87e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a880:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   1a882:	e940 6605 	strd	r6, r6, [r0, #-20]
   1a886:	4638      	mov	r0, r7
   1a888:	f7fc ff1c 	bl	176c4 <z_spin_unlock_valid>
   1a88c:	b960      	cbnz	r0, 1a8a8 <clear_event_registrations+0xfc>
   1a88e:	23c2      	movs	r3, #194	; 0xc2
   1a890:	4a23      	ldr	r2, [pc, #140]	; (1a920 <clear_event_registrations+0x174>)
   1a892:	4924      	ldr	r1, [pc, #144]	; (1a924 <clear_event_registrations+0x178>)
   1a894:	4818      	ldr	r0, [pc, #96]	; (1a8f8 <clear_event_registrations+0x14c>)
   1a896:	f000 fcc9 	bl	1b22c <assert_print>
   1a89a:	4914      	ldr	r1, [pc, #80]	; (1a8ec <clear_event_registrations+0x140>)
   1a89c:	4822      	ldr	r0, [pc, #136]	; (1a928 <clear_event_registrations+0x17c>)
   1a89e:	f000 fcc5 	bl	1b22c <assert_print>
   1a8a2:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a8a4:	481e      	ldr	r0, [pc, #120]	; (1a920 <clear_event_registrations+0x174>)
   1a8a6:	e7ad      	b.n	1a804 <clear_event_registrations+0x58>
   1a8a8:	f385 8811 	msr	BASEPRI, r5
   1a8ac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a8b0:	f04f 0320 	mov.w	r3, #32
   1a8b4:	f3ef 8511 	mrs	r5, BASEPRI
   1a8b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8bc:	f3bf 8f6f 	isb	sy
   1a8c0:	4638      	mov	r0, r7
   1a8c2:	f7fc fef1 	bl	176a8 <z_spin_lock_valid>
   1a8c6:	3c01      	subs	r4, #1
   1a8c8:	b958      	cbnz	r0, 1a8e2 <clear_event_registrations+0x136>
   1a8ca:	2394      	movs	r3, #148	; 0x94
   1a8cc:	4a14      	ldr	r2, [pc, #80]	; (1a920 <clear_event_registrations+0x174>)
   1a8ce:	4917      	ldr	r1, [pc, #92]	; (1a92c <clear_event_registrations+0x180>)
   1a8d0:	4809      	ldr	r0, [pc, #36]	; (1a8f8 <clear_event_registrations+0x14c>)
   1a8d2:	f000 fcab 	bl	1b22c <assert_print>
   1a8d6:	4905      	ldr	r1, [pc, #20]	; (1a8ec <clear_event_registrations+0x140>)
   1a8d8:	4815      	ldr	r0, [pc, #84]	; (1a930 <clear_event_registrations+0x184>)
   1a8da:	f000 fca7 	bl	1b22c <assert_print>
   1a8de:	2194      	movs	r1, #148	; 0x94
   1a8e0:	e7e0      	b.n	1a8a4 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   1a8e2:	4638      	mov	r0, r7
   1a8e4:	f7fc fefc 	bl	176e0 <z_spin_lock_set_owner>
	return k;
   1a8e8:	4640      	mov	r0, r8
   1a8ea:	e768      	b.n	1a7be <clear_event_registrations+0x12>
   1a8ec:	20009af4 	.word	0x20009af4
   1a8f0:	00023755 	.word	0x00023755
   1a8f4:	00023717 	.word	0x00023717
   1a8f8:	0001f995 	.word	0x0001f995
   1a8fc:	0002376f 	.word	0x0002376f
   1a900:	00023784 	.word	0x00023784
   1a904:	000237a0 	.word	0x000237a0
   1a908:	000237b1 	.word	0x000237b1
   1a90c:	000237ce 	.word	0x000237ce
   1a910:	000237e5 	.word	0x000237e5
   1a914:	00023800 	.word	0x00023800
   1a918:	00022960 	.word	0x00022960
   1a91c:	00023819 	.word	0x00023819
   1a920:	0001fd89 	.word	0x0001fd89
   1a924:	0001fdb6 	.word	0x0001fdb6
   1a928:	0001fdcd 	.word	0x0001fdcd
   1a92c:	0001fde2 	.word	0x0001fde2
   1a930:	0001fdf7 	.word	0x0001fdf7

0001a934 <k_poll_event_init>:
{
   1a934:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1a936:	b162      	cbz	r2, 1a952 <k_poll_event_init+0x1e>
   1a938:	4917      	ldr	r1, [pc, #92]	; (1a998 <k_poll_event_init+0x64>)
   1a93a:	232d      	movs	r3, #45	; 0x2d
   1a93c:	4a17      	ldr	r2, [pc, #92]	; (1a99c <k_poll_event_init+0x68>)
   1a93e:	4818      	ldr	r0, [pc, #96]	; (1a9a0 <k_poll_event_init+0x6c>)
   1a940:	f000 fc74 	bl	1b22c <assert_print>
   1a944:	4817      	ldr	r0, [pc, #92]	; (1a9a4 <k_poll_event_init+0x70>)
   1a946:	f000 fc71 	bl	1b22c <assert_print>
   1a94a:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1a94c:	4813      	ldr	r0, [pc, #76]	; (1a99c <k_poll_event_init+0x68>)
   1a94e:	f000 fc66 	bl	1b21e <assert_post_action>
   1a952:	293f      	cmp	r1, #63	; 0x3f
   1a954:	d90a      	bls.n	1a96c <k_poll_event_init+0x38>
   1a956:	4914      	ldr	r1, [pc, #80]	; (1a9a8 <k_poll_event_init+0x74>)
   1a958:	232f      	movs	r3, #47	; 0x2f
   1a95a:	4a10      	ldr	r2, [pc, #64]	; (1a99c <k_poll_event_init+0x68>)
   1a95c:	4810      	ldr	r0, [pc, #64]	; (1a9a0 <k_poll_event_init+0x6c>)
   1a95e:	f000 fc65 	bl	1b22c <assert_print>
   1a962:	4812      	ldr	r0, [pc, #72]	; (1a9ac <k_poll_event_init+0x78>)
   1a964:	f000 fc62 	bl	1b22c <assert_print>
   1a968:	212f      	movs	r1, #47	; 0x2f
   1a96a:	e7ef      	b.n	1a94c <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   1a96c:	b953      	cbnz	r3, 1a984 <k_poll_event_init+0x50>
   1a96e:	4910      	ldr	r1, [pc, #64]	; (1a9b0 <k_poll_event_init+0x7c>)
   1a970:	2330      	movs	r3, #48	; 0x30
   1a972:	4a0a      	ldr	r2, [pc, #40]	; (1a99c <k_poll_event_init+0x68>)
   1a974:	480a      	ldr	r0, [pc, #40]	; (1a9a0 <k_poll_event_init+0x6c>)
   1a976:	f000 fc59 	bl	1b22c <assert_print>
   1a97a:	480e      	ldr	r0, [pc, #56]	; (1a9b4 <k_poll_event_init+0x80>)
   1a97c:	f000 fc56 	bl	1b22c <assert_print>
   1a980:	2130      	movs	r1, #48	; 0x30
   1a982:	e7e3      	b.n	1a94c <k_poll_event_init+0x18>
	event->poller = NULL;
   1a984:	6082      	str	r2, [r0, #8]
	event->type = type;
   1a986:	0209      	lsls	r1, r1, #8
   1a988:	7b02      	ldrb	r2, [r0, #12]
   1a98a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1a98e:	4311      	orrs	r1, r2
	event->obj = obj;
   1a990:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   1a994:	bd08      	pop	{r3, pc}
   1a996:	bf00      	nop
   1a998:	0002382f 	.word	0x0002382f
   1a99c:	00023717 	.word	0x00023717
   1a9a0:	0001f995 	.word	0x0001f995
   1a9a4:	0002384f 	.word	0x0002384f
   1a9a8:	00023875 	.word	0x00023875
   1a9ac:	00023899 	.word	0x00023899
   1a9b0:	000238a9 	.word	0x000238a9
   1a9b4:	000238bc 	.word	0x000238bc

0001a9b8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1a9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9bc:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1a9be:	4b5c      	ldr	r3, [pc, #368]	; (1ab30 <z_impl_k_poll+0x178>)
{
   1a9c0:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   1a9c2:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   1a9c6:	2301      	movs	r3, #1
{
   1a9c8:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   1a9ca:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   1a9ce:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   1a9d2:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   1a9d6:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   1a9da:	f1bb 0f00 	cmp.w	fp, #0
   1a9de:	d00e      	beq.n	1a9fe <z_impl_k_poll+0x46>
   1a9e0:	4954      	ldr	r1, [pc, #336]	; (1ab34 <z_impl_k_poll+0x17c>)
   1a9e2:	f240 132d 	movw	r3, #301	; 0x12d
   1a9e6:	4a54      	ldr	r2, [pc, #336]	; (1ab38 <z_impl_k_poll+0x180>)
   1a9e8:	4854      	ldr	r0, [pc, #336]	; (1ab3c <z_impl_k_poll+0x184>)
   1a9ea:	f000 fc1f 	bl	1b22c <assert_print>
   1a9ee:	4854      	ldr	r0, [pc, #336]	; (1ab40 <z_impl_k_poll+0x188>)
   1a9f0:	f000 fc1c 	bl	1b22c <assert_print>
   1a9f4:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   1a9f8:	484f      	ldr	r0, [pc, #316]	; (1ab38 <z_impl_k_poll+0x180>)
   1a9fa:	f000 fc10 	bl	1b21e <assert_post_action>
   1a9fe:	b960      	cbnz	r0, 1aa1a <z_impl_k_poll+0x62>
   1aa00:	4950      	ldr	r1, [pc, #320]	; (1ab44 <z_impl_k_poll+0x18c>)
   1aa02:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1aa06:	4a4c      	ldr	r2, [pc, #304]	; (1ab38 <z_impl_k_poll+0x180>)
   1aa08:	484c      	ldr	r0, [pc, #304]	; (1ab3c <z_impl_k_poll+0x184>)
   1aa0a:	f000 fc0f 	bl	1b22c <assert_print>
   1aa0e:	484e      	ldr	r0, [pc, #312]	; (1ab48 <z_impl_k_poll+0x190>)
   1aa10:	f000 fc0c 	bl	1b22c <assert_print>
   1aa14:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1aa18:	e7ee      	b.n	1a9f8 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   1aa1a:	2900      	cmp	r1, #0
   1aa1c:	da0c      	bge.n	1aa38 <z_impl_k_poll+0x80>
   1aa1e:	494b      	ldr	r1, [pc, #300]	; (1ab4c <z_impl_k_poll+0x194>)
   1aa20:	f240 132f 	movw	r3, #303	; 0x12f
   1aa24:	4a44      	ldr	r2, [pc, #272]	; (1ab38 <z_impl_k_poll+0x180>)
   1aa26:	4845      	ldr	r0, [pc, #276]	; (1ab3c <z_impl_k_poll+0x184>)
   1aa28:	f000 fc00 	bl	1b22c <assert_print>
   1aa2c:	4848      	ldr	r0, [pc, #288]	; (1ab50 <z_impl_k_poll+0x198>)
   1aa2e:	f000 fbfd 	bl	1b22c <assert_print>
   1aa32:	f240 112f 	movw	r1, #303	; 0x12f
   1aa36:	e7df      	b.n	1a9f8 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1aa38:	ea57 0306 	orrs.w	r3, r7, r6
   1aa3c:	bf0c      	ite	eq
   1aa3e:	2301      	moveq	r3, #1
   1aa40:	2300      	movne	r3, #0
   1aa42:	f7ff fda5 	bl	1a590 <register_events>
   1aa46:	4681      	mov	r9, r0
   1aa48:	f04f 0320 	mov.w	r3, #32
   1aa4c:	f3ef 8a11 	mrs	sl, BASEPRI
   1aa50:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa58:	483e      	ldr	r0, [pc, #248]	; (1ab54 <z_impl_k_poll+0x19c>)
   1aa5a:	f7fc fe25 	bl	176a8 <z_spin_lock_valid>
   1aa5e:	b960      	cbnz	r0, 1aa7a <z_impl_k_poll+0xc2>
   1aa60:	2394      	movs	r3, #148	; 0x94
   1aa62:	4a3d      	ldr	r2, [pc, #244]	; (1ab58 <z_impl_k_poll+0x1a0>)
   1aa64:	493d      	ldr	r1, [pc, #244]	; (1ab5c <z_impl_k_poll+0x1a4>)
   1aa66:	4835      	ldr	r0, [pc, #212]	; (1ab3c <z_impl_k_poll+0x184>)
   1aa68:	f000 fbe0 	bl	1b22c <assert_print>
   1aa6c:	4939      	ldr	r1, [pc, #228]	; (1ab54 <z_impl_k_poll+0x19c>)
   1aa6e:	483c      	ldr	r0, [pc, #240]	; (1ab60 <z_impl_k_poll+0x1a8>)
   1aa70:	f000 fbdc 	bl	1b22c <assert_print>
   1aa74:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa76:	4838      	ldr	r0, [pc, #224]	; (1ab58 <z_impl_k_poll+0x1a0>)
   1aa78:	e7bf      	b.n	1a9fa <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   1aa7a:	4836      	ldr	r0, [pc, #216]	; (1ab54 <z_impl_k_poll+0x19c>)
   1aa7c:	f7fc fe30 	bl	176e0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1aa80:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   1aa84:	b9e4      	cbnz	r4, 1aac0 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   1aa86:	4628      	mov	r0, r5
   1aa88:	4652      	mov	r2, sl
   1aa8a:	4649      	mov	r1, r9
   1aa8c:	f7ff fe8e 	bl	1a7ac <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa90:	4830      	ldr	r0, [pc, #192]	; (1ab54 <z_impl_k_poll+0x19c>)
   1aa92:	f7fc fe17 	bl	176c4 <z_spin_unlock_valid>
   1aa96:	b958      	cbnz	r0, 1aab0 <z_impl_k_poll+0xf8>
   1aa98:	23c2      	movs	r3, #194	; 0xc2
   1aa9a:	4a2f      	ldr	r2, [pc, #188]	; (1ab58 <z_impl_k_poll+0x1a0>)
   1aa9c:	4931      	ldr	r1, [pc, #196]	; (1ab64 <z_impl_k_poll+0x1ac>)
   1aa9e:	4827      	ldr	r0, [pc, #156]	; (1ab3c <z_impl_k_poll+0x184>)
   1aaa0:	f000 fbc4 	bl	1b22c <assert_print>
   1aaa4:	492b      	ldr	r1, [pc, #172]	; (1ab54 <z_impl_k_poll+0x19c>)
   1aaa6:	4830      	ldr	r0, [pc, #192]	; (1ab68 <z_impl_k_poll+0x1b0>)
   1aaa8:	f000 fbc0 	bl	1b22c <assert_print>
   1aaac:	21c2      	movs	r1, #194	; 0xc2
   1aaae:	e7e2      	b.n	1aa76 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   1aab0:	f38a 8811 	msr	BASEPRI, sl
   1aab4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1aab8:	4620      	mov	r0, r4
   1aaba:	b003      	add	sp, #12
   1aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1aac0:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   1aac4:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1aac8:	d10b      	bne.n	1aae2 <z_impl_k_poll+0x12a>
   1aaca:	4822      	ldr	r0, [pc, #136]	; (1ab54 <z_impl_k_poll+0x19c>)
   1aacc:	f7fc fdfa 	bl	176c4 <z_spin_unlock_valid>
   1aad0:	2800      	cmp	r0, #0
   1aad2:	d0e1      	beq.n	1aa98 <z_impl_k_poll+0xe0>
   1aad4:	f38a 8811 	msr	BASEPRI, sl
   1aad8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1aadc:	f06f 040a 	mvn.w	r4, #10
   1aae0:	e7ea      	b.n	1aab8 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1aae2:	4651      	mov	r1, sl
   1aae4:	e9cd 7600 	strd	r7, r6, [sp]
   1aae8:	4a20      	ldr	r2, [pc, #128]	; (1ab6c <z_impl_k_poll+0x1b4>)
   1aaea:	481a      	ldr	r0, [pc, #104]	; (1ab54 <z_impl_k_poll+0x19c>)
   1aaec:	f7fe fbd2 	bl	19294 <z_pend_curr>
   1aaf0:	4604      	mov	r4, r0
	__asm__ volatile(
   1aaf2:	f04f 0320 	mov.w	r3, #32
   1aaf6:	f3ef 8611 	mrs	r6, BASEPRI
   1aafa:	f383 8812 	msr	BASEPRI_MAX, r3
   1aafe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab02:	4814      	ldr	r0, [pc, #80]	; (1ab54 <z_impl_k_poll+0x19c>)
   1ab04:	f7fc fdd0 	bl	176a8 <z_spin_lock_valid>
   1ab08:	2800      	cmp	r0, #0
   1ab0a:	d0a9      	beq.n	1aa60 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   1ab0c:	4811      	ldr	r0, [pc, #68]	; (1ab54 <z_impl_k_poll+0x19c>)
   1ab0e:	f7fc fde7 	bl	176e0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1ab12:	4628      	mov	r0, r5
   1ab14:	4632      	mov	r2, r6
   1ab16:	4649      	mov	r1, r9
   1ab18:	f7ff fe48 	bl	1a7ac <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab1c:	480d      	ldr	r0, [pc, #52]	; (1ab54 <z_impl_k_poll+0x19c>)
   1ab1e:	f7fc fdd1 	bl	176c4 <z_spin_unlock_valid>
   1ab22:	2800      	cmp	r0, #0
   1ab24:	d0b8      	beq.n	1aa98 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   1ab26:	f386 8811 	msr	BASEPRI, r6
   1ab2a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1ab2e:	e7c3      	b.n	1aab8 <z_impl_k_poll+0x100>
   1ab30:	20009a9c 	.word	0x20009a9c
   1ab34:	000232a0 	.word	0x000232a0
   1ab38:	00023717 	.word	0x00023717
   1ab3c:	0001f995 	.word	0x0001f995
   1ab40:	00022009 	.word	0x00022009
   1ab44:	000238d6 	.word	0x000238d6
   1ab48:	000238ec 	.word	0x000238ec
   1ab4c:	000238fb 	.word	0x000238fb
   1ab50:	0002390b 	.word	0x0002390b
   1ab54:	20009af4 	.word	0x20009af4
   1ab58:	0001fd89 	.word	0x0001fd89
   1ab5c:	0001fde2 	.word	0x0001fde2
   1ab60:	0001fdf7 	.word	0x0001fdf7
   1ab64:	0001fdb6 	.word	0x0001fdb6
   1ab68:	0001fdcd 	.word	0x0001fdcd
   1ab6c:	2000837c 	.word	0x2000837c

0001ab70 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1ab70:	b570      	push	{r4, r5, r6, lr}
   1ab72:	4604      	mov	r4, r0
   1ab74:	460d      	mov	r5, r1
	__asm__ volatile(
   1ab76:	f04f 0320 	mov.w	r3, #32
   1ab7a:	f3ef 8611 	mrs	r6, BASEPRI
   1ab7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab86:	4820      	ldr	r0, [pc, #128]	; (1ac08 <z_impl_k_poll_signal_raise+0x98>)
   1ab88:	f7fc fd8e 	bl	176a8 <z_spin_lock_valid>
   1ab8c:	b968      	cbnz	r0, 1abaa <z_impl_k_poll_signal_raise+0x3a>
   1ab8e:	2394      	movs	r3, #148	; 0x94
   1ab90:	4a1e      	ldr	r2, [pc, #120]	; (1ac0c <z_impl_k_poll_signal_raise+0x9c>)
   1ab92:	491f      	ldr	r1, [pc, #124]	; (1ac10 <z_impl_k_poll_signal_raise+0xa0>)
   1ab94:	481f      	ldr	r0, [pc, #124]	; (1ac14 <z_impl_k_poll_signal_raise+0xa4>)
   1ab96:	f000 fb49 	bl	1b22c <assert_print>
   1ab9a:	491b      	ldr	r1, [pc, #108]	; (1ac08 <z_impl_k_poll_signal_raise+0x98>)
   1ab9c:	481e      	ldr	r0, [pc, #120]	; (1ac18 <z_impl_k_poll_signal_raise+0xa8>)
   1ab9e:	f000 fb45 	bl	1b22c <assert_print>
   1aba2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aba4:	4819      	ldr	r0, [pc, #100]	; (1ac0c <z_impl_k_poll_signal_raise+0x9c>)
   1aba6:	f000 fb3a 	bl	1b21e <assert_post_action>
	z_spin_lock_set_owner(l);
   1abaa:	4817      	ldr	r0, [pc, #92]	; (1ac08 <z_impl_k_poll_signal_raise+0x98>)
   1abac:	f7fc fd98 	bl	176e0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   1abb0:	2101      	movs	r1, #1
	return list->head == list;
   1abb2:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   1abb4:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1abb6:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   1abb8:	60a1      	str	r1, [r4, #8]
   1abba:	d10f      	bne.n	1abdc <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1abbc:	4812      	ldr	r0, [pc, #72]	; (1ac08 <z_impl_k_poll_signal_raise+0x98>)
   1abbe:	f7fc fd81 	bl	176c4 <z_spin_unlock_valid>
   1abc2:	b9d8      	cbnz	r0, 1abfc <z_impl_k_poll_signal_raise+0x8c>
   1abc4:	23c2      	movs	r3, #194	; 0xc2
   1abc6:	4a11      	ldr	r2, [pc, #68]	; (1ac0c <z_impl_k_poll_signal_raise+0x9c>)
   1abc8:	4914      	ldr	r1, [pc, #80]	; (1ac1c <z_impl_k_poll_signal_raise+0xac>)
   1abca:	4812      	ldr	r0, [pc, #72]	; (1ac14 <z_impl_k_poll_signal_raise+0xa4>)
   1abcc:	f000 fb2e 	bl	1b22c <assert_print>
   1abd0:	490d      	ldr	r1, [pc, #52]	; (1ac08 <z_impl_k_poll_signal_raise+0x98>)
   1abd2:	4813      	ldr	r0, [pc, #76]	; (1ac20 <z_impl_k_poll_signal_raise+0xb0>)
   1abd4:	f000 fb2a 	bl	1b22c <assert_print>
   1abd8:	21c2      	movs	r1, #194	; 0xc2
   1abda:	e7e3      	b.n	1aba4 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   1abdc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1abe0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1abe2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1abe4:	2300      	movs	r3, #0
	node->prev = NULL;
   1abe6:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1abea:	f003 fe25 	bl	1e838 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1abee:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1abf0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1abf2:	4805      	ldr	r0, [pc, #20]	; (1ac08 <z_impl_k_poll_signal_raise+0x98>)
   1abf4:	f7fe f880 	bl	18cf8 <z_reschedule>
	return rc;
}
   1abf8:	4620      	mov	r0, r4
   1abfa:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1abfc:	f386 8811 	msr	BASEPRI, r6
   1ac00:	f3bf 8f6f 	isb	sy
		return 0;
   1ac04:	2400      	movs	r4, #0
   1ac06:	e7f7      	b.n	1abf8 <z_impl_k_poll_signal_raise+0x88>
   1ac08:	20009af4 	.word	0x20009af4
   1ac0c:	0001fd89 	.word	0x0001fd89
   1ac10:	0001fde2 	.word	0x0001fde2
   1ac14:	0001f995 	.word	0x0001f995
   1ac18:	0001fdf7 	.word	0x0001fdf7
   1ac1c:	0001fdb6 	.word	0x0001fdb6
   1ac20:	0001fdcd 	.word	0x0001fdcd

0001ac24 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1ac24:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   1ac26:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   1ac2a:	4606      	mov	r6, r0
   1ac2c:	460d      	mov	r5, r1
   1ac2e:	d220      	bcs.n	1ac72 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1ac30:	f04f 0800 	mov.w	r8, #0
   1ac34:	f04f 0900 	mov.w	r9, #0
   1ac38:	f041 0104 	orr.w	r1, r1, #4
   1ac3c:	e9cd 8900 	strd	r8, r9, [sp]
   1ac40:	f7fc fa2e 	bl	170a0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1ac44:	4604      	mov	r4, r0
   1ac46:	b1a0      	cbz	r0, 1ac72 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   1ac48:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1ac4c:	b195      	cbz	r5, 1ac74 <z_heap_aligned_alloc+0x50>
   1ac4e:	1e6b      	subs	r3, r5, #1
   1ac50:	421c      	tst	r4, r3
   1ac52:	d00f      	beq.n	1ac74 <z_heap_aligned_alloc+0x50>
   1ac54:	2325      	movs	r3, #37	; 0x25
   1ac56:	4a09      	ldr	r2, [pc, #36]	; (1ac7c <z_heap_aligned_alloc+0x58>)
   1ac58:	4909      	ldr	r1, [pc, #36]	; (1ac80 <z_heap_aligned_alloc+0x5c>)
   1ac5a:	480a      	ldr	r0, [pc, #40]	; (1ac84 <z_heap_aligned_alloc+0x60>)
   1ac5c:	f000 fae6 	bl	1b22c <assert_print>
   1ac60:	4621      	mov	r1, r4
   1ac62:	4809      	ldr	r0, [pc, #36]	; (1ac88 <z_heap_aligned_alloc+0x64>)
   1ac64:	462a      	mov	r2, r5
   1ac66:	f000 fae1 	bl	1b22c <assert_print>
   1ac6a:	2125      	movs	r1, #37	; 0x25
   1ac6c:	4803      	ldr	r0, [pc, #12]	; (1ac7c <z_heap_aligned_alloc+0x58>)
   1ac6e:	f000 fad6 	bl	1b21e <assert_post_action>
		return NULL;
   1ac72:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   1ac74:	4620      	mov	r0, r4
   1ac76:	b002      	add	sp, #8
   1ac78:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1ac7c:	00023918 	.word	0x00023918
   1ac80:	0002393c 	.word	0x0002393c
   1ac84:	0001f995 	.word	0x0001f995
   1ac88:	0002396e 	.word	0x0002396e

0001ac8c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1ac8c:	2803      	cmp	r0, #3
{
   1ac8e:	460a      	mov	r2, r1
   1ac90:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   1ac92:	d901      	bls.n	1ac98 <k_aligned_alloc+0xc>
   1ac94:	0783      	lsls	r3, r0, #30
   1ac96:	d00c      	beq.n	1acb2 <k_aligned_alloc+0x26>
   1ac98:	4910      	ldr	r1, [pc, #64]	; (1acdc <k_aligned_alloc+0x50>)
   1ac9a:	2342      	movs	r3, #66	; 0x42
   1ac9c:	4a10      	ldr	r2, [pc, #64]	; (1ace0 <k_aligned_alloc+0x54>)
   1ac9e:	4811      	ldr	r0, [pc, #68]	; (1ace4 <k_aligned_alloc+0x58>)
   1aca0:	f000 fac4 	bl	1b22c <assert_print>
   1aca4:	4810      	ldr	r0, [pc, #64]	; (1ace8 <k_aligned_alloc+0x5c>)
   1aca6:	f000 fac1 	bl	1b22c <assert_print>
   1acaa:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1acac:	480c      	ldr	r0, [pc, #48]	; (1ace0 <k_aligned_alloc+0x54>)
   1acae:	f000 fab6 	bl	1b21e <assert_post_action>
   1acb2:	1e43      	subs	r3, r0, #1
   1acb4:	4203      	tst	r3, r0
   1acb6:	d00a      	beq.n	1acce <k_aligned_alloc+0x42>
   1acb8:	490c      	ldr	r1, [pc, #48]	; (1acec <k_aligned_alloc+0x60>)
   1acba:	2346      	movs	r3, #70	; 0x46
   1acbc:	4a08      	ldr	r2, [pc, #32]	; (1ace0 <k_aligned_alloc+0x54>)
   1acbe:	4809      	ldr	r0, [pc, #36]	; (1ace4 <k_aligned_alloc+0x58>)
   1acc0:	f000 fab4 	bl	1b22c <assert_print>
   1acc4:	480a      	ldr	r0, [pc, #40]	; (1acf0 <k_aligned_alloc+0x64>)
   1acc6:	f000 fab1 	bl	1b22c <assert_print>
   1acca:	2146      	movs	r1, #70	; 0x46
   1accc:	e7ee      	b.n	1acac <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1acce:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   1acd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1acd4:	4807      	ldr	r0, [pc, #28]	; (1acf4 <k_aligned_alloc+0x68>)
   1acd6:	f7ff bfa5 	b.w	1ac24 <z_heap_aligned_alloc>
   1acda:	bf00      	nop
   1acdc:	00023996 	.word	0x00023996
   1ace0:	00023918 	.word	0x00023918
   1ace4:	0001f995 	.word	0x0001f995
   1ace8:	000239d3 	.word	0x000239d3
   1acec:	0001fbf3 	.word	0x0001fbf3
   1acf0:	0001fc0e 	.word	0x0001fc0e
   1acf4:	20008520 	.word	0x20008520

0001acf8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   1acf8:	4b01      	ldr	r3, [pc, #4]	; (1ad00 <k_thread_system_pool_assign+0x8>)
   1acfa:	6743      	str	r3, [r0, #116]	; 0x74
}
   1acfc:	4770      	bx	lr
   1acfe:	bf00      	nop
   1ad00:	20008520 	.word	0x20008520

0001ad04 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1ad04:	b538      	push	{r3, r4, r5, lr}
   1ad06:	4604      	mov	r4, r0
   1ad08:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1ad0a:	f003 fc19 	bl	1e540 <k_is_in_isr>
   1ad0e:	b920      	cbnz	r0, 1ad1a <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1ad10:	4b06      	ldr	r3, [pc, #24]	; (1ad2c <z_thread_aligned_alloc+0x28>)
   1ad12:	689b      	ldr	r3, [r3, #8]
   1ad14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1ad16:	b90b      	cbnz	r3, 1ad1c <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   1ad18:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1ad1a:	4b05      	ldr	r3, [pc, #20]	; (1ad30 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   1ad1c:	462a      	mov	r2, r5
   1ad1e:	4621      	mov	r1, r4
   1ad20:	4618      	mov	r0, r3
}
   1ad22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1ad26:	f7ff bf7d 	b.w	1ac24 <z_heap_aligned_alloc>
   1ad2a:	bf00      	nop
   1ad2c:	20009a9c 	.word	0x20009a9c
   1ad30:	20008520 	.word	0x20008520

0001ad34 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1ad34:	4801      	ldr	r0, [pc, #4]	; (1ad3c <boot_banner+0x8>)
   1ad36:	f000 b871 	b.w	1ae1c <printk>
   1ad3a:	bf00      	nop
   1ad3c:	00023a00 	.word	0x00023a00

0001ad40 <z_log_msg_static_create.constprop.0>:
   1ad40:	2300      	movs	r3, #0
   1ad42:	f7ef bfdb 	b.w	acfc <z_impl_z_log_msg_static_create>

0001ad46 <cbpprintf_external>:
{
   1ad46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad4a:	4606      	mov	r6, r0
   1ad4c:	460d      	mov	r5, r1
   1ad4e:	4617      	mov	r7, r2
	if (buf == NULL) {
   1ad50:	4698      	mov	r8, r3
   1ad52:	b32b      	cbz	r3, 1ada0 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   1ad54:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   1ad58:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1ad5c:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1ad60:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1ad62:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1ad64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1ad68:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1ad6c:	441c      	add	r4, r3
   1ad6e:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1ad70:	45ca      	cmp	sl, r9
   1ad72:	d309      	bcc.n	1ad88 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1ad74:	4639      	mov	r1, r7
   1ad76:	4630      	mov	r0, r6
   1ad78:	46ac      	mov	ip, r5
   1ad7a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1ad7e:	f108 0308 	add.w	r3, r8, #8
}
   1ad82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1ad86:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1ad88:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1ad8c:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   1ad90:	4620      	mov	r0, r4
		*ps = s;
   1ad92:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1ad96:	f001 fa19 	bl	1c1cc <strlen>
   1ad9a:	3001      	adds	r0, #1
   1ad9c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1ad9e:	e7e7      	b.n	1ad70 <cbpprintf_external+0x2a>
}
   1ada0:	f06f 0015 	mvn.w	r0, #21
   1ada4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ada8 <is_ptr>:
{
   1ada8:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1adaa:	2500      	movs	r5, #0
{
   1adac:	4602      	mov	r2, r0
	bool mod = false;
   1adae:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1adb0:	4614      	mov	r4, r2
   1adb2:	f814 3b01 	ldrb.w	r3, [r4], #1
   1adb6:	b90b      	cbnz	r3, 1adbc <is_ptr+0x14>
					return false;
   1adb8:	4618      	mov	r0, r3
   1adba:	e009      	b.n	1add0 <is_ptr+0x28>
		if (mod) {
   1adbc:	b198      	cbz	r0, 1ade6 <is_ptr+0x3e>
			if (cnt == n) {
   1adbe:	428d      	cmp	r5, r1
   1adc0:	d107      	bne.n	1add2 <is_ptr+0x2a>
				if (c == 'p') {
   1adc2:	2b70      	cmp	r3, #112	; 0x70
   1adc4:	d004      	beq.n	1add0 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   1adc6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1adca:	2a3a      	cmp	r2, #58	; 0x3a
   1adcc:	d80b      	bhi.n	1ade6 <is_ptr+0x3e>
					return false;
   1adce:	2000      	movs	r0, #0
}
   1add0:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1add2:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   1add6:	2e3a      	cmp	r6, #58	; 0x3a
   1add8:	d805      	bhi.n	1ade6 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1adda:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1addc:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1adde:	1c94      	adds	r4, r2, #2
   1ade0:	2b00      	cmp	r3, #0
   1ade2:	d0e9      	beq.n	1adb8 <is_ptr+0x10>
   1ade4:	2000      	movs	r0, #0
		if (c == '%') {
   1ade6:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   1ade8:	4622      	mov	r2, r4
			mod = !mod;
   1adea:	bf08      	it	eq
   1adec:	f080 0001 	eoreq.w	r0, r0, #1
   1adf0:	e7de      	b.n	1adb0 <is_ptr+0x8>

0001adf2 <arch_printk_char_out>:
}
   1adf2:	2000      	movs	r0, #0
   1adf4:	4770      	bx	lr

0001adf6 <str_out>:
{
   1adf6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1adf8:	688a      	ldr	r2, [r1, #8]
   1adfa:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1adfc:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1adfe:	b114      	cbz	r4, 1ae06 <str_out+0x10>
   1ae00:	684b      	ldr	r3, [r1, #4]
   1ae02:	4293      	cmp	r3, r2
   1ae04:	dc01      	bgt.n	1ae0a <str_out+0x14>
		ctx->count++;
   1ae06:	608d      	str	r5, [r1, #8]
}
   1ae08:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1ae0a:	3b01      	subs	r3, #1
   1ae0c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1ae0e:	bf08      	it	eq
   1ae10:	2200      	moveq	r2, #0
   1ae12:	608d      	str	r5, [r1, #8]
   1ae14:	bf0c      	ite	eq
   1ae16:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1ae18:	54a0      	strbne	r0, [r4, r2]
   1ae1a:	e7f5      	b.n	1ae08 <str_out+0x12>

0001ae1c <printk>:
{
   1ae1c:	b40f      	push	{r0, r1, r2, r3}
   1ae1e:	b507      	push	{r0, r1, r2, lr}
   1ae20:	a904      	add	r1, sp, #16
   1ae22:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1ae26:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1ae28:	f7ee f830 	bl	8e8c <vprintk>
}
   1ae2c:	b003      	add	sp, #12
   1ae2e:	f85d eb04 	ldr.w	lr, [sp], #4
   1ae32:	b004      	add	sp, #16
   1ae34:	4770      	bx	lr

0001ae36 <snprintk>:
{
   1ae36:	b40c      	push	{r2, r3}
   1ae38:	b507      	push	{r0, r1, r2, lr}
   1ae3a:	ab04      	add	r3, sp, #16
   1ae3c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1ae40:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1ae42:	f7ee f831 	bl	8ea8 <vsnprintk>
}
   1ae46:	b003      	add	sp, #12
   1ae48:	f85d eb04 	ldr.w	lr, [sp], #4
   1ae4c:	b002      	add	sp, #8
   1ae4e:	4770      	bx	lr

0001ae50 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ae50:	4604      	mov	r4, r0
   1ae52:	b508      	push	{r3, lr}
   1ae54:	4608      	mov	r0, r1
   1ae56:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1ae58:	461a      	mov	r2, r3
   1ae5a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1ae5c:	f7fe fe62 	bl	19b24 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1ae60:	f7f1 fe9a 	bl	cb98 <z_impl_k_thread_abort>

0001ae64 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   1ae64:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1ae68:	8840      	ldrh	r0, [r0, #2]
}
   1ae6a:	0840      	lsrs	r0, r0, #1
   1ae6c:	4770      	bx	lr

0001ae6e <free_list_add>:
{
   1ae6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae70:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ae72:	f7ff fff7 	bl	1ae64 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1ae76:	fab0 f080 	clz	r0, r0
   1ae7a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1ae7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1ae82:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   1ae86:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   1ae88:	1d17      	adds	r7, r2, #4
{
   1ae8a:	460c      	mov	r4, r1
   1ae8c:	3206      	adds	r2, #6
   1ae8e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1ae90:	b956      	cbnz	r6, 1aea8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1ae92:	2101      	movs	r1, #1
   1ae94:	fa01 f000 	lsl.w	r0, r1, r0
   1ae98:	68d9      	ldr	r1, [r3, #12]
   1ae9a:	4301      	orrs	r1, r0
   1ae9c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1ae9e:	f8cc 4010 	str.w	r4, [ip, #16]
   1aea2:	53dd      	strh	r5, [r3, r7]
   1aea4:	529d      	strh	r5, [r3, r2]
}
   1aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1aea8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1aeaa:	3104      	adds	r1, #4
   1aeac:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1aeae:	53d8      	strh	r0, [r3, r7]
   1aeb0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1aeb4:	529e      	strh	r6, [r3, r2]
   1aeb6:	80c5      	strh	r5, [r0, #6]
   1aeb8:	525d      	strh	r5, [r3, r1]
   1aeba:	e7f4      	b.n	1aea6 <free_list_add+0x38>

0001aebc <free_list_remove_bidx>:
{
   1aebc:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1aebe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1aec2:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1aec4:	4299      	cmp	r1, r3
   1aec6:	f102 0104 	add.w	r1, r2, #4
   1aeca:	d10a      	bne.n	1aee2 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1aecc:	2301      	movs	r3, #1
   1aece:	fa03 f202 	lsl.w	r2, r3, r2
   1aed2:	68c3      	ldr	r3, [r0, #12]
   1aed4:	ea23 0302 	bic.w	r3, r3, r2
   1aed8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1aeda:	2300      	movs	r3, #0
   1aedc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1aee0:	bd10      	pop	{r4, pc}
   1aee2:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1aee4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1aee8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1aeec:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1aef0:	80cb      	strh	r3, [r1, #6]
   1aef2:	8082      	strh	r2, [r0, #4]
}
   1aef4:	e7f4      	b.n	1aee0 <free_list_remove_bidx+0x24>

0001aef6 <free_list_remove>:
{
   1aef6:	b508      	push	{r3, lr}
   1aef8:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1aefa:	f7ff ffb3 	bl	1ae64 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1aefe:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1af02:	4618      	mov	r0, r3
}
   1af04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1af08:	f1c2 021f 	rsb	r2, r2, #31
   1af0c:	f7ff bfd6 	b.w	1aebc <free_list_remove_bidx>

0001af10 <alloc_chunk>:
{
   1af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1af14:	fab1 f581 	clz	r5, r1
   1af18:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   1af1c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   1af20:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1af24:	4603      	mov	r3, r0
   1af26:	460e      	mov	r6, r1
	if (b->next) {
   1af28:	b1c2      	cbz	r2, 1af5c <alloc_chunk+0x4c>
   1af2a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1af2c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1af30:	4618      	mov	r0, r3
   1af32:	4621      	mov	r1, r4
   1af34:	f7ff ff96 	bl	1ae64 <chunk_size>
   1af38:	42b0      	cmp	r0, r6
   1af3a:	d306      	bcc.n	1af4a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1af3c:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   1af3e:	4618      	mov	r0, r3
   1af40:	f7ff ffbc 	bl	1aebc <free_list_remove_bidx>
}
   1af44:	4620      	mov	r0, r4
   1af46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1af4a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1af4e:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   1af50:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1af52:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1af56:	d001      	beq.n	1af5c <alloc_chunk+0x4c>
   1af58:	4282      	cmp	r2, r0
   1af5a:	d1e7      	bne.n	1af2c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1af5c:	f04f 34ff 	mov.w	r4, #4294967295
   1af60:	f1c5 0220 	rsb	r2, r5, #32
   1af64:	4094      	lsls	r4, r2
   1af66:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1af68:	4014      	ands	r4, r2
   1af6a:	d0eb      	beq.n	1af44 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1af6c:	fa94 f2a4 	rbit	r2, r4
   1af70:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1af74:	1d11      	adds	r1, r2, #4
   1af76:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1af7a:	4621      	mov	r1, r4
   1af7c:	e7df      	b.n	1af3e <alloc_chunk+0x2e>

0001af7e <merge_chunks>:
{
   1af7e:	b538      	push	{r3, r4, r5, lr}
   1af80:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1af82:	f7ff ff6f 	bl	1ae64 <chunk_size>
{
   1af86:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1af88:	4604      	mov	r4, r0
   1af8a:	4611      	mov	r1, r2
   1af8c:	4618      	mov	r0, r3
   1af8e:	f7ff ff69 	bl	1ae64 <chunk_size>
   1af92:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1af94:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1af96:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1af9a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1af9c:	4618      	mov	r0, r3
   1af9e:	f7ff ff61 	bl	1ae64 <chunk_size>
	void *cmem = &buf[c];
   1afa2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1afa4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1afa8:	bd38      	pop	{r3, r4, r5, pc}

0001afaa <split_chunks>:
{
   1afaa:	b538      	push	{r3, r4, r5, lr}
   1afac:	460c      	mov	r4, r1
   1afae:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1afb0:	f7ff ff58 	bl	1ae64 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   1afb4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1afb6:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1afb8:	4405      	add	r5, r0
   1afba:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1afbe:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1afc0:	8060      	strh	r0, [r4, #2]
   1afc2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1afc6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1afc8:	8044      	strh	r4, [r0, #2]
   1afca:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1afce:	4618      	mov	r0, r3
   1afd0:	4611      	mov	r1, r2
   1afd2:	f7ff ff47 	bl	1ae64 <chunk_size>
	void *cmem = &buf[c];
   1afd6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1afd8:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1afdc:	bd38      	pop	{r3, r4, r5, pc}

0001afde <free_chunk>:
{
   1afde:	b538      	push	{r3, r4, r5, lr}
   1afe0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1afe2:	f7ff ff3f 	bl	1ae64 <chunk_size>
   1afe6:	460c      	mov	r4, r1
   1afe8:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1afea:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1afee:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1aff0:	07da      	lsls	r2, r3, #31
   1aff2:	d40a      	bmi.n	1b00a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1aff4:	4628      	mov	r0, r5
   1aff6:	f7ff ff7e 	bl	1aef6 <free_list_remove>
	return c + chunk_size(h, c);
   1affa:	4621      	mov	r1, r4
   1affc:	4628      	mov	r0, r5
   1affe:	f7ff ff31 	bl	1ae64 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1b002:	1822      	adds	r2, r4, r0
   1b004:	4628      	mov	r0, r5
   1b006:	f7ff ffba 	bl	1af7e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1b00a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1b00e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1b010:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b014:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1b016:	07db      	lsls	r3, r3, #31
   1b018:	d40c      	bmi.n	1b034 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1b01a:	4628      	mov	r0, r5
   1b01c:	f7ff ff6b 	bl	1aef6 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1b020:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1b024:	4622      	mov	r2, r4
   1b026:	1a61      	subs	r1, r4, r1
   1b028:	4628      	mov	r0, r5
   1b02a:	f7ff ffa8 	bl	1af7e <merge_chunks>
   1b02e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1b032:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1b034:	4621      	mov	r1, r4
   1b036:	4628      	mov	r0, r5
}
   1b038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1b03c:	f7ff bf17 	b.w	1ae6e <free_list_add>

0001b040 <sys_heap_alloc>:
{
   1b040:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1b042:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1b044:	b909      	cbnz	r1, 1b04a <sys_heap_alloc+0xa>
		return NULL;
   1b046:	2000      	movs	r0, #0
}
   1b048:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1b04a:	68ab      	ldr	r3, [r5, #8]
   1b04c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1b050:	d9f9      	bls.n	1b046 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b052:	310b      	adds	r1, #11
   1b054:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1b056:	4621      	mov	r1, r4
   1b058:	4628      	mov	r0, r5
   1b05a:	f7ff ff59 	bl	1af10 <alloc_chunk>
	if (c == 0U) {
   1b05e:	4606      	mov	r6, r0
   1b060:	2800      	cmp	r0, #0
   1b062:	d0f0      	beq.n	1b046 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1b064:	4601      	mov	r1, r0
   1b066:	4628      	mov	r0, r5
   1b068:	f7ff fefc 	bl	1ae64 <chunk_size>
   1b06c:	42a0      	cmp	r0, r4
   1b06e:	d907      	bls.n	1b080 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1b070:	4628      	mov	r0, r5
   1b072:	1932      	adds	r2, r6, r4
   1b074:	f7ff ff99 	bl	1afaa <split_chunks>
		free_list_add(h, c + chunk_sz);
   1b078:	4611      	mov	r1, r2
   1b07a:	4628      	mov	r0, r5
   1b07c:	f7ff fef7 	bl	1ae6e <free_list_add>
	void *cmem = &buf[c];
   1b080:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1b084:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b086:	8853      	ldrh	r3, [r2, #2]
   1b088:	3004      	adds	r0, #4
   1b08a:	f043 0301 	orr.w	r3, r3, #1
   1b08e:	8053      	strh	r3, [r2, #2]
	return mem;
   1b090:	e7da      	b.n	1b048 <sys_heap_alloc+0x8>

0001b092 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b092:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1b094:	f013 0307 	ands.w	r3, r3, #7
   1b098:	d105      	bne.n	1b0a6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1b09a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1b09c:	2b00      	cmp	r3, #0
   1b09e:	bf0c      	ite	eq
   1b0a0:	2000      	moveq	r0, #0
   1b0a2:	2003      	movne	r0, #3
   1b0a4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1b0a6:	2b02      	cmp	r3, #2
   1b0a8:	d105      	bne.n	1b0b6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1b0aa:	8bc0      	ldrh	r0, [r0, #30]
   1b0ac:	fab0 f080 	clz	r0, r0
   1b0b0:	0940      	lsrs	r0, r0, #5
   1b0b2:	0080      	lsls	r0, r0, #2
   1b0b4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1b0b6:	2b01      	cmp	r3, #1
   1b0b8:	d105      	bne.n	1b0c6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1b0ba:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1b0bc:	2b00      	cmp	r3, #0
   1b0be:	bf0c      	ite	eq
   1b0c0:	2000      	moveq	r0, #0
   1b0c2:	2005      	movne	r0, #5
   1b0c4:	4770      	bx	lr
	int evt = EVT_NOP;
   1b0c6:	2000      	movs	r0, #0
}
   1b0c8:	4770      	bx	lr

0001b0ca <validate_args>:
{
   1b0ca:	b510      	push	{r4, lr}
   1b0cc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1b0ce:	b100      	cbz	r0, 1b0d2 <validate_args+0x8>
   1b0d0:	b911      	cbnz	r1, 1b0d8 <validate_args+0xe>
		return -EINVAL;
   1b0d2:	f06f 0015 	mvn.w	r0, #21
}
   1b0d6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1b0d8:	1d08      	adds	r0, r1, #4
   1b0da:	f000 f82f 	bl	1b13c <sys_notify_validate>
	if ((rv == 0)
   1b0de:	2800      	cmp	r0, #0
   1b0e0:	d1f9      	bne.n	1b0d6 <validate_args+0xc>
	    && ((cli->notify.flags
   1b0e2:	68a3      	ldr	r3, [r4, #8]
   1b0e4:	2b03      	cmp	r3, #3
   1b0e6:	d9f6      	bls.n	1b0d6 <validate_args+0xc>
   1b0e8:	e7f3      	b.n	1b0d2 <validate_args+0x8>

0001b0ea <notify_one>:
{
   1b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0ee:	460d      	mov	r5, r1
   1b0f0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b0f2:	4619      	mov	r1, r3
   1b0f4:	1d28      	adds	r0, r5, #4
{
   1b0f6:	4690      	mov	r8, r2
   1b0f8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b0fa:	f7ee fadb 	bl	96b4 <sys_notify_finalize>
	if (cb) {
   1b0fe:	4604      	mov	r4, r0
   1b100:	b138      	cbz	r0, 1b112 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1b102:	4633      	mov	r3, r6
   1b104:	4642      	mov	r2, r8
   1b106:	4629      	mov	r1, r5
   1b108:	4638      	mov	r0, r7
   1b10a:	46a4      	mov	ip, r4
}
   1b10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1b110:	4760      	bx	ip
}
   1b112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b116 <onoff_manager_init>:
{
   1b116:	b538      	push	{r3, r4, r5, lr}
   1b118:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1b11a:	4605      	mov	r5, r0
   1b11c:	b158      	cbz	r0, 1b136 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1b11e:	b151      	cbz	r1, 1b136 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1b120:	680b      	ldr	r3, [r1, #0]
   1b122:	b143      	cbz	r3, 1b136 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1b124:	684b      	ldr	r3, [r1, #4]
   1b126:	b133      	cbz	r3, 1b136 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b128:	2220      	movs	r2, #32
   1b12a:	2100      	movs	r1, #0
   1b12c:	f001 f898 	bl	1c260 <memset>
	return 0;
   1b130:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b132:	612c      	str	r4, [r5, #16]
}
   1b134:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b136:	f06f 0015 	mvn.w	r0, #21
   1b13a:	e7fb      	b.n	1b134 <onoff_manager_init+0x1e>

0001b13c <sys_notify_validate>:
	if (notify == NULL) {
   1b13c:	4603      	mov	r3, r0
   1b13e:	b140      	cbz	r0, 1b152 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b140:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b142:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1b146:	2a02      	cmp	r2, #2
   1b148:	d006      	beq.n	1b158 <sys_notify_validate+0x1c>
   1b14a:	2a03      	cmp	r2, #3
   1b14c:	d004      	beq.n	1b158 <sys_notify_validate+0x1c>
   1b14e:	2a01      	cmp	r2, #1
   1b150:	d005      	beq.n	1b15e <sys_notify_validate+0x22>
   1b152:	f06f 0015 	mvn.w	r0, #21
}
   1b156:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1b158:	681a      	ldr	r2, [r3, #0]
   1b15a:	2a00      	cmp	r2, #0
   1b15c:	d0f9      	beq.n	1b152 <sys_notify_validate+0x16>
		notify->result = 0;
   1b15e:	2000      	movs	r0, #0
   1b160:	6098      	str	r0, [r3, #8]
   1b162:	4770      	bx	lr

0001b164 <encode_uint>:
{
   1b164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b168:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1b16a:	78d3      	ldrb	r3, [r2, #3]
{
   1b16c:	4680      	mov	r8, r0
	switch (specifier) {
   1b16e:	2b6f      	cmp	r3, #111	; 0x6f
{
   1b170:	460f      	mov	r7, r1
   1b172:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b174:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1b178:	d029      	beq.n	1b1ce <encode_uint+0x6a>
   1b17a:	d824      	bhi.n	1b1c6 <encode_uint+0x62>
		return 10;
   1b17c:	2b58      	cmp	r3, #88	; 0x58
   1b17e:	bf0c      	ite	eq
   1b180:	2610      	moveq	r6, #16
   1b182:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1b184:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1b188:	4632      	mov	r2, r6
   1b18a:	2300      	movs	r3, #0
   1b18c:	4640      	mov	r0, r8
   1b18e:	4639      	mov	r1, r7
   1b190:	f7ec ffe2 	bl	8158 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b194:	2a09      	cmp	r2, #9
   1b196:	b2d4      	uxtb	r4, r2
   1b198:	d81e      	bhi.n	1b1d8 <encode_uint+0x74>
   1b19a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1b19c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b19e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1b1a0:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b1a4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1b1a8:	d301      	bcc.n	1b1ae <encode_uint+0x4a>
   1b1aa:	45d1      	cmp	r9, sl
   1b1ac:	d811      	bhi.n	1b1d2 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1b1ae:	782b      	ldrb	r3, [r5, #0]
   1b1b0:	069b      	lsls	r3, r3, #26
   1b1b2:	d505      	bpl.n	1b1c0 <encode_uint+0x5c>
		if (radix == 8) {
   1b1b4:	2e08      	cmp	r6, #8
   1b1b6:	d115      	bne.n	1b1e4 <encode_uint+0x80>
			conv->altform_0 = true;
   1b1b8:	78ab      	ldrb	r3, [r5, #2]
   1b1ba:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1b1be:	70ab      	strb	r3, [r5, #2]
}
   1b1c0:	4648      	mov	r0, r9
   1b1c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1b1c6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1b1ca:	2b70      	cmp	r3, #112	; 0x70
   1b1cc:	e7d7      	b.n	1b17e <encode_uint+0x1a>
	switch (specifier) {
   1b1ce:	2608      	movs	r6, #8
   1b1d0:	e7d8      	b.n	1b184 <encode_uint+0x20>
		value /= radix;
   1b1d2:	4680      	mov	r8, r0
   1b1d4:	460f      	mov	r7, r1
   1b1d6:	e7d7      	b.n	1b188 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b1d8:	f1bb 0f19 	cmp.w	fp, #25
   1b1dc:	bf94      	ite	ls
   1b1de:	3437      	addls	r4, #55	; 0x37
   1b1e0:	3457      	addhi	r4, #87	; 0x57
   1b1e2:	e7db      	b.n	1b19c <encode_uint+0x38>
		} else if (radix == 16) {
   1b1e4:	2e10      	cmp	r6, #16
   1b1e6:	d1eb      	bne.n	1b1c0 <encode_uint+0x5c>
			conv->altform_0c = true;
   1b1e8:	78ab      	ldrb	r3, [r5, #2]
   1b1ea:	f043 0310 	orr.w	r3, r3, #16
   1b1ee:	e7e6      	b.n	1b1be <encode_uint+0x5a>

0001b1f0 <outs>:
{
   1b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1f4:	4607      	mov	r7, r0
   1b1f6:	4688      	mov	r8, r1
   1b1f8:	4615      	mov	r5, r2
   1b1fa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1b1fc:	4614      	mov	r4, r2
   1b1fe:	42b4      	cmp	r4, r6
   1b200:	d305      	bcc.n	1b20e <outs+0x1e>
   1b202:	b10e      	cbz	r6, 1b208 <outs+0x18>
	return (int)count;
   1b204:	1b60      	subs	r0, r4, r5
   1b206:	e008      	b.n	1b21a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1b208:	7823      	ldrb	r3, [r4, #0]
   1b20a:	2b00      	cmp	r3, #0
   1b20c:	d0fa      	beq.n	1b204 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1b20e:	4641      	mov	r1, r8
   1b210:	f814 0b01 	ldrb.w	r0, [r4], #1
   1b214:	47b8      	blx	r7
		if (rc < 0) {
   1b216:	2800      	cmp	r0, #0
   1b218:	daf1      	bge.n	1b1fe <outs+0xe>
}
   1b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b21e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1b21e:	4040      	eors	r0, r0
   1b220:	f380 8811 	msr	BASEPRI, r0
   1b224:	f04f 0004 	mov.w	r0, #4
   1b228:	df02      	svc	2
}
   1b22a:	4770      	bx	lr

0001b22c <assert_print>:

void assert_print(const char *fmt, ...)
{
   1b22c:	b40f      	push	{r0, r1, r2, r3}
   1b22e:	b507      	push	{r0, r1, r2, lr}
   1b230:	a904      	add	r1, sp, #16
   1b232:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1b236:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1b238:	f7ed fe28 	bl	8e8c <vprintk>

	va_end(ap);
}
   1b23c:	b003      	add	sp, #12
   1b23e:	f85d eb04 	ldr.w	lr, [sp], #4
   1b242:	b004      	add	sp, #16
   1b244:	4770      	bx	lr

0001b246 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1b246:	68c3      	ldr	r3, [r0, #12]
   1b248:	6802      	ldr	r2, [r0, #0]
   1b24a:	4293      	cmp	r3, r2
   1b24c:	d904      	bls.n	1b258 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1b24e:	3b01      	subs	r3, #1
   1b250:	1a9a      	subs	r2, r3, r2
		return false;
   1b252:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1b254:	600a      	str	r2, [r1, #0]
}
   1b256:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1b258:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   1b25a:	b913      	cbnz	r3, 1b262 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1b25c:	3801      	subs	r0, #1
   1b25e:	1a82      	subs	r2, r0, r2
		return false;
   1b260:	e7f7      	b.n	1b252 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   1b262:	1a82      	subs	r2, r0, r2
	return true;
   1b264:	2001      	movs	r0, #1
   1b266:	e7f5      	b.n	1b254 <free_space+0xe>

0001b268 <get_usage>:
{
   1b268:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   1b26a:	a901      	add	r1, sp, #4
{
   1b26c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1b26e:	f7ff ffea 	bl	1b246 <free_space>
   1b272:	b120      	cbz	r0, 1b27e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1b274:	9b01      	ldr	r3, [sp, #4]
   1b276:	68e2      	ldr	r2, [r4, #12]
   1b278:	3b01      	subs	r3, #1
   1b27a:	4413      	add	r3, r2
   1b27c:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   1b27e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1b280:	9b01      	ldr	r3, [sp, #4]
   1b282:	1ac0      	subs	r0, r0, r3
}
   1b284:	3801      	subs	r0, #1
   1b286:	b002      	add	sp, #8
   1b288:	bd10      	pop	{r4, pc}

0001b28a <idx_inc>:
{
   1b28a:	b510      	push	{r4, lr}
   1b28c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1b28e:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1b290:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1b292:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1b294:	07d2      	lsls	r2, r2, #31
   1b296:	d502      	bpl.n	1b29e <idx_inc+0x14>
		return i & (buffer->size - 1);
   1b298:	3b01      	subs	r3, #1
   1b29a:	4018      	ands	r0, r3
}
   1b29c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1b29e:	4298      	cmp	r0, r3
   1b2a0:	bf28      	it	cs
   1b2a2:	1ac0      	subcs	r0, r0, r3
   1b2a4:	e7fa      	b.n	1b29c <idx_inc+0x12>

0001b2a6 <add_skip_item>:
{
   1b2a6:	b538      	push	{r3, r4, r5, lr}
   1b2a8:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1b2aa:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   1b2ac:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1b2ae:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1b2b0:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1b2b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1b2b8:	6801      	ldr	r1, [r0, #0]
   1b2ba:	462a      	mov	r2, r5
{
   1b2bc:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1b2be:	f7ff ffe4 	bl	1b28a <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1b2c2:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1b2c4:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1b2c6:	462a      	mov	r2, r5
   1b2c8:	4620      	mov	r0, r4
   1b2ca:	f7ff ffde 	bl	1b28a <idx_inc>
   1b2ce:	6060      	str	r0, [r4, #4]
}
   1b2d0:	bd38      	pop	{r3, r4, r5, pc}

0001b2d2 <max_utilization_update>:
{
   1b2d2:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1b2d4:	6903      	ldr	r3, [r0, #16]
{
   1b2d6:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1b2d8:	075b      	lsls	r3, r3, #29
   1b2da:	d506      	bpl.n	1b2ea <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1b2dc:	6a85      	ldr	r5, [r0, #40]	; 0x28
   1b2de:	f7ff ffc3 	bl	1b268 <get_usage>
   1b2e2:	4285      	cmp	r5, r0
   1b2e4:	bf2c      	ite	cs
   1b2e6:	62a5      	strcs	r5, [r4, #40]	; 0x28
   1b2e8:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   1b2ea:	bd38      	pop	{r3, r4, r5, pc}

0001b2ec <drop_item_locked>:
{
   1b2ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2f0:	461f      	mov	r7, r3
	*user_packet = false;
   1b2f2:	2300      	movs	r3, #0
   1b2f4:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1b2f6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1b2fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   1b2fe:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   1b300:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   1b304:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   1b306:	f003 0303 	and.w	r3, r3, #3
   1b30a:	2b02      	cmp	r3, #2
{
   1b30c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1b30e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1b312:	d103      	bne.n	1b31c <drop_item_locked+0x30>
		return item->skip.len;
   1b314:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1b318:	08ad      	lsrs	r5, r5, #2
   1b31a:	d12e      	bne.n	1b37a <drop_item_locked+0x8e>
   1b31c:	4630      	mov	r0, r6
   1b31e:	69e3      	ldr	r3, [r4, #28]
   1b320:	4798      	blx	r3
   1b322:	4605      	mov	r5, r0
	} else if (allow_drop) {
   1b324:	f1b8 0f00 	cmp.w	r8, #0
   1b328:	d038      	beq.n	1b39c <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   1b32a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1b32e:	079b      	lsls	r3, r3, #30
   1b330:	d531      	bpl.n	1b396 <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   1b332:	4620      	mov	r0, r4
   1b334:	f10b 0101 	add.w	r1, fp, #1
   1b338:	f7ff ffb5 	bl	1b2a6 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1b33c:	6861      	ldr	r1, [r4, #4]
   1b33e:	462a      	mov	r2, r5
   1b340:	4620      	mov	r0, r4
   1b342:	f7ff ffa2 	bl	1b28a <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1b346:	6821      	ldr	r1, [r4, #0]
   1b348:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1b34a:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1b34c:	4620      	mov	r0, r4
   1b34e:	f7ff ff9c 	bl	1b28a <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1b352:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1b354:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1b356:	68e1      	ldr	r1, [r4, #12]
   1b358:	4620      	mov	r0, r4
   1b35a:	f7ff ff96 	bl	1b28a <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1b35e:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   1b360:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1b364:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1b368:	f002 0203 	and.w	r2, r2, #3
   1b36c:	2a02      	cmp	r2, #2
   1b36e:	d10e      	bne.n	1b38e <drop_item_locked+0xa2>
		return item->skip.len;
   1b370:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   1b374:	089b      	lsrs	r3, r3, #2
   1b376:	d00a      	beq.n	1b38e <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   1b378:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1b37a:	68e1      	ldr	r1, [r4, #12]
   1b37c:	462a      	mov	r2, r5
   1b37e:	4620      	mov	r0, r4
   1b380:	f7ff ff83 	bl	1b28a <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1b384:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   1b388:	4630      	mov	r0, r6
   1b38a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   1b38e:	4630      	mov	r0, r6
   1b390:	69e3      	ldr	r3, [r4, #28]
   1b392:	4798      	blx	r3
   1b394:	4405      	add	r5, r0
			*user_packet = true;
   1b396:	2301      	movs	r3, #1
   1b398:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1b39a:	e7ee      	b.n	1b37a <drop_item_locked+0x8e>
		item = NULL;
   1b39c:	4646      	mov	r6, r8
	return item;
   1b39e:	e7f3      	b.n	1b388 <drop_item_locked+0x9c>

0001b3a0 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1b3a0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1b3a4:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1b3a6:	bf88      	it	hi
   1b3a8:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   1b3aa:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1b3ac:	1e18      	subs	r0, r3, #0
   1b3ae:	bf18      	it	ne
   1b3b0:	2001      	movne	r0, #1
   1b3b2:	4770      	bx	lr

0001b3b4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1b3b4:	4770      	bx	lr

0001b3b6 <nordicsemi_nrf53_init>:
{
   1b3b6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b3b8:	f04f 0320 	mov.w	r3, #32
   1b3bc:	f3ef 8511 	mrs	r5, BASEPRI
   1b3c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3c4:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   1b3c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1b3cc:	2401      	movs	r4, #1
   1b3ce:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   1b3d0:	4621      	mov	r1, r4
   1b3d2:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   1b3d6:	2021      	movs	r0, #33	; 0x21
   1b3d8:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1b3dc:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1b3e0:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   1b3e4:	f7ef f8f6 	bl	a5d4 <soc_secure_gpio_pin_mcu_select>
   1b3e8:	4621      	mov	r1, r4
   1b3ea:	2020      	movs	r0, #32
   1b3ec:	f7ef f8f2 	bl	a5d4 <soc_secure_gpio_pin_mcu_select>
   1b3f0:	4621      	mov	r1, r4
   1b3f2:	200b      	movs	r0, #11
   1b3f4:	f7ef f8ee 	bl	a5d4 <soc_secure_gpio_pin_mcu_select>
   1b3f8:	4621      	mov	r1, r4
   1b3fa:	200a      	movs	r0, #10
   1b3fc:	f7ef f8ea 	bl	a5d4 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   1b400:	f385 8811 	msr	BASEPRI, r5
   1b404:	f3bf 8f6f 	isb	sy
}
   1b408:	2000      	movs	r0, #0
   1b40a:	bd38      	pop	{r3, r4, r5, pc}

0001b40c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1b40c:	2806      	cmp	r0, #6
   1b40e:	d108      	bne.n	1b422 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1b410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1b414:	2201      	movs	r2, #1
   1b416:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1b41a:	f3bf 8f4f 	dsb	sy
        __WFE();
   1b41e:	bf20      	wfe
    while (true)
   1b420:	e7fd      	b.n	1b41e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1b422:	4770      	bx	lr

0001b424 <pm_state_exit_post_ops>:
   1b424:	2300      	movs	r3, #0
   1b426:	f383 8811 	msr	BASEPRI, r3
   1b42a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1b42e:	4770      	bx	lr

0001b430 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1b430:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1b432:	075b      	lsls	r3, r3, #29
   1b434:	d40b      	bmi.n	1b44e <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1b436:	6803      	ldr	r3, [r0, #0]
   1b438:	8842      	ldrh	r2, [r0, #2]
   1b43a:	f3c3 2349 	ubfx	r3, r3, #9, #10
   1b43e:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   1b442:	1898      	adds	r0, r3, r2
   1b444:	3017      	adds	r0, #23
   1b446:	f020 0007 	bic.w	r0, r0, #7
   1b44a:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1b44c:	4770      	bx	lr
	return 0;
   1b44e:	2000      	movs	r0, #0
}
   1b450:	4770      	bx	lr

0001b452 <dummy_timestamp>:
}
   1b452:	2000      	movs	r0, #0
   1b454:	4770      	bx	lr

0001b456 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1b456:	f002 b9e2 	b.w	1d81e <sys_clock_cycle_get_32>

0001b45a <atomic_inc>:
{
   1b45a:	4603      	mov	r3, r0
}
   1b45c:	e8d3 0fef 	ldaex	r0, [r3]
   1b460:	1c42      	adds	r2, r0, #1
   1b462:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b466:	2900      	cmp	r1, #0
   1b468:	d1f8      	bne.n	1b45c <atomic_inc+0x2>
   1b46a:	4770      	bx	lr

0001b46c <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1b46c:	2001      	movs	r0, #1
   1b46e:	f7ef b9db 	b.w	a828 <z_log_dropped>

0001b472 <z_log_get_tag>:
}
   1b472:	2000      	movs	r0, #0
   1b474:	4770      	bx	lr

0001b476 <z_cbprintf_cpy>:
{
   1b476:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1b478:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1b47c:	1b9b      	subs	r3, r3, r6
   1b47e:	428b      	cmp	r3, r1
{
   1b480:	460c      	mov	r4, r1
   1b482:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1b484:	d30a      	bcc.n	1b49c <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1b486:	6813      	ldr	r3, [r2, #0]
   1b488:	460a      	mov	r2, r1
   1b48a:	4601      	mov	r1, r0
   1b48c:	1998      	adds	r0, r3, r6
   1b48e:	f000 fedc 	bl	1c24a <memcpy>
	return len;
   1b492:	4620      	mov	r0, r4
	desc->off += len;
   1b494:	68ab      	ldr	r3, [r5, #8]
   1b496:	4423      	add	r3, r4
   1b498:	60ab      	str	r3, [r5, #8]
}
   1b49a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1b49c:	f06f 001b 	mvn.w	r0, #27
   1b4a0:	e7fb      	b.n	1b49a <z_cbprintf_cpy+0x24>

0001b4a2 <z_log_msg_finalize>:
{
   1b4a2:	b570      	push	{r4, r5, r6, lr}
   1b4a4:	460e      	mov	r6, r1
   1b4a6:	4615      	mov	r5, r2
   1b4a8:	4619      	mov	r1, r3
	if (!msg) {
   1b4aa:	4604      	mov	r4, r0
   1b4ac:	b918      	cbnz	r0, 1b4b6 <z_log_msg_finalize+0x14>
}
   1b4ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1b4b2:	f7ef b9b9 	b.w	a828 <z_log_dropped>
	if (data) {
   1b4b6:	b13b      	cbz	r3, 1b4c8 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1b4b8:	f3c2 2349 	ubfx	r3, r2, #9, #10
   1b4bc:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   1b4be:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1b4c2:	4418      	add	r0, r3
   1b4c4:	f000 fec1 	bl	1c24a <memcpy>
	msg->hdr.source = source;
   1b4c8:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1b4cc:	4620      	mov	r0, r4
}
   1b4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1b4d2:	f7ef bbcd 	b.w	ac70 <z_log_msg_commit>

0001b4d6 <buffer_write>:
{
   1b4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4d8:	4606      	mov	r6, r0
   1b4da:	460d      	mov	r5, r1
   1b4dc:	4614      	mov	r4, r2
   1b4de:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1b4e0:	4621      	mov	r1, r4
   1b4e2:	4628      	mov	r0, r5
   1b4e4:	463a      	mov	r2, r7
   1b4e6:	47b0      	blx	r6
	} while (len != 0);
   1b4e8:	1a24      	subs	r4, r4, r0
		buf += processed;
   1b4ea:	4405      	add	r5, r0
	} while (len != 0);
   1b4ec:	d1f8      	bne.n	1b4e0 <buffer_write+0xa>
}
   1b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b4f0 <cbvprintf>:
{
   1b4f0:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1b4f2:	2400      	movs	r4, #0
   1b4f4:	9400      	str	r4, [sp, #0]
   1b4f6:	f7ee f909 	bl	970c <z_cbvprintf_impl>
}
   1b4fa:	b002      	add	sp, #8
   1b4fc:	bd10      	pop	{r4, pc}

0001b4fe <log_output_flush>:
{
   1b4fe:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1b500:	6842      	ldr	r2, [r0, #4]
{
   1b502:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1b504:	e9d2 2300 	ldrd	r2, r3, [r2]
   1b508:	6881      	ldr	r1, [r0, #8]
   1b50a:	6800      	ldr	r0, [r0, #0]
   1b50c:	f7ff ffe3 	bl	1b4d6 <buffer_write>
	output->control_block->offset = 0;
   1b510:	2200      	movs	r2, #0
   1b512:	6863      	ldr	r3, [r4, #4]
   1b514:	601a      	str	r2, [r3, #0]
}
   1b516:	bd10      	pop	{r4, pc}

0001b518 <cr_out_func>:
	if (c == '\n') {
   1b518:	280a      	cmp	r0, #10
{
   1b51a:	b538      	push	{r3, r4, r5, lr}
   1b51c:	4604      	mov	r4, r0
   1b51e:	460d      	mov	r5, r1
	if (c == '\n') {
   1b520:	d102      	bne.n	1b528 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1b522:	200d      	movs	r0, #13
   1b524:	f7ef fc70 	bl	ae08 <out_func>
	out_func(c, ctx);
   1b528:	4629      	mov	r1, r5
   1b52a:	4620      	mov	r0, r4
   1b52c:	f7ef fc6c 	bl	ae08 <out_func>
}
   1b530:	2000      	movs	r0, #0
   1b532:	bd38      	pop	{r3, r4, r5, pc}

0001b534 <z_log_msg_static_create.constprop.0>:
   1b534:	2300      	movs	r3, #0
   1b536:	f7ef bbe1 	b.w	acfc <z_impl_z_log_msg_static_create>

0001b53a <get_tx_buffer_size>:
	return data->tx_buffer_size;
   1b53a:	6903      	ldr	r3, [r0, #16]
}
   1b53c:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
   1b540:	4770      	bx	lr

0001b542 <drop_tx_buffer>:
}
   1b542:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b546:	4770      	bx	lr

0001b548 <release_rx_buffer>:
{
   1b548:	4608      	mov	r0, r1
   1b54a:	b508      	push	{r3, lr}
   1b54c:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1b54e:	b118      	cbz	r0, 1b558 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   1b550:	f002 fe3a 	bl	1e1c8 <rpmsg_release_rx_buffer>
	return 0;
   1b554:	2000      	movs	r0, #0
}
   1b556:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1b558:	f06f 0001 	mvn.w	r0, #1
   1b55c:	e7fb      	b.n	1b556 <release_rx_buffer+0xe>

0001b55e <hold_rx_buffer>:
{
   1b55e:	4608      	mov	r0, r1
   1b560:	b508      	push	{r3, lr}
   1b562:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1b564:	b118      	cbz	r0, 1b56e <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1b566:	f002 fe27 	bl	1e1b8 <rpmsg_hold_rx_buffer>
	return 0;
   1b56a:	2000      	movs	r0, #0
}
   1b56c:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1b56e:	f06f 0001 	mvn.w	r0, #1
   1b572:	e7fb      	b.n	1b56c <hold_rx_buffer+0xe>

0001b574 <send_nocopy>:
{
   1b574:	b513      	push	{r0, r1, r4, lr}
   1b576:	4604      	mov	r4, r0
   1b578:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b57a:	6921      	ldr	r1, [r4, #16]
   1b57c:	f501 7155 	add.w	r1, r1, #852	; 0x354
   1b580:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1b584:	2902      	cmp	r1, #2
   1b586:	d109      	bne.n	1b59c <send_nocopy+0x28>
	if (len == 0) {
   1b588:	b15b      	cbz	r3, 1b5a2 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   1b58a:	b168      	cbz	r0, 1b5a8 <send_nocopy+0x34>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   1b58c:	9300      	str	r3, [sp, #0]
   1b58e:	4613      	mov	r3, r2
   1b590:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1b594:	f7fb f8bc 	bl	16710 <rpmsg_send_offchannel_nocopy>
}
   1b598:	b002      	add	sp, #8
   1b59a:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1b59c:	f06f 000f 	mvn.w	r0, #15
   1b5a0:	e7fa      	b.n	1b598 <send_nocopy+0x24>
		return -EBADMSG;
   1b5a2:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1b5a6:	e7f7      	b.n	1b598 <send_nocopy+0x24>
		return -ENOENT;
   1b5a8:	f06f 0001 	mvn.w	r0, #1
   1b5ac:	e7f4      	b.n	1b598 <send_nocopy+0x24>

0001b5ae <get_tx_buffer>:
{
   1b5ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b5b2:	461c      	mov	r4, r3
   1b5b4:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   1b5b8:	4616      	mov	r6, r2
   1b5ba:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   1b5bc:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   1b5be:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   1b5c0:	b339      	cbz	r1, 1b612 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   1b5c2:	b34a      	cbz	r2, 1b618 <get_tx_buffer+0x6a>
   1b5c4:	b344      	cbz	r4, 1b618 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   1b5c6:	1c6a      	adds	r2, r5, #1
   1b5c8:	f143 0300 	adc.w	r3, r3, #0
   1b5cc:	2a02      	cmp	r2, #2
   1b5ce:	f173 0300 	sbcs.w	r3, r3, #0
   1b5d2:	d224      	bcs.n	1b61e <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   1b5d4:	6822      	ldr	r2, [r4, #0]
   1b5d6:	b142      	cbz	r2, 1b5ea <get_tx_buffer+0x3c>
   1b5d8:	f8d0 3358 	ldr.w	r3, [r0, #856]	; 0x358
   1b5dc:	429a      	cmp	r2, r3
   1b5de:	d904      	bls.n	1b5ea <get_tx_buffer+0x3c>
		return -ENOMEM;
   1b5e0:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   1b5e4:	6023      	str	r3, [r4, #0]
}
   1b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   1b5ea:	ea05 0908 	and.w	r9, r5, r8
   1b5ee:	f109 0301 	add.w	r3, r9, #1
   1b5f2:	425a      	negs	r2, r3
   1b5f4:	415a      	adcs	r2, r3
   1b5f6:	4621      	mov	r1, r4
   1b5f8:	4638      	mov	r0, r7
   1b5fa:	f002 fded 	bl	1e1d8 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   1b5fe:	b988      	cbnz	r0, 1b624 <get_tx_buffer+0x76>
   1b600:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b604:	bf08      	it	eq
   1b606:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b60a:	d0f0      	beq.n	1b5ee <get_tx_buffer+0x40>
		return -ENOBUFS;
   1b60c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b610:	e7e9      	b.n	1b5e6 <get_tx_buffer+0x38>
		return -ENOENT;
   1b612:	f06f 0001 	mvn.w	r0, #1
   1b616:	e7e6      	b.n	1b5e6 <get_tx_buffer+0x38>
		return -EINVAL;
   1b618:	f06f 0015 	mvn.w	r0, #21
   1b61c:	e7e3      	b.n	1b5e6 <get_tx_buffer+0x38>
		return -ENOTSUP;
   1b61e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b622:	e7e0      	b.n	1b5e6 <get_tx_buffer+0x38>
	(*r_data) = payload;
   1b624:	6030      	str	r0, [r6, #0]
	return 0;
   1b626:	2000      	movs	r0, #0
   1b628:	e7dd      	b.n	1b5e6 <get_tx_buffer+0x38>

0001b62a <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1b62a:	f002 be1a 	b.w	1e262 <rpmsg_destroy_ept>

0001b62e <get_ept_slot_with_name>:
{
   1b62e:	b538      	push	{r3, r4, r5, lr}
   1b630:	460d      	mov	r5, r1
   1b632:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1b634:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1b638:	4628      	mov	r0, r5
   1b63a:	f000 fdd7 	bl	1c1ec <strcmp>
   1b63e:	b130      	cbz	r0, 1b64e <get_ept_slot_with_name+0x20>
   1b640:	4628      	mov	r0, r5
   1b642:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1b646:	f000 fdd1 	bl	1c1ec <strcmp>
   1b64a:	b920      	cbnz	r0, 1b656 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1b64c:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   1b64e:	2370      	movs	r3, #112	; 0x70
   1b650:	fb03 4000 	mla	r0, r3, r0, r4
}
   1b654:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1b656:	2000      	movs	r0, #0
   1b658:	e7fc      	b.n	1b654 <get_ept_slot_with_name+0x26>

0001b65a <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   1b65a:	f502 7126 	add.w	r1, r2, #664	; 0x298
   1b65e:	f502 702a 	add.w	r0, r2, #680	; 0x2a8
   1b662:	f003 b821 	b.w	1e6a8 <k_work_submit_to_queue>

0001b666 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1b666:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   1b66a:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1b66e:	3b00      	subs	r3, #0
   1b670:	bf18      	it	ne
   1b672:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1b674:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1b678:	f8d0 0284 	ldr.w	r0, [r0, #644]	; 0x284
   1b67c:	f002 bd4e 	b.w	1e11c <virtqueue_notification>

0001b680 <ept_cb>:
{
   1b680:	b510      	push	{r4, lr}
   1b682:	4608      	mov	r0, r1
   1b684:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   1b686:	4611      	mov	r1, r2
   1b688:	b952      	cbnz	r2, 1b6a0 <ept_cb+0x20>
		if (!ept->bound) {
   1b68a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1b68e:	b92a      	cbnz	r2, 1b69c <ept_cb+0x1c>
			ept->bound = true;
   1b690:	2201      	movs	r2, #1
			bound_cb(ept);
   1b692:	4618      	mov	r0, r3
			ept->bound = true;
   1b694:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   1b698:	f7ef fec0 	bl	b41c <bound_cb>
}
   1b69c:	2000      	movs	r0, #0
   1b69e:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   1b6a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1b6a2:	6854      	ldr	r4, [r2, #4]
   1b6a4:	2c00      	cmp	r4, #0
   1b6a6:	d0f9      	beq.n	1b69c <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   1b6a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1b6aa:	47a0      	blx	r4
   1b6ac:	e7f6      	b.n	1b69c <ept_cb+0x1c>

0001b6ae <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   1b6ae:	68cb      	ldr	r3, [r1, #12]
   1b6b0:	b133      	cbz	r3, 1b6c0 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1b6b2:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1b6b4:	6883      	ldr	r3, [r0, #8]
   1b6b6:	681b      	ldr	r3, [r3, #0]
   1b6b8:	b113      	cbz	r3, 1b6c0 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   1b6ba:	2200      	movs	r2, #0
   1b6bc:	6909      	ldr	r1, [r1, #16]
   1b6be:	4718      	bx	r3
}
   1b6c0:	4770      	bx	lr

0001b6c2 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1b6c2:	f7fc b917 	b.w	178f4 <z_impl_k_mutex_unlock>

0001b6c6 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b6c6:	e8d0 3fef 	ldaex	r3, [r0]
   1b6ca:	e8c0 1fe2 	stlex	r2, r1, [r0]
   1b6ce:	2a00      	cmp	r2, #0
   1b6d0:	d1f9      	bne.n	1b6c6 <atomic_set.isra.0>
}
   1b6d2:	4770      	bx	lr

0001b6d4 <backend_init>:
{
   1b6d4:	b510      	push	{r4, lr}
	data->role = conf->role;
   1b6d6:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   1b6d8:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   1b6da:	681b      	ldr	r3, [r3, #0]
   1b6dc:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
	return z_impl_k_mutex_init(mutex);
   1b6e0:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   1b6e4:	f002 ff48 	bl	1e578 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   1b6e8:	2100      	movs	r1, #0
   1b6ea:	f504 7055 	add.w	r0, r4, #852	; 0x354
   1b6ee:	f7ff ffea 	bl	1b6c6 <atomic_set.isra.0>
}
   1b6f2:	4608      	mov	r0, r1
   1b6f4:	bd10      	pop	{r4, pc}

0001b6f6 <ns_bind_cb>:
{
   1b6f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b6fa:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   1b6fc:	460d      	mov	r5, r1
   1b6fe:	b379      	cbz	r1, 1b760 <ns_bind_cb+0x6a>
   1b700:	780b      	ldrb	r3, [r1, #0]
   1b702:	b36b      	cbz	r3, 1b760 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   1b704:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
   1b708:	f5a4 78c4 	sub.w	r8, r4, #392	; 0x188
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   1b70c:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1b70e:	f04f 32ff 	mov.w	r2, #4294967295
   1b712:	f04f 33ff 	mov.w	r3, #4294967295
   1b716:	4620      	mov	r0, r4
   1b718:	f7fc f81c 	bl	17754 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   1b71c:	462a      	mov	r2, r5
   1b71e:	4640      	mov	r0, r8
   1b720:	a901      	add	r1, sp, #4
   1b722:	f7ef feb5 	bl	b490 <get_ept>
	if (rpmsg_ept == NULL) {
   1b726:	9e01      	ldr	r6, [sp, #4]
   1b728:	b92e      	cbnz	r6, 1b736 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1b72a:	4620      	mov	r0, r4
}
   1b72c:	b002      	add	sp, #8
   1b72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   1b732:	f7ff bfc6 	b.w	1b6c2 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   1b736:	b158      	cbz	r0, 1b750 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1b738:	4620      	mov	r0, r4
   1b73a:	f7ff ffc2 	bl	1b6c2 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1b73e:	463b      	mov	r3, r7
   1b740:	462a      	mov	r2, r5
   1b742:	4631      	mov	r1, r6
   1b744:	4640      	mov	r0, r8
}
   1b746:	b002      	add	sp, #8
   1b748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1b74c:	f7ef be7e 	b.w	b44c <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   1b750:	2220      	movs	r2, #32
   1b752:	4629      	mov	r1, r5
   1b754:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1b758:	f000 fd24 	bl	1c1a4 <strncpy>
		rpmsg_ept->dest = dest;
   1b75c:	6637      	str	r7, [r6, #96]	; 0x60
   1b75e:	e7e4      	b.n	1b72a <ns_bind_cb+0x34>
}
   1b760:	b002      	add	sp, #8
   1b762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b766 <deregister_ept>:
{
   1b766:	b510      	push	{r4, lr}
   1b768:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b76a:	6903      	ldr	r3, [r0, #16]
   1b76c:	f503 7355 	add.w	r3, r3, #852	; 0x354
   1b770:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1b774:	2b02      	cmp	r3, #2
   1b776:	d10a      	bne.n	1b78e <deregister_ept+0x28>
	if (!rpmsg_ept) {
   1b778:	b161      	cbz	r1, 1b794 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   1b77a:	4608      	mov	r0, r1
   1b77c:	f002 fd71 	bl	1e262 <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   1b780:	2270      	movs	r2, #112	; 0x70
   1b782:	2100      	movs	r1, #0
   1b784:	4620      	mov	r0, r4
   1b786:	f000 fd6b 	bl	1c260 <memset>
	return 0;
   1b78a:	2000      	movs	r0, #0
}
   1b78c:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1b78e:	f06f 000f 	mvn.w	r0, #15
   1b792:	e7fb      	b.n	1b78c <deregister_ept+0x26>
		return -ENOENT;
   1b794:	f06f 0001 	mvn.w	r0, #1
   1b798:	e7f8      	b.n	1b78c <deregister_ept+0x26>

0001b79a <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1b79a:	f002 bd62 	b.w	1e262 <rpmsg_destroy_ept>

0001b79e <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   1b79e:	b538      	push	{r3, r4, r5, lr}
   1b7a0:	460d      	mov	r5, r1
	if (!instance) {
   1b7a2:	4604      	mov	r4, r0
   1b7a4:	b160      	cbz	r0, 1b7c0 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   1b7a6:	30e0      	adds	r0, #224	; 0xe0
   1b7a8:	f002 fe8f 	bl	1e4ca <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   1b7ac:	b10d      	cbz	r5, 1b7b2 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   1b7ae:	2000      	movs	r0, #0
}
   1b7b0:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   1b7b2:	220c      	movs	r2, #12
   1b7b4:	4629      	mov	r1, r5
   1b7b6:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   1b7ba:	f000 fd51 	bl	1c260 <memset>
   1b7be:	e7f6      	b.n	1b7ae <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   1b7c0:	f06f 0015 	mvn.w	r0, #21
   1b7c4:	e7f4      	b.n	1b7b0 <ipc_rpmsg_deinit+0x12>

0001b7c6 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   1b7c6:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   1b7c8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1b7cc:	b113      	cbz	r3, 1b7d4 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   1b7ce:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   1b7d2:	4718      	bx	r3
}
   1b7d4:	4770      	bx	lr

0001b7d6 <virtio_set_features>:
}
   1b7d6:	4770      	bx	lr

0001b7d8 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   1b7d8:	6983      	ldr	r3, [r0, #24]
   1b7da:	b913      	cbnz	r3, 1b7e2 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   1b7dc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1b7e0:	7019      	strb	r1, [r3, #0]
}
   1b7e2:	4770      	bx	lr

0001b7e4 <virtio_get_features>:
}
   1b7e4:	2001      	movs	r0, #1
   1b7e6:	4770      	bx	lr

0001b7e8 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   1b7e8:	6983      	ldr	r3, [r0, #24]
   1b7ea:	2b01      	cmp	r3, #1
   1b7ec:	d104      	bne.n	1b7f8 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   1b7ee:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1b7f2:	7818      	ldrb	r0, [r3, #0]
   1b7f4:	b2c0      	uxtb	r0, r0
   1b7f6:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   1b7f8:	2004      	movs	r0, #4
}
   1b7fa:	4770      	bx	lr

0001b7fc <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   1b7fc:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   1b7fe:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   1b800:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   1b802:	4620      	mov	r0, r4
   1b804:	f003 f88c 	bl	1e920 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1b808:	4605      	mov	r5, r0
   1b80a:	b118      	cbz	r0, 1b814 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   1b80c:	4622      	mov	r2, r4
   1b80e:	2100      	movs	r1, #0
   1b810:	f000 fd26 	bl	1c260 <memset>
	}

	return vqs;
}
   1b814:	4628      	mov	r0, r5
   1b816:	bd38      	pop	{r3, r4, r5, pc}

0001b818 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   1b818:	b538      	push	{r3, r4, r5, lr}
   1b81a:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   1b81c:	2230      	movs	r2, #48	; 0x30
   1b81e:	2100      	movs	r1, #0
   1b820:	f000 fd1e 	bl	1c260 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   1b824:	2218      	movs	r2, #24
   1b826:	2100      	movs	r1, #0
   1b828:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1b82c:	f000 fd18 	bl	1c260 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   1b830:	2218      	movs	r2, #24
   1b832:	2100      	movs	r1, #0
   1b834:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1b838:	f000 fd12 	bl	1c260 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   1b83c:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1b840:	f7fa ff1c 	bl	1667c <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1b844:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   1b848:	f7fa ff18 	bl	1667c <virtqueue_free>
	vr->shm_io = 0;
   1b84c:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   1b84e:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1b852:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1b856:	f7fa fe2d 	bl	164b4 <metal_device_close>
	metal_finish();
   1b85a:	f7fa fe87 	bl	1656c <metal_finish>
	if (io->ops.close)
   1b85e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   1b860:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1b864:	b10b      	cbz	r3, 1b86a <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1b866:	4628      	mov	r0, r5
   1b868:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   1b86a:	2238      	movs	r2, #56	; 0x38
   1b86c:	2100      	movs	r1, #0
   1b86e:	4628      	mov	r0, r5
   1b870:	f000 fcf6 	bl	1c260 <memset>

	return 0;
}
   1b874:	2000      	movs	r0, #0
   1b876:	bd38      	pop	{r3, r4, r5, pc}

0001b878 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b878:	b538      	push	{r3, r4, r5, lr}
   1b87a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b87c:	42ab      	cmp	r3, r5
{
   1b87e:	4611      	mov	r1, r2
   1b880:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b882:	d804      	bhi.n	1b88e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b884:	461a      	mov	r2, r3
   1b886:	f000 fce0 	bl	1c24a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b88a:	4620      	mov	r0, r4
   1b88c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b88e:	2400      	movs	r4, #0
   1b890:	e7fb      	b.n	1b88a <_copy+0x12>

0001b892 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b892:	f000 bce5 	b.w	1c260 <memset>

0001b896 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b896:	09c3      	lsrs	r3, r0, #7
   1b898:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b89c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b8a0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b8a4:	b2c0      	uxtb	r0, r0
   1b8a6:	4770      	bx	lr

0001b8a8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b8a8:	78cb      	ldrb	r3, [r1, #3]
   1b8aa:	7802      	ldrb	r2, [r0, #0]
   1b8ac:	4053      	eors	r3, r2
   1b8ae:	7003      	strb	r3, [r0, #0]
   1b8b0:	884b      	ldrh	r3, [r1, #2]
   1b8b2:	7842      	ldrb	r2, [r0, #1]
   1b8b4:	4053      	eors	r3, r2
   1b8b6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b8b8:	680a      	ldr	r2, [r1, #0]
   1b8ba:	7883      	ldrb	r3, [r0, #2]
   1b8bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b8c0:	7083      	strb	r3, [r0, #2]
   1b8c2:	680a      	ldr	r2, [r1, #0]
   1b8c4:	78c3      	ldrb	r3, [r0, #3]
   1b8c6:	4053      	eors	r3, r2
   1b8c8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b8ca:	79cb      	ldrb	r3, [r1, #7]
   1b8cc:	7902      	ldrb	r2, [r0, #4]
   1b8ce:	4053      	eors	r3, r2
   1b8d0:	7103      	strb	r3, [r0, #4]
   1b8d2:	88cb      	ldrh	r3, [r1, #6]
   1b8d4:	7942      	ldrb	r2, [r0, #5]
   1b8d6:	4053      	eors	r3, r2
   1b8d8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b8da:	684a      	ldr	r2, [r1, #4]
   1b8dc:	7983      	ldrb	r3, [r0, #6]
   1b8de:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b8e2:	7183      	strb	r3, [r0, #6]
   1b8e4:	684a      	ldr	r2, [r1, #4]
   1b8e6:	79c3      	ldrb	r3, [r0, #7]
   1b8e8:	4053      	eors	r3, r2
   1b8ea:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b8ec:	7acb      	ldrb	r3, [r1, #11]
   1b8ee:	7a02      	ldrb	r2, [r0, #8]
   1b8f0:	4053      	eors	r3, r2
   1b8f2:	7203      	strb	r3, [r0, #8]
   1b8f4:	7a42      	ldrb	r2, [r0, #9]
   1b8f6:	894b      	ldrh	r3, [r1, #10]
   1b8f8:	4053      	eors	r3, r2
   1b8fa:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b8fc:	688a      	ldr	r2, [r1, #8]
   1b8fe:	7a83      	ldrb	r3, [r0, #10]
   1b900:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b904:	7283      	strb	r3, [r0, #10]
   1b906:	688a      	ldr	r2, [r1, #8]
   1b908:	7ac3      	ldrb	r3, [r0, #11]
   1b90a:	4053      	eors	r3, r2
   1b90c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b90e:	7bcb      	ldrb	r3, [r1, #15]
   1b910:	7b02      	ldrb	r2, [r0, #12]
   1b912:	4053      	eors	r3, r2
   1b914:	7303      	strb	r3, [r0, #12]
   1b916:	89cb      	ldrh	r3, [r1, #14]
   1b918:	7b42      	ldrb	r2, [r0, #13]
   1b91a:	4053      	eors	r3, r2
   1b91c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b91e:	68ca      	ldr	r2, [r1, #12]
   1b920:	7b83      	ldrb	r3, [r0, #14]
   1b922:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b926:	7383      	strb	r3, [r0, #14]
   1b928:	68ca      	ldr	r2, [r1, #12]
   1b92a:	7bc3      	ldrb	r3, [r0, #15]
   1b92c:	4053      	eors	r3, r2
   1b92e:	73c3      	strb	r3, [r0, #15]
}
   1b930:	4770      	bx	lr

0001b932 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b932:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b934:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b936:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b938:	f88d 2000 	strb.w	r2, [sp]
   1b93c:	7942      	ldrb	r2, [r0, #5]
   1b93e:	f88d 2001 	strb.w	r2, [sp, #1]
   1b942:	7a82      	ldrb	r2, [r0, #10]
   1b944:	f88d 2002 	strb.w	r2, [sp, #2]
   1b948:	7bc2      	ldrb	r2, [r0, #15]
   1b94a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b94e:	7902      	ldrb	r2, [r0, #4]
   1b950:	f88d 2004 	strb.w	r2, [sp, #4]
   1b954:	7a42      	ldrb	r2, [r0, #9]
   1b956:	f88d 2005 	strb.w	r2, [sp, #5]
   1b95a:	7b82      	ldrb	r2, [r0, #14]
   1b95c:	f88d 2006 	strb.w	r2, [sp, #6]
   1b960:	78c2      	ldrb	r2, [r0, #3]
   1b962:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b966:	7a02      	ldrb	r2, [r0, #8]
   1b968:	f88d 2008 	strb.w	r2, [sp, #8]
   1b96c:	7b42      	ldrb	r2, [r0, #13]
   1b96e:	f88d 2009 	strb.w	r2, [sp, #9]
   1b972:	7882      	ldrb	r2, [r0, #2]
   1b974:	f88d 200a 	strb.w	r2, [sp, #10]
   1b978:	79c2      	ldrb	r2, [r0, #7]
   1b97a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b97e:	7b02      	ldrb	r2, [r0, #12]
   1b980:	f88d 200c 	strb.w	r2, [sp, #12]
   1b984:	7842      	ldrb	r2, [r0, #1]
   1b986:	f88d 200d 	strb.w	r2, [sp, #13]
   1b98a:	7982      	ldrb	r2, [r0, #6]
   1b98c:	f88d 200e 	strb.w	r2, [sp, #14]
   1b990:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b994:	2310      	movs	r3, #16
   1b996:	466a      	mov	r2, sp
   1b998:	4619      	mov	r1, r3
   1b99a:	f7ff ff6d 	bl	1b878 <_copy>
}
   1b99e:	b005      	add	sp, #20
   1b9a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001b9a4 <mult_row_column>:
{
   1b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b9a6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b9a8:	7808      	ldrb	r0, [r1, #0]
{
   1b9aa:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b9ac:	f7ff ff73 	bl	1b896 <_double_byte>
   1b9b0:	4605      	mov	r5, r0
   1b9b2:	7860      	ldrb	r0, [r4, #1]
   1b9b4:	f7ff ff6f 	bl	1b896 <_double_byte>
   1b9b8:	78a2      	ldrb	r2, [r4, #2]
   1b9ba:	7863      	ldrb	r3, [r4, #1]
   1b9bc:	4053      	eors	r3, r2
   1b9be:	78e2      	ldrb	r2, [r4, #3]
   1b9c0:	4053      	eors	r3, r2
   1b9c2:	405d      	eors	r5, r3
   1b9c4:	4068      	eors	r0, r5
   1b9c6:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b9c8:	7860      	ldrb	r0, [r4, #1]
   1b9ca:	7827      	ldrb	r7, [r4, #0]
   1b9cc:	f7ff ff63 	bl	1b896 <_double_byte>
   1b9d0:	4605      	mov	r5, r0
   1b9d2:	78a0      	ldrb	r0, [r4, #2]
   1b9d4:	f7ff ff5f 	bl	1b896 <_double_byte>
   1b9d8:	78a3      	ldrb	r3, [r4, #2]
   1b9da:	405f      	eors	r7, r3
   1b9dc:	78e3      	ldrb	r3, [r4, #3]
   1b9de:	405f      	eors	r7, r3
   1b9e0:	407d      	eors	r5, r7
   1b9e2:	4068      	eors	r0, r5
   1b9e4:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b9e6:	7863      	ldrb	r3, [r4, #1]
   1b9e8:	7827      	ldrb	r7, [r4, #0]
   1b9ea:	78a0      	ldrb	r0, [r4, #2]
   1b9ec:	405f      	eors	r7, r3
   1b9ee:	f7ff ff52 	bl	1b896 <_double_byte>
   1b9f2:	4605      	mov	r5, r0
   1b9f4:	78e0      	ldrb	r0, [r4, #3]
   1b9f6:	f7ff ff4e 	bl	1b896 <_double_byte>
   1b9fa:	78e3      	ldrb	r3, [r4, #3]
   1b9fc:	405f      	eors	r7, r3
   1b9fe:	407d      	eors	r5, r7
   1ba00:	4068      	eors	r0, r5
   1ba02:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1ba04:	7820      	ldrb	r0, [r4, #0]
   1ba06:	f7ff ff46 	bl	1b896 <_double_byte>
   1ba0a:	7862      	ldrb	r2, [r4, #1]
   1ba0c:	7823      	ldrb	r3, [r4, #0]
   1ba0e:	4053      	eors	r3, r2
   1ba10:	78a2      	ldrb	r2, [r4, #2]
   1ba12:	4053      	eors	r3, r2
   1ba14:	ea80 0503 	eor.w	r5, r0, r3
   1ba18:	78e0      	ldrb	r0, [r4, #3]
   1ba1a:	f7ff ff3c 	bl	1b896 <_double_byte>
   1ba1e:	b2ed      	uxtb	r5, r5
   1ba20:	4045      	eors	r5, r0
   1ba22:	70f5      	strb	r5, [r6, #3]
}
   1ba24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ba26 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1ba26:	b570      	push	{r4, r5, r6, lr}
   1ba28:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1ba2a:	4605      	mov	r5, r0
{
   1ba2c:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1ba2e:	2800      	cmp	r0, #0
   1ba30:	d049      	beq.n	1bac6 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1ba32:	2900      	cmp	r1, #0
   1ba34:	d049      	beq.n	1baca <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1ba36:	2a00      	cmp	r2, #0
   1ba38:	d049      	beq.n	1bace <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1ba3a:	2310      	movs	r3, #16
   1ba3c:	460a      	mov	r2, r1
   1ba3e:	4668      	mov	r0, sp
   1ba40:	4619      	mov	r1, r3
   1ba42:	f7ff ff19 	bl	1b878 <_copy>
	add_round_key(state, s->words);
   1ba46:	4621      	mov	r1, r4
   1ba48:	4668      	mov	r0, sp
   1ba4a:	f7ff ff2d 	bl	1b8a8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1ba4e:	3410      	adds	r4, #16
   1ba50:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1ba54:	4668      	mov	r0, sp
   1ba56:	f7f0 f9a3 	bl	bda0 <sub_bytes>
		shift_rows(state);
   1ba5a:	4668      	mov	r0, sp
   1ba5c:	f7ff ff69 	bl	1b932 <shift_rows>
	mult_row_column(t, s);
   1ba60:	4669      	mov	r1, sp
   1ba62:	a804      	add	r0, sp, #16
   1ba64:	f7ff ff9e 	bl	1b9a4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1ba68:	a901      	add	r1, sp, #4
   1ba6a:	a805      	add	r0, sp, #20
   1ba6c:	f7ff ff9a 	bl	1b9a4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1ba70:	a902      	add	r1, sp, #8
   1ba72:	a806      	add	r0, sp, #24
   1ba74:	f7ff ff96 	bl	1b9a4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1ba78:	a903      	add	r1, sp, #12
   1ba7a:	a807      	add	r0, sp, #28
   1ba7c:	f7ff ff92 	bl	1b9a4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1ba80:	2310      	movs	r3, #16
   1ba82:	4668      	mov	r0, sp
   1ba84:	4619      	mov	r1, r3
   1ba86:	eb0d 0203 	add.w	r2, sp, r3
   1ba8a:	f7ff fef5 	bl	1b878 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1ba8e:	4621      	mov	r1, r4
   1ba90:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1ba92:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1ba94:	f7ff ff08 	bl	1b8a8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1ba98:	42b4      	cmp	r4, r6
   1ba9a:	d1db      	bne.n	1ba54 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1ba9c:	f7f0 f980 	bl	bda0 <sub_bytes>
	shift_rows(state);
   1baa0:	4668      	mov	r0, sp
   1baa2:	f7ff ff46 	bl	1b932 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1baa6:	4621      	mov	r1, r4
   1baa8:	4668      	mov	r0, sp
   1baaa:	f7ff fefd 	bl	1b8a8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1baae:	2310      	movs	r3, #16
   1bab0:	466a      	mov	r2, sp
   1bab2:	4619      	mov	r1, r3
   1bab4:	4628      	mov	r0, r5
   1bab6:	f7ff fedf 	bl	1b878 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1baba:	4668      	mov	r0, sp
   1babc:	2210      	movs	r2, #16
   1babe:	2100      	movs	r1, #0
   1bac0:	f7ff fee7 	bl	1b892 <_set>

	return TC_CRYPTO_SUCCESS;
   1bac4:	2001      	movs	r0, #1
}
   1bac6:	b008      	add	sp, #32
   1bac8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1baca:	4608      	mov	r0, r1
   1bacc:	e7fb      	b.n	1bac6 <tc_aes_encrypt+0xa0>
   1bace:	4610      	mov	r0, r2
   1bad0:	e7f9      	b.n	1bac6 <tc_aes_encrypt+0xa0>

0001bad2 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1bad2:	460a      	mov	r2, r1
{
   1bad4:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1bad6:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1bada:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1badc:	2b00      	cmp	r3, #0
   1bade:	bfac      	ite	ge
   1bae0:	2300      	movge	r3, #0
   1bae2:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1bae4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1bae8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1baec:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1baee:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1baf2:	d002      	beq.n	1bafa <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1baf4:	7813      	ldrb	r3, [r2, #0]
   1baf6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1baf8:	e7f4      	b.n	1bae4 <gf_double+0x12>
	}
}
   1bafa:	bd10      	pop	{r4, pc}

0001bafc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1bafc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1bafe:	b120      	cbz	r0, 1bb0a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1bb00:	2258      	movs	r2, #88	; 0x58
   1bb02:	2100      	movs	r1, #0
   1bb04:	f7ff fec5 	bl	1b892 <_set>
   1bb08:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1bb0a:	bd08      	pop	{r3, pc}

0001bb0c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1bb0c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1bb0e:	4604      	mov	r4, r0
   1bb10:	b188      	cbz	r0, 1bb36 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1bb12:	2210      	movs	r2, #16
   1bb14:	2100      	movs	r1, #0
   1bb16:	f7ff febc 	bl	1b892 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1bb1a:	2210      	movs	r2, #16
   1bb1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1bb20:	2100      	movs	r1, #0
   1bb22:	f7ff feb6 	bl	1b892 <_set>
	s->leftover_offset = 0;
   1bb26:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1bb28:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1bb2a:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1bb2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bb30:	2001      	movs	r0, #1
   1bb32:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1bb36:	bd10      	pop	{r4, pc}

0001bb38 <tc_cmac_setup>:
{
   1bb38:	b570      	push	{r4, r5, r6, lr}
   1bb3a:	4604      	mov	r4, r0
   1bb3c:	460d      	mov	r5, r1
   1bb3e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1bb40:	b310      	cbz	r0, 1bb88 <tc_cmac_setup+0x50>
   1bb42:	b311      	cbz	r1, 1bb8a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1bb44:	2258      	movs	r2, #88	; 0x58
   1bb46:	2100      	movs	r1, #0
   1bb48:	f7ff fea3 	bl	1b892 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1bb4c:	4629      	mov	r1, r5
   1bb4e:	4630      	mov	r0, r6
	s->sched = sched;
   1bb50:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1bb52:	f7f0 f931 	bl	bdb8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1bb56:	2210      	movs	r2, #16
   1bb58:	2100      	movs	r1, #0
   1bb5a:	4620      	mov	r0, r4
   1bb5c:	f7ff fe99 	bl	1b892 <_set>
	gf_double (s->K1, s->iv);
   1bb60:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bb64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bb66:	4621      	mov	r1, r4
   1bb68:	4620      	mov	r0, r4
   1bb6a:	f7ff ff5c 	bl	1ba26 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1bb6e:	4621      	mov	r1, r4
   1bb70:	4628      	mov	r0, r5
   1bb72:	f7ff ffae 	bl	1bad2 <gf_double>
	gf_double (s->K2, s->K1);
   1bb76:	4629      	mov	r1, r5
   1bb78:	f104 0020 	add.w	r0, r4, #32
   1bb7c:	f7ff ffa9 	bl	1bad2 <gf_double>
	tc_cmac_init(s);
   1bb80:	4620      	mov	r0, r4
   1bb82:	f7ff ffc3 	bl	1bb0c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1bb86:	2001      	movs	r0, #1
}
   1bb88:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1bb8a:	4608      	mov	r0, r1
   1bb8c:	e7fc      	b.n	1bb88 <tc_cmac_setup+0x50>

0001bb8e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1bb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb92:	460e      	mov	r6, r1
   1bb94:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1bb96:	4604      	mov	r4, r0
   1bb98:	2800      	cmp	r0, #0
   1bb9a:	d060      	beq.n	1bc5e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1bb9c:	b1fa      	cbz	r2, 1bbde <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1bb9e:	2900      	cmp	r1, #0
   1bba0:	d05d      	beq.n	1bc5e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1bba2:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1bba6:	ea53 0102 	orrs.w	r1, r3, r2
   1bbaa:	d058      	beq.n	1bc5e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1bbac:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1bbae:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1bbb2:	f142 32ff 	adc.w	r2, r2, #4294967295
   1bbb6:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1bbba:	f1b8 0f00 	cmp.w	r8, #0
   1bbbe:	d02c      	beq.n	1bc1a <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1bbc0:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1bbc4:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1bbc8:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1bbca:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1bbcc:	d20a      	bcs.n	1bbe4 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1bbce:	462b      	mov	r3, r5
   1bbd0:	4632      	mov	r2, r6
   1bbd2:	4629      	mov	r1, r5
   1bbd4:	f7ff fe50 	bl	1b878 <_copy>
			s->leftover_offset += data_length;
   1bbd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bbda:	442b      	add	r3, r5
   1bbdc:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1bbde:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1bbe4:	463b      	mov	r3, r7
   1bbe6:	4632      	mov	r2, r6
   1bbe8:	4639      	mov	r1, r7
   1bbea:	f7ff fe45 	bl	1b878 <_copy>
		s->leftover_offset = 0;
   1bbee:	2300      	movs	r3, #0
   1bbf0:	3d10      	subs	r5, #16
   1bbf2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1bbf4:	4445      	add	r5, r8
		data += remaining_space;
   1bbf6:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bbf8:	1e63      	subs	r3, r4, #1
   1bbfa:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1bbfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bc02:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc06:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1bc08:	ea82 0200 	eor.w	r2, r2, r0
   1bc0c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc0e:	d1f6      	bne.n	1bbfe <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bc10:	4621      	mov	r1, r4
   1bc12:	4620      	mov	r0, r4
   1bc14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bc16:	f7ff ff06 	bl	1ba26 <tc_aes_encrypt>
   1bc1a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1bc1e:	2d10      	cmp	r5, #16
   1bc20:	d80a      	bhi.n	1bc38 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1bc22:	2d00      	cmp	r5, #0
   1bc24:	d0db      	beq.n	1bbde <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1bc26:	462b      	mov	r3, r5
   1bc28:	4632      	mov	r2, r6
   1bc2a:	4629      	mov	r1, r5
   1bc2c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1bc30:	f7ff fe22 	bl	1b878 <_copy>
		s->leftover_offset = data_length;
   1bc34:	6465      	str	r5, [r4, #68]	; 0x44
   1bc36:	e7d2      	b.n	1bbde <tc_cmac_update+0x50>
   1bc38:	1e63      	subs	r3, r4, #1
   1bc3a:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1bc3c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bc40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc44:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1bc46:	ea82 0200 	eor.w	r2, r2, r0
   1bc4a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc4c:	d1f6      	bne.n	1bc3c <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bc4e:	4621      	mov	r1, r4
   1bc50:	4620      	mov	r0, r4
   1bc52:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bc54:	f7ff fee7 	bl	1ba26 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1bc58:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1bc5a:	3d10      	subs	r5, #16
   1bc5c:	e7df      	b.n	1bc1e <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1bc5e:	2000      	movs	r0, #0
   1bc60:	e7be      	b.n	1bbe0 <tc_cmac_update+0x52>

0001bc62 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1bc62:	b570      	push	{r4, r5, r6, lr}
   1bc64:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1bc66:	4605      	mov	r5, r0
   1bc68:	b1f0      	cbz	r0, 1bca8 <tc_cmac_final+0x46>
   1bc6a:	b371      	cbz	r1, 1bcca <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1bc6c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1bc6e:	2a10      	cmp	r2, #16
   1bc70:	d11b      	bne.n	1bcaa <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1bc72:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc74:	1e63      	subs	r3, r4, #1
   1bc76:	3901      	subs	r1, #1
   1bc78:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1bc7c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bc80:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc84:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1bc86:	ea82 0206 	eor.w	r2, r2, r6
   1bc8a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1bc8e:	ea82 0206 	eor.w	r2, r2, r6
   1bc92:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc94:	d1f2      	bne.n	1bc7c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1bc96:	4621      	mov	r1, r4
   1bc98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bc9a:	4628      	mov	r0, r5
   1bc9c:	f7ff fec3 	bl	1ba26 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1bca0:	4620      	mov	r0, r4
   1bca2:	f7ff ff2b 	bl	1bafc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1bca6:	2001      	movs	r0, #1
}
   1bca8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1bcaa:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1bcae:	2100      	movs	r1, #0
   1bcb0:	f1c2 0210 	rsb	r2, r2, #16
   1bcb4:	4420      	add	r0, r4
   1bcb6:	f7ff fdec 	bl	1b892 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1bcba:	2280      	movs	r2, #128	; 0x80
   1bcbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1bcbe:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1bcc2:	4423      	add	r3, r4
   1bcc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1bcc8:	e7d4      	b.n	1bc74 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1bcca:	4608      	mov	r0, r1
   1bccc:	e7ec      	b.n	1bca8 <tc_cmac_final+0x46>

0001bcce <tc_sha256_update>:
{
   1bcce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcd0:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1bcd2:	b110      	cbz	r0, 1bcda <tc_sha256_update+0xc>
   1bcd4:	b1f9      	cbz	r1, 1bd16 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1bcd6:	b90a      	cbnz	r2, 1bcdc <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1bcd8:	2001      	movs	r0, #1
}
   1bcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1bcdc:	2700      	movs	r7, #0
   1bcde:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1bce0:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   1bce4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1bce6:	1c5a      	adds	r2, r3, #1
   1bce8:	6682      	str	r2, [r0, #104]	; 0x68
   1bcea:	f814 1b01 	ldrb.w	r1, [r4], #1
   1bcee:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1bcf0:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1bcf2:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1bcf6:	d90b      	bls.n	1bd10 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   1bcf8:	4631      	mov	r1, r6
   1bcfa:	f7f0 f8b1 	bl	be60 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1bcfe:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1bd02:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1bd06:	f142 0200 	adc.w	r2, r2, #0
   1bd0a:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1bd0e:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   1bd10:	42a5      	cmp	r5, r4
   1bd12:	d1e7      	bne.n	1bce4 <tc_sha256_update+0x16>
   1bd14:	e7e0      	b.n	1bcd8 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   1bd16:	4608      	mov	r0, r1
   1bd18:	e7df      	b.n	1bcda <tc_sha256_update+0xc>

0001bd1a <tc_sha256_final>:
{
   1bd1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd1c:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1bd1e:	4605      	mov	r5, r0
   1bd20:	2800      	cmp	r0, #0
   1bd22:	d054      	beq.n	1bdce <tc_sha256_final+0xb4>
   1bd24:	2900      	cmp	r1, #0
   1bd26:	d053      	beq.n	1bdd0 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   1bd28:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1bd2a:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1bd2e:	00d8      	lsls	r0, r3, #3
   1bd30:	1812      	adds	r2, r2, r0
   1bd32:	f141 0100 	adc.w	r1, r1, #0
   1bd36:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1bd3a:	2280      	movs	r2, #128	; 0x80
   1bd3c:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1bd3e:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1bd40:	4423      	add	r3, r4
   1bd42:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1bd44:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1bd48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1bd4c:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1bd50:	d90a      	bls.n	1bd68 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1bd52:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1bd56:	4639      	mov	r1, r7
   1bd58:	4430      	add	r0, r6
   1bd5a:	f7ff fd9a 	bl	1b892 <_set>
		compress(s->iv, s->leftover);
   1bd5e:	4631      	mov	r1, r6
   1bd60:	4620      	mov	r0, r4
   1bd62:	f7f0 f87d 	bl	be60 <compress>
		s->leftover_offset = 0;
   1bd66:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1bd68:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1bd6a:	2100      	movs	r1, #0
   1bd6c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1bd70:	4430      	add	r0, r6
   1bd72:	f7ff fd8e 	bl	1b892 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1bd76:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1bd78:	4631      	mov	r1, r6
   1bd7a:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1bd7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1bd7e:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1bd80:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1bd82:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1bd86:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1bd8a:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1bd8c:	0e1b      	lsrs	r3, r3, #24
   1bd8e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   1bd92:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1bd94:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1bd98:	f7f0 f862 	bl	be60 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1bd9c:	1d2b      	adds	r3, r5, #4
   1bd9e:	1f21      	subs	r1, r4, #4
   1bda0:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1bda2:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1bda6:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1bda8:	0e10      	lsrs	r0, r2, #24
   1bdaa:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1bdae:	0c10      	lsrs	r0, r2, #16
   1bdb0:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1bdb4:	0a10      	lsrs	r0, r2, #8
   1bdb6:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1bdba:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1bdbe:	42ab      	cmp	r3, r5
   1bdc0:	d1ef      	bne.n	1bda2 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   1bdc2:	4620      	mov	r0, r4
   1bdc4:	2270      	movs	r2, #112	; 0x70
   1bdc6:	2100      	movs	r1, #0
   1bdc8:	f7ff fd63 	bl	1b892 <_set>
	return TC_CRYPTO_SUCCESS;
   1bdcc:	2001      	movs	r0, #1
}
   1bdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1bdd0:	4608      	mov	r0, r1
   1bdd2:	e7fc      	b.n	1bdce <tc_sha256_final+0xb4>

0001bdd4 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1bdd4:	b530      	push	{r4, r5, lr}
   1bdd6:	1e43      	subs	r3, r0, #1
   1bdd8:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1bdda:	42a9      	cmp	r1, r5
   1bddc:	d106      	bne.n	1bdec <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1bdde:	2136      	movs	r1, #54	; 0x36
   1bde0:	245c      	movs	r4, #92	; 0x5c
   1bde2:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1bde4:	1a13      	subs	r3, r2, r0
   1bde6:	2b3f      	cmp	r3, #63	; 0x3f
   1bde8:	d90c      	bls.n	1be04 <rekey+0x30>
	}
}
   1bdea:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1bdec:	780c      	ldrb	r4, [r1, #0]
   1bdee:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1bdf2:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1bdf6:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bdfa:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1bdfe:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1be02:	e7ea      	b.n	1bdda <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1be04:	f802 1b01 	strb.w	r1, [r2], #1
   1be08:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1be0c:	e7ea      	b.n	1bde4 <rekey+0x10>

0001be0e <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1be0e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be10:	460e      	mov	r6, r1
   1be12:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1be14:	4605      	mov	r5, r0
{
   1be16:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1be18:	b1b8      	cbz	r0, 1be4a <tc_hmac_set_key+0x3c>
   1be1a:	b341      	cbz	r1, 1be6e <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1be1c:	b34a      	cbz	r2, 1be72 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1be1e:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1be20:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1be24:	d813      	bhi.n	1be4e <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1be26:	a810      	add	r0, sp, #64	; 0x40
   1be28:	f7f0 f904 	bl	c034 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1be2c:	4622      	mov	r2, r4
   1be2e:	4669      	mov	r1, sp
   1be30:	a810      	add	r0, sp, #64	; 0x40
   1be32:	f7ff ff4c 	bl	1bcce <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1be36:	a910      	add	r1, sp, #64	; 0x40
   1be38:	a834      	add	r0, sp, #208	; 0xd0
   1be3a:	f7ff ff6e 	bl	1bd1a <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1be3e:	4622      	mov	r2, r4
   1be40:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1be42:	4638      	mov	r0, r7
   1be44:	f7ff ffc6 	bl	1bdd4 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1be48:	2001      	movs	r0, #1
}
   1be4a:	b04d      	add	sp, #308	; 0x134
   1be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1be4e:	f7f0 f8f1 	bl	c034 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1be52:	4622      	mov	r2, r4
   1be54:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1be56:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1be5a:	4628      	mov	r0, r5
   1be5c:	f7ff ff37 	bl	1bcce <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1be60:	4629      	mov	r1, r5
   1be62:	4620      	mov	r0, r4
   1be64:	f7ff ff59 	bl	1bd1a <tc_sha256_final>
		rekey(ctx->key,
   1be68:	2220      	movs	r2, #32
   1be6a:	4621      	mov	r1, r4
   1be6c:	e7e9      	b.n	1be42 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1be6e:	4608      	mov	r0, r1
   1be70:	e7eb      	b.n	1be4a <tc_hmac_set_key+0x3c>
   1be72:	4610      	mov	r0, r2
   1be74:	e7e9      	b.n	1be4a <tc_hmac_set_key+0x3c>

0001be76 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1be76:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1be78:	4604      	mov	r4, r0
   1be7a:	b140      	cbz	r0, 1be8e <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1be7c:	f7f0 f8da 	bl	c034 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1be80:	2240      	movs	r2, #64	; 0x40
   1be82:	4620      	mov	r0, r4
   1be84:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1be88:	f7ff ff21 	bl	1bcce <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1be8c:	2001      	movs	r0, #1
}
   1be8e:	bd10      	pop	{r4, pc}

0001be90 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1be90:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1be92:	b110      	cbz	r0, 1be9a <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1be94:	f7ff ff1b 	bl	1bcce <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1be98:	2001      	movs	r0, #1
}
   1be9a:	bd08      	pop	{r3, pc}

0001be9c <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1be9c:	b570      	push	{r4, r5, r6, lr}
   1be9e:	460e      	mov	r6, r1
   1bea0:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1bea2:	4605      	mov	r5, r0
   1bea4:	b1f0      	cbz	r0, 1bee4 <tc_hmac_final+0x48>
   1bea6:	2920      	cmp	r1, #32
   1bea8:	d11c      	bne.n	1bee4 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1beaa:	b1ea      	cbz	r2, 1bee8 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1beac:	4611      	mov	r1, r2
   1beae:	f7ff ff34 	bl	1bd1a <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1beb2:	4620      	mov	r0, r4
   1beb4:	f7f0 f8be 	bl	c034 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1beb8:	2240      	movs	r2, #64	; 0x40
   1beba:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1bebe:	4620      	mov	r0, r4
   1bec0:	f7ff ff05 	bl	1bcce <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1bec4:	4632      	mov	r2, r6
   1bec6:	4629      	mov	r1, r5
   1bec8:	4620      	mov	r0, r4
   1beca:	f7ff ff00 	bl	1bcce <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1bece:	4621      	mov	r1, r4
   1bed0:	4628      	mov	r0, r5
   1bed2:	f7ff ff22 	bl	1bd1a <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1bed6:	4620      	mov	r0, r4
   1bed8:	22f0      	movs	r2, #240	; 0xf0
   1beda:	2100      	movs	r1, #0
   1bedc:	f7ff fcd9 	bl	1b892 <_set>

	return TC_CRYPTO_SUCCESS;
   1bee0:	2001      	movs	r0, #1
}
   1bee2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1bee4:	2000      	movs	r0, #0
   1bee6:	e7fc      	b.n	1bee2 <tc_hmac_final+0x46>
   1bee8:	4610      	mov	r0, r2
   1beea:	e7fa      	b.n	1bee2 <tc_hmac_final+0x46>

0001beec <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1beec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bef0:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1bef2:	f04f 0b01 	mov.w	fp, #1
{
   1bef6:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1bef8:	2300      	movs	r3, #0
{
   1befa:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1befc:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1bf00:	4631      	mov	r1, r6
{
   1bf02:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bf04:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1bf06:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1bf0a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1bf0e:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bf12:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bf16:	f7ff ff7a 	bl	1be0e <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1bf1a:	4620      	mov	r0, r4
   1bf1c:	f7ff ffab 	bl	1be76 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bf20:	2220      	movs	r2, #32
   1bf22:	4629      	mov	r1, r5
   1bf24:	4620      	mov	r0, r4
   1bf26:	f7ff ffb3 	bl	1be90 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1bf2a:	465a      	mov	r2, fp
   1bf2c:	4620      	mov	r0, r4
   1bf2e:	f10d 0106 	add.w	r1, sp, #6
   1bf32:	f7ff ffad 	bl	1be90 <tc_hmac_update>

	if (data && datalen)
   1bf36:	f1b8 0f00 	cmp.w	r8, #0
   1bf3a:	d007      	beq.n	1bf4c <update+0x60>
   1bf3c:	f1b9 0f00 	cmp.w	r9, #0
   1bf40:	d004      	beq.n	1bf4c <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1bf42:	464a      	mov	r2, r9
   1bf44:	4641      	mov	r1, r8
   1bf46:	4620      	mov	r0, r4
   1bf48:	f7ff ffa2 	bl	1be90 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1bf4c:	b13f      	cbz	r7, 1bf5e <update+0x72>
   1bf4e:	f1ba 0f00 	cmp.w	sl, #0
   1bf52:	d004      	beq.n	1bf5e <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1bf54:	4652      	mov	r2, sl
   1bf56:	4639      	mov	r1, r7
   1bf58:	4620      	mov	r0, r4
   1bf5a:	f7ff ff99 	bl	1be90 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bf5e:	4622      	mov	r2, r4
   1bf60:	2120      	movs	r1, #32
   1bf62:	4630      	mov	r0, r6
   1bf64:	f7ff ff9a 	bl	1be9c <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bf68:	2220      	movs	r2, #32
   1bf6a:	4631      	mov	r1, r6
   1bf6c:	4620      	mov	r0, r4
   1bf6e:	f7ff ff4e 	bl	1be0e <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bf72:	4620      	mov	r0, r4
   1bf74:	f7ff ff7f 	bl	1be76 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bf78:	2220      	movs	r2, #32
   1bf7a:	4629      	mov	r1, r5
   1bf7c:	4620      	mov	r0, r4
   1bf7e:	f7ff ff87 	bl	1be90 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bf82:	4622      	mov	r2, r4
   1bf84:	2120      	movs	r1, #32
   1bf86:	4628      	mov	r0, r5
   1bf88:	f7ff ff88 	bl	1be9c <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1bf8c:	f1b8 0f00 	cmp.w	r8, #0
   1bf90:	d03a      	beq.n	1c008 <update+0x11c>
   1bf92:	f1b9 0f00 	cmp.w	r9, #0
   1bf96:	d037      	beq.n	1c008 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bf98:	2220      	movs	r2, #32
   1bf9a:	4631      	mov	r1, r6
   1bf9c:	4620      	mov	r0, r4
   1bf9e:	f7ff ff36 	bl	1be0e <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1bfa2:	4620      	mov	r0, r4
   1bfa4:	f7ff ff67 	bl	1be76 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bfa8:	2220      	movs	r2, #32
   1bfaa:	4629      	mov	r1, r5
   1bfac:	4620      	mov	r0, r4
   1bfae:	f7ff ff6f 	bl	1be90 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1bfb2:	2201      	movs	r2, #1
   1bfb4:	f10d 0107 	add.w	r1, sp, #7
   1bfb8:	4620      	mov	r0, r4
   1bfba:	f7ff ff69 	bl	1be90 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1bfbe:	464a      	mov	r2, r9
   1bfc0:	4641      	mov	r1, r8
   1bfc2:	4620      	mov	r0, r4
   1bfc4:	f7ff ff64 	bl	1be90 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1bfc8:	b13f      	cbz	r7, 1bfda <update+0xee>
   1bfca:	f1ba 0f00 	cmp.w	sl, #0
   1bfce:	d004      	beq.n	1bfda <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1bfd0:	4652      	mov	r2, sl
   1bfd2:	4639      	mov	r1, r7
   1bfd4:	4620      	mov	r0, r4
   1bfd6:	f7ff ff5b 	bl	1be90 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bfda:	4622      	mov	r2, r4
   1bfdc:	2120      	movs	r1, #32
   1bfde:	4630      	mov	r0, r6
   1bfe0:	f7ff ff5c 	bl	1be9c <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bfe4:	2220      	movs	r2, #32
   1bfe6:	4631      	mov	r1, r6
   1bfe8:	4620      	mov	r0, r4
   1bfea:	f7ff ff10 	bl	1be0e <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bfee:	4620      	mov	r0, r4
   1bff0:	f7ff ff41 	bl	1be76 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bff4:	2220      	movs	r2, #32
   1bff6:	4629      	mov	r1, r5
   1bff8:	4620      	mov	r0, r4
   1bffa:	f7ff ff49 	bl	1be90 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bffe:	4622      	mov	r2, r4
   1c000:	2120      	movs	r1, #32
   1c002:	4628      	mov	r0, r5
   1c004:	f7ff ff4a 	bl	1be9c <tc_hmac_final>
}
   1c008:	b003      	add	sp, #12
   1c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001c00e <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1c00e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c010:	460c      	mov	r4, r1
   1c012:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1c014:	4605      	mov	r5, r0
   1c016:	b1b0      	cbz	r0, 1c046 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1c018:	b1b9      	cbz	r1, 1c04a <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1c01a:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1c01c:	2220      	movs	r2, #32
   1c01e:	2100      	movs	r1, #0
   1c020:	30f0      	adds	r0, #240	; 0xf0
   1c022:	f7ff fc36 	bl	1b892 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1c026:	2220      	movs	r2, #32
   1c028:	2101      	movs	r1, #1
   1c02a:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1c02e:	f7ff fc30 	bl	1b892 <_set>
	update(prng, personalization, plen, 0, 0);
   1c032:	4628      	mov	r0, r5
   1c034:	4633      	mov	r3, r6
   1c036:	463a      	mov	r2, r7
   1c038:	4621      	mov	r1, r4
   1c03a:	9600      	str	r6, [sp, #0]
   1c03c:	f7ff ff56 	bl	1beec <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1c040:	2001      	movs	r0, #1
	prng->countdown = 0;
   1c042:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1c046:	b003      	add	sp, #12
   1c048:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1c04a:	4608      	mov	r0, r1
   1c04c:	e7fb      	b.n	1c046 <tc_hmac_prng_init+0x38>

0001c04e <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1c04e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c050:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1c052:	4605      	mov	r5, r0
   1c054:	b180      	cbz	r0, 1c078 <tc_hmac_prng_reseed+0x2a>
   1c056:	b179      	cbz	r1, 1c078 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1c058:	2a1f      	cmp	r2, #31
   1c05a:	d90d      	bls.n	1c078 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1c05c:	b153      	cbz	r3, 1c074 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1c05e:	b16c      	cbz	r4, 1c07c <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1c060:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1c062:	f7ff ff43 	bl	1beec <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1c066:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1c06a:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1c06c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1c070:	b003      	add	sp, #12
   1c072:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1c074:	9300      	str	r3, [sp, #0]
   1c076:	e7f4      	b.n	1c062 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1c078:	2000      	movs	r0, #0
   1c07a:	e7f9      	b.n	1c070 <tc_hmac_prng_reseed+0x22>
   1c07c:	4620      	mov	r0, r4
   1c07e:	e7f7      	b.n	1c070 <tc_hmac_prng_reseed+0x22>

0001c080 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1c080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c084:	460d      	mov	r5, r1
   1c086:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1c088:	4680      	mov	r8, r0
   1c08a:	b3d8      	cbz	r0, 1c104 <tc_hmac_prng_generate+0x84>
   1c08c:	b3d2      	cbz	r2, 1c104 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1c08e:	1e4b      	subs	r3, r1, #1
   1c090:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1c094:	d236      	bcs.n	1c104 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1c096:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1c09a:	b3ab      	cbz	r3, 1c108 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1c09c:	3b01      	subs	r3, #1
   1c09e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1c0a2:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1c0a6:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1c0aa:	2220      	movs	r2, #32
   1c0ac:	4649      	mov	r1, r9
   1c0ae:	4620      	mov	r0, r4
   1c0b0:	f7ff fead 	bl	1be0e <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1c0b4:	4620      	mov	r0, r4
   1c0b6:	f7ff fede 	bl	1be76 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1c0ba:	2220      	movs	r2, #32
   1c0bc:	4639      	mov	r1, r7
   1c0be:	4620      	mov	r0, r4
   1c0c0:	f7ff fee6 	bl	1be90 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1c0c4:	4622      	mov	r2, r4
   1c0c6:	2120      	movs	r1, #32
   1c0c8:	4638      	mov	r0, r7
   1c0ca:	f7ff fee7 	bl	1be9c <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1c0ce:	2d20      	cmp	r5, #32
   1c0d0:	462e      	mov	r6, r5
   1c0d2:	bf28      	it	cs
   1c0d4:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1c0d6:	4640      	mov	r0, r8
   1c0d8:	4633      	mov	r3, r6
   1c0da:	463a      	mov	r2, r7
   1c0dc:	4631      	mov	r1, r6
   1c0de:	f7ff fbcb 	bl	1b878 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1c0e2:	2d20      	cmp	r5, #32
   1c0e4:	bf38      	it	cc
   1c0e6:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1c0e8:	3d20      	subs	r5, #32
		out += bufferlen;
   1c0ea:	44b0      	add	r8, r6
	while (outlen != 0) {
   1c0ec:	d1dd      	bne.n	1c0aa <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1c0ee:	4620      	mov	r0, r4
   1c0f0:	462b      	mov	r3, r5
   1c0f2:	462a      	mov	r2, r5
   1c0f4:	4629      	mov	r1, r5
   1c0f6:	9500      	str	r5, [sp, #0]
   1c0f8:	f7ff fef8 	bl	1beec <update>

	return TC_CRYPTO_SUCCESS;
   1c0fc:	2001      	movs	r0, #1
}
   1c0fe:	b003      	add	sp, #12
   1c100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1c104:	2000      	movs	r0, #0
   1c106:	e7fa      	b.n	1c0fe <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1c108:	f04f 30ff 	mov.w	r0, #4294967295
   1c10c:	e7f7      	b.n	1c0fe <tc_hmac_prng_generate+0x7e>

0001c10e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1c10e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1c110:	6800      	ldr	r0, [r0, #0]
   1c112:	f7ef bfd9 	b.w	c0c8 <z_arm_fatal_error>

0001c116 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1c116:	2100      	movs	r1, #0
   1c118:	2001      	movs	r0, #1
   1c11a:	f7ef bfd5 	b.w	c0c8 <z_arm_fatal_error>

0001c11e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1c11e:	b508      	push	{r3, lr}
	handler();
   1c120:	f7f0 f89a 	bl	c258 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1c124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1c128:	f7f0 b964 	b.w	c3f4 <z_arm_exc_exit>

0001c12c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1c12c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1c12e:	f383 880b 	msr	PSPLIM, r3
}
   1c132:	4770      	bx	lr

0001c134 <z_log_msg_static_create.constprop.0>:
   1c134:	2300      	movs	r3, #0
   1c136:	f7ee bde1 	b.w	acfc <z_impl_z_log_msg_static_create>

0001c13a <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1c13a:	4770      	bx	lr

0001c13c <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   1c13c:	4770      	bx	lr

0001c13e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1c13e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1c142:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1c146:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1c148:	bf08      	it	eq
   1c14a:	f06f 0015 	mvneq.w	r0, #21
   1c14e:	4770      	bx	lr

0001c150 <mpu_configure_region>:
{
   1c150:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1c152:	890a      	ldrh	r2, [r1, #8]
   1c154:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1c156:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1c158:	684c      	ldr	r4, [r1, #4]
   1c15a:	f002 021f 	and.w	r2, r2, #31
{
   1c15e:	b085      	sub	sp, #20
   1c160:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1c164:	9300      	str	r3, [sp, #0]
   1c166:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1c16a:	f023 031f 	bic.w	r3, r3, #31
   1c16e:	1e62      	subs	r2, r4, #1
   1c170:	4413      	add	r3, r2
   1c172:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1c176:	2807      	cmp	r0, #7
   1c178:	9303      	str	r3, [sp, #12]
   1c17a:	d904      	bls.n	1c186 <_flash_used+0x1a>
}
   1c17c:	b005      	add	sp, #20
   1c17e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1c182:	f7f0 bd55 	b.w	cc30 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   1c186:	4669      	mov	r1, sp
   1c188:	f7f0 fd38 	bl	cbfc <region_init>
}
   1c18c:	b005      	add	sp, #20
   1c18e:	bd30      	pop	{r4, r5, pc}

0001c190 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1c190:	4603      	mov	r3, r0
   1c192:	3901      	subs	r1, #1
   1c194:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1c198:	b90a      	cbnz	r2, 1c19e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1c19a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1c19c:	4770      	bx	lr
		*d = *s;
   1c19e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1c1a2:	e7f7      	b.n	1c194 <strcpy+0x4>

0001c1a4 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1c1a4:	4603      	mov	r3, r0
{
   1c1a6:	b510      	push	{r4, lr}
   1c1a8:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   1c1aa:	b922      	cbnz	r2, 1c1b6 <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1c1ac:	2100      	movs	r1, #0
   1c1ae:	441a      	add	r2, r3
	while (n > 0) {
   1c1b0:	4293      	cmp	r3, r2
   1c1b2:	d108      	bne.n	1c1c6 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   1c1b4:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   1c1b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1c1ba:	2c00      	cmp	r4, #0
   1c1bc:	d0f6      	beq.n	1c1ac <strncpy+0x8>
		*d = *s;
   1c1be:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1c1c2:	3a01      	subs	r2, #1
   1c1c4:	e7f1      	b.n	1c1aa <strncpy+0x6>
		*d = '\0';
   1c1c6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1c1ca:	e7f1      	b.n	1c1b0 <strncpy+0xc>

0001c1cc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1c1cc:	4603      	mov	r3, r0
	size_t n = 0;
   1c1ce:	2000      	movs	r0, #0

	while (*s != '\0') {
   1c1d0:	5c1a      	ldrb	r2, [r3, r0]
   1c1d2:	b902      	cbnz	r2, 1c1d6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1c1d4:	4770      	bx	lr
		n++;
   1c1d6:	3001      	adds	r0, #1
   1c1d8:	e7fa      	b.n	1c1d0 <strlen+0x4>

0001c1da <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1c1da:	4603      	mov	r3, r0
	size_t n = 0;
   1c1dc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1c1de:	5c1a      	ldrb	r2, [r3, r0]
   1c1e0:	b10a      	cbz	r2, 1c1e6 <strnlen+0xc>
   1c1e2:	4288      	cmp	r0, r1
   1c1e4:	d100      	bne.n	1c1e8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1c1e6:	4770      	bx	lr
		n++;
   1c1e8:	3001      	adds	r0, #1
   1c1ea:	e7f8      	b.n	1c1de <strnlen+0x4>

0001c1ec <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1c1ec:	1e43      	subs	r3, r0, #1
   1c1ee:	3901      	subs	r1, #1
   1c1f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1c1f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1c1f8:	4282      	cmp	r2, r0
   1c1fa:	d101      	bne.n	1c200 <strcmp+0x14>
   1c1fc:	2a00      	cmp	r2, #0
   1c1fe:	d1f7      	bne.n	1c1f0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1c200:	1a10      	subs	r0, r2, r0
   1c202:	4770      	bx	lr

0001c204 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1c204:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1c206:	460b      	mov	r3, r1
   1c208:	4605      	mov	r5, r0
   1c20a:	b162      	cbz	r2, 1c226 <strncmp+0x22>
   1c20c:	f810 6b01 	ldrb.w	r6, [r0], #1
   1c210:	781c      	ldrb	r4, [r3, #0]
   1c212:	3101      	adds	r1, #1
   1c214:	42b4      	cmp	r4, r6
   1c216:	d100      	bne.n	1c21a <strncmp+0x16>
   1c218:	b91c      	cbnz	r4, 1c222 <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1c21a:	782a      	ldrb	r2, [r5, #0]
   1c21c:	781b      	ldrb	r3, [r3, #0]
   1c21e:	1ad0      	subs	r0, r2, r3
   1c220:	e002      	b.n	1c228 <strncmp+0x24>
		n--;
   1c222:	3a01      	subs	r2, #1
   1c224:	e7ef      	b.n	1c206 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   1c226:	4610      	mov	r0, r2
}
   1c228:	bd70      	pop	{r4, r5, r6, pc}

0001c22a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1c22a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1c22c:	b15a      	cbz	r2, 1c246 <memcmp+0x1c>
   1c22e:	3901      	subs	r1, #1
   1c230:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1c232:	f810 2b01 	ldrb.w	r2, [r0], #1
   1c236:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1c23a:	42a0      	cmp	r0, r4
   1c23c:	d001      	beq.n	1c242 <memcmp+0x18>
   1c23e:	429a      	cmp	r2, r3
   1c240:	d0f7      	beq.n	1c232 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1c242:	1ad0      	subs	r0, r2, r3
}
   1c244:	bd10      	pop	{r4, pc}
		return 0;
   1c246:	4610      	mov	r0, r2
   1c248:	e7fc      	b.n	1c244 <memcmp+0x1a>

0001c24a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1c24a:	b510      	push	{r4, lr}
   1c24c:	1e43      	subs	r3, r0, #1
   1c24e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1c250:	4291      	cmp	r1, r2
   1c252:	d100      	bne.n	1c256 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1c254:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1c256:	f811 4b01 	ldrb.w	r4, [r1], #1
   1c25a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1c25e:	e7f7      	b.n	1c250 <memcpy+0x6>

0001c260 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1c260:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   1c262:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1c264:	4402      	add	r2, r0
   1c266:	4293      	cmp	r3, r2
   1c268:	d100      	bne.n	1c26c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1c26a:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1c26c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1c270:	e7f9      	b.n	1c266 <memset+0x6>

0001c272 <_stdout_hook_default>:
}
   1c272:	f04f 30ff 	mov.w	r0, #4294967295
   1c276:	4770      	bx	lr

0001c278 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1c278:	b510      	push	{r4, lr}
   1c27a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1c27c:	7801      	ldrb	r1, [r0, #0]
   1c27e:	7822      	ldrb	r2, [r4, #0]
{
   1c280:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1c282:	428a      	cmp	r2, r1
   1c284:	d00f      	beq.n	1c2a6 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1c286:	4669      	mov	r1, sp
   1c288:	f7f0 ff4a 	bl	d120 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1c28c:	4620      	mov	r0, r4
   1c28e:	a905      	add	r1, sp, #20
   1c290:	f7f0 ff46 	bl	d120 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1c294:	2210      	movs	r2, #16
   1c296:	f10d 0115 	add.w	r1, sp, #21
   1c29a:	f10d 0001 	add.w	r0, sp, #1
   1c29e:	f7ff ffc4 	bl	1c22a <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1c2a2:	b00a      	add	sp, #40	; 0x28
   1c2a4:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1c2a6:	2a01      	cmp	r2, #1
   1c2a8:	d006      	beq.n	1c2b8 <bt_uuid_cmp+0x40>
   1c2aa:	2a02      	cmp	r2, #2
   1c2ac:	d007      	beq.n	1c2be <bt_uuid_cmp+0x46>
   1c2ae:	b972      	cbnz	r2, 1c2ce <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1c2b0:	8840      	ldrh	r0, [r0, #2]
   1c2b2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1c2b4:	1ac0      	subs	r0, r0, r3
   1c2b6:	e7f4      	b.n	1c2a2 <bt_uuid_cmp+0x2a>
   1c2b8:	6840      	ldr	r0, [r0, #4]
   1c2ba:	6863      	ldr	r3, [r4, #4]
   1c2bc:	e7fa      	b.n	1c2b4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c2be:	2210      	movs	r2, #16
   1c2c0:	1c61      	adds	r1, r4, #1
   1c2c2:	3001      	adds	r0, #1
}
   1c2c4:	b00a      	add	sp, #40	; 0x28
   1c2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c2ca:	f7ff bfae 	b.w	1c22a <memcmp>
	switch (u1->type) {
   1c2ce:	f06f 0015 	mvn.w	r0, #21
   1c2d2:	e7e6      	b.n	1c2a2 <bt_uuid_cmp+0x2a>

0001c2d4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1c2d4:	2a04      	cmp	r2, #4
{
   1c2d6:	b510      	push	{r4, lr}
	switch (data_len) {
   1c2d8:	d00a      	beq.n	1c2f0 <bt_uuid_create+0x1c>
   1c2da:	2a10      	cmp	r2, #16
   1c2dc:	d00d      	beq.n	1c2fa <bt_uuid_create+0x26>
   1c2de:	2a02      	cmp	r2, #2
   1c2e0:	f04f 0300 	mov.w	r3, #0
   1c2e4:	d10f      	bne.n	1c306 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1c2e6:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1c2e8:	880b      	ldrh	r3, [r1, #0]
   1c2ea:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1c2ec:	2001      	movs	r0, #1
}
   1c2ee:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1c2f0:	2301      	movs	r3, #1
   1c2f2:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1c2f4:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1c2f6:	6043      	str	r3, [r0, #4]
		break;
   1c2f8:	e7f8      	b.n	1c2ec <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1c2fa:	2302      	movs	r3, #2
   1c2fc:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1c300:	f7ff ffa3 	bl	1c24a <memcpy>
		break;
   1c304:	e7f2      	b.n	1c2ec <bt_uuid_create+0x18>
	switch (data_len) {
   1c306:	4618      	mov	r0, r3
   1c308:	e7f1      	b.n	1c2ee <bt_uuid_create+0x1a>

0001c30a <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1c30a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1c30c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1c30e:	2106      	movs	r1, #6
{
   1c310:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1c312:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1c316:	f7f3 f97d 	bl	f614 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1c31a:	b918      	cbnz	r0, 1c324 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1c31c:	79a3      	ldrb	r3, [r4, #6]
   1c31e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c322:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1c324:	bd10      	pop	{r4, pc}

0001c326 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1c326:	280f      	cmp	r0, #15
   1c328:	d807      	bhi.n	1c33a <bt_hci_evt_get_flags+0x14>
   1c32a:	280d      	cmp	r0, #13
   1c32c:	d80b      	bhi.n	1c346 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1c32e:	2805      	cmp	r0, #5
   1c330:	bf08      	it	eq
   1c332:	2003      	moveq	r0, #3
   1c334:	bf18      	it	ne
   1c336:	2002      	movne	r0, #2
   1c338:	4770      	bx	lr
	switch (evt) {
   1c33a:	2813      	cmp	r0, #19
   1c33c:	d003      	beq.n	1c346 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1c33e:	281a      	cmp	r0, #26
   1c340:	bf08      	it	eq
   1c342:	2001      	moveq	r0, #1
   1c344:	e7f6      	b.n	1c334 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1c346:	2001      	movs	r0, #1
	}
}
   1c348:	4770      	bx	lr

0001c34a <hci_vendor_event>:
}
   1c34a:	4770      	bx	lr

0001c34c <bt_addr_le_copy>:
   1c34c:	2207      	movs	r2, #7
   1c34e:	f7ff bf7c 	b.w	1c24a <memcpy>

0001c352 <atomic_or>:
{
   1c352:	4603      	mov	r3, r0
   1c354:	b510      	push	{r4, lr}
}
   1c356:	e8d3 0fef 	ldaex	r0, [r3]
   1c35a:	ea40 0201 	orr.w	r2, r0, r1
   1c35e:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1c362:	2c00      	cmp	r4, #0
   1c364:	d1f7      	bne.n	1c356 <atomic_or+0x4>
   1c366:	bd10      	pop	{r4, pc}

0001c368 <z_log_msg_static_create.constprop.0>:
   1c368:	2300      	movs	r3, #0
   1c36a:	f7ee bcc7 	b.w	acfc <z_impl_z_log_msg_static_create>

0001c36e <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c36e:	e8d0 3fef 	ldaex	r3, [r0]
   1c372:	400b      	ands	r3, r1
   1c374:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c378:	2a00      	cmp	r2, #0
   1c37a:	d1f8      	bne.n	1c36e <atomic_and.isra.0>
}
   1c37c:	4770      	bx	lr

0001c37e <bt_hci_disconnect>:
{
   1c37e:	b570      	push	{r4, r5, r6, lr}
   1c380:	4606      	mov	r6, r0
   1c382:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1c384:	f240 4006 	movw	r0, #1030	; 0x406
   1c388:	2103      	movs	r1, #3
   1c38a:	f7f1 fb93 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
   1c38e:	4604      	mov	r4, r0
   1c390:	b168      	cbz	r0, 1c3ae <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1c392:	2103      	movs	r1, #3
   1c394:	3008      	adds	r0, #8
   1c396:	f7f6 fef3 	bl	13180 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1c39a:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1c39c:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c39e:	4621      	mov	r1, r4
}
   1c3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c3a4:	2200      	movs	r2, #0
   1c3a6:	f240 4006 	movw	r0, #1030	; 0x406
   1c3aa:	f7f1 bbd1 	b.w	db50 <bt_hci_cmd_send_sync>
}
   1c3ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c3b2:	bd70      	pop	{r4, r5, r6, pc}

0001c3b4 <bt_le_set_data_len>:
{
   1c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3b6:	4607      	mov	r7, r0
   1c3b8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c3ba:	f242 0022 	movw	r0, #8226	; 0x2022
   1c3be:	2106      	movs	r1, #6
{
   1c3c0:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c3c2:	f7f1 fb77 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
   1c3c6:	4604      	mov	r4, r0
   1c3c8:	b178      	cbz	r0, 1c3ea <bt_le_set_data_len+0x36>
   1c3ca:	2106      	movs	r1, #6
   1c3cc:	3008      	adds	r0, #8
   1c3ce:	f7f6 fed7 	bl	13180 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c3d2:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c3d4:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c3d6:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c3d8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1c3da:	4621      	mov	r1, r4
}
   1c3dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1c3e0:	2200      	movs	r2, #0
   1c3e2:	f242 0022 	movw	r0, #8226	; 0x2022
   1c3e6:	f7f1 bbb3 	b.w	db50 <bt_hci_cmd_send_sync>
}
   1c3ea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c3f0 <bt_le_set_phy>:
{
   1c3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c3f4:	4681      	mov	r9, r0
   1c3f6:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c3f8:	f242 0032 	movw	r0, #8242	; 0x2032
   1c3fc:	2107      	movs	r1, #7
{
   1c3fe:	4617      	mov	r7, r2
   1c400:	461e      	mov	r6, r3
   1c402:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c406:	f7f1 fb55 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
   1c40a:	4605      	mov	r5, r0
   1c40c:	b1a0      	cbz	r0, 1c438 <bt_le_set_phy+0x48>
   1c40e:	2107      	movs	r1, #7
   1c410:	3008      	adds	r0, #8
   1c412:	f7f6 feb5 	bl	13180 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c416:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1c41a:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c41e:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1c420:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c422:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1c424:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1c428:	4629      	mov	r1, r5
}
   1c42a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1c42e:	2200      	movs	r2, #0
   1c430:	f242 0032 	movw	r0, #8242	; 0x2032
   1c434:	f7f1 bb8c 	b.w	db50 <bt_hci_cmd_send_sync>
}
   1c438:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c440 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1c440:	6880      	ldr	r0, [r0, #8]
   1c442:	f7f1 bc55 	b.w	dcf0 <bt_hci_le_enh_conn_complete>

0001c446 <bt_le_conn_params_valid>:
{
   1c446:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1c448:	8803      	ldrh	r3, [r0, #0]
   1c44a:	8842      	ldrh	r2, [r0, #2]
   1c44c:	4293      	cmp	r3, r2
   1c44e:	d819      	bhi.n	1c484 <bt_le_conn_params_valid+0x3e>
   1c450:	2b05      	cmp	r3, #5
   1c452:	d917      	bls.n	1c484 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1c454:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1c458:	d814      	bhi.n	1c484 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1c45a:	8883      	ldrh	r3, [r0, #4]
   1c45c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1c460:	d210      	bcs.n	1c484 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c462:	f640 4476 	movw	r4, #3190	; 0xc76
   1c466:	88c0      	ldrh	r0, [r0, #6]
   1c468:	f1a0 010a 	sub.w	r1, r0, #10
   1c46c:	b289      	uxth	r1, r1
   1c46e:	42a1      	cmp	r1, r4
   1c470:	d808      	bhi.n	1c484 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1c472:	3301      	adds	r3, #1
   1c474:	b29b      	uxth	r3, r3
   1c476:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c478:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1c47c:	bf34      	ite	cc
   1c47e:	2001      	movcc	r0, #1
   1c480:	2000      	movcs	r0, #0
}
   1c482:	bd10      	pop	{r4, pc}
		return false;
   1c484:	2000      	movs	r0, #0
   1c486:	e7fc      	b.n	1c482 <bt_le_conn_params_valid+0x3c>

0001c488 <le_conn_param_neg_reply>:
{
   1c488:	b570      	push	{r4, r5, r6, lr}
   1c48a:	4606      	mov	r6, r0
   1c48c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1c48e:	f242 0021 	movw	r0, #8225	; 0x2021
   1c492:	2103      	movs	r1, #3
   1c494:	f7f1 fb0e 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
   1c498:	4604      	mov	r4, r0
   1c49a:	b918      	cbnz	r0, 1c4a4 <le_conn_param_neg_reply+0x1c>
}
   1c49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c4a0:	f7f0 bf3a 	b.w	d318 <le_conn_param_neg_reply.part.0>
   1c4a4:	2103      	movs	r1, #3
   1c4a6:	3008      	adds	r0, #8
   1c4a8:	f7f6 fe6a 	bl	13180 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1c4ac:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1c4ae:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1c4b0:	4621      	mov	r1, r4
}
   1c4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1c4b6:	f242 0021 	movw	r0, #8225	; 0x2021
   1c4ba:	f7f1 bdc7 	b.w	e04c <bt_hci_cmd_send>

0001c4be <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1c4be:	2000      	movs	r0, #0
   1c4c0:	4770      	bx	lr

0001c4c2 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1c4c2:	2000      	movs	r0, #0
   1c4c4:	4770      	bx	lr

0001c4c6 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   1c4c6:	2207      	movs	r2, #7
{
   1c4c8:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1c4ca:	f7ff feae 	bl	1c22a <memcmp>
}
   1c4ce:	fab0 f080 	clz	r0, r0
   1c4d2:	0940      	lsrs	r0, r0, #5
   1c4d4:	bd08      	pop	{r3, pc}

0001c4d6 <z_log_msg_static_create.constprop.0>:
   1c4d6:	2300      	movs	r3, #0
   1c4d8:	f7ee bc10 	b.w	acfc <z_impl_z_log_msg_static_create>

0001c4dc <bt_lookup_id_addr>:
	return addr;
   1c4dc:	2800      	cmp	r0, #0
}
   1c4de:	bf0c      	ite	eq
   1c4e0:	4608      	moveq	r0, r1
   1c4e2:	2000      	movne	r0, #0
   1c4e4:	4770      	bx	lr

0001c4e6 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1c4e6:	b118      	cbz	r0, 1c4f0 <bt_id_set_adv_random_addr+0xa>
   1c4e8:	b111      	cbz	r1, 1c4f0 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1c4ea:	4608      	mov	r0, r1
   1c4ec:	f7f2 bb32 	b.w	eb54 <set_random_address>
}
   1c4f0:	f06f 0015 	mvn.w	r0, #21
   1c4f4:	4770      	bx	lr

0001c4f6 <bt_id_set_adv_private_addr>:
{
   1c4f6:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1c4f8:	4604      	mov	r4, r0
   1c4fa:	b180      	cbz	r0, 1c51e <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1c4fc:	2106      	movs	r1, #6
   1c4fe:	4668      	mov	r0, sp
   1c500:	f7f3 f888 	bl	f614 <bt_rand>
	if (err) {
   1c504:	b948      	cbnz	r0, 1c51a <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1c506:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1c50a:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1c50c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1c510:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1c512:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1c516:	f7ff ffe6 	bl	1c4e6 <bt_id_set_adv_random_addr>
}
   1c51a:	b002      	add	sp, #8
   1c51c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1c51e:	f06f 0015 	mvn.w	r0, #21
   1c522:	e7fa      	b.n	1c51a <bt_id_set_adv_private_addr+0x24>

0001c524 <bt_id_adv_random_addr_check>:
}
   1c524:	3800      	subs	r0, #0
   1c526:	bf18      	it	ne
   1c528:	2001      	movne	r0, #1
   1c52a:	4770      	bx	lr

0001c52c <get_adv_channel_map>:
{
   1c52c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1c52e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1c532:	bf0c      	ite	eq
   1c534:	2007      	moveq	r0, #7
   1c536:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1c538:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1c53a:	bf48      	it	mi
   1c53c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1c540:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1c542:	bf48      	it	mi
   1c544:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1c548:	4770      	bx	lr

0001c54a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c54a:	e8d0 0faf 	lda	r0, [r0]
}
   1c54e:	4770      	bx	lr

0001c550 <atomic_and>:
{
   1c550:	4603      	mov	r3, r0
   1c552:	b510      	push	{r4, lr}
}
   1c554:	e8d3 0fef 	ldaex	r0, [r3]
   1c558:	ea00 0201 	and.w	r2, r0, r1
   1c55c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1c560:	2c00      	cmp	r4, #0
   1c562:	d1f7      	bne.n	1c554 <atomic_and+0x4>
   1c564:	bd10      	pop	{r4, pc}

0001c566 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c566:	2301      	movs	r3, #1
{
   1c568:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c56a:	fa03 f101 	lsl.w	r1, r3, r1
{
   1c56e:	4604      	mov	r4, r0
	if (val) {
   1c570:	b142      	cbz	r2, 1c584 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c572:	e8d4 3fef 	ldaex	r3, [r4]
   1c576:	430b      	orrs	r3, r1
   1c578:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1c57c:	2a00      	cmp	r2, #0
   1c57e:	d1f8      	bne.n	1c572 <atomic_set_bit_to+0xc>
	}
}
   1c580:	bc10      	pop	{r4}
   1c582:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c584:	43c9      	mvns	r1, r1
}
   1c586:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c588:	f7ff bfe2 	b.w	1c550 <atomic_and>

0001c58c <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c590:	b087      	sub	sp, #28
   1c592:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1c596:	4605      	mov	r5, r0
   1c598:	460c      	mov	r4, r1
   1c59a:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1c59c:	2100      	movs	r1, #0
   1c59e:	2210      	movs	r2, #16
   1c5a0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1c5a2:	461f      	mov	r7, r3
   1c5a4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1c5a8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   1c5ac:	f7ff fe58 	bl	1c260 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1c5b0:	b9ce      	cbnz	r6, 1c5e6 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   1c5b2:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1c5b6:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1c5b8:	f242 0008 	movw	r0, #8200	; 0x2008
   1c5bc:	a902      	add	r1, sp, #8
   1c5be:	f7f2 fcd9 	bl	ef74 <hci_set_ad>
		if (err) {
   1c5c2:	4604      	mov	r4, r0
   1c5c4:	b958      	cbnz	r0, 1c5de <le_adv_update.constprop.0+0x52>
	if (scannable) {
   1c5c6:	f1ba 0f00 	cmp.w	sl, #0
   1c5ca:	d13a      	bne.n	1c642 <le_adv_update.constprop.0+0xb6>
   1c5cc:	3510      	adds	r5, #16
   1c5ce:	e8d5 3fef 	ldaex	r3, [r5]
   1c5d2:	f043 0304 	orr.w	r3, r3, #4
   1c5d6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c5da:	2a00      	cmp	r2, #0
   1c5dc:	d1f7      	bne.n	1c5ce <le_adv_update.constprop.0+0x42>
}
   1c5de:	4620      	mov	r0, r4
   1c5e0:	b007      	add	sp, #28
   1c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1c5e6:	f7f2 fa99 	bl	eb1c <bt_get_name>
   1c5ea:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1c5ec:	b9e4      	cbnz	r4, 1c628 <le_adv_update.constprop.0+0x9c>
   1c5ee:	bb37      	cbnz	r7, 1c63e <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   1c5f0:	4658      	mov	r0, fp
   1c5f2:	f7ff fdeb 	bl	1c1cc <strlen>
   1c5f6:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1c5f8:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1c5fa:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1c5fe:	f88d 3000 	strb.w	r3, [sp]
   1c602:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1c606:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1c60a:	d1d4      	bne.n	1c5b6 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   1c60c:	2202      	movs	r2, #2
			d[1].data = &data;
   1c60e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1c612:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1c614:	e7d0      	b.n	1c5b8 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1c616:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1c61a:	3a08      	subs	r2, #8
   1c61c:	2a01      	cmp	r2, #1
   1c61e:	d924      	bls.n	1c66a <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1c620:	3301      	adds	r3, #1
   1c622:	4598      	cmp	r8, r3
   1c624:	d1f7      	bne.n	1c616 <le_adv_update.constprop.0+0x8a>
   1c626:	e7e2      	b.n	1c5ee <le_adv_update.constprop.0+0x62>
   1c628:	2300      	movs	r3, #0
   1c62a:	e7fa      	b.n	1c622 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1c62c:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1c630:	3a08      	subs	r2, #8
   1c632:	2a01      	cmp	r2, #1
   1c634:	d919      	bls.n	1c66a <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1c636:	3301      	adds	r3, #1
   1c638:	4599      	cmp	r9, r3
   1c63a:	d1f7      	bne.n	1c62c <le_adv_update.constprop.0+0xa0>
   1c63c:	e7d8      	b.n	1c5f0 <le_adv_update.constprop.0+0x64>
   1c63e:	2300      	movs	r3, #0
   1c640:	e7fa      	b.n	1c638 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   1c642:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   1c644:	2e02      	cmp	r6, #2
			d[1].len = 1;
   1c646:	bf08      	it	eq
   1c648:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1c64a:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   1c64e:	bf08      	it	eq
   1c650:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1c652:	a902      	add	r1, sp, #8
			d[1].data = &data;
   1c654:	bf08      	it	eq
   1c656:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1c65a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1c65e:	f7f2 fc89 	bl	ef74 <hci_set_ad>
		if (err) {
   1c662:	2800      	cmp	r0, #0
   1c664:	d0b2      	beq.n	1c5cc <le_adv_update.constprop.0+0x40>
   1c666:	4604      	mov	r4, r0
   1c668:	e7b9      	b.n	1c5de <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   1c66a:	f06f 0415 	mvn.w	r4, #21
   1c66e:	e7b6      	b.n	1c5de <le_adv_update.constprop.0+0x52>

0001c670 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1c670:	6843      	ldr	r3, [r0, #4]
   1c672:	f013 0008 	ands.w	r0, r3, #8
   1c676:	d00a      	beq.n	1c68e <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1c678:	035a      	lsls	r2, r3, #13
   1c67a:	d407      	bmi.n	1c68c <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1c67c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1c680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1c684:	bf14      	ite	ne
   1c686:	2002      	movne	r0, #2
   1c688:	2001      	moveq	r0, #1
   1c68a:	4770      	bx	lr
   1c68c:	2001      	movs	r0, #1
}
   1c68e:	4770      	bx	lr

0001c690 <bt_le_adv_set_enable_legacy>:
{
   1c690:	b570      	push	{r4, r5, r6, lr}
   1c692:	4606      	mov	r6, r0
   1c694:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1c696:	f242 000a 	movw	r0, #8202	; 0x200a
   1c69a:	2101      	movs	r1, #1
{
   1c69c:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1c69e:	f7f1 fa09 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
   1c6a2:	4604      	mov	r4, r0
   1c6a4:	b1b0      	cbz	r0, 1c6d4 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1c6a6:	3008      	adds	r0, #8
	if (enable) {
   1c6a8:	b195      	cbz	r5, 1c6d0 <bt_le_adv_set_enable_legacy+0x40>
   1c6aa:	2101      	movs	r1, #1
   1c6ac:	f000 ff9b 	bl	1d5e6 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1c6b0:	4620      	mov	r0, r4
   1c6b2:	f106 0210 	add.w	r2, r6, #16
   1c6b6:	a903      	add	r1, sp, #12
   1c6b8:	2307      	movs	r3, #7
   1c6ba:	9500      	str	r5, [sp, #0]
   1c6bc:	f7f1 f9e8 	bl	da90 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1c6c0:	2200      	movs	r2, #0
   1c6c2:	4621      	mov	r1, r4
   1c6c4:	f242 000a 	movw	r0, #8202	; 0x200a
   1c6c8:	f7f1 fa42 	bl	db50 <bt_hci_cmd_send_sync>
}
   1c6cc:	b006      	add	sp, #24
   1c6ce:	bd70      	pop	{r4, r5, r6, pc}
   1c6d0:	4629      	mov	r1, r5
   1c6d2:	e7eb      	b.n	1c6ac <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1c6d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c6d8:	e7f8      	b.n	1c6cc <bt_le_adv_set_enable_legacy+0x3c>

0001c6da <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1c6da:	3018      	adds	r0, #24
   1c6dc:	f7fc b8a0 	b.w	18820 <k_work_cancel_delayable>

0001c6e0 <z_log_msg_static_create.constprop.0>:
   1c6e0:	2300      	movs	r3, #0
   1c6e2:	f7ee bb0b 	b.w	acfc <z_impl_z_log_msg_static_create>

0001c6e6 <tx_complete_work>:
	tx_notify(conn);
   1c6e6:	3828      	subs	r0, #40	; 0x28
   1c6e8:	f7f2 bfe8 	b.w	f6bc <tx_notify>

0001c6ec <bt_conn_reset_rx_state>:
{
   1c6ec:	b510      	push	{r4, lr}
   1c6ee:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c6f0:	6900      	ldr	r0, [r0, #16]
   1c6f2:	b118      	cbz	r0, 1c6fc <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c6f4:	f7f6 fc22 	bl	12f3c <net_buf_unref>
	conn->rx = NULL;
   1c6f8:	2300      	movs	r3, #0
   1c6fa:	6123      	str	r3, [r4, #16]
}
   1c6fc:	bd10      	pop	{r4, pc}

0001c6fe <conn_lookup_handle>:
{
   1c6fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c702:	4607      	mov	r7, r0
   1c704:	460e      	mov	r6, r1
   1c706:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c708:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c70a:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1c70e:	42b4      	cmp	r4, r6
   1c710:	d103      	bne.n	1c71a <conn_lookup_handle+0x1c>
	return NULL;
   1c712:	2300      	movs	r3, #0
}
   1c714:	4618      	mov	r0, r3
   1c716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c71a:	fb09 7004 	mla	r0, r9, r4, r7
   1c71e:	f7f3 faa1 	bl	fc64 <bt_conn_ref>
   1c722:	4603      	mov	r3, r0
		if (!conn) {
   1c724:	b158      	cbz	r0, 1c73e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c726:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1c728:	2d01      	cmp	r5, #1
   1c72a:	d002      	beq.n	1c732 <conn_lookup_handle+0x34>
   1c72c:	3d07      	subs	r5, #7
   1c72e:	2d01      	cmp	r5, #1
   1c730:	d803      	bhi.n	1c73a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c732:	881a      	ldrh	r2, [r3, #0]
   1c734:	4542      	cmp	r2, r8
   1c736:	d0ed      	beq.n	1c714 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c738:	4618      	mov	r0, r3
   1c73a:	f7f3 fabb 	bl	fcb4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c73e:	3401      	adds	r4, #1
   1c740:	e7e5      	b.n	1c70e <conn_lookup_handle+0x10>

0001c742 <bt_conn_connected>:
{
   1c742:	b510      	push	{r4, lr}
   1c744:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1c746:	f7f3 ff2f 	bl	105a8 <bt_l2cap_connected>
	notify_connected(conn);
   1c74a:	4620      	mov	r0, r4
}
   1c74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1c750:	f7f2 bf7e 	b.w	f650 <notify_connected>

0001c754 <bt_conn_get_security>:
}
   1c754:	2001      	movs	r0, #1
   1c756:	4770      	bx	lr

0001c758 <bt_conn_is_peer_addr_le>:
{
   1c758:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c75a:	7a03      	ldrb	r3, [r0, #8]
{
   1c75c:	4604      	mov	r4, r0
	if (id != conn->id) {
   1c75e:	428b      	cmp	r3, r1
{
   1c760:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c762:	d115      	bne.n	1c790 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c764:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1c768:	2207      	movs	r2, #7
   1c76a:	4628      	mov	r0, r5
   1c76c:	f7ff fd5d 	bl	1c22a <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1c770:	b180      	cbz	r0, 1c794 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c772:	78e3      	ldrb	r3, [r4, #3]
   1c774:	2207      	movs	r2, #7
   1c776:	b943      	cbnz	r3, 1c78a <bt_conn_is_peer_addr_le+0x32>
   1c778:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   1c77c:	4628      	mov	r0, r5
   1c77e:	f7ff fd54 	bl	1c22a <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1c782:	fab0 f080 	clz	r0, r0
   1c786:	0940      	lsrs	r0, r0, #5
}
   1c788:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1c78a:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1c78e:	e7f5      	b.n	1c77c <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c790:	2000      	movs	r0, #0
   1c792:	e7f9      	b.n	1c788 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c794:	2001      	movs	r0, #1
   1c796:	e7f7      	b.n	1c788 <bt_conn_is_peer_addr_le+0x30>

0001c798 <bt_conn_le_conn_update>:
{
   1c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c79a:	4607      	mov	r7, r0
   1c79c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c79e:	f242 0013 	movw	r0, #8211	; 0x2013
   1c7a2:	210e      	movs	r1, #14
   1c7a4:	f7f1 f986 	bl	dab4 <bt_hci_cmd_create>
	if (!buf) {
   1c7a8:	4606      	mov	r6, r0
   1c7aa:	b1d0      	cbz	r0, 1c7e2 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1c7ac:	210e      	movs	r1, #14
   1c7ae:	3008      	adds	r0, #8
   1c7b0:	f7f6 fce6 	bl	13180 <net_buf_simple_add>
   1c7b4:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c7b6:	220e      	movs	r2, #14
   1c7b8:	2100      	movs	r1, #0
   1c7ba:	f7ff fd51 	bl	1c260 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c7be:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c7c0:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c7c2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c7c4:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c7c6:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c7c8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c7ca:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c7cc:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c7d0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c7d2:	88ab      	ldrh	r3, [r5, #4]
   1c7d4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c7d6:	88eb      	ldrh	r3, [r5, #6]
   1c7d8:	8123      	strh	r3, [r4, #8]
}
   1c7da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c7de:	f7f1 b9b7 	b.w	db50 <bt_hci_cmd_send_sync>
}
   1c7e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c7e8 <l2cap_connected>:
}
   1c7e8:	4770      	bx	lr

0001c7ea <z_log_msg_static_create.constprop.0>:
   1c7ea:	2300      	movs	r3, #0
   1c7ec:	f7ee ba86 	b.w	acfc <z_impl_z_log_msg_static_create>

0001c7f0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c7f2:	4605      	mov	r5, r0
   1c7f4:	460f      	mov	r7, r1
   1c7f6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1c7f8:	2300      	movs	r3, #0
   1c7fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c7fe:	2104      	movs	r1, #4
   1c800:	2000      	movs	r0, #0
   1c802:	f7f3 fba5 	bl	ff50 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1c806:	4604      	mov	r4, r0
   1c808:	b920      	cbnz	r0, 1c814 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1c80a:	4628      	mov	r0, r5
}
   1c80c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c810:	f7f3 be8e 	b.w	10530 <l2cap_create_le_sig_pdu.part.0>
   1c814:	2104      	movs	r1, #4
   1c816:	3008      	adds	r0, #8
   1c818:	f7f6 fcb2 	bl	13180 <net_buf_simple_add>
	hdr->code = code;
   1c81c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1c81e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1c820:	8046      	strh	r6, [r0, #2]
}
   1c822:	4620      	mov	r0, r4
   1c824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c826 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1c826:	4770      	bx	lr

0001c828 <bt_l2cap_chan_del>:
{
   1c828:	b570      	push	{r4, r5, r6, lr}
   1c82a:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c82c:	e9d0 3500 	ldrd	r3, r5, [r0]
   1c830:	b123      	cbz	r3, 1c83c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c832:	686b      	ldr	r3, [r5, #4]
   1c834:	b103      	cbz	r3, 1c838 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c836:	4798      	blx	r3
	chan->conn = NULL;
   1c838:	2300      	movs	r3, #0
   1c83a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c83c:	68e3      	ldr	r3, [r4, #12]
   1c83e:	b10b      	cbz	r3, 1c844 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c840:	4620      	mov	r0, r4
   1c842:	4798      	blx	r3
	if (ops->released) {
   1c844:	6a2b      	ldr	r3, [r5, #32]
   1c846:	b11b      	cbz	r3, 1c850 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c848:	4620      	mov	r0, r4
}
   1c84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c84e:	4718      	bx	r3
}
   1c850:	bd70      	pop	{r4, r5, r6, pc}

0001c852 <bt_l2cap_disconnected>:
{
   1c852:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1c854:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c856:	b130      	cbz	r0, 1c866 <bt_l2cap_disconnected+0x14>
	return node->next;
   1c858:	f850 4908 	ldr.w	r4, [r0], #-8
   1c85c:	b104      	cbz	r4, 1c860 <bt_l2cap_disconnected+0xe>
   1c85e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c860:	f7ff ffe2 	bl	1c828 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c864:	b904      	cbnz	r4, 1c868 <bt_l2cap_disconnected+0x16>
}
   1c866:	bd38      	pop	{r3, r4, r5, pc}
   1c868:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c86a:	b12d      	cbz	r5, 1c878 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1c86c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c86e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1c870:	f7ff ffda 	bl	1c828 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c874:	462c      	mov	r4, r5
   1c876:	e7f7      	b.n	1c868 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1c878:	4620      	mov	r0, r4
}
   1c87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1c87e:	f7ff bfd3 	b.w	1c828 <bt_l2cap_chan_del>

0001c882 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c882:	3104      	adds	r1, #4
   1c884:	f7f3 bb64 	b.w	ff50 <bt_conn_create_pdu_timeout>

0001c888 <bt_l2cap_send_cb>:
{
   1c888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c88c:	4614      	mov	r4, r2
   1c88e:	4605      	mov	r5, r0
   1c890:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c892:	f102 0008 	add.w	r0, r2, #8
   1c896:	2104      	movs	r1, #4
   1c898:	461e      	mov	r6, r3
   1c89a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c89e:	f7f6 fc13 	bl	130c8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c8a2:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1c8a4:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c8a6:	3a04      	subs	r2, #4
   1c8a8:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c8aa:	4643      	mov	r3, r8
   1c8ac:	4632      	mov	r2, r6
   1c8ae:	4621      	mov	r1, r4
   1c8b0:	4628      	mov	r0, r5
}
   1c8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c8b6:	f7f3 b933 	b.w	fb20 <bt_conn_send_cb>

0001c8ba <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c8ba:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c8bc:	b128      	cbz	r0, 1c8ca <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c8be:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c8c0:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c8c2:	428b      	cmp	r3, r1
   1c8c4:	d001      	beq.n	1c8ca <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   1c8c6:	6880      	ldr	r0, [r0, #8]
   1c8c8:	e7f8      	b.n	1c8bc <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1c8ca:	4770      	bx	lr

0001c8cc <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1c8cc:	4770      	bx	lr

0001c8ce <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c8ce:	4603      	mov	r3, r0
	return list->head;
   1c8d0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c8d2:	b128      	cbz	r0, 1c8e0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c8d4:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c8d6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c8d8:	4288      	cmp	r0, r1
	list->head = node;
   1c8da:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c8dc:	bf08      	it	eq
   1c8de:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c8e0:	4770      	bx	lr

0001c8e2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c8e2:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c8e4:	2000      	movs	r0, #0

	while (buf) {
   1c8e6:	b903      	cbnz	r3, 1c8ea <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c8e8:	4770      	bx	lr
		bytes += buf->len;
   1c8ea:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c8ec:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c8ee:	4410      	add	r0, r2
		buf = buf->frags;
   1c8f0:	e7f9      	b.n	1c8e6 <net_buf_frags_len+0x4>

0001c8f2 <attr_read_type_cb>:
{
   1c8f2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c8f4:	68d4      	ldr	r4, [r2, #12]
   1c8f6:	3102      	adds	r1, #2
   1c8f8:	7823      	ldrb	r3, [r4, #0]
   1c8fa:	b913      	cbnz	r3, 1c902 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c8fc:	7021      	strb	r1, [r4, #0]
	return true;
   1c8fe:	2001      	movs	r0, #1
}
   1c900:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c902:	428b      	cmp	r3, r1
   1c904:	d0fb      	beq.n	1c8fe <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c906:	8983      	ldrh	r3, [r0, #12]
   1c908:	3b02      	subs	r3, #2
   1c90a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c90c:	2000      	movs	r0, #0
   1c90e:	6110      	str	r0, [r2, #16]
		return false;
   1c910:	e7f6      	b.n	1c900 <attr_read_type_cb+0xe>

0001c912 <att_prepare_write_req>:
}
   1c912:	2006      	movs	r0, #6
   1c914:	4770      	bx	lr

0001c916 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c916:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c91a:	4108      	asrs	r0, r1
}
   1c91c:	f000 0001 	and.w	r0, r0, #1
   1c920:	4770      	bx	lr

0001c922 <write_cb>:
{
   1c922:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c924:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c926:	4601      	mov	r1, r0
{
   1c928:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c92a:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1c92e:	6820      	ldr	r0, [r4, #0]
   1c930:	f000 fd9c 	bl	1d46c <bt_gatt_check_perm>
   1c934:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c936:	bb00      	cbnz	r0, 1c97a <write_cb+0x58>
	if (!data->req) {
   1c938:	7a23      	ldrb	r3, [r4, #8]
   1c93a:	b1b3      	cbz	r3, 1c96a <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1c93c:	f1a3 0218 	sub.w	r2, r3, #24
   1c940:	4253      	negs	r3, r2
   1c942:	4153      	adcs	r3, r2
   1c944:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c946:	9301      	str	r3, [sp, #4]
   1c948:	8a63      	ldrh	r3, [r4, #18]
   1c94a:	4629      	mov	r1, r5
   1c94c:	9300      	str	r3, [sp, #0]
   1c94e:	68ae      	ldr	r6, [r5, #8]
   1c950:	8a23      	ldrh	r3, [r4, #16]
   1c952:	68e2      	ldr	r2, [r4, #12]
   1c954:	6820      	ldr	r0, [r4, #0]
   1c956:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1c958:	2800      	cmp	r0, #0
   1c95a:	db08      	blt.n	1c96e <write_cb+0x4c>
   1c95c:	8a23      	ldrh	r3, [r4, #16]
   1c95e:	4298      	cmp	r0, r3
   1c960:	d10e      	bne.n	1c980 <write_cb+0x5e>
	data->err = 0U;
   1c962:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   1c964:	2001      	movs	r0, #1
	data->err = 0U;
   1c966:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c968:	e008      	b.n	1c97c <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c96a:	2302      	movs	r3, #2
   1c96c:	e7eb      	b.n	1c946 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1c96e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1c972:	d305      	bcc.n	1c980 <write_cb+0x5e>
		return -err;
   1c974:	4240      	negs	r0, r0
   1c976:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1c978:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c97a:	2000      	movs	r0, #0
}
   1c97c:	b002      	add	sp, #8
   1c97e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c980:	200e      	movs	r0, #14
   1c982:	e7f9      	b.n	1c978 <write_cb+0x56>

0001c984 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1c984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c986:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c98a:	2300      	movs	r3, #0
   1c98c:	461a      	mov	r2, r3
   1c98e:	9300      	str	r3, [sp, #0]
   1c990:	f7f5 fb22 	bl	11fd8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1c994:	b005      	add	sp, #20
   1c996:	f85d fb04 	ldr.w	pc, [sp], #4

0001c99a <find_info_cb>:
{
   1c99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c99c:	6893      	ldr	r3, [r2, #8]
{
   1c99e:	4605      	mov	r5, r0
   1c9a0:	460e      	mov	r6, r1
   1c9a2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c9a4:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c9a6:	b963      	cbnz	r3, 1c9c2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c9a8:	6850      	ldr	r0, [r2, #4]
   1c9aa:	2101      	movs	r1, #1
   1c9ac:	3008      	adds	r0, #8
   1c9ae:	f7f6 fbe7 	bl	13180 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c9b2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c9b4:	682b      	ldr	r3, [r5, #0]
   1c9b6:	781b      	ldrb	r3, [r3, #0]
   1c9b8:	2b00      	cmp	r3, #0
   1c9ba:	bf14      	ite	ne
   1c9bc:	2302      	movne	r3, #2
   1c9be:	2301      	moveq	r3, #1
   1c9c0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c9c2:	68a3      	ldr	r3, [r4, #8]
   1c9c4:	781b      	ldrb	r3, [r3, #0]
   1c9c6:	2b01      	cmp	r3, #1
   1c9c8:	d003      	beq.n	1c9d2 <find_info_cb+0x38>
   1c9ca:	2b02      	cmp	r3, #2
   1c9cc:	d019      	beq.n	1ca02 <find_info_cb+0x68>
   1c9ce:	2000      	movs	r0, #0
   1c9d0:	e016      	b.n	1ca00 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c9d2:	682b      	ldr	r3, [r5, #0]
   1c9d4:	781b      	ldrb	r3, [r3, #0]
   1c9d6:	2b00      	cmp	r3, #0
   1c9d8:	d1f9      	bne.n	1c9ce <find_info_cb+0x34>
   1c9da:	6860      	ldr	r0, [r4, #4]
   1c9dc:	2104      	movs	r1, #4
   1c9de:	3008      	adds	r0, #8
   1c9e0:	f7f6 fbce 	bl	13180 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c9e4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c9e6:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c9e8:	682a      	ldr	r2, [r5, #0]
   1c9ea:	68e3      	ldr	r3, [r4, #12]
   1c9ec:	8852      	ldrh	r2, [r2, #2]
   1c9ee:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c9f0:	6863      	ldr	r3, [r4, #4]
   1c9f2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1c9f4:	899b      	ldrh	r3, [r3, #12]
   1c9f6:	1ac0      	subs	r0, r0, r3
   1c9f8:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1c9fa:	bf94      	ite	ls
   1c9fc:	2000      	movls	r0, #0
   1c9fe:	2001      	movhi	r0, #1
}
   1ca00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1ca02:	682b      	ldr	r3, [r5, #0]
   1ca04:	781b      	ldrb	r3, [r3, #0]
   1ca06:	2b02      	cmp	r3, #2
   1ca08:	d1e1      	bne.n	1c9ce <find_info_cb+0x34>
   1ca0a:	6860      	ldr	r0, [r4, #4]
   1ca0c:	2112      	movs	r1, #18
   1ca0e:	3008      	adds	r0, #8
   1ca10:	f7f6 fbb6 	bl	13180 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ca14:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1ca16:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ca18:	6829      	ldr	r1, [r5, #0]
   1ca1a:	68e0      	ldr	r0, [r4, #12]
   1ca1c:	2210      	movs	r2, #16
   1ca1e:	3101      	adds	r1, #1
   1ca20:	3002      	adds	r0, #2
   1ca22:	f7ff fc12 	bl	1c24a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1ca26:	6863      	ldr	r3, [r4, #4]
   1ca28:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1ca2a:	899b      	ldrh	r3, [r3, #12]
   1ca2c:	1ac0      	subs	r0, r0, r3
   1ca2e:	2812      	cmp	r0, #18
   1ca30:	e7e3      	b.n	1c9fa <find_info_cb+0x60>

0001ca32 <att_chan_mtu_updated>:
{
   1ca32:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1ca34:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1ca36:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ca38:	b352      	cbz	r2, 1ca90 <att_chan_mtu_updated+0x5e>
	return node->next;
   1ca3a:	6813      	ldr	r3, [r2, #0]
   1ca3c:	b103      	cbz	r3, 1ca40 <att_chan_mtu_updated+0xe>
   1ca3e:	3bf0      	subs	r3, #240	; 0xf0
   1ca40:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   1ca44:	2200      	movs	r2, #0
   1ca46:	4611      	mov	r1, r2
   1ca48:	e000      	b.n	1ca4c <att_chan_mtu_updated+0x1a>
   1ca4a:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   1ca4c:	4284      	cmp	r4, r0
   1ca4e:	d007      	beq.n	1ca60 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ca50:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ca52:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ca54:	42b1      	cmp	r1, r6
   1ca56:	bf38      	it	cc
   1ca58:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ca5a:	42a2      	cmp	r2, r4
   1ca5c:	bf38      	it	cc
   1ca5e:	4622      	movcc	r2, r4
   1ca60:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ca62:	b12b      	cbz	r3, 1ca70 <att_chan_mtu_updated+0x3e>
   1ca64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1ca68:	2b00      	cmp	r3, #0
   1ca6a:	d1ee      	bne.n	1ca4a <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1ca6c:	4284      	cmp	r4, r0
   1ca6e:	d1ef      	bne.n	1ca50 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1ca70:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1ca72:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1ca74:	428b      	cmp	r3, r1
   1ca76:	d801      	bhi.n	1ca7c <att_chan_mtu_updated+0x4a>
   1ca78:	4290      	cmp	r0, r2
   1ca7a:	d90b      	bls.n	1ca94 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1ca7c:	4282      	cmp	r2, r0
   1ca7e:	bf38      	it	cc
   1ca80:	4602      	movcc	r2, r0
   1ca82:	4299      	cmp	r1, r3
   1ca84:	6828      	ldr	r0, [r5, #0]
   1ca86:	bf38      	it	cc
   1ca88:	4619      	movcc	r1, r3
}
   1ca8a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1ca8c:	f7f5 bf5e 	b.w	1294c <bt_gatt_att_max_mtu_changed>
   1ca90:	4611      	mov	r1, r2
   1ca92:	e7ed      	b.n	1ca70 <att_chan_mtu_updated+0x3e>
}
   1ca94:	bc70      	pop	{r4, r5, r6}
   1ca96:	4770      	bx	lr

0001ca98 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ca98:	68d0      	ldr	r0, [r2, #12]
   1ca9a:	3104      	adds	r1, #4
   1ca9c:	7803      	ldrb	r3, [r0, #0]
   1ca9e:	b913      	cbnz	r3, 1caa6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1caa0:	7001      	strb	r1, [r0, #0]
	return true;
   1caa2:	2001      	movs	r0, #1
   1caa4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1caa6:	428b      	cmp	r3, r1
   1caa8:	d0fb      	beq.n	1caa2 <attr_read_group_cb+0xa>
		data->group = NULL;
   1caaa:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1caac:	6891      	ldr	r1, [r2, #8]
   1caae:	898b      	ldrh	r3, [r1, #12]
   1cab0:	3b04      	subs	r3, #4
   1cab2:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1cab4:	6110      	str	r0, [r2, #16]
}
   1cab6:	4770      	bx	lr

0001cab8 <z_log_msg_static_create.constprop.0>:
   1cab8:	2300      	movs	r3, #0
   1caba:	f7ee b91f 	b.w	acfc <z_impl_z_log_msg_static_create>

0001cabe <chan_req_send>:
{
   1cabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cac0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1cac2:	6888      	ldr	r0, [r1, #8]
   1cac4:	f7ff ff0d 	bl	1c8e2 <net_buf_frags_len>
   1cac8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1caca:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1cacc:	4283      	cmp	r3, r0
   1cace:	d30d      	bcc.n	1caec <chan_req_send+0x2e>
	req->buf = NULL;
   1cad0:	2600      	movs	r6, #0
	chan->req = req;
   1cad2:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   1cad6:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   1cad8:	4628      	mov	r0, r5
	req->buf = NULL;
   1cada:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1cadc:	4639      	mov	r1, r7
   1cade:	f7f3 ffcd 	bl	10a7c <chan_send>
	if (err) {
   1cae2:	b110      	cbz	r0, 1caea <chan_req_send+0x2c>
		req->buf = buf;
   1cae4:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1cae6:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   1caea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1caec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1caf0:	e7fb      	b.n	1caea <chan_req_send+0x2c>

0001caf2 <process_queue>:
{
   1caf2:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1caf4:	2200      	movs	r2, #0
{
   1caf6:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1caf8:	2300      	movs	r3, #0
   1cafa:	4608      	mov	r0, r1
{
   1cafc:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1cafe:	f7f6 f8ab 	bl	12c58 <net_buf_get>
	if (buf) {
   1cb02:	4605      	mov	r5, r0
   1cb04:	b158      	cbz	r0, 1cb1e <process_queue+0x2c>
	return chan_send(chan, buf);
   1cb06:	4601      	mov	r1, r0
   1cb08:	4620      	mov	r0, r4
   1cb0a:	f7f3 ffb7 	bl	10a7c <chan_send>
		if (err) {
   1cb0e:	4604      	mov	r4, r0
   1cb10:	b118      	cbz	r0, 1cb1a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1cb12:	4629      	mov	r1, r5
   1cb14:	4630      	mov	r0, r6
   1cb16:	f001 fd5a 	bl	1e5ce <k_queue_prepend>
}
   1cb1a:	4620      	mov	r0, r4
   1cb1c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1cb1e:	f06f 0401 	mvn.w	r4, #1
   1cb22:	e7fa      	b.n	1cb1a <process_queue+0x28>

0001cb24 <bt_att_chan_send_rsp>:
{
   1cb24:	b538      	push	{r3, r4, r5, lr}
   1cb26:	4604      	mov	r4, r0
   1cb28:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1cb2a:	f7f3 ffa7 	bl	10a7c <chan_send>
	if (err) {
   1cb2e:	b130      	cbz	r0, 1cb3e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1cb30:	4629      	mov	r1, r5
   1cb32:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   1cb36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1cb3a:	f7f6 b9cf 	b.w	12edc <net_buf_put>
}
   1cb3e:	bd38      	pop	{r3, r4, r5, pc}

0001cb40 <att_chan_read>:
{
   1cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb44:	4680      	mov	r8, r0
   1cb46:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb48:	4610      	mov	r0, r2
{
   1cb4a:	4699      	mov	r9, r3
   1cb4c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb4e:	f7ff fec8 	bl	1c8e2 <net_buf_frags_len>
   1cb52:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   1cb56:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb58:	4283      	cmp	r3, r0
   1cb5a:	d97a      	bls.n	1cc52 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1cb60:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb62:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1cb64:	f7f6 fa46 	bl	12ff4 <net_buf_frag_last>
	size_t len, total = 0;
   1cb68:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1cb6c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cb6e:	4630      	mov	r0, r6
   1cb70:	f7ff feb7 	bl	1c8e2 <net_buf_frags_len>
   1cb74:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1cb78:	f105 0708 	add.w	r7, r5, #8
   1cb7c:	1a24      	subs	r4, r4, r0
   1cb7e:	4638      	mov	r0, r7
   1cb80:	f000 fd1d 	bl	1d5be <net_buf_simple_tailroom>
   1cb84:	4284      	cmp	r4, r0
   1cb86:	d211      	bcs.n	1cbac <att_chan_read+0x6c>
   1cb88:	4630      	mov	r0, r6
   1cb8a:	f7ff feaa 	bl	1c8e2 <net_buf_frags_len>
   1cb8e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1cb92:	1a24      	subs	r4, r4, r0
		if (!len) {
   1cb94:	bb34      	cbnz	r4, 1cbe4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1cb96:	79b0      	ldrb	r0, [r6, #6]
   1cb98:	f7f5 ff36 	bl	12a08 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1cb9c:	2200      	movs	r2, #0
   1cb9e:	2300      	movs	r3, #0
   1cba0:	f000 fcf5 	bl	1d58e <net_buf_alloc_fixed>
			if (!frag) {
   1cba4:	4605      	mov	r5, r0
   1cba6:	b930      	cbnz	r0, 1cbb6 <att_chan_read+0x76>
	return total;
   1cba8:	4657      	mov	r7, sl
   1cbaa:	e02c      	b.n	1cc06 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1cbac:	4638      	mov	r0, r7
   1cbae:	f000 fd06 	bl	1d5be <net_buf_simple_tailroom>
   1cbb2:	4604      	mov	r4, r0
   1cbb4:	e7ee      	b.n	1cb94 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1cbb6:	4601      	mov	r1, r0
   1cbb8:	4630      	mov	r0, r6
   1cbba:	f7f6 fa61 	bl	13080 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cbbe:	4630      	mov	r0, r6
   1cbc0:	f7ff fe8f 	bl	1c8e2 <net_buf_frags_len>
   1cbc4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1cbc8:	f105 0708 	add.w	r7, r5, #8
   1cbcc:	1a24      	subs	r4, r4, r0
   1cbce:	4638      	mov	r0, r7
   1cbd0:	f000 fcf5 	bl	1d5be <net_buf_simple_tailroom>
   1cbd4:	4284      	cmp	r4, r0
   1cbd6:	d21a      	bcs.n	1cc0e <att_chan_read+0xce>
   1cbd8:	4630      	mov	r0, r6
   1cbda:	f7ff fe82 	bl	1c8e2 <net_buf_frags_len>
   1cbde:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1cbe2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1cbe4:	68a9      	ldr	r1, [r5, #8]
   1cbe6:	89aa      	ldrh	r2, [r5, #12]
   1cbe8:	f8cd 9000 	str.w	r9, [sp]
   1cbec:	f8db 7004 	ldr.w	r7, [fp, #4]
   1cbf0:	440a      	add	r2, r1
   1cbf2:	9803      	ldr	r0, [sp, #12]
   1cbf4:	4659      	mov	r1, fp
   1cbf6:	b2a3      	uxth	r3, r4
   1cbf8:	47b8      	blx	r7
		if (read < 0) {
   1cbfa:	1e07      	subs	r7, r0, #0
   1cbfc:	da0c      	bge.n	1cc18 <att_chan_read+0xd8>
				return total;
   1cbfe:	f1ba 0f00 	cmp.w	sl, #0
   1cc02:	bf18      	it	ne
   1cc04:	4657      	movne	r7, sl
}
   1cc06:	4638      	mov	r0, r7
   1cc08:	b005      	add	sp, #20
   1cc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc0e:	4638      	mov	r0, r7
   1cc10:	f000 fcd5 	bl	1d5be <net_buf_simple_tailroom>
   1cc14:	4604      	mov	r4, r0
   1cc16:	e7e5      	b.n	1cbe4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1cc18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc1a:	b993      	cbnz	r3, 1cc42 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1cc1c:	4639      	mov	r1, r7
   1cc1e:	f105 0008 	add.w	r0, r5, #8
   1cc22:	f7f6 faad 	bl	13180 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cc26:	4630      	mov	r0, r6
   1cc28:	f7ff fe5b 	bl	1c8e2 <net_buf_frags_len>
   1cc2c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1cc30:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cc32:	4283      	cmp	r3, r0
		total += read;
   1cc34:	44ba      	add	sl, r7
		offset += read;
   1cc36:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cc3a:	d9b5      	bls.n	1cba8 <att_chan_read+0x68>
   1cc3c:	42a7      	cmp	r7, r4
   1cc3e:	d096      	beq.n	1cb6e <att_chan_read+0x2e>
   1cc40:	e7b2      	b.n	1cba8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1cc42:	4639      	mov	r1, r7
   1cc44:	4628      	mov	r0, r5
   1cc46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cc48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc4a:	4798      	blx	r3
   1cc4c:	2800      	cmp	r0, #0
   1cc4e:	d1e5      	bne.n	1cc1c <att_chan_read+0xdc>
   1cc50:	e7aa      	b.n	1cba8 <att_chan_read+0x68>
		return 0;
   1cc52:	2700      	movs	r7, #0
   1cc54:	e7d7      	b.n	1cc06 <att_chan_read+0xc6>

0001cc56 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc56:	2200      	movs	r2, #0
	return list->head;
   1cc58:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc5a:	b903      	cbnz	r3, 1cc5e <sys_slist_find_and_remove.isra.0+0x8>
   1cc5c:	4770      	bx	lr
   1cc5e:	428b      	cmp	r3, r1
   1cc60:	d10f      	bne.n	1cc82 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1cc62:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc64:	b93a      	cbnz	r2, 1cc76 <sys_slist_find_and_remove.isra.0+0x20>
   1cc66:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1cc68:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc6a:	4291      	cmp	r1, r2
   1cc6c:	d100      	bne.n	1cc70 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1cc6e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1cc70:	2300      	movs	r3, #0
   1cc72:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc74:	4770      	bx	lr
	parent->next = child;
   1cc76:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc78:	6843      	ldr	r3, [r0, #4]
   1cc7a:	4299      	cmp	r1, r3
	list->tail = node;
   1cc7c:	bf08      	it	eq
   1cc7e:	6042      	streq	r2, [r0, #4]
}
   1cc80:	e7f6      	b.n	1cc70 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1cc82:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc84:	681b      	ldr	r3, [r3, #0]
   1cc86:	e7e8      	b.n	1cc5a <sys_slist_find_and_remove.isra.0+0x4>

0001cc88 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1cc88:	2006      	movs	r0, #6
   1cc8a:	4770      	bx	lr

0001cc8c <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cc8c:	2301      	movs	r3, #1
{
   1cc8e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cc90:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cc94:	e8d0 3fef 	ldaex	r3, [r0]
   1cc98:	ea43 0201 	orr.w	r2, r3, r1
   1cc9c:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1cca0:	2c00      	cmp	r4, #0
   1cca2:	d1f7      	bne.n	1cc94 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   1cca4:	4219      	tst	r1, r3
}
   1cca6:	bf14      	ite	ne
   1cca8:	2001      	movne	r0, #1
   1ccaa:	2000      	moveq	r0, #0
   1ccac:	bd10      	pop	{r4, pc}

0001ccae <read_cb>:
{
   1ccae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   1ccb0:	2300      	movs	r3, #0
{
   1ccb2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   1ccb4:	6816      	ldr	r6, [r2, #0]
{
   1ccb6:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1ccb8:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ccba:	4629      	mov	r1, r5
	data->err = 0x00;
   1ccbc:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ccbe:	2295      	movs	r2, #149	; 0x95
   1ccc0:	f000 fbd4 	bl	1d46c <bt_gatt_check_perm>
   1ccc4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1ccc6:	b980      	cbnz	r0, 1ccea <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ccc8:	e9cd 0000 	strd	r0, r0, [sp]
   1cccc:	4629      	mov	r1, r5
   1ccce:	4630      	mov	r0, r6
   1ccd0:	88a3      	ldrh	r3, [r4, #4]
   1ccd2:	68a2      	ldr	r2, [r4, #8]
   1ccd4:	f7ff ff34 	bl	1cb40 <att_chan_read>
	if (ret < 0) {
   1ccd8:	2800      	cmp	r0, #0
   1ccda:	da09      	bge.n	1ccf0 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1ccdc:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1cce0:	bf32      	itee	cc
   1cce2:	200e      	movcc	r0, #14
		return -err;
   1cce4:	4240      	negcs	r0, r0
   1cce6:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   1cce8:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1ccea:	2000      	movs	r0, #0
}
   1ccec:	b002      	add	sp, #8
   1ccee:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1ccf0:	2001      	movs	r0, #1
   1ccf2:	e7fb      	b.n	1ccec <read_cb+0x3e>

0001ccf4 <read_vl_cb>:
{
   1ccf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   1ccf8:	2300      	movs	r3, #0
{
   1ccfa:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   1ccfc:	f8d2 8000 	ldr.w	r8, [r2]
{
   1cd00:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1cd02:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1cd06:	4631      	mov	r1, r6
	data->err = 0x00;
   1cd08:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1cd0a:	2295      	movs	r2, #149	; 0x95
   1cd0c:	f000 fbae 	bl	1d46c <bt_gatt_check_perm>
   1cd10:	4605      	mov	r5, r0
   1cd12:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1cd14:	b9e0      	cbnz	r0, 1cd50 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1cd16:	68a0      	ldr	r0, [r4, #8]
   1cd18:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1cd1c:	8982      	ldrh	r2, [r0, #12]
   1cd1e:	1a9b      	subs	r3, r3, r2
   1cd20:	2b01      	cmp	r3, #1
   1cd22:	dd15      	ble.n	1cd50 <read_vl_cb+0x5c>
   1cd24:	2102      	movs	r1, #2
   1cd26:	3008      	adds	r0, #8
   1cd28:	f7f6 fa2a 	bl	13180 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1cd2c:	e9cd 5500 	strd	r5, r5, [sp]
   1cd30:	4607      	mov	r7, r0
   1cd32:	88a3      	ldrh	r3, [r4, #4]
   1cd34:	4631      	mov	r1, r6
   1cd36:	4640      	mov	r0, r8
   1cd38:	68a2      	ldr	r2, [r4, #8]
   1cd3a:	f7ff ff01 	bl	1cb40 <att_chan_read>
	if (read < 0) {
   1cd3e:	1e03      	subs	r3, r0, #0
   1cd40:	da0a      	bge.n	1cd58 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1cd42:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1cd46:	bf32      	itee	cc
   1cd48:	230e      	movcc	r3, #14
		return -err;
   1cd4a:	425b      	negcs	r3, r3
   1cd4c:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   1cd4e:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1cd50:	2000      	movs	r0, #0
}
   1cd52:	b002      	add	sp, #8
   1cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1cd58:	2001      	movs	r0, #1
	rsp->len = read;
   1cd5a:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1cd5c:	e7f9      	b.n	1cd52 <read_vl_cb+0x5e>

0001cd5e <bt_att_sent>:
{
   1cd5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd60:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   1cd62:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1cd66:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cd68:	f100 0394 	add.w	r3, r0, #148	; 0x94
   1cd6c:	e8d3 1fef 	ldaex	r1, [r3]
   1cd70:	f021 0110 	bic.w	r1, r1, #16
   1cd74:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cd78:	2a00      	cmp	r2, #0
   1cd7a:	d1f7      	bne.n	1cd6c <bt_att_sent+0xe>
	if (!att) {
   1cd7c:	b30c      	cbz	r4, 1cdc2 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1cd7e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1cd82:	b98b      	cbnz	r3, 1cda8 <bt_att_sent+0x4a>
   1cd84:	6863      	ldr	r3, [r4, #4]
   1cd86:	b17b      	cbz	r3, 1cda8 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cd88:	1d20      	adds	r0, r4, #4
   1cd8a:	f7ff fda0 	bl	1c8ce <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cd8e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cd90:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cd92:	4638      	mov	r0, r7
   1cd94:	f7ff fe93 	bl	1cabe <chan_req_send>
   1cd98:	2800      	cmp	r0, #0
   1cd9a:	da12      	bge.n	1cdc2 <bt_att_sent+0x64>
	return list->head;
   1cd9c:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1cd9e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cda0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1cda2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cda4:	b903      	cbnz	r3, 1cda8 <bt_att_sent+0x4a>
	list->tail = node;
   1cda6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1cda8:	4638      	mov	r0, r7
   1cdaa:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   1cdae:	f7ff fea0 	bl	1caf2 <process_queue>
	if (!err) {
   1cdb2:	b130      	cbz	r0, 1cdc2 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   1cdb4:	4638      	mov	r0, r7
   1cdb6:	f104 010c 	add.w	r1, r4, #12
}
   1cdba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1cdbe:	f7ff be98 	b.w	1caf2 <process_queue>
}
   1cdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cdc4 <att_req_send_process>:
{
   1cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1cdc8:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1cdca:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cdcc:	2c00      	cmp	r4, #0
   1cdce:	d03b      	beq.n	1ce48 <att_req_send_process+0x84>
	return node->next;
   1cdd0:	f854 69f0 	ldr.w	r6, [r4], #-240
   1cdd4:	b106      	cbz	r6, 1cdd8 <att_req_send_process+0x14>
   1cdd6:	3ef0      	subs	r6, #240	; 0xf0
{
   1cdd8:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1cdda:	f108 0704 	add.w	r7, r8, #4
{
   1cdde:	461d      	mov	r5, r3
   1cde0:	e013      	b.n	1ce0a <att_req_send_process+0x46>
		if (!req && prev &&
   1cde2:	b1c3      	cbz	r3, 1ce16 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1cde4:	2103      	movs	r1, #3
   1cde6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1cdea:	f7ff fd94 	bl	1c916 <atomic_test_bit>
   1cdee:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1cdf0:	f103 0098 	add.w	r0, r3, #152	; 0x98
   1cdf4:	f7ff fd8f 	bl	1c916 <atomic_test_bit>
		if (!req && prev &&
   1cdf8:	4282      	cmp	r2, r0
   1cdfa:	d10c      	bne.n	1ce16 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cdfc:	b326      	cbz	r6, 1ce48 <att_req_send_process+0x84>
   1cdfe:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   1ce02:	b102      	cbz	r2, 1ce06 <att_req_send_process+0x42>
   1ce04:	3af0      	subs	r2, #240	; 0xf0
{
   1ce06:	4634      	mov	r4, r6
   1ce08:	4616      	mov	r6, r2
		if (chan->req) {
   1ce0a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   1ce0e:	2a00      	cmp	r2, #0
   1ce10:	d1f4      	bne.n	1cdfc <att_req_send_process+0x38>
		if (!req && prev &&
   1ce12:	2d00      	cmp	r5, #0
   1ce14:	d0e5      	beq.n	1cde2 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1ce16:	4638      	mov	r0, r7
   1ce18:	f7ff fd59 	bl	1c8ce <sys_slist_get>
	if (node) {
   1ce1c:	4605      	mov	r5, r0
   1ce1e:	b908      	cbnz	r0, 1ce24 <att_req_send_process+0x60>
   1ce20:	4623      	mov	r3, r4
   1ce22:	e7eb      	b.n	1cdfc <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1ce24:	4601      	mov	r1, r0
   1ce26:	4620      	mov	r0, r4
   1ce28:	f7f3 fe9c 	bl	10b64 <bt_att_chan_req_send>
   1ce2c:	2800      	cmp	r0, #0
   1ce2e:	da0b      	bge.n	1ce48 <att_req_send_process+0x84>
	return list->head;
   1ce30:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1ce34:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ce36:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1ce3a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ce3e:	2b00      	cmp	r3, #0
   1ce40:	d1ee      	bne.n	1ce20 <att_req_send_process+0x5c>
	list->tail = node;
   1ce42:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1ce46:	e7eb      	b.n	1ce20 <att_req_send_process+0x5c>
}
   1ce48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce4c <bt_att_status>:
{
   1ce4c:	b538      	push	{r3, r4, r5, lr}
   1ce4e:	4605      	mov	r5, r0
   1ce50:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1ce52:	2100      	movs	r1, #0
   1ce54:	f7ff fd5f 	bl	1c916 <atomic_test_bit>
   1ce58:	b1c0      	cbz	r0, 1ce8c <bt_att_status+0x40>
	if (!chan->att) {
   1ce5a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1ce5e:	b1a8      	cbz	r0, 1ce8c <bt_att_status+0x40>
	if (chan->req) {
   1ce60:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1ce64:	b993      	cbnz	r3, 1ce8c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1ce66:	3004      	adds	r0, #4
   1ce68:	f7ff fd31 	bl	1c8ce <sys_slist_get>
	if (!node) {
   1ce6c:	4604      	mov	r4, r0
   1ce6e:	b168      	cbz	r0, 1ce8c <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ce70:	4601      	mov	r1, r0
   1ce72:	1f28      	subs	r0, r5, #4
   1ce74:	f7f3 fe76 	bl	10b64 <bt_att_chan_req_send>
   1ce78:	2800      	cmp	r0, #0
   1ce7a:	da07      	bge.n	1ce8c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1ce7c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1ce80:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ce82:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ce84:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ce86:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ce88:	b902      	cbnz	r2, 1ce8c <bt_att_status+0x40>
	list->tail = node;
   1ce8a:	609c      	str	r4, [r3, #8]
}
   1ce8c:	bd38      	pop	{r3, r4, r5, pc}

0001ce8e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1ce8e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1ce90:	6883      	ldr	r3, [r0, #8]
   1ce92:	699b      	ldr	r3, [r3, #24]
   1ce94:	b10b      	cbz	r3, 1ce9a <att_sent+0xc>
		chan->ops->sent(chan);
   1ce96:	3004      	adds	r0, #4
   1ce98:	4718      	bx	r3
}
   1ce9a:	4770      	bx	lr

0001ce9c <att_tx_complete>:
{
   1ce9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cea0:	4606      	mov	r6, r0
   1cea2:	460d      	mov	r5, r1
	if (!err) {
   1cea4:	4614      	mov	r4, r2
   1cea6:	b122      	cbz	r2, 1ceb2 <att_tx_complete+0x16>
}
   1cea8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1ceac:	4608      	mov	r0, r1
   1ceae:	f7f3 bd05 	b.w	108bc <tx_meta_data_free>
		att_sent(conn, user_data);
   1ceb2:	f7ff ffec 	bl	1ce8e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1ceb6:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1ceb8:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1ceba:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1cebe:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1cec2:	f7f3 fcfb 	bl	108bc <tx_meta_data_free>
	if (!err && func) {
   1cec6:	b92f      	cbnz	r7, 1ced4 <att_tx_complete+0x38>
}
   1cec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1cecc:	4649      	mov	r1, r9
   1cece:	4630      	mov	r0, r6
   1ced0:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1ced2:	3401      	adds	r4, #1
   1ced4:	b2a3      	uxth	r3, r4
   1ced6:	4543      	cmp	r3, r8
   1ced8:	d3f8      	bcc.n	1cecc <att_tx_complete+0x30>
   1ceda:	e7f5      	b.n	1cec8 <att_tx_complete+0x2c>

0001cedc <att_req_sent>:
{
   1cedc:	b510      	push	{r4, lr}
   1cede:	460c      	mov	r4, r1
	if (!err) {
   1cee0:	b90a      	cbnz	r2, 1cee6 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1cee2:	f7ff ffd4 	bl	1ce8e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1cee6:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1cee8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1ceec:	b12b      	cbz	r3, 1cefa <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ceee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1cef2:	2300      	movs	r3, #0
   1cef4:	30c0      	adds	r0, #192	; 0xc0
   1cef6:	f7fb fc8d 	bl	18814 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1cefa:	4620      	mov	r0, r4
}
   1cefc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1cf00:	f7f3 bcdc 	b.w	108bc <tx_meta_data_free>

0001cf04 <att_cfm_sent>:
{
   1cf04:	b510      	push	{r4, lr}
   1cf06:	460c      	mov	r4, r1
	if (!err) {
   1cf08:	b90a      	cbnz	r2, 1cf0e <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1cf0a:	f7ff ffc0 	bl	1ce8e <att_sent>
   1cf0e:	6823      	ldr	r3, [r4, #0]
   1cf10:	3398      	adds	r3, #152	; 0x98
   1cf12:	e8d3 1fef 	ldaex	r1, [r3]
   1cf16:	f021 0102 	bic.w	r1, r1, #2
   1cf1a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cf1e:	2a00      	cmp	r2, #0
   1cf20:	d1f7      	bne.n	1cf12 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   1cf22:	4620      	mov	r0, r4
}
   1cf24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1cf28:	f7f3 bcc8 	b.w	108bc <tx_meta_data_free>

0001cf2c <att_rsp_sent>:
{
   1cf2c:	b510      	push	{r4, lr}
   1cf2e:	460c      	mov	r4, r1
	if (!err) {
   1cf30:	b90a      	cbnz	r2, 1cf36 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1cf32:	f7ff ffac 	bl	1ce8e <att_sent>
   1cf36:	6823      	ldr	r3, [r4, #0]
   1cf38:	3398      	adds	r3, #152	; 0x98
   1cf3a:	e8d3 1fef 	ldaex	r1, [r3]
   1cf3e:	f021 0101 	bic.w	r1, r1, #1
   1cf42:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cf46:	2a00      	cmp	r2, #0
   1cf48:	d1f7      	bne.n	1cf3a <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   1cf4a:	4620      	mov	r0, r4
}
   1cf4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1cf50:	f7f3 bcb4 	b.w	108bc <tx_meta_data_free>

0001cf54 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1cf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf58:	4688      	mov	r8, r1
   1cf5a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1cf5c:	2101      	movs	r1, #1
   1cf5e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1cf60:	4605      	mov	r5, r0
   1cf62:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1cf64:	f7f3 ffd0 	bl	10f08 <bt_att_chan_create_pdu>
	if (!buf) {
   1cf68:	4604      	mov	r4, r0
   1cf6a:	b170      	cbz	r0, 1cf8a <send_err_rsp.part.0+0x36>
   1cf6c:	2104      	movs	r1, #4
   1cf6e:	3008      	adds	r0, #8
   1cf70:	f7f6 f906 	bl	13180 <net_buf_simple_add>
	rsp->request = req;
   1cf74:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1cf78:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1cf7c:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1cf7e:	4621      	mov	r1, r4
   1cf80:	4628      	mov	r0, r5
}
   1cf82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1cf86:	f7ff bdcd 	b.w	1cb24 <bt_att_chan_send_rsp>
}
   1cf8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cf8e <att_write_req>:
{
   1cf8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cf90:	460c      	mov	r4, r1
   1cf92:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1cf94:	f101 0008 	add.w	r0, r1, #8
   1cf98:	f000 fb05 	bl	1d5a6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1cf9c:	89a2      	ldrh	r2, [r4, #12]
   1cf9e:	4603      	mov	r3, r0
   1cfa0:	9201      	str	r2, [sp, #4]
   1cfa2:	68a2      	ldr	r2, [r4, #8]
   1cfa4:	2112      	movs	r1, #18
   1cfa6:	9200      	str	r2, [sp, #0]
   1cfa8:	4628      	mov	r0, r5
   1cfaa:	2213      	movs	r2, #19
   1cfac:	f7f4 f8c6 	bl	1113c <att_write_rsp.constprop.0>
}
   1cfb0:	b003      	add	sp, #12
   1cfb2:	bd30      	pop	{r4, r5, pc}

0001cfb4 <att_write_cmd>:
{
   1cfb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cfb6:	460c      	mov	r4, r1
   1cfb8:	4605      	mov	r5, r0
   1cfba:	f101 0008 	add.w	r0, r1, #8
   1cfbe:	f000 faf2 	bl	1d5a6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1cfc2:	89a2      	ldrh	r2, [r4, #12]
   1cfc4:	4603      	mov	r3, r0
   1cfc6:	9201      	str	r2, [sp, #4]
   1cfc8:	68a2      	ldr	r2, [r4, #8]
   1cfca:	4628      	mov	r0, r5
   1cfcc:	9200      	str	r2, [sp, #0]
   1cfce:	2200      	movs	r2, #0
   1cfd0:	4611      	mov	r1, r2
   1cfd2:	f7f4 f8b3 	bl	1113c <att_write_rsp.constprop.0>
}
   1cfd6:	b003      	add	sp, #12
   1cfd8:	bd30      	pop	{r4, r5, pc}

0001cfda <att_read_blob_req>:
{
   1cfda:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1cfdc:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1cfde:	210c      	movs	r1, #12
   1cfe0:	8813      	ldrh	r3, [r2, #0]
   1cfe2:	8852      	ldrh	r2, [r2, #2]
   1cfe4:	9200      	str	r2, [sp, #0]
   1cfe6:	220d      	movs	r2, #13
   1cfe8:	f7f4 fa6c 	bl	114c4 <att_read_rsp>
}
   1cfec:	b003      	add	sp, #12
   1cfee:	f85d fb04 	ldr.w	pc, [sp], #4

0001cff2 <att_read_req>:
{
   1cff2:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cff4:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1cff6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cff8:	210a      	movs	r1, #10
   1cffa:	881b      	ldrh	r3, [r3, #0]
   1cffc:	9200      	str	r2, [sp, #0]
   1cffe:	220b      	movs	r2, #11
   1d000:	f7f4 fa60 	bl	114c4 <att_read_rsp>
}
   1d004:	b003      	add	sp, #12
   1d006:	f85d fb04 	ldr.w	pc, [sp], #4

0001d00a <att_mtu_req>:
{
   1d00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d00c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1d00e:	f850 2b98 	ldr.w	r2, [r0], #152
{
   1d012:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1d014:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1d016:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1d018:	f7ff fc7d 	bl	1c916 <atomic_test_bit>
   1d01c:	4604      	mov	r4, r0
   1d01e:	b9d8      	cbnz	r0, 1d058 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1d020:	689b      	ldr	r3, [r3, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1d022:	881b      	ldrh	r3, [r3, #0]
   1d024:	2b16      	cmp	r3, #22
   1d026:	d919      	bls.n	1d05c <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1d028:	4630      	mov	r0, r6
   1d02a:	2202      	movs	r2, #2
   1d02c:	f7f4 f8ea 	bl	11204 <bt_att_create_pdu>
	if (!pdu) {
   1d030:	4606      	mov	r6, r0
   1d032:	b1a8      	cbz	r0, 1d060 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   1d034:	2102      	movs	r1, #2
   1d036:	3008      	adds	r0, #8
   1d038:	f7f6 f8a2 	bl	13180 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1d03c:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu);
   1d03e:	4631      	mov	r1, r6
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1d040:	7007      	strb	r7, [r0, #0]
   1d042:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1d044:	4628      	mov	r0, r5
   1d046:	f7ff fd6d 	bl	1cb24 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1d04a:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1d04c:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1d04e:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1d050:	f7ff fcef 	bl	1ca32 <att_chan_mtu_updated>
	return 0;
   1d054:	4620      	mov	r0, r4
}
   1d056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1d058:	2006      	movs	r0, #6
   1d05a:	e7fc      	b.n	1d056 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   1d05c:	2004      	movs	r0, #4
   1d05e:	e7fa      	b.n	1d056 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1d060:	200e      	movs	r0, #14
   1d062:	e7f8      	b.n	1d056 <att_mtu_req+0x4c>

0001d064 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1d064:	898a      	ldrh	r2, [r1, #12]
   1d066:	2300      	movs	r3, #0
   1d068:	6889      	ldr	r1, [r1, #8]
   1d06a:	f7f4 bbd7 	b.w	1181c <att_handle_rsp>

0001d06e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1d06e:	2001      	movs	r0, #1
   1d070:	4770      	bx	lr

0001d072 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1d072:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1d074:	f7f3 fdb8 	bl	10be8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1d078:	b178      	cbz	r0, 1d09a <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   1d07a:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1d07c:	b16b      	cbz	r3, 1d09a <bt_att_clear_out_of_sync_sent+0x28>
   1d07e:	3bf0      	subs	r3, #240	; 0xf0
   1d080:	f103 0298 	add.w	r2, r3, #152	; 0x98
   1d084:	e8d2 0fef 	ldaex	r0, [r2]
   1d088:	f020 0020 	bic.w	r0, r0, #32
   1d08c:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1d090:	2900      	cmp	r1, #0
   1d092:	d1f7      	bne.n	1d084 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   1d094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1d098:	e7f0      	b.n	1d07c <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1d09a:	bd08      	pop	{r3, pc}

0001d09c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1d09c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1d09e:	2104      	movs	r1, #4
   1d0a0:	f7ff fc0b 	bl	1c8ba <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1d0a4:	b128      	cbz	r0, 1d0b2 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1d0a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1d0aa:	2105      	movs	r1, #5
   1d0ac:	3094      	adds	r0, #148	; 0x94
   1d0ae:	f7ff bc32 	b.w	1c916 <atomic_test_bit>
}
   1d0b2:	bd08      	pop	{r3, pc}

0001d0b4 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1d0b4:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   1d0b6:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1d0ba:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   1d0bc:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   1d0be:	8082      	strh	r2, [r0, #4]
}
   1d0c0:	4770      	bx	lr

0001d0c2 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1d0c2:	6010      	str	r0, [r2, #0]
}
   1d0c4:	2000      	movs	r0, #0
   1d0c6:	4770      	bx	lr

0001d0c8 <gatt_ccc_changed>:
{
   1d0c8:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1d0ca:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1d0cc:	895a      	ldrh	r2, [r3, #10]
   1d0ce:	428a      	cmp	r2, r1
   1d0d0:	d003      	beq.n	1d0da <gatt_ccc_changed+0x12>
		ccc->value = value;
   1d0d2:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1d0d4:	68db      	ldr	r3, [r3, #12]
   1d0d6:	b103      	cbz	r3, 1d0da <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1d0d8:	4718      	bx	r3
}
   1d0da:	4770      	bx	lr

0001d0dc <gatt_indicate_rsp>:
{
   1d0dc:	b510      	push	{r4, lr}
   1d0de:	9c02      	ldr	r4, [sp, #8]
   1d0e0:	460a      	mov	r2, r1
	if (params->func) {
   1d0e2:	68a3      	ldr	r3, [r4, #8]
   1d0e4:	b10b      	cbz	r3, 1d0ea <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1d0e6:	4621      	mov	r1, r4
   1d0e8:	4798      	blx	r3
	params->_ref--;
   1d0ea:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1d0ec:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1d0ee:	3b01      	subs	r3, #1
   1d0f0:	b2db      	uxtb	r3, r3
   1d0f2:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1d0f4:	b122      	cbz	r2, 1d100 <gatt_indicate_rsp+0x24>
   1d0f6:	b91b      	cbnz	r3, 1d100 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1d0f8:	4620      	mov	r0, r4
}
   1d0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1d0fe:	4710      	bx	r2
}
   1d100:	bd10      	pop	{r4, pc}

0001d102 <match_uuid>:
	data->attr = attr;
   1d102:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1d104:	8091      	strh	r1, [r2, #4]
}
   1d106:	2000      	movs	r0, #0
   1d108:	4770      	bx	lr

0001d10a <gen_hash_m>:
{
   1d10a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d10c:	6807      	ldr	r7, [r0, #0]
{
   1d10e:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d110:	783d      	ldrb	r5, [r7, #0]
{
   1d112:	4614      	mov	r4, r2
   1d114:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d116:	b9dd      	cbnz	r5, 1d150 <gen_hash_m+0x46>
	switch (u16->val) {
   1d118:	887b      	ldrh	r3, [r7, #2]
   1d11a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1d11e:	d004      	beq.n	1d12a <gen_hash_m+0x20>
   1d120:	d810      	bhi.n	1d144 <gen_hash_m+0x3a>
   1d122:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1d126:	2b03      	cmp	r3, #3
   1d128:	d812      	bhi.n	1d150 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1d12a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d12e:	2202      	movs	r2, #2
   1d130:	4620      	mov	r0, r4
   1d132:	f10d 010a 	add.w	r1, sp, #10
   1d136:	f7fe fd2a 	bl	1bb8e <tc_cmac_update>
   1d13a:	b968      	cbnz	r0, 1d158 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1d13c:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1d140:	65a2      	str	r2, [r4, #88]	; 0x58
   1d142:	e006      	b.n	1d152 <gen_hash_m+0x48>
	switch (u16->val) {
   1d144:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1d148:	33ff      	adds	r3, #255	; 0xff
   1d14a:	b29b      	uxth	r3, r3
   1d14c:	2b04      	cmp	r3, #4
   1d14e:	d91e      	bls.n	1d18e <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1d150:	2501      	movs	r5, #1
}
   1d152:	4628      	mov	r0, r5
   1d154:	b009      	add	sp, #36	; 0x24
   1d156:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1d158:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d15a:	2202      	movs	r2, #2
   1d15c:	4620      	mov	r0, r4
   1d15e:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   1d162:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d166:	f7fe fd12 	bl	1bb8e <tc_cmac_update>
   1d16a:	2800      	cmp	r0, #0
   1d16c:	d0e6      	beq.n	1d13c <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1d16e:	2000      	movs	r0, #0
   1d170:	9000      	str	r0, [sp, #0]
   1d172:	aa03      	add	r2, sp, #12
   1d174:	2313      	movs	r3, #19
   1d176:	4631      	mov	r1, r6
   1d178:	6877      	ldr	r7, [r6, #4]
   1d17a:	47b8      	blx	r7
		if (len < 0) {
   1d17c:	1e02      	subs	r2, r0, #0
   1d17e:	dbdf      	blt.n	1d140 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1d180:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d182:	4620      	mov	r0, r4
   1d184:	f7fe fd03 	bl	1bb8e <tc_cmac_update>
   1d188:	2800      	cmp	r0, #0
   1d18a:	d1e1      	bne.n	1d150 <gen_hash_m+0x46>
   1d18c:	e7d6      	b.n	1d13c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1d18e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d192:	2202      	movs	r2, #2
   1d194:	4620      	mov	r0, r4
   1d196:	f10d 010a 	add.w	r1, sp, #10
   1d19a:	f7fe fcf8 	bl	1bb8e <tc_cmac_update>
   1d19e:	2800      	cmp	r0, #0
   1d1a0:	d0cc      	beq.n	1d13c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1d1a2:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d1a4:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1d1a6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d1aa:	f10d 010a 	add.w	r1, sp, #10
   1d1ae:	e7e8      	b.n	1d182 <gen_hash_m+0x78>

0001d1b0 <bt_addr_le_eq>:
   1d1b0:	2207      	movs	r2, #7
{
   1d1b2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1d1b4:	f7ff f839 	bl	1c22a <memcmp>
}
   1d1b8:	fab0 f080 	clz	r0, r0
   1d1bc:	0940      	lsrs	r0, r0, #5
   1d1be:	bd08      	pop	{r3, pc}

0001d1c0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1d1c0:	2207      	movs	r2, #7
   1d1c2:	f7ff b842 	b.w	1c24a <memcpy>

0001d1c6 <z_log_msg_static_create.constprop.0>:
   1d1c6:	2300      	movs	r3, #0
   1d1c8:	f7ed bd98 	b.w	acfc <z_impl_z_log_msg_static_create>

0001d1cc <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d1cc:	2301      	movs	r3, #1
   1d1ce:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d1d0:	e8d0 2fef 	ldaex	r2, [r0]
   1d1d4:	431a      	orrs	r2, r3
   1d1d6:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1d1da:	2900      	cmp	r1, #0
   1d1dc:	d1f8      	bne.n	1d1d0 <atomic_set_bit+0x4>
}
   1d1de:	4770      	bx	lr

0001d1e0 <sc_restore_rsp>:
{
   1d1e0:	b538      	push	{r3, r4, r5, lr}
   1d1e2:	4604      	mov	r4, r0
   1d1e4:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1d1e6:	f7ff ff42 	bl	1d06e <bt_att_fixed_chan_only>
   1d1ea:	b150      	cbz	r0, 1d202 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1d1ec:	4620      	mov	r0, r4
   1d1ee:	f7f4 fc6d 	bl	11acc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d1f2:	b130      	cbz	r0, 1d202 <sc_restore_rsp+0x22>
   1d1f4:	7a03      	ldrb	r3, [r0, #8]
   1d1f6:	07db      	lsls	r3, r3, #31
   1d1f8:	d503      	bpl.n	1d202 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d1fa:	2100      	movs	r1, #0
   1d1fc:	300c      	adds	r0, #12
   1d1fe:	f7ff ffe5 	bl	1d1cc <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1d202:	b965      	cbnz	r5, 1d21e <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d204:	7a20      	ldrb	r0, [r4, #8]
   1d206:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1d20a:	f7f4 fc77 	bl	11afc <find_sc_cfg>
		if (sc_cfg) {
   1d20e:	b130      	cbz	r0, 1d21e <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1d210:	4629      	mov	r1, r5
}
   1d212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1d216:	2204      	movs	r2, #4
   1d218:	3008      	adds	r0, #8
   1d21a:	f7ff b821 	b.w	1c260 <memset>
}
   1d21e:	bd38      	pop	{r3, r4, r5, pc}

0001d220 <sc_clear>:
{
   1d220:	b570      	push	{r4, r5, r6, lr}
   1d222:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d224:	f100 0690 	add.w	r6, r0, #144	; 0x90
   1d228:	4631      	mov	r1, r6
   1d22a:	7a00      	ldrb	r0, [r0, #8]
   1d22c:	f7ff f949 	bl	1c4c2 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1d230:	4631      	mov	r1, r6
   1d232:	7a20      	ldrb	r0, [r4, #8]
   1d234:	f7f4 fc62 	bl	11afc <find_sc_cfg>
	if (!cfg) {
   1d238:	b128      	cbz	r0, 1d246 <sc_clear+0x26>
}
   1d23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1d23e:	220c      	movs	r2, #12
   1d240:	2100      	movs	r1, #0
   1d242:	f7ff b80d 	b.w	1c260 <memset>
}
   1d246:	bd70      	pop	{r4, r5, r6, pc}

0001d248 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1d248:	2a02      	cmp	r2, #2
{
   1d24a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1d24c:	d108      	bne.n	1d260 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1d24e:	2300      	movs	r3, #0
   1d250:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1d254:	461a      	mov	r2, r3
   1d256:	7a00      	ldrb	r0, [r0, #8]
   1d258:	f7f4 fcf0 	bl	11c3c <sc_save>
}
   1d25c:	2002      	movs	r0, #2
   1d25e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1d260:	f7ff ffde 	bl	1d220 <sc_clear>
   1d264:	e7fa      	b.n	1d25c <sc_ccc_cfg_write+0x14>

0001d266 <read_appearance>:
{
   1d266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d268:	4615      	mov	r5, r2
   1d26a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1d26e:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1d270:	f7ff f925 	bl	1c4be <bt_get_appearance>
	if (offset > value_len) {
   1d274:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1d276:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1d27a:	d80e      	bhi.n	1d29a <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1d27c:	f1c6 0402 	rsb	r4, r6, #2
   1d280:	42bc      	cmp	r4, r7
   1d282:	bfa8      	it	ge
   1d284:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d286:	f10d 0306 	add.w	r3, sp, #6
   1d28a:	4622      	mov	r2, r4
   1d28c:	4628      	mov	r0, r5
   1d28e:	1999      	adds	r1, r3, r6
   1d290:	f7fe ffdb 	bl	1c24a <memcpy>
}
   1d294:	4620      	mov	r0, r4
   1d296:	b003      	add	sp, #12
   1d298:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d29a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d29e:	e7f9      	b.n	1d294 <read_appearance+0x2e>

0001d2a0 <read_name>:
{
   1d2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2a4:	4698      	mov	r8, r3
   1d2a6:	4615      	mov	r5, r2
   1d2a8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1d2ac:	f7f1 fc36 	bl	eb1c <bt_get_name>
   1d2b0:	4607      	mov	r7, r0
				 strlen(name));
   1d2b2:	f7fe ff8b 	bl	1c1cc <strlen>
	if (offset > value_len) {
   1d2b6:	b283      	uxth	r3, r0
   1d2b8:	42b3      	cmp	r3, r6
   1d2ba:	d30c      	bcc.n	1d2d6 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1d2bc:	1b9c      	subs	r4, r3, r6
   1d2be:	4544      	cmp	r4, r8
   1d2c0:	bfa8      	it	ge
   1d2c2:	4644      	movge	r4, r8
   1d2c4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d2c6:	4622      	mov	r2, r4
   1d2c8:	4628      	mov	r0, r5
   1d2ca:	19b9      	adds	r1, r7, r6
   1d2cc:	f7fe ffbd 	bl	1c24a <memcpy>
}
   1d2d0:	4620      	mov	r0, r4
   1d2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d2d6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d2da:	e7f9      	b.n	1d2d0 <read_name+0x30>

0001d2dc <cf_read>:
{
   1d2dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d2de:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1d2e0:	2300      	movs	r3, #0
{
   1d2e2:	4615      	mov	r5, r2
   1d2e4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1d2e8:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1d2ec:	f7f4 fbee 	bl	11acc <find_cf_cfg>
	if (cfg) {
   1d2f0:	b128      	cbz	r0, 1d2fe <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1d2f2:	f100 0108 	add.w	r1, r0, #8
   1d2f6:	2201      	movs	r2, #1
   1d2f8:	a801      	add	r0, sp, #4
   1d2fa:	f7fe ffa6 	bl	1c24a <memcpy>
	if (offset > value_len) {
   1d2fe:	2e01      	cmp	r6, #1
   1d300:	d80d      	bhi.n	1d31e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1d302:	f1c6 0401 	rsb	r4, r6, #1
   1d306:	42bc      	cmp	r4, r7
   1d308:	bfa8      	it	ge
   1d30a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d30c:	ab01      	add	r3, sp, #4
   1d30e:	4622      	mov	r2, r4
   1d310:	4628      	mov	r0, r5
   1d312:	1999      	adds	r1, r3, r6
   1d314:	f7fe ff99 	bl	1c24a <memcpy>
}
   1d318:	4620      	mov	r0, r4
   1d31a:	b003      	add	sp, #12
   1d31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d31e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1d322:	e7f9      	b.n	1d318 <cf_read+0x3c>

0001d324 <bt_gatt_attr_read_service>:
{
   1d324:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1d326:	68c9      	ldr	r1, [r1, #12]
{
   1d328:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1d32a:	780a      	ldrb	r2, [r1, #0]
{
   1d32c:	461c      	mov	r4, r3
   1d32e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1d332:	b992      	cbnz	r2, 1d35a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d334:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   1d336:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d338:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d33c:	d818      	bhi.n	1d370 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1d33e:	f1c3 0202 	rsb	r2, r3, #2
   1d342:	4294      	cmp	r4, r2
   1d344:	bfa8      	it	ge
   1d346:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d348:	4622      	mov	r2, r4
   1d34a:	f10d 0106 	add.w	r1, sp, #6
   1d34e:	4419      	add	r1, r3
   1d350:	f7fe ff7b 	bl	1c24a <memcpy>
}
   1d354:	4620      	mov	r0, r4
   1d356:	b002      	add	sp, #8
   1d358:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   1d35a:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   1d35c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1d360:	d806      	bhi.n	1d370 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1d362:	f1c3 0210 	rsb	r2, r3, #16
   1d366:	4294      	cmp	r4, r2
   1d368:	bfa8      	it	ge
   1d36a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d36c:	4622      	mov	r2, r4
   1d36e:	e7ee      	b.n	1d34e <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d370:	f06f 0406 	mvn.w	r4, #6
   1d374:	e7ee      	b.n	1d354 <bt_gatt_attr_read_service+0x30>

0001d376 <bt_gatt_attr_read_ccc>:
{
   1d376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1d378:	68c9      	ldr	r1, [r1, #12]
{
   1d37a:	4615      	mov	r5, r2
   1d37c:	461f      	mov	r7, r3
   1d37e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1d382:	f7f4 fbcb 	bl	11b1c <find_ccc_cfg>
	if (cfg) {
   1d386:	b100      	cbz	r0, 1d38a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1d388:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1d38a:	2e02      	cmp	r6, #2
   1d38c:	f8ad 0006 	strh.w	r0, [sp, #6]
   1d390:	d80e      	bhi.n	1d3b0 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1d392:	f1c6 0402 	rsb	r4, r6, #2
   1d396:	42bc      	cmp	r4, r7
   1d398:	bfa8      	it	ge
   1d39a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d39c:	f10d 0306 	add.w	r3, sp, #6
   1d3a0:	4622      	mov	r2, r4
   1d3a2:	4628      	mov	r0, r5
   1d3a4:	1999      	adds	r1, r3, r6
   1d3a6:	f7fe ff50 	bl	1c24a <memcpy>
}
   1d3aa:	4620      	mov	r0, r4
   1d3ac:	b003      	add	sp, #12
   1d3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d3b0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1d3b4:	e7f9      	b.n	1d3aa <bt_gatt_attr_read_ccc+0x34>

0001d3b6 <bt_gatt_attr_value_handle>:
{
   1d3b6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d3b8:	4604      	mov	r4, r0
   1d3ba:	b910      	cbnz	r0, 1d3c2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d3bc:	2000      	movs	r0, #0
}
   1d3be:	b002      	add	sp, #8
   1d3c0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d3c2:	2300      	movs	r3, #0
   1d3c4:	f88d 3004 	strb.w	r3, [sp, #4]
   1d3c8:	f642 0303 	movw	r3, #10243	; 0x2803
   1d3cc:	6800      	ldr	r0, [r0, #0]
   1d3ce:	a901      	add	r1, sp, #4
   1d3d0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d3d4:	f7fe ff50 	bl	1c278 <bt_uuid_cmp>
   1d3d8:	2800      	cmp	r0, #0
   1d3da:	d1ef      	bne.n	1d3bc <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d3dc:	68e3      	ldr	r3, [r4, #12]
   1d3de:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d3e0:	2800      	cmp	r0, #0
   1d3e2:	d1ec      	bne.n	1d3be <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d3e4:	4620      	mov	r0, r4
   1d3e6:	f7f4 fdaf 	bl	11f48 <bt_gatt_attr_get_handle>
   1d3ea:	3001      	adds	r0, #1
   1d3ec:	b280      	uxth	r0, r0
	return handle;
   1d3ee:	e7e6      	b.n	1d3be <bt_gatt_attr_value_handle+0x8>

0001d3f0 <bt_gatt_attr_read_chrc>:
{
   1d3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d3f2:	68cc      	ldr	r4, [r1, #12]
{
   1d3f4:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   1d3f6:	79a3      	ldrb	r3, [r4, #6]
{
   1d3f8:	b087      	sub	sp, #28
   1d3fa:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1d3fc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d400:	4615      	mov	r5, r2
   1d402:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d406:	f7ff ffd6 	bl	1d3b6 <bt_gatt_attr_value_handle>
   1d40a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d40e:	6821      	ldr	r1, [r4, #0]
   1d410:	780b      	ldrb	r3, [r1, #0]
   1d412:	b99b      	cbnz	r3, 1d43c <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   1d414:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d416:	884b      	ldrh	r3, [r1, #2]
   1d418:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1d41c:	42b4      	cmp	r4, r6
   1d41e:	d315      	bcc.n	1d44c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d420:	1ba4      	subs	r4, r4, r6
   1d422:	42bc      	cmp	r4, r7
   1d424:	bfa8      	it	ge
   1d426:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d428:	ab01      	add	r3, sp, #4
   1d42a:	b2a4      	uxth	r4, r4
   1d42c:	4622      	mov	r2, r4
   1d42e:	4628      	mov	r0, r5
   1d430:	1999      	adds	r1, r3, r6
   1d432:	f7fe ff0a 	bl	1c24a <memcpy>
}
   1d436:	4620      	mov	r0, r4
   1d438:	b007      	add	sp, #28
   1d43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d43c:	2210      	movs	r2, #16
   1d43e:	3101      	adds	r1, #1
   1d440:	f10d 0007 	add.w	r0, sp, #7
   1d444:	f7fe ff01 	bl	1c24a <memcpy>
		value_len += 16U;
   1d448:	2413      	movs	r4, #19
   1d44a:	e7e7      	b.n	1d41c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d44c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d450:	e7f1      	b.n	1d436 <bt_gatt_attr_read_chrc+0x46>

0001d452 <bt_gatt_foreach_attr>:
{
   1d452:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d454:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d458:	2300      	movs	r3, #0
   1d45a:	461a      	mov	r2, r3
   1d45c:	9300      	str	r3, [sp, #0]
   1d45e:	f7f4 fdbb 	bl	11fd8 <bt_gatt_foreach_attr_type>
}
   1d462:	b005      	add	sp, #20
   1d464:	f85d fb04 	ldr.w	pc, [sp], #4

0001d468 <db_hash_process>:
	db_hash_gen(true);
   1d468:	f7f4 be26 	b.w	120b8 <db_hash_gen.constprop.0>

0001d46c <bt_gatt_check_perm>:
{
   1d46c:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1d46e:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d470:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d472:	d504      	bpl.n	1d47e <bt_gatt_check_perm+0x12>
   1d474:	f013 0f95 	tst.w	r3, #149	; 0x95
   1d478:	d01d      	beq.n	1d4b6 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d47a:	684c      	ldr	r4, [r1, #4]
   1d47c:	b1dc      	cbz	r4, 1d4b6 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d47e:	0794      	lsls	r4, r2, #30
   1d480:	d504      	bpl.n	1d48c <bt_gatt_check_perm+0x20>
   1d482:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1d486:	d018      	beq.n	1d4ba <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d488:	6889      	ldr	r1, [r1, #8]
   1d48a:	b1b1      	cbz	r1, 1d4ba <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   1d48c:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1d490:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1d494:	d001      	beq.n	1d49a <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   1d496:	2005      	movs	r0, #5
}
   1d498:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d49a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d49e:	d105      	bne.n	1d4ac <bt_gatt_check_perm+0x40>
	return 0;
   1d4a0:	f014 0f0c 	tst.w	r4, #12
   1d4a4:	bf14      	ite	ne
   1d4a6:	200f      	movne	r0, #15
   1d4a8:	2000      	moveq	r0, #0
   1d4aa:	e7f5      	b.n	1d498 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d4ac:	f7ff f952 	bl	1c754 <bt_conn_get_security>
   1d4b0:	2802      	cmp	r0, #2
   1d4b2:	d8f5      	bhi.n	1d4a0 <bt_gatt_check_perm+0x34>
   1d4b4:	e7ef      	b.n	1d496 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d4b6:	2002      	movs	r0, #2
   1d4b8:	e7ee      	b.n	1d498 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d4ba:	2003      	movs	r0, #3
   1d4bc:	e7ec      	b.n	1d498 <bt_gatt_check_perm+0x2c>

0001d4be <bt_gatt_change_aware>:
{
   1d4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4c0:	4606      	mov	r6, r0
   1d4c2:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1d4c4:	f7f4 fb02 	bl	11acc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d4c8:	b1e0      	cbz	r0, 1d504 <bt_gatt_change_aware+0x46>
   1d4ca:	7a03      	ldrb	r3, [r0, #8]
   1d4cc:	07db      	lsls	r3, r3, #31
   1d4ce:	d519      	bpl.n	1d504 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d4d0:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d4d4:	e8d4 5faf 	lda	r5, [r4]
   1d4d8:	f015 0501 	ands.w	r5, r5, #1
   1d4dc:	d112      	bne.n	1d504 <bt_gatt_change_aware+0x46>
	if (!req) {
   1d4de:	b197      	cbz	r7, 1d506 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d4e0:	e8d4 1fef 	ldaex	r1, [r4]
   1d4e4:	f021 0302 	bic.w	r3, r1, #2
   1d4e8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d4ec:	2a00      	cmp	r2, #0
   1d4ee:	d1f7      	bne.n	1d4e0 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d4f0:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1d4f4:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d4f6:	d008      	beq.n	1d50a <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   1d4f8:	f7ff fdbb 	bl	1d072 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d4fc:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d4fe:	4620      	mov	r0, r4
   1d500:	f7ff fe64 	bl	1d1cc <atomic_set_bit>
		return true;
   1d504:	2501      	movs	r5, #1
}
   1d506:	4628      	mov	r0, r5
   1d508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1d50a:	f7ff fdb0 	bl	1d06e <bt_att_fixed_chan_only>
   1d50e:	2800      	cmp	r0, #0
   1d510:	d0f9      	beq.n	1d506 <bt_gatt_change_aware+0x48>
   1d512:	4630      	mov	r0, r6
   1d514:	f7ff fdc2 	bl	1d09c <bt_att_out_of_sync_sent_on_fixed>
   1d518:	2800      	cmp	r0, #0
   1d51a:	d0f4      	beq.n	1d506 <bt_gatt_change_aware+0x48>
   1d51c:	e8d4 3fef 	ldaex	r3, [r4]
   1d520:	f023 0302 	bic.w	r3, r3, #2
   1d524:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d528:	2a00      	cmp	r2, #0
   1d52a:	d1f7      	bne.n	1d51c <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   1d52c:	4630      	mov	r0, r6
   1d52e:	f7ff fda0 	bl	1d072 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d532:	4639      	mov	r1, r7
   1d534:	e7e3      	b.n	1d4fe <bt_gatt_change_aware+0x40>

0001d536 <bt_smp_recv>:
{
   1d536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d538:	2100      	movs	r1, #0
   1d53a:	f04f 32ff 	mov.w	r2, #4294967295
   1d53e:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1d542:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d544:	4608      	mov	r0, r1
   1d546:	f7ff f99c 	bl	1c882 <bt_l2cap_create_pdu_timeout>
   1d54a:	f100 0608 	add.w	r6, r0, #8
   1d54e:	4604      	mov	r4, r0
   1d550:	2101      	movs	r1, #1
   1d552:	4630      	mov	r0, r6
   1d554:	f7f5 fe14 	bl	13180 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1d558:	2505      	movs	r5, #5
   1d55a:	2101      	movs	r1, #1
   1d55c:	7005      	strb	r5, [r0, #0]
   1d55e:	4630      	mov	r0, r6
   1d560:	f7f5 fe0e 	bl	13180 <net_buf_simple_add>
   1d564:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1d566:	7005      	strb	r5, [r0, #0]
   1d568:	4622      	mov	r2, r4
   1d56a:	2106      	movs	r1, #6
   1d56c:	4638      	mov	r0, r7
   1d56e:	9300      	str	r3, [sp, #0]
   1d570:	f7ff f98a 	bl	1c888 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1d574:	b110      	cbz	r0, 1d57c <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1d576:	4620      	mov	r0, r4
   1d578:	f7f5 fce0 	bl	12f3c <net_buf_unref>
}
   1d57c:	2000      	movs	r0, #0
   1d57e:	b003      	add	sp, #12
   1d580:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d582 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1d582:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d586:	4770      	bx	lr

0001d588 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1d588:	2000      	movs	r0, #0
   1d58a:	4770      	bx	lr

0001d58c <fixed_data_unref>:
}
   1d58c:	4770      	bx	lr

0001d58e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d58e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d590:	6849      	ldr	r1, [r1, #4]
   1d592:	6809      	ldr	r1, [r1, #0]
   1d594:	f7f5 ba6a 	b.w	12a6c <net_buf_alloc_len>

0001d598 <net_buf_simple_push_u8>:
{
   1d598:	b510      	push	{r4, lr}
   1d59a:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1d59c:	2101      	movs	r1, #1
   1d59e:	f7f5 fd93 	bl	130c8 <net_buf_simple_push>
	*data = val;
   1d5a2:	7004      	strb	r4, [r0, #0]
}
   1d5a4:	bd10      	pop	{r4, pc}

0001d5a6 <net_buf_simple_pull_le16>:
{
   1d5a6:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d5a8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d5aa:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d5ac:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d5ae:	f7f5 fdab 	bl	13108 <net_buf_simple_pull>
}
   1d5b2:	4620      	mov	r0, r4
   1d5b4:	bd10      	pop	{r4, pc}

0001d5b6 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1d5b6:	6802      	ldr	r2, [r0, #0]
   1d5b8:	6880      	ldr	r0, [r0, #8]
}
   1d5ba:	1a10      	subs	r0, r2, r0
   1d5bc:	4770      	bx	lr

0001d5be <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d5be:	8883      	ldrh	r3, [r0, #4]
   1d5c0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1d5c2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d5c4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d5c6:	6803      	ldr	r3, [r0, #0]
   1d5c8:	1a5b      	subs	r3, r3, r1
}
   1d5ca:	1ad0      	subs	r0, r2, r3
   1d5cc:	4770      	bx	lr

0001d5ce <net_buf_simple_add_mem>:
{
   1d5ce:	b538      	push	{r3, r4, r5, lr}
   1d5d0:	460d      	mov	r5, r1
   1d5d2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d5d4:	4611      	mov	r1, r2
   1d5d6:	f7f5 fdd3 	bl	13180 <net_buf_simple_add>
   1d5da:	4622      	mov	r2, r4
   1d5dc:	4629      	mov	r1, r5
}
   1d5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d5e2:	f7fe be32 	b.w	1c24a <memcpy>

0001d5e6 <net_buf_simple_add_u8>:
{
   1d5e6:	b510      	push	{r4, lr}
   1d5e8:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1d5ea:	2101      	movs	r1, #1
   1d5ec:	f7f5 fdc8 	bl	13180 <net_buf_simple_add>
	*u8 = val;
   1d5f0:	7004      	strb	r4, [r0, #0]
}
   1d5f2:	bd10      	pop	{r4, pc}

0001d5f4 <set_on_state>:
	__asm__ volatile(
   1d5f4:	f04f 0320 	mov.w	r3, #32
   1d5f8:	f3ef 8211 	mrs	r2, BASEPRI
   1d5fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d600:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d604:	6803      	ldr	r3, [r0, #0]
   1d606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d60a:	f043 0302 	orr.w	r3, r3, #2
   1d60e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d610:	f382 8811 	msr	BASEPRI, r2
   1d614:	f3bf 8f6f 	isb	sy
}
   1d618:	4770      	bx	lr

0001d61a <async_start>:
{
   1d61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d61c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1d61e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1d620:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d622:	f04f 0520 	mov.w	r5, #32
   1d626:	f3ef 8611 	mrs	r6, BASEPRI
   1d62a:	f385 8812 	msr	BASEPRI_MAX, r5
   1d62e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d632:	250c      	movs	r5, #12
   1d634:	4369      	muls	r1, r5
   1d636:	440c      	add	r4, r1
   1d638:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d63c:	f005 0c07 	and.w	ip, r5, #7
   1d640:	f1bc 0f01 	cmp.w	ip, #1
   1d644:	d10c      	bne.n	1d660 <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d646:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   1d64a:	f386 8811 	msr	BASEPRI, r6
   1d64e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1d652:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1d656:	6843      	ldr	r3, [r0, #4]
   1d658:	585b      	ldr	r3, [r3, r1]
   1d65a:	4798      	blx	r3
	return 0;
   1d65c:	2000      	movs	r0, #0
}
   1d65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d660:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1d664:	42af      	cmp	r7, r5
   1d666:	f386 8811 	msr	BASEPRI, r6
   1d66a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1d66e:	bf0c      	ite	eq
   1d670:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1d674:	f04f 30ff 	movne.w	r0, #4294967295
   1d678:	e7f1      	b.n	1d65e <async_start+0x44>

0001d67a <api_start>:
{
   1d67a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d67c:	2480      	movs	r4, #128	; 0x80
   1d67e:	9400      	str	r4, [sp, #0]
   1d680:	f7ff ffcb 	bl	1d61a <async_start>
}
   1d684:	b002      	add	sp, #8
   1d686:	bd10      	pop	{r4, pc}

0001d688 <onoff_started_callback>:
	return &data->mgr[type];
   1d688:	6900      	ldr	r0, [r0, #16]
   1d68a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d68c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1d690:	2100      	movs	r1, #0
   1d692:	4710      	bx	r2

0001d694 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d694:	2003      	movs	r0, #3
   1d696:	f7f7 be87 	b.w	153a8 <nrfx_clock_start>

0001d69a <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d69a:	2002      	movs	r0, #2
   1d69c:	f7f7 be84 	b.w	153a8 <nrfx_clock_start>

0001d6a0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d6a0:	2000      	movs	r0, #0
   1d6a2:	f7f7 be81 	b.w	153a8 <nrfx_clock_start>

0001d6a6 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d6a6:	2003      	movs	r0, #3
   1d6a8:	f7f7 befc 	b.w	154a4 <nrfx_clock_stop>

0001d6ac <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d6ac:	2002      	movs	r0, #2
   1d6ae:	f7f7 bef9 	b.w	154a4 <nrfx_clock_stop>

0001d6b2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d6b2:	2000      	movs	r0, #0
   1d6b4:	f7f7 bef6 	b.w	154a4 <nrfx_clock_stop>

0001d6b8 <blocking_start_callback>:
{
   1d6b8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d6ba:	f7fa bb0b 	b.w	17cd4 <z_impl_k_sem_give>

0001d6be <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d6be:	2280      	movs	r2, #128	; 0x80
   1d6c0:	f7f5 bdc6 	b.w	13250 <stop>

0001d6c4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6c4:	6843      	ldr	r3, [r0, #4]
}
   1d6c6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6c8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d6ca:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d6cc:	600b      	str	r3, [r1, #0]
}
   1d6ce:	4770      	bx	lr

0001d6d0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6d0:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   1d6d2:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6d6:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1d6d8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1d6dc:	6098      	str	r0, [r3, #8]
}
   1d6de:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d6e0:	60d9      	str	r1, [r3, #12]
   1d6e2:	4770      	bx	lr

0001d6e4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6e4:	6843      	ldr	r3, [r0, #4]
}
   1d6e6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6e8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d6ea:	6099      	str	r1, [r3, #8]
}
   1d6ec:	4770      	bx	lr

0001d6ee <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6ee:	6843      	ldr	r3, [r0, #4]
}
   1d6f0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6f2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d6f4:	60d9      	str	r1, [r3, #12]
}
   1d6f6:	4770      	bx	lr

0001d6f8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6f8:	6843      	ldr	r3, [r0, #4]
   1d6fa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d6fc:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1d6fe:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1d702:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1d704:	6090      	str	r0, [r2, #8]
}
   1d706:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d708:	60d3      	str	r3, [r2, #12]
   1d70a:	4770      	bx	lr

0001d70c <uarte_nrfx_config_get>:
{
   1d70c:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   1d70e:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1d710:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d714:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d718:	2000      	movs	r0, #0
   1d71a:	4770      	bx	lr

0001d71c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d71c:	6843      	ldr	r3, [r0, #4]
   1d71e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d720:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d724:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d728:	4770      	bx	lr

0001d72a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d72a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1d72c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1d72e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d730:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d734:	b150      	cbz	r0, 1d74c <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d736:	2000      	movs	r0, #0
	*c = *data->rx_data;
   1d738:	6952      	ldr	r2, [r2, #20]
   1d73a:	7812      	ldrb	r2, [r2, #0]
   1d73c:	700a      	strb	r2, [r1, #0]
   1d73e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d742:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d746:	2201      	movs	r2, #1
   1d748:	601a      	str	r2, [r3, #0]
	return 0;
   1d74a:	4770      	bx	lr
		return -1;
   1d74c:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d750:	4770      	bx	lr

0001d752 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d752:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d754:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d756:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d75a:	b940      	cbnz	r0, 1d76e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1d75c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d75e:	079b      	lsls	r3, r3, #30
   1d760:	d406      	bmi.n	1d770 <is_tx_ready.isra.0+0x1e>
   1d762:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d766:	3800      	subs	r0, #0
   1d768:	bf18      	it	ne
   1d76a:	2001      	movne	r0, #1
   1d76c:	4770      	bx	lr
   1d76e:	2001      	movs	r0, #1
}
   1d770:	4770      	bx	lr

0001d772 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1d772:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1d774:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1d776:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d77a:	05c9      	lsls	r1, r1, #23
   1d77c:	d518      	bpl.n	1d7b0 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d77e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d782:	b1a9      	cbz	r1, 1d7b0 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1d784:	f04f 0020 	mov.w	r0, #32
   1d788:	f3ef 8111 	mrs	r1, BASEPRI
   1d78c:	f380 8812 	msr	BASEPRI_MAX, r0
   1d790:	f3bf 8f6f 	isb	sy
   1d794:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d798:	b130      	cbz	r0, 1d7a8 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d79a:	2000      	movs	r0, #0
   1d79c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1d7a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7a4:	2001      	movs	r0, #1
   1d7a6:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1d7a8:	f381 8811 	msr	BASEPRI, r1
   1d7ac:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d7b0:	6852      	ldr	r2, [r2, #4]
   1d7b2:	06d2      	lsls	r2, r2, #27
   1d7b4:	d515      	bpl.n	1d7e2 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1d7b6:	f04f 0120 	mov.w	r1, #32
   1d7ba:	f3ef 8211 	mrs	r2, BASEPRI
   1d7be:	f381 8812 	msr	BASEPRI_MAX, r1
   1d7c2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7c6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d7ca:	b111      	cbz	r1, 1d7d2 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d7cc:	2100      	movs	r1, #0
   1d7ce:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1d7d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d7d6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1d7da:	f382 8811 	msr	BASEPRI, r2
   1d7de:	f3bf 8f6f 	isb	sy
}
   1d7e2:	4770      	bx	lr

0001d7e4 <z_log_msg_static_create.constprop.0>:
   1d7e4:	2300      	movs	r3, #0
   1d7e6:	f7ed ba89 	b.w	acfc <z_impl_z_log_msg_static_create>

0001d7ea <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1d7ea:	2000      	movs	r0, #0
   1d7ec:	4770      	bx	lr

0001d7ee <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1d7ee:	b538      	push	{r3, r4, r5, lr}
   1d7f0:	460c      	mov	r4, r1
   1d7f2:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1d7f4:	f7f1 f98a 	bl	eb0c <bt_is_ready>
   1d7f8:	b128      	cbz	r0, 1d806 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1d7fa:	4629      	mov	r1, r5
   1d7fc:	4620      	mov	r0, r4
}
   1d7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1d802:	f7f0 ba49 	b.w	dc98 <bt_hci_le_rand>
}
   1d806:	f06f 000a 	mvn.w	r0, #10
   1d80a:	bd38      	pop	{r3, r4, r5, pc}

0001d80c <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1d80c:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   1d80e:	f000 f91d 	bl	1da4c <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   1d812:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   1d814:	bf18      	it	ne
   1d816:	f06f 0015 	mvnne.w	r0, #21
   1d81a:	bd08      	pop	{r3, pc}

0001d81c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d81c:	4770      	bx	lr

0001d81e <sys_clock_cycle_get_32>:
{
   1d81e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1d820:	f7f6 fede 	bl	145e0 <z_nrf_rtc_timer_read>
}
   1d824:	bd08      	pop	{r3, pc}

0001d826 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1d826:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1d828:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   1d82c:	6843      	ldr	r3, [r0, #4]
   1d82e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1d830:	7a05      	ldrb	r5, [r0, #8]
   1d832:	6844      	ldr	r4, [r0, #4]
   1d834:	4435      	add	r5, r6
   1d836:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1d83a:	42a3      	cmp	r3, r4
   1d83c:	d902      	bls.n	1d844 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   1d83e:	f06f 0001 	mvn.w	r0, #1
}
   1d842:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   1d844:	795c      	ldrb	r4, [r3, #5]
   1d846:	428c      	cmp	r4, r1
   1d848:	d001      	beq.n	1d84e <pinctrl_lookup_state+0x28>
		(*state)++;
   1d84a:	3308      	adds	r3, #8
   1d84c:	e7ef      	b.n	1d82e <pinctrl_lookup_state+0x8>
			return 0;
   1d84e:	2000      	movs	r0, #0
   1d850:	e7f7      	b.n	1d842 <pinctrl_lookup_state+0x1c>

0001d852 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1d852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d856:	4615      	mov	r5, r2
   1d858:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d85a:	f04f 0901 	mov.w	r9, #1
   1d85e:	b085      	sub	sp, #20
   1d860:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1d864:	45d0      	cmp	r8, sl
   1d866:	d103      	bne.n	1d870 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1d868:	2000      	movs	r0, #0
}
   1d86a:	b005      	add	sp, #20
   1d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1d870:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1d874:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1d878:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   1d87c:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1d87e:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   1d882:	bf08      	it	eq
   1d884:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1d888:	2b22      	cmp	r3, #34	; 0x22
   1d88a:	f200 8091 	bhi.w	1d9b0 <pinctrl_configure_pins+0x15e>
   1d88e:	e8df f003 	tbb	[pc, r3]
   1d892:	1e12      	.short	0x1e12
   1d894:	34263823 	.word	0x34263823
   1d898:	8f8f8f38 	.word	0x8f8f8f38
   1d89c:	8f653b8f 	.word	0x8f653b8f
   1d8a0:	8f8f8f8f 	.word	0x8f8f8f8f
   1d8a4:	8f8f8f8f 	.word	0x8f8f8f8f
   1d8a8:	77747168 	.word	0x77747168
   1d8ac:	7a8f8f8f 	.word	0x7a8f8f8f
   1d8b0:	89868380 	.word	0x89868380
   1d8b4:	8c          	.byte	0x8c
   1d8b5:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1d8b6:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d8ba:	a803      	add	r0, sp, #12
   1d8bc:	9403      	str	r4, [sp, #12]
   1d8be:	f7f7 f8bb 	bl	14a38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d8c2:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   1d8c4:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d8c6:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   1d8ca:	6083      	str	r3, [r0, #8]
   1d8cc:	e002      	b.n	1d8d4 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   1d8ce:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1d8d2:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   1d8d4:	46b3      	mov	fp, r6
   1d8d6:	e01e      	b.n	1d916 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1d8d8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   1d8dc:	e7ed      	b.n	1d8ba <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1d8de:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1d8e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d8e4:	a803      	add	r0, sp, #12
   1d8e6:	9403      	str	r4, [sp, #12]
   1d8e8:	f7f7 f8a6 	bl	14a38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1d8ec:	9b03      	ldr	r3, [sp, #12]
   1d8ee:	f04f 0b01 	mov.w	fp, #1
   1d8f2:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   1d8f6:	60c3      	str	r3, [r0, #12]
   1d8f8:	e00d      	b.n	1d916 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1d8fa:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1d8fe:	2601      	movs	r6, #1
   1d900:	e7f0      	b.n	1d8e4 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1d902:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   1d906:	e7e4      	b.n	1d8d2 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1d908:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1d90c:	2f00      	cmp	r7, #0
   1d90e:	d1e0      	bne.n	1d8d2 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1d910:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   1d912:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1d914:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1d916:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d91a:	a803      	add	r0, sp, #12
   1d91c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d920:	2a00      	cmp	r2, #0
   1d922:	bf1c      	itt	ne
   1d924:	2601      	movne	r6, #1
   1d926:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1d92a:	9301      	str	r3, [sp, #4]
   1d92c:	9403      	str	r4, [sp, #12]
   1d92e:	f7f7 f883 	bl	14a38 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d932:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d934:	9b01      	ldr	r3, [sp, #4]
   1d936:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d93a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d93e:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1d942:	023b      	lsls	r3, r7, #8
   1d944:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   1d948:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d94c:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   1d950:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1d952:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1d956:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1d95a:	e783      	b.n	1d864 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1d95c:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1d960:	e7d4      	b.n	1d90c <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1d962:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1d966:	f8da 3000 	ldr.w	r3, [sl]
   1d96a:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   1d96e:	2b00      	cmp	r3, #0
   1d970:	d0c5      	beq.n	1d8fe <pinctrl_configure_pins+0xac>
   1d972:	e7a2      	b.n	1d8ba <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1d974:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1d978:	e7f5      	b.n	1d966 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1d97a:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1d97e:	e7f2      	b.n	1d966 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1d980:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   1d984:	e7ef      	b.n	1d966 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1d986:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d98a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1d98c:	f04f 0b00 	mov.w	fp, #0
   1d990:	e7c1      	b.n	1d916 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1d992:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   1d996:	e790      	b.n	1d8ba <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1d998:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   1d99c:	e7f5      	b.n	1d98a <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1d99e:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   1d9a2:	e7f2      	b.n	1d98a <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1d9a4:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   1d9a8:	e7ef      	b.n	1d98a <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1d9aa:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   1d9ae:	e7ec      	b.n	1d98a <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   1d9b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d9b4:	e759      	b.n	1d86a <pinctrl_configure_pins+0x18>

0001d9b6 <mbox_nrf_register_callback>:
{
   1d9b6:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1d9b8:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1d9ba:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   1d9bc:	bf9f      	itttt	ls
   1d9be:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   1d9c2:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1d9c6:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1d9c8:	2000      	movls	r0, #0
		return -EINVAL;
   1d9ca:	bf88      	it	hi
   1d9cc:	f06f 0015 	mvnhi.w	r0, #21
}
   1d9d0:	bd10      	pop	{r4, pc}

0001d9d2 <mbox_nrf_mtu_get>:
}
   1d9d2:	2000      	movs	r0, #0
   1d9d4:	4770      	bx	lr

0001d9d6 <mbox_nrf_max_channels_get>:
}
   1d9d6:	2010      	movs	r0, #16
   1d9d8:	4770      	bx	lr

0001d9da <z_log_msg_static_create.constprop.0>:
   1d9da:	2300      	movs	r3, #0
   1d9dc:	f7ed b98e 	b.w	acfc <z_impl_z_log_msg_static_create>

0001d9e0 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d9e0:	2101      	movs	r1, #1
   1d9e2:	f7f7 baa5 	b.w	14f30 <dk_set_led>

0001d9e6 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d9e6:	2100      	movs	r1, #0
   1d9e8:	f7f7 baa2 	b.w	14f30 <dk_set_led>

0001d9ec <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1d9ec:	2000      	movs	r0, #0
   1d9ee:	4770      	bx	lr

0001d9f0 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   1d9f0:	2300      	movs	r3, #0
{
   1d9f2:	b570      	push	{r4, r5, r6, lr}
   1d9f4:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   1d9f6:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   1d9fa:	ab03      	add	r3, sp, #12
   1d9fc:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   1d9fe:	2304      	movs	r3, #4
{
   1da00:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   1da02:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   1da04:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   1da06:	b169      	cbz	r1, 1da24 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   1da08:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   1da0a:	680b      	ldr	r3, [r1, #0]
   1da0c:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   1da0e:	684b      	ldr	r3, [r1, #4]
   1da10:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   1da12:	2101      	movs	r1, #1
   1da14:	2041      	movs	r0, #65	; 0x41
   1da16:	f7f7 fb43 	bl	150a0 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   1da1a:	1e05      	subs	r5, r0, #0
   1da1c:	dc04      	bgt.n	1da28 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   1da1e:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   1da20:	b008      	add	sp, #32
   1da22:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   1da24:	2601      	movs	r6, #1
   1da26:	e7f4      	b.n	1da12 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   1da28:	1e23      	subs	r3, r4, #0
   1da2a:	bf18      	it	ne
   1da2c:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   1da2e:	2100      	movs	r1, #0
   1da30:	e9cd 4300 	strd	r4, r3, [sp]
   1da34:	aa04      	add	r2, sp, #16
   1da36:	4633      	mov	r3, r6
   1da38:	f7f7 fb16 	bl	15068 <psa_call>
   1da3c:	4604      	mov	r4, r0
    psa_close(handle);
   1da3e:	4628      	mov	r0, r5
   1da40:	f7f7 fb3c 	bl	150bc <psa_close>
    if (status < PSA_SUCCESS) {
   1da44:	2c00      	cmp	r4, #0
   1da46:	dbea      	blt.n	1da1e <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   1da48:	4620      	mov	r0, r4
   1da4a:	e7e9      	b.n	1da20 <tfm_platform_ioctl+0x30>

0001da4c <psa_crypto_init>:
}
   1da4c:	2000      	movs	r0, #0
   1da4e:	4770      	bx	lr

0001da50 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   1da50:	2300      	movs	r3, #0
{
   1da52:	b510      	push	{r4, lr}
   1da54:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   1da56:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   1da5a:	ab05      	add	r3, sp, #20
   1da5c:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   1da5e:	230c      	movs	r3, #12
   1da60:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   1da62:	2304      	movs	r3, #4
{
   1da64:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   1da66:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1da68:	aa03      	add	r2, sp, #12
   1da6a:	eb0d 0103 	add.w	r1, sp, r3
   1da6e:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   1da70:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   1da72:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1da76:	f7ff ffbb 	bl	1d9f0 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   1da7a:	9b00      	ldr	r3, [sp, #0]
   1da7c:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   1da7e:	b008      	add	sp, #32
   1da80:	bd10      	pop	{r4, pc}

0001da82 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1da82:	f7f7 bb29 	b.w	150d8 <SystemCoreClockUpdate>

0001da86 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1da86:	4700      	bx	r0

0001da88 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1da88:	f000 be56 	b.w	1e738 <z_impl_k_busy_wait>

0001da8c <nrf_gpio_pin_present_check>:
    switch (port)
   1da8c:	0943      	lsrs	r3, r0, #5
   1da8e:	d00b      	beq.n	1daa8 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   1da90:	2b01      	cmp	r3, #1
   1da92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1da96:	bf18      	it	ne
   1da98:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1da9a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1da9e:	fa23 f000 	lsr.w	r0, r3, r0
}
   1daa2:	f000 0001 	and.w	r0, r0, #1
   1daa6:	4770      	bx	lr
    switch (port)
   1daa8:	f04f 33ff 	mov.w	r3, #4294967295
   1daac:	e7f5      	b.n	1da9a <nrf_gpio_pin_present_check+0xe>

0001daae <pin_is_task_output>:
{
   1daae:	b508      	push	{r3, lr}
   1dab0:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1dab2:	f7f7 fd93 	bl	155dc <pin_is_output>
   1dab6:	b110      	cbz	r0, 1dabe <pin_is_task_output+0x10>
   1dab8:	4610      	mov	r0, r2
   1daba:	f7f7 fd79 	bl	155b0 <pin_in_use_by_te>
}
   1dabe:	f000 0001 	and.w	r0, r0, #1
   1dac2:	bd08      	pop	{r3, pc}

0001dac4 <nrf_gpio_reconfigure>:
{
   1dac4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1dac8:	4617      	mov	r7, r2
   1daca:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   1dace:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1dad0:	a801      	add	r0, sp, #4
{
   1dad2:	460c      	mov	r4, r1
   1dad4:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1dad6:	f7f7 fe05 	bl	156e4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1dada:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1dadc:	1e39      	subs	r1, r7, #0
   1dade:	bf18      	it	ne
   1dae0:	2101      	movne	r1, #1
   1dae2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1dae6:	1e23      	subs	r3, r4, #0
   1dae8:	bf18      	it	ne
   1daea:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1daec:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1daee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1daf2:	bf14      	ite	ne
   1daf4:	210c      	movne	r1, #12
   1daf6:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1daf8:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1dafa:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1dafe:	bf14      	ite	ne
   1db00:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   1db04:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1db06:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1db0a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1db0e:	bf14      	ite	ne
   1db10:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   1db14:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1db16:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1db1a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   1db1c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1db20:	b104      	cbz	r4, 1db24 <nrf_gpio_reconfigure+0x60>
   1db22:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1db24:	b10f      	cbz	r7, 1db2a <nrf_gpio_reconfigure+0x66>
   1db26:	783f      	ldrb	r7, [r7, #0]
   1db28:	007f      	lsls	r7, r7, #1
   1db2a:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1db2c:	b10e      	cbz	r6, 1db32 <nrf_gpio_reconfigure+0x6e>
   1db2e:	7836      	ldrb	r6, [r6, #0]
   1db30:	00b6      	lsls	r6, r6, #2
   1db32:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1db34:	b18d      	cbz	r5, 1db5a <nrf_gpio_reconfigure+0x96>
   1db36:	7829      	ldrb	r1, [r5, #0]
   1db38:	0209      	lsls	r1, r1, #8
   1db3a:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1db3c:	f1b8 0f00 	cmp.w	r8, #0
   1db40:	d003      	beq.n	1db4a <nrf_gpio_reconfigure+0x86>
   1db42:	f898 8000 	ldrb.w	r8, [r8]
   1db46:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1db4a:	4321      	orrs	r1, r4
   1db4c:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   1db50:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1db54:	b002      	add	sp, #8
   1db56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1db5a:	4629      	mov	r1, r5
   1db5c:	e7ed      	b.n	1db3a <nrf_gpio_reconfigure+0x76>

0001db5e <nrf_gpio_cfg_sense_set>:
{
   1db5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1db60:	f10d 030f 	add.w	r3, sp, #15
   1db64:	9301      	str	r3, [sp, #4]
   1db66:	2300      	movs	r3, #0
{
   1db68:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1db6c:	461a      	mov	r2, r3
   1db6e:	4619      	mov	r1, r3
   1db70:	9300      	str	r3, [sp, #0]
   1db72:	f7ff ffa7 	bl	1dac4 <nrf_gpio_reconfigure>
}
   1db76:	b005      	add	sp, #20
   1db78:	f85d fb04 	ldr.w	pc, [sp], #4

0001db7c <start_playback>:
{
   1db7c:	b510      	push	{r4, lr}
   1db7e:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1db80:	2002      	movs	r0, #2
    p_cb->flags = flags;
   1db82:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1db84:	7208      	strb	r0, [r1, #8]
    if (p_cb->handler)
   1db86:	6809      	ldr	r1, [r1, #0]
   1db88:	b179      	cbz	r1, 1dbaa <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   1db8a:	f012 0f04 	tst.w	r2, #4
   1db8e:	bf0c      	ite	eq
   1db90:	2182      	moveq	r1, #130	; 0x82
   1db92:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1db94:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1db96:	bf48      	it	mi
   1db98:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1db9c:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   1db9e:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   1dba0:	bf48      	it	mi
   1dba2:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1dba6:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbaa:	2000      	movs	r0, #0
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1dbac:	6821      	ldr	r1, [r4, #0]
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1dbae:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dbb2:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   1dbb6:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbba:	bf08      	it	eq
   1dbbc:	2101      	moveq	r1, #1
   1dbbe:	6822      	ldr	r2, [r4, #0]
   1dbc0:	bf0c      	ite	eq
   1dbc2:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   1dbc4:	18d0      	addne	r0, r2, r3
}
   1dbc6:	bd10      	pop	{r4, pc}

0001dbc8 <metal_device_open>:
{
   1dbc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dbca:	460c      	mov	r4, r1
   1dbcc:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1dbce:	4606      	mov	r6, r0
   1dbd0:	b918      	cbnz	r0, 1dbda <metal_device_open+0x12>
		return -EINVAL;
   1dbd2:	f06f 0015 	mvn.w	r0, #21
}
   1dbd6:	b002      	add	sp, #8
   1dbd8:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1dbda:	f7fe faf7 	bl	1c1cc <strlen>
   1dbde:	2800      	cmp	r0, #0
   1dbe0:	d0f7      	beq.n	1dbd2 <metal_device_open+0xa>
   1dbe2:	2c00      	cmp	r4, #0
   1dbe4:	d0f5      	beq.n	1dbd2 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1dbe6:	4620      	mov	r0, r4
   1dbe8:	f7fe faf0 	bl	1c1cc <strlen>
   1dbec:	2800      	cmp	r0, #0
   1dbee:	d0f0      	beq.n	1dbd2 <metal_device_open+0xa>
   1dbf0:	2d00      	cmp	r5, #0
   1dbf2:	d0ee      	beq.n	1dbd2 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1dbf4:	4630      	mov	r0, r6
   1dbf6:	a901      	add	r1, sp, #4
   1dbf8:	f7f8 fc0a 	bl	16410 <metal_bus_find>
	if (error)
   1dbfc:	2800      	cmp	r0, #0
   1dbfe:	d1ea      	bne.n	1dbd6 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1dc00:	9801      	ldr	r0, [sp, #4]
   1dc02:	6883      	ldr	r3, [r0, #8]
   1dc04:	b12b      	cbz	r3, 1dc12 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1dc06:	462a      	mov	r2, r5
   1dc08:	4621      	mov	r1, r4
}
   1dc0a:	b002      	add	sp, #8
   1dc0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1dc10:	4718      	bx	r3
		return -ENODEV;
   1dc12:	f06f 0012 	mvn.w	r0, #18
   1dc16:	e7de      	b.n	1dbd6 <metal_device_open+0xe>

0001dc18 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   1dc18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dc1c:	b089      	sub	sp, #36	; 0x24
   1dc1e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1dc20:	4604      	mov	r4, r0
   1dc22:	4689      	mov	r9, r1
   1dc24:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   1dc26:	2100      	movs	r1, #0
   1dc28:	2220      	movs	r2, #32
   1dc2a:	4668      	mov	r0, sp
{
   1dc2c:	461f      	mov	r7, r3
   1dc2e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   1dc30:	f7fe fb16 	bl	1c260 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1dc34:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   1dc36:	bf97      	itett	ls
   1dc38:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   1dc3a:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   1dc3e:	40b3      	lslls	r3, r6
   1dc40:	f103 33ff 	addls.w	r3, r3, #4294967295
   1dc44:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   1dc46:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   1dc48:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   1dc4c:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   1dc50:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   1dc52:	3418      	adds	r4, #24
   1dc54:	b145      	cbz	r5, 1dc68 <metal_io_init+0x50>
   1dc56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dc58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1dc5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1dc5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   1dc62:	b009      	add	sp, #36	; 0x24
   1dc64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   1dc68:	466d      	mov	r5, sp
   1dc6a:	e7f4      	b.n	1dc56 <metal_io_init+0x3e>

0001dc6c <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1dc6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dc6e:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1dc70:	1c66      	adds	r6, r4, #1
   1dc72:	d031      	beq.n	1dcd8 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dc74:	6885      	ldr	r5, [r0, #8]
   1dc76:	42a9      	cmp	r1, r5
   1dc78:	d22e      	bcs.n	1dcd8 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1dc7a:	1864      	adds	r4, r4, r1
   1dc7c:	d02c      	beq.n	1dcd8 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   1dc7e:	185e      	adds	r6, r3, r1
   1dc80:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1dc82:	bf88      	it	hi
   1dc84:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1dc86:	6a05      	ldr	r5, [r0, #32]
   1dc88:	b135      	cbz	r5, 1dc98 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   1dc8a:	9300      	str	r3, [sp, #0]
   1dc8c:	2305      	movs	r3, #5
   1dc8e:	47a8      	blx	r5
   1dc90:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1dc92:	4618      	mov	r0, r3
   1dc94:	b002      	add	sp, #8
   1dc96:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   1dc98:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1dc9c:	4619      	mov	r1, r3
   1dc9e:	1aa4      	subs	r4, r4, r2
   1dca0:	1910      	adds	r0, r2, r4
   1dca2:	b119      	cbz	r1, 1dcac <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   1dca4:	ea40 0502 	orr.w	r5, r0, r2
   1dca8:	07ad      	lsls	r5, r5, #30
   1dcaa:	d10a      	bne.n	1dcc2 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1dcac:	2903      	cmp	r1, #3
   1dcae:	dc0d      	bgt.n	1dccc <metal_io_block_read+0x60>
   1dcb0:	3801      	subs	r0, #1
   1dcb2:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   1dcb4:	428a      	cmp	r2, r1
   1dcb6:	d0ec      	beq.n	1dc92 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   1dcb8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   1dcbc:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1dcc0:	e7f8      	b.n	1dcb4 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   1dcc2:	7800      	ldrb	r0, [r0, #0]
			len--;
   1dcc4:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   1dcc6:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   1dcca:	e7e9      	b.n	1dca0 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1dccc:	f850 4b04 	ldr.w	r4, [r0], #4
   1dcd0:	3904      	subs	r1, #4
   1dcd2:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   1dcd6:	e7e9      	b.n	1dcac <metal_io_block_read+0x40>
		return -ERANGE;
   1dcd8:	f06f 0321 	mvn.w	r3, #33	; 0x21
   1dcdc:	e7d9      	b.n	1dc92 <metal_io_block_read+0x26>

0001dcde <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1dcde:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dce0:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1dce2:	1c65      	adds	r5, r4, #1
   1dce4:	d032      	beq.n	1dd4c <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dce6:	6885      	ldr	r5, [r0, #8]
   1dce8:	42a9      	cmp	r1, r5
   1dcea:	d22f      	bcs.n	1dd4c <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   1dcec:	1864      	adds	r4, r4, r1
   1dcee:	d02d      	beq.n	1dd4c <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1dcf0:	185e      	adds	r6, r3, r1
   1dcf2:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1dcf4:	bf88      	it	hi
   1dcf6:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1dcf8:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1dcfa:	b1cd      	cbz	r5, 1dd30 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   1dcfc:	9300      	str	r3, [sp, #0]
   1dcfe:	2305      	movs	r3, #5
   1dd00:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1dd02:	b002      	add	sp, #8
   1dd04:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1dd06:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   1dd0a:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1dd0c:	7005      	strb	r5, [r0, #0]
			len--;
   1dd0e:	4615      	mov	r5, r2
   1dd10:	18a0      	adds	r0, r4, r2
		while ( len && (
   1dd12:	b119      	cbz	r1, 1dd1c <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   1dd14:	ea40 0602 	orr.w	r6, r0, r2
   1dd18:	07b6      	lsls	r6, r6, #30
   1dd1a:	d1f4      	bne.n	1dd06 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1dd1c:	2903      	cmp	r1, #3
   1dd1e:	dc0a      	bgt.n	1dd36 <metal_io_block_write+0x58>
   1dd20:	3d01      	subs	r5, #1
   1dd22:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   1dd24:	4288      	cmp	r0, r1
   1dd26:	d10c      	bne.n	1dd42 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   1dd28:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1dd2c:	4618      	mov	r0, r3
   1dd2e:	e7e8      	b.n	1dd02 <metal_io_block_write+0x24>
   1dd30:	4619      	mov	r1, r3
   1dd32:	1aa4      	subs	r4, r4, r2
   1dd34:	e7eb      	b.n	1dd0e <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1dd36:	f855 2b04 	ldr.w	r2, [r5], #4
   1dd3a:	3904      	subs	r1, #4
   1dd3c:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   1dd40:	e7ec      	b.n	1dd1c <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   1dd42:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   1dd46:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   1dd4a:	e7eb      	b.n	1dd24 <metal_io_block_write+0x46>
		return -ERANGE;
   1dd4c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dd50:	e7d7      	b.n	1dd02 <metal_io_block_write+0x24>

0001dd52 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1dd52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dd54:	6804      	ldr	r4, [r0, #0]
   1dd56:	461d      	mov	r5, r3
		: NULL);
   1dd58:	1c66      	adds	r6, r4, #1
   1dd5a:	d02b      	beq.n	1ddb4 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dd5c:	6883      	ldr	r3, [r0, #8]
   1dd5e:	4299      	cmp	r1, r3
   1dd60:	d228      	bcs.n	1ddb4 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   1dd62:	1864      	adds	r4, r4, r1
   1dd64:	d026      	beq.n	1ddb4 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   1dd66:	186e      	adds	r6, r5, r1
   1dd68:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1dd6a:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1dd6c:	bf88      	it	hi
   1dd6e:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1dd70:	b12e      	cbz	r6, 1dd7e <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   1dd72:	2305      	movs	r3, #5
   1dd74:	9500      	str	r5, [sp, #0]
   1dd76:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   1dd78:	4628      	mov	r0, r5
}
   1dd7a:	b002      	add	sp, #8
   1dd7c:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   1dd7e:	4621      	mov	r1, r4
   1dd80:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1dd82:	b94b      	cbnz	r3, 1dd98 <metal_io_block_set+0x46>
   1dd84:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   1dd86:	4299      	cmp	r1, r3
   1dd88:	d111      	bne.n	1ddae <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   1dd8a:	f3bf 8f5b 	dmb	ish
   1dd8e:	e7f3      	b.n	1dd78 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   1dd90:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1dd94:	3b01      	subs	r3, #1
   1dd96:	e7f4      	b.n	1dd82 <metal_io_block_set+0x30>
   1dd98:	0788      	lsls	r0, r1, #30
   1dd9a:	d1f9      	bne.n	1dd90 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1dd9c:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   1dda0:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1dda2:	2b03      	cmp	r3, #3
   1dda4:	ddee      	ble.n	1dd84 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   1dda6:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1ddaa:	3b04      	subs	r3, #4
   1ddac:	e7f9      	b.n	1dda2 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   1ddae:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   1ddb2:	e7e8      	b.n	1dd86 <metal_io_block_set+0x34>
		return -ERANGE;
   1ddb4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1ddb8:	e7df      	b.n	1dd7a <metal_io_block_set+0x28>

0001ddba <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1ddba:	2000      	movs	r0, #0
   1ddbc:	4770      	bx	lr

0001ddbe <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1ddbe:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   1ddc0:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1ddc2:	4602      	mov	r2, r0
   1ddc4:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1ddc6:	b984      	cbnz	r4, 1ddea <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   1ddc8:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   1ddca:	291f      	cmp	r1, #31
   1ddcc:	bf98      	it	ls
   1ddce:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   1ddd2:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1ddd4:	b161      	cbz	r1, 1ddf0 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   1ddd6:	6880      	ldr	r0, [r0, #8]
   1ddd8:	4283      	cmp	r3, r0
   1ddda:	d209      	bcs.n	1ddf0 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   1dddc:	6910      	ldr	r0, [r2, #16]
   1ddde:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   1dde0:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1dde4:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1dde6:	bc10      	pop	{r4}
   1dde8:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1ddea:	4623      	mov	r3, r4
}
   1ddec:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   1ddee:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1ddf0:	f04f 30ff 	mov.w	r0, #4294967295
   1ddf4:	e7f7      	b.n	1dde6 <metal_io_phys+0x28>

0001ddf6 <virtqueue_create>:
{
   1ddf6:	b530      	push	{r4, r5, lr}
   1ddf8:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   1ddfa:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   1ddfe:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   1de00:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   1de02:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   1de04:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   1de06:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   1de08:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1de0a:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   1de0c:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1de0e:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1de12:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   1de16:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1de1a:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1de1c:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1de1e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   1de22:	1c6a      	adds	r2, r5, #1
   1de24:	4413      	add	r3, r2
   1de26:	426d      	negs	r5, r5
   1de28:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1de2a:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1de2c:	6983      	ldr	r3, [r0, #24]
   1de2e:	b953      	cbnz	r3, 1de46 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   1de30:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   1de32:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   1de34:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   1de36:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   1de3a:	db06      	blt.n	1de4a <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1de3c:	2300      	movs	r3, #0
   1de3e:	7393      	strb	r3, [r2, #14]
   1de40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1de44:	73d3      	strb	r3, [r2, #15]
}
   1de46:	2000      	movs	r0, #0
   1de48:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   1de4a:	3301      	adds	r3, #1
   1de4c:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1de4e:	e7f0      	b.n	1de32 <virtqueue_create+0x3c>

0001de50 <virtqueue_add_buffer>:
{
   1de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   1de54:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   1de58:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1de5a:	4655      	mov	r5, sl
   1de5c:	2600      	movs	r6, #0
{
   1de5e:	b085      	sub	sp, #20
	needed = readable + writable;
   1de60:	eb02 0803 	add.w	r8, r2, r3
{
   1de64:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1de66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1de68:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   1de6c:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   1de70:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1de72:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   1de76:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1de7a:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1de7c:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   1de7e:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1de80:	45b0      	cmp	r8, r6
   1de82:	dc1a      	bgt.n	1deba <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   1de84:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   1de86:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1de88:	eba3 030b 	sub.w	r3, r3, fp
   1de8c:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by slave, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1de8e:	69e3      	ldr	r3, [r4, #28]
   1de90:	8961      	ldrh	r1, [r4, #10]
   1de92:	885a      	ldrh	r2, [r3, #2]
   1de94:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1de96:	400a      	ands	r2, r1
   1de98:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1de9c:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1dea0:	f3bf 8f5b 	dmb	ish
}
   1dea4:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   1dea6:	69e2      	ldr	r2, [r4, #28]
   1dea8:	8853      	ldrh	r3, [r2, #2]
   1deaa:	3301      	adds	r3, #1
   1deac:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1deae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1deb0:	3301      	adds	r3, #1
   1deb2:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1deb4:	b005      	add	sp, #20
   1deb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1deba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1debc:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1debe:	f857 1c04 	ldr.w	r1, [r7, #-4]
   1dec2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1dec6:	9302      	str	r3, [sp, #8]
   1dec8:	6803      	ldr	r3, [r0, #0]
   1deca:	9203      	str	r2, [sp, #12]
   1decc:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1dece:	6883      	ldr	r3, [r0, #8]
   1ded0:	3708      	adds	r7, #8
   1ded2:	4299      	cmp	r1, r3
   1ded4:	bf28      	it	cs
   1ded6:	f04f 31ff 	movcs.w	r1, #4294967295
   1deda:	f7ff ff70 	bl	1ddbe <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1dede:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1dee2:	5098      	str	r0, [r3, r2]
   1dee4:	2200      	movs	r2, #0
   1dee6:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   1dee8:	f857 2c08 	ldr.w	r2, [r7, #-8]
   1deec:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1deee:	9a01      	ldr	r2, [sp, #4]
   1def0:	4296      	cmp	r6, r2
   1def2:	bfac      	ite	ge
   1def4:	2200      	movge	r2, #0
   1def6:	2201      	movlt	r2, #1
		if (i >= readable)
   1def8:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   1defa:	bfd8      	it	le
   1defc:	f042 0202 	orrle.w	r2, r2, #2
   1df00:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1df02:	3601      	adds	r6, #1
   1df04:	89ed      	ldrh	r5, [r5, #14]
   1df06:	e7bb      	b.n	1de80 <virtqueue_add_buffer+0x30>

0001df08 <virtqueue_get_buffer>:
{
   1df08:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1df0a:	b350      	cbz	r0, 1df62 <virtqueue_get_buffer+0x5a>
   1df0c:	6a05      	ldr	r5, [r0, #32]
   1df0e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   1df10:	886b      	ldrh	r3, [r5, #2]
   1df12:	42a3      	cmp	r3, r4
   1df14:	d030      	beq.n	1df78 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1df16:	1c63      	adds	r3, r4, #1
   1df18:	85c3      	strh	r3, [r0, #46]	; 0x2e
   1df1a:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1df1c:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1df20:	3b01      	subs	r3, #1
   1df22:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1df24:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1df28:	686b      	ldr	r3, [r5, #4]
   1df2a:	b29e      	uxth	r6, r3
	if (len)
   1df2c:	b109      	cbz	r1, 1df32 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1df2e:	68ad      	ldr	r5, [r5, #8]
   1df30:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1df32:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1df36:	b29b      	uxth	r3, r3
   1df38:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1df3c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1df40:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1df42:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1df44:	442f      	add	r7, r5
	dxp->ndescs--;
   1df46:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1df48:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1df4a:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1df4c:	898d      	ldrh	r5, [r1, #12]
   1df4e:	076f      	lsls	r7, r5, #29
   1df50:	d50e      	bpl.n	1df70 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1df52:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1df54:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1df56:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1df58:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1df5a:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1df5c:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1df5e:	b102      	cbz	r2, 1df62 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1df60:	8014      	strh	r4, [r2, #0]
}
   1df62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1df64:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1df66:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1df68:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1df6a:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1df6e:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1df70:	898d      	ldrh	r5, [r1, #12]
   1df72:	07ed      	lsls	r5, r5, #31
   1df74:	d4f6      	bmi.n	1df64 <virtqueue_get_buffer+0x5c>
   1df76:	e7ec      	b.n	1df52 <virtqueue_get_buffer+0x4a>
		return NULL;
   1df78:	2000      	movs	r0, #0
   1df7a:	e7f2      	b.n	1df62 <virtqueue_get_buffer+0x5a>

0001df7c <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1df7c:	6983      	ldr	r3, [r0, #24]
   1df7e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1df82:	6898      	ldr	r0, [r3, #8]
   1df84:	4770      	bx	lr

0001df86 <virtqueue_get_available_buffer>:
{
   1df86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1df8a:	f3bf 8f5b 	dmb	ish
{
   1df8e:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1df90:	69c2      	ldr	r2, [r0, #28]
{
   1df92:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1df94:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1df96:	8851      	ldrh	r1, [r2, #2]
{
   1df98:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1df9a:	4299      	cmp	r1, r3
   1df9c:	d045      	beq.n	1e02a <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1df9e:	1c59      	adds	r1, r3, #1
   1dfa0:	8601      	strh	r1, [r0, #48]	; 0x30
   1dfa2:	8941      	ldrh	r1, [r0, #10]
   1dfa4:	3901      	subs	r1, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1dfa6:	400b      	ands	r3, r1
   1dfa8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   1dfac:	8892      	ldrh	r2, [r2, #4]
   1dfae:	8032      	strh	r2, [r6, #0]
   1dfb0:	b293      	uxth	r3, r2
   1dfb2:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1dfb6:	6982      	ldr	r2, [r0, #24]
   1dfb8:	011b      	lsls	r3, r3, #4
   1dfba:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1dfbe:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1dfc2:	bb5b      	cbnz	r3, 1e01c <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1dfc4:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1dfc8:	1c62      	adds	r2, r4, #1
   1dfca:	bf09      	itett	eq
   1dfcc:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1dfd0:	ea09 0404 	andne.w	r4, r9, r4
   1dfd4:	681c      	ldreq	r4, [r3, #0]
   1dfd6:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1dfda:	4621      	mov	r1, r4
   1dfdc:	4640      	mov	r0, r8
   1dfde:	f7ff feee 	bl	1ddbe <metal_io_phys>
   1dfe2:	4581      	cmp	r9, r0
   1dfe4:	d009      	beq.n	1dffa <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1dfe6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1dfea:	3301      	adds	r3, #1
   1dfec:	441c      	add	r4, r3
		} while (offset < io->size);
   1dfee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dff2:	429c      	cmp	r4, r3
   1dff4:	d3f1      	bcc.n	1dfda <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1dff6:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dffa:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1dffe:	1c43      	adds	r3, r0, #1
   1e000:	d011      	beq.n	1e026 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e002:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e006:	42a3      	cmp	r3, r4
   1e008:	d90d      	bls.n	1e026 <virtqueue_get_available_buffer+0xa0>
		? (void *)((uintptr_t)io->virt + offset)
   1e00a:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1e00c:	8832      	ldrh	r2, [r6, #0]
   1e00e:	69ab      	ldr	r3, [r5, #24]
   1e010:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1e014:	689b      	ldr	r3, [r3, #8]
   1e016:	603b      	str	r3, [r7, #0]
}
   1e018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1e01c:	4649      	mov	r1, r9
   1e01e:	4640      	mov	r0, r8
   1e020:	4798      	blx	r3
   1e022:	4604      	mov	r4, r0
   1e024:	e7e9      	b.n	1dffa <virtqueue_get_available_buffer+0x74>
		: NULL);
   1e026:	2000      	movs	r0, #0
   1e028:	e7f0      	b.n	1e00c <virtqueue_get_available_buffer+0x86>
		return NULL;
   1e02a:	2000      	movs	r0, #0
   1e02c:	e7f4      	b.n	1e018 <virtqueue_get_available_buffer+0x92>

0001e02e <virtqueue_disable_cb>:
{
   1e02e:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e030:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e032:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e034:	6912      	ldr	r2, [r2, #16]
   1e036:	0092      	lsls	r2, r2, #2
   1e038:	d517      	bpl.n	1e06a <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e03a:	b943      	cbnz	r3, 1e04e <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1e03c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   1e03e:	69c2      	ldr	r2, [r0, #28]
   1e040:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1e042:	8944      	ldrh	r4, [r0, #10]
   1e044:	3b01      	subs	r3, #1
   1e046:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   1e048:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1e04c:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e04e:	6803      	ldr	r3, [r0, #0]
   1e050:	699b      	ldr	r3, [r3, #24]
   1e052:	2b01      	cmp	r3, #1
   1e054:	d108      	bne.n	1e068 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1e056:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   1e058:	6a02      	ldr	r2, [r0, #32]
   1e05a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1e05c:	8940      	ldrh	r0, [r0, #10]
   1e05e:	3b01      	subs	r3, #1
   1e060:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   1e062:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1e066:	8093      	strh	r3, [r2, #4]
}
   1e068:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e06a:	b923      	cbnz	r3, 1e076 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1e06c:	69c2      	ldr	r2, [r0, #28]
   1e06e:	8813      	ldrh	r3, [r2, #0]
   1e070:	f043 0301 	orr.w	r3, r3, #1
   1e074:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e076:	6803      	ldr	r3, [r0, #0]
   1e078:	699b      	ldr	r3, [r3, #24]
   1e07a:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1e07c:	bf01      	itttt	eq
   1e07e:	6a02      	ldreq	r2, [r0, #32]
   1e080:	8813      	ldrheq	r3, [r2, #0]
   1e082:	f043 0301 	orreq.w	r3, r3, #1
   1e086:	8013      	strheq	r3, [r2, #0]
}
   1e088:	e7ee      	b.n	1e068 <virtqueue_disable_cb+0x3a>

0001e08a <virtqueue_kick>:
{
   1e08a:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1e08c:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e090:	6803      	ldr	r3, [r0, #0]
{
   1e092:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e094:	691a      	ldr	r2, [r3, #16]
   1e096:	699b      	ldr	r3, [r3, #24]
   1e098:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1e09c:	d01a      	beq.n	1e0d4 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e09e:	b97b      	cbnz	r3, 1e0c0 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   1e0a0:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   1e0a2:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   1e0a4:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1e0a6:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1e0a8:	3b01      	subs	r3, #1
   1e0aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   1e0ae:	8892      	ldrh	r2, [r2, #4]
   1e0b0:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   1e0b2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1e0b4:	b29b      	uxth	r3, r3
   1e0b6:	429a      	cmp	r2, r3
   1e0b8:	d814      	bhi.n	1e0e4 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   1e0ba:	2300      	movs	r3, #0
   1e0bc:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1e0be:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e0c0:	2b01      	cmp	r3, #1
   1e0c2:	d1fa      	bne.n	1e0ba <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1e0c4:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1e0c6:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   1e0c8:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1e0ca:	6941      	ldr	r1, [r0, #20]
   1e0cc:	3b01      	subs	r3, #1
   1e0ce:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1e0d2:	e7ec      	b.n	1e0ae <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e0d4:	b963      	cbnz	r3, 1e0f0 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   1e0d6:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   1e0d8:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1e0da:	43db      	mvns	r3, r3
   1e0dc:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1e0e0:	2b00      	cmp	r3, #0
   1e0e2:	d0ea      	beq.n	1e0ba <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1e0e4:	6923      	ldr	r3, [r4, #16]
   1e0e6:	2b00      	cmp	r3, #0
   1e0e8:	d0e7      	beq.n	1e0ba <virtqueue_kick+0x30>
		vq->notify(vq);
   1e0ea:	4620      	mov	r0, r4
   1e0ec:	4798      	blx	r3
   1e0ee:	e7e4      	b.n	1e0ba <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e0f0:	2b01      	cmp	r3, #1
   1e0f2:	d1e2      	bne.n	1e0ba <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1e0f4:	69c3      	ldr	r3, [r0, #28]
   1e0f6:	e7ef      	b.n	1e0d8 <virtqueue_kick+0x4e>

0001e0f8 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e0f8:	69c3      	ldr	r3, [r0, #28]
   1e0fa:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   1e0fc:	8859      	ldrh	r1, [r3, #2]
   1e0fe:	4291      	cmp	r1, r2
   1e100:	d00a      	beq.n	1e118 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1e102:	8941      	ldrh	r1, [r0, #10]
   1e104:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1e106:	400a      	ands	r2, r1
   1e108:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1e10c:	889a      	ldrh	r2, [r3, #4]
   1e10e:	6983      	ldr	r3, [r0, #24]
   1e110:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1e114:	6898      	ldr	r0, [r3, #8]
	return len;
   1e116:	4770      	bx	lr
		return 0;
   1e118:	2000      	movs	r0, #0
}
   1e11a:	4770      	bx	lr

0001e11c <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1e11c:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1e120:	68c3      	ldr	r3, [r0, #12]
   1e122:	b103      	cbz	r3, 1e126 <virtqueue_notification+0xa>
		vq->callback(vq);
   1e124:	4718      	bx	r3
}
   1e126:	4770      	bx	lr

0001e128 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1e128:	f04f 32ff 	mov.w	r2, #4294967295
   1e12c:	f04f 33ff 	mov.w	r3, #4294967295
   1e130:	f7f9 be14 	b.w	17d5c <z_impl_k_sem_take>

0001e134 <rpmsg_unregister_endpoint>:
{
   1e134:	b570      	push	{r4, r5, r6, lr}
   1e136:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1e138:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1e13a:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1e13e:	4630      	mov	r0, r6
   1e140:	f7ff fff2 	bl	1e128 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1e144:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e146:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   1e14a:	2b7f      	cmp	r3, #127	; 0x7f
   1e14c:	d80b      	bhi.n	1e166 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e14e:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1e150:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1e152:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e154:	f003 031f 	and.w	r3, r3, #31
   1e158:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1e15a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1e15e:	ea23 0302 	bic.w	r3, r3, r2
   1e162:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   1e166:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1e16a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1e16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   1e16e:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1e172:	6011      	str	r1, [r2, #0]
	node->next = node;
   1e174:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1e178:	2300      	movs	r3, #0
   1e17a:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1e17c:	4630      	mov	r0, r6
}
   1e17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e182:	f7f9 bda7 	b.w	17cd4 <z_impl_k_sem_give>

0001e186 <rpmsg_send_ns_message>:
{
   1e186:	b510      	push	{r4, lr}
   1e188:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   1e18a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1e18c:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1e18e:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1e190:	2220      	movs	r2, #32
   1e192:	4601      	mov	r1, r0
   1e194:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1e196:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1e198:	f7fe f804 	bl	1c1a4 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1e19c:	2328      	movs	r3, #40	; 0x28
   1e19e:	2201      	movs	r2, #1
   1e1a0:	e9cd 3200 	strd	r3, r2, [sp]
   1e1a4:	4620      	mov	r0, r4
   1e1a6:	2235      	movs	r2, #53	; 0x35
   1e1a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e1aa:	ab02      	add	r3, sp, #8
   1e1ac:	f7f8 fa9e 	bl	166ec <rpmsg_send_offchannel_raw>
}
   1e1b0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1e1b4:	b00c      	add	sp, #48	; 0x30
   1e1b6:	bd10      	pop	{r4, pc}

0001e1b8 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1e1b8:	b128      	cbz	r0, 1e1c6 <rpmsg_hold_rx_buffer+0xe>
   1e1ba:	6a00      	ldr	r0, [r0, #32]
   1e1bc:	b118      	cbz	r0, 1e1c6 <rpmsg_hold_rx_buffer+0xe>
   1e1be:	b111      	cbz	r1, 1e1c6 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   1e1c0:	6f83      	ldr	r3, [r0, #120]	; 0x78
   1e1c2:	b103      	cbz	r3, 1e1c6 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1e1c4:	4718      	bx	r3
}
   1e1c6:	4770      	bx	lr

0001e1c8 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1e1c8:	b128      	cbz	r0, 1e1d6 <rpmsg_release_rx_buffer+0xe>
   1e1ca:	6a00      	ldr	r0, [r0, #32]
   1e1cc:	b118      	cbz	r0, 1e1d6 <rpmsg_release_rx_buffer+0xe>
   1e1ce:	b111      	cbz	r1, 1e1d6 <rpmsg_release_rx_buffer+0xe>
	if (rdev->ops.release_rx_buffer)
   1e1d0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1e1d2:	b103      	cbz	r3, 1e1d6 <rpmsg_release_rx_buffer+0xe>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1e1d4:	4718      	bx	r3
}
   1e1d6:	4770      	bx	lr

0001e1d8 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   1e1d8:	b130      	cbz	r0, 1e1e8 <rpmsg_get_tx_payload_buffer+0x10>
   1e1da:	6a00      	ldr	r0, [r0, #32]
   1e1dc:	b120      	cbz	r0, 1e1e8 <rpmsg_get_tx_payload_buffer+0x10>
   1e1de:	b119      	cbz	r1, 1e1e8 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   1e1e0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1e1e4:	b103      	cbz	r3, 1e1e8 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1e1e6:	4718      	bx	r3
}
   1e1e8:	2000      	movs	r0, #0
   1e1ea:	4770      	bx	lr

0001e1ec <rpmsg_get_endpoint>:
{
   1e1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e1f0:	4606      	mov	r6, r0
   1e1f2:	4688      	mov	r8, r1
   1e1f4:	4617      	mov	r7, r2
   1e1f6:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1e1f8:	6804      	ldr	r4, [r0, #0]
   1e1fa:	42a6      	cmp	r6, r4
   1e1fc:	d101      	bne.n	1e202 <rpmsg_get_endpoint+0x16>
	return NULL;
   1e1fe:	2500      	movs	r5, #0
   1e200:	e023      	b.n	1e24a <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e202:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e204:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e208:	d002      	beq.n	1e210 <rpmsg_get_endpoint+0x24>
   1e20a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e20c:	42bb      	cmp	r3, r7
   1e20e:	d01c      	beq.n	1e24a <rpmsg_get_endpoint+0x5e>
		if (name)
   1e210:	f1b8 0f00 	cmp.w	r8, #0
   1e214:	d101      	bne.n	1e21a <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   1e216:	6824      	ldr	r4, [r4, #0]
   1e218:	e7ef      	b.n	1e1fa <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   1e21a:	2220      	movs	r2, #32
   1e21c:	4641      	mov	r1, r8
   1e21e:	4628      	mov	r0, r5
   1e220:	f7fd fff0 	bl	1c204 <strncmp>
		if (!name || !name_match)
   1e224:	2800      	cmp	r0, #0
   1e226:	d1f6      	bne.n	1e216 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1e228:	f1b9 3fff 	cmp.w	r9, #4294967295
   1e22c:	d002      	beq.n	1e234 <rpmsg_get_endpoint+0x48>
   1e22e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e230:	454b      	cmp	r3, r9
   1e232:	d00a      	beq.n	1e24a <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1e234:	1c7b      	adds	r3, r7, #1
   1e236:	d00b      	beq.n	1e250 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   1e238:	6824      	ldr	r4, [r4, #0]
   1e23a:	42b4      	cmp	r4, r6
   1e23c:	d0df      	beq.n	1e1fe <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e23e:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e242:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e246:	429f      	cmp	r7, r3
   1e248:	d1e7      	bne.n	1e21a <rpmsg_get_endpoint+0x2e>
}
   1e24a:	4628      	mov	r0, r5
   1e24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1e250:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e252:	3301      	adds	r3, #1
   1e254:	d0f9      	beq.n	1e24a <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   1e256:	6824      	ldr	r4, [r4, #0]
   1e258:	42b4      	cmp	r4, r6
   1e25a:	d0d0      	beq.n	1e1fe <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e25c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e260:	e7d6      	b.n	1e210 <rpmsg_get_endpoint+0x24>

0001e262 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1e262:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1e264:	4604      	mov	r4, r0
   1e266:	b190      	cbz	r0, 1e28e <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1e268:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1e26a:	b183      	cbz	r3, 1e28e <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1e26c:	7802      	ldrb	r2, [r0, #0]
   1e26e:	b14a      	cbz	r2, 1e284 <rpmsg_destroy_ept+0x22>
   1e270:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   1e274:	b133      	cbz	r3, 1e284 <rpmsg_destroy_ept+0x22>
   1e276:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e27c:	d302      	bcc.n	1e284 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1e27e:	2101      	movs	r1, #1
   1e280:	f7ff ff81 	bl	1e186 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1e284:	4620      	mov	r0, r4
}
   1e286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1e28a:	f7ff bf53 	b.w	1e134 <rpmsg_unregister_endpoint>
}
   1e28e:	bd10      	pop	{r4, pc}

0001e290 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1e290:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1e294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e298:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1e29c:	4770      	bx	lr

0001e29e <rpmsg_virtio_tx_callback>:
}
   1e29e:	4770      	bx	lr

0001e2a0 <k_sem_give>:
   1e2a0:	f7f9 bd18 	b.w	17cd4 <z_impl_k_sem_give>

0001e2a4 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1e2a4:	f04f 32ff 	mov.w	r2, #4294967295
   1e2a8:	f04f 33ff 	mov.w	r3, #4294967295
   1e2ac:	f7f9 bd56 	b.w	17d5c <z_impl_k_sem_take>

0001e2b0 <rpmsg_virtio_ns_callback>:
{
   1e2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   1e2b4:	6a06      	ldr	r6, [r0, #32]
	if (len != sizeof(*ns_msg))
   1e2b6:	2a28      	cmp	r2, #40	; 0x28
{
   1e2b8:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   1e2ba:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
{
   1e2be:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   1e2c0:	d12b      	bne.n	1e31a <rpmsg_virtio_ns_callback+0x6a>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e2c2:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e2c4:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e2c6:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   1e2c8:	42a1      	cmp	r1, r4
   1e2ca:	bf28      	it	cs
   1e2cc:	f04f 31ff 	movcs.w	r1, #4294967295
   1e2d0:	2320      	movs	r3, #32
   1e2d2:	466a      	mov	r2, sp
   1e2d4:	f7ff fcca 	bl	1dc6c <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1e2d8:	f106 0558 	add.w	r5, r6, #88	; 0x58
	dest = ns_msg->addr;
   1e2dc:	f8d7 8020 	ldr.w	r8, [r7, #32]
   1e2e0:	4628      	mov	r0, r5
   1e2e2:	f7ff ffdf 	bl	1e2a4 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e2e6:	4643      	mov	r3, r8
   1e2e8:	f04f 32ff 	mov.w	r2, #4294967295
   1e2ec:	4669      	mov	r1, sp
   1e2ee:	4630      	mov	r0, r6
   1e2f0:	f7ff ff7c 	bl	1e1ec <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e2f6:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e2f8:	07db      	lsls	r3, r3, #31
   1e2fa:	d512      	bpl.n	1e322 <rpmsg_virtio_ns_callback+0x72>
		if (_ept)
   1e2fc:	b918      	cbnz	r0, 1e306 <rpmsg_virtio_ns_callback+0x56>
   1e2fe:	4628      	mov	r0, r5
   1e300:	f7ff ffce 	bl	1e2a0 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1e304:	e009      	b.n	1e31a <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1e306:	f04f 33ff 	mov.w	r3, #4294967295
   1e30a:	6283      	str	r3, [r0, #40]	; 0x28
   1e30c:	4628      	mov	r0, r5
   1e30e:	f7ff ffc7 	bl	1e2a0 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1e312:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e314:	b10b      	cbz	r3, 1e31a <rpmsg_virtio_ns_callback+0x6a>
			_ept->ns_unbind_cb(_ept);
   1e316:	4620      	mov	r0, r4
   1e318:	4798      	blx	r3
}
   1e31a:	2000      	movs	r0, #0
   1e31c:	b008      	add	sp, #32
   1e31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_ept) {
   1e322:	b950      	cbnz	r0, 1e33a <rpmsg_virtio_ns_callback+0x8a>
   1e324:	4628      	mov	r0, r5
   1e326:	f7ff ffbb 	bl	1e2a0 <k_sem_give>
			if (rdev->ns_bind_cb)
   1e32a:	6f33      	ldr	r3, [r6, #112]	; 0x70
   1e32c:	2b00      	cmp	r3, #0
   1e32e:	d0f4      	beq.n	1e31a <rpmsg_virtio_ns_callback+0x6a>
				rdev->ns_bind_cb(rdev, name, dest);
   1e330:	4642      	mov	r2, r8
   1e332:	4669      	mov	r1, sp
   1e334:	4630      	mov	r0, r6
   1e336:	4798      	blx	r3
   1e338:	e7ef      	b.n	1e31a <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = dest;
   1e33a:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1e33e:	e7de      	b.n	1e2fe <rpmsg_virtio_ns_callback+0x4e>

0001e340 <rpmsg_virtio_get_rx_buffer>:
{
   1e340:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1e342:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
   1e346:	4613      	mov	r3, r2
   1e348:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   1e34a:	b925      	cbnz	r5, 1e356 <rpmsg_virtio_get_rx_buffer+0x16>
}
   1e34c:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1e34e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1e352:	f7ff bdd9 	b.w	1df08 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1e356:	2d01      	cmp	r5, #1
   1e358:	d106      	bne.n	1e368 <rpmsg_virtio_get_rx_buffer+0x28>
}
   1e35a:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1e35c:	460a      	mov	r2, r1
   1e35e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1e362:	4619      	mov	r1, r3
   1e364:	f7ff be0f 	b.w	1df86 <virtqueue_get_available_buffer>
}
   1e368:	2000      	movs	r0, #0
   1e36a:	bc30      	pop	{r4, r5}
   1e36c:	4770      	bx	lr

0001e36e <rpmsg_virtio_return_buffer>:
{
   1e36e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e370:	460c      	mov	r4, r1
   1e372:	4619      	mov	r1, r3
   1e374:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1e378:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1e37a:	b95d      	cbnz	r5, 1e394 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1e37c:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1e37e:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1e382:	2301      	movs	r3, #1
   1e384:	462a      	mov	r2, r5
   1e386:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1e38a:	a902      	add	r1, sp, #8
   1e38c:	f7ff fd60 	bl	1de50 <virtqueue_add_buffer>
}
   1e390:	b004      	add	sp, #16
   1e392:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   1e394:	2d01      	cmp	r5, #1
   1e396:	d1fb      	bne.n	1e390 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1e398:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
}
   1e39c:	b004      	add	sp, #16
   1e39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1e3a2:	f7f8 b987 	b.w	166b4 <virtqueue_add_consumed_buffer>

0001e3a6 <rpmsg_virtio_release_rx_buffer>:
{
   1e3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3a8:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1e3aa:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1e3ae:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1e3b2:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1e3b4:	b2b6      	uxth	r6, r6
{
   1e3b6:	460d      	mov	r5, r1
   1e3b8:	f7ff ff74 	bl	1e2a4 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1e3bc:	4631      	mov	r1, r6
   1e3be:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1e3c2:	f7ff fddb 	bl	1df7c <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1e3c6:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1e3c8:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1e3ca:	f1a5 0110 	sub.w	r1, r5, #16
   1e3ce:	4620      	mov	r0, r4
   1e3d0:	f7ff ffcd 	bl	1e36e <rpmsg_virtio_return_buffer>
   1e3d4:	4638      	mov	r0, r7
}
   1e3d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e3da:	f7ff bf61 	b.w	1e2a0 <k_sem_give>

0001e3de <rpmsg_virtio_shm_pool_get_buffer>:
{
   1e3de:	4603      	mov	r3, r0
   1e3e0:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1e3e2:	6842      	ldr	r2, [r0, #4]
   1e3e4:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1e3e6:	bf29      	itett	cs
   1e3e8:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1e3ea:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1e3ec:	1a84      	subcs	r4, r0, r2
   1e3ee:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1e3f0:	bf22      	ittt	cs
   1e3f2:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1e3f4:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1e3f6:	605a      	strcs	r2, [r3, #4]
}
   1e3f8:	bd10      	pop	{r4, pc}

0001e3fa <rpmsg_virtio_get_tx_payload_buffer>:
{
   1e3fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e3fe:	4605      	mov	r5, r0
   1e400:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1e404:	460f      	mov	r7, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1e406:	6a03      	ldr	r3, [r0, #32]
   1e408:	4616      	mov	r6, r2
   1e40a:	681b      	ldr	r3, [r3, #0]
   1e40c:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1e40e:	0743      	lsls	r3, r0, #29
   1e410:	d403      	bmi.n	1e41a <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1e412:	2000      	movs	r0, #0
}
   1e414:	b003      	add	sp, #12
   1e416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1e41a:	f643 2398 	movw	r3, #15000	; 0x3a98
   1e41e:	2e00      	cmp	r6, #0
   1e420:	bf18      	it	ne
   1e422:	461e      	movne	r6, r3
		metal_mutex_acquire(&rdev->lock);
   1e424:	f105 0858 	add.w	r8, r5, #88	; 0x58
   1e428:	4640      	mov	r0, r8
   1e42a:	f7ff ff3b 	bl	1e2a4 <__metal_mutex_acquire>
	return rvdev->vdev->role;
   1e42e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1e432:	f8d3 9018 	ldr.w	r9, [r3, #24]
	if (role == RPMSG_HOST) {
   1e436:	f1b9 0f00 	cmp.w	r9, #0
   1e43a:	d135      	bne.n	1e4a8 <rpmsg_virtio_get_tx_payload_buffer+0xae>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1e43c:	4639      	mov	r1, r7
   1e43e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1e442:	f10d 0206 	add.w	r2, sp, #6
   1e446:	f7ff fd5f 	bl	1df08 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1e44a:	4604      	mov	r4, r0
   1e44c:	b158      	cbz	r0, 1e466 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
   1e44e:	4640      	mov	r0, r8
   1e450:	f7ff ff26 	bl	1e2a0 <k_sem_give>
	rp_hdr->reserved = idx;
   1e454:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1e458:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1e45c:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1e45e:	683b      	ldr	r3, [r7, #0]
   1e460:	3b10      	subs	r3, #16
   1e462:	603b      	str	r3, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1e464:	e7d6      	b.n	1e414 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (!data && rvdev->svq->vq_free_cnt) {
   1e466:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1e46a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1e46c:	b953      	cbnz	r3, 1e484 <rpmsg_virtio_get_tx_payload_buffer+0x8a>
   1e46e:	4640      	mov	r0, r8
   1e470:	f7ff ff16 	bl	1e2a0 <k_sem_give>
		if (rp_hdr || !tick_count)
   1e474:	2e00      	cmp	r6, #0
   1e476:	d0cc      	beq.n	1e412 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1e478:	2021      	movs	r0, #33	; 0x21
   1e47a:	2100      	movs	r1, #0
   1e47c:	f7fb fb1e 	bl	19abc <z_impl_k_sleep>
		tick_count--;
   1e480:	3e01      	subs	r6, #1
		metal_mutex_acquire(&rdev->lock);
   1e482:	e7d1      	b.n	1e428 <rpmsg_virtio_get_tx_payload_buffer+0x2e>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1e484:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   1e488:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1e48c:	f7ff ffa7 	bl	1e3de <rpmsg_virtio_shm_pool_get_buffer>
   1e490:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1e492:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
			*idx = 0;
   1e496:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1e49a:	603b      	str	r3, [r7, #0]
   1e49c:	4640      	mov	r0, r8
   1e49e:	f7ff feff 	bl	1e2a0 <k_sem_give>
		if (rp_hdr || !tick_count)
   1e4a2:	2c00      	cmp	r4, #0
   1e4a4:	d0e6      	beq.n	1e474 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
   1e4a6:	e7d5      	b.n	1e454 <rpmsg_virtio_get_tx_payload_buffer+0x5a>
	if (role == RPMSG_REMOTE) {
   1e4a8:	f1b9 0f01 	cmp.w	r9, #1
   1e4ac:	d1df      	bne.n	1e46e <rpmsg_virtio_get_tx_payload_buffer+0x74>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1e4ae:	463a      	mov	r2, r7
   1e4b0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1e4b4:	f10d 0106 	add.w	r1, sp, #6
   1e4b8:	f7ff fd65 	bl	1df86 <virtqueue_get_available_buffer>
   1e4bc:	4604      	mov	r4, r0
   1e4be:	e7ed      	b.n	1e49c <rpmsg_virtio_get_tx_payload_buffer+0xa2>

0001e4c0 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1e4c0:	b110      	cbz	r0, 1e4c8 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1e4c2:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1e4c6:	6001      	str	r1, [r0, #0]
}
   1e4c8:	4770      	bx	lr

0001e4ca <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1e4ca:	b510      	push	{r4, lr}
   1e4cc:	4604      	mov	r4, r0
	return list->next == list;
   1e4ce:	6820      	ldr	r0, [r4, #0]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
   1e4d0:	4284      	cmp	r4, r0
   1e4d2:	d103      	bne.n	1e4dc <rpmsg_deinit_vdev+0x12>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
	}

	rvdev->rvq = 0;
   1e4d4:	2300      	movs	r3, #0
	rvdev->svq = 0;
   1e4d6:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98

	metal_mutex_deinit(&rdev->lock);
}
   1e4da:	bd10      	pop	{r4, pc}
		rpmsg_destroy_ept(ept);
   1e4dc:	3834      	subs	r0, #52	; 0x34
   1e4de:	f7ff fec0 	bl	1e262 <rpmsg_destroy_ept>
   1e4e2:	e7f4      	b.n	1e4ce <rpmsg_deinit_vdev+0x4>

0001e4e4 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1e4e4:	4770      	bx	lr

0001e4e6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1e4e6:	b140      	cbz	r0, 1e4fa <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1e4e8:	68c3      	ldr	r3, [r0, #12]
   1e4ea:	7858      	ldrb	r0, [r3, #1]
   1e4ec:	f010 0001 	ands.w	r0, r0, #1
   1e4f0:	bf1e      	ittt	ne
   1e4f2:	7818      	ldrbne	r0, [r3, #0]
   1e4f4:	fab0 f080 	clzne	r0, r0
   1e4f8:	0940      	lsrne	r0, r0, #5
}
   1e4fa:	4770      	bx	lr

0001e4fc <z_early_memset>:
	(void) memset(dst, c, n);
   1e4fc:	f7fd beb0 	b.w	1c260 <memset>

0001e500 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1e500:	f7fd bea3 	b.w	1c24a <memcpy>

0001e504 <k_heap_init>:
{
   1e504:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1e506:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1e50a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1e50e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1e510:	f7ea bda8 	b.w	9064 <sys_heap_init>

0001e514 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e514:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   1e518:	4313      	orrs	r3, r2
   1e51a:	f013 0303 	ands.w	r3, r3, #3
   1e51e:	d10c      	bne.n	1e53a <create_free_list+0x26>
	slab->free_list = NULL;
   1e520:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e522:	68c1      	ldr	r1, [r0, #12]
   1e524:	4299      	cmp	r1, r3
   1e526:	d801      	bhi.n	1e52c <create_free_list+0x18>
	return 0;
   1e528:	2000      	movs	r0, #0
   1e52a:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1e52c:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e52e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1e530:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1e532:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   1e534:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   1e536:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1e538:	e7f3      	b.n	1e522 <create_free_list+0xe>
		return -EINVAL;
   1e53a:	f06f 0015 	mvn.w	r0, #21
}
   1e53e:	4770      	bx	lr

0001e540 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e540:	f3ef 8005 	mrs	r0, IPSR
}
   1e544:	3800      	subs	r0, #0
   1e546:	bf18      	it	ne
   1e548:	2001      	movne	r0, #1
   1e54a:	4770      	bx	lr

0001e54c <z_impl_k_thread_name_set>:
}
   1e54c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1e550:	4770      	bx	lr

0001e552 <k_thread_name_get>:
}
   1e552:	2000      	movs	r0, #0
   1e554:	4770      	bx	lr

0001e556 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1e556:	f7fa bc11 	b.w	18d7c <z_sched_start>

0001e55a <z_pm_save_idle_exit>:
{
   1e55a:	b508      	push	{r3, lr}
	pm_system_resume();
   1e55c:	f7ed faec 	bl	bb38 <pm_system_resume>
}
   1e560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1e564:	f7ff b95a 	b.w	1d81c <sys_clock_idle_exit>

0001e568 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1e568:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e56c:	428b      	cmp	r3, r1
   1e56e:	d001      	beq.n	1e574 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1e570:	f7fa bf06 	b.w	19380 <z_set_prio>
}
   1e574:	2000      	movs	r0, #0
   1e576:	4770      	bx	lr

0001e578 <z_impl_k_mutex_init>:
{
   1e578:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1e57a:	2000      	movs	r0, #0
   1e57c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1e580:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1e584:	4770      	bx	lr

0001e586 <z_queue_node_peek>:
{
   1e586:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1e588:	4604      	mov	r4, r0
   1e58a:	b130      	cbz	r0, 1e59a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e58c:	6802      	ldr	r2, [r0, #0]
   1e58e:	0793      	lsls	r3, r2, #30
   1e590:	d003      	beq.n	1e59a <z_queue_node_peek+0x14>
		ret = anode->data;
   1e592:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e594:	b109      	cbz	r1, 1e59a <z_queue_node_peek+0x14>
			k_free(anode);
   1e596:	f000 f9bc 	bl	1e912 <k_free>
}
   1e59a:	4620      	mov	r0, r4
   1e59c:	bd10      	pop	{r4, pc}

0001e59e <z_impl_k_queue_init>:
	list->head = NULL;
   1e59e:	2300      	movs	r3, #0
	list->tail = NULL;
   1e5a0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1e5a4:	6083      	str	r3, [r0, #8]
   1e5a6:	f100 030c 	add.w	r3, r0, #12
   1e5aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1e5ae:	f100 0314 	add.w	r3, r0, #20
   1e5b2:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1e5b6:	4770      	bx	lr

0001e5b8 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1e5b8:	2301      	movs	r3, #1
{
   1e5ba:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1e5bc:	9300      	str	r3, [sp, #0]
   1e5be:	2300      	movs	r3, #0
{
   1e5c0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1e5c2:	4619      	mov	r1, r3
   1e5c4:	f7f9 fa24 	bl	17a10 <queue_insert>
}
   1e5c8:	b003      	add	sp, #12
   1e5ca:	f85d fb04 	ldr.w	pc, [sp], #4

0001e5ce <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1e5ce:	2300      	movs	r3, #0
{
   1e5d0:	b507      	push	{r0, r1, r2, lr}
   1e5d2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1e5d4:	9300      	str	r3, [sp, #0]
   1e5d6:	4619      	mov	r1, r3
   1e5d8:	f7f9 fa1a 	bl	17a10 <queue_insert>
}
   1e5dc:	b003      	add	sp, #12
   1e5de:	f85d fb04 	ldr.w	pc, [sp], #4

0001e5e2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1e5e2:	b15a      	cbz	r2, 1e5fc <z_impl_k_sem_init+0x1a>
   1e5e4:	428a      	cmp	r2, r1
   1e5e6:	d309      	bcc.n	1e5fc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e5e8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e5ec:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1e5f0:	e9c0 0000 	strd	r0, r0, [r0]
   1e5f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e5f8:	2000      	movs	r0, #0
   1e5fa:	4770      	bx	lr
		return -EINVAL;
   1e5fc:	f06f 0015 	mvn.w	r0, #21
}
   1e600:	4770      	bx	lr

0001e602 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1e602:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1e604:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1e606:	408b      	lsls	r3, r1
   1e608:	ea22 0303 	bic.w	r3, r2, r3
   1e60c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1e60e:	fa22 f001 	lsr.w	r0, r2, r1
}
   1e612:	f000 0001 	and.w	r0, r0, #1
   1e616:	4770      	bx	lr

0001e618 <unschedule_locked>:
{
   1e618:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e61a:	2103      	movs	r1, #3
{
   1e61c:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e61e:	300c      	adds	r0, #12
   1e620:	f7ff ffef 	bl	1e602 <flag_test_and_clear>
   1e624:	4604      	mov	r4, r0
   1e626:	b118      	cbz	r0, 1e630 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1e628:	f105 0010 	add.w	r0, r5, #16
   1e62c:	f7fb fce6 	bl	19ffc <z_abort_timeout>
}
   1e630:	4620      	mov	r0, r4
   1e632:	bd38      	pop	{r3, r4, r5, pc}

0001e634 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1e634:	b120      	cbz	r0, 1e640 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1e636:	2200      	movs	r2, #0
   1e638:	3090      	adds	r0, #144	; 0x90
   1e63a:	4611      	mov	r1, r2
   1e63c:	f7fb bb40 	b.w	19cc0 <z_sched_wake>
}
   1e640:	4770      	bx	lr

0001e642 <cancel_async_locked>:
{
   1e642:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1e644:	68c3      	ldr	r3, [r0, #12]
{
   1e646:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e648:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1e64c:	079b      	lsls	r3, r3, #30
   1e64e:	d416      	bmi.n	1e67e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1e650:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1e652:	2102      	movs	r1, #2
   1e654:	300c      	adds	r0, #12
   1e656:	f7ff ffd4 	bl	1e602 <flag_test_and_clear>
   1e65a:	b180      	cbz	r0, 1e67e <cancel_async_locked+0x3c>
	return list->head;
   1e65c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e660:	b16a      	cbz	r2, 1e67e <cancel_async_locked+0x3c>
   1e662:	4294      	cmp	r4, r2
   1e664:	d11d      	bne.n	1e6a2 <cancel_async_locked+0x60>
	return node->next;
   1e666:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e668:	b99e      	cbnz	r6, 1e692 <cancel_async_locked+0x50>
   1e66a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   1e66e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   1e672:	429c      	cmp	r4, r3
   1e674:	d101      	bne.n	1e67a <cancel_async_locked+0x38>
	list->tail = node;
   1e676:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   1e67a:	2300      	movs	r3, #0
   1e67c:	6023      	str	r3, [r4, #0]
	return *flagp;
   1e67e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1e680:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1e684:	bf1e      	ittt	ne
   1e686:	f043 0302 	orrne.w	r3, r3, #2
   1e68a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1e68c:	f040 0002 	orrne.w	r0, r0, #2
}
   1e690:	bd70      	pop	{r4, r5, r6, pc}
   1e692:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e694:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   1e698:	4294      	cmp	r4, r2
	list->tail = node;
   1e69a:	bf08      	it	eq
   1e69c:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   1e6a0:	e7eb      	b.n	1e67a <cancel_async_locked+0x38>
	return node->next;
   1e6a2:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e6a4:	6812      	ldr	r2, [r2, #0]
   1e6a6:	e7db      	b.n	1e660 <cancel_async_locked+0x1e>

0001e6a8 <k_work_submit_to_queue>:
{
   1e6a8:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1e6aa:	f7f9 fe27 	bl	182fc <z_work_submit_to_queue>
	if (ret > 0) {
   1e6ae:	1e04      	subs	r4, r0, #0
   1e6b0:	dd09      	ble.n	1e6c6 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1e6b2:	f04f 0320 	mov.w	r3, #32
   1e6b6:	f3ef 8011 	mrs	r0, BASEPRI
   1e6ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6be:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e6c2:	f000 f80d 	bl	1e6e0 <z_reschedule_irqlock>
}
   1e6c6:	4620      	mov	r0, r4
   1e6c8:	bd10      	pop	{r4, pc}

0001e6ca <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1e6ca:	f7f9 bdd1 	b.w	18270 <k_work_busy_get>

0001e6ce <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1e6ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1e6d2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1e6d6:	4283      	cmp	r3, r0
		return b2 - b1;
   1e6d8:	bf14      	ite	ne
   1e6da:	1ac0      	subne	r0, r0, r3
	return 0;
   1e6dc:	2000      	moveq	r0, #0
}
   1e6de:	4770      	bx	lr

0001e6e0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e6e0:	4603      	mov	r3, r0
   1e6e2:	b920      	cbnz	r0, 1e6ee <z_reschedule_irqlock+0xe>
   1e6e4:	f3ef 8205 	mrs	r2, IPSR
   1e6e8:	b90a      	cbnz	r2, 1e6ee <z_reschedule_irqlock+0xe>
   1e6ea:	f7ed bdd5 	b.w	c298 <arch_swap>
	__asm__ volatile(
   1e6ee:	f383 8811 	msr	BASEPRI, r3
   1e6f2:	f3bf 8f6f 	isb	sy
}
   1e6f6:	4770      	bx	lr

0001e6f8 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e6f8:	f04f 0320 	mov.w	r3, #32
   1e6fc:	f3ef 8011 	mrs	r0, BASEPRI
   1e700:	f383 8812 	msr	BASEPRI_MAX, r3
   1e704:	f3bf 8f6f 	isb	sy
   1e708:	f7ff bfea 	b.w	1e6e0 <z_reschedule_irqlock>

0001e70c <z_unpend_all>:
{
   1e70c:	b538      	push	{r3, r4, r5, lr}
   1e70e:	4605      	mov	r5, r0
	int need_sched = 0;
   1e710:	2000      	movs	r0, #0
	return list->head == list;
   1e712:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e714:	42a5      	cmp	r5, r4
   1e716:	d000      	beq.n	1e71a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e718:	b904      	cbnz	r4, 1e71c <z_unpend_all+0x10>
}
   1e71a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e71c:	4620      	mov	r0, r4
   1e71e:	f7fa ff49 	bl	195b4 <z_unpend_thread>
		z_ready_thread(thread);
   1e722:	4620      	mov	r0, r4
   1e724:	f7fa fa5c 	bl	18be0 <z_ready_thread>
		need_sched = 1;
   1e728:	2001      	movs	r0, #1
   1e72a:	e7f2      	b.n	1e712 <z_unpend_all+0x6>

0001e72c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1e72c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1e72e:	f7fb fde7 	bl	1a300 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e732:	bd08      	pop	{r3, pc}

0001e734 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1e734:	f7fb bde4 	b.w	1a300 <sys_clock_tick_get>

0001e738 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1e738:	b108      	cbz	r0, 1e73e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1e73a:	f7eb bdcf 	b.w	a2dc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1e73e:	4770      	bx	lr

0001e740 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e740:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e744:	bf08      	it	eq
   1e746:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e74a:	b538      	push	{r3, r4, r5, lr}
   1e74c:	460c      	mov	r4, r1
   1e74e:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e750:	d014      	beq.n	1e77c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e752:	4308      	orrs	r0, r1
   1e754:	d103      	bne.n	1e75e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1e756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1e75a:	f7fb bdd1 	b.w	1a300 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e75e:	f06f 0001 	mvn.w	r0, #1
   1e762:	f04f 33ff 	mov.w	r3, #4294967295
   1e766:	1b40      	subs	r0, r0, r5
   1e768:	eb63 0101 	sbc.w	r1, r3, r1
   1e76c:	2900      	cmp	r1, #0
   1e76e:	da04      	bge.n	1e77a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1e770:	f7fb fdc6 	bl	1a300 <sys_clock_tick_get>
   1e774:	1940      	adds	r0, r0, r5
   1e776:	eb41 0104 	adc.w	r1, r1, r4
}
   1e77a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1e77c:	f04f 30ff 	mov.w	r0, #4294967295
   1e780:	4601      	mov	r1, r0
   1e782:	e7fa      	b.n	1e77a <sys_clock_timeout_end_calc+0x3a>

0001e784 <k_timer_init>:
	timer->status = 0U;
   1e784:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1e786:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1e78a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1e78e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1e792:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1e796:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1e798:	6343      	str	r3, [r0, #52]	; 0x34
}
   1e79a:	4770      	bx	lr

0001e79c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1e79c:	b510      	push	{r4, lr}
   1e79e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1e7a0:	f7fb fc2c 	bl	19ffc <z_abort_timeout>

	if (inactive) {
   1e7a4:	b9b0      	cbnz	r0, 1e7d4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1e7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e7a8:	b10b      	cbz	r3, 1e7ae <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1e7aa:	4620      	mov	r0, r4
   1e7ac:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1e7ae:	f104 0018 	add.w	r0, r4, #24
   1e7b2:	f7fa ffa1 	bl	196f8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1e7b6:	b168      	cbz	r0, 1e7d4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1e7b8:	f7fa fa12 	bl	18be0 <z_ready_thread>
   1e7bc:	f04f 0320 	mov.w	r3, #32
   1e7c0:	f3ef 8011 	mrs	r0, BASEPRI
   1e7c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e7c8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e7d0:	f7ff bf86 	b.w	1e6e0 <z_reschedule_irqlock>
   1e7d4:	bd10      	pop	{r4, pc}

0001e7d6 <add_event>:
{
   1e7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7d8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e7da:	e9d0 1300 	ldrd	r1, r3, [r0]
   1e7de:	4288      	cmp	r0, r1
   1e7e0:	4604      	mov	r4, r0
   1e7e2:	d105      	bne.n	1e7f0 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1e7e4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1e7e6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1e7ea:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e7ec:	6065      	str	r5, [r4, #4]
   1e7ee:	e01d      	b.n	1e82c <add_event+0x56>
	if ((pending == NULL) ||
   1e7f0:	2b00      	cmp	r3, #0
   1e7f2:	d0f7      	beq.n	1e7e4 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e7f4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e7f6:	b100      	cbz	r0, 1e7fa <add_event+0x24>
   1e7f8:	3860      	subs	r0, #96	; 0x60
   1e7fa:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e7fe:	4639      	mov	r1, r7
   1e800:	f7ff ff65 	bl	1e6ce <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e804:	2800      	cmp	r0, #0
   1e806:	dced      	bgt.n	1e7e4 <add_event+0xe>
	return list->head == list;
   1e808:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e80a:	42b4      	cmp	r4, r6
   1e80c:	d0ea      	beq.n	1e7e4 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e80e:	2e00      	cmp	r6, #0
   1e810:	d0e8      	beq.n	1e7e4 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e812:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e814:	b101      	cbz	r1, 1e818 <add_event+0x42>
   1e816:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1e818:	4638      	mov	r0, r7
   1e81a:	f7ff ff58 	bl	1e6ce <z_sched_prio_cmp>
   1e81e:	2800      	cmp	r0, #0
   1e820:	dd05      	ble.n	1e82e <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1e822:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e824:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1e828:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e82a:	6075      	str	r5, [r6, #4]
}
   1e82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1e82e:	6863      	ldr	r3, [r4, #4]
   1e830:	429e      	cmp	r6, r3
   1e832:	d0d7      	beq.n	1e7e4 <add_event+0xe>
   1e834:	6836      	ldr	r6, [r6, #0]
   1e836:	e7ea      	b.n	1e80e <add_event+0x38>

0001e838 <signal_poll_event>:
{
   1e838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1e83c:	6884      	ldr	r4, [r0, #8]
{
   1e83e:	4605      	mov	r5, r0
   1e840:	460e      	mov	r6, r1
	if (poller != NULL) {
   1e842:	b144      	cbz	r4, 1e856 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1e844:	7863      	ldrb	r3, [r4, #1]
   1e846:	2b01      	cmp	r3, #1
   1e848:	d12e      	bne.n	1e8a8 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1e84a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e84e:	f013 0302 	ands.w	r3, r3, #2
   1e852:	d10a      	bne.n	1e86a <signal_poll_event+0x32>
		poller->is_polling = false;
   1e854:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1e856:	2000      	movs	r0, #0
	event->state |= state;
   1e858:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1e85a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1e85c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1e860:	4316      	orrs	r6, r2
   1e862:	f366 3394 	bfi	r3, r6, #14, #7
   1e866:	60eb      	str	r3, [r5, #12]
	return retcode;
   1e868:	e03e      	b.n	1e8e8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1e86a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1e86e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e872:	bf08      	it	eq
   1e874:	f112 0f02 	cmneq.w	r2, #2
   1e878:	d032      	beq.n	1e8e0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e87a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1e87e:	4640      	mov	r0, r8
   1e880:	f7fa fe98 	bl	195b4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e884:	2e08      	cmp	r6, #8
   1e886:	bf0c      	ite	eq
   1e888:	f06f 0303 	mvneq.w	r3, #3
   1e88c:	2300      	movne	r3, #0
   1e88e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e890:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e894:	06db      	lsls	r3, r3, #27
   1e896:	d109      	bne.n	1e8ac <signal_poll_event+0x74>
   1e898:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1e89c:	b937      	cbnz	r7, 1e8ac <signal_poll_event+0x74>
	z_ready_thread(thread);
   1e89e:	4640      	mov	r0, r8
   1e8a0:	f7fa f99e 	bl	18be0 <z_ready_thread>
		poller->is_polling = false;
   1e8a4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1e8a6:	e7d6      	b.n	1e856 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1e8a8:	2b02      	cmp	r3, #2
   1e8aa:	d001      	beq.n	1e8b0 <signal_poll_event+0x78>
		poller->is_polling = false;
   1e8ac:	2300      	movs	r3, #0
   1e8ae:	e7d1      	b.n	1e854 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1e8b0:	7823      	ldrb	r3, [r4, #0]
   1e8b2:	2b00      	cmp	r3, #0
   1e8b4:	d0cf      	beq.n	1e856 <signal_poll_event+0x1e>
   1e8b6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1e8ba:	2f00      	cmp	r7, #0
   1e8bc:	d0f2      	beq.n	1e8a4 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1e8be:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1e8c2:	f1a4 0914 	sub.w	r9, r4, #20
   1e8c6:	f104 0014 	add.w	r0, r4, #20
   1e8ca:	f7fb fb97 	bl	19ffc <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1e8ce:	4649      	mov	r1, r9
   1e8d0:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1e8d2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1e8d6:	f7f9 fd11 	bl	182fc <z_work_submit_to_queue>
		poller->is_polling = false;
   1e8da:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1e8de:	e7ba      	b.n	1e856 <signal_poll_event+0x1e>
		poller->is_polling = false;
   1e8e0:	2300      	movs	r3, #0
		return -EAGAIN;
   1e8e2:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1e8e6:	7023      	strb	r3, [r4, #0]
}
   1e8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e8ec <z_handle_obj_poll_events>:
{
   1e8ec:	4603      	mov	r3, r0
	return list->head == list;
   1e8ee:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e8f0:	4283      	cmp	r3, r0
   1e8f2:	d008      	beq.n	1e906 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1e8f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e8f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e8fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e8fc:	2300      	movs	r3, #0
	node->prev = NULL;
   1e8fe:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e902:	f7ff bf99 	b.w	1e838 <signal_poll_event>
}
   1e906:	4770      	bx	lr

0001e908 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1e908:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1e90a:	e9c0 0000 	strd	r0, r0, [r0]
   1e90e:	6083      	str	r3, [r0, #8]
}
   1e910:	4770      	bx	lr

0001e912 <k_free>:
	if (ptr != NULL) {
   1e912:	b120      	cbz	r0, 1e91e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1e914:	1f01      	subs	r1, r0, #4
   1e916:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e91a:	f7f8 bc61 	b.w	171e0 <k_heap_free>
}
   1e91e:	4770      	bx	lr

0001e920 <k_malloc>:
{
   1e920:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1e922:	2004      	movs	r0, #4
   1e924:	f7fc b9b2 	b.w	1ac8c <k_aligned_alloc>

0001e928 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1e928:	4770      	bx	lr
	...
