
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	58 c5 00 20 6d 65 01 00 3d af 02 00 25 65 01 00     X.. me..=...%e..
   10010:	25 65 01 00 25 65 01 00 25 65 01 00 25 65 01 00     %e..%e..%e..%e..
	...
   1002c:	75 55 01 00 25 65 01 00 00 00 00 00 11 55 01 00     uU..%e.......U..
   1003c:	25 65 01 00                                         %e..

00010040 <_irq_vector_table>:
   10040:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10050:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10060:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10070:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10080:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10090:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   100a0:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   100b0:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   100c0:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   100d0:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   100e0:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   100f0:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10100:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10110:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10120:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10130:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10140:	0d 56 01 00 0d 56 01 00 0d 56 01 00 0d 56 01 00     .V...V...V...V..
   10150:	0d 56 01 00                                         .V..

Disassembly of section text:

00010158 <__aeabi_uldivmod>:
   10158:	b953      	cbnz	r3, 10170 <__aeabi_uldivmod+0x18>
   1015a:	b94a      	cbnz	r2, 10170 <__aeabi_uldivmod+0x18>
   1015c:	2900      	cmp	r1, #0
   1015e:	bf08      	it	eq
   10160:	2800      	cmpeq	r0, #0
   10162:	bf1c      	itt	ne
   10164:	f04f 31ff 	movne.w	r1, #4294967295
   10168:	f04f 30ff 	movne.w	r0, #4294967295
   1016c:	f000 b80c 	b.w	10188 <__aeabi_idiv0>
   10170:	f1ad 0c08 	sub.w	ip, sp, #8
   10174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10178:	f000 f808 	bl	1018c <__udivmoddi4>
   1017c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10184:	b004      	add	sp, #16
   10186:	4770      	bx	lr

00010188 <__aeabi_idiv0>:
   10188:	4770      	bx	lr
   1018a:	bf00      	nop

0001018c <__udivmoddi4>:
   1018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10190:	4686      	mov	lr, r0
   10192:	468c      	mov	ip, r1
   10194:	4608      	mov	r0, r1
   10196:	9e08      	ldr	r6, [sp, #32]
   10198:	4615      	mov	r5, r2
   1019a:	4674      	mov	r4, lr
   1019c:	4619      	mov	r1, r3
   1019e:	2b00      	cmp	r3, #0
   101a0:	f040 80c1 	bne.w	10326 <__udivmoddi4+0x19a>
   101a4:	4285      	cmp	r5, r0
   101a6:	fab2 f282 	clz	r2, r2
   101aa:	d945      	bls.n	10238 <__udivmoddi4+0xac>
   101ac:	b14a      	cbz	r2, 101c2 <__udivmoddi4+0x36>
   101ae:	f1c2 0320 	rsb	r3, r2, #32
   101b2:	fa00 fc02 	lsl.w	ip, r0, r2
   101b6:	4095      	lsls	r5, r2
   101b8:	4094      	lsls	r4, r2
   101ba:	fa2e f303 	lsr.w	r3, lr, r3
   101be:	ea43 0c0c 	orr.w	ip, r3, ip
   101c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   101c6:	b2a8      	uxth	r0, r5
   101c8:	0c23      	lsrs	r3, r4, #16
   101ca:	fbbc f8fe 	udiv	r8, ip, lr
   101ce:	fb0e cc18 	mls	ip, lr, r8, ip
   101d2:	fb08 f900 	mul.w	r9, r8, r0
   101d6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   101da:	4599      	cmp	r9, r3
   101dc:	d928      	bls.n	10230 <__udivmoddi4+0xa4>
   101de:	18eb      	adds	r3, r5, r3
   101e0:	f108 37ff 	add.w	r7, r8, #4294967295
   101e4:	d204      	bcs.n	101f0 <__udivmoddi4+0x64>
   101e6:	4599      	cmp	r9, r3
   101e8:	d902      	bls.n	101f0 <__udivmoddi4+0x64>
   101ea:	f1a8 0702 	sub.w	r7, r8, #2
   101ee:	442b      	add	r3, r5
   101f0:	eba3 0309 	sub.w	r3, r3, r9
   101f4:	b2a4      	uxth	r4, r4
   101f6:	fbb3 fcfe 	udiv	ip, r3, lr
   101fa:	fb0e 331c 	mls	r3, lr, ip, r3
   101fe:	fb0c f000 	mul.w	r0, ip, r0
   10202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10206:	42a0      	cmp	r0, r4
   10208:	d914      	bls.n	10234 <__udivmoddi4+0xa8>
   1020a:	192c      	adds	r4, r5, r4
   1020c:	f10c 33ff 	add.w	r3, ip, #4294967295
   10210:	d204      	bcs.n	1021c <__udivmoddi4+0x90>
   10212:	42a0      	cmp	r0, r4
   10214:	d902      	bls.n	1021c <__udivmoddi4+0x90>
   10216:	f1ac 0302 	sub.w	r3, ip, #2
   1021a:	442c      	add	r4, r5
   1021c:	1a24      	subs	r4, r4, r0
   1021e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   10222:	b11e      	cbz	r6, 1022c <__udivmoddi4+0xa0>
   10224:	40d4      	lsrs	r4, r2
   10226:	2300      	movs	r3, #0
   10228:	6034      	str	r4, [r6, #0]
   1022a:	6073      	str	r3, [r6, #4]
   1022c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10230:	4647      	mov	r7, r8
   10232:	e7dd      	b.n	101f0 <__udivmoddi4+0x64>
   10234:	4663      	mov	r3, ip
   10236:	e7f1      	b.n	1021c <__udivmoddi4+0x90>
   10238:	bb92      	cbnz	r2, 102a0 <__udivmoddi4+0x114>
   1023a:	1b43      	subs	r3, r0, r5
   1023c:	2101      	movs	r1, #1
   1023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10242:	b2af      	uxth	r7, r5
   10244:	0c20      	lsrs	r0, r4, #16
   10246:	fbb3 fcfe 	udiv	ip, r3, lr
   1024a:	fb0e 331c 	mls	r3, lr, ip, r3
   1024e:	fb0c f807 	mul.w	r8, ip, r7
   10252:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10256:	4598      	cmp	r8, r3
   10258:	d961      	bls.n	1031e <__udivmoddi4+0x192>
   1025a:	18eb      	adds	r3, r5, r3
   1025c:	f10c 30ff 	add.w	r0, ip, #4294967295
   10260:	d204      	bcs.n	1026c <__udivmoddi4+0xe0>
   10262:	4598      	cmp	r8, r3
   10264:	d902      	bls.n	1026c <__udivmoddi4+0xe0>
   10266:	f1ac 0002 	sub.w	r0, ip, #2
   1026a:	442b      	add	r3, r5
   1026c:	eba3 0308 	sub.w	r3, r3, r8
   10270:	b2a4      	uxth	r4, r4
   10272:	fbb3 fcfe 	udiv	ip, r3, lr
   10276:	fb0e 331c 	mls	r3, lr, ip, r3
   1027a:	fb0c f707 	mul.w	r7, ip, r7
   1027e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10282:	42a7      	cmp	r7, r4
   10284:	d94d      	bls.n	10322 <__udivmoddi4+0x196>
   10286:	192c      	adds	r4, r5, r4
   10288:	f10c 33ff 	add.w	r3, ip, #4294967295
   1028c:	d204      	bcs.n	10298 <__udivmoddi4+0x10c>
   1028e:	42a7      	cmp	r7, r4
   10290:	d902      	bls.n	10298 <__udivmoddi4+0x10c>
   10292:	f1ac 0302 	sub.w	r3, ip, #2
   10296:	442c      	add	r4, r5
   10298:	1be4      	subs	r4, r4, r7
   1029a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1029e:	e7c0      	b.n	10222 <__udivmoddi4+0x96>
   102a0:	f1c2 0320 	rsb	r3, r2, #32
   102a4:	4095      	lsls	r5, r2
   102a6:	4094      	lsls	r4, r2
   102a8:	fa20 f103 	lsr.w	r1, r0, r3
   102ac:	fa2e f303 	lsr.w	r3, lr, r3
   102b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   102b4:	4090      	lsls	r0, r2
   102b6:	b2af      	uxth	r7, r5
   102b8:	4303      	orrs	r3, r0
   102ba:	fbb1 fcfe 	udiv	ip, r1, lr
   102be:	fb0e 101c 	mls	r0, lr, ip, r1
   102c2:	0c19      	lsrs	r1, r3, #16
   102c4:	fb0c f807 	mul.w	r8, ip, r7
   102c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   102cc:	4588      	cmp	r8, r1
   102ce:	d922      	bls.n	10316 <__udivmoddi4+0x18a>
   102d0:	1869      	adds	r1, r5, r1
   102d2:	f10c 30ff 	add.w	r0, ip, #4294967295
   102d6:	d204      	bcs.n	102e2 <__udivmoddi4+0x156>
   102d8:	4588      	cmp	r8, r1
   102da:	d902      	bls.n	102e2 <__udivmoddi4+0x156>
   102dc:	f1ac 0002 	sub.w	r0, ip, #2
   102e0:	4429      	add	r1, r5
   102e2:	eba1 0108 	sub.w	r1, r1, r8
   102e6:	b29b      	uxth	r3, r3
   102e8:	fbb1 fcfe 	udiv	ip, r1, lr
   102ec:	fb0e 111c 	mls	r1, lr, ip, r1
   102f0:	fb0c f707 	mul.w	r7, ip, r7
   102f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   102f8:	429f      	cmp	r7, r3
   102fa:	d90e      	bls.n	1031a <__udivmoddi4+0x18e>
   102fc:	18eb      	adds	r3, r5, r3
   102fe:	f10c 31ff 	add.w	r1, ip, #4294967295
   10302:	d204      	bcs.n	1030e <__udivmoddi4+0x182>
   10304:	429f      	cmp	r7, r3
   10306:	d902      	bls.n	1030e <__udivmoddi4+0x182>
   10308:	f1ac 0102 	sub.w	r1, ip, #2
   1030c:	442b      	add	r3, r5
   1030e:	1bdb      	subs	r3, r3, r7
   10310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10314:	e793      	b.n	1023e <__udivmoddi4+0xb2>
   10316:	4660      	mov	r0, ip
   10318:	e7e3      	b.n	102e2 <__udivmoddi4+0x156>
   1031a:	4661      	mov	r1, ip
   1031c:	e7f7      	b.n	1030e <__udivmoddi4+0x182>
   1031e:	4660      	mov	r0, ip
   10320:	e7a4      	b.n	1026c <__udivmoddi4+0xe0>
   10322:	4663      	mov	r3, ip
   10324:	e7b8      	b.n	10298 <__udivmoddi4+0x10c>
   10326:	4283      	cmp	r3, r0
   10328:	d906      	bls.n	10338 <__udivmoddi4+0x1ac>
   1032a:	b916      	cbnz	r6, 10332 <__udivmoddi4+0x1a6>
   1032c:	2100      	movs	r1, #0
   1032e:	4608      	mov	r0, r1
   10330:	e77c      	b.n	1022c <__udivmoddi4+0xa0>
   10332:	e9c6 e000 	strd	lr, r0, [r6]
   10336:	e7f9      	b.n	1032c <__udivmoddi4+0x1a0>
   10338:	fab3 f783 	clz	r7, r3
   1033c:	b98f      	cbnz	r7, 10362 <__udivmoddi4+0x1d6>
   1033e:	4283      	cmp	r3, r0
   10340:	d301      	bcc.n	10346 <__udivmoddi4+0x1ba>
   10342:	4572      	cmp	r2, lr
   10344:	d808      	bhi.n	10358 <__udivmoddi4+0x1cc>
   10346:	ebbe 0402 	subs.w	r4, lr, r2
   1034a:	eb60 0303 	sbc.w	r3, r0, r3
   1034e:	2001      	movs	r0, #1
   10350:	469c      	mov	ip, r3
   10352:	b91e      	cbnz	r6, 1035c <__udivmoddi4+0x1d0>
   10354:	2100      	movs	r1, #0
   10356:	e769      	b.n	1022c <__udivmoddi4+0xa0>
   10358:	4638      	mov	r0, r7
   1035a:	e7fa      	b.n	10352 <__udivmoddi4+0x1c6>
   1035c:	e9c6 4c00 	strd	r4, ip, [r6]
   10360:	e7f8      	b.n	10354 <__udivmoddi4+0x1c8>
   10362:	f1c7 0c20 	rsb	ip, r7, #32
   10366:	40bb      	lsls	r3, r7
   10368:	fa0e f507 	lsl.w	r5, lr, r7
   1036c:	fa22 f40c 	lsr.w	r4, r2, ip
   10370:	fa2e f10c 	lsr.w	r1, lr, ip
   10374:	40ba      	lsls	r2, r7
   10376:	431c      	orrs	r4, r3
   10378:	fa20 f30c 	lsr.w	r3, r0, ip
   1037c:	40b8      	lsls	r0, r7
   1037e:	ea4f 4914 	mov.w	r9, r4, lsr #16
   10382:	4301      	orrs	r1, r0
   10384:	fa1f fe84 	uxth.w	lr, r4
   10388:	fbb3 f8f9 	udiv	r8, r3, r9
   1038c:	fb09 3018 	mls	r0, r9, r8, r3
   10390:	0c0b      	lsrs	r3, r1, #16
   10392:	fb08 fa0e 	mul.w	sl, r8, lr
   10396:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1039a:	459a      	cmp	sl, r3
   1039c:	d940      	bls.n	10420 <__udivmoddi4+0x294>
   1039e:	18e3      	adds	r3, r4, r3
   103a0:	f108 30ff 	add.w	r0, r8, #4294967295
   103a4:	d204      	bcs.n	103b0 <__udivmoddi4+0x224>
   103a6:	459a      	cmp	sl, r3
   103a8:	d902      	bls.n	103b0 <__udivmoddi4+0x224>
   103aa:	f1a8 0002 	sub.w	r0, r8, #2
   103ae:	4423      	add	r3, r4
   103b0:	eba3 030a 	sub.w	r3, r3, sl
   103b4:	b289      	uxth	r1, r1
   103b6:	fbb3 f8f9 	udiv	r8, r3, r9
   103ba:	fb09 3318 	mls	r3, r9, r8, r3
   103be:	fb08 fe0e 	mul.w	lr, r8, lr
   103c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   103c6:	458e      	cmp	lr, r1
   103c8:	d92c      	bls.n	10424 <__udivmoddi4+0x298>
   103ca:	1861      	adds	r1, r4, r1
   103cc:	f108 33ff 	add.w	r3, r8, #4294967295
   103d0:	d204      	bcs.n	103dc <__udivmoddi4+0x250>
   103d2:	458e      	cmp	lr, r1
   103d4:	d902      	bls.n	103dc <__udivmoddi4+0x250>
   103d6:	f1a8 0302 	sub.w	r3, r8, #2
   103da:	4421      	add	r1, r4
   103dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   103e0:	eba1 010e 	sub.w	r1, r1, lr
   103e4:	fba0 9802 	umull	r9, r8, r0, r2
   103e8:	4541      	cmp	r1, r8
   103ea:	46ce      	mov	lr, r9
   103ec:	4643      	mov	r3, r8
   103ee:	d302      	bcc.n	103f6 <__udivmoddi4+0x26a>
   103f0:	d106      	bne.n	10400 <__udivmoddi4+0x274>
   103f2:	454d      	cmp	r5, r9
   103f4:	d204      	bcs.n	10400 <__udivmoddi4+0x274>
   103f6:	3801      	subs	r0, #1
   103f8:	ebb9 0e02 	subs.w	lr, r9, r2
   103fc:	eb68 0304 	sbc.w	r3, r8, r4
   10400:	2e00      	cmp	r6, #0
   10402:	d0a7      	beq.n	10354 <__udivmoddi4+0x1c8>
   10404:	ebb5 020e 	subs.w	r2, r5, lr
   10408:	eb61 0103 	sbc.w	r1, r1, r3
   1040c:	fa01 fc0c 	lsl.w	ip, r1, ip
   10410:	fa22 f307 	lsr.w	r3, r2, r7
   10414:	40f9      	lsrs	r1, r7
   10416:	ea4c 0303 	orr.w	r3, ip, r3
   1041a:	e9c6 3100 	strd	r3, r1, [r6]
   1041e:	e799      	b.n	10354 <__udivmoddi4+0x1c8>
   10420:	4640      	mov	r0, r8
   10422:	e7c5      	b.n	103b0 <__udivmoddi4+0x224>
   10424:	4643      	mov	r3, r8
   10426:	e7d9      	b.n	103dc <__udivmoddi4+0x250>

00010428 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
   10428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1042c:	b085      	sub	sp, #20
   1042e:	4606      	mov	r6, r0
   10430:	460f      	mov	r7, r1
   10432:	4615      	mov	r5, r2
   10434:	4698      	mov	r8, r3
	const struct pwm_driver_api *api =
   10436:	6883      	ldr	r3, [r0, #8]
	return api->get_cycles_per_sec(dev, channel, cycles);
   10438:	685b      	ldr	r3, [r3, #4]
   1043a:	aa02      	add	r2, sp, #8
   1043c:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
   1043e:	2800      	cmp	r0, #0
   10440:	db2f      	blt.n	104a2 <pwm_set+0x7a>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
   10442:	9c02      	ldr	r4, [sp, #8]
   10444:	f8dd 900c 	ldr.w	r9, [sp, #12]
   10448:	fba5 ab04 	umull	sl, fp, r5, r4
   1044c:	fb05 bb09 	mla	fp, r5, r9, fp
   10450:	a319      	add	r3, pc, #100	; (adr r3, 104b8 <pwm_set+0x90>)
   10452:	e9d3 2300 	ldrd	r2, r3, [r3]
   10456:	4650      	mov	r0, sl
   10458:	4659      	mov	r1, fp
   1045a:	f7ff fe7d 	bl	10158 <__aeabi_uldivmod>
   1045e:	4605      	mov	r5, r0
	if (period_cycles > UINT32_MAX) {
   10460:	f04f 33ff 	mov.w	r3, #4294967295
   10464:	4553      	cmp	r3, sl
   10466:	4b16      	ldr	r3, [pc, #88]	; (104c0 <pwm_set+0x98>)
   10468:	eb73 030b 	sbcs.w	r3, r3, fp
   1046c:	d31c      	bcc.n	104a8 <pwm_set+0x80>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
   1046e:	fba8 a404 	umull	sl, r4, r8, r4
   10472:	fb08 4409 	mla	r4, r8, r9, r4
   10476:	a310      	add	r3, pc, #64	; (adr r3, 104b8 <pwm_set+0x90>)
   10478:	e9d3 2300 	ldrd	r2, r3, [r3]
   1047c:	4650      	mov	r0, sl
   1047e:	4621      	mov	r1, r4
   10480:	f7ff fe6a 	bl	10158 <__aeabi_uldivmod>
   10484:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
   10486:	f04f 32ff 	mov.w	r2, #4294967295
   1048a:	4552      	cmp	r2, sl
   1048c:	4a0c      	ldr	r2, [pc, #48]	; (104c0 <pwm_set+0x98>)
   1048e:	41a2      	sbcs	r2, r4
   10490:	d30d      	bcc.n	104ae <pwm_set+0x86>
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
   10492:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   10496:	9200      	str	r2, [sp, #0]
   10498:	462a      	mov	r2, r5
   1049a:	4639      	mov	r1, r7
   1049c:	4630      	mov	r0, r6
   1049e:	f018 fe21 	bl	290e4 <pwm_set_cycles>
			      (uint32_t)pulse_cycles, flags);
}
   104a2:	b005      	add	sp, #20
   104a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
   104a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   104ac:	e7f9      	b.n	104a2 <pwm_set+0x7a>
		return -ENOTSUP;
   104ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   104b2:	e7f6      	b.n	104a2 <pwm_set+0x7a>
   104b4:	f3af 8000 	nop.w
   104b8:	3b9aca00 	.word	0x3b9aca00
   104bc:	00000000 	.word	0x00000000
   104c0:	3b9ac9ff 	.word	0x3b9ac9ff

000104c4 <on_connected>:
}; 


/* Callbacks */
void on_connected(struct bt_conn *conn, uint8_t err)
{
   104c4:	b5b0      	push	{r4, r5, r7, lr}
   104c6:	b088      	sub	sp, #32
   104c8:	af00      	add	r7, sp, #0
	if(err) {
   104ca:	2900      	cmp	r1, #0
   104cc:	d043      	beq.n	10556 <on_connected+0x92>
   104ce:	4608      	mov	r0, r1
		LOG_ERR("connection err: %d", err);
   104d0:	466c      	mov	r4, sp
   104d2:	b088      	sub	sp, #32
   104d4:	466b      	mov	r3, sp
   104d6:	f113 0210 	adds.w	r2, r3, #16
   104da:	d00f      	beq.n	104fc <on_connected+0x38>
   104dc:	210c      	movs	r1, #12
   104de:	b142      	cbz	r2, 104f2 <on_connected+0x2e>
   104e0:	468c      	mov	ip, r1
   104e2:	2904      	cmp	r1, #4
   104e4:	dd01      	ble.n	104ea <on_connected+0x26>
   104e6:	4d32      	ldr	r5, [pc, #200]	; (105b0 <on_connected+0xec>)
   104e8:	615d      	str	r5, [r3, #20]
   104ea:	f1bc 0f08 	cmp.w	ip, #8
   104ee:	dd08      	ble.n	10502 <on_connected+0x3e>
   104f0:	6198      	str	r0, [r3, #24]
   104f2:	290b      	cmp	r1, #11
   104f4:	dd2c      	ble.n	10550 <on_connected+0x8c>
   104f6:	f04f 0c0c 	mov.w	ip, #12
   104fa:	e004      	b.n	10506 <on_connected+0x42>
   104fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10500:	e7ed      	b.n	104de <on_connected+0x1a>
   10502:	f06f 0c1b 	mvn.w	ip, #27
   10506:	b13a      	cbz	r2, 10518 <on_connected+0x54>
   10508:	2103      	movs	r1, #3
   1050a:	7139      	strb	r1, [r7, #4]
   1050c:	2100      	movs	r1, #0
   1050e:	7179      	strb	r1, [r7, #5]
   10510:	71b9      	strb	r1, [r7, #6]
   10512:	71f9      	strb	r1, [r7, #7]
   10514:	6878      	ldr	r0, [r7, #4]
   10516:	6118      	str	r0, [r3, #16]
   10518:	2100      	movs	r1, #0
   1051a:	f36f 0100 	bfc	r1, #0, #1
   1051e:	f36f 0141 	bfc	r1, #1, #1
   10522:	f36f 0182 	bfc	r1, #2, #1
   10526:	f36f 01c5 	bfc	r1, #3, #3
   1052a:	2301      	movs	r3, #1
   1052c:	f363 1188 	bfi	r1, r3, #6, #3
   10530:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   10534:	f363 2152 	bfi	r1, r3, #9, #10
   10538:	f36f 41de 	bfc	r1, #19, #12
   1053c:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   10540:	2300      	movs	r3, #0
   10542:	481c      	ldr	r0, [pc, #112]	; (105b4 <on_connected+0xf0>)
   10544:	f003 fbda 	bl	13cfc <z_impl_z_log_msg_static_create>
   10548:	46a5      	mov	sp, r4
		return;
	}
	LOG_INF("Connected.");
	current_conn = bt_conn_ref(conn);
	dk_set_led_on(CONN_STATUS_LED);
} /* on_connected */
   1054a:	3720      	adds	r7, #32
   1054c:	46bd      	mov	sp, r7
   1054e:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("connection err: %d", err);
   10550:	f06f 0c1b 	mvn.w	ip, #27
   10554:	e7d7      	b.n	10506 <on_connected+0x42>
   10556:	4604      	mov	r4, r0
	LOG_INF("Connected.");
   10558:	4b17      	ldr	r3, [pc, #92]	; (105b8 <on_connected+0xf4>)
   1055a:	61fb      	str	r3, [r7, #28]
   1055c:	2302      	movs	r3, #2
   1055e:	713b      	strb	r3, [r7, #4]
   10560:	2300      	movs	r3, #0
   10562:	717b      	strb	r3, [r7, #5]
   10564:	71bb      	strb	r3, [r7, #6]
   10566:	71fb      	strb	r3, [r7, #7]
   10568:	687a      	ldr	r2, [r7, #4]
   1056a:	61ba      	str	r2, [r7, #24]
   1056c:	4619      	mov	r1, r3
   1056e:	f363 0100 	bfi	r1, r3, #0, #1
   10572:	f363 0141 	bfi	r1, r3, #1, #1
   10576:	f363 0182 	bfi	r1, r3, #2, #1
   1057a:	f363 01c5 	bfi	r1, r3, #3, #3
   1057e:	2203      	movs	r2, #3
   10580:	f362 1188 	bfi	r1, r2, #6, #3
   10584:	2208      	movs	r2, #8
   10586:	f362 2152 	bfi	r1, r2, #9, #10
   1058a:	f363 41de 	bfi	r1, r3, #19, #12
   1058e:	f363 71df 	bfi	r1, r3, #31, #1
   10592:	f107 0218 	add.w	r2, r7, #24
   10596:	4807      	ldr	r0, [pc, #28]	; (105b4 <on_connected+0xf0>)
   10598:	f003 fbb0 	bl	13cfc <z_impl_z_log_msg_static_create>
	current_conn = bt_conn_ref(conn);
   1059c:	4620      	mov	r0, r4
   1059e:	f00a fda5 	bl	1b0ec <bt_conn_ref>
   105a2:	4b06      	ldr	r3, [pc, #24]	; (105bc <on_connected+0xf8>)
   105a4:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CONN_STATUS_LED);
   105a6:	2001      	movs	r0, #1
   105a8:	f01d fbac 	bl	2dd04 <dk_set_led_on>
   105ac:	e7cd      	b.n	1054a <on_connected+0x86>
   105ae:	bf00      	nop
   105b0:	0002f9c8 	.word	0x0002f9c8
   105b4:	0002f7e8 	.word	0x0002f7e8
   105b8:	0002f9dc 	.word	0x0002f9dc
   105bc:	20009778 	.word	0x20009778

000105c0 <reset_motors>:
    return;
} /* update_motors */


void reset_motors(void)
{
   105c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   105c2:	b089      	sub	sp, #36	; 0x24
   105c4:	af00      	add	r7, sp, #0
    int motor_err;
    motor_err = pwm_set_pulse_dt(&motors_l, PWM_USEC(1500));
   105c6:	4958      	ldr	r1, [pc, #352]	; (10728 <reset_motors+0x168>)
   105c8:	4858      	ldr	r0, [pc, #352]	; (1072c <reset_motors+0x16c>)
   105ca:	f018 fd9a 	bl	29102 <pwm_set_pulse_dt>
     if (motor_err < 0) {
   105ce:	2800      	cmp	r0, #0
   105d0:	db28      	blt.n	10624 <reset_motors+0x64>
			LOG_ERR("Error %d: failed to reset left motors", motor_err);
			return;
		}
    motor_err = pwm_set_pulse_dt(&motors_r, PWM_USEC(1500));
   105d2:	4955      	ldr	r1, [pc, #340]	; (10728 <reset_motors+0x168>)
   105d4:	4856      	ldr	r0, [pc, #344]	; (10730 <reset_motors+0x170>)
   105d6:	f018 fd94 	bl	29102 <pwm_set_pulse_dt>
    if (motor_err < 0) {
   105da:	2800      	cmp	r0, #0
   105dc:	db64      	blt.n	106a8 <reset_motors+0xe8>
			LOG_ERR("Error %d: failed to reset right motors", motor_err);
			return;
		}
    LOG_INF("Motors turned off (1500 us)");
   105de:	4b55      	ldr	r3, [pc, #340]	; (10734 <reset_motors+0x174>)
   105e0:	61fb      	str	r3, [r7, #28]
   105e2:	2302      	movs	r3, #2
   105e4:	713b      	strb	r3, [r7, #4]
   105e6:	2300      	movs	r3, #0
   105e8:	717b      	strb	r3, [r7, #5]
   105ea:	71bb      	strb	r3, [r7, #6]
   105ec:	71fb      	strb	r3, [r7, #7]
   105ee:	687a      	ldr	r2, [r7, #4]
   105f0:	61ba      	str	r2, [r7, #24]
   105f2:	4619      	mov	r1, r3
   105f4:	f363 0100 	bfi	r1, r3, #0, #1
   105f8:	f363 0141 	bfi	r1, r3, #1, #1
   105fc:	f363 0182 	bfi	r1, r3, #2, #1
   10600:	f363 01c5 	bfi	r1, r3, #3, #3
   10604:	2203      	movs	r2, #3
   10606:	f362 1188 	bfi	r1, r2, #6, #3
   1060a:	2208      	movs	r2, #8
   1060c:	f362 2152 	bfi	r1, r2, #9, #10
   10610:	f363 41de 	bfi	r1, r3, #19, #12
   10614:	f363 71df 	bfi	r1, r3, #31, #1
   10618:	f107 0218 	add.w	r2, r7, #24
   1061c:	4846      	ldr	r0, [pc, #280]	; (10738 <reset_motors+0x178>)
   1061e:	f003 fb6d 	bl	13cfc <z_impl_z_log_msg_static_create>
   10622:	e03b      	b.n	1069c <reset_motors+0xdc>
			LOG_ERR("Error %d: failed to reset left motors", motor_err);
   10624:	466c      	mov	r4, sp
   10626:	b088      	sub	sp, #32
   10628:	466b      	mov	r3, sp
   1062a:	f113 0210 	adds.w	r2, r3, #16
   1062e:	d00e      	beq.n	1064e <reset_motors+0x8e>
   10630:	210c      	movs	r1, #12
   10632:	b13a      	cbz	r2, 10644 <reset_motors+0x84>
   10634:	460d      	mov	r5, r1
   10636:	2904      	cmp	r1, #4
   10638:	dd01      	ble.n	1063e <reset_motors+0x7e>
   1063a:	4e40      	ldr	r6, [pc, #256]	; (1073c <reset_motors+0x17c>)
   1063c:	615e      	str	r6, [r3, #20]
   1063e:	2d08      	cmp	r5, #8
   10640:	dd08      	ble.n	10654 <reset_motors+0x94>
   10642:	6198      	str	r0, [r3, #24]
   10644:	290b      	cmp	r1, #11
   10646:	dd2c      	ble.n	106a2 <reset_motors+0xe2>
   10648:	f04f 0c0c 	mov.w	ip, #12
   1064c:	e004      	b.n	10658 <reset_motors+0x98>
   1064e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10652:	e7ee      	b.n	10632 <reset_motors+0x72>
   10654:	f06f 0c1b 	mvn.w	ip, #27
   10658:	b13a      	cbz	r2, 1066a <reset_motors+0xaa>
   1065a:	2103      	movs	r1, #3
   1065c:	7139      	strb	r1, [r7, #4]
   1065e:	2100      	movs	r1, #0
   10660:	7179      	strb	r1, [r7, #5]
   10662:	71b9      	strb	r1, [r7, #6]
   10664:	71f9      	strb	r1, [r7, #7]
   10666:	6878      	ldr	r0, [r7, #4]
   10668:	6118      	str	r0, [r3, #16]
   1066a:	2100      	movs	r1, #0
   1066c:	f36f 0100 	bfc	r1, #0, #1
   10670:	f36f 0141 	bfc	r1, #1, #1
   10674:	f36f 0182 	bfc	r1, #2, #1
   10678:	f36f 01c5 	bfc	r1, #3, #3
   1067c:	2301      	movs	r3, #1
   1067e:	f363 1188 	bfi	r1, r3, #6, #3
   10682:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   10686:	f363 2152 	bfi	r1, r3, #9, #10
   1068a:	f36f 41de 	bfc	r1, #19, #12
   1068e:	f36f 71df 	bfc	r1, #31, #1
   10692:	2300      	movs	r3, #0
   10694:	4828      	ldr	r0, [pc, #160]	; (10738 <reset_motors+0x178>)
   10696:	f003 fb31 	bl	13cfc <z_impl_z_log_msg_static_create>
   1069a:	46a5      	mov	sp, r4
    return;
} /* reset_motors */
   1069c:	3724      	adds	r7, #36	; 0x24
   1069e:	46bd      	mov	sp, r7
   106a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Error %d: failed to reset left motors", motor_err);
   106a2:	f06f 0c1b 	mvn.w	ip, #27
   106a6:	e7d7      	b.n	10658 <reset_motors+0x98>
			LOG_ERR("Error %d: failed to reset right motors", motor_err);
   106a8:	466d      	mov	r5, sp
   106aa:	b088      	sub	sp, #32
   106ac:	466b      	mov	r3, sp
   106ae:	f113 0210 	adds.w	r2, r3, #16
   106b2:	d00d      	beq.n	106d0 <reset_motors+0x110>
   106b4:	210c      	movs	r1, #12
   106b6:	b13a      	cbz	r2, 106c8 <reset_motors+0x108>
   106b8:	460c      	mov	r4, r1
   106ba:	2904      	cmp	r1, #4
   106bc:	dd01      	ble.n	106c2 <reset_motors+0x102>
   106be:	4e20      	ldr	r6, [pc, #128]	; (10740 <reset_motors+0x180>)
   106c0:	615e      	str	r6, [r3, #20]
   106c2:	2c08      	cmp	r4, #8
   106c4:	dd07      	ble.n	106d6 <reset_motors+0x116>
   106c6:	6198      	str	r0, [r3, #24]
   106c8:	290b      	cmp	r1, #11
   106ca:	dd29      	ble.n	10720 <reset_motors+0x160>
   106cc:	240c      	movs	r4, #12
   106ce:	e004      	b.n	106da <reset_motors+0x11a>
   106d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   106d4:	e7ef      	b.n	106b6 <reset_motors+0xf6>
   106d6:	f06f 041b 	mvn.w	r4, #27
   106da:	b13a      	cbz	r2, 106ec <reset_motors+0x12c>
   106dc:	2103      	movs	r1, #3
   106de:	7139      	strb	r1, [r7, #4]
   106e0:	2100      	movs	r1, #0
   106e2:	7179      	strb	r1, [r7, #5]
   106e4:	71b9      	strb	r1, [r7, #6]
   106e6:	71f9      	strb	r1, [r7, #7]
   106e8:	6878      	ldr	r0, [r7, #4]
   106ea:	6118      	str	r0, [r3, #16]
   106ec:	2100      	movs	r1, #0
   106ee:	f36f 0100 	bfc	r1, #0, #1
   106f2:	f36f 0141 	bfc	r1, #1, #1
   106f6:	f36f 0182 	bfc	r1, #2, #1
   106fa:	f36f 01c5 	bfc	r1, #3, #3
   106fe:	2301      	movs	r3, #1
   10700:	f363 1188 	bfi	r1, r3, #6, #3
   10704:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   10708:	f364 2152 	bfi	r1, r4, #9, #10
   1070c:	f36f 41de 	bfc	r1, #19, #12
   10710:	f36f 71df 	bfc	r1, #31, #1
   10714:	2300      	movs	r3, #0
   10716:	4808      	ldr	r0, [pc, #32]	; (10738 <reset_motors+0x178>)
   10718:	f003 faf0 	bl	13cfc <z_impl_z_log_msg_static_create>
   1071c:	46ad      	mov	sp, r5
			return;
   1071e:	e7bd      	b.n	1069c <reset_motors+0xdc>
			LOG_ERR("Error %d: failed to reset right motors", motor_err);
   10720:	f06f 041b 	mvn.w	r4, #27
   10724:	e7d9      	b.n	106da <reset_motors+0x11a>
   10726:	bf00      	nop
   10728:	0016e360 	.word	0x0016e360
   1072c:	0002fc4c 	.word	0x0002fc4c
   10730:	0002fc3c 	.word	0x0002fc3c
   10734:	0002fa38 	.word	0x0002fa38
   10738:	0002f7e8 	.word	0x0002f7e8
   1073c:	0002f9e8 	.word	0x0002f9e8
   10740:	0002fa10 	.word	0x0002fa10

00010744 <on_disconnected>:
{
   10744:	b5b0      	push	{r4, r5, r7, lr}
   10746:	b082      	sub	sp, #8
   10748:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason: %d)", reason);
   1074a:	466c      	mov	r4, sp
   1074c:	b088      	sub	sp, #32
   1074e:	466b      	mov	r3, sp
   10750:	f113 0210 	adds.w	r2, r3, #16
   10754:	d03e      	beq.n	107d4 <on_disconnected+0x90>
   10756:	200c      	movs	r0, #12
   10758:	b142      	cbz	r2, 1076c <on_disconnected+0x28>
   1075a:	4684      	mov	ip, r0
   1075c:	2804      	cmp	r0, #4
   1075e:	dd01      	ble.n	10764 <on_disconnected+0x20>
   10760:	4d1f      	ldr	r5, [pc, #124]	; (107e0 <on_disconnected+0x9c>)
   10762:	615d      	str	r5, [r3, #20]
   10764:	f1bc 0f08 	cmp.w	ip, #8
   10768:	dd00      	ble.n	1076c <on_disconnected+0x28>
   1076a:	6199      	str	r1, [r3, #24]
   1076c:	280b      	cmp	r0, #11
   1076e:	dd34      	ble.n	107da <on_disconnected+0x96>
   10770:	f04f 0c0c 	mov.w	ip, #12
   10774:	b13a      	cbz	r2, 10786 <on_disconnected+0x42>
   10776:	2103      	movs	r1, #3
   10778:	7139      	strb	r1, [r7, #4]
   1077a:	2100      	movs	r1, #0
   1077c:	7179      	strb	r1, [r7, #5]
   1077e:	71b9      	strb	r1, [r7, #6]
   10780:	71f9      	strb	r1, [r7, #7]
   10782:	6878      	ldr	r0, [r7, #4]
   10784:	6118      	str	r0, [r3, #16]
   10786:	2100      	movs	r1, #0
   10788:	f36f 0100 	bfc	r1, #0, #1
   1078c:	f36f 0141 	bfc	r1, #1, #1
   10790:	f36f 0182 	bfc	r1, #2, #1
   10794:	f36f 01c5 	bfc	r1, #3, #3
   10798:	2303      	movs	r3, #3
   1079a:	f363 1188 	bfi	r1, r3, #6, #3
   1079e:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   107a2:	f36c 2152 	bfi	r1, ip, #9, #10
   107a6:	f36f 41de 	bfc	r1, #19, #12
   107aa:	f36f 71df 	bfc	r1, #31, #1
   107ae:	2300      	movs	r3, #0
   107b0:	480c      	ldr	r0, [pc, #48]	; (107e4 <on_disconnected+0xa0>)
   107b2:	f003 faa3 	bl	13cfc <z_impl_z_log_msg_static_create>
   107b6:	46a5      	mov	sp, r4
	dk_set_led_off(CONN_STATUS_LED);
   107b8:	2001      	movs	r0, #1
   107ba:	f01d faa8 	bl	2dd0e <dk_set_led_off>
	if(current_conn) {
   107be:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <on_disconnected+0xa4>)
   107c0:	6818      	ldr	r0, [r3, #0]
   107c2:	b120      	cbz	r0, 107ce <on_disconnected+0x8a>
		bt_conn_unref(current_conn);
   107c4:	f00a fcbc 	bl	1b140 <bt_conn_unref>
		current_conn = NULL;
   107c8:	4b07      	ldr	r3, [pc, #28]	; (107e8 <on_disconnected+0xa4>)
   107ca:	2200      	movs	r2, #0
   107cc:	601a      	str	r2, [r3, #0]
} /* on_disconnected */
   107ce:	3708      	adds	r7, #8
   107d0:	46bd      	mov	sp, r7
   107d2:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_INF("Disconnected (reason: %d)", reason);
   107d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   107d8:	e7be      	b.n	10758 <on_disconnected+0x14>
   107da:	f06f 0c1b 	mvn.w	ip, #27
   107de:	e7c9      	b.n	10774 <on_disconnected+0x30>
   107e0:	0002fa54 	.word	0x0002fa54
   107e4:	0002f7e8 	.word	0x0002f7e8
   107e8:	20009778 	.word	0x20009778

000107ec <config_dk_leds>:


static void config_dk_leds(void)
{
   107ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   107ee:	b083      	sub	sp, #12
   107f0:	af00      	add	r7, sp, #0
    int err;
    err = dk_leds_init();
   107f2:	f011 fd3d 	bl	22270 <dk_leds_init>
    if (err) {
   107f6:	b3b0      	cbz	r0, 10866 <config_dk_leds+0x7a>
   107f8:	4605      	mov	r5, r0
        LOG_ERR("Couldn't init LEDS (err %d)", err);
   107fa:	466c      	mov	r4, sp
   107fc:	b088      	sub	sp, #32
   107fe:	466b      	mov	r3, sp
   10800:	f113 0210 	adds.w	r2, r3, #16
   10804:	d032      	beq.n	1086c <config_dk_leds+0x80>
   10806:	210c      	movs	r1, #12
   10808:	b13a      	cbz	r2, 1081a <config_dk_leds+0x2e>
   1080a:	4608      	mov	r0, r1
   1080c:	2904      	cmp	r1, #4
   1080e:	dd01      	ble.n	10814 <config_dk_leds+0x28>
   10810:	4e19      	ldr	r6, [pc, #100]	; (10878 <config_dk_leds+0x8c>)
   10812:	615e      	str	r6, [r3, #20]
   10814:	2808      	cmp	r0, #8
   10816:	dd00      	ble.n	1081a <config_dk_leds+0x2e>
   10818:	619d      	str	r5, [r3, #24]
   1081a:	290b      	cmp	r1, #11
   1081c:	dd29      	ble.n	10872 <config_dk_leds+0x86>
   1081e:	f04f 0c0c 	mov.w	ip, #12
   10822:	b13a      	cbz	r2, 10834 <config_dk_leds+0x48>
   10824:	2103      	movs	r1, #3
   10826:	7139      	strb	r1, [r7, #4]
   10828:	2100      	movs	r1, #0
   1082a:	7179      	strb	r1, [r7, #5]
   1082c:	71b9      	strb	r1, [r7, #6]
   1082e:	71f9      	strb	r1, [r7, #7]
   10830:	6878      	ldr	r0, [r7, #4]
   10832:	6118      	str	r0, [r3, #16]
   10834:	2100      	movs	r1, #0
   10836:	f36f 0100 	bfc	r1, #0, #1
   1083a:	f36f 0141 	bfc	r1, #1, #1
   1083e:	f36f 0182 	bfc	r1, #2, #1
   10842:	f36f 01c5 	bfc	r1, #3, #3
   10846:	2301      	movs	r3, #1
   10848:	f363 1188 	bfi	r1, r3, #6, #3
   1084c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   10850:	f36c 2152 	bfi	r1, ip, #9, #10
   10854:	f36f 41de 	bfc	r1, #19, #12
   10858:	f36f 71df 	bfc	r1, #31, #1
   1085c:	2300      	movs	r3, #0
   1085e:	4807      	ldr	r0, [pc, #28]	; (1087c <config_dk_leds+0x90>)
   10860:	f003 fa4c 	bl	13cfc <z_impl_z_log_msg_static_create>
   10864:	46a5      	mov	sp, r4
    }
    return;
} /* config_dk_leds */
   10866:	370c      	adds	r7, #12
   10868:	46bd      	mov	sp, r7
   1086a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("Couldn't init LEDS (err %d)", err);
   1086c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10870:	e7ca      	b.n	10808 <config_dk_leds+0x1c>
   10872:	f06f 0c1b 	mvn.w	ip, #27
   10876:	e7d4      	b.n	10822 <config_dk_leds+0x36>
   10878:	0002fa70 	.word	0x0002fa70
   1087c:	0002f7e8 	.word	0x0002f7e8

00010880 <update_motors>:
{
   10880:	b5f0      	push	{r4, r5, r6, r7, lr}
   10882:	b089      	sub	sp, #36	; 0x24
   10884:	af00      	add	r7, sp, #0
    uint8_t dir = dir_ascii - '0';          // Convert to uint8
   10886:	3830      	subs	r0, #48	; 0x30
   10888:	b2c0      	uxtb	r0, r0
    switch(dir)
   1088a:	2803      	cmp	r0, #3
   1088c:	d835      	bhi.n	108fa <update_motors+0x7a>
   1088e:	e8df f000 	tbb	[pc, r0]
   10892:	5702      	.short	0x5702
   10894:	312e      	.short	0x312e
   10896:	4ca2      	ldr	r4, [pc, #648]	; (10b20 <update_motors+0x2a0>)
   10898:	4625      	mov	r5, r4
    motor_err = pwm_set_pulse_dt(&motors_l, motors_l_pwm_ns);
   1089a:	4629      	mov	r1, r5
   1089c:	48a1      	ldr	r0, [pc, #644]	; (10b24 <update_motors+0x2a4>)
   1089e:	f018 fc30 	bl	29102 <pwm_set_pulse_dt>
    if (motor_err < 0) {
   108a2:	2800      	cmp	r0, #0
   108a4:	db4f      	blt.n	10946 <update_motors+0xc6>
    motor_err = pwm_set_pulse_dt(&motors_r, motors_r_pwm_ns);
   108a6:	4621      	mov	r1, r4
   108a8:	489f      	ldr	r0, [pc, #636]	; (10b28 <update_motors+0x2a8>)
   108aa:	f018 fc2a 	bl	29102 <pwm_set_pulse_dt>
    if (motor_err < 0) {
   108ae:	2800      	cmp	r0, #0
   108b0:	f2c0 8088 	blt.w	109c4 <update_motors+0x144>
    LOG_INF("Left motor set to %u us", motors_l_pwm_ns/1000);
   108b4:	4b9d      	ldr	r3, [pc, #628]	; (10b2c <update_motors+0x2ac>)
   108b6:	fba3 3505 	umull	r3, r5, r3, r5
   108ba:	09ad      	lsrs	r5, r5, #6
   108bc:	466e      	mov	r6, sp
   108be:	b088      	sub	sp, #32
   108c0:	466b      	mov	r3, sp
   108c2:	f113 0210 	adds.w	r2, r3, #16
   108c6:	f000 80bc 	beq.w	10a42 <update_motors+0x1c2>
   108ca:	210c      	movs	r1, #12
   108cc:	b152      	cbz	r2, 108e4 <update_motors+0x64>
   108ce:	4608      	mov	r0, r1
   108d0:	2904      	cmp	r1, #4
   108d2:	dd03      	ble.n	108dc <update_motors+0x5c>
   108d4:	f8df c258 	ldr.w	ip, [pc, #600]	; 10b30 <update_motors+0x2b0>
   108d8:	f8c3 c014 	str.w	ip, [r3, #20]
   108dc:	2808      	cmp	r0, #8
   108de:	f340 80b3 	ble.w	10a48 <update_motors+0x1c8>
   108e2:	619d      	str	r5, [r3, #24]
   108e4:	290b      	cmp	r1, #11
   108e6:	f340 80eb 	ble.w	10ac0 <update_motors+0x240>
   108ea:	250c      	movs	r5, #12
   108ec:	e0ae      	b.n	10a4c <update_motors+0x1cc>
            motors_r_pwm_ns = PWM_USEC(1500 - ROBOT_SPEED);
   108ee:	4c91      	ldr	r4, [pc, #580]	; (10b34 <update_motors+0x2b4>)
            motors_l_pwm_ns = PWM_USEC(1500 - ROBOT_SPEED);
   108f0:	4625      	mov	r5, r4
            break;
   108f2:	e7d2      	b.n	1089a <update_motors+0x1a>
            motors_r_pwm_ns = PWM_USEC(1500 + ROBOT_SPEED);
   108f4:	4c8a      	ldr	r4, [pc, #552]	; (10b20 <update_motors+0x2a0>)
            motors_l_pwm_ns = PWM_USEC(1500 - ROBOT_SPEED);
   108f6:	4d8f      	ldr	r5, [pc, #572]	; (10b34 <update_motors+0x2b4>)
            break;
   108f8:	e7cf      	b.n	1089a <update_motors+0x1a>
            LOG_INF("Controller incorrectly configured. Set forwards = 0, right = 1, backwards = 2, left = 3.");
   108fa:	4b8f      	ldr	r3, [pc, #572]	; (10b38 <update_motors+0x2b8>)
   108fc:	61fb      	str	r3, [r7, #28]
   108fe:	2302      	movs	r3, #2
   10900:	713b      	strb	r3, [r7, #4]
   10902:	2300      	movs	r3, #0
   10904:	717b      	strb	r3, [r7, #5]
   10906:	71bb      	strb	r3, [r7, #6]
   10908:	71fb      	strb	r3, [r7, #7]
   1090a:	687a      	ldr	r2, [r7, #4]
   1090c:	61ba      	str	r2, [r7, #24]
   1090e:	4619      	mov	r1, r3
   10910:	f363 0100 	bfi	r1, r3, #0, #1
   10914:	f363 0141 	bfi	r1, r3, #1, #1
   10918:	f363 0182 	bfi	r1, r3, #2, #1
   1091c:	f363 01c5 	bfi	r1, r3, #3, #3
   10920:	2203      	movs	r2, #3
   10922:	f362 1188 	bfi	r1, r2, #6, #3
   10926:	2208      	movs	r2, #8
   10928:	f362 2152 	bfi	r1, r2, #9, #10
   1092c:	f363 41de 	bfi	r1, r3, #19, #12
   10930:	f363 71df 	bfi	r1, r3, #31, #1
   10934:	f107 0218 	add.w	r2, r7, #24
   10938:	4880      	ldr	r0, [pc, #512]	; (10b3c <update_motors+0x2bc>)
   1093a:	f003 f9df 	bl	13cfc <z_impl_z_log_msg_static_create>
   1093e:	e7ac      	b.n	1089a <update_motors+0x1a>
            motors_r_pwm_ns = PWM_USEC(1500 - ROBOT_SPEED);
   10940:	4c7c      	ldr	r4, [pc, #496]	; (10b34 <update_motors+0x2b4>)
            motors_l_pwm_ns = PWM_USEC(1500 + ROBOT_SPEED);
   10942:	4d77      	ldr	r5, [pc, #476]	; (10b20 <update_motors+0x2a0>)
   10944:	e7a9      	b.n	1089a <update_motors+0x1a>
			LOG_ERR("Error %d: failed to set pulse width of left motors", motor_err);
   10946:	466d      	mov	r5, sp
   10948:	b088      	sub	sp, #32
   1094a:	466b      	mov	r3, sp
   1094c:	f113 0210 	adds.w	r2, r3, #16
   10950:	d00d      	beq.n	1096e <update_motors+0xee>
   10952:	210c      	movs	r1, #12
   10954:	b13a      	cbz	r2, 10966 <update_motors+0xe6>
   10956:	460c      	mov	r4, r1
   10958:	2904      	cmp	r1, #4
   1095a:	dd01      	ble.n	10960 <update_motors+0xe0>
   1095c:	4e78      	ldr	r6, [pc, #480]	; (10b40 <update_motors+0x2c0>)
   1095e:	615e      	str	r6, [r3, #20]
   10960:	2c08      	cmp	r4, #8
   10962:	dd07      	ble.n	10974 <update_motors+0xf4>
   10964:	6198      	str	r0, [r3, #24]
   10966:	290b      	cmp	r1, #11
   10968:	dd29      	ble.n	109be <update_motors+0x13e>
   1096a:	240c      	movs	r4, #12
   1096c:	e004      	b.n	10978 <update_motors+0xf8>
   1096e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10972:	e7ef      	b.n	10954 <update_motors+0xd4>
   10974:	f06f 041b 	mvn.w	r4, #27
   10978:	b13a      	cbz	r2, 1098a <update_motors+0x10a>
   1097a:	2103      	movs	r1, #3
   1097c:	7139      	strb	r1, [r7, #4]
   1097e:	2100      	movs	r1, #0
   10980:	7179      	strb	r1, [r7, #5]
   10982:	71b9      	strb	r1, [r7, #6]
   10984:	71f9      	strb	r1, [r7, #7]
   10986:	6878      	ldr	r0, [r7, #4]
   10988:	6118      	str	r0, [r3, #16]
   1098a:	2100      	movs	r1, #0
   1098c:	f36f 0100 	bfc	r1, #0, #1
   10990:	f36f 0141 	bfc	r1, #1, #1
   10994:	f36f 0182 	bfc	r1, #2, #1
   10998:	f36f 01c5 	bfc	r1, #3, #3
   1099c:	2301      	movs	r3, #1
   1099e:	f363 1188 	bfi	r1, r3, #6, #3
   109a2:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   109a6:	f363 2152 	bfi	r1, r3, #9, #10
   109aa:	f36f 41de 	bfc	r1, #19, #12
   109ae:	f36f 71df 	bfc	r1, #31, #1
   109b2:	2300      	movs	r3, #0
   109b4:	4861      	ldr	r0, [pc, #388]	; (10b3c <update_motors+0x2bc>)
   109b6:	f003 f9a1 	bl	13cfc <z_impl_z_log_msg_static_create>
   109ba:	46ad      	mov	sp, r5
			return;
   109bc:	e0aa      	b.n	10b14 <update_motors+0x294>
			LOG_ERR("Error %d: failed to set pulse width of left motors", motor_err);
   109be:	f06f 041b 	mvn.w	r4, #27
   109c2:	e7d9      	b.n	10978 <update_motors+0xf8>
			LOG_ERR("Error %d: failed to set pulse width of right motors", motor_err);
   109c4:	466d      	mov	r5, sp
   109c6:	b088      	sub	sp, #32
   109c8:	466b      	mov	r3, sp
   109ca:	f113 0210 	adds.w	r2, r3, #16
   109ce:	d00d      	beq.n	109ec <update_motors+0x16c>
   109d0:	210c      	movs	r1, #12
   109d2:	b13a      	cbz	r2, 109e4 <update_motors+0x164>
   109d4:	460c      	mov	r4, r1
   109d6:	2904      	cmp	r1, #4
   109d8:	dd01      	ble.n	109de <update_motors+0x15e>
   109da:	4e5a      	ldr	r6, [pc, #360]	; (10b44 <update_motors+0x2c4>)
   109dc:	615e      	str	r6, [r3, #20]
   109de:	2c08      	cmp	r4, #8
   109e0:	dd07      	ble.n	109f2 <update_motors+0x172>
   109e2:	6198      	str	r0, [r3, #24]
   109e4:	290b      	cmp	r1, #11
   109e6:	dd29      	ble.n	10a3c <update_motors+0x1bc>
   109e8:	240c      	movs	r4, #12
   109ea:	e004      	b.n	109f6 <update_motors+0x176>
   109ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   109f0:	e7ef      	b.n	109d2 <update_motors+0x152>
   109f2:	f06f 041b 	mvn.w	r4, #27
   109f6:	b13a      	cbz	r2, 10a08 <update_motors+0x188>
   109f8:	2103      	movs	r1, #3
   109fa:	7139      	strb	r1, [r7, #4]
   109fc:	2100      	movs	r1, #0
   109fe:	7179      	strb	r1, [r7, #5]
   10a00:	71b9      	strb	r1, [r7, #6]
   10a02:	71f9      	strb	r1, [r7, #7]
   10a04:	6878      	ldr	r0, [r7, #4]
   10a06:	6118      	str	r0, [r3, #16]
   10a08:	2100      	movs	r1, #0
   10a0a:	f36f 0100 	bfc	r1, #0, #1
   10a0e:	f36f 0141 	bfc	r1, #1, #1
   10a12:	f36f 0182 	bfc	r1, #2, #1
   10a16:	f36f 01c5 	bfc	r1, #3, #3
   10a1a:	2301      	movs	r3, #1
   10a1c:	f363 1188 	bfi	r1, r3, #6, #3
   10a20:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   10a24:	f363 2152 	bfi	r1, r3, #9, #10
   10a28:	f36f 41de 	bfc	r1, #19, #12
   10a2c:	f36f 71df 	bfc	r1, #31, #1
   10a30:	2300      	movs	r3, #0
   10a32:	4842      	ldr	r0, [pc, #264]	; (10b3c <update_motors+0x2bc>)
   10a34:	f003 f962 	bl	13cfc <z_impl_z_log_msg_static_create>
   10a38:	46ad      	mov	sp, r5
			return;
   10a3a:	e06b      	b.n	10b14 <update_motors+0x294>
			LOG_ERR("Error %d: failed to set pulse width of right motors", motor_err);
   10a3c:	f06f 041b 	mvn.w	r4, #27
   10a40:	e7d9      	b.n	109f6 <update_motors+0x176>
    LOG_INF("Left motor set to %u us", motors_l_pwm_ns/1000);
   10a42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10a46:	e741      	b.n	108cc <update_motors+0x4c>
   10a48:	f06f 051b 	mvn.w	r5, #27
   10a4c:	b13a      	cbz	r2, 10a5e <update_motors+0x1de>
   10a4e:	2103      	movs	r1, #3
   10a50:	7139      	strb	r1, [r7, #4]
   10a52:	2100      	movs	r1, #0
   10a54:	7179      	strb	r1, [r7, #5]
   10a56:	71b9      	strb	r1, [r7, #6]
   10a58:	71f9      	strb	r1, [r7, #7]
   10a5a:	6878      	ldr	r0, [r7, #4]
   10a5c:	6118      	str	r0, [r3, #16]
   10a5e:	2100      	movs	r1, #0
   10a60:	f36f 0100 	bfc	r1, #0, #1
   10a64:	f36f 0141 	bfc	r1, #1, #1
   10a68:	f36f 0182 	bfc	r1, #2, #1
   10a6c:	f36f 01c5 	bfc	r1, #3, #3
   10a70:	2303      	movs	r3, #3
   10a72:	f363 1188 	bfi	r1, r3, #6, #3
   10a76:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   10a7a:	f363 2152 	bfi	r1, r3, #9, #10
   10a7e:	f36f 41de 	bfc	r1, #19, #12
   10a82:	f36f 71df 	bfc	r1, #31, #1
   10a86:	2300      	movs	r3, #0
   10a88:	482c      	ldr	r0, [pc, #176]	; (10b3c <update_motors+0x2bc>)
   10a8a:	f003 f937 	bl	13cfc <z_impl_z_log_msg_static_create>
   10a8e:	46b5      	mov	sp, r6
    LOG_INF("Right motor set to %u us", motors_r_pwm_ns/1000);
   10a90:	4b26      	ldr	r3, [pc, #152]	; (10b2c <update_motors+0x2ac>)
   10a92:	fba3 3404 	umull	r3, r4, r3, r4
   10a96:	09a4      	lsrs	r4, r4, #6
   10a98:	466d      	mov	r5, sp
   10a9a:	b088      	sub	sp, #32
   10a9c:	466b      	mov	r3, sp
   10a9e:	f113 0210 	adds.w	r2, r3, #16
   10aa2:	d010      	beq.n	10ac6 <update_motors+0x246>
   10aa4:	210c      	movs	r1, #12
   10aa6:	b13a      	cbz	r2, 10ab8 <update_motors+0x238>
   10aa8:	4608      	mov	r0, r1
   10aaa:	2904      	cmp	r1, #4
   10aac:	dd01      	ble.n	10ab2 <update_motors+0x232>
   10aae:	4e26      	ldr	r6, [pc, #152]	; (10b48 <update_motors+0x2c8>)
   10ab0:	615e      	str	r6, [r3, #20]
   10ab2:	2808      	cmp	r0, #8
   10ab4:	dd0a      	ble.n	10acc <update_motors+0x24c>
   10ab6:	619c      	str	r4, [r3, #24]
   10ab8:	290b      	cmp	r1, #11
   10aba:	dd2e      	ble.n	10b1a <update_motors+0x29a>
   10abc:	240c      	movs	r4, #12
   10abe:	e007      	b.n	10ad0 <update_motors+0x250>
    LOG_INF("Left motor set to %u us", motors_l_pwm_ns/1000);
   10ac0:	f06f 051b 	mvn.w	r5, #27
   10ac4:	e7c2      	b.n	10a4c <update_motors+0x1cc>
    LOG_INF("Right motor set to %u us", motors_r_pwm_ns/1000);
   10ac6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10aca:	e7ec      	b.n	10aa6 <update_motors+0x226>
   10acc:	f06f 041b 	mvn.w	r4, #27
   10ad0:	b13a      	cbz	r2, 10ae2 <update_motors+0x262>
   10ad2:	2103      	movs	r1, #3
   10ad4:	7139      	strb	r1, [r7, #4]
   10ad6:	2100      	movs	r1, #0
   10ad8:	7179      	strb	r1, [r7, #5]
   10ada:	71b9      	strb	r1, [r7, #6]
   10adc:	71f9      	strb	r1, [r7, #7]
   10ade:	6878      	ldr	r0, [r7, #4]
   10ae0:	6118      	str	r0, [r3, #16]
   10ae2:	2100      	movs	r1, #0
   10ae4:	f36f 0100 	bfc	r1, #0, #1
   10ae8:	f36f 0141 	bfc	r1, #1, #1
   10aec:	f36f 0182 	bfc	r1, #2, #1
   10af0:	f36f 01c5 	bfc	r1, #3, #3
   10af4:	2303      	movs	r3, #3
   10af6:	f363 1188 	bfi	r1, r3, #6, #3
   10afa:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   10afe:	f363 2152 	bfi	r1, r3, #9, #10
   10b02:	f36f 41de 	bfc	r1, #19, #12
   10b06:	f36f 71df 	bfc	r1, #31, #1
   10b0a:	2300      	movs	r3, #0
   10b0c:	480b      	ldr	r0, [pc, #44]	; (10b3c <update_motors+0x2bc>)
   10b0e:	f003 f8f5 	bl	13cfc <z_impl_z_log_msg_static_create>
   10b12:	46ad      	mov	sp, r5
} /* update_motors */
   10b14:	3724      	adds	r7, #36	; 0x24
   10b16:	46bd      	mov	sp, r7
   10b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LOG_INF("Right motor set to %u us", motors_r_pwm_ns/1000);
   10b1a:	f06f 041b 	mvn.w	r4, #27
   10b1e:	e7d7      	b.n	10ad0 <update_motors+0x250>
   10b20:	001cfde0 	.word	0x001cfde0
   10b24:	0002fc4c 	.word	0x0002fc4c
   10b28:	0002fc3c 	.word	0x0002fc3c
   10b2c:	10624dd3 	.word	0x10624dd3
   10b30:	0002fb50 	.word	0x0002fb50
   10b34:	0010c8e0 	.word	0x0010c8e0
   10b38:	0002fa8c 	.word	0x0002fa8c
   10b3c:	0002f7e8 	.word	0x0002f7e8
   10b40:	0002fae8 	.word	0x0002fae8
   10b44:	0002fb1c 	.word	0x0002fb1c
   10b48:	0002fb68 	.word	0x0002fb68

00010b4c <on_data_received>:
{
   10b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b50:	b084      	sub	sp, #16
   10b52:	af02      	add	r7, sp, #8
   10b54:	4680      	mov	r8, r0
   10b56:	4614      	mov	r4, r2
    uint8_t temp_str[len+1];
   10b58:	f102 0308 	add.w	r3, r2, #8
   10b5c:	08db      	lsrs	r3, r3, #3
   10b5e:	4668      	mov	r0, sp
   10b60:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   10b64:	469d      	mov	sp, r3
   10b66:	ad02      	add	r5, sp, #8
    memcpy(temp_str, data, len);
   10b68:	4628      	mov	r0, r5
   10b6a:	f01a fae5 	bl	2b138 <memcpy>
    temp_str[len] = 0x00;
   10b6e:	2300      	movs	r3, #0
   10b70:	552b      	strb	r3, [r5, r4]
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
   10b72:	466e      	mov	r6, sp
   10b74:	b088      	sub	sp, #32
   10b76:	ab02      	add	r3, sp, #8
   10b78:	f113 0210 	adds.w	r2, r3, #16
   10b7c:	d050      	beq.n	10c20 <on_data_received+0xd4>
   10b7e:	2110      	movs	r1, #16
   10b80:	b16a      	cbz	r2, 10b9e <on_data_received+0x52>
   10b82:	4608      	mov	r0, r1
   10b84:	2904      	cmp	r1, #4
   10b86:	dd03      	ble.n	10b90 <on_data_received+0x44>
   10b88:	f8df c130 	ldr.w	ip, [pc, #304]	; 10cbc <on_data_received+0x170>
   10b8c:	f8c3 c014 	str.w	ip, [r3, #20]
   10b90:	2808      	cmp	r0, #8
   10b92:	dd01      	ble.n	10b98 <on_data_received+0x4c>
   10b94:	f8c3 8018 	str.w	r8, [r3, #24]
   10b98:	280c      	cmp	r0, #12
   10b9a:	dd00      	ble.n	10b9e <on_data_received+0x52>
   10b9c:	61dc      	str	r4, [r3, #28]
   10b9e:	290f      	cmp	r1, #15
   10ba0:	dd41      	ble.n	10c26 <on_data_received+0xda>
   10ba2:	2410      	movs	r4, #16
   10ba4:	b13a      	cbz	r2, 10bb6 <on_data_received+0x6a>
   10ba6:	2104      	movs	r1, #4
   10ba8:	7139      	strb	r1, [r7, #4]
   10baa:	2100      	movs	r1, #0
   10bac:	7179      	strb	r1, [r7, #5]
   10bae:	71b9      	strb	r1, [r7, #6]
   10bb0:	71f9      	strb	r1, [r7, #7]
   10bb2:	6878      	ldr	r0, [r7, #4]
   10bb4:	6118      	str	r0, [r3, #16]
   10bb6:	2100      	movs	r1, #0
   10bb8:	f36f 0100 	bfc	r1, #0, #1
   10bbc:	f36f 0141 	bfc	r1, #1, #1
   10bc0:	f36f 0182 	bfc	r1, #2, #1
   10bc4:	f36f 01c5 	bfc	r1, #3, #3
   10bc8:	2303      	movs	r3, #3
   10bca:	f363 1188 	bfi	r1, r3, #6, #3
   10bce:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   10bd2:	f364 2152 	bfi	r1, r4, #9, #10
   10bd6:	f36f 41de 	bfc	r1, #19, #12
   10bda:	f36f 71df 	bfc	r1, #31, #1
   10bde:	2300      	movs	r3, #0
   10be0:	4837      	ldr	r0, [pc, #220]	; (10cc0 <on_data_received+0x174>)
   10be2:	f003 f88b 	bl	13cfc <z_impl_z_log_msg_static_create>
   10be6:	46b5      	mov	sp, r6
    LOG_INF("Data: %s", temp_str);
   10be8:	466e      	mov	r6, sp
   10bea:	2300      	movs	r3, #0
   10bec:	713b      	strb	r3, [r7, #4]
   10bee:	2302      	movs	r3, #2
   10bf0:	717b      	strb	r3, [r7, #5]
   10bf2:	b088      	sub	sp, #32
   10bf4:	ac02      	add	r4, sp, #8
   10bf6:	f114 0210 	adds.w	r2, r4, #16
   10bfa:	d017      	beq.n	10c2c <on_data_received+0xe0>
   10bfc:	200e      	movs	r0, #14
   10bfe:	b11a      	cbz	r2, 10c08 <on_data_received+0xbc>
   10c00:	2804      	cmp	r0, #4
   10c02:	dd01      	ble.n	10c08 <on_data_received+0xbc>
   10c04:	4b2f      	ldr	r3, [pc, #188]	; (10cc4 <on_data_received+0x178>)
   10c06:	6163      	str	r3, [r4, #20]
   10c08:	2300      	movs	r3, #0
   10c0a:	703b      	strb	r3, [r7, #0]
   10c0c:	2302      	movs	r3, #2
   10c0e:	707b      	strb	r3, [r7, #1]
   10c10:	b1ca      	cbz	r2, 10c46 <on_data_received+0xfa>
   10c12:	2808      	cmp	r0, #8
   10c14:	dd00      	ble.n	10c18 <on_data_received+0xcc>
   10c16:	61a5      	str	r5, [r4, #24]
   10c18:	f104 031c 	add.w	r3, r4, #28
   10c1c:	2100      	movs	r1, #0
   10c1e:	e010      	b.n	10c42 <on_data_received+0xf6>
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
   10c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10c24:	e7ac      	b.n	10b80 <on_data_received+0x34>
   10c26:	f06f 041b 	mvn.w	r4, #27
   10c2a:	e7bb      	b.n	10ba4 <on_data_received+0x58>
    LOG_INF("Data: %s", temp_str);
   10c2c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10c30:	e7e5      	b.n	10bfe <on_data_received+0xb2>
   10c32:	f101 0c08 	add.w	ip, r1, #8
   10c36:	44bc      	add	ip, r7
   10c38:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   10c3c:	f803 cb01 	strb.w	ip, [r3], #1
   10c40:	3101      	adds	r1, #1
   10c42:	2901      	cmp	r1, #1
   10c44:	d9f5      	bls.n	10c32 <on_data_received+0xe6>
   10c46:	280d      	cmp	r0, #13
   10c48:	dd34      	ble.n	10cb4 <on_data_received+0x168>
   10c4a:	230e      	movs	r3, #14
   10c4c:	b142      	cbz	r2, 10c60 <on_data_received+0x114>
   10c4e:	2103      	movs	r1, #3
   10c50:	7139      	strb	r1, [r7, #4]
   10c52:	2100      	movs	r1, #0
   10c54:	7179      	strb	r1, [r7, #5]
   10c56:	71b9      	strb	r1, [r7, #6]
   10c58:	2101      	movs	r1, #1
   10c5a:	71f9      	strb	r1, [r7, #7]
   10c5c:	6878      	ldr	r0, [r7, #4]
   10c5e:	6120      	str	r0, [r4, #16]
   10c60:	2100      	movs	r1, #0
   10c62:	f36f 0100 	bfc	r1, #0, #1
   10c66:	f36f 0141 	bfc	r1, #1, #1
   10c6a:	f36f 0182 	bfc	r1, #2, #1
   10c6e:	f36f 01c5 	bfc	r1, #3, #3
   10c72:	2003      	movs	r0, #3
   10c74:	f360 1188 	bfi	r1, r0, #6, #3
   10c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10c7c:	f363 2152 	bfi	r1, r3, #9, #10
   10c80:	f36f 41de 	bfc	r1, #19, #12
   10c84:	f36f 71df 	bfc	r1, #31, #1
   10c88:	2300      	movs	r3, #0
   10c8a:	480d      	ldr	r0, [pc, #52]	; (10cc0 <on_data_received+0x174>)
   10c8c:	f003 f836 	bl	13cfc <z_impl_z_log_msg_static_create>
   10c90:	46b5      	mov	sp, r6
    update_motors(temp_str[0]); 
   10c92:	7828      	ldrb	r0, [r5, #0]
   10c94:	f7ff fdf4 	bl	10880 <update_motors>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   10c98:	2200      	movs	r2, #0
   10c9a:	2300      	movs	r3, #0
   10c9c:	e9cd 2300 	strd	r2, r3, [sp]
   10ca0:	f640 02f6 	movw	r2, #2294	; 0x8f6
   10ca4:	2300      	movs	r3, #0
   10ca6:	4808      	ldr	r0, [pc, #32]	; (10cc8 <on_data_received+0x17c>)
   10ca8:	f017 fce4 	bl	28674 <z_impl_k_timer_start>
} /* on_data_received */
   10cac:	3708      	adds	r7, #8
   10cae:	46bd      	mov	sp, r7
   10cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LOG_INF("Data: %s", temp_str);
   10cb4:	f06f 031b 	mvn.w	r3, #27
   10cb8:	e7c8      	b.n	10c4c <on_data_received+0x100>
   10cba:	bf00      	nop
   10cbc:	0002fb84 	.word	0x0002fb84
   10cc0:	0002f7e8 	.word	0x0002f7e8
   10cc4:	0002fba8 	.word	0x0002fba8
   10cc8:	20008498 	.word	0x20008498

00010ccc <main>:

void main(void)
{
   10ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cce:	b089      	sub	sp, #36	; 0x24
   10cd0:	af00      	add	r7, sp, #0
    int err;
    int blink_status = 0;
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
   10cd2:	466d      	mov	r5, sp
   10cd4:	2300      	movs	r3, #0
   10cd6:	713b      	strb	r3, [r7, #4]
   10cd8:	2302      	movs	r3, #2
   10cda:	717b      	strb	r3, [r7, #5]
   10cdc:	b088      	sub	sp, #32
   10cde:	466c      	mov	r4, sp
   10ce0:	f114 0210 	adds.w	r2, r4, #16
   10ce4:	d012      	beq.n	10d0c <main+0x40>
   10ce6:	200e      	movs	r0, #14
   10ce8:	b11a      	cbz	r2, 10cf2 <main+0x26>
   10cea:	2804      	cmp	r0, #4
   10cec:	dd01      	ble.n	10cf2 <main+0x26>
   10cee:	4bbc      	ldr	r3, [pc, #752]	; (10fe0 <main+0x314>)
   10cf0:	6163      	str	r3, [r4, #20]
   10cf2:	2300      	movs	r3, #0
   10cf4:	703b      	strb	r3, [r7, #0]
   10cf6:	2302      	movs	r3, #2
   10cf8:	707b      	strb	r3, [r7, #1]
   10cfa:	b1aa      	cbz	r2, 10d28 <main+0x5c>
   10cfc:	2808      	cmp	r0, #8
   10cfe:	dd01      	ble.n	10d04 <main+0x38>
   10d00:	4bb8      	ldr	r3, [pc, #736]	; (10fe4 <main+0x318>)
   10d02:	61a3      	str	r3, [r4, #24]
   10d04:	f104 031c 	add.w	r3, r4, #28
   10d08:	2100      	movs	r1, #0
   10d0a:	e00b      	b.n	10d24 <main+0x58>
   10d0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10d10:	e7ea      	b.n	10ce8 <main+0x1c>
   10d12:	f101 0620 	add.w	r6, r1, #32
   10d16:	eb06 0c07 	add.w	ip, r6, r7
   10d1a:	f81c cc20 	ldrb.w	ip, [ip, #-32]
   10d1e:	f803 cb01 	strb.w	ip, [r3], #1
   10d22:	3101      	adds	r1, #1
   10d24:	2901      	cmp	r1, #1
   10d26:	d9f4      	bls.n	10d12 <main+0x46>
   10d28:	280d      	cmp	r0, #13
   10d2a:	dd40      	ble.n	10dae <main+0xe2>
   10d2c:	230e      	movs	r3, #14
   10d2e:	b142      	cbz	r2, 10d42 <main+0x76>
   10d30:	2103      	movs	r1, #3
   10d32:	7139      	strb	r1, [r7, #4]
   10d34:	2100      	movs	r1, #0
   10d36:	7179      	strb	r1, [r7, #5]
   10d38:	71b9      	strb	r1, [r7, #6]
   10d3a:	2101      	movs	r1, #1
   10d3c:	71f9      	strb	r1, [r7, #7]
   10d3e:	6878      	ldr	r0, [r7, #4]
   10d40:	6120      	str	r0, [r4, #16]
   10d42:	2100      	movs	r1, #0
   10d44:	f36f 0100 	bfc	r1, #0, #1
   10d48:	f36f 0141 	bfc	r1, #1, #1
   10d4c:	f36f 0182 	bfc	r1, #2, #1
   10d50:	f36f 01c5 	bfc	r1, #3, #3
   10d54:	2003      	movs	r0, #3
   10d56:	f360 1188 	bfi	r1, r0, #6, #3
   10d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10d5e:	f363 2152 	bfi	r1, r3, #9, #10
   10d62:	f36f 41de 	bfc	r1, #19, #12
   10d66:	f36f 71df 	bfc	r1, #31, #1
   10d6a:	2300      	movs	r3, #0
   10d6c:	489e      	ldr	r0, [pc, #632]	; (10fe8 <main+0x31c>)
   10d6e:	f002 ffc5 	bl	13cfc <z_impl_z_log_msg_static_create>
   10d72:	46ad      	mov	sp, r5

    config_dk_leds();
   10d74:	f7ff fd3a 	bl	107ec <config_dk_leds>

    err = bluetooth_init(&bluetooth_callbacks, &remote_callbacks);
   10d78:	499c      	ldr	r1, [pc, #624]	; (10fec <main+0x320>)
   10d7a:	489d      	ldr	r0, [pc, #628]	; (10ff0 <main+0x324>)
   10d7c:	f000 f9ee 	bl	1115c <bluetooth_init>
    if (err) {
   10d80:	4604      	mov	r4, r0
   10d82:	2800      	cmp	r0, #0
   10d84:	d03d      	beq.n	10e02 <main+0x136>
        LOG_INF("Couldn't initialize Bluetooth. err: %d", err);
   10d86:	466d      	mov	r5, sp
   10d88:	b088      	sub	sp, #32
   10d8a:	466b      	mov	r3, sp
   10d8c:	f113 0210 	adds.w	r2, r3, #16
   10d90:	d010      	beq.n	10db4 <main+0xe8>
   10d92:	210c      	movs	r1, #12
   10d94:	b13a      	cbz	r2, 10da6 <main+0xda>
   10d96:	4608      	mov	r0, r1
   10d98:	2904      	cmp	r1, #4
   10d9a:	dd01      	ble.n	10da0 <main+0xd4>
   10d9c:	4e95      	ldr	r6, [pc, #596]	; (10ff4 <main+0x328>)
   10d9e:	615e      	str	r6, [r3, #20]
   10da0:	2808      	cmp	r0, #8
   10da2:	dd0a      	ble.n	10dba <main+0xee>
   10da4:	619c      	str	r4, [r3, #24]
   10da6:	290b      	cmp	r1, #11
   10da8:	dd4e      	ble.n	10e48 <main+0x17c>
   10daa:	240c      	movs	r4, #12
   10dac:	e007      	b.n	10dbe <main+0xf2>
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
   10dae:	f06f 031b 	mvn.w	r3, #27
   10db2:	e7bc      	b.n	10d2e <main+0x62>
        LOG_INF("Couldn't initialize Bluetooth. err: %d", err);
   10db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10db8:	e7ec      	b.n	10d94 <main+0xc8>
   10dba:	f06f 041b 	mvn.w	r4, #27
   10dbe:	b13a      	cbz	r2, 10dd0 <main+0x104>
   10dc0:	2103      	movs	r1, #3
   10dc2:	7139      	strb	r1, [r7, #4]
   10dc4:	2100      	movs	r1, #0
   10dc6:	7179      	strb	r1, [r7, #5]
   10dc8:	71b9      	strb	r1, [r7, #6]
   10dca:	71f9      	strb	r1, [r7, #7]
   10dcc:	6878      	ldr	r0, [r7, #4]
   10dce:	6118      	str	r0, [r3, #16]
   10dd0:	2100      	movs	r1, #0
   10dd2:	f36f 0100 	bfc	r1, #0, #1
   10dd6:	f36f 0141 	bfc	r1, #1, #1
   10dda:	f36f 0182 	bfc	r1, #2, #1
   10dde:	f36f 01c5 	bfc	r1, #3, #3
   10de2:	2303      	movs	r3, #3
   10de4:	f363 1188 	bfi	r1, r3, #6, #3
   10de8:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   10dec:	f363 2152 	bfi	r1, r3, #9, #10
   10df0:	f36f 41de 	bfc	r1, #19, #12
   10df4:	f36f 71df 	bfc	r1, #31, #1
   10df8:	2300      	movs	r3, #0
   10dfa:	487b      	ldr	r0, [pc, #492]	; (10fe8 <main+0x31c>)
   10dfc:	f002 ff7e 	bl	13cfc <z_impl_z_log_msg_static_create>
   10e00:	46ad      	mov	sp, r5
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10e02:	487d      	ldr	r0, [pc, #500]	; (10ff8 <main+0x32c>)
   10e04:	f01d ffa6 	bl	2ed54 <z_device_is_ready>
    }

    if (!device_is_ready(motors_l.dev)) {
   10e08:	2800      	cmp	r0, #0
   10e0a:	d15a      	bne.n	10ec2 <main+0x1f6>
		LOG_ERR("Error: PWM device %s is not ready\n", motors_l.dev->name);
   10e0c:	4b7a      	ldr	r3, [pc, #488]	; (10ff8 <main+0x32c>)
   10e0e:	6819      	ldr	r1, [r3, #0]
   10e10:	466d      	mov	r5, sp
   10e12:	2300      	movs	r3, #0
   10e14:	713b      	strb	r3, [r7, #4]
   10e16:	2302      	movs	r3, #2
   10e18:	717b      	strb	r3, [r7, #5]
   10e1a:	b088      	sub	sp, #32
   10e1c:	466c      	mov	r4, sp
   10e1e:	f114 0210 	adds.w	r2, r4, #16
   10e22:	d014      	beq.n	10e4e <main+0x182>
   10e24:	200e      	movs	r0, #14
   10e26:	b11a      	cbz	r2, 10e30 <main+0x164>
   10e28:	2804      	cmp	r0, #4
   10e2a:	dd01      	ble.n	10e30 <main+0x164>
   10e2c:	4b73      	ldr	r3, [pc, #460]	; (10ffc <main+0x330>)
   10e2e:	6163      	str	r3, [r4, #20]
   10e30:	2300      	movs	r3, #0
   10e32:	703b      	strb	r3, [r7, #0]
   10e34:	2302      	movs	r3, #2
   10e36:	707b      	strb	r3, [r7, #1]
   10e38:	b1ba      	cbz	r2, 10e6a <main+0x19e>
   10e3a:	2808      	cmp	r0, #8
   10e3c:	dd00      	ble.n	10e40 <main+0x174>
   10e3e:	61a1      	str	r1, [r4, #24]
   10e40:	f104 031c 	add.w	r3, r4, #28
   10e44:	2100      	movs	r1, #0
   10e46:	e00e      	b.n	10e66 <main+0x19a>
        LOG_INF("Couldn't initialize Bluetooth. err: %d", err);
   10e48:	f06f 041b 	mvn.w	r4, #27
   10e4c:	e7b7      	b.n	10dbe <main+0xf2>
		LOG_ERR("Error: PWM device %s is not ready\n", motors_l.dev->name);
   10e4e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10e52:	e7e8      	b.n	10e26 <main+0x15a>
   10e54:	f101 0620 	add.w	r6, r1, #32
   10e58:	eb06 0c07 	add.w	ip, r6, r7
   10e5c:	f81c cc20 	ldrb.w	ip, [ip, #-32]
   10e60:	f803 cb01 	strb.w	ip, [r3], #1
   10e64:	3101      	adds	r1, #1
   10e66:	2901      	cmp	r1, #1
   10e68:	d9f4      	bls.n	10e54 <main+0x188>
   10e6a:	280d      	cmp	r0, #13
   10e6c:	dd26      	ble.n	10ebc <main+0x1f0>
   10e6e:	230e      	movs	r3, #14
   10e70:	b142      	cbz	r2, 10e84 <main+0x1b8>
   10e72:	2103      	movs	r1, #3
   10e74:	7139      	strb	r1, [r7, #4]
   10e76:	2100      	movs	r1, #0
   10e78:	7179      	strb	r1, [r7, #5]
   10e7a:	71b9      	strb	r1, [r7, #6]
   10e7c:	2101      	movs	r1, #1
   10e7e:	71f9      	strb	r1, [r7, #7]
   10e80:	6878      	ldr	r0, [r7, #4]
   10e82:	6120      	str	r0, [r4, #16]
   10e84:	2100      	movs	r1, #0
   10e86:	f36f 0100 	bfc	r1, #0, #1
   10e8a:	f36f 0141 	bfc	r1, #1, #1
   10e8e:	f36f 0182 	bfc	r1, #2, #1
   10e92:	f36f 01c5 	bfc	r1, #3, #3
   10e96:	2001      	movs	r0, #1
   10e98:	f360 1188 	bfi	r1, r0, #6, #3
   10e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10ea0:	f363 2152 	bfi	r1, r3, #9, #10
   10ea4:	f36f 41de 	bfc	r1, #19, #12
   10ea8:	f36f 71df 	bfc	r1, #31, #1
   10eac:	2300      	movs	r3, #0
   10eae:	484e      	ldr	r0, [pc, #312]	; (10fe8 <main+0x31c>)
   10eb0:	f002 ff24 	bl	13cfc <z_impl_z_log_msg_static_create>
   10eb4:	46ad      	mov	sp, r5
    for (;;) {

        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
        k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    }
} /* main */
   10eb6:	3724      	adds	r7, #36	; 0x24
   10eb8:	46bd      	mov	sp, r7
   10eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Error: PWM device %s is not ready\n", motors_l.dev->name);
   10ebc:	f06f 031b 	mvn.w	r3, #27
   10ec0:	e7d6      	b.n	10e70 <main+0x1a4>
   10ec2:	484d      	ldr	r0, [pc, #308]	; (10ff8 <main+0x32c>)
   10ec4:	f01d ff46 	bl	2ed54 <z_device_is_ready>
	if (!device_is_ready(motors_r.dev)) {
   10ec8:	2800      	cmp	r0, #0
   10eca:	d155      	bne.n	10f78 <main+0x2ac>
		LOG_ERR("Error: PWM device %s is not ready\n", motors_r.dev->name);
   10ecc:	4b4a      	ldr	r3, [pc, #296]	; (10ff8 <main+0x32c>)
   10ece:	6819      	ldr	r1, [r3, #0]
   10ed0:	466d      	mov	r5, sp
   10ed2:	2300      	movs	r3, #0
   10ed4:	713b      	strb	r3, [r7, #4]
   10ed6:	2302      	movs	r3, #2
   10ed8:	717b      	strb	r3, [r7, #5]
   10eda:	b088      	sub	sp, #32
   10edc:	466c      	mov	r4, sp
   10ede:	f114 0210 	adds.w	r2, r4, #16
   10ee2:	d011      	beq.n	10f08 <main+0x23c>
   10ee4:	200e      	movs	r0, #14
   10ee6:	b11a      	cbz	r2, 10ef0 <main+0x224>
   10ee8:	2804      	cmp	r0, #4
   10eea:	dd01      	ble.n	10ef0 <main+0x224>
   10eec:	4b43      	ldr	r3, [pc, #268]	; (10ffc <main+0x330>)
   10eee:	6163      	str	r3, [r4, #20]
   10ef0:	2300      	movs	r3, #0
   10ef2:	703b      	strb	r3, [r7, #0]
   10ef4:	2302      	movs	r3, #2
   10ef6:	707b      	strb	r3, [r7, #1]
   10ef8:	b1a2      	cbz	r2, 10f24 <main+0x258>
   10efa:	2808      	cmp	r0, #8
   10efc:	dd00      	ble.n	10f00 <main+0x234>
   10efe:	61a1      	str	r1, [r4, #24]
   10f00:	f104 031c 	add.w	r3, r4, #28
   10f04:	2100      	movs	r1, #0
   10f06:	e00b      	b.n	10f20 <main+0x254>
   10f08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10f0c:	e7eb      	b.n	10ee6 <main+0x21a>
   10f0e:	f101 0620 	add.w	r6, r1, #32
   10f12:	eb06 0c07 	add.w	ip, r6, r7
   10f16:	f81c cc20 	ldrb.w	ip, [ip, #-32]
   10f1a:	f803 cb01 	strb.w	ip, [r3], #1
   10f1e:	3101      	adds	r1, #1
   10f20:	2901      	cmp	r1, #1
   10f22:	d9f4      	bls.n	10f0e <main+0x242>
   10f24:	280d      	cmp	r0, #13
   10f26:	dd24      	ble.n	10f72 <main+0x2a6>
   10f28:	230e      	movs	r3, #14
   10f2a:	b142      	cbz	r2, 10f3e <main+0x272>
   10f2c:	2103      	movs	r1, #3
   10f2e:	7139      	strb	r1, [r7, #4]
   10f30:	2100      	movs	r1, #0
   10f32:	7179      	strb	r1, [r7, #5]
   10f34:	71b9      	strb	r1, [r7, #6]
   10f36:	2101      	movs	r1, #1
   10f38:	71f9      	strb	r1, [r7, #7]
   10f3a:	6878      	ldr	r0, [r7, #4]
   10f3c:	6120      	str	r0, [r4, #16]
   10f3e:	2100      	movs	r1, #0
   10f40:	f36f 0100 	bfc	r1, #0, #1
   10f44:	f36f 0141 	bfc	r1, #1, #1
   10f48:	f36f 0182 	bfc	r1, #2, #1
   10f4c:	f36f 01c5 	bfc	r1, #3, #3
   10f50:	2001      	movs	r0, #1
   10f52:	f360 1188 	bfi	r1, r0, #6, #3
   10f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10f5a:	f363 2152 	bfi	r1, r3, #9, #10
   10f5e:	f36f 41de 	bfc	r1, #19, #12
   10f62:	f36f 71df 	bfc	r1, #31, #1
   10f66:	2300      	movs	r3, #0
   10f68:	481f      	ldr	r0, [pc, #124]	; (10fe8 <main+0x31c>)
   10f6a:	f002 fec7 	bl	13cfc <z_impl_z_log_msg_static_create>
   10f6e:	46ad      	mov	sp, r5
		return;
   10f70:	e7a1      	b.n	10eb6 <main+0x1ea>
		LOG_ERR("Error: PWM device %s is not ready\n", motors_r.dev->name);
   10f72:	f06f 031b 	mvn.w	r3, #27
   10f76:	e7d8      	b.n	10f2a <main+0x25e>
    LOG_INF("Running...");
   10f78:	4b21      	ldr	r3, [pc, #132]	; (11000 <main+0x334>)
   10f7a:	61fb      	str	r3, [r7, #28]
   10f7c:	2302      	movs	r3, #2
   10f7e:	713b      	strb	r3, [r7, #4]
   10f80:	2400      	movs	r4, #0
   10f82:	717c      	strb	r4, [r7, #5]
   10f84:	71bc      	strb	r4, [r7, #6]
   10f86:	71fc      	strb	r4, [r7, #7]
   10f88:	687b      	ldr	r3, [r7, #4]
   10f8a:	61bb      	str	r3, [r7, #24]
   10f8c:	4621      	mov	r1, r4
   10f8e:	f364 0100 	bfi	r1, r4, #0, #1
   10f92:	f364 0141 	bfi	r1, r4, #1, #1
   10f96:	f364 0182 	bfi	r1, r4, #2, #1
   10f9a:	f364 01c5 	bfi	r1, r4, #3, #3
   10f9e:	2303      	movs	r3, #3
   10fa0:	f363 1188 	bfi	r1, r3, #6, #3
   10fa4:	2308      	movs	r3, #8
   10fa6:	f363 2152 	bfi	r1, r3, #9, #10
   10faa:	f364 41de 	bfi	r1, r4, #19, #12
   10fae:	f364 71df 	bfi	r1, r4, #31, #1
   10fb2:	4623      	mov	r3, r4
   10fb4:	f107 0218 	add.w	r2, r7, #24
   10fb8:	480b      	ldr	r0, [pc, #44]	; (10fe8 <main+0x31c>)
   10fba:	f002 fe9f 	bl	13cfc <z_impl_z_log_msg_static_create>
    int blink_status = 0;
   10fbe:	4621      	mov	r1, r4
        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
   10fc0:	1c4c      	adds	r4, r1, #1
   10fc2:	2900      	cmp	r1, #0
   10fc4:	f001 0101 	and.w	r1, r1, #1
   10fc8:	bfb8      	it	lt
   10fca:	4249      	neglt	r1, r1
   10fcc:	2000      	movs	r0, #0
   10fce:	f011 f993 	bl	222f8 <dk_set_led>
	return z_impl_k_sleep(timeout);
   10fd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10fd6:	2100      	movs	r1, #0
   10fd8:	f016 fd74 	bl	27ac4 <z_impl_k_sleep>
   10fdc:	4621      	mov	r1, r4
   10fde:	e7ef      	b.n	10fc0 <main+0x2f4>
   10fe0:	0002fbb4 	.word	0x0002fbb4
   10fe4:	0002fbc8 	.word	0x0002fbc8
   10fe8:	0002f7e8 	.word	0x0002f7e8
   10fec:	20008160 	.word	0x20008160
   10ff0:	20008164 	.word	0x20008164
   10ff4:	0002fbe4 	.word	0x0002fbe4
   10ff8:	0002f518 	.word	0x0002f518
   10ffc:	0002fc0c 	.word	0x0002fc0c
   11000:	0002fc30 	.word	0x0002fc30

00011004 <on_write>:
                        const struct bt_gatt_attr *attr,
                        const void *buf,
                        uint16_t len,
                        uint16_t offset,
                        uint8_t flags)
{
   11004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11008:	b082      	sub	sp, #8
   1100a:	af00      	add	r7, sp, #0
   1100c:	4605      	mov	r5, r0
   1100e:	4616      	mov	r6, r2
   11010:	461c      	mov	r4, r3
    LOG_INF("Received data, handle %d, conn %p",
   11012:	8a08      	ldrh	r0, [r1, #16]
   11014:	46e8      	mov	r8, sp
   11016:	b088      	sub	sp, #32
   11018:	46ec      	mov	ip, sp
   1101a:	f11c 0210 	adds.w	r2, ip, #16
   1101e:	d042      	beq.n	110a6 <on_write+0xa2>
   11020:	2310      	movs	r3, #16
   11022:	b172      	cbz	r2, 11042 <on_write+0x3e>
   11024:	4619      	mov	r1, r3
   11026:	2b04      	cmp	r3, #4
   11028:	dd03      	ble.n	11032 <on_write+0x2e>
   1102a:	f8df e088 	ldr.w	lr, [pc, #136]	; 110b4 <on_write+0xb0>
   1102e:	f8cc e014 	str.w	lr, [ip, #20]
   11032:	2908      	cmp	r1, #8
   11034:	dd01      	ble.n	1103a <on_write+0x36>
   11036:	f8cc 0018 	str.w	r0, [ip, #24]
   1103a:	290c      	cmp	r1, #12
   1103c:	dd01      	ble.n	11042 <on_write+0x3e>
   1103e:	f8cc 501c 	str.w	r5, [ip, #28]
   11042:	2b0f      	cmp	r3, #15
   11044:	dd32      	ble.n	110ac <on_write+0xa8>
   11046:	2310      	movs	r3, #16
   11048:	b142      	cbz	r2, 1105c <on_write+0x58>
   1104a:	2104      	movs	r1, #4
   1104c:	7139      	strb	r1, [r7, #4]
   1104e:	2100      	movs	r1, #0
   11050:	7179      	strb	r1, [r7, #5]
   11052:	71b9      	strb	r1, [r7, #6]
   11054:	71f9      	strb	r1, [r7, #7]
   11056:	6878      	ldr	r0, [r7, #4]
   11058:	f8cc 0010 	str.w	r0, [ip, #16]
   1105c:	2100      	movs	r1, #0
   1105e:	f36f 0100 	bfc	r1, #0, #1
   11062:	f36f 0141 	bfc	r1, #1, #1
   11066:	f36f 0182 	bfc	r1, #2, #1
   1106a:	f36f 01c5 	bfc	r1, #3, #3
   1106e:	2003      	movs	r0, #3
   11070:	f360 1188 	bfi	r1, r0, #6, #3
   11074:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   11078:	f363 2152 	bfi	r1, r3, #9, #10
   1107c:	f36f 41de 	bfc	r1, #19, #12
   11080:	f36f 71df 	bfc	r1, #31, #1
   11084:	2300      	movs	r3, #0
   11086:	480c      	ldr	r0, [pc, #48]	; (110b8 <on_write+0xb4>)
   11088:	f002 fe38 	bl	13cfc <z_impl_z_log_msg_static_create>
   1108c:	46c5      	mov	sp, r8
        attr->handle, (void *)conn);

    if (remote_service_callbacks.data_received) {
   1108e:	4b0b      	ldr	r3, [pc, #44]	; (110bc <on_write+0xb8>)
   11090:	681b      	ldr	r3, [r3, #0]
   11092:	b11b      	cbz	r3, 1109c <on_write+0x98>
        remote_service_callbacks.data_received(conn, buf, len);
   11094:	4622      	mov	r2, r4
   11096:	4631      	mov	r1, r6
   11098:	4628      	mov	r0, r5
   1109a:	4798      	blx	r3
    }
    return len;
} /* on_write */
   1109c:	4620      	mov	r0, r4
   1109e:	3708      	adds	r7, #8
   110a0:	46bd      	mov	sp, r7
   110a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LOG_INF("Received data, handle %d, conn %p",
   110a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   110aa:	e7ba      	b.n	11022 <on_write+0x1e>
   110ac:	f06f 031b 	mvn.w	r3, #27
   110b0:	e7ca      	b.n	11048 <on_write+0x44>
   110b2:	bf00      	nop
   110b4:	0002fc60 	.word	0x0002fc60
   110b8:	0002f8c0 	.word	0x0002f8c0
   110bc:	2000977c 	.word	0x2000977c

000110c0 <bt_ready>:
{
   110c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   110c2:	b083      	sub	sp, #12
   110c4:	af00      	add	r7, sp, #0
    if (err) {
   110c6:	b3b0      	cbz	r0, 11136 <bt_ready+0x76>
   110c8:	4605      	mov	r5, r0
        LOG_ERR("bt_ready returned %d", err);
   110ca:	466c      	mov	r4, sp
   110cc:	b088      	sub	sp, #32
   110ce:	466b      	mov	r3, sp
   110d0:	f113 0210 	adds.w	r2, r3, #16
   110d4:	d035      	beq.n	11142 <bt_ready+0x82>
   110d6:	210c      	movs	r1, #12
   110d8:	b13a      	cbz	r2, 110ea <bt_ready+0x2a>
   110da:	4608      	mov	r0, r1
   110dc:	2904      	cmp	r1, #4
   110de:	dd01      	ble.n	110e4 <bt_ready+0x24>
   110e0:	4e1b      	ldr	r6, [pc, #108]	; (11150 <bt_ready+0x90>)
   110e2:	615e      	str	r6, [r3, #20]
   110e4:	2808      	cmp	r0, #8
   110e6:	dd00      	ble.n	110ea <bt_ready+0x2a>
   110e8:	619d      	str	r5, [r3, #24]
   110ea:	290b      	cmp	r1, #11
   110ec:	dd2c      	ble.n	11148 <bt_ready+0x88>
   110ee:	f04f 0c0c 	mov.w	ip, #12
   110f2:	b13a      	cbz	r2, 11104 <bt_ready+0x44>
   110f4:	2103      	movs	r1, #3
   110f6:	7139      	strb	r1, [r7, #4]
   110f8:	2100      	movs	r1, #0
   110fa:	7179      	strb	r1, [r7, #5]
   110fc:	71b9      	strb	r1, [r7, #6]
   110fe:	71f9      	strb	r1, [r7, #7]
   11100:	6878      	ldr	r0, [r7, #4]
   11102:	6118      	str	r0, [r3, #16]
   11104:	2100      	movs	r1, #0
   11106:	f36f 0100 	bfc	r1, #0, #1
   1110a:	f36f 0141 	bfc	r1, #1, #1
   1110e:	f36f 0182 	bfc	r1, #2, #1
   11112:	f36f 01c5 	bfc	r1, #3, #3
   11116:	2301      	movs	r3, #1
   11118:	f363 1188 	bfi	r1, r3, #6, #3
   1111c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   11120:	f36c 2152 	bfi	r1, ip, #9, #10
   11124:	f36f 41de 	bfc	r1, #19, #12
   11128:	f36f 71df 	bfc	r1, #31, #1
   1112c:	2300      	movs	r3, #0
   1112e:	4809      	ldr	r0, [pc, #36]	; (11154 <bt_ready+0x94>)
   11130:	f002 fde4 	bl	13cfc <z_impl_z_log_msg_static_create>
   11134:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11136:	4808      	ldr	r0, [pc, #32]	; (11158 <bt_ready+0x98>)
   11138:	f014 fbca 	bl	258d0 <z_impl_k_sem_give>
} /* bt_ready */
   1113c:	370c      	adds	r7, #12
   1113e:	46bd      	mov	sp, r7
   11140:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("bt_ready returned %d", err);
   11142:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11146:	e7c7      	b.n	110d8 <bt_ready+0x18>
   11148:	f06f 0c1b 	mvn.w	ip, #27
   1114c:	e7d1      	b.n	110f2 <bt_ready+0x32>
   1114e:	bf00      	nop
   11150:	0002fc84 	.word	0x0002fc84
   11154:	0002f8c0 	.word	0x0002f8c0
   11158:	2000855c 	.word	0x2000855c

0001115c <bluetooth_init>:


int bluetooth_init(struct bt_conn_cb *bt_cb, struct bt_remote_service_cb *remote_cb)
{
   1115c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1115e:	b08f      	sub	sp, #60	; 0x3c
   11160:	af02      	add	r7, sp, #8
   11162:	4604      	mov	r4, r0
   11164:	460d      	mov	r5, r1
    int err;
    LOG_INF("Initializing Bluetooth");
   11166:	4b66      	ldr	r3, [pc, #408]	; (11300 <bluetooth_init+0x1a4>)
   11168:	62fb      	str	r3, [r7, #44]	; 0x2c
   1116a:	2302      	movs	r3, #2
   1116c:	703b      	strb	r3, [r7, #0]
   1116e:	2300      	movs	r3, #0
   11170:	707b      	strb	r3, [r7, #1]
   11172:	70bb      	strb	r3, [r7, #2]
   11174:	70fb      	strb	r3, [r7, #3]
   11176:	683a      	ldr	r2, [r7, #0]
   11178:	62ba      	str	r2, [r7, #40]	; 0x28
   1117a:	4619      	mov	r1, r3
   1117c:	f363 0100 	bfi	r1, r3, #0, #1
   11180:	f363 0141 	bfi	r1, r3, #1, #1
   11184:	f363 0182 	bfi	r1, r3, #2, #1
   11188:	f363 01c5 	bfi	r1, r3, #3, #3
   1118c:	2203      	movs	r2, #3
   1118e:	f362 1188 	bfi	r1, r2, #6, #3
   11192:	2208      	movs	r2, #8
   11194:	f362 2152 	bfi	r1, r2, #9, #10
   11198:	f363 41de 	bfi	r1, r3, #19, #12
   1119c:	f363 71df 	bfi	r1, r3, #31, #1
   111a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
   111a4:	4857      	ldr	r0, [pc, #348]	; (11304 <bluetooth_init+0x1a8>)
   111a6:	f002 fda9 	bl	13cfc <z_impl_z_log_msg_static_create>

    if (bt_cb == NULL){
   111aa:	2c00      	cmp	r4, #0
   111ac:	f000 80a5 	beq.w	112fa <bluetooth_init+0x19e>
        return NRFX_ERROR_NULL;
    }
    bt_conn_cb_register(bt_cb);
   111b0:	4620      	mov	r0, r4
   111b2:	f00a fab7 	bl	1b724 <bt_conn_cb_register>
    remote_service_callbacks.data_received = remote_cb->data_received;
   111b6:	682a      	ldr	r2, [r5, #0]
   111b8:	4b53      	ldr	r3, [pc, #332]	; (11308 <bluetooth_init+0x1ac>)
   111ba:	601a      	str	r2, [r3, #0]

    err = bt_enable(bt_ready);
   111bc:	4853      	ldr	r0, [pc, #332]	; (1130c <bluetooth_init+0x1b0>)
   111be:	f008 fa87 	bl	196d0 <bt_enable>
    if (err) {
   111c2:	4604      	mov	r4, r0
   111c4:	2800      	cmp	r0, #0
   111c6:	d041      	beq.n	1124c <bluetooth_init+0xf0>
        LOG_ERR("bt_enable returned %d", err);
   111c8:	466e      	mov	r6, sp
   111ca:	b088      	sub	sp, #32
   111cc:	ab02      	add	r3, sp, #8
   111ce:	f113 0210 	adds.w	r2, r3, #16
   111d2:	d00d      	beq.n	111f0 <bluetooth_init+0x94>
   111d4:	210c      	movs	r1, #12
   111d6:	b13a      	cbz	r2, 111e8 <bluetooth_init+0x8c>
   111d8:	4608      	mov	r0, r1
   111da:	2904      	cmp	r1, #4
   111dc:	dd01      	ble.n	111e2 <bluetooth_init+0x86>
   111de:	4d4c      	ldr	r5, [pc, #304]	; (11310 <bluetooth_init+0x1b4>)
   111e0:	615d      	str	r5, [r3, #20]
   111e2:	2808      	cmp	r0, #8
   111e4:	dd07      	ble.n	111f6 <bluetooth_init+0x9a>
   111e6:	619c      	str	r4, [r3, #24]
   111e8:	290b      	cmp	r1, #11
   111ea:	dd2c      	ble.n	11246 <bluetooth_init+0xea>
   111ec:	250c      	movs	r5, #12
   111ee:	e004      	b.n	111fa <bluetooth_init+0x9e>
   111f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   111f4:	e7ef      	b.n	111d6 <bluetooth_init+0x7a>
   111f6:	f06f 051b 	mvn.w	r5, #27
   111fa:	b13a      	cbz	r2, 1120c <bluetooth_init+0xb0>
   111fc:	2103      	movs	r1, #3
   111fe:	7039      	strb	r1, [r7, #0]
   11200:	2100      	movs	r1, #0
   11202:	7079      	strb	r1, [r7, #1]
   11204:	70b9      	strb	r1, [r7, #2]
   11206:	70f9      	strb	r1, [r7, #3]
   11208:	6838      	ldr	r0, [r7, #0]
   1120a:	6118      	str	r0, [r3, #16]
   1120c:	2100      	movs	r1, #0
   1120e:	f36f 0100 	bfc	r1, #0, #1
   11212:	f36f 0141 	bfc	r1, #1, #1
   11216:	f36f 0182 	bfc	r1, #2, #1
   1121a:	f36f 01c5 	bfc	r1, #3, #3
   1121e:	2301      	movs	r3, #1
   11220:	f363 1188 	bfi	r1, r3, #6, #3
   11224:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   11228:	f363 2152 	bfi	r1, r3, #9, #10
   1122c:	f36f 41de 	bfc	r1, #19, #12
   11230:	f36f 71df 	bfc	r1, #31, #1
   11234:	2300      	movs	r3, #0
   11236:	4833      	ldr	r0, [pc, #204]	; (11304 <bluetooth_init+0x1a8>)
   11238:	f002 fd60 	bl	13cfc <z_impl_z_log_msg_static_create>
   1123c:	46b5      	mov	sp, r6
        LOG_ERR("couldn't start advertising (err = %d", err);
        return err;
    }

    return err;
} /* bluetooth_init */
   1123e:	4620      	mov	r0, r4
   11240:	3734      	adds	r7, #52	; 0x34
   11242:	46bd      	mov	sp, r7
   11244:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("bt_enable returned %d", err);
   11246:	f06f 051b 	mvn.w	r5, #27
   1124a:	e7d6      	b.n	111fa <bluetooth_init+0x9e>
	return z_impl_k_sem_take(sem, timeout);
   1124c:	f04f 32ff 	mov.w	r2, #4294967295
   11250:	f04f 33ff 	mov.w	r3, #4294967295
   11254:	482f      	ldr	r0, [pc, #188]	; (11314 <bluetooth_init+0x1b8>)
   11256:	f014 fb83 	bl	25960 <z_impl_k_sem_take>
    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
   1125a:	1d3c      	adds	r4, r7, #4
   1125c:	4d2e      	ldr	r5, [pc, #184]	; (11318 <bluetooth_init+0x1bc>)
   1125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11262:	682b      	ldr	r3, [r5, #0]
   11264:	6023      	str	r3, [r4, #0]
   11266:	2301      	movs	r3, #1
   11268:	9300      	str	r3, [sp, #0]
   1126a:	4b2c      	ldr	r3, [pc, #176]	; (1131c <bluetooth_init+0x1c0>)
   1126c:	2202      	movs	r2, #2
   1126e:	492c      	ldr	r1, [pc, #176]	; (11320 <bluetooth_init+0x1c4>)
   11270:	1d38      	adds	r0, r7, #4
   11272:	f009 f933 	bl	1a4dc <bt_le_adv_start>
    if (err){
   11276:	4604      	mov	r4, r0
   11278:	2800      	cmp	r0, #0
   1127a:	d0e0      	beq.n	1123e <bluetooth_init+0xe2>
        LOG_ERR("couldn't start advertising (err = %d", err);
   1127c:	466e      	mov	r6, sp
   1127e:	b088      	sub	sp, #32
   11280:	ab02      	add	r3, sp, #8
   11282:	f113 0210 	adds.w	r2, r3, #16
   11286:	d00d      	beq.n	112a4 <bluetooth_init+0x148>
   11288:	210c      	movs	r1, #12
   1128a:	b13a      	cbz	r2, 1129c <bluetooth_init+0x140>
   1128c:	4608      	mov	r0, r1
   1128e:	2904      	cmp	r1, #4
   11290:	dd01      	ble.n	11296 <bluetooth_init+0x13a>
   11292:	4d24      	ldr	r5, [pc, #144]	; (11324 <bluetooth_init+0x1c8>)
   11294:	615d      	str	r5, [r3, #20]
   11296:	2808      	cmp	r0, #8
   11298:	dd07      	ble.n	112aa <bluetooth_init+0x14e>
   1129a:	619c      	str	r4, [r3, #24]
   1129c:	290b      	cmp	r1, #11
   1129e:	dd29      	ble.n	112f4 <bluetooth_init+0x198>
   112a0:	250c      	movs	r5, #12
   112a2:	e004      	b.n	112ae <bluetooth_init+0x152>
   112a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   112a8:	e7ef      	b.n	1128a <bluetooth_init+0x12e>
   112aa:	f06f 051b 	mvn.w	r5, #27
   112ae:	b13a      	cbz	r2, 112c0 <bluetooth_init+0x164>
   112b0:	2103      	movs	r1, #3
   112b2:	7039      	strb	r1, [r7, #0]
   112b4:	2100      	movs	r1, #0
   112b6:	7079      	strb	r1, [r7, #1]
   112b8:	70b9      	strb	r1, [r7, #2]
   112ba:	70f9      	strb	r1, [r7, #3]
   112bc:	6838      	ldr	r0, [r7, #0]
   112be:	6118      	str	r0, [r3, #16]
   112c0:	2100      	movs	r1, #0
   112c2:	f36f 0100 	bfc	r1, #0, #1
   112c6:	f36f 0141 	bfc	r1, #1, #1
   112ca:	f36f 0182 	bfc	r1, #2, #1
   112ce:	f36f 01c5 	bfc	r1, #3, #3
   112d2:	2301      	movs	r3, #1
   112d4:	f363 1188 	bfi	r1, r3, #6, #3
   112d8:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   112dc:	f363 2152 	bfi	r1, r3, #9, #10
   112e0:	f36f 41de 	bfc	r1, #19, #12
   112e4:	f36f 71df 	bfc	r1, #31, #1
   112e8:	2300      	movs	r3, #0
   112ea:	4806      	ldr	r0, [pc, #24]	; (11304 <bluetooth_init+0x1a8>)
   112ec:	f002 fd06 	bl	13cfc <z_impl_z_log_msg_static_create>
   112f0:	46b5      	mov	sp, r6
        return err;
   112f2:	e7a4      	b.n	1123e <bluetooth_init+0xe2>
        LOG_ERR("couldn't start advertising (err = %d", err);
   112f4:	f06f 051b 	mvn.w	r5, #27
   112f8:	e7d9      	b.n	112ae <bluetooth_init+0x152>
        return NRFX_ERROR_NULL;
   112fa:	4c0b      	ldr	r4, [pc, #44]	; (11328 <bluetooth_init+0x1cc>)
   112fc:	e79f      	b.n	1123e <bluetooth_init+0xe2>
   112fe:	bf00      	nop
   11300:	0002fc9c 	.word	0x0002fc9c
   11304:	0002f8c0 	.word	0x0002f8c0
   11308:	2000977c 	.word	0x2000977c
   1130c:	000110c1 	.word	0x000110c1
   11310:	0002fcb4 	.word	0x0002fcb4
   11314:	2000855c 	.word	0x2000855c
   11318:	0002f930 	.word	0x0002f930
   1131c:	0002fd30 	.word	0x0002fd30
   11320:	0002fd54 	.word	0x0002fd54
   11324:	0002fccc 	.word	0x0002fccc
   11328:	0bad0009 	.word	0x0bad0009

0001132c <get_package_len>:
}

#endif

static size_t get_package_len(void *packaged)
{
   1132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(packaged != NULL);
   1132e:	b140      	cbz	r0, 11342 <get_package_len+0x16>
   11330:	4606      	mov	r6, r0

	uint8_t *buf = packaged;
	uint8_t *start = buf;
	unsigned int args_size, s_nbr, ros_nbr;

	args_size = buf[0] * sizeof(int);
   11332:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   11334:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   11336:	7884      	ldrb	r4, [r0, #2]

	/* Move beyond args. */
	buf += args_size;

	/* Move beyond read-only string indexes array. */
	buf += ros_nbr;
   11338:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1133c:	4404      	add	r4, r0

	/* Move beyond strings appended to the package. */
	for (int i = 0; i < s_nbr; i++) {
   1133e:	2700      	movs	r7, #0
   11340:	e011      	b.n	11366 <get_package_len+0x3a>
	__ASSERT_NO_MSG(packaged != NULL);
   11342:	4c0b      	ldr	r4, [pc, #44]	; (11370 <get_package_len+0x44>)
   11344:	23c6      	movs	r3, #198	; 0xc6
   11346:	4622      	mov	r2, r4
   11348:	490a      	ldr	r1, [pc, #40]	; (11374 <get_package_len+0x48>)
   1134a:	480b      	ldr	r0, [pc, #44]	; (11378 <get_package_len+0x4c>)
   1134c:	f018 fbcd 	bl	29aea <assert_print>
   11350:	21c6      	movs	r1, #198	; 0xc6
   11352:	4620      	mov	r0, r4
   11354:	f018 fbc2 	bl	29adc <assert_post_action>
		buf++;
   11358:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   1135a:	4620      	mov	r0, r4
   1135c:	f019 fea9 	bl	2b0b2 <strlen>
   11360:	3001      	adds	r0, #1
   11362:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   11364:	3701      	adds	r7, #1
   11366:	42af      	cmp	r7, r5
   11368:	d3f6      	bcc.n	11358 <get_package_len+0x2c>
	}

	return (size_t)(uintptr_t)(buf - start);
}
   1136a:	1ba0      	subs	r0, r4, r6
   1136c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1136e:	bf00      	nop
   11370:	0002fd64 	.word	0x0002fd64
   11374:	0002fd94 	.word	0x0002fd94
   11378:	0002fdac 	.word	0x0002fdac

0001137c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   1137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11380:	b097      	sub	sp, #92	; 0x5c
   11382:	af00      	add	r7, sp, #0
   11384:	6139      	str	r1, [r7, #16]
   11386:	617a      	str	r2, [r7, #20]
	__ASSERT_NO_MSG(in_packaged != NULL);
   11388:	6278      	str	r0, [r7, #36]	; 0x24
   1138a:	b1b0      	cbz	r0, 113ba <cbprintf_package_convert+0x3e>
   1138c:	469b      	mov	fp, r3

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   1138e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   11392:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   11396:	61fb      	str	r3, [r7, #28]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   11398:	693b      	ldr	r3, [r7, #16]
   1139a:	b1db      	cbz	r3, 113d4 <cbprintf_package_convert+0x58>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   1139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1139e:	f893 8002 	ldrb.w	r8, [r3, #2]
   113a2:	f8c7 800c 	str.w	r8, [r7, #12]
	ro_cpy = ros_nbr &&
   113a6:	f1b8 0f00 	cmp.w	r8, #0
   113aa:	d018      	beq.n	113de <cbprintf_package_convert+0x62>
   113ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   113b0:	f013 0f01 	tst.w	r3, #1
   113b4:	d11f      	bne.n	113f6 <cbprintf_package_convert+0x7a>
   113b6:	2300      	movs	r3, #0
   113b8:	e012      	b.n	113e0 <cbprintf_package_convert+0x64>
	__ASSERT_NO_MSG(in_packaged != NULL);
   113ba:	4cac      	ldr	r4, [pc, #688]	; (1166c <cbprintf_package_convert+0x2f0>)
   113bc:	f44f 7365 	mov.w	r3, #916	; 0x394
   113c0:	4622      	mov	r2, r4
   113c2:	49ab      	ldr	r1, [pc, #684]	; (11670 <cbprintf_package_convert+0x2f4>)
   113c4:	48ab      	ldr	r0, [pc, #684]	; (11674 <cbprintf_package_convert+0x2f8>)
   113c6:	f018 fb90 	bl	29aea <assert_print>
   113ca:	f44f 7165 	mov.w	r1, #916	; 0x394
   113ce:	4620      	mov	r0, r4
   113d0:	f018 fb84 	bl	29adc <assert_post_action>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   113d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   113d6:	f7ff ffa9 	bl	1132c <get_package_len>
   113da:	6138      	str	r0, [r7, #16]
   113dc:	e7de      	b.n	1139c <cbprintf_package_convert+0x20>
	ro_cpy = ros_nbr &&
   113de:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   113e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   113e2:	78d2      	ldrb	r2, [r2, #3]
   113e4:	623a      	str	r2, [r7, #32]
	rw_cpy = rws_nbr > 0 &&
   113e6:	b142      	cbz	r2, 113fa <cbprintf_package_convert+0x7e>
   113e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   113ec:	f012 0f02 	tst.w	r2, #2
   113f0:	d122      	bne.n	11438 <cbprintf_package_convert+0xbc>
   113f2:	2200      	movs	r2, #0
   113f4:	e002      	b.n	113fc <cbprintf_package_convert+0x80>
	ro_cpy = ros_nbr &&
   113f6:	2301      	movs	r3, #1
   113f8:	e7f2      	b.n	113e0 <cbprintf_package_convert+0x64>
	rw_cpy = rws_nbr > 0 &&
   113fa:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   113fc:	b902      	cbnz	r2, 11400 <cbprintf_package_convert+0x84>
   113fe:	b1eb      	cbz	r3, 1143c <cbprintf_package_convert+0xc0>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   11400:	6a79      	ldr	r1, [r7, #36]	; 0x24
   11402:	780d      	ldrb	r5, [r1, #0]
   11404:	00aa      	lsls	r2, r5, #2
   11406:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11408:	460a      	mov	r2, r1
   1140a:	6849      	ldr	r1, [r1, #4]
   1140c:	61b9      	str	r1, [r7, #24]
	uint8_t *str_pos = &buf[args_size];
   1140e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   11412:	697a      	ldr	r2, [r7, #20]
   11414:	b1fa      	cbz	r2, 11456 <cbprintf_package_convert+0xda>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   11416:	2b00      	cmp	r3, #0
   11418:	f040 810e 	bne.w	11638 <cbprintf_package_convert+0x2bc>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1141c:	68fb      	ldr	r3, [r7, #12]
   1141e:	2b00      	cmp	r3, #0
   11420:	f000 8119 	beq.w	11656 <cbprintf_package_convert+0x2da>
   11424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   11428:	f013 0f04 	tst.w	r3, #4
   1142c:	f040 8117 	bne.w	1165e <cbprintf_package_convert+0x2e2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   11430:	2000      	movs	r0, #0
		keep_cnt = 0;
   11432:	4682      	mov	sl, r0
		scpy_cnt = 0;
   11434:	4680      	mov	r8, r0
   11436:	e103      	b.n	11640 <cbprintf_package_convert+0x2c4>
	rw_cpy = rws_nbr > 0 &&
   11438:	2201      	movs	r2, #1
   1143a:	e7df      	b.n	113fc <cbprintf_package_convert+0x80>
		if (cb) {
   1143c:	697b      	ldr	r3, [r7, #20]
   1143e:	b11b      	cbz	r3, 11448 <cbprintf_package_convert+0xcc>
			cb(in_packaged, in_len, ctx);
   11440:	465a      	mov	r2, fp
   11442:	6939      	ldr	r1, [r7, #16]
   11444:	6a78      	ldr	r0, [r7, #36]	; 0x24
   11446:	4798      	blx	r3
		return in_len;
   11448:	f8d7 9010 	ldr.w	r9, [r7, #16]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   1144c:	4648      	mov	r0, r9
   1144e:	375c      	adds	r7, #92	; 0x5c
   11450:	46bd      	mov	sp, r7
   11452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   11456:	f8d7 9010 	ldr.w	r9, [r7, #16]
		if (ro_cpy) {
   1145a:	bb0b      	cbnz	r3, 114a0 <cbprintf_package_convert+0x124>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1145c:	68fb      	ldr	r3, [r7, #12]
   1145e:	b3ab      	cbz	r3, 114cc <cbprintf_package_convert+0x150>
   11460:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   11464:	f012 0604 	ands.w	r6, r2, #4
   11468:	d027      	beq.n	114ba <cbprintf_package_convert+0x13e>
				str_pos += ros_nbr;
   1146a:	441d      	add	r5, r3
	size_t strl_cnt = 0;
   1146c:	2600      	movs	r6, #0
   1146e:	e024      	b.n	114ba <cbprintf_package_convert+0x13e>
				out_len += len;
   11470:	4481      	add	r9, r0
				str_pos++;
   11472:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   11474:	3401      	adds	r4, #1
   11476:	4554      	cmp	r4, sl
   11478:	d21d      	bcs.n	114b6 <cbprintf_package_convert+0x13a>
				const char *str = *(const char **)&buf32[*str_pos];
   1147a:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   1147c:	2300      	movs	r3, #0
   1147e:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   11482:	4619      	mov	r1, r3
   11484:	6978      	ldr	r0, [r7, #20]
   11486:	f017 fe57 	bl	29138 <append_string>
				if (strl && strl_cnt < strl_len) {
   1148a:	f1b8 0f00 	cmp.w	r8, #0
   1148e:	d0ef      	beq.n	11470 <cbprintf_package_convert+0xf4>
   11490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   11494:	429e      	cmp	r6, r3
   11496:	d2eb      	bcs.n	11470 <cbprintf_package_convert+0xf4>
					strl[strl_cnt++] = (uint16_t)len;
   11498:	f828 0016 	strh.w	r0, [r8, r6, lsl #1]
   1149c:	3601      	adds	r6, #1
   1149e:	e7e7      	b.n	11470 <cbprintf_package_convert+0xf4>
			for (int i = 0; i < ros_nbr; i++) {
   114a0:	2400      	movs	r4, #0
	size_t strl_cnt = 0;
   114a2:	4626      	mov	r6, r4
   114a4:	f8c7 a010 	str.w	sl, [r7, #16]
   114a8:	f8d7 a00c 	ldr.w	sl, [r7, #12]
   114ac:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
   114b0:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
   114b4:	e7df      	b.n	11476 <cbprintf_package_convert+0xfa>
   114b6:	f8d7 a010 	ldr.w	sl, [r7, #16]
		bool drop_ro_str_pos = !(flags &
   114ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   114be:	f003 0305 	and.w	r3, r3, #5
   114c2:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   114c4:	f04f 0b00 	mov.w	fp, #0
   114c8:	613e      	str	r6, [r7, #16]
   114ca:	e0a0      	b.n	1160e <cbprintf_package_convert+0x292>
	size_t strl_cnt = 0;
   114cc:	68fe      	ldr	r6, [r7, #12]
   114ce:	e7f4      	b.n	114ba <cbprintf_package_convert+0x13e>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   114d0:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   114d2:	69fb      	ldr	r3, [r7, #28]
   114d4:	b97b      	cbnz	r3, 114f6 <cbprintf_package_convert+0x17a>
			if (is_ro) {
   114d6:	2d00      	cmp	r5, #0
   114d8:	d07b      	beq.n	115d2 <cbprintf_package_convert+0x256>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   114da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   114de:	f013 0f01 	tst.w	r3, #1
   114e2:	d17b      	bne.n	115dc <cbprintf_package_convert+0x260>
					out_len -= drop_ro_str_pos ? 2 : 1;
   114e4:	68fb      	ldr	r3, [r7, #12]
   114e6:	2b00      	cmp	r3, #0
   114e8:	d171      	bne.n	115ce <cbprintf_package_convert+0x252>
   114ea:	2302      	movs	r3, #2
   114ec:	eba9 0903 	sub.w	r9, r9, r3
   114f0:	e08a      	b.n	11608 <cbprintf_package_convert+0x28c>
   114f2:	2501      	movs	r5, #1
   114f4:	e7ed      	b.n	114d2 <cbprintf_package_convert+0x156>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   114f6:	4641      	mov	r1, r8
   114f8:	69b8      	ldr	r0, [r7, #24]
   114fa:	f017 fe64 	bl	291c6 <is_ptr>
   114fe:	2800      	cmp	r0, #0
   11500:	d0e9      	beq.n	114d6 <cbprintf_package_convert+0x15a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   11502:	466d      	mov	r5, sp
   11504:	2300      	movs	r3, #0
   11506:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   1150a:	2302      	movs	r3, #2
   1150c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   11510:	b08a      	sub	sp, #40	; 0x28
   11512:	4669      	mov	r1, sp
   11514:	f111 0210 	adds.w	r2, r1, #16
   11518:	d039      	beq.n	1158e <cbprintf_package_convert+0x212>
   1151a:	2612      	movs	r6, #18
   1151c:	b11a      	cbz	r2, 11526 <cbprintf_package_convert+0x1aa>
   1151e:	2e04      	cmp	r6, #4
   11520:	dd01      	ble.n	11526 <cbprintf_package_convert+0x1aa>
   11522:	4b55      	ldr	r3, [pc, #340]	; (11678 <cbprintf_package_convert+0x2fc>)
   11524:	614b      	str	r3, [r1, #20]
   11526:	2300      	movs	r3, #0
   11528:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   1152c:	2302      	movs	r3, #2
   1152e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   11532:	bb7a      	cbnz	r2, 11594 <cbprintf_package_convert+0x218>
   11534:	2e11      	cmp	r6, #17
   11536:	dd47      	ble.n	115c8 <cbprintf_package_convert+0x24c>
   11538:	2312      	movs	r3, #18
   1153a:	b162      	cbz	r2, 11556 <cbprintf_package_convert+0x1da>
   1153c:	2004      	movs	r0, #4
   1153e:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   11542:	2000      	movs	r0, #0
   11544:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   11548:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   1154c:	2001      	movs	r0, #1
   1154e:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   11552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11554:	6108      	str	r0, [r1, #16]
   11556:	f36f 0a00 	bfc	sl, #0, #1
   1155a:	f36f 0a41 	bfc	sl, #1, #1
   1155e:	f36f 0a82 	bfc	sl, #2, #1
   11562:	f36f 0ac5 	bfc	sl, #3, #3
   11566:	2102      	movs	r1, #2
   11568:	f361 1a88 	bfi	sl, r1, #6, #3
   1156c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11570:	f363 2a52 	bfi	sl, r3, #9, #10
   11574:	f36f 4ade 	bfc	sl, #19, #12
   11578:	f36f 7adf 	bfc	sl, #31, #1
   1157c:	2300      	movs	r3, #0
   1157e:	4651      	mov	r1, sl
   11580:	483e      	ldr	r0, [pc, #248]	; (1167c <cbprintf_package_convert+0x300>)
   11582:	f002 fbbb 	bl	13cfc <z_impl_z_log_msg_static_create>
   11586:	46ad      	mov	sp, r5
				out_len -= 2;
   11588:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   1158c:	e03c      	b.n	11608 <cbprintf_package_convert+0x28c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1158e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   11592:	e7c3      	b.n	1151c <cbprintf_package_convert+0x1a0>
   11594:	4633      	mov	r3, r6
   11596:	2e08      	cmp	r6, #8
   11598:	dd01      	ble.n	1159e <cbprintf_package_convert+0x222>
   1159a:	69b8      	ldr	r0, [r7, #24]
   1159c:	6188      	str	r0, [r1, #24]
   1159e:	2b0c      	cmp	r3, #12
   115a0:	dd01      	ble.n	115a6 <cbprintf_package_convert+0x22a>
   115a2:	f8c1 801c 	str.w	r8, [r1, #28]
   115a6:	f101 0320 	add.w	r3, r1, #32
   115aa:	2000      	movs	r0, #0
   115ac:	e009      	b.n	115c2 <cbprintf_package_convert+0x246>
   115ae:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   115b2:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   115b6:	44f4      	add	ip, lr
   115b8:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   115bc:	f803 cb01 	strb.w	ip, [r3], #1
   115c0:	3001      	adds	r0, #1
   115c2:	2801      	cmp	r0, #1
   115c4:	d9f3      	bls.n	115ae <cbprintf_package_convert+0x232>
   115c6:	e7b5      	b.n	11534 <cbprintf_package_convert+0x1b8>
   115c8:	f06f 031b 	mvn.w	r3, #27
   115cc:	e7b5      	b.n	1153a <cbprintf_package_convert+0x1be>
					out_len -= drop_ro_str_pos ? 2 : 1;
   115ce:	2301      	movs	r3, #1
   115d0:	e78c      	b.n	114ec <cbprintf_package_convert+0x170>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   115d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   115d6:	f013 0f02 	tst.w	r3, #2
   115da:	d015      	beq.n	11608 <cbprintf_package_convert+0x28c>
				len = append_string(cb, NULL, str, 0);
   115dc:	2300      	movs	r3, #0
   115de:	4632      	mov	r2, r6
   115e0:	4619      	mov	r1, r3
   115e2:	6978      	ldr	r0, [r7, #20]
   115e4:	f017 fda8 	bl	29138 <append_string>
				if (strl && strl_cnt < strl_len) {
   115e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   115ec:	b153      	cbz	r3, 11604 <cbprintf_package_convert+0x288>
   115ee:	693b      	ldr	r3, [r7, #16]
   115f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   115f4:	4293      	cmp	r3, r2
   115f6:	d205      	bcs.n	11604 <cbprintf_package_convert+0x288>
					strl[strl_cnt++] = (uint16_t)len;
   115f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   115fc:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   11600:	3301      	adds	r3, #1
   11602:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   11604:	3801      	subs	r0, #1
   11606:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   11608:	f10b 0b01 	add.w	fp, fp, #1
			uint8_t arg_pos = *str_pos++;
   1160c:	4625      	mov	r5, r4
		for (int i = 0; i < rws_nbr; i++) {
   1160e:	6a3b      	ldr	r3, [r7, #32]
   11610:	459b      	cmp	fp, r3
   11612:	f4bf af1b 	bcs.w	1144c <cbprintf_package_convert+0xd0>
			uint8_t arg_idx = *str_pos++;
   11616:	462c      	mov	r4, r5
   11618:	f814 8b02 	ldrb.w	r8, [r4], #2
			uint8_t arg_pos = *str_pos++;
   1161c:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   1161e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11620:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   11624:	4b16      	ldr	r3, [pc, #88]	; (11680 <cbprintf_package_convert+0x304>)
   11626:	429e      	cmp	r6, r3
   11628:	f4ff af52 	bcc.w	114d0 <cbprintf_package_convert+0x154>
   1162c:	4b15      	ldr	r3, [pc, #84]	; (11684 <cbprintf_package_convert+0x308>)
   1162e:	429e      	cmp	r6, r3
   11630:	f4ff af5f 	bcc.w	114f2 <cbprintf_package_convert+0x176>
   11634:	2500      	movs	r5, #0
   11636:	e74c      	b.n	114d2 <cbprintf_package_convert+0x156>
		dst = cpy_str_pos;
   11638:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   1163c:	f04f 0a00 	mov.w	sl, #0
	if (dst) {
   11640:	b118      	cbz	r0, 1164a <cbprintf_package_convert+0x2ce>
		memcpy(dst, str_pos, ros_nbr);
   11642:	68fa      	ldr	r2, [r7, #12]
   11644:	4629      	mov	r1, r5
   11646:	f019 fd77 	bl	2b138 <memcpy>
	str_pos += ros_nbr;
   1164a:	68fb      	ldr	r3, [r7, #12]
   1164c:	441d      	add	r5, r3
	for (int i = 0; i < rws_nbr; i++) {
   1164e:	2600      	movs	r6, #0
   11650:	f8c7 b004 	str.w	fp, [r7, #4]
   11654:	e033      	b.n	116be <cbprintf_package_convert+0x342>
		dst = NULL;
   11656:	2000      	movs	r0, #0
		keep_cnt = 0;
   11658:	4682      	mov	sl, r0
		scpy_cnt = 0;
   1165a:	4680      	mov	r8, r0
   1165c:	e7f0      	b.n	11640 <cbprintf_package_convert+0x2c4>
		keep_cnt = ros_nbr;
   1165e:	46c2      	mov	sl, r8
		dst = keep_str_pos;
   11660:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   11664:	f04f 0800 	mov.w	r8, #0
   11668:	e7ea      	b.n	11640 <cbprintf_package_convert+0x2c4>
   1166a:	bf00      	nop
   1166c:	0002fd64 	.word	0x0002fd64
   11670:	0002fdcc 	.word	0x0002fdcc
   11674:	0002fdac 	.word	0x0002fdac
   11678:	0002fde8 	.word	0x0002fde8
   1167c:	0002f848 	.word	0x0002f848
   11680:	0002f3b8 	.word	0x0002f3b8
   11684:	00034afc 	.word	0x00034afc
   11688:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1168a:	69fb      	ldr	r3, [r7, #28]
   1168c:	bb6b      	cbnz	r3, 116ea <cbprintf_package_convert+0x36e>
		if (is_ro) {
   1168e:	2d00      	cmp	r5, #0
   11690:	d061      	beq.n	11756 <cbprintf_package_convert+0x3da>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11692:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   11696:	f013 0f01 	tst.w	r3, #1
   1169a:	d03a      	beq.n	11712 <cbprintf_package_convert+0x396>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   1169c:	f1b8 0f0f 	cmp.w	r8, #15
   116a0:	d82a      	bhi.n	116f8 <cbprintf_package_convert+0x37c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   116a2:	f108 0301 	add.w	r3, r8, #1
   116a6:	f108 0230 	add.w	r2, r8, #48	; 0x30
   116aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
   116ae:	eb02 0801 	add.w	r8, r2, r1
   116b2:	f808 9c14 	strb.w	r9, [r8, #-20]
   116b6:	fa5f f883 	uxtb.w	r8, r3
	for (int i = 0; i < rws_nbr; i++) {
   116ba:	3601      	adds	r6, #1
		uint8_t arg_pos = *str_pos++;
   116bc:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   116be:	6a3b      	ldr	r3, [r7, #32]
   116c0:	429e      	cmp	r6, r3
   116c2:	f080 808e 	bcs.w	117e2 <cbprintf_package_convert+0x466>
		uint8_t arg_idx = *str_pos++;
   116c6:	462c      	mov	r4, r5
   116c8:	f814 bb02 	ldrb.w	fp, [r4], #2
		uint8_t arg_pos = *str_pos++;
   116cc:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   116d2:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   116d6:	4a87      	ldr	r2, [pc, #540]	; (118f4 <cbprintf_package_convert+0x578>)
   116d8:	4293      	cmp	r3, r2
   116da:	d3d5      	bcc.n	11688 <cbprintf_package_convert+0x30c>
   116dc:	4a86      	ldr	r2, [pc, #536]	; (118f8 <cbprintf_package_convert+0x57c>)
   116de:	4293      	cmp	r3, r2
   116e0:	d301      	bcc.n	116e6 <cbprintf_package_convert+0x36a>
   116e2:	2500      	movs	r5, #0
   116e4:	e7d1      	b.n	1168a <cbprintf_package_convert+0x30e>
   116e6:	2501      	movs	r5, #1
   116e8:	e7cf      	b.n	1168a <cbprintf_package_convert+0x30e>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   116ea:	4659      	mov	r1, fp
   116ec:	69b8      	ldr	r0, [r7, #24]
   116ee:	f017 fd6a 	bl	291c6 <is_ptr>
   116f2:	2800      	cmp	r0, #0
   116f4:	d0cb      	beq.n	1168e <cbprintf_package_convert+0x312>
   116f6:	e7e0      	b.n	116ba <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   116f8:	4c80      	ldr	r4, [pc, #512]	; (118fc <cbprintf_package_convert+0x580>)
   116fa:	f240 433e 	movw	r3, #1086	; 0x43e
   116fe:	4622      	mov	r2, r4
   11700:	497f      	ldr	r1, [pc, #508]	; (11900 <cbprintf_package_convert+0x584>)
   11702:	4880      	ldr	r0, [pc, #512]	; (11904 <cbprintf_package_convert+0x588>)
   11704:	f018 f9f1 	bl	29aea <assert_print>
   11708:	f240 413e 	movw	r1, #1086	; 0x43e
   1170c:	4620      	mov	r0, r4
   1170e:	f018 f9e5 	bl	29adc <assert_post_action>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   11716:	f013 0f04 	tst.w	r3, #4
   1171a:	d0ce      	beq.n	116ba <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   1171c:	f1ba 0f0f 	cmp.w	sl, #15
   11720:	d80c      	bhi.n	1173c <cbprintf_package_convert+0x3c0>
				keep_str_pos[keep_cnt++] = arg_pos;
   11722:	f10a 0301 	add.w	r3, sl, #1
   11726:	f10a 0230 	add.w	r2, sl, #48	; 0x30
   1172a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1172e:	eb02 0a01 	add.w	sl, r2, r1
   11732:	f80a 9c24 	strb.w	r9, [sl, #-36]
   11736:	fa5f fa83 	uxtb.w	sl, r3
   1173a:	e7be      	b.n	116ba <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   1173c:	4c6f      	ldr	r4, [pc, #444]	; (118fc <cbprintf_package_convert+0x580>)
   1173e:	f240 4341 	movw	r3, #1089	; 0x441
   11742:	4622      	mov	r2, r4
   11744:	4970      	ldr	r1, [pc, #448]	; (11908 <cbprintf_package_convert+0x58c>)
   11746:	486f      	ldr	r0, [pc, #444]	; (11904 <cbprintf_package_convert+0x588>)
   11748:	f018 f9cf 	bl	29aea <assert_print>
   1174c:	f240 4141 	movw	r1, #1089	; 0x441
   11750:	4620      	mov	r0, r4
   11752:	f018 f9c3 	bl	29adc <assert_post_action>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1175a:	f013 0f02 	tst.w	r3, #2
   1175e:	d01c      	beq.n	1179a <cbprintf_package_convert+0x41e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   11760:	f1b8 0f0f 	cmp.w	r8, #15
   11764:	d80c      	bhi.n	11780 <cbprintf_package_convert+0x404>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   11766:	f108 0301 	add.w	r3, r8, #1
   1176a:	f108 0230 	add.w	r2, r8, #48	; 0x30
   1176e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11772:	eb02 0801 	add.w	r8, r2, r1
   11776:	f808 9c14 	strb.w	r9, [r8, #-20]
   1177a:	fa5f f883 	uxtb.w	r8, r3
   1177e:	e79c      	b.n	116ba <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   11780:	4c5e      	ldr	r4, [pc, #376]	; (118fc <cbprintf_package_convert+0x580>)
   11782:	f44f 6389 	mov.w	r3, #1096	; 0x448
   11786:	4622      	mov	r2, r4
   11788:	495d      	ldr	r1, [pc, #372]	; (11900 <cbprintf_package_convert+0x584>)
   1178a:	485e      	ldr	r0, [pc, #376]	; (11904 <cbprintf_package_convert+0x588>)
   1178c:	f018 f9ad 	bl	29aea <assert_print>
   11790:	f44f 6189 	mov.w	r1, #1096	; 0x448
   11794:	4620      	mov	r0, r4
   11796:	f018 f9a1 	bl	29adc <assert_post_action>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   1179a:	f1ba 0f0f 	cmp.w	sl, #15
   1179e:	d813      	bhi.n	117c8 <cbprintf_package_convert+0x44c>
				keep_str_pos[keep_cnt++] = arg_idx;
   117a0:	f10a 0301 	add.w	r3, sl, #1
   117a4:	f10a 0230 	add.w	r2, sl, #48	; 0x30
   117a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   117ac:	440a      	add	r2, r1
   117ae:	f802 bc24 	strb.w	fp, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   117b2:	f10a 0a02 	add.w	sl, sl, #2
   117b6:	fa5f fa8a 	uxtb.w	sl, sl
   117ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
   117be:	fa52 f383 	uxtab	r3, r2, r3
   117c2:	f803 9c24 	strb.w	r9, [r3, #-36]
   117c6:	e778      	b.n	116ba <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   117c8:	4c4c      	ldr	r4, [pc, #304]	; (118fc <cbprintf_package_convert+0x580>)
   117ca:	f240 434b 	movw	r3, #1099	; 0x44b
   117ce:	4622      	mov	r2, r4
   117d0:	494d      	ldr	r1, [pc, #308]	; (11908 <cbprintf_package_convert+0x58c>)
   117d2:	484c      	ldr	r0, [pc, #304]	; (11904 <cbprintf_package_convert+0x588>)
   117d4:	f018 f989 	bl	29aea <assert_print>
   117d8:	f240 414b 	movw	r1, #1099	; 0x44b
   117dc:	4620      	mov	r0, r4
   117de:	f018 f97d 	bl	29adc <assert_post_action>
	out_desc.len = in_desc->len;
   117e2:	f8d7 b004 	ldr.w	fp, [r7, #4]
   117e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   117e8:	7813      	ldrb	r3, [r2, #0]
   117ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   117ee:	7853      	ldrb	r3, [r2, #1]
   117f0:	4443      	add	r3, r8
   117f2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   117f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   117fa:	f013 0f02 	tst.w	r3, #2
   117fe:	d10d      	bne.n	1181c <cbprintf_package_convert+0x4a0>
   11800:	f3ca 0347 	ubfx	r3, sl, #1, #8
   11804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1180c:	f013 0f01 	tst.w	r3, #1
   11810:	d106      	bne.n	11820 <cbprintf_package_convert+0x4a4>
   11812:	f013 0f04 	tst.w	r3, #4
   11816:	d135      	bne.n	11884 <cbprintf_package_convert+0x508>
   11818:	2300      	movs	r3, #0
   1181a:	e002      	b.n	11822 <cbprintf_package_convert+0x4a6>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1181c:	2300      	movs	r3, #0
   1181e:	e7f1      	b.n	11804 <cbprintf_package_convert+0x488>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11820:	2300      	movs	r3, #0
   11822:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   11826:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   11828:	6820      	ldr	r0, [r4, #0]
   1182a:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   1182c:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1182e:	6020      	str	r0, [r4, #0]
	rv = cb(in_packaged, args_size, ctx);
   11830:	465a      	mov	r2, fp
   11832:	68b9      	ldr	r1, [r7, #8]
   11834:	4620      	mov	r0, r4
   11836:	697e      	ldr	r6, [r7, #20]
   11838:	47b0      	blx	r6
	if (rv < 0) {
   1183a:	f1b0 0900 	subs.w	r9, r0, #0
   1183e:	f6ff ae05 	blt.w	1144c <cbprintf_package_convert+0xd0>
	*in_desc = in_desc_backup;
   11842:	6b38      	ldr	r0, [r7, #48]	; 0x30
   11844:	6020      	str	r0, [r4, #0]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   11846:	465a      	mov	r2, fp
   11848:	4651      	mov	r1, sl
   1184a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1184e:	47b0      	blx	r6
	if (rv < 0) {
   11850:	2800      	cmp	r0, #0
   11852:	db49      	blt.n	118e8 <cbprintf_package_convert+0x56c>
	out_len += rv;
   11854:	eb09 0400 	add.w	r4, r9, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   11858:	68fa      	ldr	r2, [r7, #12]
   1185a:	68bb      	ldr	r3, [r7, #8]
   1185c:	441a      	add	r2, r3
   1185e:	6a3b      	ldr	r3, [r7, #32]
   11860:	eb02 0143 	add.w	r1, r2, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   11864:	465a      	mov	r2, fp
   11866:	693b      	ldr	r3, [r7, #16]
   11868:	1a59      	subs	r1, r3, r1
   1186a:	4628      	mov	r0, r5
   1186c:	47b0      	blx	r6
	if (rv < 0) {
   1186e:	f1b0 0900 	subs.w	r9, r0, #0
   11872:	f6ff adeb 	blt.w	1144c <cbprintf_package_convert+0xd0>
	out_len += rv;
   11876:	444c      	add	r4, r9
	for (int i = 0; i < scpy_cnt; i++) {
   11878:	2500      	movs	r5, #0
   1187a:	f8c7 8020 	str.w	r8, [r7, #32]
   1187e:	f8d7 9084 	ldr.w	r9, [r7, #132]	; 0x84
   11882:	e015      	b.n	118b0 <cbprintf_package_convert+0x534>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11884:	4653      	mov	r3, sl
   11886:	e7cc      	b.n	11822 <cbprintf_package_convert+0x4a6>
		uint16_t str_len = strl ? strl[i] : 0;
   11888:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   1188c:	465a      	mov	r2, fp
   1188e:	2101      	movs	r1, #1
   11890:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   11894:	47b0      	blx	r6
		if (rv < 0) {
   11896:	2800      	cmp	r0, #0
   11898:	db28      	blt.n	118ec <cbprintf_package_convert+0x570>
		out_len += rv;
   1189a:	4404      	add	r4, r0
		rv = append_string(cb, ctx, str, str_len);
   1189c:	4653      	mov	r3, sl
   1189e:	4642      	mov	r2, r8
   118a0:	4659      	mov	r1, fp
   118a2:	4630      	mov	r0, r6
   118a4:	f017 fc48 	bl	29138 <append_string>
		if (rv < 0) {
   118a8:	2800      	cmp	r0, #0
   118aa:	db21      	blt.n	118f0 <cbprintf_package_convert+0x574>
		out_len += rv;
   118ac:	4404      	add	r4, r0
	for (int i = 0; i < scpy_cnt; i++) {
   118ae:	3501      	adds	r5, #1
   118b0:	6a3b      	ldr	r3, [r7, #32]
   118b2:	429d      	cmp	r5, r3
   118b4:	da11      	bge.n	118da <cbprintf_package_convert+0x55e>
		uint8_t loc = cpy_str_pos[i];
   118b6:	f105 0330 	add.w	r3, r5, #48	; 0x30
   118ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
   118be:	4413      	add	r3, r2
   118c0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   118c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   118c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   118ca:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   118ce:	f1b9 0f00 	cmp.w	r9, #0
   118d2:	d0d9      	beq.n	11888 <cbprintf_package_convert+0x50c>
   118d4:	f839 a015 	ldrh.w	sl, [r9, r5, lsl #1]
   118d8:	e7d8      	b.n	1188c <cbprintf_package_convert+0x510>
	(void)cb(NULL, 0, ctx);
   118da:	465a      	mov	r2, fp
   118dc:	2100      	movs	r1, #0
   118de:	4608      	mov	r0, r1
   118e0:	697b      	ldr	r3, [r7, #20]
   118e2:	4798      	blx	r3
	return out_len;
   118e4:	46a1      	mov	r9, r4
   118e6:	e5b1      	b.n	1144c <cbprintf_package_convert+0xd0>
		return rv;
   118e8:	4681      	mov	r9, r0
   118ea:	e5af      	b.n	1144c <cbprintf_package_convert+0xd0>
   118ec:	4681      	mov	r9, r0
   118ee:	e5ad      	b.n	1144c <cbprintf_package_convert+0xd0>
   118f0:	4681      	mov	r9, r0
   118f2:	e5ab      	b.n	1144c <cbprintf_package_convert+0xd0>
   118f4:	0002f3b8 	.word	0x0002f3b8
   118f8:	00034afc 	.word	0x00034afc
   118fc:	0002fd64 	.word	0x0002fd64
   11900:	0002fe8c 	.word	0x0002fe8c
   11904:	0002fdac 	.word	0x0002fdac
   11908:	0002feac 	.word	0x0002feac

0001190c <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   1190c:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   1190e:	4b02      	ldr	r3, [pc, #8]	; (11918 <char_out+0xc>)
   11910:	681b      	ldr	r3, [r3, #0]
   11912:	4798      	blx	r3
}
   11914:	bd08      	pop	{r3, pc}
   11916:	bf00      	nop
   11918:	200081d8 	.word	0x200081d8

0001191c <__printk_hook_install>:
	_char_out = fn;
   1191c:	4b01      	ldr	r3, [pc, #4]	; (11924 <__printk_hook_install+0x8>)
   1191e:	6018      	str	r0, [r3, #0]
}
   11920:	4770      	bx	lr
   11922:	bf00      	nop
   11924:	200081d8 	.word	0x200081d8

00011928 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   11928:	b500      	push	{lr}
   1192a:	b083      	sub	sp, #12
   1192c:	4602      	mov	r2, r0
   1192e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11930:	2100      	movs	r1, #0
   11932:	9100      	str	r1, [sp, #0]
   11934:	4802      	ldr	r0, [pc, #8]	; (11940 <vprintk+0x18>)
   11936:	f000 fd51 	bl	123dc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   1193a:	b003      	add	sp, #12
   1193c:	f85d fb04 	ldr.w	pc, [sp], #4
   11940:	0001190d 	.word	0x0001190d

00011944 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11944:	b510      	push	{r4, lr}
   11946:	b086      	sub	sp, #24
   11948:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1194a:	9003      	str	r0, [sp, #12]
   1194c:	9104      	str	r1, [sp, #16]
   1194e:	2100      	movs	r1, #0
   11950:	9105      	str	r1, [sp, #20]
   11952:	9100      	str	r1, [sp, #0]
   11954:	a903      	add	r1, sp, #12
   11956:	4806      	ldr	r0, [pc, #24]	; (11970 <vsnprintk+0x2c>)
   11958:	f000 fd40 	bl	123dc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   1195c:	9b05      	ldr	r3, [sp, #20]
   1195e:	9a04      	ldr	r2, [sp, #16]
   11960:	4293      	cmp	r3, r2
   11962:	da01      	bge.n	11968 <vsnprintk+0x24>
		str[ctx.count] = '\0';
   11964:	2200      	movs	r2, #0
   11966:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   11968:	9805      	ldr	r0, [sp, #20]
   1196a:	b006      	add	sp, #24
   1196c:	bd10      	pop	{r4, pc}
   1196e:	bf00      	nop
   11970:	00029219 	.word	0x00029219

00011974 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   11974:	2900      	cmp	r1, #0
   11976:	d03b      	beq.n	119f0 <sys_heap_free+0x7c>
{
   11978:	b538      	push	{r3, r4, r5, lr}
   1197a:	460d      	mov	r5, r1
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1197c:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1197e:	4620      	mov	r0, r4
   11980:	f017 fd09 	bl	29396 <mem_to_chunkid>
   11984:	4601      	mov	r1, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11986:	00c2      	lsls	r2, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11988:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
   1198c:	885b      	ldrh	r3, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1198e:	f013 0f01 	tst.w	r3, #1
   11992:	d00f      	beq.n	119b4 <sys_heap_free+0x40>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   11994:	eb00 0353 	add.w	r3, r0, r3, lsr #1
		return ((uint16_t *)cmem)[f];
   11998:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1199c:	1a1b      	subs	r3, r3, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   1199e:	4299      	cmp	r1, r3
   119a0:	d117      	bne.n	119d2 <sys_heap_free+0x5e>
	void *cmem = &buf[c];
   119a2:	18a3      	adds	r3, r4, r2
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   119a4:	885a      	ldrh	r2, [r3, #2]
   119a6:	f022 0201 	bic.w	r2, r2, #1
   119aa:	805a      	strh	r2, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   119ac:	4620      	mov	r0, r4
   119ae:	f017 fd0e 	bl	293ce <free_chunk>
}
   119b2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(chunk_used(h, c),
   119b4:	4c0f      	ldr	r4, [pc, #60]	; (119f4 <sys_heap_free+0x80>)
   119b6:	23af      	movs	r3, #175	; 0xaf
   119b8:	4622      	mov	r2, r4
   119ba:	490f      	ldr	r1, [pc, #60]	; (119f8 <sys_heap_free+0x84>)
   119bc:	480f      	ldr	r0, [pc, #60]	; (119fc <sys_heap_free+0x88>)
   119be:	f018 f894 	bl	29aea <assert_print>
   119c2:	4629      	mov	r1, r5
   119c4:	480e      	ldr	r0, [pc, #56]	; (11a00 <sys_heap_free+0x8c>)
   119c6:	f018 f890 	bl	29aea <assert_print>
   119ca:	21af      	movs	r1, #175	; 0xaf
   119cc:	4620      	mov	r0, r4
   119ce:	f018 f885 	bl	29adc <assert_post_action>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   119d2:	4c08      	ldr	r4, [pc, #32]	; (119f4 <sys_heap_free+0x80>)
   119d4:	23b7      	movs	r3, #183	; 0xb7
   119d6:	4622      	mov	r2, r4
   119d8:	490a      	ldr	r1, [pc, #40]	; (11a04 <sys_heap_free+0x90>)
   119da:	4808      	ldr	r0, [pc, #32]	; (119fc <sys_heap_free+0x88>)
   119dc:	f018 f885 	bl	29aea <assert_print>
   119e0:	4629      	mov	r1, r5
   119e2:	4809      	ldr	r0, [pc, #36]	; (11a08 <sys_heap_free+0x94>)
   119e4:	f018 f881 	bl	29aea <assert_print>
   119e8:	21b7      	movs	r1, #183	; 0xb7
   119ea:	4620      	mov	r0, r4
   119ec:	f018 f876 	bl	29adc <assert_post_action>
   119f0:	4770      	bx	lr
   119f2:	bf00      	nop
   119f4:	0002fee0 	.word	0x0002fee0
   119f8:	0002ff04 	.word	0x0002ff04
   119fc:	0002fdac 	.word	0x0002fdac
   11a00:	0002ff18 	.word	0x0002ff18
   11a04:	0002ff50 	.word	0x0002ff50
   11a08:	0002ff78 	.word	0x0002ff78

00011a0c <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11a10:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   11a12:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11a14:	424b      	negs	r3, r1
   11a16:	400b      	ands	r3, r1
	if (align != rew) {
   11a18:	f101 39ff 	add.w	r9, r1, #4294967295
   11a1c:	ea19 0901 	ands.w	r9, r9, r1
   11a20:	d004      	beq.n	11a2c <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   11a22:	2b03      	cmp	r3, #3
   11a24:	d84a      	bhi.n	11abc <sys_heap_aligned_alloc+0xb0>
		align -= rew;
   11a26:	464c      	mov	r4, r9
	rew = align & -align;
   11a28:	4699      	mov	r9, r3
   11a2a:	e003      	b.n	11a34 <sys_heap_aligned_alloc+0x28>
   11a2c:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   11a2e:	2904      	cmp	r1, #4
   11a30:	d93f      	bls.n	11ab2 <sys_heap_aligned_alloc+0xa6>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   11a32:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11a34:	1e62      	subs	r2, r4, #1
   11a36:	4222      	tst	r2, r4
   11a38:	d144      	bne.n	11ac4 <sys_heap_aligned_alloc+0xb8>

	if (bytes == 0 || size_too_big(h, bytes)) {
   11a3a:	2d00      	cmp	r5, #0
   11a3c:	d066      	beq.n	11b0c <sys_heap_aligned_alloc+0x100>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   11a3e:	68b2      	ldr	r2, [r6, #8]
   11a40:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   11a44:	d965      	bls.n	11b12 <sys_heap_aligned_alloc+0x106>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   11a46:	1961      	adds	r1, r4, r5
   11a48:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11a4a:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11a4c:	08c9      	lsrs	r1, r1, #3
   11a4e:	4630      	mov	r0, r6
   11a50:	f017 fcee 	bl	29430 <alloc_chunk>

	if (c0 == 0) {
   11a54:	4607      	mov	r7, r0
   11a56:	2800      	cmp	r0, #0
   11a58:	d05e      	beq.n	11b18 <sys_heap_aligned_alloc+0x10c>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   11a5a:	4601      	mov	r1, r0
   11a5c:	4630      	mov	r0, r6
   11a5e:	f017 fc19 	bl	29294 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11a62:	eb00 0809 	add.w	r8, r0, r9
   11a66:	44a0      	add	r8, r4
   11a68:	f108 38ff 	add.w	r8, r8, #4294967295
   11a6c:	4264      	negs	r4, r4
   11a6e:	ea08 0804 	and.w	r8, r8, r4
   11a72:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11a76:	eb08 0405 	add.w	r4, r8, r5
   11a7a:	3407      	adds	r4, #7
   11a7c:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   11a80:	4641      	mov	r1, r8
   11a82:	4630      	mov	r0, r6
   11a84:	f017 fc87 	bl	29396 <mem_to_chunkid>
   11a88:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   11a8a:	1ba4      	subs	r4, r4, r6
   11a8c:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   11a8e:	4287      	cmp	r7, r0
   11a90:	d328      	bcc.n	11ae4 <sys_heap_aligned_alloc+0xd8>
	void *cmem = &buf[c];
   11a92:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   11a94:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   11a98:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   11a9a:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   11a9e:	429c      	cmp	r4, r3
   11aa0:	d32a      	bcc.n	11af8 <sys_heap_aligned_alloc+0xec>
	void *cmem = &buf[c];
   11aa2:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11aa4:	8873      	ldrh	r3, [r6, #2]
   11aa6:	f043 0301 	orr.w	r3, r3, #1
   11aaa:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   11aac:	4640      	mov	r0, r8
   11aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   11ab2:	4611      	mov	r1, r2
   11ab4:	f017 fcf7 	bl	294a6 <sys_heap_alloc>
   11ab8:	4680      	mov	r8, r0
   11aba:	e7f7      	b.n	11aac <sys_heap_aligned_alloc+0xa0>
		align -= rew;
   11abc:	464c      	mov	r4, r9
	rew = align & -align;
   11abe:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   11ac0:	2304      	movs	r3, #4
   11ac2:	e7b7      	b.n	11a34 <sys_heap_aligned_alloc+0x28>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11ac4:	4c16      	ldr	r4, [pc, #88]	; (11b20 <sys_heap_aligned_alloc+0x114>)
   11ac6:	f44f 73a2 	mov.w	r3, #324	; 0x144
   11aca:	4622      	mov	r2, r4
   11acc:	4915      	ldr	r1, [pc, #84]	; (11b24 <sys_heap_aligned_alloc+0x118>)
   11ace:	4816      	ldr	r0, [pc, #88]	; (11b28 <sys_heap_aligned_alloc+0x11c>)
   11ad0:	f018 f80b 	bl	29aea <assert_print>
   11ad4:	4815      	ldr	r0, [pc, #84]	; (11b2c <sys_heap_aligned_alloc+0x120>)
   11ad6:	f018 f808 	bl	29aea <assert_print>
   11ada:	f44f 71a2 	mov.w	r1, #324	; 0x144
   11ade:	4620      	mov	r0, r4
   11ae0:	f017 fffc 	bl	29adc <assert_post_action>
		split_chunks(h, c0, c);
   11ae4:	4602      	mov	r2, r0
   11ae6:	4639      	mov	r1, r7
   11ae8:	4630      	mov	r0, r6
   11aea:	f017 fc1d 	bl	29328 <split_chunks>
		free_list_add(h, c0);
   11aee:	4639      	mov	r1, r7
   11af0:	4630      	mov	r0, r6
   11af2:	f017 fc60 	bl	293b6 <free_list_add>
   11af6:	e7cc      	b.n	11a92 <sys_heap_aligned_alloc+0x86>
		split_chunks(h, c, c_end);
   11af8:	4622      	mov	r2, r4
   11afa:	4629      	mov	r1, r5
   11afc:	4630      	mov	r0, r6
   11afe:	f017 fc13 	bl	29328 <split_chunks>
		free_list_add(h, c_end);
   11b02:	4621      	mov	r1, r4
   11b04:	4630      	mov	r0, r6
   11b06:	f017 fc56 	bl	293b6 <free_list_add>
   11b0a:	e7ca      	b.n	11aa2 <sys_heap_aligned_alloc+0x96>
		return NULL;
   11b0c:	f04f 0800 	mov.w	r8, #0
   11b10:	e7cc      	b.n	11aac <sys_heap_aligned_alloc+0xa0>
   11b12:	f04f 0800 	mov.w	r8, #0
   11b16:	e7c9      	b.n	11aac <sys_heap_aligned_alloc+0xa0>
		return NULL;
   11b18:	f04f 0800 	mov.w	r8, #0
   11b1c:	e7c6      	b.n	11aac <sys_heap_aligned_alloc+0xa0>
   11b1e:	bf00      	nop
   11b20:	0002fee0 	.word	0x0002fee0
   11b24:	0002ffb4 	.word	0x0002ffb4
   11b28:	0002fdac 	.word	0x0002fdac
   11b2c:	0002ffd0 	.word	0x0002ffd0

00011b30 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11b30:	b570      	push	{r4, r5, r6, lr}
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11b32:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   11b36:	d21f      	bcs.n	11b78 <sys_heap_init+0x48>
   11b38:	4603      	mov	r3, r0
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11b3a:	2a04      	cmp	r2, #4
   11b3c:	d92c      	bls.n	11b98 <sys_heap_init+0x68>
	bytes -= heap_footer_bytes(bytes);
   11b3e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11b40:	1dc8      	adds	r0, r1, #7
   11b42:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11b46:	440a      	add	r2, r1
   11b48:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11b4c:	1a12      	subs	r2, r2, r0
   11b4e:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11b50:	2a17      	cmp	r2, #23
   11b52:	d931      	bls.n	11bb8 <sys_heap_init+0x88>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   11b54:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   11b56:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   11b58:	2300      	movs	r3, #0
   11b5a:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   11b5c:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11b60:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11b64:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   11b68:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11b6a:	1dce      	adds	r6, r1, #7
   11b6c:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11b6e:	1c4b      	adds	r3, r1, #1
   11b70:	42ab      	cmp	r3, r5
   11b72:	d831      	bhi.n	11bd8 <sys_heap_init+0xa8>

	for (int i = 0; i < nb_buckets; i++) {
   11b74:	2300      	movs	r3, #0
   11b76:	e045      	b.n	11c04 <sys_heap_init+0xd4>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11b78:	4c34      	ldr	r4, [pc, #208]	; (11c4c <sys_heap_init+0x11c>)
   11b7a:	f240 13eb 	movw	r3, #491	; 0x1eb
   11b7e:	4622      	mov	r2, r4
   11b80:	4933      	ldr	r1, [pc, #204]	; (11c50 <sys_heap_init+0x120>)
   11b82:	4834      	ldr	r0, [pc, #208]	; (11c54 <sys_heap_init+0x124>)
   11b84:	f017 ffb1 	bl	29aea <assert_print>
   11b88:	4833      	ldr	r0, [pc, #204]	; (11c58 <sys_heap_init+0x128>)
   11b8a:	f017 ffae 	bl	29aea <assert_print>
   11b8e:	f240 11eb 	movw	r1, #491	; 0x1eb
   11b92:	4620      	mov	r0, r4
   11b94:	f017 ffa2 	bl	29adc <assert_post_action>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11b98:	4c2c      	ldr	r4, [pc, #176]	; (11c4c <sys_heap_init+0x11c>)
   11b9a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   11b9e:	4622      	mov	r2, r4
   11ba0:	492e      	ldr	r1, [pc, #184]	; (11c5c <sys_heap_init+0x12c>)
   11ba2:	482c      	ldr	r0, [pc, #176]	; (11c54 <sys_heap_init+0x124>)
   11ba4:	f017 ffa1 	bl	29aea <assert_print>
   11ba8:	482d      	ldr	r0, [pc, #180]	; (11c60 <sys_heap_init+0x130>)
   11baa:	f017 ff9e 	bl	29aea <assert_print>
   11bae:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   11bb2:	4620      	mov	r0, r4
   11bb4:	f017 ff92 	bl	29adc <assert_post_action>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11bb8:	4c24      	ldr	r4, [pc, #144]	; (11c4c <sys_heap_init+0x11c>)
   11bba:	f240 13fb 	movw	r3, #507	; 0x1fb
   11bbe:	4622      	mov	r2, r4
   11bc0:	4928      	ldr	r1, [pc, #160]	; (11c64 <sys_heap_init+0x134>)
   11bc2:	4824      	ldr	r0, [pc, #144]	; (11c54 <sys_heap_init+0x124>)
   11bc4:	f017 ff91 	bl	29aea <assert_print>
   11bc8:	4825      	ldr	r0, [pc, #148]	; (11c60 <sys_heap_init+0x130>)
   11bca:	f017 ff8e 	bl	29aea <assert_print>
   11bce:	f240 11fb 	movw	r1, #507	; 0x1fb
   11bd2:	4620      	mov	r0, r4
   11bd4:	f017 ff82 	bl	29adc <assert_post_action>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11bd8:	4c1c      	ldr	r4, [pc, #112]	; (11c4c <sys_heap_init+0x11c>)
   11bda:	f44f 7303 	mov.w	r3, #524	; 0x20c
   11bde:	4622      	mov	r2, r4
   11be0:	4921      	ldr	r1, [pc, #132]	; (11c68 <sys_heap_init+0x138>)
   11be2:	481c      	ldr	r0, [pc, #112]	; (11c54 <sys_heap_init+0x124>)
   11be4:	f017 ff81 	bl	29aea <assert_print>
   11be8:	481d      	ldr	r0, [pc, #116]	; (11c60 <sys_heap_init+0x130>)
   11bea:	f017 ff7e 	bl	29aea <assert_print>
   11bee:	f44f 7103 	mov.w	r1, #524	; 0x20c
   11bf2:	4620      	mov	r0, r4
   11bf4:	f017 ff72 	bl	29adc <assert_post_action>
		h->buckets[i].next = 0;
   11bf8:	f103 0c04 	add.w	ip, r3, #4
   11bfc:	2400      	movs	r4, #0
   11bfe:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   11c02:	3301      	adds	r3, #1
   11c04:	4573      	cmp	r3, lr
   11c06:	dbf7      	blt.n	11bf8 <sys_heap_init+0xc8>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11c08:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   11c0a:	b2a4      	uxth	r4, r4
   11c0c:	8044      	strh	r4, [r0, #2]
   11c0e:	f04f 0c00 	mov.w	ip, #0
   11c12:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11c16:	f044 0401 	orr.w	r4, r4, #1
   11c1a:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11c1c:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11c1e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   11c22:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   11c26:	1ca5      	adds	r5, r4, #2
   11c28:	f820 e005 	strh.w	lr, [r0, r5]
   11c2c:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   11c2e:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   11c32:	1c95      	adds	r5, r2, #2
   11c34:	f820 c005 	strh.w	ip, [r0, r5]
   11c38:	4402      	add	r2, r0
   11c3a:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11c3c:	8853      	ldrh	r3, [r2, #2]
   11c3e:	f043 0301 	orr.w	r3, r3, #1
   11c42:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11c44:	f017 fbb7 	bl	293b6 <free_list_add>
}
   11c48:	bd70      	pop	{r4, r5, r6, pc}
   11c4a:	bf00      	nop
   11c4c:	0002fee0 	.word	0x0002fee0
   11c50:	0002fff0 	.word	0x0002fff0
   11c54:	0002fdac 	.word	0x0002fdac
   11c58:	00030008 	.word	0x00030008
   11c5c:	00030020 	.word	0x00030020
   11c60:	00030044 	.word	0x00030044
   11c64:	00030060 	.word	0x00030060
   11c68:	0003008c 	.word	0x0003008c

00011c6c <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   11c6c:	b510      	push	{r4, lr}
   11c6e:	4604      	mov	r4, r0
   11c70:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11c72:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
   11c74:	2a00      	cmp	r2, #0
   11c76:	db12      	blt.n	11c9e <process_complete+0x32>
   11c78:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
   11c7c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11c7e:	2a01      	cmp	r2, #1
   11c80:	d919      	bls.n	11cb6 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
   11c82:	2b04      	cmp	r3, #4
   11c84:	d150      	bne.n	11d28 <process_complete+0xbc>
		/* Any active clients are requests waiting for this
		 * transition to complete.  Queue a RECHECK event to
		 * ensure we don't miss them if we don't unlock to
		 * tell anybody about the completion.
		 */
		set_state(mgr, ONOFF_STATE_OFF);
   11c86:	2100      	movs	r1, #0
   11c88:	f017 fc3f 	bl	2950a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11c8c:	4620      	mov	r0, r4
   11c8e:	f017 fc66 	bl	2955e <process_recheck>
   11c92:	b178      	cbz	r0, 11cb4 <process_complete+0x48>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11c94:	8ba3      	ldrh	r3, [r4, #28]
   11c96:	f043 0320 	orr.w	r3, r3, #32
   11c9a:	83a3      	strh	r3, [r4, #28]
   11c9c:	e00a      	b.n	11cb4 <process_complete+0x48>
		*clients = mgr->clients;
   11c9e:	e9d0 0100 	ldrd	r0, r1, [r0]
   11ca2:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11ca6:	2300      	movs	r3, #0
   11ca8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   11caa:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   11cac:	2101      	movs	r1, #1
   11cae:	4620      	mov	r0, r4
   11cb0:	f017 fc2b 	bl	2950a <set_state>
		}
	} else {
		__ASSERT_NO_MSG(false);
	}
}
   11cb4:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   11cb6:	e9d0 0100 	ldrd	r0, r1, [r0]
   11cba:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   11cbe:	2200      	movs	r2, #0
   11cc0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   11cc2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   11cc4:	2b06      	cmp	r3, #6
   11cc6:	d00f      	beq.n	11ce8 <process_complete+0x7c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   11cc8:	2b05      	cmp	r3, #5
   11cca:	d120      	bne.n	11d0e <process_complete+0xa2>
			set_state(mgr, ONOFF_STATE_OFF);
   11ccc:	2100      	movs	r1, #0
   11cce:	4620      	mov	r0, r4
   11cd0:	f017 fc1b 	bl	2950a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11cd4:	4620      	mov	r0, r4
   11cd6:	f017 fc42 	bl	2955e <process_recheck>
   11cda:	2800      	cmp	r0, #0
   11cdc:	d0ea      	beq.n	11cb4 <process_complete+0x48>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11cde:	8ba3      	ldrh	r3, [r4, #28]
   11ce0:	f043 0320 	orr.w	r3, r3, #32
   11ce4:	83a3      	strh	r3, [r4, #28]
   11ce6:	e7e5      	b.n	11cb4 <process_complete+0x48>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11ce8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11cec:	b153      	cbz	r3, 11d04 <process_complete+0x98>
				mgr->refs += 1U;
   11cee:	8be2      	ldrh	r2, [r4, #30]
   11cf0:	3201      	adds	r2, #1
   11cf2:	83e2      	strh	r2, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11cf4:	461a      	mov	r2, r3
	return node->next;
   11cf6:	681b      	ldr	r3, [r3, #0]
   11cf8:	2b00      	cmp	r3, #0
   11cfa:	d0f7      	beq.n	11cec <process_complete+0x80>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   11cfc:	2a00      	cmp	r2, #0
   11cfe:	d1f5      	bne.n	11cec <process_complete+0x80>
   11d00:	4613      	mov	r3, r2
   11d02:	e7f3      	b.n	11cec <process_complete+0x80>
			set_state(mgr, ONOFF_STATE_ON);
   11d04:	2102      	movs	r1, #2
   11d06:	4620      	mov	r0, r4
   11d08:	f017 fbff 	bl	2950a <set_state>
   11d0c:	e7e2      	b.n	11cd4 <process_complete+0x68>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   11d0e:	4c0d      	ldr	r4, [pc, #52]	; (11d44 <process_complete+0xd8>)
   11d10:	f240 1309 	movw	r3, #265	; 0x109
   11d14:	4622      	mov	r2, r4
   11d16:	490c      	ldr	r1, [pc, #48]	; (11d48 <process_complete+0xdc>)
   11d18:	480c      	ldr	r0, [pc, #48]	; (11d4c <process_complete+0xe0>)
   11d1a:	f017 fee6 	bl	29aea <assert_print>
   11d1e:	f240 1109 	movw	r1, #265	; 0x109
   11d22:	4620      	mov	r0, r4
   11d24:	f017 feda 	bl	29adc <assert_post_action>
		__ASSERT_NO_MSG(false);
   11d28:	4c06      	ldr	r4, [pc, #24]	; (11d44 <process_complete+0xd8>)
   11d2a:	f240 131b 	movw	r3, #283	; 0x11b
   11d2e:	4622      	mov	r2, r4
   11d30:	4907      	ldr	r1, [pc, #28]	; (11d50 <process_complete+0xe4>)
   11d32:	4806      	ldr	r0, [pc, #24]	; (11d4c <process_complete+0xe0>)
   11d34:	f017 fed9 	bl	29aea <assert_print>
   11d38:	f240 111b 	movw	r1, #283	; 0x11b
   11d3c:	4620      	mov	r0, r4
   11d3e:	f017 fecd 	bl	29adc <assert_post_action>
   11d42:	bf00      	nop
   11d44:	000300b8 	.word	0x000300b8
   11d48:	000300dc 	.word	0x000300dc
   11d4c:	0002fdac 	.word	0x0002fdac
   11d50:	000337ec 	.word	0x000337ec

00011d54 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d58:	b082      	sub	sp, #8
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d5a:	8b83      	ldrh	r3, [r0, #28]
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);

	__ASSERT_NO_MSG(evt != EVT_NOP);
   11d5c:	b1e1      	cbz	r1, 11d98 <process_event+0x44>
   11d5e:	4604      	mov	r4, r0
   11d60:	4615      	mov	r5, r2
   11d62:	f003 0607 	and.w	r6, r3, #7
   11d66:	f003 0208 	and.w	r2, r3, #8
   11d6a:	4608      	mov	r0, r1

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11d6c:	b392      	cbz	r2, 11dd4 <process_event+0x80>
		if (evt == EVT_COMPLETE) {
   11d6e:	2901      	cmp	r1, #1
   11d70:	d01f      	beq.n	11db2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   11d72:	2902      	cmp	r1, #2
   11d74:	d121      	bne.n	11dba <process_event+0x66>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11d76:	f043 0320 	orr.w	r3, r3, #32
   11d7a:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   11d7c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d7e:	4620      	mov	r0, r4
   11d80:	f013 f86a 	bl	24e58 <z_spin_unlock_valid>
   11d84:	2800      	cmp	r0, #0
   11d86:	f000 819d 	beq.w	120c4 <process_event+0x370>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11d8a:	f385 8811 	msr	BASEPRI, r5
   11d8e:	f3bf 8f6f 	isb	sy
}
   11d92:	b002      	add	sp, #8
   11d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT_NO_MSG(evt != EVT_NOP);
   11d98:	4cb9      	ldr	r4, [pc, #740]	; (12080 <process_event+0x32c>)
   11d9a:	f240 1333 	movw	r3, #307	; 0x133
   11d9e:	4622      	mov	r2, r4
   11da0:	49b8      	ldr	r1, [pc, #736]	; (12084 <process_event+0x330>)
   11da2:	48b9      	ldr	r0, [pc, #740]	; (12088 <process_event+0x334>)
   11da4:	f017 fea1 	bl	29aea <assert_print>
   11da8:	f240 1133 	movw	r1, #307	; 0x133
   11dac:	4620      	mov	r0, r4
   11dae:	f017 fe95 	bl	29adc <assert_post_action>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11db2:	f043 0310 	orr.w	r3, r3, #16
   11db6:	83a3      	strh	r3, [r4, #28]
   11db8:	e7e0      	b.n	11d7c <process_event+0x28>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   11dba:	4cb1      	ldr	r4, [pc, #708]	; (12080 <process_event+0x32c>)
   11dbc:	f44f 739e 	mov.w	r3, #316	; 0x13c
   11dc0:	4622      	mov	r2, r4
   11dc2:	49b2      	ldr	r1, [pc, #712]	; (1208c <process_event+0x338>)
   11dc4:	48b0      	ldr	r0, [pc, #704]	; (12088 <process_event+0x334>)
   11dc6:	f017 fe90 	bl	29aea <assert_print>
   11dca:	f44f 719e 	mov.w	r1, #316	; 0x13c
   11dce:	4620      	mov	r0, r4
   11dd0:	f017 fe84 	bl	29adc <assert_post_action>
	list->head = NULL;
   11dd4:	2300      	movs	r3, #0
   11dd6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   11dd8:	9301      	str	r3, [sp, #4]
}
   11dda:	e058      	b.n	11e8e <process_event+0x13a>
			evt = process_recheck(mgr);
   11ddc:	4620      	mov	r0, r4
   11dde:	f017 fbbe 	bl	2955e <process_recheck>
   11de2:	e056      	b.n	11e92 <process_event+0x13e>
			res = mgr->last_res;
   11de4:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   11de8:	464a      	mov	r2, r9
   11dea:	4669      	mov	r1, sp
   11dec:	4620      	mov	r0, r4
   11dee:	f7ff ff3d 	bl	11c6c <process_complete>
		onoff_transition_fn transit = NULL;
   11df2:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11df4:	8ba3      	ldrh	r3, [r4, #28]
   11df6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11dfa:	45b0      	cmp	r8, r6
   11dfc:	f000 8109 	beq.w	12012 <process_event+0x2be>
	return list->head;
   11e00:	68a2      	ldr	r2, [r4, #8]
   11e02:	2a00      	cmp	r2, #0
   11e04:	f000 8105 	beq.w	12012 <process_event+0x2be>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11e08:	2601      	movs	r6, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11e0a:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   11e0e:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   11e10:	f104 0a14 	add.w	sl, r4, #20
   11e14:	4650      	mov	r0, sl
   11e16:	f013 f81f 	bl	24e58 <z_spin_unlock_valid>
   11e1a:	2800      	cmp	r0, #0
   11e1c:	f000 8102 	beq.w	12024 <process_event+0x2d0>
   11e20:	f385 8811 	msr	BASEPRI, r5
   11e24:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11e28:	2e00      	cmp	r6, #0
   11e2a:	f040 810a 	bne.w	12042 <process_event+0x2ee>
   11e2e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   11e30:	b12b      	cbz	r3, 11e3e <process_event+0xea>
				notify_all(mgr, &clients, state, res);
   11e32:	464b      	mov	r3, r9
   11e34:	4642      	mov	r2, r8
   11e36:	4669      	mov	r1, sp
   11e38:	4620      	mov	r0, r4
   11e3a:	f017 fbd1 	bl	295e0 <notify_all>
			if (transit != NULL) {
   11e3e:	b117      	cbz	r7, 11e46 <process_event+0xf2>
				transit(mgr, transition_complete);
   11e40:	4993      	ldr	r1, [pc, #588]	; (12090 <process_event+0x33c>)
   11e42:	4620      	mov	r0, r4
   11e44:	47b8      	blx	r7
	__asm__ volatile(
   11e46:	f04f 0320 	mov.w	r3, #32
   11e4a:	f3ef 8511 	mrs	r5, BASEPRI
   11e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   11e52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e56:	4650      	mov	r0, sl
   11e58:	f012 ffee 	bl	24e38 <z_spin_lock_valid>
   11e5c:	2800      	cmp	r0, #0
   11e5e:	f000 80f6 	beq.w	1204e <process_event+0x2fa>
	z_spin_lock_set_owner(l);
   11e62:	4650      	mov	r0, sl
   11e64:	f013 f808 	bl	24e78 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11e68:	8ba3      	ldrh	r3, [r4, #28]
   11e6a:	f023 0308 	bic.w	r3, r3, #8
   11e6e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11e70:	8ba3      	ldrh	r3, [r4, #28]
   11e72:	f013 0f10 	tst.w	r3, #16
   11e76:	f000 80f9 	beq.w	1206c <process_event+0x318>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11e7a:	f023 0310 	bic.w	r3, r3, #16
   11e7e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   11e80:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11e82:	8ba6      	ldrh	r6, [r4, #28]
   11e84:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   11e88:	2800      	cmp	r0, #0
   11e8a:	f43f af77 	beq.w	11d7c <process_event+0x28>
		if (evt == EVT_RECHECK) {
   11e8e:	2802      	cmp	r0, #2
   11e90:	d0a4      	beq.n	11ddc <process_event+0x88>
		if (evt == EVT_NOP) {
   11e92:	2800      	cmp	r0, #0
   11e94:	f43f af72 	beq.w	11d7c <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   11e98:	3801      	subs	r0, #1
   11e9a:	2804      	cmp	r0, #4
   11e9c:	f200 80ac 	bhi.w	11ff8 <process_event+0x2a4>
   11ea0:	a301      	add	r3, pc, #4	; (adr r3, 11ea8 <process_event+0x154>)
   11ea2:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   11ea6:	bf00      	nop
   11ea8:	00011de5 	.word	0x00011de5
   11eac:	00011ff9 	.word	0x00011ff9
   11eb0:	00011ebd 	.word	0x00011ebd
   11eb4:	00011f25 	.word	0x00011f25
   11eb8:	00011f8f 	.word	0x00011f8f
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11ebc:	b95e      	cbnz	r6, 11ed6 <process_event+0x182>
   11ebe:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11ec0:	b1b3      	cbz	r3, 11ef0 <process_event+0x19c>
			transit = mgr->transitions->start;
   11ec2:	6923      	ldr	r3, [r4, #16]
   11ec4:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   11ec6:	b307      	cbz	r7, 11f0a <process_event+0x1b6>
			set_state(mgr, ONOFF_STATE_TO_ON);
   11ec8:	2106      	movs	r1, #6
   11eca:	4620      	mov	r0, r4
   11ecc:	f017 fb1d 	bl	2950a <set_state>
		res = 0;
   11ed0:	f04f 0900 	mov.w	r9, #0
   11ed4:	e78e      	b.n	11df4 <process_event+0xa0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11ed6:	4c6a      	ldr	r4, [pc, #424]	; (12080 <process_event+0x32c>)
   11ed8:	f44f 73ab 	mov.w	r3, #342	; 0x156
   11edc:	4622      	mov	r2, r4
   11ede:	496d      	ldr	r1, [pc, #436]	; (12094 <process_event+0x340>)
   11ee0:	4869      	ldr	r0, [pc, #420]	; (12088 <process_event+0x334>)
   11ee2:	f017 fe02 	bl	29aea <assert_print>
   11ee6:	f44f 71ab 	mov.w	r1, #342	; 0x156
   11eea:	4620      	mov	r0, r4
   11eec:	f017 fdf6 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11ef0:	4c63      	ldr	r4, [pc, #396]	; (12080 <process_event+0x32c>)
   11ef2:	f240 1357 	movw	r3, #343	; 0x157
   11ef6:	4622      	mov	r2, r4
   11ef8:	4967      	ldr	r1, [pc, #412]	; (12098 <process_event+0x344>)
   11efa:	4863      	ldr	r0, [pc, #396]	; (12088 <process_event+0x334>)
   11efc:	f017 fdf5 	bl	29aea <assert_print>
   11f00:	f240 1157 	movw	r1, #343	; 0x157
   11f04:	4620      	mov	r0, r4
   11f06:	f017 fde9 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   11f0a:	4c5d      	ldr	r4, [pc, #372]	; (12080 <process_event+0x32c>)
   11f0c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   11f10:	4622      	mov	r2, r4
   11f12:	4962      	ldr	r1, [pc, #392]	; (1209c <process_event+0x348>)
   11f14:	485c      	ldr	r0, [pc, #368]	; (12088 <process_event+0x334>)
   11f16:	f017 fde8 	bl	29aea <assert_print>
   11f1a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   11f1e:	4620      	mov	r0, r4
   11f20:	f017 fddc 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   11f24:	2e02      	cmp	r6, #2
   11f26:	d10b      	bne.n	11f40 <process_event+0x1ec>
			__ASSERT_NO_MSG(mgr->refs == 0);
   11f28:	8be3      	ldrh	r3, [r4, #30]
   11f2a:	b9b3      	cbnz	r3, 11f5a <process_event+0x206>
			transit = mgr->transitions->stop;
   11f2c:	6923      	ldr	r3, [r4, #16]
   11f2e:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   11f30:	b307      	cbz	r7, 11f74 <process_event+0x220>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   11f32:	2104      	movs	r1, #4
   11f34:	4620      	mov	r0, r4
   11f36:	f017 fae8 	bl	2950a <set_state>
		res = 0;
   11f3a:	f04f 0900 	mov.w	r9, #0
   11f3e:	e759      	b.n	11df4 <process_event+0xa0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   11f40:	4c4f      	ldr	r4, [pc, #316]	; (12080 <process_event+0x32c>)
   11f42:	f240 135d 	movw	r3, #349	; 0x15d
   11f46:	4622      	mov	r2, r4
   11f48:	4955      	ldr	r1, [pc, #340]	; (120a0 <process_event+0x34c>)
   11f4a:	484f      	ldr	r0, [pc, #316]	; (12088 <process_event+0x334>)
   11f4c:	f017 fdcd 	bl	29aea <assert_print>
   11f50:	f240 115d 	movw	r1, #349	; 0x15d
   11f54:	4620      	mov	r0, r4
   11f56:	f017 fdc1 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   11f5a:	4c49      	ldr	r4, [pc, #292]	; (12080 <process_event+0x32c>)
   11f5c:	f44f 73af 	mov.w	r3, #350	; 0x15e
   11f60:	4622      	mov	r2, r4
   11f62:	4950      	ldr	r1, [pc, #320]	; (120a4 <process_event+0x350>)
   11f64:	4848      	ldr	r0, [pc, #288]	; (12088 <process_event+0x334>)
   11f66:	f017 fdc0 	bl	29aea <assert_print>
   11f6a:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11f6e:	4620      	mov	r0, r4
   11f70:	f017 fdb4 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   11f74:	4c42      	ldr	r4, [pc, #264]	; (12080 <process_event+0x32c>)
   11f76:	f240 1361 	movw	r3, #353	; 0x161
   11f7a:	4622      	mov	r2, r4
   11f7c:	4947      	ldr	r1, [pc, #284]	; (1209c <process_event+0x348>)
   11f7e:	4842      	ldr	r0, [pc, #264]	; (12088 <process_event+0x334>)
   11f80:	f017 fdb3 	bl	29aea <assert_print>
   11f84:	f240 1161 	movw	r1, #353	; 0x161
   11f88:	4620      	mov	r0, r4
   11f8a:	f017 fda7 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11f8e:	2e01      	cmp	r6, #1
   11f90:	d10b      	bne.n	11faa <process_event+0x256>
   11f92:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11f94:	b1b3      	cbz	r3, 11fc4 <process_event+0x270>
			transit = mgr->transitions->reset;
   11f96:	6923      	ldr	r3, [r4, #16]
   11f98:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   11f9a:	b307      	cbz	r7, 11fde <process_event+0x28a>
			set_state(mgr, ONOFF_STATE_RESETTING);
   11f9c:	2105      	movs	r1, #5
   11f9e:	4620      	mov	r0, r4
   11fa0:	f017 fab3 	bl	2950a <set_state>
		res = 0;
   11fa4:	f04f 0900 	mov.w	r9, #0
   11fa8:	e724      	b.n	11df4 <process_event+0xa0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11faa:	4c35      	ldr	r4, [pc, #212]	; (12080 <process_event+0x32c>)
   11fac:	f44f 73b2 	mov.w	r3, #356	; 0x164
   11fb0:	4622      	mov	r2, r4
   11fb2:	493d      	ldr	r1, [pc, #244]	; (120a8 <process_event+0x354>)
   11fb4:	4834      	ldr	r0, [pc, #208]	; (12088 <process_event+0x334>)
   11fb6:	f017 fd98 	bl	29aea <assert_print>
   11fba:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11fbe:	4620      	mov	r0, r4
   11fc0:	f017 fd8c 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11fc4:	4c2e      	ldr	r4, [pc, #184]	; (12080 <process_event+0x32c>)
   11fc6:	f240 1365 	movw	r3, #357	; 0x165
   11fca:	4622      	mov	r2, r4
   11fcc:	4932      	ldr	r1, [pc, #200]	; (12098 <process_event+0x344>)
   11fce:	482e      	ldr	r0, [pc, #184]	; (12088 <process_event+0x334>)
   11fd0:	f017 fd8b 	bl	29aea <assert_print>
   11fd4:	f240 1165 	movw	r1, #357	; 0x165
   11fd8:	4620      	mov	r0, r4
   11fda:	f017 fd7f 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   11fde:	4c28      	ldr	r4, [pc, #160]	; (12080 <process_event+0x32c>)
   11fe0:	f44f 73b4 	mov.w	r3, #360	; 0x168
   11fe4:	4622      	mov	r2, r4
   11fe6:	492d      	ldr	r1, [pc, #180]	; (1209c <process_event+0x348>)
   11fe8:	4827      	ldr	r0, [pc, #156]	; (12088 <process_event+0x334>)
   11fea:	f017 fd7e 	bl	29aea <assert_print>
   11fee:	f44f 71b4 	mov.w	r1, #360	; 0x168
   11ff2:	4620      	mov	r0, r4
   11ff4:	f017 fd72 	bl	29adc <assert_post_action>
			__ASSERT_NO_MSG(false);
   11ff8:	4c21      	ldr	r4, [pc, #132]	; (12080 <process_event+0x32c>)
   11ffa:	f240 136b 	movw	r3, #363	; 0x16b
   11ffe:	4622      	mov	r2, r4
   12000:	492a      	ldr	r1, [pc, #168]	; (120ac <process_event+0x358>)
   12002:	4821      	ldr	r0, [pc, #132]	; (12088 <process_event+0x334>)
   12004:	f017 fd71 	bl	29aea <assert_print>
   12008:	f240 116b 	movw	r1, #363	; 0x16b
   1200c:	4620      	mov	r0, r4
   1200e:	f017 fd65 	bl	29adc <assert_post_action>
   12012:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   12014:	b10a      	cbz	r2, 1201a <process_event+0x2c6>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12016:	2600      	movs	r6, #0
   12018:	e6f7      	b.n	11e0a <process_event+0xb6>
		    || (transit != NULL)) {
   1201a:	2f00      	cmp	r7, #0
   1201c:	f43f af28 	beq.w	11e70 <process_event+0x11c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12020:	2600      	movs	r6, #0
   12022:	e6f2      	b.n	11e0a <process_event+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12024:	4c22      	ldr	r4, [pc, #136]	; (120b0 <process_event+0x35c>)
   12026:	23c2      	movs	r3, #194	; 0xc2
   12028:	4622      	mov	r2, r4
   1202a:	4922      	ldr	r1, [pc, #136]	; (120b4 <process_event+0x360>)
   1202c:	4816      	ldr	r0, [pc, #88]	; (12088 <process_event+0x334>)
   1202e:	f017 fd5c 	bl	29aea <assert_print>
   12032:	4651      	mov	r1, sl
   12034:	4820      	ldr	r0, [pc, #128]	; (120b8 <process_event+0x364>)
   12036:	f017 fd58 	bl	29aea <assert_print>
   1203a:	21c2      	movs	r1, #194	; 0xc2
   1203c:	4620      	mov	r0, r4
   1203e:	f017 fd4d 	bl	29adc <assert_post_action>
				notify_monitors(mgr, state, res);
   12042:	464a      	mov	r2, r9
   12044:	4641      	mov	r1, r8
   12046:	4620      	mov	r0, r4
   12048:	f017 fa67 	bl	2951a <notify_monitors>
   1204c:	e6ef      	b.n	11e2e <process_event+0xda>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1204e:	4c18      	ldr	r4, [pc, #96]	; (120b0 <process_event+0x35c>)
   12050:	2394      	movs	r3, #148	; 0x94
   12052:	4622      	mov	r2, r4
   12054:	4919      	ldr	r1, [pc, #100]	; (120bc <process_event+0x368>)
   12056:	480c      	ldr	r0, [pc, #48]	; (12088 <process_event+0x334>)
   12058:	f017 fd47 	bl	29aea <assert_print>
   1205c:	4651      	mov	r1, sl
   1205e:	4818      	ldr	r0, [pc, #96]	; (120c0 <process_event+0x36c>)
   12060:	f017 fd43 	bl	29aea <assert_print>
   12064:	2194      	movs	r1, #148	; 0x94
   12066:	4620      	mov	r0, r4
   12068:	f017 fd38 	bl	29adc <assert_post_action>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1206c:	f013 0f20 	tst.w	r3, #32
   12070:	d004      	beq.n	1207c <process_event+0x328>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12072:	f023 0320 	bic.w	r3, r3, #32
   12076:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   12078:	2002      	movs	r0, #2
   1207a:	e702      	b.n	11e82 <process_event+0x12e>
		evt = EVT_NOP;
   1207c:	2000      	movs	r0, #0
   1207e:	e700      	b.n	11e82 <process_event+0x12e>
   12080:	000300b8 	.word	0x000300b8
   12084:	00030104 	.word	0x00030104
   12088:	0002fdac 	.word	0x0002fdac
   1208c:	00030114 	.word	0x00030114
   12090:	000120f5 	.word	0x000120f5
   12094:	00030128 	.word	0x00030128
   12098:	00030134 	.word	0x00030134
   1209c:	00030158 	.word	0x00030158
   120a0:	00030170 	.word	0x00030170
   120a4:	00030188 	.word	0x00030188
   120a8:	00030198 	.word	0x00030198
   120ac:	000337ec 	.word	0x000337ec
   120b0:	000301b0 	.word	0x000301b0
   120b4:	000301e0 	.word	0x000301e0
   120b8:	000301f8 	.word	0x000301f8
   120bc:	00030210 	.word	0x00030210
   120c0:	00030228 	.word	0x00030228
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   120c4:	4d07      	ldr	r5, [pc, #28]	; (120e4 <process_event+0x390>)
   120c6:	23c2      	movs	r3, #194	; 0xc2
   120c8:	462a      	mov	r2, r5
   120ca:	4907      	ldr	r1, [pc, #28]	; (120e8 <process_event+0x394>)
   120cc:	4807      	ldr	r0, [pc, #28]	; (120ec <process_event+0x398>)
   120ce:	f017 fd0c 	bl	29aea <assert_print>
   120d2:	4621      	mov	r1, r4
   120d4:	4806      	ldr	r0, [pc, #24]	; (120f0 <process_event+0x39c>)
   120d6:	f017 fd08 	bl	29aea <assert_print>
   120da:	21c2      	movs	r1, #194	; 0xc2
   120dc:	4628      	mov	r0, r5
   120de:	f017 fcfd 	bl	29adc <assert_post_action>
   120e2:	bf00      	nop
   120e4:	000301b0 	.word	0x000301b0
   120e8:	000301e0 	.word	0x000301e0
   120ec:	0002fdac 	.word	0x0002fdac
   120f0:	000301f8 	.word	0x000301f8

000120f4 <transition_complete>:
{
   120f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120f6:	4604      	mov	r4, r0
   120f8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   120fa:	f100 0614 	add.w	r6, r0, #20
   120fe:	f04f 0320 	mov.w	r3, #32
   12102:	f3ef 8711 	mrs	r7, BASEPRI
   12106:	f383 8812 	msr	BASEPRI_MAX, r3
   1210a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1210e:	4630      	mov	r0, r6
   12110:	f012 fe92 	bl	24e38 <z_spin_lock_valid>
   12114:	b148      	cbz	r0, 1212a <transition_complete+0x36>
	z_spin_lock_set_owner(l);
   12116:	4630      	mov	r0, r6
   12118:	f012 feae 	bl	24e78 <z_spin_lock_set_owner>
	mgr->last_res = res;
   1211c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1211e:	463a      	mov	r2, r7
   12120:	2101      	movs	r1, #1
   12122:	4620      	mov	r0, r4
   12124:	f7ff fe16 	bl	11d54 <process_event>
}
   12128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1212a:	4c07      	ldr	r4, [pc, #28]	; (12148 <transition_complete+0x54>)
   1212c:	2394      	movs	r3, #148	; 0x94
   1212e:	4622      	mov	r2, r4
   12130:	4906      	ldr	r1, [pc, #24]	; (1214c <transition_complete+0x58>)
   12132:	4807      	ldr	r0, [pc, #28]	; (12150 <transition_complete+0x5c>)
   12134:	f017 fcd9 	bl	29aea <assert_print>
   12138:	4631      	mov	r1, r6
   1213a:	4806      	ldr	r0, [pc, #24]	; (12154 <transition_complete+0x60>)
   1213c:	f017 fcd5 	bl	29aea <assert_print>
   12140:	2194      	movs	r1, #148	; 0x94
   12142:	4620      	mov	r0, r4
   12144:	f017 fcca 	bl	29adc <assert_post_action>
   12148:	000301b0 	.word	0x000301b0
   1214c:	00030210 	.word	0x00030210
   12150:	0002fdac 	.word	0x0002fdac
   12154:	00030228 	.word	0x00030228

00012158 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1215c:	4604      	mov	r4, r0
   1215e:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12160:	f017 fa16 	bl	29590 <validate_args>

	if (rv < 0) {
   12164:	1e06      	subs	r6, r0, #0
   12166:	db48      	blt.n	121fa <onoff_request+0xa2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12168:	f104 0714 	add.w	r7, r4, #20
   1216c:	f04f 0320 	mov.w	r3, #32
   12170:	f3ef 8a11 	mrs	sl, BASEPRI
   12174:	f383 8812 	msr	BASEPRI_MAX, r3
   12178:	f3bf 8f6f 	isb	sy
   1217c:	46d3      	mov	fp, sl
   1217e:	4638      	mov	r0, r7
   12180:	f012 fe5a 	bl	24e38 <z_spin_lock_valid>
   12184:	4681      	mov	r9, r0
   12186:	b1a8      	cbz	r0, 121b4 <onoff_request+0x5c>
	z_spin_lock_set_owner(l);
   12188:	4638      	mov	r0, r7
   1218a:	f012 fe75 	bl	24e78 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1218e:	8ba5      	ldrh	r5, [r4, #28]
   12190:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12194:	8be3      	ldrh	r3, [r4, #30]
   12196:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1219a:	4293      	cmp	r3, r2
   1219c:	d04b      	beq.n	12236 <onoff_request+0xde>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1219e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   121a0:	2d02      	cmp	r5, #2
   121a2:	d016      	beq.n	121d2 <onoff_request+0x7a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   121a4:	2d06      	cmp	r5, #6
   121a6:	d839      	bhi.n	1221c <onoff_request+0xc4>
   121a8:	e8df f005 	tbb	[pc, r5]
   121ac:	38384c31 	.word	0x38384c31
   121b0:	2a31      	.short	0x2a31
   121b2:	31          	.byte	0x31
   121b3:	00          	.byte	0x00
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   121b4:	4c3a      	ldr	r4, [pc, #232]	; (122a0 <onoff_request+0x148>)
   121b6:	2394      	movs	r3, #148	; 0x94
   121b8:	4622      	mov	r2, r4
   121ba:	493a      	ldr	r1, [pc, #232]	; (122a4 <onoff_request+0x14c>)
   121bc:	483a      	ldr	r0, [pc, #232]	; (122a8 <onoff_request+0x150>)
   121be:	f017 fc94 	bl	29aea <assert_print>
   121c2:	4639      	mov	r1, r7
   121c4:	4839      	ldr	r0, [pc, #228]	; (122ac <onoff_request+0x154>)
   121c6:	f017 fc90 	bl	29aea <assert_print>
   121ca:	2194      	movs	r1, #148	; 0x94
   121cc:	4620      	mov	r0, r4
   121ce:	f017 fc85 	bl	29adc <assert_post_action>
		mgr->refs += 1U;
   121d2:	3301      	adds	r3, #1
   121d4:	83e3      	strh	r3, [r4, #30]
	bool start = false;             /* trigger a start transition */
   121d6:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   121d8:	461a      	mov	r2, r3
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   121da:	b142      	cbz	r2, 121ee <onoff_request+0x96>
	parent->next = child;
   121dc:	2200      	movs	r2, #0
   121de:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   121e2:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   121e4:	b3aa      	cbz	r2, 12252 <onoff_request+0xfa>
	parent->next = child;
   121e6:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   121ea:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   121ee:	b3ab      	cbz	r3, 1225c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   121f0:	4652      	mov	r2, sl
   121f2:	2102      	movs	r1, #2
   121f4:	4620      	mov	r0, r4
   121f6:	f7ff fdad 	bl	11d54 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   121fa:	4630      	mov	r0, r6
   121fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (state == ONOFF_STATE_ON) {
   12200:	f06f 0685 	mvn.w	r6, #133	; 0x85
   12204:	f04f 0900 	mov.w	r9, #0
   12208:	464b      	mov	r3, r9
   1220a:	464a      	mov	r2, r9
   1220c:	e7e5      	b.n	121da <onoff_request+0x82>
		start = (state == ONOFF_STATE_OFF);
   1220e:	fab5 f385 	clz	r3, r5
   12212:	095b      	lsrs	r3, r3, #5
		add_client = true;
   12214:	464a      	mov	r2, r9
	bool notify = false;            /* do client notification */
   12216:	f04f 0900 	mov.w	r9, #0
		add_client = true;
   1221a:	e7de      	b.n	121da <onoff_request+0x82>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1221c:	4c24      	ldr	r4, [pc, #144]	; (122b0 <onoff_request+0x158>)
   1221e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   12222:	4622      	mov	r2, r4
   12224:	4923      	ldr	r1, [pc, #140]	; (122b4 <onoff_request+0x15c>)
   12226:	4820      	ldr	r0, [pc, #128]	; (122a8 <onoff_request+0x150>)
   12228:	f017 fc5f 	bl	29aea <assert_print>
   1222c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   12230:	4620      	mov	r0, r4
   12232:	f017 fc53 	bl	29adc <assert_post_action>
		rv = -EAGAIN;
   12236:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1223a:	f04f 0900 	mov.w	r9, #0
	bool start = false;             /* trigger a start transition */
   1223e:	464b      	mov	r3, r9
	bool add_client = false;        /* add client to pending list */
   12240:	464a      	mov	r2, r9
   12242:	e7ca      	b.n	121da <onoff_request+0x82>
	if (state == ONOFF_STATE_ON) {
   12244:	f06f 0604 	mvn.w	r6, #4
   12248:	f04f 0900 	mov.w	r9, #0
   1224c:	464b      	mov	r3, r9
   1224e:	464a      	mov	r2, r9
   12250:	e7c3      	b.n	121da <onoff_request+0x82>
   12252:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   12256:	f8c4 8000 	str.w	r8, [r4]
}
   1225a:	e7c8      	b.n	121ee <onoff_request+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1225c:	4638      	mov	r0, r7
   1225e:	f012 fdfb 	bl	24e58 <z_spin_unlock_valid>
   12262:	b168      	cbz	r0, 12280 <onoff_request+0x128>
	__asm__ volatile(
   12264:	f38b 8811 	msr	BASEPRI, fp
   12268:	f3bf 8f6f 	isb	sy
		if (notify) {
   1226c:	f1b9 0f00 	cmp.w	r9, #0
   12270:	d0c3      	beq.n	121fa <onoff_request+0xa2>
			notify_one(mgr, cli, state, 0);
   12272:	2300      	movs	r3, #0
   12274:	462a      	mov	r2, r5
   12276:	4641      	mov	r1, r8
   12278:	4620      	mov	r0, r4
   1227a:	f017 f99e 	bl	295ba <notify_one>
   1227e:	e7bc      	b.n	121fa <onoff_request+0xa2>
   12280:	4c07      	ldr	r4, [pc, #28]	; (122a0 <onoff_request+0x148>)
   12282:	23c2      	movs	r3, #194	; 0xc2
   12284:	4622      	mov	r2, r4
   12286:	490c      	ldr	r1, [pc, #48]	; (122b8 <onoff_request+0x160>)
   12288:	4807      	ldr	r0, [pc, #28]	; (122a8 <onoff_request+0x150>)
   1228a:	f017 fc2e 	bl	29aea <assert_print>
   1228e:	4639      	mov	r1, r7
   12290:	480a      	ldr	r0, [pc, #40]	; (122bc <onoff_request+0x164>)
   12292:	f017 fc2a 	bl	29aea <assert_print>
   12296:	21c2      	movs	r1, #194	; 0xc2
   12298:	4620      	mov	r0, r4
   1229a:	f017 fc1f 	bl	29adc <assert_post_action>
   1229e:	bf00      	nop
   122a0:	000301b0 	.word	0x000301b0
   122a4:	00030210 	.word	0x00030210
   122a8:	0002fdac 	.word	0x0002fdac
   122ac:	00030228 	.word	0x00030228
   122b0:	000300b8 	.word	0x000300b8
   122b4:	00030198 	.word	0x00030198
   122b8:	000301e0 	.word	0x000301e0
   122bc:	000301f8 	.word	0x000301f8

000122c0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   122c0:	b510      	push	{r4, lr}
   122c2:	4603      	mov	r3, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   122c4:	6842      	ldr	r2, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   122c6:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   122ca:	6081      	str	r1, [r0, #8]
	switch (method) {
   122cc:	2a02      	cmp	r2, #2
   122ce:	d011      	beq.n	122f4 <sys_notify_finalize+0x34>
   122d0:	2a03      	cmp	r2, #3
   122d2:	d00c      	beq.n	122ee <sys_notify_finalize+0x2e>
   122d4:	2a01      	cmp	r2, #1
   122d6:	d010      	beq.n	122fa <sys_notify_finalize+0x3a>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
   122d8:	4c0c      	ldr	r4, [pc, #48]	; (1230c <sys_notify_finalize+0x4c>)
   122da:	2345      	movs	r3, #69	; 0x45
   122dc:	4622      	mov	r2, r4
   122de:	490c      	ldr	r1, [pc, #48]	; (12310 <sys_notify_finalize+0x50>)
   122e0:	480c      	ldr	r0, [pc, #48]	; (12314 <sys_notify_finalize+0x54>)
   122e2:	f017 fc02 	bl	29aea <assert_print>
   122e6:	2145      	movs	r1, #69	; 0x45
   122e8:	4620      	mov	r0, r4
   122ea:	f017 fbf7 	bl	29adc <assert_post_action>
		rv = notify->method.callback;
   122ee:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   122f0:	2000      	movs	r0, #0
		break;
   122f2:	e004      	b.n	122fe <sys_notify_finalize+0x3e>
		sig = notify->method.signal;
   122f4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   122f6:	2400      	movs	r4, #0
		break;
   122f8:	e001      	b.n	122fe <sys_notify_finalize+0x3e>
	switch (method) {
   122fa:	2400      	movs	r4, #0
   122fc:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   122fe:	2200      	movs	r2, #0
   12300:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12302:	b108      	cbz	r0, 12308 <sys_notify_finalize+0x48>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   12304:	f016 fdf8 	bl	28ef8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12308:	4620      	mov	r0, r4
   1230a:	bd10      	pop	{r4, pc}
   1230c:	00030240 	.word	0x00030240
   12310:	000337ec 	.word	0x000337ec
   12314:	0002fdac 	.word	0x0002fdac

00012318 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   12318:	4684      	mov	ip, r0
   1231a:	4608      	mov	r0, r1
	bool loop = true;
   1231c:	2201      	movs	r2, #1
   1231e:	e026      	b.n	1236e <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   12320:	f89c 3000 	ldrb.w	r3, [ip]
   12324:	f043 0304 	orr.w	r3, r3, #4
   12328:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   1232c:	b1f2      	cbz	r2, 1236c <extract_flags+0x54>
			++sp;
   1232e:	3001      	adds	r0, #1
   12330:	e01c      	b.n	1236c <extract_flags+0x54>
			conv->flag_plus = true;
   12332:	f89c 3000 	ldrb.w	r3, [ip]
   12336:	f043 0308 	orr.w	r3, r3, #8
   1233a:	f88c 3000 	strb.w	r3, [ip]
			break;
   1233e:	e7f5      	b.n	1232c <extract_flags+0x14>
			conv->flag_space = true;
   12340:	f89c 3000 	ldrb.w	r3, [ip]
   12344:	f043 0310 	orr.w	r3, r3, #16
   12348:	f88c 3000 	strb.w	r3, [ip]
			break;
   1234c:	e7ee      	b.n	1232c <extract_flags+0x14>
			conv->flag_hash = true;
   1234e:	f89c 3000 	ldrb.w	r3, [ip]
   12352:	f043 0320 	orr.w	r3, r3, #32
   12356:	f88c 3000 	strb.w	r3, [ip]
			break;
   1235a:	e7e7      	b.n	1232c <extract_flags+0x14>
			conv->flag_zero = true;
   1235c:	f89c 3000 	ldrb.w	r3, [ip]
   12360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12364:	f88c 3000 	strb.w	r3, [ip]
			break;
   12368:	e7e0      	b.n	1232c <extract_flags+0x14>
		switch (*sp) {
   1236a:	2200      	movs	r2, #0
		}
	} while (loop);
   1236c:	b342      	cbz	r2, 123c0 <extract_flags+0xa8>
		switch (*sp) {
   1236e:	7803      	ldrb	r3, [r0, #0]
   12370:	3b20      	subs	r3, #32
   12372:	2b10      	cmp	r3, #16
   12374:	d8f9      	bhi.n	1236a <extract_flags+0x52>
   12376:	a101      	add	r1, pc, #4	; (adr r1, 1237c <extract_flags+0x64>)
   12378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1237c:	00012341 	.word	0x00012341
   12380:	0001236b 	.word	0x0001236b
   12384:	0001236b 	.word	0x0001236b
   12388:	0001234f 	.word	0x0001234f
   1238c:	0001236b 	.word	0x0001236b
   12390:	0001236b 	.word	0x0001236b
   12394:	0001236b 	.word	0x0001236b
   12398:	0001236b 	.word	0x0001236b
   1239c:	0001236b 	.word	0x0001236b
   123a0:	0001236b 	.word	0x0001236b
   123a4:	0001236b 	.word	0x0001236b
   123a8:	00012333 	.word	0x00012333
   123ac:	0001236b 	.word	0x0001236b
   123b0:	00012321 	.word	0x00012321
   123b4:	0001236b 	.word	0x0001236b
   123b8:	0001236b 	.word	0x0001236b
   123bc:	0001235d 	.word	0x0001235d

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   123c0:	f89c 3000 	ldrb.w	r3, [ip]
   123c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
   123c8:	2b44      	cmp	r3, #68	; 0x44
   123ca:	d000      	beq.n	123ce <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   123cc:	4770      	bx	lr
		conv->flag_zero = false;
   123ce:	f89c 3000 	ldrb.w	r3, [ip]
   123d2:	f36f 1386 	bfc	r3, #6, #1
   123d6:	f88c 3000 	strb.w	r3, [ip]
   123da:	e7f7      	b.n	123cc <extract_flags+0xb4>

000123dc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   123dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e0:	b091      	sub	sp, #68	; 0x44
   123e2:	4606      	mov	r6, r0
   123e4:	460d      	mov	r5, r1
   123e6:	4691      	mov	r9, r2
   123e8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   123ea:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   123ec:	f899 0000 	ldrb.w	r0, [r9]
   123f0:	2800      	cmp	r0, #0
   123f2:	f000 82b9 	beq.w	12968 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   123f6:	2825      	cmp	r0, #37	; 0x25
   123f8:	d008      	beq.n	1240c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   123fa:	f109 0901 	add.w	r9, r9, #1
   123fe:	4629      	mov	r1, r5
   12400:	47b0      	blx	r6
   12402:	2800      	cmp	r0, #0
   12404:	f2c0 82b1 	blt.w	1296a <z_cbvprintf_impl+0x58e>
   12408:	3401      	adds	r4, #1
			continue;
   1240a:	e7ef      	b.n	123ec <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   1240c:	2300      	movs	r3, #0
   1240e:	9304      	str	r3, [sp, #16]
   12410:	9305      	str	r3, [sp, #20]
   12412:	9306      	str	r3, [sp, #24]
   12414:	9307      	str	r3, [sp, #28]
   12416:	9308      	str	r3, [sp, #32]
   12418:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   1241a:	4649      	mov	r1, r9
   1241c:	a806      	add	r0, sp, #24
   1241e:	f017 fa9d 	bl	2995c <extract_conversion>
   12422:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   12424:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12428:	f013 0f01 	tst.w	r3, #1
   1242c:	f000 8097 	beq.w	1255e <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   12430:	9b03      	ldr	r3, [sp, #12]
   12432:	1d1a      	adds	r2, r3, #4
   12434:	9203      	str	r2, [sp, #12]
   12436:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   12438:	2f00      	cmp	r7, #0
   1243a:	f2c0 8088 	blt.w	1254e <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1243e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12442:	f013 0f04 	tst.w	r3, #4
   12446:	f000 809c 	beq.w	12582 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   1244a:	9b03      	ldr	r3, [sp, #12]
   1244c:	1d1a      	adds	r2, r3, #4
   1244e:	9203      	str	r2, [sp, #12]
   12450:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   12454:	f1ba 0f00 	cmp.w	sl, #0
   12458:	f2c0 808a 	blt.w	12570 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1245c:	2300      	movs	r3, #0
   1245e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   12460:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   12462:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12466:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1246a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1246e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   12472:	2b01      	cmp	r3, #1
   12474:	f000 808e 	beq.w	12594 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   12478:	2b02      	cmp	r3, #2
   1247a:	f000 80d3 	beq.w	12624 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1247e:	2b04      	cmp	r3, #4
   12480:	f000 8124 	beq.w	126cc <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   12484:	2b03      	cmp	r3, #3
   12486:	f000 813b 	beq.w	12700 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   1248a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1248e:	f018 0b03 	ands.w	fp, r8, #3
   12492:	f040 813b 	bne.w	1270c <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   12496:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1249a:	3b25      	subs	r3, #37	; 0x25
   1249c:	2b53      	cmp	r3, #83	; 0x53
   1249e:	f200 81ca 	bhi.w	12836 <z_cbvprintf_impl+0x45a>
   124a2:	e8df f013 	tbh	[pc, r3, lsl #1]
   124a6:	0140      	.short	0x0140
   124a8:	01c801c8 	.word	0x01c801c8
   124ac:	01c801c8 	.word	0x01c801c8
   124b0:	01c801c8 	.word	0x01c801c8
   124b4:	01c801c8 	.word	0x01c801c8
   124b8:	01c801c8 	.word	0x01c801c8
   124bc:	01c801c8 	.word	0x01c801c8
   124c0:	01c801c8 	.word	0x01c801c8
   124c4:	01c801c8 	.word	0x01c801c8
   124c8:	01c801c8 	.word	0x01c801c8
   124cc:	01c801c8 	.word	0x01c801c8
   124d0:	01c801c8 	.word	0x01c801c8
   124d4:	01c801c8 	.word	0x01c801c8
   124d8:	01c801c8 	.word	0x01c801c8
   124dc:	01c801c8 	.word	0x01c801c8
   124e0:	01c801c8 	.word	0x01c801c8
   124e4:	01c801c8 	.word	0x01c801c8
   124e8:	01c801c8 	.word	0x01c801c8
   124ec:	01c801c8 	.word	0x01c801c8
   124f0:	01c801c8 	.word	0x01c801c8
   124f4:	01c801c8 	.word	0x01c801c8
   124f8:	01c801c8 	.word	0x01c801c8
   124fc:	01c801c8 	.word	0x01c801c8
   12500:	01c801c8 	.word	0x01c801c8
   12504:	01c801c8 	.word	0x01c801c8
   12508:	01c801c8 	.word	0x01c801c8
   1250c:	01c80181 	.word	0x01c80181
   12510:	01c801c8 	.word	0x01c801c8
   12514:	01c801c8 	.word	0x01c801c8
   12518:	01c801c8 	.word	0x01c801c8
   1251c:	01c801c8 	.word	0x01c801c8
   12520:	015e01c8 	.word	0x015e01c8
   12524:	01c80167 	.word	0x01c80167
   12528:	01c801c8 	.word	0x01c801c8
   1252c:	016701c8 	.word	0x016701c8
   12530:	01c801c8 	.word	0x01c801c8
   12534:	01c801c8 	.word	0x01c801c8
   12538:	018101bd 	.word	0x018101bd
   1253c:	01c801a1 	.word	0x01c801a1
   12540:	014d01c8 	.word	0x014d01c8
   12544:	018101c8 	.word	0x018101c8
   12548:	01c801c8 	.word	0x01c801c8
   1254c:	0181      	.short	0x0181
				conv->flag_dash = true;
   1254e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12552:	f043 0304 	orr.w	r3, r3, #4
   12556:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   1255a:	427f      	negs	r7, r7
   1255c:	e76f      	b.n	1243e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   1255e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   12562:	2b00      	cmp	r3, #0
   12564:	db02      	blt.n	1256c <z_cbvprintf_impl+0x190>
		int width = -1;
   12566:	f04f 37ff 	mov.w	r7, #4294967295
   1256a:	e768      	b.n	1243e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   1256c:	9f07      	ldr	r7, [sp, #28]
   1256e:	e766      	b.n	1243e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   12570:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12574:	f36f 0341 	bfc	r3, #1, #1
   12578:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   1257c:	f04f 3aff 	mov.w	sl, #4294967295
   12580:	e76c      	b.n	1245c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   12582:	f013 0f02 	tst.w	r3, #2
   12586:	d002      	beq.n	1258e <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   12588:	f8dd a020 	ldr.w	sl, [sp, #32]
   1258c:	e766      	b.n	1245c <z_cbvprintf_impl+0x80>
		int precision = -1;
   1258e:	f04f 3aff 	mov.w	sl, #4294967295
   12592:	e763      	b.n	1245c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   12594:	1ecb      	subs	r3, r1, #3
   12596:	2b04      	cmp	r3, #4
   12598:	d804      	bhi.n	125a4 <z_cbvprintf_impl+0x1c8>
   1259a:	e8df f003 	tbb	[pc, r3]
   1259e:	1d0b      	.short	0x1d0b
   125a0:	3529      	.short	0x3529
   125a2:	35          	.byte	0x35
   125a3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   125a4:	9b03      	ldr	r3, [sp, #12]
   125a6:	1d1a      	adds	r2, r3, #4
   125a8:	9203      	str	r2, [sp, #12]
   125aa:	681b      	ldr	r3, [r3, #0]
   125ac:	17da      	asrs	r2, r3, #31
   125ae:	9304      	str	r3, [sp, #16]
   125b0:	9205      	str	r2, [sp, #20]
				break;
   125b2:	e006      	b.n	125c2 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   125b4:	9b03      	ldr	r3, [sp, #12]
   125b6:	1d1a      	adds	r2, r3, #4
   125b8:	9203      	str	r2, [sp, #12]
   125ba:	681b      	ldr	r3, [r3, #0]
   125bc:	17da      	asrs	r2, r3, #31
   125be:	9304      	str	r3, [sp, #16]
   125c0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   125c2:	2901      	cmp	r1, #1
   125c4:	d028      	beq.n	12618 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   125c6:	2902      	cmp	r1, #2
   125c8:	f47f af5f 	bne.w	1248a <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   125cc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   125d0:	17da      	asrs	r2, r3, #31
   125d2:	9304      	str	r3, [sp, #16]
   125d4:	9205      	str	r2, [sp, #20]
   125d6:	e758      	b.n	1248a <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   125d8:	9b03      	ldr	r3, [sp, #12]
   125da:	3307      	adds	r3, #7
   125dc:	f023 0307 	bic.w	r3, r3, #7
   125e0:	f103 0208 	add.w	r2, r3, #8
   125e4:	9203      	str	r2, [sp, #12]
   125e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   125ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   125ee:	e7e8      	b.n	125c2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   125f0:	9b03      	ldr	r3, [sp, #12]
   125f2:	3307      	adds	r3, #7
   125f4:	f023 0307 	bic.w	r3, r3, #7
   125f8:	f103 0208 	add.w	r2, r3, #8
   125fc:	9203      	str	r2, [sp, #12]
   125fe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   12602:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   12606:	e7dc      	b.n	125c2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12608:	9b03      	ldr	r3, [sp, #12]
   1260a:	1d1a      	adds	r2, r3, #4
   1260c:	9203      	str	r2, [sp, #12]
   1260e:	681b      	ldr	r3, [r3, #0]
   12610:	17da      	asrs	r2, r3, #31
				value->sint =
   12612:	9304      	str	r3, [sp, #16]
   12614:	9205      	str	r2, [sp, #20]
				break;
   12616:	e7d4      	b.n	125c2 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   12618:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   1261c:	17da      	asrs	r2, r3, #31
   1261e:	9304      	str	r3, [sp, #16]
   12620:	9205      	str	r2, [sp, #20]
   12622:	e732      	b.n	1248a <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   12624:	1ecb      	subs	r3, r1, #3
   12626:	2b04      	cmp	r3, #4
   12628:	d804      	bhi.n	12634 <z_cbvprintf_impl+0x258>
   1262a:	e8df f003 	tbb	[pc, r3]
   1262e:	1f0b      	.short	0x1f0b
   12630:	4135      	.short	0x4135
   12632:	41          	.byte	0x41
   12633:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   12634:	9b03      	ldr	r3, [sp, #12]
   12636:	1d1a      	adds	r2, r3, #4
   12638:	9203      	str	r2, [sp, #12]
   1263a:	681b      	ldr	r3, [r3, #0]
   1263c:	9304      	str	r3, [sp, #16]
   1263e:	2300      	movs	r3, #0
   12640:	9305      	str	r3, [sp, #20]
				break;
   12642:	e01e      	b.n	12682 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   12644:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   12648:	2b63      	cmp	r3, #99	; 0x63
   1264a:	d007      	beq.n	1265c <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   1264c:	9b03      	ldr	r3, [sp, #12]
   1264e:	1d1a      	adds	r2, r3, #4
   12650:	9203      	str	r2, [sp, #12]
   12652:	681b      	ldr	r3, [r3, #0]
   12654:	9304      	str	r3, [sp, #16]
   12656:	2300      	movs	r3, #0
   12658:	9305      	str	r3, [sp, #20]
   1265a:	e012      	b.n	12682 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   1265c:	9b03      	ldr	r3, [sp, #12]
   1265e:	1d1a      	adds	r2, r3, #4
   12660:	9203      	str	r2, [sp, #12]
   12662:	681b      	ldr	r3, [r3, #0]
   12664:	9304      	str	r3, [sp, #16]
   12666:	2300      	movs	r3, #0
   12668:	9305      	str	r3, [sp, #20]
   1266a:	e00a      	b.n	12682 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   1266c:	9b03      	ldr	r3, [sp, #12]
   1266e:	3307      	adds	r3, #7
   12670:	f023 0307 	bic.w	r3, r3, #7
   12674:	f103 0208 	add.w	r2, r3, #8
   12678:	9203      	str	r2, [sp, #12]
   1267a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1267e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   12682:	2901      	cmp	r1, #1
   12684:	d01c      	beq.n	126c0 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   12686:	2902      	cmp	r1, #2
   12688:	f47f aeff 	bne.w	1248a <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   1268c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12690:	9304      	str	r3, [sp, #16]
   12692:	2300      	movs	r3, #0
   12694:	9305      	str	r3, [sp, #20]
   12696:	e6f8      	b.n	1248a <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   12698:	9b03      	ldr	r3, [sp, #12]
   1269a:	3307      	adds	r3, #7
   1269c:	f023 0307 	bic.w	r3, r3, #7
   126a0:	f103 0208 	add.w	r2, r3, #8
   126a4:	9203      	str	r2, [sp, #12]
   126a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   126aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   126ae:	e7e8      	b.n	12682 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   126b0:	9b03      	ldr	r3, [sp, #12]
   126b2:	1d1a      	adds	r2, r3, #4
   126b4:	9203      	str	r2, [sp, #12]
   126b6:	681b      	ldr	r3, [r3, #0]
				value->uint =
   126b8:	9304      	str	r3, [sp, #16]
   126ba:	2300      	movs	r3, #0
   126bc:	9305      	str	r3, [sp, #20]
				break;
   126be:	e7e0      	b.n	12682 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   126c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   126c4:	9304      	str	r3, [sp, #16]
   126c6:	2300      	movs	r3, #0
   126c8:	9305      	str	r3, [sp, #20]
   126ca:	e6de      	b.n	1248a <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   126cc:	2908      	cmp	r1, #8
   126ce:	d00b      	beq.n	126e8 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   126d0:	9b03      	ldr	r3, [sp, #12]
   126d2:	3307      	adds	r3, #7
   126d4:	f023 0307 	bic.w	r3, r3, #7
   126d8:	f103 0208 	add.w	r2, r3, #8
   126dc:	9203      	str	r2, [sp, #12]
   126de:	e9d3 2300 	ldrd	r2, r3, [r3]
   126e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   126e6:	e6d0      	b.n	1248a <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   126e8:	9b03      	ldr	r3, [sp, #12]
   126ea:	3307      	adds	r3, #7
   126ec:	f023 0307 	bic.w	r3, r3, #7
   126f0:	f103 0208 	add.w	r2, r3, #8
   126f4:	9203      	str	r2, [sp, #12]
   126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   126fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   126fe:	e6c4      	b.n	1248a <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   12700:	9b03      	ldr	r3, [sp, #12]
   12702:	1d1a      	adds	r2, r3, #4
   12704:	9203      	str	r2, [sp, #12]
   12706:	681b      	ldr	r3, [r3, #0]
   12708:	9304      	str	r3, [sp, #16]
   1270a:	e6be      	b.n	1248a <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   1270c:	9f02      	ldr	r7, [sp, #8]
   1270e:	463b      	mov	r3, r7
   12710:	464a      	mov	r2, r9
   12712:	4629      	mov	r1, r5
   12714:	4630      	mov	r0, r6
   12716:	f017 f9c7 	bl	29aa8 <outs>
   1271a:	2800      	cmp	r0, #0
   1271c:	f2c0 8125 	blt.w	1296a <z_cbvprintf_impl+0x58e>
   12720:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   12722:	46b9      	mov	r9, r7
			continue;
   12724:	e662      	b.n	123ec <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   12726:	4629      	mov	r1, r5
   12728:	2025      	movs	r0, #37	; 0x25
   1272a:	47b0      	blx	r6
   1272c:	2800      	cmp	r0, #0
   1272e:	f2c0 811c 	blt.w	1296a <z_cbvprintf_impl+0x58e>
   12732:	3401      	adds	r4, #1
		char sign = 0;
   12734:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   12736:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1273a:	f04f 0900 	mov.w	r9, #0
			break;
   1273e:	e07f      	b.n	12840 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   12740:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   12744:	f1ba 0f00 	cmp.w	sl, #0
   12748:	db07      	blt.n	1275a <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   1274a:	4651      	mov	r1, sl
   1274c:	4648      	mov	r0, r9
   1274e:	f018 fcb9 	bl	2b0c4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   12752:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   12756:	46d8      	mov	r8, fp
			precision = -1;

			break;
   12758:	e072      	b.n	12840 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   1275a:	4648      	mov	r0, r9
   1275c:	f018 fca9 	bl	2b0b2 <strlen>
   12760:	e7f7      	b.n	12752 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12762:	9b04      	ldr	r3, [sp, #16]
   12764:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   12768:	46d8      	mov	r8, fp
			bpe = buf + 1;
   1276a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   1276e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   12772:	e065      	b.n	12840 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   12774:	f018 0f08 	tst.w	r8, #8
   12778:	d105      	bne.n	12786 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   1277a:	f018 0810 	ands.w	r8, r8, #16
   1277e:	d004      	beq.n	1278a <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   12780:	f04f 0820 	mov.w	r8, #32
   12784:	e001      	b.n	1278a <z_cbvprintf_impl+0x3ae>
				sign = '+';
   12786:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   1278a:	9a04      	ldr	r2, [sp, #16]
   1278c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   1278e:	2b00      	cmp	r3, #0
   12790:	db02      	blt.n	12798 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   12792:	9204      	str	r2, [sp, #16]
   12794:	9305      	str	r3, [sp, #20]
   12796:	e008      	b.n	127aa <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   12798:	4252      	negs	r2, r2
   1279a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1279e:	9204      	str	r2, [sp, #16]
   127a0:	9305      	str	r3, [sp, #20]
				sign = '-';
   127a2:	f04f 082d 	mov.w	r8, #45	; 0x2d
   127a6:	e000      	b.n	127aa <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   127a8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   127aa:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   127ae:	9300      	str	r3, [sp, #0]
   127b0:	ab0a      	add	r3, sp, #40	; 0x28
   127b2:	aa06      	add	r2, sp, #24
   127b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   127b8:	f017 f907 	bl	299ca <encode_uint>
   127bc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   127be:	f1ba 0f00 	cmp.w	sl, #0
   127c2:	db6c      	blt.n	1289e <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   127c4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   127c8:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   127cc:	f89d 2018 	ldrb.w	r2, [sp, #24]
   127d0:	f36f 1286 	bfc	r2, #6, #1
   127d4:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   127d8:	459a      	cmp	sl, r3
   127da:	d963      	bls.n	128a4 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   127dc:	ebaa 0303 	sub.w	r3, sl, r3
   127e0:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   127e2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   127e6:	e02b      	b.n	12840 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   127e8:	9804      	ldr	r0, [sp, #16]
   127ea:	b928      	cbnz	r0, 127f8 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   127ec:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   127ee:	f8df a180 	ldr.w	sl, [pc, #384]	; 12970 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   127f2:	f1aa 0905 	sub.w	r9, sl, #5
   127f6:	e023      	b.n	12840 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   127f8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   127fc:	9300      	str	r3, [sp, #0]
   127fe:	ab0a      	add	r3, sp, #40	; 0x28
   12800:	aa06      	add	r2, sp, #24
   12802:	2100      	movs	r1, #0
   12804:	f017 f8e1 	bl	299ca <encode_uint>
   12808:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1280a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1280e:	f043 0310 	orr.w	r3, r3, #16
   12812:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   12816:	2378      	movs	r3, #120	; 0x78
   12818:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   1281c:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1281e:	e7ce      	b.n	127be <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   12820:	4622      	mov	r2, r4
   12822:	9904      	ldr	r1, [sp, #16]
   12824:	a806      	add	r0, sp, #24
   12826:	f017 f920 	bl	29a6a <store_count>
		char sign = 0;
   1282a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   1282c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   12830:	f04f 0900 	mov.w	r9, #0
			}

			break;
   12834:	e004      	b.n	12840 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   12836:	46d8      	mov	r8, fp
   12838:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   1283c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   12840:	f1b9 0f00 	cmp.w	r9, #0
   12844:	f000 808d 	beq.w	12962 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   12848:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   1284c:	f1b8 0f00 	cmp.w	r8, #0
   12850:	d000      	beq.n	12854 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   12852:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   12854:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12858:	f012 0f10 	tst.w	r2, #16
   1285c:	d025      	beq.n	128aa <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   1285e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   12860:	9907      	ldr	r1, [sp, #28]
   12862:	440b      	add	r3, r1
		if (conv->pad_fp) {
   12864:	f012 0f40 	tst.w	r2, #64	; 0x40
   12868:	d001      	beq.n	1286e <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   1286a:	9a08      	ldr	r2, [sp, #32]
   1286c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1286e:	2f00      	cmp	r7, #0
   12870:	dd31      	ble.n	128d6 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   12872:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   12874:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12878:	f013 0f04 	tst.w	r3, #4
   1287c:	d12b      	bne.n	128d6 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1287e:	f013 0f40 	tst.w	r3, #64	; 0x40
   12882:	d017      	beq.n	128b4 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   12884:	f1b8 0f00 	cmp.w	r8, #0
   12888:	d017      	beq.n	128ba <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   1288a:	4629      	mov	r1, r5
   1288c:	4640      	mov	r0, r8
   1288e:	47b0      	blx	r6
   12890:	2800      	cmp	r0, #0
   12892:	db6a      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   12894:	3401      	adds	r4, #1
						sign = 0;
   12896:	46d8      	mov	r8, fp
					}
					pad = '0';
   12898:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1289c:	e00f      	b.n	128be <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   1289e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   128a2:	e7cd      	b.n	12840 <z_cbvprintf_impl+0x464>
   128a4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   128a8:	e7ca      	b.n	12840 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   128aa:	f012 0f08 	tst.w	r2, #8
   128ae:	d0d7      	beq.n	12860 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   128b0:	3301      	adds	r3, #1
   128b2:	e7d5      	b.n	12860 <z_cbvprintf_impl+0x484>
				char pad = ' ';
   128b4:	f04f 0b20 	mov.w	fp, #32
   128b8:	e001      	b.n	128be <z_cbvprintf_impl+0x4e2>
					pad = '0';
   128ba:	f04f 0b30 	mov.w	fp, #48	; 0x30
   128be:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   128c0:	1e5f      	subs	r7, r3, #1
   128c2:	2b00      	cmp	r3, #0
   128c4:	dd07      	ble.n	128d6 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   128c6:	4629      	mov	r1, r5
   128c8:	4658      	mov	r0, fp
   128ca:	47b0      	blx	r6
   128cc:	2800      	cmp	r0, #0
   128ce:	db4c      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   128d0:	3401      	adds	r4, #1
				while (width-- > 0) {
   128d2:	463b      	mov	r3, r7
   128d4:	e7f4      	b.n	128c0 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   128d6:	f1b8 0f00 	cmp.w	r8, #0
   128da:	d005      	beq.n	128e8 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   128dc:	4629      	mov	r1, r5
   128de:	4640      	mov	r0, r8
   128e0:	47b0      	blx	r6
   128e2:	2800      	cmp	r0, #0
   128e4:	db41      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   128e6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   128e8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   128ec:	f3c3 1200 	ubfx	r2, r3, #4, #1
   128f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   128f4:	431a      	orrs	r2, r3
   128f6:	d005      	beq.n	12904 <z_cbvprintf_impl+0x528>
				OUTC('0');
   128f8:	4629      	mov	r1, r5
   128fa:	2030      	movs	r0, #48	; 0x30
   128fc:	47b0      	blx	r6
   128fe:	2800      	cmp	r0, #0
   12900:	db33      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   12902:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   12904:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12908:	f013 0f10 	tst.w	r3, #16
   1290c:	d006      	beq.n	1291c <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   1290e:	4629      	mov	r1, r5
   12910:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12914:	47b0      	blx	r6
   12916:	2800      	cmp	r0, #0
   12918:	db27      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   1291a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   1291c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   1291e:	f103 38ff 	add.w	r8, r3, #4294967295
   12922:	2b00      	cmp	r3, #0
   12924:	dd07      	ble.n	12936 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   12926:	4629      	mov	r1, r5
   12928:	2030      	movs	r0, #48	; 0x30
   1292a:	47b0      	blx	r6
   1292c:	2800      	cmp	r0, #0
   1292e:	db1c      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   12930:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   12932:	4643      	mov	r3, r8
   12934:	e7f3      	b.n	1291e <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   12936:	4653      	mov	r3, sl
   12938:	464a      	mov	r2, r9
   1293a:	4629      	mov	r1, r5
   1293c:	4630      	mov	r0, r6
   1293e:	f017 f8b3 	bl	29aa8 <outs>
   12942:	2800      	cmp	r0, #0
   12944:	db11      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   12946:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   12948:	2f00      	cmp	r7, #0
   1294a:	dd07      	ble.n	1295c <z_cbvprintf_impl+0x580>
			OUTC(' ');
   1294c:	4629      	mov	r1, r5
   1294e:	2020      	movs	r0, #32
   12950:	47b0      	blx	r6
   12952:	2800      	cmp	r0, #0
   12954:	db09      	blt.n	1296a <z_cbvprintf_impl+0x58e>
   12956:	3401      	adds	r4, #1
			--width;
   12958:	3f01      	subs	r7, #1
   1295a:	e7f5      	b.n	12948 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   1295c:	f8dd 9008 	ldr.w	r9, [sp, #8]
   12960:	e544      	b.n	123ec <z_cbvprintf_impl+0x10>
   12962:	f8dd 9008 	ldr.w	r9, [sp, #8]
   12966:	e541      	b.n	123ec <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   12968:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   1296a:	b011      	add	sp, #68	; 0x44
   1296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12970:	00030269 	.word	0x00030269

00012974 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
   12974:	b538      	push	{r3, r4, r5, lr}
   12976:	4604      	mov	r4, r0
   12978:	460d      	mov	r5, r1
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   1297a:	2220      	movs	r2, #32
   1297c:	2100      	movs	r1, #0
   1297e:	f018 fc0a 	bl	2b196 <memset>
	buffer->get_wlen = cfg->get_wlen;
   12982:	68eb      	ldr	r3, [r5, #12]
   12984:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
   12986:	68ab      	ldr	r3, [r5, #8]
   12988:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
   1298a:	682b      	ldr	r3, [r5, #0]
   1298c:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
   1298e:	686b      	ldr	r3, [r5, #4]
   12990:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
   12992:	2200      	movs	r2, #0
   12994:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
   12996:	692a      	ldr	r2, [r5, #16]
   12998:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   1299a:	b12b      	cbz	r3, 129a8 <mpsc_pbuf_init+0x34>
   1299c:	1e59      	subs	r1, r3, #1
   1299e:	420b      	tst	r3, r1
   129a0:	d102      	bne.n	129a8 <mpsc_pbuf_init+0x34>

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   129a2:	f042 0201 	orr.w	r2, r2, #1
   129a6:	6122      	str	r2, [r4, #16]
	}

	err = k_sem_init(&buffer->sem, 0, 1);
   129a8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return z_impl_k_sem_init(sem, initial_count, limit);
   129ac:	2201      	movs	r2, #1
   129ae:	2100      	movs	r1, #0
   129b0:	f01c face 	bl	2ef50 <z_impl_k_sem_init>
	__ASSERT_NO_MSG(err == 0);
   129b4:	b900      	cbnz	r0, 129b8 <mpsc_pbuf_init+0x44>
	ARG_UNUSED(err);
}
   129b6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(err == 0);
   129b8:	4c05      	ldr	r4, [pc, #20]	; (129d0 <mpsc_pbuf_init+0x5c>)
   129ba:	232e      	movs	r3, #46	; 0x2e
   129bc:	4622      	mov	r2, r4
   129be:	4905      	ldr	r1, [pc, #20]	; (129d4 <mpsc_pbuf_init+0x60>)
   129c0:	4805      	ldr	r0, [pc, #20]	; (129d8 <mpsc_pbuf_init+0x64>)
   129c2:	f017 f892 	bl	29aea <assert_print>
   129c6:	212e      	movs	r1, #46	; 0x2e
   129c8:	4620      	mov	r0, r4
   129ca:	f017 f887 	bl	29adc <assert_post_action>
   129ce:	bf00      	nop
   129d0:	0003026c 	.word	0x0003026c
   129d4:	00030294 	.word	0x00030294
   129d8:	0002fdac 	.word	0x0002fdac

000129dc <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   129dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129e0:	b087      	sub	sp, #28
   129e2:	9202      	str	r2, [sp, #8]
   129e4:	469b      	mov	fp, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   129e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   129e8:	3b01      	subs	r3, #1
   129ea:	428b      	cmp	r3, r1
   129ec:	f0c0 80dd 	bcc.w	12baa <mpsc_pbuf_alloc+0x1ce>
   129f0:	4605      	mov	r5, r0
   129f2:	4688      	mov	r8, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
   129f4:	f04f 0900 	mov.w	r9, #0
	union mpsc_pbuf_generic *item = NULL;
   129f8:	46ca      	mov	sl, r9
   129fa:	e030      	b.n	12a5e <mpsc_pbuf_alloc+0x82>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   129fc:	4c6e      	ldr	r4, [pc, #440]	; (12bb8 <mpsc_pbuf_alloc+0x1dc>)
   129fe:	2394      	movs	r3, #148	; 0x94
   12a00:	4622      	mov	r2, r4
   12a02:	496e      	ldr	r1, [pc, #440]	; (12bbc <mpsc_pbuf_alloc+0x1e0>)
   12a04:	486e      	ldr	r0, [pc, #440]	; (12bc0 <mpsc_pbuf_alloc+0x1e4>)
   12a06:	f017 f870 	bl	29aea <assert_print>
   12a0a:	4631      	mov	r1, r6
   12a0c:	486d      	ldr	r0, [pc, #436]	; (12bc4 <mpsc_pbuf_alloc+0x1e8>)
   12a0e:	f017 f86c 	bl	29aea <assert_print>
   12a12:	2194      	movs	r1, #148	; 0x94
   12a14:	4620      	mov	r0, r4
   12a16:	f017 f861 	bl	29adc <assert_post_action>
		return i & (buffer->size - 1);
   12a1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   12a1c:	3a01      	subs	r2, #1
   12a1e:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   12a20:	602b      	str	r3, [r5, #0]
		cont = false;
   12a22:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12a24:	4630      	mov	r0, r6
   12a26:	f012 fa17 	bl	24e58 <z_spin_unlock_valid>
   12a2a:	2800      	cmp	r0, #0
   12a2c:	f000 80ab 	beq.w	12b86 <mpsc_pbuf_alloc+0x1aa>
   12a30:	f387 8811 	msr	BASEPRI, r7
   12a34:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   12a38:	b174      	cbz	r4, 12a58 <mpsc_pbuf_alloc+0x7c>
   12a3a:	f1b9 0f00 	cmp.w	r9, #0
   12a3e:	d00b      	beq.n	12a58 <mpsc_pbuf_alloc+0x7c>
   12a40:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12a44:	b143      	cbz	r3, 12a58 <mpsc_pbuf_alloc+0x7c>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   12a46:	69ab      	ldr	r3, [r5, #24]
   12a48:	2b00      	cmp	r3, #0
   12a4a:	f000 80ab 	beq.w	12ba4 <mpsc_pbuf_alloc+0x1c8>
				buffer->notify_drop(buffer, dropped_item);
   12a4e:	4649      	mov	r1, r9
   12a50:	4628      	mov	r0, r5
   12a52:	4798      	blx	r3
			}
			dropped_item = NULL;
   12a54:	f04f 0900 	mov.w	r9, #0
		}
	} while (cont);
   12a58:	2c00      	cmp	r4, #0
   12a5a:	f000 80a8 	beq.w	12bae <mpsc_pbuf_alloc+0x1d2>
		key = k_spin_lock(&buffer->lock);
   12a5e:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   12a62:	f04f 0320 	mov.w	r3, #32
   12a66:	f3ef 8711 	mrs	r7, BASEPRI
   12a6a:	f383 8812 	msr	BASEPRI_MAX, r3
   12a6e:	f3bf 8f6f 	isb	sy
   12a72:	9701      	str	r7, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12a74:	4630      	mov	r0, r6
   12a76:	f012 f9df 	bl	24e38 <z_spin_lock_valid>
   12a7a:	2800      	cmp	r0, #0
   12a7c:	d0be      	beq.n	129fc <mpsc_pbuf_alloc+0x20>
	z_spin_lock_set_owner(l);
   12a7e:	4630      	mov	r0, r6
   12a80:	f012 f9fa 	bl	24e78 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
   12a84:	a905      	add	r1, sp, #20
   12a86:	4628      	mov	r0, r5
   12a88:	f017 f83d 	bl	29b06 <free_space>
   12a8c:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   12a8e:	9905      	ldr	r1, [sp, #20]
   12a90:	4541      	cmp	r1, r8
   12a92:	d319      	bcc.n	12ac8 <mpsc_pbuf_alloc+0xec>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   12a94:	6a2b      	ldr	r3, [r5, #32]
   12a96:	682a      	ldr	r2, [r5, #0]
			item =
   12a98:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
   12a9c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   12aa0:	f36f 0100 	bfc	r1, #0, #1
   12aa4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   12aa8:	b2c9      	uxtb	r1, r1
   12aaa:	f36f 0141 	bfc	r1, #1, #1
   12aae:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   12ab2:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   12ab4:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12ab6:	692a      	ldr	r2, [r5, #16]
   12ab8:	f012 0f01 	tst.w	r2, #1
   12abc:	d1ad      	bne.n	12a1a <mpsc_pbuf_alloc+0x3e>
	return (i >= buffer->size) ? i - buffer->size : i;
   12abe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   12ac0:	4293      	cmp	r3, r2
   12ac2:	d3ad      	bcc.n	12a20 <mpsc_pbuf_alloc+0x44>
   12ac4:	1a9b      	subs	r3, r3, r2
   12ac6:	e7ab      	b.n	12a20 <mpsc_pbuf_alloc+0x44>
		} else if (wrap) {
   12ac8:	b9a8      	cbnz	r0, 12af6 <mpsc_pbuf_alloc+0x11a>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   12aca:	9b02      	ldr	r3, [sp, #8]
   12acc:	ea5b 0303 	orrs.w	r3, fp, r3
   12ad0:	d003      	beq.n	12ada <mpsc_pbuf_alloc+0xfe>
			   !k_is_in_isr()) {
   12ad2:	f01c f982 	bl	2edda <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   12ad6:	9003      	str	r0, [sp, #12]
   12ad8:	b188      	cbz	r0, 12afe <mpsc_pbuf_alloc+0x122>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   12ada:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   12adc:	f10d 0313 	add.w	r3, sp, #19
   12ae0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   12ae4:	9905      	ldr	r1, [sp, #20]
   12ae6:	4628      	mov	r0, r5
   12ae8:	f017 f870 	bl	29bcc <drop_item_locked>
			cont = dropped_item != NULL;
   12aec:	4681      	mov	r9, r0
   12aee:	1e04      	subs	r4, r0, #0
   12af0:	bf18      	it	ne
   12af2:	2401      	movne	r4, #1
   12af4:	e796      	b.n	12a24 <mpsc_pbuf_alloc+0x48>
			add_skip_item(buffer, free_wlen);
   12af6:	4628      	mov	r0, r5
   12af8:	f017 f83f 	bl	29b7a <add_skip_item>
			cont = true;
   12afc:	e792      	b.n	12a24 <mpsc_pbuf_alloc+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12afe:	4630      	mov	r0, r6
   12b00:	f012 f9aa 	bl	24e58 <z_spin_unlock_valid>
   12b04:	b308      	cbz	r0, 12b4a <mpsc_pbuf_alloc+0x16e>
	__asm__ volatile(
   12b06:	9b01      	ldr	r3, [sp, #4]
   12b08:	f383 8811 	msr	BASEPRI, r3
   12b0c:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   12b10:	f105 002c 	add.w	r0, r5, #44	; 0x2c
	return z_impl_k_sem_take(sem, timeout);
   12b14:	9a02      	ldr	r2, [sp, #8]
   12b16:	465b      	mov	r3, fp
   12b18:	f012 ff22 	bl	25960 <z_impl_k_sem_take>
   12b1c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   12b1e:	f04f 0320 	mov.w	r3, #32
   12b22:	f3ef 8711 	mrs	r7, BASEPRI
   12b26:	f383 8812 	msr	BASEPRI_MAX, r3
   12b2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12b2e:	4630      	mov	r0, r6
   12b30:	f012 f982 	bl	24e38 <z_spin_lock_valid>
   12b34:	4604      	mov	r4, r0
   12b36:	b1b8      	cbz	r0, 12b68 <mpsc_pbuf_alloc+0x18c>
	z_spin_lock_set_owner(l);
   12b38:	4630      	mov	r0, r6
   12b3a:	f012 f99d 	bl	24e78 <z_spin_lock_set_owner>
			if (err == 0) {
   12b3e:	9b01      	ldr	r3, [sp, #4]
   12b40:	2b00      	cmp	r3, #0
   12b42:	f43f af6f 	beq.w	12a24 <mpsc_pbuf_alloc+0x48>
		cont = false;
   12b46:	9c03      	ldr	r4, [sp, #12]
   12b48:	e76c      	b.n	12a24 <mpsc_pbuf_alloc+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b4a:	4c1b      	ldr	r4, [pc, #108]	; (12bb8 <mpsc_pbuf_alloc+0x1dc>)
   12b4c:	23c2      	movs	r3, #194	; 0xc2
   12b4e:	4622      	mov	r2, r4
   12b50:	491d      	ldr	r1, [pc, #116]	; (12bc8 <mpsc_pbuf_alloc+0x1ec>)
   12b52:	481b      	ldr	r0, [pc, #108]	; (12bc0 <mpsc_pbuf_alloc+0x1e4>)
   12b54:	f016 ffc9 	bl	29aea <assert_print>
   12b58:	4631      	mov	r1, r6
   12b5a:	481c      	ldr	r0, [pc, #112]	; (12bcc <mpsc_pbuf_alloc+0x1f0>)
   12b5c:	f016 ffc5 	bl	29aea <assert_print>
   12b60:	21c2      	movs	r1, #194	; 0xc2
   12b62:	4620      	mov	r0, r4
   12b64:	f016 ffba 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12b68:	4c13      	ldr	r4, [pc, #76]	; (12bb8 <mpsc_pbuf_alloc+0x1dc>)
   12b6a:	2394      	movs	r3, #148	; 0x94
   12b6c:	4622      	mov	r2, r4
   12b6e:	4913      	ldr	r1, [pc, #76]	; (12bbc <mpsc_pbuf_alloc+0x1e0>)
   12b70:	4813      	ldr	r0, [pc, #76]	; (12bc0 <mpsc_pbuf_alloc+0x1e4>)
   12b72:	f016 ffba 	bl	29aea <assert_print>
   12b76:	4631      	mov	r1, r6
   12b78:	4812      	ldr	r0, [pc, #72]	; (12bc4 <mpsc_pbuf_alloc+0x1e8>)
   12b7a:	f016 ffb6 	bl	29aea <assert_print>
   12b7e:	2194      	movs	r1, #148	; 0x94
   12b80:	4620      	mov	r0, r4
   12b82:	f016 ffab 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b86:	4c0c      	ldr	r4, [pc, #48]	; (12bb8 <mpsc_pbuf_alloc+0x1dc>)
   12b88:	23c2      	movs	r3, #194	; 0xc2
   12b8a:	4622      	mov	r2, r4
   12b8c:	490e      	ldr	r1, [pc, #56]	; (12bc8 <mpsc_pbuf_alloc+0x1ec>)
   12b8e:	480c      	ldr	r0, [pc, #48]	; (12bc0 <mpsc_pbuf_alloc+0x1e4>)
   12b90:	f016 ffab 	bl	29aea <assert_print>
   12b94:	4631      	mov	r1, r6
   12b96:	480d      	ldr	r0, [pc, #52]	; (12bcc <mpsc_pbuf_alloc+0x1f0>)
   12b98:	f016 ffa7 	bl	29aea <assert_print>
   12b9c:	21c2      	movs	r1, #194	; 0xc2
   12b9e:	4620      	mov	r0, r4
   12ba0:	f016 ff9c 	bl	29adc <assert_post_action>
			dropped_item = NULL;
   12ba4:	f04f 0900 	mov.w	r9, #0
   12ba8:	e756      	b.n	12a58 <mpsc_pbuf_alloc+0x7c>
		return NULL;
   12baa:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   12bae:	4650      	mov	r0, sl
   12bb0:	b007      	add	sp, #28
   12bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bb6:	bf00      	nop
   12bb8:	000301b0 	.word	0x000301b0
   12bbc:	00030210 	.word	0x00030210
   12bc0:	0002fdac 	.word	0x0002fdac
   12bc4:	00030228 	.word	0x00030228
   12bc8:	000301e0 	.word	0x000301e0
   12bcc:	000301f8 	.word	0x000301f8

00012bd0 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   12bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bd4:	4604      	mov	r4, r0
   12bd6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   12bd8:	69c3      	ldr	r3, [r0, #28]
   12bda:	4608      	mov	r0, r1
   12bdc:	4798      	blx	r3
   12bde:	4680      	mov	r8, r0

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   12be0:	f104 0614 	add.w	r6, r4, #20
   12be4:	f04f 0320 	mov.w	r3, #32
   12be8:	f3ef 8711 	mrs	r7, BASEPRI
   12bec:	f383 8812 	msr	BASEPRI_MAX, r3
   12bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12bf4:	4630      	mov	r0, r6
   12bf6:	f012 f91f 	bl	24e38 <z_spin_lock_valid>
   12bfa:	b190      	cbz	r0, 12c22 <mpsc_pbuf_commit+0x52>
	z_spin_lock_set_owner(l);
   12bfc:	4630      	mov	r0, r6
   12bfe:	f012 f93b 	bl	24e78 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
   12c02:	782b      	ldrb	r3, [r5, #0]
   12c04:	f043 0301 	orr.w	r3, r3, #1
   12c08:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   12c0a:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   12c0c:	eb03 0008 	add.w	r0, r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12c10:	6923      	ldr	r3, [r4, #16]
   12c12:	f013 0f01 	tst.w	r3, #1
   12c16:	d113      	bne.n	12c40 <mpsc_pbuf_commit+0x70>
	return (i >= buffer->size) ? i - buffer->size : i;
   12c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12c1a:	4298      	cmp	r0, r3
   12c1c:	d313      	bcc.n	12c46 <mpsc_pbuf_commit+0x76>
   12c1e:	1ac0      	subs	r0, r0, r3
   12c20:	e011      	b.n	12c46 <mpsc_pbuf_commit+0x76>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12c22:	4c17      	ldr	r4, [pc, #92]	; (12c80 <mpsc_pbuf_commit+0xb0>)
   12c24:	2394      	movs	r3, #148	; 0x94
   12c26:	4622      	mov	r2, r4
   12c28:	4916      	ldr	r1, [pc, #88]	; (12c84 <mpsc_pbuf_commit+0xb4>)
   12c2a:	4817      	ldr	r0, [pc, #92]	; (12c88 <mpsc_pbuf_commit+0xb8>)
   12c2c:	f016 ff5d 	bl	29aea <assert_print>
   12c30:	4631      	mov	r1, r6
   12c32:	4816      	ldr	r0, [pc, #88]	; (12c8c <mpsc_pbuf_commit+0xbc>)
   12c34:	f016 ff59 	bl	29aea <assert_print>
   12c38:	2194      	movs	r1, #148	; 0x94
   12c3a:	4620      	mov	r0, r4
   12c3c:	f016 ff4e 	bl	29adc <assert_post_action>
		return i & (buffer->size - 1);
   12c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12c42:	3b01      	subs	r3, #1
   12c44:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   12c46:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   12c48:	4620      	mov	r0, r4
   12c4a:	f016 ff83 	bl	29b54 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12c4e:	4630      	mov	r0, r6
   12c50:	f012 f902 	bl	24e58 <z_spin_unlock_valid>
   12c54:	b128      	cbz	r0, 12c62 <mpsc_pbuf_commit+0x92>
	__asm__ volatile(
   12c56:	f387 8811 	msr	BASEPRI, r7
   12c5a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   12c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c62:	4c07      	ldr	r4, [pc, #28]	; (12c80 <mpsc_pbuf_commit+0xb0>)
   12c64:	23c2      	movs	r3, #194	; 0xc2
   12c66:	4622      	mov	r2, r4
   12c68:	4909      	ldr	r1, [pc, #36]	; (12c90 <mpsc_pbuf_commit+0xc0>)
   12c6a:	4807      	ldr	r0, [pc, #28]	; (12c88 <mpsc_pbuf_commit+0xb8>)
   12c6c:	f016 ff3d 	bl	29aea <assert_print>
   12c70:	4631      	mov	r1, r6
   12c72:	4808      	ldr	r0, [pc, #32]	; (12c94 <mpsc_pbuf_commit+0xc4>)
   12c74:	f016 ff39 	bl	29aea <assert_print>
   12c78:	21c2      	movs	r1, #194	; 0xc2
   12c7a:	4620      	mov	r0, r4
   12c7c:	f016 ff2e 	bl	29adc <assert_post_action>
   12c80:	000301b0 	.word	0x000301b0
   12c84:	00030210 	.word	0x00030210
   12c88:	0002fdac 	.word	0x0002fdac
   12c8c:	00030228 	.word	0x00030228
   12c90:	000301e0 	.word	0x000301e0
   12c94:	000301f8 	.word	0x000301f8

00012c98 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   12c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c9c:	4604      	mov	r4, r0
   12c9e:	e04d      	b.n	12d3c <mpsc_pbuf_claim+0xa4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12ca0:	4c4e      	ldr	r4, [pc, #312]	; (12ddc <mpsc_pbuf_claim+0x144>)
   12ca2:	2394      	movs	r3, #148	; 0x94
   12ca4:	4622      	mov	r2, r4
   12ca6:	494e      	ldr	r1, [pc, #312]	; (12de0 <mpsc_pbuf_claim+0x148>)
   12ca8:	484e      	ldr	r0, [pc, #312]	; (12de4 <mpsc_pbuf_claim+0x14c>)
   12caa:	f016 ff1e 	bl	29aea <assert_print>
   12cae:	4629      	mov	r1, r5
   12cb0:	484d      	ldr	r0, [pc, #308]	; (12de8 <mpsc_pbuf_claim+0x150>)
   12cb2:	f016 ff1a 	bl	29aea <assert_print>
   12cb6:	2194      	movs	r1, #148	; 0x94
   12cb8:	4620      	mov	r0, r4
   12cba:	f016 ff0f 	bl	29adc <assert_post_action>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   12cbe:	1a9b      	subs	r3, r3, r2
		return false;
   12cc0:	e055      	b.n	12d6e <mpsc_pbuf_claim+0xd6>
		return item->skip.len;
   12cc2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   12cc6:	0880      	lsrs	r0, r0, #2
   12cc8:	d167      	bne.n	12d9a <mpsc_pbuf_claim+0x102>
   12cca:	e05d      	b.n	12d88 <mpsc_pbuf_claim+0xf0>
		return i & (buffer->size - 1);
   12ccc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12cce:	3901      	subs	r1, #1
   12cd0:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   12cd2:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   12cd4:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   12cd6:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12cd8:	b922      	cbnz	r2, 12ce4 <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
   12cda:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12cdc:	4293      	cmp	r3, r2
   12cde:	d304      	bcc.n	12cea <mpsc_pbuf_claim+0x52>
   12ce0:	1a9b      	subs	r3, r3, r2
   12ce2:	e002      	b.n	12cea <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
   12ce4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12ce6:	3a01      	subs	r2, #1
   12ce8:	4013      	ands	r3, r2
				buffer->rd_idx =
   12cea:	60e3      	str	r3, [r4, #12]
			if (skip || !is_valid(item)) {
   12cec:	e01b      	b.n	12d26 <mpsc_pbuf_claim+0x8e>
				cont = true;
			} else {
				item->hdr.busy = 1;
   12cee:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   12cf2:	f043 0302 	orr.w	r3, r3, #2
   12cf6:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   12cfa:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   12cfc:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
   12cfe:	4640      	mov	r0, r8
   12d00:	4798      	blx	r3
	uint32_t i = idx + val;
   12d02:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12d04:	6923      	ldr	r3, [r4, #16]
   12d06:	f013 0f01 	tst.w	r3, #1
   12d0a:	d104      	bne.n	12d16 <mpsc_pbuf_claim+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
   12d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12d0e:	4298      	cmp	r0, r3
   12d10:	d304      	bcc.n	12d1c <mpsc_pbuf_claim+0x84>
   12d12:	1ac0      	subs	r0, r0, r3
   12d14:	e002      	b.n	12d1c <mpsc_pbuf_claim+0x84>
		return i & (buffer->size - 1);
   12d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12d18:	3b01      	subs	r3, #1
   12d1a:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   12d1c:	60a0      	str	r0, [r4, #8]
		cont = false;
   12d1e:	2700      	movs	r7, #0
   12d20:	e001      	b.n	12d26 <mpsc_pbuf_claim+0x8e>
   12d22:	2700      	movs	r7, #0
			item = NULL;
   12d24:	46b8      	mov	r8, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12d26:	4628      	mov	r0, r5
   12d28:	f012 f896 	bl	24e58 <z_spin_unlock_valid>
   12d2c:	2800      	cmp	r0, #0
   12d2e:	d042      	beq.n	12db6 <mpsc_pbuf_claim+0x11e>
   12d30:	f386 8811 	msr	BASEPRI, r6
   12d34:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   12d38:	2f00      	cmp	r7, #0
   12d3a:	d04b      	beq.n	12dd4 <mpsc_pbuf_claim+0x13c>
		key = k_spin_lock(&buffer->lock);
   12d3c:	f104 0514 	add.w	r5, r4, #20
	__asm__ volatile(
   12d40:	f04f 0320 	mov.w	r3, #32
   12d44:	f3ef 8611 	mrs	r6, BASEPRI
   12d48:	f383 8812 	msr	BASEPRI_MAX, r3
   12d4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12d50:	4628      	mov	r0, r5
   12d52:	f012 f871 	bl	24e38 <z_spin_lock_valid>
   12d56:	4607      	mov	r7, r0
   12d58:	2800      	cmp	r0, #0
   12d5a:	d0a1      	beq.n	12ca0 <mpsc_pbuf_claim+0x8>
	z_spin_lock_set_owner(l);
   12d5c:	4628      	mov	r0, r5
   12d5e:	f012 f88b 	bl	24e78 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   12d62:	68a2      	ldr	r2, [r4, #8]
   12d64:	6863      	ldr	r3, [r4, #4]
   12d66:	429a      	cmp	r2, r3
   12d68:	d9a9      	bls.n	12cbe <mpsc_pbuf_claim+0x26>
	*res = buffer->size - buffer->tmp_rd_idx;
   12d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12d6c:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   12d6e:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
   12d70:	eb01 0882 	add.w	r8, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   12d74:	2b00      	cmp	r3, #0
   12d76:	d0d4      	beq.n	12d22 <mpsc_pbuf_claim+0x8a>
	return !item->hdr.valid && !item->hdr.busy;
   12d78:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   12d7c:	f013 0303 	ands.w	r3, r3, #3
   12d80:	d016      	beq.n	12db0 <mpsc_pbuf_claim+0x118>
	if (item->hdr.busy && !item->hdr.valid) {
   12d82:	2b02      	cmp	r3, #2
   12d84:	d09d      	beq.n	12cc2 <mpsc_pbuf_claim+0x2a>
	return 0;
   12d86:	2000      	movs	r0, #0
	return item->hdr.valid;
   12d88:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   12d8c:	f013 0f01 	tst.w	r3, #1
   12d90:	d1ad      	bne.n	12cee <mpsc_pbuf_claim+0x56>
					skip ? skip : buffer->get_wlen(item);
   12d92:	b910      	cbnz	r0, 12d9a <mpsc_pbuf_claim+0x102>
   12d94:	69e3      	ldr	r3, [r4, #28]
   12d96:	4640      	mov	r0, r8
   12d98:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   12d9a:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   12d9c:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12d9e:	6922      	ldr	r2, [r4, #16]
   12da0:	f012 0201 	ands.w	r2, r2, #1
   12da4:	d192      	bne.n	12ccc <mpsc_pbuf_claim+0x34>
	return (i >= buffer->size) ? i - buffer->size : i;
   12da6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12da8:	428b      	cmp	r3, r1
   12daa:	d392      	bcc.n	12cd2 <mpsc_pbuf_claim+0x3a>
   12dac:	1a5b      	subs	r3, r3, r1
   12dae:	e790      	b.n	12cd2 <mpsc_pbuf_claim+0x3a>
		cont = false;
   12db0:	2700      	movs	r7, #0
			item = NULL;
   12db2:	46b8      	mov	r8, r7
   12db4:	e7b7      	b.n	12d26 <mpsc_pbuf_claim+0x8e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12db6:	4c09      	ldr	r4, [pc, #36]	; (12ddc <mpsc_pbuf_claim+0x144>)
   12db8:	23c2      	movs	r3, #194	; 0xc2
   12dba:	4622      	mov	r2, r4
   12dbc:	490b      	ldr	r1, [pc, #44]	; (12dec <mpsc_pbuf_claim+0x154>)
   12dbe:	4809      	ldr	r0, [pc, #36]	; (12de4 <mpsc_pbuf_claim+0x14c>)
   12dc0:	f016 fe93 	bl	29aea <assert_print>
   12dc4:	4629      	mov	r1, r5
   12dc6:	480a      	ldr	r0, [pc, #40]	; (12df0 <mpsc_pbuf_claim+0x158>)
   12dc8:	f016 fe8f 	bl	29aea <assert_print>
   12dcc:	21c2      	movs	r1, #194	; 0xc2
   12dce:	4620      	mov	r0, r4
   12dd0:	f016 fe84 	bl	29adc <assert_post_action>

	return item;
}
   12dd4:	4640      	mov	r0, r8
   12dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12dda:	bf00      	nop
   12ddc:	000301b0 	.word	0x000301b0
   12de0:	00030210 	.word	0x00030210
   12de4:	0002fdac 	.word	0x0002fdac
   12de8:	00030228 	.word	0x00030228
   12dec:	000301e0 	.word	0x000301e0
   12df0:	000301f8 	.word	0x000301f8

00012df4 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   12df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12df8:	4604      	mov	r4, r0
   12dfa:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   12dfc:	69c3      	ldr	r3, [r0, #28]
   12dfe:	4608      	mov	r0, r1
   12e00:	4798      	blx	r3
   12e02:	4680      	mov	r8, r0
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   12e04:	f104 0614 	add.w	r6, r4, #20
   12e08:	f04f 0320 	mov.w	r3, #32
   12e0c:	f3ef 8711 	mrs	r7, BASEPRI
   12e10:	f383 8812 	msr	BASEPRI_MAX, r3
   12e14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12e18:	4630      	mov	r0, r6
   12e1a:	f012 f80d 	bl	24e38 <z_spin_lock_valid>
   12e1e:	b1a8      	cbz	r0, 12e4c <mpsc_pbuf_free+0x58>
	z_spin_lock_set_owner(l);
   12e20:	4630      	mov	r0, r6
   12e22:	f012 f829 	bl	24e78 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   12e26:	782b      	ldrb	r3, [r5, #0]
   12e28:	f36f 0300 	bfc	r3, #0, #1
   12e2c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12e2e:	6923      	ldr	r3, [r4, #16]
   12e30:	f013 0f02 	tst.w	r3, #2
   12e34:	d019      	beq.n	12e6a <mpsc_pbuf_free+0x76>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   12e36:	6a23      	ldr	r3, [r4, #32]
   12e38:	68e2      	ldr	r2, [r4, #12]
   12e3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12e3e:	42ab      	cmp	r3, r5
   12e40:	d013      	beq.n	12e6a <mpsc_pbuf_free+0x76>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   12e42:	682b      	ldr	r3, [r5, #0]
   12e44:	f368 039f 	bfi	r3, r8, #2, #30
   12e48:	602b      	str	r3, [r5, #0]
   12e4a:	e021      	b.n	12e90 <mpsc_pbuf_free+0x9c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12e4c:	4c1f      	ldr	r4, [pc, #124]	; (12ecc <mpsc_pbuf_free+0xd8>)
   12e4e:	2394      	movs	r3, #148	; 0x94
   12e50:	4622      	mov	r2, r4
   12e52:	491f      	ldr	r1, [pc, #124]	; (12ed0 <mpsc_pbuf_free+0xdc>)
   12e54:	481f      	ldr	r0, [pc, #124]	; (12ed4 <mpsc_pbuf_free+0xe0>)
   12e56:	f016 fe48 	bl	29aea <assert_print>
   12e5a:	4631      	mov	r1, r6
   12e5c:	481e      	ldr	r0, [pc, #120]	; (12ed8 <mpsc_pbuf_free+0xe4>)
   12e5e:	f016 fe44 	bl	29aea <assert_print>
   12e62:	2194      	movs	r1, #148	; 0x94
   12e64:	4620      	mov	r0, r4
   12e66:	f016 fe39 	bl	29adc <assert_post_action>
		witem->hdr.busy = 0;
   12e6a:	782b      	ldrb	r3, [r5, #0]
   12e6c:	f36f 0341 	bfc	r3, #1, #1
   12e70:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   12e72:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   12e74:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12e76:	6922      	ldr	r2, [r4, #16]
   12e78:	f012 0f01 	tst.w	r2, #1
   12e7c:	d104      	bne.n	12e88 <mpsc_pbuf_free+0x94>
	return (i >= buffer->size) ? i - buffer->size : i;
   12e7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12e80:	4293      	cmp	r3, r2
   12e82:	d304      	bcc.n	12e8e <mpsc_pbuf_free+0x9a>
   12e84:	1a9b      	subs	r3, r3, r2
   12e86:	e002      	b.n	12e8e <mpsc_pbuf_free+0x9a>
		return i & (buffer->size - 1);
   12e88:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12e8a:	3a01      	subs	r2, #1
   12e8c:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   12e8e:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12e90:	4630      	mov	r0, r6
   12e92:	f011 ffe1 	bl	24e58 <z_spin_unlock_valid>
   12e96:	b148      	cbz	r0, 12eac <mpsc_pbuf_free+0xb8>
	__asm__ volatile(
   12e98:	f387 8811 	msr	BASEPRI, r7
   12e9c:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   12ea0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	z_impl_k_sem_give(sem);
   12ea4:	f012 fd14 	bl	258d0 <z_impl_k_sem_give>
}
   12ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12eac:	4c07      	ldr	r4, [pc, #28]	; (12ecc <mpsc_pbuf_free+0xd8>)
   12eae:	23c2      	movs	r3, #194	; 0xc2
   12eb0:	4622      	mov	r2, r4
   12eb2:	490a      	ldr	r1, [pc, #40]	; (12edc <mpsc_pbuf_free+0xe8>)
   12eb4:	4807      	ldr	r0, [pc, #28]	; (12ed4 <mpsc_pbuf_free+0xe0>)
   12eb6:	f016 fe18 	bl	29aea <assert_print>
   12eba:	4631      	mov	r1, r6
   12ebc:	4808      	ldr	r0, [pc, #32]	; (12ee0 <mpsc_pbuf_free+0xec>)
   12ebe:	f016 fe14 	bl	29aea <assert_print>
   12ec2:	21c2      	movs	r1, #194	; 0xc2
   12ec4:	4620      	mov	r0, r4
   12ec6:	f016 fe09 	bl	29adc <assert_post_action>
   12eca:	bf00      	nop
   12ecc:	000301b0 	.word	0x000301b0
   12ed0:	00030210 	.word	0x00030210
   12ed4:	0002fdac 	.word	0x0002fdac
   12ed8:	00030228 	.word	0x00030228
   12edc:	000301e0 	.word	0x000301e0
   12ee0:	000301f8 	.word	0x000301f8

00012ee4 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12ee4:	b168      	cbz	r0, 12f02 <nrfx_coredep_delay_us+0x1e>
{
   12ee6:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12ee8:	4a06      	ldr	r2, [pc, #24]	; (12f04 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   12eea:	4b07      	ldr	r3, [pc, #28]	; (12f08 <nrfx_coredep_delay_us+0x24>)
   12eec:	681b      	ldr	r3, [r3, #0]
   12eee:	4907      	ldr	r1, [pc, #28]	; (12f0c <nrfx_coredep_delay_us+0x28>)
   12ef0:	fba1 1303 	umull	r1, r3, r1, r3
   12ef4:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
   12ef6:	fb00 f003 	mul.w	r0, r0, r3
   12efa:	f042 0301 	orr.w	r3, r2, #1
   12efe:	4798      	blx	r3
}
   12f00:	bd08      	pop	{r3, pc}
   12f02:	4770      	bx	lr
   12f04:	0002f9c0 	.word	0x0002f9c0
   12f08:	20008378 	.word	0x20008378
   12f0c:	431bde83 	.word	0x431bde83

00012f10 <nordicsemi_nrf53_init>:

}
#endif /* CONFIG_PM_S2RAM */

static int nordicsemi_nrf53_init(const struct device *arg)
{
   12f10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12f12:	f04f 0320 	mov.w	r3, #32
   12f16:	f3ef 8511 	mrs	r5, BASEPRI
   12f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   12f1e:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   12f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   12f26:	2202      	movs	r2, #2
   12f28:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   12f2c:	2201      	movs	r2, #1
   12f2e:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   12f32:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   12f36:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
#if defined(CONFIG_SOC_NRF_GPIO_FORWARDER_FOR_NRF5340)
	static const uint8_t forwarded_psels[] = {
		DT_FOREACH_STATUS_OKAY(nordic_nrf_gpio_forwarder, ALL_GPIOS_IN_FORWARDER)
	};

	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
   12f3a:	2400      	movs	r4, #0
   12f3c:	e005      	b.n	12f4a <nordicsemi_nrf53_init+0x3a>
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   12f3e:	2101      	movs	r1, #1
   12f40:	4b06      	ldr	r3, [pc, #24]	; (12f5c <nordicsemi_nrf53_init+0x4c>)
   12f42:	5d18      	ldrb	r0, [r3, r4]
   12f44:	f000 f9de 	bl	13304 <soc_secure_gpio_pin_mcu_select>
	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
   12f48:	3401      	adds	r4, #1
   12f4a:	2c03      	cmp	r4, #3
   12f4c:	d9f7      	bls.n	12f3e <nordicsemi_nrf53_init+0x2e>
	__asm__ volatile(
   12f4e:	f385 8811 	msr	BASEPRI, r5
   12f52:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12f56:	2000      	movs	r0, #0
   12f58:	bd38      	pop	{r3, r4, r5, pc}
   12f5a:	bf00      	nop
   12f5c:	000302a0 	.word	0x000302a0

00012f60 <mbox_rx_init>:

	remote_callback(user_data);
}

static int mbox_rx_init(void *user_data)
{
   12f60:	b500      	push	{lr}
   12f62:	b083      	sub	sp, #12
   12f64:	4602      	mov	r2, r0
 * @param ch_id Channel ID
 */
static inline void mbox_init_channel(struct mbox_channel *channel, const struct device *dev,
				     uint32_t ch_id)
{
	channel->dev = dev;
   12f66:	4b08      	ldr	r3, [pc, #32]	; (12f88 <mbox_rx_init+0x28>)
   12f68:	9300      	str	r3, [sp, #0]
	channel->id = ch_id;
   12f6a:	2308      	movs	r3, #8
   12f6c:	9301      	str	r3, [sp, #4]
		return -ENODEV;
	}

	mbox_init_channel(&channel, dev, CONFIG_NRF53_SYNC_RTC_IPM_IN);

	err = mbox_register_callback(&channel, mbox_callback, user_data);
   12f6e:	4907      	ldr	r1, [pc, #28]	; (12f8c <mbox_rx_init+0x2c>)
   12f70:	4668      	mov	r0, sp
   12f72:	f016 fedb 	bl	29d2c <mbox_register_callback>
	if (err < 0) {
   12f76:	2800      	cmp	r0, #0
   12f78:	db03      	blt.n	12f82 <mbox_rx_init+0x22>
		union { uintptr_t x; bool val; } parm1 = { .val = enable };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MBOX_SET_ENABLED);
	}
#endif
	compiler_barrier();
	return z_impl_mbox_set_enabled(channel, enable);
   12f7a:	2101      	movs	r1, #1
   12f7c:	4668      	mov	r0, sp
   12f7e:	f016 fee4 	bl	29d4a <z_impl_mbox_set_enabled>
		return err;
	}

	return mbox_set_enabled(&channel, true);
}
   12f82:	b003      	add	sp, #12
   12f84:	f85d fb04 	ldr.w	pc, [sp], #4
   12f88:	0002f530 	.word	0x0002f530
   12f8c:	000131dd 	.word	0x000131dd

00012f90 <nrf_ipc_send_task_get>:
    return p_reg->GPMEM[index];
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   12f90:	280f      	cmp	r0, #15
   12f92:	d803      	bhi.n	12f9c <nrf_ipc_send_task_get+0xc>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   12f94:	0080      	lsls	r0, r0, #2
}
   12f96:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
   12f9a:	4770      	bx	lr
{
   12f9c:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   12f9e:	4c06      	ldr	r4, [pc, #24]	; (12fb8 <nrf_ipc_send_task_get+0x28>)
   12fa0:	f240 13e1 	movw	r3, #481	; 0x1e1
   12fa4:	4622      	mov	r2, r4
   12fa6:	4905      	ldr	r1, [pc, #20]	; (12fbc <nrf_ipc_send_task_get+0x2c>)
   12fa8:	4805      	ldr	r0, [pc, #20]	; (12fc0 <nrf_ipc_send_task_get+0x30>)
   12faa:	f016 fd9e 	bl	29aea <assert_print>
   12fae:	f240 11e1 	movw	r1, #481	; 0x1e1
   12fb2:	4620      	mov	r0, r4
   12fb4:	f016 fd92 	bl	29adc <assert_post_action>
   12fb8:	000302a8 	.word	0x000302a8
   12fbc:	000302dc 	.word	0x000302dc
   12fc0:	0002fdac 	.word	0x0002fdac

00012fc4 <nrfx_gppi_event_endpoint_setup>:
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   12fc4:	b121      	cbz	r1, 12fd0 <nrfx_gppi_event_endpoint_setup+0xc>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   12fc6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   12fca:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   12fce:	4770      	bx	lr
{
   12fd0:	b510      	push	{r4, lr}
    NRFX_ASSERT(eep);
   12fd2:	4c06      	ldr	r4, [pc, #24]	; (12fec <nrfx_gppi_event_endpoint_setup+0x28>)
   12fd4:	f44f 7312 	mov.w	r3, #584	; 0x248
   12fd8:	4622      	mov	r2, r4
   12fda:	4905      	ldr	r1, [pc, #20]	; (12ff0 <nrfx_gppi_event_endpoint_setup+0x2c>)
   12fdc:	4805      	ldr	r0, [pc, #20]	; (12ff4 <nrfx_gppi_event_endpoint_setup+0x30>)
   12fde:	f016 fd84 	bl	29aea <assert_print>
   12fe2:	f44f 7112 	mov.w	r1, #584	; 0x248
   12fe6:	4620      	mov	r0, r4
   12fe8:	f016 fd78 	bl	29adc <assert_post_action>
   12fec:	000302e8 	.word	0x000302e8
   12ff0:	00030320 	.word	0x00030320
   12ff4:	0002fdac 	.word	0x0002fdac

00012ff8 <nrfx_gppi_event_endpoint_clear>:
    nrfx_gppi_task_endpoint_setup(channel, tep);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   12ff8:	b119      	cbz	r1, 13002 <nrfx_gppi_event_endpoint_clear+0xa>
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
   12ffa:	2200      	movs	r2, #0
   12ffc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   13000:	4770      	bx	lr
{
   13002:	b510      	push	{r4, lr}
    NRFX_ASSERT(eep);
   13004:	4c06      	ldr	r4, [pc, #24]	; (13020 <nrfx_gppi_event_endpoint_clear+0x28>)
   13006:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1300a:	4622      	mov	r2, r4
   1300c:	4905      	ldr	r1, [pc, #20]	; (13024 <nrfx_gppi_event_endpoint_clear+0x2c>)
   1300e:	4806      	ldr	r0, [pc, #24]	; (13028 <nrfx_gppi_event_endpoint_clear+0x30>)
   13010:	f016 fd6b 	bl	29aea <assert_print>
   13014:	f44f 7117 	mov.w	r1, #604	; 0x25c
   13018:	4620      	mov	r0, r4
   1301a:	f016 fd5f 	bl	29adc <assert_post_action>
   1301e:	bf00      	nop
   13020:	000302e8 	.word	0x000302e8
   13024:	00030320 	.word	0x00030320
   13028:	0002fdac 	.word	0x0002fdac

0001302c <nrf_ipc_receive_event_get>:

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   1302c:	280f      	cmp	r0, #15
   1302e:	d803      	bhi.n	13038 <nrf_ipc_receive_event_get+0xc>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   13030:	0080      	lsls	r0, r0, #2
}
   13032:	f500 7080 	add.w	r0, r0, #256	; 0x100
   13036:	4770      	bx	lr
{
   13038:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   1303a:	4c06      	ldr	r4, [pc, #24]	; (13054 <nrf_ipc_receive_event_get+0x28>)
   1303c:	f240 13e7 	movw	r3, #487	; 0x1e7
   13040:	4622      	mov	r2, r4
   13042:	4905      	ldr	r1, [pc, #20]	; (13058 <nrf_ipc_receive_event_get+0x2c>)
   13044:	4805      	ldr	r0, [pc, #20]	; (1305c <nrf_ipc_receive_event_get+0x30>)
   13046:	f016 fd50 	bl	29aea <assert_print>
   1304a:	f240 11e7 	movw	r1, #487	; 0x1e7
   1304e:	4620      	mov	r0, r4
   13050:	f016 fd44 	bl	29adc <assert_post_action>
   13054:	000302a8 	.word	0x000302a8
   13058:	000302dc 	.word	0x000302dc
   1305c:	0002fdac 	.word	0x0002fdac

00013060 <nrfx_gppi_task_endpoint_setup>:
    NRFX_ASSERT(tep);
   13060:	b121      	cbz	r1, 1306c <nrfx_gppi_task_endpoint_setup+0xc>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   13062:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   13066:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   1306a:	4770      	bx	lr
{
   1306c:	b510      	push	{r4, lr}
    NRFX_ASSERT(tep);
   1306e:	4c06      	ldr	r4, [pc, #24]	; (13088 <nrfx_gppi_task_endpoint_setup+0x28>)
   13070:	f240 234e 	movw	r3, #590	; 0x24e
   13074:	4622      	mov	r2, r4
   13076:	4905      	ldr	r1, [pc, #20]	; (1308c <nrfx_gppi_task_endpoint_setup+0x2c>)
   13078:	4805      	ldr	r0, [pc, #20]	; (13090 <nrfx_gppi_task_endpoint_setup+0x30>)
   1307a:	f016 fd36 	bl	29aea <assert_print>
   1307e:	f240 214e 	movw	r1, #590	; 0x24e
   13082:	4620      	mov	r0, r4
   13084:	f016 fd2a 	bl	29adc <assert_post_action>
   13088:	000302e8 	.word	0x000302e8
   1308c:	00030324 	.word	0x00030324
   13090:	0002fdac 	.word	0x0002fdac

00013094 <nrfx_gppi_task_endpoint_clear>:
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   13094:	b119      	cbz	r1, 1309e <nrfx_gppi_task_endpoint_clear+0xa>
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
   13096:	2200      	movs	r2, #0
   13098:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   1309c:	4770      	bx	lr
{
   1309e:	b510      	push	{r4, lr}
    NRFX_ASSERT(tep);
   130a0:	4c06      	ldr	r4, [pc, #24]	; (130bc <nrfx_gppi_task_endpoint_clear+0x28>)
   130a2:	f240 2363 	movw	r3, #611	; 0x263
   130a6:	4622      	mov	r2, r4
   130a8:	4905      	ldr	r1, [pc, #20]	; (130c0 <nrfx_gppi_task_endpoint_clear+0x2c>)
   130aa:	4806      	ldr	r0, [pc, #24]	; (130c4 <nrfx_gppi_task_endpoint_clear+0x30>)
   130ac:	f016 fd1d 	bl	29aea <assert_print>
   130b0:	f240 2163 	movw	r1, #611	; 0x263
   130b4:	4620      	mov	r0, r4
   130b6:	f016 fd11 	bl	29adc <assert_post_action>
   130ba:	bf00      	nop
   130bc:	000302e8 	.word	0x000302e8
   130c0:	00030324 	.word	0x00030324
   130c4:	0002fdac 	.word	0x0002fdac

000130c8 <free_resources>:
{
   130c8:	b510      	push	{r4, lr}
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
   130ca:	b2c4      	uxtb	r4, r0
   130cc:	2301      	movs	r3, #1
   130ce:	40a3      	lsls	r3, r4
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   130d0:	4a0c      	ldr	r2, [pc, #48]	; (13104 <free_resources+0x3c>)
   130d2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
   130d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
   130da:	f00e fb79 	bl	217d0 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
   130de:	4620      	mov	r0, r4
   130e0:	f00f fcc0 	bl	22a64 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   130e4:	4b08      	ldr	r3, [pc, #32]	; (13108 <free_resources+0x40>)
   130e6:	4298      	cmp	r0, r3
   130e8:	d100      	bne.n	130ec <free_resources+0x24>
}
   130ea:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   130ec:	4c07      	ldr	r4, [pc, #28]	; (1310c <free_resources+0x44>)
   130ee:	2374      	movs	r3, #116	; 0x74
   130f0:	4622      	mov	r2, r4
   130f2:	4907      	ldr	r1, [pc, #28]	; (13110 <free_resources+0x48>)
   130f4:	4807      	ldr	r0, [pc, #28]	; (13114 <free_resources+0x4c>)
   130f6:	f016 fcf8 	bl	29aea <assert_print>
   130fa:	2174      	movs	r1, #116	; 0x74
   130fc:	4620      	mov	r0, r4
   130fe:	f016 fced 	bl	29adc <assert_post_action>
   13102:	bf00      	nop
   13104:	40017000 	.word	0x40017000
   13108:	0bad0000 	.word	0x0bad0000
   1310c:	00030328 	.word	0x00030328
   13110:	00030360 	.word	0x00030360
   13114:	0002fdac 	.word	0x0002fdac

00013118 <ppi_rtc_to_ipc>:
{
   13118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1311a:	4604      	mov	r4, r0
   1311c:	460f      	mov	r7, r1
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
   1311e:	f3c0 2007 	ubfx	r0, r0, #8, #8
   13122:	f00e f99d 	bl	21460 <z_nrf_rtc_timer_compare_evt_address_get>
   13126:	4606      	mov	r6, r0
	nrf_ipc_task_t ipc_task = nrf_ipc_send_task_get(channels.ch.ipc_out);
   13128:	f3c4 4007 	ubfx	r0, r4, #16, #8
   1312c:	f7ff ff30 	bl	12f90 <nrf_ipc_send_task_get>
   13130:	4605      	mov	r5, r0
	if (setup) {
   13132:	b147      	cbz	r7, 13146 <ppi_rtc_to_ipc+0x2e>
		nrf_ipc_subscribe_set(NRF_IPC, ipc_task, channels.ch.ppi);
   13134:	b2e0      	uxtb	r0, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   13136:	4b08      	ldr	r3, [pc, #32]	; (13158 <ppi_rtc_to_ipc+0x40>)
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
   13138:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   1313c:	515a      	str	r2, [r3, r5]
		nrfx_gppi_event_endpoint_setup(channels.ch.ppi, evt_addr);
   1313e:	4631      	mov	r1, r6
   13140:	f7ff ff40 	bl	12fc4 <nrfx_gppi_event_endpoint_setup>
}
   13144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_gppi_event_endpoint_clear(channels.ch.ppi, evt_addr);
   13146:	4631      	mov	r1, r6
   13148:	b2e0      	uxtb	r0, r4
   1314a:	f7ff ff55 	bl	12ff8 <nrfx_gppi_event_endpoint_clear>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
   1314e:	4b02      	ldr	r3, [pc, #8]	; (13158 <ppi_rtc_to_ipc+0x40>)
   13150:	2200      	movs	r2, #0
   13152:	515a      	str	r2, [r3, r5]
}
   13154:	e7f6      	b.n	13144 <ppi_rtc_to_ipc+0x2c>
   13156:	bf00      	nop
   13158:	4002a080 	.word	0x4002a080

0001315c <ppi_ipc_to_rtc>:
{
   1315c:	b570      	push	{r4, r5, r6, lr}
   1315e:	4604      	mov	r4, r0
   13160:	460e      	mov	r6, r1
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
   13162:	0e00      	lsrs	r0, r0, #24
   13164:	f7ff ff62 	bl	1302c <nrf_ipc_receive_event_get>
   13168:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
   1316a:	f3c4 2007 	ubfx	r0, r4, #8, #8
   1316e:	f00e f993 	bl	21498 <z_nrf_rtc_timer_capture_task_address_get>
   13172:	4601      	mov	r1, r0
	if (setup) {
   13174:	b146      	cbz	r6, 13188 <ppi_ipc_to_rtc+0x2c>
		nrfx_gppi_task_endpoint_setup(channels.ch.ppi, task_addr);
   13176:	b2e4      	uxtb	r4, r4
   13178:	4620      	mov	r0, r4
   1317a:	f7ff ff71 	bl	13060 <nrfx_gppi_task_endpoint_setup>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   1317e:	4b06      	ldr	r3, [pc, #24]	; (13198 <ppi_ipc_to_rtc+0x3c>)
            ((uint32_t)channel | IPC_PUBLISH_RECEIVE_EN_Msk);
   13180:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   13184:	515c      	str	r4, [r3, r5]
}
   13186:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
   13188:	b2e0      	uxtb	r0, r4
   1318a:	f7ff ff83 	bl	13094 <nrfx_gppi_task_endpoint_clear>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
   1318e:	4b02      	ldr	r3, [pc, #8]	; (13198 <ppi_ipc_to_rtc+0x3c>)
   13190:	2200      	movs	r2, #0
   13192:	515a      	str	r2, [r3, r5]
}
   13194:	e7f7      	b.n	13186 <ppi_ipc_to_rtc+0x2a>
   13196:	bf00      	nop
   13198:	4002a080 	.word	0x4002a080

0001319c <remote_callback>:
{
   1319c:	b570      	push	{r4, r5, r6, lr}
   1319e:	b082      	sub	sp, #8
   131a0:	4604      	mov	r4, r0
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
   131a2:	f3c0 2607 	ubfx	r6, r0, #8, #8
   131a6:	4630      	mov	r0, r6
   131a8:	f00e f996 	bl	214d8 <z_nrf_rtc_timer_compare_read>
   131ac:	4605      	mov	r5, r0
	ppi_ipc_to_rtc(channels, false);
   131ae:	2100      	movs	r1, #0
   131b0:	4620      	mov	r0, r4
   131b2:	f7ff ffd3 	bl	1315c <ppi_ipc_to_rtc>
		ppi_rtc_to_ipc(channels, true);
   131b6:	2101      	movs	r1, #1
   131b8:	4620      	mov	r0, r4
   131ba:	f7ff ffad 	bl	13118 <ppi_rtc_to_ipc>
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
   131be:	f105 0232 	add.w	r2, r5, #50	; 0x32
   131c2:	9401      	str	r4, [sp, #4]
   131c4:	4b04      	ldr	r3, [pc, #16]	; (131d8 <remote_callback+0x3c>)
   131c6:	9300      	str	r3, [sp, #0]
   131c8:	0052      	lsls	r2, r2, #1
   131ca:	2300      	movs	r3, #0
   131cc:	4630      	mov	r0, r6
   131ce:	f00e fa0b 	bl	215e8 <z_nrf_rtc_timer_set>
}
   131d2:	b002      	add	sp, #8
   131d4:	bd70      	pop	{r4, r5, r6, pc}
   131d6:	bf00      	nop
   131d8:	00029d65 	.word	0x00029d65

000131dc <mbox_callback>:
{
   131dc:	b510      	push	{r4, lr}
   131de:	b082      	sub	sp, #8
   131e0:	4614      	mov	r4, r2
	channel->dev = dev;
   131e2:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
   131e4:	9101      	str	r1, [sp, #4]
   131e6:	2100      	movs	r1, #0
   131e8:	4668      	mov	r0, sp
   131ea:	f016 fdae 	bl	29d4a <z_impl_mbox_set_enabled>
	__ASSERT_NO_MSG(err == 0);
   131ee:	b920      	cbnz	r0, 131fa <mbox_callback+0x1e>
	remote_callback(user_data);
   131f0:	4620      	mov	r0, r4
   131f2:	f7ff ffd3 	bl	1319c <remote_callback>
}
   131f6:	b002      	add	sp, #8
   131f8:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(err == 0);
   131fa:	4c05      	ldr	r4, [pc, #20]	; (13210 <mbox_callback+0x34>)
   131fc:	23ca      	movs	r3, #202	; 0xca
   131fe:	4622      	mov	r2, r4
   13200:	4904      	ldr	r1, [pc, #16]	; (13214 <mbox_callback+0x38>)
   13202:	4805      	ldr	r0, [pc, #20]	; (13218 <mbox_callback+0x3c>)
   13204:	f016 fc71 	bl	29aea <assert_print>
   13208:	21ca      	movs	r1, #202	; 0xca
   1320a:	4620      	mov	r0, r4
   1320c:	f016 fc66 	bl	29adc <assert_post_action>
   13210:	00030328 	.word	0x00030328
   13214:	00030294 	.word	0x00030294
   13218:	0002fdac 	.word	0x0002fdac

0001321c <sync_rtc_setup>:

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
   1321c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1321e:	b083      	sub	sp, #12
   13220:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
   13222:	1d38      	adds	r0, r7, #4
   13224:	f00f fc16 	bl	22a54 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
   13228:	4b31      	ldr	r3, [pc, #196]	; (132f0 <sync_rtc_setup+0xd4>)
   1322a:	4298      	cmp	r0, r3
   1322c:	d03b      	beq.n	132a6 <sync_rtc_setup+0x8a>
		rv = -ENODEV;
   1322e:	f06f 0412 	mvn.w	r4, #18
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
   13232:	466d      	mov	r5, sp
   13234:	b088      	sub	sp, #32
   13236:	466b      	mov	r3, sp
   13238:	f113 0210 	adds.w	r2, r3, #16
   1323c:	d052      	beq.n	132e4 <sync_rtc_setup+0xc8>
   1323e:	210c      	movs	r1, #12
   13240:	b13a      	cbz	r2, 13252 <sync_rtc_setup+0x36>
   13242:	4608      	mov	r0, r1
   13244:	2904      	cmp	r1, #4
   13246:	dd01      	ble.n	1324c <sync_rtc_setup+0x30>
   13248:	4e2a      	ldr	r6, [pc, #168]	; (132f4 <sync_rtc_setup+0xd8>)
   1324a:	615e      	str	r6, [r3, #20]
   1324c:	2808      	cmp	r0, #8
   1324e:	dd00      	ble.n	13252 <sync_rtc_setup+0x36>
   13250:	619c      	str	r4, [r3, #24]
   13252:	290b      	cmp	r1, #11
   13254:	dd49      	ble.n	132ea <sync_rtc_setup+0xce>
   13256:	f04f 0c0c 	mov.w	ip, #12
   1325a:	b13a      	cbz	r2, 1326c <sync_rtc_setup+0x50>
   1325c:	2103      	movs	r1, #3
   1325e:	7039      	strb	r1, [r7, #0]
   13260:	2100      	movs	r1, #0
   13262:	7079      	strb	r1, [r7, #1]
   13264:	70b9      	strb	r1, [r7, #2]
   13266:	70f9      	strb	r1, [r7, #3]
   13268:	6838      	ldr	r0, [r7, #0]
   1326a:	6118      	str	r0, [r3, #16]
   1326c:	2100      	movs	r1, #0
   1326e:	f36f 0100 	bfc	r1, #0, #1
   13272:	f36f 0141 	bfc	r1, #1, #1
   13276:	f36f 0182 	bfc	r1, #2, #1
   1327a:	f36f 01c5 	bfc	r1, #3, #3
   1327e:	2301      	movs	r3, #1
   13280:	f363 1188 	bfi	r1, r3, #6, #3
   13284:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   13288:	f36c 2152 	bfi	r1, ip, #9, #10
   1328c:	f36f 41de 	bfc	r1, #19, #12
   13290:	f36f 71df 	bfc	r1, #31, #1
   13294:	2300      	movs	r3, #0
   13296:	4818      	ldr	r0, [pc, #96]	; (132f8 <sync_rtc_setup+0xdc>)
   13298:	f000 fd30 	bl	13cfc <z_impl_z_log_msg_static_create>
   1329c:	46ad      	mov	sp, r5
	}

	return rv;
}
   1329e:	4620      	mov	r0, r4
   132a0:	370c      	adds	r7, #12
   132a2:	46bd      	mov	sp, r7
   132a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
   132a6:	f00e fa6b 	bl	21780 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
   132aa:	1e04      	subs	r4, r0, #0
   132ac:	db16      	blt.n	132dc <sync_rtc_setup+0xc0>
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
   132ae:	717c      	strb	r4, [r7, #5]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
   132b0:	2307      	movs	r3, #7
   132b2:	71bb      	strb	r3, [r7, #6]
	channels.ch.ipc_in = CONFIG_NRF53_SYNC_RTC_IPM_IN;
   132b4:	2308      	movs	r3, #8
   132b6:	71fb      	strb	r3, [r7, #7]
	rv = mbox_rx_init((void *)channels.raw);
   132b8:	6878      	ldr	r0, [r7, #4]
   132ba:	f7ff fe51 	bl	12f60 <mbox_rx_init>
	if (rv < 0) {
   132be:	1e04      	subs	r4, r0, #0
   132c0:	dbb7      	blt.n	13232 <sync_rtc_setup+0x16>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
   132c2:	793b      	ldrb	r3, [r7, #4]
   132c4:	2101      	movs	r1, #1
   132c6:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->CHENSET = mask;
   132ca:	4a0c      	ldr	r2, [pc, #48]	; (132fc <sync_rtc_setup+0xe0>)
   132cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
   132d0:	6878      	ldr	r0, [r7, #4]
   132d2:	f7ff ff43 	bl	1315c <ppi_ipc_to_rtc>
	if (rv != 0) {
   132d6:	2c00      	cmp	r4, #0
   132d8:	d0e1      	beq.n	1329e <sync_rtc_setup+0x82>
   132da:	e7aa      	b.n	13232 <sync_rtc_setup+0x16>
		nrfx_dppi_channel_free(channels.ch.ppi);
   132dc:	7938      	ldrb	r0, [r7, #4]
   132de:	f00f fbc1 	bl	22a64 <nrfx_dppi_channel_free>
		goto bail;
   132e2:	e7f8      	b.n	132d6 <sync_rtc_setup+0xba>
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
   132e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   132e8:	e7aa      	b.n	13240 <sync_rtc_setup+0x24>
   132ea:	f06f 0c1b 	mvn.w	ip, #27
   132ee:	e7b4      	b.n	1325a <sync_rtc_setup+0x3e>
   132f0:	0bad0000 	.word	0x0bad0000
   132f4:	00030374 	.word	0x00030374
   132f8:	0002f8d0 	.word	0x0002f8d0
   132fc:	40017000 	.word	0x40017000

00013300 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13300:	f01a bd5a 	b.w	2ddb8 <SystemInit>

00013304 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   13304:	b530      	push	{r4, r5, lr}
   13306:	b083      	sub	sp, #12
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   13308:	aa01      	add	r2, sp, #4
   1330a:	f01a fd3d 	bl	2dd88 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
   1330e:	b918      	cbnz	r0, 13318 <soc_secure_gpio_pin_mcu_select+0x14>
	__ASSERT(result == 0, "GPIO service error (%d)", result);
   13310:	9b01      	ldr	r3, [sp, #4]
   13312:	b98b      	cbnz	r3, 13338 <soc_secure_gpio_pin_mcu_select+0x34>
}
   13314:	b003      	add	sp, #12
   13316:	bd30      	pop	{r4, r5, pc}
   13318:	4604      	mov	r4, r0
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
   1331a:	4d0f      	ldr	r5, [pc, #60]	; (13358 <soc_secure_gpio_pin_mcu_select+0x54>)
   1331c:	2316      	movs	r3, #22
   1331e:	462a      	mov	r2, r5
   13320:	490e      	ldr	r1, [pc, #56]	; (1335c <soc_secure_gpio_pin_mcu_select+0x58>)
   13322:	480f      	ldr	r0, [pc, #60]	; (13360 <soc_secure_gpio_pin_mcu_select+0x5c>)
   13324:	f016 fbe1 	bl	29aea <assert_print>
   13328:	4621      	mov	r1, r4
   1332a:	480e      	ldr	r0, [pc, #56]	; (13364 <soc_secure_gpio_pin_mcu_select+0x60>)
   1332c:	f016 fbdd 	bl	29aea <assert_print>
   13330:	2116      	movs	r1, #22
   13332:	4628      	mov	r0, r5
   13334:	f016 fbd2 	bl	29adc <assert_post_action>
	__ASSERT(result == 0, "GPIO service error (%d)", result);
   13338:	4c07      	ldr	r4, [pc, #28]	; (13358 <soc_secure_gpio_pin_mcu_select+0x54>)
   1333a:	2317      	movs	r3, #23
   1333c:	4622      	mov	r2, r4
   1333e:	490a      	ldr	r1, [pc, #40]	; (13368 <soc_secure_gpio_pin_mcu_select+0x64>)
   13340:	4807      	ldr	r0, [pc, #28]	; (13360 <soc_secure_gpio_pin_mcu_select+0x5c>)
   13342:	f016 fbd2 	bl	29aea <assert_print>
   13346:	9901      	ldr	r1, [sp, #4]
   13348:	4808      	ldr	r0, [pc, #32]	; (1336c <soc_secure_gpio_pin_mcu_select+0x68>)
   1334a:	f016 fbce 	bl	29aea <assert_print>
   1334e:	2117      	movs	r1, #23
   13350:	4620      	mov	r0, r4
   13352:	f016 fbc3 	bl	29adc <assert_post_action>
   13356:	bf00      	nop
   13358:	000303a8 	.word	0x000303a8
   1335c:	000303e4 	.word	0x000303e4
   13360:	0002fdac 	.word	0x0002fdac
   13364:	00030404 	.word	0x00030404
   13368:	00030420 	.word	0x00030420
   1336c:	0003042c 	.word	0x0003042c

00013370 <log_backend_is_active>:
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   13370:	b110      	cbz	r0, 13378 <log_backend_is_active+0x8>
	return backend->cb->active;
   13372:	6843      	ldr	r3, [r0, #4]
}
   13374:	7958      	ldrb	r0, [r3, #5]
   13376:	4770      	bx	lr
{
   13378:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   1337a:	4c06      	ldr	r4, [pc, #24]	; (13394 <log_backend_is_active+0x24>)
   1337c:	f44f 7399 	mov.w	r3, #306	; 0x132
   13380:	4622      	mov	r2, r4
   13382:	4905      	ldr	r1, [pc, #20]	; (13398 <log_backend_is_active+0x28>)
   13384:	4805      	ldr	r0, [pc, #20]	; (1339c <log_backend_is_active+0x2c>)
   13386:	f016 fbb0 	bl	29aea <assert_print>
   1338a:	f44f 7199 	mov.w	r1, #306	; 0x132
   1338e:	4620      	mov	r0, r4
   13390:	f016 fba4 	bl	29adc <assert_post_action>
   13394:	00030448 	.word	0x00030448
   13398:	00030480 	.word	0x00030480
   1339c:	0002fdac 	.word	0x0002fdac

000133a0 <log_backend_init>:
{
   133a0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   133a2:	b120      	cbz	r0, 133ae <log_backend_init+0xe>
	if (backend->api->init) {
   133a4:	6802      	ldr	r2, [r0, #0]
   133a6:	68d2      	ldr	r2, [r2, #12]
   133a8:	b102      	cbz	r2, 133ac <log_backend_init+0xc>
		backend->api->init(backend);
   133aa:	4790      	blx	r2
}
   133ac:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   133ae:	4c05      	ldr	r4, [pc, #20]	; (133c4 <log_backend_init+0x24>)
   133b0:	238a      	movs	r3, #138	; 0x8a
   133b2:	4622      	mov	r2, r4
   133b4:	4904      	ldr	r1, [pc, #16]	; (133c8 <log_backend_init+0x28>)
   133b6:	4805      	ldr	r0, [pc, #20]	; (133cc <log_backend_init+0x2c>)
   133b8:	f016 fb97 	bl	29aea <assert_print>
   133bc:	218a      	movs	r1, #138	; 0x8a
   133be:	4620      	mov	r0, r4
   133c0:	f016 fb8c 	bl	29adc <assert_post_action>
   133c4:	00030448 	.word	0x00030448
   133c8:	00030480 	.word	0x00030480
   133cc:	0002fdac 	.word	0x0002fdac

000133d0 <log_backend_is_ready>:
{
   133d0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   133d2:	b120      	cbz	r0, 133de <log_backend_is_ready+0xe>
	if (backend->api->is_ready != NULL) {
   133d4:	6802      	ldr	r2, [r0, #0]
   133d6:	6912      	ldr	r2, [r2, #16]
   133d8:	b162      	cbz	r2, 133f4 <log_backend_is_ready+0x24>
		return backend->api->is_ready(backend);
   133da:	4790      	blx	r2
}
   133dc:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   133de:	4c06      	ldr	r4, [pc, #24]	; (133f8 <log_backend_is_ready+0x28>)
   133e0:	239d      	movs	r3, #157	; 0x9d
   133e2:	4622      	mov	r2, r4
   133e4:	4905      	ldr	r1, [pc, #20]	; (133fc <log_backend_is_ready+0x2c>)
   133e6:	4806      	ldr	r0, [pc, #24]	; (13400 <log_backend_is_ready+0x30>)
   133e8:	f016 fb7f 	bl	29aea <assert_print>
   133ec:	219d      	movs	r1, #157	; 0x9d
   133ee:	4620      	mov	r0, r4
   133f0:	f016 fb74 	bl	29adc <assert_post_action>
	return 0;
   133f4:	2000      	movs	r0, #0
   133f6:	e7f1      	b.n	133dc <log_backend_is_ready+0xc>
   133f8:	00030448 	.word	0x00030448
   133fc:	00030480 	.word	0x00030480
   13400:	0002fdac 	.word	0x0002fdac

00013404 <log_backend_panic>:
{
   13404:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   13406:	b118      	cbz	r0, 13410 <log_backend_panic+0xc>
	backend->api->panic(backend);
   13408:	6802      	ldr	r2, [r0, #0]
   1340a:	6892      	ldr	r2, [r2, #8]
   1340c:	4790      	blx	r2
}
   1340e:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   13410:	4c05      	ldr	r4, [pc, #20]	; (13428 <log_backend_panic+0x24>)
   13412:	23cf      	movs	r3, #207	; 0xcf
   13414:	4622      	mov	r2, r4
   13416:	4905      	ldr	r1, [pc, #20]	; (1342c <log_backend_panic+0x28>)
   13418:	4805      	ldr	r0, [pc, #20]	; (13430 <log_backend_panic+0x2c>)
   1341a:	f016 fb66 	bl	29aea <assert_print>
   1341e:	21cf      	movs	r1, #207	; 0xcf
   13420:	4620      	mov	r0, r4
   13422:	f016 fb5b 	bl	29adc <assert_post_action>
   13426:	bf00      	nop
   13428:	00030448 	.word	0x00030448
   1342c:	00030480 	.word	0x00030480
   13430:	0002fdac 	.word	0x0002fdac

00013434 <log_backend_dropped>:
{
   13434:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   13436:	b120      	cbz	r0, 13442 <log_backend_dropped+0xe>
	if (backend->api->dropped != NULL) {
   13438:	6802      	ldr	r2, [r0, #0]
   1343a:	6852      	ldr	r2, [r2, #4]
   1343c:	b102      	cbz	r2, 13440 <log_backend_dropped+0xc>
		backend->api->dropped(backend, cnt);
   1343e:	4790      	blx	r2
}
   13440:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   13442:	4c05      	ldr	r4, [pc, #20]	; (13458 <log_backend_dropped+0x24>)
   13444:	23c1      	movs	r3, #193	; 0xc1
   13446:	4622      	mov	r2, r4
   13448:	4904      	ldr	r1, [pc, #16]	; (1345c <log_backend_dropped+0x28>)
   1344a:	4805      	ldr	r0, [pc, #20]	; (13460 <log_backend_dropped+0x2c>)
   1344c:	f016 fb4d 	bl	29aea <assert_print>
   13450:	21c1      	movs	r1, #193	; 0xc1
   13452:	4620      	mov	r0, r4
   13454:	f016 fb42 	bl	29adc <assert_post_action>
   13458:	00030448 	.word	0x00030448
   1345c:	00030480 	.word	0x00030480
   13460:	0002fdac 	.word	0x0002fdac

00013464 <log_backend_msg_process>:
{
   13464:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   13466:	b120      	cbz	r0, 13472 <log_backend_msg_process+0xe>
	__ASSERT_NO_MSG(msg != NULL);
   13468:	b171      	cbz	r1, 13488 <log_backend_msg_process+0x24>
	backend->api->process(backend, msg);
   1346a:	6802      	ldr	r2, [r0, #0]
   1346c:	6812      	ldr	r2, [r2, #0]
   1346e:	4790      	blx	r2
}
   13470:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   13472:	4c0b      	ldr	r4, [pc, #44]	; (134a0 <log_backend_msg_process+0x3c>)
   13474:	23b1      	movs	r3, #177	; 0xb1
   13476:	4622      	mov	r2, r4
   13478:	490a      	ldr	r1, [pc, #40]	; (134a4 <log_backend_msg_process+0x40>)
   1347a:	480b      	ldr	r0, [pc, #44]	; (134a8 <log_backend_msg_process+0x44>)
   1347c:	f016 fb35 	bl	29aea <assert_print>
   13480:	21b1      	movs	r1, #177	; 0xb1
   13482:	4620      	mov	r0, r4
   13484:	f016 fb2a 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(msg != NULL);
   13488:	4c05      	ldr	r4, [pc, #20]	; (134a0 <log_backend_msg_process+0x3c>)
   1348a:	23b2      	movs	r3, #178	; 0xb2
   1348c:	4622      	mov	r2, r4
   1348e:	4907      	ldr	r1, [pc, #28]	; (134ac <log_backend_msg_process+0x48>)
   13490:	4805      	ldr	r0, [pc, #20]	; (134a8 <log_backend_msg_process+0x44>)
   13492:	f016 fb2a 	bl	29aea <assert_print>
   13496:	21b2      	movs	r1, #178	; 0xb2
   13498:	4620      	mov	r0, r4
   1349a:	f016 fb1f 	bl	29adc <assert_post_action>
   1349e:	bf00      	nop
   134a0:	00030448 	.word	0x00030448
   134a4:	00030480 	.word	0x00030480
   134a8:	0002fdac 	.word	0x0002fdac
   134ac:	00030498 	.word	0x00030498

000134b0 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   134b0:	b538      	push	{r3, r4, r5, lr}
   134b2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   134b4:	4c14      	ldr	r4, [pc, #80]	; (13508 <msg_process+0x58>)
   134b6:	e000      	b.n	134ba <msg_process+0xa>
   134b8:	3410      	adds	r4, #16
   134ba:	4b14      	ldr	r3, [pc, #80]	; (1350c <msg_process+0x5c>)
   134bc:	429c      	cmp	r4, r3
   134be:	d812      	bhi.n	134e6 <msg_process+0x36>
   134c0:	4b12      	ldr	r3, [pc, #72]	; (1350c <msg_process+0x5c>)
   134c2:	429c      	cmp	r4, r3
   134c4:	d21f      	bcs.n	13506 <msg_process+0x56>
		if (log_backend_is_active(backend) &&
   134c6:	4620      	mov	r0, r4
   134c8:	f7ff ff52 	bl	13370 <log_backend_is_active>
   134cc:	2800      	cmp	r0, #0
   134ce:	d0f3      	beq.n	134b8 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   134d0:	4629      	mov	r1, r5
   134d2:	4620      	mov	r0, r4
   134d4:	f016 fc63 	bl	29d9e <msg_filter_check>
		if (log_backend_is_active(backend) &&
   134d8:	2800      	cmp	r0, #0
   134da:	d0ed      	beq.n	134b8 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
   134dc:	4629      	mov	r1, r5
   134de:	4620      	mov	r0, r4
   134e0:	f7ff ffc0 	bl	13464 <log_backend_msg_process>
   134e4:	e7e8      	b.n	134b8 <msg_process+0x8>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   134e6:	4c0a      	ldr	r4, [pc, #40]	; (13510 <msg_process+0x60>)
   134e8:	f240 13c1 	movw	r3, #449	; 0x1c1
   134ec:	4622      	mov	r2, r4
   134ee:	4909      	ldr	r1, [pc, #36]	; (13514 <msg_process+0x64>)
   134f0:	4809      	ldr	r0, [pc, #36]	; (13518 <msg_process+0x68>)
   134f2:	f016 fafa 	bl	29aea <assert_print>
   134f6:	4809      	ldr	r0, [pc, #36]	; (1351c <msg_process+0x6c>)
   134f8:	f016 faf7 	bl	29aea <assert_print>
   134fc:	f240 11c1 	movw	r1, #449	; 0x1c1
   13500:	4620      	mov	r0, r4
   13502:	f016 faeb 	bl	29adc <assert_post_action>
		}
	}
}
   13506:	bd38      	pop	{r3, r4, r5, pc}
   13508:	0002f8e0 	.word	0x0002f8e0
   1350c:	0002f8f0 	.word	0x0002f8f0
   13510:	000304ac 	.word	0x000304ac
   13514:	000304dc 	.word	0x000304dc
   13518:	0002fdac 	.word	0x0002fdac
   1351c:	00030500 	.word	0x00030500

00013520 <log_backend_notify>:
 * @param arg Pointer to the argument(s).
 */
static inline void log_backend_notify(const struct log_backend *const backend,
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
   13520:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   13522:	b130      	cbz	r0, 13532 <log_backend_notify+0x12>
   13524:	4603      	mov	r3, r0

	if (backend->api->notify) {
   13526:	6800      	ldr	r0, [r0, #0]
   13528:	6984      	ldr	r4, [r0, #24]
   1352a:	b10c      	cbz	r4, 13530 <log_backend_notify+0x10>
		backend->api->notify(backend, event, arg);
   1352c:	4618      	mov	r0, r3
   1352e:	47a0      	blx	r4
	}
}
   13530:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   13532:	4c06      	ldr	r4, [pc, #24]	; (1354c <log_backend_notify+0x2c>)
   13534:	f240 1361 	movw	r3, #353	; 0x161
   13538:	4622      	mov	r2, r4
   1353a:	4905      	ldr	r1, [pc, #20]	; (13550 <log_backend_notify+0x30>)
   1353c:	4805      	ldr	r0, [pc, #20]	; (13554 <log_backend_notify+0x34>)
   1353e:	f016 fad4 	bl	29aea <assert_print>
   13542:	f240 1161 	movw	r1, #353	; 0x161
   13546:	4620      	mov	r0, r4
   13548:	f016 fac8 	bl	29adc <assert_post_action>
   1354c:	00030448 	.word	0x00030448
   13550:	00030480 	.word	0x00030480
   13554:	0002fdac 	.word	0x0002fdac

00013558 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   13558:	b570      	push	{r4, r5, r6, lr}
   1355a:	4606      	mov	r6, r0
   1355c:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1355e:	4c0f      	ldr	r4, [pc, #60]	; (1359c <log_backend_notify_all+0x44>)
   13560:	e005      	b.n	1356e <log_backend_notify_all+0x16>
		log_backend_notify(backend, event, arg);
   13562:	462a      	mov	r2, r5
   13564:	4631      	mov	r1, r6
   13566:	4620      	mov	r0, r4
   13568:	f7ff ffda 	bl	13520 <log_backend_notify>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1356c:	3410      	adds	r4, #16
   1356e:	4b0c      	ldr	r3, [pc, #48]	; (135a0 <log_backend_notify_all+0x48>)
   13570:	429c      	cmp	r4, r3
   13572:	d803      	bhi.n	1357c <log_backend_notify_all+0x24>
   13574:	4b0a      	ldr	r3, [pc, #40]	; (135a0 <log_backend_notify_all+0x48>)
   13576:	429c      	cmp	r4, r3
   13578:	d3f3      	bcc.n	13562 <log_backend_notify_all+0xa>
	}
}
   1357a:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1357c:	4c09      	ldr	r4, [pc, #36]	; (135a4 <log_backend_notify_all+0x4c>)
   1357e:	f240 333b 	movw	r3, #827	; 0x33b
   13582:	4622      	mov	r2, r4
   13584:	4908      	ldr	r1, [pc, #32]	; (135a8 <log_backend_notify_all+0x50>)
   13586:	4809      	ldr	r0, [pc, #36]	; (135ac <log_backend_notify_all+0x54>)
   13588:	f016 faaf 	bl	29aea <assert_print>
   1358c:	4808      	ldr	r0, [pc, #32]	; (135b0 <log_backend_notify_all+0x58>)
   1358e:	f016 faac 	bl	29aea <assert_print>
   13592:	f240 313b 	movw	r1, #827	; 0x33b
   13596:	4620      	mov	r0, r4
   13598:	f016 faa0 	bl	29adc <assert_post_action>
   1359c:	0002f8e0 	.word	0x0002f8e0
   135a0:	0002f8f0 	.word	0x0002f8f0
   135a4:	000304ac 	.word	0x000304ac
   135a8:	000304dc 	.word	0x000304dc
   135ac:	0002fdac 	.word	0x0002fdac
   135b0:	00030500 	.word	0x00030500

000135b4 <activate_foreach_backend>:
{
   135b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135b8:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   135ba:	4605      	mov	r5, r0
	while (mask_cpy) {
   135bc:	b1ed      	cbz	r5, 135fa <activate_foreach_backend+0x46>
		uint32_t i = __builtin_ctz(mask_cpy);
   135be:	fa95 f6a5 	rbit	r6, r5
   135c2:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   135c6:	4c0e      	ldr	r4, [pc, #56]	; (13600 <activate_foreach_backend+0x4c>)
   135c8:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   135cc:	2301      	movs	r3, #1
   135ce:	40b3      	lsls	r3, r6
   135d0:	ea6f 0803 	mvn.w	r8, r3
   135d4:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   135d8:	7b23      	ldrb	r3, [r4, #12]
   135da:	2b00      	cmp	r3, #0
   135dc:	d0ee      	beq.n	135bc <activate_foreach_backend+0x8>
   135de:	4620      	mov	r0, r4
   135e0:	f7ff fef6 	bl	133d0 <log_backend_is_ready>
   135e4:	2800      	cmp	r0, #0
   135e6:	d1e9      	bne.n	135bc <activate_foreach_backend+0x8>
			mask &= ~BIT(i);
   135e8:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   135ec:	6863      	ldr	r3, [r4, #4]
			log_backend_enable(backend,
   135ee:	2204      	movs	r2, #4
   135f0:	6819      	ldr	r1, [r3, #0]
   135f2:	4620      	mov	r0, r4
   135f4:	f000 fb54 	bl	13ca0 <log_backend_enable>
   135f8:	e7e0      	b.n	135bc <activate_foreach_backend+0x8>
}
   135fa:	4638      	mov	r0, r7
   135fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13600:	0002f8e0 	.word	0x0002f8e0

00013604 <z_log_init>:
{
   13604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13608:	4b2f      	ldr	r3, [pc, #188]	; (136c8 <z_log_init+0xc4>)
   1360a:	4a30      	ldr	r2, [pc, #192]	; (136cc <z_log_init+0xc8>)
   1360c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1360e:	2b9f      	cmp	r3, #159	; 0x9f
   13610:	d80e      	bhi.n	13630 <z_log_init+0x2c>
   13612:	4680      	mov	r8, r0
   13614:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13616:	4b2e      	ldr	r3, [pc, #184]	; (136d0 <z_log_init+0xcc>)
   13618:	e8d3 5fef 	ldaex	r5, [r3]
   1361c:	1c6a      	adds	r2, r5, #1
   1361e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13622:	2900      	cmp	r1, #0
   13624:	d1f8      	bne.n	13618 <z_log_init+0x14>
	if (atomic_inc(&initialized) != 0) {
   13626:	2d00      	cmp	r5, #0
   13628:	d14a      	bne.n	136c0 <z_log_init+0xbc>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1362a:	4c28      	ldr	r4, [pc, #160]	; (136cc <z_log_init+0xc8>)
	int i = 0;
   1362c:	2600      	movs	r6, #0
   1362e:	e014      	b.n	1365a <z_log_init+0x56>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13630:	4c28      	ldr	r4, [pc, #160]	; (136d4 <z_log_init+0xd0>)
   13632:	f240 1315 	movw	r3, #277	; 0x115
   13636:	4622      	mov	r2, r4
   13638:	4927      	ldr	r1, [pc, #156]	; (136d8 <z_log_init+0xd4>)
   1363a:	4828      	ldr	r0, [pc, #160]	; (136dc <z_log_init+0xd8>)
   1363c:	f016 fa55 	bl	29aea <assert_print>
   13640:	f240 1115 	movw	r1, #277	; 0x115
   13644:	4620      	mov	r0, r4
   13646:	f016 fa49 	bl	29adc <assert_post_action>
						   backend->cb->ctx,
   1364a:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   1364c:	2204      	movs	r2, #4
   1364e:	6819      	ldr	r1, [r3, #0]
   13650:	4620      	mov	r0, r4
   13652:	f000 fb25 	bl	13ca0 <log_backend_enable>
			i++;
   13656:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13658:	3410      	adds	r4, #16
   1365a:	4b1b      	ldr	r3, [pc, #108]	; (136c8 <z_log_init+0xc4>)
   1365c:	429c      	cmp	r4, r3
   1365e:	d811      	bhi.n	13684 <z_log_init+0x80>
   13660:	4b19      	ldr	r3, [pc, #100]	; (136c8 <z_log_init+0xc4>)
   13662:	429c      	cmp	r4, r3
   13664:	d21e      	bcs.n	136a4 <z_log_init+0xa0>
		if (backend->autostart) {
   13666:	7b23      	ldrb	r3, [r4, #12]
   13668:	2b00      	cmp	r3, #0
   1366a:	d0f5      	beq.n	13658 <z_log_init+0x54>
			log_backend_init(backend);
   1366c:	4620      	mov	r0, r4
   1366e:	f7ff fe97 	bl	133a0 <log_backend_init>
			if (log_backend_is_ready(backend) == 0) {
   13672:	4620      	mov	r0, r4
   13674:	f7ff feac 	bl	133d0 <log_backend_is_ready>
   13678:	2800      	cmp	r0, #0
   1367a:	d0e6      	beq.n	1364a <z_log_init+0x46>
				mask |= BIT(i);
   1367c:	2301      	movs	r3, #1
   1367e:	40b3      	lsls	r3, r6
   13680:	431d      	orrs	r5, r3
   13682:	e7e8      	b.n	13656 <z_log_init+0x52>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13684:	4c13      	ldr	r4, [pc, #76]	; (136d4 <z_log_init+0xd0>)
   13686:	f44f 7391 	mov.w	r3, #290	; 0x122
   1368a:	4622      	mov	r2, r4
   1368c:	4914      	ldr	r1, [pc, #80]	; (136e0 <z_log_init+0xdc>)
   1368e:	4813      	ldr	r0, [pc, #76]	; (136dc <z_log_init+0xd8>)
   13690:	f016 fa2b 	bl	29aea <assert_print>
   13694:	4813      	ldr	r0, [pc, #76]	; (136e4 <z_log_init+0xe0>)
   13696:	f016 fa28 	bl	29aea <assert_print>
   1369a:	f44f 7191 	mov.w	r1, #290	; 0x122
   1369e:	4620      	mov	r0, r4
   136a0:	f016 fa1c 	bl	29adc <assert_post_action>
	if (blocking) {
   136a4:	f1b8 0f00 	cmp.w	r8, #0
   136a8:	d00b      	beq.n	136c2 <z_log_init+0xbe>
		while (mask) {
   136aa:	b155      	cbz	r5, 136c2 <z_log_init+0xbe>
			mask = activate_foreach_backend(mask);
   136ac:	4628      	mov	r0, r5
   136ae:	f7ff ff81 	bl	135b4 <activate_foreach_backend>
   136b2:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   136b4:	2f00      	cmp	r7, #0
   136b6:	d0f8      	beq.n	136aa <z_log_init+0xa6>
				k_msleep(10);
   136b8:	200a      	movs	r0, #10
   136ba:	f016 fb76 	bl	29daa <k_msleep>
   136be:	e7f4      	b.n	136aa <z_log_init+0xa6>
		return 0;
   136c0:	2500      	movs	r5, #0
}
   136c2:	4628      	mov	r0, r5
   136c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136c8:	0002f8f0 	.word	0x0002f8f0
   136cc:	0002f8e0 	.word	0x0002f8e0
   136d0:	20009798 	.word	0x20009798
   136d4:	000304ac 	.word	0x000304ac
   136d8:	00030520 	.word	0x00030520
   136dc:	0002fdac 	.word	0x0002fdac
   136e0:	000304dc 	.word	0x000304dc
   136e4:	00030500 	.word	0x00030500

000136e8 <thread_set>:
{
   136e8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   136ea:	4b06      	ldr	r3, [pc, #24]	; (13704 <thread_set+0x1c>)
   136ec:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   136ee:	b118      	cbz	r0, 136f8 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   136f0:	4b05      	ldr	r3, [pc, #20]	; (13708 <thread_set+0x20>)
   136f2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   136f4:	2b09      	cmp	r3, #9
   136f6:	dc00      	bgt.n	136fa <thread_set+0x12>
}
   136f8:	bd08      	pop	{r3, pc}
   136fa:	4804      	ldr	r0, [pc, #16]	; (1370c <thread_set+0x24>)
   136fc:	f012 f8e8 	bl	258d0 <z_impl_k_sem_give>
}
   13700:	e7fa      	b.n	136f8 <thread_set+0x10>
   13702:	bf00      	nop
   13704:	2000978c 	.word	0x2000978c
   13708:	20009794 	.word	0x20009794
   1370c:	2000858c 	.word	0x2000858c

00013710 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   13710:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   13712:	4802      	ldr	r0, [pc, #8]	; (1371c <log_process_thread_timer_expiry_fn+0xc>)
   13714:	f012 f8dc 	bl	258d0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   13718:	bd08      	pop	{r3, pc}
   1371a:	bf00      	nop
   1371c:	2000858c 	.word	0x2000858c

00013720 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   13720:	b530      	push	{r4, r5, lr}
   13722:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13724:	2200      	movs	r2, #0
   13726:	490f      	ldr	r1, [pc, #60]	; (13764 <enable_logger+0x44>)
   13728:	480f      	ldr	r0, [pc, #60]	; (13768 <enable_logger+0x48>)
   1372a:	f01b fd7d 	bl	2f228 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1372e:	4d0f      	ldr	r5, [pc, #60]	; (1376c <enable_logger+0x4c>)
   13730:	2200      	movs	r2, #0
   13732:	2300      	movs	r3, #0
   13734:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13738:	2400      	movs	r4, #0
   1373a:	9404      	str	r4, [sp, #16]
   1373c:	230e      	movs	r3, #14
   1373e:	9303      	str	r3, [sp, #12]
   13740:	9402      	str	r4, [sp, #8]
   13742:	9401      	str	r4, [sp, #4]
   13744:	9400      	str	r4, [sp, #0]
   13746:	4b0a      	ldr	r3, [pc, #40]	; (13770 <enable_logger+0x50>)
   13748:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1374c:	4909      	ldr	r1, [pc, #36]	; (13774 <enable_logger+0x54>)
   1374e:	4628      	mov	r0, r5
   13750:	f011 fcb8 	bl	250c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13754:	4908      	ldr	r1, [pc, #32]	; (13778 <enable_logger+0x58>)
   13756:	4628      	mov	r0, r5
   13758:	f011 fb4e 	bl	24df8 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1375c:	4620      	mov	r0, r4
   1375e:	b009      	add	sp, #36	; 0x24
   13760:	bd30      	pop	{r4, r5, pc}
   13762:	bf00      	nop
   13764:	00013711 	.word	0x00013711
   13768:	20008c08 	.word	0x20008c08
   1376c:	20008748 	.word	0x20008748
   13770:	00013b65 	.word	0x00013b65
   13774:	20009d58 	.word	0x20009d58
   13778:	00030544 	.word	0x00030544

0001377c <log_format_func_t_get>:
}
   1377c:	4b01      	ldr	r3, [pc, #4]	; (13784 <log_format_func_t_get+0x8>)
   1377e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13782:	4770      	bx	lr
   13784:	0003057c 	.word	0x0003057c

00013788 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   13788:	b148      	cbz	r0, 1379e <log_set_timestamp_func+0x16>
{
   1378a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   1378c:	4a05      	ldr	r2, [pc, #20]	; (137a4 <log_set_timestamp_func+0x1c>)
   1378e:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   13790:	4b05      	ldr	r3, [pc, #20]	; (137a8 <log_set_timestamp_func+0x20>)
   13792:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   13794:	4608      	mov	r0, r1
   13796:	f000 fd45 	bl	14224 <log_output_timestamp_freq_set>
	return 0;
   1379a:	2000      	movs	r0, #0
}
   1379c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1379e:	f06f 0015 	mvn.w	r0, #21
}
   137a2:	4770      	bx	lr
   137a4:	200081dc 	.word	0x200081dc
   137a8:	20009788 	.word	0x20009788

000137ac <z_log_notify_backend_enabled>:
{
   137ac:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   137ae:	4b05      	ldr	r3, [pc, #20]	; (137c4 <z_log_notify_backend_enabled+0x18>)
   137b0:	781b      	ldrb	r3, [r3, #0]
   137b2:	b11b      	cbz	r3, 137bc <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   137b4:	4b03      	ldr	r3, [pc, #12]	; (137c4 <z_log_notify_backend_enabled+0x18>)
   137b6:	2201      	movs	r2, #1
   137b8:	701a      	strb	r2, [r3, #0]
}
   137ba:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   137bc:	4802      	ldr	r0, [pc, #8]	; (137c8 <z_log_notify_backend_enabled+0x1c>)
   137be:	f012 f887 	bl	258d0 <z_impl_k_sem_give>
}
   137c2:	e7f7      	b.n	137b4 <z_log_notify_backend_enabled+0x8>
   137c4:	20009d4e 	.word	0x20009d4e
   137c8:	2000858c 	.word	0x2000858c

000137cc <z_log_dropped>:
   137cc:	4b09      	ldr	r3, [pc, #36]	; (137f4 <z_log_dropped+0x28>)
   137ce:	e8d3 1fef 	ldaex	r1, [r3]
   137d2:	3101      	adds	r1, #1
   137d4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   137d8:	2a00      	cmp	r2, #0
   137da:	d1f8      	bne.n	137ce <z_log_dropped+0x2>
	if (buffered) {
   137dc:	b900      	cbnz	r0, 137e0 <z_log_dropped+0x14>
}
   137de:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   137e0:	4b05      	ldr	r3, [pc, #20]	; (137f8 <z_log_dropped+0x2c>)
   137e2:	e8d3 1fef 	ldaex	r1, [r3]
   137e6:	3901      	subs	r1, #1
   137e8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   137ec:	2a00      	cmp	r2, #0
   137ee:	d0f6      	beq.n	137de <z_log_dropped+0x12>
   137f0:	e7f7      	b.n	137e2 <z_log_dropped+0x16>
   137f2:	bf00      	nop
   137f4:	20009790 	.word	0x20009790
   137f8:	20009794 	.word	0x20009794

000137fc <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   137fc:	4b04      	ldr	r3, [pc, #16]	; (13810 <z_log_dropped_read_and_clear+0x14>)
}
   137fe:	2000      	movs	r0, #0
   13800:	4601      	mov	r1, r0
   13802:	e8d3 0fef 	ldaex	r0, [r3]
   13806:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1380a:	2a00      	cmp	r2, #0
   1380c:	d1f9      	bne.n	13802 <z_log_dropped_read_and_clear+0x6>
   1380e:	4770      	bx	lr
   13810:	20009790 	.word	0x20009790

00013814 <dropped_notify>:
{
   13814:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13816:	f7ff fff1 	bl	137fc <z_log_dropped_read_and_clear>
   1381a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1381c:	4c11      	ldr	r4, [pc, #68]	; (13864 <dropped_notify+0x50>)
   1381e:	e000      	b.n	13822 <dropped_notify+0xe>
   13820:	3410      	adds	r4, #16
   13822:	4b11      	ldr	r3, [pc, #68]	; (13868 <dropped_notify+0x54>)
   13824:	429c      	cmp	r4, r3
   13826:	d80c      	bhi.n	13842 <dropped_notify+0x2e>
   13828:	4b0f      	ldr	r3, [pc, #60]	; (13868 <dropped_notify+0x54>)
   1382a:	429c      	cmp	r4, r3
   1382c:	d219      	bcs.n	13862 <dropped_notify+0x4e>
		if (log_backend_is_active(backend)) {
   1382e:	4620      	mov	r0, r4
   13830:	f7ff fd9e 	bl	13370 <log_backend_is_active>
   13834:	2800      	cmp	r0, #0
   13836:	d0f3      	beq.n	13820 <dropped_notify+0xc>
			log_backend_dropped(backend, dropped);
   13838:	4629      	mov	r1, r5
   1383a:	4620      	mov	r0, r4
   1383c:	f7ff fdfa 	bl	13434 <log_backend_dropped>
   13840:	e7ee      	b.n	13820 <dropped_notify+0xc>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13842:	4c0a      	ldr	r4, [pc, #40]	; (1386c <dropped_notify+0x58>)
   13844:	f240 13cd 	movw	r3, #461	; 0x1cd
   13848:	4622      	mov	r2, r4
   1384a:	4909      	ldr	r1, [pc, #36]	; (13870 <dropped_notify+0x5c>)
   1384c:	4809      	ldr	r0, [pc, #36]	; (13874 <dropped_notify+0x60>)
   1384e:	f016 f94c 	bl	29aea <assert_print>
   13852:	4809      	ldr	r0, [pc, #36]	; (13878 <dropped_notify+0x64>)
   13854:	f016 f949 	bl	29aea <assert_print>
   13858:	f240 11cd 	movw	r1, #461	; 0x1cd
   1385c:	4620      	mov	r0, r4
   1385e:	f016 f93d 	bl	29adc <assert_post_action>
}
   13862:	bd38      	pop	{r3, r4, r5, pc}
   13864:	0002f8e0 	.word	0x0002f8e0
   13868:	0002f8f0 	.word	0x0002f8f0
   1386c:	000304ac 	.word	0x000304ac
   13870:	000304dc 	.word	0x000304dc
   13874:	0002fdac 	.word	0x0002fdac
   13878:	00030500 	.word	0x00030500

0001387c <z_log_dropped_pending>:
	return dropped_cnt > 0;
   1387c:	4b03      	ldr	r3, [pc, #12]	; (1388c <z_log_dropped_pending+0x10>)
   1387e:	6818      	ldr	r0, [r3, #0]
}
   13880:	2800      	cmp	r0, #0
   13882:	bfd4      	ite	le
   13884:	2000      	movle	r0, #0
   13886:	2001      	movgt	r0, #1
   13888:	4770      	bx	lr
   1388a:	bf00      	nop
   1388c:	20009790 	.word	0x20009790

00013890 <z_log_msg_init>:
{
   13890:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13892:	4c04      	ldr	r4, [pc, #16]	; (138a4 <z_log_msg_init+0x14>)
   13894:	4904      	ldr	r1, [pc, #16]	; (138a8 <z_log_msg_init+0x18>)
   13896:	4620      	mov	r0, r4
   13898:	f7ff f86c 	bl	12974 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   1389c:	4b03      	ldr	r3, [pc, #12]	; (138ac <z_log_msg_init+0x1c>)
   1389e:	601c      	str	r4, [r3, #0]
}
   138a0:	bd10      	pop	{r4, pc}
   138a2:	bf00      	nop
   138a4:	2000844c 	.word	0x2000844c
   138a8:	00030568 	.word	0x00030568
   138ac:	20009784 	.word	0x20009784

000138b0 <log_core_init>:
{
   138b0:	b508      	push	{r3, lr}
	panic_mode = false;
   138b2:	2300      	movs	r3, #0
   138b4:	4a05      	ldr	r2, [pc, #20]	; (138cc <log_core_init+0x1c>)
   138b6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   138b8:	4a05      	ldr	r2, [pc, #20]	; (138d0 <log_core_init+0x20>)
   138ba:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   138bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   138c0:	4804      	ldr	r0, [pc, #16]	; (138d4 <log_core_init+0x24>)
   138c2:	f7ff ff61 	bl	13788 <log_set_timestamp_func>
		z_log_msg_init();
   138c6:	f7ff ffe3 	bl	13890 <z_log_msg_init>
}
   138ca:	bd08      	pop	{r3, pc}
   138cc:	20009d4f 	.word	0x20009d4f
   138d0:	20009790 	.word	0x20009790
   138d4:	00029da3 	.word	0x00029da3

000138d8 <z_log_msg_alloc>:
{
   138d8:	b508      	push	{r3, lr}
   138da:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   138dc:	4801      	ldr	r0, [pc, #4]	; (138e4 <z_log_msg_alloc+0xc>)
   138de:	f016 fa7a 	bl	29dd6 <msg_alloc>
}
   138e2:	bd08      	pop	{r3, pc}
   138e4:	2000844c 	.word	0x2000844c

000138e8 <z_log_msg_local_claim>:
{
   138e8:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   138ea:	4802      	ldr	r0, [pc, #8]	; (138f4 <z_log_msg_local_claim+0xc>)
   138ec:	f7ff f9d4 	bl	12c98 <mpsc_pbuf_claim>
}
   138f0:	bd08      	pop	{r3, pc}
   138f2:	bf00      	nop
   138f4:	2000844c 	.word	0x2000844c

000138f8 <z_log_msg_free>:
{
   138f8:	b508      	push	{r3, lr}
   138fa:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   138fc:	4b02      	ldr	r3, [pc, #8]	; (13908 <z_log_msg_free+0x10>)
   138fe:	6818      	ldr	r0, [r3, #0]
   13900:	f016 fa6f 	bl	29de2 <msg_free>
}
   13904:	bd08      	pop	{r3, pc}
   13906:	bf00      	nop
   13908:	20009784 	.word	0x20009784

0001390c <z_log_msg_pending>:
{
   1390c:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   1390e:	4802      	ldr	r0, [pc, #8]	; (13918 <z_log_msg_pending+0xc>)
   13910:	f016 fa6b 	bl	29dea <msg_pending>
}
   13914:	bd08      	pop	{r3, pc}
   13916:	bf00      	nop
   13918:	2000844c 	.word	0x2000844c

0001391c <z_impl_log_process>:
{
   1391c:	b510      	push	{r4, lr}
   1391e:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   13920:	2200      	movs	r2, #0
   13922:	2300      	movs	r3, #0
   13924:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   13928:	4b26      	ldr	r3, [pc, #152]	; (139c4 <z_impl_log_process+0xa8>)
   1392a:	7818      	ldrb	r0, [r3, #0]
   1392c:	b908      	cbnz	r0, 13932 <z_impl_log_process+0x16>
}
   1392e:	b002      	add	sp, #8
   13930:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   13932:	4668      	mov	r0, sp
   13934:	f016 fa62 	bl	29dfc <z_log_msg_claim>
	if (msg) {
   13938:	4604      	mov	r4, r0
   1393a:	b168      	cbz	r0, 13958 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1393c:	4b22      	ldr	r3, [pc, #136]	; (139c8 <z_impl_log_process+0xac>)
   1393e:	e8d3 1fef 	ldaex	r1, [r3]
   13942:	3901      	subs	r1, #1
   13944:	e8c3 1fe2 	stlex	r2, r1, [r3]
   13948:	2a00      	cmp	r2, #0
   1394a:	d1f8      	bne.n	1393e <z_impl_log_process+0x22>
		msg_process(msg);
   1394c:	4620      	mov	r0, r4
   1394e:	f7ff fdaf 	bl	134b0 <msg_process>
		z_log_msg_free(msg);
   13952:	4620      	mov	r0, r4
   13954:	f7ff ffd0 	bl	138f8 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   13958:	f7ff ff90 	bl	1387c <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   1395c:	b958      	cbnz	r0, 13976 <z_impl_log_process+0x5a>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   1395e:	4a1b      	ldr	r2, [pc, #108]	; (139cc <z_impl_log_process+0xb0>)
   13960:	6813      	ldr	r3, [r2, #0]
   13962:	6851      	ldr	r1, [r2, #4]
   13964:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13968:	f141 0100 	adc.w	r1, r1, #0
   1396c:	6013      	str	r3, [r2, #0]
   1396e:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   13970:	f7ff ffcc 	bl	1390c <z_log_msg_pending>
   13974:	e7db      	b.n	1392e <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   13976:	f01b fc14 	bl	2f1a2 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1397a:	014a      	lsls	r2, r1, #5
   1397c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   13980:	0143      	lsls	r3, r0, #5
   13982:	1a1b      	subs	r3, r3, r0
   13984:	eb62 0201 	sbc.w	r2, r2, r1
   13988:	0092      	lsls	r2, r2, #2
   1398a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1398e:	009b      	lsls	r3, r3, #2
   13990:	181b      	adds	r3, r3, r0
   13992:	eb42 0201 	adc.w	r2, r2, r1
   13996:	00d2      	lsls	r2, r2, #3
   13998:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   1399c:	f3c3 3310 	ubfx	r3, r3, #12, #17
   139a0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   139a4:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   139a6:	4809      	ldr	r0, [pc, #36]	; (139cc <z_impl_log_process+0xb0>)
   139a8:	6801      	ldr	r1, [r0, #0]
   139aa:	6840      	ldr	r0, [r0, #4]
   139ac:	1a5b      	subs	r3, r3, r1
   139ae:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   139b2:	f240 31e9 	movw	r1, #1001	; 0x3e9
   139b6:	428b      	cmp	r3, r1
   139b8:	f172 0200 	sbcs.w	r2, r2, #0
   139bc:	d3cf      	bcc.n	1395e <z_impl_log_process+0x42>
				dropped_notify();
   139be:	f7ff ff29 	bl	13814 <dropped_notify>
			if (unordered_pend) {
   139c2:	e7cc      	b.n	1395e <z_impl_log_process+0x42>
   139c4:	20009d4e 	.word	0x20009d4e
   139c8:	20009794 	.word	0x20009794
   139cc:	20008c00 	.word	0x20008c00

000139d0 <z_impl_log_panic>:
	if (panic_mode) {
   139d0:	4b19      	ldr	r3, [pc, #100]	; (13a38 <z_impl_log_panic+0x68>)
   139d2:	781b      	ldrb	r3, [r3, #0]
   139d4:	b103      	cbz	r3, 139d8 <z_impl_log_panic+0x8>
   139d6:	4770      	bx	lr
{
   139d8:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   139da:	2100      	movs	r1, #0
   139dc:	2001      	movs	r0, #1
   139de:	f7ff fe11 	bl	13604 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   139e2:	4c16      	ldr	r4, [pc, #88]	; (13a3c <z_impl_log_panic+0x6c>)
   139e4:	e000      	b.n	139e8 <z_impl_log_panic+0x18>
   139e6:	3410      	adds	r4, #16
   139e8:	4b15      	ldr	r3, [pc, #84]	; (13a40 <z_impl_log_panic+0x70>)
   139ea:	429c      	cmp	r4, r3
   139ec:	d80b      	bhi.n	13a06 <z_impl_log_panic+0x36>
   139ee:	4b14      	ldr	r3, [pc, #80]	; (13a40 <z_impl_log_panic+0x70>)
   139f0:	429c      	cmp	r4, r3
   139f2:	d218      	bcs.n	13a26 <z_impl_log_panic+0x56>
		if (log_backend_is_active(backend)) {
   139f4:	4620      	mov	r0, r4
   139f6:	f7ff fcbb 	bl	13370 <log_backend_is_active>
   139fa:	2800      	cmp	r0, #0
   139fc:	d0f3      	beq.n	139e6 <z_impl_log_panic+0x16>
			log_backend_panic(backend);
   139fe:	4620      	mov	r0, r4
   13a00:	f7ff fd00 	bl	13404 <log_backend_panic>
   13a04:	e7ef      	b.n	139e6 <z_impl_log_panic+0x16>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a06:	4c0f      	ldr	r4, [pc, #60]	; (13a44 <z_impl_log_panic+0x74>)
   13a08:	f44f 73c2 	mov.w	r3, #388	; 0x184
   13a0c:	4622      	mov	r2, r4
   13a0e:	490e      	ldr	r1, [pc, #56]	; (13a48 <z_impl_log_panic+0x78>)
   13a10:	480e      	ldr	r0, [pc, #56]	; (13a4c <z_impl_log_panic+0x7c>)
   13a12:	f016 f86a 	bl	29aea <assert_print>
   13a16:	480e      	ldr	r0, [pc, #56]	; (13a50 <z_impl_log_panic+0x80>)
   13a18:	f016 f867 	bl	29aea <assert_print>
   13a1c:	f44f 71c2 	mov.w	r1, #388	; 0x184
   13a20:	4620      	mov	r0, r4
   13a22:	f016 f85b 	bl	29adc <assert_post_action>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13a26:	f7ff ff79 	bl	1391c <z_impl_log_process>
		while (log_process() == true) {
   13a2a:	2800      	cmp	r0, #0
   13a2c:	d1fb      	bne.n	13a26 <z_impl_log_panic+0x56>
	panic_mode = true;
   13a2e:	4b02      	ldr	r3, [pc, #8]	; (13a38 <z_impl_log_panic+0x68>)
   13a30:	2201      	movs	r2, #1
   13a32:	701a      	strb	r2, [r3, #0]
}
   13a34:	bd10      	pop	{r4, pc}
   13a36:	bf00      	nop
   13a38:	20009d4f 	.word	0x20009d4f
   13a3c:	0002f8e0 	.word	0x0002f8e0
   13a40:	0002f8f0 	.word	0x0002f8f0
   13a44:	000304ac 	.word	0x000304ac
   13a48:	000304dc 	.word	0x000304dc
   13a4c:	0002fdac 	.word	0x0002fdac
   13a50:	00030500 	.word	0x00030500

00013a54 <z_log_msg_post_finalize>:
{
   13a54:	b530      	push	{r4, r5, lr}
   13a56:	b083      	sub	sp, #12
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13a58:	4b2e      	ldr	r3, [pc, #184]	; (13b14 <z_log_msg_post_finalize+0xc0>)
   13a5a:	e8d3 2fef 	ldaex	r2, [r3]
   13a5e:	1c51      	adds	r1, r2, #1
   13a60:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13a64:	2800      	cmp	r0, #0
   13a66:	d1f8      	bne.n	13a5a <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
   13a68:	4b2b      	ldr	r3, [pc, #172]	; (13b18 <z_log_msg_post_finalize+0xc4>)
   13a6a:	781b      	ldrb	r3, [r3, #0]
   13a6c:	b96b      	cbnz	r3, 13a8a <z_log_msg_post_finalize+0x36>
	} else if (proc_tid != NULL) {
   13a6e:	4b2b      	ldr	r3, [pc, #172]	; (13b1c <z_log_msg_post_finalize+0xc8>)
   13a70:	681b      	ldr	r3, [r3, #0]
   13a72:	b323      	cbz	r3, 13abe <z_log_msg_post_finalize+0x6a>
		if (cnt == 0) {
   13a74:	2a00      	cmp	r2, #0
   13a76:	d042      	beq.n	13afe <z_log_msg_post_finalize+0xaa>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13a78:	2a0a      	cmp	r2, #10
   13a7a:	d120      	bne.n	13abe <z_log_msg_post_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   13a7c:	4828      	ldr	r0, [pc, #160]	; (13b20 <z_log_msg_post_finalize+0xcc>)
   13a7e:	f01b fbdf 	bl	2f240 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13a82:	4828      	ldr	r0, [pc, #160]	; (13b24 <z_log_msg_post_finalize+0xd0>)
   13a84:	f011 ff24 	bl	258d0 <z_impl_k_sem_give>
}
   13a88:	e019      	b.n	13abe <z_log_msg_post_finalize+0x6a>
	__asm__ volatile(
   13a8a:	f04f 0320 	mov.w	r3, #32
   13a8e:	f3ef 8411 	mrs	r4, BASEPRI
   13a92:	f383 8812 	msr	BASEPRI_MAX, r3
   13a96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13a9a:	4823      	ldr	r0, [pc, #140]	; (13b28 <z_log_msg_post_finalize+0xd4>)
   13a9c:	f011 f9cc 	bl	24e38 <z_spin_lock_valid>
   13aa0:	b178      	cbz	r0, 13ac2 <z_log_msg_post_finalize+0x6e>
	z_spin_lock_set_owner(l);
   13aa2:	4d21      	ldr	r5, [pc, #132]	; (13b28 <z_log_msg_post_finalize+0xd4>)
   13aa4:	4628      	mov	r0, r5
   13aa6:	f011 f9e7 	bl	24e78 <z_spin_lock_set_owner>
   13aaa:	f7ff ff37 	bl	1391c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13aae:	4628      	mov	r0, r5
   13ab0:	f011 f9d2 	bl	24e58 <z_spin_unlock_valid>
   13ab4:	b1a0      	cbz	r0, 13ae0 <z_log_msg_post_finalize+0x8c>
	__asm__ volatile(
   13ab6:	f384 8811 	msr	BASEPRI, r4
   13aba:	f3bf 8f6f 	isb	sy
   13abe:	b003      	add	sp, #12
   13ac0:	bd30      	pop	{r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13ac2:	4c1a      	ldr	r4, [pc, #104]	; (13b2c <z_log_msg_post_finalize+0xd8>)
   13ac4:	2394      	movs	r3, #148	; 0x94
   13ac6:	4622      	mov	r2, r4
   13ac8:	4919      	ldr	r1, [pc, #100]	; (13b30 <z_log_msg_post_finalize+0xdc>)
   13aca:	481a      	ldr	r0, [pc, #104]	; (13b34 <z_log_msg_post_finalize+0xe0>)
   13acc:	f016 f80d 	bl	29aea <assert_print>
   13ad0:	4915      	ldr	r1, [pc, #84]	; (13b28 <z_log_msg_post_finalize+0xd4>)
   13ad2:	4819      	ldr	r0, [pc, #100]	; (13b38 <z_log_msg_post_finalize+0xe4>)
   13ad4:	f016 f809 	bl	29aea <assert_print>
   13ad8:	2194      	movs	r1, #148	; 0x94
   13ada:	4620      	mov	r0, r4
   13adc:	f015 fffe 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13ae0:	4c12      	ldr	r4, [pc, #72]	; (13b2c <z_log_msg_post_finalize+0xd8>)
   13ae2:	23c2      	movs	r3, #194	; 0xc2
   13ae4:	4622      	mov	r2, r4
   13ae6:	4915      	ldr	r1, [pc, #84]	; (13b3c <z_log_msg_post_finalize+0xe8>)
   13ae8:	4812      	ldr	r0, [pc, #72]	; (13b34 <z_log_msg_post_finalize+0xe0>)
   13aea:	f015 fffe 	bl	29aea <assert_print>
   13aee:	4629      	mov	r1, r5
   13af0:	4813      	ldr	r0, [pc, #76]	; (13b40 <z_log_msg_post_finalize+0xec>)
   13af2:	f015 fffa 	bl	29aea <assert_print>
   13af6:	21c2      	movs	r1, #194	; 0xc2
   13af8:	4620      	mov	r0, r4
   13afa:	f015 ffef 	bl	29adc <assert_post_action>
	z_impl_k_timer_start(timer, duration, period);
   13afe:	2200      	movs	r2, #0
   13b00:	2300      	movs	r3, #0
   13b02:	e9cd 2300 	strd	r2, r3, [sp]
   13b06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13b0a:	2300      	movs	r3, #0
   13b0c:	4804      	ldr	r0, [pc, #16]	; (13b20 <z_log_msg_post_finalize+0xcc>)
   13b0e:	f014 fdb1 	bl	28674 <z_impl_k_timer_start>
   13b12:	e7d4      	b.n	13abe <z_log_msg_post_finalize+0x6a>
   13b14:	20009794 	.word	0x20009794
   13b18:	20009d4f 	.word	0x20009d4f
   13b1c:	2000978c 	.word	0x2000978c
   13b20:	20008c08 	.word	0x20008c08
   13b24:	2000858c 	.word	0x2000858c
   13b28:	20009780 	.word	0x20009780
   13b2c:	000301b0 	.word	0x000301b0
   13b30:	00030210 	.word	0x00030210
   13b34:	0002fdac 	.word	0x0002fdac
   13b38:	00030228 	.word	0x00030228
   13b3c:	000301e0 	.word	0x000301e0
   13b40:	000301f8 	.word	0x000301f8

00013b44 <z_log_msg_commit>:
{
   13b44:	b510      	push	{r4, lr}
   13b46:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13b48:	4b04      	ldr	r3, [pc, #16]	; (13b5c <z_log_msg_commit+0x18>)
   13b4a:	681b      	ldr	r3, [r3, #0]
   13b4c:	4798      	blx	r3
   13b4e:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   13b50:	4621      	mov	r1, r4
   13b52:	4803      	ldr	r0, [pc, #12]	; (13b60 <z_log_msg_commit+0x1c>)
   13b54:	f016 f956 	bl	29e04 <msg_commit>
}
   13b58:	bd10      	pop	{r4, pc}
   13b5a:	bf00      	nop
   13b5c:	200081dc 	.word	0x200081dc
   13b60:	2000844c 	.word	0x2000844c

00013b64 <log_process_thread_func>:
{
   13b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b68:	4a22      	ldr	r2, [pc, #136]	; (13bf4 <log_process_thread_func+0x90>)
   13b6a:	4b23      	ldr	r3, [pc, #140]	; (13bf8 <log_process_thread_func+0x94>)
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13b6c:	1a9b      	subs	r3, r3, r2
   13b6e:	091b      	lsrs	r3, r3, #4
   13b70:	d00e      	beq.n	13b90 <log_process_thread_func+0x2c>
	uint32_t activate_mask = z_log_init(false, false);
   13b72:	2100      	movs	r1, #0
   13b74:	4608      	mov	r0, r1
   13b76:	f7ff fd45 	bl	13604 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13b7a:	4680      	mov	r8, r0
   13b7c:	b1a8      	cbz	r0, 13baa <log_process_thread_func+0x46>
   13b7e:	f240 6667 	movw	r6, #1639	; 0x667
   13b82:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   13b84:	f013 ffe2 	bl	27b4c <z_impl_z_current_get>
	thread_set(k_current_get());
   13b88:	f7ff fdae 	bl	136e8 <thread_set>
	bool processed_any = false;
   13b8c:	2500      	movs	r5, #0
   13b8e:	e025      	b.n	13bdc <log_process_thread_func+0x78>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13b90:	4c1a      	ldr	r4, [pc, #104]	; (13bfc <log_process_thread_func+0x98>)
   13b92:	f240 3347 	movw	r3, #839	; 0x347
   13b96:	4622      	mov	r2, r4
   13b98:	4919      	ldr	r1, [pc, #100]	; (13c00 <log_process_thread_func+0x9c>)
   13b9a:	481a      	ldr	r0, [pc, #104]	; (13c04 <log_process_thread_func+0xa0>)
   13b9c:	f015 ffa5 	bl	29aea <assert_print>
   13ba0:	f240 3147 	movw	r1, #839	; 0x347
   13ba4:	4620      	mov	r0, r4
   13ba6:	f015 ff99 	bl	29adc <assert_post_action>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13baa:	f04f 36ff 	mov.w	r6, #4294967295
   13bae:	f04f 37ff 	mov.w	r7, #4294967295
   13bb2:	e7e7      	b.n	13b84 <log_process_thread_func+0x20>
			activate_mask = activate_foreach_backend(activate_mask);
   13bb4:	4640      	mov	r0, r8
   13bb6:	f7ff fcfd 	bl	135b4 <activate_foreach_backend>
			if (!activate_mask) {
   13bba:	4680      	mov	r8, r0
   13bbc:	b988      	cbnz	r0, 13be2 <log_process_thread_func+0x7e>
				timeout = K_FOREVER;
   13bbe:	f04f 36ff 	mov.w	r6, #4294967295
   13bc2:	f04f 37ff 	mov.w	r7, #4294967295
   13bc6:	e00c      	b.n	13be2 <log_process_thread_func+0x7e>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   13bc8:	2100      	movs	r1, #0
   13bca:	4608      	mov	r0, r1
   13bcc:	f7ff fcc4 	bl	13558 <log_backend_notify_all>
	return z_impl_k_sem_take(sem, timeout);
   13bd0:	4632      	mov	r2, r6
   13bd2:	463b      	mov	r3, r7
   13bd4:	480c      	ldr	r0, [pc, #48]	; (13c08 <log_process_thread_func+0xa4>)
   13bd6:	f011 fec3 	bl	25960 <z_impl_k_sem_take>
{
   13bda:	4625      	mov	r5, r4
		if (activate_mask) {
   13bdc:	f1b8 0f00 	cmp.w	r8, #0
   13be0:	d1e8      	bne.n	13bb4 <log_process_thread_func+0x50>
   13be2:	f7ff fe9b 	bl	1391c <z_impl_log_process>
		if (log_process() == false) {
   13be6:	4604      	mov	r4, r0
   13be8:	2800      	cmp	r0, #0
   13bea:	d1f6      	bne.n	13bda <log_process_thread_func+0x76>
			if (processed_any) {
   13bec:	2d00      	cmp	r5, #0
   13bee:	d1eb      	bne.n	13bc8 <log_process_thread_func+0x64>
   13bf0:	462c      	mov	r4, r5
   13bf2:	e7ed      	b.n	13bd0 <log_process_thread_func+0x6c>
   13bf4:	0002f8e0 	.word	0x0002f8e0
   13bf8:	0002f8f0 	.word	0x0002f8f0
   13bfc:	000304ac 	.word	0x000304ac
   13c00:	0003054c 	.word	0x0003054c
   13c04:	0002fdac 	.word	0x0002fdac
   13c08:	2000858c 	.word	0x2000858c

00013c0c <log_backend_id_set>:
	__ASSERT_NO_MSG(backend != NULL);
   13c0c:	b110      	cbz	r0, 13c14 <log_backend_id_set+0x8>
	backend->cb->id = id;
   13c0e:	6843      	ldr	r3, [r0, #4]
   13c10:	7119      	strb	r1, [r3, #4]
   13c12:	4770      	bx	lr
{
   13c14:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   13c16:	4c05      	ldr	r4, [pc, #20]	; (13c2c <log_backend_id_set+0x20>)
   13c18:	23de      	movs	r3, #222	; 0xde
   13c1a:	4622      	mov	r2, r4
   13c1c:	4904      	ldr	r1, [pc, #16]	; (13c30 <log_backend_id_set+0x24>)
   13c1e:	4805      	ldr	r0, [pc, #20]	; (13c34 <log_backend_id_set+0x28>)
   13c20:	f015 ff63 	bl	29aea <assert_print>
   13c24:	21de      	movs	r1, #222	; 0xde
   13c26:	4620      	mov	r0, r4
   13c28:	f015 ff58 	bl	29adc <assert_post_action>
   13c2c:	00030448 	.word	0x00030448
   13c30:	00030480 	.word	0x00030480
   13c34:	0002fdac 	.word	0x0002fdac

00013c38 <log_backend_activate>:
	__ASSERT_NO_MSG(backend != NULL);
   13c38:	b128      	cbz	r0, 13c46 <log_backend_activate+0xe>
	backend->cb->ctx = ctx;
   13c3a:	6842      	ldr	r2, [r0, #4]
   13c3c:	6011      	str	r1, [r2, #0]
	backend->cb->active = true;
   13c3e:	6843      	ldr	r3, [r0, #4]
   13c40:	2201      	movs	r2, #1
   13c42:	715a      	strb	r2, [r3, #5]
   13c44:	4770      	bx	lr
{
   13c46:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   13c48:	4c06      	ldr	r4, [pc, #24]	; (13c64 <log_backend_activate+0x2c>)
   13c4a:	f240 1317 	movw	r3, #279	; 0x117
   13c4e:	4622      	mov	r2, r4
   13c50:	4905      	ldr	r1, [pc, #20]	; (13c68 <log_backend_activate+0x30>)
   13c52:	4806      	ldr	r0, [pc, #24]	; (13c6c <log_backend_activate+0x34>)
   13c54:	f015 ff49 	bl	29aea <assert_print>
   13c58:	f240 1117 	movw	r1, #279	; 0x117
   13c5c:	4620      	mov	r0, r4
   13c5e:	f015 ff3d 	bl	29adc <assert_post_action>
   13c62:	bf00      	nop
   13c64:	00030448 	.word	0x00030448
   13c68:	00030480 	.word	0x00030480
   13c6c:	0002fdac 	.word	0x0002fdac

00013c70 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   13c70:	4802      	ldr	r0, [pc, #8]	; (13c7c <log_src_cnt_get+0xc>)
   13c72:	4b03      	ldr	r3, [pc, #12]	; (13c80 <log_src_cnt_get+0x10>)
   13c74:	1ac0      	subs	r0, r0, r3
   13c76:	08c0      	lsrs	r0, r0, #3
   13c78:	4770      	bx	lr
   13c7a:	bf00      	nop
   13c7c:	0002f8e0 	.word	0x0002f8e0
   13c80:	0002f7e8 	.word	0x0002f7e8

00013c84 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   13c84:	b510      	push	{r4, lr}
   13c86:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13c88:	f7ff fff2 	bl	13c70 <log_src_cnt_get>
   13c8c:	42a0      	cmp	r0, r4
   13c8e:	d903      	bls.n	13c98 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   13c90:	4b02      	ldr	r3, [pc, #8]	; (13c9c <log_source_name_get+0x18>)
   13c92:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13c96:	bd10      	pop	{r4, pc}
			return NULL;
   13c98:	2000      	movs	r0, #0
   13c9a:	e7fc      	b.n	13c96 <log_source_name_get+0x12>
   13c9c:	0002f7e8 	.word	0x0002f7e8

00013ca0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   13ca0:	b570      	push	{r4, r5, r6, lr}
   13ca2:	4604      	mov	r4, r0
   13ca4:	460d      	mov	r5, r1
   13ca6:	4616      	mov	r6, r2
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13ca8:	4b07      	ldr	r3, [pc, #28]	; (13cc8 <log_backend_enable+0x28>)
   13caa:	1ac3      	subs	r3, r0, r3
   13cac:	111b      	asrs	r3, r3, #4
   13cae:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   13cb0:	b2d9      	uxtb	r1, r3
   13cb2:	f7ff ffab 	bl	13c0c <log_backend_id_set>
	backend->cb->level = level;
   13cb6:	6863      	ldr	r3, [r4, #4]
   13cb8:	719e      	strb	r6, [r3, #6]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
   13cba:	4629      	mov	r1, r5
   13cbc:	4620      	mov	r0, r4
   13cbe:	f7ff ffbb 	bl	13c38 <log_backend_activate>

	z_log_notify_backend_enabled();
   13cc2:	f7ff fd73 	bl	137ac <z_log_notify_backend_enabled>
}
   13cc6:	bd70      	pop	{r4, r5, r6, pc}
   13cc8:	0002f8e0 	.word	0x0002f8e0

00013ccc <cbprintf_package_copy>:
{
   13ccc:	b500      	push	{lr}
   13cce:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   13cd0:	9205      	str	r2, [sp, #20]
   13cd2:	9306      	str	r3, [sp, #24]
   13cd4:	2300      	movs	r3, #0
   13cd6:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   13cd8:	b162      	cbz	r2, 13cf4 <cbprintf_package_copy+0x28>
   13cda:	4a07      	ldr	r2, [pc, #28]	; (13cf8 <cbprintf_package_copy+0x2c>)
   13cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13cde:	9302      	str	r3, [sp, #8]
   13ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13ce2:	9301      	str	r3, [sp, #4]
   13ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ce6:	9300      	str	r3, [sp, #0]
   13ce8:	ab05      	add	r3, sp, #20
   13cea:	f7fd fb47 	bl	1137c <cbprintf_package_convert>
}
   13cee:	b009      	add	sp, #36	; 0x24
   13cf0:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   13cf4:	2200      	movs	r2, #0
   13cf6:	e7f1      	b.n	13cdc <cbprintf_package_copy+0x10>
   13cf8:	00029e15 	.word	0x00029e15

00013cfc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d00:	b08a      	sub	sp, #40	; 0x28
   13d02:	4605      	mov	r5, r0
   13d04:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   13d06:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   13d08:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   13d0c:	2c00      	cmp	r4, #0
   13d0e:	d038      	beq.n	13d82 <z_impl_z_log_msg_static_create+0x86>
   13d10:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   13d12:	2200      	movs	r2, #0
   13d14:	9207      	str	r2, [sp, #28]
   13d16:	9208      	str	r2, [sp, #32]
   13d18:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   13d1a:	2304      	movs	r3, #4
   13d1c:	9302      	str	r3, [sp, #8]
   13d1e:	ab05      	add	r3, sp, #20
   13d20:	9301      	str	r3, [sp, #4]
   13d22:	230a      	movs	r3, #10
   13d24:	9300      	str	r3, [sp, #0]
   13d26:	ab07      	add	r3, sp, #28
   13d28:	4621      	mov	r1, r4
   13d2a:	4640      	mov	r0, r8
   13d2c:	f7fd fb26 	bl	1137c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   13d30:	f360 2752 	bfi	r7, r0, #9, #10
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   13d34:	f3c0 0909 	ubfx	r9, r0, #0, #10
   13d38:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   13d3c:	4449      	add	r1, r9
   13d3e:	3117      	adds	r1, #23
   13d40:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13d44:	0888      	lsrs	r0, r1, #2
   13d46:	f7ff fdc7 	bl	138d8 <z_log_msg_alloc>
		if (msg) {
   13d4a:	4682      	mov	sl, r0
   13d4c:	b318      	cbz	r0, 13d96 <z_impl_z_log_msg_static_create+0x9a>
			len = cbprintf_package_copy(package, inlen,
   13d4e:	2304      	movs	r3, #4
   13d50:	9302      	str	r3, [sp, #8]
   13d52:	ab05      	add	r3, sp, #20
   13d54:	9301      	str	r3, [sp, #4]
   13d56:	230a      	movs	r3, #10
   13d58:	9300      	str	r3, [sp, #0]
   13d5a:	464b      	mov	r3, r9
   13d5c:	f100 0210 	add.w	r2, r0, #16
   13d60:	4621      	mov	r1, r4
   13d62:	4640      	mov	r0, r8
   13d64:	f7ff ffb2 	bl	13ccc <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   13d68:	2800      	cmp	r0, #0
   13d6a:	da14      	bge.n	13d96 <z_impl_z_log_msg_static_create+0x9a>
   13d6c:	4c0e      	ldr	r4, [pc, #56]	; (13da8 <z_impl_z_log_msg_static_create+0xac>)
   13d6e:	2349      	movs	r3, #73	; 0x49
   13d70:	4622      	mov	r2, r4
   13d72:	490e      	ldr	r1, [pc, #56]	; (13dac <z_impl_z_log_msg_static_create+0xb0>)
   13d74:	480e      	ldr	r0, [pc, #56]	; (13db0 <z_impl_z_log_msg_static_create+0xb4>)
   13d76:	f015 feb8 	bl	29aea <assert_print>
   13d7a:	2149      	movs	r1, #73	; 0x49
   13d7c:	4620      	mov	r0, r4
   13d7e:	f015 fead 	bl	29adc <assert_post_action>
   13d82:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   13d86:	440c      	add	r4, r1
   13d88:	3417      	adds	r4, #23
   13d8a:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13d8e:	08a0      	lsrs	r0, r4, #2
   13d90:	f7ff fda2 	bl	138d8 <z_log_msg_alloc>
   13d94:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   13d96:	4633      	mov	r3, r6
   13d98:	463a      	mov	r2, r7
   13d9a:	4629      	mov	r1, r5
   13d9c:	4650      	mov	r0, sl
   13d9e:	f016 f84f 	bl	29e40 <z_log_msg_finalize>
}
   13da2:	b00a      	add	sp, #40	; 0x28
   13da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13da8:	000305e8 	.word	0x000305e8
   13dac:	00030614 	.word	0x00030614
   13db0:	0002fdac 	.word	0x0002fdac

00013db4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13db4:	b40e      	push	{r1, r2, r3}
   13db6:	b500      	push	{lr}
   13db8:	b084      	sub	sp, #16
   13dba:	4601      	mov	r1, r0
   13dbc:	ab05      	add	r3, sp, #20
   13dbe:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   13dc2:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   13dc4:	2000      	movs	r0, #0
   13dc6:	9000      	str	r0, [sp, #0]
   13dc8:	4803      	ldr	r0, [pc, #12]	; (13dd8 <print_formatted+0x24>)
   13dca:	f7fe fb07 	bl	123dc <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   13dce:	b004      	add	sp, #16
   13dd0:	f85d eb04 	ldr.w	lr, [sp], #4
   13dd4:	b003      	add	sp, #12
   13dd6:	4770      	bx	lr
   13dd8:	00014059 	.word	0x00014059

00013ddc <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   13ddc:	b530      	push	{r4, r5, lr}
   13dde:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   13de0:	f011 0f44 	tst.w	r1, #68	; 0x44
   13de4:	d005      	beq.n	13df2 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   13de6:	4b1a      	ldr	r3, [pc, #104]	; (13e50 <timestamp_print+0x74>)
   13de8:	681c      	ldr	r4, [r3, #0]
   13dea:	b934      	cbnz	r4, 13dfa <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   13dec:	2000      	movs	r0, #0
	}

	return length;
}
   13dee:	b005      	add	sp, #20
   13df0:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   13df2:	4918      	ldr	r1, [pc, #96]	; (13e54 <timestamp_print+0x78>)
   13df4:	f7ff ffde 	bl	13db4 <print_formatted>
   13df8:	e7f9      	b.n	13dee <timestamp_print+0x12>
		timestamp /= timestamp_div;
   13dfa:	4b17      	ldr	r3, [pc, #92]	; (13e58 <timestamp_print+0x7c>)
   13dfc:	6819      	ldr	r1, [r3, #0]
   13dfe:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   13e02:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   13e06:	4a15      	ldr	r2, [pc, #84]	; (13e5c <timestamp_print+0x80>)
   13e08:	fba2 320c 	umull	r3, r2, r2, ip
   13e0c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   13e0e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   13e12:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   13e16:	4b12      	ldr	r3, [pc, #72]	; (13e60 <timestamp_print+0x84>)
   13e18:	fba3 530e 	umull	r5, r3, r3, lr
   13e1c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   13e1e:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   13e22:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   13e26:	fb0c f101 	mul.w	r1, ip, r1
   13e2a:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13e2e:	fb04 1115 	mls	r1, r4, r5, r1
   13e32:	fb0c f101 	mul.w	r1, ip, r1
   13e36:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   13e3a:	9102      	str	r1, [sp, #8]
   13e3c:	9501      	str	r5, [sp, #4]
   13e3e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   13e42:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   13e46:	9100      	str	r1, [sp, #0]
   13e48:	4906      	ldr	r1, [pc, #24]	; (13e64 <timestamp_print+0x88>)
   13e4a:	f7ff ffb3 	bl	13db4 <print_formatted>
   13e4e:	e7ce      	b.n	13dee <timestamp_print+0x12>
   13e50:	200097a0 	.word	0x200097a0
   13e54:	00030620 	.word	0x00030620
   13e58:	2000979c 	.word	0x2000979c
   13e5c:	91a2b3c5 	.word	0x91a2b3c5
   13e60:	88888889 	.word	0x88888889
   13e64:	0003062c 	.word	0x0003062c

00013e68 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   13e68:	b161      	cbz	r1, 13e84 <color_print+0x1c>
{
   13e6a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   13e6c:	b12a      	cbz	r2, 13e7a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   13e6e:	4a06      	ldr	r2, [pc, #24]	; (13e88 <color_print+0x20>)
   13e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13e74:	b912      	cbnz	r2, 13e7c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   13e76:	4a05      	ldr	r2, [pc, #20]	; (13e8c <color_print+0x24>)
   13e78:	e000      	b.n	13e7c <color_print+0x14>
   13e7a:	4a04      	ldr	r2, [pc, #16]	; (13e8c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   13e7c:	4904      	ldr	r1, [pc, #16]	; (13e90 <color_print+0x28>)
   13e7e:	f7ff ff99 	bl	13db4 <print_formatted>
	}
}
   13e82:	bd08      	pop	{r3, pc}
   13e84:	4770      	bx	lr
   13e86:	bf00      	nop
   13e88:	0003073c 	.word	0x0003073c
   13e8c:	00030648 	.word	0x00030648
   13e90:	00030650 	.word	0x00030650

00013e94 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   13e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e98:	4605      	mov	r5, r0
   13e9a:	4690      	mov	r8, r2
   13e9c:	461e      	mov	r6, r3
   13e9e:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   13ea0:	b981      	cbnz	r1, 13ec4 <ids_print+0x30>
	int total = 0;
   13ea2:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   13ea4:	b12e      	cbz	r6, 13eb2 <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   13ea6:	4632      	mov	r2, r6
   13ea8:	4910      	ldr	r1, [pc, #64]	; (13eec <ids_print+0x58>)
   13eaa:	4628      	mov	r0, r5
   13eac:	f7ff ff82 	bl	13db4 <print_formatted>
   13eb0:	4404      	add	r4, r0
	}

	if (source) {
   13eb2:	b1b7      	cbz	r7, 13ee2 <ids_print+0x4e>
		total += print_formatted(output,
   13eb4:	f1b8 0f00 	cmp.w	r8, #0
   13eb8:	d00d      	beq.n	13ed6 <ids_print+0x42>
				(func_on &&
   13eba:	9b07      	ldr	r3, [sp, #28]
   13ebc:	2b04      	cmp	r3, #4
   13ebe:	d013      	beq.n	13ee8 <ids_print+0x54>
		total += print_formatted(output,
   13ec0:	490b      	ldr	r1, [pc, #44]	; (13ef0 <ids_print+0x5c>)
   13ec2:	e009      	b.n	13ed8 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   13ec4:	4b0b      	ldr	r3, [pc, #44]	; (13ef4 <ids_print+0x60>)
   13ec6:	9a07      	ldr	r2, [sp, #28]
   13ec8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13ecc:	490a      	ldr	r1, [pc, #40]	; (13ef8 <ids_print+0x64>)
   13ece:	f7ff ff71 	bl	13db4 <print_formatted>
   13ed2:	4604      	mov	r4, r0
   13ed4:	e7e6      	b.n	13ea4 <ids_print+0x10>
		total += print_formatted(output,
   13ed6:	4906      	ldr	r1, [pc, #24]	; (13ef0 <ids_print+0x5c>)
   13ed8:	463a      	mov	r2, r7
   13eda:	4628      	mov	r0, r5
   13edc:	f7ff ff6a 	bl	13db4 <print_formatted>
   13ee0:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   13ee2:	4620      	mov	r0, r4
   13ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   13ee8:	4904      	ldr	r1, [pc, #16]	; (13efc <ids_print+0x68>)
   13eea:	e7f5      	b.n	13ed8 <ids_print+0x44>
   13eec:	00030668 	.word	0x00030668
   13ef0:	00030658 	.word	0x00030658
   13ef4:	00030750 	.word	0x00030750
   13ef8:	00030660 	.word	0x00030660
   13efc:	00030654 	.word	0x00030654

00013f00 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   13f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f04:	b085      	sub	sp, #20
   13f06:	4605      	mov	r5, r0
   13f08:	460c      	mov	r4, r1
   13f0a:	4616      	mov	r6, r2
   13f0c:	9303      	str	r3, [sp, #12]
   13f0e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   13f12:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   13f16:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13f1a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   13f1e:	f015 ff77 	bl	29e10 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   13f22:	b1d8      	cbz	r0, 13f5c <prefix_print+0x5c>
   13f24:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   13f26:	4912      	ldr	r1, [pc, #72]	; (13f70 <prefix_print+0x70>)
   13f28:	4628      	mov	r0, r5
   13f2a:	f7ff ff43 	bl	13db4 <print_formatted>
   13f2e:	4607      	mov	r7, r0
	}

	if (stamp) {
   13f30:	f1bb 0f00 	cmp.w	fp, #0
   13f34:	d114      	bne.n	13f60 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   13f36:	4642      	mov	r2, r8
   13f38:	4651      	mov	r1, sl
   13f3a:	4628      	mov	r0, r5
   13f3c:	f015 ffad 	bl	29e9a <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   13f40:	f8cd 8004 	str.w	r8, [sp, #4]
   13f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13f46:	9300      	str	r3, [sp, #0]
   13f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f4a:	4632      	mov	r2, r6
   13f4c:	4649      	mov	r1, r9
   13f4e:	4628      	mov	r0, r5
   13f50:	f7ff ffa0 	bl	13e94 <ids_print>

	return length;
}
   13f54:	4438      	add	r0, r7
   13f56:	b005      	add	sp, #20
   13f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   13f5c:	2700      	movs	r7, #0
   13f5e:	e7e7      	b.n	13f30 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   13f60:	9a03      	ldr	r2, [sp, #12]
   13f62:	4621      	mov	r1, r4
   13f64:	4628      	mov	r0, r5
   13f66:	f7ff ff39 	bl	13ddc <timestamp_print>
   13f6a:	4407      	add	r7, r0
   13f6c:	e7e3      	b.n	13f36 <prefix_print+0x36>
   13f6e:	bf00      	nop
   13f70:	0003066c 	.word	0x0003066c

00013f74 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13f74:	f011 0f10 	tst.w	r1, #16
   13f78:	d10b      	bne.n	13f92 <newline_print+0x1e>
{
   13f7a:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13f7c:	f011 0f20 	tst.w	r1, #32
   13f80:	d003      	beq.n	13f8a <newline_print+0x16>
		print_formatted(ctx, "\n");
   13f82:	4904      	ldr	r1, [pc, #16]	; (13f94 <newline_print+0x20>)
   13f84:	f7ff ff16 	bl	13db4 <print_formatted>
}
   13f88:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   13f8a:	4903      	ldr	r1, [pc, #12]	; (13f98 <newline_print+0x24>)
   13f8c:	f7ff ff12 	bl	13db4 <print_formatted>
   13f90:	e7fa      	b.n	13f88 <newline_print+0x14>
   13f92:	4770      	bx	lr
   13f94:	0003492c 	.word	0x0003492c
   13f98:	00030670 	.word	0x00030670

00013f9c <hexdump_line_print>:
{
   13f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fa0:	4605      	mov	r5, r0
   13fa2:	460f      	mov	r7, r1
   13fa4:	4616      	mov	r6, r2
   13fa6:	4698      	mov	r8, r3
	newline_print(output, flags);
   13fa8:	9906      	ldr	r1, [sp, #24]
   13faa:	f7ff ffe3 	bl	13f74 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   13fae:	2400      	movs	r4, #0
   13fb0:	4544      	cmp	r4, r8
   13fb2:	da05      	bge.n	13fc0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   13fb4:	4923      	ldr	r1, [pc, #140]	; (14044 <hexdump_line_print+0xa8>)
   13fb6:	4628      	mov	r0, r5
   13fb8:	f7ff fefc 	bl	13db4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13fbc:	3401      	adds	r4, #1
   13fbe:	e7f7      	b.n	13fb0 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13fc0:	2400      	movs	r4, #0
   13fc2:	e009      	b.n	13fd8 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   13fc4:	491f      	ldr	r1, [pc, #124]	; (14044 <hexdump_line_print+0xa8>)
   13fc6:	4628      	mov	r0, r5
   13fc8:	f7ff fef4 	bl	13db4 <print_formatted>
   13fcc:	e00b      	b.n	13fe6 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   13fce:	491e      	ldr	r1, [pc, #120]	; (14048 <hexdump_line_print+0xac>)
   13fd0:	4628      	mov	r0, r5
   13fd2:	f7ff feef 	bl	13db4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13fd6:	3401      	adds	r4, #1
   13fd8:	2c0f      	cmp	r4, #15
   13fda:	dc0c      	bgt.n	13ff6 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   13fdc:	2c00      	cmp	r4, #0
   13fde:	dd02      	ble.n	13fe6 <hexdump_line_print+0x4a>
   13fe0:	f014 0f07 	tst.w	r4, #7
   13fe4:	d0ee      	beq.n	13fc4 <hexdump_line_print+0x28>
		if (i < length) {
   13fe6:	42b4      	cmp	r4, r6
   13fe8:	d2f1      	bcs.n	13fce <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   13fea:	5d3a      	ldrb	r2, [r7, r4]
   13fec:	4917      	ldr	r1, [pc, #92]	; (1404c <hexdump_line_print+0xb0>)
   13fee:	4628      	mov	r0, r5
   13ff0:	f7ff fee0 	bl	13db4 <print_formatted>
   13ff4:	e7ef      	b.n	13fd6 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   13ff6:	4916      	ldr	r1, [pc, #88]	; (14050 <hexdump_line_print+0xb4>)
   13ff8:	4628      	mov	r0, r5
   13ffa:	f7ff fedb 	bl	13db4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13ffe:	2400      	movs	r4, #0
   14000:	e009      	b.n	14016 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   14002:	4910      	ldr	r1, [pc, #64]	; (14044 <hexdump_line_print+0xa8>)
   14004:	4628      	mov	r0, r5
   14006:	f7ff fed5 	bl	13db4 <print_formatted>
   1400a:	e00b      	b.n	14024 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   1400c:	4911      	ldr	r1, [pc, #68]	; (14054 <hexdump_line_print+0xb8>)
   1400e:	4628      	mov	r0, r5
   14010:	f7ff fed0 	bl	13db4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14014:	3401      	adds	r4, #1
   14016:	2c0f      	cmp	r4, #15
   14018:	dc12      	bgt.n	14040 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   1401a:	2c00      	cmp	r4, #0
   1401c:	dd02      	ble.n	14024 <hexdump_line_print+0x88>
   1401e:	f014 0f07 	tst.w	r4, #7
   14022:	d0ee      	beq.n	14002 <hexdump_line_print+0x66>
		if (i < length) {
   14024:	42b4      	cmp	r4, r6
   14026:	d206      	bcs.n	14036 <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   14028:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   1402a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   1402e:	2b5e      	cmp	r3, #94	; 0x5e
   14030:	d9ec      	bls.n	1400c <hexdump_line_print+0x70>
   14032:	222e      	movs	r2, #46	; 0x2e
   14034:	e7ea      	b.n	1400c <hexdump_line_print+0x70>
			print_formatted(output, " ");
   14036:	4903      	ldr	r1, [pc, #12]	; (14044 <hexdump_line_print+0xa8>)
   14038:	4628      	mov	r0, r5
   1403a:	f7ff febb 	bl	13db4 <print_formatted>
   1403e:	e7e9      	b.n	14014 <hexdump_line_print+0x78>
}
   14040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14044:	00030664 	.word	0x00030664
   14048:	0003067c 	.word	0x0003067c
   1404c:	00030674 	.word	0x00030674
   14050:	00030680 	.word	0x00030680
   14054:	00030684 	.word	0x00030684

00014058 <out_func>:
{
   14058:	b538      	push	{r3, r4, r5, lr}
   1405a:	4605      	mov	r5, r0
   1405c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1405e:	684b      	ldr	r3, [r1, #4]
   14060:	681a      	ldr	r2, [r3, #0]
   14062:	68cb      	ldr	r3, [r1, #12]
   14064:	429a      	cmp	r2, r3
   14066:	d010      	beq.n	1408a <out_func+0x32>
	idx = atomic_inc(&out_ctx->control_block->offset);
   14068:	6863      	ldr	r3, [r4, #4]
   1406a:	e8d3 2fef 	ldaex	r2, [r3]
   1406e:	1c51      	adds	r1, r2, #1
   14070:	e8c3 1fe0 	stlex	r0, r1, [r3]
   14074:	2800      	cmp	r0, #0
   14076:	d1f8      	bne.n	1406a <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
   14078:	68a3      	ldr	r3, [r4, #8]
   1407a:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1407c:	6863      	ldr	r3, [r4, #4]
   1407e:	681a      	ldr	r2, [r3, #0]
   14080:	68e3      	ldr	r3, [r4, #12]
   14082:	429a      	cmp	r2, r3
   14084:	d805      	bhi.n	14092 <out_func+0x3a>
}
   14086:	2000      	movs	r0, #0
   14088:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   1408a:	4608      	mov	r0, r1
   1408c:	f015 ff38 	bl	29f00 <log_output_flush>
   14090:	e7ea      	b.n	14068 <out_func+0x10>
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   14092:	4c05      	ldr	r4, [pc, #20]	; (140a8 <out_func+0x50>)
   14094:	2379      	movs	r3, #121	; 0x79
   14096:	4622      	mov	r2, r4
   14098:	4904      	ldr	r1, [pc, #16]	; (140ac <out_func+0x54>)
   1409a:	4805      	ldr	r0, [pc, #20]	; (140b0 <out_func+0x58>)
   1409c:	f015 fd25 	bl	29aea <assert_print>
   140a0:	2179      	movs	r1, #121	; 0x79
   140a2:	4620      	mov	r0, r4
   140a4:	f015 fd1a 	bl	29adc <assert_post_action>
   140a8:	00030688 	.word	0x00030688
   140ac:	000306b8 	.word	0x000306b8
   140b0:	0002fdac 	.word	0x0002fdac

000140b4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   140b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140b8:	b084      	sub	sp, #16
   140ba:	4604      	mov	r4, r0
   140bc:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   140c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   140c2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   140c4:	b9a5      	cbnz	r5, 140f0 <log_output_process+0x3c>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   140c6:	2b01      	cmp	r3, #1
   140c8:	d01d      	beq.n	14106 <log_output_process+0x52>
   140ca:	481f      	ldr	r0, [pc, #124]	; (14148 <log_output_process+0x94>)
		prefix_offset = 0;
   140cc:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   140d0:	b137      	cbz	r7, 140e0 <log_output_process+0x2c>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   140d2:	463b      	mov	r3, r7
   140d4:	4622      	mov	r2, r4
   140d6:	491d      	ldr	r1, [pc, #116]	; (1414c <log_output_process+0x98>)
   140d8:	f015 f845 	bl	29166 <cbpprintf_external>
		int err = cbpprintf(cb, (void *)output, (void *)package);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
   140dc:	2800      	cmp	r0, #0
   140de:	db16      	blt.n	1410e <log_output_process+0x5a>
	}

	if (data_len) {
   140e0:	bb16      	cbnz	r6, 14128 <log_output_process+0x74>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   140e2:	bb55      	cbnz	r5, 1413a <log_output_process+0x86>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   140e4:	4620      	mov	r0, r4
   140e6:	f015 ff0b 	bl	29f00 <log_output_flush>
}
   140ea:	b004      	add	sp, #16
   140ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   140f0:	9502      	str	r5, [sp, #8]
   140f2:	9301      	str	r3, [sp, #4]
   140f4:	9200      	str	r2, [sp, #0]
   140f6:	460b      	mov	r3, r1
   140f8:	2200      	movs	r2, #0
   140fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   140fc:	f7ff ff00 	bl	13f00 <prefix_print>
   14100:	4680      	mov	r8, r0
		cb = out_func;
   14102:	4813      	ldr	r0, [pc, #76]	; (14150 <log_output_process+0x9c>)
   14104:	e7e4      	b.n	140d0 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14106:	4812      	ldr	r0, [pc, #72]	; (14150 <log_output_process+0x9c>)
		prefix_offset = 0;
   14108:	f04f 0800 	mov.w	r8, #0
   1410c:	e7e0      	b.n	140d0 <log_output_process+0x1c>
		__ASSERT_NO_MSG(err >= 0);
   1410e:	4c11      	ldr	r4, [pc, #68]	; (14154 <log_output_process+0xa0>)
   14110:	f44f 7300 	mov.w	r3, #512	; 0x200
   14114:	4622      	mov	r2, r4
   14116:	4910      	ldr	r1, [pc, #64]	; (14158 <log_output_process+0xa4>)
   14118:	4810      	ldr	r0, [pc, #64]	; (1415c <log_output_process+0xa8>)
   1411a:	f015 fce6 	bl	29aea <assert_print>
   1411e:	f44f 7100 	mov.w	r1, #512	; 0x200
   14122:	4620      	mov	r0, r4
   14124:	f015 fcda 	bl	29adc <assert_post_action>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   14128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1412a:	9300      	str	r3, [sp, #0]
   1412c:	4643      	mov	r3, r8
   1412e:	4632      	mov	r2, r6
   14130:	990c      	ldr	r1, [sp, #48]	; 0x30
   14132:	4620      	mov	r0, r4
   14134:	f015 fec9 	bl	29eca <log_msg_hexdump>
   14138:	e7d3      	b.n	140e2 <log_output_process+0x2e>
		postfix_print(output, flags, level);
   1413a:	462a      	mov	r2, r5
   1413c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1413e:	4620      	mov	r0, r4
   14140:	f015 feb7 	bl	29eb2 <postfix_print>
   14144:	e7ce      	b.n	140e4 <log_output_process+0x30>
   14146:	bf00      	nop
   14148:	00029f1b 	.word	0x00029f1b
   1414c:	00029e8b 	.word	0x00029e8b
   14150:	00014059 	.word	0x00014059
   14154:	00030688 	.word	0x00030688
   14158:	000306e8 	.word	0x000306e8
   1415c:	0002fdac 	.word	0x0002fdac

00014160 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   14160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14164:	b086      	sub	sp, #24
   14166:	4605      	mov	r5, r0
   14168:	460c      	mov	r4, r1
   1416a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   1416c:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   14170:	880e      	ldrh	r6, [r1, #0]
   14172:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   14176:	7808      	ldrb	r0, [r1, #0]
   14178:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   1417c:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1417e:	b133      	cbz	r3, 1418e <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14180:	4a11      	ldr	r2, [pc, #68]	; (141c8 <log_output_msg_process+0x68>)
   14182:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   14184:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14188:	2900      	cmp	r1, #0
   1418a:	da18      	bge.n	141be <log_output_msg_process+0x5e>
   1418c:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1418e:	4622      	mov	r2, r4
   14190:	f852 1b10 	ldr.w	r1, [r2], #16
   14194:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   14198:	8860      	ldrh	r0, [r4, #2]
   1419a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   1419e:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   141a0:	b901      	cbnz	r1, 141a4 <log_output_msg_process+0x44>
   141a2:	2200      	movs	r2, #0
   141a4:	9704      	str	r7, [sp, #16]
   141a6:	9003      	str	r0, [sp, #12]
   141a8:	9402      	str	r4, [sp, #8]
   141aa:	9201      	str	r2, [sp, #4]
   141ac:	9600      	str	r6, [sp, #0]
   141ae:	2200      	movs	r2, #0
   141b0:	4641      	mov	r1, r8
   141b2:	4628      	mov	r0, r5
   141b4:	f7ff ff7e 	bl	140b4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   141b8:	b006      	add	sp, #24
   141ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   141be:	f7ff fd61 	bl	13c84 <log_source_name_get>
   141c2:	4603      	mov	r3, r0
   141c4:	e7e3      	b.n	1418e <log_output_msg_process+0x2e>
   141c6:	bf00      	nop
   141c8:	0002f7e8 	.word	0x0002f7e8

000141cc <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   141cc:	b570      	push	{r4, r5, r6, lr}
   141ce:	b082      	sub	sp, #8
   141d0:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   141d2:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   141d4:	f242 730f 	movw	r3, #9999	; 0x270f
   141d8:	428b      	cmp	r3, r1
   141da:	bf28      	it	cs
   141dc:	460b      	movcs	r3, r1
   141de:	4a0e      	ldr	r2, [pc, #56]	; (14218 <log_output_dropped_process+0x4c>)
   141e0:	2105      	movs	r1, #5
   141e2:	4668      	mov	r0, sp
   141e4:	f015 f83e 	bl	29264 <snprintk>
   141e8:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   141ea:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   141ec:	685b      	ldr	r3, [r3, #4]
   141ee:	220b      	movs	r2, #11
   141f0:	490a      	ldr	r1, [pc, #40]	; (1421c <log_output_dropped_process+0x50>)
   141f2:	4628      	mov	r0, r5
   141f4:	f015 fe3c 	bl	29e70 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   141f8:	6863      	ldr	r3, [r4, #4]
   141fa:	685b      	ldr	r3, [r3, #4]
   141fc:	4632      	mov	r2, r6
   141fe:	4669      	mov	r1, sp
   14200:	4628      	mov	r0, r5
   14202:	f015 fe35 	bl	29e70 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   14206:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14208:	685b      	ldr	r3, [r3, #4]
   1420a:	221b      	movs	r2, #27
   1420c:	4904      	ldr	r1, [pc, #16]	; (14220 <log_output_dropped_process+0x54>)
   1420e:	4628      	mov	r0, r5
   14210:	f015 fe2e 	bl	29e70 <buffer_write>
}
   14214:	b002      	add	sp, #8
   14216:	bd70      	pop	{r4, r5, r6, pc}
   14218:	00031d08 	.word	0x00031d08
   1421c:	00030710 	.word	0x00030710
   14220:	000306f4 	.word	0x000306f4

00014224 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   14224:	4b07      	ldr	r3, [pc, #28]	; (14244 <log_output_timestamp_freq_set+0x20>)
   14226:	2201      	movs	r2, #1
   14228:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1422a:	e004      	b.n	14236 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   1422c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1422e:	4a05      	ldr	r2, [pc, #20]	; (14244 <log_output_timestamp_freq_set+0x20>)
   14230:	6813      	ldr	r3, [r2, #0]
   14232:	005b      	lsls	r3, r3, #1
   14234:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   14236:	4b04      	ldr	r3, [pc, #16]	; (14248 <log_output_timestamp_freq_set+0x24>)
   14238:	4298      	cmp	r0, r3
   1423a:	d8f7      	bhi.n	1422c <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   1423c:	4b03      	ldr	r3, [pc, #12]	; (1424c <log_output_timestamp_freq_set+0x28>)
   1423e:	6018      	str	r0, [r3, #0]
}
   14240:	4770      	bx	lr
   14242:	bf00      	nop
   14244:	2000979c 	.word	0x2000979c
   14248:	000f4240 	.word	0x000f4240
   1424c:	200097a0 	.word	0x200097a0

00014250 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   14250:	b570      	push	{r4, r5, r6, lr}
   14252:	4606      	mov	r6, r0
   14254:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   14256:	2400      	movs	r4, #0
   14258:	e005      	b.n	14266 <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
   1425a:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   1425c:	4804      	ldr	r0, [pc, #16]	; (14270 <char_out+0x20>)
   1425e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   14260:	685b      	ldr	r3, [r3, #4]
   14262:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   14264:	3401      	adds	r4, #1
   14266:	42ac      	cmp	r4, r5
   14268:	d3f7      	bcc.n	1425a <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   1426a:	4628      	mov	r0, r5
   1426c:	bd70      	pop	{r4, r5, r6, pc}
   1426e:	bf00      	nop
   14270:	0002f4e8 	.word	0x0002f4e8

00014274 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14274:	4b01      	ldr	r3, [pc, #4]	; (1427c <format_set+0x8>)
   14276:	6019      	str	r1, [r3, #0]
	return 0;
}
   14278:	2000      	movs	r0, #0
   1427a:	4770      	bx	lr
   1427c:	200097bc 	.word	0x200097bc

00014280 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
   14280:	b510      	push	{r4, lr}
   14282:	4808      	ldr	r0, [pc, #32]	; (142a4 <log_backend_uart_init+0x24>)
   14284:	f01a fd66 	bl	2ed54 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   14288:	b100      	cbz	r0, 1428c <log_backend_uart_init+0xc>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   1428a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   1428c:	4c06      	ldr	r4, [pc, #24]	; (142a8 <log_backend_uart_init+0x28>)
   1428e:	236f      	movs	r3, #111	; 0x6f
   14290:	4622      	mov	r2, r4
   14292:	4906      	ldr	r1, [pc, #24]	; (142ac <log_backend_uart_init+0x2c>)
   14294:	4806      	ldr	r0, [pc, #24]	; (142b0 <log_backend_uart_init+0x30>)
   14296:	f015 fc28 	bl	29aea <assert_print>
   1429a:	216f      	movs	r1, #111	; 0x6f
   1429c:	4620      	mov	r0, r4
   1429e:	f015 fc1d 	bl	29adc <assert_post_action>
   142a2:	bf00      	nop
   142a4:	0002f4e8 	.word	0x0002f4e8
   142a8:	00030764 	.word	0x00030764
   142ac:	000307a4 	.word	0x000307a4
   142b0:	0002fdac 	.word	0x0002fdac

000142b4 <panic>:

static void panic(struct log_backend const *const backend)
{
   142b4:	b508      	push	{r3, lr}
	in_panic = true;
   142b6:	4b03      	ldr	r3, [pc, #12]	; (142c4 <panic+0x10>)
   142b8:	2201      	movs	r2, #1
   142ba:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   142bc:	4802      	ldr	r0, [pc, #8]	; (142c8 <panic+0x14>)
   142be:	f015 fe1f 	bl	29f00 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   142c2:	bd08      	pop	{r3, pc}
   142c4:	20009d50 	.word	0x20009d50
   142c8:	000307fc 	.word	0x000307fc

000142cc <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   142cc:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   142ce:	4802      	ldr	r0, [pc, #8]	; (142d8 <dropped+0xc>)
   142d0:	f7ff ff7c 	bl	141cc <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   142d4:	bd08      	pop	{r3, pc}
   142d6:	bf00      	nop
   142d8:	000307fc 	.word	0x000307fc

000142dc <process>:
{
   142dc:	b510      	push	{r4, lr}
   142de:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   142e0:	4b04      	ldr	r3, [pc, #16]	; (142f4 <process+0x18>)
   142e2:	6818      	ldr	r0, [r3, #0]
   142e4:	f7ff fa4a 	bl	1377c <log_format_func_t_get>
   142e8:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   142ea:	220f      	movs	r2, #15
   142ec:	4621      	mov	r1, r4
   142ee:	4802      	ldr	r0, [pc, #8]	; (142f8 <process+0x1c>)
   142f0:	4798      	blx	r3
}
   142f2:	bd10      	pop	{r4, pc}
   142f4:	200097bc 	.word	0x200097bc
   142f8:	000307fc 	.word	0x000307fc

000142fc <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
   142fc:	b500      	push	{lr}
   142fe:	b08f      	sub	sp, #60	; 0x3c
	const struct ipc_service_backend *backend;

	if (!instance) {
   14300:	b140      	cbz	r0, 14314 <ipc_service_open_instance+0x18>
		LOG_ERR("Invalid instance");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
   14302:	6883      	ldr	r3, [r0, #8]

	if (!backend) {
   14304:	b373      	cbz	r3, 14364 <ipc_service_open_instance+0x68>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	if (!backend->open_instance) {
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	2b00      	cmp	r3, #0
   1430a:	d053      	beq.n	143b4 <ipc_service_open_instance+0xb8>
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
   1430c:	4798      	blx	r3
}
   1430e:	b00f      	add	sp, #60	; 0x3c
   14310:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Invalid instance");
   14314:	4b28      	ldr	r3, [pc, #160]	; (143b8 <ipc_service_open_instance+0xbc>)
   14316:	930d      	str	r3, [sp, #52]	; 0x34
   14318:	2302      	movs	r3, #2
   1431a:	f88d 3004 	strb.w	r3, [sp, #4]
   1431e:	2300      	movs	r3, #0
   14320:	f88d 3005 	strb.w	r3, [sp, #5]
   14324:	f88d 3006 	strb.w	r3, [sp, #6]
   14328:	f88d 3007 	strb.w	r3, [sp, #7]
   1432c:	9a01      	ldr	r2, [sp, #4]
   1432e:	920c      	str	r2, [sp, #48]	; 0x30
   14330:	4619      	mov	r1, r3
   14332:	f363 0100 	bfi	r1, r3, #0, #1
   14336:	f363 0141 	bfi	r1, r3, #1, #1
   1433a:	f363 0182 	bfi	r1, r3, #2, #1
   1433e:	f363 01c5 	bfi	r1, r3, #3, #3
   14342:	2201      	movs	r2, #1
   14344:	f362 1188 	bfi	r1, r2, #6, #3
   14348:	2208      	movs	r2, #8
   1434a:	f362 2152 	bfi	r1, r2, #9, #10
   1434e:	f363 41de 	bfi	r1, r3, #19, #12
   14352:	f363 71df 	bfi	r1, r3, #31, #1
   14356:	aa0c      	add	r2, sp, #48	; 0x30
   14358:	4818      	ldr	r0, [pc, #96]	; (143bc <ipc_service_open_instance+0xc0>)
   1435a:	f7ff fccf 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1435e:	f06f 0015 	mvn.w	r0, #21
   14362:	e7d4      	b.n	1430e <ipc_service_open_instance+0x12>
		LOG_ERR("Invalid backend configuration");
   14364:	4b16      	ldr	r3, [pc, #88]	; (143c0 <ipc_service_open_instance+0xc4>)
   14366:	9307      	str	r3, [sp, #28]
   14368:	2302      	movs	r3, #2
   1436a:	f88d 3004 	strb.w	r3, [sp, #4]
   1436e:	2300      	movs	r3, #0
   14370:	f88d 3005 	strb.w	r3, [sp, #5]
   14374:	f88d 3006 	strb.w	r3, [sp, #6]
   14378:	f88d 3007 	strb.w	r3, [sp, #7]
   1437c:	9a01      	ldr	r2, [sp, #4]
   1437e:	9206      	str	r2, [sp, #24]
   14380:	4619      	mov	r1, r3
   14382:	f363 0100 	bfi	r1, r3, #0, #1
   14386:	f363 0141 	bfi	r1, r3, #1, #1
   1438a:	f363 0182 	bfi	r1, r3, #2, #1
   1438e:	f363 01c5 	bfi	r1, r3, #3, #3
   14392:	2201      	movs	r2, #1
   14394:	f362 1188 	bfi	r1, r2, #6, #3
   14398:	2208      	movs	r2, #8
   1439a:	f362 2152 	bfi	r1, r2, #9, #10
   1439e:	f363 41de 	bfi	r1, r3, #19, #12
   143a2:	f363 71df 	bfi	r1, r3, #31, #1
   143a6:	aa06      	add	r2, sp, #24
   143a8:	4804      	ldr	r0, [pc, #16]	; (143bc <ipc_service_open_instance+0xc0>)
   143aa:	f7ff fca7 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EIO;
   143ae:	f06f 0004 	mvn.w	r0, #4
   143b2:	e7ac      	b.n	1430e <ipc_service_open_instance+0x12>
		return 0;
   143b4:	2000      	movs	r0, #0
   143b6:	e7aa      	b.n	1430e <ipc_service_open_instance+0x12>
   143b8:	0003080c 	.word	0x0003080c
   143bc:	0002f868 	.word	0x0002f868
   143c0:	00030820 	.word	0x00030820

000143c4 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
   143c4:	b510      	push	{r4, lr}
   143c6:	b08e      	sub	sp, #56	; 0x38
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
   143c8:	b168      	cbz	r0, 143e6 <ipc_service_register_endpoint+0x22>
   143ca:	4603      	mov	r3, r0
   143cc:	b159      	cbz	r1, 143e6 <ipc_service_register_endpoint+0x22>
   143ce:	b152      	cbz	r2, 143e6 <ipc_service_register_endpoint+0x22>
		LOG_ERR("Invalid instance, endpoint or configuration");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
   143d0:	6880      	ldr	r0, [r0, #8]

	if (!backend || !backend->register_endpoint) {
   143d2:	b380      	cbz	r0, 14436 <ipc_service_register_endpoint+0x72>
   143d4:	68c4      	ldr	r4, [r0, #12]
   143d6:	b374      	cbz	r4, 14436 <ipc_service_register_endpoint+0x72>
		return -EIO;
	}

	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;
   143d8:	f841 3b04 	str.w	r3, [r1], #4

	return backend->register_endpoint(instance, &ept->token, cfg);
   143dc:	68c4      	ldr	r4, [r0, #12]
   143de:	4618      	mov	r0, r3
   143e0:	47a0      	blx	r4
}
   143e2:	b00e      	add	sp, #56	; 0x38
   143e4:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid instance, endpoint or configuration");
   143e6:	4b28      	ldr	r3, [pc, #160]	; (14488 <ipc_service_register_endpoint+0xc4>)
   143e8:	930d      	str	r3, [sp, #52]	; 0x34
   143ea:	2302      	movs	r3, #2
   143ec:	f88d 3004 	strb.w	r3, [sp, #4]
   143f0:	2300      	movs	r3, #0
   143f2:	f88d 3005 	strb.w	r3, [sp, #5]
   143f6:	f88d 3006 	strb.w	r3, [sp, #6]
   143fa:	f88d 3007 	strb.w	r3, [sp, #7]
   143fe:	9a01      	ldr	r2, [sp, #4]
   14400:	920c      	str	r2, [sp, #48]	; 0x30
   14402:	4619      	mov	r1, r3
   14404:	f363 0100 	bfi	r1, r3, #0, #1
   14408:	f363 0141 	bfi	r1, r3, #1, #1
   1440c:	f363 0182 	bfi	r1, r3, #2, #1
   14410:	f363 01c5 	bfi	r1, r3, #3, #3
   14414:	2201      	movs	r2, #1
   14416:	f362 1188 	bfi	r1, r2, #6, #3
   1441a:	2208      	movs	r2, #8
   1441c:	f362 2152 	bfi	r1, r2, #9, #10
   14420:	f363 41de 	bfi	r1, r3, #19, #12
   14424:	f363 71df 	bfi	r1, r3, #31, #1
   14428:	aa0c      	add	r2, sp, #48	; 0x30
   1442a:	4818      	ldr	r0, [pc, #96]	; (1448c <ipc_service_register_endpoint+0xc8>)
   1442c:	f7ff fc66 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   14430:	f06f 0015 	mvn.w	r0, #21
   14434:	e7d5      	b.n	143e2 <ipc_service_register_endpoint+0x1e>
		LOG_ERR("Invalid backend configuration");
   14436:	4b16      	ldr	r3, [pc, #88]	; (14490 <ipc_service_register_endpoint+0xcc>)
   14438:	9307      	str	r3, [sp, #28]
   1443a:	2302      	movs	r3, #2
   1443c:	f88d 3004 	strb.w	r3, [sp, #4]
   14440:	2300      	movs	r3, #0
   14442:	f88d 3005 	strb.w	r3, [sp, #5]
   14446:	f88d 3006 	strb.w	r3, [sp, #6]
   1444a:	f88d 3007 	strb.w	r3, [sp, #7]
   1444e:	9a01      	ldr	r2, [sp, #4]
   14450:	9206      	str	r2, [sp, #24]
   14452:	4619      	mov	r1, r3
   14454:	f363 0100 	bfi	r1, r3, #0, #1
   14458:	f363 0141 	bfi	r1, r3, #1, #1
   1445c:	f363 0182 	bfi	r1, r3, #2, #1
   14460:	f363 01c5 	bfi	r1, r3, #3, #3
   14464:	2201      	movs	r2, #1
   14466:	f362 1188 	bfi	r1, r2, #6, #3
   1446a:	2208      	movs	r2, #8
   1446c:	f362 2152 	bfi	r1, r2, #9, #10
   14470:	f363 41de 	bfi	r1, r3, #19, #12
   14474:	f363 71df 	bfi	r1, r3, #31, #1
   14478:	aa06      	add	r2, sp, #24
   1447a:	4804      	ldr	r0, [pc, #16]	; (1448c <ipc_service_register_endpoint+0xc8>)
   1447c:	f7ff fc3e 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EIO;
   14480:	f06f 0004 	mvn.w	r0, #4
   14484:	e7ad      	b.n	143e2 <ipc_service_register_endpoint+0x1e>
   14486:	bf00      	nop
   14488:	00030840 	.word	0x00030840
   1448c:	0002f868 	.word	0x0002f868
   14490:	00030820 	.word	0x00030820

00014494 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
   14494:	b510      	push	{r4, lr}
   14496:	b094      	sub	sp, #80	; 0x50
	const struct ipc_service_backend *backend;

	if (!ept) {
   14498:	b180      	cbz	r0, 144bc <ipc_service_send+0x28>
   1449a:	4613      	mov	r3, r2
   1449c:	4684      	mov	ip, r0
		LOG_ERR("Invalid endpoint");
		return -EINVAL;
	}

	if (!ept->instance) {
   1449e:	6800      	ldr	r0, [r0, #0]
   144a0:	2800      	cmp	r0, #0
   144a2:	d033      	beq.n	1450c <ipc_service_send+0x78>
		LOG_ERR("Endpoint not registered\n");
		return -ENOENT;
	}

	backend = ept->instance->api;
   144a4:	6882      	ldr	r2, [r0, #8]

	if (!backend || !backend->send) {
   144a6:	2a00      	cmp	r2, #0
   144a8:	d058      	beq.n	1455c <ipc_service_send+0xc8>
   144aa:	6894      	ldr	r4, [r2, #8]
   144ac:	2c00      	cmp	r4, #0
   144ae:	d055      	beq.n	1455c <ipc_service_send+0xc8>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
   144b0:	460a      	mov	r2, r1
   144b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
   144b6:	47a0      	blx	r4
}
   144b8:	b014      	add	sp, #80	; 0x50
   144ba:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid endpoint");
   144bc:	4b3b      	ldr	r3, [pc, #236]	; (145ac <ipc_service_send+0x118>)
   144be:	9313      	str	r3, [sp, #76]	; 0x4c
   144c0:	2302      	movs	r3, #2
   144c2:	f88d 3004 	strb.w	r3, [sp, #4]
   144c6:	2300      	movs	r3, #0
   144c8:	f88d 3005 	strb.w	r3, [sp, #5]
   144cc:	f88d 3006 	strb.w	r3, [sp, #6]
   144d0:	f88d 3007 	strb.w	r3, [sp, #7]
   144d4:	9a01      	ldr	r2, [sp, #4]
   144d6:	9212      	str	r2, [sp, #72]	; 0x48
   144d8:	4619      	mov	r1, r3
   144da:	f363 0100 	bfi	r1, r3, #0, #1
   144de:	f363 0141 	bfi	r1, r3, #1, #1
   144e2:	f363 0182 	bfi	r1, r3, #2, #1
   144e6:	f363 01c5 	bfi	r1, r3, #3, #3
   144ea:	2201      	movs	r2, #1
   144ec:	f362 1188 	bfi	r1, r2, #6, #3
   144f0:	2208      	movs	r2, #8
   144f2:	f362 2152 	bfi	r1, r2, #9, #10
   144f6:	f363 41de 	bfi	r1, r3, #19, #12
   144fa:	f363 71df 	bfi	r1, r3, #31, #1
   144fe:	aa12      	add	r2, sp, #72	; 0x48
   14500:	482b      	ldr	r0, [pc, #172]	; (145b0 <ipc_service_send+0x11c>)
   14502:	f7ff fbfb 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   14506:	f06f 0015 	mvn.w	r0, #21
   1450a:	e7d5      	b.n	144b8 <ipc_service_send+0x24>
		LOG_ERR("Endpoint not registered\n");
   1450c:	4b29      	ldr	r3, [pc, #164]	; (145b4 <ipc_service_send+0x120>)
   1450e:	930d      	str	r3, [sp, #52]	; 0x34
   14510:	2302      	movs	r3, #2
   14512:	f88d 3004 	strb.w	r3, [sp, #4]
   14516:	2300      	movs	r3, #0
   14518:	f88d 3005 	strb.w	r3, [sp, #5]
   1451c:	f88d 3006 	strb.w	r3, [sp, #6]
   14520:	f88d 3007 	strb.w	r3, [sp, #7]
   14524:	9a01      	ldr	r2, [sp, #4]
   14526:	920c      	str	r2, [sp, #48]	; 0x30
   14528:	4619      	mov	r1, r3
   1452a:	f363 0100 	bfi	r1, r3, #0, #1
   1452e:	f363 0141 	bfi	r1, r3, #1, #1
   14532:	f363 0182 	bfi	r1, r3, #2, #1
   14536:	f363 01c5 	bfi	r1, r3, #3, #3
   1453a:	2201      	movs	r2, #1
   1453c:	f362 1188 	bfi	r1, r2, #6, #3
   14540:	2208      	movs	r2, #8
   14542:	f362 2152 	bfi	r1, r2, #9, #10
   14546:	f363 41de 	bfi	r1, r3, #19, #12
   1454a:	f363 71df 	bfi	r1, r3, #31, #1
   1454e:	aa0c      	add	r2, sp, #48	; 0x30
   14550:	4817      	ldr	r0, [pc, #92]	; (145b0 <ipc_service_send+0x11c>)
   14552:	f7ff fbd3 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -ENOENT;
   14556:	f06f 0001 	mvn.w	r0, #1
   1455a:	e7ad      	b.n	144b8 <ipc_service_send+0x24>
		LOG_ERR("Invalid backend configuration");
   1455c:	4b16      	ldr	r3, [pc, #88]	; (145b8 <ipc_service_send+0x124>)
   1455e:	9307      	str	r3, [sp, #28]
   14560:	2302      	movs	r3, #2
   14562:	f88d 3004 	strb.w	r3, [sp, #4]
   14566:	2300      	movs	r3, #0
   14568:	f88d 3005 	strb.w	r3, [sp, #5]
   1456c:	f88d 3006 	strb.w	r3, [sp, #6]
   14570:	f88d 3007 	strb.w	r3, [sp, #7]
   14574:	9a01      	ldr	r2, [sp, #4]
   14576:	9206      	str	r2, [sp, #24]
   14578:	4619      	mov	r1, r3
   1457a:	f363 0100 	bfi	r1, r3, #0, #1
   1457e:	f363 0141 	bfi	r1, r3, #1, #1
   14582:	f363 0182 	bfi	r1, r3, #2, #1
   14586:	f363 01c5 	bfi	r1, r3, #3, #3
   1458a:	2201      	movs	r2, #1
   1458c:	f362 1188 	bfi	r1, r2, #6, #3
   14590:	2208      	movs	r2, #8
   14592:	f362 2152 	bfi	r1, r2, #9, #10
   14596:	f363 41de 	bfi	r1, r3, #19, #12
   1459a:	f363 71df 	bfi	r1, r3, #31, #1
   1459e:	aa06      	add	r2, sp, #24
   145a0:	4803      	ldr	r0, [pc, #12]	; (145b0 <ipc_service_send+0x11c>)
   145a2:	f7ff fbab 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EIO;
   145a6:	f06f 0004 	mvn.w	r0, #4
   145aa:	e785      	b.n	144b8 <ipc_service_send+0x24>
   145ac:	0003086c 	.word	0x0003086c
   145b0:	0002f868 	.word	0x0002f868
   145b4:	00030880 	.word	0x00030880
   145b8:	00030820 	.word	0x00030820

000145bc <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
   145bc:	b510      	push	{r4, lr}
   145be:	b08c      	sub	sp, #48	; 0x30
	const struct backend_config_t *backend_config;
	const struct backend_config_t backend_configs[] = {
   145c0:	f10d 0c04 	add.w	ip, sp, #4
   145c4:	4c0d      	ldr	r4, [pc, #52]	; (145fc <shared_memory_prepare+0x40>)
   145c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   145c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   145cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   145ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   145d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   145d6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		DT_INST_FOREACH_STATUS_OKAY(BACKEND_CONFIG_DEFINE)
	};

	for (backend_config = backend_configs;
   145da:	ac01      	add	r4, sp, #4
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
   145dc:	ab0c      	add	r3, sp, #48	; 0x30
   145de:	429c      	cmp	r4, r3
   145e0:	d302      	bcc.n	145e8 <shared_memory_prepare+0x2c>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
   145e2:	2000      	movs	r0, #0
   145e4:	b00c      	add	sp, #48	; 0x30
   145e6:	bd10      	pop	{r4, pc}
		if (backend_config->role == ROLE_HOST) {
   145e8:	6823      	ldr	r3, [r4, #0]
   145ea:	b10b      	cbz	r3, 145f0 <shared_memory_prepare+0x34>
	     backend_config++) {
   145ec:	342c      	adds	r4, #44	; 0x2c
   145ee:	e7f5      	b.n	145dc <shared_memory_prepare+0x20>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
   145f0:	2204      	movs	r2, #4
   145f2:	2100      	movs	r1, #0
   145f4:	6860      	ldr	r0, [r4, #4]
   145f6:	f016 fdce 	bl	2b196 <memset>
   145fa:	e7f7      	b.n	145ec <shared_memory_prepare+0x30>
   145fc:	0002f944 	.word	0x0002f944

00014600 <get_available_ept_slot>:
{
   14600:	b508      	push	{r3, lr}
	return get_ept_slot_with_name(rpmsg_inst, "");
   14602:	4902      	ldr	r1, [pc, #8]	; (1460c <get_available_ept_slot+0xc>)
   14604:	f015 fd7d 	bl	2a102 <get_ept_slot_with_name>
}
   14608:	bd08      	pop	{r3, pc}
   1460a:	bf00      	nop
   1460c:	000347c0 	.word	0x000347c0

00014610 <check_endpoints_freed>:
{
   14610:	b538      	push	{r3, r4, r5, lr}
   14612:	4605      	mov	r5, r0
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   14614:	2400      	movs	r4, #0
   14616:	2c01      	cmp	r4, #1
   14618:	d80a      	bhi.n	14630 <check_endpoints_freed+0x20>
		if (strcmp("", rpmsg_ept->name) != 0) {
   1461a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1461e:	0109      	lsls	r1, r1, #4
   14620:	3140      	adds	r1, #64	; 0x40
   14622:	4429      	add	r1, r5
   14624:	4804      	ldr	r0, [pc, #16]	; (14638 <check_endpoints_freed+0x28>)
   14626:	f016 fd57 	bl	2b0d8 <strcmp>
   1462a:	b918      	cbnz	r0, 14634 <check_endpoints_freed+0x24>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1462c:	3401      	adds	r4, #1
   1462e:	e7f2      	b.n	14616 <check_endpoints_freed+0x6>
	return true;
   14630:	2001      	movs	r0, #1
}
   14632:	bd38      	pop	{r3, r4, r5, pc}
			return false;
   14634:	2000      	movs	r0, #0
   14636:	e7fc      	b.n	14632 <check_endpoints_freed+0x22>
   14638:	000347c0 	.word	0x000347c0

0001463c <advertise_ept>:
{
   1463c:	b530      	push	{r4, r5, lr}
   1463e:	b085      	sub	sp, #20
   14640:	4604      	mov	r4, r0
   14642:	460d      	mov	r5, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   14644:	490b      	ldr	r1, [pc, #44]	; (14674 <advertise_ept+0x38>)
   14646:	9102      	str	r1, [sp, #8]
   14648:	f8d0 1198 	ldr.w	r1, [r0, #408]	; 0x198
   1464c:	9101      	str	r1, [sp, #4]
   1464e:	9300      	str	r3, [sp, #0]
   14650:	f04f 33ff 	mov.w	r3, #4294967295
   14654:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   14658:	4628      	mov	r0, r5
   1465a:	f00f fc19 	bl	23e90 <rpmsg_create_ept>
	if (err != 0) {
   1465e:	b938      	cbnz	r0, 14670 <advertise_ept+0x34>
	rpmsg_ept->bound = true;
   14660:	2301      	movs	r3, #1
   14662:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
   14666:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   1466a:	b10b      	cbz	r3, 14670 <advertise_ept+0x34>
		rpmsg_inst->bound_cb(rpmsg_ept);
   1466c:	4628      	mov	r0, r5
   1466e:	4798      	blx	r3
}
   14670:	b005      	add	sp, #20
   14672:	bd30      	pop	{r4, r5, pc}
   14674:	0002a0c7 	.word	0x0002a0c7

00014678 <send>:
{
   14678:	b508      	push	{r3, lr}
   1467a:	4684      	mov	ip, r0
   1467c:	4608      	mov	r0, r1
   1467e:	4611      	mov	r1, r2
   14680:	461a      	mov	r2, r3
	struct backend_data_t *data = instance->data;
   14682:	f8dc 3010 	ldr.w	r3, [ip, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   14686:	f503 7361 	add.w	r3, r3, #900	; 0x384
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1468a:	e8d3 3faf 	lda	r3, [r3]
   1468e:	2b02      	cmp	r3, #2
   14690:	d107      	bne.n	146a2 <send+0x2a>
	if (len == 0) {
   14692:	b14a      	cbz	r2, 146a8 <send+0x30>
	if (!rpmsg_ept) {
   14694:	b158      	cbz	r0, 146ae <send+0x36>
	ret = rpmsg_send(&rpmsg_ept->ep, msg, len);
   14696:	f015 fe15 	bl	2a2c4 <rpmsg_send>
	if (ret == RPMSG_ERR_NO_BUFF) {
   1469a:	4b08      	ldr	r3, [pc, #32]	; (146bc <send+0x44>)
   1469c:	4298      	cmp	r0, r3
   1469e:	d009      	beq.n	146b4 <send+0x3c>
}
   146a0:	bd08      	pop	{r3, pc}
		return -EBUSY;
   146a2:	f06f 000f 	mvn.w	r0, #15
   146a6:	e7fb      	b.n	146a0 <send+0x28>
		return -EBADMSG;
   146a8:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   146ac:	e7f8      	b.n	146a0 <send+0x28>
		return -ENOENT;
   146ae:	f06f 0001 	mvn.w	r0, #1
   146b2:	e7f5      	b.n	146a0 <send+0x28>
		return -ENOMEM;
   146b4:	f06f 000b 	mvn.w	r0, #11
   146b8:	e7f2      	b.n	146a0 <send+0x28>
   146ba:	bf00      	nop
   146bc:	fffff82e 	.word	0xfffff82e

000146c0 <bound_cb>:
{
   146c0:	b510      	push	{r4, lr}
   146c2:	4604      	mov	r4, r0
	rpmsg_send(&ept->ep, (uint8_t *)"", 0);
   146c4:	2200      	movs	r2, #0
   146c6:	4904      	ldr	r1, [pc, #16]	; (146d8 <bound_cb+0x18>)
   146c8:	f015 fdfc 	bl	2a2c4 <rpmsg_send>
	if (ept->cb->bound) {
   146cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   146ce:	681b      	ldr	r3, [r3, #0]
   146d0:	b10b      	cbz	r3, 146d6 <bound_cb+0x16>
		ept->cb->bound(ept->priv);
   146d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   146d4:	4798      	blx	r3
}
   146d6:	bd10      	pop	{r4, pc}
   146d8:	000347c0 	.word	0x000347c0

000146dc <mbox_init>:
{
   146dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   146de:	b083      	sub	sp, #12
	const struct backend_config_t *conf = instance->config;
   146e0:	6844      	ldr	r4, [r0, #4]
	struct backend_data_t *data = instance->data;
   146e2:	6905      	ldr	r5, [r0, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   146e4:	69e3      	ldr	r3, [r4, #28]
   146e6:	2b01      	cmp	r3, #1
   146e8:	d01f      	beq.n	1472a <mbox_init+0x4e>
						   K_PRIO_PREEMPT(conf->wq_prio);
   146ea:	6a27      	ldr	r7, [r4, #32]
	k_work_queue_init(&data->mbox_wq);
   146ec:	f505 762a 	add.w	r6, r5, #680	; 0x2a8
   146f0:	4630      	mov	r0, r6
   146f2:	f011 fca5 	bl	26040 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
   146f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   146f8:	2300      	movs	r3, #0
   146fa:	9300      	str	r3, [sp, #0]
   146fc:	463b      	mov	r3, r7
   146fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14702:	490e      	ldr	r1, [pc, #56]	; (1473c <mbox_init+0x60>)
   14704:	eb01 2180 	add.w	r1, r1, r0, lsl #10
   14708:	4630      	mov	r0, r6
   1470a:	f011 fcb3 	bl	26074 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
   1470e:	490c      	ldr	r1, [pc, #48]	; (14740 <mbox_init+0x64>)
   14710:	f505 7026 	add.w	r0, r5, #664	; 0x298
   14714:	f011 fc00 	bl	25f18 <k_work_init>
	err = mbox_register_callback(&conf->mbox_rx, mbox_callback, data);
   14718:	3414      	adds	r4, #20
   1471a:	462a      	mov	r2, r5
   1471c:	4909      	ldr	r1, [pc, #36]	; (14744 <mbox_init+0x68>)
   1471e:	4620      	mov	r0, r4
   14720:	f015 fc17 	bl	29f52 <mbox_register_callback>
	if (err != 0) {
   14724:	b120      	cbz	r0, 14730 <mbox_init+0x54>
}
   14726:	b003      	add	sp, #12
   14728:	bdf0      	pop	{r4, r5, r6, r7, pc}
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   1472a:	6a27      	ldr	r7, [r4, #32]
   1472c:	3f10      	subs	r7, #16
   1472e:	e7dd      	b.n	146ec <mbox_init+0x10>
   14730:	2101      	movs	r1, #1
   14732:	4620      	mov	r0, r4
   14734:	f015 fc1c 	bl	29f70 <z_impl_mbox_set_enabled>
	return mbox_set_enabled(&conf->mbox_rx, 1);
   14738:	e7f5      	b.n	14726 <mbox_init+0x4a>
   1473a:	bf00      	nop
   1473c:	2000a558 	.word	0x2000a558
   14740:	0002a475 	.word	0x0002a475
   14744:	0002a465 	.word	0x0002a465

00014748 <open>:
{
   14748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1474c:	b085      	sub	sp, #20
   1474e:	4604      	mov	r4, r0
	const struct backend_config_t *conf = instance->config;
   14750:	6846      	ldr	r6, [r0, #4]
	struct backend_data_t *data = instance->data;
   14752:	6905      	ldr	r5, [r0, #16]
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
   14754:	f505 7961 	add.w	r9, r5, #900	; 0x384
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14758:	2301      	movs	r3, #1
   1475a:	e8d9 2fef 	ldaex	r2, [r9]
   1475e:	2a00      	cmp	r2, #0
   14760:	d103      	bne.n	1476a <open+0x22>
   14762:	e8c9 3fe1 	stlex	r1, r3, [r9]
   14766:	2900      	cmp	r1, #0
   14768:	d1f7      	bne.n	1475a <open+0x12>
   1476a:	d152      	bne.n	14812 <open+0xca>
	err = vr_shm_configure(&data->vr, conf);
   1476c:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
   14770:	4631      	mov	r1, r6
   14772:	4640      	mov	r0, r8
   14774:	f015 fe30 	bl	2a3d8 <vr_shm_configure>
	if (err != 0) {
   14778:	4607      	mov	r7, r0
   1477a:	b150      	cbz	r0, 14792 <open+0x4a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1477c:	2300      	movs	r3, #0
   1477e:	e8d9 2fef 	ldaex	r2, [r9]
   14782:	e8c9 3fe1 	stlex	r1, r3, [r9]
   14786:	2900      	cmp	r1, #0
   14788:	d1f9      	bne.n	1477e <open+0x36>
}
   1478a:	4638      	mov	r0, r7
   1478c:	b005      	add	sp, #20
   1478e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->vr.notify_cb = virtio_notify_cb;
   14792:	4b21      	ldr	r3, [pc, #132]	; (14818 <open+0xd0>)
   14794:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
	data->vr.priv = (void *) conf;
   14798:	f8c5 628c 	str.w	r6, [r5, #652]	; 0x28c
	err = ipc_static_vrings_init(&data->vr, conf->role);
   1479c:	6831      	ldr	r1, [r6, #0]
   1479e:	4640      	mov	r0, r8
   147a0:	f000 f946 	bl	14a30 <ipc_static_vrings_init>
	if (err != 0) {
   147a4:	4607      	mov	r7, r0
   147a6:	2800      	cmp	r0, #0
   147a8:	d1e8      	bne.n	1477c <open+0x34>
	err = mbox_init(instance);
   147aa:	4620      	mov	r0, r4
   147ac:	f7ff ff96 	bl	146dc <mbox_init>
	if (err != 0) {
   147b0:	4607      	mov	r7, r0
   147b2:	2800      	cmp	r0, #0
   147b4:	d1e2      	bne.n	1477c <open+0x34>
	rpmsg_inst->bound_cb = bound_cb;
   147b6:	4b19      	ldr	r3, [pc, #100]	; (1481c <open+0xd4>)
   147b8:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	rpmsg_inst->cb = ept_cb;
   147bc:	4b18      	ldr	r3, [pc, #96]	; (14820 <open+0xd8>)
   147be:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   147c2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   147c4:	f8d5 3250 	ldr.w	r3, [r5, #592]	; 0x250
   147c8:	f8d5 1380 	ldr.w	r1, [r5, #896]	; 0x380
   147cc:	4815      	ldr	r0, [pc, #84]	; (14824 <open+0xdc>)
   147ce:	9003      	str	r0, [sp, #12]
   147d0:	f8d5 01f8 	ldr.w	r0, [r5, #504]	; 0x1f8
   147d4:	9002      	str	r0, [sp, #8]
   147d6:	f8d5 01f0 	ldr.w	r0, [r5, #496]	; 0x1f0
   147da:	9001      	str	r0, [sp, #4]
   147dc:	f8cd 8000 	str.w	r8, [sp]
   147e0:	4628      	mov	r0, r5
   147e2:	f000 f881 	bl	148e8 <ipc_rpmsg_init>
	if (err != 0) {
   147e6:	4607      	mov	r7, r0
   147e8:	2800      	cmp	r0, #0
   147ea:	d1c7      	bne.n	1477c <open+0x34>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   147ec:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   147f0:	f00f fd00 	bl	241f4 <rpmsg_virtio_get_buffer_size>
   147f4:	f8c5 0388 	str.w	r0, [r5, #904]	; 0x388
	if (data->tx_buffer_size < 0) {
   147f8:	2800      	cmp	r0, #0
   147fa:	db07      	blt.n	1480c <open+0xc4>
   147fc:	2302      	movs	r3, #2
   147fe:	e8d9 2fef 	ldaex	r2, [r9]
   14802:	e8c9 3fe1 	stlex	r1, r3, [r9]
   14806:	2900      	cmp	r1, #0
   14808:	d0bf      	beq.n	1478a <open+0x42>
   1480a:	e7f8      	b.n	147fe <open+0xb6>
		err = -EINVAL;
   1480c:	f06f 0715 	mvn.w	r7, #21
   14810:	e7b4      	b.n	1477c <open+0x34>
		return -EALREADY;
   14812:	f06f 0777 	mvn.w	r7, #119	; 0x77
   14816:	e7b8      	b.n	1478a <open+0x42>
   14818:	00029fad 	.word	0x00029fad
   1481c:	000146c1 	.word	0x000146c1
   14820:	0002a2df 	.word	0x0002a2df
   14824:	0002a1cd 	.word	0x0002a1cd

00014828 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
   14828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1482c:	b085      	sub	sp, #20
   1482e:	4607      	mov	r7, r0
   14830:	460e      	mov	r6, r1
   14832:	4691      	mov	r9, r2
	struct ipc_rpmsg_instance *instance;
	struct ipc_rpmsg_ept *ept;
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   14834:	f8d0 80a4 	ldr.w	r8, [r0, #164]	; 0xa4

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   14838:	2400      	movs	r4, #0
   1483a:	e000      	b.n	1483e <ns_bind_cb+0x16>
   1483c:	3401      	adds	r4, #1
   1483e:	2c01      	cmp	r4, #1
   14840:	d828      	bhi.n	14894 <ns_bind_cb+0x6c>
		ept = &instance->endpoint[i];
   14842:	f5a8 71c4 	sub.w	r1, r8, #392	; 0x188
   14846:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
   1484a:	eb01 1505 	add.w	r5, r1, r5, lsl #4

		if (strcmp(name, ept->name) == 0) {
   1484e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   14852:	011b      	lsls	r3, r3, #4
   14854:	3340      	adds	r3, #64	; 0x40
   14856:	4419      	add	r1, r3
   14858:	4630      	mov	r0, r6
   1485a:	f016 fc3d 	bl	2b0d8 <strcmp>
   1485e:	2800      	cmp	r0, #0
   14860:	d1ec      	bne.n	1483c <ns_bind_cb+0x14>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   14862:	4b0e      	ldr	r3, [pc, #56]	; (1489c <ns_bind_cb+0x74>)
   14864:	9302      	str	r3, [sp, #8]
   14866:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1486a:	9301      	str	r3, [sp, #4]
   1486c:	f8cd 9000 	str.w	r9, [sp]
   14870:	f04f 33ff 	mov.w	r3, #4294967295
   14874:	4632      	mov	r2, r6
   14876:	4639      	mov	r1, r7
   14878:	4628      	mov	r0, r5
   1487a:	f00f fb09 	bl	23e90 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
   1487e:	b948      	cbnz	r0, 14894 <ns_bind_cb+0x6c>
				return;
			}

			ept->bound = true;
   14880:	2101      	movs	r1, #1
   14882:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
			if (instance->bound_cb) {
   14886:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1488a:	2b00      	cmp	r3, #0
   1488c:	d0d6      	beq.n	1483c <ns_bind_cb+0x14>
				instance->bound_cb(ept);
   1488e:	4628      	mov	r0, r5
   14890:	4798      	blx	r3
   14892:	e7d3      	b.n	1483c <ns_bind_cb+0x14>
			}
		}
	}
}
   14894:	b005      	add	sp, #20
   14896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1489a:	bf00      	nop
   1489c:	0002a4bb 	.word	0x0002a4bb

000148a0 <ipc_rpmsg_register_ept>:
int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
   148a0:	b1c8      	cbz	r0, 148d6 <ipc_rpmsg_register_ept+0x36>
{
   148a2:	b510      	push	{r4, lr}
   148a4:	b084      	sub	sp, #16
   148a6:	4614      	mov	r4, r2
   148a8:	4603      	mov	r3, r0
	if (!instance || !ept) {
   148aa:	b1ba      	cbz	r2, 148dc <ipc_rpmsg_register_ept+0x3c>
 * @return - RPMsg device pointed by RPMsg virtio device
 */
static inline struct rpmsg_device *
rpmsg_virtio_get_rpmsg_device(struct rpmsg_virtio_device *rvdev)
{
	return &rvdev->rdev;
   148ac:	30e0      	adds	r0, #224	; 0xe0
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
   148ae:	2901      	cmp	r1, #1
   148b0:	d002      	beq.n	148b8 <ipc_rpmsg_register_ept+0x18>
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
   148b2:	2000      	movs	r0, #0
}
   148b4:	b004      	add	sp, #16
   148b6:	bd10      	pop	{r4, pc}
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
   148b8:	4a0a      	ldr	r2, [pc, #40]	; (148e4 <ipc_rpmsg_register_ept+0x44>)
   148ba:	9202      	str	r2, [sp, #8]
   148bc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
   148c0:	9301      	str	r3, [sp, #4]
   148c2:	f04f 33ff 	mov.w	r3, #4294967295
   148c6:	9300      	str	r3, [sp, #0]
   148c8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   148cc:	4601      	mov	r1, r0
   148ce:	4620      	mov	r0, r4
   148d0:	f00f fade 	bl	23e90 <rpmsg_create_ept>
   148d4:	e7ee      	b.n	148b4 <ipc_rpmsg_register_ept+0x14>
		return -EINVAL;
   148d6:	f06f 0015 	mvn.w	r0, #21
}
   148da:	4770      	bx	lr
		return -EINVAL;
   148dc:	f06f 0015 	mvn.w	r0, #21
   148e0:	e7e8      	b.n	148b4 <ipc_rpmsg_register_ept+0x14>
   148e2:	bf00      	nop
   148e4:	0002a4bb 	.word	0x0002a4bb

000148e8 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
   148e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148ec:	b084      	sub	sp, #16
   148ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   148f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
   148f2:	b338      	cbz	r0, 14944 <ipc_rpmsg_init+0x5c>
   148f4:	461f      	mov	r7, r3
   148f6:	4606      	mov	r6, r0
   148f8:	b33d      	cbz	r5, 1494a <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
   148fa:	b1bc      	cbz	r4, 1492c <ipc_rpmsg_init+0x44>
		bind_cb = ns_bind_cb;
	}

	if (role == RPMSG_HOST) {
   148fc:	b9c1      	cbnz	r1, 14930 <ipc_rpmsg_init+0x48>
		struct rpmsg_virtio_config config;

		config.h2r_buf_size = (uint32_t) buffer_size;
   148fe:	9202      	str	r2, [sp, #8]
		config.r2h_buf_size = (uint32_t) buffer_size;
   14900:	9203      	str	r2, [sp, #12]

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   14902:	f506 78c4 	add.w	r8, r6, #392	; 0x188
   14906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14908:	4629      	mov	r1, r5
   1490a:	4640      	mov	r0, r8
   1490c:	f01a fa0e 	bl	2ed2c <rpmsg_virtio_init_shm_pool>

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   14910:	ab02      	add	r3, sp, #8
   14912:	9301      	str	r3, [sp, #4]
   14914:	f8cd 8000 	str.w	r8, [sp]
   14918:	463b      	mov	r3, r7
   1491a:	4622      	mov	r2, r4
   1491c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1491e:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   14922:	f00f fc7d 	bl	24220 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
   14926:	b004      	add	sp, #16
   14928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bind_cb = ns_bind_cb;
   1492c:	4c08      	ldr	r4, [pc, #32]	; (14950 <ipc_rpmsg_init+0x68>)
   1492e:	e7e5      	b.n	148fc <ipc_rpmsg_init+0x14>
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   14930:	2300      	movs	r3, #0
   14932:	9300      	str	r3, [sp, #0]
   14934:	463b      	mov	r3, r7
   14936:	4622      	mov	r2, r4
   14938:	990a      	ldr	r1, [sp, #40]	; 0x28
   1493a:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   1493e:	f00f fd71 	bl	24424 <rpmsg_init_vdev>
   14942:	e7f0      	b.n	14926 <ipc_rpmsg_init+0x3e>
		return -EINVAL;
   14944:	f06f 0015 	mvn.w	r0, #21
   14948:	e7ed      	b.n	14926 <ipc_rpmsg_init+0x3e>
   1494a:	f06f 0015 	mvn.w	r0, #21
   1494e:	e7ea      	b.n	14926 <ipc_rpmsg_init+0x3e>
   14950:	00014829 	.word	0x00014829

00014954 <libmetal_setup>:
	.set_features = virtio_set_features,
	.notify = virtio_notify,
};

static int libmetal_setup(struct ipc_static_vrings *vr)
{
   14954:	b510      	push	{r4, lr}
   14956:	b084      	sub	sp, #16
   14958:	4604      	mov	r4, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   1495a:	4a11      	ldr	r2, [pc, #68]	; (149a0 <libmetal_setup+0x4c>)
   1495c:	ab02      	add	r3, sp, #8
   1495e:	e892 0003 	ldmia.w	r2, {r0, r1}
   14962:	e883 0003 	stmia.w	r3, {r0, r1}
	struct metal_device *device;
	int err;

	err = metal_init(&metal_params);
   14966:	4618      	mov	r0, r3
   14968:	f00f f922 	bl	23bb0 <metal_init>
	if (err != 0) {
   1496c:	b108      	cbz	r0, 14972 <libmetal_setup+0x1e>
	if (vr->shm_io == NULL) {
		return err;
	}

	return 0;
}
   1496e:	b004      	add	sp, #16
   14970:	bd10      	pop	{r4, pc}
	err = metal_register_generic_device(&vr->shm_device);
   14972:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14976:	f00f f8fb 	bl	23b70 <metal_register_generic_device>
	if (err != 0) {
   1497a:	2800      	cmp	r0, #0
   1497c:	d1f7      	bne.n	1496e <libmetal_setup+0x1a>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   1497e:	aa01      	add	r2, sp, #4
   14980:	4908      	ldr	r1, [pc, #32]	; (149a4 <libmetal_setup+0x50>)
   14982:	4809      	ldr	r0, [pc, #36]	; (149a8 <libmetal_setup+0x54>)
   14984:	f019 fc4e 	bl	2e224 <metal_device_open>
	if (err != 0) {
   14988:	2800      	cmp	r0, #0
   1498a:	d1f0      	bne.n	1496e <libmetal_setup+0x1a>
	vr->shm_io = metal_device_io_region(device, 0);
   1498c:	9b01      	ldr	r3, [sp, #4]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
   1498e:	689a      	ldr	r2, [r3, #8]
		? &device->regions[index]
		: NULL);
   14990:	b11a      	cbz	r2, 1499a <libmetal_setup+0x46>
   14992:	330c      	adds	r3, #12
   14994:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (vr->shm_io == NULL) {
   14998:	e7e9      	b.n	1496e <libmetal_setup+0x1a>
   1499a:	2300      	movs	r3, #0
   1499c:	e7fa      	b.n	14994 <libmetal_setup+0x40>
   1499e:	bf00      	nop
   149a0:	0002f970 	.word	0x0002f970
   149a4:	000308dc 	.word	0x000308dc
   149a8:	000308e8 	.word	0x000308e8

000149ac <vq_setup>:

	return 0;
}

static int vq_setup(struct ipc_static_vrings *vr, unsigned int role)
{
   149ac:	b538      	push	{r3, r4, r5, lr}
   149ae:	4604      	mov	r4, r0
   149b0:	460d      	mov	r5, r1
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   149b2:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   149b6:	f015 fdc0 	bl	2a53a <virtqueue_allocate>
   149ba:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
   149be:	b378      	cbz	r0, 14a20 <vq_setup+0x74>
		return -ENOMEM;
	}

	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
   149c0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   149c4:	f015 fdb9 	bl	2a53a <virtqueue_allocate>
   149c8:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
   149cc:	b358      	cbz	r0, 14a26 <vq_setup+0x7a>
		return -ENOMEM;
	}

	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   149ce:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
   149d2:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   149d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   149da:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   149de:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   149e2:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
   149e6:	2304      	movs	r3, #4
   149e8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   149ec:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
   149f0:	f8c4 c0a4 	str.w	ip, [r4, #164]	; 0xa4

	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
   149f4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   149f8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   149fc:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
   14a00:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
   14a04:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
   14a08:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

	vr->vdev.role = role;
   14a0c:	61a5      	str	r5, [r4, #24]

	vr->vdev.vrings_num = VRING_COUNT;
   14a0e:	2302      	movs	r3, #2
   14a10:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
   14a12:	4b06      	ldr	r3, [pc, #24]	; (14a2c <vq_setup+0x80>)
   14a14:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
   14a16:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
   14a1a:	62e3      	str	r3, [r4, #44]	; 0x2c

	return 0;
   14a1c:	2000      	movs	r0, #0
}
   14a1e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   14a20:	f06f 000b 	mvn.w	r0, #11
   14a24:	e7fb      	b.n	14a1e <vq_setup+0x72>
		return -ENOMEM;
   14a26:	f06f 000b 	mvn.w	r0, #11
   14a2a:	e7f8      	b.n	14a1e <vq_setup+0x72>
   14a2c:	000308f0 	.word	0x000308f0

00014a30 <ipc_static_vrings_init>:

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
	int err = 0;

	if (!vr) {
   14a30:	b310      	cbz	r0, 14a78 <ipc_static_vrings_init+0x48>
{
   14a32:	b530      	push	{r4, r5, lr}
   14a34:	b085      	sub	sp, #20
   14a36:	460d      	mov	r5, r1
   14a38:	4604      	mov	r4, r0
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
   14a3a:	4b11      	ldr	r3, [pc, #68]	; (14a80 <ipc_static_vrings_init+0x50>)
   14a3c:	6343      	str	r3, [r0, #52]	; 0x34
	vr->shm_device.num_regions = 1;
   14a3e:	2301      	movs	r3, #1
   14a40:	63c3      	str	r3, [r0, #60]	; 0x3c
	vr->shm_physmap[0] = vr->shm_addr;
   14a42:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   14a46:	6301      	str	r1, [r0, #48]	; 0x30

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   14a48:	2300      	movs	r3, #0
   14a4a:	9302      	str	r3, [sp, #8]
   14a4c:	9301      	str	r3, [sp, #4]
   14a4e:	f04f 33ff 	mov.w	r3, #4294967295
   14a52:	9300      	str	r3, [sp, #0]
   14a54:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   14a58:	f100 0230 	add.w	r2, r0, #48	; 0x30
   14a5c:	3040      	adds	r0, #64	; 0x40
   14a5e:	f019 fc06 	bl	2e26e <metal_io_init>
		      vr->shm_physmap, vr->shm_size, -1, 0, NULL);

	err = libmetal_setup(vr);
   14a62:	4620      	mov	r0, r4
   14a64:	f7ff ff76 	bl	14954 <libmetal_setup>
	if (err != 0) {
   14a68:	b108      	cbz	r0, 14a6e <ipc_static_vrings_init+0x3e>
		return err;
	}

	return vq_setup(vr, role);
}
   14a6a:	b005      	add	sp, #20
   14a6c:	bd30      	pop	{r4, r5, pc}
	return vq_setup(vr, role);
   14a6e:	4629      	mov	r1, r5
   14a70:	4620      	mov	r0, r4
   14a72:	f7ff ff9b 	bl	149ac <vq_setup>
   14a76:	e7f8      	b.n	14a6a <ipc_static_vrings_init+0x3a>
		return -EINVAL;
   14a78:	f06f 0015 	mvn.w	r0, #21
}
   14a7c:	4770      	bx	lr
   14a7e:	bf00      	nop
   14a80:	000308dc 	.word	0x000308dc

00014a84 <pm_exit_pos_ops>:
}
#endif  /* !CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE */
#endif	/* CONFIG_PM_DEVICE */

static inline void pm_exit_pos_ops(struct pm_state_info *info)
{
   14a84:	b508      	push	{r3, lr}
	extern __weak void
		pm_state_exit_post_ops(enum pm_state state, uint8_t substate_id);

	if (pm_state_exit_post_ops != NULL) {
   14a86:	4b06      	ldr	r3, [pc, #24]	; (14aa0 <pm_exit_pos_ops+0x1c>)
   14a88:	b123      	cbz	r3, 14a94 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14a8a:	7841      	ldrb	r1, [r0, #1]
   14a8c:	7800      	ldrb	r0, [r0, #0]
   14a8e:	f015 f947 	bl	29d20 <pm_state_exit_post_ops>
		 * The kernel expects that irqs are unlocked after this.
		 */

		irq_unlock(0);
	}
}
   14a92:	bd08      	pop	{r3, pc}
   14a94:	2300      	movs	r3, #0
   14a96:	f383 8811 	msr	BASEPRI, r3
   14a9a:	f3bf 8f6f 	isb	sy
   14a9e:	e7f8      	b.n	14a92 <pm_exit_pos_ops+0xe>
   14aa0:	00029d21 	.word	0x00029d21

00014aa4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14aa4:	b570      	push	{r4, r5, r6, lr}
   14aa6:	4605      	mov	r5, r0
	__asm__ volatile(
   14aa8:	f04f 0320 	mov.w	r3, #32
   14aac:	f3ef 8611 	mrs	r6, BASEPRI
   14ab0:	f383 8812 	msr	BASEPRI_MAX, r3
   14ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14ab8:	4822      	ldr	r0, [pc, #136]	; (14b44 <pm_state_notify+0xa0>)
   14aba:	f010 f9bd 	bl	24e38 <z_spin_lock_valid>
   14abe:	b128      	cbz	r0, 14acc <pm_state_notify+0x28>
	z_spin_lock_set_owner(l);
   14ac0:	4820      	ldr	r0, [pc, #128]	; (14b44 <pm_state_notify+0xa0>)
   14ac2:	f010 f9d9 	bl	24e78 <z_spin_lock_set_owner>
	return list->head;
   14ac6:	4b20      	ldr	r3, [pc, #128]	; (14b48 <pm_state_notify+0xa4>)
   14ac8:	681c      	ldr	r4, [r3, #0]
   14aca:	e01c      	b.n	14b06 <pm_state_notify+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14acc:	4c1f      	ldr	r4, [pc, #124]	; (14b4c <pm_state_notify+0xa8>)
   14ace:	2394      	movs	r3, #148	; 0x94
   14ad0:	4622      	mov	r2, r4
   14ad2:	491f      	ldr	r1, [pc, #124]	; (14b50 <pm_state_notify+0xac>)
   14ad4:	481f      	ldr	r0, [pc, #124]	; (14b54 <pm_state_notify+0xb0>)
   14ad6:	f015 f808 	bl	29aea <assert_print>
   14ada:	491a      	ldr	r1, [pc, #104]	; (14b44 <pm_state_notify+0xa0>)
   14adc:	481e      	ldr	r0, [pc, #120]	; (14b58 <pm_state_notify+0xb4>)
   14ade:	f015 f804 	bl	29aea <assert_print>
   14ae2:	2194      	movs	r1, #148	; 0x94
   14ae4:	4620      	mov	r0, r4
   14ae6:	f014 fff9 	bl	29adc <assert_post_action>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   14aea:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   14aec:	b13a      	cbz	r2, 14afe <pm_state_notify+0x5a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14aee:	4b1b      	ldr	r3, [pc, #108]	; (14b5c <pm_state_notify+0xb8>)
   14af0:	7d1b      	ldrb	r3, [r3, #20]
   14af2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14af6:	491a      	ldr	r1, [pc, #104]	; (14b60 <pm_state_notify+0xbc>)
   14af8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   14afc:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14afe:	4623      	mov	r3, r4
	return node->next;
   14b00:	6824      	ldr	r4, [r4, #0]
   14b02:	b104      	cbz	r4, 14b06 <pm_state_notify+0x62>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14b04:	b123      	cbz	r3, 14b10 <pm_state_notify+0x6c>
   14b06:	b12c      	cbz	r4, 14b14 <pm_state_notify+0x70>
		if (entering_state) {
   14b08:	2d00      	cmp	r5, #0
   14b0a:	d0ee      	beq.n	14aea <pm_state_notify+0x46>
			callback = notifier->state_entry;
   14b0c:	6862      	ldr	r2, [r4, #4]
   14b0e:	e7ed      	b.n	14aec <pm_state_notify+0x48>
   14b10:	461c      	mov	r4, r3
   14b12:	e7f8      	b.n	14b06 <pm_state_notify+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14b14:	480b      	ldr	r0, [pc, #44]	; (14b44 <pm_state_notify+0xa0>)
   14b16:	f010 f99f 	bl	24e58 <z_spin_unlock_valid>
   14b1a:	b120      	cbz	r0, 14b26 <pm_state_notify+0x82>
	__asm__ volatile(
   14b1c:	f386 8811 	msr	BASEPRI, r6
   14b20:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   14b24:	bd70      	pop	{r4, r5, r6, pc}
   14b26:	4c09      	ldr	r4, [pc, #36]	; (14b4c <pm_state_notify+0xa8>)
   14b28:	23c2      	movs	r3, #194	; 0xc2
   14b2a:	4622      	mov	r2, r4
   14b2c:	490d      	ldr	r1, [pc, #52]	; (14b64 <pm_state_notify+0xc0>)
   14b2e:	4809      	ldr	r0, [pc, #36]	; (14b54 <pm_state_notify+0xb0>)
   14b30:	f014 ffdb 	bl	29aea <assert_print>
   14b34:	4903      	ldr	r1, [pc, #12]	; (14b44 <pm_state_notify+0xa0>)
   14b36:	480c      	ldr	r0, [pc, #48]	; (14b68 <pm_state_notify+0xc4>)
   14b38:	f014 ffd7 	bl	29aea <assert_print>
   14b3c:	21c2      	movs	r1, #194	; 0xc2
   14b3e:	4620      	mov	r0, r4
   14b40:	f014 ffcc 	bl	29adc <assert_post_action>
   14b44:	200097c0 	.word	0x200097c0
   14b48:	200097e0 	.word	0x200097e0
   14b4c:	000301b0 	.word	0x000301b0
   14b50:	00030210 	.word	0x00030210
   14b54:	0002fdac 	.word	0x0002fdac
   14b58:	00030228 	.word	0x00030228
   14b5c:	20009ce8 	.word	0x20009ce8
   14b60:	200097d4 	.word	0x200097d4
   14b64:	000301e0 	.word	0x000301e0
   14b68:	000301f8 	.word	0x000301f8

00014b6c <pm_system_resume>:

void pm_system_resume(void)
{
   14b6c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   14b6e:	4b0e      	ldr	r3, [pc, #56]	; (14ba8 <pm_system_resume+0x3c>)
   14b70:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14b72:	4621      	mov	r1, r4
   14b74:	480d      	ldr	r0, [pc, #52]	; (14bac <pm_system_resume+0x40>)
   14b76:	f015 fd28 	bl	2a5ca <atomic_test_and_clear_bit>
   14b7a:	b900      	cbnz	r0, 14b7e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   14b7c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   14b7e:	0065      	lsls	r5, r4, #1
   14b80:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   14b84:	4e0a      	ldr	r6, [pc, #40]	; (14bb0 <pm_system_resume+0x44>)
   14b86:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   14b8a:	f7ff ff7b 	bl	14a84 <pm_exit_pos_ops>
		pm_state_notify(false);
   14b8e:	2000      	movs	r0, #0
   14b90:	f7ff ff88 	bl	14aa4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14b94:	192b      	adds	r3, r5, r4
   14b96:	0099      	lsls	r1, r3, #2
   14b98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   14b9c:	2200      	movs	r2, #0
   14b9e:	5072      	str	r2, [r6, r1]
   14ba0:	605a      	str	r2, [r3, #4]
   14ba2:	609a      	str	r2, [r3, #8]
}
   14ba4:	e7ea      	b.n	14b7c <pm_system_resume+0x10>
   14ba6:	bf00      	nop
   14ba8:	20009ce8 	.word	0x20009ce8
   14bac:	200097e8 	.word	0x200097e8
   14bb0:	200097d4 	.word	0x200097d4

00014bb4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   14bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bb6:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   14bb8:	4b4f      	ldr	r3, [pc, #316]	; (14cf8 <pm_system_suspend+0x144>)
   14bba:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   14bbc:	f04f 0320 	mov.w	r3, #32
   14bc0:	f3ef 8611 	mrs	r6, BASEPRI
   14bc4:	f383 8812 	msr	BASEPRI_MAX, r3
   14bc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14bcc:	484b      	ldr	r0, [pc, #300]	; (14cfc <pm_system_suspend+0x148>)
   14bce:	f010 f933 	bl	24e38 <z_spin_lock_valid>
   14bd2:	2800      	cmp	r0, #0
   14bd4:	d04b      	beq.n	14c6e <pm_system_suspend+0xba>
	z_spin_lock_set_owner(l);
   14bd6:	4849      	ldr	r0, [pc, #292]	; (14cfc <pm_system_suspend+0x148>)
   14bd8:	f010 f94e 	bl	24e78 <z_spin_lock_set_owner>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14bdc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14be0:	4a47      	ldr	r2, [pc, #284]	; (14d00 <pm_system_suspend+0x14c>)
   14be2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14be6:	2b00      	cmp	r3, #0
   14be8:	d050      	beq.n	14c8c <pm_system_suspend+0xd8>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14bea:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14bee:	4b45      	ldr	r3, [pc, #276]	; (14d04 <pm_system_suspend+0x150>)
   14bf0:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   14bf4:	4f42      	ldr	r7, [pc, #264]	; (14d00 <pm_system_suspend+0x14c>)
   14bf6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   14bfa:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   14bfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14c02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14c06:	2300      	movs	r3, #0
   14c08:	f807 300e 	strb.w	r3, [r7, lr]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14c0c:	483b      	ldr	r0, [pc, #236]	; (14cfc <pm_system_suspend+0x148>)
   14c0e:	f010 f923 	bl	24e58 <z_spin_unlock_valid>
   14c12:	4607      	mov	r7, r0
   14c14:	2800      	cmp	r0, #0
   14c16:	d048      	beq.n	14caa <pm_system_suspend+0xf6>
	__asm__ volatile(
   14c18:	f386 8811 	msr	BASEPRI, r6
   14c1c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14c20:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14c24:	4a37      	ldr	r2, [pc, #220]	; (14d04 <pm_system_suspend+0x150>)
   14c26:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14c2a:	2b00      	cmp	r3, #0
   14c2c:	d062      	beq.n	14cf4 <pm_system_suspend+0x140>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14c2e:	f1b5 3fff 	cmp.w	r5, #4294967295
   14c32:	d149      	bne.n	14cc8 <pm_system_suspend+0x114>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14c34:	f011 ff24 	bl	26a80 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14c38:	2001      	movs	r0, #1
   14c3a:	f7ff ff33 	bl	14aa4 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   14c3e:	4621      	mov	r1, r4
   14c40:	4831      	ldr	r0, [pc, #196]	; (14d08 <pm_system_suspend+0x154>)
   14c42:	f015 fcda 	bl	2a5fa <atomic_set_bit>
	if (pm_state_set != NULL) {
   14c46:	4b31      	ldr	r3, [pc, #196]	; (14d0c <pm_system_suspend+0x158>)
   14c48:	b15b      	cbz	r3, 14c62 <pm_system_suspend+0xae>
		pm_state_set(info->state, info->substate_id);
   14c4a:	4a2e      	ldr	r2, [pc, #184]	; (14d04 <pm_system_suspend+0x150>)
   14c4c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14c50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14c54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   14c58:	7859      	ldrb	r1, [r3, #1]
   14c5a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   14c5e:	f015 f857 	bl	29d10 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14c62:	f7ff ff83 	bl	14b6c <pm_system_resume>
	k_sched_unlock();
   14c66:	f012 fc59 	bl	2751c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   14c6a:	4638      	mov	r0, r7
   14c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14c6e:	4c28      	ldr	r4, [pc, #160]	; (14d10 <pm_system_suspend+0x15c>)
   14c70:	2394      	movs	r3, #148	; 0x94
   14c72:	4622      	mov	r2, r4
   14c74:	4927      	ldr	r1, [pc, #156]	; (14d14 <pm_system_suspend+0x160>)
   14c76:	4828      	ldr	r0, [pc, #160]	; (14d18 <pm_system_suspend+0x164>)
   14c78:	f014 ff37 	bl	29aea <assert_print>
   14c7c:	491f      	ldr	r1, [pc, #124]	; (14cfc <pm_system_suspend+0x148>)
   14c7e:	4827      	ldr	r0, [pc, #156]	; (14d1c <pm_system_suspend+0x168>)
   14c80:	f014 ff33 	bl	29aea <assert_print>
   14c84:	2194      	movs	r1, #148	; 0x94
   14c86:	4620      	mov	r0, r4
   14c88:	f014 ff28 	bl	29adc <assert_post_action>
		info = pm_policy_next_state(id, ticks);
   14c8c:	4629      	mov	r1, r5
   14c8e:	4620      	mov	r0, r4
   14c90:	f000 f84e 	bl	14d30 <pm_policy_next_state>
		if (info != NULL) {
   14c94:	2800      	cmp	r0, #0
   14c96:	d0b9      	beq.n	14c0c <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   14c98:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   14c9c:	4b19      	ldr	r3, [pc, #100]	; (14d04 <pm_system_suspend+0x150>)
   14c9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14ca2:	c807      	ldmia	r0, {r0, r1, r2}
   14ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   14ca8:	e7b0      	b.n	14c0c <pm_system_suspend+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14caa:	4c19      	ldr	r4, [pc, #100]	; (14d10 <pm_system_suspend+0x15c>)
   14cac:	23c2      	movs	r3, #194	; 0xc2
   14cae:	4622      	mov	r2, r4
   14cb0:	491b      	ldr	r1, [pc, #108]	; (14d20 <pm_system_suspend+0x16c>)
   14cb2:	4819      	ldr	r0, [pc, #100]	; (14d18 <pm_system_suspend+0x164>)
   14cb4:	f014 ff19 	bl	29aea <assert_print>
   14cb8:	4910      	ldr	r1, [pc, #64]	; (14cfc <pm_system_suspend+0x148>)
   14cba:	481a      	ldr	r0, [pc, #104]	; (14d24 <pm_system_suspend+0x170>)
   14cbc:	f014 ff15 	bl	29aea <assert_print>
   14cc0:	21c2      	movs	r1, #194	; 0xc2
   14cc2:	4620      	mov	r0, r4
   14cc4:	f014 ff0a 	bl	29adc <assert_post_action>
		     k_us_to_ticks_ceil32(
   14cc8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14ccc:	4b0d      	ldr	r3, [pc, #52]	; (14d04 <pm_system_suspend+0x150>)
   14cce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14cd2:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   14cd4:	0c41      	lsrs	r1, r0, #17
   14cd6:	03c0      	lsls	r0, r0, #15
   14cd8:	4b13      	ldr	r3, [pc, #76]	; (14d28 <pm_system_suspend+0x174>)
   14cda:	18c0      	adds	r0, r0, r3
   14cdc:	4a13      	ldr	r2, [pc, #76]	; (14d2c <pm_system_suspend+0x178>)
   14cde:	f04f 0300 	mov.w	r3, #0
   14ce2:	f141 0100 	adc.w	r1, r1, #0
   14ce6:	f7fb fa37 	bl	10158 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   14cea:	2101      	movs	r1, #1
   14cec:	1a28      	subs	r0, r5, r0
   14cee:	f013 fa5b 	bl	281a8 <z_set_timeout_expiry>
   14cf2:	e79f      	b.n	14c34 <pm_system_suspend+0x80>
		return false;
   14cf4:	2700      	movs	r7, #0
   14cf6:	e7b8      	b.n	14c6a <pm_system_suspend+0xb6>
   14cf8:	20009ce8 	.word	0x20009ce8
   14cfc:	200097c4 	.word	0x200097c4
   14d00:	200097c8 	.word	0x200097c8
   14d04:	200097d4 	.word	0x200097d4
   14d08:	200097e8 	.word	0x200097e8
   14d0c:	00029d11 	.word	0x00029d11
   14d10:	000301b0 	.word	0x000301b0
   14d14:	00030210 	.word	0x00030210
   14d18:	0002fdac 	.word	0x0002fdac
   14d1c:	00030228 	.word	0x00030228
   14d20:	000301e0 	.word	0x000301e0
   14d24:	000301f8 	.word	0x000301f8
   14d28:	000f423f 	.word	0x000f423f
   14d2c:	000f4240 	.word	0x000f4240

00014d30 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   14d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d34:	b082      	sub	sp, #8
   14d36:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14d38:	a901      	add	r1, sp, #4
   14d3a:	f000 f845 	bl	14dc8 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14d3e:	1e44      	subs	r4, r0, #1
   14d40:	b224      	sxth	r4, r4
   14d42:	e007      	b.n	14d54 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   14d44:	f1b6 3fff 	cmp.w	r6, #4294967295
   14d48:	d033      	beq.n	14db2 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   14d4a:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   14d4c:	45b0      	cmp	r8, r6
   14d4e:	d930      	bls.n	14db2 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14d50:	3c01      	subs	r4, #1
   14d52:	b224      	sxth	r4, r4
   14d54:	2c00      	cmp	r4, #0
   14d56:	db2b      	blt.n	14db0 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   14d58:	9b01      	ldr	r3, [sp, #4]
   14d5a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14d5e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   14d62:	7869      	ldrb	r1, [r5, #1]
   14d64:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   14d68:	f015 fc56 	bl	2a618 <pm_policy_state_lock_is_active>
   14d6c:	2800      	cmp	r0, #0
   14d6e:	d1ef      	bne.n	14d50 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   14d70:	6868      	ldr	r0, [r5, #4]
   14d72:	0c41      	lsrs	r1, r0, #17
   14d74:	03c0      	lsls	r0, r0, #15
   14d76:	4f11      	ldr	r7, [pc, #68]	; (14dbc <pm_policy_next_state+0x8c>)
   14d78:	19c0      	adds	r0, r0, r7
   14d7a:	4a11      	ldr	r2, [pc, #68]	; (14dc0 <pm_policy_next_state+0x90>)
   14d7c:	f04f 0300 	mov.w	r3, #0
   14d80:	f141 0100 	adc.w	r1, r1, #0
   14d84:	f7fb f9e8 	bl	10158 <__aeabi_uldivmod>
   14d88:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   14d8a:	68ab      	ldr	r3, [r5, #8]
   14d8c:	0c59      	lsrs	r1, r3, #17
   14d8e:	03db      	lsls	r3, r3, #15
   14d90:	19d8      	adds	r0, r3, r7
   14d92:	4a0b      	ldr	r2, [pc, #44]	; (14dc0 <pm_policy_next_state+0x90>)
   14d94:	f04f 0300 	mov.w	r3, #0
   14d98:	f141 0100 	adc.w	r1, r1, #0
   14d9c:	f7fb f9dc 	bl	10158 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14da0:	4b08      	ldr	r3, [pc, #32]	; (14dc4 <pm_policy_next_state+0x94>)
   14da2:	681b      	ldr	r3, [r3, #0]
   14da4:	f1b3 3fff 	cmp.w	r3, #4294967295
   14da8:	d0cc      	beq.n	14d44 <pm_policy_next_state+0x14>
   14daa:	4283      	cmp	r3, r0
   14dac:	d8ca      	bhi.n	14d44 <pm_policy_next_state+0x14>
   14dae:	e7cf      	b.n	14d50 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   14db0:	2500      	movs	r5, #0
}
   14db2:	4628      	mov	r0, r5
   14db4:	b002      	add	sp, #8
   14db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14dba:	bf00      	nop
   14dbc:	000f423f 	.word	0x000f423f
   14dc0:	000f4240 	.word	0x000f4240
   14dc4:	2000820c 	.word	0x2000820c

00014dc8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14dc8:	b908      	cbnz	r0, 14dce <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14dca:	4b02      	ldr	r3, [pc, #8]	; (14dd4 <pm_state_cpu_get_all+0xc>)
   14dcc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14dce:	2000      	movs	r0, #0
   14dd0:	4770      	bx	lr
   14dd2:	bf00      	nop
   14dd4:	00030918 	.word	0x00030918

00014dd8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   14dd8:	b470      	push	{r4, r5, r6}
   14dda:	b08d      	sub	sp, #52	; 0x34
   14ddc:	4606      	mov	r6, r0
   14dde:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   14de0:	f10d 0c04 	add.w	ip, sp, #4
   14de4:	4c2b      	ldr	r4, [pc, #172]	; (14e94 <tc_aes128_set_encrypt_key+0xbc>)
   14de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14de8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14df2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   14df6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   14dfa:	2e00      	cmp	r6, #0
   14dfc:	d045      	beq.n	14e8a <tc_aes128_set_encrypt_key+0xb2>
   14dfe:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   14e00:	2d00      	cmp	r5, #0
   14e02:	d044      	beq.n	14e8e <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   14e04:	2300      	movs	r3, #0
   14e06:	e00f      	b.n	14e28 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14e08:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   14e0c:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   14e10:	784a      	ldrb	r2, [r1, #1]
   14e12:	0412      	lsls	r2, r2, #16
   14e14:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14e18:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14e1a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14e1e:	78c9      	ldrb	r1, [r1, #3]
   14e20:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14e22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   14e26:	3301      	adds	r3, #1
   14e28:	2b03      	cmp	r3, #3
   14e2a:	d9ed      	bls.n	14e08 <tc_aes128_set_encrypt_key+0x30>
   14e2c:	e006      	b.n	14e3c <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   14e2e:	1f19      	subs	r1, r3, #4
   14e30:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   14e34:	404a      	eors	r2, r1
   14e36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14e3a:	3301      	adds	r3, #1
   14e3c:	2b2b      	cmp	r3, #43	; 0x2b
   14e3e:	d820      	bhi.n	14e82 <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   14e40:	1e5a      	subs	r2, r3, #1
   14e42:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   14e46:	f013 0f03 	tst.w	r3, #3
   14e4a:	d1f0      	bne.n	14e2e <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   14e4c:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14e50:	0e11      	lsrs	r1, r2, #24
   14e52:	4c11      	ldr	r4, [pc, #68]	; (14e98 <tc_aes128_set_encrypt_key+0xc0>)
   14e54:	5c65      	ldrb	r5, [r4, r1]
   14e56:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14e5a:	5c61      	ldrb	r1, [r4, r1]
   14e5c:	0409      	lsls	r1, r1, #16
   14e5e:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   14e62:	f3c2 2507 	ubfx	r5, r2, #8, #8
   14e66:	5d65      	ldrb	r5, [r4, r5]
   14e68:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14e6c:	b2d2      	uxtb	r2, r2
   14e6e:	5ca2      	ldrb	r2, [r4, r2]
   14e70:	4311      	orrs	r1, r2
   14e72:	f023 0203 	bic.w	r2, r3, #3
   14e76:	3230      	adds	r2, #48	; 0x30
   14e78:	446a      	add	r2, sp
   14e7a:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   14e7e:	404a      	eors	r2, r1
   14e80:	e7d5      	b.n	14e2e <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   14e82:	2001      	movs	r0, #1
}
   14e84:	b00d      	add	sp, #52	; 0x34
   14e86:	bc70      	pop	{r4, r5, r6}
   14e88:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14e8a:	2000      	movs	r0, #0
   14e8c:	e7fa      	b.n	14e84 <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   14e8e:	2000      	movs	r0, #0
   14e90:	e7f8      	b.n	14e84 <tc_aes128_set_encrypt_key+0xac>
   14e92:	bf00      	nop
   14e94:	0002f978 	.word	0x0002f978
   14e98:	00030918 	.word	0x00030918

00014e9c <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14e9c:	2800      	cmp	r0, #0
   14e9e:	d04e      	beq.n	14f3e <tc_aes_encrypt+0xa2>
{
   14ea0:	b570      	push	{r4, r5, r6, lr}
   14ea2:	b084      	sub	sp, #16
   14ea4:	4615      	mov	r5, r2
   14ea6:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   14ea8:	2900      	cmp	r1, #0
   14eaa:	d04a      	beq.n	14f42 <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   14eac:	2a00      	cmp	r2, #0
   14eae:	d04a      	beq.n	14f46 <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14eb0:	2310      	movs	r3, #16
   14eb2:	460a      	mov	r2, r1
   14eb4:	4619      	mov	r1, r3
   14eb6:	4668      	mov	r0, sp
   14eb8:	f015 fbb0 	bl	2a61c <_copy>
	add_round_key(state, s->words);
   14ebc:	4629      	mov	r1, r5
   14ebe:	4668      	mov	r0, sp
   14ec0:	f015 fbc6 	bl	2a650 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   14ec4:	2400      	movs	r4, #0
   14ec6:	e014      	b.n	14ef2 <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   14ec8:	f81d 1003 	ldrb.w	r1, [sp, r3]
   14ecc:	481f      	ldr	r0, [pc, #124]	; (14f4c <tc_aes_encrypt+0xb0>)
   14ece:	5c41      	ldrb	r1, [r0, r1]
   14ed0:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14ed4:	3301      	adds	r3, #1
   14ed6:	2b0f      	cmp	r3, #15
   14ed8:	d9f6      	bls.n	14ec8 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   14eda:	4668      	mov	r0, sp
   14edc:	f015 fbf9 	bl	2a6d2 <shift_rows>
		mix_columns(state);
   14ee0:	4668      	mov	r0, sp
   14ee2:	f015 fc70 	bl	2a7c6 <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   14ee6:	3401      	adds	r4, #1
   14ee8:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   14eec:	4668      	mov	r0, sp
   14eee:	f015 fbaf 	bl	2a650 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   14ef2:	2c08      	cmp	r4, #8
   14ef4:	d801      	bhi.n	14efa <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   14ef6:	2300      	movs	r3, #0
   14ef8:	e7ed      	b.n	14ed6 <tc_aes_encrypt+0x3a>
   14efa:	2300      	movs	r3, #0
   14efc:	e006      	b.n	14f0c <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   14efe:	f81d 2003 	ldrb.w	r2, [sp, r3]
   14f02:	4912      	ldr	r1, [pc, #72]	; (14f4c <tc_aes_encrypt+0xb0>)
   14f04:	5c8a      	ldrb	r2, [r1, r2]
   14f06:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14f0a:	3301      	adds	r3, #1
   14f0c:	2b0f      	cmp	r3, #15
   14f0e:	d9f6      	bls.n	14efe <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   14f10:	4668      	mov	r0, sp
   14f12:	f015 fbde 	bl	2a6d2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   14f16:	1c61      	adds	r1, r4, #1
   14f18:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   14f1c:	4668      	mov	r0, sp
   14f1e:	f015 fb97 	bl	2a650 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   14f22:	2310      	movs	r3, #16
   14f24:	466a      	mov	r2, sp
   14f26:	4619      	mov	r1, r3
   14f28:	4630      	mov	r0, r6
   14f2a:	f015 fb77 	bl	2a61c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   14f2e:	2210      	movs	r2, #16
   14f30:	2100      	movs	r1, #0
   14f32:	4668      	mov	r0, sp
   14f34:	f015 fb7f 	bl	2a636 <_set>

	return TC_CRYPTO_SUCCESS;
   14f38:	2001      	movs	r0, #1
}
   14f3a:	b004      	add	sp, #16
   14f3c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   14f3e:	2000      	movs	r0, #0
}
   14f40:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14f42:	2000      	movs	r0, #0
   14f44:	e7f9      	b.n	14f3a <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   14f46:	2000      	movs	r0, #0
   14f48:	e7f7      	b.n	14f3a <tc_aes_encrypt+0x9e>
   14f4a:	bf00      	nop
   14f4c:	00030918 	.word	0x00030918

00014f50 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   14f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f54:	b095      	sub	sp, #84	; 0x54
   14f56:	9103      	str	r1, [sp, #12]
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   14f58:	6805      	ldr	r5, [r0, #0]
   14f5a:	f8d0 8004 	ldr.w	r8, [r0, #4]
   14f5e:	6887      	ldr	r7, [r0, #8]
   14f60:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   14f64:	6904      	ldr	r4, [r0, #16]
   14f66:	f8d0 a014 	ldr.w	sl, [r0, #20]
   14f6a:	f8d0 9018 	ldr.w	r9, [r0, #24]
   14f6e:	f8d0 c01c 	ldr.w	ip, [r0, #28]

	for (i = 0; i < 16; ++i) {
   14f72:	2600      	movs	r6, #0
   14f74:	f8cd b004 	str.w	fp, [sp, #4]
   14f78:	46e3      	mov	fp, ip
   14f7a:	9002      	str	r0, [sp, #8]
   14f7c:	e030      	b.n	14fe0 <compress+0x90>
		n = BigEndian(&data);
   14f7e:	a803      	add	r0, sp, #12
   14f80:	f015 fd4c 	bl	2aa1c <BigEndian>
		t1 = work_space[i] = n;
   14f84:	ab14      	add	r3, sp, #80	; 0x50
   14f86:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   14f8a:	f843 0c40 	str.w	r0, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   14f8e:	ea4f 23f4 	mov.w	r3, r4, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   14f92:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
   14f96:	ea83 6374 	eor.w	r3, r3, r4, ror #25
   14f9a:	445b      	add	r3, fp
   14f9c:	ea04 020a 	and.w	r2, r4, sl
   14fa0:	ea29 0104 	bic.w	r1, r9, r4
   14fa4:	404a      	eors	r2, r1
   14fa6:	4413      	add	r3, r2
   14fa8:	4a4e      	ldr	r2, [pc, #312]	; (150e4 <compress+0x194>)
   14faa:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   14fae:	4413      	add	r3, r2
   14fb0:	4418      	add	r0, r3
	return (((a) >> n) | ((a) << (32 - n)));
   14fb2:	ea4f 3375 	mov.w	r3, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   14fb6:	ea83 03b5 	eor.w	r3, r3, r5, ror #2
   14fba:	ea83 53b5 	eor.w	r3, r3, r5, ror #22
   14fbe:	ea88 0207 	eor.w	r2, r8, r7
   14fc2:	402a      	ands	r2, r5
   14fc4:	ea08 0107 	and.w	r1, r8, r7
   14fc8:	404a      	eors	r2, r1
   14fca:	4413      	add	r3, r2
	for (i = 0; i < 16; ++i) {
   14fcc:	3601      	adds	r6, #1
		h = g; g = f; f = e; e = d + t1;
   14fce:	46cb      	mov	fp, r9
   14fd0:	46d1      	mov	r9, sl
   14fd2:	46a2      	mov	sl, r4
   14fd4:	9c01      	ldr	r4, [sp, #4]
   14fd6:	4404      	add	r4, r0
		d = c; c = b; b = a; a = t1 + t2;
   14fd8:	9701      	str	r7, [sp, #4]
   14fda:	4647      	mov	r7, r8
   14fdc:	46a8      	mov	r8, r5
   14fde:	18c5      	adds	r5, r0, r3
	for (i = 0; i < 16; ++i) {
   14fe0:	2e0f      	cmp	r6, #15
   14fe2:	d9cc      	bls.n	14f7e <compress+0x2e>
   14fe4:	46dc      	mov	ip, fp
   14fe6:	f8dd b004 	ldr.w	fp, [sp, #4]
	}

	for ( ; i < 64; ++i) {
   14fea:	2e3f      	cmp	r6, #63	; 0x3f
   14fec:	d85e      	bhi.n	150ac <compress+0x15c>
		s0 = work_space[(i+1)&0x0f];
   14fee:	f106 0e01 	add.w	lr, r6, #1
   14ff2:	f00e 030f 	and.w	r3, lr, #15
   14ff6:	aa14      	add	r2, sp, #80	; 0x50
   14ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14ffc:	f853 2c40 	ldr.w	r2, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   15000:	ea4f 43b2 	mov.w	r3, r2, ror #18
		s0 = sigma0(s0);
   15004:	ea83 13f2 	eor.w	r3, r3, r2, ror #7
   15008:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
		s1 = work_space[(i+14)&0x0f];
   1500c:	f106 020e 	add.w	r2, r6, #14
   15010:	f002 020f 	and.w	r2, r2, #15
   15014:	a914      	add	r1, sp, #80	; 0x50
   15016:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1501a:	f852 1c40 	ldr.w	r1, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   1501e:	ea4f 42f1 	mov.w	r2, r1, ror #19
		s1 = sigma1(s1);
   15022:	ea82 4271 	eor.w	r2, r2, r1, ror #17
   15026:	ea82 2291 	eor.w	r2, r2, r1, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1502a:	f006 010f 	and.w	r1, r6, #15
   1502e:	a814      	add	r0, sp, #80	; 0x50
   15030:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   15034:	f851 0c40 	ldr.w	r0, [r1, #-64]
   15038:	9001      	str	r0, [sp, #4]
   1503a:	4413      	add	r3, r2
   1503c:	f106 0209 	add.w	r2, r6, #9
   15040:	f002 020f 	and.w	r2, r2, #15
   15044:	a814      	add	r0, sp, #80	; 0x50
   15046:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1504a:	f852 2c40 	ldr.w	r2, [r2, #-64]
   1504e:	4413      	add	r3, r2
   15050:	9a01      	ldr	r2, [sp, #4]
   15052:	4413      	add	r3, r2
   15054:	f841 3c40 	str.w	r3, [r1, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   15058:	ea4f 22f4 	mov.w	r2, r4, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1505c:	ea82 12b4 	eor.w	r2, r2, r4, ror #6
   15060:	ea82 6274 	eor.w	r2, r2, r4, ror #25
   15064:	4462      	add	r2, ip
   15066:	ea04 010a 	and.w	r1, r4, sl
   1506a:	ea29 0004 	bic.w	r0, r9, r4
   1506e:	4041      	eors	r1, r0
   15070:	440a      	add	r2, r1
   15072:	491c      	ldr	r1, [pc, #112]	; (150e4 <compress+0x194>)
   15074:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
   15078:	440a      	add	r2, r1
   1507a:	4413      	add	r3, r2
	return (((a) >> n) | ((a) << (32 - n)));
   1507c:	ea4f 3275 	mov.w	r2, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   15080:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
   15084:	ea82 51b5 	eor.w	r1, r2, r5, ror #22
   15088:	ea88 0207 	eor.w	r2, r8, r7
   1508c:	402a      	ands	r2, r5
   1508e:	ea08 0007 	and.w	r0, r8, r7
   15092:	4042      	eors	r2, r0
   15094:	440a      	add	r2, r1
	for ( ; i < 64; ++i) {
   15096:	4676      	mov	r6, lr
		h = g; g = f; f = e; e = d + t1;
   15098:	46cc      	mov	ip, r9
   1509a:	46d1      	mov	r9, sl
   1509c:	46a2      	mov	sl, r4
   1509e:	eb0b 0403 	add.w	r4, fp, r3
		d = c; c = b; b = a; a = t1 + t2;
   150a2:	46bb      	mov	fp, r7
   150a4:	4647      	mov	r7, r8
   150a6:	46a8      	mov	r8, r5
   150a8:	189d      	adds	r5, r3, r2
   150aa:	e79e      	b.n	14fea <compress+0x9a>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   150ac:	9802      	ldr	r0, [sp, #8]
   150ae:	6803      	ldr	r3, [r0, #0]
   150b0:	442b      	add	r3, r5
   150b2:	6003      	str	r3, [r0, #0]
   150b4:	6843      	ldr	r3, [r0, #4]
   150b6:	4443      	add	r3, r8
   150b8:	6043      	str	r3, [r0, #4]
   150ba:	6883      	ldr	r3, [r0, #8]
   150bc:	443b      	add	r3, r7
   150be:	6083      	str	r3, [r0, #8]
   150c0:	68c3      	ldr	r3, [r0, #12]
   150c2:	445b      	add	r3, fp
   150c4:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   150c6:	6903      	ldr	r3, [r0, #16]
   150c8:	4423      	add	r3, r4
   150ca:	6103      	str	r3, [r0, #16]
   150cc:	6943      	ldr	r3, [r0, #20]
   150ce:	4453      	add	r3, sl
   150d0:	6143      	str	r3, [r0, #20]
   150d2:	6983      	ldr	r3, [r0, #24]
   150d4:	444b      	add	r3, r9
   150d6:	6183      	str	r3, [r0, #24]
   150d8:	69c3      	ldr	r3, [r0, #28]
   150da:	4463      	add	r3, ip
   150dc:	61c3      	str	r3, [r0, #28]
}
   150de:	b015      	add	sp, #84	; 0x54
   150e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e4:	00030a18 	.word	0x00030a18

000150e8 <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
   150e8:	b1e0      	cbz	r0, 15124 <tc_sha256_init+0x3c>
{
   150ea:	b510      	push	{r4, lr}
   150ec:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
   150ee:	2270      	movs	r2, #112	; 0x70
   150f0:	2100      	movs	r1, #0
   150f2:	f015 faa0 	bl	2a636 <_set>
	s->iv[0] = 0x6a09e667;
   150f6:	4b0c      	ldr	r3, [pc, #48]	; (15128 <tc_sha256_init+0x40>)
   150f8:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
   150fa:	4b0c      	ldr	r3, [pc, #48]	; (1512c <tc_sha256_init+0x44>)
   150fc:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
   150fe:	4b0c      	ldr	r3, [pc, #48]	; (15130 <tc_sha256_init+0x48>)
   15100:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
   15102:	4b0c      	ldr	r3, [pc, #48]	; (15134 <tc_sha256_init+0x4c>)
   15104:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
   15106:	4b0c      	ldr	r3, [pc, #48]	; (15138 <tc_sha256_init+0x50>)
   15108:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
   1510a:	4b0c      	ldr	r3, [pc, #48]	; (1513c <tc_sha256_init+0x54>)
   1510c:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
   1510e:	4b0c      	ldr	r3, [pc, #48]	; (15140 <tc_sha256_init+0x58>)
   15110:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   15112:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   15116:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   1511a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   1511e:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
   15120:	2001      	movs	r0, #1
}
   15122:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   15124:	2000      	movs	r0, #0
}
   15126:	4770      	bx	lr
   15128:	6a09e667 	.word	0x6a09e667
   1512c:	bb67ae85 	.word	0xbb67ae85
   15130:	3c6ef372 	.word	0x3c6ef372
   15134:	a54ff53a 	.word	0xa54ff53a
   15138:	510e527f 	.word	0x510e527f
   1513c:	9b05688c 	.word	0x9b05688c
   15140:	1f83d9ab 	.word	0x1f83d9ab

00015144 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   15144:	4901      	ldr	r1, [pc, #4]	; (1514c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   15146:	2210      	movs	r2, #16
	str	r2, [r1]
   15148:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1514a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1514c:	e000ed10 	.word	0xe000ed10

00015150 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15150:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   15152:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   15154:	f380 8811 	msr	BASEPRI, r0
	isb
   15158:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1515c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   15160:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   15162:	b662      	cpsie	i
	isb
   15164:	f3bf 8f6f 	isb	sy

	bx	lr
   15168:	4770      	bx	lr
   1516a:	bf00      	nop

0001516c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1516c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1516e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15170:	f381 8811 	msr	BASEPRI, r1

	wfe
   15174:	bf20      	wfe

	msr	BASEPRI, r0
   15176:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1517a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1517c:	4770      	bx	lr
   1517e:	bf00      	nop

00015180 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   15180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15184:	b082      	sub	sp, #8
   15186:	af00      	add	r7, sp, #0
   15188:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1518a:	f8d0 e000 	ldr.w	lr, [r0]
   1518e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   15192:	6886      	ldr	r6, [r0, #8]
   15194:	466d      	mov	r5, sp
   15196:	b08a      	sub	sp, #40	; 0x28
   15198:	466b      	mov	r3, sp
   1519a:	f113 0210 	adds.w	r2, r3, #16
   1519e:	f000 80f3 	beq.w	15388 <esf_dump+0x208>
   151a2:	2114      	movs	r1, #20
   151a4:	b18a      	cbz	r2, 151ca <esf_dump+0x4a>
   151a6:	4608      	mov	r0, r1
   151a8:	2904      	cmp	r1, #4
   151aa:	dd03      	ble.n	151b4 <esf_dump+0x34>
   151ac:	f8df 8208 	ldr.w	r8, [pc, #520]	; 153b8 <esf_dump+0x238>
   151b0:	f8c3 8014 	str.w	r8, [r3, #20]
   151b4:	2808      	cmp	r0, #8
   151b6:	dd01      	ble.n	151bc <esf_dump+0x3c>
   151b8:	f8c3 e018 	str.w	lr, [r3, #24]
   151bc:	280c      	cmp	r0, #12
   151be:	dd01      	ble.n	151c4 <esf_dump+0x44>
   151c0:	f8c3 c01c 	str.w	ip, [r3, #28]
   151c4:	2810      	cmp	r0, #16
   151c6:	dd00      	ble.n	151ca <esf_dump+0x4a>
   151c8:	621e      	str	r6, [r3, #32]
   151ca:	2913      	cmp	r1, #19
   151cc:	f340 80df 	ble.w	1538e <esf_dump+0x20e>
   151d0:	f04f 0c14 	mov.w	ip, #20
   151d4:	b13a      	cbz	r2, 151e6 <esf_dump+0x66>
   151d6:	2105      	movs	r1, #5
   151d8:	7139      	strb	r1, [r7, #4]
   151da:	2100      	movs	r1, #0
   151dc:	7179      	strb	r1, [r7, #5]
   151de:	71b9      	strb	r1, [r7, #6]
   151e0:	71f9      	strb	r1, [r7, #7]
   151e2:	6878      	ldr	r0, [r7, #4]
   151e4:	6118      	str	r0, [r3, #16]
   151e6:	2100      	movs	r1, #0
   151e8:	f36f 0100 	bfc	r1, #0, #1
   151ec:	f36f 0141 	bfc	r1, #1, #1
   151f0:	f36f 0182 	bfc	r1, #2, #1
   151f4:	f36f 01c5 	bfc	r1, #3, #3
   151f8:	2301      	movs	r3, #1
   151fa:	f363 1188 	bfi	r1, r3, #6, #3
   151fe:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   15202:	f36c 2152 	bfi	r1, ip, #9, #10
   15206:	f36f 41de 	bfc	r1, #19, #12
   1520a:	f36f 71df 	bfc	r1, #31, #1
   1520e:	2300      	movs	r3, #0
   15210:	486a      	ldr	r0, [pc, #424]	; (153bc <esf_dump+0x23c>)
   15212:	f7fe fd73 	bl	13cfc <z_impl_z_log_msg_static_create>
   15216:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15218:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   1521c:	f8d4 c010 	ldr.w	ip, [r4, #16]
   15220:	6966      	ldr	r6, [r4, #20]
   15222:	466d      	mov	r5, sp
   15224:	b08a      	sub	sp, #40	; 0x28
   15226:	466b      	mov	r3, sp
   15228:	f113 0210 	adds.w	r2, r3, #16
   1522c:	f000 80b2 	beq.w	15394 <esf_dump+0x214>
   15230:	2114      	movs	r1, #20
   15232:	b18a      	cbz	r2, 15258 <esf_dump+0xd8>
   15234:	4608      	mov	r0, r1
   15236:	2904      	cmp	r1, #4
   15238:	dd03      	ble.n	15242 <esf_dump+0xc2>
   1523a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 153c0 <esf_dump+0x240>
   1523e:	f8c3 8014 	str.w	r8, [r3, #20]
   15242:	2808      	cmp	r0, #8
   15244:	dd01      	ble.n	1524a <esf_dump+0xca>
   15246:	f8c3 e018 	str.w	lr, [r3, #24]
   1524a:	280c      	cmp	r0, #12
   1524c:	dd01      	ble.n	15252 <esf_dump+0xd2>
   1524e:	f8c3 c01c 	str.w	ip, [r3, #28]
   15252:	2810      	cmp	r0, #16
   15254:	dd00      	ble.n	15258 <esf_dump+0xd8>
   15256:	621e      	str	r6, [r3, #32]
   15258:	2913      	cmp	r1, #19
   1525a:	f340 809e 	ble.w	1539a <esf_dump+0x21a>
   1525e:	f04f 0c14 	mov.w	ip, #20
   15262:	b13a      	cbz	r2, 15274 <esf_dump+0xf4>
   15264:	2105      	movs	r1, #5
   15266:	7139      	strb	r1, [r7, #4]
   15268:	2100      	movs	r1, #0
   1526a:	7179      	strb	r1, [r7, #5]
   1526c:	71b9      	strb	r1, [r7, #6]
   1526e:	71f9      	strb	r1, [r7, #7]
   15270:	6878      	ldr	r0, [r7, #4]
   15272:	6118      	str	r0, [r3, #16]
   15274:	2100      	movs	r1, #0
   15276:	f36f 0100 	bfc	r1, #0, #1
   1527a:	f36f 0141 	bfc	r1, #1, #1
   1527e:	f36f 0182 	bfc	r1, #2, #1
   15282:	f36f 01c5 	bfc	r1, #3, #3
   15286:	2301      	movs	r3, #1
   15288:	f363 1188 	bfi	r1, r3, #6, #3
   1528c:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   15290:	f36c 2152 	bfi	r1, ip, #9, #10
   15294:	f36f 41de 	bfc	r1, #19, #12
   15298:	f36f 71df 	bfc	r1, #31, #1
   1529c:	2300      	movs	r3, #0
   1529e:	4847      	ldr	r0, [pc, #284]	; (153bc <esf_dump+0x23c>)
   152a0:	f7fe fd2c 	bl	13cfc <z_impl_z_log_msg_static_create>
   152a4:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   152a6:	69e6      	ldr	r6, [r4, #28]
   152a8:	466d      	mov	r5, sp
   152aa:	b088      	sub	sp, #32
   152ac:	466b      	mov	r3, sp
   152ae:	f113 0210 	adds.w	r2, r3, #16
   152b2:	d075      	beq.n	153a0 <esf_dump+0x220>
   152b4:	210c      	movs	r1, #12
   152b6:	b14a      	cbz	r2, 152cc <esf_dump+0x14c>
   152b8:	4608      	mov	r0, r1
   152ba:	2904      	cmp	r1, #4
   152bc:	dd03      	ble.n	152c6 <esf_dump+0x146>
   152be:	f8df c104 	ldr.w	ip, [pc, #260]	; 153c4 <esf_dump+0x244>
   152c2:	f8c3 c014 	str.w	ip, [r3, #20]
   152c6:	2808      	cmp	r0, #8
   152c8:	dd00      	ble.n	152cc <esf_dump+0x14c>
   152ca:	619e      	str	r6, [r3, #24]
   152cc:	290b      	cmp	r1, #11
   152ce:	dd6a      	ble.n	153a6 <esf_dump+0x226>
   152d0:	f04f 0c0c 	mov.w	ip, #12
   152d4:	b13a      	cbz	r2, 152e6 <esf_dump+0x166>
   152d6:	2103      	movs	r1, #3
   152d8:	7139      	strb	r1, [r7, #4]
   152da:	2100      	movs	r1, #0
   152dc:	7179      	strb	r1, [r7, #5]
   152de:	71b9      	strb	r1, [r7, #6]
   152e0:	71f9      	strb	r1, [r7, #7]
   152e2:	6878      	ldr	r0, [r7, #4]
   152e4:	6118      	str	r0, [r3, #16]
   152e6:	2100      	movs	r1, #0
   152e8:	f36f 0100 	bfc	r1, #0, #1
   152ec:	f36f 0141 	bfc	r1, #1, #1
   152f0:	f36f 0182 	bfc	r1, #2, #1
   152f4:	f36f 01c5 	bfc	r1, #3, #3
   152f8:	2301      	movs	r3, #1
   152fa:	f363 1188 	bfi	r1, r3, #6, #3
   152fe:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   15302:	f36c 2152 	bfi	r1, ip, #9, #10
   15306:	f36f 41de 	bfc	r1, #19, #12
   1530a:	f36f 71df 	bfc	r1, #31, #1
   1530e:	2300      	movs	r3, #0
   15310:	482a      	ldr	r0, [pc, #168]	; (153bc <esf_dump+0x23c>)
   15312:	f7fe fcf3 	bl	13cfc <z_impl_z_log_msg_static_create>
   15316:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15318:	69a4      	ldr	r4, [r4, #24]
   1531a:	b088      	sub	sp, #32
   1531c:	466b      	mov	r3, sp
   1531e:	f113 0210 	adds.w	r2, r3, #16
   15322:	d043      	beq.n	153ac <esf_dump+0x22c>
   15324:	210c      	movs	r1, #12
   15326:	b13a      	cbz	r2, 15338 <esf_dump+0x1b8>
   15328:	4608      	mov	r0, r1
   1532a:	2904      	cmp	r1, #4
   1532c:	dd01      	ble.n	15332 <esf_dump+0x1b2>
   1532e:	4d26      	ldr	r5, [pc, #152]	; (153c8 <esf_dump+0x248>)
   15330:	615d      	str	r5, [r3, #20]
   15332:	2808      	cmp	r0, #8
   15334:	dd00      	ble.n	15338 <esf_dump+0x1b8>
   15336:	619c      	str	r4, [r3, #24]
   15338:	290b      	cmp	r1, #11
   1533a:	dd3a      	ble.n	153b2 <esf_dump+0x232>
   1533c:	240c      	movs	r4, #12
   1533e:	b13a      	cbz	r2, 15350 <esf_dump+0x1d0>
   15340:	2103      	movs	r1, #3
   15342:	7139      	strb	r1, [r7, #4]
   15344:	2100      	movs	r1, #0
   15346:	7179      	strb	r1, [r7, #5]
   15348:	71b9      	strb	r1, [r7, #6]
   1534a:	71f9      	strb	r1, [r7, #7]
   1534c:	6878      	ldr	r0, [r7, #4]
   1534e:	6118      	str	r0, [r3, #16]
   15350:	2100      	movs	r1, #0
   15352:	f36f 0100 	bfc	r1, #0, #1
   15356:	f36f 0141 	bfc	r1, #1, #1
   1535a:	f36f 0182 	bfc	r1, #2, #1
   1535e:	f36f 01c5 	bfc	r1, #3, #3
   15362:	2301      	movs	r3, #1
   15364:	f363 1188 	bfi	r1, r3, #6, #3
   15368:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1536c:	f364 2152 	bfi	r1, r4, #9, #10
   15370:	f36f 41de 	bfc	r1, #19, #12
   15374:	f36f 71df 	bfc	r1, #31, #1
   15378:	2300      	movs	r3, #0
   1537a:	4810      	ldr	r0, [pc, #64]	; (153bc <esf_dump+0x23c>)
   1537c:	f7fe fcbe 	bl	13cfc <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
   15380:	3708      	adds	r7, #8
   15382:	46bd      	mov	sp, r7
   15384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   15388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1538c:	e70a      	b.n	151a4 <esf_dump+0x24>
   1538e:	f06f 0c1b 	mvn.w	ip, #27
   15392:	e71f      	b.n	151d4 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15398:	e74b      	b.n	15232 <esf_dump+0xb2>
   1539a:	f06f 0c1b 	mvn.w	ip, #27
   1539e:	e760      	b.n	15262 <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   153a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   153a4:	e787      	b.n	152b6 <esf_dump+0x136>
   153a6:	f06f 0c1b 	mvn.w	ip, #27
   153aa:	e793      	b.n	152d4 <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   153ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   153b0:	e7b9      	b.n	15326 <esf_dump+0x1a6>
   153b2:	f06f 041b 	mvn.w	r4, #27
   153b6:	e7c2      	b.n	1533e <esf_dump+0x1be>
   153b8:	00030b18 	.word	0x00030b18
   153bc:	0002f8a8 	.word	0x0002f8a8
   153c0:	00030b48 	.word	0x00030b48
   153c4:	00030b78 	.word	0x00030b78
   153c8:	00030b88 	.word	0x00030b88

000153cc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   153cc:	2800      	cmp	r0, #0
   153ce:	db07      	blt.n	153e0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   153d0:	f000 021f 	and.w	r2, r0, #31
   153d4:	0940      	lsrs	r0, r0, #5
   153d6:	2301      	movs	r3, #1
   153d8:	4093      	lsls	r3, r2
   153da:	4a02      	ldr	r2, [pc, #8]	; (153e4 <__NVIC_EnableIRQ+0x18>)
   153dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   153e0:	4770      	bx	lr
   153e2:	bf00      	nop
   153e4:	e000e100 	.word	0xe000e100

000153e8 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   153e8:	2800      	cmp	r0, #0
   153ea:	db0c      	blt.n	15406 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   153ec:	f000 021f 	and.w	r2, r0, #31
   153f0:	0940      	lsrs	r0, r0, #5
   153f2:	2301      	movs	r3, #1
   153f4:	4093      	lsls	r3, r2
   153f6:	3020      	adds	r0, #32
   153f8:	4a03      	ldr	r2, [pc, #12]	; (15408 <__NVIC_DisableIRQ+0x20>)
   153fa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   153fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15402:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   15406:	4770      	bx	lr
   15408:	e000e100 	.word	0xe000e100

0001540c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1540c:	2800      	cmp	r0, #0
   1540e:	db08      	blt.n	15422 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15410:	0149      	lsls	r1, r1, #5
   15412:	b2c9      	uxtb	r1, r1
   15414:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   15418:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   1541c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   15420:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15422:	f000 000f 	and.w	r0, r0, #15
   15426:	0149      	lsls	r1, r1, #5
   15428:	b2c9      	uxtb	r1, r1
   1542a:	4b01      	ldr	r3, [pc, #4]	; (15430 <__NVIC_SetPriority+0x24>)
   1542c:	5419      	strb	r1, [r3, r0]
  }
}
   1542e:	4770      	bx	lr
   15430:	e000ed14 	.word	0xe000ed14

00015434 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15434:	0942      	lsrs	r2, r0, #5
   15436:	4b05      	ldr	r3, [pc, #20]	; (1544c <arch_irq_is_enabled+0x18>)
   15438:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1543c:	f000 001f 	and.w	r0, r0, #31
   15440:	2301      	movs	r3, #1
   15442:	fa03 f000 	lsl.w	r0, r3, r0
}
   15446:	4010      	ands	r0, r2
   15448:	4770      	bx	lr
   1544a:	bf00      	nop
   1544c:	e000e100 	.word	0xe000e100

00015450 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   15450:	b570      	push	{r4, r5, r6, lr}
   15452:	4605      	mov	r5, r0
   15454:	460c      	mov	r4, r1
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   15456:	3101      	adds	r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   15458:	2907      	cmp	r1, #7
   1545a:	d803      	bhi.n	15464 <z_arm_irq_priority_set+0x14>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1545c:	b240      	sxtb	r0, r0
   1545e:	f7ff ffd5 	bl	1540c <__NVIC_SetPriority>
}
   15462:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   15464:	4e08      	ldr	r6, [pc, #32]	; (15488 <z_arm_irq_priority_set+0x38>)
   15466:	235b      	movs	r3, #91	; 0x5b
   15468:	4632      	mov	r2, r6
   1546a:	4908      	ldr	r1, [pc, #32]	; (1548c <z_arm_irq_priority_set+0x3c>)
   1546c:	4808      	ldr	r0, [pc, #32]	; (15490 <z_arm_irq_priority_set+0x40>)
   1546e:	f014 fb3c 	bl	29aea <assert_print>
   15472:	2307      	movs	r3, #7
   15474:	462a      	mov	r2, r5
   15476:	4621      	mov	r1, r4
   15478:	4806      	ldr	r0, [pc, #24]	; (15494 <z_arm_irq_priority_set+0x44>)
   1547a:	f014 fb36 	bl	29aea <assert_print>
   1547e:	215b      	movs	r1, #91	; 0x5b
   15480:	4630      	mov	r0, r6
   15482:	f014 fb2b 	bl	29adc <assert_post_action>
   15486:	bf00      	nop
   15488:	00030bb8 	.word	0x00030bb8
   1548c:	00030bf0 	.word	0x00030bf0
   15490:	0002fdac 	.word	0x0002fdac
   15494:	00030c0c 	.word	0x00030c0c

00015498 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15498:	bf30      	wfi
    b z_SysNmiOnReset
   1549a:	f7ff bffd 	b.w	15498 <z_SysNmiOnReset>
   1549e:	bf00      	nop

000154a0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   154a0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   154a2:	4b0b      	ldr	r3, [pc, #44]	; (154d0 <z_arm_prep_c+0x30>)
   154a4:	4a0b      	ldr	r2, [pc, #44]	; (154d4 <z_arm_prep_c+0x34>)
   154a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   154aa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   154ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   154b0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   154b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   154b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   154bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   154c0:	f00f f9ae 	bl	24820 <z_bss_zero>
	z_data_copy();
   154c4:	f012 fc90 	bl	27de8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   154c8:	f001 f836 	bl	16538 <z_arm_interrupt_init>
	z_cstart();
   154cc:	f00f fa04 	bl	248d8 <z_cstart>
   154d0:	e000ed00 	.word	0xe000ed00
   154d4:	00010000 	.word	0x00010000

000154d8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   154d8:	4a0a      	ldr	r2, [pc, #40]	; (15504 <arch_swap+0x2c>)
   154da:	6893      	ldr	r3, [r2, #8]
   154dc:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   154e0:	4909      	ldr	r1, [pc, #36]	; (15508 <arch_swap+0x30>)
   154e2:	6809      	ldr	r1, [r1, #0]
   154e4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   154e8:	4908      	ldr	r1, [pc, #32]	; (1550c <arch_swap+0x34>)
   154ea:	684b      	ldr	r3, [r1, #4]
   154ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   154f0:	604b      	str	r3, [r1, #4]
   154f2:	2300      	movs	r3, #0
   154f4:	f383 8811 	msr	BASEPRI, r3
   154f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   154fc:	6893      	ldr	r3, [r2, #8]
}
   154fe:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   15502:	4770      	bx	lr
   15504:	20009ce8 	.word	0x20009ce8
   15508:	00033f58 	.word	0x00033f58
   1550c:	e000ed00 	.word	0xe000ed00

00015510 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15510:	4916      	ldr	r1, [pc, #88]	; (1556c <z_arm_pendsv+0x5c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15512:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   15514:	f882 e0b5 	strb.w	lr, [r2, #181]	; 0xb5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15518:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1551c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1551e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15522:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15526:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   15528:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1552c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15530:	4f0f      	ldr	r7, [pc, #60]	; (15570 <z_arm_pendsv+0x60>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15532:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15536:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   15538:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1553a:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1553c:	f992 e0b5 	ldrsb.w	lr, [r2, #181]	; 0xb5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15540:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   15544:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15546:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1554a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1554e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15552:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   15556:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1555a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1555e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   15560:	f015 fcf2 	bl	2af48 <configure_builtin_stack_guard>
    pop {r2, lr}
   15564:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   15568:	4770      	bx	lr
   1556a:	0000      	.short	0x0000
    ldr r1, =_kernel
   1556c:	20009ce8 	.word	0x20009ce8
    ldr v4, =_SCS_ICSR
   15570:	e000ed04 	.word	0xe000ed04

00015574 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15574:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15578:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1557a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1557e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15582:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15584:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15588:	2902      	cmp	r1, #2
    beq _oops
   1558a:	d0ff      	beq.n	1558c <_oops>

0001558c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1558c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1558e:	f015 fcbf 	bl	2af10 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   15592:	bd01      	pop	{r0, pc}

00015594 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   15594:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   15596:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1559a:	4910      	ldr	r1, [pc, #64]	; (155dc <arch_new_thread+0x48>)
   1559c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   155a0:	f021 0101 	bic.w	r1, r1, #1
   155a4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   155a8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   155ac:	9b01      	ldr	r3, [sp, #4]
   155ae:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   155b2:	9b02      	ldr	r3, [sp, #8]
   155b4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   155b8:	9b03      	ldr	r3, [sp, #12]
   155ba:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   155be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   155c2:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   155c6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   155c8:	2300      	movs	r3, #0
   155ca:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   155ce:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   155d2:	23bc      	movs	r3, #188	; 0xbc
   155d4:	f880 30b5 	strb.w	r3, [r0, #181]	; 0xb5
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   155d8:	bc10      	pop	{r4}
   155da:	4770      	bx	lr
   155dc:	00029281 	.word	0x00029281

000155e0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   155e0:	4b09      	ldr	r3, [pc, #36]	; (15608 <arch_switch_to_main_thread+0x28>)
   155e2:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   155e4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   155e8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   155ec:	4610      	mov	r0, r2
   155ee:	f381 8809 	msr	PSP, r1
   155f2:	2100      	movs	r1, #0
   155f4:	b663      	cpsie	if
   155f6:	f381 8811 	msr	BASEPRI, r1
   155fa:	f3bf 8f6f 	isb	sy
   155fe:	2200      	movs	r2, #0
   15600:	2300      	movs	r3, #0
   15602:	f013 fe3d 	bl	29280 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   15606:	bf00      	nop
   15608:	20009ce8 	.word	0x20009ce8

0001560c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1560c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1560e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15610:	4a0b      	ldr	r2, [pc, #44]	; (15640 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   15612:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   15614:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   15616:	bf1e      	ittt	ne
	movne	r1, #0
   15618:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1561a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1561c:	f019 fbf4 	blne	2ee08 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15620:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   15622:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   15626:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1562a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1562e:	4905      	ldr	r1, [pc, #20]	; (15644 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15630:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   15632:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15634:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   15636:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1563a:	4903      	ldr	r1, [pc, #12]	; (15648 <_isr_wrapper+0x3c>)
	bx r1
   1563c:	4708      	bx	r1
   1563e:	0000      	.short	0x0000
	ldr r2, =_kernel
   15640:	20009ce8 	.word	0x20009ce8
	ldr r1, =_sw_isr_table
   15644:	0002f548 	.word	0x0002f548
	ldr r1, =z_arm_int_exit
   15648:	0001564d 	.word	0x0001564d

0001564c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1564c:	4b04      	ldr	r3, [pc, #16]	; (15660 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1564e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15650:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   15652:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15654:	d003      	beq.n	1565e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15656:	4903      	ldr	r1, [pc, #12]	; (15664 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1565c:	600a      	str	r2, [r1, #0]

0001565e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1565e:	4770      	bx	lr
	ldr r3, =_kernel
   15660:	20009ce8 	.word	0x20009ce8
	ldr r1, =_SCS_ICSR
   15664:	e000ed04 	.word	0xe000ed04

00015668 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   15668:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1566a:	4b0d      	ldr	r3, [pc, #52]	; (156a0 <z_arm_is_synchronous_svc+0x38>)
   1566c:	695a      	ldr	r2, [r3, #20]
   1566e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   15672:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15678:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   1567c:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15680:	695a      	ldr	r2, [r3, #20]
   15682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   15686:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1568c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15690:	f64d 7302 	movw	r3, #57090	; 0xdf02
   15694:	4299      	cmp	r1, r3
   15696:	d001      	beq.n	1569c <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   15698:	2000      	movs	r0, #0
   1569a:	4770      	bx	lr
		return true;
   1569c:	2001      	movs	r0, #1
}
   1569e:	4770      	bx	lr
   156a0:	e000ed00 	.word	0xe000ed00

000156a4 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   156a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   156a6:	b089      	sub	sp, #36	; 0x24
   156a8:	461d      	mov	r5, r3
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   156aa:	2300      	movs	r3, #0
   156ac:	702b      	strb	r3, [r5, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   156ae:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   156b2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   156b6:	d142      	bne.n	1573e <get_esf+0x9a>
   156b8:	4606      	mov	r6, r0
   156ba:	460f      	mov	r7, r1
   156bc:	4614      	mov	r4, r2
		} else {
			ptr_esf = (z_arch_esf_t *)__TZ_get_MSP_NS();
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   156be:	f012 0f01 	tst.w	r2, #1
   156c2:	d13f      	bne.n	15744 <get_esf+0xa0>
		 * This is a fatal error.
		 */
		return NULL;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   156c4:	f012 0f40 	tst.w	r2, #64	; 0x40
   156c8:	d107      	bne.n	156da <get_esf+0x36>
	z_arch_esf_t *ptr_esf = NULL;
   156ca:	2000      	movs	r0, #0
	bool alternative_state_exc = false;
   156cc:	4603      	mov	r3, r0
		PR_EXC("SPSEL in thread mode does not indicate PSP");
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
   156ce:	bbbb      	cbnz	r3, 15740 <get_esf+0x9c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   156d0:	f014 0f08 	tst.w	r4, #8
   156d4:	d02f      	beq.n	15736 <get_esf+0x92>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   156d6:	4638      	mov	r0, r7
   156d8:	e032      	b.n	15740 <get_esf+0x9c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   156da:	4b1b      	ldr	r3, [pc, #108]	; (15748 <get_esf+0xa4>)
   156dc:	9307      	str	r3, [sp, #28]
   156de:	2302      	movs	r3, #2
   156e0:	f88d 3004 	strb.w	r3, [sp, #4]
   156e4:	2300      	movs	r3, #0
   156e6:	f88d 3005 	strb.w	r3, [sp, #5]
   156ea:	f88d 3006 	strb.w	r3, [sp, #6]
   156ee:	f88d 3007 	strb.w	r3, [sp, #7]
   156f2:	9a01      	ldr	r2, [sp, #4]
   156f4:	9206      	str	r2, [sp, #24]
   156f6:	4619      	mov	r1, r3
   156f8:	f363 0100 	bfi	r1, r3, #0, #1
   156fc:	f363 0141 	bfi	r1, r3, #1, #1
   15700:	f363 0182 	bfi	r1, r3, #2, #1
   15704:	f363 01c5 	bfi	r1, r3, #3, #3
   15708:	2201      	movs	r2, #1
   1570a:	f362 1188 	bfi	r1, r2, #6, #3
   1570e:	2208      	movs	r2, #8
   15710:	f362 2152 	bfi	r1, r2, #9, #10
   15714:	f363 41de 	bfi	r1, r3, #19, #12
   15718:	f363 71df 	bfi	r1, r3, #31, #1
   1571c:	aa06      	add	r2, sp, #24
   1571e:	480b      	ldr	r0, [pc, #44]	; (1574c <get_esf+0xa8>)
   15720:	f7fe faec 	bl	13cfc <z_impl_z_log_msg_static_create>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   15724:	f014 0f04 	tst.w	r4, #4
   15728:	d002      	beq.n	15730 <get_esf+0x8c>
			ptr_esf = (z_arch_esf_t *)psp;
   1572a:	4638      	mov	r0, r7
		alternative_state_exc = true;
   1572c:	2301      	movs	r3, #1
   1572e:	e7ce      	b.n	156ce <get_esf+0x2a>
			ptr_esf = (z_arch_esf_t *)msp;
   15730:	4630      	mov	r0, r6
		alternative_state_exc = true;
   15732:	2301      	movs	r3, #1
   15734:	e7cb      	b.n	156ce <get_esf+0x2a>

		} else {
			/* Returning to handler mode */
			ptr_esf = (z_arch_esf_t *)msp;
   15736:	4630      	mov	r0, r6
			*nested_exc = true;
   15738:	2301      	movs	r3, #1
   1573a:	702b      	strb	r3, [r5, #0]
   1573c:	e000      	b.n	15740 <get_esf+0x9c>
		return NULL;
   1573e:	2000      	movs	r0, #0
		}
	}

	return ptr_esf;
}
   15740:	b009      	add	sp, #36	; 0x24
   15742:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   15744:	2000      	movs	r0, #0
   15746:	e7fb      	b.n	15740 <get_esf+0x9c>
   15748:	00030c4c 	.word	0x00030c4c
   1574c:	0002f8a8 	.word	0x0002f8a8

00015750 <mem_manage_fault>:
{
   15750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15754:	b0a6      	sub	sp, #152	; 0x98
   15756:	af00      	add	r7, sp, #0
   15758:	4605      	mov	r5, r0
   1575a:	460e      	mov	r6, r1
   1575c:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1575e:	4bbc      	ldr	r3, [pc, #752]	; (15a50 <mem_manage_fault+0x300>)
   15760:	61fb      	str	r3, [r7, #28]
   15762:	2302      	movs	r3, #2
   15764:	713b      	strb	r3, [r7, #4]
   15766:	2300      	movs	r3, #0
   15768:	717b      	strb	r3, [r7, #5]
   1576a:	71bb      	strb	r3, [r7, #6]
   1576c:	71fb      	strb	r3, [r7, #7]
   1576e:	687a      	ldr	r2, [r7, #4]
   15770:	61ba      	str	r2, [r7, #24]
   15772:	4619      	mov	r1, r3
   15774:	f363 0100 	bfi	r1, r3, #0, #1
   15778:	f363 0141 	bfi	r1, r3, #1, #1
   1577c:	f363 0182 	bfi	r1, r3, #2, #1
   15780:	f363 01c5 	bfi	r1, r3, #3, #3
   15784:	2201      	movs	r2, #1
   15786:	f362 1188 	bfi	r1, r2, #6, #3
   1578a:	2208      	movs	r2, #8
   1578c:	f362 2152 	bfi	r1, r2, #9, #10
   15790:	f363 41de 	bfi	r1, r3, #19, #12
   15794:	f363 71df 	bfi	r1, r3, #31, #1
   15798:	f107 0218 	add.w	r2, r7, #24
   1579c:	48ad      	ldr	r0, [pc, #692]	; (15a54 <mem_manage_fault+0x304>)
   1579e:	f7fe faad 	bl	13cfc <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   157a2:	4bad      	ldr	r3, [pc, #692]	; (15a58 <mem_manage_fault+0x308>)
   157a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157a6:	f013 0f10 	tst.w	r3, #16
   157aa:	d13e      	bne.n	1582a <mem_manage_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   157ac:	4baa      	ldr	r3, [pc, #680]	; (15a58 <mem_manage_fault+0x308>)
   157ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157b0:	f013 0f08 	tst.w	r3, #8
   157b4:	d15c      	bne.n	15870 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   157b6:	4ba8      	ldr	r3, [pc, #672]	; (15a58 <mem_manage_fault+0x308>)
   157b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157ba:	f013 0f02 	tst.w	r3, #2
   157be:	d17a      	bne.n	158b6 <mem_manage_fault+0x166>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   157c0:	4ba5      	ldr	r3, [pc, #660]	; (15a58 <mem_manage_fault+0x308>)
   157c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157c4:	f013 0f01 	tst.w	r3, #1
   157c8:	f040 80e9 	bne.w	1599e <mem_manage_fault+0x24e>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   157cc:	4ba2      	ldr	r3, [pc, #648]	; (15a58 <mem_manage_fault+0x308>)
   157ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157d0:	f013 0f20 	tst.w	r3, #32
   157d4:	f040 8106 	bne.w	159e4 <mem_manage_fault+0x294>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157d8:	4b9f      	ldr	r3, [pc, #636]	; (15a58 <mem_manage_fault+0x308>)
   157da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157dc:	f013 0f10 	tst.w	r3, #16
   157e0:	d104      	bne.n	157ec <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   157e2:	4b9d      	ldr	r3, [pc, #628]	; (15a58 <mem_manage_fault+0x308>)
   157e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157e6:	f013 0f02 	tst.w	r3, #2
   157ea:	d005      	beq.n	157f8 <mem_manage_fault+0xa8>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   157ec:	4b9a      	ldr	r3, [pc, #616]	; (15a58 <mem_manage_fault+0x308>)
   157ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157f0:	f013 0f10 	tst.w	r3, #16
   157f4:	f040 811b 	bne.w	15a2e <mem_manage_fault+0x2de>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   157f8:	4b97      	ldr	r3, [pc, #604]	; (15a58 <mem_manage_fault+0x308>)
   157fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157fc:	f013 0f20 	tst.w	r3, #32
   15800:	d004      	beq.n	1580c <mem_manage_fault+0xbc>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   15802:	4a95      	ldr	r2, [pc, #596]	; (15a58 <mem_manage_fault+0x308>)
   15804:	6a53      	ldr	r3, [r2, #36]	; 0x24
   15806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1580a:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1580c:	4a92      	ldr	r2, [pc, #584]	; (15a58 <mem_manage_fault+0x308>)
   1580e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15810:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   15814:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15816:	2101      	movs	r1, #1
   15818:	4628      	mov	r0, r5
   1581a:	f015 fb9a 	bl	2af52 <memory_fault_recoverable>
   1581e:	7020      	strb	r0, [r4, #0]
}
   15820:	2000      	movs	r0, #0
   15822:	3798      	adds	r7, #152	; 0x98
   15824:	46bd      	mov	sp, r7
   15826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   1582a:	4b8c      	ldr	r3, [pc, #560]	; (15a5c <mem_manage_fault+0x30c>)
   1582c:	637b      	str	r3, [r7, #52]	; 0x34
   1582e:	2302      	movs	r3, #2
   15830:	713b      	strb	r3, [r7, #4]
   15832:	2300      	movs	r3, #0
   15834:	717b      	strb	r3, [r7, #5]
   15836:	71bb      	strb	r3, [r7, #6]
   15838:	71fb      	strb	r3, [r7, #7]
   1583a:	687a      	ldr	r2, [r7, #4]
   1583c:	633a      	str	r2, [r7, #48]	; 0x30
   1583e:	4619      	mov	r1, r3
   15840:	f363 0100 	bfi	r1, r3, #0, #1
   15844:	f363 0141 	bfi	r1, r3, #1, #1
   15848:	f363 0182 	bfi	r1, r3, #2, #1
   1584c:	f363 01c5 	bfi	r1, r3, #3, #3
   15850:	2201      	movs	r2, #1
   15852:	f362 1188 	bfi	r1, r2, #6, #3
   15856:	2208      	movs	r2, #8
   15858:	f362 2152 	bfi	r1, r2, #9, #10
   1585c:	f363 41de 	bfi	r1, r3, #19, #12
   15860:	f363 71df 	bfi	r1, r3, #31, #1
   15864:	f107 0230 	add.w	r2, r7, #48	; 0x30
   15868:	487a      	ldr	r0, [pc, #488]	; (15a54 <mem_manage_fault+0x304>)
   1586a:	f7fe fa47 	bl	13cfc <z_impl_z_log_msg_static_create>
   1586e:	e79d      	b.n	157ac <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   15870:	4b7b      	ldr	r3, [pc, #492]	; (15a60 <mem_manage_fault+0x310>)
   15872:	64fb      	str	r3, [r7, #76]	; 0x4c
   15874:	2302      	movs	r3, #2
   15876:	713b      	strb	r3, [r7, #4]
   15878:	2300      	movs	r3, #0
   1587a:	717b      	strb	r3, [r7, #5]
   1587c:	71bb      	strb	r3, [r7, #6]
   1587e:	71fb      	strb	r3, [r7, #7]
   15880:	687a      	ldr	r2, [r7, #4]
   15882:	64ba      	str	r2, [r7, #72]	; 0x48
   15884:	4619      	mov	r1, r3
   15886:	f363 0100 	bfi	r1, r3, #0, #1
   1588a:	f363 0141 	bfi	r1, r3, #1, #1
   1588e:	f363 0182 	bfi	r1, r3, #2, #1
   15892:	f363 01c5 	bfi	r1, r3, #3, #3
   15896:	2201      	movs	r2, #1
   15898:	f362 1188 	bfi	r1, r2, #6, #3
   1589c:	2208      	movs	r2, #8
   1589e:	f362 2152 	bfi	r1, r2, #9, #10
   158a2:	f363 41de 	bfi	r1, r3, #19, #12
   158a6:	f363 71df 	bfi	r1, r3, #31, #1
   158aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
   158ae:	4869      	ldr	r0, [pc, #420]	; (15a54 <mem_manage_fault+0x304>)
   158b0:	f7fe fa24 	bl	13cfc <z_impl_z_log_msg_static_create>
   158b4:	e77f      	b.n	157b6 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
   158b6:	4b6b      	ldr	r3, [pc, #428]	; (15a64 <mem_manage_fault+0x314>)
   158b8:	667b      	str	r3, [r7, #100]	; 0x64
   158ba:	2302      	movs	r3, #2
   158bc:	713b      	strb	r3, [r7, #4]
   158be:	2300      	movs	r3, #0
   158c0:	717b      	strb	r3, [r7, #5]
   158c2:	71bb      	strb	r3, [r7, #6]
   158c4:	71fb      	strb	r3, [r7, #7]
   158c6:	687a      	ldr	r2, [r7, #4]
   158c8:	663a      	str	r2, [r7, #96]	; 0x60
   158ca:	4619      	mov	r1, r3
   158cc:	f363 0100 	bfi	r1, r3, #0, #1
   158d0:	f363 0141 	bfi	r1, r3, #1, #1
   158d4:	f363 0182 	bfi	r1, r3, #2, #1
   158d8:	f363 01c5 	bfi	r1, r3, #3, #3
   158dc:	2201      	movs	r2, #1
   158de:	f362 1188 	bfi	r1, r2, #6, #3
   158e2:	2208      	movs	r2, #8
   158e4:	f362 2152 	bfi	r1, r2, #9, #10
   158e8:	f363 41de 	bfi	r1, r3, #19, #12
   158ec:	f363 71df 	bfi	r1, r3, #31, #1
   158f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
   158f4:	4857      	ldr	r0, [pc, #348]	; (15a54 <mem_manage_fault+0x304>)
   158f6:	f7fe fa01 	bl	13cfc <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
   158fa:	4b57      	ldr	r3, [pc, #348]	; (15a58 <mem_manage_fault+0x308>)
   158fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   158fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15900:	f013 0f80 	tst.w	r3, #128	; 0x80
   15904:	f43f af5c 	beq.w	157c0 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15908:	46e8      	mov	r8, sp
   1590a:	b088      	sub	sp, #32
   1590c:	466b      	mov	r3, sp
   1590e:	f113 0210 	adds.w	r2, r3, #16
   15912:	d011      	beq.n	15938 <mem_manage_fault+0x1e8>
   15914:	210c      	movs	r1, #12
   15916:	b152      	cbz	r2, 1592e <mem_manage_fault+0x1de>
   15918:	468c      	mov	ip, r1
   1591a:	2904      	cmp	r1, #4
   1591c:	dd03      	ble.n	15926 <mem_manage_fault+0x1d6>
   1591e:	f8df e148 	ldr.w	lr, [pc, #328]	; 15a68 <mem_manage_fault+0x318>
   15922:	f8c3 e014 	str.w	lr, [r3, #20]
   15926:	f1bc 0f08 	cmp.w	ip, #8
   1592a:	dd08      	ble.n	1593e <mem_manage_fault+0x1ee>
   1592c:	6198      	str	r0, [r3, #24]
   1592e:	290b      	cmp	r1, #11
   15930:	dd32      	ble.n	15998 <mem_manage_fault+0x248>
   15932:	f04f 0c0c 	mov.w	ip, #12
   15936:	e004      	b.n	15942 <mem_manage_fault+0x1f2>
   15938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1593c:	e7eb      	b.n	15916 <mem_manage_fault+0x1c6>
   1593e:	f06f 0c1b 	mvn.w	ip, #27
   15942:	b13a      	cbz	r2, 15954 <mem_manage_fault+0x204>
   15944:	2103      	movs	r1, #3
   15946:	7139      	strb	r1, [r7, #4]
   15948:	2100      	movs	r1, #0
   1594a:	7179      	strb	r1, [r7, #5]
   1594c:	71b9      	strb	r1, [r7, #6]
   1594e:	71f9      	strb	r1, [r7, #7]
   15950:	6878      	ldr	r0, [r7, #4]
   15952:	6118      	str	r0, [r3, #16]
   15954:	2100      	movs	r1, #0
   15956:	f36f 0100 	bfc	r1, #0, #1
   1595a:	f36f 0141 	bfc	r1, #1, #1
   1595e:	f36f 0182 	bfc	r1, #2, #1
   15962:	f36f 01c5 	bfc	r1, #3, #3
   15966:	2301      	movs	r3, #1
   15968:	f363 1188 	bfi	r1, r3, #6, #3
   1596c:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   15970:	f363 2152 	bfi	r1, r3, #9, #10
   15974:	f36f 41de 	bfc	r1, #19, #12
   15978:	f36f 71df 	bfc	r1, #31, #1
   1597c:	2300      	movs	r3, #0
   1597e:	4835      	ldr	r0, [pc, #212]	; (15a54 <mem_manage_fault+0x304>)
   15980:	f7fe f9bc 	bl	13cfc <z_impl_z_log_msg_static_create>
   15984:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   15986:	2e00      	cmp	r6, #0
   15988:	f43f af1a 	beq.w	157c0 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1598c:	4a32      	ldr	r2, [pc, #200]	; (15a58 <mem_manage_fault+0x308>)
   1598e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15994:	6293      	str	r3, [r2, #40]	; 0x28
   15996:	e713      	b.n	157c0 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15998:	f06f 0c1b 	mvn.w	ip, #27
   1599c:	e7d1      	b.n	15942 <mem_manage_fault+0x1f2>
		PR_FAULT_INFO("  Instruction Access Violation");
   1599e:	4b33      	ldr	r3, [pc, #204]	; (15a6c <mem_manage_fault+0x31c>)
   159a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   159a2:	2302      	movs	r3, #2
   159a4:	713b      	strb	r3, [r7, #4]
   159a6:	2300      	movs	r3, #0
   159a8:	717b      	strb	r3, [r7, #5]
   159aa:	71bb      	strb	r3, [r7, #6]
   159ac:	71fb      	strb	r3, [r7, #7]
   159ae:	687a      	ldr	r2, [r7, #4]
   159b0:	67ba      	str	r2, [r7, #120]	; 0x78
   159b2:	4619      	mov	r1, r3
   159b4:	f363 0100 	bfi	r1, r3, #0, #1
   159b8:	f363 0141 	bfi	r1, r3, #1, #1
   159bc:	f363 0182 	bfi	r1, r3, #2, #1
   159c0:	f363 01c5 	bfi	r1, r3, #3, #3
   159c4:	2201      	movs	r2, #1
   159c6:	f362 1188 	bfi	r1, r2, #6, #3
   159ca:	2208      	movs	r2, #8
   159cc:	f362 2152 	bfi	r1, r2, #9, #10
   159d0:	f363 41de 	bfi	r1, r3, #19, #12
   159d4:	f363 71df 	bfi	r1, r3, #31, #1
   159d8:	f107 0278 	add.w	r2, r7, #120	; 0x78
   159dc:	481d      	ldr	r0, [pc, #116]	; (15a54 <mem_manage_fault+0x304>)
   159de:	f7fe f98d 	bl	13cfc <z_impl_z_log_msg_static_create>
   159e2:	e6f3      	b.n	157cc <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
   159e4:	4b22      	ldr	r3, [pc, #136]	; (15a70 <mem_manage_fault+0x320>)
   159e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   159ea:	2302      	movs	r3, #2
   159ec:	713b      	strb	r3, [r7, #4]
   159ee:	2300      	movs	r3, #0
   159f0:	717b      	strb	r3, [r7, #5]
   159f2:	71bb      	strb	r3, [r7, #6]
   159f4:	71fb      	strb	r3, [r7, #7]
   159f6:	687a      	ldr	r2, [r7, #4]
   159f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   159fc:	4619      	mov	r1, r3
   159fe:	f363 0100 	bfi	r1, r3, #0, #1
   15a02:	f363 0141 	bfi	r1, r3, #1, #1
   15a06:	f363 0182 	bfi	r1, r3, #2, #1
   15a0a:	f363 01c5 	bfi	r1, r3, #3, #3
   15a0e:	2201      	movs	r2, #1
   15a10:	f362 1188 	bfi	r1, r2, #6, #3
   15a14:	2208      	movs	r2, #8
   15a16:	f362 2152 	bfi	r1, r2, #9, #10
   15a1a:	f363 41de 	bfi	r1, r3, #19, #12
   15a1e:	f363 71df 	bfi	r1, r3, #31, #1
   15a22:	f107 0290 	add.w	r2, r7, #144	; 0x90
   15a26:	480b      	ldr	r0, [pc, #44]	; (15a54 <mem_manage_fault+0x304>)
   15a28:	f7fe f968 	bl	13cfc <z_impl_z_log_msg_static_create>
   15a2c:	e6d4      	b.n	157d8 <mem_manage_fault+0x88>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   15a2e:	4c11      	ldr	r4, [pc, #68]	; (15a74 <mem_manage_fault+0x324>)
   15a30:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   15a34:	4622      	mov	r2, r4
   15a36:	4910      	ldr	r1, [pc, #64]	; (15a78 <mem_manage_fault+0x328>)
   15a38:	4810      	ldr	r0, [pc, #64]	; (15a7c <mem_manage_fault+0x32c>)
   15a3a:	f014 f856 	bl	29aea <assert_print>
   15a3e:	4810      	ldr	r0, [pc, #64]	; (15a80 <mem_manage_fault+0x330>)
   15a40:	f014 f853 	bl	29aea <assert_print>
   15a44:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   15a48:	4620      	mov	r0, r4
   15a4a:	f014 f847 	bl	29adc <assert_post_action>
   15a4e:	bf00      	nop
   15a50:	00030c70 	.word	0x00030c70
   15a54:	0002f8a8 	.word	0x0002f8a8
   15a58:	e000ed00 	.word	0xe000ed00
   15a5c:	00030c88 	.word	0x00030c88
   15a60:	00030cbc 	.word	0x00030cbc
   15a64:	00030cd0 	.word	0x00030cd0
   15a68:	00030ce8 	.word	0x00030ce8
   15a6c:	00030d00 	.word	0x00030d00
   15a70:	00030d20 	.word	0x00030d20
   15a74:	00030d50 	.word	0x00030d50
   15a78:	00030d8c 	.word	0x00030d8c
   15a7c:	0002fdac 	.word	0x0002fdac
   15a80:	00030dd8 	.word	0x00030dd8

00015a84 <bus_fault>:
{
   15a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a88:	b0ac      	sub	sp, #176	; 0xb0
   15a8a:	af00      	add	r7, sp, #0
   15a8c:	4605      	mov	r5, r0
   15a8e:	460e      	mov	r6, r1
   15a90:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   15a92:	4bbc      	ldr	r3, [pc, #752]	; (15d84 <bus_fault+0x300>)
   15a94:	61fb      	str	r3, [r7, #28]
   15a96:	2302      	movs	r3, #2
   15a98:	713b      	strb	r3, [r7, #4]
   15a9a:	2300      	movs	r3, #0
   15a9c:	717b      	strb	r3, [r7, #5]
   15a9e:	71bb      	strb	r3, [r7, #6]
   15aa0:	71fb      	strb	r3, [r7, #7]
   15aa2:	687a      	ldr	r2, [r7, #4]
   15aa4:	61ba      	str	r2, [r7, #24]
   15aa6:	4619      	mov	r1, r3
   15aa8:	f363 0100 	bfi	r1, r3, #0, #1
   15aac:	f363 0141 	bfi	r1, r3, #1, #1
   15ab0:	f363 0182 	bfi	r1, r3, #2, #1
   15ab4:	f363 01c5 	bfi	r1, r3, #3, #3
   15ab8:	2201      	movs	r2, #1
   15aba:	f362 1188 	bfi	r1, r2, #6, #3
   15abe:	2208      	movs	r2, #8
   15ac0:	f362 2152 	bfi	r1, r2, #9, #10
   15ac4:	f363 41de 	bfi	r1, r3, #19, #12
   15ac8:	f363 71df 	bfi	r1, r3, #31, #1
   15acc:	f107 0218 	add.w	r2, r7, #24
   15ad0:	48ad      	ldr	r0, [pc, #692]	; (15d88 <bus_fault+0x304>)
   15ad2:	f7fe f913 	bl	13cfc <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15ad6:	4bad      	ldr	r3, [pc, #692]	; (15d8c <bus_fault+0x308>)
   15ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ada:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15ade:	d12a      	bne.n	15b36 <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15ae0:	4baa      	ldr	r3, [pc, #680]	; (15d8c <bus_fault+0x308>)
   15ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ae4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15ae8:	d148      	bne.n	15b7c <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15aea:	4ba8      	ldr	r3, [pc, #672]	; (15d8c <bus_fault+0x308>)
   15aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15aee:	f413 7f00 	tst.w	r3, #512	; 0x200
   15af2:	d166      	bne.n	15bc2 <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15af4:	4ba5      	ldr	r3, [pc, #660]	; (15d8c <bus_fault+0x308>)
   15af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15af8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   15afc:	f040 80d5 	bne.w	15caa <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15b00:	4ba2      	ldr	r3, [pc, #648]	; (15d8c <bus_fault+0x308>)
   15b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15b04:	f413 7f80 	tst.w	r3, #256	; 0x100
   15b08:	f040 80f2 	bne.w	15cf0 <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15b0c:	4b9f      	ldr	r3, [pc, #636]	; (15d8c <bus_fault+0x308>)
   15b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15b10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15b14:	f040 8111 	bne.w	15d3a <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15b18:	4a9c      	ldr	r2, [pc, #624]	; (15d8c <bus_fault+0x308>)
   15b1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15b1c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15b20:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15b22:	2101      	movs	r1, #1
   15b24:	4628      	mov	r0, r5
   15b26:	f015 fa14 	bl	2af52 <memory_fault_recoverable>
   15b2a:	7020      	strb	r0, [r4, #0]
}
   15b2c:	2000      	movs	r0, #0
   15b2e:	37b0      	adds	r7, #176	; 0xb0
   15b30:	46bd      	mov	sp, r7
   15b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
   15b36:	4b96      	ldr	r3, [pc, #600]	; (15d90 <bus_fault+0x30c>)
   15b38:	637b      	str	r3, [r7, #52]	; 0x34
   15b3a:	2302      	movs	r3, #2
   15b3c:	713b      	strb	r3, [r7, #4]
   15b3e:	2300      	movs	r3, #0
   15b40:	717b      	strb	r3, [r7, #5]
   15b42:	71bb      	strb	r3, [r7, #6]
   15b44:	71fb      	strb	r3, [r7, #7]
   15b46:	687a      	ldr	r2, [r7, #4]
   15b48:	633a      	str	r2, [r7, #48]	; 0x30
   15b4a:	4619      	mov	r1, r3
   15b4c:	f363 0100 	bfi	r1, r3, #0, #1
   15b50:	f363 0141 	bfi	r1, r3, #1, #1
   15b54:	f363 0182 	bfi	r1, r3, #2, #1
   15b58:	f363 01c5 	bfi	r1, r3, #3, #3
   15b5c:	2201      	movs	r2, #1
   15b5e:	f362 1188 	bfi	r1, r2, #6, #3
   15b62:	2208      	movs	r2, #8
   15b64:	f362 2152 	bfi	r1, r2, #9, #10
   15b68:	f363 41de 	bfi	r1, r3, #19, #12
   15b6c:	f363 71df 	bfi	r1, r3, #31, #1
   15b70:	f107 0230 	add.w	r2, r7, #48	; 0x30
   15b74:	4884      	ldr	r0, [pc, #528]	; (15d88 <bus_fault+0x304>)
   15b76:	f7fe f8c1 	bl	13cfc <z_impl_z_log_msg_static_create>
   15b7a:	e7b1      	b.n	15ae0 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   15b7c:	4b85      	ldr	r3, [pc, #532]	; (15d94 <bus_fault+0x310>)
   15b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   15b80:	2302      	movs	r3, #2
   15b82:	713b      	strb	r3, [r7, #4]
   15b84:	2300      	movs	r3, #0
   15b86:	717b      	strb	r3, [r7, #5]
   15b88:	71bb      	strb	r3, [r7, #6]
   15b8a:	71fb      	strb	r3, [r7, #7]
   15b8c:	687a      	ldr	r2, [r7, #4]
   15b8e:	64ba      	str	r2, [r7, #72]	; 0x48
   15b90:	4619      	mov	r1, r3
   15b92:	f363 0100 	bfi	r1, r3, #0, #1
   15b96:	f363 0141 	bfi	r1, r3, #1, #1
   15b9a:	f363 0182 	bfi	r1, r3, #2, #1
   15b9e:	f363 01c5 	bfi	r1, r3, #3, #3
   15ba2:	2201      	movs	r2, #1
   15ba4:	f362 1188 	bfi	r1, r2, #6, #3
   15ba8:	2208      	movs	r2, #8
   15baa:	f362 2152 	bfi	r1, r2, #9, #10
   15bae:	f363 41de 	bfi	r1, r3, #19, #12
   15bb2:	f363 71df 	bfi	r1, r3, #31, #1
   15bb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
   15bba:	4873      	ldr	r0, [pc, #460]	; (15d88 <bus_fault+0x304>)
   15bbc:	f7fe f89e 	bl	13cfc <z_impl_z_log_msg_static_create>
   15bc0:	e793      	b.n	15aea <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
   15bc2:	4b75      	ldr	r3, [pc, #468]	; (15d98 <bus_fault+0x314>)
   15bc4:	667b      	str	r3, [r7, #100]	; 0x64
   15bc6:	2302      	movs	r3, #2
   15bc8:	713b      	strb	r3, [r7, #4]
   15bca:	2300      	movs	r3, #0
   15bcc:	717b      	strb	r3, [r7, #5]
   15bce:	71bb      	strb	r3, [r7, #6]
   15bd0:	71fb      	strb	r3, [r7, #7]
   15bd2:	687a      	ldr	r2, [r7, #4]
   15bd4:	663a      	str	r2, [r7, #96]	; 0x60
   15bd6:	4619      	mov	r1, r3
   15bd8:	f363 0100 	bfi	r1, r3, #0, #1
   15bdc:	f363 0141 	bfi	r1, r3, #1, #1
   15be0:	f363 0182 	bfi	r1, r3, #2, #1
   15be4:	f363 01c5 	bfi	r1, r3, #3, #3
   15be8:	2201      	movs	r2, #1
   15bea:	f362 1188 	bfi	r1, r2, #6, #3
   15bee:	2208      	movs	r2, #8
   15bf0:	f362 2152 	bfi	r1, r2, #9, #10
   15bf4:	f363 41de 	bfi	r1, r3, #19, #12
   15bf8:	f363 71df 	bfi	r1, r3, #31, #1
   15bfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15c00:	4861      	ldr	r0, [pc, #388]	; (15d88 <bus_fault+0x304>)
   15c02:	f7fe f87b 	bl	13cfc <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
   15c06:	4b61      	ldr	r3, [pc, #388]	; (15d8c <bus_fault+0x308>)
   15c08:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c0c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15c10:	f43f af70 	beq.w	15af4 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15c14:	46e8      	mov	r8, sp
   15c16:	b088      	sub	sp, #32
   15c18:	466b      	mov	r3, sp
   15c1a:	f113 0210 	adds.w	r2, r3, #16
   15c1e:	d011      	beq.n	15c44 <bus_fault+0x1c0>
   15c20:	210c      	movs	r1, #12
   15c22:	b152      	cbz	r2, 15c3a <bus_fault+0x1b6>
   15c24:	468c      	mov	ip, r1
   15c26:	2904      	cmp	r1, #4
   15c28:	dd03      	ble.n	15c32 <bus_fault+0x1ae>
   15c2a:	f8df e170 	ldr.w	lr, [pc, #368]	; 15d9c <bus_fault+0x318>
   15c2e:	f8c3 e014 	str.w	lr, [r3, #20]
   15c32:	f1bc 0f08 	cmp.w	ip, #8
   15c36:	dd08      	ble.n	15c4a <bus_fault+0x1c6>
   15c38:	6198      	str	r0, [r3, #24]
   15c3a:	290b      	cmp	r1, #11
   15c3c:	dd32      	ble.n	15ca4 <bus_fault+0x220>
   15c3e:	f04f 0c0c 	mov.w	ip, #12
   15c42:	e004      	b.n	15c4e <bus_fault+0x1ca>
   15c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15c48:	e7eb      	b.n	15c22 <bus_fault+0x19e>
   15c4a:	f06f 0c1b 	mvn.w	ip, #27
   15c4e:	b13a      	cbz	r2, 15c60 <bus_fault+0x1dc>
   15c50:	2103      	movs	r1, #3
   15c52:	7139      	strb	r1, [r7, #4]
   15c54:	2100      	movs	r1, #0
   15c56:	7179      	strb	r1, [r7, #5]
   15c58:	71b9      	strb	r1, [r7, #6]
   15c5a:	71f9      	strb	r1, [r7, #7]
   15c5c:	6878      	ldr	r0, [r7, #4]
   15c5e:	6118      	str	r0, [r3, #16]
   15c60:	2100      	movs	r1, #0
   15c62:	f36f 0100 	bfc	r1, #0, #1
   15c66:	f36f 0141 	bfc	r1, #1, #1
   15c6a:	f36f 0182 	bfc	r1, #2, #1
   15c6e:	f36f 01c5 	bfc	r1, #3, #3
   15c72:	2301      	movs	r3, #1
   15c74:	f363 1188 	bfi	r1, r3, #6, #3
   15c78:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   15c7c:	f363 2152 	bfi	r1, r3, #9, #10
   15c80:	f36f 41de 	bfc	r1, #19, #12
   15c84:	f36f 71df 	bfc	r1, #31, #1
   15c88:	2300      	movs	r3, #0
   15c8a:	483f      	ldr	r0, [pc, #252]	; (15d88 <bus_fault+0x304>)
   15c8c:	f7fe f836 	bl	13cfc <z_impl_z_log_msg_static_create>
   15c90:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   15c92:	2e00      	cmp	r6, #0
   15c94:	f43f af2e 	beq.w	15af4 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15c98:	4a3c      	ldr	r2, [pc, #240]	; (15d8c <bus_fault+0x308>)
   15c9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15ca0:	6293      	str	r3, [r2, #40]	; 0x28
   15ca2:	e727      	b.n	15af4 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15ca4:	f06f 0c1b 	mvn.w	ip, #27
   15ca8:	e7d1      	b.n	15c4e <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
   15caa:	4b3d      	ldr	r3, [pc, #244]	; (15da0 <bus_fault+0x31c>)
   15cac:	67fb      	str	r3, [r7, #124]	; 0x7c
   15cae:	2302      	movs	r3, #2
   15cb0:	713b      	strb	r3, [r7, #4]
   15cb2:	2300      	movs	r3, #0
   15cb4:	717b      	strb	r3, [r7, #5]
   15cb6:	71bb      	strb	r3, [r7, #6]
   15cb8:	71fb      	strb	r3, [r7, #7]
   15cba:	687a      	ldr	r2, [r7, #4]
   15cbc:	67ba      	str	r2, [r7, #120]	; 0x78
   15cbe:	4619      	mov	r1, r3
   15cc0:	f363 0100 	bfi	r1, r3, #0, #1
   15cc4:	f363 0141 	bfi	r1, r3, #1, #1
   15cc8:	f363 0182 	bfi	r1, r3, #2, #1
   15ccc:	f363 01c5 	bfi	r1, r3, #3, #3
   15cd0:	2201      	movs	r2, #1
   15cd2:	f362 1188 	bfi	r1, r2, #6, #3
   15cd6:	2208      	movs	r2, #8
   15cd8:	f362 2152 	bfi	r1, r2, #9, #10
   15cdc:	f363 41de 	bfi	r1, r3, #19, #12
   15ce0:	f363 71df 	bfi	r1, r3, #31, #1
   15ce4:	f107 0278 	add.w	r2, r7, #120	; 0x78
   15ce8:	4827      	ldr	r0, [pc, #156]	; (15d88 <bus_fault+0x304>)
   15cea:	f7fe f807 	bl	13cfc <z_impl_z_log_msg_static_create>
   15cee:	e707      	b.n	15b00 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
   15cf0:	4b2c      	ldr	r3, [pc, #176]	; (15da4 <bus_fault+0x320>)
   15cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   15cf6:	2302      	movs	r3, #2
   15cf8:	713b      	strb	r3, [r7, #4]
   15cfa:	2300      	movs	r3, #0
   15cfc:	717b      	strb	r3, [r7, #5]
   15cfe:	71bb      	strb	r3, [r7, #6]
   15d00:	71fb      	strb	r3, [r7, #7]
   15d02:	687a      	ldr	r2, [r7, #4]
   15d04:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   15d08:	4619      	mov	r1, r3
   15d0a:	f363 0100 	bfi	r1, r3, #0, #1
   15d0e:	f363 0141 	bfi	r1, r3, #1, #1
   15d12:	f363 0182 	bfi	r1, r3, #2, #1
   15d16:	f363 01c5 	bfi	r1, r3, #3, #3
   15d1a:	2201      	movs	r2, #1
   15d1c:	f362 1188 	bfi	r1, r2, #6, #3
   15d20:	2208      	movs	r2, #8
   15d22:	f362 2152 	bfi	r1, r2, #9, #10
   15d26:	f363 41de 	bfi	r1, r3, #19, #12
   15d2a:	f363 71df 	bfi	r1, r3, #31, #1
   15d2e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   15d32:	4815      	ldr	r0, [pc, #84]	; (15d88 <bus_fault+0x304>)
   15d34:	f7fd ffe2 	bl	13cfc <z_impl_z_log_msg_static_create>
   15d38:	e6ee      	b.n	15b18 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15d3a:	4b1b      	ldr	r3, [pc, #108]	; (15da8 <bus_fault+0x324>)
   15d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   15d40:	2302      	movs	r3, #2
   15d42:	713b      	strb	r3, [r7, #4]
   15d44:	2300      	movs	r3, #0
   15d46:	717b      	strb	r3, [r7, #5]
   15d48:	71bb      	strb	r3, [r7, #6]
   15d4a:	71fb      	strb	r3, [r7, #7]
   15d4c:	687a      	ldr	r2, [r7, #4]
   15d4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   15d52:	4619      	mov	r1, r3
   15d54:	f363 0100 	bfi	r1, r3, #0, #1
   15d58:	f363 0141 	bfi	r1, r3, #1, #1
   15d5c:	f363 0182 	bfi	r1, r3, #2, #1
   15d60:	f363 01c5 	bfi	r1, r3, #3, #3
   15d64:	2201      	movs	r2, #1
   15d66:	f362 1188 	bfi	r1, r2, #6, #3
   15d6a:	2208      	movs	r2, #8
   15d6c:	f362 2152 	bfi	r1, r2, #9, #10
   15d70:	f363 41de 	bfi	r1, r3, #19, #12
   15d74:	f363 71df 	bfi	r1, r3, #31, #1
   15d78:	f107 0290 	add.w	r2, r7, #144	; 0x90
   15d7c:	4802      	ldr	r0, [pc, #8]	; (15d88 <bus_fault+0x304>)
   15d7e:	f7fd ffbd 	bl	13cfc <z_impl_z_log_msg_static_create>
   15d82:	e6c9      	b.n	15b18 <bus_fault+0x94>
   15d84:	00030e3c 	.word	0x00030e3c
   15d88:	0002f8a8 	.word	0x0002f8a8
   15d8c:	e000ed00 	.word	0xe000ed00
   15d90:	00030e54 	.word	0x00030e54
   15d94:	00030cbc 	.word	0x00030cbc
   15d98:	00030e68 	.word	0x00030e68
   15d9c:	00030e84 	.word	0x00030e84
   15da0:	00030e9c 	.word	0x00030e9c
   15da4:	00030eb8 	.word	0x00030eb8
   15da8:	00030d20 	.word	0x00030d20

00015dac <usage_fault>:
{
   15dac:	b510      	push	{r4, lr}
   15dae:	b0b2      	sub	sp, #200	; 0xc8
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15db0:	4baf      	ldr	r3, [pc, #700]	; (16070 <usage_fault+0x2c4>)
   15db2:	9307      	str	r3, [sp, #28]
   15db4:	2302      	movs	r3, #2
   15db6:	f88d 3004 	strb.w	r3, [sp, #4]
   15dba:	2300      	movs	r3, #0
   15dbc:	f88d 3005 	strb.w	r3, [sp, #5]
   15dc0:	f88d 3006 	strb.w	r3, [sp, #6]
   15dc4:	f88d 3007 	strb.w	r3, [sp, #7]
   15dc8:	9a01      	ldr	r2, [sp, #4]
   15dca:	9206      	str	r2, [sp, #24]
   15dcc:	4619      	mov	r1, r3
   15dce:	f363 0100 	bfi	r1, r3, #0, #1
   15dd2:	f363 0141 	bfi	r1, r3, #1, #1
   15dd6:	f363 0182 	bfi	r1, r3, #2, #1
   15dda:	f363 01c5 	bfi	r1, r3, #3, #3
   15dde:	2201      	movs	r2, #1
   15de0:	f362 1188 	bfi	r1, r2, #6, #3
   15de4:	2208      	movs	r2, #8
   15de6:	f362 2152 	bfi	r1, r2, #9, #10
   15dea:	f363 41de 	bfi	r1, r3, #19, #12
   15dee:	f363 71df 	bfi	r1, r3, #31, #1
   15df2:	aa06      	add	r2, sp, #24
   15df4:	489f      	ldr	r0, [pc, #636]	; (16074 <usage_fault+0x2c8>)
   15df6:	f7fd ff81 	bl	13cfc <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15dfa:	4b9f      	ldr	r3, [pc, #636]	; (16078 <usage_fault+0x2cc>)
   15dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15dfe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15e02:	d12b      	bne.n	15e5c <usage_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15e04:	4b9c      	ldr	r3, [pc, #624]	; (16078 <usage_fault+0x2cc>)
   15e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15e0c:	d14c      	bne.n	15ea8 <usage_fault+0xfc>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   15e0e:	4b9a      	ldr	r3, [pc, #616]	; (16078 <usage_fault+0x2cc>)
   15e10:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   15e12:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   15e16:	d16d      	bne.n	15ef4 <usage_fault+0x148>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15e18:	4b97      	ldr	r3, [pc, #604]	; (16078 <usage_fault+0x2cc>)
   15e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e1c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15e20:	f040 808e 	bne.w	15f40 <usage_fault+0x194>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15e24:	4b94      	ldr	r3, [pc, #592]	; (16078 <usage_fault+0x2cc>)
   15e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e28:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15e2c:	f040 80ae 	bne.w	15f8c <usage_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15e30:	4b91      	ldr	r3, [pc, #580]	; (16078 <usage_fault+0x2cc>)
   15e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15e38:	f040 80ce 	bne.w	15fd8 <usage_fault+0x22c>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15e3c:	4b8e      	ldr	r3, [pc, #568]	; (16078 <usage_fault+0x2cc>)
   15e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15e44:	f040 80ee 	bne.w	16024 <usage_fault+0x278>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15e48:	4a8b      	ldr	r2, [pc, #556]	; (16078 <usage_fault+0x2cc>)
   15e4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15e4c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15e50:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15e54:	6293      	str	r3, [r2, #40]	; 0x28
}
   15e56:	4620      	mov	r0, r4
   15e58:	b032      	add	sp, #200	; 0xc8
   15e5a:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
   15e5c:	4b87      	ldr	r3, [pc, #540]	; (1607c <usage_fault+0x2d0>)
   15e5e:	930d      	str	r3, [sp, #52]	; 0x34
   15e60:	2302      	movs	r3, #2
   15e62:	f88d 3004 	strb.w	r3, [sp, #4]
   15e66:	2300      	movs	r3, #0
   15e68:	f88d 3005 	strb.w	r3, [sp, #5]
   15e6c:	f88d 3006 	strb.w	r3, [sp, #6]
   15e70:	f88d 3007 	strb.w	r3, [sp, #7]
   15e74:	9a01      	ldr	r2, [sp, #4]
   15e76:	920c      	str	r2, [sp, #48]	; 0x30
   15e78:	4619      	mov	r1, r3
   15e7a:	f363 0100 	bfi	r1, r3, #0, #1
   15e7e:	f363 0141 	bfi	r1, r3, #1, #1
   15e82:	f363 0182 	bfi	r1, r3, #2, #1
   15e86:	f363 01c5 	bfi	r1, r3, #3, #3
   15e8a:	2201      	movs	r2, #1
   15e8c:	f362 1188 	bfi	r1, r2, #6, #3
   15e90:	2208      	movs	r2, #8
   15e92:	f362 2152 	bfi	r1, r2, #9, #10
   15e96:	f363 41de 	bfi	r1, r3, #19, #12
   15e9a:	f363 71df 	bfi	r1, r3, #31, #1
   15e9e:	aa0c      	add	r2, sp, #48	; 0x30
   15ea0:	4874      	ldr	r0, [pc, #464]	; (16074 <usage_fault+0x2c8>)
   15ea2:	f7fd ff2b 	bl	13cfc <z_impl_z_log_msg_static_create>
   15ea6:	e7ad      	b.n	15e04 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   15ea8:	4b75      	ldr	r3, [pc, #468]	; (16080 <usage_fault+0x2d4>)
   15eaa:	9313      	str	r3, [sp, #76]	; 0x4c
   15eac:	2302      	movs	r3, #2
   15eae:	f88d 3004 	strb.w	r3, [sp, #4]
   15eb2:	2300      	movs	r3, #0
   15eb4:	f88d 3005 	strb.w	r3, [sp, #5]
   15eb8:	f88d 3006 	strb.w	r3, [sp, #6]
   15ebc:	f88d 3007 	strb.w	r3, [sp, #7]
   15ec0:	9a01      	ldr	r2, [sp, #4]
   15ec2:	9212      	str	r2, [sp, #72]	; 0x48
   15ec4:	4619      	mov	r1, r3
   15ec6:	f363 0100 	bfi	r1, r3, #0, #1
   15eca:	f363 0141 	bfi	r1, r3, #1, #1
   15ece:	f363 0182 	bfi	r1, r3, #2, #1
   15ed2:	f363 01c5 	bfi	r1, r3, #3, #3
   15ed6:	2201      	movs	r2, #1
   15ed8:	f362 1188 	bfi	r1, r2, #6, #3
   15edc:	2208      	movs	r2, #8
   15ede:	f362 2152 	bfi	r1, r2, #9, #10
   15ee2:	f363 41de 	bfi	r1, r3, #19, #12
   15ee6:	f363 71df 	bfi	r1, r3, #31, #1
   15eea:	aa12      	add	r2, sp, #72	; 0x48
   15eec:	4861      	ldr	r0, [pc, #388]	; (16074 <usage_fault+0x2c8>)
   15eee:	f7fd ff05 	bl	13cfc <z_impl_z_log_msg_static_create>
   15ef2:	e78c      	b.n	15e0e <usage_fault+0x62>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   15ef4:	4b63      	ldr	r3, [pc, #396]	; (16084 <usage_fault+0x2d8>)
   15ef6:	9319      	str	r3, [sp, #100]	; 0x64
   15ef8:	2402      	movs	r4, #2
   15efa:	f88d 4004 	strb.w	r4, [sp, #4]
   15efe:	2300      	movs	r3, #0
   15f00:	f88d 3005 	strb.w	r3, [sp, #5]
   15f04:	f88d 3006 	strb.w	r3, [sp, #6]
   15f08:	f88d 3007 	strb.w	r3, [sp, #7]
   15f0c:	9a01      	ldr	r2, [sp, #4]
   15f0e:	9218      	str	r2, [sp, #96]	; 0x60
   15f10:	4619      	mov	r1, r3
   15f12:	f363 0100 	bfi	r1, r3, #0, #1
   15f16:	f363 0141 	bfi	r1, r3, #1, #1
   15f1a:	f363 0182 	bfi	r1, r3, #2, #1
   15f1e:	f363 01c5 	bfi	r1, r3, #3, #3
   15f22:	2201      	movs	r2, #1
   15f24:	f362 1188 	bfi	r1, r2, #6, #3
   15f28:	2208      	movs	r2, #8
   15f2a:	f362 2152 	bfi	r1, r2, #9, #10
   15f2e:	f363 41de 	bfi	r1, r3, #19, #12
   15f32:	f363 71df 	bfi	r1, r3, #31, #1
   15f36:	aa18      	add	r2, sp, #96	; 0x60
   15f38:	484e      	ldr	r0, [pc, #312]	; (16074 <usage_fault+0x2c8>)
   15f3a:	f7fd fedf 	bl	13cfc <z_impl_z_log_msg_static_create>
		reason = K_ERR_STACK_CHK_FAIL;
   15f3e:	e76b      	b.n	15e18 <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
   15f40:	4b51      	ldr	r3, [pc, #324]	; (16088 <usage_fault+0x2dc>)
   15f42:	931f      	str	r3, [sp, #124]	; 0x7c
   15f44:	2302      	movs	r3, #2
   15f46:	f88d 3004 	strb.w	r3, [sp, #4]
   15f4a:	2300      	movs	r3, #0
   15f4c:	f88d 3005 	strb.w	r3, [sp, #5]
   15f50:	f88d 3006 	strb.w	r3, [sp, #6]
   15f54:	f88d 3007 	strb.w	r3, [sp, #7]
   15f58:	9a01      	ldr	r2, [sp, #4]
   15f5a:	921e      	str	r2, [sp, #120]	; 0x78
   15f5c:	4619      	mov	r1, r3
   15f5e:	f363 0100 	bfi	r1, r3, #0, #1
   15f62:	f363 0141 	bfi	r1, r3, #1, #1
   15f66:	f363 0182 	bfi	r1, r3, #2, #1
   15f6a:	f363 01c5 	bfi	r1, r3, #3, #3
   15f6e:	2201      	movs	r2, #1
   15f70:	f362 1188 	bfi	r1, r2, #6, #3
   15f74:	2208      	movs	r2, #8
   15f76:	f362 2152 	bfi	r1, r2, #9, #10
   15f7a:	f363 41de 	bfi	r1, r3, #19, #12
   15f7e:	f363 71df 	bfi	r1, r3, #31, #1
   15f82:	aa1e      	add	r2, sp, #120	; 0x78
   15f84:	483b      	ldr	r0, [pc, #236]	; (16074 <usage_fault+0x2c8>)
   15f86:	f7fd feb9 	bl	13cfc <z_impl_z_log_msg_static_create>
   15f8a:	e74b      	b.n	15e24 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15f8c:	4b3f      	ldr	r3, [pc, #252]	; (1608c <usage_fault+0x2e0>)
   15f8e:	9325      	str	r3, [sp, #148]	; 0x94
   15f90:	2302      	movs	r3, #2
   15f92:	f88d 3004 	strb.w	r3, [sp, #4]
   15f96:	2300      	movs	r3, #0
   15f98:	f88d 3005 	strb.w	r3, [sp, #5]
   15f9c:	f88d 3006 	strb.w	r3, [sp, #6]
   15fa0:	f88d 3007 	strb.w	r3, [sp, #7]
   15fa4:	9a01      	ldr	r2, [sp, #4]
   15fa6:	9224      	str	r2, [sp, #144]	; 0x90
   15fa8:	4619      	mov	r1, r3
   15faa:	f363 0100 	bfi	r1, r3, #0, #1
   15fae:	f363 0141 	bfi	r1, r3, #1, #1
   15fb2:	f363 0182 	bfi	r1, r3, #2, #1
   15fb6:	f363 01c5 	bfi	r1, r3, #3, #3
   15fba:	2201      	movs	r2, #1
   15fbc:	f362 1188 	bfi	r1, r2, #6, #3
   15fc0:	2208      	movs	r2, #8
   15fc2:	f362 2152 	bfi	r1, r2, #9, #10
   15fc6:	f363 41de 	bfi	r1, r3, #19, #12
   15fca:	f363 71df 	bfi	r1, r3, #31, #1
   15fce:	aa24      	add	r2, sp, #144	; 0x90
   15fd0:	4828      	ldr	r0, [pc, #160]	; (16074 <usage_fault+0x2c8>)
   15fd2:	f7fd fe93 	bl	13cfc <z_impl_z_log_msg_static_create>
   15fd6:	e72b      	b.n	15e30 <usage_fault+0x84>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15fd8:	4b2d      	ldr	r3, [pc, #180]	; (16090 <usage_fault+0x2e4>)
   15fda:	932b      	str	r3, [sp, #172]	; 0xac
   15fdc:	2302      	movs	r3, #2
   15fde:	f88d 3004 	strb.w	r3, [sp, #4]
   15fe2:	2300      	movs	r3, #0
   15fe4:	f88d 3005 	strb.w	r3, [sp, #5]
   15fe8:	f88d 3006 	strb.w	r3, [sp, #6]
   15fec:	f88d 3007 	strb.w	r3, [sp, #7]
   15ff0:	9a01      	ldr	r2, [sp, #4]
   15ff2:	922a      	str	r2, [sp, #168]	; 0xa8
   15ff4:	4619      	mov	r1, r3
   15ff6:	f363 0100 	bfi	r1, r3, #0, #1
   15ffa:	f363 0141 	bfi	r1, r3, #1, #1
   15ffe:	f363 0182 	bfi	r1, r3, #2, #1
   16002:	f363 01c5 	bfi	r1, r3, #3, #3
   16006:	2201      	movs	r2, #1
   16008:	f362 1188 	bfi	r1, r2, #6, #3
   1600c:	2208      	movs	r2, #8
   1600e:	f362 2152 	bfi	r1, r2, #9, #10
   16012:	f363 41de 	bfi	r1, r3, #19, #12
   16016:	f363 71df 	bfi	r1, r3, #31, #1
   1601a:	aa2a      	add	r2, sp, #168	; 0xa8
   1601c:	4815      	ldr	r0, [pc, #84]	; (16074 <usage_fault+0x2c8>)
   1601e:	f7fd fe6d 	bl	13cfc <z_impl_z_log_msg_static_create>
   16022:	e70b      	b.n	15e3c <usage_fault+0x90>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   16024:	4b1b      	ldr	r3, [pc, #108]	; (16094 <usage_fault+0x2e8>)
   16026:	9331      	str	r3, [sp, #196]	; 0xc4
   16028:	2302      	movs	r3, #2
   1602a:	f88d 3004 	strb.w	r3, [sp, #4]
   1602e:	2300      	movs	r3, #0
   16030:	f88d 3005 	strb.w	r3, [sp, #5]
   16034:	f88d 3006 	strb.w	r3, [sp, #6]
   16038:	f88d 3007 	strb.w	r3, [sp, #7]
   1603c:	9a01      	ldr	r2, [sp, #4]
   1603e:	9230      	str	r2, [sp, #192]	; 0xc0
   16040:	4619      	mov	r1, r3
   16042:	f363 0100 	bfi	r1, r3, #0, #1
   16046:	f363 0141 	bfi	r1, r3, #1, #1
   1604a:	f363 0182 	bfi	r1, r3, #2, #1
   1604e:	f363 01c5 	bfi	r1, r3, #3, #3
   16052:	2201      	movs	r2, #1
   16054:	f362 1188 	bfi	r1, r2, #6, #3
   16058:	2208      	movs	r2, #8
   1605a:	f362 2152 	bfi	r1, r2, #9, #10
   1605e:	f363 41de 	bfi	r1, r3, #19, #12
   16062:	f363 71df 	bfi	r1, r3, #31, #1
   16066:	aa30      	add	r2, sp, #192	; 0xc0
   16068:	4802      	ldr	r0, [pc, #8]	; (16074 <usage_fault+0x2c8>)
   1606a:	f7fd fe47 	bl	13cfc <z_impl_z_log_msg_static_create>
   1606e:	e6eb      	b.n	15e48 <usage_fault+0x9c>
   16070:	00030ed0 	.word	0x00030ed0
   16074:	0002f8a8 	.word	0x0002f8a8
   16078:	e000ed00 	.word	0xe000ed00
   1607c:	00030ee8 	.word	0x00030ee8
   16080:	00030efc 	.word	0x00030efc
   16084:	00030f18 	.word	0x00030f18
   16088:	00030f44 	.word	0x00030f44
   1608c:	00030f64 	.word	0x00030f64
   16090:	00030f8c 	.word	0x00030f8c
   16094:	00030fa8 	.word	0x00030fa8

00016098 <hard_fault>:
{
   16098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1609a:	b09b      	sub	sp, #108	; 0x6c
   1609c:	af00      	add	r7, sp, #0
   1609e:	4605      	mov	r5, r0
   160a0:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   160a2:	4b95      	ldr	r3, [pc, #596]	; (162f8 <hard_fault+0x260>)
   160a4:	61fb      	str	r3, [r7, #28]
   160a6:	2302      	movs	r3, #2
   160a8:	713b      	strb	r3, [r7, #4]
   160aa:	2400      	movs	r4, #0
   160ac:	717c      	strb	r4, [r7, #5]
   160ae:	71bc      	strb	r4, [r7, #6]
   160b0:	71fc      	strb	r4, [r7, #7]
   160b2:	687b      	ldr	r3, [r7, #4]
   160b4:	61bb      	str	r3, [r7, #24]
   160b6:	4621      	mov	r1, r4
   160b8:	f364 0100 	bfi	r1, r4, #0, #1
   160bc:	f364 0141 	bfi	r1, r4, #1, #1
   160c0:	f364 0182 	bfi	r1, r4, #2, #1
   160c4:	f364 01c5 	bfi	r1, r4, #3, #3
   160c8:	2301      	movs	r3, #1
   160ca:	f363 1188 	bfi	r1, r3, #6, #3
   160ce:	2308      	movs	r3, #8
   160d0:	f363 2152 	bfi	r1, r3, #9, #10
   160d4:	f364 41de 	bfi	r1, r4, #19, #12
   160d8:	f364 71df 	bfi	r1, r4, #31, #1
   160dc:	4623      	mov	r3, r4
   160de:	f107 0218 	add.w	r2, r7, #24
   160e2:	4886      	ldr	r0, [pc, #536]	; (162fc <hard_fault+0x264>)
   160e4:	f7fd fe0a 	bl	13cfc <z_impl_z_log_msg_static_create>
	*recoverable = false;
   160e8:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   160ea:	4b85      	ldr	r3, [pc, #532]	; (16300 <hard_fault+0x268>)
   160ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   160ee:	f014 0402 	ands.w	r4, r4, #2
   160f2:	d148      	bne.n	16186 <hard_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   160f4:	4b82      	ldr	r3, [pc, #520]	; (16300 <hard_fault+0x268>)
   160f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   160f8:	2b00      	cmp	r3, #0
   160fa:	db6b      	blt.n	161d4 <hard_fault+0x13c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   160fc:	4b80      	ldr	r3, [pc, #512]	; (16300 <hard_fault+0x268>)
   160fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16100:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   16104:	f000 80e7 	beq.w	162d6 <hard_fault+0x23e>
		PR_EXC("  Fault escalation (see below)");
   16108:	4b7e      	ldr	r3, [pc, #504]	; (16304 <hard_fault+0x26c>)
   1610a:	637b      	str	r3, [r7, #52]	; 0x34
   1610c:	2302      	movs	r3, #2
   1610e:	713b      	strb	r3, [r7, #4]
   16110:	2300      	movs	r3, #0
   16112:	717b      	strb	r3, [r7, #5]
   16114:	71bb      	strb	r3, [r7, #6]
   16116:	71fb      	strb	r3, [r7, #7]
   16118:	687a      	ldr	r2, [r7, #4]
   1611a:	633a      	str	r2, [r7, #48]	; 0x30
   1611c:	4619      	mov	r1, r3
   1611e:	f363 0100 	bfi	r1, r3, #0, #1
   16122:	f363 0141 	bfi	r1, r3, #1, #1
   16126:	f363 0182 	bfi	r1, r3, #2, #1
   1612a:	f363 01c5 	bfi	r1, r3, #3, #3
   1612e:	2201      	movs	r2, #1
   16130:	f362 1188 	bfi	r1, r2, #6, #3
   16134:	2208      	movs	r2, #8
   16136:	f362 2152 	bfi	r1, r2, #9, #10
   1613a:	f363 41de 	bfi	r1, r3, #19, #12
   1613e:	f363 71df 	bfi	r1, r3, #31, #1
   16142:	f107 0230 	add.w	r2, r7, #48	; 0x30
   16146:	486d      	ldr	r0, [pc, #436]	; (162fc <hard_fault+0x264>)
   16148:	f7fd fdd8 	bl	13cfc <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
   1614c:	4628      	mov	r0, r5
   1614e:	f7ff fa8b 	bl	15668 <z_arm_is_synchronous_svc>
   16152:	2800      	cmp	r0, #0
   16154:	f000 808d 	beq.w	16272 <hard_fault+0x1da>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   16158:	682c      	ldr	r4, [r5, #0]
   1615a:	466e      	mov	r6, sp
   1615c:	b088      	sub	sp, #32
   1615e:	466b      	mov	r3, sp
   16160:	f113 0210 	adds.w	r2, r3, #16
   16164:	d059      	beq.n	1621a <hard_fault+0x182>
   16166:	210c      	movs	r1, #12
   16168:	b14a      	cbz	r2, 1617e <hard_fault+0xe6>
   1616a:	4608      	mov	r0, r1
   1616c:	2904      	cmp	r1, #4
   1616e:	dd03      	ble.n	16178 <hard_fault+0xe0>
   16170:	f8df c194 	ldr.w	ip, [pc, #404]	; 16308 <hard_fault+0x270>
   16174:	f8c3 c014 	str.w	ip, [r3, #20]
   16178:	2808      	cmp	r0, #8
   1617a:	dd51      	ble.n	16220 <hard_fault+0x188>
   1617c:	619c      	str	r4, [r3, #24]
   1617e:	290b      	cmp	r1, #11
   16180:	dd74      	ble.n	1626c <hard_fault+0x1d4>
   16182:	240c      	movs	r4, #12
   16184:	e04e      	b.n	16224 <hard_fault+0x18c>
		PR_EXC("  Bus fault on vector table read");
   16186:	4b61      	ldr	r3, [pc, #388]	; (1630c <hard_fault+0x274>)
   16188:	667b      	str	r3, [r7, #100]	; 0x64
   1618a:	2302      	movs	r3, #2
   1618c:	713b      	strb	r3, [r7, #4]
   1618e:	2400      	movs	r4, #0
   16190:	717c      	strb	r4, [r7, #5]
   16192:	71bc      	strb	r4, [r7, #6]
   16194:	71fc      	strb	r4, [r7, #7]
   16196:	687b      	ldr	r3, [r7, #4]
   16198:	663b      	str	r3, [r7, #96]	; 0x60
   1619a:	4621      	mov	r1, r4
   1619c:	f364 0100 	bfi	r1, r4, #0, #1
   161a0:	f364 0141 	bfi	r1, r4, #1, #1
   161a4:	f364 0182 	bfi	r1, r4, #2, #1
   161a8:	f364 01c5 	bfi	r1, r4, #3, #3
   161ac:	2301      	movs	r3, #1
   161ae:	f363 1188 	bfi	r1, r3, #6, #3
   161b2:	2308      	movs	r3, #8
   161b4:	f363 2152 	bfi	r1, r3, #9, #10
   161b8:	f364 41de 	bfi	r1, r4, #19, #12
   161bc:	f364 71df 	bfi	r1, r4, #31, #1
   161c0:	4623      	mov	r3, r4
   161c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
   161c6:	484d      	ldr	r0, [pc, #308]	; (162fc <hard_fault+0x264>)
   161c8:	f7fd fd98 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   161cc:	4620      	mov	r0, r4
   161ce:	376c      	adds	r7, #108	; 0x6c
   161d0:	46bd      	mov	sp, r7
   161d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
   161d4:	4b4e      	ldr	r3, [pc, #312]	; (16310 <hard_fault+0x278>)
   161d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   161d8:	2302      	movs	r3, #2
   161da:	713b      	strb	r3, [r7, #4]
   161dc:	2300      	movs	r3, #0
   161de:	717b      	strb	r3, [r7, #5]
   161e0:	71bb      	strb	r3, [r7, #6]
   161e2:	71fb      	strb	r3, [r7, #7]
   161e4:	687a      	ldr	r2, [r7, #4]
   161e6:	64ba      	str	r2, [r7, #72]	; 0x48
   161e8:	4619      	mov	r1, r3
   161ea:	f363 0100 	bfi	r1, r3, #0, #1
   161ee:	f363 0141 	bfi	r1, r3, #1, #1
   161f2:	f363 0182 	bfi	r1, r3, #2, #1
   161f6:	f363 01c5 	bfi	r1, r3, #3, #3
   161fa:	2201      	movs	r2, #1
   161fc:	f362 1188 	bfi	r1, r2, #6, #3
   16200:	2208      	movs	r2, #8
   16202:	f362 2152 	bfi	r1, r2, #9, #10
   16206:	f363 41de 	bfi	r1, r3, #19, #12
   1620a:	f363 71df 	bfi	r1, r3, #31, #1
   1620e:	f107 0248 	add.w	r2, r7, #72	; 0x48
   16212:	483a      	ldr	r0, [pc, #232]	; (162fc <hard_fault+0x264>)
   16214:	f7fd fd72 	bl	13cfc <z_impl_z_log_msg_static_create>
   16218:	e7d8      	b.n	161cc <hard_fault+0x134>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1621a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1621e:	e7a3      	b.n	16168 <hard_fault+0xd0>
   16220:	f06f 041b 	mvn.w	r4, #27
   16224:	b13a      	cbz	r2, 16236 <hard_fault+0x19e>
   16226:	2103      	movs	r1, #3
   16228:	7139      	strb	r1, [r7, #4]
   1622a:	2100      	movs	r1, #0
   1622c:	7179      	strb	r1, [r7, #5]
   1622e:	71b9      	strb	r1, [r7, #6]
   16230:	71f9      	strb	r1, [r7, #7]
   16232:	6878      	ldr	r0, [r7, #4]
   16234:	6118      	str	r0, [r3, #16]
   16236:	2100      	movs	r1, #0
   16238:	f36f 0100 	bfc	r1, #0, #1
   1623c:	f36f 0141 	bfc	r1, #1, #1
   16240:	f36f 0182 	bfc	r1, #2, #1
   16244:	f36f 01c5 	bfc	r1, #3, #3
   16248:	2301      	movs	r3, #1
   1624a:	f363 1188 	bfi	r1, r3, #6, #3
   1624e:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   16252:	f364 2152 	bfi	r1, r4, #9, #10
   16256:	f36f 41de 	bfc	r1, #19, #12
   1625a:	f36f 71df 	bfc	r1, #31, #1
   1625e:	2300      	movs	r3, #0
   16260:	4826      	ldr	r0, [pc, #152]	; (162fc <hard_fault+0x264>)
   16262:	f7fd fd4b 	bl	13cfc <z_impl_z_log_msg_static_create>
   16266:	46b5      	mov	sp, r6
			reason = esf->basic.r0;
   16268:	682c      	ldr	r4, [r5, #0]
   1626a:	e7af      	b.n	161cc <hard_fault+0x134>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1626c:	f06f 041b 	mvn.w	r4, #27
   16270:	e7d8      	b.n	16224 <hard_fault+0x18c>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   16272:	4b23      	ldr	r3, [pc, #140]	; (16300 <hard_fault+0x268>)
   16274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16276:	f013 0fff 	tst.w	r3, #255	; 0xff
   1627a:	d10e      	bne.n	1629a <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1627c:	4b20      	ldr	r3, [pc, #128]	; (16300 <hard_fault+0x268>)
   1627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16280:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   16284:	d110      	bne.n	162a8 <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   16286:	4b1e      	ldr	r3, [pc, #120]	; (16300 <hard_fault+0x268>)
   16288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1628a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1628e:	d312      	bcc.n	162b6 <hard_fault+0x21e>
			reason = usage_fault(esf);
   16290:	4628      	mov	r0, r5
   16292:	f7ff fd8b 	bl	15dac <usage_fault>
   16296:	4604      	mov	r4, r0
   16298:	e798      	b.n	161cc <hard_fault+0x134>
			reason = mem_manage_fault(esf, 1, recoverable);
   1629a:	4632      	mov	r2, r6
   1629c:	2101      	movs	r1, #1
   1629e:	4628      	mov	r0, r5
   162a0:	f7ff fa56 	bl	15750 <mem_manage_fault>
   162a4:	4604      	mov	r4, r0
   162a6:	e791      	b.n	161cc <hard_fault+0x134>
			reason = bus_fault(esf, 1, recoverable);
   162a8:	4632      	mov	r2, r6
   162aa:	2101      	movs	r1, #1
   162ac:	4628      	mov	r0, r5
   162ae:	f7ff fbe9 	bl	15a84 <bus_fault>
   162b2:	4604      	mov	r4, r0
   162b4:	e78a      	b.n	161cc <hard_fault+0x134>
			__ASSERT(0,
   162b6:	4c17      	ldr	r4, [pc, #92]	; (16314 <hard_fault+0x27c>)
   162b8:	f240 23f2 	movw	r3, #754	; 0x2f2
   162bc:	4622      	mov	r2, r4
   162be:	4916      	ldr	r1, [pc, #88]	; (16318 <hard_fault+0x280>)
   162c0:	4816      	ldr	r0, [pc, #88]	; (1631c <hard_fault+0x284>)
   162c2:	f013 fc12 	bl	29aea <assert_print>
   162c6:	4816      	ldr	r0, [pc, #88]	; (16320 <hard_fault+0x288>)
   162c8:	f013 fc0f 	bl	29aea <assert_print>
   162cc:	f240 21f2 	movw	r1, #754	; 0x2f2
   162d0:	4620      	mov	r0, r4
   162d2:	f013 fc03 	bl	29adc <assert_post_action>
		__ASSERT(0,
   162d6:	4c0f      	ldr	r4, [pc, #60]	; (16314 <hard_fault+0x27c>)
   162d8:	f240 23f6 	movw	r3, #758	; 0x2f6
   162dc:	4622      	mov	r2, r4
   162de:	490e      	ldr	r1, [pc, #56]	; (16318 <hard_fault+0x280>)
   162e0:	480e      	ldr	r0, [pc, #56]	; (1631c <hard_fault+0x284>)
   162e2:	f013 fc02 	bl	29aea <assert_print>
   162e6:	480f      	ldr	r0, [pc, #60]	; (16324 <hard_fault+0x28c>)
   162e8:	f013 fbff 	bl	29aea <assert_print>
   162ec:	f240 21f6 	movw	r1, #758	; 0x2f6
   162f0:	4620      	mov	r0, r4
   162f2:	f013 fbf3 	bl	29adc <assert_post_action>
   162f6:	bf00      	nop
   162f8:	00030fd4 	.word	0x00030fd4
   162fc:	0002f8a8 	.word	0x0002f8a8
   16300:	e000ed00 	.word	0xe000ed00
   16304:	00031020 	.word	0x00031020
   16308:	00031040 	.word	0x00031040
   1630c:	00030fec 	.word	0x00030fec
   16310:	00031010 	.word	0x00031010
   16314:	00030d50 	.word	0x00030d50
   16318:	000337ec 	.word	0x000337ec
   1631c:	0002fdac 	.word	0x0002fdac
   16320:	0003105c 	.word	0x0003105c
   16324:	00031080 	.word	0x00031080

00016328 <debug_monitor>:
{
   16328:	b500      	push	{lr}
   1632a:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   1632c:	2300      	movs	r3, #0
   1632e:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   16330:	4a13      	ldr	r2, [pc, #76]	; (16380 <debug_monitor+0x58>)
   16332:	9207      	str	r2, [sp, #28]
   16334:	2202      	movs	r2, #2
   16336:	f88d 2004 	strb.w	r2, [sp, #4]
   1633a:	f88d 3005 	strb.w	r3, [sp, #5]
   1633e:	f88d 3006 	strb.w	r3, [sp, #6]
   16342:	f88d 3007 	strb.w	r3, [sp, #7]
   16346:	9a01      	ldr	r2, [sp, #4]
   16348:	9206      	str	r2, [sp, #24]
   1634a:	4619      	mov	r1, r3
   1634c:	f363 0100 	bfi	r1, r3, #0, #1
   16350:	f363 0141 	bfi	r1, r3, #1, #1
   16354:	f363 0182 	bfi	r1, r3, #2, #1
   16358:	f363 01c5 	bfi	r1, r3, #3, #3
   1635c:	2201      	movs	r2, #1
   1635e:	f362 1188 	bfi	r1, r2, #6, #3
   16362:	2208      	movs	r2, #8
   16364:	f362 2152 	bfi	r1, r2, #9, #10
   16368:	f363 41de 	bfi	r1, r3, #19, #12
   1636c:	f363 71df 	bfi	r1, r3, #31, #1
   16370:	aa06      	add	r2, sp, #24
   16372:	4804      	ldr	r0, [pc, #16]	; (16384 <debug_monitor+0x5c>)
   16374:	f7fd fcc2 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   16378:	b009      	add	sp, #36	; 0x24
   1637a:	f85d fb04 	ldr.w	pc, [sp], #4
   1637e:	bf00      	nop
   16380:	000310b0 	.word	0x000310b0
   16384:	0002f8a8 	.word	0x0002f8a8

00016388 <reserved_exception>:
{
   16388:	b590      	push	{r4, r7, lr}
   1638a:	b083      	sub	sp, #12
   1638c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   1638e:	290f      	cmp	r1, #15
   16390:	dc23      	bgt.n	163da <reserved_exception+0x52>
   16392:	4c30      	ldr	r4, [pc, #192]	; (16454 <reserved_exception+0xcc>)
   16394:	3910      	subs	r1, #16
   16396:	2300      	movs	r3, #0
   16398:	713b      	strb	r3, [r7, #4]
   1639a:	2302      	movs	r3, #2
   1639c:	717b      	strb	r3, [r7, #5]
   1639e:	b08a      	sub	sp, #40	; 0x28
   163a0:	46ec      	mov	ip, sp
   163a2:	f11c 0210 	adds.w	r2, ip, #16
   163a6:	d01a      	beq.n	163de <reserved_exception+0x56>
   163a8:	2012      	movs	r0, #18
   163aa:	b122      	cbz	r2, 163b6 <reserved_exception+0x2e>
   163ac:	2804      	cmp	r0, #4
   163ae:	dd02      	ble.n	163b6 <reserved_exception+0x2e>
   163b0:	4b29      	ldr	r3, [pc, #164]	; (16458 <reserved_exception+0xd0>)
   163b2:	f8cc 3014 	str.w	r3, [ip, #20]
   163b6:	2300      	movs	r3, #0
   163b8:	703b      	strb	r3, [r7, #0]
   163ba:	2302      	movs	r3, #2
   163bc:	707b      	strb	r3, [r7, #1]
   163be:	b1e2      	cbz	r2, 163fa <reserved_exception+0x72>
   163c0:	4603      	mov	r3, r0
   163c2:	2808      	cmp	r0, #8
   163c4:	dd01      	ble.n	163ca <reserved_exception+0x42>
   163c6:	f8cc 4018 	str.w	r4, [ip, #24]
   163ca:	2b0c      	cmp	r3, #12
   163cc:	dd01      	ble.n	163d2 <reserved_exception+0x4a>
   163ce:	f8cc 101c 	str.w	r1, [ip, #28]
   163d2:	f10c 0320 	add.w	r3, ip, #32
   163d6:	2100      	movs	r1, #0
   163d8:	e00d      	b.n	163f6 <reserved_exception+0x6e>
   163da:	4c20      	ldr	r4, [pc, #128]	; (1645c <reserved_exception+0xd4>)
   163dc:	e7da      	b.n	16394 <reserved_exception+0xc>
   163de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   163e2:	e7e2      	b.n	163aa <reserved_exception+0x22>
   163e4:	f101 0408 	add.w	r4, r1, #8
   163e8:	eb04 0e07 	add.w	lr, r4, r7
   163ec:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   163f0:	f803 eb01 	strb.w	lr, [r3], #1
   163f4:	3101      	adds	r1, #1
   163f6:	2901      	cmp	r1, #1
   163f8:	d9f4      	bls.n	163e4 <reserved_exception+0x5c>
   163fa:	2811      	cmp	r0, #17
   163fc:	dd26      	ble.n	1644c <reserved_exception+0xc4>
   163fe:	2312      	movs	r3, #18
   16400:	b14a      	cbz	r2, 16416 <reserved_exception+0x8e>
   16402:	2104      	movs	r1, #4
   16404:	7139      	strb	r1, [r7, #4]
   16406:	2100      	movs	r1, #0
   16408:	7179      	strb	r1, [r7, #5]
   1640a:	71b9      	strb	r1, [r7, #6]
   1640c:	2101      	movs	r1, #1
   1640e:	71f9      	strb	r1, [r7, #7]
   16410:	6878      	ldr	r0, [r7, #4]
   16412:	f8cc 0010 	str.w	r0, [ip, #16]
   16416:	2100      	movs	r1, #0
   16418:	f36f 0100 	bfc	r1, #0, #1
   1641c:	f36f 0141 	bfc	r1, #1, #1
   16420:	f36f 0182 	bfc	r1, #2, #1
   16424:	f36f 01c5 	bfc	r1, #3, #3
   16428:	2001      	movs	r0, #1
   1642a:	f360 1188 	bfi	r1, r0, #6, #3
   1642e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16432:	f363 2152 	bfi	r1, r3, #9, #10
   16436:	f36f 41de 	bfc	r1, #19, #12
   1643a:	f36f 71df 	bfc	r1, #31, #1
   1643e:	2300      	movs	r3, #0
   16440:	4807      	ldr	r0, [pc, #28]	; (16460 <reserved_exception+0xd8>)
   16442:	f7fd fc5b 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   16446:	370c      	adds	r7, #12
   16448:	46bd      	mov	sp, r7
   1644a:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   1644c:	f06f 031b 	mvn.w	r3, #27
   16450:	e7d6      	b.n	16400 <reserved_exception+0x78>
   16452:	bf00      	nop
   16454:	000310d4 	.word	0x000310d4
   16458:	00031108 	.word	0x00031108
   1645c:	000310ec 	.word	0x000310ec
   16460:	0002f8a8 	.word	0x0002f8a8

00016464 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   16464:	b530      	push	{r4, r5, lr}
   16466:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16468:	4b23      	ldr	r3, [pc, #140]	; (164f8 <z_arm_fault+0x94>)
   1646a:	685c      	ldr	r4, [r3, #4]
   1646c:	f3c4 0408 	ubfx	r4, r4, #0, #9
   16470:	2300      	movs	r3, #0
   16472:	f383 8811 	msr	BASEPRI, r3
   16476:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   1647a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1647e:	f7ff f911 	bl	156a4 <get_esf>
	__ASSERT(esf != NULL,
   16482:	b158      	cbz	r0, 1649c <z_arm_fault+0x38>
   16484:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   16486:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1648a:	4621      	mov	r1, r4
   1648c:	f014 fd63 	bl	2af56 <fault_handle>
   16490:	4604      	mov	r4, r0
	if (recoverable) {
   16492:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16496:	b18b      	cbz	r3, 164bc <z_arm_fault+0x58>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   16498:	b00b      	add	sp, #44	; 0x2c
   1649a:	bd30      	pop	{r4, r5, pc}
	__ASSERT(esf != NULL,
   1649c:	4c17      	ldr	r4, [pc, #92]	; (164fc <z_arm_fault+0x98>)
   1649e:	f44f 6384 	mov.w	r3, #1056	; 0x420
   164a2:	4622      	mov	r2, r4
   164a4:	4916      	ldr	r1, [pc, #88]	; (16500 <z_arm_fault+0x9c>)
   164a6:	4817      	ldr	r0, [pc, #92]	; (16504 <z_arm_fault+0xa0>)
   164a8:	f013 fb1f 	bl	29aea <assert_print>
   164ac:	4816      	ldr	r0, [pc, #88]	; (16508 <z_arm_fault+0xa4>)
   164ae:	f013 fb1c 	bl	29aea <assert_print>
   164b2:	f44f 6184 	mov.w	r1, #1056	; 0x420
   164b6:	4620      	mov	r0, r4
   164b8:	f013 fb10 	bl	29adc <assert_post_action>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   164bc:	2220      	movs	r2, #32
   164be:	4629      	mov	r1, r5
   164c0:	a801      	add	r0, sp, #4
   164c2:	f014 fe39 	bl	2b138 <memcpy>
	if (nested_exc) {
   164c6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   164ca:	b14b      	cbz	r3, 164e0 <z_arm_fault+0x7c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   164cc:	9b08      	ldr	r3, [sp, #32]
   164ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
   164d2:	b95a      	cbnz	r2, 164ec <z_arm_fault+0x88>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   164d4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   164d8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   164dc:	9308      	str	r3, [sp, #32]
   164de:	e005      	b.n	164ec <z_arm_fault+0x88>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   164e0:	9b08      	ldr	r3, [sp, #32]
   164e2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   164e6:	f023 0301 	bic.w	r3, r3, #1
   164ea:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   164ec:	a901      	add	r1, sp, #4
   164ee:	4620      	mov	r0, r4
   164f0:	f014 fd02 	bl	2aef8 <z_arm_fatal_error>
   164f4:	e7d0      	b.n	16498 <z_arm_fault+0x34>
   164f6:	bf00      	nop
   164f8:	e000ed00 	.word	0xe000ed00
   164fc:	00030d50 	.word	0x00030d50
   16500:	0003111c 	.word	0x0003111c
   16504:	0002fdac 	.word	0x0002fdac
   16508:	00031130 	.word	0x00031130

0001650c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1650c:	4b04      	ldr	r3, [pc, #16]	; (16520 <z_arm_fault_init+0x14>)
   1650e:	695a      	ldr	r2, [r3, #20]
   16510:	f042 0210 	orr.w	r2, r2, #16
   16514:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   16516:	695a      	ldr	r2, [r3, #20]
   16518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1651c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1651e:	4770      	bx	lr
   16520:	e000ed00 	.word	0xe000ed00

00016524 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   16524:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16528:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1652c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1652e:	4672      	mov	r2, lr
	bl z_arm_fault
   16530:	f7ff ff98 	bl	16464 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   16534:	bd01      	pop	{r0, pc}
   16536:	bf00      	nop

00016538 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   16538:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1653a:	e007      	b.n	1654c <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1653c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   16540:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   16544:	2120      	movs	r1, #32
   16546:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   1654a:	3201      	adds	r2, #1
   1654c:	2a44      	cmp	r2, #68	; 0x44
   1654e:	dc09      	bgt.n	16564 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   16550:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   16552:	2b00      	cmp	r3, #0
   16554:	daf2      	bge.n	1653c <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16556:	f003 030f 	and.w	r3, r3, #15
   1655a:	4903      	ldr	r1, [pc, #12]	; (16568 <z_arm_interrupt_init+0x30>)
   1655c:	4419      	add	r1, r3
   1655e:	2320      	movs	r3, #32
   16560:	760b      	strb	r3, [r1, #24]
   16562:	e7f2      	b.n	1654a <z_arm_interrupt_init+0x12>
	}
}
   16564:	4770      	bx	lr
   16566:	bf00      	nop
   16568:	e000ecfc 	.word	0xe000ecfc

0001656c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   1656c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   1656e:	4915      	ldr	r1, [pc, #84]	; (165c4 <__start+0x58>)
    strb r0, [r1]
   16570:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   16572:	2000      	movs	r0, #0
    msr CONTROL, r0
   16574:	f380 8814 	msr	CONTROL, r0
    isb
   16578:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1657c:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1657e:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   16582:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   16586:	f7fc febb 	bl	13300 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1658a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1658c:	490e      	ldr	r1, [pc, #56]	; (165c8 <__start+0x5c>)
    str r0, [r1]
   1658e:	6008      	str	r0, [r1, #0]
    dsb
   16590:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16594:	480d      	ldr	r0, [pc, #52]	; (165cc <__start+0x60>)
    msr msp, r0
   16596:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1659a:	f000 f841 	bl	16620 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1659e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   165a0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   165a4:	480a      	ldr	r0, [pc, #40]	; (165d0 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   165a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   165aa:	1840      	adds	r0, r0, r1
    msr PSP, r0
   165ac:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   165b0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   165b4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   165b6:	4308      	orrs	r0, r1
    msr CONTROL, r0
   165b8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   165bc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   165c0:	f7fe ff6e 	bl	154a0 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
   165c4:	20009d55 	.word	0x20009d55
    ldr r1, =_SCS_MPU_CTRL
   165c8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   165cc:	2000c558 	.word	0x2000c558
    ldr r0, =z_interrupt_stacks
   165d0:	2000b818 	.word	0x2000b818

000165d4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   165d4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   165d8:	4905      	ldr	r1, [pc, #20]	; (165f0 <__NVIC_SystemReset+0x1c>)
   165da:	68ca      	ldr	r2, [r1, #12]
   165dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   165e0:	4b04      	ldr	r3, [pc, #16]	; (165f4 <__NVIC_SystemReset+0x20>)
   165e2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   165e4:	60cb      	str	r3, [r1, #12]
   165e6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   165ea:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   165ec:	e7fd      	b.n	165ea <__NVIC_SystemReset+0x16>
   165ee:	bf00      	nop
   165f0:	e000ed00 	.word	0xe000ed00
   165f4:	05fa0004 	.word	0x05fa0004

000165f8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   165f8:	4b08      	ldr	r3, [pc, #32]	; (1661c <z_arm_clear_arm_mpu_config+0x24>)
   165fa:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   165fe:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   16602:	2300      	movs	r3, #0
   16604:	e006      	b.n	16614 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
   16606:	4a05      	ldr	r2, [pc, #20]	; (1661c <z_arm_clear_arm_mpu_config+0x24>)
   16608:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
   1660c:	2100      	movs	r1, #0
   1660e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   16612:	3301      	adds	r3, #1
   16614:	4283      	cmp	r3, r0
   16616:	dbf6      	blt.n	16606 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   16618:	4770      	bx	lr
   1661a:	bf00      	nop
   1661c:	e000ed00 	.word	0xe000ed00

00016620 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   16620:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   16622:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16624:	2400      	movs	r4, #0
   16626:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1662a:	f7ff ffe5 	bl	165f8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1662e:	4623      	mov	r3, r4
   16630:	e008      	b.n	16644 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   16632:	f103 0120 	add.w	r1, r3, #32
   16636:	4a0e      	ldr	r2, [pc, #56]	; (16670 <z_arm_init_arch_hw_at_boot+0x50>)
   16638:	f04f 30ff 	mov.w	r0, #4294967295
   1663c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   16640:	3301      	adds	r3, #1
   16642:	b2db      	uxtb	r3, r3
   16644:	2b0f      	cmp	r3, #15
   16646:	d9f4      	bls.n	16632 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   16648:	2300      	movs	r3, #0
   1664a:	e008      	b.n	1665e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1664c:	f103 0160 	add.w	r1, r3, #96	; 0x60
   16650:	4a07      	ldr	r2, [pc, #28]	; (16670 <z_arm_init_arch_hw_at_boot+0x50>)
   16652:	f04f 30ff 	mov.w	r0, #4294967295
   16656:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1665a:	3301      	adds	r3, #1
   1665c:	b2db      	uxtb	r3, r3
   1665e:	2b0f      	cmp	r3, #15
   16660:	d9f4      	bls.n	1664c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   16662:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   16664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16668:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1666c:	bd10      	pop	{r4, pc}
   1666e:	bf00      	nop
   16670:	e000e100 	.word	0xe000e100

00016674 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   16674:	b508      	push	{r3, lr}
	if (_current == thread) {
   16676:	4b0a      	ldr	r3, [pc, #40]	; (166a0 <z_impl_k_thread_abort+0x2c>)
   16678:	689b      	ldr	r3, [r3, #8]
   1667a:	4283      	cmp	r3, r0
   1667c:	d002      	beq.n	16684 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   1667e:	f011 fa6b 	bl	27b58 <z_thread_abort>
}
   16682:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16684:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   16688:	2b00      	cmp	r3, #0
   1668a:	d0f8      	beq.n	1667e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1668c:	4b05      	ldr	r3, [pc, #20]	; (166a4 <z_impl_k_thread_abort+0x30>)
   1668e:	685a      	ldr	r2, [r3, #4]
   16690:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   16694:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   16696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1669c:	625a      	str	r2, [r3, #36]	; 0x24
   1669e:	e7ee      	b.n	1667e <z_impl_k_thread_abort+0xa>
   166a0:	20009ce8 	.word	0x20009ce8
   166a4:	e000ed00 	.word	0xe000ed00

000166a8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   166a8:	b510      	push	{r4, lr}
   166aa:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   166ac:	4c0a      	ldr	r4, [pc, #40]	; (166d8 <z_arm_configure_static_mpu_regions+0x30>)
   166ae:	4623      	mov	r3, r4
   166b0:	4a0a      	ldr	r2, [pc, #40]	; (166dc <z_arm_configure_static_mpu_regions+0x34>)
   166b2:	2101      	movs	r1, #1
   166b4:	480a      	ldr	r0, [pc, #40]	; (166e0 <z_arm_configure_static_mpu_regions+0x38>)
   166b6:	f000 fa31 	bl	16b1c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   166ba:	2300      	movs	r3, #0
   166bc:	9301      	str	r3, [sp, #4]
   166be:	9302      	str	r3, [sp, #8]
   166c0:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   166c2:	4b08      	ldr	r3, [pc, #32]	; (166e4 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   166c4:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   166c6:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   166c8:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   166ca:	2101      	movs	r1, #1
   166cc:	a801      	add	r0, sp, #4
   166ce:	f000 fa47 	bl	16b60 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   166d2:	b004      	add	sp, #16
   166d4:	bd10      	pop	{r4, pc}
   166d6:	bf00      	nop
   166d8:	20070000 	.word	0x20070000
   166dc:	20008000 	.word	0x20008000
   166e0:	00031170 	.word	0x00031170
   166e4:	20008748 	.word	0x20008748

000166e8 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
   166e8:	4b02      	ldr	r3, [pc, #8]	; (166f4 <mpu_init+0xc>)
   166ea:	4a03      	ldr	r2, [pc, #12]	; (166f8 <mpu_init+0x10>)
   166ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
   166f0:	4770      	bx	lr
   166f2:	bf00      	nop
   166f4:	e000ed00 	.word	0xe000ed00
   166f8:	0044ffaa 	.word	0x0044ffaa

000166fc <mpu_set_region>:
	MPU->RNR = rnr;
   166fc:	4b03      	ldr	r3, [pc, #12]	; (1670c <mpu_set_region+0x10>)
   166fe:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
   16702:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
   16706:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
   1670a:	4770      	bx	lr
   1670c:	e000ed00 	.word	0xe000ed00

00016710 <mpu_region_get_conf>:
	MPU->RNR = rnr;
   16710:	4b0e      	ldr	r3, [pc, #56]	; (1674c <mpu_region_get_conf+0x3c>)
   16712:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
   16716:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   1671a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
   1671e:	7a0a      	ldrb	r2, [r1, #8]
   16720:	f360 0204 	bfi	r2, r0, #0, #5
   16724:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
   16726:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1672a:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1672e:	7a08      	ldrb	r0, [r1, #8]
   16730:	f362 1047 	bfi	r0, r2, #5, #3
   16734:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
   16736:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1673a:	f022 021f 	bic.w	r2, r2, #31
   1673e:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
   16740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   16744:	f023 031f 	bic.w	r3, r3, #31
   16748:	60cb      	str	r3, [r1, #12]
}
   1674a:	4770      	bx	lr
   1674c:	e000ed00 	.word	0xe000ed00

00016750 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   16750:	b570      	push	{r4, r5, r6, lr}
   16752:	4605      	mov	r5, r0
   16754:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   16756:	2400      	movs	r4, #0
   16758:	e000      	b.n	1675c <mpu_mark_areas_for_dynamic_regions+0xc>
   1675a:	3401      	adds	r4, #1
   1675c:	42a6      	cmp	r6, r4
   1675e:	dd1e      	ble.n	1679e <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   16760:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16764:	009a      	lsls	r2, r3, #2
   16766:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1676a:	6859      	ldr	r1, [r3, #4]
   1676c:	2900      	cmp	r1, #0
   1676e:	d0f4      	beq.n	1675a <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   16770:	58a8      	ldr	r0, [r5, r2]
   16772:	f014 fc4a 	bl	2b00a <get_region_index>
		dyn_reg_info[i].index =
   16776:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1677a:	4a0b      	ldr	r2, [pc, #44]	; (167a8 <mpu_mark_areas_for_dynamic_regions+0x58>)
   1677c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   16780:	f110 0f16 	cmn.w	r0, #22
   16784:	d00c      	beq.n	167a0 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   16786:	4b09      	ldr	r3, [pc, #36]	; (167ac <mpu_mark_areas_for_dynamic_regions+0x5c>)
   16788:	781b      	ldrb	r3, [r3, #0]
   1678a:	4298      	cmp	r0, r3
   1678c:	da09      	bge.n	167a2 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   1678e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16792:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   16796:	3104      	adds	r1, #4
   16798:	f7ff ffba 	bl	16710 <mpu_region_get_conf>
   1679c:	e7dd      	b.n	1675a <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   1679e:	2000      	movs	r0, #0
}
   167a0:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   167a2:	f06f 0015 	mvn.w	r0, #21
   167a6:	e7fb      	b.n	167a0 <mpu_mark_areas_for_dynamic_regions+0x50>
   167a8:	200097ec 	.word	0x200097ec
   167ac:	20009d51 	.word	0x20009d51

000167b0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   167b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   167b2:	b083      	sub	sp, #12
   167b4:	af00      	add	r7, sp, #0
   167b6:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   167b8:	2807      	cmp	r0, #7
   167ba:	d805      	bhi.n	167c8 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   167bc:	f014 fbff 	bl	2afbe <region_init>

	return index;
   167c0:	4620      	mov	r0, r4
}
   167c2:	370c      	adds	r7, #12
   167c4:	46bd      	mov	sp, r7
   167c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   167c8:	466d      	mov	r5, sp
   167ca:	b088      	sub	sp, #32
   167cc:	466b      	mov	r3, sp
   167ce:	f113 0210 	adds.w	r2, r3, #16
   167d2:	d031      	beq.n	16838 <region_allocate_and_init+0x88>
   167d4:	210c      	movs	r1, #12
   167d6:	b13a      	cbz	r2, 167e8 <region_allocate_and_init+0x38>
   167d8:	4608      	mov	r0, r1
   167da:	2904      	cmp	r1, #4
   167dc:	dd01      	ble.n	167e2 <region_allocate_and_init+0x32>
   167de:	4e19      	ldr	r6, [pc, #100]	; (16844 <region_allocate_and_init+0x94>)
   167e0:	615e      	str	r6, [r3, #20]
   167e2:	2808      	cmp	r0, #8
   167e4:	dd00      	ble.n	167e8 <region_allocate_and_init+0x38>
   167e6:	619c      	str	r4, [r3, #24]
   167e8:	290b      	cmp	r1, #11
   167ea:	dd28      	ble.n	1683e <region_allocate_and_init+0x8e>
   167ec:	240c      	movs	r4, #12
   167ee:	b13a      	cbz	r2, 16800 <region_allocate_and_init+0x50>
   167f0:	2103      	movs	r1, #3
   167f2:	7139      	strb	r1, [r7, #4]
   167f4:	2100      	movs	r1, #0
   167f6:	7179      	strb	r1, [r7, #5]
   167f8:	71b9      	strb	r1, [r7, #6]
   167fa:	71f9      	strb	r1, [r7, #7]
   167fc:	6878      	ldr	r0, [r7, #4]
   167fe:	6118      	str	r0, [r3, #16]
   16800:	2100      	movs	r1, #0
   16802:	f36f 0100 	bfc	r1, #0, #1
   16806:	f36f 0141 	bfc	r1, #1, #1
   1680a:	f36f 0182 	bfc	r1, #2, #1
   1680e:	f36f 01c5 	bfc	r1, #3, #3
   16812:	2301      	movs	r3, #1
   16814:	f363 1188 	bfi	r1, r3, #6, #3
   16818:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1681c:	f364 2152 	bfi	r1, r4, #9, #10
   16820:	f36f 41de 	bfc	r1, #19, #12
   16824:	f36f 71df 	bfc	r1, #31, #1
   16828:	2300      	movs	r3, #0
   1682a:	4807      	ldr	r0, [pc, #28]	; (16848 <region_allocate_and_init+0x98>)
   1682c:	f7fd fa66 	bl	13cfc <z_impl_z_log_msg_static_create>
   16830:	46ad      	mov	sp, r5
		return -EINVAL;
   16832:	f06f 0015 	mvn.w	r0, #21
   16836:	e7c4      	b.n	167c2 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1683c:	e7cb      	b.n	167d6 <region_allocate_and_init+0x26>
   1683e:	f06f 041b 	mvn.w	r4, #27
   16842:	e7d4      	b.n	167ee <region_allocate_and_init+0x3e>
   16844:	00031180 	.word	0x00031180
   16848:	0002f890 	.word	0x0002f890

0001684c <mpu_configure_regions_and_partition>:
{
   1684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16850:	b089      	sub	sp, #36	; 0x24
   16852:	af00      	add	r7, sp, #0
   16854:	4682      	mov	sl, r0
   16856:	60b9      	str	r1, [r7, #8]
   16858:	607b      	str	r3, [r7, #4]
	int reg_index = start_reg_index;
   1685a:	4614      	mov	r4, r2
	for (i = 0; i < regions_num; i++) {
   1685c:	f04f 0800 	mov.w	r8, #0
   16860:	e0b5      	b.n	169ce <mpu_configure_regions_and_partition+0x182>
			LOG_ERR("Partition %u: sanity check failed.", i);
   16862:	466d      	mov	r5, sp
   16864:	b088      	sub	sp, #32
   16866:	466b      	mov	r3, sp
   16868:	f113 0210 	adds.w	r2, r3, #16
   1686c:	d032      	beq.n	168d4 <mpu_configure_regions_and_partition+0x88>
   1686e:	210c      	movs	r1, #12
   16870:	b142      	cbz	r2, 16884 <mpu_configure_regions_and_partition+0x38>
   16872:	4608      	mov	r0, r1
   16874:	2904      	cmp	r1, #4
   16876:	dd01      	ble.n	1687c <mpu_configure_regions_and_partition+0x30>
   16878:	4c94      	ldr	r4, [pc, #592]	; (16acc <mpu_configure_regions_and_partition+0x280>)
   1687a:	615c      	str	r4, [r3, #20]
   1687c:	2808      	cmp	r0, #8
   1687e:	dd01      	ble.n	16884 <mpu_configure_regions_and_partition+0x38>
   16880:	f8c3 8018 	str.w	r8, [r3, #24]
   16884:	290b      	cmp	r1, #11
   16886:	dd28      	ble.n	168da <mpu_configure_regions_and_partition+0x8e>
   16888:	240c      	movs	r4, #12
   1688a:	b13a      	cbz	r2, 1689c <mpu_configure_regions_and_partition+0x50>
   1688c:	2103      	movs	r1, #3
   1688e:	7439      	strb	r1, [r7, #16]
   16890:	2100      	movs	r1, #0
   16892:	7479      	strb	r1, [r7, #17]
   16894:	74b9      	strb	r1, [r7, #18]
   16896:	74f9      	strb	r1, [r7, #19]
   16898:	6938      	ldr	r0, [r7, #16]
   1689a:	6118      	str	r0, [r3, #16]
   1689c:	2100      	movs	r1, #0
   1689e:	f36f 0100 	bfc	r1, #0, #1
   168a2:	f36f 0141 	bfc	r1, #1, #1
   168a6:	f36f 0182 	bfc	r1, #2, #1
   168aa:	f36f 01c5 	bfc	r1, #3, #3
   168ae:	2301      	movs	r3, #1
   168b0:	f363 1188 	bfi	r1, r3, #6, #3
   168b4:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   168b8:	f364 2152 	bfi	r1, r4, #9, #10
   168bc:	f36f 41de 	bfc	r1, #19, #12
   168c0:	f36f 71df 	bfc	r1, #31, #1
   168c4:	2300      	movs	r3, #0
   168c6:	4882      	ldr	r0, [pc, #520]	; (16ad0 <mpu_configure_regions_and_partition+0x284>)
   168c8:	f7fd fa18 	bl	13cfc <z_impl_z_log_msg_static_create>
   168cc:	46ad      	mov	sp, r5
			return -EINVAL;
   168ce:	f06f 0415 	mvn.w	r4, #21
   168d2:	e03c      	b.n	1694e <mpu_configure_regions_and_partition+0x102>
			LOG_ERR("Partition %u: sanity check failed.", i);
   168d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   168d8:	e7ca      	b.n	16870 <mpu_configure_regions_and_partition+0x24>
   168da:	f06f 041b 	mvn.w	r4, #27
   168de:	e7d4      	b.n	1688a <mpu_configure_regions_and_partition+0x3e>
			LOG_ERR("Invalid underlying region index %u",
   168e0:	466d      	mov	r5, sp
   168e2:	b088      	sub	sp, #32
   168e4:	466b      	mov	r3, sp
   168e6:	f113 0210 	adds.w	r2, r3, #16
   168ea:	d035      	beq.n	16958 <mpu_configure_regions_and_partition+0x10c>
   168ec:	210c      	movs	r1, #12
   168ee:	b13a      	cbz	r2, 16900 <mpu_configure_regions_and_partition+0xb4>
   168f0:	4608      	mov	r0, r1
   168f2:	2904      	cmp	r1, #4
   168f4:	dd01      	ble.n	168fa <mpu_configure_regions_and_partition+0xae>
   168f6:	4c77      	ldr	r4, [pc, #476]	; (16ad4 <mpu_configure_regions_and_partition+0x288>)
   168f8:	615c      	str	r4, [r3, #20]
   168fa:	2808      	cmp	r0, #8
   168fc:	dd00      	ble.n	16900 <mpu_configure_regions_and_partition+0xb4>
   168fe:	619e      	str	r6, [r3, #24]
   16900:	290b      	cmp	r1, #11
   16902:	dd2c      	ble.n	1695e <mpu_configure_regions_and_partition+0x112>
   16904:	240c      	movs	r4, #12
   16906:	b13a      	cbz	r2, 16918 <mpu_configure_regions_and_partition+0xcc>
   16908:	2103      	movs	r1, #3
   1690a:	7439      	strb	r1, [r7, #16]
   1690c:	2100      	movs	r1, #0
   1690e:	7479      	strb	r1, [r7, #17]
   16910:	74b9      	strb	r1, [r7, #18]
   16912:	74f9      	strb	r1, [r7, #19]
   16914:	6938      	ldr	r0, [r7, #16]
   16916:	6118      	str	r0, [r3, #16]
   16918:	2100      	movs	r1, #0
   1691a:	f36f 0100 	bfc	r1, #0, #1
   1691e:	f36f 0141 	bfc	r1, #1, #1
   16922:	f36f 0182 	bfc	r1, #2, #1
   16926:	f36f 01c5 	bfc	r1, #3, #3
   1692a:	2301      	movs	r3, #1
   1692c:	f363 1188 	bfi	r1, r3, #6, #3
   16930:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   16934:	f363 2152 	bfi	r1, r3, #9, #10
   16938:	f36f 41de 	bfc	r1, #19, #12
   1693c:	f36f 71df 	bfc	r1, #31, #1
   16940:	2300      	movs	r3, #0
   16942:	4863      	ldr	r0, [pc, #396]	; (16ad0 <mpu_configure_regions_and_partition+0x284>)
   16944:	f7fd f9da 	bl	13cfc <z_impl_z_log_msg_static_create>
   16948:	46ad      	mov	sp, r5
			return -EINVAL;
   1694a:	f06f 0415 	mvn.w	r4, #21
}
   1694e:	4620      	mov	r0, r4
   16950:	3724      	adds	r7, #36	; 0x24
   16952:	46bd      	mov	sp, r7
   16954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid underlying region index %u",
   16958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1695c:	e7c7      	b.n	168ee <mpu_configure_regions_and_partition+0xa2>
   1695e:	f06f 041b 	mvn.w	r4, #27
   16962:	e7d0      	b.n	16906 <mpu_configure_regions_and_partition+0xba>
		if ((regions[i].start == u_reg_base) &&
   16964:	4581      	cmp	r9, r0
   16966:	d168      	bne.n	16a3a <mpu_configure_regions_and_partition+0x1ee>
			mpu_configure_region(u_reg_index, &regions[i]);
   16968:	4629      	mov	r1, r5
   1696a:	b2f0      	uxtb	r0, r6
   1696c:	f014 fb5e 	bl	2b02c <mpu_configure_region>
   16970:	e02b      	b.n	169ca <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
   16972:	4a59      	ldr	r2, [pc, #356]	; (16ad8 <mpu_configure_regions_and_partition+0x28c>)
   16974:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
   16978:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1697c:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   16980:	f021 011f 	bic.w	r1, r1, #31
   16984:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
   16986:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1698a:	4629      	mov	r1, r5
   1698c:	b2e0      	uxtb	r0, r4
   1698e:	f014 fb4d 	bl	2b02c <mpu_configure_region>
   16992:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   16994:	f110 0f16 	cmn.w	r0, #22
   16998:	d0d9      	beq.n	1694e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   1699a:	3401      	adds	r4, #1
   1699c:	e015      	b.n	169ca <mpu_configure_regions_and_partition+0x17e>
				regions[i].start - 1);
   1699e:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   169a0:	494d      	ldr	r1, [pc, #308]	; (16ad8 <mpu_configure_regions_and_partition+0x28c>)
   169a2:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   169a6:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   169aa:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   169ae:	f023 031f 	bic.w	r3, r3, #31
   169b2:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   169b4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   169b8:	4629      	mov	r1, r5
   169ba:	b2e0      	uxtb	r0, r4
   169bc:	f014 fb36 	bl	2b02c <mpu_configure_region>
   169c0:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   169c2:	f110 0f16 	cmn.w	r0, #22
   169c6:	d0c2      	beq.n	1694e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   169c8:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   169ca:	f108 0801 	add.w	r8, r8, #1
   169ce:	68bb      	ldr	r3, [r7, #8]
   169d0:	4598      	cmp	r8, r3
   169d2:	dabc      	bge.n	1694e <mpu_configure_regions_and_partition+0x102>
		if (regions[i].size == 0U) {
   169d4:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   169d8:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   169dc:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   169e0:	686e      	ldr	r6, [r5, #4]
   169e2:	2e00      	cmp	r6, #0
   169e4:	d0f1      	beq.n	169ca <mpu_configure_regions_and_partition+0x17e>
		if (do_sanity_check &&
   169e6:	687b      	ldr	r3, [r7, #4]
   169e8:	b12b      	cbz	r3, 169f6 <mpu_configure_regions_and_partition+0x1aa>
			(!mpu_partition_is_valid(&regions[i]))) {
   169ea:	4628      	mov	r0, r5
   169ec:	f014 fafb 	bl	2afe6 <mpu_partition_is_valid>
		if (do_sanity_check &&
   169f0:	2800      	cmp	r0, #0
   169f2:	f43f af36 	beq.w	16862 <mpu_configure_regions_and_partition+0x16>
			get_region_index(regions[i].start, regions[i].size);
   169f6:	4631      	mov	r1, r6
   169f8:	f85a 000b 	ldr.w	r0, [sl, fp]
   169fc:	f014 fb05 	bl	2b00a <get_region_index>
   16a00:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
   16a02:	f110 0f16 	cmn.w	r0, #22
   16a06:	f43f af6b 	beq.w	168e0 <mpu_configure_regions_and_partition+0x94>
   16a0a:	4284      	cmp	r4, r0
   16a0c:	f77f af68 	ble.w	168e0 <mpu_configure_regions_and_partition+0x94>
	MPU->RNR = rnr;
   16a10:	4b31      	ldr	r3, [pc, #196]	; (16ad8 <mpu_configure_regions_and_partition+0x28c>)
   16a12:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   16a16:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   16a1a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   16a1e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
   16a22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   16a26:	f043 091f 	orr.w	r9, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   16a2a:	f85a 300b 	ldr.w	r3, [sl, fp]
   16a2e:	6869      	ldr	r1, [r5, #4]
   16a30:	4419      	add	r1, r3
   16a32:	1e48      	subs	r0, r1, #1
   16a34:	60f8      	str	r0, [r7, #12]
		if ((regions[i].start == u_reg_base) &&
   16a36:	4293      	cmp	r3, r2
   16a38:	d094      	beq.n	16964 <mpu_configure_regions_and_partition+0x118>
		} else if (regions[i].start == u_reg_base) {
   16a3a:	4293      	cmp	r3, r2
   16a3c:	d099      	beq.n	16972 <mpu_configure_regions_and_partition+0x126>
		} else if (reg_last == u_reg_last) {
   16a3e:	68fa      	ldr	r2, [r7, #12]
   16a40:	4591      	cmp	r9, r2
   16a42:	d0ac      	beq.n	1699e <mpu_configure_regions_and_partition+0x152>
				regions[i].start - 1);
   16a44:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   16a46:	4924      	ldr	r1, [pc, #144]	; (16ad8 <mpu_configure_regions_and_partition+0x28c>)
   16a48:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   16a4c:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   16a50:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   16a54:	f023 031f 	bic.w	r3, r3, #31
   16a58:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   16a5a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   16a5e:	4629      	mov	r1, r5
   16a60:	b2e0      	uxtb	r0, r4
   16a62:	f014 fae3 	bl	2b02c <mpu_configure_region>
   16a66:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   16a68:	f110 0f16 	cmn.w	r0, #22
   16a6c:	f43f af6f 	beq.w	1694e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   16a70:	3001      	adds	r0, #1
	MPU->RNR = rnr;
   16a72:	4b19      	ldr	r3, [pc, #100]	; (16ad8 <mpu_configure_regions_and_partition+0x28c>)
   16a74:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
   16a78:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   16a7c:	7e3a      	ldrb	r2, [r7, #24]
   16a7e:	f361 0204 	bfi	r2, r1, #0, #5
   16a82:	763a      	strb	r2, [r7, #24]
	return MPU->RLAR;
   16a84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   16a88:	f3c3 0342 	ubfx	r3, r3, #1, #3
   16a8c:	b2d2      	uxtb	r2, r2
   16a8e:	f363 1247 	bfi	r2, r3, #5, #3
   16a92:	763a      	strb	r2, [r7, #24]
			fill_region.base = regions[i].start +
   16a94:	f85a 300b 	ldr.w	r3, [sl, fp]
				regions[i].size;
   16a98:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   16a9a:	4413      	add	r3, r2
   16a9c:	613b      	str	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   16a9e:	f023 031f 	bic.w	r3, r3, #31
   16aa2:	68fa      	ldr	r2, [r7, #12]
   16aa4:	eba9 0902 	sub.w	r9, r9, r2
   16aa8:	444b      	add	r3, r9
   16aaa:	3b01      	subs	r3, #1
   16aac:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   16ab0:	61fb      	str	r3, [r7, #28]
				region_allocate_and_init(reg_index,
   16ab2:	f107 0110 	add.w	r1, r7, #16
   16ab6:	b2c0      	uxtb	r0, r0
   16ab8:	f7ff fe7a 	bl	167b0 <region_allocate_and_init>
   16abc:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   16abe:	f110 0f16 	cmn.w	r0, #22
   16ac2:	f43f af44 	beq.w	1694e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   16ac6:	3401      	adds	r4, #1
   16ac8:	e77f      	b.n	169ca <mpu_configure_regions_and_partition+0x17e>
   16aca:	bf00      	nop
   16acc:	000311a8 	.word	0x000311a8
   16ad0:	0002f890 	.word	0x0002f890
   16ad4:	000311cc 	.word	0x000311cc
   16ad8:	e000ed00 	.word	0xe000ed00

00016adc <mpu_configure_static_mpu_regions>:
{
   16adc:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   16ade:	4c03      	ldr	r4, [pc, #12]	; (16aec <mpu_configure_static_mpu_regions+0x10>)
	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   16ae0:	2301      	movs	r3, #1
   16ae2:	7822      	ldrb	r2, [r4, #0]
   16ae4:	f7ff feb2 	bl	1684c <mpu_configure_regions_and_partition>
	static_regions_num = mpu_reg_index;
   16ae8:	7020      	strb	r0, [r4, #0]
}
   16aea:	bd10      	pop	{r4, pc}
   16aec:	20009d51 	.word	0x20009d51

00016af0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16af0:	4b04      	ldr	r3, [pc, #16]	; (16b04 <arm_core_mpu_enable+0x14>)
   16af2:	2205      	movs	r2, #5
   16af4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   16af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16afc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16b00:	4770      	bx	lr
   16b02:	bf00      	nop
   16b04:	e000ed00 	.word	0xe000ed00

00016b08 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   16b08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16b0c:	4b02      	ldr	r3, [pc, #8]	; (16b18 <arm_core_mpu_disable+0x10>)
   16b0e:	2200      	movs	r2, #0
   16b10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   16b14:	4770      	bx	lr
   16b16:	bf00      	nop
   16b18:	e000ed00 	.word	0xe000ed00

00016b1c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   16b1c:	b538      	push	{r3, r4, r5, lr}
   16b1e:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   16b20:	f7ff ffdc 	bl	16adc <mpu_configure_static_mpu_regions>
   16b24:	f110 0f16 	cmn.w	r0, #22
   16b28:	d000      	beq.n	16b2c <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   16b2a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   16b2c:	4d08      	ldr	r5, [pc, #32]	; (16b50 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   16b2e:	f44f 738b 	mov.w	r3, #278	; 0x116
   16b32:	462a      	mov	r2, r5
   16b34:	4907      	ldr	r1, [pc, #28]	; (16b54 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   16b36:	4808      	ldr	r0, [pc, #32]	; (16b58 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   16b38:	f012 ffd7 	bl	29aea <assert_print>
   16b3c:	4621      	mov	r1, r4
   16b3e:	4807      	ldr	r0, [pc, #28]	; (16b5c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   16b40:	f012 ffd3 	bl	29aea <assert_print>
   16b44:	f44f 718b 	mov.w	r1, #278	; 0x116
   16b48:	4628      	mov	r0, r5
   16b4a:	f012 ffc7 	bl	29adc <assert_post_action>
   16b4e:	bf00      	nop
   16b50:	000311f0 	.word	0x000311f0
   16b54:	000337ec 	.word	0x000337ec
   16b58:	0002fdac 	.word	0x0002fdac
   16b5c:	00031228 	.word	0x00031228

00016b60 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   16b60:	b538      	push	{r3, r4, r5, lr}
   16b62:	460c      	mov	r4, r1
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   16b64:	f7ff fdf4 	bl	16750 <mpu_mark_areas_for_dynamic_regions>
   16b68:	f110 0f16 	cmn.w	r0, #22
   16b6c:	d000      	beq.n	16b70 <arm_core_mpu_mark_areas_for_dynamic_regions+0x10>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   16b6e:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   16b70:	4d08      	ldr	r5, [pc, #32]	; (16b94 <arm_core_mpu_mark_areas_for_dynamic_regions+0x34>)
   16b72:	f44f 7393 	mov.w	r3, #294	; 0x126
   16b76:	462a      	mov	r2, r5
   16b78:	4907      	ldr	r1, [pc, #28]	; (16b98 <arm_core_mpu_mark_areas_for_dynamic_regions+0x38>)
   16b7a:	4808      	ldr	r0, [pc, #32]	; (16b9c <arm_core_mpu_mark_areas_for_dynamic_regions+0x3c>)
   16b7c:	f012 ffb5 	bl	29aea <assert_print>
   16b80:	4621      	mov	r1, r4
   16b82:	4807      	ldr	r0, [pc, #28]	; (16ba0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x40>)
   16b84:	f012 ffb1 	bl	29aea <assert_print>
   16b88:	f44f 7193 	mov.w	r1, #294	; 0x126
   16b8c:	4628      	mov	r0, r5
   16b8e:	f012 ffa5 	bl	29adc <assert_post_action>
   16b92:	bf00      	nop
   16b94:	000311f0 	.word	0x000311f0
   16b98:	000337ec 	.word	0x000337ec
   16b9c:	0002fdac 	.word	0x0002fdac
   16ba0:	00031254 	.word	0x00031254

00016ba4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   16ba4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16ba6:	4b21      	ldr	r3, [pc, #132]	; (16c2c <z_arm_mpu_init+0x88>)
   16ba8:	681d      	ldr	r5, [r3, #0]
   16baa:	2d08      	cmp	r5, #8
   16bac:	d805      	bhi.n	16bba <z_arm_mpu_init+0x16>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16bae:	f7ff ffab 	bl	16b08 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   16bb2:	f7ff fd99 	bl	166e8 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16bb6:	2400      	movs	r4, #0
   16bb8:	e019      	b.n	16bee <z_arm_mpu_init+0x4a>
		__ASSERT(0,
   16bba:	4c1d      	ldr	r4, [pc, #116]	; (16c30 <z_arm_mpu_init+0x8c>)
   16bbc:	f240 134d 	movw	r3, #333	; 0x14d
   16bc0:	4622      	mov	r2, r4
   16bc2:	491c      	ldr	r1, [pc, #112]	; (16c34 <z_arm_mpu_init+0x90>)
   16bc4:	481c      	ldr	r0, [pc, #112]	; (16c38 <z_arm_mpu_init+0x94>)
   16bc6:	f012 ff90 	bl	29aea <assert_print>
   16bca:	2208      	movs	r2, #8
   16bcc:	4629      	mov	r1, r5
   16bce:	481b      	ldr	r0, [pc, #108]	; (16c3c <z_arm_mpu_init+0x98>)
   16bd0:	f012 ff8b 	bl	29aea <assert_print>
   16bd4:	f240 114d 	movw	r1, #333	; 0x14d
   16bd8:	4620      	mov	r0, r4
   16bda:	f012 ff7f 	bl	29adc <assert_post_action>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   16bde:	4b13      	ldr	r3, [pc, #76]	; (16c2c <z_arm_mpu_init+0x88>)
   16be0:	6859      	ldr	r1, [r3, #4]
   16be2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   16be6:	4620      	mov	r0, r4
   16be8:	f014 f9e9 	bl	2afbe <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16bec:	3401      	adds	r4, #1
   16bee:	42a5      	cmp	r5, r4
   16bf0:	d8f5      	bhi.n	16bde <z_arm_mpu_init+0x3a>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16bf2:	4b13      	ldr	r3, [pc, #76]	; (16c40 <z_arm_mpu_init+0x9c>)
   16bf4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   16bf6:	f7ff ff7b 	bl	16af0 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   16bfa:	4b12      	ldr	r3, [pc, #72]	; (16c44 <z_arm_mpu_init+0xa0>)
   16bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   16c00:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16c04:	2b08      	cmp	r3, #8
   16c06:	d101      	bne.n	16c0c <z_arm_mpu_init+0x68>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   16c08:	2000      	movs	r0, #0
   16c0a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   16c0c:	4c08      	ldr	r4, [pc, #32]	; (16c30 <z_arm_mpu_init+0x8c>)
   16c0e:	f240 13b1 	movw	r3, #433	; 0x1b1
   16c12:	4622      	mov	r2, r4
   16c14:	490c      	ldr	r1, [pc, #48]	; (16c48 <z_arm_mpu_init+0xa4>)
   16c16:	4808      	ldr	r0, [pc, #32]	; (16c38 <z_arm_mpu_init+0x94>)
   16c18:	f012 ff67 	bl	29aea <assert_print>
   16c1c:	480b      	ldr	r0, [pc, #44]	; (16c4c <z_arm_mpu_init+0xa8>)
   16c1e:	f012 ff64 	bl	29aea <assert_print>
   16c22:	f240 11b1 	movw	r1, #433	; 0x1b1
   16c26:	4620      	mov	r0, r4
   16c28:	f012 ff58 	bl	29adc <assert_post_action>
   16c2c:	0003132c 	.word	0x0003132c
   16c30:	000311f0 	.word	0x000311f0
   16c34:	000337ec 	.word	0x000337ec
   16c38:	0002fdac 	.word	0x0002fdac
   16c3c:	00031284 	.word	0x00031284
   16c40:	20009d51 	.word	0x20009d51
   16c44:	e000ed00 	.word	0xe000ed00
   16c48:	000312b8 	.word	0x000312b8
   16c4c:	00031308 	.word	0x00031308

00016c50 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   16c50:	4b01      	ldr	r3, [pc, #4]	; (16c58 <__stdout_hook_install+0x8>)
   16c52:	6018      	str	r0, [r3, #0]
}
   16c54:	4770      	bx	lr
   16c56:	bf00      	nop
   16c58:	20008210 	.word	0x20008210

00016c5c <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   16c5c:	2000      	movs	r0, #0
   16c5e:	4b02      	ldr	r3, [pc, #8]	; (16c68 <remoteproc_mgr_boot+0xc>)
   16c60:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   16c64:	4770      	bx	lr
   16c66:	bf00      	nop
   16c68:	40005000 	.word	0x40005000

00016c6c <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   16c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c6e:	b08b      	sub	sp, #44	; 0x2c
   16c70:	4604      	mov	r4, r0
   16c72:	460d      	mov	r5, r1
   16c74:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   16c76:	7803      	ldrb	r3, [r0, #0]
   16c78:	2b03      	cmp	r3, #3
   16c7a:	d82c      	bhi.n	16cd6 <bt_addr_le_to_str+0x6a>
   16c7c:	e8df f003 	tbb	[pc, r3]
   16c80:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   16c84:	4917      	ldr	r1, [pc, #92]	; (16ce4 <bt_addr_le_to_str+0x78>)
   16c86:	a807      	add	r0, sp, #28
   16c88:	f014 f9ef 	bl	2b06a <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16c8c:	7963      	ldrb	r3, [r4, #5]
   16c8e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16c90:	78e1      	ldrb	r1, [r4, #3]
   16c92:	78a0      	ldrb	r0, [r4, #2]
   16c94:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16c96:	f10d 0c1c 	add.w	ip, sp, #28
   16c9a:	f8cd c014 	str.w	ip, [sp, #20]
   16c9e:	9704      	str	r7, [sp, #16]
   16ca0:	9003      	str	r0, [sp, #12]
   16ca2:	9102      	str	r1, [sp, #8]
   16ca4:	9201      	str	r2, [sp, #4]
   16ca6:	9300      	str	r3, [sp, #0]
   16ca8:	79a3      	ldrb	r3, [r4, #6]
   16caa:	4a0f      	ldr	r2, [pc, #60]	; (16ce8 <bt_addr_le_to_str+0x7c>)
   16cac:	4631      	mov	r1, r6
   16cae:	4628      	mov	r0, r5
   16cb0:	f012 fad8 	bl	29264 <snprintk>
}
   16cb4:	b00b      	add	sp, #44	; 0x2c
   16cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   16cb8:	490c      	ldr	r1, [pc, #48]	; (16cec <bt_addr_le_to_str+0x80>)
   16cba:	a807      	add	r0, sp, #28
   16cbc:	f014 f9d5 	bl	2b06a <strcpy>
		break;
   16cc0:	e7e4      	b.n	16c8c <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   16cc2:	490b      	ldr	r1, [pc, #44]	; (16cf0 <bt_addr_le_to_str+0x84>)
   16cc4:	a807      	add	r0, sp, #28
   16cc6:	f014 f9d0 	bl	2b06a <strcpy>
		break;
   16cca:	e7df      	b.n	16c8c <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   16ccc:	4909      	ldr	r1, [pc, #36]	; (16cf4 <bt_addr_le_to_str+0x88>)
   16cce:	a807      	add	r0, sp, #28
   16cd0:	f014 f9cb 	bl	2b06a <strcpy>
		break;
   16cd4:	e7da      	b.n	16c8c <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16cd6:	4a08      	ldr	r2, [pc, #32]	; (16cf8 <bt_addr_le_to_str+0x8c>)
   16cd8:	210a      	movs	r1, #10
   16cda:	a807      	add	r0, sp, #28
   16cdc:	f012 fac2 	bl	29264 <snprintk>
		break;
   16ce0:	e7d4      	b.n	16c8c <bt_addr_le_to_str+0x20>
   16ce2:	bf00      	nop
   16ce4:	00031384 	.word	0x00031384
   16ce8:	000313ac 	.word	0x000313ac
   16cec:	0003138c 	.word	0x0003138c
   16cf0:	00031394 	.word	0x00031394
   16cf4:	000313a0 	.word	0x000313a0
   16cf8:	000325e4 	.word	0x000325e4

00016cfc <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16cfc:	2940      	cmp	r1, #64	; 0x40
   16cfe:	bf28      	it	cs
   16d00:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   16d02:	2300      	movs	r3, #0
   16d04:	428b      	cmp	r3, r1
   16d06:	d21c      	bcs.n	16d42 <bt_hex+0x46>
{
   16d08:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   16d0a:	f810 c003 	ldrb.w	ip, [r0, r3]
   16d0e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   16d12:	005a      	lsls	r2, r3, #1
   16d14:	4d0d      	ldr	r5, [pc, #52]	; (16d4c <bt_hex+0x50>)
   16d16:	f815 c00c 	ldrb.w	ip, [r5, ip]
   16d1a:	4c0d      	ldr	r4, [pc, #52]	; (16d50 <bt_hex+0x54>)
   16d1c:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16d20:	f810 c003 	ldrb.w	ip, [r0, r3]
   16d24:	f00c 0c0f 	and.w	ip, ip, #15
   16d28:	3201      	adds	r2, #1
   16d2a:	f815 500c 	ldrb.w	r5, [r5, ip]
   16d2e:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   16d30:	3301      	adds	r3, #1
   16d32:	428b      	cmp	r3, r1
   16d34:	d3e9      	bcc.n	16d0a <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   16d36:	4806      	ldr	r0, [pc, #24]	; (16d50 <bt_hex+0x54>)
   16d38:	2200      	movs	r2, #0
   16d3a:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   16d3e:	bc30      	pop	{r4, r5}
   16d40:	4770      	bx	lr
	str[i * 2] = '\0';
   16d42:	4803      	ldr	r0, [pc, #12]	; (16d50 <bt_hex+0x54>)
   16d44:	2200      	movs	r2, #0
   16d46:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   16d4a:	4770      	bx	lr
   16d4c:	000313d0 	.word	0x000313d0
   16d50:	20009820 	.word	0x20009820

00016d54 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   16d54:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   16d56:	4c03      	ldr	r4, [pc, #12]	; (16d64 <bt_addr_le_str+0x10>)
   16d58:	221e      	movs	r2, #30
   16d5a:	4621      	mov	r1, r4
   16d5c:	f7ff ff86 	bl	16c6c <bt_addr_le_to_str>

	return str;
}
   16d60:	4620      	mov	r0, r4
   16d62:	bd10      	pop	{r4, pc}
   16d64:	20009800 	.word	0x20009800

00016d68 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   16d68:	b570      	push	{r4, r5, r6, lr}
   16d6a:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16d6c:	ae02      	add	r6, sp, #8
   16d6e:	2400      	movs	r4, #0
   16d70:	9402      	str	r4, [sp, #8]
   16d72:	9403      	str	r4, [sp, #12]
   16d74:	4b08      	ldr	r3, [pc, #32]	; (16d98 <long_wq_init+0x30>)
   16d76:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   16d78:	4d08      	ldr	r5, [pc, #32]	; (16d9c <long_wq_init+0x34>)
   16d7a:	4628      	mov	r0, r5
   16d7c:	f00f f960 	bl	26040 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16d80:	9600      	str	r6, [sp, #0]
   16d82:	230a      	movs	r3, #10
   16d84:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   16d88:	4905      	ldr	r1, [pc, #20]	; (16da0 <long_wq_init+0x38>)
   16d8a:	4628      	mov	r0, r5
   16d8c:	f00f f972 	bl	26074 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16d90:	4620      	mov	r0, r4
   16d92:	b004      	add	sp, #16
   16d94:	bd70      	pop	{r4, r5, r6, pc}
   16d96:	bf00      	nop
   16d98:	000313e4 	.word	0x000313e4
   16d9c:	20008fd0 	.word	0x20008fd0
   16da0:	2000a958 	.word	0x2000a958

00016da4 <bt_long_wq_schedule>:
{
   16da4:	b508      	push	{r3, lr}
   16da6:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   16da8:	4801      	ldr	r0, [pc, #4]	; (16db0 <bt_long_wq_schedule+0xc>)
   16daa:	f00f faef 	bl	2638c <k_work_schedule_for_queue>
}
   16dae:	bd08      	pop	{r3, pc}
   16db0:	20008fd0 	.word	0x20008fd0

00016db4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16db4:	b510      	push	{r4, lr}
   16db6:	4686      	mov	lr, r0
   16db8:	468c      	mov	ip, r1
	switch (src->type) {
   16dba:	7803      	ldrb	r3, [r0, #0]
   16dbc:	2b01      	cmp	r3, #1
   16dbe:	d018      	beq.n	16df2 <uuid_to_uuid128+0x3e>
   16dc0:	2b02      	cmp	r3, #2
   16dc2:	d032      	beq.n	16e2a <uuid_to_uuid128+0x76>
   16dc4:	b103      	cbz	r3, 16dc8 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16dc6:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   16dc8:	4c1b      	ldr	r4, [pc, #108]	; (16e38 <uuid_to_uuid128+0x84>)
   16dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16dcc:	f8cc 0000 	str.w	r0, [ip]
   16dd0:	f8cc 1004 	str.w	r1, [ip, #4]
   16dd4:	f8cc 2008 	str.w	r2, [ip, #8]
   16dd8:	f8cc 300c 	str.w	r3, [ip, #12]
   16ddc:	7823      	ldrb	r3, [r4, #0]
   16dde:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   16de2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16de6:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16dea:	0a1b      	lsrs	r3, r3, #8
   16dec:	f88c 300e 	strb.w	r3, [ip, #14]
}
   16df0:	e7e9      	b.n	16dc6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   16df2:	4c11      	ldr	r4, [pc, #68]	; (16e38 <uuid_to_uuid128+0x84>)
   16df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16df6:	f8cc 0000 	str.w	r0, [ip]
   16dfa:	f8cc 1004 	str.w	r1, [ip, #4]
   16dfe:	f8cc 2008 	str.w	r2, [ip, #8]
   16e02:	f8cc 300c 	str.w	r3, [ip, #12]
   16e06:	7823      	ldrb	r3, [r4, #0]
   16e08:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   16e0c:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   16e10:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16e14:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16e18:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16e1c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16e1e:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   16e22:	0e1b      	lsrs	r3, r3, #24
   16e24:	f88c 3010 	strb.w	r3, [ip, #16]
}
   16e28:	e7cd      	b.n	16dc6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   16e2a:	2211      	movs	r2, #17
   16e2c:	4601      	mov	r1, r0
   16e2e:	4660      	mov	r0, ip
   16e30:	f014 f982 	bl	2b138 <memcpy>
		return;
   16e34:	e7c7      	b.n	16dc6 <uuid_to_uuid128+0x12>
   16e36:	bf00      	nop
   16e38:	000313f0 	.word	0x000313f0

00016e3c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   16e3c:	b538      	push	{r3, r4, r5, lr}
   16e3e:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   16e40:	2801      	cmp	r0, #1
   16e42:	d01e      	beq.n	16e82 <bt_buf_get_rx+0x46>
   16e44:	2803      	cmp	r0, #3
   16e46:	d001      	beq.n	16e4c <bt_buf_get_rx+0x10>
   16e48:	2805      	cmp	r0, #5
   16e4a:	d10c      	bne.n	16e66 <bt_buf_get_rx+0x2a>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16e4c:	480f      	ldr	r0, [pc, #60]	; (16e8c <bt_buf_get_rx+0x50>)
   16e4e:	f016 fa28 	bl	2d2a2 <net_buf_alloc_fixed>
   16e52:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   16e54:	b12c      	cbz	r4, 16e62 <bt_buf_get_rx+0x26>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16e56:	2101      	movs	r1, #1
   16e58:	f104 0008 	add.w	r0, r4, #8
   16e5c:	f008 f9cc 	bl	1f1f8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16e60:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   16e62:	4620      	mov	r0, r4
   16e64:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   16e66:	4c0a      	ldr	r4, [pc, #40]	; (16e90 <bt_buf_get_rx+0x54>)
   16e68:	233f      	movs	r3, #63	; 0x3f
   16e6a:	4622      	mov	r2, r4
   16e6c:	4909      	ldr	r1, [pc, #36]	; (16e94 <bt_buf_get_rx+0x58>)
   16e6e:	480a      	ldr	r0, [pc, #40]	; (16e98 <bt_buf_get_rx+0x5c>)
   16e70:	f012 fe3b 	bl	29aea <assert_print>
   16e74:	4809      	ldr	r0, [pc, #36]	; (16e9c <bt_buf_get_rx+0x60>)
   16e76:	f012 fe38 	bl	29aea <assert_print>
   16e7a:	213f      	movs	r1, #63	; 0x3f
   16e7c:	4620      	mov	r0, r4
   16e7e:	f012 fe2d 	bl	29adc <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   16e82:	4807      	ldr	r0, [pc, #28]	; (16ea0 <bt_buf_get_rx+0x64>)
   16e84:	f016 fa0d 	bl	2d2a2 <net_buf_alloc_fixed>
   16e88:	4604      	mov	r4, r0
   16e8a:	e7e3      	b.n	16e54 <bt_buf_get_rx+0x18>
   16e8c:	200085dc 	.word	0x200085dc
   16e90:	00031404 	.word	0x00031404
   16e94:	00031434 	.word	0x00031434
   16e98:	0002fdac 	.word	0x0002fdac
   16e9c:	0003147c 	.word	0x0003147c
   16ea0:	20008678 	.word	0x20008678

00016ea4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16ea4:	b510      	push	{r4, lr}
   16ea6:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16ea8:	4b0a      	ldr	r3, [pc, #40]	; (16ed4 <bt_buf_get_cmd_complete+0x30>)
   16eaa:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16eae:	b158      	cbz	r0, 16ec8 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16eb0:	f008 fb3e 	bl	1f530 <net_buf_ref>
   16eb4:	4604      	mov	r4, r0
   16eb6:	2101      	movs	r1, #1
   16eb8:	7501      	strb	r1, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   16eba:	2300      	movs	r3, #0
   16ebc:	8183      	strh	r3, [r0, #12]
	net_buf_simple_reserve(&buf->b, reserve);
   16ebe:	3008      	adds	r0, #8
   16ec0:	f008 f99a 	bl	1f1f8 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16ec4:	4620      	mov	r0, r4
   16ec6:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16ec8:	460b      	mov	r3, r1
   16eca:	2001      	movs	r0, #1
   16ecc:	f7ff ffb6 	bl	16e3c <bt_buf_get_rx>
   16ed0:	4604      	mov	r4, r0
   16ed2:	e7f7      	b.n	16ec4 <bt_buf_get_cmd_complete+0x20>
   16ed4:	20008000 	.word	0x20008000

00016ed8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16ed8:	b510      	push	{r4, lr}
	switch (evt) {
   16eda:	280f      	cmp	r0, #15
   16edc:	d90d      	bls.n	16efa <bt_buf_get_evt+0x22>
   16ede:	2813      	cmp	r0, #19
   16ee0:	d10d      	bne.n	16efe <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   16ee2:	4814      	ldr	r0, [pc, #80]	; (16f34 <bt_buf_get_evt+0x5c>)
   16ee4:	f016 f9dd 	bl	2d2a2 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16ee8:	4604      	mov	r4, r0
   16eea:	b198      	cbz	r0, 16f14 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16eec:	2101      	movs	r1, #1
   16eee:	3008      	adds	r0, #8
   16ef0:	f008 f982 	bl	1f1f8 <net_buf_simple_reserve>
   16ef4:	2301      	movs	r3, #1
   16ef6:	7523      	strb	r3, [r4, #20]
}
   16ef8:	e00c      	b.n	16f14 <bt_buf_get_evt+0x3c>
	switch (evt) {
   16efa:	280e      	cmp	r0, #14
   16efc:	d205      	bcs.n	16f0a <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   16efe:	b959      	cbnz	r1, 16f18 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16f00:	2001      	movs	r0, #1
   16f02:	f7ff ff9b 	bl	16e3c <bt_buf_get_rx>
   16f06:	4604      	mov	r4, r0
   16f08:	e004      	b.n	16f14 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   16f0a:	4610      	mov	r0, r2
   16f0c:	4619      	mov	r1, r3
   16f0e:	f7ff ffc9 	bl	16ea4 <bt_buf_get_cmd_complete>
   16f12:	4604      	mov	r4, r0
	}
}
   16f14:	4620      	mov	r0, r4
   16f16:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   16f18:	4807      	ldr	r0, [pc, #28]	; (16f38 <bt_buf_get_evt+0x60>)
   16f1a:	f016 f9c2 	bl	2d2a2 <net_buf_alloc_fixed>
			if (buf) {
   16f1e:	4604      	mov	r4, r0
   16f20:	2800      	cmp	r0, #0
   16f22:	d0f7      	beq.n	16f14 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16f24:	2101      	movs	r1, #1
   16f26:	3008      	adds	r0, #8
   16f28:	f008 f966 	bl	1f1f8 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16f2c:	2301      	movs	r3, #1
   16f2e:	7523      	strb	r3, [r4, #20]
			return buf;
   16f30:	e7f0      	b.n	16f14 <bt_buf_get_evt+0x3c>
   16f32:	bf00      	nop
   16f34:	20008714 	.word	0x20008714
   16f38:	20008644 	.word	0x20008644

00016f3c <conn_handle_disconnected>:
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
}

static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16f3c:	2300      	movs	r3, #0
   16f3e:	b103      	cbz	r3, 16f42 <conn_handle_disconnected+0x6>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   16f40:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   16f42:	4a05      	ldr	r2, [pc, #20]	; (16f58 <conn_handle_disconnected+0x1c>)
   16f44:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16f48:	b922      	cbnz	r2, 16f54 <conn_handle_disconnected+0x18>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16f4a:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   16f4e:	4902      	ldr	r1, [pc, #8]	; (16f58 <conn_handle_disconnected+0x1c>)
   16f50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16f54:	3301      	adds	r3, #1
   16f56:	e7f2      	b.n	16f3e <conn_handle_disconnected+0x2>
   16f58:	200098a4 	.word	0x200098a4

00016f5c <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   16f5c:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16f60:	2300      	movs	r3, #0
   16f62:	b10b      	cbz	r3, 16f68 <conn_handle_is_disconnected+0xc>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   16f64:	2000      	movs	r0, #0
}
   16f66:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   16f68:	4a06      	ldr	r2, [pc, #24]	; (16f84 <conn_handle_is_disconnected+0x28>)
   16f6a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16f6e:	4282      	cmp	r2, r0
   16f70:	d001      	beq.n	16f76 <conn_handle_is_disconnected+0x1a>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16f72:	3301      	adds	r3, #1
   16f74:	e7f5      	b.n	16f62 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   16f76:	4a03      	ldr	r2, [pc, #12]	; (16f84 <conn_handle_is_disconnected+0x28>)
   16f78:	2100      	movs	r1, #0
   16f7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   16f7e:	2001      	movs	r0, #1
   16f80:	4770      	bx	lr
   16f82:	bf00      	nop
   16f84:	200098a4 	.word	0x200098a4

00016f88 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   16f88:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   16f8a:	7851      	ldrb	r1, [r2, #1]
   16f8c:	4b08      	ldr	r3, [pc, #32]	; (16fb0 <read_local_ver_complete+0x28>)
   16f8e:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   16f92:	8851      	ldrh	r1, [r2, #2]
   16f94:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   16f98:	7911      	ldrb	r1, [r2, #4]
   16f9a:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16f9e:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   16fa2:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   16fa6:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   16faa:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   16fae:	4770      	bx	lr
   16fb0:	20008000 	.word	0x20008000

00016fb4 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
   16fb4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   16fb6:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   16fb8:	3001      	adds	r0, #1
   16fba:	f014 f988 	bl	2b2ce <sys_get_le64>
   16fbe:	4b02      	ldr	r3, [pc, #8]	; (16fc8 <le_read_supp_states_complete+0x14>)
   16fc0:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   16fc4:	bd08      	pop	{r3, pc}
   16fc6:	bf00      	nop
   16fc8:	20008000 	.word	0x20008000

00016fcc <hci_reset_complete>:
	uint8_t status = buf->data[0];
   16fcc:	6883      	ldr	r3, [r0, #8]
   16fce:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   16fd0:	b953      	cbnz	r3, 16fe8 <hci_reset_complete+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16fd2:	4b06      	ldr	r3, [pc, #24]	; (16fec <hci_reset_complete+0x20>)
   16fd4:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16fd8:	f002 0209 	and.w	r2, r2, #9
   16fdc:	e8d3 1fef 	ldaex	r1, [r3]
   16fe0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   16fe4:	2800      	cmp	r0, #0
   16fe6:	d1f9      	bne.n	16fdc <hci_reset_complete+0x10>
}
   16fe8:	4770      	bx	lr
   16fea:	bf00      	nop
   16fec:	200080cc 	.word	0x200080cc

00016ff0 <read_local_features_complete>:
{
   16ff0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   16ff2:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16ff4:	2208      	movs	r2, #8
   16ff6:	3101      	adds	r1, #1
   16ff8:	4801      	ldr	r0, [pc, #4]	; (17000 <read_local_features_complete+0x10>)
   16ffa:	f014 f89d 	bl	2b138 <memcpy>
}
   16ffe:	bd08      	pop	{r3, pc}
   17000:	20008070 	.word	0x20008070

00017004 <read_supported_commands_complete>:
{
   17004:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   17006:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   17008:	2240      	movs	r2, #64	; 0x40
   1700a:	3101      	adds	r1, #1
   1700c:	4801      	ldr	r0, [pc, #4]	; (17014 <read_supported_commands_complete+0x10>)
   1700e:	f014 f893 	bl	2b138 <memcpy>
}
   17012:	bd08      	pop	{r3, pc}
   17014:	20008078 	.word	0x20008078

00017018 <read_le_features_complete>:
{
   17018:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1701a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1701c:	2208      	movs	r2, #8
   1701e:	3101      	adds	r1, #1
   17020:	4801      	ldr	r0, [pc, #4]	; (17028 <read_le_features_complete+0x10>)
   17022:	f014 f889 	bl	2b138 <memcpy>
}
   17026:	bd08      	pop	{r3, pc}
   17028:	200080d0 	.word	0x200080d0

0001702c <le_read_buffer_size_complete>:
{
   1702c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1702e:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   17030:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   17034:	b299      	uxth	r1, r3
   17036:	4806      	ldr	r0, [pc, #24]	; (17050 <le_read_buffer_size_complete+0x24>)
   17038:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   1703c:	b901      	cbnz	r1, 17040 <le_read_buffer_size_complete+0x14>
}
   1703e:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   17040:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17042:	460a      	mov	r2, r1
   17044:	f500 7080 	add.w	r0, r0, #256	; 0x100
   17048:	f017 ff82 	bl	2ef50 <z_impl_k_sem_init>
   1704c:	e7f7      	b.n	1703e <le_read_buffer_size_complete+0x12>
   1704e:	bf00      	nop
   17050:	20008000 	.word	0x20008000

00017054 <read_buffer_size_complete>:
{
   17054:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   17056:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   17058:	4b08      	ldr	r3, [pc, #32]	; (1707c <read_buffer_size_complete+0x28>)
   1705a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1705e:	b103      	cbz	r3, 17062 <read_buffer_size_complete+0xe>
}
   17060:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   17062:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   17066:	4805      	ldr	r0, [pc, #20]	; (1707c <read_buffer_size_complete+0x28>)
   17068:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   1706c:	8891      	ldrh	r1, [r2, #4]
   1706e:	460a      	mov	r2, r1
   17070:	f500 7080 	add.w	r0, r0, #256	; 0x100
   17074:	f017 ff6c 	bl	2ef50 <z_impl_k_sem_init>
   17078:	e7f2      	b.n	17060 <read_buffer_size_complete+0xc>
   1707a:	bf00      	nop
   1707c:	20008000 	.word	0x20008000

00017080 <hci_data_buf_overflow>:
{
   17080:	b5b0      	push	{r4, r5, r7, lr}
   17082:	b082      	sub	sp, #8
   17084:	af00      	add	r7, sp, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   17086:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   17088:	781c      	ldrb	r4, [r3, #0]
   1708a:	b088      	sub	sp, #32
   1708c:	466b      	mov	r3, sp
   1708e:	f113 0210 	adds.w	r2, r3, #16
   17092:	d031      	beq.n	170f8 <hci_data_buf_overflow+0x78>
   17094:	210c      	movs	r1, #12
   17096:	b13a      	cbz	r2, 170a8 <hci_data_buf_overflow+0x28>
   17098:	4608      	mov	r0, r1
   1709a:	2904      	cmp	r1, #4
   1709c:	dd01      	ble.n	170a2 <hci_data_buf_overflow+0x22>
   1709e:	4d19      	ldr	r5, [pc, #100]	; (17104 <hci_data_buf_overflow+0x84>)
   170a0:	615d      	str	r5, [r3, #20]
   170a2:	2808      	cmp	r0, #8
   170a4:	dd00      	ble.n	170a8 <hci_data_buf_overflow+0x28>
   170a6:	619c      	str	r4, [r3, #24]
   170a8:	290b      	cmp	r1, #11
   170aa:	dd28      	ble.n	170fe <hci_data_buf_overflow+0x7e>
   170ac:	f04f 0c0c 	mov.w	ip, #12
   170b0:	b13a      	cbz	r2, 170c2 <hci_data_buf_overflow+0x42>
   170b2:	2103      	movs	r1, #3
   170b4:	7139      	strb	r1, [r7, #4]
   170b6:	2100      	movs	r1, #0
   170b8:	7179      	strb	r1, [r7, #5]
   170ba:	71b9      	strb	r1, [r7, #6]
   170bc:	71f9      	strb	r1, [r7, #7]
   170be:	6878      	ldr	r0, [r7, #4]
   170c0:	6118      	str	r0, [r3, #16]
   170c2:	2100      	movs	r1, #0
   170c4:	f36f 0100 	bfc	r1, #0, #1
   170c8:	f36f 0141 	bfc	r1, #1, #1
   170cc:	f36f 0182 	bfc	r1, #2, #1
   170d0:	f36f 01c5 	bfc	r1, #3, #3
   170d4:	2302      	movs	r3, #2
   170d6:	f363 1188 	bfi	r1, r3, #6, #3
   170da:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   170de:	f36c 2152 	bfi	r1, ip, #9, #10
   170e2:	f36f 41de 	bfc	r1, #19, #12
   170e6:	f36f 71df 	bfc	r1, #31, #1
   170ea:	2300      	movs	r3, #0
   170ec:	4806      	ldr	r0, [pc, #24]	; (17108 <hci_data_buf_overflow+0x88>)
   170ee:	f7fc fe05 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   170f2:	3708      	adds	r7, #8
   170f4:	46bd      	mov	sp, r7
   170f6:	bdb0      	pop	{r4, r5, r7, pc}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   170f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   170fc:	e7cb      	b.n	17096 <hci_data_buf_overflow+0x16>
   170fe:	f06f 0c1b 	mvn.w	ip, #27
   17102:	e7d5      	b.n	170b0 <hci_data_buf_overflow+0x30>
   17104:	000314e4 	.word	0x000314e4
   17108:	0002f820 	.word	0x0002f820

0001710c <handle_event_common>:
{
   1710c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1710e:	b083      	sub	sp, #12
   17110:	af00      	add	r7, sp, #0
   17112:	4604      	mov	r4, r0
   17114:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   17116:	f04f 0c00 	mov.w	ip, #0
   1711a:	4563      	cmp	r3, ip
   1711c:	d955      	bls.n	171ca <handle_event_common+0xbe>
		const struct event_handler *handler = &handlers[i];
   1711e:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   17122:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   17126:	45a6      	cmp	lr, r4
   17128:	d109      	bne.n	1713e <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
   1712a:	8983      	ldrh	r3, [r0, #12]
   1712c:	784a      	ldrb	r2, [r1, #1]
   1712e:	4293      	cmp	r3, r2
   17130:	d308      	bcc.n	17144 <handle_event_common+0x38>
		handler->handler(buf);
   17132:	684b      	ldr	r3, [r1, #4]
   17134:	4798      	blx	r3
		return 0;
   17136:	2000      	movs	r0, #0
}
   17138:	370c      	adds	r7, #12
   1713a:	46bd      	mov	sp, r7
   1713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   1713e:	f10c 0c01 	add.w	ip, ip, #1
   17142:	e7ea      	b.n	1711a <handle_event_common+0xe>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17144:	466d      	mov	r5, sp
   17146:	b088      	sub	sp, #32
   17148:	4669      	mov	r1, sp
   1714a:	f111 0210 	adds.w	r2, r1, #16
   1714e:	d036      	beq.n	171be <handle_event_common+0xb2>
   17150:	2010      	movs	r0, #16
   17152:	b162      	cbz	r2, 1716e <handle_event_common+0x62>
   17154:	4684      	mov	ip, r0
   17156:	2804      	cmp	r0, #4
   17158:	dd01      	ble.n	1715e <handle_event_common+0x52>
   1715a:	4e1d      	ldr	r6, [pc, #116]	; (171d0 <handle_event_common+0xc4>)
   1715c:	614e      	str	r6, [r1, #20]
   1715e:	f1bc 0f08 	cmp.w	ip, #8
   17162:	dd00      	ble.n	17166 <handle_event_common+0x5a>
   17164:	618b      	str	r3, [r1, #24]
   17166:	f1bc 0f0c 	cmp.w	ip, #12
   1716a:	dd00      	ble.n	1716e <handle_event_common+0x62>
   1716c:	61cc      	str	r4, [r1, #28]
   1716e:	280f      	cmp	r0, #15
   17170:	dd28      	ble.n	171c4 <handle_event_common+0xb8>
   17172:	2310      	movs	r3, #16
   17174:	b13a      	cbz	r2, 17186 <handle_event_common+0x7a>
   17176:	2004      	movs	r0, #4
   17178:	7138      	strb	r0, [r7, #4]
   1717a:	2000      	movs	r0, #0
   1717c:	7178      	strb	r0, [r7, #5]
   1717e:	71b8      	strb	r0, [r7, #6]
   17180:	71f8      	strb	r0, [r7, #7]
   17182:	6878      	ldr	r0, [r7, #4]
   17184:	6108      	str	r0, [r1, #16]
   17186:	2100      	movs	r1, #0
   17188:	f36f 0100 	bfc	r1, #0, #1
   1718c:	f36f 0141 	bfc	r1, #1, #1
   17190:	f36f 0182 	bfc	r1, #2, #1
   17194:	f36f 01c5 	bfc	r1, #3, #3
   17198:	2001      	movs	r0, #1
   1719a:	f360 1188 	bfi	r1, r0, #6, #3
   1719e:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   171a2:	f363 2152 	bfi	r1, r3, #9, #10
   171a6:	f36f 41de 	bfc	r1, #19, #12
   171aa:	f36f 71df 	bfc	r1, #31, #1
   171ae:	2300      	movs	r3, #0
   171b0:	4808      	ldr	r0, [pc, #32]	; (171d4 <handle_event_common+0xc8>)
   171b2:	f7fc fda3 	bl	13cfc <z_impl_z_log_msg_static_create>
   171b6:	46ad      	mov	sp, r5
			return -EINVAL;
   171b8:	f06f 0015 	mvn.w	r0, #21
   171bc:	e7bc      	b.n	17138 <handle_event_common+0x2c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   171be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   171c2:	e7c6      	b.n	17152 <handle_event_common+0x46>
   171c4:	f06f 031b 	mvn.w	r3, #27
   171c8:	e7d4      	b.n	17174 <handle_event_common+0x68>
	return -EOPNOTSUPP;
   171ca:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   171ce:	e7b3      	b.n	17138 <handle_event_common+0x2c>
   171d0:	0003150c 	.word	0x0003150c
   171d4:	0002f820 	.word	0x0002f820

000171d8 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   171d8:	2801      	cmp	r0, #1
   171da:	d001      	beq.n	171e0 <find_pending_connect+0x8>
	return NULL;
   171dc:	2000      	movs	r0, #0
}
   171de:	4770      	bx	lr
{
   171e0:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   171e2:	2205      	movs	r2, #5
   171e4:	4b07      	ldr	r3, [pc, #28]	; (17204 <find_pending_connect+0x2c>)
   171e6:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   171ea:	f004 fb39 	bl	1b860 <bt_conn_lookup_state_le>
		if (!conn) {
   171ee:	b100      	cbz	r0, 171f2 <find_pending_connect+0x1a>
}
   171f0:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   171f2:	2204      	movs	r2, #4
   171f4:	4904      	ldr	r1, [pc, #16]	; (17208 <find_pending_connect+0x30>)
   171f6:	4b03      	ldr	r3, [pc, #12]	; (17204 <find_pending_connect+0x2c>)
   171f8:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   171fc:	f004 fb30 	bl	1b860 <bt_conn_lookup_state_le>
		return conn;
   17200:	e7f6      	b.n	171f0 <find_pending_connect+0x18>
   17202:	bf00      	nop
   17204:	20008000 	.word	0x20008000
   17208:	00031364 	.word	0x00031364

0001720c <le_conn_complete_adv_timeout>:
{
   1720c:	b510      	push	{r4, lr}
   1720e:	b088      	sub	sp, #32
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17210:	f002 fff2 	bl	1a1f8 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   17214:	3010      	adds	r0, #16
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17216:	e8d0 3fef 	ldaex	r3, [r0]
   1721a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1721e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   17222:	2a00      	cmp	r2, #0
   17224:	d1f7      	bne.n	17216 <le_conn_complete_adv_timeout+0xa>
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   17226:	2100      	movs	r1, #0
   17228:	2001      	movs	r0, #1
   1722a:	f7ff ffd5 	bl	171d8 <find_pending_connect>
		if (!conn) {
   1722e:	4604      	mov	r4, r0
   17230:	b148      	cbz	r0, 17246 <le_conn_complete_adv_timeout+0x3a>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   17232:	233c      	movs	r3, #60	; 0x3c
   17234:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17236:	2100      	movs	r1, #0
   17238:	f003 ffbe 	bl	1b1b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   1723c:	4620      	mov	r0, r4
   1723e:	f003 ff7f 	bl	1b140 <bt_conn_unref>
}
   17242:	b008      	add	sp, #32
   17244:	bd10      	pop	{r4, pc}
			BT_ERR("No pending peripheral connection");
   17246:	4b13      	ldr	r3, [pc, #76]	; (17294 <le_conn_complete_adv_timeout+0x88>)
   17248:	9307      	str	r3, [sp, #28]
   1724a:	2302      	movs	r3, #2
   1724c:	f88d 3004 	strb.w	r3, [sp, #4]
   17250:	2300      	movs	r3, #0
   17252:	f88d 3005 	strb.w	r3, [sp, #5]
   17256:	f88d 3006 	strb.w	r3, [sp, #6]
   1725a:	f88d 3007 	strb.w	r3, [sp, #7]
   1725e:	9a01      	ldr	r2, [sp, #4]
   17260:	9206      	str	r2, [sp, #24]
   17262:	4619      	mov	r1, r3
   17264:	f363 0100 	bfi	r1, r3, #0, #1
   17268:	f363 0141 	bfi	r1, r3, #1, #1
   1726c:	f363 0182 	bfi	r1, r3, #2, #1
   17270:	f363 01c5 	bfi	r1, r3, #3, #3
   17274:	2201      	movs	r2, #1
   17276:	f362 1188 	bfi	r1, r2, #6, #3
   1727a:	2208      	movs	r2, #8
   1727c:	f362 2152 	bfi	r1, r2, #9, #10
   17280:	f363 41de 	bfi	r1, r3, #19, #12
   17284:	f363 71df 	bfi	r1, r3, #31, #1
   17288:	aa06      	add	r2, sp, #24
   1728a:	4803      	ldr	r0, [pc, #12]	; (17298 <le_conn_complete_adv_timeout+0x8c>)
   1728c:	f7fc fd36 	bl	13cfc <z_impl_z_log_msg_static_create>
			return;
   17290:	e7d7      	b.n	17242 <le_conn_complete_adv_timeout+0x36>
   17292:	bf00      	nop
   17294:	00031530 	.word	0x00031530
   17298:	0002f820 	.word	0x0002f820

0001729c <hci_disconn_complete>:
{
   1729c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1729e:	b083      	sub	sp, #12
   172a0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   172a2:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   172a4:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   172a8:	7823      	ldrb	r3, [r4, #0]
   172aa:	b113      	cbz	r3, 172b2 <hci_disconn_complete+0x16>
}
   172ac:	370c      	adds	r7, #12
   172ae:	46bd      	mov	sp, r7
   172b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_handle(handle);
   172b2:	4630      	mov	r0, r6
   172b4:	f003 ff76 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   172b8:	4605      	mov	r5, r0
   172ba:	b158      	cbz	r0, 172d4 <hci_disconn_complete+0x38>
	conn->err = evt->reason;
   172bc:	78e3      	ldrb	r3, [r4, #3]
   172be:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   172c0:	2100      	movs	r1, #0
   172c2:	f003 ff79 	bl	1b1b8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   172c6:	78ab      	ldrb	r3, [r5, #2]
   172c8:	2b01      	cmp	r3, #1
   172ca:	d03f      	beq.n	1734c <hci_disconn_complete+0xb0>
		bt_conn_unref(conn);
   172cc:	4628      	mov	r0, r5
   172ce:	f003 ff37 	bl	1b140 <bt_conn_unref>
		return;
   172d2:	e7eb      	b.n	172ac <hci_disconn_complete+0x10>
		BT_ERR("Unable to look up conn with handle %u", handle);
   172d4:	466d      	mov	r5, sp
   172d6:	b088      	sub	sp, #32
   172d8:	466b      	mov	r3, sp
   172da:	f113 0210 	adds.w	r2, r3, #16
   172de:	d02f      	beq.n	17340 <hci_disconn_complete+0xa4>
   172e0:	210c      	movs	r1, #12
   172e2:	b13a      	cbz	r2, 172f4 <hci_disconn_complete+0x58>
   172e4:	4608      	mov	r0, r1
   172e6:	2904      	cmp	r1, #4
   172e8:	dd01      	ble.n	172ee <hci_disconn_complete+0x52>
   172ea:	4c1a      	ldr	r4, [pc, #104]	; (17354 <hci_disconn_complete+0xb8>)
   172ec:	615c      	str	r4, [r3, #20]
   172ee:	2808      	cmp	r0, #8
   172f0:	dd00      	ble.n	172f4 <hci_disconn_complete+0x58>
   172f2:	619e      	str	r6, [r3, #24]
   172f4:	290b      	cmp	r1, #11
   172f6:	dd26      	ble.n	17346 <hci_disconn_complete+0xaa>
   172f8:	240c      	movs	r4, #12
   172fa:	b13a      	cbz	r2, 1730c <hci_disconn_complete+0x70>
   172fc:	2103      	movs	r1, #3
   172fe:	7139      	strb	r1, [r7, #4]
   17300:	2100      	movs	r1, #0
   17302:	7179      	strb	r1, [r7, #5]
   17304:	71b9      	strb	r1, [r7, #6]
   17306:	71f9      	strb	r1, [r7, #7]
   17308:	6878      	ldr	r0, [r7, #4]
   1730a:	6118      	str	r0, [r3, #16]
   1730c:	2100      	movs	r1, #0
   1730e:	f36f 0100 	bfc	r1, #0, #1
   17312:	f36f 0141 	bfc	r1, #1, #1
   17316:	f36f 0182 	bfc	r1, #2, #1
   1731a:	f36f 01c5 	bfc	r1, #3, #3
   1731e:	2301      	movs	r3, #1
   17320:	f363 1188 	bfi	r1, r3, #6, #3
   17324:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   17328:	f363 2152 	bfi	r1, r3, #9, #10
   1732c:	f36f 41de 	bfc	r1, #19, #12
   17330:	f36f 71df 	bfc	r1, #31, #1
   17334:	2300      	movs	r3, #0
   17336:	4808      	ldr	r0, [pc, #32]	; (17358 <hci_disconn_complete+0xbc>)
   17338:	f7fc fce0 	bl	13cfc <z_impl_z_log_msg_static_create>
   1733c:	46ad      	mov	sp, r5
		return;
   1733e:	e7b5      	b.n	172ac <hci_disconn_complete+0x10>
		BT_ERR("Unable to look up conn with handle %u", handle);
   17340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17344:	e7cd      	b.n	172e2 <hci_disconn_complete+0x46>
   17346:	f06f 041b 	mvn.w	r4, #27
   1734a:	e7d6      	b.n	172fa <hci_disconn_complete+0x5e>
	bt_conn_unref(conn);
   1734c:	4628      	mov	r0, r5
   1734e:	f003 fef7 	bl	1b140 <bt_conn_unref>
   17352:	e7ab      	b.n	172ac <hci_disconn_complete+0x10>
   17354:	00031554 	.word	0x00031554
   17358:	0002f820 	.word	0x0002f820

0001735c <le_phy_update_complete>:
{
   1735c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1735e:	b083      	sub	sp, #12
   17360:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   17362:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17364:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   17368:	4620      	mov	r0, r4
   1736a:	f003 ff1b 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   1736e:	b120      	cbz	r0, 1737a <le_phy_update_complete+0x1e>
	bt_conn_unref(conn);
   17370:	f003 fee6 	bl	1b140 <bt_conn_unref>
}
   17374:	370c      	adds	r7, #12
   17376:	46bd      	mov	sp, r7
   17378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1737a:	466d      	mov	r5, sp
   1737c:	b088      	sub	sp, #32
   1737e:	466b      	mov	r3, sp
   17380:	f113 0210 	adds.w	r2, r3, #16
   17384:	d02f      	beq.n	173e6 <le_phy_update_complete+0x8a>
   17386:	210c      	movs	r1, #12
   17388:	b13a      	cbz	r2, 1739a <le_phy_update_complete+0x3e>
   1738a:	4608      	mov	r0, r1
   1738c:	2904      	cmp	r1, #4
   1738e:	dd01      	ble.n	17394 <le_phy_update_complete+0x38>
   17390:	4e18      	ldr	r6, [pc, #96]	; (173f4 <le_phy_update_complete+0x98>)
   17392:	615e      	str	r6, [r3, #20]
   17394:	2808      	cmp	r0, #8
   17396:	dd00      	ble.n	1739a <le_phy_update_complete+0x3e>
   17398:	619c      	str	r4, [r3, #24]
   1739a:	290b      	cmp	r1, #11
   1739c:	dd26      	ble.n	173ec <le_phy_update_complete+0x90>
   1739e:	240c      	movs	r4, #12
   173a0:	b13a      	cbz	r2, 173b2 <le_phy_update_complete+0x56>
   173a2:	2103      	movs	r1, #3
   173a4:	7139      	strb	r1, [r7, #4]
   173a6:	2100      	movs	r1, #0
   173a8:	7179      	strb	r1, [r7, #5]
   173aa:	71b9      	strb	r1, [r7, #6]
   173ac:	71f9      	strb	r1, [r7, #7]
   173ae:	6878      	ldr	r0, [r7, #4]
   173b0:	6118      	str	r0, [r3, #16]
   173b2:	2100      	movs	r1, #0
   173b4:	f36f 0100 	bfc	r1, #0, #1
   173b8:	f36f 0141 	bfc	r1, #1, #1
   173bc:	f36f 0182 	bfc	r1, #2, #1
   173c0:	f36f 01c5 	bfc	r1, #3, #3
   173c4:	2301      	movs	r3, #1
   173c6:	f363 1188 	bfi	r1, r3, #6, #3
   173ca:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   173ce:	f363 2152 	bfi	r1, r3, #9, #10
   173d2:	f36f 41de 	bfc	r1, #19, #12
   173d6:	f36f 71df 	bfc	r1, #31, #1
   173da:	2300      	movs	r3, #0
   173dc:	4806      	ldr	r0, [pc, #24]	; (173f8 <le_phy_update_complete+0x9c>)
   173de:	f7fc fc8d 	bl	13cfc <z_impl_z_log_msg_static_create>
   173e2:	46ad      	mov	sp, r5
		return;
   173e4:	e7c6      	b.n	17374 <le_phy_update_complete+0x18>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   173e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   173ea:	e7cd      	b.n	17388 <le_phy_update_complete+0x2c>
   173ec:	f06f 041b 	mvn.w	r4, #27
   173f0:	e7d6      	b.n	173a0 <le_phy_update_complete+0x44>
   173f2:	bf00      	nop
   173f4:	0003157c 	.word	0x0003157c
   173f8:	0002f820 	.word	0x0002f820

000173fc <le_data_len_change>:
{
   173fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   173fe:	b083      	sub	sp, #12
   17400:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   17402:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17404:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   17406:	4620      	mov	r0, r4
   17408:	f003 fecc 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   1740c:	b120      	cbz	r0, 17418 <le_data_len_change+0x1c>
	bt_conn_unref(conn);
   1740e:	f003 fe97 	bl	1b140 <bt_conn_unref>
}
   17412:	370c      	adds	r7, #12
   17414:	46bd      	mov	sp, r7
   17416:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17418:	466d      	mov	r5, sp
   1741a:	b088      	sub	sp, #32
   1741c:	466b      	mov	r3, sp
   1741e:	f113 0210 	adds.w	r2, r3, #16
   17422:	d02f      	beq.n	17484 <le_data_len_change+0x88>
   17424:	210c      	movs	r1, #12
   17426:	b13a      	cbz	r2, 17438 <le_data_len_change+0x3c>
   17428:	4608      	mov	r0, r1
   1742a:	2904      	cmp	r1, #4
   1742c:	dd01      	ble.n	17432 <le_data_len_change+0x36>
   1742e:	4e18      	ldr	r6, [pc, #96]	; (17490 <le_data_len_change+0x94>)
   17430:	615e      	str	r6, [r3, #20]
   17432:	2808      	cmp	r0, #8
   17434:	dd00      	ble.n	17438 <le_data_len_change+0x3c>
   17436:	619c      	str	r4, [r3, #24]
   17438:	290b      	cmp	r1, #11
   1743a:	dd26      	ble.n	1748a <le_data_len_change+0x8e>
   1743c:	240c      	movs	r4, #12
   1743e:	b13a      	cbz	r2, 17450 <le_data_len_change+0x54>
   17440:	2103      	movs	r1, #3
   17442:	7139      	strb	r1, [r7, #4]
   17444:	2100      	movs	r1, #0
   17446:	7179      	strb	r1, [r7, #5]
   17448:	71b9      	strb	r1, [r7, #6]
   1744a:	71f9      	strb	r1, [r7, #7]
   1744c:	6878      	ldr	r0, [r7, #4]
   1744e:	6118      	str	r0, [r3, #16]
   17450:	2100      	movs	r1, #0
   17452:	f36f 0100 	bfc	r1, #0, #1
   17456:	f36f 0141 	bfc	r1, #1, #1
   1745a:	f36f 0182 	bfc	r1, #2, #1
   1745e:	f36f 01c5 	bfc	r1, #3, #3
   17462:	2301      	movs	r3, #1
   17464:	f363 1188 	bfi	r1, r3, #6, #3
   17468:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1746c:	f363 2152 	bfi	r1, r3, #9, #10
   17470:	f36f 41de 	bfc	r1, #19, #12
   17474:	f36f 71df 	bfc	r1, #31, #1
   17478:	2300      	movs	r3, #0
   1747a:	4806      	ldr	r0, [pc, #24]	; (17494 <le_data_len_change+0x98>)
   1747c:	f7fc fc3e 	bl	13cfc <z_impl_z_log_msg_static_create>
   17480:	46ad      	mov	sp, r5
		return;
   17482:	e7c6      	b.n	17412 <le_data_len_change+0x16>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17488:	e7cd      	b.n	17426 <le_data_len_change+0x2a>
   1748a:	f06f 041b 	mvn.w	r4, #27
   1748e:	e7d6      	b.n	1743e <le_data_len_change+0x42>
   17490:	0003157c 	.word	0x0003157c
   17494:	0002f820 	.word	0x0002f820

00017498 <hci_num_completed_packets>:
{
   17498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1749c:	b089      	sub	sp, #36	; 0x24
   1749e:	af00      	add	r7, sp, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   174a0:	f8d0 a008 	ldr.w	sl, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   174a4:	2600      	movs	r6, #0
   174a6:	e09e      	b.n	175e6 <hci_num_completed_packets+0x14e>
			BT_ERR("No connection for handle %u", handle);
   174a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   174ac:	e0b3      	b.n	17616 <hci_num_completed_packets+0x17e>
   174ae:	f06f 011b 	mvn.w	r1, #27
   174b2:	b13a      	cbz	r2, 174c4 <hci_num_completed_packets+0x2c>
   174b4:	2003      	movs	r0, #3
   174b6:	7138      	strb	r0, [r7, #4]
   174b8:	2000      	movs	r0, #0
   174ba:	7178      	strb	r0, [r7, #5]
   174bc:	71b8      	strb	r0, [r7, #6]
   174be:	71f8      	strb	r0, [r7, #7]
   174c0:	6878      	ldr	r0, [r7, #4]
   174c2:	6118      	str	r0, [r3, #16]
   174c4:	f36f 0800 	bfc	r8, #0, #1
   174c8:	f36f 0841 	bfc	r8, #1, #1
   174cc:	f36f 0882 	bfc	r8, #2, #1
   174d0:	f36f 08c5 	bfc	r8, #3, #3
   174d4:	2301      	movs	r3, #1
   174d6:	f363 1888 	bfi	r8, r3, #6, #3
   174da:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   174de:	f361 2852 	bfi	r8, r1, #9, #10
   174e2:	f36f 48de 	bfc	r8, #19, #12
   174e6:	f36f 78df 	bfc	r8, #31, #1
   174ea:	2300      	movs	r3, #0
   174ec:	4641      	mov	r1, r8
   174ee:	4856      	ldr	r0, [pc, #344]	; (17648 <hci_num_completed_packets+0x1b0>)
   174f0:	f7fc fc04 	bl	13cfc <z_impl_z_log_msg_static_create>
   174f4:	46a5      	mov	sp, r4
			continue;
   174f6:	e075      	b.n	175e4 <hci_num_completed_packets+0x14c>
			BT_ERR("No connection for handle %u", handle);
   174f8:	f06f 011b 	mvn.w	r1, #27
   174fc:	e7d9      	b.n	174b2 <hci_num_completed_packets+0x1a>
				conn->pending_no_cb--;
   174fe:	3b01      	subs	r3, #1
   17500:	61e3      	str	r3, [r4, #28]
   17502:	f382 8811 	msr	BASEPRI, r2
   17506:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   1750a:	4620      	mov	r0, r4
   1750c:	f003 fa6c 	bl	1a9e8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   17510:	f00e f9de 	bl	258d0 <z_impl_k_sem_give>
				continue;
   17514:	e024      	b.n	17560 <hci_num_completed_packets+0xc8>
   17516:	f382 8811 	msr	BASEPRI, r2
   1751a:	f3bf 8f6f 	isb	sy
			if (!node) {
   1751e:	2b00      	cmp	r3, #0
   17520:	d03b      	beq.n	1759a <hci_num_completed_packets+0x102>
	__asm__ volatile(
   17522:	f04f 0120 	mov.w	r1, #32
   17526:	f3ef 8211 	mrs	r2, BASEPRI
   1752a:	f381 8812 	msr	BASEPRI_MAX, r1
   1752e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   17532:	68d9      	ldr	r1, [r3, #12]
   17534:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   17536:	2100      	movs	r1, #0
   17538:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   1753a:	6019      	str	r1, [r3, #0]
	return list->tail;
   1753c:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1753e:	2900      	cmp	r1, #0
   17540:	d07a      	beq.n	17638 <hci_num_completed_packets+0x1a0>
	parent->next = child;
   17542:	600b      	str	r3, [r1, #0]
	list->tail = node;
   17544:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   17546:	f382 8811 	msr	BASEPRI, r2
   1754a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1754e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17552:	f00e fd6d 	bl	26030 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   17556:	4620      	mov	r0, r4
   17558:	f003 fa46 	bl	1a9e8 <bt_conn_get_pkts>
   1755c:	f00e f9b8 	bl	258d0 <z_impl_k_sem_give>
			BT_ERR("No connection for handle %u", handle);
   17560:	46ab      	mov	fp, r5
		while (count--) {
   17562:	f10b 35ff 	add.w	r5, fp, #4294967295
   17566:	b2ad      	uxth	r5, r5
   17568:	f1bb 0f00 	cmp.w	fp, #0
   1756c:	d037      	beq.n	175de <hci_num_completed_packets+0x146>
	__asm__ volatile(
   1756e:	f04f 0220 	mov.w	r2, #32
   17572:	f3ef 8311 	mrs	r3, BASEPRI
   17576:	f382 8812 	msr	BASEPRI_MAX, r2
   1757a:	f3bf 8f6f 	isb	sy
   1757e:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   17580:	69e3      	ldr	r3, [r4, #28]
   17582:	2b00      	cmp	r3, #0
   17584:	d1bb      	bne.n	174fe <hci_num_completed_packets+0x66>
	return list->head;
   17586:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   17588:	2b00      	cmp	r3, #0
   1758a:	d0c4      	beq.n	17516 <hci_num_completed_packets+0x7e>
	return node->next;
   1758c:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1758e:	6161      	str	r1, [r4, #20]
	return list->tail;
   17590:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17592:	4298      	cmp	r0, r3
   17594:	d1bf      	bne.n	17516 <hci_num_completed_packets+0x7e>
	list->tail = node;
   17596:	61a1      	str	r1, [r4, #24]
}
   17598:	e7bd      	b.n	17516 <hci_num_completed_packets+0x7e>
				BT_ERR("packets count mismatch");
   1759a:	4b2c      	ldr	r3, [pc, #176]	; (1764c <hci_num_completed_packets+0x1b4>)
   1759c:	61fb      	str	r3, [r7, #28]
   1759e:	2302      	movs	r3, #2
   175a0:	713b      	strb	r3, [r7, #4]
   175a2:	2300      	movs	r3, #0
   175a4:	717b      	strb	r3, [r7, #5]
   175a6:	71bb      	strb	r3, [r7, #6]
   175a8:	71fb      	strb	r3, [r7, #7]
   175aa:	687a      	ldr	r2, [r7, #4]
   175ac:	61ba      	str	r2, [r7, #24]
   175ae:	f363 0900 	bfi	r9, r3, #0, #1
   175b2:	f363 0941 	bfi	r9, r3, #1, #1
   175b6:	f363 0982 	bfi	r9, r3, #2, #1
   175ba:	f363 09c5 	bfi	r9, r3, #3, #3
   175be:	2201      	movs	r2, #1
   175c0:	f362 1988 	bfi	r9, r2, #6, #3
   175c4:	2208      	movs	r2, #8
   175c6:	f362 2952 	bfi	r9, r2, #9, #10
   175ca:	f363 49de 	bfi	r9, r3, #19, #12
   175ce:	f363 79df 	bfi	r9, r3, #31, #1
   175d2:	f107 0218 	add.w	r2, r7, #24
   175d6:	4649      	mov	r1, r9
   175d8:	481b      	ldr	r0, [pc, #108]	; (17648 <hci_num_completed_packets+0x1b0>)
   175da:	f7fc fb8f 	bl	13cfc <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   175de:	4620      	mov	r0, r4
   175e0:	f003 fdae 	bl	1b140 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   175e4:	3601      	adds	r6, #1
   175e6:	f89a 3000 	ldrb.w	r3, [sl]
   175ea:	429e      	cmp	r6, r3
   175ec:	da27      	bge.n	1763e <hci_num_completed_packets+0x1a6>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   175ee:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   175f2:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   175f6:	f8b3 b003 	ldrh.w	fp, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   175fa:	4628      	mov	r0, r5
   175fc:	f003 fdd2 	bl	1b1a4 <bt_conn_lookup_handle>
		if (!conn) {
   17600:	4604      	mov	r4, r0
   17602:	2800      	cmp	r0, #0
   17604:	d1ad      	bne.n	17562 <hci_num_completed_packets+0xca>
			BT_ERR("No connection for handle %u", handle);
   17606:	466c      	mov	r4, sp
   17608:	b088      	sub	sp, #32
   1760a:	466b      	mov	r3, sp
   1760c:	f113 0210 	adds.w	r2, r3, #16
   17610:	f43f af4a 	beq.w	174a8 <hci_num_completed_packets+0x10>
   17614:	210c      	movs	r1, #12
   17616:	b152      	cbz	r2, 1762e <hci_num_completed_packets+0x196>
   17618:	4608      	mov	r0, r1
   1761a:	2904      	cmp	r1, #4
   1761c:	dd03      	ble.n	17626 <hci_num_completed_packets+0x18e>
   1761e:	f8df c030 	ldr.w	ip, [pc, #48]	; 17650 <hci_num_completed_packets+0x1b8>
   17622:	f8c3 c014 	str.w	ip, [r3, #20]
   17626:	2808      	cmp	r0, #8
   17628:	f77f af41 	ble.w	174ae <hci_num_completed_packets+0x16>
   1762c:	619d      	str	r5, [r3, #24]
   1762e:	290b      	cmp	r1, #11
   17630:	f77f af62 	ble.w	174f8 <hci_num_completed_packets+0x60>
   17634:	210c      	movs	r1, #12
   17636:	e73c      	b.n	174b2 <hci_num_completed_packets+0x1a>
	list->tail = node;
   17638:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   1763a:	6223      	str	r3, [r4, #32]
}
   1763c:	e783      	b.n	17546 <hci_num_completed_packets+0xae>
}
   1763e:	3724      	adds	r7, #36	; 0x24
   17640:	46bd      	mov	sp, r7
   17642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17646:	bf00      	nop
   17648:	0002f820 	.word	0x0002f820
   1764c:	000315bc 	.word	0x000315bc
   17650:	000315a0 	.word	0x000315a0

00017654 <hci_cmd_done>:
{
   17654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17658:	b082      	sub	sp, #8
   1765a:	af00      	add	r7, sp, #0
   1765c:	4605      	mov	r5, r0
   1765e:	460e      	mov	r6, r1
   17660:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   17662:	7990      	ldrb	r0, [r2, #6]
   17664:	f007 fc64 	bl	1ef30 <net_buf_pool_get>
   17668:	4b75      	ldr	r3, [pc, #468]	; (17840 <hci_cmd_done+0x1ec>)
   1766a:	4283      	cmp	r3, r0
   1766c:	d050      	beq.n	17710 <hci_cmd_done+0xbc>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1766e:	f894 8006 	ldrb.w	r8, [r4, #6]
   17672:	4640      	mov	r0, r8
   17674:	f007 fc5c 	bl	1ef30 <net_buf_pool_get>
   17678:	466e      	mov	r6, sp
   1767a:	b08a      	sub	sp, #40	; 0x28
   1767c:	466b      	mov	r3, sp
   1767e:	f113 0210 	adds.w	r2, r3, #16
   17682:	d03f      	beq.n	17704 <hci_cmd_done+0xb0>
   17684:	2418      	movs	r4, #24
   17686:	b1a2      	cbz	r2, 176b2 <hci_cmd_done+0x5e>
   17688:	4621      	mov	r1, r4
   1768a:	2c04      	cmp	r4, #4
   1768c:	dd03      	ble.n	17696 <hci_cmd_done+0x42>
   1768e:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 17844 <hci_cmd_done+0x1f0>
   17692:	f8c3 c014 	str.w	ip, [r3, #20]
   17696:	2908      	cmp	r1, #8
   17698:	dd00      	ble.n	1769c <hci_cmd_done+0x48>
   1769a:	619d      	str	r5, [r3, #24]
   1769c:	290c      	cmp	r1, #12
   1769e:	dd01      	ble.n	176a4 <hci_cmd_done+0x50>
   176a0:	f8c3 801c 	str.w	r8, [r3, #28]
   176a4:	2910      	cmp	r1, #16
   176a6:	dd00      	ble.n	176aa <hci_cmd_done+0x56>
   176a8:	6218      	str	r0, [r3, #32]
   176aa:	2914      	cmp	r1, #20
   176ac:	dd01      	ble.n	176b2 <hci_cmd_done+0x5e>
   176ae:	4964      	ldr	r1, [pc, #400]	; (17840 <hci_cmd_done+0x1ec>)
   176b0:	6259      	str	r1, [r3, #36]	; 0x24
   176b2:	2c17      	cmp	r4, #23
   176b4:	dd29      	ble.n	1770a <hci_cmd_done+0xb6>
   176b6:	2418      	movs	r4, #24
   176b8:	b13a      	cbz	r2, 176ca <hci_cmd_done+0x76>
   176ba:	2106      	movs	r1, #6
   176bc:	7139      	strb	r1, [r7, #4]
   176be:	2100      	movs	r1, #0
   176c0:	7179      	strb	r1, [r7, #5]
   176c2:	71b9      	strb	r1, [r7, #6]
   176c4:	71f9      	strb	r1, [r7, #7]
   176c6:	6878      	ldr	r0, [r7, #4]
   176c8:	6118      	str	r0, [r3, #16]
   176ca:	2100      	movs	r1, #0
   176cc:	f36f 0100 	bfc	r1, #0, #1
   176d0:	f36f 0141 	bfc	r1, #1, #1
   176d4:	f36f 0182 	bfc	r1, #2, #1
   176d8:	f36f 01c5 	bfc	r1, #3, #3
   176dc:	2302      	movs	r3, #2
   176de:	f363 1188 	bfi	r1, r3, #6, #3
   176e2:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
   176e6:	f364 2152 	bfi	r1, r4, #9, #10
   176ea:	f36f 41de 	bfc	r1, #19, #12
   176ee:	f36f 71df 	bfc	r1, #31, #1
   176f2:	2300      	movs	r3, #0
   176f4:	4854      	ldr	r0, [pc, #336]	; (17848 <hci_cmd_done+0x1f4>)
   176f6:	f7fc fb01 	bl	13cfc <z_impl_z_log_msg_static_create>
   176fa:	46b5      	mov	sp, r6
}
   176fc:	3708      	adds	r7, #8
   176fe:	46bd      	mov	sp, r7
   17700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   17704:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   17708:	e7bd      	b.n	17686 <hci_cmd_done+0x32>
   1770a:	f06f 041b 	mvn.w	r4, #27
   1770e:	e7d3      	b.n	176b8 <hci_cmd_done+0x64>
	if (cmd(buf)->opcode != opcode) {
   17710:	4620      	mov	r0, r4
   17712:	f015 fda1 	bl	2d258 <net_buf_id>
   17716:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1771a:	4b4c      	ldr	r3, [pc, #304]	; (1784c <hci_cmd_done+0x1f8>)
   1771c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   17720:	885b      	ldrh	r3, [r3, #2]
   17722:	429d      	cmp	r5, r3
   17724:	d133      	bne.n	1778e <hci_cmd_done+0x13a>
	if (bt_dev.sent_cmd) {
   17726:	4b4a      	ldr	r3, [pc, #296]	; (17850 <hci_cmd_done+0x1fc>)
   17728:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1772c:	b128      	cbz	r0, 1773a <hci_cmd_done+0xe6>
		net_buf_unref(bt_dev.sent_cmd);
   1772e:	f007 fec9 	bl	1f4c4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17732:	4b47      	ldr	r3, [pc, #284]	; (17850 <hci_cmd_done+0x1fc>)
   17734:	2200      	movs	r2, #0
   17736:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1773a:	4620      	mov	r0, r4
   1773c:	f015 fd8c 	bl	2d258 <net_buf_id>
   17740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17744:	4b41      	ldr	r3, [pc, #260]	; (1784c <hci_cmd_done+0x1f8>)
   17746:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1774a:	685b      	ldr	r3, [r3, #4]
   1774c:	b10b      	cbz	r3, 17752 <hci_cmd_done+0xfe>
   1774e:	2e00      	cmp	r6, #0
   17750:	d067      	beq.n	17822 <hci_cmd_done+0x1ce>
	if (cmd(buf)->sync) {
   17752:	4620      	mov	r0, r4
   17754:	f015 fd80 	bl	2d258 <net_buf_id>
   17758:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1775c:	4b3b      	ldr	r3, [pc, #236]	; (1784c <hci_cmd_done+0x1f8>)
   1775e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   17762:	689b      	ldr	r3, [r3, #8]
   17764:	2b00      	cmp	r3, #0
   17766:	d0c9      	beq.n	176fc <hci_cmd_done+0xa8>
		cmd(buf)->status = status;
   17768:	4620      	mov	r0, r4
   1776a:	f015 fd75 	bl	2d258 <net_buf_id>
   1776e:	4d37      	ldr	r5, [pc, #220]	; (1784c <hci_cmd_done+0x1f8>)
   17770:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17774:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   17778:	4620      	mov	r0, r4
   1777a:	f015 fd6d 	bl	2d258 <net_buf_id>
   1777e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17782:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   17786:	68a8      	ldr	r0, [r5, #8]
   17788:	f00e f8a2 	bl	258d0 <z_impl_k_sem_give>
}
   1778c:	e7b6      	b.n	176fc <hci_cmd_done+0xa8>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1778e:	4620      	mov	r0, r4
   17790:	f015 fd62 	bl	2d258 <net_buf_id>
   17794:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17798:	4b2c      	ldr	r3, [pc, #176]	; (1784c <hci_cmd_done+0x1f8>)
   1779a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1779e:	885c      	ldrh	r4, [r3, #2]
   177a0:	466e      	mov	r6, sp
   177a2:	b088      	sub	sp, #32
   177a4:	466b      	mov	r3, sp
   177a6:	f113 0210 	adds.w	r2, r3, #16
   177aa:	d034      	beq.n	17816 <hci_cmd_done+0x1c2>
   177ac:	2110      	movs	r1, #16
   177ae:	b162      	cbz	r2, 177ca <hci_cmd_done+0x176>
   177b0:	4608      	mov	r0, r1
   177b2:	2904      	cmp	r1, #4
   177b4:	dd03      	ble.n	177be <hci_cmd_done+0x16a>
   177b6:	f8df c09c 	ldr.w	ip, [pc, #156]	; 17854 <hci_cmd_done+0x200>
   177ba:	f8c3 c014 	str.w	ip, [r3, #20]
   177be:	2808      	cmp	r0, #8
   177c0:	dd00      	ble.n	177c4 <hci_cmd_done+0x170>
   177c2:	619d      	str	r5, [r3, #24]
   177c4:	280c      	cmp	r0, #12
   177c6:	dd00      	ble.n	177ca <hci_cmd_done+0x176>
   177c8:	61dc      	str	r4, [r3, #28]
   177ca:	290f      	cmp	r1, #15
   177cc:	dd26      	ble.n	1781c <hci_cmd_done+0x1c8>
   177ce:	2410      	movs	r4, #16
   177d0:	b13a      	cbz	r2, 177e2 <hci_cmd_done+0x18e>
   177d2:	2104      	movs	r1, #4
   177d4:	7139      	strb	r1, [r7, #4]
   177d6:	2100      	movs	r1, #0
   177d8:	7179      	strb	r1, [r7, #5]
   177da:	71b9      	strb	r1, [r7, #6]
   177dc:	71f9      	strb	r1, [r7, #7]
   177de:	6878      	ldr	r0, [r7, #4]
   177e0:	6118      	str	r0, [r3, #16]
   177e2:	2100      	movs	r1, #0
   177e4:	f36f 0100 	bfc	r1, #0, #1
   177e8:	f36f 0141 	bfc	r1, #1, #1
   177ec:	f36f 0182 	bfc	r1, #2, #1
   177f0:	f36f 01c5 	bfc	r1, #3, #3
   177f4:	2302      	movs	r3, #2
   177f6:	f363 1188 	bfi	r1, r3, #6, #3
   177fa:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   177fe:	f363 2152 	bfi	r1, r3, #9, #10
   17802:	f36f 41de 	bfc	r1, #19, #12
   17806:	f36f 71df 	bfc	r1, #31, #1
   1780a:	2300      	movs	r3, #0
   1780c:	480e      	ldr	r0, [pc, #56]	; (17848 <hci_cmd_done+0x1f4>)
   1780e:	f7fc fa75 	bl	13cfc <z_impl_z_log_msg_static_create>
   17812:	46b5      	mov	sp, r6
		return;
   17814:	e772      	b.n	176fc <hci_cmd_done+0xa8>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   17816:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1781a:	e7c8      	b.n	177ae <hci_cmd_done+0x15a>
   1781c:	f06f 041b 	mvn.w	r4, #27
   17820:	e7d6      	b.n	177d0 <hci_cmd_done+0x17c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   17822:	4620      	mov	r0, r4
   17824:	f015 fd18 	bl	2d258 <net_buf_id>
   17828:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1782c:	4b07      	ldr	r3, [pc, #28]	; (1784c <hci_cmd_done+0x1f8>)
   1782e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   17832:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   17834:	7a1a      	ldrb	r2, [r3, #8]
   17836:	6859      	ldr	r1, [r3, #4]
   17838:	6818      	ldr	r0, [r3, #0]
   1783a:	f013 fda5 	bl	2b388 <atomic_set_bit_to>
   1783e:	e788      	b.n	17752 <hci_cmd_done+0xfe>
   17840:	200086e0 	.word	0x200086e0
   17844:	000315d4 	.word	0x000315d4
   17848:	0002f820 	.word	0x0002f820
   1784c:	200098a8 	.word	0x200098a8
   17850:	20008000 	.word	0x20008000
   17854:	0003160c 	.word	0x0003160c

00017858 <le_remote_feat_complete>:
{
   17858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1785a:	b083      	sub	sp, #12
   1785c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1785e:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17860:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17864:	4630      	mov	r0, r6
   17866:	f003 fc9d 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   1786a:	b190      	cbz	r0, 17892 <le_remote_feat_complete+0x3a>
   1786c:	4605      	mov	r5, r0
	if (!evt->status) {
   1786e:	7823      	ldrb	r3, [r4, #0]
   17870:	2b00      	cmp	r3, #0
   17872:	d04a      	beq.n	1790a <le_remote_feat_complete+0xb2>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   17874:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17876:	e8d3 1fef 	ldaex	r1, [r3]
   1787a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   1787e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   17882:	2a00      	cmp	r2, #0
   17884:	d1f7      	bne.n	17876 <le_remote_feat_complete+0x1e>
	bt_conn_unref(conn);
   17886:	4628      	mov	r0, r5
   17888:	f003 fc5a 	bl	1b140 <bt_conn_unref>
}
   1788c:	370c      	adds	r7, #12
   1788e:	46bd      	mov	sp, r7
   17890:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17892:	466d      	mov	r5, sp
   17894:	b088      	sub	sp, #32
   17896:	466b      	mov	r3, sp
   17898:	f113 0210 	adds.w	r2, r3, #16
   1789c:	d02f      	beq.n	178fe <le_remote_feat_complete+0xa6>
   1789e:	210c      	movs	r1, #12
   178a0:	b13a      	cbz	r2, 178b2 <le_remote_feat_complete+0x5a>
   178a2:	4608      	mov	r0, r1
   178a4:	2904      	cmp	r1, #4
   178a6:	dd01      	ble.n	178ac <le_remote_feat_complete+0x54>
   178a8:	4c1b      	ldr	r4, [pc, #108]	; (17918 <le_remote_feat_complete+0xc0>)
   178aa:	615c      	str	r4, [r3, #20]
   178ac:	2808      	cmp	r0, #8
   178ae:	dd00      	ble.n	178b2 <le_remote_feat_complete+0x5a>
   178b0:	619e      	str	r6, [r3, #24]
   178b2:	290b      	cmp	r1, #11
   178b4:	dd26      	ble.n	17904 <le_remote_feat_complete+0xac>
   178b6:	240c      	movs	r4, #12
   178b8:	b13a      	cbz	r2, 178ca <le_remote_feat_complete+0x72>
   178ba:	2103      	movs	r1, #3
   178bc:	7139      	strb	r1, [r7, #4]
   178be:	2100      	movs	r1, #0
   178c0:	7179      	strb	r1, [r7, #5]
   178c2:	71b9      	strb	r1, [r7, #6]
   178c4:	71f9      	strb	r1, [r7, #7]
   178c6:	6878      	ldr	r0, [r7, #4]
   178c8:	6118      	str	r0, [r3, #16]
   178ca:	2100      	movs	r1, #0
   178cc:	f36f 0100 	bfc	r1, #0, #1
   178d0:	f36f 0141 	bfc	r1, #1, #1
   178d4:	f36f 0182 	bfc	r1, #2, #1
   178d8:	f36f 01c5 	bfc	r1, #3, #3
   178dc:	2301      	movs	r3, #1
   178de:	f363 1188 	bfi	r1, r3, #6, #3
   178e2:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   178e6:	f364 2152 	bfi	r1, r4, #9, #10
   178ea:	f36f 41de 	bfc	r1, #19, #12
   178ee:	f36f 71df 	bfc	r1, #31, #1
   178f2:	2300      	movs	r3, #0
   178f4:	4809      	ldr	r0, [pc, #36]	; (1791c <le_remote_feat_complete+0xc4>)
   178f6:	f7fc fa01 	bl	13cfc <z_impl_z_log_msg_static_create>
   178fa:	46ad      	mov	sp, r5
		return;
   178fc:	e7c6      	b.n	1788c <le_remote_feat_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   178fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17902:	e7cd      	b.n	178a0 <le_remote_feat_complete+0x48>
   17904:	f06f 041b 	mvn.w	r4, #27
   17908:	e7d6      	b.n	178b8 <le_remote_feat_complete+0x60>
		memcpy(conn->le.features, evt->features,
   1790a:	2208      	movs	r2, #8
   1790c:	1ce1      	adds	r1, r4, #3
   1790e:	30b4      	adds	r0, #180	; 0xb4
   17910:	f013 fc12 	bl	2b138 <memcpy>
   17914:	e7ae      	b.n	17874 <le_remote_feat_complete+0x1c>
   17916:	bf00      	nop
   17918:	0003157c 	.word	0x0003157c
   1791c:	0002f820 	.word	0x0002f820

00017920 <hci_cmd_status>:
{
   17920:	b538      	push	{r3, r4, r5, lr}
   17922:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   17924:	2104      	movs	r1, #4
   17926:	3008      	adds	r0, #8
   17928:	f007 feaa 	bl	1f680 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1792c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1792e:	4622      	mov	r2, r4
   17930:	7801      	ldrb	r1, [r0, #0]
   17932:	8840      	ldrh	r0, [r0, #2]
   17934:	f7ff fe8e 	bl	17654 <hci_cmd_done>
	if (ncmd) {
   17938:	b905      	cbnz	r5, 1793c <hci_cmd_status+0x1c>
}
   1793a:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   1793c:	4801      	ldr	r0, [pc, #4]	; (17944 <hci_cmd_status+0x24>)
   1793e:	f00d ffc7 	bl	258d0 <z_impl_k_sem_give>
   17942:	e7fa      	b.n	1793a <hci_cmd_status+0x1a>
   17944:	20008118 	.word	0x20008118

00017948 <hci_cmd_complete>:
{
   17948:	b538      	push	{r3, r4, r5, lr}
   1794a:	4604      	mov	r4, r0
   1794c:	2103      	movs	r1, #3
   1794e:	3008      	adds	r0, #8
   17950:	f007 fe96 	bl	1f680 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   17954:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   17956:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   17958:	4622      	mov	r2, r4
   1795a:	7819      	ldrb	r1, [r3, #0]
   1795c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   17960:	f7ff fe78 	bl	17654 <hci_cmd_done>
	if (ncmd) {
   17964:	b905      	cbnz	r5, 17968 <hci_cmd_complete+0x20>
}
   17966:	bd38      	pop	{r3, r4, r5, pc}
   17968:	4801      	ldr	r0, [pc, #4]	; (17970 <hci_cmd_complete+0x28>)
   1796a:	f00d ffb1 	bl	258d0 <z_impl_k_sem_give>
   1796e:	e7fa      	b.n	17966 <hci_cmd_complete+0x1e>
   17970:	20008118 	.word	0x20008118

00017974 <hci_hardware_error>:
{
   17974:	b5b0      	push	{r4, r5, r7, lr}
   17976:	b082      	sub	sp, #8
   17978:	af00      	add	r7, sp, #0
   1797a:	2101      	movs	r1, #1
   1797c:	3008      	adds	r0, #8
   1797e:	f007 fe7f 	bl	1f680 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17982:	7804      	ldrb	r4, [r0, #0]
   17984:	b088      	sub	sp, #32
   17986:	466b      	mov	r3, sp
   17988:	f113 0210 	adds.w	r2, r3, #16
   1798c:	d031      	beq.n	179f2 <hci_hardware_error+0x7e>
   1798e:	210c      	movs	r1, #12
   17990:	b13a      	cbz	r2, 179a2 <hci_hardware_error+0x2e>
   17992:	4608      	mov	r0, r1
   17994:	2904      	cmp	r1, #4
   17996:	dd01      	ble.n	1799c <hci_hardware_error+0x28>
   17998:	4d19      	ldr	r5, [pc, #100]	; (17a00 <hci_hardware_error+0x8c>)
   1799a:	615d      	str	r5, [r3, #20]
   1799c:	2808      	cmp	r0, #8
   1799e:	dd00      	ble.n	179a2 <hci_hardware_error+0x2e>
   179a0:	619c      	str	r4, [r3, #24]
   179a2:	290b      	cmp	r1, #11
   179a4:	dd28      	ble.n	179f8 <hci_hardware_error+0x84>
   179a6:	f04f 0c0c 	mov.w	ip, #12
   179aa:	b13a      	cbz	r2, 179bc <hci_hardware_error+0x48>
   179ac:	2103      	movs	r1, #3
   179ae:	7139      	strb	r1, [r7, #4]
   179b0:	2100      	movs	r1, #0
   179b2:	7179      	strb	r1, [r7, #5]
   179b4:	71b9      	strb	r1, [r7, #6]
   179b6:	71f9      	strb	r1, [r7, #7]
   179b8:	6878      	ldr	r0, [r7, #4]
   179ba:	6118      	str	r0, [r3, #16]
   179bc:	2100      	movs	r1, #0
   179be:	f36f 0100 	bfc	r1, #0, #1
   179c2:	f36f 0141 	bfc	r1, #1, #1
   179c6:	f36f 0182 	bfc	r1, #2, #1
   179ca:	f36f 01c5 	bfc	r1, #3, #3
   179ce:	2301      	movs	r3, #1
   179d0:	f363 1188 	bfi	r1, r3, #6, #3
   179d4:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   179d8:	f36c 2152 	bfi	r1, ip, #9, #10
   179dc:	f36f 41de 	bfc	r1, #19, #12
   179e0:	f36f 71df 	bfc	r1, #31, #1
   179e4:	2300      	movs	r3, #0
   179e6:	4807      	ldr	r0, [pc, #28]	; (17a04 <hci_hardware_error+0x90>)
   179e8:	f7fc f988 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   179ec:	3708      	adds	r7, #8
   179ee:	46bd      	mov	sp, r7
   179f0:	bdb0      	pop	{r4, r5, r7, pc}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   179f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   179f6:	e7cb      	b.n	17990 <hci_hardware_error+0x1c>
   179f8:	f06f 0c1b 	mvn.w	ip, #27
   179fc:	e7d5      	b.n	179aa <hci_hardware_error+0x36>
   179fe:	bf00      	nop
   17a00:	00031640 	.word	0x00031640
   17a04:	0002f820 	.word	0x0002f820

00017a08 <handle_event>:
{
   17a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a0c:	b082      	sub	sp, #8
   17a0e:	af00      	add	r7, sp, #0
   17a10:	4605      	mov	r5, r0
   17a12:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   17a14:	f7ff fb7a 	bl	1710c <handle_event_common>
	if (err == -EOPNOTSUPP) {
   17a18:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   17a1c:	d003      	beq.n	17a26 <handle_event+0x1e>
}
   17a1e:	3708      	adds	r7, #8
   17a20:	46bd      	mov	sp, r7
   17a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   17a26:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   17a2a:	4641      	mov	r1, r8
   17a2c:	68a0      	ldr	r0, [r4, #8]
   17a2e:	f7ff f965 	bl	16cfc <bt_hex>
   17a32:	466e      	mov	r6, sp
   17a34:	2302      	movs	r3, #2
   17a36:	713b      	strb	r3, [r7, #4]
   17a38:	2304      	movs	r3, #4
   17a3a:	717b      	strb	r3, [r7, #5]
   17a3c:	b08a      	sub	sp, #40	; 0x28
   17a3e:	466c      	mov	r4, sp
   17a40:	f114 0210 	adds.w	r2, r4, #16
   17a44:	d01c      	beq.n	17a80 <handle_event+0x78>
   17a46:	f04f 0c16 	mov.w	ip, #22
   17a4a:	b162      	cbz	r2, 17a66 <handle_event+0x5e>
   17a4c:	4663      	mov	r3, ip
   17a4e:	f1bc 0f04 	cmp.w	ip, #4
   17a52:	dd01      	ble.n	17a58 <handle_event+0x50>
   17a54:	4926      	ldr	r1, [pc, #152]	; (17af0 <handle_event+0xe8>)
   17a56:	6161      	str	r1, [r4, #20]
   17a58:	2b08      	cmp	r3, #8
   17a5a:	dd00      	ble.n	17a5e <handle_event+0x56>
   17a5c:	61a5      	str	r5, [r4, #24]
   17a5e:	2b0c      	cmp	r3, #12
   17a60:	dd01      	ble.n	17a66 <handle_event+0x5e>
   17a62:	f8c4 801c 	str.w	r8, [r4, #28]
   17a66:	2302      	movs	r3, #2
   17a68:	703b      	strb	r3, [r7, #0]
   17a6a:	2304      	movs	r3, #4
   17a6c:	707b      	strb	r3, [r7, #1]
   17a6e:	b1a2      	cbz	r2, 17a9a <handle_event+0x92>
   17a70:	f1bc 0f10 	cmp.w	ip, #16
   17a74:	dd00      	ble.n	17a78 <handle_event+0x70>
   17a76:	6220      	str	r0, [r4, #32]
   17a78:	f104 0324 	add.w	r3, r4, #36	; 0x24
   17a7c:	2100      	movs	r1, #0
   17a7e:	e00a      	b.n	17a96 <handle_event+0x8e>
   17a80:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   17a84:	e7e1      	b.n	17a4a <handle_event+0x42>
   17a86:	f101 0008 	add.w	r0, r1, #8
   17a8a:	4438      	add	r0, r7
   17a8c:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   17a90:	f803 0b01 	strb.w	r0, [r3], #1
   17a94:	3101      	adds	r1, #1
   17a96:	2901      	cmp	r1, #1
   17a98:	d9f5      	bls.n	17a86 <handle_event+0x7e>
   17a9a:	f1bc 0f15 	cmp.w	ip, #21
   17a9e:	dd24      	ble.n	17aea <handle_event+0xe2>
   17aa0:	2316      	movs	r3, #22
   17aa2:	b142      	cbz	r2, 17ab6 <handle_event+0xae>
   17aa4:	2105      	movs	r1, #5
   17aa6:	7139      	strb	r1, [r7, #4]
   17aa8:	2100      	movs	r1, #0
   17aaa:	7179      	strb	r1, [r7, #5]
   17aac:	71b9      	strb	r1, [r7, #6]
   17aae:	2101      	movs	r1, #1
   17ab0:	71f9      	strb	r1, [r7, #7]
   17ab2:	6878      	ldr	r0, [r7, #4]
   17ab4:	6120      	str	r0, [r4, #16]
   17ab6:	2100      	movs	r1, #0
   17ab8:	f36f 0100 	bfc	r1, #0, #1
   17abc:	f36f 0141 	bfc	r1, #1, #1
   17ac0:	f36f 0182 	bfc	r1, #2, #1
   17ac4:	f36f 01c5 	bfc	r1, #3, #3
   17ac8:	2002      	movs	r0, #2
   17aca:	f360 1188 	bfi	r1, r0, #6, #3
   17ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17ad2:	f363 2152 	bfi	r1, r3, #9, #10
   17ad6:	f36f 41de 	bfc	r1, #19, #12
   17ada:	f36f 71df 	bfc	r1, #31, #1
   17ade:	2300      	movs	r3, #0
   17ae0:	4804      	ldr	r0, [pc, #16]	; (17af4 <handle_event+0xec>)
   17ae2:	f7fc f90b 	bl	13cfc <z_impl_z_log_msg_static_create>
   17ae6:	46b5      	mov	sp, r6
}
   17ae8:	e799      	b.n	17a1e <handle_event+0x16>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   17aea:	f06f 031b 	mvn.w	r3, #27
   17aee:	e7d8      	b.n	17aa2 <handle_event+0x9a>
   17af0:	00031664 	.word	0x00031664
   17af4:	0002f820 	.word	0x0002f820

00017af8 <hci_event>:
{
   17af8:	b538      	push	{r3, r4, r5, lr}
   17afa:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17afc:	8983      	ldrh	r3, [r0, #12]
   17afe:	2b01      	cmp	r3, #1
   17b00:	d915      	bls.n	17b2e <hci_event+0x36>
   17b02:	2102      	movs	r1, #2
   17b04:	f104 0008 	add.w	r0, r4, #8
   17b08:	f007 fdba 	bl	1f680 <net_buf_simple_pull_mem>
   17b0c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17b0e:	7800      	ldrb	r0, [r0, #0]
   17b10:	f013 fbf6 	bl	2b300 <bt_hci_evt_get_flags>
   17b14:	f010 0f02 	tst.w	r0, #2
   17b18:	d017      	beq.n	17b4a <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   17b1a:	2304      	movs	r3, #4
   17b1c:	4a12      	ldr	r2, [pc, #72]	; (17b68 <hci_event+0x70>)
   17b1e:	4621      	mov	r1, r4
   17b20:	7828      	ldrb	r0, [r5, #0]
   17b22:	f7ff ff71 	bl	17a08 <handle_event>
	net_buf_unref(buf);
   17b26:	4620      	mov	r0, r4
   17b28:	f007 fccc 	bl	1f4c4 <net_buf_unref>
}
   17b2c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17b2e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   17b32:	4a0e      	ldr	r2, [pc, #56]	; (17b6c <hci_event+0x74>)
   17b34:	490e      	ldr	r1, [pc, #56]	; (17b70 <hci_event+0x78>)
   17b36:	480f      	ldr	r0, [pc, #60]	; (17b74 <hci_event+0x7c>)
   17b38:	f011 ffd7 	bl	29aea <assert_print>
   17b3c:	4040      	eors	r0, r0
   17b3e:	f380 8811 	msr	BASEPRI, r0
   17b42:	f04f 0003 	mov.w	r0, #3
   17b46:	df02      	svc	2
   17b48:	e7db      	b.n	17b02 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17b4a:	f640 1364 	movw	r3, #2404	; 0x964
   17b4e:	4a07      	ldr	r2, [pc, #28]	; (17b6c <hci_event+0x74>)
   17b50:	4909      	ldr	r1, [pc, #36]	; (17b78 <hci_event+0x80>)
   17b52:	4808      	ldr	r0, [pc, #32]	; (17b74 <hci_event+0x7c>)
   17b54:	f011 ffc9 	bl	29aea <assert_print>
   17b58:	4040      	eors	r0, r0
   17b5a:	f380 8811 	msr	BASEPRI, r0
   17b5e:	f04f 0003 	mov.w	r0, #3
   17b62:	df02      	svc	2
   17b64:	e7d9      	b.n	17b1a <hci_event+0x22>
   17b66:	bf00      	nop
   17b68:	00031b00 	.word	0x00031b00
   17b6c:	00031688 	.word	0x00031688
   17b70:	000316bc 	.word	0x000316bc
   17b74:	0002fdac 	.word	0x0002fdac
   17b78:	000316d8 	.word	0x000316d8

00017b7c <hci_le_meta_event>:
{
   17b7c:	b510      	push	{r4, lr}
   17b7e:	4604      	mov	r4, r0
   17b80:	2101      	movs	r1, #1
   17b82:	3008      	adds	r0, #8
   17b84:	f007 fd7c 	bl	1f680 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   17b88:	2307      	movs	r3, #7
   17b8a:	4a03      	ldr	r2, [pc, #12]	; (17b98 <hci_le_meta_event+0x1c>)
   17b8c:	4621      	mov	r1, r4
   17b8e:	7800      	ldrb	r0, [r0, #0]
   17b90:	f7ff ff3a 	bl	17a08 <handle_event>
}
   17b94:	bd10      	pop	{r4, pc}
   17b96:	bf00      	nop
   17b98:	00031b20 	.word	0x00031b20

00017b9c <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   17b9c:	b5b0      	push	{r4, r5, r7, lr}
   17b9e:	b082      	sub	sp, #8
   17ba0:	af00      	add	r7, sp, #0
   17ba2:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   17ba4:	4824      	ldr	r0, [pc, #144]	; (17c38 <rx_queue_put+0x9c>)
   17ba6:	f007 fb51 	bl	1f24c <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17baa:	4924      	ldr	r1, [pc, #144]	; (17c3c <rx_queue_put+0xa0>)
   17bac:	4824      	ldr	r0, [pc, #144]	; (17c40 <rx_queue_put+0xa4>)
   17bae:	f017 fa63 	bl	2f078 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   17bb2:	2800      	cmp	r0, #0
   17bb4:	db02      	blt.n	17bbc <rx_queue_put+0x20>
		BT_ERR("Could not submit rx_work: %d", err);
	}
}
   17bb6:	3708      	adds	r7, #8
   17bb8:	46bd      	mov	sp, r7
   17bba:	bdb0      	pop	{r4, r5, r7, pc}
		BT_ERR("Could not submit rx_work: %d", err);
   17bbc:	466c      	mov	r4, sp
   17bbe:	b088      	sub	sp, #32
   17bc0:	466b      	mov	r3, sp
   17bc2:	f113 0210 	adds.w	r2, r3, #16
   17bc6:	d031      	beq.n	17c2c <rx_queue_put+0x90>
   17bc8:	210c      	movs	r1, #12
   17bca:	b142      	cbz	r2, 17bde <rx_queue_put+0x42>
   17bcc:	468c      	mov	ip, r1
   17bce:	2904      	cmp	r1, #4
   17bd0:	dd01      	ble.n	17bd6 <rx_queue_put+0x3a>
   17bd2:	4d1c      	ldr	r5, [pc, #112]	; (17c44 <rx_queue_put+0xa8>)
   17bd4:	615d      	str	r5, [r3, #20]
   17bd6:	f1bc 0f08 	cmp.w	ip, #8
   17bda:	dd00      	ble.n	17bde <rx_queue_put+0x42>
   17bdc:	6198      	str	r0, [r3, #24]
   17bde:	290b      	cmp	r1, #11
   17be0:	dd27      	ble.n	17c32 <rx_queue_put+0x96>
   17be2:	f04f 0c0c 	mov.w	ip, #12
   17be6:	b13a      	cbz	r2, 17bf8 <rx_queue_put+0x5c>
   17be8:	2103      	movs	r1, #3
   17bea:	7139      	strb	r1, [r7, #4]
   17bec:	2100      	movs	r1, #0
   17bee:	7179      	strb	r1, [r7, #5]
   17bf0:	71b9      	strb	r1, [r7, #6]
   17bf2:	71f9      	strb	r1, [r7, #7]
   17bf4:	6878      	ldr	r0, [r7, #4]
   17bf6:	6118      	str	r0, [r3, #16]
   17bf8:	2100      	movs	r1, #0
   17bfa:	f36f 0100 	bfc	r1, #0, #1
   17bfe:	f36f 0141 	bfc	r1, #1, #1
   17c02:	f36f 0182 	bfc	r1, #2, #1
   17c06:	f36f 01c5 	bfc	r1, #3, #3
   17c0a:	2301      	movs	r3, #1
   17c0c:	f363 1188 	bfi	r1, r3, #6, #3
   17c10:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   17c14:	f36c 2152 	bfi	r1, ip, #9, #10
   17c18:	f36f 41de 	bfc	r1, #19, #12
   17c1c:	f36f 71df 	bfc	r1, #31, #1
   17c20:	2300      	movs	r3, #0
   17c22:	4809      	ldr	r0, [pc, #36]	; (17c48 <rx_queue_put+0xac>)
   17c24:	f7fc f86a 	bl	13cfc <z_impl_z_log_msg_static_create>
   17c28:	46a5      	mov	sp, r4
}
   17c2a:	e7c4      	b.n	17bb6 <rx_queue_put+0x1a>
		BT_ERR("Could not submit rx_work: %d", err);
   17c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17c30:	e7cb      	b.n	17bca <rx_queue_put+0x2e>
   17c32:	f06f 0c1b 	mvn.w	ip, #27
   17c36:	e7d6      	b.n	17be6 <rx_queue_put+0x4a>
   17c38:	20008134 	.word	0x20008134
   17c3c:	20008250 	.word	0x20008250
   17c40:	20009160 	.word	0x20009160
   17c44:	00031708 	.word	0x00031708
   17c48:	0002f820 	.word	0x0002f820

00017c4c <hci_acl>:
{
   17c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c4e:	b083      	sub	sp, #12
   17c50:	af00      	add	r7, sp, #0
   17c52:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17c54:	8983      	ldrh	r3, [r0, #12]
   17c56:	2b03      	cmp	r3, #3
   17c58:	d952      	bls.n	17d00 <hci_acl+0xb4>
   17c5a:	2104      	movs	r1, #4
   17c5c:	f104 0008 	add.w	r0, r4, #8
   17c60:	f007 fd0e 	bl	1f680 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   17c64:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   17c66:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   17c68:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   17c6a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   17c6e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17c70:	23ff      	movs	r3, #255	; 0xff
   17c72:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   17c74:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   17c78:	45b4      	cmp	ip, r6
   17c7a:	d055      	beq.n	17d28 <hci_acl+0xdc>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17c7c:	466d      	mov	r5, sp
   17c7e:	b088      	sub	sp, #32
   17c80:	466b      	mov	r3, sp
   17c82:	f113 0210 	adds.w	r2, r3, #16
   17c86:	d049      	beq.n	17d1c <hci_acl+0xd0>
   17c88:	2110      	movs	r1, #16
   17c8a:	b16a      	cbz	r2, 17ca8 <hci_acl+0x5c>
   17c8c:	4608      	mov	r0, r1
   17c8e:	2904      	cmp	r1, #4
   17c90:	dd03      	ble.n	17c9a <hci_acl+0x4e>
   17c92:	f8df e138 	ldr.w	lr, [pc, #312]	; 17dcc <hci_acl+0x180>
   17c96:	f8c3 e014 	str.w	lr, [r3, #20]
   17c9a:	2808      	cmp	r0, #8
   17c9c:	dd01      	ble.n	17ca2 <hci_acl+0x56>
   17c9e:	f8c3 c018 	str.w	ip, [r3, #24]
   17ca2:	280c      	cmp	r0, #12
   17ca4:	dd00      	ble.n	17ca8 <hci_acl+0x5c>
   17ca6:	61de      	str	r6, [r3, #28]
   17ca8:	290f      	cmp	r1, #15
   17caa:	dd3a      	ble.n	17d22 <hci_acl+0xd6>
   17cac:	f04f 0c10 	mov.w	ip, #16
   17cb0:	b13a      	cbz	r2, 17cc2 <hci_acl+0x76>
   17cb2:	2104      	movs	r1, #4
   17cb4:	7139      	strb	r1, [r7, #4]
   17cb6:	2100      	movs	r1, #0
   17cb8:	7179      	strb	r1, [r7, #5]
   17cba:	71b9      	strb	r1, [r7, #6]
   17cbc:	71f9      	strb	r1, [r7, #7]
   17cbe:	6878      	ldr	r0, [r7, #4]
   17cc0:	6118      	str	r0, [r3, #16]
   17cc2:	2100      	movs	r1, #0
   17cc4:	f36f 0100 	bfc	r1, #0, #1
   17cc8:	f36f 0141 	bfc	r1, #1, #1
   17ccc:	f36f 0182 	bfc	r1, #2, #1
   17cd0:	f36f 01c5 	bfc	r1, #3, #3
   17cd4:	2301      	movs	r3, #1
   17cd6:	f363 1188 	bfi	r1, r3, #6, #3
   17cda:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   17cde:	f36c 2152 	bfi	r1, ip, #9, #10
   17ce2:	f36f 41de 	bfc	r1, #19, #12
   17ce6:	f36f 71df 	bfc	r1, #31, #1
   17cea:	2300      	movs	r3, #0
   17cec:	4838      	ldr	r0, [pc, #224]	; (17dd0 <hci_acl+0x184>)
   17cee:	f7fc f805 	bl	13cfc <z_impl_z_log_msg_static_create>
   17cf2:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17cf4:	4620      	mov	r0, r4
   17cf6:	f007 fbe5 	bl	1f4c4 <net_buf_unref>
}
   17cfa:	370c      	adds	r7, #12
   17cfc:	46bd      	mov	sp, r7
   17cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17d00:	f240 13ed 	movw	r3, #493	; 0x1ed
   17d04:	4a33      	ldr	r2, [pc, #204]	; (17dd4 <hci_acl+0x188>)
   17d06:	4934      	ldr	r1, [pc, #208]	; (17dd8 <hci_acl+0x18c>)
   17d08:	4834      	ldr	r0, [pc, #208]	; (17ddc <hci_acl+0x190>)
   17d0a:	f011 feee 	bl	29aea <assert_print>
   17d0e:	4040      	eors	r0, r0
   17d10:	f380 8811 	msr	BASEPRI, r0
   17d14:	f04f 0003 	mov.w	r0, #3
   17d18:	df02      	svc	2
   17d1a:	e79e      	b.n	17c5a <hci_acl+0xe>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17d20:	e7b3      	b.n	17c8a <hci_acl+0x3e>
   17d22:	f06f 0c1b 	mvn.w	ip, #27
   17d26:	e7c3      	b.n	17cb0 <hci_acl+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17d28:	f003 fa3c 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   17d2c:	4606      	mov	r6, r0
   17d2e:	b158      	cbz	r0, 17d48 <hci_acl+0xfc>
	acl(buf)->index = bt_conn_index(conn);
   17d30:	f003 fbbc 	bl	1b4ac <bt_conn_index>
   17d34:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   17d36:	462a      	mov	r2, r5
   17d38:	4621      	mov	r1, r4
   17d3a:	4630      	mov	r0, r6
   17d3c:	f013 ff32 	bl	2bba4 <bt_conn_recv>
	bt_conn_unref(conn);
   17d40:	4630      	mov	r0, r6
   17d42:	f003 f9fd 	bl	1b140 <bt_conn_unref>
   17d46:	e7d8      	b.n	17cfa <hci_acl+0xae>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17d48:	8ae5      	ldrh	r5, [r4, #22]
   17d4a:	466e      	mov	r6, sp
   17d4c:	b088      	sub	sp, #32
   17d4e:	466b      	mov	r3, sp
   17d50:	f113 0210 	adds.w	r2, r3, #16
   17d54:	d034      	beq.n	17dc0 <hci_acl+0x174>
   17d56:	210c      	movs	r1, #12
   17d58:	b14a      	cbz	r2, 17d6e <hci_acl+0x122>
   17d5a:	4608      	mov	r0, r1
   17d5c:	2904      	cmp	r1, #4
   17d5e:	dd03      	ble.n	17d68 <hci_acl+0x11c>
   17d60:	f8df c07c 	ldr.w	ip, [pc, #124]	; 17de0 <hci_acl+0x194>
   17d64:	f8c3 c014 	str.w	ip, [r3, #20]
   17d68:	2808      	cmp	r0, #8
   17d6a:	dd00      	ble.n	17d6e <hci_acl+0x122>
   17d6c:	619d      	str	r5, [r3, #24]
   17d6e:	290b      	cmp	r1, #11
   17d70:	dd29      	ble.n	17dc6 <hci_acl+0x17a>
   17d72:	250c      	movs	r5, #12
   17d74:	b13a      	cbz	r2, 17d86 <hci_acl+0x13a>
   17d76:	2103      	movs	r1, #3
   17d78:	7139      	strb	r1, [r7, #4]
   17d7a:	2100      	movs	r1, #0
   17d7c:	7179      	strb	r1, [r7, #5]
   17d7e:	71b9      	strb	r1, [r7, #6]
   17d80:	71f9      	strb	r1, [r7, #7]
   17d82:	6878      	ldr	r0, [r7, #4]
   17d84:	6118      	str	r0, [r3, #16]
   17d86:	2100      	movs	r1, #0
   17d88:	f36f 0100 	bfc	r1, #0, #1
   17d8c:	f36f 0141 	bfc	r1, #1, #1
   17d90:	f36f 0182 	bfc	r1, #2, #1
   17d94:	f36f 01c5 	bfc	r1, #3, #3
   17d98:	2301      	movs	r3, #1
   17d9a:	f363 1188 	bfi	r1, r3, #6, #3
   17d9e:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   17da2:	f365 2152 	bfi	r1, r5, #9, #10
   17da6:	f36f 41de 	bfc	r1, #19, #12
   17daa:	f36f 71df 	bfc	r1, #31, #1
   17dae:	2300      	movs	r3, #0
   17db0:	4807      	ldr	r0, [pc, #28]	; (17dd0 <hci_acl+0x184>)
   17db2:	f7fb ffa3 	bl	13cfc <z_impl_z_log_msg_static_create>
   17db6:	46b5      	mov	sp, r6
		net_buf_unref(buf);
   17db8:	4620      	mov	r0, r4
   17dba:	f007 fb83 	bl	1f4c4 <net_buf_unref>
		return;
   17dbe:	e79c      	b.n	17cfa <hci_acl+0xae>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17dc4:	e7c8      	b.n	17d58 <hci_acl+0x10c>
   17dc6:	f06f 051b 	mvn.w	r5, #27
   17dca:	e7d3      	b.n	17d74 <hci_acl+0x128>
   17dcc:	00031728 	.word	0x00031728
   17dd0:	0002f820 	.word	0x0002f820
   17dd4:	00031688 	.word	0x00031688
   17dd8:	000316bc 	.word	0x000316bc
   17ddc:	0002fdac 	.word	0x0002fdac
   17de0:	0003174c 	.word	0x0003174c

00017de4 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   17de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17de6:	b083      	sub	sp, #12
   17de8:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   17dea:	484c      	ldr	r0, [pc, #304]	; (17f1c <rx_work_handler+0x138>)
   17dec:	f007 faac 	bl	1f348 <net_buf_slist_get>
	if (!buf) {
   17df0:	2800      	cmp	r0, #0
   17df2:	d04e      	beq.n	17e92 <rx_work_handler+0xae>
   17df4:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17df6:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   17df8:	2b01      	cmp	r3, #1
   17dfa:	d004      	beq.n	17e06 <rx_work_handler+0x22>
   17dfc:	2b03      	cmp	r3, #3
   17dfe:	d105      	bne.n	17e0c <rx_work_handler+0x28>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   17e00:	f7ff ff24 	bl	17c4c <hci_acl>
		break;
   17e04:	e03b      	b.n	17e7e <rx_work_handler+0x9a>
	case BT_BUF_ISO_IN:
		hci_iso(buf);
		break;
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
   17e06:	f7ff fe77 	bl	17af8 <hci_event>
		break;
   17e0a:	e038      	b.n	17e7e <rx_work_handler+0x9a>
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17e0c:	466d      	mov	r5, sp
   17e0e:	b088      	sub	sp, #32
   17e10:	4669      	mov	r1, sp
   17e12:	f111 0210 	adds.w	r2, r1, #16
   17e16:	d03f      	beq.n	17e98 <rx_work_handler+0xb4>
   17e18:	200c      	movs	r0, #12
   17e1a:	b142      	cbz	r2, 17e2e <rx_work_handler+0x4a>
   17e1c:	4684      	mov	ip, r0
   17e1e:	2804      	cmp	r0, #4
   17e20:	dd01      	ble.n	17e26 <rx_work_handler+0x42>
   17e22:	4e3f      	ldr	r6, [pc, #252]	; (17f20 <rx_work_handler+0x13c>)
   17e24:	614e      	str	r6, [r1, #20]
   17e26:	f1bc 0f08 	cmp.w	ip, #8
   17e2a:	dd00      	ble.n	17e2e <rx_work_handler+0x4a>
   17e2c:	618b      	str	r3, [r1, #24]
   17e2e:	280b      	cmp	r0, #11
   17e30:	dd35      	ble.n	17e9e <rx_work_handler+0xba>
   17e32:	230c      	movs	r3, #12
   17e34:	b13a      	cbz	r2, 17e46 <rx_work_handler+0x62>
   17e36:	2003      	movs	r0, #3
   17e38:	7138      	strb	r0, [r7, #4]
   17e3a:	2000      	movs	r0, #0
   17e3c:	7178      	strb	r0, [r7, #5]
   17e3e:	71b8      	strb	r0, [r7, #6]
   17e40:	71f8      	strb	r0, [r7, #7]
   17e42:	6878      	ldr	r0, [r7, #4]
   17e44:	6108      	str	r0, [r1, #16]
   17e46:	2100      	movs	r1, #0
   17e48:	f36f 0100 	bfc	r1, #0, #1
   17e4c:	f36f 0141 	bfc	r1, #1, #1
   17e50:	f36f 0182 	bfc	r1, #2, #1
   17e54:	f36f 01c5 	bfc	r1, #3, #3
   17e58:	2001      	movs	r0, #1
   17e5a:	f360 1188 	bfi	r1, r0, #6, #3
   17e5e:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   17e62:	f363 2152 	bfi	r1, r3, #9, #10
   17e66:	f36f 41de 	bfc	r1, #19, #12
   17e6a:	f36f 71df 	bfc	r1, #31, #1
   17e6e:	2300      	movs	r3, #0
   17e70:	482c      	ldr	r0, [pc, #176]	; (17f24 <rx_work_handler+0x140>)
   17e72:	f7fb ff43 	bl	13cfc <z_impl_z_log_msg_static_create>
   17e76:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17e78:	4620      	mov	r0, r4
   17e7a:	f007 fb23 	bl	1f4c4 <net_buf_unref>
	return list->head;
   17e7e:	4b2a      	ldr	r3, [pc, #168]	; (17f28 <rx_work_handler+0x144>)
   17e80:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   17e84:	b12b      	cbz	r3, 17e92 <rx_work_handler+0xae>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17e86:	4929      	ldr	r1, [pc, #164]	; (17f2c <rx_work_handler+0x148>)
   17e88:	4829      	ldr	r0, [pc, #164]	; (17f30 <rx_work_handler+0x14c>)
   17e8a:	f017 f8f5 	bl	2f078 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   17e8e:	2800      	cmp	r0, #0
   17e90:	db08      	blt.n	17ea4 <rx_work_handler+0xc0>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   17e92:	370c      	adds	r7, #12
   17e94:	46bd      	mov	sp, r7
   17e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17e98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17e9c:	e7bd      	b.n	17e1a <rx_work_handler+0x36>
   17e9e:	f06f 031b 	mvn.w	r3, #27
   17ea2:	e7c7      	b.n	17e34 <rx_work_handler+0x50>
			BT_ERR("Could not submit rx_work: %d", err);
   17ea4:	466d      	mov	r5, sp
   17ea6:	b088      	sub	sp, #32
   17ea8:	466b      	mov	r3, sp
   17eaa:	f113 0210 	adds.w	r2, r3, #16
   17eae:	d02f      	beq.n	17f10 <rx_work_handler+0x12c>
   17eb0:	210c      	movs	r1, #12
   17eb2:	b13a      	cbz	r2, 17ec4 <rx_work_handler+0xe0>
   17eb4:	460c      	mov	r4, r1
   17eb6:	2904      	cmp	r1, #4
   17eb8:	dd01      	ble.n	17ebe <rx_work_handler+0xda>
   17eba:	4e1e      	ldr	r6, [pc, #120]	; (17f34 <rx_work_handler+0x150>)
   17ebc:	615e      	str	r6, [r3, #20]
   17ebe:	2c08      	cmp	r4, #8
   17ec0:	dd00      	ble.n	17ec4 <rx_work_handler+0xe0>
   17ec2:	6198      	str	r0, [r3, #24]
   17ec4:	290b      	cmp	r1, #11
   17ec6:	dd26      	ble.n	17f16 <rx_work_handler+0x132>
   17ec8:	240c      	movs	r4, #12
   17eca:	b13a      	cbz	r2, 17edc <rx_work_handler+0xf8>
   17ecc:	2103      	movs	r1, #3
   17ece:	7139      	strb	r1, [r7, #4]
   17ed0:	2100      	movs	r1, #0
   17ed2:	7179      	strb	r1, [r7, #5]
   17ed4:	71b9      	strb	r1, [r7, #6]
   17ed6:	71f9      	strb	r1, [r7, #7]
   17ed8:	6878      	ldr	r0, [r7, #4]
   17eda:	6118      	str	r0, [r3, #16]
   17edc:	2100      	movs	r1, #0
   17ede:	f36f 0100 	bfc	r1, #0, #1
   17ee2:	f36f 0141 	bfc	r1, #1, #1
   17ee6:	f36f 0182 	bfc	r1, #2, #1
   17eea:	f36f 01c5 	bfc	r1, #3, #3
   17eee:	2301      	movs	r3, #1
   17ef0:	f363 1188 	bfi	r1, r3, #6, #3
   17ef4:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   17ef8:	f363 2152 	bfi	r1, r3, #9, #10
   17efc:	f36f 41de 	bfc	r1, #19, #12
   17f00:	f36f 71df 	bfc	r1, #31, #1
   17f04:	2300      	movs	r3, #0
   17f06:	4807      	ldr	r0, [pc, #28]	; (17f24 <rx_work_handler+0x140>)
   17f08:	f7fb fef8 	bl	13cfc <z_impl_z_log_msg_static_create>
   17f0c:	46ad      	mov	sp, r5
   17f0e:	e7c0      	b.n	17e92 <rx_work_handler+0xae>
   17f10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17f14:	e7cd      	b.n	17eb2 <rx_work_handler+0xce>
   17f16:	f06f 041b 	mvn.w	r4, #27
   17f1a:	e7d6      	b.n	17eca <rx_work_handler+0xe6>
   17f1c:	20008134 	.word	0x20008134
   17f20:	00031770 	.word	0x00031770
   17f24:	0002f820 	.word	0x0002f820
   17f28:	20008000 	.word	0x20008000
   17f2c:	20008250 	.word	0x20008250
   17f30:	20009160 	.word	0x20009160
   17f34:	00031708 	.word	0x00031708

00017f38 <le_conn_update_complete>:
{
   17f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f3a:	b083      	sub	sp, #12
   17f3c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17f3e:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   17f40:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17f44:	4630      	mov	r0, r6
   17f46:	f003 f92d 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   17f4a:	b158      	cbz	r0, 17f64 <le_conn_update_complete+0x2c>
   17f4c:	4605      	mov	r5, r0
	if (!evt->status) {
   17f4e:	7823      	ldrb	r3, [r4, #0]
   17f50:	2b00      	cmp	r3, #0
   17f52:	d043      	beq.n	17fdc <le_conn_update_complete+0xa4>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17f54:	2b1a      	cmp	r3, #26
   17f56:	d050      	beq.n	17ffa <le_conn_update_complete+0xc2>
	bt_conn_unref(conn);
   17f58:	4628      	mov	r0, r5
   17f5a:	f003 f8f1 	bl	1b140 <bt_conn_unref>
}
   17f5e:	370c      	adds	r7, #12
   17f60:	46bd      	mov	sp, r7
   17f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17f64:	466d      	mov	r5, sp
   17f66:	b088      	sub	sp, #32
   17f68:	466b      	mov	r3, sp
   17f6a:	f113 0210 	adds.w	r2, r3, #16
   17f6e:	d02f      	beq.n	17fd0 <le_conn_update_complete+0x98>
   17f70:	210c      	movs	r1, #12
   17f72:	b13a      	cbz	r2, 17f84 <le_conn_update_complete+0x4c>
   17f74:	4608      	mov	r0, r1
   17f76:	2904      	cmp	r1, #4
   17f78:	dd01      	ble.n	17f7e <le_conn_update_complete+0x46>
   17f7a:	4c2d      	ldr	r4, [pc, #180]	; (18030 <le_conn_update_complete+0xf8>)
   17f7c:	615c      	str	r4, [r3, #20]
   17f7e:	2808      	cmp	r0, #8
   17f80:	dd00      	ble.n	17f84 <le_conn_update_complete+0x4c>
   17f82:	619e      	str	r6, [r3, #24]
   17f84:	290b      	cmp	r1, #11
   17f86:	dd26      	ble.n	17fd6 <le_conn_update_complete+0x9e>
   17f88:	240c      	movs	r4, #12
   17f8a:	b13a      	cbz	r2, 17f9c <le_conn_update_complete+0x64>
   17f8c:	2103      	movs	r1, #3
   17f8e:	7039      	strb	r1, [r7, #0]
   17f90:	2100      	movs	r1, #0
   17f92:	7079      	strb	r1, [r7, #1]
   17f94:	70b9      	strb	r1, [r7, #2]
   17f96:	70f9      	strb	r1, [r7, #3]
   17f98:	6838      	ldr	r0, [r7, #0]
   17f9a:	6118      	str	r0, [r3, #16]
   17f9c:	2100      	movs	r1, #0
   17f9e:	f36f 0100 	bfc	r1, #0, #1
   17fa2:	f36f 0141 	bfc	r1, #1, #1
   17fa6:	f36f 0182 	bfc	r1, #2, #1
   17faa:	f36f 01c5 	bfc	r1, #3, #3
   17fae:	2301      	movs	r3, #1
   17fb0:	f363 1188 	bfi	r1, r3, #6, #3
   17fb4:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   17fb8:	f364 2152 	bfi	r1, r4, #9, #10
   17fbc:	f36f 41de 	bfc	r1, #19, #12
   17fc0:	f36f 71df 	bfc	r1, #31, #1
   17fc4:	2300      	movs	r3, #0
   17fc6:	481b      	ldr	r0, [pc, #108]	; (18034 <le_conn_update_complete+0xfc>)
   17fc8:	f7fb fe98 	bl	13cfc <z_impl_z_log_msg_static_create>
   17fcc:	46ad      	mov	sp, r5
		return;
   17fce:	e7c6      	b.n	17f5e <le_conn_update_complete+0x26>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17fd4:	e7cd      	b.n	17f72 <le_conn_update_complete+0x3a>
   17fd6:	f06f 041b 	mvn.w	r4, #27
   17fda:	e7d6      	b.n	17f8a <le_conn_update_complete+0x52>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   17fdc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   17fe0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   17fe4:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   17fe8:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17fec:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   17ff0:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   17ff4:	f003 fada 	bl	1b5ac <notify_le_param_updated>
   17ff8:	e7ae      	b.n	17f58 <le_conn_update_complete+0x20>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17ffa:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17ffc:	2b01      	cmp	r3, #1
   17ffe:	d1ab      	bne.n	17f58 <le_conn_update_complete+0x20>
		   !atomic_test_and_set_bit(conn->flags,
   18000:	2109      	movs	r1, #9
   18002:	3004      	adds	r0, #4
   18004:	f013 f9dd 	bl	2b3c2 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   18008:	2800      	cmp	r0, #0
   1800a:	d1a5      	bne.n	17f58 <le_conn_update_complete+0x20>
		param.interval_min = conn->le.interval_min;
   1800c:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   18010:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   18012:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   18016:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   18018:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
   1801c:	80bb      	strh	r3, [r7, #4]
		param.timeout = conn->le.pending_timeout;
   1801e:	f8b5 30b2 	ldrh.w	r3, [r5, #178]	; 0xb2
   18022:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   18024:	4639      	mov	r1, r7
   18026:	4628      	mov	r0, r5
   18028:	f013 ff09 	bl	2be3e <bt_l2cap_update_conn_param>
   1802c:	e794      	b.n	17f58 <le_conn_update_complete+0x20>
   1802e:	bf00      	nop
   18030:	0003157c 	.word	0x0003157c
   18034:	0002f820 	.word	0x0002f820

00018038 <bt_hci_cmd_state_set_init>:
{
   18038:	b510      	push	{r4, lr}
   1803a:	460c      	mov	r4, r1
	state->target = target;
   1803c:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   1803e:	604b      	str	r3, [r1, #4]
	state->val = val;
   18040:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18044:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   18046:	f015 f907 	bl	2d258 <net_buf_id>
   1804a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1804e:	4b02      	ldr	r3, [pc, #8]	; (18058 <bt_hci_cmd_state_set_init+0x20>)
   18050:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18054:	605c      	str	r4, [r3, #4]
}
   18056:	bd10      	pop	{r4, pc}
   18058:	200098a8 	.word	0x200098a8

0001805c <bt_hci_cmd_create>:
{
   1805c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18060:	4606      	mov	r6, r0
   18062:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   18064:	f04f 32ff 	mov.w	r2, #4294967295
   18068:	f04f 33ff 	mov.w	r3, #4294967295
   1806c:	481f      	ldr	r0, [pc, #124]	; (180ec <bt_hci_cmd_create+0x90>)
   1806e:	f015 f918 	bl	2d2a2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   18072:	b370      	cbz	r0, 180d2 <bt_hci_cmd_create+0x76>
   18074:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   18076:	f100 0908 	add.w	r9, r0, #8
   1807a:	2101      	movs	r1, #1
   1807c:	4648      	mov	r0, r9
   1807e:	f007 f8bb 	bl	1f1f8 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18082:	f04f 0800 	mov.w	r8, #0
   18086:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1808a:	4620      	mov	r0, r4
   1808c:	f015 f8e4 	bl	2d258 <net_buf_id>
   18090:	4d17      	ldr	r5, [pc, #92]	; (180f0 <bt_hci_cmd_create+0x94>)
   18092:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18096:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1809a:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1809c:	4620      	mov	r0, r4
   1809e:	f015 f8db 	bl	2d258 <net_buf_id>
   180a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   180a6:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   180aa:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   180ae:	4620      	mov	r0, r4
   180b0:	f015 f8d2 	bl	2d258 <net_buf_id>
   180b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   180b8:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   180bc:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   180c0:	2103      	movs	r1, #3
   180c2:	4648      	mov	r0, r9
   180c4:	f007 fb1c 	bl	1f700 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   180c8:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   180ca:	7087      	strb	r7, [r0, #2]
}
   180cc:	4620      	mov	r0, r4
   180ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(buf);
   180d2:	4c08      	ldr	r4, [pc, #32]	; (180f4 <bt_hci_cmd_create+0x98>)
   180d4:	f240 1301 	movw	r3, #257	; 0x101
   180d8:	4622      	mov	r2, r4
   180da:	4907      	ldr	r1, [pc, #28]	; (180f8 <bt_hci_cmd_create+0x9c>)
   180dc:	4807      	ldr	r0, [pc, #28]	; (180fc <bt_hci_cmd_create+0xa0>)
   180de:	f011 fd04 	bl	29aea <assert_print>
   180e2:	f240 1101 	movw	r1, #257	; 0x101
   180e6:	4620      	mov	r0, r4
   180e8:	f011 fcf8 	bl	29adc <assert_post_action>
   180ec:	200086e0 	.word	0x200086e0
   180f0:	200098a8 	.word	0x200098a8
   180f4:	00031688 	.word	0x00031688
   180f8:	00032c24 	.word	0x00032c24
   180fc:	0002fdac 	.word	0x0002fdac

00018100 <bt_hci_cmd_send_sync>:
{
   18100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18104:	b088      	sub	sp, #32
   18106:	af00      	add	r7, sp, #0
   18108:	4606      	mov	r6, r0
   1810a:	4615      	mov	r5, r2
	if (!buf) {
   1810c:	460c      	mov	r4, r1
   1810e:	2900      	cmp	r1, #0
   18110:	d06f      	beq.n	181f2 <bt_hci_cmd_send_sync+0xf2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18112:	f107 0808 	add.w	r8, r7, #8
   18116:	2201      	movs	r2, #1
   18118:	2100      	movs	r1, #0
   1811a:	4640      	mov	r0, r8
   1811c:	f016 ff18 	bl	2ef50 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   18120:	4620      	mov	r0, r4
   18122:	f015 f899 	bl	2d258 <net_buf_id>
   18126:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1812a:	4b49      	ldr	r3, [pc, #292]	; (18250 <bt_hci_cmd_send_sync+0x150>)
   1812c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18130:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   18134:	4620      	mov	r0, r4
   18136:	f007 f9fb 	bl	1f530 <net_buf_ref>
   1813a:	4601      	mov	r1, r0
   1813c:	4845      	ldr	r0, [pc, #276]	; (18254 <bt_hci_cmd_send_sync+0x154>)
   1813e:	f007 f98f 	bl	1f460 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   18142:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   18146:	2300      	movs	r3, #0
   18148:	4640      	mov	r0, r8
   1814a:	f00d fc09 	bl	25960 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1814e:	4680      	mov	r8, r0
   18150:	2800      	cmp	r0, #0
   18152:	d156      	bne.n	18202 <bt_hci_cmd_send_sync+0x102>
	status = cmd(buf)->status;
   18154:	4620      	mov	r0, r4
   18156:	f015 f87f 	bl	2d258 <net_buf_id>
   1815a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1815e:	4b3c      	ldr	r3, [pc, #240]	; (18250 <bt_hci_cmd_send_sync+0x150>)
   18160:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
   18164:	f1b8 0f00 	cmp.w	r8, #0
   18168:	d066      	beq.n	18238 <bt_hci_cmd_send_sync+0x138>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   1816a:	466d      	mov	r5, sp
   1816c:	b088      	sub	sp, #32
   1816e:	466b      	mov	r3, sp
   18170:	f113 0210 	adds.w	r2, r3, #16
   18174:	d057      	beq.n	18226 <bt_hci_cmd_send_sync+0x126>
   18176:	2110      	movs	r1, #16
   18178:	b16a      	cbz	r2, 18196 <bt_hci_cmd_send_sync+0x96>
   1817a:	4608      	mov	r0, r1
   1817c:	2904      	cmp	r1, #4
   1817e:	dd03      	ble.n	18188 <bt_hci_cmd_send_sync+0x88>
   18180:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 18258 <bt_hci_cmd_send_sync+0x158>
   18184:	f8c3 c014 	str.w	ip, [r3, #20]
   18188:	2808      	cmp	r0, #8
   1818a:	dd00      	ble.n	1818e <bt_hci_cmd_send_sync+0x8e>
   1818c:	619e      	str	r6, [r3, #24]
   1818e:	280c      	cmp	r0, #12
   18190:	dd01      	ble.n	18196 <bt_hci_cmd_send_sync+0x96>
   18192:	f8c3 801c 	str.w	r8, [r3, #28]
   18196:	290f      	cmp	r1, #15
   18198:	dd48      	ble.n	1822c <bt_hci_cmd_send_sync+0x12c>
   1819a:	2610      	movs	r6, #16
   1819c:	b13a      	cbz	r2, 181ae <bt_hci_cmd_send_sync+0xae>
   1819e:	2104      	movs	r1, #4
   181a0:	7139      	strb	r1, [r7, #4]
   181a2:	2100      	movs	r1, #0
   181a4:	7179      	strb	r1, [r7, #5]
   181a6:	71b9      	strb	r1, [r7, #6]
   181a8:	71f9      	strb	r1, [r7, #7]
   181aa:	6878      	ldr	r0, [r7, #4]
   181ac:	6118      	str	r0, [r3, #16]
   181ae:	2100      	movs	r1, #0
   181b0:	f36f 0100 	bfc	r1, #0, #1
   181b4:	f36f 0141 	bfc	r1, #1, #1
   181b8:	f36f 0182 	bfc	r1, #2, #1
   181bc:	f36f 01c5 	bfc	r1, #3, #3
   181c0:	2302      	movs	r3, #2
   181c2:	f363 1188 	bfi	r1, r3, #6, #3
   181c6:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   181ca:	f363 2152 	bfi	r1, r3, #9, #10
   181ce:	f36f 41de 	bfc	r1, #19, #12
   181d2:	f36f 71df 	bfc	r1, #31, #1
   181d6:	2300      	movs	r3, #0
   181d8:	4820      	ldr	r0, [pc, #128]	; (1825c <bt_hci_cmd_send_sync+0x15c>)
   181da:	f7fb fd8f 	bl	13cfc <z_impl_z_log_msg_static_create>
   181de:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   181e0:	4620      	mov	r0, r4
   181e2:	f007 f96f 	bl	1f4c4 <net_buf_unref>
		switch (status) {
   181e6:	f1b8 0f09 	cmp.w	r8, #9
   181ea:	d022      	beq.n	18232 <bt_hci_cmd_send_sync+0x132>
			return -EIO;
   181ec:	f06f 0004 	mvn.w	r0, #4
   181f0:	e025      	b.n	1823e <bt_hci_cmd_send_sync+0x13e>
		buf = bt_hci_cmd_create(opcode, 0);
   181f2:	f7ff ff33 	bl	1805c <bt_hci_cmd_create>
		if (!buf) {
   181f6:	4604      	mov	r4, r0
   181f8:	2800      	cmp	r0, #0
   181fa:	d18a      	bne.n	18112 <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
   181fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18200:	e01d      	b.n	1823e <bt_hci_cmd_send_sync+0x13e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   18202:	f240 1349 	movw	r3, #329	; 0x149
   18206:	4a16      	ldr	r2, [pc, #88]	; (18260 <bt_hci_cmd_send_sync+0x160>)
   18208:	4916      	ldr	r1, [pc, #88]	; (18264 <bt_hci_cmd_send_sync+0x164>)
   1820a:	4817      	ldr	r0, [pc, #92]	; (18268 <bt_hci_cmd_send_sync+0x168>)
   1820c:	f011 fc6d 	bl	29aea <assert_print>
   18210:	4641      	mov	r1, r8
   18212:	4816      	ldr	r0, [pc, #88]	; (1826c <bt_hci_cmd_send_sync+0x16c>)
   18214:	f011 fc69 	bl	29aea <assert_print>
   18218:	4040      	eors	r0, r0
   1821a:	f380 8811 	msr	BASEPRI, r0
   1821e:	f04f 0003 	mov.w	r0, #3
   18222:	df02      	svc	2
   18224:	e796      	b.n	18154 <bt_hci_cmd_send_sync+0x54>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   18226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1822a:	e7a5      	b.n	18178 <bt_hci_cmd_send_sync+0x78>
   1822c:	f06f 061b 	mvn.w	r6, #27
   18230:	e7b4      	b.n	1819c <bt_hci_cmd_send_sync+0x9c>
			return -ECONNREFUSED;
   18232:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   18236:	e002      	b.n	1823e <bt_hci_cmd_send_sync+0x13e>
	if (rsp) {
   18238:	b12d      	cbz	r5, 18246 <bt_hci_cmd_send_sync+0x146>
		*rsp = buf;
   1823a:	602c      	str	r4, [r5, #0]
	return 0;
   1823c:	2000      	movs	r0, #0
}
   1823e:	3720      	adds	r7, #32
   18240:	46bd      	mov	sp, r7
   18242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   18246:	4620      	mov	r0, r4
   18248:	f007 f93c 	bl	1f4c4 <net_buf_unref>
	return 0;
   1824c:	2000      	movs	r0, #0
   1824e:	e7f6      	b.n	1823e <bt_hci_cmd_send_sync+0x13e>
   18250:	200098a8 	.word	0x200098a8
   18254:	2000813c 	.word	0x2000813c
   18258:	000317a4 	.word	0x000317a4
   1825c:	0002f820 	.word	0x0002f820
   18260:	00031688 	.word	0x00031688
   18264:	00030294 	.word	0x00030294
   18268:	0002fdac 	.word	0x0002fdac
   1826c:	00031784 	.word	0x00031784

00018270 <set_flow_control>:
{
   18270:	b530      	push	{r4, r5, lr}
   18272:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   18274:	4b31      	ldr	r3, [pc, #196]	; (1833c <set_flow_control+0xcc>)
   18276:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1827a:	f013 0f20 	tst.w	r3, #32
   1827e:	d02f      	beq.n	182e0 <set_flow_control+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   18280:	2107      	movs	r1, #7
   18282:	f640 4033 	movw	r0, #3123	; 0xc33
   18286:	f7ff fee9 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   1828a:	4605      	mov	r5, r0
   1828c:	2800      	cmp	r0, #0
   1828e:	d04f      	beq.n	18330 <set_flow_control+0xc0>
   18290:	2107      	movs	r1, #7
   18292:	3008      	adds	r0, #8
   18294:	f007 fa34 	bl	1f700 <net_buf_simple_add>
   18298:	4604      	mov	r4, r0
	(void)memset(hbs, 0, sizeof(*hbs));
   1829a:	2207      	movs	r2, #7
   1829c:	2100      	movs	r1, #0
   1829e:	f012 ff7a 	bl	2b196 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   182a2:	2200      	movs	r2, #0
   182a4:	231b      	movs	r3, #27
   182a6:	7023      	strb	r3, [r4, #0]
   182a8:	7062      	strb	r2, [r4, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   182aa:	2306      	movs	r3, #6
   182ac:	70e3      	strb	r3, [r4, #3]
   182ae:	7122      	strb	r2, [r4, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   182b0:	4629      	mov	r1, r5
   182b2:	f640 4033 	movw	r0, #3123	; 0xc33
   182b6:	f7ff ff23 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   182ba:	bbb8      	cbnz	r0, 1832c <set_flow_control+0xbc>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   182bc:	2101      	movs	r1, #1
   182be:	f640 4031 	movw	r0, #3121	; 0xc31
   182c2:	f7ff fecb 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   182c6:	4604      	mov	r4, r0
   182c8:	b3a8      	cbz	r0, 18336 <set_flow_control+0xc6>
	return net_buf_simple_add_u8(&buf->b, val);
   182ca:	2101      	movs	r1, #1
   182cc:	3008      	adds	r0, #8
   182ce:	f015 f816 	bl	2d2fe <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   182d2:	2200      	movs	r2, #0
   182d4:	4621      	mov	r1, r4
   182d6:	f640 4031 	movw	r0, #3121	; 0xc31
   182da:	f7ff ff11 	bl	18100 <bt_hci_cmd_send_sync>
   182de:	e025      	b.n	1832c <set_flow_control+0xbc>
		BT_WARN("Controller to host flow control not supported");
   182e0:	4b17      	ldr	r3, [pc, #92]	; (18340 <set_flow_control+0xd0>)
   182e2:	9307      	str	r3, [sp, #28]
   182e4:	2302      	movs	r3, #2
   182e6:	f88d 3004 	strb.w	r3, [sp, #4]
   182ea:	2400      	movs	r4, #0
   182ec:	f88d 4005 	strb.w	r4, [sp, #5]
   182f0:	f88d 4006 	strb.w	r4, [sp, #6]
   182f4:	f88d 4007 	strb.w	r4, [sp, #7]
   182f8:	9a01      	ldr	r2, [sp, #4]
   182fa:	9206      	str	r2, [sp, #24]
   182fc:	4621      	mov	r1, r4
   182fe:	f364 0100 	bfi	r1, r4, #0, #1
   18302:	f364 0141 	bfi	r1, r4, #1, #1
   18306:	f364 0182 	bfi	r1, r4, #2, #1
   1830a:	f364 01c5 	bfi	r1, r4, #3, #3
   1830e:	f363 1188 	bfi	r1, r3, #6, #3
   18312:	2308      	movs	r3, #8
   18314:	f363 2152 	bfi	r1, r3, #9, #10
   18318:	f364 41de 	bfi	r1, r4, #19, #12
   1831c:	f364 71df 	bfi	r1, r4, #31, #1
   18320:	4623      	mov	r3, r4
   18322:	aa06      	add	r2, sp, #24
   18324:	4807      	ldr	r0, [pc, #28]	; (18344 <set_flow_control+0xd4>)
   18326:	f7fb fce9 	bl	13cfc <z_impl_z_log_msg_static_create>
		return 0;
   1832a:	4620      	mov	r0, r4
}
   1832c:	b009      	add	sp, #36	; 0x24
   1832e:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   18330:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18334:	e7fa      	b.n	1832c <set_flow_control+0xbc>
		return -ENOBUFS;
   18336:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1833a:	e7f7      	b.n	1832c <set_flow_control+0xbc>
   1833c:	20008000 	.word	0x20008000
   18340:	000317c0 	.word	0x000317c0
   18344:	0002f820 	.word	0x0002f820

00018348 <common_init>:
{
   18348:	b500      	push	{lr}
   1834a:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1834c:	4b26      	ldr	r3, [pc, #152]	; (183e8 <common_init+0xa0>)
   1834e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   18352:	689b      	ldr	r3, [r3, #8]
   18354:	f013 0f01 	tst.w	r3, #1
   18358:	d10d      	bne.n	18376 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1835a:	aa01      	add	r2, sp, #4
   1835c:	2100      	movs	r1, #0
   1835e:	f640 4003 	movw	r0, #3075	; 0xc03
   18362:	f7ff fecd 	bl	18100 <bt_hci_cmd_send_sync>
		if (err) {
   18366:	4603      	mov	r3, r0
   18368:	b968      	cbnz	r0, 18386 <common_init+0x3e>
		hci_reset_complete(rsp);
   1836a:	9801      	ldr	r0, [sp, #4]
   1836c:	f7fe fe2e 	bl	16fcc <hci_reset_complete>
		net_buf_unref(rsp);
   18370:	9801      	ldr	r0, [sp, #4]
   18372:	f007 f8a7 	bl	1f4c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   18376:	aa01      	add	r2, sp, #4
   18378:	2100      	movs	r1, #0
   1837a:	f241 0003 	movw	r0, #4099	; 0x1003
   1837e:	f7ff febf 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   18382:	4603      	mov	r3, r0
   18384:	b118      	cbz	r0, 1838e <common_init+0x46>
}
   18386:	4618      	mov	r0, r3
   18388:	b003      	add	sp, #12
   1838a:	f85d fb04 	ldr.w	pc, [sp], #4
	read_local_features_complete(rsp);
   1838e:	9801      	ldr	r0, [sp, #4]
   18390:	f7fe fe2e 	bl	16ff0 <read_local_features_complete>
	net_buf_unref(rsp);
   18394:	9801      	ldr	r0, [sp, #4]
   18396:	f007 f895 	bl	1f4c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1839a:	aa01      	add	r2, sp, #4
   1839c:	2100      	movs	r1, #0
   1839e:	f241 0001 	movw	r0, #4097	; 0x1001
   183a2:	f7ff fead 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   183a6:	4603      	mov	r3, r0
   183a8:	2800      	cmp	r0, #0
   183aa:	d1ec      	bne.n	18386 <common_init+0x3e>
	read_local_ver_complete(rsp);
   183ac:	9801      	ldr	r0, [sp, #4]
   183ae:	f7fe fdeb 	bl	16f88 <read_local_ver_complete>
	net_buf_unref(rsp);
   183b2:	9801      	ldr	r0, [sp, #4]
   183b4:	f007 f886 	bl	1f4c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   183b8:	aa01      	add	r2, sp, #4
   183ba:	2100      	movs	r1, #0
   183bc:	f241 0002 	movw	r0, #4098	; 0x1002
   183c0:	f7ff fe9e 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   183c4:	4603      	mov	r3, r0
   183c6:	2800      	cmp	r0, #0
   183c8:	d1dd      	bne.n	18386 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   183ca:	9801      	ldr	r0, [sp, #4]
   183cc:	f7fe fe1a 	bl	17004 <read_supported_commands_complete>
	net_buf_unref(rsp);
   183d0:	9801      	ldr	r0, [sp, #4]
   183d2:	f007 f877 	bl	1f4c4 <net_buf_unref>
		err = prng_init();
   183d6:	f002 f9ab 	bl	1a730 <prng_init>
		if (err) {
   183da:	4603      	mov	r3, r0
   183dc:	2800      	cmp	r0, #0
   183de:	d1d2      	bne.n	18386 <common_init+0x3e>
	err = set_flow_control();
   183e0:	f7ff ff46 	bl	18270 <set_flow_control>
   183e4:	4603      	mov	r3, r0
	if (err) {
   183e6:	e7ce      	b.n	18386 <common_init+0x3e>
   183e8:	20008000 	.word	0x20008000

000183ec <hci_le_read_max_data_len>:
{
   183ec:	b570      	push	{r4, r5, r6, lr}
   183ee:	b088      	sub	sp, #32
   183f0:	4605      	mov	r5, r0
   183f2:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   183f4:	aa01      	add	r2, sp, #4
   183f6:	2100      	movs	r1, #0
   183f8:	f242 002f 	movw	r0, #8239	; 0x202f
   183fc:	f7ff fe80 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   18400:	4606      	mov	r6, r0
   18402:	b960      	cbnz	r0, 1841e <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   18404:	9801      	ldr	r0, [sp, #4]
   18406:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   18408:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1840c:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1840e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   18412:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   18414:	f007 f856 	bl	1f4c4 <net_buf_unref>
}
   18418:	4630      	mov	r0, r6
   1841a:	b008      	add	sp, #32
   1841c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
   1841e:	4b13      	ldr	r3, [pc, #76]	; (1846c <hci_le_read_max_data_len+0x80>)
   18420:	9307      	str	r3, [sp, #28]
   18422:	2302      	movs	r3, #2
   18424:	f88d 3000 	strb.w	r3, [sp]
   18428:	2300      	movs	r3, #0
   1842a:	f88d 3001 	strb.w	r3, [sp, #1]
   1842e:	f88d 3002 	strb.w	r3, [sp, #2]
   18432:	f88d 3003 	strb.w	r3, [sp, #3]
   18436:	9a00      	ldr	r2, [sp, #0]
   18438:	9206      	str	r2, [sp, #24]
   1843a:	4619      	mov	r1, r3
   1843c:	f363 0100 	bfi	r1, r3, #0, #1
   18440:	f363 0141 	bfi	r1, r3, #1, #1
   18444:	f363 0182 	bfi	r1, r3, #2, #1
   18448:	f363 01c5 	bfi	r1, r3, #3, #3
   1844c:	2201      	movs	r2, #1
   1844e:	f362 1188 	bfi	r1, r2, #6, #3
   18452:	2208      	movs	r2, #8
   18454:	f362 2152 	bfi	r1, r2, #9, #10
   18458:	f363 41de 	bfi	r1, r3, #19, #12
   1845c:	f363 71df 	bfi	r1, r3, #31, #1
   18460:	aa06      	add	r2, sp, #24
   18462:	4803      	ldr	r0, [pc, #12]	; (18470 <hci_le_read_max_data_len+0x84>)
   18464:	f7fb fc4a 	bl	13cfc <z_impl_z_log_msg_static_create>
		return err;
   18468:	e7d6      	b.n	18418 <hci_le_read_max_data_len+0x2c>
   1846a:	bf00      	nop
   1846c:	000317f0 	.word	0x000317f0
   18470:	0002f820 	.word	0x0002f820

00018474 <le_set_event_mask>:
{
   18474:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   18476:	2108      	movs	r1, #8
   18478:	f242 0001 	movw	r0, #8193	; 0x2001
   1847c:	f7ff fdee 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   18480:	b330      	cbz	r0, 184d0 <le_set_event_mask+0x5c>
   18482:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   18484:	2108      	movs	r1, #8
   18486:	4408      	add	r0, r1
   18488:	f007 f93a 	bl	1f700 <net_buf_simple_add>
   1848c:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1848e:	4b12      	ldr	r3, [pc, #72]	; (184d8 <le_set_event_mask+0x64>)
   18490:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   18494:	f013 0f02 	tst.w	r3, #2
   18498:	d117      	bne.n	184ca <le_set_event_mask+0x56>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1849a:	200f      	movs	r0, #15
   1849c:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1849e:	f013 0f20 	tst.w	r3, #32
   184a2:	d001      	beq.n	184a8 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   184a4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   184a8:	4b0b      	ldr	r3, [pc, #44]	; (184d8 <le_set_event_mask+0x64>)
   184aa:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   184ae:	f013 0f09 	tst.w	r3, #9
   184b2:	d001      	beq.n	184b8 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   184b4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	sys_put_le64(mask, cp_mask->events);
   184b8:	f012 fef8 	bl	2b2ac <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   184bc:	2200      	movs	r2, #0
   184be:	4621      	mov	r1, r4
   184c0:	f242 0001 	movw	r0, #8193	; 0x2001
   184c4:	f7ff fe1c 	bl	18100 <bt_hci_cmd_send_sync>
}
   184c8:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   184ca:	202f      	movs	r0, #47	; 0x2f
   184cc:	2100      	movs	r1, #0
   184ce:	e7e6      	b.n	1849e <le_set_event_mask+0x2a>
		return -ENOBUFS;
   184d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   184d4:	e7f8      	b.n	184c8 <le_set_event_mask+0x54>
   184d6:	bf00      	nop
   184d8:	20008000 	.word	0x20008000

000184dc <le_init>:
{
   184dc:	b510      	push	{r4, lr}
   184de:	b08a      	sub	sp, #40	; 0x28
	if (!BT_FEAT_LE(bt_dev.features)) {
   184e0:	4b5a      	ldr	r3, [pc, #360]	; (1864c <le_init+0x170>)
   184e2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   184e6:	f013 0f40 	tst.w	r3, #64	; 0x40
   184ea:	d00a      	beq.n	18502 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   184ec:	aa03      	add	r2, sp, #12
   184ee:	2100      	movs	r1, #0
   184f0:	f242 0003 	movw	r0, #8195	; 0x2003
   184f4:	f7ff fe04 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   184f8:	4603      	mov	r3, r0
   184fa:	b350      	cbz	r0, 18552 <le_init+0x76>
}
   184fc:	4618      	mov	r0, r3
   184fe:	b00a      	add	sp, #40	; 0x28
   18500:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
   18502:	4b53      	ldr	r3, [pc, #332]	; (18650 <le_init+0x174>)
   18504:	9309      	str	r3, [sp, #36]	; 0x24
   18506:	2302      	movs	r3, #2
   18508:	f88d 3008 	strb.w	r3, [sp, #8]
   1850c:	2300      	movs	r3, #0
   1850e:	f88d 3009 	strb.w	r3, [sp, #9]
   18512:	f88d 300a 	strb.w	r3, [sp, #10]
   18516:	f88d 300b 	strb.w	r3, [sp, #11]
   1851a:	9a02      	ldr	r2, [sp, #8]
   1851c:	9208      	str	r2, [sp, #32]
   1851e:	4619      	mov	r1, r3
   18520:	f363 0100 	bfi	r1, r3, #0, #1
   18524:	f363 0141 	bfi	r1, r3, #1, #1
   18528:	f363 0182 	bfi	r1, r3, #2, #1
   1852c:	f363 01c5 	bfi	r1, r3, #3, #3
   18530:	2201      	movs	r2, #1
   18532:	f362 1188 	bfi	r1, r2, #6, #3
   18536:	2208      	movs	r2, #8
   18538:	f362 2152 	bfi	r1, r2, #9, #10
   1853c:	f363 41de 	bfi	r1, r3, #19, #12
   18540:	f363 71df 	bfi	r1, r3, #31, #1
   18544:	aa08      	add	r2, sp, #32
   18546:	4843      	ldr	r0, [pc, #268]	; (18654 <le_init+0x178>)
   18548:	f7fb fbd8 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1854c:	f06f 0312 	mvn.w	r3, #18
   18550:	e7d4      	b.n	184fc <le_init+0x20>
	read_le_features_complete(rsp);
   18552:	9803      	ldr	r0, [sp, #12]
   18554:	f7fe fd60 	bl	17018 <read_le_features_complete>
	net_buf_unref(rsp);
   18558:	9803      	ldr	r0, [sp, #12]
   1855a:	f006 ffb3 	bl	1f4c4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1855e:	aa03      	add	r2, sp, #12
   18560:	2100      	movs	r1, #0
   18562:	f242 0002 	movw	r0, #8194	; 0x2002
   18566:	f7ff fdcb 	bl	18100 <bt_hci_cmd_send_sync>
		if (err) {
   1856a:	4603      	mov	r3, r0
   1856c:	2800      	cmp	r0, #0
   1856e:	d1c5      	bne.n	184fc <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   18570:	9803      	ldr	r0, [sp, #12]
   18572:	f7fe fd5b 	bl	1702c <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   18576:	9803      	ldr	r0, [sp, #12]
   18578:	f006 ffa4 	bl	1f4c4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1857c:	4b33      	ldr	r3, [pc, #204]	; (1864c <le_init+0x170>)
   1857e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   18582:	f013 0f20 	tst.w	r3, #32
   18586:	d032      	beq.n	185ee <le_init+0x112>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   18588:	4b30      	ldr	r3, [pc, #192]	; (1864c <le_init+0x170>)
   1858a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1858e:	f013 0f08 	tst.w	r3, #8
   18592:	d144      	bne.n	1861e <le_init+0x142>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   18594:	4b2d      	ldr	r3, [pc, #180]	; (1864c <le_init+0x170>)
   18596:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1859a:	f013 0f20 	tst.w	r3, #32
   1859e:	d022      	beq.n	185e6 <le_init+0x10a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   185a0:	a902      	add	r1, sp, #8
   185a2:	f10d 0006 	add.w	r0, sp, #6
   185a6:	f7ff ff21 	bl	183ec <hci_le_read_max_data_len>
		if (err) {
   185aa:	4603      	mov	r3, r0
   185ac:	2800      	cmp	r0, #0
   185ae:	d1a5      	bne.n	184fc <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   185b0:	2104      	movs	r1, #4
   185b2:	f242 0024 	movw	r0, #8228	; 0x2024
   185b6:	f7ff fd51 	bl	1805c <bt_hci_cmd_create>
		if (!buf) {
   185ba:	4604      	mov	r4, r0
   185bc:	2800      	cmp	r0, #0
   185be:	d03f      	beq.n	18640 <le_init+0x164>
   185c0:	2104      	movs	r1, #4
   185c2:	3008      	adds	r0, #8
   185c4:	f007 f89c 	bl	1f700 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   185c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   185cc:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   185ce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   185d2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   185d4:	2200      	movs	r2, #0
   185d6:	4621      	mov	r1, r4
   185d8:	f242 0024 	movw	r0, #8228	; 0x2024
   185dc:	f7ff fd90 	bl	18100 <bt_hci_cmd_send_sync>
		if (err) {
   185e0:	4603      	mov	r3, r0
   185e2:	2800      	cmp	r0, #0
   185e4:	d18a      	bne.n	184fc <le_init+0x20>
	return  le_set_event_mask();
   185e6:	f7ff ff45 	bl	18474 <le_set_event_mask>
   185ea:	4603      	mov	r3, r0
   185ec:	e786      	b.n	184fc <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   185ee:	2102      	movs	r1, #2
   185f0:	f640 406d 	movw	r0, #3181	; 0xc6d
   185f4:	f7ff fd32 	bl	1805c <bt_hci_cmd_create>
		if (!buf) {
   185f8:	4604      	mov	r4, r0
   185fa:	b320      	cbz	r0, 18646 <le_init+0x16a>
   185fc:	2102      	movs	r1, #2
   185fe:	3008      	adds	r0, #8
   18600:	f007 f87e 	bl	1f700 <net_buf_simple_add>
		cp_le->le = 0x01;
   18604:	2301      	movs	r3, #1
   18606:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   18608:	2200      	movs	r2, #0
   1860a:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1860c:	4621      	mov	r1, r4
   1860e:	f640 406d 	movw	r0, #3181	; 0xc6d
   18612:	f7ff fd75 	bl	18100 <bt_hci_cmd_send_sync>
		if (err) {
   18616:	4603      	mov	r3, r0
   18618:	2800      	cmp	r0, #0
   1861a:	d0b5      	beq.n	18588 <le_init+0xac>
   1861c:	e76e      	b.n	184fc <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1861e:	aa03      	add	r2, sp, #12
   18620:	2100      	movs	r1, #0
   18622:	f242 001c 	movw	r0, #8220	; 0x201c
   18626:	f7ff fd6b 	bl	18100 <bt_hci_cmd_send_sync>
		if (err) {
   1862a:	4603      	mov	r3, r0
   1862c:	2800      	cmp	r0, #0
   1862e:	f47f af65 	bne.w	184fc <le_init+0x20>
		le_read_supp_states_complete(rsp);
   18632:	9803      	ldr	r0, [sp, #12]
   18634:	f7fe fcbe 	bl	16fb4 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   18638:	9803      	ldr	r0, [sp, #12]
   1863a:	f006 ff43 	bl	1f4c4 <net_buf_unref>
   1863e:	e7a9      	b.n	18594 <le_init+0xb8>
			return -ENOBUFS;
   18640:	f06f 0368 	mvn.w	r3, #104	; 0x68
   18644:	e75a      	b.n	184fc <le_init+0x20>
			return -ENOBUFS;
   18646:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1864a:	e757      	b.n	184fc <le_init+0x20>
   1864c:	20008000 	.word	0x20008000
   18650:	00031810 	.word	0x00031810
   18654:	0002f820 	.word	0x0002f820

00018658 <bt_br_init>:
{
   18658:	b510      	push	{r4, lr}
   1865a:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   1865c:	4b0b      	ldr	r3, [pc, #44]	; (1868c <bt_br_init+0x34>)
   1865e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   18662:	b11b      	cbz	r3, 1866c <bt_br_init+0x14>
		return 0;
   18664:	2400      	movs	r4, #0
}
   18666:	4620      	mov	r0, r4
   18668:	b002      	add	sp, #8
   1866a:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1866c:	aa01      	add	r2, sp, #4
   1866e:	2100      	movs	r1, #0
   18670:	f241 0005 	movw	r0, #4101	; 0x1005
   18674:	f7ff fd44 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   18678:	4604      	mov	r4, r0
   1867a:	2800      	cmp	r0, #0
   1867c:	d1f3      	bne.n	18666 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   1867e:	9801      	ldr	r0, [sp, #4]
   18680:	f7fe fce8 	bl	17054 <read_buffer_size_complete>
	net_buf_unref(rsp);
   18684:	9801      	ldr	r0, [sp, #4]
   18686:	f006 ff1d 	bl	1f4c4 <net_buf_unref>
	return 0;
   1868a:	e7ec      	b.n	18666 <bt_br_init+0xe>
   1868c:	20008000 	.word	0x20008000

00018690 <set_event_mask>:
{
   18690:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   18692:	2108      	movs	r1, #8
   18694:	f640 4001 	movw	r0, #3073	; 0xc01
   18698:	f7ff fce0 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   1869c:	b188      	cbz	r0, 186c2 <set_event_mask+0x32>
   1869e:	4604      	mov	r4, r0
   186a0:	2108      	movs	r1, #8
   186a2:	4408      	add	r0, r1
   186a4:	f007 f82c 	bl	1f700 <net_buf_simple_add>
   186a8:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   186aa:	4807      	ldr	r0, [pc, #28]	; (186c8 <set_event_mask+0x38>)
   186ac:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   186b0:	f012 fdfc 	bl	2b2ac <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   186b4:	2200      	movs	r2, #0
   186b6:	4621      	mov	r1, r4
   186b8:	f640 4001 	movw	r0, #3073	; 0xc01
   186bc:	f7ff fd20 	bl	18100 <bt_hci_cmd_send_sync>
}
   186c0:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   186c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   186c6:	e7fb      	b.n	186c0 <set_event_mask+0x30>
   186c8:	02008810 	.word	0x02008810

000186cc <hci_vs_init>:
{
   186cc:	b510      	push	{r4, lr}
   186ce:	b094      	sub	sp, #80	; 0x50
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   186d0:	aa01      	add	r2, sp, #4
   186d2:	2100      	movs	r1, #0
   186d4:	f64f 4001 	movw	r0, #64513	; 0xfc01
   186d8:	f7ff fd12 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   186dc:	bb60      	cbnz	r0, 18738 <hci_vs_init+0x6c>
	net_buf_unref(rsp);
   186de:	9801      	ldr	r0, [sp, #4]
   186e0:	f006 fef0 	bl	1f4c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   186e4:	aa01      	add	r2, sp, #4
   186e6:	2100      	movs	r1, #0
   186e8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   186ec:	f7ff fd08 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   186f0:	2800      	cmp	r0, #0
   186f2:	d147      	bne.n	18784 <hci_vs_init+0xb8>
	rp.cmds = (void *)rsp->data;
   186f4:	9b01      	ldr	r3, [sp, #4]
   186f6:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   186f8:	4c47      	ldr	r4, [pc, #284]	; (18818 <hci_vs_init+0x14c>)
   186fa:	2202      	movs	r2, #2
   186fc:	3101      	adds	r1, #1
   186fe:	4620      	mov	r0, r4
   18700:	f012 fd1a 	bl	2b138 <memcpy>
	net_buf_unref(rsp);
   18704:	9801      	ldr	r0, [sp, #4]
   18706:	f006 fedd 	bl	1f4c4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1870a:	7823      	ldrb	r3, [r4, #0]
   1870c:	f013 0f04 	tst.w	r3, #4
   18710:	d036      	beq.n	18780 <hci_vs_init+0xb4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   18712:	aa01      	add	r2, sp, #4
   18714:	2100      	movs	r1, #0
   18716:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1871a:	f7ff fcf1 	bl	18100 <bt_hci_cmd_send_sync>
		if (err) {
   1871e:	2800      	cmp	r0, #0
   18720:	d155      	bne.n	187ce <hci_vs_init+0x102>
		rp.feat = (void *)rsp->data;
   18722:	9b01      	ldr	r3, [sp, #4]
   18724:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   18726:	2201      	movs	r2, #1
   18728:	4411      	add	r1, r2
   1872a:	483c      	ldr	r0, [pc, #240]	; (1881c <hci_vs_init+0x150>)
   1872c:	f012 fd04 	bl	2b138 <memcpy>
		net_buf_unref(rsp);
   18730:	9801      	ldr	r0, [sp, #4]
   18732:	f006 fec7 	bl	1f4c4 <net_buf_unref>
   18736:	e023      	b.n	18780 <hci_vs_init+0xb4>
		BT_WARN("Vendor HCI extensions not available");
   18738:	4b39      	ldr	r3, [pc, #228]	; (18820 <hci_vs_init+0x154>)
   1873a:	9313      	str	r3, [sp, #76]	; 0x4c
   1873c:	2202      	movs	r2, #2
   1873e:	f88d 2000 	strb.w	r2, [sp]
   18742:	2300      	movs	r3, #0
   18744:	f88d 3001 	strb.w	r3, [sp, #1]
   18748:	f88d 3002 	strb.w	r3, [sp, #2]
   1874c:	f88d 3003 	strb.w	r3, [sp, #3]
   18750:	9900      	ldr	r1, [sp, #0]
   18752:	9112      	str	r1, [sp, #72]	; 0x48
   18754:	4619      	mov	r1, r3
   18756:	f363 0100 	bfi	r1, r3, #0, #1
   1875a:	f363 0141 	bfi	r1, r3, #1, #1
   1875e:	f363 0182 	bfi	r1, r3, #2, #1
   18762:	f363 01c5 	bfi	r1, r3, #3, #3
   18766:	f362 1188 	bfi	r1, r2, #6, #3
   1876a:	2208      	movs	r2, #8
   1876c:	f362 2152 	bfi	r1, r2, #9, #10
   18770:	f363 41de 	bfi	r1, r3, #19, #12
   18774:	f363 71df 	bfi	r1, r3, #31, #1
   18778:	aa12      	add	r2, sp, #72	; 0x48
   1877a:	482a      	ldr	r0, [pc, #168]	; (18824 <hci_vs_init+0x158>)
   1877c:	f7fb fabe 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   18780:	b014      	add	sp, #80	; 0x50
   18782:	bd10      	pop	{r4, pc}
		BT_WARN("Failed to read supported vendor commands");
   18784:	4b28      	ldr	r3, [pc, #160]	; (18828 <hci_vs_init+0x15c>)
   18786:	930d      	str	r3, [sp, #52]	; 0x34
   18788:	2202      	movs	r2, #2
   1878a:	f88d 2000 	strb.w	r2, [sp]
   1878e:	2300      	movs	r3, #0
   18790:	f88d 3001 	strb.w	r3, [sp, #1]
   18794:	f88d 3002 	strb.w	r3, [sp, #2]
   18798:	f88d 3003 	strb.w	r3, [sp, #3]
   1879c:	9900      	ldr	r1, [sp, #0]
   1879e:	910c      	str	r1, [sp, #48]	; 0x30
   187a0:	4619      	mov	r1, r3
   187a2:	f363 0100 	bfi	r1, r3, #0, #1
   187a6:	f363 0141 	bfi	r1, r3, #1, #1
   187aa:	f363 0182 	bfi	r1, r3, #2, #1
   187ae:	f363 01c5 	bfi	r1, r3, #3, #3
   187b2:	f362 1188 	bfi	r1, r2, #6, #3
   187b6:	2208      	movs	r2, #8
   187b8:	f362 2152 	bfi	r1, r2, #9, #10
   187bc:	f363 41de 	bfi	r1, r3, #19, #12
   187c0:	f363 71df 	bfi	r1, r3, #31, #1
   187c4:	aa0c      	add	r2, sp, #48	; 0x30
   187c6:	4817      	ldr	r0, [pc, #92]	; (18824 <hci_vs_init+0x158>)
   187c8:	f7fb fa98 	bl	13cfc <z_impl_z_log_msg_static_create>
		return;
   187cc:	e7d8      	b.n	18780 <hci_vs_init+0xb4>
			BT_WARN("Failed to read supported vendor features");
   187ce:	4b17      	ldr	r3, [pc, #92]	; (1882c <hci_vs_init+0x160>)
   187d0:	9307      	str	r3, [sp, #28]
   187d2:	2202      	movs	r2, #2
   187d4:	f88d 2000 	strb.w	r2, [sp]
   187d8:	2300      	movs	r3, #0
   187da:	f88d 3001 	strb.w	r3, [sp, #1]
   187de:	f88d 3002 	strb.w	r3, [sp, #2]
   187e2:	f88d 3003 	strb.w	r3, [sp, #3]
   187e6:	9900      	ldr	r1, [sp, #0]
   187e8:	9106      	str	r1, [sp, #24]
   187ea:	4619      	mov	r1, r3
   187ec:	f363 0100 	bfi	r1, r3, #0, #1
   187f0:	f363 0141 	bfi	r1, r3, #1, #1
   187f4:	f363 0182 	bfi	r1, r3, #2, #1
   187f8:	f363 01c5 	bfi	r1, r3, #3, #3
   187fc:	f362 1188 	bfi	r1, r2, #6, #3
   18800:	2208      	movs	r2, #8
   18802:	f362 2152 	bfi	r1, r2, #9, #10
   18806:	f363 41de 	bfi	r1, r3, #19, #12
   1880a:	f363 71df 	bfi	r1, r3, #31, #1
   1880e:	aa06      	add	r2, sp, #24
   18810:	4804      	ldr	r0, [pc, #16]	; (18824 <hci_vs_init+0x158>)
   18812:	f7fb fa73 	bl	13cfc <z_impl_z_log_msg_static_create>
			return;
   18816:	e7b3      	b.n	18780 <hci_vs_init+0xb4>
   18818:	200080b9 	.word	0x200080b9
   1881c:	200080b8 	.word	0x200080b8
   18820:	00031834 	.word	0x00031834
   18824:	0002f820 	.word	0x0002f820
   18828:	00031858 	.word	0x00031858
   1882c:	00031884 	.word	0x00031884

00018830 <hci_init>:
{
   18830:	b500      	push	{lr}
   18832:	b089      	sub	sp, #36	; 0x24
	err = common_init();
   18834:	f7ff fd88 	bl	18348 <common_init>
	if (err) {
   18838:	4603      	mov	r3, r0
   1883a:	b118      	cbz	r0, 18844 <hci_init+0x14>
}
   1883c:	4618      	mov	r0, r3
   1883e:	b009      	add	sp, #36	; 0x24
   18840:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   18844:	f7ff fe4a 	bl	184dc <le_init>
	if (err) {
   18848:	4603      	mov	r3, r0
   1884a:	2800      	cmp	r0, #0
   1884c:	d1f6      	bne.n	1883c <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1884e:	4b21      	ldr	r3, [pc, #132]	; (188d4 <hci_init+0xa4>)
   18850:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   18854:	f013 0f20 	tst.w	r3, #32
   18858:	d00e      	beq.n	18878 <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   1885a:	4b1e      	ldr	r3, [pc, #120]	; (188d4 <hci_init+0xa4>)
   1885c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   18860:	b183      	cbz	r3, 18884 <hci_init+0x54>
	err = set_event_mask();
   18862:	f7ff ff15 	bl	18690 <set_event_mask>
	if (err) {
   18866:	4603      	mov	r3, r0
   18868:	2800      	cmp	r0, #0
   1886a:	d1e7      	bne.n	1883c <hci_init+0xc>
	hci_vs_init();
   1886c:	f7ff ff2e 	bl	186cc <hci_vs_init>
	err = bt_id_init();
   18870:	f001 fb00 	bl	19e74 <bt_id_init>
   18874:	4603      	mov	r3, r0
	if (err) {
   18876:	e7e1      	b.n	1883c <hci_init+0xc>
		err = bt_br_init();
   18878:	f7ff feee 	bl	18658 <bt_br_init>
		if (err) {
   1887c:	4603      	mov	r3, r0
   1887e:	2800      	cmp	r0, #0
   18880:	d0ef      	beq.n	18862 <hci_init+0x32>
   18882:	e7db      	b.n	1883c <hci_init+0xc>
		BT_ERR("ACL BR/EDR buffers not initialized");
   18884:	4b14      	ldr	r3, [pc, #80]	; (188d8 <hci_init+0xa8>)
   18886:	9307      	str	r3, [sp, #28]
   18888:	2302      	movs	r3, #2
   1888a:	f88d 3004 	strb.w	r3, [sp, #4]
   1888e:	2300      	movs	r3, #0
   18890:	f88d 3005 	strb.w	r3, [sp, #5]
   18894:	f88d 3006 	strb.w	r3, [sp, #6]
   18898:	f88d 3007 	strb.w	r3, [sp, #7]
   1889c:	9a01      	ldr	r2, [sp, #4]
   1889e:	9206      	str	r2, [sp, #24]
   188a0:	4619      	mov	r1, r3
   188a2:	f363 0100 	bfi	r1, r3, #0, #1
   188a6:	f363 0141 	bfi	r1, r3, #1, #1
   188aa:	f363 0182 	bfi	r1, r3, #2, #1
   188ae:	f363 01c5 	bfi	r1, r3, #3, #3
   188b2:	2201      	movs	r2, #1
   188b4:	f362 1188 	bfi	r1, r2, #6, #3
   188b8:	2208      	movs	r2, #8
   188ba:	f362 2152 	bfi	r1, r2, #9, #10
   188be:	f363 41de 	bfi	r1, r3, #19, #12
   188c2:	f363 71df 	bfi	r1, r3, #31, #1
   188c6:	aa06      	add	r2, sp, #24
   188c8:	4804      	ldr	r0, [pc, #16]	; (188dc <hci_init+0xac>)
   188ca:	f7fb fa17 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EIO;
   188ce:	f06f 0304 	mvn.w	r3, #4
   188d2:	e7b3      	b.n	1883c <hci_init+0xc>
   188d4:	20008000 	.word	0x20008000
   188d8:	000318b0 	.word	0x000318b0
   188dc:	0002f820 	.word	0x0002f820

000188e0 <bt_hci_le_rand>:
{
   188e0:	b570      	push	{r4, r5, r6, lr}
   188e2:	b082      	sub	sp, #8
   188e4:	4606      	mov	r6, r0
   188e6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   188e8:	4b12      	ldr	r3, [pc, #72]	; (18934 <bt_hci_le_rand+0x54>)
   188ea:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   188ee:	2b00      	cmp	r3, #0
   188f0:	da1d      	bge.n	1892e <bt_hci_le_rand+0x4e>
	while (len > 0) {
   188f2:	b1c4      	cbz	r4, 18926 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   188f4:	4625      	mov	r5, r4
   188f6:	2c08      	cmp	r4, #8
   188f8:	bf28      	it	cs
   188fa:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   188fc:	aa01      	add	r2, sp, #4
   188fe:	2100      	movs	r1, #0
   18900:	f242 0018 	movw	r0, #8216	; 0x2018
   18904:	f7ff fbfc 	bl	18100 <bt_hci_cmd_send_sync>
		if (err) {
   18908:	4603      	mov	r3, r0
   1890a:	b968      	cbnz	r0, 18928 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   1890c:	9b01      	ldr	r3, [sp, #4]
   1890e:	6899      	ldr	r1, [r3, #8]
		memcpy(buffer, rp->rand, count);
   18910:	462a      	mov	r2, r5
   18912:	3101      	adds	r1, #1
   18914:	4630      	mov	r0, r6
   18916:	f012 fc0f 	bl	2b138 <memcpy>
		net_buf_unref(rsp);
   1891a:	9801      	ldr	r0, [sp, #4]
   1891c:	f006 fdd2 	bl	1f4c4 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   18920:	442e      	add	r6, r5
		len -= count;
   18922:	1b64      	subs	r4, r4, r5
   18924:	e7e5      	b.n	188f2 <bt_hci_le_rand+0x12>
	return 0;
   18926:	2300      	movs	r3, #0
}
   18928:	4618      	mov	r0, r3
   1892a:	b002      	add	sp, #8
   1892c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1892e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   18932:	e7f9      	b.n	18928 <bt_hci_le_rand+0x48>
   18934:	20008000 	.word	0x20008000

00018938 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   18938:	7a83      	ldrb	r3, [r0, #10]
   1893a:	2b07      	cmp	r3, #7
   1893c:	d000      	beq.n	18940 <conn_auto_initiate+0x8>
   1893e:	4770      	bx	lr
{
   18940:	b5f0      	push	{r4, r5, r6, r7, lr}
   18942:	b085      	sub	sp, #20
   18944:	af02      	add	r7, sp, #8
   18946:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18948:	210b      	movs	r1, #11
   1894a:	3004      	adds	r0, #4
   1894c:	f012 fcf1 	bl	2b332 <atomic_test_bit>
   18950:	2800      	cmp	r0, #0
   18952:	d144      	bne.n	189de <conn_auto_initiate+0xa6>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   18954:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18956:	b12b      	cbz	r3, 18964 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   18958:	4b7a      	ldr	r3, [pc, #488]	; (18b44 <conn_auto_initiate+0x20c>)
   1895a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1895e:	f013 0f08 	tst.w	r3, #8
   18962:	d03c      	beq.n	189de <conn_auto_initiate+0xa6>
		err = hci_le_read_remote_features(conn);
   18964:	4620      	mov	r0, r4
   18966:	f012 fd41 	bl	2b3ec <hci_le_read_remote_features>
		if (err) {
   1896a:	4606      	mov	r6, r0
   1896c:	b3b8      	cbz	r0, 189de <conn_auto_initiate+0xa6>
			BT_ERR("Failed read remote features (%d)", err);
   1896e:	466d      	mov	r5, sp
   18970:	b088      	sub	sp, #32
   18972:	ab02      	add	r3, sp, #8
   18974:	f113 0210 	adds.w	r2, r3, #16
   18978:	d04b      	beq.n	18a12 <conn_auto_initiate+0xda>
   1897a:	210c      	movs	r1, #12
   1897c:	b14a      	cbz	r2, 18992 <conn_auto_initiate+0x5a>
   1897e:	4608      	mov	r0, r1
   18980:	2904      	cmp	r1, #4
   18982:	dd03      	ble.n	1898c <conn_auto_initiate+0x54>
   18984:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 18b48 <conn_auto_initiate+0x210>
   18988:	f8c3 c014 	str.w	ip, [r3, #20]
   1898c:	2808      	cmp	r0, #8
   1898e:	dd00      	ble.n	18992 <conn_auto_initiate+0x5a>
   18990:	619e      	str	r6, [r3, #24]
   18992:	290b      	cmp	r1, #11
   18994:	dd40      	ble.n	18a18 <conn_auto_initiate+0xe0>
   18996:	f04f 0c0c 	mov.w	ip, #12
   1899a:	b13a      	cbz	r2, 189ac <conn_auto_initiate+0x74>
   1899c:	2103      	movs	r1, #3
   1899e:	7139      	strb	r1, [r7, #4]
   189a0:	2100      	movs	r1, #0
   189a2:	7179      	strb	r1, [r7, #5]
   189a4:	71b9      	strb	r1, [r7, #6]
   189a6:	71f9      	strb	r1, [r7, #7]
   189a8:	6878      	ldr	r0, [r7, #4]
   189aa:	6118      	str	r0, [r3, #16]
   189ac:	2100      	movs	r1, #0
   189ae:	f36f 0100 	bfc	r1, #0, #1
   189b2:	f36f 0141 	bfc	r1, #1, #1
   189b6:	f36f 0182 	bfc	r1, #2, #1
   189ba:	f36f 01c5 	bfc	r1, #3, #3
   189be:	2301      	movs	r3, #1
   189c0:	f363 1188 	bfi	r1, r3, #6, #3
   189c4:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   189c8:	f36c 2152 	bfi	r1, ip, #9, #10
   189cc:	f36f 41de 	bfc	r1, #19, #12
   189d0:	f36f 71df 	bfc	r1, #31, #1
   189d4:	2300      	movs	r3, #0
   189d6:	485d      	ldr	r0, [pc, #372]	; (18b4c <conn_auto_initiate+0x214>)
   189d8:	f7fb f990 	bl	13cfc <z_impl_z_log_msg_static_create>
   189dc:	46ad      	mov	sp, r5
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   189de:	4b59      	ldr	r3, [pc, #356]	; (18b44 <conn_auto_initiate+0x20c>)
   189e0:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   189e4:	f013 0f01 	tst.w	r3, #1
   189e8:	d003      	beq.n	189f2 <conn_auto_initiate+0xba>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   189ea:	4620      	mov	r0, r4
   189ec:	f012 fc9e 	bl	2b32c <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   189f0:	b1a8      	cbz	r0, 18a1e <conn_auto_initiate+0xe6>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   189f2:	4b54      	ldr	r3, [pc, #336]	; (18b44 <conn_auto_initiate+0x20c>)
   189f4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   189f8:	f013 0f20 	tst.w	r3, #32
   189fc:	d006      	beq.n	18a0c <conn_auto_initiate+0xd4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   189fe:	4b51      	ldr	r3, [pc, #324]	; (18b44 <conn_auto_initiate+0x20c>)
   18a00:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   18a04:	689b      	ldr	r3, [r3, #8]
   18a06:	f013 0f02 	tst.w	r3, #2
   18a0a:	d150      	bne.n	18aae <conn_auto_initiate+0x176>
}
   18a0c:	370c      	adds	r7, #12
   18a0e:	46bd      	mov	sp, r7
   18a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BT_ERR("Failed read remote features (%d)", err);
   18a12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18a16:	e7b1      	b.n	1897c <conn_auto_initiate+0x44>
   18a18:	f06f 0c1b 	mvn.w	ip, #27
   18a1c:	e7bd      	b.n	1899a <conn_auto_initiate+0x62>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   18a1e:	2100      	movs	r1, #0
   18a20:	9100      	str	r1, [sp, #0]
   18a22:	2302      	movs	r3, #2
   18a24:	461a      	mov	r2, r3
   18a26:	4620      	mov	r0, r4
   18a28:	f012 fd30 	bl	2b48c <bt_le_set_phy>
		if (err) {
   18a2c:	4605      	mov	r5, r0
   18a2e:	2800      	cmp	r0, #0
   18a30:	d0df      	beq.n	189f2 <conn_auto_initiate+0xba>
			BT_ERR("Failed LE Set PHY (%d)", err);
   18a32:	466e      	mov	r6, sp
   18a34:	b088      	sub	sp, #32
   18a36:	ab02      	add	r3, sp, #8
   18a38:	f113 0210 	adds.w	r2, r3, #16
   18a3c:	d031      	beq.n	18aa2 <conn_auto_initiate+0x16a>
   18a3e:	210c      	movs	r1, #12
   18a40:	b14a      	cbz	r2, 18a56 <conn_auto_initiate+0x11e>
   18a42:	4608      	mov	r0, r1
   18a44:	2904      	cmp	r1, #4
   18a46:	dd03      	ble.n	18a50 <conn_auto_initiate+0x118>
   18a48:	f8df c104 	ldr.w	ip, [pc, #260]	; 18b50 <conn_auto_initiate+0x218>
   18a4c:	f8c3 c014 	str.w	ip, [r3, #20]
   18a50:	2808      	cmp	r0, #8
   18a52:	dd00      	ble.n	18a56 <conn_auto_initiate+0x11e>
   18a54:	619d      	str	r5, [r3, #24]
   18a56:	290b      	cmp	r1, #11
   18a58:	dd26      	ble.n	18aa8 <conn_auto_initiate+0x170>
   18a5a:	250c      	movs	r5, #12
   18a5c:	b13a      	cbz	r2, 18a6e <conn_auto_initiate+0x136>
   18a5e:	2103      	movs	r1, #3
   18a60:	7139      	strb	r1, [r7, #4]
   18a62:	2100      	movs	r1, #0
   18a64:	7179      	strb	r1, [r7, #5]
   18a66:	71b9      	strb	r1, [r7, #6]
   18a68:	71f9      	strb	r1, [r7, #7]
   18a6a:	6878      	ldr	r0, [r7, #4]
   18a6c:	6118      	str	r0, [r3, #16]
   18a6e:	2100      	movs	r1, #0
   18a70:	f36f 0100 	bfc	r1, #0, #1
   18a74:	f36f 0141 	bfc	r1, #1, #1
   18a78:	f36f 0182 	bfc	r1, #2, #1
   18a7c:	f36f 01c5 	bfc	r1, #3, #3
   18a80:	2301      	movs	r3, #1
   18a82:	f363 1188 	bfi	r1, r3, #6, #3
   18a86:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   18a8a:	f363 2152 	bfi	r1, r3, #9, #10
   18a8e:	f36f 41de 	bfc	r1, #19, #12
   18a92:	f36f 71df 	bfc	r1, #31, #1
   18a96:	2300      	movs	r3, #0
   18a98:	482c      	ldr	r0, [pc, #176]	; (18b4c <conn_auto_initiate+0x214>)
   18a9a:	f7fb f92f 	bl	13cfc <z_impl_z_log_msg_static_create>
   18a9e:	46b5      	mov	sp, r6
   18aa0:	e7a7      	b.n	189f2 <conn_auto_initiate+0xba>
   18aa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18aa6:	e7cb      	b.n	18a40 <conn_auto_initiate+0x108>
   18aa8:	f06f 051b 	mvn.w	r5, #27
   18aac:	e7d6      	b.n	18a5c <conn_auto_initiate+0x124>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18aae:	1cb9      	adds	r1, r7, #2
   18ab0:	4638      	mov	r0, r7
   18ab2:	f7ff fc9b 	bl	183ec <hci_le_read_max_data_len>
			if (!err) {
   18ab6:	2800      	cmp	r0, #0
   18ab8:	d1a8      	bne.n	18a0c <conn_auto_initiate+0xd4>
				err = bt_le_set_data_len(conn,
   18aba:	887a      	ldrh	r2, [r7, #2]
   18abc:	8839      	ldrh	r1, [r7, #0]
   18abe:	4620      	mov	r0, r4
   18ac0:	f012 fcc7 	bl	2b452 <bt_le_set_data_len>
				if (err) {
   18ac4:	4604      	mov	r4, r0
   18ac6:	2800      	cmp	r0, #0
   18ac8:	d0a0      	beq.n	18a0c <conn_auto_initiate+0xd4>
					BT_ERR("Failed to set data len (%d)", err);
   18aca:	466d      	mov	r5, sp
   18acc:	b088      	sub	sp, #32
   18ace:	ab02      	add	r3, sp, #8
   18ad0:	f113 0210 	adds.w	r2, r3, #16
   18ad4:	d02f      	beq.n	18b36 <conn_auto_initiate+0x1fe>
   18ad6:	210c      	movs	r1, #12
   18ad8:	b13a      	cbz	r2, 18aea <conn_auto_initiate+0x1b2>
   18ada:	4608      	mov	r0, r1
   18adc:	2904      	cmp	r1, #4
   18ade:	dd01      	ble.n	18ae4 <conn_auto_initiate+0x1ac>
   18ae0:	4e1c      	ldr	r6, [pc, #112]	; (18b54 <conn_auto_initiate+0x21c>)
   18ae2:	615e      	str	r6, [r3, #20]
   18ae4:	2808      	cmp	r0, #8
   18ae6:	dd00      	ble.n	18aea <conn_auto_initiate+0x1b2>
   18ae8:	619c      	str	r4, [r3, #24]
   18aea:	290b      	cmp	r1, #11
   18aec:	dd26      	ble.n	18b3c <conn_auto_initiate+0x204>
   18aee:	240c      	movs	r4, #12
   18af0:	b13a      	cbz	r2, 18b02 <conn_auto_initiate+0x1ca>
   18af2:	2103      	movs	r1, #3
   18af4:	7139      	strb	r1, [r7, #4]
   18af6:	2100      	movs	r1, #0
   18af8:	7179      	strb	r1, [r7, #5]
   18afa:	71b9      	strb	r1, [r7, #6]
   18afc:	71f9      	strb	r1, [r7, #7]
   18afe:	6878      	ldr	r0, [r7, #4]
   18b00:	6118      	str	r0, [r3, #16]
   18b02:	2100      	movs	r1, #0
   18b04:	f36f 0100 	bfc	r1, #0, #1
   18b08:	f36f 0141 	bfc	r1, #1, #1
   18b0c:	f36f 0182 	bfc	r1, #2, #1
   18b10:	f36f 01c5 	bfc	r1, #3, #3
   18b14:	2301      	movs	r3, #1
   18b16:	f363 1188 	bfi	r1, r3, #6, #3
   18b1a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   18b1e:	f363 2152 	bfi	r1, r3, #9, #10
   18b22:	f36f 41de 	bfc	r1, #19, #12
   18b26:	f36f 71df 	bfc	r1, #31, #1
   18b2a:	2300      	movs	r3, #0
   18b2c:	4807      	ldr	r0, [pc, #28]	; (18b4c <conn_auto_initiate+0x214>)
   18b2e:	f7fb f8e5 	bl	13cfc <z_impl_z_log_msg_static_create>
   18b32:	46ad      	mov	sp, r5
		}
   18b34:	e76a      	b.n	18a0c <conn_auto_initiate+0xd4>
					BT_ERR("Failed to set data len (%d)", err);
   18b36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18b3a:	e7cd      	b.n	18ad8 <conn_auto_initiate+0x1a0>
   18b3c:	f06f 041b 	mvn.w	r4, #27
   18b40:	e7d6      	b.n	18af0 <conn_auto_initiate+0x1b8>
   18b42:	bf00      	nop
   18b44:	20008000 	.word	0x20008000
   18b48:	000318d4 	.word	0x000318d4
   18b4c:	0002f820 	.word	0x0002f820
   18b50:	000318f8 	.word	0x000318f8
   18b54:	00031910 	.word	0x00031910

00018b58 <bt_hci_le_enh_conn_complete>:
{
   18b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b5c:	b087      	sub	sp, #28
   18b5e:	af00      	add	r7, sp, #0
   18b60:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18b62:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   18b66:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
   18b6a:	4648      	mov	r0, r9
   18b6c:	f7fe f9f6 	bl	16f5c <conn_handle_is_disconnected>
   18b70:	4606      	mov	r6, r0
	if (evt->status) {
   18b72:	7820      	ldrb	r0, [r4, #0]
   18b74:	2800      	cmp	r0, #0
   18b76:	d040      	beq.n	18bfa <bt_hci_le_enh_conn_complete+0xa2>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18b78:	283c      	cmp	r0, #60	; 0x3c
   18b7a:	d035      	beq.n	18be8 <bt_hci_le_enh_conn_complete+0x90>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   18b7c:	466d      	mov	r5, sp
   18b7e:	b088      	sub	sp, #32
   18b80:	466b      	mov	r3, sp
   18b82:	f113 0210 	adds.w	r2, r3, #16
   18b86:	d032      	beq.n	18bee <bt_hci_le_enh_conn_complete+0x96>
   18b88:	210c      	movs	r1, #12
   18b8a:	b13a      	cbz	r2, 18b9c <bt_hci_le_enh_conn_complete+0x44>
   18b8c:	460c      	mov	r4, r1
   18b8e:	2904      	cmp	r1, #4
   18b90:	dd01      	ble.n	18b96 <bt_hci_le_enh_conn_complete+0x3e>
   18b92:	4e93      	ldr	r6, [pc, #588]	; (18de0 <bt_hci_le_enh_conn_complete+0x288>)
   18b94:	615e      	str	r6, [r3, #20]
   18b96:	2c08      	cmp	r4, #8
   18b98:	dd00      	ble.n	18b9c <bt_hci_le_enh_conn_complete+0x44>
   18b9a:	6198      	str	r0, [r3, #24]
   18b9c:	290b      	cmp	r1, #11
   18b9e:	dd29      	ble.n	18bf4 <bt_hci_le_enh_conn_complete+0x9c>
   18ba0:	240c      	movs	r4, #12
   18ba2:	b13a      	cbz	r2, 18bb4 <bt_hci_le_enh_conn_complete+0x5c>
   18ba4:	2103      	movs	r1, #3
   18ba6:	7139      	strb	r1, [r7, #4]
   18ba8:	2100      	movs	r1, #0
   18baa:	7179      	strb	r1, [r7, #5]
   18bac:	71b9      	strb	r1, [r7, #6]
   18bae:	71f9      	strb	r1, [r7, #7]
   18bb0:	6878      	ldr	r0, [r7, #4]
   18bb2:	6118      	str	r0, [r3, #16]
   18bb4:	2100      	movs	r1, #0
   18bb6:	f36f 0100 	bfc	r1, #0, #1
   18bba:	f36f 0141 	bfc	r1, #1, #1
   18bbe:	f36f 0182 	bfc	r1, #2, #1
   18bc2:	f36f 01c5 	bfc	r1, #3, #3
   18bc6:	2302      	movs	r3, #2
   18bc8:	f363 1188 	bfi	r1, r3, #6, #3
   18bcc:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   18bd0:	f364 2152 	bfi	r1, r4, #9, #10
   18bd4:	f36f 41de 	bfc	r1, #19, #12
   18bd8:	f36f 71df 	bfc	r1, #31, #1
   18bdc:	2300      	movs	r3, #0
   18bde:	4881      	ldr	r0, [pc, #516]	; (18de4 <bt_hci_le_enh_conn_complete+0x28c>)
   18be0:	f7fb f88c 	bl	13cfc <z_impl_z_log_msg_static_create>
   18be4:	46ad      	mov	sp, r5
		return;
   18be6:	e056      	b.n	18c96 <bt_hci_le_enh_conn_complete+0x13e>
			le_conn_complete_adv_timeout();
   18be8:	f7fe fb10 	bl	1720c <le_conn_complete_adv_timeout>
			return;
   18bec:	e053      	b.n	18c96 <bt_hci_le_enh_conn_complete+0x13e>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   18bee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18bf2:	e7ca      	b.n	18b8a <bt_hci_le_enh_conn_complete+0x32>
   18bf4:	f06f 041b 	mvn.w	r4, #27
   18bf8:	e7d3      	b.n	18ba2 <bt_hci_le_enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   18bfa:	7923      	ldrb	r3, [r4, #4]
   18bfc:	3b02      	subs	r3, #2
   18bfe:	b2db      	uxtb	r3, r3
   18c00:	2b01      	cmp	r3, #1
   18c02:	d94c      	bls.n	18c9e <bt_hci_le_enh_conn_complete+0x146>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   18c04:	78e3      	ldrb	r3, [r4, #3]
   18c06:	2b01      	cmp	r3, #1
   18c08:	d05c      	beq.n	18cc4 <bt_hci_le_enh_conn_complete+0x16c>
				bt_lookup_id_addr(id, &evt->peer_addr));
   18c0a:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   18c0c:	4629      	mov	r1, r5
   18c0e:	f012 fccb 	bl	2b5a8 <bt_lookup_id_addr>
   18c12:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   18c14:	2207      	movs	r2, #7
   18c16:	f107 0008 	add.w	r0, r7, #8
   18c1a:	f012 fa8d 	bl	2b138 <memcpy>
   18c1e:	2207      	movs	r2, #7
   18c20:	4629      	mov	r1, r5
   18c22:	f107 0010 	add.w	r0, r7, #16
   18c26:	f012 fa87 	bl	2b138 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   18c2a:	f107 0108 	add.w	r1, r7, #8
   18c2e:	78e0      	ldrb	r0, [r4, #3]
   18c30:	f7fe fad2 	bl	171d8 <find_pending_connect>
   18c34:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   18c36:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18c38:	2b01      	cmp	r3, #1
   18c3a:	d047      	beq.n	18ccc <bt_hci_le_enh_conn_complete+0x174>
	if (!conn) {
   18c3c:	2d00      	cmp	r5, #0
   18c3e:	d054      	beq.n	18cea <bt_hci_le_enh_conn_complete+0x192>
	conn->handle = handle;
   18c40:	4628      	mov	r0, r5
   18c42:	f820 8b90 	strh.w	r8, [r0], #144
   18c46:	2207      	movs	r2, #7
   18c48:	f107 0108 	add.w	r1, r7, #8
   18c4c:	f012 fa74 	bl	2b138 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18c50:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   18c54:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   18c58:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   18c5c:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18c60:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   18c64:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   18c68:	78e3      	ldrb	r3, [r4, #3]
   18c6a:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   18c6c:	2200      	movs	r2, #0
   18c6e:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18c70:	2b01      	cmp	r3, #1
   18c72:	f000 8094 	beq.w	18d9e <bt_hci_le_enh_conn_complete+0x246>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18c76:	2107      	movs	r1, #7
   18c78:	4628      	mov	r0, r5
   18c7a:	f002 fa9d 	bl	1b1b8 <bt_conn_set_state>
	if (is_disconnected) {
   18c7e:	2e00      	cmp	r6, #0
   18c80:	f040 80a9 	bne.w	18dd6 <bt_hci_le_enh_conn_complete+0x27e>
	bt_conn_connected(conn);
   18c84:	4628      	mov	r0, r5
   18c86:	f012 ffc4 	bl	2bc12 <bt_conn_connected>
	conn_auto_initiate(conn);
   18c8a:	4628      	mov	r0, r5
   18c8c:	f7ff fe54 	bl	18938 <conn_auto_initiate>
	bt_conn_unref(conn);
   18c90:	4628      	mov	r0, r5
   18c92:	f002 fa55 	bl	1b140 <bt_conn_unref>
}
   18c96:	371c      	adds	r7, #28
   18c98:	46bd      	mov	sp, r7
   18c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18c9e:	2207      	movs	r2, #7
   18ca0:	1d21      	adds	r1, r4, #4
   18ca2:	f107 0008 	add.w	r0, r7, #8
   18ca6:	f012 fa47 	bl	2b138 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18caa:	7a3b      	ldrb	r3, [r7, #8]
   18cac:	3b02      	subs	r3, #2
   18cae:	723b      	strb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
   18cb0:	2206      	movs	r2, #6
   18cb2:	f104 0111 	add.w	r1, r4, #17
   18cb6:	f107 0011 	add.w	r0, r7, #17
   18cba:	f012 fa3d 	bl	2b138 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18cbe:	2301      	movs	r3, #1
   18cc0:	743b      	strb	r3, [r7, #16]
   18cc2:	e7b2      	b.n	18c2a <bt_hci_le_enh_conn_complete+0xd2>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   18cc4:	4b48      	ldr	r3, [pc, #288]	; (18de8 <bt_hci_le_enh_conn_complete+0x290>)
   18cc6:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   18cca:	e79e      	b.n	18c0a <bt_hci_le_enh_conn_complete+0xb2>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18ccc:	f001 fa94 	bl	1a1f8 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   18cd0:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18cd4:	e8d3 1fef 	ldaex	r1, [r3]
   18cd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   18cdc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   18ce0:	2a00      	cmp	r2, #0
   18ce2:	d1f7      	bne.n	18cd4 <bt_hci_le_enh_conn_complete+0x17c>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   18ce4:	f012 fe16 	bl	2b914 <bt_le_lim_adv_cancel_timeout>
   18ce8:	e7a8      	b.n	18c3c <bt_hci_le_enh_conn_complete+0xe4>
		BT_ERR("No pending conn for peer %s",
   18cea:	1d20      	adds	r0, r4, #4
   18cec:	f7fe f832 	bl	16d54 <bt_addr_le_str>
   18cf0:	466d      	mov	r5, sp
   18cf2:	2300      	movs	r3, #0
   18cf4:	713b      	strb	r3, [r7, #4]
   18cf6:	2302      	movs	r3, #2
   18cf8:	717b      	strb	r3, [r7, #5]
   18cfa:	b088      	sub	sp, #32
   18cfc:	466c      	mov	r4, sp
   18cfe:	f114 0210 	adds.w	r2, r4, #16
   18d02:	d011      	beq.n	18d28 <bt_hci_le_enh_conn_complete+0x1d0>
   18d04:	260e      	movs	r6, #14
   18d06:	b11a      	cbz	r2, 18d10 <bt_hci_le_enh_conn_complete+0x1b8>
   18d08:	2e04      	cmp	r6, #4
   18d0a:	dd01      	ble.n	18d10 <bt_hci_le_enh_conn_complete+0x1b8>
   18d0c:	4b37      	ldr	r3, [pc, #220]	; (18dec <bt_hci_le_enh_conn_complete+0x294>)
   18d0e:	6163      	str	r3, [r4, #20]
   18d10:	2300      	movs	r3, #0
   18d12:	703b      	strb	r3, [r7, #0]
   18d14:	2302      	movs	r3, #2
   18d16:	707b      	strb	r3, [r7, #1]
   18d18:	b19a      	cbz	r2, 18d42 <bt_hci_le_enh_conn_complete+0x1ea>
   18d1a:	2e08      	cmp	r6, #8
   18d1c:	dd00      	ble.n	18d20 <bt_hci_le_enh_conn_complete+0x1c8>
   18d1e:	61a0      	str	r0, [r4, #24]
   18d20:	f104 031c 	add.w	r3, r4, #28
   18d24:	2100      	movs	r1, #0
   18d26:	e00a      	b.n	18d3e <bt_hci_le_enh_conn_complete+0x1e6>
   18d28:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   18d2c:	e7eb      	b.n	18d06 <bt_hci_le_enh_conn_complete+0x1ae>
   18d2e:	f101 0018 	add.w	r0, r1, #24
   18d32:	4438      	add	r0, r7
   18d34:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   18d38:	f803 0b01 	strb.w	r0, [r3], #1
   18d3c:	3101      	adds	r1, #1
   18d3e:	2901      	cmp	r1, #1
   18d40:	d9f5      	bls.n	18d2e <bt_hci_le_enh_conn_complete+0x1d6>
   18d42:	2e0d      	cmp	r6, #13
   18d44:	dd28      	ble.n	18d98 <bt_hci_le_enh_conn_complete+0x240>
   18d46:	230e      	movs	r3, #14
   18d48:	b142      	cbz	r2, 18d5c <bt_hci_le_enh_conn_complete+0x204>
   18d4a:	2103      	movs	r1, #3
   18d4c:	7139      	strb	r1, [r7, #4]
   18d4e:	2100      	movs	r1, #0
   18d50:	7179      	strb	r1, [r7, #5]
   18d52:	71b9      	strb	r1, [r7, #6]
   18d54:	2101      	movs	r1, #1
   18d56:	71f9      	strb	r1, [r7, #7]
   18d58:	6878      	ldr	r0, [r7, #4]
   18d5a:	6120      	str	r0, [r4, #16]
   18d5c:	2100      	movs	r1, #0
   18d5e:	f36f 0100 	bfc	r1, #0, #1
   18d62:	f36f 0141 	bfc	r1, #1, #1
   18d66:	f36f 0182 	bfc	r1, #2, #1
   18d6a:	f36f 01c5 	bfc	r1, #3, #3
   18d6e:	2001      	movs	r0, #1
   18d70:	f360 1188 	bfi	r1, r0, #6, #3
   18d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
   18d78:	f363 2152 	bfi	r1, r3, #9, #10
   18d7c:	f36f 41de 	bfc	r1, #19, #12
   18d80:	f36f 71df 	bfc	r1, #31, #1
   18d84:	2300      	movs	r3, #0
   18d86:	4817      	ldr	r0, [pc, #92]	; (18de4 <bt_hci_le_enh_conn_complete+0x28c>)
   18d88:	f7fa ffb8 	bl	13cfc <z_impl_z_log_msg_static_create>
   18d8c:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18d8e:	211f      	movs	r1, #31
   18d90:	4648      	mov	r0, r9
   18d92:	f012 fb44 	bl	2b41e <bt_hci_disconnect>
		return;
   18d96:	e77e      	b.n	18c96 <bt_hci_le_enh_conn_complete+0x13e>
		BT_ERR("No pending conn for peer %s",
   18d98:	f06f 031b 	mvn.w	r3, #27
   18d9c:	e7d4      	b.n	18d48 <bt_hci_le_enh_conn_complete+0x1f0>
	memcpy(dst, src, sizeof(*dst));
   18d9e:	2207      	movs	r2, #7
   18da0:	f107 0110 	add.w	r1, r7, #16
   18da4:	f105 0097 	add.w	r0, r5, #151	; 0x97
   18da8:	f012 f9c6 	bl	2b138 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18dac:	f001 fa24 	bl	1a1f8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   18db0:	7a29      	ldrb	r1, [r5, #8]
   18db2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   18db6:	4c0c      	ldr	r4, [pc, #48]	; (18de8 <bt_hci_le_enh_conn_complete+0x290>)
   18db8:	2207      	movs	r2, #7
   18dba:	4421      	add	r1, r4
   18dbc:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   18dc0:	f012 f9ba 	bl	2b138 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   18dc4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   18dc8:	f013 0f40 	tst.w	r3, #64	; 0x40
   18dcc:	f43f af53 	beq.w	18c76 <bt_hci_le_enh_conn_complete+0x11e>
			bt_le_adv_resume();
   18dd0:	f012 fda5 	bl	2b91e <bt_le_adv_resume>
   18dd4:	e74f      	b.n	18c76 <bt_hci_le_enh_conn_complete+0x11e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18dd6:	2101      	movs	r1, #1
   18dd8:	4628      	mov	r0, r5
   18dda:	f002 f9ed 	bl	1b1b8 <bt_conn_set_state>
   18dde:	e751      	b.n	18c84 <bt_hci_le_enh_conn_complete+0x12c>
   18de0:	0003192c 	.word	0x0003192c
   18de4:	0002f820 	.word	0x0002f820
   18de8:	20008000 	.word	0x20008000
   18dec:	00031948 	.word	0x00031948

00018df0 <le_legacy_conn_complete>:
{
   18df0:	b510      	push	{r4, lr}
   18df2:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   18df4:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   18df6:	780b      	ldrb	r3, [r1, #0]
   18df8:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   18dfc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   18e00:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   18e04:	78cb      	ldrb	r3, [r1, #3]
   18e06:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   18e0a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   18e0e:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   18e12:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   18e16:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   18e1a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   18e1e:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   18e22:	7c4b      	ldrb	r3, [r1, #17]
   18e24:	f88d 301d 	strb.w	r3, [sp, #29]
   18e28:	2207      	movs	r2, #7
   18e2a:	3104      	adds	r1, #4
   18e2c:	a801      	add	r0, sp, #4
   18e2e:	f012 f983 	bl	2b138 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   18e32:	4c09      	ldr	r4, [pc, #36]	; (18e58 <le_legacy_conn_complete+0x68>)
   18e34:	2206      	movs	r2, #6
   18e36:	4621      	mov	r1, r4
   18e38:	f10d 000b 	add.w	r0, sp, #11
   18e3c:	f012 f97c 	bl	2b138 <memcpy>
   18e40:	2206      	movs	r2, #6
   18e42:	4621      	mov	r1, r4
   18e44:	f10d 0011 	add.w	r0, sp, #17
   18e48:	f012 f976 	bl	2b138 <memcpy>
	enh_conn_complete(&enh);
   18e4c:	4668      	mov	r0, sp
   18e4e:	f012 fb42 	bl	2b4d6 <enh_conn_complete>
}
   18e52:	b008      	add	sp, #32
   18e54:	bd10      	pop	{r4, pc}
   18e56:	bf00      	nop
   18e58:	0003137c 	.word	0x0003137c

00018e5c <bt_send>:
{
   18e5c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   18e5e:	4b03      	ldr	r3, [pc, #12]	; (18e6c <bt_send+0x10>)
   18e60:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   18e64:	695b      	ldr	r3, [r3, #20]
   18e66:	4798      	blx	r3
}
   18e68:	bd08      	pop	{r3, pc}
   18e6a:	bf00      	nop
   18e6c:	20008000 	.word	0x20008000

00018e70 <bt_hci_cmd_send>:
{
   18e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e72:	b083      	sub	sp, #12
   18e74:	af00      	add	r7, sp, #0
   18e76:	4604      	mov	r4, r0
	if (!buf) {
   18e78:	460d      	mov	r5, r1
   18e7a:	b161      	cbz	r1, 18e96 <bt_hci_cmd_send+0x26>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18e7c:	f640 4335 	movw	r3, #3125	; 0xc35
   18e80:	429c      	cmp	r4, r3
   18e82:	d010      	beq.n	18ea6 <bt_hci_cmd_send+0x36>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   18e84:	4629      	mov	r1, r5
   18e86:	482c      	ldr	r0, [pc, #176]	; (18f38 <bt_hci_cmd_send+0xc8>)
   18e88:	f006 faea 	bl	1f460 <net_buf_put>
	return 0;
   18e8c:	2400      	movs	r4, #0
}
   18e8e:	4620      	mov	r0, r4
   18e90:	370c      	adds	r7, #12
   18e92:	46bd      	mov	sp, r7
   18e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   18e96:	f7ff f8e1 	bl	1805c <bt_hci_cmd_create>
		if (!buf) {
   18e9a:	4605      	mov	r5, r0
   18e9c:	2800      	cmp	r0, #0
   18e9e:	d1ed      	bne.n	18e7c <bt_hci_cmd_send+0xc>
			return -ENOBUFS;
   18ea0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18ea4:	e7f3      	b.n	18e8e <bt_hci_cmd_send+0x1e>
		err = bt_send(buf);
   18ea6:	4628      	mov	r0, r5
   18ea8:	f7ff ffd8 	bl	18e5c <bt_send>
		if (err) {
   18eac:	4604      	mov	r4, r0
   18eae:	2800      	cmp	r0, #0
   18eb0:	d0ed      	beq.n	18e8e <bt_hci_cmd_send+0x1e>
			BT_ERR("Unable to send to driver (err %d)", err);
   18eb2:	466e      	mov	r6, sp
   18eb4:	b088      	sub	sp, #32
   18eb6:	466b      	mov	r3, sp
   18eb8:	f113 0210 	adds.w	r2, r3, #16
   18ebc:	d035      	beq.n	18f2a <bt_hci_cmd_send+0xba>
   18ebe:	210c      	movs	r1, #12
   18ec0:	b14a      	cbz	r2, 18ed6 <bt_hci_cmd_send+0x66>
   18ec2:	4608      	mov	r0, r1
   18ec4:	2904      	cmp	r1, #4
   18ec6:	dd03      	ble.n	18ed0 <bt_hci_cmd_send+0x60>
   18ec8:	f8df c070 	ldr.w	ip, [pc, #112]	; 18f3c <bt_hci_cmd_send+0xcc>
   18ecc:	f8c3 c014 	str.w	ip, [r3, #20]
   18ed0:	2808      	cmp	r0, #8
   18ed2:	dd00      	ble.n	18ed6 <bt_hci_cmd_send+0x66>
   18ed4:	619c      	str	r4, [r3, #24]
   18ed6:	290b      	cmp	r1, #11
   18ed8:	dd2a      	ble.n	18f30 <bt_hci_cmd_send+0xc0>
   18eda:	f04f 0c0c 	mov.w	ip, #12
   18ede:	b13a      	cbz	r2, 18ef0 <bt_hci_cmd_send+0x80>
   18ee0:	2103      	movs	r1, #3
   18ee2:	7139      	strb	r1, [r7, #4]
   18ee4:	2100      	movs	r1, #0
   18ee6:	7179      	strb	r1, [r7, #5]
   18ee8:	71b9      	strb	r1, [r7, #6]
   18eea:	71f9      	strb	r1, [r7, #7]
   18eec:	6878      	ldr	r0, [r7, #4]
   18eee:	6118      	str	r0, [r3, #16]
   18ef0:	2100      	movs	r1, #0
   18ef2:	f36f 0100 	bfc	r1, #0, #1
   18ef6:	f36f 0141 	bfc	r1, #1, #1
   18efa:	f36f 0182 	bfc	r1, #2, #1
   18efe:	f36f 01c5 	bfc	r1, #3, #3
   18f02:	2301      	movs	r3, #1
   18f04:	f363 1188 	bfi	r1, r3, #6, #3
   18f08:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   18f0c:	f36c 2152 	bfi	r1, ip, #9, #10
   18f10:	f36f 41de 	bfc	r1, #19, #12
   18f14:	f36f 71df 	bfc	r1, #31, #1
   18f18:	2300      	movs	r3, #0
   18f1a:	4809      	ldr	r0, [pc, #36]	; (18f40 <bt_hci_cmd_send+0xd0>)
   18f1c:	f7fa feee 	bl	13cfc <z_impl_z_log_msg_static_create>
   18f20:	46b5      	mov	sp, r6
			net_buf_unref(buf);
   18f22:	4628      	mov	r0, r5
   18f24:	f006 face 	bl	1f4c4 <net_buf_unref>
		return err;
   18f28:	e7b1      	b.n	18e8e <bt_hci_cmd_send+0x1e>
			BT_ERR("Unable to send to driver (err %d)", err);
   18f2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18f2e:	e7c7      	b.n	18ec0 <bt_hci_cmd_send+0x50>
   18f30:	f06f 0c1b 	mvn.w	ip, #27
   18f34:	e7d3      	b.n	18ede <bt_hci_cmd_send+0x6e>
   18f36:	bf00      	nop
   18f38:	2000813c 	.word	0x2000813c
   18f3c:	00031964 	.word	0x00031964
   18f40:	0002f820 	.word	0x0002f820

00018f44 <bt_hci_host_num_completed_packets>:
{
   18f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f46:	b08f      	sub	sp, #60	; 0x3c
   18f48:	af00      	add	r7, sp, #0
	uint16_t handle = acl(buf)->handle;
   18f4a:	8ac4      	ldrh	r4, [r0, #22]
	uint8_t index = acl(buf)->index;
   18f4c:	7d46      	ldrb	r6, [r0, #21]
	net_buf_destroy(buf);
   18f4e:	f012 f9fb 	bl	2b348 <net_buf_destroy>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   18f52:	4b5d      	ldr	r3, [pc, #372]	; (190c8 <bt_hci_host_num_completed_packets+0x184>)
   18f54:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   18f58:	f013 0f20 	tst.w	r3, #32
   18f5c:	d102      	bne.n	18f64 <bt_hci_host_num_completed_packets+0x20>
}
   18f5e:	373c      	adds	r7, #60	; 0x3c
   18f60:	46bd      	mov	sp, r7
   18f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_index(index);
   18f64:	4630      	mov	r0, r6
   18f66:	f002 fde1 	bl	1bb2c <bt_conn_lookup_index>
	if (!conn) {
   18f6a:	4605      	mov	r5, r0
   18f6c:	b328      	cbz	r0, 18fba <bt_hci_host_num_completed_packets+0x76>
	if (conn->state != BT_CONN_CONNECTED &&
   18f6e:	7a83      	ldrb	r3, [r0, #10]
   18f70:	3b07      	subs	r3, #7
   18f72:	b2db      	uxtb	r3, r3
   18f74:	2b01      	cmp	r3, #1
   18f76:	d85f      	bhi.n	19038 <bt_hci_host_num_completed_packets+0xf4>
	bt_conn_unref(conn);
   18f78:	f002 f8e2 	bl	1b140 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   18f7c:	2105      	movs	r1, #5
   18f7e:	f640 4035 	movw	r0, #3125	; 0xc35
   18f82:	f7ff f86b 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   18f86:	4605      	mov	r5, r0
   18f88:	2800      	cmp	r0, #0
   18f8a:	d07a      	beq.n	19082 <bt_hci_host_num_completed_packets+0x13e>
   18f8c:	f100 0608 	add.w	r6, r0, #8
   18f90:	2101      	movs	r1, #1
   18f92:	4630      	mov	r0, r6
   18f94:	f006 fbb4 	bl	1f700 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   18f98:	2301      	movs	r3, #1
   18f9a:	7003      	strb	r3, [r0, #0]
   18f9c:	2104      	movs	r1, #4
   18f9e:	4630      	mov	r0, r6
   18fa0:	f006 fbae 	bl	1f700 <net_buf_simple_add>
	hc->handle = sys_cpu_to_le16(handle);
   18fa4:	8004      	strh	r4, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   18fa6:	2301      	movs	r3, #1
   18fa8:	7083      	strb	r3, [r0, #2]
   18faa:	2300      	movs	r3, #0
   18fac:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   18fae:	4629      	mov	r1, r5
   18fb0:	f640 4035 	movw	r0, #3125	; 0xc35
   18fb4:	f7ff ff5c 	bl	18e70 <bt_hci_cmd_send>
   18fb8:	e7d1      	b.n	18f5e <bt_hci_host_num_completed_packets+0x1a>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
   18fba:	466d      	mov	r5, sp
   18fbc:	b088      	sub	sp, #32
   18fbe:	466b      	mov	r3, sp
   18fc0:	f113 0210 	adds.w	r2, r3, #16
   18fc4:	d00d      	beq.n	18fe2 <bt_hci_host_num_completed_packets+0x9e>
   18fc6:	210c      	movs	r1, #12
   18fc8:	b13a      	cbz	r2, 18fda <bt_hci_host_num_completed_packets+0x96>
   18fca:	4608      	mov	r0, r1
   18fcc:	2904      	cmp	r1, #4
   18fce:	dd01      	ble.n	18fd4 <bt_hci_host_num_completed_packets+0x90>
   18fd0:	4c3e      	ldr	r4, [pc, #248]	; (190cc <bt_hci_host_num_completed_packets+0x188>)
   18fd2:	615c      	str	r4, [r3, #20]
   18fd4:	2808      	cmp	r0, #8
   18fd6:	dd07      	ble.n	18fe8 <bt_hci_host_num_completed_packets+0xa4>
   18fd8:	619e      	str	r6, [r3, #24]
   18fda:	290b      	cmp	r1, #11
   18fdc:	dd29      	ble.n	19032 <bt_hci_host_num_completed_packets+0xee>
   18fde:	240c      	movs	r4, #12
   18fe0:	e004      	b.n	18fec <bt_hci_host_num_completed_packets+0xa8>
   18fe2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18fe6:	e7ef      	b.n	18fc8 <bt_hci_host_num_completed_packets+0x84>
   18fe8:	f06f 041b 	mvn.w	r4, #27
   18fec:	b13a      	cbz	r2, 18ffe <bt_hci_host_num_completed_packets+0xba>
   18fee:	2103      	movs	r1, #3
   18ff0:	7139      	strb	r1, [r7, #4]
   18ff2:	2100      	movs	r1, #0
   18ff4:	7179      	strb	r1, [r7, #5]
   18ff6:	71b9      	strb	r1, [r7, #6]
   18ff8:	71f9      	strb	r1, [r7, #7]
   18ffa:	6878      	ldr	r0, [r7, #4]
   18ffc:	6118      	str	r0, [r3, #16]
   18ffe:	2100      	movs	r1, #0
   19000:	f36f 0100 	bfc	r1, #0, #1
   19004:	f36f 0141 	bfc	r1, #1, #1
   19008:	f36f 0182 	bfc	r1, #2, #1
   1900c:	f36f 01c5 	bfc	r1, #3, #3
   19010:	2302      	movs	r3, #2
   19012:	f363 1188 	bfi	r1, r3, #6, #3
   19016:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1901a:	f363 2152 	bfi	r1, r3, #9, #10
   1901e:	f36f 41de 	bfc	r1, #19, #12
   19022:	f36f 71df 	bfc	r1, #31, #1
   19026:	2300      	movs	r3, #0
   19028:	4829      	ldr	r0, [pc, #164]	; (190d0 <bt_hci_host_num_completed_packets+0x18c>)
   1902a:	f7fa fe67 	bl	13cfc <z_impl_z_log_msg_static_create>
   1902e:	46ad      	mov	sp, r5
		return;
   19030:	e795      	b.n	18f5e <bt_hci_host_num_completed_packets+0x1a>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
   19032:	f06f 041b 	mvn.w	r4, #27
   19036:	e7d9      	b.n	18fec <bt_hci_host_num_completed_packets+0xa8>
		BT_WARN("Not reporting packet for non-connected conn");
   19038:	4b26      	ldr	r3, [pc, #152]	; (190d4 <bt_hci_host_num_completed_packets+0x190>)
   1903a:	637b      	str	r3, [r7, #52]	; 0x34
   1903c:	2202      	movs	r2, #2
   1903e:	713a      	strb	r2, [r7, #4]
   19040:	2300      	movs	r3, #0
   19042:	717b      	strb	r3, [r7, #5]
   19044:	71bb      	strb	r3, [r7, #6]
   19046:	71fb      	strb	r3, [r7, #7]
   19048:	6879      	ldr	r1, [r7, #4]
   1904a:	6339      	str	r1, [r7, #48]	; 0x30
   1904c:	4619      	mov	r1, r3
   1904e:	f363 0100 	bfi	r1, r3, #0, #1
   19052:	f363 0141 	bfi	r1, r3, #1, #1
   19056:	f363 0182 	bfi	r1, r3, #2, #1
   1905a:	f363 01c5 	bfi	r1, r3, #3, #3
   1905e:	f362 1188 	bfi	r1, r2, #6, #3
   19062:	2208      	movs	r2, #8
   19064:	f362 2152 	bfi	r1, r2, #9, #10
   19068:	f363 41de 	bfi	r1, r3, #19, #12
   1906c:	f363 71df 	bfi	r1, r3, #31, #1
   19070:	f107 0230 	add.w	r2, r7, #48	; 0x30
   19074:	4816      	ldr	r0, [pc, #88]	; (190d0 <bt_hci_host_num_completed_packets+0x18c>)
   19076:	f7fa fe41 	bl	13cfc <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   1907a:	4628      	mov	r0, r5
   1907c:	f002 f860 	bl	1b140 <bt_conn_unref>
		return;
   19080:	e76d      	b.n	18f5e <bt_hci_host_num_completed_packets+0x1a>
		BT_ERR("Unable to allocate new HCI command");
   19082:	4b15      	ldr	r3, [pc, #84]	; (190d8 <bt_hci_host_num_completed_packets+0x194>)
   19084:	61fb      	str	r3, [r7, #28]
   19086:	2302      	movs	r3, #2
   19088:	713b      	strb	r3, [r7, #4]
   1908a:	2300      	movs	r3, #0
   1908c:	717b      	strb	r3, [r7, #5]
   1908e:	71bb      	strb	r3, [r7, #6]
   19090:	71fb      	strb	r3, [r7, #7]
   19092:	687a      	ldr	r2, [r7, #4]
   19094:	61ba      	str	r2, [r7, #24]
   19096:	4619      	mov	r1, r3
   19098:	f363 0100 	bfi	r1, r3, #0, #1
   1909c:	f363 0141 	bfi	r1, r3, #1, #1
   190a0:	f363 0182 	bfi	r1, r3, #2, #1
   190a4:	f363 01c5 	bfi	r1, r3, #3, #3
   190a8:	2201      	movs	r2, #1
   190aa:	f362 1188 	bfi	r1, r2, #6, #3
   190ae:	2208      	movs	r2, #8
   190b0:	f362 2152 	bfi	r1, r2, #9, #10
   190b4:	f363 41de 	bfi	r1, r3, #19, #12
   190b8:	f363 71df 	bfi	r1, r3, #31, #1
   190bc:	f107 0218 	add.w	r2, r7, #24
   190c0:	4803      	ldr	r0, [pc, #12]	; (190d0 <bt_hci_host_num_completed_packets+0x18c>)
   190c2:	f7fa fe1b 	bl	13cfc <z_impl_z_log_msg_static_create>
		return;
   190c6:	e74a      	b.n	18f5e <bt_hci_host_num_completed_packets+0x1a>
   190c8:	20008000 	.word	0x20008000
   190cc:	00031988 	.word	0x00031988
   190d0:	0002f820 	.word	0x0002f820
   190d4:	000319b4 	.word	0x000319b4
   190d8:	000319e0 	.word	0x000319e0

000190dc <le_conn_param_neg_reply>:
{
   190dc:	b570      	push	{r4, r5, r6, lr}
   190de:	b088      	sub	sp, #32
   190e0:	4605      	mov	r5, r0
   190e2:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   190e4:	2103      	movs	r1, #3
   190e6:	f242 0021 	movw	r0, #8225	; 0x2021
   190ea:	f7fe ffb7 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   190ee:	b168      	cbz	r0, 1910c <le_conn_param_neg_reply+0x30>
   190f0:	4606      	mov	r6, r0
   190f2:	2103      	movs	r1, #3
   190f4:	3008      	adds	r0, #8
   190f6:	f006 fb03 	bl	1f700 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   190fa:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   190fc:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   190fe:	4631      	mov	r1, r6
   19100:	f242 0021 	movw	r0, #8225	; 0x2021
   19104:	f7ff feb4 	bl	18e70 <bt_hci_cmd_send>
}
   19108:	b008      	add	sp, #32
   1910a:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
   1910c:	4b12      	ldr	r3, [pc, #72]	; (19158 <le_conn_param_neg_reply+0x7c>)
   1910e:	9307      	str	r3, [sp, #28]
   19110:	2302      	movs	r3, #2
   19112:	f88d 3004 	strb.w	r3, [sp, #4]
   19116:	2300      	movs	r3, #0
   19118:	f88d 3005 	strb.w	r3, [sp, #5]
   1911c:	f88d 3006 	strb.w	r3, [sp, #6]
   19120:	f88d 3007 	strb.w	r3, [sp, #7]
   19124:	9a01      	ldr	r2, [sp, #4]
   19126:	9206      	str	r2, [sp, #24]
   19128:	4619      	mov	r1, r3
   1912a:	f363 0100 	bfi	r1, r3, #0, #1
   1912e:	f363 0141 	bfi	r1, r3, #1, #1
   19132:	f363 0182 	bfi	r1, r3, #2, #1
   19136:	f363 01c5 	bfi	r1, r3, #3, #3
   1913a:	2201      	movs	r2, #1
   1913c:	f362 1188 	bfi	r1, r2, #6, #3
   19140:	2208      	movs	r2, #8
   19142:	f362 2152 	bfi	r1, r2, #9, #10
   19146:	f363 41de 	bfi	r1, r3, #19, #12
   1914a:	f363 71df 	bfi	r1, r3, #31, #1
   1914e:	aa06      	add	r2, sp, #24
   19150:	4802      	ldr	r0, [pc, #8]	; (1915c <le_conn_param_neg_reply+0x80>)
   19152:	f7fa fdd3 	bl	13cfc <z_impl_z_log_msg_static_create>
		return;
   19156:	e7d7      	b.n	19108 <le_conn_param_neg_reply+0x2c>
   19158:	00031a04 	.word	0x00031a04
   1915c:	0002f820 	.word	0x0002f820

00019160 <le_conn_param_req>:
{
   19160:	b5f0      	push	{r4, r5, r6, r7, lr}
   19162:	b085      	sub	sp, #20
   19164:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   19166:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   19168:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1916a:	885a      	ldrh	r2, [r3, #2]
   1916c:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1916e:	889a      	ldrh	r2, [r3, #4]
   19170:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   19172:	88da      	ldrh	r2, [r3, #6]
   19174:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19176:	891b      	ldrh	r3, [r3, #8]
   19178:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
   1917a:	4620      	mov	r0, r4
   1917c:	f002 f812 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   19180:	b180      	cbz	r0, 191a4 <le_conn_param_req+0x44>
   19182:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   19184:	f107 0108 	add.w	r1, r7, #8
   19188:	f002 fa76 	bl	1b678 <le_param_req>
   1918c:	2800      	cmp	r0, #0
   1918e:	d149      	bne.n	19224 <le_conn_param_req+0xc4>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   19190:	211e      	movs	r1, #30
   19192:	4620      	mov	r0, r4
   19194:	f7ff ffa2 	bl	190dc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   19198:	4628      	mov	r0, r5
   1919a:	f001 ffd1 	bl	1b140 <bt_conn_unref>
}
   1919e:	3714      	adds	r7, #20
   191a0:	46bd      	mov	sp, r7
   191a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   191a4:	466e      	mov	r6, sp
   191a6:	b088      	sub	sp, #32
   191a8:	466b      	mov	r3, sp
   191aa:	f113 0210 	adds.w	r2, r3, #16
   191ae:	d033      	beq.n	19218 <le_conn_param_req+0xb8>
   191b0:	210c      	movs	r1, #12
   191b2:	b13a      	cbz	r2, 191c4 <le_conn_param_req+0x64>
   191b4:	4608      	mov	r0, r1
   191b6:	2904      	cmp	r1, #4
   191b8:	dd01      	ble.n	191be <le_conn_param_req+0x5e>
   191ba:	4d1d      	ldr	r5, [pc, #116]	; (19230 <le_conn_param_req+0xd0>)
   191bc:	615d      	str	r5, [r3, #20]
   191be:	2808      	cmp	r0, #8
   191c0:	dd00      	ble.n	191c4 <le_conn_param_req+0x64>
   191c2:	619c      	str	r4, [r3, #24]
   191c4:	290b      	cmp	r1, #11
   191c6:	dd2a      	ble.n	1921e <le_conn_param_req+0xbe>
   191c8:	250c      	movs	r5, #12
   191ca:	b13a      	cbz	r2, 191dc <le_conn_param_req+0x7c>
   191cc:	2103      	movs	r1, #3
   191ce:	7139      	strb	r1, [r7, #4]
   191d0:	2100      	movs	r1, #0
   191d2:	7179      	strb	r1, [r7, #5]
   191d4:	71b9      	strb	r1, [r7, #6]
   191d6:	71f9      	strb	r1, [r7, #7]
   191d8:	6878      	ldr	r0, [r7, #4]
   191da:	6118      	str	r0, [r3, #16]
   191dc:	2100      	movs	r1, #0
   191de:	f36f 0100 	bfc	r1, #0, #1
   191e2:	f36f 0141 	bfc	r1, #1, #1
   191e6:	f36f 0182 	bfc	r1, #2, #1
   191ea:	f36f 01c5 	bfc	r1, #3, #3
   191ee:	2301      	movs	r3, #1
   191f0:	f363 1188 	bfi	r1, r3, #6, #3
   191f4:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   191f8:	f363 2152 	bfi	r1, r3, #9, #10
   191fc:	f36f 41de 	bfc	r1, #19, #12
   19200:	f36f 71df 	bfc	r1, #31, #1
   19204:	2300      	movs	r3, #0
   19206:	480b      	ldr	r0, [pc, #44]	; (19234 <le_conn_param_req+0xd4>)
   19208:	f7fa fd78 	bl	13cfc <z_impl_z_log_msg_static_create>
   1920c:	46b5      	mov	sp, r6
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1920e:	2102      	movs	r1, #2
   19210:	4620      	mov	r0, r4
   19212:	f7ff ff63 	bl	190dc <le_conn_param_neg_reply>
		return;
   19216:	e7c2      	b.n	1919e <le_conn_param_req+0x3e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1921c:	e7c9      	b.n	191b2 <le_conn_param_req+0x52>
   1921e:	f06f 051b 	mvn.w	r5, #27
   19222:	e7d2      	b.n	191ca <le_conn_param_req+0x6a>
		le_conn_param_req_reply(handle, &param);
   19224:	f107 0108 	add.w	r1, r7, #8
   19228:	4620      	mov	r0, r4
   1922a:	f012 f985 	bl	2b538 <le_conn_param_req_reply>
   1922e:	e7b3      	b.n	19198 <le_conn_param_req+0x38>
   19230:	0003157c 	.word	0x0003157c
   19234:	0002f820 	.word	0x0002f820

00019238 <send_cmd>:
{
   19238:	b5f0      	push	{r4, r5, r6, r7, lr}
   1923a:	b089      	sub	sp, #36	; 0x24
   1923c:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1923e:	2200      	movs	r2, #0
   19240:	2300      	movs	r3, #0
   19242:	4855      	ldr	r0, [pc, #340]	; (19398 <send_cmd+0x160>)
   19244:	f005 ffa8 	bl	1f198 <net_buf_get>
	BT_ASSERT(buf);
   19248:	4605      	mov	r5, r0
   1924a:	2800      	cmp	r0, #0
   1924c:	d055      	beq.n	192fa <send_cmd+0xc2>
   1924e:	4c53      	ldr	r4, [pc, #332]	; (1939c <send_cmd+0x164>)
   19250:	f04f 32ff 	mov.w	r2, #4294967295
   19254:	f04f 33ff 	mov.w	r3, #4294967295
   19258:	4620      	mov	r0, r4
   1925a:	f00c fb81 	bl	25960 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1925e:	69a3      	ldr	r3, [r4, #24]
   19260:	b34b      	cbz	r3, 192b6 <send_cmd+0x7e>
		BT_ERR("Uncleared pending sent_cmd");
   19262:	4b4f      	ldr	r3, [pc, #316]	; (193a0 <send_cmd+0x168>)
   19264:	61fb      	str	r3, [r7, #28]
   19266:	2302      	movs	r3, #2
   19268:	713b      	strb	r3, [r7, #4]
   1926a:	2400      	movs	r4, #0
   1926c:	717c      	strb	r4, [r7, #5]
   1926e:	71bc      	strb	r4, [r7, #6]
   19270:	71fc      	strb	r4, [r7, #7]
   19272:	687b      	ldr	r3, [r7, #4]
   19274:	61bb      	str	r3, [r7, #24]
   19276:	4621      	mov	r1, r4
   19278:	f364 0100 	bfi	r1, r4, #0, #1
   1927c:	f364 0141 	bfi	r1, r4, #1, #1
   19280:	f364 0182 	bfi	r1, r4, #2, #1
   19284:	f364 01c5 	bfi	r1, r4, #3, #3
   19288:	2301      	movs	r3, #1
   1928a:	f363 1188 	bfi	r1, r3, #6, #3
   1928e:	2308      	movs	r3, #8
   19290:	f363 2152 	bfi	r1, r3, #9, #10
   19294:	f364 41de 	bfi	r1, r4, #19, #12
   19298:	f364 71df 	bfi	r1, r4, #31, #1
   1929c:	4623      	mov	r3, r4
   1929e:	f107 0218 	add.w	r2, r7, #24
   192a2:	4840      	ldr	r0, [pc, #256]	; (193a4 <send_cmd+0x16c>)
   192a4:	f7fa fd2a 	bl	13cfc <z_impl_z_log_msg_static_create>
		net_buf_unref(bt_dev.sent_cmd);
   192a8:	4e3f      	ldr	r6, [pc, #252]	; (193a8 <send_cmd+0x170>)
   192aa:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   192ae:	f006 f909 	bl	1f4c4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   192b2:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   192b6:	4628      	mov	r0, r5
   192b8:	f006 f93a 	bl	1f530 <net_buf_ref>
   192bc:	4b3a      	ldr	r3, [pc, #232]	; (193a8 <send_cmd+0x170>)
   192be:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   192c2:	4628      	mov	r0, r5
   192c4:	f7ff fdca 	bl	18e5c <bt_send>
	if (err) {
   192c8:	4604      	mov	r4, r0
   192ca:	2800      	cmp	r0, #0
   192cc:	d05d      	beq.n	1938a <send_cmd+0x152>
		BT_ERR("Unable to send to driver (err %d)", err);
   192ce:	466e      	mov	r6, sp
   192d0:	b088      	sub	sp, #32
   192d2:	466b      	mov	r3, sp
   192d4:	f113 0210 	adds.w	r2, r3, #16
   192d8:	d01d      	beq.n	19316 <send_cmd+0xde>
   192da:	210c      	movs	r1, #12
   192dc:	b14a      	cbz	r2, 192f2 <send_cmd+0xba>
   192de:	4608      	mov	r0, r1
   192e0:	2904      	cmp	r1, #4
   192e2:	dd03      	ble.n	192ec <send_cmd+0xb4>
   192e4:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 193ac <send_cmd+0x174>
   192e8:	f8c3 c014 	str.w	ip, [r3, #20]
   192ec:	2808      	cmp	r0, #8
   192ee:	dd15      	ble.n	1931c <send_cmd+0xe4>
   192f0:	619c      	str	r4, [r3, #24]
   192f2:	290b      	cmp	r1, #11
   192f4:	dd4c      	ble.n	19390 <send_cmd+0x158>
   192f6:	240c      	movs	r4, #12
   192f8:	e012      	b.n	19320 <send_cmd+0xe8>
	BT_ASSERT(buf);
   192fa:	f640 1373 	movw	r3, #2419	; 0x973
   192fe:	4a2c      	ldr	r2, [pc, #176]	; (193b0 <send_cmd+0x178>)
   19300:	492c      	ldr	r1, [pc, #176]	; (193b4 <send_cmd+0x17c>)
   19302:	482d      	ldr	r0, [pc, #180]	; (193b8 <send_cmd+0x180>)
   19304:	f010 fbf1 	bl	29aea <assert_print>
   19308:	4040      	eors	r0, r0
   1930a:	f380 8811 	msr	BASEPRI, r0
   1930e:	f04f 0003 	mov.w	r0, #3
   19312:	df02      	svc	2
   19314:	e79b      	b.n	1924e <send_cmd+0x16>
		BT_ERR("Unable to send to driver (err %d)", err);
   19316:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1931a:	e7df      	b.n	192dc <send_cmd+0xa4>
   1931c:	f06f 041b 	mvn.w	r4, #27
   19320:	b13a      	cbz	r2, 19332 <send_cmd+0xfa>
   19322:	2103      	movs	r1, #3
   19324:	7139      	strb	r1, [r7, #4]
   19326:	2100      	movs	r1, #0
   19328:	7179      	strb	r1, [r7, #5]
   1932a:	71b9      	strb	r1, [r7, #6]
   1932c:	71f9      	strb	r1, [r7, #7]
   1932e:	6878      	ldr	r0, [r7, #4]
   19330:	6118      	str	r0, [r3, #16]
   19332:	2100      	movs	r1, #0
   19334:	f36f 0100 	bfc	r1, #0, #1
   19338:	f36f 0141 	bfc	r1, #1, #1
   1933c:	f36f 0182 	bfc	r1, #2, #1
   19340:	f36f 01c5 	bfc	r1, #3, #3
   19344:	2301      	movs	r3, #1
   19346:	f363 1188 	bfi	r1, r3, #6, #3
   1934a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1934e:	f363 2152 	bfi	r1, r3, #9, #10
   19352:	f36f 41de 	bfc	r1, #19, #12
   19356:	f36f 71df 	bfc	r1, #31, #1
   1935a:	2300      	movs	r3, #0
   1935c:	4811      	ldr	r0, [pc, #68]	; (193a4 <send_cmd+0x16c>)
   1935e:	f7fa fccd 	bl	13cfc <z_impl_z_log_msg_static_create>
   19362:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
   19364:	480d      	ldr	r0, [pc, #52]	; (1939c <send_cmd+0x164>)
   19366:	f00c fab3 	bl	258d0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1936a:	4628      	mov	r0, r5
   1936c:	f013 ff74 	bl	2d258 <net_buf_id>
   19370:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19374:	4b11      	ldr	r3, [pc, #68]	; (193bc <send_cmd+0x184>)
   19376:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1937a:	462a      	mov	r2, r5
   1937c:	211f      	movs	r1, #31
   1937e:	8858      	ldrh	r0, [r3, #2]
   19380:	f7fe f968 	bl	17654 <hci_cmd_done>
		net_buf_unref(buf);
   19384:	4628      	mov	r0, r5
   19386:	f006 f89d 	bl	1f4c4 <net_buf_unref>
}
   1938a:	3724      	adds	r7, #36	; 0x24
   1938c:	46bd      	mov	sp, r7
   1938e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to send to driver (err %d)", err);
   19390:	f06f 041b 	mvn.w	r4, #27
   19394:	e7c4      	b.n	19320 <send_cmd+0xe8>
   19396:	bf00      	nop
   19398:	2000813c 	.word	0x2000813c
   1939c:	20008118 	.word	0x20008118
   193a0:	00031a20 	.word	0x00031a20
   193a4:	0002f820 	.word	0x0002f820
   193a8:	20008000 	.word	0x20008000
   193ac:	00031964 	.word	0x00031964
   193b0:	00031688 	.word	0x00031688
   193b4:	00032c24 	.word	0x00032c24
   193b8:	0002fdac 	.word	0x0002fdac
   193bc:	200098a8 	.word	0x200098a8

000193c0 <process_events>:
{
   193c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193c4:	b082      	sub	sp, #8
   193c6:	af00      	add	r7, sp, #0
   193c8:	4604      	mov	r4, r0
   193ca:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   193cc:	e03c      	b.n	19448 <process_events+0x88>
				send_cmd();
   193ce:	f7ff ff33 	bl	19238 <send_cmd>
   193d2:	e037      	b.n	19444 <process_events+0x84>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   193d4:	46e8      	mov	r8, sp
   193d6:	b088      	sub	sp, #32
   193d8:	4669      	mov	r1, sp
   193da:	f111 0210 	adds.w	r2, r1, #16
   193de:	d045      	beq.n	1946c <process_events+0xac>
   193e0:	200c      	movs	r0, #12
   193e2:	b152      	cbz	r2, 193fa <process_events+0x3a>
   193e4:	4684      	mov	ip, r0
   193e6:	2804      	cmp	r0, #4
   193e8:	dd03      	ble.n	193f2 <process_events+0x32>
   193ea:	f8df e094 	ldr.w	lr, [pc, #148]	; 19480 <process_events+0xc0>
   193ee:	f8c1 e014 	str.w	lr, [r1, #20]
   193f2:	f1bc 0f08 	cmp.w	ip, #8
   193f6:	dd00      	ble.n	193fa <process_events+0x3a>
   193f8:	618b      	str	r3, [r1, #24]
   193fa:	280b      	cmp	r0, #11
   193fc:	dd39      	ble.n	19472 <process_events+0xb2>
   193fe:	230c      	movs	r3, #12
   19400:	b13a      	cbz	r2, 19412 <process_events+0x52>
   19402:	2003      	movs	r0, #3
   19404:	7138      	strb	r0, [r7, #4]
   19406:	2000      	movs	r0, #0
   19408:	7178      	strb	r0, [r7, #5]
   1940a:	71b8      	strb	r0, [r7, #6]
   1940c:	71f8      	strb	r0, [r7, #7]
   1940e:	6878      	ldr	r0, [r7, #4]
   19410:	6108      	str	r0, [r1, #16]
   19412:	f36f 0600 	bfc	r6, #0, #1
   19416:	f36f 0641 	bfc	r6, #1, #1
   1941a:	f36f 0682 	bfc	r6, #2, #1
   1941e:	f36f 06c5 	bfc	r6, #3, #3
   19422:	2102      	movs	r1, #2
   19424:	f361 1688 	bfi	r6, r1, #6, #3
   19428:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1942c:	f363 2652 	bfi	r6, r3, #9, #10
   19430:	f36f 46de 	bfc	r6, #19, #12
   19434:	f36f 76df 	bfc	r6, #31, #1
   19438:	2300      	movs	r3, #0
   1943a:	4631      	mov	r1, r6
   1943c:	4811      	ldr	r0, [pc, #68]	; (19484 <process_events+0xc4>)
   1943e:	f7fa fc5d 	bl	13cfc <z_impl_z_log_msg_static_create>
   19442:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
   19444:	3414      	adds	r4, #20
   19446:	3d01      	subs	r5, #1
   19448:	b1b5      	cbz	r5, 19478 <process_events+0xb8>
		switch (ev->state) {
   1944a:	68e3      	ldr	r3, [r4, #12]
   1944c:	f3c3 3386 	ubfx	r3, r3, #14, #7
   19450:	2b01      	cmp	r3, #1
   19452:	d9f7      	bls.n	19444 <process_events+0x84>
   19454:	2b04      	cmp	r3, #4
   19456:	d1bd      	bne.n	193d4 <process_events+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
   19458:	7b23      	ldrb	r3, [r4, #12]
   1945a:	2b00      	cmp	r3, #0
   1945c:	d0b7      	beq.n	193ce <process_events+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1945e:	2b01      	cmp	r3, #1
   19460:	d1f0      	bne.n	19444 <process_events+0x84>
					conn = CONTAINER_OF(ev->fifo,
   19462:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   19464:	3838      	subs	r0, #56	; 0x38
   19466:	f002 fb25 	bl	1bab4 <bt_conn_process_tx>
   1946a:	e7eb      	b.n	19444 <process_events+0x84>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1946c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19470:	e7b7      	b.n	193e2 <process_events+0x22>
   19472:	f06f 031b 	mvn.w	r3, #27
   19476:	e7c3      	b.n	19400 <process_events+0x40>
}
   19478:	3708      	adds	r7, #8
   1947a:	46bd      	mov	sp, r7
   1947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19480:	00031a3c 	.word	0x00031a3c
   19484:	0002f820 	.word	0x0002f820

00019488 <hci_tx_thread>:
{
   19488:	b538      	push	{r3, r4, r5, lr}
   1948a:	e012      	b.n	194b2 <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   1948c:	f640 13da 	movw	r3, #2522	; 0x9da
   19490:	4a12      	ldr	r2, [pc, #72]	; (194dc <hci_tx_thread+0x54>)
   19492:	4913      	ldr	r1, [pc, #76]	; (194e0 <hci_tx_thread+0x58>)
   19494:	4813      	ldr	r0, [pc, #76]	; (194e4 <hci_tx_thread+0x5c>)
   19496:	f010 fb28 	bl	29aea <assert_print>
   1949a:	4040      	eors	r0, r0
   1949c:	f380 8811 	msr	BASEPRI, r0
   194a0:	f04f 0003 	mov.w	r0, #3
   194a4:	df02      	svc	2
		process_events(events, ev_count);
   194a6:	4621      	mov	r1, r4
   194a8:	480f      	ldr	r0, [pc, #60]	; (194e8 <hci_tx_thread+0x60>)
   194aa:	f7ff ff89 	bl	193c0 <process_events>
	z_impl_k_yield();
   194ae:	f00e f9a7 	bl	27800 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   194b2:	4d0d      	ldr	r5, [pc, #52]	; (194e8 <hci_tx_thread+0x60>)
   194b4:	68eb      	ldr	r3, [r5, #12]
   194b6:	f36f 3394 	bfc	r3, #14, #7
   194ba:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   194bc:	f105 0014 	add.w	r0, r5, #20
   194c0:	f001 fdf0 	bl	1b0a4 <bt_conn_prepare_events>
   194c4:	1c44      	adds	r4, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   194c6:	f04f 32ff 	mov.w	r2, #4294967295
   194ca:	f04f 33ff 	mov.w	r3, #4294967295
   194ce:	4621      	mov	r1, r4
   194d0:	4628      	mov	r0, r5
   194d2:	f00f fbf7 	bl	28cc4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   194d6:	2800      	cmp	r0, #0
   194d8:	d1d8      	bne.n	1948c <hci_tx_thread+0x4>
   194da:	e7e4      	b.n	194a6 <hci_tx_thread+0x1e>
   194dc:	00031688 	.word	0x00031688
   194e0:	00030294 	.word	0x00030294
   194e4:	0002fdac 	.word	0x0002fdac
   194e8:	20008214 	.word	0x20008214

000194ec <hci_event_prio>:
{
   194ec:	b570      	push	{r4, r5, r6, lr}
   194ee:	b082      	sub	sp, #8
   194f0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   194f2:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   194f6:	4628      	mov	r0, r5
   194f8:	f013 fee2 	bl	2d2c0 <net_buf_simple_headroom>
   194fc:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   19500:	89a3      	ldrh	r3, [r4, #12]
   19502:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19506:	2b01      	cmp	r3, #1
   19508:	d91e      	bls.n	19548 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1950a:	2102      	movs	r1, #2
   1950c:	4628      	mov	r0, r5
   1950e:	f006 f8b7 	bl	1f680 <net_buf_simple_pull_mem>
   19512:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19514:	7800      	ldrb	r0, [r0, #0]
   19516:	f011 fef3 	bl	2b300 <bt_hci_evt_get_flags>
   1951a:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1951c:	f010 0f01 	tst.w	r0, #1
   19520:	d020      	beq.n	19564 <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   19522:	2305      	movs	r3, #5
   19524:	4a18      	ldr	r2, [pc, #96]	; (19588 <hci_event_prio+0x9c>)
   19526:	4621      	mov	r1, r4
   19528:	7830      	ldrb	r0, [r6, #0]
   1952a:	f7fe fa6d 	bl	17a08 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1952e:	f015 0f02 	tst.w	r5, #2
   19532:	d025      	beq.n	19580 <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   19534:	6923      	ldr	r3, [r4, #16]
   19536:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1953a:	4413      	add	r3, r2
   1953c:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   1953e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19542:	81a3      	strh	r3, [r4, #12]
}
   19544:	b002      	add	sp, #8
   19546:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19548:	f640 5377 	movw	r3, #3447	; 0xd77
   1954c:	4a0f      	ldr	r2, [pc, #60]	; (1958c <hci_event_prio+0xa0>)
   1954e:	4910      	ldr	r1, [pc, #64]	; (19590 <hci_event_prio+0xa4>)
   19550:	4810      	ldr	r0, [pc, #64]	; (19594 <hci_event_prio+0xa8>)
   19552:	f010 faca 	bl	29aea <assert_print>
   19556:	4040      	eors	r0, r0
   19558:	f380 8811 	msr	BASEPRI, r0
   1955c:	f04f 0003 	mov.w	r0, #3
   19560:	df02      	svc	2
   19562:	e7d2      	b.n	1950a <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19564:	f640 537b 	movw	r3, #3451	; 0xd7b
   19568:	4a08      	ldr	r2, [pc, #32]	; (1958c <hci_event_prio+0xa0>)
   1956a:	490b      	ldr	r1, [pc, #44]	; (19598 <hci_event_prio+0xac>)
   1956c:	4809      	ldr	r0, [pc, #36]	; (19594 <hci_event_prio+0xa8>)
   1956e:	f010 fabc 	bl	29aea <assert_print>
   19572:	4040      	eors	r0, r0
   19574:	f380 8811 	msr	BASEPRI, r0
   19578:	f04f 0003 	mov.w	r0, #3
   1957c:	df02      	svc	2
   1957e:	e7d0      	b.n	19522 <hci_event_prio+0x36>
		net_buf_unref(buf);
   19580:	4620      	mov	r0, r4
   19582:	f005 ff9f 	bl	1f4c4 <net_buf_unref>
}
   19586:	e7dd      	b.n	19544 <hci_event_prio+0x58>
   19588:	00031ad8 	.word	0x00031ad8
   1958c:	00031688 	.word	0x00031688
   19590:	000316bc 	.word	0x000316bc
   19594:	0002fdac 	.word	0x0002fdac
   19598:	00031a60 	.word	0x00031a60

0001959c <bt_recv>:
{
   1959c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1959e:	b083      	sub	sp, #12
   195a0:	af00      	add	r7, sp, #0
   195a2:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   195a4:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   195a6:	2b01      	cmp	r3, #1
   195a8:	d007      	beq.n	195ba <bt_recv+0x1e>
   195aa:	2b03      	cmp	r3, #3
   195ac:	d11b      	bne.n	195e6 <bt_recv+0x4a>
		rx_queue_put(buf);
   195ae:	f7fe faf5 	bl	17b9c <rx_queue_put>
		return 0;
   195b2:	2000      	movs	r0, #0
}
   195b4:	370c      	adds	r7, #12
   195b6:	46bd      	mov	sp, r7
   195b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   195ba:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   195bc:	7818      	ldrb	r0, [r3, #0]
   195be:	f011 fe9f 	bl	2b300 <bt_hci_evt_get_flags>
   195c2:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   195c4:	f010 0f01 	tst.w	r0, #1
   195c8:	d104      	bne.n	195d4 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   195ca:	f015 0f02 	tst.w	r5, #2
   195ce:	d105      	bne.n	195dc <bt_recv+0x40>
		return 0;
   195d0:	2000      	movs	r0, #0
   195d2:	e7ef      	b.n	195b4 <bt_recv+0x18>
			hci_event_prio(buf);
   195d4:	4620      	mov	r0, r4
   195d6:	f7ff ff89 	bl	194ec <hci_event_prio>
   195da:	e7f6      	b.n	195ca <bt_recv+0x2e>
			rx_queue_put(buf);
   195dc:	4620      	mov	r0, r4
   195de:	f7fe fadd 	bl	17b9c <rx_queue_put>
		return 0;
   195e2:	2000      	movs	r0, #0
   195e4:	e7e6      	b.n	195b4 <bt_recv+0x18>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   195e6:	466d      	mov	r5, sp
   195e8:	b088      	sub	sp, #32
   195ea:	4669      	mov	r1, sp
   195ec:	f111 0210 	adds.w	r2, r1, #16
   195f0:	d035      	beq.n	1965e <bt_recv+0xc2>
   195f2:	200c      	movs	r0, #12
   195f4:	b142      	cbz	r2, 19608 <bt_recv+0x6c>
   195f6:	4684      	mov	ip, r0
   195f8:	2804      	cmp	r0, #4
   195fa:	dd01      	ble.n	19600 <bt_recv+0x64>
   195fc:	4e1b      	ldr	r6, [pc, #108]	; (1966c <bt_recv+0xd0>)
   195fe:	614e      	str	r6, [r1, #20]
   19600:	f1bc 0f08 	cmp.w	ip, #8
   19604:	dd00      	ble.n	19608 <bt_recv+0x6c>
   19606:	618b      	str	r3, [r1, #24]
   19608:	280b      	cmp	r0, #11
   1960a:	dd2b      	ble.n	19664 <bt_recv+0xc8>
   1960c:	230c      	movs	r3, #12
   1960e:	b13a      	cbz	r2, 19620 <bt_recv+0x84>
   19610:	2003      	movs	r0, #3
   19612:	7138      	strb	r0, [r7, #4]
   19614:	2000      	movs	r0, #0
   19616:	7178      	strb	r0, [r7, #5]
   19618:	71b8      	strb	r0, [r7, #6]
   1961a:	71f8      	strb	r0, [r7, #7]
   1961c:	6878      	ldr	r0, [r7, #4]
   1961e:	6108      	str	r0, [r1, #16]
   19620:	2100      	movs	r1, #0
   19622:	f36f 0100 	bfc	r1, #0, #1
   19626:	f36f 0141 	bfc	r1, #1, #1
   1962a:	f36f 0182 	bfc	r1, #2, #1
   1962e:	f36f 01c5 	bfc	r1, #3, #3
   19632:	2001      	movs	r0, #1
   19634:	f360 1188 	bfi	r1, r0, #6, #3
   19638:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1963c:	f363 2152 	bfi	r1, r3, #9, #10
   19640:	f36f 41de 	bfc	r1, #19, #12
   19644:	f36f 71df 	bfc	r1, #31, #1
   19648:	2300      	movs	r3, #0
   1964a:	4809      	ldr	r0, [pc, #36]	; (19670 <bt_recv+0xd4>)
   1964c:	f7fa fb56 	bl	13cfc <z_impl_z_log_msg_static_create>
   19650:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   19652:	4620      	mov	r0, r4
   19654:	f005 ff36 	bl	1f4c4 <net_buf_unref>
		return -EINVAL;
   19658:	f06f 0015 	mvn.w	r0, #21
   1965c:	e7aa      	b.n	195b4 <bt_recv+0x18>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1965e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19662:	e7c7      	b.n	195f4 <bt_recv+0x58>
   19664:	f06f 031b 	mvn.w	r3, #27
   19668:	e7d1      	b.n	1960e <bt_recv+0x72>
   1966a:	bf00      	nop
   1966c:	00031a7c 	.word	0x00031a7c
   19670:	0002f820 	.word	0x0002f820

00019674 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   19674:	4b0a      	ldr	r3, [pc, #40]	; (196a0 <bt_hci_driver_register+0x2c>)
   19676:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1967a:	b943      	cbnz	r3, 1968e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1967c:	68c3      	ldr	r3, [r0, #12]
   1967e:	b14b      	cbz	r3, 19694 <bt_hci_driver_register+0x20>
   19680:	6943      	ldr	r3, [r0, #20]
   19682:	b153      	cbz	r3, 1969a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   19684:	4b06      	ldr	r3, [pc, #24]	; (196a0 <bt_hci_driver_register+0x2c>)
   19686:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	return 0;
   1968a:	2000      	movs	r0, #0
   1968c:	4770      	bx	lr
		return -EALREADY;
   1968e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19692:	4770      	bx	lr
		return -EINVAL;
   19694:	f06f 0015 	mvn.w	r0, #21
   19698:	4770      	bx	lr
   1969a:	f06f 0015 	mvn.w	r0, #21
}
   1969e:	4770      	bx	lr
   196a0:	20008000 	.word	0x20008000

000196a4 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   196a4:	4b04      	ldr	r3, [pc, #16]	; (196b8 <bt_finalize_init+0x14>)
   196a6:	e8d3 1fef 	ldaex	r1, [r3]
   196aa:	f041 0104 	orr.w	r1, r1, #4
   196ae:	e8c3 1fe2 	stlex	r2, r1, [r3]
   196b2:	2a00      	cmp	r2, #0
   196b4:	d1f7      	bne.n	196a6 <bt_finalize_init+0x2>
}
   196b6:	4770      	bx	lr
   196b8:	200080cc 	.word	0x200080cc

000196bc <init_work>:
{
   196bc:	b508      	push	{r3, lr}
	err = bt_init();
   196be:	f011 ff60 	bl	2b582 <bt_init>
	if (ready_cb) {
   196c2:	4b02      	ldr	r3, [pc, #8]	; (196cc <init_work+0x10>)
   196c4:	681b      	ldr	r3, [r3, #0]
   196c6:	b103      	cbz	r3, 196ca <init_work+0xe>
		ready_cb(err);
   196c8:	4798      	blx	r3
}
   196ca:	bd08      	pop	{r3, pc}
   196cc:	20009920 	.word	0x20009920

000196d0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   196d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196d4:	b090      	sub	sp, #64	; 0x40
   196d6:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
   196d8:	4b65      	ldr	r3, [pc, #404]	; (19870 <bt_enable+0x1a0>)
   196da:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   196de:	2b00      	cmp	r3, #0
   196e0:	d05b      	beq.n	1979a <bt_enable+0xca>
   196e2:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   196e4:	4b63      	ldr	r3, [pc, #396]	; (19874 <bt_enable+0x1a4>)
   196e6:	e8d3 2fef 	ldaex	r2, [r3]
   196ea:	f022 0202 	bic.w	r2, r2, #2
   196ee:	e8c3 2fe1 	stlex	r1, r2, [r3]
   196f2:	2900      	cmp	r1, #0
   196f4:	d1f7      	bne.n	196e6 <bt_enable+0x16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   196f6:	e8d3 2fef 	ldaex	r2, [r3]
   196fa:	f042 0101 	orr.w	r1, r2, #1
   196fe:	e8c3 1fe0 	stlex	r0, r1, [r3]
   19702:	2800      	cmp	r0, #0
   19704:	d1f7      	bne.n	196f6 <bt_enable+0x26>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19706:	f012 0f01 	tst.w	r2, #1
   1970a:	f040 80ae 	bne.w	1986a <bt_enable+0x19a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   1970e:	4b5a      	ldr	r3, [pc, #360]	; (19878 <bt_enable+0x1a8>)
   19710:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19712:	4e5a      	ldr	r6, [pc, #360]	; (1987c <bt_enable+0x1ac>)
   19714:	2201      	movs	r2, #1
   19716:	4611      	mov	r1, r2
   19718:	4630      	mov	r0, r6
   1971a:	f015 fc19 	bl	2ef50 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1971e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   19722:	f015 fbf1 	bl	2ef08 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19726:	f8df 8158 	ldr.w	r8, [pc, #344]	; 19880 <bt_enable+0x1b0>
   1972a:	2200      	movs	r2, #0
   1972c:	2300      	movs	r3, #0
   1972e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19732:	2400      	movs	r4, #0
   19734:	9404      	str	r4, [sp, #16]
   19736:	f06f 0308 	mvn.w	r3, #8
   1973a:	9303      	str	r3, [sp, #12]
   1973c:	9402      	str	r4, [sp, #8]
   1973e:	9401      	str	r4, [sp, #4]
   19740:	9400      	str	r4, [sp, #0]
   19742:	4b50      	ldr	r3, [pc, #320]	; (19884 <bt_enable+0x1b4>)
   19744:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19748:	494f      	ldr	r1, [pc, #316]	; (19888 <bt_enable+0x1b8>)
   1974a:	4640      	mov	r0, r8
   1974c:	f00b fcba 	bl	250c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19750:	494e      	ldr	r1, [pc, #312]	; (1988c <bt_enable+0x1bc>)
   19752:	4640      	mov	r0, r8
   19754:	f00b fb50 	bl	24df8 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   19758:	f8df 8134 	ldr.w	r8, [pc, #308]	; 19890 <bt_enable+0x1c0>
   1975c:	4640      	mov	r0, r8
   1975e:	f00c fc6f 	bl	26040 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   19762:	9400      	str	r4, [sp, #0]
   19764:	f06f 0307 	mvn.w	r3, #7
   19768:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1976c:	4949      	ldr	r1, [pc, #292]	; (19894 <bt_enable+0x1c4>)
   1976e:	4640      	mov	r0, r8
   19770:	f00c fc80 	bl	26074 <k_work_queue_start>
   19774:	4948      	ldr	r1, [pc, #288]	; (19898 <bt_enable+0x1c8>)
   19776:	4640      	mov	r0, r8
   19778:	f00b fb3e 	bl	24df8 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   1977c:	6c33      	ldr	r3, [r6, #64]	; 0x40
   1977e:	68db      	ldr	r3, [r3, #12]
   19780:	4798      	blx	r3
	if (err) {
   19782:	4604      	mov	r4, r0
   19784:	bb70      	cbnz	r0, 197e4 <bt_enable+0x114>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   19786:	2d00      	cmp	r5, #0
   19788:	d06b      	beq.n	19862 <bt_enable+0x192>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   1978a:	4844      	ldr	r0, [pc, #272]	; (1989c <bt_enable+0x1cc>)
   1978c:	f00c fc50 	bl	26030 <k_work_submit>
	return 0;
}
   19790:	4620      	mov	r0, r4
   19792:	3720      	adds	r7, #32
   19794:	46bd      	mov	sp, r7
   19796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("No HCI driver registered");
   1979a:	4b41      	ldr	r3, [pc, #260]	; (198a0 <bt_enable+0x1d0>)
   1979c:	61fb      	str	r3, [r7, #28]
   1979e:	2302      	movs	r3, #2
   197a0:	713b      	strb	r3, [r7, #4]
   197a2:	2300      	movs	r3, #0
   197a4:	717b      	strb	r3, [r7, #5]
   197a6:	71bb      	strb	r3, [r7, #6]
   197a8:	71fb      	strb	r3, [r7, #7]
   197aa:	687a      	ldr	r2, [r7, #4]
   197ac:	61ba      	str	r2, [r7, #24]
   197ae:	4619      	mov	r1, r3
   197b0:	f363 0100 	bfi	r1, r3, #0, #1
   197b4:	f363 0141 	bfi	r1, r3, #1, #1
   197b8:	f363 0182 	bfi	r1, r3, #2, #1
   197bc:	f363 01c5 	bfi	r1, r3, #3, #3
   197c0:	2201      	movs	r2, #1
   197c2:	f362 1188 	bfi	r1, r2, #6, #3
   197c6:	2208      	movs	r2, #8
   197c8:	f362 2152 	bfi	r1, r2, #9, #10
   197cc:	f363 41de 	bfi	r1, r3, #19, #12
   197d0:	f363 71df 	bfi	r1, r3, #31, #1
   197d4:	f107 0218 	add.w	r2, r7, #24
   197d8:	4832      	ldr	r0, [pc, #200]	; (198a4 <bt_enable+0x1d4>)
   197da:	f7fa fa8f 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -ENODEV;
   197de:	f06f 0412 	mvn.w	r4, #18
   197e2:	e7d5      	b.n	19790 <bt_enable+0xc0>
		BT_ERR("HCI driver open failed (%d)", err);
   197e4:	466e      	mov	r6, sp
   197e6:	b088      	sub	sp, #32
   197e8:	4633      	mov	r3, r6
   197ea:	f116 0210 	adds.w	r2, r6, #16
   197ee:	d00d      	beq.n	1980c <bt_enable+0x13c>
   197f0:	210c      	movs	r1, #12
   197f2:	b13a      	cbz	r2, 19804 <bt_enable+0x134>
   197f4:	4608      	mov	r0, r1
   197f6:	2904      	cmp	r1, #4
   197f8:	dd01      	ble.n	197fe <bt_enable+0x12e>
   197fa:	4d2b      	ldr	r5, [pc, #172]	; (198a8 <bt_enable+0x1d8>)
   197fc:	615d      	str	r5, [r3, #20]
   197fe:	2808      	cmp	r0, #8
   19800:	dd07      	ble.n	19812 <bt_enable+0x142>
   19802:	619c      	str	r4, [r3, #24]
   19804:	290b      	cmp	r1, #11
   19806:	dd29      	ble.n	1985c <bt_enable+0x18c>
   19808:	250c      	movs	r5, #12
   1980a:	e004      	b.n	19816 <bt_enable+0x146>
   1980c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19810:	e7ef      	b.n	197f2 <bt_enable+0x122>
   19812:	f06f 051b 	mvn.w	r5, #27
   19816:	b13a      	cbz	r2, 19828 <bt_enable+0x158>
   19818:	2103      	movs	r1, #3
   1981a:	7139      	strb	r1, [r7, #4]
   1981c:	2100      	movs	r1, #0
   1981e:	7179      	strb	r1, [r7, #5]
   19820:	71b9      	strb	r1, [r7, #6]
   19822:	71f9      	strb	r1, [r7, #7]
   19824:	6878      	ldr	r0, [r7, #4]
   19826:	6118      	str	r0, [r3, #16]
   19828:	2100      	movs	r1, #0
   1982a:	f36f 0100 	bfc	r1, #0, #1
   1982e:	f36f 0141 	bfc	r1, #1, #1
   19832:	f36f 0182 	bfc	r1, #2, #1
   19836:	f36f 01c5 	bfc	r1, #3, #3
   1983a:	2301      	movs	r3, #1
   1983c:	f363 1188 	bfi	r1, r3, #6, #3
   19840:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   19844:	f363 2152 	bfi	r1, r3, #9, #10
   19848:	f36f 41de 	bfc	r1, #19, #12
   1984c:	f36f 71df 	bfc	r1, #31, #1
   19850:	2300      	movs	r3, #0
   19852:	4814      	ldr	r0, [pc, #80]	; (198a4 <bt_enable+0x1d4>)
   19854:	f7fa fa52 	bl	13cfc <z_impl_z_log_msg_static_create>
   19858:	46b5      	mov	sp, r6
		return err;
   1985a:	e799      	b.n	19790 <bt_enable+0xc0>
		BT_ERR("HCI driver open failed (%d)", err);
   1985c:	f06f 051b 	mvn.w	r5, #27
   19860:	e7d9      	b.n	19816 <bt_enable+0x146>
		return bt_init();
   19862:	f011 fe8e 	bl	2b582 <bt_init>
   19866:	4604      	mov	r4, r0
   19868:	e792      	b.n	19790 <bt_enable+0xc0>
		return -EALREADY;
   1986a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1986e:	e78f      	b.n	19790 <bt_enable+0xc0>
   19870:	20008000 	.word	0x20008000
   19874:	200080cc 	.word	0x200080cc
   19878:	20009920 	.word	0x20009920
   1987c:	20008118 	.word	0x20008118
   19880:	200090a8 	.word	0x200090a8
   19884:	00019489 	.word	0x00019489
   19888:	2000ae70 	.word	0x2000ae70
   1988c:	00031aac 	.word	0x00031aac
   19890:	20009160 	.word	0x20009160
   19894:	2000b270 	.word	0x2000b270
   19898:	00031ab4 	.word	0x00031ab4
   1989c:	200080bc 	.word	0x200080bc
   198a0:	00031a90 	.word	0x00031a90
   198a4:	0002f820 	.word	0x0002f820
   198a8:	00031abc 	.word	0x00031abc

000198ac <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198ac:	4b02      	ldr	r3, [pc, #8]	; (198b8 <bt_is_ready+0xc>)
   198ae:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   198b2:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   198b6:	4770      	bx	lr
   198b8:	200080cc 	.word	0x200080cc

000198bc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   198bc:	4800      	ldr	r0, [pc, #0]	; (198c0 <bt_get_name+0x4>)
   198be:	4770      	bx	lr
   198c0:	0002fd38 	.word	0x0002fd38

000198c4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   198c4:	b570      	push	{r4, r5, r6, lr}
   198c6:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   198c8:	2400      	movs	r4, #0
   198ca:	e001      	b.n	198d0 <id_find+0xc>
   198cc:	3401      	adds	r4, #1
   198ce:	b2e4      	uxtb	r4, r4
   198d0:	4b09      	ldr	r3, [pc, #36]	; (198f8 <id_find+0x34>)
   198d2:	79db      	ldrb	r3, [r3, #7]
   198d4:	42a3      	cmp	r3, r4
   198d6:	d90b      	bls.n	198f0 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   198d8:	4626      	mov	r6, r4
   198da:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   198de:	2207      	movs	r2, #7
   198e0:	4b05      	ldr	r3, [pc, #20]	; (198f8 <id_find+0x34>)
   198e2:	4419      	add	r1, r3
   198e4:	4628      	mov	r0, r5
   198e6:	f011 fc15 	bl	2b114 <memcmp>
   198ea:	2800      	cmp	r0, #0
   198ec:	d1ee      	bne.n	198cc <id_find+0x8>
   198ee:	e001      	b.n	198f4 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   198f0:	f06f 0601 	mvn.w	r6, #1
}
   198f4:	4630      	mov	r0, r6
   198f6:	bd70      	pop	{r4, r5, r6, pc}
   198f8:	20008000 	.word	0x20008000

000198fc <set_random_address>:
{
   198fc:	b570      	push	{r4, r5, r6, lr}
   198fe:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   19900:	2206      	movs	r2, #6
   19902:	4914      	ldr	r1, [pc, #80]	; (19954 <set_random_address+0x58>)
   19904:	f011 fc06 	bl	2b114 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19908:	4605      	mov	r5, r0
   1990a:	b908      	cbnz	r0, 19910 <set_random_address+0x14>
}
   1990c:	4628      	mov	r0, r5
   1990e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   19910:	2106      	movs	r1, #6
   19912:	f242 0005 	movw	r0, #8197	; 0x2005
   19916:	f7fe fba1 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   1991a:	4605      	mov	r5, r0
   1991c:	b1b8      	cbz	r0, 1994e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1991e:	2206      	movs	r2, #6
   19920:	4621      	mov	r1, r4
   19922:	3008      	adds	r0, #8
   19924:	f013 fce0 	bl	2d2e8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19928:	2200      	movs	r2, #0
   1992a:	4629      	mov	r1, r5
   1992c:	f242 0005 	movw	r0, #8197	; 0x2005
   19930:	f7fe fbe6 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   19934:	4605      	mov	r5, r0
   19936:	2800      	cmp	r0, #0
   19938:	d1e8      	bne.n	1990c <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   1993a:	4e06      	ldr	r6, [pc, #24]	; (19954 <set_random_address+0x58>)
   1993c:	2206      	movs	r2, #6
   1993e:	4621      	mov	r1, r4
   19940:	4630      	mov	r0, r6
   19942:	f011 fbf9 	bl	2b138 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   19946:	2301      	movs	r3, #1
   19948:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   1994c:	e7de      	b.n	1990c <set_random_address+0x10>
		return -ENOBUFS;
   1994e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   19952:	e7db      	b.n	1990c <set_random_address+0x10>
   19954:	20008061 	.word	0x20008061

00019958 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   19958:	b570      	push	{r4, r5, r6, lr}
   1995a:	b082      	sub	sp, #8
   1995c:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1995e:	460e      	mov	r6, r1
   19960:	b129      	cbz	r1, 1996e <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   19962:	2207      	movs	r2, #7
   19964:	4915      	ldr	r1, [pc, #84]	; (199bc <id_create+0x64>)
   19966:	4630      	mov	r0, r6
   19968:	f011 fbd4 	bl	2b114 <memcmp>
   1996c:	b9d8      	cbnz	r0, 199a6 <id_create+0x4e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   1996e:	4668      	mov	r0, sp
   19970:	f011 fc8e 	bl	2b290 <bt_addr_le_create_static>
			if (err) {
   19974:	4604      	mov	r4, r0
   19976:	b998      	cbnz	r0, 199a0 <id_create+0x48>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   19978:	4668      	mov	r0, sp
   1997a:	f7ff ffa3 	bl	198c4 <id_find>
   1997e:	2800      	cmp	r0, #0
   19980:	daf5      	bge.n	1996e <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   19982:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   19986:	4b0e      	ldr	r3, [pc, #56]	; (199c0 <id_create+0x68>)
   19988:	441d      	add	r5, r3
	memcpy(dst, src, sizeof(*dst));
   1998a:	2207      	movs	r2, #7
   1998c:	4669      	mov	r1, sp
   1998e:	4628      	mov	r0, r5
   19990:	f011 fbd2 	bl	2b138 <memcpy>

		if (addr) {
   19994:	b126      	cbz	r6, 199a0 <id_create+0x48>
   19996:	2207      	movs	r2, #7
   19998:	4629      	mov	r1, r5
   1999a:	4630      	mov	r0, r6
   1999c:	f011 fbcc 	bl	2b138 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   199a0:	4620      	mov	r0, r4
   199a2:	b002      	add	sp, #8
   199a4:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   199a6:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   199aa:	2207      	movs	r2, #7
   199ac:	4631      	mov	r1, r6
   199ae:	4804      	ldr	r0, [pc, #16]	; (199c0 <id_create+0x68>)
   199b0:	4428      	add	r0, r5
   199b2:	f011 fbc1 	bl	2b138 <memcpy>
	return 0;
   199b6:	2400      	movs	r4, #0
}
   199b8:	e7f2      	b.n	199a0 <id_create+0x48>
   199ba:	bf00      	nop
   199bc:	0003136c 	.word	0x0003136c
   199c0:	20008000 	.word	0x20008000

000199c4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   199c4:	b570      	push	{r4, r5, r6, lr}
   199c6:	b08a      	sub	sp, #40	; 0x28
   199c8:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   199ca:	4605      	mov	r5, r0
   199cc:	b188      	cbz	r0, 199f2 <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   199ce:	2207      	movs	r2, #7
   199d0:	4936      	ldr	r1, [pc, #216]	; (19aac <bt_id_create+0xe8>)
   199d2:	f011 fb9f 	bl	2b114 <memcmp>
   199d6:	b160      	cbz	r0, 199f2 <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   199d8:	782b      	ldrb	r3, [r5, #0]
   199da:	2b01      	cmp	r3, #1
   199dc:	d132      	bne.n	19a44 <bt_id_create+0x80>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   199de:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   199e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   199e4:	2bc0      	cmp	r3, #192	; 0xc0
   199e6:	d12d      	bne.n	19a44 <bt_id_create+0x80>
			BT_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   199e8:	4628      	mov	r0, r5
   199ea:	f7ff ff6b 	bl	198c4 <id_find>
   199ee:	2800      	cmp	r0, #0
   199f0:	da53      	bge.n	19a9a <bt_id_create+0xd6>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   199f2:	2c00      	cmp	r4, #0
   199f4:	d154      	bne.n	19aa0 <bt_id_create+0xdc>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   199f6:	4b2e      	ldr	r3, [pc, #184]	; (19ab0 <bt_id_create+0xec>)
   199f8:	79db      	ldrb	r3, [r3, #7]
   199fa:	2b01      	cmp	r3, #1
   199fc:	d053      	beq.n	19aa6 <bt_id_create+0xe2>
   199fe:	4b2d      	ldr	r3, [pc, #180]	; (19ab4 <bt_id_create+0xf0>)
   19a00:	e8d3 3faf 	lda	r3, [r3]
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19a04:	f013 0f01 	tst.w	r3, #1
   19a08:	d10d      	bne.n	19a26 <bt_id_create+0x62>
		uint8_t zero_irk[16] = { 0 };
   19a0a:	2300      	movs	r3, #0
   19a0c:	9300      	str	r3, [sp, #0]
   19a0e:	9301      	str	r3, [sp, #4]
   19a10:	9302      	str	r3, [sp, #8]
   19a12:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   19a14:	2d00      	cmp	r5, #0
   19a16:	d03d      	beq.n	19a94 <bt_id_create+0xd0>
   19a18:	2207      	movs	r2, #7
   19a1a:	4924      	ldr	r1, [pc, #144]	; (19aac <bt_id_create+0xe8>)
   19a1c:	4628      	mov	r0, r5
   19a1e:	f011 fb79 	bl	2b114 <memcmp>
   19a22:	2800      	cmp	r0, #0
   19a24:	d036      	beq.n	19a94 <bt_id_create+0xd0>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   19a26:	4b22      	ldr	r3, [pc, #136]	; (19ab0 <bt_id_create+0xec>)
   19a28:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   19a2a:	4622      	mov	r2, r4
   19a2c:	4629      	mov	r1, r5
   19a2e:	4630      	mov	r0, r6
   19a30:	f7ff ff92 	bl	19958 <id_create>
	if (err) {
   19a34:	b920      	cbnz	r0, 19a40 <bt_id_create+0x7c>
		return err;
	} else {
		bt_dev.id_count++;
   19a36:	4a1e      	ldr	r2, [pc, #120]	; (19ab0 <bt_id_create+0xec>)
   19a38:	79d3      	ldrb	r3, [r2, #7]
   19a3a:	3301      	adds	r3, #1
   19a3c:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   19a3e:	4630      	mov	r0, r6
}
   19a40:	b00a      	add	sp, #40	; 0x28
   19a42:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Only static random identity address supported");
   19a44:	4b1c      	ldr	r3, [pc, #112]	; (19ab8 <bt_id_create+0xf4>)
   19a46:	9309      	str	r3, [sp, #36]	; 0x24
   19a48:	2302      	movs	r3, #2
   19a4a:	f88d 3000 	strb.w	r3, [sp]
   19a4e:	2300      	movs	r3, #0
   19a50:	f88d 3001 	strb.w	r3, [sp, #1]
   19a54:	f88d 3002 	strb.w	r3, [sp, #2]
   19a58:	f88d 3003 	strb.w	r3, [sp, #3]
   19a5c:	9a00      	ldr	r2, [sp, #0]
   19a5e:	9208      	str	r2, [sp, #32]
   19a60:	4619      	mov	r1, r3
   19a62:	f363 0100 	bfi	r1, r3, #0, #1
   19a66:	f363 0141 	bfi	r1, r3, #1, #1
   19a6a:	f363 0182 	bfi	r1, r3, #2, #1
   19a6e:	f363 01c5 	bfi	r1, r3, #3, #3
   19a72:	2201      	movs	r2, #1
   19a74:	f362 1188 	bfi	r1, r2, #6, #3
   19a78:	2208      	movs	r2, #8
   19a7a:	f362 2152 	bfi	r1, r2, #9, #10
   19a7e:	f363 41de 	bfi	r1, r3, #19, #12
   19a82:	f363 71df 	bfi	r1, r3, #31, #1
   19a86:	aa08      	add	r2, sp, #32
   19a88:	480c      	ldr	r0, [pc, #48]	; (19abc <bt_id_create+0xf8>)
   19a8a:	f7fa f937 	bl	13cfc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   19a8e:	f06f 0015 	mvn.w	r0, #21
   19a92:	e7d5      	b.n	19a40 <bt_id_create+0x7c>
			return -EINVAL;
   19a94:	f06f 0015 	mvn.w	r0, #21
   19a98:	e7d2      	b.n	19a40 <bt_id_create+0x7c>
			return -EALREADY;
   19a9a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19a9e:	e7cf      	b.n	19a40 <bt_id_create+0x7c>
		return -EINVAL;
   19aa0:	f06f 0015 	mvn.w	r0, #21
   19aa4:	e7cc      	b.n	19a40 <bt_id_create+0x7c>
		return -ENOMEM;
   19aa6:	f06f 000b 	mvn.w	r0, #11
   19aaa:	e7c9      	b.n	19a40 <bt_id_create+0x7c>
   19aac:	0003136c 	.word	0x0003136c
   19ab0:	20008000 	.word	0x20008000
   19ab4:	200080cc 	.word	0x200080cc
   19ab8:	00031b74 	.word	0x00031b74
   19abc:	0002f830 	.word	0x0002f830

00019ac0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   19ac0:	b530      	push	{r4, r5, lr}
   19ac2:	b08f      	sub	sp, #60	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   19ac4:	b1f0      	cbz	r0, 19b04 <bt_id_read_public_addr+0x44>
   19ac6:	4605      	mov	r5, r0
		BT_WARN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   19ac8:	aa01      	add	r2, sp, #4
   19aca:	2100      	movs	r1, #0
   19acc:	f241 0009 	movw	r0, #4105	; 0x1009
   19ad0:	f7fe fb16 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   19ad4:	2800      	cmp	r0, #0
   19ad6:	d13c      	bne.n	19b52 <bt_id_read_public_addr+0x92>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   19ad8:	9b01      	ldr	r3, [sp, #4]
   19ada:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   19adc:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   19ade:	2206      	movs	r2, #6
   19ae0:	4935      	ldr	r1, [pc, #212]	; (19bb8 <bt_id_read_public_addr+0xf8>)
   19ae2:	4620      	mov	r0, r4
   19ae4:	f011 fb16 	bl	2b114 <memcmp>
   19ae8:	b130      	cbz	r0, 19af8 <bt_id_read_public_addr+0x38>
   19aea:	2206      	movs	r2, #6
   19aec:	4933      	ldr	r1, [pc, #204]	; (19bbc <bt_id_read_public_addr+0xfc>)
   19aee:	4620      	mov	r0, r4
   19af0:	f011 fb10 	bl	2b114 <memcmp>
   19af4:	2800      	cmp	r0, #0
   19af6:	d153      	bne.n	19ba0 <bt_id_read_public_addr+0xe0>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   19af8:	9801      	ldr	r0, [sp, #4]
   19afa:	f005 fce3 	bl	1f4c4 <net_buf_unref>
		return 0U;
   19afe:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   19b00:	b00f      	add	sp, #60	; 0x3c
   19b02:	bd30      	pop	{r4, r5, pc}
		BT_WARN("Invalid input parameters");
   19b04:	4b2e      	ldr	r3, [pc, #184]	; (19bc0 <bt_id_read_public_addr+0x100>)
   19b06:	930d      	str	r3, [sp, #52]	; 0x34
   19b08:	2302      	movs	r3, #2
   19b0a:	f88d 3000 	strb.w	r3, [sp]
   19b0e:	2400      	movs	r4, #0
   19b10:	f88d 4001 	strb.w	r4, [sp, #1]
   19b14:	f88d 4002 	strb.w	r4, [sp, #2]
   19b18:	f88d 4003 	strb.w	r4, [sp, #3]
   19b1c:	9a00      	ldr	r2, [sp, #0]
   19b1e:	920c      	str	r2, [sp, #48]	; 0x30
   19b20:	4621      	mov	r1, r4
   19b22:	f364 0100 	bfi	r1, r4, #0, #1
   19b26:	f364 0141 	bfi	r1, r4, #1, #1
   19b2a:	f364 0182 	bfi	r1, r4, #2, #1
   19b2e:	f364 01c5 	bfi	r1, r4, #3, #3
   19b32:	f363 1188 	bfi	r1, r3, #6, #3
   19b36:	2308      	movs	r3, #8
   19b38:	f363 2152 	bfi	r1, r3, #9, #10
   19b3c:	f364 41de 	bfi	r1, r4, #19, #12
   19b40:	f364 71df 	bfi	r1, r4, #31, #1
   19b44:	4623      	mov	r3, r4
   19b46:	aa0c      	add	r2, sp, #48	; 0x30
   19b48:	481e      	ldr	r0, [pc, #120]	; (19bc4 <bt_id_read_public_addr+0x104>)
   19b4a:	f7fa f8d7 	bl	13cfc <z_impl_z_log_msg_static_create>
		return 0U;
   19b4e:	4620      	mov	r0, r4
   19b50:	e7d6      	b.n	19b00 <bt_id_read_public_addr+0x40>
		BT_WARN("Failed to read public address");
   19b52:	4b1d      	ldr	r3, [pc, #116]	; (19bc8 <bt_id_read_public_addr+0x108>)
   19b54:	9307      	str	r3, [sp, #28]
   19b56:	2302      	movs	r3, #2
   19b58:	f88d 3000 	strb.w	r3, [sp]
   19b5c:	2400      	movs	r4, #0
   19b5e:	f88d 4001 	strb.w	r4, [sp, #1]
   19b62:	f88d 4002 	strb.w	r4, [sp, #2]
   19b66:	f88d 4003 	strb.w	r4, [sp, #3]
   19b6a:	9a00      	ldr	r2, [sp, #0]
   19b6c:	9206      	str	r2, [sp, #24]
   19b6e:	4621      	mov	r1, r4
   19b70:	f364 0100 	bfi	r1, r4, #0, #1
   19b74:	f364 0141 	bfi	r1, r4, #1, #1
   19b78:	f364 0182 	bfi	r1, r4, #2, #1
   19b7c:	f364 01c5 	bfi	r1, r4, #3, #3
   19b80:	f363 1188 	bfi	r1, r3, #6, #3
   19b84:	2308      	movs	r3, #8
   19b86:	f363 2152 	bfi	r1, r3, #9, #10
   19b8a:	f364 41de 	bfi	r1, r4, #19, #12
   19b8e:	f364 71df 	bfi	r1, r4, #31, #1
   19b92:	4623      	mov	r3, r4
   19b94:	aa06      	add	r2, sp, #24
   19b96:	480b      	ldr	r0, [pc, #44]	; (19bc4 <bt_id_read_public_addr+0x104>)
   19b98:	f7fa f8b0 	bl	13cfc <z_impl_z_log_msg_static_create>
		return 0U;
   19b9c:	4620      	mov	r0, r4
   19b9e:	e7af      	b.n	19b00 <bt_id_read_public_addr+0x40>
	memcpy(dst, src, sizeof(*dst));
   19ba0:	2206      	movs	r2, #6
   19ba2:	4621      	mov	r1, r4
   19ba4:	1c68      	adds	r0, r5, #1
   19ba6:	f011 fac7 	bl	2b138 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   19baa:	2300      	movs	r3, #0
   19bac:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   19bae:	9801      	ldr	r0, [sp, #4]
   19bb0:	f005 fc88 	bl	1f4c4 <net_buf_unref>
	return 1U;
   19bb4:	2001      	movs	r0, #1
   19bb6:	e7a3      	b.n	19b00 <bt_id_read_public_addr+0x40>
   19bb8:	0003137c 	.word	0x0003137c
   19bbc:	00031374 	.word	0x00031374
   19bc0:	00031ba4 	.word	0x00031ba4
   19bc4:	0002f830 	.word	0x0002f830
   19bc8:	00031bc0 	.word	0x00031bc0

00019bcc <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   19bcc:	b500      	push	{lr}
   19bce:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   19bd0:	4668      	mov	r0, sp
   19bd2:	f7ff ff75 	bl	19ac0 <bt_id_read_public_addr>
   19bd6:	4b06      	ldr	r3, [pc, #24]	; (19bf0 <bt_setup_public_id_addr+0x24>)
   19bd8:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   19bda:	b918      	cbnz	r0, 19be4 <bt_setup_public_id_addr+0x18>
		return 0;
   19bdc:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   19bde:	b003      	add	sp, #12
   19be0:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   19be4:	2200      	movs	r2, #0
   19be6:	4669      	mov	r1, sp
   19be8:	4610      	mov	r0, r2
   19bea:	f7ff feb5 	bl	19958 <id_create>
   19bee:	e7f6      	b.n	19bde <bt_setup_public_id_addr+0x12>
   19bf0:	20008000 	.word	0x20008000

00019bf4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   19bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19bf8:	b094      	sub	sp, #80	; 0x50
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   19bfa:	4b4d      	ldr	r3, [pc, #308]	; (19d30 <bt_read_static_addr+0x13c>)
   19bfc:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   19c00:	f015 0501 	ands.w	r5, r5, #1
   19c04:	d010      	beq.n	19c28 <bt_read_static_addr+0x34>
   19c06:	4606      	mov	r6, r0
   19c08:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   19c0a:	aa01      	add	r2, sp, #4
   19c0c:	2100      	movs	r1, #0
   19c0e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   19c12:	f7fe fa75 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   19c16:	4604      	mov	r4, r0
   19c18:	bb58      	cbnz	r0, 19c72 <bt_read_static_addr+0x7e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   19c1a:	9b01      	ldr	r3, [sp, #4]
   19c1c:	689f      	ldr	r7, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   19c1e:	787d      	ldrb	r5, [r7, #1]
   19c20:	4545      	cmp	r5, r8
   19c22:	bf28      	it	cs
   19c24:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   19c26:	e053      	b.n	19cd0 <bt_read_static_addr+0xdc>
		BT_WARN("Read Static Addresses command not available");
   19c28:	4b42      	ldr	r3, [pc, #264]	; (19d34 <bt_read_static_addr+0x140>)
   19c2a:	9313      	str	r3, [sp, #76]	; 0x4c
   19c2c:	2202      	movs	r2, #2
   19c2e:	f88d 2000 	strb.w	r2, [sp]
   19c32:	2300      	movs	r3, #0
   19c34:	f88d 3001 	strb.w	r3, [sp, #1]
   19c38:	f88d 3002 	strb.w	r3, [sp, #2]
   19c3c:	f88d 3003 	strb.w	r3, [sp, #3]
   19c40:	9900      	ldr	r1, [sp, #0]
   19c42:	9112      	str	r1, [sp, #72]	; 0x48
   19c44:	4619      	mov	r1, r3
   19c46:	f363 0100 	bfi	r1, r3, #0, #1
   19c4a:	f363 0141 	bfi	r1, r3, #1, #1
   19c4e:	f363 0182 	bfi	r1, r3, #2, #1
   19c52:	f363 01c5 	bfi	r1, r3, #3, #3
   19c56:	f362 1188 	bfi	r1, r2, #6, #3
   19c5a:	2208      	movs	r2, #8
   19c5c:	f362 2152 	bfi	r1, r2, #9, #10
   19c60:	f363 41de 	bfi	r1, r3, #19, #12
   19c64:	f363 71df 	bfi	r1, r3, #31, #1
   19c68:	aa12      	add	r2, sp, #72	; 0x48
   19c6a:	4833      	ldr	r0, [pc, #204]	; (19d38 <bt_read_static_addr+0x144>)
   19c6c:	f7fa f846 	bl	13cfc <z_impl_z_log_msg_static_create>
		return 0;
   19c70:	e034      	b.n	19cdc <bt_read_static_addr+0xe8>
		BT_WARN("Failed to read static addresses");
   19c72:	4b32      	ldr	r3, [pc, #200]	; (19d3c <bt_read_static_addr+0x148>)
   19c74:	930d      	str	r3, [sp, #52]	; 0x34
   19c76:	2302      	movs	r3, #2
   19c78:	f88d 3000 	strb.w	r3, [sp]
   19c7c:	2500      	movs	r5, #0
   19c7e:	f88d 5001 	strb.w	r5, [sp, #1]
   19c82:	f88d 5002 	strb.w	r5, [sp, #2]
   19c86:	f88d 5003 	strb.w	r5, [sp, #3]
   19c8a:	9a00      	ldr	r2, [sp, #0]
   19c8c:	920c      	str	r2, [sp, #48]	; 0x30
   19c8e:	4629      	mov	r1, r5
   19c90:	f365 0100 	bfi	r1, r5, #0, #1
   19c94:	f365 0141 	bfi	r1, r5, #1, #1
   19c98:	f365 0182 	bfi	r1, r5, #2, #1
   19c9c:	f365 01c5 	bfi	r1, r5, #3, #3
   19ca0:	f363 1188 	bfi	r1, r3, #6, #3
   19ca4:	2308      	movs	r3, #8
   19ca6:	f363 2152 	bfi	r1, r3, #9, #10
   19caa:	f365 41de 	bfi	r1, r5, #19, #12
   19cae:	f365 71df 	bfi	r1, r5, #31, #1
   19cb2:	462b      	mov	r3, r5
   19cb4:	aa0c      	add	r2, sp, #48	; 0x30
   19cb6:	4820      	ldr	r0, [pc, #128]	; (19d38 <bt_read_static_addr+0x144>)
   19cb8:	f7fa f820 	bl	13cfc <z_impl_z_log_msg_static_create>
		return 0;
   19cbc:	e00e      	b.n	19cdc <bt_read_static_addr+0xe8>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   19cbe:	2216      	movs	r2, #22
   19cc0:	fb02 f004 	mul.w	r0, r2, r4
   19cc4:	1839      	adds	r1, r7, r0
   19cc6:	3102      	adds	r1, #2
   19cc8:	4430      	add	r0, r6
   19cca:	f011 fa35 	bl	2b138 <memcpy>
	for (i = 0; i < cnt; i++) {
   19cce:	3401      	adds	r4, #1
   19cd0:	42a5      	cmp	r5, r4
   19cd2:	dcf4      	bgt.n	19cbe <bt_read_static_addr+0xca>
	}

	net_buf_unref(rsp);
   19cd4:	9801      	ldr	r0, [sp, #4]
   19cd6:	f005 fbf5 	bl	1f4c4 <net_buf_unref>
	if (!cnt) {
   19cda:	b11d      	cbz	r5, 19ce4 <bt_read_static_addr+0xf0>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   19cdc:	4628      	mov	r0, r5
   19cde:	b014      	add	sp, #80	; 0x50
   19ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No static addresses stored in controller");
   19ce4:	4b16      	ldr	r3, [pc, #88]	; (19d40 <bt_read_static_addr+0x14c>)
   19ce6:	9307      	str	r3, [sp, #28]
   19ce8:	2202      	movs	r2, #2
   19cea:	f88d 2000 	strb.w	r2, [sp]
   19cee:	2300      	movs	r3, #0
   19cf0:	f88d 3001 	strb.w	r3, [sp, #1]
   19cf4:	f88d 3002 	strb.w	r3, [sp, #2]
   19cf8:	f88d 3003 	strb.w	r3, [sp, #3]
   19cfc:	9900      	ldr	r1, [sp, #0]
   19cfe:	9106      	str	r1, [sp, #24]
   19d00:	4619      	mov	r1, r3
   19d02:	f363 0100 	bfi	r1, r3, #0, #1
   19d06:	f363 0141 	bfi	r1, r3, #1, #1
   19d0a:	f363 0182 	bfi	r1, r3, #2, #1
   19d0e:	f363 01c5 	bfi	r1, r3, #3, #3
   19d12:	f362 1188 	bfi	r1, r2, #6, #3
   19d16:	2208      	movs	r2, #8
   19d18:	f362 2152 	bfi	r1, r2, #9, #10
   19d1c:	f363 41de 	bfi	r1, r3, #19, #12
   19d20:	f363 71df 	bfi	r1, r3, #31, #1
   19d24:	aa06      	add	r2, sp, #24
   19d26:	4804      	ldr	r0, [pc, #16]	; (19d38 <bt_read_static_addr+0x144>)
   19d28:	f7f9 ffe8 	bl	13cfc <z_impl_z_log_msg_static_create>
   19d2c:	e7d6      	b.n	19cdc <bt_read_static_addr+0xe8>
   19d2e:	bf00      	nop
   19d30:	20008000 	.word	0x20008000
   19d34:	00031be0 	.word	0x00031be0
   19d38:	0002f830 	.word	0x0002f830
   19d3c:	00031c0c 	.word	0x00031c0c
   19d40:	00031c2c 	.word	0x00031c2c

00019d44 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   19d44:	b510      	push	{r4, lr}
   19d46:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   19d48:	4b17      	ldr	r3, [pc, #92]	; (19da8 <bt_setup_random_id_addr+0x64>)
   19d4a:	79dc      	ldrb	r4, [r3, #7]
   19d4c:	b934      	cbnz	r4, 19d5c <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   19d4e:	2101      	movs	r1, #1
   19d50:	a802      	add	r0, sp, #8
   19d52:	f7ff ff4f 	bl	19bf4 <bt_read_static_addr>
   19d56:	4b14      	ldr	r3, [pc, #80]	; (19da8 <bt_setup_random_id_addr+0x64>)
   19d58:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   19d5a:	b948      	cbnz	r0, 19d70 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   19d5c:	2100      	movs	r1, #0
   19d5e:	4608      	mov	r0, r1
   19d60:	f7ff fe30 	bl	199c4 <bt_id_create>
   19d64:	4603      	mov	r3, r0
}
   19d66:	4618      	mov	r0, r3
   19d68:	b008      	add	sp, #32
   19d6a:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   19d6c:	3401      	adds	r4, #1
   19d6e:	b2e4      	uxtb	r4, r4
   19d70:	4b0d      	ldr	r3, [pc, #52]	; (19da8 <bt_setup_random_id_addr+0x64>)
   19d72:	79db      	ldrb	r3, [r3, #7]
   19d74:	42a3      	cmp	r3, r4
   19d76:	d914      	bls.n	19da2 <bt_setup_random_id_addr+0x5e>
   19d78:	2206      	movs	r2, #6
   19d7a:	2116      	movs	r1, #22
   19d7c:	ab02      	add	r3, sp, #8
   19d7e:	fb01 3104 	mla	r1, r1, r4, r3
   19d82:	f10d 0001 	add.w	r0, sp, #1
   19d86:	f011 f9d7 	bl	2b138 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   19d8a:	2301      	movs	r3, #1
   19d8c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   19d90:	2200      	movs	r2, #0
   19d92:	4669      	mov	r1, sp
   19d94:	4620      	mov	r0, r4
   19d96:	f7ff fddf 	bl	19958 <id_create>
				if (err) {
   19d9a:	4603      	mov	r3, r0
   19d9c:	2800      	cmp	r0, #0
   19d9e:	d0e5      	beq.n	19d6c <bt_setup_random_id_addr+0x28>
   19da0:	e7e1      	b.n	19d66 <bt_setup_random_id_addr+0x22>
			return 0;
   19da2:	2300      	movs	r3, #0
   19da4:	e7df      	b.n	19d66 <bt_setup_random_id_addr+0x22>
   19da6:	bf00      	nop
   19da8:	20008000 	.word	0x20008000

00019dac <bt_id_set_adv_own_addr>:
			   bool dir_adv, uint8_t *own_addr_type)
{
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   19dac:	2800      	cmp	r0, #0
   19dae:	d051      	beq.n	19e54 <bt_id_set_adv_own_addr+0xa8>
{
   19db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19db2:	460e      	mov	r6, r1
   19db4:	4617      	mov	r7, r2
   19db6:	461d      	mov	r5, r3
   19db8:	4603      	mov	r3, r0
	CHECKIF(adv == NULL || own_addr_type == NULL) {
   19dba:	2d00      	cmp	r5, #0
   19dbc:	d04d      	beq.n	19e5a <bt_id_set_adv_own_addr+0xae>
		return -EINVAL;
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   19dbe:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   19dc0:	f011 0f01 	tst.w	r1, #1
   19dc4:	d029      	beq.n	19e1a <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   19dc6:	b142      	cbz	r2, 19dda <bt_id_set_adv_own_addr+0x2e>
   19dc8:	f011 0f20 	tst.w	r1, #32
   19dcc:	d005      	beq.n	19dda <bt_id_set_adv_own_addr+0x2e>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   19dce:	4a28      	ldr	r2, [pc, #160]	; (19e70 <bt_id_set_adv_own_addr+0xc4>)
   19dd0:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   19dd4:	f012 0f40 	tst.w	r2, #64	; 0x40
   19dd8:	d042      	beq.n	19e60 <bt_id_set_adv_own_addr+0xb4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   19dda:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   19dde:	4924      	ldr	r1, [pc, #144]	; (19e70 <bt_id_set_adv_own_addr+0xc4>)
   19de0:	5c8a      	ldrb	r2, [r1, r2]
   19de2:	2a01      	cmp	r2, #1
   19de4:	d00e      	beq.n	19e04 <bt_id_set_adv_own_addr+0x58>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   19de6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19dea:	4b21      	ldr	r3, [pc, #132]	; (19e70 <bt_id_set_adv_own_addr+0xc4>)
   19dec:	5d1b      	ldrb	r3, [r3, r4]
   19dee:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   19df0:	2f00      	cmp	r7, #0
   19df2:	d038      	beq.n	19e66 <bt_id_set_adv_own_addr+0xba>
   19df4:	f016 0f20 	tst.w	r6, #32
   19df8:	d037      	beq.n	19e6a <bt_id_set_adv_own_addr+0xbe>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   19dfa:	f043 0302 	orr.w	r3, r3, #2
   19dfe:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   19e00:	2000      	movs	r0, #0
   19e02:	e019      	b.n	19e38 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   19e04:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   19e08:	4a19      	ldr	r2, [pc, #100]	; (19e70 <bt_id_set_adv_own_addr+0xc4>)
   19e0a:	4411      	add	r1, r2
   19e0c:	3101      	adds	r1, #1
   19e0e:	4618      	mov	r0, r3
   19e10:	f011 fbd2 	bl	2b5b8 <bt_id_set_adv_random_addr>
				if (err) {
   19e14:	2800      	cmp	r0, #0
   19e16:	d0e6      	beq.n	19de6 <bt_id_set_adv_own_addr+0x3a>
   19e18:	e00e      	b.n	19e38 <bt_id_set_adv_own_addr+0x8c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   19e1a:	f011 0f04 	tst.w	r1, #4
   19e1e:	d014      	beq.n	19e4a <bt_id_set_adv_own_addr+0x9e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   19e20:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   19e24:	4912      	ldr	r1, [pc, #72]	; (19e70 <bt_id_set_adv_own_addr+0xc4>)
   19e26:	5c8a      	ldrb	r2, [r1, r2]
   19e28:	2a01      	cmp	r2, #1
   19e2a:	d006      	beq.n	19e3a <bt_id_set_adv_own_addr+0x8e>
	int err = 0;
   19e2c:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   19e2e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19e32:	4b0f      	ldr	r3, [pc, #60]	; (19e70 <bt_id_set_adv_own_addr+0xc4>)
   19e34:	5d1b      	ldrb	r3, [r3, r4]
   19e36:	702b      	strb	r3, [r5, #0]
}
   19e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   19e3a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   19e3e:	4a0c      	ldr	r2, [pc, #48]	; (19e70 <bt_id_set_adv_own_addr+0xc4>)
   19e40:	4411      	add	r1, r2
   19e42:	3101      	adds	r1, #1
   19e44:	f011 fbb8 	bl	2b5b8 <bt_id_set_adv_random_addr>
   19e48:	e7f1      	b.n	19e2e <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   19e4a:	f011 fbc2 	bl	2b5d2 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   19e4e:	2301      	movs	r3, #1
   19e50:	702b      	strb	r3, [r5, #0]
		if (err) {
   19e52:	e7f1      	b.n	19e38 <bt_id_set_adv_own_addr+0x8c>
		return -EINVAL;
   19e54:	f06f 0015 	mvn.w	r0, #21
}
   19e58:	4770      	bx	lr
		return -EINVAL;
   19e5a:	f06f 0015 	mvn.w	r0, #21
   19e5e:	e7eb      	b.n	19e38 <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
   19e60:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19e64:	e7e8      	b.n	19e38 <bt_id_set_adv_own_addr+0x8c>
	return 0;
   19e66:	2000      	movs	r0, #0
   19e68:	e7e6      	b.n	19e38 <bt_id_set_adv_own_addr+0x8c>
   19e6a:	2000      	movs	r0, #0
   19e6c:	e7e4      	b.n	19e38 <bt_id_set_adv_own_addr+0x8c>
   19e6e:	bf00      	nop
   19e70:	20008000 	.word	0x20008000

00019e74 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   19e74:	b510      	push	{r4, lr}
   19e76:	b094      	sub	sp, #80	; 0x50
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   19e78:	4b45      	ldr	r3, [pc, #276]	; (19f90 <bt_id_init+0x11c>)
   19e7a:	79db      	ldrb	r3, [r3, #7]
   19e7c:	b133      	cbz	r3, 19e8c <bt_id_init+0x18>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   19e7e:	4b44      	ldr	r3, [pc, #272]	; (19f90 <bt_id_init+0x11c>)
   19e80:	79db      	ldrb	r3, [r3, #7]
   19e82:	b373      	cbz	r3, 19ee2 <bt_id_init+0x6e>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   19e84:	2400      	movs	r4, #0
}
   19e86:	4620      	mov	r0, r4
   19e88:	b014      	add	sp, #80	; 0x50
   19e8a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   19e8c:	f7ff fe9e 	bl	19bcc <bt_setup_public_id_addr>
		if (err) {
   19e90:	4604      	mov	r4, r0
   19e92:	2800      	cmp	r0, #0
   19e94:	d0f3      	beq.n	19e7e <bt_id_init+0xa>
			BT_ERR("Unable to set identity address");
   19e96:	4b3f      	ldr	r3, [pc, #252]	; (19f94 <bt_id_init+0x120>)
   19e98:	9307      	str	r3, [sp, #28]
   19e9a:	2302      	movs	r3, #2
   19e9c:	f88d 3004 	strb.w	r3, [sp, #4]
   19ea0:	2300      	movs	r3, #0
   19ea2:	f88d 3005 	strb.w	r3, [sp, #5]
   19ea6:	f88d 3006 	strb.w	r3, [sp, #6]
   19eaa:	f88d 3007 	strb.w	r3, [sp, #7]
   19eae:	9a01      	ldr	r2, [sp, #4]
   19eb0:	9206      	str	r2, [sp, #24]
   19eb2:	4619      	mov	r1, r3
   19eb4:	f363 0100 	bfi	r1, r3, #0, #1
   19eb8:	f363 0141 	bfi	r1, r3, #1, #1
   19ebc:	f363 0182 	bfi	r1, r3, #2, #1
   19ec0:	f363 01c5 	bfi	r1, r3, #3, #3
   19ec4:	2201      	movs	r2, #1
   19ec6:	f362 1188 	bfi	r1, r2, #6, #3
   19eca:	2208      	movs	r2, #8
   19ecc:	f362 2152 	bfi	r1, r2, #9, #10
   19ed0:	f363 41de 	bfi	r1, r3, #19, #12
   19ed4:	f363 71df 	bfi	r1, r3, #31, #1
   19ed8:	aa06      	add	r2, sp, #24
   19eda:	482f      	ldr	r0, [pc, #188]	; (19f98 <bt_id_init+0x124>)
   19edc:	f7f9 ff0e 	bl	13cfc <z_impl_z_log_msg_static_create>
			return err;
   19ee0:	e7d1      	b.n	19e86 <bt_id_init+0x12>
		err = bt_setup_random_id_addr();
   19ee2:	f7ff ff2f 	bl	19d44 <bt_setup_random_id_addr>
		if (err) {
   19ee6:	4604      	mov	r4, r0
   19ee8:	bb58      	cbnz	r0, 19f42 <bt_id_init+0xce>
		err = set_random_address(&bt_dev.id_addr[0].a);
   19eea:	482c      	ldr	r0, [pc, #176]	; (19f9c <bt_id_init+0x128>)
   19eec:	f7ff fd06 	bl	198fc <set_random_address>
		if (err) {
   19ef0:	4604      	mov	r4, r0
   19ef2:	2800      	cmp	r0, #0
   19ef4:	d0c7      	beq.n	19e86 <bt_id_init+0x12>
			BT_ERR("Unable to set random address");
   19ef6:	4b2a      	ldr	r3, [pc, #168]	; (19fa0 <bt_id_init+0x12c>)
   19ef8:	930d      	str	r3, [sp, #52]	; 0x34
   19efa:	2302      	movs	r3, #2
   19efc:	f88d 3004 	strb.w	r3, [sp, #4]
   19f00:	2300      	movs	r3, #0
   19f02:	f88d 3005 	strb.w	r3, [sp, #5]
   19f06:	f88d 3006 	strb.w	r3, [sp, #6]
   19f0a:	f88d 3007 	strb.w	r3, [sp, #7]
   19f0e:	9a01      	ldr	r2, [sp, #4]
   19f10:	920c      	str	r2, [sp, #48]	; 0x30
   19f12:	4619      	mov	r1, r3
   19f14:	f363 0100 	bfi	r1, r3, #0, #1
   19f18:	f363 0141 	bfi	r1, r3, #1, #1
   19f1c:	f363 0182 	bfi	r1, r3, #2, #1
   19f20:	f363 01c5 	bfi	r1, r3, #3, #3
   19f24:	2201      	movs	r2, #1
   19f26:	f362 1188 	bfi	r1, r2, #6, #3
   19f2a:	2208      	movs	r2, #8
   19f2c:	f362 2152 	bfi	r1, r2, #9, #10
   19f30:	f363 41de 	bfi	r1, r3, #19, #12
   19f34:	f363 71df 	bfi	r1, r3, #31, #1
   19f38:	aa0c      	add	r2, sp, #48	; 0x30
   19f3a:	4817      	ldr	r0, [pc, #92]	; (19f98 <bt_id_init+0x124>)
   19f3c:	f7f9 fede 	bl	13cfc <z_impl_z_log_msg_static_create>
			return err;
   19f40:	e7a1      	b.n	19e86 <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
   19f42:	4b14      	ldr	r3, [pc, #80]	; (19f94 <bt_id_init+0x120>)
   19f44:	9313      	str	r3, [sp, #76]	; 0x4c
   19f46:	2302      	movs	r3, #2
   19f48:	f88d 3004 	strb.w	r3, [sp, #4]
   19f4c:	2300      	movs	r3, #0
   19f4e:	f88d 3005 	strb.w	r3, [sp, #5]
   19f52:	f88d 3006 	strb.w	r3, [sp, #6]
   19f56:	f88d 3007 	strb.w	r3, [sp, #7]
   19f5a:	9a01      	ldr	r2, [sp, #4]
   19f5c:	9212      	str	r2, [sp, #72]	; 0x48
   19f5e:	4619      	mov	r1, r3
   19f60:	f363 0100 	bfi	r1, r3, #0, #1
   19f64:	f363 0141 	bfi	r1, r3, #1, #1
   19f68:	f363 0182 	bfi	r1, r3, #2, #1
   19f6c:	f363 01c5 	bfi	r1, r3, #3, #3
   19f70:	2201      	movs	r2, #1
   19f72:	f362 1188 	bfi	r1, r2, #6, #3
   19f76:	2208      	movs	r2, #8
   19f78:	f362 2152 	bfi	r1, r2, #9, #10
   19f7c:	f363 41de 	bfi	r1, r3, #19, #12
   19f80:	f363 71df 	bfi	r1, r3, #31, #1
   19f84:	aa12      	add	r2, sp, #72	; 0x48
   19f86:	4804      	ldr	r0, [pc, #16]	; (19f98 <bt_id_init+0x124>)
   19f88:	f7f9 feb8 	bl	13cfc <z_impl_z_log_msg_static_create>
			return err;
   19f8c:	e77b      	b.n	19e86 <bt_id_init+0x12>
   19f8e:	bf00      	nop
   19f90:	20008000 	.word	0x20008000
   19f94:	00031c58 	.word	0x00031c58
   19f98:	0002f830 	.word	0x0002f830
   19f9c:	20008001 	.word	0x20008001
   19fa0:	00031c78 	.word	0x00031c78

00019fa4 <adv_get_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   19fa4:	4800      	ldr	r0, [pc, #0]	; (19fa8 <adv_get_legacy+0x4>)
   19fa6:	4770      	bx	lr
   19fa8:	20008018 	.word	0x20008018

00019fac <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   19fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fb0:	b08b      	sub	sp, #44	; 0x2c
   19fb2:	4606      	mov	r6, r0
   19fb4:	4688      	mov	r8, r1
   19fb6:	4615      	mov	r5, r2
   19fb8:	469a      	mov	sl, r3
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   19fba:	f04f 0b00 	mov.w	fp, #0
	uint8_t set_data_len = 0;
   19fbe:	465b      	mov	r3, fp
	for (size_t i = 0; i < ad_len; i++) {
   19fc0:	45d3      	cmp	fp, sl
   19fc2:	d264      	bcs.n	1a08e <set_data_add_complete+0xe2>
		const struct bt_data *data = ad[i].data;
   19fc4:	eb05 09cb 	add.w	r9, r5, fp, lsl #3
   19fc8:	f855 703b 	ldr.w	r7, [r5, fp, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   19fcc:	2400      	movs	r4, #0
   19fce:	f8cd b000 	str.w	fp, [sp]
   19fd2:	9501      	str	r5, [sp, #4]
   19fd4:	e03d      	b.n	1a052 <set_data_add_complete+0xa6>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
   19fd6:	4b30      	ldr	r3, [pc, #192]	; (1a098 <set_data_add_complete+0xec>)
   19fd8:	9309      	str	r3, [sp, #36]	; 0x24
   19fda:	2302      	movs	r3, #2
   19fdc:	f88d 300c 	strb.w	r3, [sp, #12]
   19fe0:	2300      	movs	r3, #0
   19fe2:	f88d 300d 	strb.w	r3, [sp, #13]
   19fe6:	f88d 300e 	strb.w	r3, [sp, #14]
   19fea:	f88d 300f 	strb.w	r3, [sp, #15]
   19fee:	9a03      	ldr	r2, [sp, #12]
   19ff0:	9208      	str	r2, [sp, #32]
   19ff2:	4619      	mov	r1, r3
   19ff4:	f363 0100 	bfi	r1, r3, #0, #1
   19ff8:	f363 0141 	bfi	r1, r3, #1, #1
   19ffc:	f363 0182 	bfi	r1, r3, #2, #1
   1a000:	f363 01c5 	bfi	r1, r3, #3, #3
   1a004:	2201      	movs	r2, #1
   1a006:	f362 1188 	bfi	r1, r2, #6, #3
   1a00a:	2208      	movs	r2, #8
   1a00c:	f362 2152 	bfi	r1, r2, #9, #10
   1a010:	f363 41de 	bfi	r1, r3, #19, #12
   1a014:	f363 71df 	bfi	r1, r3, #31, #1
   1a018:	aa08      	add	r2, sp, #32
   1a01a:	4820      	ldr	r0, [pc, #128]	; (1a09c <set_data_add_complete+0xf0>)
   1a01c:	f7f9 fe6e 	bl	13cfc <z_impl_z_log_msg_static_create>
					return -EINVAL;
   1a020:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   1a024:	b00b      	add	sp, #44	; 0x2c
   1a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_data[set_data_len++] = len + 1;
   1a02a:	fa5f fb82 	uxtb.w	fp, r2
   1a02e:	1c59      	adds	r1, r3, #1
   1a030:	b2c9      	uxtb	r1, r1
   1a032:	f10b 0e01 	add.w	lr, fp, #1
   1a036:	f806 e005 	strb.w	lr, [r6, r5]
			set_data[set_data_len++] = type;
   1a03a:	1c9d      	adds	r5, r3, #2
   1a03c:	b2ed      	uxtb	r5, r5
   1a03e:	5470      	strb	r0, [r6, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a040:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1a044:	1970      	adds	r0, r6, r5
   1a046:	f011 f877 	bl	2b138 <memcpy>
			set_data_len += len;
   1a04a:	44ab      	add	fp, r5
   1a04c:	fa5f f38b 	uxtb.w	r3, fp
		for (size_t j = 0; j < ad[i].len; j++) {
   1a050:	3401      	adds	r4, #1
   1a052:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1a056:	4294      	cmp	r4, r2
   1a058:	d213      	bcs.n	1a082 <set_data_add_complete+0xd6>
			size_t len = data[j].data_len;
   1a05a:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
   1a05e:	f89c 2001 	ldrb.w	r2, [ip, #1]
			uint8_t type = data[j].type;
   1a062:	f817 0034 	ldrb.w	r0, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1a066:	461d      	mov	r5, r3
   1a068:	1899      	adds	r1, r3, r2
   1a06a:	3102      	adds	r1, #2
   1a06c:	4541      	cmp	r1, r8
   1a06e:	d9dc      	bls.n	1a02a <set_data_add_complete+0x7e>
							(set_data_len + 2);
   1a070:	1c9a      	adds	r2, r3, #2
				ssize_t shortened_len = set_data_len_max -
   1a072:	eba8 0202 	sub.w	r2, r8, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a076:	2809      	cmp	r0, #9
   1a078:	d1ad      	bne.n	19fd6 <set_data_add_complete+0x2a>
   1a07a:	2a00      	cmp	r2, #0
   1a07c:	ddab      	ble.n	19fd6 <set_data_add_complete+0x2a>
				type = BT_DATA_NAME_SHORTENED;
   1a07e:	2008      	movs	r0, #8
   1a080:	e7d3      	b.n	1a02a <set_data_add_complete+0x7e>
	for (size_t i = 0; i < ad_len; i++) {
   1a082:	f8dd b000 	ldr.w	fp, [sp]
   1a086:	9d01      	ldr	r5, [sp, #4]
   1a088:	f10b 0b01 	add.w	fp, fp, #1
   1a08c:	e798      	b.n	19fc0 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   1a08e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a090:	7013      	strb	r3, [r2, #0]
	return 0;
   1a092:	2000      	movs	r0, #0
   1a094:	e7c6      	b.n	1a024 <set_data_add_complete+0x78>
   1a096:	bf00      	nop
   1a098:	00031ca0 	.word	0x00031ca0
   1a09c:	0002f7f0 	.word	0x0002f7f0

0001a0a0 <valid_adv_ext_param>:
{
   1a0a0:	b510      	push	{r4, lr}
   1a0a2:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   1a0a4:	7800      	ldrb	r0, [r0, #0]
   1a0a6:	4b21      	ldr	r3, [pc, #132]	; (1a12c <valid_adv_ext_param+0x8c>)
   1a0a8:	79db      	ldrb	r3, [r3, #7]
   1a0aa:	4298      	cmp	r0, r3
   1a0ac:	d301      	bcc.n	1a0b2 <valid_adv_ext_param+0x12>
		return false;
   1a0ae:	2000      	movs	r0, #0
}
   1a0b0:	bd10      	pop	{r4, pc}
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1a0b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   1a0b6:	2207      	movs	r2, #7
   1a0b8:	491d      	ldr	r1, [pc, #116]	; (1a130 <valid_adv_ext_param+0x90>)
   1a0ba:	4b1c      	ldr	r3, [pc, #112]	; (1a12c <valid_adv_ext_param+0x8c>)
   1a0bc:	4418      	add	r0, r3
   1a0be:	f011 f829 	bl	2b114 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1a0c2:	2800      	cmp	r0, #0
   1a0c4:	d0f3      	beq.n	1a0ae <valid_adv_ext_param+0xe>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1a0c6:	6863      	ldr	r3, [r4, #4]
   1a0c8:	f013 0f01 	tst.w	r3, #1
   1a0cc:	d107      	bne.n	1a0de <valid_adv_ext_param+0x3e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1a0ce:	4a17      	ldr	r2, [pc, #92]	; (1a12c <valid_adv_ext_param+0x8c>)
   1a0d0:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   1a0d4:	2a08      	cmp	r2, #8
   1a0d6:	d802      	bhi.n	1a0de <valid_adv_ext_param+0x3e>
		    param->interval_min < 0x00a0) {
   1a0d8:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1a0da:	2a9f      	cmp	r2, #159	; 0x9f
   1a0dc:	d91b      	bls.n	1a116 <valid_adv_ext_param+0x76>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1a0de:	f013 0f30 	tst.w	r3, #48	; 0x30
   1a0e2:	d001      	beq.n	1a0e8 <valid_adv_ext_param+0x48>
	    !param->peer) {
   1a0e4:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1a0e6:	b1c2      	cbz	r2, 1a11a <valid_adv_ext_param+0x7a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1a0e8:	f013 0f10 	tst.w	r3, #16
   1a0ec:	d108      	bne.n	1a100 <valid_adv_ext_param+0x60>
	    !param->peer) {
   1a0ee:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1a0f0:	b132      	cbz	r2, 1a100 <valid_adv_ext_param+0x60>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1a0f2:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1a0f6:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   1a0fa:	d014      	beq.n	1a126 <valid_adv_ext_param+0x86>
	return true;
   1a0fc:	2001      	movs	r0, #1
   1a0fe:	e7d7      	b.n	1a0b0 <valid_adv_ext_param+0x10>
		if (param->interval_min > param->interval_max ||
   1a100:	68a2      	ldr	r2, [r4, #8]
   1a102:	68e1      	ldr	r1, [r4, #12]
   1a104:	428a      	cmp	r2, r1
   1a106:	d80a      	bhi.n	1a11e <valid_adv_ext_param+0x7e>
   1a108:	2a1f      	cmp	r2, #31
   1a10a:	d90a      	bls.n	1a122 <valid_adv_ext_param+0x82>
		    param->interval_min < 0x0020 ||
   1a10c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1a110:	d9ef      	bls.n	1a0f2 <valid_adv_ext_param+0x52>
			return false;
   1a112:	2000      	movs	r0, #0
   1a114:	e7cc      	b.n	1a0b0 <valid_adv_ext_param+0x10>
			return false;
   1a116:	2000      	movs	r0, #0
   1a118:	e7ca      	b.n	1a0b0 <valid_adv_ext_param+0x10>
		return false;
   1a11a:	2000      	movs	r0, #0
   1a11c:	e7c8      	b.n	1a0b0 <valid_adv_ext_param+0x10>
			return false;
   1a11e:	2000      	movs	r0, #0
   1a120:	e7c6      	b.n	1a0b0 <valid_adv_ext_param+0x10>
   1a122:	2000      	movs	r0, #0
   1a124:	e7c4      	b.n	1a0b0 <valid_adv_ext_param+0x10>
		return false;
   1a126:	2000      	movs	r0, #0
   1a128:	e7c2      	b.n	1a0b0 <valid_adv_ext_param+0x10>
   1a12a:	bf00      	nop
   1a12c:	20008000 	.word	0x20008000
   1a130:	0003136c 	.word	0x0003136c

0001a134 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a136:	4604      	mov	r4, r0
   1a138:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1a13a:	4605      	mov	r5, r0
   1a13c:	f815 2b09 	ldrb.w	r2, [r5], #9
   1a140:	4b17      	ldr	r3, [pc, #92]	; (1a1a0 <le_adv_start_add_conn+0x6c>)
   1a142:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   1a146:	2207      	movs	r2, #7
   1a148:	4916      	ldr	r1, [pc, #88]	; (1a1a4 <le_adv_start_add_conn+0x70>)
   1a14a:	4628      	mov	r0, r5
   1a14c:	f010 ffe2 	bl	2b114 <memcmp>

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1a150:	b960      	cbnz	r0, 1a16c <le_adv_start_add_conn+0x38>
   1a152:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1a154:	4914      	ldr	r1, [pc, #80]	; (1a1a8 <le_adv_start_add_conn+0x74>)
   1a156:	7820      	ldrb	r0, [r4, #0]
   1a158:	f011 fd65 	bl	2bc26 <bt_conn_add_le>
		if (!conn) {
   1a15c:	4604      	mov	r4, r0
   1a15e:	b1b0      	cbz	r0, 1a18e <le_adv_start_add_conn+0x5a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1a160:	2104      	movs	r1, #4
   1a162:	f001 f829 	bl	1b1b8 <bt_conn_set_state>
		*out_conn = conn;
   1a166:	603c      	str	r4, [r7, #0]
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1a168:	4630      	mov	r0, r6
   1a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1a16c:	4629      	mov	r1, r5
   1a16e:	7820      	ldrb	r0, [r4, #0]
   1a170:	f001 fb04 	bl	1b77c <bt_conn_exists_le>
   1a174:	b970      	cbnz	r0, 1a194 <le_adv_start_add_conn+0x60>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1a176:	4629      	mov	r1, r5
   1a178:	7820      	ldrb	r0, [r4, #0]
   1a17a:	f011 fd54 	bl	2bc26 <bt_conn_add_le>
	if (!conn) {
   1a17e:	4604      	mov	r4, r0
   1a180:	b158      	cbz	r0, 1a19a <le_adv_start_add_conn+0x66>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1a182:	2105      	movs	r1, #5
   1a184:	f001 f818 	bl	1b1b8 <bt_conn_set_state>
	*out_conn = conn;
   1a188:	603c      	str	r4, [r7, #0]
	return 0;
   1a18a:	2600      	movs	r6, #0
   1a18c:	e7ec      	b.n	1a168 <le_adv_start_add_conn+0x34>
			return -ENOMEM;
   1a18e:	f06f 060b 	mvn.w	r6, #11
   1a192:	e7e9      	b.n	1a168 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1a194:	f06f 0615 	mvn.w	r6, #21
   1a198:	e7e6      	b.n	1a168 <le_adv_start_add_conn+0x34>
		return -ENOMEM;
   1a19a:	f06f 060b 	mvn.w	r6, #11
   1a19e:	e7e3      	b.n	1a168 <le_adv_start_add_conn+0x34>
   1a1a0:	20008000 	.word	0x20008000
   1a1a4:	0003136c 	.word	0x0003136c
   1a1a8:	00031364 	.word	0x00031364

0001a1ac <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   1a1ac:	b570      	push	{r4, r5, r6, lr}
   1a1ae:	4604      	mov	r4, r0
   1a1b0:	460d      	mov	r5, r1
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1a1b2:	f100 0609 	add.w	r6, r0, #9
   1a1b6:	2207      	movs	r2, #7
   1a1b8:	490d      	ldr	r1, [pc, #52]	; (1a1f0 <le_adv_stop_free_conn+0x44>)
   1a1ba:	4630      	mov	r0, r6
   1a1bc:	f010 ffaa 	bl	2b114 <memcmp>
   1a1c0:	b978      	cbnz	r0, 1a1e2 <le_adv_stop_free_conn+0x36>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1a1c2:	2204      	movs	r2, #4
   1a1c4:	490b      	ldr	r1, [pc, #44]	; (1a1f4 <le_adv_stop_free_conn+0x48>)
   1a1c6:	7820      	ldrb	r0, [r4, #0]
   1a1c8:	f001 fb4a 	bl	1b860 <bt_conn_lookup_state_le>
   1a1cc:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   1a1ce:	b13c      	cbz	r4, 1a1e0 <le_adv_stop_free_conn+0x34>
		conn->err = status;
   1a1d0:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a1d2:	2100      	movs	r1, #0
   1a1d4:	4620      	mov	r0, r4
   1a1d6:	f000 ffef 	bl	1b1b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   1a1da:	4620      	mov	r0, r4
   1a1dc:	f000 ffb0 	bl	1b140 <bt_conn_unref>
	}
}
   1a1e0:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1a1e2:	2205      	movs	r2, #5
   1a1e4:	4631      	mov	r1, r6
   1a1e6:	7820      	ldrb	r0, [r4, #0]
   1a1e8:	f001 fb3a 	bl	1b860 <bt_conn_lookup_state_le>
   1a1ec:	4604      	mov	r4, r0
   1a1ee:	e7ee      	b.n	1a1ce <le_adv_stop_free_conn+0x22>
   1a1f0:	0003136c 	.word	0x0003136c
   1a1f4:	00031364 	.word	0x00031364

0001a1f8 <bt_le_adv_lookup_legacy>:
}
   1a1f8:	4800      	ldr	r0, [pc, #0]	; (1a1fc <bt_le_adv_lookup_legacy+0x4>)
   1a1fa:	4770      	bx	lr
   1a1fc:	20008018 	.word	0x20008018

0001a200 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a204:	b093      	sub	sp, #76	; 0x4c
   1a206:	9205      	str	r2, [sp, #20]
   1a208:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1a20a:	2300      	movs	r3, #0
   1a20c:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a20e:	690e      	ldr	r6, [r1, #16]
   1a210:	ebb6 0b03 	subs.w	fp, r6, r3
   1a214:	bf18      	it	ne
   1a216:	f04f 0b01 	movne.w	fp, #1
   1a21a:	4bab      	ldr	r3, [pc, #684]	; (1a4c8 <bt_le_adv_start_legacy+0x2c8>)
   1a21c:	e8d3 3faf 	lda	r3, [r3]
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a220:	f013 0f04 	tst.w	r3, #4
   1a224:	f000 813f 	beq.w	1a4a6 <bt_le_adv_start_legacy+0x2a6>
   1a228:	4605      	mov	r5, r0
   1a22a:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1a22c:	4608      	mov	r0, r1
   1a22e:	f011 faeb 	bl	2b808 <valid_adv_param>
   1a232:	2800      	cmp	r0, #0
   1a234:	f000 813a 	beq.w	1a4ac <bt_le_adv_start_legacy+0x2ac>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   1a238:	4620      	mov	r0, r4
   1a23a:	f011 f9e3 	bl	2b604 <bt_id_adv_random_addr_check>
   1a23e:	4682      	mov	sl, r0
   1a240:	2800      	cmp	r0, #0
   1a242:	f000 8136 	beq.w	1a4b2 <bt_le_adv_start_legacy+0x2b2>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1a246:	f105 0710 	add.w	r7, r5, #16
   1a24a:	2107      	movs	r1, #7
   1a24c:	4638      	mov	r0, r7
   1a24e:	f011 fa0f 	bl	2b670 <atomic_test_bit>
   1a252:	9004      	str	r0, [sp, #16]
   1a254:	2800      	cmp	r0, #0
   1a256:	f040 812f 	bne.w	1a4b8 <bt_le_adv_start_legacy+0x2b8>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1a25a:	220f      	movs	r2, #15
   1a25c:	2100      	movs	r1, #0
   1a25e:	a808      	add	r0, sp, #32
   1a260:	f010 ff99 	bl	2b196 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1a264:	68a3      	ldr	r3, [r4, #8]
   1a266:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1a26a:	68e3      	ldr	r3, [r4, #12]
   1a26c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1a270:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1a274:	4648      	mov	r0, r9
   1a276:	f011 f9e9 	bl	2b64c <get_adv_channel_map>
   1a27a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   1a27e:	4648      	mov	r0, r9
   1a280:	f011 f9e2 	bl	2b648 <get_filter_policy>
   1a284:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   1a288:	782a      	ldrb	r2, [r5, #0]
   1a28a:	7823      	ldrb	r3, [r4, #0]
   1a28c:	429a      	cmp	r2, r3
   1a28e:	d008      	beq.n	1a2a2 <bt_le_adv_start_legacy+0xa2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a290:	4b8d      	ldr	r3, [pc, #564]	; (1a4c8 <bt_le_adv_start_legacy+0x2c8>)
   1a292:	e8d3 1fef 	ldaex	r1, [r3]
   1a296:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1a29a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1a29e:	2a00      	cmp	r2, #0
   1a2a0:	d1f7      	bne.n	1a292 <bt_le_adv_start_legacy+0x92>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1a2a2:	7823      	ldrb	r3, [r4, #0]
   1a2a4:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1a2a6:	4a89      	ldr	r2, [pc, #548]	; (1a4cc <bt_le_adv_start_legacy+0x2cc>)
   1a2a8:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1a2ac:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1a2b0:	465a      	mov	r2, fp
   1a2b2:	6861      	ldr	r1, [r4, #4]
   1a2b4:	4628      	mov	r0, r5
   1a2b6:	f7ff fd79 	bl	19dac <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   1a2ba:	4681      	mov	r9, r0
   1a2bc:	2800      	cmp	r0, #0
   1a2be:	f040 80b7 	bne.w	1a430 <bt_le_adv_start_legacy+0x230>
		return err;
	}

	if (dir_adv) {
   1a2c2:	b1ee      	cbz	r6, 1a300 <bt_le_adv_start_legacy+0x100>
	memcpy(dst, src, sizeof(*dst));
   1a2c4:	2207      	movs	r2, #7
   1a2c6:	6921      	ldr	r1, [r4, #16]
   1a2c8:	f105 0009 	add.w	r0, r5, #9
   1a2cc:	f010 ff34 	bl	2b138 <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   1a2d0:	4620      	mov	r0, r4
   1a2d2:	f011 fadf 	bl	2b894 <get_adv_name_type_param>
   1a2d6:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1a2d8:	6863      	ldr	r3, [r4, #4]
   1a2da:	f013 0f01 	tst.w	r3, #1
   1a2de:	d01e      	beq.n	1a31e <bt_le_adv_start_legacy+0x11e>
		if (dir_adv) {
   1a2e0:	b1ce      	cbz	r6, 1a316 <bt_le_adv_start_legacy+0x116>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1a2e2:	f013 0f10 	tst.w	r3, #16
   1a2e6:	d012      	beq.n	1a30e <bt_le_adv_start_legacy+0x10e>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1a2e8:	2304      	movs	r3, #4
   1a2ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1a2ee:	2207      	movs	r2, #7
   1a2f0:	6921      	ldr	r1, [r4, #16]
   1a2f2:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1a2f6:	f010 ff1f 	bl	2b138 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a2fa:	f8dd a010 	ldr.w	sl, [sp, #16]
}
   1a2fe:	e016      	b.n	1a32e <bt_le_adv_start_legacy+0x12e>
	memcpy(dst, src, sizeof(*dst));
   1a300:	2207      	movs	r2, #7
   1a302:	4973      	ldr	r1, [pc, #460]	; (1a4d0 <bt_le_adv_start_legacy+0x2d0>)
   1a304:	f105 0009 	add.w	r0, r5, #9
   1a308:	f010 ff16 	bl	2b138 <memcpy>
}
   1a30c:	e7e0      	b.n	1a2d0 <bt_le_adv_start_legacy+0xd0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1a30e:	2301      	movs	r3, #1
   1a310:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1a314:	e7eb      	b.n	1a2ee <bt_le_adv_start_legacy+0xee>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   1a316:	2300      	movs	r3, #0
   1a318:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1a31c:	e007      	b.n	1a32e <bt_le_adv_start_legacy+0x12e>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1a31e:	f413 7f00 	tst.w	r3, #512	; 0x200
   1a322:	d101      	bne.n	1a328 <bt_le_adv_start_legacy+0x128>
   1a324:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1a326:	b353      	cbz	r3, 1a37e <bt_le_adv_start_legacy+0x17e>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1a328:	2302      	movs	r3, #2
   1a32a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1a32e:	210f      	movs	r1, #15
   1a330:	f242 0006 	movw	r0, #8198	; 0x2006
   1a334:	f7fd fe92 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   1a338:	4681      	mov	r9, r0
   1a33a:	2800      	cmp	r0, #0
   1a33c:	f000 80bf 	beq.w	1a4be <bt_le_adv_start_legacy+0x2be>
   1a340:	220f      	movs	r2, #15
   1a342:	a908      	add	r1, sp, #32
   1a344:	3008      	adds	r0, #8
   1a346:	f012 ffcf 	bl	2d2e8 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1a34a:	2200      	movs	r2, #0
   1a34c:	4649      	mov	r1, r9
   1a34e:	f242 0006 	movw	r0, #8198	; 0x2006
   1a352:	f7fd fed5 	bl	18100 <bt_hci_cmd_send_sync>
	if (err) {
   1a356:	4681      	mov	r9, r0
   1a358:	2800      	cmp	r0, #0
   1a35a:	d169      	bne.n	1a430 <bt_le_adv_start_legacy+0x230>
		return err;
	}

	if (!dir_adv) {
   1a35c:	b1be      	cbz	r6, 1a38e <bt_le_adv_start_legacy+0x18e>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1a35e:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a360:	f013 0f01 	tst.w	r3, #1
   1a364:	d02b      	beq.n	1a3be <bt_le_adv_start_legacy+0x1be>
		err = le_adv_start_add_conn(adv, &conn);
   1a366:	a907      	add	r1, sp, #28
   1a368:	4628      	mov	r0, r5
   1a36a:	f7ff fee3 	bl	1a134 <le_adv_start_add_conn>
		if (err) {
   1a36e:	b330      	cbz	r0, 1a3be <bt_le_adv_start_legacy+0x1be>
			if (err == -ENOMEM && !dir_adv &&
   1a370:	f110 0f0c 	cmn.w	r0, #12
   1a374:	f040 80a6 	bne.w	1a4c4 <bt_le_adv_start_legacy+0x2c4>
   1a378:	b1de      	cbz	r6, 1a3b2 <bt_le_adv_start_legacy+0x1b2>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   1a37a:	4681      	mov	r9, r0
   1a37c:	e058      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1a37e:	2802      	cmp	r0, #2
   1a380:	d0d2      	beq.n	1a328 <bt_le_adv_start_legacy+0x128>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1a382:	2303      	movs	r3, #3
   1a384:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1a388:	f8dd a010 	ldr.w	sl, [sp, #16]
   1a38c:	e7cf      	b.n	1a32e <bt_le_adv_start_legacy+0x12e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1a38e:	f8cd b00c 	str.w	fp, [sp, #12]
   1a392:	f8cd a008 	str.w	sl, [sp, #8]
   1a396:	2300      	movs	r3, #0
   1a398:	9301      	str	r3, [sp, #4]
   1a39a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1a39c:	9300      	str	r3, [sp, #0]
   1a39e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1a3a0:	4642      	mov	r2, r8
   1a3a2:	9905      	ldr	r1, [sp, #20]
   1a3a4:	4628      	mov	r0, r5
   1a3a6:	f011 f9a8 	bl	2b6fa <le_adv_update>
		if (err) {
   1a3aa:	2800      	cmp	r0, #0
   1a3ac:	d0d7      	beq.n	1a35e <bt_le_adv_start_legacy+0x15e>
			return err;
   1a3ae:	4681      	mov	r9, r0
   1a3b0:	e03e      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1a3b2:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1a3b4:	f012 0f02 	tst.w	r2, #2
   1a3b8:	d00c      	beq.n	1a3d4 <bt_le_adv_start_legacy+0x1d4>
			return err;
   1a3ba:	4681      	mov	r9, r0
   1a3bc:	e038      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   1a3be:	2101      	movs	r1, #1
   1a3c0:	4628      	mov	r0, r5
   1a3c2:	f011 faa3 	bl	2b90c <bt_le_adv_set_enable>
	if (err) {
   1a3c6:	4605      	mov	r5, r0
   1a3c8:	2800      	cmp	r0, #0
   1a3ca:	d135      	bne.n	1a438 <bt_le_adv_start_legacy+0x238>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1a3cc:	9807      	ldr	r0, [sp, #28]
   1a3ce:	b108      	cbz	r0, 1a3d4 <bt_le_adv_start_legacy+0x1d4>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   1a3d0:	f000 feb6 	bl	1b140 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1a3d4:	2e00      	cmp	r6, #0
   1a3d6:	d05e      	beq.n	1a496 <bt_le_adv_start_legacy+0x296>
   1a3d8:	464a      	mov	r2, r9
   1a3da:	f002 0201 	and.w	r2, r2, #1
   1a3de:	210e      	movs	r1, #14
   1a3e0:	4638      	mov	r0, r7
   1a3e2:	f011 fa22 	bl	2b82a <atomic_set_bit_to>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1a3e6:	f1bb 0f01 	cmp.w	fp, #1
   1a3ea:	bf14      	ite	ne
   1a3ec:	2200      	movne	r2, #0
   1a3ee:	2201      	moveq	r2, #1
   1a3f0:	2108      	movs	r1, #8
   1a3f2:	4638      	mov	r0, r7
   1a3f4:	f011 fa19 	bl	2b82a <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1a3f8:	f1bb 0f02 	cmp.w	fp, #2
   1a3fc:	bf14      	ite	ne
   1a3fe:	2200      	movne	r2, #0
   1a400:	2201      	moveq	r2, #1
   1a402:	2109      	movs	r1, #9
   1a404:	4638      	mov	r0, r7
   1a406:	f011 fa10 	bl	2b82a <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   1a40a:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1a40c:	f002 0201 	and.w	r2, r2, #1
   1a410:	210a      	movs	r1, #10
   1a412:	4638      	mov	r0, r7
   1a414:	f011 fa09 	bl	2b82a <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1a418:	4652      	mov	r2, sl
   1a41a:	210b      	movs	r1, #11
   1a41c:	4638      	mov	r0, r7
   1a41e:	f011 fa04 	bl	2b82a <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   1a422:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1a424:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1a428:	210d      	movs	r1, #13
   1a42a:	4638      	mov	r0, r7
   1a42c:	f011 f9fd 	bl	2b82a <atomic_set_bit_to>

	return 0;
}
   1a430:	4648      	mov	r0, r9
   1a432:	b013      	add	sp, #76	; 0x4c
   1a434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
   1a438:	4b26      	ldr	r3, [pc, #152]	; (1a4d4 <bt_le_adv_start_legacy+0x2d4>)
   1a43a:	9311      	str	r3, [sp, #68]	; 0x44
   1a43c:	2302      	movs	r3, #2
   1a43e:	f88d 3018 	strb.w	r3, [sp, #24]
   1a442:	2300      	movs	r3, #0
   1a444:	f88d 3019 	strb.w	r3, [sp, #25]
   1a448:	f88d 301a 	strb.w	r3, [sp, #26]
   1a44c:	f88d 301b 	strb.w	r3, [sp, #27]
   1a450:	9a06      	ldr	r2, [sp, #24]
   1a452:	9210      	str	r2, [sp, #64]	; 0x40
   1a454:	4619      	mov	r1, r3
   1a456:	f363 0100 	bfi	r1, r3, #0, #1
   1a45a:	f363 0141 	bfi	r1, r3, #1, #1
   1a45e:	f363 0182 	bfi	r1, r3, #2, #1
   1a462:	f363 01c5 	bfi	r1, r3, #3, #3
   1a466:	2201      	movs	r2, #1
   1a468:	f362 1188 	bfi	r1, r2, #6, #3
   1a46c:	2208      	movs	r2, #8
   1a46e:	f362 2152 	bfi	r1, r2, #9, #10
   1a472:	f363 41de 	bfi	r1, r3, #19, #12
   1a476:	f363 71df 	bfi	r1, r3, #31, #1
   1a47a:	aa10      	add	r2, sp, #64	; 0x40
   1a47c:	4816      	ldr	r0, [pc, #88]	; (1a4d8 <bt_le_adv_start_legacy+0x2d8>)
   1a47e:	f7f9 fc3d 	bl	13cfc <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1a482:	9807      	ldr	r0, [sp, #28]
   1a484:	b128      	cbz	r0, 1a492 <bt_le_adv_start_legacy+0x292>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a486:	2100      	movs	r1, #0
   1a488:	f000 fe96 	bl	1b1b8 <bt_conn_set_state>
			bt_conn_unref(conn);
   1a48c:	9807      	ldr	r0, [sp, #28]
   1a48e:	f000 fe57 	bl	1b140 <bt_conn_unref>
		return err;
   1a492:	46a9      	mov	r9, r5
   1a494:	e7cc      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   1a496:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1a498:	f013 0f02 	tst.w	r3, #2
   1a49c:	d001      	beq.n	1a4a2 <bt_le_adv_start_legacy+0x2a2>
   1a49e:	464a      	mov	r2, r9
   1a4a0:	e79b      	b.n	1a3da <bt_le_adv_start_legacy+0x1da>
   1a4a2:	2201      	movs	r2, #1
   1a4a4:	e799      	b.n	1a3da <bt_le_adv_start_legacy+0x1da>
		return -EAGAIN;
   1a4a6:	f06f 090a 	mvn.w	r9, #10
   1a4aa:	e7c1      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
		return -EINVAL;
   1a4ac:	f06f 0915 	mvn.w	r9, #21
   1a4b0:	e7be      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
		return -EINVAL;
   1a4b2:	f06f 0915 	mvn.w	r9, #21
   1a4b6:	e7bb      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
		return -EALREADY;
   1a4b8:	f06f 0977 	mvn.w	r9, #119	; 0x77
   1a4bc:	e7b8      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
		return -ENOBUFS;
   1a4be:	f06f 0968 	mvn.w	r9, #104	; 0x68
   1a4c2:	e7b5      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
			return err;
   1a4c4:	4681      	mov	r9, r0
   1a4c6:	e7b3      	b.n	1a430 <bt_le_adv_start_legacy+0x230>
   1a4c8:	200080cc 	.word	0x200080cc
   1a4cc:	20008000 	.word	0x20008000
   1a4d0:	0003136c 	.word	0x0003136c
   1a4d4:	00031cbc 	.word	0x00031cbc
   1a4d8:	0002f7f0 	.word	0x0002f7f0

0001a4dc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1a4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a4e0:	b082      	sub	sp, #8
   1a4e2:	4606      	mov	r6, r0
   1a4e4:	460c      	mov	r4, r1
   1a4e6:	4615      	mov	r5, r2
   1a4e8:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_get_legacy();
   1a4ea:	f7ff fd5b 	bl	19fa4 <adv_get_legacy>
	int err;

	if (!adv) {
   1a4ee:	b1f8      	cbz	r0, 1a530 <bt_le_adv_start+0x54>
   1a4f0:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1a4f2:	9b08      	ldr	r3, [sp, #32]
   1a4f4:	9301      	str	r3, [sp, #4]
   1a4f6:	9700      	str	r7, [sp, #0]
   1a4f8:	462b      	mov	r3, r5
   1a4fa:	4622      	mov	r2, r4
   1a4fc:	4631      	mov	r1, r6
   1a4fe:	f7ff fe7f 	bl	1a200 <bt_le_adv_start_legacy>
   1a502:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   1a504:	4629      	mov	r1, r5
   1a506:	4620      	mov	r0, r4
   1a508:	f011 f87f 	bl	2b60a <ad_is_limited>
   1a50c:	b918      	cbnz	r0, 1a516 <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1a50e:	4630      	mov	r0, r6
   1a510:	b002      	add	sp, #8
   1a512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1a516:	f108 0818 	add.w	r8, r8, #24
   1a51a:	4907      	ldr	r1, [pc, #28]	; (1a538 <bt_le_adv_start+0x5c>)
   1a51c:	4640      	mov	r0, r8
   1a51e:	f00b feb9 	bl	26294 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1a522:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a526:	2300      	movs	r3, #0
   1a528:	4640      	mov	r0, r8
   1a52a:	f00c f80f 	bl	2654c <k_work_reschedule>
   1a52e:	e7ee      	b.n	1a50e <bt_le_adv_start+0x32>
		return -ENOMEM;
   1a530:	f06f 060b 	mvn.w	r6, #11
   1a534:	e7eb      	b.n	1a50e <bt_le_adv_start+0x32>
   1a536:	bf00      	nop
   1a538:	0001a5e9 	.word	0x0001a5e9

0001a53c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1a53c:	b530      	push	{r4, r5, lr}
   1a53e:	b089      	sub	sp, #36	; 0x24
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1a540:	f7ff fe5a 	bl	1a1f8 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   1a544:	b1a0      	cbz	r0, 1a570 <bt_le_adv_stop+0x34>
   1a546:	4605      	mov	r5, r0
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1a548:	f011 f9e4 	bl	2b914 <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1a54c:	f105 0410 	add.w	r4, r5, #16
   1a550:	e8d4 3fef 	ldaex	r3, [r4]
   1a554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   1a558:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1a55c:	2a00      	cmp	r2, #0
   1a55e:	d1f7      	bne.n	1a550 <bt_le_adv_stop+0x14>

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1a560:	2107      	movs	r1, #7
   1a562:	4620      	mov	r0, r4
   1a564:	f011 f884 	bl	2b670 <atomic_test_bit>
   1a568:	bb50      	cbnz	r0, 1a5c0 <bt_le_adv_stop+0x84>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   1a56a:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1a56c:	b009      	add	sp, #36	; 0x24
   1a56e:	bd30      	pop	{r4, r5, pc}
		BT_ERR("No valid legacy adv");
   1a570:	4b1b      	ldr	r3, [pc, #108]	; (1a5e0 <bt_le_adv_stop+0xa4>)
   1a572:	9307      	str	r3, [sp, #28]
   1a574:	2302      	movs	r3, #2
   1a576:	f88d 3004 	strb.w	r3, [sp, #4]
   1a57a:	2400      	movs	r4, #0
   1a57c:	f88d 4005 	strb.w	r4, [sp, #5]
   1a580:	f88d 4006 	strb.w	r4, [sp, #6]
   1a584:	f88d 4007 	strb.w	r4, [sp, #7]
   1a588:	9b01      	ldr	r3, [sp, #4]
   1a58a:	9306      	str	r3, [sp, #24]
   1a58c:	4621      	mov	r1, r4
   1a58e:	f364 0100 	bfi	r1, r4, #0, #1
   1a592:	f364 0141 	bfi	r1, r4, #1, #1
   1a596:	f364 0182 	bfi	r1, r4, #2, #1
   1a59a:	f364 01c5 	bfi	r1, r4, #3, #3
   1a59e:	2301      	movs	r3, #1
   1a5a0:	f363 1188 	bfi	r1, r3, #6, #3
   1a5a4:	2308      	movs	r3, #8
   1a5a6:	f363 2152 	bfi	r1, r3, #9, #10
   1a5aa:	f364 41de 	bfi	r1, r4, #19, #12
   1a5ae:	f364 71df 	bfi	r1, r4, #31, #1
   1a5b2:	4623      	mov	r3, r4
   1a5b4:	aa06      	add	r2, sp, #24
   1a5b6:	480b      	ldr	r0, [pc, #44]	; (1a5e4 <bt_le_adv_stop+0xa8>)
   1a5b8:	f7f9 fba0 	bl	13cfc <z_impl_z_log_msg_static_create>
		return 0;
   1a5bc:	4620      	mov	r0, r4
   1a5be:	e7d5      	b.n	1a56c <bt_le_adv_stop+0x30>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1a5c0:	210a      	movs	r1, #10
   1a5c2:	4620      	mov	r0, r4
   1a5c4:	f011 f854 	bl	2b670 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a5c8:	b920      	cbnz	r0, 1a5d4 <bt_le_adv_stop+0x98>
		err = bt_le_adv_set_enable_legacy(adv, false);
   1a5ca:	2100      	movs	r1, #0
   1a5cc:	4628      	mov	r0, r5
   1a5ce:	f011 f975 	bl	2b8bc <bt_le_adv_set_enable_legacy>
		if (err) {
   1a5d2:	e7cb      	b.n	1a56c <bt_le_adv_stop+0x30>
		le_adv_stop_free_conn(adv, 0);
   1a5d4:	2100      	movs	r1, #0
   1a5d6:	4628      	mov	r0, r5
   1a5d8:	f7ff fde8 	bl	1a1ac <le_adv_stop_free_conn>
   1a5dc:	e7f5      	b.n	1a5ca <bt_le_adv_stop+0x8e>
   1a5de:	bf00      	nop
   1a5e0:	00031cd8 	.word	0x00031cd8
   1a5e4:	0002f7f0 	.word	0x0002f7f0

0001a5e8 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1a5e8:	b590      	push	{r4, r7, lr}
   1a5ea:	b083      	sub	sp, #12
   1a5ec:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1a5ee:	f7ff ffa5 	bl	1a53c <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   1a5f2:	b088      	sub	sp, #32
   1a5f4:	466b      	mov	r3, sp
   1a5f6:	f113 0210 	adds.w	r2, r3, #16
   1a5fa:	d032      	beq.n	1a662 <adv_timeout+0x7a>
   1a5fc:	210c      	movs	r1, #12
   1a5fe:	b142      	cbz	r2, 1a612 <adv_timeout+0x2a>
   1a600:	468c      	mov	ip, r1
   1a602:	2904      	cmp	r1, #4
   1a604:	dd01      	ble.n	1a60a <adv_timeout+0x22>
   1a606:	4c1a      	ldr	r4, [pc, #104]	; (1a670 <adv_timeout+0x88>)
   1a608:	615c      	str	r4, [r3, #20]
   1a60a:	f1bc 0f08 	cmp.w	ip, #8
   1a60e:	dd00      	ble.n	1a612 <adv_timeout+0x2a>
   1a610:	6198      	str	r0, [r3, #24]
   1a612:	290b      	cmp	r1, #11
   1a614:	dd28      	ble.n	1a668 <adv_timeout+0x80>
   1a616:	f04f 0c0c 	mov.w	ip, #12
   1a61a:	b13a      	cbz	r2, 1a62c <adv_timeout+0x44>
   1a61c:	2103      	movs	r1, #3
   1a61e:	7139      	strb	r1, [r7, #4]
   1a620:	2100      	movs	r1, #0
   1a622:	7179      	strb	r1, [r7, #5]
   1a624:	71b9      	strb	r1, [r7, #6]
   1a626:	71f9      	strb	r1, [r7, #7]
   1a628:	6878      	ldr	r0, [r7, #4]
   1a62a:	6118      	str	r0, [r3, #16]
   1a62c:	2100      	movs	r1, #0
   1a62e:	f36f 0100 	bfc	r1, #0, #1
   1a632:	f36f 0141 	bfc	r1, #1, #1
   1a636:	f36f 0182 	bfc	r1, #2, #1
   1a63a:	f36f 01c5 	bfc	r1, #3, #3
   1a63e:	2302      	movs	r3, #2
   1a640:	f363 1188 	bfi	r1, r3, #6, #3
   1a644:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1a648:	f36c 2152 	bfi	r1, ip, #9, #10
   1a64c:	f36f 41de 	bfc	r1, #19, #12
   1a650:	f36f 71df 	bfc	r1, #31, #1
   1a654:	2300      	movs	r3, #0
   1a656:	4807      	ldr	r0, [pc, #28]	; (1a674 <adv_timeout+0x8c>)
   1a658:	f7f9 fb50 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   1a65c:	370c      	adds	r7, #12
   1a65e:	46bd      	mov	sp, r7
   1a660:	bd90      	pop	{r4, r7, pc}
	BT_WARN("Failed to stop advertising: %d", err);
   1a662:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a666:	e7ca      	b.n	1a5fe <adv_timeout+0x16>
   1a668:	f06f 0c1b 	mvn.w	ip, #27
   1a66c:	e7d5      	b.n	1a61a <adv_timeout+0x32>
   1a66e:	bf00      	nop
   1a670:	00031cec 	.word	0x00031cec
   1a674:	0002f7f0 	.word	0x0002f7f0

0001a678 <prng_reseed>:
#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
{
   1a678:	b530      	push	{r4, r5, lr}
   1a67a:	b095      	sub	sp, #84	; 0x54
   1a67c:	4604      	mov	r4, r0
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1a67e:	2120      	movs	r1, #32
   1a680:	a806      	add	r0, sp, #24
   1a682:	f7fe f92d 	bl	188e0 <bt_hci_le_rand>
	if (ret) {
   1a686:	4605      	mov	r5, r0
   1a688:	b110      	cbz	r0, 1a690 <prng_reseed+0x18>
		BT_ERR("Failed to re-seed PRNG");
		return -EIO;
	}

	return 0;
}
   1a68a:	4628      	mov	r0, r5
   1a68c:	b015      	add	sp, #84	; 0x54
   1a68e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_uptime_ticks();
   1a690:	f014 fd87 	bl	2f1a2 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1a694:	014a      	lsls	r2, r1, #5
   1a696:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1a69a:	0143      	lsls	r3, r0, #5
   1a69c:	1a1b      	subs	r3, r3, r0
   1a69e:	eb62 0201 	sbc.w	r2, r2, r1
   1a6a2:	0092      	lsls	r2, r2, #2
   1a6a4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1a6a8:	009b      	lsls	r3, r3, #2
   1a6aa:	181b      	adds	r3, r3, r0
   1a6ac:	eb42 0201 	adc.w	r2, r2, r1
   1a6b0:	00d2      	lsls	r2, r2, #3
   1a6b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   1a6b6:	f3c3 3310 	ubfx	r3, r3, #12, #17
   1a6ba:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   1a6be:	0bd2      	lsrs	r2, r2, #15
	extra = k_uptime_get();
   1a6c0:	9304      	str	r3, [sp, #16]
   1a6c2:	9205      	str	r2, [sp, #20]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1a6c4:	2308      	movs	r3, #8
   1a6c6:	9300      	str	r3, [sp, #0]
   1a6c8:	ab04      	add	r3, sp, #16
   1a6ca:	2220      	movs	r2, #32
   1a6cc:	a906      	add	r1, sp, #24
   1a6ce:	4620      	mov	r0, r4
   1a6d0:	f010 fb9b 	bl	2ae0a <tc_hmac_prng_reseed>
	if (ret == TC_CRYPTO_FAIL) {
   1a6d4:	2800      	cmp	r0, #0
   1a6d6:	d1d8      	bne.n	1a68a <prng_reseed+0x12>
		BT_ERR("Failed to re-seed PRNG");
   1a6d8:	4b13      	ldr	r3, [pc, #76]	; (1a728 <prng_reseed+0xb0>)
   1a6da:	9313      	str	r3, [sp, #76]	; 0x4c
   1a6dc:	2302      	movs	r3, #2
   1a6de:	f88d 300c 	strb.w	r3, [sp, #12]
   1a6e2:	2300      	movs	r3, #0
   1a6e4:	f88d 300d 	strb.w	r3, [sp, #13]
   1a6e8:	f88d 300e 	strb.w	r3, [sp, #14]
   1a6ec:	f88d 300f 	strb.w	r3, [sp, #15]
   1a6f0:	9a03      	ldr	r2, [sp, #12]
   1a6f2:	9212      	str	r2, [sp, #72]	; 0x48
   1a6f4:	4619      	mov	r1, r3
   1a6f6:	f363 0100 	bfi	r1, r3, #0, #1
   1a6fa:	f363 0141 	bfi	r1, r3, #1, #1
   1a6fe:	f363 0182 	bfi	r1, r3, #2, #1
   1a702:	f363 01c5 	bfi	r1, r3, #3, #3
   1a706:	2201      	movs	r2, #1
   1a708:	f362 1188 	bfi	r1, r2, #6, #3
   1a70c:	2208      	movs	r2, #8
   1a70e:	f362 2152 	bfi	r1, r2, #9, #10
   1a712:	f363 41de 	bfi	r1, r3, #19, #12
   1a716:	f363 71df 	bfi	r1, r3, #31, #1
   1a71a:	aa12      	add	r2, sp, #72	; 0x48
   1a71c:	4803      	ldr	r0, [pc, #12]	; (1a72c <prng_reseed+0xb4>)
   1a71e:	f7f9 faed 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EIO;
   1a722:	f06f 0504 	mvn.w	r5, #4
   1a726:	e7b0      	b.n	1a68a <prng_reseed+0x12>
   1a728:	00031d14 	.word	0x00031d14
   1a72c:	0002f810 	.word	0x0002f810

0001a730 <prng_init>:

int prng_init(void)
{
   1a730:	b500      	push	{lr}
   1a732:	b08b      	sub	sp, #44	; 0x2c
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   1a734:	2108      	movs	r1, #8
   1a736:	eb0d 0001 	add.w	r0, sp, r1
   1a73a:	f7fe f8d1 	bl	188e0 <bt_hci_le_rand>
	if (ret) {
   1a73e:	b110      	cbz	r0, 1a746 <prng_init+0x16>
		return -EIO;
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1a740:	b00b      	add	sp, #44	; 0x2c
   1a742:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   1a746:	2208      	movs	r2, #8
   1a748:	eb0d 0102 	add.w	r1, sp, r2
   1a74c:	4817      	ldr	r0, [pc, #92]	; (1a7ac <prng_init+0x7c>)
   1a74e:	f010 fb39 	bl	2adc4 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1a752:	b118      	cbz	r0, 1a75c <prng_init+0x2c>
	return prng_reseed(&prng);
   1a754:	4815      	ldr	r0, [pc, #84]	; (1a7ac <prng_init+0x7c>)
   1a756:	f7ff ff8f 	bl	1a678 <prng_reseed>
   1a75a:	e7f1      	b.n	1a740 <prng_init+0x10>
		BT_ERR("Failed to initialize PRNG");
   1a75c:	4b14      	ldr	r3, [pc, #80]	; (1a7b0 <prng_init+0x80>)
   1a75e:	9309      	str	r3, [sp, #36]	; 0x24
   1a760:	2302      	movs	r3, #2
   1a762:	f88d 3004 	strb.w	r3, [sp, #4]
   1a766:	2300      	movs	r3, #0
   1a768:	f88d 3005 	strb.w	r3, [sp, #5]
   1a76c:	f88d 3006 	strb.w	r3, [sp, #6]
   1a770:	f88d 3007 	strb.w	r3, [sp, #7]
   1a774:	9a01      	ldr	r2, [sp, #4]
   1a776:	9208      	str	r2, [sp, #32]
   1a778:	4619      	mov	r1, r3
   1a77a:	f363 0100 	bfi	r1, r3, #0, #1
   1a77e:	f363 0141 	bfi	r1, r3, #1, #1
   1a782:	f363 0182 	bfi	r1, r3, #2, #1
   1a786:	f363 01c5 	bfi	r1, r3, #3, #3
   1a78a:	2201      	movs	r2, #1
   1a78c:	f362 1188 	bfi	r1, r2, #6, #3
   1a790:	2208      	movs	r2, #8
   1a792:	f362 2152 	bfi	r1, r2, #9, #10
   1a796:	f363 41de 	bfi	r1, r3, #19, #12
   1a79a:	f363 71df 	bfi	r1, r3, #31, #1
   1a79e:	aa08      	add	r2, sp, #32
   1a7a0:	4804      	ldr	r0, [pc, #16]	; (1a7b4 <prng_init+0x84>)
   1a7a2:	f7f9 faab 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EIO;
   1a7a6:	f06f 0004 	mvn.w	r0, #4
   1a7aa:	e7c9      	b.n	1a740 <prng_init+0x10>
   1a7ac:	20009238 	.word	0x20009238
   1a7b0:	00031d2c 	.word	0x00031d2c
   1a7b4:	0002f810 	.word	0x0002f810

0001a7b8 <bt_rand>:
#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1a7b8:	b1d8      	cbz	r0, 1a7f2 <bt_rand+0x3a>
{
   1a7ba:	b538      	push	{r3, r4, r5, lr}
   1a7bc:	460c      	mov	r4, r1
   1a7be:	4605      	mov	r5, r0
	CHECKIF(buf == NULL || len == 0) {
   1a7c0:	b1d1      	cbz	r1, 1a7f8 <bt_rand+0x40>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1a7c2:	4a0f      	ldr	r2, [pc, #60]	; (1a800 <bt_rand+0x48>)
   1a7c4:	f010 fb43 	bl	2ae4e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1a7c8:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a7cc:	d003      	beq.n	1a7d6 <bt_rand+0x1e>
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
	}

	if (ret == TC_CRYPTO_SUCCESS) {
   1a7ce:	2801      	cmp	r0, #1
   1a7d0:	d10c      	bne.n	1a7ec <bt_rand+0x34>
		return 0;
   1a7d2:	2000      	movs	r0, #0
	}

	return -EIO;
}
   1a7d4:	bd38      	pop	{r3, r4, r5, pc}
		ret = prng_reseed(&prng);
   1a7d6:	480a      	ldr	r0, [pc, #40]	; (1a800 <bt_rand+0x48>)
   1a7d8:	f7ff ff4e 	bl	1a678 <prng_reseed>
		if (ret) {
   1a7dc:	2800      	cmp	r0, #0
   1a7de:	d1f9      	bne.n	1a7d4 <bt_rand+0x1c>
		ret = tc_hmac_prng_generate(buf, len, &prng);
   1a7e0:	4a07      	ldr	r2, [pc, #28]	; (1a800 <bt_rand+0x48>)
   1a7e2:	4621      	mov	r1, r4
   1a7e4:	4628      	mov	r0, r5
   1a7e6:	f010 fb32 	bl	2ae4e <tc_hmac_prng_generate>
   1a7ea:	e7f0      	b.n	1a7ce <bt_rand+0x16>
	return -EIO;
   1a7ec:	f06f 0004 	mvn.w	r0, #4
   1a7f0:	e7f0      	b.n	1a7d4 <bt_rand+0x1c>
		return -EINVAL;
   1a7f2:	f06f 0015 	mvn.w	r0, #21
}
   1a7f6:	4770      	bx	lr
		return -EINVAL;
   1a7f8:	f06f 0015 	mvn.w	r0, #21
   1a7fc:	e7ea      	b.n	1a7d4 <bt_rand+0x1c>
   1a7fe:	bf00      	nop
   1a800:	20009238 	.word	0x20009238

0001a804 <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   1a804:	2808      	cmp	r0, #8
   1a806:	d816      	bhi.n	1a836 <state2str+0x32>
   1a808:	e8df f000 	tbb	[pc, r0]
   1a80c:	0d071705 	.word	0x0d071705
   1a810:	110f090b 	.word	0x110f090b
   1a814:	13          	.byte	0x13
   1a815:	00          	.byte	0x00
   1a816:	480a      	ldr	r0, [pc, #40]	; (1a840 <state2str+0x3c>)
   1a818:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   1a81a:	480a      	ldr	r0, [pc, #40]	; (1a844 <state2str+0x40>)
   1a81c:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   1a81e:	480a      	ldr	r0, [pc, #40]	; (1a848 <state2str+0x44>)
   1a820:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   1a822:	480a      	ldr	r0, [pc, #40]	; (1a84c <state2str+0x48>)
   1a824:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   1a826:	480a      	ldr	r0, [pc, #40]	; (1a850 <state2str+0x4c>)
   1a828:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   1a82a:	480a      	ldr	r0, [pc, #40]	; (1a854 <state2str+0x50>)
   1a82c:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   1a82e:	480a      	ldr	r0, [pc, #40]	; (1a858 <state2str+0x54>)
   1a830:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   1a832:	480a      	ldr	r0, [pc, #40]	; (1a85c <state2str+0x58>)
   1a834:	4770      	bx	lr
	default:
		return "(unknown)";
   1a836:	480a      	ldr	r0, [pc, #40]	; (1a860 <state2str+0x5c>)
   1a838:	4770      	bx	lr
		return "disconnect-complete";
   1a83a:	480a      	ldr	r0, [pc, #40]	; (1a864 <state2str+0x60>)
	}
}
   1a83c:	4770      	bx	lr
   1a83e:	bf00      	nop
   1a840:	00031d54 	.word	0x00031d54
   1a844:	00031d78 	.word	0x00031d78
   1a848:	00031d88 	.word	0x00031d88
   1a84c:	00031d9c 	.word	0x00031d9c
   1a850:	00031dac 	.word	0x00031dac
   1a854:	00031dbc 	.word	0x00031dbc
   1a858:	000323d4 	.word	0x000323d4
   1a85c:	00031dc8 	.word	0x00031dc8
   1a860:	00031dd8 	.word	0x00031dd8
   1a864:	00031d64 	.word	0x00031d64

0001a868 <tx_free>:

static void tx_free(struct bt_conn_tx *tx)
{
   1a868:	b508      	push	{r3, lr}
   1a86a:	4601      	mov	r1, r0
	tx->cb = NULL;
   1a86c:	2300      	movs	r3, #0
   1a86e:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1a870:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1a872:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1a874:	4801      	ldr	r0, [pc, #4]	; (1a87c <tx_free+0x14>)
   1a876:	f014 fb54 	bl	2ef22 <k_queue_append>
}
   1a87a:	bd08      	pop	{r3, pc}
   1a87c:	200085c0 	.word	0x200085c0

0001a880 <notify_disconnected>:
		}
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   1a880:	b538      	push	{r3, r4, r5, lr}
   1a882:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1a884:	4b16      	ldr	r3, [pc, #88]	; (1a8e0 <notify_disconnected+0x60>)
   1a886:	681c      	ldr	r4, [r3, #0]
   1a888:	e000      	b.n	1a88c <notify_disconnected+0xc>
   1a88a:	6924      	ldr	r4, [r4, #16]
   1a88c:	b134      	cbz	r4, 1a89c <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1a88e:	6863      	ldr	r3, [r4, #4]
   1a890:	2b00      	cmp	r3, #0
   1a892:	d0fa      	beq.n	1a88a <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   1a894:	7a69      	ldrb	r1, [r5, #9]
   1a896:	4628      	mov	r0, r5
   1a898:	4798      	blx	r3
   1a89a:	e7f6      	b.n	1a88a <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a89c:	4c11      	ldr	r4, [pc, #68]	; (1a8e4 <notify_disconnected+0x64>)
   1a89e:	e000      	b.n	1a8a2 <notify_disconnected+0x22>
   1a8a0:	3414      	adds	r4, #20
   1a8a2:	4b11      	ldr	r3, [pc, #68]	; (1a8e8 <notify_disconnected+0x68>)
   1a8a4:	429c      	cmp	r4, r3
   1a8a6:	d809      	bhi.n	1a8bc <notify_disconnected+0x3c>
   1a8a8:	4b0f      	ldr	r3, [pc, #60]	; (1a8e8 <notify_disconnected+0x68>)
   1a8aa:	429c      	cmp	r4, r3
   1a8ac:	d216      	bcs.n	1a8dc <notify_disconnected+0x5c>
		if (cb->disconnected) {
   1a8ae:	6863      	ldr	r3, [r4, #4]
   1a8b0:	2b00      	cmp	r3, #0
   1a8b2:	d0f5      	beq.n	1a8a0 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1a8b4:	7a69      	ldrb	r1, [r5, #9]
   1a8b6:	4628      	mov	r0, r5
   1a8b8:	4798      	blx	r3
   1a8ba:	e7f1      	b.n	1a8a0 <notify_disconnected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a8bc:	4c0b      	ldr	r4, [pc, #44]	; (1a8ec <notify_disconnected+0x6c>)
   1a8be:	f240 5369 	movw	r3, #1385	; 0x569
   1a8c2:	4622      	mov	r2, r4
   1a8c4:	490a      	ldr	r1, [pc, #40]	; (1a8f0 <notify_disconnected+0x70>)
   1a8c6:	480b      	ldr	r0, [pc, #44]	; (1a8f4 <notify_disconnected+0x74>)
   1a8c8:	f00f f90f 	bl	29aea <assert_print>
   1a8cc:	480a      	ldr	r0, [pc, #40]	; (1a8f8 <notify_disconnected+0x78>)
   1a8ce:	f00f f90c 	bl	29aea <assert_print>
   1a8d2:	f240 5169 	movw	r1, #1385	; 0x569
   1a8d6:	4620      	mov	r0, r4
   1a8d8:	f00f f900 	bl	29adc <assert_post_action>
		}
	}
}
   1a8dc:	bd38      	pop	{r3, r4, r5, pc}
   1a8de:	bf00      	nop
   1a8e0:	20009954 	.word	0x20009954
   1a8e4:	0002f7d0 	.word	0x0002f7d0
   1a8e8:	0002f7d0 	.word	0x0002f7d0
   1a8ec:	00031de4 	.word	0x00031de4
   1a8f0:	00031e14 	.word	0x00031e14
   1a8f4:	0002fdac 	.word	0x0002fdac
   1a8f8:	00030500 	.word	0x00030500

0001a8fc <conn_tx_destroy>:
{
   1a8fc:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(tx);
   1a8fe:	b159      	cbz	r1, 1a918 <conn_tx_destroy+0x1c>
   1a900:	4604      	mov	r4, r0
   1a902:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   1a904:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   1a906:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   1a908:	f7ff ffae 	bl	1a868 <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   1a90c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1a910:	4631      	mov	r1, r6
   1a912:	4620      	mov	r0, r4
   1a914:	47a8      	blx	r5
}
   1a916:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(tx);
   1a918:	4c05      	ldr	r4, [pc, #20]	; (1a930 <conn_tx_destroy+0x34>)
   1a91a:	2338      	movs	r3, #56	; 0x38
   1a91c:	4622      	mov	r2, r4
   1a91e:	4905      	ldr	r1, [pc, #20]	; (1a934 <conn_tx_destroy+0x38>)
   1a920:	4805      	ldr	r0, [pc, #20]	; (1a938 <conn_tx_destroy+0x3c>)
   1a922:	f00f f8e2 	bl	29aea <assert_print>
   1a926:	2138      	movs	r1, #56	; 0x38
   1a928:	4620      	mov	r0, r4
   1a92a:	f00f f8d7 	bl	29adc <assert_post_action>
   1a92e:	bf00      	nop
   1a930:	00031de4 	.word	0x00031de4
   1a934:	00031e30 	.word	0x00031e30
   1a938:	0002fdac 	.word	0x0002fdac

0001a93c <notify_connected>:
{
   1a93c:	b538      	push	{r3, r4, r5, lr}
   1a93e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1a940:	4b16      	ldr	r3, [pc, #88]	; (1a99c <notify_connected+0x60>)
   1a942:	681c      	ldr	r4, [r3, #0]
   1a944:	e000      	b.n	1a948 <notify_connected+0xc>
   1a946:	6924      	ldr	r4, [r4, #16]
   1a948:	b134      	cbz	r4, 1a958 <notify_connected+0x1c>
		if (cb->connected) {
   1a94a:	6823      	ldr	r3, [r4, #0]
   1a94c:	2b00      	cmp	r3, #0
   1a94e:	d0fa      	beq.n	1a946 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   1a950:	7a69      	ldrb	r1, [r5, #9]
   1a952:	4628      	mov	r0, r5
   1a954:	4798      	blx	r3
   1a956:	e7f6      	b.n	1a946 <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a958:	4c11      	ldr	r4, [pc, #68]	; (1a9a0 <notify_connected+0x64>)
   1a95a:	e000      	b.n	1a95e <notify_connected+0x22>
   1a95c:	3414      	adds	r4, #20
   1a95e:	4b11      	ldr	r3, [pc, #68]	; (1a9a4 <notify_connected+0x68>)
   1a960:	429c      	cmp	r4, r3
   1a962:	d809      	bhi.n	1a978 <notify_connected+0x3c>
   1a964:	4b0f      	ldr	r3, [pc, #60]	; (1a9a4 <notify_connected+0x68>)
   1a966:	429c      	cmp	r4, r3
   1a968:	d216      	bcs.n	1a998 <notify_connected+0x5c>
		if (cb->connected) {
   1a96a:	6823      	ldr	r3, [r4, #0]
   1a96c:	2b00      	cmp	r3, #0
   1a96e:	d0f5      	beq.n	1a95c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1a970:	7a69      	ldrb	r1, [r5, #9]
   1a972:	4628      	mov	r0, r5
   1a974:	4798      	blx	r3
   1a976:	e7f1      	b.n	1a95c <notify_connected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a978:	4c0b      	ldr	r4, [pc, #44]	; (1a9a8 <notify_connected+0x6c>)
   1a97a:	f44f 63ab 	mov.w	r3, #1368	; 0x558
   1a97e:	4622      	mov	r2, r4
   1a980:	490a      	ldr	r1, [pc, #40]	; (1a9ac <notify_connected+0x70>)
   1a982:	480b      	ldr	r0, [pc, #44]	; (1a9b0 <notify_connected+0x74>)
   1a984:	f00f f8b1 	bl	29aea <assert_print>
   1a988:	480a      	ldr	r0, [pc, #40]	; (1a9b4 <notify_connected+0x78>)
   1a98a:	f00f f8ae 	bl	29aea <assert_print>
   1a98e:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   1a992:	4620      	mov	r0, r4
   1a994:	f00f f8a2 	bl	29adc <assert_post_action>
}
   1a998:	bd38      	pop	{r3, r4, r5, pc}
   1a99a:	bf00      	nop
   1a99c:	20009954 	.word	0x20009954
   1a9a0:	0002f7d0 	.word	0x0002f7d0
   1a9a4:	0002f7d0 	.word	0x0002f7d0
   1a9a8:	00031de4 	.word	0x00031de4
   1a9ac:	00031e14 	.word	0x00031e14
   1a9b0:	0002fdac 	.word	0x0002fdac
   1a9b4:	00030500 	.word	0x00030500

0001a9b8 <conn_tx_alloc>:
{
   1a9b8:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1a9ba:	f00d f8c7 	bl	27b4c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a9be:	4b08      	ldr	r3, [pc, #32]	; (1a9e0 <conn_tx_alloc+0x28>)
   1a9c0:	4283      	cmp	r3, r0
   1a9c2:	d007      	beq.n	1a9d4 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1a9c4:	f04f 32ff 	mov.w	r2, #4294967295
   1a9c8:	f04f 33ff 	mov.w	r3, #4294967295
   1a9cc:	4805      	ldr	r0, [pc, #20]	; (1a9e4 <conn_tx_alloc+0x2c>)
   1a9ce:	f00a fef1 	bl	257b4 <z_impl_k_queue_get>
}
   1a9d2:	bd08      	pop	{r3, pc}
   1a9d4:	2200      	movs	r2, #0
   1a9d6:	2300      	movs	r3, #0
   1a9d8:	4802      	ldr	r0, [pc, #8]	; (1a9e4 <conn_tx_alloc+0x2c>)
   1a9da:	f00a feeb 	bl	257b4 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1a9de:	e7f8      	b.n	1a9d2 <conn_tx_alloc+0x1a>
   1a9e0:	20009698 	.word	0x20009698
   1a9e4:	200085c0 	.word	0x200085c0

0001a9e8 <bt_conn_get_pkts>:
}
   1a9e8:	4800      	ldr	r0, [pc, #0]	; (1a9ec <bt_conn_get_pkts+0x4>)
   1a9ea:	4770      	bx	lr
   1a9ec:	20008100 	.word	0x20008100

0001a9f0 <send_frag>:
{
   1a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9f4:	b083      	sub	sp, #12
   1a9f6:	af00      	add	r7, sp, #0
   1a9f8:	4604      	mov	r4, r0
   1a9fa:	460e      	mov	r6, r1
   1a9fc:	4692      	mov	sl, r2
   1a9fe:	461d      	mov	r5, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1aa00:	f8d1 8014 	ldr.w	r8, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   1aa04:	f7ff fff0 	bl	1a9e8 <bt_conn_get_pkts>
   1aa08:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
   1aa0a:	f04f 32ff 	mov.w	r2, #4294967295
   1aa0e:	f04f 33ff 	mov.w	r3, #4294967295
   1aa12:	f00a ffa5 	bl	25960 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1aa16:	7aa3      	ldrb	r3, [r4, #10]
   1aa18:	2b07      	cmp	r3, #7
   1aa1a:	d16f      	bne.n	1aafc <send_frag+0x10c>
   1aa1c:	f04f 0220 	mov.w	r2, #32
   1aa20:	f3ef 8311 	mrs	r3, BASEPRI
   1aa24:	f382 8812 	msr	BASEPRI_MAX, r2
   1aa28:	f3bf 8f6f 	isb	sy
	if (tx) {
   1aa2c:	f1b8 0f00 	cmp.w	r8, #0
   1aa30:	d07b      	beq.n	1ab2a <send_frag+0x13a>
	parent->next = child;
   1aa32:	2200      	movs	r2, #0
   1aa34:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   1aa38:	69a2      	ldr	r2, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1aa3a:	2a00      	cmp	r2, #0
   1aa3c:	d070      	beq.n	1ab20 <send_frag+0x130>
	parent->next = child;
   1aa3e:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1aa42:	f8c4 8018 	str.w	r8, [r4, #24]
	__asm__ volatile(
   1aa46:	f383 8811 	msr	BASEPRI, r3
   1aa4a:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1aa4e:	4652      	mov	r2, sl
   1aa50:	4631      	mov	r1, r6
   1aa52:	4620      	mov	r0, r4
   1aa54:	f011 f810 	bl	2ba78 <send_acl>
	if (err) {
   1aa58:	4684      	mov	ip, r0
   1aa5a:	2800      	cmp	r0, #0
   1aa5c:	f000 8090 	beq.w	1ab80 <send_frag+0x190>
		BT_ERR("Unable to send to driver (err %d)", err);
   1aa60:	46ea      	mov	sl, sp
   1aa62:	b088      	sub	sp, #32
   1aa64:	466b      	mov	r3, sp
   1aa66:	f113 0210 	adds.w	r2, r3, #16
   1aa6a:	d06b      	beq.n	1ab44 <send_frag+0x154>
   1aa6c:	210c      	movs	r1, #12
   1aa6e:	b152      	cbz	r2, 1aa86 <send_frag+0x96>
   1aa70:	4608      	mov	r0, r1
   1aa72:	2904      	cmp	r1, #4
   1aa74:	dd03      	ble.n	1aa7e <send_frag+0x8e>
   1aa76:	f8df e10c 	ldr.w	lr, [pc, #268]	; 1ab84 <send_frag+0x194>
   1aa7a:	f8c3 e014 	str.w	lr, [r3, #20]
   1aa7e:	2808      	cmp	r0, #8
   1aa80:	dd01      	ble.n	1aa86 <send_frag+0x96>
   1aa82:	f8c3 c018 	str.w	ip, [r3, #24]
   1aa86:	290b      	cmp	r1, #11
   1aa88:	dd5f      	ble.n	1ab4a <send_frag+0x15a>
   1aa8a:	f04f 0c0c 	mov.w	ip, #12
   1aa8e:	b13a      	cbz	r2, 1aaa0 <send_frag+0xb0>
   1aa90:	2103      	movs	r1, #3
   1aa92:	7139      	strb	r1, [r7, #4]
   1aa94:	2100      	movs	r1, #0
   1aa96:	7179      	strb	r1, [r7, #5]
   1aa98:	71b9      	strb	r1, [r7, #6]
   1aa9a:	71f9      	strb	r1, [r7, #7]
   1aa9c:	6878      	ldr	r0, [r7, #4]
   1aa9e:	6118      	str	r0, [r3, #16]
   1aaa0:	2100      	movs	r1, #0
   1aaa2:	f36f 0100 	bfc	r1, #0, #1
   1aaa6:	f36f 0141 	bfc	r1, #1, #1
   1aaaa:	f36f 0182 	bfc	r1, #2, #1
   1aaae:	f36f 01c5 	bfc	r1, #3, #3
   1aab2:	2301      	movs	r3, #1
   1aab4:	f363 1188 	bfi	r1, r3, #6, #3
   1aab8:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1aabc:	f36c 2152 	bfi	r1, ip, #9, #10
   1aac0:	f36f 41de 	bfc	r1, #19, #12
   1aac4:	f36f 71df 	bfc	r1, #31, #1
   1aac8:	2300      	movs	r3, #0
   1aaca:	482f      	ldr	r0, [pc, #188]	; (1ab88 <send_frag+0x198>)
   1aacc:	f7f9 f916 	bl	13cfc <z_impl_z_log_msg_static_create>
   1aad0:	46d5      	mov	sp, sl
	__asm__ volatile(
   1aad2:	f04f 0320 	mov.w	r3, #32
   1aad6:	f3ef 8a11 	mrs	sl, BASEPRI
   1aada:	f383 8812 	msr	BASEPRI_MAX, r3
   1aade:	f3bf 8f6f 	isb	sy
		if (tx) {
   1aae2:	f1b8 0f00 	cmp.w	r8, #0
   1aae6:	d133      	bne.n	1ab50 <send_frag+0x160>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1aae8:	f8db 3000 	ldr.w	r3, [fp]
   1aaec:	b3b3      	cbz	r3, 1ab5c <send_frag+0x16c>
			(*pending_no_cb)--;
   1aaee:	3b01      	subs	r3, #1
   1aaf0:	f8cb 3000 	str.w	r3, [fp]
	__asm__ volatile(
   1aaf4:	f38a 8811 	msr	BASEPRI, sl
   1aaf8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1aafc:	4648      	mov	r0, r9
   1aafe:	f00a fee7 	bl	258d0 <z_impl_k_sem_give>
	if (tx) {
   1ab02:	f1b8 0f00 	cmp.w	r8, #0
   1ab06:	d005      	beq.n	1ab14 <send_frag+0x124>
		tx_data(buf)->tx = NULL;
   1ab08:	2300      	movs	r3, #0
   1ab0a:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   1ab0c:	4641      	mov	r1, r8
   1ab0e:	4620      	mov	r0, r4
   1ab10:	f7ff fef4 	bl	1a8fc <conn_tx_destroy>
	if (always_consume) {
   1ab14:	bb7d      	cbnz	r5, 1ab76 <send_frag+0x186>
}
   1ab16:	4628      	mov	r0, r5
   1ab18:	370c      	adds	r7, #12
   1ab1a:	46bd      	mov	sp, r7
   1ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab20:	f8c4 8018 	str.w	r8, [r4, #24]
	list->head = node;
   1ab24:	f8c4 8014 	str.w	r8, [r4, #20]
}
   1ab28:	e78d      	b.n	1aa46 <send_frag+0x56>
	return list->tail;
   1ab2a:	69a2      	ldr	r2, [r4, #24]
		if (tail_tx) {
   1ab2c:	b13a      	cbz	r2, 1ab3e <send_frag+0x14e>
			pending_no_cb = &tail_tx->pending_no_cb;
   1ab2e:	f102 0b0c 	add.w	fp, r2, #12
		(*pending_no_cb)++;
   1ab32:	f8db 2000 	ldr.w	r2, [fp]
   1ab36:	3201      	adds	r2, #1
   1ab38:	f8cb 2000 	str.w	r2, [fp]
   1ab3c:	e783      	b.n	1aa46 <send_frag+0x56>
			pending_no_cb = &conn->pending_no_cb;
   1ab3e:	f104 0b1c 	add.w	fp, r4, #28
   1ab42:	e7f6      	b.n	1ab32 <send_frag+0x142>
		BT_ERR("Unable to send to driver (err %d)", err);
   1ab44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ab48:	e791      	b.n	1aa6e <send_frag+0x7e>
   1ab4a:	f06f 0c1b 	mvn.w	ip, #27
   1ab4e:	e79e      	b.n	1aa8e <send_frag+0x9e>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1ab50:	4641      	mov	r1, r8
   1ab52:	f104 0014 	add.w	r0, r4, #20
   1ab56:	f010 ff34 	bl	2b9c2 <sys_slist_find_and_remove>
   1ab5a:	e7cb      	b.n	1aaf4 <send_frag+0x104>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1ab5c:	4c0b      	ldr	r4, [pc, #44]	; (1ab8c <send_frag+0x19c>)
   1ab5e:	f240 2329 	movw	r3, #553	; 0x229
   1ab62:	4622      	mov	r2, r4
   1ab64:	490a      	ldr	r1, [pc, #40]	; (1ab90 <send_frag+0x1a0>)
   1ab66:	480b      	ldr	r0, [pc, #44]	; (1ab94 <send_frag+0x1a4>)
   1ab68:	f00e ffbf 	bl	29aea <assert_print>
   1ab6c:	f240 2129 	movw	r1, #553	; 0x229
   1ab70:	4620      	mov	r0, r4
   1ab72:	f00e ffb3 	bl	29adc <assert_post_action>
		net_buf_unref(buf);
   1ab76:	4630      	mov	r0, r6
   1ab78:	f004 fca4 	bl	1f4c4 <net_buf_unref>
	return false;
   1ab7c:	2500      	movs	r5, #0
   1ab7e:	e7ca      	b.n	1ab16 <send_frag+0x126>
	return true;
   1ab80:	2501      	movs	r5, #1
   1ab82:	e7c8      	b.n	1ab16 <send_frag+0x126>
   1ab84:	00031964 	.word	0x00031964
   1ab88:	0002f808 	.word	0x0002f808
   1ab8c:	00031de4 	.word	0x00031de4
   1ab90:	00031e34 	.word	0x00031e34
   1ab94:	0002fdac 	.word	0x0002fdac

0001ab98 <bt_conn_new>:
{
   1ab98:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1ab9a:	2300      	movs	r3, #0
   1ab9c:	428b      	cmp	r3, r1
   1ab9e:	d224      	bcs.n	1abea <bt_conn_new+0x52>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1aba0:	24c8      	movs	r4, #200	; 0xc8
   1aba2:	fb04 0403 	mla	r4, r4, r3, r0
   1aba6:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1abaa:	f04f 0c01 	mov.w	ip, #1
   1abae:	e8d2 efef 	ldaex	lr, [r2]
   1abb2:	f1be 0f00 	cmp.w	lr, #0
   1abb6:	d103      	bne.n	1abc0 <bt_conn_new+0x28>
   1abb8:	e8c2 cfe5 	stlex	r5, ip, [r2]
   1abbc:	2d00      	cmp	r5, #0
   1abbe:	d1f6      	bne.n	1abae <bt_conn_new+0x16>
   1abc0:	d111      	bne.n	1abe6 <bt_conn_new+0x4e>
	if (!conn) {
   1abc2:	b174      	cbz	r4, 1abe2 <bt_conn_new+0x4a>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1abc4:	22c0      	movs	r2, #192	; 0xc0
   1abc6:	2100      	movs	r1, #0
   1abc8:	4620      	mov	r0, r4
   1abca:	f010 fae4 	bl	2b196 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1abce:	4908      	ldr	r1, [pc, #32]	; (1abf0 <bt_conn_new+0x58>)
   1abd0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1abd4:	f00b fb5e 	bl	26294 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1abd8:	4906      	ldr	r1, [pc, #24]	; (1abf4 <bt_conn_new+0x5c>)
   1abda:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1abde:	f00b f99b 	bl	25f18 <k_work_init>
}
   1abe2:	4620      	mov	r0, r4
   1abe4:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1abe6:	4463      	add	r3, ip
   1abe8:	e7d8      	b.n	1ab9c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   1abea:	2400      	movs	r4, #0
   1abec:	e7e9      	b.n	1abc2 <bt_conn_new+0x2a>
   1abee:	bf00      	nop
   1abf0:	0001b931 	.word	0x0001b931
   1abf4:	0002ba29 	.word	0x0002ba29

0001abf8 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   1abf8:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1abfa:	2101      	movs	r1, #1
   1abfc:	4801      	ldr	r0, [pc, #4]	; (1ac04 <acl_conn_new+0xc>)
   1abfe:	f7ff ffcb 	bl	1ab98 <bt_conn_new>
}
   1ac02:	bd08      	pop	{r3, pc}
   1ac04:	20009370 	.word	0x20009370

0001ac08 <bt_acl_recv>:
{
   1ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac0a:	b095      	sub	sp, #84	; 0x54
   1ac0c:	af00      	add	r7, sp, #0
   1ac0e:	4604      	mov	r4, r0
   1ac10:	460d      	mov	r5, r1
	switch (flags) {
   1ac12:	2a01      	cmp	r2, #1
   1ac14:	d05a      	beq.n	1accc <bt_acl_recv+0xc4>
   1ac16:	4613      	mov	r3, r2
   1ac18:	2a02      	cmp	r2, #2
   1ac1a:	f040 80c4 	bne.w	1ada6 <bt_acl_recv+0x19e>
		if (conn->rx) {
   1ac1e:	6903      	ldr	r3, [r0, #16]
   1ac20:	b323      	cbz	r3, 1ac6c <bt_acl_recv+0x64>
			BT_ERR("Unexpected first L2CAP frame");
   1ac22:	4ba0      	ldr	r3, [pc, #640]	; (1aea4 <bt_acl_recv+0x29c>)
   1ac24:	61fb      	str	r3, [r7, #28]
   1ac26:	2302      	movs	r3, #2
   1ac28:	713b      	strb	r3, [r7, #4]
   1ac2a:	2300      	movs	r3, #0
   1ac2c:	717b      	strb	r3, [r7, #5]
   1ac2e:	71bb      	strb	r3, [r7, #6]
   1ac30:	71fb      	strb	r3, [r7, #7]
   1ac32:	687a      	ldr	r2, [r7, #4]
   1ac34:	61ba      	str	r2, [r7, #24]
   1ac36:	4619      	mov	r1, r3
   1ac38:	f363 0100 	bfi	r1, r3, #0, #1
   1ac3c:	f363 0141 	bfi	r1, r3, #1, #1
   1ac40:	f363 0182 	bfi	r1, r3, #2, #1
   1ac44:	f363 01c5 	bfi	r1, r3, #3, #3
   1ac48:	2201      	movs	r2, #1
   1ac4a:	f362 1188 	bfi	r1, r2, #6, #3
   1ac4e:	2208      	movs	r2, #8
   1ac50:	f362 2152 	bfi	r1, r2, #9, #10
   1ac54:	f363 41de 	bfi	r1, r3, #19, #12
   1ac58:	f363 71df 	bfi	r1, r3, #31, #1
   1ac5c:	f107 0218 	add.w	r2, r7, #24
   1ac60:	4891      	ldr	r0, [pc, #580]	; (1aea8 <bt_acl_recv+0x2a0>)
   1ac62:	f7f9 f84b 	bl	13cfc <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1ac66:	4620      	mov	r0, r4
   1ac68:	f010 ff69 	bl	2bb3e <bt_conn_reset_rx_state>
		conn->rx = buf;
   1ac6c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1ac6e:	6921      	ldr	r1, [r4, #16]
   1ac70:	8988      	ldrh	r0, [r1, #12]
   1ac72:	2801      	cmp	r0, #1
   1ac74:	f240 80db 	bls.w	1ae2e <bt_acl_recv+0x226>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1ac78:	688b      	ldr	r3, [r1, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1ac7a:	785a      	ldrb	r2, [r3, #1]
   1ac7c:	781b      	ldrb	r3, [r3, #0]
   1ac7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ac82:	3304      	adds	r3, #4
   1ac84:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1ac86:	4283      	cmp	r3, r0
   1ac88:	f200 80d1 	bhi.w	1ae2e <bt_acl_recv+0x226>
	if (conn->rx->len > acl_total_len) {
   1ac8c:	f080 8103 	bcs.w	1ae96 <bt_acl_recv+0x28e>
		BT_ERR("ACL len mismatch (%u > %u)",
   1ac90:	466d      	mov	r5, sp
   1ac92:	b088      	sub	sp, #32
   1ac94:	4669      	mov	r1, sp
   1ac96:	f111 0210 	adds.w	r2, r1, #16
   1ac9a:	f000 80ce 	beq.w	1ae3a <bt_acl_recv+0x232>
   1ac9e:	2610      	movs	r6, #16
   1aca0:	b17a      	cbz	r2, 1acc2 <bt_acl_recv+0xba>
   1aca2:	46b4      	mov	ip, r6
   1aca4:	2e04      	cmp	r6, #4
   1aca6:	dd03      	ble.n	1acb0 <bt_acl_recv+0xa8>
   1aca8:	f8df e200 	ldr.w	lr, [pc, #512]	; 1aeac <bt_acl_recv+0x2a4>
   1acac:	f8c1 e014 	str.w	lr, [r1, #20]
   1acb0:	f1bc 0f08 	cmp.w	ip, #8
   1acb4:	dd00      	ble.n	1acb8 <bt_acl_recv+0xb0>
   1acb6:	6188      	str	r0, [r1, #24]
   1acb8:	f1bc 0f0c 	cmp.w	ip, #12
   1acbc:	f340 80c0 	ble.w	1ae40 <bt_acl_recv+0x238>
   1acc0:	61cb      	str	r3, [r1, #28]
   1acc2:	2e0f      	cmp	r6, #15
   1acc4:	f340 80e4 	ble.w	1ae90 <bt_acl_recv+0x288>
   1acc8:	2310      	movs	r3, #16
   1acca:	e0bb      	b.n	1ae44 <bt_acl_recv+0x23c>
		if (!conn->rx) {
   1accc:	6900      	ldr	r0, [r0, #16]
   1acce:	b180      	cbz	r0, 1acf2 <bt_acl_recv+0xea>
		if (!buf->len) {
   1acd0:	898e      	ldrh	r6, [r1, #12]
   1acd2:	b3be      	cbz	r6, 1ad44 <bt_acl_recv+0x13c>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1acd4:	3008      	adds	r0, #8
   1acd6:	f012 fafe 	bl	2d2d6 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1acda:	42b0      	cmp	r0, r6
   1acdc:	d336      	bcc.n	1ad4c <bt_acl_recv+0x144>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1acde:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ace0:	89aa      	ldrh	r2, [r5, #12]
   1ace2:	68a9      	ldr	r1, [r5, #8]
   1ace4:	3008      	adds	r0, #8
   1ace6:	f012 faff 	bl	2d2e8 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1acea:	4628      	mov	r0, r5
   1acec:	f004 fbea 	bl	1f4c4 <net_buf_unref>
		break;
   1acf0:	e7bd      	b.n	1ac6e <bt_acl_recv+0x66>
			BT_ERR("Unexpected L2CAP continuation");
   1acf2:	4b6f      	ldr	r3, [pc, #444]	; (1aeb0 <bt_acl_recv+0x2a8>)
   1acf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1acf6:	2302      	movs	r3, #2
   1acf8:	713b      	strb	r3, [r7, #4]
   1acfa:	2300      	movs	r3, #0
   1acfc:	717b      	strb	r3, [r7, #5]
   1acfe:	71bb      	strb	r3, [r7, #6]
   1ad00:	71fb      	strb	r3, [r7, #7]
   1ad02:	687a      	ldr	r2, [r7, #4]
   1ad04:	64ba      	str	r2, [r7, #72]	; 0x48
   1ad06:	4619      	mov	r1, r3
   1ad08:	f363 0100 	bfi	r1, r3, #0, #1
   1ad0c:	f363 0141 	bfi	r1, r3, #1, #1
   1ad10:	f363 0182 	bfi	r1, r3, #2, #1
   1ad14:	f363 01c5 	bfi	r1, r3, #3, #3
   1ad18:	2201      	movs	r2, #1
   1ad1a:	f362 1188 	bfi	r1, r2, #6, #3
   1ad1e:	2208      	movs	r2, #8
   1ad20:	f362 2152 	bfi	r1, r2, #9, #10
   1ad24:	f363 41de 	bfi	r1, r3, #19, #12
   1ad28:	f363 71df 	bfi	r1, r3, #31, #1
   1ad2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1ad30:	485d      	ldr	r0, [pc, #372]	; (1aea8 <bt_acl_recv+0x2a0>)
   1ad32:	f7f8 ffe3 	bl	13cfc <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1ad36:	4620      	mov	r0, r4
   1ad38:	f010 ff01 	bl	2bb3e <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1ad3c:	4628      	mov	r0, r5
   1ad3e:	f004 fbc1 	bl	1f4c4 <net_buf_unref>
			return;
   1ad42:	e074      	b.n	1ae2e <bt_acl_recv+0x226>
			net_buf_unref(buf);
   1ad44:	4608      	mov	r0, r1
   1ad46:	f004 fbbd 	bl	1f4c4 <net_buf_unref>
			return;
   1ad4a:	e070      	b.n	1ae2e <bt_acl_recv+0x226>
			BT_ERR("Not enough buffer space for L2CAP data");
   1ad4c:	4b59      	ldr	r3, [pc, #356]	; (1aeb4 <bt_acl_recv+0x2ac>)
   1ad4e:	637b      	str	r3, [r7, #52]	; 0x34
   1ad50:	2302      	movs	r3, #2
   1ad52:	713b      	strb	r3, [r7, #4]
   1ad54:	2600      	movs	r6, #0
   1ad56:	717e      	strb	r6, [r7, #5]
   1ad58:	71be      	strb	r6, [r7, #6]
   1ad5a:	71fe      	strb	r6, [r7, #7]
   1ad5c:	687b      	ldr	r3, [r7, #4]
   1ad5e:	633b      	str	r3, [r7, #48]	; 0x30
   1ad60:	4631      	mov	r1, r6
   1ad62:	f366 0100 	bfi	r1, r6, #0, #1
   1ad66:	f366 0141 	bfi	r1, r6, #1, #1
   1ad6a:	f366 0182 	bfi	r1, r6, #2, #1
   1ad6e:	f366 01c5 	bfi	r1, r6, #3, #3
   1ad72:	2301      	movs	r3, #1
   1ad74:	f363 1188 	bfi	r1, r3, #6, #3
   1ad78:	2308      	movs	r3, #8
   1ad7a:	f363 2152 	bfi	r1, r3, #9, #10
   1ad7e:	f366 41de 	bfi	r1, r6, #19, #12
   1ad82:	f366 71df 	bfi	r1, r6, #31, #1
   1ad86:	4633      	mov	r3, r6
   1ad88:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1ad8c:	4846      	ldr	r0, [pc, #280]	; (1aea8 <bt_acl_recv+0x2a0>)
   1ad8e:	f7f8 ffb5 	bl	13cfc <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
   1ad92:	4632      	mov	r2, r6
   1ad94:	6921      	ldr	r1, [r4, #16]
   1ad96:	4620      	mov	r0, r4
   1ad98:	f001 f980 	bl	1c09c <bt_l2cap_recv>
			conn->rx = NULL;
   1ad9c:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
   1ad9e:	4628      	mov	r0, r5
   1ada0:	f004 fb90 	bl	1f4c4 <net_buf_unref>
			return;
   1ada4:	e043      	b.n	1ae2e <bt_acl_recv+0x226>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1ada6:	466e      	mov	r6, sp
   1ada8:	b088      	sub	sp, #32
   1adaa:	4669      	mov	r1, sp
   1adac:	f111 0210 	adds.w	r2, r1, #16
   1adb0:	d010      	beq.n	1add4 <bt_acl_recv+0x1cc>
   1adb2:	200c      	movs	r0, #12
   1adb4:	b152      	cbz	r2, 1adcc <bt_acl_recv+0x1c4>
   1adb6:	4684      	mov	ip, r0
   1adb8:	2804      	cmp	r0, #4
   1adba:	dd03      	ble.n	1adc4 <bt_acl_recv+0x1bc>
   1adbc:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 1aeb8 <bt_acl_recv+0x2b0>
   1adc0:	f8c1 e014 	str.w	lr, [r1, #20]
   1adc4:	f1bc 0f08 	cmp.w	ip, #8
   1adc8:	dd07      	ble.n	1adda <bt_acl_recv+0x1d2>
   1adca:	618b      	str	r3, [r1, #24]
   1adcc:	280b      	cmp	r0, #11
   1adce:	dd31      	ble.n	1ae34 <bt_acl_recv+0x22c>
   1add0:	230c      	movs	r3, #12
   1add2:	e004      	b.n	1adde <bt_acl_recv+0x1d6>
   1add4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1add8:	e7ec      	b.n	1adb4 <bt_acl_recv+0x1ac>
   1adda:	f06f 031b 	mvn.w	r3, #27
   1adde:	b13a      	cbz	r2, 1adf0 <bt_acl_recv+0x1e8>
   1ade0:	2003      	movs	r0, #3
   1ade2:	7138      	strb	r0, [r7, #4]
   1ade4:	2000      	movs	r0, #0
   1ade6:	7178      	strb	r0, [r7, #5]
   1ade8:	71b8      	strb	r0, [r7, #6]
   1adea:	71f8      	strb	r0, [r7, #7]
   1adec:	6878      	ldr	r0, [r7, #4]
   1adee:	6108      	str	r0, [r1, #16]
   1adf0:	2100      	movs	r1, #0
   1adf2:	f36f 0100 	bfc	r1, #0, #1
   1adf6:	f36f 0141 	bfc	r1, #1, #1
   1adfa:	f36f 0182 	bfc	r1, #2, #1
   1adfe:	f36f 01c5 	bfc	r1, #3, #3
   1ae02:	2001      	movs	r0, #1
   1ae04:	f360 1188 	bfi	r1, r0, #6, #3
   1ae08:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1ae0c:	f363 2152 	bfi	r1, r3, #9, #10
   1ae10:	f36f 41de 	bfc	r1, #19, #12
   1ae14:	f36f 71df 	bfc	r1, #31, #1
   1ae18:	2300      	movs	r3, #0
   1ae1a:	4823      	ldr	r0, [pc, #140]	; (1aea8 <bt_acl_recv+0x2a0>)
   1ae1c:	f7f8 ff6e 	bl	13cfc <z_impl_z_log_msg_static_create>
   1ae20:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   1ae22:	4620      	mov	r0, r4
   1ae24:	f010 fe8b 	bl	2bb3e <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1ae28:	4628      	mov	r0, r5
   1ae2a:	f004 fb4b 	bl	1f4c4 <net_buf_unref>
}
   1ae2e:	3754      	adds	r7, #84	; 0x54
   1ae30:	46bd      	mov	sp, r7
   1ae32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1ae34:	f06f 031b 	mvn.w	r3, #27
   1ae38:	e7d1      	b.n	1adde <bt_acl_recv+0x1d6>
		BT_ERR("ACL len mismatch (%u > %u)",
   1ae3a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1ae3e:	e72f      	b.n	1aca0 <bt_acl_recv+0x98>
   1ae40:	f06f 031b 	mvn.w	r3, #27
   1ae44:	b13a      	cbz	r2, 1ae56 <bt_acl_recv+0x24e>
   1ae46:	2004      	movs	r0, #4
   1ae48:	7138      	strb	r0, [r7, #4]
   1ae4a:	2000      	movs	r0, #0
   1ae4c:	7178      	strb	r0, [r7, #5]
   1ae4e:	71b8      	strb	r0, [r7, #6]
   1ae50:	71f8      	strb	r0, [r7, #7]
   1ae52:	6878      	ldr	r0, [r7, #4]
   1ae54:	6108      	str	r0, [r1, #16]
   1ae56:	2100      	movs	r1, #0
   1ae58:	f36f 0100 	bfc	r1, #0, #1
   1ae5c:	f36f 0141 	bfc	r1, #1, #1
   1ae60:	f36f 0182 	bfc	r1, #2, #1
   1ae64:	f36f 01c5 	bfc	r1, #3, #3
   1ae68:	2001      	movs	r0, #1
   1ae6a:	f360 1188 	bfi	r1, r0, #6, #3
   1ae6e:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1ae72:	f363 2152 	bfi	r1, r3, #9, #10
   1ae76:	f36f 41de 	bfc	r1, #19, #12
   1ae7a:	f36f 71df 	bfc	r1, #31, #1
   1ae7e:	2300      	movs	r3, #0
   1ae80:	4809      	ldr	r0, [pc, #36]	; (1aea8 <bt_acl_recv+0x2a0>)
   1ae82:	f7f8 ff3b 	bl	13cfc <z_impl_z_log_msg_static_create>
   1ae86:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
   1ae88:	4620      	mov	r0, r4
   1ae8a:	f010 fe58 	bl	2bb3e <bt_conn_reset_rx_state>
		return;
   1ae8e:	e7ce      	b.n	1ae2e <bt_acl_recv+0x226>
		BT_ERR("ACL len mismatch (%u > %u)",
   1ae90:	f06f 031b 	mvn.w	r3, #27
   1ae94:	e7d6      	b.n	1ae44 <bt_acl_recv+0x23c>
	conn->rx = NULL;
   1ae96:	2300      	movs	r3, #0
   1ae98:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1ae9a:	2201      	movs	r2, #1
   1ae9c:	4620      	mov	r0, r4
   1ae9e:	f001 f8fd 	bl	1c09c <bt_l2cap_recv>
   1aea2:	e7c4      	b.n	1ae2e <bt_acl_recv+0x226>
   1aea4:	00031e48 	.word	0x00031e48
   1aea8:	0002f808 	.word	0x0002f808
   1aeac:	00031ed0 	.word	0x00031ed0
   1aeb0:	00031e68 	.word	0x00031e68
   1aeb4:	00031e88 	.word	0x00031e88
   1aeb8:	00031eb0 	.word	0x00031eb0

0001aebc <conn_cleanup>:
{
   1aebc:	b538      	push	{r3, r4, r5, lr}
   1aebe:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1aec0:	2200      	movs	r2, #0
   1aec2:	2300      	movs	r3, #0
   1aec4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1aec8:	f004 f966 	bl	1f198 <net_buf_get>
   1aecc:	4603      	mov	r3, r0
   1aece:	b160      	cbz	r0, 1aeea <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1aed0:	695c      	ldr	r4, [r3, #20]
		tx_data(buf)->tx = NULL;
   1aed2:	2200      	movs	r2, #0
   1aed4:	615a      	str	r2, [r3, #20]
		net_buf_unref(buf);
   1aed6:	4618      	mov	r0, r3
   1aed8:	f004 faf4 	bl	1f4c4 <net_buf_unref>
		if (tx) {
   1aedc:	2c00      	cmp	r4, #0
   1aede:	d0ef      	beq.n	1aec0 <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   1aee0:	4621      	mov	r1, r4
   1aee2:	4628      	mov	r0, r5
   1aee4:	f7ff fd0a 	bl	1a8fc <conn_tx_destroy>
   1aee8:	e7ea      	b.n	1aec0 <conn_cleanup+0x4>
	return list->head;
   1aeea:	696b      	ldr	r3, [r5, #20]
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1aeec:	b95b      	cbnz	r3, 1af06 <conn_cleanup+0x4a>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1aeee:	69eb      	ldr	r3, [r5, #28]
   1aef0:	b9cb      	cbnz	r3, 1af26 <conn_cleanup+0x6a>
	bt_conn_reset_rx_state(conn);
   1aef2:	4628      	mov	r0, r5
   1aef4:	f010 fe23 	bl	2bb3e <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1aef8:	2200      	movs	r2, #0
   1aefa:	2300      	movs	r3, #0
   1aefc:	f105 0060 	add.w	r0, r5, #96	; 0x60
   1af00:	f00b fb24 	bl	2654c <k_work_reschedule>
}
   1af04:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1af06:	4c0e      	ldr	r4, [pc, #56]	; (1af40 <conn_cleanup+0x84>)
   1af08:	f240 23b6 	movw	r3, #694	; 0x2b6
   1af0c:	4622      	mov	r2, r4
   1af0e:	490d      	ldr	r1, [pc, #52]	; (1af44 <conn_cleanup+0x88>)
   1af10:	480d      	ldr	r0, [pc, #52]	; (1af48 <conn_cleanup+0x8c>)
   1af12:	f00e fdea 	bl	29aea <assert_print>
   1af16:	480d      	ldr	r0, [pc, #52]	; (1af4c <conn_cleanup+0x90>)
   1af18:	f00e fde7 	bl	29aea <assert_print>
   1af1c:	f240 21b6 	movw	r1, #694	; 0x2b6
   1af20:	4620      	mov	r0, r4
   1af22:	f00e fddb 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1af26:	4c06      	ldr	r4, [pc, #24]	; (1af40 <conn_cleanup+0x84>)
   1af28:	f240 23b7 	movw	r3, #695	; 0x2b7
   1af2c:	4622      	mov	r2, r4
   1af2e:	4908      	ldr	r1, [pc, #32]	; (1af50 <conn_cleanup+0x94>)
   1af30:	4805      	ldr	r0, [pc, #20]	; (1af48 <conn_cleanup+0x8c>)
   1af32:	f00e fdda 	bl	29aea <assert_print>
   1af36:	f240 21b7 	movw	r1, #695	; 0x2b7
   1af3a:	4620      	mov	r0, r4
   1af3c:	f00e fdce 	bl	29adc <assert_post_action>
   1af40:	00031de4 	.word	0x00031de4
   1af44:	00031eec 	.word	0x00031eec
   1af48:	0002fdac 	.word	0x0002fdac
   1af4c:	00031f14 	.word	0x00031f14
   1af50:	00031f2c 	.word	0x00031f2c

0001af54 <bt_conn_send_cb>:
{
   1af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af58:	b094      	sub	sp, #80	; 0x50
   1af5a:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1af5c:	7a83      	ldrb	r3, [r0, #10]
   1af5e:	2b07      	cmp	r3, #7
   1af60:	d11b      	bne.n	1af9a <bt_conn_send_cb+0x46>
   1af62:	4604      	mov	r4, r0
   1af64:	460d      	mov	r5, r1
   1af66:	4616      	mov	r6, r2
	if (cb) {
   1af68:	2a00      	cmp	r2, #0
   1af6a:	f000 8090 	beq.w	1b08e <bt_conn_send_cb+0x13a>
		tx = conn_tx_alloc();
   1af6e:	f7ff fd23 	bl	1a9b8 <conn_tx_alloc>
		if (!tx) {
   1af72:	4680      	mov	r8, r0
   1af74:	2800      	cmp	r0, #0
   1af76:	d038      	beq.n	1afea <bt_conn_send_cb+0x96>
		if (conn->state != BT_CONN_CONNECTED) {
   1af78:	7aa3      	ldrb	r3, [r4, #10]
   1af7a:	2b07      	cmp	r3, #7
   1af7c:	d15d      	bne.n	1b03a <bt_conn_send_cb+0xe6>
		tx->cb = cb;
   1af7e:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   1af80:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   1af82:	2300      	movs	r3, #0
   1af84:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1af86:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1af88:	4629      	mov	r1, r5
   1af8a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1af8e:	f004 fa67 	bl	1f460 <net_buf_put>
	return 0;
   1af92:	2000      	movs	r0, #0
}
   1af94:	b014      	add	sp, #80	; 0x50
   1af96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
   1af9a:	4b3e      	ldr	r3, [pc, #248]	; (1b094 <bt_conn_send_cb+0x140>)
   1af9c:	9313      	str	r3, [sp, #76]	; 0x4c
   1af9e:	2302      	movs	r3, #2
   1afa0:	f88d 3004 	strb.w	r3, [sp, #4]
   1afa4:	2300      	movs	r3, #0
   1afa6:	f88d 3005 	strb.w	r3, [sp, #5]
   1afaa:	f88d 3006 	strb.w	r3, [sp, #6]
   1afae:	f88d 3007 	strb.w	r3, [sp, #7]
   1afb2:	9a01      	ldr	r2, [sp, #4]
   1afb4:	9212      	str	r2, [sp, #72]	; 0x48
   1afb6:	4619      	mov	r1, r3
   1afb8:	f363 0100 	bfi	r1, r3, #0, #1
   1afbc:	f363 0141 	bfi	r1, r3, #1, #1
   1afc0:	f363 0182 	bfi	r1, r3, #2, #1
   1afc4:	f363 01c5 	bfi	r1, r3, #3, #3
   1afc8:	2201      	movs	r2, #1
   1afca:	f362 1188 	bfi	r1, r2, #6, #3
   1afce:	2208      	movs	r2, #8
   1afd0:	f362 2152 	bfi	r1, r2, #9, #10
   1afd4:	f363 41de 	bfi	r1, r3, #19, #12
   1afd8:	f363 71df 	bfi	r1, r3, #31, #1
   1afdc:	aa12      	add	r2, sp, #72	; 0x48
   1afde:	482e      	ldr	r0, [pc, #184]	; (1b098 <bt_conn_send_cb+0x144>)
   1afe0:	f7f8 fe8c 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
   1afe4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1afe8:	e7d4      	b.n	1af94 <bt_conn_send_cb+0x40>
			BT_ERR("Unable to allocate TX context");
   1afea:	4b2c      	ldr	r3, [pc, #176]	; (1b09c <bt_conn_send_cb+0x148>)
   1afec:	930d      	str	r3, [sp, #52]	; 0x34
   1afee:	2302      	movs	r3, #2
   1aff0:	f88d 3004 	strb.w	r3, [sp, #4]
   1aff4:	2300      	movs	r3, #0
   1aff6:	f88d 3005 	strb.w	r3, [sp, #5]
   1affa:	f88d 3006 	strb.w	r3, [sp, #6]
   1affe:	f88d 3007 	strb.w	r3, [sp, #7]
   1b002:	9a01      	ldr	r2, [sp, #4]
   1b004:	920c      	str	r2, [sp, #48]	; 0x30
   1b006:	4619      	mov	r1, r3
   1b008:	f363 0100 	bfi	r1, r3, #0, #1
   1b00c:	f363 0141 	bfi	r1, r3, #1, #1
   1b010:	f363 0182 	bfi	r1, r3, #2, #1
   1b014:	f363 01c5 	bfi	r1, r3, #3, #3
   1b018:	2201      	movs	r2, #1
   1b01a:	f362 1188 	bfi	r1, r2, #6, #3
   1b01e:	2208      	movs	r2, #8
   1b020:	f362 2152 	bfi	r1, r2, #9, #10
   1b024:	f363 41de 	bfi	r1, r3, #19, #12
   1b028:	f363 71df 	bfi	r1, r3, #31, #1
   1b02c:	aa0c      	add	r2, sp, #48	; 0x30
   1b02e:	481a      	ldr	r0, [pc, #104]	; (1b098 <bt_conn_send_cb+0x144>)
   1b030:	f7f8 fe64 	bl	13cfc <z_impl_z_log_msg_static_create>
			return -ENOBUFS;
   1b034:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b038:	e7ac      	b.n	1af94 <bt_conn_send_cb+0x40>
			BT_WARN("Disconnected while allocating context");
   1b03a:	4b19      	ldr	r3, [pc, #100]	; (1b0a0 <bt_conn_send_cb+0x14c>)
   1b03c:	9307      	str	r3, [sp, #28]
   1b03e:	2202      	movs	r2, #2
   1b040:	f88d 2004 	strb.w	r2, [sp, #4]
   1b044:	2300      	movs	r3, #0
   1b046:	f88d 3005 	strb.w	r3, [sp, #5]
   1b04a:	f88d 3006 	strb.w	r3, [sp, #6]
   1b04e:	f88d 3007 	strb.w	r3, [sp, #7]
   1b052:	9901      	ldr	r1, [sp, #4]
   1b054:	9106      	str	r1, [sp, #24]
   1b056:	4619      	mov	r1, r3
   1b058:	f363 0100 	bfi	r1, r3, #0, #1
   1b05c:	f363 0141 	bfi	r1, r3, #1, #1
   1b060:	f363 0182 	bfi	r1, r3, #2, #1
   1b064:	f363 01c5 	bfi	r1, r3, #3, #3
   1b068:	f362 1188 	bfi	r1, r2, #6, #3
   1b06c:	2208      	movs	r2, #8
   1b06e:	f362 2152 	bfi	r1, r2, #9, #10
   1b072:	f363 41de 	bfi	r1, r3, #19, #12
   1b076:	f363 71df 	bfi	r1, r3, #31, #1
   1b07a:	aa06      	add	r2, sp, #24
   1b07c:	4806      	ldr	r0, [pc, #24]	; (1b098 <bt_conn_send_cb+0x144>)
   1b07e:	f7f8 fe3d 	bl	13cfc <z_impl_z_log_msg_static_create>
			tx_free(tx);
   1b082:	4640      	mov	r0, r8
   1b084:	f7ff fbf0 	bl	1a868 <tx_free>
			return -ENOTCONN;
   1b088:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b08c:	e782      	b.n	1af94 <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   1b08e:	2300      	movs	r3, #0
   1b090:	614b      	str	r3, [r1, #20]
   1b092:	e779      	b.n	1af88 <bt_conn_send_cb+0x34>
   1b094:	00031f48 	.word	0x00031f48
   1b098:	0002f808 	.word	0x0002f808
   1b09c:	00031f58 	.word	0x00031f58
   1b0a0:	00031f78 	.word	0x00031f78

0001b0a4 <bt_conn_prepare_events>:
{
   1b0a4:	b570      	push	{r4, r5, r6, lr}
   1b0a6:	4606      	mov	r6, r0
	z_impl_k_poll_signal_init(sig);
   1b0a8:	4c0e      	ldr	r4, [pc, #56]	; (1b0e4 <bt_conn_prepare_events+0x40>)
   1b0aa:	4620      	mov	r0, r4
   1b0ac:	f014 f96b 	bl	2f386 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1b0b0:	4623      	mov	r3, r4
   1b0b2:	2200      	movs	r2, #0
   1b0b4:	2101      	movs	r1, #1
   1b0b6:	4630      	mov	r0, r6
   1b0b8:	f00d fdac 	bl	28c14 <k_poll_event_init>
   1b0bc:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b0be:	2400      	movs	r4, #0
   1b0c0:	b10c      	cbz	r4, 1b0c6 <bt_conn_prepare_events+0x22>
}
   1b0c2:	4628      	mov	r0, r5
   1b0c4:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1b0c6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1b0ca:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   1b0ce:	20c8      	movs	r0, #200	; 0xc8
   1b0d0:	4b05      	ldr	r3, [pc, #20]	; (1b0e8 <bt_conn_prepare_events+0x44>)
   1b0d2:	fb00 3004 	mla	r0, r0, r4, r3
   1b0d6:	f010 fd3b 	bl	2bb50 <conn_prepare_events>
   1b0da:	b900      	cbnz	r0, 1b0de <bt_conn_prepare_events+0x3a>
			ev_count++;
   1b0dc:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b0de:	3401      	adds	r4, #1
   1b0e0:	e7ee      	b.n	1b0c0 <bt_conn_prepare_events+0x1c>
   1b0e2:	bf00      	nop
   1b0e4:	20008260 	.word	0x20008260
   1b0e8:	20009370 	.word	0x20009370

0001b0ec <bt_conn_ref>:
{
   1b0ec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   1b0ee:	4601      	mov	r1, r0
   1b0f0:	b180      	cbz	r0, 1b114 <bt_conn_ref+0x28>
		old = atomic_get(&conn->ref);
   1b0f2:	f101 03c0 	add.w	r3, r1, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b0f6:	e8d3 2faf 	lda	r2, [r3]
		if (!old) {
   1b0fa:	b1c2      	cbz	r2, 1b12e <bt_conn_ref+0x42>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1b0fc:	1c50      	adds	r0, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b0fe:	e8d3 cfef 	ldaex	ip, [r3]
   1b102:	4594      	cmp	ip, r2
   1b104:	d103      	bne.n	1b10e <bt_conn_ref+0x22>
   1b106:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1b10a:	2c00      	cmp	r4, #0
   1b10c:	d1f7      	bne.n	1b0fe <bt_conn_ref+0x12>
   1b10e:	d1f0      	bne.n	1b0f2 <bt_conn_ref+0x6>
}
   1b110:	4608      	mov	r0, r1
   1b112:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   1b114:	4c07      	ldr	r4, [pc, #28]	; (1b134 <bt_conn_ref+0x48>)
   1b116:	f44f 638f 	mov.w	r3, #1144	; 0x478
   1b11a:	4622      	mov	r2, r4
   1b11c:	4906      	ldr	r1, [pc, #24]	; (1b138 <bt_conn_ref+0x4c>)
   1b11e:	4807      	ldr	r0, [pc, #28]	; (1b13c <bt_conn_ref+0x50>)
   1b120:	f00e fce3 	bl	29aea <assert_print>
   1b124:	f44f 618f 	mov.w	r1, #1144	; 0x478
   1b128:	4620      	mov	r0, r4
   1b12a:	f00e fcd7 	bl	29adc <assert_post_action>
			return NULL;
   1b12e:	2100      	movs	r1, #0
   1b130:	e7ee      	b.n	1b110 <bt_conn_ref+0x24>
   1b132:	bf00      	nop
   1b134:	00031de4 	.word	0x00031de4
   1b138:	00031fa0 	.word	0x00031fa0
   1b13c:	0002fdac 	.word	0x0002fdac

0001b140 <bt_conn_unref>:
{
   1b140:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   1b142:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b146:	e8d3 2fef 	ldaex	r2, [r3]
   1b14a:	1e51      	subs	r1, r2, #1
   1b14c:	e8c3 1fec 	stlex	ip, r1, [r3]
   1b150:	f1bc 0f00 	cmp.w	ip, #0
   1b154:	d1f7      	bne.n	1b146 <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   1b156:	2a00      	cmp	r2, #0
   1b158:	dd05      	ble.n	1b166 <bt_conn_unref+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1b15a:	8841      	ldrh	r1, [r0, #2]
   1b15c:	f240 1201 	movw	r2, #257	; 0x101
   1b160:	4291      	cmp	r1, r2
   1b162:	d010      	beq.n	1b186 <bt_conn_unref+0x46>
}
   1b164:	bd10      	pop	{r4, pc}
	__ASSERT(old > 0, "Conn reference counter is 0");
   1b166:	4c0b      	ldr	r4, [pc, #44]	; (1b194 <bt_conn_unref+0x54>)
   1b168:	f240 4395 	movw	r3, #1173	; 0x495
   1b16c:	4622      	mov	r2, r4
   1b16e:	490a      	ldr	r1, [pc, #40]	; (1b198 <bt_conn_unref+0x58>)
   1b170:	480a      	ldr	r0, [pc, #40]	; (1b19c <bt_conn_unref+0x5c>)
   1b172:	f00e fcba 	bl	29aea <assert_print>
   1b176:	480a      	ldr	r0, [pc, #40]	; (1b1a0 <bt_conn_unref+0x60>)
   1b178:	f00e fcb7 	bl	29aea <assert_print>
   1b17c:	f240 4195 	movw	r1, #1173	; 0x495
   1b180:	4620      	mov	r0, r4
   1b182:	f00e fcab 	bl	29adc <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b186:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1b18a:	2b00      	cmp	r3, #0
   1b18c:	d1ea      	bne.n	1b164 <bt_conn_unref+0x24>
		bt_le_adv_resume();
   1b18e:	f010 fbc6 	bl	2b91e <bt_le_adv_resume>
}
   1b192:	e7e7      	b.n	1b164 <bt_conn_unref+0x24>
   1b194:	00031de4 	.word	0x00031de4
   1b198:	00031fa8 	.word	0x00031fa8
   1b19c:	0002fdac 	.word	0x0002fdac
   1b1a0:	00031fb0 	.word	0x00031fb0

0001b1a4 <bt_conn_lookup_handle>:
{
   1b1a4:	b508      	push	{r3, lr}
   1b1a6:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1b1a8:	2101      	movs	r1, #1
   1b1aa:	4802      	ldr	r0, [pc, #8]	; (1b1b4 <bt_conn_lookup_handle+0x10>)
   1b1ac:	f010 fd06 	bl	2bbbc <conn_lookup_handle>
}
   1b1b0:	bd08      	pop	{r3, pc}
   1b1b2:	bf00      	nop
   1b1b4:	20009370 	.word	0x20009370

0001b1b8 <bt_conn_set_state>:
{
   1b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1ba:	b083      	sub	sp, #12
   1b1bc:	af00      	add	r7, sp, #0
   1b1be:	460d      	mov	r5, r1
	if (conn->state == state) {
   1b1c0:	7a86      	ldrb	r6, [r0, #10]
   1b1c2:	428e      	cmp	r6, r1
   1b1c4:	d014      	beq.n	1b1f0 <bt_conn_set_state+0x38>
   1b1c6:	4604      	mov	r4, r0
	conn->state = state;
   1b1c8:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1b1ca:	b916      	cbnz	r6, 1b1d2 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1b1cc:	7883      	ldrb	r3, [r0, #2]
   1b1ce:	2b08      	cmp	r3, #8
   1b1d0:	d166      	bne.n	1b2a0 <bt_conn_set_state+0xe8>
	switch (conn->state) {
   1b1d2:	7aa3      	ldrb	r3, [r4, #10]
   1b1d4:	2b08      	cmp	r3, #8
   1b1d6:	f200 8123 	bhi.w	1b420 <bt_conn_set_state+0x268>
   1b1da:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b1de:	007d      	.short	0x007d
   1b1e0:	005b011d 	.word	0x005b011d
   1b1e4:	005b005b 	.word	0x005b005b
   1b1e8:	005b005b 	.word	0x005b005b
   1b1ec:	005b0064 	.word	0x005b0064
		BT_WARN("no transition %s", state2str(state));
   1b1f0:	4608      	mov	r0, r1
   1b1f2:	f7ff fb07 	bl	1a804 <state2str>
   1b1f6:	466d      	mov	r5, sp
   1b1f8:	2300      	movs	r3, #0
   1b1fa:	713b      	strb	r3, [r7, #4]
   1b1fc:	2302      	movs	r3, #2
   1b1fe:	717b      	strb	r3, [r7, #5]
   1b200:	b088      	sub	sp, #32
   1b202:	466c      	mov	r4, sp
   1b204:	f114 0210 	adds.w	r2, r4, #16
   1b208:	d011      	beq.n	1b22e <bt_conn_set_state+0x76>
   1b20a:	260e      	movs	r6, #14
   1b20c:	b11a      	cbz	r2, 1b216 <bt_conn_set_state+0x5e>
   1b20e:	2e04      	cmp	r6, #4
   1b210:	dd01      	ble.n	1b216 <bt_conn_set_state+0x5e>
   1b212:	4ba1      	ldr	r3, [pc, #644]	; (1b498 <bt_conn_set_state+0x2e0>)
   1b214:	6163      	str	r3, [r4, #20]
   1b216:	2300      	movs	r3, #0
   1b218:	703b      	strb	r3, [r7, #0]
   1b21a:	2302      	movs	r3, #2
   1b21c:	707b      	strb	r3, [r7, #1]
   1b21e:	b19a      	cbz	r2, 1b248 <bt_conn_set_state+0x90>
   1b220:	2e08      	cmp	r6, #8
   1b222:	dd00      	ble.n	1b226 <bt_conn_set_state+0x6e>
   1b224:	61a0      	str	r0, [r4, #24]
   1b226:	f104 031c 	add.w	r3, r4, #28
   1b22a:	2100      	movs	r1, #0
   1b22c:	e00a      	b.n	1b244 <bt_conn_set_state+0x8c>
   1b22e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1b232:	e7eb      	b.n	1b20c <bt_conn_set_state+0x54>
   1b234:	f101 0008 	add.w	r0, r1, #8
   1b238:	4438      	add	r0, r7
   1b23a:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1b23e:	f803 0b01 	strb.w	r0, [r3], #1
   1b242:	3101      	adds	r1, #1
   1b244:	2901      	cmp	r1, #1
   1b246:	d9f5      	bls.n	1b234 <bt_conn_set_state+0x7c>
   1b248:	2e0d      	cmp	r6, #13
   1b24a:	dd26      	ble.n	1b29a <bt_conn_set_state+0xe2>
   1b24c:	230e      	movs	r3, #14
   1b24e:	b142      	cbz	r2, 1b262 <bt_conn_set_state+0xaa>
   1b250:	2103      	movs	r1, #3
   1b252:	7139      	strb	r1, [r7, #4]
   1b254:	2100      	movs	r1, #0
   1b256:	7179      	strb	r1, [r7, #5]
   1b258:	71b9      	strb	r1, [r7, #6]
   1b25a:	2101      	movs	r1, #1
   1b25c:	71f9      	strb	r1, [r7, #7]
   1b25e:	6878      	ldr	r0, [r7, #4]
   1b260:	6120      	str	r0, [r4, #16]
   1b262:	2100      	movs	r1, #0
   1b264:	f36f 0100 	bfc	r1, #0, #1
   1b268:	f36f 0141 	bfc	r1, #1, #1
   1b26c:	f36f 0182 	bfc	r1, #2, #1
   1b270:	f36f 01c5 	bfc	r1, #3, #3
   1b274:	2002      	movs	r0, #2
   1b276:	f360 1188 	bfi	r1, r0, #6, #3
   1b27a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b27e:	f363 2152 	bfi	r1, r3, #9, #10
   1b282:	f36f 41de 	bfc	r1, #19, #12
   1b286:	f36f 71df 	bfc	r1, #31, #1
   1b28a:	2300      	movs	r3, #0
   1b28c:	4883      	ldr	r0, [pc, #524]	; (1b49c <bt_conn_set_state+0x2e4>)
   1b28e:	f7f8 fd35 	bl	13cfc <z_impl_z_log_msg_static_create>
   1b292:	46ad      	mov	sp, r5
}
   1b294:	370c      	adds	r7, #12
   1b296:	46bd      	mov	sp, r7
   1b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("no transition %s", state2str(state));
   1b29a:	f06f 031b 	mvn.w	r3, #27
   1b29e:	e7d6      	b.n	1b24e <bt_conn_set_state+0x96>
			bt_conn_ref(conn);
   1b2a0:	f7ff ff24 	bl	1b0ec <bt_conn_ref>
   1b2a4:	e795      	b.n	1b1d2 <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1b2a6:	78a3      	ldrb	r3, [r4, #2]
   1b2a8:	2b04      	cmp	r3, #4
   1b2aa:	d0f3      	beq.n	1b294 <bt_conn_set_state+0xdc>
		k_fifo_init(&conn->tx_queue);
   1b2ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1b2b0:	f013 fe2a 	bl	2ef08 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1b2b4:	2100      	movs	r1, #0
   1b2b6:	487a      	ldr	r0, [pc, #488]	; (1b4a0 <bt_conn_set_state+0x2e8>)
   1b2b8:	f00d fe1e 	bl	28ef8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1b2bc:	2300      	movs	r3, #0
   1b2be:	6563      	str	r3, [r4, #84]	; 0x54
	list->tail = NULL;
   1b2c0:	65a3      	str	r3, [r4, #88]	; 0x58
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   1b2c2:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b2c4:	2b01      	cmp	r3, #1
   1b2c6:	d1e5      	bne.n	1b294 <bt_conn_set_state+0xdc>
			k_work_schedule(&conn->deferred_work,
   1b2c8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1b2cc:	2300      	movs	r3, #0
   1b2ce:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1b2d2:	f00b f8c7 	bl	26464 <k_work_schedule>
   1b2d6:	e7dd      	b.n	1b294 <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1b2d8:	78a3      	ldrb	r3, [r4, #2]
   1b2da:	2b04      	cmp	r3, #4
   1b2dc:	d016      	beq.n	1b30c <bt_conn_set_state+0x154>
		switch (old_state) {
   1b2de:	2e08      	cmp	r6, #8
   1b2e0:	d8d8      	bhi.n	1b294 <bt_conn_set_state+0xdc>
   1b2e2:	a301      	add	r3, pc, #4	; (adr r3, 1b2e8 <bt_conn_set_state+0x130>)
   1b2e4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b2e8:	0001b3a1 	.word	0x0001b3a1
   1b2ec:	0001b315 	.word	0x0001b315
   1b2f0:	0001b369 	.word	0x0001b369
   1b2f4:	0001b391 	.word	0x0001b391
   1b2f8:	0001b399 	.word	0x0001b399
   1b2fc:	0001b37d 	.word	0x0001b37d
   1b300:	0001b355 	.word	0x0001b355
   1b304:	0001b295 	.word	0x0001b295
   1b308:	0001b3a1 	.word	0x0001b3a1
			bt_conn_unref(conn);
   1b30c:	4620      	mov	r0, r4
   1b30e:	f7ff ff17 	bl	1b140 <bt_conn_unref>
			break;
   1b312:	e7bf      	b.n	1b294 <bt_conn_set_state+0xdc>
			tx_notify(conn);
   1b314:	4620      	mov	r0, r4
   1b316:	f010 fb64 	bl	2b9e2 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1b31a:	78a3      	ldrb	r3, [r4, #2]
   1b31c:	2b01      	cmp	r3, #1
   1b31e:	d00d      	beq.n	1b33c <bt_conn_set_state+0x184>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1b320:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b322:	e8d4 3fef 	ldaex	r3, [r4]
   1b326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b32a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1b32e:	2a00      	cmp	r2, #0
   1b330:	d1f7      	bne.n	1b322 <bt_conn_set_state+0x16a>
   1b332:	2100      	movs	r1, #0
   1b334:	485a      	ldr	r0, [pc, #360]	; (1b4a0 <bt_conn_set_state+0x2e8>)
   1b336:	f00d fddf 	bl	28ef8 <z_impl_k_poll_signal_raise>
   1b33a:	e7ab      	b.n	1b294 <bt_conn_set_state+0xdc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1b33c:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1b340:	4628      	mov	r0, r5
   1b342:	f00a ffd7 	bl	262f4 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1b346:	f010 0f0c 	tst.w	r0, #12
   1b34a:	d0e9      	beq.n	1b320 <bt_conn_set_state+0x168>
				k_work_cancel_delayable(&conn->deferred_work);
   1b34c:	4628      	mov	r0, r5
   1b34e:	f00b f905 	bl	2655c <k_work_cancel_delayable>
   1b352:	e7e5      	b.n	1b320 <bt_conn_set_state+0x168>
			if (conn->err) {
   1b354:	7a63      	ldrb	r3, [r4, #9]
   1b356:	b91b      	cbnz	r3, 1b360 <bt_conn_set_state+0x1a8>
			bt_conn_unref(conn);
   1b358:	4620      	mov	r0, r4
   1b35a:	f7ff fef1 	bl	1b140 <bt_conn_unref>
			break;
   1b35e:	e799      	b.n	1b294 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1b360:	4620      	mov	r0, r4
   1b362:	f7ff faeb 	bl	1a93c <notify_connected>
   1b366:	e7f7      	b.n	1b358 <bt_conn_set_state+0x1a0>
			if (conn->err) {
   1b368:	7a63      	ldrb	r3, [r4, #9]
   1b36a:	b91b      	cbnz	r3, 1b374 <bt_conn_set_state+0x1bc>
			bt_conn_unref(conn);
   1b36c:	4620      	mov	r0, r4
   1b36e:	f7ff fee7 	bl	1b140 <bt_conn_unref>
			break;
   1b372:	e78f      	b.n	1b294 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1b374:	4620      	mov	r0, r4
   1b376:	f7ff fae1 	bl	1a93c <notify_connected>
   1b37a:	e7f7      	b.n	1b36c <bt_conn_set_state+0x1b4>
			if (conn->err) {
   1b37c:	7a63      	ldrb	r3, [r4, #9]
   1b37e:	b91b      	cbnz	r3, 1b388 <bt_conn_set_state+0x1d0>
			bt_conn_unref(conn);
   1b380:	4620      	mov	r0, r4
   1b382:	f7ff fedd 	bl	1b140 <bt_conn_unref>
			break;
   1b386:	e785      	b.n	1b294 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1b388:	4620      	mov	r0, r4
   1b38a:	f7ff fad7 	bl	1a93c <notify_connected>
   1b38e:	e7f7      	b.n	1b380 <bt_conn_set_state+0x1c8>
			bt_conn_unref(conn);
   1b390:	4620      	mov	r0, r4
   1b392:	f7ff fed5 	bl	1b140 <bt_conn_unref>
			break;
   1b396:	e77d      	b.n	1b294 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1b398:	4620      	mov	r0, r4
   1b39a:	f7ff fed1 	bl	1b140 <bt_conn_unref>
			break;
   1b39e:	e779      	b.n	1b294 <bt_conn_set_state+0xdc>
			BT_WARN("Invalid (%u) old state", state);
   1b3a0:	466e      	mov	r6, sp
   1b3a2:	b088      	sub	sp, #32
   1b3a4:	466b      	mov	r3, sp
   1b3a6:	f113 0210 	adds.w	r2, r3, #16
   1b3aa:	d02f      	beq.n	1b40c <bt_conn_set_state+0x254>
   1b3ac:	210c      	movs	r1, #12
   1b3ae:	b13a      	cbz	r2, 1b3c0 <bt_conn_set_state+0x208>
   1b3b0:	4608      	mov	r0, r1
   1b3b2:	2904      	cmp	r1, #4
   1b3b4:	dd01      	ble.n	1b3ba <bt_conn_set_state+0x202>
   1b3b6:	4c3b      	ldr	r4, [pc, #236]	; (1b4a4 <bt_conn_set_state+0x2ec>)
   1b3b8:	615c      	str	r4, [r3, #20]
   1b3ba:	2808      	cmp	r0, #8
   1b3bc:	dd00      	ble.n	1b3c0 <bt_conn_set_state+0x208>
   1b3be:	619d      	str	r5, [r3, #24]
   1b3c0:	290b      	cmp	r1, #11
   1b3c2:	dd26      	ble.n	1b412 <bt_conn_set_state+0x25a>
   1b3c4:	240c      	movs	r4, #12
   1b3c6:	b13a      	cbz	r2, 1b3d8 <bt_conn_set_state+0x220>
   1b3c8:	2103      	movs	r1, #3
   1b3ca:	7139      	strb	r1, [r7, #4]
   1b3cc:	2100      	movs	r1, #0
   1b3ce:	7179      	strb	r1, [r7, #5]
   1b3d0:	71b9      	strb	r1, [r7, #6]
   1b3d2:	71f9      	strb	r1, [r7, #7]
   1b3d4:	6878      	ldr	r0, [r7, #4]
   1b3d6:	6118      	str	r0, [r3, #16]
   1b3d8:	2100      	movs	r1, #0
   1b3da:	f36f 0100 	bfc	r1, #0, #1
   1b3de:	f36f 0141 	bfc	r1, #1, #1
   1b3e2:	f36f 0182 	bfc	r1, #2, #1
   1b3e6:	f36f 01c5 	bfc	r1, #3, #3
   1b3ea:	2302      	movs	r3, #2
   1b3ec:	f363 1188 	bfi	r1, r3, #6, #3
   1b3f0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1b3f4:	f363 2152 	bfi	r1, r3, #9, #10
   1b3f8:	f36f 41de 	bfc	r1, #19, #12
   1b3fc:	f36f 71df 	bfc	r1, #31, #1
   1b400:	2300      	movs	r3, #0
   1b402:	4826      	ldr	r0, [pc, #152]	; (1b49c <bt_conn_set_state+0x2e4>)
   1b404:	f7f8 fc7a 	bl	13cfc <z_impl_z_log_msg_static_create>
   1b408:	46b5      	mov	sp, r6
   1b40a:	e743      	b.n	1b294 <bt_conn_set_state+0xdc>
   1b40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b410:	e7cd      	b.n	1b3ae <bt_conn_set_state+0x1f6>
   1b412:	f06f 041b 	mvn.w	r4, #27
   1b416:	e7d6      	b.n	1b3c6 <bt_conn_set_state+0x20e>
		process_unack_tx(conn);
   1b418:	4620      	mov	r0, r4
   1b41a:	f010 fb4e 	bl	2baba <process_unack_tx>
		break;
   1b41e:	e739      	b.n	1b294 <bt_conn_set_state+0xdc>
		BT_WARN("no valid (%u) state was set", state);
   1b420:	466e      	mov	r6, sp
   1b422:	b088      	sub	sp, #32
   1b424:	466b      	mov	r3, sp
   1b426:	f113 0210 	adds.w	r2, r3, #16
   1b42a:	d130      	bne.n	1b48e <bt_conn_set_state+0x2d6>
   1b42c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b430:	b13a      	cbz	r2, 1b442 <bt_conn_set_state+0x28a>
   1b432:	4608      	mov	r0, r1
   1b434:	2904      	cmp	r1, #4
   1b436:	dd01      	ble.n	1b43c <bt_conn_set_state+0x284>
   1b438:	4c1b      	ldr	r4, [pc, #108]	; (1b4a8 <bt_conn_set_state+0x2f0>)
   1b43a:	615c      	str	r4, [r3, #20]
   1b43c:	2808      	cmp	r0, #8
   1b43e:	dd00      	ble.n	1b442 <bt_conn_set_state+0x28a>
   1b440:	619d      	str	r5, [r3, #24]
   1b442:	290b      	cmp	r1, #11
   1b444:	dd25      	ble.n	1b492 <bt_conn_set_state+0x2da>
   1b446:	240c      	movs	r4, #12
   1b448:	b13a      	cbz	r2, 1b45a <bt_conn_set_state+0x2a2>
   1b44a:	2103      	movs	r1, #3
   1b44c:	7139      	strb	r1, [r7, #4]
   1b44e:	2100      	movs	r1, #0
   1b450:	7179      	strb	r1, [r7, #5]
   1b452:	71b9      	strb	r1, [r7, #6]
   1b454:	71f9      	strb	r1, [r7, #7]
   1b456:	6878      	ldr	r0, [r7, #4]
   1b458:	6118      	str	r0, [r3, #16]
   1b45a:	2100      	movs	r1, #0
   1b45c:	f36f 0100 	bfc	r1, #0, #1
   1b460:	f36f 0141 	bfc	r1, #1, #1
   1b464:	f36f 0182 	bfc	r1, #2, #1
   1b468:	f36f 01c5 	bfc	r1, #3, #3
   1b46c:	2302      	movs	r3, #2
   1b46e:	f363 1188 	bfi	r1, r3, #6, #3
   1b472:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b476:	f364 2152 	bfi	r1, r4, #9, #10
   1b47a:	f36f 41de 	bfc	r1, #19, #12
   1b47e:	f36f 71df 	bfc	r1, #31, #1
   1b482:	2300      	movs	r3, #0
   1b484:	4805      	ldr	r0, [pc, #20]	; (1b49c <bt_conn_set_state+0x2e4>)
   1b486:	f7f8 fc39 	bl	13cfc <z_impl_z_log_msg_static_create>
   1b48a:	46b5      	mov	sp, r6
   1b48c:	e702      	b.n	1b294 <bt_conn_set_state+0xdc>
   1b48e:	210c      	movs	r1, #12
   1b490:	e7ce      	b.n	1b430 <bt_conn_set_state+0x278>
   1b492:	f06f 041b 	mvn.w	r4, #27
   1b496:	e7d7      	b.n	1b448 <bt_conn_set_state+0x290>
   1b498:	00031fd0 	.word	0x00031fd0
   1b49c:	0002f808 	.word	0x0002f808
   1b4a0:	20008260 	.word	0x20008260
   1b4a4:	00031fe4 	.word	0x00031fe4
   1b4a8:	00031ffc 	.word	0x00031ffc

0001b4ac <bt_conn_index>:
		index = conn - acl_conns;
   1b4ac:	4a0d      	ldr	r2, [pc, #52]	; (1b4e4 <bt_conn_index+0x38>)
   1b4ae:	1a83      	subs	r3, r0, r2
   1b4b0:	10db      	asrs	r3, r3, #3
   1b4b2:	490d      	ldr	r1, [pc, #52]	; (1b4e8 <bt_conn_index+0x3c>)
   1b4b4:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1b4b8:	4290      	cmp	r0, r2
   1b4ba:	d101      	bne.n	1b4c0 <bt_conn_index+0x14>
}
   1b4bc:	b2d8      	uxtb	r0, r3
   1b4be:	4770      	bx	lr
{
   1b4c0:	b510      	push	{r4, lr}
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1b4c2:	4c0a      	ldr	r4, [pc, #40]	; (1b4ec <bt_conn_index+0x40>)
   1b4c4:	f240 43b3 	movw	r3, #1203	; 0x4b3
   1b4c8:	4622      	mov	r2, r4
   1b4ca:	4909      	ldr	r1, [pc, #36]	; (1b4f0 <bt_conn_index+0x44>)
   1b4cc:	4809      	ldr	r0, [pc, #36]	; (1b4f4 <bt_conn_index+0x48>)
   1b4ce:	f00e fb0c 	bl	29aea <assert_print>
   1b4d2:	4809      	ldr	r0, [pc, #36]	; (1b4f8 <bt_conn_index+0x4c>)
   1b4d4:	f00e fb09 	bl	29aea <assert_print>
   1b4d8:	f240 41b3 	movw	r1, #1203	; 0x4b3
   1b4dc:	4620      	mov	r0, r4
   1b4de:	f00e fafd 	bl	29adc <assert_post_action>
   1b4e2:	bf00      	nop
   1b4e4:	20009370 	.word	0x20009370
   1b4e8:	c28f5c29 	.word	0xc28f5c29
   1b4ec:	00031de4 	.word	0x00031de4
   1b4f0:	00032018 	.word	0x00032018
   1b4f4:	0002fdac 	.word	0x0002fdac
   1b4f8:	000320e4 	.word	0x000320e4

0001b4fc <bt_conn_create_pdu_timeout>:
{
   1b4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4fe:	b089      	sub	sp, #36	; 0x24
   1b500:	4604      	mov	r4, r0
   1b502:	460f      	mov	r7, r1
   1b504:	4616      	mov	r6, r2
   1b506:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1b508:	f013 fc67 	bl	2edda <k_is_in_isr>
   1b50c:	b970      	cbnz	r0, 1b52c <bt_conn_create_pdu_timeout+0x30>
	if (!pool) {
   1b50e:	b1d4      	cbz	r4, 1b546 <bt_conn_create_pdu_timeout+0x4a>
	return net_buf_alloc_fixed(pool, timeout);
   1b510:	4632      	mov	r2, r6
   1b512:	462b      	mov	r3, r5
   1b514:	4620      	mov	r0, r4
   1b516:	f011 fec4 	bl	2d2a2 <net_buf_alloc_fixed>
	if (!buf) {
   1b51a:	4604      	mov	r4, r0
   1b51c:	b1a8      	cbz	r0, 1b54a <bt_conn_create_pdu_timeout+0x4e>
	net_buf_simple_reserve(&buf->b, reserve);
   1b51e:	1d79      	adds	r1, r7, #5
   1b520:	3008      	adds	r0, #8
   1b522:	f003 fe69 	bl	1f1f8 <net_buf_simple_reserve>
}
   1b526:	4620      	mov	r0, r4
   1b528:	b009      	add	sp, #36	; 0x24
   1b52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(!k_is_in_isr());
   1b52c:	4c19      	ldr	r4, [pc, #100]	; (1b594 <bt_conn_create_pdu_timeout+0x98>)
   1b52e:	f240 43cf 	movw	r3, #1231	; 0x4cf
   1b532:	4622      	mov	r2, r4
   1b534:	4918      	ldr	r1, [pc, #96]	; (1b598 <bt_conn_create_pdu_timeout+0x9c>)
   1b536:	4819      	ldr	r0, [pc, #100]	; (1b59c <bt_conn_create_pdu_timeout+0xa0>)
   1b538:	f00e fad7 	bl	29aea <assert_print>
   1b53c:	f240 41cf 	movw	r1, #1231	; 0x4cf
   1b540:	4620      	mov	r0, r4
   1b542:	f00e facb 	bl	29adc <assert_post_action>
		pool = &acl_tx_pool;
   1b546:	4c16      	ldr	r4, [pc, #88]	; (1b5a0 <bt_conn_create_pdu_timeout+0xa4>)
   1b548:	e7e2      	b.n	1b510 <bt_conn_create_pdu_timeout+0x14>
		BT_WARN("Unable to allocate buffer within timeout");
   1b54a:	4b16      	ldr	r3, [pc, #88]	; (1b5a4 <bt_conn_create_pdu_timeout+0xa8>)
   1b54c:	9307      	str	r3, [sp, #28]
   1b54e:	2202      	movs	r2, #2
   1b550:	f88d 2004 	strb.w	r2, [sp, #4]
   1b554:	2300      	movs	r3, #0
   1b556:	f88d 3005 	strb.w	r3, [sp, #5]
   1b55a:	f88d 3006 	strb.w	r3, [sp, #6]
   1b55e:	f88d 3007 	strb.w	r3, [sp, #7]
   1b562:	9901      	ldr	r1, [sp, #4]
   1b564:	9106      	str	r1, [sp, #24]
   1b566:	4619      	mov	r1, r3
   1b568:	f363 0100 	bfi	r1, r3, #0, #1
   1b56c:	f363 0141 	bfi	r1, r3, #1, #1
   1b570:	f363 0182 	bfi	r1, r3, #2, #1
   1b574:	f363 01c5 	bfi	r1, r3, #3, #3
   1b578:	f362 1188 	bfi	r1, r2, #6, #3
   1b57c:	2208      	movs	r2, #8
   1b57e:	f362 2152 	bfi	r1, r2, #9, #10
   1b582:	f363 41de 	bfi	r1, r3, #19, #12
   1b586:	f363 71df 	bfi	r1, r3, #31, #1
   1b58a:	aa06      	add	r2, sp, #24
   1b58c:	4806      	ldr	r0, [pc, #24]	; (1b5a8 <bt_conn_create_pdu_timeout+0xac>)
   1b58e:	f7f8 fbb5 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   1b592:	e7c8      	b.n	1b526 <bt_conn_create_pdu_timeout+0x2a>
   1b594:	00031de4 	.word	0x00031de4
   1b598:	00032100 	.word	0x00032100
   1b59c:	0002fdac 	.word	0x0002fdac
   1b5a0:	20008610 	.word	0x20008610
   1b5a4:	00032110 	.word	0x00032110
   1b5a8:	0002f808 	.word	0x0002f808

0001b5ac <notify_le_param_updated>:
{
   1b5ac:	b570      	push	{r4, r5, r6, lr}
   1b5ae:	4605      	mov	r5, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1b5b0:	1d04      	adds	r4, r0, #4
   1b5b2:	2108      	movs	r1, #8
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f010 fa54 	bl	2ba62 <atomic_test_bit>
   1b5ba:	b178      	cbz	r0, 1b5dc <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   1b5bc:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   1b5c0:	f8b5 20a8 	ldrh.w	r2, [r5, #168]	; 0xa8
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1b5c4:	4293      	cmp	r3, r2
   1b5c6:	d309      	bcc.n	1b5dc <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   1b5c8:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
	    conn->le.interval >= conn->le.interval_min &&
   1b5cc:	4293      	cmp	r3, r2
   1b5ce:	d805      	bhi.n	1b5dc <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   1b5d0:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
   1b5d4:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   1b5d8:	429a      	cmp	r2, r3
   1b5da:	d002      	beq.n	1b5e2 <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b5dc:	4b1f      	ldr	r3, [pc, #124]	; (1b65c <notify_le_param_updated+0xb0>)
   1b5de:	681c      	ldr	r4, [r3, #0]
   1b5e0:	e009      	b.n	1b5f6 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b5e2:	e8d4 3fef 	ldaex	r3, [r4]
   1b5e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1b5ea:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1b5ee:	2a00      	cmp	r2, #0
   1b5f0:	d0f4      	beq.n	1b5dc <notify_le_param_updated+0x30>
   1b5f2:	e7f6      	b.n	1b5e2 <notify_le_param_updated+0x36>
   1b5f4:	6924      	ldr	r4, [r4, #16]
   1b5f6:	b15c      	cbz	r4, 1b610 <notify_le_param_updated+0x64>
		if (cb->le_param_updated) {
   1b5f8:	68e6      	ldr	r6, [r4, #12]
   1b5fa:	2e00      	cmp	r6, #0
   1b5fc:	d0fa      	beq.n	1b5f4 <notify_le_param_updated+0x48>
			cb->le_param_updated(conn, conn->le.interval,
   1b5fe:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   1b602:	f8b5 20ac 	ldrh.w	r2, [r5, #172]	; 0xac
   1b606:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
   1b60a:	4628      	mov	r0, r5
   1b60c:	47b0      	blx	r6
   1b60e:	e7f1      	b.n	1b5f4 <notify_le_param_updated+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b610:	4c13      	ldr	r4, [pc, #76]	; (1b660 <notify_le_param_updated+0xb4>)
   1b612:	e000      	b.n	1b616 <notify_le_param_updated+0x6a>
   1b614:	3414      	adds	r4, #20
   1b616:	4b13      	ldr	r3, [pc, #76]	; (1b664 <notify_le_param_updated+0xb8>)
   1b618:	429c      	cmp	r4, r3
   1b61a:	d80e      	bhi.n	1b63a <notify_le_param_updated+0x8e>
   1b61c:	4b11      	ldr	r3, [pc, #68]	; (1b664 <notify_le_param_updated+0xb8>)
   1b61e:	429c      	cmp	r4, r3
   1b620:	d21b      	bcs.n	1b65a <notify_le_param_updated+0xae>
		if (cb->le_param_updated) {
   1b622:	68e6      	ldr	r6, [r4, #12]
   1b624:	2e00      	cmp	r6, #0
   1b626:	d0f5      	beq.n	1b614 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
   1b628:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   1b62c:	f8b5 20ac 	ldrh.w	r2, [r5, #172]	; 0xac
   1b630:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
   1b634:	4628      	mov	r0, r5
   1b636:	47b0      	blx	r6
   1b638:	e7ec      	b.n	1b614 <notify_le_param_updated+0x68>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b63a:	4c0b      	ldr	r4, [pc, #44]	; (1b668 <notify_le_param_updated+0xbc>)
   1b63c:	f240 53a2 	movw	r3, #1442	; 0x5a2
   1b640:	4622      	mov	r2, r4
   1b642:	490a      	ldr	r1, [pc, #40]	; (1b66c <notify_le_param_updated+0xc0>)
   1b644:	480a      	ldr	r0, [pc, #40]	; (1b670 <notify_le_param_updated+0xc4>)
   1b646:	f00e fa50 	bl	29aea <assert_print>
   1b64a:	480a      	ldr	r0, [pc, #40]	; (1b674 <notify_le_param_updated+0xc8>)
   1b64c:	f00e fa4d 	bl	29aea <assert_print>
   1b650:	f240 51a2 	movw	r1, #1442	; 0x5a2
   1b654:	4620      	mov	r0, r4
   1b656:	f00e fa41 	bl	29adc <assert_post_action>
}
   1b65a:	bd70      	pop	{r4, r5, r6, pc}
   1b65c:	20009954 	.word	0x20009954
   1b660:	0002f7d0 	.word	0x0002f7d0
   1b664:	0002f7d0 	.word	0x0002f7d0
   1b668:	00031de4 	.word	0x00031de4
   1b66c:	00031e14 	.word	0x00031e14
   1b670:	0002fdac 	.word	0x0002fdac
   1b674:	00030500 	.word	0x00030500

0001b678 <le_param_req>:
{
   1b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b67a:	4606      	mov	r6, r0
   1b67c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b67e:	4608      	mov	r0, r1
   1b680:	f00f ff32 	bl	2b4e8 <bt_le_conn_params_valid>
   1b684:	4607      	mov	r7, r0
   1b686:	2800      	cmp	r0, #0
   1b688:	d03a      	beq.n	1b700 <le_param_req+0x88>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b68a:	4b1f      	ldr	r3, [pc, #124]	; (1b708 <le_param_req+0x90>)
   1b68c:	681c      	ldr	r4, [r3, #0]
   1b68e:	e000      	b.n	1b692 <le_param_req+0x1a>
   1b690:	6924      	ldr	r4, [r4, #16]
   1b692:	b16c      	cbz	r4, 1b6b0 <le_param_req+0x38>
		if (!cb->le_param_req) {
   1b694:	68a3      	ldr	r3, [r4, #8]
   1b696:	2b00      	cmp	r3, #0
   1b698:	d0fa      	beq.n	1b690 <le_param_req+0x18>
		if (!cb->le_param_req(conn, param)) {
   1b69a:	4629      	mov	r1, r5
   1b69c:	4630      	mov	r0, r6
   1b69e:	4798      	blx	r3
   1b6a0:	b368      	cbz	r0, 1b6fe <le_param_req+0x86>
		if (!bt_le_conn_params_valid(param)) {
   1b6a2:	4628      	mov	r0, r5
   1b6a4:	f00f ff20 	bl	2b4e8 <bt_le_conn_params_valid>
   1b6a8:	2800      	cmp	r0, #0
   1b6aa:	d1f1      	bne.n	1b690 <le_param_req+0x18>
			return false;
   1b6ac:	4607      	mov	r7, r0
   1b6ae:	e027      	b.n	1b700 <le_param_req+0x88>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b6b0:	4c16      	ldr	r4, [pc, #88]	; (1b70c <le_param_req+0x94>)
   1b6b2:	e000      	b.n	1b6b6 <le_param_req+0x3e>
   1b6b4:	3414      	adds	r4, #20
   1b6b6:	4b16      	ldr	r3, [pc, #88]	; (1b710 <le_param_req+0x98>)
   1b6b8:	429c      	cmp	r4, r3
   1b6ba:	d810      	bhi.n	1b6de <le_param_req+0x66>
   1b6bc:	4b14      	ldr	r3, [pc, #80]	; (1b710 <le_param_req+0x98>)
   1b6be:	429c      	cmp	r4, r3
   1b6c0:	d21e      	bcs.n	1b700 <le_param_req+0x88>
		if (!cb->le_param_req) {
   1b6c2:	68a3      	ldr	r3, [r4, #8]
   1b6c4:	2b00      	cmp	r3, #0
   1b6c6:	d0f5      	beq.n	1b6b4 <le_param_req+0x3c>
		if (!cb->le_param_req(conn, param)) {
   1b6c8:	4629      	mov	r1, r5
   1b6ca:	4630      	mov	r0, r6
   1b6cc:	4798      	blx	r3
   1b6ce:	b1c8      	cbz	r0, 1b704 <le_param_req+0x8c>
		if (!bt_le_conn_params_valid(param)) {
   1b6d0:	4628      	mov	r0, r5
   1b6d2:	f00f ff09 	bl	2b4e8 <bt_le_conn_params_valid>
   1b6d6:	2800      	cmp	r0, #0
   1b6d8:	d1ec      	bne.n	1b6b4 <le_param_req+0x3c>
			return false;
   1b6da:	4607      	mov	r7, r0
   1b6dc:	e010      	b.n	1b700 <le_param_req+0x88>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b6de:	4c0d      	ldr	r4, [pc, #52]	; (1b714 <le_param_req+0x9c>)
   1b6e0:	f240 53ea 	movw	r3, #1514	; 0x5ea
   1b6e4:	4622      	mov	r2, r4
   1b6e6:	490c      	ldr	r1, [pc, #48]	; (1b718 <le_param_req+0xa0>)
   1b6e8:	480c      	ldr	r0, [pc, #48]	; (1b71c <le_param_req+0xa4>)
   1b6ea:	f00e f9fe 	bl	29aea <assert_print>
   1b6ee:	480c      	ldr	r0, [pc, #48]	; (1b720 <le_param_req+0xa8>)
   1b6f0:	f00e f9fb 	bl	29aea <assert_print>
   1b6f4:	f240 51ea 	movw	r1, #1514	; 0x5ea
   1b6f8:	4620      	mov	r0, r4
   1b6fa:	f00e f9ef 	bl	29adc <assert_post_action>
			return false;
   1b6fe:	4607      	mov	r7, r0
}
   1b700:	4638      	mov	r0, r7
   1b702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1b704:	4607      	mov	r7, r0
   1b706:	e7fb      	b.n	1b700 <le_param_req+0x88>
   1b708:	20009954 	.word	0x20009954
   1b70c:	0002f7d0 	.word	0x0002f7d0
   1b710:	0002f7d0 	.word	0x0002f7d0
   1b714:	00031de4 	.word	0x00031de4
   1b718:	00031e14 	.word	0x00031e14
   1b71c:	0002fdac 	.word	0x0002fdac
   1b720:	00030500 	.word	0x00030500

0001b724 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1b724:	4b02      	ldr	r3, [pc, #8]	; (1b730 <bt_conn_cb_register+0xc>)
   1b726:	681a      	ldr	r2, [r3, #0]
   1b728:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1b72a:	6018      	str	r0, [r3, #0]
}
   1b72c:	4770      	bx	lr
   1b72e:	bf00      	nop
   1b730:	20009954 	.word	0x20009954

0001b734 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b736:	4607      	mov	r7, r0
   1b738:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b73a:	2400      	movs	r4, #0
   1b73c:	b114      	cbz	r4, 1b744 <bt_conn_lookup_addr_le+0x10>
		}

		return conn;
	}

	return NULL;
   1b73e:	2500      	movs	r5, #0
}
   1b740:	4628      	mov	r0, r5
   1b742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b744:	20c8      	movs	r0, #200	; 0xc8
   1b746:	4b0c      	ldr	r3, [pc, #48]	; (1b778 <bt_conn_lookup_addr_le+0x44>)
   1b748:	fb00 3004 	mla	r0, r0, r4, r3
   1b74c:	f7ff fcce 	bl	1b0ec <bt_conn_ref>
		if (!conn) {
   1b750:	4605      	mov	r5, r0
   1b752:	b170      	cbz	r0, 1b772 <bt_conn_lookup_addr_le+0x3e>
		if (conn->type != BT_CONN_TYPE_LE) {
   1b754:	7883      	ldrb	r3, [r0, #2]
   1b756:	2b01      	cmp	r3, #1
   1b758:	d109      	bne.n	1b76e <bt_conn_lookup_addr_le+0x3a>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b75a:	4632      	mov	r2, r6
   1b75c:	4639      	mov	r1, r7
   1b75e:	f010 fa79 	bl	2bc54 <bt_conn_is_peer_addr_le>
   1b762:	2800      	cmp	r0, #0
   1b764:	d1ec      	bne.n	1b740 <bt_conn_lookup_addr_le+0xc>
			bt_conn_unref(conn);
   1b766:	4628      	mov	r0, r5
   1b768:	f7ff fcea 	bl	1b140 <bt_conn_unref>
			continue;
   1b76c:	e001      	b.n	1b772 <bt_conn_lookup_addr_le+0x3e>
			bt_conn_unref(conn);
   1b76e:	f7ff fce7 	bl	1b140 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b772:	3401      	adds	r4, #1
   1b774:	e7e2      	b.n	1b73c <bt_conn_lookup_addr_le+0x8>
   1b776:	bf00      	nop
   1b778:	20009370 	.word	0x20009370

0001b77c <bt_conn_exists_le>:
{
   1b77c:	b5b0      	push	{r4, r5, r7, lr}
   1b77e:	b082      	sub	sp, #8
   1b780:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1b782:	f7ff ffd7 	bl	1b734 <bt_conn_lookup_addr_le>
	if (conn) {
   1b786:	2800      	cmp	r0, #0
   1b788:	d063      	beq.n	1b852 <bt_conn_exists_le+0xd6>
   1b78a:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
   1b78c:	7a80      	ldrb	r0, [r0, #10]
   1b78e:	f7ff f839 	bl	1a804 <state2str>
   1b792:	466d      	mov	r5, sp
   1b794:	2300      	movs	r3, #0
   1b796:	713b      	strb	r3, [r7, #4]
   1b798:	2302      	movs	r3, #2
   1b79a:	717b      	strb	r3, [r7, #5]
   1b79c:	b088      	sub	sp, #32
   1b79e:	46ec      	mov	ip, sp
   1b7a0:	f11c 0210 	adds.w	r2, ip, #16
   1b7a4:	d016      	beq.n	1b7d4 <bt_conn_exists_le+0x58>
   1b7a6:	f04f 0e0e 	mov.w	lr, #14
   1b7aa:	b12a      	cbz	r2, 1b7b8 <bt_conn_exists_le+0x3c>
   1b7ac:	f1be 0f04 	cmp.w	lr, #4
   1b7b0:	dd02      	ble.n	1b7b8 <bt_conn_exists_le+0x3c>
   1b7b2:	4b29      	ldr	r3, [pc, #164]	; (1b858 <bt_conn_exists_le+0xdc>)
   1b7b4:	f8cc 3014 	str.w	r3, [ip, #20]
   1b7b8:	2300      	movs	r3, #0
   1b7ba:	703b      	strb	r3, [r7, #0]
   1b7bc:	2302      	movs	r3, #2
   1b7be:	707b      	strb	r3, [r7, #1]
   1b7c0:	b1aa      	cbz	r2, 1b7ee <bt_conn_exists_le+0x72>
   1b7c2:	f1be 0f08 	cmp.w	lr, #8
   1b7c6:	dd01      	ble.n	1b7cc <bt_conn_exists_le+0x50>
   1b7c8:	f8cc 0018 	str.w	r0, [ip, #24]
   1b7cc:	f10c 031c 	add.w	r3, ip, #28
   1b7d0:	2100      	movs	r1, #0
   1b7d2:	e00a      	b.n	1b7ea <bt_conn_exists_le+0x6e>
   1b7d4:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1b7d8:	e7e7      	b.n	1b7aa <bt_conn_exists_le+0x2e>
   1b7da:	f101 0008 	add.w	r0, r1, #8
   1b7de:	4438      	add	r0, r7
   1b7e0:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1b7e4:	f803 0b01 	strb.w	r0, [r3], #1
   1b7e8:	3101      	adds	r1, #1
   1b7ea:	2901      	cmp	r1, #1
   1b7ec:	d9f5      	bls.n	1b7da <bt_conn_exists_le+0x5e>
   1b7ee:	f1be 0f0d 	cmp.w	lr, #13
   1b7f2:	dd2b      	ble.n	1b84c <bt_conn_exists_le+0xd0>
   1b7f4:	230e      	movs	r3, #14
   1b7f6:	b14a      	cbz	r2, 1b80c <bt_conn_exists_le+0x90>
   1b7f8:	2103      	movs	r1, #3
   1b7fa:	7139      	strb	r1, [r7, #4]
   1b7fc:	2100      	movs	r1, #0
   1b7fe:	7179      	strb	r1, [r7, #5]
   1b800:	71b9      	strb	r1, [r7, #6]
   1b802:	2101      	movs	r1, #1
   1b804:	71f9      	strb	r1, [r7, #7]
   1b806:	6878      	ldr	r0, [r7, #4]
   1b808:	f8cc 0010 	str.w	r0, [ip, #16]
   1b80c:	2100      	movs	r1, #0
   1b80e:	f36f 0100 	bfc	r1, #0, #1
   1b812:	f36f 0141 	bfc	r1, #1, #1
   1b816:	f36f 0182 	bfc	r1, #2, #1
   1b81a:	f36f 01c5 	bfc	r1, #3, #3
   1b81e:	2002      	movs	r0, #2
   1b820:	f360 1188 	bfi	r1, r0, #6, #3
   1b824:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b828:	f363 2152 	bfi	r1, r3, #9, #10
   1b82c:	f36f 41de 	bfc	r1, #19, #12
   1b830:	f36f 71df 	bfc	r1, #31, #1
   1b834:	2300      	movs	r3, #0
   1b836:	4809      	ldr	r0, [pc, #36]	; (1b85c <bt_conn_exists_le+0xe0>)
   1b838:	f7f8 fa60 	bl	13cfc <z_impl_z_log_msg_static_create>
   1b83c:	46ad      	mov	sp, r5
		bt_conn_unref(conn);
   1b83e:	4620      	mov	r0, r4
   1b840:	f7ff fc7e 	bl	1b140 <bt_conn_unref>
		return true;
   1b844:	2001      	movs	r0, #1
}
   1b846:	3708      	adds	r7, #8
   1b848:	46bd      	mov	sp, r7
   1b84a:	bdb0      	pop	{r4, r5, r7, pc}
		BT_WARN("Found valid connection in %s state",
   1b84c:	f06f 031b 	mvn.w	r3, #27
   1b850:	e7d1      	b.n	1b7f6 <bt_conn_exists_le+0x7a>
	return false;
   1b852:	2000      	movs	r0, #0
   1b854:	e7f7      	b.n	1b846 <bt_conn_exists_le+0xca>
   1b856:	bf00      	nop
   1b858:	0003213c 	.word	0x0003213c
   1b85c:	0002f808 	.word	0x0002f808

0001b860 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1b860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b864:	4680      	mov	r8, r0
   1b866:	460f      	mov	r7, r1
   1b868:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b86a:	2400      	movs	r4, #0
   1b86c:	b11c      	cbz	r4, 1b876 <bt_conn_lookup_state_le+0x16>
		}

		return conn;
	}

	return NULL;
   1b86e:	2500      	movs	r5, #0
}
   1b870:	4628      	mov	r0, r5
   1b872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b876:	20c8      	movs	r0, #200	; 0xc8
   1b878:	4b10      	ldr	r3, [pc, #64]	; (1b8bc <bt_conn_lookup_state_le+0x5c>)
   1b87a:	fb00 3004 	mla	r0, r0, r4, r3
   1b87e:	f7ff fc35 	bl	1b0ec <bt_conn_ref>
		if (!conn) {
   1b882:	4605      	mov	r5, r0
   1b884:	b188      	cbz	r0, 1b8aa <bt_conn_lookup_state_le+0x4a>
		if (conn->type != BT_CONN_TYPE_LE) {
   1b886:	7883      	ldrb	r3, [r0, #2]
   1b888:	2b01      	cmp	r3, #1
   1b88a:	d110      	bne.n	1b8ae <bt_conn_lookup_state_le+0x4e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b88c:	b127      	cbz	r7, 1b898 <bt_conn_lookup_state_le+0x38>
   1b88e:	463a      	mov	r2, r7
   1b890:	4641      	mov	r1, r8
   1b892:	f010 f9df 	bl	2bc54 <bt_conn_is_peer_addr_le>
   1b896:	b168      	cbz	r0, 1b8b4 <bt_conn_lookup_state_le+0x54>
		if (!(conn->state == state && conn->id == id)) {
   1b898:	7aab      	ldrb	r3, [r5, #10]
   1b89a:	42b3      	cmp	r3, r6
   1b89c:	d102      	bne.n	1b8a4 <bt_conn_lookup_state_le+0x44>
   1b89e:	7a2b      	ldrb	r3, [r5, #8]
   1b8a0:	4543      	cmp	r3, r8
   1b8a2:	d0e5      	beq.n	1b870 <bt_conn_lookup_state_le+0x10>
			bt_conn_unref(conn);
   1b8a4:	4628      	mov	r0, r5
   1b8a6:	f7ff fc4b 	bl	1b140 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b8aa:	3401      	adds	r4, #1
   1b8ac:	e7de      	b.n	1b86c <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   1b8ae:	f7ff fc47 	bl	1b140 <bt_conn_unref>
			continue;
   1b8b2:	e7fa      	b.n	1b8aa <bt_conn_lookup_state_le+0x4a>
			bt_conn_unref(conn);
   1b8b4:	4628      	mov	r0, r5
   1b8b6:	f7ff fc43 	bl	1b140 <bt_conn_unref>
			continue;
   1b8ba:	e7f6      	b.n	1b8aa <bt_conn_lookup_state_le+0x4a>
   1b8bc:	20009370 	.word	0x20009370

0001b8c0 <send_conn_le_param_update>:
{
   1b8c0:	b538      	push	{r3, r4, r5, lr}
   1b8c2:	4604      	mov	r4, r0
   1b8c4:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b8c6:	4608      	mov	r0, r1
   1b8c8:	f00f fe0e 	bl	2b4e8 <bt_le_conn_params_valid>
   1b8cc:	b350      	cbz	r0, 1b924 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b8ce:	4b17      	ldr	r3, [pc, #92]	; (1b92c <send_conn_le_param_update+0x6c>)
   1b8d0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1b8d4:	f013 0f02 	tst.w	r3, #2
   1b8d8:	d004      	beq.n	1b8e4 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b8da:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b8de:	f013 0f02 	tst.w	r3, #2
   1b8e2:	d113      	bne.n	1b90c <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1b8e4:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b8e6:	b9c3      	cbnz	r3, 1b91a <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   1b8e8:	4629      	mov	r1, r5
   1b8ea:	4620      	mov	r0, r4
   1b8ec:	f010 f9d9 	bl	2bca2 <bt_conn_le_conn_update>
		if (rc == 0) {
   1b8f0:	b9b8      	cbnz	r0, 1b922 <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   1b8f2:	882b      	ldrh	r3, [r5, #0]
   1b8f4:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1b8f8:	886b      	ldrh	r3, [r5, #2]
   1b8fa:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1b8fe:	88ab      	ldrh	r3, [r5, #4]
   1b900:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1b904:	88eb      	ldrh	r3, [r5, #6]
   1b906:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
		return rc;
   1b90a:	e00a      	b.n	1b922 <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b90c:	2109      	movs	r1, #9
   1b90e:	1d20      	adds	r0, r4, #4
   1b910:	f010 f8a7 	bl	2ba62 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b914:	2800      	cmp	r0, #0
   1b916:	d1e5      	bne.n	1b8e4 <send_conn_le_param_update+0x24>
   1b918:	e7e6      	b.n	1b8e8 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1b91a:	4629      	mov	r1, r5
   1b91c:	4620      	mov	r0, r4
   1b91e:	f010 fa8e 	bl	2be3e <bt_l2cap_update_conn_param>
}
   1b922:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b924:	f06f 0015 	mvn.w	r0, #21
   1b928:	e7fb      	b.n	1b922 <send_conn_le_param_update+0x62>
   1b92a:	bf00      	nop
   1b92c:	20008000 	.word	0x20008000

0001b930 <deferred_work>:
{
   1b930:	b570      	push	{r4, r5, r6, lr}
   1b932:	b084      	sub	sp, #16
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1b934:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b938:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1b93c:	b34b      	cbz	r3, 1b992 <deferred_work+0x62>
   1b93e:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1b940:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1b944:	2b01      	cmp	r3, #1
   1b946:	d122      	bne.n	1b98e <deferred_work+0x5e>
	if (atomic_test_and_clear_bit(conn->flags,
   1b948:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   1b94c:	2108      	movs	r1, #8
   1b94e:	4630      	mov	r0, r6
   1b950:	f010 f86f 	bl	2ba32 <atomic_test_and_clear_bit>
   1b954:	b338      	cbz	r0, 1b9a6 <deferred_work+0x76>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b956:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1b95a:	f8ad 3000 	strh.w	r3, [sp]
   1b95e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1b962:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b966:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1b96a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1b96e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1b972:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1b976:	4669      	mov	r1, sp
   1b978:	4628      	mov	r0, r5
   1b97a:	f7ff ffa1 	bl	1b8c0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b97e:	e8d6 3fef 	ldaex	r3, [r6]
   1b982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b986:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1b98a:	2a00      	cmp	r2, #0
   1b98c:	d1f7      	bne.n	1b97e <deferred_work+0x4e>
}
   1b98e:	b004      	add	sp, #16
   1b990:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_disconnected(conn);
   1b992:	4628      	mov	r0, r5
   1b994:	f010 f9da 	bl	2bd4c <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1b998:	4628      	mov	r0, r5
   1b99a:	f7fe ff71 	bl	1a880 <notify_disconnected>
		bt_conn_unref(conn);
   1b99e:	4628      	mov	r0, r5
   1b9a0:	f7ff fbce 	bl	1b140 <bt_conn_unref>
		return;
   1b9a4:	e7f3      	b.n	1b98e <deferred_work+0x5e>
		param = BT_LE_CONN_PARAM(
   1b9a6:	4a05      	ldr	r2, [pc, #20]	; (1b9bc <deferred_work+0x8c>)
   1b9a8:	ab02      	add	r3, sp, #8
   1b9aa:	e892 0003 	ldmia.w	r2, {r0, r1}
   1b9ae:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   1b9b2:	4619      	mov	r1, r3
   1b9b4:	4628      	mov	r0, r5
   1b9b6:	f7ff ff83 	bl	1b8c0 <send_conn_le_param_update>
   1b9ba:	e7e0      	b.n	1b97e <deferred_work+0x4e>
   1b9bc:	0002f9a4 	.word	0x0002f9a4

0001b9c0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1b9c0:	b508      	push	{r3, lr}
   1b9c2:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1b9c4:	4801      	ldr	r0, [pc, #4]	; (1b9cc <bt_conn_create_frag_timeout+0xc>)
   1b9c6:	f7ff fd99 	bl	1b4fc <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1b9ca:	bd08      	pop	{r3, pc}
   1b9cc:	200086ac 	.word	0x200086ac

0001b9d0 <create_frag>:
{
   1b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b9d2:	4606      	mov	r6, r0
   1b9d4:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   1b9d6:	f04f 32ff 	mov.w	r2, #4294967295
   1b9da:	f04f 33ff 	mov.w	r3, #4294967295
   1b9de:	2000      	movs	r0, #0
   1b9e0:	f7ff ffee 	bl	1b9c0 <bt_conn_create_frag_timeout>
   1b9e4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1b9e6:	7ab3      	ldrb	r3, [r6, #10]
   1b9e8:	2b07      	cmp	r3, #7
   1b9ea:	d11a      	bne.n	1ba22 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1b9ec:	2300      	movs	r3, #0
   1b9ee:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   1b9f0:	4b10      	ldr	r3, [pc, #64]	; (1ba34 <create_frag+0x64>)
   1b9f2:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1b9f6:	f100 0708 	add.w	r7, r0, #8
   1b9fa:	4638      	mov	r0, r7
   1b9fc:	f011 fc6b 	bl	2d2d6 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1ba00:	4286      	cmp	r6, r0
   1ba02:	d212      	bcs.n	1ba2a <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1ba04:	4b0b      	ldr	r3, [pc, #44]	; (1ba34 <create_frag+0x64>)
   1ba06:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ba0a:	4632      	mov	r2, r6
   1ba0c:	f855 1f08 	ldr.w	r1, [r5, #8]!
   1ba10:	4638      	mov	r0, r7
   1ba12:	f011 fc69 	bl	2d2e8 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1ba16:	4631      	mov	r1, r6
   1ba18:	4628      	mov	r0, r5
   1ba1a:	f003 fe13 	bl	1f644 <net_buf_simple_pull>
}
   1ba1e:	4620      	mov	r0, r4
   1ba20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1ba22:	f003 fd4f 	bl	1f4c4 <net_buf_unref>
		return NULL;
   1ba26:	2400      	movs	r4, #0
   1ba28:	e7f9      	b.n	1ba1e <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1ba2a:	4638      	mov	r0, r7
   1ba2c:	f011 fc53 	bl	2d2d6 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1ba30:	b286      	uxth	r6, r0
   1ba32:	e7ea      	b.n	1ba0a <create_frag+0x3a>
   1ba34:	20008000 	.word	0x20008000

0001ba38 <send_buf>:
{
   1ba38:	b538      	push	{r3, r4, r5, lr}
   1ba3a:	4605      	mov	r5, r0
   1ba3c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1ba3e:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   1ba40:	4a1b      	ldr	r2, [pc, #108]	; (1bab0 <send_buf+0x78>)
   1ba42:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1ba46:	429a      	cmp	r2, r3
   1ba48:	d21f      	bcs.n	1ba8a <send_buf+0x52>
	frag = create_frag(conn, buf);
   1ba4a:	f7ff ffc1 	bl	1b9d0 <create_frag>
	if (!frag) {
   1ba4e:	4601      	mov	r1, r0
   1ba50:	b350      	cbz	r0, 1baa8 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1ba52:	2301      	movs	r3, #1
   1ba54:	2200      	movs	r2, #0
   1ba56:	4628      	mov	r0, r5
   1ba58:	f7fe ffca 	bl	1a9f0 <send_frag>
   1ba5c:	4603      	mov	r3, r0
   1ba5e:	b1c8      	cbz	r0, 1ba94 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1ba60:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   1ba62:	4a13      	ldr	r2, [pc, #76]	; (1bab0 <send_buf+0x78>)
   1ba64:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1ba68:	429a      	cmp	r2, r3
   1ba6a:	d215      	bcs.n	1ba98 <send_buf+0x60>
		frag = create_frag(conn, buf);
   1ba6c:	4621      	mov	r1, r4
   1ba6e:	4628      	mov	r0, r5
   1ba70:	f7ff ffae 	bl	1b9d0 <create_frag>
		if (!frag) {
   1ba74:	4601      	mov	r1, r0
   1ba76:	b1c8      	cbz	r0, 1baac <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1ba78:	2301      	movs	r3, #1
   1ba7a:	461a      	mov	r2, r3
   1ba7c:	4628      	mov	r0, r5
   1ba7e:	f7fe ffb7 	bl	1a9f0 <send_frag>
   1ba82:	4603      	mov	r3, r0
   1ba84:	2800      	cmp	r0, #0
   1ba86:	d1eb      	bne.n	1ba60 <send_buf+0x28>
   1ba88:	e004      	b.n	1ba94 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1ba8a:	2300      	movs	r3, #0
   1ba8c:	2202      	movs	r2, #2
   1ba8e:	f7fe ffaf 	bl	1a9f0 <send_frag>
   1ba92:	4603      	mov	r3, r0
}
   1ba94:	4618      	mov	r0, r3
   1ba96:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   1ba98:	2300      	movs	r3, #0
   1ba9a:	2203      	movs	r2, #3
   1ba9c:	4621      	mov	r1, r4
   1ba9e:	4628      	mov	r0, r5
   1baa0:	f7fe ffa6 	bl	1a9f0 <send_frag>
   1baa4:	4603      	mov	r3, r0
   1baa6:	e7f5      	b.n	1ba94 <send_buf+0x5c>
		return false;
   1baa8:	2300      	movs	r3, #0
   1baaa:	e7f3      	b.n	1ba94 <send_buf+0x5c>
			return false;
   1baac:	2300      	movs	r3, #0
   1baae:	e7f1      	b.n	1ba94 <send_buf+0x5c>
   1bab0:	20008000 	.word	0x20008000

0001bab4 <bt_conn_process_tx>:
{
   1bab4:	b570      	push	{r4, r5, r6, lr}
   1bab6:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1bab8:	7a83      	ldrb	r3, [r0, #10]
   1baba:	b923      	cbnz	r3, 1bac6 <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1babc:	2106      	movs	r1, #6
   1babe:	3004      	adds	r0, #4
   1bac0:	f00f ffb7 	bl	2ba32 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1bac4:	b968      	cbnz	r0, 1bae2 <bt_conn_process_tx+0x2e>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1bac6:	2200      	movs	r2, #0
   1bac8:	2300      	movs	r3, #0
   1baca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1bace:	f003 fb63 	bl	1f198 <net_buf_get>
	BT_ASSERT(buf);
   1bad2:	4605      	mov	r5, r0
   1bad4:	b148      	cbz	r0, 1baea <bt_conn_process_tx+0x36>
	if (!send_buf(conn, buf)) {
   1bad6:	4629      	mov	r1, r5
   1bad8:	4620      	mov	r0, r4
   1bada:	f7ff ffad 	bl	1ba38 <send_buf>
   1bade:	b190      	cbz	r0, 1bb06 <bt_conn_process_tx+0x52>
}
   1bae0:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   1bae2:	4620      	mov	r0, r4
   1bae4:	f7ff f9ea 	bl	1aebc <conn_cleanup>
		return;
   1bae8:	e7fa      	b.n	1bae0 <bt_conn_process_tx+0x2c>
	BT_ASSERT(buf);
   1baea:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1baee:	4a0c      	ldr	r2, [pc, #48]	; (1bb20 <bt_conn_process_tx+0x6c>)
   1baf0:	490c      	ldr	r1, [pc, #48]	; (1bb24 <bt_conn_process_tx+0x70>)
   1baf2:	480d      	ldr	r0, [pc, #52]	; (1bb28 <bt_conn_process_tx+0x74>)
   1baf4:	f00d fff9 	bl	29aea <assert_print>
   1baf8:	4040      	eors	r0, r0
   1bafa:	f380 8811 	msr	BASEPRI, r0
   1bafe:	f04f 0003 	mov.w	r0, #3
   1bb02:	df02      	svc	2
   1bb04:	e7e7      	b.n	1bad6 <bt_conn_process_tx+0x22>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1bb06:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   1bb08:	2300      	movs	r3, #0
   1bb0a:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   1bb0c:	4628      	mov	r0, r5
   1bb0e:	f003 fcd9 	bl	1f4c4 <net_buf_unref>
		if (tx) {
   1bb12:	2e00      	cmp	r6, #0
   1bb14:	d0e4      	beq.n	1bae0 <bt_conn_process_tx+0x2c>
			conn_tx_destroy(conn, tx);
   1bb16:	4631      	mov	r1, r6
   1bb18:	4620      	mov	r0, r4
   1bb1a:	f7fe feef 	bl	1a8fc <conn_tx_destroy>
   1bb1e:	e7df      	b.n	1bae0 <bt_conn_process_tx+0x2c>
   1bb20:	00031de4 	.word	0x00031de4
   1bb24:	00032c24 	.word	0x00032c24
   1bb28:	0002fdac 	.word	0x0002fdac

0001bb2c <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1bb2c:	b940      	cbnz	r0, 1bb40 <bt_conn_lookup_index+0x14>
{
   1bb2e:	b508      	push	{r3, lr}
   1bb30:	4603      	mov	r3, r0
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1bb32:	20c8      	movs	r0, #200	; 0xc8
   1bb34:	4a03      	ldr	r2, [pc, #12]	; (1bb44 <bt_conn_lookup_index+0x18>)
   1bb36:	fb00 2003 	mla	r0, r0, r3, r2
   1bb3a:	f7ff fad7 	bl	1b0ec <bt_conn_ref>
}
   1bb3e:	bd08      	pop	{r3, pc}
		return NULL;
   1bb40:	2000      	movs	r0, #0
}
   1bb42:	4770      	bx	lr
   1bb44:	20009370 	.word	0x20009370

0001bb48 <bt_conn_init>:

int bt_conn_init(void)
{
   1bb48:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1bb4a:	480c      	ldr	r0, [pc, #48]	; (1bb7c <bt_conn_init+0x34>)
   1bb4c:	f013 f9dc 	bl	2ef08 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1bb50:	2400      	movs	r4, #0
   1bb52:	e006      	b.n	1bb62 <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1bb54:	490a      	ldr	r1, [pc, #40]	; (1bb80 <bt_conn_init+0x38>)
   1bb56:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1bb5a:	4808      	ldr	r0, [pc, #32]	; (1bb7c <bt_conn_init+0x34>)
   1bb5c:	f013 f9e1 	bl	2ef22 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1bb60:	3401      	adds	r4, #1
   1bb62:	2c02      	cmp	r4, #2
   1bb64:	d9f6      	bls.n	1bb54 <bt_conn_init+0xc>
	}

	bt_att_init();
   1bb66:	f001 fd81 	bl	1d66c <bt_att_init>

	err = bt_smp_init();
   1bb6a:	f011 fb30 	bl	2d1ce <bt_smp_init>
	if (err) {
   1bb6e:	4604      	mov	r4, r0
   1bb70:	b108      	cbz	r0, 1bb76 <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1bb72:	4620      	mov	r0, r4
   1bb74:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   1bb76:	f010 f98f 	bl	2be98 <bt_l2cap_init>
	return 0;
   1bb7a:	e7fa      	b.n	1bb72 <bt_conn_init+0x2a>
   1bb7c:	200085c0 	.word	0x200085c0
   1bb80:	20009924 	.word	0x20009924

0001bb84 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1bb84:	4905      	ldr	r1, [pc, #20]	; (1bb9c <get_ident+0x18>)
   1bb86:	780a      	ldrb	r2, [r1, #0]
   1bb88:	1c53      	adds	r3, r2, #1
   1bb8a:	b2db      	uxtb	r3, r3
   1bb8c:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1bb8e:	b90b      	cbnz	r3, 1bb94 <get_ident+0x10>
		ident++;
   1bb90:	3202      	adds	r2, #2
   1bb92:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   1bb94:	4b01      	ldr	r3, [pc, #4]	; (1bb9c <get_ident+0x18>)
   1bb96:	7818      	ldrb	r0, [r3, #0]
   1bb98:	4770      	bx	lr
   1bb9a:	bf00      	nop
   1bb9c:	20009d52 	.word	0x20009d52

0001bba0 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1bba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bba2:	b083      	sub	sp, #12
   1bba4:	af00      	add	r7, sp, #0
   1bba6:	4605      	mov	r5, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1bba8:	2000      	movs	r0, #0
   1bbaa:	2800      	cmp	r0, #0
   1bbac:	d03a      	beq.n	1bc24 <l2cap_accept+0x84>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1bbae:	466c      	mov	r4, sp
   1bbb0:	b088      	sub	sp, #32
   1bbb2:	466b      	mov	r3, sp
   1bbb4:	f113 0210 	adds.w	r2, r3, #16
   1bbb8:	d044      	beq.n	1bc44 <l2cap_accept+0xa4>
   1bbba:	210c      	movs	r1, #12
   1bbbc:	b13a      	cbz	r2, 1bbce <l2cap_accept+0x2e>
   1bbbe:	4608      	mov	r0, r1
   1bbc0:	2904      	cmp	r1, #4
   1bbc2:	dd01      	ble.n	1bbc8 <l2cap_accept+0x28>
   1bbc4:	4e22      	ldr	r6, [pc, #136]	; (1bc50 <l2cap_accept+0xb0>)
   1bbc6:	615e      	str	r6, [r3, #20]
   1bbc8:	2808      	cmp	r0, #8
   1bbca:	dd00      	ble.n	1bbce <l2cap_accept+0x2e>
   1bbcc:	619d      	str	r5, [r3, #24]
   1bbce:	290b      	cmp	r1, #11
   1bbd0:	dd3b      	ble.n	1bc4a <l2cap_accept+0xaa>
   1bbd2:	f04f 0c0c 	mov.w	ip, #12
   1bbd6:	b13a      	cbz	r2, 1bbe8 <l2cap_accept+0x48>
   1bbd8:	2103      	movs	r1, #3
   1bbda:	7139      	strb	r1, [r7, #4]
   1bbdc:	2100      	movs	r1, #0
   1bbde:	7179      	strb	r1, [r7, #5]
   1bbe0:	71b9      	strb	r1, [r7, #6]
   1bbe2:	71f9      	strb	r1, [r7, #7]
   1bbe4:	6878      	ldr	r0, [r7, #4]
   1bbe6:	6118      	str	r0, [r3, #16]
   1bbe8:	2100      	movs	r1, #0
   1bbea:	f36f 0100 	bfc	r1, #0, #1
   1bbee:	f36f 0141 	bfc	r1, #1, #1
   1bbf2:	f36f 0182 	bfc	r1, #2, #1
   1bbf6:	f36f 01c5 	bfc	r1, #3, #3
   1bbfa:	2301      	movs	r3, #1
   1bbfc:	f363 1188 	bfi	r1, r3, #6, #3
   1bc00:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1bc04:	f36c 2152 	bfi	r1, ip, #9, #10
   1bc08:	f36f 41de 	bfc	r1, #19, #12
   1bc0c:	f36f 71df 	bfc	r1, #31, #1
   1bc10:	2300      	movs	r3, #0
   1bc12:	4810      	ldr	r0, [pc, #64]	; (1bc54 <l2cap_accept+0xb4>)
   1bc14:	f7f8 f872 	bl	13cfc <z_impl_z_log_msg_static_create>
   1bc18:	46a5      	mov	sp, r4

	return -ENOMEM;
   1bc1a:	f06f 000b 	mvn.w	r0, #11
}
   1bc1e:	370c      	adds	r7, #12
   1bc20:	46bd      	mov	sp, r7
   1bc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (l2cap->chan.chan.conn) {
   1bc24:	2394      	movs	r3, #148	; 0x94
   1bc26:	fb00 f303 	mul.w	r3, r0, r3
   1bc2a:	4a0b      	ldr	r2, [pc, #44]	; (1bc58 <l2cap_accept+0xb8>)
   1bc2c:	58d3      	ldr	r3, [r2, r3]
   1bc2e:	b10b      	cbz	r3, 1bc34 <l2cap_accept+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1bc30:	3001      	adds	r0, #1
   1bc32:	e7ba      	b.n	1bbaa <l2cap_accept+0xa>
		l2cap->chan.chan.ops = &ops;
   1bc34:	4b08      	ldr	r3, [pc, #32]	; (1bc58 <l2cap_accept+0xb8>)
   1bc36:	2294      	movs	r2, #148	; 0x94
   1bc38:	fb02 3300 	mla	r3, r2, r0, r3
   1bc3c:	4a07      	ldr	r2, [pc, #28]	; (1bc5c <l2cap_accept+0xbc>)
   1bc3e:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1bc40:	600b      	str	r3, [r1, #0]
		return 0;
   1bc42:	e7ec      	b.n	1bc1e <l2cap_accept+0x7e>
	BT_ERR("No available L2CAP context for conn %p", conn);
   1bc44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bc48:	e7b8      	b.n	1bbbc <l2cap_accept+0x1c>
   1bc4a:	f06f 0c1b 	mvn.w	ip, #27
   1bc4e:	e7c2      	b.n	1bbd6 <l2cap_accept+0x36>
   1bc50:	00032188 	.word	0x00032188
   1bc54:	0002f838 	.word	0x0002f838
   1bc58:	20009958 	.word	0x20009958
   1bc5c:	00032350 	.word	0x00032350

0001bc60 <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1bc60:	898b      	ldrh	r3, [r1, #12]
   1bc62:	2b01      	cmp	r3, #1
   1bc64:	d900      	bls.n	1bc68 <le_conn_param_rsp+0x8>
   1bc66:	4770      	bx	lr
{
   1bc68:	b500      	push	{lr}
   1bc6a:	b089      	sub	sp, #36	; 0x24
		BT_ERR("Too small LE conn param rsp");
   1bc6c:	4b13      	ldr	r3, [pc, #76]	; (1bcbc <le_conn_param_rsp+0x5c>)
   1bc6e:	9307      	str	r3, [sp, #28]
   1bc70:	2302      	movs	r3, #2
   1bc72:	f88d 3004 	strb.w	r3, [sp, #4]
   1bc76:	2300      	movs	r3, #0
   1bc78:	f88d 3005 	strb.w	r3, [sp, #5]
   1bc7c:	f88d 3006 	strb.w	r3, [sp, #6]
   1bc80:	f88d 3007 	strb.w	r3, [sp, #7]
   1bc84:	9a01      	ldr	r2, [sp, #4]
   1bc86:	9206      	str	r2, [sp, #24]
   1bc88:	4619      	mov	r1, r3
   1bc8a:	f363 0100 	bfi	r1, r3, #0, #1
   1bc8e:	f363 0141 	bfi	r1, r3, #1, #1
   1bc92:	f363 0182 	bfi	r1, r3, #2, #1
   1bc96:	f363 01c5 	bfi	r1, r3, #3, #3
   1bc9a:	2201      	movs	r2, #1
   1bc9c:	f362 1188 	bfi	r1, r2, #6, #3
   1bca0:	2208      	movs	r2, #8
   1bca2:	f362 2152 	bfi	r1, r2, #9, #10
   1bca6:	f363 41de 	bfi	r1, r3, #19, #12
   1bcaa:	f363 71df 	bfi	r1, r3, #31, #1
   1bcae:	aa06      	add	r2, sp, #24
   1bcb0:	4803      	ldr	r0, [pc, #12]	; (1bcc0 <le_conn_param_rsp+0x60>)
   1bcb2:	f7f8 f823 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   1bcb6:	b009      	add	sp, #36	; 0x24
   1bcb8:	f85d fb04 	ldr.w	pc, [sp], #4
   1bcbc:	000321b0 	.word	0x000321b0
   1bcc0:	0002f838 	.word	0x0002f838

0001bcc4 <l2cap_chan_add>:
{
   1bcc4:	b510      	push	{r4, lr}
   1bcc6:	b088      	sub	sp, #32
	if (!le_chan) {
   1bcc8:	b179      	cbz	r1, 1bcea <l2cap_chan_add+0x26>
   1bcca:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1bccc:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bcce:	2400      	movs	r4, #0
   1bcd0:	e8d1 cfef 	ldaex	ip, [r1]
   1bcd4:	e8c1 4fee 	stlex	lr, r4, [r1]
   1bcd8:	f1be 0f00 	cmp.w	lr, #0
   1bcdc:	d1f8      	bne.n	1bcd0 <l2cap_chan_add+0xc>
	bt_l2cap_chan_add(conn, chan, destroy);
   1bcde:	4619      	mov	r1, r3
   1bce0:	f010 f824 	bl	2bd2c <bt_l2cap_chan_add>
	return true;
   1bce4:	2001      	movs	r0, #1
}
   1bce6:	b008      	add	sp, #32
   1bce8:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to allocate L2CAP channel ID");
   1bcea:	4b14      	ldr	r3, [pc, #80]	; (1bd3c <l2cap_chan_add+0x78>)
   1bcec:	9307      	str	r3, [sp, #28]
   1bcee:	2302      	movs	r3, #2
   1bcf0:	f88d 3004 	strb.w	r3, [sp, #4]
   1bcf4:	2400      	movs	r4, #0
   1bcf6:	f88d 4005 	strb.w	r4, [sp, #5]
   1bcfa:	f88d 4006 	strb.w	r4, [sp, #6]
   1bcfe:	f88d 4007 	strb.w	r4, [sp, #7]
   1bd02:	9b01      	ldr	r3, [sp, #4]
   1bd04:	9306      	str	r3, [sp, #24]
   1bd06:	4621      	mov	r1, r4
   1bd08:	f364 0100 	bfi	r1, r4, #0, #1
   1bd0c:	f364 0141 	bfi	r1, r4, #1, #1
   1bd10:	f364 0182 	bfi	r1, r4, #2, #1
   1bd14:	f364 01c5 	bfi	r1, r4, #3, #3
   1bd18:	2301      	movs	r3, #1
   1bd1a:	f363 1188 	bfi	r1, r3, #6, #3
   1bd1e:	2308      	movs	r3, #8
   1bd20:	f363 2152 	bfi	r1, r3, #9, #10
   1bd24:	f364 41de 	bfi	r1, r4, #19, #12
   1bd28:	f364 71df 	bfi	r1, r4, #31, #1
   1bd2c:	4623      	mov	r3, r4
   1bd2e:	aa06      	add	r2, sp, #24
   1bd30:	4803      	ldr	r0, [pc, #12]	; (1bd40 <l2cap_chan_add+0x7c>)
   1bd32:	f7f7 ffe3 	bl	13cfc <z_impl_z_log_msg_static_create>
		return false;
   1bd36:	4620      	mov	r0, r4
   1bd38:	e7d5      	b.n	1bce6 <l2cap_chan_add+0x22>
   1bd3a:	bf00      	nop
   1bd3c:	000321cc 	.word	0x000321cc
   1bd40:	0002f838 	.word	0x0002f838

0001bd44 <bt_l2cap_connected>:
{
   1bd44:	b530      	push	{r4, r5, lr}
   1bd46:	b083      	sub	sp, #12
   1bd48:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1bd4a:	4c21      	ldr	r4, [pc, #132]	; (1bdd0 <bt_l2cap_connected+0x8c>)
   1bd4c:	e011      	b.n	1bd72 <bt_l2cap_connected+0x2e>
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1bd4e:	9b01      	ldr	r3, [sp, #4]
   1bd50:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bd52:	e8d3 1fef 	ldaex	r1, [r3]
   1bd56:	f041 0101 	orr.w	r1, r1, #1
   1bd5a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1bd5e:	2a00      	cmp	r2, #0
   1bd60:	d1f7      	bne.n	1bd52 <bt_l2cap_connected+0xe>
		if (chan->ops->status) {
   1bd62:	9801      	ldr	r0, [sp, #4]
   1bd64:	6843      	ldr	r3, [r0, #4]
   1bd66:	69db      	ldr	r3, [r3, #28]
   1bd68:	b113      	cbz	r3, 1bd70 <bt_l2cap_connected+0x2c>
			chan->ops->status(chan, chan->status);
   1bd6a:	f100 0110 	add.w	r1, r0, #16
   1bd6e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1bd70:	340c      	adds	r4, #12
   1bd72:	4b18      	ldr	r3, [pc, #96]	; (1bdd4 <bt_l2cap_connected+0x90>)
   1bd74:	429c      	cmp	r4, r3
   1bd76:	d818      	bhi.n	1bdaa <bt_l2cap_connected+0x66>
   1bd78:	4b16      	ldr	r3, [pc, #88]	; (1bdd4 <bt_l2cap_connected+0x90>)
   1bd7a:	429c      	cmp	r4, r3
   1bd7c:	d225      	bcs.n	1bdca <bt_l2cap_connected+0x86>
		if (fchan->accept(conn, &chan) < 0) {
   1bd7e:	6863      	ldr	r3, [r4, #4]
   1bd80:	a901      	add	r1, sp, #4
   1bd82:	4628      	mov	r0, r5
   1bd84:	4798      	blx	r3
   1bd86:	2800      	cmp	r0, #0
   1bd88:	dbf2      	blt.n	1bd70 <bt_l2cap_connected+0x2c>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1bd8a:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1bd8c:	8823      	ldrh	r3, [r4, #0]
   1bd8e:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1bd90:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1bd92:	68a2      	ldr	r2, [r4, #8]
   1bd94:	4628      	mov	r0, r5
   1bd96:	f7ff ff95 	bl	1bcc4 <l2cap_chan_add>
   1bd9a:	b1b0      	cbz	r0, 1bdca <bt_l2cap_connected+0x86>
		if (chan->ops->connected) {
   1bd9c:	9801      	ldr	r0, [sp, #4]
   1bd9e:	6843      	ldr	r3, [r0, #4]
   1bda0:	681b      	ldr	r3, [r3, #0]
   1bda2:	2b00      	cmp	r3, #0
   1bda4:	d0d3      	beq.n	1bd4e <bt_l2cap_connected+0xa>
			chan->ops->connected(chan);
   1bda6:	4798      	blx	r3
   1bda8:	e7d1      	b.n	1bd4e <bt_l2cap_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1bdaa:	4c0b      	ldr	r4, [pc, #44]	; (1bdd8 <bt_l2cap_connected+0x94>)
   1bdac:	f240 1381 	movw	r3, #385	; 0x181
   1bdb0:	4622      	mov	r2, r4
   1bdb2:	490a      	ldr	r1, [pc, #40]	; (1bddc <bt_l2cap_connected+0x98>)
   1bdb4:	480a      	ldr	r0, [pc, #40]	; (1bde0 <bt_l2cap_connected+0x9c>)
   1bdb6:	f00d fe98 	bl	29aea <assert_print>
   1bdba:	480a      	ldr	r0, [pc, #40]	; (1bde4 <bt_l2cap_connected+0xa0>)
   1bdbc:	f00d fe95 	bl	29aea <assert_print>
   1bdc0:	f240 1181 	movw	r1, #385	; 0x181
   1bdc4:	4620      	mov	r0, r4
   1bdc6:	f00d fe89 	bl	29adc <assert_post_action>
}
   1bdca:	b003      	add	sp, #12
   1bdcc:	bd30      	pop	{r4, r5, pc}
   1bdce:	bf00      	nop
   1bdd0:	0002f7ac 	.word	0x0002f7ac
   1bdd4:	0002f7d0 	.word	0x0002f7d0
   1bdd8:	000321f0 	.word	0x000321f0
   1bddc:	00032224 	.word	0x00032224
   1bde0:	0002fdac 	.word	0x0002fdac
   1bde4:	00030500 	.word	0x00030500

0001bde8 <l2cap_create_le_sig_pdu>:
{
   1bde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdec:	b082      	sub	sp, #8
   1bdee:	af00      	add	r7, sp, #0
   1bdf0:	460c      	mov	r4, r1
   1bdf2:	4616      	mov	r6, r2
   1bdf4:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1bdf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bdfa:	2300      	movs	r3, #0
   1bdfc:	2100      	movs	r1, #0
   1bdfe:	4608      	mov	r0, r1
   1be00:	f00f ffbf 	bl	2bd82 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1be04:	4680      	mov	r8, r0
   1be06:	b158      	cbz	r0, 1be20 <l2cap_create_le_sig_pdu+0x38>
	return net_buf_simple_add(&buf->b, len);
   1be08:	2104      	movs	r1, #4
   1be0a:	3008      	adds	r0, #8
   1be0c:	f003 fc78 	bl	1f700 <net_buf_simple_add>
	hdr->code = code;
   1be10:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1be12:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1be14:	8045      	strh	r5, [r0, #2]
}
   1be16:	4640      	mov	r0, r8
   1be18:	3708      	adds	r7, #8
   1be1a:	46bd      	mov	sp, r7
   1be1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1be20:	466d      	mov	r5, sp
   1be22:	b088      	sub	sp, #32
   1be24:	466b      	mov	r3, sp
   1be26:	f113 0210 	adds.w	r2, r3, #16
   1be2a:	d02f      	beq.n	1be8c <l2cap_create_le_sig_pdu+0xa4>
   1be2c:	210c      	movs	r1, #12
   1be2e:	b13a      	cbz	r2, 1be40 <l2cap_create_le_sig_pdu+0x58>
   1be30:	4608      	mov	r0, r1
   1be32:	2904      	cmp	r1, #4
   1be34:	dd01      	ble.n	1be3a <l2cap_create_le_sig_pdu+0x52>
   1be36:	4e18      	ldr	r6, [pc, #96]	; (1be98 <l2cap_create_le_sig_pdu+0xb0>)
   1be38:	615e      	str	r6, [r3, #20]
   1be3a:	2808      	cmp	r0, #8
   1be3c:	dd00      	ble.n	1be40 <l2cap_create_le_sig_pdu+0x58>
   1be3e:	619c      	str	r4, [r3, #24]
   1be40:	290b      	cmp	r1, #11
   1be42:	dd26      	ble.n	1be92 <l2cap_create_le_sig_pdu+0xaa>
   1be44:	240c      	movs	r4, #12
   1be46:	b13a      	cbz	r2, 1be58 <l2cap_create_le_sig_pdu+0x70>
   1be48:	2103      	movs	r1, #3
   1be4a:	7139      	strb	r1, [r7, #4]
   1be4c:	2100      	movs	r1, #0
   1be4e:	7179      	strb	r1, [r7, #5]
   1be50:	71b9      	strb	r1, [r7, #6]
   1be52:	71f9      	strb	r1, [r7, #7]
   1be54:	6878      	ldr	r0, [r7, #4]
   1be56:	6118      	str	r0, [r3, #16]
   1be58:	2100      	movs	r1, #0
   1be5a:	f36f 0100 	bfc	r1, #0, #1
   1be5e:	f36f 0141 	bfc	r1, #1, #1
   1be62:	f36f 0182 	bfc	r1, #2, #1
   1be66:	f36f 01c5 	bfc	r1, #3, #3
   1be6a:	2301      	movs	r3, #1
   1be6c:	f363 1188 	bfi	r1, r3, #6, #3
   1be70:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1be74:	f364 2152 	bfi	r1, r4, #9, #10
   1be78:	f36f 41de 	bfc	r1, #19, #12
   1be7c:	f36f 71df 	bfc	r1, #31, #1
   1be80:	2300      	movs	r3, #0
   1be82:	4806      	ldr	r0, [pc, #24]	; (1be9c <l2cap_create_le_sig_pdu+0xb4>)
   1be84:	f7f7 ff3a 	bl	13cfc <z_impl_z_log_msg_static_create>
   1be88:	46ad      	mov	sp, r5
		return NULL;
   1be8a:	e7c4      	b.n	1be16 <l2cap_create_le_sig_pdu+0x2e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1be8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1be90:	e7cd      	b.n	1be2e <l2cap_create_le_sig_pdu+0x46>
   1be92:	f06f 041b 	mvn.w	r4, #27
   1be96:	e7d6      	b.n	1be46 <l2cap_create_le_sig_pdu+0x5e>
   1be98:	0003224c 	.word	0x0003224c
   1be9c:	0002f838 	.word	0x0002f838

0001bea0 <l2cap_recv>:
{
   1bea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bea2:	b091      	sub	sp, #68	; 0x44
   1bea4:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1bea6:	898b      	ldrh	r3, [r1, #12]
   1bea8:	2b03      	cmp	r3, #3
   1beaa:	d924      	bls.n	1bef6 <l2cap_recv+0x56>
   1beac:	4606      	mov	r6, r0
   1beae:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1beb0:	2104      	movs	r1, #4
   1beb2:	f104 0008 	add.w	r0, r4, #8
   1beb6:	f003 fbe3 	bl	1f680 <net_buf_simple_pull_mem>
   1beba:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1bebc:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   1bebe:	89a0      	ldrh	r0, [r4, #12]
   1bec0:	4288      	cmp	r0, r1
   1bec2:	d069      	beq.n	1bf98 <l2cap_recv+0xf8>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1bec4:	466c      	mov	r4, sp
   1bec6:	b088      	sub	sp, #32
   1bec8:	ab02      	add	r3, sp, #8
   1beca:	f113 0210 	adds.w	r2, r3, #16
   1bece:	d038      	beq.n	1bf42 <l2cap_recv+0xa2>
   1bed0:	2510      	movs	r5, #16
   1bed2:	b162      	cbz	r2, 1beee <l2cap_recv+0x4e>
   1bed4:	462e      	mov	r6, r5
   1bed6:	2d04      	cmp	r5, #4
   1bed8:	dd03      	ble.n	1bee2 <l2cap_recv+0x42>
   1beda:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 1c088 <l2cap_recv+0x1e8>
   1bede:	f8c3 c014 	str.w	ip, [r3, #20]
   1bee2:	2e08      	cmp	r6, #8
   1bee4:	dd00      	ble.n	1bee8 <l2cap_recv+0x48>
   1bee6:	6198      	str	r0, [r3, #24]
   1bee8:	2e0c      	cmp	r6, #12
   1beea:	dd2d      	ble.n	1bf48 <l2cap_recv+0xa8>
   1beec:	61d9      	str	r1, [r3, #28]
   1beee:	2d0f      	cmp	r5, #15
   1bef0:	dd4f      	ble.n	1bf92 <l2cap_recv+0xf2>
   1bef2:	2510      	movs	r5, #16
   1bef4:	e02a      	b.n	1bf4c <l2cap_recv+0xac>
		BT_ERR("Too small L2CAP signaling PDU");
   1bef6:	4b65      	ldr	r3, [pc, #404]	; (1c08c <l2cap_recv+0x1ec>)
   1bef8:	637b      	str	r3, [r7, #52]	; 0x34
   1befa:	2302      	movs	r3, #2
   1befc:	713b      	strb	r3, [r7, #4]
   1befe:	2300      	movs	r3, #0
   1bf00:	717b      	strb	r3, [r7, #5]
   1bf02:	71bb      	strb	r3, [r7, #6]
   1bf04:	71fb      	strb	r3, [r7, #7]
   1bf06:	687a      	ldr	r2, [r7, #4]
   1bf08:	633a      	str	r2, [r7, #48]	; 0x30
   1bf0a:	4619      	mov	r1, r3
   1bf0c:	f363 0100 	bfi	r1, r3, #0, #1
   1bf10:	f363 0141 	bfi	r1, r3, #1, #1
   1bf14:	f363 0182 	bfi	r1, r3, #2, #1
   1bf18:	f363 01c5 	bfi	r1, r3, #3, #3
   1bf1c:	2201      	movs	r2, #1
   1bf1e:	f362 1188 	bfi	r1, r2, #6, #3
   1bf22:	2208      	movs	r2, #8
   1bf24:	f362 2152 	bfi	r1, r2, #9, #10
   1bf28:	f363 41de 	bfi	r1, r3, #19, #12
   1bf2c:	f363 71df 	bfi	r1, r3, #31, #1
   1bf30:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1bf34:	4856      	ldr	r0, [pc, #344]	; (1c090 <l2cap_recv+0x1f0>)
   1bf36:	f7f7 fee1 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   1bf3a:	2000      	movs	r0, #0
   1bf3c:	373c      	adds	r7, #60	; 0x3c
   1bf3e:	46bd      	mov	sp, r7
   1bf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1bf42:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1bf46:	e7c4      	b.n	1bed2 <l2cap_recv+0x32>
   1bf48:	f06f 051b 	mvn.w	r5, #27
   1bf4c:	b13a      	cbz	r2, 1bf5e <l2cap_recv+0xbe>
   1bf4e:	2104      	movs	r1, #4
   1bf50:	7139      	strb	r1, [r7, #4]
   1bf52:	2100      	movs	r1, #0
   1bf54:	7179      	strb	r1, [r7, #5]
   1bf56:	71b9      	strb	r1, [r7, #6]
   1bf58:	71f9      	strb	r1, [r7, #7]
   1bf5a:	6878      	ldr	r0, [r7, #4]
   1bf5c:	6118      	str	r0, [r3, #16]
   1bf5e:	2100      	movs	r1, #0
   1bf60:	f36f 0100 	bfc	r1, #0, #1
   1bf64:	f36f 0141 	bfc	r1, #1, #1
   1bf68:	f36f 0182 	bfc	r1, #2, #1
   1bf6c:	f36f 01c5 	bfc	r1, #3, #3
   1bf70:	2301      	movs	r3, #1
   1bf72:	f363 1188 	bfi	r1, r3, #6, #3
   1bf76:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   1bf7a:	f363 2152 	bfi	r1, r3, #9, #10
   1bf7e:	f36f 41de 	bfc	r1, #19, #12
   1bf82:	f36f 71df 	bfc	r1, #31, #1
   1bf86:	2300      	movs	r3, #0
   1bf88:	4841      	ldr	r0, [pc, #260]	; (1c090 <l2cap_recv+0x1f0>)
   1bf8a:	f7f7 feb7 	bl	13cfc <z_impl_z_log_msg_static_create>
   1bf8e:	46a5      	mov	sp, r4
		return 0;
   1bf90:	e7d3      	b.n	1bf3a <l2cap_recv+0x9a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1bf92:	f06f 051b 	mvn.w	r5, #27
   1bf96:	e7d9      	b.n	1bf4c <l2cap_recv+0xac>
	if (!hdr->ident) {
   1bf98:	786b      	ldrb	r3, [r5, #1]
   1bf9a:	b14b      	cbz	r3, 1bfb0 <l2cap_recv+0x110>
	switch (hdr->code) {
   1bf9c:	782b      	ldrb	r3, [r5, #0]
   1bf9e:	2b01      	cmp	r3, #1
   1bfa0:	d0cb      	beq.n	1bf3a <l2cap_recv+0x9a>
   1bfa2:	2b13      	cmp	r3, #19
   1bfa4:	d127      	bne.n	1bff6 <l2cap_recv+0x156>
		le_conn_param_rsp(l2cap, buf);
   1bfa6:	4621      	mov	r1, r4
   1bfa8:	4630      	mov	r0, r6
   1bfaa:	f7ff fe59 	bl	1bc60 <le_conn_param_rsp>
		break;
   1bfae:	e7c4      	b.n	1bf3a <l2cap_recv+0x9a>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1bfb0:	4b38      	ldr	r3, [pc, #224]	; (1c094 <l2cap_recv+0x1f4>)
   1bfb2:	61fb      	str	r3, [r7, #28]
   1bfb4:	2302      	movs	r3, #2
   1bfb6:	713b      	strb	r3, [r7, #4]
   1bfb8:	2300      	movs	r3, #0
   1bfba:	717b      	strb	r3, [r7, #5]
   1bfbc:	71bb      	strb	r3, [r7, #6]
   1bfbe:	71fb      	strb	r3, [r7, #7]
   1bfc0:	687a      	ldr	r2, [r7, #4]
   1bfc2:	61ba      	str	r2, [r7, #24]
   1bfc4:	4619      	mov	r1, r3
   1bfc6:	f363 0100 	bfi	r1, r3, #0, #1
   1bfca:	f363 0141 	bfi	r1, r3, #1, #1
   1bfce:	f363 0182 	bfi	r1, r3, #2, #1
   1bfd2:	f363 01c5 	bfi	r1, r3, #3, #3
   1bfd6:	2201      	movs	r2, #1
   1bfd8:	f362 1188 	bfi	r1, r2, #6, #3
   1bfdc:	2208      	movs	r2, #8
   1bfde:	f362 2152 	bfi	r1, r2, #9, #10
   1bfe2:	f363 41de 	bfi	r1, r3, #19, #12
   1bfe6:	f363 71df 	bfi	r1, r3, #31, #1
   1bfea:	f107 0218 	add.w	r2, r7, #24
   1bfee:	4828      	ldr	r0, [pc, #160]	; (1c090 <l2cap_recv+0x1f0>)
   1bff0:	f7f7 fe84 	bl	13cfc <z_impl_z_log_msg_static_create>
		return 0;
   1bff4:	e7a1      	b.n	1bf3a <l2cap_recv+0x9a>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1bff6:	466c      	mov	r4, sp
   1bff8:	b088      	sub	sp, #32
   1bffa:	a902      	add	r1, sp, #8
   1bffc:	f111 0210 	adds.w	r2, r1, #16
   1c000:	d010      	beq.n	1c024 <l2cap_recv+0x184>
   1c002:	200c      	movs	r0, #12
   1c004:	b152      	cbz	r2, 1c01c <l2cap_recv+0x17c>
   1c006:	4684      	mov	ip, r0
   1c008:	2804      	cmp	r0, #4
   1c00a:	dd03      	ble.n	1c014 <l2cap_recv+0x174>
   1c00c:	f8df e088 	ldr.w	lr, [pc, #136]	; 1c098 <l2cap_recv+0x1f8>
   1c010:	f8c1 e014 	str.w	lr, [r1, #20]
   1c014:	f1bc 0f08 	cmp.w	ip, #8
   1c018:	dd07      	ble.n	1c02a <l2cap_recv+0x18a>
   1c01a:	618b      	str	r3, [r1, #24]
   1c01c:	280b      	cmp	r0, #11
   1c01e:	dd30      	ble.n	1c082 <l2cap_recv+0x1e2>
   1c020:	230c      	movs	r3, #12
   1c022:	e004      	b.n	1c02e <l2cap_recv+0x18e>
   1c024:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c028:	e7ec      	b.n	1c004 <l2cap_recv+0x164>
   1c02a:	f06f 031b 	mvn.w	r3, #27
   1c02e:	b13a      	cbz	r2, 1c040 <l2cap_recv+0x1a0>
   1c030:	2003      	movs	r0, #3
   1c032:	7138      	strb	r0, [r7, #4]
   1c034:	2000      	movs	r0, #0
   1c036:	7178      	strb	r0, [r7, #5]
   1c038:	71b8      	strb	r0, [r7, #6]
   1c03a:	71f8      	strb	r0, [r7, #7]
   1c03c:	6878      	ldr	r0, [r7, #4]
   1c03e:	6108      	str	r0, [r1, #16]
   1c040:	2100      	movs	r1, #0
   1c042:	f36f 0100 	bfc	r1, #0, #1
   1c046:	f36f 0141 	bfc	r1, #1, #1
   1c04a:	f36f 0182 	bfc	r1, #2, #1
   1c04e:	f36f 01c5 	bfc	r1, #3, #3
   1c052:	2002      	movs	r0, #2
   1c054:	f360 1188 	bfi	r1, r0, #6, #3
   1c058:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1c05c:	f363 2152 	bfi	r1, r3, #9, #10
   1c060:	f36f 41de 	bfc	r1, #19, #12
   1c064:	f36f 71df 	bfc	r1, #31, #1
   1c068:	2300      	movs	r3, #0
   1c06a:	4809      	ldr	r0, [pc, #36]	; (1c090 <l2cap_recv+0x1f0>)
   1c06c:	f7f7 fe46 	bl	13cfc <z_impl_z_log_msg_static_create>
   1c070:	46a5      	mov	sp, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1c072:	7869      	ldrb	r1, [r5, #1]
   1c074:	6830      	ldr	r0, [r6, #0]
   1c076:	2200      	movs	r2, #0
   1c078:	9200      	str	r2, [sp, #0]
   1c07a:	4613      	mov	r3, r2
   1c07c:	f00f fea9 	bl	2bdd2 <l2cap_send_reject>
		break;
   1c080:	e75b      	b.n	1bf3a <l2cap_recv+0x9a>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1c082:	f06f 031b 	mvn.w	r3, #27
   1c086:	e7d2      	b.n	1c02e <l2cap_recv+0x18e>
   1c088:	00032294 	.word	0x00032294
   1c08c:	00032274 	.word	0x00032274
   1c090:	0002f838 	.word	0x0002f838
   1c094:	000322b8 	.word	0x000322b8
   1c098:	000322dc 	.word	0x000322dc

0001c09c <bt_l2cap_recv>:
{
   1c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0a0:	b088      	sub	sp, #32
   1c0a2:	af00      	add	r7, sp, #0
   1c0a4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1c0a6:	898b      	ldrh	r3, [r1, #12]
   1c0a8:	2b03      	cmp	r3, #3
   1c0aa:	d915      	bls.n	1c0d8 <bt_l2cap_recv+0x3c>
   1c0ac:	4606      	mov	r6, r0
   1c0ae:	4615      	mov	r5, r2
   1c0b0:	2104      	movs	r1, #4
   1c0b2:	f104 0008 	add.w	r0, r4, #8
   1c0b6:	f003 fae3 	bl	1f680 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1c0ba:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1c0be:	4641      	mov	r1, r8
   1c0c0:	4630      	mov	r0, r6
   1c0c2:	f00f feaa 	bl	2be1a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c0c6:	b368      	cbz	r0, 1c124 <bt_l2cap_recv+0x88>
	l2cap_chan_recv(chan, buf, complete);
   1c0c8:	462a      	mov	r2, r5
   1c0ca:	4621      	mov	r1, r4
   1c0cc:	f00f fe12 	bl	2bcf4 <l2cap_chan_recv>
}
   1c0d0:	3720      	adds	r7, #32
   1c0d2:	46bd      	mov	sp, r7
   1c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Too small L2CAP PDU received");
   1c0d8:	4b34      	ldr	r3, [pc, #208]	; (1c1ac <bt_l2cap_recv+0x110>)
   1c0da:	61fb      	str	r3, [r7, #28]
   1c0dc:	2302      	movs	r3, #2
   1c0de:	713b      	strb	r3, [r7, #4]
   1c0e0:	2300      	movs	r3, #0
   1c0e2:	717b      	strb	r3, [r7, #5]
   1c0e4:	71bb      	strb	r3, [r7, #6]
   1c0e6:	71fb      	strb	r3, [r7, #7]
   1c0e8:	687a      	ldr	r2, [r7, #4]
   1c0ea:	61ba      	str	r2, [r7, #24]
   1c0ec:	4619      	mov	r1, r3
   1c0ee:	f363 0100 	bfi	r1, r3, #0, #1
   1c0f2:	f363 0141 	bfi	r1, r3, #1, #1
   1c0f6:	f363 0182 	bfi	r1, r3, #2, #1
   1c0fa:	f363 01c5 	bfi	r1, r3, #3, #3
   1c0fe:	2201      	movs	r2, #1
   1c100:	f362 1188 	bfi	r1, r2, #6, #3
   1c104:	2208      	movs	r2, #8
   1c106:	f362 2152 	bfi	r1, r2, #9, #10
   1c10a:	f363 41de 	bfi	r1, r3, #19, #12
   1c10e:	f363 71df 	bfi	r1, r3, #31, #1
   1c112:	f107 0218 	add.w	r2, r7, #24
   1c116:	4826      	ldr	r0, [pc, #152]	; (1c1b0 <bt_l2cap_recv+0x114>)
   1c118:	f7f7 fdf0 	bl	13cfc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1c11c:	4620      	mov	r0, r4
   1c11e:	f003 f9d1 	bl	1f4c4 <net_buf_unref>
		return;
   1c122:	e7d5      	b.n	1c0d0 <bt_l2cap_recv+0x34>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1c124:	466d      	mov	r5, sp
   1c126:	b088      	sub	sp, #32
   1c128:	466b      	mov	r3, sp
   1c12a:	f113 0210 	adds.w	r2, r3, #16
   1c12e:	d00e      	beq.n	1c14e <bt_l2cap_recv+0xb2>
   1c130:	210c      	movs	r1, #12
   1c132:	b142      	cbz	r2, 1c146 <bt_l2cap_recv+0xaa>
   1c134:	4608      	mov	r0, r1
   1c136:	2904      	cmp	r1, #4
   1c138:	dd01      	ble.n	1c13e <bt_l2cap_recv+0xa2>
   1c13a:	4e1e      	ldr	r6, [pc, #120]	; (1c1b4 <bt_l2cap_recv+0x118>)
   1c13c:	615e      	str	r6, [r3, #20]
   1c13e:	2808      	cmp	r0, #8
   1c140:	dd08      	ble.n	1c154 <bt_l2cap_recv+0xb8>
   1c142:	f8c3 8018 	str.w	r8, [r3, #24]
   1c146:	290b      	cmp	r1, #11
   1c148:	dd2c      	ble.n	1c1a4 <bt_l2cap_recv+0x108>
   1c14a:	260c      	movs	r6, #12
   1c14c:	e004      	b.n	1c158 <bt_l2cap_recv+0xbc>
   1c14e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c152:	e7ee      	b.n	1c132 <bt_l2cap_recv+0x96>
   1c154:	f06f 061b 	mvn.w	r6, #27
   1c158:	b13a      	cbz	r2, 1c16a <bt_l2cap_recv+0xce>
   1c15a:	2103      	movs	r1, #3
   1c15c:	7139      	strb	r1, [r7, #4]
   1c15e:	2100      	movs	r1, #0
   1c160:	7179      	strb	r1, [r7, #5]
   1c162:	71b9      	strb	r1, [r7, #6]
   1c164:	71f9      	strb	r1, [r7, #7]
   1c166:	6878      	ldr	r0, [r7, #4]
   1c168:	6118      	str	r0, [r3, #16]
   1c16a:	2100      	movs	r1, #0
   1c16c:	f36f 0100 	bfc	r1, #0, #1
   1c170:	f36f 0141 	bfc	r1, #1, #1
   1c174:	f36f 0182 	bfc	r1, #2, #1
   1c178:	f36f 01c5 	bfc	r1, #3, #3
   1c17c:	2302      	movs	r3, #2
   1c17e:	f363 1188 	bfi	r1, r3, #6, #3
   1c182:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1c186:	f363 2152 	bfi	r1, r3, #9, #10
   1c18a:	f36f 41de 	bfc	r1, #19, #12
   1c18e:	f36f 71df 	bfc	r1, #31, #1
   1c192:	2300      	movs	r3, #0
   1c194:	4806      	ldr	r0, [pc, #24]	; (1c1b0 <bt_l2cap_recv+0x114>)
   1c196:	f7f7 fdb1 	bl	13cfc <z_impl_z_log_msg_static_create>
   1c19a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1c19c:	4620      	mov	r0, r4
   1c19e:	f003 f991 	bl	1f4c4 <net_buf_unref>
		return;
   1c1a2:	e795      	b.n	1c0d0 <bt_l2cap_recv+0x34>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1c1a4:	f06f 061b 	mvn.w	r6, #27
   1c1a8:	e7d6      	b.n	1c158 <bt_l2cap_recv+0xbc>
   1c1aa:	bf00      	nop
   1c1ac:	00032304 	.word	0x00032304
   1c1b0:	0002f838 	.word	0x0002f838
   1c1b4:	00032324 	.word	0x00032324

0001c1b8 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1c1b8:	2852      	cmp	r0, #82	; 0x52
   1c1ba:	d833      	bhi.n	1c224 <att_op_get_type+0x6c>
   1c1bc:	281b      	cmp	r0, #27
   1c1be:	d321      	bcc.n	1c204 <att_op_get_type+0x4c>
   1c1c0:	f1a0 031b 	sub.w	r3, r0, #27
   1c1c4:	2b37      	cmp	r3, #55	; 0x37
   1c1c6:	d82f      	bhi.n	1c228 <att_op_get_type+0x70>
   1c1c8:	e8df f003 	tbb	[pc, r3]
   1c1cc:	3b392e37 	.word	0x3b392e37
   1c1d0:	2e352a2e 	.word	0x2e352a2e
   1c1d4:	2e2e2e37 	.word	0x2e2e2e37
   1c1d8:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1dc:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1e0:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1e4:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1e8:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1ec:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1f0:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1f4:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1f8:	2e2e2e2e 	.word	0x2e2e2e2e
   1c1fc:	2e2e2e2e 	.word	0x2e2e2e2e
   1c200:	332e2e2e 	.word	0x332e2e2e
   1c204:	2819      	cmp	r0, #25
   1c206:	d80f      	bhi.n	1c228 <att_op_get_type+0x70>
   1c208:	b243      	sxtb	r3, r0
   1c20a:	b16b      	cbz	r3, 1c228 <att_op_get_type+0x70>
   1c20c:	2301      	movs	r3, #1
   1c20e:	4083      	lsls	r3, r0
   1c210:	4a10      	ldr	r2, [pc, #64]	; (1c254 <att_op_get_type+0x9c>)
   1c212:	401a      	ands	r2, r3
   1c214:	b9ba      	cbnz	r2, 1c246 <att_op_get_type+0x8e>
   1c216:	4a10      	ldr	r2, [pc, #64]	; (1c258 <att_op_get_type+0xa0>)
   1c218:	401a      	ands	r2, r3
   1c21a:	b12a      	cbz	r2, 1c228 <att_op_get_type+0x70>
   1c21c:	2001      	movs	r0, #1
   1c21e:	4770      	bx	lr
   1c220:	2001      	movs	r0, #1
   1c222:	4770      	bx	lr
   1c224:	28d2      	cmp	r0, #210	; 0xd2
   1c226:	d010      	beq.n	1c24a <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   1c228:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c22c:	d10f      	bne.n	1c24e <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1c22e:	2006      	movs	r0, #6
   1c230:	4770      	bx	lr
		return ATT_COMMAND;
   1c232:	2000      	movs	r0, #0
   1c234:	4770      	bx	lr
		return ATT_RESPONSE;
   1c236:	2002      	movs	r0, #2
   1c238:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c23a:	2003      	movs	r0, #3
   1c23c:	4770      	bx	lr
		return ATT_INDICATION;
   1c23e:	2005      	movs	r0, #5
   1c240:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1c242:	2004      	movs	r0, #4
   1c244:	4770      	bx	lr
		return ATT_RESPONSE;
   1c246:	2002      	movs	r0, #2
   1c248:	4770      	bx	lr
		return ATT_COMMAND;
   1c24a:	2000      	movs	r0, #0
   1c24c:	4770      	bx	lr
		return ATT_COMMAND;
   1c24e:	2000      	movs	r0, #0
}
   1c250:	4770      	bx	lr
   1c252:	bf00      	nop
   1c254:	028aaaaa 	.word	0x028aaaaa
   1c258:	01455554 	.word	0x01455554

0001c25c <att_cb>:
{
   1c25c:	b538      	push	{r3, r4, r5, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1c25e:	6883      	ldr	r3, [r0, #8]
   1c260:	7818      	ldrb	r0, [r3, #0]
   1c262:	f7ff ffa9 	bl	1c1b8 <att_op_get_type>
	switch (op_type) {
   1c266:	2805      	cmp	r0, #5
   1c268:	d808      	bhi.n	1c27c <att_cb+0x20>
   1c26a:	e8df f000 	tbb	[pc, r0]
   1c26e:	0305      	.short	0x0305
   1c270:	031b0519 	.word	0x031b0519
		return att_req_sent;
   1c274:	480c      	ldr	r0, [pc, #48]	; (1c2a8 <att_cb+0x4c>)
}
   1c276:	bd38      	pop	{r3, r4, r5, pc}
		return att_tx_complete;
   1c278:	480c      	ldr	r0, [pc, #48]	; (1c2ac <att_cb+0x50>)
   1c27a:	e7fc      	b.n	1c276 <att_cb+0x1a>
   1c27c:	4604      	mov	r4, r0
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   1c27e:	4d0c      	ldr	r5, [pc, #48]	; (1c2b0 <att_cb+0x54>)
   1c280:	f240 2357 	movw	r3, #599	; 0x257
   1c284:	462a      	mov	r2, r5
   1c286:	490b      	ldr	r1, [pc, #44]	; (1c2b4 <att_cb+0x58>)
   1c288:	480b      	ldr	r0, [pc, #44]	; (1c2b8 <att_cb+0x5c>)
   1c28a:	f00d fc2e 	bl	29aea <assert_print>
   1c28e:	4621      	mov	r1, r4
   1c290:	480a      	ldr	r0, [pc, #40]	; (1c2bc <att_cb+0x60>)
   1c292:	f00d fc2a 	bl	29aea <assert_print>
   1c296:	f240 2157 	movw	r1, #599	; 0x257
   1c29a:	4628      	mov	r0, r5
   1c29c:	f00d fc1e 	bl	29adc <assert_post_action>
	switch (op_type) {
   1c2a0:	4807      	ldr	r0, [pc, #28]	; (1c2c0 <att_cb+0x64>)
   1c2a2:	e7e8      	b.n	1c276 <att_cb+0x1a>
		return att_cfm_sent;
   1c2a4:	4807      	ldr	r0, [pc, #28]	; (1c2c4 <att_cb+0x68>)
   1c2a6:	e7e6      	b.n	1c276 <att_cb+0x1a>
   1c2a8:	0002c699 	.word	0x0002c699
   1c2ac:	0002c67d 	.word	0x0002c67d
   1c2b0:	00032384 	.word	0x00032384
   1c2b4:	000337ec 	.word	0x000337ec
   1c2b8:	0002fdac 	.word	0x0002fdac
   1c2bc:	000323b4 	.word	0x000323b4
   1c2c0:	0002c6d1 	.word	0x0002c6d1
   1c2c4:	0002c6b5 	.word	0x0002c6b5

0001c2c8 <tx_meta_data_alloc>:
{
   1c2c8:	b508      	push	{r3, lr}
   1c2ca:	4602      	mov	r2, r0
   1c2cc:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   1c2ce:	4802      	ldr	r0, [pc, #8]	; (1c2d8 <tx_meta_data_alloc+0x10>)
   1c2d0:	f009 fa70 	bl	257b4 <z_impl_k_queue_get>
}
   1c2d4:	bd08      	pop	{r3, pc}
   1c2d6:	bf00      	nop
   1c2d8:	200085a4 	.word	0x200085a4

0001c2dc <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1c2dc:	b510      	push	{r4, lr}
   1c2de:	b08e      	sub	sp, #56	; 0x38
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1c2e0:	7a83      	ldrb	r3, [r0, #10]
   1c2e2:	2b07      	cmp	r3, #7
   1c2e4:	d10f      	bne.n	1c306 <att_get+0x2a>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1c2e6:	2104      	movs	r1, #4
   1c2e8:	f00f fd97 	bl	2be1a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c2ec:	4604      	mov	r4, r0
   1c2ee:	b380      	cbz	r0, 1c352 <att_get+0x76>
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   1c2f0:	2102      	movs	r1, #2
   1c2f2:	3094      	adds	r0, #148	; 0x94
   1c2f4:	f00f fe41 	bl	2bf7a <atomic_test_bit>
   1c2f8:	2800      	cmp	r0, #0
   1c2fa:	d050      	beq.n	1c39e <att_get+0xc2>
		 "ATT channel not connected");

	return att_chan->att;
   1c2fc:	f854 4c04 	ldr.w	r4, [r4, #-4]
}
   1c300:	4620      	mov	r0, r4
   1c302:	b00e      	add	sp, #56	; 0x38
   1c304:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
   1c306:	4b2e      	ldr	r3, [pc, #184]	; (1c3c0 <att_get+0xe4>)
   1c308:	930d      	str	r3, [sp, #52]	; 0x34
   1c30a:	2302      	movs	r3, #2
   1c30c:	f88d 3004 	strb.w	r3, [sp, #4]
   1c310:	2400      	movs	r4, #0
   1c312:	f88d 4005 	strb.w	r4, [sp, #5]
   1c316:	f88d 4006 	strb.w	r4, [sp, #6]
   1c31a:	f88d 4007 	strb.w	r4, [sp, #7]
   1c31e:	9a01      	ldr	r2, [sp, #4]
   1c320:	920c      	str	r2, [sp, #48]	; 0x30
   1c322:	4621      	mov	r1, r4
   1c324:	f364 0100 	bfi	r1, r4, #0, #1
   1c328:	f364 0141 	bfi	r1, r4, #1, #1
   1c32c:	f364 0182 	bfi	r1, r4, #2, #1
   1c330:	f364 01c5 	bfi	r1, r4, #3, #3
   1c334:	f363 1188 	bfi	r1, r3, #6, #3
   1c338:	2308      	movs	r3, #8
   1c33a:	f363 2152 	bfi	r1, r3, #9, #10
   1c33e:	f364 41de 	bfi	r1, r4, #19, #12
   1c342:	f364 71df 	bfi	r1, r4, #31, #1
   1c346:	4623      	mov	r3, r4
   1c348:	aa0c      	add	r2, sp, #48	; 0x30
   1c34a:	481e      	ldr	r0, [pc, #120]	; (1c3c4 <att_get+0xe8>)
   1c34c:	f7f7 fcd6 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   1c350:	e7d6      	b.n	1c300 <att_get+0x24>
		BT_ERR("Unable to find ATT channel");
   1c352:	4b1d      	ldr	r3, [pc, #116]	; (1c3c8 <att_get+0xec>)
   1c354:	9307      	str	r3, [sp, #28]
   1c356:	2302      	movs	r3, #2
   1c358:	f88d 3004 	strb.w	r3, [sp, #4]
   1c35c:	2300      	movs	r3, #0
   1c35e:	f88d 3005 	strb.w	r3, [sp, #5]
   1c362:	f88d 3006 	strb.w	r3, [sp, #6]
   1c366:	f88d 3007 	strb.w	r3, [sp, #7]
   1c36a:	9a01      	ldr	r2, [sp, #4]
   1c36c:	9206      	str	r2, [sp, #24]
   1c36e:	4619      	mov	r1, r3
   1c370:	f363 0100 	bfi	r1, r3, #0, #1
   1c374:	f363 0141 	bfi	r1, r3, #1, #1
   1c378:	f363 0182 	bfi	r1, r3, #2, #1
   1c37c:	f363 01c5 	bfi	r1, r3, #3, #3
   1c380:	2201      	movs	r2, #1
   1c382:	f362 1188 	bfi	r1, r2, #6, #3
   1c386:	2208      	movs	r2, #8
   1c388:	f362 2152 	bfi	r1, r2, #9, #10
   1c38c:	f363 41de 	bfi	r1, r3, #19, #12
   1c390:	f363 71df 	bfi	r1, r3, #31, #1
   1c394:	aa06      	add	r2, sp, #24
   1c396:	480b      	ldr	r0, [pc, #44]	; (1c3c4 <att_get+0xe8>)
   1c398:	f7f7 fcb0 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   1c39c:	e7b0      	b.n	1c300 <att_get+0x24>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   1c39e:	4c0b      	ldr	r4, [pc, #44]	; (1c3cc <att_get+0xf0>)
   1c3a0:	f640 332e 	movw	r3, #2862	; 0xb2e
   1c3a4:	4622      	mov	r2, r4
   1c3a6:	490a      	ldr	r1, [pc, #40]	; (1c3d0 <att_get+0xf4>)
   1c3a8:	480a      	ldr	r0, [pc, #40]	; (1c3d4 <att_get+0xf8>)
   1c3aa:	f00d fb9e 	bl	29aea <assert_print>
   1c3ae:	480a      	ldr	r0, [pc, #40]	; (1c3d8 <att_get+0xfc>)
   1c3b0:	f00d fb9b 	bl	29aea <assert_print>
   1c3b4:	f640 312e 	movw	r1, #2862	; 0xb2e
   1c3b8:	4620      	mov	r0, r4
   1c3ba:	f00d fb8f 	bl	29adc <assert_post_action>
   1c3be:	bf00      	nop
   1c3c0:	000323d0 	.word	0x000323d0
   1c3c4:	0002f7f8 	.word	0x0002f7f8
   1c3c8:	000323e0 	.word	0x000323e0
   1c3cc:	00032384 	.word	0x00032384
   1c3d0:	000323fc 	.word	0x000323fc
   1c3d4:	0002fdac 	.word	0x0002fdac
   1c3d8:	0003242c 	.word	0x0003242c

0001c3dc <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1c3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3de:	b083      	sub	sp, #12
   1c3e0:	af00      	add	r7, sp, #0
   1c3e2:	4605      	mov	r5, r0
   1c3e4:	460e      	mov	r6, r1
	return list->head;
   1c3e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1c3e8:	b103      	cbz	r3, 1c3ec <att_chan_new+0x10>
   1c3ea:	3bf0      	subs	r3, #240	; 0xf0
   1c3ec:	607b      	str	r3, [r7, #4]
	int quota = 0;
   1c3ee:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1c3f0:	e002      	b.n	1c3f8 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   1c3f2:	3201      	adds	r2, #1
   1c3f4:	e005      	b.n	1c402 <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1c3f6:	607b      	str	r3, [r7, #4]
   1c3f8:	687c      	ldr	r4, [r7, #4]
   1c3fa:	b16c      	cbz	r4, 1c418 <att_chan_new+0x3c>
		if (chan->att == att) {
   1c3fc:	6823      	ldr	r3, [r4, #0]
   1c3fe:	42ab      	cmp	r3, r5
   1c400:	d0f7      	beq.n	1c3f2 <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   1c402:	2a01      	cmp	r2, #1
   1c404:	d06c      	beq.n	1c4e0 <att_chan_new+0x104>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c406:	f114 03f0 	adds.w	r3, r4, #240	; 0xf0
   1c40a:	d0f4      	beq.n	1c3f6 <att_chan_new+0x1a>
	return node->next;
   1c40c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1c410:	2b00      	cmp	r3, #0
   1c412:	d0f0      	beq.n	1c3f6 <att_chan_new+0x1a>
   1c414:	3bf0      	subs	r3, #240	; 0xf0
   1c416:	e7ee      	b.n	1c3f6 <att_chan_new+0x1a>
			BT_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1c418:	2200      	movs	r2, #0
   1c41a:	2300      	movs	r3, #0
   1c41c:	1d39      	adds	r1, r7, #4
   1c41e:	4831      	ldr	r0, [pc, #196]	; (1c4e4 <att_chan_new+0x108>)
   1c420:	f008 fc12 	bl	24c48 <k_mem_slab_alloc>
   1c424:	b9e8      	cbnz	r0, 1c462 <att_chan_new+0x86>
		BT_WARN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1c426:	22f8      	movs	r2, #248	; 0xf8
   1c428:	2100      	movs	r1, #0
   1c42a:	6878      	ldr	r0, [r7, #4]
   1c42c:	f00e feb3 	bl	2b196 <memset>
	chan->chan.chan.ops = &ops;
   1c430:	6878      	ldr	r0, [r7, #4]
   1c432:	4b2d      	ldr	r3, [pc, #180]	; (1c4e8 <att_chan_new+0x10c>)
   1c434:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   1c436:	30a0      	adds	r0, #160	; 0xa0
	z_impl_k_queue_init(queue);
   1c438:	f012 fd66 	bl	2ef08 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1c43c:	687b      	ldr	r3, [r7, #4]
   1c43e:	3398      	adds	r3, #152	; 0x98
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c440:	e8d3 2fef 	ldaex	r2, [r3]
   1c444:	e8c3 6fe1 	stlex	r1, r6, [r3]
   1c448:	2900      	cmp	r1, #0
   1c44a:	d1f9      	bne.n	1c440 <att_chan_new+0x64>
	chan->att = att;
   1c44c:	687b      	ldr	r3, [r7, #4]
   1c44e:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1c450:	6879      	ldr	r1, [r7, #4]
   1c452:	4628      	mov	r0, r5
   1c454:	f00f fd9c 	bl	2bf90 <att_chan_attach>

	return chan;
   1c458:	687c      	ldr	r4, [r7, #4]
}
   1c45a:	4620      	mov	r0, r4
   1c45c:	370c      	adds	r7, #12
   1c45e:	46bd      	mov	sp, r7
   1c460:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1c462:	682d      	ldr	r5, [r5, #0]
   1c464:	466e      	mov	r6, sp
   1c466:	b088      	sub	sp, #32
   1c468:	466b      	mov	r3, sp
   1c46a:	f113 0210 	adds.w	r2, r3, #16
   1c46e:	d031      	beq.n	1c4d4 <att_chan_new+0xf8>
   1c470:	210c      	movs	r1, #12
   1c472:	b14a      	cbz	r2, 1c488 <att_chan_new+0xac>
   1c474:	4608      	mov	r0, r1
   1c476:	2904      	cmp	r1, #4
   1c478:	dd03      	ble.n	1c482 <att_chan_new+0xa6>
   1c47a:	f8df c070 	ldr.w	ip, [pc, #112]	; 1c4ec <att_chan_new+0x110>
   1c47e:	f8c3 c014 	str.w	ip, [r3, #20]
   1c482:	2808      	cmp	r0, #8
   1c484:	dd00      	ble.n	1c488 <att_chan_new+0xac>
   1c486:	619d      	str	r5, [r3, #24]
   1c488:	290b      	cmp	r1, #11
   1c48a:	dd26      	ble.n	1c4da <att_chan_new+0xfe>
   1c48c:	250c      	movs	r5, #12
   1c48e:	b13a      	cbz	r2, 1c4a0 <att_chan_new+0xc4>
   1c490:	2103      	movs	r1, #3
   1c492:	7039      	strb	r1, [r7, #0]
   1c494:	2100      	movs	r1, #0
   1c496:	7079      	strb	r1, [r7, #1]
   1c498:	70b9      	strb	r1, [r7, #2]
   1c49a:	70f9      	strb	r1, [r7, #3]
   1c49c:	6838      	ldr	r0, [r7, #0]
   1c49e:	6118      	str	r0, [r3, #16]
   1c4a0:	2100      	movs	r1, #0
   1c4a2:	f36f 0100 	bfc	r1, #0, #1
   1c4a6:	f36f 0141 	bfc	r1, #1, #1
   1c4aa:	f36f 0182 	bfc	r1, #2, #1
   1c4ae:	f36f 01c5 	bfc	r1, #3, #3
   1c4b2:	2302      	movs	r3, #2
   1c4b4:	f363 1188 	bfi	r1, r3, #6, #3
   1c4b8:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1c4bc:	f365 2152 	bfi	r1, r5, #9, #10
   1c4c0:	f36f 41de 	bfc	r1, #19, #12
   1c4c4:	f36f 71df 	bfc	r1, #31, #1
   1c4c8:	2300      	movs	r3, #0
   1c4ca:	4809      	ldr	r0, [pc, #36]	; (1c4f0 <att_chan_new+0x114>)
   1c4cc:	f7f7 fc16 	bl	13cfc <z_impl_z_log_msg_static_create>
   1c4d0:	46b5      	mov	sp, r6
		return NULL;
   1c4d2:	e7c2      	b.n	1c45a <att_chan_new+0x7e>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1c4d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c4d8:	e7cb      	b.n	1c472 <att_chan_new+0x96>
   1c4da:	f06f 051b 	mvn.w	r5, #27
   1c4de:	e7d6      	b.n	1c48e <att_chan_new+0xb2>
			return NULL;
   1c4e0:	2400      	movs	r4, #0
   1c4e2:	e7ba      	b.n	1c45a <att_chan_new+0x7e>
   1c4e4:	200084f0 	.word	0x200084f0
   1c4e8:	20008270 	.word	0x20008270
   1c4ec:	00032448 	.word	0x00032448
   1c4f0:	0002f7f8 	.word	0x0002f7f8

0001c4f4 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1c4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4f6:	b083      	sub	sp, #12
   1c4f8:	af00      	add	r7, sp, #0
   1c4fa:	4606      	mov	r6, r0
   1c4fc:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1c4fe:	2200      	movs	r2, #0
   1c500:	2300      	movs	r3, #0
   1c502:	1d39      	adds	r1, r7, #4
   1c504:	4830      	ldr	r0, [pc, #192]	; (1c5c8 <bt_att_accept+0xd4>)
   1c506:	f008 fb9f 	bl	24c48 <k_mem_slab_alloc>
   1c50a:	b9e0      	cbnz	r0, 1c546 <bt_att_accept+0x52>
   1c50c:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   1c50e:	f00b fb1d 	bl	27b4c <z_impl_z_current_get>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1c512:	4b2e      	ldr	r3, [pc, #184]	; (1c5cc <bt_att_accept+0xd8>)
   1c514:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   1c516:	2230      	movs	r2, #48	; 0x30
   1c518:	2100      	movs	r1, #0
   1c51a:	6878      	ldr	r0, [r7, #4]
   1c51c:	f00e fe3b 	bl	2b196 <memset>
	att->conn = conn;
   1c520:	687b      	ldr	r3, [r7, #4]
   1c522:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1c524:	6878      	ldr	r0, [r7, #4]
	list->head = NULL;
   1c526:	2100      	movs	r1, #0
   1c528:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1c52a:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1c52c:	6281      	str	r1, [r0, #40]	; 0x28
	list->tail = NULL;
   1c52e:	62c1      	str	r1, [r0, #44]	; 0x2c
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1c530:	f7ff ff54 	bl	1c3dc <att_chan_new>
	if (!chan) {
   1c534:	4603      	mov	r3, r0
   1c536:	2800      	cmp	r0, #0
   1c538:	d043      	beq.n	1c5c2 <bt_att_accept+0xce>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1c53a:	3304      	adds	r3, #4
   1c53c:	6023      	str	r3, [r4, #0]

	return 0;
}
   1c53e:	4628      	mov	r0, r5
   1c540:	370c      	adds	r7, #12
   1c542:	46bd      	mov	sp, r7
   1c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No available ATT context for conn %p", conn);
   1c546:	466d      	mov	r5, sp
   1c548:	b088      	sub	sp, #32
   1c54a:	466b      	mov	r3, sp
   1c54c:	f113 0210 	adds.w	r2, r3, #16
   1c550:	d031      	beq.n	1c5b6 <bt_att_accept+0xc2>
   1c552:	210c      	movs	r1, #12
   1c554:	b13a      	cbz	r2, 1c566 <bt_att_accept+0x72>
   1c556:	4608      	mov	r0, r1
   1c558:	2904      	cmp	r1, #4
   1c55a:	dd01      	ble.n	1c560 <bt_att_accept+0x6c>
   1c55c:	4c1c      	ldr	r4, [pc, #112]	; (1c5d0 <bt_att_accept+0xdc>)
   1c55e:	615c      	str	r4, [r3, #20]
   1c560:	2808      	cmp	r0, #8
   1c562:	dd00      	ble.n	1c566 <bt_att_accept+0x72>
   1c564:	619e      	str	r6, [r3, #24]
   1c566:	290b      	cmp	r1, #11
   1c568:	dd28      	ble.n	1c5bc <bt_att_accept+0xc8>
   1c56a:	240c      	movs	r4, #12
   1c56c:	b13a      	cbz	r2, 1c57e <bt_att_accept+0x8a>
   1c56e:	2103      	movs	r1, #3
   1c570:	7039      	strb	r1, [r7, #0]
   1c572:	2100      	movs	r1, #0
   1c574:	7079      	strb	r1, [r7, #1]
   1c576:	70b9      	strb	r1, [r7, #2]
   1c578:	70f9      	strb	r1, [r7, #3]
   1c57a:	6838      	ldr	r0, [r7, #0]
   1c57c:	6118      	str	r0, [r3, #16]
   1c57e:	2100      	movs	r1, #0
   1c580:	f36f 0100 	bfc	r1, #0, #1
   1c584:	f36f 0141 	bfc	r1, #1, #1
   1c588:	f36f 0182 	bfc	r1, #2, #1
   1c58c:	f36f 01c5 	bfc	r1, #3, #3
   1c590:	2301      	movs	r3, #1
   1c592:	f363 1188 	bfi	r1, r3, #6, #3
   1c596:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1c59a:	f364 2152 	bfi	r1, r4, #9, #10
   1c59e:	f36f 41de 	bfc	r1, #19, #12
   1c5a2:	f36f 71df 	bfc	r1, #31, #1
   1c5a6:	2300      	movs	r3, #0
   1c5a8:	480a      	ldr	r0, [pc, #40]	; (1c5d4 <bt_att_accept+0xe0>)
   1c5aa:	f7f7 fba7 	bl	13cfc <z_impl_z_log_msg_static_create>
   1c5ae:	46ad      	mov	sp, r5
		return -ENOMEM;
   1c5b0:	f06f 050b 	mvn.w	r5, #11
   1c5b4:	e7c3      	b.n	1c53e <bt_att_accept+0x4a>
		BT_ERR("No available ATT context for conn %p", conn);
   1c5b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c5ba:	e7cb      	b.n	1c554 <bt_att_accept+0x60>
   1c5bc:	f06f 041b 	mvn.w	r4, #27
   1c5c0:	e7d4      	b.n	1c56c <bt_att_accept+0x78>
		return -ENOMEM;
   1c5c2:	f06f 050b 	mvn.w	r5, #11
   1c5c6:	e7ba      	b.n	1c53e <bt_att_accept+0x4a>
   1c5c8:	200084d0 	.word	0x200084d0
   1c5cc:	20009a28 	.word	0x20009a28
   1c5d0:	00032470 	.word	0x00032470
   1c5d4:	0002f7f8 	.word	0x0002f7f8

0001c5d8 <bt_att_released>:
{
   1c5d8:	b500      	push	{lr}
   1c5da:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c5dc:	3804      	subs	r0, #4
   1c5de:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1c5e0:	a901      	add	r1, sp, #4
   1c5e2:	4803      	ldr	r0, [pc, #12]	; (1c5f0 <bt_att_released+0x18>)
   1c5e4:	f008 fba2 	bl	24d2c <k_mem_slab_free>
}
   1c5e8:	b003      	add	sp, #12
   1c5ea:	f85d fb04 	ldr.w	pc, [sp], #4
   1c5ee:	bf00      	nop
   1c5f0:	200084f0 	.word	0x200084f0

0001c5f4 <tx_meta_data_free>:
{
   1c5f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   1c5f6:	b148      	cbz	r0, 1c60c <tx_meta_data_free+0x18>
   1c5f8:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1c5fa:	2214      	movs	r2, #20
   1c5fc:	2100      	movs	r1, #0
   1c5fe:	f00e fdca 	bl	2b196 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1c602:	4621      	mov	r1, r4
   1c604:	4807      	ldr	r0, [pc, #28]	; (1c624 <tx_meta_data_free+0x30>)
   1c606:	f012 fc8c 	bl	2ef22 <k_queue_append>
}
   1c60a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(data);
   1c60c:	4c06      	ldr	r4, [pc, #24]	; (1c628 <tx_meta_data_free+0x34>)
   1c60e:	23a5      	movs	r3, #165	; 0xa5
   1c610:	4622      	mov	r2, r4
   1c612:	4906      	ldr	r1, [pc, #24]	; (1c62c <tx_meta_data_free+0x38>)
   1c614:	4806      	ldr	r0, [pc, #24]	; (1c630 <tx_meta_data_free+0x3c>)
   1c616:	f00d fa68 	bl	29aea <assert_print>
   1c61a:	21a5      	movs	r1, #165	; 0xa5
   1c61c:	4620      	mov	r0, r4
   1c61e:	f00d fa5d 	bl	29adc <assert_post_action>
   1c622:	bf00      	nop
   1c624:	200085a4 	.word	0x200085a4
   1c628:	00032384 	.word	0x00032384
   1c62c:	00031cb4 	.word	0x00031cb4
   1c630:	0002fdac 	.word	0x0002fdac

0001c634 <chan_send>:
{
   1c634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c638:	b08b      	sub	sp, #44	; 0x2c
   1c63a:	4605      	mov	r5, r0
   1c63c:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1c63e:	694f      	ldr	r7, [r1, #20]
	hdr = (void *)buf->data;
   1c640:	688e      	ldr	r6, [r1, #8]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1c642:	2102      	movs	r1, #2
   1c644:	3098      	adds	r0, #152	; 0x98
   1c646:	f00f fc98 	bl	2bf7a <atomic_test_bit>
   1c64a:	2800      	cmp	r0, #0
   1c64c:	d05a      	beq.n	1c704 <chan_send+0xd0>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1c64e:	7833      	ldrb	r3, [r6, #0]
   1c650:	2bd2      	cmp	r3, #210	; 0xd2
   1c652:	d023      	beq.n	1c69c <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   1c654:	f104 0008 	add.w	r0, r4, #8
   1c658:	f010 fe32 	bl	2d2c0 <net_buf_simple_headroom>
   1c65c:	4606      	mov	r6, r0
   1c65e:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1c662:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   1c666:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   1c66a:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1c66c:	682b      	ldr	r3, [r5, #0]
   1c66e:	681d      	ldr	r5, [r3, #0]
   1c670:	4620      	mov	r0, r4
   1c672:	f7ff fdf3 	bl	1c25c <att_cb>
   1c676:	4603      	mov	r3, r0
   1c678:	9700      	str	r7, [sp, #0]
   1c67a:	4622      	mov	r2, r4
   1c67c:	2104      	movs	r1, #4
   1c67e:	4628      	mov	r0, r5
   1c680:	f00f fb84 	bl	2bd8c <bt_l2cap_send_cb>
	if (err) {
   1c684:	4681      	mov	r9, r0
   1c686:	b128      	cbz	r0, 1c694 <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   1c688:	6923      	ldr	r3, [r4, #16]
   1c68a:	fa13 f686 	uxtah	r6, r3, r6
   1c68e:	60a6      	str	r6, [r4, #8]
	buf->len = state->len;
   1c690:	f8a4 800c 	strh.w	r8, [r4, #12]
}
   1c694:	4648      	mov	r0, r9
   1c696:	b00b      	add	sp, #44	; 0x2c
   1c698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1c69c:	682b      	ldr	r3, [r5, #0]
   1c69e:	4621      	mov	r1, r4
   1c6a0:	6818      	ldr	r0, [r3, #0]
   1c6a2:	f010 fd91 	bl	2d1c8 <bt_smp_sign>
		if (err) {
   1c6a6:	4681      	mov	r9, r0
   1c6a8:	2800      	cmp	r0, #0
   1c6aa:	d0d3      	beq.n	1c654 <chan_send+0x20>
			BT_ERR("Error signing data");
   1c6ac:	4b17      	ldr	r3, [pc, #92]	; (1c70c <chan_send+0xd8>)
   1c6ae:	9309      	str	r3, [sp, #36]	; 0x24
   1c6b0:	2302      	movs	r3, #2
   1c6b2:	f88d 3008 	strb.w	r3, [sp, #8]
   1c6b6:	2300      	movs	r3, #0
   1c6b8:	f88d 3009 	strb.w	r3, [sp, #9]
   1c6bc:	f88d 300a 	strb.w	r3, [sp, #10]
   1c6c0:	f88d 300b 	strb.w	r3, [sp, #11]
   1c6c4:	9a02      	ldr	r2, [sp, #8]
   1c6c6:	9208      	str	r2, [sp, #32]
   1c6c8:	4619      	mov	r1, r3
   1c6ca:	f363 0100 	bfi	r1, r3, #0, #1
   1c6ce:	f363 0141 	bfi	r1, r3, #1, #1
   1c6d2:	f363 0182 	bfi	r1, r3, #2, #1
   1c6d6:	f363 01c5 	bfi	r1, r3, #3, #3
   1c6da:	2201      	movs	r2, #1
   1c6dc:	f362 1188 	bfi	r1, r2, #6, #3
   1c6e0:	2208      	movs	r2, #8
   1c6e2:	f362 2152 	bfi	r1, r2, #9, #10
   1c6e6:	f363 41de 	bfi	r1, r3, #19, #12
   1c6ea:	f363 71df 	bfi	r1, r3, #31, #1
   1c6ee:	aa08      	add	r2, sp, #32
   1c6f0:	4807      	ldr	r0, [pc, #28]	; (1c710 <chan_send+0xdc>)
   1c6f2:	f7f7 fb03 	bl	13cfc <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1c6f6:	6960      	ldr	r0, [r4, #20]
   1c6f8:	f7ff ff7c 	bl	1c5f4 <tx_meta_data_free>
			net_buf_unref(buf);
   1c6fc:	4620      	mov	r0, r4
   1c6fe:	f002 fee1 	bl	1f4c4 <net_buf_unref>
			return err;
   1c702:	e7c7      	b.n	1c694 <chan_send+0x60>
		return -EINVAL;
   1c704:	f06f 0915 	mvn.w	r9, #21
   1c708:	e7c4      	b.n	1c694 <chan_send+0x60>
   1c70a:	bf00      	nop
   1c70c:	00032498 	.word	0x00032498
   1c710:	0002f7f8 	.word	0x0002f7f8

0001c714 <bt_att_chan_req_send>:
{
   1c714:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan);
   1c716:	b140      	cbz	r0, 1c72a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req);
   1c718:	b1a1      	cbz	r1, 1c744 <bt_att_chan_req_send+0x30>
	__ASSERT_NO_MSG(req->func);
   1c71a:	684a      	ldr	r2, [r1, #4]
   1c71c:	b1fa      	cbz	r2, 1c75e <bt_att_chan_req_send+0x4a>
	__ASSERT_NO_MSG(!chan->req);
   1c71e:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
   1c722:	bb4a      	cbnz	r2, 1c778 <bt_att_chan_req_send+0x64>
	return chan_req_send(chan, req);
   1c724:	f00f fc64 	bl	2bff0 <chan_req_send>
}
   1c728:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(chan);
   1c72a:	4c1a      	ldr	r4, [pc, #104]	; (1c794 <bt_att_chan_req_send+0x80>)
   1c72c:	f44f 7346 	mov.w	r3, #792	; 0x318
   1c730:	4622      	mov	r2, r4
   1c732:	4919      	ldr	r1, [pc, #100]	; (1c798 <bt_att_chan_req_send+0x84>)
   1c734:	4819      	ldr	r0, [pc, #100]	; (1c79c <bt_att_chan_req_send+0x88>)
   1c736:	f00d f9d8 	bl	29aea <assert_print>
   1c73a:	f44f 7146 	mov.w	r1, #792	; 0x318
   1c73e:	4620      	mov	r0, r4
   1c740:	f00d f9cc 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(req);
   1c744:	4c13      	ldr	r4, [pc, #76]	; (1c794 <bt_att_chan_req_send+0x80>)
   1c746:	f240 3319 	movw	r3, #793	; 0x319
   1c74a:	4622      	mov	r2, r4
   1c74c:	4914      	ldr	r1, [pc, #80]	; (1c7a0 <bt_att_chan_req_send+0x8c>)
   1c74e:	4813      	ldr	r0, [pc, #76]	; (1c79c <bt_att_chan_req_send+0x88>)
   1c750:	f00d f9cb 	bl	29aea <assert_print>
   1c754:	f240 3119 	movw	r1, #793	; 0x319
   1c758:	4620      	mov	r0, r4
   1c75a:	f00d f9bf 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1c75e:	4c0d      	ldr	r4, [pc, #52]	; (1c794 <bt_att_chan_req_send+0x80>)
   1c760:	f240 331a 	movw	r3, #794	; 0x31a
   1c764:	4622      	mov	r2, r4
   1c766:	490f      	ldr	r1, [pc, #60]	; (1c7a4 <bt_att_chan_req_send+0x90>)
   1c768:	480c      	ldr	r0, [pc, #48]	; (1c79c <bt_att_chan_req_send+0x88>)
   1c76a:	f00d f9be 	bl	29aea <assert_print>
   1c76e:	f240 311a 	movw	r1, #794	; 0x31a
   1c772:	4620      	mov	r0, r4
   1c774:	f00d f9b2 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1c778:	4c06      	ldr	r4, [pc, #24]	; (1c794 <bt_att_chan_req_send+0x80>)
   1c77a:	f240 331b 	movw	r3, #795	; 0x31b
   1c77e:	4622      	mov	r2, r4
   1c780:	4909      	ldr	r1, [pc, #36]	; (1c7a8 <bt_att_chan_req_send+0x94>)
   1c782:	4806      	ldr	r0, [pc, #24]	; (1c79c <bt_att_chan_req_send+0x88>)
   1c784:	f00d f9b1 	bl	29aea <assert_print>
   1c788:	f240 311b 	movw	r1, #795	; 0x31b
   1c78c:	4620      	mov	r0, r4
   1c78e:	f00d f9a5 	bl	29adc <assert_post_action>
   1c792:	bf00      	nop
   1c794:	00032384 	.word	0x00032384
   1c798:	000324ac 	.word	0x000324ac
   1c79c:	0002fdac 	.word	0x0002fdac
   1c7a0:	000324b4 	.word	0x000324b4
   1c7a4:	000324b8 	.word	0x000324b8
   1c7a8:	000324c4 	.word	0x000324c4

0001c7ac <read_group_cb>:
{
   1c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7ae:	b085      	sub	sp, #20
   1c7b0:	4605      	mov	r5, r0
   1c7b2:	460e      	mov	r6, r1
   1c7b4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c7b6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c7b8:	2300      	movs	r3, #0
   1c7ba:	f88d 3008 	strb.w	r3, [sp, #8]
   1c7be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c7c2:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c7c6:	a902      	add	r1, sp, #8
   1c7c8:	6800      	ldr	r0, [r0, #0]
   1c7ca:	f00e fd18 	bl	2b1fe <bt_uuid_cmp>
   1c7ce:	b158      	cbz	r0, 1c7e8 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c7d0:	2300      	movs	r3, #0
   1c7d2:	f88d 300c 	strb.w	r3, [sp, #12]
   1c7d6:	f642 0301 	movw	r3, #10241	; 0x2801
   1c7da:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c7de:	a903      	add	r1, sp, #12
   1c7e0:	6828      	ldr	r0, [r5, #0]
   1c7e2:	f00e fd0c 	bl	2b1fe <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c7e6:	bb28      	cbnz	r0, 1c834 <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c7e8:	6861      	ldr	r1, [r4, #4]
   1c7ea:	6828      	ldr	r0, [r5, #0]
   1c7ec:	f00e fd07 	bl	2b1fe <bt_uuid_cmp>
   1c7f0:	bb40      	cbnz	r0, 1c844 <read_group_cb+0x98>
	if (data->rsp->len &&
   1c7f2:	68e3      	ldr	r3, [r4, #12]
   1c7f4:	781a      	ldrb	r2, [r3, #0]
   1c7f6:	b12a      	cbz	r2, 1c804 <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1c7f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1c7fa:	68a1      	ldr	r1, [r4, #8]
   1c7fc:	8989      	ldrh	r1, [r1, #12]
   1c7fe:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1c800:	4293      	cmp	r3, r2
   1c802:	db24      	blt.n	1c84e <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1c804:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1c806:	2104      	movs	r1, #4
   1c808:	3008      	adds	r0, #8
   1c80a:	f002 ff79 	bl	1f700 <net_buf_simple_add>
   1c80e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c810:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c812:	6923      	ldr	r3, [r4, #16]
   1c814:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1c816:	9401      	str	r4, [sp, #4]
   1c818:	4b10      	ldr	r3, [pc, #64]	; (1c85c <read_group_cb+0xb0>)
   1c81a:	9300      	str	r3, [sp, #0]
   1c81c:	2300      	movs	r3, #0
   1c81e:	68a2      	ldr	r2, [r4, #8]
   1c820:	4629      	mov	r1, r5
   1c822:	4638      	mov	r0, r7
   1c824:	f00f fd78 	bl	2c318 <att_chan_read>
	if (read < 0) {
   1c828:	2800      	cmp	r0, #0
   1c82a:	db12      	blt.n	1c852 <read_group_cb+0xa6>
	if (!data->group) {
   1c82c:	6923      	ldr	r3, [r4, #16]
   1c82e:	b193      	cbz	r3, 1c856 <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1c830:	2001      	movs	r0, #1
   1c832:	e00a      	b.n	1c84a <read_group_cb+0x9e>
		if (data->group &&
   1c834:	6923      	ldr	r3, [r4, #16]
   1c836:	b11b      	cbz	r3, 1c840 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1c838:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1c83a:	42b2      	cmp	r2, r6
   1c83c:	d200      	bcs.n	1c840 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c83e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1c840:	2001      	movs	r0, #1
   1c842:	e002      	b.n	1c84a <read_group_cb+0x9e>
		data->group = NULL;
   1c844:	2300      	movs	r3, #0
   1c846:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1c848:	2001      	movs	r0, #1
}
   1c84a:	b005      	add	sp, #20
   1c84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1c84e:	2000      	movs	r0, #0
   1c850:	e7fb      	b.n	1c84a <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1c852:	2000      	movs	r0, #0
   1c854:	e7f9      	b.n	1c84a <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1c856:	2000      	movs	r0, #0
   1c858:	e7f7      	b.n	1c84a <read_group_cb+0x9e>
   1c85a:	bf00      	nop
   1c85c:	0002bf4d 	.word	0x0002bf4d

0001c860 <read_type_cb>:
{
   1c860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c864:	b083      	sub	sp, #12
   1c866:	4606      	mov	r6, r0
   1c868:	4688      	mov	r8, r1
   1c86a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c86c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c86e:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c870:	6851      	ldr	r1, [r2, #4]
   1c872:	6800      	ldr	r0, [r0, #0]
   1c874:	f00e fcc3 	bl	2b1fe <bt_uuid_cmp>
   1c878:	b120      	cbz	r0, 1c884 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1c87a:	2501      	movs	r5, #1
}
   1c87c:	4628      	mov	r0, r5
   1c87e:	b003      	add	sp, #12
   1c880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c884:	2295      	movs	r2, #149	; 0x95
   1c886:	4631      	mov	r1, r6
   1c888:	4628      	mov	r0, r5
   1c88a:	f010 fbf5 	bl	2d078 <bt_gatt_check_perm>
   1c88e:	4605      	mov	r5, r0
   1c890:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c892:	b130      	cbz	r0, 1c8a2 <read_type_cb+0x42>
		if (data->rsp->len) {
   1c894:	68e3      	ldr	r3, [r4, #12]
   1c896:	781b      	ldrb	r3, [r3, #0]
   1c898:	b10b      	cbz	r3, 1c89e <read_type_cb+0x3e>
			data->err = 0x00;
   1c89a:	2300      	movs	r3, #0
   1c89c:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c89e:	2500      	movs	r5, #0
   1c8a0:	e7ec      	b.n	1c87c <read_type_cb+0x1c>
	data->err = 0x00;
   1c8a2:	f04f 0900 	mov.w	r9, #0
   1c8a6:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1c8aa:	68a0      	ldr	r0, [r4, #8]
   1c8ac:	f002 fe5a 	bl	1f564 <net_buf_frag_last>
   1c8b0:	2102      	movs	r1, #2
   1c8b2:	3008      	adds	r0, #8
   1c8b4:	f002 ff24 	bl	1f700 <net_buf_simple_add>
   1c8b8:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1c8ba:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1c8be:	9401      	str	r4, [sp, #4]
   1c8c0:	4b10      	ldr	r3, [pc, #64]	; (1c904 <read_type_cb+0xa4>)
   1c8c2:	9300      	str	r3, [sp, #0]
   1c8c4:	464b      	mov	r3, r9
   1c8c6:	68a2      	ldr	r2, [r4, #8]
   1c8c8:	4631      	mov	r1, r6
   1c8ca:	4638      	mov	r0, r7
   1c8cc:	f00f fd24 	bl	2c318 <att_chan_read>
	if (read < 0) {
   1c8d0:	2800      	cmp	r0, #0
   1c8d2:	db06      	blt.n	1c8e2 <read_type_cb+0x82>
	if (!data->item) {
   1c8d4:	6923      	ldr	r3, [r4, #16]
   1c8d6:	2b00      	cmp	r3, #0
   1c8d8:	d0d0      	beq.n	1c87c <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1c8da:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1c8dc:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1c8de:	2200      	movs	r2, #0

	while (buf) {
   1c8e0:	e006      	b.n	1c8f0 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1c8e2:	f00f fb17 	bl	2bf14 <err_to_att>
   1c8e6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c8e8:	e7c8      	b.n	1c87c <read_type_cb+0x1c>
		bytes += buf->len;
   1c8ea:	8999      	ldrh	r1, [r3, #12]
   1c8ec:	440a      	add	r2, r1
		buf = buf->frags;
   1c8ee:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c8f0:	2b00      	cmp	r3, #0
   1c8f2:	d1fa      	bne.n	1c8ea <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1c8f4:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1c8f6:	68e3      	ldr	r3, [r4, #12]
   1c8f8:	781b      	ldrb	r3, [r3, #0]
   1c8fa:	429d      	cmp	r5, r3
   1c8fc:	bf94      	ite	ls
   1c8fe:	2500      	movls	r5, #0
   1c900:	2501      	movhi	r5, #1
   1c902:	e7bb      	b.n	1c87c <read_type_cb+0x1c>
   1c904:	0002bf25 	.word	0x0002bf25

0001c908 <find_type_cb>:
{
   1c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c90c:	b097      	sub	sp, #92	; 0x5c
   1c90e:	af02      	add	r7, sp, #8
   1c910:	4605      	mov	r5, r0
   1c912:	460e      	mov	r6, r1
   1c914:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c916:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c91a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c91e:	2300      	movs	r3, #0
   1c920:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   1c924:	f642 0301 	movw	r3, #10241	; 0x2801
   1c928:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   1c92c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1c930:	6800      	ldr	r0, [r0, #0]
   1c932:	f00e fc64 	bl	2b1fe <bt_uuid_cmp>
   1c936:	b930      	cbnz	r0, 1c946 <find_type_cb+0x3e>
	data->group = NULL;
   1c938:	2300      	movs	r3, #0
   1c93a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1c93c:	2001      	movs	r0, #1
}
   1c93e:	3754      	adds	r7, #84	; 0x54
   1c940:	46bd      	mov	sp, r7
   1c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1c946:	2300      	movs	r3, #0
   1c948:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   1c94c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c950:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   1c954:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1c958:	6828      	ldr	r0, [r5, #0]
   1c95a:	f00e fc50 	bl	2b1fe <bt_uuid_cmp>
   1c95e:	b928      	cbnz	r0, 1c96c <find_type_cb+0x64>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c960:	f8b8 c02a 	ldrh.w	ip, [r8, #42]	; 0x2a
   1c964:	6860      	ldr	r0, [r4, #4]
   1c966:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c968:	2200      	movs	r2, #0
	while (buf) {
   1c96a:	e00a      	b.n	1c982 <find_type_cb+0x7a>
		if (data->group &&
   1c96c:	68a3      	ldr	r3, [r4, #8]
   1c96e:	b11b      	cbz	r3, 1c978 <find_type_cb+0x70>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1c970:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1c972:	42b2      	cmp	r2, r6
   1c974:	d200      	bcs.n	1c978 <find_type_cb+0x70>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c976:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1c978:	2001      	movs	r0, #1
   1c97a:	e7e0      	b.n	1c93e <find_type_cb+0x36>
		bytes += buf->len;
   1c97c:	8999      	ldrh	r1, [r3, #12]
   1c97e:	440a      	add	r2, r1
		buf = buf->frags;
   1c980:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c982:	2b00      	cmp	r3, #0
   1c984:	d1fa      	bne.n	1c97c <find_type_cb+0x74>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c986:	ebac 0302 	sub.w	r3, ip, r2
   1c98a:	2b03      	cmp	r3, #3
   1c98c:	d801      	bhi.n	1c992 <find_type_cb+0x8a>
		return BT_GATT_ITER_STOP;
   1c98e:	2000      	movs	r0, #0
   1c990:	e7d5      	b.n	1c93e <find_type_cb+0x36>
	frag = net_buf_frag_last(data->buf);
   1c992:	f002 fde7 	bl	1f564 <net_buf_frag_last>
   1c996:	6078      	str	r0, [r7, #4]
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1c998:	f8b8 a02a 	ldrh.w	sl, [r8, #42]	; 0x2a
   1c99c:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1c99e:	2200      	movs	r2, #0
	while (buf) {
   1c9a0:	e002      	b.n	1c9a8 <find_type_cb+0xa0>
		bytes += buf->len;
   1c9a2:	8999      	ldrh	r1, [r3, #12]
   1c9a4:	440a      	add	r2, r1
		buf = buf->frags;
   1c9a6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c9a8:	2b00      	cmp	r3, #0
   1c9aa:	d1fa      	bne.n	1c9a2 <find_type_cb+0x9a>
   1c9ac:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1c9b0:	687b      	ldr	r3, [r7, #4]
   1c9b2:	f103 0b08 	add.w	fp, r3, #8
   1c9b6:	4658      	mov	r0, fp
   1c9b8:	f010 fc8d 	bl	2d2d6 <net_buf_simple_tailroom>
   1c9bc:	4582      	cmp	sl, r0
   1c9be:	d25c      	bcs.n	1ca7a <find_type_cb+0x172>
   1c9c0:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   1c9c4:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1c9c6:	2200      	movs	r2, #0
	while (buf) {
   1c9c8:	e002      	b.n	1c9d0 <find_type_cb+0xc8>
		bytes += buf->len;
   1c9ca:	8999      	ldrh	r1, [r3, #12]
   1c9cc:	440a      	add	r2, r1
		buf = buf->frags;
   1c9ce:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c9d0:	2b00      	cmp	r3, #0
   1c9d2:	d1fa      	bne.n	1c9ca <find_type_cb+0xc2>
   1c9d4:	1a80      	subs	r0, r0, r2
	if (!len) {
   1c9d6:	2800      	cmp	r0, #0
   1c9d8:	d053      	beq.n	1ca82 <find_type_cb+0x17a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1c9da:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1c9de:	2300      	movs	r3, #0
   1c9e0:	9300      	str	r3, [sp, #0]
   1c9e2:	2310      	movs	r3, #16
   1c9e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1c9e8:	4629      	mov	r1, r5
   1c9ea:	4648      	mov	r0, r9
   1c9ec:	47c0      	blx	r8
	if (read < 0) {
   1c9ee:	1e05      	subs	r5, r0, #0
   1c9f0:	dba2      	blt.n	1c938 <find_type_cb+0x30>
	if (read != data->value_len) {
   1c9f2:	7c22      	ldrb	r2, [r4, #16]
   1c9f4:	42aa      	cmp	r2, r5
   1c9f6:	f000 80aa 	beq.w	1cb4e <find_type_cb+0x246>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1c9fa:	68e1      	ldr	r1, [r4, #12]
   1c9fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1ca00:	f00e fc1b 	bl	2b23a <bt_uuid_create>
   1ca04:	2800      	cmp	r0, #0
   1ca06:	d153      	bne.n	1cab0 <find_type_cb+0x1a8>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1ca08:	7c20      	ldrb	r0, [r4, #16]
   1ca0a:	466e      	mov	r6, sp
   1ca0c:	b088      	sub	sp, #32
   1ca0e:	ab02      	add	r3, sp, #8
   1ca10:	f113 0210 	adds.w	r2, r3, #16
   1ca14:	d046      	beq.n	1caa4 <find_type_cb+0x19c>
   1ca16:	210c      	movs	r1, #12
   1ca18:	b14a      	cbz	r2, 1ca2e <find_type_cb+0x126>
   1ca1a:	460d      	mov	r5, r1
   1ca1c:	2904      	cmp	r1, #4
   1ca1e:	dd03      	ble.n	1ca28 <find_type_cb+0x120>
   1ca20:	f8df c158 	ldr.w	ip, [pc, #344]	; 1cb7c <find_type_cb+0x274>
   1ca24:	f8c3 c014 	str.w	ip, [r3, #20]
   1ca28:	2d08      	cmp	r5, #8
   1ca2a:	dd00      	ble.n	1ca2e <find_type_cb+0x126>
   1ca2c:	6198      	str	r0, [r3, #24]
   1ca2e:	290b      	cmp	r1, #11
   1ca30:	dd3b      	ble.n	1caaa <find_type_cb+0x1a2>
   1ca32:	250c      	movs	r5, #12
   1ca34:	b13a      	cbz	r2, 1ca46 <find_type_cb+0x13e>
   1ca36:	2103      	movs	r1, #3
   1ca38:	7439      	strb	r1, [r7, #16]
   1ca3a:	2100      	movs	r1, #0
   1ca3c:	7479      	strb	r1, [r7, #17]
   1ca3e:	74b9      	strb	r1, [r7, #18]
   1ca40:	74f9      	strb	r1, [r7, #19]
   1ca42:	6938      	ldr	r0, [r7, #16]
   1ca44:	6118      	str	r0, [r3, #16]
   1ca46:	2100      	movs	r1, #0
   1ca48:	f36f 0100 	bfc	r1, #0, #1
   1ca4c:	f36f 0141 	bfc	r1, #1, #1
   1ca50:	f36f 0182 	bfc	r1, #2, #1
   1ca54:	f36f 01c5 	bfc	r1, #3, #3
   1ca58:	2302      	movs	r3, #2
   1ca5a:	f363 1188 	bfi	r1, r3, #6, #3
   1ca5e:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1ca62:	f365 2152 	bfi	r1, r5, #9, #10
   1ca66:	f36f 41de 	bfc	r1, #19, #12
   1ca6a:	f36f 71df 	bfc	r1, #31, #1
   1ca6e:	2300      	movs	r3, #0
   1ca70:	4843      	ldr	r0, [pc, #268]	; (1cb80 <find_type_cb+0x278>)
   1ca72:	f7f7 f943 	bl	13cfc <z_impl_z_log_msg_static_create>
   1ca76:	46b5      	mov	sp, r6
			goto skip;
   1ca78:	e75e      	b.n	1c938 <find_type_cb+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1ca7a:	4658      	mov	r0, fp
   1ca7c:	f010 fc2b 	bl	2d2d6 <net_buf_simple_tailroom>
   1ca80:	e7a9      	b.n	1c9d6 <find_type_cb+0xce>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1ca82:	6863      	ldr	r3, [r4, #4]
   1ca84:	7998      	ldrb	r0, [r3, #6]
   1ca86:	f002 fa53 	bl	1ef30 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ca8a:	2200      	movs	r2, #0
   1ca8c:	2300      	movs	r3, #0
   1ca8e:	f010 fc08 	bl	2d2a2 <net_buf_alloc_fixed>
		if (!frag) {
   1ca92:	6078      	str	r0, [r7, #4]
   1ca94:	2800      	cmp	r0, #0
   1ca96:	f43f af52 	beq.w	1c93e <find_type_cb+0x36>
		net_buf_frag_add(data->buf, frag);
   1ca9a:	6879      	ldr	r1, [r7, #4]
   1ca9c:	6860      	ldr	r0, [r4, #4]
   1ca9e:	f002 fdad 	bl	1f5fc <net_buf_frag_add>
   1caa2:	e79a      	b.n	1c9da <find_type_cb+0xd2>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1caa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1caa8:	e7b6      	b.n	1ca18 <find_type_cb+0x110>
   1caaa:	f06f 051b 	mvn.w	r5, #27
   1caae:	e7c1      	b.n	1ca34 <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1cab0:	b2ea      	uxtb	r2, r5
   1cab2:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1cab6:	f107 0010 	add.w	r0, r7, #16
   1caba:	f00e fbbe 	bl	2b23a <bt_uuid_create>
   1cabe:	2800      	cmp	r0, #0
   1cac0:	d13d      	bne.n	1cb3e <find_type_cb+0x236>
			BT_WARN("Unable to create UUID: size %d", read);
   1cac2:	466e      	mov	r6, sp
   1cac4:	b088      	sub	sp, #32
   1cac6:	ab02      	add	r3, sp, #8
   1cac8:	f113 0210 	adds.w	r2, r3, #16
   1cacc:	d031      	beq.n	1cb32 <find_type_cb+0x22a>
   1cace:	210c      	movs	r1, #12
   1cad0:	b14a      	cbz	r2, 1cae6 <find_type_cb+0x1de>
   1cad2:	4608      	mov	r0, r1
   1cad4:	2904      	cmp	r1, #4
   1cad6:	dd03      	ble.n	1cae0 <find_type_cb+0x1d8>
   1cad8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 1cb84 <find_type_cb+0x27c>
   1cadc:	f8c3 c014 	str.w	ip, [r3, #20]
   1cae0:	2808      	cmp	r0, #8
   1cae2:	dd00      	ble.n	1cae6 <find_type_cb+0x1de>
   1cae4:	619d      	str	r5, [r3, #24]
   1cae6:	290b      	cmp	r1, #11
   1cae8:	dd26      	ble.n	1cb38 <find_type_cb+0x230>
   1caea:	250c      	movs	r5, #12
   1caec:	b13a      	cbz	r2, 1cafe <find_type_cb+0x1f6>
   1caee:	2103      	movs	r1, #3
   1caf0:	7339      	strb	r1, [r7, #12]
   1caf2:	2100      	movs	r1, #0
   1caf4:	7379      	strb	r1, [r7, #13]
   1caf6:	73b9      	strb	r1, [r7, #14]
   1caf8:	73f9      	strb	r1, [r7, #15]
   1cafa:	68f8      	ldr	r0, [r7, #12]
   1cafc:	6118      	str	r0, [r3, #16]
   1cafe:	2100      	movs	r1, #0
   1cb00:	f36f 0100 	bfc	r1, #0, #1
   1cb04:	f36f 0141 	bfc	r1, #1, #1
   1cb08:	f36f 0182 	bfc	r1, #2, #1
   1cb0c:	f36f 01c5 	bfc	r1, #3, #3
   1cb10:	2302      	movs	r3, #2
   1cb12:	f363 1188 	bfi	r1, r3, #6, #3
   1cb16:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1cb1a:	f363 2152 	bfi	r1, r3, #9, #10
   1cb1e:	f36f 41de 	bfc	r1, #19, #12
   1cb22:	f36f 71df 	bfc	r1, #31, #1
   1cb26:	2300      	movs	r3, #0
   1cb28:	4815      	ldr	r0, [pc, #84]	; (1cb80 <find_type_cb+0x278>)
   1cb2a:	f7f7 f8e7 	bl	13cfc <z_impl_z_log_msg_static_create>
   1cb2e:	46b5      	mov	sp, r6
			goto skip;
   1cb30:	e702      	b.n	1c938 <find_type_cb+0x30>
			BT_WARN("Unable to create UUID: size %d", read);
   1cb32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cb36:	e7cb      	b.n	1cad0 <find_type_cb+0x1c8>
   1cb38:	f06f 051b 	mvn.w	r5, #27
   1cb3c:	e7d6      	b.n	1caec <find_type_cb+0x1e4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1cb3e:	f107 0110 	add.w	r1, r7, #16
   1cb42:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1cb46:	f00e fb5a 	bl	2b1fe <bt_uuid_cmp>
   1cb4a:	b148      	cbz	r0, 1cb60 <find_type_cb+0x258>
   1cb4c:	e6f4      	b.n	1c938 <find_type_cb+0x30>
	} else if (memcmp(data->value, uuid, read)) {
   1cb4e:	462a      	mov	r2, r5
   1cb50:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1cb54:	68e0      	ldr	r0, [r4, #12]
   1cb56:	f00e fadd 	bl	2b114 <memcmp>
   1cb5a:	2800      	cmp	r0, #0
   1cb5c:	f47f aeec 	bne.w	1c938 <find_type_cb+0x30>
	data->err = 0x00;
   1cb60:	2300      	movs	r3, #0
   1cb62:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1cb64:	2104      	movs	r1, #4
   1cb66:	6878      	ldr	r0, [r7, #4]
   1cb68:	3008      	adds	r0, #8
   1cb6a:	f002 fdc9 	bl	1f700 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1cb6e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1cb70:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cb72:	68a3      	ldr	r3, [r4, #8]
   1cb74:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1cb76:	2001      	movs	r0, #1
   1cb78:	e6e1      	b.n	1c93e <find_type_cb+0x36>
   1cb7a:	bf00      	nop
   1cb7c:	000324d0 	.word	0x000324d0
   1cb80:	0002f7f8 	.word	0x0002f7f8
   1cb84:	000324f0 	.word	0x000324f0

0001cb88 <bt_att_connected>:
{
   1cb88:	b510      	push	{r4, lr}
   1cb8a:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1cb8c:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1cb8e:	f104 0394 	add.w	r3, r4, #148	; 0x94
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cb92:	e8d3 1fef 	ldaex	r1, [r3]
   1cb96:	f041 0104 	orr.w	r1, r1, #4
   1cb9a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cb9e:	2a00      	cmp	r2, #0
   1cba0:	d1f7      	bne.n	1cb92 <bt_att_connected+0xa>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1cba2:	2317      	movs	r3, #23
   1cba4:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1cba6:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1cba8:	f00f fd13 	bl	2c5d2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1cbac:	4904      	ldr	r1, [pc, #16]	; (1cbc0 <bt_att_connected+0x38>)
   1cbae:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1cbb2:	f009 fb6f 	bl	26294 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1cbb6:	6820      	ldr	r0, [r4, #0]
   1cbb8:	f002 f906 	bl	1edc8 <bt_gatt_connected>
}
   1cbbc:	bd10      	pop	{r4, pc}
   1cbbe:	bf00      	nop
   1cbc0:	0001d83d 	.word	0x0001d83d

0001cbc4 <bt_att_chan_create_pdu>:
{
   1cbc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cbc8:	b089      	sub	sp, #36	; 0x24
   1cbca:	af00      	add	r7, sp, #0
   1cbcc:	460c      	mov	r4, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1cbce:	1c53      	adds	r3, r2, #1
   1cbd0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1cbd2:	428b      	cmp	r3, r1
   1cbd4:	d80b      	bhi.n	1cbee <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1cbd6:	4620      	mov	r0, r4
   1cbd8:	f7ff faee 	bl	1c1b8 <att_op_get_type>
   1cbdc:	2802      	cmp	r0, #2
   1cbde:	d04b      	beq.n	1cc78 <bt_att_chan_create_pdu+0xb4>
   1cbe0:	2804      	cmp	r0, #4
   1cbe2:	d049      	beq.n	1cc78 <bt_att_chan_create_pdu+0xb4>
		timeout = K_FOREVER;
   1cbe4:	f04f 38ff 	mov.w	r8, #4294967295
   1cbe8:	f04f 39ff 	mov.w	r9, #4294967295
   1cbec:	e048      	b.n	1cc80 <bt_att_chan_create_pdu+0xbc>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1cbee:	466d      	mov	r5, sp
   1cbf0:	b088      	sub	sp, #32
   1cbf2:	466c      	mov	r4, sp
   1cbf4:	f114 0210 	adds.w	r2, r4, #16
   1cbf8:	d012      	beq.n	1cc20 <bt_att_chan_create_pdu+0x5c>
   1cbfa:	2010      	movs	r0, #16
   1cbfc:	b162      	cbz	r2, 1cc18 <bt_att_chan_create_pdu+0x54>
   1cbfe:	4606      	mov	r6, r0
   1cc00:	2804      	cmp	r0, #4
   1cc02:	dd03      	ble.n	1cc0c <bt_att_chan_create_pdu+0x48>
   1cc04:	f8df c17c 	ldr.w	ip, [pc, #380]	; 1cd84 <bt_att_chan_create_pdu+0x1c0>
   1cc08:	f8c4 c014 	str.w	ip, [r4, #20]
   1cc0c:	2e08      	cmp	r6, #8
   1cc0e:	dd00      	ble.n	1cc12 <bt_att_chan_create_pdu+0x4e>
   1cc10:	61a1      	str	r1, [r4, #24]
   1cc12:	2e0c      	cmp	r6, #12
   1cc14:	dd07      	ble.n	1cc26 <bt_att_chan_create_pdu+0x62>
   1cc16:	61e3      	str	r3, [r4, #28]
   1cc18:	280f      	cmp	r0, #15
   1cc1a:	dd2a      	ble.n	1cc72 <bt_att_chan_create_pdu+0xae>
   1cc1c:	2310      	movs	r3, #16
   1cc1e:	e004      	b.n	1cc2a <bt_att_chan_create_pdu+0x66>
   1cc20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1cc24:	e7ea      	b.n	1cbfc <bt_att_chan_create_pdu+0x38>
   1cc26:	f06f 031b 	mvn.w	r3, #27
   1cc2a:	b13a      	cbz	r2, 1cc3c <bt_att_chan_create_pdu+0x78>
   1cc2c:	2104      	movs	r1, #4
   1cc2e:	7139      	strb	r1, [r7, #4]
   1cc30:	2100      	movs	r1, #0
   1cc32:	7179      	strb	r1, [r7, #5]
   1cc34:	71b9      	strb	r1, [r7, #6]
   1cc36:	71f9      	strb	r1, [r7, #7]
   1cc38:	6878      	ldr	r0, [r7, #4]
   1cc3a:	6120      	str	r0, [r4, #16]
   1cc3c:	2100      	movs	r1, #0
   1cc3e:	f36f 0100 	bfc	r1, #0, #1
   1cc42:	f36f 0141 	bfc	r1, #1, #1
   1cc46:	f36f 0182 	bfc	r1, #2, #1
   1cc4a:	f36f 01c5 	bfc	r1, #3, #3
   1cc4e:	2002      	movs	r0, #2
   1cc50:	f360 1188 	bfi	r1, r0, #6, #3
   1cc54:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1cc58:	f363 2152 	bfi	r1, r3, #9, #10
   1cc5c:	f36f 41de 	bfc	r1, #19, #12
   1cc60:	f36f 71df 	bfc	r1, #31, #1
   1cc64:	2300      	movs	r3, #0
   1cc66:	4848      	ldr	r0, [pc, #288]	; (1cd88 <bt_att_chan_create_pdu+0x1c4>)
   1cc68:	f7f7 f848 	bl	13cfc <z_impl_z_log_msg_static_create>
   1cc6c:	46ad      	mov	sp, r5
		return NULL;
   1cc6e:	2500      	movs	r5, #0
   1cc70:	e01c      	b.n	1ccac <bt_att_chan_create_pdu+0xe8>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1cc72:	f06f 031b 	mvn.w	r3, #27
   1cc76:	e7d8      	b.n	1cc2a <bt_att_chan_create_pdu+0x66>
		timeout = BT_ATT_TIMEOUT;
   1cc78:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1cc7c:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1cc80:	4642      	mov	r2, r8
   1cc82:	464b      	mov	r3, r9
   1cc84:	2100      	movs	r1, #0
   1cc86:	4608      	mov	r0, r1
   1cc88:	f00f f87b 	bl	2bd82 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1cc8c:	4605      	mov	r5, r0
   1cc8e:	b190      	cbz	r0, 1ccb6 <bt_att_chan_create_pdu+0xf2>
	data = tx_meta_data_alloc(timeout);
   1cc90:	4640      	mov	r0, r8
   1cc92:	4649      	mov	r1, r9
   1cc94:	f7ff fb18 	bl	1c2c8 <tx_meta_data_alloc>
	if (!data) {
   1cc98:	4606      	mov	r6, r0
   1cc9a:	2800      	cmp	r0, #0
   1cc9c:	d04c      	beq.n	1cd38 <bt_att_chan_create_pdu+0x174>
	bt_att_tx_meta_data(buf) = data;
   1cc9e:	6168      	str	r0, [r5, #20]
   1cca0:	2101      	movs	r1, #1
   1cca2:	f105 0008 	add.w	r0, r5, #8
   1cca6:	f002 fd2b 	bl	1f700 <net_buf_simple_add>
	hdr->code = op;
   1ccaa:	7004      	strb	r4, [r0, #0]
}
   1ccac:	4628      	mov	r0, r5
   1ccae:	3724      	adds	r7, #36	; 0x24
   1ccb0:	46bd      	mov	sp, r7
   1ccb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1ccb6:	466e      	mov	r6, sp
   1ccb8:	b088      	sub	sp, #32
   1ccba:	466b      	mov	r3, sp
   1ccbc:	f113 0210 	adds.w	r2, r3, #16
   1ccc0:	d00f      	beq.n	1cce2 <bt_att_chan_create_pdu+0x11e>
   1ccc2:	210c      	movs	r1, #12
   1ccc4:	b14a      	cbz	r2, 1ccda <bt_att_chan_create_pdu+0x116>
   1ccc6:	4608      	mov	r0, r1
   1ccc8:	2904      	cmp	r1, #4
   1ccca:	dd03      	ble.n	1ccd4 <bt_att_chan_create_pdu+0x110>
   1cccc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1cd8c <bt_att_chan_create_pdu+0x1c8>
   1ccd0:	f8c3 c014 	str.w	ip, [r3, #20]
   1ccd4:	2808      	cmp	r0, #8
   1ccd6:	dd07      	ble.n	1cce8 <bt_att_chan_create_pdu+0x124>
   1ccd8:	619c      	str	r4, [r3, #24]
   1ccda:	290b      	cmp	r1, #11
   1ccdc:	dd29      	ble.n	1cd32 <bt_att_chan_create_pdu+0x16e>
   1ccde:	240c      	movs	r4, #12
   1cce0:	e004      	b.n	1ccec <bt_att_chan_create_pdu+0x128>
   1cce2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cce6:	e7ed      	b.n	1ccc4 <bt_att_chan_create_pdu+0x100>
   1cce8:	f06f 041b 	mvn.w	r4, #27
   1ccec:	b13a      	cbz	r2, 1ccfe <bt_att_chan_create_pdu+0x13a>
   1ccee:	2103      	movs	r1, #3
   1ccf0:	7139      	strb	r1, [r7, #4]
   1ccf2:	2100      	movs	r1, #0
   1ccf4:	7179      	strb	r1, [r7, #5]
   1ccf6:	71b9      	strb	r1, [r7, #6]
   1ccf8:	71f9      	strb	r1, [r7, #7]
   1ccfa:	6878      	ldr	r0, [r7, #4]
   1ccfc:	6118      	str	r0, [r3, #16]
   1ccfe:	2100      	movs	r1, #0
   1cd00:	f36f 0100 	bfc	r1, #0, #1
   1cd04:	f36f 0141 	bfc	r1, #1, #1
   1cd08:	f36f 0182 	bfc	r1, #2, #1
   1cd0c:	f36f 01c5 	bfc	r1, #3, #3
   1cd10:	2301      	movs	r3, #1
   1cd12:	f363 1188 	bfi	r1, r3, #6, #3
   1cd16:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1cd1a:	f363 2152 	bfi	r1, r3, #9, #10
   1cd1e:	f36f 41de 	bfc	r1, #19, #12
   1cd22:	f36f 71df 	bfc	r1, #31, #1
   1cd26:	2300      	movs	r3, #0
   1cd28:	4817      	ldr	r0, [pc, #92]	; (1cd88 <bt_att_chan_create_pdu+0x1c4>)
   1cd2a:	f7f6 ffe7 	bl	13cfc <z_impl_z_log_msg_static_create>
   1cd2e:	46b5      	mov	sp, r6
		return NULL;
   1cd30:	e7bc      	b.n	1ccac <bt_att_chan_create_pdu+0xe8>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1cd32:	f06f 041b 	mvn.w	r4, #27
   1cd36:	e7d9      	b.n	1ccec <bt_att_chan_create_pdu+0x128>
		BT_WARN("Unable to allocate ATT TX meta");
   1cd38:	4b15      	ldr	r3, [pc, #84]	; (1cd90 <bt_att_chan_create_pdu+0x1cc>)
   1cd3a:	61fb      	str	r3, [r7, #28]
   1cd3c:	2202      	movs	r2, #2
   1cd3e:	713a      	strb	r2, [r7, #4]
   1cd40:	2300      	movs	r3, #0
   1cd42:	717b      	strb	r3, [r7, #5]
   1cd44:	71bb      	strb	r3, [r7, #6]
   1cd46:	71fb      	strb	r3, [r7, #7]
   1cd48:	6879      	ldr	r1, [r7, #4]
   1cd4a:	61b9      	str	r1, [r7, #24]
   1cd4c:	4619      	mov	r1, r3
   1cd4e:	f363 0100 	bfi	r1, r3, #0, #1
   1cd52:	f363 0141 	bfi	r1, r3, #1, #1
   1cd56:	f363 0182 	bfi	r1, r3, #2, #1
   1cd5a:	f363 01c5 	bfi	r1, r3, #3, #3
   1cd5e:	f362 1188 	bfi	r1, r2, #6, #3
   1cd62:	2208      	movs	r2, #8
   1cd64:	f362 2152 	bfi	r1, r2, #9, #10
   1cd68:	f363 41de 	bfi	r1, r3, #19, #12
   1cd6c:	f363 71df 	bfi	r1, r3, #31, #1
   1cd70:	f107 0218 	add.w	r2, r7, #24
   1cd74:	4804      	ldr	r0, [pc, #16]	; (1cd88 <bt_att_chan_create_pdu+0x1c4>)
   1cd76:	f7f6 ffc1 	bl	13cfc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1cd7a:	4628      	mov	r0, r5
   1cd7c:	f002 fba2 	bl	1f4c4 <net_buf_unref>
		return NULL;
   1cd80:	4635      	mov	r5, r6
   1cd82:	e793      	b.n	1ccac <bt_att_chan_create_pdu+0xe8>
   1cd84:	00032510 	.word	0x00032510
   1cd88:	0002f7f8 	.word	0x0002f7f8
   1cd8c:	0003224c 	.word	0x0003224c
   1cd90:	00032538 	.word	0x00032538

0001cd94 <bt_att_recv>:
{
   1cd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd98:	b094      	sub	sp, #80	; 0x50
   1cd9a:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1cd9c:	898b      	ldrh	r3, [r1, #12]
   1cd9e:	b1c3      	cbz	r3, 1cdd2 <bt_att_recv+0x3e>
   1cda0:	4606      	mov	r6, r0
   1cda2:	460d      	mov	r5, r1
   1cda4:	f1a0 0804 	sub.w	r8, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1cda8:	2101      	movs	r1, #1
   1cdaa:	f105 0008 	add.w	r0, r5, #8
   1cdae:	f002 fc67 	bl	1f680 <net_buf_simple_pull_mem>
   1cdb2:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1cdb4:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1cdb8:	b36b      	cbz	r3, 1ce16 <bt_att_recv+0x82>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1cdba:	2300      	movs	r3, #0
   1cdbc:	2b0d      	cmp	r3, #13
   1cdbe:	d860      	bhi.n	1ce82 <bt_att_recv+0xee>
		if (hdr->code == handlers[i].op) {
   1cdc0:	f894 c000 	ldrb.w	ip, [r4]
   1cdc4:	4aa1      	ldr	r2, [pc, #644]	; (1d04c <bt_att_recv+0x2b8>)
   1cdc6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1cdca:	4594      	cmp	ip, r2
   1cdcc:	d028      	beq.n	1ce20 <bt_att_recv+0x8c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1cdce:	3301      	adds	r3, #1
   1cdd0:	e7f4      	b.n	1cdbc <bt_att_recv+0x28>
		BT_ERR("Too small ATT PDU received");
   1cdd2:	4b9f      	ldr	r3, [pc, #636]	; (1d050 <bt_att_recv+0x2bc>)
   1cdd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1cdd6:	2302      	movs	r3, #2
   1cdd8:	713b      	strb	r3, [r7, #4]
   1cdda:	2300      	movs	r3, #0
   1cddc:	717b      	strb	r3, [r7, #5]
   1cdde:	71bb      	strb	r3, [r7, #6]
   1cde0:	71fb      	strb	r3, [r7, #7]
   1cde2:	687a      	ldr	r2, [r7, #4]
   1cde4:	64ba      	str	r2, [r7, #72]	; 0x48
   1cde6:	4619      	mov	r1, r3
   1cde8:	f363 0100 	bfi	r1, r3, #0, #1
   1cdec:	f363 0141 	bfi	r1, r3, #1, #1
   1cdf0:	f363 0182 	bfi	r1, r3, #2, #1
   1cdf4:	f363 01c5 	bfi	r1, r3, #3, #3
   1cdf8:	2201      	movs	r2, #1
   1cdfa:	f362 1188 	bfi	r1, r2, #6, #3
   1cdfe:	2208      	movs	r2, #8
   1ce00:	f362 2152 	bfi	r1, r2, #9, #10
   1ce04:	f363 41de 	bfi	r1, r3, #19, #12
   1ce08:	f363 71df 	bfi	r1, r3, #31, #1
   1ce0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1ce10:	4890      	ldr	r0, [pc, #576]	; (1d054 <bt_att_recv+0x2c0>)
   1ce12:	f7f6 ff73 	bl	13cfc <z_impl_z_log_msg_static_create>
}
   1ce16:	2000      	movs	r0, #0
   1ce18:	3750      	adds	r7, #80	; 0x50
   1ce1a:	46bd      	mov	sp, r7
   1ce1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			handler = &handlers[i];
   1ce20:	4a8a      	ldr	r2, [pc, #552]	; (1d04c <bt_att_recv+0x2b8>)
   1ce22:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   1ce26:	f899 a002 	ldrb.w	sl, [r9, #2]
   1ce2a:	f1ba 0f01 	cmp.w	sl, #1
   1ce2e:	d078      	beq.n	1cf22 <bt_att_recv+0x18e>
		} else if (handler->type == ATT_INDICATION &&
   1ce30:	f1ba 0f05 	cmp.w	sl, #5
   1ce34:	f000 809f 	beq.w	1cf76 <bt_att_recv+0x1e2>
	if (buf->len < handler->expect_len) {
   1ce38:	89a9      	ldrh	r1, [r5, #12]
   1ce3a:	f899 3001 	ldrb.w	r3, [r9, #1]
   1ce3e:	4299      	cmp	r1, r3
   1ce40:	f080 80fd 	bcs.w	1d03e <bt_att_recv+0x2aa>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1ce44:	f894 c000 	ldrb.w	ip, [r4]
   1ce48:	466d      	mov	r5, sp
   1ce4a:	b088      	sub	sp, #32
   1ce4c:	466b      	mov	r3, sp
   1ce4e:	f113 0210 	adds.w	r2, r3, #16
   1ce52:	f000 80ba 	beq.w	1cfca <bt_att_recv+0x236>
   1ce56:	2010      	movs	r0, #16
   1ce58:	b172      	cbz	r2, 1ce78 <bt_att_recv+0xe4>
   1ce5a:	4606      	mov	r6, r0
   1ce5c:	2804      	cmp	r0, #4
   1ce5e:	dd03      	ble.n	1ce68 <bt_att_recv+0xd4>
   1ce60:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 1d058 <bt_att_recv+0x2c4>
   1ce64:	f8c3 e014 	str.w	lr, [r3, #20]
   1ce68:	2e08      	cmp	r6, #8
   1ce6a:	dd00      	ble.n	1ce6e <bt_att_recv+0xda>
   1ce6c:	6199      	str	r1, [r3, #24]
   1ce6e:	2e0c      	cmp	r6, #12
   1ce70:	f340 80ae 	ble.w	1cfd0 <bt_att_recv+0x23c>
   1ce74:	f8c3 c01c 	str.w	ip, [r3, #28]
   1ce78:	280f      	cmp	r0, #15
   1ce7a:	f340 80dd 	ble.w	1d038 <bt_att_recv+0x2a4>
   1ce7e:	2610      	movs	r6, #16
   1ce80:	e0a8      	b.n	1cfd4 <bt_att_recv+0x240>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1ce82:	7826      	ldrb	r6, [r4, #0]
   1ce84:	466d      	mov	r5, sp
   1ce86:	b088      	sub	sp, #32
   1ce88:	466b      	mov	r3, sp
   1ce8a:	f113 0210 	adds.w	r2, r3, #16
   1ce8e:	d00f      	beq.n	1ceb0 <bt_att_recv+0x11c>
   1ce90:	210c      	movs	r1, #12
   1ce92:	b14a      	cbz	r2, 1cea8 <bt_att_recv+0x114>
   1ce94:	4608      	mov	r0, r1
   1ce96:	2904      	cmp	r1, #4
   1ce98:	dd03      	ble.n	1cea2 <bt_att_recv+0x10e>
   1ce9a:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 1d05c <bt_att_recv+0x2c8>
   1ce9e:	f8c3 c014 	str.w	ip, [r3, #20]
   1cea2:	2808      	cmp	r0, #8
   1cea4:	dd07      	ble.n	1ceb6 <bt_att_recv+0x122>
   1cea6:	619e      	str	r6, [r3, #24]
   1cea8:	290b      	cmp	r1, #11
   1ceaa:	dd37      	ble.n	1cf1c <bt_att_recv+0x188>
   1ceac:	260c      	movs	r6, #12
   1ceae:	e004      	b.n	1ceba <bt_att_recv+0x126>
   1ceb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ceb4:	e7ed      	b.n	1ce92 <bt_att_recv+0xfe>
   1ceb6:	f06f 061b 	mvn.w	r6, #27
   1ceba:	b13a      	cbz	r2, 1cecc <bt_att_recv+0x138>
   1cebc:	2103      	movs	r1, #3
   1cebe:	7139      	strb	r1, [r7, #4]
   1cec0:	2100      	movs	r1, #0
   1cec2:	7179      	strb	r1, [r7, #5]
   1cec4:	71b9      	strb	r1, [r7, #6]
   1cec6:	71f9      	strb	r1, [r7, #7]
   1cec8:	6878      	ldr	r0, [r7, #4]
   1ceca:	6118      	str	r0, [r3, #16]
   1cecc:	2100      	movs	r1, #0
   1cece:	f36f 0100 	bfc	r1, #0, #1
   1ced2:	f36f 0141 	bfc	r1, #1, #1
   1ced6:	f36f 0182 	bfc	r1, #2, #1
   1ceda:	f36f 01c5 	bfc	r1, #3, #3
   1cede:	2302      	movs	r3, #2
   1cee0:	f363 1188 	bfi	r1, r3, #6, #3
   1cee4:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1cee8:	f363 2152 	bfi	r1, r3, #9, #10
   1ceec:	f36f 41de 	bfc	r1, #19, #12
   1cef0:	f36f 71df 	bfc	r1, #31, #1
   1cef4:	2300      	movs	r3, #0
   1cef6:	4857      	ldr	r0, [pc, #348]	; (1d054 <bt_att_recv+0x2c0>)
   1cef8:	f7f6 ff00 	bl	13cfc <z_impl_z_log_msg_static_create>
   1cefc:	46ad      	mov	sp, r5
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1cefe:	7824      	ldrb	r4, [r4, #0]
   1cf00:	4620      	mov	r0, r4
   1cf02:	f7ff f959 	bl	1c1b8 <att_op_get_type>
   1cf06:	2800      	cmp	r0, #0
   1cf08:	d085      	beq.n	1ce16 <bt_att_recv+0x82>
   1cf0a:	2805      	cmp	r0, #5
   1cf0c:	d083      	beq.n	1ce16 <bt_att_recv+0x82>
			send_err_rsp(att_chan, hdr->code, 0,
   1cf0e:	2306      	movs	r3, #6
   1cf10:	2200      	movs	r2, #0
   1cf12:	4621      	mov	r1, r4
   1cf14:	4640      	mov	r0, r8
   1cf16:	f00f fbe9 	bl	2c6ec <send_err_rsp>
		return 0;
   1cf1a:	e77c      	b.n	1ce16 <bt_att_recv+0x82>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1cf1c:	f06f 061b 	mvn.w	r6, #27
   1cf20:	e7cb      	b.n	1ceba <bt_att_recv+0x126>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1cf22:	2100      	movs	r1, #0
   1cf24:	f106 0094 	add.w	r0, r6, #148	; 0x94
   1cf28:	f00f fb8b 	bl	2c642 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1cf2c:	2800      	cmp	r0, #0
   1cf2e:	f43f af7f 	beq.w	1ce30 <bt_att_recv+0x9c>
			BT_WARN("Ignoring unexpected request");
   1cf32:	4b4b      	ldr	r3, [pc, #300]	; (1d060 <bt_att_recv+0x2cc>)
   1cf34:	61fb      	str	r3, [r7, #28]
   1cf36:	2202      	movs	r2, #2
   1cf38:	713a      	strb	r2, [r7, #4]
   1cf3a:	2300      	movs	r3, #0
   1cf3c:	717b      	strb	r3, [r7, #5]
   1cf3e:	71bb      	strb	r3, [r7, #6]
   1cf40:	71fb      	strb	r3, [r7, #7]
   1cf42:	6879      	ldr	r1, [r7, #4]
   1cf44:	61b9      	str	r1, [r7, #24]
   1cf46:	4619      	mov	r1, r3
   1cf48:	f363 0100 	bfi	r1, r3, #0, #1
   1cf4c:	f363 0141 	bfi	r1, r3, #1, #1
   1cf50:	f363 0182 	bfi	r1, r3, #2, #1
   1cf54:	f363 01c5 	bfi	r1, r3, #3, #3
   1cf58:	f362 1188 	bfi	r1, r2, #6, #3
   1cf5c:	2208      	movs	r2, #8
   1cf5e:	f362 2152 	bfi	r1, r2, #9, #10
   1cf62:	f363 41de 	bfi	r1, r3, #19, #12
   1cf66:	f363 71df 	bfi	r1, r3, #31, #1
   1cf6a:	f107 0218 	add.w	r2, r7, #24
   1cf6e:	4839      	ldr	r0, [pc, #228]	; (1d054 <bt_att_recv+0x2c0>)
   1cf70:	f7f6 fec4 	bl	13cfc <z_impl_z_log_msg_static_create>
			return 0;
   1cf74:	e74f      	b.n	1ce16 <bt_att_recv+0x82>
			   atomic_test_and_set_bit(att_chan->flags,
   1cf76:	2101      	movs	r1, #1
   1cf78:	f106 0094 	add.w	r0, r6, #148	; 0x94
   1cf7c:	f00f fb61 	bl	2c642 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1cf80:	2800      	cmp	r0, #0
   1cf82:	f43f af59 	beq.w	1ce38 <bt_att_recv+0xa4>
			BT_WARN("Ignoring unexpected indication");
   1cf86:	4b37      	ldr	r3, [pc, #220]	; (1d064 <bt_att_recv+0x2d0>)
   1cf88:	637b      	str	r3, [r7, #52]	; 0x34
   1cf8a:	2202      	movs	r2, #2
   1cf8c:	713a      	strb	r2, [r7, #4]
   1cf8e:	2300      	movs	r3, #0
   1cf90:	717b      	strb	r3, [r7, #5]
   1cf92:	71bb      	strb	r3, [r7, #6]
   1cf94:	71fb      	strb	r3, [r7, #7]
   1cf96:	6879      	ldr	r1, [r7, #4]
   1cf98:	6339      	str	r1, [r7, #48]	; 0x30
   1cf9a:	4619      	mov	r1, r3
   1cf9c:	f363 0100 	bfi	r1, r3, #0, #1
   1cfa0:	f363 0141 	bfi	r1, r3, #1, #1
   1cfa4:	f363 0182 	bfi	r1, r3, #2, #1
   1cfa8:	f363 01c5 	bfi	r1, r3, #3, #3
   1cfac:	f362 1188 	bfi	r1, r2, #6, #3
   1cfb0:	2208      	movs	r2, #8
   1cfb2:	f362 2152 	bfi	r1, r2, #9, #10
   1cfb6:	f363 41de 	bfi	r1, r3, #19, #12
   1cfba:	f363 71df 	bfi	r1, r3, #31, #1
   1cfbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1cfc2:	4824      	ldr	r0, [pc, #144]	; (1d054 <bt_att_recv+0x2c0>)
   1cfc4:	f7f6 fe9a 	bl	13cfc <z_impl_z_log_msg_static_create>
			return 0;
   1cfc8:	e725      	b.n	1ce16 <bt_att_recv+0x82>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1cfca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1cfce:	e743      	b.n	1ce58 <bt_att_recv+0xc4>
   1cfd0:	f06f 061b 	mvn.w	r6, #27
   1cfd4:	b13a      	cbz	r2, 1cfe6 <bt_att_recv+0x252>
   1cfd6:	2104      	movs	r1, #4
   1cfd8:	7139      	strb	r1, [r7, #4]
   1cfda:	2100      	movs	r1, #0
   1cfdc:	7179      	strb	r1, [r7, #5]
   1cfde:	71b9      	strb	r1, [r7, #6]
   1cfe0:	71f9      	strb	r1, [r7, #7]
   1cfe2:	6878      	ldr	r0, [r7, #4]
   1cfe4:	6118      	str	r0, [r3, #16]
   1cfe6:	2100      	movs	r1, #0
   1cfe8:	f36f 0100 	bfc	r1, #0, #1
   1cfec:	f36f 0141 	bfc	r1, #1, #1
   1cff0:	f36f 0182 	bfc	r1, #2, #1
   1cff4:	f36f 01c5 	bfc	r1, #3, #3
   1cff8:	2301      	movs	r3, #1
   1cffa:	f363 1188 	bfi	r1, r3, #6, #3
   1cffe:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   1d002:	f363 2152 	bfi	r1, r3, #9, #10
   1d006:	f36f 41de 	bfc	r1, #19, #12
   1d00a:	f36f 71df 	bfc	r1, #31, #1
   1d00e:	2300      	movs	r3, #0
   1d010:	4810      	ldr	r0, [pc, #64]	; (1d054 <bt_att_recv+0x2c0>)
   1d012:	f7f6 fe73 	bl	13cfc <z_impl_z_log_msg_static_create>
   1d016:	46ad      	mov	sp, r5
		err = BT_ATT_ERR_INVALID_PDU;
   1d018:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   1d01a:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d01e:	2b01      	cmp	r3, #1
   1d020:	f47f aef9 	bne.w	1ce16 <bt_att_recv+0x82>
   1d024:	2800      	cmp	r0, #0
   1d026:	f43f aef6 	beq.w	1ce16 <bt_att_recv+0x82>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1d02a:	4603      	mov	r3, r0
   1d02c:	2200      	movs	r2, #0
   1d02e:	7821      	ldrb	r1, [r4, #0]
   1d030:	4640      	mov	r0, r8
   1d032:	f00f fb5b 	bl	2c6ec <send_err_rsp>
   1d036:	e6ee      	b.n	1ce16 <bt_att_recv+0x82>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1d038:	f06f 061b 	mvn.w	r6, #27
   1d03c:	e7ca      	b.n	1cfd4 <bt_att_recv+0x240>
		err = handler->func(att_chan, buf);
   1d03e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d042:	4629      	mov	r1, r5
   1d044:	4640      	mov	r0, r8
   1d046:	4798      	blx	r3
   1d048:	e7e7      	b.n	1d01a <bt_att_recv+0x286>
   1d04a:	bf00      	nop
   1d04c:	0003262c 	.word	0x0003262c
   1d050:	00032558 	.word	0x00032558
   1d054:	0002f7f8 	.word	0x0002f7f8
   1d058:	000325cc 	.word	0x000325cc
   1d05c:	00032574 	.word	0x00032574
   1d060:	00032590 	.word	0x00032590
   1d064:	000325ac 	.word	0x000325ac

0001d068 <att_write_rsp>:
{
   1d068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d06c:	b08a      	sub	sp, #40	; 0x28
   1d06e:	4604      	mov	r4, r0
   1d070:	4617      	mov	r7, r2
   1d072:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d074:	6803      	ldr	r3, [r0, #0]
   1d076:	4688      	mov	r8, r1
   1d078:	3900      	subs	r1, #0
   1d07a:	bf18      	it	ne
   1d07c:	2101      	movne	r1, #1
   1d07e:	6818      	ldr	r0, [r3, #0]
   1d080:	f010 f82c 	bl	2d0dc <bt_gatt_change_aware>
   1d084:	b128      	cbz	r0, 1d092 <att_write_rsp+0x2a>
	if (!handle) {
   1d086:	b975      	cbnz	r5, 1d0a6 <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d088:	2601      	movs	r6, #1
}
   1d08a:	4630      	mov	r0, r6
   1d08c:	b00a      	add	sp, #40	; 0x28
   1d08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d092:	2105      	movs	r1, #5
   1d094:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1d098:	f00f fad3 	bl	2c642 <atomic_test_and_set_bit>
   1d09c:	b108      	cbz	r0, 1d0a2 <att_write_rsp+0x3a>
			return 0;
   1d09e:	2600      	movs	r6, #0
   1d0a0:	e7f3      	b.n	1d08a <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d0a2:	2612      	movs	r6, #18
   1d0a4:	e7f1      	b.n	1d08a <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1d0a6:	2218      	movs	r2, #24
   1d0a8:	2100      	movs	r1, #0
   1d0aa:	a804      	add	r0, sp, #16
   1d0ac:	f00e f873 	bl	2b196 <memset>
	if (rsp) {
   1d0b0:	b13f      	cbz	r7, 1d0c2 <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1d0b2:	2200      	movs	r2, #0
   1d0b4:	4639      	mov	r1, r7
   1d0b6:	4620      	mov	r0, r4
   1d0b8:	f7ff fd84 	bl	1cbc4 <bt_att_chan_create_pdu>
   1d0bc:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1d0be:	2800      	cmp	r0, #0
   1d0c0:	d03e      	beq.n	1d140 <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   1d0c2:	6823      	ldr	r3, [r4, #0]
   1d0c4:	681b      	ldr	r3, [r3, #0]
   1d0c6:	9304      	str	r3, [sp, #16]
	data.req = req;
   1d0c8:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1d0cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1d0d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1d0d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d0d6:	9307      	str	r3, [sp, #28]
	data.len = len;
   1d0d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1d0dc:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d0e0:	2301      	movs	r3, #1
   1d0e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d0e6:	ab04      	add	r3, sp, #16
   1d0e8:	9302      	str	r3, [sp, #8]
   1d0ea:	4b16      	ldr	r3, [pc, #88]	; (1d144 <att_write_rsp+0xdc>)
   1d0ec:	9301      	str	r3, [sp, #4]
   1d0ee:	2200      	movs	r2, #0
   1d0f0:	9200      	str	r2, [sp, #0]
   1d0f2:	4613      	mov	r3, r2
   1d0f4:	4629      	mov	r1, r5
   1d0f6:	4628      	mov	r0, r5
   1d0f8:	f000 ffd0 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1d0fc:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1d100:	b936      	cbnz	r6, 1d110 <att_write_rsp+0xa8>
	if (data.buf) {
   1d102:	9905      	ldr	r1, [sp, #20]
   1d104:	2900      	cmp	r1, #0
   1d106:	d0c0      	beq.n	1d08a <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1d108:	4620      	mov	r0, r4
   1d10a:	f00f f8f8 	bl	2c2fe <bt_att_chan_send_rsp>
   1d10e:	e7bc      	b.n	1d08a <att_write_rsp+0x22>
		if (rsp) {
   1d110:	b927      	cbnz	r7, 1d11c <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1d112:	f1b8 0f18 	cmp.w	r8, #24
   1d116:	d010      	beq.n	1d13a <att_write_rsp+0xd2>
   1d118:	2600      	movs	r6, #0
   1d11a:	e7b6      	b.n	1d08a <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d11c:	9b05      	ldr	r3, [sp, #20]
   1d11e:	6958      	ldr	r0, [r3, #20]
   1d120:	f7ff fa68 	bl	1c5f4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d124:	9805      	ldr	r0, [sp, #20]
   1d126:	f002 f9cd 	bl	1f4c4 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1d12a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1d12e:	462a      	mov	r2, r5
   1d130:	4641      	mov	r1, r8
   1d132:	4620      	mov	r0, r4
   1d134:	f00f fada 	bl	2c6ec <send_err_rsp>
   1d138:	e7eb      	b.n	1d112 <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1d13a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1d13e:	e7a4      	b.n	1d08a <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1d140:	260e      	movs	r6, #14
   1d142:	e7a2      	b.n	1d08a <att_write_rsp+0x22>
   1d144:	0002c29f 	.word	0x0002c29f

0001d148 <bt_att_create_pdu>:
{
   1d148:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d14a:	b083      	sub	sp, #12
   1d14c:	af00      	add	r7, sp, #0
   1d14e:	460e      	mov	r6, r1
   1d150:	4615      	mov	r5, r2
	att = att_get(conn);
   1d152:	f7ff f8c3 	bl	1c2dc <att_get>
	if (!att) {
   1d156:	4604      	mov	r4, r0
   1d158:	b300      	cbz	r0, 1d19c <bt_att_create_pdu+0x54>
	return list->head;
   1d15a:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d15c:	b314      	cbz	r4, 1d1a4 <bt_att_create_pdu+0x5c>
   1d15e:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d160:	f114 00f0 	adds.w	r0, r4, #240	; 0xf0
   1d164:	d007      	beq.n	1d176 <bt_att_create_pdu+0x2e>
	return node->next;
   1d166:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1d16a:	b120      	cbz	r0, 1d176 <bt_att_create_pdu+0x2e>
   1d16c:	38f0      	subs	r0, #240	; 0xf0
   1d16e:	e002      	b.n	1d176 <bt_att_create_pdu+0x2e>
   1d170:	4603      	mov	r3, r0
   1d172:	4604      	mov	r4, r0
   1d174:	4618      	mov	r0, r3
   1d176:	b1bc      	cbz	r4, 1d1a8 <bt_att_create_pdu+0x60>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d178:	1c6b      	adds	r3, r5, #1
   1d17a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1d17c:	4293      	cmp	r3, r2
   1d17e:	d907      	bls.n	1d190 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d180:	2800      	cmp	r0, #0
   1d182:	d0f5      	beq.n	1d170 <bt_att_create_pdu+0x28>
   1d184:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1d188:	2b00      	cmp	r3, #0
   1d18a:	d0f2      	beq.n	1d172 <bt_att_create_pdu+0x2a>
   1d18c:	3bf0      	subs	r3, #240	; 0xf0
   1d18e:	e7f0      	b.n	1d172 <bt_att_create_pdu+0x2a>
		return bt_att_chan_create_pdu(chan, op, len);
   1d190:	462a      	mov	r2, r5
   1d192:	4631      	mov	r1, r6
   1d194:	4620      	mov	r0, r4
   1d196:	f7ff fd15 	bl	1cbc4 <bt_att_chan_create_pdu>
   1d19a:	4604      	mov	r4, r0
}
   1d19c:	4620      	mov	r0, r4
   1d19e:	370c      	adds	r7, #12
   1d1a0:	46bd      	mov	sp, r7
   1d1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d1a4:	4620      	mov	r0, r4
   1d1a6:	e7e6      	b.n	1d176 <bt_att_create_pdu+0x2e>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1d1a8:	3501      	adds	r5, #1
   1d1aa:	466e      	mov	r6, sp
   1d1ac:	b088      	sub	sp, #32
   1d1ae:	466b      	mov	r3, sp
   1d1b0:	f113 0210 	adds.w	r2, r3, #16
   1d1b4:	d031      	beq.n	1d21a <bt_att_create_pdu+0xd2>
   1d1b6:	210c      	movs	r1, #12
   1d1b8:	b14a      	cbz	r2, 1d1ce <bt_att_create_pdu+0x86>
   1d1ba:	4608      	mov	r0, r1
   1d1bc:	2904      	cmp	r1, #4
   1d1be:	dd03      	ble.n	1d1c8 <bt_att_create_pdu+0x80>
   1d1c0:	f8df c064 	ldr.w	ip, [pc, #100]	; 1d228 <bt_att_create_pdu+0xe0>
   1d1c4:	f8c3 c014 	str.w	ip, [r3, #20]
   1d1c8:	2808      	cmp	r0, #8
   1d1ca:	dd00      	ble.n	1d1ce <bt_att_create_pdu+0x86>
   1d1cc:	619d      	str	r5, [r3, #24]
   1d1ce:	290b      	cmp	r1, #11
   1d1d0:	dd26      	ble.n	1d220 <bt_att_create_pdu+0xd8>
   1d1d2:	250c      	movs	r5, #12
   1d1d4:	b13a      	cbz	r2, 1d1e6 <bt_att_create_pdu+0x9e>
   1d1d6:	2103      	movs	r1, #3
   1d1d8:	7139      	strb	r1, [r7, #4]
   1d1da:	2100      	movs	r1, #0
   1d1dc:	7179      	strb	r1, [r7, #5]
   1d1de:	71b9      	strb	r1, [r7, #6]
   1d1e0:	71f9      	strb	r1, [r7, #7]
   1d1e2:	6878      	ldr	r0, [r7, #4]
   1d1e4:	6118      	str	r0, [r3, #16]
   1d1e6:	2100      	movs	r1, #0
   1d1e8:	f36f 0100 	bfc	r1, #0, #1
   1d1ec:	f36f 0141 	bfc	r1, #1, #1
   1d1f0:	f36f 0182 	bfc	r1, #2, #1
   1d1f4:	f36f 01c5 	bfc	r1, #3, #3
   1d1f8:	2302      	movs	r3, #2
   1d1fa:	f363 1188 	bfi	r1, r3, #6, #3
   1d1fe:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1d202:	f363 2152 	bfi	r1, r3, #9, #10
   1d206:	f36f 41de 	bfc	r1, #19, #12
   1d20a:	f36f 71df 	bfc	r1, #31, #1
   1d20e:	2300      	movs	r3, #0
   1d210:	4806      	ldr	r0, [pc, #24]	; (1d22c <bt_att_create_pdu+0xe4>)
   1d212:	f7f6 fd73 	bl	13cfc <z_impl_z_log_msg_static_create>
   1d216:	46b5      	mov	sp, r6
	return NULL;
   1d218:	e7c0      	b.n	1d19c <bt_att_create_pdu+0x54>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1d21a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d21e:	e7cb      	b.n	1d1b8 <bt_att_create_pdu+0x70>
   1d220:	f06f 051b 	mvn.w	r5, #27
   1d224:	e7d6      	b.n	1d1d4 <bt_att_create_pdu+0x8c>
   1d226:	bf00      	nop
   1d228:	000325ec 	.word	0x000325ec
   1d22c:	0002f7f8 	.word	0x0002f7f8

0001d230 <att_read_group_rsp>:
{
   1d230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d234:	b08a      	sub	sp, #40	; 0x28
   1d236:	4604      	mov	r4, r0
   1d238:	460f      	mov	r7, r1
   1d23a:	4615      	mov	r5, r2
   1d23c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1d23e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d242:	2214      	movs	r2, #20
   1d244:	2100      	movs	r1, #0
   1d246:	eb0d 0002 	add.w	r0, sp, r2
   1d24a:	f00d ffa4 	bl	2b196 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1d24e:	2201      	movs	r2, #1
   1d250:	2111      	movs	r1, #17
   1d252:	4640      	mov	r0, r8
   1d254:	f7ff ff78 	bl	1d148 <bt_att_create_pdu>
   1d258:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1d25a:	b368      	cbz	r0, 1d2b8 <att_read_group_rsp+0x88>
	data.chan = chan;
   1d25c:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   1d25e:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1d260:	2101      	movs	r1, #1
   1d262:	3008      	adds	r0, #8
   1d264:	f002 fa4c 	bl	1f700 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d268:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1d26a:	2200      	movs	r2, #0
   1d26c:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   1d26e:	9209      	str	r2, [sp, #36]	; 0x24
   1d270:	ab05      	add	r3, sp, #20
   1d272:	9302      	str	r3, [sp, #8]
   1d274:	4b11      	ldr	r3, [pc, #68]	; (1d2bc <att_read_group_rsp+0x8c>)
   1d276:	9301      	str	r3, [sp, #4]
   1d278:	9200      	str	r2, [sp, #0]
   1d27a:	4613      	mov	r3, r2
   1d27c:	4631      	mov	r1, r6
   1d27e:	4628      	mov	r0, r5
   1d280:	f000 ff0c 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1d284:	9b08      	ldr	r3, [sp, #32]
   1d286:	781e      	ldrb	r6, [r3, #0]
   1d288:	b146      	cbz	r6, 1d29c <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1d28a:	9907      	ldr	r1, [sp, #28]
   1d28c:	4620      	mov	r0, r4
   1d28e:	f00f f836 	bl	2c2fe <bt_att_chan_send_rsp>
	return 0;
   1d292:	2600      	movs	r6, #0
}
   1d294:	4630      	mov	r0, r6
   1d296:	b00a      	add	sp, #40	; 0x28
   1d298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d29c:	9b07      	ldr	r3, [sp, #28]
   1d29e:	6958      	ldr	r0, [r3, #20]
   1d2a0:	f7ff f9a8 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d2a4:	9807      	ldr	r0, [sp, #28]
   1d2a6:	f002 f90d 	bl	1f4c4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1d2aa:	230a      	movs	r3, #10
   1d2ac:	462a      	mov	r2, r5
   1d2ae:	2110      	movs	r1, #16
   1d2b0:	4620      	mov	r0, r4
   1d2b2:	f00f fa1b 	bl	2c6ec <send_err_rsp>
		return 0;
   1d2b6:	e7ed      	b.n	1d294 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1d2b8:	260e      	movs	r6, #14
   1d2ba:	e7eb      	b.n	1d294 <att_read_group_rsp+0x64>
   1d2bc:	0001c7ad 	.word	0x0001c7ad

0001d2c0 <att_read_mult_vl_req>:
{
   1d2c0:	b570      	push	{r4, r5, r6, lr}
   1d2c2:	b088      	sub	sp, #32
   1d2c4:	4606      	mov	r6, r0
   1d2c6:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1d2c8:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1d2ca:	2101      	movs	r1, #1
   1d2cc:	4620      	mov	r0, r4
   1d2ce:	f00f ff05 	bl	2d0dc <bt_gatt_change_aware>
   1d2d2:	b950      	cbnz	r0, 1d2ea <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d2d4:	2105      	movs	r1, #5
   1d2d6:	f106 0098 	add.w	r0, r6, #152	; 0x98
   1d2da:	f00f f9b2 	bl	2c642 <atomic_test_and_set_bit>
   1d2de:	b110      	cbz	r0, 1d2e6 <att_read_mult_vl_req+0x26>
			return 0;
   1d2e0:	2000      	movs	r0, #0
}
   1d2e2:	b008      	add	sp, #32
   1d2e4:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d2e6:	2012      	movs	r0, #18
   1d2e8:	e7fb      	b.n	1d2e2 <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1d2ea:	2210      	movs	r2, #16
   1d2ec:	2100      	movs	r1, #0
   1d2ee:	eb0d 0002 	add.w	r0, sp, r2
   1d2f2:	f00d ff50 	bl	2b196 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1d2f6:	2200      	movs	r2, #0
   1d2f8:	2121      	movs	r1, #33	; 0x21
   1d2fa:	4620      	mov	r0, r4
   1d2fc:	f7ff ff24 	bl	1d148 <bt_att_create_pdu>
   1d300:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1d302:	b378      	cbz	r0, 1d364 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1d304:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1d306:	89ab      	ldrh	r3, [r5, #12]
   1d308:	2b01      	cmp	r3, #1
   1d30a:	d925      	bls.n	1d358 <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   1d30c:	f105 0008 	add.w	r0, r5, #8
   1d310:	f00f ffce 	bl	2d2b0 <net_buf_simple_pull_le16>
   1d314:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d316:	2301      	movs	r3, #1
   1d318:	f88d 301c 	strb.w	r3, [sp, #28]
   1d31c:	ab04      	add	r3, sp, #16
   1d31e:	9302      	str	r3, [sp, #8]
   1d320:	4b11      	ldr	r3, [pc, #68]	; (1d368 <att_read_mult_vl_req+0xa8>)
   1d322:	9301      	str	r3, [sp, #4]
   1d324:	2200      	movs	r2, #0
   1d326:	9200      	str	r2, [sp, #0]
   1d328:	4613      	mov	r3, r2
   1d32a:	4601      	mov	r1, r0
   1d32c:	f000 feb6 	bl	1e09c <bt_gatt_foreach_attr_type>
		if (data.err) {
   1d330:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1d334:	2b00      	cmp	r3, #0
   1d336:	d0e6      	beq.n	1d306 <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d338:	9b06      	ldr	r3, [sp, #24]
   1d33a:	6958      	ldr	r0, [r3, #20]
   1d33c:	f7ff f95a 	bl	1c5f4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d340:	9806      	ldr	r0, [sp, #24]
   1d342:	f002 f8bf 	bl	1f4c4 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1d346:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1d34a:	4622      	mov	r2, r4
   1d34c:	2120      	movs	r1, #32
   1d34e:	4630      	mov	r0, r6
   1d350:	f00f f9cc 	bl	2c6ec <send_err_rsp>
			return 0;
   1d354:	2000      	movs	r0, #0
   1d356:	e7c4      	b.n	1d2e2 <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1d358:	9906      	ldr	r1, [sp, #24]
   1d35a:	4630      	mov	r0, r6
   1d35c:	f00e ffcf 	bl	2c2fe <bt_att_chan_send_rsp>
	return 0;
   1d360:	2000      	movs	r0, #0
   1d362:	e7be      	b.n	1d2e2 <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1d364:	200e      	movs	r0, #14
   1d366:	e7bc      	b.n	1d2e2 <att_read_mult_vl_req+0x22>
   1d368:	0002c46d 	.word	0x0002c46d

0001d36c <att_read_mult_req>:
{
   1d36c:	b570      	push	{r4, r5, r6, lr}
   1d36e:	b088      	sub	sp, #32
   1d370:	4606      	mov	r6, r0
   1d372:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1d374:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1d376:	2101      	movs	r1, #1
   1d378:	4620      	mov	r0, r4
   1d37a:	f00f feaf 	bl	2d0dc <bt_gatt_change_aware>
   1d37e:	b950      	cbnz	r0, 1d396 <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d380:	2105      	movs	r1, #5
   1d382:	f106 0098 	add.w	r0, r6, #152	; 0x98
   1d386:	f00f f95c 	bl	2c642 <atomic_test_and_set_bit>
   1d38a:	b110      	cbz	r0, 1d392 <att_read_mult_req+0x26>
			return 0;
   1d38c:	2000      	movs	r0, #0
}
   1d38e:	b008      	add	sp, #32
   1d390:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d392:	2012      	movs	r0, #18
   1d394:	e7fb      	b.n	1d38e <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1d396:	2210      	movs	r2, #16
   1d398:	2100      	movs	r1, #0
   1d39a:	eb0d 0002 	add.w	r0, sp, r2
   1d39e:	f00d fefa 	bl	2b196 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1d3a2:	2200      	movs	r2, #0
   1d3a4:	210f      	movs	r1, #15
   1d3a6:	4620      	mov	r0, r4
   1d3a8:	f7ff fece 	bl	1d148 <bt_att_create_pdu>
   1d3ac:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1d3ae:	b378      	cbz	r0, 1d410 <att_read_mult_req+0xa4>
	data.chan = chan;
   1d3b0:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1d3b2:	89ab      	ldrh	r3, [r5, #12]
   1d3b4:	2b01      	cmp	r3, #1
   1d3b6:	d925      	bls.n	1d404 <att_read_mult_req+0x98>
   1d3b8:	f105 0008 	add.w	r0, r5, #8
   1d3bc:	f00f ff78 	bl	2d2b0 <net_buf_simple_pull_le16>
   1d3c0:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d3c2:	2301      	movs	r3, #1
   1d3c4:	f88d 301c 	strb.w	r3, [sp, #28]
   1d3c8:	ab04      	add	r3, sp, #16
   1d3ca:	9302      	str	r3, [sp, #8]
   1d3cc:	4b11      	ldr	r3, [pc, #68]	; (1d414 <att_read_mult_req+0xa8>)
   1d3ce:	9301      	str	r3, [sp, #4]
   1d3d0:	2200      	movs	r2, #0
   1d3d2:	9200      	str	r2, [sp, #0]
   1d3d4:	4613      	mov	r3, r2
   1d3d6:	4601      	mov	r1, r0
   1d3d8:	f000 fe60 	bl	1e09c <bt_gatt_foreach_attr_type>
		if (data.err) {
   1d3dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1d3e0:	2b00      	cmp	r3, #0
   1d3e2:	d0e6      	beq.n	1d3b2 <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d3e4:	9b06      	ldr	r3, [sp, #24]
   1d3e6:	6958      	ldr	r0, [r3, #20]
   1d3e8:	f7ff f904 	bl	1c5f4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d3ec:	9806      	ldr	r0, [sp, #24]
   1d3ee:	f002 f869 	bl	1f4c4 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1d3f2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1d3f6:	4622      	mov	r2, r4
   1d3f8:	210e      	movs	r1, #14
   1d3fa:	4630      	mov	r0, r6
   1d3fc:	f00f f976 	bl	2c6ec <send_err_rsp>
			return 0;
   1d400:	2000      	movs	r0, #0
   1d402:	e7c4      	b.n	1d38e <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1d404:	9906      	ldr	r1, [sp, #24]
   1d406:	4630      	mov	r0, r6
   1d408:	f00e ff79 	bl	2c2fe <bt_att_chan_send_rsp>
	return 0;
   1d40c:	2000      	movs	r0, #0
   1d40e:	e7be      	b.n	1d38e <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1d410:	200e      	movs	r0, #14
   1d412:	e7bc      	b.n	1d38e <att_read_mult_req+0x22>
   1d414:	0002c4d3 	.word	0x0002c4d3

0001d418 <att_read_rsp>:
{
   1d418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d41c:	b088      	sub	sp, #32
   1d41e:	4604      	mov	r4, r0
   1d420:	4688      	mov	r8, r1
   1d422:	4616      	mov	r6, r2
   1d424:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1d426:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1d428:	2101      	movs	r1, #1
   1d42a:	4638      	mov	r0, r7
   1d42c:	f00f fe56 	bl	2d0dc <bt_gatt_change_aware>
   1d430:	b128      	cbz	r0, 1d43e <att_read_rsp+0x26>
	if (!handle) {
   1d432:	b975      	cbnz	r5, 1d452 <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d434:	2601      	movs	r6, #1
}
   1d436:	4630      	mov	r0, r6
   1d438:	b008      	add	sp, #32
   1d43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d43e:	2105      	movs	r1, #5
   1d440:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1d444:	f00f f8fd 	bl	2c642 <atomic_test_and_set_bit>
   1d448:	b108      	cbz	r0, 1d44e <att_read_rsp+0x36>
			return 0;
   1d44a:	2600      	movs	r6, #0
   1d44c:	e7f3      	b.n	1d436 <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d44e:	2612      	movs	r6, #18
   1d450:	e7f1      	b.n	1d436 <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1d452:	2210      	movs	r2, #16
   1d454:	2100      	movs	r1, #0
   1d456:	eb0d 0002 	add.w	r0, sp, r2
   1d45a:	f00d fe9c 	bl	2b196 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1d45e:	2200      	movs	r2, #0
   1d460:	4631      	mov	r1, r6
   1d462:	4638      	mov	r0, r7
   1d464:	f7ff fe70 	bl	1d148 <bt_att_create_pdu>
   1d468:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1d46a:	b350      	cbz	r0, 1d4c2 <att_read_rsp+0xaa>
	data.chan = chan;
   1d46c:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1d46e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1d472:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d476:	2301      	movs	r3, #1
   1d478:	f88d 301c 	strb.w	r3, [sp, #28]
   1d47c:	ab04      	add	r3, sp, #16
   1d47e:	9302      	str	r3, [sp, #8]
   1d480:	4b11      	ldr	r3, [pc, #68]	; (1d4c8 <att_read_rsp+0xb0>)
   1d482:	9301      	str	r3, [sp, #4]
   1d484:	2200      	movs	r2, #0
   1d486:	9200      	str	r2, [sp, #0]
   1d488:	4613      	mov	r3, r2
   1d48a:	4629      	mov	r1, r5
   1d48c:	4628      	mov	r0, r5
   1d48e:	f000 fe05 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1d492:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1d496:	b926      	cbnz	r6, 1d4a2 <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   1d498:	9906      	ldr	r1, [sp, #24]
   1d49a:	4620      	mov	r0, r4
   1d49c:	f00e ff2f 	bl	2c2fe <bt_att_chan_send_rsp>
	return 0;
   1d4a0:	e7c9      	b.n	1d436 <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d4a2:	9b06      	ldr	r3, [sp, #24]
   1d4a4:	6958      	ldr	r0, [r3, #20]
   1d4a6:	f7ff f8a5 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d4aa:	9806      	ldr	r0, [sp, #24]
   1d4ac:	f002 f80a 	bl	1f4c4 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1d4b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1d4b4:	462a      	mov	r2, r5
   1d4b6:	4641      	mov	r1, r8
   1d4b8:	4620      	mov	r0, r4
   1d4ba:	f00f f917 	bl	2c6ec <send_err_rsp>
		return 0;
   1d4be:	2600      	movs	r6, #0
   1d4c0:	e7b9      	b.n	1d436 <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   1d4c2:	260e      	movs	r6, #14
   1d4c4:	e7b7      	b.n	1d436 <att_read_rsp+0x1e>
   1d4c6:	bf00      	nop
   1d4c8:	0002c4d3 	.word	0x0002c4d3

0001d4cc <att_read_type_rsp>:
{
   1d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4d0:	b08a      	sub	sp, #40	; 0x28
   1d4d2:	4604      	mov	r4, r0
   1d4d4:	460f      	mov	r7, r1
   1d4d6:	4615      	mov	r5, r2
   1d4d8:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1d4da:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d4de:	2218      	movs	r2, #24
   1d4e0:	2100      	movs	r1, #0
   1d4e2:	a804      	add	r0, sp, #16
   1d4e4:	f00d fe57 	bl	2b196 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1d4e8:	2201      	movs	r2, #1
   1d4ea:	2109      	movs	r1, #9
   1d4ec:	4640      	mov	r0, r8
   1d4ee:	f7ff fe2b 	bl	1d148 <bt_att_create_pdu>
   1d4f2:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1d4f4:	b380      	cbz	r0, 1d558 <att_read_type_rsp+0x8c>
	data.chan = chan;
   1d4f6:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1d4f8:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1d4fa:	2101      	movs	r1, #1
   1d4fc:	3008      	adds	r0, #8
   1d4fe:	f002 f8ff 	bl	1f700 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d502:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1d504:	2200      	movs	r2, #0
   1d506:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d508:	230a      	movs	r3, #10
   1d50a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1d50e:	ab04      	add	r3, sp, #16
   1d510:	9302      	str	r3, [sp, #8]
   1d512:	4b12      	ldr	r3, [pc, #72]	; (1d55c <att_read_type_rsp+0x90>)
   1d514:	9301      	str	r3, [sp, #4]
   1d516:	9200      	str	r2, [sp, #0]
   1d518:	4613      	mov	r3, r2
   1d51a:	4631      	mov	r1, r6
   1d51c:	4628      	mov	r0, r5
   1d51e:	f000 fdbd 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1d522:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1d526:	b93e      	cbnz	r6, 1d538 <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1d528:	9906      	ldr	r1, [sp, #24]
   1d52a:	4620      	mov	r0, r4
   1d52c:	f00e fee7 	bl	2c2fe <bt_att_chan_send_rsp>
}
   1d530:	4630      	mov	r0, r6
   1d532:	b00a      	add	sp, #40	; 0x28
   1d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d538:	9b06      	ldr	r3, [sp, #24]
   1d53a:	6958      	ldr	r0, [r3, #20]
   1d53c:	f7ff f85a 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d540:	9806      	ldr	r0, [sp, #24]
   1d542:	f001 ffbf 	bl	1f4c4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1d546:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1d54a:	462a      	mov	r2, r5
   1d54c:	2108      	movs	r1, #8
   1d54e:	4620      	mov	r0, r4
   1d550:	f00f f8cc 	bl	2c6ec <send_err_rsp>
		return 0;
   1d554:	2600      	movs	r6, #0
   1d556:	e7eb      	b.n	1d530 <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1d558:	260e      	movs	r6, #14
   1d55a:	e7e9      	b.n	1d530 <att_read_type_rsp+0x64>
   1d55c:	0001c861 	.word	0x0001c861

0001d560 <att_find_type_rsp>:
{
   1d560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d564:	b08a      	sub	sp, #40	; 0x28
   1d566:	4604      	mov	r4, r0
   1d568:	460d      	mov	r5, r1
   1d56a:	4616      	mov	r6, r2
   1d56c:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1d56e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d572:	2214      	movs	r2, #20
   1d574:	2100      	movs	r1, #0
   1d576:	eb0d 0002 	add.w	r0, sp, r2
   1d57a:	f00d fe0c 	bl	2b196 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1d57e:	2200      	movs	r2, #0
   1d580:	2107      	movs	r1, #7
   1d582:	4640      	mov	r0, r8
   1d584:	f7ff fde0 	bl	1d148 <bt_att_create_pdu>
   1d588:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1d58a:	b378      	cbz	r0, 1d5ec <att_find_type_rsp+0x8c>
	data.chan = chan;
   1d58c:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1d58e:	2200      	movs	r2, #0
   1d590:	9207      	str	r2, [sp, #28]
	data.value = value;
   1d592:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1d594:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d598:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d59c:	230a      	movs	r3, #10
   1d59e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1d5a2:	ab05      	add	r3, sp, #20
   1d5a4:	9302      	str	r3, [sp, #8]
   1d5a6:	4b12      	ldr	r3, [pc, #72]	; (1d5f0 <att_find_type_rsp+0x90>)
   1d5a8:	9301      	str	r3, [sp, #4]
   1d5aa:	9200      	str	r2, [sp, #0]
   1d5ac:	4613      	mov	r3, r2
   1d5ae:	4631      	mov	r1, r6
   1d5b0:	4628      	mov	r0, r5
   1d5b2:	f000 fd73 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1d5b6:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1d5ba:	b93e      	cbnz	r6, 1d5cc <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   1d5bc:	9906      	ldr	r1, [sp, #24]
   1d5be:	4620      	mov	r0, r4
   1d5c0:	f00e fe9d 	bl	2c2fe <bt_att_chan_send_rsp>
}
   1d5c4:	4630      	mov	r0, r6
   1d5c6:	b00a      	add	sp, #40	; 0x28
   1d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d5cc:	9b06      	ldr	r3, [sp, #24]
   1d5ce:	6958      	ldr	r0, [r3, #20]
   1d5d0:	f7ff f810 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d5d4:	9806      	ldr	r0, [sp, #24]
   1d5d6:	f001 ff75 	bl	1f4c4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1d5da:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1d5de:	462a      	mov	r2, r5
   1d5e0:	2106      	movs	r1, #6
   1d5e2:	4620      	mov	r0, r4
   1d5e4:	f00f f882 	bl	2c6ec <send_err_rsp>
		return 0;
   1d5e8:	2600      	movs	r6, #0
   1d5ea:	e7eb      	b.n	1d5c4 <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1d5ec:	260e      	movs	r6, #14
   1d5ee:	e7e9      	b.n	1d5c4 <att_find_type_rsp+0x64>
   1d5f0:	0001c909 	.word	0x0001c909

0001d5f4 <att_find_info_rsp>:
{
   1d5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5f6:	b089      	sub	sp, #36	; 0x24
   1d5f8:	4604      	mov	r4, r0
   1d5fa:	460f      	mov	r7, r1
   1d5fc:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1d5fe:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d600:	2210      	movs	r2, #16
   1d602:	2100      	movs	r1, #0
   1d604:	eb0d 0002 	add.w	r0, sp, r2
   1d608:	f00d fdc5 	bl	2b196 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1d60c:	2200      	movs	r2, #0
   1d60e:	2105      	movs	r1, #5
   1d610:	4628      	mov	r0, r5
   1d612:	f7ff fd99 	bl	1d148 <bt_att_create_pdu>
   1d616:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1d618:	b318      	cbz	r0, 1d662 <att_find_info_rsp+0x6e>
	data.chan = chan;
   1d61a:	9404      	str	r4, [sp, #16]
   1d61c:	ab04      	add	r3, sp, #16
   1d61e:	9302      	str	r3, [sp, #8]
   1d620:	4b11      	ldr	r3, [pc, #68]	; (1d668 <att_find_info_rsp+0x74>)
   1d622:	9301      	str	r3, [sp, #4]
   1d624:	2200      	movs	r2, #0
   1d626:	9200      	str	r2, [sp, #0]
   1d628:	4613      	mov	r3, r2
   1d62a:	4631      	mov	r1, r6
   1d62c:	4638      	mov	r0, r7
   1d62e:	f000 fd35 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1d632:	9b06      	ldr	r3, [sp, #24]
   1d634:	b133      	cbz	r3, 1d644 <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   1d636:	9905      	ldr	r1, [sp, #20]
   1d638:	4620      	mov	r0, r4
   1d63a:	f00e fe60 	bl	2c2fe <bt_att_chan_send_rsp>
	return 0;
   1d63e:	2000      	movs	r0, #0
}
   1d640:	b009      	add	sp, #36	; 0x24
   1d642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d644:	9b05      	ldr	r3, [sp, #20]
   1d646:	6958      	ldr	r0, [r3, #20]
   1d648:	f7fe ffd4 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d64c:	9805      	ldr	r0, [sp, #20]
   1d64e:	f001 ff39 	bl	1f4c4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1d652:	230a      	movs	r3, #10
   1d654:	463a      	mov	r2, r7
   1d656:	2104      	movs	r1, #4
   1d658:	4620      	mov	r0, r4
   1d65a:	f00f f847 	bl	2c6ec <send_err_rsp>
		return 0;
   1d65e:	2000      	movs	r0, #0
   1d660:	e7ee      	b.n	1d640 <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1d662:	200e      	movs	r0, #14
   1d664:	e7ec      	b.n	1d640 <att_find_info_rsp+0x4c>
   1d666:	bf00      	nop
   1d668:	0002c51b 	.word	0x0002c51b

0001d66c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1d66c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1d66e:	4809      	ldr	r0, [pc, #36]	; (1d694 <bt_att_init+0x28>)
   1d670:	f011 fc4a 	bl	2ef08 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1d674:	2400      	movs	r4, #0
   1d676:	e008      	b.n	1d68a <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1d678:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1d67c:	0093      	lsls	r3, r2, #2
   1d67e:	4906      	ldr	r1, [pc, #24]	; (1d698 <bt_att_init+0x2c>)
   1d680:	4419      	add	r1, r3
   1d682:	4804      	ldr	r0, [pc, #16]	; (1d694 <bt_att_init+0x28>)
   1d684:	f011 fc4d 	bl	2ef22 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1d688:	3401      	adds	r4, #1
   1d68a:	2c02      	cmp	r4, #2
   1d68c:	d9f4      	bls.n	1d678 <bt_att_init+0xc>
	}

	bt_gatt_init();
   1d68e:	f000 fc87 	bl	1dfa0 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1d692:	bd10      	pop	{r4, pc}
   1d694:	200085a4 	.word	0x200085a4
   1d698:	200099ec 	.word	0x200099ec

0001d69c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1d69c:	b530      	push	{r4, r5, lr}
   1d69e:	b083      	sub	sp, #12
   1d6a0:	4605      	mov	r5, r0
   1d6a2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1d6a4:	2300      	movs	r3, #0
   1d6a6:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1d6a8:	f00a fa50 	bl	27b4c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1d6ac:	4b0b      	ldr	r3, [pc, #44]	; (1d6dc <bt_att_req_alloc+0x40>)
   1d6ae:	681b      	ldr	r3, [r3, #0]
   1d6b0:	4283      	cmp	r3, r0
   1d6b2:	d00e      	beq.n	1d6d2 <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1d6b4:	462a      	mov	r2, r5
   1d6b6:	4623      	mov	r3, r4
   1d6b8:	a901      	add	r1, sp, #4
   1d6ba:	4809      	ldr	r0, [pc, #36]	; (1d6e0 <bt_att_req_alloc+0x44>)
   1d6bc:	f007 fac4 	bl	24c48 <k_mem_slab_alloc>
   1d6c0:	b950      	cbnz	r0, 1d6d8 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1d6c2:	2210      	movs	r2, #16
   1d6c4:	2100      	movs	r1, #0
   1d6c6:	9801      	ldr	r0, [sp, #4]
   1d6c8:	f00d fd65 	bl	2b196 <memset>

	return req;
   1d6cc:	9801      	ldr	r0, [sp, #4]
}
   1d6ce:	b003      	add	sp, #12
   1d6d0:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1d6d2:	2500      	movs	r5, #0
   1d6d4:	462c      	mov	r4, r5
   1d6d6:	e7ed      	b.n	1d6b4 <bt_att_req_alloc+0x18>
		return NULL;
   1d6d8:	2000      	movs	r0, #0
   1d6da:	e7f8      	b.n	1d6ce <bt_att_req_alloc+0x32>
   1d6dc:	20009a28 	.word	0x20009a28
   1d6e0:	20008510 	.word	0x20008510

0001d6e4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1d6e4:	b500      	push	{lr}
   1d6e6:	b083      	sub	sp, #12
   1d6e8:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1d6ea:	6883      	ldr	r3, [r0, #8]
   1d6ec:	b14b      	cbz	r3, 1d702 <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1d6ee:	6958      	ldr	r0, [r3, #20]
   1d6f0:	f7fe ff80 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1d6f4:	9b01      	ldr	r3, [sp, #4]
   1d6f6:	6898      	ldr	r0, [r3, #8]
   1d6f8:	f001 fee4 	bl	1f4c4 <net_buf_unref>
		req->buf = NULL;
   1d6fc:	9b01      	ldr	r3, [sp, #4]
   1d6fe:	2200      	movs	r2, #0
   1d700:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1d702:	a901      	add	r1, sp, #4
   1d704:	4802      	ldr	r0, [pc, #8]	; (1d710 <bt_att_req_free+0x2c>)
   1d706:	f007 fb11 	bl	24d2c <k_mem_slab_free>
}
   1d70a:	b003      	add	sp, #12
   1d70c:	f85d fb04 	ldr.w	pc, [sp], #4
   1d710:	20008510 	.word	0x20008510

0001d714 <att_handle_rsp>:
{
   1d714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d718:	b08a      	sub	sp, #40	; 0x28
   1d71a:	4604      	mov	r4, r0
   1d71c:	460f      	mov	r7, r1
   1d71e:	4691      	mov	r9, r2
   1d720:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1d722:	30c0      	adds	r0, #192	; 0xc0
   1d724:	f008 ff1a 	bl	2655c <k_work_cancel_delayable>
	if (!chan->req) {
   1d728:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1d72c:	b1f8      	cbz	r0, 1d76e <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1d72e:	4b25      	ldr	r3, [pc, #148]	; (1d7c4 <att_handle_rsp+0xb0>)
   1d730:	4298      	cmp	r0, r3
   1d732:	d042      	beq.n	1d7ba <att_handle_rsp+0xa6>
	func = chan->req->func;
   1d734:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1d736:	f04f 0a00 	mov.w	sl, #0
   1d73a:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1d73e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1d742:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1d746:	f7ff ffcd 	bl	1d6e4 <bt_att_req_free>
	chan->req = NULL;
   1d74a:	f8c4 a09c 	str.w	sl, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   1d74e:	6820      	ldr	r0, [r4, #0]
   1d750:	f00e fc97 	bl	2c082 <att_req_send_process>
	if (func) {
   1d754:	b13d      	cbz	r5, 1d766 <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   1d756:	6823      	ldr	r3, [r4, #0]
   1d758:	6818      	ldr	r0, [r3, #0]
   1d75a:	f8cd 8000 	str.w	r8, [sp]
   1d75e:	464b      	mov	r3, r9
   1d760:	463a      	mov	r2, r7
   1d762:	4631      	mov	r1, r6
   1d764:	47a8      	blx	r5
}
   1d766:	2000      	movs	r0, #0
   1d768:	b00a      	add	sp, #40	; 0x28
   1d76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
   1d76e:	4b16      	ldr	r3, [pc, #88]	; (1d7c8 <att_handle_rsp+0xb4>)
   1d770:	9309      	str	r3, [sp, #36]	; 0x24
   1d772:	2302      	movs	r3, #2
   1d774:	f88d 300c 	strb.w	r3, [sp, #12]
   1d778:	2500      	movs	r5, #0
   1d77a:	f88d 500d 	strb.w	r5, [sp, #13]
   1d77e:	f88d 500e 	strb.w	r5, [sp, #14]
   1d782:	f88d 500f 	strb.w	r5, [sp, #15]
   1d786:	9a03      	ldr	r2, [sp, #12]
   1d788:	9208      	str	r2, [sp, #32]
   1d78a:	4629      	mov	r1, r5
   1d78c:	f365 0100 	bfi	r1, r5, #0, #1
   1d790:	f365 0141 	bfi	r1, r5, #1, #1
   1d794:	f365 0182 	bfi	r1, r5, #2, #1
   1d798:	f365 01c5 	bfi	r1, r5, #3, #3
   1d79c:	f363 1188 	bfi	r1, r3, #6, #3
   1d7a0:	2308      	movs	r3, #8
   1d7a2:	f363 2152 	bfi	r1, r3, #9, #10
   1d7a6:	f365 41de 	bfi	r1, r5, #19, #12
   1d7aa:	f365 71df 	bfi	r1, r5, #31, #1
   1d7ae:	462b      	mov	r3, r5
   1d7b0:	aa08      	add	r2, sp, #32
   1d7b2:	4806      	ldr	r0, [pc, #24]	; (1d7cc <att_handle_rsp+0xb8>)
   1d7b4:	f7f6 faa2 	bl	13cfc <z_impl_z_log_msg_static_create>
		goto process;
   1d7b8:	e7c9      	b.n	1d74e <att_handle_rsp+0x3a>
		chan->req = NULL;
   1d7ba:	2500      	movs	r5, #0
   1d7bc:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
		goto process;
   1d7c0:	e7c5      	b.n	1d74e <att_handle_rsp+0x3a>
   1d7c2:	bf00      	nop
   1d7c4:	20009a2c 	.word	0x20009a2c
   1d7c8:	00032608 	.word	0x00032608
   1d7cc:	0002f7f8 	.word	0x0002f7f8

0001d7d0 <att_reset>:
{
   1d7d0:	b530      	push	{r4, r5, lr}
   1d7d2:	b085      	sub	sp, #20
   1d7d4:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1d7d6:	e005      	b.n	1d7e4 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1d7d8:	6960      	ldr	r0, [r4, #20]
   1d7da:	f7fe ff0b 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(buf);
   1d7de:	4620      	mov	r0, r4
   1d7e0:	f001 fe70 	bl	1f4c4 <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1d7e4:	2200      	movs	r2, #0
   1d7e6:	2300      	movs	r3, #0
   1d7e8:	9803      	ldr	r0, [sp, #12]
   1d7ea:	300c      	adds	r0, #12
   1d7ec:	f001 fcd4 	bl	1f198 <net_buf_get>
   1d7f0:	4604      	mov	r4, r0
   1d7f2:	2800      	cmp	r0, #0
   1d7f4:	d1f0      	bne.n	1d7d8 <att_reset+0x8>
   1d7f6:	e00b      	b.n	1d810 <att_reset+0x40>
	list->tail = node;
   1d7f8:	609a      	str	r2, [r3, #8]
}
   1d7fa:	e011      	b.n	1d820 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1d7fc:	6818      	ldr	r0, [r3, #0]
   1d7fe:	68e3      	ldr	r3, [r4, #12]
   1d800:	9300      	str	r3, [sp, #0]
   1d802:	2300      	movs	r3, #0
   1d804:	461a      	mov	r2, r3
   1d806:	210e      	movs	r1, #14
   1d808:	47a8      	blx	r5
		bt_att_req_free(req);
   1d80a:	4620      	mov	r0, r4
   1d80c:	f7ff ff6a 	bl	1d6e4 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1d810:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1d812:	685c      	ldr	r4, [r3, #4]
   1d814:	b144      	cbz	r4, 1d828 <att_reset+0x58>
	return node->next;
   1d816:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1d818:	605a      	str	r2, [r3, #4]
	return list->tail;
   1d81a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d81c:	42a1      	cmp	r1, r4
   1d81e:	d0eb      	beq.n	1d7f8 <att_reset+0x28>
		if (req->func) {
   1d820:	6865      	ldr	r5, [r4, #4]
   1d822:	2d00      	cmp	r5, #0
   1d824:	d1ea      	bne.n	1d7fc <att_reset+0x2c>
   1d826:	e7f0      	b.n	1d80a <att_reset+0x3a>
	att->conn = NULL;
   1d828:	2200      	movs	r2, #0
   1d82a:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1d82c:	a903      	add	r1, sp, #12
   1d82e:	4802      	ldr	r0, [pc, #8]	; (1d838 <att_reset+0x68>)
   1d830:	f007 fa7c 	bl	24d2c <k_mem_slab_free>
}
   1d834:	b005      	add	sp, #20
   1d836:	bd30      	pop	{r4, r5, pc}
   1d838:	200084d0 	.word	0x200084d0

0001d83c <att_timeout>:
{
   1d83c:	b510      	push	{r4, lr}
   1d83e:	b088      	sub	sp, #32
   1d840:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1d842:	4b15      	ldr	r3, [pc, #84]	; (1d898 <att_timeout+0x5c>)
   1d844:	9307      	str	r3, [sp, #28]
   1d846:	2302      	movs	r3, #2
   1d848:	f88d 3004 	strb.w	r3, [sp, #4]
   1d84c:	2300      	movs	r3, #0
   1d84e:	f88d 3005 	strb.w	r3, [sp, #5]
   1d852:	f88d 3006 	strb.w	r3, [sp, #6]
   1d856:	f88d 3007 	strb.w	r3, [sp, #7]
   1d85a:	9a01      	ldr	r2, [sp, #4]
   1d85c:	9206      	str	r2, [sp, #24]
   1d85e:	4619      	mov	r1, r3
   1d860:	f363 0100 	bfi	r1, r3, #0, #1
   1d864:	f363 0141 	bfi	r1, r3, #1, #1
   1d868:	f363 0182 	bfi	r1, r3, #2, #1
   1d86c:	f363 01c5 	bfi	r1, r3, #3, #3
   1d870:	2201      	movs	r2, #1
   1d872:	f362 1188 	bfi	r1, r2, #6, #3
   1d876:	2208      	movs	r2, #8
   1d878:	f362 2152 	bfi	r1, r2, #9, #10
   1d87c:	f363 41de 	bfi	r1, r3, #19, #12
   1d880:	f363 71df 	bfi	r1, r3, #31, #1
   1d884:	aa06      	add	r2, sp, #24
   1d886:	4805      	ldr	r0, [pc, #20]	; (1d89c <att_timeout+0x60>)
   1d888:	f7f6 fa38 	bl	13cfc <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
   1d88c:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
   1d890:	f00f f8cf 	bl	2ca32 <bt_att_disconnected>
}
   1d894:	b008      	add	sp, #32
   1d896:	bd10      	pop	{r4, pc}
   1d898:	00032620 	.word	0x00032620
   1d89c:	0002f7f8 	.word	0x0002f7f8

0001d8a0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1d8a0:	b538      	push	{r3, r4, r5, lr}
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1d8a2:	b170      	cbz	r0, 1d8c2 <bt_att_send+0x22>
   1d8a4:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(buf);
   1d8a6:	b1c9      	cbz	r1, 1d8dc <bt_att_send+0x3c>

	att = att_get(conn);
   1d8a8:	f7fe fd18 	bl	1c2dc <att_get>
	if (!att) {
   1d8ac:	4605      	mov	r5, r0
   1d8ae:	b310      	cbz	r0, 1d8f6 <bt_att_send+0x56>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	net_buf_put(&att->tx_queue, buf);
   1d8b0:	4621      	mov	r1, r4
   1d8b2:	300c      	adds	r0, #12
   1d8b4:	f001 fdd4 	bl	1f460 <net_buf_put>
	att_send_process(att);
   1d8b8:	4628      	mov	r0, r5
   1d8ba:	f00e fcb6 	bl	2c22a <att_send_process>

	return 0;
   1d8be:	2000      	movs	r0, #0
}
   1d8c0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(conn);
   1d8c2:	4c11      	ldr	r4, [pc, #68]	; (1d908 <bt_att_send+0x68>)
   1d8c4:	f640 63a8 	movw	r3, #3752	; 0xea8
   1d8c8:	4622      	mov	r2, r4
   1d8ca:	4910      	ldr	r1, [pc, #64]	; (1d90c <bt_att_send+0x6c>)
   1d8cc:	4810      	ldr	r0, [pc, #64]	; (1d910 <bt_att_send+0x70>)
   1d8ce:	f00c f90c 	bl	29aea <assert_print>
   1d8d2:	f640 61a8 	movw	r1, #3752	; 0xea8
   1d8d6:	4620      	mov	r0, r4
   1d8d8:	f00c f900 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1d8dc:	4c0a      	ldr	r4, [pc, #40]	; (1d908 <bt_att_send+0x68>)
   1d8de:	f640 63a9 	movw	r3, #3753	; 0xea9
   1d8e2:	4622      	mov	r2, r4
   1d8e4:	490b      	ldr	r1, [pc, #44]	; (1d914 <bt_att_send+0x74>)
   1d8e6:	480a      	ldr	r0, [pc, #40]	; (1d910 <bt_att_send+0x70>)
   1d8e8:	f00c f8ff 	bl	29aea <assert_print>
   1d8ec:	f640 61a9 	movw	r1, #3753	; 0xea9
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f00c f8f3 	bl	29adc <assert_post_action>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1d8f6:	6960      	ldr	r0, [r4, #20]
   1d8f8:	f7fe fe7c 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(buf);
   1d8fc:	4620      	mov	r0, r4
   1d8fe:	f001 fde1 	bl	1f4c4 <net_buf_unref>
		return -ENOTCONN;
   1d902:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d906:	e7db      	b.n	1d8c0 <bt_att_send+0x20>
   1d908:	00032384 	.word	0x00032384
   1d90c:	00031fa0 	.word	0x00031fa0
   1d910:	0002fdac 	.word	0x0002fdac
   1d914:	00032c24 	.word	0x00032c24

0001d918 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1d918:	b510      	push	{r4, lr}
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1d91a:	b180      	cbz	r0, 1d93e <bt_att_req_send+0x26>
   1d91c:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(req);
   1d91e:	b1d9      	cbz	r1, 1d958 <bt_att_req_send+0x40>

	att = att_get(conn);
   1d920:	f7fe fcdc 	bl	1c2dc <att_get>
	if (!att) {
   1d924:	4603      	mov	r3, r0
   1d926:	b338      	cbz	r0, 1d978 <bt_att_req_send+0x60>
	parent->next = child;
   1d928:	2200      	movs	r2, #0
   1d92a:	6022      	str	r2, [r4, #0]
	return list->tail;
   1d92c:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1d92e:	b302      	cbz	r2, 1d972 <bt_att_req_send+0x5a>
	parent->next = child;
   1d930:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d932:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1d934:	4618      	mov	r0, r3
   1d936:	f00e fba4 	bl	2c082 <att_req_send_process>

	return 0;
   1d93a:	2000      	movs	r0, #0
}
   1d93c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   1d93e:	4c10      	ldr	r4, [pc, #64]	; (1d980 <bt_att_req_send+0x68>)
   1d940:	f640 63be 	movw	r3, #3774	; 0xebe
   1d944:	4622      	mov	r2, r4
   1d946:	490f      	ldr	r1, [pc, #60]	; (1d984 <bt_att_req_send+0x6c>)
   1d948:	480f      	ldr	r0, [pc, #60]	; (1d988 <bt_att_req_send+0x70>)
   1d94a:	f00c f8ce 	bl	29aea <assert_print>
   1d94e:	f640 61be 	movw	r1, #3774	; 0xebe
   1d952:	4620      	mov	r0, r4
   1d954:	f00c f8c2 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(req);
   1d958:	4c09      	ldr	r4, [pc, #36]	; (1d980 <bt_att_req_send+0x68>)
   1d95a:	f640 63bf 	movw	r3, #3775	; 0xebf
   1d95e:	4622      	mov	r2, r4
   1d960:	490a      	ldr	r1, [pc, #40]	; (1d98c <bt_att_req_send+0x74>)
   1d962:	4809      	ldr	r0, [pc, #36]	; (1d988 <bt_att_req_send+0x70>)
   1d964:	f00c f8c1 	bl	29aea <assert_print>
   1d968:	f640 61bf 	movw	r1, #3775	; 0xebf
   1d96c:	4620      	mov	r0, r4
   1d96e:	f00c f8b5 	bl	29adc <assert_post_action>
   1d972:	6084      	str	r4, [r0, #8]
	list->head = node;
   1d974:	6044      	str	r4, [r0, #4]
}
   1d976:	e7dd      	b.n	1d934 <bt_att_req_send+0x1c>
		return -ENOTCONN;
   1d978:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d97c:	e7de      	b.n	1d93c <bt_att_req_send+0x24>
   1d97e:	bf00      	nop
   1d980:	00032384 	.word	0x00032384
   1d984:	00031fa0 	.word	0x00031fa0
   1d988:	0002fdac 	.word	0x0002fdac
   1d98c:	000324b4 	.word	0x000324b4

0001d990 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d990:	4b15      	ldr	r3, [pc, #84]	; (1d9e8 <bt_gatt_service_init+0x58>)
   1d992:	2201      	movs	r2, #1
   1d994:	e8d3 1fef 	ldaex	r1, [r3]
   1d998:	2900      	cmp	r1, #0
   1d99a:	d103      	bne.n	1d9a4 <bt_gatt_service_init+0x14>
   1d99c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1d9a0:	2800      	cmp	r0, #0
   1d9a2:	d1f7      	bne.n	1d994 <bt_gatt_service_init+0x4>
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1d9a4:	d101      	bne.n	1d9aa <bt_gatt_service_init+0x1a>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d9a6:	4b11      	ldr	r3, [pc, #68]	; (1d9ec <bt_gatt_service_init+0x5c>)
   1d9a8:	e006      	b.n	1d9b8 <bt_gatt_service_init+0x28>
   1d9aa:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1d9ac:	685a      	ldr	r2, [r3, #4]
   1d9ae:	4910      	ldr	r1, [pc, #64]	; (1d9f0 <bt_gatt_service_init+0x60>)
   1d9b0:	8808      	ldrh	r0, [r1, #0]
   1d9b2:	4402      	add	r2, r0
   1d9b4:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d9b6:	3308      	adds	r3, #8
   1d9b8:	4a0e      	ldr	r2, [pc, #56]	; (1d9f4 <bt_gatt_service_init+0x64>)
   1d9ba:	4293      	cmp	r3, r2
   1d9bc:	d803      	bhi.n	1d9c6 <bt_gatt_service_init+0x36>
   1d9be:	4a0d      	ldr	r2, [pc, #52]	; (1d9f4 <bt_gatt_service_init+0x64>)
   1d9c0:	4293      	cmp	r3, r2
   1d9c2:	d3f3      	bcc.n	1d9ac <bt_gatt_service_init+0x1c>
   1d9c4:	4770      	bx	lr
{
   1d9c6:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d9c8:	4c0b      	ldr	r4, [pc, #44]	; (1d9f8 <bt_gatt_service_init+0x68>)
   1d9ca:	f240 530e 	movw	r3, #1294	; 0x50e
   1d9ce:	4622      	mov	r2, r4
   1d9d0:	490a      	ldr	r1, [pc, #40]	; (1d9fc <bt_gatt_service_init+0x6c>)
   1d9d2:	480b      	ldr	r0, [pc, #44]	; (1da00 <bt_gatt_service_init+0x70>)
   1d9d4:	f00c f889 	bl	29aea <assert_print>
   1d9d8:	480a      	ldr	r0, [pc, #40]	; (1da04 <bt_gatt_service_init+0x74>)
   1d9da:	f00c f886 	bl	29aea <assert_print>
   1d9de:	f240 510e 	movw	r1, #1294	; 0x50e
   1d9e2:	4620      	mov	r0, r4
   1d9e4:	f00c f87a 	bl	29adc <assert_post_action>
   1d9e8:	20009a70 	.word	0x20009a70
   1d9ec:	0002f7d0 	.word	0x0002f7d0
   1d9f0:	20009d4c 	.word	0x20009d4c
   1d9f4:	0002f7e8 	.word	0x0002f7e8
   1d9f8:	000326a4 	.word	0x000326a4
   1d9fc:	000326d4 	.word	0x000326d4
   1da00:	0002fdac 	.word	0x0002fdac
   1da04:	00030500 	.word	0x00030500

0001da08 <find_cf_cfg>:
{
   1da08:	b570      	push	{r4, r5, r6, lr}
   1da0a:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1da0c:	2400      	movs	r4, #0
   1da0e:	b114      	cbz	r4, 1da16 <find_cf_cfg+0xe>
	return NULL;
   1da10:	2500      	movs	r5, #0
}
   1da12:	4628      	mov	r0, r5
   1da14:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1da16:	4d0d      	ldr	r5, [pc, #52]	; (1da4c <find_cf_cfg+0x44>)
   1da18:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1da1c:	b166      	cbz	r6, 1da38 <find_cf_cfg+0x30>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1da1e:	0123      	lsls	r3, r4, #4
   1da20:	490a      	ldr	r1, [pc, #40]	; (1da4c <find_cf_cfg+0x44>)
   1da22:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1da26:	3201      	adds	r2, #1
   1da28:	5cc9      	ldrb	r1, [r1, r3]
   1da2a:	4630      	mov	r0, r6
   1da2c:	f00e f912 	bl	2bc54 <bt_conn_is_peer_addr_le>
   1da30:	2800      	cmp	r0, #0
   1da32:	d1ee      	bne.n	1da12 <find_cf_cfg+0xa>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1da34:	3401      	adds	r4, #1
   1da36:	e7ea      	b.n	1da0e <find_cf_cfg+0x6>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1da38:	4628      	mov	r0, r5
	return memcmp(a, b, sizeof(*a));
   1da3a:	2207      	movs	r2, #7
   1da3c:	4904      	ldr	r1, [pc, #16]	; (1da50 <find_cf_cfg+0x48>)
   1da3e:	3001      	adds	r0, #1
   1da40:	f00d fb68 	bl	2b114 <memcmp>
   1da44:	2800      	cmp	r0, #0
   1da46:	d1f5      	bne.n	1da34 <find_cf_cfg+0x2c>
   1da48:	e7e3      	b.n	1da12 <find_cf_cfg+0xa>
   1da4a:	bf00      	nop
   1da4c:	20009a54 	.word	0x20009a54
   1da50:	0003136c 	.word	0x0003136c

0001da54 <find_sc_cfg>:
{
   1da54:	b570      	push	{r4, r5, r6, lr}
   1da56:	4606      	mov	r6, r0
   1da58:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1da5a:	2400      	movs	r4, #0
   1da5c:	b10c      	cbz	r4, 1da62 <find_sc_cfg+0xe>
	return NULL;
   1da5e:	2000      	movs	r0, #0
}
   1da60:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   1da62:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1da66:	4a0c      	ldr	r2, [pc, #48]	; (1da98 <find_sc_cfg+0x44>)
   1da68:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1da6c:	429e      	cmp	r6, r3
   1da6e:	d001      	beq.n	1da74 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1da70:	3401      	adds	r4, #1
   1da72:	e7f3      	b.n	1da5c <find_sc_cfg+0x8>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1da74:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1da78:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   1da7c:	2207      	movs	r2, #7
   1da7e:	4629      	mov	r1, r5
   1da80:	3001      	adds	r0, #1
   1da82:	f00d fb47 	bl	2b114 <memcmp>
		if (id == sc_cfg[i].id &&
   1da86:	2800      	cmp	r0, #0
   1da88:	d1f2      	bne.n	1da70 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1da8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1da8e:	4802      	ldr	r0, [pc, #8]	; (1da98 <find_sc_cfg+0x44>)
   1da90:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1da94:	e7e4      	b.n	1da60 <find_sc_cfg+0xc>
   1da96:	bf00      	nop
   1da98:	20009a64 	.word	0x20009a64

0001da9c <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1da9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da9e:	4607      	mov	r7, r0
   1daa0:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1daa2:	2400      	movs	r4, #0
   1daa4:	b114      	cbz	r4, 1daac <find_ccc_cfg+0x10>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
			return cfg;
		}
	}

	return NULL;
   1daa6:	2600      	movs	r6, #0
}
   1daa8:	4630      	mov	r0, r6
   1daaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1daac:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1dab0:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   1dab4:	b167      	cbz	r7, 1dad0 <find_ccc_cfg+0x34>
						    &cfg->peer)) {
   1dab6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1daba:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1dabc:	3201      	adds	r2, #1
   1dabe:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   1dac2:	4638      	mov	r0, r7
   1dac4:	f00e f8c6 	bl	2bc54 <bt_conn_is_peer_addr_le>
   1dac8:	2800      	cmp	r0, #0
   1daca:	d1ed      	bne.n	1daa8 <find_ccc_cfg+0xc>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1dacc:	3401      	adds	r4, #1
   1dace:	e7e9      	b.n	1daa4 <find_ccc_cfg+0x8>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1dad0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1dad4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   1dad8:	2207      	movs	r2, #7
   1dada:	4903      	ldr	r1, [pc, #12]	; (1dae8 <find_ccc_cfg+0x4c>)
   1dadc:	3001      	adds	r0, #1
   1dade:	f00d fb19 	bl	2b114 <memcmp>
   1dae2:	2800      	cmp	r0, #0
   1dae4:	d1f2      	bne.n	1dacc <find_ccc_cfg+0x30>
   1dae6:	e7df      	b.n	1daa8 <find_ccc_cfg+0xc>
   1dae8:	0003136c 	.word	0x0003136c

0001daec <cf_write>:
{
   1daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1daf0:	b088      	sub	sp, #32
   1daf2:	461d      	mov	r5, r3
   1daf4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   1daf8:	2b01      	cmp	r3, #1
   1dafa:	d852      	bhi.n	1dba2 <cf_write+0xb6>
   1dafc:	4606      	mov	r6, r0
   1dafe:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1db00:	46a8      	mov	r8, r5
   1db02:	442b      	add	r3, r5
   1db04:	2b01      	cmp	r3, #1
   1db06:	d84f      	bhi.n	1dba8 <cf_write+0xbc>
	cfg = find_cf_cfg(conn);
   1db08:	f7ff ff7e 	bl	1da08 <find_cf_cfg>
	if (!cfg) {
   1db0c:	4604      	mov	r4, r0
   1db0e:	b1e0      	cbz	r0, 1db4a <cf_write+0x5e>
	if (!cf_set_value(cfg, value, len)) {
   1db10:	462a      	mov	r2, r5
   1db12:	4639      	mov	r1, r7
   1db14:	4620      	mov	r0, r4
   1db16:	f00f f804 	bl	2cb22 <cf_set_value>
   1db1a:	2800      	cmp	r0, #0
   1db1c:	d047      	beq.n	1dbae <cf_write+0xc2>
	memcpy(dst, src, sizeof(*dst));
   1db1e:	2207      	movs	r2, #7
   1db20:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1db24:	1c60      	adds	r0, r4, #1
   1db26:	f00d fb07 	bl	2b138 <memcpy>
	cfg->id = conn->id;
   1db2a:	7a33      	ldrb	r3, [r6, #8]
   1db2c:	4620      	mov	r0, r4
   1db2e:	f800 3b0c 	strb.w	r3, [r0], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1db32:	e8d0 3fef 	ldaex	r3, [r0]
   1db36:	f043 0301 	orr.w	r3, r3, #1
   1db3a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1db3e:	2a00      	cmp	r2, #0
   1db40:	d1f7      	bne.n	1db32 <cf_write+0x46>
}
   1db42:	4640      	mov	r0, r8
   1db44:	b008      	add	sp, #32
   1db46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1db4a:	f7ff ff5d 	bl	1da08 <find_cf_cfg>
	if (!cfg) {
   1db4e:	4604      	mov	r4, r0
   1db50:	2800      	cmp	r0, #0
   1db52:	d1dd      	bne.n	1db10 <cf_write+0x24>
		BT_WARN("No space to store Client Supported Features");
   1db54:	4b17      	ldr	r3, [pc, #92]	; (1dbb4 <cf_write+0xc8>)
   1db56:	9307      	str	r3, [sp, #28]
   1db58:	2202      	movs	r2, #2
   1db5a:	f88d 2004 	strb.w	r2, [sp, #4]
   1db5e:	2300      	movs	r3, #0
   1db60:	f88d 3005 	strb.w	r3, [sp, #5]
   1db64:	f88d 3006 	strb.w	r3, [sp, #6]
   1db68:	f88d 3007 	strb.w	r3, [sp, #7]
   1db6c:	9901      	ldr	r1, [sp, #4]
   1db6e:	9106      	str	r1, [sp, #24]
   1db70:	4619      	mov	r1, r3
   1db72:	f363 0100 	bfi	r1, r3, #0, #1
   1db76:	f363 0141 	bfi	r1, r3, #1, #1
   1db7a:	f363 0182 	bfi	r1, r3, #2, #1
   1db7e:	f363 01c5 	bfi	r1, r3, #3, #3
   1db82:	f362 1188 	bfi	r1, r2, #6, #3
   1db86:	2208      	movs	r2, #8
   1db88:	f362 2152 	bfi	r1, r2, #9, #10
   1db8c:	f363 41de 	bfi	r1, r3, #19, #12
   1db90:	f363 71df 	bfi	r1, r3, #31, #1
   1db94:	aa06      	add	r2, sp, #24
   1db96:	4808      	ldr	r0, [pc, #32]	; (1dbb8 <cf_write+0xcc>)
   1db98:	f7f6 f8b0 	bl	13cfc <z_impl_z_log_msg_static_create>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1db9c:	f06f 0810 	mvn.w	r8, #16
   1dba0:	e7cf      	b.n	1db42 <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dba2:	f06f 0806 	mvn.w	r8, #6
   1dba6:	e7cc      	b.n	1db42 <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1dba8:	f06f 080c 	mvn.w	r8, #12
   1dbac:	e7c9      	b.n	1db42 <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1dbae:	f06f 0812 	mvn.w	r8, #18
   1dbb2:	e7c6      	b.n	1db42 <cf_write+0x56>
   1dbb4:	000326fc 	.word	0x000326fc
   1dbb8:	0002f818 	.word	0x0002f818

0001dbbc <sc_save>:
{
   1dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dbc0:	b088      	sub	sp, #32
   1dbc2:	4607      	mov	r7, r0
   1dbc4:	4688      	mov	r8, r1
   1dbc6:	4616      	mov	r6, r2
   1dbc8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1dbca:	f7ff ff43 	bl	1da54 <find_sc_cfg>
	if (!cfg) {
   1dbce:	4604      	mov	r4, r0
   1dbd0:	b178      	cbz	r0, 1dbf2 <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1dbd2:	8923      	ldrh	r3, [r4, #8]
   1dbd4:	b913      	cbnz	r3, 1dbdc <sc_save+0x20>
   1dbd6:	8963      	ldrh	r3, [r4, #10]
   1dbd8:	2b00      	cmp	r3, #0
   1dbda:	d03c      	beq.n	1dc56 <sc_save+0x9a>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1dbdc:	462b      	mov	r3, r5
   1dbde:	4632      	mov	r2, r6
   1dbe0:	f104 010a 	add.w	r1, r4, #10
   1dbe4:	f104 0008 	add.w	r0, r4, #8
   1dbe8:	f00e ff79 	bl	2cade <update_range>
}
   1dbec:	b008      	add	sp, #32
   1dbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1dbf2:	491a      	ldr	r1, [pc, #104]	; (1dc5c <sc_save+0xa0>)
   1dbf4:	f7ff ff2e 	bl	1da54 <find_sc_cfg>
		if (!cfg) {
   1dbf8:	4604      	mov	r4, r0
   1dbfa:	b130      	cbz	r0, 1dc0a <sc_save+0x4e>
		cfg->id = id;
   1dbfc:	f800 7b01 	strb.w	r7, [r0], #1
   1dc00:	2207      	movs	r2, #7
   1dc02:	4641      	mov	r1, r8
   1dc04:	f00d fa98 	bl	2b138 <memcpy>
}
   1dc08:	e7e3      	b.n	1dbd2 <sc_save+0x16>
			BT_ERR("unable to save SC: no cfg left");
   1dc0a:	4b15      	ldr	r3, [pc, #84]	; (1dc60 <sc_save+0xa4>)
   1dc0c:	9307      	str	r3, [sp, #28]
   1dc0e:	2302      	movs	r3, #2
   1dc10:	f88d 3004 	strb.w	r3, [sp, #4]
   1dc14:	2300      	movs	r3, #0
   1dc16:	f88d 3005 	strb.w	r3, [sp, #5]
   1dc1a:	f88d 3006 	strb.w	r3, [sp, #6]
   1dc1e:	f88d 3007 	strb.w	r3, [sp, #7]
   1dc22:	9a01      	ldr	r2, [sp, #4]
   1dc24:	9206      	str	r2, [sp, #24]
   1dc26:	4619      	mov	r1, r3
   1dc28:	f363 0100 	bfi	r1, r3, #0, #1
   1dc2c:	f363 0141 	bfi	r1, r3, #1, #1
   1dc30:	f363 0182 	bfi	r1, r3, #2, #1
   1dc34:	f363 01c5 	bfi	r1, r3, #3, #3
   1dc38:	2201      	movs	r2, #1
   1dc3a:	f362 1188 	bfi	r1, r2, #6, #3
   1dc3e:	2208      	movs	r2, #8
   1dc40:	f362 2152 	bfi	r1, r2, #9, #10
   1dc44:	f363 41de 	bfi	r1, r3, #19, #12
   1dc48:	f363 71df 	bfi	r1, r3, #31, #1
   1dc4c:	aa06      	add	r2, sp, #24
   1dc4e:	4805      	ldr	r0, [pc, #20]	; (1dc64 <sc_save+0xa8>)
   1dc50:	f7f6 f854 	bl	13cfc <z_impl_z_log_msg_static_create>
			return;
   1dc54:	e7ca      	b.n	1dbec <sc_save+0x30>
		cfg->data.start = start;
   1dc56:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1dc58:	8165      	strh	r5, [r4, #10]
		goto done;
   1dc5a:	e7c7      	b.n	1dbec <sc_save+0x30>
   1dc5c:	0003136c 	.word	0x0003136c
   1dc60:	00032728 	.word	0x00032728
   1dc64:	0002f818 	.word	0x0002f818

0001dc68 <clear_ccc_cfg>:
{
   1dc68:	b510      	push	{r4, lr}
   1dc6a:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1dc6c:	2207      	movs	r2, #7
   1dc6e:	4904      	ldr	r1, [pc, #16]	; (1dc80 <clear_ccc_cfg+0x18>)
   1dc70:	3001      	adds	r0, #1
   1dc72:	f00d fa61 	bl	2b138 <memcpy>
	cfg->id = 0U;
   1dc76:	2300      	movs	r3, #0
   1dc78:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1dc7a:	8123      	strh	r3, [r4, #8]
}
   1dc7c:	bd10      	pop	{r4, pc}
   1dc7e:	bf00      	nop
   1dc80:	0003136c 	.word	0x0003136c

0001dc84 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1dc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dc88:	b089      	sub	sp, #36	; 0x24
   1dc8a:	461c      	mov	r4, r3
   1dc8c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1dc90:	68cf      	ldr	r7, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1dc92:	2b00      	cmp	r3, #0
   1dc94:	d16d      	bne.n	1dd72 <bt_gatt_attr_write_ccc+0xee>
   1dc96:	4681      	mov	r9, r0
   1dc98:	460e      	mov	r6, r1
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1dc9a:	1e63      	subs	r3, r4, #1
   1dc9c:	b29b      	uxth	r3, r3
   1dc9e:	2b01      	cmp	r3, #1
   1dca0:	d86a      	bhi.n	1dd78 <bt_gatt_attr_write_ccc+0xf4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1dca2:	2c01      	cmp	r4, #1
   1dca4:	d91f      	bls.n	1dce6 <bt_gatt_attr_write_ccc+0x62>
   1dca6:	7853      	ldrb	r3, [r2, #1]
   1dca8:	7815      	ldrb	r5, [r2, #0]
   1dcaa:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1dcae:	4639      	mov	r1, r7
   1dcb0:	4648      	mov	r0, r9
   1dcb2:	f7ff fef3 	bl	1da9c <find_ccc_cfg>
	if (!cfg) {
   1dcb6:	4680      	mov	r8, r0
   1dcb8:	b1b8      	cbz	r0, 1dcea <bt_gatt_attr_write_ccc+0x66>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
		cfg->id = conn->id;
	}

	/* Confirm write if cfg is managed by application */
	if (ccc->cfg_write) {
   1dcba:	693b      	ldr	r3, [r7, #16]
   1dcbc:	b143      	cbz	r3, 1dcd0 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1dcbe:	462a      	mov	r2, r5
   1dcc0:	4631      	mov	r1, r6
   1dcc2:	4648      	mov	r0, r9
   1dcc4:	4798      	blx	r3

		if (write < 0) {
   1dcc6:	2800      	cmp	r0, #0
   1dcc8:	db0a      	blt.n	1dce0 <bt_gatt_attr_write_ccc+0x5c>
			return write;
		}

		/* Accept size=1 for backwards compatibility */
		if (write != sizeof(value) && write != 1) {
   1dcca:	3801      	subs	r0, #1
   1dccc:	2801      	cmp	r0, #1
   1dcce:	d856      	bhi.n	1dd7e <bt_gatt_attr_write_ccc+0xfa>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
		}
	}

	value_changed = cfg->value != value;
	cfg->value = value;
   1dcd0:	f8a8 5008 	strh.w	r5, [r8, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, cfg->value);

	/* Update cfg if don't match */
	if (cfg->value != ccc->value) {
   1dcd4:	897b      	ldrh	r3, [r7, #10]
   1dcd6:	429d      	cmp	r5, r3
   1dcd8:	d142      	bne.n	1dd60 <bt_gatt_attr_write_ccc+0xdc>
		gatt_ccc_conn_enqueue(conn);
#endif
	}

	/* Disabled CCC is the same as no configured CCC, so clear the entry */
	if (!value) {
   1dcda:	2d00      	cmp	r5, #0
   1dcdc:	d045      	beq.n	1dd6a <bt_gatt_attr_write_ccc+0xe6>
		clear_ccc_cfg(cfg);
	}

	return len;
   1dcde:	4620      	mov	r0, r4
}
   1dce0:	b009      	add	sp, #36	; 0x24
   1dce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1dce6:	7815      	ldrb	r5, [r2, #0]
   1dce8:	e7e1      	b.n	1dcae <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1dcea:	b90d      	cbnz	r5, 1dcf0 <bt_gatt_attr_write_ccc+0x6c>
			return len;
   1dcec:	4620      	mov	r0, r4
   1dcee:	e7f7      	b.n	1dce0 <bt_gatt_attr_write_ccc+0x5c>
		cfg = find_ccc_cfg(NULL, ccc);
   1dcf0:	4639      	mov	r1, r7
   1dcf2:	2000      	movs	r0, #0
   1dcf4:	f7ff fed2 	bl	1da9c <find_ccc_cfg>
		if (!cfg) {
   1dcf8:	4680      	mov	r8, r0
   1dcfa:	b150      	cbz	r0, 1dd12 <bt_gatt_attr_write_ccc+0x8e>
   1dcfc:	2207      	movs	r2, #7
   1dcfe:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1dd02:	3001      	adds	r0, #1
   1dd04:	f00d fa18 	bl	2b138 <memcpy>
		cfg->id = conn->id;
   1dd08:	f899 3008 	ldrb.w	r3, [r9, #8]
   1dd0c:	f888 3000 	strb.w	r3, [r8]
   1dd10:	e7d3      	b.n	1dcba <bt_gatt_attr_write_ccc+0x36>
			BT_WARN("No space to store CCC cfg");
   1dd12:	4b1c      	ldr	r3, [pc, #112]	; (1dd84 <bt_gatt_attr_write_ccc+0x100>)
   1dd14:	9307      	str	r3, [sp, #28]
   1dd16:	2202      	movs	r2, #2
   1dd18:	f88d 2004 	strb.w	r2, [sp, #4]
   1dd1c:	2300      	movs	r3, #0
   1dd1e:	f88d 3005 	strb.w	r3, [sp, #5]
   1dd22:	f88d 3006 	strb.w	r3, [sp, #6]
   1dd26:	f88d 3007 	strb.w	r3, [sp, #7]
   1dd2a:	9901      	ldr	r1, [sp, #4]
   1dd2c:	9106      	str	r1, [sp, #24]
   1dd2e:	4619      	mov	r1, r3
   1dd30:	f363 0100 	bfi	r1, r3, #0, #1
   1dd34:	f363 0141 	bfi	r1, r3, #1, #1
   1dd38:	f363 0182 	bfi	r1, r3, #2, #1
   1dd3c:	f363 01c5 	bfi	r1, r3, #3, #3
   1dd40:	f362 1188 	bfi	r1, r2, #6, #3
   1dd44:	2208      	movs	r2, #8
   1dd46:	f362 2152 	bfi	r1, r2, #9, #10
   1dd4a:	f363 41de 	bfi	r1, r3, #19, #12
   1dd4e:	f363 71df 	bfi	r1, r3, #31, #1
   1dd52:	aa06      	add	r2, sp, #24
   1dd54:	480c      	ldr	r0, [pc, #48]	; (1dd88 <bt_gatt_attr_write_ccc+0x104>)
   1dd56:	f7f5 ffd1 	bl	13cfc <z_impl_z_log_msg_static_create>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1dd5a:	f06f 0010 	mvn.w	r0, #16
   1dd5e:	e7bf      	b.n	1dce0 <bt_gatt_attr_write_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1dd60:	4639      	mov	r1, r7
   1dd62:	4630      	mov	r0, r6
   1dd64:	f00e ff17 	bl	2cb96 <gatt_ccc_changed>
   1dd68:	e7b7      	b.n	1dcda <bt_gatt_attr_write_ccc+0x56>
		clear_ccc_cfg(cfg);
   1dd6a:	4640      	mov	r0, r8
   1dd6c:	f7ff ff7c 	bl	1dc68 <clear_ccc_cfg>
   1dd70:	e7b5      	b.n	1dcde <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dd72:	f06f 0006 	mvn.w	r0, #6
   1dd76:	e7b3      	b.n	1dce0 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1dd78:	f06f 000c 	mvn.w	r0, #12
   1dd7c:	e7b0      	b.n	1dce0 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1dd7e:	f06f 000d 	mvn.w	r0, #13
   1dd82:	e7ad      	b.n	1dce0 <bt_gatt_attr_write_ccc+0x5c>
   1dd84:	00032748 	.word	0x00032748
   1dd88:	0002f818 	.word	0x0002f818

0001dd8c <sc_clear>:
{
   1dd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd8e:	b083      	sub	sp, #12
   1dd90:	af00      	add	r7, sp, #0
   1dd92:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dd94:	f100 0590 	add.w	r5, r0, #144	; 0x90
   1dd98:	4629      	mov	r1, r5
   1dd9a:	7a00      	ldrb	r0, [r0, #8]
   1dd9c:	f00d fc02 	bl	2b5a4 <bt_addr_le_is_bonded>
   1dda0:	2800      	cmp	r0, #0
   1dda2:	d042      	beq.n	1de2a <sc_clear+0x9e>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1dda4:	4629      	mov	r1, r5
   1dda6:	7a20      	ldrb	r0, [r4, #8]
   1dda8:	f00e ffa2 	bl	2ccf0 <bt_gatt_clear_sc>
		if (err) {
   1ddac:	4604      	mov	r4, r0
   1ddae:	2800      	cmp	r0, #0
   1ddb0:	d042      	beq.n	1de38 <sc_clear+0xac>
			BT_ERR("Failed to clear SC %d", err);
   1ddb2:	466d      	mov	r5, sp
   1ddb4:	b088      	sub	sp, #32
   1ddb6:	466b      	mov	r3, sp
   1ddb8:	f113 0210 	adds.w	r2, r3, #16
   1ddbc:	d02f      	beq.n	1de1e <sc_clear+0x92>
   1ddbe:	210c      	movs	r1, #12
   1ddc0:	b13a      	cbz	r2, 1ddd2 <sc_clear+0x46>
   1ddc2:	4608      	mov	r0, r1
   1ddc4:	2904      	cmp	r1, #4
   1ddc6:	dd01      	ble.n	1ddcc <sc_clear+0x40>
   1ddc8:	4e1d      	ldr	r6, [pc, #116]	; (1de40 <sc_clear+0xb4>)
   1ddca:	615e      	str	r6, [r3, #20]
   1ddcc:	2808      	cmp	r0, #8
   1ddce:	dd00      	ble.n	1ddd2 <sc_clear+0x46>
   1ddd0:	619c      	str	r4, [r3, #24]
   1ddd2:	290b      	cmp	r1, #11
   1ddd4:	dd26      	ble.n	1de24 <sc_clear+0x98>
   1ddd6:	240c      	movs	r4, #12
   1ddd8:	b13a      	cbz	r2, 1ddea <sc_clear+0x5e>
   1ddda:	2103      	movs	r1, #3
   1dddc:	7139      	strb	r1, [r7, #4]
   1ddde:	2100      	movs	r1, #0
   1dde0:	7179      	strb	r1, [r7, #5]
   1dde2:	71b9      	strb	r1, [r7, #6]
   1dde4:	71f9      	strb	r1, [r7, #7]
   1dde6:	6878      	ldr	r0, [r7, #4]
   1dde8:	6118      	str	r0, [r3, #16]
   1ddea:	2100      	movs	r1, #0
   1ddec:	f36f 0100 	bfc	r1, #0, #1
   1ddf0:	f36f 0141 	bfc	r1, #1, #1
   1ddf4:	f36f 0182 	bfc	r1, #2, #1
   1ddf8:	f36f 01c5 	bfc	r1, #3, #3
   1ddfc:	2301      	movs	r3, #1
   1ddfe:	f363 1188 	bfi	r1, r3, #6, #3
   1de02:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1de06:	f364 2152 	bfi	r1, r4, #9, #10
   1de0a:	f36f 41de 	bfc	r1, #19, #12
   1de0e:	f36f 71df 	bfc	r1, #31, #1
   1de12:	2300      	movs	r3, #0
   1de14:	480b      	ldr	r0, [pc, #44]	; (1de44 <sc_clear+0xb8>)
   1de16:	f7f5 ff71 	bl	13cfc <z_impl_z_log_msg_static_create>
   1de1a:	46ad      	mov	sp, r5
   1de1c:	e00c      	b.n	1de38 <sc_clear+0xac>
   1de1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1de22:	e7cd      	b.n	1ddc0 <sc_clear+0x34>
   1de24:	f06f 041b 	mvn.w	r4, #27
   1de28:	e7d6      	b.n	1ddd8 <sc_clear+0x4c>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1de2a:	4629      	mov	r1, r5
   1de2c:	7a20      	ldrb	r0, [r4, #8]
   1de2e:	f7ff fe11 	bl	1da54 <find_sc_cfg>
		if (cfg) {
   1de32:	b108      	cbz	r0, 1de38 <sc_clear+0xac>
			clear_sc_cfg(cfg);
   1de34:	f00e ff56 	bl	2cce4 <clear_sc_cfg>
}
   1de38:	370c      	adds	r7, #12
   1de3a:	46bd      	mov	sp, r7
   1de3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de3e:	bf00      	nop
   1de40:	00032764 	.word	0x00032764
   1de44:	0002f818 	.word	0x0002f818

0001de48 <sc_indicate_rsp>:
{
   1de48:	b510      	push	{r4, lr}
   1de4a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1de4c:	4b16      	ldr	r3, [pc, #88]	; (1dea8 <sc_indicate_rsp+0x60>)
   1de4e:	e8d3 2fef 	ldaex	r2, [r3]
   1de52:	f022 0202 	bic.w	r2, r2, #2
   1de56:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1de5a:	2900      	cmp	r1, #0
   1de5c:	d1f7      	bne.n	1de4e <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1de5e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1de62:	f013 0f01 	tst.w	r3, #1
   1de66:	d104      	bne.n	1de72 <sc_indicate_rsp+0x2a>
	if (bt_att_fixed_chan_only(conn)) {
   1de68:	4620      	mov	r0, r4
   1de6a:	f00e fdf4 	bl	2ca56 <bt_att_fixed_chan_only>
   1de6e:	b930      	cbnz	r0, 1de7e <sc_indicate_rsp+0x36>
}
   1de70:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1de72:	2200      	movs	r2, #0
   1de74:	2300      	movs	r3, #0
   1de76:	480d      	ldr	r0, [pc, #52]	; (1deac <sc_indicate_rsp+0x64>)
   1de78:	f008 fb68 	bl	2654c <k_work_reschedule>
   1de7c:	e7f4      	b.n	1de68 <sc_indicate_rsp+0x20>
		cfg = find_cf_cfg(conn);
   1de7e:	4620      	mov	r0, r4
   1de80:	f7ff fdc2 	bl	1da08 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1de84:	4603      	mov	r3, r0
   1de86:	2800      	cmp	r0, #0
   1de88:	d0f2      	beq.n	1de70 <sc_indicate_rsp+0x28>
   1de8a:	7a02      	ldrb	r2, [r0, #8]
   1de8c:	f012 0f01 	tst.w	r2, #1
   1de90:	d0ee      	beq.n	1de70 <sc_indicate_rsp+0x28>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1de92:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de94:	e8d3 1fef 	ldaex	r1, [r3]
   1de98:	f041 0101 	orr.w	r1, r1, #1
   1de9c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1dea0:	2a00      	cmp	r2, #0
   1dea2:	d0e5      	beq.n	1de70 <sc_indicate_rsp+0x28>
   1dea4:	e7f6      	b.n	1de94 <sc_indicate_rsp+0x4c>
   1dea6:	bf00      	nop
   1dea8:	200094f0 	.word	0x200094f0
   1deac:	200094c0 	.word	0x200094c0

0001deb0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1deb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1deb4:	6881      	ldr	r1, [r0, #8]
   1deb6:	4b2c      	ldr	r3, [pc, #176]	; (1df68 <disconnected_cb+0xb8>)
   1deb8:	4299      	cmp	r1, r3
   1deba:	d002      	beq.n	1dec2 <disconnected_cb+0x12>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1debc:	2001      	movs	r0, #1
   1debe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dec2:	4604      	mov	r4, r0
   1dec4:	4616      	mov	r6, r2
	ccc = attr->user_data;
   1dec6:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1dec8:	897b      	ldrh	r3, [r7, #10]
   1deca:	2b00      	cmp	r3, #0
   1decc:	d0f6      	beq.n	1debc <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1dece:	2500      	movs	r5, #0
	value_used = false;
   1ded0:	46aa      	mov	sl, r5
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ded2:	b15d      	cbz	r5, 1deec <disconnected_cb+0x3c>
	if (!value_used) {
   1ded4:	f1ba 0f00 	cmp.w	sl, #0
   1ded8:	d1f0      	bne.n	1debc <disconnected_cb+0xc>
		ccc->value = 0U;
   1deda:	2300      	movs	r3, #0
   1dedc:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   1dede:	68fb      	ldr	r3, [r7, #12]
   1dee0:	2b00      	cmp	r3, #0
   1dee2:	d0eb      	beq.n	1debc <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   1dee4:	2100      	movs	r1, #0
   1dee6:	4620      	mov	r0, r4
   1dee8:	4798      	blx	r3
   1deea:	e7e7      	b.n	1debc <disconnected_cb+0xc>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1deec:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   1def0:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   1def4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1def8:	b1cb      	cbz	r3, 1df2e <disconnected_cb+0x7e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1defa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1defe:	f108 0901 	add.w	r9, r8, #1
   1df02:	464a      	mov	r2, r9
   1df04:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1df08:	4630      	mov	r0, r6
   1df0a:	f00d fea3 	bl	2bc54 <bt_conn_is_peer_addr_le>
   1df0e:	b998      	cbnz	r0, 1df38 <disconnected_cb+0x88>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1df10:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1df14:	4649      	mov	r1, r9
   1df16:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1df1a:	f7fd fc0b 	bl	1b734 <bt_conn_lookup_addr_le>
			if (tmp) {
   1df1e:	4603      	mov	r3, r0
   1df20:	b128      	cbz	r0, 1df2e <disconnected_cb+0x7e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1df22:	7a82      	ldrb	r2, [r0, #10]
   1df24:	2a07      	cmp	r2, #7
   1df26:	d004      	beq.n	1df32 <disconnected_cb+0x82>
				bt_conn_unref(tmp);
   1df28:	4618      	mov	r0, r3
   1df2a:	f7fd f909 	bl	1b140 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1df2e:	3501      	adds	r5, #1
   1df30:	e7cf      	b.n	1ded2 <disconnected_cb+0x22>
					value_used = true;
   1df32:	f04f 0a01 	mov.w	sl, #1
   1df36:	e7f7      	b.n	1df28 <disconnected_cb+0x78>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1df38:	f106 0b90 	add.w	fp, r6, #144	; 0x90
   1df3c:	4659      	mov	r1, fp
   1df3e:	7a30      	ldrb	r0, [r6, #8]
   1df40:	f00d fb30 	bl	2b5a4 <bt_addr_le_is_bonded>
   1df44:	b950      	cbnz	r0, 1df5c <disconnected_cb+0xac>
				if (ccc == &sc_ccc) {
   1df46:	4b09      	ldr	r3, [pc, #36]	; (1df6c <disconnected_cb+0xbc>)
   1df48:	429f      	cmp	r7, r3
   1df4a:	d003      	beq.n	1df54 <disconnected_cb+0xa4>
				clear_ccc_cfg(cfg);
   1df4c:	4640      	mov	r0, r8
   1df4e:	f7ff fe8b 	bl	1dc68 <clear_ccc_cfg>
   1df52:	e7ec      	b.n	1df2e <disconnected_cb+0x7e>
					sc_clear(conn);
   1df54:	4630      	mov	r0, r6
   1df56:	f7ff ff19 	bl	1dd8c <sc_clear>
   1df5a:	e7f7      	b.n	1df4c <disconnected_cb+0x9c>
   1df5c:	2207      	movs	r2, #7
   1df5e:	4659      	mov	r1, fp
   1df60:	4648      	mov	r0, r9
   1df62:	f00d f8e9 	bl	2b138 <memcpy>
}
   1df66:	e7e2      	b.n	1df2e <disconnected_cb+0x7e>
   1df68:	0001dc85 	.word	0x0001dc85
   1df6c:	200082e0 	.word	0x200082e0

0001df70 <clear_cf_cfg>:
{
   1df70:	b510      	push	{r4, lr}
   1df72:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1df74:	2207      	movs	r2, #7
   1df76:	4909      	ldr	r1, [pc, #36]	; (1df9c <clear_cf_cfg+0x2c>)
   1df78:	3001      	adds	r0, #1
   1df7a:	f00d f8dd 	bl	2b138 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1df7e:	2201      	movs	r2, #1
   1df80:	2100      	movs	r1, #0
   1df82:	f104 0008 	add.w	r0, r4, #8
   1df86:	f00d f906 	bl	2b196 <memset>
	atomic_set(cfg->flags, 0);
   1df8a:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1df8c:	2300      	movs	r3, #0
   1df8e:	e8d4 2fef 	ldaex	r2, [r4]
   1df92:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1df96:	2900      	cmp	r1, #0
   1df98:	d1f9      	bne.n	1df8e <clear_cf_cfg+0x1e>
}
   1df9a:	bd10      	pop	{r4, pc}
   1df9c:	0003136c 	.word	0x0003136c

0001dfa0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1dfa0:	4b11      	ldr	r3, [pc, #68]	; (1dfe8 <bt_gatt_init+0x48>)
   1dfa2:	2201      	movs	r2, #1
   1dfa4:	e8d3 1fef 	ldaex	r1, [r3]
   1dfa8:	2900      	cmp	r1, #0
   1dfaa:	d103      	bne.n	1dfb4 <bt_gatt_init+0x14>
   1dfac:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1dfb0:	2800      	cmp	r0, #0
   1dfb2:	d1f7      	bne.n	1dfa4 <bt_gatt_init+0x4>
	if (!atomic_cas(&init, 0, 1)) {
   1dfb4:	d116      	bne.n	1dfe4 <bt_gatt_init+0x44>
{
   1dfb6:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1dfb8:	f7ff fcea 	bl	1d990 <bt_gatt_service_init>
	list->head = NULL;
   1dfbc:	4b0b      	ldr	r3, [pc, #44]	; (1dfec <bt_gatt_init+0x4c>)
   1dfbe:	2200      	movs	r2, #0
   1dfc0:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1dfc2:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1dfc4:	4c0a      	ldr	r4, [pc, #40]	; (1dff0 <bt_gatt_init+0x50>)
   1dfc6:	490b      	ldr	r1, [pc, #44]	; (1dff4 <bt_gatt_init+0x54>)
   1dfc8:	4620      	mov	r0, r4
   1dfca:	f008 f963 	bl	26294 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1dfce:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1dfd2:	2300      	movs	r3, #0
   1dfd4:	4620      	mov	r0, r4
   1dfd6:	f7f8 fee5 	bl	16da4 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1dfda:	4907      	ldr	r1, [pc, #28]	; (1dff8 <bt_gatt_init+0x58>)
   1dfdc:	4807      	ldr	r0, [pc, #28]	; (1dffc <bt_gatt_init+0x5c>)
   1dfde:	f008 f959 	bl	26294 <k_work_init_delayable>
}
   1dfe2:	bd10      	pop	{r4, pc}
   1dfe4:	4770      	bx	lr
   1dfe6:	bf00      	nop
   1dfe8:	20009a74 	.word	0x20009a74
   1dfec:	20009a78 	.word	0x20009a78
   1dff0:	20009448 	.word	0x20009448
   1dff4:	0002d06f 	.word	0x0002d06f
   1dff8:	0001e82d 	.word	0x0001e82d
   1dffc:	200094c0 	.word	0x200094c0

0001e000 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1e000:	2800      	cmp	r0, #0
   1e002:	d03b      	beq.n	1e07c <bt_gatt_attr_get_handle+0x7c>
{
   1e004:	b570      	push	{r4, r5, r6, lr}
   1e006:	4684      	mov	ip, r0
	if (attr->handle) {
   1e008:	8a06      	ldrh	r6, [r0, #16]
   1e00a:	2e00      	cmp	r6, #0
   1e00c:	d138      	bne.n	1e080 <bt_gatt_attr_get_handle+0x80>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e00e:	4c1d      	ldr	r4, [pc, #116]	; (1e084 <bt_gatt_attr_get_handle+0x84>)
	uint16_t handle = 1;
   1e010:	2001      	movs	r0, #1
   1e012:	e003      	b.n	1e01c <bt_gatt_attr_get_handle+0x1c>
			handle += static_svc->attr_count;
   1e014:	6863      	ldr	r3, [r4, #4]
   1e016:	4403      	add	r3, r0
   1e018:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e01a:	3408      	adds	r4, #8
   1e01c:	4b1a      	ldr	r3, [pc, #104]	; (1e088 <bt_gatt_attr_get_handle+0x88>)
   1e01e:	429c      	cmp	r4, r3
   1e020:	d81a      	bhi.n	1e058 <bt_gatt_attr_get_handle+0x58>
   1e022:	4b19      	ldr	r3, [pc, #100]	; (1e088 <bt_gatt_attr_get_handle+0x88>)
   1e024:	429c      	cmp	r4, r3
   1e026:	d227      	bcs.n	1e078 <bt_gatt_attr_get_handle+0x78>
		if ((attr < &static_svc->attrs[0]) ||
   1e028:	6821      	ldr	r1, [r4, #0]
   1e02a:	4561      	cmp	r1, ip
   1e02c:	d8f2      	bhi.n	1e014 <bt_gatt_attr_get_handle+0x14>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1e02e:	6865      	ldr	r5, [r4, #4]
   1e030:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1e034:	009b      	lsls	r3, r3, #2
   1e036:	3b14      	subs	r3, #20
   1e038:	440b      	add	r3, r1
		if ((attr < &static_svc->attrs[0]) ||
   1e03a:	4563      	cmp	r3, ip
   1e03c:	d3ea      	bcc.n	1e014 <bt_gatt_attr_get_handle+0x14>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1e03e:	2300      	movs	r3, #0
   1e040:	429d      	cmp	r5, r3
   1e042:	d9ea      	bls.n	1e01a <bt_gatt_attr_get_handle+0x1a>
			if (attr == &static_svc->attrs[i]) {
   1e044:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e048:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1e04c:	4562      	cmp	r2, ip
   1e04e:	d018      	beq.n	1e082 <bt_gatt_attr_get_handle+0x82>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1e050:	3301      	adds	r3, #1
   1e052:	3001      	adds	r0, #1
   1e054:	b280      	uxth	r0, r0
   1e056:	e7f3      	b.n	1e040 <bt_gatt_attr_get_handle+0x40>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e058:	4c0c      	ldr	r4, [pc, #48]	; (1e08c <bt_gatt_attr_get_handle+0x8c>)
   1e05a:	f240 6365 	movw	r3, #1637	; 0x665
   1e05e:	4622      	mov	r2, r4
   1e060:	490b      	ldr	r1, [pc, #44]	; (1e090 <bt_gatt_attr_get_handle+0x90>)
   1e062:	480c      	ldr	r0, [pc, #48]	; (1e094 <bt_gatt_attr_get_handle+0x94>)
   1e064:	f00b fd41 	bl	29aea <assert_print>
   1e068:	480b      	ldr	r0, [pc, #44]	; (1e098 <bt_gatt_attr_get_handle+0x98>)
   1e06a:	f00b fd3e 	bl	29aea <assert_print>
   1e06e:	f240 6165 	movw	r1, #1637	; 0x665
   1e072:	4620      	mov	r0, r4
   1e074:	f00b fd32 	bl	29adc <assert_post_action>
	return 0;
   1e078:	4630      	mov	r0, r6
   1e07a:	e002      	b.n	1e082 <bt_gatt_attr_get_handle+0x82>
		return 0;
   1e07c:	2000      	movs	r0, #0
}
   1e07e:	4770      	bx	lr
		return attr->handle;
   1e080:	4630      	mov	r0, r6
}
   1e082:	bd70      	pop	{r4, r5, r6, pc}
   1e084:	0002f7d0 	.word	0x0002f7d0
   1e088:	0002f7e8 	.word	0x0002f7e8
   1e08c:	000326a4 	.word	0x000326a4
   1e090:	0003277c 	.word	0x0003277c
   1e094:	0002fdac 	.word	0x0002fdac
   1e098:	00030500 	.word	0x00030500

0001e09c <bt_gatt_foreach_attr_type>:
{
   1e09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0a0:	b089      	sub	sp, #36	; 0x24
   1e0a2:	4682      	mov	sl, r0
   1e0a4:	9107      	str	r1, [sp, #28]
   1e0a6:	4690      	mov	r8, r2
   1e0a8:	4699      	mov	r9, r3
   1e0aa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1e0ac:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1e0b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1e0b4:	b91b      	cbnz	r3, 1e0be <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   1e0b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e0ba:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1e0be:	4b25      	ldr	r3, [pc, #148]	; (1e154 <bt_gatt_foreach_attr_type+0xb8>)
   1e0c0:	881b      	ldrh	r3, [r3, #0]
   1e0c2:	4553      	cmp	r3, sl
   1e0c4:	d22e      	bcs.n	1e124 <bt_gatt_foreach_attr_type+0x88>
}
   1e0c6:	b009      	add	sp, #36	; 0x24
   1e0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1e0cc:	2500      	movs	r5, #0
   1e0ce:	6873      	ldr	r3, [r6, #4]
   1e0d0:	42ab      	cmp	r3, r5
   1e0d2:	d91a      	bls.n	1e10a <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e0d4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1e0d8:	f8cd b010 	str.w	fp, [sp, #16]
   1e0dc:	f8cd a00c 	str.w	sl, [sp, #12]
   1e0e0:	ab12      	add	r3, sp, #72	; 0x48
   1e0e2:	9302      	str	r3, [sp, #8]
   1e0e4:	f8cd 9004 	str.w	r9, [sp, #4]
   1e0e8:	f8cd 8000 	str.w	r8, [sp]
   1e0ec:	9b07      	ldr	r3, [sp, #28]
   1e0ee:	463a      	mov	r2, r7
   1e0f0:	4621      	mov	r1, r4
   1e0f2:	f8d6 c000 	ldr.w	ip, [r6]
   1e0f6:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1e0fa:	f00e fe55 	bl	2cda8 <gatt_foreach_iter>
   1e0fe:	2800      	cmp	r0, #0
   1e100:	d0e1      	beq.n	1e0c6 <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1e102:	3501      	adds	r5, #1
   1e104:	3401      	adds	r4, #1
   1e106:	b2a4      	uxth	r4, r4
   1e108:	e7e1      	b.n	1e0ce <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e10a:	3608      	adds	r6, #8
   1e10c:	4b12      	ldr	r3, [pc, #72]	; (1e158 <bt_gatt_foreach_attr_type+0xbc>)
   1e10e:	429e      	cmp	r6, r3
   1e110:	d80f      	bhi.n	1e132 <bt_gatt_foreach_attr_type+0x96>
   1e112:	4b11      	ldr	r3, [pc, #68]	; (1e158 <bt_gatt_foreach_attr_type+0xbc>)
   1e114:	429e      	cmp	r6, r3
   1e116:	d2d6      	bcs.n	1e0c6 <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   1e118:	6873      	ldr	r3, [r6, #4]
   1e11a:	18e1      	adds	r1, r4, r3
   1e11c:	42b9      	cmp	r1, r7
   1e11e:	d2d5      	bcs.n	1e0cc <bt_gatt_foreach_attr_type+0x30>
				handle += static_svc->attr_count;
   1e120:	b28c      	uxth	r4, r1
				continue;
   1e122:	e7f2      	b.n	1e10a <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e124:	4e0d      	ldr	r6, [pc, #52]	; (1e15c <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   1e126:	2401      	movs	r4, #1
   1e128:	9713      	str	r7, [sp, #76]	; 0x4c
   1e12a:	4657      	mov	r7, sl
   1e12c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1e130:	e7ec      	b.n	1e10c <bt_gatt_foreach_attr_type+0x70>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e132:	4c0b      	ldr	r4, [pc, #44]	; (1e160 <bt_gatt_foreach_attr_type+0xc4>)
   1e134:	f240 7329 	movw	r3, #1833	; 0x729
   1e138:	4622      	mov	r2, r4
   1e13a:	490a      	ldr	r1, [pc, #40]	; (1e164 <bt_gatt_foreach_attr_type+0xc8>)
   1e13c:	480a      	ldr	r0, [pc, #40]	; (1e168 <bt_gatt_foreach_attr_type+0xcc>)
   1e13e:	f00b fcd4 	bl	29aea <assert_print>
   1e142:	480a      	ldr	r0, [pc, #40]	; (1e16c <bt_gatt_foreach_attr_type+0xd0>)
   1e144:	f00b fcd1 	bl	29aea <assert_print>
   1e148:	f240 7129 	movw	r1, #1833	; 0x729
   1e14c:	4620      	mov	r0, r4
   1e14e:	f00b fcc5 	bl	29adc <assert_post_action>
   1e152:	bf00      	nop
   1e154:	20009d4c 	.word	0x20009d4c
   1e158:	0002f7e8 	.word	0x0002f7e8
   1e15c:	0002f7d0 	.word	0x0002f7d0
   1e160:	000326a4 	.word	0x000326a4
   1e164:	0003277c 	.word	0x0003277c
   1e168:	0002fdac 	.word	0x0002fdac
   1e16c:	00030500 	.word	0x00030500

0001e170 <db_hash_gen>:
{
   1e170:	b510      	push	{r4, lr}
   1e172:	b0da      	sub	sp, #360	; 0x168
	uint8_t key[16] = {};
   1e174:	2300      	movs	r3, #0
   1e176:	934a      	str	r3, [sp, #296]	; 0x128
   1e178:	934b      	str	r3, [sp, #300]	; 0x12c
   1e17a:	934c      	str	r3, [sp, #304]	; 0x130
   1e17c:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1e17e:	aa1e      	add	r2, sp, #120	; 0x78
   1e180:	a94a      	add	r1, sp, #296	; 0x128
   1e182:	a806      	add	r0, sp, #24
   1e184:	f00c fb77 	bl	2a876 <tc_cmac_setup>
   1e188:	b1f8      	cbz	r0, 1e1ca <db_hash_gen+0x5a>
   1e18a:	ac06      	add	r4, sp, #24
   1e18c:	9402      	str	r4, [sp, #8]
   1e18e:	4b35      	ldr	r3, [pc, #212]	; (1e264 <db_hash_gen+0xf4>)
   1e190:	9301      	str	r3, [sp, #4]
   1e192:	2200      	movs	r2, #0
   1e194:	9200      	str	r2, [sp, #0]
   1e196:	4613      	mov	r3, r2
   1e198:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e19c:	2001      	movs	r0, #1
   1e19e:	f7ff ff7d 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1e1a2:	4621      	mov	r1, r4
   1e1a4:	4830      	ldr	r0, [pc, #192]	; (1e268 <db_hash_gen+0xf8>)
   1e1a6:	f00c fc03 	bl	2a9b0 <tc_cmac_final>
   1e1aa:	b3a0      	cbz	r0, 1e216 <db_hash_gen+0xa6>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   1e1ac:	2110      	movs	r1, #16
   1e1ae:	482e      	ldr	r0, [pc, #184]	; (1e268 <db_hash_gen+0xf8>)
   1e1b0:	f00e fc7f 	bl	2cab2 <sys_mem_swap>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e1b4:	4b2d      	ldr	r3, [pc, #180]	; (1e26c <db_hash_gen+0xfc>)
   1e1b6:	e8d3 1fef 	ldaex	r1, [r3]
   1e1ba:	f041 0104 	orr.w	r1, r1, #4
   1e1be:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e1c2:	2a00      	cmp	r2, #0
   1e1c4:	d1f7      	bne.n	1e1b6 <db_hash_gen+0x46>
}
   1e1c6:	b05a      	add	sp, #360	; 0x168
   1e1c8:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to setup AES CMAC");
   1e1ca:	4b29      	ldr	r3, [pc, #164]	; (1e270 <db_hash_gen+0x100>)
   1e1cc:	9359      	str	r3, [sp, #356]	; 0x164
   1e1ce:	2302      	movs	r3, #2
   1e1d0:	f88d 3014 	strb.w	r3, [sp, #20]
   1e1d4:	2300      	movs	r3, #0
   1e1d6:	f88d 3015 	strb.w	r3, [sp, #21]
   1e1da:	f88d 3016 	strb.w	r3, [sp, #22]
   1e1de:	f88d 3017 	strb.w	r3, [sp, #23]
   1e1e2:	9a05      	ldr	r2, [sp, #20]
   1e1e4:	9258      	str	r2, [sp, #352]	; 0x160
   1e1e6:	4619      	mov	r1, r3
   1e1e8:	f363 0100 	bfi	r1, r3, #0, #1
   1e1ec:	f363 0141 	bfi	r1, r3, #1, #1
   1e1f0:	f363 0182 	bfi	r1, r3, #2, #1
   1e1f4:	f363 01c5 	bfi	r1, r3, #3, #3
   1e1f8:	2201      	movs	r2, #1
   1e1fa:	f362 1188 	bfi	r1, r2, #6, #3
   1e1fe:	2208      	movs	r2, #8
   1e200:	f362 2152 	bfi	r1, r2, #9, #10
   1e204:	f363 41de 	bfi	r1, r3, #19, #12
   1e208:	f363 71df 	bfi	r1, r3, #31, #1
   1e20c:	aa58      	add	r2, sp, #352	; 0x160
   1e20e:	4819      	ldr	r0, [pc, #100]	; (1e274 <db_hash_gen+0x104>)
   1e210:	f7f5 fd74 	bl	13cfc <z_impl_z_log_msg_static_create>
		return;
   1e214:	e7d7      	b.n	1e1c6 <db_hash_gen+0x56>
		BT_ERR("Unable to calculate hash");
   1e216:	4b18      	ldr	r3, [pc, #96]	; (1e278 <db_hash_gen+0x108>)
   1e218:	9353      	str	r3, [sp, #332]	; 0x14c
   1e21a:	2302      	movs	r3, #2
   1e21c:	f88d 3014 	strb.w	r3, [sp, #20]
   1e220:	2300      	movs	r3, #0
   1e222:	f88d 3015 	strb.w	r3, [sp, #21]
   1e226:	f88d 3016 	strb.w	r3, [sp, #22]
   1e22a:	f88d 3017 	strb.w	r3, [sp, #23]
   1e22e:	9a05      	ldr	r2, [sp, #20]
   1e230:	9252      	str	r2, [sp, #328]	; 0x148
   1e232:	4619      	mov	r1, r3
   1e234:	f363 0100 	bfi	r1, r3, #0, #1
   1e238:	f363 0141 	bfi	r1, r3, #1, #1
   1e23c:	f363 0182 	bfi	r1, r3, #2, #1
   1e240:	f363 01c5 	bfi	r1, r3, #3, #3
   1e244:	2201      	movs	r2, #1
   1e246:	f362 1188 	bfi	r1, r2, #6, #3
   1e24a:	2208      	movs	r2, #8
   1e24c:	f362 2152 	bfi	r1, r2, #9, #10
   1e250:	f363 41de 	bfi	r1, r3, #19, #12
   1e254:	f363 71df 	bfi	r1, r3, #31, #1
   1e258:	aa52      	add	r2, sp, #328	; 0x148
   1e25a:	4806      	ldr	r0, [pc, #24]	; (1e274 <db_hash_gen+0x104>)
   1e25c:	f7f5 fd4e 	bl	13cfc <z_impl_z_log_msg_static_create>
		return;
   1e260:	e7b1      	b.n	1e1c6 <db_hash_gen+0x56>
   1e262:	bf00      	nop
   1e264:	0002cbf1 	.word	0x0002cbf1
   1e268:	20009438 	.word	0x20009438
   1e26c:	200094f0 	.word	0x200094f0
   1e270:	000327ac 	.word	0x000327ac
   1e274:	0002f818 	.word	0x0002f818
   1e278:	000327c8 	.word	0x000327c8

0001e27c <db_hash_read>:
{
   1e27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e280:	b084      	sub	sp, #16
   1e282:	4604      	mov	r4, r0
   1e284:	460d      	mov	r5, r1
   1e286:	4616      	mov	r6, r2
   1e288:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e28a:	491c      	ldr	r1, [pc, #112]	; (1e2fc <db_hash_read+0x80>)
   1e28c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1e290:	f008 f9c4 	bl	2661c <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e294:	4b1a      	ldr	r3, [pc, #104]	; (1e300 <db_hash_read+0x84>)
   1e296:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1e29a:	f013 0f04 	tst.w	r3, #4
   1e29e:	d017      	beq.n	1e2d0 <db_hash_read+0x54>
	cfg = find_cf_cfg(conn);
   1e2a0:	4620      	mov	r0, r4
   1e2a2:	f7ff fbb1 	bl	1da08 <find_cf_cfg>
	if (cfg &&
   1e2a6:	b118      	cbz	r0, 1e2b0 <db_hash_read+0x34>
	    CF_ROBUST_CACHING(cfg) &&
   1e2a8:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   1e2aa:	f012 0f01 	tst.w	r2, #1
   1e2ae:	d113      	bne.n	1e2d8 <db_hash_read+0x5c>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1e2b0:	2310      	movs	r3, #16
   1e2b2:	9302      	str	r3, [sp, #8]
   1e2b4:	4b13      	ldr	r3, [pc, #76]	; (1e304 <db_hash_read+0x88>)
   1e2b6:	9301      	str	r3, [sp, #4]
   1e2b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1e2bc:	9300      	str	r3, [sp, #0]
   1e2be:	463b      	mov	r3, r7
   1e2c0:	4632      	mov	r2, r6
   1e2c2:	4629      	mov	r1, r5
   1e2c4:	4620      	mov	r0, r4
   1e2c6:	f00e fdbf 	bl	2ce48 <bt_gatt_attr_read>
}
   1e2ca:	b004      	add	sp, #16
   1e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   1e2d0:	2001      	movs	r0, #1
   1e2d2:	f7ff ff4d 	bl	1e170 <db_hash_gen>
   1e2d6:	e7e3      	b.n	1e2a0 <db_hash_read+0x24>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1e2d8:	f100 080c 	add.w	r8, r0, #12
   1e2dc:	2100      	movs	r1, #0
   1e2de:	4640      	mov	r0, r8
   1e2e0:	f00e fcf5 	bl	2ccce <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   1e2e4:	2800      	cmp	r0, #0
   1e2e6:	d1e3      	bne.n	1e2b0 <db_hash_read+0x34>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e2e8:	e8d8 3fef 	ldaex	r3, [r8]
   1e2ec:	f043 0302 	orr.w	r3, r3, #2
   1e2f0:	e8c8 3fe2 	stlex	r2, r3, [r8]
   1e2f4:	2a00      	cmp	r2, #0
   1e2f6:	d0db      	beq.n	1e2b0 <db_hash_read+0x34>
   1e2f8:	e7f6      	b.n	1e2e8 <db_hash_read+0x6c>
   1e2fa:	bf00      	nop
   1e2fc:	20009478 	.word	0x20009478
   1e300:	200094f0 	.word	0x200094f0
   1e304:	20009438 	.word	0x20009438

0001e308 <gatt_find_by_uuid>:
{
   1e308:	b510      	push	{r4, lr}
   1e30a:	b084      	sub	sp, #16
   1e30c:	4604      	mov	r4, r0
   1e30e:	460a      	mov	r2, r1
	found->attr = NULL;
   1e310:	2300      	movs	r3, #0
   1e312:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e314:	9002      	str	r0, [sp, #8]
   1e316:	4907      	ldr	r1, [pc, #28]	; (1e334 <gatt_find_by_uuid+0x2c>)
   1e318:	9101      	str	r1, [sp, #4]
   1e31a:	2101      	movs	r1, #1
   1e31c:	9100      	str	r1, [sp, #0]
   1e31e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e322:	8880      	ldrh	r0, [r0, #4]
   1e324:	f7ff feba 	bl	1e09c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e328:	6820      	ldr	r0, [r4, #0]
}
   1e32a:	3800      	subs	r0, #0
   1e32c:	bf18      	it	ne
   1e32e:	2001      	movne	r0, #1
   1e330:	b004      	add	sp, #16
   1e332:	bd10      	pop	{r4, pc}
   1e334:	0002cbe9 	.word	0x0002cbe9

0001e338 <bt_gatt_attr_next>:
{
   1e338:	b510      	push	{r4, lr}
   1e33a:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   1e33c:	2400      	movs	r4, #0
   1e33e:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1e340:	f7ff fe5e 	bl	1e000 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1e344:	3001      	adds	r0, #1
   1e346:	b280      	uxth	r0, r0
   1e348:	ab05      	add	r3, sp, #20
   1e34a:	9302      	str	r3, [sp, #8]
   1e34c:	4b05      	ldr	r3, [pc, #20]	; (1e364 <bt_gatt_attr_next+0x2c>)
   1e34e:	9301      	str	r3, [sp, #4]
   1e350:	9400      	str	r4, [sp, #0]
   1e352:	4623      	mov	r3, r4
   1e354:	4622      	mov	r2, r4
   1e356:	4601      	mov	r1, r0
   1e358:	f7ff fea0 	bl	1e09c <bt_gatt_foreach_attr_type>
}
   1e35c:	9805      	ldr	r0, [sp, #20]
   1e35e:	b006      	add	sp, #24
   1e360:	bd10      	pop	{r4, pc}
   1e362:	bf00      	nop
   1e364:	0002cb91 	.word	0x0002cb91

0001e368 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   1e368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e36a:	b089      	sub	sp, #36	; 0x24
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1e36c:	b148      	cbz	r0, 1e382 <bt_gatt_is_subscribed+0x1a>
   1e36e:	460c      	mov	r4, r1
   1e370:	4615      	mov	r5, r2
   1e372:	4606      	mov	r6, r0
	__ASSERT(attr, "invalid parameter\n");
   1e374:	b1a9      	cbz	r1, 1e3a2 <bt_gatt_is_subscribed+0x3a>

	if (conn->state != BT_CONN_CONNECTED) {
   1e376:	7a83      	ldrb	r3, [r0, #10]
   1e378:	2b07      	cmp	r3, #7
   1e37a:	d022      	beq.n	1e3c2 <bt_gatt_is_subscribed+0x5a>
		return false;
   1e37c:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   1e37e:	b009      	add	sp, #36	; 0x24
   1e380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(conn, "invalid parameter\n");
   1e382:	4c66      	ldr	r4, [pc, #408]	; (1e51c <bt_gatt_is_subscribed+0x1b4>)
   1e384:	f640 434b 	movw	r3, #3147	; 0xc4b
   1e388:	4622      	mov	r2, r4
   1e38a:	4965      	ldr	r1, [pc, #404]	; (1e520 <bt_gatt_is_subscribed+0x1b8>)
   1e38c:	4865      	ldr	r0, [pc, #404]	; (1e524 <bt_gatt_is_subscribed+0x1bc>)
   1e38e:	f00b fbac 	bl	29aea <assert_print>
   1e392:	4865      	ldr	r0, [pc, #404]	; (1e528 <bt_gatt_is_subscribed+0x1c0>)
   1e394:	f00b fba9 	bl	29aea <assert_print>
   1e398:	f640 414b 	movw	r1, #3147	; 0xc4b
   1e39c:	4620      	mov	r0, r4
   1e39e:	f00b fb9d 	bl	29adc <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1e3a2:	4c5e      	ldr	r4, [pc, #376]	; (1e51c <bt_gatt_is_subscribed+0x1b4>)
   1e3a4:	f640 434c 	movw	r3, #3148	; 0xc4c
   1e3a8:	4622      	mov	r2, r4
   1e3aa:	4960      	ldr	r1, [pc, #384]	; (1e52c <bt_gatt_is_subscribed+0x1c4>)
   1e3ac:	485d      	ldr	r0, [pc, #372]	; (1e524 <bt_gatt_is_subscribed+0x1bc>)
   1e3ae:	f00b fb9c 	bl	29aea <assert_print>
   1e3b2:	485d      	ldr	r0, [pc, #372]	; (1e528 <bt_gatt_is_subscribed+0x1c0>)
   1e3b4:	f00b fb99 	bl	29aea <assert_print>
   1e3b8:	f640 414c 	movw	r1, #3148	; 0xc4c
   1e3bc:	4620      	mov	r0, r4
   1e3be:	f00b fb8d 	bl	29adc <assert_post_action>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1e3c2:	6808      	ldr	r0, [r1, #0]
   1e3c4:	2300      	movs	r3, #0
   1e3c6:	f88d 3004 	strb.w	r3, [sp, #4]
   1e3ca:	f642 0303 	movw	r3, #10243	; 0x2803
   1e3ce:	f8ad 3006 	strh.w	r3, [sp, #6]
   1e3d2:	a901      	add	r1, sp, #4
   1e3d4:	f00c ff13 	bl	2b1fe <bt_uuid_cmp>
   1e3d8:	b950      	cbnz	r0, 1e3f0 <bt_gatt_is_subscribed+0x88>
		struct bt_gatt_chrc *chrc = attr->user_data;
   1e3da:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   1e3dc:	799b      	ldrb	r3, [r3, #6]
   1e3de:	f013 0f30 	tst.w	r3, #48	; 0x30
   1e3e2:	d0cc      	beq.n	1e37e <bt_gatt_is_subscribed+0x16>
		attr = bt_gatt_attr_next(attr);
   1e3e4:	4620      	mov	r0, r4
   1e3e6:	f7ff ffa7 	bl	1e338 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1e3ea:	4604      	mov	r4, r0
   1e3ec:	2800      	cmp	r0, #0
   1e3ee:	d046      	beq.n	1e47e <bt_gatt_is_subscribed+0x116>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1e3f0:	6820      	ldr	r0, [r4, #0]
   1e3f2:	2300      	movs	r3, #0
   1e3f4:	f88d 3008 	strb.w	r3, [sp, #8]
   1e3f8:	f642 1302 	movw	r3, #10498	; 0x2902
   1e3fc:	f8ad 300a 	strh.w	r3, [sp, #10]
   1e400:	a902      	add	r1, sp, #8
   1e402:	f00c fefc 	bl	2b1fe <bt_uuid_cmp>
   1e406:	2800      	cmp	r0, #0
   1e408:	d149      	bne.n	1e49e <bt_gatt_is_subscribed+0x136>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1e40a:	6820      	ldr	r0, [r4, #0]
   1e40c:	2300      	movs	r3, #0
   1e40e:	f88d 300c 	strb.w	r3, [sp, #12]
   1e412:	f642 1302 	movw	r3, #10498	; 0x2902
   1e416:	f8ad 300e 	strh.w	r3, [sp, #14]
   1e41a:	a903      	add	r1, sp, #12
   1e41c:	f00c feef 	bl	2b1fe <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1e420:	2800      	cmp	r0, #0
   1e422:	d052      	beq.n	1e4ca <bt_gatt_is_subscribed+0x162>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1e424:	6820      	ldr	r0, [r4, #0]
   1e426:	2300      	movs	r3, #0
   1e428:	f88d 3010 	strb.w	r3, [sp, #16]
   1e42c:	f642 0303 	movw	r3, #10243	; 0x2803
   1e430:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e434:	a904      	add	r1, sp, #16
   1e436:	f00c fee2 	bl	2b1fe <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1e43a:	2800      	cmp	r0, #0
   1e43c:	d045      	beq.n	1e4ca <bt_gatt_is_subscribed+0x162>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1e43e:	6820      	ldr	r0, [r4, #0]
   1e440:	2300      	movs	r3, #0
   1e442:	f88d 3014 	strb.w	r3, [sp, #20]
   1e446:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1e44a:	f8ad 3016 	strh.w	r3, [sp, #22]
   1e44e:	a905      	add	r1, sp, #20
   1e450:	f00c fed5 	bl	2b1fe <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1e454:	2800      	cmp	r0, #0
   1e456:	d038      	beq.n	1e4ca <bt_gatt_is_subscribed+0x162>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e458:	6820      	ldr	r0, [r4, #0]
   1e45a:	2300      	movs	r3, #0
   1e45c:	f88d 3018 	strb.w	r3, [sp, #24]
   1e460:	f642 0301 	movw	r3, #10241	; 0x2801
   1e464:	f8ad 301a 	strh.w	r3, [sp, #26]
   1e468:	a906      	add	r1, sp, #24
   1e46a:	f00c fec8 	bl	2b1fe <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1e46e:	b360      	cbz	r0, 1e4ca <bt_gatt_is_subscribed+0x162>
		attr = bt_gatt_attr_next(attr);
   1e470:	4620      	mov	r0, r4
   1e472:	f7ff ff61 	bl	1e338 <bt_gatt_attr_next>
		if (!attr) {
   1e476:	4604      	mov	r4, r0
   1e478:	2800      	cmp	r0, #0
   1e47a:	d1c6      	bne.n	1e40a <bt_gatt_is_subscribed+0xa2>
   1e47c:	e77f      	b.n	1e37e <bt_gatt_is_subscribed+0x16>
		__ASSERT(attr, "No more attributes\n");
   1e47e:	4c27      	ldr	r4, [pc, #156]	; (1e51c <bt_gatt_is_subscribed+0x1b4>)
   1e480:	f640 435d 	movw	r3, #3165	; 0xc5d
   1e484:	4622      	mov	r2, r4
   1e486:	4929      	ldr	r1, [pc, #164]	; (1e52c <bt_gatt_is_subscribed+0x1c4>)
   1e488:	4826      	ldr	r0, [pc, #152]	; (1e524 <bt_gatt_is_subscribed+0x1bc>)
   1e48a:	f00b fb2e 	bl	29aea <assert_print>
   1e48e:	4828      	ldr	r0, [pc, #160]	; (1e530 <bt_gatt_is_subscribed+0x1c8>)
   1e490:	f00b fb2b 	bl	29aea <assert_print>
   1e494:	f640 415d 	movw	r1, #3165	; 0xc5d
   1e498:	4620      	mov	r0, r4
   1e49a:	f00b fb1f 	bl	29adc <assert_post_action>
		attr = bt_gatt_attr_next(attr);
   1e49e:	4620      	mov	r0, r4
   1e4a0:	f7ff ff4a 	bl	1e338 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1e4a4:	4604      	mov	r4, r0
   1e4a6:	2800      	cmp	r0, #0
   1e4a8:	d1af      	bne.n	1e40a <bt_gatt_is_subscribed+0xa2>
   1e4aa:	4c1c      	ldr	r4, [pc, #112]	; (1e51c <bt_gatt_is_subscribed+0x1b4>)
   1e4ac:	f640 4363 	movw	r3, #3171	; 0xc63
   1e4b0:	4622      	mov	r2, r4
   1e4b2:	491e      	ldr	r1, [pc, #120]	; (1e52c <bt_gatt_is_subscribed+0x1c4>)
   1e4b4:	481b      	ldr	r0, [pc, #108]	; (1e524 <bt_gatt_is_subscribed+0x1bc>)
   1e4b6:	f00b fb18 	bl	29aea <assert_print>
   1e4ba:	481d      	ldr	r0, [pc, #116]	; (1e530 <bt_gatt_is_subscribed+0x1c8>)
   1e4bc:	f00b fb15 	bl	29aea <assert_print>
   1e4c0:	f640 4163 	movw	r1, #3171	; 0xc63
   1e4c4:	4620      	mov	r0, r4
   1e4c6:	f00b fb09 	bl	29adc <assert_post_action>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1e4ca:	6820      	ldr	r0, [r4, #0]
   1e4cc:	2300      	movs	r3, #0
   1e4ce:	f88d 301c 	strb.w	r3, [sp, #28]
   1e4d2:	f642 1302 	movw	r3, #10498	; 0x2902
   1e4d6:	f8ad 301e 	strh.w	r3, [sp, #30]
   1e4da:	a907      	add	r1, sp, #28
   1e4dc:	f00c fe8f 	bl	2b1fe <bt_uuid_cmp>
   1e4e0:	b920      	cbnz	r0, 1e4ec <bt_gatt_is_subscribed+0x184>
	ccc = attr->user_data;
   1e4e2:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1e4e4:	2400      	movs	r4, #0
   1e4e6:	b11c      	cbz	r4, 1e4f0 <bt_gatt_is_subscribed+0x188>
	return false;
   1e4e8:	2000      	movs	r0, #0
   1e4ea:	e748      	b.n	1e37e <bt_gatt_is_subscribed+0x16>
		return false;
   1e4ec:	2000      	movs	r0, #0
   1e4ee:	e746      	b.n	1e37e <bt_gatt_is_subscribed+0x16>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1e4f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e4f4:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   1e4f8:	3201      	adds	r2, #1
   1e4fa:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1e4fe:	4630      	mov	r0, r6
   1e500:	f00d fba8 	bl	2bc54 <bt_conn_is_peer_addr_le>
   1e504:	b138      	cbz	r0, 1e516 <bt_gatt_is_subscribed+0x1ae>
		    (ccc_type & ccc->cfg[i].value)) {
   1e506:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e50a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   1e50e:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1e510:	422b      	tst	r3, r5
   1e512:	f47f af34 	bne.w	1e37e <bt_gatt_is_subscribed+0x16>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1e516:	3401      	adds	r4, #1
   1e518:	e7e5      	b.n	1e4e6 <bt_gatt_is_subscribed+0x17e>
   1e51a:	bf00      	nop
   1e51c:	000326a4 	.word	0x000326a4
   1e520:	00031fa0 	.word	0x00031fa0
   1e524:	0002fdac 	.word	0x0002fdac
   1e528:	000327e4 	.word	0x000327e4
   1e52c:	000327fc 	.word	0x000327fc
   1e530:	00032804 	.word	0x00032804

0001e534 <gatt_indicate>:
{
   1e534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e538:	b096      	sub	sp, #88	; 0x58
   1e53a:	4605      	mov	r5, r0
   1e53c:	460f      	mov	r7, r1
   1e53e:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e540:	2294      	movs	r2, #148	; 0x94
   1e542:	6861      	ldr	r1, [r4, #4]
   1e544:	f00e fd98 	bl	2d078 <bt_gatt_check_perm>
   1e548:	2800      	cmp	r0, #0
   1e54a:	d13f      	bne.n	1e5cc <gatt_indicate+0x98>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1e54c:	2202      	movs	r2, #2
   1e54e:	6861      	ldr	r1, [r4, #4]
   1e550:	4628      	mov	r0, r5
   1e552:	f7ff ff09 	bl	1e368 <bt_gatt_is_subscribed>
   1e556:	2800      	cmp	r0, #0
   1e558:	d05f      	beq.n	1e61a <gatt_indicate+0xe6>
	len = sizeof(*ind) + params->len;
   1e55a:	8aa6      	ldrh	r6, [r4, #20]
   1e55c:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1e55e:	9600      	str	r6, [sp, #0]
   1e560:	231d      	movs	r3, #29
   1e562:	2200      	movs	r2, #0
   1e564:	4621      	mov	r1, r4
   1e566:	4859      	ldr	r0, [pc, #356]	; (1e6cc <gatt_indicate+0x198>)
   1e568:	f00e fc49 	bl	2cdfe <gatt_req_alloc>
	if (!req) {
   1e56c:	4681      	mov	r9, r0
   1e56e:	2800      	cmp	r0, #0
   1e570:	f000 80a8 	beq.w	1e6c4 <gatt_indicate+0x190>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e574:	4632      	mov	r2, r6
   1e576:	211d      	movs	r1, #29
   1e578:	4628      	mov	r0, r5
   1e57a:	f7fe fde5 	bl	1d148 <bt_att_create_pdu>
	if (!buf) {
   1e57e:	4680      	mov	r8, r0
   1e580:	2800      	cmp	r0, #0
   1e582:	d071      	beq.n	1e668 <gatt_indicate+0x134>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1e584:	2301      	movs	r3, #1
   1e586:	2200      	movs	r2, #0
   1e588:	4611      	mov	r1, r2
   1e58a:	f00e fa8b 	bl	2caa4 <bt_att_set_tx_meta_data>
   1e58e:	f108 0a08 	add.w	sl, r8, #8
   1e592:	2102      	movs	r1, #2
   1e594:	4650      	mov	r0, sl
   1e596:	f001 f8b3 	bl	1f700 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1e59a:	4606      	mov	r6, r0
   1e59c:	f826 7b02 	strh.w	r7, [r6], #2
   1e5a0:	8aa1      	ldrh	r1, [r4, #20]
   1e5a2:	4650      	mov	r0, sl
   1e5a4:	f001 f8ac 	bl	1f700 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1e5a8:	8aa2      	ldrh	r2, [r4, #20]
   1e5aa:	6921      	ldr	r1, [r4, #16]
   1e5ac:	4630      	mov	r0, r6
   1e5ae:	f00c fdc3 	bl	2b138 <memcpy>
	req->buf = buf;
   1e5b2:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   1e5b6:	4649      	mov	r1, r9
   1e5b8:	4628      	mov	r0, r5
   1e5ba:	f7ff f9ad 	bl	1d918 <bt_att_req_send>
	if (err) {
   1e5be:	4604      	mov	r4, r0
   1e5c0:	2800      	cmp	r0, #0
   1e5c2:	d17b      	bne.n	1e6bc <gatt_indicate+0x188>
}
   1e5c4:	4620      	mov	r0, r4
   1e5c6:	b016      	add	sp, #88	; 0x58
   1e5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("Link is not encrypted");
   1e5cc:	4b40      	ldr	r3, [pc, #256]	; (1e6d0 <gatt_indicate+0x19c>)
   1e5ce:	9315      	str	r3, [sp, #84]	; 0x54
   1e5d0:	2202      	movs	r2, #2
   1e5d2:	f88d 200c 	strb.w	r2, [sp, #12]
   1e5d6:	2300      	movs	r3, #0
   1e5d8:	f88d 300d 	strb.w	r3, [sp, #13]
   1e5dc:	f88d 300e 	strb.w	r3, [sp, #14]
   1e5e0:	f88d 300f 	strb.w	r3, [sp, #15]
   1e5e4:	9903      	ldr	r1, [sp, #12]
   1e5e6:	9114      	str	r1, [sp, #80]	; 0x50
   1e5e8:	4619      	mov	r1, r3
   1e5ea:	f363 0100 	bfi	r1, r3, #0, #1
   1e5ee:	f363 0141 	bfi	r1, r3, #1, #1
   1e5f2:	f363 0182 	bfi	r1, r3, #2, #1
   1e5f6:	f363 01c5 	bfi	r1, r3, #3, #3
   1e5fa:	f362 1188 	bfi	r1, r2, #6, #3
   1e5fe:	2208      	movs	r2, #8
   1e600:	f362 2152 	bfi	r1, r2, #9, #10
   1e604:	f363 41de 	bfi	r1, r3, #19, #12
   1e608:	f363 71df 	bfi	r1, r3, #31, #1
   1e60c:	aa14      	add	r2, sp, #80	; 0x50
   1e60e:	4831      	ldr	r0, [pc, #196]	; (1e6d4 <gatt_indicate+0x1a0>)
   1e610:	f7f5 fb74 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EPERM;
   1e614:	f04f 34ff 	mov.w	r4, #4294967295
   1e618:	e7d4      	b.n	1e5c4 <gatt_indicate+0x90>
			BT_WARN("Device is not subscribed to characteristic");
   1e61a:	4b2f      	ldr	r3, [pc, #188]	; (1e6d8 <gatt_indicate+0x1a4>)
   1e61c:	930f      	str	r3, [sp, #60]	; 0x3c
   1e61e:	2202      	movs	r2, #2
   1e620:	f88d 200c 	strb.w	r2, [sp, #12]
   1e624:	2300      	movs	r3, #0
   1e626:	f88d 300d 	strb.w	r3, [sp, #13]
   1e62a:	f88d 300e 	strb.w	r3, [sp, #14]
   1e62e:	f88d 300f 	strb.w	r3, [sp, #15]
   1e632:	9903      	ldr	r1, [sp, #12]
   1e634:	910e      	str	r1, [sp, #56]	; 0x38
   1e636:	4619      	mov	r1, r3
   1e638:	f363 0100 	bfi	r1, r3, #0, #1
   1e63c:	f363 0141 	bfi	r1, r3, #1, #1
   1e640:	f363 0182 	bfi	r1, r3, #2, #1
   1e644:	f363 01c5 	bfi	r1, r3, #3, #3
   1e648:	f362 1188 	bfi	r1, r2, #6, #3
   1e64c:	2208      	movs	r2, #8
   1e64e:	f362 2152 	bfi	r1, r2, #9, #10
   1e652:	f363 41de 	bfi	r1, r3, #19, #12
   1e656:	f363 71df 	bfi	r1, r3, #31, #1
   1e65a:	aa0e      	add	r2, sp, #56	; 0x38
   1e65c:	481d      	ldr	r0, [pc, #116]	; (1e6d4 <gatt_indicate+0x1a0>)
   1e65e:	f7f5 fb4d 	bl	13cfc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1e662:	f06f 0415 	mvn.w	r4, #21
   1e666:	e7ad      	b.n	1e5c4 <gatt_indicate+0x90>
		BT_WARN("No buffer available to send indication");
   1e668:	4b1c      	ldr	r3, [pc, #112]	; (1e6dc <gatt_indicate+0x1a8>)
   1e66a:	9309      	str	r3, [sp, #36]	; 0x24
   1e66c:	2202      	movs	r2, #2
   1e66e:	f88d 200c 	strb.w	r2, [sp, #12]
   1e672:	2300      	movs	r3, #0
   1e674:	f88d 300d 	strb.w	r3, [sp, #13]
   1e678:	f88d 300e 	strb.w	r3, [sp, #14]
   1e67c:	f88d 300f 	strb.w	r3, [sp, #15]
   1e680:	9903      	ldr	r1, [sp, #12]
   1e682:	9108      	str	r1, [sp, #32]
   1e684:	4619      	mov	r1, r3
   1e686:	f363 0100 	bfi	r1, r3, #0, #1
   1e68a:	f363 0141 	bfi	r1, r3, #1, #1
   1e68e:	f363 0182 	bfi	r1, r3, #2, #1
   1e692:	f363 01c5 	bfi	r1, r3, #3, #3
   1e696:	f362 1188 	bfi	r1, r2, #6, #3
   1e69a:	2208      	movs	r2, #8
   1e69c:	f362 2152 	bfi	r1, r2, #9, #10
   1e6a0:	f363 41de 	bfi	r1, r3, #19, #12
   1e6a4:	f363 71df 	bfi	r1, r3, #31, #1
   1e6a8:	aa08      	add	r2, sp, #32
   1e6aa:	480a      	ldr	r0, [pc, #40]	; (1e6d4 <gatt_indicate+0x1a0>)
   1e6ac:	f7f5 fb26 	bl	13cfc <z_impl_z_log_msg_static_create>
		bt_att_req_free(req);
   1e6b0:	4648      	mov	r0, r9
   1e6b2:	f7ff f817 	bl	1d6e4 <bt_att_req_free>
		return -ENOMEM;
   1e6b6:	f06f 040b 	mvn.w	r4, #11
   1e6ba:	e783      	b.n	1e5c4 <gatt_indicate+0x90>
		bt_att_req_free(req);
   1e6bc:	4648      	mov	r0, r9
   1e6be:	f7ff f811 	bl	1d6e4 <bt_att_req_free>
   1e6c2:	e77f      	b.n	1e5c4 <gatt_indicate+0x90>
		return -ENOMEM;
   1e6c4:	f06f 040b 	mvn.w	r4, #11
   1e6c8:	e77c      	b.n	1e5c4 <gatt_indicate+0x90>
   1e6ca:	bf00      	nop
   1e6cc:	0002cbc7 	.word	0x0002cbc7
   1e6d0:	0003281c 	.word	0x0003281c
   1e6d4:	0002f818 	.word	0x0002f818
   1e6d8:	00032834 	.word	0x00032834
   1e6dc:	00032860 	.word	0x00032860

0001e6e0 <bt_gatt_indicate>:
{
   1e6e0:	b530      	push	{r4, r5, lr}
   1e6e2:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
   1e6e4:	2900      	cmp	r1, #0
   1e6e6:	d041      	beq.n	1e76c <bt_gatt_indicate+0x8c>
   1e6e8:	4605      	mov	r5, r0
   1e6ea:	460c      	mov	r4, r1
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1e6ec:	684b      	ldr	r3, [r1, #4]
   1e6ee:	2b00      	cmp	r3, #0
   1e6f0:	d04c      	beq.n	1e78c <bt_gatt_indicate+0xac>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e6f2:	4b47      	ldr	r3, [pc, #284]	; (1e810 <bt_gatt_indicate+0x130>)
   1e6f4:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e6f8:	f013 0f04 	tst.w	r3, #4
   1e6fc:	d07f      	beq.n	1e7fe <bt_gatt_indicate+0x11e>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e6fe:	b115      	cbz	r5, 1e706 <bt_gatt_indicate+0x26>
   1e700:	7aab      	ldrb	r3, [r5, #10]
   1e702:	2b07      	cmp	r3, #7
   1e704:	d17e      	bne.n	1e804 <bt_gatt_indicate+0x124>
	data.attr = params->attr;
   1e706:	6860      	ldr	r0, [r4, #4]
   1e708:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e70a:	f7ff fc79 	bl	1e000 <bt_gatt_attr_get_handle>
   1e70e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e712:	6821      	ldr	r1, [r4, #0]
   1e714:	2900      	cmp	r1, #0
   1e716:	d04c      	beq.n	1e7b2 <bt_gatt_indicate+0xd2>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e718:	a805      	add	r0, sp, #20
   1e71a:	f7ff fdf5 	bl	1e308 <gatt_find_by_uuid>
   1e71e:	2800      	cmp	r0, #0
   1e720:	d073      	beq.n	1e80a <bt_gatt_indicate+0x12a>
		params->attr = data.attr;
   1e722:	9b05      	ldr	r3, [sp, #20]
   1e724:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e726:	9b05      	ldr	r3, [sp, #20]
   1e728:	6818      	ldr	r0, [r3, #0]
   1e72a:	2300      	movs	r3, #0
   1e72c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1e730:	f642 0303 	movw	r3, #10243	; 0x2803
   1e734:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e738:	a90b      	add	r1, sp, #44	; 0x2c
   1e73a:	f00c fd60 	bl	2b1fe <bt_uuid_cmp>
   1e73e:	b948      	cbnz	r0, 1e754 <bt_gatt_indicate+0x74>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e740:	9805      	ldr	r0, [sp, #20]
   1e742:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1e744:	799b      	ldrb	r3, [r3, #6]
   1e746:	f013 0f20 	tst.w	r3, #32
   1e74a:	d037      	beq.n	1e7bc <bt_gatt_indicate+0xdc>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e74c:	f00e fc40 	bl	2cfd0 <bt_gatt_attr_value_handle>
   1e750:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1e754:	2d00      	cmp	r5, #0
   1e756:	d034      	beq.n	1e7c2 <bt_gatt_indicate+0xe2>
		params->_ref = 1;
   1e758:	2301      	movs	r3, #1
   1e75a:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1e75c:	4622      	mov	r2, r4
   1e75e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1e762:	4628      	mov	r0, r5
   1e764:	f7ff fee6 	bl	1e534 <gatt_indicate>
}
   1e768:	b00d      	add	sp, #52	; 0x34
   1e76a:	bd30      	pop	{r4, r5, pc}
	__ASSERT(params, "invalid parameters\n");
   1e76c:	4c29      	ldr	r4, [pc, #164]	; (1e814 <bt_gatt_indicate+0x134>)
   1e76e:	f640 330b 	movw	r3, #2827	; 0xb0b
   1e772:	4622      	mov	r2, r4
   1e774:	4928      	ldr	r1, [pc, #160]	; (1e818 <bt_gatt_indicate+0x138>)
   1e776:	4829      	ldr	r0, [pc, #164]	; (1e81c <bt_gatt_indicate+0x13c>)
   1e778:	f00b f9b7 	bl	29aea <assert_print>
   1e77c:	4828      	ldr	r0, [pc, #160]	; (1e820 <bt_gatt_indicate+0x140>)
   1e77e:	f00b f9b4 	bl	29aea <assert_print>
   1e782:	f640 310b 	movw	r1, #2827	; 0xb0b
   1e786:	4620      	mov	r0, r4
   1e788:	f00b f9a8 	bl	29adc <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1e78c:	680b      	ldr	r3, [r1, #0]
   1e78e:	2b00      	cmp	r3, #0
   1e790:	d1af      	bne.n	1e6f2 <bt_gatt_indicate+0x12>
   1e792:	4c20      	ldr	r4, [pc, #128]	; (1e814 <bt_gatt_indicate+0x134>)
   1e794:	f640 330c 	movw	r3, #2828	; 0xb0c
   1e798:	4622      	mov	r2, r4
   1e79a:	4922      	ldr	r1, [pc, #136]	; (1e824 <bt_gatt_indicate+0x144>)
   1e79c:	481f      	ldr	r0, [pc, #124]	; (1e81c <bt_gatt_indicate+0x13c>)
   1e79e:	f00b f9a4 	bl	29aea <assert_print>
   1e7a2:	481f      	ldr	r0, [pc, #124]	; (1e820 <bt_gatt_indicate+0x140>)
   1e7a4:	f00b f9a1 	bl	29aea <assert_print>
   1e7a8:	f640 310c 	movw	r1, #2828	; 0xb0c
   1e7ac:	4620      	mov	r0, r4
   1e7ae:	f00b f995 	bl	29adc <assert_post_action>
		if (!data.handle) {
   1e7b2:	2800      	cmp	r0, #0
   1e7b4:	d1b7      	bne.n	1e726 <bt_gatt_indicate+0x46>
			return -ENOENT;
   1e7b6:	f06f 0001 	mvn.w	r0, #1
   1e7ba:	e7d5      	b.n	1e768 <bt_gatt_indicate+0x88>
			return -EINVAL;
   1e7bc:	f06f 0015 	mvn.w	r0, #21
   1e7c0:	e7d2      	b.n	1e768 <bt_gatt_indicate+0x88>
	data.err = -ENOTCONN;
   1e7c2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e7c6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1e7c8:	2302      	movs	r3, #2
   1e7ca:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1e7ce:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1e7d0:	2300      	movs	r3, #0
   1e7d2:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e7d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1e7d8:	f642 1202 	movw	r2, #10498	; 0x2902
   1e7dc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1e7e0:	aa05      	add	r2, sp, #20
   1e7e2:	9202      	str	r2, [sp, #8]
   1e7e4:	4a10      	ldr	r2, [pc, #64]	; (1e828 <bt_gatt_indicate+0x148>)
   1e7e6:	9201      	str	r2, [sp, #4]
   1e7e8:	2201      	movs	r2, #1
   1e7ea:	9200      	str	r2, [sp, #0]
   1e7ec:	aa0a      	add	r2, sp, #40	; 0x28
   1e7ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e7f2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1e7f6:	f7ff fc51 	bl	1e09c <bt_gatt_foreach_attr_type>
	return data.err;
   1e7fa:	9807      	ldr	r0, [sp, #28]
   1e7fc:	e7b4      	b.n	1e768 <bt_gatt_indicate+0x88>
		return -EAGAIN;
   1e7fe:	f06f 000a 	mvn.w	r0, #10
   1e802:	e7b1      	b.n	1e768 <bt_gatt_indicate+0x88>
		return -ENOTCONN;
   1e804:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e808:	e7ae      	b.n	1e768 <bt_gatt_indicate+0x88>
			return -ENOENT;
   1e80a:	f06f 0001 	mvn.w	r0, #1
   1e80e:	e7ab      	b.n	1e768 <bt_gatt_indicate+0x88>
   1e810:	200080cc 	.word	0x200080cc
   1e814:	000326a4 	.word	0x000326a4
   1e818:	00032888 	.word	0x00032888
   1e81c:	0002fdac 	.word	0x0002fdac
   1e820:	00032890 	.word	0x00032890
   1e824:	000328a8 	.word	0x000328a8
   1e828:	0001ec09 	.word	0x0001ec09

0001e82c <sc_process>:
{
   1e82c:	b530      	push	{r4, r5, lr}
   1e82e:	b083      	sub	sp, #12
   1e830:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1e832:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1e836:	2101      	movs	r1, #1
   1e838:	4628      	mov	r0, r5
   1e83a:	f00e fa48 	bl	2ccce <atomic_test_bit>
   1e83e:	bb38      	cbnz	r0, 1e890 <sc_process+0x64>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e840:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1e844:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1e848:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1e84c:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e850:	e8d5 3fef 	ldaex	r3, [r5]
   1e854:	f023 0301 	bic.w	r3, r3, #1
   1e858:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e85c:	2a00      	cmp	r2, #0
   1e85e:	d1f7      	bne.n	1e850 <sc_process+0x24>
	sc->start = 0U;
   1e860:	2000      	movs	r0, #0
   1e862:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1e866:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e86a:	4b16      	ldr	r3, [pc, #88]	; (1e8c4 <sc_process+0x98>)
   1e86c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1e870:	4b15      	ldr	r3, [pc, #84]	; (1e8c8 <sc_process+0x9c>)
   1e872:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1e876:	ab01      	add	r3, sp, #4
   1e878:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1e87c:	2304      	movs	r3, #4
   1e87e:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1e882:	f1a4 0120 	sub.w	r1, r4, #32
   1e886:	f7ff ff2b 	bl	1e6e0 <bt_gatt_indicate>
   1e88a:	b188      	cbz	r0, 1e8b0 <sc_process+0x84>
}
   1e88c:	b003      	add	sp, #12
   1e88e:	bd30      	pop	{r4, r5, pc}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1e890:	4c0e      	ldr	r4, [pc, #56]	; (1e8cc <sc_process+0xa0>)
   1e892:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   1e896:	4622      	mov	r2, r4
   1e898:	490d      	ldr	r1, [pc, #52]	; (1e8d0 <sc_process+0xa4>)
   1e89a:	480e      	ldr	r0, [pc, #56]	; (1e8d4 <sc_process+0xa8>)
   1e89c:	f00b f925 	bl	29aea <assert_print>
   1e8a0:	480d      	ldr	r0, [pc, #52]	; (1e8d8 <sc_process+0xac>)
   1e8a2:	f00b f922 	bl	29aea <assert_print>
   1e8a6:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1e8aa:	4620      	mov	r0, r4
   1e8ac:	f00b f916 	bl	29adc <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e8b0:	e8d5 3fef 	ldaex	r3, [r5]
   1e8b4:	f043 0302 	orr.w	r3, r3, #2
   1e8b8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e8bc:	2a00      	cmp	r2, #0
   1e8be:	d0e5      	beq.n	1e88c <sc_process+0x60>
   1e8c0:	e7f6      	b.n	1e8b0 <sc_process+0x84>
   1e8c2:	bf00      	nop
   1e8c4:	000329b0 	.word	0x000329b0
   1e8c8:	0001de49 	.word	0x0001de49
   1e8cc:	000326a4 	.word	0x000326a4
   1e8d0:	000328c8 	.word	0x000328c8
   1e8d4:	0002fdac 	.word	0x0002fdac
   1e8d8:	000328fc 	.word	0x000328fc

0001e8dc <sc_restore>:
{
   1e8dc:	b510      	push	{r4, lr}
   1e8de:	b088      	sub	sp, #32
   1e8e0:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1e8e2:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1e8e6:	7a00      	ldrb	r0, [r0, #8]
   1e8e8:	f7ff f8b4 	bl	1da54 <find_sc_cfg>
	if (!cfg) {
   1e8ec:	b1f0      	cbz	r0, 1e92c <sc_restore+0x50>
   1e8ee:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1e8f0:	8902      	ldrh	r2, [r0, #8]
   1e8f2:	b90a      	cbnz	r2, 1e8f8 <sc_restore+0x1c>
   1e8f4:	8941      	ldrh	r1, [r0, #10]
   1e8f6:	b1c9      	cbz	r1, 1e92c <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1e8f8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1e8fc:	895b      	ldrh	r3, [r3, #10]
   1e8fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1e902:	4620      	mov	r0, r4
   1e904:	f7fc fdd2 	bl	1b4ac <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1e908:	491c      	ldr	r1, [pc, #112]	; (1e97c <sc_restore+0xa0>)
   1e90a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1e90e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1e912:	4a1b      	ldr	r2, [pc, #108]	; (1e980 <sc_restore+0xa4>)
   1e914:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1e916:	4a1b      	ldr	r2, [pc, #108]	; (1e984 <sc_restore+0xa8>)
   1e918:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1e91a:	aa01      	add	r2, sp, #4
   1e91c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1e91e:	2204      	movs	r2, #4
   1e920:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e922:	4619      	mov	r1, r3
   1e924:	4620      	mov	r0, r4
   1e926:	f7ff fedb 	bl	1e6e0 <bt_gatt_indicate>
   1e92a:	b908      	cbnz	r0, 1e930 <sc_restore+0x54>
}
   1e92c:	b008      	add	sp, #32
   1e92e:	bd10      	pop	{r4, pc}
		BT_ERR("SC restore indication failed");
   1e930:	4b15      	ldr	r3, [pc, #84]	; (1e988 <sc_restore+0xac>)
   1e932:	9307      	str	r3, [sp, #28]
   1e934:	2302      	movs	r3, #2
   1e936:	f88d 3000 	strb.w	r3, [sp]
   1e93a:	2300      	movs	r3, #0
   1e93c:	f88d 3001 	strb.w	r3, [sp, #1]
   1e940:	f88d 3002 	strb.w	r3, [sp, #2]
   1e944:	f88d 3003 	strb.w	r3, [sp, #3]
   1e948:	9a00      	ldr	r2, [sp, #0]
   1e94a:	9206      	str	r2, [sp, #24]
   1e94c:	4619      	mov	r1, r3
   1e94e:	f363 0100 	bfi	r1, r3, #0, #1
   1e952:	f363 0141 	bfi	r1, r3, #1, #1
   1e956:	f363 0182 	bfi	r1, r3, #2, #1
   1e95a:	f363 01c5 	bfi	r1, r3, #3, #3
   1e95e:	2201      	movs	r2, #1
   1e960:	f362 1188 	bfi	r1, r2, #6, #3
   1e964:	2208      	movs	r2, #8
   1e966:	f362 2152 	bfi	r1, r2, #9, #10
   1e96a:	f363 41de 	bfi	r1, r3, #19, #12
   1e96e:	f363 71df 	bfi	r1, r3, #31, #1
   1e972:	aa06      	add	r2, sp, #24
   1e974:	4805      	ldr	r0, [pc, #20]	; (1e98c <sc_restore+0xb0>)
   1e976:	f7f5 f9c1 	bl	13cfc <z_impl_z_log_msg_static_create>
   1e97a:	e7d7      	b.n	1e92c <sc_restore+0x50>
   1e97c:	20009a3c 	.word	0x20009a3c
   1e980:	000329b0 	.word	0x000329b0
   1e984:	0002cd2d 	.word	0x0002cd2d
   1e988:	00032918 	.word	0x00032918
   1e98c:	0002f818 	.word	0x0002f818

0001e990 <update_ccc>:
{
   1e990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e994:	b082      	sub	sp, #8
   1e996:	af00      	add	r7, sp, #0
	struct bt_conn *conn = data->conn;
   1e998:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e99c:	6882      	ldr	r2, [r0, #8]
   1e99e:	4b3a      	ldr	r3, [pc, #232]	; (1ea88 <update_ccc+0xf8>)
   1e9a0:	429a      	cmp	r2, r3
   1e9a2:	d004      	beq.n	1e9ae <update_ccc+0x1e>
}
   1e9a4:	2001      	movs	r0, #1
   1e9a6:	3708      	adds	r7, #8
   1e9a8:	46bd      	mov	sp, r7
   1e9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e9ae:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1e9b0:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e9b4:	2500      	movs	r5, #0
   1e9b6:	2d00      	cmp	r5, #0
   1e9b8:	d1f4      	bne.n	1e9a4 <update_ccc+0x14>
		if (!cfg->value ||
   1e9ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1e9be:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   1e9c2:	891b      	ldrh	r3, [r3, #8]
   1e9c4:	2b00      	cmp	r3, #0
   1e9c6:	d056      	beq.n	1ea76 <update_ccc+0xe6>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e9c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1e9cc:	eb09 0243 	add.w	r2, r9, r3, lsl #1
   1e9d0:	3201      	adds	r2, #1
   1e9d2:	f819 1013 	ldrb.w	r1, [r9, r3, lsl #1]
   1e9d6:	4640      	mov	r0, r8
   1e9d8:	f00d f93c 	bl	2bc54 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1e9dc:	2800      	cmp	r0, #0
   1e9de:	d04a      	beq.n	1ea76 <update_ccc+0xe6>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1e9e0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e9e4:	4621      	mov	r1, r4
   1e9e6:	4640      	mov	r0, r8
   1e9e8:	f00e fb46 	bl	2d078 <bt_gatt_check_perm>
		if (err) {
   1e9ec:	b108      	cbz	r0, 1e9f2 <update_ccc+0x62>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1e9ee:	2803      	cmp	r0, #3
   1e9f0:	d00a      	beq.n	1ea08 <update_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   1e9f2:	4649      	mov	r1, r9
   1e9f4:	4620      	mov	r0, r4
   1e9f6:	f00e f8ce 	bl	2cb96 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1e9fa:	4b24      	ldr	r3, [pc, #144]	; (1ea8c <update_ccc+0xfc>)
   1e9fc:	4599      	cmp	r9, r3
   1e9fe:	d1d1      	bne.n	1e9a4 <update_ccc+0x14>
			sc_restore(conn);
   1ea00:	4640      	mov	r0, r8
   1ea02:	f7ff ff6b 	bl	1e8dc <sc_restore>
   1ea06:	e7cd      	b.n	1e9a4 <update_ccc+0x14>
				BT_WARN("CCC %p not writable", attr);
   1ea08:	46ea      	mov	sl, sp
   1ea0a:	b088      	sub	sp, #32
   1ea0c:	466b      	mov	r3, sp
   1ea0e:	f113 0210 	adds.w	r2, r3, #16
   1ea12:	d032      	beq.n	1ea7a <update_ccc+0xea>
   1ea14:	210c      	movs	r1, #12
   1ea16:	b14a      	cbz	r2, 1ea2c <update_ccc+0x9c>
   1ea18:	4608      	mov	r0, r1
   1ea1a:	2904      	cmp	r1, #4
   1ea1c:	dd03      	ble.n	1ea26 <update_ccc+0x96>
   1ea1e:	f8df c070 	ldr.w	ip, [pc, #112]	; 1ea90 <update_ccc+0x100>
   1ea22:	f8c3 c014 	str.w	ip, [r3, #20]
   1ea26:	2808      	cmp	r0, #8
   1ea28:	dd00      	ble.n	1ea2c <update_ccc+0x9c>
   1ea2a:	619c      	str	r4, [r3, #24]
   1ea2c:	290b      	cmp	r1, #11
   1ea2e:	dd27      	ble.n	1ea80 <update_ccc+0xf0>
   1ea30:	210c      	movs	r1, #12
   1ea32:	b13a      	cbz	r2, 1ea44 <update_ccc+0xb4>
   1ea34:	2003      	movs	r0, #3
   1ea36:	7138      	strb	r0, [r7, #4]
   1ea38:	2000      	movs	r0, #0
   1ea3a:	7178      	strb	r0, [r7, #5]
   1ea3c:	71b8      	strb	r0, [r7, #6]
   1ea3e:	71f8      	strb	r0, [r7, #7]
   1ea40:	6878      	ldr	r0, [r7, #4]
   1ea42:	6118      	str	r0, [r3, #16]
   1ea44:	f36f 0600 	bfc	r6, #0, #1
   1ea48:	f36f 0641 	bfc	r6, #1, #1
   1ea4c:	f36f 0682 	bfc	r6, #2, #1
   1ea50:	f36f 06c5 	bfc	r6, #3, #3
   1ea54:	2302      	movs	r3, #2
   1ea56:	f363 1688 	bfi	r6, r3, #6, #3
   1ea5a:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   1ea5e:	f361 2652 	bfi	r6, r1, #9, #10
   1ea62:	f36f 46de 	bfc	r6, #19, #12
   1ea66:	f36f 76df 	bfc	r6, #31, #1
   1ea6a:	2300      	movs	r3, #0
   1ea6c:	4631      	mov	r1, r6
   1ea6e:	4809      	ldr	r0, [pc, #36]	; (1ea94 <update_ccc+0x104>)
   1ea70:	f7f5 f944 	bl	13cfc <z_impl_z_log_msg_static_create>
   1ea74:	46d5      	mov	sp, sl
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ea76:	3501      	adds	r5, #1
   1ea78:	e79d      	b.n	1e9b6 <update_ccc+0x26>
				BT_WARN("CCC %p not writable", attr);
   1ea7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ea7e:	e7ca      	b.n	1ea16 <update_ccc+0x86>
   1ea80:	f06f 011b 	mvn.w	r1, #27
   1ea84:	e7d5      	b.n	1ea32 <update_ccc+0xa2>
   1ea86:	bf00      	nop
   1ea88:	0001dc85 	.word	0x0001dc85
   1ea8c:	200082e0 	.word	0x200082e0
   1ea90:	00032938 	.word	0x00032938
   1ea94:	0002f818 	.word	0x0002f818

0001ea98 <gatt_notify>:
{
   1ea98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ea9c:	b095      	sub	sp, #84	; 0x54
   1ea9e:	4605      	mov	r5, r0
   1eaa0:	460f      	mov	r7, r1
   1eaa2:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1eaa4:	2294      	movs	r2, #148	; 0x94
   1eaa6:	6861      	ldr	r1, [r4, #4]
   1eaa8:	f00e fae6 	bl	2d078 <bt_gatt_check_perm>
   1eaac:	bb70      	cbnz	r0, 1eb0c <gatt_notify+0x74>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1eaae:	2201      	movs	r2, #1
   1eab0:	6861      	ldr	r1, [r4, #4]
   1eab2:	4628      	mov	r0, r5
   1eab4:	f7ff fc58 	bl	1e368 <bt_gatt_is_subscribed>
   1eab8:	2800      	cmp	r0, #0
   1eaba:	d04e      	beq.n	1eb5a <gatt_notify+0xc2>
				sizeof(*nfy) + params->len);
   1eabc:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1eabe:	3202      	adds	r2, #2
   1eac0:	211b      	movs	r1, #27
   1eac2:	4628      	mov	r0, r5
   1eac4:	f7fe fb40 	bl	1d148 <bt_att_create_pdu>
	if (!buf) {
   1eac8:	4680      	mov	r8, r0
   1eaca:	2800      	cmp	r0, #0
   1eacc:	d06c      	beq.n	1eba8 <gatt_notify+0x110>
   1eace:	f100 0908 	add.w	r9, r0, #8
   1ead2:	2102      	movs	r1, #2
   1ead4:	4648      	mov	r0, r9
   1ead6:	f000 fe13 	bl	1f700 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1eada:	4606      	mov	r6, r0
   1eadc:	f826 7b02 	strh.w	r7, [r6], #2
   1eae0:	89a1      	ldrh	r1, [r4, #12]
   1eae2:	4648      	mov	r0, r9
   1eae4:	f000 fe0c 	bl	1f700 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1eae8:	89a2      	ldrh	r2, [r4, #12]
   1eaea:	68a1      	ldr	r1, [r4, #8]
   1eaec:	4630      	mov	r0, r6
   1eaee:	f00c fb23 	bl	2b138 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1eaf2:	2301      	movs	r3, #1
   1eaf4:	6962      	ldr	r2, [r4, #20]
   1eaf6:	6921      	ldr	r1, [r4, #16]
   1eaf8:	4640      	mov	r0, r8
   1eafa:	f00d ffd3 	bl	2caa4 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1eafe:	4641      	mov	r1, r8
   1eb00:	4628      	mov	r0, r5
   1eb02:	f7fe fecd 	bl	1d8a0 <bt_att_send>
}
   1eb06:	b015      	add	sp, #84	; 0x54
   1eb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Link is not encrypted");
   1eb0c:	4b3a      	ldr	r3, [pc, #232]	; (1ebf8 <gatt_notify+0x160>)
   1eb0e:	9313      	str	r3, [sp, #76]	; 0x4c
   1eb10:	2202      	movs	r2, #2
   1eb12:	f88d 2004 	strb.w	r2, [sp, #4]
   1eb16:	2300      	movs	r3, #0
   1eb18:	f88d 3005 	strb.w	r3, [sp, #5]
   1eb1c:	f88d 3006 	strb.w	r3, [sp, #6]
   1eb20:	f88d 3007 	strb.w	r3, [sp, #7]
   1eb24:	9901      	ldr	r1, [sp, #4]
   1eb26:	9112      	str	r1, [sp, #72]	; 0x48
   1eb28:	4619      	mov	r1, r3
   1eb2a:	f363 0100 	bfi	r1, r3, #0, #1
   1eb2e:	f363 0141 	bfi	r1, r3, #1, #1
   1eb32:	f363 0182 	bfi	r1, r3, #2, #1
   1eb36:	f363 01c5 	bfi	r1, r3, #3, #3
   1eb3a:	f362 1188 	bfi	r1, r2, #6, #3
   1eb3e:	2208      	movs	r2, #8
   1eb40:	f362 2152 	bfi	r1, r2, #9, #10
   1eb44:	f363 41de 	bfi	r1, r3, #19, #12
   1eb48:	f363 71df 	bfi	r1, r3, #31, #1
   1eb4c:	aa12      	add	r2, sp, #72	; 0x48
   1eb4e:	482b      	ldr	r0, [pc, #172]	; (1ebfc <gatt_notify+0x164>)
   1eb50:	f7f5 f8d4 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EPERM;
   1eb54:	f04f 30ff 	mov.w	r0, #4294967295
   1eb58:	e7d5      	b.n	1eb06 <gatt_notify+0x6e>
			BT_WARN("Device is not subscribed to characteristic");
   1eb5a:	4b29      	ldr	r3, [pc, #164]	; (1ec00 <gatt_notify+0x168>)
   1eb5c:	930d      	str	r3, [sp, #52]	; 0x34
   1eb5e:	2202      	movs	r2, #2
   1eb60:	f88d 2004 	strb.w	r2, [sp, #4]
   1eb64:	2300      	movs	r3, #0
   1eb66:	f88d 3005 	strb.w	r3, [sp, #5]
   1eb6a:	f88d 3006 	strb.w	r3, [sp, #6]
   1eb6e:	f88d 3007 	strb.w	r3, [sp, #7]
   1eb72:	9901      	ldr	r1, [sp, #4]
   1eb74:	910c      	str	r1, [sp, #48]	; 0x30
   1eb76:	4619      	mov	r1, r3
   1eb78:	f363 0100 	bfi	r1, r3, #0, #1
   1eb7c:	f363 0141 	bfi	r1, r3, #1, #1
   1eb80:	f363 0182 	bfi	r1, r3, #2, #1
   1eb84:	f363 01c5 	bfi	r1, r3, #3, #3
   1eb88:	f362 1188 	bfi	r1, r2, #6, #3
   1eb8c:	2208      	movs	r2, #8
   1eb8e:	f362 2152 	bfi	r1, r2, #9, #10
   1eb92:	f363 41de 	bfi	r1, r3, #19, #12
   1eb96:	f363 71df 	bfi	r1, r3, #31, #1
   1eb9a:	aa0c      	add	r2, sp, #48	; 0x30
   1eb9c:	4817      	ldr	r0, [pc, #92]	; (1ebfc <gatt_notify+0x164>)
   1eb9e:	f7f5 f8ad 	bl	13cfc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1eba2:	f06f 0015 	mvn.w	r0, #21
   1eba6:	e7ae      	b.n	1eb06 <gatt_notify+0x6e>
		BT_WARN("No buffer available to send notification");
   1eba8:	4b16      	ldr	r3, [pc, #88]	; (1ec04 <gatt_notify+0x16c>)
   1ebaa:	9307      	str	r3, [sp, #28]
   1ebac:	2202      	movs	r2, #2
   1ebae:	f88d 2004 	strb.w	r2, [sp, #4]
   1ebb2:	2300      	movs	r3, #0
   1ebb4:	f88d 3005 	strb.w	r3, [sp, #5]
   1ebb8:	f88d 3006 	strb.w	r3, [sp, #6]
   1ebbc:	f88d 3007 	strb.w	r3, [sp, #7]
   1ebc0:	9901      	ldr	r1, [sp, #4]
   1ebc2:	9106      	str	r1, [sp, #24]
   1ebc4:	4619      	mov	r1, r3
   1ebc6:	f363 0100 	bfi	r1, r3, #0, #1
   1ebca:	f363 0141 	bfi	r1, r3, #1, #1
   1ebce:	f363 0182 	bfi	r1, r3, #2, #1
   1ebd2:	f363 01c5 	bfi	r1, r3, #3, #3
   1ebd6:	f362 1188 	bfi	r1, r2, #6, #3
   1ebda:	2208      	movs	r2, #8
   1ebdc:	f362 2152 	bfi	r1, r2, #9, #10
   1ebe0:	f363 41de 	bfi	r1, r3, #19, #12
   1ebe4:	f363 71df 	bfi	r1, r3, #31, #1
   1ebe8:	aa06      	add	r2, sp, #24
   1ebea:	4804      	ldr	r0, [pc, #16]	; (1ebfc <gatt_notify+0x164>)
   1ebec:	f7f5 f886 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1ebf0:	f06f 000b 	mvn.w	r0, #11
   1ebf4:	e787      	b.n	1eb06 <gatt_notify+0x6e>
   1ebf6:	bf00      	nop
   1ebf8:	0003281c 	.word	0x0003281c
   1ebfc:	0002f818 	.word	0x0002f818
   1ec00:	00032834 	.word	0x00032834
   1ec04:	0003294c 	.word	0x0003294c

0001ec08 <notify_cb>:
{
   1ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec0c:	b089      	sub	sp, #36	; 0x24
   1ec0e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ec10:	6882      	ldr	r2, [r0, #8]
   1ec12:	4b67      	ldr	r3, [pc, #412]	; (1edb0 <notify_cb+0x1a8>)
   1ec14:	429a      	cmp	r2, r3
   1ec16:	d005      	beq.n	1ec24 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1ec18:	f04f 0a01 	mov.w	sl, #1
}
   1ec1c:	4650      	mov	r0, sl
   1ec1e:	b009      	add	sp, #36	; 0x24
   1ec20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec24:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1ec26:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1ec28:	4b62      	ldr	r3, [pc, #392]	; (1edb4 <notify_cb+0x1ac>)
   1ec2a:	429d      	cmp	r5, r3
   1ec2c:	d02d      	beq.n	1ec8a <notify_cb+0x82>
			err = 0;
   1ec2e:	2400      	movs	r4, #0
   1ec30:	e084      	b.n	1ed3c <notify_cb+0x134>
				sc = (struct sc_data *)data->ind_params->data;
   1ec32:	6933      	ldr	r3, [r6, #16]
   1ec34:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1ec36:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1ec3a:	8853      	ldrh	r3, [r2, #2]
   1ec3c:	8812      	ldrh	r2, [r2, #0]
   1ec3e:	4649      	mov	r1, r9
   1ec40:	f8df c174 	ldr.w	ip, [pc, #372]	; 1edb8 <notify_cb+0x1b0>
   1ec44:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1ec48:	f7fe ffb8 	bl	1dbbc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ec4c:	3401      	adds	r4, #1
   1ec4e:	2c00      	cmp	r4, #0
   1ec50:	d1ed      	bne.n	1ec2e <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ec52:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ec56:	4b58      	ldr	r3, [pc, #352]	; (1edb8 <notify_cb+0x1b0>)
   1ec58:	eb03 0982 	add.w	r9, r3, r2, lsl #2
   1ec5c:	f109 0901 	add.w	r9, r9, #1
	return memcmp(a, b, sizeof(*a));
   1ec60:	2207      	movs	r2, #7
   1ec62:	4956      	ldr	r1, [pc, #344]	; (1edbc <notify_cb+0x1b4>)
   1ec64:	4648      	mov	r0, r9
   1ec66:	f00c fa55 	bl	2b114 <memcmp>
   1ec6a:	2800      	cmp	r0, #0
   1ec6c:	d0ee      	beq.n	1ec4c <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1ec6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1ec72:	2207      	movs	r2, #7
   1ec74:	4649      	mov	r1, r9
   1ec76:	4850      	ldr	r0, [pc, #320]	; (1edb8 <notify_cb+0x1b0>)
   1ec78:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1ec7c:	f7fc fdf0 	bl	1b860 <bt_conn_lookup_state_le>
			if (!conn) {
   1ec80:	2800      	cmp	r0, #0
   1ec82:	d0d6      	beq.n	1ec32 <notify_cb+0x2a>
			bt_conn_unref(conn);
   1ec84:	f7fc fa5c 	bl	1b140 <bt_conn_unref>
   1ec88:	e7e0      	b.n	1ec4c <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ec8a:	2400      	movs	r4, #0
   1ec8c:	e7df      	b.n	1ec4e <notify_cb+0x46>
			bt_conn_unref(conn);
   1ec8e:	f7fc fa57 	bl	1b140 <bt_conn_unref>
			continue;
   1ec92:	e052      	b.n	1ed3a <notify_cb+0x132>
			bt_conn_unref(conn);
   1ec94:	4648      	mov	r0, r9
   1ec96:	f7fc fa53 	bl	1b140 <bt_conn_unref>
			continue;
   1ec9a:	e04e      	b.n	1ed3a <notify_cb+0x132>
			BT_WARN("Link is not encrypted");
   1ec9c:	4b48      	ldr	r3, [pc, #288]	; (1edc0 <notify_cb+0x1b8>)
   1ec9e:	9307      	str	r3, [sp, #28]
   1eca0:	2202      	movs	r2, #2
   1eca2:	f88d 2004 	strb.w	r2, [sp, #4]
   1eca6:	2300      	movs	r3, #0
   1eca8:	f88d 3005 	strb.w	r3, [sp, #5]
   1ecac:	f88d 3006 	strb.w	r3, [sp, #6]
   1ecb0:	f88d 3007 	strb.w	r3, [sp, #7]
   1ecb4:	9901      	ldr	r1, [sp, #4]
   1ecb6:	9106      	str	r1, [sp, #24]
   1ecb8:	f363 0800 	bfi	r8, r3, #0, #1
   1ecbc:	f363 0841 	bfi	r8, r3, #1, #1
   1ecc0:	f363 0882 	bfi	r8, r3, #2, #1
   1ecc4:	f363 08c5 	bfi	r8, r3, #3, #3
   1ecc8:	f362 1888 	bfi	r8, r2, #6, #3
   1eccc:	2208      	movs	r2, #8
   1ecce:	f362 2852 	bfi	r8, r2, #9, #10
   1ecd2:	f363 48de 	bfi	r8, r3, #19, #12
   1ecd6:	f363 78df 	bfi	r8, r3, #31, #1
   1ecda:	aa06      	add	r2, sp, #24
   1ecdc:	4641      	mov	r1, r8
   1ecde:	4839      	ldr	r0, [pc, #228]	; (1edc4 <notify_cb+0x1bc>)
   1ece0:	f7f5 f80c 	bl	13cfc <z_impl_z_log_msg_static_create>
			bt_conn_unref(conn);
   1ece4:	4648      	mov	r0, r9
   1ece6:	f7fc fa2b 	bl	1b140 <bt_conn_unref>
			continue;
   1ecea:	e026      	b.n	1ed3a <notify_cb+0x132>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1ecec:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1ecf0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1ecf4:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1ecf6:	f012 0f02 	tst.w	r2, #2
   1ecfa:	d049      	beq.n	1ed90 <notify_cb+0x188>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1ecfc:	6932      	ldr	r2, [r6, #16]
   1ecfe:	88b1      	ldrh	r1, [r6, #4]
   1ed00:	4648      	mov	r0, r9
   1ed02:	f7ff fc17 	bl	1e534 <gatt_indicate>
			if (err == 0) {
   1ed06:	4683      	mov	fp, r0
   1ed08:	b970      	cbnz	r0, 1ed28 <notify_cb+0x120>
				data->ind_params->_ref++;
   1ed0a:	6932      	ldr	r2, [r6, #16]
   1ed0c:	7d93      	ldrb	r3, [r2, #22]
   1ed0e:	3301      	adds	r3, #1
   1ed10:	7593      	strb	r3, [r2, #22]
   1ed12:	e009      	b.n	1ed28 <notify_cb+0x120>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1ed14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ed18:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1ed1c:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1ed1e:	f013 0f01 	tst.w	r3, #1
   1ed22:	d13a      	bne.n	1ed9a <notify_cb+0x192>
			err = 0;
   1ed24:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   1ed28:	4648      	mov	r0, r9
   1ed2a:	f7fc fa09 	bl	1b140 <bt_conn_unref>
		if (err < 0) {
   1ed2e:	f1bb 0f00 	cmp.w	fp, #0
   1ed32:	f6ff af73 	blt.w	1ec1c <notify_cb+0x14>
		data->err = 0;
   1ed36:	2300      	movs	r3, #0
   1ed38:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ed3a:	3401      	adds	r4, #1
   1ed3c:	2c00      	cmp	r4, #0
   1ed3e:	d133      	bne.n	1eda8 <notify_cb+0x1a0>
		if (cfg->value != data->type) {
   1ed40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ed44:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1ed48:	891a      	ldrh	r2, [r3, #8]
   1ed4a:	89b3      	ldrh	r3, [r6, #12]
   1ed4c:	429a      	cmp	r2, r3
   1ed4e:	d1f4      	bne.n	1ed3a <notify_cb+0x132>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ed50:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ed54:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1ed58:	3101      	adds	r1, #1
   1ed5a:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1ed5e:	f7fc fce9 	bl	1b734 <bt_conn_lookup_addr_le>
		if (!conn) {
   1ed62:	4681      	mov	r9, r0
   1ed64:	2800      	cmp	r0, #0
   1ed66:	d0e8      	beq.n	1ed3a <notify_cb+0x132>
		if (conn->state != BT_CONN_CONNECTED) {
   1ed68:	7a83      	ldrb	r3, [r0, #10]
   1ed6a:	2b07      	cmp	r3, #7
   1ed6c:	d18f      	bne.n	1ec8e <notify_cb+0x86>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1ed6e:	696b      	ldr	r3, [r5, #20]
   1ed70:	b11b      	cbz	r3, 1ed7a <notify_cb+0x172>
   1ed72:	4639      	mov	r1, r7
   1ed74:	4798      	blx	r3
   1ed76:	2800      	cmp	r0, #0
   1ed78:	d08c      	beq.n	1ec94 <notify_cb+0x8c>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ed7a:	2294      	movs	r2, #148	; 0x94
   1ed7c:	4639      	mov	r1, r7
   1ed7e:	4648      	mov	r0, r9
   1ed80:	f00e f97a 	bl	2d078 <bt_gatt_check_perm>
   1ed84:	4682      	mov	sl, r0
   1ed86:	2800      	cmp	r0, #0
   1ed88:	d188      	bne.n	1ec9c <notify_cb+0x94>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1ed8a:	89b3      	ldrh	r3, [r6, #12]
   1ed8c:	2b02      	cmp	r3, #2
   1ed8e:	d0ad      	beq.n	1ecec <notify_cb+0xe4>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1ed90:	2b01      	cmp	r3, #1
   1ed92:	d0bf      	beq.n	1ed14 <notify_cb+0x10c>
			err = 0;
   1ed94:	f04f 0b00 	mov.w	fp, #0
   1ed98:	e7c6      	b.n	1ed28 <notify_cb+0x120>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1ed9a:	6932      	ldr	r2, [r6, #16]
   1ed9c:	88b1      	ldrh	r1, [r6, #4]
   1ed9e:	4648      	mov	r0, r9
   1eda0:	f7ff fe7a 	bl	1ea98 <gatt_notify>
   1eda4:	4683      	mov	fp, r0
   1eda6:	e7bf      	b.n	1ed28 <notify_cb+0x120>
	return BT_GATT_ITER_CONTINUE;
   1eda8:	f04f 0a01 	mov.w	sl, #1
   1edac:	e736      	b.n	1ec1c <notify_cb+0x14>
   1edae:	bf00      	nop
   1edb0:	0001dc85 	.word	0x0001dc85
   1edb4:	200082e0 	.word	0x200082e0
   1edb8:	20009a64 	.word	0x20009a64
   1edbc:	0003136c 	.word	0x0003136c
   1edc0:	0003281c 	.word	0x0003281c
   1edc4:	0002f818 	.word	0x0002f818

0001edc8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1edc8:	b500      	push	{lr}
   1edca:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1edcc:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1edce:	2001      	movs	r0, #1
   1edd0:	f88d 0014 	strb.w	r0, [sp, #20]
   1edd4:	ab04      	add	r3, sp, #16
   1edd6:	9302      	str	r3, [sp, #8]
   1edd8:	4b05      	ldr	r3, [pc, #20]	; (1edf0 <bt_gatt_connected+0x28>)
   1edda:	9301      	str	r3, [sp, #4]
   1eddc:	2200      	movs	r2, #0
   1edde:	9200      	str	r2, [sp, #0]
   1ede0:	4613      	mov	r3, r2
   1ede2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ede6:	f7ff f959 	bl	1e09c <bt_gatt_foreach_attr_type>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1edea:	b007      	add	sp, #28
   1edec:	f85d fb04 	ldr.w	pc, [sp], #4
   1edf0:	0001e991 	.word	0x0001e991

0001edf4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1edf6:	4605      	mov	r5, r0
   1edf8:	460e      	mov	r6, r1
   1edfa:	4617      	mov	r7, r2
	return list->head;
   1edfc:	4b0a      	ldr	r3, [pc, #40]	; (1ee28 <bt_gatt_att_max_mtu_changed+0x34>)
   1edfe:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ee00:	b104      	cbz	r4, 1ee04 <bt_gatt_att_max_mtu_changed+0x10>
   1ee02:	3c04      	subs	r4, #4
   1ee04:	b174      	cbz	r4, 1ee24 <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   1ee06:	6823      	ldr	r3, [r4, #0]
   1ee08:	b143      	cbz	r3, 1ee1c <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   1ee0a:	463a      	mov	r2, r7
   1ee0c:	4631      	mov	r1, r6
   1ee0e:	4628      	mov	r0, r5
   1ee10:	4798      	blx	r3
	return node->next;
   1ee12:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ee14:	2c00      	cmp	r4, #0
   1ee16:	d0f5      	beq.n	1ee04 <bt_gatt_att_max_mtu_changed+0x10>
   1ee18:	3c04      	subs	r4, #4
   1ee1a:	e7f3      	b.n	1ee04 <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee1c:	1d23      	adds	r3, r4, #4
   1ee1e:	d1f8      	bne.n	1ee12 <bt_gatt_att_max_mtu_changed+0x1e>
   1ee20:	461c      	mov	r4, r3
   1ee22:	e7ef      	b.n	1ee04 <bt_gatt_att_max_mtu_changed+0x10>
		}
	}
}
   1ee24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ee26:	bf00      	nop
   1ee28:	20009a78 	.word	0x20009a78

0001ee2c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ee2c:	b510      	push	{r4, lr}
   1ee2e:	b084      	sub	sp, #16
   1ee30:	4604      	mov	r4, r0
   1ee32:	9002      	str	r0, [sp, #8]
   1ee34:	4b07      	ldr	r3, [pc, #28]	; (1ee54 <bt_gatt_disconnected+0x28>)
   1ee36:	9301      	str	r3, [sp, #4]
   1ee38:	2200      	movs	r2, #0
   1ee3a:	9200      	str	r2, [sp, #0]
   1ee3c:	4613      	mov	r3, r2
   1ee3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ee42:	2001      	movs	r0, #1
   1ee44:	f7ff f92a 	bl	1e09c <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1ee48:	4620      	mov	r0, r4
   1ee4a:	f00d ffe6 	bl	2ce1a <remove_cf_cfg>
#endif
}
   1ee4e:	b004      	add	sp, #16
   1ee50:	bd10      	pop	{r4, pc}
   1ee52:	bf00      	nop
   1ee54:	0001deb1 	.word	0x0001deb1

0001ee58 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee5a:	b083      	sub	sp, #12
   1ee5c:	af00      	add	r7, sp, #0
   1ee5e:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ee60:	2000      	movs	r0, #0
   1ee62:	2800      	cmp	r0, #0
   1ee64:	d03a      	beq.n	1eedc <bt_smp_accept+0x84>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1ee66:	466c      	mov	r4, sp
   1ee68:	b088      	sub	sp, #32
   1ee6a:	466b      	mov	r3, sp
   1ee6c:	f113 0210 	adds.w	r2, r3, #16
   1ee70:	d044      	beq.n	1eefc <bt_smp_accept+0xa4>
   1ee72:	210c      	movs	r1, #12
   1ee74:	b13a      	cbz	r2, 1ee86 <bt_smp_accept+0x2e>
   1ee76:	4608      	mov	r0, r1
   1ee78:	2904      	cmp	r1, #4
   1ee7a:	dd01      	ble.n	1ee80 <bt_smp_accept+0x28>
   1ee7c:	4e22      	ldr	r6, [pc, #136]	; (1ef08 <bt_smp_accept+0xb0>)
   1ee7e:	615e      	str	r6, [r3, #20]
   1ee80:	2808      	cmp	r0, #8
   1ee82:	dd00      	ble.n	1ee86 <bt_smp_accept+0x2e>
   1ee84:	619d      	str	r5, [r3, #24]
   1ee86:	290b      	cmp	r1, #11
   1ee88:	dd3b      	ble.n	1ef02 <bt_smp_accept+0xaa>
   1ee8a:	f04f 0c0c 	mov.w	ip, #12
   1ee8e:	b13a      	cbz	r2, 1eea0 <bt_smp_accept+0x48>
   1ee90:	2103      	movs	r1, #3
   1ee92:	7139      	strb	r1, [r7, #4]
   1ee94:	2100      	movs	r1, #0
   1ee96:	7179      	strb	r1, [r7, #5]
   1ee98:	71b9      	strb	r1, [r7, #6]
   1ee9a:	71f9      	strb	r1, [r7, #7]
   1ee9c:	6878      	ldr	r0, [r7, #4]
   1ee9e:	6118      	str	r0, [r3, #16]
   1eea0:	2100      	movs	r1, #0
   1eea2:	f36f 0100 	bfc	r1, #0, #1
   1eea6:	f36f 0141 	bfc	r1, #1, #1
   1eeaa:	f36f 0182 	bfc	r1, #2, #1
   1eeae:	f36f 01c5 	bfc	r1, #3, #3
   1eeb2:	2301      	movs	r3, #1
   1eeb4:	f363 1188 	bfi	r1, r3, #6, #3
   1eeb8:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1eebc:	f36c 2152 	bfi	r1, ip, #9, #10
   1eec0:	f36f 41de 	bfc	r1, #19, #12
   1eec4:	f36f 71df 	bfc	r1, #31, #1
   1eec8:	2300      	movs	r3, #0
   1eeca:	4810      	ldr	r0, [pc, #64]	; (1ef0c <bt_smp_accept+0xb4>)
   1eecc:	f7f4 ff16 	bl	13cfc <z_impl_z_log_msg_static_create>
   1eed0:	46a5      	mov	sp, r4

	return -ENOMEM;
   1eed2:	f06f 000b 	mvn.w	r0, #11
}
   1eed6:	370c      	adds	r7, #12
   1eed8:	46bd      	mov	sp, r7
   1eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->chan.conn) {
   1eedc:	2394      	movs	r3, #148	; 0x94
   1eede:	fb00 f303 	mul.w	r3, r0, r3
   1eee2:	4a0b      	ldr	r2, [pc, #44]	; (1ef10 <bt_smp_accept+0xb8>)
   1eee4:	58d3      	ldr	r3, [r2, r3]
   1eee6:	b10b      	cbz	r3, 1eeec <bt_smp_accept+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1eee8:	3001      	adds	r0, #1
   1eeea:	e7ba      	b.n	1ee62 <bt_smp_accept+0xa>
		smp->chan.ops = &ops;
   1eeec:	4b08      	ldr	r3, [pc, #32]	; (1ef10 <bt_smp_accept+0xb8>)
   1eeee:	2294      	movs	r2, #148	; 0x94
   1eef0:	fb02 3300 	mla	r3, r2, r0, r3
   1eef4:	4a07      	ldr	r2, [pc, #28]	; (1ef14 <bt_smp_accept+0xbc>)
   1eef6:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   1eef8:	600b      	str	r3, [r1, #0]
		return 0;
   1eefa:	e7ec      	b.n	1eed6 <bt_smp_accept+0x7e>
	BT_ERR("No available SMP context for conn %p", conn);
   1eefc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ef00:	e7b8      	b.n	1ee74 <bt_smp_accept+0x1c>
   1ef02:	f06f 0c1b 	mvn.w	ip, #27
   1ef06:	e7c2      	b.n	1ee8e <bt_smp_accept+0x36>
   1ef08:	00032ab4 	.word	0x00032ab4
   1ef0c:	0002f840 	.word	0x0002f840
   1ef10:	20009a80 	.word	0x20009a80
   1ef14:	00032adc 	.word	0x00032adc

0001ef18 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1ef18:	4b03      	ldr	r3, [pc, #12]	; (1ef28 <pool_id+0x10>)
   1ef1a:	1ac0      	subs	r0, r0, r3
   1ef1c:	1080      	asrs	r0, r0, #2
}
   1ef1e:	4b03      	ldr	r3, [pc, #12]	; (1ef2c <pool_id+0x14>)
   1ef20:	fb03 f000 	mul.w	r0, r3, r0
   1ef24:	4770      	bx	lr
   1ef26:	bf00      	nop
   1ef28:	200085dc 	.word	0x200085dc
   1ef2c:	c4ec4ec5 	.word	0xc4ec4ec5

0001ef30 <net_buf_pool_get>:
}
   1ef30:	2234      	movs	r2, #52	; 0x34
   1ef32:	4b02      	ldr	r3, [pc, #8]	; (1ef3c <net_buf_pool_get+0xc>)
   1ef34:	fb02 3000 	mla	r0, r2, r0, r3
   1ef38:	4770      	bx	lr
   1ef3a:	bf00      	nop
   1ef3c:	200085dc 	.word	0x200085dc

0001ef40 <net_buf_reset>:

	return buf;
}

void net_buf_reset(struct net_buf *buf)
{
   1ef40:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ef42:	7943      	ldrb	r3, [r0, #5]
   1ef44:	b933      	cbnz	r3, 1ef54 <net_buf_reset+0x14>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1ef46:	6803      	ldr	r3, [r0, #0]
   1ef48:	b97b      	cbnz	r3, 1ef6a <net_buf_reset+0x2a>
	buf->len  = 0U;
   1ef4a:	2300      	movs	r3, #0
   1ef4c:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   1ef4e:	6903      	ldr	r3, [r0, #16]
   1ef50:	6083      	str	r3, [r0, #8]

	net_buf_simple_reset(&buf->b);
}
   1ef52:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ef54:	4c0a      	ldr	r4, [pc, #40]	; (1ef80 <net_buf_reset+0x40>)
   1ef56:	2356      	movs	r3, #86	; 0x56
   1ef58:	4622      	mov	r2, r4
   1ef5a:	490a      	ldr	r1, [pc, #40]	; (1ef84 <net_buf_reset+0x44>)
   1ef5c:	480a      	ldr	r0, [pc, #40]	; (1ef88 <net_buf_reset+0x48>)
   1ef5e:	f00a fdc4 	bl	29aea <assert_print>
   1ef62:	2156      	movs	r1, #86	; 0x56
   1ef64:	4620      	mov	r0, r4
   1ef66:	f00a fdb9 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1ef6a:	4c05      	ldr	r4, [pc, #20]	; (1ef80 <net_buf_reset+0x40>)
   1ef6c:	2357      	movs	r3, #87	; 0x57
   1ef6e:	4622      	mov	r2, r4
   1ef70:	4906      	ldr	r1, [pc, #24]	; (1ef8c <net_buf_reset+0x4c>)
   1ef72:	4805      	ldr	r0, [pc, #20]	; (1ef88 <net_buf_reset+0x48>)
   1ef74:	f00a fdb9 	bl	29aea <assert_print>
   1ef78:	2157      	movs	r1, #87	; 0x57
   1ef7a:	4620      	mov	r0, r4
   1ef7c:	f00a fdae 	bl	29adc <assert_post_action>
   1ef80:	00032b0c 	.word	0x00032b0c
   1ef84:	00032b30 	.word	0x00032b30
   1ef88:	0002fdac 	.word	0x0002fdac
   1ef8c:	00032b44 	.word	0x00032b44

0001ef90 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef94:	b083      	sub	sp, #12
   1ef96:	4605      	mov	r5, r0
   1ef98:	9101      	str	r1, [sp, #4]
   1ef9a:	4616      	mov	r6, r2
   1ef9c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ef9e:	4610      	mov	r0, r2
   1efa0:	4619      	mov	r1, r3
   1efa2:	f010 f908 	bl	2f1b6 <sys_clock_timeout_end_calc>
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1efa6:	b34d      	cbz	r5, 1effc <net_buf_alloc_len+0x6c>
   1efa8:	4682      	mov	sl, r0
   1efaa:	468b      	mov	fp, r1
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1efac:	f105 091c 	add.w	r9, r5, #28
	__asm__ volatile(
   1efb0:	f04f 0320 	mov.w	r3, #32
   1efb4:	f3ef 8811 	mrs	r8, BASEPRI
   1efb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1efbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1efc0:	4648      	mov	r0, r9
   1efc2:	f005 ff39 	bl	24e38 <z_spin_lock_valid>
   1efc6:	b320      	cbz	r0, 1f012 <net_buf_alloc_len+0x82>
	z_spin_lock_set_owner(l);
   1efc8:	4648      	mov	r0, r9
   1efca:	f005 ff55 	bl	24e78 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1efce:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1efd0:	2b00      	cmp	r3, #0
   1efd2:	f000 8086 	beq.w	1f0e2 <net_buf_alloc_len+0x152>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1efd6:	8c2a      	ldrh	r2, [r5, #32]
   1efd8:	4293      	cmp	r3, r2
   1efda:	d238      	bcs.n	1f04e <net_buf_alloc_len+0xbe>
	return z_impl_k_queue_get(queue, timeout);
   1efdc:	2200      	movs	r2, #0
   1efde:	2300      	movs	r3, #0
   1efe0:	4628      	mov	r0, r5
   1efe2:	f006 fbe7 	bl	257b4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1efe6:	4604      	mov	r4, r0
   1efe8:	b388      	cbz	r0, 1f04e <net_buf_alloc_len+0xbe>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1efea:	4648      	mov	r0, r9
   1efec:	f005 ff34 	bl	24e58 <z_spin_unlock_valid>
   1eff0:	b1f0      	cbz	r0, 1f030 <net_buf_alloc_len+0xa0>
	__asm__ volatile(
   1eff2:	f388 8811 	msr	BASEPRI, r8
   1eff6:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1effa:	e038      	b.n	1f06e <net_buf_alloc_len+0xde>
	__ASSERT_NO_MSG(pool);
   1effc:	4c5c      	ldr	r4, [pc, #368]	; (1f170 <net_buf_alloc_len+0x1e0>)
   1effe:	23f4      	movs	r3, #244	; 0xf4
   1f000:	4622      	mov	r2, r4
   1f002:	495c      	ldr	r1, [pc, #368]	; (1f174 <net_buf_alloc_len+0x1e4>)
   1f004:	485c      	ldr	r0, [pc, #368]	; (1f178 <net_buf_alloc_len+0x1e8>)
   1f006:	f00a fd70 	bl	29aea <assert_print>
   1f00a:	21f4      	movs	r1, #244	; 0xf4
   1f00c:	4620      	mov	r0, r4
   1f00e:	f00a fd65 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f012:	4c5a      	ldr	r4, [pc, #360]	; (1f17c <net_buf_alloc_len+0x1ec>)
   1f014:	2394      	movs	r3, #148	; 0x94
   1f016:	4622      	mov	r2, r4
   1f018:	4959      	ldr	r1, [pc, #356]	; (1f180 <net_buf_alloc_len+0x1f0>)
   1f01a:	4857      	ldr	r0, [pc, #348]	; (1f178 <net_buf_alloc_len+0x1e8>)
   1f01c:	f00a fd65 	bl	29aea <assert_print>
   1f020:	4649      	mov	r1, r9
   1f022:	4858      	ldr	r0, [pc, #352]	; (1f184 <net_buf_alloc_len+0x1f4>)
   1f024:	f00a fd61 	bl	29aea <assert_print>
   1f028:	2194      	movs	r1, #148	; 0x94
   1f02a:	4620      	mov	r0, r4
   1f02c:	f00a fd56 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f030:	4c52      	ldr	r4, [pc, #328]	; (1f17c <net_buf_alloc_len+0x1ec>)
   1f032:	23c2      	movs	r3, #194	; 0xc2
   1f034:	4622      	mov	r2, r4
   1f036:	4954      	ldr	r1, [pc, #336]	; (1f188 <net_buf_alloc_len+0x1f8>)
   1f038:	484f      	ldr	r0, [pc, #316]	; (1f178 <net_buf_alloc_len+0x1e8>)
   1f03a:	f00a fd56 	bl	29aea <assert_print>
   1f03e:	4649      	mov	r1, r9
   1f040:	4852      	ldr	r0, [pc, #328]	; (1f18c <net_buf_alloc_len+0x1fc>)
   1f042:	f00a fd52 	bl	29aea <assert_print>
   1f046:	21c2      	movs	r1, #194	; 0xc2
   1f048:	4620      	mov	r0, r4
   1f04a:	f00a fd47 	bl	29adc <assert_post_action>
			}
		}

		uninit_count = pool->uninit_count--;
   1f04e:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1f050:	1e63      	subs	r3, r4, #1
   1f052:	846b      	strh	r3, [r5, #34]	; 0x22
   1f054:	4648      	mov	r0, r9
   1f056:	f005 feff 	bl	24e58 <z_spin_unlock_valid>
   1f05a:	b398      	cbz	r0, 1f0c4 <net_buf_alloc_len+0x134>
   1f05c:	f388 8811 	msr	BASEPRI, r8
   1f060:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   1f064:	4621      	mov	r1, r4
   1f066:	4628      	mov	r0, r5
   1f068:	f00e f8b3 	bl	2d1d2 <pool_get_uninit>
   1f06c:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1f06e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1f072:	f1b8 0f00 	cmp.w	r8, #0
   1f076:	d06a      	beq.n	1f14e <net_buf_alloc_len+0x1be>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1f078:	ea56 0307 	orrs.w	r3, r6, r7
   1f07c:	d005      	beq.n	1f08a <net_buf_alloc_len+0xfa>
   1f07e:	f1b7 3fff 	cmp.w	r7, #4294967295
   1f082:	bf08      	it	eq
   1f084:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1f088:	d14b      	bne.n	1f122 <net_buf_alloc_len+0x192>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1f08a:	4632      	mov	r2, r6
   1f08c:	463b      	mov	r3, r7
   1f08e:	a901      	add	r1, sp, #4
   1f090:	4620      	mov	r0, r4
   1f092:	f00e f8b3 	bl	2d1fc <data_alloc>
   1f096:	4605      	mov	r5, r0
   1f098:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1f09a:	2800      	cmp	r0, #0
   1f09c:	d052      	beq.n	1f144 <net_buf_alloc_len+0x1b4>
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1f09e:	9b01      	ldr	r3, [sp, #4]
   1f0a0:	4598      	cmp	r8, r3
   1f0a2:	d956      	bls.n	1f152 <net_buf_alloc_len+0x1c2>
   1f0a4:	4c32      	ldr	r4, [pc, #200]	; (1f170 <net_buf_alloc_len+0x1e0>)
   1f0a6:	f240 1355 	movw	r3, #341	; 0x155
   1f0aa:	4622      	mov	r2, r4
   1f0ac:	4938      	ldr	r1, [pc, #224]	; (1f190 <net_buf_alloc_len+0x200>)
   1f0ae:	4832      	ldr	r0, [pc, #200]	; (1f178 <net_buf_alloc_len+0x1e8>)
   1f0b0:	f00a fd1b 	bl	29aea <assert_print>
   1f0b4:	4837      	ldr	r0, [pc, #220]	; (1f194 <net_buf_alloc_len+0x204>)
   1f0b6:	f00a fd18 	bl	29aea <assert_print>
   1f0ba:	f240 1155 	movw	r1, #341	; 0x155
   1f0be:	4620      	mov	r0, r4
   1f0c0:	f00a fd0c 	bl	29adc <assert_post_action>
   1f0c4:	4c2d      	ldr	r4, [pc, #180]	; (1f17c <net_buf_alloc_len+0x1ec>)
   1f0c6:	23c2      	movs	r3, #194	; 0xc2
   1f0c8:	4622      	mov	r2, r4
   1f0ca:	492f      	ldr	r1, [pc, #188]	; (1f188 <net_buf_alloc_len+0x1f8>)
   1f0cc:	482a      	ldr	r0, [pc, #168]	; (1f178 <net_buf_alloc_len+0x1e8>)
   1f0ce:	f00a fd0c 	bl	29aea <assert_print>
   1f0d2:	4649      	mov	r1, r9
   1f0d4:	482d      	ldr	r0, [pc, #180]	; (1f18c <net_buf_alloc_len+0x1fc>)
   1f0d6:	f00a fd08 	bl	29aea <assert_print>
   1f0da:	21c2      	movs	r1, #194	; 0xc2
   1f0dc:	4620      	mov	r0, r4
   1f0de:	f00a fcfd 	bl	29adc <assert_post_action>
   1f0e2:	4648      	mov	r0, r9
   1f0e4:	f005 feb8 	bl	24e58 <z_spin_unlock_valid>
   1f0e8:	b160      	cbz	r0, 1f104 <net_buf_alloc_len+0x174>
   1f0ea:	f388 8811 	msr	BASEPRI, r8
   1f0ee:	f3bf 8f6f 	isb	sy
   1f0f2:	4632      	mov	r2, r6
   1f0f4:	463b      	mov	r3, r7
   1f0f6:	4628      	mov	r0, r5
   1f0f8:	f006 fb5c 	bl	257b4 <z_impl_k_queue_get>
	if (!buf) {
   1f0fc:	4604      	mov	r4, r0
   1f0fe:	2800      	cmp	r0, #0
   1f100:	d1b5      	bne.n	1f06e <net_buf_alloc_len+0xde>
   1f102:	e030      	b.n	1f166 <net_buf_alloc_len+0x1d6>
   1f104:	4c1d      	ldr	r4, [pc, #116]	; (1f17c <net_buf_alloc_len+0x1ec>)
   1f106:	23c2      	movs	r3, #194	; 0xc2
   1f108:	4622      	mov	r2, r4
   1f10a:	491f      	ldr	r1, [pc, #124]	; (1f188 <net_buf_alloc_len+0x1f8>)
   1f10c:	481a      	ldr	r0, [pc, #104]	; (1f178 <net_buf_alloc_len+0x1e8>)
   1f10e:	f00a fcec 	bl	29aea <assert_print>
   1f112:	4649      	mov	r1, r9
   1f114:	481d      	ldr	r0, [pc, #116]	; (1f18c <net_buf_alloc_len+0x1fc>)
   1f116:	f00a fce8 	bl	29aea <assert_print>
   1f11a:	21c2      	movs	r1, #194	; 0xc2
   1f11c:	4620      	mov	r0, r4
   1f11e:	f00a fcdd 	bl	29adc <assert_post_action>
			int64_t remaining = end - sys_clock_tick_get();
   1f122:	f009 f969 	bl	283f8 <sys_clock_tick_get>
   1f126:	ebba 0a00 	subs.w	sl, sl, r0
   1f12a:	eb6b 0b01 	sbc.w	fp, fp, r1
			if (remaining <= 0) {
   1f12e:	f1ba 0f01 	cmp.w	sl, #1
   1f132:	f17b 0300 	sbcs.w	r3, fp, #0
   1f136:	db02      	blt.n	1f13e <net_buf_alloc_len+0x1ae>
				timeout = Z_TIMEOUT_TICKS(remaining);
   1f138:	4656      	mov	r6, sl
   1f13a:	465f      	mov	r7, fp
   1f13c:	e7a5      	b.n	1f08a <net_buf_alloc_len+0xfa>
				timeout = K_NO_WAIT;
   1f13e:	2600      	movs	r6, #0
   1f140:	4637      	mov	r7, r6
   1f142:	e7a2      	b.n	1f08a <net_buf_alloc_len+0xfa>
			net_buf_destroy(buf);
   1f144:	4620      	mov	r0, r4
   1f146:	f00e f86d 	bl	2d224 <net_buf_destroy>
			return NULL;
   1f14a:	462c      	mov	r4, r5
   1f14c:	e00b      	b.n	1f166 <net_buf_alloc_len+0x1d6>
#endif
	} else {
		buf->__buf = NULL;
   1f14e:	2300      	movs	r3, #0
   1f150:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1f152:	2301      	movs	r3, #1
   1f154:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1f156:	2300      	movs	r3, #0
   1f158:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1f15a:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1f15c:	9b01      	ldr	r3, [sp, #4]
   1f15e:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1f160:	4620      	mov	r0, r4
   1f162:	f7ff feed 	bl	1ef40 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1f166:	4620      	mov	r0, r4
   1f168:	b003      	add	sp, #12
   1f16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f16e:	bf00      	nop
   1f170:	00032b0c 	.word	0x00032b0c
   1f174:	00032b60 	.word	0x00032b60
   1f178:	0002fdac 	.word	0x0002fdac
   1f17c:	000301b0 	.word	0x000301b0
   1f180:	00030210 	.word	0x00030210
   1f184:	00030228 	.word	0x00030228
   1f188:	000301e0 	.word	0x000301e0
   1f18c:	000301f8 	.word	0x000301f8
   1f190:	00032b68 	.word	0x00032b68
   1f194:	00032b7c 	.word	0x00032b7c

0001f198 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1f198:	b570      	push	{r4, r5, r6, lr}
   1f19a:	4605      	mov	r5, r0
   1f19c:	f006 fb0a 	bl	257b4 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1f1a0:	4606      	mov	r6, r0
   1f1a2:	b300      	cbz	r0, 1f1e6 <net_buf_get+0x4e>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f1a4:	4604      	mov	r4, r0
   1f1a6:	7963      	ldrb	r3, [r4, #5]
   1f1a8:	f013 0f01 	tst.w	r3, #1
   1f1ac:	d019      	beq.n	1f1e2 <net_buf_get+0x4a>
   1f1ae:	2200      	movs	r2, #0
   1f1b0:	2300      	movs	r3, #0
   1f1b2:	4628      	mov	r0, r5
   1f1b4:	f006 fafe 	bl	257b4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1f1b8:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1f1ba:	b128      	cbz	r0, 1f1c8 <net_buf_get+0x30>

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1f1bc:	7963      	ldrb	r3, [r4, #5]
   1f1be:	f023 0301 	bic.w	r3, r3, #1
   1f1c2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f1c4:	4604      	mov	r4, r0
   1f1c6:	e7ee      	b.n	1f1a6 <net_buf_get+0xe>
		__ASSERT_NO_MSG(frag->frags);
   1f1c8:	4c08      	ldr	r4, [pc, #32]	; (1f1ec <net_buf_get+0x54>)
   1f1ca:	f240 13ad 	movw	r3, #429	; 0x1ad
   1f1ce:	4622      	mov	r2, r4
   1f1d0:	4907      	ldr	r1, [pc, #28]	; (1f1f0 <net_buf_get+0x58>)
   1f1d2:	4808      	ldr	r0, [pc, #32]	; (1f1f4 <net_buf_get+0x5c>)
   1f1d4:	f00a fc89 	bl	29aea <assert_print>
   1f1d8:	f240 11ad 	movw	r1, #429	; 0x1ad
   1f1dc:	4620      	mov	r0, r4
   1f1de:	f00a fc7d 	bl	29adc <assert_post_action>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1f1e2:	2300      	movs	r3, #0
   1f1e4:	6023      	str	r3, [r4, #0]

	return buf;
}
   1f1e6:	4630      	mov	r0, r6
   1f1e8:	bd70      	pop	{r4, r5, r6, pc}
   1f1ea:	bf00      	nop
   1f1ec:	00032b0c 	.word	0x00032b0c
   1f1f0:	00032b80 	.word	0x00032b80
   1f1f4:	0002fdac 	.word	0x0002fdac

0001f1f8 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1f1f8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1f1fa:	b128      	cbz	r0, 1f208 <net_buf_simple_reserve+0x10>
	__ASSERT_NO_MSG(buf->len == 0U);
   1f1fc:	8882      	ldrh	r2, [r0, #4]
   1f1fe:	b982      	cbnz	r2, 1f222 <net_buf_simple_reserve+0x2a>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1f200:	6882      	ldr	r2, [r0, #8]
   1f202:	440a      	add	r2, r1
   1f204:	6002      	str	r2, [r0, #0]
}
   1f206:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(buf);
   1f208:	4c0c      	ldr	r4, [pc, #48]	; (1f23c <net_buf_simple_reserve+0x44>)
   1f20a:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1f20e:	4622      	mov	r2, r4
   1f210:	490b      	ldr	r1, [pc, #44]	; (1f240 <net_buf_simple_reserve+0x48>)
   1f212:	480c      	ldr	r0, [pc, #48]	; (1f244 <net_buf_simple_reserve+0x4c>)
   1f214:	f00a fc69 	bl	29aea <assert_print>
   1f218:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1f21c:	4620      	mov	r0, r4
   1f21e:	f00a fc5d 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1f222:	4c06      	ldr	r4, [pc, #24]	; (1f23c <net_buf_simple_reserve+0x44>)
   1f224:	f240 13c5 	movw	r3, #453	; 0x1c5
   1f228:	4622      	mov	r2, r4
   1f22a:	4907      	ldr	r1, [pc, #28]	; (1f248 <net_buf_simple_reserve+0x50>)
   1f22c:	4805      	ldr	r0, [pc, #20]	; (1f244 <net_buf_simple_reserve+0x4c>)
   1f22e:	f00a fc5c 	bl	29aea <assert_print>
   1f232:	f240 11c5 	movw	r1, #453	; 0x1c5
   1f236:	4620      	mov	r0, r4
   1f238:	f00a fc50 	bl	29adc <assert_post_action>
   1f23c:	00032b0c 	.word	0x00032b0c
   1f240:	00032c24 	.word	0x00032c24
   1f244:	0002fdac 	.word	0x0002fdac
   1f248:	00032b8c 	.word	0x00032b8c

0001f24c <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1f24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1f24e:	b120      	cbz	r0, 1f25a <net_buf_slist_put+0xe>
   1f250:	460d      	mov	r5, r1
   1f252:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(buf);
   1f254:	b171      	cbz	r1, 1f274 <net_buf_slist_put+0x28>

	for (tail = buf; tail->frags; tail = tail->frags) {
   1f256:	460c      	mov	r4, r1
   1f258:	e01e      	b.n	1f298 <net_buf_slist_put+0x4c>
	__ASSERT_NO_MSG(list);
   1f25a:	4c31      	ldr	r4, [pc, #196]	; (1f320 <net_buf_slist_put+0xd4>)
   1f25c:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1f260:	4622      	mov	r2, r4
   1f262:	4930      	ldr	r1, [pc, #192]	; (1f324 <net_buf_slist_put+0xd8>)
   1f264:	4830      	ldr	r0, [pc, #192]	; (1f328 <net_buf_slist_put+0xdc>)
   1f266:	f00a fc40 	bl	29aea <assert_print>
   1f26a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1f26e:	4620      	mov	r0, r4
   1f270:	f00a fc34 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1f274:	4c2a      	ldr	r4, [pc, #168]	; (1f320 <net_buf_slist_put+0xd4>)
   1f276:	f240 13d3 	movw	r3, #467	; 0x1d3
   1f27a:	4622      	mov	r2, r4
   1f27c:	492b      	ldr	r1, [pc, #172]	; (1f32c <net_buf_slist_put+0xe0>)
   1f27e:	482a      	ldr	r0, [pc, #168]	; (1f328 <net_buf_slist_put+0xdc>)
   1f280:	f00a fc33 	bl	29aea <assert_print>
   1f284:	f240 11d3 	movw	r1, #467	; 0x1d3
   1f288:	4620      	mov	r0, r4
   1f28a:	f00a fc27 	bl	29adc <assert_post_action>
		tail->flags |= NET_BUF_FRAGS;
   1f28e:	7963      	ldrb	r3, [r4, #5]
   1f290:	f043 0301 	orr.w	r3, r3, #1
   1f294:	7163      	strb	r3, [r4, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1f296:	4614      	mov	r4, r2
   1f298:	6822      	ldr	r2, [r4, #0]
   1f29a:	2a00      	cmp	r2, #0
   1f29c:	d1f7      	bne.n	1f28e <net_buf_slist_put+0x42>
	__asm__ volatile(
   1f29e:	f04f 0220 	mov.w	r2, #32
   1f2a2:	f3ef 8311 	mrs	r3, BASEPRI
   1f2a6:	f382 8812 	msr	BASEPRI_MAX, r2
   1f2aa:	f3bf 8f6f 	isb	sy
   1f2ae:	461e      	mov	r6, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f2b0:	481f      	ldr	r0, [pc, #124]	; (1f330 <net_buf_slist_put+0xe4>)
   1f2b2:	f005 fdc1 	bl	24e38 <z_spin_lock_valid>
   1f2b6:	b190      	cbz	r0, 1f2de <net_buf_slist_put+0x92>
	z_spin_lock_set_owner(l);
   1f2b8:	481d      	ldr	r0, [pc, #116]	; (1f330 <net_buf_slist_put+0xe4>)
   1f2ba:	f005 fddd 	bl	24e78 <z_spin_lock_set_owner>
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
   1f2be:	4623      	mov	r3, r4
Z_GENLIST_APPEND_LIST(slist, snode)
   1f2c0:	b125      	cbz	r5, 1f2cc <net_buf_slist_put+0x80>
   1f2c2:	b11c      	cbz	r4, 1f2cc <net_buf_slist_put+0x80>
	return list->tail;
   1f2c4:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1f2c6:	b1ca      	cbz	r2, 1f2fc <net_buf_slist_put+0xb0>
	parent->next = child;
   1f2c8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1f2ca:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f2cc:	4818      	ldr	r0, [pc, #96]	; (1f330 <net_buf_slist_put+0xe4>)
   1f2ce:	f005 fdc3 	bl	24e58 <z_spin_unlock_valid>
   1f2d2:	b1a8      	cbz	r0, 1f300 <net_buf_slist_put+0xb4>
	__asm__ volatile(
   1f2d4:	f386 8811 	msr	BASEPRI, r6
   1f2d8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1f2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f2de:	4c15      	ldr	r4, [pc, #84]	; (1f334 <net_buf_slist_put+0xe8>)
   1f2e0:	2394      	movs	r3, #148	; 0x94
   1f2e2:	4622      	mov	r2, r4
   1f2e4:	4914      	ldr	r1, [pc, #80]	; (1f338 <net_buf_slist_put+0xec>)
   1f2e6:	4810      	ldr	r0, [pc, #64]	; (1f328 <net_buf_slist_put+0xdc>)
   1f2e8:	f00a fbff 	bl	29aea <assert_print>
   1f2ec:	4910      	ldr	r1, [pc, #64]	; (1f330 <net_buf_slist_put+0xe4>)
   1f2ee:	4813      	ldr	r0, [pc, #76]	; (1f33c <net_buf_slist_put+0xf0>)
   1f2f0:	f00a fbfb 	bl	29aea <assert_print>
   1f2f4:	2194      	movs	r1, #148	; 0x94
   1f2f6:	4620      	mov	r0, r4
   1f2f8:	f00a fbf0 	bl	29adc <assert_post_action>
	list->head = node;
   1f2fc:	603d      	str	r5, [r7, #0]
}
   1f2fe:	e7e4      	b.n	1f2ca <net_buf_slist_put+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f300:	4c0c      	ldr	r4, [pc, #48]	; (1f334 <net_buf_slist_put+0xe8>)
   1f302:	23c2      	movs	r3, #194	; 0xc2
   1f304:	4622      	mov	r2, r4
   1f306:	490e      	ldr	r1, [pc, #56]	; (1f340 <net_buf_slist_put+0xf4>)
   1f308:	4807      	ldr	r0, [pc, #28]	; (1f328 <net_buf_slist_put+0xdc>)
   1f30a:	f00a fbee 	bl	29aea <assert_print>
   1f30e:	4908      	ldr	r1, [pc, #32]	; (1f330 <net_buf_slist_put+0xe4>)
   1f310:	480c      	ldr	r0, [pc, #48]	; (1f344 <net_buf_slist_put+0xf8>)
   1f312:	f00a fbea 	bl	29aea <assert_print>
   1f316:	21c2      	movs	r1, #194	; 0xc2
   1f318:	4620      	mov	r0, r4
   1f31a:	f00a fbdf 	bl	29adc <assert_post_action>
   1f31e:	bf00      	nop
   1f320:	00032b0c 	.word	0x00032b0c
   1f324:	00032b9c 	.word	0x00032b9c
   1f328:	0002fdac 	.word	0x0002fdac
   1f32c:	00032c24 	.word	0x00032c24
   1f330:	20009b14 	.word	0x20009b14
   1f334:	000301b0 	.word	0x000301b0
   1f338:	00030210 	.word	0x00030210
   1f33c:	00030228 	.word	0x00030228
   1f340:	000301e0 	.word	0x000301e0
   1f344:	000301f8 	.word	0x000301f8

0001f348 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1f348:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1f34a:	b1c8      	cbz	r0, 1f380 <net_buf_slist_get+0x38>
   1f34c:	4604      	mov	r4, r0
	__asm__ volatile(
   1f34e:	f04f 0320 	mov.w	r3, #32
   1f352:	f3ef 8611 	mrs	r6, BASEPRI
   1f356:	f383 8812 	msr	BASEPRI_MAX, r3
   1f35a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f35e:	4836      	ldr	r0, [pc, #216]	; (1f438 <net_buf_slist_get+0xf0>)
   1f360:	f005 fd6a 	bl	24e38 <z_spin_lock_valid>
   1f364:	b1c8      	cbz	r0, 1f39a <net_buf_slist_get+0x52>
	z_spin_lock_set_owner(l);
   1f366:	4834      	ldr	r0, [pc, #208]	; (1f438 <net_buf_slist_get+0xf0>)
   1f368:	f005 fd86 	bl	24e78 <z_spin_lock_set_owner>
	return list->head;
   1f36c:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1f36e:	2d00      	cmp	r5, #0
   1f370:	d048      	beq.n	1f404 <net_buf_slist_get+0xbc>
	return node->next;
   1f372:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1f374:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f376:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f378:	4295      	cmp	r5, r2
   1f37a:	d01d      	beq.n	1f3b8 <net_buf_slist_get+0x70>
{
   1f37c:	462a      	mov	r2, r5
   1f37e:	e024      	b.n	1f3ca <net_buf_slist_get+0x82>
	__ASSERT_NO_MSG(list);
   1f380:	4c2e      	ldr	r4, [pc, #184]	; (1f43c <net_buf_slist_get+0xf4>)
   1f382:	f240 13e3 	movw	r3, #483	; 0x1e3
   1f386:	4622      	mov	r2, r4
   1f388:	492d      	ldr	r1, [pc, #180]	; (1f440 <net_buf_slist_get+0xf8>)
   1f38a:	482e      	ldr	r0, [pc, #184]	; (1f444 <net_buf_slist_get+0xfc>)
   1f38c:	f00a fbad 	bl	29aea <assert_print>
   1f390:	f240 11e3 	movw	r1, #483	; 0x1e3
   1f394:	4620      	mov	r0, r4
   1f396:	f00a fba1 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f39a:	4c2b      	ldr	r4, [pc, #172]	; (1f448 <net_buf_slist_get+0x100>)
   1f39c:	2394      	movs	r3, #148	; 0x94
   1f39e:	4622      	mov	r2, r4
   1f3a0:	492a      	ldr	r1, [pc, #168]	; (1f44c <net_buf_slist_get+0x104>)
   1f3a2:	4828      	ldr	r0, [pc, #160]	; (1f444 <net_buf_slist_get+0xfc>)
   1f3a4:	f00a fba1 	bl	29aea <assert_print>
   1f3a8:	4923      	ldr	r1, [pc, #140]	; (1f438 <net_buf_slist_get+0xf0>)
   1f3aa:	4829      	ldr	r0, [pc, #164]	; (1f450 <net_buf_slist_get+0x108>)
   1f3ac:	f00a fb9d 	bl	29aea <assert_print>
   1f3b0:	2194      	movs	r1, #148	; 0x94
   1f3b2:	4620      	mov	r0, r4
   1f3b4:	f00a fb92 	bl	29adc <assert_post_action>
	list->tail = node;
   1f3b8:	6063      	str	r3, [r4, #4]
}
   1f3ba:	e7df      	b.n	1f37c <net_buf_slist_get+0x34>
	buf = (void *)sys_slist_get(list);

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
   1f3bc:	6013      	str	r3, [r2, #0]
			__ASSERT_NO_MSG(frag->frags);
   1f3be:	b193      	cbz	r3, 1f3e6 <net_buf_slist_get+0x9e>

			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
   1f3c0:	7951      	ldrb	r1, [r2, #5]
   1f3c2:	f021 0101 	bic.w	r1, r1, #1
   1f3c6:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f3c8:	461a      	mov	r2, r3
   1f3ca:	7953      	ldrb	r3, [r2, #5]
   1f3cc:	f013 0f01 	tst.w	r3, #1
   1f3d0:	d016      	beq.n	1f400 <net_buf_slist_get+0xb8>
	return list->head;
   1f3d2:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1f3d4:	2b00      	cmp	r3, #0
   1f3d6:	d0f1      	beq.n	1f3bc <net_buf_slist_get+0x74>
	return node->next;
   1f3d8:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1f3da:	6021      	str	r1, [r4, #0]
	return list->tail;
   1f3dc:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f3de:	4283      	cmp	r3, r0
   1f3e0:	d1ec      	bne.n	1f3bc <net_buf_slist_get+0x74>
	list->tail = node;
   1f3e2:	6061      	str	r1, [r4, #4]
}
   1f3e4:	e7ea      	b.n	1f3bc <net_buf_slist_get+0x74>
			__ASSERT_NO_MSG(frag->frags);
   1f3e6:	4c15      	ldr	r4, [pc, #84]	; (1f43c <net_buf_slist_get+0xf4>)
   1f3e8:	f240 13ed 	movw	r3, #493	; 0x1ed
   1f3ec:	4622      	mov	r2, r4
   1f3ee:	4919      	ldr	r1, [pc, #100]	; (1f454 <net_buf_slist_get+0x10c>)
   1f3f0:	4814      	ldr	r0, [pc, #80]	; (1f444 <net_buf_slist_get+0xfc>)
   1f3f2:	f00a fb7a 	bl	29aea <assert_print>
   1f3f6:	f240 11ed 	movw	r1, #493	; 0x1ed
   1f3fa:	4620      	mov	r0, r4
   1f3fc:	f00a fb6e 	bl	29adc <assert_post_action>
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1f400:	2300      	movs	r3, #0
   1f402:	6013      	str	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f404:	480c      	ldr	r0, [pc, #48]	; (1f438 <net_buf_slist_get+0xf0>)
   1f406:	f005 fd27 	bl	24e58 <z_spin_unlock_valid>
   1f40a:	b128      	cbz	r0, 1f418 <net_buf_slist_get+0xd0>
	__asm__ volatile(
   1f40c:	f386 8811 	msr	BASEPRI, r6
   1f410:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1f414:	4628      	mov	r0, r5
   1f416:	bd70      	pop	{r4, r5, r6, pc}
   1f418:	4c0b      	ldr	r4, [pc, #44]	; (1f448 <net_buf_slist_get+0x100>)
   1f41a:	23c2      	movs	r3, #194	; 0xc2
   1f41c:	4622      	mov	r2, r4
   1f41e:	490e      	ldr	r1, [pc, #56]	; (1f458 <net_buf_slist_get+0x110>)
   1f420:	4808      	ldr	r0, [pc, #32]	; (1f444 <net_buf_slist_get+0xfc>)
   1f422:	f00a fb62 	bl	29aea <assert_print>
   1f426:	4904      	ldr	r1, [pc, #16]	; (1f438 <net_buf_slist_get+0xf0>)
   1f428:	480c      	ldr	r0, [pc, #48]	; (1f45c <net_buf_slist_get+0x114>)
   1f42a:	f00a fb5e 	bl	29aea <assert_print>
   1f42e:	21c2      	movs	r1, #194	; 0xc2
   1f430:	4620      	mov	r0, r4
   1f432:	f00a fb53 	bl	29adc <assert_post_action>
   1f436:	bf00      	nop
   1f438:	20009b14 	.word	0x20009b14
   1f43c:	00032b0c 	.word	0x00032b0c
   1f440:	00032b9c 	.word	0x00032b9c
   1f444:	0002fdac 	.word	0x0002fdac
   1f448:	000301b0 	.word	0x000301b0
   1f44c:	00030210 	.word	0x00030210
   1f450:	00030228 	.word	0x00030228
   1f454:	00032b80 	.word	0x00032b80
   1f458:	000301e0 	.word	0x000301e0
   1f45c:	000301f8 	.word	0x000301f8

0001f460 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1f460:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1f462:	b110      	cbz	r0, 1f46a <net_buf_put+0xa>
	__ASSERT_NO_MSG(buf);
   1f464:	b171      	cbz	r1, 1f484 <net_buf_put+0x24>

	for (tail = buf; tail->frags; tail = tail->frags) {
   1f466:	460a      	mov	r2, r1
   1f468:	e01e      	b.n	1f4a8 <net_buf_put+0x48>
	__ASSERT_NO_MSG(fifo);
   1f46a:	4c12      	ldr	r4, [pc, #72]	; (1f4b4 <net_buf_put+0x54>)
   1f46c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f470:	4622      	mov	r2, r4
   1f472:	4911      	ldr	r1, [pc, #68]	; (1f4b8 <net_buf_put+0x58>)
   1f474:	4811      	ldr	r0, [pc, #68]	; (1f4bc <net_buf_put+0x5c>)
   1f476:	f00a fb38 	bl	29aea <assert_print>
   1f47a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1f47e:	4620      	mov	r0, r4
   1f480:	f00a fb2c 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1f484:	4c0b      	ldr	r4, [pc, #44]	; (1f4b4 <net_buf_put+0x54>)
   1f486:	f240 2301 	movw	r3, #513	; 0x201
   1f48a:	4622      	mov	r2, r4
   1f48c:	490c      	ldr	r1, [pc, #48]	; (1f4c0 <net_buf_put+0x60>)
   1f48e:	480b      	ldr	r0, [pc, #44]	; (1f4bc <net_buf_put+0x5c>)
   1f490:	f00a fb2b 	bl	29aea <assert_print>
   1f494:	f240 2101 	movw	r1, #513	; 0x201
   1f498:	4620      	mov	r0, r4
   1f49a:	f00a fb1f 	bl	29adc <assert_post_action>
		tail->flags |= NET_BUF_FRAGS;
   1f49e:	7953      	ldrb	r3, [r2, #5]
   1f4a0:	f043 0301 	orr.w	r3, r3, #1
   1f4a4:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1f4a6:	4622      	mov	r2, r4
   1f4a8:	6814      	ldr	r4, [r2, #0]
   1f4aa:	2c00      	cmp	r4, #0
   1f4ac:	d1f7      	bne.n	1f49e <net_buf_put+0x3e>
	}

	k_fifo_put_list(fifo, buf, tail);
   1f4ae:	f006 f927 	bl	25700 <k_queue_append_list>
}
   1f4b2:	bd10      	pop	{r4, pc}
   1f4b4:	00032b0c 	.word	0x00032b0c
   1f4b8:	00032ba4 	.word	0x00032ba4
   1f4bc:	0002fdac 	.word	0x0002fdac
   1f4c0:	00032c24 	.word	0x00032c24

0001f4c4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1f4c4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   1f4c6:	4604      	mov	r4, r0
   1f4c8:	b9b8      	cbnz	r0, 1f4fa <net_buf_unref+0x36>
   1f4ca:	4c16      	ldr	r4, [pc, #88]	; (1f524 <net_buf_unref+0x60>)
   1f4cc:	f44f 7304 	mov.w	r3, #528	; 0x210
   1f4d0:	4622      	mov	r2, r4
   1f4d2:	4915      	ldr	r1, [pc, #84]	; (1f528 <net_buf_unref+0x64>)
   1f4d4:	4815      	ldr	r0, [pc, #84]	; (1f52c <net_buf_unref+0x68>)
   1f4d6:	f00a fb08 	bl	29aea <assert_print>
   1f4da:	f44f 7104 	mov.w	r1, #528	; 0x210
   1f4de:	4620      	mov	r0, r4
   1f4e0:	f00a fafc 	bl	29adc <assert_post_action>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   1f4e4:	2300      	movs	r3, #0
   1f4e6:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1f4e8:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1f4ea:	79a0      	ldrb	r0, [r4, #6]
   1f4ec:	f7ff fd20 	bl	1ef30 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1f4f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1f4f2:	b193      	cbz	r3, 1f51a <net_buf_unref+0x56>
			pool->destroy(buf);
   1f4f4:	4620      	mov	r0, r4
   1f4f6:	4798      	blx	r3
{
   1f4f8:	462c      	mov	r4, r5
	while (buf) {
   1f4fa:	b194      	cbz	r4, 1f522 <net_buf_unref+0x5e>
		struct net_buf *frags = buf->frags;
   1f4fc:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1f4fe:	7923      	ldrb	r3, [r4, #4]
   1f500:	3b01      	subs	r3, #1
   1f502:	b2db      	uxtb	r3, r3
   1f504:	7123      	strb	r3, [r4, #4]
   1f506:	b963      	cbnz	r3, 1f522 <net_buf_unref+0x5e>
		if (buf->__buf) {
   1f508:	6921      	ldr	r1, [r4, #16]
   1f50a:	2900      	cmp	r1, #0
   1f50c:	d0ea      	beq.n	1f4e4 <net_buf_unref+0x20>
			data_unref(buf, buf->__buf);
   1f50e:	4620      	mov	r0, r4
   1f510:	f00d fe91 	bl	2d236 <data_unref>
			buf->__buf = NULL;
   1f514:	2300      	movs	r3, #0
   1f516:	6123      	str	r3, [r4, #16]
   1f518:	e7e4      	b.n	1f4e4 <net_buf_unref+0x20>
		} else {
			net_buf_destroy(buf);
   1f51a:	4620      	mov	r0, r4
   1f51c:	f00d fe82 	bl	2d224 <net_buf_destroy>
   1f520:	e7ea      	b.n	1f4f8 <net_buf_unref+0x34>
		}

		buf = frags;
	}
}
   1f522:	bd38      	pop	{r3, r4, r5, pc}
   1f524:	00032b0c 	.word	0x00032b0c
   1f528:	00032c24 	.word	0x00032c24
   1f52c:	0002fdac 	.word	0x0002fdac

0001f530 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
	__ASSERT_NO_MSG(buf);
   1f530:	b118      	cbz	r0, 1f53a <net_buf_ref+0xa>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1f532:	7902      	ldrb	r2, [r0, #4]
   1f534:	3201      	adds	r2, #1
   1f536:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1f538:	4770      	bx	lr
{
   1f53a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1f53c:	4c06      	ldr	r4, [pc, #24]	; (1f558 <net_buf_ref+0x28>)
   1f53e:	f240 233f 	movw	r3, #575	; 0x23f
   1f542:	4622      	mov	r2, r4
   1f544:	4905      	ldr	r1, [pc, #20]	; (1f55c <net_buf_ref+0x2c>)
   1f546:	4806      	ldr	r0, [pc, #24]	; (1f560 <net_buf_ref+0x30>)
   1f548:	f00a facf 	bl	29aea <assert_print>
   1f54c:	f240 213f 	movw	r1, #575	; 0x23f
   1f550:	4620      	mov	r0, r4
   1f552:	f00a fac3 	bl	29adc <assert_post_action>
   1f556:	bf00      	nop
   1f558:	00032b0c 	.word	0x00032b0c
   1f55c:	00032c24 	.word	0x00032c24
   1f560:	0002fdac 	.word	0x0002fdac

0001f564 <net_buf_frag_last>:
	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	__ASSERT_NO_MSG(buf);
   1f564:	4603      	mov	r3, r0
   1f566:	b120      	cbz	r0, 1f572 <net_buf_frag_last+0xe>

	while (buf->frags) {
   1f568:	4618      	mov	r0, r3
   1f56a:	681b      	ldr	r3, [r3, #0]
   1f56c:	2b00      	cmp	r3, #0
   1f56e:	d1fb      	bne.n	1f568 <net_buf_frag_last+0x4>
		buf = buf->frags;
	}

	return buf;
}
   1f570:	4770      	bx	lr
{
   1f572:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1f574:	4c06      	ldr	r4, [pc, #24]	; (1f590 <net_buf_frag_last+0x2c>)
   1f576:	f44f 731f 	mov.w	r3, #636	; 0x27c
   1f57a:	4622      	mov	r2, r4
   1f57c:	4905      	ldr	r1, [pc, #20]	; (1f594 <net_buf_frag_last+0x30>)
   1f57e:	4806      	ldr	r0, [pc, #24]	; (1f598 <net_buf_frag_last+0x34>)
   1f580:	f00a fab3 	bl	29aea <assert_print>
   1f584:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1f588:	4620      	mov	r0, r4
   1f58a:	f00a faa7 	bl	29adc <assert_post_action>
   1f58e:	bf00      	nop
   1f590:	00032b0c 	.word	0x00032b0c
   1f594:	00032c24 	.word	0x00032c24
   1f598:	0002fdac 	.word	0x0002fdac

0001f59c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1f59c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(parent);
   1f59e:	b158      	cbz	r0, 1f5b8 <net_buf_frag_insert+0x1c>
   1f5a0:	460c      	mov	r4, r1
   1f5a2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1f5a4:	b1a9      	cbz	r1, 1f5d2 <net_buf_frag_insert+0x36>

	if (parent->frags) {
   1f5a6:	6803      	ldr	r3, [r0, #0]
   1f5a8:	b123      	cbz	r3, 1f5b4 <net_buf_frag_insert+0x18>
		net_buf_frag_last(frag)->frags = parent->frags;
   1f5aa:	4608      	mov	r0, r1
   1f5ac:	f7ff ffda 	bl	1f564 <net_buf_frag_last>
   1f5b0:	682b      	ldr	r3, [r5, #0]
   1f5b2:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1f5b4:	602c      	str	r4, [r5, #0]
}
   1f5b6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(parent);
   1f5b8:	4c0c      	ldr	r4, [pc, #48]	; (1f5ec <net_buf_frag_insert+0x50>)
   1f5ba:	f240 2387 	movw	r3, #647	; 0x287
   1f5be:	4622      	mov	r2, r4
   1f5c0:	490b      	ldr	r1, [pc, #44]	; (1f5f0 <net_buf_frag_insert+0x54>)
   1f5c2:	480c      	ldr	r0, [pc, #48]	; (1f5f4 <net_buf_frag_insert+0x58>)
   1f5c4:	f00a fa91 	bl	29aea <assert_print>
   1f5c8:	f240 2187 	movw	r1, #647	; 0x287
   1f5cc:	4620      	mov	r0, r4
   1f5ce:	f00a fa85 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1f5d2:	4c06      	ldr	r4, [pc, #24]	; (1f5ec <net_buf_frag_insert+0x50>)
   1f5d4:	f44f 7322 	mov.w	r3, #648	; 0x288
   1f5d8:	4622      	mov	r2, r4
   1f5da:	4907      	ldr	r1, [pc, #28]	; (1f5f8 <net_buf_frag_insert+0x5c>)
   1f5dc:	4805      	ldr	r0, [pc, #20]	; (1f5f4 <net_buf_frag_insert+0x58>)
   1f5de:	f00a fa84 	bl	29aea <assert_print>
   1f5e2:	f44f 7122 	mov.w	r1, #648	; 0x288
   1f5e6:	4620      	mov	r0, r4
   1f5e8:	f00a fa78 	bl	29adc <assert_post_action>
   1f5ec:	00032b0c 	.word	0x00032b0c
   1f5f0:	00032bac 	.word	0x00032bac
   1f5f4:	0002fdac 	.word	0x0002fdac
   1f5f8:	00032bb4 	.word	0x00032bb4

0001f5fc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1f5fc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(frag);
   1f5fe:	b149      	cbz	r1, 1f614 <net_buf_frag_add+0x18>
   1f600:	4604      	mov	r4, r0
   1f602:	460d      	mov	r5, r1

	if (!head) {
   1f604:	b198      	cbz	r0, 1f62e <net_buf_frag_add+0x32>
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1f606:	f7ff ffad 	bl	1f564 <net_buf_frag_last>
   1f60a:	4629      	mov	r1, r5
   1f60c:	f7ff ffc6 	bl	1f59c <net_buf_frag_insert>

	return head;
   1f610:	4620      	mov	r0, r4
}
   1f612:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(frag);
   1f614:	4c08      	ldr	r4, [pc, #32]	; (1f638 <net_buf_frag_add+0x3c>)
   1f616:	f240 2393 	movw	r3, #659	; 0x293
   1f61a:	4622      	mov	r2, r4
   1f61c:	4907      	ldr	r1, [pc, #28]	; (1f63c <net_buf_frag_add+0x40>)
   1f61e:	4808      	ldr	r0, [pc, #32]	; (1f640 <net_buf_frag_add+0x44>)
   1f620:	f00a fa63 	bl	29aea <assert_print>
   1f624:	f240 2193 	movw	r1, #659	; 0x293
   1f628:	4620      	mov	r0, r4
   1f62a:	f00a fa57 	bl	29adc <assert_post_action>
		return net_buf_ref(frag);
   1f62e:	4608      	mov	r0, r1
   1f630:	f7ff ff7e 	bl	1f530 <net_buf_ref>
   1f634:	e7ed      	b.n	1f612 <net_buf_frag_add+0x16>
   1f636:	bf00      	nop
   1f638:	00032b0c 	.word	0x00032b0c
   1f63c:	00032bb4 	.word	0x00032bb4
   1f640:	0002fdac 	.word	0x0002fdac

0001f644 <net_buf_simple_pull>:

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1f644:	8882      	ldrh	r2, [r0, #4]
   1f646:	428a      	cmp	r2, r1
   1f648:	d306      	bcc.n	1f658 <net_buf_simple_pull+0x14>
   1f64a:	4603      	mov	r3, r0

	buf->len -= len;
   1f64c:	1a52      	subs	r2, r2, r1
   1f64e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1f650:	6800      	ldr	r0, [r0, #0]
   1f652:	4408      	add	r0, r1
   1f654:	6018      	str	r0, [r3, #0]
}
   1f656:	4770      	bx	lr
{
   1f658:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1f65a:	4c06      	ldr	r4, [pc, #24]	; (1f674 <net_buf_simple_pull+0x30>)
   1f65c:	f240 4377 	movw	r3, #1143	; 0x477
   1f660:	4622      	mov	r2, r4
   1f662:	4905      	ldr	r1, [pc, #20]	; (1f678 <net_buf_simple_pull+0x34>)
   1f664:	4805      	ldr	r0, [pc, #20]	; (1f67c <net_buf_simple_pull+0x38>)
   1f666:	f00a fa40 	bl	29aea <assert_print>
   1f66a:	f240 4177 	movw	r1, #1143	; 0x477
   1f66e:	4620      	mov	r0, r4
   1f670:	f00a fa34 	bl	29adc <assert_post_action>
   1f674:	00032b0c 	.word	0x00032b0c
   1f678:	00032bbc 	.word	0x00032bbc
   1f67c:	0002fdac 	.word	0x0002fdac

0001f680 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1f680:	4603      	mov	r3, r0
	void *data = buf->data;
   1f682:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   1f684:	889a      	ldrh	r2, [r3, #4]
   1f686:	428a      	cmp	r2, r1
   1f688:	d304      	bcc.n	1f694 <net_buf_simple_pull_mem+0x14>

	buf->len -= len;
   1f68a:	1a52      	subs	r2, r2, r1
   1f68c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1f68e:	4401      	add	r1, r0
   1f690:	6019      	str	r1, [r3, #0]

	return data;
}
   1f692:	4770      	bx	lr
{
   1f694:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1f696:	4c06      	ldr	r4, [pc, #24]	; (1f6b0 <net_buf_simple_pull_mem+0x30>)
   1f698:	f240 4383 	movw	r3, #1155	; 0x483
   1f69c:	4622      	mov	r2, r4
   1f69e:	4905      	ldr	r1, [pc, #20]	; (1f6b4 <net_buf_simple_pull_mem+0x34>)
   1f6a0:	4805      	ldr	r0, [pc, #20]	; (1f6b8 <net_buf_simple_pull_mem+0x38>)
   1f6a2:	f00a fa22 	bl	29aea <assert_print>
   1f6a6:	f240 4183 	movw	r1, #1155	; 0x483
   1f6aa:	4620      	mov	r0, r4
   1f6ac:	f00a fa16 	bl	29adc <assert_post_action>
   1f6b0:	00032b0c 	.word	0x00032b0c
   1f6b4:	00032bbc 	.word	0x00032bbc
   1f6b8:	0002fdac 	.word	0x0002fdac

0001f6bc <net_buf_simple_push>:
{
   1f6bc:	b538      	push	{r3, r4, r5, lr}
   1f6be:	4604      	mov	r4, r0
   1f6c0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1f6c2:	f00d fdfd 	bl	2d2c0 <net_buf_simple_headroom>
   1f6c6:	42a8      	cmp	r0, r5
   1f6c8:	d306      	bcc.n	1f6d8 <net_buf_simple_push+0x1c>
	buf->data -= len;
   1f6ca:	6820      	ldr	r0, [r4, #0]
   1f6cc:	1b40      	subs	r0, r0, r5
   1f6ce:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1f6d0:	88a3      	ldrh	r3, [r4, #4]
   1f6d2:	442b      	add	r3, r5
   1f6d4:	80a3      	strh	r3, [r4, #4]
}
   1f6d6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1f6d8:	4c06      	ldr	r4, [pc, #24]	; (1f6f4 <net_buf_simple_push+0x38>)
   1f6da:	f240 4317 	movw	r3, #1047	; 0x417
   1f6de:	4622      	mov	r2, r4
   1f6e0:	4905      	ldr	r1, [pc, #20]	; (1f6f8 <net_buf_simple_push+0x3c>)
   1f6e2:	4806      	ldr	r0, [pc, #24]	; (1f6fc <net_buf_simple_push+0x40>)
   1f6e4:	f00a fa01 	bl	29aea <assert_print>
   1f6e8:	f240 4117 	movw	r1, #1047	; 0x417
   1f6ec:	4620      	mov	r0, r4
   1f6ee:	f00a f9f5 	bl	29adc <assert_post_action>
   1f6f2:	bf00      	nop
   1f6f4:	00032b0c 	.word	0x00032b0c
   1f6f8:	00032bcc 	.word	0x00032bcc
   1f6fc:	0002fdac 	.word	0x0002fdac

0001f700 <net_buf_simple_add>:
{
   1f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f702:	4604      	mov	r4, r0
   1f704:	460d      	mov	r5, r1
	return buf->data + buf->len;
   1f706:	6803      	ldr	r3, [r0, #0]
   1f708:	8886      	ldrh	r6, [r0, #4]
   1f70a:	199f      	adds	r7, r3, r6
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1f70c:	f00d fde3 	bl	2d2d6 <net_buf_simple_tailroom>
   1f710:	42a8      	cmp	r0, r5
   1f712:	d303      	bcc.n	1f71c <net_buf_simple_add+0x1c>
	buf->len += len;
   1f714:	442e      	add	r6, r5
   1f716:	80a6      	strh	r6, [r4, #4]
}
   1f718:	4638      	mov	r0, r7
   1f71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1f71c:	4c06      	ldr	r4, [pc, #24]	; (1f738 <net_buf_simple_add+0x38>)
   1f71e:	f44f 734a 	mov.w	r3, #808	; 0x328
   1f722:	4622      	mov	r2, r4
   1f724:	4905      	ldr	r1, [pc, #20]	; (1f73c <net_buf_simple_add+0x3c>)
   1f726:	4806      	ldr	r0, [pc, #24]	; (1f740 <net_buf_simple_add+0x40>)
   1f728:	f00a f9df 	bl	29aea <assert_print>
   1f72c:	f44f 714a 	mov.w	r1, #808	; 0x328
   1f730:	4620      	mov	r0, r4
   1f732:	f00a f9d3 	bl	29adc <assert_post_action>
   1f736:	bf00      	nop
   1f738:	00032b0c 	.word	0x00032b0c
   1f73c:	00032bf0 	.word	0x00032bf0
   1f740:	0002fdac 	.word	0x0002fdac

0001f744 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1f744:	b508      	push	{r3, lr}
   1f746:	4804      	ldr	r0, [pc, #16]	; (1f758 <xoshiro128_initialize+0x14>)
   1f748:	f00f fb04 	bl	2ed54 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   1f74c:	b108      	cbz	r0, 1f752 <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   1f74e:	2000      	movs	r0, #0
}
   1f750:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1f752:	f06f 0012 	mvn.w	r0, #18
   1f756:	e7fb      	b.n	1f750 <xoshiro128_initialize+0xc>
   1f758:	0002f4d0 	.word	0x0002f4d0

0001f75c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1f75c:	4800      	ldr	r0, [pc, #0]	; (1f760 <get_hf_flags+0x4>)
   1f75e:	4770      	bx	lr
   1f760:	20009bb4 	.word	0x20009bb4

0001f764 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1f764:	4b01      	ldr	r3, [pc, #4]	; (1f76c <get_subsys+0x8>)
   1f766:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   1f768:	1140      	asrs	r0, r0, #5
   1f76a:	4770      	bx	lr
   1f76c:	20009b2c 	.word	0x20009b2c

0001f770 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1f770:	b530      	push	{r4, r5, lr}
   1f772:	b083      	sub	sp, #12
   1f774:	4605      	mov	r5, r0
   1f776:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f778:	f7ff fff4 	bl	1f764 <get_subsys>
   1f77c:	4601      	mov	r1, r0
   1f77e:	2340      	movs	r3, #64	; 0x40
   1f780:	9300      	str	r3, [sp, #0]
   1f782:	4623      	mov	r3, r4
   1f784:	4a05      	ldr	r2, [pc, #20]	; (1f79c <onoff_start+0x2c>)
   1f786:	4806      	ldr	r0, [pc, #24]	; (1f7a0 <onoff_start+0x30>)
   1f788:	f00d fe2d 	bl	2d3e6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1f78c:	1e01      	subs	r1, r0, #0
   1f78e:	db01      	blt.n	1f794 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1f790:	b003      	add	sp, #12
   1f792:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1f794:	4628      	mov	r0, r5
   1f796:	47a0      	blx	r4
}
   1f798:	e7fa      	b.n	1f790 <onoff_start+0x20>
   1f79a:	bf00      	nop
   1f79c:	0002d42f 	.word	0x0002d42f
   1f7a0:	0002f470 	.word	0x0002f470

0001f7a4 <generic_hfclk_stop>:
{
   1f7a4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f7a6:	4b08      	ldr	r3, [pc, #32]	; (1f7c8 <generic_hfclk_stop+0x24>)
   1f7a8:	e8d3 2fef 	ldaex	r2, [r3]
   1f7ac:	f022 0102 	bic.w	r1, r2, #2
   1f7b0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1f7b4:	2800      	cmp	r0, #0
   1f7b6:	d1f7      	bne.n	1f7a8 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1f7b8:	f012 0f01 	tst.w	r2, #1
   1f7bc:	d000      	beq.n	1f7c0 <generic_hfclk_stop+0x1c>
}
   1f7be:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1f7c0:	f00d fe51 	bl	2d466 <hfclk_stop>
   1f7c4:	e7fb      	b.n	1f7be <generic_hfclk_stop+0x1a>
   1f7c6:	bf00      	nop
   1f7c8:	20009bdc 	.word	0x20009bdc

0001f7cc <sys_notify_init_spinwait>:
 *
 * @param notify pointer to the notification configuration object.
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);
   1f7cc:	b130      	cbz	r0, 1f7dc <sys_notify_init_spinwait+0x10>

	*notify = (struct sys_notify){
   1f7ce:	2200      	movs	r2, #0
   1f7d0:	6002      	str	r2, [r0, #0]
   1f7d2:	6042      	str	r2, [r0, #4]
   1f7d4:	6082      	str	r2, [r0, #8]
   1f7d6:	2201      	movs	r2, #1
   1f7d8:	6042      	str	r2, [r0, #4]
   1f7da:	4770      	bx	lr
{
   1f7dc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(notify != NULL);
   1f7de:	4c06      	ldr	r4, [pc, #24]	; (1f7f8 <sys_notify_init_spinwait+0x2c>)
   1f7e0:	f44f 7385 	mov.w	r3, #266	; 0x10a
   1f7e4:	4622      	mov	r2, r4
   1f7e6:	4905      	ldr	r1, [pc, #20]	; (1f7fc <sys_notify_init_spinwait+0x30>)
   1f7e8:	4805      	ldr	r0, [pc, #20]	; (1f800 <sys_notify_init_spinwait+0x34>)
   1f7ea:	f00a f97e 	bl	29aea <assert_print>
   1f7ee:	f44f 7185 	mov.w	r1, #266	; 0x10a
   1f7f2:	4620      	mov	r0, r4
   1f7f4:	f00a f972 	bl	29adc <assert_post_action>
   1f7f8:	00032c28 	.word	0x00032c28
   1f7fc:	00032c58 	.word	0x00032c58
   1f800:	0002fdac 	.word	0x0002fdac

0001f804 <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   1f804:	2903      	cmp	r1, #3
   1f806:	d82f      	bhi.n	1f868 <nrf_clock_is_running+0x64>
   1f808:	e8df f001 	tbb	[pc, r1]
   1f80c:	291c0f02 	.word	0x291c0f02
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   1f810:	b122      	cbz	r2, 1f81c <nrf_clock_is_running+0x18>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f812:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1f816:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1f81a:	7013      	strb	r3, [r2, #0]
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f81c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1f820:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1f824:	d12e      	bne.n	1f884 <nrf_clock_is_running+0x80>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   1f826:	2000      	movs	r0, #0
   1f828:	4770      	bx	lr
            if (p_clk_src != NULL)
   1f82a:	b122      	cbz	r2, 1f836 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f82c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1f830:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1f834:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f836:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1f83a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1f83e:	d123      	bne.n	1f888 <nrf_clock_is_running+0x84>
    return false;
   1f840:	2000      	movs	r0, #0
   1f842:	4770      	bx	lr
            if (p_clk_src != NULL)
   1f844:	b122      	cbz	r2, 1f850 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1f846:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1f84a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1f84e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1f850:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   1f854:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1f858:	d118      	bne.n	1f88c <nrf_clock_is_running+0x88>
    return false;
   1f85a:	2000      	movs	r0, #0
   1f85c:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1f85e:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   1f862:	f3c0 4000 	ubfx	r0, r0, #16, #1
   1f866:	4770      	bx	lr
{
   1f868:	b510      	push	{r4, lr}
            NRFX_ASSERT(0);
   1f86a:	4c09      	ldr	r4, [pc, #36]	; (1f890 <nrf_clock_is_running+0x8c>)
   1f86c:	f240 3347 	movw	r3, #839	; 0x347
   1f870:	4622      	mov	r2, r4
   1f872:	4908      	ldr	r1, [pc, #32]	; (1f894 <nrf_clock_is_running+0x90>)
   1f874:	4808      	ldr	r0, [pc, #32]	; (1f898 <nrf_clock_is_running+0x94>)
   1f876:	f00a f938 	bl	29aea <assert_print>
   1f87a:	f240 3147 	movw	r1, #839	; 0x347
   1f87e:	4620      	mov	r0, r4
   1f880:	f00a f92c 	bl	29adc <assert_post_action>
                return true;
   1f884:	2001      	movs	r0, #1
   1f886:	4770      	bx	lr
                return true;
   1f888:	2001      	movs	r0, #1
   1f88a:	4770      	bx	lr
                return true;
   1f88c:	2001      	movs	r0, #1
}
   1f88e:	4770      	bx	lr
   1f890:	00032c70 	.word	0x00032c70
   1f894:	000337ec 	.word	0x000337ec
   1f898:	0002fdac 	.word	0x0002fdac

0001f89c <generic_hfclk_start>:
{
   1f89c:	b510      	push	{r4, lr}
   1f89e:	b082      	sub	sp, #8
	__asm__ volatile(
   1f8a0:	f04f 0320 	mov.w	r3, #32
   1f8a4:	f3ef 8411 	mrs	r4, BASEPRI
   1f8a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8ac:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1f8b0:	4a14      	ldr	r2, [pc, #80]	; (1f904 <generic_hfclk_start+0x68>)
   1f8b2:	6813      	ldr	r3, [r2, #0]
   1f8b4:	f043 0102 	orr.w	r1, r3, #2
   1f8b8:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1f8ba:	f013 0f01 	tst.w	r3, #1
   1f8be:	d109      	bne.n	1f8d4 <generic_hfclk_start+0x38>
	bool already_started = false;
   1f8c0:	2300      	movs	r3, #0
	__asm__ volatile(
   1f8c2:	f384 8811 	msr	BASEPRI, r4
   1f8c6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1f8ca:	b9ab      	cbnz	r3, 1f8f8 <generic_hfclk_start+0x5c>
	hfclk_start();
   1f8cc:	f00d fdb7 	bl	2d43e <hfclk_start>
}
   1f8d0:	b002      	add	sp, #8
   1f8d2:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1f8d4:	f10d 0207 	add.w	r2, sp, #7
   1f8d8:	2101      	movs	r1, #1
   1f8da:	480b      	ldr	r0, [pc, #44]	; (1f908 <generic_hfclk_start+0x6c>)
   1f8dc:	f7ff ff92 	bl	1f804 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1f8e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f8e4:	2b01      	cmp	r3, #1
   1f8e6:	d001      	beq.n	1f8ec <generic_hfclk_start+0x50>
	bool already_started = false;
   1f8e8:	2300      	movs	r3, #0
   1f8ea:	e7ea      	b.n	1f8c2 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   1f8ec:	f7ff ff36 	bl	1f75c <get_hf_flags>
   1f8f0:	f00d fd54 	bl	2d39c <set_on_state>
			already_started = true;
   1f8f4:	2301      	movs	r3, #1
   1f8f6:	e7e4      	b.n	1f8c2 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   1f8f8:	2100      	movs	r1, #0
   1f8fa:	4804      	ldr	r0, [pc, #16]	; (1f90c <generic_hfclk_start+0x70>)
   1f8fc:	f00d fd61 	bl	2d3c2 <clkstarted_handle>
		return;
   1f900:	e7e6      	b.n	1f8d0 <generic_hfclk_start+0x34>
   1f902:	bf00      	nop
   1f904:	20009bdc 	.word	0x20009bdc
   1f908:	40005000 	.word	0x40005000
   1f90c:	0002f470 	.word	0x0002f470

0001f910 <get_status>:
{
   1f910:	b510      	push	{r4, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1f912:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f914:	2903      	cmp	r1, #3
   1f916:	d805      	bhi.n	1f924 <get_status+0x14>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f918:	f00d fcf8 	bl	2d30c <get_sub_data>
   1f91c:	6880      	ldr	r0, [r0, #8]
}
   1f91e:	f000 0007 	and.w	r0, r0, #7
   1f922:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f924:	4c05      	ldr	r4, [pc, #20]	; (1f93c <get_status+0x2c>)
   1f926:	237a      	movs	r3, #122	; 0x7a
   1f928:	4622      	mov	r2, r4
   1f92a:	4905      	ldr	r1, [pc, #20]	; (1f940 <get_status+0x30>)
   1f92c:	4805      	ldr	r0, [pc, #20]	; (1f944 <get_status+0x34>)
   1f92e:	f00a f8dc 	bl	29aea <assert_print>
   1f932:	217a      	movs	r1, #122	; 0x7a
   1f934:	4620      	mov	r0, r4
   1f936:	f00a f8d1 	bl	29adc <assert_post_action>
   1f93a:	bf00      	nop
   1f93c:	00032ca4 	.word	0x00032ca4
   1f940:	00032ce4 	.word	0x00032ce4
   1f944:	0002fdac 	.word	0x0002fdac

0001f948 <stop>:
{
   1f948:	b570      	push	{r4, r5, r6, lr}
   1f94a:	4605      	mov	r5, r0
   1f94c:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1f94e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1f950:	4621      	mov	r1, r4
   1f952:	f00d fcdb 	bl	2d30c <get_sub_data>
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f956:	2c03      	cmp	r4, #3
   1f958:	d80d      	bhi.n	1f976 <stop+0x2e>
	err = set_off_state(&subdata->flags, ctx);
   1f95a:	4631      	mov	r1, r6
   1f95c:	3008      	adds	r0, #8
   1f95e:	f00d fce6 	bl	2d32e <set_off_state>
	if (err < 0) {
   1f962:	2800      	cmp	r0, #0
   1f964:	db06      	blt.n	1f974 <stop+0x2c>
	get_sub_config(dev, type)->stop();
   1f966:	4621      	mov	r1, r4
   1f968:	4628      	mov	r0, r5
   1f96a:	f00d fcd6 	bl	2d31a <get_sub_config>
   1f96e:	6843      	ldr	r3, [r0, #4]
   1f970:	4798      	blx	r3
	return 0;
   1f972:	2000      	movs	r0, #0
}
   1f974:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f976:	4c06      	ldr	r4, [pc, #24]	; (1f990 <stop+0x48>)
   1f978:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1f97c:	4622      	mov	r2, r4
   1f97e:	4905      	ldr	r1, [pc, #20]	; (1f994 <stop+0x4c>)
   1f980:	4805      	ldr	r0, [pc, #20]	; (1f998 <stop+0x50>)
   1f982:	f00a f8b2 	bl	29aea <assert_print>
   1f986:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1f98a:	4620      	mov	r0, r4
   1f98c:	f00a f8a6 	bl	29adc <assert_post_action>
   1f990:	00032ca4 	.word	0x00032ca4
   1f994:	00032ce4 	.word	0x00032ce4
   1f998:	0002fdac 	.word	0x0002fdac

0001f99c <onoff_stop>:
{
   1f99c:	b538      	push	{r3, r4, r5, lr}
   1f99e:	4605      	mov	r5, r0
   1f9a0:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f9a2:	f7ff fedf 	bl	1f764 <get_subsys>
   1f9a6:	4601      	mov	r1, r0
   1f9a8:	2240      	movs	r2, #64	; 0x40
   1f9aa:	4803      	ldr	r0, [pc, #12]	; (1f9b8 <onoff_stop+0x1c>)
   1f9ac:	f7ff ffcc 	bl	1f948 <stop>
   1f9b0:	4601      	mov	r1, r0
	notify(mgr, res);
   1f9b2:	4628      	mov	r0, r5
   1f9b4:	47a0      	blx	r4
}
   1f9b6:	bd38      	pop	{r3, r4, r5, pc}
   1f9b8:	0002f470 	.word	0x0002f470

0001f9bc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1f9bc:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1f9be:	2805      	cmp	r0, #5
   1f9c0:	d82d      	bhi.n	1fa1e <clock_event_handler+0x62>
   1f9c2:	e8df f000 	tbb	[pc, r0]
   1f9c6:	1a03      	.short	0x1a03
   1f9c8:	10151f2c 	.word	0x10151f2c
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1f9cc:	2100      	movs	r1, #0
   1f9ce:	481a      	ldr	r0, [pc, #104]	; (1fa38 <clock_event_handler+0x7c>)
   1f9d0:	f00d fc9c 	bl	2d30c <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1f9d4:	6883      	ldr	r3, [r0, #8]
   1f9d6:	f013 0f07 	tst.w	r3, #7
   1f9da:	d108      	bne.n	1f9ee <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1f9dc:	2100      	movs	r1, #0
   1f9de:	4816      	ldr	r0, [pc, #88]	; (1fa38 <clock_event_handler+0x7c>)
   1f9e0:	f00d fcef 	bl	2d3c2 <clkstarted_handle>
   1f9e4:	e003      	b.n	1f9ee <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1f9e6:	2102      	movs	r1, #2
   1f9e8:	4813      	ldr	r0, [pc, #76]	; (1fa38 <clock_event_handler+0x7c>)
   1f9ea:	f00d fcea 	bl	2d3c2 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1f9ee:	bd10      	pop	{r4, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1f9f0:	2103      	movs	r1, #3
   1f9f2:	4811      	ldr	r0, [pc, #68]	; (1fa38 <clock_event_handler+0x7c>)
   1f9f4:	f00d fce5 	bl	2d3c2 <clkstarted_handle>
		break;
   1f9f8:	e7f9      	b.n	1f9ee <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1f9fa:	2101      	movs	r1, #1
   1f9fc:	480e      	ldr	r0, [pc, #56]	; (1fa38 <clock_event_handler+0x7c>)
   1f9fe:	f00d fce0 	bl	2d3c2 <clkstarted_handle>
		break;
   1fa02:	e7f4      	b.n	1f9ee <clock_event_handler+0x32>
			__ASSERT_NO_MSG(false);
   1fa04:	4c0d      	ldr	r4, [pc, #52]	; (1fa3c <clock_event_handler+0x80>)
   1fa06:	f240 235f 	movw	r3, #607	; 0x25f
   1fa0a:	4622      	mov	r2, r4
   1fa0c:	490c      	ldr	r1, [pc, #48]	; (1fa40 <clock_event_handler+0x84>)
   1fa0e:	480d      	ldr	r0, [pc, #52]	; (1fa44 <clock_event_handler+0x88>)
   1fa10:	f00a f86b 	bl	29aea <assert_print>
   1fa14:	f240 215f 	movw	r1, #607	; 0x25f
   1fa18:	4620      	mov	r0, r4
   1fa1a:	f00a f85f 	bl	29adc <assert_post_action>
		__ASSERT_NO_MSG(0);
   1fa1e:	4c07      	ldr	r4, [pc, #28]	; (1fa3c <clock_event_handler+0x80>)
   1fa20:	f240 2363 	movw	r3, #611	; 0x263
   1fa24:	4622      	mov	r2, r4
   1fa26:	4906      	ldr	r1, [pc, #24]	; (1fa40 <clock_event_handler+0x84>)
   1fa28:	4806      	ldr	r0, [pc, #24]	; (1fa44 <clock_event_handler+0x88>)
   1fa2a:	f00a f85e 	bl	29aea <assert_print>
   1fa2e:	f240 2163 	movw	r1, #611	; 0x263
   1fa32:	4620      	mov	r0, r4
   1fa34:	f00a f852 	bl	29adc <assert_post_action>
   1fa38:	0002f470 	.word	0x0002f470
   1fa3c:	00032ca4 	.word	0x00032ca4
   1fa40:	000337ec 	.word	0x000337ec
   1fa44:	0002fdac 	.word	0x0002fdac

0001fa48 <lfclk_spinwait>:
{
   1fa48:	b570      	push	{r4, r5, r6, lr}
   1fa4a:	b082      	sub	sp, #8
   1fa4c:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1fa4e:	2801      	cmp	r0, #1
   1fa50:	d106      	bne.n	1fa60 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1fa52:	4b2e      	ldr	r3, [pc, #184]	; (1fb0c <lfclk_spinwait+0xc4>)
   1fa54:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1fa58:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1fa5c:	2b02      	cmp	r3, #2
   1fa5e:	d034      	beq.n	1faca <lfclk_spinwait+0x82>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1fa60:	f00f f9bb 	bl	2edda <k_is_in_isr>
   1fa64:	4604      	mov	r4, r0
   1fa66:	b910      	cbnz	r0, 1fa6e <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1fa68:	4b29      	ldr	r3, [pc, #164]	; (1fb10 <lfclk_spinwait+0xc8>)
   1fa6a:	781b      	ldrb	r3, [r3, #0]
   1fa6c:	b973      	cbnz	r3, 1fa8c <lfclk_spinwait+0x44>
	__asm__ volatile(
   1fa6e:	f04f 0320 	mov.w	r3, #32
   1fa72:	f3ef 8611 	mrs	r6, BASEPRI
   1fa76:	f383 8812 	msr	BASEPRI_MAX, r3
   1fa7a:	f3bf 8f6f 	isb	sy
   1fa7e:	2401      	movs	r4, #1
	if (!isr_mode) {
   1fa80:	b984      	cbnz	r4, 1faa4 <lfclk_spinwait+0x5c>
    p_reg->INTENCLR = mask;
   1fa82:	4b22      	ldr	r3, [pc, #136]	; (1fb0c <lfclk_spinwait+0xc4>)
   1fa84:	2202      	movs	r2, #2
   1fa86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1fa8a:	e00b      	b.n	1faa4 <lfclk_spinwait+0x5c>
	int key = isr_mode ? irq_lock() : 0;
   1fa8c:	2600      	movs	r6, #0
   1fa8e:	e7f7      	b.n	1fa80 <lfclk_spinwait+0x38>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1fa90:	b1ec      	cbz	r4, 1face <lfclk_spinwait+0x86>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1fa92:	4630      	mov	r0, r6
   1fa94:	f7f5 fb6a 	bl	1516c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1fa98:	4b1c      	ldr	r3, [pc, #112]	; (1fb0c <lfclk_spinwait+0xc4>)
   1fa9a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1fa9e:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1faa0:	2b01      	cmp	r3, #1
   1faa2:	d018      	beq.n	1fad6 <lfclk_spinwait+0x8e>
   1faa4:	f10d 0207 	add.w	r2, sp, #7
   1faa8:	2100      	movs	r1, #0
   1faaa:	4818      	ldr	r0, [pc, #96]	; (1fb0c <lfclk_spinwait+0xc4>)
   1faac:	f7ff feaa 	bl	1f804 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1fab0:	2800      	cmp	r0, #0
   1fab2:	d0ed      	beq.n	1fa90 <lfclk_spinwait+0x48>
		 && ((type == target_type)
   1fab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1fab8:	2b02      	cmp	r3, #2
   1faba:	d001      	beq.n	1fac0 <lfclk_spinwait+0x78>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1fabc:	2d01      	cmp	r5, #1
   1fabe:	d1e7      	bne.n	1fa90 <lfclk_spinwait+0x48>
	if (isr_mode) {
   1fac0:	b1f4      	cbz	r4, 1fb00 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   1fac2:	f386 8811 	msr	BASEPRI, r6
   1fac6:	f3bf 8f6f 	isb	sy
}
   1faca:	b002      	add	sp, #8
   1facc:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   1face:	2001      	movs	r0, #1
   1fad0:	f00d fce2 	bl	2d498 <k_msleep>
   1fad4:	e7e0      	b.n	1fa98 <lfclk_spinwait+0x50>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1fad6:	4b0d      	ldr	r3, [pc, #52]	; (1fb0c <lfclk_spinwait+0xc4>)
   1fad8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1fadc:	2b00      	cmp	r3, #0
   1fade:	d0e1      	beq.n	1faa4 <lfclk_spinwait+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fae0:	4b0a      	ldr	r3, [pc, #40]	; (1fb0c <lfclk_spinwait+0xc4>)
   1fae2:	2200      	movs	r2, #0
   1fae4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1fae8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1faec:	2202      	movs	r2, #2
   1faee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1faf2:	4a08      	ldr	r2, [pc, #32]	; (1fb14 <lfclk_spinwait+0xcc>)
   1faf4:	2120      	movs	r1, #32
   1faf6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fafa:	2201      	movs	r2, #1
   1fafc:	609a      	str	r2, [r3, #8]
}
   1fafe:	e7d1      	b.n	1faa4 <lfclk_spinwait+0x5c>
    p_reg->INTENSET = mask;
   1fb00:	4b02      	ldr	r3, [pc, #8]	; (1fb0c <lfclk_spinwait+0xc4>)
   1fb02:	2202      	movs	r2, #2
   1fb04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1fb08:	e7df      	b.n	1faca <lfclk_spinwait+0x82>
   1fb0a:	bf00      	nop
   1fb0c:	40005000 	.word	0x40005000
   1fb10:	20009d55 	.word	0x20009d55
   1fb14:	e000e100 	.word	0xe000e100

0001fb18 <api_blocking_start>:
{
   1fb18:	b500      	push	{lr}
   1fb1a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1fb1c:	f8cd d000 	str.w	sp, [sp]
   1fb20:	f8cd d004 	str.w	sp, [sp, #4]
   1fb24:	2300      	movs	r3, #0
   1fb26:	9302      	str	r3, [sp, #8]
   1fb28:	2301      	movs	r3, #1
   1fb2a:	9303      	str	r3, [sp, #12]
   1fb2c:	ab04      	add	r3, sp, #16
   1fb2e:	9304      	str	r3, [sp, #16]
   1fb30:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1fb32:	466b      	mov	r3, sp
   1fb34:	4a06      	ldr	r2, [pc, #24]	; (1fb50 <api_blocking_start+0x38>)
   1fb36:	f00d fc72 	bl	2d41e <api_start>
	if (err < 0) {
   1fb3a:	2800      	cmp	r0, #0
   1fb3c:	db05      	blt.n	1fb4a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1fb3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1fb42:	2300      	movs	r3, #0
   1fb44:	4668      	mov	r0, sp
   1fb46:	f005 ff0b 	bl	25960 <z_impl_k_sem_take>
}
   1fb4a:	b007      	add	sp, #28
   1fb4c:	f85d fb04 	ldr.w	pc, [sp], #4
   1fb50:	0002d4c5 	.word	0x0002d4c5

0001fb54 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1fb54:	b570      	push	{r4, r5, r6, lr}
   1fb56:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fb58:	2200      	movs	r2, #0
   1fb5a:	2101      	movs	r1, #1
   1fb5c:	2005      	movs	r0, #5
   1fb5e:	f7f5 fc77 	bl	15450 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1fb62:	4811      	ldr	r0, [pc, #68]	; (1fba8 <clk_init+0x54>)
   1fb64:	f002 fe1c 	bl	227a0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1fb68:	4b10      	ldr	r3, [pc, #64]	; (1fbac <clk_init+0x58>)
   1fb6a:	4298      	cmp	r0, r3
   1fb6c:	d119      	bne.n	1fba2 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1fb6e:	f002 fe3d 	bl	227ec <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1fb72:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1fb74:	2c03      	cmp	r4, #3
   1fb76:	d812      	bhi.n	1fb9e <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1fb78:	4621      	mov	r1, r4
   1fb7a:	4630      	mov	r0, r6
   1fb7c:	f00d fbc6 	bl	2d30c <get_sub_data>
   1fb80:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1fb82:	4621      	mov	r1, r4
   1fb84:	4630      	mov	r0, r6
   1fb86:	f00d fbce 	bl	2d326 <get_onoff_manager>
   1fb8a:	4909      	ldr	r1, [pc, #36]	; (1fbb0 <clk_init+0x5c>)
   1fb8c:	f009 fd3f 	bl	2960e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1fb90:	2800      	cmp	r0, #0
   1fb92:	db05      	blt.n	1fba0 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1fb94:	2301      	movs	r3, #1
   1fb96:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1fb98:	441c      	add	r4, r3
   1fb9a:	b2e4      	uxtb	r4, r4
   1fb9c:	e7ea      	b.n	1fb74 <clk_init+0x20>
	}

	return 0;
   1fb9e:	2000      	movs	r0, #0
}
   1fba0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1fba2:	f06f 0004 	mvn.w	r0, #4
   1fba6:	e7fb      	b.n	1fba0 <clk_init+0x4c>
   1fba8:	0001f9bd 	.word	0x0001f9bd
   1fbac:	0bad0000 	.word	0x0bad0000
   1fbb0:	00032d08 	.word	0x00032d08

0001fbb4 <z_nrf_clock_control_lf_on>:
{
   1fbb4:	b570      	push	{r4, r5, r6, lr}
   1fbb6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fbb8:	4b1c      	ldr	r3, [pc, #112]	; (1fc2c <z_nrf_clock_control_lf_on+0x78>)
   1fbba:	2101      	movs	r1, #1
   1fbbc:	e8d3 2fef 	ldaex	r2, [r3]
   1fbc0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1fbc4:	2800      	cmp	r0, #0
   1fbc6:	d1f9      	bne.n	1fbbc <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   1fbc8:	b142      	cbz	r2, 1fbdc <z_nrf_clock_control_lf_on+0x28>
	switch (start_mode) {
   1fbca:	b134      	cbz	r4, 1fbda <z_nrf_clock_control_lf_on+0x26>
   1fbcc:	1e63      	subs	r3, r4, #1
   1fbce:	b2db      	uxtb	r3, r3
   1fbd0:	2b01      	cmp	r3, #1
   1fbd2:	d81e      	bhi.n	1fc12 <z_nrf_clock_control_lf_on+0x5e>
		lfclk_spinwait(start_mode);
   1fbd4:	4620      	mov	r0, r4
   1fbd6:	f7ff ff37 	bl	1fa48 <lfclk_spinwait>
}
   1fbda:	bd70      	pop	{r4, r5, r6, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1fbdc:	4814      	ldr	r0, [pc, #80]	; (1fc30 <z_nrf_clock_control_lf_on+0x7c>)
   1fbde:	f00d fba2 	bl	2d326 <get_onoff_manager>
   1fbe2:	4605      	mov	r5, r0
		sys_notify_init_spinwait(&cli.notify);
   1fbe4:	4e13      	ldr	r6, [pc, #76]	; (1fc34 <z_nrf_clock_control_lf_on+0x80>)
   1fbe6:	4630      	mov	r0, r6
   1fbe8:	f7ff fdf0 	bl	1f7cc <sys_notify_init_spinwait>
		err = onoff_request(mgr, &cli);
   1fbec:	1f31      	subs	r1, r6, #4
   1fbee:	4628      	mov	r0, r5
   1fbf0:	f7f2 fab2 	bl	12158 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1fbf4:	2800      	cmp	r0, #0
   1fbf6:	dae8      	bge.n	1fbca <z_nrf_clock_control_lf_on+0x16>
   1fbf8:	4c0f      	ldr	r4, [pc, #60]	; (1fc38 <z_nrf_clock_control_lf_on+0x84>)
   1fbfa:	f240 2321 	movw	r3, #545	; 0x221
   1fbfe:	4622      	mov	r2, r4
   1fc00:	490e      	ldr	r1, [pc, #56]	; (1fc3c <z_nrf_clock_control_lf_on+0x88>)
   1fc02:	480f      	ldr	r0, [pc, #60]	; (1fc40 <z_nrf_clock_control_lf_on+0x8c>)
   1fc04:	f009 ff71 	bl	29aea <assert_print>
   1fc08:	f240 2121 	movw	r1, #545	; 0x221
   1fc0c:	4620      	mov	r0, r4
   1fc0e:	f009 ff65 	bl	29adc <assert_post_action>
		__ASSERT_NO_MSG(false);
   1fc12:	4c09      	ldr	r4, [pc, #36]	; (1fc38 <z_nrf_clock_control_lf_on+0x84>)
   1fc14:	f240 2333 	movw	r3, #563	; 0x233
   1fc18:	4622      	mov	r2, r4
   1fc1a:	490a      	ldr	r1, [pc, #40]	; (1fc44 <z_nrf_clock_control_lf_on+0x90>)
   1fc1c:	4808      	ldr	r0, [pc, #32]	; (1fc40 <z_nrf_clock_control_lf_on+0x8c>)
   1fc1e:	f009 ff64 	bl	29aea <assert_print>
   1fc22:	f240 2133 	movw	r1, #563	; 0x233
   1fc26:	4620      	mov	r0, r4
   1fc28:	f009 ff58 	bl	29adc <assert_post_action>
   1fc2c:	20009b28 	.word	0x20009b28
   1fc30:	0002f470 	.word	0x0002f470
   1fc34:	20009b1c 	.word	0x20009b1c
   1fc38:	00032ca4 	.word	0x00032ca4
   1fc3c:	000306e8 	.word	0x000306e8
   1fc40:	0002fdac 	.word	0x0002fdac
   1fc44:	000337ec 	.word	0x000337ec

0001fc48 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1fc48:	b510      	push	{r4, lr}
   1fc4a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1fc4c:	280a      	cmp	r0, #10
   1fc4e:	d006      	beq.n	1fc5e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1fc50:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1fc52:	4806      	ldr	r0, [pc, #24]	; (1fc6c <console_out+0x24>)
   1fc54:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1fc56:	685b      	ldr	r3, [r3, #4]
   1fc58:	4798      	blx	r3

	return c;
}
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   1fc5e:	4803      	ldr	r0, [pc, #12]	; (1fc6c <console_out+0x24>)
   1fc60:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1fc62:	685b      	ldr	r3, [r3, #4]
   1fc64:	210d      	movs	r1, #13
   1fc66:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1fc68:	e7f2      	b.n	1fc50 <console_out+0x8>
   1fc6a:	bf00      	nop
   1fc6c:	0002f4e8 	.word	0x0002f4e8

0001fc70 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   1fc70:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1fc72:	4c04      	ldr	r4, [pc, #16]	; (1fc84 <uart_console_hook_install+0x14>)
   1fc74:	4620      	mov	r0, r4
   1fc76:	f7f6 ffeb 	bl	16c50 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1fc7a:	4620      	mov	r0, r4
   1fc7c:	f7f1 fe4e 	bl	1191c <__printk_hook_install>
#endif
}
   1fc80:	bd10      	pop	{r4, pc}
   1fc82:	bf00      	nop
   1fc84:	0001fc49 	.word	0x0001fc49

0001fc88 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1fc88:	b508      	push	{r3, lr}
   1fc8a:	4805      	ldr	r0, [pc, #20]	; (1fca0 <uart_console_init+0x18>)
   1fc8c:	f00f f862 	bl	2ed54 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1fc90:	b118      	cbz	r0, 1fc9a <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   1fc92:	f7ff ffed 	bl	1fc70 <uart_console_hook_install>

	return 0;
   1fc96:	2000      	movs	r0, #0
}
   1fc98:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1fc9a:	f06f 0012 	mvn.w	r0, #18
   1fc9e:	e7fb      	b.n	1fc98 <uart_console_init+0x10>
   1fca0:	0002f4e8 	.word	0x0002f4e8

0001fca4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fca4:	b128      	cbz	r0, 1fcb2 <get_dev+0xe>
   1fca6:	2801      	cmp	r0, #1
   1fca8:	d101      	bne.n	1fcae <get_dev+0xa>
   1fcaa:	4803      	ldr	r0, [pc, #12]	; (1fcb8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1fcac:	4770      	bx	lr
	const struct device *dev = NULL;
   1fcae:	2000      	movs	r0, #0
   1fcb0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fcb2:	4802      	ldr	r0, [pc, #8]	; (1fcbc <get_dev+0x18>)
   1fcb4:	4770      	bx	lr
   1fcb6:	bf00      	nop
   1fcb8:	0002f488 	.word	0x0002f488
   1fcbc:	0002f4a0 	.word	0x0002f4a0

0001fcc0 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   1fcc0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(callback, "No callback!");
   1fcc2:	b169      	cbz	r1, 1fce0 <gpio_manage_callback+0x20>
   1fcc4:	4604      	mov	r4, r0
   1fcc6:	4616      	mov	r6, r2
   1fcc8:	460d      	mov	r5, r1
	__ASSERT(callback->handler, "No callback handler!");
   1fcca:	684b      	ldr	r3, [r1, #4]
   1fccc:	b1b3      	cbz	r3, 1fcfc <gpio_manage_callback+0x3c>
	return list->head;
   1fcce:	6803      	ldr	r3, [r0, #0]

	if (!sys_slist_is_empty(callbacks)) {
   1fcd0:	b313      	cbz	r3, 1fd18 <gpio_manage_callback+0x58>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1fcd2:	f00d fc21 	bl	2d518 <sys_slist_find_and_remove>
   1fcd6:	bb50      	cbnz	r0, 1fd2e <gpio_manage_callback+0x6e>
			if (!set) {
   1fcd8:	b9fe      	cbnz	r6, 1fd1a <gpio_manage_callback+0x5a>
				return -EINVAL;
   1fcda:	f06f 0015 	mvn.w	r0, #21
   1fcde:	e022      	b.n	1fd26 <gpio_manage_callback+0x66>
	__ASSERT(callback, "No callback!");
   1fce0:	4c16      	ldr	r4, [pc, #88]	; (1fd3c <gpio_manage_callback+0x7c>)
   1fce2:	232a      	movs	r3, #42	; 0x2a
   1fce4:	4622      	mov	r2, r4
   1fce6:	4916      	ldr	r1, [pc, #88]	; (1fd40 <gpio_manage_callback+0x80>)
   1fce8:	4816      	ldr	r0, [pc, #88]	; (1fd44 <gpio_manage_callback+0x84>)
   1fcea:	f009 fefe 	bl	29aea <assert_print>
   1fcee:	4816      	ldr	r0, [pc, #88]	; (1fd48 <gpio_manage_callback+0x88>)
   1fcf0:	f009 fefb 	bl	29aea <assert_print>
   1fcf4:	212a      	movs	r1, #42	; 0x2a
   1fcf6:	4620      	mov	r0, r4
   1fcf8:	f009 fef0 	bl	29adc <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1fcfc:	4c0f      	ldr	r4, [pc, #60]	; (1fd3c <gpio_manage_callback+0x7c>)
   1fcfe:	232b      	movs	r3, #43	; 0x2b
   1fd00:	4622      	mov	r2, r4
   1fd02:	4912      	ldr	r1, [pc, #72]	; (1fd4c <gpio_manage_callback+0x8c>)
   1fd04:	480f      	ldr	r0, [pc, #60]	; (1fd44 <gpio_manage_callback+0x84>)
   1fd06:	f009 fef0 	bl	29aea <assert_print>
   1fd0a:	4811      	ldr	r0, [pc, #68]	; (1fd50 <gpio_manage_callback+0x90>)
   1fd0c:	f009 feed 	bl	29aea <assert_print>
   1fd10:	212b      	movs	r1, #43	; 0x2b
   1fd12:	4620      	mov	r0, r4
   1fd14:	f009 fee2 	bl	29adc <assert_post_action>
			}
		}
	} else if (!set) {
   1fd18:	b132      	cbz	r2, 1fd28 <gpio_manage_callback+0x68>
   1fd1a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1fd1c:	602b      	str	r3, [r5, #0]
	list->head = node;
   1fd1e:	6025      	str	r5, [r4, #0]
	return list->tail;
   1fd20:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fd22:	b143      	cbz	r3, 1fd36 <gpio_manage_callback+0x76>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1fd24:	2000      	movs	r0, #0
}
   1fd26:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fd28:	f06f 0015 	mvn.w	r0, #21
   1fd2c:	e7fb      	b.n	1fd26 <gpio_manage_callback+0x66>
	if (set) {
   1fd2e:	2e00      	cmp	r6, #0
   1fd30:	d1f3      	bne.n	1fd1a <gpio_manage_callback+0x5a>
	return 0;
   1fd32:	2000      	movs	r0, #0
   1fd34:	e7f7      	b.n	1fd26 <gpio_manage_callback+0x66>
	list->tail = node;
   1fd36:	6065      	str	r5, [r4, #4]
   1fd38:	2000      	movs	r0, #0
}
   1fd3a:	e7f4      	b.n	1fd26 <gpio_manage_callback+0x66>
   1fd3c:	00032da4 	.word	0x00032da4
   1fd40:	00032de0 	.word	0x00032de0
   1fd44:	0002fdac 	.word	0x0002fdac
   1fd48:	00032dec 	.word	0x00032dec
   1fd4c:	00032dfc 	.word	0x00032dfc
   1fd50:	00032e10 	.word	0x00032e10

0001fd54 <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   1fd54:	b538      	push	{r3, r4, r5, lr}
   1fd56:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fd58:	6804      	ldr	r4, [r0, #0]
   1fd5a:	4620      	mov	r0, r4
   1fd5c:	f00d fbb7 	bl	2d4ce <nrf_gpio_pin_present_check>
   1fd60:	b140      	cbz	r0, 1fd74 <nrf_gpio_pin_port_decode+0x20>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1fd62:	f004 031f 	and.w	r3, r4, #31
   1fd66:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fd68:	0964      	lsrs	r4, r4, #5
   1fd6a:	d01d      	beq.n	1fda8 <nrf_gpio_pin_port_decode+0x54>
   1fd6c:	2c01      	cmp	r4, #1
   1fd6e:	d10e      	bne.n	1fd8e <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   1fd70:	480e      	ldr	r0, [pc, #56]	; (1fdac <nrf_gpio_pin_port_decode+0x58>)
}
   1fd72:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fd74:	4c0e      	ldr	r4, [pc, #56]	; (1fdb0 <nrf_gpio_pin_port_decode+0x5c>)
   1fd76:	f240 2347 	movw	r3, #583	; 0x247
   1fd7a:	4622      	mov	r2, r4
   1fd7c:	490d      	ldr	r1, [pc, #52]	; (1fdb4 <nrf_gpio_pin_port_decode+0x60>)
   1fd7e:	480e      	ldr	r0, [pc, #56]	; (1fdb8 <nrf_gpio_pin_port_decode+0x64>)
   1fd80:	f009 feb3 	bl	29aea <assert_print>
   1fd84:	f240 2147 	movw	r1, #583	; 0x247
   1fd88:	4620      	mov	r0, r4
   1fd8a:	f009 fea7 	bl	29adc <assert_post_action>
            NRFX_ASSERT(0);
   1fd8e:	4c08      	ldr	r4, [pc, #32]	; (1fdb0 <nrf_gpio_pin_port_decode+0x5c>)
   1fd90:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1fd94:	4622      	mov	r2, r4
   1fd96:	4909      	ldr	r1, [pc, #36]	; (1fdbc <nrf_gpio_pin_port_decode+0x68>)
   1fd98:	4807      	ldr	r0, [pc, #28]	; (1fdb8 <nrf_gpio_pin_port_decode+0x64>)
   1fd9a:	f009 fea6 	bl	29aea <assert_print>
   1fd9e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1fda2:	4620      	mov	r0, r4
   1fda4:	f009 fe9a 	bl	29adc <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fda8:	4805      	ldr	r0, [pc, #20]	; (1fdc0 <nrf_gpio_pin_port_decode+0x6c>)
   1fdaa:	e7e2      	b.n	1fd72 <nrf_gpio_pin_port_decode+0x1e>
   1fdac:	40842800 	.word	0x40842800
   1fdb0:	00032e28 	.word	0x00032e28
   1fdb4:	00032e5c 	.word	0x00032e5c
   1fdb8:	0002fdac 	.word	0x0002fdac
   1fdbc:	000337ec 	.word	0x000337ec
   1fdc0:	40842500 	.word	0x40842500

0001fdc4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1fdc4:	b570      	push	{r4, r5, r6, lr}
   1fdc6:	460e      	mov	r6, r1
   1fdc8:	4615      	mov	r5, r2
	return list->head;
   1fdca:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fdcc:	b121      	cbz	r1, 1fdd8 <gpio_fire_callbacks+0x14>
	return node->next;
   1fdce:	680c      	ldr	r4, [r1, #0]
   1fdd0:	b1ac      	cbz	r4, 1fdfe <gpio_fire_callbacks+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fdd2:	b9a1      	cbnz	r1, 1fdfe <gpio_fire_callbacks+0x3a>
   1fdd4:	460c      	mov	r4, r1
   1fdd6:	e012      	b.n	1fdfe <gpio_fire_callbacks+0x3a>
   1fdd8:	460c      	mov	r4, r1
   1fdda:	e010      	b.n	1fdfe <gpio_fire_callbacks+0x3a>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1fddc:	4c11      	ldr	r4, [pc, #68]	; (1fe24 <gpio_fire_callbacks+0x60>)
   1fdde:	234d      	movs	r3, #77	; 0x4d
   1fde0:	4622      	mov	r2, r4
   1fde2:	4911      	ldr	r1, [pc, #68]	; (1fe28 <gpio_fire_callbacks+0x64>)
   1fde4:	4811      	ldr	r0, [pc, #68]	; (1fe2c <gpio_fire_callbacks+0x68>)
   1fde6:	f009 fe80 	bl	29aea <assert_print>
   1fdea:	4811      	ldr	r0, [pc, #68]	; (1fe30 <gpio_fire_callbacks+0x6c>)
   1fdec:	f009 fe7d 	bl	29aea <assert_print>
   1fdf0:	214d      	movs	r1, #77	; 0x4d
   1fdf2:	4620      	mov	r0, r4
   1fdf4:	f009 fe72 	bl	29adc <assert_post_action>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fdf8:	4623      	mov	r3, r4
   1fdfa:	4621      	mov	r1, r4
   1fdfc:	461c      	mov	r4, r3
   1fdfe:	b181      	cbz	r1, 1fe22 <gpio_fire_callbacks+0x5e>
		if (cb->pin_mask & pins) {
   1fe00:	688a      	ldr	r2, [r1, #8]
   1fe02:	402a      	ands	r2, r5
   1fe04:	d004      	beq.n	1fe10 <gpio_fire_callbacks+0x4c>
			__ASSERT(cb->handler, "No callback handler!");
   1fe06:	684b      	ldr	r3, [r1, #4]
   1fe08:	2b00      	cmp	r3, #0
   1fe0a:	d0e7      	beq.n	1fddc <gpio_fire_callbacks+0x18>
			cb->handler(port, cb, cb->pin_mask & pins);
   1fe0c:	4630      	mov	r0, r6
   1fe0e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fe10:	2c00      	cmp	r4, #0
   1fe12:	d0f1      	beq.n	1fdf8 <gpio_fire_callbacks+0x34>
	return node->next;
   1fe14:	6823      	ldr	r3, [r4, #0]
   1fe16:	2b00      	cmp	r3, #0
   1fe18:	d0ef      	beq.n	1fdfa <gpio_fire_callbacks+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fe1a:	2c00      	cmp	r4, #0
   1fe1c:	d1ed      	bne.n	1fdfa <gpio_fire_callbacks+0x36>
   1fe1e:	4623      	mov	r3, r4
   1fe20:	e7eb      	b.n	1fdfa <gpio_fire_callbacks+0x36>
		}
	}
}
   1fe22:	bd70      	pop	{r4, r5, r6, pc}
   1fe24:	00032da4 	.word	0x00032da4
   1fe28:	00032e80 	.word	0x00032e80
   1fe2c:	0002fdac 	.word	0x0002fdac
   1fe30:	00032e10 	.word	0x00032e10

0001fe34 <gpio_nrfx_pin_interrupt_configure>:
{
   1fe34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe36:	b085      	sub	sp, #20
   1fe38:	460e      	mov	r6, r1
   1fe3a:	4619      	mov	r1, r3
	return port->config;
   1fe3c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1fe3e:	7b1b      	ldrb	r3, [r3, #12]
   1fe40:	f006 051f 	and.w	r5, r6, #31
   1fe44:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1fe48:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   1fe4c:	d022      	beq.n	1fe94 <gpio_nrfx_pin_interrupt_configure+0x60>
   1fe4e:	4607      	mov	r7, r0
   1fe50:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fe52:	2300      	movs	r3, #0
   1fe54:	9301      	str	r3, [sp, #4]
   1fe56:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   1fe58:	4610      	mov	r0, r2
   1fe5a:	f00d fbe0 	bl	2d61e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fe5e:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   1fe62:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1fe64:	6899      	ldr	r1, [r3, #8]
   1fe66:	40f1      	lsrs	r1, r6
   1fe68:	f011 0f01 	tst.w	r1, #1
   1fe6c:	d102      	bne.n	1fe74 <gpio_nrfx_pin_interrupt_configure+0x40>
   1fe6e:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   1fe72:	d014      	beq.n	1fe9e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1fe74:	2300      	movs	r3, #0
   1fe76:	aa01      	add	r2, sp, #4
   1fe78:	4619      	mov	r1, r3
   1fe7a:	4628      	mov	r0, r5
   1fe7c:	f003 f80e 	bl	22e9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1fe80:	4b16      	ldr	r3, [pc, #88]	; (1fedc <gpio_nrfx_pin_interrupt_configure+0xa8>)
   1fe82:	4298      	cmp	r0, r3
   1fe84:	d126      	bne.n	1fed4 <gpio_nrfx_pin_interrupt_configure+0xa0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1fe86:	2101      	movs	r1, #1
   1fe88:	4628      	mov	r0, r5
   1fe8a:	f003 f97d 	bl	23188 <nrfx_gpiote_trigger_enable>
	return 0;
   1fe8e:	2000      	movs	r0, #0
}
   1fe90:	b005      	add	sp, #20
   1fe92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1fe94:	4628      	mov	r0, r5
   1fe96:	f003 f9cf 	bl	23238 <nrfx_gpiote_trigger_disable>
		return 0;
   1fe9a:	2000      	movs	r0, #0
   1fe9c:	e7f8      	b.n	1fe90 <gpio_nrfx_pin_interrupt_configure+0x5c>
	    (nrf_gpio_pin_dir_get(abs_pin) == NRF_GPIO_PIN_DIR_INPUT)) {
   1fe9e:	4628      	mov	r0, r5
   1fea0:	f00d fbd9 	bl	2d656 <nrf_gpio_pin_dir_get>
	    (mode == GPIO_INT_MODE_EDGE) &&
   1fea4:	2800      	cmp	r0, #0
   1fea6:	d1e5      	bne.n	1fe74 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fea8:	f10d 010f 	add.w	r1, sp, #15
   1feac:	4628      	mov	r0, r5
   1feae:	f003 f8fd 	bl	230ac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1feb2:	4b0b      	ldr	r3, [pc, #44]	; (1fee0 <gpio_nrfx_pin_interrupt_configure+0xac>)
   1feb4:	4298      	cmp	r0, r3
   1feb6:	d003      	beq.n	1fec0 <gpio_nrfx_pin_interrupt_configure+0x8c>
		trigger_config.p_in_channel = &ch;
   1feb8:	f10d 030f 	add.w	r3, sp, #15
   1febc:	9302      	str	r3, [sp, #8]
   1febe:	e7d9      	b.n	1fe74 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   1fec0:	f10d 000f 	add.w	r0, sp, #15
   1fec4:	f003 f958 	bl	23178 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1fec8:	4b04      	ldr	r3, [pc, #16]	; (1fedc <gpio_nrfx_pin_interrupt_configure+0xa8>)
   1feca:	4298      	cmp	r0, r3
   1fecc:	d0f4      	beq.n	1feb8 <gpio_nrfx_pin_interrupt_configure+0x84>
				return -ENOMEM;
   1fece:	f06f 000b 	mvn.w	r0, #11
   1fed2:	e7dd      	b.n	1fe90 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   1fed4:	f06f 0015 	mvn.w	r0, #21
   1fed8:	e7da      	b.n	1fe90 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1feda:	bf00      	nop
   1fedc:	0bad0000 	.word	0x0bad0000
   1fee0:	0bad0004 	.word	0x0bad0004

0001fee4 <gpio_nrfx_pin_configure>:
{
   1fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fee8:	b086      	sub	sp, #24
   1feea:	460e      	mov	r6, r1
   1feec:	4614      	mov	r4, r2
	return port->config;
   1feee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fef2:	f898 300c 	ldrb.w	r3, [r8, #12]
   1fef6:	f001 051f 	and.w	r5, r1, #31
   1fefa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fefe:	f10d 0117 	add.w	r1, sp, #23
   1ff02:	4628      	mov	r0, r5
   1ff04:	f003 f8d2 	bl	230ac <nrfx_gpiote_channel_get>
   1ff08:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ff0a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   1ff0e:	d11c      	bne.n	1ff4a <gpio_nrfx_pin_configure+0x66>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1ff10:	4628      	mov	r0, r5
   1ff12:	f003 f9b3 	bl	2327c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1ff16:	4b43      	ldr	r3, [pc, #268]	; (20024 <gpio_nrfx_pin_configure+0x140>)
   1ff18:	429f      	cmp	r7, r3
   1ff1a:	d004      	beq.n	1ff26 <gpio_nrfx_pin_configure+0x42>
		return 0;
   1ff1c:	2700      	movs	r7, #0
}
   1ff1e:	4638      	mov	r0, r7
   1ff20:	b006      	add	sp, #24
   1ff22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   1ff26:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1ff2a:	f003 f91d 	bl	23168 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ff2e:	4b3d      	ldr	r3, [pc, #244]	; (20024 <gpio_nrfx_pin_configure+0x140>)
   1ff30:	4298      	cmp	r0, r3
   1ff32:	d0f3      	beq.n	1ff1c <gpio_nrfx_pin_configure+0x38>
   1ff34:	4c3c      	ldr	r4, [pc, #240]	; (20028 <gpio_nrfx_pin_configure+0x144>)
   1ff36:	236a      	movs	r3, #106	; 0x6a
   1ff38:	4622      	mov	r2, r4
   1ff3a:	493c      	ldr	r1, [pc, #240]	; (2002c <gpio_nrfx_pin_configure+0x148>)
   1ff3c:	483c      	ldr	r0, [pc, #240]	; (20030 <gpio_nrfx_pin_configure+0x14c>)
   1ff3e:	f009 fdd4 	bl	29aea <assert_print>
   1ff42:	216a      	movs	r1, #106	; 0x6a
   1ff44:	4620      	mov	r0, r4
   1ff46:	f009 fdc9 	bl	29adc <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ff4a:	2100      	movs	r1, #0
   1ff4c:	9103      	str	r1, [sp, #12]
   1ff4e:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ff50:	460b      	mov	r3, r1
   1ff52:	aa03      	add	r2, sp, #12
   1ff54:	4628      	mov	r0, r5
   1ff56:	f002 ffa1 	bl	22e9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ff5a:	4b32      	ldr	r3, [pc, #200]	; (20024 <gpio_nrfx_pin_configure+0x140>)
   1ff5c:	4298      	cmp	r0, r3
   1ff5e:	d15d      	bne.n	2001c <gpio_nrfx_pin_configure+0x138>
	if (free_ch) {
   1ff60:	429f      	cmp	r7, r3
   1ff62:	d02d      	beq.n	1ffc0 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_OUTPUT) {
   1ff64:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   1ff68:	d045      	beq.n	1fff6 <gpio_nrfx_pin_configure+0x112>
		int rv = get_drive(flags, &drive);
   1ff6a:	f10d 0103 	add.w	r1, sp, #3
   1ff6e:	4620      	mov	r0, r4
   1ff70:	f00d fae2 	bl	2d538 <get_drive>
		if (rv != 0) {
   1ff74:	4607      	mov	r7, r0
   1ff76:	2800      	cmp	r0, #0
   1ff78:	d1d1      	bne.n	1ff1e <gpio_nrfx_pin_configure+0x3a>
		nrfx_gpiote_output_config_t output_config = {
   1ff7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ff7e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1ff82:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   1ff86:	bf0c      	ite	eq
   1ff88:	2301      	moveq	r3, #1
   1ff8a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1ff8c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1ff90:	4620      	mov	r0, r4
   1ff92:	f00d fb14 	bl	2d5be <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1ff96:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1ff9a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   1ff9e:	d021      	beq.n	1ffe4 <gpio_nrfx_pin_configure+0x100>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1ffa0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1ffa4:	2301      	movs	r3, #1
   1ffa6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1ffa8:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1ffaa:	2200      	movs	r2, #0
   1ffac:	a901      	add	r1, sp, #4
   1ffae:	4628      	mov	r0, r5
   1ffb0:	f003 f80a 	bl	22fc8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1ffb4:	4b1b      	ldr	r3, [pc, #108]	; (20024 <gpio_nrfx_pin_configure+0x140>)
   1ffb6:	4298      	cmp	r0, r3
   1ffb8:	d0b1      	beq.n	1ff1e <gpio_nrfx_pin_configure+0x3a>
   1ffba:	f06f 0715 	mvn.w	r7, #21
   1ffbe:	e7ae      	b.n	1ff1e <gpio_nrfx_pin_configure+0x3a>
		err = nrfx_gpiote_channel_free(ch);
   1ffc0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1ffc4:	f003 f8d0 	bl	23168 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ffc8:	4b16      	ldr	r3, [pc, #88]	; (20024 <gpio_nrfx_pin_configure+0x140>)
   1ffca:	4298      	cmp	r0, r3
   1ffcc:	d0ca      	beq.n	1ff64 <gpio_nrfx_pin_configure+0x80>
   1ffce:	4c16      	ldr	r4, [pc, #88]	; (20028 <gpio_nrfx_pin_configure+0x144>)
   1ffd0:	237c      	movs	r3, #124	; 0x7c
   1ffd2:	4622      	mov	r2, r4
   1ffd4:	4915      	ldr	r1, [pc, #84]	; (2002c <gpio_nrfx_pin_configure+0x148>)
   1ffd6:	4816      	ldr	r0, [pc, #88]	; (20030 <gpio_nrfx_pin_configure+0x14c>)
   1ffd8:	f009 fd87 	bl	29aea <assert_print>
   1ffdc:	217c      	movs	r1, #124	; 0x7c
   1ffde:	4620      	mov	r0, r4
   1ffe0:	f009 fd7c 	bl	29adc <assert_post_action>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1ffe4:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   1ffe8:	d0df      	beq.n	1ffaa <gpio_nrfx_pin_configure+0xc6>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1ffea:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1ffee:	2301      	movs	r3, #1
   1fff0:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   1fff2:	60d3      	str	r3, [r2, #12]
}
   1fff4:	e7d9      	b.n	1ffaa <gpio_nrfx_pin_configure+0xc6>
		.pull = get_pull(flags)
   1fff6:	4620      	mov	r0, r4
   1fff8:	f00d fae1 	bl	2d5be <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1fffc:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20000:	2300      	movs	r3, #0
   20002:	461a      	mov	r2, r3
   20004:	a902      	add	r1, sp, #8
   20006:	4628      	mov	r0, r5
   20008:	f002 ff48 	bl	22e9c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2000c:	4b05      	ldr	r3, [pc, #20]	; (20024 <gpio_nrfx_pin_configure+0x140>)
   2000e:	4298      	cmp	r0, r3
   20010:	d101      	bne.n	20016 <gpio_nrfx_pin_configure+0x132>
   20012:	2700      	movs	r7, #0
   20014:	e783      	b.n	1ff1e <gpio_nrfx_pin_configure+0x3a>
   20016:	f06f 0715 	mvn.w	r7, #21
   2001a:	e780      	b.n	1ff1e <gpio_nrfx_pin_configure+0x3a>
		return -EINVAL;
   2001c:	f06f 0715 	mvn.w	r7, #21
   20020:	e77d      	b.n	1ff1e <gpio_nrfx_pin_configure+0x3a>
   20022:	bf00      	nop
   20024:	0bad0000 	.word	0x0bad0000
   20028:	00032e8c 	.word	0x00032e8c
   2002c:	00030360 	.word	0x00030360
   20030:	0002fdac 	.word	0x0002fdac

00020034 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20034:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   20036:	f003 f88d 	bl	23154 <nrfx_gpiote_is_init>
   2003a:	b108      	cbz	r0, 20040 <gpio_nrfx_init+0xc>
		return 0;
   2003c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2003e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   20040:	f003 f85e 	bl	23100 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20044:	4b08      	ldr	r3, [pc, #32]	; (20068 <gpio_nrfx_init+0x34>)
   20046:	4298      	cmp	r0, r3
   20048:	d10a      	bne.n	20060 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2004a:	2100      	movs	r1, #0
   2004c:	4807      	ldr	r0, [pc, #28]	; (2006c <gpio_nrfx_init+0x38>)
   2004e:	f003 f827 	bl	230a0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20052:	2200      	movs	r2, #0
   20054:	2105      	movs	r1, #5
   20056:	202f      	movs	r0, #47	; 0x2f
   20058:	f7f5 f9fa 	bl	15450 <z_arm_irq_priority_set>
	return 0;
   2005c:	2000      	movs	r0, #0
   2005e:	e7ee      	b.n	2003e <gpio_nrfx_init+0xa>
		return -EIO;
   20060:	f06f 0004 	mvn.w	r0, #4
   20064:	e7eb      	b.n	2003e <gpio_nrfx_init+0xa>
   20066:	bf00      	nop
   20068:	0bad0000 	.word	0x0bad0000
   2006c:	0002d675 	.word	0x0002d675

00020070 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   20070:	4802      	ldr	r0, [pc, #8]	; (2007c <pwm_nrfx_get_cycles_per_sec+0xc>)
   20072:	2100      	movs	r1, #0
   20074:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   20078:	2000      	movs	r0, #0
   2007a:	4770      	bx	lr
   2007c:	00f42400 	.word	0x00f42400

00020080 <nrf_pwm_configure>:
NRF_STATIC_INLINE void nrf_pwm_configure(NRF_PWM_Type * p_reg,
                                         nrf_pwm_clk_t  base_clock,
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   20080:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   20084:	d106      	bne.n	20094 <nrf_pwm_configure+0x14>

    p_reg->PRESCALER  = base_clock;
   20086:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   2008a:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   2008e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   20092:	4770      	bx	lr
{
   20094:	b510      	push	{r4, lr}
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   20096:	4c06      	ldr	r4, [pc, #24]	; (200b0 <nrf_pwm_configure+0x30>)
   20098:	f240 23a5 	movw	r3, #677	; 0x2a5
   2009c:	4622      	mov	r2, r4
   2009e:	4905      	ldr	r1, [pc, #20]	; (200b4 <nrf_pwm_configure+0x34>)
   200a0:	4805      	ldr	r0, [pc, #20]	; (200b8 <nrf_pwm_configure+0x38>)
   200a2:	f009 fd22 	bl	29aea <assert_print>
   200a6:	f240 21a5 	movw	r1, #677	; 0x2a5
   200aa:	4620      	mov	r0, r4
   200ac:	f009 fd16 	bl	29adc <assert_post_action>
   200b0:	00032f14 	.word	0x00032f14
   200b4:	00032f48 	.word	0x00032f48
   200b8:	0002fdac 	.word	0x0002fdac

000200bc <nrf_pwm_pin_get>:
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
   200bc:	2903      	cmp	r1, #3
   200be:	d804      	bhi.n	200ca <nrf_pwm_pin_get+0xe>
    return p_reg->PSEL.OUT[channel];
   200c0:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   200c4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
   200c8:	4770      	bx	lr
{
   200ca:	b510      	push	{r4, lr}
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
   200cc:	4c06      	ldr	r4, [pc, #24]	; (200e8 <nrf_pwm_pin_get+0x2c>)
   200ce:	f44f 7327 	mov.w	r3, #668	; 0x29c
   200d2:	4622      	mov	r2, r4
   200d4:	4905      	ldr	r1, [pc, #20]	; (200ec <nrf_pwm_pin_get+0x30>)
   200d6:	4806      	ldr	r0, [pc, #24]	; (200f0 <nrf_pwm_pin_get+0x34>)
   200d8:	f009 fd07 	bl	29aea <assert_print>
   200dc:	f44f 7127 	mov.w	r1, #668	; 0x29c
   200e0:	4620      	mov	r0, r4
   200e2:	f009 fcfb 	bl	29adc <assert_post_action>
   200e6:	bf00      	nop
   200e8:	00032f14 	.word	0x00032f14
   200ec:	00032f6c 	.word	0x00032f6c
   200f0:	0002fdac 	.word	0x0002fdac

000200f4 <nrf_gpio_pin_port_decode>:
{
   200f4:	b538      	push	{r3, r4, r5, lr}
   200f6:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   200f8:	6804      	ldr	r4, [r0, #0]
   200fa:	4620      	mov	r0, r4
   200fc:	f00d fac9 	bl	2d692 <nrf_gpio_pin_present_check>
   20100:	b140      	cbz	r0, 20114 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   20102:	f004 031f 	and.w	r3, r4, #31
   20106:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20108:	0964      	lsrs	r4, r4, #5
   2010a:	d01d      	beq.n	20148 <nrf_gpio_pin_port_decode+0x54>
   2010c:	2c01      	cmp	r4, #1
   2010e:	d10e      	bne.n	2012e <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   20110:	480e      	ldr	r0, [pc, #56]	; (2014c <nrf_gpio_pin_port_decode+0x58>)
}
   20112:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20114:	4c0e      	ldr	r4, [pc, #56]	; (20150 <nrf_gpio_pin_port_decode+0x5c>)
   20116:	f240 2347 	movw	r3, #583	; 0x247
   2011a:	4622      	mov	r2, r4
   2011c:	490d      	ldr	r1, [pc, #52]	; (20154 <nrf_gpio_pin_port_decode+0x60>)
   2011e:	480e      	ldr	r0, [pc, #56]	; (20158 <nrf_gpio_pin_port_decode+0x64>)
   20120:	f009 fce3 	bl	29aea <assert_print>
   20124:	f240 2147 	movw	r1, #583	; 0x247
   20128:	4620      	mov	r0, r4
   2012a:	f009 fcd7 	bl	29adc <assert_post_action>
            NRFX_ASSERT(0);
   2012e:	4c08      	ldr	r4, [pc, #32]	; (20150 <nrf_gpio_pin_port_decode+0x5c>)
   20130:	f44f 7313 	mov.w	r3, #588	; 0x24c
   20134:	4622      	mov	r2, r4
   20136:	4909      	ldr	r1, [pc, #36]	; (2015c <nrf_gpio_pin_port_decode+0x68>)
   20138:	4807      	ldr	r0, [pc, #28]	; (20158 <nrf_gpio_pin_port_decode+0x64>)
   2013a:	f009 fcd6 	bl	29aea <assert_print>
   2013e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   20142:	4620      	mov	r0, r4
   20144:	f009 fcca 	bl	29adc <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20148:	4805      	ldr	r0, [pc, #20]	; (20160 <nrf_gpio_pin_port_decode+0x6c>)
   2014a:	e7e2      	b.n	20112 <nrf_gpio_pin_port_decode+0x1e>
   2014c:	40842800 	.word	0x40842800
   20150:	00032e28 	.word	0x00032e28
   20154:	00032e5c 	.word	0x00032e5c
   20158:	0002fdac 	.word	0x0002fdac
   2015c:	000337ec 	.word	0x000337ec
   20160:	40842500 	.word	0x40842500

00020164 <pwm_period_check_and_set>:
{
   20164:	b5f0      	push	{r4, r5, r6, r7, lr}
   20166:	b089      	sub	sp, #36	; 0x24
   20168:	af00      	add	r7, sp, #0
   2016a:	4614      	mov	r4, r2
	const struct pwm_nrfx_config *config = dev->config;
   2016c:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   2016e:	6902      	ldr	r2, [r0, #16]
	if (period_cycles == data->period_cycles) {
   20170:	6813      	ldr	r3, [r2, #0]
   20172:	42a3      	cmp	r3, r4
   20174:	d07e      	beq.n	20274 <pwm_period_check_and_set+0x110>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   20176:	7b10      	ldrb	r0, [r2, #12]
   20178:	2301      	movs	r3, #1
   2017a:	408b      	lsls	r3, r1
   2017c:	4398      	bics	r0, r3
   2017e:	d11d      	bne.n	201bc <pwm_period_check_and_set+0x58>
	countertop = period_cycles;
   20180:	4623      	mov	r3, r4
	prescaler = 0;
   20182:	2100      	movs	r1, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   20184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20188:	d33d      	bcc.n	20206 <pwm_period_check_and_set+0xa2>
		countertop >>= 1;
   2018a:	085b      	lsrs	r3, r3, #1
		++prescaler;
   2018c:	3101      	adds	r1, #1
   2018e:	b2c9      	uxtb	r1, r1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   20190:	2907      	cmp	r1, #7
   20192:	d9f7      	bls.n	20184 <pwm_period_check_and_set+0x20>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   20194:	466d      	mov	r5, sp
   20196:	b088      	sub	sp, #32
   20198:	466b      	mov	r3, sp
   2019a:	f113 0210 	adds.w	r2, r3, #16
   2019e:	d03b      	beq.n	20218 <pwm_period_check_and_set+0xb4>
   201a0:	210c      	movs	r1, #12
   201a2:	b13a      	cbz	r2, 201b4 <pwm_period_check_and_set+0x50>
   201a4:	4608      	mov	r0, r1
   201a6:	2904      	cmp	r1, #4
   201a8:	dd01      	ble.n	201ae <pwm_period_check_and_set+0x4a>
   201aa:	4e33      	ldr	r6, [pc, #204]	; (20278 <pwm_period_check_and_set+0x114>)
   201ac:	615e      	str	r6, [r3, #20]
   201ae:	2808      	cmp	r0, #8
   201b0:	dd35      	ble.n	2021e <pwm_period_check_and_set+0xba>
   201b2:	619c      	str	r4, [r3, #24]
   201b4:	290b      	cmp	r1, #11
   201b6:	dd5a      	ble.n	2026e <pwm_period_check_and_set+0x10a>
   201b8:	240c      	movs	r4, #12
   201ba:	e032      	b.n	20222 <pwm_period_check_and_set+0xbe>
		LOG_ERR("Incompatible period.");
   201bc:	4b2f      	ldr	r3, [pc, #188]	; (2027c <pwm_period_check_and_set+0x118>)
   201be:	61fb      	str	r3, [r7, #28]
   201c0:	2302      	movs	r3, #2
   201c2:	713b      	strb	r3, [r7, #4]
   201c4:	2400      	movs	r4, #0
   201c6:	717c      	strb	r4, [r7, #5]
   201c8:	71bc      	strb	r4, [r7, #6]
   201ca:	71fc      	strb	r4, [r7, #7]
   201cc:	687b      	ldr	r3, [r7, #4]
   201ce:	61bb      	str	r3, [r7, #24]
   201d0:	4621      	mov	r1, r4
   201d2:	f364 0100 	bfi	r1, r4, #0, #1
   201d6:	f364 0141 	bfi	r1, r4, #1, #1
   201da:	f364 0182 	bfi	r1, r4, #2, #1
   201de:	f364 01c5 	bfi	r1, r4, #3, #3
   201e2:	2301      	movs	r3, #1
   201e4:	f363 1188 	bfi	r1, r3, #6, #3
   201e8:	2308      	movs	r3, #8
   201ea:	f363 2152 	bfi	r1, r3, #9, #10
   201ee:	f364 41de 	bfi	r1, r4, #19, #12
   201f2:	f364 71df 	bfi	r1, r4, #31, #1
   201f6:	4623      	mov	r3, r4
   201f8:	f107 0218 	add.w	r2, r7, #24
   201fc:	4820      	ldr	r0, [pc, #128]	; (20280 <pwm_period_check_and_set+0x11c>)
   201fe:	f7f3 fd7d 	bl	13cfc <z_impl_z_log_msg_static_create>
		return false;
   20202:	4620      	mov	r0, r4
   20204:	e030      	b.n	20268 <pwm_period_check_and_set+0x104>
			data->period_cycles = period_cycles;
   20206:	6014      	str	r4, [r2, #0]
			data->prescaler     = prescaler;
   20208:	7351      	strb	r1, [r2, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   2020a:	b29b      	uxth	r3, r3
   2020c:	7baa      	ldrb	r2, [r5, #14]
   2020e:	6828      	ldr	r0, [r5, #0]
   20210:	f7ff ff36 	bl	20080 <nrf_pwm_configure>
			return true;
   20214:	2001      	movs	r0, #1
   20216:	e027      	b.n	20268 <pwm_period_check_and_set+0x104>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   20218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2021c:	e7c1      	b.n	201a2 <pwm_period_check_and_set+0x3e>
   2021e:	f06f 041b 	mvn.w	r4, #27
   20222:	b13a      	cbz	r2, 20234 <pwm_period_check_and_set+0xd0>
   20224:	2103      	movs	r1, #3
   20226:	7139      	strb	r1, [r7, #4]
   20228:	2100      	movs	r1, #0
   2022a:	7179      	strb	r1, [r7, #5]
   2022c:	71b9      	strb	r1, [r7, #6]
   2022e:	71f9      	strb	r1, [r7, #7]
   20230:	6878      	ldr	r0, [r7, #4]
   20232:	6118      	str	r0, [r3, #16]
   20234:	2100      	movs	r1, #0
   20236:	f36f 0100 	bfc	r1, #0, #1
   2023a:	f36f 0141 	bfc	r1, #1, #1
   2023e:	f36f 0182 	bfc	r1, #2, #1
   20242:	f36f 01c5 	bfc	r1, #3, #3
   20246:	2301      	movs	r3, #1
   20248:	f363 1188 	bfi	r1, r3, #6, #3
   2024c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   20250:	f363 2152 	bfi	r1, r3, #9, #10
   20254:	f36f 41de 	bfc	r1, #19, #12
   20258:	f36f 71df 	bfc	r1, #31, #1
   2025c:	2300      	movs	r3, #0
   2025e:	4808      	ldr	r0, [pc, #32]	; (20280 <pwm_period_check_and_set+0x11c>)
   20260:	f7f3 fd4c 	bl	13cfc <z_impl_z_log_msg_static_create>
   20264:	46ad      	mov	sp, r5
	return false;
   20266:	2000      	movs	r0, #0
}
   20268:	3724      	adds	r7, #36	; 0x24
   2026a:	46bd      	mov	sp, r7
   2026c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   2026e:	f06f 041b 	mvn.w	r4, #27
   20272:	e7d6      	b.n	20222 <pwm_period_check_and_set+0xbe>
		return true;
   20274:	2001      	movs	r0, #1
   20276:	e7f7      	b.n	20268 <pwm_period_check_and_set+0x104>
   20278:	00032f90 	.word	0x00032f90
   2027c:	00032f78 	.word	0x00032f78
   20280:	0002f8b8 	.word	0x0002f8b8

00020284 <pwm_nrfx_set_cycles>:
{
   20284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20288:	b083      	sub	sp, #12
   2028a:	af00      	add	r7, sp, #0
   2028c:	460d      	mov	r5, r1
	const struct pwm_nrfx_config *config = dev->config;
   2028e:	6844      	ldr	r4, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   20290:	6906      	ldr	r6, [r0, #16]
	bool inverted = (flags & PWM_POLARITY_INVERTED);
   20292:	f8b7 9028 	ldrh.w	r9, [r7, #40]	; 0x28
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   20296:	2903      	cmp	r1, #3
   20298:	d80e      	bhi.n	202b8 <pwm_nrfx_set_cycles+0x34>
   2029a:	4698      	mov	r8, r3
   2029c:	f009 0901 	and.w	r9, r9, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   202a0:	7ba3      	ldrb	r3, [r4, #14]
   202a2:	2b01      	cmp	r3, #1
   202a4:	d046      	beq.n	20334 <pwm_nrfx_set_cycles+0xb0>
	if (pulse_cycles == 0) {
   202a6:	f1b8 0f00 	cmp.w	r8, #0
   202aa:	d052      	beq.n	20352 <pwm_nrfx_set_cycles+0xce>
	} else if (pulse_cycles >= period_cycles) {
   202ac:	4542      	cmp	r2, r8
   202ae:	d845      	bhi.n	2033c <pwm_nrfx_set_cycles+0xb8>
	bool needs_pwm = false;
   202b0:	2100      	movs	r1, #0
		compare_value = PWM_NRFX_CH_COMPARE_MASK;
   202b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
   202b6:	e04e      	b.n	20356 <pwm_nrfx_set_cycles+0xd2>
		LOG_ERR("Invalid channel: %u.", channel);
   202b8:	466e      	mov	r6, sp
   202ba:	b088      	sub	sp, #32
   202bc:	466b      	mov	r3, sp
   202be:	f113 0210 	adds.w	r2, r3, #16
   202c2:	d031      	beq.n	20328 <pwm_nrfx_set_cycles+0xa4>
   202c4:	210c      	movs	r1, #12
   202c6:	b13a      	cbz	r2, 202d8 <pwm_nrfx_set_cycles+0x54>
   202c8:	4608      	mov	r0, r1
   202ca:	2904      	cmp	r1, #4
   202cc:	dd01      	ble.n	202d2 <pwm_nrfx_set_cycles+0x4e>
   202ce:	4c48      	ldr	r4, [pc, #288]	; (203f0 <pwm_nrfx_set_cycles+0x16c>)
   202d0:	615c      	str	r4, [r3, #20]
   202d2:	2808      	cmp	r0, #8
   202d4:	dd00      	ble.n	202d8 <pwm_nrfx_set_cycles+0x54>
   202d6:	619d      	str	r5, [r3, #24]
   202d8:	290b      	cmp	r1, #11
   202da:	dd28      	ble.n	2032e <pwm_nrfx_set_cycles+0xaa>
   202dc:	240c      	movs	r4, #12
   202de:	b13a      	cbz	r2, 202f0 <pwm_nrfx_set_cycles+0x6c>
   202e0:	2103      	movs	r1, #3
   202e2:	7139      	strb	r1, [r7, #4]
   202e4:	2100      	movs	r1, #0
   202e6:	7179      	strb	r1, [r7, #5]
   202e8:	71b9      	strb	r1, [r7, #6]
   202ea:	71f9      	strb	r1, [r7, #7]
   202ec:	6878      	ldr	r0, [r7, #4]
   202ee:	6118      	str	r0, [r3, #16]
   202f0:	2100      	movs	r1, #0
   202f2:	f36f 0100 	bfc	r1, #0, #1
   202f6:	f36f 0141 	bfc	r1, #1, #1
   202fa:	f36f 0182 	bfc	r1, #2, #1
   202fe:	f36f 01c5 	bfc	r1, #3, #3
   20302:	2301      	movs	r3, #1
   20304:	f363 1188 	bfi	r1, r3, #6, #3
   20308:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   2030c:	f363 2152 	bfi	r1, r3, #9, #10
   20310:	f36f 41de 	bfc	r1, #19, #12
   20314:	f36f 71df 	bfc	r1, #31, #1
   20318:	2300      	movs	r3, #0
   2031a:	4836      	ldr	r0, [pc, #216]	; (203f4 <pwm_nrfx_set_cycles+0x170>)
   2031c:	f7f3 fcee 	bl	13cfc <z_impl_z_log_msg_static_create>
   20320:	46b5      	mov	sp, r6
		return -EINVAL;
   20322:	f06f 0015 	mvn.w	r0, #21
   20326:	e037      	b.n	20398 <pwm_nrfx_set_cycles+0x114>
		LOG_ERR("Invalid channel: %u.", channel);
   20328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2032c:	e7cb      	b.n	202c6 <pwm_nrfx_set_cycles+0x42>
   2032e:	f06f 041b 	mvn.w	r4, #27
   20332:	e7d4      	b.n	202de <pwm_nrfx_set_cycles+0x5a>
		period_cycles /= 2;
   20334:	0852      	lsrs	r2, r2, #1
		pulse_cycles /= 2;
   20336:	ea4f 0858 	mov.w	r8, r8, lsr #1
   2033a:	e7b4      	b.n	202a6 <pwm_nrfx_set_cycles+0x22>
		if (!pwm_period_check_and_set(dev, channel, period_cycles)) {
   2033c:	4629      	mov	r1, r5
   2033e:	f7ff ff11 	bl	20164 <pwm_period_check_and_set>
   20342:	4601      	mov	r1, r0
   20344:	2800      	cmp	r0, #0
   20346:	d050      	beq.n	203ea <pwm_nrfx_set_cycles+0x166>
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   20348:	7b72      	ldrb	r2, [r6, #13]
   2034a:	fa28 f202 	lsr.w	r2, r8, r2
   2034e:	b292      	uxth	r2, r2
		needs_pwm = true;
   20350:	e001      	b.n	20356 <pwm_nrfx_set_cycles+0xd2>
	bool needs_pwm = false;
   20352:	2100      	movs	r1, #0
		compare_value = 0;
   20354:	460a      	mov	r2, r1
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   20356:	f1b9 0f00 	cmp.w	r9, #0
   2035a:	d021      	beq.n	203a0 <pwm_nrfx_set_cycles+0x11c>
   2035c:	2300      	movs	r3, #0
   2035e:	4313      	orrs	r3, r2
   20360:	eb06 0245 	add.w	r2, r6, r5, lsl #1
   20364:	8093      	strh	r3, [r2, #4]
	if (!needs_pwm) {
   20366:	b1f1      	cbz	r1, 203a6 <pwm_nrfx_set_cycles+0x122>
		data->pwm_needed |= BIT(channel);
   20368:	7b33      	ldrb	r3, [r6, #12]
   2036a:	2201      	movs	r2, #1
   2036c:	40aa      	lsls	r2, r5
   2036e:	4313      	orrs	r3, r2
   20370:	7333      	strb	r3, [r6, #12]
	if (data->pwm_needed == 0) {
   20372:	7b33      	ldrb	r3, [r6, #12]
   20374:	b38b      	cbz	r3, 203da <pwm_nrfx_set_cycles+0x156>
		if (data->stop_requested) {
   20376:	7bf3      	ldrb	r3, [r6, #15]
   20378:	b133      	cbz	r3, 20388 <pwm_nrfx_set_cycles+0x104>
			data->stop_requested = false;
   2037a:	2300      	movs	r3, #0
   2037c:	73f3      	strb	r3, [r6, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   2037e:	4620      	mov	r0, r4
   20380:	f003 fad4 	bl	2392c <nrfx_pwm_is_stopped>
   20384:	2800      	cmp	r0, #0
   20386:	d0fa      	beq.n	2037e <pwm_nrfx_set_cycles+0xfa>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   20388:	2300      	movs	r3, #0
   2038a:	2201      	movs	r2, #1
   2038c:	f104 0118 	add.w	r1, r4, #24
   20390:	4620      	mov	r0, r4
   20392:	f003 fa55 	bl	23840 <nrfx_pwm_simple_playback>
	return 0;
   20396:	2000      	movs	r0, #0
}
   20398:	370c      	adds	r7, #12
   2039a:	46bd      	mov	sp, r7
   2039c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   203a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   203a4:	e7db      	b.n	2035e <pwm_nrfx_set_cycles+0xda>
		if (channel_psel_get(channel, &psel, config)) {
   203a6:	4622      	mov	r2, r4
   203a8:	1d39      	adds	r1, r7, #4
   203aa:	4628      	mov	r0, r5
   203ac:	f00d f983 	bl	2d6b6 <channel_psel_get>
   203b0:	b160      	cbz	r0, 203cc <pwm_nrfx_set_cycles+0x148>
			uint32_t out_level = (pulse_cycles == 0) ? 0 : 1;
   203b2:	f1b8 0100 	subs.w	r1, r8, #0
   203b6:	bf18      	it	ne
   203b8:	2101      	movne	r1, #1
			if (inverted) {
   203ba:	f1b9 0f00 	cmp.w	r9, #0
   203be:	d002      	beq.n	203c6 <pwm_nrfx_set_cycles+0x142>
				out_level ^= 1;
   203c0:	fab8 f188 	clz	r1, r8
   203c4:	0949      	lsrs	r1, r1, #5
			nrf_gpio_pin_write(psel, out_level);
   203c6:	6878      	ldr	r0, [r7, #4]
   203c8:	f00d f999 	bl	2d6fe <nrf_gpio_pin_write>
		data->pwm_needed &= ~BIT(channel);
   203cc:	7b33      	ldrb	r3, [r6, #12]
   203ce:	2201      	movs	r2, #1
   203d0:	40aa      	lsls	r2, r5
   203d2:	ea23 0302 	bic.w	r3, r3, r2
   203d6:	7333      	strb	r3, [r6, #12]
   203d8:	e7cb      	b.n	20372 <pwm_nrfx_set_cycles+0xee>
		nrfx_pwm_stop(&config->pwm, false);
   203da:	2100      	movs	r1, #0
   203dc:	4620      	mov	r0, r4
   203de:	f003 fadd 	bl	2399c <nrfx_pwm_stop>
		data->stop_requested = true;
   203e2:	2301      	movs	r3, #1
   203e4:	73f3      	strb	r3, [r6, #15]
	return 0;
   203e6:	2000      	movs	r0, #0
   203e8:	e7d6      	b.n	20398 <pwm_nrfx_set_cycles+0x114>
			return -EINVAL;
   203ea:	f06f 0015 	mvn.w	r0, #21
   203ee:	e7d3      	b.n	20398 <pwm_nrfx_set_cycles+0x114>
   203f0:	00032fbc 	.word	0x00032fbc
   203f4:	0002f8b8 	.word	0x0002f8b8

000203f8 <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   203f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203fc:	b082      	sub	sp, #8
   203fe:	af00      	add	r7, sp, #0
   20400:	4680      	mov	r8, r0
	const struct pwm_nrfx_config *config = dev->config;
   20402:	6846      	ldr	r6, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   20404:	6905      	ldr	r5, [r0, #16]

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   20406:	2100      	movs	r1, #0
   20408:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2040a:	f00d f98e 	bl	2d72a <pinctrl_apply_state>

	if (ret < 0) {
   2040e:	2800      	cmp	r0, #0
   20410:	db34      	blt.n	2047c <pwm_nrfx_init+0x84>
		return ret;
	}

	data->initially_inverted = 0;
   20412:	2400      	movs	r4, #0
   20414:	73ac      	strb	r4, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   20416:	e003      	b.n	20420 <pwm_nrfx_init+0x28>
		if (channel_psel_get(i, &psel, config)) {
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
   20418:	7bab      	ldrb	r3, [r5, #14]
   2041a:	4313      	orrs	r3, r2
   2041c:	73ab      	strb	r3, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   2041e:	3401      	adds	r4, #1
   20420:	2c03      	cmp	r4, #3
   20422:	d80f      	bhi.n	20444 <pwm_nrfx_init+0x4c>
		if (channel_psel_get(i, &psel, config)) {
   20424:	4632      	mov	r2, r6
   20426:	1d39      	adds	r1, r7, #4
   20428:	4620      	mov	r0, r4
   2042a:	f00d f944 	bl	2d6b6 <channel_psel_get>
   2042e:	2800      	cmp	r0, #0
   20430:	d0f5      	beq.n	2041e <pwm_nrfx_init+0x26>
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   20432:	6878      	ldr	r0, [r7, #4]
   20434:	f00d f96b 	bl	2d70e <nrf_gpio_pin_out_read>
   20438:	4602      	mov	r2, r0
   2043a:	2800      	cmp	r0, #0
   2043c:	d0ec      	beq.n	20418 <pwm_nrfx_init+0x20>
   2043e:	2201      	movs	r2, #1
   20440:	40a2      	lsls	r2, r4
   20442:	e7e9      	b.n	20418 <pwm_nrfx_init+0x20>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   20444:	2300      	movs	r3, #0
   20446:	e005      	b.n	20454 <pwm_nrfx_init+0x5c>
		bool inverted = data->initially_inverted & BIT(i);

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   20448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2044c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
   20450:	8091      	strh	r1, [r2, #4]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   20452:	3301      	adds	r3, #1
   20454:	2b03      	cmp	r3, #3
   20456:	d806      	bhi.n	20466 <pwm_nrfx_init+0x6e>
		bool inverted = data->initially_inverted & BIT(i);
   20458:	7ba9      	ldrb	r1, [r5, #14]
   2045a:	2201      	movs	r2, #1
   2045c:	409a      	lsls	r2, r3
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   2045e:	4211      	tst	r1, r2
   20460:	d0f2      	beq.n	20448 <pwm_nrfx_init+0x50>
   20462:	2100      	movs	r1, #0
   20464:	e7f2      	b.n	2044c <pwm_nrfx_init+0x54>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   20466:	2300      	movs	r3, #0
   20468:	461a      	mov	r2, r3
   2046a:	f106 0108 	add.w	r1, r6, #8
   2046e:	4630      	mov	r0, r6
   20470:	f003 f974 	bl	2375c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   20474:	4b2f      	ldr	r3, [pc, #188]	; (20534 <pwm_nrfx_init+0x13c>)
   20476:	4298      	cmp	r0, r3
   20478:	d104      	bne.n	20484 <pwm_nrfx_init+0x8c>
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
   2047a:	2000      	movs	r0, #0
}
   2047c:	3708      	adds	r7, #8
   2047e:	46bd      	mov	sp, r7
   20480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
   20484:	f8d8 1000 	ldr.w	r1, [r8]
   20488:	466d      	mov	r5, sp
   2048a:	2300      	movs	r3, #0
   2048c:	713b      	strb	r3, [r7, #4]
   2048e:	2302      	movs	r3, #2
   20490:	717b      	strb	r3, [r7, #5]
   20492:	b088      	sub	sp, #32
   20494:	466c      	mov	r4, sp
   20496:	f114 0210 	adds.w	r2, r4, #16
   2049a:	d011      	beq.n	204c0 <pwm_nrfx_init+0xc8>
   2049c:	200e      	movs	r0, #14
   2049e:	b11a      	cbz	r2, 204a8 <pwm_nrfx_init+0xb0>
   204a0:	2804      	cmp	r0, #4
   204a2:	dd01      	ble.n	204a8 <pwm_nrfx_init+0xb0>
   204a4:	4b24      	ldr	r3, [pc, #144]	; (20538 <pwm_nrfx_init+0x140>)
   204a6:	6163      	str	r3, [r4, #20]
   204a8:	2300      	movs	r3, #0
   204aa:	703b      	strb	r3, [r7, #0]
   204ac:	2302      	movs	r3, #2
   204ae:	707b      	strb	r3, [r7, #1]
   204b0:	b19a      	cbz	r2, 204da <pwm_nrfx_init+0xe2>
   204b2:	2808      	cmp	r0, #8
   204b4:	dd00      	ble.n	204b8 <pwm_nrfx_init+0xc0>
   204b6:	61a1      	str	r1, [r4, #24]
   204b8:	f104 031c 	add.w	r3, r4, #28
   204bc:	2100      	movs	r1, #0
   204be:	e00a      	b.n	204d6 <pwm_nrfx_init+0xde>
   204c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   204c4:	e7eb      	b.n	2049e <pwm_nrfx_init+0xa6>
   204c6:	f101 0608 	add.w	r6, r1, #8
   204ca:	443e      	add	r6, r7
   204cc:	f816 6c08 	ldrb.w	r6, [r6, #-8]
   204d0:	f803 6b01 	strb.w	r6, [r3], #1
   204d4:	3101      	adds	r1, #1
   204d6:	2901      	cmp	r1, #1
   204d8:	d9f5      	bls.n	204c6 <pwm_nrfx_init+0xce>
   204da:	280d      	cmp	r0, #13
   204dc:	dd26      	ble.n	2052c <pwm_nrfx_init+0x134>
   204de:	230e      	movs	r3, #14
   204e0:	b142      	cbz	r2, 204f4 <pwm_nrfx_init+0xfc>
   204e2:	2103      	movs	r1, #3
   204e4:	7139      	strb	r1, [r7, #4]
   204e6:	2100      	movs	r1, #0
   204e8:	7179      	strb	r1, [r7, #5]
   204ea:	71b9      	strb	r1, [r7, #6]
   204ec:	2101      	movs	r1, #1
   204ee:	71f9      	strb	r1, [r7, #7]
   204f0:	6878      	ldr	r0, [r7, #4]
   204f2:	6120      	str	r0, [r4, #16]
   204f4:	2100      	movs	r1, #0
   204f6:	f36f 0100 	bfc	r1, #0, #1
   204fa:	f36f 0141 	bfc	r1, #1, #1
   204fe:	f36f 0182 	bfc	r1, #2, #1
   20502:	f36f 01c5 	bfc	r1, #3, #3
   20506:	2001      	movs	r0, #1
   20508:	f360 1188 	bfi	r1, r0, #6, #3
   2050c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20510:	f363 2152 	bfi	r1, r3, #9, #10
   20514:	f36f 41de 	bfc	r1, #19, #12
   20518:	f36f 71df 	bfc	r1, #31, #1
   2051c:	2300      	movs	r3, #0
   2051e:	4807      	ldr	r0, [pc, #28]	; (2053c <pwm_nrfx_init+0x144>)
   20520:	f7f3 fbec 	bl	13cfc <z_impl_z_log_msg_static_create>
   20524:	46ad      	mov	sp, r5
		return -EBUSY;
   20526:	f06f 000f 	mvn.w	r0, #15
   2052a:	e7a7      	b.n	2047c <pwm_nrfx_init+0x84>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2052c:	f06f 031b 	mvn.w	r3, #27
   20530:	e7d6      	b.n	204e0 <pwm_nrfx_init+0xe8>
   20532:	bf00      	nop
   20534:	0bad0000 	.word	0x0bad0000
   20538:	00032fd4 	.word	0x00032fd4
   2053c:	0002f8b8 	.word	0x0002f8b8

00020540 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   20540:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   20542:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   20544:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   20548:	d06f      	beq.n	2062a <baudrate_set+0xea>
   2054a:	d83a      	bhi.n	205c2 <baudrate_set+0x82>
   2054c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   20550:	d06e      	beq.n	20630 <baudrate_set+0xf0>
   20552:	d90a      	bls.n	2056a <baudrate_set+0x2a>
   20554:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   20558:	d075      	beq.n	20646 <baudrate_set+0x106>
   2055a:	d924      	bls.n	205a6 <baudrate_set+0x66>
   2055c:	f647 2312 	movw	r3, #31250	; 0x7a12
   20560:	4299      	cmp	r1, r3
   20562:	d12b      	bne.n	205bc <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20564:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20568:	e013      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   2056a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   2056e:	d061      	beq.n	20634 <baudrate_set+0xf4>
   20570:	d907      	bls.n	20582 <baudrate_set+0x42>
   20572:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   20576:	d063      	beq.n	20640 <baudrate_set+0x100>
   20578:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   2057c:	d110      	bne.n	205a0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2057e:	4b3c      	ldr	r3, [pc, #240]	; (20670 <baudrate_set+0x130>)
   20580:	e007      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   20582:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   20586:	d058      	beq.n	2063a <baudrate_set+0xfa>
   20588:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   2058c:	d105      	bne.n	2059a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   2058e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20592:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   20596:	2000      	movs	r0, #0
   20598:	4770      	bx	lr
	switch (baudrate) {
   2059a:	f06f 0015 	mvn.w	r0, #21
   2059e:	4770      	bx	lr
   205a0:	f06f 0015 	mvn.w	r0, #21
   205a4:	4770      	bx	lr
   205a6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   205aa:	d04e      	beq.n	2064a <baudrate_set+0x10a>
   205ac:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   205b0:	d101      	bne.n	205b6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   205b2:	4b30      	ldr	r3, [pc, #192]	; (20674 <baudrate_set+0x134>)
   205b4:	e7ed      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   205b6:	f06f 0015 	mvn.w	r0, #21
   205ba:	4770      	bx	lr
   205bc:	f06f 0015 	mvn.w	r0, #21
   205c0:	4770      	bx	lr
   205c2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   205c6:	d042      	beq.n	2064e <baudrate_set+0x10e>
   205c8:	d909      	bls.n	205de <baudrate_set+0x9e>
   205ca:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   205ce:	d046      	beq.n	2065e <baudrate_set+0x11e>
   205d0:	d91f      	bls.n	20612 <baudrate_set+0xd2>
   205d2:	4b29      	ldr	r3, [pc, #164]	; (20678 <baudrate_set+0x138>)
   205d4:	4299      	cmp	r1, r3
   205d6:	d148      	bne.n	2066a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   205d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   205dc:	e7d9      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   205de:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   205e2:	d037      	beq.n	20654 <baudrate_set+0x114>
   205e4:	d905      	bls.n	205f2 <baudrate_set+0xb2>
   205e6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   205ea:	d10f      	bne.n	2060c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   205ec:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   205f0:	e7cf      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   205f2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   205f6:	4299      	cmp	r1, r3
   205f8:	d02e      	beq.n	20658 <baudrate_set+0x118>
   205fa:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   205fe:	d102      	bne.n	20606 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20600:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20604:	e7c5      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   20606:	f06f 0015 	mvn.w	r0, #21
   2060a:	4770      	bx	lr
   2060c:	f06f 0015 	mvn.w	r0, #21
   20610:	4770      	bx	lr
   20612:	4b1a      	ldr	r3, [pc, #104]	; (2067c <baudrate_set+0x13c>)
   20614:	4299      	cmp	r1, r3
   20616:	d025      	beq.n	20664 <baudrate_set+0x124>
   20618:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   2061c:	d102      	bne.n	20624 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2061e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20622:	e7b6      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   20624:	f06f 0015 	mvn.w	r0, #21
   20628:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2062a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2062e:	e7b0      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20630:	4b13      	ldr	r3, [pc, #76]	; (20680 <baudrate_set+0x140>)
   20632:	e7ae      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   20634:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20638:	e7ab      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   2063a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2063e:	e7a8      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20640:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20644:	e7a5      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20646:	4b0f      	ldr	r3, [pc, #60]	; (20684 <baudrate_set+0x144>)
   20648:	e7a3      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2064a:	4b0f      	ldr	r3, [pc, #60]	; (20688 <baudrate_set+0x148>)
   2064c:	e7a1      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2064e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20652:	e79e      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20654:	4b0d      	ldr	r3, [pc, #52]	; (2068c <baudrate_set+0x14c>)
   20656:	e79c      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20658:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2065c:	e799      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2065e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20662:	e796      	b.n	20592 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20664:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20668:	e793      	b.n	20592 <baudrate_set+0x52>
	switch (baudrate) {
   2066a:	f06f 0015 	mvn.w	r0, #21
}
   2066e:	4770      	bx	lr
   20670:	0013b000 	.word	0x0013b000
   20674:	004ea000 	.word	0x004ea000
   20678:	000f4240 	.word	0x000f4240
   2067c:	0003d090 	.word	0x0003d090
   20680:	00275000 	.word	0x00275000
   20684:	0075c000 	.word	0x0075c000
   20688:	003af000 	.word	0x003af000
   2068c:	013a9000 	.word	0x013a9000

00020690 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   20690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20692:	4605      	mov	r5, r0
   20694:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   20696:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20698:	f00e fb9f 	bl	2edda <k_is_in_isr>
   2069c:	b910      	cbnz	r0, 206a4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2069e:	4b12      	ldr	r3, [pc, #72]	; (206e8 <uarte_nrfx_poll_out+0x58>)
   206a0:	781b      	ldrb	r3, [r3, #0]
   206a2:	b983      	cbnz	r3, 206c6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   206a4:	f04f 0320 	mov.w	r3, #32
   206a8:	f3ef 8411 	mrs	r4, BASEPRI
   206ac:	f383 8812 	msr	BASEPRI_MAX, r3
   206b0:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   206b4:	4628      	mov	r0, r5
   206b6:	f00d f8fc 	bl	2d8b2 <is_tx_ready>
   206ba:	b940      	cbnz	r0, 206ce <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   206bc:	f384 8811 	msr	BASEPRI, r4
   206c0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   206c4:	e7ee      	b.n	206a4 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   206c6:	4628      	mov	r0, r5
   206c8:	f00d f958 	bl	2d97c <wait_tx_ready>
   206cc:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   206ce:	693b      	ldr	r3, [r7, #16]
   206d0:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   206d2:	2201      	movs	r2, #1
   206d4:	6939      	ldr	r1, [r7, #16]
   206d6:	4628      	mov	r0, r5
   206d8:	f00d f905 	bl	2d8e6 <tx_start>
	__asm__ volatile(
   206dc:	f384 8811 	msr	BASEPRI, r4
   206e0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   206e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   206e6:	bf00      	nop
   206e8:	20009d55 	.word	0x20009d55

000206ec <nrfx_gppi_event_endpoint_setup>:
    NRFX_ASSERT(eep);
   206ec:	b121      	cbz	r1, 206f8 <nrfx_gppi_event_endpoint_setup+0xc>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   206ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   206f2:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   206f6:	4770      	bx	lr
{
   206f8:	b510      	push	{r4, lr}
    NRFX_ASSERT(eep);
   206fa:	4c06      	ldr	r4, [pc, #24]	; (20714 <nrfx_gppi_event_endpoint_setup+0x28>)
   206fc:	f44f 7312 	mov.w	r3, #584	; 0x248
   20700:	4622      	mov	r2, r4
   20702:	4905      	ldr	r1, [pc, #20]	; (20718 <nrfx_gppi_event_endpoint_setup+0x2c>)
   20704:	4805      	ldr	r0, [pc, #20]	; (2071c <nrfx_gppi_event_endpoint_setup+0x30>)
   20706:	f009 f9f0 	bl	29aea <assert_print>
   2070a:	f44f 7112 	mov.w	r1, #584	; 0x248
   2070e:	4620      	mov	r0, r4
   20710:	f009 f9e4 	bl	29adc <assert_post_action>
   20714:	000302e8 	.word	0x000302e8
   20718:	00030320 	.word	0x00030320
   2071c:	0002fdac 	.word	0x0002fdac

00020720 <nrfx_gppi_task_endpoint_setup>:
    NRFX_ASSERT(tep);
   20720:	b121      	cbz	r1, 2072c <nrfx_gppi_task_endpoint_setup+0xc>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   20722:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   20726:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   2072a:	4770      	bx	lr
{
   2072c:	b510      	push	{r4, lr}
    NRFX_ASSERT(tep);
   2072e:	4c06      	ldr	r4, [pc, #24]	; (20748 <nrfx_gppi_task_endpoint_setup+0x28>)
   20730:	f240 234e 	movw	r3, #590	; 0x24e
   20734:	4622      	mov	r2, r4
   20736:	4905      	ldr	r1, [pc, #20]	; (2074c <nrfx_gppi_task_endpoint_setup+0x2c>)
   20738:	4805      	ldr	r0, [pc, #20]	; (20750 <nrfx_gppi_task_endpoint_setup+0x30>)
   2073a:	f009 f9d6 	bl	29aea <assert_print>
   2073e:	f240 214e 	movw	r1, #590	; 0x24e
   20742:	4620      	mov	r0, r4
   20744:	f009 f9ca 	bl	29adc <assert_post_action>
   20748:	000302e8 	.word	0x000302e8
   2074c:	00030324 	.word	0x00030324
   20750:	0002fdac 	.word	0x0002fdac

00020754 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   20754:	b5f0      	push	{r4, r5, r6, r7, lr}
   20756:	b089      	sub	sp, #36	; 0x24
   20758:	4605      	mov	r5, r0
   2075a:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2075c:	f101 0018 	add.w	r0, r1, #24
   20760:	f002 f978 	bl	22a54 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   20764:	4b1f      	ldr	r3, [pc, #124]	; (207e4 <endtx_stoptx_ppi_init+0x90>)
   20766:	4298      	cmp	r0, r3
   20768:	d114      	bne.n	20794 <endtx_stoptx_ppi_init+0x40>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   2076a:	7e26      	ldrb	r6, [r4, #24]
    return (uint32_t)p_reg + (uint32_t)task;
   2076c:	f105 070c 	add.w	r7, r5, #12
    nrfx_gppi_event_endpoint_setup(channel, eep);
   20770:	f505 7190 	add.w	r1, r5, #288	; 0x120
   20774:	4630      	mov	r0, r6
   20776:	f7ff ffb9 	bl	206ec <nrfx_gppi_event_endpoint_setup>
    nrfx_gppi_task_endpoint_setup(channel, tep);
   2077a:	4639      	mov	r1, r7
   2077c:	4630      	mov	r0, r6
   2077e:	f7ff ffcf 	bl	20720 <nrfx_gppi_task_endpoint_setup>
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   20782:	7e22      	ldrb	r2, [r4, #24]
   20784:	2301      	movs	r3, #1
   20786:	4093      	lsls	r3, r2
   20788:	4a17      	ldr	r2, [pc, #92]	; (207e8 <endtx_stoptx_ppi_init+0x94>)
   2078a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   2078e:	2000      	movs	r0, #0
}
   20790:	b009      	add	sp, #36	; 0x24
   20792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   20794:	4b15      	ldr	r3, [pc, #84]	; (207ec <endtx_stoptx_ppi_init+0x98>)
   20796:	9307      	str	r3, [sp, #28]
   20798:	2302      	movs	r3, #2
   2079a:	f88d 3004 	strb.w	r3, [sp, #4]
   2079e:	2300      	movs	r3, #0
   207a0:	f88d 3005 	strb.w	r3, [sp, #5]
   207a4:	f88d 3006 	strb.w	r3, [sp, #6]
   207a8:	f88d 3007 	strb.w	r3, [sp, #7]
   207ac:	9a01      	ldr	r2, [sp, #4]
   207ae:	9206      	str	r2, [sp, #24]
   207b0:	4619      	mov	r1, r3
   207b2:	f363 0100 	bfi	r1, r3, #0, #1
   207b6:	f363 0141 	bfi	r1, r3, #1, #1
   207ba:	f363 0182 	bfi	r1, r3, #2, #1
   207be:	f363 01c5 	bfi	r1, r3, #3, #3
   207c2:	2201      	movs	r2, #1
   207c4:	f362 1188 	bfi	r1, r2, #6, #3
   207c8:	2208      	movs	r2, #8
   207ca:	f362 2152 	bfi	r1, r2, #9, #10
   207ce:	f363 41de 	bfi	r1, r3, #19, #12
   207d2:	f363 71df 	bfi	r1, r3, #31, #1
   207d6:	aa06      	add	r2, sp, #24
   207d8:	4805      	ldr	r0, [pc, #20]	; (207f0 <endtx_stoptx_ppi_init+0x9c>)
   207da:	f7f3 fa8f 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EIO;
   207de:	f06f 0004 	mvn.w	r0, #4
   207e2:	e7d5      	b.n	20790 <endtx_stoptx_ppi_init+0x3c>
   207e4:	0bad0000 	.word	0x0bad0000
   207e8:	40017000 	.word	0x40017000
   207ec:	0003305c 	.word	0x0003305c
   207f0:	0002f8d8 	.word	0x0002f8d8

000207f4 <hci_ept_bound>:
	net_buf_unref(buf);
	return 0;
}

static void hci_ept_bound(void *priv)
{
   207f4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   207f6:	4802      	ldr	r0, [pc, #8]	; (20800 <hci_ept_bound+0xc>)
   207f8:	f005 f86a 	bl	258d0 <z_impl_k_sem_give>
	k_sem_give(&ipc_bound_sem);
}
   207fc:	bd08      	pop	{r3, pc}
   207fe:	bf00      	nop
   20800:	20008574 	.word	0x20008574

00020804 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   20804:	b5f0      	push	{r4, r5, r6, r7, lr}
   20806:	b083      	sub	sp, #12
   20808:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   2080a:	4823      	ldr	r0, [pc, #140]	; (20898 <bt_rpmsg_init+0x94>)
   2080c:	f7f8 ff32 	bl	19674 <bt_hci_driver_register>
	if (err < 0) {
   20810:	1e04      	subs	r4, r0, #0
   20812:	db03      	blt.n	2081c <bt_rpmsg_init+0x18>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
	}

	return err;
}
   20814:	4620      	mov	r0, r4
   20816:	370c      	adds	r7, #12
   20818:	46bd      	mov	sp, r7
   2081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   2081c:	466d      	mov	r5, sp
   2081e:	b088      	sub	sp, #32
   20820:	466b      	mov	r3, sp
   20822:	f113 0210 	adds.w	r2, r3, #16
   20826:	d030      	beq.n	2088a <bt_rpmsg_init+0x86>
   20828:	210c      	movs	r1, #12
   2082a:	b13a      	cbz	r2, 2083c <bt_rpmsg_init+0x38>
   2082c:	4608      	mov	r0, r1
   2082e:	2904      	cmp	r1, #4
   20830:	dd01      	ble.n	20836 <bt_rpmsg_init+0x32>
   20832:	4e1a      	ldr	r6, [pc, #104]	; (2089c <bt_rpmsg_init+0x98>)
   20834:	615e      	str	r6, [r3, #20]
   20836:	2808      	cmp	r0, #8
   20838:	dd00      	ble.n	2083c <bt_rpmsg_init+0x38>
   2083a:	619c      	str	r4, [r3, #24]
   2083c:	290b      	cmp	r1, #11
   2083e:	dd27      	ble.n	20890 <bt_rpmsg_init+0x8c>
   20840:	f04f 0c0c 	mov.w	ip, #12
   20844:	b13a      	cbz	r2, 20856 <bt_rpmsg_init+0x52>
   20846:	2103      	movs	r1, #3
   20848:	7139      	strb	r1, [r7, #4]
   2084a:	2100      	movs	r1, #0
   2084c:	7179      	strb	r1, [r7, #5]
   2084e:	71b9      	strb	r1, [r7, #6]
   20850:	71f9      	strb	r1, [r7, #7]
   20852:	6878      	ldr	r0, [r7, #4]
   20854:	6118      	str	r0, [r3, #16]
   20856:	2100      	movs	r1, #0
   20858:	f36f 0100 	bfc	r1, #0, #1
   2085c:	f36f 0141 	bfc	r1, #1, #1
   20860:	f36f 0182 	bfc	r1, #2, #1
   20864:	f36f 01c5 	bfc	r1, #3, #3
   20868:	2301      	movs	r3, #1
   2086a:	f363 1188 	bfi	r1, r3, #6, #3
   2086e:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   20872:	f36c 2152 	bfi	r1, ip, #9, #10
   20876:	f36f 41de 	bfc	r1, #19, #12
   2087a:	f36f 71df 	bfc	r1, #31, #1
   2087e:	2300      	movs	r3, #0
   20880:	4807      	ldr	r0, [pc, #28]	; (208a0 <bt_rpmsg_init+0x9c>)
   20882:	f7f3 fa3b 	bl	13cfc <z_impl_z_log_msg_static_create>
   20886:	46ad      	mov	sp, r5
	return err;
   20888:	e7c4      	b.n	20814 <bt_rpmsg_init+0x10>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   2088a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2088e:	e7cc      	b.n	2082a <bt_rpmsg_init+0x26>
   20890:	f06f 0c1b 	mvn.w	ip, #27
   20894:	e7d6      	b.n	20844 <bt_rpmsg_init+0x40>
   20896:	bf00      	nop
   20898:	00033344 	.word	0x00033344
   2089c:	000330e0 	.word	0x000330e0
   208a0:	0002f828 	.word	0x0002f828

000208a4 <bt_rpmsg_send>:
{
   208a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   208a6:	b083      	sub	sp, #12
   208a8:	af00      	add	r7, sp, #0
   208aa:	4604      	mov	r4, r0
   208ac:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   208ae:	2902      	cmp	r1, #2
   208b0:	d043      	beq.n	2093a <bt_rpmsg_send+0x96>
   208b2:	4608      	mov	r0, r1
   208b4:	2904      	cmp	r1, #4
   208b6:	d03f      	beq.n	20938 <bt_rpmsg_send+0x94>
   208b8:	2900      	cmp	r1, #0
   208ba:	d050      	beq.n	2095e <bt_rpmsg_send+0xba>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   208bc:	466e      	mov	r6, sp
   208be:	b088      	sub	sp, #32
   208c0:	466b      	mov	r3, sp
   208c2:	f113 0210 	adds.w	r2, r3, #16
   208c6:	d031      	beq.n	2092c <bt_rpmsg_send+0x88>
   208c8:	210c      	movs	r1, #12
   208ca:	b14a      	cbz	r2, 208e0 <bt_rpmsg_send+0x3c>
   208cc:	460d      	mov	r5, r1
   208ce:	2904      	cmp	r1, #4
   208d0:	dd03      	ble.n	208da <bt_rpmsg_send+0x36>
   208d2:	f8df c10c 	ldr.w	ip, [pc, #268]	; 209e0 <bt_rpmsg_send+0x13c>
   208d6:	f8c3 c014 	str.w	ip, [r3, #20]
   208da:	2d08      	cmp	r5, #8
   208dc:	dd00      	ble.n	208e0 <bt_rpmsg_send+0x3c>
   208de:	6198      	str	r0, [r3, #24]
   208e0:	290b      	cmp	r1, #11
   208e2:	dd26      	ble.n	20932 <bt_rpmsg_send+0x8e>
   208e4:	250c      	movs	r5, #12
   208e6:	b13a      	cbz	r2, 208f8 <bt_rpmsg_send+0x54>
   208e8:	2103      	movs	r1, #3
   208ea:	7139      	strb	r1, [r7, #4]
   208ec:	2100      	movs	r1, #0
   208ee:	7179      	strb	r1, [r7, #5]
   208f0:	71b9      	strb	r1, [r7, #6]
   208f2:	71f9      	strb	r1, [r7, #7]
   208f4:	6878      	ldr	r0, [r7, #4]
   208f6:	6118      	str	r0, [r3, #16]
   208f8:	2100      	movs	r1, #0
   208fa:	f36f 0100 	bfc	r1, #0, #1
   208fe:	f36f 0141 	bfc	r1, #1, #1
   20902:	f36f 0182 	bfc	r1, #2, #1
   20906:	f36f 01c5 	bfc	r1, #3, #3
   2090a:	2301      	movs	r3, #1
   2090c:	f363 1188 	bfi	r1, r3, #6, #3
   20910:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   20914:	f365 2152 	bfi	r1, r5, #9, #10
   20918:	f36f 41de 	bfc	r1, #19, #12
   2091c:	f36f 71df 	bfc	r1, #31, #1
   20920:	2300      	movs	r3, #0
   20922:	4830      	ldr	r0, [pc, #192]	; (209e4 <bt_rpmsg_send+0x140>)
   20924:	f7f3 f9ea 	bl	13cfc <z_impl_z_log_msg_static_create>
   20928:	46b5      	mov	sp, r6
		goto done;
   2092a:	e011      	b.n	20950 <bt_rpmsg_send+0xac>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   2092c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20930:	e7cb      	b.n	208ca <bt_rpmsg_send+0x26>
   20932:	f06f 051b 	mvn.w	r5, #27
   20936:	e7d6      	b.n	208e6 <bt_rpmsg_send+0x42>
		pkt_indicator = RPMSG_ISO;
   20938:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   2093a:	f104 0008 	add.w	r0, r4, #8
   2093e:	f00c fcc3 	bl	2d2c8 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   20942:	89a2      	ldrh	r2, [r4, #12]
   20944:	68a1      	ldr	r1, [r4, #8]
   20946:	4828      	ldr	r0, [pc, #160]	; (209e8 <bt_rpmsg_send+0x144>)
   20948:	f7f3 fda4 	bl	14494 <ipc_service_send>
	if (err < 0) {
   2094c:	2800      	cmp	r0, #0
   2094e:	db08      	blt.n	20962 <bt_rpmsg_send+0xbe>
	net_buf_unref(buf);
   20950:	4620      	mov	r0, r4
   20952:	f7fe fdb7 	bl	1f4c4 <net_buf_unref>
}
   20956:	2000      	movs	r0, #0
   20958:	370c      	adds	r7, #12
   2095a:	46bd      	mov	sp, r7
   2095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pkt_indicator = RPMSG_CMD;
   2095e:	2101      	movs	r1, #1
   20960:	e7eb      	b.n	2093a <bt_rpmsg_send+0x96>
		BT_ERR("Failed to send (err %d)", err);
   20962:	466d      	mov	r5, sp
   20964:	b088      	sub	sp, #32
   20966:	466b      	mov	r3, sp
   20968:	f113 0210 	adds.w	r2, r3, #16
   2096c:	d032      	beq.n	209d4 <bt_rpmsg_send+0x130>
   2096e:	210c      	movs	r1, #12
   20970:	b14a      	cbz	r2, 20986 <bt_rpmsg_send+0xe2>
   20972:	460e      	mov	r6, r1
   20974:	2904      	cmp	r1, #4
   20976:	dd03      	ble.n	20980 <bt_rpmsg_send+0xdc>
   20978:	f8df c070 	ldr.w	ip, [pc, #112]	; 209ec <bt_rpmsg_send+0x148>
   2097c:	f8c3 c014 	str.w	ip, [r3, #20]
   20980:	2e08      	cmp	r6, #8
   20982:	dd00      	ble.n	20986 <bt_rpmsg_send+0xe2>
   20984:	6198      	str	r0, [r3, #24]
   20986:	290b      	cmp	r1, #11
   20988:	dd27      	ble.n	209da <bt_rpmsg_send+0x136>
   2098a:	f04f 0c0c 	mov.w	ip, #12
   2098e:	b13a      	cbz	r2, 209a0 <bt_rpmsg_send+0xfc>
   20990:	2103      	movs	r1, #3
   20992:	7139      	strb	r1, [r7, #4]
   20994:	2100      	movs	r1, #0
   20996:	7179      	strb	r1, [r7, #5]
   20998:	71b9      	strb	r1, [r7, #6]
   2099a:	71f9      	strb	r1, [r7, #7]
   2099c:	6878      	ldr	r0, [r7, #4]
   2099e:	6118      	str	r0, [r3, #16]
   209a0:	2100      	movs	r1, #0
   209a2:	f36f 0100 	bfc	r1, #0, #1
   209a6:	f36f 0141 	bfc	r1, #1, #1
   209aa:	f36f 0182 	bfc	r1, #2, #1
   209ae:	f36f 01c5 	bfc	r1, #3, #3
   209b2:	2301      	movs	r3, #1
   209b4:	f363 1188 	bfi	r1, r3, #6, #3
   209b8:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   209bc:	f363 2152 	bfi	r1, r3, #9, #10
   209c0:	f36f 41de 	bfc	r1, #19, #12
   209c4:	f36f 71df 	bfc	r1, #31, #1
   209c8:	2300      	movs	r3, #0
   209ca:	4806      	ldr	r0, [pc, #24]	; (209e4 <bt_rpmsg_send+0x140>)
   209cc:	f7f3 f996 	bl	13cfc <z_impl_z_log_msg_static_create>
   209d0:	46ad      	mov	sp, r5
   209d2:	e7bd      	b.n	20950 <bt_rpmsg_send+0xac>
   209d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   209d8:	e7ca      	b.n	20970 <bt_rpmsg_send+0xcc>
   209da:	f06f 0c1b 	mvn.w	ip, #27
   209de:	e7d6      	b.n	2098e <bt_rpmsg_send+0xea>
   209e0:	0003310c 	.word	0x0003310c
   209e4:	0002f828 	.word	0x0002f828
   209e8:	20009c08 	.word	0x20009c08
   209ec:	0003311c 	.word	0x0003311c

000209f0 <bt_rpmsg_open>:
{
   209f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   209f2:	b083      	sub	sp, #12
   209f4:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   209f6:	4869      	ldr	r0, [pc, #420]	; (20b9c <bt_rpmsg_open+0x1ac>)
   209f8:	f7f3 fc80 	bl	142fc <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   209fc:	2800      	cmp	r0, #0
   209fe:	d040      	beq.n	20a82 <bt_rpmsg_open+0x92>
   20a00:	4604      	mov	r4, r0
   20a02:	f110 0f78 	cmn.w	r0, #120	; 0x78
   20a06:	d03c      	beq.n	20a82 <bt_rpmsg_open+0x92>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   20a08:	466d      	mov	r5, sp
   20a0a:	b088      	sub	sp, #32
   20a0c:	466b      	mov	r3, sp
   20a0e:	f113 0210 	adds.w	r2, r3, #16
   20a12:	d030      	beq.n	20a76 <bt_rpmsg_open+0x86>
   20a14:	210c      	movs	r1, #12
   20a16:	b13a      	cbz	r2, 20a28 <bt_rpmsg_open+0x38>
   20a18:	4608      	mov	r0, r1
   20a1a:	2904      	cmp	r1, #4
   20a1c:	dd01      	ble.n	20a22 <bt_rpmsg_open+0x32>
   20a1e:	4e60      	ldr	r6, [pc, #384]	; (20ba0 <bt_rpmsg_open+0x1b0>)
   20a20:	615e      	str	r6, [r3, #20]
   20a22:	2808      	cmp	r0, #8
   20a24:	dd00      	ble.n	20a28 <bt_rpmsg_open+0x38>
   20a26:	619c      	str	r4, [r3, #24]
   20a28:	290b      	cmp	r1, #11
   20a2a:	dd27      	ble.n	20a7c <bt_rpmsg_open+0x8c>
   20a2c:	f04f 0c0c 	mov.w	ip, #12
   20a30:	b13a      	cbz	r2, 20a42 <bt_rpmsg_open+0x52>
   20a32:	2103      	movs	r1, #3
   20a34:	7139      	strb	r1, [r7, #4]
   20a36:	2100      	movs	r1, #0
   20a38:	7179      	strb	r1, [r7, #5]
   20a3a:	71b9      	strb	r1, [r7, #6]
   20a3c:	71f9      	strb	r1, [r7, #7]
   20a3e:	6878      	ldr	r0, [r7, #4]
   20a40:	6118      	str	r0, [r3, #16]
   20a42:	2100      	movs	r1, #0
   20a44:	f36f 0100 	bfc	r1, #0, #1
   20a48:	f36f 0141 	bfc	r1, #1, #1
   20a4c:	f36f 0182 	bfc	r1, #2, #1
   20a50:	f36f 01c5 	bfc	r1, #3, #3
   20a54:	2301      	movs	r3, #1
   20a56:	f363 1188 	bfi	r1, r3, #6, #3
   20a5a:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   20a5e:	f363 2152 	bfi	r1, r3, #9, #10
   20a62:	f36f 41de 	bfc	r1, #19, #12
   20a66:	f36f 71df 	bfc	r1, #31, #1
   20a6a:	2300      	movs	r3, #0
   20a6c:	484d      	ldr	r0, [pc, #308]	; (20ba4 <bt_rpmsg_open+0x1b4>)
   20a6e:	f7f3 f945 	bl	13cfc <z_impl_z_log_msg_static_create>
   20a72:	46ad      	mov	sp, r5
		return err;
   20a74:	e043      	b.n	20afe <bt_rpmsg_open+0x10e>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   20a76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20a7a:	e7cc      	b.n	20a16 <bt_rpmsg_open+0x26>
   20a7c:	f06f 0c1b 	mvn.w	ip, #27
   20a80:	e7d6      	b.n	20a30 <bt_rpmsg_open+0x40>
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   20a82:	4a49      	ldr	r2, [pc, #292]	; (20ba8 <bt_rpmsg_open+0x1b8>)
   20a84:	4949      	ldr	r1, [pc, #292]	; (20bac <bt_rpmsg_open+0x1bc>)
   20a86:	4845      	ldr	r0, [pc, #276]	; (20b9c <bt_rpmsg_open+0x1ac>)
   20a88:	f7f3 fc9c 	bl	143c4 <ipc_service_register_endpoint>
	if (err) {
   20a8c:	4604      	mov	r4, r0
   20a8e:	2800      	cmp	r0, #0
   20a90:	d03f      	beq.n	20b12 <bt_rpmsg_open+0x122>
		BT_ERR("Registering endpoint failed with %d", err);
   20a92:	466d      	mov	r5, sp
   20a94:	b088      	sub	sp, #32
   20a96:	466b      	mov	r3, sp
   20a98:	f113 0210 	adds.w	r2, r3, #16
   20a9c:	d033      	beq.n	20b06 <bt_rpmsg_open+0x116>
   20a9e:	210c      	movs	r1, #12
   20aa0:	b13a      	cbz	r2, 20ab2 <bt_rpmsg_open+0xc2>
   20aa2:	4608      	mov	r0, r1
   20aa4:	2904      	cmp	r1, #4
   20aa6:	dd01      	ble.n	20aac <bt_rpmsg_open+0xbc>
   20aa8:	4e41      	ldr	r6, [pc, #260]	; (20bb0 <bt_rpmsg_open+0x1c0>)
   20aaa:	615e      	str	r6, [r3, #20]
   20aac:	2808      	cmp	r0, #8
   20aae:	dd00      	ble.n	20ab2 <bt_rpmsg_open+0xc2>
   20ab0:	619c      	str	r4, [r3, #24]
   20ab2:	290b      	cmp	r1, #11
   20ab4:	dd2a      	ble.n	20b0c <bt_rpmsg_open+0x11c>
   20ab6:	f04f 0c0c 	mov.w	ip, #12
   20aba:	b13a      	cbz	r2, 20acc <bt_rpmsg_open+0xdc>
   20abc:	2103      	movs	r1, #3
   20abe:	7139      	strb	r1, [r7, #4]
   20ac0:	2100      	movs	r1, #0
   20ac2:	7179      	strb	r1, [r7, #5]
   20ac4:	71b9      	strb	r1, [r7, #6]
   20ac6:	71f9      	strb	r1, [r7, #7]
   20ac8:	6878      	ldr	r0, [r7, #4]
   20aca:	6118      	str	r0, [r3, #16]
   20acc:	2100      	movs	r1, #0
   20ace:	f36f 0100 	bfc	r1, #0, #1
   20ad2:	f36f 0141 	bfc	r1, #1, #1
   20ad6:	f36f 0182 	bfc	r1, #2, #1
   20ada:	f36f 01c5 	bfc	r1, #3, #3
   20ade:	2301      	movs	r3, #1
   20ae0:	f363 1188 	bfi	r1, r3, #6, #3
   20ae4:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   20ae8:	f36c 2152 	bfi	r1, ip, #9, #10
   20aec:	f36f 41de 	bfc	r1, #19, #12
   20af0:	f36f 71df 	bfc	r1, #31, #1
   20af4:	2300      	movs	r3, #0
   20af6:	482b      	ldr	r0, [pc, #172]	; (20ba4 <bt_rpmsg_open+0x1b4>)
   20af8:	f7f3 f900 	bl	13cfc <z_impl_z_log_msg_static_create>
   20afc:	46ad      	mov	sp, r5
}
   20afe:	4620      	mov	r0, r4
   20b00:	370c      	adds	r7, #12
   20b02:	46bd      	mov	sp, r7
   20b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Registering endpoint failed with %d", err);
   20b06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20b0a:	e7c9      	b.n	20aa0 <bt_rpmsg_open+0xb0>
   20b0c:	f06f 0c1b 	mvn.w	ip, #27
   20b10:	e7d3      	b.n	20aba <bt_rpmsg_open+0xca>
	return z_impl_k_sem_take(sem, timeout);
   20b12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   20b16:	2300      	movs	r3, #0
   20b18:	4826      	ldr	r0, [pc, #152]	; (20bb4 <bt_rpmsg_open+0x1c4>)
   20b1a:	f004 ff21 	bl	25960 <z_impl_k_sem_take>
	if (err) {
   20b1e:	4604      	mov	r4, r0
   20b20:	2800      	cmp	r0, #0
   20b22:	d0ec      	beq.n	20afe <bt_rpmsg_open+0x10e>
		BT_ERR("Endpoint binding failed with %d", err);
   20b24:	466e      	mov	r6, sp
   20b26:	b088      	sub	sp, #32
   20b28:	466b      	mov	r3, sp
   20b2a:	f113 0210 	adds.w	r2, r3, #16
   20b2e:	d02f      	beq.n	20b90 <bt_rpmsg_open+0x1a0>
   20b30:	210c      	movs	r1, #12
   20b32:	b13a      	cbz	r2, 20b44 <bt_rpmsg_open+0x154>
   20b34:	4608      	mov	r0, r1
   20b36:	2904      	cmp	r1, #4
   20b38:	dd01      	ble.n	20b3e <bt_rpmsg_open+0x14e>
   20b3a:	4d1f      	ldr	r5, [pc, #124]	; (20bb8 <bt_rpmsg_open+0x1c8>)
   20b3c:	615d      	str	r5, [r3, #20]
   20b3e:	2808      	cmp	r0, #8
   20b40:	dd00      	ble.n	20b44 <bt_rpmsg_open+0x154>
   20b42:	619c      	str	r4, [r3, #24]
   20b44:	290b      	cmp	r1, #11
   20b46:	dd26      	ble.n	20b96 <bt_rpmsg_open+0x1a6>
   20b48:	250c      	movs	r5, #12
   20b4a:	b13a      	cbz	r2, 20b5c <bt_rpmsg_open+0x16c>
   20b4c:	2103      	movs	r1, #3
   20b4e:	7139      	strb	r1, [r7, #4]
   20b50:	2100      	movs	r1, #0
   20b52:	7179      	strb	r1, [r7, #5]
   20b54:	71b9      	strb	r1, [r7, #6]
   20b56:	71f9      	strb	r1, [r7, #7]
   20b58:	6878      	ldr	r0, [r7, #4]
   20b5a:	6118      	str	r0, [r3, #16]
   20b5c:	2100      	movs	r1, #0
   20b5e:	f36f 0100 	bfc	r1, #0, #1
   20b62:	f36f 0141 	bfc	r1, #1, #1
   20b66:	f36f 0182 	bfc	r1, #2, #1
   20b6a:	f36f 01c5 	bfc	r1, #3, #3
   20b6e:	2301      	movs	r3, #1
   20b70:	f363 1188 	bfi	r1, r3, #6, #3
   20b74:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   20b78:	f365 2152 	bfi	r1, r5, #9, #10
   20b7c:	f36f 41de 	bfc	r1, #19, #12
   20b80:	f36f 71df 	bfc	r1, #31, #1
   20b84:	2300      	movs	r3, #0
   20b86:	4807      	ldr	r0, [pc, #28]	; (20ba4 <bt_rpmsg_open+0x1b4>)
   20b88:	f7f3 f8b8 	bl	13cfc <z_impl_z_log_msg_static_create>
   20b8c:	46b5      	mov	sp, r6
		return err;
   20b8e:	e7b6      	b.n	20afe <bt_rpmsg_open+0x10e>
		BT_ERR("Endpoint binding failed with %d", err);
   20b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20b94:	e7cd      	b.n	20b32 <bt_rpmsg_open+0x142>
   20b96:	f06f 051b 	mvn.w	r5, #27
   20b9a:	e7d6      	b.n	20b4a <bt_rpmsg_open+0x15a>
   20b9c:	0002f500 	.word	0x0002f500
   20ba0:	00033134 	.word	0x00033134
   20ba4:	0002f828 	.word	0x0002f828
   20ba8:	20008358 	.word	0x20008358
   20bac:	20009c08 	.word	0x20009c08
   20bb0:	00033164 	.word	0x00033164
   20bb4:	20008574 	.word	0x20008574
   20bb8:	00033188 	.word	0x00033188

00020bbc <bt_rpmsg_evt_recv>:
{
   20bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20bc0:	b095      	sub	sp, #84	; 0x54
   20bc2:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   20bc4:	2901      	cmp	r1, #1
   20bc6:	d934      	bls.n	20c32 <bt_rpmsg_evt_recv+0x76>
   20bc8:	4681      	mov	r9, r0
   20bca:	4688      	mov	r8, r1
	discardable = is_hci_event_discardable(data);
   20bcc:	f00c ff6d 	bl	2daaa <is_hci_event_discardable>
   20bd0:	4604      	mov	r4, r0
	memcpy((void *)&hdr, data, sizeof(hdr));
   20bd2:	2202      	movs	r2, #2
   20bd4:	4649      	mov	r1, r9
   20bd6:	1d38      	adds	r0, r7, #4
   20bd8:	f00a faae 	bl	2b138 <memcpy>
	data += sizeof(hdr);
   20bdc:	f109 0902 	add.w	r9, r9, #2
	remaining -= sizeof(hdr);
   20be0:	f1a8 0802 	sub.w	r8, r8, #2
	if (remaining != hdr.len) {
   20be4:	797b      	ldrb	r3, [r7, #5]
   20be6:	4543      	cmp	r3, r8
   20be8:	d04f      	beq.n	20c8a <bt_rpmsg_evt_recv+0xce>
		BT_ERR("Event payload length is not correct");
   20bea:	4b6c      	ldr	r3, [pc, #432]	; (20d9c <bt_rpmsg_evt_recv+0x1e0>)
   20bec:	637b      	str	r3, [r7, #52]	; 0x34
   20bee:	2302      	movs	r3, #2
   20bf0:	703b      	strb	r3, [r7, #0]
   20bf2:	2600      	movs	r6, #0
   20bf4:	707e      	strb	r6, [r7, #1]
   20bf6:	70be      	strb	r6, [r7, #2]
   20bf8:	70fe      	strb	r6, [r7, #3]
   20bfa:	683b      	ldr	r3, [r7, #0]
   20bfc:	633b      	str	r3, [r7, #48]	; 0x30
   20bfe:	4631      	mov	r1, r6
   20c00:	f366 0100 	bfi	r1, r6, #0, #1
   20c04:	f366 0141 	bfi	r1, r6, #1, #1
   20c08:	f366 0182 	bfi	r1, r6, #2, #1
   20c0c:	f366 01c5 	bfi	r1, r6, #3, #3
   20c10:	2301      	movs	r3, #1
   20c12:	f363 1188 	bfi	r1, r3, #6, #3
   20c16:	2308      	movs	r3, #8
   20c18:	f363 2152 	bfi	r1, r3, #9, #10
   20c1c:	f366 41de 	bfi	r1, r6, #19, #12
   20c20:	f366 71df 	bfi	r1, r6, #31, #1
   20c24:	4633      	mov	r3, r6
   20c26:	f107 0230 	add.w	r2, r7, #48	; 0x30
   20c2a:	485d      	ldr	r0, [pc, #372]	; (20da0 <bt_rpmsg_evt_recv+0x1e4>)
   20c2c:	f7f3 f866 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   20c30:	e066      	b.n	20d00 <bt_rpmsg_evt_recv+0x144>
		BT_ERR("Not enough data for event header");
   20c32:	4b5c      	ldr	r3, [pc, #368]	; (20da4 <bt_rpmsg_evt_recv+0x1e8>)
   20c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   20c36:	2302      	movs	r3, #2
   20c38:	703b      	strb	r3, [r7, #0]
   20c3a:	2600      	movs	r6, #0
   20c3c:	707e      	strb	r6, [r7, #1]
   20c3e:	70be      	strb	r6, [r7, #2]
   20c40:	70fe      	strb	r6, [r7, #3]
   20c42:	683b      	ldr	r3, [r7, #0]
   20c44:	64bb      	str	r3, [r7, #72]	; 0x48
   20c46:	4631      	mov	r1, r6
   20c48:	f366 0100 	bfi	r1, r6, #0, #1
   20c4c:	f366 0141 	bfi	r1, r6, #1, #1
   20c50:	f366 0182 	bfi	r1, r6, #2, #1
   20c54:	f366 01c5 	bfi	r1, r6, #3, #3
   20c58:	2301      	movs	r3, #1
   20c5a:	f363 1188 	bfi	r1, r3, #6, #3
   20c5e:	2308      	movs	r3, #8
   20c60:	f363 2152 	bfi	r1, r3, #9, #10
   20c64:	f366 41de 	bfi	r1, r6, #19, #12
   20c68:	f366 71df 	bfi	r1, r6, #31, #1
   20c6c:	4633      	mov	r3, r6
   20c6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
   20c72:	484b      	ldr	r0, [pc, #300]	; (20da0 <bt_rpmsg_evt_recv+0x1e4>)
   20c74:	f7f3 f842 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   20c78:	e042      	b.n	20d00 <bt_rpmsg_evt_recv+0x144>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   20c7a:	2200      	movs	r2, #0
   20c7c:	2300      	movs	r3, #0
   20c7e:	4621      	mov	r1, r4
   20c80:	f7f6 f92a 	bl	16ed8 <bt_buf_get_evt>
		if (!buf) {
   20c84:	4606      	mov	r6, r0
   20c86:	b138      	cbz	r0, 20c98 <bt_rpmsg_evt_recv+0xdc>
	} while (!buf);
   20c88:	bb4e      	cbnz	r6, 20cde <bt_rpmsg_evt_recv+0x122>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   20c8a:	7938      	ldrb	r0, [r7, #4]
   20c8c:	2c00      	cmp	r4, #0
   20c8e:	d1f4      	bne.n	20c7a <bt_rpmsg_evt_recv+0xbe>
   20c90:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   20c94:	2300      	movs	r3, #0
   20c96:	e7f2      	b.n	20c7e <bt_rpmsg_evt_recv+0xc2>
			if (discardable) {
   20c98:	bb94      	cbnz	r4, 20d00 <bt_rpmsg_evt_recv+0x144>
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   20c9a:	4b43      	ldr	r3, [pc, #268]	; (20da8 <bt_rpmsg_evt_recv+0x1ec>)
   20c9c:	61fb      	str	r3, [r7, #28]
   20c9e:	2202      	movs	r2, #2
   20ca0:	703a      	strb	r2, [r7, #0]
   20ca2:	2300      	movs	r3, #0
   20ca4:	707b      	strb	r3, [r7, #1]
   20ca6:	70bb      	strb	r3, [r7, #2]
   20ca8:	70fb      	strb	r3, [r7, #3]
   20caa:	6839      	ldr	r1, [r7, #0]
   20cac:	61b9      	str	r1, [r7, #24]
   20cae:	f363 0500 	bfi	r5, r3, #0, #1
   20cb2:	f363 0541 	bfi	r5, r3, #1, #1
   20cb6:	f363 0582 	bfi	r5, r3, #2, #1
   20cba:	f363 05c5 	bfi	r5, r3, #3, #3
   20cbe:	f362 1588 	bfi	r5, r2, #6, #3
   20cc2:	2208      	movs	r2, #8
   20cc4:	f362 2552 	bfi	r5, r2, #9, #10
   20cc8:	f363 45de 	bfi	r5, r3, #19, #12
   20ccc:	f363 75df 	bfi	r5, r3, #31, #1
   20cd0:	f107 0218 	add.w	r2, r7, #24
   20cd4:	4629      	mov	r1, r5
   20cd6:	4832      	ldr	r0, [pc, #200]	; (20da0 <bt_rpmsg_evt_recv+0x1e4>)
   20cd8:	f7f3 f810 	bl	13cfc <z_impl_z_log_msg_static_create>
   20cdc:	e7d4      	b.n	20c88 <bt_rpmsg_evt_recv+0xcc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20cde:	f106 0408 	add.w	r4, r6, #8
   20ce2:	2202      	movs	r2, #2
   20ce4:	1d39      	adds	r1, r7, #4
   20ce6:	4620      	mov	r0, r4
   20ce8:	f00c fafe 	bl	2d2e8 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   20cec:	4620      	mov	r0, r4
   20cee:	f00c faf2 	bl	2d2d6 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   20cf2:	4540      	cmp	r0, r8
   20cf4:	d309      	bcc.n	20d0a <bt_rpmsg_evt_recv+0x14e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20cf6:	4642      	mov	r2, r8
   20cf8:	4649      	mov	r1, r9
   20cfa:	4620      	mov	r0, r4
   20cfc:	f00c faf4 	bl	2d2e8 <net_buf_simple_add_mem>
}
   20d00:	4630      	mov	r0, r6
   20d02:	3754      	adds	r7, #84	; 0x54
   20d04:	46bd      	mov	sp, r7
   20d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Not enough space in buffer %zu/%zu",
   20d0a:	466c      	mov	r4, sp
   20d0c:	b088      	sub	sp, #32
   20d0e:	466b      	mov	r3, sp
   20d10:	f113 0210 	adds.w	r2, r3, #16
   20d14:	d013      	beq.n	20d3e <bt_rpmsg_evt_recv+0x182>
   20d16:	2110      	movs	r1, #16
   20d18:	b16a      	cbz	r2, 20d36 <bt_rpmsg_evt_recv+0x17a>
   20d1a:	460d      	mov	r5, r1
   20d1c:	2904      	cmp	r1, #4
   20d1e:	dd03      	ble.n	20d28 <bt_rpmsg_evt_recv+0x16c>
   20d20:	f8df c088 	ldr.w	ip, [pc, #136]	; 20dac <bt_rpmsg_evt_recv+0x1f0>
   20d24:	f8c3 c014 	str.w	ip, [r3, #20]
   20d28:	2d08      	cmp	r5, #8
   20d2a:	dd01      	ble.n	20d30 <bt_rpmsg_evt_recv+0x174>
   20d2c:	f8c3 8018 	str.w	r8, [r3, #24]
   20d30:	2d0c      	cmp	r5, #12
   20d32:	dd07      	ble.n	20d44 <bt_rpmsg_evt_recv+0x188>
   20d34:	61d8      	str	r0, [r3, #28]
   20d36:	290f      	cmp	r1, #15
   20d38:	dd2d      	ble.n	20d96 <bt_rpmsg_evt_recv+0x1da>
   20d3a:	2510      	movs	r5, #16
   20d3c:	e004      	b.n	20d48 <bt_rpmsg_evt_recv+0x18c>
   20d3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20d42:	e7e9      	b.n	20d18 <bt_rpmsg_evt_recv+0x15c>
   20d44:	f06f 051b 	mvn.w	r5, #27
   20d48:	b13a      	cbz	r2, 20d5a <bt_rpmsg_evt_recv+0x19e>
   20d4a:	2104      	movs	r1, #4
   20d4c:	7039      	strb	r1, [r7, #0]
   20d4e:	2100      	movs	r1, #0
   20d50:	7079      	strb	r1, [r7, #1]
   20d52:	70b9      	strb	r1, [r7, #2]
   20d54:	70f9      	strb	r1, [r7, #3]
   20d56:	6838      	ldr	r0, [r7, #0]
   20d58:	6118      	str	r0, [r3, #16]
   20d5a:	2100      	movs	r1, #0
   20d5c:	f36f 0100 	bfc	r1, #0, #1
   20d60:	f36f 0141 	bfc	r1, #1, #1
   20d64:	f36f 0182 	bfc	r1, #2, #1
   20d68:	f36f 01c5 	bfc	r1, #3, #3
   20d6c:	2301      	movs	r3, #1
   20d6e:	f363 1188 	bfi	r1, r3, #6, #3
   20d72:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   20d76:	f363 2152 	bfi	r1, r3, #9, #10
   20d7a:	f36f 41de 	bfc	r1, #19, #12
   20d7e:	f36f 71df 	bfc	r1, #31, #1
   20d82:	2300      	movs	r3, #0
   20d84:	4806      	ldr	r0, [pc, #24]	; (20da0 <bt_rpmsg_evt_recv+0x1e4>)
   20d86:	f7f2 ffb9 	bl	13cfc <z_impl_z_log_msg_static_create>
   20d8a:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   20d8c:	4630      	mov	r0, r6
   20d8e:	f7fe fb99 	bl	1f4c4 <net_buf_unref>
		return NULL;
   20d92:	2600      	movs	r6, #0
   20d94:	e7b4      	b.n	20d00 <bt_rpmsg_evt_recv+0x144>
		BT_ERR("Not enough space in buffer %zu/%zu",
   20d96:	f06f 051b 	mvn.w	r5, #27
   20d9a:	e7d5      	b.n	20d48 <bt_rpmsg_evt_recv+0x18c>
   20d9c:	000331cc 	.word	0x000331cc
   20da0:	0002f828 	.word	0x0002f828
   20da4:	000331a8 	.word	0x000331a8
   20da8:	000331f0 	.word	0x000331f0
   20dac:	00033228 	.word	0x00033228

00020db0 <bt_rpmsg_acl_recv>:
{
   20db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20db4:	b094      	sub	sp, #80	; 0x50
   20db6:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   20db8:	2903      	cmp	r1, #3
   20dba:	d929      	bls.n	20e10 <bt_rpmsg_acl_recv+0x60>
   20dbc:	4605      	mov	r5, r0
   20dbe:	460c      	mov	r4, r1
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   20dc0:	2200      	movs	r2, #0
   20dc2:	2300      	movs	r3, #0
   20dc4:	2003      	movs	r0, #3
   20dc6:	f7f6 f839 	bl	16e3c <bt_buf_get_rx>
	if (buf) {
   20dca:	4606      	mov	r6, r0
   20dcc:	2800      	cmp	r0, #0
   20dce:	d043      	beq.n	20e58 <bt_rpmsg_acl_recv+0xa8>
		memcpy((void *)&hdr, data, sizeof(hdr));
   20dd0:	2204      	movs	r2, #4
   20dd2:	4629      	mov	r1, r5
   20dd4:	18b8      	adds	r0, r7, r2
   20dd6:	f00a f9af 	bl	2b138 <memcpy>
		data += sizeof(hdr);
   20dda:	3504      	adds	r5, #4
		remaining -= sizeof(hdr);
   20ddc:	3c04      	subs	r4, #4
   20dde:	f106 0808 	add.w	r8, r6, #8
   20de2:	2204      	movs	r2, #4
   20de4:	18b9      	adds	r1, r7, r2
   20de6:	4640      	mov	r0, r8
   20de8:	f00c fa7e 	bl	2d2e8 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   20dec:	88fb      	ldrh	r3, [r7, #6]
   20dee:	42a3      	cmp	r3, r4
   20df0:	d155      	bne.n	20e9e <bt_rpmsg_acl_recv+0xee>
	return net_buf_simple_tailroom(&buf->b);
   20df2:	4640      	mov	r0, r8
   20df4:	f00c fa6f 	bl	2d2d6 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   20df8:	4284      	cmp	r4, r0
   20dfa:	d878      	bhi.n	20eee <bt_rpmsg_acl_recv+0x13e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20dfc:	4622      	mov	r2, r4
   20dfe:	4629      	mov	r1, r5
   20e00:	4640      	mov	r0, r8
   20e02:	f00c fa71 	bl	2d2e8 <net_buf_simple_add_mem>
}
   20e06:	4630      	mov	r0, r6
   20e08:	3750      	adds	r7, #80	; 0x50
   20e0a:	46bd      	mov	sp, r7
   20e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Not enough data for ACL header");
   20e10:	4b5c      	ldr	r3, [pc, #368]	; (20f84 <bt_rpmsg_acl_recv+0x1d4>)
   20e12:	64fb      	str	r3, [r7, #76]	; 0x4c
   20e14:	2302      	movs	r3, #2
   20e16:	703b      	strb	r3, [r7, #0]
   20e18:	2600      	movs	r6, #0
   20e1a:	707e      	strb	r6, [r7, #1]
   20e1c:	70be      	strb	r6, [r7, #2]
   20e1e:	70fe      	strb	r6, [r7, #3]
   20e20:	683b      	ldr	r3, [r7, #0]
   20e22:	64bb      	str	r3, [r7, #72]	; 0x48
   20e24:	4631      	mov	r1, r6
   20e26:	f366 0100 	bfi	r1, r6, #0, #1
   20e2a:	f366 0141 	bfi	r1, r6, #1, #1
   20e2e:	f366 0182 	bfi	r1, r6, #2, #1
   20e32:	f366 01c5 	bfi	r1, r6, #3, #3
   20e36:	2301      	movs	r3, #1
   20e38:	f363 1188 	bfi	r1, r3, #6, #3
   20e3c:	2308      	movs	r3, #8
   20e3e:	f363 2152 	bfi	r1, r3, #9, #10
   20e42:	f366 41de 	bfi	r1, r6, #19, #12
   20e46:	f366 71df 	bfi	r1, r6, #31, #1
   20e4a:	4633      	mov	r3, r6
   20e4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   20e50:	484d      	ldr	r0, [pc, #308]	; (20f88 <bt_rpmsg_acl_recv+0x1d8>)
   20e52:	f7f2 ff53 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   20e56:	e7d6      	b.n	20e06 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("No available ACL buffers!");
   20e58:	4b4c      	ldr	r3, [pc, #304]	; (20f8c <bt_rpmsg_acl_recv+0x1dc>)
   20e5a:	61fb      	str	r3, [r7, #28]
   20e5c:	2302      	movs	r3, #2
   20e5e:	703b      	strb	r3, [r7, #0]
   20e60:	2300      	movs	r3, #0
   20e62:	707b      	strb	r3, [r7, #1]
   20e64:	70bb      	strb	r3, [r7, #2]
   20e66:	70fb      	strb	r3, [r7, #3]
   20e68:	683a      	ldr	r2, [r7, #0]
   20e6a:	61ba      	str	r2, [r7, #24]
   20e6c:	4619      	mov	r1, r3
   20e6e:	f363 0100 	bfi	r1, r3, #0, #1
   20e72:	f363 0141 	bfi	r1, r3, #1, #1
   20e76:	f363 0182 	bfi	r1, r3, #2, #1
   20e7a:	f363 01c5 	bfi	r1, r3, #3, #3
   20e7e:	2201      	movs	r2, #1
   20e80:	f362 1188 	bfi	r1, r2, #6, #3
   20e84:	2208      	movs	r2, #8
   20e86:	f362 2152 	bfi	r1, r2, #9, #10
   20e8a:	f363 41de 	bfi	r1, r3, #19, #12
   20e8e:	f363 71df 	bfi	r1, r3, #31, #1
   20e92:	f107 0218 	add.w	r2, r7, #24
   20e96:	483c      	ldr	r0, [pc, #240]	; (20f88 <bt_rpmsg_acl_recv+0x1d8>)
   20e98:	f7f2 ff30 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   20e9c:	e7b3      	b.n	20e06 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("ACL payload length is not correct");
   20e9e:	4b3c      	ldr	r3, [pc, #240]	; (20f90 <bt_rpmsg_acl_recv+0x1e0>)
   20ea0:	637b      	str	r3, [r7, #52]	; 0x34
   20ea2:	2302      	movs	r3, #2
   20ea4:	703b      	strb	r3, [r7, #0]
   20ea6:	2400      	movs	r4, #0
   20ea8:	707c      	strb	r4, [r7, #1]
   20eaa:	70bc      	strb	r4, [r7, #2]
   20eac:	70fc      	strb	r4, [r7, #3]
   20eae:	683b      	ldr	r3, [r7, #0]
   20eb0:	633b      	str	r3, [r7, #48]	; 0x30
   20eb2:	4621      	mov	r1, r4
   20eb4:	f364 0100 	bfi	r1, r4, #0, #1
   20eb8:	f364 0141 	bfi	r1, r4, #1, #1
   20ebc:	f364 0182 	bfi	r1, r4, #2, #1
   20ec0:	f364 01c5 	bfi	r1, r4, #3, #3
   20ec4:	2301      	movs	r3, #1
   20ec6:	f363 1188 	bfi	r1, r3, #6, #3
   20eca:	2308      	movs	r3, #8
   20ecc:	f363 2152 	bfi	r1, r3, #9, #10
   20ed0:	f364 41de 	bfi	r1, r4, #19, #12
   20ed4:	f364 71df 	bfi	r1, r4, #31, #1
   20ed8:	4623      	mov	r3, r4
   20eda:	f107 0230 	add.w	r2, r7, #48	; 0x30
   20ede:	482a      	ldr	r0, [pc, #168]	; (20f88 <bt_rpmsg_acl_recv+0x1d8>)
   20ee0:	f7f2 ff0c 	bl	13cfc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   20ee4:	4630      	mov	r0, r6
   20ee6:	f7fe faed 	bl	1f4c4 <net_buf_unref>
		return NULL;
   20eea:	4626      	mov	r6, r4
   20eec:	e78b      	b.n	20e06 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("Not enough space in buffer %zu/%zu",
   20eee:	466d      	mov	r5, sp
   20ef0:	b088      	sub	sp, #32
   20ef2:	466b      	mov	r3, sp
   20ef4:	f113 0210 	adds.w	r2, r3, #16
   20ef8:	d014      	beq.n	20f24 <bt_rpmsg_acl_recv+0x174>
   20efa:	2110      	movs	r1, #16
   20efc:	b172      	cbz	r2, 20f1c <bt_rpmsg_acl_recv+0x16c>
   20efe:	468c      	mov	ip, r1
   20f00:	2904      	cmp	r1, #4
   20f02:	dd03      	ble.n	20f0c <bt_rpmsg_acl_recv+0x15c>
   20f04:	f8df e08c 	ldr.w	lr, [pc, #140]	; 20f94 <bt_rpmsg_acl_recv+0x1e4>
   20f08:	f8c3 e014 	str.w	lr, [r3, #20]
   20f0c:	f1bc 0f08 	cmp.w	ip, #8
   20f10:	dd00      	ble.n	20f14 <bt_rpmsg_acl_recv+0x164>
   20f12:	619c      	str	r4, [r3, #24]
   20f14:	f1bc 0f0c 	cmp.w	ip, #12
   20f18:	dd07      	ble.n	20f2a <bt_rpmsg_acl_recv+0x17a>
   20f1a:	61d8      	str	r0, [r3, #28]
   20f1c:	290f      	cmp	r1, #15
   20f1e:	dd2d      	ble.n	20f7c <bt_rpmsg_acl_recv+0x1cc>
   20f20:	2410      	movs	r4, #16
   20f22:	e004      	b.n	20f2e <bt_rpmsg_acl_recv+0x17e>
   20f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20f28:	e7e8      	b.n	20efc <bt_rpmsg_acl_recv+0x14c>
   20f2a:	f06f 041b 	mvn.w	r4, #27
   20f2e:	b13a      	cbz	r2, 20f40 <bt_rpmsg_acl_recv+0x190>
   20f30:	2104      	movs	r1, #4
   20f32:	7039      	strb	r1, [r7, #0]
   20f34:	2100      	movs	r1, #0
   20f36:	7079      	strb	r1, [r7, #1]
   20f38:	70b9      	strb	r1, [r7, #2]
   20f3a:	70f9      	strb	r1, [r7, #3]
   20f3c:	6838      	ldr	r0, [r7, #0]
   20f3e:	6118      	str	r0, [r3, #16]
   20f40:	2100      	movs	r1, #0
   20f42:	f36f 0100 	bfc	r1, #0, #1
   20f46:	f36f 0141 	bfc	r1, #1, #1
   20f4a:	f36f 0182 	bfc	r1, #2, #1
   20f4e:	f36f 01c5 	bfc	r1, #3, #3
   20f52:	2301      	movs	r3, #1
   20f54:	f363 1188 	bfi	r1, r3, #6, #3
   20f58:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   20f5c:	f363 2152 	bfi	r1, r3, #9, #10
   20f60:	f36f 41de 	bfc	r1, #19, #12
   20f64:	f36f 71df 	bfc	r1, #31, #1
   20f68:	2300      	movs	r3, #0
   20f6a:	4807      	ldr	r0, [pc, #28]	; (20f88 <bt_rpmsg_acl_recv+0x1d8>)
   20f6c:	f7f2 fec6 	bl	13cfc <z_impl_z_log_msg_static_create>
   20f70:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   20f72:	4630      	mov	r0, r6
   20f74:	f7fe faa6 	bl	1f4c4 <net_buf_unref>
		return NULL;
   20f78:	2600      	movs	r6, #0
   20f7a:	e744      	b.n	20e06 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("Not enough space in buffer %zu/%zu",
   20f7c:	f06f 041b 	mvn.w	r4, #27
   20f80:	e7d5      	b.n	20f2e <bt_rpmsg_acl_recv+0x17e>
   20f82:	bf00      	nop
   20f84:	0003324c 	.word	0x0003324c
   20f88:	0002f828 	.word	0x0002f828
   20f8c:	0003326c 	.word	0x0003326c
   20f90:	00033288 	.word	0x00033288
   20f94:	00033228 	.word	0x00033228

00020f98 <bt_rpmsg_iso_recv>:
{
   20f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f9c:	b094      	sub	sp, #80	; 0x50
   20f9e:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   20fa0:	2903      	cmp	r1, #3
   20fa2:	d92b      	bls.n	20ffc <bt_rpmsg_iso_recv+0x64>
   20fa4:	4605      	mov	r5, r0
   20fa6:	460c      	mov	r4, r1
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   20fa8:	2200      	movs	r2, #0
   20faa:	2300      	movs	r3, #0
   20fac:	2005      	movs	r0, #5
   20fae:	f7f5 ff45 	bl	16e3c <bt_buf_get_rx>
	if (buf) {
   20fb2:	4606      	mov	r6, r0
   20fb4:	2800      	cmp	r0, #0
   20fb6:	d045      	beq.n	21044 <bt_rpmsg_iso_recv+0xac>
		memcpy((void *)&hdr, data, sizeof(hdr));
   20fb8:	2204      	movs	r2, #4
   20fba:	4629      	mov	r1, r5
   20fbc:	18b8      	adds	r0, r7, r2
   20fbe:	f00a f8bb 	bl	2b138 <memcpy>
		data += sizeof(hdr);
   20fc2:	3504      	adds	r5, #4
		remaining -= sizeof(hdr);
   20fc4:	3c04      	subs	r4, #4
   20fc6:	f106 0808 	add.w	r8, r6, #8
   20fca:	2204      	movs	r2, #4
   20fcc:	18b9      	adds	r1, r7, r2
   20fce:	4640      	mov	r0, r8
   20fd0:	f00c f98a 	bl	2d2e8 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   20fd4:	88fb      	ldrh	r3, [r7, #6]
   20fd6:	f3c3 030d 	ubfx	r3, r3, #0, #14
   20fda:	42a3      	cmp	r3, r4
   20fdc:	d155      	bne.n	2108a <bt_rpmsg_iso_recv+0xf2>
	return net_buf_simple_tailroom(&buf->b);
   20fde:	4640      	mov	r0, r8
   20fe0:	f00c f979 	bl	2d2d6 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   20fe4:	4284      	cmp	r4, r0
   20fe6:	d878      	bhi.n	210da <bt_rpmsg_iso_recv+0x142>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20fe8:	4622      	mov	r2, r4
   20fea:	4629      	mov	r1, r5
   20fec:	4640      	mov	r0, r8
   20fee:	f00c f97b 	bl	2d2e8 <net_buf_simple_add_mem>
}
   20ff2:	4630      	mov	r0, r6
   20ff4:	3750      	adds	r7, #80	; 0x50
   20ff6:	46bd      	mov	sp, r7
   20ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Not enough data for ISO header");
   20ffc:	4b5c      	ldr	r3, [pc, #368]	; (21170 <bt_rpmsg_iso_recv+0x1d8>)
   20ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   21000:	2302      	movs	r3, #2
   21002:	703b      	strb	r3, [r7, #0]
   21004:	2600      	movs	r6, #0
   21006:	707e      	strb	r6, [r7, #1]
   21008:	70be      	strb	r6, [r7, #2]
   2100a:	70fe      	strb	r6, [r7, #3]
   2100c:	683b      	ldr	r3, [r7, #0]
   2100e:	64bb      	str	r3, [r7, #72]	; 0x48
   21010:	4631      	mov	r1, r6
   21012:	f366 0100 	bfi	r1, r6, #0, #1
   21016:	f366 0141 	bfi	r1, r6, #1, #1
   2101a:	f366 0182 	bfi	r1, r6, #2, #1
   2101e:	f366 01c5 	bfi	r1, r6, #3, #3
   21022:	2301      	movs	r3, #1
   21024:	f363 1188 	bfi	r1, r3, #6, #3
   21028:	2308      	movs	r3, #8
   2102a:	f363 2152 	bfi	r1, r3, #9, #10
   2102e:	f366 41de 	bfi	r1, r6, #19, #12
   21032:	f366 71df 	bfi	r1, r6, #31, #1
   21036:	4633      	mov	r3, r6
   21038:	f107 0248 	add.w	r2, r7, #72	; 0x48
   2103c:	484d      	ldr	r0, [pc, #308]	; (21174 <bt_rpmsg_iso_recv+0x1dc>)
   2103e:	f7f2 fe5d 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   21042:	e7d6      	b.n	20ff2 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("No available ISO buffers!");
   21044:	4b4c      	ldr	r3, [pc, #304]	; (21178 <bt_rpmsg_iso_recv+0x1e0>)
   21046:	61fb      	str	r3, [r7, #28]
   21048:	2302      	movs	r3, #2
   2104a:	703b      	strb	r3, [r7, #0]
   2104c:	2300      	movs	r3, #0
   2104e:	707b      	strb	r3, [r7, #1]
   21050:	70bb      	strb	r3, [r7, #2]
   21052:	70fb      	strb	r3, [r7, #3]
   21054:	683a      	ldr	r2, [r7, #0]
   21056:	61ba      	str	r2, [r7, #24]
   21058:	4619      	mov	r1, r3
   2105a:	f363 0100 	bfi	r1, r3, #0, #1
   2105e:	f363 0141 	bfi	r1, r3, #1, #1
   21062:	f363 0182 	bfi	r1, r3, #2, #1
   21066:	f363 01c5 	bfi	r1, r3, #3, #3
   2106a:	2201      	movs	r2, #1
   2106c:	f362 1188 	bfi	r1, r2, #6, #3
   21070:	2208      	movs	r2, #8
   21072:	f362 2152 	bfi	r1, r2, #9, #10
   21076:	f363 41de 	bfi	r1, r3, #19, #12
   2107a:	f363 71df 	bfi	r1, r3, #31, #1
   2107e:	f107 0218 	add.w	r2, r7, #24
   21082:	483c      	ldr	r0, [pc, #240]	; (21174 <bt_rpmsg_iso_recv+0x1dc>)
   21084:	f7f2 fe3a 	bl	13cfc <z_impl_z_log_msg_static_create>
		return NULL;
   21088:	e7b3      	b.n	20ff2 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("ISO payload length is not correct");
   2108a:	4b3c      	ldr	r3, [pc, #240]	; (2117c <bt_rpmsg_iso_recv+0x1e4>)
   2108c:	637b      	str	r3, [r7, #52]	; 0x34
   2108e:	2302      	movs	r3, #2
   21090:	703b      	strb	r3, [r7, #0]
   21092:	2400      	movs	r4, #0
   21094:	707c      	strb	r4, [r7, #1]
   21096:	70bc      	strb	r4, [r7, #2]
   21098:	70fc      	strb	r4, [r7, #3]
   2109a:	683b      	ldr	r3, [r7, #0]
   2109c:	633b      	str	r3, [r7, #48]	; 0x30
   2109e:	4621      	mov	r1, r4
   210a0:	f364 0100 	bfi	r1, r4, #0, #1
   210a4:	f364 0141 	bfi	r1, r4, #1, #1
   210a8:	f364 0182 	bfi	r1, r4, #2, #1
   210ac:	f364 01c5 	bfi	r1, r4, #3, #3
   210b0:	2301      	movs	r3, #1
   210b2:	f363 1188 	bfi	r1, r3, #6, #3
   210b6:	2308      	movs	r3, #8
   210b8:	f363 2152 	bfi	r1, r3, #9, #10
   210bc:	f364 41de 	bfi	r1, r4, #19, #12
   210c0:	f364 71df 	bfi	r1, r4, #31, #1
   210c4:	4623      	mov	r3, r4
   210c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   210ca:	482a      	ldr	r0, [pc, #168]	; (21174 <bt_rpmsg_iso_recv+0x1dc>)
   210cc:	f7f2 fe16 	bl	13cfc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   210d0:	4630      	mov	r0, r6
   210d2:	f7fe f9f7 	bl	1f4c4 <net_buf_unref>
		return NULL;
   210d6:	4626      	mov	r6, r4
   210d8:	e78b      	b.n	20ff2 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("Not enough space in buffer %zu/%zu",
   210da:	466d      	mov	r5, sp
   210dc:	b088      	sub	sp, #32
   210de:	466b      	mov	r3, sp
   210e0:	f113 0210 	adds.w	r2, r3, #16
   210e4:	d014      	beq.n	21110 <bt_rpmsg_iso_recv+0x178>
   210e6:	2110      	movs	r1, #16
   210e8:	b172      	cbz	r2, 21108 <bt_rpmsg_iso_recv+0x170>
   210ea:	468c      	mov	ip, r1
   210ec:	2904      	cmp	r1, #4
   210ee:	dd03      	ble.n	210f8 <bt_rpmsg_iso_recv+0x160>
   210f0:	f8df e08c 	ldr.w	lr, [pc, #140]	; 21180 <bt_rpmsg_iso_recv+0x1e8>
   210f4:	f8c3 e014 	str.w	lr, [r3, #20]
   210f8:	f1bc 0f08 	cmp.w	ip, #8
   210fc:	dd00      	ble.n	21100 <bt_rpmsg_iso_recv+0x168>
   210fe:	619c      	str	r4, [r3, #24]
   21100:	f1bc 0f0c 	cmp.w	ip, #12
   21104:	dd07      	ble.n	21116 <bt_rpmsg_iso_recv+0x17e>
   21106:	61d8      	str	r0, [r3, #28]
   21108:	290f      	cmp	r1, #15
   2110a:	dd2d      	ble.n	21168 <bt_rpmsg_iso_recv+0x1d0>
   2110c:	2410      	movs	r4, #16
   2110e:	e004      	b.n	2111a <bt_rpmsg_iso_recv+0x182>
   21110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21114:	e7e8      	b.n	210e8 <bt_rpmsg_iso_recv+0x150>
   21116:	f06f 041b 	mvn.w	r4, #27
   2111a:	b13a      	cbz	r2, 2112c <bt_rpmsg_iso_recv+0x194>
   2111c:	2104      	movs	r1, #4
   2111e:	7039      	strb	r1, [r7, #0]
   21120:	2100      	movs	r1, #0
   21122:	7079      	strb	r1, [r7, #1]
   21124:	70b9      	strb	r1, [r7, #2]
   21126:	70f9      	strb	r1, [r7, #3]
   21128:	6838      	ldr	r0, [r7, #0]
   2112a:	6118      	str	r0, [r3, #16]
   2112c:	2100      	movs	r1, #0
   2112e:	f36f 0100 	bfc	r1, #0, #1
   21132:	f36f 0141 	bfc	r1, #1, #1
   21136:	f36f 0182 	bfc	r1, #2, #1
   2113a:	f36f 01c5 	bfc	r1, #3, #3
   2113e:	2301      	movs	r3, #1
   21140:	f363 1188 	bfi	r1, r3, #6, #3
   21144:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   21148:	f363 2152 	bfi	r1, r3, #9, #10
   2114c:	f36f 41de 	bfc	r1, #19, #12
   21150:	f36f 71df 	bfc	r1, #31, #1
   21154:	2300      	movs	r3, #0
   21156:	4807      	ldr	r0, [pc, #28]	; (21174 <bt_rpmsg_iso_recv+0x1dc>)
   21158:	f7f2 fdd0 	bl	13cfc <z_impl_z_log_msg_static_create>
   2115c:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   2115e:	4630      	mov	r0, r6
   21160:	f7fe f9b0 	bl	1f4c4 <net_buf_unref>
		return NULL;
   21164:	2600      	movs	r6, #0
   21166:	e744      	b.n	20ff2 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("Not enough space in buffer %zu/%zu",
   21168:	f06f 041b 	mvn.w	r4, #27
   2116c:	e7d5      	b.n	2111a <bt_rpmsg_iso_recv+0x182>
   2116e:	bf00      	nop
   21170:	000332ac 	.word	0x000332ac
   21174:	0002f828 	.word	0x0002f828
   21178:	000332cc 	.word	0x000332cc
   2117c:	000332e8 	.word	0x000332e8
   21180:	00033228 	.word	0x00033228

00021184 <bt_rpmsg_rx>:
{
   21184:	b5b0      	push	{r4, r5, r7, lr}
   21186:	b082      	sub	sp, #8
   21188:	af00      	add	r7, sp, #0
	pkt_indicator = *data++;
   2118a:	f810 3b01 	ldrb.w	r3, [r0], #1
	remaining -= sizeof(pkt_indicator);
   2118e:	3901      	subs	r1, #1
	switch (pkt_indicator) {
   21190:	2b04      	cmp	r3, #4
   21192:	d03a      	beq.n	2120a <bt_rpmsg_rx+0x86>
   21194:	2b05      	cmp	r3, #5
   21196:	d043      	beq.n	21220 <bt_rpmsg_rx+0x9c>
   21198:	2b02      	cmp	r3, #2
   2119a:	d03e      	beq.n	2121a <bt_rpmsg_rx+0x96>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   2119c:	466c      	mov	r4, sp
   2119e:	b088      	sub	sp, #32
   211a0:	4669      	mov	r1, sp
   211a2:	f111 0210 	adds.w	r2, r1, #16
   211a6:	d03e      	beq.n	21226 <bt_rpmsg_rx+0xa2>
   211a8:	200c      	movs	r0, #12
   211aa:	b142      	cbz	r2, 211be <bt_rpmsg_rx+0x3a>
   211ac:	4684      	mov	ip, r0
   211ae:	2804      	cmp	r0, #4
   211b0:	dd01      	ble.n	211b6 <bt_rpmsg_rx+0x32>
   211b2:	4d20      	ldr	r5, [pc, #128]	; (21234 <bt_rpmsg_rx+0xb0>)
   211b4:	614d      	str	r5, [r1, #20]
   211b6:	f1bc 0f08 	cmp.w	ip, #8
   211ba:	dd00      	ble.n	211be <bt_rpmsg_rx+0x3a>
   211bc:	618b      	str	r3, [r1, #24]
   211be:	280b      	cmp	r0, #11
   211c0:	dd34      	ble.n	2122c <bt_rpmsg_rx+0xa8>
   211c2:	230c      	movs	r3, #12
   211c4:	b13a      	cbz	r2, 211d6 <bt_rpmsg_rx+0x52>
   211c6:	2003      	movs	r0, #3
   211c8:	7138      	strb	r0, [r7, #4]
   211ca:	2000      	movs	r0, #0
   211cc:	7178      	strb	r0, [r7, #5]
   211ce:	71b8      	strb	r0, [r7, #6]
   211d0:	71f8      	strb	r0, [r7, #7]
   211d2:	6878      	ldr	r0, [r7, #4]
   211d4:	6108      	str	r0, [r1, #16]
   211d6:	2100      	movs	r1, #0
   211d8:	f36f 0100 	bfc	r1, #0, #1
   211dc:	f36f 0141 	bfc	r1, #1, #1
   211e0:	f36f 0182 	bfc	r1, #2, #1
   211e4:	f36f 01c5 	bfc	r1, #3, #3
   211e8:	2001      	movs	r0, #1
   211ea:	f360 1188 	bfi	r1, r0, #6, #3
   211ee:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   211f2:	f363 2152 	bfi	r1, r3, #9, #10
   211f6:	f36f 41de 	bfc	r1, #19, #12
   211fa:	f36f 71df 	bfc	r1, #31, #1
   211fe:	2300      	movs	r3, #0
   21200:	480d      	ldr	r0, [pc, #52]	; (21238 <bt_rpmsg_rx+0xb4>)
   21202:	f7f2 fd7b 	bl	13cfc <z_impl_z_log_msg_static_create>
   21206:	46a5      	mov	sp, r4
   21208:	e004      	b.n	21214 <bt_rpmsg_rx+0x90>
		buf = bt_rpmsg_evt_recv(data, remaining);
   2120a:	f7ff fcd7 	bl	20bbc <bt_rpmsg_evt_recv>
	if (buf) {
   2120e:	b108      	cbz	r0, 21214 <bt_rpmsg_rx+0x90>
		bt_recv(buf);
   21210:	f7f8 f9c4 	bl	1959c <bt_recv>
}
   21214:	3708      	adds	r7, #8
   21216:	46bd      	mov	sp, r7
   21218:	bdb0      	pop	{r4, r5, r7, pc}
		buf = bt_rpmsg_acl_recv(data, remaining);
   2121a:	f7ff fdc9 	bl	20db0 <bt_rpmsg_acl_recv>
		break;
   2121e:	e7f6      	b.n	2120e <bt_rpmsg_rx+0x8a>
		buf = bt_rpmsg_iso_recv(data, remaining);
   21220:	f7ff feba 	bl	20f98 <bt_rpmsg_iso_recv>
		break;
   21224:	e7f3      	b.n	2120e <bt_rpmsg_rx+0x8a>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   21226:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2122a:	e7be      	b.n	211aa <bt_rpmsg_rx+0x26>
   2122c:	f06f 031b 	mvn.w	r3, #27
   21230:	e7c8      	b.n	211c4 <bt_rpmsg_rx+0x40>
   21232:	bf00      	nop
   21234:	0003330c 	.word	0x0003330c
   21238:	0002f828 	.word	0x0002f828

0002123c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2123c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dev != NULL);
   2123e:	b130      	cbz	r0, 2124e <entropy_cc3xx_rng_get_entropy+0x12>
   21240:	4608      	mov	r0, r1
   21242:	4611      	mov	r1, r2
	__ASSERT_NO_MSG(buffer != NULL);
   21244:	b170      	cbz	r0, 21264 <entropy_cc3xx_rng_get_entropy+0x28>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   21246:	f001 f93b 	bl	224c0 <psa_generate_random>
	if (status == PSA_SUCCESS) {
   2124a:	b9b0      	cbnz	r0, 2127a <entropy_cc3xx_rng_get_entropy+0x3e>
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   2124c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(dev != NULL);
   2124e:	4c0c      	ldr	r4, [pc, #48]	; (21280 <entropy_cc3xx_rng_get_entropy+0x44>)
   21250:	2320      	movs	r3, #32
   21252:	4622      	mov	r2, r4
   21254:	490b      	ldr	r1, [pc, #44]	; (21284 <entropy_cc3xx_rng_get_entropy+0x48>)
   21256:	480c      	ldr	r0, [pc, #48]	; (21288 <entropy_cc3xx_rng_get_entropy+0x4c>)
   21258:	f008 fc47 	bl	29aea <assert_print>
   2125c:	2120      	movs	r1, #32
   2125e:	4620      	mov	r0, r4
   21260:	f008 fc3c 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   21264:	4c06      	ldr	r4, [pc, #24]	; (21280 <entropy_cc3xx_rng_get_entropy+0x44>)
   21266:	2321      	movs	r3, #33	; 0x21
   21268:	4622      	mov	r2, r4
   2126a:	4908      	ldr	r1, [pc, #32]	; (2128c <entropy_cc3xx_rng_get_entropy+0x50>)
   2126c:	4806      	ldr	r0, [pc, #24]	; (21288 <entropy_cc3xx_rng_get_entropy+0x4c>)
   2126e:	f008 fc3c 	bl	29aea <assert_print>
   21272:	2121      	movs	r1, #33	; 0x21
   21274:	4620      	mov	r0, r4
   21276:	f008 fc31 	bl	29adc <assert_post_action>
	int err = EINVAL;
   2127a:	2016      	movs	r0, #22
	return err;
   2127c:	e7e6      	b.n	2124c <entropy_cc3xx_rng_get_entropy+0x10>
   2127e:	bf00      	nop
   21280:	00033374 	.word	0x00033374
   21284:	000333a4 	.word	0x000333a4
   21288:	0002fdac 	.word	0x0002fdac
   2128c:	000333b8 	.word	0x000333b8

00021290 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   21290:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   21294:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21298:	4b01      	ldr	r3, [pc, #4]	; (212a0 <set_comparator+0x10>)
   2129a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   2129e:	4770      	bx	lr
   212a0:	40015000 	.word	0x40015000

000212a4 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   212a4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   212a8:	4b01      	ldr	r3, [pc, #4]	; (212b0 <get_comparator+0xc>)
   212aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   212ae:	4770      	bx	lr
   212b0:	40015000 	.word	0x40015000

000212b4 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   212b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   212b8:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   212ba:	4a02      	ldr	r2, [pc, #8]	; (212c4 <event_enable+0x10>)
   212bc:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   212c0:	4770      	bx	lr
   212c2:	bf00      	nop
   212c4:	40015000 	.word	0x40015000

000212c8 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   212c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   212cc:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   212ce:	4a02      	ldr	r2, [pc, #8]	; (212d8 <event_disable+0x10>)
   212d0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   212d4:	4770      	bx	lr
   212d6:	bf00      	nop
   212d8:	40015000 	.word	0x40015000

000212dc <counter>:
     return p_reg->COUNTER;
   212dc:	4b01      	ldr	r3, [pc, #4]	; (212e4 <counter+0x8>)
   212de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   212e2:	4770      	bx	lr
   212e4:	40015000 	.word	0x40015000

000212e8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   212e8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   212ea:	2301      	movs	r3, #1
   212ec:	4083      	lsls	r3, r0
   212ee:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   212f2:	4a0c      	ldr	r2, [pc, #48]	; (21324 <compare_int_lock+0x3c>)
   212f4:	e8d2 1fef 	ldaex	r1, [r2]
   212f8:	ea01 0e0c 	and.w	lr, r1, ip
   212fc:	e8c2 efe4 	stlex	r4, lr, [r2]
   21300:	2c00      	cmp	r4, #0
   21302:	d1f7      	bne.n	212f4 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21304:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21308:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   2130a:	4807      	ldr	r0, [pc, #28]	; (21328 <compare_int_lock+0x40>)
   2130c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   21310:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21314:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   21318:	420b      	tst	r3, r1
}
   2131a:	bf14      	ite	ne
   2131c:	2001      	movne	r0, #1
   2131e:	2000      	moveq	r0, #0
   21320:	bd10      	pop	{r4, pc}
   21322:	bf00      	nop
   21324:	20009c18 	.word	0x20009c18
   21328:	40015000 	.word	0x40015000

0002132c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   2132c:	b538      	push	{r3, r4, r5, lr}
   2132e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   21330:	f00c fbf7 	bl	2db22 <full_int_lock>
   21334:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   21336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2133a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   2133c:	4a14      	ldr	r2, [pc, #80]	; (21390 <channel_processing_check_and_clear+0x64>)
   2133e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   21342:	4213      	tst	r3, r2
   21344:	d105      	bne.n	21352 <channel_processing_check_and_clear+0x26>
	bool result = false;
   21346:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   21348:	4628      	mov	r0, r5
   2134a:	f00c fbf3 	bl	2db34 <full_int_unlock>

	return result;
}
   2134e:	4620      	mov	r0, r4
   21350:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21352:	2301      	movs	r3, #1
   21354:	40a3      	lsls	r3, r4
   21356:	43db      	mvns	r3, r3
   21358:	4a0e      	ldr	r2, [pc, #56]	; (21394 <channel_processing_check_and_clear+0x68>)
   2135a:	e8d2 1fef 	ldaex	r1, [r2]
   2135e:	ea01 0003 	and.w	r0, r1, r3
   21362:	e8c2 0fec 	stlex	ip, r0, [r2]
   21366:	f1bc 0f00 	cmp.w	ip, #0
   2136a:	d1f6      	bne.n	2135a <channel_processing_check_and_clear+0x2e>
   2136c:	b949      	cbnz	r1, 21382 <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2136e:	f104 0350 	add.w	r3, r4, #80	; 0x50
   21372:	009b      	lsls	r3, r3, #2
   21374:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21376:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2137a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2137e:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21380:	b123      	cbz	r3, 2138c <channel_processing_check_and_clear+0x60>
			event_clear(chan);
   21382:	4620      	mov	r0, r4
   21384:	f00c fbbe 	bl	2db04 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21388:	2401      	movs	r4, #1
   2138a:	e7dd      	b.n	21348 <channel_processing_check_and_clear+0x1c>
   2138c:	2400      	movs	r4, #0
   2138e:	e7db      	b.n	21348 <channel_processing_check_and_clear+0x1c>
   21390:	40015000 	.word	0x40015000
   21394:	20009c10 	.word	0x20009c10

00021398 <compare_int_unlock>:
	if (key) {
   21398:	b901      	cbnz	r1, 2139c <compare_int_unlock+0x4>
}
   2139a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   2139c:	2301      	movs	r3, #1
   2139e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   213a0:	4a0d      	ldr	r2, [pc, #52]	; (213d8 <compare_int_unlock+0x40>)
   213a2:	e8d2 cfef 	ldaex	ip, [r2]
   213a6:	ea4c 0c03 	orr.w	ip, ip, r3
   213aa:	e8c2 cfe1 	stlex	r1, ip, [r2]
   213ae:	2900      	cmp	r1, #0
   213b0:	d1f7      	bne.n	213a2 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   213b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   213b6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   213b8:	4a08      	ldr	r2, [pc, #32]	; (213dc <compare_int_unlock+0x44>)
   213ba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   213be:	4b08      	ldr	r3, [pc, #32]	; (213e0 <compare_int_unlock+0x48>)
   213c0:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   213c4:	40c3      	lsrs	r3, r0
   213c6:	f013 0f01 	tst.w	r3, #1
   213ca:	d0e6      	beq.n	2139a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   213cc:	4b05      	ldr	r3, [pc, #20]	; (213e4 <compare_int_unlock+0x4c>)
   213ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   213d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   213d6:	e7e0      	b.n	2139a <compare_int_unlock+0x2>
   213d8:	20009c18 	.word	0x20009c18
   213dc:	40015000 	.word	0x40015000
   213e0:	20009c10 	.word	0x20009c10
   213e4:	e000e100 	.word	0xe000e100

000213e8 <sys_clock_timeout_handler>:
{
   213e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   213ec:	4607      	mov	r7, r0
   213ee:	4614      	mov	r4, r2
   213f0:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   213f2:	4610      	mov	r0, r2
   213f4:	4619      	mov	r1, r3
   213f6:	f00c fb91 	bl	2db1c <absolute_time_to_cc>
   213fa:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   213fc:	4b15      	ldr	r3, [pc, #84]	; (21454 <sys_clock_timeout_handler+0x6c>)
   213fe:	681a      	ldr	r2, [r3, #0]
   21400:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   21402:	601c      	str	r4, [r3, #0]
   21404:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   21406:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2140a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2140e:	d309      	bcc.n	21424 <sys_clock_timeout_handler+0x3c>
	return false;
   21410:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   21412:	f006 ff2d 	bl	28270 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   21416:	4638      	mov	r0, r7
   21418:	f7ff ff44 	bl	212a4 <get_comparator>
   2141c:	42a8      	cmp	r0, r5
   2141e:	d00e      	beq.n	2143e <sys_clock_timeout_handler+0x56>
}
   21420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   21424:	4b0c      	ldr	r3, [pc, #48]	; (21458 <sys_clock_timeout_handler+0x70>)
   21426:	681b      	ldr	r3, [r3, #0]
   21428:	0a1a      	lsrs	r2, r3, #8
   2142a:	061b      	lsls	r3, r3, #24
   2142c:	eb15 0803 	adds.w	r8, r5, r3
   21430:	f142 0900 	adc.w	r9, r2, #0
   21434:	4b09      	ldr	r3, [pc, #36]	; (2145c <sys_clock_timeout_handler+0x74>)
   21436:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   2143a:	2401      	movs	r4, #1
   2143c:	e7e9      	b.n	21412 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   2143e:	b11c      	cbz	r4, 21448 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   21440:	4638      	mov	r0, r7
   21442:	f7ff ff37 	bl	212b4 <event_enable>
}
   21446:	e7eb      	b.n	21420 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   21448:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2144c:	4638      	mov	r0, r7
   2144e:	f7ff ff1f 	bl	21290 <set_comparator>
   21452:	e7f5      	b.n	21440 <sys_clock_timeout_handler+0x58>
   21454:	20009518 	.word	0x20009518
   21458:	20009c1c 	.word	0x20009c1c
   2145c:	20009520 	.word	0x20009520

00021460 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21460:	2801      	cmp	r0, #1
   21462:	d804      	bhi.n	2146e <z_nrf_rtc_timer_compare_evt_address_get+0xe>
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   21464:	b2c0      	uxtb	r0, r0
   21466:	0083      	lsls	r3, r0, #2
}
   21468:	4807      	ldr	r0, [pc, #28]	; (21488 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   2146a:	4418      	add	r0, r3
   2146c:	4770      	bx	lr
{
   2146e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21470:	4c06      	ldr	r4, [pc, #24]	; (2148c <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   21472:	237b      	movs	r3, #123	; 0x7b
   21474:	4622      	mov	r2, r4
   21476:	4906      	ldr	r1, [pc, #24]	; (21490 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   21478:	4806      	ldr	r0, [pc, #24]	; (21494 <z_nrf_rtc_timer_compare_evt_address_get+0x34>)
   2147a:	f008 fb36 	bl	29aea <assert_print>
   2147e:	217b      	movs	r1, #123	; 0x7b
   21480:	4620      	mov	r0, r4
   21482:	f008 fb2b 	bl	29adc <assert_post_action>
   21486:	bf00      	nop
   21488:	40015140 	.word	0x40015140
   2148c:	000333e8 	.word	0x000333e8
   21490:	0003341c 	.word	0x0003341c
   21494:	0002fdac 	.word	0x0002fdac

00021498 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21498:	2801      	cmp	r0, #1
   2149a:	d808      	bhi.n	214ae <z_nrf_rtc_timer_capture_task_address_get+0x16>
	if (chan == 0) {
   2149c:	b198      	cbz	r0, 214c6 <z_nrf_rtc_timer_capture_task_address_get+0x2e>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   2149e:	3010      	adds	r0, #16
   214a0:	0080      	lsls	r0, r0, #2
   214a2:	b2c0      	uxtb	r0, r0
    return (uint32_t)p_reg + task;
   214a4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   214a8:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
	return nrf_rtc_task_address_get(RTC, task);
   214ac:	4770      	bx	lr
{
   214ae:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   214b0:	4c06      	ldr	r4, [pc, #24]	; (214cc <z_nrf_rtc_timer_capture_task_address_get+0x34>)
   214b2:	2382      	movs	r3, #130	; 0x82
   214b4:	4622      	mov	r2, r4
   214b6:	4906      	ldr	r1, [pc, #24]	; (214d0 <z_nrf_rtc_timer_capture_task_address_get+0x38>)
   214b8:	4806      	ldr	r0, [pc, #24]	; (214d4 <z_nrf_rtc_timer_capture_task_address_get+0x3c>)
   214ba:	f008 fb16 	bl	29aea <assert_print>
   214be:	2182      	movs	r1, #130	; 0x82
   214c0:	4620      	mov	r0, r4
   214c2:	f008 fb0b 	bl	29adc <assert_post_action>
		return 0;
   214c6:	2000      	movs	r0, #0
}
   214c8:	4770      	bx	lr
   214ca:	bf00      	nop
   214cc:	000333e8 	.word	0x000333e8
   214d0:	0003341c 	.word	0x0003341c
   214d4:	0002fdac 	.word	0x0002fdac

000214d8 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   214d8:	2801      	cmp	r0, #1
   214da:	d805      	bhi.n	214e8 <z_nrf_rtc_timer_compare_read+0x10>
    return p_reg->CC[ch];
   214dc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   214e0:	4b07      	ldr	r3, [pc, #28]	; (21500 <z_nrf_rtc_timer_compare_read+0x28>)
   214e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   214e6:	4770      	bx	lr
{
   214e8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   214ea:	4c06      	ldr	r4, [pc, #24]	; (21504 <z_nrf_rtc_timer_compare_read+0x2c>)
   214ec:	23b8      	movs	r3, #184	; 0xb8
   214ee:	4622      	mov	r2, r4
   214f0:	4905      	ldr	r1, [pc, #20]	; (21508 <z_nrf_rtc_timer_compare_read+0x30>)
   214f2:	4806      	ldr	r0, [pc, #24]	; (2150c <z_nrf_rtc_timer_compare_read+0x34>)
   214f4:	f008 faf9 	bl	29aea <assert_print>
   214f8:	21b8      	movs	r1, #184	; 0xb8
   214fa:	4620      	mov	r0, r4
   214fc:	f008 faee 	bl	29adc <assert_post_action>
   21500:	40015000 	.word	0x40015000
   21504:	000333e8 	.word	0x000333e8
   21508:	0003341c 	.word	0x0003341c
   2150c:	0002fdac 	.word	0x0002fdac

00021510 <z_nrf_rtc_timer_read>:
{
   21510:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   21512:	4b0d      	ldr	r3, [pc, #52]	; (21548 <z_nrf_rtc_timer_read+0x38>)
   21514:	681c      	ldr	r4, [r3, #0]
   21516:	0a25      	lsrs	r5, r4, #8
   21518:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2151a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   2151e:	f7ff fedd 	bl	212dc <counter>
   21522:	4603      	mov	r3, r0
	val += cntr;
   21524:	1900      	adds	r0, r0, r4
   21526:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2152a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2152e:	d20a      	bcs.n	21546 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   21530:	4b06      	ldr	r3, [pc, #24]	; (2154c <z_nrf_rtc_timer_read+0x3c>)
   21532:	e9d3 2300 	ldrd	r2, r3, [r3]
   21536:	4290      	cmp	r0, r2
   21538:	eb71 0303 	sbcs.w	r3, r1, r3
   2153c:	d203      	bcs.n	21546 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   2153e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   21542:	f141 0100 	adc.w	r1, r1, #0
}
   21546:	bd38      	pop	{r3, r4, r5, pc}
   21548:	20009c1c 	.word	0x20009c1c
   2154c:	20009520 	.word	0x20009520

00021550 <compare_set_nolocks>:
{
   21550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21552:	4606      	mov	r6, r0
   21554:	4614      	mov	r4, r2
   21556:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   21558:	4610      	mov	r0, r2
   2155a:	4619      	mov	r1, r3
   2155c:	f00c fade 	bl	2db1c <absolute_time_to_cc>
   21560:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21562:	f7ff ffd5 	bl	21510 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   21566:	42a0      	cmp	r0, r4
   21568:	eb71 0305 	sbcs.w	r3, r1, r5
   2156c:	d21d      	bcs.n	215aa <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   2156e:	1a20      	subs	r0, r4, r0
   21570:	eb65 0101 	sbc.w	r1, r5, r1
   21574:	4b19      	ldr	r3, [pc, #100]	; (215dc <compare_set_nolocks+0x8c>)
   21576:	4298      	cmp	r0, r3
   21578:	f171 0100 	sbcs.w	r1, r1, #0
   2157c:	d22b      	bcs.n	215d6 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
   2157e:	4b18      	ldr	r3, [pc, #96]	; (215e0 <compare_set_nolocks+0x90>)
   21580:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   21584:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   21588:	42ab      	cmp	r3, r5
   2158a:	bf08      	it	eq
   2158c:	42a2      	cmpeq	r2, r4
   2158e:	d016      	beq.n	215be <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   21590:	4639      	mov	r1, r7
   21592:	4630      	mov	r0, r6
   21594:	f00c fad3 	bl	2db3e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   21598:	4639      	mov	r1, r7
   2159a:	f00c faaf 	bl	2dafc <counter_sub>
   2159e:	1900      	adds	r0, r0, r4
   215a0:	f145 0300 	adc.w	r3, r5, #0
   215a4:	4604      	mov	r4, r0
   215a6:	461d      	mov	r5, r3
   215a8:	e009      	b.n	215be <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
   215aa:	2301      	movs	r3, #1
   215ac:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   215ae:	4a0d      	ldr	r2, [pc, #52]	; (215e4 <compare_set_nolocks+0x94>)
   215b0:	e8d2 0fef 	ldaex	r0, [r2]
   215b4:	4318      	orrs	r0, r3
   215b6:	e8c2 0fe1 	stlex	r1, r0, [r2]
   215ba:	2900      	cmp	r1, #0
   215bc:	d1f8      	bne.n	215b0 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
   215be:	4b08      	ldr	r3, [pc, #32]	; (215e0 <compare_set_nolocks+0x90>)
   215c0:	0132      	lsls	r2, r6, #4
   215c2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   215c6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   215ca:	9906      	ldr	r1, [sp, #24]
   215cc:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   215ce:	9b07      	ldr	r3, [sp, #28]
   215d0:	6073      	str	r3, [r6, #4]
	return ret;
   215d2:	2000      	movs	r0, #0
}
   215d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   215d6:	f06f 0015 	mvn.w	r0, #21
   215da:	e7fb      	b.n	215d4 <compare_set_nolocks+0x84>
   215dc:	01000001 	.word	0x01000001
   215e0:	200094f8 	.word	0x200094f8
   215e4:	20009c10 	.word	0x20009c10

000215e8 <z_nrf_rtc_timer_set>:
{
   215e8:	b510      	push	{r4, lr}
   215ea:	b082      	sub	sp, #8
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   215ec:	2801      	cmp	r0, #1
   215ee:	d107      	bne.n	21600 <z_nrf_rtc_timer_set+0x18>
	return compare_set(chan, target_time, handler, user_data);
   215f0:	9905      	ldr	r1, [sp, #20]
   215f2:	9101      	str	r1, [sp, #4]
   215f4:	9904      	ldr	r1, [sp, #16]
   215f6:	9100      	str	r1, [sp, #0]
   215f8:	f00c fadc 	bl	2dbb4 <compare_set>
}
   215fc:	b002      	add	sp, #8
   215fe:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   21600:	4c06      	ldr	r4, [pc, #24]	; (2161c <z_nrf_rtc_timer_set+0x34>)
   21602:	f240 134d 	movw	r3, #333	; 0x14d
   21606:	4622      	mov	r2, r4
   21608:	4905      	ldr	r1, [pc, #20]	; (21620 <z_nrf_rtc_timer_set+0x38>)
   2160a:	4806      	ldr	r0, [pc, #24]	; (21624 <z_nrf_rtc_timer_set+0x3c>)
   2160c:	f008 fa6d 	bl	29aea <assert_print>
   21610:	f240 114d 	movw	r1, #333	; 0x14d
   21614:	4620      	mov	r0, r4
   21616:	f008 fa61 	bl	29adc <assert_post_action>
   2161a:	bf00      	nop
   2161c:	000333e8 	.word	0x000333e8
   21620:	00033438 	.word	0x00033438
   21624:	0002fdac 	.word	0x0002fdac

00021628 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   21628:	b530      	push	{r4, r5, lr}
   2162a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   2162c:	2300      	movs	r3, #0
   2162e:	4a1f      	ldr	r2, [pc, #124]	; (216ac <sys_clock_driver_init+0x84>)
   21630:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   21634:	e00f      	b.n	21656 <sys_clock_driver_init+0x2e>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   21636:	4a1e      	ldr	r2, [pc, #120]	; (216b0 <sys_clock_driver_init+0x88>)
   21638:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2163c:	f04f 30ff 	mov.w	r0, #4294967295
   21640:	f04f 31ff 	mov.w	r1, #4294967295
   21644:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21648:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2164c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   2164e:	4917      	ldr	r1, [pc, #92]	; (216ac <sys_clock_driver_init+0x84>)
   21650:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   21654:	3301      	adds	r3, #1
   21656:	2b01      	cmp	r3, #1
   21658:	dded      	ble.n	21636 <sys_clock_driver_init+0xe>
   2165a:	4c14      	ldr	r4, [pc, #80]	; (216ac <sys_clock_driver_init+0x84>)
   2165c:	2502      	movs	r5, #2
   2165e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21662:	4b14      	ldr	r3, [pc, #80]	; (216b4 <sys_clock_driver_init+0x8c>)
   21664:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   21668:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2166c:	2200      	movs	r2, #0
   2166e:	2101      	movs	r1, #1
   21670:	2015      	movs	r0, #21
   21672:	f7f3 feed 	bl	15450 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   21676:	2015      	movs	r0, #21
   21678:	f009 fc50 	bl	2af1c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2167c:	2301      	movs	r3, #1
   2167e:	60a3      	str	r3, [r4, #8]
   21680:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   21682:	4b0d      	ldr	r3, [pc, #52]	; (216b8 <sys_clock_driver_init+0x90>)
   21684:	2203      	movs	r2, #3
   21686:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   21688:	4b0c      	ldr	r3, [pc, #48]	; (216bc <sys_clock_driver_init+0x94>)
   2168a:	601d      	str	r5, [r3, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2168c:	2400      	movs	r4, #0
   2168e:	9401      	str	r4, [sp, #4]
   21690:	4b0b      	ldr	r3, [pc, #44]	; (216c0 <sys_clock_driver_init+0x98>)
   21692:	9300      	str	r3, [sp, #0]
   21694:	4a0b      	ldr	r2, [pc, #44]	; (216c4 <sys_clock_driver_init+0x9c>)
   21696:	2300      	movs	r3, #0
   21698:	4620      	mov	r0, r4
   2169a:	f00c fa8b 	bl	2dbb4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2169e:	4628      	mov	r0, r5
   216a0:	f7fe fa88 	bl	1fbb4 <z_nrf_clock_control_lf_on>

	return 0;
}
   216a4:	4620      	mov	r0, r4
   216a6:	b003      	add	sp, #12
   216a8:	bd30      	pop	{r4, r5, pc}
   216aa:	bf00      	nop
   216ac:	40015000 	.word	0x40015000
   216b0:	200094f8 	.word	0x200094f8
   216b4:	e000e100 	.word	0xe000e100
   216b8:	20009c18 	.word	0x20009c18
   216bc:	20009c14 	.word	0x20009c14
   216c0:	000213e9 	.word	0x000213e9
   216c4:	007fffff 	.word	0x007fffff

000216c8 <process_channel>:
{
   216c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   216cc:	b082      	sub	sp, #8
   216ce:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   216d0:	f7ff fe2c 	bl	2132c <channel_processing_check_and_clear>
   216d4:	b910      	cbnz	r0, 216dc <process_channel+0x14>
}
   216d6:	b002      	add	sp, #8
   216d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   216dc:	f7ff ff18 	bl	21510 <z_nrf_rtc_timer_read>
   216e0:	4682      	mov	sl, r0
   216e2:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   216e4:	f00c fa1d 	bl	2db22 <full_int_lock>
   216e8:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   216ea:	4b13      	ldr	r3, [pc, #76]	; (21738 <process_channel+0x70>)
   216ec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   216f0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   216f4:	45c2      	cmp	sl, r8
   216f6:	eb75 0509 	sbcs.w	r5, r5, r9
   216fa:	d20b      	bcs.n	21714 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   216fc:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   216fe:	4630      	mov	r0, r6
   21700:	f00c fa18 	bl	2db34 <full_int_unlock>
		if (handler) {
   21704:	2d00      	cmp	r5, #0
   21706:	d0e6      	beq.n	216d6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   21708:	9700      	str	r7, [sp, #0]
   2170a:	4642      	mov	r2, r8
   2170c:	464b      	mov	r3, r9
   2170e:	4620      	mov	r0, r4
   21710:	47a8      	blx	r5
}
   21712:	e7e0      	b.n	216d6 <process_channel+0xe>
			handler = cc_data[chan].callback;
   21714:	4a08      	ldr	r2, [pc, #32]	; (21738 <process_channel+0x70>)
   21716:	0123      	lsls	r3, r4, #4
   21718:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   2171c:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   2171e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   21720:	2000      	movs	r0, #0
   21722:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   21724:	f04f 32ff 	mov.w	r2, #4294967295
   21728:	f04f 33ff 	mov.w	r3, #4294967295
   2172c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   21730:	4620      	mov	r0, r4
   21732:	f7ff fdc9 	bl	212c8 <event_disable>
   21736:	e7e2      	b.n	216fe <process_channel+0x36>
   21738:	200094f8 	.word	0x200094f8

0002173c <rtc_nrf_isr>:
{
   2173c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   2173e:	4b0e      	ldr	r3, [pc, #56]	; (21778 <rtc_nrf_isr+0x3c>)
   21740:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   21744:	f013 0f02 	tst.w	r3, #2
   21748:	d00d      	beq.n	21766 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2174a:	4b0b      	ldr	r3, [pc, #44]	; (21778 <rtc_nrf_isr+0x3c>)
   2174c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   21750:	b14b      	cbz	r3, 21766 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21752:	4b09      	ldr	r3, [pc, #36]	; (21778 <rtc_nrf_isr+0x3c>)
   21754:	2200      	movs	r2, #0
   21756:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2175a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   2175e:	4a07      	ldr	r2, [pc, #28]	; (2177c <rtc_nrf_isr+0x40>)
   21760:	6813      	ldr	r3, [r2, #0]
   21762:	3301      	adds	r3, #1
   21764:	6013      	str	r3, [r2, #0]
{
   21766:	2400      	movs	r4, #0
   21768:	e003      	b.n	21772 <rtc_nrf_isr+0x36>
		process_channel(chan);
   2176a:	4620      	mov	r0, r4
   2176c:	f7ff ffac 	bl	216c8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   21770:	3401      	adds	r4, #1
   21772:	2c01      	cmp	r4, #1
   21774:	ddf9      	ble.n	2176a <rtc_nrf_isr+0x2e>
}
   21776:	bd10      	pop	{r4, pc}
   21778:	40015000 	.word	0x40015000
   2177c:	20009c1c 	.word	0x20009c1c

00021780 <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   21780:	4b12      	ldr	r3, [pc, #72]	; (217cc <z_nrf_rtc_timer_chan_alloc+0x4c>)
   21782:	6818      	ldr	r0, [r3, #0]
   21784:	b1f0      	cbz	r0, 217c4 <z_nrf_rtc_timer_chan_alloc+0x44>
{
   21786:	b500      	push	{lr}
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   21788:	fab0 f080 	clz	r0, r0
   2178c:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   21790:	2301      	movs	r3, #1
   21792:	4083      	lsls	r3, r0
   21794:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21796:	490d      	ldr	r1, [pc, #52]	; (217cc <z_nrf_rtc_timer_chan_alloc+0x4c>)
   21798:	e8d1 2fef 	ldaex	r2, [r1]
   2179c:	ea02 0c03 	and.w	ip, r2, r3
   217a0:	e8c1 cfee 	stlex	lr, ip, [r1]
   217a4:	f1be 0f00 	cmp.w	lr, #0
   217a8:	d1f6      	bne.n	21798 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   217aa:	fa22 f300 	lsr.w	r3, r2, r0
   217ae:	f013 0f01 	tst.w	r3, #1
   217b2:	d105      	bne.n	217c0 <z_nrf_rtc_timer_chan_alloc+0x40>
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   217b4:	4b05      	ldr	r3, [pc, #20]	; (217cc <z_nrf_rtc_timer_chan_alloc+0x4c>)
   217b6:	6818      	ldr	r0, [r3, #0]
   217b8:	2800      	cmp	r0, #0
   217ba:	d1e5      	bne.n	21788 <z_nrf_rtc_timer_chan_alloc+0x8>
			return -ENOMEM;
   217bc:	f06f 000b 	mvn.w	r0, #11
}
   217c0:	f85d fb04 	ldr.w	pc, [sp], #4
			return -ENOMEM;
   217c4:	f06f 000b 	mvn.w	r0, #11
}
   217c8:	4770      	bx	lr
   217ca:	bf00      	nop
   217cc:	20009c14 	.word	0x20009c14

000217d0 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   217d0:	2801      	cmp	r0, #1
   217d2:	d10a      	bne.n	217ea <z_nrf_rtc_timer_chan_free+0x1a>
	atomic_or(&alloc_mask, BIT(chan));
   217d4:	2301      	movs	r3, #1
   217d6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   217d8:	4a0b      	ldr	r2, [pc, #44]	; (21808 <z_nrf_rtc_timer_chan_free+0x38>)
   217da:	e8d2 0fef 	ldaex	r0, [r2]
   217de:	4318      	orrs	r0, r3
   217e0:	e8c2 0fe1 	stlex	r1, r0, [r2]
   217e4:	2900      	cmp	r1, #0
   217e6:	d1f8      	bne.n	217da <z_nrf_rtc_timer_chan_free+0xa>
   217e8:	4770      	bx	lr
{
   217ea:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   217ec:	4c07      	ldr	r4, [pc, #28]	; (2180c <z_nrf_rtc_timer_chan_free+0x3c>)
   217ee:	f240 231b 	movw	r3, #539	; 0x21b
   217f2:	4622      	mov	r2, r4
   217f4:	4906      	ldr	r1, [pc, #24]	; (21810 <z_nrf_rtc_timer_chan_free+0x40>)
   217f6:	4807      	ldr	r0, [pc, #28]	; (21814 <z_nrf_rtc_timer_chan_free+0x44>)
   217f8:	f008 f977 	bl	29aea <assert_print>
   217fc:	f240 211b 	movw	r1, #539	; 0x21b
   21800:	4620      	mov	r0, r4
   21802:	f008 f96b 	bl	29adc <assert_post_action>
   21806:	bf00      	nop
   21808:	20009c14 	.word	0x20009c14
   2180c:	000333e8 	.word	0x000333e8
   21810:	00033438 	.word	0x00033438
   21814:	0002fdac 	.word	0x0002fdac

00021818 <sys_clock_set_timeout>:
{
   21818:	b510      	push	{r4, lr}
   2181a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2181c:	f1b0 3fff 	cmp.w	r0, #4294967295
   21820:	d006      	beq.n	21830 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21822:	2801      	cmp	r0, #1
   21824:	dd06      	ble.n	21834 <sys_clock_set_timeout+0x1c>
   21826:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2182a:	da05      	bge.n	21838 <sys_clock_set_timeout+0x20>
   2182c:	1e44      	subs	r4, r0, #1
   2182e:	e004      	b.n	2183a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   21830:	480f      	ldr	r0, [pc, #60]	; (21870 <sys_clock_set_timeout+0x58>)
   21832:	e7f8      	b.n	21826 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21834:	2400      	movs	r4, #0
   21836:	e000      	b.n	2183a <sys_clock_set_timeout+0x22>
   21838:	4c0d      	ldr	r4, [pc, #52]	; (21870 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2183a:	f7ff fe69 	bl	21510 <z_nrf_rtc_timer_read>
   2183e:	4b0d      	ldr	r3, [pc, #52]	; (21874 <sys_clock_set_timeout+0x5c>)
   21840:	681a      	ldr	r2, [r3, #0]
   21842:	685b      	ldr	r3, [r3, #4]
   21844:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   21846:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2184a:	d300      	bcc.n	2184e <sys_clock_set_timeout+0x36>
		ticks = 0;
   2184c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2184e:	4420      	add	r0, r4
   21850:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
   21852:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   21856:	d300      	bcc.n	2185a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   21858:	4905      	ldr	r1, [pc, #20]	; (21870 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   2185a:	2000      	movs	r0, #0
   2185c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2185e:	9001      	str	r0, [sp, #4]
   21860:	4905      	ldr	r1, [pc, #20]	; (21878 <sys_clock_set_timeout+0x60>)
   21862:	9100      	str	r1, [sp, #0]
   21864:	f143 0300 	adc.w	r3, r3, #0
   21868:	f00c f9a4 	bl	2dbb4 <compare_set>
}
   2186c:	b002      	add	sp, #8
   2186e:	bd10      	pop	{r4, pc}
   21870:	007fffff 	.word	0x007fffff
   21874:	20009518 	.word	0x20009518
   21878:	000213e9 	.word	0x000213e9

0002187c <sys_clock_elapsed>:
{
   2187c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2187e:	f7ff fe47 	bl	21510 <z_nrf_rtc_timer_read>
   21882:	4b02      	ldr	r3, [pc, #8]	; (2188c <sys_clock_elapsed+0x10>)
   21884:	681b      	ldr	r3, [r3, #0]
}
   21886:	1ac0      	subs	r0, r0, r3
   21888:	bd08      	pop	{r3, pc}
   2188a:	bf00      	nop
   2188c:	20009518 	.word	0x20009518

00021890 <nrf_gpio_pin_port_decode>:
{
   21890:	b538      	push	{r3, r4, r5, lr}
   21892:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21894:	6804      	ldr	r4, [r0, #0]
   21896:	4620      	mov	r0, r4
   21898:	f00c f9c3 	bl	2dc22 <nrf_gpio_pin_present_check>
   2189c:	b140      	cbz	r0, 218b0 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   2189e:	f004 031f 	and.w	r3, r4, #31
   218a2:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   218a4:	0964      	lsrs	r4, r4, #5
   218a6:	d01d      	beq.n	218e4 <nrf_gpio_pin_port_decode+0x54>
   218a8:	2c01      	cmp	r4, #1
   218aa:	d10e      	bne.n	218ca <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   218ac:	480e      	ldr	r0, [pc, #56]	; (218e8 <nrf_gpio_pin_port_decode+0x58>)
}
   218ae:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   218b0:	4c0e      	ldr	r4, [pc, #56]	; (218ec <nrf_gpio_pin_port_decode+0x5c>)
   218b2:	f240 2347 	movw	r3, #583	; 0x247
   218b6:	4622      	mov	r2, r4
   218b8:	490d      	ldr	r1, [pc, #52]	; (218f0 <nrf_gpio_pin_port_decode+0x60>)
   218ba:	480e      	ldr	r0, [pc, #56]	; (218f4 <nrf_gpio_pin_port_decode+0x64>)
   218bc:	f008 f915 	bl	29aea <assert_print>
   218c0:	f240 2147 	movw	r1, #583	; 0x247
   218c4:	4620      	mov	r0, r4
   218c6:	f008 f909 	bl	29adc <assert_post_action>
            NRFX_ASSERT(0);
   218ca:	4c08      	ldr	r4, [pc, #32]	; (218ec <nrf_gpio_pin_port_decode+0x5c>)
   218cc:	f44f 7313 	mov.w	r3, #588	; 0x24c
   218d0:	4622      	mov	r2, r4
   218d2:	4909      	ldr	r1, [pc, #36]	; (218f8 <nrf_gpio_pin_port_decode+0x68>)
   218d4:	4807      	ldr	r0, [pc, #28]	; (218f4 <nrf_gpio_pin_port_decode+0x64>)
   218d6:	f008 f908 	bl	29aea <assert_print>
   218da:	f44f 7113 	mov.w	r1, #588	; 0x24c
   218de:	4620      	mov	r0, r4
   218e0:	f008 f8fc 	bl	29adc <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   218e4:	4805      	ldr	r0, [pc, #20]	; (218fc <nrf_gpio_pin_port_decode+0x6c>)
   218e6:	e7e2      	b.n	218ae <nrf_gpio_pin_port_decode+0x1e>
   218e8:	40842800 	.word	0x40842800
   218ec:	00032e28 	.word	0x00032e28
   218f0:	00032e5c 	.word	0x00032e5c
   218f4:	0002fdac 	.word	0x0002fdac
   218f8:	000337ec 	.word	0x000337ec
   218fc:	40842500 	.word	0x40842500

00021900 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   21900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21904:	b085      	sub	sp, #20
   21906:	4607      	mov	r7, r0
   21908:	468b      	mov	fp, r1
   2190a:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2190c:	2400      	movs	r4, #0
   2190e:	e022      	b.n	21956 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   21910:	f04f 35ff 	mov.w	r5, #4294967295
   21914:	e02c      	b.n	21970 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   21916:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2191a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2191c:	9603      	str	r6, [sp, #12]
			write = 1U;
   2191e:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   21920:	2d7f      	cmp	r5, #127	; 0x7f
   21922:	d016      	beq.n	21952 <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
   21924:	f1b1 3fff 	cmp.w	r1, #4294967295
   21928:	f040 810e 	bne.w	21b48 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2192c:	f857 300a 	ldr.w	r3, [r7, sl]
   21930:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   21934:	d002      	beq.n	2193c <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21936:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   21938:	2200      	movs	r2, #0
   2193a:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2193c:	2200      	movs	r2, #0
   2193e:	9201      	str	r2, [sp, #4]
   21940:	f8cd 9000 	str.w	r9, [sp]
   21944:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   21948:	4632      	mov	r2, r6
   2194a:	9903      	ldr	r1, [sp, #12]
   2194c:	4628      	mov	r0, r5
   2194e:	f00c f99c 	bl	2dc8a <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   21952:	3401      	adds	r4, #1
   21954:	b2e4      	uxtb	r4, r4
   21956:	455c      	cmp	r4, fp
   21958:	f080 80fa 	bcs.w	21b50 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2195c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   21960:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   21964:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   21968:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   2196c:	2d7f      	cmp	r5, #127	; 0x7f
   2196e:	d0cf      	beq.n	21910 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   21970:	0c1b      	lsrs	r3, r3, #16
   21972:	2b22      	cmp	r3, #34	; 0x22
   21974:	f200 80ee 	bhi.w	21b54 <pinctrl_configure_pins+0x254>
   21978:	a201      	add	r2, pc, #4	; (adr r2, 21980 <pinctrl_configure_pins+0x80>)
   2197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2197e:	bf00      	nop
   21980:	00021917 	.word	0x00021917
   21984:	00021a0d 	.word	0x00021a0d
   21988:	00021a1b 	.word	0x00021a1b
   2198c:	00021a27 	.word	0x00021a27
   21990:	00021a35 	.word	0x00021a35
   21994:	00021a43 	.word	0x00021a43
   21998:	00021a4f 	.word	0x00021a4f
   2199c:	00021b55 	.word	0x00021b55
   219a0:	00021b55 	.word	0x00021b55
   219a4:	00021b55 	.word	0x00021b55
   219a8:	00021b55 	.word	0x00021b55
   219ac:	00021a5d 	.word	0x00021a5d
   219b0:	00021a71 	.word	0x00021a71
   219b4:	00021b55 	.word	0x00021b55
   219b8:	00021b55 	.word	0x00021b55
   219bc:	00021b55 	.word	0x00021b55
   219c0:	00021b55 	.word	0x00021b55
   219c4:	00021b55 	.word	0x00021b55
   219c8:	00021b55 	.word	0x00021b55
   219cc:	00021b55 	.word	0x00021b55
   219d0:	00021b55 	.word	0x00021b55
   219d4:	00021b55 	.word	0x00021b55
   219d8:	00021a85 	.word	0x00021a85
   219dc:	00021a97 	.word	0x00021a97
   219e0:	00021aa9 	.word	0x00021aa9
   219e4:	00021abb 	.word	0x00021abb
   219e8:	00021b55 	.word	0x00021b55
   219ec:	00021b55 	.word	0x00021b55
   219f0:	00021b55 	.word	0x00021b55
   219f4:	00021acd 	.word	0x00021acd
   219f8:	00021add 	.word	0x00021add
   219fc:	00021ae9 	.word	0x00021ae9
   21a00:	00021af9 	.word	0x00021af9
   21a04:	00021b09 	.word	0x00021b09
   21a08:	00021b19 	.word	0x00021b19
			NRF_PSEL_UART(reg, RXD) = pin;
   21a0c:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21a10:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21a12:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   21a14:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21a18:	e782      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
   21a1a:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21a1e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21a20:	9603      	str	r6, [sp, #12]
			write = 1U;
   21a22:	4631      	mov	r1, r6
			break;
   21a24:	e77c      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
   21a26:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21a2a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21a2c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   21a2e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21a32:	e775      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   21a34:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21a38:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21a3a:	2301      	movs	r3, #1
   21a3c:	9303      	str	r3, [sp, #12]
			write = 0U;
   21a3e:	4631      	mov	r1, r6
			break;
   21a40:	e76e      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   21a42:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21a46:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21a48:	9603      	str	r6, [sp, #12]
			write = 0U;
   21a4a:	2100      	movs	r1, #0
			break;
   21a4c:	e768      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   21a4e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21a52:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21a54:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   21a56:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21a5a:	e761      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   21a5c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   21a60:	f1b9 0f00 	cmp.w	r9, #0
   21a64:	d060      	beq.n	21b28 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21a66:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21a68:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   21a6a:	f04f 31ff 	mov.w	r1, #4294967295
   21a6e:	e757      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   21a70:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   21a74:	f1b9 0f00 	cmp.w	r9, #0
   21a78:	d05e      	beq.n	21b38 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21a7a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21a7c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   21a7e:	f04f 31ff 	mov.w	r1, #4294967295
   21a82:	e74d      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   21a84:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   21a88:	f857 100a 	ldr.w	r1, [r7, sl]
   21a8c:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21a90:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21a92:	9603      	str	r6, [sp, #12]
			break;
   21a94:	e744      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   21a96:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   21a9a:	f857 100a 	ldr.w	r1, [r7, sl]
   21a9e:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21aa2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21aa4:	9603      	str	r6, [sp, #12]
			break;
   21aa6:	e73b      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   21aa8:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   21aac:	f857 100a 	ldr.w	r1, [r7, sl]
   21ab0:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21ab4:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21ab6:	9603      	str	r6, [sp, #12]
			break;
   21ab8:	e732      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   21aba:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   21abe:	f857 100a 	ldr.w	r1, [r7, sl]
   21ac2:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21ac6:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21ac8:	9603      	str	r6, [sp, #12]
			break;
   21aca:	e729      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   21acc:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21ad0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21ad2:	2300      	movs	r3, #0
   21ad4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   21ad6:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21ada:	e721      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   21adc:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21ae0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21ae2:	9603      	str	r6, [sp, #12]
			write = 1U;
   21ae4:	4631      	mov	r1, r6
			break;
   21ae6:	e71b      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   21ae8:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21aec:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21aee:	2300      	movs	r3, #0
   21af0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   21af2:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21af6:	e713      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   21af8:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21afc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21afe:	2300      	movs	r3, #0
   21b00:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   21b02:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21b06:	e70b      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   21b08:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21b0c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21b0e:	2300      	movs	r3, #0
   21b10:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   21b12:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21b16:	e703      	b.n	21920 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   21b18:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   21b1c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21b1e:	2300      	movs	r3, #0
   21b20:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   21b22:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   21b26:	e6fb      	b.n	21920 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21b28:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21b2a:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   21b2e:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   21b32:	f04f 0906 	mov.w	r9, #6
   21b36:	e6f3      	b.n	21920 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21b38:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   21b3a:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   21b3e:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   21b42:	f04f 0906 	mov.w	r9, #6
   21b46:	e6eb      	b.n	21920 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
   21b48:	4628      	mov	r0, r5
   21b4a:	f00c f896 	bl	2dc7a <nrf_gpio_pin_write>
   21b4e:	e6ed      	b.n	2192c <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   21b50:	2000      	movs	r0, #0
   21b52:	e001      	b.n	21b58 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
   21b54:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   21b58:	b005      	add	sp, #20
   21b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b5e:	bf00      	nop

00021b60 <nrf_ipc_send_task_get>:
    NRFX_ASSERT(index < IPC_CH_NUM);
   21b60:	280f      	cmp	r0, #15
   21b62:	d803      	bhi.n	21b6c <nrf_ipc_send_task_get+0xc>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   21b64:	0080      	lsls	r0, r0, #2
}
   21b66:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
   21b6a:	4770      	bx	lr
{
   21b6c:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   21b6e:	4c06      	ldr	r4, [pc, #24]	; (21b88 <nrf_ipc_send_task_get+0x28>)
   21b70:	f240 13e1 	movw	r3, #481	; 0x1e1
   21b74:	4622      	mov	r2, r4
   21b76:	4905      	ldr	r1, [pc, #20]	; (21b8c <nrf_ipc_send_task_get+0x2c>)
   21b78:	4805      	ldr	r0, [pc, #20]	; (21b90 <nrf_ipc_send_task_get+0x30>)
   21b7a:	f007 ffb6 	bl	29aea <assert_print>
   21b7e:	f240 11e1 	movw	r1, #481	; 0x1e1
   21b82:	4620      	mov	r0, r4
   21b84:	f007 ffaa 	bl	29adc <assert_post_action>
   21b88:	000302a8 	.word	0x000302a8
   21b8c:	000302dc 	.word	0x000302dc
   21b90:	0002fdac 	.word	0x0002fdac

00021b94 <nrfx_ipc_signal>:
    NRFX_ASSERT(mem_index < NRFX_ARRAY_SIZE(NRF_IPC->GPMEM));
    return nrf_ipc_gpmem_get(NRF_IPC, mem_index);
}

NRFX_STATIC_INLINE void nrfx_ipc_signal(uint8_t send_index)
{
   21b94:	b510      	push	{r4, lr}
    NRFX_ASSERT(send_index < IPC_CONF_NUM);
   21b96:	280f      	cmp	r0, #15
   21b98:	d808      	bhi.n	21bac <nrfx_ipc_signal+0x18>
    nrf_ipc_task_trigger(NRF_IPC, nrf_ipc_send_task_get(send_index));
   21b9a:	f7ff ffe1 	bl	21b60 <nrf_ipc_send_task_get>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21b9e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   21ba2:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
   21ba6:	2301      	movs	r3, #1
   21ba8:	6003      	str	r3, [r0, #0]
}
   21baa:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(send_index < IPC_CONF_NUM);
   21bac:	4c05      	ldr	r4, [pc, #20]	; (21bc4 <nrfx_ipc_signal+0x30>)
   21bae:	23df      	movs	r3, #223	; 0xdf
   21bb0:	4622      	mov	r2, r4
   21bb2:	4905      	ldr	r1, [pc, #20]	; (21bc8 <nrfx_ipc_signal+0x34>)
   21bb4:	4805      	ldr	r0, [pc, #20]	; (21bcc <nrfx_ipc_signal+0x38>)
   21bb6:	f007 ff98 	bl	29aea <assert_print>
   21bba:	21df      	movs	r1, #223	; 0xdf
   21bbc:	4620      	mov	r0, r4
   21bbe:	f007 ff8d 	bl	29adc <assert_post_action>
   21bc2:	bf00      	nop
   21bc4:	00033454 	.word	0x00033454
   21bc8:	00033494 	.word	0x00033494
   21bcc:	0002fdac 	.word	0x0002fdac

00021bd0 <mbox_nrf_set_enabled>:
{
	return IPC_CONF_NUM;
}

static int mbox_nrf_set_enabled(const struct device *dev, uint32_t channel, bool enable)
{
   21bd0:	b530      	push	{r4, r5, lr}
   21bd2:	b089      	sub	sp, #36	; 0x24
   21bd4:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   21bd6:	6905      	ldr	r5, [r0, #16]
	const struct mbox_nrf_conf *conf = dev->config;
   21bd8:	6843      	ldr	r3, [r0, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   21bda:	290f      	cmp	r1, #15
   21bdc:	d806      	bhi.n	21bec <mbox_nrf_set_enabled+0x1c>
   21bde:	681b      	ldr	r3, [r3, #0]
   21be0:	40cb      	lsrs	r3, r1
   21be2:	f013 0f01 	tst.w	r3, #1
   21be6:	d11d      	bne.n	21c24 <mbox_nrf_set_enabled+0x54>
   21be8:	2300      	movs	r3, #0
   21bea:	e000      	b.n	21bee <mbox_nrf_set_enabled+0x1e>
   21bec:	2300      	movs	r3, #0

	if (!is_rx_channel_valid(dev, channel)) {
   21bee:	2b00      	cmp	r3, #0
   21bf0:	d061      	beq.n	21cb6 <mbox_nrf_set_enabled+0xe6>
		return -EINVAL;
	}

	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   21bf2:	b9ca      	cbnz	r2, 21c28 <mbox_nrf_set_enabled+0x58>
   21bf4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   21bf8:	40e3      	lsrs	r3, r4
   21bfa:	f013 0f01 	tst.w	r3, #1
   21bfe:	d05d      	beq.n	21cbc <mbox_nrf_set_enabled+0xec>
	if (enable) {
		data->enabled_mask |= BIT(channel);
		compiler_barrier();
		nrfx_ipc_receive_event_enable(channel);
	} else {
		nrfx_ipc_receive_event_disable(channel);
   21c00:	b2e0      	uxtb	r0, r4
   21c02:	f001 fc1f 	bl	23444 <nrfx_ipc_receive_event_disable>
		compiler_barrier();
		data->enabled_mask &= ~BIT(channel);
   21c06:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   21c0a:	2201      	movs	r2, #1
   21c0c:	40a2      	lsls	r2, r4
   21c0e:	ea23 0302 	bic.w	r3, r3, r2
   21c12:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	}

	if (data->enabled_mask == 0) {
   21c16:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   21c1a:	2b00      	cmp	r3, #0
   21c1c:	d046      	beq.n	21cac <mbox_nrf_set_enabled+0xdc>
		irq_disable(DT_INST_IRQN(0));
	}

	return 0;
   21c1e:	2000      	movs	r0, #0
}
   21c20:	b009      	add	sp, #36	; 0x24
   21c22:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   21c24:	2301      	movs	r3, #1
   21c26:	e7e2      	b.n	21bee <mbox_nrf_set_enabled+0x1e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   21c28:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   21c2c:	40e3      	lsrs	r3, r4
   21c2e:	f013 0f01 	tst.w	r3, #1
   21c32:	d146      	bne.n	21cc2 <mbox_nrf_set_enabled+0xf2>
	if (enable && (data->cb[channel] == NULL)) {
   21c34:	2a00      	cmp	r2, #0
   21c36:	d0e3      	beq.n	21c00 <mbox_nrf_set_enabled+0x30>
   21c38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   21c3c:	b16b      	cbz	r3, 21c5a <mbox_nrf_set_enabled+0x8a>
	if (enable && data->enabled_mask == 0) {
   21c3e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   21c42:	b37b      	cbz	r3, 21ca4 <mbox_nrf_set_enabled+0xd4>
		data->enabled_mask |= BIT(channel);
   21c44:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   21c48:	2201      	movs	r2, #1
   21c4a:	40a2      	lsls	r2, r4
   21c4c:	4313      	orrs	r3, r2
   21c4e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   21c52:	b2e0      	uxtb	r0, r4
   21c54:	f001 fbd6 	bl	23404 <nrfx_ipc_receive_event_enable>
   21c58:	e7dd      	b.n	21c16 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   21c5a:	4b1b      	ldr	r3, [pc, #108]	; (21cc8 <mbox_nrf_set_enabled+0xf8>)
   21c5c:	9307      	str	r3, [sp, #28]
   21c5e:	2202      	movs	r2, #2
   21c60:	f88d 2004 	strb.w	r2, [sp, #4]
   21c64:	2300      	movs	r3, #0
   21c66:	f88d 3005 	strb.w	r3, [sp, #5]
   21c6a:	f88d 3006 	strb.w	r3, [sp, #6]
   21c6e:	f88d 3007 	strb.w	r3, [sp, #7]
   21c72:	9901      	ldr	r1, [sp, #4]
   21c74:	9106      	str	r1, [sp, #24]
   21c76:	4619      	mov	r1, r3
   21c78:	f363 0100 	bfi	r1, r3, #0, #1
   21c7c:	f363 0141 	bfi	r1, r3, #1, #1
   21c80:	f363 0182 	bfi	r1, r3, #2, #1
   21c84:	f363 01c5 	bfi	r1, r3, #3, #3
   21c88:	f362 1188 	bfi	r1, r2, #6, #3
   21c8c:	2208      	movs	r2, #8
   21c8e:	f362 2152 	bfi	r1, r2, #9, #10
   21c92:	f363 41de 	bfi	r1, r3, #19, #12
   21c96:	f363 71df 	bfi	r1, r3, #31, #1
   21c9a:	aa06      	add	r2, sp, #24
   21c9c:	480b      	ldr	r0, [pc, #44]	; (21ccc <mbox_nrf_set_enabled+0xfc>)
   21c9e:	f7f2 f82d 	bl	13cfc <z_impl_z_log_msg_static_create>
   21ca2:	e7cc      	b.n	21c3e <mbox_nrf_set_enabled+0x6e>
		irq_enable(DT_INST_IRQN(0));
   21ca4:	202a      	movs	r0, #42	; 0x2a
   21ca6:	f009 f939 	bl	2af1c <arch_irq_enable>
   21caa:	e7cb      	b.n	21c44 <mbox_nrf_set_enabled+0x74>
		irq_disable(DT_INST_IRQN(0));
   21cac:	202a      	movs	r0, #42	; 0x2a
   21cae:	f009 f93a 	bl	2af26 <arch_irq_disable>
	return 0;
   21cb2:	2000      	movs	r0, #0
   21cb4:	e7b4      	b.n	21c20 <mbox_nrf_set_enabled+0x50>
		return -EINVAL;
   21cb6:	f06f 0015 	mvn.w	r0, #21
   21cba:	e7b1      	b.n	21c20 <mbox_nrf_set_enabled+0x50>
		return -EALREADY;
   21cbc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   21cc0:	e7ae      	b.n	21c20 <mbox_nrf_set_enabled+0x50>
   21cc2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   21cc6:	e7ab      	b.n	21c20 <mbox_nrf_set_enabled+0x50>
   21cc8:	000334a4 	.word	0x000334a4
   21ccc:	0002f888 	.word	0x0002f888

00021cd0 <mbox_nrf_send>:
{
   21cd0:	b530      	push	{r4, r5, lr}
   21cd2:	b089      	sub	sp, #36	; 0x24
   21cd4:	4605      	mov	r5, r0
   21cd6:	460c      	mov	r4, r1
	if (msg) {
   21cd8:	b31a      	cbz	r2, 21d22 <mbox_nrf_send+0x52>
		LOG_WRN("Sending data not supported");
   21cda:	4b1d      	ldr	r3, [pc, #116]	; (21d50 <mbox_nrf_send+0x80>)
   21cdc:	9307      	str	r3, [sp, #28]
   21cde:	2202      	movs	r2, #2
   21ce0:	f88d 2004 	strb.w	r2, [sp, #4]
   21ce4:	2300      	movs	r3, #0
   21ce6:	f88d 3005 	strb.w	r3, [sp, #5]
   21cea:	f88d 3006 	strb.w	r3, [sp, #6]
   21cee:	f88d 3007 	strb.w	r3, [sp, #7]
   21cf2:	9901      	ldr	r1, [sp, #4]
   21cf4:	9106      	str	r1, [sp, #24]
   21cf6:	4619      	mov	r1, r3
   21cf8:	f363 0100 	bfi	r1, r3, #0, #1
   21cfc:	f363 0141 	bfi	r1, r3, #1, #1
   21d00:	f363 0182 	bfi	r1, r3, #2, #1
   21d04:	f363 01c5 	bfi	r1, r3, #3, #3
   21d08:	f362 1188 	bfi	r1, r2, #6, #3
   21d0c:	2208      	movs	r2, #8
   21d0e:	f362 2152 	bfi	r1, r2, #9, #10
   21d12:	f363 41de 	bfi	r1, r3, #19, #12
   21d16:	f363 71df 	bfi	r1, r3, #31, #1
   21d1a:	aa06      	add	r2, sp, #24
   21d1c:	480d      	ldr	r0, [pc, #52]	; (21d54 <mbox_nrf_send+0x84>)
   21d1e:	f7f1 ffed 	bl	13cfc <z_impl_z_log_msg_static_create>
	const struct mbox_nrf_conf *conf = dev->config;
   21d22:	686b      	ldr	r3, [r5, #4]
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   21d24:	2c0f      	cmp	r4, #15
   21d26:	d806      	bhi.n	21d36 <mbox_nrf_send+0x66>
   21d28:	685b      	ldr	r3, [r3, #4]
   21d2a:	40e3      	lsrs	r3, r4
   21d2c:	f013 0f01 	tst.w	r3, #1
   21d30:	d109      	bne.n	21d46 <mbox_nrf_send+0x76>
   21d32:	2300      	movs	r3, #0
   21d34:	e000      	b.n	21d38 <mbox_nrf_send+0x68>
   21d36:	2300      	movs	r3, #0
	if (!is_tx_channel_valid(dev, channel)) {
   21d38:	b13b      	cbz	r3, 21d4a <mbox_nrf_send+0x7a>
	nrfx_ipc_signal(channel);
   21d3a:	b2e0      	uxtb	r0, r4
   21d3c:	f7ff ff2a 	bl	21b94 <nrfx_ipc_signal>
	return 0;
   21d40:	2000      	movs	r0, #0
}
   21d42:	b009      	add	sp, #36	; 0x24
   21d44:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   21d46:	2301      	movs	r3, #1
   21d48:	e7f6      	b.n	21d38 <mbox_nrf_send+0x68>
		return -EINVAL;
   21d4a:	f06f 0015 	mvn.w	r0, #21
   21d4e:	e7f8      	b.n	21d42 <mbox_nrf_send+0x72>
   21d50:	000334d4 	.word	0x000334d4
   21d54:	0002f888 	.word	0x0002f888

00021d58 <mbox_dispatcher>:
{
   21d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d5a:	b08f      	sub	sp, #60	; 0x3c
   21d5c:	4604      	mov	r4, r0
   21d5e:	460d      	mov	r5, r1
	const struct device *dev = data->dev;
   21d60:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	const struct mbox_nrf_conf *conf = dev->config;
   21d64:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   21d66:	280f      	cmp	r0, #15
   21d68:	d806      	bhi.n	21d78 <mbox_dispatcher+0x20>
   21d6a:	681b      	ldr	r3, [r3, #0]
   21d6c:	40c3      	lsrs	r3, r0
   21d6e:	f013 0f01 	tst.w	r3, #1
   21d72:	d116      	bne.n	21da2 <mbox_dispatcher+0x4a>
   21d74:	2300      	movs	r3, #0
   21d76:	e000      	b.n	21d7a <mbox_dispatcher+0x22>
   21d78:	2300      	movs	r3, #0
	if (!is_rx_channel_valid(dev, channel)) {
   21d7a:	b1a3      	cbz	r3, 21da6 <mbox_dispatcher+0x4e>
	if (!(data->enabled_mask & BIT(channel))) {
   21d7c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   21d80:	40e3      	lsrs	r3, r4
   21d82:	f013 0f01 	tst.w	r3, #1
   21d86:	d033      	beq.n	21df0 <mbox_dispatcher+0x98>
	if (data->cb[channel] != NULL) {
   21d88:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
   21d8c:	b13f      	cbz	r7, 21d9e <mbox_dispatcher+0x46>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   21d8e:	f104 0210 	add.w	r2, r4, #16
   21d92:	2300      	movs	r3, #0
   21d94:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21d98:	4621      	mov	r1, r4
   21d9a:	4630      	mov	r0, r6
   21d9c:	47b8      	blx	r7
}
   21d9e:	b00f      	add	sp, #60	; 0x3c
   21da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   21da2:	2301      	movs	r3, #1
   21da4:	e7e9      	b.n	21d7a <mbox_dispatcher+0x22>
		LOG_WRN("RX event on illegal channel");
   21da6:	4b25      	ldr	r3, [pc, #148]	; (21e3c <mbox_dispatcher+0xe4>)
   21da8:	9307      	str	r3, [sp, #28]
   21daa:	2202      	movs	r2, #2
   21dac:	f88d 2004 	strb.w	r2, [sp, #4]
   21db0:	2300      	movs	r3, #0
   21db2:	f88d 3005 	strb.w	r3, [sp, #5]
   21db6:	f88d 3006 	strb.w	r3, [sp, #6]
   21dba:	f88d 3007 	strb.w	r3, [sp, #7]
   21dbe:	9901      	ldr	r1, [sp, #4]
   21dc0:	9106      	str	r1, [sp, #24]
   21dc2:	4619      	mov	r1, r3
   21dc4:	f363 0100 	bfi	r1, r3, #0, #1
   21dc8:	f363 0141 	bfi	r1, r3, #1, #1
   21dcc:	f363 0182 	bfi	r1, r3, #2, #1
   21dd0:	f363 01c5 	bfi	r1, r3, #3, #3
   21dd4:	f362 1188 	bfi	r1, r2, #6, #3
   21dd8:	2208      	movs	r2, #8
   21dda:	f362 2152 	bfi	r1, r2, #9, #10
   21dde:	f363 41de 	bfi	r1, r3, #19, #12
   21de2:	f363 71df 	bfi	r1, r3, #31, #1
   21de6:	aa06      	add	r2, sp, #24
   21de8:	4815      	ldr	r0, [pc, #84]	; (21e40 <mbox_dispatcher+0xe8>)
   21dea:	f7f1 ff87 	bl	13cfc <z_impl_z_log_msg_static_create>
   21dee:	e7c5      	b.n	21d7c <mbox_dispatcher+0x24>
		LOG_WRN("RX event on disabled channel");
   21df0:	4b14      	ldr	r3, [pc, #80]	; (21e44 <mbox_dispatcher+0xec>)
   21df2:	930d      	str	r3, [sp, #52]	; 0x34
   21df4:	2202      	movs	r2, #2
   21df6:	f88d 2004 	strb.w	r2, [sp, #4]
   21dfa:	2300      	movs	r3, #0
   21dfc:	f88d 3005 	strb.w	r3, [sp, #5]
   21e00:	f88d 3006 	strb.w	r3, [sp, #6]
   21e04:	f88d 3007 	strb.w	r3, [sp, #7]
   21e08:	9901      	ldr	r1, [sp, #4]
   21e0a:	910c      	str	r1, [sp, #48]	; 0x30
   21e0c:	4619      	mov	r1, r3
   21e0e:	f363 0100 	bfi	r1, r3, #0, #1
   21e12:	f363 0141 	bfi	r1, r3, #1, #1
   21e16:	f363 0182 	bfi	r1, r3, #2, #1
   21e1a:	f363 01c5 	bfi	r1, r3, #3, #3
   21e1e:	f362 1188 	bfi	r1, r2, #6, #3
   21e22:	2208      	movs	r2, #8
   21e24:	f362 2152 	bfi	r1, r2, #9, #10
   21e28:	f363 41de 	bfi	r1, r3, #19, #12
   21e2c:	f363 71df 	bfi	r1, r3, #31, #1
   21e30:	aa0c      	add	r2, sp, #48	; 0x30
   21e32:	4803      	ldr	r0, [pc, #12]	; (21e40 <mbox_dispatcher+0xe8>)
   21e34:	f7f1 ff62 	bl	13cfc <z_impl_z_log_msg_static_create>
   21e38:	e7a6      	b.n	21d88 <mbox_dispatcher+0x30>
   21e3a:	bf00      	nop
   21e3c:	000334f0 	.word	0x000334f0
   21e40:	0002f888 	.word	0x0002f888
   21e44:	0003350c 	.word	0x0003350c

00021e48 <enable_dt_channels>:

static void enable_dt_channels(const struct device *dev)
{
   21e48:	b510      	push	{r4, lr}
   21e4a:	b0ae      	sub	sp, #184	; 0xb8
	const struct mbox_nrf_conf *conf = dev->config;
   21e4c:	6844      	ldr	r4, [r0, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   21e4e:	2284      	movs	r2, #132	; 0x84
   21e50:	2100      	movs	r1, #0
   21e52:	a801      	add	r0, sp, #4
   21e54:	f009 f99f 	bl	2b196 <memset>

	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   21e58:	6863      	ldr	r3, [r4, #4]
   21e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   21e5e:	d206      	bcs.n	21e6e <enable_dt_channels+0x26>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
	}

	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   21e60:	6823      	ldr	r3, [r4, #0]
   21e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   21e66:	d227      	bcs.n	21eb8 <enable_dt_channels+0x70>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
	}

	/* Enable the interrupts on .set_enabled() only */
	ch_config.receive_events_enabled = 0;
   21e68:	2300      	movs	r3, #0
   21e6a:	9321      	str	r3, [sp, #132]	; 0x84

	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   21e6c:	e04a      	b.n	21f04 <enable_dt_channels+0xbc>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   21e6e:	4b36      	ldr	r3, [pc, #216]	; (21f48 <enable_dt_channels+0x100>)
   21e70:	9327      	str	r3, [sp, #156]	; 0x9c
   21e72:	2202      	movs	r2, #2
   21e74:	f88d 2000 	strb.w	r2, [sp]
   21e78:	2300      	movs	r3, #0
   21e7a:	f88d 3001 	strb.w	r3, [sp, #1]
   21e7e:	f88d 3002 	strb.w	r3, [sp, #2]
   21e82:	f88d 3003 	strb.w	r3, [sp, #3]
   21e86:	9900      	ldr	r1, [sp, #0]
   21e88:	9126      	str	r1, [sp, #152]	; 0x98
   21e8a:	4619      	mov	r1, r3
   21e8c:	f363 0100 	bfi	r1, r3, #0, #1
   21e90:	f363 0141 	bfi	r1, r3, #1, #1
   21e94:	f363 0182 	bfi	r1, r3, #2, #1
   21e98:	f363 01c5 	bfi	r1, r3, #3, #3
   21e9c:	f362 1188 	bfi	r1, r2, #6, #3
   21ea0:	2208      	movs	r2, #8
   21ea2:	f362 2152 	bfi	r1, r2, #9, #10
   21ea6:	f363 41de 	bfi	r1, r3, #19, #12
   21eaa:	f363 71df 	bfi	r1, r3, #31, #1
   21eae:	aa26      	add	r2, sp, #152	; 0x98
   21eb0:	4826      	ldr	r0, [pc, #152]	; (21f4c <enable_dt_channels+0x104>)
   21eb2:	f7f1 ff23 	bl	13cfc <z_impl_z_log_msg_static_create>
   21eb6:	e7d3      	b.n	21e60 <enable_dt_channels+0x18>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   21eb8:	4b25      	ldr	r3, [pc, #148]	; (21f50 <enable_dt_channels+0x108>)
   21eba:	932d      	str	r3, [sp, #180]	; 0xb4
   21ebc:	2202      	movs	r2, #2
   21ebe:	f88d 2000 	strb.w	r2, [sp]
   21ec2:	2300      	movs	r3, #0
   21ec4:	f88d 3001 	strb.w	r3, [sp, #1]
   21ec8:	f88d 3002 	strb.w	r3, [sp, #2]
   21ecc:	f88d 3003 	strb.w	r3, [sp, #3]
   21ed0:	9900      	ldr	r1, [sp, #0]
   21ed2:	912c      	str	r1, [sp, #176]	; 0xb0
   21ed4:	4619      	mov	r1, r3
   21ed6:	f363 0100 	bfi	r1, r3, #0, #1
   21eda:	f363 0141 	bfi	r1, r3, #1, #1
   21ede:	f363 0182 	bfi	r1, r3, #2, #1
   21ee2:	f363 01c5 	bfi	r1, r3, #3, #3
   21ee6:	f362 1188 	bfi	r1, r2, #6, #3
   21eea:	2208      	movs	r2, #8
   21eec:	f362 2152 	bfi	r1, r2, #9, #10
   21ef0:	f363 41de 	bfi	r1, r3, #19, #12
   21ef4:	f363 71df 	bfi	r1, r3, #31, #1
   21ef8:	aa2c      	add	r2, sp, #176	; 0xb0
   21efa:	4814      	ldr	r0, [pc, #80]	; (21f4c <enable_dt_channels+0x104>)
   21efc:	f7f1 fefe 	bl	13cfc <z_impl_z_log_msg_static_create>
   21f00:	e7b2      	b.n	21e68 <enable_dt_channels+0x20>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   21f02:	3301      	adds	r3, #1
   21f04:	2b0f      	cmp	r3, #15
   21f06:	d81a      	bhi.n	21f3e <enable_dt_channels+0xf6>
		if (conf->tx_mask & BIT(ch)) {
   21f08:	6862      	ldr	r2, [r4, #4]
   21f0a:	40da      	lsrs	r2, r3
   21f0c:	f012 0f01 	tst.w	r2, #1
   21f10:	d006      	beq.n	21f20 <enable_dt_channels+0xd8>
			ch_config.send_task_config[ch] = BIT(ch);
   21f12:	2201      	movs	r2, #1
   21f14:	409a      	lsls	r2, r3
   21f16:	a92e      	add	r1, sp, #184	; 0xb8
   21f18:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   21f1c:	f841 2cb4 	str.w	r2, [r1, #-180]
		}

		if (conf->rx_mask & BIT(ch)) {
   21f20:	6822      	ldr	r2, [r4, #0]
   21f22:	40da      	lsrs	r2, r3
   21f24:	f012 0f01 	tst.w	r2, #1
   21f28:	d0eb      	beq.n	21f02 <enable_dt_channels+0xba>
			ch_config.receive_event_config[ch] = BIT(ch);
   21f2a:	2101      	movs	r1, #1
   21f2c:	4099      	lsls	r1, r3
   21f2e:	f103 0210 	add.w	r2, r3, #16
   21f32:	a82e      	add	r0, sp, #184	; 0xb8
   21f34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   21f38:	f842 1cb4 	str.w	r1, [r2, #-180]
   21f3c:	e7e1      	b.n	21f02 <enable_dt_channels+0xba>
		}
	}

	nrfx_ipc_config_load(&ch_config);
   21f3e:	a801      	add	r0, sp, #4
   21f40:	f001 fa14 	bl	2336c <nrfx_ipc_config_load>
}
   21f44:	b02e      	add	sp, #184	; 0xb8
   21f46:	bd10      	pop	{r4, pc}
   21f48:	0003352c 	.word	0x0003352c
   21f4c:	0002f888 	.word	0x0002f888
   21f50:	00033558 	.word	0x00033558

00021f54 <mbox_nrf_init>:

static int mbox_nrf_init(const struct device *dev)
{
   21f54:	b510      	push	{r4, lr}
   21f56:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   21f58:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
   21f5a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   21f5e:	4907      	ldr	r1, [pc, #28]	; (21f7c <mbox_nrf_init+0x28>)
   21f60:	2000      	movs	r0, #0
   21f62:	f001 f9eb 	bl	2333c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   21f66:	2200      	movs	r2, #0
   21f68:	2101      	movs	r1, #1
   21f6a:	202a      	movs	r0, #42	; 0x2a
   21f6c:	f7f3 fa70 	bl	15450 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   21f70:	4620      	mov	r0, r4
   21f72:	f7ff ff69 	bl	21e48 <enable_dt_channels>

	return 0;
}
   21f76:	2000      	movs	r0, #0
   21f78:	bd10      	pop	{r4, pc}
   21f7a:	bf00      	nop
   21f7c:	00021d59 	.word	0x00021d59

00021f80 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   21f80:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
   21f82:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
   21f84:	6846      	ldr	r6, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   21f86:	6904      	ldr	r4, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   21f88:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
   21f8c:	d132      	bne.n	21ff4 <z_impl_gpio_pin_configure+0x74>
   21f8e:	4613      	mov	r3, r2
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   21f90:	f002 0230 	and.w	r2, r2, #48	; 0x30
   21f94:	2a30      	cmp	r2, #48	; 0x30
   21f96:	d03d      	beq.n	22014 <z_impl_gpio_pin_configure+0x94>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   21f98:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   21f9c:	2a02      	cmp	r2, #2
   21f9e:	d049      	beq.n	22034 <z_impl_gpio_pin_configure+0xb4>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   21fa0:	f003 0206 	and.w	r2, r3, #6
   21fa4:	2a04      	cmp	r2, #4
   21fa6:	d055      	beq.n	22054 <z_impl_gpio_pin_configure+0xd4>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   21fa8:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   21fac:	d002      	beq.n	21fb4 <z_impl_gpio_pin_configure+0x34>
   21fae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   21fb2:	d05c      	beq.n	2206e <z_impl_gpio_pin_configure+0xee>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   21fb4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   21fb8:	d069      	beq.n	2208e <z_impl_gpio_pin_configure+0x10e>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   21fba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   21fbe:	d005      	beq.n	21fcc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   21fc0:	b122      	cbz	r2, 21fcc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   21fc2:	f013 0f01 	tst.w	r3, #1
   21fc6:	d001      	beq.n	21fcc <z_impl_gpio_pin_configure+0x4c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   21fc8:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   21fcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   21fd0:	6836      	ldr	r6, [r6, #0]
   21fd2:	f04f 0c01 	mov.w	ip, #1
   21fd6:	fa0c fc01 	lsl.w	ip, ip, r1
   21fda:	ea16 0f0c 	tst.w	r6, ip
   21fde:	d066      	beq.n	220ae <z_impl_gpio_pin_configure+0x12e>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   21fe0:	f013 0f01 	tst.w	r3, #1
   21fe4:	d073      	beq.n	220ce <z_impl_gpio_pin_configure+0x14e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21fe6:	6823      	ldr	r3, [r4, #0]
   21fe8:	ea4c 0303 	orr.w	r3, ip, r3
   21fec:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   21fee:	682b      	ldr	r3, [r5, #0]
   21ff0:	4798      	blx	r3
}
   21ff2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   21ff4:	4c38      	ldr	r4, [pc, #224]	; (220d8 <z_impl_gpio_pin_configure+0x158>)
   21ff6:	f240 23be 	movw	r3, #702	; 0x2be
   21ffa:	4622      	mov	r2, r4
   21ffc:	4937      	ldr	r1, [pc, #220]	; (220dc <z_impl_gpio_pin_configure+0x15c>)
   21ffe:	4838      	ldr	r0, [pc, #224]	; (220e0 <z_impl_gpio_pin_configure+0x160>)
   22000:	f007 fd73 	bl	29aea <assert_print>
   22004:	4837      	ldr	r0, [pc, #220]	; (220e4 <z_impl_gpio_pin_configure+0x164>)
   22006:	f007 fd70 	bl	29aea <assert_print>
   2200a:	f240 21be 	movw	r1, #702	; 0x2be
   2200e:	4620      	mov	r0, r4
   22010:	f007 fd64 	bl	29adc <assert_post_action>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   22014:	4c30      	ldr	r4, [pc, #192]	; (220d8 <z_impl_gpio_pin_configure+0x158>)
   22016:	f240 23c1 	movw	r3, #705	; 0x2c1
   2201a:	4622      	mov	r2, r4
   2201c:	4932      	ldr	r1, [pc, #200]	; (220e8 <z_impl_gpio_pin_configure+0x168>)
   2201e:	4830      	ldr	r0, [pc, #192]	; (220e0 <z_impl_gpio_pin_configure+0x160>)
   22020:	f007 fd63 	bl	29aea <assert_print>
   22024:	4831      	ldr	r0, [pc, #196]	; (220ec <z_impl_gpio_pin_configure+0x16c>)
   22026:	f007 fd60 	bl	29aea <assert_print>
   2202a:	f240 21c1 	movw	r1, #705	; 0x2c1
   2202e:	4620      	mov	r0, r4
   22030:	f007 fd54 	bl	29adc <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   22034:	4c28      	ldr	r4, [pc, #160]	; (220d8 <z_impl_gpio_pin_configure+0x158>)
   22036:	f240 23c5 	movw	r3, #709	; 0x2c5
   2203a:	4622      	mov	r2, r4
   2203c:	492c      	ldr	r1, [pc, #176]	; (220f0 <z_impl_gpio_pin_configure+0x170>)
   2203e:	4828      	ldr	r0, [pc, #160]	; (220e0 <z_impl_gpio_pin_configure+0x160>)
   22040:	f007 fd53 	bl	29aea <assert_print>
   22044:	482b      	ldr	r0, [pc, #172]	; (220f4 <z_impl_gpio_pin_configure+0x174>)
   22046:	f007 fd50 	bl	29aea <assert_print>
   2204a:	f240 21c5 	movw	r1, #709	; 0x2c5
   2204e:	4620      	mov	r0, r4
   22050:	f007 fd44 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   22054:	4c20      	ldr	r4, [pc, #128]	; (220d8 <z_impl_gpio_pin_configure+0x158>)
   22056:	f240 23c9 	movw	r3, #713	; 0x2c9
   2205a:	4622      	mov	r2, r4
   2205c:	4926      	ldr	r1, [pc, #152]	; (220f8 <z_impl_gpio_pin_configure+0x178>)
   2205e:	4820      	ldr	r0, [pc, #128]	; (220e0 <z_impl_gpio_pin_configure+0x160>)
   22060:	f007 fd43 	bl	29aea <assert_print>
   22064:	f240 21c9 	movw	r1, #713	; 0x2c9
   22068:	4620      	mov	r0, r4
   2206a:	f007 fd37 	bl	29adc <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   2206e:	4c1a      	ldr	r4, [pc, #104]	; (220d8 <z_impl_gpio_pin_configure+0x158>)
   22070:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   22074:	4622      	mov	r2, r4
   22076:	4921      	ldr	r1, [pc, #132]	; (220fc <z_impl_gpio_pin_configure+0x17c>)
   22078:	4819      	ldr	r0, [pc, #100]	; (220e0 <z_impl_gpio_pin_configure+0x160>)
   2207a:	f007 fd36 	bl	29aea <assert_print>
   2207e:	4820      	ldr	r0, [pc, #128]	; (22100 <z_impl_gpio_pin_configure+0x180>)
   22080:	f007 fd33 	bl	29aea <assert_print>
   22084:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   22088:	4620      	mov	r0, r4
   2208a:	f007 fd27 	bl	29adc <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2208e:	4c12      	ldr	r4, [pc, #72]	; (220d8 <z_impl_gpio_pin_configure+0x158>)
   22090:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   22094:	4622      	mov	r2, r4
   22096:	491b      	ldr	r1, [pc, #108]	; (22104 <z_impl_gpio_pin_configure+0x184>)
   22098:	4811      	ldr	r0, [pc, #68]	; (220e0 <z_impl_gpio_pin_configure+0x160>)
   2209a:	f007 fd26 	bl	29aea <assert_print>
   2209e:	481a      	ldr	r0, [pc, #104]	; (22108 <z_impl_gpio_pin_configure+0x188>)
   220a0:	f007 fd23 	bl	29aea <assert_print>
   220a4:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   220a8:	4620      	mov	r0, r4
   220aa:	f007 fd17 	bl	29adc <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   220ae:	4c0a      	ldr	r4, [pc, #40]	; (220d8 <z_impl_gpio_pin_configure+0x158>)
   220b0:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   220b4:	4622      	mov	r2, r4
   220b6:	4915      	ldr	r1, [pc, #84]	; (2210c <z_impl_gpio_pin_configure+0x18c>)
   220b8:	4809      	ldr	r0, [pc, #36]	; (220e0 <z_impl_gpio_pin_configure+0x160>)
   220ba:	f007 fd16 	bl	29aea <assert_print>
   220be:	4814      	ldr	r0, [pc, #80]	; (22110 <z_impl_gpio_pin_configure+0x190>)
   220c0:	f007 fd13 	bl	29aea <assert_print>
   220c4:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   220c8:	4620      	mov	r0, r4
   220ca:	f007 fd07 	bl	29adc <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   220ce:	6823      	ldr	r3, [r4, #0]
   220d0:	ea23 030c 	bic.w	r3, r3, ip
   220d4:	6023      	str	r3, [r4, #0]
   220d6:	e78a      	b.n	21fee <z_impl_gpio_pin_configure+0x6e>
   220d8:	000335b4 	.word	0x000335b4
   220dc:	000335e8 	.word	0x000335e8
   220e0:	0002fdac 	.word	0x0002fdac
   220e4:	00033648 	.word	0x00033648
   220e8:	0003366c 	.word	0x0003366c
   220ec:	000336a8 	.word	0x000336a8
   220f0:	000336e8 	.word	0x000336e8
   220f4:	00033720 	.word	0x00033720
   220f8:	00033774 	.word	0x00033774
   220fc:	000337a8 	.word	0x000337a8
   22100:	000337f0 	.word	0x000337f0
   22104:	0003382c 	.word	0x0003382c
   22108:	00033870 	.word	0x00033870
   2210c:	0003389c 	.word	0x0003389c
   22110:	000338dc 	.word	0x000338dc

00022114 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   22114:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
   22116:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   22118:	681c      	ldr	r4, [r3, #0]
   2211a:	2301      	movs	r3, #1
   2211c:	fa03 f101 	lsl.w	r1, r3, r1
   22120:	420c      	tst	r4, r1
   22122:	d004      	beq.n	2212e <gpio_pin_set_raw+0x1a>
		 "Unsupported pin");

	if (value != 0)	{
   22124:	b19a      	cbz	r2, 2214e <gpio_pin_set_raw+0x3a>
	const struct gpio_driver_api *api =
   22126:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   22128:	68db      	ldr	r3, [r3, #12]
   2212a:	4798      	blx	r3
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   2212c:	bd10      	pop	{r4, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2212e:	4c0a      	ldr	r4, [pc, #40]	; (22158 <gpio_pin_set_raw+0x44>)
   22130:	f240 43fe 	movw	r3, #1278	; 0x4fe
   22134:	4622      	mov	r2, r4
   22136:	4909      	ldr	r1, [pc, #36]	; (2215c <gpio_pin_set_raw+0x48>)
   22138:	4809      	ldr	r0, [pc, #36]	; (22160 <gpio_pin_set_raw+0x4c>)
   2213a:	f007 fcd6 	bl	29aea <assert_print>
   2213e:	4809      	ldr	r0, [pc, #36]	; (22164 <gpio_pin_set_raw+0x50>)
   22140:	f007 fcd3 	bl	29aea <assert_print>
   22144:	f240 41fe 	movw	r1, #1278	; 0x4fe
   22148:	4620      	mov	r0, r4
   2214a:	f007 fcc7 	bl	29adc <assert_post_action>
	const struct gpio_driver_api *api =
   2214e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   22150:	691b      	ldr	r3, [r3, #16]
   22152:	4798      	blx	r3
	return ret;
   22154:	e7ea      	b.n	2212c <gpio_pin_set_raw+0x18>
   22156:	bf00      	nop
   22158:	000335b4 	.word	0x000335b4
   2215c:	0003389c 	.word	0x0003389c
   22160:	0002fdac 	.word	0x0002fdac
   22164:	000338dc 	.word	0x000338dc

00022168 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   22168:	b538      	push	{r3, r4, r5, lr}
	__unused const struct gpio_driver_config *const cfg =
   2216a:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   2216c:	6905      	ldr	r5, [r0, #16]
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2216e:	681c      	ldr	r4, [r3, #0]
   22170:	2301      	movs	r3, #1
   22172:	408b      	lsls	r3, r1
   22174:	421c      	tst	r4, r3
   22176:	d008      	beq.n	2218a <gpio_pin_set+0x22>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22178:	682c      	ldr	r4, [r5, #0]
   2217a:	4223      	tst	r3, r4
   2217c:	d002      	beq.n	22184 <gpio_pin_set+0x1c>
		value = (value != 0) ? 0 : 1;
   2217e:	fab2 f282 	clz	r2, r2
   22182:	0952      	lsrs	r2, r2, #5
	}

	return gpio_pin_set_raw(port, pin, value);
   22184:	f7ff ffc6 	bl	22114 <gpio_pin_set_raw>
}
   22188:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2218a:	4c08      	ldr	r4, [pc, #32]	; (221ac <gpio_pin_set+0x44>)
   2218c:	f240 5327 	movw	r3, #1319	; 0x527
   22190:	4622      	mov	r2, r4
   22192:	4907      	ldr	r1, [pc, #28]	; (221b0 <gpio_pin_set+0x48>)
   22194:	4807      	ldr	r0, [pc, #28]	; (221b4 <gpio_pin_set+0x4c>)
   22196:	f007 fca8 	bl	29aea <assert_print>
   2219a:	4807      	ldr	r0, [pc, #28]	; (221b8 <gpio_pin_set+0x50>)
   2219c:	f007 fca5 	bl	29aea <assert_print>
   221a0:	f240 5127 	movw	r1, #1319	; 0x527
   221a4:	4620      	mov	r0, r4
   221a6:	f007 fc99 	bl	29adc <assert_post_action>
   221aa:	bf00      	nop
   221ac:	000335b4 	.word	0x000335b4
   221b0:	0003389c 	.word	0x0003389c
   221b4:	0002fdac 	.word	0x0002fdac
   221b8:	000338dc 	.word	0x000338dc

000221bc <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   221bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   221be:	b089      	sub	sp, #36	; 0x24
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   221c0:	280f      	cmp	r0, #15
   221c2:	d849      	bhi.n	22258 <dk_set_leds_state+0x9c>
   221c4:	4605      	mov	r5, r0
   221c6:	460e      	mov	r6, r1
   221c8:	290f      	cmp	r1, #15
   221ca:	d848      	bhi.n	2225e <dk_set_leds_state+0xa2>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   221cc:	2400      	movs	r4, #0
   221ce:	e00b      	b.n	221e8 <dk_set_leds_state+0x2c>
		int val, err;

		if (BIT(i) & leds_on_mask) {
			val = 1;
   221d0:	2201      	movs	r2, #1
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   221d2:	4b24      	ldr	r3, [pc, #144]	; (22264 <dk_set_leds_state+0xa8>)
   221d4:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   221d8:	7909      	ldrb	r1, [r1, #4]
   221da:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   221de:	f7ff ffc3 	bl	22168 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   221e2:	4607      	mov	r7, r0
   221e4:	b970      	cbnz	r0, 22204 <dk_set_leds_state+0x48>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   221e6:	3401      	adds	r4, #1
   221e8:	2c03      	cmp	r4, #3
   221ea:	d831      	bhi.n	22250 <dk_set_leds_state+0x94>
		if (BIT(i) & leds_on_mask) {
   221ec:	fa25 f304 	lsr.w	r3, r5, r4
   221f0:	f013 0f01 	tst.w	r3, #1
   221f4:	d1ec      	bne.n	221d0 <dk_set_leds_state+0x14>
		} else if (BIT(i) & leds_off_mask) {
   221f6:	fa26 f304 	lsr.w	r3, r6, r4
   221fa:	f013 0f01 	tst.w	r3, #1
   221fe:	d0f2      	beq.n	221e6 <dk_set_leds_state+0x2a>
			val = 0;
   22200:	2200      	movs	r2, #0
   22202:	e7e6      	b.n	221d2 <dk_set_leds_state+0x16>
			LOG_ERR("Cannot write LED gpio");
   22204:	4b18      	ldr	r3, [pc, #96]	; (22268 <dk_set_leds_state+0xac>)
   22206:	9307      	str	r3, [sp, #28]
   22208:	2302      	movs	r3, #2
   2220a:	f88d 3004 	strb.w	r3, [sp, #4]
   2220e:	2300      	movs	r3, #0
   22210:	f88d 3005 	strb.w	r3, [sp, #5]
   22214:	f88d 3006 	strb.w	r3, [sp, #6]
   22218:	f88d 3007 	strb.w	r3, [sp, #7]
   2221c:	9a01      	ldr	r2, [sp, #4]
   2221e:	9206      	str	r2, [sp, #24]
   22220:	4619      	mov	r1, r3
   22222:	f363 0100 	bfi	r1, r3, #0, #1
   22226:	f363 0141 	bfi	r1, r3, #1, #1
   2222a:	f363 0182 	bfi	r1, r3, #2, #1
   2222e:	f363 01c5 	bfi	r1, r3, #3, #3
   22232:	2201      	movs	r2, #1
   22234:	f362 1188 	bfi	r1, r2, #6, #3
   22238:	2208      	movs	r2, #8
   2223a:	f362 2152 	bfi	r1, r2, #9, #10
   2223e:	f363 41de 	bfi	r1, r3, #19, #12
   22242:	f363 71df 	bfi	r1, r3, #31, #1
   22246:	aa06      	add	r2, sp, #24
   22248:	4808      	ldr	r0, [pc, #32]	; (2226c <dk_set_leds_state+0xb0>)
   2224a:	f7f1 fd57 	bl	13cfc <z_impl_z_log_msg_static_create>
			return err;
   2224e:	e000      	b.n	22252 <dk_set_leds_state+0x96>
		}
	}

	return 0;
   22250:	2700      	movs	r7, #0
}
   22252:	4638      	mov	r0, r7
   22254:	b009      	add	sp, #36	; 0x24
   22256:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   22258:	f06f 0715 	mvn.w	r7, #21
   2225c:	e7f9      	b.n	22252 <dk_set_leds_state+0x96>
   2225e:	f06f 0715 	mvn.w	r7, #21
   22262:	e7f6      	b.n	22252 <dk_set_leds_state+0x96>
   22264:	00033940 	.word	0x00033940
   22268:	000338f0 	.word	0x000338f0
   2226c:	0002f858 	.word	0x0002f858

00022270 <dk_leds_init>:
{
   22270:	b530      	push	{r4, r5, lr}
   22272:	b089      	sub	sp, #36	; 0x24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   22274:	2400      	movs	r4, #0
   22276:	2c03      	cmp	r4, #3
   22278:	d830      	bhi.n	222dc <dk_leds_init+0x6c>
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   2227a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   2227e:	481b      	ldr	r0, [pc, #108]	; (222ec <dk_leds_init+0x7c>)
   22280:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   22284:	f00b fd33 	bl	2dcee <gpio_pin_configure_dt>
		if (err) {
   22288:	4605      	mov	r5, r0
   2228a:	b908      	cbnz	r0, 22290 <dk_leds_init+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2228c:	3401      	adds	r4, #1
   2228e:	e7f2      	b.n	22276 <dk_leds_init+0x6>
			LOG_ERR("Cannot configure LED gpio");
   22290:	4b17      	ldr	r3, [pc, #92]	; (222f0 <dk_leds_init+0x80>)
   22292:	9307      	str	r3, [sp, #28]
   22294:	2302      	movs	r3, #2
   22296:	f88d 3004 	strb.w	r3, [sp, #4]
   2229a:	2300      	movs	r3, #0
   2229c:	f88d 3005 	strb.w	r3, [sp, #5]
   222a0:	f88d 3006 	strb.w	r3, [sp, #6]
   222a4:	f88d 3007 	strb.w	r3, [sp, #7]
   222a8:	9a01      	ldr	r2, [sp, #4]
   222aa:	9206      	str	r2, [sp, #24]
   222ac:	4619      	mov	r1, r3
   222ae:	f363 0100 	bfi	r1, r3, #0, #1
   222b2:	f363 0141 	bfi	r1, r3, #1, #1
   222b6:	f363 0182 	bfi	r1, r3, #2, #1
   222ba:	f363 01c5 	bfi	r1, r3, #3, #3
   222be:	2201      	movs	r2, #1
   222c0:	f362 1188 	bfi	r1, r2, #6, #3
   222c4:	2208      	movs	r2, #8
   222c6:	f362 2152 	bfi	r1, r2, #9, #10
   222ca:	f363 41de 	bfi	r1, r3, #19, #12
   222ce:	f363 71df 	bfi	r1, r3, #31, #1
   222d2:	aa06      	add	r2, sp, #24
   222d4:	4807      	ldr	r0, [pc, #28]	; (222f4 <dk_leds_init+0x84>)
   222d6:	f7f1 fd11 	bl	13cfc <z_impl_z_log_msg_static_create>
			return err;
   222da:	e004      	b.n	222e6 <dk_leds_init+0x76>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   222dc:	210f      	movs	r1, #15
   222de:	2000      	movs	r0, #0
   222e0:	f7ff ff6c 	bl	221bc <dk_set_leds_state>
   222e4:	4605      	mov	r5, r0
}
   222e6:	4628      	mov	r0, r5
   222e8:	b009      	add	sp, #36	; 0x24
   222ea:	bd30      	pop	{r4, r5, pc}
   222ec:	00033940 	.word	0x00033940
   222f0:	00033908 	.word	0x00033908
   222f4:	0002f858 	.word	0x0002f858

000222f8 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   222f8:	b510      	push	{r4, lr}
   222fa:	b08e      	sub	sp, #56	; 0x38
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   222fc:	2803      	cmp	r0, #3
   222fe:	d80d      	bhi.n	2231c <dk_set_led+0x24>
   22300:	460a      	mov	r2, r1
   22302:	4b2d      	ldr	r3, [pc, #180]	; (223b8 <dk_set_led+0xc0>)
   22304:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   22308:	7909      	ldrb	r1, [r1, #4]
   2230a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   2230e:	f7ff ff2b 	bl	22168 <gpio_pin_set>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
   22312:	4604      	mov	r4, r0
   22314:	bb50      	cbnz	r0, 2236c <dk_set_led+0x74>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   22316:	4620      	mov	r0, r4
   22318:	b00e      	add	sp, #56	; 0x38
   2231a:	bd10      	pop	{r4, pc}
		LOG_ERR("LED index out of the range");
   2231c:	4b27      	ldr	r3, [pc, #156]	; (223bc <dk_set_led+0xc4>)
   2231e:	930d      	str	r3, [sp, #52]	; 0x34
   22320:	2302      	movs	r3, #2
   22322:	f88d 3004 	strb.w	r3, [sp, #4]
   22326:	2300      	movs	r3, #0
   22328:	f88d 3005 	strb.w	r3, [sp, #5]
   2232c:	f88d 3006 	strb.w	r3, [sp, #6]
   22330:	f88d 3007 	strb.w	r3, [sp, #7]
   22334:	9a01      	ldr	r2, [sp, #4]
   22336:	920c      	str	r2, [sp, #48]	; 0x30
   22338:	4619      	mov	r1, r3
   2233a:	f363 0100 	bfi	r1, r3, #0, #1
   2233e:	f363 0141 	bfi	r1, r3, #1, #1
   22342:	f363 0182 	bfi	r1, r3, #2, #1
   22346:	f363 01c5 	bfi	r1, r3, #3, #3
   2234a:	2201      	movs	r2, #1
   2234c:	f362 1188 	bfi	r1, r2, #6, #3
   22350:	2208      	movs	r2, #8
   22352:	f362 2152 	bfi	r1, r2, #9, #10
   22356:	f363 41de 	bfi	r1, r3, #19, #12
   2235a:	f363 71df 	bfi	r1, r3, #31, #1
   2235e:	aa0c      	add	r2, sp, #48	; 0x30
   22360:	4817      	ldr	r0, [pc, #92]	; (223c0 <dk_set_led+0xc8>)
   22362:	f7f1 fccb 	bl	13cfc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   22366:	f06f 0415 	mvn.w	r4, #21
   2236a:	e7d4      	b.n	22316 <dk_set_led+0x1e>
		LOG_ERR("Cannot write LED gpio");
   2236c:	4b15      	ldr	r3, [pc, #84]	; (223c4 <dk_set_led+0xcc>)
   2236e:	9307      	str	r3, [sp, #28]
   22370:	2302      	movs	r3, #2
   22372:	f88d 3004 	strb.w	r3, [sp, #4]
   22376:	2300      	movs	r3, #0
   22378:	f88d 3005 	strb.w	r3, [sp, #5]
   2237c:	f88d 3006 	strb.w	r3, [sp, #6]
   22380:	f88d 3007 	strb.w	r3, [sp, #7]
   22384:	9a01      	ldr	r2, [sp, #4]
   22386:	9206      	str	r2, [sp, #24]
   22388:	4619      	mov	r1, r3
   2238a:	f363 0100 	bfi	r1, r3, #0, #1
   2238e:	f363 0141 	bfi	r1, r3, #1, #1
   22392:	f363 0182 	bfi	r1, r3, #2, #1
   22396:	f363 01c5 	bfi	r1, r3, #3, #3
   2239a:	2201      	movs	r2, #1
   2239c:	f362 1188 	bfi	r1, r2, #6, #3
   223a0:	2208      	movs	r2, #8
   223a2:	f362 2152 	bfi	r1, r2, #9, #10
   223a6:	f363 41de 	bfi	r1, r3, #19, #12
   223aa:	f363 71df 	bfi	r1, r3, #31, #1
   223ae:	aa06      	add	r2, sp, #24
   223b0:	4803      	ldr	r0, [pc, #12]	; (223c0 <dk_set_led+0xc8>)
   223b2:	f7f1 fca3 	bl	13cfc <z_impl_z_log_msg_static_create>
   223b6:	e7ae      	b.n	22316 <dk_set_led+0x1e>
   223b8:	00033940 	.word	0x00033940
   223bc:	00033924 	.word	0x00033924
   223c0:	0002f858 	.word	0x0002f858
   223c4:	000338f0 	.word	0x000338f0

000223c8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   223c8:	b510      	push	{r4, lr}
   223ca:	b088      	sub	sp, #32
	z_impl_log_panic();
   223cc:	f7f1 fb00 	bl	139d0 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   223d0:	4b14      	ldr	r3, [pc, #80]	; (22424 <k_sys_fatal_error_handler+0x5c>)
   223d2:	9307      	str	r3, [sp, #28]
   223d4:	2302      	movs	r3, #2
   223d6:	f88d 3004 	strb.w	r3, [sp, #4]
   223da:	2400      	movs	r4, #0
   223dc:	f88d 4005 	strb.w	r4, [sp, #5]
   223e0:	f88d 4006 	strb.w	r4, [sp, #6]
   223e4:	f88d 4007 	strb.w	r4, [sp, #7]
   223e8:	9b01      	ldr	r3, [sp, #4]
   223ea:	9306      	str	r3, [sp, #24]
   223ec:	4621      	mov	r1, r4
   223ee:	f364 0100 	bfi	r1, r4, #0, #1
   223f2:	f364 0141 	bfi	r1, r4, #1, #1
   223f6:	f364 0182 	bfi	r1, r4, #2, #1
   223fa:	f364 01c5 	bfi	r1, r4, #3, #3
   223fe:	2301      	movs	r3, #1
   22400:	f363 1188 	bfi	r1, r3, #6, #3
   22404:	2308      	movs	r3, #8
   22406:	f363 2152 	bfi	r1, r3, #9, #10
   2240a:	f364 41de 	bfi	r1, r4, #19, #12
   2240e:	f364 71df 	bfi	r1, r4, #31, #1
   22412:	4623      	mov	r3, r4
   22414:	aa06      	add	r2, sp, #24
   22416:	4804      	ldr	r0, [pc, #16]	; (22428 <k_sys_fatal_error_handler+0x60>)
   22418:	f7f1 fc70 	bl	13cfc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   2241c:	4620      	mov	r0, r4
   2241e:	f008 fdc1 	bl	2afa4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22422:	bf00      	nop
   22424:	00033974 	.word	0x00033974
   22428:	0002f860 	.word	0x0002f860

0002242c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   2242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22430:	b0a2      	sub	sp, #136	; 0x88
   22432:	4604      	mov	r4, r0
   22434:	4688      	mov	r8, r1
   22436:	4615      	mov	r5, r2
   22438:	461e      	mov	r6, r3
   2243a:	4b11      	ldr	r3, [pc, #68]	; (22480 <tfm_ns_interface_dispatch+0x54>)
   2243c:	781f      	ldrb	r7, [r3, #0]
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   2243e:	b13f      	cbz	r7, 22450 <tfm_ns_interface_dispatch+0x24>
	return z_impl_k_mutex_lock(mutex, timeout);
   22440:	f04f 32ff 	mov.w	r2, #4294967295
   22444:	f04f 33ff 	mov.w	r3, #4294967295
   22448:	480e      	ldr	r0, [pc, #56]	; (22484 <tfm_ns_interface_dispatch+0x58>)
   2244a:	f002 ff25 	bl	25298 <z_impl_k_mutex_lock>
		/* TF-M request protected by NS lock */
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   2244e:	b980      	cbnz	r0, 22472 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   22450:	4668      	mov	r0, sp
   22452:	f008 fda5 	bl	2afa0 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   22456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   22458:	4632      	mov	r2, r6
   2245a:	4629      	mov	r1, r5
   2245c:	4640      	mov	r0, r8
   2245e:	47a0      	blx	r4
   22460:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   22462:	4668      	mov	r0, sp
   22464:	f008 fd9d 	bl	2afa2 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   22468:	b92f      	cbnz	r7, 22476 <tfm_ns_interface_dispatch+0x4a>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   2246a:	4620      	mov	r0, r4
   2246c:	b022      	add	sp, #136	; 0x88
   2246e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (int32_t)TFM_ERROR_GENERIC;
   22472:	241f      	movs	r4, #31
   22474:	e7f9      	b.n	2246a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   22476:	4803      	ldr	r0, [pc, #12]	; (22484 <tfm_ns_interface_dispatch+0x58>)
   22478:	f003 f824 	bl	254c4 <z_impl_k_mutex_unlock>
   2247c:	e7f5      	b.n	2246a <tfm_ns_interface_dispatch+0x3e>
   2247e:	bf00      	nop
   22480:	20009d55 	.word	0x20009d55
   22484:	20008548 	.word	0x20008548

00022488 <ns_interface_init>:
#if defined(TFM_PSA_API)
#include "psa_manifest/sid.h"
#endif /* TFM_PSA_API */

static int ns_interface_init(const struct device *arg)
{
   22488:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
   2248a:	f00b fc45 	bl	2dd18 <tfm_ns_interface_init>
   2248e:	b908      	cbnz	r0, 22494 <ns_interface_init+0xc>
		"TF-M NS interface init failed");

	return 0;
}
   22490:	2000      	movs	r0, #0
   22492:	bd10      	pop	{r4, pc}
	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
   22494:	4c06      	ldr	r4, [pc, #24]	; (224b0 <ns_interface_init+0x28>)
   22496:	2359      	movs	r3, #89	; 0x59
   22498:	4622      	mov	r2, r4
   2249a:	4906      	ldr	r1, [pc, #24]	; (224b4 <ns_interface_init+0x2c>)
   2249c:	4806      	ldr	r0, [pc, #24]	; (224b8 <ns_interface_init+0x30>)
   2249e:	f007 fb24 	bl	29aea <assert_print>
   224a2:	4806      	ldr	r0, [pc, #24]	; (224bc <ns_interface_init+0x34>)
   224a4:	f007 fb21 	bl	29aea <assert_print>
   224a8:	2159      	movs	r1, #89	; 0x59
   224aa:	4620      	mov	r0, r4
   224ac:	f007 fb16 	bl	29adc <assert_post_action>
   224b0:	00033994 	.word	0x00033994
   224b4:	000339d8 	.word	0x000339d8
   224b8:	0002fdac 	.word	0x0002fdac
   224bc:	00033a00 	.word	0x00033a00

000224c0 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   224c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   224c2:	b095      	sub	sp, #84	; 0x54
   224c4:	4605      	mov	r5, r0
   224c6:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   224c8:	af07      	add	r7, sp, #28
   224ca:	2634      	movs	r6, #52	; 0x34
   224cc:	4632      	mov	r2, r6
   224ce:	2100      	movs	r1, #0
   224d0:	4638      	mov	r0, r7
   224d2:	f008 fe60 	bl	2b196 <memset>
   224d6:	233f      	movs	r3, #63	; 0x3f
   224d8:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   224da:	9705      	str	r7, [sp, #20]
   224dc:	9606      	str	r6, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   224de:	9503      	str	r5, [sp, #12]
   224e0:	9404      	str	r4, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   224e2:	b914      	cbnz	r4, 224ea <psa_generate_random+0x2a>
        return PSA_SUCCESS;
   224e4:	2000      	movs	r0, #0

    status = API_DISPATCH(tfm_crypto_generate_random,
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   224e6:	b015      	add	sp, #84	; 0x54
   224e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = API_DISPATCH(tfm_crypto_generate_random,
   224ea:	2301      	movs	r3, #1
   224ec:	9301      	str	r3, [sp, #4]
   224ee:	aa03      	add	r2, sp, #12
   224f0:	9200      	str	r2, [sp, #0]
   224f2:	aa05      	add	r2, sp, #20
   224f4:	2100      	movs	r1, #0
   224f6:	4802      	ldr	r0, [pc, #8]	; (22500 <psa_generate_random+0x40>)
   224f8:	f000 f804 	bl	22504 <psa_call>
    return status;
   224fc:	e7f3      	b.n	224e6 <psa_generate_random+0x26>
   224fe:	bf00      	nop
   22500:	40000100 	.word	0x40000100

00022504 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   22504:	b510      	push	{r4, lr}
   22506:	b082      	sub	sp, #8
   22508:	9c05      	ldr	r4, [sp, #20]
    if ((type > INT16_MAX) ||
   2250a:	f501 4c00 	add.w	ip, r1, #32768	; 0x8000
   2250e:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   22512:	d214      	bcs.n	2253e <psa_call+0x3a>
        (type < INT16_MIN) ||
   22514:	2bff      	cmp	r3, #255	; 0xff
   22516:	d815      	bhi.n	22544 <psa_call+0x40>
        (in_len > UINT8_MAX) ||
   22518:	2cff      	cmp	r4, #255	; 0xff
   2251a:	d816      	bhi.n	2254a <psa_call+0x46>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   2251c:	021b      	lsls	r3, r3, #8
   2251e:	fa1f fc83 	uxth.w	ip, r3
   22522:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   22526:	b2e4      	uxtb	r4, r4
    return tfm_ns_interface_dispatch(
   22528:	9b04      	ldr	r3, [sp, #16]
   2252a:	9300      	str	r3, [sp, #0]
   2252c:	4613      	mov	r3, r2
   2252e:	ea41 0204 	orr.w	r2, r1, r4
   22532:	4601      	mov	r1, r0
   22534:	4806      	ldr	r0, [pc, #24]	; (22550 <psa_call+0x4c>)
   22536:	f7ff ff79 	bl	2242c <tfm_ns_interface_dispatch>
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   2253a:	b002      	add	sp, #8
   2253c:	bd10      	pop	{r4, pc}
        return PSA_ERROR_PROGRAMMER_ERROR;
   2253e:	f06f 0080 	mvn.w	r0, #128	; 0x80
   22542:	e7fa      	b.n	2253a <psa_call+0x36>
   22544:	f06f 0080 	mvn.w	r0, #128	; 0x80
   22548:	e7f7      	b.n	2253a <psa_call+0x36>
   2254a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   2254e:	e7f4      	b.n	2253a <psa_call+0x36>
   22550:	0000bc21 	.word	0x0000bc21

00022554 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
   22554:	b500      	push	{lr}
   22556:	b083      	sub	sp, #12
   22558:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   2255a:	2300      	movs	r3, #0
   2255c:	9300      	str	r3, [sp, #0]
   2255e:	4601      	mov	r1, r0
   22560:	4802      	ldr	r0, [pc, #8]	; (2256c <psa_connect+0x18>)
   22562:	f7ff ff63 	bl	2242c <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   22566:	b003      	add	sp, #12
   22568:	f85d fb04 	ldr.w	pc, [sp], #4
   2256c:	0000bc19 	.word	0x0000bc19

00022570 <psa_close>:

void psa_close(psa_handle_t handle)
{
   22570:	b500      	push	{lr}
   22572:	b083      	sub	sp, #12
   22574:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   22576:	2200      	movs	r2, #0
   22578:	9200      	str	r2, [sp, #0]
   2257a:	4613      	mov	r3, r2
   2257c:	4802      	ldr	r0, [pc, #8]	; (22588 <psa_close+0x18>)
   2257e:	f7ff ff55 	bl	2242c <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   22582:	b003      	add	sp, #12
   22584:	f85d fb04 	ldr.w	pc, [sp], #4
   22588:	0000bc11 	.word	0x0000bc11

0002258c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   2258c:	4b04      	ldr	r3, [pc, #16]	; (225a0 <SystemCoreClockUpdate+0x14>)
   2258e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   22592:	f002 0203 	and.w	r2, r2, #3
   22596:	4b03      	ldr	r3, [pc, #12]	; (225a4 <SystemCoreClockUpdate+0x18>)
   22598:	40d3      	lsrs	r3, r2
   2259a:	4a03      	ldr	r2, [pc, #12]	; (225a8 <SystemCoreClockUpdate+0x1c>)
   2259c:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   2259e:	4770      	bx	lr
   225a0:	40005000 	.word	0x40005000
   225a4:	07a12000 	.word	0x07a12000
   225a8:	20008378 	.word	0x20008378

000225ac <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   225ac:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   225ae:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   225b0:	fab4 f384 	clz	r3, r4
   225b4:	f1c3 031f 	rsb	r3, r3, #31
   225b8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   225bc:	2b00      	cmp	r3, #0
   225be:	db12      	blt.n	225e6 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   225c0:	2201      	movs	r2, #1
   225c2:	fa02 f303 	lsl.w	r3, r2, r3
   225c6:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   225ca:	e8d0 2fef 	ldaex	r2, [r0]
   225ce:	42a2      	cmp	r2, r4
   225d0:	d104      	bne.n	225dc <nrfx_flag32_alloc+0x30>
   225d2:	e8c0 3fee 	stlex	lr, r3, [r0]
   225d6:	f1be 0f00 	cmp.w	lr, #0
   225da:	d1f6      	bne.n	225ca <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   225dc:	d1e7      	bne.n	225ae <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   225de:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   225e2:	4802      	ldr	r0, [pc, #8]	; (225ec <nrfx_flag32_alloc+0x40>)
}
   225e4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   225e6:	4802      	ldr	r0, [pc, #8]	; (225f0 <nrfx_flag32_alloc+0x44>)
   225e8:	e7fc      	b.n	225e4 <nrfx_flag32_alloc+0x38>
   225ea:	bf00      	nop
   225ec:	0bad0000 	.word	0x0bad0000
   225f0:	0bad0002 	.word	0x0bad0002

000225f4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   225f4:	6803      	ldr	r3, [r0, #0]
   225f6:	40cb      	lsrs	r3, r1
   225f8:	f013 0f01 	tst.w	r3, #1
   225fc:	d111      	bne.n	22622 <nrfx_flag32_free+0x2e>
{
   225fe:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   22600:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   22602:	2301      	movs	r3, #1
   22604:	408b      	lsls	r3, r1
   22606:	4313      	orrs	r3, r2
   22608:	e8d0 cfef 	ldaex	ip, [r0]
   2260c:	4594      	cmp	ip, r2
   2260e:	d104      	bne.n	2261a <nrfx_flag32_free+0x26>
   22610:	e8c0 3fee 	stlex	lr, r3, [r0]
   22614:	f1be 0f00 	cmp.w	lr, #0
   22618:	d1f6      	bne.n	22608 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2261a:	d1f1      	bne.n	22600 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   2261c:	4802      	ldr	r0, [pc, #8]	; (22628 <nrfx_flag32_free+0x34>)
}
   2261e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   22622:	4802      	ldr	r0, [pc, #8]	; (2262c <nrfx_flag32_free+0x38>)
}
   22624:	4770      	bx	lr
   22626:	bf00      	nop
   22628:	0bad0000 	.word	0x0bad0000
   2262c:	0bad0004 	.word	0x0bad0004

00022630 <nrf_clock_is_running>:
    switch (domain)
   22630:	2903      	cmp	r1, #3
   22632:	d82f      	bhi.n	22694 <nrf_clock_is_running+0x64>
   22634:	e8df f001 	tbb	[pc, r1]
   22638:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
   2263c:	b122      	cbz	r2, 22648 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2263e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   22642:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   22646:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   22648:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   2264c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   22650:	d12e      	bne.n	226b0 <nrf_clock_is_running+0x80>
    return false;
   22652:	2000      	movs	r0, #0
   22654:	4770      	bx	lr
            if (p_clk_src != NULL)
   22656:	b122      	cbz	r2, 22662 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   22658:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2265c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   22660:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   22662:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   22666:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2266a:	d123      	bne.n	226b4 <nrf_clock_is_running+0x84>
    return false;
   2266c:	2000      	movs	r0, #0
   2266e:	4770      	bx	lr
            if (p_clk_src != NULL)
   22670:	b122      	cbz	r2, 2267c <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   22672:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   22676:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2267a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   2267c:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   22680:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   22684:	d118      	bne.n	226b8 <nrf_clock_is_running+0x88>
    return false;
   22686:	2000      	movs	r0, #0
   22688:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   2268a:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   2268e:	f3c0 4000 	ubfx	r0, r0, #16, #1
   22692:	4770      	bx	lr
{
   22694:	b510      	push	{r4, lr}
            NRFX_ASSERT(0);
   22696:	4c09      	ldr	r4, [pc, #36]	; (226bc <nrf_clock_is_running+0x8c>)
   22698:	f240 3347 	movw	r3, #839	; 0x347
   2269c:	4622      	mov	r2, r4
   2269e:	4908      	ldr	r1, [pc, #32]	; (226c0 <nrf_clock_is_running+0x90>)
   226a0:	4808      	ldr	r0, [pc, #32]	; (226c4 <nrf_clock_is_running+0x94>)
   226a2:	f007 fa22 	bl	29aea <assert_print>
   226a6:	f240 3147 	movw	r1, #839	; 0x347
   226aa:	4620      	mov	r0, r4
   226ac:	f007 fa16 	bl	29adc <assert_post_action>
                return true;
   226b0:	2001      	movs	r0, #1
   226b2:	4770      	bx	lr
                return true;
   226b4:	2001      	movs	r0, #1
   226b6:	4770      	bx	lr
                return true;
   226b8:	2001      	movs	r0, #1
}
   226ba:	4770      	bx	lr
   226bc:	00032c70 	.word	0x00032c70
   226c0:	000337ec 	.word	0x000337ec
   226c4:	0002fdac 	.word	0x0002fdac

000226c8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   226c8:	b570      	push	{r4, r5, r6, lr}
   226ca:	b082      	sub	sp, #8
   226cc:	4606      	mov	r6, r0
    switch (domain)
   226ce:	2803      	cmp	r0, #3
   226d0:	d83c      	bhi.n	2274c <clock_stop+0x84>
   226d2:	e8df f000 	tbb	[pc, r0]
   226d6:	1602      	.short	0x1602
   226d8:	2e21      	.short	0x2e21
    p_reg->INTENCLR = mask;
   226da:	4b2d      	ldr	r3, [pc, #180]	; (22790 <clock_stop+0xc8>)
   226dc:	2202      	movs	r2, #2
   226de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   226e2:	2200      	movs	r2, #0
   226e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   226e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   226ec:	2201      	movs	r2, #1
   226ee:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   226f0:	2301      	movs	r3, #1
   226f2:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   226f6:	429e      	cmp	r6, r3
   226f8:	d033      	beq.n	22762 <clock_stop+0x9a>
   226fa:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   226fc:	f242 7410 	movw	r4, #10000	; 0x2710
   22700:	e037      	b.n	22772 <clock_stop+0xaa>
    p_reg->INTENCLR = mask;
   22702:	4b23      	ldr	r3, [pc, #140]	; (22790 <clock_stop+0xc8>)
   22704:	2201      	movs	r2, #1
   22706:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2270a:	2100      	movs	r1, #0
   2270c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   22710:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22714:	605a      	str	r2, [r3, #4]
}
   22716:	e7eb      	b.n	226f0 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   22718:	4b1d      	ldr	r3, [pc, #116]	; (22790 <clock_stop+0xc8>)
   2271a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2271e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22722:	2200      	movs	r2, #0
   22724:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   22728:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2272c:	2201      	movs	r2, #1
   2272e:	625a      	str	r2, [r3, #36]	; 0x24
}
   22730:	e7de      	b.n	226f0 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   22732:	4b17      	ldr	r3, [pc, #92]	; (22790 <clock_stop+0xc8>)
   22734:	f44f 7280 	mov.w	r2, #256	; 0x100
   22738:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2273c:	2200      	movs	r2, #0
   2273e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   22742:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22746:	2201      	movs	r2, #1
   22748:	61da      	str	r2, [r3, #28]
}
   2274a:	e7d1      	b.n	226f0 <clock_stop+0x28>
            NRFX_ASSERT(0);
   2274c:	4c11      	ldr	r4, [pc, #68]	; (22794 <clock_stop+0xcc>)
   2274e:	23d8      	movs	r3, #216	; 0xd8
   22750:	4622      	mov	r2, r4
   22752:	4911      	ldr	r1, [pc, #68]	; (22798 <clock_stop+0xd0>)
   22754:	4811      	ldr	r0, [pc, #68]	; (2279c <clock_stop+0xd4>)
   22756:	f007 f9c8 	bl	29aea <assert_print>
   2275a:	21d8      	movs	r1, #216	; 0xd8
   2275c:	4620      	mov	r0, r4
   2275e:	f007 f9bd 	bl	29adc <assert_post_action>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   22762:	f10d 0507 	add.w	r5, sp, #7
   22766:	e7c9      	b.n	226fc <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   22768:	2001      	movs	r0, #1
   2276a:	f00b fb2c 	bl	2ddc6 <nrfx_busy_wait>
   2276e:	3c01      	subs	r4, #1
   22770:	d00b      	beq.n	2278a <clock_stop+0xc2>
   22772:	462a      	mov	r2, r5
   22774:	4631      	mov	r1, r6
   22776:	4806      	ldr	r0, [pc, #24]	; (22790 <clock_stop+0xc8>)
   22778:	f7ff ff5a 	bl	22630 <nrf_clock_is_running>
   2277c:	b128      	cbz	r0, 2278a <clock_stop+0xc2>
   2277e:	2d00      	cmp	r5, #0
   22780:	d0f2      	beq.n	22768 <clock_stop+0xa0>
   22782:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22786:	2b01      	cmp	r3, #1
   22788:	d0ee      	beq.n	22768 <clock_stop+0xa0>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2278a:	b002      	add	sp, #8
   2278c:	bd70      	pop	{r4, r5, r6, pc}
   2278e:	bf00      	nop
   22790:	40005000 	.word	0x40005000
   22794:	00033a20 	.word	0x00033a20
   22798:	000337ec 	.word	0x000337ec
   2279c:	0002fdac 	.word	0x0002fdac

000227a0 <nrfx_clock_init>:
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);
   227a0:	b140      	cbz	r0, 227b4 <nrfx_clock_init+0x14>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   227a2:	4b0c      	ldr	r3, [pc, #48]	; (227d4 <nrfx_clock_init+0x34>)
   227a4:	791b      	ldrb	r3, [r3, #4]
   227a6:	b99b      	cbnz	r3, 227d0 <nrfx_clock_init+0x30>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   227a8:	4b0a      	ldr	r3, [pc, #40]	; (227d4 <nrfx_clock_init+0x34>)
   227aa:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   227ac:	2201      	movs	r2, #1
   227ae:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   227b0:	4809      	ldr	r0, [pc, #36]	; (227d8 <nrfx_clock_init+0x38>)
   227b2:	4770      	bx	lr
{
   227b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   227b6:	4c09      	ldr	r4, [pc, #36]	; (227dc <nrfx_clock_init+0x3c>)
   227b8:	f240 1315 	movw	r3, #277	; 0x115
   227bc:	4622      	mov	r2, r4
   227be:	4908      	ldr	r1, [pc, #32]	; (227e0 <nrfx_clock_init+0x40>)
   227c0:	4808      	ldr	r0, [pc, #32]	; (227e4 <nrfx_clock_init+0x44>)
   227c2:	f007 f992 	bl	29aea <assert_print>
   227c6:	f240 1115 	movw	r1, #277	; 0x115
   227ca:	4620      	mov	r0, r4
   227cc:	f007 f986 	bl	29adc <assert_post_action>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   227d0:	4805      	ldr	r0, [pc, #20]	; (227e8 <nrfx_clock_init+0x48>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   227d2:	4770      	bx	lr
   227d4:	20009ca8 	.word	0x20009ca8
   227d8:	0bad0000 	.word	0x0bad0000
   227dc:	00033a20 	.word	0x00033a20
   227e0:	00033a60 	.word	0x00033a60
   227e4:	0002fdac 	.word	0x0002fdac
   227e8:	0bad000c 	.word	0x0bad000c

000227ec <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   227ec:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   227ee:	4b0e      	ldr	r3, [pc, #56]	; (22828 <nrfx_clock_enable+0x3c>)
   227f0:	791b      	ldrb	r3, [r3, #4]
   227f2:	b163      	cbz	r3, 2280e <nrfx_clock_enable+0x22>
    nrfx_power_clock_irq_init();
   227f4:	f00b faed 	bl	2ddd2 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   227f8:	f00b fae9 	bl	2ddce <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   227fc:	4b0b      	ldr	r3, [pc, #44]	; (2282c <nrfx_clock_enable+0x40>)
   227fe:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   22802:	2201      	movs	r2, #1
   22804:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   22808:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2280c:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2280e:	4c08      	ldr	r4, [pc, #32]	; (22830 <nrfx_clock_enable+0x44>)
   22810:	f44f 7397 	mov.w	r3, #302	; 0x12e
   22814:	4622      	mov	r2, r4
   22816:	4907      	ldr	r1, [pc, #28]	; (22834 <nrfx_clock_enable+0x48>)
   22818:	4807      	ldr	r0, [pc, #28]	; (22838 <nrfx_clock_enable+0x4c>)
   2281a:	f007 f966 	bl	29aea <assert_print>
   2281e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   22822:	4620      	mov	r0, r4
   22824:	f007 f95a 	bl	29adc <assert_post_action>
   22828:	20009ca8 	.word	0x20009ca8
   2282c:	40005000 	.word	0x40005000
   22830:	00033a20 	.word	0x00033a20
   22834:	00033a70 	.word	0x00033a70
   22838:	0002fdac 	.word	0x0002fdac

0002283c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2283c:	b510      	push	{r4, lr}
   2283e:	b082      	sub	sp, #8
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22840:	4b42      	ldr	r3, [pc, #264]	; (2294c <nrfx_clock_start+0x110>)
   22842:	791b      	ldrb	r3, [r3, #4]
   22844:	b12b      	cbz	r3, 22852 <nrfx_clock_start+0x16>
    switch (domain)
   22846:	2803      	cmp	r0, #3
   22848:	d872      	bhi.n	22930 <nrfx_clock_start+0xf4>
   2284a:	e8df f000 	tbb	[pc, r0]
   2284e:	4b0f      	.short	0x4b0f
   22850:	6457      	.short	0x6457
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22852:	4c3f      	ldr	r4, [pc, #252]	; (22950 <nrfx_clock_start+0x114>)
   22854:	f44f 73b4 	mov.w	r3, #360	; 0x168
   22858:	4622      	mov	r2, r4
   2285a:	493e      	ldr	r1, [pc, #248]	; (22954 <nrfx_clock_start+0x118>)
   2285c:	483e      	ldr	r0, [pc, #248]	; (22958 <nrfx_clock_start+0x11c>)
   2285e:	f007 f944 	bl	29aea <assert_print>
   22862:	f44f 71b4 	mov.w	r1, #360	; 0x168
   22866:	4620      	mov	r0, r4
   22868:	f007 f938 	bl	29adc <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2286c:	4a3b      	ldr	r2, [pc, #236]	; (2295c <nrfx_clock_start+0x120>)
   2286e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   22872:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   22876:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2287a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   2287e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   22882:	d118      	bne.n	228b6 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   22884:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   22888:	f013 0f01 	tst.w	r3, #1
   2288c:	d118      	bne.n	228c0 <nrfx_clock_start+0x84>
                    // LF clock was stopped and modified. Now it will be restarted.
                }
                else
                {
                    // LF clock not active and not started.
                    lfclksrc = clock_initial_lfclksrc_get();
   2288e:	f00b fa9e 	bl	2ddce <clock_initial_lfclksrc_get>
   22892:	f88d 0007 	strb.w	r0, [sp, #7]
                }
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
   22896:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2289a:	4b30      	ldr	r3, [pc, #192]	; (2295c <nrfx_clock_start+0x120>)
   2289c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228a0:	2200      	movs	r2, #0
   228a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   228a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   228aa:	2202      	movs	r2, #2
   228ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228b0:	2201      	movs	r2, #1
   228b2:	609a      	str	r2, [r3, #8]
}
   228b4:	e020      	b.n	228f8 <nrfx_clock_start+0xbc>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   228b6:	f10d 0007 	add.w	r0, sp, #7
   228ba:	f00b fa94 	bl	2dde6 <clock_lfclksrc_tweak>
   228be:	e7ea      	b.n	22896 <nrfx_clock_start+0x5a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   228c0:	4b26      	ldr	r3, [pc, #152]	; (2295c <nrfx_clock_start+0x120>)
   228c2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   228c6:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   228ca:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   228ce:	f10d 0007 	add.w	r0, sp, #7
   228d2:	f00b fa88 	bl	2dde6 <clock_lfclksrc_tweak>
   228d6:	2800      	cmp	r0, #0
   228d8:	d0dd      	beq.n	22896 <nrfx_clock_start+0x5a>
    p_reg->INTENSET = mask;
   228da:	4b20      	ldr	r3, [pc, #128]	; (2295c <nrfx_clock_start+0x120>)
   228dc:	2202      	movs	r2, #2
   228de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   228e2:	e009      	b.n	228f8 <nrfx_clock_start+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228e4:	4b1d      	ldr	r3, [pc, #116]	; (2295c <nrfx_clock_start+0x120>)
   228e6:	2200      	movs	r2, #0
   228e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   228ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   228f0:	2201      	movs	r2, #1
   228f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228f6:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   228f8:	b002      	add	sp, #8
   228fa:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228fc:	4b17      	ldr	r3, [pc, #92]	; (2295c <nrfx_clock_start+0x120>)
   228fe:	2200      	movs	r2, #0
   22900:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   22904:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   22908:	f44f 7200 	mov.w	r2, #512	; 0x200
   2290c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22910:	2201      	movs	r2, #1
   22912:	621a      	str	r2, [r3, #32]
}
   22914:	e7f0      	b.n	228f8 <nrfx_clock_start+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22916:	4b11      	ldr	r3, [pc, #68]	; (2295c <nrfx_clock_start+0x120>)
   22918:	2200      	movs	r2, #0
   2291a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2291e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   22922:	f44f 7280 	mov.w	r2, #256	; 0x100
   22926:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2292a:	2201      	movs	r2, #1
   2292c:	619a      	str	r2, [r3, #24]
}
   2292e:	e7e3      	b.n	228f8 <nrfx_clock_start+0xbc>
            NRFX_ASSERT(0);
   22930:	4c07      	ldr	r4, [pc, #28]	; (22950 <nrfx_clock_start+0x114>)
   22932:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   22936:	4622      	mov	r2, r4
   22938:	4909      	ldr	r1, [pc, #36]	; (22960 <nrfx_clock_start+0x124>)
   2293a:	4807      	ldr	r0, [pc, #28]	; (22958 <nrfx_clock_start+0x11c>)
   2293c:	f007 f8d5 	bl	29aea <assert_print>
   22940:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   22944:	4620      	mov	r0, r4
   22946:	f007 f8c9 	bl	29adc <assert_post_action>
   2294a:	bf00      	nop
   2294c:	20009ca8 	.word	0x20009ca8
   22950:	00033a20 	.word	0x00033a20
   22954:	00033a70 	.word	0x00033a70
   22958:	0002fdac 	.word	0x0002fdac
   2295c:	40005000 	.word	0x40005000
   22960:	000337ec 	.word	0x000337ec

00022964 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   22964:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22966:	4b09      	ldr	r3, [pc, #36]	; (2298c <nrfx_clock_stop+0x28>)
   22968:	791b      	ldrb	r3, [r3, #4]
   2296a:	b113      	cbz	r3, 22972 <nrfx_clock_stop+0xe>
    clock_stop(domain);
   2296c:	f7ff feac 	bl	226c8 <clock_stop>
}
   22970:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22972:	4c07      	ldr	r4, [pc, #28]	; (22990 <nrfx_clock_stop+0x2c>)
   22974:	f240 13ad 	movw	r3, #429	; 0x1ad
   22978:	4622      	mov	r2, r4
   2297a:	4906      	ldr	r1, [pc, #24]	; (22994 <nrfx_clock_stop+0x30>)
   2297c:	4806      	ldr	r0, [pc, #24]	; (22998 <nrfx_clock_stop+0x34>)
   2297e:	f007 f8b4 	bl	29aea <assert_print>
   22982:	f240 11ad 	movw	r1, #429	; 0x1ad
   22986:	4620      	mov	r0, r4
   22988:	f007 f8a8 	bl	29adc <assert_post_action>
   2298c:	20009ca8 	.word	0x20009ca8
   22990:	00033a20 	.word	0x00033a20
   22994:	00033a70 	.word	0x00033a70
   22998:	0002fdac 	.word	0x0002fdac

0002299c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2299c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2299e:	4b2b      	ldr	r3, [pc, #172]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   229a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   229a4:	b15b      	cbz	r3, 229be <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229a6:	4b29      	ldr	r3, [pc, #164]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   229a8:	2000      	movs	r0, #0
   229aa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   229ae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   229b2:	2201      	movs	r2, #1
   229b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   229b8:	4b25      	ldr	r3, [pc, #148]	; (22a50 <nrfx_power_clock_irq_handler+0xb4>)
   229ba:	681b      	ldr	r3, [r3, #0]
   229bc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   229be:	4b23      	ldr	r3, [pc, #140]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   229c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   229c4:	b1ab      	cbz	r3, 229f2 <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229c6:	4b21      	ldr	r3, [pc, #132]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   229c8:	2200      	movs	r2, #0
   229ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   229ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   229d2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   229d6:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   229da:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   229de:	2a01      	cmp	r2, #1
   229e0:	d02c      	beq.n	22a3c <nrfx_power_clock_irq_handler+0xa0>
    p_reg->INTENCLR = mask;
   229e2:	4b1a      	ldr	r3, [pc, #104]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   229e4:	2202      	movs	r2, #2
   229e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   229ea:	4b19      	ldr	r3, [pc, #100]	; (22a50 <nrfx_power_clock_irq_handler+0xb4>)
   229ec:	681b      	ldr	r3, [r3, #0]
   229ee:	2001      	movs	r0, #1
   229f0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   229f2:	4b16      	ldr	r3, [pc, #88]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   229f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   229f8:	b16b      	cbz	r3, 22a16 <nrfx_power_clock_irq_handler+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229fa:	4b14      	ldr	r3, [pc, #80]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   229fc:	2200      	movs	r2, #0
   229fe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   22a02:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   22a06:	f44f 7280 	mov.w	r2, #256	; 0x100
   22a0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   22a0e:	4b10      	ldr	r3, [pc, #64]	; (22a50 <nrfx_power_clock_irq_handler+0xb4>)
   22a10:	681b      	ldr	r3, [r3, #0]
   22a12:	2004      	movs	r0, #4
   22a14:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22a16:	4b0d      	ldr	r3, [pc, #52]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   22a18:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   22a1c:	b16b      	cbz	r3, 22a3a <nrfx_power_clock_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a1e:	4b0b      	ldr	r3, [pc, #44]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   22a20:	2200      	movs	r2, #0
   22a22:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   22a26:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   22a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
   22a2e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   22a32:	4b07      	ldr	r3, [pc, #28]	; (22a50 <nrfx_power_clock_irq_handler+0xb4>)
   22a34:	681b      	ldr	r3, [r3, #0]
   22a36:	2005      	movs	r0, #5
   22a38:	4798      	blx	r3
    }
#endif
}
   22a3a:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   22a3c:	4b03      	ldr	r3, [pc, #12]	; (22a4c <nrfx_power_clock_irq_handler+0xb0>)
   22a3e:	2202      	movs	r2, #2
   22a40:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a44:	2201      	movs	r2, #1
   22a46:	609a      	str	r2, [r3, #8]
}
   22a48:	e7d3      	b.n	229f2 <nrfx_power_clock_irq_handler+0x56>
   22a4a:	bf00      	nop
   22a4c:	40005000 	.word	0x40005000
   22a50:	20009ca8 	.word	0x20009ca8

00022a54 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   22a54:	b508      	push	{r3, lr}
   22a56:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   22a58:	4801      	ldr	r0, [pc, #4]	; (22a60 <nrfx_dppi_channel_alloc+0xc>)
   22a5a:	f7ff fda7 	bl	225ac <nrfx_flag32_alloc>
}
   22a5e:	bd08      	pop	{r3, pc}
   22a60:	2000837c 	.word	0x2000837c

00022a64 <nrfx_dppi_channel_free>:

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
   22a64:	b508      	push	{r3, lr}
   22a66:	4601      	mov	r1, r0
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   22a68:	2301      	movs	r3, #1
   22a6a:	4083      	lsls	r3, r0
    p_reg->CHENCLR = mask;
   22a6c:	4a03      	ldr	r2, [pc, #12]	; (22a7c <nrfx_dppi_channel_free+0x18>)
   22a6e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   22a72:	4803      	ldr	r0, [pc, #12]	; (22a80 <nrfx_dppi_channel_free+0x1c>)
   22a74:	f7ff fdbe 	bl	225f4 <nrfx_flag32_free>
}
   22a78:	bd08      	pop	{r3, pc}
   22a7a:	bf00      	nop
   22a7c:	40017000 	.word	0x40017000
   22a80:	2000837c 	.word	0x2000837c

00022a84 <nrf_gpio_latches_read_and_clear>:
{
   22a84:	b500      	push	{lr}
   22a86:	b083      	sub	sp, #12
   22a88:	4684      	mov	ip, r0
   22a8a:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   22a8c:	4b0c      	ldr	r3, [pc, #48]	; (22ac0 <nrf_gpio_latches_read_and_clear+0x3c>)
   22a8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   22a92:	ab02      	add	r3, sp, #8
   22a94:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   22a98:	4663      	mov	r3, ip
   22a9a:	e009      	b.n	22ab0 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
   22a9c:	a902      	add	r1, sp, #8
   22a9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   22aa2:	f851 1c08 	ldr.w	r1, [r1, #-8]
   22aa6:	6a08      	ldr	r0, [r1, #32]
   22aa8:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   22aac:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
   22aae:	3301      	adds	r3, #1
   22ab0:	eb0c 000e 	add.w	r0, ip, lr
   22ab4:	4298      	cmp	r0, r3
   22ab6:	d8f1      	bhi.n	22a9c <nrf_gpio_latches_read_and_clear+0x18>
}
   22ab8:	b003      	add	sp, #12
   22aba:	f85d fb04 	ldr.w	pc, [sp], #4
   22abe:	bf00      	nop
   22ac0:	0002f9ac 	.word	0x0002f9ac

00022ac4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   22ac4:	3008      	adds	r0, #8
   22ac6:	4b03      	ldr	r3, [pc, #12]	; (22ad4 <pin_in_use+0x10>)
   22ac8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22acc:	f000 0001 	and.w	r0, r0, #1
   22ad0:	4770      	bx	lr
   22ad2:	bf00      	nop
   22ad4:	20008380 	.word	0x20008380

00022ad8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   22ad8:	3008      	adds	r0, #8
   22ada:	4b03      	ldr	r3, [pc, #12]	; (22ae8 <pin_in_use_by_te+0x10>)
   22adc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22ae0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   22ae4:	4770      	bx	lr
   22ae6:	bf00      	nop
   22ae8:	20008380 	.word	0x20008380

00022aec <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   22aec:	3008      	adds	r0, #8
   22aee:	4b04      	ldr	r3, [pc, #16]	; (22b00 <pin_has_trigger+0x14>)
   22af0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22af4:	f010 001c 	ands.w	r0, r0, #28
   22af8:	bf18      	it	ne
   22afa:	2001      	movne	r0, #1
   22afc:	4770      	bx	lr
   22afe:	bf00      	nop
   22b00:	20008380 	.word	0x20008380

00022b04 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22b04:	3008      	adds	r0, #8
   22b06:	4b03      	ldr	r3, [pc, #12]	; (22b14 <pin_is_output+0x10>)
   22b08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22b0c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   22b10:	4770      	bx	lr
   22b12:	bf00      	nop
   22b14:	20008380 	.word	0x20008380

00022b18 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22b18:	3008      	adds	r0, #8
   22b1a:	4b02      	ldr	r3, [pc, #8]	; (22b24 <pin_te_get+0xc>)
   22b1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22b20:	0b40      	lsrs	r0, r0, #13
   22b22:	4770      	bx	lr
   22b24:	20008380 	.word	0x20008380

00022b28 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22b28:	2200      	movs	r2, #0
   22b2a:	e004      	b.n	22b36 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   22b2c:	f04f 33ff 	mov.w	r3, #4294967295
   22b30:	4283      	cmp	r3, r0
   22b32:	d00f      	beq.n	22b54 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22b34:	3201      	adds	r2, #1
   22b36:	2a2f      	cmp	r2, #47	; 0x2f
   22b38:	d80a      	bhi.n	22b50 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   22b3a:	f102 0308 	add.w	r3, r2, #8
   22b3e:	4906      	ldr	r1, [pc, #24]	; (22b58 <handler_in_use+0x30>)
   22b40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   22b44:	f413 7f80 	tst.w	r3, #256	; 0x100
   22b48:	d0f0      	beq.n	22b2c <handler_in_use+0x4>
   22b4a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   22b4e:	e7ef      	b.n	22b30 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   22b50:	2000      	movs	r0, #0
   22b52:	4770      	bx	lr
            return true;
   22b54:	2001      	movs	r0, #1
}
   22b56:	4770      	bx	lr
   22b58:	20008380 	.word	0x20008380

00022b5c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   22b5c:	2300      	movs	r3, #0
   22b5e:	b113      	cbz	r3, 22b66 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   22b60:	f04f 30ff 	mov.w	r0, #4294967295
}
   22b64:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22b66:	4a07      	ldr	r2, [pc, #28]	; (22b84 <find_handler+0x28>)
   22b68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22b6c:	4282      	cmp	r2, r0
   22b6e:	d001      	beq.n	22b74 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   22b70:	3301      	adds	r3, #1
   22b72:	e7f4      	b.n	22b5e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22b74:	4a03      	ldr	r2, [pc, #12]	; (22b84 <find_handler+0x28>)
   22b76:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22b7a:	6852      	ldr	r2, [r2, #4]
   22b7c:	428a      	cmp	r2, r1
   22b7e:	d1f7      	bne.n	22b70 <find_handler+0x14>
            return i;
   22b80:	4618      	mov	r0, r3
   22b82:	4770      	bx	lr
   22b84:	20008380 	.word	0x20008380

00022b88 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22b88:	3008      	adds	r0, #8
   22b8a:	4b06      	ldr	r3, [pc, #24]	; (22ba4 <channel_handler_get+0x1c>)
   22b8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   22b90:	f410 7f80 	tst.w	r0, #256	; 0x100
   22b94:	d004      	beq.n	22ba0 <channel_handler_get+0x18>
   22b96:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   22b9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   22b9e:	4770      	bx	lr
        return NULL;
   22ba0:	2000      	movs	r0, #0
}
   22ba2:	4770      	bx	lr
   22ba4:	20008380 	.word	0x20008380

00022ba8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   22ba8:	b570      	push	{r4, r5, r6, lr}
   22baa:	4604      	mov	r4, r0
   22bac:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   22bae:	f7ff ffeb 	bl	22b88 <channel_handler_get>

    if (handler)
   22bb2:	b120      	cbz	r0, 22bbe <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   22bb4:	6806      	ldr	r6, [r0, #0]
   22bb6:	6842      	ldr	r2, [r0, #4]
   22bb8:	4629      	mov	r1, r5
   22bba:	4620      	mov	r0, r4
   22bbc:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   22bbe:	4b04      	ldr	r3, [pc, #16]	; (22bd0 <call_handler+0x28>)
   22bc0:	689b      	ldr	r3, [r3, #8]
   22bc2:	b123      	cbz	r3, 22bce <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22bc4:	4a02      	ldr	r2, [pc, #8]	; (22bd0 <call_handler+0x28>)
   22bc6:	68d2      	ldr	r2, [r2, #12]
   22bc8:	4629      	mov	r1, r5
   22bca:	4620      	mov	r0, r4
   22bcc:	4798      	blx	r3
    }
}
   22bce:	bd70      	pop	{r4, r5, r6, pc}
   22bd0:	20008380 	.word	0x20008380

00022bd4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22bd4:	f100 0208 	add.w	r2, r0, #8
   22bd8:	4b16      	ldr	r3, [pc, #88]	; (22c34 <release_handler+0x60>)
   22bda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   22bde:	f413 7f80 	tst.w	r3, #256	; 0x100
   22be2:	d025      	beq.n	22c30 <release_handler+0x5c>
{
   22be4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22be6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   22bea:	4610      	mov	r0, r2
   22bec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22bf0:	4a10      	ldr	r2, [pc, #64]	; (22c34 <release_handler+0x60>)
   22bf2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   22bf6:	4620      	mov	r0, r4
   22bf8:	f7ff ff96 	bl	22b28 <handler_in_use>
   22bfc:	b100      	cbz	r0, 22c00 <release_handler+0x2c>
}
   22bfe:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   22c00:	480c      	ldr	r0, [pc, #48]	; (22c34 <release_handler+0x60>)
   22c02:	2300      	movs	r3, #0
   22c04:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22c08:	4621      	mov	r1, r4
   22c0a:	3074      	adds	r0, #116	; 0x74
   22c0c:	f7ff fcf2 	bl	225f4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22c10:	4b09      	ldr	r3, [pc, #36]	; (22c38 <release_handler+0x64>)
   22c12:	4298      	cmp	r0, r3
   22c14:	d0f3      	beq.n	22bfe <release_handler+0x2a>
   22c16:	4c09      	ldr	r4, [pc, #36]	; (22c3c <release_handler+0x68>)
   22c18:	f44f 7399 	mov.w	r3, #306	; 0x132
   22c1c:	4622      	mov	r2, r4
   22c1e:	4908      	ldr	r1, [pc, #32]	; (22c40 <release_handler+0x6c>)
   22c20:	4808      	ldr	r0, [pc, #32]	; (22c44 <release_handler+0x70>)
   22c22:	f006 ff62 	bl	29aea <assert_print>
   22c26:	f44f 7199 	mov.w	r1, #306	; 0x132
   22c2a:	4620      	mov	r0, r4
   22c2c:	f006 ff56 	bl	29adc <assert_post_action>
   22c30:	4770      	bx	lr
   22c32:	bf00      	nop
   22c34:	20008380 	.word	0x20008380
   22c38:	0bad0000 	.word	0x0bad0000
   22c3c:	00033a90 	.word	0x00033a90
   22c40:	00030360 	.word	0x00030360
   22c44:	0002fdac 	.word	0x0002fdac

00022c48 <pin_handler_trigger_uninit>:
{
   22c48:	b510      	push	{r4, lr}
   22c4a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   22c4c:	f7ff ff44 	bl	22ad8 <pin_in_use_by_te>
   22c50:	b150      	cbz	r0, 22c68 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   22c52:	4620      	mov	r0, r4
   22c54:	f7ff ff60 	bl	22b18 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   22c58:	4b08      	ldr	r3, [pc, #32]	; (22c7c <pin_handler_trigger_uninit+0x34>)
   22c5a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   22c5e:	2200      	movs	r2, #0
   22c60:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   22c64:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   22c68:	4620      	mov	r0, r4
   22c6a:	f7ff ffb3 	bl	22bd4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   22c6e:	3408      	adds	r4, #8
   22c70:	4b03      	ldr	r3, [pc, #12]	; (22c80 <pin_handler_trigger_uninit+0x38>)
   22c72:	2200      	movs	r2, #0
   22c74:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   22c78:	bd10      	pop	{r4, pc}
   22c7a:	bf00      	nop
   22c7c:	4002f000 	.word	0x4002f000
   22c80:	20008380 	.word	0x20008380

00022c84 <nrf_gpio_pin_port_decode>:
{
   22c84:	b538      	push	{r3, r4, r5, lr}
   22c86:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22c88:	6804      	ldr	r4, [r0, #0]
   22c8a:	4620      	mov	r0, r4
   22c8c:	f00b f8f8 	bl	2de80 <nrf_gpio_pin_present_check>
   22c90:	b140      	cbz	r0, 22ca4 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   22c92:	f004 031f 	and.w	r3, r4, #31
   22c96:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22c98:	0964      	lsrs	r4, r4, #5
   22c9a:	d01d      	beq.n	22cd8 <nrf_gpio_pin_port_decode+0x54>
   22c9c:	2c01      	cmp	r4, #1
   22c9e:	d10e      	bne.n	22cbe <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   22ca0:	480e      	ldr	r0, [pc, #56]	; (22cdc <nrf_gpio_pin_port_decode+0x58>)
}
   22ca2:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22ca4:	4c0e      	ldr	r4, [pc, #56]	; (22ce0 <nrf_gpio_pin_port_decode+0x5c>)
   22ca6:	f240 2347 	movw	r3, #583	; 0x247
   22caa:	4622      	mov	r2, r4
   22cac:	490d      	ldr	r1, [pc, #52]	; (22ce4 <nrf_gpio_pin_port_decode+0x60>)
   22cae:	480e      	ldr	r0, [pc, #56]	; (22ce8 <nrf_gpio_pin_port_decode+0x64>)
   22cb0:	f006 ff1b 	bl	29aea <assert_print>
   22cb4:	f240 2147 	movw	r1, #583	; 0x247
   22cb8:	4620      	mov	r0, r4
   22cba:	f006 ff0f 	bl	29adc <assert_post_action>
            NRFX_ASSERT(0);
   22cbe:	4c08      	ldr	r4, [pc, #32]	; (22ce0 <nrf_gpio_pin_port_decode+0x5c>)
   22cc0:	f44f 7313 	mov.w	r3, #588	; 0x24c
   22cc4:	4622      	mov	r2, r4
   22cc6:	4909      	ldr	r1, [pc, #36]	; (22cec <nrf_gpio_pin_port_decode+0x68>)
   22cc8:	4807      	ldr	r0, [pc, #28]	; (22ce8 <nrf_gpio_pin_port_decode+0x64>)
   22cca:	f006 ff0e 	bl	29aea <assert_print>
   22cce:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22cd2:	4620      	mov	r0, r4
   22cd4:	f006 ff02 	bl	29adc <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22cd8:	4805      	ldr	r0, [pc, #20]	; (22cf0 <nrf_gpio_pin_port_decode+0x6c>)
   22cda:	e7e2      	b.n	22ca2 <nrf_gpio_pin_port_decode+0x1e>
   22cdc:	40842800 	.word	0x40842800
   22ce0:	00032e28 	.word	0x00032e28
   22ce4:	00032e5c 	.word	0x00032e5c
   22ce8:	0002fdac 	.word	0x0002fdac
   22cec:	000337ec 	.word	0x000337ec
   22cf0:	40842500 	.word	0x40842500

00022cf4 <get_initial_sense>:
{
   22cf4:	b508      	push	{r3, lr}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22cf6:	f100 0208 	add.w	r2, r0, #8
   22cfa:	4b0a      	ldr	r3, [pc, #40]	; (22d24 <get_initial_sense+0x30>)
   22cfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   22d00:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   22d04:	2b04      	cmp	r3, #4
   22d06:	d008      	beq.n	22d1a <get_initial_sense+0x26>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   22d08:	2b05      	cmp	r3, #5
   22d0a:	d101      	bne.n	22d10 <get_initial_sense+0x1c>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   22d0c:	2002      	movs	r0, #2
   22d0e:	e005      	b.n	22d1c <get_initial_sense+0x28>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22d10:	f00b f976 	bl	2e000 <nrf_gpio_pin_read>
   22d14:	b118      	cbz	r0, 22d1e <get_initial_sense+0x2a>
   22d16:	2003      	movs	r0, #3
   22d18:	e000      	b.n	22d1c <get_initial_sense+0x28>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   22d1a:	2003      	movs	r0, #3
}
   22d1c:	bd08      	pop	{r3, pc}
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22d1e:	2002      	movs	r0, #2
   22d20:	e7fc      	b.n	22d1c <get_initial_sense+0x28>
   22d22:	bf00      	nop
   22d24:	20008380 	.word	0x20008380

00022d28 <nrf_gpiote_in_event_get>:
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   22d28:	2807      	cmp	r0, #7
   22d2a:	d803      	bhi.n	22d34 <nrf_gpiote_in_event_get+0xc>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   22d2c:	0080      	lsls	r0, r0, #2
}
   22d2e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   22d32:	4770      	bx	lr
{
   22d34:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   22d36:	4c06      	ldr	r4, [pc, #24]	; (22d50 <nrf_gpiote_in_event_get+0x28>)
   22d38:	f44f 7323 	mov.w	r3, #652	; 0x28c
   22d3c:	4622      	mov	r2, r4
   22d3e:	4905      	ldr	r1, [pc, #20]	; (22d54 <nrf_gpiote_in_event_get+0x2c>)
   22d40:	4805      	ldr	r0, [pc, #20]	; (22d58 <nrf_gpiote_in_event_get+0x30>)
   22d42:	f006 fed2 	bl	29aea <assert_print>
   22d46:	f44f 7123 	mov.w	r1, #652	; 0x28c
   22d4a:	4620      	mov	r0, r4
   22d4c:	f006 fec6 	bl	29adc <assert_post_action>
   22d50:	00033ad0 	.word	0x00033ad0
   22d54:	00033b08 	.word	0x00033b08
   22d58:	0002fdac 	.word	0x0002fdac

00022d5c <pin_handler_set>:
{
   22d5c:	b570      	push	{r4, r5, r6, lr}
   22d5e:	b082      	sub	sp, #8
   22d60:	4605      	mov	r5, r0
   22d62:	460e      	mov	r6, r1
   22d64:	4614      	mov	r4, r2
    release_handler(pin);
   22d66:	f7ff ff35 	bl	22bd4 <release_handler>
    if (!handler)
   22d6a:	b326      	cbz	r6, 22db6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   22d6c:	4621      	mov	r1, r4
   22d6e:	4630      	mov	r0, r6
   22d70:	f7ff fef4 	bl	22b5c <find_handler>
    if (handler_id < 0)
   22d74:	1e03      	subs	r3, r0, #0
   22d76:	db13      	blt.n	22da0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   22d78:	4910      	ldr	r1, [pc, #64]	; (22dbc <pin_handler_set+0x60>)
   22d7a:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   22d7e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   22d82:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22d84:	f105 0008 	add.w	r0, r5, #8
   22d88:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   22d8c:	025b      	lsls	r3, r3, #9
   22d8e:	b29b      	uxth	r3, r3
   22d90:	4313      	orrs	r3, r2
   22d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22d96:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   22d9a:	4809      	ldr	r0, [pc, #36]	; (22dc0 <pin_handler_set+0x64>)
}
   22d9c:	b002      	add	sp, #8
   22d9e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   22da0:	f10d 0107 	add.w	r1, sp, #7
   22da4:	4807      	ldr	r0, [pc, #28]	; (22dc4 <pin_handler_set+0x68>)
   22da6:	f7ff fc01 	bl	225ac <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   22daa:	4b05      	ldr	r3, [pc, #20]	; (22dc0 <pin_handler_set+0x64>)
   22dac:	4298      	cmp	r0, r3
   22dae:	d1f5      	bne.n	22d9c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   22db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22db4:	e7e0      	b.n	22d78 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   22db6:	4802      	ldr	r0, [pc, #8]	; (22dc0 <pin_handler_set+0x64>)
   22db8:	e7f0      	b.n	22d9c <pin_handler_set+0x40>
   22dba:	bf00      	nop
   22dbc:	20008380 	.word	0x20008380
   22dc0:	0bad0000 	.word	0x0bad0000
   22dc4:	200083f4 	.word	0x200083f4

00022dc8 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   22dc8:	b570      	push	{r4, r5, r6, lr}
   22dca:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   22dcc:	466a      	mov	r2, sp
   22dce:	2102      	movs	r1, #2
   22dd0:	2000      	movs	r0, #0
   22dd2:	f7ff fe57 	bl	22a84 <nrf_gpio_latches_read_and_clear>
   22dd6:	e037      	b.n	22e48 <port_event_handle+0x80>
    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
            {
                uint32_t pin = NRF_CTZ(latch[i]);
   22dd8:	fa94 f4a4 	rbit	r4, r4
   22ddc:	fab4 f484 	clz	r4, r4

                /* Convert to absolute value. */
                pin += 32 * i;
   22de0:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22de4:	f104 0208 	add.w	r2, r4, #8
   22de8:	4b19      	ldr	r3, [pc, #100]	; (22e50 <port_event_handle+0x88>)
   22dea:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
   22dee:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   22df2:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   22df4:	f004 0007 	and.w	r0, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   22df8:	f81d 2001 	ldrb.w	r2, [sp, r1]
   22dfc:	2301      	movs	r3, #1
   22dfe:	4083      	lsls	r3, r0
   22e00:	43db      	mvns	r3, r3
   22e02:	b25b      	sxtb	r3, r3
   22e04:	4013      	ands	r3, r2
   22e06:	f80d 3001 	strb.w	r3, [sp, r1]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);
   22e0a:	4620      	mov	r0, r4
   22e0c:	f00b f906 	bl	2e01c <nrf_gpio_pin_sense_get>
   22e10:	4602      	mov	r2, r0

                next_sense_cond_call_handler(pin, trigger, sense);
   22e12:	4631      	mov	r1, r6
   22e14:	4620      	mov	r0, r4
   22e16:	f00b f910 	bl	2e03a <next_sense_cond_call_handler>
                /* Try to clear LATCH bit corresponding to currently processed pin.
                 * This may not succeed if the pin's state changed during the interrupt processing
                 * and now it matches the new sense configuration. In such case,
                 * the pin will be processed again in another iteration of the outer loop. */
                nrf_gpio_pin_latch_clear(pin);
   22e1a:	4620      	mov	r0, r4
   22e1c:	f00b f940 	bl	2e0a0 <nrf_gpio_pin_latch_clear>
            while (latch[i])
   22e20:	ab02      	add	r3, sp, #8
   22e22:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   22e26:	f853 4c08 	ldr.w	r4, [r3, #-8]
   22e2a:	2c00      	cmp	r4, #0
   22e2c:	d1d4      	bne.n	22dd8 <port_event_handle+0x10>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22e2e:	3501      	adds	r5, #1
   22e30:	2d01      	cmp	r5, #1
   22e32:	d9f5      	bls.n	22e20 <port_event_handle+0x58>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22e34:	4b07      	ldr	r3, [pc, #28]	; (22e54 <port_event_handle+0x8c>)
   22e36:	2200      	movs	r2, #0
   22e38:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   22e3c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   22e40:	4668      	mov	r0, sp
   22e42:	f00b f84c 	bl	2dede <latch_pending_read_and_check>
   22e46:	b108      	cbz	r0, 22e4c <port_event_handle+0x84>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22e48:	2500      	movs	r5, #0
   22e4a:	e7f1      	b.n	22e30 <port_event_handle+0x68>
}
   22e4c:	b002      	add	sp, #8
   22e4e:	bd70      	pop	{r4, r5, r6, pc}
   22e50:	20008380 	.word	0x20008380
   22e54:	4002f000 	.word	0x4002f000

00022e58 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   22e58:	b538      	push	{r3, r4, r5, lr}
   22e5a:	4604      	mov	r4, r0
    while (mask)
   22e5c:	e018      	b.n	22e90 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   22e5e:	fa94 f3a4 	rbit	r3, r4
   22e62:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   22e66:	2201      	movs	r2, #1
   22e68:	409a      	lsls	r2, r3
   22e6a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22e6e:	4a0a      	ldr	r2, [pc, #40]	; (22e98 <gpiote_evt_handle+0x40>)
   22e70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   22e74:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   22e78:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   22e7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   22e80:	f3c0 4001 	ubfx	r0, r0, #16, #2
   22e84:	f00b f824 	bl	2ded0 <gpiote_polarity_to_trigger>
   22e88:	4601      	mov	r1, r0
   22e8a:	4628      	mov	r0, r5
   22e8c:	f7ff fe8c 	bl	22ba8 <call_handler>
    while (mask)
   22e90:	2c00      	cmp	r4, #0
   22e92:	d1e4      	bne.n	22e5e <gpiote_evt_handle+0x6>
    }
}
   22e94:	bd38      	pop	{r3, r4, r5, pc}
   22e96:	bf00      	nop
   22e98:	4002f000 	.word	0x4002f000

00022e9c <nrfx_gpiote_input_configure>:
{
   22e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ea0:	b084      	sub	sp, #16
   22ea2:	4604      	mov	r4, r0
   22ea4:	4615      	mov	r5, r2
   22ea6:	461e      	mov	r6, r3
    if (p_input_config)
   22ea8:	b309      	cbz	r1, 22eee <nrfx_gpiote_input_configure+0x52>
   22eaa:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   22eac:	f00a fffa 	bl	2dea4 <pin_is_task_output>
   22eb0:	2800      	cmp	r0, #0
   22eb2:	d13f      	bne.n	22f34 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22eb4:	2300      	movs	r3, #0
   22eb6:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   22eba:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22ebe:	9301      	str	r3, [sp, #4]
   22ec0:	9300      	str	r3, [sp, #0]
   22ec2:	463b      	mov	r3, r7
   22ec4:	f10d 020f 	add.w	r2, sp, #15
   22ec8:	f10d 010e 	add.w	r1, sp, #14
   22ecc:	4620      	mov	r0, r4
   22ece:	f00b f82c 	bl	2df2a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   22ed2:	4a39      	ldr	r2, [pc, #228]	; (22fb8 <nrfx_gpiote_input_configure+0x11c>)
   22ed4:	f104 0108 	add.w	r1, r4, #8
   22ed8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22edc:	f023 0302 	bic.w	r3, r3, #2
   22ee0:	b29b      	uxth	r3, r3
   22ee2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22ee6:	f043 0301 	orr.w	r3, r3, #1
   22eea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   22eee:	b1bd      	cbz	r5, 22f20 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   22ef0:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   22ef2:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   22ef6:	4620      	mov	r0, r4
   22ef8:	f7ff fe04 	bl	22b04 <pin_is_output>
   22efc:	b1e0      	cbz	r0, 22f38 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   22efe:	f1b8 0f00 	cmp.w	r8, #0
   22f02:	d153      	bne.n	22fac <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   22f04:	4a2c      	ldr	r2, [pc, #176]	; (22fb8 <nrfx_gpiote_input_configure+0x11c>)
   22f06:	f104 0108 	add.w	r1, r4, #8
   22f0a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22f0e:	f023 031c 	bic.w	r3, r3, #28
   22f12:	b29b      	uxth	r3, r3
   22f14:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   22f18:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   22f1c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   22f20:	2e00      	cmp	r6, #0
   22f22:	d047      	beq.n	22fb4 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   22f24:	6872      	ldr	r2, [r6, #4]
   22f26:	6831      	ldr	r1, [r6, #0]
   22f28:	4620      	mov	r0, r4
   22f2a:	f7ff ff17 	bl	22d5c <pin_handler_set>
}
   22f2e:	b004      	add	sp, #16
   22f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   22f34:	4821      	ldr	r0, [pc, #132]	; (22fbc <nrfx_gpiote_input_configure+0x120>)
   22f36:	e7fa      	b.n	22f2e <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   22f38:	4a1f      	ldr	r2, [pc, #124]	; (22fb8 <nrfx_gpiote_input_configure+0x11c>)
   22f3a:	f104 0108 	add.w	r1, r4, #8
   22f3e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22f42:	f023 0320 	bic.w	r3, r3, #32
   22f46:	04db      	lsls	r3, r3, #19
   22f48:	0cdb      	lsrs	r3, r3, #19
   22f4a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   22f4e:	f1b8 0f00 	cmp.w	r8, #0
   22f52:	d0d7      	beq.n	22f04 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   22f54:	2f03      	cmp	r7, #3
   22f56:	d82b      	bhi.n	22fb0 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22f58:	686b      	ldr	r3, [r5, #4]
   22f5a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   22f5c:	b947      	cbnz	r7, 22f70 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
   22f5e:	4b18      	ldr	r3, [pc, #96]	; (22fc0 <nrfx_gpiote_input_configure+0x124>)
   22f60:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   22f64:	2200      	movs	r2, #0
   22f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   22f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
}
   22f6e:	e7c9      	b.n	22f04 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   22f70:	4638      	mov	r0, r7
   22f72:	f00a ffae 	bl	2ded2 <gpiote_trigger_to_polarity>
   22f76:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22f78:	4811      	ldr	r0, [pc, #68]	; (22fc0 <nrfx_gpiote_input_configure+0x124>)
   22f7a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   22f7e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   22f82:	f022 0203 	bic.w	r2, r2, #3
   22f86:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   22f8a:	4622      	mov	r2, r4
   22f8c:	4629      	mov	r1, r5
   22f8e:	f00a ff3f 	bl	2de10 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22f92:	4a09      	ldr	r2, [pc, #36]	; (22fb8 <nrfx_gpiote_input_configure+0x11c>)
   22f94:	f104 0108 	add.w	r1, r4, #8
   22f98:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22f9c:	036d      	lsls	r5, r5, #13
   22f9e:	b2ad      	uxth	r5, r5
   22fa0:	432b      	orrs	r3, r5
   22fa2:	f043 0320 	orr.w	r3, r3, #32
   22fa6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   22faa:	e7ab      	b.n	22f04 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   22fac:	4803      	ldr	r0, [pc, #12]	; (22fbc <nrfx_gpiote_input_configure+0x120>)
   22fae:	e7be      	b.n	22f2e <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   22fb0:	4802      	ldr	r0, [pc, #8]	; (22fbc <nrfx_gpiote_input_configure+0x120>)
   22fb2:	e7bc      	b.n	22f2e <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   22fb4:	4803      	ldr	r0, [pc, #12]	; (22fc4 <nrfx_gpiote_input_configure+0x128>)
   22fb6:	e7ba      	b.n	22f2e <nrfx_gpiote_input_configure+0x92>
   22fb8:	20008380 	.word	0x20008380
   22fbc:	0bad0004 	.word	0x0bad0004
   22fc0:	4002f000 	.word	0x4002f000
   22fc4:	0bad0000 	.word	0x0bad0000

00022fc8 <nrfx_gpiote_output_configure>:
{
   22fc8:	b570      	push	{r4, r5, r6, lr}
   22fca:	b084      	sub	sp, #16
   22fcc:	4604      	mov	r4, r0
   22fce:	4615      	mov	r5, r2
    if (p_config)
   22fd0:	b329      	cbz	r1, 2301e <nrfx_gpiote_output_configure+0x56>
   22fd2:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   22fd4:	f00a ff75 	bl	2dec2 <pin_is_input>
   22fd8:	b120      	cbz	r0, 22fe4 <nrfx_gpiote_output_configure+0x1c>
   22fda:	4620      	mov	r0, r4
   22fdc:	f7ff fd7c 	bl	22ad8 <pin_in_use_by_te>
   22fe0:	2800      	cmp	r0, #0
   22fe2:	d13a      	bne.n	2305a <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22fe4:	4620      	mov	r0, r4
   22fe6:	f7ff fd81 	bl	22aec <pin_has_trigger>
   22fea:	b110      	cbz	r0, 22ff2 <nrfx_gpiote_output_configure+0x2a>
   22fec:	7873      	ldrb	r3, [r6, #1]
   22fee:	2b01      	cmp	r3, #1
   22ff0:	d033      	beq.n	2305a <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22ff2:	2301      	movs	r3, #1
   22ff4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   22ff8:	2300      	movs	r3, #0
   22ffa:	9301      	str	r3, [sp, #4]
   22ffc:	9600      	str	r6, [sp, #0]
   22ffe:	1cb3      	adds	r3, r6, #2
   23000:	1c72      	adds	r2, r6, #1
   23002:	f10d 010f 	add.w	r1, sp, #15
   23006:	4620      	mov	r0, r4
   23008:	f00a ff8f 	bl	2df2a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2300c:	4a20      	ldr	r2, [pc, #128]	; (23090 <nrfx_gpiote_output_configure+0xc8>)
   2300e:	f104 0108 	add.w	r1, r4, #8
   23012:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23016:	f043 0303 	orr.w	r3, r3, #3
   2301a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   2301e:	b395      	cbz	r5, 23086 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
   23020:	4620      	mov	r0, r4
   23022:	f00a ff4e 	bl	2dec2 <pin_is_input>
   23026:	bb80      	cbnz	r0, 2308a <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
   23028:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   2302a:	4b1a      	ldr	r3, [pc, #104]	; (23094 <nrfx_gpiote_output_configure+0xcc>)
   2302c:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   23030:	2100      	movs	r1, #0
   23032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
   23036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2303a:	4a15      	ldr	r2, [pc, #84]	; (23090 <nrfx_gpiote_output_configure+0xc8>)
   2303c:	f104 0108 	add.w	r1, r4, #8
   23040:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23044:	f023 0320 	bic.w	r3, r3, #32
   23048:	04db      	lsls	r3, r3, #19
   2304a:	0cdb      	lsrs	r3, r3, #19
   2304c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   23050:	786b      	ldrb	r3, [r5, #1]
   23052:	b923      	cbnz	r3, 2305e <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
   23054:	4810      	ldr	r0, [pc, #64]	; (23098 <nrfx_gpiote_output_configure+0xd0>)
}
   23056:	b004      	add	sp, #16
   23058:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   2305a:	4810      	ldr	r0, [pc, #64]	; (2309c <nrfx_gpiote_output_configure+0xd4>)
   2305c:	e7fb      	b.n	23056 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
   2305e:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   23060:	9200      	str	r2, [sp, #0]
   23062:	4622      	mov	r2, r4
   23064:	4631      	mov	r1, r6
   23066:	480b      	ldr	r0, [pc, #44]	; (23094 <nrfx_gpiote_output_configure+0xcc>)
   23068:	f00a feeb 	bl	2de42 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2306c:	4a08      	ldr	r2, [pc, #32]	; (23090 <nrfx_gpiote_output_configure+0xc8>)
   2306e:	3408      	adds	r4, #8
   23070:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   23074:	0376      	lsls	r6, r6, #13
   23076:	b2b6      	uxth	r6, r6
   23078:	4333      	orrs	r3, r6
   2307a:	f043 0320 	orr.w	r3, r3, #32
   2307e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   23082:	4805      	ldr	r0, [pc, #20]	; (23098 <nrfx_gpiote_output_configure+0xd0>)
   23084:	e7e7      	b.n	23056 <nrfx_gpiote_output_configure+0x8e>
   23086:	4804      	ldr	r0, [pc, #16]	; (23098 <nrfx_gpiote_output_configure+0xd0>)
   23088:	e7e5      	b.n	23056 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
   2308a:	4804      	ldr	r0, [pc, #16]	; (2309c <nrfx_gpiote_output_configure+0xd4>)
   2308c:	e7e3      	b.n	23056 <nrfx_gpiote_output_configure+0x8e>
   2308e:	bf00      	nop
   23090:	20008380 	.word	0x20008380
   23094:	4002f000 	.word	0x4002f000
   23098:	0bad0000 	.word	0x0bad0000
   2309c:	0bad0004 	.word	0x0bad0004

000230a0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   230a0:	4b01      	ldr	r3, [pc, #4]	; (230a8 <nrfx_gpiote_global_callback_set+0x8>)
   230a2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   230a4:	60d9      	str	r1, [r3, #12]
}
   230a6:	4770      	bx	lr
   230a8:	20008380 	.word	0x20008380

000230ac <nrfx_gpiote_channel_get>:
{
   230ac:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_channel);
   230ae:	b161      	cbz	r1, 230ca <nrfx_gpiote_channel_get+0x1e>
   230b0:	4604      	mov	r4, r0
   230b2:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   230b4:	f7ff fd10 	bl	22ad8 <pin_in_use_by_te>
   230b8:	b1a0      	cbz	r0, 230e4 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   230ba:	3408      	adds	r4, #8
   230bc:	4b0a      	ldr	r3, [pc, #40]	; (230e8 <nrfx_gpiote_channel_get+0x3c>)
   230be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   230c2:	0b5b      	lsrs	r3, r3, #13
   230c4:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   230c6:	4809      	ldr	r0, [pc, #36]	; (230ec <nrfx_gpiote_channel_get+0x40>)
   230c8:	e00d      	b.n	230e6 <nrfx_gpiote_channel_get+0x3a>
    NRFX_ASSERT(p_channel);
   230ca:	4c09      	ldr	r4, [pc, #36]	; (230f0 <nrfx_gpiote_channel_get+0x44>)
   230cc:	f240 2335 	movw	r3, #565	; 0x235
   230d0:	4622      	mov	r2, r4
   230d2:	4908      	ldr	r1, [pc, #32]	; (230f4 <nrfx_gpiote_channel_get+0x48>)
   230d4:	4808      	ldr	r0, [pc, #32]	; (230f8 <nrfx_gpiote_channel_get+0x4c>)
   230d6:	f006 fd08 	bl	29aea <assert_print>
   230da:	f240 2135 	movw	r1, #565	; 0x235
   230de:	4620      	mov	r0, r4
   230e0:	f006 fcfc 	bl	29adc <assert_post_action>
        return NRFX_ERROR_INVALID_PARAM;
   230e4:	4805      	ldr	r0, [pc, #20]	; (230fc <nrfx_gpiote_channel_get+0x50>)
}
   230e6:	bd38      	pop	{r3, r4, r5, pc}
   230e8:	20008380 	.word	0x20008380
   230ec:	0bad0000 	.word	0x0bad0000
   230f0:	00033a90 	.word	0x00033a90
   230f4:	00033b14 	.word	0x00033b14
   230f8:	0002fdac 	.word	0x0002fdac
   230fc:	0bad0004 	.word	0x0bad0004

00023100 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23100:	4b0f      	ldr	r3, [pc, #60]	; (23140 <nrfx_gpiote_init+0x40>)
   23102:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   23106:	b10b      	cbz	r3, 2310c <nrfx_gpiote_init+0xc>
        return err_code;
   23108:	480e      	ldr	r0, [pc, #56]	; (23144 <nrfx_gpiote_init+0x44>)
}
   2310a:	4770      	bx	lr
{
   2310c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2310e:	4c0e      	ldr	r4, [pc, #56]	; (23148 <nrfx_gpiote_init+0x48>)
   23110:	2260      	movs	r2, #96	; 0x60
   23112:	2100      	movs	r1, #0
   23114:	4620      	mov	r0, r4
   23116:	f008 f83e 	bl	2b196 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2311a:	202f      	movs	r0, #47	; 0x2f
   2311c:	f007 fefe 	bl	2af1c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23120:	4b0a      	ldr	r3, [pc, #40]	; (2314c <nrfx_gpiote_init+0x4c>)
   23122:	2200      	movs	r2, #0
   23124:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   23128:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2312c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23130:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23134:	2301      	movs	r3, #1
   23136:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2313a:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   2313c:	4804      	ldr	r0, [pc, #16]	; (23150 <nrfx_gpiote_init+0x50>)
}
   2313e:	bd10      	pop	{r4, pc}
   23140:	20008380 	.word	0x20008380
   23144:	0bad0005 	.word	0x0bad0005
   23148:	20008390 	.word	0x20008390
   2314c:	4002f000 	.word	0x4002f000
   23150:	0bad0000 	.word	0x0bad0000

00023154 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   23154:	4b03      	ldr	r3, [pc, #12]	; (23164 <nrfx_gpiote_is_init+0x10>)
   23156:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2315a:	3800      	subs	r0, #0
   2315c:	bf18      	it	ne
   2315e:	2001      	movne	r0, #1
   23160:	4770      	bx	lr
   23162:	bf00      	nop
   23164:	20008380 	.word	0x20008380

00023168 <nrfx_gpiote_channel_free>:
{
   23168:	b508      	push	{r3, lr}
   2316a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2316c:	4801      	ldr	r0, [pc, #4]	; (23174 <nrfx_gpiote_channel_free+0xc>)
   2316e:	f7ff fa41 	bl	225f4 <nrfx_flag32_free>
}
   23172:	bd08      	pop	{r3, pc}
   23174:	200083f0 	.word	0x200083f0

00023178 <nrfx_gpiote_channel_alloc>:
{
   23178:	b508      	push	{r3, lr}
   2317a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2317c:	4801      	ldr	r0, [pc, #4]	; (23184 <nrfx_gpiote_channel_alloc+0xc>)
   2317e:	f7ff fa15 	bl	225ac <nrfx_flag32_alloc>
}
   23182:	bd08      	pop	{r3, pc}
   23184:	200083f0 	.word	0x200083f0

00023188 <nrfx_gpiote_trigger_enable>:
{
   23188:	b538      	push	{r3, r4, r5, lr}
   2318a:	4604      	mov	r4, r0
   2318c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   2318e:	f7ff fcad 	bl	22aec <pin_has_trigger>
   23192:	b180      	cbz	r0, 231b6 <nrfx_gpiote_trigger_enable+0x2e>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23194:	4620      	mov	r0, r4
   23196:	f7ff fc9f 	bl	22ad8 <pin_in_use_by_te>
   2319a:	b118      	cbz	r0, 231a4 <nrfx_gpiote_trigger_enable+0x1c>
   2319c:	4620      	mov	r0, r4
   2319e:	f00a fe90 	bl	2dec2 <pin_is_input>
   231a2:	b9a8      	cbnz	r0, 231d0 <nrfx_gpiote_trigger_enable+0x48>
        NRFX_ASSERT(int_enable);
   231a4:	b38d      	cbz	r5, 2320a <nrfx_gpiote_trigger_enable+0x82>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   231a6:	4620      	mov	r0, r4
   231a8:	f7ff fda4 	bl	22cf4 <get_initial_sense>
   231ac:	4601      	mov	r1, r0
   231ae:	4620      	mov	r0, r4
   231b0:	f00a ff16 	bl	2dfe0 <nrf_gpio_cfg_sense_set>
}
   231b4:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(pin_has_trigger(pin));
   231b6:	4c1b      	ldr	r4, [pc, #108]	; (23224 <nrfx_gpiote_trigger_enable+0x9c>)
   231b8:	f240 33df 	movw	r3, #991	; 0x3df
   231bc:	4622      	mov	r2, r4
   231be:	491a      	ldr	r1, [pc, #104]	; (23228 <nrfx_gpiote_trigger_enable+0xa0>)
   231c0:	481a      	ldr	r0, [pc, #104]	; (2322c <nrfx_gpiote_trigger_enable+0xa4>)
   231c2:	f006 fc92 	bl	29aea <assert_print>
   231c6:	f240 31df 	movw	r1, #991	; 0x3df
   231ca:	4620      	mov	r0, r4
   231cc:	f006 fc86 	bl	29adc <assert_post_action>
        uint8_t ch = pin_te_get(pin);
   231d0:	4620      	mov	r0, r4
   231d2:	f7ff fca1 	bl	22b18 <pin_te_get>
   231d6:	4604      	mov	r4, r0
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   231d8:	f7ff fda6 	bl	22d28 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   231dc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   231e0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   231e4:	2200      	movs	r2, #0
   231e6:	601a      	str	r2, [r3, #0]
   231e8:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   231ea:	4a11      	ldr	r2, [pc, #68]	; (23230 <nrfx_gpiote_trigger_enable+0xa8>)
   231ec:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   231f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   231f4:	f043 0301 	orr.w	r3, r3, #1
   231f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   231fc:	2d00      	cmp	r5, #0
   231fe:	d0d9      	beq.n	231b4 <nrfx_gpiote_trigger_enable+0x2c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   23200:	2301      	movs	r3, #1
   23202:	40a3      	lsls	r3, r4
    p_reg->INTENSET = mask;
   23204:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23208:	e7d4      	b.n	231b4 <nrfx_gpiote_trigger_enable+0x2c>
        NRFX_ASSERT(int_enable);
   2320a:	4c06      	ldr	r4, [pc, #24]	; (23224 <nrfx_gpiote_trigger_enable+0x9c>)
   2320c:	f240 33ee 	movw	r3, #1006	; 0x3ee
   23210:	4622      	mov	r2, r4
   23212:	4908      	ldr	r1, [pc, #32]	; (23234 <nrfx_gpiote_trigger_enable+0xac>)
   23214:	4805      	ldr	r0, [pc, #20]	; (2322c <nrfx_gpiote_trigger_enable+0xa4>)
   23216:	f006 fc68 	bl	29aea <assert_print>
   2321a:	f240 31ee 	movw	r1, #1006	; 0x3ee
   2321e:	4620      	mov	r0, r4
   23220:	f006 fc5c 	bl	29adc <assert_post_action>
   23224:	00033a90 	.word	0x00033a90
   23228:	00033b20 	.word	0x00033b20
   2322c:	0002fdac 	.word	0x0002fdac
   23230:	4002f000 	.word	0x4002f000
   23234:	00033b38 	.word	0x00033b38

00023238 <nrfx_gpiote_trigger_disable>:
{
   23238:	b510      	push	{r4, lr}
   2323a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2323c:	f7ff fc4c 	bl	22ad8 <pin_in_use_by_te>
   23240:	b1a0      	cbz	r0, 2326c <nrfx_gpiote_trigger_disable+0x34>
   23242:	4620      	mov	r0, r4
   23244:	f00a fe3d 	bl	2dec2 <pin_is_input>
   23248:	b180      	cbz	r0, 2326c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   2324a:	4620      	mov	r0, r4
   2324c:	f7ff fc64 	bl	22b18 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23250:	2201      	movs	r2, #1
   23252:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   23254:	4b08      	ldr	r3, [pc, #32]	; (23278 <nrfx_gpiote_trigger_disable+0x40>)
   23256:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2325a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2325e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   23262:	f022 0203 	bic.w	r2, r2, #3
   23266:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   2326a:	e003      	b.n	23274 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2326c:	2100      	movs	r1, #0
   2326e:	4620      	mov	r0, r4
   23270:	f00a feb6 	bl	2dfe0 <nrf_gpio_cfg_sense_set>
}
   23274:	bd10      	pop	{r4, pc}
   23276:	bf00      	nop
   23278:	4002f000 	.word	0x4002f000

0002327c <nrfx_gpiote_pin_uninit>:
{
   2327c:	b510      	push	{r4, lr}
   2327e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   23280:	f7ff fc20 	bl	22ac4 <pin_in_use>
   23284:	b908      	cbnz	r0, 2328a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   23286:	4806      	ldr	r0, [pc, #24]	; (232a0 <nrfx_gpiote_pin_uninit+0x24>)
}
   23288:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   2328a:	4620      	mov	r0, r4
   2328c:	f7ff ffd4 	bl	23238 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   23290:	4620      	mov	r0, r4
   23292:	f7ff fcd9 	bl	22c48 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
   23296:	4620      	mov	r0, r4
   23298:	f00a fe34 	bl	2df04 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
   2329c:	4801      	ldr	r0, [pc, #4]	; (232a4 <nrfx_gpiote_pin_uninit+0x28>)
   2329e:	e7f3      	b.n	23288 <nrfx_gpiote_pin_uninit+0xc>
   232a0:	0bad0004 	.word	0x0bad0004
   232a4:	0bad0000 	.word	0x0bad0000

000232a8 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   232a8:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   232aa:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   232ac:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   232b0:	2100      	movs	r1, #0
    uint32_t status = 0;
   232b2:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   232b4:	e003      	b.n	232be <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   232b6:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   232b8:	3304      	adds	r3, #4
   232ba:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   232bc:	3101      	adds	r1, #1
   232be:	2907      	cmp	r1, #7
   232c0:	d814      	bhi.n	232ec <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   232c2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   232c6:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   232ca:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   232cc:	2a00      	cmp	r2, #0
   232ce:	d0f2      	beq.n	232b6 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   232d0:	4a0c      	ldr	r2, [pc, #48]	; (23304 <nrfx_gpiote_irq_handler+0x5c>)
   232d2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   232d6:	4210      	tst	r0, r2
   232d8:	d0ed      	beq.n	232b6 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   232da:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   232de:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   232e2:	2500      	movs	r5, #0
   232e4:	6015      	str	r5, [r2, #0]
   232e6:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   232e8:	4304      	orrs	r4, r0
   232ea:	e7e4      	b.n	232b6 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   232ec:	4b05      	ldr	r3, [pc, #20]	; (23304 <nrfx_gpiote_irq_handler+0x5c>)
   232ee:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   232f2:	b91b      	cbnz	r3, 232fc <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   232f4:	4620      	mov	r0, r4
   232f6:	f7ff fdaf 	bl	22e58 <gpiote_evt_handle>
}
   232fa:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   232fc:	f7ff fd64 	bl	22dc8 <port_event_handle>
   23300:	e7f8      	b.n	232f4 <nrfx_gpiote_irq_handler+0x4c>
   23302:	bf00      	nop
   23304:	4002f000 	.word	0x4002f000

00023308 <nrf_ipc_receive_event_get>:
    NRFX_ASSERT(index < IPC_CH_NUM);
   23308:	280f      	cmp	r0, #15
   2330a:	d803      	bhi.n	23314 <nrf_ipc_receive_event_get+0xc>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   2330c:	0080      	lsls	r0, r0, #2
}
   2330e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   23312:	4770      	bx	lr
{
   23314:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   23316:	4c06      	ldr	r4, [pc, #24]	; (23330 <nrf_ipc_receive_event_get+0x28>)
   23318:	f240 13e7 	movw	r3, #487	; 0x1e7
   2331c:	4622      	mov	r2, r4
   2331e:	4905      	ldr	r1, [pc, #20]	; (23334 <nrf_ipc_receive_event_get+0x2c>)
   23320:	4805      	ldr	r0, [pc, #20]	; (23338 <nrf_ipc_receive_event_get+0x30>)
   23322:	f006 fbe2 	bl	29aea <assert_print>
   23326:	f240 11e7 	movw	r1, #487	; 0x1e7
   2332a:	4620      	mov	r0, r4
   2332c:	f006 fbd6 	bl	29adc <assert_post_action>
   23330:	000302a8 	.word	0x000302a8
   23334:	000302dc 	.word	0x000302dc
   23338:	0002fdac 	.word	0x0002fdac

0002333c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   2333c:	b538      	push	{r3, r4, r5, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2333e:	4b08      	ldr	r3, [pc, #32]	; (23360 <nrfx_ipc_init+0x24>)
   23340:	791b      	ldrb	r3, [r3, #4]
   23342:	b10b      	cbz	r3, 23348 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   23344:	4807      	ldr	r0, [pc, #28]	; (23364 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   23346:	bd38      	pop	{r3, r4, r5, pc}
   23348:	460d      	mov	r5, r1
   2334a:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   2334c:	202a      	movs	r0, #42	; 0x2a
   2334e:	f007 fde5 	bl	2af1c <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23352:	4b03      	ldr	r3, [pc, #12]	; (23360 <nrfx_ipc_init+0x24>)
   23354:	2201      	movs	r2, #1
   23356:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   23358:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   2335a:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   2335c:	4802      	ldr	r0, [pc, #8]	; (23368 <nrfx_ipc_init+0x2c>)
   2335e:	e7f2      	b.n	23346 <nrfx_ipc_init+0xa>
   23360:	20009cb0 	.word	0x20009cb0
   23364:	0bad000c 	.word	0x0bad000c
   23368:	0bad0000 	.word	0x0bad0000

0002336c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   2336c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
   2336e:	b130      	cbz	r0, 2337e <nrfx_ipc_config_load+0x12>
   23370:	4601      	mov	r1, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   23372:	4b1e      	ldr	r3, [pc, #120]	; (233ec <nrfx_ipc_config_load+0x80>)
   23374:	791b      	ldrb	r3, [r3, #4]
   23376:	2b01      	cmp	r3, #1
   23378:	d10c      	bne.n	23394 <nrfx_ipc_config_load+0x28>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2337a:	2300      	movs	r3, #0
   2337c:	e01e      	b.n	233bc <nrfx_ipc_config_load+0x50>
    NRFX_ASSERT(p_config);
   2337e:	4c1c      	ldr	r4, [pc, #112]	; (233f0 <nrfx_ipc_config_load+0x84>)
   23380:	2345      	movs	r3, #69	; 0x45
   23382:	4622      	mov	r2, r4
   23384:	491b      	ldr	r1, [pc, #108]	; (233f4 <nrfx_ipc_config_load+0x88>)
   23386:	481c      	ldr	r0, [pc, #112]	; (233f8 <nrfx_ipc_config_load+0x8c>)
   23388:	f006 fbaf 	bl	29aea <assert_print>
   2338c:	2145      	movs	r1, #69	; 0x45
   2338e:	4620      	mov	r0, r4
   23390:	f006 fba4 	bl	29adc <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   23394:	4c16      	ldr	r4, [pc, #88]	; (233f0 <nrfx_ipc_config_load+0x84>)
   23396:	2346      	movs	r3, #70	; 0x46
   23398:	4622      	mov	r2, r4
   2339a:	4918      	ldr	r1, [pc, #96]	; (233fc <nrfx_ipc_config_load+0x90>)
   2339c:	4816      	ldr	r0, [pc, #88]	; (233f8 <nrfx_ipc_config_load+0x8c>)
   2339e:	f006 fba4 	bl	29aea <assert_print>
   233a2:	2146      	movs	r1, #70	; 0x46
   233a4:	4620      	mov	r0, r4
   233a6:	f006 fb99 	bl	29adc <assert_post_action>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   233aa:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    p_reg->SEND_CNF[index] = channels_mask;
   233ae:	b2da      	uxtb	r2, r3
   233b0:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   233b4:	4812      	ldr	r0, [pc, #72]	; (23400 <nrfx_ipc_config_load+0x94>)
   233b6:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   233ba:	3301      	adds	r3, #1
   233bc:	2b0f      	cmp	r3, #15
   233be:	d9f4      	bls.n	233aa <nrfx_ipc_config_load+0x3e>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   233c0:	2300      	movs	r3, #0
   233c2:	e00a      	b.n	233da <nrfx_ipc_config_load+0x6e>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   233c4:	f103 0210 	add.w	r2, r3, #16
   233c8:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    p_reg->RECEIVE_CNF[index] = channels_mask;
   233cc:	b2da      	uxtb	r2, r3
   233ce:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   233d2:	480b      	ldr	r0, [pc, #44]	; (23400 <nrfx_ipc_config_load+0x94>)
   233d4:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   233d8:	3301      	adds	r3, #1
   233da:	2b0f      	cmp	r3, #15
   233dc:	d9f2      	bls.n	233c4 <nrfx_ipc_config_load+0x58>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   233de:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    p_reg->INTENSET = mask;
   233e2:	4b07      	ldr	r3, [pc, #28]	; (23400 <nrfx_ipc_config_load+0x94>)
   233e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   233e8:	bd10      	pop	{r4, pc}
   233ea:	bf00      	nop
   233ec:	20009cb0 	.word	0x20009cb0
   233f0:	00033b44 	.word	0x00033b44
   233f4:	00033b80 	.word	0x00033b80
   233f8:	0002fdac 	.word	0x0002fdac
   233fc:	00033b8c 	.word	0x00033b8c
   23400:	4002a000 	.word	0x4002a000

00023404 <nrfx_ipc_receive_event_enable>:
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   23404:	4b0a      	ldr	r3, [pc, #40]	; (23430 <nrfx_ipc_receive_event_enable+0x2c>)
   23406:	791b      	ldrb	r3, [r3, #4]
   23408:	2b01      	cmp	r3, #1
   2340a:	d105      	bne.n	23418 <nrfx_ipc_receive_event_enable+0x14>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   2340c:	2301      	movs	r3, #1
   2340e:	4083      	lsls	r3, r0
   23410:	4a08      	ldr	r2, [pc, #32]	; (23434 <nrfx_ipc_receive_event_enable+0x30>)
   23412:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   23416:	4770      	bx	lr
{
   23418:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2341a:	4c07      	ldr	r4, [pc, #28]	; (23438 <nrfx_ipc_receive_event_enable+0x34>)
   2341c:	236b      	movs	r3, #107	; 0x6b
   2341e:	4622      	mov	r2, r4
   23420:	4906      	ldr	r1, [pc, #24]	; (2343c <nrfx_ipc_receive_event_enable+0x38>)
   23422:	4807      	ldr	r0, [pc, #28]	; (23440 <nrfx_ipc_receive_event_enable+0x3c>)
   23424:	f006 fb61 	bl	29aea <assert_print>
   23428:	216b      	movs	r1, #107	; 0x6b
   2342a:	4620      	mov	r0, r4
   2342c:	f006 fb56 	bl	29adc <assert_post_action>
   23430:	20009cb0 	.word	0x20009cb0
   23434:	4002a000 	.word	0x4002a000
   23438:	00033b44 	.word	0x00033b44
   2343c:	00033b8c 	.word	0x00033b8c
   23440:	0002fdac 	.word	0x0002fdac

00023444 <nrfx_ipc_receive_event_disable>:
}

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   23444:	4b0a      	ldr	r3, [pc, #40]	; (23470 <nrfx_ipc_receive_event_disable+0x2c>)
   23446:	791b      	ldrb	r3, [r3, #4]
   23448:	2b01      	cmp	r3, #1
   2344a:	d105      	bne.n	23458 <nrfx_ipc_receive_event_disable+0x14>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   2344c:	2301      	movs	r3, #1
   2344e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   23450:	4a08      	ldr	r2, [pc, #32]	; (23474 <nrfx_ipc_receive_event_disable+0x30>)
   23452:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   23456:	4770      	bx	lr
{
   23458:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2345a:	4c07      	ldr	r4, [pc, #28]	; (23478 <nrfx_ipc_receive_event_disable+0x34>)
   2345c:	2371      	movs	r3, #113	; 0x71
   2345e:	4622      	mov	r2, r4
   23460:	4906      	ldr	r1, [pc, #24]	; (2347c <nrfx_ipc_receive_event_disable+0x38>)
   23462:	4807      	ldr	r0, [pc, #28]	; (23480 <nrfx_ipc_receive_event_disable+0x3c>)
   23464:	f006 fb41 	bl	29aea <assert_print>
   23468:	2171      	movs	r1, #113	; 0x71
   2346a:	4620      	mov	r0, r4
   2346c:	f006 fb36 	bl	29adc <assert_post_action>
   23470:	20009cb0 	.word	0x20009cb0
   23474:	4002a000 	.word	0x4002a000
   23478:	00033b44 	.word	0x00033b44
   2347c:	00033b8c 	.word	0x00033b8c
   23480:	0002fdac 	.word	0x0002fdac

00023484 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   23484:	b538      	push	{r3, r4, r5, lr}
    return p_reg->INTPEND;
   23486:	4b10      	ldr	r3, [pc, #64]	; (234c8 <nrfx_ipc_irq_handler+0x44>)
   23488:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);
    // Clear these events
    uint32_t bitmask = events_map;

    while (bitmask)
   2348c:	e003      	b.n	23496 <nrfx_ipc_irq_handler+0x12>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
        {
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   2348e:	4a0f      	ldr	r2, [pc, #60]	; (234cc <nrfx_ipc_irq_handler+0x48>)
   23490:	6891      	ldr	r1, [r2, #8]
   23492:	4628      	mov	r0, r5
   23494:	4798      	blx	r3
    while (bitmask)
   23496:	b1ac      	cbz	r4, 234c4 <nrfx_ipc_irq_handler+0x40>
        uint8_t event_idx = NRF_CTZ(bitmask);
   23498:	fa94 f5a4 	rbit	r5, r4
   2349c:	fab5 f585 	clz	r5, r5
        bitmask &= ~(1UL << event_idx);
   234a0:	2301      	movs	r3, #1
   234a2:	40ab      	lsls	r3, r5
   234a4:	ea24 0403 	bic.w	r4, r4, r3
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
   234a8:	4628      	mov	r0, r5
   234aa:	f7ff ff2d 	bl	23308 <nrf_ipc_receive_event_get>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   234b2:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
   234b6:	2300      	movs	r3, #0
   234b8:	6003      	str	r3, [r0, #0]
        if (m_ipc_cb.handler)
   234ba:	4b04      	ldr	r3, [pc, #16]	; (234cc <nrfx_ipc_irq_handler+0x48>)
   234bc:	681b      	ldr	r3, [r3, #0]
   234be:	2b00      	cmp	r3, #0
   234c0:	d1e5      	bne.n	2348e <nrfx_ipc_irq_handler+0xa>
   234c2:	e7e8      	b.n	23496 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   234c4:	bd38      	pop	{r3, r4, r5, pc}
   234c6:	bf00      	nop
   234c8:	4002a000 	.word	0x4002a000
   234cc:	20009cb0 	.word	0x20009cb0

000234d0 <nrf_gpio_pin_port_decode>:
{
   234d0:	b538      	push	{r3, r4, r5, lr}
   234d2:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   234d4:	6804      	ldr	r4, [r0, #0]
   234d6:	4620      	mov	r0, r4
   234d8:	f00a fdef 	bl	2e0ba <nrf_gpio_pin_present_check>
   234dc:	b140      	cbz	r0, 234f0 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   234de:	f004 031f 	and.w	r3, r4, #31
   234e2:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   234e4:	0964      	lsrs	r4, r4, #5
   234e6:	d01d      	beq.n	23524 <nrf_gpio_pin_port_decode+0x54>
   234e8:	2c01      	cmp	r4, #1
   234ea:	d10e      	bne.n	2350a <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   234ec:	480e      	ldr	r0, [pc, #56]	; (23528 <nrf_gpio_pin_port_decode+0x58>)
}
   234ee:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   234f0:	4c0e      	ldr	r4, [pc, #56]	; (2352c <nrf_gpio_pin_port_decode+0x5c>)
   234f2:	f240 2347 	movw	r3, #583	; 0x247
   234f6:	4622      	mov	r2, r4
   234f8:	490d      	ldr	r1, [pc, #52]	; (23530 <nrf_gpio_pin_port_decode+0x60>)
   234fa:	480e      	ldr	r0, [pc, #56]	; (23534 <nrf_gpio_pin_port_decode+0x64>)
   234fc:	f006 faf5 	bl	29aea <assert_print>
   23500:	f240 2147 	movw	r1, #583	; 0x247
   23504:	4620      	mov	r0, r4
   23506:	f006 fae9 	bl	29adc <assert_post_action>
            NRFX_ASSERT(0);
   2350a:	4c08      	ldr	r4, [pc, #32]	; (2352c <nrf_gpio_pin_port_decode+0x5c>)
   2350c:	f44f 7313 	mov.w	r3, #588	; 0x24c
   23510:	4622      	mov	r2, r4
   23512:	4909      	ldr	r1, [pc, #36]	; (23538 <nrf_gpio_pin_port_decode+0x68>)
   23514:	4807      	ldr	r0, [pc, #28]	; (23534 <nrf_gpio_pin_port_decode+0x64>)
   23516:	f006 fae8 	bl	29aea <assert_print>
   2351a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2351e:	4620      	mov	r0, r4
   23520:	f006 fadc 	bl	29adc <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23524:	4805      	ldr	r0, [pc, #20]	; (2353c <nrf_gpio_pin_port_decode+0x6c>)
   23526:	e7e2      	b.n	234ee <nrf_gpio_pin_port_decode+0x1e>
   23528:	40842800 	.word	0x40842800
   2352c:	00032e28 	.word	0x00032e28
   23530:	00032e5c 	.word	0x00032e5c
   23534:	0002fdac 	.word	0x0002fdac
   23538:	000337ec 	.word	0x000337ec
   2353c:	40842500 	.word	0x40842500

00023540 <nrf_pwm_configure>:
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   23540:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   23544:	d106      	bne.n	23554 <nrf_pwm_configure+0x14>
    p_reg->PRESCALER  = base_clock;
   23546:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   2354a:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   2354e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   23552:	4770      	bx	lr
{
   23554:	b510      	push	{r4, lr}
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   23556:	4c06      	ldr	r4, [pc, #24]	; (23570 <nrf_pwm_configure+0x30>)
   23558:	f240 23a5 	movw	r3, #677	; 0x2a5
   2355c:	4622      	mov	r2, r4
   2355e:	4905      	ldr	r1, [pc, #20]	; (23574 <nrf_pwm_configure+0x34>)
   23560:	4805      	ldr	r0, [pc, #20]	; (23578 <nrf_pwm_configure+0x38>)
   23562:	f006 fac2 	bl	29aea <assert_print>
   23566:	f240 21a5 	movw	r1, #677	; 0x2a5
   2356a:	4620      	mov	r0, r4
   2356c:	f006 fab6 	bl	29adc <assert_post_action>
   23570:	00032f14 	.word	0x00032f14
   23574:	00032f48 	.word	0x00032f48
   23578:	0002fdac 	.word	0x0002fdac

0002357c <nrf_pwm_seq_ptr_set>:
}

NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
   2357c:	b510      	push	{r4, lr}
    NRFX_ASSERT(seq_id <= 1);
   2357e:	2901      	cmp	r1, #1
   23580:	d804      	bhi.n	2358c <nrf_pwm_seq_ptr_set+0x10>
    NRFX_ASSERT(p_values != NULL);
   23582:	b182      	cbz	r2, 235a6 <nrf_pwm_seq_ptr_set+0x2a>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   23584:	3129      	adds	r1, #41	; 0x29
   23586:	0149      	lsls	r1, r1, #5
   23588:	5042      	str	r2, [r0, r1]
}
   2358a:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(seq_id <= 1);
   2358c:	4c0c      	ldr	r4, [pc, #48]	; (235c0 <nrf_pwm_seq_ptr_set+0x44>)
   2358e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   23592:	4622      	mov	r2, r4
   23594:	490b      	ldr	r1, [pc, #44]	; (235c4 <nrf_pwm_seq_ptr_set+0x48>)
   23596:	480c      	ldr	r0, [pc, #48]	; (235c8 <nrf_pwm_seq_ptr_set+0x4c>)
   23598:	f006 faa7 	bl	29aea <assert_print>
   2359c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
   235a0:	4620      	mov	r0, r4
   235a2:	f006 fa9b 	bl	29adc <assert_post_action>
    NRFX_ASSERT(p_values != NULL);
   235a6:	4c06      	ldr	r4, [pc, #24]	; (235c0 <nrf_pwm_seq_ptr_set+0x44>)
   235a8:	f240 23bd 	movw	r3, #701	; 0x2bd
   235ac:	4622      	mov	r2, r4
   235ae:	4907      	ldr	r1, [pc, #28]	; (235cc <nrf_pwm_seq_ptr_set+0x50>)
   235b0:	4805      	ldr	r0, [pc, #20]	; (235c8 <nrf_pwm_seq_ptr_set+0x4c>)
   235b2:	f006 fa9a 	bl	29aea <assert_print>
   235b6:	f240 21bd 	movw	r1, #701	; 0x2bd
   235ba:	4620      	mov	r0, r4
   235bc:	f006 fa8e 	bl	29adc <assert_post_action>
   235c0:	00032f14 	.word	0x00032f14
   235c4:	00033bbc 	.word	0x00033bbc
   235c8:	0002fdac 	.word	0x0002fdac
   235cc:	00033bc8 	.word	0x00033bc8

000235d0 <nrf_pwm_seq_cnt_set>:

NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
   235d0:	b510      	push	{r4, lr}
    NRFX_ASSERT(seq_id <= 1);
   235d2:	2901      	cmp	r1, #1
   235d4:	d808      	bhi.n	235e8 <nrf_pwm_seq_cnt_set+0x18>
    NRFX_ASSERT(length != 0);
   235d6:	b1a2      	cbz	r2, 23602 <nrf_pwm_seq_cnt_set+0x32>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   235d8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   235dc:	d11e      	bne.n	2361c <nrf_pwm_seq_cnt_set+0x4c>
    p_reg->SEQ[seq_id].CNT = length;
   235de:	3129      	adds	r1, #41	; 0x29
   235e0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   235e4:	6042      	str	r2, [r0, #4]
}
   235e6:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(seq_id <= 1);
   235e8:	4c13      	ldr	r4, [pc, #76]	; (23638 <nrf_pwm_seq_cnt_set+0x68>)
   235ea:	f240 23c5 	movw	r3, #709	; 0x2c5
   235ee:	4622      	mov	r2, r4
   235f0:	4912      	ldr	r1, [pc, #72]	; (2363c <nrf_pwm_seq_cnt_set+0x6c>)
   235f2:	4813      	ldr	r0, [pc, #76]	; (23640 <nrf_pwm_seq_cnt_set+0x70>)
   235f4:	f006 fa79 	bl	29aea <assert_print>
   235f8:	f240 21c5 	movw	r1, #709	; 0x2c5
   235fc:	4620      	mov	r0, r4
   235fe:	f006 fa6d 	bl	29adc <assert_post_action>
    NRFX_ASSERT(length != 0);
   23602:	4c0d      	ldr	r4, [pc, #52]	; (23638 <nrf_pwm_seq_cnt_set+0x68>)
   23604:	f240 23c6 	movw	r3, #710	; 0x2c6
   23608:	4622      	mov	r2, r4
   2360a:	490e      	ldr	r1, [pc, #56]	; (23644 <nrf_pwm_seq_cnt_set+0x74>)
   2360c:	480c      	ldr	r0, [pc, #48]	; (23640 <nrf_pwm_seq_cnt_set+0x70>)
   2360e:	f006 fa6c 	bl	29aea <assert_print>
   23612:	f240 21c6 	movw	r1, #710	; 0x2c6
   23616:	4620      	mov	r0, r4
   23618:	f006 fa60 	bl	29adc <assert_post_action>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   2361c:	4c06      	ldr	r4, [pc, #24]	; (23638 <nrf_pwm_seq_cnt_set+0x68>)
   2361e:	f240 23c7 	movw	r3, #711	; 0x2c7
   23622:	4622      	mov	r2, r4
   23624:	4908      	ldr	r1, [pc, #32]	; (23648 <nrf_pwm_seq_cnt_set+0x78>)
   23626:	4806      	ldr	r0, [pc, #24]	; (23640 <nrf_pwm_seq_cnt_set+0x70>)
   23628:	f006 fa5f 	bl	29aea <assert_print>
   2362c:	f240 21c7 	movw	r1, #711	; 0x2c7
   23630:	4620      	mov	r0, r4
   23632:	f006 fa53 	bl	29adc <assert_post_action>
   23636:	bf00      	nop
   23638:	00032f14 	.word	0x00032f14
   2363c:	00033bbc 	.word	0x00033bbc
   23640:	0002fdac 	.word	0x0002fdac
   23644:	00033be0 	.word	0x00033be0
   23648:	00033bec 	.word	0x00033bec

0002364c <nrf_pwm_seq_refresh_set>:

NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
   2364c:	b510      	push	{r4, lr}
    NRFX_ASSERT(seq_id <= 1);
   2364e:	2901      	cmp	r1, #1
   23650:	d807      	bhi.n	23662 <nrf_pwm_seq_refresh_set+0x16>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   23652:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   23656:	d211      	bcs.n	2367c <nrf_pwm_seq_refresh_set+0x30>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   23658:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   2365c:	f8c0 2528 	str.w	r2, [r0, #1320]	; 0x528
}
   23660:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(seq_id <= 1);
   23662:	4c0d      	ldr	r4, [pc, #52]	; (23698 <nrf_pwm_seq_refresh_set+0x4c>)
   23664:	f240 23cf 	movw	r3, #719	; 0x2cf
   23668:	4622      	mov	r2, r4
   2366a:	490c      	ldr	r1, [pc, #48]	; (2369c <nrf_pwm_seq_refresh_set+0x50>)
   2366c:	480c      	ldr	r0, [pc, #48]	; (236a0 <nrf_pwm_seq_refresh_set+0x54>)
   2366e:	f006 fa3c 	bl	29aea <assert_print>
   23672:	f240 21cf 	movw	r1, #719	; 0x2cf
   23676:	4620      	mov	r0, r4
   23678:	f006 fa30 	bl	29adc <assert_post_action>
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   2367c:	4c06      	ldr	r4, [pc, #24]	; (23698 <nrf_pwm_seq_refresh_set+0x4c>)
   2367e:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   23682:	4622      	mov	r2, r4
   23684:	4907      	ldr	r1, [pc, #28]	; (236a4 <nrf_pwm_seq_refresh_set+0x58>)
   23686:	4806      	ldr	r0, [pc, #24]	; (236a0 <nrf_pwm_seq_refresh_set+0x54>)
   23688:	f006 fa2f 	bl	29aea <assert_print>
   2368c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   23690:	4620      	mov	r0, r4
   23692:	f006 fa23 	bl	29adc <assert_post_action>
   23696:	bf00      	nop
   23698:	00032f14 	.word	0x00032f14
   2369c:	00033bbc 	.word	0x00033bbc
   236a0:	0002fdac 	.word	0x0002fdac
   236a4:	00033c0c 	.word	0x00033c0c

000236a8 <nrf_pwm_seq_end_delay_set>:

NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
   236a8:	b510      	push	{r4, lr}
    NRFX_ASSERT(seq_id <= 1);
   236aa:	2901      	cmp	r1, #1
   236ac:	d807      	bhi.n	236be <nrf_pwm_seq_end_delay_set+0x16>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   236ae:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   236b2:	d211      	bcs.n	236d8 <nrf_pwm_seq_end_delay_set+0x30>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   236b4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   236b8:	f8c0 252c 	str.w	r2, [r0, #1324]	; 0x52c
}
   236bc:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(seq_id <= 1);
   236be:	4c0d      	ldr	r4, [pc, #52]	; (236f4 <nrf_pwm_seq_end_delay_set+0x4c>)
   236c0:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   236c4:	4622      	mov	r2, r4
   236c6:	490c      	ldr	r1, [pc, #48]	; (236f8 <nrf_pwm_seq_end_delay_set+0x50>)
   236c8:	480c      	ldr	r0, [pc, #48]	; (236fc <nrf_pwm_seq_end_delay_set+0x54>)
   236ca:	f006 fa0e 	bl	29aea <assert_print>
   236ce:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   236d2:	4620      	mov	r0, r4
   236d4:	f006 fa02 	bl	29adc <assert_post_action>
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   236d8:	4c06      	ldr	r4, [pc, #24]	; (236f4 <nrf_pwm_seq_end_delay_set+0x4c>)
   236da:	f240 23d9 	movw	r3, #729	; 0x2d9
   236de:	4622      	mov	r2, r4
   236e0:	4907      	ldr	r1, [pc, #28]	; (23700 <nrf_pwm_seq_end_delay_set+0x58>)
   236e2:	4806      	ldr	r0, [pc, #24]	; (236fc <nrf_pwm_seq_end_delay_set+0x54>)
   236e4:	f006 fa01 	bl	29aea <assert_print>
   236e8:	f240 21d9 	movw	r1, #729	; 0x2d9
   236ec:	4620      	mov	r0, r4
   236ee:	f006 f9f5 	bl	29adc <assert_post_action>
   236f2:	bf00      	nop
   236f4:	00032f14 	.word	0x00032f14
   236f8:	00033bbc 	.word	0x00033bbc
   236fc:	0002fdac 	.word	0x0002fdac
   23700:	00033c30 	.word	0x00033c30

00023704 <nrf_pwm_sequence_set>:
{
   23704:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_seq != NULL);
   23706:	b1aa      	cbz	r2, 23734 <nrf_pwm_sequence_set+0x30>
   23708:	4604      	mov	r4, r0
   2370a:	460d      	mov	r5, r1
   2370c:	4616      	mov	r6, r2
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   2370e:	6812      	ldr	r2, [r2, #0]
   23710:	f7ff ff34 	bl	2357c <nrf_pwm_seq_ptr_set>
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   23714:	88b2      	ldrh	r2, [r6, #4]
   23716:	4629      	mov	r1, r5
   23718:	4620      	mov	r0, r4
   2371a:	f7ff ff59 	bl	235d0 <nrf_pwm_seq_cnt_set>
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   2371e:	68b2      	ldr	r2, [r6, #8]
   23720:	4629      	mov	r1, r5
   23722:	4620      	mov	r0, r4
   23724:	f7ff ff92 	bl	2364c <nrf_pwm_seq_refresh_set>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   23728:	68f2      	ldr	r2, [r6, #12]
   2372a:	4629      	mov	r1, r5
   2372c:	4620      	mov	r0, r4
   2372e:	f7ff ffbb 	bl	236a8 <nrf_pwm_seq_end_delay_set>
}
   23732:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_seq != NULL);
   23734:	4c06      	ldr	r4, [pc, #24]	; (23750 <nrf_pwm_sequence_set+0x4c>)
   23736:	f44f 732c 	mov.w	r3, #688	; 0x2b0
   2373a:	4622      	mov	r2, r4
   2373c:	4905      	ldr	r1, [pc, #20]	; (23754 <nrf_pwm_sequence_set+0x50>)
   2373e:	4806      	ldr	r0, [pc, #24]	; (23758 <nrf_pwm_sequence_set+0x54>)
   23740:	f006 f9d3 	bl	29aea <assert_print>
   23744:	f44f 712c 	mov.w	r1, #688	; 0x2b0
   23748:	4620      	mov	r0, r4
   2374a:	f006 f9c7 	bl	29adc <assert_post_action>
   2374e:	bf00      	nop
   23750:	00032f14 	.word	0x00032f14
   23754:	00033c54 	.word	0x00033c54
   23758:	0002fdac 	.word	0x0002fdac

0002375c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   2375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
   23760:	b161      	cbz	r1, 2377c <nrfx_pwm_init+0x20>
   23762:	4604      	mov	r4, r0
   23764:	460e      	mov	r6, r1

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23766:	7905      	ldrb	r5, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   23768:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   2376c:	492e      	ldr	r1, [pc, #184]	; (23828 <nrfx_pwm_init+0xcc>)
   2376e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   23772:	7a09      	ldrb	r1, [r1, #8]
   23774:	b169      	cbz	r1, 23792 <nrfx_pwm_init+0x36>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   23776:	482d      	ldr	r0, [pc, #180]	; (2382c <nrfx_pwm_init+0xd0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   23778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(p_config);
   2377c:	4c2c      	ldr	r4, [pc, #176]	; (23830 <nrfx_pwm_init+0xd4>)
   2377e:	238c      	movs	r3, #140	; 0x8c
   23780:	4622      	mov	r2, r4
   23782:	492c      	ldr	r1, [pc, #176]	; (23834 <nrfx_pwm_init+0xd8>)
   23784:	482c      	ldr	r0, [pc, #176]	; (23838 <nrfx_pwm_init+0xdc>)
   23786:	f006 f9b0 	bl	29aea <assert_print>
   2378a:	218c      	movs	r1, #140	; 0x8c
   2378c:	4620      	mov	r0, r4
   2378e:	f006 f9a5 	bl	29adc <assert_post_action>
    p_cb->handler = handler;
   23792:	4f25      	ldr	r7, [pc, #148]	; (23828 <nrfx_pwm_init+0xcc>)
   23794:	ea4f 0880 	mov.w	r8, r0, lsl #2
   23798:	eb07 0180 	add.w	r1, r7, r0, lsl #2
   2379c:	f847 2008 	str.w	r2, [r7, r8]
    p_cb->p_context = p_context;
   237a0:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   237a2:	7b33      	ldrb	r3, [r6, #12]
   237a4:	728b      	strb	r3, [r1, #10]
    configure_pins(p_instance, p_config);
   237a6:	4631      	mov	r1, r6
   237a8:	4620      	mov	r0, r4
   237aa:	f00a fcf8 	bl	2e19e <configure_pins>
    nrf_pwm_enable(p_instance->p_registers);
   237ae:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   237b0:	2201      	movs	r2, #1
   237b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
   237b6:	8933      	ldrh	r3, [r6, #8]
   237b8:	79b2      	ldrb	r2, [r6, #6]
   237ba:	7971      	ldrb	r1, [r6, #5]
   237bc:	6820      	ldr	r0, [r4, #0]
   237be:	f7ff febf 	bl	23540 <nrf_pwm_configure>
    nrf_pwm_decoder_set(p_instance->p_registers,
   237c2:	6822      	ldr	r2, [r4, #0]
        p_config->load_mode, p_config->step_mode);
   237c4:	7ab3      	ldrb	r3, [r6, #10]
   237c6:	7af1      	ldrb	r1, [r6, #11]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   237c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   237cc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   237d0:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
   237d2:	2300      	movs	r3, #0
   237d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   237d8:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
   237da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   237de:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   237e0:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
   237e4:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   237e8:	6822      	ldr	r2, [r4, #0]
   237ea:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
   237ee:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   237f2:	6822      	ldr	r2, [r4, #0]
   237f4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   237f8:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   237fc:	6822      	ldr	r2, [r4, #0]
   237fe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   23802:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    if (p_cb->handler)
   23806:	f857 3008 	ldr.w	r3, [r7, r8]
   2380a:	b123      	cbz	r3, 23816 <nrfx_pwm_init+0xba>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   2380c:	6820      	ldr	r0, [r4, #0]
   2380e:	f340 3007 	sbfx	r0, r0, #12, #8
   23812:	f007 fb83 	bl	2af1c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2381a:	4b03      	ldr	r3, [pc, #12]	; (23828 <nrfx_pwm_init+0xcc>)
   2381c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   23820:	2201      	movs	r2, #1
   23822:	721a      	strb	r2, [r3, #8]
    return err_code;
   23824:	4805      	ldr	r0, [pc, #20]	; (2383c <nrfx_pwm_init+0xe0>)
   23826:	e7a7      	b.n	23778 <nrfx_pwm_init+0x1c>
   23828:	20009cbc 	.word	0x20009cbc
   2382c:	0bad0005 	.word	0x0bad0005
   23830:	00033c6c 	.word	0x00033c6c
   23834:	00033b80 	.word	0x00033b80
   23838:	0002fdac 	.word	0x0002fdac
   2383c:	0bad0000 	.word	0x0bad0000

00023840 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   23840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23844:	4616      	mov	r6, r2
   23846:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23848:	7903      	ldrb	r3, [r0, #4]
   2384a:	eb03 0843 	add.w	r8, r3, r3, lsl #1
   2384e:	4a31      	ldr	r2, [pc, #196]	; (23914 <nrfx_pwm_simple_playback+0xd4>)
   23850:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   23854:	f898 3008 	ldrb.w	r3, [r8, #8]
   23858:	b31b      	cbz	r3, 238a2 <nrfx_pwm_simple_playback+0x62>
   2385a:	4604      	mov	r4, r0
   2385c:	460f      	mov	r7, r1
    NRFX_ASSERT(playback_count > 0);
   2385e:	b36e      	cbz	r6, 238bc <nrfx_pwm_simple_playback+0x7c>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   23860:	680b      	ldr	r3, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   23862:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   23866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2386a:	d134      	bne.n	238d6 <nrfx_pwm_simple_playback+0x96>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   2386c:	460a      	mov	r2, r1
   2386e:	2100      	movs	r1, #0
   23870:	6800      	ldr	r0, [r0, #0]
   23872:	f7ff ff47 	bl	23704 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   23876:	463a      	mov	r2, r7
   23878:	2101      	movs	r1, #1
   2387a:	6820      	ldr	r0, [r4, #0]
   2387c:	f7ff ff42 	bl	23704 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
   23880:	f006 0101 	and.w	r1, r6, #1
    nrf_pwm_loop_set(p_instance->p_registers,
   23884:	6822      	ldr	r2, [r4, #0]
   23886:	eb01 0356 	add.w	r3, r1, r6, lsr #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   2388a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   2388e:	f015 0f01 	tst.w	r5, #1
   23892:	d12d      	bne.n	238f0 <nrfx_pwm_simple_playback+0xb0>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   23894:	f015 0302 	ands.w	r3, r5, #2
   23898:	d02b      	beq.n	238f2 <nrfx_pwm_simple_playback+0xb2>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   2389a:	2900      	cmp	r1, #0
   2389c:	d035      	beq.n	2390a <nrfx_pwm_simple_playback+0xca>
   2389e:	2308      	movs	r3, #8
   238a0:	e027      	b.n	238f2 <nrfx_pwm_simple_playback+0xb2>
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   238a2:	4c1d      	ldr	r4, [pc, #116]	; (23918 <nrfx_pwm_simple_playback+0xd8>)
   238a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
   238a8:	4622      	mov	r2, r4
   238aa:	491c      	ldr	r1, [pc, #112]	; (2391c <nrfx_pwm_simple_playback+0xdc>)
   238ac:	481c      	ldr	r0, [pc, #112]	; (23920 <nrfx_pwm_simple_playback+0xe0>)
   238ae:	f006 f91c 	bl	29aea <assert_print>
   238b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   238b6:	4620      	mov	r0, r4
   238b8:	f006 f910 	bl	29adc <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
   238bc:	4c16      	ldr	r4, [pc, #88]	; (23918 <nrfx_pwm_simple_playback+0xd8>)
   238be:	f240 132d 	movw	r3, #301	; 0x12d
   238c2:	4622      	mov	r2, r4
   238c4:	4917      	ldr	r1, [pc, #92]	; (23924 <nrfx_pwm_simple_playback+0xe4>)
   238c6:	4816      	ldr	r0, [pc, #88]	; (23920 <nrfx_pwm_simple_playback+0xe0>)
   238c8:	f006 f90f 	bl	29aea <assert_print>
   238cc:	f240 112d 	movw	r1, #301	; 0x12d
   238d0:	4620      	mov	r0, r4
   238d2:	f006 f903 	bl	29adc <assert_post_action>
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   238d6:	4c10      	ldr	r4, [pc, #64]	; (23918 <nrfx_pwm_simple_playback+0xd8>)
   238d8:	f44f 7397 	mov.w	r3, #302	; 0x12e
   238dc:	4622      	mov	r2, r4
   238de:	4912      	ldr	r1, [pc, #72]	; (23928 <nrfx_pwm_simple_playback+0xe8>)
   238e0:	480f      	ldr	r0, [pc, #60]	; (23920 <nrfx_pwm_simple_playback+0xe0>)
   238e2:	f006 f902 	bl	29aea <assert_print>
   238e6:	f44f 7197 	mov.w	r1, #302	; 0x12e
   238ea:	4620      	mov	r0, r4
   238ec:	f006 f8f6 	bl	29adc <assert_post_action>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   238f0:	2310      	movs	r3, #16
    }
    else
    {
        shorts_mask = 0;
    }
    nrf_pwm_shorts_set(p_instance->p_registers, shorts_mask);
   238f2:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
   238f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   238f8:	b2ea      	uxtb	r2, r5
   238fa:	b141      	cbz	r1, 2390e <nrfx_pwm_simple_playback+0xce>
   238fc:	230c      	movs	r3, #12
   238fe:	4641      	mov	r1, r8
   23900:	4620      	mov	r0, r4
   23902:	f00a fbec 	bl	2e0de <start_playback>
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   23906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   2390a:	2304      	movs	r3, #4
   2390c:	e7f1      	b.n	238f2 <nrfx_pwm_simple_playback+0xb2>
    return start_playback(p_instance, p_cb, flags,
   2390e:	2308      	movs	r3, #8
   23910:	e7f5      	b.n	238fe <nrfx_pwm_simple_playback+0xbe>
   23912:	bf00      	nop
   23914:	20009cbc 	.word	0x20009cbc
   23918:	00033c6c 	.word	0x00033c6c
   2391c:	00033ca8 	.word	0x00033ca8
   23920:	0002fdac 	.word	0x0002fdac
   23924:	00033cd4 	.word	0x00033cd4
   23928:	00033ce8 	.word	0x00033ce8

0002392c <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
   2392c:	4602      	mov	r2, r0
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2392e:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   23930:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   23934:	4915      	ldr	r1, [pc, #84]	; (2398c <nrfx_pwm_is_stopped+0x60>)
   23936:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   2393a:	7a09      	ldrb	r1, [r1, #8]
   2393c:	b1a9      	cbz	r1, 2396a <nrfx_pwm_is_stopped+0x3e>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   2393e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   23942:	4912      	ldr	r1, [pc, #72]	; (2398c <nrfx_pwm_is_stopped+0x60>)
   23944:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   23948:	7a09      	ldrb	r1, [r1, #8]
   2394a:	b2c9      	uxtb	r1, r1
   2394c:	2902      	cmp	r1, #2
   2394e:	d01a      	beq.n	23986 <nrfx_pwm_is_stopped+0x5a>
    {
        ret_val = true;
   23950:	2001      	movs	r0, #1
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   23952:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23954:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
   23958:	b132      	cbz	r2, 23968 <nrfx_pwm_is_stopped+0x3c>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2395a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2395e:	4a0b      	ldr	r2, [pc, #44]	; (2398c <nrfx_pwm_is_stopped+0x60>)
   23960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   23964:	2001      	movs	r0, #1
   23966:	7218      	strb	r0, [r3, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   23968:	4770      	bx	lr
{
   2396a:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2396c:	4c08      	ldr	r4, [pc, #32]	; (23990 <nrfx_pwm_is_stopped+0x64>)
   2396e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   23972:	4622      	mov	r2, r4
   23974:	4907      	ldr	r1, [pc, #28]	; (23994 <nrfx_pwm_is_stopped+0x68>)
   23976:	4808      	ldr	r0, [pc, #32]	; (23998 <nrfx_pwm_is_stopped+0x6c>)
   23978:	f006 f8b7 	bl	29aea <assert_print>
   2397c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   23980:	4620      	mov	r0, r4
   23982:	f006 f8ab 	bl	29adc <assert_post_action>
    bool ret_val = false;
   23986:	2000      	movs	r0, #0
   23988:	e7e3      	b.n	23952 <nrfx_pwm_is_stopped+0x26>
   2398a:	bf00      	nop
   2398c:	20009cbc 	.word	0x20009cbc
   23990:	00033c6c 	.word	0x00033c6c
   23994:	00033ca8 	.word	0x00033ca8
   23998:	0002fdac 	.word	0x0002fdac

0002399c <nrfx_pwm_stop>:
{
   2399c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   2399e:	7903      	ldrb	r3, [r0, #4]
   239a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   239a4:	4a14      	ldr	r2, [pc, #80]	; (239f8 <nrfx_pwm_stop+0x5c>)
   239a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   239aa:	7a1b      	ldrb	r3, [r3, #8]
   239ac:	b1b3      	cbz	r3, 239dc <nrfx_pwm_stop+0x40>
   239ae:	4604      	mov	r4, r0
   239b0:	460d      	mov	r5, r1
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   239b2:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   239b4:	2200      	movs	r2, #0
   239b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   239ba:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239bc:	2201      	movs	r2, #1
   239be:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   239c0:	f7ff ffb4 	bl	2392c <nrfx_pwm_is_stopped>
   239c4:	4603      	mov	r3, r0
   239c6:	b938      	cbnz	r0, 239d8 <nrfx_pwm_stop+0x3c>
            if (nrfx_pwm_is_stopped(p_instance))
   239c8:	4620      	mov	r0, r4
   239ca:	f7ff ffaf 	bl	2392c <nrfx_pwm_is_stopped>
   239ce:	4603      	mov	r3, r0
   239d0:	b910      	cbnz	r0, 239d8 <nrfx_pwm_stop+0x3c>
        } while (wait_until_stopped);
   239d2:	2d00      	cmp	r5, #0
   239d4:	d1f8      	bne.n	239c8 <nrfx_pwm_stop+0x2c>
    bool ret_val = false;
   239d6:	462b      	mov	r3, r5
}
   239d8:	4618      	mov	r0, r3
   239da:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   239dc:	4c07      	ldr	r4, [pc, #28]	; (239fc <nrfx_pwm_stop+0x60>)
   239de:	f240 1385 	movw	r3, #389	; 0x185
   239e2:	4622      	mov	r2, r4
   239e4:	4906      	ldr	r1, [pc, #24]	; (23a00 <nrfx_pwm_stop+0x64>)
   239e6:	4807      	ldr	r0, [pc, #28]	; (23a04 <nrfx_pwm_stop+0x68>)
   239e8:	f006 f87f 	bl	29aea <assert_print>
   239ec:	f240 1185 	movw	r1, #389	; 0x185
   239f0:	4620      	mov	r0, r4
   239f2:	f006 f873 	bl	29adc <assert_post_action>
   239f6:	bf00      	nop
   239f8:	20009cbc 	.word	0x20009cbc
   239fc:	00033c6c 	.word	0x00033c6c
   23a00:	00033d14 	.word	0x00033d14
   23a04:	0002fdac 	.word	0x0002fdac

00023a08 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   23a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a0a:	460d      	mov	r5, r1
   23a0c:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   23a0e:	4b0c      	ldr	r3, [pc, #48]	; (23a40 <metal_generic_dev_open+0x38>)
   23a10:	699c      	ldr	r4, [r3, #24]
   23a12:	e000      	b.n	23a16 <metal_generic_dev_open+0xe>
   23a14:	6824      	ldr	r4, [r4, #0]
   23a16:	4b0b      	ldr	r3, [pc, #44]	; (23a44 <metal_generic_dev_open+0x3c>)
   23a18:	429c      	cmp	r4, r3
   23a1a:	d00d      	beq.n	23a38 <metal_generic_dev_open+0x30>
		dev = metal_container_of(node, struct metal_device, node);
   23a1c:	f1a4 0644 	sub.w	r6, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   23a20:	4629      	mov	r1, r5
   23a22:	f854 0c44 	ldr.w	r0, [r4, #-68]
   23a26:	f007 fb57 	bl	2b0d8 <strcmp>
   23a2a:	2800      	cmp	r0, #0
   23a2c:	d1f2      	bne.n	23a14 <metal_generic_dev_open+0xc>
			*device = dev;
   23a2e:	603e      	str	r6, [r7, #0]
			return metal_generic_dev_sys_open(dev);
   23a30:	4630      	mov	r0, r6
   23a32:	f00a fd18 	bl	2e466 <metal_generic_dev_sys_open>
   23a36:	e001      	b.n	23a3c <metal_generic_dev_open+0x34>
		}
	}

	return -ENODEV;
   23a38:	f06f 0012 	mvn.w	r0, #18
}
   23a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23a3e:	bf00      	nop
   23a40:	20009cc8 	.word	0x20009cc8
   23a44:	20009ce0 	.word	0x20009ce0

00023a48 <metal_bus_unregister>:
{
   23a48:	b510      	push	{r4, lr}
   23a4a:	4604      	mov	r4, r0
	metal_list_del(&bus->node);
   23a4c:	f100 0324 	add.w	r3, r0, #36	; 0x24
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   23a50:	6a41      	ldr	r1, [r0, #36]	; 0x24
   23a52:	6a82      	ldr	r2, [r0, #40]	; 0x28
   23a54:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   23a56:	6a41      	ldr	r1, [r0, #36]	; 0x24
   23a58:	6011      	str	r1, [r2, #0]
	node->prev = node;
   23a5a:	6283      	str	r3, [r0, #40]	; 0x28
	node->next = node;
   23a5c:	6243      	str	r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   23a5e:	6843      	ldr	r3, [r0, #4]
   23a60:	b103      	cbz	r3, 23a64 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   23a62:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   23a64:	4b06      	ldr	r3, [pc, #24]	; (23a80 <metal_bus_unregister+0x38>)
   23a66:	781b      	ldrb	r3, [r3, #0]
   23a68:	2b06      	cmp	r3, #6
   23a6a:	d906      	bls.n	23a7a <metal_bus_unregister+0x32>
   23a6c:	4b04      	ldr	r3, [pc, #16]	; (23a80 <metal_bus_unregister+0x38>)
   23a6e:	685b      	ldr	r3, [r3, #4]
   23a70:	b11b      	cbz	r3, 23a7a <metal_bus_unregister+0x32>
   23a72:	6822      	ldr	r2, [r4, #0]
   23a74:	4903      	ldr	r1, [pc, #12]	; (23a84 <metal_bus_unregister+0x3c>)
   23a76:	2007      	movs	r0, #7
   23a78:	4798      	blx	r3
}
   23a7a:	2000      	movs	r0, #0
   23a7c:	bd10      	pop	{r4, pc}
   23a7e:	bf00      	nop
   23a80:	20009cc8 	.word	0x20009cc8
   23a84:	00033d5c 	.word	0x00033d5c

00023a88 <metal_bus_find>:
{
   23a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a8a:	4605      	mov	r5, r0
   23a8c:	460f      	mov	r7, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   23a8e:	4b0c      	ldr	r3, [pc, #48]	; (23ac0 <metal_bus_find+0x38>)
   23a90:	689c      	ldr	r4, [r3, #8]
   23a92:	e000      	b.n	23a96 <metal_bus_find+0xe>
   23a94:	6824      	ldr	r4, [r4, #0]
   23a96:	4b0b      	ldr	r3, [pc, #44]	; (23ac4 <metal_bus_find+0x3c>)
   23a98:	429c      	cmp	r4, r3
   23a9a:	d00d      	beq.n	23ab8 <metal_bus_find+0x30>
		bus = metal_container_of(node, struct metal_bus, node);
   23a9c:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   23aa0:	4629      	mov	r1, r5
   23aa2:	f854 0c24 	ldr.w	r0, [r4, #-36]
   23aa6:	f007 fb17 	bl	2b0d8 <strcmp>
   23aaa:	4603      	mov	r3, r0
   23aac:	2800      	cmp	r0, #0
   23aae:	d1f1      	bne.n	23a94 <metal_bus_find+0xc>
   23ab0:	2f00      	cmp	r7, #0
   23ab2:	d0ef      	beq.n	23a94 <metal_bus_find+0xc>
			*result = bus;
   23ab4:	603e      	str	r6, [r7, #0]
			return 0;
   23ab6:	e001      	b.n	23abc <metal_bus_find+0x34>
	return -ENOENT;
   23ab8:	f06f 0301 	mvn.w	r3, #1
}
   23abc:	4618      	mov	r0, r3
   23abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ac0:	20009cc8 	.word	0x20009cc8
   23ac4:	20009cd0 	.word	0x20009cd0

00023ac8 <metal_bus_register>:
	if (!bus || !bus->name || !strlen(bus->name))
   23ac8:	b380      	cbz	r0, 23b2c <metal_bus_register+0x64>
{
   23aca:	b510      	push	{r4, lr}
   23acc:	4604      	mov	r4, r0
	if (!bus || !bus->name || !strlen(bus->name))
   23ace:	6800      	ldr	r0, [r0, #0]
   23ad0:	b310      	cbz	r0, 23b18 <metal_bus_register+0x50>
   23ad2:	f007 faee 	bl	2b0b2 <strlen>
   23ad6:	b1f8      	cbz	r0, 23b18 <metal_bus_register+0x50>
	if (metal_bus_find(bus->name, NULL) == 0)
   23ad8:	2100      	movs	r1, #0
   23ada:	6820      	ldr	r0, [r4, #0]
   23adc:	f7ff ffd4 	bl	23a88 <metal_bus_find>
   23ae0:	b1e8      	cbz	r0, 23b1e <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   23ae2:	f104 031c 	add.w	r3, r4, #28
	list->prev = list;
   23ae6:	6223      	str	r3, [r4, #32]
	list->next = list;
   23ae8:	61e3      	str	r3, [r4, #28]
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   23aea:	f104 0224 	add.w	r2, r4, #36	; 0x24
	new_node->prev = node->prev;
   23aee:	4b11      	ldr	r3, [pc, #68]	; (23b34 <metal_bus_register+0x6c>)
   23af0:	68d9      	ldr	r1, [r3, #12]
   23af2:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   23af4:	f103 0008 	add.w	r0, r3, #8
   23af8:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->next->prev = new_node;
   23afa:	60da      	str	r2, [r3, #12]
	new_node->prev->next = new_node;
   23afc:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   23afe:	781b      	ldrb	r3, [r3, #0]
   23b00:	2b06      	cmp	r3, #6
   23b02:	d90f      	bls.n	23b24 <metal_bus_register+0x5c>
   23b04:	f1a0 0308 	sub.w	r3, r0, #8
   23b08:	685b      	ldr	r3, [r3, #4]
   23b0a:	b16b      	cbz	r3, 23b28 <metal_bus_register+0x60>
   23b0c:	6822      	ldr	r2, [r4, #0]
   23b0e:	490a      	ldr	r1, [pc, #40]	; (23b38 <metal_bus_register+0x70>)
   23b10:	2007      	movs	r0, #7
   23b12:	4798      	blx	r3
	return 0;
   23b14:	2000      	movs	r0, #0
   23b16:	e006      	b.n	23b26 <metal_bus_register+0x5e>
		return -EINVAL;
   23b18:	f06f 0015 	mvn.w	r0, #21
   23b1c:	e003      	b.n	23b26 <metal_bus_register+0x5e>
		return -EEXIST;
   23b1e:	f06f 0010 	mvn.w	r0, #16
   23b22:	e000      	b.n	23b26 <metal_bus_register+0x5e>
	return 0;
   23b24:	2000      	movs	r0, #0
}
   23b26:	bd10      	pop	{r4, pc}
	return 0;
   23b28:	2000      	movs	r0, #0
   23b2a:	e7fc      	b.n	23b26 <metal_bus_register+0x5e>
		return -EINVAL;
   23b2c:	f06f 0015 	mvn.w	r0, #21
}
   23b30:	4770      	bx	lr
   23b32:	bf00      	nop
   23b34:	20009cc8 	.word	0x20009cc8
   23b38:	00033d74 	.word	0x00033d74

00023b3c <metal_device_close>:
{
   23b3c:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   23b3e:	b130      	cbz	r0, 23b4e <metal_device_close+0x12>
   23b40:	4601      	mov	r1, r0
   23b42:	6840      	ldr	r0, [r0, #4]
   23b44:	b118      	cbz	r0, 23b4e <metal_device_close+0x12>
	if (device->bus->ops.dev_close)
   23b46:	68c3      	ldr	r3, [r0, #12]
   23b48:	b103      	cbz	r3, 23b4c <metal_device_close+0x10>
		device->bus->ops.dev_close(device->bus, device);
   23b4a:	4798      	blx	r3
}
   23b4c:	bd10      	pop	{r4, pc}
	metal_assert(device && device->bus);
   23b4e:	4c05      	ldr	r4, [pc, #20]	; (23b64 <metal_device_close+0x28>)
   23b50:	2351      	movs	r3, #81	; 0x51
   23b52:	4622      	mov	r2, r4
   23b54:	4904      	ldr	r1, [pc, #16]	; (23b68 <metal_device_close+0x2c>)
   23b56:	4805      	ldr	r0, [pc, #20]	; (23b6c <metal_device_close+0x30>)
   23b58:	f005 ffc7 	bl	29aea <assert_print>
   23b5c:	2151      	movs	r1, #81	; 0x51
   23b5e:	4620      	mov	r0, r4
   23b60:	f005 ffbc 	bl	29adc <assert_post_action>
   23b64:	00033d88 	.word	0x00033d88
   23b68:	00033dc0 	.word	0x00033dc0
   23b6c:	0002fdac 	.word	0x0002fdac

00023b70 <metal_register_generic_device>:
{
   23b70:	b510      	push	{r4, lr}
   23b72:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   23b74:	6800      	ldr	r0, [r0, #0]
   23b76:	b198      	cbz	r0, 23ba0 <metal_register_generic_device+0x30>
   23b78:	f007 fa9b 	bl	2b0b2 <strlen>
   23b7c:	b180      	cbz	r0, 23ba0 <metal_register_generic_device+0x30>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
   23b7e:	68a3      	ldr	r3, [r4, #8]
	if (!device->name || !strlen(device->name) ||
   23b80:	2b01      	cmp	r3, #1
   23b82:	d80d      	bhi.n	23ba0 <metal_register_generic_device+0x30>
	device->bus = &metal_generic_bus;
   23b84:	4b08      	ldr	r3, [pc, #32]	; (23ba8 <metal_register_generic_device+0x38>)
   23b86:	6063      	str	r3, [r4, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
   23b88:	f104 0144 	add.w	r1, r4, #68	; 0x44
	new_node->prev = node->prev;
   23b8c:	4b07      	ldr	r3, [pc, #28]	; (23bac <metal_register_generic_device+0x3c>)
   23b8e:	69da      	ldr	r2, [r3, #28]
   23b90:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next = node;
   23b92:	f103 0018 	add.w	r0, r3, #24
   23b96:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->next->prev = new_node;
   23b98:	61d9      	str	r1, [r3, #28]
	new_node->prev->next = new_node;
   23b9a:	6011      	str	r1, [r2, #0]
	return 0;
   23b9c:	2000      	movs	r0, #0
}
   23b9e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   23ba0:	f06f 0015 	mvn.w	r0, #21
   23ba4:	e7fb      	b.n	23b9e <metal_register_generic_device+0x2e>
   23ba6:	bf00      	nop
   23ba8:	200083fc 	.word	0x200083fc
   23bac:	20009cc8 	.word	0x20009cc8

00023bb0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   23bb0:	b538      	push	{r3, r4, r5, lr}
   23bb2:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   23bb4:	4c0c      	ldr	r4, [pc, #48]	; (23be8 <metal_init+0x38>)
   23bb6:	2220      	movs	r2, #32
   23bb8:	2100      	movs	r1, #0
   23bba:	4620      	mov	r0, r4
   23bbc:	f007 faeb 	bl	2b196 <memset>

	_metal.common.log_handler   = params->log_handler;
   23bc0:	682b      	ldr	r3, [r5, #0]
   23bc2:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   23bc4:	792a      	ldrb	r2, [r5, #4]
   23bc6:	4623      	mov	r3, r4
   23bc8:	f803 2b08 	strb.w	r2, [r3], #8
	list->prev = list;
   23bcc:	60e3      	str	r3, [r4, #12]
	list->next = list;
   23bce:	60a3      	str	r3, [r4, #8]
	list->prev = list;
   23bd0:	f104 0310 	add.w	r3, r4, #16
   23bd4:	6163      	str	r3, [r4, #20]
	list->next = list;
   23bd6:	6123      	str	r3, [r4, #16]
	list->prev = list;
   23bd8:	f104 0318 	add.w	r3, r4, #24
   23bdc:	61e3      	str	r3, [r4, #28]
	list->next = list;
   23bde:	61a3      	str	r3, [r4, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   23be0:	4628      	mov	r0, r5
   23be2:	f000 f80f 	bl	23c04 <metal_sys_init>
	if (error)
		return error;

	return error;
}
   23be6:	bd38      	pop	{r3, r4, r5, pc}
   23be8:	20009cc8 	.word	0x20009cc8

00023bec <metal_finish>:

void metal_finish(void)
{
   23bec:	b508      	push	{r3, lr}
	metal_sys_finish();
   23bee:	f000 f811 	bl	23c14 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
   23bf2:	2220      	movs	r2, #32
   23bf4:	2100      	movs	r1, #0
   23bf6:	4802      	ldr	r0, [pc, #8]	; (23c00 <metal_finish+0x14>)
   23bf8:	f007 facd 	bl	2b196 <memset>
}
   23bfc:	bd08      	pop	{r3, pc}
   23bfe:	bf00      	nop
   23c00:	20009cc8 	.word	0x20009cc8

00023c04 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   23c04:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   23c06:	4802      	ldr	r0, [pc, #8]	; (23c10 <metal_sys_init+0xc>)
   23c08:	f7ff ff5e 	bl	23ac8 <metal_bus_register>
	return 0;
}
   23c0c:	2000      	movs	r0, #0
   23c0e:	bd08      	pop	{r3, pc}
   23c10:	200083fc 	.word	0x200083fc

00023c14 <metal_sys_finish>:

void metal_sys_finish(void)
{
   23c14:	b508      	push	{r3, lr}
	metal_bus_unregister(&metal_generic_bus);
   23c16:	4802      	ldr	r0, [pc, #8]	; (23c20 <metal_sys_finish+0xc>)
   23c18:	f7ff ff16 	bl	23a48 <metal_bus_unregister>
}
   23c1c:	bd08      	pop	{r3, pc}
   23c1e:	bf00      	nop
   23c20:	200083fc 	.word	0x200083fc

00023c24 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   23c24:	b40e      	push	{r1, r2, r3}
   23c26:	b500      	push	{lr}
   23c28:	b082      	sub	sp, #8
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   23c2a:	1e43      	subs	r3, r0, #1
   23c2c:	b2db      	uxtb	r3, r3
   23c2e:	2b06      	cmp	r3, #6
   23c30:	d900      	bls.n	23c34 <metal_zephyr_log_handler+0x10>
		level = METAL_LOG_EMERGENCY;
   23c32:	2000      	movs	r0, #0
	printk("%s", level_strs[level]);
   23c34:	4b07      	ldr	r3, [pc, #28]	; (23c54 <metal_zephyr_log_handler+0x30>)
   23c36:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   23c3a:	4807      	ldr	r0, [pc, #28]	; (23c58 <metal_zephyr_log_handler+0x34>)
   23c3c:	f005 fb04 	bl	29248 <printk>

	va_start(args, format);
   23c40:	a904      	add	r1, sp, #16
   23c42:	9101      	str	r1, [sp, #4]
	vprintk(format, args);
   23c44:	9803      	ldr	r0, [sp, #12]
   23c46:	f7ed fe6f 	bl	11928 <vprintk>
	va_end(args);
}
   23c4a:	b002      	add	sp, #8
   23c4c:	f85d eb04 	ldr.w	lr, [sp], #4
   23c50:	b003      	add	sp, #12
   23c52:	4770      	bx	lr
   23c54:	00033e78 	.word	0x00033e78
   23c58:	00030650 	.word	0x00030650

00023c5c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   23c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c60:	b087      	sub	sp, #28
   23c62:	9204      	str	r2, [sp, #16]
   23c64:	9305      	str	r3, [sp, #20]
   23c66:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
   23c6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (nvqs > num_vrings)
   23c6c:	4293      	cmp	r3, r2
   23c6e:	d341      	bcc.n	23cf4 <virtio_create_virtqueues+0x98>
   23c70:	4605      	mov	r5, r0
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   23c72:	2400      	movs	r4, #0
   23c74:	e01d      	b.n	23cb2 <virtio_create_virtqueues+0x56>
			size_t offset;
			struct metal_io_region *io = vring_info->io;

			offset = metal_io_virt_to_offset(io,
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
   23c76:	6899      	ldr	r1, [r3, #8]
   23c78:	8998      	ldrh	r0, [r3, #12]
   23c7a:	f00a fbf6 	bl	2e46a <vring_size>
   23c7e:	4603      	mov	r3, r0
   23c80:	2200      	movs	r2, #0
   23c82:	4639      	mov	r1, r7
   23c84:	4650      	mov	r0, sl
   23c86:	f00a fbaa 	bl	2e3de <metal_io_block_set>
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
				       callbacks[i], vdev->func->notify,
   23c8a:	6a2b      	ldr	r3, [r5, #32]
   23c8c:	6a1b      	ldr	r3, [r3, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   23c8e:	f856 2009 	ldr.w	r2, [r6, r9]
   23c92:	9202      	str	r2, [sp, #8]
   23c94:	9301      	str	r3, [sp, #4]
   23c96:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
   23c9a:	9300      	str	r3, [sp, #0]
   23c9c:	4643      	mov	r3, r8
   23c9e:	9a05      	ldr	r2, [sp, #20]
   23ca0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   23ca4:	b2a1      	uxth	r1, r4
   23ca6:	4628      	mov	r0, r5
   23ca8:	f00a fd28 	bl	2e6fc <virtqueue_create>
				       vring_info->vq);
		if (ret)
   23cac:	4603      	mov	r3, r0
   23cae:	b9e8      	cbnz	r0, 23cec <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
   23cb0:	3401      	adds	r4, #1
   23cb2:	9b04      	ldr	r3, [sp, #16]
   23cb4:	429c      	cmp	r4, r3
   23cb6:	d218      	bcs.n	23cea <virtio_create_virtqueues+0x8e>
		vring_info = &vdev->vrings_info[i];
   23cb8:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   23cba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   23cbe:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   23cc2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
		vring_alloc = &vring_info->info;
   23cc6:	f103 0804 	add.w	r8, r3, #4
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   23cca:	69aa      	ldr	r2, [r5, #24]
   23ccc:	2a00      	cmp	r2, #0
   23cce:	d1dc      	bne.n	23c8a <virtio_create_virtqueues+0x2e>
			struct metal_io_region *io = vring_info->io;
   23cd0:	f8d3 a014 	ldr.w	sl, [r3, #20]
			offset = metal_io_virt_to_offset(io,
   23cd4:	685f      	ldr	r7, [r3, #4]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   23cd6:	f8da 2000 	ldr.w	r2, [sl]
   23cda:	1abf      	subs	r7, r7, r2

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   23cdc:	f8da 2008 	ldr.w	r2, [sl, #8]
   23ce0:	4297      	cmp	r7, r2
   23ce2:	d3c8      	bcc.n	23c76 <virtio_create_virtqueues+0x1a>
   23ce4:	f04f 37ff 	mov.w	r7, #4294967295
   23ce8:	e7c5      	b.n	23c76 <virtio_create_virtqueues+0x1a>
			return ret;
	}
	return 0;
   23cea:	2300      	movs	r3, #0
}
   23cec:	4618      	mov	r0, r3
   23cee:	b007      	add	sp, #28
   23cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERROR_VQUEUE_INVLD_PARAM;
   23cf4:	4b00      	ldr	r3, [pc, #0]	; (23cf8 <virtio_create_virtqueues+0x9c>)
   23cf6:	e7f9      	b.n	23cec <virtio_create_virtqueues+0x90>
   23cf8:	fffff440 	.word	0xfffff440

00023cfc <virtqueue_free>:
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
	if (vq) {
   23cfc:	b1a0      	cbz	r0, 23d28 <virtqueue_free+0x2c>
{
   23cfe:	b510      	push	{r4, lr}
   23d00:	4604      	mov	r4, r0
		if (vq->vq_free_cnt != vq->vq_nentries) {
   23d02:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   23d04:	8943      	ldrh	r3, [r0, #10]
   23d06:	429a      	cmp	r2, r3
   23d08:	d00a      	beq.n	23d20 <virtqueue_free+0x24>
			metal_log(METAL_LOG_WARNING,
   23d0a:	4b08      	ldr	r3, [pc, #32]	; (23d2c <virtqueue_free+0x30>)
   23d0c:	781b      	ldrb	r3, [r3, #0]
   23d0e:	2b03      	cmp	r3, #3
   23d10:	d906      	bls.n	23d20 <virtqueue_free+0x24>
   23d12:	4b06      	ldr	r3, [pc, #24]	; (23d2c <virtqueue_free+0x30>)
   23d14:	685b      	ldr	r3, [r3, #4]
   23d16:	b11b      	cbz	r3, 23d20 <virtqueue_free+0x24>
   23d18:	6842      	ldr	r2, [r0, #4]
   23d1a:	4905      	ldr	r1, [pc, #20]	; (23d30 <virtqueue_free+0x34>)
   23d1c:	2004      	movs	r0, #4
   23d1e:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   23d20:	4620      	mov	r0, r4
   23d22:	f00b fb35 	bl	2f390 <k_free>
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   23d26:	bd10      	pop	{r4, pc}
   23d28:	4770      	bx	lr
   23d2a:	bf00      	nop
   23d2c:	20009cc8 	.word	0x20009cc8
   23d30:	00033e98 	.word	0x00033e98

00023d34 <virtqueue_add_consumed_buffer>:
				  uint32_t len)
{
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   23d34:	8943      	ldrh	r3, [r0, #10]
   23d36:	428b      	cmp	r3, r1
   23d38:	d316      	bcc.n	23d68 <virtqueue_add_consumed_buffer+0x34>
{
   23d3a:	b410      	push	{r4}
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   23d3c:	6a04      	ldr	r4, [r0, #32]
   23d3e:	f8b4 c002 	ldrh.w	ip, [r4, #2]
   23d42:	3b01      	subs	r3, #1
	used_desc = &vq->vq_ring.used->ring[used_idx];
   23d44:	ea03 030c 	and.w	r3, r3, ip
	used_desc->id = head_idx;
   23d48:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   23d4c:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   23d4e:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   23d50:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   23d54:	6a02      	ldr	r2, [r0, #32]
   23d56:	8853      	ldrh	r3, [r2, #2]
   23d58:	3301      	adds	r3, #1
   23d5a:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   23d5c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   23d5e:	3301      	adds	r3, #1
   23d60:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   23d62:	2000      	movs	r0, #0
}
   23d64:	bc10      	pop	{r4}
   23d66:	4770      	bx	lr
		return ERROR_VRING_NO_BUFF;
   23d68:	4800      	ldr	r0, [pc, #0]	; (23d6c <virtqueue_add_consumed_buffer+0x38>)
}
   23d6a:	4770      	bx	lr
   23d6c:	fffff441 	.word	0xfffff441

00023d70 <rpmsg_is_address_set>:
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size)
   23d70:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   23d74:	d40a      	bmi.n	23d8c <rpmsg_is_address_set+0x1c>
   23d76:	428a      	cmp	r2, r1
   23d78:	da0a      	bge.n	23d90 <rpmsg_is_address_set+0x20>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   23d7a:	0953      	lsrs	r3, r2, #5
   23d7c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   23d80:	f002 021f 	and.w	r2, r2, #31
   23d84:	40d0      	lsrs	r0, r2
   23d86:	f000 0001 	and.w	r0, r0, #1
		return metal_bitmap_is_bit_set(bitmap, addr);
   23d8a:	4770      	bx	lr
	else
		return RPMSG_ERR_PARAM;
   23d8c:	4801      	ldr	r0, [pc, #4]	; (23d94 <rpmsg_is_address_set+0x24>)
   23d8e:	4770      	bx	lr
   23d90:	4800      	ldr	r0, [pc, #0]	; (23d94 <rpmsg_is_address_set+0x24>)
}
   23d92:	4770      	bx	lr
   23d94:	fffff82d 	.word	0xfffff82d

00023d98 <rpmsg_set_address>:
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size) {
   23d98:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   23d9c:	d40f      	bmi.n	23dbe <rpmsg_set_address+0x26>
   23d9e:	428a      	cmp	r2, r1
   23da0:	da0f      	bge.n	23dc2 <rpmsg_set_address+0x2a>
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   23da2:	ea4f 1c52 	mov.w	ip, r2, lsr #5
   23da6:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   23daa:	f002 021f 	and.w	r2, r2, #31
   23dae:	2101      	movs	r1, #1
   23db0:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   23db4:	4313      	orrs	r3, r2
   23db6:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
		metal_bitmap_set_bit(bitmap, addr);
		return RPMSG_SUCCESS;
   23dba:	2000      	movs	r0, #0
   23dbc:	4770      	bx	lr
	} else {
		return RPMSG_ERR_PARAM;
   23dbe:	4802      	ldr	r0, [pc, #8]	; (23dc8 <rpmsg_set_address+0x30>)
   23dc0:	4770      	bx	lr
   23dc2:	4801      	ldr	r0, [pc, #4]	; (23dc8 <rpmsg_set_address+0x30>)
	}
}
   23dc4:	4770      	bx	lr
   23dc6:	bf00      	nop
   23dc8:	fffff82d 	.word	0xfffff82d

00023dcc <rpmsg_send_offchannel_raw>:
			      uint32_t dst, const void *data, int len,
			      int wait)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   23dcc:	b1a0      	cbz	r0, 23df8 <rpmsg_send_offchannel_raw+0x2c>
{
   23dce:	b510      	push	{r4, lr}
   23dd0:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   23dd2:	6a00      	ldr	r0, [r0, #32]
   23dd4:	b190      	cbz	r0, 23dfc <rpmsg_send_offchannel_raw+0x30>
   23dd6:	b19b      	cbz	r3, 23e00 <rpmsg_send_offchannel_raw+0x34>
   23dd8:	f1b2 3fff 	cmp.w	r2, #4294967295
   23ddc:	d012      	beq.n	23e04 <rpmsg_send_offchannel_raw+0x38>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   23dde:	6f44      	ldr	r4, [r0, #116]	; 0x74
   23de0:	b194      	cbz	r4, 23e08 <rpmsg_send_offchannel_raw+0x3c>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   23de2:	f8dd c014 	ldr.w	ip, [sp, #20]
   23de6:	f8cd c004 	str.w	ip, [sp, #4]
   23dea:	f8dd c010 	ldr.w	ip, [sp, #16]
   23dee:	f8cd c000 	str.w	ip, [sp]
   23df2:	47a0      	blx	r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   23df4:	b002      	add	sp, #8
   23df6:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
   23df8:	4804      	ldr	r0, [pc, #16]	; (23e0c <rpmsg_send_offchannel_raw+0x40>)
}
   23dfa:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
   23dfc:	4803      	ldr	r0, [pc, #12]	; (23e0c <rpmsg_send_offchannel_raw+0x40>)
   23dfe:	e7f9      	b.n	23df4 <rpmsg_send_offchannel_raw+0x28>
   23e00:	4802      	ldr	r0, [pc, #8]	; (23e0c <rpmsg_send_offchannel_raw+0x40>)
   23e02:	e7f7      	b.n	23df4 <rpmsg_send_offchannel_raw+0x28>
   23e04:	4801      	ldr	r0, [pc, #4]	; (23e0c <rpmsg_send_offchannel_raw+0x40>)
   23e06:	e7f5      	b.n	23df4 <rpmsg_send_offchannel_raw+0x28>
	return RPMSG_ERR_PARAM;
   23e08:	4800      	ldr	r0, [pc, #0]	; (23e0c <rpmsg_send_offchannel_raw+0x40>)
   23e0a:	e7f3      	b.n	23df4 <rpmsg_send_offchannel_raw+0x28>
   23e0c:	fffff82d 	.word	0xfffff82d

00023e10 <rpmsg_send_offchannel_nocopy>:
int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   23e10:	b188      	cbz	r0, 23e36 <rpmsg_send_offchannel_nocopy+0x26>
{
   23e12:	b510      	push	{r4, lr}
   23e14:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   23e16:	6a00      	ldr	r0, [r0, #32]
   23e18:	b178      	cbz	r0, 23e3a <rpmsg_send_offchannel_nocopy+0x2a>
   23e1a:	b183      	cbz	r3, 23e3e <rpmsg_send_offchannel_nocopy+0x2e>
   23e1c:	f1b2 3fff 	cmp.w	r2, #4294967295
   23e20:	d00f      	beq.n	23e42 <rpmsg_send_offchannel_nocopy+0x32>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   23e22:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
   23e26:	b174      	cbz	r4, 23e46 <rpmsg_send_offchannel_nocopy+0x36>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   23e28:	f8dd c010 	ldr.w	ip, [sp, #16]
   23e2c:	f8cd c000 	str.w	ip, [sp]
   23e30:	47a0      	blx	r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   23e32:	b002      	add	sp, #8
   23e34:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
   23e36:	4805      	ldr	r0, [pc, #20]	; (23e4c <rpmsg_send_offchannel_nocopy+0x3c>)
}
   23e38:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
   23e3a:	4804      	ldr	r0, [pc, #16]	; (23e4c <rpmsg_send_offchannel_nocopy+0x3c>)
   23e3c:	e7f9      	b.n	23e32 <rpmsg_send_offchannel_nocopy+0x22>
   23e3e:	4803      	ldr	r0, [pc, #12]	; (23e4c <rpmsg_send_offchannel_nocopy+0x3c>)
   23e40:	e7f7      	b.n	23e32 <rpmsg_send_offchannel_nocopy+0x22>
   23e42:	4802      	ldr	r0, [pc, #8]	; (23e4c <rpmsg_send_offchannel_nocopy+0x3c>)
   23e44:	e7f5      	b.n	23e32 <rpmsg_send_offchannel_nocopy+0x22>
	return RPMSG_ERR_PARAM;
   23e46:	4801      	ldr	r0, [pc, #4]	; (23e4c <rpmsg_send_offchannel_nocopy+0x3c>)
   23e48:	e7f3      	b.n	23e32 <rpmsg_send_offchannel_nocopy+0x22>
   23e4a:	bf00      	nop
   23e4c:	fffff82d 	.word	0xfffff82d

00023e50 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   23e50:	b570      	push	{r4, r5, r6, lr}
   23e52:	4605      	mov	r5, r0
   23e54:	460c      	mov	r4, r1
   23e56:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   23e58:	4611      	mov	r1, r2
   23e5a:	b1a2      	cbz	r2, 23e86 <rpmsg_register_endpoint+0x36>
   23e5c:	2220      	movs	r2, #32
   23e5e:	4620      	mov	r0, r4
   23e60:	f007 f90d 	bl	2b07e <strncpy>
	ept->addr = src;
   23e64:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   23e66:	9b04      	ldr	r3, [sp, #16]
   23e68:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   23e6a:	9b05      	ldr	r3, [sp, #20]
   23e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   23e6e:	9b06      	ldr	r3, [sp, #24]
   23e70:	6323      	str	r3, [r4, #48]	; 0x30
	ept->rdev = rdev;
   23e72:	6225      	str	r5, [r4, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   23e74:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->prev = node->prev;
   23e78:	686a      	ldr	r2, [r5, #4]
   23e7a:	63a2      	str	r2, [r4, #56]	; 0x38
	new_node->next = node;
   23e7c:	6365      	str	r5, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   23e7e:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   23e80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23e82:	6013      	str	r3, [r2, #0]
}
   23e84:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   23e86:	4901      	ldr	r1, [pc, #4]	; (23e8c <rpmsg_register_endpoint+0x3c>)
   23e88:	e7e8      	b.n	23e5c <rpmsg_register_endpoint+0xc>
   23e8a:	bf00      	nop
   23e8c:	000347c0 	.word	0x000347c0

00023e90 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   23e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e94:	b084      	sub	sp, #16
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   23e96:	2800      	cmp	r0, #0
   23e98:	d05b      	beq.n	23f52 <rpmsg_create_ept+0xc2>
   23e9a:	460f      	mov	r7, r1
   23e9c:	4691      	mov	r9, r2
   23e9e:	461c      	mov	r4, r3
   23ea0:	4680      	mov	r8, r0
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   23ea2:	f101 0658 	add.w	r6, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   23ea6:	4630      	mov	r0, r6
   23ea8:	f00a fd46 	bl	2e938 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   23eac:	f1b4 3fff 	cmp.w	r4, #4294967295
   23eb0:	d012      	beq.n	23ed8 <rpmsg_create_ept+0x48>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
		if (addr == RPMSG_ADDR_ANY) {
			status = RPMSG_ERR_ADDR;
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   23eb2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   23eb6:	d320      	bcc.n	23efa <rpmsg_create_ept+0x6a>
		status = rpmsg_is_address_set(rdev->bitmap,
   23eb8:	f107 0a48 	add.w	sl, r7, #72	; 0x48
   23ebc:	4622      	mov	r2, r4
   23ebe:	2180      	movs	r1, #128	; 0x80
   23ec0:	4650      	mov	r0, sl
   23ec2:	f7ff ff55 	bl	23d70 <rpmsg_is_address_set>
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   23ec6:	4605      	mov	r5, r0
   23ec8:	b188      	cbz	r0, 23eee <rpmsg_create_ept+0x5e>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
   23eca:	2800      	cmp	r0, #0
   23ecc:	dd00      	ble.n	23ed0 <rpmsg_create_ept+0x40>
			status = RPMSG_ERR_ADDR;
   23ece:	4d22      	ldr	r5, [pc, #136]	; (23f58 <rpmsg_create_ept+0xc8>)
	z_impl_k_sem_give(sem);
   23ed0:	4630      	mov	r0, r6
   23ed2:	f001 fcfd 	bl	258d0 <z_impl_k_sem_give>
		rpmsg_unregister_endpoint(ept);
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
   23ed6:	e02c      	b.n	23f32 <rpmsg_create_ept+0xa2>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   23ed8:	2180      	movs	r1, #128	; 0x80
   23eda:	f107 0048 	add.w	r0, r7, #72	; 0x48
   23ede:	f00a fcfd 	bl	2e8dc <rpmsg_get_address>
   23ee2:	4604      	mov	r4, r0
		if (addr == RPMSG_ADDR_ANY) {
   23ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
   23ee8:	d031      	beq.n	23f4e <rpmsg_create_ept+0xbe>
	int status = RPMSG_SUCCESS;
   23eea:	2500      	movs	r5, #0
   23eec:	e006      	b.n	23efc <rpmsg_create_ept+0x6c>
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   23eee:	4622      	mov	r2, r4
   23ef0:	2180      	movs	r1, #128	; 0x80
   23ef2:	4650      	mov	r0, sl
   23ef4:	f7ff ff50 	bl	23d98 <rpmsg_set_address>
   23ef8:	e000      	b.n	23efc <rpmsg_create_ept+0x6c>
	int status = RPMSG_SUCCESS;
   23efa:	2500      	movs	r5, #0
	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   23efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23efe:	9302      	str	r3, [sp, #8]
   23f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23f02:	9301      	str	r3, [sp, #4]
   23f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23f06:	9300      	str	r3, [sp, #0]
   23f08:	4623      	mov	r3, r4
   23f0a:	464a      	mov	r2, r9
   23f0c:	4641      	mov	r1, r8
   23f0e:	4638      	mov	r0, r7
   23f10:	f7ff ff9e 	bl	23e50 <rpmsg_register_endpoint>
   23f14:	4630      	mov	r0, r6
   23f16:	f001 fcdb 	bl	258d0 <z_impl_k_sem_give>
	if (ept->name[0] && rdev->support_ns &&
   23f1a:	f898 3000 	ldrb.w	r3, [r8]
   23f1e:	b13b      	cbz	r3, 23f30 <rpmsg_create_ept+0xa0>
   23f20:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
   23f24:	b123      	cbz	r3, 23f30 <rpmsg_create_ept+0xa0>
	    ept->dest_addr == RPMSG_ADDR_ANY)
   23f26:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
   23f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
   23f2e:	d004      	beq.n	23f3a <rpmsg_create_ept+0xaa>
	if (status)
   23f30:	b94d      	cbnz	r5, 23f46 <rpmsg_create_ept+0xb6>
}
   23f32:	4628      	mov	r0, r5
   23f34:	b004      	add	sp, #16
   23f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   23f3a:	2100      	movs	r1, #0
   23f3c:	4640      	mov	r0, r8
   23f3e:	f00a fd24 	bl	2e98a <rpmsg_send_ns_message>
   23f42:	4605      	mov	r5, r0
   23f44:	e7f4      	b.n	23f30 <rpmsg_create_ept+0xa0>
		rpmsg_unregister_endpoint(ept);
   23f46:	4640      	mov	r0, r8
   23f48:	f00a fcfe 	bl	2e948 <rpmsg_unregister_endpoint>
   23f4c:	e7f1      	b.n	23f32 <rpmsg_create_ept+0xa2>
			status = RPMSG_ERR_ADDR;
   23f4e:	4d02      	ldr	r5, [pc, #8]	; (23f58 <rpmsg_create_ept+0xc8>)
   23f50:	e7be      	b.n	23ed0 <rpmsg_create_ept+0x40>
		return RPMSG_ERR_PARAM;
   23f52:	4d02      	ldr	r5, [pc, #8]	; (23f5c <rpmsg_create_ept+0xcc>)
   23f54:	e7ed      	b.n	23f32 <rpmsg_create_ept+0xa2>
   23f56:	bf00      	nop
   23f58:	fffff829 	.word	0xfffff829
   23f5c:	fffff82d 	.word	0xfffff82d

00023f60 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
   23f60:	b508      	push	{r3, lr}
   23f62:	4603      	mov	r3, r0
	return rvdev->vdev->role;
   23f64:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   23f68:	6992      	ldr	r2, [r2, #24]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
	int length = 0;

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   23f6a:	b93a      	cbnz	r2, 23f7c <_rpmsg_virtio_get_buffer_size+0x1c>
		/*
		 * If device role is Master then buffers are provided by us,
		 * so just provide the macro.
		 */
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   23f6c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   23f70:	3810      	subs	r0, #16
	}
#endif /*!VIRTIO_DEVICE_ONLY*/

#ifndef VIRTIO_DRIVER_ONLY
	if (role == RPMSG_REMOTE) {
   23f72:	2a01      	cmp	r2, #1
   23f74:	d004      	beq.n	23f80 <_rpmsg_virtio_get_buffer_size+0x20>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/

	if (length <= 0) {
   23f76:	2800      	cmp	r0, #0
   23f78:	dd08      	ble.n	23f8c <_rpmsg_virtio_get_buffer_size+0x2c>
		length = RPMSG_ERR_NO_BUFF;
	}

	return length;
}
   23f7a:	bd08      	pop	{r3, pc}
	int length = 0;
   23f7c:	2000      	movs	r0, #0
   23f7e:	e7f8      	b.n	23f72 <_rpmsg_virtio_get_buffer_size+0x12>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   23f80:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   23f84:	f00a fc81 	bl	2e88a <virtqueue_get_desc_size>
   23f88:	3810      	subs	r0, #16
   23f8a:	e7f4      	b.n	23f76 <_rpmsg_virtio_get_buffer_size+0x16>
		length = RPMSG_ERR_NO_BUFF;
   23f8c:	4800      	ldr	r0, [pc, #0]	; (23f90 <_rpmsg_virtio_get_buffer_size+0x30>)
	return length;
   23f8e:	e7f4      	b.n	23f7a <_rpmsg_virtio_get_buffer_size+0x1a>
   23f90:	fffff82e 	.word	0xfffff82e

00023f94 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   23f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f98:	b084      	sub	sp, #16
	struct virtio_device *vdev = vq->vq_dev;
   23f9a:	6803      	ldr	r3, [r0, #0]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   23f9c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   23f9e:	f107 0658 	add.w	r6, r7, #88	; 0x58
   23fa2:	4630      	mov	r0, r6
   23fa4:	f00a fd91 	bl	2eaca <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   23fa8:	f10d 020a 	add.w	r2, sp, #10
   23fac:	a903      	add	r1, sp, #12
   23fae:	4638      	mov	r0, r7
   23fb0:	f00a fe18 	bl	2ebe4 <rpmsg_virtio_get_rx_buffer>
   23fb4:	4605      	mov	r5, r0
   23fb6:	4630      	mov	r0, r6
   23fb8:	f001 fc8a 	bl	258d0 <z_impl_k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   23fbc:	e01c      	b.n	23ff8 <rpmsg_virtio_rx_callback+0x64>
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   23fbe:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
					 rp_hdr->len, rp_hdr->src, ept->priv);
   23fc2:	89aa      	ldrh	r2, [r5, #12]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   23fc4:	4629      	mov	r1, r5
   23fc6:	f851 3b10 	ldr.w	r3, [r1], #16
   23fca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   23fcc:	9000      	str	r0, [sp, #0]
   23fce:	4620      	mov	r0, r4
   23fd0:	47c0      	blx	r8

			RPMSG_ASSERT(status >= 0,
   23fd2:	2800      	cmp	r0, #0
   23fd4:	db2b      	blt.n	2402e <rpmsg_virtio_rx_callback+0x9a>
	__metal_mutex_acquire(mutex);
   23fd6:	4630      	mov	r0, r6
   23fd8:	f00a fd77 	bl	2eaca <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   23fdc:	68ab      	ldr	r3, [r5, #8]
   23fde:	2b00      	cmp	r3, #0
   23fe0:	da32      	bge.n	24048 <rpmsg_virtio_rx_callback+0xb4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   23fe2:	f10d 020a 	add.w	r2, sp, #10
   23fe6:	a903      	add	r1, sp, #12
   23fe8:	4638      	mov	r0, r7
   23fea:	f00a fdfb 	bl	2ebe4 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   23fee:	4605      	mov	r5, r0
   23ff0:	b390      	cbz	r0, 24058 <rpmsg_virtio_rx_callback+0xc4>
   23ff2:	4630      	mov	r0, r6
   23ff4:	f001 fc6c 	bl	258d0 <z_impl_k_sem_give>
	while (rp_hdr) {
   23ff8:	b39d      	cbz	r5, 24062 <rpmsg_virtio_rx_callback+0xce>
		rp_hdr->reserved = idx;
   23ffa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   23ffe:	60ab      	str	r3, [r5, #8]
   24000:	4630      	mov	r0, r6
   24002:	f00a fd62 	bl	2eaca <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   24006:	f04f 33ff 	mov.w	r3, #4294967295
   2400a:	686a      	ldr	r2, [r5, #4]
   2400c:	2100      	movs	r1, #0
   2400e:	4638      	mov	r0, r7
   24010:	f00a fcf7 	bl	2ea02 <rpmsg_get_endpoint>
   24014:	4604      	mov	r4, r0
   24016:	4630      	mov	r0, r6
   24018:	f001 fc5a 	bl	258d0 <z_impl_k_sem_give>
		if (ept) {
   2401c:	2c00      	cmp	r4, #0
   2401e:	d0da      	beq.n	23fd6 <rpmsg_virtio_rx_callback+0x42>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   24020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24022:	f1b3 3fff 	cmp.w	r3, #4294967295
   24026:	d1ca      	bne.n	23fbe <rpmsg_virtio_rx_callback+0x2a>
				ept->dest_addr = rp_hdr->src;
   24028:	682b      	ldr	r3, [r5, #0]
   2402a:	62a3      	str	r3, [r4, #40]	; 0x28
   2402c:	e7c7      	b.n	23fbe <rpmsg_virtio_rx_callback+0x2a>
			RPMSG_ASSERT(status >= 0,
   2402e:	4c0e      	ldr	r4, [pc, #56]	; (24068 <rpmsg_virtio_rx_callback+0xd4>)
   24030:	f44f 7302 	mov.w	r3, #520	; 0x208
   24034:	4622      	mov	r2, r4
   24036:	490d      	ldr	r1, [pc, #52]	; (2406c <rpmsg_virtio_rx_callback+0xd8>)
   24038:	480d      	ldr	r0, [pc, #52]	; (24070 <rpmsg_virtio_rx_callback+0xdc>)
   2403a:	f005 fd56 	bl	29aea <assert_print>
   2403e:	f44f 7102 	mov.w	r1, #520	; 0x208
   24042:	4620      	mov	r0, r4
   24044:	f005 fd4a 	bl	29adc <assert_post_action>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   24048:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2404c:	9a03      	ldr	r2, [sp, #12]
   2404e:	4629      	mov	r1, r5
   24050:	4638      	mov	r0, r7
   24052:	f00a fd8c 	bl	2eb6e <rpmsg_virtio_return_buffer>
   24056:	e7c4      	b.n	23fe2 <rpmsg_virtio_rx_callback+0x4e>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   24058:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   2405c:	f00a fc07 	bl	2e86e <virtqueue_kick>
   24060:	e7c7      	b.n	23ff2 <rpmsg_virtio_rx_callback+0x5e>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   24062:	b004      	add	sp, #16
   24064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24068:	00033ebc 	.word	0x00033ebc
   2406c:	00033f00 	.word	0x00033f00
   24070:	0002fdac 	.word	0x0002fdac

00024074 <rpmsg_virtio_send_offchannel_nocopy>:
{
   24074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24078:	b084      	sub	sp, #16
   2407a:	4604      	mov	r4, r0
   2407c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	hdr = RPMSG_LOCATE_HDR(data);
   2407e:	f1a3 0710 	sub.w	r7, r3, #16
	idx = hdr->reserved;
   24082:	f853 5c08 	ldr.w	r5, [r3, #-8]
   24086:	b2ad      	uxth	r5, r5
	rp_hdr.dst = dst;
   24088:	9201      	str	r2, [sp, #4]
	rp_hdr.src = src;
   2408a:	9100      	str	r1, [sp, #0]
	rp_hdr.len = len;
   2408c:	f8ad 600c 	strh.w	r6, [sp, #12]
	rp_hdr.reserved = 0;
   24090:	2300      	movs	r3, #0
   24092:	9302      	str	r3, [sp, #8]
	rp_hdr.flags = 0;
   24094:	f8ad 300e 	strh.w	r3, [sp, #14]
	io = rvdev->shbuf_io;
   24098:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2409c:	6801      	ldr	r1, [r0, #0]
   2409e:	1a79      	subs	r1, r7, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   240a0:	6883      	ldr	r3, [r0, #8]
   240a2:	4299      	cmp	r1, r3
   240a4:	d221      	bcs.n	240ea <rpmsg_virtio_send_offchannel_nocopy+0x76>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   240a6:	2310      	movs	r3, #16
   240a8:	466a      	mov	r2, sp
   240aa:	f00a f957 	bl	2e35c <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   240ae:	2810      	cmp	r0, #16
   240b0:	d11e      	bne.n	240f0 <rpmsg_virtio_send_offchannel_nocopy+0x7c>
	metal_mutex_acquire(&rdev->lock);
   240b2:	f104 0858 	add.w	r8, r4, #88	; 0x58
   240b6:	4640      	mov	r0, r8
   240b8:	f00a fd07 	bl	2eaca <__metal_mutex_acquire>
   240bc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   240c0:	699b      	ldr	r3, [r3, #24]
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   240c2:	bb13      	cbnz	r3, 2410a <rpmsg_virtio_send_offchannel_nocopy+0x96>
		buff_len = rvdev->config.h2r_buf_size;
   240c4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
   240c8:	462b      	mov	r3, r5
   240ca:	4639      	mov	r1, r7
   240cc:	4620      	mov	r0, r4
   240ce:	f00a fd6d 	bl	2ebac <rpmsg_virtio_enqueue_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   240d2:	bb08      	cbnz	r0, 24118 <rpmsg_virtio_send_offchannel_nocopy+0xa4>
	virtqueue_kick(rvdev->svq);
   240d4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   240d8:	f00a fbc9 	bl	2e86e <virtqueue_kick>
   240dc:	4640      	mov	r0, r8
   240de:	f001 fbf7 	bl	258d0 <z_impl_k_sem_give>
}
   240e2:	4630      	mov	r0, r6
   240e4:	b004      	add	sp, #16
   240e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   240ea:	f04f 31ff 	mov.w	r1, #4294967295
   240ee:	e7da      	b.n	240a6 <rpmsg_virtio_send_offchannel_nocopy+0x32>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   240f0:	4c10      	ldr	r4, [pc, #64]	; (24134 <rpmsg_virtio_send_offchannel_nocopy+0xc0>)
   240f2:	f240 138b 	movw	r3, #395	; 0x18b
   240f6:	4622      	mov	r2, r4
   240f8:	490f      	ldr	r1, [pc, #60]	; (24138 <rpmsg_virtio_send_offchannel_nocopy+0xc4>)
   240fa:	4810      	ldr	r0, [pc, #64]	; (2413c <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
   240fc:	f005 fcf5 	bl	29aea <assert_print>
   24100:	f240 118b 	movw	r1, #395	; 0x18b
   24104:	4620      	mov	r0, r4
   24106:	f005 fce9 	bl	29adc <assert_post_action>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   2410a:	4629      	mov	r1, r5
   2410c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   24110:	f00a fb52 	bl	2e7b8 <virtqueue_get_buffer_length>
   24114:	4602      	mov	r2, r0
   24116:	e7d7      	b.n	240c8 <rpmsg_virtio_send_offchannel_nocopy+0x54>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   24118:	4c06      	ldr	r4, [pc, #24]	; (24134 <rpmsg_virtio_send_offchannel_nocopy+0xc0>)
   2411a:	f44f 73cc 	mov.w	r3, #408	; 0x198
   2411e:	4622      	mov	r2, r4
   24120:	4907      	ldr	r1, [pc, #28]	; (24140 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
   24122:	4806      	ldr	r0, [pc, #24]	; (2413c <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
   24124:	f005 fce1 	bl	29aea <assert_print>
   24128:	f44f 71cc 	mov.w	r1, #408	; 0x198
   2412c:	4620      	mov	r0, r4
   2412e:	f005 fcd5 	bl	29adc <assert_post_action>
   24132:	bf00      	nop
   24134:	00033ebc 	.word	0x00033ebc
   24138:	00033f0c 	.word	0x00033f0c
   2413c:	0002fdac 	.word	0x0002fdac
   24140:	00033f28 	.word	0x00033f28

00024144 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
   24144:	b508      	push	{r3, lr}
   24146:	0c41      	lsrs	r1, r0, #17
   24148:	03c0      	lsls	r0, r0, #15
   2414a:	4b06      	ldr	r3, [pc, #24]	; (24164 <__metal_sleep_usec+0x20>)
   2414c:	18c0      	adds	r0, r0, r3
   2414e:	4a06      	ldr	r2, [pc, #24]	; (24168 <__metal_sleep_usec+0x24>)
   24150:	f04f 0300 	mov.w	r3, #0
   24154:	f141 0100 	adc.w	r1, r1, #0
   24158:	f7eb fffe 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2415c:	f003 fcb2 	bl	27ac4 <z_impl_k_sleep>
	k_sleep(K_USEC(usec));
	return 0;
}
   24160:	2000      	movs	r0, #0
   24162:	bd08      	pop	{r3, pc}
   24164:	000f423f 	.word	0x000f423f
   24168:	000f4240 	.word	0x000f4240

0002416c <rpmsg_virtio_send_offchannel_raw>:
{
   2416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24170:	b084      	sub	sp, #16
   24172:	4605      	mov	r5, r0
   24174:	460e      	mov	r6, r1
   24176:	4690      	mov	r8, r2
   24178:	4699      	mov	r9, r3
   2417a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   2417c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2417e:	a903      	add	r1, sp, #12
   24180:	f00a fd9c 	bl	2ecbc <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   24184:	b360      	cbz	r0, 241e0 <rpmsg_virtio_send_offchannel_raw+0x74>
   24186:	4682      	mov	sl, r0
	if (len > (int)buff_len)
   24188:	9c03      	ldr	r4, [sp, #12]
   2418a:	42bc      	cmp	r4, r7
   2418c:	db00      	blt.n	24190 <rpmsg_virtio_send_offchannel_raw+0x24>
   2418e:	463c      	mov	r4, r7
	io = rvdev->shbuf_io;
   24190:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   24194:	6801      	ldr	r1, [r0, #0]
   24196:	ebaa 0101 	sub.w	r1, sl, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2419a:	6883      	ldr	r3, [r0, #8]
   2419c:	4299      	cmp	r1, r3
   2419e:	d20f      	bcs.n	241c0 <rpmsg_virtio_send_offchannel_raw+0x54>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   241a0:	4623      	mov	r3, r4
   241a2:	464a      	mov	r2, r9
   241a4:	f00a f8da 	bl	2e35c <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   241a8:	4284      	cmp	r4, r0
   241aa:	d10c      	bne.n	241c6 <rpmsg_virtio_send_offchannel_raw+0x5a>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   241ac:	9400      	str	r4, [sp, #0]
   241ae:	4653      	mov	r3, sl
   241b0:	4642      	mov	r2, r8
   241b2:	4631      	mov	r1, r6
   241b4:	4628      	mov	r0, r5
   241b6:	f7ff ff5d 	bl	24074 <rpmsg_virtio_send_offchannel_nocopy>
}
   241ba:	b004      	add	sp, #16
   241bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   241c0:	f04f 31ff 	mov.w	r1, #4294967295
   241c4:	e7ec      	b.n	241a0 <rpmsg_virtio_send_offchannel_raw+0x34>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   241c6:	4c07      	ldr	r4, [pc, #28]	; (241e4 <rpmsg_virtio_send_offchannel_raw+0x78>)
   241c8:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   241cc:	4622      	mov	r2, r4
   241ce:	4906      	ldr	r1, [pc, #24]	; (241e8 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   241d0:	4806      	ldr	r0, [pc, #24]	; (241ec <rpmsg_virtio_send_offchannel_raw+0x80>)
   241d2:	f005 fc8a 	bl	29aea <assert_print>
   241d6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   241da:	4620      	mov	r0, r4
   241dc:	f005 fc7e 	bl	29adc <assert_post_action>
		return RPMSG_ERR_NO_BUFF;
   241e0:	4803      	ldr	r0, [pc, #12]	; (241f0 <rpmsg_virtio_send_offchannel_raw+0x84>)
   241e2:	e7ea      	b.n	241ba <rpmsg_virtio_send_offchannel_raw+0x4e>
   241e4:	00033ebc 	.word	0x00033ebc
   241e8:	00033f34 	.word	0x00033f34
   241ec:	0002fdac 	.word	0x0002fdac
   241f0:	fffff82e 	.word	0xfffff82e

000241f4 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   241f4:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   241f6:	b170      	cbz	r0, 24216 <rpmsg_virtio_get_buffer_size+0x22>
   241f8:	4604      	mov	r4, r0
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   241fa:	f100 0558 	add.w	r5, r0, #88	; 0x58
   241fe:	4628      	mov	r0, r5
   24200:	f00a fc63 	bl	2eaca <__metal_mutex_acquire>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
   24204:	4620      	mov	r0, r4
   24206:	f7ff feab 	bl	23f60 <_rpmsg_virtio_get_buffer_size>
   2420a:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2420c:	4628      	mov	r0, r5
   2420e:	f001 fb5f 	bl	258d0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);
	return size;
}
   24212:	4620      	mov	r0, r4
   24214:	bd38      	pop	{r3, r4, r5, pc}
		return RPMSG_ERR_PARAM;
   24216:	4c01      	ldr	r4, [pc, #4]	; (2421c <rpmsg_virtio_get_buffer_size+0x28>)
   24218:	e7fb      	b.n	24212 <rpmsg_virtio_get_buffer_size+0x1e>
   2421a:	bf00      	nop
   2421c:	fffff82d 	.word	0xfffff82d

00024220 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   24220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24224:	b08a      	sub	sp, #40	; 0x28
   24226:	4604      	mov	r4, r0
   24228:	460e      	mov	r6, r1
   2422a:	4617      	mov	r7, r2
   2422c:	461d      	mov	r5, r3
   2422e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   24232:	228c      	movs	r2, #140	; 0x8c
   24234:	2100      	movs	r1, #0
   24236:	f006 ffae 	bl	2b196 <memset>
	metal_mutex_init(&rdev->lock);
   2423a:	f104 0058 	add.w	r0, r4, #88	; 0x58
	return z_impl_k_sem_init(sem, initial_count, limit);
   2423e:	2201      	movs	r2, #1
   24240:	4611      	mov	r1, r2
   24242:	f00a fe85 	bl	2ef50 <z_impl_k_sem_init>
	rvdev->vdev = vdev;
   24246:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	rdev->ns_bind_cb = ns_bind_cb;
   2424a:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   2424c:	6274      	str	r4, [r6, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2424e:	4b68      	ldr	r3, [pc, #416]	; (243f0 <rpmsg_init_vdev_with_config+0x1d0>)
   24250:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   24252:	4b68      	ldr	r3, [pc, #416]	; (243f4 <rpmsg_init_vdev_with_config+0x1d4>)
   24254:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   24256:	4b68      	ldr	r3, [pc, #416]	; (243f8 <rpmsg_init_vdev_with_config+0x1d8>)
   24258:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   2425a:	4b68      	ldr	r3, [pc, #416]	; (243fc <rpmsg_init_vdev_with_config+0x1dc>)
   2425c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   24260:	4b67      	ldr	r3, [pc, #412]	; (24400 <rpmsg_init_vdev_with_config+0x1e0>)
   24262:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   24266:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2426a:	699f      	ldr	r7, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   2426c:	b957      	cbnz	r7, 24284 <rpmsg_init_vdev_with_config+0x64>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   2426e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   24270:	2b00      	cmp	r3, #0
   24272:	f000 80b4 	beq.w	243de <rpmsg_init_vdev_with_config+0x1be>
			return RPMSG_ERR_PARAM;
		}
		rvdev->config = *config;
   24276:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   2427a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2427c:	e892 0003 	ldmia.w	r2, {r0, r1}
   24280:	e883 0003 	stmia.w	r3, {r0, r1}
	(void)config;
#endif /*!VIRTIO_DEVICE_ONLY*/


#ifndef VIRTIO_DRIVER_ONLY
	if (role == RPMSG_REMOTE) {
   24284:	2f01      	cmp	r7, #1
   24286:	d03a      	beq.n	242fe <rpmsg_init_vdev_with_config+0xde>
	return rvdev->vdev->func->get_features(rvdev->vdev);
   24288:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   2428c:	6a03      	ldr	r3, [r0, #32]
   2428e:	689b      	ldr	r3, [r3, #8]
   24290:	4798      	blx	r3
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   24292:	6130      	str	r0, [r6, #16]
   24294:	2300      	movs	r3, #0
   24296:	6173      	str	r3, [r6, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   24298:	f000 0001 	and.w	r0, r0, #1
   2429c:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   242a0:	b9d7      	cbnz	r7, 242d8 <rpmsg_init_vdev_with_config+0xb8>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
   242a2:	f1b8 0f00 	cmp.w	r8, #0
   242a6:	f000 809d 	beq.w	243e4 <rpmsg_init_vdev_with_config+0x1c4>
			return RPMSG_ERR_PARAM;
		if (!shpool->size)
   242aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   242ae:	2b00      	cmp	r3, #0
   242b0:	f000 809b 	beq.w	243ea <rpmsg_init_vdev_with_config+0x1ca>
			return RPMSG_ERR_NO_BUFF;
		rvdev->shpool = shpool;
   242b4:	f8c4 80a4 	str.w	r8, [r4, #164]	; 0xa4

		vq_names[0] = "rx_vq";
   242b8:	4b52      	ldr	r3, [pc, #328]	; (24404 <rpmsg_init_vdev_with_config+0x1e4>)
   242ba:	9308      	str	r3, [sp, #32]
		vq_names[1] = "tx_vq";
   242bc:	4b52      	ldr	r3, [pc, #328]	; (24408 <rpmsg_init_vdev_with_config+0x1e8>)
   242be:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
   242c0:	4b52      	ldr	r3, [pc, #328]	; (2440c <rpmsg_init_vdev_with_config+0x1ec>)
   242c2:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   242c4:	4b52      	ldr	r3, [pc, #328]	; (24410 <rpmsg_init_vdev_with_config+0x1f0>)
   242c6:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   242c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   242ca:	681b      	ldr	r3, [r3, #0]
   242cc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[1].vq;
   242d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   242d2:	699b      	ldr	r3, [r3, #24]
   242d4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	}
#endif /*!VIRTIO_DEVICE_ONLY*/

#ifndef VIRTIO_DRIVER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   242d8:	2f01      	cmp	r7, #1
   242da:	d014      	beq.n	24306 <rpmsg_init_vdev_with_config+0xe6>
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	rvdev->shbuf_io = shm_io;
   242dc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   242e0:	ab06      	add	r3, sp, #24
   242e2:	9300      	str	r3, [sp, #0]
   242e4:	ab08      	add	r3, sp, #32
   242e6:	2202      	movs	r2, #2
   242e8:	2100      	movs	r1, #0
   242ea:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   242ee:	f7ff fcb5 	bl	23c5c <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   242f2:	4682      	mov	sl, r0
   242f4:	b1c0      	cbz	r0, 24328 <rpmsg_init_vdev_with_config+0x108>
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   242f6:	4650      	mov	r0, sl
   242f8:	b00a      	add	sp, #40	; 0x28
   242fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rpmsg_virtio_wait_remote_ready(rvdev);
   242fe:	4620      	mov	r0, r4
   24300:	f00a fbc5 	bl	2ea8e <rpmsg_virtio_wait_remote_ready>
   24304:	e7c0      	b.n	24288 <rpmsg_init_vdev_with_config+0x68>
		vq_names[0] = "tx_vq";
   24306:	4b40      	ldr	r3, [pc, #256]	; (24408 <rpmsg_init_vdev_with_config+0x1e8>)
   24308:	9308      	str	r3, [sp, #32]
		vq_names[1] = "rx_vq";
   2430a:	4b3e      	ldr	r3, [pc, #248]	; (24404 <rpmsg_init_vdev_with_config+0x1e4>)
   2430c:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_tx_callback;
   2430e:	4b40      	ldr	r3, [pc, #256]	; (24410 <rpmsg_init_vdev_with_config+0x1f0>)
   24310:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   24312:	4b3e      	ldr	r3, [pc, #248]	; (2440c <rpmsg_init_vdev_with_config+0x1ec>)
   24314:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   24316:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   24318:	699b      	ldr	r3, [r3, #24]
   2431a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[0].vq;
   2431e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   24320:	681b      	ldr	r3, [r3, #0]
   24322:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
   24326:	e7d9      	b.n	242dc <rpmsg_init_vdev_with_config+0xbc>
	virtqueue_disable_cb(rvdev->svq);
   24328:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   2432c:	f00a fa6d 	bl	2e80a <virtqueue_disable_cb>
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
   24330:	2300      	movs	r3, #0
   24332:	e006      	b.n	24342 <rpmsg_init_vdev_with_config+0x122>
		vq = vdev->vrings_info[i].vq;
   24334:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   24336:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   2433a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
		vq->shm_io = shm_io;
   2433e:	6295      	str	r5, [r2, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
   24340:	3301      	adds	r3, #1
   24342:	2b01      	cmp	r3, #1
   24344:	d9f6      	bls.n	24334 <rpmsg_init_vdev_with_config+0x114>
	if (role == RPMSG_HOST) {
   24346:	bb7f      	cbnz	r7, 243a8 <rpmsg_init_vdev_with_config+0x188>
		vqbuf.len = rvdev->config.r2h_buf_size;
   24348:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2434c:	9305      	str	r3, [sp, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   2434e:	46b9      	mov	r9, r7
   24350:	e012      	b.n	24378 <rpmsg_init_vdev_with_config+0x158>
			metal_io_block_set(shm_io,
   24352:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   24356:	2200      	movs	r2, #0
   24358:	4628      	mov	r0, r5
   2435a:	f00a f840 	bl	2e3de <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   2435e:	9600      	str	r6, [sp, #0]
   24360:	2301      	movs	r3, #1
   24362:	2200      	movs	r2, #0
   24364:	a904      	add	r1, sp, #16
   24366:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2436a:	f00a f9da 	bl	2e722 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   2436e:	4682      	mov	sl, r0
   24370:	2800      	cmp	r0, #0
   24372:	d1c0      	bne.n	242f6 <rpmsg_init_vdev_with_config+0xd6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24374:	f109 0901 	add.w	r9, r9, #1
   24378:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2437c:	895b      	ldrh	r3, [r3, #10]
   2437e:	454b      	cmp	r3, r9
   24380:	d912      	bls.n	243a8 <rpmsg_init_vdev_with_config+0x188>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   24382:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   24386:	4640      	mov	r0, r8
   24388:	f00a fc5f 	bl	2ec4a <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   2438c:	4606      	mov	r6, r0
   2438e:	b140      	cbz	r0, 243a2 <rpmsg_init_vdev_with_config+0x182>
			vqbuf.buf = buffer;
   24390:	9004      	str	r0, [sp, #16]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   24392:	6829      	ldr	r1, [r5, #0]
   24394:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   24396:	68ab      	ldr	r3, [r5, #8]
   24398:	4299      	cmp	r1, r3
   2439a:	d3da      	bcc.n	24352 <rpmsg_init_vdev_with_config+0x132>
   2439c:	f04f 31ff 	mov.w	r1, #4294967295
   243a0:	e7d7      	b.n	24352 <rpmsg_init_vdev_with_config+0x132>
				return RPMSG_ERR_NO_BUFF;
   243a2:	f8df a070 	ldr.w	sl, [pc, #112]	; 24414 <rpmsg_init_vdev_with_config+0x1f4>
   243a6:	e7a6      	b.n	242f6 <rpmsg_init_vdev_with_config+0xd6>
	list->prev = list;
   243a8:	6064      	str	r4, [r4, #4]
	list->next = list;
   243aa:	6024      	str	r4, [r4, #0]
	if (rdev->support_ns) {
   243ac:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   243b0:	b943      	cbnz	r3, 243c4 <rpmsg_init_vdev_with_config+0x1a4>
	if (role == RPMSG_HOST)
   243b2:	2f00      	cmp	r7, #0
   243b4:	d19f      	bne.n	242f6 <rpmsg_init_vdev_with_config+0xd6>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   243b6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   243ba:	6a03      	ldr	r3, [r0, #32]
   243bc:	685b      	ldr	r3, [r3, #4]
   243be:	2104      	movs	r1, #4
   243c0:	4798      	blx	r3
}
   243c2:	e798      	b.n	242f6 <rpmsg_init_vdev_with_config+0xd6>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   243c4:	2300      	movs	r3, #0
   243c6:	9302      	str	r3, [sp, #8]
   243c8:	4b13      	ldr	r3, [pc, #76]	; (24418 <rpmsg_init_vdev_with_config+0x1f8>)
   243ca:	9301      	str	r3, [sp, #4]
   243cc:	2335      	movs	r3, #53	; 0x35
   243ce:	9300      	str	r3, [sp, #0]
   243d0:	4a12      	ldr	r2, [pc, #72]	; (2441c <rpmsg_init_vdev_with_config+0x1fc>)
   243d2:	f104 0108 	add.w	r1, r4, #8
   243d6:	4620      	mov	r0, r4
   243d8:	f7ff fd3a 	bl	23e50 <rpmsg_register_endpoint>
   243dc:	e7e9      	b.n	243b2 <rpmsg_init_vdev_with_config+0x192>
			return RPMSG_ERR_PARAM;
   243de:	f8df a040 	ldr.w	sl, [pc, #64]	; 24420 <rpmsg_init_vdev_with_config+0x200>
   243e2:	e788      	b.n	242f6 <rpmsg_init_vdev_with_config+0xd6>
			return RPMSG_ERR_PARAM;
   243e4:	f8df a038 	ldr.w	sl, [pc, #56]	; 24420 <rpmsg_init_vdev_with_config+0x200>
   243e8:	e785      	b.n	242f6 <rpmsg_init_vdev_with_config+0xd6>
			return RPMSG_ERR_NO_BUFF;
   243ea:	f8df a028 	ldr.w	sl, [pc, #40]	; 24414 <rpmsg_init_vdev_with_config+0x1f4>
   243ee:	e782      	b.n	242f6 <rpmsg_init_vdev_with_config+0xd6>
   243f0:	0002416d 	.word	0x0002416d
   243f4:	0002eabb 	.word	0x0002eabb
   243f8:	0002ec15 	.word	0x0002ec15
   243fc:	0002ecbd 	.word	0x0002ecbd
   24400:	00024075 	.word	0x00024075
   24404:	00033f44 	.word	0x00033f44
   24408:	00033f4c 	.word	0x00033f4c
   2440c:	00023f95 	.word	0x00023f95
   24410:	0002eac9 	.word	0x0002eac9
   24414:	fffff82e 	.word	0xfffff82e
   24418:	0002eadb 	.word	0x0002eadb
   2441c:	00033f54 	.word	0x00033f54
   24420:	fffff82d 	.word	0xfffff82d

00024424 <rpmsg_init_vdev>:
{
   24424:	b510      	push	{r4, lr}
   24426:	b084      	sub	sp, #16
   24428:	4684      	mov	ip, r0
   2442a:	468e      	mov	lr, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   2442c:	4906      	ldr	r1, [pc, #24]	; (24448 <rpmsg_init_vdev+0x24>)
   2442e:	ac02      	add	r4, sp, #8
   24430:	c903      	ldmia	r1, {r0, r1}
   24432:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   24436:	9401      	str	r4, [sp, #4]
   24438:	9906      	ldr	r1, [sp, #24]
   2443a:	9100      	str	r1, [sp, #0]
   2443c:	4671      	mov	r1, lr
   2443e:	4660      	mov	r0, ip
   24440:	f7ff feee 	bl	24220 <rpmsg_init_vdev_with_config>
}
   24444:	b004      	add	sp, #16
   24446:	bd10      	pop	{r4, pc}
   24448:	0002f9b4 	.word	0x0002f9b4

0002444c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   2444c:	4b03      	ldr	r3, [pc, #12]	; (2445c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   2444e:	e000      	b.n	24452 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   24450:	3318      	adds	r3, #24
	while (dev < __device_end) {
   24452:	4a03      	ldr	r2, [pc, #12]	; (24460 <z_device_state_init+0x14>)
   24454:	4293      	cmp	r3, r2
   24456:	d3fb      	bcc.n	24450 <z_device_state_init+0x4>
	}
}
   24458:	4770      	bx	lr
   2445a:	bf00      	nop
   2445c:	0002f470 	.word	0x0002f470
   24460:	0002f548 	.word	0x0002f548

00024464 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   24464:	2804      	cmp	r0, #4
   24466:	d80c      	bhi.n	24482 <reason_to_str+0x1e>
   24468:	e8df f000 	tbb	[pc, r0]
   2446c:	07050d03 	.word	0x07050d03
   24470:	09          	.byte	0x09
   24471:	00          	.byte	0x00
   24472:	4806      	ldr	r0, [pc, #24]	; (2448c <reason_to_str+0x28>)
   24474:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   24476:	4806      	ldr	r0, [pc, #24]	; (24490 <reason_to_str+0x2c>)
   24478:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   2447a:	4806      	ldr	r0, [pc, #24]	; (24494 <reason_to_str+0x30>)
   2447c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   2447e:	4806      	ldr	r0, [pc, #24]	; (24498 <reason_to_str+0x34>)
   24480:	4770      	bx	lr
	default:
		return "Unknown error";
   24482:	4806      	ldr	r0, [pc, #24]	; (2449c <reason_to_str+0x38>)
   24484:	4770      	bx	lr
		return "Unhandled interrupt";
   24486:	4806      	ldr	r0, [pc, #24]	; (244a0 <reason_to_str+0x3c>)
	}
}
   24488:	4770      	bx	lr
   2448a:	bf00      	nop
   2448c:	00033f5c 	.word	0x00033f5c
   24490:	00033f80 	.word	0x00033f80
   24494:	00033f90 	.word	0x00033f90
   24498:	00033f9c 	.word	0x00033f9c
   2449c:	00033fac 	.word	0x00033fac
   244a0:	00033f6c 	.word	0x00033f6c

000244a4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   244a4:	b130      	cbz	r0, 244b4 <thread_name_get+0x10>
{
   244a6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   244a8:	f00a fc9d 	bl	2ede6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   244ac:	b120      	cbz	r0, 244b8 <thread_name_get+0x14>
   244ae:	7803      	ldrb	r3, [r0, #0]
   244b0:	b123      	cbz	r3, 244bc <thread_name_get+0x18>
}
   244b2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   244b4:	4802      	ldr	r0, [pc, #8]	; (244c0 <thread_name_get+0x1c>)
}
   244b6:	4770      	bx	lr
		thread_name = "unknown";
   244b8:	4801      	ldr	r0, [pc, #4]	; (244c0 <thread_name_get+0x1c>)
   244ba:	e7fa      	b.n	244b2 <thread_name_get+0xe>
   244bc:	4800      	ldr	r0, [pc, #0]	; (244c0 <thread_name_get+0x1c>)
	return thread_name;
   244be:	e7f8      	b.n	244b2 <thread_name_get+0xe>
   244c0:	00033fbc 	.word	0x00033fbc

000244c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   244c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   244c8:	b089      	sub	sp, #36	; 0x24
   244ca:	af00      	add	r7, sp, #0
   244cc:	4604      	mov	r4, r0
   244ce:	460d      	mov	r5, r1
	__asm__ volatile(
   244d0:	f04f 0320 	mov.w	r3, #32
   244d4:	f3ef 8811 	mrs	r8, BASEPRI
   244d8:	f383 8812 	msr	BASEPRI_MAX, r3
   244dc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   244e0:	f003 fb34 	bl	27b4c <z_impl_z_current_get>
   244e4:	4606      	mov	r6, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   244e6:	4620      	mov	r0, r4
   244e8:	f7ff ffbc 	bl	24464 <reason_to_str>
   244ec:	46e9      	mov	r9, sp
   244ee:	2301      	movs	r3, #1
   244f0:	713b      	strb	r3, [r7, #4]
   244f2:	2303      	movs	r3, #3
   244f4:	717b      	strb	r3, [r7, #5]
   244f6:	b08a      	sub	sp, #40	; 0x28
   244f8:	46ec      	mov	ip, sp
   244fa:	f11c 0210 	adds.w	r2, ip, #16
   244fe:	d021      	beq.n	24544 <z_fatal_error+0x80>
   24500:	f04f 0e16 	mov.w	lr, #22
   24504:	b152      	cbz	r2, 2451c <z_fatal_error+0x58>
   24506:	4673      	mov	r3, lr
   24508:	f1be 0f04 	cmp.w	lr, #4
   2450c:	dd02      	ble.n	24514 <z_fatal_error+0x50>
   2450e:	497e      	ldr	r1, [pc, #504]	; (24708 <z_fatal_error+0x244>)
   24510:	f8cc 1014 	str.w	r1, [ip, #20]
   24514:	2b08      	cmp	r3, #8
   24516:	dd01      	ble.n	2451c <z_fatal_error+0x58>
   24518:	f8cc 4018 	str.w	r4, [ip, #24]
   2451c:	2301      	movs	r3, #1
   2451e:	703b      	strb	r3, [r7, #0]
   24520:	2303      	movs	r3, #3
   24522:	707b      	strb	r3, [r7, #1]
   24524:	b1da      	cbz	r2, 2455e <z_fatal_error+0x9a>
   24526:	4673      	mov	r3, lr
   24528:	f1be 0f0c 	cmp.w	lr, #12
   2452c:	dd01      	ble.n	24532 <z_fatal_error+0x6e>
   2452e:	f8cc 001c 	str.w	r0, [ip, #28]
   24532:	2b10      	cmp	r3, #16
   24534:	dd02      	ble.n	2453c <z_fatal_error+0x78>
   24536:	2300      	movs	r3, #0
   24538:	f8cc 3020 	str.w	r3, [ip, #32]
   2453c:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   24540:	2100      	movs	r1, #0
   24542:	e00a      	b.n	2455a <z_fatal_error+0x96>
   24544:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   24548:	e7dc      	b.n	24504 <z_fatal_error+0x40>
   2454a:	f101 0020 	add.w	r0, r1, #32
   2454e:	4438      	add	r0, r7
   24550:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   24554:	f803 0b01 	strb.w	r0, [r3], #1
   24558:	3101      	adds	r1, #1
   2455a:	2901      	cmp	r1, #1
   2455c:	d9f5      	bls.n	2454a <z_fatal_error+0x86>
   2455e:	f1be 0f15 	cmp.w	lr, #21
   24562:	dd53      	ble.n	2460c <z_fatal_error+0x148>
   24564:	2316      	movs	r3, #22
   24566:	b14a      	cbz	r2, 2457c <z_fatal_error+0xb8>
   24568:	2105      	movs	r1, #5
   2456a:	7139      	strb	r1, [r7, #4]
   2456c:	2100      	movs	r1, #0
   2456e:	7179      	strb	r1, [r7, #5]
   24570:	71b9      	strb	r1, [r7, #6]
   24572:	2101      	movs	r1, #1
   24574:	71f9      	strb	r1, [r7, #7]
   24576:	6878      	ldr	r0, [r7, #4]
   24578:	f8cc 0010 	str.w	r0, [ip, #16]
   2457c:	2100      	movs	r1, #0
   2457e:	f36f 0100 	bfc	r1, #0, #1
   24582:	f36f 0141 	bfc	r1, #1, #1
   24586:	f36f 0182 	bfc	r1, #2, #1
   2458a:	f36f 01c5 	bfc	r1, #3, #3
   2458e:	2001      	movs	r0, #1
   24590:	f360 1188 	bfi	r1, r0, #6, #3
   24594:	f3c3 0309 	ubfx	r3, r3, #0, #10
   24598:	f363 2152 	bfi	r1, r3, #9, #10
   2459c:	f36f 41de 	bfc	r1, #19, #12
   245a0:	f36f 71df 	bfc	r1, #31, #1
   245a4:	2300      	movs	r3, #0
   245a6:	4859      	ldr	r0, [pc, #356]	; (2470c <z_fatal_error+0x248>)
   245a8:	f7ef fba8 	bl	13cfc <z_impl_z_log_msg_static_create>
   245ac:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   245ae:	b11d      	cbz	r5, 245b8 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   245b0:	69eb      	ldr	r3, [r5, #28]
   245b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   245b6:	bb63      	cbnz	r3, 24612 <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   245b8:	4630      	mov	r0, r6
   245ba:	f7ff ff73 	bl	244a4 <thread_name_get>
   245be:	46e9      	mov	r9, sp
   245c0:	2301      	movs	r3, #1
   245c2:	713b      	strb	r3, [r7, #4]
   245c4:	2303      	movs	r3, #3
   245c6:	717b      	strb	r3, [r7, #5]
   245c8:	b08a      	sub	sp, #40	; 0x28
   245ca:	46ec      	mov	ip, sp
   245cc:	f11c 0210 	adds.w	r2, ip, #16
   245d0:	d042      	beq.n	24658 <z_fatal_error+0x194>
   245d2:	f04f 0e12 	mov.w	lr, #18
   245d6:	b152      	cbz	r2, 245ee <z_fatal_error+0x12a>
   245d8:	4673      	mov	r3, lr
   245da:	f1be 0f04 	cmp.w	lr, #4
   245de:	dd02      	ble.n	245e6 <z_fatal_error+0x122>
   245e0:	494b      	ldr	r1, [pc, #300]	; (24710 <z_fatal_error+0x24c>)
   245e2:	f8cc 1014 	str.w	r1, [ip, #20]
   245e6:	2b08      	cmp	r3, #8
   245e8:	dd01      	ble.n	245ee <z_fatal_error+0x12a>
   245ea:	f8cc 6018 	str.w	r6, [ip, #24]
   245ee:	2301      	movs	r3, #1
   245f0:	703b      	strb	r3, [r7, #0]
   245f2:	2303      	movs	r3, #3
   245f4:	707b      	strb	r3, [r7, #1]
   245f6:	2a00      	cmp	r2, #0
   245f8:	d03b      	beq.n	24672 <z_fatal_error+0x1ae>
   245fa:	f1be 0f0c 	cmp.w	lr, #12
   245fe:	dd01      	ble.n	24604 <z_fatal_error+0x140>
   24600:	f8cc 001c 	str.w	r0, [ip, #28]
   24604:	f10c 0320 	add.w	r3, ip, #32
   24608:	2100      	movs	r1, #0
   2460a:	e030      	b.n	2466e <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2460c:	f06f 031b 	mvn.w	r3, #27
   24610:	e7a9      	b.n	24566 <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   24612:	4b40      	ldr	r3, [pc, #256]	; (24714 <z_fatal_error+0x250>)
   24614:	61fb      	str	r3, [r7, #28]
   24616:	2302      	movs	r3, #2
   24618:	713b      	strb	r3, [r7, #4]
   2461a:	2300      	movs	r3, #0
   2461c:	717b      	strb	r3, [r7, #5]
   2461e:	71bb      	strb	r3, [r7, #6]
   24620:	71fb      	strb	r3, [r7, #7]
   24622:	687a      	ldr	r2, [r7, #4]
   24624:	61ba      	str	r2, [r7, #24]
   24626:	4619      	mov	r1, r3
   24628:	f363 0100 	bfi	r1, r3, #0, #1
   2462c:	f363 0141 	bfi	r1, r3, #1, #1
   24630:	f363 0182 	bfi	r1, r3, #2, #1
   24634:	f363 01c5 	bfi	r1, r3, #3, #3
   24638:	2201      	movs	r2, #1
   2463a:	f362 1188 	bfi	r1, r2, #6, #3
   2463e:	2208      	movs	r2, #8
   24640:	f362 2152 	bfi	r1, r2, #9, #10
   24644:	f363 41de 	bfi	r1, r3, #19, #12
   24648:	f363 71df 	bfi	r1, r3, #31, #1
   2464c:	f107 0218 	add.w	r2, r7, #24
   24650:	482e      	ldr	r0, [pc, #184]	; (2470c <z_fatal_error+0x248>)
   24652:	f7ef fb53 	bl	13cfc <z_impl_z_log_msg_static_create>
   24656:	e7af      	b.n	245b8 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   24658:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   2465c:	e7bb      	b.n	245d6 <z_fatal_error+0x112>
   2465e:	f101 0020 	add.w	r0, r1, #32
   24662:	4438      	add	r0, r7
   24664:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   24668:	f803 0b01 	strb.w	r0, [r3], #1
   2466c:	3101      	adds	r1, #1
   2466e:	2901      	cmp	r1, #1
   24670:	d9f5      	bls.n	2465e <z_fatal_error+0x19a>
   24672:	f1be 0f11 	cmp.w	lr, #17
   24676:	dd35      	ble.n	246e4 <z_fatal_error+0x220>
   24678:	2312      	movs	r3, #18
   2467a:	b14a      	cbz	r2, 24690 <z_fatal_error+0x1cc>
   2467c:	2104      	movs	r1, #4
   2467e:	7139      	strb	r1, [r7, #4]
   24680:	2100      	movs	r1, #0
   24682:	7179      	strb	r1, [r7, #5]
   24684:	71b9      	strb	r1, [r7, #6]
   24686:	2101      	movs	r1, #1
   24688:	71f9      	strb	r1, [r7, #7]
   2468a:	6878      	ldr	r0, [r7, #4]
   2468c:	f8cc 0010 	str.w	r0, [ip, #16]
   24690:	2100      	movs	r1, #0
   24692:	f36f 0100 	bfc	r1, #0, #1
   24696:	f36f 0141 	bfc	r1, #1, #1
   2469a:	f36f 0182 	bfc	r1, #2, #1
   2469e:	f36f 01c5 	bfc	r1, #3, #3
   246a2:	2001      	movs	r0, #1
   246a4:	f360 1188 	bfi	r1, r0, #6, #3
   246a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   246ac:	f363 2152 	bfi	r1, r3, #9, #10
   246b0:	f36f 41de 	bfc	r1, #19, #12
   246b4:	f36f 71df 	bfc	r1, #31, #1
   246b8:	2300      	movs	r3, #0
   246ba:	4814      	ldr	r0, [pc, #80]	; (2470c <z_fatal_error+0x248>)
   246bc:	f7ef fb1e 	bl	13cfc <z_impl_z_log_msg_static_create>
   246c0:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   246c2:	4629      	mov	r1, r5
   246c4:	4620      	mov	r0, r4
   246c6:	f7fd fe7f 	bl	223c8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   246ca:	2c04      	cmp	r4, #4
   246cc:	d00d      	beq.n	246ea <z_fatal_error+0x226>
	__asm__ volatile(
   246ce:	f388 8811 	msr	BASEPRI, r8
   246d2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   246d6:	4630      	mov	r0, r6
   246d8:	f7f1 ffcc 	bl	16674 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   246dc:	3724      	adds	r7, #36	; 0x24
   246de:	46bd      	mov	sp, r7
   246e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   246e4:	f06f 031b 	mvn.w	r3, #27
   246e8:	e7c7      	b.n	2467a <z_fatal_error+0x1b6>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   246ea:	4c0b      	ldr	r4, [pc, #44]	; (24718 <z_fatal_error+0x254>)
   246ec:	2393      	movs	r3, #147	; 0x93
   246ee:	4622      	mov	r2, r4
   246f0:	490a      	ldr	r1, [pc, #40]	; (2471c <z_fatal_error+0x258>)
   246f2:	480b      	ldr	r0, [pc, #44]	; (24720 <z_fatal_error+0x25c>)
   246f4:	f005 f9f9 	bl	29aea <assert_print>
   246f8:	480a      	ldr	r0, [pc, #40]	; (24724 <z_fatal_error+0x260>)
   246fa:	f005 f9f6 	bl	29aea <assert_print>
   246fe:	2193      	movs	r1, #147	; 0x93
   24700:	4620      	mov	r0, r4
   24702:	f005 f9eb 	bl	29adc <assert_post_action>
   24706:	bf00      	nop
   24708:	00033fc4 	.word	0x00033fc4
   2470c:	0002f8a8 	.word	0x0002f8a8
   24710:	00034010 	.word	0x00034010
   24714:	00033fec 	.word	0x00033fec
   24718:	00034028 	.word	0x00034028
   2471c:	0003404c 	.word	0x0003404c
   24720:	0002fdac 	.word	0x0002fdac
   24724:	0003406c 	.word	0x0003406c

00024728 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   24728:	b570      	push	{r4, r5, r6, lr}
   2472a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2472c:	4b11      	ldr	r3, [pc, #68]	; (24774 <z_sys_init_run_level+0x4c>)
   2472e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24732:	e009      	b.n	24748 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   24734:	4240      	negs	r0, r0
   24736:	e017      	b.n	24768 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   24738:	68eb      	ldr	r3, [r5, #12]
   2473a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   2473c:	68ea      	ldr	r2, [r5, #12]
   2473e:	7853      	ldrb	r3, [r2, #1]
   24740:	f043 0301 	orr.w	r3, r3, #1
   24744:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24746:	3408      	adds	r4, #8
   24748:	1c73      	adds	r3, r6, #1
   2474a:	4a0a      	ldr	r2, [pc, #40]	; (24774 <z_sys_init_run_level+0x4c>)
   2474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   24750:	42a3      	cmp	r3, r4
   24752:	d90d      	bls.n	24770 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   24754:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   24756:	6823      	ldr	r3, [r4, #0]
   24758:	4628      	mov	r0, r5
   2475a:	4798      	blx	r3
		if (dev != NULL) {
   2475c:	2d00      	cmp	r5, #0
   2475e:	d0f2      	beq.n	24746 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   24760:	2800      	cmp	r0, #0
   24762:	d0eb      	beq.n	2473c <z_sys_init_run_level+0x14>
				if (rc < 0) {
   24764:	2800      	cmp	r0, #0
   24766:	dbe5      	blt.n	24734 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   24768:	28ff      	cmp	r0, #255	; 0xff
   2476a:	dde5      	ble.n	24738 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   2476c:	20ff      	movs	r0, #255	; 0xff
   2476e:	e7e3      	b.n	24738 <z_sys_init_run_level+0x10>
		}
	}
}
   24770:	bd70      	pop	{r4, r5, r6, pc}
   24772:	bf00      	nop
   24774:	000340b4 	.word	0x000340b4

00024778 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   24778:	b510      	push	{r4, lr}
   2477a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   2477c:	23b8      	movs	r3, #184	; 0xb8
   2477e:	4c11      	ldr	r4, [pc, #68]	; (247c4 <init_idle_thread+0x4c>)
   24780:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   24784:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24788:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2478c:	4b0e      	ldr	r3, [pc, #56]	; (247c8 <init_idle_thread+0x50>)
   2478e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   24792:	4a0e      	ldr	r2, [pc, #56]	; (247cc <init_idle_thread+0x54>)
   24794:	9205      	str	r2, [sp, #20]
   24796:	2201      	movs	r2, #1
   24798:	9204      	str	r2, [sp, #16]
   2479a:	220f      	movs	r2, #15
   2479c:	9203      	str	r2, [sp, #12]
   2479e:	2200      	movs	r2, #0
   247a0:	9202      	str	r2, [sp, #8]
   247a2:	9201      	str	r2, [sp, #4]
   247a4:	9300      	str	r3, [sp, #0]
   247a6:	4b0a      	ldr	r3, [pc, #40]	; (247d0 <init_idle_thread+0x58>)
   247a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   247ac:	4909      	ldr	r1, [pc, #36]	; (247d4 <init_idle_thread+0x5c>)
   247ae:	eb01 118c 	add.w	r1, r1, ip, lsl #6
   247b2:	4620      	mov	r0, r4
   247b4:	f000 fbc0 	bl	24f38 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   247b8:	7b63      	ldrb	r3, [r4, #13]
   247ba:	f023 0304 	bic.w	r3, r3, #4
   247be:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   247c0:	b006      	add	sp, #24
   247c2:	bd10      	pop	{r4, pc}
   247c4:	20009528 	.word	0x20009528
   247c8:	20009ce8 	.word	0x20009ce8
   247cc:	000340a4 	.word	0x000340a4
   247d0:	00025231 	.word	0x00025231
   247d4:	2000c018 	.word	0x2000c018

000247d8 <bg_thread_main>:
{
   247d8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   247da:	4b0a      	ldr	r3, [pc, #40]	; (24804 <bg_thread_main+0x2c>)
   247dc:	2201      	movs	r2, #1
   247de:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   247e0:	2003      	movs	r0, #3
   247e2:	f7ff ffa1 	bl	24728 <z_sys_init_run_level>
	boot_banner();
   247e6:	f004 fc75 	bl	290d4 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   247ea:	2004      	movs	r0, #4
   247ec:	f7ff ff9c 	bl	24728 <z_sys_init_run_level>
	z_init_static_threads();
   247f0:	f000 fca6 	bl	25140 <z_init_static_threads>
	main();
   247f4:	f7ec fa6a 	bl	10ccc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   247f8:	4a03      	ldr	r2, [pc, #12]	; (24808 <bg_thread_main+0x30>)
   247fa:	7b13      	ldrb	r3, [r2, #12]
   247fc:	f023 0301 	bic.w	r3, r3, #1
   24800:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   24802:	bd08      	pop	{r3, pc}
   24804:	20009d55 	.word	0x20009d55
   24808:	200095e0 	.word	0x200095e0

0002480c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   2480c:	b508      	push	{r3, lr}
   2480e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   24810:	4a01      	ldr	r2, [pc, #4]	; (24818 <switch_to_main_thread+0xc>)
   24812:	4802      	ldr	r0, [pc, #8]	; (2481c <switch_to_main_thread+0x10>)
   24814:	f7f0 fee4 	bl	155e0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   24818:	000247d9 	.word	0x000247d9
   2481c:	200095e0 	.word	0x200095e0

00024820 <z_bss_zero>:
{
   24820:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   24822:	4803      	ldr	r0, [pc, #12]	; (24830 <z_bss_zero+0x10>)
   24824:	4a03      	ldr	r2, [pc, #12]	; (24834 <z_bss_zero+0x14>)
   24826:	1a12      	subs	r2, r2, r0
   24828:	2100      	movs	r1, #0
   2482a:	f00a faa3 	bl	2ed74 <z_early_memset>
}
   2482e:	bd08      	pop	{r3, pc}
   24830:	20008748 	.word	0x20008748
   24834:	20009d58 	.word	0x20009d58

00024838 <z_init_cpu>:
{
   24838:	b510      	push	{r4, lr}
   2483a:	4604      	mov	r4, r0
	init_idle_thread(id);
   2483c:	f7ff ff9c 	bl	24778 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   24840:	23b8      	movs	r3, #184	; 0xb8
   24842:	490a      	ldr	r1, [pc, #40]	; (2486c <z_init_cpu+0x34>)
   24844:	fb03 1104 	mla	r1, r3, r4, r1
   24848:	4a09      	ldr	r2, [pc, #36]	; (24870 <z_init_cpu+0x38>)
   2484a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2484e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   24852:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   24854:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   24856:	4b07      	ldr	r3, [pc, #28]	; (24874 <z_init_cpu+0x3c>)
   24858:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
   2485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   24860:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   24864:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   24868:	6053      	str	r3, [r2, #4]
}
   2486a:	bd10      	pop	{r4, pc}
   2486c:	20009528 	.word	0x20009528
   24870:	20009ce8 	.word	0x20009ce8
   24874:	2000b818 	.word	0x2000b818

00024878 <prepare_multithreading>:
{
   24878:	b570      	push	{r4, r5, r6, lr}
   2487a:	b086      	sub	sp, #24
	z_sched_init();
   2487c:	f002 ffb4 	bl	277e8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   24880:	4d10      	ldr	r5, [pc, #64]	; (248c4 <prepare_multithreading+0x4c>)
   24882:	4b11      	ldr	r3, [pc, #68]	; (248c8 <prepare_multithreading+0x50>)
   24884:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24886:	4b11      	ldr	r3, [pc, #68]	; (248cc <prepare_multithreading+0x54>)
   24888:	9305      	str	r3, [sp, #20]
   2488a:	2301      	movs	r3, #1
   2488c:	9304      	str	r3, [sp, #16]
   2488e:	2400      	movs	r4, #0
   24890:	9403      	str	r4, [sp, #12]
   24892:	9402      	str	r4, [sp, #8]
   24894:	9401      	str	r4, [sp, #4]
   24896:	9400      	str	r4, [sp, #0]
   24898:	4b0d      	ldr	r3, [pc, #52]	; (248d0 <prepare_multithreading+0x58>)
   2489a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2489e:	490d      	ldr	r1, [pc, #52]	; (248d4 <prepare_multithreading+0x5c>)
   248a0:	4628      	mov	r0, r5
   248a2:	f000 fb49 	bl	24f38 <z_setup_new_thread>
   248a6:	4606      	mov	r6, r0
   248a8:	7b6b      	ldrb	r3, [r5, #13]
   248aa:	f023 0304 	bic.w	r3, r3, #4
   248ae:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   248b0:	4628      	mov	r0, r5
   248b2:	f002 fb2d 	bl	26f10 <z_ready_thread>
	z_init_cpu(0);
   248b6:	4620      	mov	r0, r4
   248b8:	f7ff ffbe 	bl	24838 <z_init_cpu>
}
   248bc:	4630      	mov	r0, r6
   248be:	b006      	add	sp, #24
   248c0:	bd70      	pop	{r4, r5, r6, pc}
   248c2:	bf00      	nop
   248c4:	200095e0 	.word	0x200095e0
   248c8:	20009ce8 	.word	0x20009ce8
   248cc:	000340ac 	.word	0x000340ac
   248d0:	000247d9 	.word	0x000247d9
   248d4:	2000c158 	.word	0x2000c158

000248d8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   248d8:	b500      	push	{lr}
   248da:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   248dc:	2000      	movs	r0, #0
   248de:	f7ff ff23 	bl	24728 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   248e2:	4b1f      	ldr	r3, [pc, #124]	; (24960 <z_cstart+0x88>)
	uint32_t msp =
   248e4:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   248e8:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   248ec:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   248f0:	4c1c      	ldr	r4, [pc, #112]	; (24964 <z_cstart+0x8c>)
   248f2:	23e0      	movs	r3, #224	; 0xe0
   248f4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   248f8:	2500      	movs	r5, #0
   248fa:	77e5      	strb	r5, [r4, #31]
   248fc:	7625      	strb	r5, [r4, #24]
   248fe:	7665      	strb	r5, [r4, #25]
   24900:	76a5      	strb	r5, [r4, #26]
   24902:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24906:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24908:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2490c:	6263      	str	r3, [r4, #36]	; 0x24
   2490e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24912:	f7f1 fdfb 	bl	1650c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24916:	f7f0 fc15 	bl	15144 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2491a:	f04f 33ff 	mov.w	r3, #4294967295
   2491e:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24920:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24922:	f7f2 f93f 	bl	16ba4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24926:	f7f1 febf 	bl	166a8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2492a:	f7ee ffc1 	bl	138b0 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   2492e:	2401      	movs	r4, #1
   24930:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   24934:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   24938:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   2493a:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
   2493c:	4668      	mov	r0, sp
   2493e:	f004 fbad 	bl	2909c <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   24942:	4b09      	ldr	r3, [pc, #36]	; (24968 <z_cstart+0x90>)
   24944:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24948:	f7ff fd80 	bl	2444c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   2494c:	4620      	mov	r0, r4
   2494e:	f7ff feeb 	bl	24728 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24952:	2002      	movs	r0, #2
   24954:	f7ff fee8 	bl	24728 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   24958:	f7ff ff8e 	bl	24878 <prepare_multithreading>
   2495c:	f7ff ff56 	bl	2480c <switch_to_main_thread>
   24960:	2000b818 	.word	0x2000b818
   24964:	e000ed00 	.word	0xe000ed00
   24968:	20009ce8 	.word	0x20009ce8

0002496c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   2496c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2496e:	4c0f      	ldr	r4, [pc, #60]	; (249ac <statics_init+0x40>)
   24970:	e005      	b.n	2497e <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24972:	68a2      	ldr	r2, [r4, #8]
   24974:	6861      	ldr	r1, [r4, #4]
   24976:	4620      	mov	r0, r4
   24978:	f00a fa04 	bl	2ed84 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2497c:	3418      	adds	r4, #24
   2497e:	4b0c      	ldr	r3, [pc, #48]	; (249b0 <statics_init+0x44>)
   24980:	429c      	cmp	r4, r3
   24982:	d804      	bhi.n	2498e <statics_init+0x22>
   24984:	4b0a      	ldr	r3, [pc, #40]	; (249b0 <statics_init+0x44>)
   24986:	429c      	cmp	r4, r3
   24988:	d3f3      	bcc.n	24972 <statics_init+0x6>
		}
	}
	return 0;
}
   2498a:	2000      	movs	r0, #0
   2498c:	bd10      	pop	{r4, pc}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2498e:	4c09      	ldr	r4, [pc, #36]	; (249b4 <statics_init+0x48>)
   24990:	2318      	movs	r3, #24
   24992:	4622      	mov	r2, r4
   24994:	4908      	ldr	r1, [pc, #32]	; (249b8 <statics_init+0x4c>)
   24996:	4809      	ldr	r0, [pc, #36]	; (249bc <statics_init+0x50>)
   24998:	f005 f8a7 	bl	29aea <assert_print>
   2499c:	4808      	ldr	r0, [pc, #32]	; (249c0 <statics_init+0x54>)
   2499e:	f005 f8a4 	bl	29aea <assert_print>
   249a2:	2118      	movs	r1, #24
   249a4:	4620      	mov	r0, r4
   249a6:	f005 f899 	bl	29adc <assert_post_action>
   249aa:	bf00      	nop
   249ac:	20008530 	.word	0x20008530
   249b0:	20008548 	.word	0x20008548
   249b4:	000340d0 	.word	0x000340d0
   249b8:	000340f4 	.word	0x000340f4
   249bc:	0002fdac 	.word	0x0002fdac
   249c0:	00030500 	.word	0x00030500

000249c4 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   249c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249c8:	b085      	sub	sp, #20
   249ca:	4680      	mov	r8, r0
   249cc:	9102      	str	r1, [sp, #8]
   249ce:	4693      	mov	fp, r2
   249d0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   249d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   249d6:	4648      	mov	r0, r9
   249d8:	4621      	mov	r1, r4
   249da:	f00a fbec 	bl	2f1b6 <sys_clock_timeout_end_calc>
   249de:	4607      	mov	r7, r0
   249e0:	468a      	mov	sl, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   249e2:	f1b4 3fff 	cmp.w	r4, #4294967295
   249e6:	bf08      	it	eq
   249e8:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   249ec:	d01b      	beq.n	24a26 <k_heap_aligned_alloc+0x62>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   249ee:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   249f2:	f04f 0320 	mov.w	r3, #32
   249f6:	f3ef 8511 	mrs	r5, BASEPRI
   249fa:	f383 8812 	msr	BASEPRI_MAX, r3
   249fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a02:	4630      	mov	r0, r6
   24a04:	f000 fa18 	bl	24e38 <z_spin_lock_valid>
   24a08:	9003      	str	r0, [sp, #12]
   24a0a:	b188      	cbz	r0, 24a30 <k_heap_aligned_alloc+0x6c>
	z_spin_lock_set_owner(l);
   24a0c:	4630      	mov	r0, r6
   24a0e:	f000 fa33 	bl	24e78 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24a12:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24a16:	b113      	cbz	r3, 24a1e <k_heap_aligned_alloc+0x5a>
   24a18:	ea54 0409 	orrs.w	r4, r4, r9
   24a1c:	d117      	bne.n	24a4e <k_heap_aligned_alloc+0x8a>

	bool blocked_alloc = false;
   24a1e:	f04f 0900 	mov.w	r9, #0
	void *ret = NULL;
   24a22:	464c      	mov	r4, r9

	while (ret == NULL) {
   24a24:	e038      	b.n	24a98 <k_heap_aligned_alloc+0xd4>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24a26:	f04f 37ff 	mov.w	r7, #4294967295
   24a2a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   24a2e:	e7de      	b.n	249ee <k_heap_aligned_alloc+0x2a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a30:	4c3a      	ldr	r4, [pc, #232]	; (24b1c <k_heap_aligned_alloc+0x158>)
   24a32:	2394      	movs	r3, #148	; 0x94
   24a34:	4622      	mov	r2, r4
   24a36:	493a      	ldr	r1, [pc, #232]	; (24b20 <k_heap_aligned_alloc+0x15c>)
   24a38:	483a      	ldr	r0, [pc, #232]	; (24b24 <k_heap_aligned_alloc+0x160>)
   24a3a:	f005 f856 	bl	29aea <assert_print>
   24a3e:	4631      	mov	r1, r6
   24a40:	4839      	ldr	r0, [pc, #228]	; (24b28 <k_heap_aligned_alloc+0x164>)
   24a42:	f005 f852 	bl	29aea <assert_print>
   24a46:	2194      	movs	r1, #148	; 0x94
   24a48:	4620      	mov	r0, r4
   24a4a:	f005 f847 	bl	29adc <assert_post_action>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24a4e:	4c37      	ldr	r4, [pc, #220]	; (24b2c <k_heap_aligned_alloc+0x168>)
   24a50:	234c      	movs	r3, #76	; 0x4c
   24a52:	4622      	mov	r2, r4
   24a54:	4936      	ldr	r1, [pc, #216]	; (24b30 <k_heap_aligned_alloc+0x16c>)
   24a56:	4833      	ldr	r0, [pc, #204]	; (24b24 <k_heap_aligned_alloc+0x160>)
   24a58:	f005 f847 	bl	29aea <assert_print>
   24a5c:	4835      	ldr	r0, [pc, #212]	; (24b34 <k_heap_aligned_alloc+0x170>)
   24a5e:	f005 f844 	bl	29aea <assert_print>
   24a62:	214c      	movs	r1, #76	; 0x4c
   24a64:	4620      	mov	r0, r4
   24a66:	f005 f839 	bl	29adc <assert_post_action>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24a6a:	9000      	str	r0, [sp, #0]
   24a6c:	9101      	str	r1, [sp, #4]
   24a6e:	f108 020c 	add.w	r2, r8, #12
   24a72:	4629      	mov	r1, r5
   24a74:	4630      	mov	r0, r6
   24a76:	f002 fbb9 	bl	271ec <z_pend_curr>
   24a7a:	f04f 0320 	mov.w	r3, #32
   24a7e:	f3ef 8511 	mrs	r5, BASEPRI
   24a82:	f383 8812 	msr	BASEPRI_MAX, r3
   24a86:	f3bf 8f6f 	isb	sy
   24a8a:	4630      	mov	r0, r6
   24a8c:	f000 f9d4 	bl	24e38 <z_spin_lock_valid>
   24a90:	b1c8      	cbz	r0, 24ac6 <k_heap_aligned_alloc+0x102>
	z_spin_lock_set_owner(l);
   24a92:	4630      	mov	r0, r6
   24a94:	f000 f9f0 	bl	24e78 <z_spin_lock_set_owner>
	while (ret == NULL) {
   24a98:	bb24      	cbnz	r4, 24ae4 <k_heap_aligned_alloc+0x120>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24a9a:	465a      	mov	r2, fp
   24a9c:	9902      	ldr	r1, [sp, #8]
   24a9e:	4640      	mov	r0, r8
   24aa0:	f7ec ffb4 	bl	11a0c <sys_heap_aligned_alloc>
   24aa4:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   24aa6:	f003 fca7 	bl	283f8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24aaa:	b9dc      	cbnz	r4, 24ae4 <k_heap_aligned_alloc+0x120>
		    (ret != NULL) || ((end - now) <= 0)) {
   24aac:	1a38      	subs	r0, r7, r0
   24aae:	eb6a 0101 	sbc.w	r1, sl, r1
   24ab2:	2801      	cmp	r0, #1
   24ab4:	f171 0300 	sbcs.w	r3, r1, #0
   24ab8:	db14      	blt.n	24ae4 <k_heap_aligned_alloc+0x120>
		if (!blocked_alloc) {
   24aba:	f1b9 0f00 	cmp.w	r9, #0
   24abe:	d1d4      	bne.n	24a6a <k_heap_aligned_alloc+0xa6>
			blocked_alloc = true;
   24ac0:	f8dd 900c 	ldr.w	r9, [sp, #12]
   24ac4:	e7d1      	b.n	24a6a <k_heap_aligned_alloc+0xa6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ac6:	4c15      	ldr	r4, [pc, #84]	; (24b1c <k_heap_aligned_alloc+0x158>)
   24ac8:	2394      	movs	r3, #148	; 0x94
   24aca:	4622      	mov	r2, r4
   24acc:	4914      	ldr	r1, [pc, #80]	; (24b20 <k_heap_aligned_alloc+0x15c>)
   24ace:	4815      	ldr	r0, [pc, #84]	; (24b24 <k_heap_aligned_alloc+0x160>)
   24ad0:	f005 f80b 	bl	29aea <assert_print>
   24ad4:	4631      	mov	r1, r6
   24ad6:	4814      	ldr	r0, [pc, #80]	; (24b28 <k_heap_aligned_alloc+0x164>)
   24ad8:	f005 f807 	bl	29aea <assert_print>
   24adc:	2194      	movs	r1, #148	; 0x94
   24ade:	4620      	mov	r0, r4
   24ae0:	f004 fffc 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ae4:	4630      	mov	r0, r6
   24ae6:	f000 f9b7 	bl	24e58 <z_spin_unlock_valid>
   24aea:	b138      	cbz	r0, 24afc <k_heap_aligned_alloc+0x138>
	__asm__ volatile(
   24aec:	f385 8811 	msr	BASEPRI, r5
   24af0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24af4:	4620      	mov	r0, r4
   24af6:	b005      	add	sp, #20
   24af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24afc:	4c07      	ldr	r4, [pc, #28]	; (24b1c <k_heap_aligned_alloc+0x158>)
   24afe:	23c2      	movs	r3, #194	; 0xc2
   24b00:	4622      	mov	r2, r4
   24b02:	490d      	ldr	r1, [pc, #52]	; (24b38 <k_heap_aligned_alloc+0x174>)
   24b04:	4807      	ldr	r0, [pc, #28]	; (24b24 <k_heap_aligned_alloc+0x160>)
   24b06:	f004 fff0 	bl	29aea <assert_print>
   24b0a:	4631      	mov	r1, r6
   24b0c:	480b      	ldr	r0, [pc, #44]	; (24b3c <k_heap_aligned_alloc+0x178>)
   24b0e:	f004 ffec 	bl	29aea <assert_print>
   24b12:	21c2      	movs	r1, #194	; 0xc2
   24b14:	4620      	mov	r0, r4
   24b16:	f004 ffe1 	bl	29adc <assert_post_action>
   24b1a:	bf00      	nop
   24b1c:	000301b0 	.word	0x000301b0
   24b20:	00030210 	.word	0x00030210
   24b24:	0002fdac 	.word	0x0002fdac
   24b28:	00030228 	.word	0x00030228
   24b2c:	000340d0 	.word	0x000340d0
   24b30:	0003410c 	.word	0x0003410c
   24b34:	00032b7c 	.word	0x00032b7c
   24b38:	000301e0 	.word	0x000301e0
   24b3c:	000301f8 	.word	0x000301f8

00024b40 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b44:	4604      	mov	r4, r0
   24b46:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24b48:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   24b4c:	f04f 0320 	mov.w	r3, #32
   24b50:	f3ef 8711 	mrs	r7, BASEPRI
   24b54:	f383 8812 	msr	BASEPRI_MAX, r3
   24b58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b5c:	4628      	mov	r0, r5
   24b5e:	f000 f96b 	bl	24e38 <z_spin_lock_valid>
   24b62:	b188      	cbz	r0, 24b88 <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   24b64:	4628      	mov	r0, r5
   24b66:	f000 f987 	bl	24e78 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   24b6a:	4631      	mov	r1, r6
   24b6c:	4620      	mov	r0, r4
   24b6e:	f7ec ff01 	bl	11974 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24b72:	f104 000c 	add.w	r0, r4, #12
   24b76:	f00a fae5 	bl	2f144 <z_unpend_all>
   24b7a:	b1a0      	cbz	r0, 24ba6 <k_heap_free+0x66>
		z_reschedule(&h->lock, key);
   24b7c:	4639      	mov	r1, r7
   24b7e:	4628      	mov	r0, r5
   24b80:	f001 ff3a 	bl	269f8 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b88:	4c13      	ldr	r4, [pc, #76]	; (24bd8 <k_heap_free+0x98>)
   24b8a:	2394      	movs	r3, #148	; 0x94
   24b8c:	4622      	mov	r2, r4
   24b8e:	4913      	ldr	r1, [pc, #76]	; (24bdc <k_heap_free+0x9c>)
   24b90:	4813      	ldr	r0, [pc, #76]	; (24be0 <k_heap_free+0xa0>)
   24b92:	f004 ffaa 	bl	29aea <assert_print>
   24b96:	4629      	mov	r1, r5
   24b98:	4812      	ldr	r0, [pc, #72]	; (24be4 <k_heap_free+0xa4>)
   24b9a:	f004 ffa6 	bl	29aea <assert_print>
   24b9e:	2194      	movs	r1, #148	; 0x94
   24ba0:	4620      	mov	r0, r4
   24ba2:	f004 ff9b 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ba6:	4628      	mov	r0, r5
   24ba8:	f000 f956 	bl	24e58 <z_spin_unlock_valid>
   24bac:	b120      	cbz	r0, 24bb8 <k_heap_free+0x78>
	__asm__ volatile(
   24bae:	f387 8811 	msr	BASEPRI, r7
   24bb2:	f3bf 8f6f 	isb	sy
   24bb6:	e7e5      	b.n	24b84 <k_heap_free+0x44>
   24bb8:	4c07      	ldr	r4, [pc, #28]	; (24bd8 <k_heap_free+0x98>)
   24bba:	23c2      	movs	r3, #194	; 0xc2
   24bbc:	4622      	mov	r2, r4
   24bbe:	490a      	ldr	r1, [pc, #40]	; (24be8 <k_heap_free+0xa8>)
   24bc0:	4807      	ldr	r0, [pc, #28]	; (24be0 <k_heap_free+0xa0>)
   24bc2:	f004 ff92 	bl	29aea <assert_print>
   24bc6:	4629      	mov	r1, r5
   24bc8:	4808      	ldr	r0, [pc, #32]	; (24bec <k_heap_free+0xac>)
   24bca:	f004 ff8e 	bl	29aea <assert_print>
   24bce:	21c2      	movs	r1, #194	; 0xc2
   24bd0:	4620      	mov	r0, r4
   24bd2:	f004 ff83 	bl	29adc <assert_post_action>
   24bd6:	bf00      	nop
   24bd8:	000301b0 	.word	0x000301b0
   24bdc:	00030210 	.word	0x00030210
   24be0:	0002fdac 	.word	0x0002fdac
   24be4:	00030228 	.word	0x00030228
   24be8:	000301e0 	.word	0x000301e0
   24bec:	000301f8 	.word	0x000301f8

00024bf0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   24bf0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24bf2:	4c0f      	ldr	r4, [pc, #60]	; (24c30 <init_mem_slab_module+0x40>)
	int rc = 0;
   24bf4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24bf6:	4b0f      	ldr	r3, [pc, #60]	; (24c34 <init_mem_slab_module+0x44>)
   24bf8:	429c      	cmp	r4, r3
   24bfa:	d809      	bhi.n	24c10 <init_mem_slab_module+0x20>
   24bfc:	4b0d      	ldr	r3, [pc, #52]	; (24c34 <init_mem_slab_module+0x44>)
   24bfe:	429c      	cmp	r4, r3
   24c00:	d214      	bcs.n	24c2c <init_mem_slab_module+0x3c>
		rc = create_free_list(slab);
   24c02:	4620      	mov	r0, r4
   24c04:	f00a f8c6 	bl	2ed94 <create_free_list>
		if (rc < 0) {
   24c08:	2800      	cmp	r0, #0
   24c0a:	db0f      	blt.n	24c2c <init_mem_slab_module+0x3c>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c0c:	3420      	adds	r4, #32
   24c0e:	e7f2      	b.n	24bf6 <init_mem_slab_module+0x6>
   24c10:	4c09      	ldr	r4, [pc, #36]	; (24c38 <init_mem_slab_module+0x48>)
   24c12:	233d      	movs	r3, #61	; 0x3d
   24c14:	4622      	mov	r2, r4
   24c16:	4909      	ldr	r1, [pc, #36]	; (24c3c <init_mem_slab_module+0x4c>)
   24c18:	4809      	ldr	r0, [pc, #36]	; (24c40 <init_mem_slab_module+0x50>)
   24c1a:	f004 ff66 	bl	29aea <assert_print>
   24c1e:	4809      	ldr	r0, [pc, #36]	; (24c44 <init_mem_slab_module+0x54>)
   24c20:	f004 ff63 	bl	29aea <assert_print>
   24c24:	213d      	movs	r1, #61	; 0x3d
   24c26:	4620      	mov	r0, r4
   24c28:	f004 ff58 	bl	29adc <assert_post_action>
		z_object_init(slab);
	}

out:
	return rc;
}
   24c2c:	bd10      	pop	{r4, pc}
   24c2e:	bf00      	nop
   24c30:	200084d0 	.word	0x200084d0
   24c34:	20008530 	.word	0x20008530
   24c38:	00034154 	.word	0x00034154
   24c3c:	0003417c 	.word	0x0003417c
   24c40:	0002fdac 	.word	0x0002fdac
   24c44:	00030500 	.word	0x00030500

00024c48 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24c4c:	b082      	sub	sp, #8
   24c4e:	4604      	mov	r4, r0
   24c50:	460e      	mov	r6, r1
   24c52:	4690      	mov	r8, r2
   24c54:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24c56:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24c5a:	f04f 0320 	mov.w	r3, #32
   24c5e:	f3ef 8a11 	mrs	sl, BASEPRI
   24c62:	f383 8812 	msr	BASEPRI_MAX, r3
   24c66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c6a:	4628      	mov	r0, r5
   24c6c:	f000 f8e4 	bl	24e38 <z_spin_lock_valid>
   24c70:	b1c0      	cbz	r0, 24ca4 <k_mem_slab_alloc+0x5c>
   24c72:	46d1      	mov	r9, sl
	z_spin_lock_set_owner(l);
   24c74:	4628      	mov	r0, r5
   24c76:	f000 f8ff 	bl	24e78 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24c7a:	69a1      	ldr	r1, [r4, #24]
   24c7c:	b309      	cbz	r1, 24cc2 <k_mem_slab_alloc+0x7a>
		/* take a free block */
		*mem = slab->free_list;
   24c7e:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   24c80:	680b      	ldr	r3, [r1, #0]
   24c82:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   24c84:	69e3      	ldr	r3, [r4, #28]
   24c86:	3301      	adds	r3, #1
   24c88:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24c8a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c8c:	4628      	mov	r0, r5
   24c8e:	f000 f8e3 	bl	24e58 <z_spin_unlock_valid>
   24c92:	b370      	cbz	r0, 24cf2 <k_mem_slab_alloc+0xaa>
	__asm__ volatile(
   24c94:	f389 8811 	msr	BASEPRI, r9
   24c98:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   24c9c:	4620      	mov	r0, r4
   24c9e:	b002      	add	sp, #8
   24ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ca4:	4c1a      	ldr	r4, [pc, #104]	; (24d10 <k_mem_slab_alloc+0xc8>)
   24ca6:	2394      	movs	r3, #148	; 0x94
   24ca8:	4622      	mov	r2, r4
   24caa:	491a      	ldr	r1, [pc, #104]	; (24d14 <k_mem_slab_alloc+0xcc>)
   24cac:	481a      	ldr	r0, [pc, #104]	; (24d18 <k_mem_slab_alloc+0xd0>)
   24cae:	f004 ff1c 	bl	29aea <assert_print>
   24cb2:	4629      	mov	r1, r5
   24cb4:	4819      	ldr	r0, [pc, #100]	; (24d1c <k_mem_slab_alloc+0xd4>)
   24cb6:	f004 ff18 	bl	29aea <assert_print>
   24cba:	2194      	movs	r1, #148	; 0x94
   24cbc:	4620      	mov	r0, r4
   24cbe:	f004 ff0d 	bl	29adc <assert_post_action>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24cc2:	ea57 0308 	orrs.w	r3, r7, r8
   24cc6:	d104      	bne.n	24cd2 <k_mem_slab_alloc+0x8a>
		*mem = NULL;
   24cc8:	2300      	movs	r3, #0
   24cca:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   24ccc:	f06f 040b 	mvn.w	r4, #11
   24cd0:	e7dc      	b.n	24c8c <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24cd2:	f8cd 8000 	str.w	r8, [sp]
   24cd6:	9701      	str	r7, [sp, #4]
   24cd8:	4622      	mov	r2, r4
   24cda:	4651      	mov	r1, sl
   24cdc:	4628      	mov	r0, r5
   24cde:	f002 fa85 	bl	271ec <z_pend_curr>
		if (result == 0) {
   24ce2:	4604      	mov	r4, r0
   24ce4:	2800      	cmp	r0, #0
   24ce6:	d1d9      	bne.n	24c9c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   24ce8:	4b0d      	ldr	r3, [pc, #52]	; (24d20 <k_mem_slab_alloc+0xd8>)
   24cea:	689b      	ldr	r3, [r3, #8]
   24cec:	695b      	ldr	r3, [r3, #20]
   24cee:	6033      	str	r3, [r6, #0]
		return result;
   24cf0:	e7d4      	b.n	24c9c <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24cf2:	4c07      	ldr	r4, [pc, #28]	; (24d10 <k_mem_slab_alloc+0xc8>)
   24cf4:	23c2      	movs	r3, #194	; 0xc2
   24cf6:	4622      	mov	r2, r4
   24cf8:	490a      	ldr	r1, [pc, #40]	; (24d24 <k_mem_slab_alloc+0xdc>)
   24cfa:	4807      	ldr	r0, [pc, #28]	; (24d18 <k_mem_slab_alloc+0xd0>)
   24cfc:	f004 fef5 	bl	29aea <assert_print>
   24d00:	4629      	mov	r1, r5
   24d02:	4809      	ldr	r0, [pc, #36]	; (24d28 <k_mem_slab_alloc+0xe0>)
   24d04:	f004 fef1 	bl	29aea <assert_print>
   24d08:	21c2      	movs	r1, #194	; 0xc2
   24d0a:	4620      	mov	r0, r4
   24d0c:	f004 fee6 	bl	29adc <assert_post_action>
   24d10:	000301b0 	.word	0x000301b0
   24d14:	00030210 	.word	0x00030210
   24d18:	0002fdac 	.word	0x0002fdac
   24d1c:	00030228 	.word	0x00030228
   24d20:	20009ce8 	.word	0x20009ce8
   24d24:	000301e0 	.word	0x000301e0
   24d28:	000301f8 	.word	0x000301f8

00024d2c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d30:	4604      	mov	r4, r0
   24d32:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24d34:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   24d38:	f04f 0320 	mov.w	r3, #32
   24d3c:	f3ef 8611 	mrs	r6, BASEPRI
   24d40:	f383 8812 	msr	BASEPRI_MAX, r3
   24d44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d48:	4638      	mov	r0, r7
   24d4a:	f000 f875 	bl	24e38 <z_spin_lock_valid>
   24d4e:	b1b8      	cbz	r0, 24d80 <k_mem_slab_free+0x54>
   24d50:	46b0      	mov	r8, r6
	z_spin_lock_set_owner(l);
   24d52:	4638      	mov	r0, r7
   24d54:	f000 f890 	bl	24e78 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24d58:	69a3      	ldr	r3, [r4, #24]
   24d5a:	b303      	cbz	r3, 24d9e <k_mem_slab_free+0x72>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   24d5c:	682b      	ldr	r3, [r5, #0]
   24d5e:	69a2      	ldr	r2, [r4, #24]
   24d60:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24d62:	682b      	ldr	r3, [r5, #0]
   24d64:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   24d66:	69e3      	ldr	r3, [r4, #28]
   24d68:	3b01      	subs	r3, #1
   24d6a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d6c:	4638      	mov	r0, r7
   24d6e:	f000 f873 	bl	24e58 <z_spin_unlock_valid>
   24d72:	b328      	cbz	r0, 24dc0 <k_mem_slab_free+0x94>
	__asm__ volatile(
   24d74:	f388 8811 	msr	BASEPRI, r8
   24d78:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d80:	4c17      	ldr	r4, [pc, #92]	; (24de0 <k_mem_slab_free+0xb4>)
   24d82:	2394      	movs	r3, #148	; 0x94
   24d84:	4622      	mov	r2, r4
   24d86:	4917      	ldr	r1, [pc, #92]	; (24de4 <k_mem_slab_free+0xb8>)
   24d88:	4817      	ldr	r0, [pc, #92]	; (24de8 <k_mem_slab_free+0xbc>)
   24d8a:	f004 feae 	bl	29aea <assert_print>
   24d8e:	4639      	mov	r1, r7
   24d90:	4816      	ldr	r0, [pc, #88]	; (24dec <k_mem_slab_free+0xc0>)
   24d92:	f004 feaa 	bl	29aea <assert_print>
   24d96:	2194      	movs	r1, #148	; 0x94
   24d98:	4620      	mov	r0, r4
   24d9a:	f004 fe9f 	bl	29adc <assert_post_action>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24d9e:	4620      	mov	r0, r4
   24da0:	f002 fcc8 	bl	27734 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   24da4:	2800      	cmp	r0, #0
   24da6:	d0d9      	beq.n	24d5c <k_mem_slab_free+0x30>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24da8:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   24daa:	2100      	movs	r1, #0
   24dac:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24db0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   24db2:	f002 f8ad 	bl	26f10 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24db6:	4631      	mov	r1, r6
   24db8:	4638      	mov	r0, r7
   24dba:	f001 fe1d 	bl	269f8 <z_reschedule>
			return;
   24dbe:	e7dd      	b.n	24d7c <k_mem_slab_free+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dc0:	4c07      	ldr	r4, [pc, #28]	; (24de0 <k_mem_slab_free+0xb4>)
   24dc2:	23c2      	movs	r3, #194	; 0xc2
   24dc4:	4622      	mov	r2, r4
   24dc6:	490a      	ldr	r1, [pc, #40]	; (24df0 <k_mem_slab_free+0xc4>)
   24dc8:	4807      	ldr	r0, [pc, #28]	; (24de8 <k_mem_slab_free+0xbc>)
   24dca:	f004 fe8e 	bl	29aea <assert_print>
   24dce:	4639      	mov	r1, r7
   24dd0:	4808      	ldr	r0, [pc, #32]	; (24df4 <k_mem_slab_free+0xc8>)
   24dd2:	f004 fe8a 	bl	29aea <assert_print>
   24dd6:	21c2      	movs	r1, #194	; 0xc2
   24dd8:	4620      	mov	r0, r4
   24dda:	f004 fe7f 	bl	29adc <assert_post_action>
   24dde:	bf00      	nop
   24de0:	000301b0 	.word	0x000301b0
   24de4:	00030210 	.word	0x00030210
   24de8:	0002fdac 	.word	0x0002fdac
   24dec:	00030228 	.word	0x00030228
   24df0:	000301e0 	.word	0x000301e0
   24df4:	000301f8 	.word	0x000301f8

00024df8 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   24df8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   24dfa:	4604      	mov	r4, r0
   24dfc:	b140      	cbz	r0, 24e10 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   24dfe:	221f      	movs	r2, #31
   24e00:	f104 0078 	add.w	r0, r4, #120	; 0x78
   24e04:	f006 f93b 	bl	2b07e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24e08:	2000      	movs	r0, #0
   24e0a:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   24e0e:	bd10      	pop	{r4, pc}
		thread = _current;
   24e10:	4b01      	ldr	r3, [pc, #4]	; (24e18 <z_impl_k_thread_name_set+0x20>)
   24e12:	689c      	ldr	r4, [r3, #8]
   24e14:	e7f3      	b.n	24dfe <z_impl_k_thread_name_set+0x6>
   24e16:	bf00      	nop
   24e18:	20009ce8 	.word	0x20009ce8

00024e1c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   24e1c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24e1e:	ea53 0102 	orrs.w	r1, r3, r2
   24e22:	d102      	bne.n	24e2a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   24e24:	f009 ffe1 	bl	2edea <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   24e28:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24e2a:	4902      	ldr	r1, [pc, #8]	; (24e34 <schedule_new_thread+0x18>)
   24e2c:	3018      	adds	r0, #24
   24e2e:	f003 f83d 	bl	27eac <z_add_timeout>
   24e32:	e7f9      	b.n	24e28 <schedule_new_thread+0xc>
   24e34:	00027065 	.word	0x00027065

00024e38 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   24e38:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   24e3a:	b13b      	cbz	r3, 24e4c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   24e3c:	f003 0303 	and.w	r3, r3, #3
   24e40:	4a04      	ldr	r2, [pc, #16]	; (24e54 <z_spin_lock_valid+0x1c>)
   24e42:	7d12      	ldrb	r2, [r2, #20]
   24e44:	4293      	cmp	r3, r2
   24e46:	d003      	beq.n	24e50 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   24e48:	2001      	movs	r0, #1
   24e4a:	4770      	bx	lr
   24e4c:	2001      	movs	r0, #1
   24e4e:	4770      	bx	lr
			return false;
   24e50:	2000      	movs	r0, #0
}
   24e52:	4770      	bx	lr
   24e54:	20009ce8 	.word	0x20009ce8

00024e58 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24e58:	6801      	ldr	r1, [r0, #0]
   24e5a:	4a06      	ldr	r2, [pc, #24]	; (24e74 <z_spin_unlock_valid+0x1c>)
   24e5c:	7d13      	ldrb	r3, [r2, #20]
   24e5e:	6892      	ldr	r2, [r2, #8]
   24e60:	4313      	orrs	r3, r2
   24e62:	4299      	cmp	r1, r3
   24e64:	d103      	bne.n	24e6e <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   24e66:	2300      	movs	r3, #0
   24e68:	6003      	str	r3, [r0, #0]
	return true;
   24e6a:	2001      	movs	r0, #1
   24e6c:	4770      	bx	lr
		return false;
   24e6e:	2000      	movs	r0, #0
}
   24e70:	4770      	bx	lr
   24e72:	bf00      	nop
   24e74:	20009ce8 	.word	0x20009ce8

00024e78 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   24e78:	4a02      	ldr	r2, [pc, #8]	; (24e84 <z_spin_lock_set_owner+0xc>)
   24e7a:	7d13      	ldrb	r3, [r2, #20]
   24e7c:	6892      	ldr	r2, [r2, #8]
   24e7e:	4313      	orrs	r3, r2
   24e80:	6003      	str	r3, [r0, #0]
}
   24e82:	4770      	bx	lr
   24e84:	20009ce8 	.word	0x20009ce8

00024e88 <z_thread_monitor_exit>:
{
   24e88:	b538      	push	{r3, r4, r5, lr}
   24e8a:	4604      	mov	r4, r0
	__asm__ volatile(
   24e8c:	f04f 0320 	mov.w	r3, #32
   24e90:	f3ef 8511 	mrs	r5, BASEPRI
   24e94:	f383 8812 	msr	BASEPRI_MAX, r3
   24e98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e9c:	481e      	ldr	r0, [pc, #120]	; (24f18 <z_thread_monitor_exit+0x90>)
   24e9e:	f7ff ffcb 	bl	24e38 <z_spin_lock_valid>
   24ea2:	b150      	cbz	r0, 24eba <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
   24ea4:	481c      	ldr	r0, [pc, #112]	; (24f18 <z_thread_monitor_exit+0x90>)
   24ea6:	f7ff ffe7 	bl	24e78 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   24eaa:	4b1c      	ldr	r3, [pc, #112]	; (24f1c <z_thread_monitor_exit+0x94>)
   24eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24eae:	42a3      	cmp	r3, r4
   24eb0:	d113      	bne.n	24eda <z_thread_monitor_exit+0x52>
		_kernel.threads = _kernel.threads->next_thread;
   24eb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   24eb4:	4b19      	ldr	r3, [pc, #100]	; (24f1c <z_thread_monitor_exit+0x94>)
   24eb6:	629a      	str	r2, [r3, #40]	; 0x28
   24eb8:	e016      	b.n	24ee8 <z_thread_monitor_exit+0x60>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24eba:	4c19      	ldr	r4, [pc, #100]	; (24f20 <z_thread_monitor_exit+0x98>)
   24ebc:	2394      	movs	r3, #148	; 0x94
   24ebe:	4622      	mov	r2, r4
   24ec0:	4918      	ldr	r1, [pc, #96]	; (24f24 <z_thread_monitor_exit+0x9c>)
   24ec2:	4819      	ldr	r0, [pc, #100]	; (24f28 <z_thread_monitor_exit+0xa0>)
   24ec4:	f004 fe11 	bl	29aea <assert_print>
   24ec8:	4913      	ldr	r1, [pc, #76]	; (24f18 <z_thread_monitor_exit+0x90>)
   24eca:	4818      	ldr	r0, [pc, #96]	; (24f2c <z_thread_monitor_exit+0xa4>)
   24ecc:	f004 fe0d 	bl	29aea <assert_print>
   24ed0:	2194      	movs	r1, #148	; 0x94
   24ed2:	4620      	mov	r0, r4
   24ed4:	f004 fe02 	bl	29adc <assert_post_action>
			prev_thread = prev_thread->next_thread;
   24ed8:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   24eda:	b113      	cbz	r3, 24ee2 <z_thread_monitor_exit+0x5a>
			(thread != prev_thread->next_thread)) {
   24edc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   24ede:	42a2      	cmp	r2, r4
   24ee0:	d1fa      	bne.n	24ed8 <z_thread_monitor_exit+0x50>
		if (prev_thread != NULL) {
   24ee2:	b10b      	cbz	r3, 24ee8 <z_thread_monitor_exit+0x60>
			prev_thread->next_thread = thread->next_thread;
   24ee4:	6f62      	ldr	r2, [r4, #116]	; 0x74
   24ee6:	675a      	str	r2, [r3, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ee8:	480b      	ldr	r0, [pc, #44]	; (24f18 <z_thread_monitor_exit+0x90>)
   24eea:	f7ff ffb5 	bl	24e58 <z_spin_unlock_valid>
   24eee:	b120      	cbz	r0, 24efa <z_thread_monitor_exit+0x72>
	__asm__ volatile(
   24ef0:	f385 8811 	msr	BASEPRI, r5
   24ef4:	f3bf 8f6f 	isb	sy
}
   24ef8:	bd38      	pop	{r3, r4, r5, pc}
   24efa:	4c09      	ldr	r4, [pc, #36]	; (24f20 <z_thread_monitor_exit+0x98>)
   24efc:	23c2      	movs	r3, #194	; 0xc2
   24efe:	4622      	mov	r2, r4
   24f00:	490b      	ldr	r1, [pc, #44]	; (24f30 <z_thread_monitor_exit+0xa8>)
   24f02:	4809      	ldr	r0, [pc, #36]	; (24f28 <z_thread_monitor_exit+0xa0>)
   24f04:	f004 fdf1 	bl	29aea <assert_print>
   24f08:	4903      	ldr	r1, [pc, #12]	; (24f18 <z_thread_monitor_exit+0x90>)
   24f0a:	480a      	ldr	r0, [pc, #40]	; (24f34 <z_thread_monitor_exit+0xac>)
   24f0c:	f004 fded 	bl	29aea <assert_print>
   24f10:	21c2      	movs	r1, #194	; 0xc2
   24f12:	4620      	mov	r0, r4
   24f14:	f004 fde2 	bl	29adc <assert_post_action>
   24f18:	20009d14 	.word	0x20009d14
   24f1c:	20009ce8 	.word	0x20009ce8
   24f20:	000301b0 	.word	0x000301b0
   24f24:	00030210 	.word	0x00030210
   24f28:	0002fdac 	.word	0x0002fdac
   24f2c:	00030228 	.word	0x00030228
   24f30:	000301e0 	.word	0x000301e0
   24f34:	000301f8 	.word	0x000301f8

00024f38 <z_setup_new_thread>:
{
   24f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f3c:	b085      	sub	sp, #20
   24f3e:	4604      	mov	r4, r0
   24f40:	460e      	mov	r6, r1
   24f42:	4617      	mov	r7, r2
   24f44:	461d      	mov	r5, r3
   24f46:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   24f4a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   24f4e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   24f52:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   24f56:	f1b8 0f0f 	cmp.w	r8, #15
   24f5a:	d05e      	beq.n	2501a <z_setup_new_thread+0xe2>
   24f5c:	f108 0310 	add.w	r3, r8, #16
   24f60:	2b1e      	cmp	r3, #30
   24f62:	d85e      	bhi.n	25022 <z_setup_new_thread+0xea>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24f64:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   24f68:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   24f6a:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   24f6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24f6e:	2204      	movs	r2, #4
   24f70:	4641      	mov	r1, r8
   24f72:	4620      	mov	r0, r4
   24f74:	f009 ff3d 	bl	2edf2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   24f78:	463a      	mov	r2, r7
   24f7a:	4631      	mov	r1, r6
   24f7c:	4620      	mov	r0, r4
   24f7e:	f009 ff20 	bl	2edc2 <setup_thread_stack>
   24f82:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24f84:	f8cd 9008 	str.w	r9, [sp, #8]
   24f88:	f8cd a004 	str.w	sl, [sp, #4]
   24f8c:	f8cd b000 	str.w	fp, [sp]
   24f90:	462b      	mov	r3, r5
   24f92:	4602      	mov	r2, r0
   24f94:	4631      	mov	r1, r6
   24f96:	4620      	mov	r0, r4
   24f98:	f7f0 fafc 	bl	15594 <arch_new_thread>
	new_thread->init_data = NULL;
   24f9c:	2300      	movs	r3, #0
   24f9e:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   24fa0:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   24fa2:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   24fa6:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   24faa:	f8c4 9070 	str.w	r9, [r4, #112]	; 0x70
	__asm__ volatile(
   24fae:	f04f 0320 	mov.w	r3, #32
   24fb2:	f3ef 8511 	mrs	r5, BASEPRI
   24fb6:	f383 8812 	msr	BASEPRI_MAX, r3
   24fba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fbe:	4835      	ldr	r0, [pc, #212]	; (25094 <z_setup_new_thread+0x15c>)
   24fc0:	f7ff ff3a 	bl	24e38 <z_spin_lock_valid>
   24fc4:	2800      	cmp	r0, #0
   24fc6:	d040      	beq.n	2504a <z_setup_new_thread+0x112>
	z_spin_lock_set_owner(l);
   24fc8:	4e32      	ldr	r6, [pc, #200]	; (25094 <z_setup_new_thread+0x15c>)
   24fca:	4630      	mov	r0, r6
   24fcc:	f7ff ff54 	bl	24e78 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
   24fd0:	4b31      	ldr	r3, [pc, #196]	; (25098 <z_setup_new_thread+0x160>)
   24fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   24fd4:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   24fd6:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24fd8:	4630      	mov	r0, r6
   24fda:	f7ff ff3d 	bl	24e58 <z_spin_unlock_valid>
   24fde:	2800      	cmp	r0, #0
   24fe0:	d042      	beq.n	25068 <z_setup_new_thread+0x130>
	__asm__ volatile(
   24fe2:	f385 8811 	msr	BASEPRI, r5
   24fe6:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   24fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   24fec:	2b00      	cmp	r3, #0
   24fee:	d04a      	beq.n	25086 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
   24ff0:	221f      	movs	r2, #31
   24ff2:	4619      	mov	r1, r3
   24ff4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   24ff8:	f006 f841 	bl	2b07e <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24ffc:	2300      	movs	r3, #0
   24ffe:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
   25002:	4b25      	ldr	r3, [pc, #148]	; (25098 <z_setup_new_thread+0x160>)
   25004:	689b      	ldr	r3, [r3, #8]
   25006:	2b00      	cmp	r3, #0
   25008:	d041      	beq.n	2508e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
   2500a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   2500e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   25012:	4638      	mov	r0, r7
   25014:	b005      	add	sp, #20
   25016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2501a:	4b20      	ldr	r3, [pc, #128]	; (2509c <z_setup_new_thread+0x164>)
   2501c:	429d      	cmp	r5, r3
   2501e:	d19d      	bne.n	24f5c <z_setup_new_thread+0x24>
   25020:	e7a0      	b.n	24f64 <z_setup_new_thread+0x2c>
   25022:	4c1f      	ldr	r4, [pc, #124]	; (250a0 <z_setup_new_thread+0x168>)
   25024:	f44f 7306 	mov.w	r3, #536	; 0x218
   25028:	4622      	mov	r2, r4
   2502a:	491e      	ldr	r1, [pc, #120]	; (250a4 <z_setup_new_thread+0x16c>)
   2502c:	481e      	ldr	r0, [pc, #120]	; (250a8 <z_setup_new_thread+0x170>)
   2502e:	f004 fd5c 	bl	29aea <assert_print>
   25032:	f06f 030f 	mvn.w	r3, #15
   25036:	220e      	movs	r2, #14
   25038:	4641      	mov	r1, r8
   2503a:	481c      	ldr	r0, [pc, #112]	; (250ac <z_setup_new_thread+0x174>)
   2503c:	f004 fd55 	bl	29aea <assert_print>
   25040:	f44f 7106 	mov.w	r1, #536	; 0x218
   25044:	4620      	mov	r0, r4
   25046:	f004 fd49 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2504a:	4c19      	ldr	r4, [pc, #100]	; (250b0 <z_setup_new_thread+0x178>)
   2504c:	2394      	movs	r3, #148	; 0x94
   2504e:	4622      	mov	r2, r4
   25050:	4918      	ldr	r1, [pc, #96]	; (250b4 <z_setup_new_thread+0x17c>)
   25052:	4815      	ldr	r0, [pc, #84]	; (250a8 <z_setup_new_thread+0x170>)
   25054:	f004 fd49 	bl	29aea <assert_print>
   25058:	490e      	ldr	r1, [pc, #56]	; (25094 <z_setup_new_thread+0x15c>)
   2505a:	4817      	ldr	r0, [pc, #92]	; (250b8 <z_setup_new_thread+0x180>)
   2505c:	f004 fd45 	bl	29aea <assert_print>
   25060:	2194      	movs	r1, #148	; 0x94
   25062:	4620      	mov	r0, r4
   25064:	f004 fd3a 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25068:	4c11      	ldr	r4, [pc, #68]	; (250b0 <z_setup_new_thread+0x178>)
   2506a:	23c2      	movs	r3, #194	; 0xc2
   2506c:	4622      	mov	r2, r4
   2506e:	4913      	ldr	r1, [pc, #76]	; (250bc <z_setup_new_thread+0x184>)
   25070:	480d      	ldr	r0, [pc, #52]	; (250a8 <z_setup_new_thread+0x170>)
   25072:	f004 fd3a 	bl	29aea <assert_print>
   25076:	4631      	mov	r1, r6
   25078:	4811      	ldr	r0, [pc, #68]	; (250c0 <z_setup_new_thread+0x188>)
   2507a:	f004 fd36 	bl	29aea <assert_print>
   2507e:	21c2      	movs	r1, #194	; 0xc2
   25080:	4620      	mov	r0, r4
   25082:	f004 fd2b 	bl	29adc <assert_post_action>
		new_thread->name[0] = '\0';
   25086:	2300      	movs	r3, #0
   25088:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   2508c:	e7b9      	b.n	25002 <z_setup_new_thread+0xca>
		new_thread->resource_pool = NULL;
   2508e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   25092:	e7be      	b.n	25012 <z_setup_new_thread+0xda>
   25094:	20009d14 	.word	0x20009d14
   25098:	20009ce8 	.word	0x20009ce8
   2509c:	00025231 	.word	0x00025231
   250a0:	0003419c 	.word	0x0003419c
   250a4:	000341f4 	.word	0x000341f4
   250a8:	0002fdac 	.word	0x0002fdac
   250ac:	00034274 	.word	0x00034274
   250b0:	000301b0 	.word	0x000301b0
   250b4:	00030210 	.word	0x00030210
   250b8:	00030228 	.word	0x00030228
   250bc:	000301e0 	.word	0x000301e0
   250c0:	000301f8 	.word	0x000301f8

000250c4 <z_impl_k_thread_create>:
{
   250c4:	b570      	push	{r4, r5, r6, lr}
   250c6:	b086      	sub	sp, #24
   250c8:	4604      	mov	r4, r0
   250ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
   250cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
   250ce:	f3ef 8005 	mrs	r0, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   250d2:	b9b8      	cbnz	r0, 25104 <z_impl_k_thread_create+0x40>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   250d4:	2000      	movs	r0, #0
   250d6:	9005      	str	r0, [sp, #20]
   250d8:	980e      	ldr	r0, [sp, #56]	; 0x38
   250da:	9004      	str	r0, [sp, #16]
   250dc:	980d      	ldr	r0, [sp, #52]	; 0x34
   250de:	9003      	str	r0, [sp, #12]
   250e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   250e2:	9002      	str	r0, [sp, #8]
   250e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   250e6:	9001      	str	r0, [sp, #4]
   250e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   250ea:	9000      	str	r0, [sp, #0]
   250ec:	4620      	mov	r0, r4
   250ee:	f7ff ff23 	bl	24f38 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   250f2:	f1b5 3fff 	cmp.w	r5, #4294967295
   250f6:	bf08      	it	eq
   250f8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   250fc:	d112      	bne.n	25124 <z_impl_k_thread_create+0x60>
}
   250fe:	4620      	mov	r0, r4
   25100:	b006      	add	sp, #24
   25102:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   25104:	4c0a      	ldr	r4, [pc, #40]	; (25130 <z_impl_k_thread_create+0x6c>)
   25106:	f240 2387 	movw	r3, #647	; 0x287
   2510a:	4622      	mov	r2, r4
   2510c:	4909      	ldr	r1, [pc, #36]	; (25134 <z_impl_k_thread_create+0x70>)
   2510e:	480a      	ldr	r0, [pc, #40]	; (25138 <z_impl_k_thread_create+0x74>)
   25110:	f004 fceb 	bl	29aea <assert_print>
   25114:	4809      	ldr	r0, [pc, #36]	; (2513c <z_impl_k_thread_create+0x78>)
   25116:	f004 fce8 	bl	29aea <assert_print>
   2511a:	f240 2187 	movw	r1, #647	; 0x287
   2511e:	4620      	mov	r0, r4
   25120:	f004 fcdc 	bl	29adc <assert_post_action>
		schedule_new_thread(new_thread, delay);
   25124:	4632      	mov	r2, r6
   25126:	462b      	mov	r3, r5
   25128:	4620      	mov	r0, r4
   2512a:	f7ff fe77 	bl	24e1c <schedule_new_thread>
   2512e:	e7e6      	b.n	250fe <z_impl_k_thread_create+0x3a>
   25130:	0003419c 	.word	0x0003419c
   25134:	000342a8 	.word	0x000342a8
   25138:	0002fdac 	.word	0x0002fdac
   2513c:	000342bc 	.word	0x000342bc

00025140 <z_init_static_threads>:
{
   25140:	b530      	push	{r4, r5, lr}
   25142:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   25144:	4c34      	ldr	r4, [pc, #208]	; (25218 <z_init_static_threads+0xd8>)
   25146:	e014      	b.n	25172 <z_init_static_threads+0x32>
		z_setup_new_thread(
   25148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2514a:	9305      	str	r3, [sp, #20]
   2514c:	6a23      	ldr	r3, [r4, #32]
   2514e:	9304      	str	r3, [sp, #16]
   25150:	69e3      	ldr	r3, [r4, #28]
   25152:	9303      	str	r3, [sp, #12]
   25154:	69a3      	ldr	r3, [r4, #24]
   25156:	9302      	str	r3, [sp, #8]
   25158:	6963      	ldr	r3, [r4, #20]
   2515a:	9301      	str	r3, [sp, #4]
   2515c:	6923      	ldr	r3, [r4, #16]
   2515e:	9300      	str	r3, [sp, #0]
   25160:	68e3      	ldr	r3, [r4, #12]
   25162:	68a2      	ldr	r2, [r4, #8]
   25164:	6861      	ldr	r1, [r4, #4]
   25166:	6820      	ldr	r0, [r4, #0]
   25168:	f7ff fee6 	bl	24f38 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2516c:	6823      	ldr	r3, [r4, #0]
   2516e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   25170:	3430      	adds	r4, #48	; 0x30
   25172:	4b2a      	ldr	r3, [pc, #168]	; (2521c <z_init_static_threads+0xdc>)
   25174:	429c      	cmp	r4, r3
   25176:	d806      	bhi.n	25186 <z_init_static_threads+0x46>
   25178:	4b28      	ldr	r3, [pc, #160]	; (2521c <z_init_static_threads+0xdc>)
   2517a:	429c      	cmp	r4, r3
   2517c:	d3e4      	bcc.n	25148 <z_init_static_threads+0x8>
	k_sched_lock();
   2517e:	f001 fc7f 	bl	26a80 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   25182:	4c25      	ldr	r4, [pc, #148]	; (25218 <z_init_static_threads+0xd8>)
   25184:	e010      	b.n	251a8 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
   25186:	4c26      	ldr	r4, [pc, #152]	; (25220 <z_init_static_threads+0xe0>)
   25188:	f240 23ee 	movw	r3, #750	; 0x2ee
   2518c:	4622      	mov	r2, r4
   2518e:	4925      	ldr	r1, [pc, #148]	; (25224 <z_init_static_threads+0xe4>)
   25190:	4825      	ldr	r0, [pc, #148]	; (25228 <z_init_static_threads+0xe8>)
   25192:	f004 fcaa 	bl	29aea <assert_print>
   25196:	4825      	ldr	r0, [pc, #148]	; (2522c <z_init_static_threads+0xec>)
   25198:	f004 fca7 	bl	29aea <assert_print>
   2519c:	f240 21ee 	movw	r1, #750	; 0x2ee
   251a0:	4620      	mov	r0, r4
   251a2:	f004 fc9b 	bl	29adc <assert_post_action>
	_FOREACH_STATIC_THREAD(thread_data) {
   251a6:	3430      	adds	r4, #48	; 0x30
   251a8:	4b1c      	ldr	r3, [pc, #112]	; (2521c <z_init_static_threads+0xdc>)
   251aa:	429c      	cmp	r4, r3
   251ac:	d81f      	bhi.n	251ee <z_init_static_threads+0xae>
   251ae:	4b1b      	ldr	r3, [pc, #108]	; (2521c <z_init_static_threads+0xdc>)
   251b0:	429c      	cmp	r4, r3
   251b2:	d22c      	bcs.n	2520e <z_init_static_threads+0xce>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   251b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   251b6:	f1b0 3fff 	cmp.w	r0, #4294967295
   251ba:	d0f4      	beq.n	251a6 <z_init_static_threads+0x66>
			schedule_new_thread(thread_data->init_thread,
   251bc:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   251be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   251c2:	17c1      	asrs	r1, r0, #31
   251c4:	03c9      	lsls	r1, r1, #15
   251c6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   251ca:	03c0      	lsls	r0, r0, #15
   251cc:	f240 33e7 	movw	r3, #999	; 0x3e7
   251d0:	18c0      	adds	r0, r0, r3
   251d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   251d6:	f04f 0300 	mov.w	r3, #0
   251da:	f141 0100 	adc.w	r1, r1, #0
   251de:	f7ea ffbb 	bl	10158 <__aeabi_uldivmod>
   251e2:	4602      	mov	r2, r0
   251e4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   251e6:	4628      	mov	r0, r5
   251e8:	f7ff fe18 	bl	24e1c <schedule_new_thread>
   251ec:	e7db      	b.n	251a6 <z_init_static_threads+0x66>
	_FOREACH_STATIC_THREAD(thread_data) {
   251ee:	4c0c      	ldr	r4, [pc, #48]	; (25220 <z_init_static_threads+0xe0>)
   251f0:	f240 330d 	movw	r3, #781	; 0x30d
   251f4:	4622      	mov	r2, r4
   251f6:	490b      	ldr	r1, [pc, #44]	; (25224 <z_init_static_threads+0xe4>)
   251f8:	480b      	ldr	r0, [pc, #44]	; (25228 <z_init_static_threads+0xe8>)
   251fa:	f004 fc76 	bl	29aea <assert_print>
   251fe:	480b      	ldr	r0, [pc, #44]	; (2522c <z_init_static_threads+0xec>)
   25200:	f004 fc73 	bl	29aea <assert_print>
   25204:	f240 310d 	movw	r1, #781	; 0x30d
   25208:	4620      	mov	r0, r4
   2520a:	f004 fc67 	bl	29adc <assert_post_action>
	k_sched_unlock();
   2520e:	f002 f985 	bl	2751c <k_sched_unlock>
}
   25212:	b007      	add	sp, #28
   25214:	bd30      	pop	{r4, r5, pc}
   25216:	bf00      	nop
   25218:	0002f770 	.word	0x0002f770
   2521c:	0002f770 	.word	0x0002f770
   25220:	0003419c 	.word	0x0003419c
   25224:	000342e4 	.word	0x000342e4
   25228:	0002fdac 	.word	0x0002fdac
   2522c:	00030500 	.word	0x00030500

00025230 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   25230:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   25232:	4b14      	ldr	r3, [pc, #80]	; (25284 <_flash_used+0x3c>)
   25234:	689b      	ldr	r3, [r3, #8]
   25236:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2523a:	2b00      	cmp	r3, #0
   2523c:	da0c      	bge.n	25258 <_flash_used+0x10>
   2523e:	4c12      	ldr	r4, [pc, #72]	; (25288 <_flash_used+0x40>)
   25240:	2327      	movs	r3, #39	; 0x27
   25242:	4622      	mov	r2, r4
   25244:	4911      	ldr	r1, [pc, #68]	; (2528c <_flash_used+0x44>)
   25246:	4812      	ldr	r0, [pc, #72]	; (25290 <_flash_used+0x48>)
   25248:	f004 fc4f 	bl	29aea <assert_print>
   2524c:	2127      	movs	r1, #39	; 0x27
   2524e:	4620      	mov	r0, r4
   25250:	f004 fc44 	bl	29adc <assert_post_action>
	arch_cpu_idle();
   25254:	f7ef ff7c 	bl	15150 <arch_cpu_idle>
	__asm__ volatile(
   25258:	f04f 0220 	mov.w	r2, #32
   2525c:	f3ef 8311 	mrs	r3, BASEPRI
   25260:	f382 8812 	msr	BASEPRI_MAX, r2
   25264:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   25268:	f002 ff4e 	bl	28108 <z_get_next_timeout_expiry>
   2526c:	4b05      	ldr	r3, [pc, #20]	; (25284 <_flash_used+0x3c>)
   2526e:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   25270:	4b08      	ldr	r3, [pc, #32]	; (25294 <_flash_used+0x4c>)
   25272:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25274:	2b00      	cmp	r3, #0
   25276:	d0ed      	beq.n	25254 <_flash_used+0xc>
   25278:	f7ef fc9c 	bl	14bb4 <pm_system_suspend>
   2527c:	2800      	cmp	r0, #0
   2527e:	d1eb      	bne.n	25258 <_flash_used+0x10>
   25280:	e7e8      	b.n	25254 <_flash_used+0xc>
   25282:	bf00      	nop
   25284:	20009ce8 	.word	0x20009ce8
   25288:	00034314 	.word	0x00034314
   2528c:	00034338 	.word	0x00034338
   25290:	0002fdac 	.word	0x0002fdac
   25294:	20009d55 	.word	0x20009d55

00025298 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2529c:	b082      	sub	sp, #8
   2529e:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   252a2:	2900      	cmp	r1, #0
   252a4:	d130      	bne.n	25308 <z_impl_k_mutex_lock+0x70>
   252a6:	4604      	mov	r4, r0
   252a8:	4617      	mov	r7, r2
   252aa:	461e      	mov	r6, r3
   252ac:	f04f 0320 	mov.w	r3, #32
   252b0:	f3ef 8511 	mrs	r5, BASEPRI
   252b4:	f383 8812 	msr	BASEPRI_MAX, r3
   252b8:	f3bf 8f6f 	isb	sy
   252bc:	46a8      	mov	r8, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   252be:	4876      	ldr	r0, [pc, #472]	; (25498 <z_impl_k_mutex_lock+0x200>)
   252c0:	f7ff fdba 	bl	24e38 <z_spin_lock_valid>
   252c4:	2800      	cmp	r0, #0
   252c6:	d02d      	beq.n	25324 <z_impl_k_mutex_lock+0x8c>
	z_spin_lock_set_owner(l);
   252c8:	4873      	ldr	r0, [pc, #460]	; (25498 <z_impl_k_mutex_lock+0x200>)
   252ca:	f7ff fdd5 	bl	24e78 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   252ce:	68e1      	ldr	r1, [r4, #12]
   252d0:	2900      	cmp	r1, #0
   252d2:	d136      	bne.n	25342 <z_impl_k_mutex_lock+0xaa>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   252d4:	2900      	cmp	r1, #0
   252d6:	f040 8083 	bne.w	253e0 <z_impl_k_mutex_lock+0x148>
   252da:	4b70      	ldr	r3, [pc, #448]	; (2549c <z_impl_k_mutex_lock+0x204>)
   252dc:	689b      	ldr	r3, [r3, #8]
   252de:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   252e2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   252e4:	3101      	adds	r1, #1
   252e6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   252e8:	4b6c      	ldr	r3, [pc, #432]	; (2549c <z_impl_k_mutex_lock+0x204>)
   252ea:	689b      	ldr	r3, [r3, #8]
   252ec:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   252ee:	486a      	ldr	r0, [pc, #424]	; (25498 <z_impl_k_mutex_lock+0x200>)
   252f0:	f7ff fdb2 	bl	24e58 <z_spin_unlock_valid>
   252f4:	2800      	cmp	r0, #0
   252f6:	d075      	beq.n	253e4 <z_impl_k_mutex_lock+0x14c>
	__asm__ volatile(
   252f8:	f388 8811 	msr	BASEPRI, r8
   252fc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   25300:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25302:	b002      	add	sp, #8
   25304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   25308:	4c65      	ldr	r4, [pc, #404]	; (254a0 <z_impl_k_mutex_lock+0x208>)
   2530a:	2365      	movs	r3, #101	; 0x65
   2530c:	4622      	mov	r2, r4
   2530e:	4965      	ldr	r1, [pc, #404]	; (254a4 <z_impl_k_mutex_lock+0x20c>)
   25310:	4865      	ldr	r0, [pc, #404]	; (254a8 <z_impl_k_mutex_lock+0x210>)
   25312:	f004 fbea 	bl	29aea <assert_print>
   25316:	4865      	ldr	r0, [pc, #404]	; (254ac <z_impl_k_mutex_lock+0x214>)
   25318:	f004 fbe7 	bl	29aea <assert_print>
   2531c:	2165      	movs	r1, #101	; 0x65
   2531e:	4620      	mov	r0, r4
   25320:	f004 fbdc 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25324:	4c62      	ldr	r4, [pc, #392]	; (254b0 <z_impl_k_mutex_lock+0x218>)
   25326:	2394      	movs	r3, #148	; 0x94
   25328:	4622      	mov	r2, r4
   2532a:	4962      	ldr	r1, [pc, #392]	; (254b4 <z_impl_k_mutex_lock+0x21c>)
   2532c:	485e      	ldr	r0, [pc, #376]	; (254a8 <z_impl_k_mutex_lock+0x210>)
   2532e:	f004 fbdc 	bl	29aea <assert_print>
   25332:	4959      	ldr	r1, [pc, #356]	; (25498 <z_impl_k_mutex_lock+0x200>)
   25334:	4860      	ldr	r0, [pc, #384]	; (254b8 <z_impl_k_mutex_lock+0x220>)
   25336:	f004 fbd8 	bl	29aea <assert_print>
   2533a:	2194      	movs	r1, #148	; 0x94
   2533c:	4620      	mov	r0, r4
   2533e:	f004 fbcd 	bl	29adc <assert_post_action>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25342:	68a2      	ldr	r2, [r4, #8]
   25344:	4b55      	ldr	r3, [pc, #340]	; (2549c <z_impl_k_mutex_lock+0x204>)
   25346:	689b      	ldr	r3, [r3, #8]
   25348:	429a      	cmp	r2, r3
   2534a:	d0c3      	beq.n	252d4 <z_impl_k_mutex_lock+0x3c>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2534c:	ea56 0107 	orrs.w	r1, r6, r7
   25350:	d057      	beq.n	25402 <z_impl_k_mutex_lock+0x16a>
					    mutex->owner->base.prio);
   25352:	f992 800e 	ldrsb.w	r8, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   25356:	4641      	mov	r1, r8
   25358:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2535c:	f009 fd5a 	bl	2ee14 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25360:	4580      	cmp	r8, r0
   25362:	dc68      	bgt.n	25436 <z_impl_k_mutex_lock+0x19e>
	bool resched = false;
   25364:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25368:	9700      	str	r7, [sp, #0]
   2536a:	9601      	str	r6, [sp, #4]
   2536c:	4622      	mov	r2, r4
   2536e:	4629      	mov	r1, r5
   25370:	4849      	ldr	r0, [pc, #292]	; (25498 <z_impl_k_mutex_lock+0x200>)
   25372:	f001 ff3b 	bl	271ec <z_pend_curr>
	if (got_mutex == 0) {
   25376:	2800      	cmp	r0, #0
   25378:	d0c3      	beq.n	25302 <z_impl_k_mutex_lock+0x6a>
	__asm__ volatile(
   2537a:	f04f 0320 	mov.w	r3, #32
   2537e:	f3ef 8511 	mrs	r5, BASEPRI
   25382:	f383 8812 	msr	BASEPRI_MAX, r3
   25386:	f3bf 8f6f 	isb	sy
   2538a:	462e      	mov	r6, r5
   2538c:	4842      	ldr	r0, [pc, #264]	; (25498 <z_impl_k_mutex_lock+0x200>)
   2538e:	f7ff fd53 	bl	24e38 <z_spin_lock_valid>
   25392:	2800      	cmp	r0, #0
   25394:	d055      	beq.n	25442 <z_impl_k_mutex_lock+0x1aa>
	z_spin_lock_set_owner(l);
   25396:	4840      	ldr	r0, [pc, #256]	; (25498 <z_impl_k_mutex_lock+0x200>)
   25398:	f7ff fd6e 	bl	24e78 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   2539c:	68a3      	ldr	r3, [r4, #8]
   2539e:	2b00      	cmp	r3, #0
   253a0:	d060      	beq.n	25464 <z_impl_k_mutex_lock+0x1cc>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   253a2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   253a4:	429c      	cmp	r4, r3
   253a6:	d05b      	beq.n	25460 <z_impl_k_mutex_lock+0x1c8>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   253a8:	2b00      	cmp	r3, #0
   253aa:	d059      	beq.n	25460 <z_impl_k_mutex_lock+0x1c8>
   253ac:	6921      	ldr	r1, [r4, #16]
   253ae:	f993 000e 	ldrsb.w	r0, [r3, #14]
   253b2:	f009 fd2f 	bl	2ee14 <new_prio_for_inheritance>
   253b6:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   253b8:	4620      	mov	r0, r4
   253ba:	f009 fd36 	bl	2ee2a <adjust_owner_prio>
   253be:	2800      	cmp	r0, #0
   253c0:	d153      	bne.n	2546a <z_impl_k_mutex_lock+0x1d2>
   253c2:	f1b8 0f00 	cmp.w	r8, #0
   253c6:	d150      	bne.n	2546a <z_impl_k_mutex_lock+0x1d2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   253c8:	4833      	ldr	r0, [pc, #204]	; (25498 <z_impl_k_mutex_lock+0x200>)
   253ca:	f7ff fd45 	bl	24e58 <z_spin_unlock_valid>
   253ce:	2800      	cmp	r0, #0
   253d0:	d052      	beq.n	25478 <z_impl_k_mutex_lock+0x1e0>
	__asm__ volatile(
   253d2:	f386 8811 	msr	BASEPRI, r6
   253d6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   253da:	f06f 000a 	mvn.w	r0, #10
   253de:	e790      	b.n	25302 <z_impl_k_mutex_lock+0x6a>
					_current->base.prio :
   253e0:	6923      	ldr	r3, [r4, #16]
   253e2:	e77e      	b.n	252e2 <z_impl_k_mutex_lock+0x4a>
   253e4:	4c32      	ldr	r4, [pc, #200]	; (254b0 <z_impl_k_mutex_lock+0x218>)
   253e6:	23c2      	movs	r3, #194	; 0xc2
   253e8:	4622      	mov	r2, r4
   253ea:	4934      	ldr	r1, [pc, #208]	; (254bc <z_impl_k_mutex_lock+0x224>)
   253ec:	482e      	ldr	r0, [pc, #184]	; (254a8 <z_impl_k_mutex_lock+0x210>)
   253ee:	f004 fb7c 	bl	29aea <assert_print>
   253f2:	4929      	ldr	r1, [pc, #164]	; (25498 <z_impl_k_mutex_lock+0x200>)
   253f4:	4832      	ldr	r0, [pc, #200]	; (254c0 <z_impl_k_mutex_lock+0x228>)
   253f6:	f004 fb78 	bl	29aea <assert_print>
   253fa:	21c2      	movs	r1, #194	; 0xc2
   253fc:	4620      	mov	r0, r4
   253fe:	f004 fb6d 	bl	29adc <assert_post_action>
   25402:	4825      	ldr	r0, [pc, #148]	; (25498 <z_impl_k_mutex_lock+0x200>)
   25404:	f7ff fd28 	bl	24e58 <z_spin_unlock_valid>
   25408:	b130      	cbz	r0, 25418 <z_impl_k_mutex_lock+0x180>
   2540a:	f385 8811 	msr	BASEPRI, r5
   2540e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   25412:	f06f 000f 	mvn.w	r0, #15
   25416:	e774      	b.n	25302 <z_impl_k_mutex_lock+0x6a>
   25418:	4c25      	ldr	r4, [pc, #148]	; (254b0 <z_impl_k_mutex_lock+0x218>)
   2541a:	23c2      	movs	r3, #194	; 0xc2
   2541c:	4622      	mov	r2, r4
   2541e:	4927      	ldr	r1, [pc, #156]	; (254bc <z_impl_k_mutex_lock+0x224>)
   25420:	4821      	ldr	r0, [pc, #132]	; (254a8 <z_impl_k_mutex_lock+0x210>)
   25422:	f004 fb62 	bl	29aea <assert_print>
   25426:	491c      	ldr	r1, [pc, #112]	; (25498 <z_impl_k_mutex_lock+0x200>)
   25428:	4825      	ldr	r0, [pc, #148]	; (254c0 <z_impl_k_mutex_lock+0x228>)
   2542a:	f004 fb5e 	bl	29aea <assert_print>
   2542e:	21c2      	movs	r1, #194	; 0xc2
   25430:	4620      	mov	r0, r4
   25432:	f004 fb53 	bl	29adc <assert_post_action>
		resched = adjust_owner_prio(mutex, new_prio);
   25436:	4601      	mov	r1, r0
   25438:	4620      	mov	r0, r4
   2543a:	f009 fcf6 	bl	2ee2a <adjust_owner_prio>
   2543e:	4680      	mov	r8, r0
   25440:	e792      	b.n	25368 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25442:	4c1b      	ldr	r4, [pc, #108]	; (254b0 <z_impl_k_mutex_lock+0x218>)
   25444:	2394      	movs	r3, #148	; 0x94
   25446:	4622      	mov	r2, r4
   25448:	491a      	ldr	r1, [pc, #104]	; (254b4 <z_impl_k_mutex_lock+0x21c>)
   2544a:	4817      	ldr	r0, [pc, #92]	; (254a8 <z_impl_k_mutex_lock+0x210>)
   2544c:	f004 fb4d 	bl	29aea <assert_print>
   25450:	4911      	ldr	r1, [pc, #68]	; (25498 <z_impl_k_mutex_lock+0x200>)
   25452:	4819      	ldr	r0, [pc, #100]	; (254b8 <z_impl_k_mutex_lock+0x220>)
   25454:	f004 fb49 	bl	29aea <assert_print>
   25458:	2194      	movs	r1, #148	; 0x94
   2545a:	4620      	mov	r0, r4
   2545c:	f004 fb3e 	bl	29adc <assert_post_action>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   25460:	6921      	ldr	r1, [r4, #16]
   25462:	e7a9      	b.n	253b8 <z_impl_k_mutex_lock+0x120>
	if (resched) {
   25464:	f1b8 0f00 	cmp.w	r8, #0
   25468:	d0ae      	beq.n	253c8 <z_impl_k_mutex_lock+0x130>
		z_reschedule(&lock, key);
   2546a:	4629      	mov	r1, r5
   2546c:	480a      	ldr	r0, [pc, #40]	; (25498 <z_impl_k_mutex_lock+0x200>)
   2546e:	f001 fac3 	bl	269f8 <z_reschedule>
	return -EAGAIN;
   25472:	f06f 000a 	mvn.w	r0, #10
   25476:	e744      	b.n	25302 <z_impl_k_mutex_lock+0x6a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25478:	4c0d      	ldr	r4, [pc, #52]	; (254b0 <z_impl_k_mutex_lock+0x218>)
   2547a:	23c2      	movs	r3, #194	; 0xc2
   2547c:	4622      	mov	r2, r4
   2547e:	490f      	ldr	r1, [pc, #60]	; (254bc <z_impl_k_mutex_lock+0x224>)
   25480:	4809      	ldr	r0, [pc, #36]	; (254a8 <z_impl_k_mutex_lock+0x210>)
   25482:	f004 fb32 	bl	29aea <assert_print>
   25486:	4904      	ldr	r1, [pc, #16]	; (25498 <z_impl_k_mutex_lock+0x200>)
   25488:	480d      	ldr	r0, [pc, #52]	; (254c0 <z_impl_k_mutex_lock+0x228>)
   2548a:	f004 fb2e 	bl	29aea <assert_print>
   2548e:	21c2      	movs	r1, #194	; 0xc2
   25490:	4620      	mov	r0, r4
   25492:	f004 fb23 	bl	29adc <assert_post_action>
   25496:	bf00      	nop
   25498:	20009d18 	.word	0x20009d18
   2549c:	20009ce8 	.word	0x20009ce8
   254a0:	00034360 	.word	0x00034360
   254a4:	000342a8 	.word	0x000342a8
   254a8:	0002fdac 	.word	0x0002fdac
   254ac:	00034384 	.word	0x00034384
   254b0:	000301b0 	.word	0x000301b0
   254b4:	00030210 	.word	0x00030210
   254b8:	00030228 	.word	0x00030228
   254bc:	000301e0 	.word	0x000301e0
   254c0:	000301f8 	.word	0x000301f8

000254c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   254c4:	b570      	push	{r4, r5, r6, lr}
   254c6:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   254ca:	b97b      	cbnz	r3, 254ec <z_impl_k_mutex_unlock+0x28>
   254cc:	4604      	mov	r4, r0

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   254ce:	6883      	ldr	r3, [r0, #8]
   254d0:	2b00      	cmp	r3, #0
   254d2:	d074      	beq.n	255be <z_impl_k_mutex_unlock+0xfa>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   254d4:	4a3d      	ldr	r2, [pc, #244]	; (255cc <z_impl_k_mutex_unlock+0x108>)
   254d6:	6892      	ldr	r2, [r2, #8]
   254d8:	4293      	cmp	r3, r2
   254da:	d173      	bne.n	255c4 <z_impl_k_mutex_unlock+0x100>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   254dc:	68c3      	ldr	r3, [r0, #12]
   254de:	b19b      	cbz	r3, 25508 <z_impl_k_mutex_unlock+0x44>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   254e0:	2b01      	cmp	r3, #1
   254e2:	d91c      	bls.n	2551e <z_impl_k_mutex_unlock+0x5a>
		mutex->lock_count--;
   254e4:	3b01      	subs	r3, #1
   254e6:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   254e8:	2000      	movs	r0, #0
}
   254ea:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   254ec:	4c38      	ldr	r4, [pc, #224]	; (255d0 <z_impl_k_mutex_unlock+0x10c>)
   254ee:	23cd      	movs	r3, #205	; 0xcd
   254f0:	4622      	mov	r2, r4
   254f2:	4938      	ldr	r1, [pc, #224]	; (255d4 <z_impl_k_mutex_unlock+0x110>)
   254f4:	4838      	ldr	r0, [pc, #224]	; (255d8 <z_impl_k_mutex_unlock+0x114>)
   254f6:	f004 faf8 	bl	29aea <assert_print>
   254fa:	4838      	ldr	r0, [pc, #224]	; (255dc <z_impl_k_mutex_unlock+0x118>)
   254fc:	f004 faf5 	bl	29aea <assert_print>
   25500:	21cd      	movs	r1, #205	; 0xcd
   25502:	4620      	mov	r0, r4
   25504:	f004 faea 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   25508:	4c31      	ldr	r4, [pc, #196]	; (255d0 <z_impl_k_mutex_unlock+0x10c>)
   2550a:	23e5      	movs	r3, #229	; 0xe5
   2550c:	4622      	mov	r2, r4
   2550e:	4934      	ldr	r1, [pc, #208]	; (255e0 <z_impl_k_mutex_unlock+0x11c>)
   25510:	4831      	ldr	r0, [pc, #196]	; (255d8 <z_impl_k_mutex_unlock+0x114>)
   25512:	f004 faea 	bl	29aea <assert_print>
   25516:	21e5      	movs	r1, #229	; 0xe5
   25518:	4620      	mov	r0, r4
   2551a:	f004 fadf 	bl	29adc <assert_post_action>
	__asm__ volatile(
   2551e:	f04f 0320 	mov.w	r3, #32
   25522:	f3ef 8511 	mrs	r5, BASEPRI
   25526:	f383 8812 	msr	BASEPRI_MAX, r3
   2552a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2552e:	482d      	ldr	r0, [pc, #180]	; (255e4 <z_impl_k_mutex_unlock+0x120>)
   25530:	f7ff fc82 	bl	24e38 <z_spin_lock_valid>
   25534:	b1c8      	cbz	r0, 2556a <z_impl_k_mutex_unlock+0xa6>
	z_spin_lock_set_owner(l);
   25536:	482b      	ldr	r0, [pc, #172]	; (255e4 <z_impl_k_mutex_unlock+0x120>)
   25538:	f7ff fc9e 	bl	24e78 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2553c:	6921      	ldr	r1, [r4, #16]
   2553e:	4620      	mov	r0, r4
   25540:	f009 fc73 	bl	2ee2a <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25544:	4620      	mov	r0, r4
   25546:	f002 f8f5 	bl	27734 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2554a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2554c:	b1e0      	cbz	r0, 25588 <z_impl_k_mutex_unlock+0xc4>
		mutex->owner_orig_prio = new_owner->base.prio;
   2554e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   25552:	6123      	str	r3, [r4, #16]
   25554:	2400      	movs	r4, #0
   25556:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   2555a:	f001 fcd9 	bl	26f10 <z_ready_thread>
		z_reschedule(&lock, key);
   2555e:	4629      	mov	r1, r5
   25560:	4820      	ldr	r0, [pc, #128]	; (255e4 <z_impl_k_mutex_unlock+0x120>)
   25562:	f001 fa49 	bl	269f8 <z_reschedule>
	return 0;
   25566:	4620      	mov	r0, r4
   25568:	e7bf      	b.n	254ea <z_impl_k_mutex_unlock+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2556a:	4c1f      	ldr	r4, [pc, #124]	; (255e8 <z_impl_k_mutex_unlock+0x124>)
   2556c:	2394      	movs	r3, #148	; 0x94
   2556e:	4622      	mov	r2, r4
   25570:	491e      	ldr	r1, [pc, #120]	; (255ec <z_impl_k_mutex_unlock+0x128>)
   25572:	4819      	ldr	r0, [pc, #100]	; (255d8 <z_impl_k_mutex_unlock+0x114>)
   25574:	f004 fab9 	bl	29aea <assert_print>
   25578:	491a      	ldr	r1, [pc, #104]	; (255e4 <z_impl_k_mutex_unlock+0x120>)
   2557a:	481d      	ldr	r0, [pc, #116]	; (255f0 <z_impl_k_mutex_unlock+0x12c>)
   2557c:	f004 fab5 	bl	29aea <assert_print>
   25580:	2194      	movs	r1, #148	; 0x94
   25582:	4620      	mov	r0, r4
   25584:	f004 faaa 	bl	29adc <assert_post_action>
		mutex->lock_count = 0U;
   25588:	2300      	movs	r3, #0
   2558a:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2558c:	4815      	ldr	r0, [pc, #84]	; (255e4 <z_impl_k_mutex_unlock+0x120>)
   2558e:	f7ff fc63 	bl	24e58 <z_spin_unlock_valid>
   25592:	b128      	cbz	r0, 255a0 <z_impl_k_mutex_unlock+0xdc>
	__asm__ volatile(
   25594:	f385 8811 	msr	BASEPRI, r5
   25598:	f3bf 8f6f 	isb	sy
	return 0;
   2559c:	2000      	movs	r0, #0
   2559e:	e7a4      	b.n	254ea <z_impl_k_mutex_unlock+0x26>
   255a0:	4c11      	ldr	r4, [pc, #68]	; (255e8 <z_impl_k_mutex_unlock+0x124>)
   255a2:	23c2      	movs	r3, #194	; 0xc2
   255a4:	4622      	mov	r2, r4
   255a6:	4913      	ldr	r1, [pc, #76]	; (255f4 <z_impl_k_mutex_unlock+0x130>)
   255a8:	480b      	ldr	r0, [pc, #44]	; (255d8 <z_impl_k_mutex_unlock+0x114>)
   255aa:	f004 fa9e 	bl	29aea <assert_print>
   255ae:	490d      	ldr	r1, [pc, #52]	; (255e4 <z_impl_k_mutex_unlock+0x120>)
   255b0:	4811      	ldr	r0, [pc, #68]	; (255f8 <z_impl_k_mutex_unlock+0x134>)
   255b2:	f004 fa9a 	bl	29aea <assert_print>
   255b6:	21c2      	movs	r1, #194	; 0xc2
   255b8:	4620      	mov	r0, r4
   255ba:	f004 fa8f 	bl	29adc <assert_post_action>
		return -EINVAL;
   255be:	f06f 0015 	mvn.w	r0, #21
   255c2:	e792      	b.n	254ea <z_impl_k_mutex_unlock+0x26>
		return -EPERM;
   255c4:	f04f 30ff 	mov.w	r0, #4294967295
   255c8:	e78f      	b.n	254ea <z_impl_k_mutex_unlock+0x26>
   255ca:	bf00      	nop
   255cc:	20009ce8 	.word	0x20009ce8
   255d0:	00034360 	.word	0x00034360
   255d4:	000342a8 	.word	0x000342a8
   255d8:	0002fdac 	.word	0x0002fdac
   255dc:	00034384 	.word	0x00034384
   255e0:	000343ac 	.word	0x000343ac
   255e4:	20009d18 	.word	0x20009d18
   255e8:	000301b0 	.word	0x000301b0
   255ec:	00030210 	.word	0x00030210
   255f0:	00030228 	.word	0x00030228
   255f4:	000301e0 	.word	0x000301e0
   255f8:	000301f8 	.word	0x000301f8

000255fc <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   255fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25600:	4604      	mov	r4, r0
   25602:	460e      	mov	r6, r1
   25604:	4615      	mov	r5, r2
   25606:	4698      	mov	r8, r3
   25608:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2560c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   25610:	f04f 0320 	mov.w	r3, #32
   25614:	f3ef 8911 	mrs	r9, BASEPRI
   25618:	f383 8812 	msr	BASEPRI_MAX, r3
   2561c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25620:	4638      	mov	r0, r7
   25622:	f7ff fc09 	bl	24e38 <z_spin_lock_valid>
   25626:	b310      	cbz	r0, 2566e <queue_insert+0x72>
   25628:	46ca      	mov	sl, r9
	z_spin_lock_set_owner(l);
   2562a:	4638      	mov	r0, r7
   2562c:	f7ff fc24 	bl	24e78 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   25630:	f1bb 0f00 	cmp.w	fp, #0
   25634:	d000      	beq.n	25638 <queue_insert+0x3c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   25636:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25638:	f104 000c 	add.w	r0, r4, #12
   2563c:	f002 f87a 	bl	27734 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   25640:	bb20      	cbnz	r0, 2568c <queue_insert+0x90>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   25642:	f1b8 0f00 	cmp.w	r8, #0
   25646:	d12a      	bne.n	2569e <queue_insert+0xa2>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25648:	2300      	movs	r3, #0
   2564a:	602b      	str	r3, [r5, #0]
		sys_sfnode_init(data, 0x0);
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
   2564c:	462a      	mov	r2, r5
   2564e:	4631      	mov	r1, r6
   25650:	4620      	mov	r0, r4
   25652:	f009 fc1d 	bl	2ee90 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   25656:	2104      	movs	r1, #4
   25658:	f104 0014 	add.w	r0, r4, #20
   2565c:	f009 fe84 	bl	2f368 <z_handle_obj_poll_events>
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   25660:	4649      	mov	r1, r9
   25662:	4638      	mov	r0, r7
   25664:	f001 f9c8 	bl	269f8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   25668:	2000      	movs	r0, #0
}
   2566a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2566e:	4c1e      	ldr	r4, [pc, #120]	; (256e8 <queue_insert+0xec>)
   25670:	2394      	movs	r3, #148	; 0x94
   25672:	4622      	mov	r2, r4
   25674:	491d      	ldr	r1, [pc, #116]	; (256ec <queue_insert+0xf0>)
   25676:	481e      	ldr	r0, [pc, #120]	; (256f0 <queue_insert+0xf4>)
   25678:	f004 fa37 	bl	29aea <assert_print>
   2567c:	4639      	mov	r1, r7
   2567e:	481d      	ldr	r0, [pc, #116]	; (256f4 <queue_insert+0xf8>)
   25680:	f004 fa33 	bl	29aea <assert_print>
   25684:	2194      	movs	r1, #148	; 0x94
   25686:	4620      	mov	r0, r4
   25688:	f004 fa28 	bl	29adc <assert_post_action>
		prepare_thread_to_run(first_pending_thread, data);
   2568c:	4629      	mov	r1, r5
   2568e:	f009 fc24 	bl	2eeda <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   25692:	4649      	mov	r1, r9
   25694:	4638      	mov	r0, r7
   25696:	f001 f9af 	bl	269f8 <z_reschedule>
		return 0;
   2569a:	2000      	movs	r0, #0
   2569c:	e7e5      	b.n	2566a <queue_insert+0x6e>
	return z_thread_aligned_alloc(0, size);
   2569e:	2108      	movs	r1, #8
   256a0:	2000      	movs	r0, #0
   256a2:	f003 fd01 	bl	290a8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   256a6:	b120      	cbz	r0, 256b2 <queue_insert+0xb6>
		anode->data = data;
   256a8:	6045      	str	r5, [r0, #4]
   256aa:	2201      	movs	r2, #1
   256ac:	6002      	str	r2, [r0, #0]
		data = anode;
   256ae:	4605      	mov	r5, r0
   256b0:	e7cc      	b.n	2564c <queue_insert+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   256b2:	4638      	mov	r0, r7
   256b4:	f7ff fbd0 	bl	24e58 <z_spin_unlock_valid>
   256b8:	b130      	cbz	r0, 256c8 <queue_insert+0xcc>
	__asm__ volatile(
   256ba:	f38a 8811 	msr	BASEPRI, sl
   256be:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   256c2:	f06f 000b 	mvn.w	r0, #11
   256c6:	e7d0      	b.n	2566a <queue_insert+0x6e>
   256c8:	4c07      	ldr	r4, [pc, #28]	; (256e8 <queue_insert+0xec>)
   256ca:	23c2      	movs	r3, #194	; 0xc2
   256cc:	4622      	mov	r2, r4
   256ce:	490a      	ldr	r1, [pc, #40]	; (256f8 <queue_insert+0xfc>)
   256d0:	4807      	ldr	r0, [pc, #28]	; (256f0 <queue_insert+0xf4>)
   256d2:	f004 fa0a 	bl	29aea <assert_print>
   256d6:	4639      	mov	r1, r7
   256d8:	4808      	ldr	r0, [pc, #32]	; (256fc <queue_insert+0x100>)
   256da:	f004 fa06 	bl	29aea <assert_print>
   256de:	21c2      	movs	r1, #194	; 0xc2
   256e0:	4620      	mov	r0, r4
   256e2:	f004 f9fb 	bl	29adc <assert_post_action>
   256e6:	bf00      	nop
   256e8:	000301b0 	.word	0x000301b0
   256ec:	00030210 	.word	0x00030210
   256f0:	0002fdac 	.word	0x0002fdac
   256f4:	00030228 	.word	0x00030228
   256f8:	000301e0 	.word	0x000301e0
   256fc:	000301f8 	.word	0x000301f8

00025700 <k_queue_append_list>:
int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   25700:	2900      	cmp	r1, #0
   25702:	d048      	beq.n	25796 <k_queue_append_list+0x96>
{
   25704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25708:	4606      	mov	r6, r0
   2570a:	4617      	mov	r7, r2
   2570c:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   2570e:	2a00      	cmp	r2, #0
   25710:	d044      	beq.n	2579c <k_queue_append_list+0x9c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25712:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   25716:	f04f 0320 	mov.w	r3, #32
   2571a:	f3ef 8911 	mrs	r9, BASEPRI
   2571e:	f383 8812 	msr	BASEPRI_MAX, r3
   25722:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25726:	4640      	mov	r0, r8
   25728:	f7ff fb86 	bl	24e38 <z_spin_lock_valid>
   2572c:	b140      	cbz	r0, 25740 <k_queue_append_list+0x40>
	z_spin_lock_set_owner(l);
   2572e:	4640      	mov	r0, r8
   25730:	f7ff fba2 	bl	24e78 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   25734:	f106 050c 	add.w	r5, r6, #12
   25738:	4628      	mov	r0, r5
   2573a:	f001 fffb 	bl	27734 <z_unpend_first_thread>
   2573e:	e015      	b.n	2576c <k_queue_append_list+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25740:	4c18      	ldr	r4, [pc, #96]	; (257a4 <k_queue_append_list+0xa4>)
   25742:	2394      	movs	r3, #148	; 0x94
   25744:	4622      	mov	r2, r4
   25746:	4918      	ldr	r1, [pc, #96]	; (257a8 <k_queue_append_list+0xa8>)
   25748:	4818      	ldr	r0, [pc, #96]	; (257ac <k_queue_append_list+0xac>)
   2574a:	f004 f9ce 	bl	29aea <assert_print>
   2574e:	4641      	mov	r1, r8
   25750:	4817      	ldr	r0, [pc, #92]	; (257b0 <k_queue_append_list+0xb0>)
   25752:	f004 f9ca 	bl	29aea <assert_print>
   25756:	2194      	movs	r1, #148	; 0x94
   25758:	4620      	mov	r0, r4
   2575a:	f004 f9bf 	bl	29adc <assert_post_action>
	}

	while ((head != NULL) && (thread != NULL)) {
		prepare_thread_to_run(thread, head);
   2575e:	4621      	mov	r1, r4
   25760:	f009 fbbb 	bl	2eeda <prepare_thread_to_run>
		head = *(void **)head;
   25764:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   25766:	4628      	mov	r0, r5
   25768:	f001 ffe4 	bl	27734 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2576c:	b10c      	cbz	r4, 25772 <k_queue_append_list+0x72>
   2576e:	2800      	cmp	r0, #0
   25770:	d1f5      	bne.n	2575e <k_queue_append_list+0x5e>
	}

	if (head != NULL) {
   25772:	b124      	cbz	r4, 2577e <k_queue_append_list+0x7e>
		sys_sflist_append_list(&queue->data_q, head, tail);
   25774:	463a      	mov	r2, r7
   25776:	4621      	mov	r1, r4
   25778:	4630      	mov	r0, r6
   2577a:	f009 fb78 	bl	2ee6e <sys_sflist_append_list>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2577e:	2104      	movs	r1, #4
   25780:	f106 0014 	add.w	r0, r6, #20
   25784:	f009 fdf0 	bl	2f368 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   25788:	4649      	mov	r1, r9
   2578a:	4640      	mov	r0, r8
   2578c:	f001 f934 	bl	269f8 <z_reschedule>
	return 0;
   25790:	2000      	movs	r0, #0
}
   25792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   25796:	f06f 0015 	mvn.w	r0, #21
}
   2579a:	4770      	bx	lr
		return -EINVAL;
   2579c:	f06f 0015 	mvn.w	r0, #21
   257a0:	e7f7      	b.n	25792 <k_queue_append_list+0x92>
   257a2:	bf00      	nop
   257a4:	000301b0 	.word	0x000301b0
   257a8:	00030210 	.word	0x00030210
   257ac:	0002fdac 	.word	0x0002fdac
   257b0:	00030228 	.word	0x00030228

000257b4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   257b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   257b8:	b083      	sub	sp, #12
   257ba:	4604      	mov	r4, r0
   257bc:	4690      	mov	r8, r2
   257be:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   257c0:	f100 0508 	add.w	r5, r0, #8
   257c4:	f04f 0320 	mov.w	r3, #32
   257c8:	f3ef 8711 	mrs	r7, BASEPRI
   257cc:	f383 8812 	msr	BASEPRI_MAX, r3
   257d0:	f3bf 8f6f 	isb	sy
   257d4:	4628      	mov	r0, r5
   257d6:	f7ff fb2f 	bl	24e38 <z_spin_lock_valid>
   257da:	b1e8      	cbz	r0, 25818 <z_impl_k_queue_get+0x64>
   257dc:	463e      	mov	r6, r7
	z_spin_lock_set_owner(l);
   257de:	4628      	mov	r0, r5
   257e0:	f7ff fb4a 	bl	24e78 <z_spin_lock_set_owner>
	return list->head;
   257e4:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   257e6:	2800      	cmp	r0, #0
   257e8:	d036      	beq.n	25858 <z_impl_k_queue_get+0xa4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   257ea:	6803      	ldr	r3, [r0, #0]
   257ec:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   257f0:	6023      	str	r3, [r4, #0]
	return list->tail;
   257f2:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   257f4:	4290      	cmp	r0, r2
   257f6:	d01e      	beq.n	25836 <z_impl_k_queue_get+0x82>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   257f8:	2101      	movs	r1, #1
   257fa:	f009 fb76 	bl	2eeea <z_queue_node_peek>
   257fe:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25800:	4628      	mov	r0, r5
   25802:	f7ff fb29 	bl	24e58 <z_spin_unlock_valid>
   25806:	b1c0      	cbz	r0, 2583a <z_impl_k_queue_get+0x86>
	__asm__ volatile(
   25808:	f386 8811 	msr	BASEPRI, r6
   2580c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   25810:	4620      	mov	r0, r4
   25812:	b003      	add	sp, #12
   25814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25818:	4c26      	ldr	r4, [pc, #152]	; (258b4 <z_impl_k_queue_get+0x100>)
   2581a:	2394      	movs	r3, #148	; 0x94
   2581c:	4622      	mov	r2, r4
   2581e:	4926      	ldr	r1, [pc, #152]	; (258b8 <z_impl_k_queue_get+0x104>)
   25820:	4826      	ldr	r0, [pc, #152]	; (258bc <z_impl_k_queue_get+0x108>)
   25822:	f004 f962 	bl	29aea <assert_print>
   25826:	4629      	mov	r1, r5
   25828:	4825      	ldr	r0, [pc, #148]	; (258c0 <z_impl_k_queue_get+0x10c>)
   2582a:	f004 f95e 	bl	29aea <assert_print>
   2582e:	2194      	movs	r1, #148	; 0x94
   25830:	4620      	mov	r0, r4
   25832:	f004 f953 	bl	29adc <assert_post_action>
	list->tail = node;
   25836:	6063      	str	r3, [r4, #4]
}
   25838:	e7de      	b.n	257f8 <z_impl_k_queue_get+0x44>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2583a:	4c1e      	ldr	r4, [pc, #120]	; (258b4 <z_impl_k_queue_get+0x100>)
   2583c:	23c2      	movs	r3, #194	; 0xc2
   2583e:	4622      	mov	r2, r4
   25840:	4920      	ldr	r1, [pc, #128]	; (258c4 <z_impl_k_queue_get+0x110>)
   25842:	481e      	ldr	r0, [pc, #120]	; (258bc <z_impl_k_queue_get+0x108>)
   25844:	f004 f951 	bl	29aea <assert_print>
   25848:	4629      	mov	r1, r5
   2584a:	481f      	ldr	r0, [pc, #124]	; (258c8 <z_impl_k_queue_get+0x114>)
   2584c:	f004 f94d 	bl	29aea <assert_print>
   25850:	21c2      	movs	r1, #194	; 0xc2
   25852:	4620      	mov	r0, r4
   25854:	f004 f942 	bl	29adc <assert_post_action>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25858:	ea59 0308 	orrs.w	r3, r9, r8
   2585c:	d118      	bne.n	25890 <z_impl_k_queue_get+0xdc>
   2585e:	4628      	mov	r0, r5
   25860:	f7ff fafa 	bl	24e58 <z_spin_unlock_valid>
   25864:	b128      	cbz	r0, 25872 <z_impl_k_queue_get+0xbe>
   25866:	f387 8811 	msr	BASEPRI, r7
   2586a:	f3bf 8f6f 	isb	sy
		return NULL;
   2586e:	2400      	movs	r4, #0
   25870:	e7ce      	b.n	25810 <z_impl_k_queue_get+0x5c>
   25872:	4c10      	ldr	r4, [pc, #64]	; (258b4 <z_impl_k_queue_get+0x100>)
   25874:	23c2      	movs	r3, #194	; 0xc2
   25876:	4622      	mov	r2, r4
   25878:	4912      	ldr	r1, [pc, #72]	; (258c4 <z_impl_k_queue_get+0x110>)
   2587a:	4810      	ldr	r0, [pc, #64]	; (258bc <z_impl_k_queue_get+0x108>)
   2587c:	f004 f935 	bl	29aea <assert_print>
   25880:	4629      	mov	r1, r5
   25882:	4811      	ldr	r0, [pc, #68]	; (258c8 <z_impl_k_queue_get+0x114>)
   25884:	f004 f931 	bl	29aea <assert_print>
   25888:	21c2      	movs	r1, #194	; 0xc2
   2588a:	4620      	mov	r0, r4
   2588c:	f004 f926 	bl	29adc <assert_post_action>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25890:	f8cd 8000 	str.w	r8, [sp]
   25894:	f8cd 9004 	str.w	r9, [sp, #4]
   25898:	f104 020c 	add.w	r2, r4, #12
   2589c:	4639      	mov	r1, r7
   2589e:	4628      	mov	r0, r5
   258a0:	f001 fca4 	bl	271ec <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   258a4:	b918      	cbnz	r0, 258ae <z_impl_k_queue_get+0xfa>
   258a6:	4b09      	ldr	r3, [pc, #36]	; (258cc <z_impl_k_queue_get+0x118>)
   258a8:	689b      	ldr	r3, [r3, #8]
   258aa:	695c      	ldr	r4, [r3, #20]
   258ac:	e7b0      	b.n	25810 <z_impl_k_queue_get+0x5c>
   258ae:	2400      	movs	r4, #0
   258b0:	e7ae      	b.n	25810 <z_impl_k_queue_get+0x5c>
   258b2:	bf00      	nop
   258b4:	000301b0 	.word	0x000301b0
   258b8:	00030210 	.word	0x00030210
   258bc:	0002fdac 	.word	0x0002fdac
   258c0:	00030228 	.word	0x00030228
   258c4:	000301e0 	.word	0x000301e0
   258c8:	000301f8 	.word	0x000301f8
   258cc:	20009ce8 	.word	0x20009ce8

000258d0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   258d0:	b538      	push	{r3, r4, r5, lr}
   258d2:	4604      	mov	r4, r0
	__asm__ volatile(
   258d4:	f04f 0320 	mov.w	r3, #32
   258d8:	f3ef 8511 	mrs	r5, BASEPRI
   258dc:	f383 8812 	msr	BASEPRI_MAX, r3
   258e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258e4:	4819      	ldr	r0, [pc, #100]	; (2594c <z_impl_k_sem_give+0x7c>)
   258e6:	f7ff faa7 	bl	24e38 <z_spin_lock_valid>
   258ea:	b180      	cbz	r0, 2590e <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
   258ec:	4817      	ldr	r0, [pc, #92]	; (2594c <z_impl_k_sem_give+0x7c>)
   258ee:	f7ff fac3 	bl	24e78 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   258f2:	4620      	mov	r0, r4
   258f4:	f001 ff1e 	bl	27734 <z_unpend_first_thread>

	if (thread != NULL) {
   258f8:	b1c0      	cbz	r0, 2592c <z_impl_k_sem_give+0x5c>
   258fa:	2200      	movs	r2, #0
   258fc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25900:	f001 fb06 	bl	26f10 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25904:	4629      	mov	r1, r5
   25906:	4811      	ldr	r0, [pc, #68]	; (2594c <z_impl_k_sem_give+0x7c>)
   25908:	f001 f876 	bl	269f8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2590c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2590e:	4c10      	ldr	r4, [pc, #64]	; (25950 <z_impl_k_sem_give+0x80>)
   25910:	2394      	movs	r3, #148	; 0x94
   25912:	4622      	mov	r2, r4
   25914:	490f      	ldr	r1, [pc, #60]	; (25954 <z_impl_k_sem_give+0x84>)
   25916:	4810      	ldr	r0, [pc, #64]	; (25958 <z_impl_k_sem_give+0x88>)
   25918:	f004 f8e7 	bl	29aea <assert_print>
   2591c:	490b      	ldr	r1, [pc, #44]	; (2594c <z_impl_k_sem_give+0x7c>)
   2591e:	480f      	ldr	r0, [pc, #60]	; (2595c <z_impl_k_sem_give+0x8c>)
   25920:	f004 f8e3 	bl	29aea <assert_print>
   25924:	2194      	movs	r1, #148	; 0x94
   25926:	4620      	mov	r0, r4
   25928:	f004 f8d8 	bl	29adc <assert_post_action>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2592c:	68a3      	ldr	r3, [r4, #8]
   2592e:	68e2      	ldr	r2, [r4, #12]
   25930:	4293      	cmp	r3, r2
   25932:	d008      	beq.n	25946 <z_impl_k_sem_give+0x76>
   25934:	2201      	movs	r2, #1
   25936:	4413      	add	r3, r2
   25938:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2593a:	2102      	movs	r1, #2
   2593c:	f104 0010 	add.w	r0, r4, #16
   25940:	f009 fd12 	bl	2f368 <z_handle_obj_poll_events>
}
   25944:	e7de      	b.n	25904 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25946:	2200      	movs	r2, #0
   25948:	e7f5      	b.n	25936 <z_impl_k_sem_give+0x66>
   2594a:	bf00      	nop
   2594c:	20009d1c 	.word	0x20009d1c
   25950:	000301b0 	.word	0x000301b0
   25954:	00030210 	.word	0x00030210
   25958:	0002fdac 	.word	0x0002fdac
   2595c:	00030228 	.word	0x00030228

00025960 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25964:	b082      	sub	sp, #8
   25966:	4604      	mov	r4, r0
   25968:	4617      	mov	r7, r2
   2596a:	461e      	mov	r6, r3
   2596c:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   25970:	b111      	cbz	r1, 25978 <z_impl_k_sem_take+0x18>
   25972:	ea56 0302 	orrs.w	r3, r6, r2
   25976:	d11f      	bne.n	259b8 <z_impl_k_sem_take+0x58>
   25978:	f04f 0320 	mov.w	r3, #32
   2597c:	f3ef 8511 	mrs	r5, BASEPRI
   25980:	f383 8812 	msr	BASEPRI_MAX, r3
   25984:	f3bf 8f6f 	isb	sy
   25988:	4834      	ldr	r0, [pc, #208]	; (25a5c <z_impl_k_sem_take+0xfc>)
   2598a:	f7ff fa55 	bl	24e38 <z_spin_lock_valid>
   2598e:	b308      	cbz	r0, 259d4 <z_impl_k_sem_take+0x74>
	z_spin_lock_set_owner(l);
   25990:	4832      	ldr	r0, [pc, #200]	; (25a5c <z_impl_k_sem_take+0xfc>)
   25992:	f7ff fa71 	bl	24e78 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25996:	68a1      	ldr	r1, [r4, #8]
   25998:	2900      	cmp	r1, #0
   2599a:	d039      	beq.n	25a10 <z_impl_k_sem_take+0xb0>
		sem->count--;
   2599c:	3901      	subs	r1, #1
   2599e:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259a0:	482e      	ldr	r0, [pc, #184]	; (25a5c <z_impl_k_sem_take+0xfc>)
   259a2:	f7ff fa59 	bl	24e58 <z_spin_unlock_valid>
   259a6:	b320      	cbz	r0, 259f2 <z_impl_k_sem_take+0x92>
	__asm__ volatile(
   259a8:	f385 8811 	msr	BASEPRI, r5
   259ac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   259b0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   259b2:	b002      	add	sp, #8
   259b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   259b8:	4c29      	ldr	r4, [pc, #164]	; (25a60 <z_impl_k_sem_take+0x100>)
   259ba:	2379      	movs	r3, #121	; 0x79
   259bc:	4622      	mov	r2, r4
   259be:	4929      	ldr	r1, [pc, #164]	; (25a64 <z_impl_k_sem_take+0x104>)
   259c0:	4829      	ldr	r0, [pc, #164]	; (25a68 <z_impl_k_sem_take+0x108>)
   259c2:	f004 f892 	bl	29aea <assert_print>
   259c6:	4829      	ldr	r0, [pc, #164]	; (25a6c <z_impl_k_sem_take+0x10c>)
   259c8:	f004 f88f 	bl	29aea <assert_print>
   259cc:	2179      	movs	r1, #121	; 0x79
   259ce:	4620      	mov	r0, r4
   259d0:	f004 f884 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259d4:	4c26      	ldr	r4, [pc, #152]	; (25a70 <z_impl_k_sem_take+0x110>)
   259d6:	2394      	movs	r3, #148	; 0x94
   259d8:	4622      	mov	r2, r4
   259da:	4926      	ldr	r1, [pc, #152]	; (25a74 <z_impl_k_sem_take+0x114>)
   259dc:	4822      	ldr	r0, [pc, #136]	; (25a68 <z_impl_k_sem_take+0x108>)
   259de:	f004 f884 	bl	29aea <assert_print>
   259e2:	491e      	ldr	r1, [pc, #120]	; (25a5c <z_impl_k_sem_take+0xfc>)
   259e4:	4824      	ldr	r0, [pc, #144]	; (25a78 <z_impl_k_sem_take+0x118>)
   259e6:	f004 f880 	bl	29aea <assert_print>
   259ea:	2194      	movs	r1, #148	; 0x94
   259ec:	4620      	mov	r0, r4
   259ee:	f004 f875 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259f2:	4c1f      	ldr	r4, [pc, #124]	; (25a70 <z_impl_k_sem_take+0x110>)
   259f4:	23c2      	movs	r3, #194	; 0xc2
   259f6:	4622      	mov	r2, r4
   259f8:	4920      	ldr	r1, [pc, #128]	; (25a7c <z_impl_k_sem_take+0x11c>)
   259fa:	481b      	ldr	r0, [pc, #108]	; (25a68 <z_impl_k_sem_take+0x108>)
   259fc:	f004 f875 	bl	29aea <assert_print>
   25a00:	4916      	ldr	r1, [pc, #88]	; (25a5c <z_impl_k_sem_take+0xfc>)
   25a02:	481f      	ldr	r0, [pc, #124]	; (25a80 <z_impl_k_sem_take+0x120>)
   25a04:	f004 f871 	bl	29aea <assert_print>
   25a08:	21c2      	movs	r1, #194	; 0xc2
   25a0a:	4620      	mov	r0, r4
   25a0c:	f004 f866 	bl	29adc <assert_post_action>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25a10:	ea56 0307 	orrs.w	r3, r6, r7
   25a14:	d119      	bne.n	25a4a <z_impl_k_sem_take+0xea>
   25a16:	4811      	ldr	r0, [pc, #68]	; (25a5c <z_impl_k_sem_take+0xfc>)
   25a18:	f7ff fa1e 	bl	24e58 <z_spin_unlock_valid>
   25a1c:	b130      	cbz	r0, 25a2c <z_impl_k_sem_take+0xcc>
   25a1e:	f385 8811 	msr	BASEPRI, r5
   25a22:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25a26:	f06f 000f 	mvn.w	r0, #15
   25a2a:	e7c2      	b.n	259b2 <z_impl_k_sem_take+0x52>
   25a2c:	4c10      	ldr	r4, [pc, #64]	; (25a70 <z_impl_k_sem_take+0x110>)
   25a2e:	23c2      	movs	r3, #194	; 0xc2
   25a30:	4622      	mov	r2, r4
   25a32:	4912      	ldr	r1, [pc, #72]	; (25a7c <z_impl_k_sem_take+0x11c>)
   25a34:	480c      	ldr	r0, [pc, #48]	; (25a68 <z_impl_k_sem_take+0x108>)
   25a36:	f004 f858 	bl	29aea <assert_print>
   25a3a:	4908      	ldr	r1, [pc, #32]	; (25a5c <z_impl_k_sem_take+0xfc>)
   25a3c:	4810      	ldr	r0, [pc, #64]	; (25a80 <z_impl_k_sem_take+0x120>)
   25a3e:	f004 f854 	bl	29aea <assert_print>
   25a42:	21c2      	movs	r1, #194	; 0xc2
   25a44:	4620      	mov	r0, r4
   25a46:	f004 f849 	bl	29adc <assert_post_action>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25a4a:	9700      	str	r7, [sp, #0]
   25a4c:	9601      	str	r6, [sp, #4]
   25a4e:	4622      	mov	r2, r4
   25a50:	4629      	mov	r1, r5
   25a52:	4802      	ldr	r0, [pc, #8]	; (25a5c <z_impl_k_sem_take+0xfc>)
   25a54:	f001 fbca 	bl	271ec <z_pend_curr>
	return ret;
   25a58:	e7ab      	b.n	259b2 <z_impl_k_sem_take+0x52>
   25a5a:	bf00      	nop
   25a5c:	20009d1c 	.word	0x20009d1c
   25a60:	000343c4 	.word	0x000343c4
   25a64:	000343e4 	.word	0x000343e4
   25a68:	0002fdac 	.word	0x0002fdac
   25a6c:	00032b7c 	.word	0x00032b7c
   25a70:	000301b0 	.word	0x000301b0
   25a74:	00030210 	.word	0x00030210
   25a78:	00030228 	.word	0x00030228
   25a7c:	000301e0 	.word	0x000301e0
   25a80:	000301f8 	.word	0x000301f8

00025a84 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25a84:	b510      	push	{r4, lr}
   25a86:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25a88:	4b08      	ldr	r3, [pc, #32]	; (25aac <k_sys_work_q_init+0x28>)
   25a8a:	9302      	str	r3, [sp, #8]
   25a8c:	2400      	movs	r4, #0
   25a8e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25a92:	ab02      	add	r3, sp, #8
   25a94:	9300      	str	r3, [sp, #0]
   25a96:	f04f 33ff 	mov.w	r3, #4294967295
   25a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25a9e:	4904      	ldr	r1, [pc, #16]	; (25ab0 <k_sys_work_q_init+0x2c>)
   25aa0:	4804      	ldr	r0, [pc, #16]	; (25ab4 <k_sys_work_q_init+0x30>)
   25aa2:	f000 fae7 	bl	26074 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25aa6:	4620      	mov	r0, r4
   25aa8:	b004      	add	sp, #16
   25aaa:	bd10      	pop	{r4, pc}
   25aac:	00034434 	.word	0x00034434
   25ab0:	2000c558 	.word	0x2000c558
   25ab4:	20009698 	.word	0x20009698

00025ab8 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   25ab8:	b370      	cbz	r0, 25b18 <queue_submit_locked+0x60>
{
   25aba:	b538      	push	{r3, r4, r5, lr}
   25abc:	460d      	mov	r5, r1
   25abe:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25ac0:	4b1b      	ldr	r3, [pc, #108]	; (25b30 <queue_submit_locked+0x78>)
   25ac2:	689b      	ldr	r3, [r3, #8]
   25ac4:	4283      	cmp	r3, r0
   25ac6:	d01b      	beq.n	25b00 <queue_submit_locked+0x48>
   25ac8:	2300      	movs	r3, #0
   25aca:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   25acc:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   25ad0:	f3c3 0180 	ubfx	r1, r3, #2, #1
   25ad4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25ad8:	f013 0f01 	tst.w	r3, #1
   25adc:	d01f      	beq.n	25b1e <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   25ade:	b101      	cbz	r1, 25ae2 <queue_submit_locked+0x2a>
   25ae0:	b302      	cbz	r2, 25b24 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   25ae2:	b100      	cbz	r0, 25ae6 <queue_submit_locked+0x2e>
   25ae4:	b309      	cbz	r1, 25b2a <queue_submit_locked+0x72>
	parent->next = child;
   25ae6:	2300      	movs	r3, #0
   25ae8:	602b      	str	r3, [r5, #0]
	return list->tail;
   25aea:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   25aee:	b173      	cbz	r3, 25b0e <queue_submit_locked+0x56>
	parent->next = child;
   25af0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   25af2:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   25af6:	4620      	mov	r0, r4
   25af8:	f009 fa82 	bl	2f000 <notify_queue_locked>
		ret = 1;
   25afc:	2001      	movs	r0, #1
	}

	return ret;
}
   25afe:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25b00:	f009 f96b 	bl	2edda <k_is_in_isr>
   25b04:	b908      	cbnz	r0, 25b0a <queue_submit_locked+0x52>
   25b06:	2301      	movs	r3, #1
   25b08:	e7df      	b.n	25aca <queue_submit_locked+0x12>
   25b0a:	2300      	movs	r3, #0
   25b0c:	e7dd      	b.n	25aca <queue_submit_locked+0x12>
   25b0e:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   25b12:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   25b16:	e7ee      	b.n	25af6 <queue_submit_locked+0x3e>
		return -EINVAL;
   25b18:	f06f 0015 	mvn.w	r0, #21
}
   25b1c:	4770      	bx	lr
		ret = -ENODEV;
   25b1e:	f06f 0012 	mvn.w	r0, #18
   25b22:	e7ec      	b.n	25afe <queue_submit_locked+0x46>
		ret = -EBUSY;
   25b24:	f06f 000f 	mvn.w	r0, #15
   25b28:	e7e9      	b.n	25afe <queue_submit_locked+0x46>
		ret = -EBUSY;
   25b2a:	f06f 000f 	mvn.w	r0, #15
   25b2e:	e7e6      	b.n	25afe <queue_submit_locked+0x46>
   25b30:	20009ce8 	.word	0x20009ce8

00025b34 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   25b34:	b570      	push	{r4, r5, r6, lr}
   25b36:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   25b38:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25b3a:	f013 0f02 	tst.w	r3, #2
   25b3e:	d130      	bne.n	25ba2 <submit_to_queue_locked+0x6e>
   25b40:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25b42:	f013 0f04 	tst.w	r3, #4
   25b46:	d131      	bne.n	25bac <submit_to_queue_locked+0x78>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   25b48:	680b      	ldr	r3, [r1, #0]
   25b4a:	b1b3      	cbz	r3, 25b7a <submit_to_queue_locked+0x46>
	return (*flagp & BIT(bit)) != 0U;
   25b4c:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25b4e:	f013 0f01 	tst.w	r3, #1
   25b52:	d022      	beq.n	25b9a <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   25b54:	68a3      	ldr	r3, [r4, #8]
   25b56:	b19b      	cbz	r3, 25b80 <submit_to_queue_locked+0x4c>
			*queuep = work->queue;
   25b58:	602b      	str	r3, [r5, #0]
			ret = 2;
   25b5a:	2602      	movs	r6, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   25b5c:	4621      	mov	r1, r4
   25b5e:	6828      	ldr	r0, [r5, #0]
   25b60:	f7ff ffaa 	bl	25ab8 <queue_submit_locked>

		if (rc < 0) {
   25b64:	2800      	cmp	r0, #0
   25b66:	db1e      	blt.n	25ba6 <submit_to_queue_locked+0x72>
	*flagp |= BIT(bit);
   25b68:	68e3      	ldr	r3, [r4, #12]
   25b6a:	f043 0304 	orr.w	r3, r3, #4
   25b6e:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   25b70:	682b      	ldr	r3, [r5, #0]
   25b72:	60a3      	str	r3, [r4, #8]
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   25b74:	b19e      	cbz	r6, 25b9e <submit_to_queue_locked+0x6a>
   25b76:	4630      	mov	r0, r6
		*queuep = NULL;
	}

	return ret;
   25b78:	e017      	b.n	25baa <submit_to_queue_locked+0x76>
			*queuep = work->queue;
   25b7a:	6883      	ldr	r3, [r0, #8]
   25b7c:	600b      	str	r3, [r1, #0]
   25b7e:	e7e5      	b.n	25b4c <submit_to_queue_locked+0x18>
			__ASSERT_NO_MSG(work->queue != NULL);
   25b80:	4c0b      	ldr	r4, [pc, #44]	; (25bb0 <submit_to_queue_locked+0x7c>)
   25b82:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   25b86:	4622      	mov	r2, r4
   25b88:	490a      	ldr	r1, [pc, #40]	; (25bb4 <submit_to_queue_locked+0x80>)
   25b8a:	480b      	ldr	r0, [pc, #44]	; (25bb8 <submit_to_queue_locked+0x84>)
   25b8c:	f003 ffad 	bl	29aea <assert_print>
   25b90:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   25b94:	4620      	mov	r0, r4
   25b96:	f003 ffa1 	bl	29adc <assert_post_action>
		ret = 1;
   25b9a:	2601      	movs	r6, #1
   25b9c:	e7de      	b.n	25b5c <submit_to_queue_locked+0x28>
   25b9e:	4630      	mov	r0, r6
   25ba0:	e001      	b.n	25ba6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   25ba2:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   25ba6:	2300      	movs	r3, #0
   25ba8:	602b      	str	r3, [r5, #0]
}
   25baa:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   25bac:	2000      	movs	r0, #0
   25bae:	e7fa      	b.n	25ba6 <submit_to_queue_locked+0x72>
   25bb0:	00034440 	.word	0x00034440
   25bb4:	00034464 	.word	0x00034464
   25bb8:	0002fdac 	.word	0x0002fdac

00025bbc <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   25bbc:	b570      	push	{r4, r5, r6, lr}
   25bbe:	b082      	sub	sp, #8
   25bc0:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   25bc2:	f1a0 0610 	sub.w	r6, r0, #16
	__asm__ volatile(
   25bc6:	f04f 0220 	mov.w	r2, #32
   25bca:	f3ef 8311 	mrs	r3, BASEPRI
   25bce:	f382 8812 	msr	BASEPRI_MAX, r2
   25bd2:	f3bf 8f6f 	isb	sy
   25bd6:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25bd8:	4820      	ldr	r0, [pc, #128]	; (25c5c <work_timeout+0xa0>)
   25bda:	f7ff f92d 	bl	24e38 <z_spin_lock_valid>
   25bde:	b1b8      	cbz	r0, 25c10 <work_timeout+0x54>
	z_spin_lock_set_owner(l);
   25be0:	481e      	ldr	r0, [pc, #120]	; (25c5c <work_timeout+0xa0>)
   25be2:	f7ff f949 	bl	24e78 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   25be6:	2300      	movs	r3, #0
   25be8:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   25bea:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   25bee:	f023 0208 	bic.w	r2, r3, #8
   25bf2:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25bf6:	f013 0f08 	tst.w	r3, #8
   25bfa:	d118      	bne.n	25c2e <work_timeout+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25bfc:	4817      	ldr	r0, [pc, #92]	; (25c5c <work_timeout+0xa0>)
   25bfe:	f7ff f92b 	bl	24e58 <z_spin_unlock_valid>
   25c02:	b1d8      	cbz	r0, 25c3c <work_timeout+0x80>
	__asm__ volatile(
   25c04:	f385 8811 	msr	BASEPRI, r5
   25c08:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   25c0c:	b002      	add	sp, #8
   25c0e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c10:	4c13      	ldr	r4, [pc, #76]	; (25c60 <work_timeout+0xa4>)
   25c12:	2394      	movs	r3, #148	; 0x94
   25c14:	4622      	mov	r2, r4
   25c16:	4913      	ldr	r1, [pc, #76]	; (25c64 <work_timeout+0xa8>)
   25c18:	4813      	ldr	r0, [pc, #76]	; (25c68 <work_timeout+0xac>)
   25c1a:	f003 ff66 	bl	29aea <assert_print>
   25c1e:	490f      	ldr	r1, [pc, #60]	; (25c5c <work_timeout+0xa0>)
   25c20:	4812      	ldr	r0, [pc, #72]	; (25c6c <work_timeout+0xb0>)
   25c22:	f003 ff62 	bl	29aea <assert_print>
   25c26:	2194      	movs	r1, #148	; 0x94
   25c28:	4620      	mov	r0, r4
   25c2a:	f003 ff57 	bl	29adc <assert_post_action>
		queue = dw->queue;
   25c2e:	69a3      	ldr	r3, [r4, #24]
   25c30:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25c32:	a901      	add	r1, sp, #4
   25c34:	4630      	mov	r0, r6
   25c36:	f7ff ff7d 	bl	25b34 <submit_to_queue_locked>
   25c3a:	e7df      	b.n	25bfc <work_timeout+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c3c:	4c08      	ldr	r4, [pc, #32]	; (25c60 <work_timeout+0xa4>)
   25c3e:	23c2      	movs	r3, #194	; 0xc2
   25c40:	4622      	mov	r2, r4
   25c42:	490b      	ldr	r1, [pc, #44]	; (25c70 <work_timeout+0xb4>)
   25c44:	4808      	ldr	r0, [pc, #32]	; (25c68 <work_timeout+0xac>)
   25c46:	f003 ff50 	bl	29aea <assert_print>
   25c4a:	4904      	ldr	r1, [pc, #16]	; (25c5c <work_timeout+0xa0>)
   25c4c:	4809      	ldr	r0, [pc, #36]	; (25c74 <work_timeout+0xb8>)
   25c4e:	f003 ff4c 	bl	29aea <assert_print>
   25c52:	21c2      	movs	r1, #194	; 0xc2
   25c54:	4620      	mov	r0, r4
   25c56:	f003 ff41 	bl	29adc <assert_post_action>
   25c5a:	bf00      	nop
   25c5c:	20009d28 	.word	0x20009d28
   25c60:	000301b0 	.word	0x000301b0
   25c64:	00030210 	.word	0x00030210
   25c68:	0002fdac 	.word	0x0002fdac
   25c6c:	00030228 	.word	0x00030228
   25c70:	000301e0 	.word	0x000301e0
   25c74:	000301f8 	.word	0x000301f8

00025c78 <finalize_cancel_locked>:
{
   25c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c7a:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   25c7c:	68c3      	ldr	r3, [r0, #12]
   25c7e:	f023 0302 	bic.w	r3, r3, #2
   25c82:	60c3      	str	r3, [r0, #12]
	return list->head;
   25c84:	4b13      	ldr	r3, [pc, #76]	; (25cd4 <finalize_cancel_locked+0x5c>)
   25c86:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25c88:	b185      	cbz	r5, 25cac <finalize_cancel_locked+0x34>
	return node->next;
   25c8a:	682c      	ldr	r4, [r5, #0]
   25c8c:	b104      	cbz	r4, 25c90 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25c8e:	b10d      	cbz	r5, 25c94 <finalize_cancel_locked+0x1c>
   25c90:	2700      	movs	r7, #0
   25c92:	e010      	b.n	25cb6 <finalize_cancel_locked+0x3e>
   25c94:	462c      	mov	r4, r5
   25c96:	e7fb      	b.n	25c90 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25c98:	462a      	mov	r2, r5
   25c9a:	4639      	mov	r1, r7
   25c9c:	480d      	ldr	r0, [pc, #52]	; (25cd4 <finalize_cancel_locked+0x5c>)
   25c9e:	f009 f96a 	bl	2ef76 <sys_slist_remove>
			k_sem_give(&wc->sem);
   25ca2:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   25ca6:	f7ff fe13 	bl	258d0 <z_impl_k_sem_give>
}
   25caa:	e009      	b.n	25cc0 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25cac:	462c      	mov	r4, r5
   25cae:	e7ef      	b.n	25c90 <finalize_cancel_locked+0x18>
   25cb0:	4623      	mov	r3, r4
   25cb2:	4625      	mov	r5, r4
   25cb4:	461c      	mov	r4, r3
   25cb6:	b165      	cbz	r5, 25cd2 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   25cb8:	686b      	ldr	r3, [r5, #4]
   25cba:	42b3      	cmp	r3, r6
   25cbc:	d0ec      	beq.n	25c98 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   25cbe:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25cc0:	2c00      	cmp	r4, #0
   25cc2:	d0f5      	beq.n	25cb0 <finalize_cancel_locked+0x38>
	return node->next;
   25cc4:	6823      	ldr	r3, [r4, #0]
   25cc6:	2b00      	cmp	r3, #0
   25cc8:	d0f3      	beq.n	25cb2 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25cca:	2c00      	cmp	r4, #0
   25ccc:	d1f1      	bne.n	25cb2 <finalize_cancel_locked+0x3a>
   25cce:	4623      	mov	r3, r4
   25cd0:	e7ef      	b.n	25cb2 <finalize_cancel_locked+0x3a>
}
   25cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25cd4:	20009d20 	.word	0x20009d20

00025cd8 <init_work_cancel>:
{
   25cd8:	b538      	push	{r3, r4, r5, lr}
   25cda:	4604      	mov	r4, r0
   25cdc:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   25cde:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   25ce0:	2201      	movs	r2, #1
   25ce2:	2100      	movs	r1, #0
   25ce4:	f009 f934 	bl	2ef50 <z_impl_k_sem_init>
	canceler->work = work;
   25ce8:	6065      	str	r5, [r4, #4]
	parent->next = child;
   25cea:	2300      	movs	r3, #0
   25cec:	6023      	str	r3, [r4, #0]
	return list->tail;
   25cee:	4b05      	ldr	r3, [pc, #20]	; (25d04 <init_work_cancel+0x2c>)
   25cf0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25cf2:	b11b      	cbz	r3, 25cfc <init_work_cancel+0x24>
	parent->next = child;
   25cf4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25cf6:	4b03      	ldr	r3, [pc, #12]	; (25d04 <init_work_cancel+0x2c>)
   25cf8:	605c      	str	r4, [r3, #4]
}
   25cfa:	bd38      	pop	{r3, r4, r5, pc}
   25cfc:	4b01      	ldr	r3, [pc, #4]	; (25d04 <init_work_cancel+0x2c>)
   25cfe:	605c      	str	r4, [r3, #4]
	list->head = node;
   25d00:	601c      	str	r4, [r3, #0]
}
   25d02:	e7fa      	b.n	25cfa <init_work_cancel+0x22>
   25d04:	20009d20 	.word	0x20009d20

00025d08 <work_queue_main>:
{
   25d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d0a:	b085      	sub	sp, #20
   25d0c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   25d0e:	e025      	b.n	25d5c <work_queue_main+0x54>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d10:	4c6b      	ldr	r4, [pc, #428]	; (25ec0 <work_queue_main+0x1b8>)
   25d12:	2394      	movs	r3, #148	; 0x94
   25d14:	4622      	mov	r2, r4
   25d16:	496b      	ldr	r1, [pc, #428]	; (25ec4 <work_queue_main+0x1bc>)
   25d18:	486b      	ldr	r0, [pc, #428]	; (25ec8 <work_queue_main+0x1c0>)
   25d1a:	f003 fee6 	bl	29aea <assert_print>
   25d1e:	496b      	ldr	r1, [pc, #428]	; (25ecc <work_queue_main+0x1c4>)
   25d20:	486b      	ldr	r0, [pc, #428]	; (25ed0 <work_queue_main+0x1c8>)
   25d22:	f003 fee2 	bl	29aea <assert_print>
   25d26:	2194      	movs	r1, #148	; 0x94
   25d28:	4620      	mov	r0, r4
   25d2a:	f003 fed7 	bl	29adc <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   25d2e:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   25d32:	f023 0204 	bic.w	r2, r3, #4
   25d36:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   25d3a:	f013 0f04 	tst.w	r3, #4
   25d3e:	d176      	bne.n	25e2e <work_queue_main+0x126>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   25d40:	2300      	movs	r3, #0
   25d42:	9302      	str	r3, [sp, #8]
   25d44:	f04f 32ff 	mov.w	r2, #4294967295
   25d48:	f04f 33ff 	mov.w	r3, #4294967295
   25d4c:	e9cd 2300 	strd	r2, r3, [sp]
   25d50:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   25d54:	4639      	mov	r1, r7
   25d56:	485d      	ldr	r0, [pc, #372]	; (25ecc <work_queue_main+0x1c4>)
   25d58:	f002 f832 	bl	27dc0 <z_sched_wait>
	__asm__ volatile(
   25d5c:	f04f 0320 	mov.w	r3, #32
   25d60:	f3ef 8711 	mrs	r7, BASEPRI
   25d64:	f383 8812 	msr	BASEPRI_MAX, r3
   25d68:	f3bf 8f6f 	isb	sy
   25d6c:	463e      	mov	r6, r7
   25d6e:	4857      	ldr	r0, [pc, #348]	; (25ecc <work_queue_main+0x1c4>)
   25d70:	f7ff f862 	bl	24e38 <z_spin_lock_valid>
   25d74:	2800      	cmp	r0, #0
   25d76:	d0cb      	beq.n	25d10 <work_queue_main+0x8>
	z_spin_lock_set_owner(l);
   25d78:	4854      	ldr	r0, [pc, #336]	; (25ecc <work_queue_main+0x1c4>)
   25d7a:	f7ff f87d 	bl	24e78 <z_spin_lock_set_owner>
	return list->head;
   25d7e:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   25d82:	2c00      	cmp	r4, #0
   25d84:	d0d3      	beq.n	25d2e <work_queue_main+0x26>
	return node->next;
   25d86:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   25d88:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   25d8c:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25d90:	4294      	cmp	r4, r2
   25d92:	d049      	beq.n	25e28 <work_queue_main+0x120>
	*flagp |= BIT(bit);
   25d94:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   25d98:	f043 0302 	orr.w	r3, r3, #2
   25d9c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   25da0:	68e3      	ldr	r3, [r4, #12]
   25da2:	f043 0201 	orr.w	r2, r3, #1
   25da6:	60e2      	str	r2, [r4, #12]
	*flagp &= ~BIT(bit);
   25da8:	f023 0304 	bic.w	r3, r3, #4
   25dac:	f043 0301 	orr.w	r3, r3, #1
   25db0:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   25db2:	6867      	ldr	r7, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25db4:	4845      	ldr	r0, [pc, #276]	; (25ecc <work_queue_main+0x1c4>)
   25db6:	f7ff f84f 	bl	24e58 <z_spin_unlock_valid>
   25dba:	2800      	cmp	r0, #0
   25dbc:	d041      	beq.n	25e42 <work_queue_main+0x13a>
	__asm__ volatile(
   25dbe:	f386 8811 	msr	BASEPRI, r6
   25dc2:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
   25dc6:	2f00      	cmp	r7, #0
   25dc8:	d04a      	beq.n	25e60 <work_queue_main+0x158>
		handler(work);
   25dca:	4620      	mov	r0, r4
   25dcc:	47b8      	blx	r7
	__asm__ volatile(
   25dce:	f04f 0320 	mov.w	r3, #32
   25dd2:	f3ef 8611 	mrs	r6, BASEPRI
   25dd6:	f383 8812 	msr	BASEPRI_MAX, r3
   25dda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25dde:	483b      	ldr	r0, [pc, #236]	; (25ecc <work_queue_main+0x1c4>)
   25de0:	f7ff f82a 	bl	24e38 <z_spin_lock_valid>
   25de4:	2800      	cmp	r0, #0
   25de6:	d048      	beq.n	25e7a <work_queue_main+0x172>
	z_spin_lock_set_owner(l);
   25de8:	4838      	ldr	r0, [pc, #224]	; (25ecc <work_queue_main+0x1c4>)
   25dea:	f7ff f845 	bl	24e78 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   25dee:	68e3      	ldr	r3, [r4, #12]
   25df0:	f023 0301 	bic.w	r3, r3, #1
   25df4:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25df6:	f013 0f02 	tst.w	r3, #2
   25dfa:	d14d      	bne.n	25e98 <work_queue_main+0x190>
	*flagp &= ~BIT(bit);
   25dfc:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   25e00:	f023 0302 	bic.w	r3, r3, #2
   25e04:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   25e08:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e0c:	482f      	ldr	r0, [pc, #188]	; (25ecc <work_queue_main+0x1c4>)
   25e0e:	f7ff f823 	bl	24e58 <z_spin_unlock_valid>
   25e12:	2800      	cmp	r0, #0
   25e14:	d044      	beq.n	25ea0 <work_queue_main+0x198>
	__asm__ volatile(
   25e16:	f386 8811 	msr	BASEPRI, r6
   25e1a:	f3bf 8f6f 	isb	sy
		if (yield) {
   25e1e:	2c00      	cmp	r4, #0
   25e20:	d19c      	bne.n	25d5c <work_queue_main+0x54>
	z_impl_k_yield();
   25e22:	f001 fced 	bl	27800 <z_impl_k_yield>
}
   25e26:	e799      	b.n	25d5c <work_queue_main+0x54>
	list->tail = node;
   25e28:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   25e2c:	e7b2      	b.n	25d94 <work_queue_main+0x8c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25e2e:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25e32:	2200      	movs	r2, #0
   25e34:	2101      	movs	r1, #1
   25e36:	4620      	mov	r0, r4
   25e38:	f001 ff5a 	bl	27cf0 <z_sched_wake>
   25e3c:	2800      	cmp	r0, #0
   25e3e:	d1f8      	bne.n	25e32 <work_queue_main+0x12a>
   25e40:	e77e      	b.n	25d40 <work_queue_main+0x38>
   25e42:	4c1f      	ldr	r4, [pc, #124]	; (25ec0 <work_queue_main+0x1b8>)
   25e44:	23c2      	movs	r3, #194	; 0xc2
   25e46:	4622      	mov	r2, r4
   25e48:	4922      	ldr	r1, [pc, #136]	; (25ed4 <work_queue_main+0x1cc>)
   25e4a:	481f      	ldr	r0, [pc, #124]	; (25ec8 <work_queue_main+0x1c0>)
   25e4c:	f003 fe4d 	bl	29aea <assert_print>
   25e50:	491e      	ldr	r1, [pc, #120]	; (25ecc <work_queue_main+0x1c4>)
   25e52:	4821      	ldr	r0, [pc, #132]	; (25ed8 <work_queue_main+0x1d0>)
   25e54:	f003 fe49 	bl	29aea <assert_print>
   25e58:	21c2      	movs	r1, #194	; 0xc2
   25e5a:	4620      	mov	r0, r4
   25e5c:	f003 fe3e 	bl	29adc <assert_post_action>
		__ASSERT_NO_MSG(handler != NULL);
   25e60:	4c1e      	ldr	r4, [pc, #120]	; (25edc <work_queue_main+0x1d4>)
   25e62:	f240 239b 	movw	r3, #667	; 0x29b
   25e66:	4622      	mov	r2, r4
   25e68:	491d      	ldr	r1, [pc, #116]	; (25ee0 <work_queue_main+0x1d8>)
   25e6a:	4817      	ldr	r0, [pc, #92]	; (25ec8 <work_queue_main+0x1c0>)
   25e6c:	f003 fe3d 	bl	29aea <assert_print>
   25e70:	f240 219b 	movw	r1, #667	; 0x29b
   25e74:	4620      	mov	r0, r4
   25e76:	f003 fe31 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e7a:	4c11      	ldr	r4, [pc, #68]	; (25ec0 <work_queue_main+0x1b8>)
   25e7c:	2394      	movs	r3, #148	; 0x94
   25e7e:	4622      	mov	r2, r4
   25e80:	4910      	ldr	r1, [pc, #64]	; (25ec4 <work_queue_main+0x1bc>)
   25e82:	4811      	ldr	r0, [pc, #68]	; (25ec8 <work_queue_main+0x1c0>)
   25e84:	f003 fe31 	bl	29aea <assert_print>
   25e88:	4910      	ldr	r1, [pc, #64]	; (25ecc <work_queue_main+0x1c4>)
   25e8a:	4811      	ldr	r0, [pc, #68]	; (25ed0 <work_queue_main+0x1c8>)
   25e8c:	f003 fe2d 	bl	29aea <assert_print>
   25e90:	2194      	movs	r1, #148	; 0x94
   25e92:	4620      	mov	r0, r4
   25e94:	f003 fe22 	bl	29adc <assert_post_action>
			finalize_cancel_locked(work);
   25e98:	4620      	mov	r0, r4
   25e9a:	f7ff feed 	bl	25c78 <finalize_cancel_locked>
   25e9e:	e7ad      	b.n	25dfc <work_queue_main+0xf4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ea0:	4c07      	ldr	r4, [pc, #28]	; (25ec0 <work_queue_main+0x1b8>)
   25ea2:	23c2      	movs	r3, #194	; 0xc2
   25ea4:	4622      	mov	r2, r4
   25ea6:	490b      	ldr	r1, [pc, #44]	; (25ed4 <work_queue_main+0x1cc>)
   25ea8:	4807      	ldr	r0, [pc, #28]	; (25ec8 <work_queue_main+0x1c0>)
   25eaa:	f003 fe1e 	bl	29aea <assert_print>
   25eae:	4907      	ldr	r1, [pc, #28]	; (25ecc <work_queue_main+0x1c4>)
   25eb0:	4809      	ldr	r0, [pc, #36]	; (25ed8 <work_queue_main+0x1d0>)
   25eb2:	f003 fe1a 	bl	29aea <assert_print>
   25eb6:	21c2      	movs	r1, #194	; 0xc2
   25eb8:	4620      	mov	r0, r4
   25eba:	f003 fe0f 	bl	29adc <assert_post_action>
   25ebe:	bf00      	nop
   25ec0:	000301b0 	.word	0x000301b0
   25ec4:	00030210 	.word	0x00030210
   25ec8:	0002fdac 	.word	0x0002fdac
   25ecc:	20009d28 	.word	0x20009d28
   25ed0:	00030228 	.word	0x00030228
   25ed4:	000301e0 	.word	0x000301e0
   25ed8:	000301f8 	.word	0x000301f8
   25edc:	00034440 	.word	0x00034440
   25ee0:	00034480 	.word	0x00034480

00025ee4 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25ee4:	b508      	push	{r3, lr}
   25ee6:	4684      	mov	ip, r0
   25ee8:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25eea:	ea53 0102 	orrs.w	r1, r3, r2
   25eee:	d00c      	beq.n	25f0a <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   25ef0:	68c1      	ldr	r1, [r0, #12]
   25ef2:	f041 0108 	orr.w	r1, r1, #8
   25ef6:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   25ef8:	f8dc 1000 	ldr.w	r1, [ip]
   25efc:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25efe:	4905      	ldr	r1, [pc, #20]	; (25f14 <schedule_for_queue_locked+0x30>)
   25f00:	3010      	adds	r0, #16
   25f02:	f001 ffd3 	bl	27eac <z_add_timeout>

	return ret;
   25f06:	2001      	movs	r0, #1
}
   25f08:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   25f0a:	4661      	mov	r1, ip
   25f0c:	f7ff fe12 	bl	25b34 <submit_to_queue_locked>
   25f10:	e7fa      	b.n	25f08 <schedule_for_queue_locked+0x24>
   25f12:	bf00      	nop
   25f14:	00025bbd 	.word	0x00025bbd

00025f18 <k_work_init>:
{
   25f18:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(work != NULL);
   25f1a:	b138      	cbz	r0, 25f2c <k_work_init+0x14>
	__ASSERT_NO_MSG(handler != NULL);
   25f1c:	b189      	cbz	r1, 25f42 <k_work_init+0x2a>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25f1e:	2200      	movs	r2, #0
   25f20:	6002      	str	r2, [r0, #0]
   25f22:	6042      	str	r2, [r0, #4]
   25f24:	6082      	str	r2, [r0, #8]
   25f26:	60c2      	str	r2, [r0, #12]
   25f28:	6041      	str	r1, [r0, #4]
}
   25f2a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(work != NULL);
   25f2c:	4c0a      	ldr	r4, [pc, #40]	; (25f58 <k_work_init+0x40>)
   25f2e:	2389      	movs	r3, #137	; 0x89
   25f30:	4622      	mov	r2, r4
   25f32:	490a      	ldr	r1, [pc, #40]	; (25f5c <k_work_init+0x44>)
   25f34:	480a      	ldr	r0, [pc, #40]	; (25f60 <k_work_init+0x48>)
   25f36:	f003 fdd8 	bl	29aea <assert_print>
   25f3a:	2189      	movs	r1, #137	; 0x89
   25f3c:	4620      	mov	r0, r4
   25f3e:	f003 fdcd 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   25f42:	4c05      	ldr	r4, [pc, #20]	; (25f58 <k_work_init+0x40>)
   25f44:	238a      	movs	r3, #138	; 0x8a
   25f46:	4622      	mov	r2, r4
   25f48:	4906      	ldr	r1, [pc, #24]	; (25f64 <k_work_init+0x4c>)
   25f4a:	4805      	ldr	r0, [pc, #20]	; (25f60 <k_work_init+0x48>)
   25f4c:	f003 fdcd 	bl	29aea <assert_print>
   25f50:	218a      	movs	r1, #138	; 0x8a
   25f52:	4620      	mov	r0, r4
   25f54:	f003 fdc2 	bl	29adc <assert_post_action>
   25f58:	00034440 	.word	0x00034440
   25f5c:	00034498 	.word	0x00034498
   25f60:	0002fdac 	.word	0x0002fdac
   25f64:	00034480 	.word	0x00034480

00025f68 <z_work_submit_to_queue>:
{
   25f68:	b570      	push	{r4, r5, r6, lr}
   25f6a:	b082      	sub	sp, #8
   25f6c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   25f6e:	b309      	cbz	r1, 25fb4 <z_work_submit_to_queue+0x4c>
   25f70:	460c      	mov	r4, r1
	__asm__ volatile(
   25f72:	f04f 0220 	mov.w	r2, #32
   25f76:	f3ef 8311 	mrs	r3, BASEPRI
   25f7a:	f382 8812 	msr	BASEPRI_MAX, r2
   25f7e:	f3bf 8f6f 	isb	sy
   25f82:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f84:	4821      	ldr	r0, [pc, #132]	; (2600c <z_work_submit_to_queue+0xa4>)
   25f86:	f7fe ff57 	bl	24e38 <z_spin_lock_valid>
   25f8a:	b300      	cbz	r0, 25fce <z_work_submit_to_queue+0x66>
	z_spin_lock_set_owner(l);
   25f8c:	4e1f      	ldr	r6, [pc, #124]	; (2600c <z_work_submit_to_queue+0xa4>)
   25f8e:	4630      	mov	r0, r6
   25f90:	f7fe ff72 	bl	24e78 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   25f94:	a901      	add	r1, sp, #4
   25f96:	4620      	mov	r0, r4
   25f98:	f7ff fdcc 	bl	25b34 <submit_to_queue_locked>
   25f9c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25f9e:	4630      	mov	r0, r6
   25fa0:	f7fe ff5a 	bl	24e58 <z_spin_unlock_valid>
   25fa4:	b310      	cbz	r0, 25fec <z_work_submit_to_queue+0x84>
	__asm__ volatile(
   25fa6:	f385 8811 	msr	BASEPRI, r5
   25faa:	f3bf 8f6f 	isb	sy
}
   25fae:	4620      	mov	r0, r4
   25fb0:	b002      	add	sp, #8
   25fb2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   25fb4:	4c16      	ldr	r4, [pc, #88]	; (26010 <z_work_submit_to_queue+0xa8>)
   25fb6:	f44f 73ba 	mov.w	r3, #372	; 0x174
   25fba:	4622      	mov	r2, r4
   25fbc:	4915      	ldr	r1, [pc, #84]	; (26014 <z_work_submit_to_queue+0xac>)
   25fbe:	4816      	ldr	r0, [pc, #88]	; (26018 <z_work_submit_to_queue+0xb0>)
   25fc0:	f003 fd93 	bl	29aea <assert_print>
   25fc4:	f44f 71ba 	mov.w	r1, #372	; 0x174
   25fc8:	4620      	mov	r0, r4
   25fca:	f003 fd87 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25fce:	4c13      	ldr	r4, [pc, #76]	; (2601c <z_work_submit_to_queue+0xb4>)
   25fd0:	2394      	movs	r3, #148	; 0x94
   25fd2:	4622      	mov	r2, r4
   25fd4:	4912      	ldr	r1, [pc, #72]	; (26020 <z_work_submit_to_queue+0xb8>)
   25fd6:	4810      	ldr	r0, [pc, #64]	; (26018 <z_work_submit_to_queue+0xb0>)
   25fd8:	f003 fd87 	bl	29aea <assert_print>
   25fdc:	490b      	ldr	r1, [pc, #44]	; (2600c <z_work_submit_to_queue+0xa4>)
   25fde:	4811      	ldr	r0, [pc, #68]	; (26024 <z_work_submit_to_queue+0xbc>)
   25fe0:	f003 fd83 	bl	29aea <assert_print>
   25fe4:	2194      	movs	r1, #148	; 0x94
   25fe6:	4620      	mov	r0, r4
   25fe8:	f003 fd78 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fec:	4c0b      	ldr	r4, [pc, #44]	; (2601c <z_work_submit_to_queue+0xb4>)
   25fee:	23c2      	movs	r3, #194	; 0xc2
   25ff0:	4622      	mov	r2, r4
   25ff2:	490d      	ldr	r1, [pc, #52]	; (26028 <z_work_submit_to_queue+0xc0>)
   25ff4:	4808      	ldr	r0, [pc, #32]	; (26018 <z_work_submit_to_queue+0xb0>)
   25ff6:	f003 fd78 	bl	29aea <assert_print>
   25ffa:	4631      	mov	r1, r6
   25ffc:	480b      	ldr	r0, [pc, #44]	; (2602c <z_work_submit_to_queue+0xc4>)
   25ffe:	f003 fd74 	bl	29aea <assert_print>
   26002:	21c2      	movs	r1, #194	; 0xc2
   26004:	4620      	mov	r0, r4
   26006:	f003 fd69 	bl	29adc <assert_post_action>
   2600a:	bf00      	nop
   2600c:	20009d28 	.word	0x20009d28
   26010:	00034440 	.word	0x00034440
   26014:	00034498 	.word	0x00034498
   26018:	0002fdac 	.word	0x0002fdac
   2601c:	000301b0 	.word	0x000301b0
   26020:	00030210 	.word	0x00030210
   26024:	00030228 	.word	0x00030228
   26028:	000301e0 	.word	0x000301e0
   2602c:	000301f8 	.word	0x000301f8

00026030 <k_work_submit>:
{
   26030:	b508      	push	{r3, lr}
   26032:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   26034:	4801      	ldr	r0, [pc, #4]	; (2603c <k_work_submit+0xc>)
   26036:	f009 f81f 	bl	2f078 <k_work_submit_to_queue>
}
   2603a:	bd08      	pop	{r3, pc}
   2603c:	20009698 	.word	0x20009698

00026040 <k_work_queue_init>:
{
   26040:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(queue != NULL);
   26042:	b120      	cbz	r0, 2604e <k_work_queue_init+0xe>
	*queue = (struct k_work_q) {
   26044:	22d8      	movs	r2, #216	; 0xd8
   26046:	2100      	movs	r1, #0
   26048:	f005 f8a5 	bl	2b196 <memset>
}
   2604c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(queue != NULL);
   2604e:	4c06      	ldr	r4, [pc, #24]	; (26068 <k_work_queue_init+0x28>)
   26050:	f240 23b9 	movw	r3, #697	; 0x2b9
   26054:	4622      	mov	r2, r4
   26056:	4905      	ldr	r1, [pc, #20]	; (2606c <k_work_queue_init+0x2c>)
   26058:	4805      	ldr	r0, [pc, #20]	; (26070 <k_work_queue_init+0x30>)
   2605a:	f003 fd46 	bl	29aea <assert_print>
   2605e:	f240 21b9 	movw	r1, #697	; 0x2b9
   26062:	4620      	mov	r0, r4
   26064:	f003 fd3a 	bl	29adc <assert_post_action>
   26068:	00034440 	.word	0x00034440
   2606c:	000344ac 	.word	0x000344ac
   26070:	0002fdac 	.word	0x0002fdac

00026074 <k_work_queue_start>:
{
   26074:	b5f0      	push	{r4, r5, r6, r7, lr}
   26076:	b089      	sub	sp, #36	; 0x24
   26078:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   2607a:	2800      	cmp	r0, #0
   2607c:	d03b      	beq.n	260f6 <k_work_queue_start+0x82>
   2607e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(stack);
   26080:	2900      	cmp	r1, #0
   26082:	d045      	beq.n	26110 <k_work_queue_start+0x9c>
	return (*flagp & BIT(bit)) != 0U;
   26084:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   26088:	f010 0f01 	tst.w	r0, #1
   2608c:	d14d      	bne.n	2612a <k_work_queue_start+0xb6>
	list->head = NULL;
   2608e:	2000      	movs	r0, #0
   26090:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   26094:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   26098:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   2609c:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   260a0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   260a4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   260a8:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   260ac:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   260b0:	2d00      	cmp	r5, #0
   260b2:	d047      	beq.n	26144 <k_work_queue_start+0xd0>
   260b4:	7928      	ldrb	r0, [r5, #4]
   260b6:	2800      	cmp	r0, #0
   260b8:	d146      	bne.n	26148 <k_work_queue_start+0xd4>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   260ba:	2001      	movs	r0, #1
	*flagp = flags;
   260bc:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   260c0:	f04f 36ff 	mov.w	r6, #4294967295
   260c4:	f04f 37ff 	mov.w	r7, #4294967295
   260c8:	e9cd 6706 	strd	r6, r7, [sp, #24]
   260cc:	2000      	movs	r0, #0
   260ce:	9004      	str	r0, [sp, #16]
   260d0:	9303      	str	r3, [sp, #12]
   260d2:	9002      	str	r0, [sp, #8]
   260d4:	9001      	str	r0, [sp, #4]
   260d6:	9400      	str	r4, [sp, #0]
   260d8:	4b1d      	ldr	r3, [pc, #116]	; (26150 <k_work_queue_start+0xdc>)
   260da:	4620      	mov	r0, r4
   260dc:	f7fe fff2 	bl	250c4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   260e0:	b125      	cbz	r5, 260ec <k_work_queue_start+0x78>
   260e2:	6829      	ldr	r1, [r5, #0]
   260e4:	b111      	cbz	r1, 260ec <k_work_queue_start+0x78>
	return z_impl_k_thread_name_set(thread, str);
   260e6:	4620      	mov	r0, r4
   260e8:	f7fe fe86 	bl	24df8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   260ec:	4620      	mov	r0, r4
   260ee:	f008 fe7c 	bl	2edea <z_impl_k_thread_start>
}
   260f2:	b009      	add	sp, #36	; 0x24
   260f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(queue);
   260f6:	4c17      	ldr	r4, [pc, #92]	; (26154 <k_work_queue_start+0xe0>)
   260f8:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   260fc:	4622      	mov	r2, r4
   260fe:	4916      	ldr	r1, [pc, #88]	; (26158 <k_work_queue_start+0xe4>)
   26100:	4816      	ldr	r0, [pc, #88]	; (2615c <k_work_queue_start+0xe8>)
   26102:	f003 fcf2 	bl	29aea <assert_print>
   26106:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   2610a:	4620      	mov	r0, r4
   2610c:	f003 fce6 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(stack);
   26110:	4c10      	ldr	r4, [pc, #64]	; (26154 <k_work_queue_start+0xe0>)
   26112:	f240 23c9 	movw	r3, #713	; 0x2c9
   26116:	4622      	mov	r2, r4
   26118:	4911      	ldr	r1, [pc, #68]	; (26160 <k_work_queue_start+0xec>)
   2611a:	4810      	ldr	r0, [pc, #64]	; (2615c <k_work_queue_start+0xe8>)
   2611c:	f003 fce5 	bl	29aea <assert_print>
   26120:	f240 21c9 	movw	r1, #713	; 0x2c9
   26124:	4620      	mov	r0, r4
   26126:	f003 fcd9 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   2612a:	4c0a      	ldr	r4, [pc, #40]	; (26154 <k_work_queue_start+0xe0>)
   2612c:	f240 23ca 	movw	r3, #714	; 0x2ca
   26130:	4622      	mov	r2, r4
   26132:	490c      	ldr	r1, [pc, #48]	; (26164 <k_work_queue_start+0xf0>)
   26134:	4809      	ldr	r0, [pc, #36]	; (2615c <k_work_queue_start+0xe8>)
   26136:	f003 fcd8 	bl	29aea <assert_print>
   2613a:	f240 21ca 	movw	r1, #714	; 0x2ca
   2613e:	4620      	mov	r0, r4
   26140:	f003 fccc 	bl	29adc <assert_post_action>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26144:	2001      	movs	r0, #1
   26146:	e7b9      	b.n	260bc <k_work_queue_start+0x48>
		flags |= K_WORK_QUEUE_NO_YIELD;
   26148:	f240 1001 	movw	r0, #257	; 0x101
   2614c:	e7b6      	b.n	260bc <k_work_queue_start+0x48>
   2614e:	bf00      	nop
   26150:	00025d09 	.word	0x00025d09
   26154:	00034440 	.word	0x00034440
   26158:	00034508 	.word	0x00034508
   2615c:	0002fdac 	.word	0x0002fdac
   26160:	00034510 	.word	0x00034510
   26164:	00034518 	.word	0x00034518

00026168 <k_work_queue_drain>:
{
   26168:	b5f0      	push	{r4, r5, r6, r7, lr}
   2616a:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(queue);
   2616c:	2800      	cmp	r0, #0
   2616e:	d03b      	beq.n	261e8 <k_work_queue_drain+0x80>
   26170:	460d      	mov	r5, r1
   26172:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(!k_is_in_isr());
   26174:	f008 fe31 	bl	2edda <k_is_in_isr>
   26178:	2800      	cmp	r0, #0
   2617a:	d142      	bne.n	26202 <k_work_queue_drain+0x9a>
	__asm__ volatile(
   2617c:	f04f 0320 	mov.w	r3, #32
   26180:	f3ef 8611 	mrs	r6, BASEPRI
   26184:	f383 8812 	msr	BASEPRI_MAX, r3
   26188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2618c:	4837      	ldr	r0, [pc, #220]	; (2626c <k_work_queue_drain+0x104>)
   2618e:	f7fe fe53 	bl	24e38 <z_spin_lock_valid>
   26192:	2800      	cmp	r0, #0
   26194:	d042      	beq.n	2621c <k_work_queue_drain+0xb4>
	z_spin_lock_set_owner(l);
   26196:	4835      	ldr	r0, [pc, #212]	; (2626c <k_work_queue_drain+0x104>)
   26198:	f7fe fe6e 	bl	24e78 <z_spin_lock_set_owner>
	return *flagp;
   2619c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	if (((flags_get(&queue->flags)
   261a0:	f013 0f06 	tst.w	r3, #6
   261a4:	d104      	bne.n	261b0 <k_work_queue_drain+0x48>
	    || plug
   261a6:	b91d      	cbnz	r5, 261b0 <k_work_queue_drain+0x48>
	return list->head;
   261a8:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	    || !sys_slist_is_empty(&queue->pending)) {
   261ac:	2a00      	cmp	r2, #0
   261ae:	d044      	beq.n	2623a <k_work_queue_drain+0xd2>
	*flagp |= BIT(bit);
   261b0:	f043 0204 	orr.w	r2, r3, #4
   261b4:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
		if (plug) {
   261b8:	b11d      	cbz	r5, 261c2 <k_work_queue_drain+0x5a>
	*flagp |= BIT(bit);
   261ba:	f043 030c 	orr.w	r3, r3, #12
   261be:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		notify_queue_locked(queue);
   261c2:	4620      	mov	r0, r4
   261c4:	f008 ff1c 	bl	2f000 <notify_queue_locked>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   261c8:	2300      	movs	r3, #0
   261ca:	9302      	str	r3, [sp, #8]
   261cc:	f04f 32ff 	mov.w	r2, #4294967295
   261d0:	f04f 33ff 	mov.w	r3, #4294967295
   261d4:	e9cd 2300 	strd	r2, r3, [sp]
   261d8:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
   261dc:	4631      	mov	r1, r6
   261de:	4823      	ldr	r0, [pc, #140]	; (2626c <k_work_queue_drain+0x104>)
   261e0:	f001 fdee 	bl	27dc0 <z_sched_wait>
}
   261e4:	b005      	add	sp, #20
   261e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(queue);
   261e8:	4c21      	ldr	r4, [pc, #132]	; (26270 <k_work_queue_drain+0x108>)
   261ea:	f240 23ed 	movw	r3, #749	; 0x2ed
   261ee:	4622      	mov	r2, r4
   261f0:	4920      	ldr	r1, [pc, #128]	; (26274 <k_work_queue_drain+0x10c>)
   261f2:	4821      	ldr	r0, [pc, #132]	; (26278 <k_work_queue_drain+0x110>)
   261f4:	f003 fc79 	bl	29aea <assert_print>
   261f8:	f240 21ed 	movw	r1, #749	; 0x2ed
   261fc:	4620      	mov	r0, r4
   261fe:	f003 fc6d 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   26202:	4c1b      	ldr	r4, [pc, #108]	; (26270 <k_work_queue_drain+0x108>)
   26204:	f240 23ee 	movw	r3, #750	; 0x2ee
   26208:	4622      	mov	r2, r4
   2620a:	491c      	ldr	r1, [pc, #112]	; (2627c <k_work_queue_drain+0x114>)
   2620c:	481a      	ldr	r0, [pc, #104]	; (26278 <k_work_queue_drain+0x110>)
   2620e:	f003 fc6c 	bl	29aea <assert_print>
   26212:	f240 21ee 	movw	r1, #750	; 0x2ee
   26216:	4620      	mov	r0, r4
   26218:	f003 fc60 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2621c:	4c18      	ldr	r4, [pc, #96]	; (26280 <k_work_queue_drain+0x118>)
   2621e:	2394      	movs	r3, #148	; 0x94
   26220:	4622      	mov	r2, r4
   26222:	4918      	ldr	r1, [pc, #96]	; (26284 <k_work_queue_drain+0x11c>)
   26224:	4814      	ldr	r0, [pc, #80]	; (26278 <k_work_queue_drain+0x110>)
   26226:	f003 fc60 	bl	29aea <assert_print>
   2622a:	4910      	ldr	r1, [pc, #64]	; (2626c <k_work_queue_drain+0x104>)
   2622c:	4816      	ldr	r0, [pc, #88]	; (26288 <k_work_queue_drain+0x120>)
   2622e:	f003 fc5c 	bl	29aea <assert_print>
   26232:	2194      	movs	r1, #148	; 0x94
   26234:	4620      	mov	r0, r4
   26236:	f003 fc51 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2623a:	480c      	ldr	r0, [pc, #48]	; (2626c <k_work_queue_drain+0x104>)
   2623c:	f7fe fe0c 	bl	24e58 <z_spin_unlock_valid>
   26240:	b128      	cbz	r0, 2624e <k_work_queue_drain+0xe6>
	__asm__ volatile(
   26242:	f386 8811 	msr	BASEPRI, r6
   26246:	f3bf 8f6f 	isb	sy
	int ret = 0;
   2624a:	2000      	movs	r0, #0
	return ret;
   2624c:	e7ca      	b.n	261e4 <k_work_queue_drain+0x7c>
   2624e:	4c0c      	ldr	r4, [pc, #48]	; (26280 <k_work_queue_drain+0x118>)
   26250:	23c2      	movs	r3, #194	; 0xc2
   26252:	4622      	mov	r2, r4
   26254:	490d      	ldr	r1, [pc, #52]	; (2628c <k_work_queue_drain+0x124>)
   26256:	4808      	ldr	r0, [pc, #32]	; (26278 <k_work_queue_drain+0x110>)
   26258:	f003 fc47 	bl	29aea <assert_print>
   2625c:	4903      	ldr	r1, [pc, #12]	; (2626c <k_work_queue_drain+0x104>)
   2625e:	480c      	ldr	r0, [pc, #48]	; (26290 <k_work_queue_drain+0x128>)
   26260:	f003 fc43 	bl	29aea <assert_print>
   26264:	21c2      	movs	r1, #194	; 0xc2
   26266:	4620      	mov	r0, r4
   26268:	f003 fc38 	bl	29adc <assert_post_action>
   2626c:	20009d28 	.word	0x20009d28
   26270:	00034440 	.word	0x00034440
   26274:	00034508 	.word	0x00034508
   26278:	0002fdac 	.word	0x0002fdac
   2627c:	00032100 	.word	0x00032100
   26280:	000301b0 	.word	0x000301b0
   26284:	00030210 	.word	0x00030210
   26288:	00030228 	.word	0x00030228
   2628c:	000301e0 	.word	0x000301e0
   26290:	000301f8 	.word	0x000301f8

00026294 <k_work_init_delayable>:
{
   26294:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   26296:	b158      	cbz	r0, 262b0 <k_work_init_delayable+0x1c>
   26298:	460c      	mov	r4, r1
   2629a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(handler != NULL);
   2629c:	b1a9      	cbz	r1, 262ca <k_work_init_delayable+0x36>
	*dwork = (struct k_work_delayable){
   2629e:	2230      	movs	r2, #48	; 0x30
   262a0:	2100      	movs	r1, #0
   262a2:	f004 ff78 	bl	2b196 <memset>
   262a6:	606c      	str	r4, [r5, #4]
   262a8:	f44f 7380 	mov.w	r3, #256	; 0x100
   262ac:	60eb      	str	r3, [r5, #12]
}
   262ae:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   262b0:	4c0c      	ldr	r4, [pc, #48]	; (262e4 <k_work_init_delayable+0x50>)
   262b2:	f44f 7350 	mov.w	r3, #832	; 0x340
   262b6:	4622      	mov	r2, r4
   262b8:	490b      	ldr	r1, [pc, #44]	; (262e8 <k_work_init_delayable+0x54>)
   262ba:	480c      	ldr	r0, [pc, #48]	; (262ec <k_work_init_delayable+0x58>)
   262bc:	f003 fc15 	bl	29aea <assert_print>
   262c0:	f44f 7150 	mov.w	r1, #832	; 0x340
   262c4:	4620      	mov	r0, r4
   262c6:	f003 fc09 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   262ca:	4c06      	ldr	r4, [pc, #24]	; (262e4 <k_work_init_delayable+0x50>)
   262cc:	f240 3341 	movw	r3, #833	; 0x341
   262d0:	4622      	mov	r2, r4
   262d2:	4907      	ldr	r1, [pc, #28]	; (262f0 <k_work_init_delayable+0x5c>)
   262d4:	4805      	ldr	r0, [pc, #20]	; (262ec <k_work_init_delayable+0x58>)
   262d6:	f003 fc08 	bl	29aea <assert_print>
   262da:	f240 3141 	movw	r1, #833	; 0x341
   262de:	4620      	mov	r0, r4
   262e0:	f003 fbfc 	bl	29adc <assert_post_action>
   262e4:	00034440 	.word	0x00034440
   262e8:	0003454c 	.word	0x0003454c
   262ec:	0002fdac 	.word	0x0002fdac
   262f0:	00034480 	.word	0x00034480

000262f4 <k_work_delayable_busy_get>:
{
   262f4:	b570      	push	{r4, r5, r6, lr}
   262f6:	4605      	mov	r5, r0
	__asm__ volatile(
   262f8:	f04f 0220 	mov.w	r2, #32
   262fc:	f3ef 8311 	mrs	r3, BASEPRI
   26300:	f382 8812 	msr	BASEPRI_MAX, r2
   26304:	f3bf 8f6f 	isb	sy
   26308:	461c      	mov	r4, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2630a:	4819      	ldr	r0, [pc, #100]	; (26370 <k_work_delayable_busy_get+0x7c>)
   2630c:	f7fe fd94 	bl	24e38 <z_spin_lock_valid>
   26310:	b180      	cbz	r0, 26334 <k_work_delayable_busy_get+0x40>
	z_spin_lock_set_owner(l);
   26312:	4e17      	ldr	r6, [pc, #92]	; (26370 <k_work_delayable_busy_get+0x7c>)
   26314:	4630      	mov	r0, r6
   26316:	f7fe fdaf 	bl	24e78 <z_spin_lock_set_owner>
	return *flagp;
   2631a:	68ed      	ldr	r5, [r5, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2631c:	f005 050f 	and.w	r5, r5, #15
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26320:	4630      	mov	r0, r6
   26322:	f7fe fd99 	bl	24e58 <z_spin_unlock_valid>
   26326:	b1a0      	cbz	r0, 26352 <k_work_delayable_busy_get+0x5e>
	__asm__ volatile(
   26328:	f384 8811 	msr	BASEPRI, r4
   2632c:	f3bf 8f6f 	isb	sy
}
   26330:	4628      	mov	r0, r5
   26332:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26334:	4c0f      	ldr	r4, [pc, #60]	; (26374 <k_work_delayable_busy_get+0x80>)
   26336:	2394      	movs	r3, #148	; 0x94
   26338:	4622      	mov	r2, r4
   2633a:	490f      	ldr	r1, [pc, #60]	; (26378 <k_work_delayable_busy_get+0x84>)
   2633c:	480f      	ldr	r0, [pc, #60]	; (2637c <k_work_delayable_busy_get+0x88>)
   2633e:	f003 fbd4 	bl	29aea <assert_print>
   26342:	490b      	ldr	r1, [pc, #44]	; (26370 <k_work_delayable_busy_get+0x7c>)
   26344:	480e      	ldr	r0, [pc, #56]	; (26380 <k_work_delayable_busy_get+0x8c>)
   26346:	f003 fbd0 	bl	29aea <assert_print>
   2634a:	2194      	movs	r1, #148	; 0x94
   2634c:	4620      	mov	r0, r4
   2634e:	f003 fbc5 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26352:	4c08      	ldr	r4, [pc, #32]	; (26374 <k_work_delayable_busy_get+0x80>)
   26354:	23c2      	movs	r3, #194	; 0xc2
   26356:	4622      	mov	r2, r4
   26358:	490a      	ldr	r1, [pc, #40]	; (26384 <k_work_delayable_busy_get+0x90>)
   2635a:	4808      	ldr	r0, [pc, #32]	; (2637c <k_work_delayable_busy_get+0x88>)
   2635c:	f003 fbc5 	bl	29aea <assert_print>
   26360:	4631      	mov	r1, r6
   26362:	4809      	ldr	r0, [pc, #36]	; (26388 <k_work_delayable_busy_get+0x94>)
   26364:	f003 fbc1 	bl	29aea <assert_print>
   26368:	21c2      	movs	r1, #194	; 0xc2
   2636a:	4620      	mov	r0, r4
   2636c:	f003 fbb6 	bl	29adc <assert_post_action>
   26370:	20009d28 	.word	0x20009d28
   26374:	000301b0 	.word	0x000301b0
   26378:	00030210 	.word	0x00030210
   2637c:	0002fdac 	.word	0x0002fdac
   26380:	00030228 	.word	0x00030228
   26384:	000301e0 	.word	0x000301e0
   26388:	000301f8 	.word	0x000301f8

0002638c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2638c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2638e:	b083      	sub	sp, #12
   26390:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   26392:	b309      	cbz	r1, 263d8 <k_work_schedule_for_queue+0x4c>
   26394:	4617      	mov	r7, r2
   26396:	461e      	mov	r6, r3
   26398:	460d      	mov	r5, r1
	__asm__ volatile(
   2639a:	f04f 0320 	mov.w	r3, #32
   2639e:	f3ef 8411 	mrs	r4, BASEPRI
   263a2:	f383 8812 	msr	BASEPRI_MAX, r3
   263a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263aa:	4825      	ldr	r0, [pc, #148]	; (26440 <k_work_schedule_for_queue+0xb4>)
   263ac:	f7fe fd44 	bl	24e38 <z_spin_lock_valid>
   263b0:	b1f8      	cbz	r0, 263f2 <k_work_schedule_for_queue+0x66>
	z_spin_lock_set_owner(l);
   263b2:	4823      	ldr	r0, [pc, #140]	; (26440 <k_work_schedule_for_queue+0xb4>)
   263b4:	f7fe fd60 	bl	24e78 <z_spin_lock_set_owner>
	return *flagp;
   263b8:	68eb      	ldr	r3, [r5, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   263ba:	f013 0f0e 	tst.w	r3, #14
   263be:	d027      	beq.n	26410 <k_work_schedule_for_queue+0x84>
	int ret = 0;
   263c0:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   263c2:	481f      	ldr	r0, [pc, #124]	; (26440 <k_work_schedule_for_queue+0xb4>)
   263c4:	f7fe fd48 	bl	24e58 <z_spin_unlock_valid>
   263c8:	b350      	cbz	r0, 26420 <k_work_schedule_for_queue+0x94>
	__asm__ volatile(
   263ca:	f384 8811 	msr	BASEPRI, r4
   263ce:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   263d2:	4628      	mov	r0, r5
   263d4:	b003      	add	sp, #12
   263d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   263d8:	4c1a      	ldr	r4, [pc, #104]	; (26444 <k_work_schedule_for_queue+0xb8>)
   263da:	f240 33b7 	movw	r3, #951	; 0x3b7
   263de:	4622      	mov	r2, r4
   263e0:	4919      	ldr	r1, [pc, #100]	; (26448 <k_work_schedule_for_queue+0xbc>)
   263e2:	481a      	ldr	r0, [pc, #104]	; (2644c <k_work_schedule_for_queue+0xc0>)
   263e4:	f003 fb81 	bl	29aea <assert_print>
   263e8:	f240 31b7 	movw	r1, #951	; 0x3b7
   263ec:	4620      	mov	r0, r4
   263ee:	f003 fb75 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263f2:	4c17      	ldr	r4, [pc, #92]	; (26450 <k_work_schedule_for_queue+0xc4>)
   263f4:	2394      	movs	r3, #148	; 0x94
   263f6:	4622      	mov	r2, r4
   263f8:	4916      	ldr	r1, [pc, #88]	; (26454 <k_work_schedule_for_queue+0xc8>)
   263fa:	4814      	ldr	r0, [pc, #80]	; (2644c <k_work_schedule_for_queue+0xc0>)
   263fc:	f003 fb75 	bl	29aea <assert_print>
   26400:	490f      	ldr	r1, [pc, #60]	; (26440 <k_work_schedule_for_queue+0xb4>)
   26402:	4815      	ldr	r0, [pc, #84]	; (26458 <k_work_schedule_for_queue+0xcc>)
   26404:	f003 fb71 	bl	29aea <assert_print>
   26408:	2194      	movs	r1, #148	; 0x94
   2640a:	4620      	mov	r0, r4
   2640c:	f003 fb66 	bl	29adc <assert_post_action>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   26410:	463a      	mov	r2, r7
   26412:	4633      	mov	r3, r6
   26414:	4629      	mov	r1, r5
   26416:	a801      	add	r0, sp, #4
   26418:	f7ff fd64 	bl	25ee4 <schedule_for_queue_locked>
   2641c:	4605      	mov	r5, r0
   2641e:	e7d0      	b.n	263c2 <k_work_schedule_for_queue+0x36>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26420:	4c0b      	ldr	r4, [pc, #44]	; (26450 <k_work_schedule_for_queue+0xc4>)
   26422:	23c2      	movs	r3, #194	; 0xc2
   26424:	4622      	mov	r2, r4
   26426:	490d      	ldr	r1, [pc, #52]	; (2645c <k_work_schedule_for_queue+0xd0>)
   26428:	4808      	ldr	r0, [pc, #32]	; (2644c <k_work_schedule_for_queue+0xc0>)
   2642a:	f003 fb5e 	bl	29aea <assert_print>
   2642e:	4904      	ldr	r1, [pc, #16]	; (26440 <k_work_schedule_for_queue+0xb4>)
   26430:	480b      	ldr	r0, [pc, #44]	; (26460 <k_work_schedule_for_queue+0xd4>)
   26432:	f003 fb5a 	bl	29aea <assert_print>
   26436:	21c2      	movs	r1, #194	; 0xc2
   26438:	4620      	mov	r0, r4
   2643a:	f003 fb4f 	bl	29adc <assert_post_action>
   2643e:	bf00      	nop
   26440:	20009d28 	.word	0x20009d28
   26444:	00034440 	.word	0x00034440
   26448:	0003454c 	.word	0x0003454c
   2644c:	0002fdac 	.word	0x0002fdac
   26450:	000301b0 	.word	0x000301b0
   26454:	00030210 	.word	0x00030210
   26458:	00030228 	.word	0x00030228
   2645c:	000301e0 	.word	0x000301e0
   26460:	000301f8 	.word	0x000301f8

00026464 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26464:	b508      	push	{r3, lr}
   26466:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26468:	4801      	ldr	r0, [pc, #4]	; (26470 <k_work_schedule+0xc>)
   2646a:	f7ff ff8f 	bl	2638c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   2646e:	bd08      	pop	{r3, pc}
   26470:	20009698 	.word	0x20009698

00026474 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   26474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26478:	b082      	sub	sp, #8
   2647a:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2647c:	b341      	cbz	r1, 264d0 <k_work_reschedule_for_queue+0x5c>
   2647e:	4617      	mov	r7, r2
   26480:	461e      	mov	r6, r3
   26482:	460c      	mov	r4, r1
	__asm__ volatile(
   26484:	f04f 0320 	mov.w	r3, #32
   26488:	f3ef 8811 	mrs	r8, BASEPRI
   2648c:	f383 8812 	msr	BASEPRI_MAX, r3
   26490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26494:	4824      	ldr	r0, [pc, #144]	; (26528 <k_work_reschedule_for_queue+0xb4>)
   26496:	f7fe fccf 	bl	24e38 <z_spin_lock_valid>
   2649a:	b330      	cbz	r0, 264ea <k_work_reschedule_for_queue+0x76>
	z_spin_lock_set_owner(l);
   2649c:	4d22      	ldr	r5, [pc, #136]	; (26528 <k_work_reschedule_for_queue+0xb4>)
   2649e:	4628      	mov	r0, r5
   264a0:	f7fe fcea 	bl	24e78 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   264a4:	4620      	mov	r0, r4
   264a6:	f008 fdd0 	bl	2f04a <unschedule_locked>

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   264aa:	463a      	mov	r2, r7
   264ac:	4633      	mov	r3, r6
   264ae:	4621      	mov	r1, r4
   264b0:	a801      	add	r0, sp, #4
   264b2:	f7ff fd17 	bl	25ee4 <schedule_for_queue_locked>
   264b6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264b8:	4628      	mov	r0, r5
   264ba:	f7fe fccd 	bl	24e58 <z_spin_unlock_valid>
   264be:	b318      	cbz	r0, 26508 <k_work_reschedule_for_queue+0x94>
	__asm__ volatile(
   264c0:	f388 8811 	msr	BASEPRI, r8
   264c4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   264c8:	4620      	mov	r0, r4
   264ca:	b002      	add	sp, #8
   264cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   264d0:	4c16      	ldr	r4, [pc, #88]	; (2652c <k_work_reschedule_for_queue+0xb8>)
   264d2:	f240 33db 	movw	r3, #987	; 0x3db
   264d6:	4622      	mov	r2, r4
   264d8:	4915      	ldr	r1, [pc, #84]	; (26530 <k_work_reschedule_for_queue+0xbc>)
   264da:	4816      	ldr	r0, [pc, #88]	; (26534 <k_work_reschedule_for_queue+0xc0>)
   264dc:	f003 fb05 	bl	29aea <assert_print>
   264e0:	f240 31db 	movw	r1, #987	; 0x3db
   264e4:	4620      	mov	r0, r4
   264e6:	f003 faf9 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   264ea:	4c13      	ldr	r4, [pc, #76]	; (26538 <k_work_reschedule_for_queue+0xc4>)
   264ec:	2394      	movs	r3, #148	; 0x94
   264ee:	4622      	mov	r2, r4
   264f0:	4912      	ldr	r1, [pc, #72]	; (2653c <k_work_reschedule_for_queue+0xc8>)
   264f2:	4810      	ldr	r0, [pc, #64]	; (26534 <k_work_reschedule_for_queue+0xc0>)
   264f4:	f003 faf9 	bl	29aea <assert_print>
   264f8:	490b      	ldr	r1, [pc, #44]	; (26528 <k_work_reschedule_for_queue+0xb4>)
   264fa:	4811      	ldr	r0, [pc, #68]	; (26540 <k_work_reschedule_for_queue+0xcc>)
   264fc:	f003 faf5 	bl	29aea <assert_print>
   26500:	2194      	movs	r1, #148	; 0x94
   26502:	4620      	mov	r0, r4
   26504:	f003 faea 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26508:	4c0b      	ldr	r4, [pc, #44]	; (26538 <k_work_reschedule_for_queue+0xc4>)
   2650a:	23c2      	movs	r3, #194	; 0xc2
   2650c:	4622      	mov	r2, r4
   2650e:	490d      	ldr	r1, [pc, #52]	; (26544 <k_work_reschedule_for_queue+0xd0>)
   26510:	4808      	ldr	r0, [pc, #32]	; (26534 <k_work_reschedule_for_queue+0xc0>)
   26512:	f003 faea 	bl	29aea <assert_print>
   26516:	4629      	mov	r1, r5
   26518:	480b      	ldr	r0, [pc, #44]	; (26548 <k_work_reschedule_for_queue+0xd4>)
   2651a:	f003 fae6 	bl	29aea <assert_print>
   2651e:	21c2      	movs	r1, #194	; 0xc2
   26520:	4620      	mov	r0, r4
   26522:	f003 fadb 	bl	29adc <assert_post_action>
   26526:	bf00      	nop
   26528:	20009d28 	.word	0x20009d28
   2652c:	00034440 	.word	0x00034440
   26530:	0003454c 	.word	0x0003454c
   26534:	0002fdac 	.word	0x0002fdac
   26538:	000301b0 	.word	0x000301b0
   2653c:	00030210 	.word	0x00030210
   26540:	00030228 	.word	0x00030228
   26544:	000301e0 	.word	0x000301e0
   26548:	000301f8 	.word	0x000301f8

0002654c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2654c:	b508      	push	{r3, lr}
   2654e:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   26550:	4801      	ldr	r0, [pc, #4]	; (26558 <k_work_reschedule+0xc>)
   26552:	f7ff ff8f 	bl	26474 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   26556:	bd08      	pop	{r3, pc}
   26558:	20009698 	.word	0x20009698

0002655c <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2655c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2655e:	b1f8      	cbz	r0, 265a0 <k_work_cancel_delayable+0x44>
   26560:	4604      	mov	r4, r0
	__asm__ volatile(
   26562:	f04f 0220 	mov.w	r2, #32
   26566:	f3ef 8311 	mrs	r3, BASEPRI
   2656a:	f382 8812 	msr	BASEPRI_MAX, r2
   2656e:	f3bf 8f6f 	isb	sy
   26572:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26574:	4820      	ldr	r0, [pc, #128]	; (265f8 <k_work_cancel_delayable+0x9c>)
   26576:	f7fe fc5f 	bl	24e38 <z_spin_lock_valid>
   2657a:	b1f0      	cbz	r0, 265ba <k_work_cancel_delayable+0x5e>
	z_spin_lock_set_owner(l);
   2657c:	4e1e      	ldr	r6, [pc, #120]	; (265f8 <k_work_cancel_delayable+0x9c>)
   2657e:	4630      	mov	r0, r6
   26580:	f7fe fc7a 	bl	24e78 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   26584:	4620      	mov	r0, r4
   26586:	f008 fd6f 	bl	2f068 <cancel_delayable_async_locked>
   2658a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2658c:	4630      	mov	r0, r6
   2658e:	f7fe fc63 	bl	24e58 <z_spin_unlock_valid>
   26592:	b308      	cbz	r0, 265d8 <k_work_cancel_delayable+0x7c>
	__asm__ volatile(
   26594:	f385 8811 	msr	BASEPRI, r5
   26598:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2659c:	4620      	mov	r0, r4
   2659e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   265a0:	4c16      	ldr	r4, [pc, #88]	; (265fc <k_work_cancel_delayable+0xa0>)
   265a2:	f240 33fd 	movw	r3, #1021	; 0x3fd
   265a6:	4622      	mov	r2, r4
   265a8:	4915      	ldr	r1, [pc, #84]	; (26600 <k_work_cancel_delayable+0xa4>)
   265aa:	4816      	ldr	r0, [pc, #88]	; (26604 <k_work_cancel_delayable+0xa8>)
   265ac:	f003 fa9d 	bl	29aea <assert_print>
   265b0:	f240 31fd 	movw	r1, #1021	; 0x3fd
   265b4:	4620      	mov	r0, r4
   265b6:	f003 fa91 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   265ba:	4c13      	ldr	r4, [pc, #76]	; (26608 <k_work_cancel_delayable+0xac>)
   265bc:	2394      	movs	r3, #148	; 0x94
   265be:	4622      	mov	r2, r4
   265c0:	4912      	ldr	r1, [pc, #72]	; (2660c <k_work_cancel_delayable+0xb0>)
   265c2:	4810      	ldr	r0, [pc, #64]	; (26604 <k_work_cancel_delayable+0xa8>)
   265c4:	f003 fa91 	bl	29aea <assert_print>
   265c8:	490b      	ldr	r1, [pc, #44]	; (265f8 <k_work_cancel_delayable+0x9c>)
   265ca:	4811      	ldr	r0, [pc, #68]	; (26610 <k_work_cancel_delayable+0xb4>)
   265cc:	f003 fa8d 	bl	29aea <assert_print>
   265d0:	2194      	movs	r1, #148	; 0x94
   265d2:	4620      	mov	r0, r4
   265d4:	f003 fa82 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265d8:	4c0b      	ldr	r4, [pc, #44]	; (26608 <k_work_cancel_delayable+0xac>)
   265da:	23c2      	movs	r3, #194	; 0xc2
   265dc:	4622      	mov	r2, r4
   265de:	490d      	ldr	r1, [pc, #52]	; (26614 <k_work_cancel_delayable+0xb8>)
   265e0:	4808      	ldr	r0, [pc, #32]	; (26604 <k_work_cancel_delayable+0xa8>)
   265e2:	f003 fa82 	bl	29aea <assert_print>
   265e6:	4631      	mov	r1, r6
   265e8:	480b      	ldr	r0, [pc, #44]	; (26618 <k_work_cancel_delayable+0xbc>)
   265ea:	f003 fa7e 	bl	29aea <assert_print>
   265ee:	21c2      	movs	r1, #194	; 0xc2
   265f0:	4620      	mov	r0, r4
   265f2:	f003 fa73 	bl	29adc <assert_post_action>
   265f6:	bf00      	nop
   265f8:	20009d28 	.word	0x20009d28
   265fc:	00034440 	.word	0x00034440
   26600:	0003454c 	.word	0x0003454c
   26604:	0002fdac 	.word	0x0002fdac
   26608:	000301b0 	.word	0x000301b0
   2660c:	00030210 	.word	0x00030210
   26610:	00030228 	.word	0x00030228
   26614:	000301e0 	.word	0x000301e0
   26618:	000301f8 	.word	0x000301f8

0002661c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   26620:	2800      	cmp	r0, #0
   26622:	d030      	beq.n	26686 <k_work_cancel_delayable_sync+0x6a>
   26624:	460c      	mov	r4, r1
   26626:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(sync != NULL);
   26628:	2900      	cmp	r1, #0
   2662a:	d039      	beq.n	266a0 <k_work_cancel_delayable_sync+0x84>
	__ASSERT_NO_MSG(!k_is_in_isr());
   2662c:	f008 fbd5 	bl	2edda <k_is_in_isr>
   26630:	4606      	mov	r6, r0
   26632:	2800      	cmp	r0, #0
   26634:	d141      	bne.n	266ba <k_work_cancel_delayable_sync+0x9e>
	__asm__ volatile(
   26636:	f04f 0320 	mov.w	r3, #32
   2663a:	f3ef 8511 	mrs	r5, BASEPRI
   2663e:	f383 8812 	msr	BASEPRI_MAX, r3
   26642:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26646:	483b      	ldr	r0, [pc, #236]	; (26734 <k_work_cancel_delayable_sync+0x118>)
   26648:	f7fe fbf6 	bl	24e38 <z_spin_lock_valid>
   2664c:	2800      	cmp	r0, #0
   2664e:	d041      	beq.n	266d4 <k_work_cancel_delayable_sync+0xb8>
	z_spin_lock_set_owner(l);
   26650:	4838      	ldr	r0, [pc, #224]	; (26734 <k_work_cancel_delayable_sync+0x118>)
   26652:	f7fe fc11 	bl	24e78 <z_spin_lock_set_owner>
	return *flagp;
   26656:	68fb      	ldr	r3, [r7, #12]
   26658:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2665c:	2b00      	cmp	r3, #0
   2665e:	bf14      	ite	ne
   26660:	f04f 0801 	movne.w	r8, #1
   26664:	f04f 0800 	moveq.w	r8, #0
	bool need_wait = false;

	if (pending) {
   26668:	d143      	bne.n	266f2 <k_work_cancel_delayable_sync+0xd6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2666a:	4832      	ldr	r0, [pc, #200]	; (26734 <k_work_cancel_delayable_sync+0x118>)
   2666c:	f7fe fbf4 	bl	24e58 <z_spin_unlock_valid>
   26670:	2800      	cmp	r0, #0
   26672:	d047      	beq.n	26704 <k_work_cancel_delayable_sync+0xe8>
	__asm__ volatile(
   26674:	f385 8811 	msr	BASEPRI, r5
   26678:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2667c:	2e00      	cmp	r6, #0
   2667e:	d150      	bne.n	26722 <k_work_cancel_delayable_sync+0x106>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   26680:	4640      	mov	r0, r8
   26682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   26686:	4c2c      	ldr	r4, [pc, #176]	; (26738 <k_work_cancel_delayable_sync+0x11c>)
   26688:	f240 430e 	movw	r3, #1038	; 0x40e
   2668c:	4622      	mov	r2, r4
   2668e:	492b      	ldr	r1, [pc, #172]	; (2673c <k_work_cancel_delayable_sync+0x120>)
   26690:	482b      	ldr	r0, [pc, #172]	; (26740 <k_work_cancel_delayable_sync+0x124>)
   26692:	f003 fa2a 	bl	29aea <assert_print>
   26696:	f240 410e 	movw	r1, #1038	; 0x40e
   2669a:	4620      	mov	r0, r4
   2669c:	f003 fa1e 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   266a0:	4c25      	ldr	r4, [pc, #148]	; (26738 <k_work_cancel_delayable_sync+0x11c>)
   266a2:	f240 430f 	movw	r3, #1039	; 0x40f
   266a6:	4622      	mov	r2, r4
   266a8:	4926      	ldr	r1, [pc, #152]	; (26744 <k_work_cancel_delayable_sync+0x128>)
   266aa:	4825      	ldr	r0, [pc, #148]	; (26740 <k_work_cancel_delayable_sync+0x124>)
   266ac:	f003 fa1d 	bl	29aea <assert_print>
   266b0:	f240 410f 	movw	r1, #1039	; 0x40f
   266b4:	4620      	mov	r0, r4
   266b6:	f003 fa11 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   266ba:	4c1f      	ldr	r4, [pc, #124]	; (26738 <k_work_cancel_delayable_sync+0x11c>)
   266bc:	f44f 6382 	mov.w	r3, #1040	; 0x410
   266c0:	4622      	mov	r2, r4
   266c2:	4921      	ldr	r1, [pc, #132]	; (26748 <k_work_cancel_delayable_sync+0x12c>)
   266c4:	481e      	ldr	r0, [pc, #120]	; (26740 <k_work_cancel_delayable_sync+0x124>)
   266c6:	f003 fa10 	bl	29aea <assert_print>
   266ca:	f44f 6182 	mov.w	r1, #1040	; 0x410
   266ce:	4620      	mov	r0, r4
   266d0:	f003 fa04 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   266d4:	4c1d      	ldr	r4, [pc, #116]	; (2674c <k_work_cancel_delayable_sync+0x130>)
   266d6:	2394      	movs	r3, #148	; 0x94
   266d8:	4622      	mov	r2, r4
   266da:	491d      	ldr	r1, [pc, #116]	; (26750 <k_work_cancel_delayable_sync+0x134>)
   266dc:	4818      	ldr	r0, [pc, #96]	; (26740 <k_work_cancel_delayable_sync+0x124>)
   266de:	f003 fa04 	bl	29aea <assert_print>
   266e2:	4914      	ldr	r1, [pc, #80]	; (26734 <k_work_cancel_delayable_sync+0x118>)
   266e4:	481b      	ldr	r0, [pc, #108]	; (26754 <k_work_cancel_delayable_sync+0x138>)
   266e6:	f003 fa00 	bl	29aea <assert_print>
   266ea:	2194      	movs	r1, #148	; 0x94
   266ec:	4620      	mov	r0, r4
   266ee:	f003 f9f5 	bl	29adc <assert_post_action>
		(void)cancel_delayable_async_locked(dwork);
   266f2:	4638      	mov	r0, r7
   266f4:	f008 fcb8 	bl	2f068 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   266f8:	4621      	mov	r1, r4
   266fa:	4638      	mov	r0, r7
   266fc:	f008 fc96 	bl	2f02c <cancel_sync_locked>
   26700:	4606      	mov	r6, r0
   26702:	e7b2      	b.n	2666a <k_work_cancel_delayable_sync+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26704:	4c11      	ldr	r4, [pc, #68]	; (2674c <k_work_cancel_delayable_sync+0x130>)
   26706:	23c2      	movs	r3, #194	; 0xc2
   26708:	4622      	mov	r2, r4
   2670a:	4913      	ldr	r1, [pc, #76]	; (26758 <k_work_cancel_delayable_sync+0x13c>)
   2670c:	480c      	ldr	r0, [pc, #48]	; (26740 <k_work_cancel_delayable_sync+0x124>)
   2670e:	f003 f9ec 	bl	29aea <assert_print>
   26712:	4908      	ldr	r1, [pc, #32]	; (26734 <k_work_cancel_delayable_sync+0x118>)
   26714:	4811      	ldr	r0, [pc, #68]	; (2675c <k_work_cancel_delayable_sync+0x140>)
   26716:	f003 f9e8 	bl	29aea <assert_print>
   2671a:	21c2      	movs	r1, #194	; 0xc2
   2671c:	4620      	mov	r0, r4
   2671e:	f003 f9dd 	bl	29adc <assert_post_action>
		k_sem_take(&canceller->sem, K_FOREVER);
   26722:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
   26726:	f04f 32ff 	mov.w	r2, #4294967295
   2672a:	f04f 33ff 	mov.w	r3, #4294967295
   2672e:	f7ff f917 	bl	25960 <z_impl_k_sem_take>
   26732:	e7a5      	b.n	26680 <k_work_cancel_delayable_sync+0x64>
   26734:	20009d28 	.word	0x20009d28
   26738:	00034440 	.word	0x00034440
   2673c:	0003454c 	.word	0x0003454c
   26740:	0002fdac 	.word	0x0002fdac
   26744:	000344f4 	.word	0x000344f4
   26748:	00032100 	.word	0x00032100
   2674c:	000301b0 	.word	0x000301b0
   26750:	00030210 	.word	0x00030210
   26754:	00030228 	.word	0x00030228
   26758:	000301e0 	.word	0x000301e0
   2675c:	000301f8 	.word	0x000301f8

00026760 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   26760:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   26762:	2b7f      	cmp	r3, #127	; 0x7f
   26764:	d80e      	bhi.n	26784 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   26766:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   26768:	f013 0f1f 	tst.w	r3, #31
   2676c:	d10c      	bne.n	26788 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2676e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   26772:	4b08      	ldr	r3, [pc, #32]	; (26794 <sliceable+0x34>)
   26774:	681b      	ldr	r3, [r3, #0]
   26776:	429a      	cmp	r2, r3
   26778:	db08      	blt.n	2678c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2677a:	4b07      	ldr	r3, [pc, #28]	; (26798 <sliceable+0x38>)
   2677c:	4298      	cmp	r0, r3
   2677e:	d007      	beq.n	26790 <sliceable+0x30>
   26780:	2001      	movs	r0, #1
   26782:	4770      	bx	lr
   26784:	2000      	movs	r0, #0
   26786:	4770      	bx	lr
   26788:	2000      	movs	r0, #0
   2678a:	4770      	bx	lr
   2678c:	2000      	movs	r0, #0
   2678e:	4770      	bx	lr
   26790:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   26792:	4770      	bx	lr
   26794:	20009d30 	.word	0x20009d30
   26798:	20009528 	.word	0x20009528

0002679c <pended_on_thread>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   2679c:	6880      	ldr	r0, [r0, #8]
   2679e:	b100      	cbz	r0, 267a2 <pended_on_thread+0x6>

	return thread->base.pended_on;
}
   267a0:	4770      	bx	lr
{
   267a2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(thread->base.pended_on);
   267a4:	4c06      	ldr	r4, [pc, #24]	; (267c0 <pended_on_thread+0x24>)
   267a6:	f240 23d6 	movw	r3, #726	; 0x2d6
   267aa:	4622      	mov	r2, r4
   267ac:	4905      	ldr	r1, [pc, #20]	; (267c4 <pended_on_thread+0x28>)
   267ae:	4806      	ldr	r0, [pc, #24]	; (267c8 <pended_on_thread+0x2c>)
   267b0:	f003 f99b 	bl	29aea <assert_print>
   267b4:	f240 21d6 	movw	r1, #726	; 0x2d6
   267b8:	4620      	mov	r0, r4
   267ba:	f003 f98f 	bl	29adc <assert_post_action>
   267be:	bf00      	nop
   267c0:	00034564 	.word	0x00034564
   267c4:	00034588 	.word	0x00034588
   267c8:	0002fdac 	.word	0x0002fdac

000267cc <z_sched_lock>:
{
   267cc:	b510      	push	{r4, lr}
   267ce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   267d2:	b93b      	cbnz	r3, 267e4 <z_sched_lock+0x18>
	__ASSERT(_current->base.sched_locked != 1U, "");
   267d4:	4b11      	ldr	r3, [pc, #68]	; (2681c <z_sched_lock+0x50>)
   267d6:	689a      	ldr	r2, [r3, #8]
   267d8:	7bd3      	ldrb	r3, [r2, #15]
   267da:	2b01      	cmp	r3, #1
   267dc:	d010      	beq.n	26800 <z_sched_lock+0x34>
	--_current->base.sched_locked;
   267de:	3b01      	subs	r3, #1
   267e0:	73d3      	strb	r3, [r2, #15]
}
   267e2:	bd10      	pop	{r4, pc}
	__ASSERT(!arch_is_in_isr(), "");
   267e4:	4c0e      	ldr	r4, [pc, #56]	; (26820 <z_sched_lock+0x54>)
   267e6:	23fd      	movs	r3, #253	; 0xfd
   267e8:	4622      	mov	r2, r4
   267ea:	490e      	ldr	r1, [pc, #56]	; (26824 <z_sched_lock+0x58>)
   267ec:	480e      	ldr	r0, [pc, #56]	; (26828 <z_sched_lock+0x5c>)
   267ee:	f003 f97c 	bl	29aea <assert_print>
   267f2:	480e      	ldr	r0, [pc, #56]	; (2682c <z_sched_lock+0x60>)
   267f4:	f003 f979 	bl	29aea <assert_print>
   267f8:	21fd      	movs	r1, #253	; 0xfd
   267fa:	4620      	mov	r0, r4
   267fc:	f003 f96e 	bl	29adc <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   26800:	4c07      	ldr	r4, [pc, #28]	; (26820 <z_sched_lock+0x54>)
   26802:	23fe      	movs	r3, #254	; 0xfe
   26804:	4622      	mov	r2, r4
   26806:	490a      	ldr	r1, [pc, #40]	; (26830 <z_sched_lock+0x64>)
   26808:	4807      	ldr	r0, [pc, #28]	; (26828 <z_sched_lock+0x5c>)
   2680a:	f003 f96e 	bl	29aea <assert_print>
   2680e:	4807      	ldr	r0, [pc, #28]	; (2682c <z_sched_lock+0x60>)
   26810:	f003 f96b 	bl	29aea <assert_print>
   26814:	21fe      	movs	r1, #254	; 0xfe
   26816:	4620      	mov	r0, r4
   26818:	f003 f960 	bl	29adc <assert_post_action>
   2681c:	20009ce8 	.word	0x20009ce8
   26820:	000345a0 	.word	0x000345a0
   26824:	000342a8 	.word	0x000342a8
   26828:	0002fdac 	.word	0x0002fdac
   2682c:	00032b7c 	.word	0x00032b7c
   26830:	000345cc 	.word	0x000345cc

00026834 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26834:	f1b3 3fff 	cmp.w	r3, #4294967295
   26838:	bf08      	it	eq
   2683a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2683e:	d100      	bne.n	26842 <add_thread_timeout+0xe>
   26840:	4770      	bx	lr
{
   26842:	b508      	push	{r3, lr}
   26844:	4902      	ldr	r1, [pc, #8]	; (26850 <add_thread_timeout+0x1c>)
   26846:	3018      	adds	r0, #24
   26848:	f001 fb30 	bl	27eac <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   2684c:	bd08      	pop	{r3, pc}
   2684e:	bf00      	nop
   26850:	00027065 	.word	0x00027065

00026854 <z_reset_time_slice>:
{
   26854:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   26856:	4b07      	ldr	r3, [pc, #28]	; (26874 <z_reset_time_slice+0x20>)
   26858:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   2685a:	b904      	cbnz	r4, 2685e <z_reset_time_slice+0xa>
}
   2685c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2685e:	f7fb f80d 	bl	2187c <sys_clock_elapsed>
   26862:	4404      	add	r4, r0
   26864:	4b04      	ldr	r3, [pc, #16]	; (26878 <z_reset_time_slice+0x24>)
   26866:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   26868:	2100      	movs	r1, #0
   2686a:	4b02      	ldr	r3, [pc, #8]	; (26874 <z_reset_time_slice+0x20>)
   2686c:	6818      	ldr	r0, [r3, #0]
   2686e:	f001 fc9b 	bl	281a8 <z_set_timeout_expiry>
}
   26872:	e7f3      	b.n	2685c <z_reset_time_slice+0x8>
   26874:	20009d34 	.word	0x20009d34
   26878:	20009ce8 	.word	0x20009ce8

0002687c <k_sched_time_slice_set>:
{
   2687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2687e:	4604      	mov	r4, r0
   26880:	460d      	mov	r5, r1
	__asm__ volatile(
   26882:	f04f 0320 	mov.w	r3, #32
   26886:	f3ef 8611 	mrs	r6, BASEPRI
   2688a:	f383 8812 	msr	BASEPRI_MAX, r3
   2688e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26892:	4828      	ldr	r0, [pc, #160]	; (26934 <k_sched_time_slice_set+0xb8>)
   26894:	f7fe fad0 	bl	24e38 <z_spin_lock_valid>
   26898:	b120      	cbz	r0, 268a4 <k_sched_time_slice_set+0x28>
   2689a:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
   2689c:	4825      	ldr	r0, [pc, #148]	; (26934 <k_sched_time_slice_set+0xb8>)
   2689e:	f7fe faeb 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   268a2:	e021      	b.n	268e8 <k_sched_time_slice_set+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   268a4:	4c24      	ldr	r4, [pc, #144]	; (26938 <k_sched_time_slice_set+0xbc>)
   268a6:	2394      	movs	r3, #148	; 0x94
   268a8:	4622      	mov	r2, r4
   268aa:	4924      	ldr	r1, [pc, #144]	; (2693c <k_sched_time_slice_set+0xc0>)
   268ac:	4824      	ldr	r0, [pc, #144]	; (26940 <k_sched_time_slice_set+0xc4>)
   268ae:	f003 f91c 	bl	29aea <assert_print>
   268b2:	4920      	ldr	r1, [pc, #128]	; (26934 <k_sched_time_slice_set+0xb8>)
   268b4:	4823      	ldr	r0, [pc, #140]	; (26944 <k_sched_time_slice_set+0xc8>)
   268b6:	f003 f918 	bl	29aea <assert_print>
   268ba:	2194      	movs	r1, #148	; 0x94
   268bc:	4620      	mov	r0, r4
   268be:	f003 f90d 	bl	29adc <assert_post_action>
			slice_ticks = MAX(2, slice_ticks);
   268c2:	2802      	cmp	r0, #2
   268c4:	bfb8      	it	lt
   268c6:	2002      	movlt	r0, #2
   268c8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   268ca:	4b1f      	ldr	r3, [pc, #124]	; (26948 <k_sched_time_slice_set+0xcc>)
   268cc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   268ce:	4b1f      	ldr	r3, [pc, #124]	; (2694c <k_sched_time_slice_set+0xd0>)
   268d0:	6898      	ldr	r0, [r3, #8]
   268d2:	f7ff ffbf 	bl	26854 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   268d6:	4817      	ldr	r0, [pc, #92]	; (26934 <k_sched_time_slice_set+0xb8>)
   268d8:	f7fe fabe 	bl	24e58 <z_spin_unlock_valid>
   268dc:	b1d0      	cbz	r0, 26914 <k_sched_time_slice_set+0x98>
	__asm__ volatile(
   268de:	f386 8811 	msr	BASEPRI, r6
   268e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   268e6:	2701      	movs	r7, #1
   268e8:	bb1f      	cbnz	r7, 26932 <k_sched_time_slice_set+0xb6>
		_current_cpu->slice_ticks = 0;
   268ea:	4b18      	ldr	r3, [pc, #96]	; (2694c <k_sched_time_slice_set+0xd0>)
   268ec:	2200      	movs	r2, #0
   268ee:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   268f0:	0c61      	lsrs	r1, r4, #17
   268f2:	03e0      	lsls	r0, r4, #15
   268f4:	f240 33e7 	movw	r3, #999	; 0x3e7
   268f8:	18c0      	adds	r0, r0, r3
   268fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   268fe:	f04f 0300 	mov.w	r3, #0
   26902:	f141 0100 	adc.w	r1, r1, #0
   26906:	f7e9 fc27 	bl	10158 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2690a:	4b11      	ldr	r3, [pc, #68]	; (26950 <k_sched_time_slice_set+0xd4>)
   2690c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2690e:	2c00      	cmp	r4, #0
   26910:	dcd7      	bgt.n	268c2 <k_sched_time_slice_set+0x46>
   26912:	e7da      	b.n	268ca <k_sched_time_slice_set+0x4e>
   26914:	4c08      	ldr	r4, [pc, #32]	; (26938 <k_sched_time_slice_set+0xbc>)
   26916:	23c2      	movs	r3, #194	; 0xc2
   26918:	4622      	mov	r2, r4
   2691a:	490e      	ldr	r1, [pc, #56]	; (26954 <k_sched_time_slice_set+0xd8>)
   2691c:	4808      	ldr	r0, [pc, #32]	; (26940 <k_sched_time_slice_set+0xc4>)
   2691e:	f003 f8e4 	bl	29aea <assert_print>
   26922:	4904      	ldr	r1, [pc, #16]	; (26934 <k_sched_time_slice_set+0xb8>)
   26924:	480c      	ldr	r0, [pc, #48]	; (26958 <k_sched_time_slice_set+0xdc>)
   26926:	f003 f8e0 	bl	29aea <assert_print>
   2692a:	21c2      	movs	r1, #194	; 0xc2
   2692c:	4620      	mov	r0, r4
   2692e:	f003 f8d5 	bl	29adc <assert_post_action>
}
   26932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26934:	20009d38 	.word	0x20009d38
   26938:	000301b0 	.word	0x000301b0
   2693c:	00030210 	.word	0x00030210
   26940:	0002fdac 	.word	0x0002fdac
   26944:	00030228 	.word	0x00030228
   26948:	20009d30 	.word	0x20009d30
   2694c:	20009ce8 	.word	0x20009ce8
   26950:	20009d34 	.word	0x20009d34
   26954:	000301e0 	.word	0x000301e0
   26958:	000301f8 	.word	0x000301f8

0002695c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   2695c:	b570      	push	{r4, r5, r6, lr}
   2695e:	4605      	mov	r5, r0
	__asm__ volatile(
   26960:	f04f 0320 	mov.w	r3, #32
   26964:	f3ef 8611 	mrs	r6, BASEPRI
   26968:	f383 8812 	msr	BASEPRI_MAX, r3
   2696c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26970:	481a      	ldr	r0, [pc, #104]	; (269dc <z_unpend_thread_no_timeout+0x80>)
   26972:	f7fe fa61 	bl	24e38 <z_spin_lock_valid>
   26976:	b188      	cbz	r0, 2699c <z_unpend_thread_no_timeout+0x40>
   26978:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   2697a:	4818      	ldr	r0, [pc, #96]	; (269dc <z_unpend_thread_no_timeout+0x80>)
   2697c:	f7fe fa7c 	bl	24e78 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   26980:	bb54      	cbnz	r4, 269d8 <z_unpend_thread_no_timeout+0x7c>
		unpend_thread_no_timeout(thread);
   26982:	4628      	mov	r0, r5
   26984:	f008 fba8 	bl	2f0d8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26988:	4814      	ldr	r0, [pc, #80]	; (269dc <z_unpend_thread_no_timeout+0x80>)
   2698a:	f7fe fa65 	bl	24e58 <z_spin_unlock_valid>
   2698e:	b1a0      	cbz	r0, 269ba <z_unpend_thread_no_timeout+0x5e>
	__asm__ volatile(
   26990:	f386 8811 	msr	BASEPRI, r6
   26994:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26998:	2401      	movs	r4, #1
   2699a:	e7f1      	b.n	26980 <z_unpend_thread_no_timeout+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2699c:	4c10      	ldr	r4, [pc, #64]	; (269e0 <z_unpend_thread_no_timeout+0x84>)
   2699e:	2394      	movs	r3, #148	; 0x94
   269a0:	4622      	mov	r2, r4
   269a2:	4910      	ldr	r1, [pc, #64]	; (269e4 <z_unpend_thread_no_timeout+0x88>)
   269a4:	4810      	ldr	r0, [pc, #64]	; (269e8 <z_unpend_thread_no_timeout+0x8c>)
   269a6:	f003 f8a0 	bl	29aea <assert_print>
   269aa:	490c      	ldr	r1, [pc, #48]	; (269dc <z_unpend_thread_no_timeout+0x80>)
   269ac:	480f      	ldr	r0, [pc, #60]	; (269ec <z_unpend_thread_no_timeout+0x90>)
   269ae:	f003 f89c 	bl	29aea <assert_print>
   269b2:	2194      	movs	r1, #148	; 0x94
   269b4:	4620      	mov	r0, r4
   269b6:	f003 f891 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269ba:	4c09      	ldr	r4, [pc, #36]	; (269e0 <z_unpend_thread_no_timeout+0x84>)
   269bc:	23c2      	movs	r3, #194	; 0xc2
   269be:	4622      	mov	r2, r4
   269c0:	490b      	ldr	r1, [pc, #44]	; (269f0 <z_unpend_thread_no_timeout+0x94>)
   269c2:	4809      	ldr	r0, [pc, #36]	; (269e8 <z_unpend_thread_no_timeout+0x8c>)
   269c4:	f003 f891 	bl	29aea <assert_print>
   269c8:	4904      	ldr	r1, [pc, #16]	; (269dc <z_unpend_thread_no_timeout+0x80>)
   269ca:	480a      	ldr	r0, [pc, #40]	; (269f4 <z_unpend_thread_no_timeout+0x98>)
   269cc:	f003 f88d 	bl	29aea <assert_print>
   269d0:	21c2      	movs	r1, #194	; 0xc2
   269d2:	4620      	mov	r0, r4
   269d4:	f003 f882 	bl	29adc <assert_post_action>
	}
}
   269d8:	bd70      	pop	{r4, r5, r6, pc}
   269da:	bf00      	nop
   269dc:	20009d38 	.word	0x20009d38
   269e0:	000301b0 	.word	0x000301b0
   269e4:	00030210 	.word	0x00030210
   269e8:	0002fdac 	.word	0x0002fdac
   269ec:	00030228 	.word	0x00030228
   269f0:	000301e0 	.word	0x000301e0
   269f4:	000301f8 	.word	0x000301f8

000269f8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   269f8:	b570      	push	{r4, r5, r6, lr}
   269fa:	4605      	mov	r5, r0
	if (resched(key.key) && need_swap()) {
   269fc:	460e      	mov	r6, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   269fe:	b9e9      	cbnz	r1, 26a3c <z_reschedule+0x44>
   26a00:	f3ef 8305 	mrs	r3, IPSR
   26a04:	b9d3      	cbnz	r3, 26a3c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   26a06:	4b19      	ldr	r3, [pc, #100]	; (26a6c <z_reschedule+0x74>)
   26a08:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   26a0a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   26a0c:	429a      	cmp	r2, r3
   26a0e:	d015      	beq.n	26a3c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a10:	f7fe fa22 	bl	24e58 <z_spin_unlock_valid>
   26a14:	b118      	cbz	r0, 26a1e <z_reschedule+0x26>
	ret = arch_swap(key);
   26a16:	4630      	mov	r0, r6
   26a18:	f7ee fd5e 	bl	154d8 <arch_swap>
		z_swap(lock, key);
   26a1c:	e016      	b.n	26a4c <z_reschedule+0x54>
   26a1e:	4c14      	ldr	r4, [pc, #80]	; (26a70 <z_reschedule+0x78>)
   26a20:	23e1      	movs	r3, #225	; 0xe1
   26a22:	4622      	mov	r2, r4
   26a24:	4913      	ldr	r1, [pc, #76]	; (26a74 <z_reschedule+0x7c>)
   26a26:	4814      	ldr	r0, [pc, #80]	; (26a78 <z_reschedule+0x80>)
   26a28:	f003 f85f 	bl	29aea <assert_print>
   26a2c:	4629      	mov	r1, r5
   26a2e:	4813      	ldr	r0, [pc, #76]	; (26a7c <z_reschedule+0x84>)
   26a30:	f003 f85b 	bl	29aea <assert_print>
   26a34:	21e1      	movs	r1, #225	; 0xe1
   26a36:	4620      	mov	r0, r4
   26a38:	f003 f850 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a3c:	4628      	mov	r0, r5
   26a3e:	f7fe fa0b 	bl	24e58 <z_spin_unlock_valid>
   26a42:	b120      	cbz	r0, 26a4e <z_reschedule+0x56>
   26a44:	f386 8811 	msr	BASEPRI, r6
   26a48:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   26a4c:	bd70      	pop	{r4, r5, r6, pc}
   26a4e:	4c08      	ldr	r4, [pc, #32]	; (26a70 <z_reschedule+0x78>)
   26a50:	23c2      	movs	r3, #194	; 0xc2
   26a52:	4622      	mov	r2, r4
   26a54:	4907      	ldr	r1, [pc, #28]	; (26a74 <z_reschedule+0x7c>)
   26a56:	4808      	ldr	r0, [pc, #32]	; (26a78 <z_reschedule+0x80>)
   26a58:	f003 f847 	bl	29aea <assert_print>
   26a5c:	4629      	mov	r1, r5
   26a5e:	4807      	ldr	r0, [pc, #28]	; (26a7c <z_reschedule+0x84>)
   26a60:	f003 f843 	bl	29aea <assert_print>
   26a64:	21c2      	movs	r1, #194	; 0xc2
   26a66:	4620      	mov	r0, r4
   26a68:	f003 f838 	bl	29adc <assert_post_action>
   26a6c:	20009ce8 	.word	0x20009ce8
   26a70:	000301b0 	.word	0x000301b0
   26a74:	000301e0 	.word	0x000301e0
   26a78:	0002fdac 	.word	0x0002fdac
   26a7c:	000301f8 	.word	0x000301f8

00026a80 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   26a80:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26a82:	f04f 0320 	mov.w	r3, #32
   26a86:	f3ef 8511 	mrs	r5, BASEPRI
   26a8a:	f383 8812 	msr	BASEPRI_MAX, r3
   26a8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a92:	481a      	ldr	r0, [pc, #104]	; (26afc <k_sched_lock+0x7c>)
   26a94:	f7fe f9d0 	bl	24e38 <z_spin_lock_valid>
   26a98:	b180      	cbz	r0, 26abc <k_sched_lock+0x3c>
   26a9a:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   26a9c:	4817      	ldr	r0, [pc, #92]	; (26afc <k_sched_lock+0x7c>)
   26a9e:	f7fe f9eb 	bl	24e78 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   26aa2:	bb4c      	cbnz	r4, 26af8 <k_sched_lock+0x78>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
   26aa4:	f7ff fe92 	bl	267cc <z_sched_lock>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26aa8:	4814      	ldr	r0, [pc, #80]	; (26afc <k_sched_lock+0x7c>)
   26aaa:	f7fe f9d5 	bl	24e58 <z_spin_unlock_valid>
   26aae:	b1a0      	cbz	r0, 26ada <k_sched_lock+0x5a>
	__asm__ volatile(
   26ab0:	f385 8811 	msr	BASEPRI, r5
   26ab4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26ab8:	2401      	movs	r4, #1
   26aba:	e7f2      	b.n	26aa2 <k_sched_lock+0x22>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26abc:	4c10      	ldr	r4, [pc, #64]	; (26b00 <k_sched_lock+0x80>)
   26abe:	2394      	movs	r3, #148	; 0x94
   26ac0:	4622      	mov	r2, r4
   26ac2:	4910      	ldr	r1, [pc, #64]	; (26b04 <k_sched_lock+0x84>)
   26ac4:	4810      	ldr	r0, [pc, #64]	; (26b08 <k_sched_lock+0x88>)
   26ac6:	f003 f810 	bl	29aea <assert_print>
   26aca:	490c      	ldr	r1, [pc, #48]	; (26afc <k_sched_lock+0x7c>)
   26acc:	480f      	ldr	r0, [pc, #60]	; (26b0c <k_sched_lock+0x8c>)
   26ace:	f003 f80c 	bl	29aea <assert_print>
   26ad2:	2194      	movs	r1, #148	; 0x94
   26ad4:	4620      	mov	r0, r4
   26ad6:	f003 f801 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ada:	4c09      	ldr	r4, [pc, #36]	; (26b00 <k_sched_lock+0x80>)
   26adc:	23c2      	movs	r3, #194	; 0xc2
   26ade:	4622      	mov	r2, r4
   26ae0:	490b      	ldr	r1, [pc, #44]	; (26b10 <k_sched_lock+0x90>)
   26ae2:	4809      	ldr	r0, [pc, #36]	; (26b08 <k_sched_lock+0x88>)
   26ae4:	f003 f801 	bl	29aea <assert_print>
   26ae8:	4904      	ldr	r1, [pc, #16]	; (26afc <k_sched_lock+0x7c>)
   26aea:	480a      	ldr	r0, [pc, #40]	; (26b14 <k_sched_lock+0x94>)
   26aec:	f002 fffd 	bl	29aea <assert_print>
   26af0:	21c2      	movs	r1, #194	; 0xc2
   26af2:	4620      	mov	r0, r4
   26af4:	f002 fff2 	bl	29adc <assert_post_action>
	}
}
   26af8:	bd38      	pop	{r3, r4, r5, pc}
   26afa:	bf00      	nop
   26afc:	20009d38 	.word	0x20009d38
   26b00:	000301b0 	.word	0x000301b0
   26b04:	00030210 	.word	0x00030210
   26b08:	0002fdac 	.word	0x0002fdac
   26b0c:	00030228 	.word	0x00030228
   26b10:	000301e0 	.word	0x000301e0
   26b14:	000301f8 	.word	0x000301f8

00026b18 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26b18:	4b0c      	ldr	r3, [pc, #48]	; (26b4c <z_priq_dumb_remove+0x34>)
   26b1a:	4299      	cmp	r1, r3
   26b1c:	d007      	beq.n	26b2e <z_priq_dumb_remove+0x16>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   26b1e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   26b20:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   26b22:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26b24:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26b26:	2300      	movs	r3, #0
   26b28:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   26b2a:	604b      	str	r3, [r1, #4]
   26b2c:	4770      	bx	lr
{
   26b2e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26b30:	4c07      	ldr	r4, [pc, #28]	; (26b50 <z_priq_dumb_remove+0x38>)
   26b32:	f240 4373 	movw	r3, #1139	; 0x473
   26b36:	4622      	mov	r2, r4
   26b38:	4906      	ldr	r1, [pc, #24]	; (26b54 <z_priq_dumb_remove+0x3c>)
   26b3a:	4807      	ldr	r0, [pc, #28]	; (26b58 <z_priq_dumb_remove+0x40>)
   26b3c:	f002 ffd5 	bl	29aea <assert_print>
   26b40:	f240 4173 	movw	r1, #1139	; 0x473
   26b44:	4620      	mov	r0, r4
   26b46:	f002 ffc9 	bl	29adc <assert_post_action>
   26b4a:	bf00      	nop
   26b4c:	20009528 	.word	0x20009528
   26b50:	00034564 	.word	0x00034564
   26b54:	00034600 	.word	0x00034600
   26b58:	0002fdac 	.word	0x0002fdac

00026b5c <z_unpend_thread>:
{
   26b5c:	b570      	push	{r4, r5, r6, lr}
   26b5e:	4605      	mov	r5, r0
	__asm__ volatile(
   26b60:	f04f 0320 	mov.w	r3, #32
   26b64:	f3ef 8611 	mrs	r6, BASEPRI
   26b68:	f383 8812 	msr	BASEPRI_MAX, r3
   26b6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b70:	481c      	ldr	r0, [pc, #112]	; (26be4 <z_unpend_thread+0x88>)
   26b72:	f7fe f961 	bl	24e38 <z_spin_lock_valid>
   26b76:	b188      	cbz	r0, 26b9c <z_unpend_thread+0x40>
   26b78:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   26b7a:	481a      	ldr	r0, [pc, #104]	; (26be4 <z_unpend_thread+0x88>)
   26b7c:	f7fe f97c 	bl	24e78 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   26b80:	bb54      	cbnz	r4, 26bd8 <z_unpend_thread+0x7c>
		unpend_thread_no_timeout(thread);
   26b82:	4628      	mov	r0, r5
   26b84:	f008 faa8 	bl	2f0d8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b88:	4816      	ldr	r0, [pc, #88]	; (26be4 <z_unpend_thread+0x88>)
   26b8a:	f7fe f965 	bl	24e58 <z_spin_unlock_valid>
   26b8e:	b1a0      	cbz	r0, 26bba <z_unpend_thread+0x5e>
	__asm__ volatile(
   26b90:	f386 8811 	msr	BASEPRI, r6
   26b94:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26b98:	2401      	movs	r4, #1
   26b9a:	e7f1      	b.n	26b80 <z_unpend_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b9c:	4c12      	ldr	r4, [pc, #72]	; (26be8 <z_unpend_thread+0x8c>)
   26b9e:	2394      	movs	r3, #148	; 0x94
   26ba0:	4622      	mov	r2, r4
   26ba2:	4912      	ldr	r1, [pc, #72]	; (26bec <z_unpend_thread+0x90>)
   26ba4:	4812      	ldr	r0, [pc, #72]	; (26bf0 <z_unpend_thread+0x94>)
   26ba6:	f002 ffa0 	bl	29aea <assert_print>
   26baa:	490e      	ldr	r1, [pc, #56]	; (26be4 <z_unpend_thread+0x88>)
   26bac:	4811      	ldr	r0, [pc, #68]	; (26bf4 <z_unpend_thread+0x98>)
   26bae:	f002 ff9c 	bl	29aea <assert_print>
   26bb2:	2194      	movs	r1, #148	; 0x94
   26bb4:	4620      	mov	r0, r4
   26bb6:	f002 ff91 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26bba:	4c0b      	ldr	r4, [pc, #44]	; (26be8 <z_unpend_thread+0x8c>)
   26bbc:	23c2      	movs	r3, #194	; 0xc2
   26bbe:	4622      	mov	r2, r4
   26bc0:	490d      	ldr	r1, [pc, #52]	; (26bf8 <z_unpend_thread+0x9c>)
   26bc2:	480b      	ldr	r0, [pc, #44]	; (26bf0 <z_unpend_thread+0x94>)
   26bc4:	f002 ff91 	bl	29aea <assert_print>
   26bc8:	4906      	ldr	r1, [pc, #24]	; (26be4 <z_unpend_thread+0x88>)
   26bca:	480c      	ldr	r0, [pc, #48]	; (26bfc <z_unpend_thread+0xa0>)
   26bcc:	f002 ff8d 	bl	29aea <assert_print>
   26bd0:	21c2      	movs	r1, #194	; 0xc2
   26bd2:	4620      	mov	r0, r4
   26bd4:	f002 ff82 	bl	29adc <assert_post_action>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26bd8:	f105 0018 	add.w	r0, r5, #24
   26bdc:	f001 fa3c 	bl	28058 <z_abort_timeout>
}
   26be0:	bd70      	pop	{r4, r5, r6, pc}
   26be2:	bf00      	nop
   26be4:	20009d38 	.word	0x20009d38
   26be8:	000301b0 	.word	0x000301b0
   26bec:	00030210 	.word	0x00030210
   26bf0:	0002fdac 	.word	0x0002fdac
   26bf4:	00030228 	.word	0x00030228
   26bf8:	000301e0 	.word	0x000301e0
   26bfc:	000301f8 	.word	0x000301f8

00026c00 <update_cache>:
{
   26c00:	b538      	push	{r3, r4, r5, lr}
   26c02:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   26c04:	4817      	ldr	r0, [pc, #92]	; (26c64 <update_cache+0x64>)
   26c06:	f008 fa75 	bl	2f0f4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   26c0a:	4605      	mov	r5, r0
   26c0c:	b178      	cbz	r0, 26c2e <update_cache+0x2e>
	if (preempt_ok != 0) {
   26c0e:	b9fc      	cbnz	r4, 26c50 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
   26c10:	4b15      	ldr	r3, [pc, #84]	; (26c68 <update_cache+0x68>)
   26c12:	689b      	ldr	r3, [r3, #8]
   26c14:	b173      	cbz	r3, 26c34 <update_cache+0x34>
	uint8_t state = thread->base.thread_state;
   26c16:	7b5a      	ldrb	r2, [r3, #13]
	if (z_is_thread_prevented_from_running(_current)) {
   26c18:	f012 0f1f 	tst.w	r2, #31
   26c1c:	d118      	bne.n	26c50 <update_cache+0x50>
	return node->next != NULL;
   26c1e:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26c20:	b9b2      	cbnz	r2, 26c50 <update_cache+0x50>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   26c22:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   26c24:	2a7f      	cmp	r2, #127	; 0x7f
   26c26:	d913      	bls.n	26c50 <update_cache+0x50>
		_kernel.ready_q.cache = _current;
   26c28:	4a0f      	ldr	r2, [pc, #60]	; (26c68 <update_cache+0x68>)
   26c2a:	61d3      	str	r3, [r2, #28]
   26c2c:	e019      	b.n	26c62 <update_cache+0x62>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   26c2e:	4b0e      	ldr	r3, [pc, #56]	; (26c68 <update_cache+0x68>)
   26c30:	68dd      	ldr	r5, [r3, #12]
   26c32:	e7ec      	b.n	26c0e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   26c34:	4c0d      	ldr	r4, [pc, #52]	; (26c6c <update_cache+0x6c>)
   26c36:	2389      	movs	r3, #137	; 0x89
   26c38:	4622      	mov	r2, r4
   26c3a:	490d      	ldr	r1, [pc, #52]	; (26c70 <update_cache+0x70>)
   26c3c:	480d      	ldr	r0, [pc, #52]	; (26c74 <update_cache+0x74>)
   26c3e:	f002 ff54 	bl	29aea <assert_print>
   26c42:	480d      	ldr	r0, [pc, #52]	; (26c78 <update_cache+0x78>)
   26c44:	f002 ff51 	bl	29aea <assert_print>
   26c48:	2189      	movs	r1, #137	; 0x89
   26c4a:	4620      	mov	r0, r4
   26c4c:	f002 ff46 	bl	29adc <assert_post_action>
		if (thread != _current) {
   26c50:	4b05      	ldr	r3, [pc, #20]	; (26c68 <update_cache+0x68>)
   26c52:	689b      	ldr	r3, [r3, #8]
   26c54:	42ab      	cmp	r3, r5
   26c56:	d002      	beq.n	26c5e <update_cache+0x5e>
			z_reset_time_slice(thread);
   26c58:	4628      	mov	r0, r5
   26c5a:	f7ff fdfb 	bl	26854 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   26c5e:	4b02      	ldr	r3, [pc, #8]	; (26c68 <update_cache+0x68>)
   26c60:	61dd      	str	r5, [r3, #28]
}
   26c62:	bd38      	pop	{r3, r4, r5, pc}
   26c64:	20009d08 	.word	0x20009d08
   26c68:	20009ce8 	.word	0x20009ce8
   26c6c:	00034564 	.word	0x00034564
   26c70:	00034624 	.word	0x00034624
   26c74:	0002fdac 	.word	0x0002fdac
   26c78:	00032b7c 	.word	0x00032b7c

00026c7c <move_thread_to_end_of_prio_q>:
{
   26c7c:	b538      	push	{r3, r4, r5, lr}
   26c7e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   26c80:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   26c82:	f990 300d 	ldrsb.w	r3, [r0, #13]
   26c86:	2b00      	cmp	r3, #0
   26c88:	db0d      	blt.n	26ca6 <move_thread_to_end_of_prio_q+0x2a>
	thread->base.thread_state |= _THREAD_QUEUED;
   26c8a:	7b6b      	ldrb	r3, [r5, #13]
   26c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26c90:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26c92:	4b22      	ldr	r3, [pc, #136]	; (26d1c <move_thread_to_end_of_prio_q+0xa0>)
   26c94:	429d      	cmp	r5, r3
   26c96:	d00e      	beq.n	26cb6 <move_thread_to_end_of_prio_q+0x3a>
	return list->head == list;
   26c98:	4b21      	ldr	r3, [pc, #132]	; (26d20 <move_thread_to_end_of_prio_q+0xa4>)
   26c9a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26c9e:	429c      	cmp	r4, r3
   26ca0:	d11b      	bne.n	26cda <move_thread_to_end_of_prio_q+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26ca2:	2400      	movs	r4, #0
   26ca4:	e019      	b.n	26cda <move_thread_to_end_of_prio_q+0x5e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26ca6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   26caa:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26cac:	4601      	mov	r1, r0
   26cae:	481d      	ldr	r0, [pc, #116]	; (26d24 <move_thread_to_end_of_prio_q+0xa8>)
   26cb0:	f7ff ff32 	bl	26b18 <z_priq_dumb_remove>
}
   26cb4:	e7e9      	b.n	26c8a <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26cb6:	4c1c      	ldr	r4, [pc, #112]	; (26d28 <move_thread_to_end_of_prio_q+0xac>)
   26cb8:	23ba      	movs	r3, #186	; 0xba
   26cba:	4622      	mov	r2, r4
   26cbc:	491b      	ldr	r1, [pc, #108]	; (26d2c <move_thread_to_end_of_prio_q+0xb0>)
   26cbe:	481c      	ldr	r0, [pc, #112]	; (26d30 <move_thread_to_end_of_prio_q+0xb4>)
   26cc0:	f002 ff13 	bl	29aea <assert_print>
   26cc4:	21ba      	movs	r1, #186	; 0xba
   26cc6:	4620      	mov	r0, r4
   26cc8:	f002 ff08 	bl	29adc <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   26ccc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   26cce:	606b      	str	r3, [r5, #4]
	node->next = successor;
   26cd0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   26cd2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26cd4:	6065      	str	r5, [r4, #4]
}
   26cd6:	e017      	b.n	26d08 <move_thread_to_end_of_prio_q+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26cd8:	2400      	movs	r4, #0
   26cda:	b16c      	cbz	r4, 26cf8 <move_thread_to_end_of_prio_q+0x7c>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26cdc:	4621      	mov	r1, r4
   26cde:	4628      	mov	r0, r5
   26ce0:	f008 f9d6 	bl	2f090 <z_sched_prio_cmp>
   26ce4:	2800      	cmp	r0, #0
   26ce6:	dcf1      	bgt.n	26ccc <move_thread_to_end_of_prio_q+0x50>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26ce8:	2c00      	cmp	r4, #0
   26cea:	d0f6      	beq.n	26cda <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   26cec:	4b0c      	ldr	r3, [pc, #48]	; (26d20 <move_thread_to_end_of_prio_q+0xa4>)
   26cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26cf0:	429c      	cmp	r4, r3
   26cf2:	d0f1      	beq.n	26cd8 <move_thread_to_end_of_prio_q+0x5c>
   26cf4:	6824      	ldr	r4, [r4, #0]
   26cf6:	e7f0      	b.n	26cda <move_thread_to_end_of_prio_q+0x5e>
	sys_dnode_t *const tail = list->tail;
   26cf8:	4b09      	ldr	r3, [pc, #36]	; (26d20 <move_thread_to_end_of_prio_q+0xa4>)
   26cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   26cfc:	f103 0120 	add.w	r1, r3, #32
   26d00:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   26d02:	606a      	str	r2, [r5, #4]
	tail->next = node;
   26d04:	6015      	str	r5, [r2, #0]
	list->tail = node;
   26d06:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   26d08:	4b05      	ldr	r3, [pc, #20]	; (26d20 <move_thread_to_end_of_prio_q+0xa4>)
   26d0a:	6898      	ldr	r0, [r3, #8]
   26d0c:	42a8      	cmp	r0, r5
   26d0e:	bf14      	ite	ne
   26d10:	2000      	movne	r0, #0
   26d12:	2001      	moveq	r0, #1
   26d14:	f7ff ff74 	bl	26c00 <update_cache>
}
   26d18:	bd38      	pop	{r3, r4, r5, pc}
   26d1a:	bf00      	nop
   26d1c:	20009528 	.word	0x20009528
   26d20:	20009ce8 	.word	0x20009ce8
   26d24:	20009d08 	.word	0x20009d08
   26d28:	00034564 	.word	0x00034564
   26d2c:	00034600 	.word	0x00034600
   26d30:	0002fdac 	.word	0x0002fdac

00026d34 <slice_expired_locked>:
{
   26d34:	b538      	push	{r3, r4, r5, lr}
   26d36:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   26d38:	4b07      	ldr	r3, [pc, #28]	; (26d58 <slice_expired_locked+0x24>)
   26d3a:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   26d3c:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   26d3e:	f013 0f1f 	tst.w	r3, #31
   26d42:	d004      	beq.n	26d4e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   26d44:	4628      	mov	r0, r5
   26d46:	f7ff fd85 	bl	26854 <z_reset_time_slice>
}
   26d4a:	4620      	mov	r0, r4
   26d4c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   26d4e:	4628      	mov	r0, r5
   26d50:	f7ff ff94 	bl	26c7c <move_thread_to_end_of_prio_q>
   26d54:	e7f6      	b.n	26d44 <slice_expired_locked+0x10>
   26d56:	bf00      	nop
   26d58:	20009ce8 	.word	0x20009ce8

00026d5c <z_time_slice>:
{
   26d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d5e:	4605      	mov	r5, r0
	__asm__ volatile(
   26d60:	f04f 0320 	mov.w	r3, #32
   26d64:	f3ef 8611 	mrs	r6, BASEPRI
   26d68:	f383 8812 	msr	BASEPRI_MAX, r3
   26d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d70:	4834      	ldr	r0, [pc, #208]	; (26e44 <z_time_slice+0xe8>)
   26d72:	f7fe f861 	bl	24e38 <z_spin_lock_valid>
   26d76:	b1e0      	cbz	r0, 26db2 <z_time_slice+0x56>
	z_spin_lock_set_owner(l);
   26d78:	4832      	ldr	r0, [pc, #200]	; (26e44 <z_time_slice+0xe8>)
   26d7a:	f7fe f87d 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   26d7e:	4634      	mov	r4, r6
	if (pending_current == _current) {
   26d80:	4b31      	ldr	r3, [pc, #196]	; (26e48 <z_time_slice+0xec>)
   26d82:	6898      	ldr	r0, [r3, #8]
   26d84:	4b31      	ldr	r3, [pc, #196]	; (26e4c <z_time_slice+0xf0>)
   26d86:	681b      	ldr	r3, [r3, #0]
   26d88:	4298      	cmp	r0, r3
   26d8a:	d021      	beq.n	26dd0 <z_time_slice+0x74>
	pending_current = NULL;
   26d8c:	4b2f      	ldr	r3, [pc, #188]	; (26e4c <z_time_slice+0xf0>)
   26d8e:	2200      	movs	r2, #0
   26d90:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   26d92:	4b2f      	ldr	r3, [pc, #188]	; (26e50 <z_time_slice+0xf4>)
   26d94:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   26d96:	2b00      	cmp	r3, #0
   26d98:	d039      	beq.n	26e0e <z_time_slice+0xb2>
   26d9a:	f7ff fce1 	bl	26760 <sliceable>
   26d9e:	2800      	cmp	r0, #0
   26da0:	d035      	beq.n	26e0e <z_time_slice+0xb2>
		if (ticks >= _current_cpu->slice_ticks) {
   26da2:	4b29      	ldr	r3, [pc, #164]	; (26e48 <z_time_slice+0xec>)
   26da4:	691b      	ldr	r3, [r3, #16]
   26da6:	42ab      	cmp	r3, r5
   26da8:	dd2c      	ble.n	26e04 <z_time_slice+0xa8>
			_current_cpu->slice_ticks -= ticks;
   26daa:	1b5b      	subs	r3, r3, r5
   26dac:	4a26      	ldr	r2, [pc, #152]	; (26e48 <z_time_slice+0xec>)
   26dae:	6113      	str	r3, [r2, #16]
   26db0:	e030      	b.n	26e14 <z_time_slice+0xb8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26db2:	4c28      	ldr	r4, [pc, #160]	; (26e54 <z_time_slice+0xf8>)
   26db4:	2394      	movs	r3, #148	; 0x94
   26db6:	4622      	mov	r2, r4
   26db8:	4927      	ldr	r1, [pc, #156]	; (26e58 <z_time_slice+0xfc>)
   26dba:	4828      	ldr	r0, [pc, #160]	; (26e5c <z_time_slice+0x100>)
   26dbc:	f002 fe95 	bl	29aea <assert_print>
   26dc0:	4920      	ldr	r1, [pc, #128]	; (26e44 <z_time_slice+0xe8>)
   26dc2:	4827      	ldr	r0, [pc, #156]	; (26e60 <z_time_slice+0x104>)
   26dc4:	f002 fe91 	bl	29aea <assert_print>
   26dc8:	2194      	movs	r1, #148	; 0x94
   26dca:	4620      	mov	r0, r4
   26dcc:	f002 fe86 	bl	29adc <assert_post_action>
		z_reset_time_slice(_current);
   26dd0:	f7ff fd40 	bl	26854 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26dd4:	481b      	ldr	r0, [pc, #108]	; (26e44 <z_time_slice+0xe8>)
   26dd6:	f7fe f83f 	bl	24e58 <z_spin_unlock_valid>
   26dda:	b120      	cbz	r0, 26de6 <z_time_slice+0x8a>
	__asm__ volatile(
   26ddc:	f386 8811 	msr	BASEPRI, r6
   26de0:	f3bf 8f6f 	isb	sy
		return;
   26de4:	e01e      	b.n	26e24 <z_time_slice+0xc8>
   26de6:	4c1b      	ldr	r4, [pc, #108]	; (26e54 <z_time_slice+0xf8>)
   26de8:	23c2      	movs	r3, #194	; 0xc2
   26dea:	4622      	mov	r2, r4
   26dec:	491d      	ldr	r1, [pc, #116]	; (26e64 <z_time_slice+0x108>)
   26dee:	481b      	ldr	r0, [pc, #108]	; (26e5c <z_time_slice+0x100>)
   26df0:	f002 fe7b 	bl	29aea <assert_print>
   26df4:	4913      	ldr	r1, [pc, #76]	; (26e44 <z_time_slice+0xe8>)
   26df6:	481c      	ldr	r0, [pc, #112]	; (26e68 <z_time_slice+0x10c>)
   26df8:	f002 fe77 	bl	29aea <assert_print>
   26dfc:	21c2      	movs	r1, #194	; 0xc2
   26dfe:	4620      	mov	r0, r4
   26e00:	f002 fe6c 	bl	29adc <assert_post_action>
			key = slice_expired_locked(key);
   26e04:	4630      	mov	r0, r6
   26e06:	f7ff ff95 	bl	26d34 <slice_expired_locked>
   26e0a:	4604      	mov	r4, r0
   26e0c:	e002      	b.n	26e14 <z_time_slice+0xb8>
		_current_cpu->slice_ticks = 0;
   26e0e:	4b0e      	ldr	r3, [pc, #56]	; (26e48 <z_time_slice+0xec>)
   26e10:	2200      	movs	r2, #0
   26e12:	611a      	str	r2, [r3, #16]
   26e14:	480b      	ldr	r0, [pc, #44]	; (26e44 <z_time_slice+0xe8>)
   26e16:	f7fe f81f 	bl	24e58 <z_spin_unlock_valid>
   26e1a:	b120      	cbz	r0, 26e26 <z_time_slice+0xca>
   26e1c:	f384 8811 	msr	BASEPRI, r4
   26e20:	f3bf 8f6f 	isb	sy
}
   26e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26e26:	4c0b      	ldr	r4, [pc, #44]	; (26e54 <z_time_slice+0xf8>)
   26e28:	23c2      	movs	r3, #194	; 0xc2
   26e2a:	4622      	mov	r2, r4
   26e2c:	490d      	ldr	r1, [pc, #52]	; (26e64 <z_time_slice+0x108>)
   26e2e:	480b      	ldr	r0, [pc, #44]	; (26e5c <z_time_slice+0x100>)
   26e30:	f002 fe5b 	bl	29aea <assert_print>
   26e34:	4903      	ldr	r1, [pc, #12]	; (26e44 <z_time_slice+0xe8>)
   26e36:	480c      	ldr	r0, [pc, #48]	; (26e68 <z_time_slice+0x10c>)
   26e38:	f002 fe57 	bl	29aea <assert_print>
   26e3c:	21c2      	movs	r1, #194	; 0xc2
   26e3e:	4620      	mov	r0, r4
   26e40:	f002 fe4c 	bl	29adc <assert_post_action>
   26e44:	20009d38 	.word	0x20009d38
   26e48:	20009ce8 	.word	0x20009ce8
   26e4c:	20009d2c 	.word	0x20009d2c
   26e50:	20009d34 	.word	0x20009d34
   26e54:	000301b0 	.word	0x000301b0
   26e58:	00030210 	.word	0x00030210
   26e5c:	0002fdac 	.word	0x0002fdac
   26e60:	00030228 	.word	0x00030228
   26e64:	000301e0 	.word	0x000301e0
   26e68:	000301f8 	.word	0x000301f8

00026e6c <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   26e6c:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   26e6e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   26e72:	2b00      	cmp	r3, #0
   26e74:	db41      	blt.n	26efa <ready_thread+0x8e>
{
   26e76:	b570      	push	{r4, r5, r6, lr}
   26e78:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26e7a:	f012 0f1f 	tst.w	r2, #31
   26e7e:	d101      	bne.n	26e84 <ready_thread+0x18>
	return node->next != NULL;
   26e80:	6986      	ldr	r6, [r0, #24]
   26e82:	b106      	cbz	r6, 26e86 <ready_thread+0x1a>
}
   26e84:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   26e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26e8a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26e8c:	4b1b      	ldr	r3, [pc, #108]	; (26efc <ready_thread+0x90>)
   26e8e:	4298      	cmp	r0, r3
   26e90:	d006      	beq.n	26ea0 <ready_thread+0x34>
	return list->head == list;
   26e92:	4b1b      	ldr	r3, [pc, #108]	; (26f00 <ready_thread+0x94>)
   26e94:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26e98:	429d      	cmp	r5, r3
   26e9a:	d113      	bne.n	26ec4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26e9c:	4635      	mov	r5, r6
   26e9e:	e011      	b.n	26ec4 <ready_thread+0x58>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26ea0:	4c18      	ldr	r4, [pc, #96]	; (26f04 <ready_thread+0x98>)
   26ea2:	23ba      	movs	r3, #186	; 0xba
   26ea4:	4622      	mov	r2, r4
   26ea6:	4918      	ldr	r1, [pc, #96]	; (26f08 <ready_thread+0x9c>)
   26ea8:	4818      	ldr	r0, [pc, #96]	; (26f0c <ready_thread+0xa0>)
   26eaa:	f002 fe1e 	bl	29aea <assert_print>
   26eae:	21ba      	movs	r1, #186	; 0xba
   26eb0:	4620      	mov	r0, r4
   26eb2:	f002 fe13 	bl	29adc <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   26eb6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   26eb8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   26eba:	6025      	str	r5, [r4, #0]
	prev->next = node;
   26ebc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26ebe:	606c      	str	r4, [r5, #4]
}
   26ec0:	e017      	b.n	26ef2 <ready_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26ec2:	4635      	mov	r5, r6
   26ec4:	b16d      	cbz	r5, 26ee2 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26ec6:	4629      	mov	r1, r5
   26ec8:	4620      	mov	r0, r4
   26eca:	f008 f8e1 	bl	2f090 <z_sched_prio_cmp>
   26ece:	2800      	cmp	r0, #0
   26ed0:	dcf1      	bgt.n	26eb6 <ready_thread+0x4a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26ed2:	2d00      	cmp	r5, #0
   26ed4:	d0f6      	beq.n	26ec4 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
   26ed6:	4b0a      	ldr	r3, [pc, #40]	; (26f00 <ready_thread+0x94>)
   26ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26eda:	429d      	cmp	r5, r3
   26edc:	d0f1      	beq.n	26ec2 <ready_thread+0x56>
   26ede:	682d      	ldr	r5, [r5, #0]
   26ee0:	e7f0      	b.n	26ec4 <ready_thread+0x58>
	sys_dnode_t *const tail = list->tail;
   26ee2:	4b07      	ldr	r3, [pc, #28]	; (26f00 <ready_thread+0x94>)
   26ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   26ee6:	f103 0120 	add.w	r1, r3, #32
   26eea:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   26eec:	6062      	str	r2, [r4, #4]
	tail->next = node;
   26eee:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26ef0:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   26ef2:	2000      	movs	r0, #0
   26ef4:	f7ff fe84 	bl	26c00 <update_cache>
}
   26ef8:	e7c4      	b.n	26e84 <ready_thread+0x18>
   26efa:	4770      	bx	lr
   26efc:	20009528 	.word	0x20009528
   26f00:	20009ce8 	.word	0x20009ce8
   26f04:	00034564 	.word	0x00034564
   26f08:	00034600 	.word	0x00034600
   26f0c:	0002fdac 	.word	0x0002fdac

00026f10 <z_ready_thread>:
{
   26f10:	b570      	push	{r4, r5, r6, lr}
   26f12:	4605      	mov	r5, r0
	__asm__ volatile(
   26f14:	f04f 0320 	mov.w	r3, #32
   26f18:	f3ef 8611 	mrs	r6, BASEPRI
   26f1c:	f383 8812 	msr	BASEPRI_MAX, r3
   26f20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f24:	481d      	ldr	r0, [pc, #116]	; (26f9c <z_ready_thread+0x8c>)
   26f26:	f7fd ff87 	bl	24e38 <z_spin_lock_valid>
   26f2a:	b120      	cbz	r0, 26f36 <z_ready_thread+0x26>
   26f2c:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   26f2e:	481b      	ldr	r0, [pc, #108]	; (26f9c <z_ready_thread+0x8c>)
   26f30:	f7fd ffa2 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   26f34:	e017      	b.n	26f66 <z_ready_thread+0x56>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f36:	4c1a      	ldr	r4, [pc, #104]	; (26fa0 <z_ready_thread+0x90>)
   26f38:	2394      	movs	r3, #148	; 0x94
   26f3a:	4622      	mov	r2, r4
   26f3c:	4919      	ldr	r1, [pc, #100]	; (26fa4 <z_ready_thread+0x94>)
   26f3e:	481a      	ldr	r0, [pc, #104]	; (26fa8 <z_ready_thread+0x98>)
   26f40:	f002 fdd3 	bl	29aea <assert_print>
   26f44:	4915      	ldr	r1, [pc, #84]	; (26f9c <z_ready_thread+0x8c>)
   26f46:	4819      	ldr	r0, [pc, #100]	; (26fac <z_ready_thread+0x9c>)
   26f48:	f002 fdcf 	bl	29aea <assert_print>
   26f4c:	2194      	movs	r1, #148	; 0x94
   26f4e:	4620      	mov	r0, r4
   26f50:	f002 fdc4 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f54:	4811      	ldr	r0, [pc, #68]	; (26f9c <z_ready_thread+0x8c>)
   26f56:	f7fd ff7f 	bl	24e58 <z_spin_unlock_valid>
   26f5a:	b170      	cbz	r0, 26f7a <z_ready_thread+0x6a>
	__asm__ volatile(
   26f5c:	f386 8811 	msr	BASEPRI, r6
   26f60:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   26f64:	2401      	movs	r4, #1
   26f66:	b9bc      	cbnz	r4, 26f98 <z_ready_thread+0x88>
		if (!thread_active_elsewhere(thread)) {
   26f68:	4628      	mov	r0, r5
   26f6a:	f008 f88f 	bl	2f08c <thread_active_elsewhere>
   26f6e:	2800      	cmp	r0, #0
   26f70:	d1f0      	bne.n	26f54 <z_ready_thread+0x44>
			ready_thread(thread);
   26f72:	4628      	mov	r0, r5
   26f74:	f7ff ff7a 	bl	26e6c <ready_thread>
   26f78:	e7ec      	b.n	26f54 <z_ready_thread+0x44>
   26f7a:	4c09      	ldr	r4, [pc, #36]	; (26fa0 <z_ready_thread+0x90>)
   26f7c:	23c2      	movs	r3, #194	; 0xc2
   26f7e:	4622      	mov	r2, r4
   26f80:	490b      	ldr	r1, [pc, #44]	; (26fb0 <z_ready_thread+0xa0>)
   26f82:	4809      	ldr	r0, [pc, #36]	; (26fa8 <z_ready_thread+0x98>)
   26f84:	f002 fdb1 	bl	29aea <assert_print>
   26f88:	4904      	ldr	r1, [pc, #16]	; (26f9c <z_ready_thread+0x8c>)
   26f8a:	480a      	ldr	r0, [pc, #40]	; (26fb4 <z_ready_thread+0xa4>)
   26f8c:	f002 fdad 	bl	29aea <assert_print>
   26f90:	21c2      	movs	r1, #194	; 0xc2
   26f92:	4620      	mov	r0, r4
   26f94:	f002 fda2 	bl	29adc <assert_post_action>
}
   26f98:	bd70      	pop	{r4, r5, r6, pc}
   26f9a:	bf00      	nop
   26f9c:	20009d38 	.word	0x20009d38
   26fa0:	000301b0 	.word	0x000301b0
   26fa4:	00030210 	.word	0x00030210
   26fa8:	0002fdac 	.word	0x0002fdac
   26fac:	00030228 	.word	0x00030228
   26fb0:	000301e0 	.word	0x000301e0
   26fb4:	000301f8 	.word	0x000301f8

00026fb8 <z_sched_start>:
{
   26fb8:	b570      	push	{r4, r5, r6, lr}
   26fba:	4604      	mov	r4, r0
	__asm__ volatile(
   26fbc:	f04f 0320 	mov.w	r3, #32
   26fc0:	f3ef 8511 	mrs	r5, BASEPRI
   26fc4:	f383 8812 	msr	BASEPRI_MAX, r3
   26fc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26fcc:	481e      	ldr	r0, [pc, #120]	; (27048 <z_sched_start+0x90>)
   26fce:	f7fd ff33 	bl	24e38 <z_spin_lock_valid>
   26fd2:	b178      	cbz	r0, 26ff4 <z_sched_start+0x3c>
	z_spin_lock_set_owner(l);
   26fd4:	481c      	ldr	r0, [pc, #112]	; (27048 <z_sched_start+0x90>)
   26fd6:	f7fd ff4f 	bl	24e78 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26fda:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   26fdc:	f013 0f04 	tst.w	r3, #4
   26fe0:	d126      	bne.n	27030 <z_sched_start+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26fe2:	4819      	ldr	r0, [pc, #100]	; (27048 <z_sched_start+0x90>)
   26fe4:	f7fd ff38 	bl	24e58 <z_spin_unlock_valid>
   26fe8:	b198      	cbz	r0, 27012 <z_sched_start+0x5a>
	__asm__ volatile(
   26fea:	f385 8811 	msr	BASEPRI, r5
   26fee:	f3bf 8f6f 	isb	sy
		return;
   26ff2:	e027      	b.n	27044 <z_sched_start+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ff4:	4c15      	ldr	r4, [pc, #84]	; (2704c <z_sched_start+0x94>)
   26ff6:	2394      	movs	r3, #148	; 0x94
   26ff8:	4622      	mov	r2, r4
   26ffa:	4915      	ldr	r1, [pc, #84]	; (27050 <z_sched_start+0x98>)
   26ffc:	4815      	ldr	r0, [pc, #84]	; (27054 <z_sched_start+0x9c>)
   26ffe:	f002 fd74 	bl	29aea <assert_print>
   27002:	4911      	ldr	r1, [pc, #68]	; (27048 <z_sched_start+0x90>)
   27004:	4814      	ldr	r0, [pc, #80]	; (27058 <z_sched_start+0xa0>)
   27006:	f002 fd70 	bl	29aea <assert_print>
   2700a:	2194      	movs	r1, #148	; 0x94
   2700c:	4620      	mov	r0, r4
   2700e:	f002 fd65 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27012:	4c0e      	ldr	r4, [pc, #56]	; (2704c <z_sched_start+0x94>)
   27014:	23c2      	movs	r3, #194	; 0xc2
   27016:	4622      	mov	r2, r4
   27018:	4910      	ldr	r1, [pc, #64]	; (2705c <z_sched_start+0xa4>)
   2701a:	480e      	ldr	r0, [pc, #56]	; (27054 <z_sched_start+0x9c>)
   2701c:	f002 fd65 	bl	29aea <assert_print>
   27020:	4909      	ldr	r1, [pc, #36]	; (27048 <z_sched_start+0x90>)
   27022:	480f      	ldr	r0, [pc, #60]	; (27060 <z_sched_start+0xa8>)
   27024:	f002 fd61 	bl	29aea <assert_print>
   27028:	21c2      	movs	r1, #194	; 0xc2
   2702a:	4620      	mov	r0, r4
   2702c:	f002 fd56 	bl	29adc <assert_post_action>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27030:	f023 0304 	bic.w	r3, r3, #4
   27034:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   27036:	4620      	mov	r0, r4
   27038:	f7ff ff18 	bl	26e6c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2703c:	4629      	mov	r1, r5
   2703e:	4802      	ldr	r0, [pc, #8]	; (27048 <z_sched_start+0x90>)
   27040:	f7ff fcda 	bl	269f8 <z_reschedule>
}
   27044:	bd70      	pop	{r4, r5, r6, pc}
   27046:	bf00      	nop
   27048:	20009d38 	.word	0x20009d38
   2704c:	000301b0 	.word	0x000301b0
   27050:	00030210 	.word	0x00030210
   27054:	0002fdac 	.word	0x0002fdac
   27058:	00030228 	.word	0x00030228
   2705c:	000301e0 	.word	0x000301e0
   27060:	000301f8 	.word	0x000301f8

00027064 <z_thread_timeout>:
{
   27064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27066:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   27068:	f1a0 0718 	sub.w	r7, r0, #24
	__asm__ volatile(
   2706c:	f04f 0320 	mov.w	r3, #32
   27070:	f3ef 8611 	mrs	r6, BASEPRI
   27074:	f383 8812 	msr	BASEPRI_MAX, r3
   27078:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2707c:	4825      	ldr	r0, [pc, #148]	; (27114 <z_thread_timeout+0xb0>)
   2707e:	f7fd fedb 	bl	24e38 <z_spin_lock_valid>
   27082:	b120      	cbz	r0, 2708e <z_thread_timeout+0x2a>
   27084:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   27086:	4823      	ldr	r0, [pc, #140]	; (27114 <z_thread_timeout+0xb0>)
   27088:	f7fd fef6 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   2708c:	e024      	b.n	270d8 <z_thread_timeout+0x74>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2708e:	4c22      	ldr	r4, [pc, #136]	; (27118 <z_thread_timeout+0xb4>)
   27090:	2394      	movs	r3, #148	; 0x94
   27092:	4622      	mov	r2, r4
   27094:	4921      	ldr	r1, [pc, #132]	; (2711c <z_thread_timeout+0xb8>)
   27096:	4822      	ldr	r0, [pc, #136]	; (27120 <z_thread_timeout+0xbc>)
   27098:	f002 fd27 	bl	29aea <assert_print>
   2709c:	491d      	ldr	r1, [pc, #116]	; (27114 <z_thread_timeout+0xb0>)
   2709e:	4821      	ldr	r0, [pc, #132]	; (27124 <z_thread_timeout+0xc0>)
   270a0:	f002 fd23 	bl	29aea <assert_print>
   270a4:	2194      	movs	r1, #148	; 0x94
   270a6:	4620      	mov	r0, r4
   270a8:	f002 fd18 	bl	29adc <assert_post_action>
   270ac:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   270b0:	f023 0204 	bic.w	r2, r3, #4
   270b4:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   270b8:	f023 0314 	bic.w	r3, r3, #20
   270bc:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   270c0:	4638      	mov	r0, r7
   270c2:	f7ff fed3 	bl	26e6c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270c6:	4813      	ldr	r0, [pc, #76]	; (27114 <z_thread_timeout+0xb0>)
   270c8:	f7fd fec6 	bl	24e58 <z_spin_unlock_valid>
   270cc:	b190      	cbz	r0, 270f4 <z_thread_timeout+0x90>
	__asm__ volatile(
   270ce:	f386 8811 	msr	BASEPRI, r6
   270d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   270d6:	2501      	movs	r5, #1
   270d8:	b9dd      	cbnz	r5, 27112 <z_thread_timeout+0xae>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   270da:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   270de:	f013 0f28 	tst.w	r3, #40	; 0x28
   270e2:	d1f0      	bne.n	270c6 <z_thread_timeout+0x62>
			if (thread->base.pended_on != NULL) {
   270e4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   270e8:	2b00      	cmp	r3, #0
   270ea:	d0df      	beq.n	270ac <z_thread_timeout+0x48>
				unpend_thread_no_timeout(thread);
   270ec:	4638      	mov	r0, r7
   270ee:	f007 fff3 	bl	2f0d8 <unpend_thread_no_timeout>
   270f2:	e7db      	b.n	270ac <z_thread_timeout+0x48>
   270f4:	4c08      	ldr	r4, [pc, #32]	; (27118 <z_thread_timeout+0xb4>)
   270f6:	23c2      	movs	r3, #194	; 0xc2
   270f8:	4622      	mov	r2, r4
   270fa:	490b      	ldr	r1, [pc, #44]	; (27128 <z_thread_timeout+0xc4>)
   270fc:	4808      	ldr	r0, [pc, #32]	; (27120 <z_thread_timeout+0xbc>)
   270fe:	f002 fcf4 	bl	29aea <assert_print>
   27102:	4904      	ldr	r1, [pc, #16]	; (27114 <z_thread_timeout+0xb0>)
   27104:	4809      	ldr	r0, [pc, #36]	; (2712c <z_thread_timeout+0xc8>)
   27106:	f002 fcf0 	bl	29aea <assert_print>
   2710a:	21c2      	movs	r1, #194	; 0xc2
   2710c:	4620      	mov	r0, r4
   2710e:	f002 fce5 	bl	29adc <assert_post_action>
}
   27112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27114:	20009d38 	.word	0x20009d38
   27118:	000301b0 	.word	0x000301b0
   2711c:	00030210 	.word	0x00030210
   27120:	0002fdac 	.word	0x0002fdac
   27124:	00030228 	.word	0x00030228
   27128:	000301e0 	.word	0x000301e0
   2712c:	000301f8 	.word	0x000301f8

00027130 <unready_thread>:
{
   27130:	b510      	push	{r4, lr}
   27132:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   27134:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   27136:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2713a:	2b00      	cmp	r3, #0
   2713c:	db08      	blt.n	27150 <unready_thread+0x20>
	update_cache(thread == _current);
   2713e:	4b08      	ldr	r3, [pc, #32]	; (27160 <unready_thread+0x30>)
   27140:	6898      	ldr	r0, [r3, #8]
   27142:	42a0      	cmp	r0, r4
   27144:	bf14      	ite	ne
   27146:	2000      	movne	r0, #0
   27148:	2001      	moveq	r0, #1
   2714a:	f7ff fd59 	bl	26c00 <update_cache>
}
   2714e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27150:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   27154:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27156:	4601      	mov	r1, r0
   27158:	4802      	ldr	r0, [pc, #8]	; (27164 <unready_thread+0x34>)
   2715a:	f7ff fcdd 	bl	26b18 <z_priq_dumb_remove>
}
   2715e:	e7ee      	b.n	2713e <unready_thread+0xe>
   27160:	20009ce8 	.word	0x20009ce8
   27164:	20009d08 	.word	0x20009d08

00027168 <add_to_waitq_locked>:
{
   27168:	b570      	push	{r4, r5, r6, lr}
   2716a:	4605      	mov	r5, r0
   2716c:	460e      	mov	r6, r1
	unready_thread(thread);
   2716e:	f7ff ffdf 	bl	27130 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27172:	7b6b      	ldrb	r3, [r5, #13]
   27174:	f043 0302 	orr.w	r3, r3, #2
   27178:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   2717a:	2e00      	cmp	r6, #0
   2717c:	d02d      	beq.n	271da <add_to_waitq_locked+0x72>
		thread->base.pended_on = wait_q;
   2717e:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27180:	4b16      	ldr	r3, [pc, #88]	; (271dc <add_to_waitq_locked+0x74>)
   27182:	429d      	cmp	r5, r3
   27184:	d004      	beq.n	27190 <add_to_waitq_locked+0x28>
	return list->head == list;
   27186:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27188:	42a6      	cmp	r6, r4
   2718a:	d113      	bne.n	271b4 <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2718c:	2400      	movs	r4, #0
   2718e:	e011      	b.n	271b4 <add_to_waitq_locked+0x4c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27190:	4c13      	ldr	r4, [pc, #76]	; (271e0 <add_to_waitq_locked+0x78>)
   27192:	23ba      	movs	r3, #186	; 0xba
   27194:	4622      	mov	r2, r4
   27196:	4913      	ldr	r1, [pc, #76]	; (271e4 <add_to_waitq_locked+0x7c>)
   27198:	4813      	ldr	r0, [pc, #76]	; (271e8 <add_to_waitq_locked+0x80>)
   2719a:	f002 fca6 	bl	29aea <assert_print>
   2719e:	21ba      	movs	r1, #186	; 0xba
   271a0:	4620      	mov	r0, r4
   271a2:	f002 fc9b 	bl	29adc <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   271a6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   271a8:	606b      	str	r3, [r5, #4]
	node->next = successor;
   271aa:	602c      	str	r4, [r5, #0]
	prev->next = node;
   271ac:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   271ae:	6065      	str	r5, [r4, #4]
}
   271b0:	e013      	b.n	271da <add_to_waitq_locked+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   271b2:	2400      	movs	r4, #0
   271b4:	b164      	cbz	r4, 271d0 <add_to_waitq_locked+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   271b6:	4621      	mov	r1, r4
   271b8:	4628      	mov	r0, r5
   271ba:	f007 ff69 	bl	2f090 <z_sched_prio_cmp>
   271be:	2800      	cmp	r0, #0
   271c0:	dcf1      	bgt.n	271a6 <add_to_waitq_locked+0x3e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   271c2:	2c00      	cmp	r4, #0
   271c4:	d0f6      	beq.n	271b4 <add_to_waitq_locked+0x4c>
	return (node == list->tail) ? NULL : node->next;
   271c6:	6873      	ldr	r3, [r6, #4]
   271c8:	429c      	cmp	r4, r3
   271ca:	d0f2      	beq.n	271b2 <add_to_waitq_locked+0x4a>
   271cc:	6824      	ldr	r4, [r4, #0]
   271ce:	e7f1      	b.n	271b4 <add_to_waitq_locked+0x4c>
	sys_dnode_t *const tail = list->tail;
   271d0:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   271d2:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   271d4:	606b      	str	r3, [r5, #4]
	tail->next = node;
   271d6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   271d8:	6075      	str	r5, [r6, #4]
}
   271da:	bd70      	pop	{r4, r5, r6, pc}
   271dc:	20009528 	.word	0x20009528
   271e0:	00034564 	.word	0x00034564
   271e4:	00034600 	.word	0x00034600
   271e8:	0002fdac 	.word	0x0002fdac

000271ec <z_pend_curr>:
{
   271ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pending_current = _current;
   271ee:	4b33      	ldr	r3, [pc, #204]	; (272bc <z_pend_curr+0xd0>)
   271f0:	689d      	ldr	r5, [r3, #8]
   271f2:	4b33      	ldr	r3, [pc, #204]	; (272c0 <z_pend_curr+0xd4>)
   271f4:	601d      	str	r5, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   271f6:	4b33      	ldr	r3, [pc, #204]	; (272c4 <z_pend_curr+0xd8>)
   271f8:	4298      	cmp	r0, r3
   271fa:	d024      	beq.n	27246 <z_pend_curr+0x5a>
   271fc:	4604      	mov	r4, r0
   271fe:	460f      	mov	r7, r1
   27200:	4616      	mov	r6, r2
	__asm__ volatile(
   27202:	f04f 0220 	mov.w	r2, #32
   27206:	f3ef 8311 	mrs	r3, BASEPRI
   2720a:	f382 8812 	msr	BASEPRI_MAX, r2
   2720e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27212:	482c      	ldr	r0, [pc, #176]	; (272c4 <z_pend_curr+0xd8>)
   27214:	f7fd fe10 	bl	24e38 <z_spin_lock_valid>
   27218:	b310      	cbz	r0, 27260 <z_pend_curr+0x74>
	z_spin_lock_set_owner(l);
   2721a:	482a      	ldr	r0, [pc, #168]	; (272c4 <z_pend_curr+0xd8>)
   2721c:	f7fd fe2c 	bl	24e78 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   27220:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   27224:	4631      	mov	r1, r6
   27226:	4825      	ldr	r0, [pc, #148]	; (272bc <z_pend_curr+0xd0>)
   27228:	6880      	ldr	r0, [r0, #8]
   2722a:	f007 ff7f 	bl	2f12c <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2722e:	4620      	mov	r0, r4
   27230:	f7fd fe12 	bl	24e58 <z_spin_unlock_valid>
   27234:	b318      	cbz	r0, 2727e <z_pend_curr+0x92>
   27236:	4823      	ldr	r0, [pc, #140]	; (272c4 <z_pend_curr+0xd8>)
   27238:	f7fd fe0e 	bl	24e58 <z_spin_unlock_valid>
   2723c:	b370      	cbz	r0, 2729c <z_pend_curr+0xb0>
   2723e:	4638      	mov	r0, r7
   27240:	f7ee f94a 	bl	154d8 <arch_swap>
}
   27244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   27246:	4c20      	ldr	r4, [pc, #128]	; (272c8 <z_pend_curr+0xdc>)
   27248:	f240 334e 	movw	r3, #846	; 0x34e
   2724c:	4622      	mov	r2, r4
   2724e:	491f      	ldr	r1, [pc, #124]	; (272cc <z_pend_curr+0xe0>)
   27250:	481f      	ldr	r0, [pc, #124]	; (272d0 <z_pend_curr+0xe4>)
   27252:	f002 fc4a 	bl	29aea <assert_print>
   27256:	f240 314e 	movw	r1, #846	; 0x34e
   2725a:	4620      	mov	r0, r4
   2725c:	f002 fc3e 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27260:	4c1c      	ldr	r4, [pc, #112]	; (272d4 <z_pend_curr+0xe8>)
   27262:	2394      	movs	r3, #148	; 0x94
   27264:	4622      	mov	r2, r4
   27266:	491c      	ldr	r1, [pc, #112]	; (272d8 <z_pend_curr+0xec>)
   27268:	4819      	ldr	r0, [pc, #100]	; (272d0 <z_pend_curr+0xe4>)
   2726a:	f002 fc3e 	bl	29aea <assert_print>
   2726e:	4915      	ldr	r1, [pc, #84]	; (272c4 <z_pend_curr+0xd8>)
   27270:	481a      	ldr	r0, [pc, #104]	; (272dc <z_pend_curr+0xf0>)
   27272:	f002 fc3a 	bl	29aea <assert_print>
   27276:	2194      	movs	r1, #148	; 0x94
   27278:	4620      	mov	r0, r4
   2727a:	f002 fc2f 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2727e:	4d15      	ldr	r5, [pc, #84]	; (272d4 <z_pend_curr+0xe8>)
   27280:	23e1      	movs	r3, #225	; 0xe1
   27282:	462a      	mov	r2, r5
   27284:	4916      	ldr	r1, [pc, #88]	; (272e0 <z_pend_curr+0xf4>)
   27286:	4812      	ldr	r0, [pc, #72]	; (272d0 <z_pend_curr+0xe4>)
   27288:	f002 fc2f 	bl	29aea <assert_print>
   2728c:	4621      	mov	r1, r4
   2728e:	4815      	ldr	r0, [pc, #84]	; (272e4 <z_pend_curr+0xf8>)
   27290:	f002 fc2b 	bl	29aea <assert_print>
   27294:	21e1      	movs	r1, #225	; 0xe1
   27296:	4628      	mov	r0, r5
   27298:	f002 fc20 	bl	29adc <assert_post_action>
   2729c:	4c0d      	ldr	r4, [pc, #52]	; (272d4 <z_pend_curr+0xe8>)
   2729e:	23e1      	movs	r3, #225	; 0xe1
   272a0:	4622      	mov	r2, r4
   272a2:	490f      	ldr	r1, [pc, #60]	; (272e0 <z_pend_curr+0xf4>)
   272a4:	480a      	ldr	r0, [pc, #40]	; (272d0 <z_pend_curr+0xe4>)
   272a6:	f002 fc20 	bl	29aea <assert_print>
   272aa:	4906      	ldr	r1, [pc, #24]	; (272c4 <z_pend_curr+0xd8>)
   272ac:	480d      	ldr	r0, [pc, #52]	; (272e4 <z_pend_curr+0xf8>)
   272ae:	f002 fc1c 	bl	29aea <assert_print>
   272b2:	21e1      	movs	r1, #225	; 0xe1
   272b4:	4620      	mov	r0, r4
   272b6:	f002 fc11 	bl	29adc <assert_post_action>
   272ba:	bf00      	nop
   272bc:	20009ce8 	.word	0x20009ce8
   272c0:	20009d2c 	.word	0x20009d2c
   272c4:	20009d38 	.word	0x20009d38
   272c8:	00034564 	.word	0x00034564
   272cc:	0003464c 	.word	0x0003464c
   272d0:	0002fdac 	.word	0x0002fdac
   272d4:	000301b0 	.word	0x000301b0
   272d8:	00030210 	.word	0x00030210
   272dc:	00030228 	.word	0x00030228
   272e0:	000301e0 	.word	0x000301e0
   272e4:	000301f8 	.word	0x000301f8

000272e8 <z_set_prio>:
{
   272e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   272ec:	4605      	mov	r5, r0
   272ee:	460f      	mov	r7, r1
   272f0:	f04f 0320 	mov.w	r3, #32
   272f4:	f3ef 8811 	mrs	r8, BASEPRI
   272f8:	f383 8812 	msr	BASEPRI_MAX, r3
   272fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27300:	4841      	ldr	r0, [pc, #260]	; (27408 <z_set_prio+0x120>)
   27302:	f7fd fd99 	bl	24e38 <z_spin_lock_valid>
   27306:	b130      	cbz	r0, 27316 <z_set_prio+0x2e>
   27308:	2400      	movs	r4, #0
   2730a:	4681      	mov	r9, r0
	z_spin_lock_set_owner(l);
   2730c:	483e      	ldr	r0, [pc, #248]	; (27408 <z_set_prio+0x120>)
   2730e:	f7fd fdb3 	bl	24e78 <z_spin_lock_set_owner>
	bool need_sched = 0;
   27312:	2600      	movs	r6, #0
	return k;
   27314:	e047      	b.n	273a6 <z_set_prio+0xbe>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27316:	4c3d      	ldr	r4, [pc, #244]	; (2740c <z_set_prio+0x124>)
   27318:	2394      	movs	r3, #148	; 0x94
   2731a:	4622      	mov	r2, r4
   2731c:	493c      	ldr	r1, [pc, #240]	; (27410 <z_set_prio+0x128>)
   2731e:	483d      	ldr	r0, [pc, #244]	; (27414 <z_set_prio+0x12c>)
   27320:	f002 fbe3 	bl	29aea <assert_print>
   27324:	4938      	ldr	r1, [pc, #224]	; (27408 <z_set_prio+0x120>)
   27326:	483c      	ldr	r0, [pc, #240]	; (27418 <z_set_prio+0x130>)
   27328:	f002 fbdf 	bl	29aea <assert_print>
   2732c:	2194      	movs	r1, #148	; 0x94
   2732e:	4620      	mov	r0, r4
   27330:	f002 fbd4 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27334:	4c39      	ldr	r4, [pc, #228]	; (2741c <z_set_prio+0x134>)
   27336:	23ba      	movs	r3, #186	; 0xba
   27338:	4622      	mov	r2, r4
   2733a:	4939      	ldr	r1, [pc, #228]	; (27420 <z_set_prio+0x138>)
   2733c:	4835      	ldr	r0, [pc, #212]	; (27414 <z_set_prio+0x12c>)
   2733e:	f002 fbd4 	bl	29aea <assert_print>
   27342:	21ba      	movs	r1, #186	; 0xba
   27344:	4620      	mov	r0, r4
   27346:	f002 fbc9 	bl	29adc <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   2734a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2734c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2734e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   27350:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27352:	6065      	str	r5, [r4, #4]
}
   27354:	e017      	b.n	27386 <z_set_prio+0x9e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27356:	4634      	mov	r4, r6
   27358:	b16c      	cbz	r4, 27376 <z_set_prio+0x8e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2735a:	4621      	mov	r1, r4
   2735c:	4628      	mov	r0, r5
   2735e:	f007 fe97 	bl	2f090 <z_sched_prio_cmp>
   27362:	2800      	cmp	r0, #0
   27364:	dcf1      	bgt.n	2734a <z_set_prio+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27366:	2c00      	cmp	r4, #0
   27368:	d0f6      	beq.n	27358 <z_set_prio+0x70>
	return (node == list->tail) ? NULL : node->next;
   2736a:	4b2e      	ldr	r3, [pc, #184]	; (27424 <z_set_prio+0x13c>)
   2736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2736e:	429c      	cmp	r4, r3
   27370:	d0f1      	beq.n	27356 <z_set_prio+0x6e>
   27372:	6824      	ldr	r4, [r4, #0]
   27374:	e7f0      	b.n	27358 <z_set_prio+0x70>
	sys_dnode_t *const tail = list->tail;
   27376:	4b2b      	ldr	r3, [pc, #172]	; (27424 <z_set_prio+0x13c>)
   27378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   2737a:	f103 0120 	add.w	r1, r3, #32
   2737e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   27380:	606a      	str	r2, [r5, #4]
	tail->next = node;
   27382:	6015      	str	r5, [r2, #0]
	list->tail = node;
   27384:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   27386:	2001      	movs	r0, #1
   27388:	f7ff fc3a 	bl	26c00 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2738c:	464e      	mov	r6, r9
   2738e:	e001      	b.n	27394 <z_set_prio+0xac>
			thread->base.prio = prio;
   27390:	73af      	strb	r7, [r5, #14]
   27392:	2600      	movs	r6, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27394:	481c      	ldr	r0, [pc, #112]	; (27408 <z_set_prio+0x120>)
   27396:	f7fd fd5f 	bl	24e58 <z_spin_unlock_valid>
   2739a:	b310      	cbz	r0, 273e2 <z_set_prio+0xfa>
	__asm__ volatile(
   2739c:	f388 8811 	msr	BASEPRI, r8
   273a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   273a4:	2401      	movs	r4, #1
   273a6:	bb5c      	cbnz	r4, 27400 <z_set_prio+0x118>
	uint8_t state = thread->base.thread_state;
   273a8:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   273aa:	f013 0f1f 	tst.w	r3, #31
   273ae:	d1ef      	bne.n	27390 <z_set_prio+0xa8>
	return node->next != NULL;
   273b0:	69ae      	ldr	r6, [r5, #24]
   273b2:	2e00      	cmp	r6, #0
   273b4:	d1ec      	bne.n	27390 <z_set_prio+0xa8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   273b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   273ba:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   273bc:	4629      	mov	r1, r5
   273be:	481a      	ldr	r0, [pc, #104]	; (27428 <z_set_prio+0x140>)
   273c0:	f7ff fbaa 	bl	26b18 <z_priq_dumb_remove>
				thread->base.prio = prio;
   273c4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   273c6:	7b6b      	ldrb	r3, [r5, #13]
   273c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   273cc:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   273ce:	4b17      	ldr	r3, [pc, #92]	; (2742c <z_set_prio+0x144>)
   273d0:	429d      	cmp	r5, r3
   273d2:	d0af      	beq.n	27334 <z_set_prio+0x4c>
	return list->head == list;
   273d4:	4b13      	ldr	r3, [pc, #76]	; (27424 <z_set_prio+0x13c>)
   273d6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   273da:	429c      	cmp	r4, r3
   273dc:	d1bc      	bne.n	27358 <z_set_prio+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   273de:	4634      	mov	r4, r6
   273e0:	e7ba      	b.n	27358 <z_set_prio+0x70>
   273e2:	4c0a      	ldr	r4, [pc, #40]	; (2740c <z_set_prio+0x124>)
   273e4:	23c2      	movs	r3, #194	; 0xc2
   273e6:	4622      	mov	r2, r4
   273e8:	4911      	ldr	r1, [pc, #68]	; (27430 <z_set_prio+0x148>)
   273ea:	480a      	ldr	r0, [pc, #40]	; (27414 <z_set_prio+0x12c>)
   273ec:	f002 fb7d 	bl	29aea <assert_print>
   273f0:	4905      	ldr	r1, [pc, #20]	; (27408 <z_set_prio+0x120>)
   273f2:	4810      	ldr	r0, [pc, #64]	; (27434 <z_set_prio+0x14c>)
   273f4:	f002 fb79 	bl	29aea <assert_print>
   273f8:	21c2      	movs	r1, #194	; 0xc2
   273fa:	4620      	mov	r0, r4
   273fc:	f002 fb6e 	bl	29adc <assert_post_action>
}
   27400:	4630      	mov	r0, r6
   27402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27406:	bf00      	nop
   27408:	20009d38 	.word	0x20009d38
   2740c:	000301b0 	.word	0x000301b0
   27410:	00030210 	.word	0x00030210
   27414:	0002fdac 	.word	0x0002fdac
   27418:	00030228 	.word	0x00030228
   2741c:	00034564 	.word	0x00034564
   27420:	00034600 	.word	0x00034600
   27424:	20009ce8 	.word	0x20009ce8
   27428:	20009d08 	.word	0x20009d08
   2742c:	20009528 	.word	0x20009528
   27430:	000301e0 	.word	0x000301e0
   27434:	000301f8 	.word	0x000301f8

00027438 <z_impl_k_thread_suspend>:
{
   27438:	b570      	push	{r4, r5, r6, lr}
   2743a:	4604      	mov	r4, r0
   2743c:	3018      	adds	r0, #24
   2743e:	f000 fe0b 	bl	28058 <z_abort_timeout>
	__asm__ volatile(
   27442:	f04f 0320 	mov.w	r3, #32
   27446:	f3ef 8611 	mrs	r6, BASEPRI
   2744a:	f383 8812 	msr	BASEPRI_MAX, r3
   2744e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27452:	4829      	ldr	r0, [pc, #164]	; (274f8 <z_impl_k_thread_suspend+0xc0>)
   27454:	f7fd fcf0 	bl	24e38 <z_spin_lock_valid>
   27458:	b120      	cbz	r0, 27464 <z_impl_k_thread_suspend+0x2c>
   2745a:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   2745c:	4826      	ldr	r0, [pc, #152]	; (274f8 <z_impl_k_thread_suspend+0xc0>)
   2745e:	f7fd fd0b 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   27462:	e023      	b.n	274ac <z_impl_k_thread_suspend+0x74>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27464:	4c25      	ldr	r4, [pc, #148]	; (274fc <z_impl_k_thread_suspend+0xc4>)
   27466:	2394      	movs	r3, #148	; 0x94
   27468:	4622      	mov	r2, r4
   2746a:	4925      	ldr	r1, [pc, #148]	; (27500 <z_impl_k_thread_suspend+0xc8>)
   2746c:	4825      	ldr	r0, [pc, #148]	; (27504 <z_impl_k_thread_suspend+0xcc>)
   2746e:	f002 fb3c 	bl	29aea <assert_print>
   27472:	4921      	ldr	r1, [pc, #132]	; (274f8 <z_impl_k_thread_suspend+0xc0>)
   27474:	4824      	ldr	r0, [pc, #144]	; (27508 <z_impl_k_thread_suspend+0xd0>)
   27476:	f002 fb38 	bl	29aea <assert_print>
   2747a:	2194      	movs	r1, #148	; 0x94
   2747c:	4620      	mov	r0, r4
   2747e:	f002 fb2d 	bl	29adc <assert_post_action>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27482:	7b63      	ldrb	r3, [r4, #13]
   27484:	f043 0310 	orr.w	r3, r3, #16
   27488:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2748a:	4b20      	ldr	r3, [pc, #128]	; (2750c <z_impl_k_thread_suspend+0xd4>)
   2748c:	6898      	ldr	r0, [r3, #8]
   2748e:	42a0      	cmp	r0, r4
   27490:	bf14      	ite	ne
   27492:	2000      	movne	r0, #0
   27494:	2001      	moveq	r0, #1
   27496:	f7ff fbb3 	bl	26c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2749a:	4817      	ldr	r0, [pc, #92]	; (274f8 <z_impl_k_thread_suspend+0xc0>)
   2749c:	f7fd fcdc 	bl	24e58 <z_spin_unlock_valid>
   274a0:	b190      	cbz	r0, 274c8 <z_impl_k_thread_suspend+0x90>
	__asm__ volatile(
   274a2:	f386 8811 	msr	BASEPRI, r6
   274a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   274aa:	2501      	movs	r5, #1
   274ac:	b9dd      	cbnz	r5, 274e6 <z_impl_k_thread_suspend+0xae>
	return (thread->base.thread_state & state) != 0U;
   274ae:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   274b0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   274b4:	2b00      	cmp	r3, #0
   274b6:	dae4      	bge.n	27482 <z_impl_k_thread_suspend+0x4a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   274b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   274bc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   274be:	4621      	mov	r1, r4
   274c0:	4813      	ldr	r0, [pc, #76]	; (27510 <z_impl_k_thread_suspend+0xd8>)
   274c2:	f7ff fb29 	bl	26b18 <z_priq_dumb_remove>
}
   274c6:	e7dc      	b.n	27482 <z_impl_k_thread_suspend+0x4a>
   274c8:	4c0c      	ldr	r4, [pc, #48]	; (274fc <z_impl_k_thread_suspend+0xc4>)
   274ca:	23c2      	movs	r3, #194	; 0xc2
   274cc:	4622      	mov	r2, r4
   274ce:	4911      	ldr	r1, [pc, #68]	; (27514 <z_impl_k_thread_suspend+0xdc>)
   274d0:	480c      	ldr	r0, [pc, #48]	; (27504 <z_impl_k_thread_suspend+0xcc>)
   274d2:	f002 fb0a 	bl	29aea <assert_print>
   274d6:	4908      	ldr	r1, [pc, #32]	; (274f8 <z_impl_k_thread_suspend+0xc0>)
   274d8:	480f      	ldr	r0, [pc, #60]	; (27518 <z_impl_k_thread_suspend+0xe0>)
   274da:	f002 fb06 	bl	29aea <assert_print>
   274de:	21c2      	movs	r1, #194	; 0xc2
   274e0:	4620      	mov	r0, r4
   274e2:	f002 fafb 	bl	29adc <assert_post_action>
	if (thread == _current) {
   274e6:	4b09      	ldr	r3, [pc, #36]	; (2750c <z_impl_k_thread_suspend+0xd4>)
   274e8:	689b      	ldr	r3, [r3, #8]
   274ea:	42a3      	cmp	r3, r4
   274ec:	d000      	beq.n	274f0 <z_impl_k_thread_suspend+0xb8>
}
   274ee:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule_unlocked();
   274f0:	f007 fde6 	bl	2f0c0 <z_reschedule_unlocked>
}
   274f4:	e7fb      	b.n	274ee <z_impl_k_thread_suspend+0xb6>
   274f6:	bf00      	nop
   274f8:	20009d38 	.word	0x20009d38
   274fc:	000301b0 	.word	0x000301b0
   27500:	00030210 	.word	0x00030210
   27504:	0002fdac 	.word	0x0002fdac
   27508:	00030228 	.word	0x00030228
   2750c:	20009ce8 	.word	0x20009ce8
   27510:	20009d08 	.word	0x20009d08
   27514:	000301e0 	.word	0x000301e0
   27518:	000301f8 	.word	0x000301f8

0002751c <k_sched_unlock>:
{
   2751c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2751e:	f04f 0320 	mov.w	r3, #32
   27522:	f3ef 8511 	mrs	r5, BASEPRI
   27526:	f383 8812 	msr	BASEPRI_MAX, r3
   2752a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2752e:	4831      	ldr	r0, [pc, #196]	; (275f4 <k_sched_unlock+0xd8>)
   27530:	f7fd fc82 	bl	24e38 <z_spin_lock_valid>
   27534:	b120      	cbz	r0, 27540 <k_sched_unlock+0x24>
   27536:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   27538:	482e      	ldr	r0, [pc, #184]	; (275f4 <k_sched_unlock+0xd8>)
   2753a:	f7fd fc9d 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   2753e:	e033      	b.n	275a8 <k_sched_unlock+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27540:	4c2d      	ldr	r4, [pc, #180]	; (275f8 <k_sched_unlock+0xdc>)
   27542:	2394      	movs	r3, #148	; 0x94
   27544:	4622      	mov	r2, r4
   27546:	492d      	ldr	r1, [pc, #180]	; (275fc <k_sched_unlock+0xe0>)
   27548:	482d      	ldr	r0, [pc, #180]	; (27600 <k_sched_unlock+0xe4>)
   2754a:	f002 face 	bl	29aea <assert_print>
   2754e:	4929      	ldr	r1, [pc, #164]	; (275f4 <k_sched_unlock+0xd8>)
   27550:	482c      	ldr	r0, [pc, #176]	; (27604 <k_sched_unlock+0xe8>)
   27552:	f002 faca 	bl	29aea <assert_print>
   27556:	2194      	movs	r1, #148	; 0x94
   27558:	4620      	mov	r0, r4
   2755a:	f002 fabf 	bl	29adc <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   2755e:	4c2a      	ldr	r4, [pc, #168]	; (27608 <k_sched_unlock+0xec>)
   27560:	f240 33e7 	movw	r3, #999	; 0x3e7
   27564:	4622      	mov	r2, r4
   27566:	4929      	ldr	r1, [pc, #164]	; (2760c <k_sched_unlock+0xf0>)
   27568:	4825      	ldr	r0, [pc, #148]	; (27600 <k_sched_unlock+0xe4>)
   2756a:	f002 fabe 	bl	29aea <assert_print>
   2756e:	4828      	ldr	r0, [pc, #160]	; (27610 <k_sched_unlock+0xf4>)
   27570:	f002 fabb 	bl	29aea <assert_print>
   27574:	f240 31e7 	movw	r1, #999	; 0x3e7
   27578:	4620      	mov	r0, r4
   2757a:	f002 faaf 	bl	29adc <assert_post_action>
		__ASSERT(!arch_is_in_isr(), "");
   2757e:	4c22      	ldr	r4, [pc, #136]	; (27608 <k_sched_unlock+0xec>)
   27580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27584:	4622      	mov	r2, r4
   27586:	4923      	ldr	r1, [pc, #140]	; (27614 <k_sched_unlock+0xf8>)
   27588:	481d      	ldr	r0, [pc, #116]	; (27600 <k_sched_unlock+0xe4>)
   2758a:	f002 faae 	bl	29aea <assert_print>
   2758e:	4820      	ldr	r0, [pc, #128]	; (27610 <k_sched_unlock+0xf4>)
   27590:	f002 faab 	bl	29aea <assert_print>
   27594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   27598:	4620      	mov	r0, r4
   2759a:	f002 fa9f 	bl	29adc <assert_post_action>
	__asm__ volatile(
   2759e:	f385 8811 	msr	BASEPRI, r5
   275a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   275a6:	2401      	movs	r4, #1
   275a8:	bb0c      	cbnz	r4, 275ee <k_sched_unlock+0xd2>
		__ASSERT(_current->base.sched_locked != 0U, "");
   275aa:	4b1b      	ldr	r3, [pc, #108]	; (27618 <k_sched_unlock+0xfc>)
   275ac:	689a      	ldr	r2, [r3, #8]
   275ae:	7bd3      	ldrb	r3, [r2, #15]
   275b0:	2b00      	cmp	r3, #0
   275b2:	d0d4      	beq.n	2755e <k_sched_unlock+0x42>
   275b4:	f3ef 8105 	mrs	r1, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   275b8:	2900      	cmp	r1, #0
   275ba:	d1e0      	bne.n	2757e <k_sched_unlock+0x62>
		++_current->base.sched_locked;
   275bc:	3301      	adds	r3, #1
   275be:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   275c0:	2000      	movs	r0, #0
   275c2:	f7ff fb1d 	bl	26c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275c6:	480b      	ldr	r0, [pc, #44]	; (275f4 <k_sched_unlock+0xd8>)
   275c8:	f7fd fc46 	bl	24e58 <z_spin_unlock_valid>
   275cc:	2800      	cmp	r0, #0
   275ce:	d1e6      	bne.n	2759e <k_sched_unlock+0x82>
   275d0:	4c09      	ldr	r4, [pc, #36]	; (275f8 <k_sched_unlock+0xdc>)
   275d2:	23c2      	movs	r3, #194	; 0xc2
   275d4:	4622      	mov	r2, r4
   275d6:	4911      	ldr	r1, [pc, #68]	; (2761c <k_sched_unlock+0x100>)
   275d8:	4809      	ldr	r0, [pc, #36]	; (27600 <k_sched_unlock+0xe4>)
   275da:	f002 fa86 	bl	29aea <assert_print>
   275de:	4905      	ldr	r1, [pc, #20]	; (275f4 <k_sched_unlock+0xd8>)
   275e0:	480f      	ldr	r0, [pc, #60]	; (27620 <k_sched_unlock+0x104>)
   275e2:	f002 fa82 	bl	29aea <assert_print>
   275e6:	21c2      	movs	r1, #194	; 0xc2
   275e8:	4620      	mov	r0, r4
   275ea:	f002 fa77 	bl	29adc <assert_post_action>
	z_reschedule_unlocked();
   275ee:	f007 fd67 	bl	2f0c0 <z_reschedule_unlocked>
}
   275f2:	bd38      	pop	{r3, r4, r5, pc}
   275f4:	20009d38 	.word	0x20009d38
   275f8:	000301b0 	.word	0x000301b0
   275fc:	00030210 	.word	0x00030210
   27600:	0002fdac 	.word	0x0002fdac
   27604:	00030228 	.word	0x00030228
   27608:	00034564 	.word	0x00034564
   2760c:	00034684 	.word	0x00034684
   27610:	00032b7c 	.word	0x00032b7c
   27614:	000342a8 	.word	0x000342a8
   27618:	20009ce8 	.word	0x20009ce8
   2761c:	000301e0 	.word	0x000301e0
   27620:	000301f8 	.word	0x000301f8

00027624 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   27624:	7b43      	ldrb	r3, [r0, #13]
   27626:	f013 0f08 	tst.w	r3, #8
   2762a:	d12a      	bne.n	27682 <end_thread+0x5e>
{
   2762c:	b510      	push	{r4, lr}
   2762e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   27630:	f043 0208 	orr.w	r2, r3, #8
   27634:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27636:	f023 0220 	bic.w	r2, r3, #32
   2763a:	f042 0208 	orr.w	r2, r2, #8
   2763e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   27640:	f012 0f80 	tst.w	r2, #128	; 0x80
   27644:	d113      	bne.n	2766e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   27646:	68a3      	ldr	r3, [r4, #8]
   27648:	b113      	cbz	r3, 27650 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   2764a:	4620      	mov	r0, r4
   2764c:	f007 fd44 	bl	2f0d8 <unpend_thread_no_timeout>
   27650:	f104 0018 	add.w	r0, r4, #24
   27654:	f000 fd00 	bl	28058 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   27658:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2765c:	f007 fd51 	bl	2f102 <unpend_all>
		update_cache(1);
   27660:	2001      	movs	r0, #1
   27662:	f7ff facd 	bl	26c00 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   27666:	4620      	mov	r0, r4
   27668:	f7fd fc0e 	bl	24e88 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   2766c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2766e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   27672:	f043 0308 	orr.w	r3, r3, #8
   27676:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27678:	4601      	mov	r1, r0
   2767a:	4802      	ldr	r0, [pc, #8]	; (27684 <end_thread+0x60>)
   2767c:	f7ff fa4c 	bl	26b18 <z_priq_dumb_remove>
}
   27680:	e7e1      	b.n	27646 <end_thread+0x22>
   27682:	4770      	bx	lr
   27684:	20009d08 	.word	0x20009d08

00027688 <z_unpend1_no_timeout>:
{
   27688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2768a:	4606      	mov	r6, r0
	__asm__ volatile(
   2768c:	f04f 0320 	mov.w	r3, #32
   27690:	f3ef 8711 	mrs	r7, BASEPRI
   27694:	f383 8812 	msr	BASEPRI_MAX, r3
   27698:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2769c:	481e      	ldr	r0, [pc, #120]	; (27718 <z_unpend1_no_timeout+0x90>)
   2769e:	f7fd fbcb 	bl	24e38 <z_spin_lock_valid>
   276a2:	b128      	cbz	r0, 276b0 <z_unpend1_no_timeout+0x28>
   276a4:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   276a6:	481c      	ldr	r0, [pc, #112]	; (27718 <z_unpend1_no_timeout+0x90>)
   276a8:	f7fd fbe6 	bl	24e78 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   276ac:	2500      	movs	r5, #0
	return k;
   276ae:	e019      	b.n	276e4 <z_unpend1_no_timeout+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   276b0:	4c1a      	ldr	r4, [pc, #104]	; (2771c <z_unpend1_no_timeout+0x94>)
   276b2:	2394      	movs	r3, #148	; 0x94
   276b4:	4622      	mov	r2, r4
   276b6:	491a      	ldr	r1, [pc, #104]	; (27720 <z_unpend1_no_timeout+0x98>)
   276b8:	481a      	ldr	r0, [pc, #104]	; (27724 <z_unpend1_no_timeout+0x9c>)
   276ba:	f002 fa16 	bl	29aea <assert_print>
   276be:	4916      	ldr	r1, [pc, #88]	; (27718 <z_unpend1_no_timeout+0x90>)
   276c0:	4819      	ldr	r0, [pc, #100]	; (27728 <z_unpend1_no_timeout+0xa0>)
   276c2:	f002 fa12 	bl	29aea <assert_print>
   276c6:	2194      	movs	r1, #148	; 0x94
   276c8:	4620      	mov	r0, r4
   276ca:	f002 fa07 	bl	29adc <assert_post_action>
			unpend_thread_no_timeout(thread);
   276ce:	f007 fd03 	bl	2f0d8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   276d2:	4811      	ldr	r0, [pc, #68]	; (27718 <z_unpend1_no_timeout+0x90>)
   276d4:	f7fd fbc0 	bl	24e58 <z_spin_unlock_valid>
   276d8:	b160      	cbz	r0, 276f4 <z_unpend1_no_timeout+0x6c>
	__asm__ volatile(
   276da:	f387 8811 	msr	BASEPRI, r7
   276de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   276e2:	2401      	movs	r4, #1
   276e4:	b9ac      	cbnz	r4, 27712 <z_unpend1_no_timeout+0x8a>
		thread = _priq_wait_best(&wait_q->waitq);
   276e6:	4630      	mov	r0, r6
   276e8:	f007 fd04 	bl	2f0f4 <z_priq_dumb_best>
		if (thread != NULL) {
   276ec:	4605      	mov	r5, r0
   276ee:	2800      	cmp	r0, #0
   276f0:	d1ed      	bne.n	276ce <z_unpend1_no_timeout+0x46>
   276f2:	e7ee      	b.n	276d2 <z_unpend1_no_timeout+0x4a>
   276f4:	4c09      	ldr	r4, [pc, #36]	; (2771c <z_unpend1_no_timeout+0x94>)
   276f6:	23c2      	movs	r3, #194	; 0xc2
   276f8:	4622      	mov	r2, r4
   276fa:	490c      	ldr	r1, [pc, #48]	; (2772c <z_unpend1_no_timeout+0xa4>)
   276fc:	4809      	ldr	r0, [pc, #36]	; (27724 <z_unpend1_no_timeout+0x9c>)
   276fe:	f002 f9f4 	bl	29aea <assert_print>
   27702:	4905      	ldr	r1, [pc, #20]	; (27718 <z_unpend1_no_timeout+0x90>)
   27704:	480a      	ldr	r0, [pc, #40]	; (27730 <z_unpend1_no_timeout+0xa8>)
   27706:	f002 f9f0 	bl	29aea <assert_print>
   2770a:	21c2      	movs	r1, #194	; 0xc2
   2770c:	4620      	mov	r0, r4
   2770e:	f002 f9e5 	bl	29adc <assert_post_action>
}
   27712:	4628      	mov	r0, r5
   27714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27716:	bf00      	nop
   27718:	20009d38 	.word	0x20009d38
   2771c:	000301b0 	.word	0x000301b0
   27720:	00030210 	.word	0x00030210
   27724:	0002fdac 	.word	0x0002fdac
   27728:	00030228 	.word	0x00030228
   2772c:	000301e0 	.word	0x000301e0
   27730:	000301f8 	.word	0x000301f8

00027734 <z_unpend_first_thread>:
{
   27734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27736:	4606      	mov	r6, r0
	__asm__ volatile(
   27738:	f04f 0320 	mov.w	r3, #32
   2773c:	f3ef 8711 	mrs	r7, BASEPRI
   27740:	f383 8812 	msr	BASEPRI_MAX, r3
   27744:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27748:	4820      	ldr	r0, [pc, #128]	; (277cc <z_unpend_first_thread+0x98>)
   2774a:	f7fd fb75 	bl	24e38 <z_spin_lock_valid>
   2774e:	b128      	cbz	r0, 2775c <z_unpend_first_thread+0x28>
   27750:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   27752:	481e      	ldr	r0, [pc, #120]	; (277cc <z_unpend_first_thread+0x98>)
   27754:	f7fd fb90 	bl	24e78 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   27758:	2400      	movs	r4, #0
	return k;
   2775a:	e01d      	b.n	27798 <z_unpend_first_thread+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2775c:	4c1c      	ldr	r4, [pc, #112]	; (277d0 <z_unpend_first_thread+0x9c>)
   2775e:	2394      	movs	r3, #148	; 0x94
   27760:	4622      	mov	r2, r4
   27762:	491c      	ldr	r1, [pc, #112]	; (277d4 <z_unpend_first_thread+0xa0>)
   27764:	481c      	ldr	r0, [pc, #112]	; (277d8 <z_unpend_first_thread+0xa4>)
   27766:	f002 f9c0 	bl	29aea <assert_print>
   2776a:	4918      	ldr	r1, [pc, #96]	; (277cc <z_unpend_first_thread+0x98>)
   2776c:	481b      	ldr	r0, [pc, #108]	; (277dc <z_unpend_first_thread+0xa8>)
   2776e:	f002 f9bc 	bl	29aea <assert_print>
   27772:	2194      	movs	r1, #148	; 0x94
   27774:	4620      	mov	r0, r4
   27776:	f002 f9b1 	bl	29adc <assert_post_action>
			unpend_thread_no_timeout(thread);
   2777a:	f007 fcad 	bl	2f0d8 <unpend_thread_no_timeout>
   2777e:	f104 0018 	add.w	r0, r4, #24
   27782:	f000 fc69 	bl	28058 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27786:	4811      	ldr	r0, [pc, #68]	; (277cc <z_unpend_first_thread+0x98>)
   27788:	f7fd fb66 	bl	24e58 <z_spin_unlock_valid>
   2778c:	b160      	cbz	r0, 277a8 <z_unpend_first_thread+0x74>
	__asm__ volatile(
   2778e:	f387 8811 	msr	BASEPRI, r7
   27792:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27796:	2501      	movs	r5, #1
   27798:	b9ad      	cbnz	r5, 277c6 <z_unpend_first_thread+0x92>
		thread = _priq_wait_best(&wait_q->waitq);
   2779a:	4630      	mov	r0, r6
   2779c:	f007 fcaa 	bl	2f0f4 <z_priq_dumb_best>
		if (thread != NULL) {
   277a0:	4604      	mov	r4, r0
   277a2:	2800      	cmp	r0, #0
   277a4:	d1e9      	bne.n	2777a <z_unpend_first_thread+0x46>
   277a6:	e7ee      	b.n	27786 <z_unpend_first_thread+0x52>
   277a8:	4c09      	ldr	r4, [pc, #36]	; (277d0 <z_unpend_first_thread+0x9c>)
   277aa:	23c2      	movs	r3, #194	; 0xc2
   277ac:	4622      	mov	r2, r4
   277ae:	490c      	ldr	r1, [pc, #48]	; (277e0 <z_unpend_first_thread+0xac>)
   277b0:	4809      	ldr	r0, [pc, #36]	; (277d8 <z_unpend_first_thread+0xa4>)
   277b2:	f002 f99a 	bl	29aea <assert_print>
   277b6:	4905      	ldr	r1, [pc, #20]	; (277cc <z_unpend_first_thread+0x98>)
   277b8:	480a      	ldr	r0, [pc, #40]	; (277e4 <z_unpend_first_thread+0xb0>)
   277ba:	f002 f996 	bl	29aea <assert_print>
   277be:	21c2      	movs	r1, #194	; 0xc2
   277c0:	4620      	mov	r0, r4
   277c2:	f002 f98b 	bl	29adc <assert_post_action>
}
   277c6:	4620      	mov	r0, r4
   277c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   277ca:	bf00      	nop
   277cc:	20009d38 	.word	0x20009d38
   277d0:	000301b0 	.word	0x000301b0
   277d4:	00030210 	.word	0x00030210
   277d8:	0002fdac 	.word	0x0002fdac
   277dc:	00030228 	.word	0x00030228
   277e0:	000301e0 	.word	0x000301e0
   277e4:	000301f8 	.word	0x000301f8

000277e8 <z_sched_init>:
{
   277e8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   277ea:	4804      	ldr	r0, [pc, #16]	; (277fc <z_sched_init+0x14>)
   277ec:	f007 fcba 	bl	2f164 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   277f0:	2100      	movs	r1, #0
   277f2:	4608      	mov	r0, r1
   277f4:	f7ff f842 	bl	2687c <k_sched_time_slice_set>
}
   277f8:	bd08      	pop	{r3, pc}
   277fa:	bf00      	nop
   277fc:	20009d04 	.word	0x20009d04

00027800 <z_impl_k_yield>:
{
   27800:	b570      	push	{r4, r5, r6, lr}
   27802:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27806:	bb3b      	cbnz	r3, 27858 <z_impl_k_yield+0x58>
	__asm__ volatile(
   27808:	f04f 0320 	mov.w	r3, #32
   2780c:	f3ef 8611 	mrs	r6, BASEPRI
   27810:	f383 8812 	msr	BASEPRI_MAX, r3
   27814:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27818:	4840      	ldr	r0, [pc, #256]	; (2791c <z_impl_k_yield+0x11c>)
   2781a:	f7fd fb0d 	bl	24e38 <z_spin_lock_valid>
   2781e:	b358      	cbz	r0, 27878 <z_impl_k_yield+0x78>
	z_spin_lock_set_owner(l);
   27820:	483e      	ldr	r0, [pc, #248]	; (2791c <z_impl_k_yield+0x11c>)
   27822:	f7fd fb29 	bl	24e78 <z_spin_lock_set_owner>
		dequeue_thread(_current);
   27826:	4c3e      	ldr	r4, [pc, #248]	; (27920 <z_impl_k_yield+0x120>)
   27828:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2782a:	7b4b      	ldrb	r3, [r1, #13]
   2782c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27830:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27832:	f104 0020 	add.w	r0, r4, #32
   27836:	f7ff f96f 	bl	26b18 <z_priq_dumb_remove>
	queue_thread(_current);
   2783a:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2783c:	7b6b      	ldrb	r3, [r5, #13]
   2783e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27842:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27844:	4b37      	ldr	r3, [pc, #220]	; (27924 <z_impl_k_yield+0x124>)
   27846:	429d      	cmp	r5, r3
   27848:	d025      	beq.n	27896 <z_impl_k_yield+0x96>
	return list->head == list;
   2784a:	4b35      	ldr	r3, [pc, #212]	; (27920 <z_impl_k_yield+0x120>)
   2784c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27850:	429c      	cmp	r4, r3
   27852:	d132      	bne.n	278ba <z_impl_k_yield+0xba>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27854:	2400      	movs	r4, #0
   27856:	e030      	b.n	278ba <z_impl_k_yield+0xba>
	__ASSERT(!arch_is_in_isr(), "");
   27858:	4c33      	ldr	r4, [pc, #204]	; (27928 <z_impl_k_yield+0x128>)
   2785a:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   2785e:	4622      	mov	r2, r4
   27860:	4932      	ldr	r1, [pc, #200]	; (2792c <z_impl_k_yield+0x12c>)
   27862:	4833      	ldr	r0, [pc, #204]	; (27930 <z_impl_k_yield+0x130>)
   27864:	f002 f941 	bl	29aea <assert_print>
   27868:	4832      	ldr	r0, [pc, #200]	; (27934 <z_impl_k_yield+0x134>)
   2786a:	f002 f93e 	bl	29aea <assert_print>
   2786e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
   27872:	4620      	mov	r0, r4
   27874:	f002 f932 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27878:	4c2f      	ldr	r4, [pc, #188]	; (27938 <z_impl_k_yield+0x138>)
   2787a:	2394      	movs	r3, #148	; 0x94
   2787c:	4622      	mov	r2, r4
   2787e:	492f      	ldr	r1, [pc, #188]	; (2793c <z_impl_k_yield+0x13c>)
   27880:	482b      	ldr	r0, [pc, #172]	; (27930 <z_impl_k_yield+0x130>)
   27882:	f002 f932 	bl	29aea <assert_print>
   27886:	4925      	ldr	r1, [pc, #148]	; (2791c <z_impl_k_yield+0x11c>)
   27888:	482d      	ldr	r0, [pc, #180]	; (27940 <z_impl_k_yield+0x140>)
   2788a:	f002 f92e 	bl	29aea <assert_print>
   2788e:	2194      	movs	r1, #148	; 0x94
   27890:	4620      	mov	r0, r4
   27892:	f002 f923 	bl	29adc <assert_post_action>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27896:	4c24      	ldr	r4, [pc, #144]	; (27928 <z_impl_k_yield+0x128>)
   27898:	23ba      	movs	r3, #186	; 0xba
   2789a:	4622      	mov	r2, r4
   2789c:	4929      	ldr	r1, [pc, #164]	; (27944 <z_impl_k_yield+0x144>)
   2789e:	4824      	ldr	r0, [pc, #144]	; (27930 <z_impl_k_yield+0x130>)
   278a0:	f002 f923 	bl	29aea <assert_print>
   278a4:	21ba      	movs	r1, #186	; 0xba
   278a6:	4620      	mov	r0, r4
   278a8:	f002 f918 	bl	29adc <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   278ac:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   278ae:	606b      	str	r3, [r5, #4]
	node->next = successor;
   278b0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   278b2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   278b4:	6065      	str	r5, [r4, #4]
}
   278b6:	e017      	b.n	278e8 <z_impl_k_yield+0xe8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   278b8:	2400      	movs	r4, #0
   278ba:	b16c      	cbz	r4, 278d8 <z_impl_k_yield+0xd8>
		if (z_sched_prio_cmp(thread, t) > 0) {
   278bc:	4621      	mov	r1, r4
   278be:	4628      	mov	r0, r5
   278c0:	f007 fbe6 	bl	2f090 <z_sched_prio_cmp>
   278c4:	2800      	cmp	r0, #0
   278c6:	dcf1      	bgt.n	278ac <z_impl_k_yield+0xac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   278c8:	2c00      	cmp	r4, #0
   278ca:	d0f6      	beq.n	278ba <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   278cc:	4b14      	ldr	r3, [pc, #80]	; (27920 <z_impl_k_yield+0x120>)
   278ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   278d0:	429c      	cmp	r4, r3
   278d2:	d0f1      	beq.n	278b8 <z_impl_k_yield+0xb8>
   278d4:	6824      	ldr	r4, [r4, #0]
   278d6:	e7f0      	b.n	278ba <z_impl_k_yield+0xba>
	sys_dnode_t *const tail = list->tail;
   278d8:	4b11      	ldr	r3, [pc, #68]	; (27920 <z_impl_k_yield+0x120>)
   278da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   278dc:	f103 0120 	add.w	r1, r3, #32
   278e0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   278e2:	606a      	str	r2, [r5, #4]
	tail->next = node;
   278e4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   278e6:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   278e8:	2001      	movs	r0, #1
   278ea:	f7ff f989 	bl	26c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   278ee:	480b      	ldr	r0, [pc, #44]	; (2791c <z_impl_k_yield+0x11c>)
   278f0:	f7fd fab2 	bl	24e58 <z_spin_unlock_valid>
   278f4:	b118      	cbz	r0, 278fe <z_impl_k_yield+0xfe>
   278f6:	4630      	mov	r0, r6
   278f8:	f7ed fdee 	bl	154d8 <arch_swap>
}
   278fc:	bd70      	pop	{r4, r5, r6, pc}
   278fe:	4c0e      	ldr	r4, [pc, #56]	; (27938 <z_impl_k_yield+0x138>)
   27900:	23e1      	movs	r3, #225	; 0xe1
   27902:	4622      	mov	r2, r4
   27904:	4910      	ldr	r1, [pc, #64]	; (27948 <z_impl_k_yield+0x148>)
   27906:	480a      	ldr	r0, [pc, #40]	; (27930 <z_impl_k_yield+0x130>)
   27908:	f002 f8ef 	bl	29aea <assert_print>
   2790c:	4903      	ldr	r1, [pc, #12]	; (2791c <z_impl_k_yield+0x11c>)
   2790e:	480f      	ldr	r0, [pc, #60]	; (2794c <z_impl_k_yield+0x14c>)
   27910:	f002 f8eb 	bl	29aea <assert_print>
   27914:	21e1      	movs	r1, #225	; 0xe1
   27916:	4620      	mov	r0, r4
   27918:	f002 f8e0 	bl	29adc <assert_post_action>
   2791c:	20009d38 	.word	0x20009d38
   27920:	20009ce8 	.word	0x20009ce8
   27924:	20009528 	.word	0x20009528
   27928:	00034564 	.word	0x00034564
   2792c:	000342a8 	.word	0x000342a8
   27930:	0002fdac 	.word	0x0002fdac
   27934:	00032b7c 	.word	0x00032b7c
   27938:	000301b0 	.word	0x000301b0
   2793c:	00030210 	.word	0x00030210
   27940:	00030228 	.word	0x00030228
   27944:	00034600 	.word	0x00034600
   27948:	000301e0 	.word	0x000301e0
   2794c:	000301f8 	.word	0x000301f8

00027950 <z_tick_sleep>:
{
   27950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27954:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27958:	2b00      	cmp	r3, #0
   2795a:	d150      	bne.n	279fe <z_tick_sleep+0xae>
   2795c:	4604      	mov	r4, r0
   2795e:	460e      	mov	r6, r1
	if (ticks == 0) {
   27960:	ea50 0301 	orrs.w	r3, r0, r1
   27964:	d05b      	beq.n	27a1e <z_tick_sleep+0xce>
	if (Z_TICK_ABS(ticks) <= 0) {
   27966:	f06f 0301 	mvn.w	r3, #1
   2796a:	1a1b      	subs	r3, r3, r0
   2796c:	f04f 32ff 	mov.w	r2, #4294967295
   27970:	eb62 0201 	sbc.w	r2, r2, r1
   27974:	2b01      	cmp	r3, #1
   27976:	f172 0200 	sbcs.w	r2, r2, #0
   2797a:	db54      	blt.n	27a26 <z_tick_sleep+0xd6>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2797c:	f06f 0501 	mvn.w	r5, #1
   27980:	1a2d      	subs	r5, r5, r0
   27982:	f04f 0320 	mov.w	r3, #32
   27986:	f3ef 8911 	mrs	r9, BASEPRI
   2798a:	f383 8812 	msr	BASEPRI_MAX, r3
   2798e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27992:	483e      	ldr	r0, [pc, #248]	; (27a8c <z_tick_sleep+0x13c>)
   27994:	f7fd fa50 	bl	24e38 <z_spin_lock_valid>
   27998:	2800      	cmp	r0, #0
   2799a:	d048      	beq.n	27a2e <z_tick_sleep+0xde>
	z_spin_lock_set_owner(l);
   2799c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 27a8c <z_tick_sleep+0x13c>
   279a0:	4640      	mov	r0, r8
   279a2:	f7fd fa69 	bl	24e78 <z_spin_lock_set_owner>
	pending_current = _current;
   279a6:	4f3a      	ldr	r7, [pc, #232]	; (27a90 <z_tick_sleep+0x140>)
   279a8:	68b8      	ldr	r0, [r7, #8]
   279aa:	4b3a      	ldr	r3, [pc, #232]	; (27a94 <z_tick_sleep+0x144>)
   279ac:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   279ae:	f7ff fbbf 	bl	27130 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   279b2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   279b4:	4622      	mov	r2, r4
   279b6:	4633      	mov	r3, r6
   279b8:	4937      	ldr	r1, [pc, #220]	; (27a98 <z_tick_sleep+0x148>)
   279ba:	3018      	adds	r0, #24
   279bc:	f000 fa76 	bl	27eac <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   279c0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   279c2:	7b53      	ldrb	r3, [r2, #13]
   279c4:	f043 0310 	orr.w	r3, r3, #16
   279c8:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279ca:	4640      	mov	r0, r8
   279cc:	f7fd fa44 	bl	24e58 <z_spin_unlock_valid>
   279d0:	2800      	cmp	r0, #0
   279d2:	d03b      	beq.n	27a4c <z_tick_sleep+0xfc>
   279d4:	4648      	mov	r0, r9
   279d6:	f7ed fd7f 	bl	154d8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   279da:	4b2d      	ldr	r3, [pc, #180]	; (27a90 <z_tick_sleep+0x140>)
   279dc:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   279de:	7b5b      	ldrb	r3, [r3, #13]
   279e0:	f013 0f10 	tst.w	r3, #16
   279e4:	d141      	bne.n	27a6a <z_tick_sleep+0x11a>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   279e6:	f007 fbd8 	bl	2f19a <sys_clock_tick_get_32>
   279ea:	1a28      	subs	r0, r5, r0
   279ec:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   279f0:	2801      	cmp	r0, #1
   279f2:	f173 0300 	sbcs.w	r3, r3, #0
   279f6:	da00      	bge.n	279fa <z_tick_sleep+0xaa>
	return 0;
   279f8:	2000      	movs	r0, #0
}
   279fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   279fe:	4c27      	ldr	r4, [pc, #156]	; (27a9c <z_tick_sleep+0x14c>)
   27a00:	f240 538c 	movw	r3, #1420	; 0x58c
   27a04:	4622      	mov	r2, r4
   27a06:	4926      	ldr	r1, [pc, #152]	; (27aa0 <z_tick_sleep+0x150>)
   27a08:	4826      	ldr	r0, [pc, #152]	; (27aa4 <z_tick_sleep+0x154>)
   27a0a:	f002 f86e 	bl	29aea <assert_print>
   27a0e:	4826      	ldr	r0, [pc, #152]	; (27aa8 <z_tick_sleep+0x158>)
   27a10:	f002 f86b 	bl	29aea <assert_print>
   27a14:	f240 518c 	movw	r1, #1420	; 0x58c
   27a18:	4620      	mov	r0, r4
   27a1a:	f002 f85f 	bl	29adc <assert_post_action>
	z_impl_k_yield();
   27a1e:	f7ff feef 	bl	27800 <z_impl_k_yield>
		return 0;
   27a22:	2000      	movs	r0, #0
   27a24:	e7e9      	b.n	279fa <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27a26:	f007 fbb8 	bl	2f19a <sys_clock_tick_get_32>
   27a2a:	1905      	adds	r5, r0, r4
   27a2c:	e7a9      	b.n	27982 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27a2e:	4c1f      	ldr	r4, [pc, #124]	; (27aac <z_tick_sleep+0x15c>)
   27a30:	2394      	movs	r3, #148	; 0x94
   27a32:	4622      	mov	r2, r4
   27a34:	491e      	ldr	r1, [pc, #120]	; (27ab0 <z_tick_sleep+0x160>)
   27a36:	481b      	ldr	r0, [pc, #108]	; (27aa4 <z_tick_sleep+0x154>)
   27a38:	f002 f857 	bl	29aea <assert_print>
   27a3c:	4913      	ldr	r1, [pc, #76]	; (27a8c <z_tick_sleep+0x13c>)
   27a3e:	481d      	ldr	r0, [pc, #116]	; (27ab4 <z_tick_sleep+0x164>)
   27a40:	f002 f853 	bl	29aea <assert_print>
   27a44:	2194      	movs	r1, #148	; 0x94
   27a46:	4620      	mov	r0, r4
   27a48:	f002 f848 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a4c:	4c17      	ldr	r4, [pc, #92]	; (27aac <z_tick_sleep+0x15c>)
   27a4e:	23e1      	movs	r3, #225	; 0xe1
   27a50:	4622      	mov	r2, r4
   27a52:	4919      	ldr	r1, [pc, #100]	; (27ab8 <z_tick_sleep+0x168>)
   27a54:	4813      	ldr	r0, [pc, #76]	; (27aa4 <z_tick_sleep+0x154>)
   27a56:	f002 f848 	bl	29aea <assert_print>
   27a5a:	4641      	mov	r1, r8
   27a5c:	4817      	ldr	r0, [pc, #92]	; (27abc <z_tick_sleep+0x16c>)
   27a5e:	f002 f844 	bl	29aea <assert_print>
   27a62:	21e1      	movs	r1, #225	; 0xe1
   27a64:	4620      	mov	r0, r4
   27a66:	f002 f839 	bl	29adc <assert_post_action>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27a6a:	4c0c      	ldr	r4, [pc, #48]	; (27a9c <z_tick_sleep+0x14c>)
   27a6c:	f240 53ad 	movw	r3, #1453	; 0x5ad
   27a70:	4622      	mov	r2, r4
   27a72:	4913      	ldr	r1, [pc, #76]	; (27ac0 <z_tick_sleep+0x170>)
   27a74:	480b      	ldr	r0, [pc, #44]	; (27aa4 <z_tick_sleep+0x154>)
   27a76:	f002 f838 	bl	29aea <assert_print>
   27a7a:	480b      	ldr	r0, [pc, #44]	; (27aa8 <z_tick_sleep+0x158>)
   27a7c:	f002 f835 	bl	29aea <assert_print>
   27a80:	f240 51ad 	movw	r1, #1453	; 0x5ad
   27a84:	4620      	mov	r0, r4
   27a86:	f002 f829 	bl	29adc <assert_post_action>
   27a8a:	bf00      	nop
   27a8c:	20009d38 	.word	0x20009d38
   27a90:	20009ce8 	.word	0x20009ce8
   27a94:	20009d2c 	.word	0x20009d2c
   27a98:	00027065 	.word	0x00027065
   27a9c:	00034564 	.word	0x00034564
   27aa0:	000342a8 	.word	0x000342a8
   27aa4:	0002fdac 	.word	0x0002fdac
   27aa8:	00032b7c 	.word	0x00032b7c
   27aac:	000301b0 	.word	0x000301b0
   27ab0:	00030210 	.word	0x00030210
   27ab4:	00030228 	.word	0x00030228
   27ab8:	000301e0 	.word	0x000301e0
   27abc:	000301f8 	.word	0x000301f8
   27ac0:	000346b8 	.word	0x000346b8

00027ac4 <z_impl_k_sleep>:
{
   27ac4:	b510      	push	{r4, lr}
   27ac6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27aca:	b9f3      	cbnz	r3, 27b0a <z_impl_k_sleep+0x46>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27acc:	f1b1 3fff 	cmp.w	r1, #4294967295
   27ad0:	bf08      	it	eq
   27ad2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   27ad6:	d028      	beq.n	27b2a <z_impl_k_sleep+0x66>
	ticks = z_tick_sleep(ticks);
   27ad8:	f7ff ff3a 	bl	27950 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   27adc:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   27ade:	0151      	lsls	r1, r2, #5
   27ae0:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   27ae4:	0143      	lsls	r3, r0, #5
   27ae6:	1a1b      	subs	r3, r3, r0
   27ae8:	eb61 0102 	sbc.w	r1, r1, r2
   27aec:	0089      	lsls	r1, r1, #2
   27aee:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   27af2:	009b      	lsls	r3, r3, #2
   27af4:	181b      	adds	r3, r3, r0
   27af6:	eb42 0201 	adc.w	r2, r2, r1
   27afa:	00d2      	lsls	r2, r2, #3
   27afc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   27b00:	f3c3 3310 	ubfx	r3, r3, #12, #17
   27b04:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   27b08:	bd10      	pop	{r4, pc}
	__ASSERT(!arch_is_in_isr(), "");
   27b0a:	4c0b      	ldr	r4, [pc, #44]	; (27b38 <z_impl_k_sleep+0x74>)
   27b0c:	f240 53bc 	movw	r3, #1468	; 0x5bc
   27b10:	4622      	mov	r2, r4
   27b12:	490a      	ldr	r1, [pc, #40]	; (27b3c <z_impl_k_sleep+0x78>)
   27b14:	480a      	ldr	r0, [pc, #40]	; (27b40 <z_impl_k_sleep+0x7c>)
   27b16:	f001 ffe8 	bl	29aea <assert_print>
   27b1a:	480a      	ldr	r0, [pc, #40]	; (27b44 <z_impl_k_sleep+0x80>)
   27b1c:	f001 ffe5 	bl	29aea <assert_print>
   27b20:	f240 51bc 	movw	r1, #1468	; 0x5bc
   27b24:	4620      	mov	r0, r4
   27b26:	f001 ffd9 	bl	29adc <assert_post_action>
		k_thread_suspend(_current);
   27b2a:	4b07      	ldr	r3, [pc, #28]	; (27b48 <z_impl_k_sleep+0x84>)
   27b2c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   27b2e:	f7ff fc83 	bl	27438 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   27b32:	f04f 30ff 	mov.w	r0, #4294967295
   27b36:	e7e7      	b.n	27b08 <z_impl_k_sleep+0x44>
   27b38:	00034564 	.word	0x00034564
   27b3c:	000342a8 	.word	0x000342a8
   27b40:	0002fdac 	.word	0x0002fdac
   27b44:	00032b7c 	.word	0x00032b7c
   27b48:	20009ce8 	.word	0x20009ce8

00027b4c <z_impl_z_current_get>:
}
   27b4c:	4b01      	ldr	r3, [pc, #4]	; (27b54 <z_impl_z_current_get+0x8>)
   27b4e:	6898      	ldr	r0, [r3, #8]
   27b50:	4770      	bx	lr
   27b52:	bf00      	nop
   27b54:	20009ce8 	.word	0x20009ce8

00027b58 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   27b58:	b570      	push	{r4, r5, r6, lr}
   27b5a:	4604      	mov	r4, r0
   27b5c:	f04f 0320 	mov.w	r3, #32
   27b60:	f3ef 8511 	mrs	r5, BASEPRI
   27b64:	f383 8812 	msr	BASEPRI_MAX, r3
   27b68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b6c:	4854      	ldr	r0, [pc, #336]	; (27cc0 <z_thread_abort+0x168>)
   27b6e:	f7fd f963 	bl	24e38 <z_spin_lock_valid>
   27b72:	b1a8      	cbz	r0, 27ba0 <z_thread_abort+0x48>
   27b74:	462e      	mov	r6, r5
	z_spin_lock_set_owner(l);
   27b76:	4852      	ldr	r0, [pc, #328]	; (27cc0 <z_thread_abort+0x168>)
   27b78:	f7fd f97e 	bl	24e78 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   27b7c:	7b23      	ldrb	r3, [r4, #12]
   27b7e:	f013 0f01 	tst.w	r3, #1
   27b82:	d11c      	bne.n	27bbe <z_thread_abort+0x66>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   27b84:	7b63      	ldrb	r3, [r4, #13]
   27b86:	f013 0f08 	tst.w	r3, #8
   27b8a:	d04f      	beq.n	27c2c <z_thread_abort+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b8c:	484c      	ldr	r0, [pc, #304]	; (27cc0 <z_thread_abort+0x168>)
   27b8e:	f7fd f963 	bl	24e58 <z_spin_unlock_valid>
   27b92:	2800      	cmp	r0, #0
   27b94:	d03b      	beq.n	27c0e <z_thread_abort+0xb6>
	__asm__ volatile(
   27b96:	f385 8811 	msr	BASEPRI, r5
   27b9a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   27b9e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ba0:	4c48      	ldr	r4, [pc, #288]	; (27cc4 <z_thread_abort+0x16c>)
   27ba2:	2394      	movs	r3, #148	; 0x94
   27ba4:	4622      	mov	r2, r4
   27ba6:	4948      	ldr	r1, [pc, #288]	; (27cc8 <z_thread_abort+0x170>)
   27ba8:	4848      	ldr	r0, [pc, #288]	; (27ccc <z_thread_abort+0x174>)
   27baa:	f001 ff9e 	bl	29aea <assert_print>
   27bae:	4944      	ldr	r1, [pc, #272]	; (27cc0 <z_thread_abort+0x168>)
   27bb0:	4847      	ldr	r0, [pc, #284]	; (27cd0 <z_thread_abort+0x178>)
   27bb2:	f001 ff9a 	bl	29aea <assert_print>
   27bb6:	2194      	movs	r1, #148	; 0x94
   27bb8:	4620      	mov	r0, r4
   27bba:	f001 ff8f 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27bbe:	4840      	ldr	r0, [pc, #256]	; (27cc0 <z_thread_abort+0x168>)
   27bc0:	f7fd f94a 	bl	24e58 <z_spin_unlock_valid>
   27bc4:	b1a0      	cbz	r0, 27bf0 <z_thread_abort+0x98>
   27bc6:	f385 8811 	msr	BASEPRI, r5
   27bca:	f3bf 8f6f 	isb	sy
		__ASSERT(false, "aborting essential thread %p", thread);
   27bce:	4d41      	ldr	r5, [pc, #260]	; (27cd4 <z_thread_abort+0x17c>)
   27bd0:	f44f 63d9 	mov.w	r3, #1736	; 0x6c8
   27bd4:	462a      	mov	r2, r5
   27bd6:	4940      	ldr	r1, [pc, #256]	; (27cd8 <z_thread_abort+0x180>)
   27bd8:	483c      	ldr	r0, [pc, #240]	; (27ccc <z_thread_abort+0x174>)
   27bda:	f001 ff86 	bl	29aea <assert_print>
   27bde:	4621      	mov	r1, r4
   27be0:	483e      	ldr	r0, [pc, #248]	; (27cdc <z_thread_abort+0x184>)
   27be2:	f001 ff82 	bl	29aea <assert_print>
   27be6:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
   27bea:	4628      	mov	r0, r5
   27bec:	f001 ff76 	bl	29adc <assert_post_action>
   27bf0:	4c34      	ldr	r4, [pc, #208]	; (27cc4 <z_thread_abort+0x16c>)
   27bf2:	23c2      	movs	r3, #194	; 0xc2
   27bf4:	4622      	mov	r2, r4
   27bf6:	493a      	ldr	r1, [pc, #232]	; (27ce0 <z_thread_abort+0x188>)
   27bf8:	4834      	ldr	r0, [pc, #208]	; (27ccc <z_thread_abort+0x174>)
   27bfa:	f001 ff76 	bl	29aea <assert_print>
   27bfe:	4930      	ldr	r1, [pc, #192]	; (27cc0 <z_thread_abort+0x168>)
   27c00:	4838      	ldr	r0, [pc, #224]	; (27ce4 <z_thread_abort+0x18c>)
   27c02:	f001 ff72 	bl	29aea <assert_print>
   27c06:	21c2      	movs	r1, #194	; 0xc2
   27c08:	4620      	mov	r0, r4
   27c0a:	f001 ff67 	bl	29adc <assert_post_action>
   27c0e:	4c2d      	ldr	r4, [pc, #180]	; (27cc4 <z_thread_abort+0x16c>)
   27c10:	23c2      	movs	r3, #194	; 0xc2
   27c12:	4622      	mov	r2, r4
   27c14:	4932      	ldr	r1, [pc, #200]	; (27ce0 <z_thread_abort+0x188>)
   27c16:	482d      	ldr	r0, [pc, #180]	; (27ccc <z_thread_abort+0x174>)
   27c18:	f001 ff67 	bl	29aea <assert_print>
   27c1c:	4928      	ldr	r1, [pc, #160]	; (27cc0 <z_thread_abort+0x168>)
   27c1e:	4831      	ldr	r0, [pc, #196]	; (27ce4 <z_thread_abort+0x18c>)
   27c20:	f001 ff63 	bl	29aea <assert_print>
   27c24:	21c2      	movs	r1, #194	; 0xc2
   27c26:	4620      	mov	r0, r4
   27c28:	f001 ff58 	bl	29adc <assert_post_action>
	end_thread(thread);
   27c2c:	4620      	mov	r0, r4
   27c2e:	f7ff fcf9 	bl	27624 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   27c32:	4b2d      	ldr	r3, [pc, #180]	; (27ce8 <z_thread_abort+0x190>)
   27c34:	689b      	ldr	r3, [r3, #8]
   27c36:	42a3      	cmp	r3, r4
   27c38:	d008      	beq.n	27c4c <z_thread_abort+0xf4>
   27c3a:	4821      	ldr	r0, [pc, #132]	; (27cc0 <z_thread_abort+0x168>)
   27c3c:	f7fd f90c 	bl	24e58 <z_spin_unlock_valid>
   27c40:	b370      	cbz	r0, 27ca0 <z_thread_abort+0x148>
   27c42:	f386 8811 	msr	BASEPRI, r6
   27c46:	f3bf 8f6f 	isb	sy
   27c4a:	e7a8      	b.n	27b9e <z_thread_abort+0x46>
   27c4c:	f3ef 8305 	mrs	r3, IPSR
   27c50:	2b00      	cmp	r3, #0
   27c52:	d1f2      	bne.n	27c3a <z_thread_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c54:	481a      	ldr	r0, [pc, #104]	; (27cc0 <z_thread_abort+0x168>)
   27c56:	f7fd f8ff 	bl	24e58 <z_spin_unlock_valid>
   27c5a:	b190      	cbz	r0, 27c82 <z_thread_abort+0x12a>
   27c5c:	4628      	mov	r0, r5
   27c5e:	f7ed fc3b 	bl	154d8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   27c62:	4c1c      	ldr	r4, [pc, #112]	; (27cd4 <z_thread_abort+0x17c>)
   27c64:	f240 63f7 	movw	r3, #1783	; 0x6f7
   27c68:	4622      	mov	r2, r4
   27c6a:	491b      	ldr	r1, [pc, #108]	; (27cd8 <z_thread_abort+0x180>)
   27c6c:	4817      	ldr	r0, [pc, #92]	; (27ccc <z_thread_abort+0x174>)
   27c6e:	f001 ff3c 	bl	29aea <assert_print>
   27c72:	481e      	ldr	r0, [pc, #120]	; (27cec <z_thread_abort+0x194>)
   27c74:	f001 ff39 	bl	29aea <assert_print>
   27c78:	f240 61f7 	movw	r1, #1783	; 0x6f7
   27c7c:	4620      	mov	r0, r4
   27c7e:	f001 ff2d 	bl	29adc <assert_post_action>
   27c82:	4c10      	ldr	r4, [pc, #64]	; (27cc4 <z_thread_abort+0x16c>)
   27c84:	23e1      	movs	r3, #225	; 0xe1
   27c86:	4622      	mov	r2, r4
   27c88:	4915      	ldr	r1, [pc, #84]	; (27ce0 <z_thread_abort+0x188>)
   27c8a:	4810      	ldr	r0, [pc, #64]	; (27ccc <z_thread_abort+0x174>)
   27c8c:	f001 ff2d 	bl	29aea <assert_print>
   27c90:	490b      	ldr	r1, [pc, #44]	; (27cc0 <z_thread_abort+0x168>)
   27c92:	4814      	ldr	r0, [pc, #80]	; (27ce4 <z_thread_abort+0x18c>)
   27c94:	f001 ff29 	bl	29aea <assert_print>
   27c98:	21e1      	movs	r1, #225	; 0xe1
   27c9a:	4620      	mov	r0, r4
   27c9c:	f001 ff1e 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ca0:	4c08      	ldr	r4, [pc, #32]	; (27cc4 <z_thread_abort+0x16c>)
   27ca2:	23c2      	movs	r3, #194	; 0xc2
   27ca4:	4622      	mov	r2, r4
   27ca6:	490e      	ldr	r1, [pc, #56]	; (27ce0 <z_thread_abort+0x188>)
   27ca8:	4808      	ldr	r0, [pc, #32]	; (27ccc <z_thread_abort+0x174>)
   27caa:	f001 ff1e 	bl	29aea <assert_print>
   27cae:	4904      	ldr	r1, [pc, #16]	; (27cc0 <z_thread_abort+0x168>)
   27cb0:	480c      	ldr	r0, [pc, #48]	; (27ce4 <z_thread_abort+0x18c>)
   27cb2:	f001 ff1a 	bl	29aea <assert_print>
   27cb6:	21c2      	movs	r1, #194	; 0xc2
   27cb8:	4620      	mov	r0, r4
   27cba:	f001 ff0f 	bl	29adc <assert_post_action>
   27cbe:	bf00      	nop
   27cc0:	20009d38 	.word	0x20009d38
   27cc4:	000301b0 	.word	0x000301b0
   27cc8:	00030210 	.word	0x00030210
   27ccc:	0002fdac 	.word	0x0002fdac
   27cd0:	00030228 	.word	0x00030228
   27cd4:	00034564 	.word	0x00034564
   27cd8:	000337ec 	.word	0x000337ec
   27cdc:	000346f8 	.word	0x000346f8
   27ce0:	000301e0 	.word	0x000301e0
   27ce4:	000301f8 	.word	0x000301f8
   27ce8:	20009ce8 	.word	0x20009ce8
   27cec:	00034718 	.word	0x00034718

00027cf0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   27cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27cf4:	4605      	mov	r5, r0
   27cf6:	460f      	mov	r7, r1
   27cf8:	4690      	mov	r8, r2
	__asm__ volatile(
   27cfa:	f04f 0320 	mov.w	r3, #32
   27cfe:	f3ef 8611 	mrs	r6, BASEPRI
   27d02:	f383 8812 	msr	BASEPRI_MAX, r3
   27d06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d0a:	4826      	ldr	r0, [pc, #152]	; (27da4 <z_sched_wake+0xb4>)
   27d0c:	f7fd f894 	bl	24e38 <z_spin_lock_valid>
   27d10:	b138      	cbz	r0, 27d22 <z_sched_wake+0x32>
   27d12:	2400      	movs	r4, #0
   27d14:	4682      	mov	sl, r0
	z_spin_lock_set_owner(l);
   27d16:	4823      	ldr	r0, [pc, #140]	; (27da4 <z_sched_wake+0xb4>)
   27d18:	f7fd f8ae 	bl	24e78 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;
   27d1c:	f04f 0900 	mov.w	r9, #0
	return k;
   27d20:	e025      	b.n	27d6e <z_sched_wake+0x7e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d22:	4c21      	ldr	r4, [pc, #132]	; (27da8 <z_sched_wake+0xb8>)
   27d24:	2394      	movs	r3, #148	; 0x94
   27d26:	4622      	mov	r2, r4
   27d28:	4920      	ldr	r1, [pc, #128]	; (27dac <z_sched_wake+0xbc>)
   27d2a:	4821      	ldr	r0, [pc, #132]	; (27db0 <z_sched_wake+0xc0>)
   27d2c:	f001 fedd 	bl	29aea <assert_print>
   27d30:	491c      	ldr	r1, [pc, #112]	; (27da4 <z_sched_wake+0xb4>)
   27d32:	4820      	ldr	r0, [pc, #128]	; (27db4 <z_sched_wake+0xc4>)
   27d34:	f001 fed9 	bl	29aea <assert_print>
   27d38:	2194      	movs	r1, #148	; 0x94
   27d3a:	4620      	mov	r0, r4
   27d3c:	f001 fece 	bl	29adc <assert_post_action>
   27d40:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   27d44:	f8c0 8014 	str.w	r8, [r0, #20]

		if (thread != NULL) {
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   27d48:	f007 f9c6 	bl	2f0d8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   27d4c:	f104 0018 	add.w	r0, r4, #24
   27d50:	f000 f982 	bl	28058 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   27d54:	4620      	mov	r0, r4
   27d56:	f7ff f889 	bl	26e6c <ready_thread>
			ret = true;
   27d5a:	46d1      	mov	r9, sl
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d5c:	4811      	ldr	r0, [pc, #68]	; (27da4 <z_sched_wake+0xb4>)
   27d5e:	f7fd f87b 	bl	24e58 <z_spin_unlock_valid>
   27d62:	b160      	cbz	r0, 27d7e <z_sched_wake+0x8e>
	__asm__ volatile(
   27d64:	f386 8811 	msr	BASEPRI, r6
   27d68:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27d6c:	2401      	movs	r4, #1
   27d6e:	b9ac      	cbnz	r4, 27d9c <z_sched_wake+0xac>
		thread = _priq_wait_best(&wait_q->waitq);
   27d70:	4628      	mov	r0, r5
   27d72:	f007 f9bf 	bl	2f0f4 <z_priq_dumb_best>
		if (thread != NULL) {
   27d76:	4604      	mov	r4, r0
   27d78:	2800      	cmp	r0, #0
   27d7a:	d1e1      	bne.n	27d40 <z_sched_wake+0x50>
   27d7c:	e7ee      	b.n	27d5c <z_sched_wake+0x6c>
   27d7e:	4c0a      	ldr	r4, [pc, #40]	; (27da8 <z_sched_wake+0xb8>)
   27d80:	23c2      	movs	r3, #194	; 0xc2
   27d82:	4622      	mov	r2, r4
   27d84:	490c      	ldr	r1, [pc, #48]	; (27db8 <z_sched_wake+0xc8>)
   27d86:	480a      	ldr	r0, [pc, #40]	; (27db0 <z_sched_wake+0xc0>)
   27d88:	f001 feaf 	bl	29aea <assert_print>
   27d8c:	4905      	ldr	r1, [pc, #20]	; (27da4 <z_sched_wake+0xb4>)
   27d8e:	480b      	ldr	r0, [pc, #44]	; (27dbc <z_sched_wake+0xcc>)
   27d90:	f001 feab 	bl	29aea <assert_print>
   27d94:	21c2      	movs	r1, #194	; 0xc2
   27d96:	4620      	mov	r0, r4
   27d98:	f001 fea0 	bl	29adc <assert_post_action>
		}
	}

	return ret;
}
   27d9c:	4648      	mov	r0, r9
   27d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27da2:	bf00      	nop
   27da4:	20009d38 	.word	0x20009d38
   27da8:	000301b0 	.word	0x000301b0
   27dac:	00030210 	.word	0x00030210
   27db0:	0002fdac 	.word	0x0002fdac
   27db4:	00030228 	.word	0x00030228
   27db8:	000301e0 	.word	0x000301e0
   27dbc:	000301f8 	.word	0x000301f8

00027dc0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27dc0:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   27dc4:	b083      	sub	sp, #12
   27dc6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27dc8:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   27dcc:	e9cd bc00 	strd	fp, ip, [sp]
   27dd0:	f7ff fa0c 	bl	271ec <z_pend_curr>

	if (data != NULL) {
   27dd4:	b11c      	cbz	r4, 27dde <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   27dd6:	4b03      	ldr	r3, [pc, #12]	; (27de4 <z_sched_wait+0x24>)
   27dd8:	689b      	ldr	r3, [r3, #8]
   27dda:	695b      	ldr	r3, [r3, #20]
   27ddc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   27dde:	b003      	add	sp, #12
   27de0:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   27de4:	20009ce8 	.word	0x20009ce8

00027de8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   27de8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   27dea:	4806      	ldr	r0, [pc, #24]	; (27e04 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   27dec:	4a06      	ldr	r2, [pc, #24]	; (27e08 <z_data_copy+0x20>)
   27dee:	1a12      	subs	r2, r2, r0
   27df0:	4906      	ldr	r1, [pc, #24]	; (27e0c <z_data_copy+0x24>)
   27df2:	f006 ffc3 	bl	2ed7c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   27df6:	4a06      	ldr	r2, [pc, #24]	; (27e10 <z_data_copy+0x28>)
   27df8:	4906      	ldr	r1, [pc, #24]	; (27e14 <z_data_copy+0x2c>)
   27dfa:	4807      	ldr	r0, [pc, #28]	; (27e18 <z_data_copy+0x30>)
   27dfc:	f006 ffbe 	bl	2ed7c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   27e00:	bd08      	pop	{r3, pc}
   27e02:	bf00      	nop
   27e04:	20008000 	.word	0x20008000
   27e08:	20008748 	.word	0x20008748
   27e0c:	00034afc 	.word	0x00034afc
   27e10:	00000000 	.word	0x00000000
   27e14:	00034afc 	.word	0x00034afc
   27e18:	20008000 	.word	0x20008000

00027e1c <first>:
	return list->head == list;
   27e1c:	4b03      	ldr	r3, [pc, #12]	; (27e2c <first+0x10>)
   27e1e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27e20:	4298      	cmp	r0, r3
   27e22:	d000      	beq.n	27e26 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   27e24:	4770      	bx	lr
   27e26:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   27e28:	e7fc      	b.n	27e24 <first+0x8>
   27e2a:	bf00      	nop
   27e2c:	20008428 	.word	0x20008428

00027e30 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27e30:	b130      	cbz	r0, 27e40 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   27e32:	4a04      	ldr	r2, [pc, #16]	; (27e44 <next+0x14>)
   27e34:	6852      	ldr	r2, [r2, #4]
   27e36:	4290      	cmp	r0, r2
   27e38:	d001      	beq.n	27e3e <next+0xe>
   27e3a:	6800      	ldr	r0, [r0, #0]
   27e3c:	4770      	bx	lr
   27e3e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   27e40:	4770      	bx	lr
   27e42:	bf00      	nop
   27e44:	20008428 	.word	0x20008428

00027e48 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   27e48:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   27e4a:	4b04      	ldr	r3, [pc, #16]	; (27e5c <elapsed+0x14>)
   27e4c:	681b      	ldr	r3, [r3, #0]
   27e4e:	b10b      	cbz	r3, 27e54 <elapsed+0xc>
   27e50:	2000      	movs	r0, #0
}
   27e52:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   27e54:	f7f9 fd12 	bl	2187c <sys_clock_elapsed>
   27e58:	e7fb      	b.n	27e52 <elapsed+0xa>
   27e5a:	bf00      	nop
   27e5c:	20009d3c 	.word	0x20009d3c

00027e60 <next_timeout>:

static int32_t next_timeout(void)
{
   27e60:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   27e62:	f7ff ffdb 	bl	27e1c <first>
   27e66:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   27e68:	f7ff ffee 	bl	27e48 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   27e6c:	b17c      	cbz	r4, 27e8e <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   27e6e:	6923      	ldr	r3, [r4, #16]
   27e70:	6962      	ldr	r2, [r4, #20]
   27e72:	1a1b      	subs	r3, r3, r0
   27e74:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   27e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   27e7c:	f172 0100 	sbcs.w	r1, r2, #0
   27e80:	da08      	bge.n	27e94 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   27e82:	2a00      	cmp	r2, #0
   27e84:	db01      	blt.n	27e8a <next_timeout+0x2a>
   27e86:	4618      	mov	r0, r3
   27e88:	e006      	b.n	27e98 <next_timeout+0x38>
   27e8a:	2300      	movs	r3, #0
   27e8c:	e7fb      	b.n	27e86 <next_timeout+0x26>
		ret = MAX_WAIT;
   27e8e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   27e92:	e001      	b.n	27e98 <next_timeout+0x38>
   27e94:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   27e98:	4b03      	ldr	r3, [pc, #12]	; (27ea8 <next_timeout+0x48>)
   27e9a:	691b      	ldr	r3, [r3, #16]
   27e9c:	b113      	cbz	r3, 27ea4 <next_timeout+0x44>
   27e9e:	4283      	cmp	r3, r0
   27ea0:	da00      	bge.n	27ea4 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   27ea2:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   27ea4:	bd10      	pop	{r4, pc}
   27ea6:	bf00      	nop
   27ea8:	20009ce8 	.word	0x20009ce8

00027eac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27eac:	f1b3 3fff 	cmp.w	r3, #4294967295
   27eb0:	bf08      	it	eq
   27eb2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   27eb6:	f000 80b4 	beq.w	28022 <z_add_timeout+0x176>
{
   27eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27ebe:	4604      	mov	r4, r0
   27ec0:	4616      	mov	r6, r2
   27ec2:	461d      	mov	r5, r3
	return node->next != NULL;
   27ec4:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   27ec6:	b98b      	cbnz	r3, 27eec <z_add_timeout+0x40>
	to->fn = fn;
   27ec8:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   27eca:	2700      	movs	r7, #0
	__asm__ volatile(
   27ecc:	f04f 0320 	mov.w	r3, #32
   27ed0:	f3ef 8a11 	mrs	sl, BASEPRI
   27ed4:	f383 8812 	msr	BASEPRI_MAX, r3
   27ed8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27edc:	4851      	ldr	r0, [pc, #324]	; (28024 <z_add_timeout+0x178>)
   27ede:	f7fc ffab 	bl	24e38 <z_spin_lock_valid>
   27ee2:	b188      	cbz	r0, 27f08 <z_add_timeout+0x5c>
	z_spin_lock_set_owner(l);
   27ee4:	484f      	ldr	r0, [pc, #316]	; (28024 <z_add_timeout+0x178>)
   27ee6:	f7fc ffc7 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   27eea:	e048      	b.n	27f7e <z_add_timeout+0xd2>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   27eec:	4c4e      	ldr	r4, [pc, #312]	; (28028 <z_add_timeout+0x17c>)
   27eee:	2363      	movs	r3, #99	; 0x63
   27ef0:	4622      	mov	r2, r4
   27ef2:	494e      	ldr	r1, [pc, #312]	; (2802c <z_add_timeout+0x180>)
   27ef4:	484e      	ldr	r0, [pc, #312]	; (28030 <z_add_timeout+0x184>)
   27ef6:	f001 fdf8 	bl	29aea <assert_print>
   27efa:	484e      	ldr	r0, [pc, #312]	; (28034 <z_add_timeout+0x188>)
   27efc:	f001 fdf5 	bl	29aea <assert_print>
   27f00:	2163      	movs	r1, #99	; 0x63
   27f02:	4620      	mov	r0, r4
   27f04:	f001 fdea 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27f08:	4c4b      	ldr	r4, [pc, #300]	; (28038 <z_add_timeout+0x18c>)
   27f0a:	2394      	movs	r3, #148	; 0x94
   27f0c:	4622      	mov	r2, r4
   27f0e:	494b      	ldr	r1, [pc, #300]	; (2803c <z_add_timeout+0x190>)
   27f10:	4847      	ldr	r0, [pc, #284]	; (28030 <z_add_timeout+0x184>)
   27f12:	f001 fdea 	bl	29aea <assert_print>
   27f16:	4943      	ldr	r1, [pc, #268]	; (28024 <z_add_timeout+0x178>)
   27f18:	4849      	ldr	r0, [pc, #292]	; (28040 <z_add_timeout+0x194>)
   27f1a:	f001 fde6 	bl	29aea <assert_print>
   27f1e:	2194      	movs	r1, #148	; 0x94
   27f20:	4620      	mov	r0, r4
   27f22:	f001 fddb 	bl	29adc <assert_post_action>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   27f26:	f116 0801 	adds.w	r8, r6, #1
   27f2a:	f145 0900 	adc.w	r9, r5, #0
   27f2e:	f7ff ff8b 	bl	27e48 <elapsed>
   27f32:	eb18 0300 	adds.w	r3, r8, r0
   27f36:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   27f3a:	6123      	str	r3, [r4, #16]
   27f3c:	6160      	str	r0, [r4, #20]
   27f3e:	e03e      	b.n	27fbe <z_add_timeout+0x112>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   27f40:	1a52      	subs	r2, r2, r1
   27f42:	eb67 0303 	sbc.w	r3, r7, r3
   27f46:	6102      	str	r2, [r0, #16]
   27f48:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   27f4a:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   27f4c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   27f4e:	6020      	str	r0, [r4, #0]
	prev->next = node;
   27f50:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27f52:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   27f54:	e005      	b.n	27f62 <z_add_timeout+0xb6>
	sys_dnode_t *const tail = list->tail;
   27f56:	4b3b      	ldr	r3, [pc, #236]	; (28044 <z_add_timeout+0x198>)
   27f58:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   27f5a:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   27f5c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   27f5e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   27f60:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   27f62:	f7ff ff5b 	bl	27e1c <first>
   27f66:	4284      	cmp	r4, r0
   27f68:	d03d      	beq.n	27fe6 <z_add_timeout+0x13a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27f6a:	482e      	ldr	r0, [pc, #184]	; (28024 <z_add_timeout+0x178>)
   27f6c:	f7fc ff74 	bl	24e58 <z_spin_unlock_valid>
   27f70:	2800      	cmp	r0, #0
   27f72:	d045      	beq.n	28000 <z_add_timeout+0x154>
	__asm__ volatile(
   27f74:	f38a 8811 	msr	BASEPRI, sl
   27f78:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   27f7c:	2701      	movs	r7, #1
   27f7e:	2f00      	cmp	r7, #0
   27f80:	d14d      	bne.n	2801e <z_add_timeout+0x172>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   27f82:	f06f 0101 	mvn.w	r1, #1
   27f86:	1b89      	subs	r1, r1, r6
   27f88:	f04f 30ff 	mov.w	r0, #4294967295
   27f8c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   27f90:	2a00      	cmp	r2, #0
   27f92:	dbc8      	blt.n	27f26 <z_add_timeout+0x7a>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   27f94:	4a2c      	ldr	r2, [pc, #176]	; (28048 <z_add_timeout+0x19c>)
   27f96:	6811      	ldr	r1, [r2, #0]
   27f98:	6852      	ldr	r2, [r2, #4]
   27f9a:	1873      	adds	r3, r6, r1
   27f9c:	eb42 0205 	adc.w	r2, r2, r5
   27fa0:	f06f 0101 	mvn.w	r1, #1
   27fa4:	1ac9      	subs	r1, r1, r3
   27fa6:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   27faa:	4608      	mov	r0, r1
   27fac:	461a      	mov	r2, r3
   27fae:	2901      	cmp	r1, #1
   27fb0:	f173 0300 	sbcs.w	r3, r3, #0
   27fb4:	da01      	bge.n	27fba <z_add_timeout+0x10e>
   27fb6:	2001      	movs	r0, #1
   27fb8:	2200      	movs	r2, #0
   27fba:	6120      	str	r0, [r4, #16]
   27fbc:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   27fbe:	f7ff ff2d 	bl	27e1c <first>
   27fc2:	2800      	cmp	r0, #0
   27fc4:	d0c7      	beq.n	27f56 <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
   27fc6:	6902      	ldr	r2, [r0, #16]
   27fc8:	6947      	ldr	r7, [r0, #20]
   27fca:	6921      	ldr	r1, [r4, #16]
   27fcc:	6963      	ldr	r3, [r4, #20]
   27fce:	4291      	cmp	r1, r2
   27fd0:	eb73 0e07 	sbcs.w	lr, r3, r7
   27fd4:	dbb4      	blt.n	27f40 <z_add_timeout+0x94>
			to->dticks -= t->dticks;
   27fd6:	1a89      	subs	r1, r1, r2
   27fd8:	eb63 0307 	sbc.w	r3, r3, r7
   27fdc:	6121      	str	r1, [r4, #16]
   27fde:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   27fe0:	f7ff ff26 	bl	27e30 <next>
   27fe4:	e7ed      	b.n	27fc2 <z_add_timeout+0x116>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   27fe6:	f7ff ff3b 	bl	27e60 <next_timeout>

			if (next_time == 0 ||
   27fea:	4603      	mov	r3, r0
   27fec:	b118      	cbz	r0, 27ff6 <z_add_timeout+0x14a>
			    _current_cpu->slice_ticks != next_time) {
   27fee:	4a17      	ldr	r2, [pc, #92]	; (2804c <z_add_timeout+0x1a0>)
   27ff0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   27ff2:	4282      	cmp	r2, r0
   27ff4:	d0b9      	beq.n	27f6a <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
   27ff6:	2100      	movs	r1, #0
   27ff8:	4618      	mov	r0, r3
   27ffa:	f7f9 fc0d 	bl	21818 <sys_clock_set_timeout>
   27ffe:	e7b4      	b.n	27f6a <z_add_timeout+0xbe>
   28000:	4c0d      	ldr	r4, [pc, #52]	; (28038 <z_add_timeout+0x18c>)
   28002:	23c2      	movs	r3, #194	; 0xc2
   28004:	4622      	mov	r2, r4
   28006:	4912      	ldr	r1, [pc, #72]	; (28050 <z_add_timeout+0x1a4>)
   28008:	4809      	ldr	r0, [pc, #36]	; (28030 <z_add_timeout+0x184>)
   2800a:	f001 fd6e 	bl	29aea <assert_print>
   2800e:	4905      	ldr	r1, [pc, #20]	; (28024 <z_add_timeout+0x178>)
   28010:	4810      	ldr	r0, [pc, #64]	; (28054 <z_add_timeout+0x1a8>)
   28012:	f001 fd6a 	bl	29aea <assert_print>
   28016:	21c2      	movs	r1, #194	; 0xc2
   28018:	4620      	mov	r0, r4
   2801a:	f001 fd5f 	bl	29adc <assert_post_action>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28022:	4770      	bx	lr
   28024:	20009d40 	.word	0x20009d40
   28028:	0003473c 	.word	0x0003473c
   2802c:	00034760 	.word	0x00034760
   28030:	0002fdac 	.word	0x0002fdac
   28034:	00032b7c 	.word	0x00032b7c
   28038:	000301b0 	.word	0x000301b0
   2803c:	00030210 	.word	0x00030210
   28040:	00030228 	.word	0x00030228
   28044:	20008428 	.word	0x20008428
   28048:	20009770 	.word	0x20009770
   2804c:	20009ce8 	.word	0x20009ce8
   28050:	000301e0 	.word	0x000301e0
   28054:	000301f8 	.word	0x000301f8

00028058 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   28058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2805c:	4605      	mov	r5, r0
	__asm__ volatile(
   2805e:	f04f 0320 	mov.w	r3, #32
   28062:	f3ef 8711 	mrs	r7, BASEPRI
   28066:	f383 8812 	msr	BASEPRI_MAX, r3
   2806a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2806e:	481f      	ldr	r0, [pc, #124]	; (280ec <z_abort_timeout+0x94>)
   28070:	f7fc fee2 	bl	24e38 <z_spin_lock_valid>
   28074:	b130      	cbz	r0, 28084 <z_abort_timeout+0x2c>
   28076:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   28078:	481c      	ldr	r0, [pc, #112]	; (280ec <z_abort_timeout+0x94>)
   2807a:	f7fc fefd 	bl	24e78 <z_spin_lock_set_owner>
	int ret = -EINVAL;
   2807e:	f06f 0815 	mvn.w	r8, #21
	return k;
   28082:	e01b      	b.n	280bc <z_abort_timeout+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28084:	4c1a      	ldr	r4, [pc, #104]	; (280f0 <z_abort_timeout+0x98>)
   28086:	2394      	movs	r3, #148	; 0x94
   28088:	4622      	mov	r2, r4
   2808a:	491a      	ldr	r1, [pc, #104]	; (280f4 <z_abort_timeout+0x9c>)
   2808c:	481a      	ldr	r0, [pc, #104]	; (280f8 <z_abort_timeout+0xa0>)
   2808e:	f001 fd2c 	bl	29aea <assert_print>
   28092:	4916      	ldr	r1, [pc, #88]	; (280ec <z_abort_timeout+0x94>)
   28094:	4819      	ldr	r0, [pc, #100]	; (280fc <z_abort_timeout+0xa4>)
   28096:	f001 fd28 	bl	29aea <assert_print>
   2809a:	2194      	movs	r1, #148	; 0x94
   2809c:	4620      	mov	r0, r4
   2809e:	f001 fd1d 	bl	29adc <assert_post_action>

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
   280a2:	4628      	mov	r0, r5
   280a4:	f007 f862 	bl	2f16c <remove_timeout>
			ret = 0;
   280a8:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   280aa:	4810      	ldr	r0, [pc, #64]	; (280ec <z_abort_timeout+0x94>)
   280ac:	f7fc fed4 	bl	24e58 <z_spin_unlock_valid>
   280b0:	b150      	cbz	r0, 280c8 <z_abort_timeout+0x70>
	__asm__ volatile(
   280b2:	f387 8811 	msr	BASEPRI, r7
   280b6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   280ba:	2401      	movs	r4, #1
   280bc:	4626      	mov	r6, r4
   280be:	b994      	cbnz	r4, 280e6 <z_abort_timeout+0x8e>
	return node->next != NULL;
   280c0:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   280c2:	2b00      	cmp	r3, #0
   280c4:	d1ed      	bne.n	280a2 <z_abort_timeout+0x4a>
   280c6:	e7f0      	b.n	280aa <z_abort_timeout+0x52>
   280c8:	4c09      	ldr	r4, [pc, #36]	; (280f0 <z_abort_timeout+0x98>)
   280ca:	23c2      	movs	r3, #194	; 0xc2
   280cc:	4622      	mov	r2, r4
   280ce:	490c      	ldr	r1, [pc, #48]	; (28100 <z_abort_timeout+0xa8>)
   280d0:	4809      	ldr	r0, [pc, #36]	; (280f8 <z_abort_timeout+0xa0>)
   280d2:	f001 fd0a 	bl	29aea <assert_print>
   280d6:	4905      	ldr	r1, [pc, #20]	; (280ec <z_abort_timeout+0x94>)
   280d8:	480a      	ldr	r0, [pc, #40]	; (28104 <z_abort_timeout+0xac>)
   280da:	f001 fd06 	bl	29aea <assert_print>
   280de:	21c2      	movs	r1, #194	; 0xc2
   280e0:	4620      	mov	r0, r4
   280e2:	f001 fcfb 	bl	29adc <assert_post_action>
		}
	}

	return ret;
}
   280e6:	4640      	mov	r0, r8
   280e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   280ec:	20009d40 	.word	0x20009d40
   280f0:	000301b0 	.word	0x000301b0
   280f4:	00030210 	.word	0x00030210
   280f8:	0002fdac 	.word	0x0002fdac
   280fc:	00030228 	.word	0x00030228
   28100:	000301e0 	.word	0x000301e0
   28104:	000301f8 	.word	0x000301f8

00028108 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   28108:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   2810a:	f04f 0320 	mov.w	r3, #32
   2810e:	f3ef 8611 	mrs	r6, BASEPRI
   28112:	f383 8812 	msr	BASEPRI_MAX, r3
   28116:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2811a:	481c      	ldr	r0, [pc, #112]	; (2818c <z_get_next_timeout_expiry+0x84>)
   2811c:	f7fc fe8c 	bl	24e38 <z_spin_lock_valid>
   28120:	b198      	cbz	r0, 2814a <z_get_next_timeout_expiry+0x42>
   28122:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   28124:	4819      	ldr	r0, [pc, #100]	; (2818c <z_get_next_timeout_expiry+0x84>)
   28126:	f7fc fea7 	bl	24e78 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2812a:	f04f 34ff 	mov.w	r4, #4294967295

	LOCKED(&timeout_lock) {
   2812e:	bb55      	cbnz	r5, 28186 <z_get_next_timeout_expiry+0x7e>
		ret = next_timeout();
   28130:	f7ff fe96 	bl	27e60 <next_timeout>
   28134:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28136:	4815      	ldr	r0, [pc, #84]	; (2818c <z_get_next_timeout_expiry+0x84>)
   28138:	f7fc fe8e 	bl	24e58 <z_spin_unlock_valid>
   2813c:	b1a0      	cbz	r0, 28168 <z_get_next_timeout_expiry+0x60>
	__asm__ volatile(
   2813e:	f386 8811 	msr	BASEPRI, r6
   28142:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28146:	2501      	movs	r5, #1
   28148:	e7f1      	b.n	2812e <z_get_next_timeout_expiry+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2814a:	4c11      	ldr	r4, [pc, #68]	; (28190 <z_get_next_timeout_expiry+0x88>)
   2814c:	2394      	movs	r3, #148	; 0x94
   2814e:	4622      	mov	r2, r4
   28150:	4910      	ldr	r1, [pc, #64]	; (28194 <z_get_next_timeout_expiry+0x8c>)
   28152:	4811      	ldr	r0, [pc, #68]	; (28198 <z_get_next_timeout_expiry+0x90>)
   28154:	f001 fcc9 	bl	29aea <assert_print>
   28158:	490c      	ldr	r1, [pc, #48]	; (2818c <z_get_next_timeout_expiry+0x84>)
   2815a:	4810      	ldr	r0, [pc, #64]	; (2819c <z_get_next_timeout_expiry+0x94>)
   2815c:	f001 fcc5 	bl	29aea <assert_print>
   28160:	2194      	movs	r1, #148	; 0x94
   28162:	4620      	mov	r0, r4
   28164:	f001 fcba 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28168:	4c09      	ldr	r4, [pc, #36]	; (28190 <z_get_next_timeout_expiry+0x88>)
   2816a:	23c2      	movs	r3, #194	; 0xc2
   2816c:	4622      	mov	r2, r4
   2816e:	490c      	ldr	r1, [pc, #48]	; (281a0 <z_get_next_timeout_expiry+0x98>)
   28170:	4809      	ldr	r0, [pc, #36]	; (28198 <z_get_next_timeout_expiry+0x90>)
   28172:	f001 fcba 	bl	29aea <assert_print>
   28176:	4905      	ldr	r1, [pc, #20]	; (2818c <z_get_next_timeout_expiry+0x84>)
   28178:	480a      	ldr	r0, [pc, #40]	; (281a4 <z_get_next_timeout_expiry+0x9c>)
   2817a:	f001 fcb6 	bl	29aea <assert_print>
   2817e:	21c2      	movs	r1, #194	; 0xc2
   28180:	4620      	mov	r0, r4
   28182:	f001 fcab 	bl	29adc <assert_post_action>
	}
	return ret;
}
   28186:	4620      	mov	r0, r4
   28188:	bd70      	pop	{r4, r5, r6, pc}
   2818a:	bf00      	nop
   2818c:	20009d40 	.word	0x20009d40
   28190:	000301b0 	.word	0x000301b0
   28194:	00030210 	.word	0x00030210
   28198:	0002fdac 	.word	0x0002fdac
   2819c:	00030228 	.word	0x00030228
   281a0:	000301e0 	.word	0x000301e0
   281a4:	000301f8 	.word	0x000301f8

000281a8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   281a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   281ac:	4607      	mov	r7, r0
   281ae:	4688      	mov	r8, r1
	__asm__ volatile(
   281b0:	f04f 0320 	mov.w	r3, #32
   281b4:	f3ef 8611 	mrs	r6, BASEPRI
   281b8:	f383 8812 	msr	BASEPRI_MAX, r3
   281bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   281c0:	4824      	ldr	r0, [pc, #144]	; (28254 <z_set_timeout_expiry+0xac>)
   281c2:	f7fc fe39 	bl	24e38 <z_spin_lock_valid>
   281c6:	b120      	cbz	r0, 281d2 <z_set_timeout_expiry+0x2a>
   281c8:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   281ca:	4822      	ldr	r0, [pc, #136]	; (28254 <z_set_timeout_expiry+0xac>)
   281cc:	f7fc fe54 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   281d0:	e01d      	b.n	2820e <z_set_timeout_expiry+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   281d2:	4c21      	ldr	r4, [pc, #132]	; (28258 <z_set_timeout_expiry+0xb0>)
   281d4:	2394      	movs	r3, #148	; 0x94
   281d6:	4622      	mov	r2, r4
   281d8:	4920      	ldr	r1, [pc, #128]	; (2825c <z_set_timeout_expiry+0xb4>)
   281da:	4821      	ldr	r0, [pc, #132]	; (28260 <z_set_timeout_expiry+0xb8>)
   281dc:	f001 fc85 	bl	29aea <assert_print>
   281e0:	491c      	ldr	r1, [pc, #112]	; (28254 <z_set_timeout_expiry+0xac>)
   281e2:	4820      	ldr	r0, [pc, #128]	; (28264 <z_set_timeout_expiry+0xbc>)
   281e4:	f001 fc81 	bl	29aea <assert_print>
   281e8:	2194      	movs	r1, #148	; 0x94
   281ea:	4620      	mov	r0, r4
   281ec:	f001 fc76 	bl	29adc <assert_post_action>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   281f0:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   281f2:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   281f6:	2801      	cmp	r0, #1
   281f8:	dd00      	ble.n	281fc <z_set_timeout_expiry+0x54>
   281fa:	b99c      	cbnz	r4, 28224 <z_set_timeout_expiry+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   281fc:	4815      	ldr	r0, [pc, #84]	; (28254 <z_set_timeout_expiry+0xac>)
   281fe:	f7fc fe2b 	bl	24e58 <z_spin_unlock_valid>
   28202:	b1b0      	cbz	r0, 28232 <z_set_timeout_expiry+0x8a>
	__asm__ volatile(
   28204:	f386 8811 	msr	BASEPRI, r6
   28208:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2820c:	2501      	movs	r5, #1
   2820e:	462c      	mov	r4, r5
   28210:	b9f5      	cbnz	r5, 28250 <z_set_timeout_expiry+0xa8>
		int next_to = next_timeout();
   28212:	f7ff fe25 	bl	27e60 <next_timeout>
			      || (ticks <= next_to);
   28216:	f1b0 3fff 	cmp.w	r0, #4294967295
   2821a:	d0e9      	beq.n	281f0 <z_set_timeout_expiry+0x48>
   2821c:	42b8      	cmp	r0, r7
   2821e:	dbe8      	blt.n	281f2 <z_set_timeout_expiry+0x4a>
   28220:	2401      	movs	r4, #1
   28222:	e7e6      	b.n	281f2 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   28224:	4641      	mov	r1, r8
   28226:	42b8      	cmp	r0, r7
   28228:	bfa8      	it	ge
   2822a:	4638      	movge	r0, r7
   2822c:	f7f9 faf4 	bl	21818 <sys_clock_set_timeout>
   28230:	e7e4      	b.n	281fc <z_set_timeout_expiry+0x54>
   28232:	4c09      	ldr	r4, [pc, #36]	; (28258 <z_set_timeout_expiry+0xb0>)
   28234:	23c2      	movs	r3, #194	; 0xc2
   28236:	4622      	mov	r2, r4
   28238:	490b      	ldr	r1, [pc, #44]	; (28268 <z_set_timeout_expiry+0xc0>)
   2823a:	4809      	ldr	r0, [pc, #36]	; (28260 <z_set_timeout_expiry+0xb8>)
   2823c:	f001 fc55 	bl	29aea <assert_print>
   28240:	4904      	ldr	r1, [pc, #16]	; (28254 <z_set_timeout_expiry+0xac>)
   28242:	480a      	ldr	r0, [pc, #40]	; (2826c <z_set_timeout_expiry+0xc4>)
   28244:	f001 fc51 	bl	29aea <assert_print>
   28248:	21c2      	movs	r1, #194	; 0xc2
   2824a:	4620      	mov	r0, r4
   2824c:	f001 fc46 	bl	29adc <assert_post_action>
		}
	}
}
   28250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28254:	20009d40 	.word	0x20009d40
   28258:	000301b0 	.word	0x000301b0
   2825c:	00030210 	.word	0x00030210
   28260:	0002fdac 	.word	0x0002fdac
   28264:	00030228 	.word	0x00030228
   28268:	000301e0 	.word	0x000301e0
   2826c:	000301f8 	.word	0x000301f8

00028270 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   28270:	b570      	push	{r4, r5, r6, lr}
   28272:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   28274:	f7fe fd72 	bl	26d5c <z_time_slice>
	__asm__ volatile(
   28278:	f04f 0320 	mov.w	r3, #32
   2827c:	f3ef 8511 	mrs	r5, BASEPRI
   28280:	f383 8812 	msr	BASEPRI_MAX, r3
   28284:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28288:	4852      	ldr	r0, [pc, #328]	; (283d4 <sys_clock_announce+0x164>)
   2828a:	f7fc fdd5 	bl	24e38 <z_spin_lock_valid>
   2828e:	2800      	cmp	r0, #0
   28290:	d03f      	beq.n	28312 <sys_clock_announce+0xa2>
	z_spin_lock_set_owner(l);
   28292:	4850      	ldr	r0, [pc, #320]	; (283d4 <sys_clock_announce+0x164>)
   28294:	f7fc fdf0 	bl	24e78 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   28298:	4b4f      	ldr	r3, [pc, #316]	; (283d8 <sys_clock_announce+0x168>)
   2829a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2829c:	f7ff fdbe 	bl	27e1c <first>
   282a0:	4604      	mov	r4, r0
   282a2:	2800      	cmp	r0, #0
   282a4:	d062      	beq.n	2836c <sys_clock_announce+0xfc>
   282a6:	6906      	ldr	r6, [r0, #16]
   282a8:	6941      	ldr	r1, [r0, #20]
   282aa:	4b4b      	ldr	r3, [pc, #300]	; (283d8 <sys_clock_announce+0x168>)
   282ac:	681a      	ldr	r2, [r3, #0]
   282ae:	17d3      	asrs	r3, r2, #31
   282b0:	42b2      	cmp	r2, r6
   282b2:	418b      	sbcs	r3, r1
   282b4:	db5a      	blt.n	2836c <sys_clock_announce+0xfc>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   282b6:	4a49      	ldr	r2, [pc, #292]	; (283dc <sys_clock_announce+0x16c>)
   282b8:	6813      	ldr	r3, [r2, #0]
   282ba:	6851      	ldr	r1, [r2, #4]
   282bc:	199b      	adds	r3, r3, r6
   282be:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   282c2:	6013      	str	r3, [r2, #0]
   282c4:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   282c6:	2200      	movs	r2, #0
   282c8:	2300      	movs	r3, #0
   282ca:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   282ce:	4620      	mov	r0, r4
   282d0:	f006 ff4c 	bl	2f16c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   282d4:	483f      	ldr	r0, [pc, #252]	; (283d4 <sys_clock_announce+0x164>)
   282d6:	f7fc fdbf 	bl	24e58 <z_spin_unlock_valid>
   282da:	b348      	cbz	r0, 28330 <sys_clock_announce+0xc0>
	__asm__ volatile(
   282dc:	f385 8811 	msr	BASEPRI, r5
   282e0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   282e4:	68a3      	ldr	r3, [r4, #8]
   282e6:	4620      	mov	r0, r4
   282e8:	4798      	blx	r3
	__asm__ volatile(
   282ea:	f04f 0320 	mov.w	r3, #32
   282ee:	f3ef 8511 	mrs	r5, BASEPRI
   282f2:	f383 8812 	msr	BASEPRI_MAX, r3
   282f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   282fa:	4836      	ldr	r0, [pc, #216]	; (283d4 <sys_clock_announce+0x164>)
   282fc:	f7fc fd9c 	bl	24e38 <z_spin_lock_valid>
   28300:	b328      	cbz	r0, 2834e <sys_clock_announce+0xde>
	z_spin_lock_set_owner(l);
   28302:	4834      	ldr	r0, [pc, #208]	; (283d4 <sys_clock_announce+0x164>)
   28304:	f7fc fdb8 	bl	24e78 <z_spin_lock_set_owner>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   28308:	4a33      	ldr	r2, [pc, #204]	; (283d8 <sys_clock_announce+0x168>)
   2830a:	6813      	ldr	r3, [r2, #0]
   2830c:	1b9b      	subs	r3, r3, r6
   2830e:	6013      	str	r3, [r2, #0]
   28310:	e7c4      	b.n	2829c <sys_clock_announce+0x2c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28312:	4c33      	ldr	r4, [pc, #204]	; (283e0 <sys_clock_announce+0x170>)
   28314:	2394      	movs	r3, #148	; 0x94
   28316:	4622      	mov	r2, r4
   28318:	4932      	ldr	r1, [pc, #200]	; (283e4 <sys_clock_announce+0x174>)
   2831a:	4833      	ldr	r0, [pc, #204]	; (283e8 <sys_clock_announce+0x178>)
   2831c:	f001 fbe5 	bl	29aea <assert_print>
   28320:	492c      	ldr	r1, [pc, #176]	; (283d4 <sys_clock_announce+0x164>)
   28322:	4832      	ldr	r0, [pc, #200]	; (283ec <sys_clock_announce+0x17c>)
   28324:	f001 fbe1 	bl	29aea <assert_print>
   28328:	2194      	movs	r1, #148	; 0x94
   2832a:	4620      	mov	r0, r4
   2832c:	f001 fbd6 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28330:	4c2b      	ldr	r4, [pc, #172]	; (283e0 <sys_clock_announce+0x170>)
   28332:	23c2      	movs	r3, #194	; 0xc2
   28334:	4622      	mov	r2, r4
   28336:	492e      	ldr	r1, [pc, #184]	; (283f0 <sys_clock_announce+0x180>)
   28338:	482b      	ldr	r0, [pc, #172]	; (283e8 <sys_clock_announce+0x178>)
   2833a:	f001 fbd6 	bl	29aea <assert_print>
   2833e:	4925      	ldr	r1, [pc, #148]	; (283d4 <sys_clock_announce+0x164>)
   28340:	482c      	ldr	r0, [pc, #176]	; (283f4 <sys_clock_announce+0x184>)
   28342:	f001 fbd2 	bl	29aea <assert_print>
   28346:	21c2      	movs	r1, #194	; 0xc2
   28348:	4620      	mov	r0, r4
   2834a:	f001 fbc7 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2834e:	4c24      	ldr	r4, [pc, #144]	; (283e0 <sys_clock_announce+0x170>)
   28350:	2394      	movs	r3, #148	; 0x94
   28352:	4622      	mov	r2, r4
   28354:	4923      	ldr	r1, [pc, #140]	; (283e4 <sys_clock_announce+0x174>)
   28356:	4824      	ldr	r0, [pc, #144]	; (283e8 <sys_clock_announce+0x178>)
   28358:	f001 fbc7 	bl	29aea <assert_print>
   2835c:	491d      	ldr	r1, [pc, #116]	; (283d4 <sys_clock_announce+0x164>)
   2835e:	4823      	ldr	r0, [pc, #140]	; (283ec <sys_clock_announce+0x17c>)
   28360:	f001 fbc3 	bl	29aea <assert_print>
   28364:	2194      	movs	r1, #148	; 0x94
   28366:	4620      	mov	r0, r4
   28368:	f001 fbb8 	bl	29adc <assert_post_action>
	}

	if (first() != NULL) {
   2836c:	b144      	cbz	r4, 28380 <sys_clock_announce+0x110>
		first()->dticks -= announce_remaining;
   2836e:	6923      	ldr	r3, [r4, #16]
   28370:	6962      	ldr	r2, [r4, #20]
   28372:	4919      	ldr	r1, [pc, #100]	; (283d8 <sys_clock_announce+0x168>)
   28374:	6809      	ldr	r1, [r1, #0]
   28376:	1a5b      	subs	r3, r3, r1
   28378:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   2837c:	6123      	str	r3, [r4, #16]
   2837e:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   28380:	4a16      	ldr	r2, [pc, #88]	; (283dc <sys_clock_announce+0x16c>)
   28382:	4e15      	ldr	r6, [pc, #84]	; (283d8 <sys_clock_announce+0x168>)
   28384:	6830      	ldr	r0, [r6, #0]
   28386:	6813      	ldr	r3, [r2, #0]
   28388:	6851      	ldr	r1, [r2, #4]
   2838a:	181b      	adds	r3, r3, r0
   2838c:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   28390:	6013      	str	r3, [r2, #0]
   28392:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   28394:	2400      	movs	r4, #0
   28396:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   28398:	f7ff fd62 	bl	27e60 <next_timeout>
   2839c:	4621      	mov	r1, r4
   2839e:	f7f9 fa3b 	bl	21818 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   283a2:	480c      	ldr	r0, [pc, #48]	; (283d4 <sys_clock_announce+0x164>)
   283a4:	f7fc fd58 	bl	24e58 <z_spin_unlock_valid>
   283a8:	b120      	cbz	r0, 283b4 <sys_clock_announce+0x144>
	__asm__ volatile(
   283aa:	f385 8811 	msr	BASEPRI, r5
   283ae:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   283b2:	bd70      	pop	{r4, r5, r6, pc}
   283b4:	4c0a      	ldr	r4, [pc, #40]	; (283e0 <sys_clock_announce+0x170>)
   283b6:	23c2      	movs	r3, #194	; 0xc2
   283b8:	4622      	mov	r2, r4
   283ba:	490d      	ldr	r1, [pc, #52]	; (283f0 <sys_clock_announce+0x180>)
   283bc:	480a      	ldr	r0, [pc, #40]	; (283e8 <sys_clock_announce+0x178>)
   283be:	f001 fb94 	bl	29aea <assert_print>
   283c2:	4904      	ldr	r1, [pc, #16]	; (283d4 <sys_clock_announce+0x164>)
   283c4:	480b      	ldr	r0, [pc, #44]	; (283f4 <sys_clock_announce+0x184>)
   283c6:	f001 fb90 	bl	29aea <assert_print>
   283ca:	21c2      	movs	r1, #194	; 0xc2
   283cc:	4620      	mov	r0, r4
   283ce:	f001 fb85 	bl	29adc <assert_post_action>
   283d2:	bf00      	nop
   283d4:	20009d40 	.word	0x20009d40
   283d8:	20009d3c 	.word	0x20009d3c
   283dc:	20009770 	.word	0x20009770
   283e0:	000301b0 	.word	0x000301b0
   283e4:	00030210 	.word	0x00030210
   283e8:	0002fdac 	.word	0x0002fdac
   283ec:	00030228 	.word	0x00030228
   283f0:	000301e0 	.word	0x000301e0
   283f4:	000301f8 	.word	0x000301f8

000283f8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   283f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   283fa:	f04f 0320 	mov.w	r3, #32
   283fe:	f3ef 8611 	mrs	r6, BASEPRI
   28402:	f383 8812 	msr	BASEPRI_MAX, r3
   28406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2840a:	481f      	ldr	r0, [pc, #124]	; (28488 <sys_clock_tick_get+0x90>)
   2840c:	f7fc fd14 	bl	24e38 <z_spin_lock_valid>
   28410:	b1c0      	cbz	r0, 28444 <sys_clock_tick_get+0x4c>
   28412:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
   28414:	481c      	ldr	r0, [pc, #112]	; (28488 <sys_clock_tick_get+0x90>)
   28416:	f7fc fd2f 	bl	24e78 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   2841a:	2400      	movs	r4, #0
   2841c:	4625      	mov	r5, r4

	LOCKED(&timeout_lock) {
   2841e:	bb7f      	cbnz	r7, 28480 <sys_clock_tick_get+0x88>
		t = curr_tick + elapsed();
   28420:	f7ff fd12 	bl	27e48 <elapsed>
   28424:	4a19      	ldr	r2, [pc, #100]	; (2848c <sys_clock_tick_get+0x94>)
   28426:	6814      	ldr	r4, [r2, #0]
   28428:	6855      	ldr	r5, [r2, #4]
   2842a:	1904      	adds	r4, r0, r4
   2842c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28430:	4815      	ldr	r0, [pc, #84]	; (28488 <sys_clock_tick_get+0x90>)
   28432:	f7fc fd11 	bl	24e58 <z_spin_unlock_valid>
   28436:	b1a0      	cbz	r0, 28462 <sys_clock_tick_get+0x6a>
	__asm__ volatile(
   28438:	f386 8811 	msr	BASEPRI, r6
   2843c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28440:	2701      	movs	r7, #1
   28442:	e7ec      	b.n	2841e <sys_clock_tick_get+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28444:	4c12      	ldr	r4, [pc, #72]	; (28490 <sys_clock_tick_get+0x98>)
   28446:	2394      	movs	r3, #148	; 0x94
   28448:	4622      	mov	r2, r4
   2844a:	4912      	ldr	r1, [pc, #72]	; (28494 <sys_clock_tick_get+0x9c>)
   2844c:	4812      	ldr	r0, [pc, #72]	; (28498 <sys_clock_tick_get+0xa0>)
   2844e:	f001 fb4c 	bl	29aea <assert_print>
   28452:	490d      	ldr	r1, [pc, #52]	; (28488 <sys_clock_tick_get+0x90>)
   28454:	4811      	ldr	r0, [pc, #68]	; (2849c <sys_clock_tick_get+0xa4>)
   28456:	f001 fb48 	bl	29aea <assert_print>
   2845a:	2194      	movs	r1, #148	; 0x94
   2845c:	4620      	mov	r0, r4
   2845e:	f001 fb3d 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28462:	4c0b      	ldr	r4, [pc, #44]	; (28490 <sys_clock_tick_get+0x98>)
   28464:	23c2      	movs	r3, #194	; 0xc2
   28466:	4622      	mov	r2, r4
   28468:	490d      	ldr	r1, [pc, #52]	; (284a0 <sys_clock_tick_get+0xa8>)
   2846a:	480b      	ldr	r0, [pc, #44]	; (28498 <sys_clock_tick_get+0xa0>)
   2846c:	f001 fb3d 	bl	29aea <assert_print>
   28470:	4905      	ldr	r1, [pc, #20]	; (28488 <sys_clock_tick_get+0x90>)
   28472:	480c      	ldr	r0, [pc, #48]	; (284a4 <sys_clock_tick_get+0xac>)
   28474:	f001 fb39 	bl	29aea <assert_print>
   28478:	21c2      	movs	r1, #194	; 0xc2
   2847a:	4620      	mov	r0, r4
   2847c:	f001 fb2e 	bl	29adc <assert_post_action>
	}
	return t;
}
   28480:	4620      	mov	r0, r4
   28482:	4629      	mov	r1, r5
   28484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28486:	bf00      	nop
   28488:	20009d40 	.word	0x20009d40
   2848c:	20009770 	.word	0x20009770
   28490:	000301b0 	.word	0x000301b0
   28494:	00030210 	.word	0x00030210
   28498:	0002fdac 	.word	0x0002fdac
   2849c:	00030228 	.word	0x00030228
   284a0:	000301e0 	.word	0x000301e0
   284a4:	000301f8 	.word	0x000301f8

000284a8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   284a8:	b570      	push	{r4, r5, r6, lr}
   284aa:	4604      	mov	r4, r0
	__asm__ volatile(
   284ac:	f04f 0320 	mov.w	r3, #32
   284b0:	f3ef 8611 	mrs	r6, BASEPRI
   284b4:	f383 8812 	msr	BASEPRI_MAX, r3
   284b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   284bc:	4865      	ldr	r0, [pc, #404]	; (28654 <z_timer_expiration_handler+0x1ac>)
   284be:	f7fc fcbb 	bl	24e38 <z_spin_lock_valid>
   284c2:	2800      	cmp	r0, #0
   284c4:	d049      	beq.n	2855a <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
   284c6:	4863      	ldr	r0, [pc, #396]	; (28654 <z_timer_expiration_handler+0x1ac>)
   284c8:	f7fc fcd6 	bl	24e78 <z_spin_lock_set_owner>
	return k;
   284cc:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   284ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   284d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   284d2:	ea52 0103 	orrs.w	r1, r2, r3
   284d6:	d005      	beq.n	284e4 <z_timer_expiration_handler+0x3c>
   284d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   284dc:	bf08      	it	eq
   284de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   284e2:	d149      	bne.n	28578 <z_timer_expiration_handler+0xd0>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   284e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   284e6:	3301      	adds	r3, #1
   284e8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   284ea:	6a23      	ldr	r3, [r4, #32]
   284ec:	b1db      	cbz	r3, 28526 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   284ee:	4859      	ldr	r0, [pc, #356]	; (28654 <z_timer_expiration_handler+0x1ac>)
   284f0:	f7fc fcb2 	bl	24e58 <z_spin_unlock_valid>
   284f4:	2800      	cmp	r0, #0
   284f6:	d068      	beq.n	285ca <z_timer_expiration_handler+0x122>
	__asm__ volatile(
   284f8:	f386 8811 	msr	BASEPRI, r6
   284fc:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   28500:	6a23      	ldr	r3, [r4, #32]
   28502:	4620      	mov	r0, r4
   28504:	4798      	blx	r3
	__asm__ volatile(
   28506:	f04f 0320 	mov.w	r3, #32
   2850a:	f3ef 8511 	mrs	r5, BASEPRI
   2850e:	f383 8812 	msr	BASEPRI_MAX, r3
   28512:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28516:	484f      	ldr	r0, [pc, #316]	; (28654 <z_timer_expiration_handler+0x1ac>)
   28518:	f7fc fc8e 	bl	24e38 <z_spin_lock_valid>
   2851c:	2800      	cmp	r0, #0
   2851e:	d063      	beq.n	285e8 <z_timer_expiration_handler+0x140>
	z_spin_lock_set_owner(l);
   28520:	484c      	ldr	r0, [pc, #304]	; (28654 <z_timer_expiration_handler+0x1ac>)
   28522:	f7fc fca9 	bl	24e78 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   28526:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   2852a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2852c:	42a3      	cmp	r3, r4
   2852e:	d06a      	beq.n	28606 <z_timer_expiration_handler+0x15e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   28530:	2c00      	cmp	r4, #0
   28532:	d068      	beq.n	28606 <z_timer_expiration_handler+0x15e>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   28534:	4620      	mov	r0, r4
   28536:	f7fe fa11 	bl	2695c <z_unpend_thread_no_timeout>
   2853a:	2300      	movs	r3, #0
   2853c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28540:	4844      	ldr	r0, [pc, #272]	; (28654 <z_timer_expiration_handler+0x1ac>)
   28542:	f7fc fc89 	bl	24e58 <z_spin_unlock_valid>
   28546:	2800      	cmp	r0, #0
   28548:	d075      	beq.n	28636 <z_timer_expiration_handler+0x18e>
	__asm__ volatile(
   2854a:	f385 8811 	msr	BASEPRI, r5
   2854e:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   28552:	4620      	mov	r0, r4
   28554:	f7fe fcdc 	bl	26f10 <z_ready_thread>
   28558:	e05d      	b.n	28616 <z_timer_expiration_handler+0x16e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2855a:	4c3f      	ldr	r4, [pc, #252]	; (28658 <z_timer_expiration_handler+0x1b0>)
   2855c:	2394      	movs	r3, #148	; 0x94
   2855e:	4622      	mov	r2, r4
   28560:	493e      	ldr	r1, [pc, #248]	; (2865c <z_timer_expiration_handler+0x1b4>)
   28562:	483f      	ldr	r0, [pc, #252]	; (28660 <z_timer_expiration_handler+0x1b8>)
   28564:	f001 fac1 	bl	29aea <assert_print>
   28568:	493a      	ldr	r1, [pc, #232]	; (28654 <z_timer_expiration_handler+0x1ac>)
   2856a:	483e      	ldr	r0, [pc, #248]	; (28664 <z_timer_expiration_handler+0x1bc>)
   2856c:	f001 fabd 	bl	29aea <assert_print>
   28570:	2194      	movs	r1, #148	; 0x94
   28572:	4620      	mov	r0, r4
   28574:	f001 fab2 	bl	29adc <assert_post_action>
	return z_impl_k_uptime_ticks();
   28578:	f006 fe13 	bl	2f1a2 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   2857c:	3001      	adds	r0, #1
   2857e:	f141 0100 	adc.w	r1, r1, #0
   28582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28584:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28586:	18c0      	adds	r0, r0, r3
   28588:	eb41 0102 	adc.w	r1, r1, r2
   2858c:	2801      	cmp	r0, #1
   2858e:	f171 0100 	sbcs.w	r1, r1, #0
   28592:	da08      	bge.n	285a6 <z_timer_expiration_handler+0xfe>
   28594:	f06f 0201 	mvn.w	r2, #1
   28598:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2859c:	4932      	ldr	r1, [pc, #200]	; (28668 <z_timer_expiration_handler+0x1c0>)
   2859e:	4620      	mov	r0, r4
   285a0:	f7ff fc84 	bl	27eac <z_add_timeout>
   285a4:	e79e      	b.n	284e4 <z_timer_expiration_handler+0x3c>
   285a6:	f006 fdfc 	bl	2f1a2 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   285aa:	3001      	adds	r0, #1
   285ac:	f141 0300 	adc.w	r3, r1, #0
   285b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   285b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   285b4:	1880      	adds	r0, r0, r2
   285b6:	eb43 0301 	adc.w	r3, r3, r1
   285ba:	f06f 0201 	mvn.w	r2, #1
   285be:	1a12      	subs	r2, r2, r0
   285c0:	f04f 31ff 	mov.w	r1, #4294967295
   285c4:	eb61 0303 	sbc.w	r3, r1, r3
   285c8:	e7e8      	b.n	2859c <z_timer_expiration_handler+0xf4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   285ca:	4c23      	ldr	r4, [pc, #140]	; (28658 <z_timer_expiration_handler+0x1b0>)
   285cc:	23c2      	movs	r3, #194	; 0xc2
   285ce:	4622      	mov	r2, r4
   285d0:	4926      	ldr	r1, [pc, #152]	; (2866c <z_timer_expiration_handler+0x1c4>)
   285d2:	4823      	ldr	r0, [pc, #140]	; (28660 <z_timer_expiration_handler+0x1b8>)
   285d4:	f001 fa89 	bl	29aea <assert_print>
   285d8:	491e      	ldr	r1, [pc, #120]	; (28654 <z_timer_expiration_handler+0x1ac>)
   285da:	4825      	ldr	r0, [pc, #148]	; (28670 <z_timer_expiration_handler+0x1c8>)
   285dc:	f001 fa85 	bl	29aea <assert_print>
   285e0:	21c2      	movs	r1, #194	; 0xc2
   285e2:	4620      	mov	r0, r4
   285e4:	f001 fa7a 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   285e8:	4c1b      	ldr	r4, [pc, #108]	; (28658 <z_timer_expiration_handler+0x1b0>)
   285ea:	2394      	movs	r3, #148	; 0x94
   285ec:	4622      	mov	r2, r4
   285ee:	491b      	ldr	r1, [pc, #108]	; (2865c <z_timer_expiration_handler+0x1b4>)
   285f0:	481b      	ldr	r0, [pc, #108]	; (28660 <z_timer_expiration_handler+0x1b8>)
   285f2:	f001 fa7a 	bl	29aea <assert_print>
   285f6:	4917      	ldr	r1, [pc, #92]	; (28654 <z_timer_expiration_handler+0x1ac>)
   285f8:	481a      	ldr	r0, [pc, #104]	; (28664 <z_timer_expiration_handler+0x1bc>)
   285fa:	f001 fa76 	bl	29aea <assert_print>
   285fe:	2194      	movs	r1, #148	; 0x94
   28600:	4620      	mov	r0, r4
   28602:	f001 fa6b 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28606:	4813      	ldr	r0, [pc, #76]	; (28654 <z_timer_expiration_handler+0x1ac>)
   28608:	f7fc fc26 	bl	24e58 <z_spin_unlock_valid>
   2860c:	b120      	cbz	r0, 28618 <z_timer_expiration_handler+0x170>
   2860e:	f385 8811 	msr	BASEPRI, r5
   28612:	f3bf 8f6f 	isb	sy
}
   28616:	bd70      	pop	{r4, r5, r6, pc}
   28618:	4c0f      	ldr	r4, [pc, #60]	; (28658 <z_timer_expiration_handler+0x1b0>)
   2861a:	23c2      	movs	r3, #194	; 0xc2
   2861c:	4622      	mov	r2, r4
   2861e:	4913      	ldr	r1, [pc, #76]	; (2866c <z_timer_expiration_handler+0x1c4>)
   28620:	480f      	ldr	r0, [pc, #60]	; (28660 <z_timer_expiration_handler+0x1b8>)
   28622:	f001 fa62 	bl	29aea <assert_print>
   28626:	490b      	ldr	r1, [pc, #44]	; (28654 <z_timer_expiration_handler+0x1ac>)
   28628:	4811      	ldr	r0, [pc, #68]	; (28670 <z_timer_expiration_handler+0x1c8>)
   2862a:	f001 fa5e 	bl	29aea <assert_print>
   2862e:	21c2      	movs	r1, #194	; 0xc2
   28630:	4620      	mov	r0, r4
   28632:	f001 fa53 	bl	29adc <assert_post_action>
   28636:	4c08      	ldr	r4, [pc, #32]	; (28658 <z_timer_expiration_handler+0x1b0>)
   28638:	23c2      	movs	r3, #194	; 0xc2
   2863a:	4622      	mov	r2, r4
   2863c:	490b      	ldr	r1, [pc, #44]	; (2866c <z_timer_expiration_handler+0x1c4>)
   2863e:	4808      	ldr	r0, [pc, #32]	; (28660 <z_timer_expiration_handler+0x1b8>)
   28640:	f001 fa53 	bl	29aea <assert_print>
   28644:	4903      	ldr	r1, [pc, #12]	; (28654 <z_timer_expiration_handler+0x1ac>)
   28646:	480a      	ldr	r0, [pc, #40]	; (28670 <z_timer_expiration_handler+0x1c8>)
   28648:	f001 fa4f 	bl	29aea <assert_print>
   2864c:	21c2      	movs	r1, #194	; 0xc2
   2864e:	4620      	mov	r0, r4
   28650:	f001 fa44 	bl	29adc <assert_post_action>
   28654:	20009d44 	.word	0x20009d44
   28658:	000301b0 	.word	0x000301b0
   2865c:	00030210 	.word	0x00030210
   28660:	0002fdac 	.word	0x0002fdac
   28664:	00030228 	.word	0x00030228
   28668:	000284a9 	.word	0x000284a9
   2866c:	000301e0 	.word	0x000301e0
   28670:	000301f8 	.word	0x000301f8

00028674 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   28674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28678:	461e      	mov	r6, r3
   2867a:	9f06      	ldr	r7, [sp, #24]
   2867c:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   28680:	f1b3 3fff 	cmp.w	r3, #4294967295
   28684:	bf08      	it	eq
   28686:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2868a:	d02f      	beq.n	286ec <z_impl_k_timer_start+0x78>
   2868c:	4605      	mov	r5, r0
   2868e:	4614      	mov	r4, r2
   28690:	4613      	mov	r3, r2
   28692:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   28694:	4640      	mov	r0, r8
   28696:	f1b8 3fff 	cmp.w	r8, #4294967295
   2869a:	bf08      	it	eq
   2869c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   286a0:	d00d      	beq.n	286be <z_impl_k_timer_start+0x4a>
   286a2:	ea57 0c08 	orrs.w	ip, r7, r8
   286a6:	d00a      	beq.n	286be <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   286a8:	f06f 0c01 	mvn.w	ip, #1
   286ac:	ebbc 0c07 	subs.w	ip, ip, r7
   286b0:	f04f 3cff 	mov.w	ip, #4294967295
   286b4:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   286b8:	f1bc 0f00 	cmp.w	ip, #0
   286bc:	db18      	blt.n	286f0 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   286be:	f06f 0201 	mvn.w	r2, #1
   286c2:	1ad2      	subs	r2, r2, r3
   286c4:	f04f 32ff 	mov.w	r2, #4294967295
   286c8:	eb62 0201 	sbc.w	r2, r2, r1
   286cc:	2a00      	cmp	r2, #0
   286ce:	db1a      	blt.n	28706 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   286d0:	4628      	mov	r0, r5
   286d2:	f7ff fcc1 	bl	28058 <z_abort_timeout>
	timer->period = period;
   286d6:	62af      	str	r7, [r5, #40]	; 0x28
   286d8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   286dc:	2300      	movs	r3, #0
   286de:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   286e0:	4622      	mov	r2, r4
   286e2:	4633      	mov	r3, r6
   286e4:	490e      	ldr	r1, [pc, #56]	; (28720 <z_impl_k_timer_start+0xac>)
   286e6:	4628      	mov	r0, r5
   286e8:	f7ff fbe0 	bl	27eac <z_add_timeout>
		     duration);
}
   286ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   286f0:	2f02      	cmp	r7, #2
   286f2:	f170 0000 	sbcs.w	r0, r0, #0
   286f6:	da02      	bge.n	286fe <z_impl_k_timer_start+0x8a>
   286f8:	2702      	movs	r7, #2
   286fa:	f04f 0800 	mov.w	r8, #0
   286fe:	3f01      	subs	r7, #1
   28700:	f148 38ff 	adc.w	r8, r8, #4294967295
   28704:	e7db      	b.n	286be <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   28706:	461c      	mov	r4, r3
   28708:	460e      	mov	r6, r1
   2870a:	2b01      	cmp	r3, #1
   2870c:	f171 0100 	sbcs.w	r1, r1, #0
   28710:	da01      	bge.n	28716 <z_impl_k_timer_start+0xa2>
   28712:	2401      	movs	r4, #1
   28714:	2600      	movs	r6, #0
   28716:	3c01      	subs	r4, #1
   28718:	f146 36ff 	adc.w	r6, r6, #4294967295
   2871c:	e7d8      	b.n	286d0 <z_impl_k_timer_start+0x5c>
   2871e:	bf00      	nop
   28720:	000284a9 	.word	0x000284a9

00028724 <is_condition_met>:
	SYS_PORT_TRACING_FUNC(k_poll_api, event_init, event);
}

/* must be called with interrupts locked */
static inline bool is_condition_met(struct k_poll_event *event, uint32_t *state)
{
   28724:	b538      	push	{r3, r4, r5, lr}
   28726:	4604      	mov	r4, r0
	switch (event->type) {
   28728:	7b43      	ldrb	r3, [r0, #13]
   2872a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2872e:	2b08      	cmp	r3, #8
   28730:	d827      	bhi.n	28782 <is_condition_met+0x5e>
   28732:	e8df f003 	tbb	[pc, r3]
   28736:	1537      	.short	0x1537
   28738:	260e2605 	.word	0x260e2605
   2873c:	2626      	.short	0x2626
   2873e:	1d          	.byte	0x1d
   2873f:	00          	.byte	0x00
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0U) {
   28740:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   28742:	689b      	ldr	r3, [r3, #8]
   28744:	b90b      	cbnz	r3, 2874a <is_condition_met+0x26>
	default:
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
		break;
	}

	return false;
   28746:	2000      	movs	r0, #0
   28748:	e02d      	b.n	287a6 <is_condition_met+0x82>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2874a:	2302      	movs	r3, #2
   2874c:	600b      	str	r3, [r1, #0]
			return true;
   2874e:	2001      	movs	r0, #1
   28750:	e029      	b.n	287a6 <is_condition_met+0x82>
		if (!k_queue_is_empty(event->queue)) {
   28752:	6903      	ldr	r3, [r0, #16]
	return list->head;
   28754:	681b      	ldr	r3, [r3, #0]
   28756:	b33b      	cbz	r3, 287a8 <is_condition_met+0x84>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   28758:	2304      	movs	r3, #4
   2875a:	600b      	str	r3, [r1, #0]
			return true;
   2875c:	2001      	movs	r0, #1
   2875e:	e022      	b.n	287a6 <is_condition_met+0x82>
		if (event->signal->signaled != 0U) {
   28760:	6903      	ldr	r3, [r0, #16]
   28762:	689b      	ldr	r3, [r3, #8]
   28764:	b90b      	cbnz	r3, 2876a <is_condition_met+0x46>
	return false;
   28766:	2000      	movs	r0, #0
   28768:	e01d      	b.n	287a6 <is_condition_met+0x82>
			*state = K_POLL_STATE_SIGNALED;
   2876a:	2001      	movs	r0, #1
   2876c:	6008      	str	r0, [r1, #0]
			return true;
   2876e:	e01a      	b.n	287a6 <is_condition_met+0x82>
		if (event->msgq->used_msgs > 0) {
   28770:	6903      	ldr	r3, [r0, #16]
   28772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28774:	b90b      	cbnz	r3, 2877a <is_condition_met+0x56>
	return false;
   28776:	2000      	movs	r0, #0
   28778:	e015      	b.n	287a6 <is_condition_met+0x82>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2877a:	2310      	movs	r3, #16
   2877c:	600b      	str	r3, [r1, #0]
			return true;
   2877e:	2001      	movs	r0, #1
   28780:	e011      	b.n	287a6 <is_condition_met+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   28782:	4d0a      	ldr	r5, [pc, #40]	; (287ac <is_condition_met+0x88>)
   28784:	2363      	movs	r3, #99	; 0x63
   28786:	462a      	mov	r2, r5
   28788:	4909      	ldr	r1, [pc, #36]	; (287b0 <is_condition_met+0x8c>)
   2878a:	480a      	ldr	r0, [pc, #40]	; (287b4 <is_condition_met+0x90>)
   2878c:	f001 f9ad 	bl	29aea <assert_print>
   28790:	7b61      	ldrb	r1, [r4, #13]
   28792:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   28796:	4808      	ldr	r0, [pc, #32]	; (287b8 <is_condition_met+0x94>)
   28798:	f001 f9a7 	bl	29aea <assert_print>
   2879c:	2163      	movs	r1, #99	; 0x63
   2879e:	4628      	mov	r0, r5
   287a0:	f001 f99c 	bl	29adc <assert_post_action>
	switch (event->type) {
   287a4:	2000      	movs	r0, #0
}
   287a6:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   287a8:	2000      	movs	r0, #0
   287aa:	e7fc      	b.n	287a6 <is_condition_met+0x82>
   287ac:	00034780 	.word	0x00034780
   287b0:	000337ec 	.word	0x000337ec
   287b4:	0002fdac 	.word	0x0002fdac
   287b8:	000347a4 	.word	0x000347a4

000287bc <clear_event_registration>:
	event->poller = poller;
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
   287bc:	b510      	push	{r4, lr}
	bool remove_event = false;

	event->poller = NULL;
   287be:	2300      	movs	r3, #0
   287c0:	6083      	str	r3, [r0, #8]

	switch (event->type) {
   287c2:	7b43      	ldrb	r3, [r0, #13]
   287c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   287c8:	2b08      	cmp	r3, #8
   287ca:	d852      	bhi.n	28872 <clear_event_registration+0xb6>
   287cc:	e8df f003 	tbb	[pc, r3]
   287d0:	51052f0f 	.word	0x51052f0f
   287d4:	5151511e 	.word	0x5151511e
   287d8:	40          	.byte	0x40
   287d9:	00          	.byte	0x00
	case K_POLL_TYPE_SEM_AVAILABLE:
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   287da:	6903      	ldr	r3, [r0, #16]
   287dc:	b143      	cbz	r3, 287f0 <clear_event_registration+0x34>
	return node->next != NULL;
   287de:	6803      	ldr	r3, [r0, #0]
		break;
	default:
		__ASSERT(false, "invalid event type\n");
		break;
	}
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   287e0:	b12b      	cbz	r3, 287ee <clear_event_registration+0x32>
	sys_dnode_t *const prev = node->prev;
   287e2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   287e4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   287e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   287e8:	2300      	movs	r3, #0
   287ea:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   287ec:	6043      	str	r3, [r0, #4]
		sys_dlist_remove(&event->_node);
	}
}
   287ee:	bd10      	pop	{r4, pc}
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   287f0:	4c27      	ldr	r4, [pc, #156]	; (28890 <clear_event_registration+0xd4>)
   287f2:	23b6      	movs	r3, #182	; 0xb6
   287f4:	4622      	mov	r2, r4
   287f6:	4927      	ldr	r1, [pc, #156]	; (28894 <clear_event_registration+0xd8>)
   287f8:	4827      	ldr	r0, [pc, #156]	; (28898 <clear_event_registration+0xdc>)
   287fa:	f001 f976 	bl	29aea <assert_print>
   287fe:	4827      	ldr	r0, [pc, #156]	; (2889c <clear_event_registration+0xe0>)
   28800:	f001 f973 	bl	29aea <assert_print>
   28804:	21b6      	movs	r1, #182	; 0xb6
   28806:	4620      	mov	r0, r4
   28808:	f001 f968 	bl	29adc <assert_post_action>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2880c:	6903      	ldr	r3, [r0, #16]
   2880e:	2b00      	cmp	r3, #0
   28810:	d1e5      	bne.n	287de <clear_event_registration+0x22>
   28812:	4c1f      	ldr	r4, [pc, #124]	; (28890 <clear_event_registration+0xd4>)
   28814:	23ba      	movs	r3, #186	; 0xba
   28816:	4622      	mov	r2, r4
   28818:	4921      	ldr	r1, [pc, #132]	; (288a0 <clear_event_registration+0xe4>)
   2881a:	481f      	ldr	r0, [pc, #124]	; (28898 <clear_event_registration+0xdc>)
   2881c:	f001 f965 	bl	29aea <assert_print>
   28820:	4820      	ldr	r0, [pc, #128]	; (288a4 <clear_event_registration+0xe8>)
   28822:	f001 f962 	bl	29aea <assert_print>
   28826:	21ba      	movs	r1, #186	; 0xba
   28828:	4620      	mov	r0, r4
   2882a:	f001 f957 	bl	29adc <assert_post_action>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2882e:	6903      	ldr	r3, [r0, #16]
   28830:	2b00      	cmp	r3, #0
   28832:	d1d4      	bne.n	287de <clear_event_registration+0x22>
   28834:	4c16      	ldr	r4, [pc, #88]	; (28890 <clear_event_registration+0xd4>)
   28836:	23be      	movs	r3, #190	; 0xbe
   28838:	4622      	mov	r2, r4
   2883a:	491b      	ldr	r1, [pc, #108]	; (288a8 <clear_event_registration+0xec>)
   2883c:	4816      	ldr	r0, [pc, #88]	; (28898 <clear_event_registration+0xdc>)
   2883e:	f001 f954 	bl	29aea <assert_print>
   28842:	481a      	ldr	r0, [pc, #104]	; (288ac <clear_event_registration+0xf0>)
   28844:	f001 f951 	bl	29aea <assert_print>
   28848:	21be      	movs	r1, #190	; 0xbe
   2884a:	4620      	mov	r0, r4
   2884c:	f001 f946 	bl	29adc <assert_post_action>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28850:	6903      	ldr	r3, [r0, #16]
   28852:	2b00      	cmp	r3, #0
   28854:	d1c3      	bne.n	287de <clear_event_registration+0x22>
   28856:	4c0e      	ldr	r4, [pc, #56]	; (28890 <clear_event_registration+0xd4>)
   28858:	23c2      	movs	r3, #194	; 0xc2
   2885a:	4622      	mov	r2, r4
   2885c:	4914      	ldr	r1, [pc, #80]	; (288b0 <clear_event_registration+0xf4>)
   2885e:	480e      	ldr	r0, [pc, #56]	; (28898 <clear_event_registration+0xdc>)
   28860:	f001 f943 	bl	29aea <assert_print>
   28864:	4813      	ldr	r0, [pc, #76]	; (288b4 <clear_event_registration+0xf8>)
   28866:	f001 f940 	bl	29aea <assert_print>
   2886a:	21c2      	movs	r1, #194	; 0xc2
   2886c:	4620      	mov	r0, r4
   2886e:	f001 f935 	bl	29adc <assert_post_action>
		__ASSERT(false, "invalid event type\n");
   28872:	4c07      	ldr	r4, [pc, #28]	; (28890 <clear_event_registration+0xd4>)
   28874:	23cf      	movs	r3, #207	; 0xcf
   28876:	4622      	mov	r2, r4
   28878:	490f      	ldr	r1, [pc, #60]	; (288b8 <clear_event_registration+0xfc>)
   2887a:	4807      	ldr	r0, [pc, #28]	; (28898 <clear_event_registration+0xdc>)
   2887c:	f001 f935 	bl	29aea <assert_print>
   28880:	480e      	ldr	r0, [pc, #56]	; (288bc <clear_event_registration+0x100>)
   28882:	f001 f932 	bl	29aea <assert_print>
   28886:	21cf      	movs	r1, #207	; 0xcf
   28888:	4620      	mov	r0, r4
   2888a:	f001 f927 	bl	29adc <assert_post_action>
   2888e:	bf00      	nop
   28890:	00034780 	.word	0x00034780
   28894:	000347c4 	.word	0x000347c4
   28898:	0002fdac 	.word	0x0002fdac
   2889c:	000347e0 	.word	0x000347e0
   288a0:	000347f8 	.word	0x000347f8
   288a4:	00034814 	.word	0x00034814
   288a8:	00034828 	.word	0x00034828
   288ac:	00034848 	.word	0x00034848
   288b0:	00034860 	.word	0x00034860
   288b4:	0003487c 	.word	0x0003487c
   288b8:	000337ec 	.word	0x000337ec
   288bc:	00034898 	.word	0x00034898

000288c0 <register_event>:
{
   288c0:	b538      	push	{r3, r4, r5, lr}
   288c2:	4604      	mov	r4, r0
   288c4:	460d      	mov	r5, r1
	switch (event->type) {
   288c6:	7b43      	ldrb	r3, [r0, #13]
   288c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   288cc:	2b08      	cmp	r3, #8
   288ce:	d85e      	bhi.n	2898e <register_event+0xce>
   288d0:	e8df f003 	tbb	[pc, r3]
   288d4:	5d05320c 	.word	0x5d05320c
   288d8:	5d5d5d1c 	.word	0x5d5d5d1c
   288dc:	47          	.byte	0x47
   288dd:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   288de:	6900      	ldr	r0, [r0, #16]
   288e0:	b130      	cbz	r0, 288f0 <register_event+0x30>
		add_event(&event->sem->poll_events, event, poller);
   288e2:	460a      	mov	r2, r1
   288e4:	4621      	mov	r1, r4
   288e6:	3010      	adds	r0, #16
   288e8:	f006 fcc1 	bl	2f26e <add_event>
	event->poller = poller;
   288ec:	60a5      	str	r5, [r4, #8]
}
   288ee:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   288f0:	4c2e      	ldr	r4, [pc, #184]	; (289ac <register_event+0xec>)
   288f2:	238d      	movs	r3, #141	; 0x8d
   288f4:	4622      	mov	r2, r4
   288f6:	492e      	ldr	r1, [pc, #184]	; (289b0 <register_event+0xf0>)
   288f8:	482e      	ldr	r0, [pc, #184]	; (289b4 <register_event+0xf4>)
   288fa:	f001 f8f6 	bl	29aea <assert_print>
   288fe:	482e      	ldr	r0, [pc, #184]	; (289b8 <register_event+0xf8>)
   28900:	f001 f8f3 	bl	29aea <assert_print>
   28904:	218d      	movs	r1, #141	; 0x8d
   28906:	4620      	mov	r0, r4
   28908:	f001 f8e8 	bl	29adc <assert_post_action>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2890c:	6900      	ldr	r0, [r0, #16]
   2890e:	b128      	cbz	r0, 2891c <register_event+0x5c>
		add_event(&event->queue->poll_events, event, poller);
   28910:	460a      	mov	r2, r1
   28912:	4621      	mov	r1, r4
   28914:	3014      	adds	r0, #20
   28916:	f006 fcaa 	bl	2f26e <add_event>
		break;
   2891a:	e7e7      	b.n	288ec <register_event+0x2c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2891c:	4c23      	ldr	r4, [pc, #140]	; (289ac <register_event+0xec>)
   2891e:	2391      	movs	r3, #145	; 0x91
   28920:	4622      	mov	r2, r4
   28922:	4926      	ldr	r1, [pc, #152]	; (289bc <register_event+0xfc>)
   28924:	4823      	ldr	r0, [pc, #140]	; (289b4 <register_event+0xf4>)
   28926:	f001 f8e0 	bl	29aea <assert_print>
   2892a:	4825      	ldr	r0, [pc, #148]	; (289c0 <register_event+0x100>)
   2892c:	f001 f8dd 	bl	29aea <assert_print>
   28930:	2191      	movs	r1, #145	; 0x91
   28932:	4620      	mov	r0, r4
   28934:	f001 f8d2 	bl	29adc <assert_post_action>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   28938:	6900      	ldr	r0, [r0, #16]
   2893a:	b120      	cbz	r0, 28946 <register_event+0x86>
		add_event(&event->signal->poll_events, event, poller);
   2893c:	460a      	mov	r2, r1
   2893e:	4621      	mov	r1, r4
   28940:	f006 fc95 	bl	2f26e <add_event>
		break;
   28944:	e7d2      	b.n	288ec <register_event+0x2c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   28946:	4c19      	ldr	r4, [pc, #100]	; (289ac <register_event+0xec>)
   28948:	2395      	movs	r3, #149	; 0x95
   2894a:	4622      	mov	r2, r4
   2894c:	491d      	ldr	r1, [pc, #116]	; (289c4 <register_event+0x104>)
   2894e:	4819      	ldr	r0, [pc, #100]	; (289b4 <register_event+0xf4>)
   28950:	f001 f8cb 	bl	29aea <assert_print>
   28954:	481c      	ldr	r0, [pc, #112]	; (289c8 <register_event+0x108>)
   28956:	f001 f8c8 	bl	29aea <assert_print>
   2895a:	2195      	movs	r1, #149	; 0x95
   2895c:	4620      	mov	r0, r4
   2895e:	f001 f8bd 	bl	29adc <assert_post_action>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28962:	6900      	ldr	r0, [r0, #16]
   28964:	b128      	cbz	r0, 28972 <register_event+0xb2>
		add_event(&event->msgq->poll_events, event, poller);
   28966:	460a      	mov	r2, r1
   28968:	4621      	mov	r1, r4
   2896a:	3028      	adds	r0, #40	; 0x28
   2896c:	f006 fc7f 	bl	2f26e <add_event>
		break;
   28970:	e7bc      	b.n	288ec <register_event+0x2c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28972:	4c0e      	ldr	r4, [pc, #56]	; (289ac <register_event+0xec>)
   28974:	2399      	movs	r3, #153	; 0x99
   28976:	4622      	mov	r2, r4
   28978:	4914      	ldr	r1, [pc, #80]	; (289cc <register_event+0x10c>)
   2897a:	480e      	ldr	r0, [pc, #56]	; (289b4 <register_event+0xf4>)
   2897c:	f001 f8b5 	bl	29aea <assert_print>
   28980:	4813      	ldr	r0, [pc, #76]	; (289d0 <register_event+0x110>)
   28982:	f001 f8b2 	bl	29aea <assert_print>
   28986:	2199      	movs	r1, #153	; 0x99
   28988:	4620      	mov	r0, r4
   2898a:	f001 f8a7 	bl	29adc <assert_post_action>
		__ASSERT(false, "invalid event type\n");
   2898e:	4c07      	ldr	r4, [pc, #28]	; (289ac <register_event+0xec>)
   28990:	23a6      	movs	r3, #166	; 0xa6
   28992:	4622      	mov	r2, r4
   28994:	490f      	ldr	r1, [pc, #60]	; (289d4 <register_event+0x114>)
   28996:	4807      	ldr	r0, [pc, #28]	; (289b4 <register_event+0xf4>)
   28998:	f001 f8a7 	bl	29aea <assert_print>
   2899c:	480e      	ldr	r0, [pc, #56]	; (289d8 <register_event+0x118>)
   2899e:	f001 f8a4 	bl	29aea <assert_print>
   289a2:	21a6      	movs	r1, #166	; 0xa6
   289a4:	4620      	mov	r0, r4
   289a6:	f001 f899 	bl	29adc <assert_post_action>
   289aa:	bf00      	nop
   289ac:	00034780 	.word	0x00034780
   289b0:	000347c4 	.word	0x000347c4
   289b4:	0002fdac 	.word	0x0002fdac
   289b8:	000347e0 	.word	0x000347e0
   289bc:	000347f8 	.word	0x000347f8
   289c0:	00034814 	.word	0x00034814
   289c4:	00034828 	.word	0x00034828
   289c8:	00034848 	.word	0x00034848
   289cc:	00034860 	.word	0x00034860
   289d0:	0003487c 	.word	0x0003487c
   289d4:	000337ec 	.word	0x000337ec
   289d8:	00034898 	.word	0x00034898

000289dc <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   289dc:	b570      	push	{r4, r5, r6, lr}
   289de:	4606      	mov	r6, r0
   289e0:	4614      	mov	r4, r2
	while (num_events--) {
   289e2:	1e4d      	subs	r5, r1, #1
   289e4:	2900      	cmp	r1, #0
   289e6:	d03c      	beq.n	28a62 <clear_event_registrations+0x86>
		clear_event_registration(&events[num_events]);
   289e8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   289ec:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   289f0:	f7ff fee4 	bl	287bc <clear_event_registration>
   289f4:	481b      	ldr	r0, [pc, #108]	; (28a64 <clear_event_registrations+0x88>)
   289f6:	f7fc fa2f 	bl	24e58 <z_spin_unlock_valid>
   289fa:	b1a0      	cbz	r0, 28a26 <clear_event_registrations+0x4a>
   289fc:	f384 8811 	msr	BASEPRI, r4
   28a00:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28a04:	f04f 0320 	mov.w	r3, #32
   28a08:	f3ef 8411 	mrs	r4, BASEPRI
   28a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   28a10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a14:	4813      	ldr	r0, [pc, #76]	; (28a64 <clear_event_registrations+0x88>)
   28a16:	f7fc fa0f 	bl	24e38 <z_spin_lock_valid>
   28a1a:	b198      	cbz	r0, 28a44 <clear_event_registrations+0x68>
	z_spin_lock_set_owner(l);
   28a1c:	4811      	ldr	r0, [pc, #68]	; (28a64 <clear_event_registrations+0x88>)
   28a1e:	f7fc fa2b 	bl	24e78 <z_spin_lock_set_owner>
	while (num_events--) {
   28a22:	4629      	mov	r1, r5
	return k;
   28a24:	e7dd      	b.n	289e2 <clear_event_registrations+0x6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28a26:	4c10      	ldr	r4, [pc, #64]	; (28a68 <clear_event_registrations+0x8c>)
   28a28:	23c2      	movs	r3, #194	; 0xc2
   28a2a:	4622      	mov	r2, r4
   28a2c:	490f      	ldr	r1, [pc, #60]	; (28a6c <clear_event_registrations+0x90>)
   28a2e:	4810      	ldr	r0, [pc, #64]	; (28a70 <clear_event_registrations+0x94>)
   28a30:	f001 f85b 	bl	29aea <assert_print>
   28a34:	490b      	ldr	r1, [pc, #44]	; (28a64 <clear_event_registrations+0x88>)
   28a36:	480f      	ldr	r0, [pc, #60]	; (28a74 <clear_event_registrations+0x98>)
   28a38:	f001 f857 	bl	29aea <assert_print>
   28a3c:	21c2      	movs	r1, #194	; 0xc2
   28a3e:	4620      	mov	r0, r4
   28a40:	f001 f84c 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a44:	4c08      	ldr	r4, [pc, #32]	; (28a68 <clear_event_registrations+0x8c>)
   28a46:	2394      	movs	r3, #148	; 0x94
   28a48:	4622      	mov	r2, r4
   28a4a:	490b      	ldr	r1, [pc, #44]	; (28a78 <clear_event_registrations+0x9c>)
   28a4c:	4808      	ldr	r0, [pc, #32]	; (28a70 <clear_event_registrations+0x94>)
   28a4e:	f001 f84c 	bl	29aea <assert_print>
   28a52:	4904      	ldr	r1, [pc, #16]	; (28a64 <clear_event_registrations+0x88>)
   28a54:	4809      	ldr	r0, [pc, #36]	; (28a7c <clear_event_registrations+0xa0>)
   28a56:	f001 f848 	bl	29aea <assert_print>
   28a5a:	2194      	movs	r1, #148	; 0x94
   28a5c:	4620      	mov	r0, r4
   28a5e:	f001 f83d 	bl	29adc <assert_post_action>
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   28a62:	bd70      	pop	{r4, r5, r6, pc}
   28a64:	20009d48 	.word	0x20009d48
   28a68:	000301b0 	.word	0x000301b0
   28a6c:	000301e0 	.word	0x000301e0
   28a70:	0002fdac 	.word	0x0002fdac
   28a74:	000301f8 	.word	0x000301f8
   28a78:	00030210 	.word	0x00030210
   28a7c:	00030228 	.word	0x00030228

00028a80 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   28a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a84:	b083      	sub	sp, #12
   28a86:	4680      	mov	r8, r0
   28a88:	460f      	mov	r7, r1
   28a8a:	4691      	mov	r9, r2
   28a8c:	469a      	mov	sl, r3
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   28a8e:	2500      	movs	r5, #0
	int events_registered = 0;
   28a90:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   28a92:	e01f      	b.n	28ad4 <register_events+0x54>
   28a94:	4c31      	ldr	r4, [pc, #196]	; (28b5c <register_events+0xdc>)
   28a96:	2394      	movs	r3, #148	; 0x94
   28a98:	4622      	mov	r2, r4
   28a9a:	4931      	ldr	r1, [pc, #196]	; (28b60 <register_events+0xe0>)
   28a9c:	4831      	ldr	r0, [pc, #196]	; (28b64 <register_events+0xe4>)
   28a9e:	f001 f824 	bl	29aea <assert_print>
   28aa2:	4931      	ldr	r1, [pc, #196]	; (28b68 <register_events+0xe8>)
   28aa4:	4831      	ldr	r0, [pc, #196]	; (28b6c <register_events+0xec>)
   28aa6:	f001 f820 	bl	29aea <assert_print>
   28aaa:	2194      	movs	r1, #148	; 0x94
   28aac:	4620      	mov	r0, r4
   28aae:	f001 f815 	bl	29adc <assert_post_action>

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
		} else if (!just_check && poller->is_polling) {
   28ab2:	f1ba 0f00 	cmp.w	sl, #0
   28ab6:	d103      	bne.n	28ac0 <register_events+0x40>
   28ab8:	f899 3000 	ldrb.w	r3, [r9]
   28abc:	2b00      	cmp	r3, #0
   28abe:	d132      	bne.n	28b26 <register_events+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ac0:	4829      	ldr	r0, [pc, #164]	; (28b68 <register_events+0xe8>)
   28ac2:	f7fc f9c9 	bl	24e58 <z_spin_unlock_valid>
   28ac6:	2800      	cmp	r0, #0
   28ac8:	d034      	beq.n	28b34 <register_events+0xb4>
	__asm__ volatile(
   28aca:	f386 8811 	msr	BASEPRI, r6
   28ace:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28ad2:	3501      	adds	r5, #1
   28ad4:	42bd      	cmp	r5, r7
   28ad6:	da3c      	bge.n	28b52 <register_events+0xd2>
	__asm__ volatile(
   28ad8:	f04f 0320 	mov.w	r3, #32
   28adc:	f3ef 8611 	mrs	r6, BASEPRI
   28ae0:	f383 8812 	msr	BASEPRI_MAX, r3
   28ae4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28ae8:	481f      	ldr	r0, [pc, #124]	; (28b68 <register_events+0xe8>)
   28aea:	f7fc f9a5 	bl	24e38 <z_spin_lock_valid>
   28aee:	2800      	cmp	r0, #0
   28af0:	d0d0      	beq.n	28a94 <register_events+0x14>
	z_spin_lock_set_owner(l);
   28af2:	481d      	ldr	r0, [pc, #116]	; (28b68 <register_events+0xe8>)
   28af4:	f7fc f9c0 	bl	24e78 <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   28af8:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   28afc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   28b00:	a901      	add	r1, sp, #4
   28b02:	4620      	mov	r0, r4
   28b04:	f7ff fe0e 	bl	28724 <is_condition_met>
   28b08:	2800      	cmp	r0, #0
   28b0a:	d0d2      	beq.n	28ab2 <register_events+0x32>
	event->poller = NULL;
   28b0c:	2100      	movs	r1, #0
   28b0e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   28b10:	68e3      	ldr	r3, [r4, #12]
   28b12:	f3c3 3286 	ubfx	r2, r3, #14, #7
   28b16:	9801      	ldr	r0, [sp, #4]
   28b18:	4302      	orrs	r2, r0
   28b1a:	f362 3394 	bfi	r3, r2, #14, #7
   28b1e:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   28b20:	f889 1000 	strb.w	r1, [r9]
   28b24:	e7cc      	b.n	28ac0 <register_events+0x40>
			register_event(&events[ii], poller);
   28b26:	4649      	mov	r1, r9
   28b28:	4620      	mov	r0, r4
   28b2a:	f7ff fec9 	bl	288c0 <register_event>
			events_registered += 1;
   28b2e:	f10b 0b01 	add.w	fp, fp, #1
   28b32:	e7c5      	b.n	28ac0 <register_events+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28b34:	4c09      	ldr	r4, [pc, #36]	; (28b5c <register_events+0xdc>)
   28b36:	23c2      	movs	r3, #194	; 0xc2
   28b38:	4622      	mov	r2, r4
   28b3a:	490d      	ldr	r1, [pc, #52]	; (28b70 <register_events+0xf0>)
   28b3c:	4809      	ldr	r0, [pc, #36]	; (28b64 <register_events+0xe4>)
   28b3e:	f000 ffd4 	bl	29aea <assert_print>
   28b42:	4909      	ldr	r1, [pc, #36]	; (28b68 <register_events+0xe8>)
   28b44:	480b      	ldr	r0, [pc, #44]	; (28b74 <register_events+0xf4>)
   28b46:	f000 ffd0 	bl	29aea <assert_print>
   28b4a:	21c2      	movs	r1, #194	; 0xc2
   28b4c:	4620      	mov	r0, r4
   28b4e:	f000 ffc5 	bl	29adc <assert_post_action>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   28b52:	4658      	mov	r0, fp
   28b54:	b003      	add	sp, #12
   28b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b5a:	bf00      	nop
   28b5c:	000301b0 	.word	0x000301b0
   28b60:	00030210 	.word	0x00030210
   28b64:	0002fdac 	.word	0x0002fdac
   28b68:	20009d48 	.word	0x20009d48
   28b6c:	00030228 	.word	0x00030228
   28b70:	000301e0 	.word	0x000301e0
   28b74:	000301f8 	.word	0x000301f8

00028b78 <signal_poller>:

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   28b78:	b538      	push	{r3, r4, r5, lr}
   28b7a:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   28b7c:	6880      	ldr	r0, [r0, #8]
   28b7e:	f006 fb72 	bl	2f266 <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   28b82:	b1d8      	cbz	r0, 28bbc <signal_poller+0x44>
   28b84:	4604      	mov	r4, r0
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   28b86:	7b43      	ldrb	r3, [r0, #13]

	if (!z_is_thread_pending(thread)) {
   28b88:	f013 0f02 	tst.w	r3, #2
   28b8c:	d034      	beq.n	28bf8 <signal_poller+0x80>
	return thread->base.timeout.dticks == _EXPIRED;
   28b8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   28b90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   28b92:	f1b3 3fff 	cmp.w	r3, #4294967295
   28b96:	bf08      	it	eq
   28b98:	f112 0f02 	cmneq.w	r2, #2
   28b9c:	d02e      	beq.n	28bfc <signal_poller+0x84>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   28b9e:	f7fd ffdd 	bl	26b5c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   28ba2:	2d08      	cmp	r5, #8
   28ba4:	d01a      	beq.n	28bdc <signal_poller+0x64>
   28ba6:	2300      	movs	r3, #0
   28ba8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   28bac:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28bae:	f013 0f1f 	tst.w	r3, #31
   28bb2:	d118      	bne.n	28be6 <signal_poller+0x6e>
	return node->next != NULL;
   28bb4:	69a3      	ldr	r3, [r4, #24]
   28bb6:	b1a3      	cbz	r3, 28be2 <signal_poller+0x6a>
   28bb8:	2300      	movs	r3, #0
   28bba:	e015      	b.n	28be8 <signal_poller+0x70>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   28bbc:	4c11      	ldr	r4, [pc, #68]	; (28c04 <signal_poller+0x8c>)
   28bbe:	f44f 7386 	mov.w	r3, #268	; 0x10c
   28bc2:	4622      	mov	r2, r4
   28bc4:	4910      	ldr	r1, [pc, #64]	; (28c08 <signal_poller+0x90>)
   28bc6:	4811      	ldr	r0, [pc, #68]	; (28c0c <signal_poller+0x94>)
   28bc8:	f000 ff8f 	bl	29aea <assert_print>
   28bcc:	4810      	ldr	r0, [pc, #64]	; (28c10 <signal_poller+0x98>)
   28bce:	f000 ff8c 	bl	29aea <assert_print>
   28bd2:	f44f 7186 	mov.w	r1, #268	; 0x10c
   28bd6:	4620      	mov	r0, r4
   28bd8:	f000 ff80 	bl	29adc <assert_post_action>
	arch_thread_return_value_set(thread,
   28bdc:	f06f 0303 	mvn.w	r3, #3
   28be0:	e7e2      	b.n	28ba8 <signal_poller+0x30>
   28be2:	2301      	movs	r3, #1
   28be4:	e000      	b.n	28be8 <signal_poller+0x70>
   28be6:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   28be8:	b90b      	cbnz	r3, 28bee <signal_poller+0x76>
		return 0;
   28bea:	2000      	movs	r0, #0
   28bec:	e005      	b.n	28bfa <signal_poller+0x82>
	}

	z_ready_thread(thread);
   28bee:	4620      	mov	r0, r4
   28bf0:	f7fe f98e 	bl	26f10 <z_ready_thread>

	return 0;
   28bf4:	2000      	movs	r0, #0
   28bf6:	e000      	b.n	28bfa <signal_poller+0x82>
		return 0;
   28bf8:	2000      	movs	r0, #0
}
   28bfa:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   28bfc:	f06f 000a 	mvn.w	r0, #10
   28c00:	e7fb      	b.n	28bfa <signal_poller+0x82>
   28c02:	bf00      	nop
   28c04:	00034780 	.word	0x00034780
   28c08:	000348b0 	.word	0x000348b0
   28c0c:	0002fdac 	.word	0x0002fdac
   28c10:	000348c8 	.word	0x000348c8

00028c14 <k_poll_event_init>:
{
   28c14:	b510      	push	{r4, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   28c16:	b9d2      	cbnz	r2, 28c4e <k_poll_event_init+0x3a>
   28c18:	4696      	mov	lr, r2
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   28c1a:	293f      	cmp	r1, #63	; 0x3f
   28c1c:	d825      	bhi.n	28c6a <k_poll_event_init+0x56>
	__ASSERT(obj != NULL, "must provide an object\n");
   28c1e:	2b00      	cmp	r3, #0
   28c20:	d031      	beq.n	28c86 <k_poll_event_init+0x72>
	event->poller = NULL;
   28c22:	2200      	movs	r2, #0
   28c24:	6082      	str	r2, [r0, #8]
	event->type = type;
   28c26:	f890 c00d 	ldrb.w	ip, [r0, #13]
   28c2a:	f361 0c05 	bfi	ip, r1, #0, #6
   28c2e:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   28c32:	68c1      	ldr	r1, [r0, #12]
   28c34:	f362 3194 	bfi	r1, r2, #14, #7
   28c38:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   28c3a:	7b81      	ldrb	r1, [r0, #14]
   28c3c:	f36e 1145 	bfi	r1, lr, #5, #1
   28c40:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   28c42:	89c1      	ldrh	r1, [r0, #14]
   28c44:	f362 118f 	bfi	r1, r2, #6, #10
   28c48:	81c1      	strh	r1, [r0, #14]
	event->obj = obj;
   28c4a:	6103      	str	r3, [r0, #16]
}
   28c4c:	bd10      	pop	{r4, pc}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   28c4e:	4c15      	ldr	r4, [pc, #84]	; (28ca4 <k_poll_event_init+0x90>)
   28c50:	232d      	movs	r3, #45	; 0x2d
   28c52:	4622      	mov	r2, r4
   28c54:	4914      	ldr	r1, [pc, #80]	; (28ca8 <k_poll_event_init+0x94>)
   28c56:	4815      	ldr	r0, [pc, #84]	; (28cac <k_poll_event_init+0x98>)
   28c58:	f000 ff47 	bl	29aea <assert_print>
   28c5c:	4814      	ldr	r0, [pc, #80]	; (28cb0 <k_poll_event_init+0x9c>)
   28c5e:	f000 ff44 	bl	29aea <assert_print>
   28c62:	212d      	movs	r1, #45	; 0x2d
   28c64:	4620      	mov	r0, r4
   28c66:	f000 ff39 	bl	29adc <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   28c6a:	4c0e      	ldr	r4, [pc, #56]	; (28ca4 <k_poll_event_init+0x90>)
   28c6c:	232f      	movs	r3, #47	; 0x2f
   28c6e:	4622      	mov	r2, r4
   28c70:	4910      	ldr	r1, [pc, #64]	; (28cb4 <k_poll_event_init+0xa0>)
   28c72:	480e      	ldr	r0, [pc, #56]	; (28cac <k_poll_event_init+0x98>)
   28c74:	f000 ff39 	bl	29aea <assert_print>
   28c78:	480f      	ldr	r0, [pc, #60]	; (28cb8 <k_poll_event_init+0xa4>)
   28c7a:	f000 ff36 	bl	29aea <assert_print>
   28c7e:	212f      	movs	r1, #47	; 0x2f
   28c80:	4620      	mov	r0, r4
   28c82:	f000 ff2b 	bl	29adc <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   28c86:	4c07      	ldr	r4, [pc, #28]	; (28ca4 <k_poll_event_init+0x90>)
   28c88:	2330      	movs	r3, #48	; 0x30
   28c8a:	4622      	mov	r2, r4
   28c8c:	490b      	ldr	r1, [pc, #44]	; (28cbc <k_poll_event_init+0xa8>)
   28c8e:	4807      	ldr	r0, [pc, #28]	; (28cac <k_poll_event_init+0x98>)
   28c90:	f000 ff2b 	bl	29aea <assert_print>
   28c94:	480a      	ldr	r0, [pc, #40]	; (28cc0 <k_poll_event_init+0xac>)
   28c96:	f000 ff28 	bl	29aea <assert_print>
   28c9a:	2130      	movs	r1, #48	; 0x30
   28c9c:	4620      	mov	r0, r4
   28c9e:	f000 ff1d 	bl	29adc <assert_post_action>
   28ca2:	bf00      	nop
   28ca4:	00034780 	.word	0x00034780
   28ca8:	000348e8 	.word	0x000348e8
   28cac:	0002fdac 	.word	0x0002fdac
   28cb0:	00034908 	.word	0x00034908
   28cb4:	00034930 	.word	0x00034930
   28cb8:	00034954 	.word	0x00034954
   28cbc:	00034964 	.word	0x00034964
   28cc0:	00034978 	.word	0x00034978

00028cc4 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   28cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28cc8:	b082      	sub	sp, #8
   28cca:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   28ccc:	4b7a      	ldr	r3, [pc, #488]	; (28eb8 <z_impl_k_poll+0x1f4>)
   28cce:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   28cd0:	2301      	movs	r3, #1
   28cd2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   28cd6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   28cda:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   28cde:	2b00      	cmp	r3, #0
   28ce0:	d138      	bne.n	28d54 <z_impl_k_poll+0x90>
   28ce2:	4605      	mov	r5, r0
   28ce4:	4617      	mov	r7, r2
   28ce6:	f104 0260 	add.w	r2, r4, #96	; 0x60
	__ASSERT(events != NULL, "NULL events\n");
   28cea:	2800      	cmp	r0, #0
   28cec:	d042      	beq.n	28d74 <z_impl_k_poll+0xb0>
	__ASSERT(num_events >= 0, "<0 events\n");
   28cee:	2900      	cmp	r1, #0
   28cf0:	db50      	blt.n	28d94 <z_impl_k_poll+0xd0>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   28cf2:	ea56 0307 	orrs.w	r3, r6, r7
   28cf6:	bf0c      	ite	eq
   28cf8:	2301      	moveq	r3, #1
   28cfa:	2300      	movne	r3, #0
   28cfc:	f7ff fec0 	bl	28a80 <register_events>
   28d00:	4680      	mov	r8, r0
   28d02:	f04f 0320 	mov.w	r3, #32
   28d06:	f3ef 8911 	mrs	r9, BASEPRI
   28d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   28d0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28d12:	486a      	ldr	r0, [pc, #424]	; (28ebc <z_impl_k_poll+0x1f8>)
   28d14:	f7fc f890 	bl	24e38 <z_spin_lock_valid>
   28d18:	2800      	cmp	r0, #0
   28d1a:	d04b      	beq.n	28db4 <z_impl_k_poll+0xf0>
	z_spin_lock_set_owner(l);
   28d1c:	4867      	ldr	r0, [pc, #412]	; (28ebc <z_impl_k_poll+0x1f8>)
   28d1e:	f7fc f8ab 	bl	24e78 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   28d22:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   28d26:	2b00      	cmp	r3, #0
   28d28:	d053      	beq.n	28dd2 <z_impl_k_poll+0x10e>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   28d2a:	2300      	movs	r3, #0
   28d2c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28d30:	ea56 0307 	orrs.w	r3, r6, r7
   28d34:	d17a      	bne.n	28e2c <z_impl_k_poll+0x168>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28d36:	4861      	ldr	r0, [pc, #388]	; (28ebc <z_impl_k_poll+0x1f8>)
   28d38:	f7fc f88e 	bl	24e58 <z_spin_unlock_valid>
   28d3c:	2800      	cmp	r0, #0
   28d3e:	d066      	beq.n	28e0e <z_impl_k_poll+0x14a>
	__asm__ volatile(
   28d40:	f389 8811 	msr	BASEPRI, r9
   28d44:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, -EAGAIN);

		return -EAGAIN;
   28d48:	f06f 040a 	mvn.w	r4, #10
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   28d4c:	4620      	mov	r0, r4
   28d4e:	b002      	add	sp, #8
   28d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "");
   28d54:	4c5a      	ldr	r4, [pc, #360]	; (28ec0 <z_impl_k_poll+0x1fc>)
   28d56:	f240 132d 	movw	r3, #301	; 0x12d
   28d5a:	4622      	mov	r2, r4
   28d5c:	4959      	ldr	r1, [pc, #356]	; (28ec4 <z_impl_k_poll+0x200>)
   28d5e:	485a      	ldr	r0, [pc, #360]	; (28ec8 <z_impl_k_poll+0x204>)
   28d60:	f000 fec3 	bl	29aea <assert_print>
   28d64:	4859      	ldr	r0, [pc, #356]	; (28ecc <z_impl_k_poll+0x208>)
   28d66:	f000 fec0 	bl	29aea <assert_print>
   28d6a:	f240 112d 	movw	r1, #301	; 0x12d
   28d6e:	4620      	mov	r0, r4
   28d70:	f000 feb4 	bl	29adc <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   28d74:	4c52      	ldr	r4, [pc, #328]	; (28ec0 <z_impl_k_poll+0x1fc>)
   28d76:	f44f 7397 	mov.w	r3, #302	; 0x12e
   28d7a:	4622      	mov	r2, r4
   28d7c:	4954      	ldr	r1, [pc, #336]	; (28ed0 <z_impl_k_poll+0x20c>)
   28d7e:	4852      	ldr	r0, [pc, #328]	; (28ec8 <z_impl_k_poll+0x204>)
   28d80:	f000 feb3 	bl	29aea <assert_print>
   28d84:	4853      	ldr	r0, [pc, #332]	; (28ed4 <z_impl_k_poll+0x210>)
   28d86:	f000 feb0 	bl	29aea <assert_print>
   28d8a:	f44f 7197 	mov.w	r1, #302	; 0x12e
   28d8e:	4620      	mov	r0, r4
   28d90:	f000 fea4 	bl	29adc <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   28d94:	4c4a      	ldr	r4, [pc, #296]	; (28ec0 <z_impl_k_poll+0x1fc>)
   28d96:	f240 132f 	movw	r3, #303	; 0x12f
   28d9a:	4622      	mov	r2, r4
   28d9c:	494e      	ldr	r1, [pc, #312]	; (28ed8 <z_impl_k_poll+0x214>)
   28d9e:	484a      	ldr	r0, [pc, #296]	; (28ec8 <z_impl_k_poll+0x204>)
   28da0:	f000 fea3 	bl	29aea <assert_print>
   28da4:	484d      	ldr	r0, [pc, #308]	; (28edc <z_impl_k_poll+0x218>)
   28da6:	f000 fea0 	bl	29aea <assert_print>
   28daa:	f240 112f 	movw	r1, #303	; 0x12f
   28dae:	4620      	mov	r0, r4
   28db0:	f000 fe94 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28db4:	4c4a      	ldr	r4, [pc, #296]	; (28ee0 <z_impl_k_poll+0x21c>)
   28db6:	2394      	movs	r3, #148	; 0x94
   28db8:	4622      	mov	r2, r4
   28dba:	494a      	ldr	r1, [pc, #296]	; (28ee4 <z_impl_k_poll+0x220>)
   28dbc:	4842      	ldr	r0, [pc, #264]	; (28ec8 <z_impl_k_poll+0x204>)
   28dbe:	f000 fe94 	bl	29aea <assert_print>
   28dc2:	493e      	ldr	r1, [pc, #248]	; (28ebc <z_impl_k_poll+0x1f8>)
   28dc4:	4848      	ldr	r0, [pc, #288]	; (28ee8 <z_impl_k_poll+0x224>)
   28dc6:	f000 fe90 	bl	29aea <assert_print>
   28dca:	2194      	movs	r1, #148	; 0x94
   28dcc:	4620      	mov	r0, r4
   28dce:	f000 fe85 	bl	29adc <assert_post_action>
		clear_event_registrations(events, events_registered, key);
   28dd2:	464a      	mov	r2, r9
   28dd4:	4641      	mov	r1, r8
   28dd6:	4628      	mov	r0, r5
   28dd8:	f7ff fe00 	bl	289dc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ddc:	4837      	ldr	r0, [pc, #220]	; (28ebc <z_impl_k_poll+0x1f8>)
   28dde:	f7fc f83b 	bl	24e58 <z_spin_unlock_valid>
   28de2:	b128      	cbz	r0, 28df0 <z_impl_k_poll+0x12c>
   28de4:	f389 8811 	msr	BASEPRI, r9
   28de8:	f3bf 8f6f 	isb	sy
		return 0;
   28dec:	2400      	movs	r4, #0
   28dee:	e7ad      	b.n	28d4c <z_impl_k_poll+0x88>
   28df0:	4c3b      	ldr	r4, [pc, #236]	; (28ee0 <z_impl_k_poll+0x21c>)
   28df2:	23c2      	movs	r3, #194	; 0xc2
   28df4:	4622      	mov	r2, r4
   28df6:	493d      	ldr	r1, [pc, #244]	; (28eec <z_impl_k_poll+0x228>)
   28df8:	4833      	ldr	r0, [pc, #204]	; (28ec8 <z_impl_k_poll+0x204>)
   28dfa:	f000 fe76 	bl	29aea <assert_print>
   28dfe:	492f      	ldr	r1, [pc, #188]	; (28ebc <z_impl_k_poll+0x1f8>)
   28e00:	483b      	ldr	r0, [pc, #236]	; (28ef0 <z_impl_k_poll+0x22c>)
   28e02:	f000 fe72 	bl	29aea <assert_print>
   28e06:	21c2      	movs	r1, #194	; 0xc2
   28e08:	4620      	mov	r0, r4
   28e0a:	f000 fe67 	bl	29adc <assert_post_action>
   28e0e:	4c34      	ldr	r4, [pc, #208]	; (28ee0 <z_impl_k_poll+0x21c>)
   28e10:	23c2      	movs	r3, #194	; 0xc2
   28e12:	4622      	mov	r2, r4
   28e14:	4935      	ldr	r1, [pc, #212]	; (28eec <z_impl_k_poll+0x228>)
   28e16:	482c      	ldr	r0, [pc, #176]	; (28ec8 <z_impl_k_poll+0x204>)
   28e18:	f000 fe67 	bl	29aea <assert_print>
   28e1c:	4927      	ldr	r1, [pc, #156]	; (28ebc <z_impl_k_poll+0x1f8>)
   28e1e:	4834      	ldr	r0, [pc, #208]	; (28ef0 <z_impl_k_poll+0x22c>)
   28e20:	f000 fe63 	bl	29aea <assert_print>
   28e24:	21c2      	movs	r1, #194	; 0xc2
   28e26:	4620      	mov	r0, r4
   28e28:	f000 fe58 	bl	29adc <assert_post_action>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   28e2c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 28ebc <z_impl_k_poll+0x1f8>
   28e30:	9700      	str	r7, [sp, #0]
   28e32:	9601      	str	r6, [sp, #4]
   28e34:	4a2f      	ldr	r2, [pc, #188]	; (28ef4 <z_impl_k_poll+0x230>)
   28e36:	4649      	mov	r1, r9
   28e38:	4650      	mov	r0, sl
   28e3a:	f7fe f9d7 	bl	271ec <z_pend_curr>
   28e3e:	4604      	mov	r4, r0
	__asm__ volatile(
   28e40:	f04f 0320 	mov.w	r3, #32
   28e44:	f3ef 8711 	mrs	r7, BASEPRI
   28e48:	f383 8812 	msr	BASEPRI_MAX, r3
   28e4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28e50:	4650      	mov	r0, sl
   28e52:	f7fb fff1 	bl	24e38 <z_spin_lock_valid>
   28e56:	b188      	cbz	r0, 28e7c <z_impl_k_poll+0x1b8>
	z_spin_lock_set_owner(l);
   28e58:	4e18      	ldr	r6, [pc, #96]	; (28ebc <z_impl_k_poll+0x1f8>)
   28e5a:	4630      	mov	r0, r6
   28e5c:	f7fc f80c 	bl	24e78 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   28e60:	463a      	mov	r2, r7
   28e62:	4641      	mov	r1, r8
   28e64:	4628      	mov	r0, r5
   28e66:	f7ff fdb9 	bl	289dc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28e6a:	4630      	mov	r0, r6
   28e6c:	f7fb fff4 	bl	24e58 <z_spin_unlock_valid>
   28e70:	b198      	cbz	r0, 28e9a <z_impl_k_poll+0x1d6>
	__asm__ volatile(
   28e72:	f387 8811 	msr	BASEPRI, r7
   28e76:	f3bf 8f6f 	isb	sy
	return swap_rc;
   28e7a:	e767      	b.n	28d4c <z_impl_k_poll+0x88>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28e7c:	4c18      	ldr	r4, [pc, #96]	; (28ee0 <z_impl_k_poll+0x21c>)
   28e7e:	2394      	movs	r3, #148	; 0x94
   28e80:	4622      	mov	r2, r4
   28e82:	4918      	ldr	r1, [pc, #96]	; (28ee4 <z_impl_k_poll+0x220>)
   28e84:	4810      	ldr	r0, [pc, #64]	; (28ec8 <z_impl_k_poll+0x204>)
   28e86:	f000 fe30 	bl	29aea <assert_print>
   28e8a:	4651      	mov	r1, sl
   28e8c:	4816      	ldr	r0, [pc, #88]	; (28ee8 <z_impl_k_poll+0x224>)
   28e8e:	f000 fe2c 	bl	29aea <assert_print>
   28e92:	2194      	movs	r1, #148	; 0x94
   28e94:	4620      	mov	r0, r4
   28e96:	f000 fe21 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28e9a:	4c11      	ldr	r4, [pc, #68]	; (28ee0 <z_impl_k_poll+0x21c>)
   28e9c:	23c2      	movs	r3, #194	; 0xc2
   28e9e:	4622      	mov	r2, r4
   28ea0:	4912      	ldr	r1, [pc, #72]	; (28eec <z_impl_k_poll+0x228>)
   28ea2:	4809      	ldr	r0, [pc, #36]	; (28ec8 <z_impl_k_poll+0x204>)
   28ea4:	f000 fe21 	bl	29aea <assert_print>
   28ea8:	4631      	mov	r1, r6
   28eaa:	4811      	ldr	r0, [pc, #68]	; (28ef0 <z_impl_k_poll+0x22c>)
   28eac:	f000 fe1d 	bl	29aea <assert_print>
   28eb0:	21c2      	movs	r1, #194	; 0xc2
   28eb2:	4620      	mov	r0, r4
   28eb4:	f000 fe12 	bl	29adc <assert_post_action>
   28eb8:	20009ce8 	.word	0x20009ce8
   28ebc:	20009d48 	.word	0x20009d48
   28ec0:	00034780 	.word	0x00034780
   28ec4:	000342a8 	.word	0x000342a8
   28ec8:	0002fdac 	.word	0x0002fdac
   28ecc:	00032b7c 	.word	0x00032b7c
   28ed0:	00034994 	.word	0x00034994
   28ed4:	000349ac 	.word	0x000349ac
   28ed8:	000349bc 	.word	0x000349bc
   28edc:	000349cc 	.word	0x000349cc
   28ee0:	000301b0 	.word	0x000301b0
   28ee4:	00030210 	.word	0x00030210
   28ee8:	00030228 	.word	0x00030228
   28eec:	000301e0 	.word	0x000301e0
   28ef0:	000301f8 	.word	0x000301f8
   28ef4:	20008430 	.word	0x20008430

00028ef8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   28ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28efa:	4604      	mov	r4, r0
   28efc:	460d      	mov	r5, r1
	__asm__ volatile(
   28efe:	f04f 0320 	mov.w	r3, #32
   28f02:	f3ef 8611 	mrs	r6, BASEPRI
   28f06:	f383 8812 	msr	BASEPRI_MAX, r3
   28f0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28f0e:	4823      	ldr	r0, [pc, #140]	; (28f9c <z_impl_k_poll_signal_raise+0xa4>)
   28f10:	f7fb ff92 	bl	24e38 <z_spin_lock_valid>
   28f14:	b1c8      	cbz	r0, 28f4a <z_impl_k_poll_signal_raise+0x52>
	z_spin_lock_set_owner(l);
   28f16:	4821      	ldr	r0, [pc, #132]	; (28f9c <z_impl_k_poll_signal_raise+0xa4>)
   28f18:	f7fb ffae 	bl	24e78 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   28f1c:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   28f1e:	2301      	movs	r3, #1
   28f20:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   28f22:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   28f24:	4284      	cmp	r4, r0
   28f26:	d01f      	beq.n	28f68 <z_impl_k_poll_signal_raise+0x70>
	sys_dnode_t *const prev = node->prev;
   28f28:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   28f2a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   28f2c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28f2e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28f30:	2300      	movs	r3, #0
   28f32:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   28f34:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28f36:	2101      	movs	r1, #1
   28f38:	f006 f9f4 	bl	2f324 <signal_poll_event>
   28f3c:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   28f3e:	4631      	mov	r1, r6
   28f40:	4816      	ldr	r0, [pc, #88]	; (28f9c <z_impl_k_poll_signal_raise+0xa4>)
   28f42:	f7fd fd59 	bl	269f8 <z_reschedule>
	return rc;
}
   28f46:	4620      	mov	r0, r4
   28f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28f4a:	4c15      	ldr	r4, [pc, #84]	; (28fa0 <z_impl_k_poll_signal_raise+0xa8>)
   28f4c:	2394      	movs	r3, #148	; 0x94
   28f4e:	4622      	mov	r2, r4
   28f50:	4914      	ldr	r1, [pc, #80]	; (28fa4 <z_impl_k_poll_signal_raise+0xac>)
   28f52:	4815      	ldr	r0, [pc, #84]	; (28fa8 <z_impl_k_poll_signal_raise+0xb0>)
   28f54:	f000 fdc9 	bl	29aea <assert_print>
   28f58:	4910      	ldr	r1, [pc, #64]	; (28f9c <z_impl_k_poll_signal_raise+0xa4>)
   28f5a:	4814      	ldr	r0, [pc, #80]	; (28fac <z_impl_k_poll_signal_raise+0xb4>)
   28f5c:	f000 fdc5 	bl	29aea <assert_print>
   28f60:	2194      	movs	r1, #148	; 0x94
   28f62:	4620      	mov	r0, r4
   28f64:	f000 fdba 	bl	29adc <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f68:	480c      	ldr	r0, [pc, #48]	; (28f9c <z_impl_k_poll_signal_raise+0xa4>)
   28f6a:	f7fb ff75 	bl	24e58 <z_spin_unlock_valid>
   28f6e:	b128      	cbz	r0, 28f7c <z_impl_k_poll_signal_raise+0x84>
	__asm__ volatile(
   28f70:	f386 8811 	msr	BASEPRI, r6
   28f74:	f3bf 8f6f 	isb	sy
		return 0;
   28f78:	2400      	movs	r4, #0
   28f7a:	e7e4      	b.n	28f46 <z_impl_k_poll_signal_raise+0x4e>
   28f7c:	4c08      	ldr	r4, [pc, #32]	; (28fa0 <z_impl_k_poll_signal_raise+0xa8>)
   28f7e:	23c2      	movs	r3, #194	; 0xc2
   28f80:	4622      	mov	r2, r4
   28f82:	490b      	ldr	r1, [pc, #44]	; (28fb0 <z_impl_k_poll_signal_raise+0xb8>)
   28f84:	4808      	ldr	r0, [pc, #32]	; (28fa8 <z_impl_k_poll_signal_raise+0xb0>)
   28f86:	f000 fdb0 	bl	29aea <assert_print>
   28f8a:	4904      	ldr	r1, [pc, #16]	; (28f9c <z_impl_k_poll_signal_raise+0xa4>)
   28f8c:	4809      	ldr	r0, [pc, #36]	; (28fb4 <z_impl_k_poll_signal_raise+0xbc>)
   28f8e:	f000 fdac 	bl	29aea <assert_print>
   28f92:	21c2      	movs	r1, #194	; 0xc2
   28f94:	4620      	mov	r0, r4
   28f96:	f000 fda1 	bl	29adc <assert_post_action>
   28f9a:	bf00      	nop
   28f9c:	20009d48 	.word	0x20009d48
   28fa0:	000301b0 	.word	0x000301b0
   28fa4:	00030210 	.word	0x00030210
   28fa8:	0002fdac 	.word	0x0002fdac
   28fac:	00030228 	.word	0x00030228
   28fb0:	000301e0 	.word	0x000301e0
   28fb4:	000301f8 	.word	0x000301f8

00028fb8 <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   28fb8:	b570      	push	{r4, r5, r6, lr}
   28fba:	b082      	sub	sp, #8
   28fbc:	4606      	mov	r6, r0
   28fbe:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   28fc0:	2300      	movs	r3, #0
   28fc2:	3204      	adds	r2, #4
   28fc4:	d214      	bcs.n	28ff0 <z_heap_aligned_alloc+0x38>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   28fc6:	bb2b      	cbnz	r3, 29014 <z_heap_aligned_alloc+0x5c>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   28fc8:	2000      	movs	r0, #0
   28fca:	2100      	movs	r1, #0
   28fcc:	e9cd 0100 	strd	r0, r1, [sp]
   28fd0:	f044 0104 	orr.w	r1, r4, #4
   28fd4:	4630      	mov	r0, r6
   28fd6:	f7fb fcf5 	bl	249c4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   28fda:	4605      	mov	r5, r0
   28fdc:	b128      	cbz	r0, 28fea <z_heap_aligned_alloc+0x32>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   28fde:	f845 6b04 	str.w	r6, [r5], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   28fe2:	b114      	cbz	r4, 28fea <z_heap_aligned_alloc+0x32>
   28fe4:	1e63      	subs	r3, r4, #1
   28fe6:	421d      	tst	r5, r3
   28fe8:	d104      	bne.n	28ff4 <z_heap_aligned_alloc+0x3c>
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   28fea:	4628      	mov	r0, r5
   28fec:	b002      	add	sp, #8
   28fee:	bd70      	pop	{r4, r5, r6, pc}
   28ff0:	2301      	movs	r3, #1
   28ff2:	e7e8      	b.n	28fc6 <z_heap_aligned_alloc+0xe>
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   28ff4:	4e08      	ldr	r6, [pc, #32]	; (29018 <z_heap_aligned_alloc+0x60>)
   28ff6:	2325      	movs	r3, #37	; 0x25
   28ff8:	4632      	mov	r2, r6
   28ffa:	4908      	ldr	r1, [pc, #32]	; (2901c <z_heap_aligned_alloc+0x64>)
   28ffc:	4808      	ldr	r0, [pc, #32]	; (29020 <z_heap_aligned_alloc+0x68>)
   28ffe:	f000 fd74 	bl	29aea <assert_print>
   29002:	4622      	mov	r2, r4
   29004:	4629      	mov	r1, r5
   29006:	4807      	ldr	r0, [pc, #28]	; (29024 <z_heap_aligned_alloc+0x6c>)
   29008:	f000 fd6f 	bl	29aea <assert_print>
   2900c:	2125      	movs	r1, #37	; 0x25
   2900e:	4630      	mov	r0, r6
   29010:	f000 fd64 	bl	29adc <assert_post_action>
		return NULL;
   29014:	2500      	movs	r5, #0
   29016:	e7e8      	b.n	28fea <z_heap_aligned_alloc+0x32>
   29018:	000349dc 	.word	0x000349dc
   2901c:	00034a00 	.word	0x00034a00
   29020:	0002fdac 	.word	0x0002fdac
   29024:	00034a34 	.word	0x00034a34

00029028 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   29028:	b510      	push	{r4, lr}
	__ASSERT(align / sizeof(void *) >= 1
   2902a:	2803      	cmp	r0, #3
   2902c:	d90b      	bls.n	29046 <k_aligned_alloc+0x1e>
   2902e:	460a      	mov	r2, r1
   29030:	f010 0f03 	tst.w	r0, #3
   29034:	d107      	bne.n	29046 <k_aligned_alloc+0x1e>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   29036:	1e43      	subs	r3, r0, #1
   29038:	4203      	tst	r3, r0
   2903a:	d112      	bne.n	29062 <k_aligned_alloc+0x3a>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2903c:	4601      	mov	r1, r0
   2903e:	4810      	ldr	r0, [pc, #64]	; (29080 <k_aligned_alloc+0x58>)
   29040:	f7ff ffba 	bl	28fb8 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   29044:	bd10      	pop	{r4, pc}
	__ASSERT(align / sizeof(void *) >= 1
   29046:	4c0f      	ldr	r4, [pc, #60]	; (29084 <k_aligned_alloc+0x5c>)
   29048:	2342      	movs	r3, #66	; 0x42
   2904a:	4622      	mov	r2, r4
   2904c:	490e      	ldr	r1, [pc, #56]	; (29088 <k_aligned_alloc+0x60>)
   2904e:	480f      	ldr	r0, [pc, #60]	; (2908c <k_aligned_alloc+0x64>)
   29050:	f000 fd4b 	bl	29aea <assert_print>
   29054:	480e      	ldr	r0, [pc, #56]	; (29090 <k_aligned_alloc+0x68>)
   29056:	f000 fd48 	bl	29aea <assert_print>
   2905a:	2142      	movs	r1, #66	; 0x42
   2905c:	4620      	mov	r0, r4
   2905e:	f000 fd3d 	bl	29adc <assert_post_action>
	__ASSERT((align & (align - 1)) == 0,
   29062:	4c08      	ldr	r4, [pc, #32]	; (29084 <k_aligned_alloc+0x5c>)
   29064:	2346      	movs	r3, #70	; 0x46
   29066:	4622      	mov	r2, r4
   29068:	490a      	ldr	r1, [pc, #40]	; (29094 <k_aligned_alloc+0x6c>)
   2906a:	4808      	ldr	r0, [pc, #32]	; (2908c <k_aligned_alloc+0x64>)
   2906c:	f000 fd3d 	bl	29aea <assert_print>
   29070:	4809      	ldr	r0, [pc, #36]	; (29098 <k_aligned_alloc+0x70>)
   29072:	f000 fd3a 	bl	29aea <assert_print>
   29076:	2146      	movs	r1, #70	; 0x46
   29078:	4620      	mov	r0, r4
   2907a:	f000 fd2f 	bl	29adc <assert_post_action>
   2907e:	bf00      	nop
   29080:	20008530 	.word	0x20008530
   29084:	000349dc 	.word	0x000349dc
   29088:	00034a5c 	.word	0x00034a5c
   2908c:	0002fdac 	.word	0x0002fdac
   29090:	00034a9c 	.word	0x00034a9c
   29094:	0002ffb4 	.word	0x0002ffb4
   29098:	0002ffd0 	.word	0x0002ffd0

0002909c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   2909c:	4b01      	ldr	r3, [pc, #4]	; (290a4 <k_thread_system_pool_assign+0x8>)
   2909e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
}
   290a2:	4770      	bx	lr
   290a4:	20008530 	.word	0x20008530

000290a8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   290a8:	b538      	push	{r3, r4, r5, lr}
   290aa:	4604      	mov	r4, r0
   290ac:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   290ae:	f005 fe94 	bl	2edda <k_is_in_isr>
   290b2:	b948      	cbnz	r0, 290c8 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   290b4:	4b05      	ldr	r3, [pc, #20]	; (290cc <z_thread_aligned_alloc+0x24>)
   290b6:	689b      	ldr	r3, [r3, #8]
   290b8:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   290bc:	b118      	cbz	r0, 290c6 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   290be:	462a      	mov	r2, r5
   290c0:	4621      	mov	r1, r4
   290c2:	f7ff ff79 	bl	28fb8 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   290c6:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   290c8:	4801      	ldr	r0, [pc, #4]	; (290d0 <z_thread_aligned_alloc+0x28>)
   290ca:	e7f8      	b.n	290be <z_thread_aligned_alloc+0x16>
   290cc:	20009ce8 	.word	0x20009ce8
   290d0:	20008530 	.word	0x20008530

000290d4 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   290d4:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   290d6:	4802      	ldr	r0, [pc, #8]	; (290e0 <boot_banner+0xc>)
   290d8:	f000 f8b6 	bl	29248 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   290dc:	bd08      	pop	{r3, pc}
   290de:	bf00      	nop
   290e0:	00034acc 	.word	0x00034acc

000290e4 <pwm_set_cycles>:

extern int z_impl_pwm_set_cycles(const struct device * dev, uint32_t channel, uint32_t period, uint32_t pulse, pwm_flags_t flags);

__pinned_func
static inline int pwm_set_cycles(const struct device * dev, uint32_t channel, uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
   290e4:	b530      	push	{r4, r5, lr}
   290e6:	b083      	sub	sp, #12
	const struct pwm_driver_api *api =
   290e8:	6884      	ldr	r4, [r0, #8]
	if (pulse > period) {
   290ea:	429a      	cmp	r2, r3
   290ec:	d306      	bcc.n	290fc <pwm_set_cycles+0x18>
	return api->set_cycles(dev, channel, period, pulse, flags);
   290ee:	6824      	ldr	r4, [r4, #0]
   290f0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   290f4:	9500      	str	r5, [sp, #0]
   290f6:	47a0      	blx	r4
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_PWM_SET_CYCLES);
	}
#endif
	compiler_barrier();
	return z_impl_pwm_set_cycles(dev, channel, period, pulse, flags);
}
   290f8:	b003      	add	sp, #12
   290fa:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   290fc:	f06f 0015 	mvn.w	r0, #21
	return z_impl_pwm_set_cycles(dev, channel, period, pulse, flags);
   29100:	e7fa      	b.n	290f8 <pwm_set_cycles+0x14>

00029102 <pwm_set_pulse_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
   29102:	b500      	push	{lr}
   29104:	b083      	sub	sp, #12
   29106:	460b      	mov	r3, r1
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
		       spec->flags);
   29108:	8982      	ldrh	r2, [r0, #12]
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
   2910a:	9200      	str	r2, [sp, #0]
   2910c:	6882      	ldr	r2, [r0, #8]
   2910e:	6841      	ldr	r1, [r0, #4]
   29110:	6800      	ldr	r0, [r0, #0]
   29112:	f7e7 f989 	bl	10428 <pwm_set>
}
   29116:	b003      	add	sp, #12
   29118:	f85d fb04 	ldr.w	pc, [sp], #4

0002911c <cbprintf_via_va_list>:
{
   2911c:	b510      	push	{r4, lr}
   2911e:	460c      	mov	r4, r1
   29120:	4611      	mov	r1, r2
   29122:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   29124:	9b02      	ldr	r3, [sp, #8]
   29126:	47a0      	blx	r4
}
   29128:	bd10      	pop	{r4, pc}

0002912a <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   2912a:	3840      	subs	r0, #64	; 0x40
   2912c:	b2c0      	uxtb	r0, r0
}
   2912e:	283a      	cmp	r0, #58	; 0x3a
   29130:	bf8c      	ite	hi
   29132:	2000      	movhi	r0, #0
   29134:	2001      	movls	r0, #1
   29136:	4770      	bx	lr

00029138 <append_string>:
{
   29138:	b570      	push	{r4, r5, r6, lr}
   2913a:	4614      	mov	r4, r2
	if (cb == NULL) {
   2913c:	b138      	cbz	r0, 2914e <append_string+0x16>
   2913e:	460d      	mov	r5, r1
   29140:	4619      	mov	r1, r3
   29142:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   29144:	b143      	cbz	r3, 29158 <append_string+0x20>
	return cb(str, strl, ctx);
   29146:	462a      	mov	r2, r5
   29148:	4620      	mov	r0, r4
   2914a:	47b0      	blx	r6
}
   2914c:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   2914e:	4610      	mov	r0, r2
   29150:	f001 ffaf 	bl	2b0b2 <strlen>
   29154:	3001      	adds	r0, #1
   29156:	e7f9      	b.n	2914c <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   29158:	4610      	mov	r0, r2
   2915a:	f001 ffaa 	bl	2b0b2 <strlen>
   2915e:	b283      	uxth	r3, r0
   29160:	3301      	adds	r3, #1
   29162:	b299      	uxth	r1, r3
   29164:	e7ef      	b.n	29146 <append_string+0xe>

00029166 <cbpprintf_external>:
	if (buf == NULL) {
   29166:	b35b      	cbz	r3, 291c0 <cbpprintf_external+0x5a>
{
   29168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2916c:	b082      	sub	sp, #8
   2916e:	4607      	mov	r7, r0
   29170:	4688      	mov	r8, r1
   29172:	4691      	mov	r9, r2
   29174:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   29176:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   29178:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2917a:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   2917c:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2917e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   29182:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   29186:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   29188:	f04f 0a00 	mov.w	sl, #0
   2918c:	e00a      	b.n	291a4 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   2918e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   29192:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   29196:	4620      	mov	r0, r4
   29198:	f001 ff8b 	bl	2b0b2 <strlen>
   2919c:	3001      	adds	r0, #1
   2919e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   291a0:	f10a 0a01 	add.w	sl, sl, #1
   291a4:	45b2      	cmp	sl, r6
   291a6:	d3f2      	bcc.n	2918e <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   291a8:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   291ac:	9300      	str	r3, [sp, #0]
   291ae:	686b      	ldr	r3, [r5, #4]
   291b0:	464a      	mov	r2, r9
   291b2:	4641      	mov	r1, r8
   291b4:	4638      	mov	r0, r7
   291b6:	f7ff ffb1 	bl	2911c <cbprintf_via_va_list>
}
   291ba:	b002      	add	sp, #8
   291bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   291c0:	f06f 0015 	mvn.w	r0, #21
}
   291c4:	4770      	bx	lr

000291c6 <is_ptr>:
{
   291c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   291ca:	4604      	mov	r4, r0
   291cc:	4688      	mov	r8, r1
	int cnt = 0;
   291ce:	2700      	movs	r7, #0
	bool mod = false;
   291d0:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   291d2:	e007      	b.n	291e4 <is_ptr+0x1e>
				if (c == 'p') {
   291d4:	2d70      	cmp	r5, #112	; 0x70
   291d6:	d018      	beq.n	2920a <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   291d8:	4628      	mov	r0, r5
   291da:	f7ff ffa6 	bl	2912a <is_fmt_spec>
   291de:	b9b8      	cbnz	r0, 29210 <is_ptr+0x4a>
		if (c == '%') {
   291e0:	2d25      	cmp	r5, #37	; 0x25
   291e2:	d00e      	beq.n	29202 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   291e4:	f814 5b01 	ldrb.w	r5, [r4], #1
   291e8:	b175      	cbz	r5, 29208 <is_ptr+0x42>
		if (mod) {
   291ea:	2e00      	cmp	r6, #0
   291ec:	d0f8      	beq.n	291e0 <is_ptr+0x1a>
			if (cnt == n) {
   291ee:	4547      	cmp	r7, r8
   291f0:	d0f0      	beq.n	291d4 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   291f2:	4628      	mov	r0, r5
   291f4:	f7ff ff99 	bl	2912a <is_fmt_spec>
   291f8:	2800      	cmp	r0, #0
   291fa:	d0f1      	beq.n	291e0 <is_ptr+0x1a>
				cnt++;
   291fc:	3701      	adds	r7, #1
				mod = false;
   291fe:	2600      	movs	r6, #0
   29200:	e7ee      	b.n	291e0 <is_ptr+0x1a>
			mod = !mod;
   29202:	f086 0601 	eor.w	r6, r6, #1
   29206:	e7ed      	b.n	291e4 <is_ptr+0x1e>
	return false;
   29208:	2600      	movs	r6, #0
}
   2920a:	4630      	mov	r0, r6
   2920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   29210:	2600      	movs	r6, #0
   29212:	e7fa      	b.n	2920a <is_ptr+0x44>

00029214 <arch_printk_char_out>:
}
   29214:	2000      	movs	r0, #0
   29216:	4770      	bx	lr

00029218 <str_out>:
{
   29218:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2921a:	680c      	ldr	r4, [r1, #0]
   2921c:	b154      	cbz	r4, 29234 <str_out+0x1c>
   2921e:	688a      	ldr	r2, [r1, #8]
   29220:	684b      	ldr	r3, [r1, #4]
   29222:	429a      	cmp	r2, r3
   29224:	da06      	bge.n	29234 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   29226:	3b01      	subs	r3, #1
   29228:	429a      	cmp	r2, r3
   2922a:	d008      	beq.n	2923e <str_out+0x26>
		ctx->str[ctx->count++] = c;
   2922c:	1c53      	adds	r3, r2, #1
   2922e:	608b      	str	r3, [r1, #8]
   29230:	54a0      	strb	r0, [r4, r2]
   29232:	e002      	b.n	2923a <str_out+0x22>
		ctx->count++;
   29234:	688b      	ldr	r3, [r1, #8]
   29236:	3301      	adds	r3, #1
   29238:	608b      	str	r3, [r1, #8]
}
   2923a:	bc10      	pop	{r4}
   2923c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   2923e:	1c53      	adds	r3, r2, #1
   29240:	608b      	str	r3, [r1, #8]
   29242:	2300      	movs	r3, #0
   29244:	54a3      	strb	r3, [r4, r2]
   29246:	e7f8      	b.n	2923a <str_out+0x22>

00029248 <printk>:
{
   29248:	b40f      	push	{r0, r1, r2, r3}
   2924a:	b500      	push	{lr}
   2924c:	b083      	sub	sp, #12
   2924e:	a904      	add	r1, sp, #16
   29250:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   29254:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   29256:	f7e8 fb67 	bl	11928 <vprintk>
}
   2925a:	b003      	add	sp, #12
   2925c:	f85d eb04 	ldr.w	lr, [sp], #4
   29260:	b004      	add	sp, #16
   29262:	4770      	bx	lr

00029264 <snprintk>:
{
   29264:	b40c      	push	{r2, r3}
   29266:	b500      	push	{lr}
   29268:	b083      	sub	sp, #12
   2926a:	ab04      	add	r3, sp, #16
   2926c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   29270:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   29272:	f7e8 fb67 	bl	11944 <vsnprintk>
}
   29276:	b003      	add	sp, #12
   29278:	f85d eb04 	ldr.w	lr, [sp], #4
   2927c:	b002      	add	sp, #8
   2927e:	4770      	bx	lr

00029280 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   29280:	b508      	push	{r3, lr}
   29282:	4604      	mov	r4, r0
   29284:	4608      	mov	r0, r1
   29286:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   29288:	461a      	mov	r2, r3
   2928a:	47a0      	blx	r4
	return z_impl_z_current_get();
   2928c:	f7fe fc5e 	bl	27b4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   29290:	f7ed f9f0 	bl	16674 <z_impl_k_thread_abort>

00029294 <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   29294:	00c9      	lsls	r1, r1, #3
   29296:	3104      	adds	r1, #4
}
   29298:	4408      	add	r0, r1
   2929a:	4770      	bx	lr

0002929c <free_list_remove_bidx>:
	void *cmem = &buf[c];
   2929c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		return ((uint16_t *)cmem)[f];
   292a0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   292a4:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
   292a6:	4299      	cmp	r1, r3
   292a8:	d00c      	beq.n	292c4 <free_list_remove_bidx+0x28>
   292aa:	4484      	add	ip, r0
   292ac:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = second;
   292b0:	3204      	adds	r2, #4
   292b2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   292b6:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   292b8:	3206      	adds	r2, #6
   292ba:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   292bc:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   292be:	3304      	adds	r3, #4
   292c0:	52c1      	strh	r1, [r0, r3]
}
   292c2:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   292c4:	68c3      	ldr	r3, [r0, #12]
   292c6:	2101      	movs	r1, #1
   292c8:	4091      	lsls	r1, r2
   292ca:	ea23 0301 	bic.w	r3, r3, r1
   292ce:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   292d0:	3204      	adds	r2, #4
   292d2:	2300      	movs	r3, #0
   292d4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   292d8:	4770      	bx	lr

000292da <free_list_add_bidx>:
{
   292da:	b510      	push	{r4, lr}
	if (b->next == 0U) {
   292dc:	1d13      	adds	r3, r2, #4
   292de:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   292e2:	b974      	cbnz	r4, 29302 <free_list_add_bidx+0x28>
		h->avail_buckets |= BIT(bidx);
   292e4:	68c3      	ldr	r3, [r0, #12]
   292e6:	2401      	movs	r4, #1
   292e8:	4094      	lsls	r4, r2
   292ea:	4323      	orrs	r3, r4
   292ec:	60c3      	str	r3, [r0, #12]
		b->next = c;
   292ee:	3204      	adds	r2, #4
   292f0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   292f4:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   292f6:	1d1a      	adds	r2, r3, #4
   292f8:	b289      	uxth	r1, r1
   292fa:	5281      	strh	r1, [r0, r2]
   292fc:	3306      	adds	r3, #6
   292fe:	52c1      	strh	r1, [r0, r3]
}
   29300:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   29302:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   29304:	3204      	adds	r2, #4
   29306:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   29308:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   2930c:	f10c 0e04 	add.w	lr, ip, #4
   29310:	f820 300e 	strh.w	r3, [r0, lr]
   29314:	f10c 0c06 	add.w	ip, ip, #6
   29318:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   2931c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2931e:	3306      	adds	r3, #6
   29320:	b289      	uxth	r1, r1
   29322:	52c1      	strh	r1, [r0, r3]
   29324:	5281      	strh	r1, [r0, r2]
   29326:	e7eb      	b.n	29300 <free_list_add_bidx+0x26>

00029328 <split_chunks>:
{
   29328:	b500      	push	{lr}
	void *cmem = &buf[c];
   2932a:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   2932c:	3302      	adds	r3, #2
   2932e:	f830 e003 	ldrh.w	lr, [r0, r3]
	chunksz_t lsz = rc - lc;
   29332:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   29336:	1a89      	subs	r1, r1, r2
   29338:	eb01 015e 	add.w	r1, r1, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2933c:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   29340:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   29344:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   29348:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   2934a:	3302      	adds	r3, #2
   2934c:	f820 e003 	strh.w	lr, [r0, r3]
   29350:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   29354:	5ac3      	ldrh	r3, [r0, r3]
	return c + chunk_size(h, c);
   29356:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   2935a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
   2935e:	f85d fb04 	ldr.w	pc, [sp], #4

00029362 <merge_chunks>:
{
   29362:	b500      	push	{lr}
	void *cmem = &buf[c];
   29364:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   29366:	3102      	adds	r1, #2
   29368:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   2936c:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   29370:	f10c 0c02 	add.w	ip, ip, #2
   29374:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   29378:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2937a:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2937e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   29382:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   29386:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   2938a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   2938e:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
   29392:	f85d fb04 	ldr.w	pc, [sp], #4

00029396 <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   29396:	3904      	subs	r1, #4
   29398:	1a08      	subs	r0, r1, r0
}
   2939a:	08c0      	lsrs	r0, r0, #3
   2939c:	4770      	bx	lr

0002939e <free_list_remove>:
{
   2939e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   293a0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   293a4:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   293a6:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   293a8:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   293ac:	f1c2 021f 	rsb	r2, r2, #31
   293b0:	f7ff ff74 	bl	2929c <free_list_remove_bidx>
}
   293b4:	bd08      	pop	{r3, pc}

000293b6 <free_list_add>:
{
   293b6:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   293b8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   293bc:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   293be:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   293c0:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   293c4:	f1c2 021f 	rsb	r2, r2, #31
   293c8:	f7ff ff87 	bl	292da <free_list_add_bidx>
}
   293cc:	bd08      	pop	{r3, pc}

000293ce <free_chunk>:
{
   293ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   293d0:	4604      	mov	r4, r0
   293d2:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   293d4:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   293d6:	1cb7      	adds	r7, r6, #2
   293d8:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   293da:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   293de:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   293e2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   293e4:	f013 0f01 	tst.w	r3, #1
   293e8:	d00c      	beq.n	29404 <free_chunk+0x36>
   293ea:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   293ec:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   293ee:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   293f2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   293f4:	f013 0f01 	tst.w	r3, #1
   293f8:	d00e      	beq.n	29418 <free_chunk+0x4a>
	free_list_add(h, c);
   293fa:	4629      	mov	r1, r5
   293fc:	4620      	mov	r0, r4
   293fe:	f7ff ffda 	bl	293b6 <free_list_add>
}
   29402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   29404:	f7ff ffcb 	bl	2939e <free_list_remove>
   29408:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   2940a:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   2940e:	4629      	mov	r1, r5
   29410:	4620      	mov	r0, r4
   29412:	f7ff ffa6 	bl	29362 <merge_chunks>
   29416:	e7e8      	b.n	293ea <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   29418:	4620      	mov	r0, r4
   2941a:	f7ff ffc0 	bl	2939e <free_list_remove>
   2941e:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   29420:	462a      	mov	r2, r5
   29422:	1a69      	subs	r1, r5, r1
   29424:	4620      	mov	r0, r4
   29426:	f7ff ff9c 	bl	29362 <merge_chunks>
   2942a:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2942c:	1aed      	subs	r5, r5, r3
   2942e:	e7e4      	b.n	293fa <free_chunk+0x2c>

00029430 <alloc_chunk>:
{
   29430:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   29432:	fab1 f381 	clz	r3, r1
	if (b->next) {
   29436:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2943a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   2943e:	b1cd      	cbz	r5, 29474 <alloc_chunk+0x44>
   29440:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   29444:	f04f 0e03 	mov.w	lr, #3
			chunkid_t c = b->next;
   29448:	1d14      	adds	r4, r2, #4
   2944a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   2944e:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   29452:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   29456:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   29458:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   2945c:	d914      	bls.n	29488 <alloc_chunk+0x58>
   2945e:	4484      	add	ip, r0
   29460:	f8bc 4006 	ldrh.w	r4, [ip, #6]
			b->next = next_free_chunk(h, c);
   29464:	1d16      	adds	r6, r2, #4
   29466:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
		} while (--i && b->next != first);
   2946a:	f1be 0e01 	subs.w	lr, lr, #1
   2946e:	d001      	beq.n	29474 <alloc_chunk+0x44>
   29470:	42a5      	cmp	r5, r4
   29472:	d1e9      	bne.n	29448 <alloc_chunk+0x18>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   29474:	68c4      	ldr	r4, [r0, #12]
   29476:	f1c3 0220 	rsb	r2, r3, #32
   2947a:	2301      	movs	r3, #1
   2947c:	4093      	lsls	r3, r2
   2947e:	425b      	negs	r3, r3
	if (bmask != 0U) {
   29480:	401c      	ands	r4, r3
   29482:	d105      	bne.n	29490 <alloc_chunk+0x60>
}
   29484:	4620      	mov	r0, r4
   29486:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   29488:	4621      	mov	r1, r4
   2948a:	f7ff ff07 	bl	2929c <free_list_remove_bidx>
				return c;
   2948e:	e7f9      	b.n	29484 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   29490:	fa94 f2a4 	rbit	r2, r4
   29494:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   29498:	1d13      	adds	r3, r2, #4
   2949a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2949e:	4621      	mov	r1, r4
   294a0:	f7ff fefc 	bl	2929c <free_list_remove_bidx>
		return c;
   294a4:	e7ee      	b.n	29484 <alloc_chunk+0x54>

000294a6 <sys_heap_alloc>:
{
   294a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   294a8:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   294aa:	b341      	cbz	r1, 294fe <sys_heap_alloc+0x58>
   294ac:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   294ae:	68aa      	ldr	r2, [r5, #8]
   294b0:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   294b4:	d925      	bls.n	29502 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   294b6:	330b      	adds	r3, #11
   294b8:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   294ba:	4621      	mov	r1, r4
   294bc:	4628      	mov	r0, r5
   294be:	f7ff ffb7 	bl	29430 <alloc_chunk>
	if (c == 0U) {
   294c2:	4607      	mov	r7, r0
   294c4:	b1f8      	cbz	r0, 29506 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   294c6:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   294c8:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   294cc:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
   294ce:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   294d2:	d309      	bcc.n	294e8 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   294d4:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   294d6:	885a      	ldrh	r2, [r3, #2]
   294d8:	f042 0201 	orr.w	r2, r2, #1
   294dc:	805a      	strh	r2, [r3, #2]
	mem = chunk_mem(h, c);
   294de:	4639      	mov	r1, r7
   294e0:	4628      	mov	r0, r5
   294e2:	f7ff fed7 	bl	29294 <chunk_mem>
}
   294e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   294e8:	4404      	add	r4, r0
   294ea:	4622      	mov	r2, r4
   294ec:	4601      	mov	r1, r0
   294ee:	4628      	mov	r0, r5
   294f0:	f7ff ff1a 	bl	29328 <split_chunks>
		free_list_add(h, c + chunk_sz);
   294f4:	4621      	mov	r1, r4
   294f6:	4628      	mov	r0, r5
   294f8:	f7ff ff5d 	bl	293b6 <free_list_add>
   294fc:	e7ea      	b.n	294d4 <sys_heap_alloc+0x2e>
		return NULL;
   294fe:	2000      	movs	r0, #0
   29500:	e7f1      	b.n	294e6 <sys_heap_alloc+0x40>
   29502:	2000      	movs	r0, #0
   29504:	e7ef      	b.n	294e6 <sys_heap_alloc+0x40>
		return NULL;
   29506:	2000      	movs	r0, #0
   29508:	e7ed      	b.n	294e6 <sys_heap_alloc+0x40>

0002950a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   2950a:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2950e:	8b83      	ldrh	r3, [r0, #28]
   29510:	f023 0307 	bic.w	r3, r3, #7
   29514:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   29516:	8383      	strh	r3, [r0, #28]
}
   29518:	4770      	bx	lr

0002951a <notify_monitors>:
{
   2951a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2951e:	4606      	mov	r6, r0
   29520:	460f      	mov	r7, r1
   29522:	4690      	mov	r8, r2
   29524:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   29526:	b121      	cbz	r1, 29532 <notify_monitors+0x18>
	return node->next;
   29528:	680c      	ldr	r4, [r1, #0]
   2952a:	b13c      	cbz	r4, 2953c <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2952c:	b931      	cbnz	r1, 2953c <notify_monitors+0x22>
   2952e:	460c      	mov	r4, r1
   29530:	e004      	b.n	2953c <notify_monitors+0x22>
   29532:	460c      	mov	r4, r1
   29534:	e002      	b.n	2953c <notify_monitors+0x22>
   29536:	4623      	mov	r3, r4
   29538:	4621      	mov	r1, r4
   2953a:	461c      	mov	r4, r3
   2953c:	b169      	cbz	r1, 2955a <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   2953e:	684d      	ldr	r5, [r1, #4]
   29540:	4643      	mov	r3, r8
   29542:	463a      	mov	r2, r7
   29544:	4630      	mov	r0, r6
   29546:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   29548:	2c00      	cmp	r4, #0
   2954a:	d0f4      	beq.n	29536 <notify_monitors+0x1c>
	return node->next;
   2954c:	6823      	ldr	r3, [r4, #0]
   2954e:	2b00      	cmp	r3, #0
   29550:	d0f2      	beq.n	29538 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29552:	2c00      	cmp	r4, #0
   29554:	d1f0      	bne.n	29538 <notify_monitors+0x1e>
   29556:	4623      	mov	r3, r4
   29558:	e7ee      	b.n	29538 <notify_monitors+0x1e>
}
   2955a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002955e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2955e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   29560:	f013 0307 	ands.w	r3, r3, #7
   29564:	d103      	bne.n	2956e <process_recheck+0x10>
	return list->head;
   29566:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   29568:	b10a      	cbz	r2, 2956e <process_recheck+0x10>
		evt = EVT_START;
   2956a:	2003      	movs	r0, #3
   2956c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2956e:	2b02      	cmp	r3, #2
   29570:	d003      	beq.n	2957a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   29572:	2b01      	cmp	r3, #1
   29574:	d006      	beq.n	29584 <process_recheck+0x26>
	int evt = EVT_NOP;
   29576:	2000      	movs	r0, #0
   29578:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2957a:	8bc2      	ldrh	r2, [r0, #30]
   2957c:	2a00      	cmp	r2, #0
   2957e:	d1f8      	bne.n	29572 <process_recheck+0x14>
		evt = EVT_STOP;
   29580:	2004      	movs	r0, #4
   29582:	4770      	bx	lr
   29584:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   29586:	b10b      	cbz	r3, 2958c <process_recheck+0x2e>
		evt = EVT_RESET;
   29588:	2005      	movs	r0, #5
}
   2958a:	4770      	bx	lr
	int evt = EVT_NOP;
   2958c:	2000      	movs	r0, #0
   2958e:	4770      	bx	lr

00029590 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   29590:	b150      	cbz	r0, 295a8 <validate_args+0x18>
{
   29592:	b510      	push	{r4, lr}
   29594:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   29596:	b151      	cbz	r1, 295ae <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   29598:	1d08      	adds	r0, r1, #4
   2959a:	f000 f854 	bl	29646 <sys_notify_validate>
	if ((rv == 0)
   2959e:	b910      	cbnz	r0, 295a6 <validate_args+0x16>
	    && ((cli->notify.flags
   295a0:	68a3      	ldr	r3, [r4, #8]
   295a2:	2b03      	cmp	r3, #3
   295a4:	d806      	bhi.n	295b4 <validate_args+0x24>
}
   295a6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   295a8:	f06f 0015 	mvn.w	r0, #21
}
   295ac:	4770      	bx	lr
		return -EINVAL;
   295ae:	f06f 0015 	mvn.w	r0, #21
   295b2:	e7f8      	b.n	295a6 <validate_args+0x16>
		rv = -EINVAL;
   295b4:	f06f 0015 	mvn.w	r0, #21
   295b8:	e7f5      	b.n	295a6 <validate_args+0x16>

000295ba <notify_one>:
{
   295ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   295be:	4607      	mov	r7, r0
   295c0:	460c      	mov	r4, r1
   295c2:	4616      	mov	r6, r2
   295c4:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   295c6:	4619      	mov	r1, r3
   295c8:	1d20      	adds	r0, r4, #4
   295ca:	f7e8 fe79 	bl	122c0 <sys_notify_finalize>
	if (cb) {
   295ce:	b128      	cbz	r0, 295dc <notify_one+0x22>
   295d0:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   295d2:	462b      	mov	r3, r5
   295d4:	4632      	mov	r2, r6
   295d6:	4621      	mov	r1, r4
   295d8:	4638      	mov	r0, r7
   295da:	47c0      	blx	r8
}
   295dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000295e0 <notify_all>:
{
   295e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   295e4:	4680      	mov	r8, r0
   295e6:	460c      	mov	r4, r1
   295e8:	4617      	mov	r7, r2
   295ea:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   295ec:	e004      	b.n	295f8 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   295ee:	4633      	mov	r3, r6
   295f0:	463a      	mov	r2, r7
   295f2:	4640      	mov	r0, r8
   295f4:	f7ff ffe1 	bl	295ba <notify_one>
   295f8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   295fa:	b131      	cbz	r1, 2960a <notify_all+0x2a>
	return node->next;
   295fc:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   295fe:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29600:	6863      	ldr	r3, [r4, #4]
   29602:	428b      	cmp	r3, r1
   29604:	d1f3      	bne.n	295ee <notify_all+0xe>
	list->tail = node;
   29606:	6065      	str	r5, [r4, #4]
}
   29608:	e7f1      	b.n	295ee <notify_all+0xe>
}
   2960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002960e <onoff_manager_init>:
	if ((mgr == NULL)
   2960e:	b170      	cbz	r0, 2962e <onoff_manager_init+0x20>
{
   29610:	b538      	push	{r3, r4, r5, lr}
   29612:	460c      	mov	r4, r1
   29614:	4605      	mov	r5, r0
	    || (transitions == NULL)
   29616:	b169      	cbz	r1, 29634 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   29618:	680b      	ldr	r3, [r1, #0]
   2961a:	b173      	cbz	r3, 2963a <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   2961c:	684b      	ldr	r3, [r1, #4]
   2961e:	b17b      	cbz	r3, 29640 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   29620:	2220      	movs	r2, #32
   29622:	2100      	movs	r1, #0
   29624:	f001 fdb7 	bl	2b196 <memset>
   29628:	612c      	str	r4, [r5, #16]
	return 0;
   2962a:	2000      	movs	r0, #0
}
   2962c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2962e:	f06f 0015 	mvn.w	r0, #21
}
   29632:	4770      	bx	lr
		return -EINVAL;
   29634:	f06f 0015 	mvn.w	r0, #21
   29638:	e7f8      	b.n	2962c <onoff_manager_init+0x1e>
   2963a:	f06f 0015 	mvn.w	r0, #21
   2963e:	e7f5      	b.n	2962c <onoff_manager_init+0x1e>
   29640:	f06f 0015 	mvn.w	r0, #21
   29644:	e7f2      	b.n	2962c <onoff_manager_init+0x1e>

00029646 <sys_notify_validate>:
	if (notify == NULL) {
   29646:	4602      	mov	r2, r0
   29648:	b1b0      	cbz	r0, 29678 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2964a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2964c:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   29650:	2b02      	cmp	r3, #2
   29652:	d00b      	beq.n	2966c <sys_notify_validate+0x26>
   29654:	2b03      	cmp	r3, #3
   29656:	d004      	beq.n	29662 <sys_notify_validate+0x1c>
   29658:	2b01      	cmp	r3, #1
   2965a:	d004      	beq.n	29666 <sys_notify_validate+0x20>
   2965c:	f06f 0015 	mvn.w	r0, #21
   29660:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   29662:	6803      	ldr	r3, [r0, #0]
   29664:	b15b      	cbz	r3, 2967e <sys_notify_validate+0x38>
		notify->result = 0;
   29666:	2000      	movs	r0, #0
   29668:	6090      	str	r0, [r2, #8]
   2966a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2966c:	6803      	ldr	r3, [r0, #0]
   2966e:	2b00      	cmp	r3, #0
   29670:	d1f9      	bne.n	29666 <sys_notify_validate+0x20>
			rv = -EINVAL;
   29672:	f06f 0015 	mvn.w	r0, #21
}
   29676:	4770      	bx	lr
		return -EINVAL;
   29678:	f06f 0015 	mvn.w	r0, #21
   2967c:	4770      	bx	lr
			rv = -EINVAL;
   2967e:	f06f 0015 	mvn.w	r0, #21
   29682:	4770      	bx	lr

00029684 <extract_decimal>:
{
   29684:	4684      	mov	ip, r0
	const char *sp = *str;
   29686:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   29688:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   2968a:	e006      	b.n	2969a <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   2968c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   29690:	3201      	adds	r2, #1
   29692:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   29696:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   2969a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2969c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   296a0:	2909      	cmp	r1, #9
   296a2:	d9f3      	bls.n	2968c <extract_decimal+0x8>
	*str = sp;
   296a4:	f8cc 2000 	str.w	r2, [ip]
}
   296a8:	4770      	bx	lr

000296aa <extract_width>:
{
   296aa:	b530      	push	{r4, r5, lr}
   296ac:	b083      	sub	sp, #12
   296ae:	4604      	mov	r4, r0
   296b0:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   296b2:	7803      	ldrb	r3, [r0, #0]
   296b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   296b8:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   296ba:	460d      	mov	r5, r1
   296bc:	780b      	ldrb	r3, [r1, #0]
   296be:	2b2a      	cmp	r3, #42	; 0x2a
   296c0:	d018      	beq.n	296f4 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   296c2:	a801      	add	r0, sp, #4
   296c4:	f7ff ffde 	bl	29684 <extract_decimal>
	if (sp != wp) {
   296c8:	9b01      	ldr	r3, [sp, #4]
   296ca:	429d      	cmp	r5, r3
   296cc:	d00f      	beq.n	296ee <extract_width+0x44>
		conv->width_present = true;
   296ce:	7823      	ldrb	r3, [r4, #0]
   296d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   296d4:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   296d6:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   296d8:	b2db      	uxtb	r3, r3
   296da:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   296de:	2800      	cmp	r0, #0
   296e0:	db10      	blt.n	29704 <extract_width+0x5a>
   296e2:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   296e4:	4313      	orrs	r3, r2
   296e6:	7822      	ldrb	r2, [r4, #0]
   296e8:	f363 0241 	bfi	r2, r3, #1, #1
   296ec:	7022      	strb	r2, [r4, #0]
	return sp;
   296ee:	9801      	ldr	r0, [sp, #4]
}
   296f0:	b003      	add	sp, #12
   296f2:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   296f4:	7843      	ldrb	r3, [r0, #1]
   296f6:	f043 0301 	orr.w	r3, r3, #1
   296fa:	7043      	strb	r3, [r0, #1]
		return ++sp;
   296fc:	4608      	mov	r0, r1
   296fe:	3001      	adds	r0, #1
   29700:	9001      	str	r0, [sp, #4]
   29702:	e7f5      	b.n	296f0 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   29704:	2201      	movs	r2, #1
   29706:	e7ed      	b.n	296e4 <extract_width+0x3a>

00029708 <extract_prec>:
{
   29708:	b510      	push	{r4, lr}
   2970a:	b082      	sub	sp, #8
   2970c:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   2970e:	780b      	ldrb	r3, [r1, #0]
   29710:	2b2e      	cmp	r3, #46	; 0x2e
   29712:	bf14      	ite	ne
   29714:	2300      	movne	r3, #0
   29716:	2301      	moveq	r3, #1
   29718:	7842      	ldrb	r2, [r0, #1]
   2971a:	f363 0241 	bfi	r2, r3, #1, #1
   2971e:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   29720:	b1c3      	cbz	r3, 29754 <extract_prec+0x4c>
   29722:	4604      	mov	r4, r0
	++sp;
   29724:	9b01      	ldr	r3, [sp, #4]
   29726:	1c5a      	adds	r2, r3, #1
   29728:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   2972a:	785b      	ldrb	r3, [r3, #1]
   2972c:	2b2a      	cmp	r3, #42	; 0x2a
   2972e:	d013      	beq.n	29758 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   29730:	a801      	add	r0, sp, #4
   29732:	f7ff ffa7 	bl	29684 <extract_decimal>
	conv->prec_value = prec;
   29736:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   29738:	7823      	ldrb	r3, [r4, #0]
   2973a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   2973e:	2800      	cmp	r0, #0
   29740:	db12      	blt.n	29768 <extract_prec+0x60>
   29742:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   29744:	4313      	orrs	r3, r2
   29746:	7822      	ldrb	r2, [r4, #0]
   29748:	f363 0241 	bfi	r2, r3, #1, #1
   2974c:	7022      	strb	r2, [r4, #0]
	return sp;
   2974e:	9801      	ldr	r0, [sp, #4]
}
   29750:	b002      	add	sp, #8
   29752:	bd10      	pop	{r4, pc}
		return sp;
   29754:	4608      	mov	r0, r1
   29756:	e7fb      	b.n	29750 <extract_prec+0x48>
		conv->prec_star = true;
   29758:	7843      	ldrb	r3, [r0, #1]
   2975a:	f043 0304 	orr.w	r3, r3, #4
   2975e:	7043      	strb	r3, [r0, #1]
		return ++sp;
   29760:	4610      	mov	r0, r2
   29762:	3001      	adds	r0, #1
   29764:	9001      	str	r0, [sp, #4]
   29766:	e7f3      	b.n	29750 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   29768:	2201      	movs	r2, #1
   2976a:	e7eb      	b.n	29744 <extract_prec+0x3c>

0002976c <extract_length>:
{
   2976c:	4602      	mov	r2, r0
	switch (*sp) {
   2976e:	780b      	ldrb	r3, [r1, #0]
   29770:	3b4c      	subs	r3, #76	; 0x4c
   29772:	2b2e      	cmp	r3, #46	; 0x2e
   29774:	d85b      	bhi.n	2982e <extract_length+0xc2>
   29776:	e8df f003 	tbb	[pc, r3]
   2977a:	5a4f      	.short	0x5a4f
   2977c:	5a5a5a5a 	.word	0x5a5a5a5a
   29780:	5a5a5a5a 	.word	0x5a5a5a5a
   29784:	5a5a5a5a 	.word	0x5a5a5a5a
   29788:	5a5a5a5a 	.word	0x5a5a5a5a
   2978c:	5a5a5a5a 	.word	0x5a5a5a5a
   29790:	5a5a5a5a 	.word	0x5a5a5a5a
   29794:	5a185a5a 	.word	0x5a185a5a
   29798:	5a295a3a 	.word	0x5a295a3a
   2979c:	5a5a5a5a 	.word	0x5a5a5a5a
   297a0:	5a485a5a 	.word	0x5a485a5a
   297a4:	5a5a5a5a 	.word	0x5a5a5a5a
   297a8:	41          	.byte	0x41
   297a9:	00          	.byte	0x00
		if (*++sp == 'h') {
   297aa:	1c48      	adds	r0, r1, #1
   297ac:	784b      	ldrb	r3, [r1, #1]
   297ae:	2b68      	cmp	r3, #104	; 0x68
   297b0:	d005      	beq.n	297be <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   297b2:	7853      	ldrb	r3, [r2, #1]
   297b4:	2102      	movs	r1, #2
   297b6:	f361 03c6 	bfi	r3, r1, #3, #4
   297ba:	7053      	strb	r3, [r2, #1]
   297bc:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   297be:	7853      	ldrb	r3, [r2, #1]
   297c0:	2001      	movs	r0, #1
   297c2:	f360 03c6 	bfi	r3, r0, #3, #4
   297c6:	7053      	strb	r3, [r2, #1]
			++sp;
   297c8:	1c88      	adds	r0, r1, #2
   297ca:	4770      	bx	lr
		if (*++sp == 'l') {
   297cc:	1c48      	adds	r0, r1, #1
   297ce:	784b      	ldrb	r3, [r1, #1]
   297d0:	2b6c      	cmp	r3, #108	; 0x6c
   297d2:	d005      	beq.n	297e0 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   297d4:	7853      	ldrb	r3, [r2, #1]
   297d6:	2103      	movs	r1, #3
   297d8:	f361 03c6 	bfi	r3, r1, #3, #4
   297dc:	7053      	strb	r3, [r2, #1]
   297de:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   297e0:	7853      	ldrb	r3, [r2, #1]
   297e2:	2004      	movs	r0, #4
   297e4:	f360 03c6 	bfi	r3, r0, #3, #4
   297e8:	7053      	strb	r3, [r2, #1]
			++sp;
   297ea:	1c88      	adds	r0, r1, #2
   297ec:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   297ee:	7853      	ldrb	r3, [r2, #1]
   297f0:	2005      	movs	r0, #5
   297f2:	f360 03c6 	bfi	r3, r0, #3, #4
   297f6:	7053      	strb	r3, [r2, #1]
		++sp;
   297f8:	1c48      	adds	r0, r1, #1
		break;
   297fa:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   297fc:	7853      	ldrb	r3, [r2, #1]
   297fe:	2006      	movs	r0, #6
   29800:	f360 03c6 	bfi	r3, r0, #3, #4
   29804:	7053      	strb	r3, [r2, #1]
		++sp;
   29806:	1c48      	adds	r0, r1, #1
		break;
   29808:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   2980a:	7853      	ldrb	r3, [r2, #1]
   2980c:	2007      	movs	r0, #7
   2980e:	f360 03c6 	bfi	r3, r0, #3, #4
   29812:	7053      	strb	r3, [r2, #1]
		++sp;
   29814:	1c48      	adds	r0, r1, #1
		break;
   29816:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   29818:	7853      	ldrb	r3, [r2, #1]
   2981a:	2008      	movs	r0, #8
   2981c:	f360 03c6 	bfi	r3, r0, #3, #4
   29820:	7053      	strb	r3, [r2, #1]
		++sp;
   29822:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   29824:	7813      	ldrb	r3, [r2, #0]
   29826:	f043 0302 	orr.w	r3, r3, #2
   2982a:	7013      	strb	r3, [r2, #0]
		break;
   2982c:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   2982e:	7853      	ldrb	r3, [r2, #1]
   29830:	f36f 03c6 	bfc	r3, #3, #4
   29834:	7053      	strb	r3, [r2, #1]
		break;
   29836:	4608      	mov	r0, r1
}
   29838:	4770      	bx	lr

0002983a <extract_specifier>:
{
   2983a:	b500      	push	{lr}
   2983c:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   2983e:	4608      	mov	r0, r1
   29840:	f810 3b01 	ldrb.w	r3, [r0], #1
   29844:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   29846:	2b78      	cmp	r3, #120	; 0x78
   29848:	d817      	bhi.n	2987a <extract_specifier+0x40>
   2984a:	2b6e      	cmp	r3, #110	; 0x6e
   2984c:	d229      	bcs.n	298a2 <extract_specifier+0x68>
   2984e:	2b69      	cmp	r3, #105	; 0x69
   29850:	d813      	bhi.n	2987a <extract_specifier+0x40>
   29852:	2b58      	cmp	r3, #88	; 0x58
   29854:	d317      	bcc.n	29886 <extract_specifier+0x4c>
   29856:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   2985a:	fa5f fc8c 	uxtb.w	ip, ip
   2985e:	2101      	movs	r1, #1
   29860:	fa01 f10c 	lsl.w	r1, r1, ip
   29864:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   29868:	d114      	bne.n	29894 <extract_specifier+0x5a>
   2986a:	f640 0c01 	movw	ip, #2049	; 0x801
   2986e:	ea11 0f0c 	tst.w	r1, ip
   29872:	d155      	bne.n	29920 <extract_specifier+0xe6>
   29874:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   29878:	d13a      	bne.n	298f0 <extract_specifier+0xb6>
		conv->invalid = true;
   2987a:	7813      	ldrb	r3, [r2, #0]
   2987c:	f043 0301 	orr.w	r3, r3, #1
   29880:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   29882:	2100      	movs	r1, #0
		break;
   29884:	e042      	b.n	2990c <extract_specifier+0xd2>
	switch (conv->specifier) {
   29886:	2b41      	cmp	r3, #65	; 0x41
   29888:	d004      	beq.n	29894 <extract_specifier+0x5a>
   2988a:	d3f6      	bcc.n	2987a <extract_specifier+0x40>
   2988c:	3b45      	subs	r3, #69	; 0x45
   2988e:	b2db      	uxtb	r3, r3
   29890:	2b02      	cmp	r3, #2
   29892:	d8f2      	bhi.n	2987a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   29894:	7893      	ldrb	r3, [r2, #2]
   29896:	2104      	movs	r1, #4
   29898:	f361 0302 	bfi	r3, r1, #0, #3
   2989c:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   2989e:	2101      	movs	r1, #1
			break;
   298a0:	e034      	b.n	2990c <extract_specifier+0xd2>
	switch (conv->specifier) {
   298a2:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   298a6:	b2c9      	uxtb	r1, r1
   298a8:	f04f 0c01 	mov.w	ip, #1
   298ac:	fa0c fc01 	lsl.w	ip, ip, r1
   298b0:	f240 4182 	movw	r1, #1154	; 0x482
   298b4:	ea1c 0f01 	tst.w	ip, r1
   298b8:	bf14      	ite	ne
   298ba:	f04f 0e01 	movne.w	lr, #1
   298be:	f04f 0e00 	moveq.w	lr, #0
   298c2:	d12d      	bne.n	29920 <extract_specifier+0xe6>
   298c4:	f01c 0f24 	tst.w	ip, #36	; 0x24
   298c8:	bf14      	ite	ne
   298ca:	2101      	movne	r1, #1
   298cc:	2100      	moveq	r1, #0
   298ce:	d139      	bne.n	29944 <extract_specifier+0x10a>
   298d0:	f01c 0c01 	ands.w	ip, ip, #1
   298d4:	d0d1      	beq.n	2987a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   298d6:	7893      	ldrb	r3, [r2, #2]
   298d8:	f04f 0e03 	mov.w	lr, #3
   298dc:	f36e 0302 	bfi	r3, lr, #0, #3
   298e0:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   298e2:	7853      	ldrb	r3, [r2, #1]
   298e4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   298e8:	2b40      	cmp	r3, #64	; 0x40
   298ea:	d10f      	bne.n	2990c <extract_specifier+0xd2>
			unsupported = true;
   298ec:	4661      	mov	r1, ip
   298ee:	e00d      	b.n	2990c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   298f0:	7891      	ldrb	r1, [r2, #2]
   298f2:	f04f 0c01 	mov.w	ip, #1
   298f6:	f36c 0102 	bfi	r1, ip, #0, #3
   298fa:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   298fc:	7851      	ldrb	r1, [r2, #1]
   298fe:	f001 0178 	and.w	r1, r1, #120	; 0x78
   29902:	2940      	cmp	r1, #64	; 0x40
   29904:	d013      	beq.n	2992e <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   29906:	2b63      	cmp	r3, #99	; 0x63
   29908:	d018      	beq.n	2993c <extract_specifier+0x102>
	bool unsupported = false;
   2990a:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   2990c:	7813      	ldrb	r3, [r2, #0]
   2990e:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   29912:	ea41 010c 	orr.w	r1, r1, ip
   29916:	f361 0341 	bfi	r3, r1, #1, #1
   2991a:	7013      	strb	r3, [r2, #0]
}
   2991c:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   29920:	7891      	ldrb	r1, [r2, #2]
   29922:	f04f 0c02 	mov.w	ip, #2
   29926:	f36c 0102 	bfi	r1, ip, #0, #3
   2992a:	7091      	strb	r1, [r2, #2]
   2992c:	e7e6      	b.n	298fc <extract_specifier+0xc2>
			conv->invalid = true;
   2992e:	f892 c000 	ldrb.w	ip, [r2]
   29932:	f04c 0c01 	orr.w	ip, ip, #1
   29936:	f882 c000 	strb.w	ip, [r2]
   2993a:	e7e4      	b.n	29906 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   2993c:	3900      	subs	r1, #0
   2993e:	bf18      	it	ne
   29940:	2101      	movne	r1, #1
   29942:	e7e3      	b.n	2990c <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   29944:	7893      	ldrb	r3, [r2, #2]
   29946:	f04f 0c03 	mov.w	ip, #3
   2994a:	f36c 0302 	bfi	r3, ip, #0, #3
   2994e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   29950:	7853      	ldrb	r3, [r2, #1]
   29952:	f013 0f78 	tst.w	r3, #120	; 0x78
   29956:	d1d9      	bne.n	2990c <extract_specifier+0xd2>
	bool unsupported = false;
   29958:	4671      	mov	r1, lr
   2995a:	e7d7      	b.n	2990c <extract_specifier+0xd2>

0002995c <extract_conversion>:
{
   2995c:	b510      	push	{r4, lr}
   2995e:	4604      	mov	r4, r0
   29960:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   29962:	2300      	movs	r3, #0
   29964:	6023      	str	r3, [r4, #0]
   29966:	6063      	str	r3, [r4, #4]
   29968:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   2996a:	784b      	ldrb	r3, [r1, #1]
   2996c:	2b25      	cmp	r3, #37	; 0x25
   2996e:	d014      	beq.n	2999a <extract_conversion+0x3e>
   29970:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   29972:	4620      	mov	r0, r4
   29974:	f7e8 fcd0 	bl	12318 <extract_flags>
   29978:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   2997a:	4620      	mov	r0, r4
   2997c:	f7ff fe95 	bl	296aa <extract_width>
   29980:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   29982:	4620      	mov	r0, r4
   29984:	f7ff fec0 	bl	29708 <extract_prec>
   29988:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   2998a:	4620      	mov	r0, r4
   2998c:	f7ff feee 	bl	2976c <extract_length>
   29990:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   29992:	4620      	mov	r0, r4
   29994:	f7ff ff51 	bl	2983a <extract_specifier>
}
   29998:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   2999a:	3002      	adds	r0, #2
   2999c:	70e3      	strb	r3, [r4, #3]
		return sp;
   2999e:	e7fb      	b.n	29998 <extract_conversion+0x3c>

000299a0 <conversion_radix>:
	switch (specifier) {
   299a0:	286f      	cmp	r0, #111	; 0x6f
   299a2:	d00c      	beq.n	299be <conversion_radix+0x1e>
   299a4:	d905      	bls.n	299b2 <conversion_radix+0x12>
   299a6:	2870      	cmp	r0, #112	; 0x70
   299a8:	d00b      	beq.n	299c2 <conversion_radix+0x22>
   299aa:	2878      	cmp	r0, #120	; 0x78
   299ac:	d10b      	bne.n	299c6 <conversion_radix+0x26>
		return 16;
   299ae:	2010      	movs	r0, #16
   299b0:	4770      	bx	lr
	switch (specifier) {
   299b2:	2858      	cmp	r0, #88	; 0x58
   299b4:	d001      	beq.n	299ba <conversion_radix+0x1a>
   299b6:	200a      	movs	r0, #10
   299b8:	4770      	bx	lr
		return 16;
   299ba:	2010      	movs	r0, #16
   299bc:	4770      	bx	lr
		return 8;
   299be:	2008      	movs	r0, #8
   299c0:	4770      	bx	lr
		return 16;
   299c2:	2010      	movs	r0, #16
   299c4:	4770      	bx	lr
	switch (specifier) {
   299c6:	200a      	movs	r0, #10
}
   299c8:	4770      	bx	lr

000299ca <encode_uint>:
{
   299ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299ce:	4605      	mov	r5, r0
   299d0:	460c      	mov	r4, r1
   299d2:	4693      	mov	fp, r2
   299d4:	4699      	mov	r9, r3
   299d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   299d8:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   299da:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   299de:	f7ff ffdf 	bl	299a0 <conversion_radix>
   299e2:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   299e4:	e015      	b.n	29a12 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   299e6:	f1ba 0f19 	cmp.w	sl, #25
   299ea:	d820      	bhi.n	29a2e <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   299ec:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   299ee:	3237      	adds	r2, #55	; 0x37
   299f0:	b2d2      	uxtb	r2, r2
   299f2:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   299f6:	4632      	mov	r2, r6
   299f8:	4643      	mov	r3, r8
   299fa:	4628      	mov	r0, r5
   299fc:	4621      	mov	r1, r4
   299fe:	f7e6 fbab 	bl	10158 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   29a02:	42b5      	cmp	r5, r6
   29a04:	f174 0400 	sbcs.w	r4, r4, #0
   29a08:	d315      	bcc.n	29a36 <encode_uint+0x6c>
   29a0a:	454f      	cmp	r7, r9
   29a0c:	d913      	bls.n	29a36 <encode_uint+0x6c>
		value /= radix;
   29a0e:	4605      	mov	r5, r0
   29a10:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   29a12:	f04f 0800 	mov.w	r8, #0
   29a16:	4632      	mov	r2, r6
   29a18:	4643      	mov	r3, r8
   29a1a:	4628      	mov	r0, r5
   29a1c:	4621      	mov	r1, r4
   29a1e:	f7e6 fb9b 	bl	10158 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29a22:	2a09      	cmp	r2, #9
   29a24:	d8df      	bhi.n	299e6 <encode_uint+0x1c>
   29a26:	b2d2      	uxtb	r2, r2
   29a28:	3230      	adds	r2, #48	; 0x30
   29a2a:	b2d2      	uxtb	r2, r2
   29a2c:	e7e1      	b.n	299f2 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   29a2e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29a30:	3257      	adds	r2, #87	; 0x57
   29a32:	b2d2      	uxtb	r2, r2
   29a34:	e7dd      	b.n	299f2 <encode_uint+0x28>
	if (conv->flag_hash) {
   29a36:	f89b 3000 	ldrb.w	r3, [fp]
   29a3a:	f013 0f20 	tst.w	r3, #32
   29a3e:	d003      	beq.n	29a48 <encode_uint+0x7e>
		if (radix == 8) {
   29a40:	2e08      	cmp	r6, #8
   29a42:	d004      	beq.n	29a4e <encode_uint+0x84>
		} else if (radix == 16) {
   29a44:	2e10      	cmp	r6, #16
   29a46:	d009      	beq.n	29a5c <encode_uint+0x92>
}
   29a48:	4638      	mov	r0, r7
   29a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   29a4e:	f89b 3002 	ldrb.w	r3, [fp, #2]
   29a52:	f043 0308 	orr.w	r3, r3, #8
   29a56:	f88b 3002 	strb.w	r3, [fp, #2]
   29a5a:	e7f5      	b.n	29a48 <encode_uint+0x7e>
			conv->altform_0c = true;
   29a5c:	f89b 3002 	ldrb.w	r3, [fp, #2]
   29a60:	f043 0310 	orr.w	r3, r3, #16
   29a64:	f88b 3002 	strb.w	r3, [fp, #2]
   29a68:	e7ee      	b.n	29a48 <encode_uint+0x7e>

00029a6a <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   29a6a:	7843      	ldrb	r3, [r0, #1]
   29a6c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   29a70:	2b07      	cmp	r3, #7
   29a72:	d818      	bhi.n	29aa6 <store_count+0x3c>
   29a74:	e8df f003 	tbb	[pc, r3]
   29a78:	0a080604 	.word	0x0a080604
   29a7c:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
   29a80:	600a      	str	r2, [r1, #0]
		break;
   29a82:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   29a84:	700a      	strb	r2, [r1, #0]
		break;
   29a86:	4770      	bx	lr
		*(short *)dp = (short)count;
   29a88:	800a      	strh	r2, [r1, #0]
		break;
   29a8a:	4770      	bx	lr
		*(long *)dp = (long)count;
   29a8c:	600a      	str	r2, [r1, #0]
		break;
   29a8e:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   29a90:	17d3      	asrs	r3, r2, #31
   29a92:	600a      	str	r2, [r1, #0]
   29a94:	604b      	str	r3, [r1, #4]
		break;
   29a96:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   29a98:	17d3      	asrs	r3, r2, #31
   29a9a:	600a      	str	r2, [r1, #0]
   29a9c:	604b      	str	r3, [r1, #4]
		break;
   29a9e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   29aa0:	600a      	str	r2, [r1, #0]
		break;
   29aa2:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   29aa4:	600a      	str	r2, [r1, #0]
}
   29aa6:	4770      	bx	lr

00029aa8 <outs>:
{
   29aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29aac:	4607      	mov	r7, r0
   29aae:	460e      	mov	r6, r1
   29ab0:	4614      	mov	r4, r2
   29ab2:	4698      	mov	r8, r3
	size_t count = 0;
   29ab4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   29ab6:	e006      	b.n	29ac6 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   29ab8:	4631      	mov	r1, r6
   29aba:	f814 0b01 	ldrb.w	r0, [r4], #1
   29abe:	47b8      	blx	r7
		if (rc < 0) {
   29ac0:	2800      	cmp	r0, #0
   29ac2:	db09      	blt.n	29ad8 <outs+0x30>
		++count;
   29ac4:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   29ac6:	4544      	cmp	r4, r8
   29ac8:	d3f6      	bcc.n	29ab8 <outs+0x10>
   29aca:	f1b8 0f00 	cmp.w	r8, #0
   29ace:	d102      	bne.n	29ad6 <outs+0x2e>
   29ad0:	7823      	ldrb	r3, [r4, #0]
   29ad2:	2b00      	cmp	r3, #0
   29ad4:	d1f0      	bne.n	29ab8 <outs+0x10>
	return (int)count;
   29ad6:	4628      	mov	r0, r5
}
   29ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029adc <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   29adc:	4040      	eors	r0, r0
   29ade:	f380 8811 	msr	BASEPRI, r0
   29ae2:	f04f 0004 	mov.w	r0, #4
   29ae6:	df02      	svc	2
}
   29ae8:	4770      	bx	lr

00029aea <assert_print>:

void assert_print(const char *fmt, ...)
{
   29aea:	b40f      	push	{r0, r1, r2, r3}
   29aec:	b500      	push	{lr}
   29aee:	b083      	sub	sp, #12
   29af0:	a904      	add	r1, sp, #16
   29af2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   29af6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   29af8:	f7e7 ff16 	bl	11928 <vprintk>

	va_end(ap);
}
   29afc:	b003      	add	sp, #12
   29afe:	f85d eb04 	ldr.w	lr, [sp], #4
   29b02:	b004      	add	sp, #16
   29b04:	4770      	bx	lr

00029b06 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   29b06:	68c3      	ldr	r3, [r0, #12]
   29b08:	6802      	ldr	r2, [r0, #0]
   29b0a:	4293      	cmp	r3, r2
   29b0c:	d805      	bhi.n	29b1a <free_space+0x14>
	} else if (!buffer->rd_idx) {
   29b0e:	b14b      	cbz	r3, 29b24 <free_space+0x1e>
	*res = buffer->size - buffer->tmp_wr_idx;
   29b10:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29b12:	1a9b      	subs	r3, r3, r2
   29b14:	600b      	str	r3, [r1, #0]
	return true;
   29b16:	2001      	movs	r0, #1
}
   29b18:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   29b1a:	1a9b      	subs	r3, r3, r2
   29b1c:	3b01      	subs	r3, #1
   29b1e:	600b      	str	r3, [r1, #0]
		return false;
   29b20:	2000      	movs	r0, #0
   29b22:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   29b24:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29b26:	1a9b      	subs	r3, r3, r2
   29b28:	3b01      	subs	r3, #1
   29b2a:	600b      	str	r3, [r1, #0]
		return false;
   29b2c:	2000      	movs	r0, #0
   29b2e:	4770      	bx	lr

00029b30 <get_usage>:
{
   29b30:	b510      	push	{r4, lr}
   29b32:	b082      	sub	sp, #8
   29b34:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   29b36:	a901      	add	r1, sp, #4
   29b38:	f7ff ffe5 	bl	29b06 <free_space>
   29b3c:	b120      	cbz	r0, 29b48 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   29b3e:	68e3      	ldr	r3, [r4, #12]
   29b40:	9a01      	ldr	r2, [sp, #4]
   29b42:	4413      	add	r3, r2
   29b44:	3b01      	subs	r3, #1
   29b46:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   29b48:	6a60      	ldr	r0, [r4, #36]	; 0x24
   29b4a:	9b01      	ldr	r3, [sp, #4]
   29b4c:	1ac0      	subs	r0, r0, r3
}
   29b4e:	3801      	subs	r0, #1
   29b50:	b002      	add	sp, #8
   29b52:	bd10      	pop	{r4, pc}

00029b54 <max_utilization_update>:
{
   29b54:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   29b56:	6903      	ldr	r3, [r0, #16]
   29b58:	f013 0f04 	tst.w	r3, #4
   29b5c:	d100      	bne.n	29b60 <max_utilization_update+0xc>
}
   29b5e:	bd38      	pop	{r3, r4, r5, pc}
   29b60:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   29b62:	6a85      	ldr	r5, [r0, #40]	; 0x28
   29b64:	f7ff ffe4 	bl	29b30 <get_usage>
   29b68:	4285      	cmp	r5, r0
   29b6a:	d902      	bls.n	29b72 <max_utilization_update+0x1e>
   29b6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   29b6e:	62a0      	str	r0, [r4, #40]	; 0x28
   29b70:	e7f5      	b.n	29b5e <max_utilization_update+0xa>
   29b72:	4620      	mov	r0, r4
   29b74:	f7ff ffdc 	bl	29b30 <get_usage>
   29b78:	e7f9      	b.n	29b6e <max_utilization_update+0x1a>

00029b7a <add_skip_item>:
{
   29b7a:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   29b7c:	2300      	movs	r3, #0
   29b7e:	f36f 0300 	bfc	r3, #0, #1
   29b82:	f043 0302 	orr.w	r3, r3, #2
   29b86:	f361 039f 	bfi	r3, r1, #2, #30
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   29b8a:	6a02      	ldr	r2, [r0, #32]
   29b8c:	6804      	ldr	r4, [r0, #0]
   29b8e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29b92:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   29b94:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29b96:	6902      	ldr	r2, [r0, #16]
   29b98:	f012 0201 	ands.w	r2, r2, #1
   29b9c:	d104      	bne.n	29ba8 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   29b9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   29ba0:	42a3      	cmp	r3, r4
   29ba2:	d304      	bcc.n	29bae <add_skip_item+0x34>
   29ba4:	1b1b      	subs	r3, r3, r4
   29ba6:	e002      	b.n	29bae <add_skip_item+0x34>
		return i & (buffer->size - 1);
   29ba8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   29baa:	3c01      	subs	r4, #1
   29bac:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29bae:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29bb0:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   29bb2:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29bb4:	b922      	cbnz	r2, 29bc0 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   29bb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29bb8:	4299      	cmp	r1, r3
   29bba:	d304      	bcc.n	29bc6 <add_skip_item+0x4c>
   29bbc:	1ac9      	subs	r1, r1, r3
   29bbe:	e002      	b.n	29bc6 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   29bc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29bc2:	3b01      	subs	r3, #1
   29bc4:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29bc6:	6041      	str	r1, [r0, #4]
}
   29bc8:	bc10      	pop	{r4}
   29bca:	4770      	bx	lr

00029bcc <drop_item_locked>:
{
   29bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bd0:	b083      	sub	sp, #12
   29bd2:	4604      	mov	r4, r0
   29bd4:	9101      	str	r1, [sp, #4]
   29bd6:	4615      	mov	r5, r2
   29bd8:	461e      	mov	r6, r3
	*user_packet = false;
   29bda:	2300      	movs	r3, #0
   29bdc:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   29bde:	f8d0 8020 	ldr.w	r8, [r0, #32]
   29be2:	f8d0 900c 	ldr.w	r9, [r0, #12]
   29be6:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   29bea:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   29bee:	f003 0303 	and.w	r3, r3, #3
   29bf2:	2b02      	cmp	r3, #2
   29bf4:	d012      	beq.n	29c1c <drop_item_locked+0x50>
	return 0;
   29bf6:	f04f 0b00 	mov.w	fp, #0
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   29bfa:	69e3      	ldr	r3, [r4, #28]
   29bfc:	4650      	mov	r0, sl
   29bfe:	4798      	blx	r3
   29c00:	4607      	mov	r7, r0
	if (skip_wlen) {
   29c02:	f1bb 0f00 	cmp.w	fp, #0
   29c06:	d152      	bne.n	29cae <drop_item_locked+0xe2>
	} else if (allow_drop) {
   29c08:	2d00      	cmp	r5, #0
   29c0a:	d05d      	beq.n	29cc8 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   29c0c:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   29c10:	f013 0f02 	tst.w	r3, #2
   29c14:	d10a      	bne.n	29c2c <drop_item_locked+0x60>
			*user_packet = true;
   29c16:	2301      	movs	r3, #1
   29c18:	7033      	strb	r3, [r6, #0]
   29c1a:	e049      	b.n	29cb0 <drop_item_locked+0xe4>
		return item->skip.len;
   29c1c:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   29c20:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   29c24:	d0e9      	beq.n	29bfa <drop_item_locked+0x2e>
		return item->skip.len;
   29c26:	465f      	mov	r7, fp
		allow_drop = true;
   29c28:	2501      	movs	r5, #1
   29c2a:	e041      	b.n	29cb0 <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   29c2c:	9901      	ldr	r1, [sp, #4]
   29c2e:	3101      	adds	r1, #1
   29c30:	4620      	mov	r0, r4
   29c32:	f7ff ffa2 	bl	29b7a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   29c36:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   29c38:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29c3a:	6922      	ldr	r2, [r4, #16]
   29c3c:	f012 0201 	ands.w	r2, r2, #1
   29c40:	d104      	bne.n	29c4c <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   29c42:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29c44:	428b      	cmp	r3, r1
   29c46:	d304      	bcc.n	29c52 <drop_item_locked+0x86>
   29c48:	1a5b      	subs	r3, r3, r1
   29c4a:	e002      	b.n	29c52 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   29c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29c4e:	3901      	subs	r1, #1
   29c50:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   29c52:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   29c54:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   29c56:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29c58:	b922      	cbnz	r2, 29c64 <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   29c5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29c5c:	428b      	cmp	r3, r1
   29c5e:	d304      	bcc.n	29c6a <drop_item_locked+0x9e>
   29c60:	1a5b      	subs	r3, r3, r1
   29c62:	e002      	b.n	29c6a <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   29c64:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29c66:	3901      	subs	r1, #1
   29c68:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   29c6a:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   29c6c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   29c6e:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29c70:	b922      	cbnz	r2, 29c7c <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   29c72:	6a62      	ldr	r2, [r4, #36]	; 0x24
   29c74:	4293      	cmp	r3, r2
   29c76:	d304      	bcc.n	29c82 <drop_item_locked+0xb6>
   29c78:	1a9b      	subs	r3, r3, r2
   29c7a:	e002      	b.n	29c82 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   29c7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   29c7e:	3a01      	subs	r2, #1
   29c80:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   29c82:	6a21      	ldr	r1, [r4, #32]
   29c84:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   29c88:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   29c8c:	f002 0203 	and.w	r2, r2, #3
   29c90:	2a02      	cmp	r2, #2
   29c92:	d006      	beq.n	29ca2 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   29c94:	69e3      	ldr	r3, [r4, #28]
   29c96:	4650      	mov	r0, sl
   29c98:	4798      	blx	r3
   29c9a:	4407      	add	r7, r0
				*user_packet = true;
   29c9c:	2301      	movs	r3, #1
   29c9e:	7033      	strb	r3, [r6, #0]
   29ca0:	e006      	b.n	29cb0 <drop_item_locked+0xe4>
		return item->skip.len;
   29ca2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   29ca6:	089b      	lsrs	r3, r3, #2
   29ca8:	d0f4      	beq.n	29c94 <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   29caa:	441f      	add	r7, r3
   29cac:	e000      	b.n	29cb0 <drop_item_locked+0xe4>
		allow_drop = true;
   29cae:	2501      	movs	r5, #1
	if (allow_drop) {
   29cb0:	b195      	cbz	r5, 29cd8 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   29cb2:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   29cb4:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29cb6:	6922      	ldr	r2, [r4, #16]
   29cb8:	f012 0f01 	tst.w	r2, #1
   29cbc:	d107      	bne.n	29cce <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   29cbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   29cc0:	4293      	cmp	r3, r2
   29cc2:	d307      	bcc.n	29cd4 <drop_item_locked+0x108>
   29cc4:	1a9b      	subs	r3, r3, r2
   29cc6:	e005      	b.n	29cd4 <drop_item_locked+0x108>
		item = NULL;
   29cc8:	f04f 0a00 	mov.w	sl, #0
   29ccc:	e7f0      	b.n	29cb0 <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   29cce:	6a62      	ldr	r2, [r4, #36]	; 0x24
   29cd0:	3a01      	subs	r2, #1
   29cd2:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   29cd4:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   29cd6:	60a3      	str	r3, [r4, #8]
}
   29cd8:	4650      	mov	r0, sl
   29cda:	b003      	add	sp, #12
   29cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029ce0 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   29ce0:	6883      	ldr	r3, [r0, #8]
   29ce2:	6842      	ldr	r2, [r0, #4]
   29ce4:	4293      	cmp	r3, r2
   29ce6:	d905      	bls.n	29cf4 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   29ce8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   29cea:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   29cec:	3800      	subs	r0, #0
   29cee:	bf18      	it	ne
   29cf0:	2001      	movne	r0, #1
   29cf2:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   29cf4:	1ad0      	subs	r0, r2, r3
		return false;
   29cf6:	e7f9      	b.n	29cec <mpsc_pbuf_is_pending+0xc>

00029cf8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   29cf8:	4770      	bx	lr

00029cfa <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   29cfa:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
   29cfc:	f7e9 f8f2 	bl	12ee4 <nrfx_coredep_delay_us>
}
   29d00:	bd08      	pop	{r3, pc}

00029d02 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   29d02:	2301      	movs	r3, #1
   29d04:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   29d08:	f3bf 8f4f 	dsb	sy
        __WFE();
   29d0c:	bf20      	wfe
    while (true)
   29d0e:	e7fd      	b.n	29d0c <nrf_regulators_system_off+0xa>

00029d10 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   29d10:	2806      	cmp	r0, #6
   29d12:	d000      	beq.n	29d16 <pm_state_set+0x6>
   29d14:	4770      	bx	lr
{
   29d16:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
   29d18:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   29d1c:	f7ff fff1 	bl	29d02 <nrf_regulators_system_off>

00029d20 <pm_state_exit_post_ops>:
   29d20:	2300      	movs	r3, #0
   29d22:	f383 8811 	msr	BASEPRI, r3
   29d26:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   29d2a:	4770      	bx	lr

00029d2c <mbox_register_callback>:
 * @retval 0 On success, negative value on error.
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
   29d2c:	b510      	push	{r4, lr}
   29d2e:	4684      	mov	ip, r0
   29d30:	4613      	mov	r3, r2
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   29d32:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   29d34:	6882      	ldr	r2, [r0, #8]

	if (api->register_callback == NULL) {
   29d36:	6854      	ldr	r4, [r2, #4]
   29d38:	b124      	cbz	r4, 29d44 <mbox_register_callback+0x18>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
   29d3a:	460a      	mov	r2, r1
   29d3c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   29d40:	47a0      	blx	r4
}
   29d42:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   29d44:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29d48:	e7fb      	b.n	29d42 <mbox_register_callback+0x16>

00029d4a <z_impl_mbox_set_enabled>:
 * @retval -EINVAL If it isn't an inbound channel.
 */
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
   29d4a:	b510      	push	{r4, lr}
   29d4c:	4603      	mov	r3, r0
   29d4e:	460a      	mov	r2, r1
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   29d50:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   29d52:	6881      	ldr	r1, [r0, #8]

	if (api->set_enabled == NULL) {
   29d54:	690c      	ldr	r4, [r1, #16]
   29d56:	b114      	cbz	r4, 29d5e <z_impl_mbox_set_enabled+0x14>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
   29d58:	6859      	ldr	r1, [r3, #4]
   29d5a:	47a0      	blx	r4
}
   29d5c:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   29d5e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29d62:	e7fb      	b.n	29d5c <z_impl_mbox_set_enabled+0x12>

00029d64 <rtc_cb>:
{
   29d64:	b510      	push	{r4, lr}
   29d66:	9c02      	ldr	r4, [sp, #8]
	ppi_rtc_to_ipc(channels, false);
   29d68:	2100      	movs	r1, #0
   29d6a:	4620      	mov	r0, r4
   29d6c:	f7e9 f9d4 	bl	13118 <ppi_rtc_to_ipc>
		free_resources(channels);
   29d70:	4620      	mov	r0, r4
   29d72:	f7e9 f9a9 	bl	130c8 <free_resources>
}
   29d76:	bd10      	pop	{r4, pc}

00029d78 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   29d78:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   29d7a:	f013 0f04 	tst.w	r3, #4
   29d7e:	d001      	beq.n	29d84 <log_msg_generic_get_wlen+0xc>
	return 0;
   29d80:	2000      	movs	r0, #0
}
   29d82:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   29d84:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   29d86:	f3c3 2049 	ubfx	r0, r3, #9, #10
   29d8a:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   29d8e:	4418      	add	r0, r3
   29d90:	3017      	adds	r0, #23
   29d92:	f020 0007 	bic.w	r0, r0, #7
   29d96:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   29d98:	4770      	bx	lr

00029d9a <dummy_timestamp>:
}
   29d9a:	2000      	movs	r0, #0
   29d9c:	4770      	bx	lr

00029d9e <msg_filter_check>:
}
   29d9e:	2001      	movs	r0, #1
   29da0:	4770      	bx	lr

00029da2 <default_get_timestamp>:
{
   29da2:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   29da4:	f003 ff1f 	bl	2dbe6 <sys_clock_cycle_get_32>
}
   29da8:	bd08      	pop	{r3, pc}

00029daa <k_msleep>:
{
   29daa:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   29dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   29db0:	17c1      	asrs	r1, r0, #31
   29db2:	03c9      	lsls	r1, r1, #15
   29db4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   29db8:	03c0      	lsls	r0, r0, #15
   29dba:	f240 33e7 	movw	r3, #999	; 0x3e7
   29dbe:	18c0      	adds	r0, r0, r3
   29dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29dc4:	f04f 0300 	mov.w	r3, #0
   29dc8:	f141 0100 	adc.w	r1, r1, #0
   29dcc:	f7e6 f9c4 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   29dd0:	f7fd fe78 	bl	27ac4 <z_impl_k_sleep>
}
   29dd4:	bd08      	pop	{r3, pc}

00029dd6 <msg_alloc>:
{
   29dd6:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   29dd8:	2200      	movs	r2, #0
   29dda:	2300      	movs	r3, #0
   29ddc:	f7e8 fdfe 	bl	129dc <mpsc_pbuf_alloc>
}
   29de0:	bd08      	pop	{r3, pc}

00029de2 <msg_free>:
{
   29de2:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   29de4:	f7e9 f806 	bl	12df4 <mpsc_pbuf_free>
}
   29de8:	bd08      	pop	{r3, pc}

00029dea <msg_pending>:
{
   29dea:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   29dec:	f7ff ff78 	bl	29ce0 <mpsc_pbuf_is_pending>
}
   29df0:	bd08      	pop	{r3, pc}

00029df2 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   29df2:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   29df4:	2001      	movs	r0, #1
   29df6:	f7e9 fce9 	bl	137cc <z_log_dropped>
}
   29dfa:	bd08      	pop	{r3, pc}

00029dfc <z_log_msg_claim>:
{
   29dfc:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   29dfe:	f7e9 fd73 	bl	138e8 <z_log_msg_local_claim>
}
   29e02:	bd08      	pop	{r3, pc}

00029e04 <msg_commit>:
{
   29e04:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   29e06:	f7e8 fee3 	bl	12bd0 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   29e0a:	f7e9 fe23 	bl	13a54 <z_log_msg_post_finalize>
}
   29e0e:	bd08      	pop	{r3, pc}

00029e10 <z_log_get_tag>:
}
   29e10:	2000      	movs	r0, #0
   29e12:	4770      	bx	lr

00029e14 <z_cbprintf_cpy>:
{
   29e14:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   29e16:	6853      	ldr	r3, [r2, #4]
   29e18:	6896      	ldr	r6, [r2, #8]
   29e1a:	1b9b      	subs	r3, r3, r6
   29e1c:	428b      	cmp	r3, r1
   29e1e:	d30c      	bcc.n	29e3a <z_cbprintf_cpy+0x26>
   29e20:	460c      	mov	r4, r1
   29e22:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   29e24:	6813      	ldr	r3, [r2, #0]
   29e26:	460a      	mov	r2, r1
   29e28:	4601      	mov	r1, r0
   29e2a:	1998      	adds	r0, r3, r6
   29e2c:	f001 f984 	bl	2b138 <memcpy>
	desc->off += len;
   29e30:	68ab      	ldr	r3, [r5, #8]
   29e32:	4423      	add	r3, r4
   29e34:	60ab      	str	r3, [r5, #8]
	return len;
   29e36:	4620      	mov	r0, r4
}
   29e38:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   29e3a:	f06f 001b 	mvn.w	r0, #27
   29e3e:	e7fb      	b.n	29e38 <z_cbprintf_cpy+0x24>

00029e40 <z_log_msg_finalize>:
{
   29e40:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   29e42:	b190      	cbz	r0, 29e6a <z_log_msg_finalize+0x2a>
   29e44:	460e      	mov	r6, r1
   29e46:	4614      	mov	r4, r2
   29e48:	4619      	mov	r1, r3
   29e4a:	4605      	mov	r5, r0
	if (data) {
   29e4c:	b13b      	cbz	r3, 29e5e <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   29e4e:	3010      	adds	r0, #16
   29e50:	f3c2 2349 	ubfx	r3, r2, #9, #10
		memcpy(d, data, desc.data_len);
   29e54:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   29e58:	4418      	add	r0, r3
   29e5a:	f001 f96d 	bl	2b138 <memcpy>
	msg->hdr.desc = desc;
   29e5e:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   29e60:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   29e62:	4628      	mov	r0, r5
   29e64:	f7e9 fe6e 	bl	13b44 <z_log_msg_commit>
}
   29e68:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   29e6a:	f7e9 fcaf 	bl	137cc <z_log_dropped>
		return;
   29e6e:	e7fb      	b.n	29e68 <z_log_msg_finalize+0x28>

00029e70 <buffer_write>:
{
   29e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29e72:	4607      	mov	r7, r0
   29e74:	460d      	mov	r5, r1
   29e76:	4614      	mov	r4, r2
   29e78:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   29e7a:	4632      	mov	r2, r6
   29e7c:	4621      	mov	r1, r4
   29e7e:	4628      	mov	r0, r5
   29e80:	47b8      	blx	r7
		buf += processed;
   29e82:	4405      	add	r5, r0
	} while (len != 0);
   29e84:	1a24      	subs	r4, r4, r0
   29e86:	d1f8      	bne.n	29e7a <buffer_write+0xa>
}
   29e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029e8a <cbvprintf>:
{
   29e8a:	b510      	push	{r4, lr}
   29e8c:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   29e8e:	2400      	movs	r4, #0
   29e90:	9400      	str	r4, [sp, #0]
   29e92:	f7e8 faa3 	bl	123dc <z_cbvprintf_impl>
}
   29e96:	b002      	add	sp, #8
   29e98:	bd10      	pop	{r4, pc}

00029e9a <color_prefix>:
{
   29e9a:	b508      	push	{r3, lr}
   29e9c:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   29e9e:	2201      	movs	r2, #1
   29ea0:	f7e9 ffe2 	bl	13e68 <color_print>
}
   29ea4:	bd08      	pop	{r3, pc}

00029ea6 <color_postfix>:
{
   29ea6:	b508      	push	{r3, lr}
   29ea8:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   29eaa:	2200      	movs	r2, #0
   29eac:	f7e9 ffdc 	bl	13e68 <color_print>
}
   29eb0:	bd08      	pop	{r3, pc}

00029eb2 <postfix_print>:
{
   29eb2:	b538      	push	{r3, r4, r5, lr}
   29eb4:	4605      	mov	r5, r0
   29eb6:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   29eb8:	f001 0101 	and.w	r1, r1, #1
   29ebc:	f7ff fff3 	bl	29ea6 <color_postfix>
	newline_print(output, flags);
   29ec0:	4621      	mov	r1, r4
   29ec2:	4628      	mov	r0, r5
   29ec4:	f7ea f856 	bl	13f74 <newline_print>
}
   29ec8:	bd38      	pop	{r3, r4, r5, pc}

00029eca <log_msg_hexdump>:
{
   29eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29ece:	b083      	sub	sp, #12
   29ed0:	4680      	mov	r8, r0
   29ed2:	460e      	mov	r6, r1
   29ed4:	4615      	mov	r5, r2
   29ed6:	461f      	mov	r7, r3
   29ed8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   29edc:	462c      	mov	r4, r5
   29ede:	2d10      	cmp	r5, #16
   29ee0:	bf28      	it	cs
   29ee2:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   29ee4:	f8cd 9000 	str.w	r9, [sp]
   29ee8:	463b      	mov	r3, r7
   29eea:	4622      	mov	r2, r4
   29eec:	4631      	mov	r1, r6
   29eee:	4640      	mov	r0, r8
   29ef0:	f7ea f854 	bl	13f9c <hexdump_line_print>
		data += length;
   29ef4:	4426      	add	r6, r4
	} while (len);
   29ef6:	1b2d      	subs	r5, r5, r4
   29ef8:	d1f0      	bne.n	29edc <log_msg_hexdump+0x12>
}
   29efa:	b003      	add	sp, #12
   29efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00029f00 <log_output_flush>:
{
   29f00:	b510      	push	{r4, lr}
   29f02:	4604      	mov	r4, r0
		     output->control_block->offset,
   29f04:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   29f06:	6853      	ldr	r3, [r2, #4]
   29f08:	6812      	ldr	r2, [r2, #0]
   29f0a:	6881      	ldr	r1, [r0, #8]
   29f0c:	6800      	ldr	r0, [r0, #0]
   29f0e:	f7ff ffaf 	bl	29e70 <buffer_write>
	output->control_block->offset = 0;
   29f12:	6863      	ldr	r3, [r4, #4]
   29f14:	2200      	movs	r2, #0
   29f16:	601a      	str	r2, [r3, #0]
}
   29f18:	bd10      	pop	{r4, pc}

00029f1a <cr_out_func>:
{
   29f1a:	b538      	push	{r3, r4, r5, lr}
   29f1c:	4604      	mov	r4, r0
   29f1e:	460d      	mov	r5, r1
	if (c == '\n') {
   29f20:	280a      	cmp	r0, #10
   29f22:	d005      	beq.n	29f30 <cr_out_func+0x16>
	out_func(c, ctx);
   29f24:	4629      	mov	r1, r5
   29f26:	4620      	mov	r0, r4
   29f28:	f7ea f896 	bl	14058 <out_func>
}
   29f2c:	2000      	movs	r0, #0
   29f2e:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   29f30:	200d      	movs	r0, #13
   29f32:	f7ea f891 	bl	14058 <out_func>
   29f36:	e7f5      	b.n	29f24 <cr_out_func+0xa>

00029f38 <z_impl_mbox_send>:
{
   29f38:	b510      	push	{r4, lr}
   29f3a:	4603      	mov	r3, r0
   29f3c:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
   29f3e:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   29f40:	6881      	ldr	r1, [r0, #8]
	if (api->send == NULL) {
   29f42:	680c      	ldr	r4, [r1, #0]
   29f44:	b114      	cbz	r4, 29f4c <z_impl_mbox_send+0x14>
	return api->send(channel->dev, channel->id, msg);
   29f46:	6859      	ldr	r1, [r3, #4]
   29f48:	47a0      	blx	r4
}
   29f4a:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   29f4c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29f50:	e7fb      	b.n	29f4a <z_impl_mbox_send+0x12>

00029f52 <mbox_register_callback>:
{
   29f52:	b510      	push	{r4, lr}
   29f54:	4684      	mov	ip, r0
   29f56:	4613      	mov	r3, r2
		(const struct mbox_driver_api *)channel->dev->api;
   29f58:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   29f5a:	6882      	ldr	r2, [r0, #8]
	if (api->register_callback == NULL) {
   29f5c:	6854      	ldr	r4, [r2, #4]
   29f5e:	b124      	cbz	r4, 29f6a <mbox_register_callback+0x18>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   29f60:	460a      	mov	r2, r1
   29f62:	f8dc 1004 	ldr.w	r1, [ip, #4]
   29f66:	47a0      	blx	r4
}
   29f68:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   29f6a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29f6e:	e7fb      	b.n	29f68 <mbox_register_callback+0x16>

00029f70 <z_impl_mbox_set_enabled>:
{
   29f70:	b510      	push	{r4, lr}
   29f72:	4603      	mov	r3, r0
   29f74:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
   29f76:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   29f78:	6881      	ldr	r1, [r0, #8]
	if (api->set_enabled == NULL) {
   29f7a:	690c      	ldr	r4, [r1, #16]
   29f7c:	b114      	cbz	r4, 29f84 <z_impl_mbox_set_enabled+0x14>
	return api->set_enabled(channel->dev, channel->id, enable);
   29f7e:	6859      	ldr	r1, [r3, #4]
   29f80:	47a0      	blx	r4
}
   29f82:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   29f84:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29f88:	e7fb      	b.n	29f82 <z_impl_mbox_set_enabled+0x12>

00029f8a <shm_size>:
#define ROLE_HOST		VIRTIO_DEV_DRIVER
#define ROLE_REMOTE		VIRTIO_DEV_DEVICE

static inline size_t vq_ring_size(unsigned int num, unsigned int buf_size)
{
	return (buf_size * num);
   29f8a:	fb00 f101 	mul.w	r1, r0, r1
}

static inline size_t shm_size(unsigned int num, unsigned int buf_size)
{
	return (VDEV_STATUS_SIZE + (VRING_COUNT * vq_ring_size(num, buf_size)) +
   29f8e:	3102      	adds	r1, #2
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   29f90:	1cc3      	adds	r3, r0, #3
   29f92:	005b      	lsls	r3, r3, #1
   29f94:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   29f98:	3303      	adds	r3, #3
   29f9a:	f023 0303 	bic.w	r3, r3, #3
	size += sizeof(struct vring_used) +
   29f9e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   29fa2:	3306      	adds	r3, #6
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   29fa4:	005b      	lsls	r3, r3, #1
}
   29fa6:	eb03 0041 	add.w	r0, r3, r1, lsl #1
   29faa:	4770      	bx	lr

00029fac <virtio_notify_cb>:
{
   29fac:	b508      	push	{r3, lr}
	if (conf->mbox_tx.dev) {
   29fae:	68cb      	ldr	r3, [r1, #12]
   29fb0:	b123      	cbz	r3, 29fbc <virtio_notify_cb+0x10>
		mbox_send(&conf->mbox_tx, NULL);
   29fb2:	f101 000c 	add.w	r0, r1, #12
	return z_impl_mbox_send(channel, msg);
   29fb6:	2100      	movs	r1, #0
   29fb8:	f7ff ffbe 	bl	29f38 <z_impl_mbox_send>
}
   29fbc:	bd08      	pop	{r3, pc}

00029fbe <get_tx_buffer_size>:
	struct backend_data_t *data = instance->data;
   29fbe:	6903      	ldr	r3, [r0, #16]
}
   29fc0:	f8d3 0388 	ldr.w	r0, [r3, #904]	; 0x388
   29fc4:	4770      	bx	lr

00029fc6 <drop_tx_buffer>:
}
   29fc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29fca:	4770      	bx	lr

00029fcc <release_rx_buffer>:
	if (!rpmsg_ept) {
   29fcc:	b131      	cbz	r1, 29fdc <release_rx_buffer+0x10>
{
   29fce:	b508      	push	{r3, lr}
   29fd0:	4608      	mov	r0, r1
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   29fd2:	4611      	mov	r1, r2
   29fd4:	f004 fcfd 	bl	2e9d2 <rpmsg_release_rx_buffer>
	return 0;
   29fd8:	2000      	movs	r0, #0
}
   29fda:	bd08      	pop	{r3, pc}
		return -ENOENT;
   29fdc:	f06f 0001 	mvn.w	r0, #1
}
   29fe0:	4770      	bx	lr

00029fe2 <hold_rx_buffer>:
	if (!rpmsg_ept) {
   29fe2:	b131      	cbz	r1, 29ff2 <hold_rx_buffer+0x10>
{
   29fe4:	b508      	push	{r3, lr}
   29fe6:	4608      	mov	r0, r1
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   29fe8:	4611      	mov	r1, r2
   29fea:	f004 fce8 	bl	2e9be <rpmsg_hold_rx_buffer>
	return 0;
   29fee:	2000      	movs	r0, #0
}
   29ff0:	bd08      	pop	{r3, pc}
		return -ENOENT;
   29ff2:	f06f 0001 	mvn.w	r0, #1
}
   29ff6:	4770      	bx	lr

00029ff8 <send_nocopy>:
{
   29ff8:	b510      	push	{r4, lr}
   29ffa:	b082      	sub	sp, #8
   29ffc:	460c      	mov	r4, r1
	struct backend_data_t *data = instance->data;
   29ffe:	6901      	ldr	r1, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   2a000:	f501 7161 	add.w	r1, r1, #900	; 0x384
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a004:	e8d1 1faf 	lda	r1, [r1]
   2a008:	2902      	cmp	r1, #2
   2a00a:	d10a      	bne.n	2a022 <send_nocopy+0x2a>
	if (len == 0) {
   2a00c:	b163      	cbz	r3, 2a028 <send_nocopy+0x30>
	if (!rpmsg_ept) {
   2a00e:	b174      	cbz	r4, 2a02e <send_nocopy+0x36>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2a010:	9300      	str	r3, [sp, #0]
   2a012:	4613      	mov	r3, r2
   2a014:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2a016:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a018:	4620      	mov	r0, r4
   2a01a:	f7f9 fef9 	bl	23e10 <rpmsg_send_offchannel_nocopy>
}
   2a01e:	b002      	add	sp, #8
   2a020:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2a022:	f06f 000f 	mvn.w	r0, #15
   2a026:	e7fa      	b.n	2a01e <send_nocopy+0x26>
		return -EBADMSG;
   2a028:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   2a02c:	e7f7      	b.n	2a01e <send_nocopy+0x26>
		return -ENOENT;
   2a02e:	f06f 0001 	mvn.w	r0, #1
   2a032:	e7f4      	b.n	2a01e <send_nocopy+0x26>

0002a034 <get_tx_buffer>:
{
   2a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a038:	4690      	mov	r8, r2
   2a03a:	461e      	mov	r6, r3
   2a03c:	9a06      	ldr	r2, [sp, #24]
   2a03e:	9b07      	ldr	r3, [sp, #28]
	struct backend_data_t *data = instance->data;
   2a040:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2a042:	b3a1      	cbz	r1, 2a0ae <get_tx_buffer+0x7a>
   2a044:	460f      	mov	r7, r1
	if (!r_data || !size) {
   2a046:	f1b8 0f00 	cmp.w	r8, #0
   2a04a:	d033      	beq.n	2a0b4 <get_tx_buffer+0x80>
   2a04c:	b3ae      	cbz	r6, 2a0ba <get_tx_buffer+0x86>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   2a04e:	4614      	mov	r4, r2
   2a050:	461d      	mov	r5, r3
   2a052:	f1b3 3fff 	cmp.w	r3, #4294967295
   2a056:	bf08      	it	eq
   2a058:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2a05c:	d001      	beq.n	2a062 <get_tx_buffer+0x2e>
   2a05e:	4313      	orrs	r3, r2
   2a060:	d11e      	bne.n	2a0a0 <get_tx_buffer+0x6c>
	if ((*size) && (*size > data->tx_buffer_size)) {
   2a062:	6833      	ldr	r3, [r6, #0]
   2a064:	b11b      	cbz	r3, 2a06e <get_tx_buffer+0x3a>
   2a066:	f8d0 2388 	ldr.w	r2, [r0, #904]	; 0x388
   2a06a:	4293      	cmp	r3, r2
   2a06c:	d81b      	bhi.n	2a0a6 <get_tx_buffer+0x72>
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2a06e:	ea04 0205 	and.w	r2, r4, r5
   2a072:	f1b2 3fff 	cmp.w	r2, #4294967295
   2a076:	bf14      	ite	ne
   2a078:	2200      	movne	r2, #0
   2a07a:	2201      	moveq	r2, #1
   2a07c:	4631      	mov	r1, r6
   2a07e:	4638      	mov	r0, r7
   2a080:	f004 fcb1 	bl	2e9e6 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2a084:	4603      	mov	r3, r0
   2a086:	b928      	cbnz	r0, 2a094 <get_tx_buffer+0x60>
   2a088:	f1b5 3fff 	cmp.w	r5, #4294967295
   2a08c:	bf08      	it	eq
   2a08e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2a092:	d0ec      	beq.n	2a06e <get_tx_buffer+0x3a>
	if (!payload) {
   2a094:	b1a3      	cbz	r3, 2a0c0 <get_tx_buffer+0x8c>
	(*r_data) = payload;
   2a096:	f8c8 3000 	str.w	r3, [r8]
	return 0;
   2a09a:	2000      	movs	r0, #0
}
   2a09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
   2a0a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a0a4:	e7fa      	b.n	2a09c <get_tx_buffer+0x68>
		*size = data->tx_buffer_size;
   2a0a6:	6032      	str	r2, [r6, #0]
		return -ENOMEM;
   2a0a8:	f06f 000b 	mvn.w	r0, #11
   2a0ac:	e7f6      	b.n	2a09c <get_tx_buffer+0x68>
		return -ENOENT;
   2a0ae:	f06f 0001 	mvn.w	r0, #1
   2a0b2:	e7f3      	b.n	2a09c <get_tx_buffer+0x68>
		return -EINVAL;
   2a0b4:	f06f 0015 	mvn.w	r0, #21
   2a0b8:	e7f0      	b.n	2a09c <get_tx_buffer+0x68>
   2a0ba:	f06f 0015 	mvn.w	r0, #21
   2a0be:	e7ed      	b.n	2a09c <get_tx_buffer+0x68>
		return -ENOBUFS;
   2a0c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a0c4:	e7ea      	b.n	2a09c <get_tx_buffer+0x68>

0002a0c6 <rpmsg_service_unbind>:
{
   2a0c6:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   2a0c8:	f004 fcca 	bl	2ea60 <rpmsg_destroy_ept>
}
   2a0cc:	bd08      	pop	{r3, pc}

0002a0ce <deregister_ept>:
	struct backend_data_t *data = instance->data;
   2a0ce:	6903      	ldr	r3, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   2a0d0:	f503 7361 	add.w	r3, r3, #900	; 0x384
   2a0d4:	e8d3 3faf 	lda	r3, [r3]
   2a0d8:	2b02      	cmp	r3, #2
   2a0da:	d10c      	bne.n	2a0f6 <deregister_ept+0x28>
{
   2a0dc:	b510      	push	{r4, lr}
   2a0de:	460c      	mov	r4, r1
	if (!rpmsg_ept) {
   2a0e0:	b161      	cbz	r1, 2a0fc <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2a0e2:	4608      	mov	r0, r1
   2a0e4:	f004 fcbc 	bl	2ea60 <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   2a0e8:	2270      	movs	r2, #112	; 0x70
   2a0ea:	2100      	movs	r1, #0
   2a0ec:	4620      	mov	r0, r4
   2a0ee:	f001 f852 	bl	2b196 <memset>
	return 0;
   2a0f2:	2000      	movs	r0, #0
}
   2a0f4:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2a0f6:	f06f 000f 	mvn.w	r0, #15
}
   2a0fa:	4770      	bx	lr
		return -ENOENT;
   2a0fc:	f06f 0001 	mvn.w	r0, #1
   2a100:	e7f8      	b.n	2a0f4 <deregister_ept+0x26>

0002a102 <get_ept_slot_with_name>:
{
   2a102:	b570      	push	{r4, r5, r6, lr}
   2a104:	4605      	mov	r5, r0
   2a106:	460e      	mov	r6, r1
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2a108:	2400      	movs	r4, #0
   2a10a:	2c01      	cmp	r4, #1
   2a10c:	d80f      	bhi.n	2a12e <get_ept_slot_with_name+0x2c>
		if (strcmp(name, rpmsg_ept->name) == 0) {
   2a10e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2a112:	011b      	lsls	r3, r3, #4
   2a114:	3340      	adds	r3, #64	; 0x40
   2a116:	18e9      	adds	r1, r5, r3
   2a118:	4630      	mov	r0, r6
   2a11a:	f000 ffdd 	bl	2b0d8 <strcmp>
   2a11e:	b108      	cbz	r0, 2a124 <get_ept_slot_with_name+0x22>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2a120:	3401      	adds	r4, #1
   2a122:	e7f2      	b.n	2a10a <get_ept_slot_with_name+0x8>
			return &rpmsg_inst->endpoint[i];
   2a124:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2a128:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   2a12c:	e000      	b.n	2a130 <get_ept_slot_with_name+0x2e>
	return NULL;
   2a12e:	2000      	movs	r0, #0
}
   2a130:	bd70      	pop	{r4, r5, r6, pc}

0002a132 <get_ept>:
{
   2a132:	b538      	push	{r3, r4, r5, lr}
   2a134:	4605      	mov	r5, r0
   2a136:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   2a138:	4611      	mov	r1, r2
   2a13a:	f7ff ffe2 	bl	2a102 <get_ept_slot_with_name>
	if (ept != NULL) {
   2a13e:	b110      	cbz	r0, 2a146 <get_ept+0x14>
		(*rpmsg_ept) = ept;
   2a140:	6020      	str	r0, [r4, #0]
		return true;
   2a142:	2001      	movs	r0, #1
}
   2a144:	bd38      	pop	{r3, r4, r5, pc}
	ept = get_available_ept_slot(rpmsg_inst);
   2a146:	4628      	mov	r0, r5
   2a148:	f7ea fa5a 	bl	14600 <get_available_ept_slot>
	if (ept != NULL) {
   2a14c:	b110      	cbz	r0, 2a154 <get_ept+0x22>
		(*rpmsg_ept) = ept;
   2a14e:	6020      	str	r0, [r4, #0]
		return false;
   2a150:	2000      	movs	r0, #0
   2a152:	e7f7      	b.n	2a144 <get_ept+0x12>
	(*rpmsg_ept) = NULL;
   2a154:	2000      	movs	r0, #0
   2a156:	6020      	str	r0, [r4, #0]
	return false;
   2a158:	e7f4      	b.n	2a144 <get_ept+0x12>

0002a15a <register_ept_on_host>:
{
   2a15a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a15c:	b083      	sub	sp, #12
   2a15e:	4607      	mov	r7, r0
   2a160:	460d      	mov	r5, r1
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2a162:	f500 76ce 	add.w	r6, r0, #412	; 0x19c
	return z_impl_k_mutex_lock(mutex, timeout);
   2a166:	f04f 32ff 	mov.w	r2, #4294967295
   2a16a:	f04f 33ff 	mov.w	r3, #4294967295
   2a16e:	4630      	mov	r0, r6
   2a170:	f7fb f892 	bl	25298 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   2a174:	682a      	ldr	r2, [r5, #0]
   2a176:	a901      	add	r1, sp, #4
   2a178:	4638      	mov	r0, r7
   2a17a:	f7ff ffda 	bl	2a132 <get_ept>
	if (rpmsg_ept == NULL) {
   2a17e:	9c01      	ldr	r4, [sp, #4]
   2a180:	b1b4      	cbz	r4, 2a1b0 <register_ept_on_host+0x56>
	rpmsg_ept->cb = &cfg->cb;
   2a182:	f105 0308 	add.w	r3, r5, #8
   2a186:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   2a188:	696b      	ldr	r3, [r5, #20]
   2a18a:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->bound = false;
   2a18c:	2300      	movs	r3, #0
   2a18e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   2a192:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   2a194:	b180      	cbz	r0, 2a1b8 <register_ept_on_host+0x5e>
	return z_impl_k_mutex_unlock(mutex);
   2a196:	4630      	mov	r0, r6
   2a198:	f7fb f994 	bl	254c4 <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   2a19c:	9901      	ldr	r1, [sp, #4]
   2a19e:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   2a1a0:	682a      	ldr	r2, [r5, #0]
   2a1a2:	4638      	mov	r0, r7
   2a1a4:	f7ea fa4a 	bl	1463c <advertise_ept>
	return rpmsg_ept;
   2a1a8:	9c01      	ldr	r4, [sp, #4]
}
   2a1aa:	4620      	mov	r0, r4
   2a1ac:	b003      	add	sp, #12
   2a1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a1b0:	4630      	mov	r0, r6
   2a1b2:	f7fb f987 	bl	254c4 <z_impl_k_mutex_unlock>
		return NULL;
   2a1b6:	e7f8      	b.n	2a1aa <register_ept_on_host+0x50>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   2a1b8:	2220      	movs	r2, #32
   2a1ba:	6829      	ldr	r1, [r5, #0]
   2a1bc:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2a1c0:	f000 ff5d 	bl	2b07e <strncpy>
   2a1c4:	4630      	mov	r0, r6
   2a1c6:	f7fb f97d 	bl	254c4 <z_impl_k_mutex_unlock>
   2a1ca:	e7ed      	b.n	2a1a8 <register_ept_on_host+0x4e>

0002a1cc <ns_bind_cb>:
{
   2a1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a1ce:	b083      	sub	sp, #12
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   2a1d0:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
	if (name == NULL || name[0] == '\0') {
   2a1d4:	b129      	cbz	r1, 2a1e2 <ns_bind_cb+0x16>
   2a1d6:	4616      	mov	r6, r2
   2a1d8:	f5a4 77c4 	sub.w	r7, r4, #392	; 0x188
   2a1dc:	460d      	mov	r5, r1
   2a1de:	780b      	ldrb	r3, [r1, #0]
   2a1e0:	b90b      	cbnz	r3, 2a1e6 <ns_bind_cb+0x1a>
}
   2a1e2:	b003      	add	sp, #12
   2a1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2a1e6:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2a1e8:	f04f 32ff 	mov.w	r2, #4294967295
   2a1ec:	f04f 33ff 	mov.w	r3, #4294967295
   2a1f0:	4620      	mov	r0, r4
   2a1f2:	f7fb f851 	bl	25298 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2a1f6:	462a      	mov	r2, r5
   2a1f8:	a901      	add	r1, sp, #4
   2a1fa:	4638      	mov	r0, r7
   2a1fc:	f7ff ff99 	bl	2a132 <get_ept>
	if (rpmsg_ept == NULL) {
   2a200:	9b01      	ldr	r3, [sp, #4]
   2a202:	b153      	cbz	r3, 2a21a <ns_bind_cb+0x4e>
	if (ept_cached) {
   2a204:	b168      	cbz	r0, 2a222 <ns_bind_cb+0x56>
	return z_impl_k_mutex_unlock(mutex);
   2a206:	4620      	mov	r0, r4
   2a208:	f7fb f95c 	bl	254c4 <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2a20c:	4633      	mov	r3, r6
   2a20e:	462a      	mov	r2, r5
   2a210:	9901      	ldr	r1, [sp, #4]
   2a212:	4638      	mov	r0, r7
   2a214:	f7ea fa12 	bl	1463c <advertise_ept>
   2a218:	e7e3      	b.n	2a1e2 <ns_bind_cb+0x16>
   2a21a:	4620      	mov	r0, r4
   2a21c:	f7fb f952 	bl	254c4 <z_impl_k_mutex_unlock>
		return;
   2a220:	e7df      	b.n	2a1e2 <ns_bind_cb+0x16>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   2a222:	2220      	movs	r2, #32
   2a224:	4629      	mov	r1, r5
   2a226:	f103 0040 	add.w	r0, r3, #64	; 0x40
   2a22a:	f000 ff28 	bl	2b07e <strncpy>
		rpmsg_ept->dest = dest;
   2a22e:	9b01      	ldr	r3, [sp, #4]
   2a230:	661e      	str	r6, [r3, #96]	; 0x60
   2a232:	4620      	mov	r0, r4
   2a234:	f7fb f946 	bl	254c4 <z_impl_k_mutex_unlock>
   2a238:	e7d3      	b.n	2a1e2 <ns_bind_cb+0x16>

0002a23a <register_ept_on_remote>:
{
   2a23a:	b570      	push	{r4, r5, r6, lr}
   2a23c:	4606      	mov	r6, r0
   2a23e:	460d      	mov	r5, r1
	rpmsg_ept = get_available_ept_slot(rpmsg_inst);
   2a240:	f7ea f9de 	bl	14600 <get_available_ept_slot>
	if (rpmsg_ept == NULL) {
   2a244:	4604      	mov	r4, r0
   2a246:	b198      	cbz	r0, 2a270 <register_ept_on_remote+0x36>
	rpmsg_ept->cb = &cfg->cb;
   2a248:	f105 0308 	add.w	r3, r5, #8
   2a24c:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   2a24e:	696b      	ldr	r3, [r5, #20]
   2a250:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   2a252:	2300      	movs	r3, #0
   2a254:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   2a258:	63e0      	str	r0, [r4, #60]	; 0x3c
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   2a25a:	2220      	movs	r2, #32
   2a25c:	6829      	ldr	r1, [r5, #0]
   2a25e:	3040      	adds	r0, #64	; 0x40
   2a260:	f000 ff0d 	bl	2b07e <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   2a264:	4622      	mov	r2, r4
   2a266:	2101      	movs	r1, #1
   2a268:	4630      	mov	r0, r6
   2a26a:	f7ea fb19 	bl	148a0 <ipc_rpmsg_register_ept>
	if (err != 0) {
   2a26e:	b908      	cbnz	r0, 2a274 <register_ept_on_remote+0x3a>
}
   2a270:	4620      	mov	r0, r4
   2a272:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2a274:	2400      	movs	r4, #0
   2a276:	e7fb      	b.n	2a270 <register_ept_on_remote+0x36>

0002a278 <register_ept>:
	struct backend_data_t *data = instance->data;
   2a278:	6900      	ldr	r0, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   2a27a:	f500 7361 	add.w	r3, r0, #900	; 0x384
   2a27e:	e8d3 3faf 	lda	r3, [r3]
   2a282:	2b02      	cmp	r3, #2
   2a284:	d112      	bne.n	2a2ac <register_ept+0x34>
{
   2a286:	b510      	push	{r4, lr}
   2a288:	460c      	mov	r4, r1
   2a28a:	4611      	mov	r1, r2
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   2a28c:	6813      	ldr	r3, [r2, #0]
   2a28e:	b183      	cbz	r3, 2a2b2 <register_ept+0x3a>
   2a290:	781b      	ldrb	r3, [r3, #0]
   2a292:	b18b      	cbz	r3, 2a2b8 <register_ept+0x40>
	rpmsg_ept = (data->role == ROLE_HOST) ?
   2a294:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
			register_ept_on_host(rpmsg_inst, cfg) :
   2a298:	b92b      	cbnz	r3, 2a2a6 <register_ept+0x2e>
   2a29a:	f7ff ff5e 	bl	2a15a <register_ept_on_host>
	if (rpmsg_ept == NULL) {
   2a29e:	b170      	cbz	r0, 2a2be <register_ept+0x46>
	(*token) = rpmsg_ept;
   2a2a0:	6020      	str	r0, [r4, #0]
	return 0;
   2a2a2:	2000      	movs	r0, #0
}
   2a2a4:	bd10      	pop	{r4, pc}
			register_ept_on_remote(rpmsg_inst, cfg);
   2a2a6:	f7ff ffc8 	bl	2a23a <register_ept_on_remote>
   2a2aa:	e7f8      	b.n	2a29e <register_ept+0x26>
		return -EBUSY;
   2a2ac:	f06f 000f 	mvn.w	r0, #15
}
   2a2b0:	4770      	bx	lr
		return -EINVAL;
   2a2b2:	f06f 0015 	mvn.w	r0, #21
   2a2b6:	e7f5      	b.n	2a2a4 <register_ept+0x2c>
   2a2b8:	f06f 0015 	mvn.w	r0, #21
   2a2bc:	e7f2      	b.n	2a2a4 <register_ept+0x2c>
		return -EINVAL;
   2a2be:	f06f 0015 	mvn.w	r0, #21
   2a2c2:	e7ef      	b.n	2a2a4 <register_ept+0x2c>

0002a2c4 <rpmsg_send>:
{
   2a2c4:	b500      	push	{lr}
   2a2c6:	b083      	sub	sp, #12
   2a2c8:	460b      	mov	r3, r1
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   2a2ca:	2101      	movs	r1, #1
   2a2cc:	9101      	str	r1, [sp, #4]
   2a2ce:	9200      	str	r2, [sp, #0]
   2a2d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2a2d2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2a2d4:	f7f9 fd7a 	bl	23dcc <rpmsg_send_offchannel_raw>
}
   2a2d8:	b003      	add	sp, #12
   2a2da:	f85d fb04 	ldr.w	pc, [sp], #4

0002a2de <ept_cb>:
{
   2a2de:	b510      	push	{r4, lr}
   2a2e0:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   2a2e2:	b142      	cbz	r2, 2a2f6 <ept_cb+0x18>
   2a2e4:	4608      	mov	r0, r1
   2a2e6:	4611      	mov	r1, r2
	if (ept->cb->received) {
   2a2e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2a2ea:	6854      	ldr	r4, [r2, #4]
   2a2ec:	b10c      	cbz	r4, 2a2f2 <ept_cb+0x14>
		ept->cb->received(data, len, ept->priv);
   2a2ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2a2f0:	47a0      	blx	r4
}
   2a2f2:	2000      	movs	r0, #0
   2a2f4:	bd10      	pop	{r4, pc}
		if (!ept->bound) {
   2a2f6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2a2fa:	2a00      	cmp	r2, #0
   2a2fc:	d1f9      	bne.n	2a2f2 <ept_cb+0x14>
			ept->bound = true;
   2a2fe:	2201      	movs	r2, #1
   2a300:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   2a304:	4618      	mov	r0, r3
   2a306:	f7ea f9db 	bl	146c0 <bound_cb>
		return RPMSG_SUCCESS;
   2a30a:	e7f2      	b.n	2a2f2 <ept_cb+0x14>

0002a30c <mbox_deinit>:
{
   2a30c:	b538      	push	{r3, r4, r5, lr}
	const struct backend_config_t *conf = instance->config;
   2a30e:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2a310:	6904      	ldr	r4, [r0, #16]
	err = mbox_set_enabled(&conf->mbox_rx, 0);
   2a312:	f103 0014 	add.w	r0, r3, #20
	return z_impl_mbox_set_enabled(channel, enable);
   2a316:	2100      	movs	r1, #0
   2a318:	f7ff fe2a 	bl	29f70 <z_impl_mbox_set_enabled>
	if (err != 0) {
   2a31c:	4605      	mov	r5, r0
   2a31e:	b108      	cbz	r0, 2a324 <mbox_deinit+0x18>
}
   2a320:	4628      	mov	r0, r5
   2a322:	bd38      	pop	{r3, r4, r5, pc}
	k_work_queue_drain(&data->mbox_wq, 1);
   2a324:	f504 742a 	add.w	r4, r4, #680	; 0x2a8
   2a328:	2101      	movs	r1, #1
   2a32a:	4620      	mov	r0, r4
   2a32c:	f7fb ff1c 	bl	26168 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
   2a330:	4620      	mov	r0, r4
   2a332:	f7ec f99f 	bl	16674 <z_impl_k_thread_abort>
	return 0;
   2a336:	e7f3      	b.n	2a320 <mbox_deinit+0x14>

0002a338 <close>:
{
   2a338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a33c:	4604      	mov	r4, r0
	const struct backend_config_t *conf = instance->config;
   2a33e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct backend_data_t *data = instance->data;
   2a342:	6906      	ldr	r6, [r0, #16]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
   2a344:	f506 7761 	add.w	r7, r6, #900	; 0x384
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a348:	2301      	movs	r3, #1
   2a34a:	e8d7 2fef 	ldaex	r2, [r7]
   2a34e:	2a02      	cmp	r2, #2
   2a350:	d103      	bne.n	2a35a <close+0x22>
   2a352:	e8c7 3fe1 	stlex	r1, r3, [r7]
   2a356:	2900      	cmp	r1, #0
   2a358:	d1f7      	bne.n	2a34a <close+0x12>
   2a35a:	d137      	bne.n	2a3cc <close+0x94>
	if (!check_endpoints_freed(rpmsg_inst)) {
   2a35c:	4630      	mov	r0, r6
   2a35e:	f7ea f957 	bl	14610 <check_endpoints_freed>
   2a362:	b3b0      	cbz	r0, 2a3d2 <close+0x9a>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
   2a364:	f8d6 1380 	ldr.w	r1, [r6, #896]	; 0x380
   2a368:	4630      	mov	r0, r6
   2a36a:	f000 f8aa 	bl	2a4c2 <ipc_rpmsg_deinit>
	if (err != 0) {
   2a36e:	4605      	mov	r5, r0
   2a370:	b148      	cbz	r0, 2a386 <close+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a372:	2302      	movs	r3, #2
   2a374:	e8d7 2fef 	ldaex	r2, [r7]
   2a378:	e8c7 3fe1 	stlex	r1, r3, [r7]
   2a37c:	2900      	cmp	r1, #0
   2a37e:	d1f9      	bne.n	2a374 <close+0x3c>
}
   2a380:	4628      	mov	r0, r5
   2a382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = mbox_deinit(instance);
   2a386:	4620      	mov	r0, r4
   2a388:	f7ff ffc0 	bl	2a30c <mbox_deinit>
	if (err != 0) {
   2a38c:	4605      	mov	r5, r0
   2a38e:	2800      	cmp	r0, #0
   2a390:	d1ef      	bne.n	2a372 <close+0x3a>
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
   2a392:	f506 74d8 	add.w	r4, r6, #432	; 0x1b0
   2a396:	f8d8 1000 	ldr.w	r1, [r8]
   2a39a:	4620      	mov	r0, r4
   2a39c:	f000 f902 	bl	2a5a4 <ipc_static_vrings_deinit>
	if (err != 0) {
   2a3a0:	4605      	mov	r5, r0
   2a3a2:	2800      	cmp	r0, #0
   2a3a4:	d1e5      	bne.n	2a372 <close+0x3a>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
   2a3a6:	22e8      	movs	r2, #232	; 0xe8
   2a3a8:	2100      	movs	r1, #0
   2a3aa:	4620      	mov	r0, r4
   2a3ac:	f000 fef3 	bl	2b196 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
   2a3b0:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   2a3b4:	2100      	movs	r1, #0
   2a3b6:	4630      	mov	r0, r6
   2a3b8:	f000 feed 	bl	2b196 <memset>
   2a3bc:	2300      	movs	r3, #0
   2a3be:	e8d7 2fef 	ldaex	r2, [r7]
   2a3c2:	e8c7 3fe1 	stlex	r1, r3, [r7]
   2a3c6:	2900      	cmp	r1, #0
   2a3c8:	d0da      	beq.n	2a380 <close+0x48>
   2a3ca:	e7f8      	b.n	2a3be <close+0x86>
		return -EALREADY;
   2a3cc:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2a3d0:	e7d6      	b.n	2a380 <close+0x48>
		return -EBUSY;
   2a3d2:	f06f 050f 	mvn.w	r5, #15
   2a3d6:	e7d3      	b.n	2a380 <close+0x48>

0002a3d8 <vr_shm_configure>:
{
   2a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a3dc:	4605      	mov	r5, r0
   2a3de:	460c      	mov	r4, r1
	num_desc = optimal_num_desc(conf->shm_size, conf->buffer_size);
   2a3e0:	688a      	ldr	r2, [r1, #8]
   2a3e2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   2a3e4:	3a04      	subs	r2, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   2a3e6:	3326      	adds	r3, #38	; 0x26
   2a3e8:	005b      	lsls	r3, r3, #1

	num_desc = (unsigned int) (available / single_alloc);
   2a3ea:	fbb2 f7f3 	udiv	r7, r2, r3
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   2a3ee:	4293      	cmp	r3, r2
   2a3f0:	d833      	bhi.n	2a45a <vr_shm_configure+0x82>
		return 0;
	}

	return 32 - __builtin_clz(op);
   2a3f2:	fab7 f787 	clz	r7, r7
   2a3f6:	f1c7 0720 	rsb	r7, r7, #32

	return (1 << (find_msb_set(num_desc) - 1));
   2a3fa:	3f01      	subs	r7, #1
   2a3fc:	2601      	movs	r6, #1
	if (num_desc == 0) {
   2a3fe:	40be      	lsls	r6, r7
   2a400:	d02d      	beq.n	2a45e <vr_shm_configure+0x86>
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   2a402:	6863      	ldr	r3, [r4, #4]
   2a404:	f103 0804 	add.w	r8, r3, #4
   2a408:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   2a40c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2a40e:	4630      	mov	r0, r6
   2a410:	f7ff fdbb 	bl	29f8a <shm_size>
   2a414:	3804      	subs	r0, #4
   2a416:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   2a41a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	return (buf_size * num);
   2a41c:	40ba      	lsls	r2, r7
   2a41e:	eb08 0242 	add.w	r2, r8, r2, lsl #1
   2a422:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
	size = num * sizeof(struct vring_desc);
   2a426:	2310      	movs	r3, #16
   2a428:	40bb      	lsls	r3, r7
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   2a42a:	1cf1      	adds	r1, r6, #3
   2a42c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	size = (size + align - 1) & ~(align - 1);
   2a430:	3303      	adds	r3, #3
   2a432:	f023 0303 	bic.w	r3, r3, #3
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   2a436:	2108      	movs	r1, #8
   2a438:	40b9      	lsls	r1, r7
	size += sizeof(struct vring_used) +
   2a43a:	440b      	add	r3, r1
   2a43c:	3306      	adds	r3, #6
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   2a43e:	441a      	add	r2, r3
   2a440:	3203      	adds	r2, #3
   2a442:	f022 0203 	bic.w	r2, r2, #3
   2a446:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	vr->status_reg_addr = conf->shm_addr;
   2a44a:	6863      	ldr	r3, [r4, #4]
   2a44c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	vr->vring_size = num_desc;
   2a450:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
	return 0;
   2a454:	2000      	movs	r0, #0
}
   2a456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   2a45a:	2700      	movs	r7, #0
   2a45c:	e7cd      	b.n	2a3fa <vr_shm_configure+0x22>
		return -ENOMEM;
   2a45e:	f06f 000b 	mvn.w	r0, #11
   2a462:	e7f8      	b.n	2a456 <vr_shm_configure+0x7e>

0002a464 <mbox_callback>:
{
   2a464:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2a466:	f502 7126 	add.w	r1, r2, #664	; 0x298
   2a46a:	f502 702a 	add.w	r0, r2, #680	; 0x2a8
   2a46e:	f004 fe03 	bl	2f078 <k_work_submit_to_queue>
}
   2a472:	bd08      	pop	{r3, pc}

0002a474 <mbox_callback_process>:
{
   2a474:	b508      	push	{r3, lr}
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2a476:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   2a47a:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
   2a47e:	3b00      	subs	r3, #0
   2a480:	bf18      	it	ne
   2a482:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   2a484:	33a0      	adds	r3, #160	; 0xa0
   2a486:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2a48a:	6840      	ldr	r0, [r0, #4]
   2a48c:	f004 fa0f 	bl	2e8ae <virtqueue_notification>
}
   2a490:	bd08      	pop	{r3, pc}

0002a492 <backend_init>:
{
   2a492:	b510      	push	{r4, lr}
	const struct backend_config_t *conf = instance->config;
   2a494:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2a496:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2a498:	681b      	ldr	r3, [r3, #0]
   2a49a:	f8c4 3380 	str.w	r3, [r4, #896]	; 0x380
	k_mutex_init(&data->rpmsg_inst.mtx);
   2a49e:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
	return z_impl_k_mutex_init(mutex);
   2a4a2:	f004 fccd 	bl	2ee40 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2a4a6:	f504 7461 	add.w	r4, r4, #900	; 0x384
   2a4aa:	2000      	movs	r0, #0
   2a4ac:	e8d4 3fef 	ldaex	r3, [r4]
   2a4b0:	e8c4 0fe2 	stlex	r2, r0, [r4]
   2a4b4:	2a00      	cmp	r2, #0
   2a4b6:	d1f9      	bne.n	2a4ac <backend_init+0x1a>
}
   2a4b8:	bd10      	pop	{r4, pc}

0002a4ba <rpmsg_service_unbind>:
{
   2a4ba:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   2a4bc:	f004 fad0 	bl	2ea60 <rpmsg_destroy_ept>
}
   2a4c0:	bd08      	pop	{r3, pc}

0002a4c2 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
	if (!instance) {
   2a4c2:	b180      	cbz	r0, 2a4e6 <ipc_rpmsg_deinit+0x24>
{
   2a4c4:	b538      	push	{r3, r4, r5, lr}
   2a4c6:	460c      	mov	r4, r1
   2a4c8:	4605      	mov	r5, r0
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2a4ca:	30e0      	adds	r0, #224	; 0xe0
   2a4cc:	f004 fc33 	bl	2ed36 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2a4d0:	b10c      	cbz	r4, 2a4d6 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2a4d2:	2000      	movs	r0, #0
}
   2a4d4:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   2a4d6:	220c      	movs	r2, #12
   2a4d8:	2100      	movs	r1, #0
   2a4da:	f505 70c4 	add.w	r0, r5, #392	; 0x188
   2a4de:	f000 fe5a 	bl	2b196 <memset>
	return 0;
   2a4e2:	2000      	movs	r0, #0
   2a4e4:	e7f6      	b.n	2a4d4 <ipc_rpmsg_deinit+0x12>
		return -EINVAL;
   2a4e6:	f06f 0015 	mvn.w	r0, #21
}
   2a4ea:	4770      	bx	lr

0002a4ec <virtio_notify>:
{
   2a4ec:	b508      	push	{r3, lr}
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   2a4ee:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2a4f0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2a4f4:	b113      	cbz	r3, 2a4fc <virtio_notify+0x10>
		vr->notify_cb(vq, vr->priv);
   2a4f6:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2a4fa:	4798      	blx	r3
}
   2a4fc:	bd08      	pop	{r3, pc}

0002a4fe <virtio_set_features>:
}
   2a4fe:	4770      	bx	lr

0002a500 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   2a500:	6983      	ldr	r3, [r0, #24]
   2a502:	b913      	cbnz	r3, 2a50a <virtio_set_status+0xa>
	sys_write8(status, vr->status_reg_addr);
   2a504:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2a508:	7019      	strb	r1, [r3, #0]
}
   2a50a:	4770      	bx	lr

0002a50c <virtio_get_features>:
}
   2a50c:	2001      	movs	r0, #1
   2a50e:	4770      	bx	lr

0002a510 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2a510:	6983      	ldr	r3, [r0, #24]
   2a512:	2b01      	cmp	r3, #1
   2a514:	d001      	beq.n	2a51a <virtio_get_status+0xa>
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2a516:	2004      	movs	r0, #4
}
   2a518:	4770      	bx	lr
		ret = sys_read8(vr->status_reg_addr);
   2a51a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
   2a51e:	7818      	ldrb	r0, [r3, #0]
   2a520:	b2c0      	uxtb	r0, r0
   2a522:	4770      	bx	lr

0002a524 <metal_io_finish>:
{
   2a524:	b510      	push	{r4, lr}
   2a526:	4604      	mov	r4, r0
	if (io->ops.close)
   2a528:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2a52a:	b103      	cbz	r3, 2a52e <metal_io_finish+0xa>
		(*io->ops.close)(io);
   2a52c:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   2a52e:	2238      	movs	r2, #56	; 0x38
   2a530:	2100      	movs	r1, #0
   2a532:	4620      	mov	r0, r4
   2a534:	f000 fe2f 	bl	2b196 <memset>
}
   2a538:	bd10      	pop	{r4, pc}

0002a53a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2a53a:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2a53c:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2a53e:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2a540:	4620      	mov	r0, r4
   2a542:	f004 ff2e 	bl	2f3a2 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2a546:	4605      	mov	r5, r0
   2a548:	b118      	cbz	r0, 2a552 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   2a54a:	4622      	mov	r2, r4
   2a54c:	2100      	movs	r1, #0
   2a54e:	f000 fe22 	bl	2b196 <memset>
	}

	return vqs;
}
   2a552:	4628      	mov	r0, r5
   2a554:	bd38      	pop	{r3, r4, r5, pc}

0002a556 <vq_teardown>:
{
   2a556:	b510      	push	{r4, lr}
   2a558:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   2a55a:	2230      	movs	r2, #48	; 0x30
   2a55c:	2100      	movs	r1, #0
   2a55e:	f000 fe1a 	bl	2b196 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   2a562:	2218      	movs	r2, #24
   2a564:	2100      	movs	r1, #0
   2a566:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2a56a:	f000 fe14 	bl	2b196 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   2a56e:	2218      	movs	r2, #24
   2a570:	2100      	movs	r1, #0
   2a572:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2a576:	f000 fe0e 	bl	2b196 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2a57a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2a57e:	f7f9 fbbd 	bl	23cfc <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   2a582:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2a586:	f7f9 fbb9 	bl	23cfc <virtqueue_free>
}
   2a58a:	2000      	movs	r0, #0
   2a58c:	bd10      	pop	{r4, pc}

0002a58e <libmetal_teardown>:
{
   2a58e:	b510      	push	{r4, lr}
	vr->shm_io = 0;
   2a590:	2400      	movs	r4, #0
   2a592:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2a596:	3034      	adds	r0, #52	; 0x34
   2a598:	f7f9 fad0 	bl	23b3c <metal_device_close>
	metal_finish();
   2a59c:	f7f9 fb26 	bl	23bec <metal_finish>
}
   2a5a0:	4620      	mov	r0, r4
   2a5a2:	bd10      	pop	{r4, pc}

0002a5a4 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2a5a4:	b538      	push	{r3, r4, r5, lr}
   2a5a6:	4604      	mov	r4, r0
	int err;

	err = vq_teardown(vr, role);
   2a5a8:	f7ff ffd5 	bl	2a556 <vq_teardown>
	if (err != 0) {
   2a5ac:	4605      	mov	r5, r0
   2a5ae:	b108      	cbz	r0, 2a5b4 <ipc_static_vrings_deinit+0x10>
	}

	metal_io_finish(vr->shm_device.regions);

	return 0;
}
   2a5b0:	4628      	mov	r0, r5
   2a5b2:	bd38      	pop	{r3, r4, r5, pc}
	err = libmetal_teardown(vr);
   2a5b4:	4620      	mov	r0, r4
   2a5b6:	f7ff ffea 	bl	2a58e <libmetal_teardown>
	if (err != 0) {
   2a5ba:	4605      	mov	r5, r0
   2a5bc:	2800      	cmp	r0, #0
   2a5be:	d1f7      	bne.n	2a5b0 <ipc_static_vrings_deinit+0xc>
	metal_io_finish(vr->shm_device.regions);
   2a5c0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2a5c4:	f7ff ffae 	bl	2a524 <metal_io_finish>
	return 0;
   2a5c8:	e7f2      	b.n	2a5b0 <ipc_static_vrings_deinit+0xc>

0002a5ca <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   2a5ca:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a5cc:	f001 021f 	and.w	r2, r1, #31
   2a5d0:	2301      	movs	r3, #1
   2a5d2:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a5d4:	0949      	lsrs	r1, r1, #5
   2a5d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a5da:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a5dc:	e8d0 2fef 	ldaex	r2, [r0]
   2a5e0:	ea02 0c01 	and.w	ip, r2, r1
   2a5e4:	e8c0 cfee 	stlex	lr, ip, [r0]
   2a5e8:	f1be 0f00 	cmp.w	lr, #0
   2a5ec:	d1f6      	bne.n	2a5dc <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
   2a5ee:	4213      	tst	r3, r2
}
   2a5f0:	bf14      	ite	ne
   2a5f2:	2001      	movne	r0, #1
   2a5f4:	2000      	moveq	r0, #0
   2a5f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002a5fa <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a5fa:	f001 021f 	and.w	r2, r1, #31
   2a5fe:	2301      	movs	r3, #1
   2a600:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a602:	0949      	lsrs	r1, r1, #5
   2a604:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a608:	e8d0 2fef 	ldaex	r2, [r0]
   2a60c:	431a      	orrs	r2, r3
   2a60e:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2a612:	2900      	cmp	r1, #0
   2a614:	d1f8      	bne.n	2a608 <atomic_set_bit+0xe>
}
   2a616:	4770      	bx	lr

0002a618 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   2a618:	2000      	movs	r0, #0
   2a61a:	4770      	bx	lr

0002a61c <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2a61c:	428b      	cmp	r3, r1
   2a61e:	d901      	bls.n	2a624 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   2a620:	2000      	movs	r0, #0
	}
}
   2a622:	4770      	bx	lr
{
   2a624:	b510      	push	{r4, lr}
   2a626:	4694      	mov	ip, r2
   2a628:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   2a62a:	461a      	mov	r2, r3
   2a62c:	4661      	mov	r1, ip
   2a62e:	f000 fd83 	bl	2b138 <memcpy>
		return from_len;
   2a632:	4620      	mov	r0, r4
}
   2a634:	bd10      	pop	{r4, pc}

0002a636 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2a636:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   2a638:	f000 fdad 	bl	2b196 <memset>
}
   2a63c:	bd08      	pop	{r3, pc}

0002a63e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2a63e:	09c3      	lsrs	r3, r0, #7
   2a640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a644:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2a648:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2a64c:	b2c0      	uxtb	r0, r0
   2a64e:	4770      	bx	lr

0002a650 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2a650:	7803      	ldrb	r3, [r0, #0]
   2a652:	78ca      	ldrb	r2, [r1, #3]
   2a654:	4053      	eors	r3, r2
   2a656:	7003      	strb	r3, [r0, #0]
   2a658:	7843      	ldrb	r3, [r0, #1]
   2a65a:	788a      	ldrb	r2, [r1, #2]
   2a65c:	4053      	eors	r3, r2
   2a65e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2a660:	7883      	ldrb	r3, [r0, #2]
   2a662:	784a      	ldrb	r2, [r1, #1]
   2a664:	4053      	eors	r3, r2
   2a666:	7083      	strb	r3, [r0, #2]
   2a668:	78c3      	ldrb	r3, [r0, #3]
   2a66a:	780a      	ldrb	r2, [r1, #0]
   2a66c:	4053      	eors	r3, r2
   2a66e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2a670:	7903      	ldrb	r3, [r0, #4]
   2a672:	79ca      	ldrb	r2, [r1, #7]
   2a674:	4053      	eors	r3, r2
   2a676:	7103      	strb	r3, [r0, #4]
   2a678:	7943      	ldrb	r3, [r0, #5]
   2a67a:	798a      	ldrb	r2, [r1, #6]
   2a67c:	4053      	eors	r3, r2
   2a67e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2a680:	7983      	ldrb	r3, [r0, #6]
   2a682:	794a      	ldrb	r2, [r1, #5]
   2a684:	4053      	eors	r3, r2
   2a686:	7183      	strb	r3, [r0, #6]
   2a688:	79c3      	ldrb	r3, [r0, #7]
   2a68a:	790a      	ldrb	r2, [r1, #4]
   2a68c:	4053      	eors	r3, r2
   2a68e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2a690:	7a03      	ldrb	r3, [r0, #8]
   2a692:	7aca      	ldrb	r2, [r1, #11]
   2a694:	4053      	eors	r3, r2
   2a696:	7203      	strb	r3, [r0, #8]
   2a698:	7a43      	ldrb	r3, [r0, #9]
   2a69a:	7a8a      	ldrb	r2, [r1, #10]
   2a69c:	4053      	eors	r3, r2
   2a69e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2a6a0:	7a83      	ldrb	r3, [r0, #10]
   2a6a2:	7a4a      	ldrb	r2, [r1, #9]
   2a6a4:	4053      	eors	r3, r2
   2a6a6:	7283      	strb	r3, [r0, #10]
   2a6a8:	7ac3      	ldrb	r3, [r0, #11]
   2a6aa:	7a0a      	ldrb	r2, [r1, #8]
   2a6ac:	4053      	eors	r3, r2
   2a6ae:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2a6b0:	7b03      	ldrb	r3, [r0, #12]
   2a6b2:	7bca      	ldrb	r2, [r1, #15]
   2a6b4:	4053      	eors	r3, r2
   2a6b6:	7303      	strb	r3, [r0, #12]
   2a6b8:	7b43      	ldrb	r3, [r0, #13]
   2a6ba:	7b8a      	ldrb	r2, [r1, #14]
   2a6bc:	4053      	eors	r3, r2
   2a6be:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2a6c0:	7b83      	ldrb	r3, [r0, #14]
   2a6c2:	7b4a      	ldrb	r2, [r1, #13]
   2a6c4:	4053      	eors	r3, r2
   2a6c6:	7383      	strb	r3, [r0, #14]
   2a6c8:	7bc3      	ldrb	r3, [r0, #15]
   2a6ca:	7b0a      	ldrb	r2, [r1, #12]
   2a6cc:	4053      	eors	r3, r2
   2a6ce:	73c3      	strb	r3, [r0, #15]
}
   2a6d0:	4770      	bx	lr

0002a6d2 <shift_rows>:
{
   2a6d2:	b500      	push	{lr}
   2a6d4:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2a6d6:	7802      	ldrb	r2, [r0, #0]
   2a6d8:	f88d 2000 	strb.w	r2, [sp]
   2a6dc:	7942      	ldrb	r2, [r0, #5]
   2a6de:	f88d 2001 	strb.w	r2, [sp, #1]
   2a6e2:	7a82      	ldrb	r2, [r0, #10]
   2a6e4:	f88d 2002 	strb.w	r2, [sp, #2]
   2a6e8:	7bc2      	ldrb	r2, [r0, #15]
   2a6ea:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2a6ee:	7902      	ldrb	r2, [r0, #4]
   2a6f0:	f88d 2004 	strb.w	r2, [sp, #4]
   2a6f4:	7a42      	ldrb	r2, [r0, #9]
   2a6f6:	f88d 2005 	strb.w	r2, [sp, #5]
   2a6fa:	7b82      	ldrb	r2, [r0, #14]
   2a6fc:	f88d 2006 	strb.w	r2, [sp, #6]
   2a700:	78c2      	ldrb	r2, [r0, #3]
   2a702:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2a706:	7a02      	ldrb	r2, [r0, #8]
   2a708:	f88d 2008 	strb.w	r2, [sp, #8]
   2a70c:	7b42      	ldrb	r2, [r0, #13]
   2a70e:	f88d 2009 	strb.w	r2, [sp, #9]
   2a712:	7882      	ldrb	r2, [r0, #2]
   2a714:	f88d 200a 	strb.w	r2, [sp, #10]
   2a718:	79c2      	ldrb	r2, [r0, #7]
   2a71a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2a71e:	7b02      	ldrb	r2, [r0, #12]
   2a720:	f88d 200c 	strb.w	r2, [sp, #12]
   2a724:	7842      	ldrb	r2, [r0, #1]
   2a726:	f88d 200d 	strb.w	r2, [sp, #13]
   2a72a:	7982      	ldrb	r2, [r0, #6]
   2a72c:	f88d 200e 	strb.w	r2, [sp, #14]
   2a730:	7ac3      	ldrb	r3, [r0, #11]
   2a732:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2a736:	2310      	movs	r3, #16
   2a738:	466a      	mov	r2, sp
   2a73a:	4619      	mov	r1, r3
   2a73c:	f7ff ff6e 	bl	2a61c <_copy>
}
   2a740:	b005      	add	sp, #20
   2a742:	f85d fb04 	ldr.w	pc, [sp], #4

0002a746 <mult_row_column>:
{
   2a746:	b570      	push	{r4, r5, r6, lr}
   2a748:	4606      	mov	r6, r0
   2a74a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2a74c:	7808      	ldrb	r0, [r1, #0]
   2a74e:	f7ff ff76 	bl	2a63e <_double_byte>
   2a752:	4605      	mov	r5, r0
   2a754:	7860      	ldrb	r0, [r4, #1]
   2a756:	f7ff ff72 	bl	2a63e <_double_byte>
   2a75a:	7861      	ldrb	r1, [r4, #1]
   2a75c:	78a2      	ldrb	r2, [r4, #2]
   2a75e:	78e3      	ldrb	r3, [r4, #3]
   2a760:	4048      	eors	r0, r1
   2a762:	4045      	eors	r5, r0
   2a764:	406a      	eors	r2, r5
   2a766:	4053      	eors	r3, r2
   2a768:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2a76a:	7825      	ldrb	r5, [r4, #0]
   2a76c:	7860      	ldrb	r0, [r4, #1]
   2a76e:	f7ff ff66 	bl	2a63e <_double_byte>
   2a772:	4045      	eors	r5, r0
   2a774:	b2ed      	uxtb	r5, r5
   2a776:	78a0      	ldrb	r0, [r4, #2]
   2a778:	f7ff ff61 	bl	2a63e <_double_byte>
   2a77c:	78a2      	ldrb	r2, [r4, #2]
   2a77e:	78e3      	ldrb	r3, [r4, #3]
   2a780:	4050      	eors	r0, r2
   2a782:	4045      	eors	r5, r0
   2a784:	406b      	eors	r3, r5
   2a786:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2a788:	7825      	ldrb	r5, [r4, #0]
   2a78a:	7863      	ldrb	r3, [r4, #1]
   2a78c:	405d      	eors	r5, r3
   2a78e:	78a0      	ldrb	r0, [r4, #2]
   2a790:	f7ff ff55 	bl	2a63e <_double_byte>
   2a794:	4045      	eors	r5, r0
   2a796:	b2ed      	uxtb	r5, r5
   2a798:	78e0      	ldrb	r0, [r4, #3]
   2a79a:	f7ff ff50 	bl	2a63e <_double_byte>
   2a79e:	78e3      	ldrb	r3, [r4, #3]
   2a7a0:	4058      	eors	r0, r3
   2a7a2:	4045      	eors	r5, r0
   2a7a4:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2a7a6:	7820      	ldrb	r0, [r4, #0]
   2a7a8:	f7ff ff49 	bl	2a63e <_double_byte>
   2a7ac:	7822      	ldrb	r2, [r4, #0]
   2a7ae:	7863      	ldrb	r3, [r4, #1]
   2a7b0:	78a5      	ldrb	r5, [r4, #2]
   2a7b2:	4050      	eors	r0, r2
   2a7b4:	4043      	eors	r3, r0
   2a7b6:	405d      	eors	r5, r3
   2a7b8:	b2ed      	uxtb	r5, r5
   2a7ba:	78e0      	ldrb	r0, [r4, #3]
   2a7bc:	f7ff ff3f 	bl	2a63e <_double_byte>
   2a7c0:	4045      	eors	r5, r0
   2a7c2:	70f5      	strb	r5, [r6, #3]
}
   2a7c4:	bd70      	pop	{r4, r5, r6, pc}

0002a7c6 <mix_columns>:
{
   2a7c6:	b510      	push	{r4, lr}
   2a7c8:	b084      	sub	sp, #16
   2a7ca:	4604      	mov	r4, r0
	mult_row_column(t, s);
   2a7cc:	4601      	mov	r1, r0
   2a7ce:	4668      	mov	r0, sp
   2a7d0:	f7ff ffb9 	bl	2a746 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2a7d4:	1d21      	adds	r1, r4, #4
   2a7d6:	a801      	add	r0, sp, #4
   2a7d8:	f7ff ffb5 	bl	2a746 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2a7dc:	f104 0108 	add.w	r1, r4, #8
   2a7e0:	a802      	add	r0, sp, #8
   2a7e2:	f7ff ffb0 	bl	2a746 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2a7e6:	f104 010c 	add.w	r1, r4, #12
   2a7ea:	a803      	add	r0, sp, #12
   2a7ec:	f7ff ffab 	bl	2a746 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2a7f0:	2310      	movs	r3, #16
   2a7f2:	466a      	mov	r2, sp
   2a7f4:	4619      	mov	r1, r3
   2a7f6:	4620      	mov	r0, r4
   2a7f8:	f7ff ff10 	bl	2a61c <_copy>
}
   2a7fc:	b004      	add	sp, #16
   2a7fe:	bd10      	pop	{r4, pc}

0002a800 <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2a800:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a802:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2a806:	2a00      	cmp	r2, #0
   2a808:	db04      	blt.n	2a814 <gf_double+0x14>
   2a80a:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   2a80e:	f100 020f 	add.w	r2, r0, #15
   2a812:	e006      	b.n	2a822 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a814:	f04f 0c87 	mov.w	ip, #135	; 0x87
   2a818:	e7f9      	b.n	2a80e <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2a81a:	f813 0901 	ldrb.w	r0, [r3], #-1
   2a81e:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   2a822:	7818      	ldrb	r0, [r3, #0]
   2a824:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   2a828:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   2a82c:	428b      	cmp	r3, r1
   2a82e:	d1f4      	bne.n	2a81a <gf_double+0x1a>
	}
}
   2a830:	4770      	bx	lr

0002a832 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2a832:	b130      	cbz	r0, 2a842 <tc_cmac_erase+0x10>
{
   2a834:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2a836:	2258      	movs	r2, #88	; 0x58
   2a838:	2100      	movs	r1, #0
   2a83a:	f7ff fefc 	bl	2a636 <_set>

	return TC_CRYPTO_SUCCESS;
   2a83e:	2001      	movs	r0, #1
}
   2a840:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2a842:	2000      	movs	r0, #0
}
   2a844:	4770      	bx	lr

0002a846 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a846:	b1a0      	cbz	r0, 2a872 <tc_cmac_init+0x2c>
{
   2a848:	b510      	push	{r4, lr}
   2a84a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a84c:	2210      	movs	r2, #16
   2a84e:	2100      	movs	r1, #0
   2a850:	f7ff fef1 	bl	2a636 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2a854:	2210      	movs	r2, #16
   2a856:	2100      	movs	r1, #0
   2a858:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a85c:	f7ff feeb 	bl	2a636 <_set>
	s->leftover_offset = 0;
   2a860:	2300      	movs	r3, #0
   2a862:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2a864:	2200      	movs	r2, #0
   2a866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a86a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   2a86e:	2001      	movs	r0, #1
}
   2a870:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2a872:	2000      	movs	r0, #0
}
   2a874:	4770      	bx	lr

0002a876 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2a876:	b338      	cbz	r0, 2a8c8 <tc_cmac_setup+0x52>
{
   2a878:	b570      	push	{r4, r5, r6, lr}
   2a87a:	460d      	mov	r5, r1
   2a87c:	4616      	mov	r6, r2
   2a87e:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2a880:	b321      	cbz	r1, 2a8cc <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2a882:	2258      	movs	r2, #88	; 0x58
   2a884:	2100      	movs	r1, #0
   2a886:	f7ff fed6 	bl	2a636 <_set>
	s->sched = sched;
   2a88a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2a88c:	4629      	mov	r1, r5
   2a88e:	4630      	mov	r0, r6
   2a890:	f7ea faa2 	bl	14dd8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a894:	2210      	movs	r2, #16
   2a896:	2100      	movs	r1, #0
   2a898:	4620      	mov	r0, r4
   2a89a:	f7ff fecc 	bl	2a636 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a89e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a8a0:	4621      	mov	r1, r4
   2a8a2:	4620      	mov	r0, r4
   2a8a4:	f7ea fafa 	bl	14e9c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2a8a8:	f104 0510 	add.w	r5, r4, #16
   2a8ac:	4621      	mov	r1, r4
   2a8ae:	4628      	mov	r0, r5
   2a8b0:	f7ff ffa6 	bl	2a800 <gf_double>
	gf_double (s->K2, s->K1);
   2a8b4:	4629      	mov	r1, r5
   2a8b6:	f104 0020 	add.w	r0, r4, #32
   2a8ba:	f7ff ffa1 	bl	2a800 <gf_double>
	tc_cmac_init(s);
   2a8be:	4620      	mov	r0, r4
   2a8c0:	f7ff ffc1 	bl	2a846 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2a8c4:	2001      	movs	r0, #1
}
   2a8c6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2a8c8:	2000      	movs	r0, #0
}
   2a8ca:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2a8cc:	2000      	movs	r0, #0
   2a8ce:	e7fa      	b.n	2a8c6 <tc_cmac_setup+0x50>

0002a8d0 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a8d0:	2800      	cmp	r0, #0
   2a8d2:	d064      	beq.n	2a99e <tc_cmac_update+0xce>
{
   2a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8d8:	460d      	mov	r5, r1
   2a8da:	4616      	mov	r6, r2
   2a8dc:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2a8de:	2a00      	cmp	r2, #0
   2a8e0:	d05f      	beq.n	2a9a2 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2a8e2:	2900      	cmp	r1, #0
   2a8e4:	d060      	beq.n	2a9a8 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2a8e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2a8e8:	6d42      	ldr	r2, [r0, #84]	; 0x54
   2a8ea:	ea53 0102 	orrs.w	r1, r3, r2
   2a8ee:	d05d      	beq.n	2a9ac <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2a8f0:	3b01      	subs	r3, #1
   2a8f2:	f142 32ff 	adc.w	r2, r2, #4294967295
   2a8f6:	6503      	str	r3, [r0, #80]	; 0x50
   2a8f8:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2a8fa:	6c47      	ldr	r7, [r0, #68]	; 0x44
   2a8fc:	2f00      	cmp	r7, #0
   2a8fe:	d03d      	beq.n	2a97c <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2a900:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   2a904:	4546      	cmp	r6, r8
   2a906:	d30d      	bcc.n	2a924 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2a908:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2a90c:	4643      	mov	r3, r8
   2a90e:	462a      	mov	r2, r5
   2a910:	4641      	mov	r1, r8
   2a912:	4420      	add	r0, r4
   2a914:	f7ff fe82 	bl	2a61c <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2a918:	3f10      	subs	r7, #16
   2a91a:	443e      	add	r6, r7
		data += remaining_space;
   2a91c:	4445      	add	r5, r8
		s->leftover_offset = 0;
   2a91e:	2300      	movs	r3, #0
   2a920:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a922:	e013      	b.n	2a94c <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2a924:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2a928:	4633      	mov	r3, r6
   2a92a:	462a      	mov	r2, r5
   2a92c:	4631      	mov	r1, r6
   2a92e:	4420      	add	r0, r4
   2a930:	f7ff fe74 	bl	2a61c <_copy>
			s->leftover_offset += data_length;
   2a934:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a936:	4433      	add	r3, r6
   2a938:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2a93a:	2001      	movs	r0, #1
   2a93c:	e032      	b.n	2a9a4 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   2a93e:	5ce2      	ldrb	r2, [r4, r3]
   2a940:	18e1      	adds	r1, r4, r3
   2a942:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   2a946:	404a      	eors	r2, r1
   2a948:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a94a:	3301      	adds	r3, #1
   2a94c:	2b0f      	cmp	r3, #15
   2a94e:	d9f6      	bls.n	2a93e <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a950:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a952:	4621      	mov	r1, r4
   2a954:	4620      	mov	r0, r4
   2a956:	f7ea faa1 	bl	14e9c <tc_aes_encrypt>
   2a95a:	e00f      	b.n	2a97c <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   2a95c:	5ce0      	ldrb	r0, [r4, r3]
   2a95e:	f815 c003 	ldrb.w	ip, [r5, r3]
   2a962:	ea80 000c 	eor.w	r0, r0, ip
   2a966:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a968:	3301      	adds	r3, #1
   2a96a:	2b0f      	cmp	r3, #15
   2a96c:	d9f6      	bls.n	2a95c <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a96e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a970:	4621      	mov	r1, r4
   2a972:	4620      	mov	r0, r4
   2a974:	f7ea fa92 	bl	14e9c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2a978:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2a97a:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   2a97c:	2e10      	cmp	r6, #16
   2a97e:	d901      	bls.n	2a984 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a980:	2300      	movs	r3, #0
   2a982:	e7f2      	b.n	2a96a <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   2a984:	b90e      	cbnz	r6, 2a98a <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2a986:	2001      	movs	r0, #1
   2a988:	e00c      	b.n	2a9a4 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   2a98a:	4633      	mov	r3, r6
   2a98c:	462a      	mov	r2, r5
   2a98e:	4631      	mov	r1, r6
   2a990:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a994:	f7ff fe42 	bl	2a61c <_copy>
		s->leftover_offset = data_length;
   2a998:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2a99a:	2001      	movs	r0, #1
   2a99c:	e002      	b.n	2a9a4 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   2a99e:	2000      	movs	r0, #0
}
   2a9a0:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   2a9a2:	2001      	movs	r0, #1
}
   2a9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2a9a8:	2000      	movs	r0, #0
   2a9aa:	e7fb      	b.n	2a9a4 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   2a9ac:	2000      	movs	r0, #0
   2a9ae:	e7f9      	b.n	2a9a4 <tc_cmac_update+0xd4>

0002a9b0 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2a9b0:	b380      	cbz	r0, 2aa14 <tc_cmac_final+0x64>
{
   2a9b2:	b538      	push	{r3, r4, r5, lr}
   2a9b4:	460c      	mov	r4, r1
   2a9b6:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2a9b8:	b371      	cbz	r1, 2aa18 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2a9ba:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2a9bc:	2a10      	cmp	r2, #16
   2a9be:	d103      	bne.n	2a9c8 <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2a9c0:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a9c4:	2300      	movs	r3, #0
   2a9c6:	e019      	b.n	2a9fc <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2a9c8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2a9cc:	f1c2 0210 	rsb	r2, r2, #16
   2a9d0:	2100      	movs	r1, #0
   2a9d2:	4420      	add	r0, r4
   2a9d4:	f7ff fe2f 	bl	2a636 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2a9d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a9da:	4423      	add	r3, r4
   2a9dc:	2280      	movs	r2, #128	; 0x80
   2a9de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2a9e2:	f104 0c20 	add.w	ip, r4, #32
   2a9e6:	e7ed      	b.n	2a9c4 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a9e8:	5ce2      	ldrb	r2, [r4, r3]
   2a9ea:	18e1      	adds	r1, r4, r3
   2a9ec:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   2a9f0:	f81c 1003 	ldrb.w	r1, [ip, r3]
   2a9f4:	4048      	eors	r0, r1
   2a9f6:	4042      	eors	r2, r0
   2a9f8:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a9fa:	3301      	adds	r3, #1
   2a9fc:	2b0f      	cmp	r3, #15
   2a9fe:	d9f3      	bls.n	2a9e8 <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2aa00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2aa02:	4621      	mov	r1, r4
   2aa04:	4628      	mov	r0, r5
   2aa06:	f7ea fa49 	bl	14e9c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2aa0a:	4620      	mov	r0, r4
   2aa0c:	f7ff ff11 	bl	2a832 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2aa10:	2001      	movs	r0, #1
}
   2aa12:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2aa14:	2000      	movs	r0, #0
}
   2aa16:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2aa18:	2000      	movs	r0, #0
   2aa1a:	e7fa      	b.n	2aa12 <tc_cmac_final+0x62>

0002aa1c <BigEndian>:
	n = (((unsigned int)(*((*c)++))) << 24);
   2aa1c:	6802      	ldr	r2, [r0, #0]
   2aa1e:	1c53      	adds	r3, r2, #1
   2aa20:	6003      	str	r3, [r0, #0]
   2aa22:	4613      	mov	r3, r2
   2aa24:	f813 1b02 	ldrb.w	r1, [r3], #2
	n |= ((unsigned int)(*((*c)++)) << 16);
   2aa28:	6003      	str	r3, [r0, #0]
   2aa2a:	7853      	ldrb	r3, [r2, #1]
   2aa2c:	041b      	lsls	r3, r3, #16
   2aa2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
   2aa32:	1cd1      	adds	r1, r2, #3
   2aa34:	6001      	str	r1, [r0, #0]
   2aa36:	7891      	ldrb	r1, [r2, #2]
   2aa38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	n |= ((unsigned int)(*((*c)++)));
   2aa3c:	1d11      	adds	r1, r2, #4
   2aa3e:	6001      	str	r1, [r0, #0]
   2aa40:	78d0      	ldrb	r0, [r2, #3]
}
   2aa42:	4318      	orrs	r0, r3
   2aa44:	4770      	bx	lr

0002aa46 <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
   2aa46:	b328      	cbz	r0, 2aa94 <tc_sha256_update+0x4e>
{
   2aa48:	b570      	push	{r4, r5, r6, lr}
   2aa4a:	460c      	mov	r4, r1
   2aa4c:	4605      	mov	r5, r0
	if (s == (TCSha256State_t) 0 ||
   2aa4e:	b319      	cbz	r1, 2aa98 <tc_sha256_update+0x52>
	} else if (datalen == 0) {
   2aa50:	b912      	cbnz	r2, 2aa58 <tc_sha256_update+0x12>
		return TC_CRYPTO_SUCCESS;
   2aa52:	2001      	movs	r0, #1
   2aa54:	e01d      	b.n	2aa92 <tc_sha256_update+0x4c>
{
   2aa56:	4632      	mov	r2, r6
	while (datalen-- > 0) {
   2aa58:	1e56      	subs	r6, r2, #1
   2aa5a:	b1ca      	cbz	r2, 2aa90 <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
   2aa5c:	6eab      	ldr	r3, [r5, #104]	; 0x68
   2aa5e:	1c5a      	adds	r2, r3, #1
   2aa60:	66aa      	str	r2, [r5, #104]	; 0x68
   2aa62:	f814 1b01 	ldrb.w	r1, [r4], #1
   2aa66:	442b      	add	r3, r5
   2aa68:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2aa6c:	2a3f      	cmp	r2, #63	; 0x3f
   2aa6e:	d9f2      	bls.n	2aa56 <tc_sha256_update+0x10>
			compress(s->iv, s->leftover);
   2aa70:	f105 0128 	add.w	r1, r5, #40	; 0x28
   2aa74:	4628      	mov	r0, r5
   2aa76:	f7ea fa6b 	bl	14f50 <compress>
			s->leftover_offset = 0;
   2aa7a:	2300      	movs	r3, #0
   2aa7c:	66ab      	str	r3, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2aa7e:	6a2b      	ldr	r3, [r5, #32]
   2aa80:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2aa82:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2aa86:	f142 0200 	adc.w	r2, r2, #0
   2aa8a:	622b      	str	r3, [r5, #32]
   2aa8c:	626a      	str	r2, [r5, #36]	; 0x24
   2aa8e:	e7e2      	b.n	2aa56 <tc_sha256_update+0x10>
	return TC_CRYPTO_SUCCESS;
   2aa90:	2001      	movs	r0, #1
}
   2aa92:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2aa94:	2000      	movs	r0, #0
}
   2aa96:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2aa98:	2000      	movs	r0, #0
   2aa9a:	e7fa      	b.n	2aa92 <tc_sha256_update+0x4c>

0002aa9c <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
   2aa9c:	2800      	cmp	r0, #0
   2aa9e:	d065      	beq.n	2ab6c <tc_sha256_final+0xd0>
{
   2aaa0:	b570      	push	{r4, r5, r6, lr}
   2aaa2:	460d      	mov	r5, r1
   2aaa4:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
   2aaa6:	2900      	cmp	r1, #0
   2aaa8:	d062      	beq.n	2ab70 <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
   2aaaa:	6a0a      	ldr	r2, [r1, #32]
   2aaac:	6a49      	ldr	r1, [r1, #36]	; 0x24
   2aaae:	6eab      	ldr	r3, [r5, #104]	; 0x68
   2aab0:	00d8      	lsls	r0, r3, #3
   2aab2:	1812      	adds	r2, r2, r0
   2aab4:	f141 0100 	adc.w	r1, r1, #0
   2aab8:	622a      	str	r2, [r5, #32]
   2aaba:	6269      	str	r1, [r5, #36]	; 0x24
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2aabc:	1c58      	adds	r0, r3, #1
   2aabe:	66a8      	str	r0, [r5, #104]	; 0x68
   2aac0:	442b      	add	r3, r5
   2aac2:	2280      	movs	r2, #128	; 0x80
   2aac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2aac8:	2838      	cmp	r0, #56	; 0x38
   2aaca:	d82a      	bhi.n	2ab22 <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
   2aacc:	f105 0628 	add.w	r6, r5, #40	; 0x28
   2aad0:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   2aad2:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2aad6:	2100      	movs	r1, #0
   2aad8:	4430      	add	r0, r6
   2aada:	f7ff fdac 	bl	2a636 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2aade:	6a2a      	ldr	r2, [r5, #32]
   2aae0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2aae2:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
   2aae6:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2aaea:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
   2aaee:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2aaf2:	f885 1065 	strb.w	r1, [r5, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2aaf6:	0e12      	lsrs	r2, r2, #24
   2aaf8:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2aafc:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2ab00:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2ab04:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2ab08:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2ab0c:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2ab10:	0e1b      	lsrs	r3, r3, #24
   2ab12:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	compress(s->iv, s->leftover);
   2ab16:	4631      	mov	r1, r6
   2ab18:	4628      	mov	r0, r5
   2ab1a:	f7ea fa19 	bl	14f50 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2ab1e:	2200      	movs	r2, #0
   2ab20:	e01b      	b.n	2ab5a <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
   2ab22:	f105 0628 	add.w	r6, r5, #40	; 0x28
   2ab26:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2ab2a:	2100      	movs	r1, #0
   2ab2c:	4430      	add	r0, r6
   2ab2e:	f7ff fd82 	bl	2a636 <_set>
		compress(s->iv, s->leftover);
   2ab32:	4631      	mov	r1, r6
   2ab34:	4628      	mov	r0, r5
   2ab36:	f7ea fa0b 	bl	14f50 <compress>
		s->leftover_offset = 0;
   2ab3a:	2300      	movs	r3, #0
   2ab3c:	66ab      	str	r3, [r5, #104]	; 0x68
   2ab3e:	e7c5      	b.n	2aacc <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2ab40:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
   2ab44:	0e19      	lsrs	r1, r3, #24
   2ab46:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
   2ab48:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2ab4c:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
   2ab4e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2ab52:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
   2ab54:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2ab56:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
   2ab58:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2ab5a:	2a07      	cmp	r2, #7
   2ab5c:	d9f0      	bls.n	2ab40 <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
   2ab5e:	2270      	movs	r2, #112	; 0x70
   2ab60:	2100      	movs	r1, #0
   2ab62:	4628      	mov	r0, r5
   2ab64:	f7ff fd67 	bl	2a636 <_set>
	return TC_CRYPTO_SUCCESS;
   2ab68:	2001      	movs	r0, #1
}
   2ab6a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2ab6c:	2000      	movs	r0, #0
}
   2ab6e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2ab70:	2000      	movs	r0, #0
   2ab72:	e7fa      	b.n	2ab6a <tc_sha256_final+0xce>

0002ab74 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2ab74:	b500      	push	{lr}
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2ab76:	2300      	movs	r3, #0
   2ab78:	e00e      	b.n	2ab98 <rekey+0x24>
		key[i] = inner_pad ^ new_key[i];
   2ab7a:	f811 c003 	ldrb.w	ip, [r1, r3]
   2ab7e:	f08c 0c36 	eor.w	ip, ip, #54	; 0x36
   2ab82:	f800 c003 	strb.w	ip, [r0, r3]
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2ab86:	f811 c003 	ldrb.w	ip, [r1, r3]
   2ab8a:	f103 0e40 	add.w	lr, r3, #64	; 0x40
   2ab8e:	f08c 0c5c 	eor.w	ip, ip, #92	; 0x5c
   2ab92:	f800 c00e 	strb.w	ip, [r0, lr]
	for (i = 0; i < key_size; ++i) {
   2ab96:	3301      	adds	r3, #1
   2ab98:	4293      	cmp	r3, r2
   2ab9a:	d3ee      	bcc.n	2ab7a <rekey+0x6>
   2ab9c:	e006      	b.n	2abac <rekey+0x38>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ab9e:	2236      	movs	r2, #54	; 0x36
   2aba0:	54c2      	strb	r2, [r0, r3]
   2aba2:	f103 0240 	add.w	r2, r3, #64	; 0x40
   2aba6:	215c      	movs	r1, #92	; 0x5c
   2aba8:	5481      	strb	r1, [r0, r2]
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2abaa:	3301      	adds	r3, #1
   2abac:	2b3f      	cmp	r3, #63	; 0x3f
   2abae:	d9f6      	bls.n	2ab9e <rekey+0x2a>
	}
}
   2abb0:	f85d fb04 	ldr.w	pc, [sp], #4

0002abb4 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2abb4:	b388      	cbz	r0, 2ac1a <tc_hmac_set_key+0x66>
{
   2abb6:	b570      	push	{r4, r5, r6, lr}
   2abb8:	b0cc      	sub	sp, #304	; 0x130
   2abba:	460d      	mov	r5, r1
   2abbc:	4614      	mov	r4, r2
   2abbe:	4606      	mov	r6, r0
	if (ctx == (TCHmacState_t) 0 ||
   2abc0:	b369      	cbz	r1, 2ac1e <tc_hmac_set_key+0x6a>
	    key == (const uint8_t *) 0 ||
   2abc2:	b372      	cbz	r2, 2ac22 <tc_hmac_set_key+0x6e>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2abc4:	2a40      	cmp	r2, #64	; 0x40
   2abc6:	d813      	bhi.n	2abf0 <tc_hmac_set_key+0x3c>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   2abc8:	4668      	mov	r0, sp
   2abca:	f7ea fa8d 	bl	150e8 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2abce:	4622      	mov	r2, r4
   2abd0:	a93c      	add	r1, sp, #240	; 0xf0
   2abd2:	4668      	mov	r0, sp
   2abd4:	f7ff ff37 	bl	2aa46 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2abd8:	4669      	mov	r1, sp
   2abda:	a824      	add	r0, sp, #144	; 0x90
   2abdc:	f7ff ff5e 	bl	2aa9c <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2abe0:	4622      	mov	r2, r4
   2abe2:	4629      	mov	r1, r5
   2abe4:	f106 0070 	add.w	r0, r6, #112	; 0x70
   2abe8:	f7ff ffc4 	bl	2ab74 <rekey>
		rekey(ctx->key,
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2abec:	2001      	movs	r0, #1
   2abee:	e019      	b.n	2ac24 <tc_hmac_set_key+0x70>
		(void)tc_sha256_init(&ctx->hash_state);
   2abf0:	f7ea fa7a 	bl	150e8 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2abf4:	4622      	mov	r2, r4
   2abf6:	4629      	mov	r1, r5
   2abf8:	4630      	mov	r0, r6
   2abfa:	f7ff ff24 	bl	2aa46 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2abfe:	f106 0490 	add.w	r4, r6, #144	; 0x90
   2ac02:	4631      	mov	r1, r6
   2ac04:	4620      	mov	r0, r4
   2ac06:	f7ff ff49 	bl	2aa9c <tc_sha256_final>
		rekey(ctx->key,
   2ac0a:	2220      	movs	r2, #32
   2ac0c:	4621      	mov	r1, r4
   2ac0e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   2ac12:	f7ff ffaf 	bl	2ab74 <rekey>
	return TC_CRYPTO_SUCCESS;
   2ac16:	2001      	movs	r0, #1
   2ac18:	e004      	b.n	2ac24 <tc_hmac_set_key+0x70>
		return TC_CRYPTO_FAIL;
   2ac1a:	2000      	movs	r0, #0
}
   2ac1c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2ac1e:	2000      	movs	r0, #0
   2ac20:	e000      	b.n	2ac24 <tc_hmac_set_key+0x70>
   2ac22:	2000      	movs	r0, #0
}
   2ac24:	b04c      	add	sp, #304	; 0x130
   2ac26:	bd70      	pop	{r4, r5, r6, pc}

0002ac28 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2ac28:	b158      	cbz	r0, 2ac42 <tc_hmac_init+0x1a>
{
   2ac2a:	b510      	push	{r4, lr}
   2ac2c:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2ac2e:	f7ea fa5b 	bl	150e8 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2ac32:	2240      	movs	r2, #64	; 0x40
   2ac34:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2ac38:	4620      	mov	r0, r4
   2ac3a:	f7ff ff04 	bl	2aa46 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2ac3e:	2001      	movs	r0, #1
}
   2ac40:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2ac42:	2000      	movs	r0, #0
}
   2ac44:	4770      	bx	lr

0002ac46 <tc_hmac_update>:
		   const void *data,
		   unsigned int data_length)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2ac46:	b120      	cbz	r0, 2ac52 <tc_hmac_update+0xc>
{
   2ac48:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2ac4a:	f7ff fefc 	bl	2aa46 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2ac4e:	2001      	movs	r0, #1
}
   2ac50:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2ac52:	2000      	movs	r0, #0
}
   2ac54:	4770      	bx	lr

0002ac56 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2ac56:	b308      	cbz	r0, 2ac9c <tc_hmac_final+0x46>
{
   2ac58:	b538      	push	{r3, r4, r5, lr}
   2ac5a:	4614      	mov	r4, r2
   2ac5c:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2ac5e:	2920      	cmp	r1, #32
   2ac60:	d11e      	bne.n	2aca0 <tc_hmac_final+0x4a>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2ac62:	b1fa      	cbz	r2, 2aca4 <tc_hmac_final+0x4e>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2ac64:	4611      	mov	r1, r2
   2ac66:	f7ff ff19 	bl	2aa9c <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2ac6a:	4620      	mov	r0, r4
   2ac6c:	f7ea fa3c 	bl	150e8 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2ac70:	2240      	movs	r2, #64	; 0x40
   2ac72:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2ac76:	4620      	mov	r0, r4
   2ac78:	f7ff fee5 	bl	2aa46 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2ac7c:	2220      	movs	r2, #32
   2ac7e:	4629      	mov	r1, r5
   2ac80:	4620      	mov	r0, r4
   2ac82:	f7ff fee0 	bl	2aa46 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2ac86:	4621      	mov	r1, r4
   2ac88:	4628      	mov	r0, r5
   2ac8a:	f7ff ff07 	bl	2aa9c <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2ac8e:	22f0      	movs	r2, #240	; 0xf0
   2ac90:	2100      	movs	r1, #0
   2ac92:	4620      	mov	r0, r4
   2ac94:	f7ff fccf 	bl	2a636 <_set>

	return TC_CRYPTO_SUCCESS;
   2ac98:	2001      	movs	r0, #1
   2ac9a:	e002      	b.n	2aca2 <tc_hmac_final+0x4c>
		return TC_CRYPTO_FAIL;
   2ac9c:	2000      	movs	r0, #0
}
   2ac9e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2aca0:	2000      	movs	r0, #0
}
   2aca2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2aca4:	2000      	movs	r0, #0
   2aca6:	e7fc      	b.n	2aca2 <tc_hmac_final+0x4c>

0002aca8 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2aca8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2acac:	b082      	sub	sp, #8
   2acae:	4604      	mov	r4, r0
   2acb0:	460d      	mov	r5, r1
   2acb2:	4691      	mov	r9, r2
   2acb4:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2acb6:	2300      	movs	r3, #0
   2acb8:	f88d 3007 	strb.w	r3, [sp, #7]
	const uint8_t separator1 = 0x01;
   2acbc:	f04f 0b01 	mov.w	fp, #1
   2acc0:	f88d b006 	strb.w	fp, [sp, #6]

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2acc4:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
   2acc8:	2220      	movs	r2, #32
   2acca:	4641      	mov	r1, r8
   2accc:	f7ff ff72 	bl	2abb4 <tc_hmac_set_key>

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2acd0:	4620      	mov	r0, r4
   2acd2:	f7ff ffa9 	bl	2ac28 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2acd6:	f504 7688 	add.w	r6, r4, #272	; 0x110
   2acda:	2220      	movs	r2, #32
   2acdc:	4631      	mov	r1, r6
   2acde:	4620      	mov	r0, r4
   2ace0:	f7ff ffb1 	bl	2ac46 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2ace4:	465a      	mov	r2, fp
   2ace6:	f10d 0107 	add.w	r1, sp, #7
   2acea:	4620      	mov	r0, r4
   2acec:	f7ff ffab 	bl	2ac46 <tc_hmac_update>

	if (data && datalen)
   2acf0:	b115      	cbz	r5, 2acf8 <update+0x50>
   2acf2:	f1b9 0f00 	cmp.w	r9, #0
   2acf6:	d120      	bne.n	2ad3a <update+0x92>
		(void)tc_hmac_update(&prng->h, data, datalen);
	if (additional_data && additional_datalen)
   2acf8:	b10f      	cbz	r7, 2acfe <update+0x56>
   2acfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2acfc:	bb1b      	cbnz	r3, 2ad46 <update+0x9e>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2acfe:	4622      	mov	r2, r4
   2ad00:	2120      	movs	r1, #32
   2ad02:	4640      	mov	r0, r8
   2ad04:	f7ff ffa7 	bl	2ac56 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2ad08:	2220      	movs	r2, #32
   2ad0a:	4641      	mov	r1, r8
   2ad0c:	4620      	mov	r0, r4
   2ad0e:	f7ff ff51 	bl	2abb4 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2ad12:	4620      	mov	r0, r4
   2ad14:	f7ff ff88 	bl	2ac28 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2ad18:	2220      	movs	r2, #32
   2ad1a:	4631      	mov	r1, r6
   2ad1c:	4620      	mov	r0, r4
   2ad1e:	f7ff ff92 	bl	2ac46 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2ad22:	4622      	mov	r2, r4
   2ad24:	2120      	movs	r1, #32
   2ad26:	4630      	mov	r0, r6
   2ad28:	f7ff ff95 	bl	2ac56 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2ad2c:	b115      	cbz	r5, 2ad34 <update+0x8c>
   2ad2e:	f1b9 0f00 	cmp.w	r9, #0
   2ad32:	d10e      	bne.n	2ad52 <update+0xaa>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
}
   2ad34:	b002      	add	sp, #8
   2ad36:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		(void)tc_hmac_update(&prng->h, data, datalen);
   2ad3a:	464a      	mov	r2, r9
   2ad3c:	4629      	mov	r1, r5
   2ad3e:	4620      	mov	r0, r4
   2ad40:	f7ff ff81 	bl	2ac46 <tc_hmac_update>
   2ad44:	e7d8      	b.n	2acf8 <update+0x50>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2ad46:	461a      	mov	r2, r3
   2ad48:	4639      	mov	r1, r7
   2ad4a:	4620      	mov	r0, r4
   2ad4c:	f7ff ff7b 	bl	2ac46 <tc_hmac_update>
   2ad50:	e7d5      	b.n	2acfe <update+0x56>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2ad52:	2220      	movs	r2, #32
   2ad54:	4641      	mov	r1, r8
   2ad56:	4620      	mov	r0, r4
   2ad58:	f7ff ff2c 	bl	2abb4 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2ad5c:	4620      	mov	r0, r4
   2ad5e:	f7ff ff63 	bl	2ac28 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2ad62:	2220      	movs	r2, #32
   2ad64:	4631      	mov	r1, r6
   2ad66:	4620      	mov	r0, r4
   2ad68:	f7ff ff6d 	bl	2ac46 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2ad6c:	2201      	movs	r2, #1
   2ad6e:	f10d 0106 	add.w	r1, sp, #6
   2ad72:	4620      	mov	r0, r4
   2ad74:	f7ff ff67 	bl	2ac46 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2ad78:	464a      	mov	r2, r9
   2ad7a:	4629      	mov	r1, r5
   2ad7c:	4620      	mov	r0, r4
   2ad7e:	f7ff ff62 	bl	2ac46 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2ad82:	b10f      	cbz	r7, 2ad88 <update+0xe0>
   2ad84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ad86:	b9bb      	cbnz	r3, 2adb8 <update+0x110>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2ad88:	4622      	mov	r2, r4
   2ad8a:	2120      	movs	r1, #32
   2ad8c:	4640      	mov	r0, r8
   2ad8e:	f7ff ff62 	bl	2ac56 <tc_hmac_final>
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2ad92:	2220      	movs	r2, #32
   2ad94:	4641      	mov	r1, r8
   2ad96:	4620      	mov	r0, r4
   2ad98:	f7ff ff0c 	bl	2abb4 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2ad9c:	4620      	mov	r0, r4
   2ad9e:	f7ff ff43 	bl	2ac28 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2ada2:	2220      	movs	r2, #32
   2ada4:	4631      	mov	r1, r6
   2ada6:	4620      	mov	r0, r4
   2ada8:	f7ff ff4d 	bl	2ac46 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2adac:	4622      	mov	r2, r4
   2adae:	2120      	movs	r1, #32
   2adb0:	4630      	mov	r0, r6
   2adb2:	f7ff ff50 	bl	2ac56 <tc_hmac_final>
   2adb6:	e7bd      	b.n	2ad34 <update+0x8c>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2adb8:	461a      	mov	r2, r3
   2adba:	4639      	mov	r1, r7
   2adbc:	4620      	mov	r0, r4
   2adbe:	f7ff ff42 	bl	2ac46 <tc_hmac_update>
   2adc2:	e7e1      	b.n	2ad88 <update+0xe0>

0002adc4 <tc_hmac_prng_init>:
		      const uint8_t *personalization,
		      unsigned int plen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2adc4:	b1e8      	cbz	r0, 2ae02 <tc_hmac_prng_init+0x3e>
{
   2adc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2adc8:	b083      	sub	sp, #12
   2adca:	460c      	mov	r4, r1
   2adcc:	4615      	mov	r5, r2
   2adce:	4606      	mov	r6, r0
	    personalization == (uint8_t *) 0 ||
   2add0:	b1c9      	cbz	r1, 2ae06 <tc_hmac_prng_init+0x42>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
   2add2:	2220      	movs	r2, #32
   2add4:	2100      	movs	r1, #0
   2add6:	30f0      	adds	r0, #240	; 0xf0
   2add8:	f7ff fc2d 	bl	2a636 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2addc:	2220      	movs	r2, #32
   2adde:	2101      	movs	r1, #1
   2ade0:	f506 7088 	add.w	r0, r6, #272	; 0x110
   2ade4:	f7ff fc27 	bl	2a636 <_set>

	update(prng, personalization, plen, 0, 0);
   2ade8:	2700      	movs	r7, #0
   2adea:	9700      	str	r7, [sp, #0]
   2adec:	463b      	mov	r3, r7
   2adee:	462a      	mov	r2, r5
   2adf0:	4621      	mov	r1, r4
   2adf2:	4630      	mov	r0, r6
   2adf4:	f7ff ff58 	bl	2aca8 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
   2adf8:	f8c6 7130 	str.w	r7, [r6, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
   2adfc:	2001      	movs	r0, #1
}
   2adfe:	b003      	add	sp, #12
   2ae00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2ae02:	2000      	movs	r0, #0
}
   2ae04:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2ae06:	2000      	movs	r0, #0
   2ae08:	e7f9      	b.n	2adfe <tc_hmac_prng_init+0x3a>

0002ae0a <tc_hmac_prng_reseed>:
			const uint8_t *additional_input,
			unsigned int additionallen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2ae0a:	b1d0      	cbz	r0, 2ae42 <tc_hmac_prng_reseed+0x38>
{
   2ae0c:	b510      	push	{r4, lr}
   2ae0e:	b082      	sub	sp, #8
   2ae10:	4604      	mov	r4, r0
	if (prng == (TCHmacPrng_t) 0 ||
   2ae12:	b1c1      	cbz	r1, 2ae46 <tc_hmac_prng_reseed+0x3c>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2ae14:	2a1f      	cmp	r2, #31
   2ae16:	d918      	bls.n	2ae4a <tc_hmac_prng_reseed+0x40>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2ae18:	b173      	cbz	r3, 2ae38 <tc_hmac_prng_reseed+0x2e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2ae1a:	9804      	ldr	r0, [sp, #16]
   2ae1c:	b908      	cbnz	r0, 2ae22 <tc_hmac_prng_reseed+0x18>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
   2ae1e:	2000      	movs	r0, #0
   2ae20:	e008      	b.n	2ae34 <tc_hmac_prng_reseed+0x2a>
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2ae22:	9000      	str	r0, [sp, #0]
   2ae24:	4620      	mov	r0, r4
   2ae26:	f7ff ff3f 	bl	2aca8 <update>
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2ae2a:	f04f 33ff 	mov.w	r3, #4294967295
   2ae2e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
   2ae32:	2001      	movs	r0, #1
}
   2ae34:	b002      	add	sp, #8
   2ae36:	bd10      	pop	{r4, pc}
		update(prng, seed, seedlen, 0, 0);
   2ae38:	2300      	movs	r3, #0
   2ae3a:	9300      	str	r3, [sp, #0]
   2ae3c:	f7ff ff34 	bl	2aca8 <update>
   2ae40:	e7f3      	b.n	2ae2a <tc_hmac_prng_reseed+0x20>
		return TC_CRYPTO_FAIL;
   2ae42:	2000      	movs	r0, #0
}
   2ae44:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2ae46:	2000      	movs	r0, #0
   2ae48:	e7f4      	b.n	2ae34 <tc_hmac_prng_reseed+0x2a>
   2ae4a:	2000      	movs	r0, #0
   2ae4c:	e7f2      	b.n	2ae34 <tc_hmac_prng_reseed+0x2a>

0002ae4e <tc_hmac_prng_generate>:
int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2ae4e:	2800      	cmp	r0, #0
   2ae50:	d045      	beq.n	2aede <tc_hmac_prng_generate+0x90>
{
   2ae52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae56:	b082      	sub	sp, #8
   2ae58:	460f      	mov	r7, r1
   2ae5a:	4614      	mov	r4, r2
   2ae5c:	4680      	mov	r8, r0
	if (out == (uint8_t *) 0 ||
   2ae5e:	2a00      	cmp	r2, #0
   2ae60:	d03f      	beq.n	2aee2 <tc_hmac_prng_generate+0x94>
	    prng == (TCHmacPrng_t) 0 ||
   2ae62:	2900      	cmp	r1, #0
   2ae64:	d03f      	beq.n	2aee6 <tc_hmac_prng_generate+0x98>
	    outlen == 0 ||
   2ae66:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
   2ae6a:	d840      	bhi.n	2aeee <tc_hmac_prng_generate+0xa0>
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2ae6c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2ae70:	2b00      	cmp	r3, #0
   2ae72:	d03e      	beq.n	2aef2 <tc_hmac_prng_generate+0xa4>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2ae74:	3b01      	subs	r3, #1
   2ae76:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
   2ae7a:	e025      	b.n	2aec8 <tc_hmac_prng_generate+0x7a>
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2ae7c:	2220      	movs	r2, #32
   2ae7e:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   2ae82:	4620      	mov	r0, r4
   2ae84:	f7ff fe96 	bl	2abb4 <tc_hmac_set_key>

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
   2ae88:	4620      	mov	r0, r4
   2ae8a:	f7ff fecd 	bl	2ac28 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2ae8e:	f504 7588 	add.w	r5, r4, #272	; 0x110
   2ae92:	2220      	movs	r2, #32
   2ae94:	4629      	mov	r1, r5
   2ae96:	4620      	mov	r0, r4
   2ae98:	f7ff fed5 	bl	2ac46 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2ae9c:	4622      	mov	r2, r4
   2ae9e:	2120      	movs	r1, #32
   2aea0:	4628      	mov	r0, r5
   2aea2:	f7ff fed8 	bl	2ac56 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2aea6:	463e      	mov	r6, r7
   2aea8:	2f20      	cmp	r7, #32
   2aeaa:	bf28      	it	cs
   2aeac:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2aeae:	4633      	mov	r3, r6
   2aeb0:	462a      	mov	r2, r5
   2aeb2:	4631      	mov	r1, r6
   2aeb4:	4640      	mov	r0, r8
   2aeb6:	f7ff fbb1 	bl	2a61c <_copy>

		out += bufferlen;
   2aeba:	44b0      	add	r8, r6
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2aebc:	4639      	mov	r1, r7
   2aebe:	2f20      	cmp	r7, #32
   2aec0:	bf38      	it	cc
   2aec2:	2120      	movcc	r1, #32
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
   2aec4:	f1a1 0720 	sub.w	r7, r1, #32
	while (outlen != 0) {
   2aec8:	2f00      	cmp	r7, #0
   2aeca:	d1d7      	bne.n	2ae7c <tc_hmac_prng_generate+0x2e>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2aecc:	2100      	movs	r1, #0
   2aece:	9100      	str	r1, [sp, #0]
   2aed0:	460b      	mov	r3, r1
   2aed2:	460a      	mov	r2, r1
   2aed4:	4620      	mov	r0, r4
   2aed6:	f7ff fee7 	bl	2aca8 <update>

	return TC_CRYPTO_SUCCESS;
   2aeda:	2001      	movs	r0, #1
   2aedc:	e004      	b.n	2aee8 <tc_hmac_prng_generate+0x9a>
		return TC_CRYPTO_FAIL;
   2aede:	2000      	movs	r0, #0
}
   2aee0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2aee2:	2000      	movs	r0, #0
   2aee4:	e000      	b.n	2aee8 <tc_hmac_prng_generate+0x9a>
   2aee6:	2000      	movs	r0, #0
}
   2aee8:	b002      	add	sp, #8
   2aeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2aeee:	2000      	movs	r0, #0
   2aef0:	e7fa      	b.n	2aee8 <tc_hmac_prng_generate+0x9a>
		return TC_HMAC_PRNG_RESEED_REQ;
   2aef2:	f04f 30ff 	mov.w	r0, #4294967295
   2aef6:	e7f7      	b.n	2aee8 <tc_hmac_prng_generate+0x9a>

0002aef8 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2aef8:	b538      	push	{r3, r4, r5, lr}
   2aefa:	4604      	mov	r4, r0

	if (esf != NULL) {
   2aefc:	460d      	mov	r5, r1
   2aefe:	b111      	cbz	r1, 2af06 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   2af00:	4608      	mov	r0, r1
   2af02:	f7ea f93d 	bl	15180 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2af06:	4629      	mov	r1, r5
   2af08:	4620      	mov	r0, r4
   2af0a:	f7f9 fadb 	bl	244c4 <z_fatal_error>
}
   2af0e:	bd38      	pop	{r3, r4, r5, pc}

0002af10 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2af10:	b508      	push	{r3, lr}
   2af12:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2af14:	6800      	ldr	r0, [r0, #0]
   2af16:	f7ff ffef 	bl	2aef8 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   2af1a:	bd08      	pop	{r3, pc}

0002af1c <arch_irq_enable>:
{
   2af1c:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   2af1e:	b240      	sxtb	r0, r0
   2af20:	f7ea fa54 	bl	153cc <__NVIC_EnableIRQ>
}
   2af24:	bd08      	pop	{r3, pc}

0002af26 <arch_irq_disable>:
{
   2af26:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   2af28:	b240      	sxtb	r0, r0
   2af2a:	f7ea fa5d 	bl	153e8 <__NVIC_DisableIRQ>
}
   2af2e:	bd08      	pop	{r3, pc}

0002af30 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   2af30:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2af32:	2100      	movs	r1, #0
   2af34:	2001      	movs	r0, #1
   2af36:	f7ff ffdf 	bl	2aef8 <z_arm_fatal_error>
}
   2af3a:	bd08      	pop	{r3, pc}

0002af3c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2af3c:	b508      	push	{r3, lr}
	handler();
   2af3e:	f7ea faab 	bl	15498 <z_SysNmiOnReset>
	z_arm_int_exit();
   2af42:	f7ea fb83 	bl	1564c <z_arm_exc_exit>
}
   2af46:	bd08      	pop	{r3, pc}

0002af48 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   2af48:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2af4c:	f383 880b 	msr	PSPLIM, r3
}
   2af50:	4770      	bx	lr

0002af52 <memory_fault_recoverable>:
}
   2af52:	2000      	movs	r0, #0
   2af54:	4770      	bx	lr

0002af56 <fault_handle>:
{
   2af56:	b508      	push	{r3, lr}
	*recoverable = false;
   2af58:	2300      	movs	r3, #0
   2af5a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2af5c:	1ecb      	subs	r3, r1, #3
   2af5e:	2b09      	cmp	r3, #9
   2af60:	d81a      	bhi.n	2af98 <fault_handle+0x42>
   2af62:	e8df f003 	tbb	[pc, r3]
   2af66:	0905      	.short	0x0905
   2af68:	1919110d 	.word	0x1919110d
   2af6c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   2af70:	4611      	mov	r1, r2
   2af72:	f7eb f891 	bl	16098 <hard_fault>
}
   2af76:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2af78:	2100      	movs	r1, #0
   2af7a:	f7ea fbe9 	bl	15750 <mem_manage_fault>
		break;
   2af7e:	e7fa      	b.n	2af76 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   2af80:	2100      	movs	r1, #0
   2af82:	f7ea fd7f 	bl	15a84 <bus_fault>
		break;
   2af86:	e7f6      	b.n	2af76 <fault_handle+0x20>
		reason = usage_fault(esf);
   2af88:	f7ea ff10 	bl	15dac <usage_fault>
		break;
   2af8c:	e7f3      	b.n	2af76 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   2af8e:	4611      	mov	r1, r2
   2af90:	f7eb f9ca 	bl	16328 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2af94:	2000      	movs	r0, #0
		break;
   2af96:	e7ee      	b.n	2af76 <fault_handle+0x20>
		reserved_exception(esf, fault);
   2af98:	f7eb f9f6 	bl	16388 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2af9c:	2000      	movs	r0, #0
	return reason;
   2af9e:	e7ea      	b.n	2af76 <fault_handle+0x20>

0002afa0 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2afa0:	4770      	bx	lr

0002afa2 <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   2afa2:	4770      	bx	lr

0002afa4 <sys_arch_reboot>:
{
   2afa4:	b508      	push	{r3, lr}
	NVIC_SystemReset();
   2afa6:	f7eb fb15 	bl	165d4 <__NVIC_SystemReset>

0002afaa <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2afaa:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2afae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   2afb2:	d001      	beq.n	2afb8 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   2afb4:	b2c0      	uxtb	r0, r0
   2afb6:	4770      	bx	lr
	}

	return -EINVAL;
   2afb8:	f06f 0015 	mvn.w	r0, #21
}
   2afbc:	4770      	bx	lr

0002afbe <region_init>:
{
   2afbe:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2afc0:	680b      	ldr	r3, [r1, #0]
   2afc2:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
   2afc6:	7a0b      	ldrb	r3, [r1, #8]
   2afc8:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   2afcc:	68ca      	ldr	r2, [r1, #12]
   2afce:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2afd2:	095b      	lsrs	r3, r3, #5
   2afd4:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
   2afd8:	f042 0201 	orr.w	r2, r2, #1
   2afdc:	ea4c 010e 	orr.w	r1, ip, lr
   2afe0:	f7eb fb8c 	bl	166fc <mpu_set_region>
}
   2afe4:	bd08      	pop	{r3, pc}

0002afe6 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   2afe6:	6843      	ldr	r3, [r0, #4]
		&&
   2afe8:	2b1f      	cmp	r3, #31
   2afea:	d908      	bls.n	2affe <mpu_partition_is_valid+0x18>
		&&
   2afec:	f013 0f1f 	tst.w	r3, #31
   2aff0:	d107      	bne.n	2b002 <mpu_partition_is_valid+0x1c>
		((part->start &
   2aff2:	6803      	ldr	r3, [r0, #0]
		&&
   2aff4:	f013 0f1f 	tst.w	r3, #31
   2aff8:	d005      	beq.n	2b006 <mpu_partition_is_valid+0x20>
   2affa:	2000      	movs	r0, #0
   2affc:	4770      	bx	lr
   2affe:	2000      	movs	r0, #0
   2b000:	4770      	bx	lr
   2b002:	2000      	movs	r0, #0
   2b004:	4770      	bx	lr
   2b006:	2001      	movs	r0, #1
}
   2b008:	4770      	bx	lr

0002b00a <get_region_index>:
{
   2b00a:	b570      	push	{r4, r5, r6, lr}
   2b00c:	4604      	mov	r4, r0
   2b00e:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2b010:	f7ff ffcb 	bl	2afaa <arm_cmse_mpu_region_get>
   2b014:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2b016:	4434      	add	r4, r6
   2b018:	1e60      	subs	r0, r4, #1
   2b01a:	f7ff ffc6 	bl	2afaa <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2b01e:	4285      	cmp	r5, r0
   2b020:	d101      	bne.n	2b026 <get_region_index+0x1c>
}
   2b022:	4628      	mov	r0, r5
   2b024:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   2b026:	f06f 0515 	mvn.w	r5, #21
   2b02a:	e7fa      	b.n	2b022 <get_region_index+0x18>

0002b02c <mpu_configure_region>:
{
   2b02c:	b510      	push	{r4, lr}
   2b02e:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   2b030:	680b      	ldr	r3, [r1, #0]
   2b032:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
   2b034:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   2b036:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   2b03a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2b03e:	f36c 0204 	bfi	r2, ip, #0, #5
   2b042:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   2b046:	8949      	ldrh	r1, [r1, #10]
   2b048:	b2d2      	uxtb	r2, r2
   2b04a:	f361 1247 	bfi	r2, r1, #5, #3
   2b04e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2b052:	f023 031f 	bic.w	r3, r3, #31
   2b056:	4423      	add	r3, r4
   2b058:	3b01      	subs	r3, #1
   2b05a:	f023 031f 	bic.w	r3, r3, #31
   2b05e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2b060:	4669      	mov	r1, sp
   2b062:	f7eb fba5 	bl	167b0 <region_allocate_and_init>
}
   2b066:	b004      	add	sp, #16
   2b068:	bd10      	pop	{r4, pc}

0002b06a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2b06a:	4602      	mov	r2, r0
   2b06c:	e002      	b.n	2b074 <strcpy+0xa>
		*d = *s;
   2b06e:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   2b072:	3101      	adds	r1, #1
	while (*s != '\0') {
   2b074:	780b      	ldrb	r3, [r1, #0]
   2b076:	2b00      	cmp	r3, #0
   2b078:	d1f9      	bne.n	2b06e <strcpy+0x4>
	}

	*d = '\0';
   2b07a:	7013      	strb	r3, [r2, #0]

	return dest;
}
   2b07c:	4770      	bx	lr

0002b07e <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2b07e:	4603      	mov	r3, r0
   2b080:	b1a2      	cbz	r2, 2b0ac <strncpy+0x2e>
{
   2b082:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   2b084:	780c      	ldrb	r4, [r1, #0]
   2b086:	b12c      	cbz	r4, 2b094 <strncpy+0x16>
		*d = *s;
   2b088:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   2b08c:	3101      	adds	r1, #1
		d++;
		n--;
   2b08e:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   2b090:	2a00      	cmp	r2, #0
   2b092:	d1f7      	bne.n	2b084 <strncpy+0x6>
	}

	while (n > 0) {
   2b094:	b122      	cbz	r2, 2b0a0 <strncpy+0x22>
		*d = '\0';
   2b096:	2100      	movs	r1, #0
   2b098:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   2b09c:	3a01      	subs	r2, #1
   2b09e:	e7f9      	b.n	2b094 <strncpy+0x16>
	}

	return dest;
}
   2b0a0:	bc10      	pop	{r4}
   2b0a2:	4770      	bx	lr
		*d = '\0';
   2b0a4:	2100      	movs	r1, #0
   2b0a6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2b0aa:	3a01      	subs	r2, #1
	while (n > 0) {
   2b0ac:	2a00      	cmp	r2, #0
   2b0ae:	d1f9      	bne.n	2b0a4 <strncpy+0x26>
   2b0b0:	4770      	bx	lr

0002b0b2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2b0b2:	4603      	mov	r3, r0
	size_t n = 0;
   2b0b4:	2000      	movs	r0, #0

	while (*s != '\0') {
   2b0b6:	e001      	b.n	2b0bc <strlen+0xa>
		s++;
   2b0b8:	3301      	adds	r3, #1
		n++;
   2b0ba:	3001      	adds	r0, #1
	while (*s != '\0') {
   2b0bc:	781a      	ldrb	r2, [r3, #0]
   2b0be:	2a00      	cmp	r2, #0
   2b0c0:	d1fa      	bne.n	2b0b8 <strlen+0x6>
	}

	return n;
}
   2b0c2:	4770      	bx	lr

0002b0c4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2b0c4:	4603      	mov	r3, r0
	size_t n = 0;
   2b0c6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2b0c8:	e001      	b.n	2b0ce <strnlen+0xa>
		s++;
   2b0ca:	3301      	adds	r3, #1
		n++;
   2b0cc:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   2b0ce:	781a      	ldrb	r2, [r3, #0]
   2b0d0:	b10a      	cbz	r2, 2b0d6 <strnlen+0x12>
   2b0d2:	4288      	cmp	r0, r1
   2b0d4:	d3f9      	bcc.n	2b0ca <strnlen+0x6>
	}

	return n;
}
   2b0d6:	4770      	bx	lr

0002b0d8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2b0d8:	e001      	b.n	2b0de <strcmp+0x6>
		s1++;
   2b0da:	3001      	adds	r0, #1
		s2++;
   2b0dc:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2b0de:	7803      	ldrb	r3, [r0, #0]
   2b0e0:	780a      	ldrb	r2, [r1, #0]
   2b0e2:	4293      	cmp	r3, r2
   2b0e4:	d101      	bne.n	2b0ea <strcmp+0x12>
   2b0e6:	2b00      	cmp	r3, #0
   2b0e8:	d1f7      	bne.n	2b0da <strcmp+0x2>
	}

	return *s1 - *s2;
}
   2b0ea:	1a98      	subs	r0, r3, r2
   2b0ec:	4770      	bx	lr

0002b0ee <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2b0ee:	e002      	b.n	2b0f6 <strncmp+0x8>
		s1++;
   2b0f0:	3001      	adds	r0, #1
		s2++;
   2b0f2:	3101      	adds	r1, #1
		n--;
   2b0f4:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2b0f6:	b132      	cbz	r2, 2b106 <strncmp+0x18>
   2b0f8:	7803      	ldrb	r3, [r0, #0]
   2b0fa:	f891 c000 	ldrb.w	ip, [r1]
   2b0fe:	4563      	cmp	r3, ip
   2b100:	d101      	bne.n	2b106 <strncmp+0x18>
   2b102:	2b00      	cmp	r3, #0
   2b104:	d1f4      	bne.n	2b0f0 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2b106:	b11a      	cbz	r2, 2b110 <strncmp+0x22>
   2b108:	7800      	ldrb	r0, [r0, #0]
   2b10a:	780b      	ldrb	r3, [r1, #0]
   2b10c:	1ac0      	subs	r0, r0, r3
   2b10e:	4770      	bx	lr
   2b110:	2000      	movs	r0, #0
}
   2b112:	4770      	bx	lr

0002b114 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2b114:	4613      	mov	r3, r2
   2b116:	b16a      	cbz	r2, 2b134 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2b118:	3b01      	subs	r3, #1
   2b11a:	d007      	beq.n	2b12c <memcmp+0x18>
   2b11c:	f890 c000 	ldrb.w	ip, [r0]
   2b120:	780a      	ldrb	r2, [r1, #0]
   2b122:	4594      	cmp	ip, r2
   2b124:	d102      	bne.n	2b12c <memcmp+0x18>
		c1++;
   2b126:	3001      	adds	r0, #1
		c2++;
   2b128:	3101      	adds	r1, #1
   2b12a:	e7f5      	b.n	2b118 <memcmp+0x4>
	}

	return *c1 - *c2;
   2b12c:	7800      	ldrb	r0, [r0, #0]
   2b12e:	780b      	ldrb	r3, [r1, #0]
   2b130:	1ac0      	subs	r0, r0, r3
   2b132:	4770      	bx	lr
		return 0;
   2b134:	2000      	movs	r0, #0
}
   2b136:	4770      	bx	lr

0002b138 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   2b138:	ea80 0301 	eor.w	r3, r0, r1
   2b13c:	f013 0f03 	tst.w	r3, #3
   2b140:	d001      	beq.n	2b146 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   2b142:	4603      	mov	r3, r0
   2b144:	e023      	b.n	2b18e <memcpy+0x56>
   2b146:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   2b148:	f013 0f03 	tst.w	r3, #3
   2b14c:	d00f      	beq.n	2b16e <memcpy+0x36>
			if (n == 0) {
   2b14e:	b30a      	cbz	r2, 2b194 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   2b150:	f811 cb01 	ldrb.w	ip, [r1], #1
   2b154:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   2b158:	3a01      	subs	r2, #1
   2b15a:	e7f5      	b.n	2b148 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   2b15c:	f811 cb01 	ldrb.w	ip, [r1], #1
   2b160:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2b164:	3a01      	subs	r2, #1
	while (n > 0) {
   2b166:	2a00      	cmp	r2, #0
   2b168:	d1f8      	bne.n	2b15c <memcpy+0x24>
	}

	return d;
}
   2b16a:	bc10      	pop	{r4}
   2b16c:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   2b16e:	2a03      	cmp	r2, #3
   2b170:	d90d      	bls.n	2b18e <memcpy+0x56>
{
   2b172:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   2b174:	f851 4b04 	ldr.w	r4, [r1], #4
   2b178:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   2b17c:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   2b17e:	2a03      	cmp	r2, #3
   2b180:	d8f8      	bhi.n	2b174 <memcpy+0x3c>
   2b182:	e7f0      	b.n	2b166 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   2b184:	f811 cb01 	ldrb.w	ip, [r1], #1
   2b188:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2b18c:	3a01      	subs	r2, #1
	while (n > 0) {
   2b18e:	2a00      	cmp	r2, #0
   2b190:	d1f8      	bne.n	2b184 <memcpy+0x4c>
   2b192:	4770      	bx	lr
}
   2b194:	4770      	bx	lr

0002b196 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2b196:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   2b19a:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2b19c:	e002      	b.n	2b1a4 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   2b19e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2b1a2:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2b1a4:	f013 0f03 	tst.w	r3, #3
   2b1a8:	d002      	beq.n	2b1b0 <memset+0x1a>
		if (n == 0) {
   2b1aa:	2a00      	cmp	r2, #0
   2b1ac:	d1f7      	bne.n	2b19e <memset+0x8>
   2b1ae:	e00f      	b.n	2b1d0 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   2b1b0:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   2b1b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   2b1b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2b1ba:	2a03      	cmp	r2, #3
   2b1bc:	d906      	bls.n	2b1cc <memset+0x36>
		*(d_word++) = c_word;
   2b1be:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   2b1c2:	3a04      	subs	r2, #4
   2b1c4:	e7f9      	b.n	2b1ba <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   2b1c6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   2b1ca:	3a01      	subs	r2, #1
	while (n > 0) {
   2b1cc:	2a00      	cmp	r2, #0
   2b1ce:	d1fa      	bne.n	2b1c6 <memset+0x30>
	}

	return buf;
}
   2b1d0:	4770      	bx	lr

0002b1d2 <_stdout_hook_default>:
}
   2b1d2:	f04f 30ff 	mov.w	r0, #4294967295
   2b1d6:	4770      	bx	lr

0002b1d8 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2b1d8:	b510      	push	{r4, lr}
   2b1da:	b08a      	sub	sp, #40	; 0x28
   2b1dc:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   2b1de:	a905      	add	r1, sp, #20
   2b1e0:	f7eb fde8 	bl	16db4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2b1e4:	4669      	mov	r1, sp
   2b1e6:	4620      	mov	r0, r4
   2b1e8:	f7eb fde4 	bl	16db4 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   2b1ec:	2210      	movs	r2, #16
   2b1ee:	f10d 0101 	add.w	r1, sp, #1
   2b1f2:	f10d 0015 	add.w	r0, sp, #21
   2b1f6:	f7ff ff8d 	bl	2b114 <memcmp>
}
   2b1fa:	b00a      	add	sp, #40	; 0x28
   2b1fc:	bd10      	pop	{r4, pc}

0002b1fe <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2b1fe:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2b200:	7803      	ldrb	r3, [r0, #0]
   2b202:	780a      	ldrb	r2, [r1, #0]
   2b204:	4293      	cmp	r3, r2
   2b206:	d107      	bne.n	2b218 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   2b208:	2b01      	cmp	r3, #1
   2b20a:	d00c      	beq.n	2b226 <bt_uuid_cmp+0x28>
   2b20c:	2b02      	cmp	r3, #2
   2b20e:	d00e      	beq.n	2b22e <bt_uuid_cmp+0x30>
   2b210:	b12b      	cbz	r3, 2b21e <bt_uuid_cmp+0x20>
   2b212:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2b216:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2b218:	f7ff ffde 	bl	2b1d8 <uuid128_cmp>
   2b21c:	e7fb      	b.n	2b216 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2b21e:	8840      	ldrh	r0, [r0, #2]
   2b220:	884b      	ldrh	r3, [r1, #2]
   2b222:	1ac0      	subs	r0, r0, r3
   2b224:	e7f7      	b.n	2b216 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2b226:	6840      	ldr	r0, [r0, #4]
   2b228:	684b      	ldr	r3, [r1, #4]
   2b22a:	1ac0      	subs	r0, r0, r3
   2b22c:	e7f3      	b.n	2b216 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2b22e:	2210      	movs	r2, #16
   2b230:	3101      	adds	r1, #1
   2b232:	3001      	adds	r0, #1
   2b234:	f7ff ff6e 	bl	2b114 <memcmp>
   2b238:	e7ed      	b.n	2b216 <bt_uuid_cmp+0x18>

0002b23a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2b23a:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2b23c:	2a04      	cmp	r2, #4
   2b23e:	d00e      	beq.n	2b25e <bt_uuid_create+0x24>
   2b240:	2a10      	cmp	r2, #16
   2b242:	d01d      	beq.n	2b280 <bt_uuid_create+0x46>
   2b244:	2a02      	cmp	r2, #2
   2b246:	d001      	beq.n	2b24c <bt_uuid_create+0x12>
   2b248:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2b24a:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   2b24c:	2300      	movs	r3, #0
   2b24e:	7003      	strb	r3, [r0, #0]
   2b250:	784a      	ldrb	r2, [r1, #1]
   2b252:	780b      	ldrb	r3, [r1, #0]
   2b254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2b258:	8043      	strh	r3, [r0, #2]
	return true;
   2b25a:	2001      	movs	r0, #1
		break;
   2b25c:	e7f5      	b.n	2b24a <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   2b25e:	2301      	movs	r3, #1
   2b260:	7003      	strb	r3, [r0, #0]
   2b262:	78ca      	ldrb	r2, [r1, #3]
   2b264:	f891 c002 	ldrb.w	ip, [r1, #2]
   2b268:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2b26c:	f891 e001 	ldrb.w	lr, [r1, #1]
   2b270:	780a      	ldrb	r2, [r1, #0]
   2b272:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2b276:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2b27a:	6042      	str	r2, [r0, #4]
	return true;
   2b27c:	4618      	mov	r0, r3
		break;
   2b27e:	e7e4      	b.n	2b24a <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   2b280:	2302      	movs	r3, #2
   2b282:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2b286:	2210      	movs	r2, #16
   2b288:	f7ff ff56 	bl	2b138 <memcpy>
	return true;
   2b28c:	2001      	movs	r0, #1
		break;
   2b28e:	e7dc      	b.n	2b24a <bt_uuid_create+0x10>

0002b290 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2b290:	b510      	push	{r4, lr}
   2b292:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2b294:	2301      	movs	r3, #1
   2b296:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2b29a:	2106      	movs	r1, #6
   2b29c:	f7ef fa8c 	bl	1a7b8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2b2a0:	b918      	cbnz	r0, 2b2aa <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2b2a2:	79a3      	ldrb	r3, [r4, #6]
   2b2a4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2b2a8:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2b2aa:	bd10      	pop	{r4, pc}

0002b2ac <sys_put_le64>:
	dst[0] = val;
   2b2ac:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2b2ae:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2b2b2:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   2b2b4:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   2b2b6:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   2b2b8:	0e00      	lsrs	r0, r0, #24
   2b2ba:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2b2bc:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   2b2be:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2b2c2:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   2b2c4:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   2b2c6:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2b2c8:	0e09      	lsrs	r1, r1, #24
   2b2ca:	71d1      	strb	r1, [r2, #7]
}
   2b2cc:	4770      	bx	lr

0002b2ce <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
   2b2ce:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2b2d0:	79c3      	ldrb	r3, [r0, #7]
   2b2d2:	7981      	ldrb	r1, [r0, #6]
   2b2d4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2b2d8:	7942      	ldrb	r2, [r0, #5]
   2b2da:	7903      	ldrb	r3, [r0, #4]
   2b2dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b2e0:	78c2      	ldrb	r2, [r0, #3]
   2b2e2:	f890 c002 	ldrb.w	ip, [r0, #2]
   2b2e6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2b2ea:	f890 e001 	ldrb.w	lr, [r0, #1]
   2b2ee:	7802      	ldrb	r2, [r0, #0]
   2b2f0:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
   2b2f4:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   2b2f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   2b2fc:	f85d fb04 	ldr.w	pc, [sp], #4

0002b300 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2b300:	3805      	subs	r0, #5
   2b302:	2815      	cmp	r0, #21
   2b304:	d80e      	bhi.n	2b324 <bt_hci_evt_get_flags+0x24>
   2b306:	e8df f000 	tbb	[pc, r0]
   2b30a:	0d0b      	.short	0x0d0b
   2b30c:	0d0d0d0d 	.word	0x0d0d0d0d
   2b310:	0f0d0d0d 	.word	0x0f0d0d0d
   2b314:	0d0d0d0f 	.word	0x0d0d0d0f
   2b318:	0d0d0d0f 	.word	0x0d0d0d0f
   2b31c:	0f0d0d0d 	.word	0x0f0d0d0d
   2b320:	2003      	movs	r0, #3
   2b322:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2b324:	2002      	movs	r0, #2
   2b326:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   2b328:	2001      	movs	r0, #1
	}
}
   2b32a:	4770      	bx	lr

0002b32c <skip_auto_phy_update_on_conn_establishment>:
}
   2b32c:	2000      	movs	r0, #0
   2b32e:	4770      	bx	lr

0002b330 <hci_vendor_event>:
}
   2b330:	4770      	bx	lr

0002b332 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b332:	094b      	lsrs	r3, r1, #5
   2b334:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b338:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b33c:	f001 011f 	and.w	r1, r1, #31
   2b340:	4108      	asrs	r0, r1
}
   2b342:	f000 0001 	and.w	r0, r0, #1
   2b346:	4770      	bx	lr

0002b348 <net_buf_destroy>:
{
   2b348:	b510      	push	{r4, lr}
   2b34a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2b34c:	7980      	ldrb	r0, [r0, #6]
   2b34e:	f7f3 fdef 	bl	1ef30 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2b352:	4621      	mov	r1, r4
   2b354:	f003 fdf1 	bl	2ef3a <k_queue_prepend>
}
   2b358:	bd10      	pop	{r4, pc}

0002b35a <hci_disconn_complete_prio>:
{
   2b35a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2b35c:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b35e:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2b362:	781b      	ldrb	r3, [r3, #0]
   2b364:	b103      	cbz	r3, 2b368 <hci_disconn_complete_prio+0xe>
}
   2b366:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   2b368:	4620      	mov	r0, r4
   2b36a:	f7ef ff1b 	bl	1b1a4 <bt_conn_lookup_handle>
	if (!conn) {
   2b36e:	4605      	mov	r5, r0
   2b370:	b130      	cbz	r0, 2b380 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2b372:	2101      	movs	r1, #1
   2b374:	f7ef ff20 	bl	1b1b8 <bt_conn_set_state>
	bt_conn_unref(conn);
   2b378:	4628      	mov	r0, r5
   2b37a:	f7ef fee1 	bl	1b140 <bt_conn_unref>
   2b37e:	e7f2      	b.n	2b366 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2b380:	4620      	mov	r0, r4
   2b382:	f7eb fddb 	bl	16f3c <conn_handle_disconnected>
		return;
   2b386:	e7ee      	b.n	2b366 <hci_disconn_complete_prio+0xc>

0002b388 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b388:	f001 0c1f 	and.w	ip, r1, #31
   2b38c:	2301      	movs	r3, #1
   2b38e:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   2b392:	b152      	cbz	r2, 2b3aa <atomic_set_bit_to+0x22>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b394:	0949      	lsrs	r1, r1, #5
   2b396:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b39a:	e8d0 2fef 	ldaex	r2, [r0]
   2b39e:	431a      	orrs	r2, r3
   2b3a0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2b3a4:	2900      	cmp	r1, #0
   2b3a6:	d1f8      	bne.n	2b39a <atomic_set_bit_to+0x12>
   2b3a8:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b3aa:	0949      	lsrs	r1, r1, #5
   2b3ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b3b0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b3b2:	e8d0 2fef 	ldaex	r2, [r0]
   2b3b6:	401a      	ands	r2, r3
   2b3b8:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2b3bc:	2900      	cmp	r1, #0
   2b3be:	d1f8      	bne.n	2b3b2 <atomic_set_bit_to+0x2a>
	}
}
   2b3c0:	4770      	bx	lr

0002b3c2 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b3c2:	f001 021f 	and.w	r2, r1, #31
   2b3c6:	2301      	movs	r3, #1
   2b3c8:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b3ca:	0949      	lsrs	r1, r1, #5
   2b3cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b3d0:	e8d0 2fef 	ldaex	r2, [r0]
   2b3d4:	ea42 0103 	orr.w	r1, r2, r3
   2b3d8:	e8c0 1fec 	stlex	ip, r1, [r0]
   2b3dc:	f1bc 0f00 	cmp.w	ip, #0
   2b3e0:	d1f6      	bne.n	2b3d0 <atomic_test_and_set_bit+0xe>
	return (old & mask) != 0;
   2b3e2:	4213      	tst	r3, r2
}
   2b3e4:	bf14      	ite	ne
   2b3e6:	2001      	movne	r0, #1
   2b3e8:	2000      	moveq	r0, #0
   2b3ea:	4770      	bx	lr

0002b3ec <hci_le_read_remote_features>:
{
   2b3ec:	b538      	push	{r3, r4, r5, lr}
   2b3ee:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2b3f0:	2102      	movs	r1, #2
   2b3f2:	f242 0016 	movw	r0, #8214	; 0x2016
   2b3f6:	f7ec fe31 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2b3fa:	b168      	cbz	r0, 2b418 <hci_le_read_remote_features+0x2c>
   2b3fc:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2b3fe:	2102      	movs	r1, #2
   2b400:	3008      	adds	r0, #8
   2b402:	f7f4 f97d 	bl	1f700 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b406:	8823      	ldrh	r3, [r4, #0]
   2b408:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   2b40a:	2200      	movs	r2, #0
   2b40c:	4629      	mov	r1, r5
   2b40e:	f242 0016 	movw	r0, #8214	; 0x2016
   2b412:	f7ec fe75 	bl	18100 <bt_hci_cmd_send_sync>
}
   2b416:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2b418:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b41c:	e7fb      	b.n	2b416 <hci_le_read_remote_features+0x2a>

0002b41e <bt_hci_disconnect>:
{
   2b41e:	b570      	push	{r4, r5, r6, lr}
   2b420:	4605      	mov	r5, r0
   2b422:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2b424:	2103      	movs	r1, #3
   2b426:	f240 4006 	movw	r0, #1030	; 0x406
   2b42a:	f7ec fe17 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2b42e:	b168      	cbz	r0, 2b44c <bt_hci_disconnect+0x2e>
   2b430:	4606      	mov	r6, r0
   2b432:	2103      	movs	r1, #3
   2b434:	3008      	adds	r0, #8
   2b436:	f7f4 f963 	bl	1f700 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2b43a:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2b43c:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2b43e:	2200      	movs	r2, #0
   2b440:	4631      	mov	r1, r6
   2b442:	f240 4006 	movw	r0, #1030	; 0x406
   2b446:	f7ec fe5b 	bl	18100 <bt_hci_cmd_send_sync>
}
   2b44a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2b44c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b450:	e7fb      	b.n	2b44a <bt_hci_disconnect+0x2c>

0002b452 <bt_le_set_data_len>:
{
   2b452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b454:	4606      	mov	r6, r0
   2b456:	460f      	mov	r7, r1
   2b458:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2b45a:	2106      	movs	r1, #6
   2b45c:	f242 0022 	movw	r0, #8226	; 0x2022
   2b460:	f7ec fdfc 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2b464:	b178      	cbz	r0, 2b486 <bt_le_set_data_len+0x34>
   2b466:	4605      	mov	r5, r0
   2b468:	2106      	movs	r1, #6
   2b46a:	3008      	adds	r0, #8
   2b46c:	f7f4 f948 	bl	1f700 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b470:	8833      	ldrh	r3, [r6, #0]
   2b472:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2b474:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2b476:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2b478:	2200      	movs	r2, #0
   2b47a:	4629      	mov	r1, r5
   2b47c:	f242 0022 	movw	r0, #8226	; 0x2022
   2b480:	f7ec fe3e 	bl	18100 <bt_hci_cmd_send_sync>
}
   2b484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2b486:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b48a:	e7fb      	b.n	2b484 <bt_le_set_data_len+0x32>

0002b48c <bt_le_set_phy>:
{
   2b48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b490:	4607      	mov	r7, r0
   2b492:	460e      	mov	r6, r1
   2b494:	4615      	mov	r5, r2
   2b496:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2b498:	2107      	movs	r1, #7
   2b49a:	f242 0032 	movw	r0, #8242	; 0x2032
   2b49e:	f7ec fddd 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2b4a2:	b1a8      	cbz	r0, 2b4d0 <bt_le_set_phy+0x44>
   2b4a4:	4680      	mov	r8, r0
   2b4a6:	2107      	movs	r1, #7
   2b4a8:	3008      	adds	r0, #8
   2b4aa:	f7f4 f929 	bl	1f700 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b4ae:	883b      	ldrh	r3, [r7, #0]
   2b4b0:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2b4b2:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2b4b4:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2b4b6:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2b4b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2b4bc:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2b4c0:	2200      	movs	r2, #0
   2b4c2:	4641      	mov	r1, r8
   2b4c4:	f242 0032 	movw	r0, #8242	; 0x2032
   2b4c8:	f7ec fe1a 	bl	18100 <bt_hci_cmd_send_sync>
}
   2b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2b4d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b4d4:	e7fa      	b.n	2b4cc <bt_le_set_phy+0x40>

0002b4d6 <enh_conn_complete>:
{
   2b4d6:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   2b4d8:	f7ed fb3e 	bl	18b58 <bt_hci_le_enh_conn_complete>
}
   2b4dc:	bd08      	pop	{r3, pc}

0002b4de <le_enh_conn_complete>:
{
   2b4de:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2b4e0:	6880      	ldr	r0, [r0, #8]
   2b4e2:	f7ff fff8 	bl	2b4d6 <enh_conn_complete>
}
   2b4e6:	bd08      	pop	{r3, pc}

0002b4e8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2b4e8:	8802      	ldrh	r2, [r0, #0]
   2b4ea:	8843      	ldrh	r3, [r0, #2]
   2b4ec:	429a      	cmp	r2, r3
   2b4ee:	d817      	bhi.n	2b520 <bt_le_conn_params_valid+0x38>
   2b4f0:	2a05      	cmp	r2, #5
   2b4f2:	d917      	bls.n	2b524 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2b4f4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2b4f8:	d816      	bhi.n	2b528 <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   2b4fa:	8881      	ldrh	r1, [r0, #4]
   2b4fc:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2b500:	d214      	bcs.n	2b52c <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2b502:	88c0      	ldrh	r0, [r0, #6]
   2b504:	f1a0 020a 	sub.w	r2, r0, #10
   2b508:	b292      	uxth	r2, r2
   2b50a:	f640 4c76 	movw	ip, #3190	; 0xc76
   2b50e:	4562      	cmp	r2, ip
   2b510:	d80e      	bhi.n	2b530 <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   2b512:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2b516:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2b51a:	d20b      	bcs.n	2b534 <bt_le_conn_params_valid+0x4c>
	return true;
   2b51c:	2001      	movs	r0, #1
   2b51e:	4770      	bx	lr
		return false;
   2b520:	2000      	movs	r0, #0
   2b522:	4770      	bx	lr
   2b524:	2000      	movs	r0, #0
   2b526:	4770      	bx	lr
   2b528:	2000      	movs	r0, #0
   2b52a:	4770      	bx	lr
		return false;
   2b52c:	2000      	movs	r0, #0
   2b52e:	4770      	bx	lr
		return false;
   2b530:	2000      	movs	r0, #0
   2b532:	4770      	bx	lr
   2b534:	2000      	movs	r0, #0
}
   2b536:	4770      	bx	lr

0002b538 <le_conn_param_req_reply>:
{
   2b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b53a:	4606      	mov	r6, r0
   2b53c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2b53e:	210e      	movs	r1, #14
   2b540:	f242 0020 	movw	r0, #8224	; 0x2020
   2b544:	f7ec fd8a 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2b548:	b1c0      	cbz	r0, 2b57c <le_conn_param_req_reply+0x44>
   2b54a:	4607      	mov	r7, r0
   2b54c:	210e      	movs	r1, #14
   2b54e:	3008      	adds	r0, #8
   2b550:	f7f4 f8d6 	bl	1f700 <net_buf_simple_add>
   2b554:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2b556:	220e      	movs	r2, #14
   2b558:	2100      	movs	r1, #0
   2b55a:	f7ff fe1c 	bl	2b196 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   2b55e:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2b560:	882b      	ldrh	r3, [r5, #0]
   2b562:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2b564:	886b      	ldrh	r3, [r5, #2]
   2b566:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2b568:	88ab      	ldrh	r3, [r5, #4]
   2b56a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2b56c:	88eb      	ldrh	r3, [r5, #6]
   2b56e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2b570:	4639      	mov	r1, r7
   2b572:	f242 0020 	movw	r0, #8224	; 0x2020
   2b576:	f7ed fc7b 	bl	18e70 <bt_hci_cmd_send>
}
   2b57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2b57c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b580:	e7fb      	b.n	2b57a <le_conn_param_req_reply+0x42>

0002b582 <bt_init>:
{
   2b582:	b510      	push	{r4, lr}
	err = hci_init();
   2b584:	f7ed f954 	bl	18830 <hci_init>
	if (err) {
   2b588:	4604      	mov	r4, r0
   2b58a:	b108      	cbz	r0, 2b590 <bt_init+0xe>
}
   2b58c:	4620      	mov	r0, r4
   2b58e:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   2b590:	f7f0 fada 	bl	1bb48 <bt_conn_init>
		if (err) {
   2b594:	4604      	mov	r4, r0
   2b596:	2800      	cmp	r0, #0
   2b598:	d1f8      	bne.n	2b58c <bt_init+0xa>
	bt_finalize_init();
   2b59a:	f7ee f883 	bl	196a4 <bt_finalize_init>
	return 0;
   2b59e:	e7f5      	b.n	2b58c <bt_init+0xa>

0002b5a0 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2b5a0:	2000      	movs	r0, #0
   2b5a2:	4770      	bx	lr

0002b5a4 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2b5a4:	2000      	movs	r0, #0
   2b5a6:	4770      	bx	lr

0002b5a8 <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2b5a8:	b910      	cbnz	r0, 2b5b0 <bt_lookup_id_addr+0x8>
   2b5aa:	b119      	cbz	r1, 2b5b4 <bt_lookup_id_addr+0xc>
	return addr;
   2b5ac:	4608      	mov	r0, r1
   2b5ae:	4770      	bx	lr
		return NULL;
   2b5b0:	2000      	movs	r0, #0
   2b5b2:	4770      	bx	lr
   2b5b4:	2000      	movs	r0, #0
}
   2b5b6:	4770      	bx	lr

0002b5b8 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2b5b8:	b128      	cbz	r0, 2b5c6 <bt_id_set_adv_random_addr+0xe>
   2b5ba:	b139      	cbz	r1, 2b5cc <bt_id_set_adv_random_addr+0x14>
{
   2b5bc:	b508      	push	{r3, lr}
		return set_random_address(addr);
   2b5be:	4608      	mov	r0, r1
   2b5c0:	f7ee f99c 	bl	198fc <set_random_address>
}
   2b5c4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2b5c6:	f06f 0015 	mvn.w	r0, #21
   2b5ca:	4770      	bx	lr
   2b5cc:	f06f 0015 	mvn.w	r0, #21
}
   2b5d0:	4770      	bx	lr

0002b5d2 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   2b5d2:	b1a0      	cbz	r0, 2b5fe <bt_id_set_adv_private_addr+0x2c>
{
   2b5d4:	b510      	push	{r4, lr}
   2b5d6:	b082      	sub	sp, #8
   2b5d8:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2b5da:	2106      	movs	r1, #6
   2b5dc:	4668      	mov	r0, sp
   2b5de:	f7ef f8eb 	bl	1a7b8 <bt_rand>
	if (err) {
   2b5e2:	b108      	cbz	r0, 2b5e8 <bt_id_set_adv_private_addr+0x16>
}
   2b5e4:	b002      	add	sp, #8
   2b5e6:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   2b5e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2b5ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b5f0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2b5f4:	4669      	mov	r1, sp
   2b5f6:	4620      	mov	r0, r4
   2b5f8:	f7ff ffde 	bl	2b5b8 <bt_id_set_adv_random_addr>
	if (err) {
   2b5fc:	e7f2      	b.n	2b5e4 <bt_id_set_adv_private_addr+0x12>
		return -EINVAL;
   2b5fe:	f06f 0015 	mvn.w	r0, #21
}
   2b602:	4770      	bx	lr

0002b604 <bt_id_adv_random_addr_check>:
	CHECKIF(param == NULL) {
   2b604:	b100      	cbz	r0, 2b608 <bt_id_adv_random_addr_check+0x4>
		return true;
   2b606:	2001      	movs	r0, #1
}
   2b608:	4770      	bx	lr

0002b60a <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   2b60a:	2300      	movs	r3, #0
   2b60c:	428b      	cmp	r3, r1
   2b60e:	d219      	bcs.n	2b644 <ad_is_limited+0x3a>
{
   2b610:	b500      	push	{lr}
   2b612:	e002      	b.n	2b61a <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   2b614:	3301      	adds	r3, #1
   2b616:	428b      	cmp	r3, r1
   2b618:	d211      	bcs.n	2b63e <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   2b61a:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   2b61e:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   2b622:	f240 1201 	movw	r2, #257	; 0x101
   2b626:	4594      	cmp	ip, r2
   2b628:	d1f4      	bne.n	2b614 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   2b62a:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2b62e:	2a00      	cmp	r2, #0
   2b630:	d0f0      	beq.n	2b614 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2b632:	7812      	ldrb	r2, [r2, #0]
   2b634:	f012 0f01 	tst.w	r2, #1
   2b638:	d0ec      	beq.n	2b614 <ad_is_limited+0xa>
				return true;
   2b63a:	2001      	movs	r0, #1
   2b63c:	e000      	b.n	2b640 <ad_is_limited+0x36>
	return false;
   2b63e:	2000      	movs	r0, #0
}
   2b640:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   2b644:	2000      	movs	r0, #0
}
   2b646:	4770      	bx	lr

0002b648 <get_filter_policy>:
}
   2b648:	2000      	movs	r0, #0
   2b64a:	4770      	bx	lr

0002b64c <get_adv_channel_map>:
{
   2b64c:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   2b64e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2b652:	d10b      	bne.n	2b66c <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   2b654:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2b656:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2b65a:	d001      	beq.n	2b660 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   2b65c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2b660:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2b664:	d001      	beq.n	2b66a <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   2b666:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   2b66a:	4770      	bx	lr
		channel_map &= ~0x01;
   2b66c:	2006      	movs	r0, #6
   2b66e:	e7f2      	b.n	2b656 <get_adv_channel_map+0xa>

0002b670 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b670:	094b      	lsrs	r3, r1, #5
   2b672:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b676:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b67a:	f001 011f 	and.w	r1, r1, #31
   2b67e:	4108      	asrs	r0, r1
}
   2b680:	f000 0001 	and.w	r0, r0, #1
   2b684:	4770      	bx	lr

0002b686 <hci_set_ad>:
{
   2b686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b68a:	b082      	sub	sp, #8
   2b68c:	4607      	mov	r7, r0
   2b68e:	460d      	mov	r5, r1
   2b690:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2b692:	2120      	movs	r1, #32
   2b694:	f7ec fce2 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2b698:	b300      	cbz	r0, 2b6dc <hci_set_ad+0x56>
   2b69a:	4680      	mov	r8, r0
   2b69c:	2120      	movs	r1, #32
   2b69e:	3008      	adds	r0, #8
   2b6a0:	f7f4 f82e 	bl	1f700 <net_buf_simple_add>
   2b6a4:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   2b6a6:	2220      	movs	r2, #32
   2b6a8:	2100      	movs	r1, #0
   2b6aa:	f7ff fd74 	bl	2b196 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2b6ae:	9400      	str	r4, [sp, #0]
   2b6b0:	4633      	mov	r3, r6
   2b6b2:	462a      	mov	r2, r5
   2b6b4:	211f      	movs	r1, #31
   2b6b6:	1c60      	adds	r0, r4, #1
   2b6b8:	f7ee fc78 	bl	19fac <set_data_add_complete>
	if (err) {
   2b6bc:	4604      	mov	r4, r0
   2b6be:	b948      	cbnz	r0, 2b6d4 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2b6c0:	2200      	movs	r2, #0
   2b6c2:	4641      	mov	r1, r8
   2b6c4:	4638      	mov	r0, r7
   2b6c6:	f7ec fd1b 	bl	18100 <bt_hci_cmd_send_sync>
   2b6ca:	4604      	mov	r4, r0
}
   2b6cc:	4620      	mov	r0, r4
   2b6ce:	b002      	add	sp, #8
   2b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2b6d4:	4640      	mov	r0, r8
   2b6d6:	f7f3 fef5 	bl	1f4c4 <net_buf_unref>
		return err;
   2b6da:	e7f7      	b.n	2b6cc <hci_set_ad+0x46>
		return -ENOBUFS;
   2b6dc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2b6e0:	e7f4      	b.n	2b6cc <hci_set_ad+0x46>

0002b6e2 <set_ad>:
{
   2b6e2:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2b6e4:	f242 0008 	movw	r0, #8200	; 0x2008
   2b6e8:	f7ff ffcd 	bl	2b686 <hci_set_ad>
}
   2b6ec:	bd08      	pop	{r3, pc}

0002b6ee <set_sd>:
{
   2b6ee:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2b6f0:	f242 0009 	movw	r0, #8201	; 0x2009
   2b6f4:	f7ff ffc7 	bl	2b686 <hci_set_ad>
}
   2b6f8:	bd08      	pop	{r3, pc}

0002b6fa <le_adv_update>:
{
   2b6fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b6fe:	b089      	sub	sp, #36	; 0x24
   2b700:	4604      	mov	r4, r0
   2b702:	460e      	mov	r6, r1
   2b704:	4617      	mov	r7, r2
   2b706:	461d      	mov	r5, r3
   2b708:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   2b70c:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   2b710:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   2b714:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   2b718:	2300      	movs	r3, #0
   2b71a:	9304      	str	r3, [sp, #16]
   2b71c:	9305      	str	r3, [sp, #20]
   2b71e:	9306      	str	r3, [sp, #24]
   2b720:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   2b722:	f1b9 0f00 	cmp.w	r9, #0
   2b726:	d12f      	bne.n	2b788 <le_adv_update+0x8e>
	if (!(ext_adv && scannable)) {
   2b728:	f1ba 0f00 	cmp.w	sl, #0
   2b72c:	d002      	beq.n	2b734 <le_adv_update+0x3a>
   2b72e:	f1bb 0f00 	cmp.w	fp, #0
   2b732:	d10e      	bne.n	2b752 <le_adv_update+0x58>
		d[0].data = ad;
   2b734:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   2b736:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   2b738:	f1b9 0f01 	cmp.w	r9, #1
   2b73c:	d052      	beq.n	2b7e4 <le_adv_update+0xea>
		d_len = 1;
   2b73e:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   2b740:	a904      	add	r1, sp, #16
   2b742:	4620      	mov	r0, r4
   2b744:	f7ff ffcd 	bl	2b6e2 <set_ad>
		if (err) {
   2b748:	4603      	mov	r3, r0
   2b74a:	b9c8      	cbnz	r0, 2b780 <le_adv_update+0x86>
	if (scannable) {
   2b74c:	f1bb 0f00 	cmp.w	fp, #0
   2b750:	d00c      	beq.n	2b76c <le_adv_update+0x72>
		d[0].data = sd;
   2b752:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   2b754:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   2b758:	f1b9 0f02 	cmp.w	r9, #2
   2b75c:	d048      	beq.n	2b7f0 <le_adv_update+0xf6>
		d_len = 1;
   2b75e:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   2b760:	a904      	add	r1, sp, #16
   2b762:	4620      	mov	r0, r4
   2b764:	f7ff ffc3 	bl	2b6ee <set_sd>
		if (err) {
   2b768:	4603      	mov	r3, r0
   2b76a:	b948      	cbnz	r0, 2b780 <le_adv_update+0x86>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   2b76c:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b76e:	e8d4 3fef 	ldaex	r3, [r4]
   2b772:	f043 0304 	orr.w	r3, r3, #4
   2b776:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2b77a:	2a00      	cmp	r2, #0
   2b77c:	d1f7      	bne.n	2b76e <le_adv_update+0x74>
	return 0;
   2b77e:	2300      	movs	r3, #0
}
   2b780:	4618      	mov	r0, r3
   2b782:	b009      	add	sp, #36	; 0x24
   2b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2b788:	f7ee f898 	bl	198bc <bt_get_name>
   2b78c:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2b78e:	b166      	cbz	r6, 2b7aa <le_adv_update+0xb0>
	for (i = 0; i < ad_len; i++) {
   2b790:	2200      	movs	r2, #0
   2b792:	4297      	cmp	r7, r2
   2b794:	d907      	bls.n	2b7a6 <le_adv_update+0xac>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2b796:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   2b79a:	3b08      	subs	r3, #8
   2b79c:	b2db      	uxtb	r3, r3
   2b79e:	2b01      	cmp	r3, #1
   2b7a0:	d90f      	bls.n	2b7c2 <le_adv_update+0xc8>
	for (i = 0; i < ad_len; i++) {
   2b7a2:	3201      	adds	r2, #1
   2b7a4:	e7f5      	b.n	2b792 <le_adv_update+0x98>
	return false;
   2b7a6:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2b7a8:	bb43      	cbnz	r3, 2b7fc <le_adv_update+0x102>
   2b7aa:	b175      	cbz	r5, 2b7ca <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   2b7ac:	2200      	movs	r2, #0
   2b7ae:	4590      	cmp	r8, r2
   2b7b0:	d909      	bls.n	2b7c6 <le_adv_update+0xcc>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2b7b2:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   2b7b6:	3b08      	subs	r3, #8
   2b7b8:	b2db      	uxtb	r3, r3
   2b7ba:	2b01      	cmp	r3, #1
   2b7bc:	d910      	bls.n	2b7e0 <le_adv_update+0xe6>
	for (i = 0; i < ad_len; i++) {
   2b7be:	3201      	adds	r2, #1
   2b7c0:	e7f5      	b.n	2b7ae <le_adv_update+0xb4>
			return true;
   2b7c2:	2301      	movs	r3, #1
   2b7c4:	e7f0      	b.n	2b7a8 <le_adv_update+0xae>
	return false;
   2b7c6:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   2b7c8:	b9db      	cbnz	r3, 2b802 <le_adv_update+0x108>
		data = (struct bt_data)BT_DATA(
   2b7ca:	9801      	ldr	r0, [sp, #4]
   2b7cc:	f7ff fc71 	bl	2b0b2 <strlen>
   2b7d0:	2309      	movs	r3, #9
   2b7d2:	f88d 3008 	strb.w	r3, [sp, #8]
   2b7d6:	f88d 0009 	strb.w	r0, [sp, #9]
   2b7da:	9b01      	ldr	r3, [sp, #4]
   2b7dc:	9303      	str	r3, [sp, #12]
   2b7de:	e7a3      	b.n	2b728 <le_adv_update+0x2e>
			return true;
   2b7e0:	2301      	movs	r3, #1
   2b7e2:	e7f1      	b.n	2b7c8 <le_adv_update+0xce>
			d[1].data = &data;
   2b7e4:	ab02      	add	r3, sp, #8
   2b7e6:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2b7e8:	2301      	movs	r3, #1
   2b7ea:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2b7ec:	2202      	movs	r2, #2
   2b7ee:	e7a7      	b.n	2b740 <le_adv_update+0x46>
			d[1].data = &data;
   2b7f0:	ab02      	add	r3, sp, #8
   2b7f2:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2b7f4:	2301      	movs	r3, #1
   2b7f6:	9307      	str	r3, [sp, #28]
			d_len = 2;
   2b7f8:	2202      	movs	r2, #2
   2b7fa:	e7b1      	b.n	2b760 <le_adv_update+0x66>
			return -EINVAL;
   2b7fc:	f06f 0315 	mvn.w	r3, #21
   2b800:	e7be      	b.n	2b780 <le_adv_update+0x86>
   2b802:	f06f 0315 	mvn.w	r3, #21
   2b806:	e7bb      	b.n	2b780 <le_adv_update+0x86>

0002b808 <valid_adv_param>:
{
   2b808:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2b80a:	6843      	ldr	r3, [r0, #4]
   2b80c:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2b810:	d107      	bne.n	2b822 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2b812:	6902      	ldr	r2, [r0, #16]
   2b814:	b112      	cbz	r2, 2b81c <valid_adv_param+0x14>
   2b816:	f013 0f01 	tst.w	r3, #1
   2b81a:	d004      	beq.n	2b826 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   2b81c:	f7ee fc40 	bl	1a0a0 <valid_adv_ext_param>
}
   2b820:	bd08      	pop	{r3, pc}
		return false;
   2b822:	2000      	movs	r0, #0
   2b824:	e7fc      	b.n	2b820 <valid_adv_param+0x18>
		return false;
   2b826:	2000      	movs	r0, #0
   2b828:	e7fa      	b.n	2b820 <valid_adv_param+0x18>

0002b82a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b82a:	f001 0c1f 	and.w	ip, r1, #31
   2b82e:	2301      	movs	r3, #1
   2b830:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   2b834:	b152      	cbz	r2, 2b84c <atomic_set_bit_to+0x22>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b836:	0949      	lsrs	r1, r1, #5
   2b838:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b83c:	e8d0 2fef 	ldaex	r2, [r0]
   2b840:	431a      	orrs	r2, r3
   2b842:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2b846:	2900      	cmp	r1, #0
   2b848:	d1f8      	bne.n	2b83c <atomic_set_bit_to+0x12>
   2b84a:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b84c:	0949      	lsrs	r1, r1, #5
   2b84e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b852:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b854:	e8d0 2fef 	ldaex	r2, [r0]
   2b858:	401a      	ands	r2, r3
   2b85a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2b85e:	2900      	cmp	r1, #0
   2b860:	d1f8      	bne.n	2b854 <atomic_set_bit_to+0x2a>
}
   2b862:	4770      	bx	lr

0002b864 <atomic_test_and_clear_bit>:
{
   2b864:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b866:	f001 021f 	and.w	r2, r1, #31
   2b86a:	2301      	movs	r3, #1
   2b86c:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b86e:	0949      	lsrs	r1, r1, #5
   2b870:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b874:	43d9      	mvns	r1, r3
   2b876:	e8d0 2fef 	ldaex	r2, [r0]
   2b87a:	ea02 0c01 	and.w	ip, r2, r1
   2b87e:	e8c0 cfee 	stlex	lr, ip, [r0]
   2b882:	f1be 0f00 	cmp.w	lr, #0
   2b886:	d1f6      	bne.n	2b876 <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   2b888:	4213      	tst	r3, r2
}
   2b88a:	bf14      	ite	ne
   2b88c:	2001      	movne	r0, #1
   2b88e:	2000      	moveq	r0, #0
   2b890:	f85d fb04 	ldr.w	pc, [sp], #4

0002b894 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2b894:	6843      	ldr	r3, [r0, #4]
   2b896:	f013 0f08 	tst.w	r3, #8
   2b89a:	d00b      	beq.n	2b8b4 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2b89c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2b8a0:	d10a      	bne.n	2b8b8 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2b8a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2b8a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2b8aa:	d001      	beq.n	2b8b0 <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   2b8ac:	2002      	movs	r0, #2
}
   2b8ae:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2b8b0:	2001      	movs	r0, #1
   2b8b2:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   2b8b4:	2000      	movs	r0, #0
   2b8b6:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2b8b8:	2001      	movs	r0, #1
   2b8ba:	4770      	bx	lr

0002b8bc <bt_le_adv_set_enable_legacy>:
{
   2b8bc:	b570      	push	{r4, r5, r6, lr}
   2b8be:	b086      	sub	sp, #24
   2b8c0:	4605      	mov	r5, r0
   2b8c2:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2b8c4:	2101      	movs	r1, #1
   2b8c6:	f242 000a 	movw	r0, #8202	; 0x200a
   2b8ca:	f7ec fbc7 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2b8ce:	b1d0      	cbz	r0, 2b906 <bt_le_adv_set_enable_legacy+0x4a>
   2b8d0:	4606      	mov	r6, r0
	if (enable) {
   2b8d2:	b19c      	cbz	r4, 2b8fc <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2b8d4:	2101      	movs	r1, #1
   2b8d6:	3008      	adds	r0, #8
   2b8d8:	f001 fd11 	bl	2d2fe <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2b8dc:	9400      	str	r4, [sp, #0]
   2b8de:	2307      	movs	r3, #7
   2b8e0:	f105 0210 	add.w	r2, r5, #16
   2b8e4:	a903      	add	r1, sp, #12
   2b8e6:	4630      	mov	r0, r6
   2b8e8:	f7ec fba6 	bl	18038 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2b8ec:	2200      	movs	r2, #0
   2b8ee:	4631      	mov	r1, r6
   2b8f0:	f242 000a 	movw	r0, #8202	; 0x200a
   2b8f4:	f7ec fc04 	bl	18100 <bt_hci_cmd_send_sync>
}
   2b8f8:	b006      	add	sp, #24
   2b8fa:	bd70      	pop	{r4, r5, r6, pc}
   2b8fc:	2100      	movs	r1, #0
   2b8fe:	3008      	adds	r0, #8
   2b900:	f001 fcfd 	bl	2d2fe <net_buf_simple_add_u8>
   2b904:	e7ea      	b.n	2b8dc <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   2b906:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b90a:	e7f5      	b.n	2b8f8 <bt_le_adv_set_enable_legacy+0x3c>

0002b90c <bt_le_adv_set_enable>:
{
   2b90c:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   2b90e:	f7ff ffd5 	bl	2b8bc <bt_le_adv_set_enable_legacy>
}
   2b912:	bd08      	pop	{r3, pc}

0002b914 <bt_le_lim_adv_cancel_timeout>:
{
   2b914:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2b916:	3018      	adds	r0, #24
   2b918:	f7fa fe20 	bl	2655c <k_work_cancel_delayable>
}
   2b91c:	bd08      	pop	{r3, pc}

0002b91e <bt_le_adv_resume>:
{
   2b91e:	b570      	push	{r4, r5, r6, lr}
   2b920:	b082      	sub	sp, #8
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b922:	f7ee fc69 	bl	1a1f8 <bt_le_adv_lookup_legacy>
	if (!adv) {
   2b926:	b138      	cbz	r0, 2b938 <bt_le_adv_resume+0x1a>
   2b928:	4605      	mov	r5, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2b92a:	f100 0410 	add.w	r4, r0, #16
   2b92e:	210e      	movs	r1, #14
   2b930:	4620      	mov	r0, r4
   2b932:	f7ff fe9d 	bl	2b670 <atomic_test_bit>
   2b936:	b908      	cbnz	r0, 2b93c <bt_le_adv_resume+0x1e>
}
   2b938:	b002      	add	sp, #8
   2b93a:	bd70      	pop	{r4, r5, r6, pc}
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   2b93c:	2107      	movs	r1, #7
   2b93e:	4620      	mov	r0, r4
   2b940:	f7ff fe96 	bl	2b670 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2b944:	4606      	mov	r6, r0
   2b946:	2800      	cmp	r0, #0
   2b948:	d1f6      	bne.n	2b938 <bt_le_adv_resume+0x1a>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2b94a:	210a      	movs	r1, #10
   2b94c:	4620      	mov	r0, r4
   2b94e:	f7ff fe8f 	bl	2b670 <atomic_test_bit>
   2b952:	2800      	cmp	r0, #0
   2b954:	d0f0      	beq.n	2b938 <bt_le_adv_resume+0x1a>
	err = le_adv_start_add_conn(adv, &conn);
   2b956:	a901      	add	r1, sp, #4
   2b958:	4628      	mov	r0, r5
   2b95a:	f7ee fbeb 	bl	1a134 <le_adv_start_add_conn>
	if (err) {
   2b95e:	2800      	cmp	r0, #0
   2b960:	d1ea      	bne.n	2b938 <bt_le_adv_resume+0x1a>
	err = bt_le_adv_set_enable(adv, true);
   2b962:	2101      	movs	r1, #1
   2b964:	4628      	mov	r0, r5
   2b966:	f7ff ffd1 	bl	2b90c <bt_le_adv_set_enable>
	if (err) {
   2b96a:	b968      	cbnz	r0, 2b988 <bt_le_adv_resume+0x6a>
	bt_conn_unref(conn);
   2b96c:	9801      	ldr	r0, [sp, #4]
   2b96e:	f7ef fbe7 	bl	1b140 <bt_conn_unref>
	if (persist_paused) {
   2b972:	2e00      	cmp	r6, #0
   2b974:	d0e0      	beq.n	2b938 <bt_le_adv_resume+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b976:	e8d4 3fef 	ldaex	r3, [r4]
   2b97a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2b97e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2b982:	2a00      	cmp	r2, #0
   2b984:	d0d8      	beq.n	2b938 <bt_le_adv_resume+0x1a>
   2b986:	e7f6      	b.n	2b976 <bt_le_adv_resume+0x58>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b988:	2100      	movs	r1, #0
   2b98a:	9801      	ldr	r0, [sp, #4]
   2b98c:	f7ef fc14 	bl	1b1b8 <bt_conn_set_state>
		persist_paused = atomic_test_and_clear_bit(adv->flags,
   2b990:	210e      	movs	r1, #14
   2b992:	4620      	mov	r0, r4
   2b994:	f7ff ff66 	bl	2b864 <atomic_test_and_clear_bit>
   2b998:	4606      	mov	r6, r0
   2b99a:	e7e7      	b.n	2b96c <bt_le_adv_resume+0x4e>

0002b99c <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2b99c:	460b      	mov	r3, r1
   2b99e:	b139      	cbz	r1, 2b9b0 <sys_slist_remove+0x14>
	return node->next;
   2b9a0:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2b9a2:	6019      	str	r1, [r3, #0]
	return list->tail;
   2b9a4:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b9a6:	428a      	cmp	r2, r1
   2b9a8:	d009      	beq.n	2b9be <sys_slist_remove+0x22>
	parent->next = child;
   2b9aa:	2300      	movs	r3, #0
   2b9ac:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b9ae:	4770      	bx	lr
	return node->next;
   2b9b0:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2b9b2:	6003      	str	r3, [r0, #0]
	return list->tail;
   2b9b4:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b9b6:	428a      	cmp	r2, r1
   2b9b8:	d1f7      	bne.n	2b9aa <sys_slist_remove+0xe>
	list->tail = node;
   2b9ba:	6043      	str	r3, [r0, #4]
}
   2b9bc:	e7f5      	b.n	2b9aa <sys_slist_remove+0xe>
	list->tail = node;
   2b9be:	6043      	str	r3, [r0, #4]
}
   2b9c0:	e7f3      	b.n	2b9aa <sys_slist_remove+0xe>

0002b9c2 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b9c2:	b508      	push	{r3, lr}
   2b9c4:	460a      	mov	r2, r1
	return list->head;
   2b9c6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b9c8:	2100      	movs	r1, #0
   2b9ca:	e001      	b.n	2b9d0 <sys_slist_find_and_remove+0xe>
   2b9cc:	4619      	mov	r1, r3
   2b9ce:	681b      	ldr	r3, [r3, #0]
   2b9d0:	b12b      	cbz	r3, 2b9de <sys_slist_find_and_remove+0x1c>
   2b9d2:	4293      	cmp	r3, r2
   2b9d4:	d1fa      	bne.n	2b9cc <sys_slist_find_and_remove+0xa>
   2b9d6:	f7ff ffe1 	bl	2b99c <sys_slist_remove>
   2b9da:	2001      	movs	r0, #1
   2b9dc:	e000      	b.n	2b9e0 <sys_slist_find_and_remove+0x1e>
   2b9de:	2000      	movs	r0, #0
   2b9e0:	bd08      	pop	{r3, pc}

0002b9e2 <tx_notify>:
{
   2b9e2:	b570      	push	{r4, r5, r6, lr}
   2b9e4:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   2b9e6:	e00c      	b.n	2ba02 <tx_notify+0x20>
   2b9e8:	f383 8811 	msr	BASEPRI, r3
   2b9ec:	f3bf 8f6f 	isb	sy
		if (!tx) {
   2b9f0:	b1c8      	cbz	r0, 2ba26 <tx_notify+0x44>
		cb = tx->cb;
   2b9f2:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2b9f4:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2b9f6:	f7ee ff37 	bl	1a868 <tx_free>
		cb(conn, user_data, 0);
   2b9fa:	2200      	movs	r2, #0
   2b9fc:	4631      	mov	r1, r6
   2b9fe:	4620      	mov	r0, r4
   2ba00:	47a8      	blx	r5
	__asm__ volatile(
   2ba02:	f04f 0220 	mov.w	r2, #32
   2ba06:	f3ef 8311 	mrs	r3, BASEPRI
   2ba0a:	f382 8812 	msr	BASEPRI_MAX, r2
   2ba0e:	f3bf 8f6f 	isb	sy
	return list->head;
   2ba12:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   2ba14:	2800      	cmp	r0, #0
   2ba16:	d0e7      	beq.n	2b9e8 <tx_notify+0x6>
	return node->next;
   2ba18:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2ba1a:	6222      	str	r2, [r4, #32]
	return list->tail;
   2ba1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ba1e:	4281      	cmp	r1, r0
   2ba20:	d1e2      	bne.n	2b9e8 <tx_notify+0x6>
	list->tail = node;
   2ba22:	6262      	str	r2, [r4, #36]	; 0x24
}
   2ba24:	e7e0      	b.n	2b9e8 <tx_notify+0x6>
}
   2ba26:	bd70      	pop	{r4, r5, r6, pc}

0002ba28 <tx_complete_work>:
{
   2ba28:	b508      	push	{r3, lr}
	tx_notify(conn);
   2ba2a:	3828      	subs	r0, #40	; 0x28
   2ba2c:	f7ff ffd9 	bl	2b9e2 <tx_notify>
}
   2ba30:	bd08      	pop	{r3, pc}

0002ba32 <atomic_test_and_clear_bit>:
{
   2ba32:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ba34:	f001 021f 	and.w	r2, r1, #31
   2ba38:	2301      	movs	r3, #1
   2ba3a:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ba3c:	0949      	lsrs	r1, r1, #5
   2ba3e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2ba42:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ba44:	e8d0 2fef 	ldaex	r2, [r0]
   2ba48:	ea02 0c01 	and.w	ip, r2, r1
   2ba4c:	e8c0 cfee 	stlex	lr, ip, [r0]
   2ba50:	f1be 0f00 	cmp.w	lr, #0
   2ba54:	d1f6      	bne.n	2ba44 <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   2ba56:	4213      	tst	r3, r2
}
   2ba58:	bf14      	ite	ne
   2ba5a:	2001      	movne	r0, #1
   2ba5c:	2000      	moveq	r0, #0
   2ba5e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba62 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ba62:	094b      	lsrs	r3, r1, #5
   2ba64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ba68:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ba6c:	f001 011f 	and.w	r1, r1, #31
   2ba70:	4108      	asrs	r0, r1
}
   2ba72:	f000 0001 	and.w	r0, r0, #1
   2ba76:	4770      	bx	lr

0002ba78 <send_acl>:
{
   2ba78:	b570      	push	{r4, r5, r6, lr}
   2ba7a:	4605      	mov	r5, r0
   2ba7c:	460c      	mov	r4, r1
	switch (flags) {
   2ba7e:	2a03      	cmp	r2, #3
   2ba80:	d818      	bhi.n	2bab4 <send_acl+0x3c>
   2ba82:	e8df f002 	tbb	[pc, r2]
   2ba86:	1502      	.short	0x1502
   2ba88:	1502      	.short	0x1502
   2ba8a:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2ba8c:	2104      	movs	r1, #4
   2ba8e:	f104 0008 	add.w	r0, r4, #8
   2ba92:	f7f3 fe13 	bl	1f6bc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2ba96:	882b      	ldrh	r3, [r5, #0]
   2ba98:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2ba9c:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ba9e:	89a3      	ldrh	r3, [r4, #12]
   2baa0:	3b04      	subs	r3, #4
   2baa2:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2baa4:	2302      	movs	r3, #2
   2baa6:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   2baa8:	4620      	mov	r0, r4
   2baaa:	f7ed f9d7 	bl	18e5c <bt_send>
}
   2baae:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2bab0:	2601      	movs	r6, #1
   2bab2:	e7eb      	b.n	2ba8c <send_acl+0x14>
	switch (flags) {
   2bab4:	f06f 0015 	mvn.w	r0, #21
   2bab8:	e7f9      	b.n	2baae <send_acl+0x36>

0002baba <process_unack_tx>:
{
   2baba:	b510      	push	{r4, lr}
   2babc:	4604      	mov	r4, r0
   2babe:	e028      	b.n	2bb12 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2bac0:	3a01      	subs	r2, #1
   2bac2:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2bac4:	f383 8811 	msr	BASEPRI, r3
   2bac8:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2bacc:	4620      	mov	r0, r4
   2bace:	f7ee ff8b 	bl	1a9e8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2bad2:	f7f9 fefd 	bl	258d0 <z_impl_k_sem_give>
			continue;
   2bad6:	e01c      	b.n	2bb12 <process_unack_tx+0x58>
   2bad8:	f383 8811 	msr	BASEPRI, r3
   2badc:	f3bf 8f6f 	isb	sy
		if (!node) {
   2bae0:	b361      	cbz	r1, 2bb3c <process_unack_tx+0x82>
	__asm__ volatile(
   2bae2:	f04f 0220 	mov.w	r2, #32
   2bae6:	f3ef 8311 	mrs	r3, BASEPRI
   2baea:	f382 8812 	msr	BASEPRI_MAX, r2
   2baee:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2baf2:	68ca      	ldr	r2, [r1, #12]
   2baf4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2baf6:	2200      	movs	r2, #0
   2baf8:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   2bafa:	f383 8811 	msr	BASEPRI, r3
   2bafe:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2bb02:	4620      	mov	r0, r4
   2bb04:	f7ee fefa 	bl	1a8fc <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   2bb08:	4620      	mov	r0, r4
   2bb0a:	f7ee ff6d 	bl	1a9e8 <bt_conn_get_pkts>
   2bb0e:	f7f9 fedf 	bl	258d0 <z_impl_k_sem_give>
	__asm__ volatile(
   2bb12:	f04f 0220 	mov.w	r2, #32
   2bb16:	f3ef 8311 	mrs	r3, BASEPRI
   2bb1a:	f382 8812 	msr	BASEPRI_MAX, r2
   2bb1e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2bb22:	69e2      	ldr	r2, [r4, #28]
   2bb24:	2a00      	cmp	r2, #0
   2bb26:	d1cb      	bne.n	2bac0 <process_unack_tx+0x6>
	return list->head;
   2bb28:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2bb2a:	2900      	cmp	r1, #0
   2bb2c:	d0d4      	beq.n	2bad8 <process_unack_tx+0x1e>
	return node->next;
   2bb2e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2bb30:	6162      	str	r2, [r4, #20]
	return list->tail;
   2bb32:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bb34:	4281      	cmp	r1, r0
   2bb36:	d1cf      	bne.n	2bad8 <process_unack_tx+0x1e>
	list->tail = node;
   2bb38:	61a2      	str	r2, [r4, #24]
}
   2bb3a:	e7cd      	b.n	2bad8 <process_unack_tx+0x1e>
}
   2bb3c:	bd10      	pop	{r4, pc}

0002bb3e <bt_conn_reset_rx_state>:
{
   2bb3e:	b510      	push	{r4, lr}
   2bb40:	4604      	mov	r4, r0
	if (!conn->rx) {
   2bb42:	6900      	ldr	r0, [r0, #16]
   2bb44:	b118      	cbz	r0, 2bb4e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2bb46:	f7f3 fcbd 	bl	1f4c4 <net_buf_unref>
	conn->rx = NULL;
   2bb4a:	2300      	movs	r3, #0
   2bb4c:	6123      	str	r3, [r4, #16]
}
   2bb4e:	bd10      	pop	{r4, pc}

0002bb50 <conn_prepare_events>:
{
   2bb50:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_get(&conn->ref)) {
   2bb52:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   2bb56:	e8d3 3faf 	lda	r3, [r3]
   2bb5a:	b1eb      	cbz	r3, 2bb98 <conn_prepare_events+0x48>
   2bb5c:	4604      	mov	r4, r0
   2bb5e:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2bb60:	7a83      	ldrb	r3, [r0, #10]
   2bb62:	b16b      	cbz	r3, 2bb80 <conn_prepare_events+0x30>
	if (conn->state != BT_CONN_CONNECTED) {
   2bb64:	7aa3      	ldrb	r3, [r4, #10]
   2bb66:	2b07      	cmp	r3, #7
   2bb68:	d119      	bne.n	2bb9e <conn_prepare_events+0x4e>
	k_poll_event_init(&events[0],
   2bb6a:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2bb6e:	2200      	movs	r2, #0
   2bb70:	2104      	movs	r1, #4
   2bb72:	4628      	mov	r0, r5
   2bb74:	f7fd f84e 	bl	28c14 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2bb78:	2301      	movs	r3, #1
   2bb7a:	732b      	strb	r3, [r5, #12]
	return 0;
   2bb7c:	2000      	movs	r0, #0
}
   2bb7e:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2bb80:	2106      	movs	r1, #6
   2bb82:	3004      	adds	r0, #4
   2bb84:	f7ff ff55 	bl	2ba32 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2bb88:	2800      	cmp	r0, #0
   2bb8a:	d0eb      	beq.n	2bb64 <conn_prepare_events+0x14>
		conn_cleanup(conn);
   2bb8c:	4620      	mov	r0, r4
   2bb8e:	f7ef f995 	bl	1aebc <conn_cleanup>
		return -ENOTCONN;
   2bb92:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2bb96:	e7f2      	b.n	2bb7e <conn_prepare_events+0x2e>
		return -ENOTCONN;
   2bb98:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2bb9c:	e7ef      	b.n	2bb7e <conn_prepare_events+0x2e>
		return -ENOTCONN;
   2bb9e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2bba2:	e7ec      	b.n	2bb7e <conn_prepare_events+0x2e>

0002bba4 <bt_conn_recv>:
{
   2bba4:	b570      	push	{r4, r5, r6, lr}
   2bba6:	4604      	mov	r4, r0
   2bba8:	460d      	mov	r5, r1
   2bbaa:	4616      	mov	r6, r2
	tx_notify(conn);
   2bbac:	f7ff ff19 	bl	2b9e2 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2bbb0:	4632      	mov	r2, r6
   2bbb2:	4629      	mov	r1, r5
   2bbb4:	4620      	mov	r0, r4
   2bbb6:	f7ef f827 	bl	1ac08 <bt_acl_recv>
}
   2bbba:	bd70      	pop	{r4, r5, r6, pc}

0002bbbc <conn_lookup_handle>:
{
   2bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bbbe:	4606      	mov	r6, r0
   2bbc0:	460d      	mov	r5, r1
   2bbc2:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2bbc4:	2400      	movs	r4, #0
   2bbc6:	e003      	b.n	2bbd0 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2bbc8:	4660      	mov	r0, ip
   2bbca:	f7ef fab9 	bl	1b140 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2bbce:	3401      	adds	r4, #1
   2bbd0:	42ac      	cmp	r4, r5
   2bbd2:	d21b      	bcs.n	2bc0c <conn_lookup_handle+0x50>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2bbd4:	20c8      	movs	r0, #200	; 0xc8
   2bbd6:	fb00 6004 	mla	r0, r0, r4, r6
   2bbda:	f7ef fa87 	bl	1b0ec <bt_conn_ref>
		if (!conn) {
   2bbde:	4684      	mov	ip, r0
   2bbe0:	2800      	cmp	r0, #0
   2bbe2:	d0f4      	beq.n	2bbce <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2bbe4:	7a83      	ldrb	r3, [r0, #10]
   2bbe6:	2b01      	cmp	r3, #1
   2bbe8:	d006      	beq.n	2bbf8 <conn_lookup_handle+0x3c>
   2bbea:	b25a      	sxtb	r2, r3
   2bbec:	2a00      	cmp	r2, #0
   2bbee:	d0eb      	beq.n	2bbc8 <conn_lookup_handle+0xc>
   2bbf0:	3b07      	subs	r3, #7
   2bbf2:	b2db      	uxtb	r3, r3
   2bbf4:	2b01      	cmp	r3, #1
   2bbf6:	d8e7      	bhi.n	2bbc8 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   2bbf8:	f8bc 3000 	ldrh.w	r3, [ip]
   2bbfc:	42bb      	cmp	r3, r7
   2bbfe:	d101      	bne.n	2bc04 <conn_lookup_handle+0x48>
}
   2bc00:	4660      	mov	r0, ip
   2bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   2bc04:	4660      	mov	r0, ip
   2bc06:	f7ef fa9b 	bl	1b140 <bt_conn_unref>
			continue;
   2bc0a:	e7e0      	b.n	2bbce <conn_lookup_handle+0x12>
	return NULL;
   2bc0c:	f04f 0c00 	mov.w	ip, #0
   2bc10:	e7f6      	b.n	2bc00 <conn_lookup_handle+0x44>

0002bc12 <bt_conn_connected>:
{
   2bc12:	b510      	push	{r4, lr}
   2bc14:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2bc16:	f7f0 f895 	bl	1bd44 <bt_l2cap_connected>
	notify_connected(conn);
   2bc1a:	4620      	mov	r0, r4
   2bc1c:	f7ee fe8e 	bl	1a93c <notify_connected>
}
   2bc20:	bd10      	pop	{r4, pc}

0002bc22 <bt_conn_get_security>:
}
   2bc22:	2001      	movs	r0, #1
   2bc24:	4770      	bx	lr

0002bc26 <bt_conn_add_le>:
{
   2bc26:	b570      	push	{r4, r5, r6, lr}
   2bc28:	4606      	mov	r6, r0
   2bc2a:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2bc2c:	f7ee ffe4 	bl	1abf8 <acl_conn_new>
	if (!conn) {
   2bc30:	4604      	mov	r4, r0
   2bc32:	b168      	cbz	r0, 2bc50 <bt_conn_add_le+0x2a>
	conn->id = id;
   2bc34:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   2bc36:	2207      	movs	r2, #7
   2bc38:	4629      	mov	r1, r5
   2bc3a:	3090      	adds	r0, #144	; 0x90
   2bc3c:	f7ff fa7c 	bl	2b138 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   2bc40:	2301      	movs	r3, #1
   2bc42:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2bc44:	2318      	movs	r3, #24
   2bc46:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2bc4a:	2328      	movs	r3, #40	; 0x28
   2bc4c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2bc50:	4620      	mov	r0, r4
   2bc52:	bd70      	pop	{r4, r5, r6, pc}

0002bc54 <bt_conn_is_peer_addr_le>:
{
   2bc54:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2bc56:	7a03      	ldrb	r3, [r0, #8]
   2bc58:	428b      	cmp	r3, r1
   2bc5a:	d001      	beq.n	2bc60 <bt_conn_is_peer_addr_le+0xc>
		return false;
   2bc5c:	2000      	movs	r0, #0
}
   2bc5e:	bd38      	pop	{r3, r4, r5, pc}
   2bc60:	4604      	mov	r4, r0
   2bc62:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2bc64:	2207      	movs	r2, #7
   2bc66:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2bc6a:	4628      	mov	r0, r5
   2bc6c:	f7ff fa52 	bl	2b114 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2bc70:	b1a8      	cbz	r0, 2bc9e <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2bc72:	78e3      	ldrb	r3, [r4, #3]
   2bc74:	b14b      	cbz	r3, 2bc8a <bt_conn_is_peer_addr_le+0x36>
   2bc76:	2207      	movs	r2, #7
   2bc78:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2bc7c:	4628      	mov	r0, r5
   2bc7e:	f7ff fa49 	bl	2b114 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2bc82:	fab0 f080 	clz	r0, r0
   2bc86:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   2bc88:	e7e9      	b.n	2bc5e <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   2bc8a:	2207      	movs	r2, #7
   2bc8c:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2bc90:	4628      	mov	r0, r5
   2bc92:	f7ff fa3f 	bl	2b114 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2bc96:	fab0 f080 	clz	r0, r0
   2bc9a:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   2bc9c:	e7df      	b.n	2bc5e <bt_conn_is_peer_addr_le+0xa>
		return true;
   2bc9e:	2001      	movs	r0, #1
   2bca0:	e7dd      	b.n	2bc5e <bt_conn_is_peer_addr_le+0xa>

0002bca2 <bt_conn_le_conn_update>:
{
   2bca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bca4:	4606      	mov	r6, r0
   2bca6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2bca8:	210e      	movs	r1, #14
   2bcaa:	f242 0013 	movw	r0, #8211	; 0x2013
   2bcae:	f7ec f9d5 	bl	1805c <bt_hci_cmd_create>
	if (!buf) {
   2bcb2:	b1d0      	cbz	r0, 2bcea <bt_conn_le_conn_update+0x48>
   2bcb4:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   2bcb6:	210e      	movs	r1, #14
   2bcb8:	3008      	adds	r0, #8
   2bcba:	f7f3 fd21 	bl	1f700 <net_buf_simple_add>
   2bcbe:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2bcc0:	220e      	movs	r2, #14
   2bcc2:	2100      	movs	r1, #0
   2bcc4:	f7ff fa67 	bl	2b196 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2bcc8:	8833      	ldrh	r3, [r6, #0]
   2bcca:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2bccc:	882b      	ldrh	r3, [r5, #0]
   2bcce:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2bcd0:	886b      	ldrh	r3, [r5, #2]
   2bcd2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2bcd4:	88ab      	ldrh	r3, [r5, #4]
   2bcd6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2bcd8:	88eb      	ldrh	r3, [r5, #6]
   2bcda:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2bcdc:	2200      	movs	r2, #0
   2bcde:	4639      	mov	r1, r7
   2bce0:	f242 0013 	movw	r0, #8211	; 0x2013
   2bce4:	f7ec fa0c 	bl	18100 <bt_hci_cmd_send_sync>
}
   2bce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2bcea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2bcee:	e7fb      	b.n	2bce8 <bt_conn_le_conn_update+0x46>

0002bcf0 <l2cap_connected>:
}
   2bcf0:	4770      	bx	lr

0002bcf2 <l2cap_disconnected>:
}
   2bcf2:	4770      	bx	lr

0002bcf4 <l2cap_chan_recv>:
{
   2bcf4:	b510      	push	{r4, lr}
   2bcf6:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2bcf8:	6843      	ldr	r3, [r0, #4]
   2bcfa:	695b      	ldr	r3, [r3, #20]
   2bcfc:	4798      	blx	r3
	net_buf_unref(buf);
   2bcfe:	4620      	mov	r0, r4
   2bd00:	f7f3 fbe0 	bl	1f4c4 <net_buf_unref>
}
   2bd04:	bd10      	pop	{r4, pc}

0002bd06 <bt_l2cap_chan_del>:
{
   2bd06:	b538      	push	{r3, r4, r5, lr}
   2bd08:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2bd0a:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2bd0c:	6803      	ldr	r3, [r0, #0]
   2bd0e:	b123      	cbz	r3, 2bd1a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2bd10:	686b      	ldr	r3, [r5, #4]
   2bd12:	b103      	cbz	r3, 2bd16 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2bd14:	4798      	blx	r3
	chan->conn = NULL;
   2bd16:	2300      	movs	r3, #0
   2bd18:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2bd1a:	68e3      	ldr	r3, [r4, #12]
   2bd1c:	b10b      	cbz	r3, 2bd22 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2bd1e:	4620      	mov	r0, r4
   2bd20:	4798      	blx	r3
	if (ops->released) {
   2bd22:	6a2b      	ldr	r3, [r5, #32]
   2bd24:	b10b      	cbz	r3, 2bd2a <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2bd26:	4620      	mov	r0, r4
   2bd28:	4798      	blx	r3
}
   2bd2a:	bd38      	pop	{r3, r4, r5, pc}

0002bd2c <bt_l2cap_chan_add>:
{
   2bd2c:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2bd2e:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2bd32:	2400      	movs	r4, #0
   2bd34:	608c      	str	r4, [r1, #8]
	return list->tail;
   2bd36:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_APPEND(slist, snode)
   2bd38:	b12c      	cbz	r4, 2bd46 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2bd3a:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2bd3c:	6583      	str	r3, [r0, #88]	; 0x58
	chan->conn = conn;
   2bd3e:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2bd40:	60ca      	str	r2, [r1, #12]
}
   2bd42:	bc10      	pop	{r4}
   2bd44:	4770      	bx	lr
   2bd46:	6583      	str	r3, [r0, #88]	; 0x58
	list->head = node;
   2bd48:	6543      	str	r3, [r0, #84]	; 0x54
}
   2bd4a:	e7f8      	b.n	2bd3e <bt_l2cap_chan_add+0x12>

0002bd4c <bt_l2cap_disconnected>:
{
   2bd4c:	b510      	push	{r4, lr}
	return list->head;
   2bd4e:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2bd50:	b138      	cbz	r0, 2bd62 <bt_l2cap_disconnected+0x16>
   2bd52:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bd54:	f110 0408 	adds.w	r4, r0, #8
   2bd58:	d008      	beq.n	2bd6c <bt_l2cap_disconnected+0x20>
	return node->next;
   2bd5a:	6884      	ldr	r4, [r0, #8]
   2bd5c:	b134      	cbz	r4, 2bd6c <bt_l2cap_disconnected+0x20>
   2bd5e:	3c08      	subs	r4, #8
   2bd60:	e004      	b.n	2bd6c <bt_l2cap_disconnected+0x20>
   2bd62:	4604      	mov	r4, r0
   2bd64:	e002      	b.n	2bd6c <bt_l2cap_disconnected+0x20>
   2bd66:	4623      	mov	r3, r4
   2bd68:	4620      	mov	r0, r4
   2bd6a:	461c      	mov	r4, r3
   2bd6c:	b140      	cbz	r0, 2bd80 <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   2bd6e:	f7ff ffca 	bl	2bd06 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2bd72:	2c00      	cmp	r4, #0
   2bd74:	d0f7      	beq.n	2bd66 <bt_l2cap_disconnected+0x1a>
   2bd76:	68a3      	ldr	r3, [r4, #8]
   2bd78:	2b00      	cmp	r3, #0
   2bd7a:	d0f5      	beq.n	2bd68 <bt_l2cap_disconnected+0x1c>
   2bd7c:	3b08      	subs	r3, #8
   2bd7e:	e7f3      	b.n	2bd68 <bt_l2cap_disconnected+0x1c>
}
   2bd80:	bd10      	pop	{r4, pc}

0002bd82 <bt_l2cap_create_pdu_timeout>:
{
   2bd82:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2bd84:	3104      	adds	r1, #4
   2bd86:	f7ef fbb9 	bl	1b4fc <bt_conn_create_pdu_timeout>
}
   2bd8a:	bd08      	pop	{r3, pc}

0002bd8c <bt_l2cap_send_cb>:
{
   2bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd8e:	4605      	mov	r5, r0
   2bd90:	460f      	mov	r7, r1
   2bd92:	4614      	mov	r4, r2
   2bd94:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2bd96:	2104      	movs	r1, #4
   2bd98:	f102 0008 	add.w	r0, r2, #8
   2bd9c:	f7f3 fc8e 	bl	1f6bc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2bda0:	89a3      	ldrh	r3, [r4, #12]
   2bda2:	3b04      	subs	r3, #4
   2bda4:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2bda6:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2bda8:	9b06      	ldr	r3, [sp, #24]
   2bdaa:	4632      	mov	r2, r6
   2bdac:	4621      	mov	r1, r4
   2bdae:	4628      	mov	r0, r5
   2bdb0:	f7ef f8d0 	bl	1af54 <bt_conn_send_cb>
}
   2bdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002bdb6 <l2cap_send>:
{
   2bdb6:	b510      	push	{r4, lr}
   2bdb8:	b082      	sub	sp, #8
   2bdba:	4614      	mov	r4, r2
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2bdbc:	2300      	movs	r3, #0
   2bdbe:	9300      	str	r3, [sp, #0]
   2bdc0:	f7ff ffe4 	bl	2bd8c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2bdc4:	b908      	cbnz	r0, 2bdca <l2cap_send+0x14>
}
   2bdc6:	b002      	add	sp, #8
   2bdc8:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   2bdca:	4620      	mov	r0, r4
   2bdcc:	f7f3 fb7a 	bl	1f4c4 <net_buf_unref>
}
   2bdd0:	e7f9      	b.n	2bdc6 <l2cap_send+0x10>

0002bdd2 <l2cap_send_reject>:
{
   2bdd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bdd6:	4606      	mov	r6, r0
   2bdd8:	4690      	mov	r8, r2
   2bdda:	461c      	mov	r4, r3
   2bddc:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2bde0:	1cbb      	adds	r3, r7, #2
   2bde2:	460a      	mov	r2, r1
   2bde4:	2101      	movs	r1, #1
   2bde6:	2000      	movs	r0, #0
   2bde8:	f7ef fffe 	bl	1bde8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2bdec:	b198      	cbz	r0, 2be16 <l2cap_send_reject+0x44>
   2bdee:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2bdf0:	f100 0908 	add.w	r9, r0, #8
   2bdf4:	2102      	movs	r1, #2
   2bdf6:	4648      	mov	r0, r9
   2bdf8:	f7f3 fc82 	bl	1f700 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2bdfc:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2be00:	b124      	cbz	r4, 2be0c <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2be02:	463a      	mov	r2, r7
   2be04:	4621      	mov	r1, r4
   2be06:	4648      	mov	r0, r9
   2be08:	f001 fa6e 	bl	2d2e8 <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   2be0c:	462a      	mov	r2, r5
   2be0e:	2105      	movs	r1, #5
   2be10:	4630      	mov	r0, r6
   2be12:	f7ff ffd0 	bl	2bdb6 <l2cap_send>
}
   2be16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002be1a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2be1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2be1c:	b110      	cbz	r0, 2be24 <bt_l2cap_le_lookup_rx_cid+0xa>
   2be1e:	3808      	subs	r0, #8
   2be20:	e000      	b.n	2be24 <bt_l2cap_le_lookup_rx_cid+0xa>
   2be22:	4618      	mov	r0, r3
   2be24:	b150      	cbz	r0, 2be3c <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2be26:	8a83      	ldrh	r3, [r0, #20]
   2be28:	428b      	cmp	r3, r1
   2be2a:	d007      	beq.n	2be3c <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2be2c:	f110 0308 	adds.w	r3, r0, #8
   2be30:	d0f7      	beq.n	2be22 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   2be32:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2be34:	2800      	cmp	r0, #0
   2be36:	d0f5      	beq.n	2be24 <bt_l2cap_le_lookup_rx_cid+0xa>
   2be38:	3808      	subs	r0, #8
   2be3a:	e7f3      	b.n	2be24 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2be3c:	4770      	bx	lr

0002be3e <bt_l2cap_update_conn_param>:
{
   2be3e:	b570      	push	{r4, r5, r6, lr}
   2be40:	b082      	sub	sp, #8
   2be42:	4605      	mov	r5, r0
   2be44:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2be46:	f7ef fe9d 	bl	1bb84 <get_ident>
   2be4a:	4602      	mov	r2, r0
   2be4c:	2308      	movs	r3, #8
   2be4e:	2112      	movs	r1, #18
   2be50:	2000      	movs	r0, #0
   2be52:	f7ef ffc9 	bl	1bde8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2be56:	b1e0      	cbz	r0, 2be92 <bt_l2cap_update_conn_param+0x54>
   2be58:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2be5a:	2108      	movs	r1, #8
   2be5c:	4408      	add	r0, r1
   2be5e:	f7f3 fc4f 	bl	1f700 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2be62:	8823      	ldrh	r3, [r4, #0]
   2be64:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2be66:	8863      	ldrh	r3, [r4, #2]
   2be68:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2be6a:	88a3      	ldrh	r3, [r4, #4]
   2be6c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2be6e:	88e3      	ldrh	r3, [r4, #6]
   2be70:	80c3      	strh	r3, [r0, #6]
   2be72:	2300      	movs	r3, #0
   2be74:	9300      	str	r3, [sp, #0]
   2be76:	4632      	mov	r2, r6
   2be78:	2105      	movs	r1, #5
   2be7a:	4628      	mov	r0, r5
   2be7c:	f7ff ff86 	bl	2bd8c <bt_l2cap_send_cb>
	if (err) {
   2be80:	4604      	mov	r4, r0
   2be82:	b910      	cbnz	r0, 2be8a <bt_l2cap_update_conn_param+0x4c>
}
   2be84:	4620      	mov	r0, r4
   2be86:	b002      	add	sp, #8
   2be88:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2be8a:	4630      	mov	r0, r6
   2be8c:	f7f3 fb1a 	bl	1f4c4 <net_buf_unref>
		return err;
   2be90:	e7f8      	b.n	2be84 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2be92:	f06f 040b 	mvn.w	r4, #11
   2be96:	e7f5      	b.n	2be84 <bt_l2cap_update_conn_param+0x46>

0002be98 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2be98:	4770      	bx	lr

0002be9a <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2be9a:	460b      	mov	r3, r1
   2be9c:	b139      	cbz	r1, 2beae <sys_slist_remove+0x14>
	return node->next;
   2be9e:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2bea0:	6019      	str	r1, [r3, #0]
	return list->tail;
   2bea2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2bea4:	428a      	cmp	r2, r1
   2bea6:	d009      	beq.n	2bebc <sys_slist_remove+0x22>
	parent->next = child;
   2bea8:	2300      	movs	r3, #0
   2beaa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2beac:	4770      	bx	lr
	return node->next;
   2beae:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2beb0:	6003      	str	r3, [r0, #0]
	return list->tail;
   2beb2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2beb4:	428a      	cmp	r2, r1
   2beb6:	d1f7      	bne.n	2bea8 <sys_slist_remove+0xe>
	list->tail = node;
   2beb8:	6043      	str	r3, [r0, #4]
}
   2beba:	e7f5      	b.n	2bea8 <sys_slist_remove+0xe>
	list->tail = node;
   2bebc:	6043      	str	r3, [r0, #4]
}
   2bebe:	e7f3      	b.n	2bea8 <sys_slist_remove+0xe>

0002bec0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bec0:	b508      	push	{r3, lr}
   2bec2:	460a      	mov	r2, r1
	return list->head;
   2bec4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bec6:	2100      	movs	r1, #0
   2bec8:	e001      	b.n	2bece <sys_slist_find_and_remove+0xe>
   2beca:	4619      	mov	r1, r3
   2becc:	681b      	ldr	r3, [r3, #0]
   2bece:	b12b      	cbz	r3, 2bedc <sys_slist_find_and_remove+0x1c>
   2bed0:	4293      	cmp	r3, r2
   2bed2:	d1fa      	bne.n	2beca <sys_slist_find_and_remove+0xa>
   2bed4:	f7ff ffe1 	bl	2be9a <sys_slist_remove>
   2bed8:	2001      	movs	r0, #1
   2beda:	e000      	b.n	2bede <sys_slist_find_and_remove+0x1e>
   2bedc:	2000      	movs	r0, #0
   2bede:	bd08      	pop	{r3, pc}

0002bee0 <get_first_req_matching_chan>:
{
   2bee0:	4603      	mov	r3, r0
	return list->head;
   2bee2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2bee4:	b120      	cbz	r0, 2bef0 <get_first_req_matching_chan+0x10>
	return node->next;
   2bee6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2bee8:	601a      	str	r2, [r3, #0]
	return list->tail;
   2beea:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2beec:	4288      	cmp	r0, r1
   2beee:	d000      	beq.n	2bef2 <get_first_req_matching_chan+0x12>
}
   2bef0:	4770      	bx	lr
	list->tail = node;
   2bef2:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   2bef4:	e7fc      	b.n	2bef0 <get_first_req_matching_chan+0x10>

0002bef6 <range_is_valid>:
	if (!start || !end) {
   2bef6:	b120      	cbz	r0, 2bf02 <range_is_valid+0xc>
   2bef8:	b119      	cbz	r1, 2bf02 <range_is_valid+0xc>
	if (start > end) {
   2befa:	4288      	cmp	r0, r1
   2befc:	d806      	bhi.n	2bf0c <range_is_valid+0x16>
	return true;
   2befe:	2001      	movs	r0, #1
}
   2bf00:	4770      	bx	lr
		if (err) {
   2bf02:	b10a      	cbz	r2, 2bf08 <range_is_valid+0x12>
			*err = 0U;
   2bf04:	2300      	movs	r3, #0
   2bf06:	8013      	strh	r3, [r2, #0]
		return false;
   2bf08:	2000      	movs	r0, #0
   2bf0a:	4770      	bx	lr
		if (err) {
   2bf0c:	b102      	cbz	r2, 2bf10 <range_is_valid+0x1a>
			*err = start;
   2bf0e:	8010      	strh	r0, [r2, #0]
		return false;
   2bf10:	2000      	movs	r0, #0
   2bf12:	4770      	bx	lr

0002bf14 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2bf14:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2bf18:	d201      	bcs.n	2bf1e <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2bf1a:	200e      	movs	r0, #14
}
   2bf1c:	4770      	bx	lr
		return -err;
   2bf1e:	4240      	negs	r0, r0
   2bf20:	b2c0      	uxtb	r0, r0
   2bf22:	4770      	bx	lr

0002bf24 <attr_read_type_cb>:
{
   2bf24:	b410      	push	{r4}
	if (!data->rsp->len) {
   2bf26:	68d4      	ldr	r4, [r2, #12]
   2bf28:	7823      	ldrb	r3, [r4, #0]
   2bf2a:	b923      	cbnz	r3, 2bf36 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2bf2c:	3102      	adds	r1, #2
   2bf2e:	7021      	strb	r1, [r4, #0]
	return true;
   2bf30:	2001      	movs	r0, #1
}
   2bf32:	bc10      	pop	{r4}
   2bf34:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2bf36:	3102      	adds	r1, #2
   2bf38:	428b      	cmp	r3, r1
   2bf3a:	d005      	beq.n	2bf48 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2bf3c:	8983      	ldrh	r3, [r0, #12]
   2bf3e:	3b02      	subs	r3, #2
   2bf40:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2bf42:	2000      	movs	r0, #0
   2bf44:	6110      	str	r0, [r2, #16]
		return false;
   2bf46:	e7f4      	b.n	2bf32 <attr_read_type_cb+0xe>
	return true;
   2bf48:	2001      	movs	r0, #1
   2bf4a:	e7f2      	b.n	2bf32 <attr_read_type_cb+0xe>

0002bf4c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2bf4c:	68d0      	ldr	r0, [r2, #12]
   2bf4e:	7803      	ldrb	r3, [r0, #0]
   2bf50:	b91b      	cbnz	r3, 2bf5a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2bf52:	3104      	adds	r1, #4
   2bf54:	7001      	strb	r1, [r0, #0]
	return true;
   2bf56:	2001      	movs	r0, #1
   2bf58:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2bf5a:	3104      	adds	r1, #4
   2bf5c:	428b      	cmp	r3, r1
   2bf5e:	d006      	beq.n	2bf6e <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2bf60:	6891      	ldr	r1, [r2, #8]
   2bf62:	898b      	ldrh	r3, [r1, #12]
   2bf64:	3b04      	subs	r3, #4
   2bf66:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2bf68:	2000      	movs	r0, #0
   2bf6a:	6110      	str	r0, [r2, #16]
		return false;
   2bf6c:	4770      	bx	lr
	return true;
   2bf6e:	2001      	movs	r0, #1
}
   2bf70:	4770      	bx	lr

0002bf72 <att_prepare_write_req>:
}
   2bf72:	2006      	movs	r0, #6
   2bf74:	4770      	bx	lr

0002bf76 <att_exec_write_req>:
}
   2bf76:	2006      	movs	r0, #6
   2bf78:	4770      	bx	lr

0002bf7a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2bf7a:	094b      	lsrs	r3, r1, #5
   2bf7c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2bf80:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2bf84:	f001 011f 	and.w	r1, r1, #31
   2bf88:	4108      	asrs	r0, r1
}
   2bf8a:	f000 0001 	and.w	r0, r0, #1
   2bf8e:	4770      	bx	lr

0002bf90 <att_chan_attach>:
{
   2bf90:	b538      	push	{r3, r4, r5, lr}
   2bf92:	4604      	mov	r4, r0
   2bf94:	460d      	mov	r5, r1
	return list->head;
   2bf96:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sys_slist_is_empty(&att->chans)) {
   2bf98:	b143      	cbz	r3, 2bfac <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2bf9a:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   2bf9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   2bfa0:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
	list->head = node;
   2bfa4:	62a3      	str	r3, [r4, #40]	; 0x28
	return list->tail;
   2bfa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   2bfa8:	b122      	cbz	r2, 2bfb4 <att_chan_attach+0x24>
}
   2bfaa:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2bfac:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2bfae:	f002 ffab 	bl	2ef08 <z_impl_k_queue_init>
}
   2bfb2:	e7f2      	b.n	2bf9a <att_chan_attach+0xa>
	list->tail = node;
   2bfb4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2bfb6:	e7f8      	b.n	2bfaa <att_chan_attach+0x1a>

0002bfb8 <chan_tx_complete>:
{
   2bfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bfbc:	4605      	mov	r5, r0
   2bfbe:	4608      	mov	r0, r1
   2bfc0:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   2bfc2:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   2bfc4:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   2bfc6:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   2bfca:	f7f0 fb13 	bl	1c5f4 <tx_meta_data_free>
	if (!err && func) {
   2bfce:	b94c      	cbnz	r4, 2bfe4 <chan_tx_complete+0x2c>
   2bfd0:	b146      	cbz	r6, 2bfe4 <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   2bfd2:	2400      	movs	r4, #0
   2bfd4:	e004      	b.n	2bfe0 <chan_tx_complete+0x28>
			func(conn, ud);
   2bfd6:	4641      	mov	r1, r8
   2bfd8:	4628      	mov	r0, r5
   2bfda:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   2bfdc:	3401      	adds	r4, #1
   2bfde:	b2a4      	uxth	r4, r4
   2bfe0:	42a7      	cmp	r7, r4
   2bfe2:	d8f8      	bhi.n	2bfd6 <chan_tx_complete+0x1e>
}
   2bfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bfe8 <bt_att_chan_send>:
{
   2bfe8:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   2bfea:	f7f0 fb23 	bl	1c634 <chan_send>
}
   2bfee:	bd08      	pop	{r3, pc}

0002bff0 <chan_req_send>:
{
   2bff0:	b570      	push	{r4, r5, r6, lr}
   2bff2:	4605      	mov	r5, r0
   2bff4:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2bff6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2bff8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2bffa:	2200      	movs	r2, #0
	while (buf) {
   2bffc:	e003      	b.n	2c006 <chan_req_send+0x16>
		bytes += buf->len;
   2bffe:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   2c002:	4462      	add	r2, ip
		buf = buf->frags;
   2c004:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c006:	2b00      	cmp	r3, #0
   2c008:	d1f9      	bne.n	2bffe <chan_req_send+0xe>
   2c00a:	4291      	cmp	r1, r2
   2c00c:	d30d      	bcc.n	2c02a <chan_req_send+0x3a>
	chan->req = req;
   2c00e:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
	buf = req->buf;
   2c012:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   2c014:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   2c016:	4631      	mov	r1, r6
   2c018:	4628      	mov	r0, r5
   2c01a:	f7ff ffe5 	bl	2bfe8 <bt_att_chan_send>
	if (err) {
   2c01e:	b118      	cbz	r0, 2c028 <chan_req_send+0x38>
		req->buf = buf;
   2c020:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   2c022:	2300      	movs	r3, #0
   2c024:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
}
   2c028:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2c02a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2c02e:	e7fb      	b.n	2c028 <chan_req_send+0x38>

0002c030 <bt_att_status>:
{
   2c030:	b570      	push	{r4, r5, r6, lr}
   2c032:	4604      	mov	r4, r0
   2c034:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2c036:	2100      	movs	r1, #0
   2c038:	f7ff ff9f 	bl	2bf7a <atomic_test_bit>
   2c03c:	b130      	cbz	r0, 2c04c <bt_att_status+0x1c>
   2c03e:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   2c040:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c044:	b113      	cbz	r3, 2c04c <bt_att_status+0x1c>
	if (chan->req) {
   2c046:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   2c04a:	b102      	cbz	r2, 2c04e <bt_att_status+0x1e>
}
   2c04c:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   2c04e:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2c050:	2d00      	cmp	r5, #0
   2c052:	d0fb      	beq.n	2c04c <bt_att_status+0x1c>
	return node->next;
   2c054:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2c056:	605a      	str	r2, [r3, #4]
	return list->tail;
   2c058:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c05a:	42a9      	cmp	r1, r5
   2c05c:	d00f      	beq.n	2c07e <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2c05e:	4629      	mov	r1, r5
   2c060:	4630      	mov	r0, r6
   2c062:	f7f0 fb57 	bl	1c714 <bt_att_chan_req_send>
   2c066:	2800      	cmp	r0, #0
   2c068:	daf0      	bge.n	2c04c <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   2c06a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   2c06e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2c070:	602a      	str	r2, [r5, #0]
	list->head = node;
   2c072:	605d      	str	r5, [r3, #4]
	return list->tail;
   2c074:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2c076:	2a00      	cmp	r2, #0
   2c078:	d1e8      	bne.n	2c04c <bt_att_status+0x1c>
	list->tail = node;
   2c07a:	609d      	str	r5, [r3, #8]
}
   2c07c:	e7e6      	b.n	2c04c <bt_att_status+0x1c>
	list->tail = node;
   2c07e:	609a      	str	r2, [r3, #8]
	if (!node) {
   2c080:	e7ed      	b.n	2c05e <bt_att_status+0x2e>

0002c082 <att_req_send_process>:
{
   2c082:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c086:	4607      	mov	r7, r0
	return list->head;
   2c088:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c08a:	b3ac      	cbz	r4, 2c0f8 <att_req_send_process+0x76>
   2c08c:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c08e:	f114 05f0 	adds.w	r5, r4, #240	; 0xf0
   2c092:	d003      	beq.n	2c09c <att_req_send_process+0x1a>
	return node->next;
   2c094:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   2c098:	b105      	cbz	r5, 2c09c <att_req_send_process+0x1a>
   2c09a:	3df0      	subs	r5, #240	; 0xf0
   2c09c:	f04f 0800 	mov.w	r8, #0
   2c0a0:	4646      	mov	r6, r8
   2c0a2:	e02e      	b.n	2c102 <att_req_send_process+0x80>
		if (!req && prev &&
   2c0a4:	b196      	cbz	r6, 2c0cc <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   2c0a6:	4621      	mov	r1, r4
   2c0a8:	1d38      	adds	r0, r7, #4
   2c0aa:	f7ff ff19 	bl	2bee0 <get_first_req_matching_chan>
		if (!req) {
   2c0ae:	4606      	mov	r6, r0
   2c0b0:	b300      	cbz	r0, 2c0f4 <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2c0b2:	4601      	mov	r1, r0
   2c0b4:	4620      	mov	r0, r4
   2c0b6:	f7f0 fb2d 	bl	1c714 <bt_att_chan_req_send>
   2c0ba:	2800      	cmp	r0, #0
   2c0bc:	da2e      	bge.n	2c11c <att_req_send_process+0x9a>
	return list->head;
   2c0be:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2c0c0:	6033      	str	r3, [r6, #0]
	list->head = node;
   2c0c2:	607e      	str	r6, [r7, #4]
	return list->tail;
   2c0c4:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   2c0c6:	b193      	cbz	r3, 2c0ee <att_req_send_process+0x6c>
		prev = chan;
   2c0c8:	46a0      	mov	r8, r4
   2c0ca:	e01f      	b.n	2c10c <att_req_send_process+0x8a>
		if (!req && prev &&
   2c0cc:	f1b8 0f00 	cmp.w	r8, #0
   2c0d0:	d0e9      	beq.n	2c0a6 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2c0d2:	2103      	movs	r1, #3
   2c0d4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2c0d8:	f7ff ff4f 	bl	2bf7a <atomic_test_bit>
   2c0dc:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2c0de:	2103      	movs	r1, #3
   2c0e0:	f108 0098 	add.w	r0, r8, #152	; 0x98
   2c0e4:	f7ff ff49 	bl	2bf7a <atomic_test_bit>
		if (!req && prev &&
   2c0e8:	4581      	cmp	r9, r0
   2c0ea:	d1dc      	bne.n	2c0a6 <att_req_send_process+0x24>
   2c0ec:	e00e      	b.n	2c10c <att_req_send_process+0x8a>
	list->tail = node;
   2c0ee:	60be      	str	r6, [r7, #8]
		prev = chan;
   2c0f0:	46a0      	mov	r8, r4
}
   2c0f2:	e00b      	b.n	2c10c <att_req_send_process+0x8a>
   2c0f4:	46a0      	mov	r8, r4
   2c0f6:	e009      	b.n	2c10c <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c0f8:	4625      	mov	r5, r4
   2c0fa:	e7cf      	b.n	2c09c <att_req_send_process+0x1a>
   2c0fc:	462b      	mov	r3, r5
   2c0fe:	462c      	mov	r4, r5
   2c100:	461d      	mov	r5, r3
   2c102:	b15c      	cbz	r4, 2c11c <att_req_send_process+0x9a>
		if (chan->req) {
   2c104:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   2c108:	2b00      	cmp	r3, #0
   2c10a:	d0cb      	beq.n	2c0a4 <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c10c:	2d00      	cmp	r5, #0
   2c10e:	d0f5      	beq.n	2c0fc <att_req_send_process+0x7a>
	return node->next;
   2c110:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   2c114:	2b00      	cmp	r3, #0
   2c116:	d0f2      	beq.n	2c0fe <att_req_send_process+0x7c>
   2c118:	3bf0      	subs	r3, #240	; 0xf0
   2c11a:	e7f0      	b.n	2c0fe <att_req_send_process+0x7c>
}
   2c11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c120 <chan_req_sent>:
{
   2c120:	b510      	push	{r4, lr}
   2c122:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   2c124:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   2c126:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2c12a:	b12b      	cbz	r3, 2c138 <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2c12c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c130:	2300      	movs	r3, #0
   2c132:	30c0      	adds	r0, #192	; 0xc0
   2c134:	f7fa fa0a 	bl	2654c <k_work_reschedule>
	tx_meta_data_free(user_data);
   2c138:	4620      	mov	r0, r4
   2c13a:	f7f0 fa5b 	bl	1c5f4 <tx_meta_data_free>
}
   2c13e:	bd10      	pop	{r4, pc}

0002c140 <chan_cfm_sent>:
{
   2c140:	b508      	push	{r3, lr}
   2c142:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2c144:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2c146:	3398      	adds	r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c148:	e8d3 1fef 	ldaex	r1, [r3]
   2c14c:	f021 0102 	bic.w	r1, r1, #2
   2c150:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2c154:	2a00      	cmp	r2, #0
   2c156:	d1f7      	bne.n	2c148 <chan_cfm_sent+0x8>
	tx_meta_data_free(data);
   2c158:	f7f0 fa4c 	bl	1c5f4 <tx_meta_data_free>
}
   2c15c:	bd08      	pop	{r3, pc}

0002c15e <chan_rsp_sent>:
{
   2c15e:	b508      	push	{r3, lr}
   2c160:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2c162:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2c164:	3398      	adds	r3, #152	; 0x98
   2c166:	e8d3 1fef 	ldaex	r1, [r3]
   2c16a:	f021 0101 	bic.w	r1, r1, #1
   2c16e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2c172:	2a00      	cmp	r2, #0
   2c174:	d1f7      	bne.n	2c166 <chan_rsp_sent+0x8>
	tx_meta_data_free(data);
   2c176:	f7f0 fa3d 	bl	1c5f4 <tx_meta_data_free>
}
   2c17a:	bd08      	pop	{r3, pc}

0002c17c <get_first_buf_matching_chan>:
{
   2c17c:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2c17e:	2200      	movs	r2, #0
   2c180:	2300      	movs	r3, #0
   2c182:	f7f3 f809 	bl	1f198 <net_buf_get>
}
   2c186:	bd08      	pop	{r3, pc}

0002c188 <process_queue>:
{
   2c188:	b570      	push	{r4, r5, r6, lr}
   2c18a:	4604      	mov	r4, r0
   2c18c:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   2c18e:	4601      	mov	r1, r0
   2c190:	4628      	mov	r0, r5
   2c192:	f7ff fff3 	bl	2c17c <get_first_buf_matching_chan>
	if (buf) {
   2c196:	b168      	cbz	r0, 2c1b4 <process_queue+0x2c>
   2c198:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   2c19a:	4601      	mov	r1, r0
   2c19c:	4620      	mov	r0, r4
   2c19e:	f7ff ff23 	bl	2bfe8 <bt_att_chan_send>
		if (err) {
   2c1a2:	4604      	mov	r4, r0
   2c1a4:	b908      	cbnz	r0, 2c1aa <process_queue+0x22>
}
   2c1a6:	4620      	mov	r0, r4
   2c1a8:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2c1aa:	4631      	mov	r1, r6
   2c1ac:	4628      	mov	r0, r5
   2c1ae:	f002 fec4 	bl	2ef3a <k_queue_prepend>
			return err;
   2c1b2:	e7f8      	b.n	2c1a6 <process_queue+0x1e>
	return -ENOENT;
   2c1b4:	f06f 0401 	mvn.w	r4, #1
   2c1b8:	e7f5      	b.n	2c1a6 <process_queue+0x1e>

0002c1ba <bt_att_sent>:
{
   2c1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c1bc:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2c1be:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   2c1c0:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2c1c4:	f100 0394 	add.w	r3, r0, #148	; 0x94
   2c1c8:	e8d3 1fef 	ldaex	r1, [r3]
   2c1cc:	f021 0110 	bic.w	r1, r1, #16
   2c1d0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2c1d4:	2a00      	cmp	r2, #0
   2c1d6:	d1f7      	bne.n	2c1c8 <bt_att_sent+0xe>
	if (!att) {
   2c1d8:	b145      	cbz	r5, 2c1ec <bt_att_sent+0x32>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2c1da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2c1de:	b133      	cbz	r3, 2c1ee <bt_att_sent+0x34>
	err = process_queue(chan, &chan->tx_queue);
   2c1e0:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   2c1e4:	4630      	mov	r0, r6
   2c1e6:	f7ff ffcf 	bl	2c188 <process_queue>
	if (!err) {
   2c1ea:	b9c0      	cbnz	r0, 2c21e <bt_att_sent+0x64>
}
   2c1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2c1ee:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2c1f0:	2f00      	cmp	r7, #0
   2c1f2:	d0f5      	beq.n	2c1e0 <bt_att_sent+0x26>
	return node->next;
   2c1f4:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2c1f6:	606b      	str	r3, [r5, #4]
	return list->tail;
   2c1f8:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c1fa:	42ba      	cmp	r2, r7
   2c1fc:	d00d      	beq.n	2c21a <bt_att_sent+0x60>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2c1fe:	4639      	mov	r1, r7
   2c200:	4630      	mov	r0, r6
   2c202:	f7ff fef5 	bl	2bff0 <chan_req_send>
   2c206:	2800      	cmp	r0, #0
   2c208:	daf0      	bge.n	2c1ec <bt_att_sent+0x32>
	return list->head;
   2c20a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2c20c:	603b      	str	r3, [r7, #0]
	list->head = node;
   2c20e:	606f      	str	r7, [r5, #4]
	return list->tail;
   2c210:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2c212:	2b00      	cmp	r3, #0
   2c214:	d1e4      	bne.n	2c1e0 <bt_att_sent+0x26>
	list->tail = node;
   2c216:	60af      	str	r7, [r5, #8]
}
   2c218:	e7e2      	b.n	2c1e0 <bt_att_sent+0x26>
	list->tail = node;
   2c21a:	60ab      	str	r3, [r5, #8]
}
   2c21c:	e7ef      	b.n	2c1fe <bt_att_sent+0x44>
	(void)process_queue(chan, &att->tx_queue);
   2c21e:	f105 010c 	add.w	r1, r5, #12
   2c222:	4630      	mov	r0, r6
   2c224:	f7ff ffb0 	bl	2c188 <process_queue>
   2c228:	e7e0      	b.n	2c1ec <bt_att_sent+0x32>

0002c22a <att_send_process>:
{
   2c22a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c22e:	4680      	mov	r8, r0
	return list->head;
   2c230:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c232:	b374      	cbz	r4, 2c292 <att_send_process+0x68>
   2c234:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c236:	f114 05f0 	adds.w	r5, r4, #240	; 0xf0
   2c23a:	d003      	beq.n	2c244 <att_send_process+0x1a>
	return node->next;
   2c23c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   2c240:	b105      	cbz	r5, 2c244 <att_send_process+0x1a>
   2c242:	3df0      	subs	r5, #240	; 0xf0
   2c244:	2600      	movs	r6, #0
   2c246:	4637      	mov	r7, r6
   2c248:	e00e      	b.n	2c268 <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   2c24a:	f108 010c 	add.w	r1, r8, #12
   2c24e:	4620      	mov	r0, r4
   2c250:	f7ff ff9a 	bl	2c188 <process_queue>
		if (!err) {
   2c254:	4606      	mov	r6, r0
   2c256:	b300      	cbz	r0, 2c29a <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c258:	b1ed      	cbz	r5, 2c296 <att_send_process+0x6c>
   2c25a:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   2c25e:	b103      	cbz	r3, 2c262 <att_send_process+0x38>
   2c260:	3bf0      	subs	r3, #240	; 0xf0
   2c262:	4627      	mov	r7, r4
   2c264:	462c      	mov	r4, r5
   2c266:	461d      	mov	r5, r3
   2c268:	b1bc      	cbz	r4, 2c29a <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   2c26a:	f116 0f02 	cmn.w	r6, #2
   2c26e:	d1ec      	bne.n	2c24a <att_send_process+0x20>
   2c270:	2f00      	cmp	r7, #0
   2c272:	d0ea      	beq.n	2c24a <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2c274:	2103      	movs	r1, #3
   2c276:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2c27a:	f7ff fe7e 	bl	2bf7a <atomic_test_bit>
   2c27e:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2c280:	2103      	movs	r1, #3
   2c282:	f107 0098 	add.w	r0, r7, #152	; 0x98
   2c286:	f7ff fe78 	bl	2bf7a <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2c28a:	4581      	cmp	r9, r0
   2c28c:	d1dd      	bne.n	2c24a <att_send_process+0x20>
   2c28e:	463c      	mov	r4, r7
   2c290:	e7e2      	b.n	2c258 <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c292:	4625      	mov	r5, r4
   2c294:	e7d6      	b.n	2c244 <att_send_process+0x1a>
   2c296:	462b      	mov	r3, r5
   2c298:	e7e3      	b.n	2c262 <att_send_process+0x38>
}
   2c29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c29e <write_cb>:
{
   2c29e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2a0:	b083      	sub	sp, #12
   2c2a2:	4606      	mov	r6, r0
   2c2a4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c2a6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2c2aa:	4601      	mov	r1, r0
   2c2ac:	6820      	ldr	r0, [r4, #0]
   2c2ae:	f000 fee3 	bl	2d078 <bt_gatt_check_perm>
   2c2b2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2c2b4:	bb08      	cbnz	r0, 2c2fa <write_cb+0x5c>
   2c2b6:	4605      	mov	r5, r0
	if (!data->req) {
   2c2b8:	7a23      	ldrb	r3, [r4, #8]
   2c2ba:	b11b      	cbz	r3, 2c2c4 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2c2bc:	2b18      	cmp	r3, #24
   2c2be:	d016      	beq.n	2c2ee <write_cb+0x50>
	uint8_t flags = 0U;
   2c2c0:	4603      	mov	r3, r0
   2c2c2:	e000      	b.n	2c2c6 <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2c2c4:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2c2c6:	68b7      	ldr	r7, [r6, #8]
   2c2c8:	9301      	str	r3, [sp, #4]
   2c2ca:	8a63      	ldrh	r3, [r4, #18]
   2c2cc:	9300      	str	r3, [sp, #0]
   2c2ce:	8a23      	ldrh	r3, [r4, #16]
   2c2d0:	68e2      	ldr	r2, [r4, #12]
   2c2d2:	4631      	mov	r1, r6
   2c2d4:	6820      	ldr	r0, [r4, #0]
   2c2d6:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2c2d8:	2800      	cmp	r0, #0
   2c2da:	db02      	blt.n	2c2e2 <write_cb+0x44>
   2c2dc:	8a23      	ldrh	r3, [r4, #16]
   2c2de:	4298      	cmp	r0, r3
   2c2e0:	d007      	beq.n	2c2f2 <write_cb+0x54>
		data->err = err_to_att(write);
   2c2e2:	f7ff fe17 	bl	2bf14 <err_to_att>
   2c2e6:	7520      	strb	r0, [r4, #20]
}
   2c2e8:	4628      	mov	r0, r5
   2c2ea:	b003      	add	sp, #12
   2c2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2c2ee:	2304      	movs	r3, #4
   2c2f0:	e7e9      	b.n	2c2c6 <write_cb+0x28>
	data->err = 0U;
   2c2f2:	2300      	movs	r3, #0
   2c2f4:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2c2f6:	2501      	movs	r5, #1
   2c2f8:	e7f6      	b.n	2c2e8 <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   2c2fa:	2500      	movs	r5, #0
   2c2fc:	e7f4      	b.n	2c2e8 <write_cb+0x4a>

0002c2fe <bt_att_chan_send_rsp>:
{
   2c2fe:	b538      	push	{r3, r4, r5, lr}
   2c300:	4604      	mov	r4, r0
   2c302:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2c304:	f7f0 f996 	bl	1c634 <chan_send>
	if (err) {
   2c308:	b900      	cbnz	r0, 2c30c <bt_att_chan_send_rsp+0xe>
}
   2c30a:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2c30c:	4629      	mov	r1, r5
   2c30e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   2c312:	f7f3 f8a5 	bl	1f460 <net_buf_put>
}
   2c316:	e7f8      	b.n	2c30a <bt_att_chan_send_rsp+0xc>

0002c318 <att_chan_read>:
{
   2c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c31c:	b085      	sub	sp, #20
   2c31e:	4680      	mov	r8, r0
   2c320:	4689      	mov	r9, r1
   2c322:	9202      	str	r2, [sp, #8]
   2c324:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2c326:	6843      	ldr	r3, [r0, #4]
   2c328:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2c32a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   2c32c:	4613      	mov	r3, r2
	size_t bytes = 0;
   2c32e:	2200      	movs	r2, #0
	while (buf) {
   2c330:	e002      	b.n	2c338 <att_chan_read+0x20>
		bytes += buf->len;
   2c332:	8999      	ldrh	r1, [r3, #12]
   2c334:	440a      	add	r2, r1
		buf = buf->frags;
   2c336:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c338:	2b00      	cmp	r3, #0
   2c33a:	d1fa      	bne.n	2c332 <att_chan_read+0x1a>
   2c33c:	4290      	cmp	r0, r2
   2c33e:	d804      	bhi.n	2c34a <att_chan_read+0x32>
		return 0;
   2c340:	2400      	movs	r4, #0
}
   2c342:	4620      	mov	r0, r4
   2c344:	b005      	add	sp, #20
   2c346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2c34a:	9802      	ldr	r0, [sp, #8]
   2c34c:	f7f3 f90a 	bl	1f564 <net_buf_frag_last>
   2c350:	4607      	mov	r7, r0
	size_t len, total = 0;
   2c352:	f04f 0a00 	mov.w	sl, #0
   2c356:	e082      	b.n	2c45e <att_chan_read+0x146>
		bytes += buf->len;
   2c358:	8999      	ldrh	r1, [r3, #12]
   2c35a:	440a      	add	r2, r1
		buf = buf->frags;
   2c35c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c35e:	2b00      	cmp	r3, #0
   2c360:	d1fa      	bne.n	2c358 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c362:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2c364:	f107 0608 	add.w	r6, r7, #8
   2c368:	4630      	mov	r0, r6
   2c36a:	f000 ffb4 	bl	2d2d6 <net_buf_simple_tailroom>
   2c36e:	4284      	cmp	r4, r0
   2c370:	d326      	bcc.n	2c3c0 <att_chan_read+0xa8>
   2c372:	4630      	mov	r0, r6
   2c374:	f000 ffaf 	bl	2d2d6 <net_buf_simple_tailroom>
   2c378:	4606      	mov	r6, r0
		if (!len) {
   2c37a:	b36e      	cbz	r6, 2c3d8 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2c37c:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2c380:	68b9      	ldr	r1, [r7, #8]
   2c382:	89ba      	ldrh	r2, [r7, #12]
   2c384:	9500      	str	r5, [sp, #0]
   2c386:	b2b3      	uxth	r3, r6
   2c388:	440a      	add	r2, r1
   2c38a:	4649      	mov	r1, r9
   2c38c:	9803      	ldr	r0, [sp, #12]
   2c38e:	47a0      	blx	r4
		if (read < 0) {
   2c390:	1e04      	subs	r4, r0, #0
   2c392:	db55      	blt.n	2c440 <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   2c394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c396:	b12b      	cbz	r3, 2c3a4 <att_chan_read+0x8c>
   2c398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c39a:	4621      	mov	r1, r4
   2c39c:	4638      	mov	r0, r7
   2c39e:	4798      	blx	r3
   2c3a0:	2800      	cmp	r0, #0
   2c3a2:	d061      	beq.n	2c468 <att_chan_read+0x150>
		net_buf_add(frag, read);
   2c3a4:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2c3a6:	4621      	mov	r1, r4
   2c3a8:	f107 0008 	add.w	r0, r7, #8
   2c3ac:	f7f3 f9a8 	bl	1f700 <net_buf_simple_add>
		total += read;
   2c3b0:	44a2      	add	sl, r4
		offset += read;
   2c3b2:	442c      	add	r4, r5
   2c3b4:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c3b6:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   2c3ba:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2c3bc:	2200      	movs	r2, #0
   2c3be:	e048      	b.n	2c452 <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c3c0:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   2c3c4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2c3c6:	2200      	movs	r2, #0
	while (buf) {
   2c3c8:	e002      	b.n	2c3d0 <att_chan_read+0xb8>
		bytes += buf->len;
   2c3ca:	8999      	ldrh	r1, [r3, #12]
   2c3cc:	440a      	add	r2, r1
		buf = buf->frags;
   2c3ce:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c3d0:	2b00      	cmp	r3, #0
   2c3d2:	d1fa      	bne.n	2c3ca <att_chan_read+0xb2>
   2c3d4:	1ab6      	subs	r6, r6, r2
   2c3d6:	e7d0      	b.n	2c37a <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2c3d8:	9b02      	ldr	r3, [sp, #8]
   2c3da:	7998      	ldrb	r0, [r3, #6]
   2c3dc:	f7f2 fda8 	bl	1ef30 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2c3e0:	2200      	movs	r2, #0
   2c3e2:	2300      	movs	r3, #0
   2c3e4:	f000 ff5d 	bl	2d2a2 <net_buf_alloc_fixed>
			if (!frag) {
   2c3e8:	4607      	mov	r7, r0
   2c3ea:	b150      	cbz	r0, 2c402 <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   2c3ec:	4601      	mov	r1, r0
   2c3ee:	f8dd b008 	ldr.w	fp, [sp, #8]
   2c3f2:	4658      	mov	r0, fp
   2c3f4:	f7f3 f902 	bl	1f5fc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c3f8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   2c3fc:	4632      	mov	r2, r6
	while (buf) {
   2c3fe:	465b      	mov	r3, fp
   2c400:	e004      	b.n	2c40c <att_chan_read+0xf4>
				return total;
   2c402:	4654      	mov	r4, sl
   2c404:	e79d      	b.n	2c342 <att_chan_read+0x2a>
		bytes += buf->len;
   2c406:	8999      	ldrh	r1, [r3, #12]
   2c408:	440a      	add	r2, r1
		buf = buf->frags;
   2c40a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c40c:	2b00      	cmp	r3, #0
   2c40e:	d1fa      	bne.n	2c406 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c410:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2c412:	f107 0b08 	add.w	fp, r7, #8
   2c416:	4658      	mov	r0, fp
   2c418:	f000 ff5d 	bl	2d2d6 <net_buf_simple_tailroom>
   2c41c:	4284      	cmp	r4, r0
   2c41e:	d304      	bcc.n	2c42a <att_chan_read+0x112>
   2c420:	4658      	mov	r0, fp
   2c422:	f000 ff58 	bl	2d2d6 <net_buf_simple_tailroom>
   2c426:	4606      	mov	r6, r0
   2c428:	e7a8      	b.n	2c37c <att_chan_read+0x64>
   2c42a:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   2c42e:	9b02      	ldr	r3, [sp, #8]
   2c430:	e002      	b.n	2c438 <att_chan_read+0x120>
		bytes += buf->len;
   2c432:	899a      	ldrh	r2, [r3, #12]
   2c434:	4416      	add	r6, r2
		buf = buf->frags;
   2c436:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c438:	2b00      	cmp	r3, #0
   2c43a:	d1fa      	bne.n	2c432 <att_chan_read+0x11a>
   2c43c:	1b8e      	subs	r6, r1, r6
   2c43e:	e79d      	b.n	2c37c <att_chan_read+0x64>
			if (total) {
   2c440:	f1ba 0f00 	cmp.w	sl, #0
   2c444:	f43f af7d 	beq.w	2c342 <att_chan_read+0x2a>
				return total;
   2c448:	4654      	mov	r4, sl
   2c44a:	e77a      	b.n	2c342 <att_chan_read+0x2a>
		bytes += buf->len;
   2c44c:	8999      	ldrh	r1, [r3, #12]
   2c44e:	440a      	add	r2, r1
		buf = buf->frags;
   2c450:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2c452:	2b00      	cmp	r3, #0
   2c454:	d1fa      	bne.n	2c44c <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c456:	4290      	cmp	r0, r2
   2c458:	d906      	bls.n	2c468 <att_chan_read+0x150>
   2c45a:	45b3      	cmp	fp, r6
   2c45c:	d104      	bne.n	2c468 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c45e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2c462:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2c464:	2200      	movs	r2, #0
	while (buf) {
   2c466:	e77a      	b.n	2c35e <att_chan_read+0x46>
	return total;
   2c468:	4654      	mov	r4, sl
   2c46a:	e76a      	b.n	2c342 <att_chan_read+0x2a>

0002c46c <read_vl_cb>:
{
   2c46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c470:	b082      	sub	sp, #8
   2c472:	4606      	mov	r6, r0
   2c474:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c476:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2c478:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2c47a:	2300      	movs	r3, #0
   2c47c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c47e:	2295      	movs	r2, #149	; 0x95
   2c480:	4631      	mov	r1, r6
   2c482:	f000 fdf9 	bl	2d078 <bt_gatt_check_perm>
   2c486:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2c488:	b9f0      	cbnz	r0, 2c4c8 <read_vl_cb+0x5c>
   2c48a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2c48c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2c48e:	68a0      	ldr	r0, [r4, #8]
   2c490:	8982      	ldrh	r2, [r0, #12]
   2c492:	1a9b      	subs	r3, r3, r2
   2c494:	2b01      	cmp	r3, #1
   2c496:	dd18      	ble.n	2c4ca <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2c498:	2102      	movs	r1, #2
   2c49a:	3008      	adds	r0, #8
   2c49c:	f7f3 f930 	bl	1f700 <net_buf_simple_add>
   2c4a0:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2c4a2:	2300      	movs	r3, #0
   2c4a4:	9301      	str	r3, [sp, #4]
   2c4a6:	9300      	str	r3, [sp, #0]
   2c4a8:	88a3      	ldrh	r3, [r4, #4]
   2c4aa:	68a2      	ldr	r2, [r4, #8]
   2c4ac:	4631      	mov	r1, r6
   2c4ae:	4638      	mov	r0, r7
   2c4b0:	f7ff ff32 	bl	2c318 <att_chan_read>
	if (read < 0) {
   2c4b4:	2800      	cmp	r0, #0
   2c4b6:	db03      	blt.n	2c4c0 <read_vl_cb+0x54>
	rsp->len = read;
   2c4b8:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   2c4bc:	2501      	movs	r5, #1
   2c4be:	e004      	b.n	2c4ca <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   2c4c0:	f7ff fd28 	bl	2bf14 <err_to_att>
   2c4c4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2c4c6:	e000      	b.n	2c4ca <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2c4c8:	2500      	movs	r5, #0
}
   2c4ca:	4628      	mov	r0, r5
   2c4cc:	b002      	add	sp, #8
   2c4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c4d2 <read_cb>:
{
   2c4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c4d4:	b083      	sub	sp, #12
   2c4d6:	4606      	mov	r6, r0
   2c4d8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c4da:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2c4dc:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2c4de:	2300      	movs	r3, #0
   2c4e0:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c4e2:	2295      	movs	r2, #149	; 0x95
   2c4e4:	4631      	mov	r1, r6
   2c4e6:	f000 fdc7 	bl	2d078 <bt_gatt_check_perm>
   2c4ea:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2c4ec:	b118      	cbz	r0, 2c4f6 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2c4ee:	2500      	movs	r5, #0
}
   2c4f0:	4628      	mov	r0, r5
   2c4f2:	b003      	add	sp, #12
   2c4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c4f6:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2c4f8:	2300      	movs	r3, #0
   2c4fa:	9301      	str	r3, [sp, #4]
   2c4fc:	9300      	str	r3, [sp, #0]
   2c4fe:	88a3      	ldrh	r3, [r4, #4]
   2c500:	68a2      	ldr	r2, [r4, #8]
   2c502:	4631      	mov	r1, r6
   2c504:	4638      	mov	r0, r7
   2c506:	f7ff ff07 	bl	2c318 <att_chan_read>
	if (ret < 0) {
   2c50a:	2800      	cmp	r0, #0
   2c50c:	db01      	blt.n	2c512 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2c50e:	2501      	movs	r5, #1
   2c510:	e7ee      	b.n	2c4f0 <read_cb+0x1e>
		data->err = err_to_att(ret);
   2c512:	f7ff fcff 	bl	2bf14 <err_to_att>
   2c516:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2c518:	e7ea      	b.n	2c4f0 <read_cb+0x1e>

0002c51a <find_info_cb>:
{
   2c51a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c51e:	4606      	mov	r6, r0
   2c520:	460f      	mov	r7, r1
   2c522:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c524:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2c528:	6893      	ldr	r3, [r2, #8]
   2c52a:	b14b      	cbz	r3, 2c540 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2c52c:	68a3      	ldr	r3, [r4, #8]
   2c52e:	781d      	ldrb	r5, [r3, #0]
   2c530:	2d01      	cmp	r5, #1
   2c532:	d013      	beq.n	2c55c <find_info_cb+0x42>
   2c534:	2d02      	cmp	r5, #2
   2c536:	d02d      	beq.n	2c594 <find_info_cb+0x7a>
   2c538:	2500      	movs	r5, #0
}
   2c53a:	4628      	mov	r0, r5
   2c53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c540:	6850      	ldr	r0, [r2, #4]
   2c542:	2101      	movs	r1, #1
   2c544:	3008      	adds	r0, #8
   2c546:	f7f3 f8db 	bl	1f700 <net_buf_simple_add>
   2c54a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c54c:	6833      	ldr	r3, [r6, #0]
   2c54e:	781b      	ldrb	r3, [r3, #0]
   2c550:	b913      	cbnz	r3, 2c558 <find_info_cb+0x3e>
   2c552:	2301      	movs	r3, #1
   2c554:	7003      	strb	r3, [r0, #0]
   2c556:	e7e9      	b.n	2c52c <find_info_cb+0x12>
   2c558:	2302      	movs	r3, #2
   2c55a:	e7fb      	b.n	2c554 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c55c:	6833      	ldr	r3, [r6, #0]
   2c55e:	f893 9000 	ldrb.w	r9, [r3]
   2c562:	f1b9 0f00 	cmp.w	r9, #0
   2c566:	d001      	beq.n	2c56c <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2c568:	2500      	movs	r5, #0
   2c56a:	e7e6      	b.n	2c53a <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2c56c:	6860      	ldr	r0, [r4, #4]
   2c56e:	2104      	movs	r1, #4
   2c570:	3008      	adds	r0, #8
   2c572:	f7f3 f8c5 	bl	1f700 <net_buf_simple_add>
   2c576:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2c578:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2c57a:	6832      	ldr	r2, [r6, #0]
   2c57c:	68e3      	ldr	r3, [r4, #12]
   2c57e:	8852      	ldrh	r2, [r2, #2]
   2c580:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2c582:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2c586:	6862      	ldr	r2, [r4, #4]
   2c588:	8992      	ldrh	r2, [r2, #12]
   2c58a:	1a9b      	subs	r3, r3, r2
   2c58c:	2b04      	cmp	r3, #4
   2c58e:	d8d4      	bhi.n	2c53a <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2c590:	464d      	mov	r5, r9
   2c592:	e7d2      	b.n	2c53a <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2c594:	6833      	ldr	r3, [r6, #0]
   2c596:	781b      	ldrb	r3, [r3, #0]
   2c598:	2b02      	cmp	r3, #2
   2c59a:	d001      	beq.n	2c5a0 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2c59c:	2500      	movs	r5, #0
   2c59e:	e7cc      	b.n	2c53a <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2c5a0:	6860      	ldr	r0, [r4, #4]
   2c5a2:	2112      	movs	r1, #18
   2c5a4:	3008      	adds	r0, #8
   2c5a6:	f7f3 f8ab 	bl	1f700 <net_buf_simple_add>
   2c5aa:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2c5ac:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2c5ae:	68e0      	ldr	r0, [r4, #12]
   2c5b0:	6831      	ldr	r1, [r6, #0]
   2c5b2:	2210      	movs	r2, #16
   2c5b4:	3101      	adds	r1, #1
   2c5b6:	3002      	adds	r0, #2
   2c5b8:	f7fe fdbe 	bl	2b138 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2c5bc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2c5c0:	6862      	ldr	r2, [r4, #4]
   2c5c2:	8992      	ldrh	r2, [r2, #12]
   2c5c4:	1a9b      	subs	r3, r3, r2
   2c5c6:	2b12      	cmp	r3, #18
   2c5c8:	d801      	bhi.n	2c5ce <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2c5ca:	2500      	movs	r5, #0
   2c5cc:	e7b5      	b.n	2c53a <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2c5ce:	2501      	movs	r5, #1
   2c5d0:	e7b3      	b.n	2c53a <find_info_cb+0x20>

0002c5d2 <att_chan_mtu_updated>:
{
   2c5d2:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2c5d4:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2c5d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c5d8:	b153      	cbz	r3, 2c5f0 <att_chan_mtu_updated+0x1e>
   2c5da:	3bf0      	subs	r3, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c5dc:	f113 04f0 	adds.w	r4, r3, #240	; 0xf0
   2c5e0:	d003      	beq.n	2c5ea <att_chan_mtu_updated+0x18>
	return node->next;
   2c5e2:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
   2c5e6:	b104      	cbz	r4, 2c5ea <att_chan_mtu_updated+0x18>
   2c5e8:	3cf0      	subs	r4, #240	; 0xf0
   2c5ea:	2200      	movs	r2, #0
   2c5ec:	4611      	mov	r1, r2
   2c5ee:	e004      	b.n	2c5fa <att_chan_mtu_updated+0x28>
   2c5f0:	461c      	mov	r4, r3
   2c5f2:	e7fa      	b.n	2c5ea <att_chan_mtu_updated+0x18>
   2c5f4:	4625      	mov	r5, r4
   2c5f6:	4623      	mov	r3, r4
   2c5f8:	462c      	mov	r4, r5
   2c5fa:	b18b      	cbz	r3, 2c620 <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   2c5fc:	4283      	cmp	r3, r0
   2c5fe:	d007      	beq.n	2c610 <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c600:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   2c602:	42a9      	cmp	r1, r5
   2c604:	bf38      	it	cc
   2c606:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c608:	8b5b      	ldrh	r3, [r3, #26]
   2c60a:	429a      	cmp	r2, r3
   2c60c:	bf38      	it	cc
   2c60e:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c610:	2c00      	cmp	r4, #0
   2c612:	d0ef      	beq.n	2c5f4 <att_chan_mtu_updated+0x22>
   2c614:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   2c618:	2d00      	cmp	r5, #0
   2c61a:	d0ec      	beq.n	2c5f6 <att_chan_mtu_updated+0x24>
   2c61c:	3df0      	subs	r5, #240	; 0xf0
   2c61e:	e7ea      	b.n	2c5f6 <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c620:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2c622:	428b      	cmp	r3, r1
   2c624:	d802      	bhi.n	2c62c <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c626:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c628:	4294      	cmp	r4, r2
   2c62a:	d909      	bls.n	2c640 <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2c62c:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c62e:	4282      	cmp	r2, r0
   2c630:	bf38      	it	cc
   2c632:	4602      	movcc	r2, r0
   2c634:	4299      	cmp	r1, r3
   2c636:	bf38      	it	cc
   2c638:	4619      	movcc	r1, r3
   2c63a:	6830      	ldr	r0, [r6, #0]
   2c63c:	f7f2 fbda 	bl	1edf4 <bt_gatt_att_max_mtu_changed>
}
   2c640:	bd70      	pop	{r4, r5, r6, pc}

0002c642 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c642:	f001 021f 	and.w	r2, r1, #31
   2c646:	2301      	movs	r3, #1
   2c648:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2c64a:	0949      	lsrs	r1, r1, #5
   2c64c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c650:	e8d0 2fef 	ldaex	r2, [r0]
   2c654:	ea42 0103 	orr.w	r1, r2, r3
   2c658:	e8c0 1fec 	stlex	ip, r1, [r0]
   2c65c:	f1bc 0f00 	cmp.w	ip, #0
   2c660:	d1f6      	bne.n	2c650 <atomic_test_and_set_bit+0xe>
	return (old & mask) != 0;
   2c662:	4213      	tst	r3, r2
}
   2c664:	bf14      	ite	ne
   2c666:	2001      	movne	r0, #1
   2c668:	2000      	moveq	r0, #0
   2c66a:	4770      	bx	lr

0002c66c <att_sent>:
{
   2c66c:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   2c66e:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   2c670:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   2c672:	689b      	ldr	r3, [r3, #8]
   2c674:	699b      	ldr	r3, [r3, #24]
   2c676:	b103      	cbz	r3, 2c67a <att_sent+0xe>
		chan->ops->sent(chan);
   2c678:	4798      	blx	r3
}
   2c67a:	bd08      	pop	{r3, pc}

0002c67c <att_tx_complete>:
{
   2c67c:	b570      	push	{r4, r5, r6, lr}
   2c67e:	4604      	mov	r4, r0
   2c680:	460d      	mov	r5, r1
	if (!err) {
   2c682:	4616      	mov	r6, r2
   2c684:	b12a      	cbz	r2, 2c692 <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   2c686:	4632      	mov	r2, r6
   2c688:	4629      	mov	r1, r5
   2c68a:	4620      	mov	r0, r4
   2c68c:	f7ff fc94 	bl	2bfb8 <chan_tx_complete>
}
   2c690:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2c692:	f7ff ffeb 	bl	2c66c <att_sent>
   2c696:	e7f6      	b.n	2c686 <att_tx_complete+0xa>

0002c698 <att_req_sent>:
{
   2c698:	b570      	push	{r4, r5, r6, lr}
   2c69a:	4604      	mov	r4, r0
   2c69c:	460d      	mov	r5, r1
	if (!err) {
   2c69e:	4616      	mov	r6, r2
   2c6a0:	b12a      	cbz	r2, 2c6ae <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   2c6a2:	4632      	mov	r2, r6
   2c6a4:	4629      	mov	r1, r5
   2c6a6:	4620      	mov	r0, r4
   2c6a8:	f7ff fd3a 	bl	2c120 <chan_req_sent>
}
   2c6ac:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2c6ae:	f7ff ffdd 	bl	2c66c <att_sent>
   2c6b2:	e7f6      	b.n	2c6a2 <att_req_sent+0xa>

0002c6b4 <att_cfm_sent>:
{
   2c6b4:	b570      	push	{r4, r5, r6, lr}
   2c6b6:	4604      	mov	r4, r0
   2c6b8:	460d      	mov	r5, r1
	if (!err) {
   2c6ba:	4616      	mov	r6, r2
   2c6bc:	b12a      	cbz	r2, 2c6ca <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   2c6be:	4632      	mov	r2, r6
   2c6c0:	4629      	mov	r1, r5
   2c6c2:	4620      	mov	r0, r4
   2c6c4:	f7ff fd3c 	bl	2c140 <chan_cfm_sent>
}
   2c6c8:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2c6ca:	f7ff ffcf 	bl	2c66c <att_sent>
   2c6ce:	e7f6      	b.n	2c6be <att_cfm_sent+0xa>

0002c6d0 <att_rsp_sent>:
{
   2c6d0:	b570      	push	{r4, r5, r6, lr}
   2c6d2:	4604      	mov	r4, r0
   2c6d4:	460d      	mov	r5, r1
	if (!err) {
   2c6d6:	4616      	mov	r6, r2
   2c6d8:	b12a      	cbz	r2, 2c6e6 <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   2c6da:	4632      	mov	r2, r6
   2c6dc:	4629      	mov	r1, r5
   2c6de:	4620      	mov	r0, r4
   2c6e0:	f7ff fd3d 	bl	2c15e <chan_rsp_sent>
}
   2c6e4:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2c6e6:	f7ff ffc1 	bl	2c66c <att_sent>
   2c6ea:	e7f6      	b.n	2c6da <att_rsp_sent+0xa>

0002c6ec <send_err_rsp>:
	if (!req) {
   2c6ec:	b901      	cbnz	r1, 2c6f0 <send_err_rsp+0x4>
   2c6ee:	4770      	bx	lr
{
   2c6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c6f4:	4606      	mov	r6, r0
   2c6f6:	4615      	mov	r5, r2
   2c6f8:	461c      	mov	r4, r3
   2c6fa:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2c6fc:	2204      	movs	r2, #4
   2c6fe:	2101      	movs	r1, #1
   2c700:	f7f0 fa60 	bl	1cbc4 <bt_att_chan_create_pdu>
	if (!buf) {
   2c704:	4680      	mov	r8, r0
   2c706:	b158      	cbz	r0, 2c720 <send_err_rsp+0x34>
   2c708:	2104      	movs	r1, #4
   2c70a:	3008      	adds	r0, #8
   2c70c:	f7f2 fff8 	bl	1f700 <net_buf_simple_add>
	rsp->request = req;
   2c710:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   2c712:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   2c716:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2c718:	4641      	mov	r1, r8
   2c71a:	4630      	mov	r0, r6
   2c71c:	f7ff fdef 	bl	2c2fe <bt_att_chan_send_rsp>
}
   2c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c724 <att_write_cmd>:
{
   2c724:	b530      	push	{r4, r5, lr}
   2c726:	b085      	sub	sp, #20
   2c728:	4605      	mov	r5, r0
   2c72a:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2c72c:	f101 0008 	add.w	r0, r1, #8
   2c730:	f000 fdbe 	bl	2d2b0 <net_buf_simple_pull_le16>
   2c734:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2c736:	68a2      	ldr	r2, [r4, #8]
   2c738:	89a1      	ldrh	r1, [r4, #12]
   2c73a:	9102      	str	r1, [sp, #8]
   2c73c:	9201      	str	r2, [sp, #4]
   2c73e:	2100      	movs	r1, #0
   2c740:	9100      	str	r1, [sp, #0]
   2c742:	460a      	mov	r2, r1
   2c744:	4628      	mov	r0, r5
   2c746:	f7f0 fc8f 	bl	1d068 <att_write_rsp>
}
   2c74a:	b005      	add	sp, #20
   2c74c:	bd30      	pop	{r4, r5, pc}

0002c74e <att_write_req>:
{
   2c74e:	b530      	push	{r4, r5, lr}
   2c750:	b085      	sub	sp, #20
   2c752:	4605      	mov	r5, r0
   2c754:	460c      	mov	r4, r1
   2c756:	f101 0008 	add.w	r0, r1, #8
   2c75a:	f000 fda9 	bl	2d2b0 <net_buf_simple_pull_le16>
   2c75e:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2c760:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2c762:	89a1      	ldrh	r1, [r4, #12]
   2c764:	9102      	str	r1, [sp, #8]
   2c766:	9201      	str	r2, [sp, #4]
   2c768:	2200      	movs	r2, #0
   2c76a:	9200      	str	r2, [sp, #0]
   2c76c:	2213      	movs	r2, #19
   2c76e:	2112      	movs	r1, #18
   2c770:	4628      	mov	r0, r5
   2c772:	f7f0 fc79 	bl	1d068 <att_write_rsp>
}
   2c776:	b005      	add	sp, #20
   2c778:	bd30      	pop	{r4, r5, pc}

0002c77a <att_read_group_req>:
{
   2c77a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c77c:	b089      	sub	sp, #36	; 0x24
   2c77e:	4605      	mov	r5, r0
   2c780:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2c782:	7b0c      	ldrb	r4, [r1, #12]
   2c784:	3c04      	subs	r4, #4
   2c786:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2c788:	2c02      	cmp	r4, #2
   2c78a:	d001      	beq.n	2c790 <att_read_group_req+0x16>
   2c78c:	2c10      	cmp	r4, #16
   2c78e:	d142      	bne.n	2c816 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2c790:	2104      	movs	r1, #4
   2c792:	3008      	adds	r0, #8
   2c794:	f7f2 ff74 	bl	1f680 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c798:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c79a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c79c:	4622      	mov	r2, r4
   2c79e:	1d01      	adds	r1, r0, #4
   2c7a0:	a801      	add	r0, sp, #4
   2c7a2:	f7fe fd4a 	bl	2b23a <bt_uuid_create>
   2c7a6:	b3c8      	cbz	r0, 2c81c <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c7a8:	f10d 0216 	add.w	r2, sp, #22
   2c7ac:	4639      	mov	r1, r7
   2c7ae:	4630      	mov	r0, r6
   2c7b0:	f7ff fba1 	bl	2bef6 <range_is_valid>
   2c7b4:	b1f0      	cbz	r0, 2c7f4 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2c7b6:	2300      	movs	r3, #0
   2c7b8:	f88d 3018 	strb.w	r3, [sp, #24]
   2c7bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2c7c0:	f8ad 301a 	strh.w	r3, [sp, #26]
   2c7c4:	a906      	add	r1, sp, #24
   2c7c6:	a801      	add	r0, sp, #4
   2c7c8:	f7fe fd19 	bl	2b1fe <bt_uuid_cmp>
   2c7cc:	b158      	cbz	r0, 2c7e6 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2c7ce:	2300      	movs	r3, #0
   2c7d0:	f88d 301c 	strb.w	r3, [sp, #28]
   2c7d4:	f642 0301 	movw	r3, #10241	; 0x2801
   2c7d8:	f8ad 301e 	strh.w	r3, [sp, #30]
   2c7dc:	a907      	add	r1, sp, #28
   2c7de:	a801      	add	r0, sp, #4
   2c7e0:	f7fe fd0d 	bl	2b1fe <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2c7e4:	b978      	cbnz	r0, 2c806 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2c7e6:	463b      	mov	r3, r7
   2c7e8:	4632      	mov	r2, r6
   2c7ea:	a901      	add	r1, sp, #4
   2c7ec:	4628      	mov	r0, r5
   2c7ee:	f7f0 fd1f 	bl	1d230 <att_read_group_rsp>
   2c7f2:	e011      	b.n	2c818 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2c7f4:	2301      	movs	r3, #1
   2c7f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2c7fa:	2110      	movs	r1, #16
   2c7fc:	4628      	mov	r0, r5
   2c7fe:	f7ff ff75 	bl	2c6ec <send_err_rsp>
		return 0;
   2c802:	2000      	movs	r0, #0
   2c804:	e008      	b.n	2c818 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2c806:	2310      	movs	r3, #16
   2c808:	4632      	mov	r2, r6
   2c80a:	4619      	mov	r1, r3
   2c80c:	4628      	mov	r0, r5
   2c80e:	f7ff ff6d 	bl	2c6ec <send_err_rsp>
		return 0;
   2c812:	2000      	movs	r0, #0
   2c814:	e000      	b.n	2c818 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2c816:	2004      	movs	r0, #4
}
   2c818:	b009      	add	sp, #36	; 0x24
   2c81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2c81c:	200e      	movs	r0, #14
   2c81e:	e7fb      	b.n	2c818 <att_read_group_req+0x9e>

0002c820 <att_read_blob_req>:
{
   2c820:	b500      	push	{lr}
   2c822:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2c824:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2c826:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2c828:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2c82a:	9200      	str	r2, [sp, #0]
   2c82c:	220d      	movs	r2, #13
   2c82e:	210c      	movs	r1, #12
   2c830:	f7f0 fdf2 	bl	1d418 <att_read_rsp>
}
   2c834:	b003      	add	sp, #12
   2c836:	f85d fb04 	ldr.w	pc, [sp], #4

0002c83a <att_read_req>:
{
   2c83a:	b500      	push	{lr}
   2c83c:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2c83e:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2c840:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2c842:	2200      	movs	r2, #0
   2c844:	9200      	str	r2, [sp, #0]
   2c846:	220b      	movs	r2, #11
   2c848:	210a      	movs	r1, #10
   2c84a:	f7f0 fde5 	bl	1d418 <att_read_rsp>
}
   2c84e:	b003      	add	sp, #12
   2c850:	f85d fb04 	ldr.w	pc, [sp], #4

0002c854 <att_read_type_req>:
{
   2c854:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c856:	b087      	sub	sp, #28
   2c858:	4605      	mov	r5, r0
   2c85a:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2c85c:	7b0c      	ldrb	r4, [r1, #12]
   2c85e:	3c04      	subs	r4, #4
   2c860:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2c862:	2c02      	cmp	r4, #2
   2c864:	d001      	beq.n	2c86a <att_read_type_req+0x16>
   2c866:	2c10      	cmp	r4, #16
   2c868:	d123      	bne.n	2c8b2 <att_read_type_req+0x5e>
   2c86a:	2104      	movs	r1, #4
   2c86c:	3008      	adds	r0, #8
   2c86e:	f7f2 ff07 	bl	1f680 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c872:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c874:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c876:	4622      	mov	r2, r4
   2c878:	1d01      	adds	r1, r0, #4
   2c87a:	a801      	add	r0, sp, #4
   2c87c:	f7fe fcdd 	bl	2b23a <bt_uuid_create>
   2c880:	b1c8      	cbz	r0, 2c8b6 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c882:	f10d 0216 	add.w	r2, sp, #22
   2c886:	4639      	mov	r1, r7
   2c888:	4630      	mov	r0, r6
   2c88a:	f7ff fb34 	bl	2bef6 <range_is_valid>
   2c88e:	b138      	cbz	r0, 2c8a0 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2c890:	463b      	mov	r3, r7
   2c892:	4632      	mov	r2, r6
   2c894:	a901      	add	r1, sp, #4
   2c896:	4628      	mov	r0, r5
   2c898:	f7f0 fe18 	bl	1d4cc <att_read_type_rsp>
}
   2c89c:	b007      	add	sp, #28
   2c89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2c8a0:	2301      	movs	r3, #1
   2c8a2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2c8a6:	2108      	movs	r1, #8
   2c8a8:	4628      	mov	r0, r5
   2c8aa:	f7ff ff1f 	bl	2c6ec <send_err_rsp>
		return 0;
   2c8ae:	2000      	movs	r0, #0
   2c8b0:	e7f4      	b.n	2c89c <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2c8b2:	2004      	movs	r0, #4
   2c8b4:	e7f2      	b.n	2c89c <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2c8b6:	200e      	movs	r0, #14
   2c8b8:	e7f0      	b.n	2c89c <att_read_type_req+0x48>

0002c8ba <att_find_type_req>:
{
   2c8ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c8be:	b087      	sub	sp, #28
   2c8c0:	4607      	mov	r7, r0
   2c8c2:	460c      	mov	r4, r1
   2c8c4:	2106      	movs	r1, #6
   2c8c6:	f104 0008 	add.w	r0, r4, #8
   2c8ca:	f7f2 fed9 	bl	1f680 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c8ce:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c8d0:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2c8d2:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2c8d6:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c8da:	f10d 020e 	add.w	r2, sp, #14
   2c8de:	4631      	mov	r1, r6
   2c8e0:	4628      	mov	r0, r5
   2c8e2:	f7ff fb08 	bl	2bef6 <range_is_valid>
   2c8e6:	b1d0      	cbz	r0, 2c91e <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2c8e8:	2300      	movs	r3, #0
   2c8ea:	f88d 3010 	strb.w	r3, [sp, #16]
   2c8ee:	f8ad 8012 	strh.w	r8, [sp, #18]
   2c8f2:	f88d 3014 	strb.w	r3, [sp, #20]
   2c8f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2c8fa:	f8ad 3016 	strh.w	r3, [sp, #22]
   2c8fe:	a905      	add	r1, sp, #20
   2c900:	a804      	add	r0, sp, #16
   2c902:	f7fe fc7c 	bl	2b1fe <bt_uuid_cmp>
   2c906:	b998      	cbnz	r0, 2c930 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2c908:	7b23      	ldrb	r3, [r4, #12]
   2c90a:	9300      	str	r3, [sp, #0]
   2c90c:	464b      	mov	r3, r9
   2c90e:	4632      	mov	r2, r6
   2c910:	4629      	mov	r1, r5
   2c912:	4638      	mov	r0, r7
   2c914:	f7f0 fe24 	bl	1d560 <att_find_type_rsp>
}
   2c918:	b007      	add	sp, #28
   2c91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2c91e:	2301      	movs	r3, #1
   2c920:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2c924:	2106      	movs	r1, #6
   2c926:	4638      	mov	r0, r7
   2c928:	f7ff fee0 	bl	2c6ec <send_err_rsp>
		return 0;
   2c92c:	2000      	movs	r0, #0
   2c92e:	e7f3      	b.n	2c918 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2c930:	230a      	movs	r3, #10
   2c932:	462a      	mov	r2, r5
   2c934:	2106      	movs	r1, #6
   2c936:	4638      	mov	r0, r7
   2c938:	f7ff fed8 	bl	2c6ec <send_err_rsp>
		return 0;
   2c93c:	2000      	movs	r0, #0
   2c93e:	e7eb      	b.n	2c918 <att_find_type_req+0x5e>

0002c940 <att_find_info_req>:
{
   2c940:	b570      	push	{r4, r5, r6, lr}
   2c942:	b082      	sub	sp, #8
   2c944:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2c946:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c948:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c94a:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2c94c:	f10d 0206 	add.w	r2, sp, #6
   2c950:	4631      	mov	r1, r6
   2c952:	4628      	mov	r0, r5
   2c954:	f7ff facf 	bl	2bef6 <range_is_valid>
   2c958:	b130      	cbz	r0, 2c968 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2c95a:	4632      	mov	r2, r6
   2c95c:	4629      	mov	r1, r5
   2c95e:	4620      	mov	r0, r4
   2c960:	f7f0 fe48 	bl	1d5f4 <att_find_info_rsp>
}
   2c964:	b002      	add	sp, #8
   2c966:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2c968:	2301      	movs	r3, #1
   2c96a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2c96e:	2104      	movs	r1, #4
   2c970:	4620      	mov	r0, r4
   2c972:	f7ff febb 	bl	2c6ec <send_err_rsp>
		return 0;
   2c976:	2000      	movs	r0, #0
   2c978:	e7f4      	b.n	2c964 <att_find_info_req+0x24>

0002c97a <att_mtu_req>:
{
   2c97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c97c:	4604      	mov	r4, r0
   2c97e:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   2c980:	f850 3b98 	ldr.w	r3, [r0], #152
   2c984:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2c986:	2103      	movs	r1, #3
   2c988:	f7ff faf7 	bl	2bf7a <atomic_test_bit>
   2c98c:	bb00      	cbnz	r0, 2c9d0 <att_mtu_req+0x56>
	req = (void *)buf->data;
   2c98e:	68ab      	ldr	r3, [r5, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   2c990:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2c992:	2e16      	cmp	r6, #22
   2c994:	d91e      	bls.n	2c9d4 <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2c996:	2202      	movs	r2, #2
   2c998:	2103      	movs	r1, #3
   2c99a:	4638      	mov	r0, r7
   2c99c:	f7f0 fbd4 	bl	1d148 <bt_att_create_pdu>
	if (!pdu) {
   2c9a0:	4607      	mov	r7, r0
   2c9a2:	b1c8      	cbz	r0, 2c9d8 <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2c9a4:	2102      	movs	r1, #2
   2c9a6:	3008      	adds	r0, #8
   2c9a8:	f7f2 feaa 	bl	1f700 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2c9ac:	2500      	movs	r5, #0
   2c9ae:	2317      	movs	r3, #23
   2c9b0:	7003      	strb	r3, [r0, #0]
   2c9b2:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2c9b4:	4639      	mov	r1, r7
   2c9b6:	4620      	mov	r0, r4
   2c9b8:	f7ff fca1 	bl	2c2fe <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2c9bc:	2e17      	cmp	r6, #23
   2c9be:	bf28      	it	cs
   2c9c0:	2617      	movcs	r6, #23
   2c9c2:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2c9c4:	8566      	strh	r6, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2c9c6:	4620      	mov	r0, r4
   2c9c8:	f7ff fe03 	bl	2c5d2 <att_chan_mtu_updated>
	return 0;
   2c9cc:	4628      	mov	r0, r5
}
   2c9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2c9d0:	2006      	movs	r0, #6
   2c9d2:	e7fc      	b.n	2c9ce <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   2c9d4:	2004      	movs	r0, #4
   2c9d6:	e7fa      	b.n	2c9ce <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   2c9d8:	200e      	movs	r0, #14
   2c9da:	e7f8      	b.n	2c9ce <att_mtu_req+0x54>

0002c9dc <att_confirm>:
{
   2c9dc:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2c9de:	2300      	movs	r3, #0
   2c9e0:	898a      	ldrh	r2, [r1, #12]
   2c9e2:	6889      	ldr	r1, [r1, #8]
   2c9e4:	f7f0 fe96 	bl	1d714 <att_handle_rsp>
}
   2c9e8:	bd08      	pop	{r3, pc}

0002c9ea <att_chan_detach>:
{
   2c9ea:	b538      	push	{r3, r4, r5, lr}
   2c9ec:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2c9ee:	4601      	mov	r1, r0
   2c9f0:	f851 0bf0 	ldr.w	r0, [r1], #240
   2c9f4:	3028      	adds	r0, #40	; 0x28
   2c9f6:	f7ff fa63 	bl	2bec0 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2c9fa:	e005      	b.n	2ca08 <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2c9fc:	6960      	ldr	r0, [r4, #20]
   2c9fe:	f7ef fdf9 	bl	1c5f4 <tx_meta_data_free>
		net_buf_unref(buf);
   2ca02:	4620      	mov	r0, r4
   2ca04:	f7f2 fd5e 	bl	1f4c4 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2ca08:	2200      	movs	r2, #0
   2ca0a:	2300      	movs	r3, #0
   2ca0c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   2ca10:	f7f2 fbc2 	bl	1f198 <net_buf_get>
   2ca14:	4604      	mov	r4, r0
   2ca16:	2800      	cmp	r0, #0
   2ca18:	d1f0      	bne.n	2c9fc <att_chan_detach+0x12>
	if (chan->req) {
   2ca1a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   2ca1e:	b12b      	cbz	r3, 2ca2c <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2ca20:	230e      	movs	r3, #14
   2ca22:	2200      	movs	r2, #0
   2ca24:	4611      	mov	r1, r2
   2ca26:	4628      	mov	r0, r5
   2ca28:	f7f0 fe74 	bl	1d714 <att_handle_rsp>
	chan->att = NULL;
   2ca2c:	2300      	movs	r3, #0
   2ca2e:	602b      	str	r3, [r5, #0]
}
   2ca30:	bd38      	pop	{r3, r4, r5, pc}

0002ca32 <bt_att_disconnected>:
{
   2ca32:	b538      	push	{r3, r4, r5, lr}
   2ca34:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2ca36:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   2ca3a:	b125      	cbz	r5, 2ca46 <bt_att_disconnected+0x14>
   2ca3c:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   2ca3e:	f7ff ffd4 	bl	2c9ea <att_chan_detach>
	return list->head;
   2ca42:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (!sys_slist_is_empty(&att->chans)) {
   2ca44:	b103      	cbz	r3, 2ca48 <bt_att_disconnected+0x16>
}
   2ca46:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2ca48:	4628      	mov	r0, r5
   2ca4a:	f7f0 fec1 	bl	1d7d0 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   2ca4e:	6820      	ldr	r0, [r4, #0]
   2ca50:	f7f2 f9ec 	bl	1ee2c <bt_gatt_disconnected>
   2ca54:	e7f7      	b.n	2ca46 <bt_att_disconnected+0x14>

0002ca56 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2ca56:	2001      	movs	r0, #1
   2ca58:	4770      	bx	lr

0002ca5a <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2ca5a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2ca5c:	f7ef fc3e 	bl	1c2dc <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2ca60:	b198      	cbz	r0, 2ca8a <bt_att_clear_out_of_sync_sent+0x30>
   2ca62:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2ca64:	b103      	cbz	r3, 2ca68 <bt_att_clear_out_of_sync_sent+0xe>
   2ca66:	3bf0      	subs	r3, #240	; 0xf0
   2ca68:	b17b      	cbz	r3, 2ca8a <bt_att_clear_out_of_sync_sent+0x30>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2ca6a:	f103 0298 	add.w	r2, r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ca6e:	e8d2 0fef 	ldaex	r0, [r2]
   2ca72:	f020 0020 	bic.w	r0, r0, #32
   2ca76:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2ca7a:	2900      	cmp	r1, #0
   2ca7c:	d1f7      	bne.n	2ca6e <bt_att_clear_out_of_sync_sent+0x14>
	return node->next;
   2ca7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2ca82:	2b00      	cmp	r3, #0
   2ca84:	d0f0      	beq.n	2ca68 <bt_att_clear_out_of_sync_sent+0xe>
   2ca86:	3bf0      	subs	r3, #240	; 0xf0
   2ca88:	e7ee      	b.n	2ca68 <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   2ca8a:	bd08      	pop	{r3, pc}

0002ca8c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2ca8c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2ca8e:	2104      	movs	r1, #4
   2ca90:	f7ff f9c3 	bl	2be1a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2ca94:	b120      	cbz	r0, 2caa0 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2ca96:	2105      	movs	r1, #5
   2ca98:	3094      	adds	r0, #148	; 0x94
   2ca9a:	f7ff fa6e 	bl	2bf7a <atomic_test_bit>
}
   2ca9e:	bd08      	pop	{r3, pc}
		return false;
   2caa0:	2000      	movs	r0, #0
   2caa2:	e7fc      	b.n	2ca9e <bt_att_out_of_sync_sent_on_fixed+0x12>

0002caa4 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2caa4:	6940      	ldr	r0, [r0, #20]

	data->func = func;
   2caa6:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2caa8:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   2caaa:	2201      	movs	r2, #1
   2caac:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2caae:	7403      	strb	r3, [r0, #16]
}
   2cab0:	4770      	bx	lr

0002cab2 <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2cab2:	2300      	movs	r3, #0
   2cab4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2cab8:	d210      	bcs.n	2cadc <sys_mem_swap+0x2a>
{
   2caba:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   2cabc:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2cac0:	1aca      	subs	r2, r1, r3
   2cac2:	3a01      	subs	r2, #1
   2cac4:	f810 e002 	ldrb.w	lr, [r0, r2]
   2cac8:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2cacc:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   2cad0:	3301      	adds	r3, #1
   2cad2:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2cad6:	d3f1      	bcc.n	2cabc <sys_mem_swap+0xa>
	}
}
   2cad8:	f85d fb04 	ldr.w	pc, [sp], #4
   2cadc:	4770      	bx	lr

0002cade <update_range>:
	if (new_start >= *start && new_end <= *end) {
   2cade:	f8b0 c000 	ldrh.w	ip, [r0]
   2cae2:	4562      	cmp	r2, ip
   2cae4:	d312      	bcc.n	2cb0c <update_range+0x2e>
{
   2cae6:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   2cae8:	f8b1 e000 	ldrh.w	lr, [r1]
   2caec:	4573      	cmp	r3, lr
   2caee:	d908      	bls.n	2cb02 <update_range+0x24>
	if (*start > new_start) {
   2caf0:	4562      	cmp	r2, ip
   2caf2:	d200      	bcs.n	2caf6 <update_range+0x18>
		*start = new_start;
   2caf4:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2caf6:	880a      	ldrh	r2, [r1, #0]
   2caf8:	4293      	cmp	r3, r2
   2cafa:	d904      	bls.n	2cb06 <update_range+0x28>
		*end = new_end;
   2cafc:	800b      	strh	r3, [r1, #0]
	return true;
   2cafe:	2001      	movs	r0, #1
   2cb00:	e002      	b.n	2cb08 <update_range+0x2a>
		return false;
   2cb02:	2000      	movs	r0, #0
   2cb04:	e000      	b.n	2cb08 <update_range+0x2a>
	return true;
   2cb06:	2001      	movs	r0, #1
}
   2cb08:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   2cb0c:	4562      	cmp	r2, ip
   2cb0e:	d200      	bcs.n	2cb12 <update_range+0x34>
		*start = new_start;
   2cb10:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2cb12:	880a      	ldrh	r2, [r1, #0]
   2cb14:	4293      	cmp	r3, r2
   2cb16:	d902      	bls.n	2cb1e <update_range+0x40>
		*end = new_end;
   2cb18:	800b      	strh	r3, [r1, #0]
	return true;
   2cb1a:	2001      	movs	r0, #1
   2cb1c:	4770      	bx	lr
   2cb1e:	2001      	movs	r0, #1
}
   2cb20:	4770      	bx	lr

0002cb22 <cf_set_value>:
{
   2cb22:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2cb24:	2300      	movs	r3, #0
   2cb26:	e001      	b.n	2cb2c <cf_set_value+0xa>
   2cb28:	3301      	adds	r3, #1
   2cb2a:	b29b      	uxth	r3, r3
   2cb2c:	2b02      	cmp	r3, #2
   2cb2e:	d819      	bhi.n	2cb64 <cf_set_value+0x42>
   2cb30:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   2cb34:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2cb38:	d912      	bls.n	2cb60 <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2cb3a:	eb00 040c 	add.w	r4, r0, ip
   2cb3e:	7a24      	ldrb	r4, [r4, #8]
   2cb40:	f003 0e07 	and.w	lr, r3, #7
   2cb44:	fa24 f40e 	lsr.w	r4, r4, lr
   2cb48:	f014 0f01 	tst.w	r4, #1
   2cb4c:	d0ec      	beq.n	2cb28 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2cb4e:	f811 400c 	ldrb.w	r4, [r1, ip]
   2cb52:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2cb56:	f014 0f01 	tst.w	r4, #1
   2cb5a:	d1e5      	bne.n	2cb28 <cf_set_value+0x6>
			return false;
   2cb5c:	2000      	movs	r0, #0
   2cb5e:	e016      	b.n	2cb8e <cf_set_value+0x6c>
   2cb60:	2300      	movs	r3, #0
   2cb62:	e000      	b.n	2cb66 <cf_set_value+0x44>
   2cb64:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2cb66:	4293      	cmp	r3, r2
   2cb68:	d210      	bcs.n	2cb8c <cf_set_value+0x6a>
   2cb6a:	b96b      	cbnz	r3, 2cb88 <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2cb6c:	18c4      	adds	r4, r0, r3
   2cb6e:	f894 c008 	ldrb.w	ip, [r4, #8]
   2cb72:	f811 e003 	ldrb.w	lr, [r1, r3]
   2cb76:	f00e 0e07 	and.w	lr, lr, #7
   2cb7a:	ea4c 0c0e 	orr.w	ip, ip, lr
   2cb7e:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2cb82:	3301      	adds	r3, #1
   2cb84:	b29b      	uxth	r3, r3
   2cb86:	e7ee      	b.n	2cb66 <cf_set_value+0x44>
	return true;
   2cb88:	2001      	movs	r0, #1
   2cb8a:	e000      	b.n	2cb8e <cf_set_value+0x6c>
   2cb8c:	2001      	movs	r0, #1
}
   2cb8e:	bd10      	pop	{r4, pc}

0002cb90 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2cb90:	6010      	str	r0, [r2, #0]
}
   2cb92:	2000      	movs	r0, #0
   2cb94:	4770      	bx	lr

0002cb96 <gatt_ccc_changed>:
{
   2cb96:	b508      	push	{r3, lr}
   2cb98:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2cb9a:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2cb9c:	460b      	mov	r3, r1
   2cb9e:	b13b      	cbz	r3, 2cbb0 <gatt_ccc_changed+0x1a>
	if (value != ccc->value) {
   2cba0:	8953      	ldrh	r3, [r2, #10]
   2cba2:	4299      	cmp	r1, r3
   2cba4:	d003      	beq.n	2cbae <gatt_ccc_changed+0x18>
		ccc->value = value;
   2cba6:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2cba8:	68d3      	ldr	r3, [r2, #12]
   2cbaa:	b103      	cbz	r3, 2cbae <gatt_ccc_changed+0x18>
			ccc->cfg_changed(attr, value);
   2cbac:	4798      	blx	r3
}
   2cbae:	bd08      	pop	{r3, pc}
		if (ccc->cfg[i].value > value) {
   2cbb0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2cbb4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   2cbb8:	f8bc c008 	ldrh.w	ip, [ip, #8]
   2cbbc:	458c      	cmp	ip, r1
   2cbbe:	d900      	bls.n	2cbc2 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2cbc0:	4661      	mov	r1, ip
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2cbc2:	3301      	adds	r3, #1
   2cbc4:	e7eb      	b.n	2cb9e <gatt_ccc_changed+0x8>

0002cbc6 <gatt_indicate_rsp>:
{
   2cbc6:	b510      	push	{r4, lr}
   2cbc8:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2cbca:	68a3      	ldr	r3, [r4, #8]
   2cbcc:	b113      	cbz	r3, 2cbd4 <gatt_indicate_rsp+0xe>
   2cbce:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2cbd0:	4621      	mov	r1, r4
   2cbd2:	4798      	blx	r3
	params->_ref--;
   2cbd4:	7da3      	ldrb	r3, [r4, #22]
   2cbd6:	3b01      	subs	r3, #1
   2cbd8:	b2db      	uxtb	r3, r3
   2cbda:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2cbdc:	68e2      	ldr	r2, [r4, #12]
   2cbde:	b112      	cbz	r2, 2cbe6 <gatt_indicate_rsp+0x20>
   2cbe0:	b90b      	cbnz	r3, 2cbe6 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2cbe2:	4620      	mov	r0, r4
   2cbe4:	4790      	blx	r2
}
   2cbe6:	bd10      	pop	{r4, pc}

0002cbe8 <match_uuid>:
	data->attr = attr;
   2cbe8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2cbea:	8091      	strh	r1, [r2, #4]
}
   2cbec:	2000      	movs	r0, #0
   2cbee:	4770      	bx	lr

0002cbf0 <gen_hash_m>:
{
   2cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cbf2:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2cbf4:	6806      	ldr	r6, [r0, #0]
   2cbf6:	7835      	ldrb	r5, [r6, #0]
   2cbf8:	2d00      	cmp	r5, #0
   2cbfa:	d160      	bne.n	2ccbe <gen_hash_m+0xce>
   2cbfc:	4607      	mov	r7, r0
   2cbfe:	4614      	mov	r4, r2
	switch (u16->val) {
   2cc00:	8873      	ldrh	r3, [r6, #2]
   2cc02:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2cc06:	d019      	beq.n	2cc3c <gen_hash_m+0x4c>
   2cc08:	d913      	bls.n	2cc32 <gen_hash_m+0x42>
   2cc0a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2cc0e:	33ff      	adds	r3, #255	; 0xff
   2cc10:	b29b      	uxth	r3, r3
   2cc12:	2b04      	cmp	r3, #4
   2cc14:	d859      	bhi.n	2ccca <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   2cc16:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2cc1a:	2202      	movs	r2, #2
   2cc1c:	f10d 010a 	add.w	r1, sp, #10
   2cc20:	4620      	mov	r0, r4
   2cc22:	f7fd fe55 	bl	2a8d0 <tc_cmac_update>
   2cc26:	2800      	cmp	r0, #0
   2cc28:	d139      	bne.n	2cc9e <gen_hash_m+0xae>
			state->err = -EINVAL;
   2cc2a:	f06f 0315 	mvn.w	r3, #21
   2cc2e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2cc30:	e046      	b.n	2ccc0 <gen_hash_m+0xd0>
	switch (u16->val) {
   2cc32:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2cc36:	b29b      	uxth	r3, r3
   2cc38:	2b03      	cmp	r3, #3
   2cc3a:	d844      	bhi.n	2ccc6 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   2cc3c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2cc40:	2202      	movs	r2, #2
   2cc42:	f10d 010a 	add.w	r1, sp, #10
   2cc46:	4620      	mov	r0, r4
   2cc48:	f7fd fe42 	bl	2a8d0 <tc_cmac_update>
   2cc4c:	b918      	cbnz	r0, 2cc56 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2cc4e:	f06f 0315 	mvn.w	r3, #21
   2cc52:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2cc54:	e034      	b.n	2ccc0 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2cc56:	8873      	ldrh	r3, [r6, #2]
   2cc58:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2cc5c:	2202      	movs	r2, #2
   2cc5e:	f10d 010a 	add.w	r1, sp, #10
   2cc62:	4620      	mov	r0, r4
   2cc64:	f7fd fe34 	bl	2a8d0 <tc_cmac_update>
   2cc68:	b178      	cbz	r0, 2cc8a <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2cc6a:	687e      	ldr	r6, [r7, #4]
   2cc6c:	2000      	movs	r0, #0
   2cc6e:	9000      	str	r0, [sp, #0]
   2cc70:	2313      	movs	r3, #19
   2cc72:	aa03      	add	r2, sp, #12
   2cc74:	4639      	mov	r1, r7
   2cc76:	47b0      	blx	r6
		if (len < 0) {
   2cc78:	1e02      	subs	r2, r0, #0
   2cc7a:	db0a      	blt.n	2cc92 <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   2cc7c:	a903      	add	r1, sp, #12
   2cc7e:	4620      	mov	r0, r4
   2cc80:	f7fd fe26 	bl	2a8d0 <tc_cmac_update>
   2cc84:	b138      	cbz	r0, 2cc96 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2cc86:	2501      	movs	r5, #1
   2cc88:	e01a      	b.n	2ccc0 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2cc8a:	f06f 0315 	mvn.w	r3, #21
   2cc8e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2cc90:	e016      	b.n	2ccc0 <gen_hash_m+0xd0>
			state->err = len;
   2cc92:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2cc94:	e014      	b.n	2ccc0 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2cc96:	f06f 0315 	mvn.w	r3, #21
   2cc9a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2cc9c:	e010      	b.n	2ccc0 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2cc9e:	8873      	ldrh	r3, [r6, #2]
   2cca0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2cca4:	2202      	movs	r2, #2
   2cca6:	f10d 010a 	add.w	r1, sp, #10
   2ccaa:	4620      	mov	r0, r4
   2ccac:	f7fd fe10 	bl	2a8d0 <tc_cmac_update>
   2ccb0:	b108      	cbz	r0, 2ccb6 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   2ccb2:	2501      	movs	r5, #1
   2ccb4:	e004      	b.n	2ccc0 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2ccb6:	f06f 0315 	mvn.w	r3, #21
   2ccba:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2ccbc:	e000      	b.n	2ccc0 <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   2ccbe:	2501      	movs	r5, #1
}
   2ccc0:	4628      	mov	r0, r5
   2ccc2:	b009      	add	sp, #36	; 0x24
   2ccc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2ccc6:	2501      	movs	r5, #1
   2ccc8:	e7fa      	b.n	2ccc0 <gen_hash_m+0xd0>
   2ccca:	2501      	movs	r5, #1
   2cccc:	e7f8      	b.n	2ccc0 <gen_hash_m+0xd0>

0002ccce <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ccce:	094b      	lsrs	r3, r1, #5
   2ccd0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ccd4:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ccd8:	f001 011f 	and.w	r1, r1, #31
   2ccdc:	4108      	asrs	r0, r1
}
   2ccde:	f000 0001 	and.w	r0, r0, #1
   2cce2:	4770      	bx	lr

0002cce4 <clear_sc_cfg>:
{
   2cce4:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   2cce6:	220c      	movs	r2, #12
   2cce8:	2100      	movs	r1, #0
   2ccea:	f7fe fa54 	bl	2b196 <memset>
}
   2ccee:	bd08      	pop	{r3, pc}

0002ccf0 <bt_gatt_clear_sc>:
{
   2ccf0:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2ccf2:	f7f0 feaf 	bl	1da54 <find_sc_cfg>
	if (!cfg) {
   2ccf6:	b108      	cbz	r0, 2ccfc <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2ccf8:	f7ff fff4 	bl	2cce4 <clear_sc_cfg>
}
   2ccfc:	2000      	movs	r0, #0
   2ccfe:	bd08      	pop	{r3, pc}

0002cd00 <sc_ccc_cfg_write>:
{
   2cd00:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2cd02:	2a02      	cmp	r2, #2
   2cd04:	d003      	beq.n	2cd0e <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2cd06:	f7f1 f841 	bl	1dd8c <sc_clear>
}
   2cd0a:	2002      	movs	r0, #2
   2cd0c:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2cd0e:	2300      	movs	r3, #0
   2cd10:	461a      	mov	r2, r3
   2cd12:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2cd16:	7a00      	ldrb	r0, [r0, #8]
   2cd18:	f7f0 ff50 	bl	1dbbc <sc_save>
   2cd1c:	e7f5      	b.n	2cd0a <sc_ccc_cfg_write+0xa>

0002cd1e <sc_reset>:
{
   2cd1e:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   2cd20:	2204      	movs	r2, #4
   2cd22:	2100      	movs	r1, #0
   2cd24:	3008      	adds	r0, #8
   2cd26:	f7fe fa36 	bl	2b196 <memset>
}
   2cd2a:	bd08      	pop	{r3, pc}

0002cd2c <sc_restore_rsp>:
{
   2cd2c:	b538      	push	{r3, r4, r5, lr}
   2cd2e:	4605      	mov	r5, r0
   2cd30:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   2cd32:	f7ff fe90 	bl	2ca56 <bt_att_fixed_chan_only>
   2cd36:	b908      	cbnz	r0, 2cd3c <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2cd38:	b1a4      	cbz	r4, 2cd64 <sc_restore_rsp+0x38>
}
   2cd3a:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2cd3c:	4628      	mov	r0, r5
   2cd3e:	f7f0 fe63 	bl	1da08 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2cd42:	4603      	mov	r3, r0
   2cd44:	2800      	cmp	r0, #0
   2cd46:	d0f7      	beq.n	2cd38 <sc_restore_rsp+0xc>
   2cd48:	7a02      	ldrb	r2, [r0, #8]
   2cd4a:	f012 0f01 	tst.w	r2, #1
   2cd4e:	d0f3      	beq.n	2cd38 <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2cd50:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cd52:	e8d3 1fef 	ldaex	r1, [r3]
   2cd56:	f041 0101 	orr.w	r1, r1, #1
   2cd5a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2cd5e:	2a00      	cmp	r2, #0
   2cd60:	d0ea      	beq.n	2cd38 <sc_restore_rsp+0xc>
   2cd62:	e7f6      	b.n	2cd52 <sc_restore_rsp+0x26>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2cd64:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2cd68:	7a28      	ldrb	r0, [r5, #8]
   2cd6a:	f7f0 fe73 	bl	1da54 <find_sc_cfg>
		if (sc_cfg) {
   2cd6e:	2800      	cmp	r0, #0
   2cd70:	d0e3      	beq.n	2cd3a <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2cd72:	f7ff ffd4 	bl	2cd1e <sc_reset>
}
   2cd76:	e7e0      	b.n	2cd3a <sc_restore_rsp+0xe>

0002cd78 <atomic_test_and_clear_bit>:
{
   2cd78:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cd7a:	f001 021f 	and.w	r2, r1, #31
   2cd7e:	2301      	movs	r3, #1
   2cd80:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cd82:	0949      	lsrs	r1, r1, #5
   2cd84:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2cd88:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cd8a:	e8d0 2fef 	ldaex	r2, [r0]
   2cd8e:	ea02 0c01 	and.w	ip, r2, r1
   2cd92:	e8c0 cfee 	stlex	lr, ip, [r0]
   2cd96:	f1be 0f00 	cmp.w	lr, #0
   2cd9a:	d1f6      	bne.n	2cd8a <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   2cd9c:	4213      	tst	r3, r2
}
   2cd9e:	bf14      	ite	ne
   2cda0:	2001      	movne	r0, #1
   2cda2:	2000      	moveq	r0, #0
   2cda4:	f85d fb04 	ldr.w	pc, [sp], #4

0002cda8 <gatt_foreach_iter>:
	if (handle > end_handle) {
   2cda8:	4299      	cmp	r1, r3
   2cdaa:	d822      	bhi.n	2cdf2 <gatt_foreach_iter+0x4a>
{
   2cdac:	b538      	push	{r3, r4, r5, lr}
   2cdae:	4605      	mov	r5, r0
   2cdb0:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2cdb2:	4291      	cmp	r1, r2
   2cdb4:	d31f      	bcc.n	2cdf6 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2cdb6:	9b04      	ldr	r3, [sp, #16]
   2cdb8:	b123      	cbz	r3, 2cdc4 <gatt_foreach_iter+0x1c>
   2cdba:	6801      	ldr	r1, [r0, #0]
   2cdbc:	4618      	mov	r0, r3
   2cdbe:	f7fe fa1e 	bl	2b1fe <bt_uuid_cmp>
   2cdc2:	b9d0      	cbnz	r0, 2cdfa <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2cdc4:	9b05      	ldr	r3, [sp, #20]
   2cdc6:	b12b      	cbz	r3, 2cdd4 <gatt_foreach_iter+0x2c>
   2cdc8:	68eb      	ldr	r3, [r5, #12]
   2cdca:	9a05      	ldr	r2, [sp, #20]
   2cdcc:	4293      	cmp	r3, r2
   2cdce:	d001      	beq.n	2cdd4 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2cdd0:	2001      	movs	r0, #1
   2cdd2:	e011      	b.n	2cdf8 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2cdd4:	9b06      	ldr	r3, [sp, #24]
   2cdd6:	881b      	ldrh	r3, [r3, #0]
   2cdd8:	3b01      	subs	r3, #1
   2cdda:	9a06      	ldr	r2, [sp, #24]
   2cddc:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2cdde:	9a08      	ldr	r2, [sp, #32]
   2cde0:	4621      	mov	r1, r4
   2cde2:	4628      	mov	r0, r5
   2cde4:	9b07      	ldr	r3, [sp, #28]
   2cde6:	4798      	blx	r3
	if (!*num_matches) {
   2cde8:	9b06      	ldr	r3, [sp, #24]
   2cdea:	881b      	ldrh	r3, [r3, #0]
   2cdec:	b923      	cbnz	r3, 2cdf8 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2cdee:	2000      	movs	r0, #0
   2cdf0:	e002      	b.n	2cdf8 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2cdf2:	2000      	movs	r0, #0
}
   2cdf4:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2cdf6:	2001      	movs	r0, #1
}
   2cdf8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2cdfa:	2001      	movs	r0, #1
   2cdfc:	e7fc      	b.n	2cdf8 <gatt_foreach_iter+0x50>

0002cdfe <gatt_req_alloc>:
{
   2cdfe:	b538      	push	{r3, r4, r5, lr}
   2ce00:	4605      	mov	r5, r0
   2ce02:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2ce04:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2ce08:	2100      	movs	r1, #0
   2ce0a:	f7f0 fc47 	bl	1d69c <bt_att_req_alloc>
	if (!req) {
   2ce0e:	4603      	mov	r3, r0
   2ce10:	b108      	cbz	r0, 2ce16 <gatt_req_alloc+0x18>
	req->func = func;
   2ce12:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2ce14:	60c4      	str	r4, [r0, #12]
}
   2ce16:	4618      	mov	r0, r3
   2ce18:	bd38      	pop	{r3, r4, r5, pc}

0002ce1a <remove_cf_cfg>:
{
   2ce1a:	b570      	push	{r4, r5, r6, lr}
   2ce1c:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2ce1e:	f7f0 fdf3 	bl	1da08 <find_cf_cfg>
	if (!cfg) {
   2ce22:	b150      	cbz	r0, 2ce3a <remove_cf_cfg+0x20>
   2ce24:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ce26:	f104 0590 	add.w	r5, r4, #144	; 0x90
   2ce2a:	4629      	mov	r1, r5
   2ce2c:	7a20      	ldrb	r0, [r4, #8]
   2ce2e:	f7fe fbb9 	bl	2b5a4 <bt_addr_le_is_bonded>
   2ce32:	b918      	cbnz	r0, 2ce3c <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2ce34:	4630      	mov	r0, r6
   2ce36:	f7f1 f89b 	bl	1df70 <clear_cf_cfg>
}
   2ce3a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(dst, src, sizeof(*dst));
   2ce3c:	2207      	movs	r2, #7
   2ce3e:	4629      	mov	r1, r5
   2ce40:	1c70      	adds	r0, r6, #1
   2ce42:	f7fe f979 	bl	2b138 <memcpy>
}
   2ce46:	e7f8      	b.n	2ce3a <remove_cf_cfg+0x20>

0002ce48 <bt_gatt_attr_read>:
{
   2ce48:	b510      	push	{r4, lr}
   2ce4a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2ce4e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2ce52:	42a1      	cmp	r1, r4
   2ce54:	d80c      	bhi.n	2ce70 <bt_gatt_attr_read+0x28>
   2ce56:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2ce58:	1a64      	subs	r4, r4, r1
   2ce5a:	42a3      	cmp	r3, r4
   2ce5c:	bfa8      	it	ge
   2ce5e:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2ce60:	b29c      	uxth	r4, r3
   2ce62:	4622      	mov	r2, r4
   2ce64:	9b03      	ldr	r3, [sp, #12]
   2ce66:	4419      	add	r1, r3
   2ce68:	f7fe f966 	bl	2b138 <memcpy>
}
   2ce6c:	4620      	mov	r0, r4
   2ce6e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2ce70:	f06f 0406 	mvn.w	r4, #6
   2ce74:	e7fa      	b.n	2ce6c <bt_gatt_attr_read+0x24>

0002ce76 <read_ppcp>:
{
   2ce76:	b510      	push	{r4, lr}
   2ce78:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2ce7a:	2418      	movs	r4, #24
   2ce7c:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2ce80:	2428      	movs	r4, #40	; 0x28
   2ce82:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2ce86:	2400      	movs	r4, #0
   2ce88:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2ce8c:	242a      	movs	r4, #42	; 0x2a
   2ce8e:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2ce92:	2408      	movs	r4, #8
   2ce94:	9402      	str	r4, [sp, #8]
   2ce96:	ac04      	add	r4, sp, #16
   2ce98:	9401      	str	r4, [sp, #4]
   2ce9a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2ce9e:	9400      	str	r4, [sp, #0]
   2cea0:	f7ff ffd2 	bl	2ce48 <bt_gatt_attr_read>
}
   2cea4:	b006      	add	sp, #24
   2cea6:	bd10      	pop	{r4, pc}

0002cea8 <read_appearance>:
{
   2cea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ceaa:	b087      	sub	sp, #28
   2ceac:	4604      	mov	r4, r0
   2ceae:	460d      	mov	r5, r1
   2ceb0:	4616      	mov	r6, r2
   2ceb2:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2ceb4:	f7fe fb74 	bl	2b5a0 <bt_get_appearance>
   2ceb8:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2cebc:	2302      	movs	r3, #2
   2cebe:	9302      	str	r3, [sp, #8]
   2cec0:	f10d 0316 	add.w	r3, sp, #22
   2cec4:	9301      	str	r3, [sp, #4]
   2cec6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2ceca:	9300      	str	r3, [sp, #0]
   2cecc:	463b      	mov	r3, r7
   2cece:	4632      	mov	r2, r6
   2ced0:	4629      	mov	r1, r5
   2ced2:	4620      	mov	r0, r4
   2ced4:	f7ff ffb8 	bl	2ce48 <bt_gatt_attr_read>
}
   2ced8:	b007      	add	sp, #28
   2ceda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002cedc <read_name>:
{
   2cedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cee0:	b084      	sub	sp, #16
   2cee2:	4604      	mov	r4, r0
   2cee4:	460d      	mov	r5, r1
   2cee6:	4616      	mov	r6, r2
   2cee8:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2ceea:	f7ec fce7 	bl	198bc <bt_get_name>
   2ceee:	4680      	mov	r8, r0
				 strlen(name));
   2cef0:	f7fe f8df 	bl	2b0b2 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2cef4:	b280      	uxth	r0, r0
   2cef6:	9002      	str	r0, [sp, #8]
   2cef8:	f8cd 8004 	str.w	r8, [sp, #4]
   2cefc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2cf00:	9300      	str	r3, [sp, #0]
   2cf02:	463b      	mov	r3, r7
   2cf04:	4632      	mov	r2, r6
   2cf06:	4629      	mov	r1, r5
   2cf08:	4620      	mov	r0, r4
   2cf0a:	f7ff ff9d 	bl	2ce48 <bt_gatt_attr_read>
}
   2cf0e:	b004      	add	sp, #16
   2cf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cf14 <cf_read>:
{
   2cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cf16:	b087      	sub	sp, #28
   2cf18:	4604      	mov	r4, r0
   2cf1a:	460d      	mov	r5, r1
   2cf1c:	4616      	mov	r6, r2
   2cf1e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2cf20:	2300      	movs	r3, #0
   2cf22:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2cf26:	f7f0 fd6f 	bl	1da08 <find_cf_cfg>
	if (cfg) {
   2cf2a:	b128      	cbz	r0, 2cf38 <cf_read+0x24>
   2cf2c:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   2cf2e:	2201      	movs	r2, #1
   2cf30:	3108      	adds	r1, #8
   2cf32:	a805      	add	r0, sp, #20
   2cf34:	f7fe f900 	bl	2b138 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2cf38:	2301      	movs	r3, #1
   2cf3a:	9302      	str	r3, [sp, #8]
   2cf3c:	ab05      	add	r3, sp, #20
   2cf3e:	9301      	str	r3, [sp, #4]
   2cf40:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2cf44:	9300      	str	r3, [sp, #0]
   2cf46:	463b      	mov	r3, r7
   2cf48:	4632      	mov	r2, r6
   2cf4a:	4629      	mov	r1, r5
   2cf4c:	4620      	mov	r0, r4
   2cf4e:	f7ff ff7b 	bl	2ce48 <bt_gatt_attr_read>
}
   2cf52:	b007      	add	sp, #28
   2cf54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002cf56 <bt_gatt_attr_read_service>:
{
   2cf56:	b570      	push	{r4, r5, r6, lr}
   2cf58:	b086      	sub	sp, #24
   2cf5a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2cf5e:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2cf60:	7826      	ldrb	r6, [r4, #0]
   2cf62:	b146      	cbz	r6, 2cf76 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2cf64:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2cf66:	2610      	movs	r6, #16
   2cf68:	9602      	str	r6, [sp, #8]
   2cf6a:	9401      	str	r4, [sp, #4]
   2cf6c:	9500      	str	r5, [sp, #0]
   2cf6e:	f7ff ff6b 	bl	2ce48 <bt_gatt_attr_read>
}
   2cf72:	b006      	add	sp, #24
   2cf74:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2cf76:	8864      	ldrh	r4, [r4, #2]
   2cf78:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2cf7c:	2402      	movs	r4, #2
   2cf7e:	9402      	str	r4, [sp, #8]
   2cf80:	f10d 0416 	add.w	r4, sp, #22
   2cf84:	9401      	str	r4, [sp, #4]
   2cf86:	9500      	str	r5, [sp, #0]
   2cf88:	f7ff ff5e 	bl	2ce48 <bt_gatt_attr_read>
   2cf8c:	e7f1      	b.n	2cf72 <bt_gatt_attr_read_service+0x1c>

0002cf8e <bt_gatt_attr_read_ccc>:
{
   2cf8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cf90:	b087      	sub	sp, #28
   2cf92:	4605      	mov	r5, r0
   2cf94:	460c      	mov	r4, r1
   2cf96:	4616      	mov	r6, r2
   2cf98:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2cf9a:	68c9      	ldr	r1, [r1, #12]
   2cf9c:	f7f0 fd7e 	bl	1da9c <find_ccc_cfg>
	if (cfg) {
   2cfa0:	b190      	cbz	r0, 2cfc8 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2cfa2:	8903      	ldrh	r3, [r0, #8]
   2cfa4:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2cfa8:	2302      	movs	r3, #2
   2cfaa:	9302      	str	r3, [sp, #8]
   2cfac:	f10d 0316 	add.w	r3, sp, #22
   2cfb0:	9301      	str	r3, [sp, #4]
   2cfb2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2cfb6:	9300      	str	r3, [sp, #0]
   2cfb8:	463b      	mov	r3, r7
   2cfba:	4632      	mov	r2, r6
   2cfbc:	4621      	mov	r1, r4
   2cfbe:	4628      	mov	r0, r5
   2cfc0:	f7ff ff42 	bl	2ce48 <bt_gatt_attr_read>
}
   2cfc4:	b007      	add	sp, #28
   2cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2cfc8:	2300      	movs	r3, #0
   2cfca:	f8ad 3016 	strh.w	r3, [sp, #22]
   2cfce:	e7eb      	b.n	2cfa8 <bt_gatt_attr_read_ccc+0x1a>

0002cfd0 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2cfd0:	b1b8      	cbz	r0, 2d002 <bt_gatt_attr_value_handle+0x32>
{
   2cfd2:	b510      	push	{r4, lr}
   2cfd4:	b082      	sub	sp, #8
   2cfd6:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2cfd8:	2300      	movs	r3, #0
   2cfda:	f88d 3004 	strb.w	r3, [sp, #4]
   2cfde:	f642 0303 	movw	r3, #10243	; 0x2803
   2cfe2:	f8ad 3006 	strh.w	r3, [sp, #6]
   2cfe6:	a901      	add	r1, sp, #4
   2cfe8:	6800      	ldr	r0, [r0, #0]
   2cfea:	f7fe f908 	bl	2b1fe <bt_uuid_cmp>
   2cfee:	b950      	cbnz	r0, 2d006 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2cff0:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2cff2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2cff4:	b940      	cbnz	r0, 2d008 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2cff6:	4620      	mov	r0, r4
   2cff8:	f7f1 f802 	bl	1e000 <bt_gatt_attr_get_handle>
   2cffc:	3001      	adds	r0, #1
   2cffe:	b280      	uxth	r0, r0
   2d000:	e002      	b.n	2d008 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2d002:	2000      	movs	r0, #0
}
   2d004:	4770      	bx	lr
	uint16_t handle = 0;
   2d006:	2000      	movs	r0, #0
}
   2d008:	b002      	add	sp, #8
   2d00a:	bd10      	pop	{r4, pc}

0002d00c <bt_gatt_attr_read_chrc>:
{
   2d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d010:	b08a      	sub	sp, #40	; 0x28
   2d012:	4605      	mov	r5, r0
   2d014:	460c      	mov	r4, r1
   2d016:	4616      	mov	r6, r2
   2d018:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2d01a:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2d01e:	f898 3006 	ldrb.w	r3, [r8, #6]
   2d022:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2d026:	4608      	mov	r0, r1
   2d028:	f7ff ffd2 	bl	2cfd0 <bt_gatt_attr_value_handle>
   2d02c:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2d030:	f8d8 1000 	ldr.w	r1, [r8]
   2d034:	780b      	ldrb	r3, [r1, #0]
   2d036:	b993      	cbnz	r3, 2d05e <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2d038:	884b      	ldrh	r3, [r1, #2]
   2d03a:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2d03e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2d040:	9302      	str	r3, [sp, #8]
   2d042:	ab05      	add	r3, sp, #20
   2d044:	9301      	str	r3, [sp, #4]
   2d046:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2d04a:	9300      	str	r3, [sp, #0]
   2d04c:	463b      	mov	r3, r7
   2d04e:	4632      	mov	r2, r6
   2d050:	4621      	mov	r1, r4
   2d052:	4628      	mov	r0, r5
   2d054:	f7ff fef8 	bl	2ce48 <bt_gatt_attr_read>
}
   2d058:	b00a      	add	sp, #40	; 0x28
   2d05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2d05e:	2210      	movs	r2, #16
   2d060:	3101      	adds	r1, #1
   2d062:	f10d 0017 	add.w	r0, sp, #23
   2d066:	f7fe f867 	bl	2b138 <memcpy>
		value_len += 16U;
   2d06a:	2313      	movs	r3, #19
   2d06c:	e7e8      	b.n	2d040 <bt_gatt_attr_read_chrc+0x34>

0002d06e <db_hash_process>:
{
   2d06e:	b508      	push	{r3, lr}
	db_hash_gen(true);
   2d070:	2001      	movs	r0, #1
   2d072:	f7f1 f87d 	bl	1e170 <db_hash_gen>
}
   2d076:	bd08      	pop	{r3, pc}

0002d078 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2d078:	f012 0f01 	tst.w	r2, #1
   2d07c:	d005      	beq.n	2d08a <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d07e:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2d080:	f013 0f95 	tst.w	r3, #149	; 0x95
   2d084:	d01e      	beq.n	2d0c4 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d086:	684b      	ldr	r3, [r1, #4]
   2d088:	b1f3      	cbz	r3, 2d0c8 <bt_gatt_check_perm+0x50>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d08a:	f012 0f02 	tst.w	r2, #2
   2d08e:	d005      	beq.n	2d09c <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d090:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d092:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2d096:	d019      	beq.n	2d0cc <bt_gatt_check_perm+0x54>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d098:	688b      	ldr	r3, [r1, #8]
   2d09a:	b1cb      	cbz	r3, 2d0d0 <bt_gatt_check_perm+0x58>
{
   2d09c:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2d09e:	8a4c      	ldrh	r4, [r1, #18]
   2d0a0:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2d0a2:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2d0a6:	d115      	bne.n	2d0d4 <bt_gatt_check_perm+0x5c>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2d0a8:	f014 0f30 	tst.w	r4, #48	; 0x30
   2d0ac:	d104      	bne.n	2d0b8 <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2d0ae:	f014 0f0c 	tst.w	r4, #12
   2d0b2:	d111      	bne.n	2d0d8 <bt_gatt_check_perm+0x60>
	return 0;
   2d0b4:	2000      	movs	r0, #0
}
   2d0b6:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2d0b8:	f7fe fdb3 	bl	2bc22 <bt_conn_get_security>
   2d0bc:	2802      	cmp	r0, #2
   2d0be:	d8f6      	bhi.n	2d0ae <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2d0c0:	2005      	movs	r0, #5
   2d0c2:	e7f8      	b.n	2d0b6 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2d0c4:	2002      	movs	r0, #2
   2d0c6:	4770      	bx	lr
   2d0c8:	2002      	movs	r0, #2
   2d0ca:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2d0cc:	2003      	movs	r0, #3
   2d0ce:	4770      	bx	lr
   2d0d0:	2003      	movs	r0, #3
}
   2d0d2:	4770      	bx	lr
			return BT_ATT_ERR_AUTHENTICATION;
   2d0d4:	2005      	movs	r0, #5
   2d0d6:	e7ee      	b.n	2d0b6 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2d0d8:	200f      	movs	r0, #15
   2d0da:	e7ec      	b.n	2d0b6 <bt_gatt_check_perm+0x3e>

0002d0dc <bt_gatt_change_aware>:
{
   2d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d0de:	4607      	mov	r7, r0
   2d0e0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2d0e2:	f7f0 fc91 	bl	1da08 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2d0e6:	2800      	cmp	r0, #0
   2d0e8:	d044      	beq.n	2d174 <bt_gatt_change_aware+0x98>
   2d0ea:	7a02      	ldrb	r2, [r0, #8]
   2d0ec:	f012 0f01 	tst.w	r2, #1
   2d0f0:	d102      	bne.n	2d0f8 <bt_gatt_change_aware+0x1c>
		return true;
   2d0f2:	2601      	movs	r6, #1
}
   2d0f4:	4630      	mov	r0, r6
   2d0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2d0f8:	f100 050c 	add.w	r5, r0, #12
   2d0fc:	2100      	movs	r1, #0
   2d0fe:	4628      	mov	r0, r5
   2d100:	f7ff fde5 	bl	2ccce <atomic_test_bit>
   2d104:	4606      	mov	r6, r0
   2d106:	2800      	cmp	r0, #0
   2d108:	d1f4      	bne.n	2d0f4 <bt_gatt_change_aware+0x18>
	if (!req) {
   2d10a:	b90c      	cbnz	r4, 2d110 <bt_gatt_change_aware+0x34>
		return false;
   2d10c:	4626      	mov	r6, r4
   2d10e:	e7f1      	b.n	2d0f4 <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d110:	2101      	movs	r1, #1
   2d112:	4628      	mov	r0, r5
   2d114:	f7ff fe30 	bl	2cd78 <atomic_test_and_clear_bit>
   2d118:	4606      	mov	r6, r0
   2d11a:	b9f8      	cbnz	r0, 2d15c <bt_gatt_change_aware+0x80>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2d11c:	4638      	mov	r0, r7
   2d11e:	f7ff fc9a 	bl	2ca56 <bt_att_fixed_chan_only>
   2d122:	4606      	mov	r6, r0
   2d124:	2800      	cmp	r0, #0
   2d126:	d0e5      	beq.n	2d0f4 <bt_gatt_change_aware+0x18>
   2d128:	4638      	mov	r0, r7
   2d12a:	f7ff fcaf 	bl	2ca8c <bt_att_out_of_sync_sent_on_fixed>
   2d12e:	4606      	mov	r6, r0
   2d130:	2800      	cmp	r0, #0
   2d132:	d0df      	beq.n	2d0f4 <bt_gatt_change_aware+0x18>
   2d134:	e8d5 3fef 	ldaex	r3, [r5]
   2d138:	f023 0302 	bic.w	r3, r3, #2
   2d13c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2d140:	2a00      	cmp	r2, #0
   2d142:	d1f7      	bne.n	2d134 <bt_gatt_change_aware+0x58>
		bt_att_clear_out_of_sync_sent(conn);
   2d144:	4638      	mov	r0, r7
   2d146:	f7ff fc88 	bl	2ca5a <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d14a:	e8d5 3fef 	ldaex	r3, [r5]
   2d14e:	f043 0301 	orr.w	r3, r3, #1
   2d152:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2d156:	2a00      	cmp	r2, #0
   2d158:	d0cc      	beq.n	2d0f4 <bt_gatt_change_aware+0x18>
   2d15a:	e7f6      	b.n	2d14a <bt_gatt_change_aware+0x6e>
		bt_att_clear_out_of_sync_sent(conn);
   2d15c:	4638      	mov	r0, r7
   2d15e:	f7ff fc7c 	bl	2ca5a <bt_att_clear_out_of_sync_sent>
   2d162:	e8d5 3fef 	ldaex	r3, [r5]
   2d166:	f043 0301 	orr.w	r3, r3, #1
   2d16a:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2d16e:	2a00      	cmp	r2, #0
   2d170:	d0c0      	beq.n	2d0f4 <bt_gatt_change_aware+0x18>
   2d172:	e7f6      	b.n	2d162 <bt_gatt_change_aware+0x86>
		return true;
   2d174:	2601      	movs	r6, #1
   2d176:	e7bd      	b.n	2d0f4 <bt_gatt_change_aware+0x18>

0002d178 <bt_smp_recv>:
{
   2d178:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d17a:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2d17c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2d17e:	f04f 32ff 	mov.w	r2, #4294967295
   2d182:	f04f 33ff 	mov.w	r3, #4294967295
   2d186:	2100      	movs	r1, #0
   2d188:	4608      	mov	r0, r1
   2d18a:	f7fe fdfa 	bl	2bd82 <bt_l2cap_create_pdu_timeout>
   2d18e:	4604      	mov	r4, r0
   2d190:	f100 0608 	add.w	r6, r0, #8
   2d194:	2101      	movs	r1, #1
   2d196:	4630      	mov	r0, r6
   2d198:	f7f2 fab2 	bl	1f700 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2d19c:	2505      	movs	r5, #5
   2d19e:	7005      	strb	r5, [r0, #0]
   2d1a0:	2101      	movs	r1, #1
   2d1a2:	4630      	mov	r0, r6
   2d1a4:	f7f2 faac 	bl	1f700 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2d1a8:	7005      	strb	r5, [r0, #0]
   2d1aa:	2300      	movs	r3, #0
   2d1ac:	9300      	str	r3, [sp, #0]
   2d1ae:	4622      	mov	r2, r4
   2d1b0:	2106      	movs	r1, #6
   2d1b2:	4638      	mov	r0, r7
   2d1b4:	f7fe fdea 	bl	2bd8c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2d1b8:	b910      	cbnz	r0, 2d1c0 <bt_smp_recv+0x48>
}
   2d1ba:	2000      	movs	r0, #0
   2d1bc:	b003      	add	sp, #12
   2d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   2d1c0:	4620      	mov	r0, r4
   2d1c2:	f7f2 f97f 	bl	1f4c4 <net_buf_unref>
   2d1c6:	e7f8      	b.n	2d1ba <bt_smp_recv+0x42>

0002d1c8 <bt_smp_sign>:
}
   2d1c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d1cc:	4770      	bx	lr

0002d1ce <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2d1ce:	2000      	movs	r0, #0
   2d1d0:	4770      	bx	lr

0002d1d2 <pool_get_uninit>:
{
   2d1d2:	b538      	push	{r3, r4, r5, lr}
   2d1d4:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d1d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2d1da:	3317      	adds	r3, #23
   2d1dc:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2d1e0:	8c02      	ldrh	r2, [r0, #32]
   2d1e2:	1a52      	subs	r2, r2, r1
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2d1e4:	6b05      	ldr	r5, [r0, #48]	; 0x30
   2d1e6:	fb03 5502 	mla	r5, r3, r2, r5
	buf->pool_id = pool_id(pool);
   2d1ea:	f7f1 fe95 	bl	1ef18 <pool_id>
   2d1ee:	71a8      	strb	r0, [r5, #6]
	buf->user_data_size = pool->user_data_size;
   2d1f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2d1f4:	71eb      	strb	r3, [r5, #7]
}
   2d1f6:	4628      	mov	r0, r5
   2d1f8:	bd38      	pop	{r3, r4, r5, pc}

0002d1fa <fixed_data_unref>:
}
   2d1fa:	4770      	bx	lr

0002d1fc <data_alloc>:
{
   2d1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d200:	4604      	mov	r4, r0
   2d202:	460d      	mov	r5, r1
   2d204:	4617      	mov	r7, r2
   2d206:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d208:	7980      	ldrb	r0, [r0, #6]
   2d20a:	f7f1 fe91 	bl	1ef30 <net_buf_pool_get>
	return pool->alloc->cb->alloc(buf, size, timeout);
   2d20e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d210:	681b      	ldr	r3, [r3, #0]
   2d212:	f8d3 8000 	ldr.w	r8, [r3]
   2d216:	463a      	mov	r2, r7
   2d218:	4633      	mov	r3, r6
   2d21a:	4629      	mov	r1, r5
   2d21c:	4620      	mov	r0, r4
   2d21e:	47c0      	blx	r8
}
   2d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d224 <net_buf_destroy>:
{
   2d224:	b510      	push	{r4, lr}
   2d226:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d228:	7980      	ldrb	r0, [r0, #6]
   2d22a:	f7f1 fe81 	bl	1ef30 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2d22e:	4621      	mov	r1, r4
   2d230:	f001 fe83 	bl	2ef3a <k_queue_prepend>
}
   2d234:	bd10      	pop	{r4, pc}

0002d236 <data_unref>:
{
   2d236:	b538      	push	{r3, r4, r5, lr}
   2d238:	4604      	mov	r4, r0
   2d23a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d23c:	7980      	ldrb	r0, [r0, #6]
   2d23e:	f7f1 fe77 	bl	1ef30 <net_buf_pool_get>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2d242:	7963      	ldrb	r3, [r4, #5]
   2d244:	f013 0f02 	tst.w	r3, #2
   2d248:	d105      	bne.n	2d256 <data_unref+0x20>
	pool->alloc->cb->unref(buf, data);
   2d24a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d24c:	681b      	ldr	r3, [r3, #0]
   2d24e:	689b      	ldr	r3, [r3, #8]
   2d250:	4629      	mov	r1, r5
   2d252:	4620      	mov	r0, r4
   2d254:	4798      	blx	r3
}
   2d256:	bd38      	pop	{r3, r4, r5, pc}

0002d258 <net_buf_id>:
{
   2d258:	b510      	push	{r4, lr}
   2d25a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d25c:	7980      	ldrb	r0, [r0, #6]
   2d25e:	f7f1 fe67 	bl	1ef30 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d262:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2d266:	3317      	adds	r3, #23
   2d268:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2d26c:	6b02      	ldr	r2, [r0, #48]	; 0x30
   2d26e:	1aa4      	subs	r4, r4, r2
}
   2d270:	fbb4 f0f3 	udiv	r0, r4, r3
   2d274:	bd10      	pop	{r4, pc}

0002d276 <fixed_data_alloc>:
{
   2d276:	b570      	push	{r4, r5, r6, lr}
   2d278:	4604      	mov	r4, r0
   2d27a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d27c:	7980      	ldrb	r0, [r0, #6]
   2d27e:	f7f1 fe57 	bl	1ef30 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d282:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d284:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2d286:	682a      	ldr	r2, [r5, #0]
   2d288:	6819      	ldr	r1, [r3, #0]
   2d28a:	428a      	cmp	r2, r1
   2d28c:	bf28      	it	cs
   2d28e:	460a      	movcs	r2, r1
   2d290:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2d292:	685d      	ldr	r5, [r3, #4]
   2d294:	681e      	ldr	r6, [r3, #0]
   2d296:	4620      	mov	r0, r4
   2d298:	f7ff ffde 	bl	2d258 <net_buf_id>
}
   2d29c:	fb00 5006 	mla	r0, r0, r6, r5
   2d2a0:	bd70      	pop	{r4, r5, r6, pc}

0002d2a2 <net_buf_alloc_fixed>:
{
   2d2a2:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d2a4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2d2a6:	6849      	ldr	r1, [r1, #4]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2d2a8:	6809      	ldr	r1, [r1, #0]
   2d2aa:	f7f1 fe71 	bl	1ef90 <net_buf_alloc_len>
}
   2d2ae:	bd08      	pop	{r3, pc}

0002d2b0 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2d2b0:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d2b2:	6803      	ldr	r3, [r0, #0]
   2d2b4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d2b6:	2102      	movs	r1, #2
   2d2b8:	f7f2 f9c4 	bl	1f644 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2d2bc:	4620      	mov	r0, r4
   2d2be:	bd10      	pop	{r4, pc}

0002d2c0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2d2c0:	6802      	ldr	r2, [r0, #0]
   2d2c2:	6880      	ldr	r0, [r0, #8]
}
   2d2c4:	1a10      	subs	r0, r2, r0
   2d2c6:	4770      	bx	lr

0002d2c8 <net_buf_simple_push_u8>:
{
   2d2c8:	b510      	push	{r4, lr}
   2d2ca:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2d2cc:	2101      	movs	r1, #1
   2d2ce:	f7f2 f9f5 	bl	1f6bc <net_buf_simple_push>
	*data = val;
   2d2d2:	7004      	strb	r4, [r0, #0]
}
   2d2d4:	bd10      	pop	{r4, pc}

0002d2d6 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2d2d6:	b538      	push	{r3, r4, r5, lr}
   2d2d8:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d2da:	88c5      	ldrh	r5, [r0, #6]
   2d2dc:	f7ff fff0 	bl	2d2c0 <net_buf_simple_headroom>
   2d2e0:	1a2d      	subs	r5, r5, r0
   2d2e2:	88a0      	ldrh	r0, [r4, #4]
}
   2d2e4:	1a28      	subs	r0, r5, r0
   2d2e6:	bd38      	pop	{r3, r4, r5, pc}

0002d2e8 <net_buf_simple_add_mem>:
{
   2d2e8:	b538      	push	{r3, r4, r5, lr}
   2d2ea:	460d      	mov	r5, r1
   2d2ec:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d2ee:	4611      	mov	r1, r2
   2d2f0:	f7f2 fa06 	bl	1f700 <net_buf_simple_add>
   2d2f4:	4622      	mov	r2, r4
   2d2f6:	4629      	mov	r1, r5
   2d2f8:	f7fd ff1e 	bl	2b138 <memcpy>
}
   2d2fc:	bd38      	pop	{r3, r4, r5, pc}

0002d2fe <net_buf_simple_add_u8>:
{
   2d2fe:	b510      	push	{r4, lr}
   2d300:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2d302:	2101      	movs	r1, #1
   2d304:	f7f2 f9fc 	bl	1f700 <net_buf_simple_add>
	*u8 = val;
   2d308:	7004      	strb	r4, [r0, #0]
}
   2d30a:	bd10      	pop	{r4, pc}

0002d30c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2d30c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2d30e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2d312:	0089      	lsls	r1, r1, #2
   2d314:	3180      	adds	r1, #128	; 0x80
}
   2d316:	4408      	add	r0, r1
   2d318:	4770      	bx	lr

0002d31a <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2d31a:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2d31c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2d320:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2d324:	4770      	bx	lr

0002d326 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2d326:	6900      	ldr	r0, [r0, #16]
}
   2d328:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   2d32c:	4770      	bx	lr

0002d32e <set_off_state>:
   2d32e:	f04f 0320 	mov.w	r3, #32
   2d332:	f3ef 8211 	mrs	r2, BASEPRI
   2d336:	f383 8812 	msr	BASEPRI_MAX, r3
   2d33a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d33e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2d340:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2d344:	d001      	beq.n	2d34a <set_off_state+0x1c>
   2d346:	428b      	cmp	r3, r1
   2d348:	d107      	bne.n	2d35a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2d34a:	2301      	movs	r3, #1
   2d34c:	6003      	str	r3, [r0, #0]
	int err = 0;
   2d34e:	2000      	movs	r0, #0
	__asm__ volatile(
   2d350:	f382 8811 	msr	BASEPRI, r2
   2d354:	f3bf 8f6f 	isb	sy
}
   2d358:	4770      	bx	lr
		err = -EPERM;
   2d35a:	f04f 30ff 	mov.w	r0, #4294967295
   2d35e:	e7f7      	b.n	2d350 <set_off_state+0x22>

0002d360 <set_starting_state>:
	__asm__ volatile(
   2d360:	f04f 0320 	mov.w	r3, #32
   2d364:	f3ef 8211 	mrs	r2, BASEPRI
   2d368:	f383 8812 	msr	BASEPRI_MAX, r3
   2d36c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d370:	6803      	ldr	r3, [r0, #0]
   2d372:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2d376:	f003 0307 	and.w	r3, r3, #7
   2d37a:	2b01      	cmp	r3, #1
   2d37c:	d008      	beq.n	2d390 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2d37e:	458c      	cmp	ip, r1
   2d380:	d009      	beq.n	2d396 <set_starting_state+0x36>
		err = -EPERM;
   2d382:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2d386:	f382 8811 	msr	BASEPRI, r2
   2d38a:	f3bf 8f6f 	isb	sy
}
   2d38e:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2d390:	6001      	str	r1, [r0, #0]
	int err = 0;
   2d392:	2000      	movs	r0, #0
   2d394:	e7f7      	b.n	2d386 <set_starting_state+0x26>
		err = -EALREADY;
   2d396:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2d39a:	e7f4      	b.n	2d386 <set_starting_state+0x26>

0002d39c <set_on_state>:
	__asm__ volatile(
   2d39c:	f04f 0320 	mov.w	r3, #32
   2d3a0:	f3ef 8211 	mrs	r2, BASEPRI
   2d3a4:	f383 8812 	msr	BASEPRI_MAX, r3
   2d3a8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2d3ac:	6803      	ldr	r3, [r0, #0]
   2d3ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2d3b2:	f043 0302 	orr.w	r3, r3, #2
   2d3b6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2d3b8:	f382 8811 	msr	BASEPRI, r2
   2d3bc:	f3bf 8f6f 	isb	sy
}
   2d3c0:	4770      	bx	lr

0002d3c2 <clkstarted_handle>:
{
   2d3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3c4:	4606      	mov	r6, r0
   2d3c6:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2d3c8:	f7ff ffa0 	bl	2d30c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2d3cc:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2d3ce:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2d3d0:	2300      	movs	r3, #0
   2d3d2:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2d3d6:	f7ff ffe1 	bl	2d39c <set_on_state>
	if (callback) {
   2d3da:	b11d      	cbz	r5, 2d3e4 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2d3dc:	463a      	mov	r2, r7
   2d3de:	4621      	mov	r1, r4
   2d3e0:	4630      	mov	r0, r6
   2d3e2:	47a8      	blx	r5
}
   2d3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d3e6 <async_start>:
{
   2d3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d3ea:	4606      	mov	r6, r0
   2d3ec:	4690      	mov	r8, r2
   2d3ee:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2d3f0:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2d3f2:	4629      	mov	r1, r5
   2d3f4:	f7ff ff8a 	bl	2d30c <get_sub_data>
   2d3f8:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2d3fa:	9906      	ldr	r1, [sp, #24]
   2d3fc:	3008      	adds	r0, #8
   2d3fe:	f7ff ffaf 	bl	2d360 <set_starting_state>
	if (err < 0) {
   2d402:	2800      	cmp	r0, #0
   2d404:	db09      	blt.n	2d41a <async_start+0x34>
	subdata->cb = cb;
   2d406:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2d40a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2d40c:	4629      	mov	r1, r5
   2d40e:	4630      	mov	r0, r6
   2d410:	f7ff ff83 	bl	2d31a <get_sub_config>
   2d414:	6803      	ldr	r3, [r0, #0]
   2d416:	4798      	blx	r3
	return 0;
   2d418:	2000      	movs	r0, #0
}
   2d41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d41e <api_start>:
{
   2d41e:	b510      	push	{r4, lr}
   2d420:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2d422:	2480      	movs	r4, #128	; 0x80
   2d424:	9400      	str	r4, [sp, #0]
   2d426:	f7ff ffde 	bl	2d3e6 <async_start>
}
   2d42a:	b002      	add	sp, #8
   2d42c:	bd10      	pop	{r4, pc}

0002d42e <onoff_started_callback>:
{
   2d42e:	b510      	push	{r4, lr}
   2d430:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2d432:	b2c9      	uxtb	r1, r1
   2d434:	f7ff ff77 	bl	2d326 <get_onoff_manager>
	notify(mgr, 0);
   2d438:	2100      	movs	r1, #0
   2d43a:	47a0      	blx	r4
}
   2d43c:	bd10      	pop	{r4, pc}

0002d43e <hfclk_start>:
{
   2d43e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2d440:	2001      	movs	r0, #1
   2d442:	f7f5 f9fb 	bl	2283c <nrfx_clock_start>
}
   2d446:	bd08      	pop	{r3, pc}

0002d448 <hfclkaudio_start>:
{
   2d448:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2d44a:	2003      	movs	r0, #3
   2d44c:	f7f5 f9f6 	bl	2283c <nrfx_clock_start>
}
   2d450:	bd08      	pop	{r3, pc}

0002d452 <hfclk192m_start>:
{
   2d452:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2d454:	2002      	movs	r0, #2
   2d456:	f7f5 f9f1 	bl	2283c <nrfx_clock_start>
}
   2d45a:	bd08      	pop	{r3, pc}

0002d45c <lfclk_start>:
{
   2d45c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2d45e:	2000      	movs	r0, #0
   2d460:	f7f5 f9ec 	bl	2283c <nrfx_clock_start>
}
   2d464:	bd08      	pop	{r3, pc}

0002d466 <hfclk_stop>:
{
   2d466:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2d468:	2001      	movs	r0, #1
   2d46a:	f7f5 fa7b 	bl	22964 <nrfx_clock_stop>
}
   2d46e:	bd08      	pop	{r3, pc}

0002d470 <hfclkaudio_stop>:
{
   2d470:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2d472:	2003      	movs	r0, #3
   2d474:	f7f5 fa76 	bl	22964 <nrfx_clock_stop>
}
   2d478:	bd08      	pop	{r3, pc}

0002d47a <hfclk192m_stop>:
{
   2d47a:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2d47c:	2002      	movs	r0, #2
   2d47e:	f7f5 fa71 	bl	22964 <nrfx_clock_stop>
}
   2d482:	bd08      	pop	{r3, pc}

0002d484 <lfclk_stop>:
{
   2d484:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2d486:	2000      	movs	r0, #0
   2d488:	f7f5 fa6c 	bl	22964 <nrfx_clock_stop>
}
   2d48c:	bd08      	pop	{r3, pc}

0002d48e <api_stop>:
{
   2d48e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2d490:	2280      	movs	r2, #128	; 0x80
   2d492:	f7f2 fa59 	bl	1f948 <stop>
}
   2d496:	bd08      	pop	{r3, pc}

0002d498 <k_msleep>:
{
   2d498:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2d49a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d49e:	17c1      	asrs	r1, r0, #31
   2d4a0:	03c9      	lsls	r1, r1, #15
   2d4a2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2d4a6:	03c0      	lsls	r0, r0, #15
   2d4a8:	f240 33e7 	movw	r3, #999	; 0x3e7
   2d4ac:	18c0      	adds	r0, r0, r3
   2d4ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d4b2:	f04f 0300 	mov.w	r3, #0
   2d4b6:	f141 0100 	adc.w	r1, r1, #0
   2d4ba:	f7e2 fe4d 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2d4be:	f7fa fb01 	bl	27ac4 <z_impl_k_sleep>
}
   2d4c2:	bd08      	pop	{r3, pc}

0002d4c4 <blocking_start_callback>:
{
   2d4c4:	b508      	push	{r3, lr}
   2d4c6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2d4c8:	f7f8 fa02 	bl	258d0 <z_impl_k_sem_give>
}
   2d4cc:	bd08      	pop	{r3, pc}

0002d4ce <nrf_gpio_pin_present_check>:
    switch (port)
   2d4ce:	0943      	lsrs	r3, r0, #5
   2d4d0:	d00a      	beq.n	2d4e8 <nrf_gpio_pin_present_check+0x1a>
   2d4d2:	2b01      	cmp	r3, #1
   2d4d4:	d10b      	bne.n	2d4ee <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2d4d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2d4da:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2d4de:	fa23 f000 	lsr.w	r0, r3, r0
}
   2d4e2:	f000 0001 	and.w	r0, r0, #1
   2d4e6:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2d4e8:	f04f 33ff 	mov.w	r3, #4294967295
   2d4ec:	e7f5      	b.n	2d4da <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2d4ee:	2300      	movs	r3, #0
   2d4f0:	e7f3      	b.n	2d4da <nrf_gpio_pin_present_check+0xc>

0002d4f2 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2d4f2:	460b      	mov	r3, r1
   2d4f4:	b139      	cbz	r1, 2d506 <sys_slist_remove+0x14>
	return node->next;
   2d4f6:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2d4f8:	6019      	str	r1, [r3, #0]
	return list->tail;
   2d4fa:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d4fc:	428a      	cmp	r2, r1
   2d4fe:	d009      	beq.n	2d514 <sys_slist_remove+0x22>
	parent->next = child;
   2d500:	2300      	movs	r3, #0
   2d502:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d504:	4770      	bx	lr
	return node->next;
   2d506:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2d508:	6003      	str	r3, [r0, #0]
	return list->tail;
   2d50a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d50c:	428a      	cmp	r2, r1
   2d50e:	d1f7      	bne.n	2d500 <sys_slist_remove+0xe>
	list->tail = node;
   2d510:	6043      	str	r3, [r0, #4]
}
   2d512:	e7f5      	b.n	2d500 <sys_slist_remove+0xe>
	list->tail = node;
   2d514:	6043      	str	r3, [r0, #4]
}
   2d516:	e7f3      	b.n	2d500 <sys_slist_remove+0xe>

0002d518 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d518:	b508      	push	{r3, lr}
   2d51a:	460a      	mov	r2, r1
	return list->head;
   2d51c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d51e:	2100      	movs	r1, #0
   2d520:	e001      	b.n	2d526 <sys_slist_find_and_remove+0xe>
   2d522:	4619      	mov	r1, r3
   2d524:	681b      	ldr	r3, [r3, #0]
   2d526:	b12b      	cbz	r3, 2d534 <sys_slist_find_and_remove+0x1c>
   2d528:	4293      	cmp	r3, r2
   2d52a:	d1fa      	bne.n	2d522 <sys_slist_find_and_remove+0xa>
   2d52c:	f7ff ffe1 	bl	2d4f2 <sys_slist_remove>
   2d530:	2001      	movs	r0, #1
   2d532:	e000      	b.n	2d536 <sys_slist_find_and_remove+0x1e>
   2d534:	2000      	movs	r0, #0
   2d536:	bd08      	pop	{r3, pc}

0002d538 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d538:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2d53c:	0580      	lsls	r0, r0, #22
   2d53e:	0d80      	lsrs	r0, r0, #22
   2d540:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   2d544:	d033      	beq.n	2d5ae <get_drive+0x76>
   2d546:	d816      	bhi.n	2d576 <get_drive+0x3e>
   2d548:	2806      	cmp	r0, #6
   2d54a:	d02c      	beq.n	2d5a6 <get_drive+0x6e>
   2d54c:	d906      	bls.n	2d55c <get_drive+0x24>
   2d54e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2d552:	d10d      	bne.n	2d570 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   2d554:	2301      	movs	r3, #1
   2d556:	700b      	strb	r3, [r1, #0]
	return 0;
   2d558:	2000      	movs	r0, #0
		break;
   2d55a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d55c:	b300      	cbz	r0, 2d5a0 <get_drive+0x68>
   2d55e:	2802      	cmp	r0, #2
   2d560:	d103      	bne.n	2d56a <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   2d562:	2304      	movs	r3, #4
   2d564:	700b      	strb	r3, [r1, #0]
	return 0;
   2d566:	2000      	movs	r0, #0
		break;
   2d568:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d56a:	f06f 0015 	mvn.w	r0, #21
   2d56e:	4770      	bx	lr
   2d570:	f06f 0015 	mvn.w	r0, #21
   2d574:	4770      	bx	lr
   2d576:	f240 2302 	movw	r3, #514	; 0x202
   2d57a:	4298      	cmp	r0, r3
   2d57c:	d01b      	beq.n	2d5b6 <get_drive+0x7e>
   2d57e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   2d582:	d103      	bne.n	2d58c <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   2d584:	2303      	movs	r3, #3
   2d586:	700b      	strb	r3, [r1, #0]
	return 0;
   2d588:	2000      	movs	r0, #0
		break;
   2d58a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d58c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2d590:	d103      	bne.n	2d59a <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   2d592:	2302      	movs	r3, #2
   2d594:	700b      	strb	r3, [r1, #0]
	return 0;
   2d596:	2000      	movs	r0, #0
		break;
   2d598:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2d59a:	f06f 0015 	mvn.w	r0, #21
   2d59e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2d5a0:	2000      	movs	r0, #0
   2d5a2:	7008      	strb	r0, [r1, #0]
		break;
   2d5a4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2d5a6:	2306      	movs	r3, #6
   2d5a8:	700b      	strb	r3, [r1, #0]
	return 0;
   2d5aa:	2000      	movs	r0, #0
		break;
   2d5ac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2d5ae:	2307      	movs	r3, #7
   2d5b0:	700b      	strb	r3, [r1, #0]
	return 0;
   2d5b2:	2000      	movs	r0, #0
		break;
   2d5b4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   2d5b6:	2305      	movs	r3, #5
   2d5b8:	700b      	strb	r3, [r1, #0]
	return 0;
   2d5ba:	2000      	movs	r0, #0
}
   2d5bc:	4770      	bx	lr

0002d5be <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2d5be:	f010 0f10 	tst.w	r0, #16
   2d5c2:	d104      	bne.n	2d5ce <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2d5c4:	f010 0f20 	tst.w	r0, #32
   2d5c8:	d103      	bne.n	2d5d2 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2d5ca:	2000      	movs	r0, #0
   2d5cc:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2d5ce:	2003      	movs	r0, #3
   2d5d0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2d5d2:	2001      	movs	r0, #1
}
   2d5d4:	4770      	bx	lr

0002d5d6 <gpio_nrfx_port_get_raw>:
	return port->config;
   2d5d6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d5d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d5da:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2d5dc:	600b      	str	r3, [r1, #0]
}
   2d5de:	2000      	movs	r0, #0
   2d5e0:	4770      	bx	lr

0002d5e2 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2d5e2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d5e4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2d5e6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2d5ea:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2d5ee:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
   2d5f0:	60d9      	str	r1, [r3, #12]
}
   2d5f2:	2000      	movs	r0, #0
   2d5f4:	4770      	bx	lr

0002d5f6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2d5f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d5f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2d5fa:	6099      	str	r1, [r3, #8]
}
   2d5fc:	2000      	movs	r0, #0
   2d5fe:	4770      	bx	lr

0002d600 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2d600:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d602:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2d604:	60d9      	str	r1, [r3, #12]
}
   2d606:	2000      	movs	r0, #0
   2d608:	4770      	bx	lr

0002d60a <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2d60a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d60c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d60e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2d610:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2d614:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2d616:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
   2d618:	60d3      	str	r3, [r2, #12]
}
   2d61a:	2000      	movs	r0, #0
   2d61c:	4770      	bx	lr

0002d61e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2d61e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   2d622:	d007      	beq.n	2d634 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2d624:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   2d628:	d00d      	beq.n	2d646 <get_trigger+0x28>
   2d62a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2d62e:	d008      	beq.n	2d642 <get_trigger+0x24>
   2d630:	2001      	movs	r0, #1
}
   2d632:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2d634:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2d638:	d001      	beq.n	2d63e <get_trigger+0x20>
   2d63a:	2005      	movs	r0, #5
   2d63c:	4770      	bx	lr
   2d63e:	2004      	movs	r0, #4
   2d640:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2d642:	2002      	movs	r0, #2
   2d644:	4770      	bx	lr
   2d646:	2003      	movs	r0, #3
   2d648:	4770      	bx	lr

0002d64a <gpio_nrfx_manage_callback>:
{
   2d64a:	b508      	push	{r3, lr}
	return port->data;
   2d64c:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2d64e:	3004      	adds	r0, #4
   2d650:	f7f2 fb36 	bl	1fcc0 <gpio_manage_callback>
}
   2d654:	bd08      	pop	{r3, pc}

0002d656 <nrf_gpio_pin_dir_get>:
{
   2d656:	b500      	push	{lr}
   2d658:	b083      	sub	sp, #12
   2d65a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d65c:	a801      	add	r0, sp, #4
   2d65e:	f7f2 fb79 	bl	1fd54 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2d662:	9b01      	ldr	r3, [sp, #4]
   2d664:	3380      	adds	r3, #128	; 0x80
   2d666:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   2d66a:	f000 0001 	and.w	r0, r0, #1
   2d66e:	b003      	add	sp, #12
   2d670:	f85d fb04 	ldr.w	pc, [sp], #4

0002d674 <nrfx_gpio_handler>:
{
   2d674:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   2d676:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2d67a:	0940      	lsrs	r0, r0, #5
   2d67c:	f7f2 fb12 	bl	1fca4 <get_dev>
	if (port == NULL) {
   2d680:	b130      	cbz	r0, 2d690 <nrfx_gpio_handler+0x1c>
   2d682:	4601      	mov	r1, r0
	return port->data;
   2d684:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   2d686:	2201      	movs	r2, #1
   2d688:	40a2      	lsls	r2, r4
   2d68a:	3004      	adds	r0, #4
   2d68c:	f7f2 fb9a 	bl	1fdc4 <gpio_fire_callbacks>
}
   2d690:	bd10      	pop	{r4, pc}

0002d692 <nrf_gpio_pin_present_check>:
    switch (port)
   2d692:	0943      	lsrs	r3, r0, #5
   2d694:	d00a      	beq.n	2d6ac <nrf_gpio_pin_present_check+0x1a>
   2d696:	2b01      	cmp	r3, #1
   2d698:	d10b      	bne.n	2d6b2 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2d69a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2d69e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2d6a2:	fa23 f000 	lsr.w	r0, r3, r0
}
   2d6a6:	f000 0001 	and.w	r0, r0, #1
   2d6aa:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2d6ac:	f04f 33ff 	mov.w	r3, #4294967295
   2d6b0:	e7f5      	b.n	2d69e <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2d6b2:	2300      	movs	r3, #0
   2d6b4:	e7f3      	b.n	2d69e <nrf_gpio_pin_present_check+0xc>

0002d6b6 <channel_psel_get>:
{
   2d6b6:	b510      	push	{r4, lr}
   2d6b8:	460c      	mov	r4, r1
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
   2d6ba:	b2c1      	uxtb	r1, r0
   2d6bc:	6810      	ldr	r0, [r2, #0]
   2d6be:	f7f2 fcfd 	bl	200bc <nrf_pwm_pin_get>
   2d6c2:	6020      	str	r0, [r4, #0]
}
   2d6c4:	43c0      	mvns	r0, r0
   2d6c6:	0fc0      	lsrs	r0, r0, #31
   2d6c8:	bd10      	pop	{r4, pc}

0002d6ca <nrf_gpio_pin_clear>:
{
   2d6ca:	b500      	push	{lr}
   2d6cc:	b083      	sub	sp, #12
   2d6ce:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d6d0:	a801      	add	r0, sp, #4
   2d6d2:	f7f2 fd0f 	bl	200f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2d6d6:	9a01      	ldr	r2, [sp, #4]
   2d6d8:	2301      	movs	r3, #1
   2d6da:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2d6dc:	60c3      	str	r3, [r0, #12]
}
   2d6de:	b003      	add	sp, #12
   2d6e0:	f85d fb04 	ldr.w	pc, [sp], #4

0002d6e4 <nrf_gpio_pin_set>:
{
   2d6e4:	b500      	push	{lr}
   2d6e6:	b083      	sub	sp, #12
   2d6e8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d6ea:	a801      	add	r0, sp, #4
   2d6ec:	f7f2 fd02 	bl	200f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d6f0:	9a01      	ldr	r2, [sp, #4]
   2d6f2:	2301      	movs	r3, #1
   2d6f4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2d6f6:	6083      	str	r3, [r0, #8]
}
   2d6f8:	b003      	add	sp, #12
   2d6fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002d6fe <nrf_gpio_pin_write>:
{
   2d6fe:	b508      	push	{r3, lr}
    if (value == 0)
   2d700:	b911      	cbnz	r1, 2d708 <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   2d702:	f7ff ffe2 	bl	2d6ca <nrf_gpio_pin_clear>
}
   2d706:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   2d708:	f7ff ffec 	bl	2d6e4 <nrf_gpio_pin_set>
}
   2d70c:	e7fb      	b.n	2d706 <nrf_gpio_pin_write+0x8>

0002d70e <nrf_gpio_pin_out_read>:
{
   2d70e:	b500      	push	{lr}
   2d710:	b083      	sub	sp, #12
   2d712:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d714:	a801      	add	r0, sp, #4
   2d716:	f7f2 fced 	bl	200f4 <nrf_gpio_pin_port_decode>
    return p_reg->OUT;
   2d71a:	6840      	ldr	r0, [r0, #4]
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   2d71c:	9b01      	ldr	r3, [sp, #4]
   2d71e:	40d8      	lsrs	r0, r3
}
   2d720:	f000 0001 	and.w	r0, r0, #1
   2d724:	b003      	add	sp, #12
   2d726:	f85d fb04 	ldr.w	pc, [sp], #4

0002d72a <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2d72a:	b510      	push	{r4, lr}
   2d72c:	b082      	sub	sp, #8
   2d72e:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2d730:	aa01      	add	r2, sp, #4
   2d732:	f000 fa5c 	bl	2dbee <pinctrl_lookup_state>
	if (ret < 0) {
   2d736:	2800      	cmp	r0, #0
   2d738:	db05      	blt.n	2d746 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2d73a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2d73c:	6822      	ldr	r2, [r4, #0]
   2d73e:	7919      	ldrb	r1, [r3, #4]
   2d740:	6818      	ldr	r0, [r3, #0]
   2d742:	f7f4 f8dd 	bl	21900 <pinctrl_configure_pins>
}
   2d746:	b002      	add	sp, #8
   2d748:	bd10      	pop	{r4, pc}

0002d74a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   2d74a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2d74c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2d74e:	f04f 0120 	mov.w	r1, #32
   2d752:	f3ef 8311 	mrs	r3, BASEPRI
   2d756:	f381 8812 	msr	BASEPRI_MAX, r1
   2d75a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d75e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d762:	b131      	cbz	r1, 2d772 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d764:	2100      	movs	r1, #0
   2d766:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   2d76a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d76e:	2101      	movs	r1, #1
   2d770:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   2d772:	f383 8811 	msr	BASEPRI, r3
   2d776:	f3bf 8f6f 	isb	sy
}
   2d77a:	4770      	bx	lr

0002d77c <uarte_nrfx_isr_int>:
{
   2d77c:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2d77e:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   2d780:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   2d782:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2d786:	f413 7f80 	tst.w	r3, #256	; 0x100
   2d78a:	d002      	beq.n	2d792 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d78c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2d790:	b9d3      	cbnz	r3, 2d7c8 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2d792:	686b      	ldr	r3, [r5, #4]
   2d794:	f013 0f10 	tst.w	r3, #16
   2d798:	d015      	beq.n	2d7c6 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   2d79a:	f04f 0220 	mov.w	r2, #32
   2d79e:	f3ef 8311 	mrs	r3, BASEPRI
   2d7a2:	f382 8812 	msr	BASEPRI_MAX, r2
   2d7a6:	f3bf 8f6f 	isb	sy
   2d7aa:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2d7ae:	b112      	cbz	r2, 2d7b6 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d7b0:	2200      	movs	r2, #0
   2d7b2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2d7b6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2d7ba:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   2d7be:	f383 8811 	msr	BASEPRI, r3
   2d7c2:	f3bf 8f6f 	isb	sy
}
   2d7c6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2d7c8:	f7ff ffbf 	bl	2d74a <endtx_isr>
   2d7cc:	e7e1      	b.n	2d792 <uarte_nrfx_isr_int+0x16>

0002d7ce <uarte_nrfx_configure>:
{
   2d7ce:	b570      	push	{r4, r5, r6, lr}
   2d7d0:	b082      	sub	sp, #8
   2d7d2:	4605      	mov	r5, r0
   2d7d4:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   2d7d6:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   2d7d8:	794b      	ldrb	r3, [r1, #5]
   2d7da:	2b01      	cmp	r3, #1
   2d7dc:	d006      	beq.n	2d7ec <uarte_nrfx_configure+0x1e>
   2d7de:	2b03      	cmp	r3, #3
   2d7e0:	d011      	beq.n	2d806 <uarte_nrfx_configure+0x38>
   2d7e2:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   2d7e6:	4610      	mov	r0, r2
   2d7e8:	b002      	add	sp, #8
   2d7ea:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2d7ec:	2300      	movs	r3, #0
   2d7ee:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2d7f2:	79a3      	ldrb	r3, [r4, #6]
   2d7f4:	2b03      	cmp	r3, #3
   2d7f6:	d146      	bne.n	2d886 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   2d7f8:	79e3      	ldrb	r3, [r4, #7]
   2d7fa:	b143      	cbz	r3, 2d80e <uarte_nrfx_configure+0x40>
   2d7fc:	2b01      	cmp	r3, #1
   2d7fe:	d015      	beq.n	2d82c <uarte_nrfx_configure+0x5e>
   2d800:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2d804:	e7ef      	b.n	2d7e6 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2d806:	2310      	movs	r3, #16
   2d808:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   2d80c:	e7f1      	b.n	2d7f2 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2d80e:	2300      	movs	r3, #0
   2d810:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   2d814:	2300      	movs	r3, #0
   2d816:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   2d81a:	7923      	ldrb	r3, [r4, #4]
   2d81c:	2b01      	cmp	r3, #1
   2d81e:	d02a      	beq.n	2d876 <uarte_nrfx_configure+0xa8>
   2d820:	2b02      	cmp	r3, #2
   2d822:	d024      	beq.n	2d86e <uarte_nrfx_configure+0xa0>
   2d824:	b133      	cbz	r3, 2d834 <uarte_nrfx_configure+0x66>
   2d826:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2d82a:	e7dc      	b.n	2d7e6 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2d82c:	2301      	movs	r3, #1
   2d82e:	f88d 3000 	strb.w	r3, [sp]
		break;
   2d832:	e7ef      	b.n	2d814 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2d834:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2d838:	6821      	ldr	r1, [r4, #0]
   2d83a:	4628      	mov	r0, r5
   2d83c:	f7f2 fe80 	bl	20540 <baudrate_set>
   2d840:	4602      	mov	r2, r0
   2d842:	bb18      	cbnz	r0, 2d88c <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   2d844:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   2d846:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2d848:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   2d84c:	f89d 0002 	ldrb.w	r0, [sp, #2]
   2d850:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   2d852:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   2d856:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   2d858:	f89d 0000 	ldrb.w	r0, [sp]
   2d85c:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2d85e:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   2d862:	3604      	adds	r6, #4
   2d864:	e894 0003 	ldmia.w	r4, {r0, r1}
   2d868:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   2d86c:	e7bb      	b.n	2d7e6 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2d86e:	230e      	movs	r3, #14
   2d870:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   2d874:	e7e0      	b.n	2d838 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2d876:	230e      	movs	r3, #14
   2d878:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   2d87c:	f44f 7380 	mov.w	r3, #256	; 0x100
   2d880:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   2d884:	e7d8      	b.n	2d838 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   2d886:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2d88a:	e7ac      	b.n	2d7e6 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   2d88c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2d890:	e7a9      	b.n	2d7e6 <uarte_nrfx_configure+0x18>

0002d892 <uarte_nrfx_config_get>:
{
   2d892:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   2d894:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   2d896:	3304      	adds	r3, #4
   2d898:	e893 0003 	ldmia.w	r3, {r0, r1}
   2d89c:	e882 0003 	stmia.w	r2, {r0, r1}
}
   2d8a0:	2000      	movs	r0, #0
   2d8a2:	4770      	bx	lr

0002d8a4 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   2d8a4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2d8a6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d8a8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2d8ac:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2d8b0:	4770      	bx	lr

0002d8b2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2d8b2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2d8b4:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2d8b6:	685b      	ldr	r3, [r3, #4]
   2d8b8:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d8bc:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d8c0:	b929      	cbnz	r1, 2d8ce <is_tx_ready+0x1c>
   2d8c2:	b933      	cbnz	r3, 2d8d2 <is_tx_ready+0x20>
   2d8c4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2d8c8:	b92b      	cbnz	r3, 2d8d6 <is_tx_ready+0x24>
   2d8ca:	2000      	movs	r0, #0
   2d8cc:	4770      	bx	lr
   2d8ce:	2001      	movs	r0, #1
   2d8d0:	4770      	bx	lr
   2d8d2:	2000      	movs	r0, #0
   2d8d4:	4770      	bx	lr
   2d8d6:	2001      	movs	r0, #1
}
   2d8d8:	4770      	bx	lr

0002d8da <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2d8da:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2d8dc:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2d8de:	2208      	movs	r2, #8
   2d8e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2d8e4:	4770      	bx	lr

0002d8e6 <tx_start>:
{
   2d8e6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2d8e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2d8ea:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2d8ec:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2d8f0:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d8f4:	2200      	movs	r2, #0
   2d8f6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   2d8fa:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   2d8fe:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   2d902:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2d906:	685b      	ldr	r3, [r3, #4]
   2d908:	f013 0f10 	tst.w	r3, #16
   2d90c:	d102      	bne.n	2d914 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d90e:	2301      	movs	r3, #1
   2d910:	60a3      	str	r3, [r4, #8]
}
   2d912:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2d914:	2101      	movs	r1, #1
   2d916:	f7ff ffe0 	bl	2d8da <uarte_enable>
    p_reg->INTENSET = mask;
   2d91a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2d91e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2d922:	e7f4      	b.n	2d90e <tx_start+0x28>

0002d924 <uarte_nrfx_poll_in>:
{
   2d924:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   2d926:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2d928:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2d92a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d92c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d930:	b15a      	cbz	r2, 2d94a <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   2d932:	6962      	ldr	r2, [r4, #20]
   2d934:	7812      	ldrb	r2, [r2, #0]
   2d936:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d938:	2000      	movs	r0, #0
   2d93a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2d93e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d942:	2201      	movs	r2, #1
   2d944:	601a      	str	r2, [r3, #0]
}
   2d946:	bc10      	pop	{r4}
   2d948:	4770      	bx	lr
		return -1;
   2d94a:	f04f 30ff 	mov.w	r0, #4294967295
   2d94e:	e7fa      	b.n	2d946 <uarte_nrfx_poll_in+0x22>

0002d950 <k_msleep>:
{
   2d950:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2d952:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d956:	17c1      	asrs	r1, r0, #31
   2d958:	03c9      	lsls	r1, r1, #15
   2d95a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2d95e:	03c0      	lsls	r0, r0, #15
   2d960:	f240 33e7 	movw	r3, #999	; 0x3e7
   2d964:	18c0      	adds	r0, r0, r3
   2d966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d96a:	f04f 0300 	mov.w	r3, #0
   2d96e:	f141 0100 	adc.w	r1, r1, #0
   2d972:	f7e2 fbf1 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2d976:	f7fa f8a5 	bl	27ac4 <z_impl_k_sleep>
}
   2d97a:	bd08      	pop	{r3, pc}

0002d97c <wait_tx_ready>:
{
   2d97c:	b570      	push	{r4, r5, r6, lr}
   2d97e:	4606      	mov	r6, r0
   2d980:	e013      	b.n	2d9aa <wait_tx_ready+0x2e>
		if (res) {
   2d982:	b17d      	cbz	r5, 2d9a4 <wait_tx_ready+0x28>
	__asm__ volatile(
   2d984:	f04f 0320 	mov.w	r3, #32
   2d988:	f3ef 8411 	mrs	r4, BASEPRI
   2d98c:	f383 8812 	msr	BASEPRI_MAX, r3
   2d990:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2d994:	4630      	mov	r0, r6
   2d996:	f7ff ff8c 	bl	2d8b2 <is_tx_ready>
   2d99a:	b998      	cbnz	r0, 2d9c4 <wait_tx_ready+0x48>
	__asm__ volatile(
   2d99c:	f384 8811 	msr	BASEPRI, r4
   2d9a0:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   2d9a4:	2001      	movs	r0, #1
   2d9a6:	f7ff ffd3 	bl	2d950 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2d9aa:	2464      	movs	r4, #100	; 0x64
   2d9ac:	4630      	mov	r0, r6
   2d9ae:	f7ff ff80 	bl	2d8b2 <is_tx_ready>
   2d9b2:	4605      	mov	r5, r0
   2d9b4:	2800      	cmp	r0, #0
   2d9b6:	d1e4      	bne.n	2d982 <wait_tx_ready+0x6>
   2d9b8:	2001      	movs	r0, #1
   2d9ba:	f000 fa04 	bl	2ddc6 <nrfx_busy_wait>
   2d9be:	3c01      	subs	r4, #1
   2d9c0:	d1f4      	bne.n	2d9ac <wait_tx_ready+0x30>
   2d9c2:	e7de      	b.n	2d982 <wait_tx_ready+0x6>
}
   2d9c4:	4620      	mov	r0, r4
   2d9c6:	bd70      	pop	{r4, r5, r6, pc}

0002d9c8 <pinctrl_apply_state>:
{
   2d9c8:	b510      	push	{r4, lr}
   2d9ca:	b082      	sub	sp, #8
   2d9cc:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   2d9ce:	aa01      	add	r2, sp, #4
   2d9d0:	f000 f90d 	bl	2dbee <pinctrl_lookup_state>
	if (ret < 0) {
   2d9d4:	2800      	cmp	r0, #0
   2d9d6:	db05      	blt.n	2d9e4 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   2d9d8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2d9da:	6822      	ldr	r2, [r4, #0]
   2d9dc:	7919      	ldrb	r1, [r3, #4]
   2d9de:	6818      	ldr	r0, [r3, #0]
   2d9e0:	f7f3 ff8e 	bl	21900 <pinctrl_configure_pins>
}
   2d9e4:	b002      	add	sp, #8
   2d9e6:	bd10      	pop	{r4, pc}

0002d9e8 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   2d9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d9ec:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   2d9ee:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2d9f0:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2d9f2:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d9f6:	2100      	movs	r1, #0
   2d9f8:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2d9fc:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2da00:	68f8      	ldr	r0, [r7, #12]
   2da02:	f7ff ffe1 	bl	2d9c8 <pinctrl_apply_state>
	if (err < 0) {
   2da06:	1e05      	subs	r5, r0, #0
   2da08:	db35      	blt.n	2da76 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   2da0a:	f108 0104 	add.w	r1, r8, #4
   2da0e:	4620      	mov	r0, r4
   2da10:	f7ff fedd 	bl	2d7ce <uarte_nrfx_configure>
	if (err) {
   2da14:	4605      	mov	r5, r0
   2da16:	bb70      	cbnz	r0, 2da76 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2da18:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2da1a:	f013 0f02 	tst.w	r3, #2
   2da1e:	d12d      	bne.n	2da7c <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2da20:	2308      	movs	r3, #8
   2da22:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   2da26:	7a3b      	ldrb	r3, [r7, #8]
   2da28:	b95b      	cbnz	r3, 2da42 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2da2a:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   2da2e:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   2da32:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2da36:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2da3a:	2301      	movs	r3, #1
   2da3c:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2da40:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2da42:	687b      	ldr	r3, [r7, #4]
   2da44:	f013 0f02 	tst.w	r3, #2
   2da48:	d103      	bne.n	2da52 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   2da4a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2da4e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2da52:	687b      	ldr	r3, [r7, #4]
   2da54:	f013 0f10 	tst.w	r3, #16
   2da58:	d003      	beq.n	2da62 <uarte_instance_init+0x7a>
   2da5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2da5e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   2da62:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2da66:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2da6a:	2300      	movs	r3, #0
   2da6c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2da70:	2301      	movs	r3, #1
   2da72:	60b3      	str	r3, [r6, #8]
   2da74:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2da76:	4628      	mov	r0, r5
   2da78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2da7c:	4641      	mov	r1, r8
   2da7e:	4630      	mov	r0, r6
   2da80:	f7f2 fe68 	bl	20754 <endtx_stoptx_ppi_init>
		if (err < 0) {
   2da84:	2800      	cmp	r0, #0
   2da86:	dacb      	bge.n	2da20 <uarte_instance_init+0x38>
			return err;
   2da88:	4605      	mov	r5, r0
   2da8a:	e7f4      	b.n	2da76 <uarte_instance_init+0x8e>

0002da8c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2da8c:	b510      	push	{r4, lr}
   2da8e:	4604      	mov	r4, r0
   2da90:	2200      	movs	r2, #0
   2da92:	2101      	movs	r1, #1
   2da94:	2008      	movs	r0, #8
   2da96:	f7e7 fcdb 	bl	15450 <z_arm_irq_priority_set>
   2da9a:	2008      	movs	r0, #8
   2da9c:	f7fd fa3e 	bl	2af1c <arch_irq_enable>
   2daa0:	2100      	movs	r1, #0
   2daa2:	4620      	mov	r0, r4
   2daa4:	f7ff ffa0 	bl	2d9e8 <uarte_instance_init>
   2daa8:	bd10      	pop	{r4, pc}

0002daaa <is_hci_event_discardable>:
	uint8_t evt_type = evt_data[0];
   2daaa:	7803      	ldrb	r3, [r0, #0]
	switch (evt_type) {
   2daac:	2b3e      	cmp	r3, #62	; 0x3e
   2daae:	d001      	beq.n	2dab4 <is_hci_event_discardable+0xa>
		return false;
   2dab0:	2000      	movs	r0, #0
   2dab2:	4770      	bx	lr
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
   2dab4:	7883      	ldrb	r3, [r0, #2]
		switch (subevt_type) {
   2dab6:	2b02      	cmp	r3, #2
   2dab8:	d001      	beq.n	2dabe <is_hci_event_discardable+0x14>
			return false;
   2daba:	2000      	movs	r0, #0
}
   2dabc:	4770      	bx	lr
			return true;
   2dabe:	2001      	movs	r0, #1
   2dac0:	4770      	bx	lr

0002dac2 <hci_ept_recv>:
{
   2dac2:	b508      	push	{r3, lr}
	bt_rpmsg_rx(data, len);
   2dac4:	f7f3 fb5e 	bl	21184 <bt_rpmsg_rx>
}
   2dac8:	bd08      	pop	{r3, pc}

0002daca <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2daca:	2000      	movs	r0, #0
   2dacc:	4770      	bx	lr

0002dace <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2dace:	b538      	push	{r3, r4, r5, lr}
   2dad0:	460c      	mov	r4, r1
   2dad2:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2dad4:	f7eb feea 	bl	198ac <bt_is_ready>
   2dad8:	b120      	cbz	r0, 2dae4 <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2dada:	4629      	mov	r1, r5
   2dadc:	4620      	mov	r0, r4
   2dade:	f7ea feff 	bl	188e0 <bt_hci_le_rand>
}
   2dae2:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2dae4:	f06f 000a 	mvn.w	r0, #10
   2dae8:	e7fb      	b.n	2dae2 <entropy_bt_get_entropy+0x14>

0002daea <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2daea:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   2daec:	f000 f94a 	bl	2dd84 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
   2daf0:	b900      	cbnz	r0, 2daf4 <entropy_cc3xx_rng_init+0xa>
		return -EINVAL;
	}
#endif

	return 0;
}
   2daf2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2daf4:	f06f 0015 	mvn.w	r0, #21
   2daf8:	e7fb      	b.n	2daf2 <entropy_cc3xx_rng_init+0x8>

0002dafa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2dafa:	4770      	bx	lr

0002dafc <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2dafc:	1a40      	subs	r0, r0, r1
}
   2dafe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2db02:	4770      	bx	lr

0002db04 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2db04:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2db08:	009b      	lsls	r3, r3, #2
   2db0a:	b29b      	uxth	r3, r3
   2db0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2db10:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2db14:	2200      	movs	r2, #0
   2db16:	601a      	str	r2, [r3, #0]
   2db18:	681b      	ldr	r3, [r3, #0]
}
   2db1a:	4770      	bx	lr

0002db1c <absolute_time_to_cc>:
}
   2db1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2db20:	4770      	bx	lr

0002db22 <full_int_lock>:
	__asm__ volatile(
   2db22:	f04f 0320 	mov.w	r3, #32
   2db26:	f3ef 8011 	mrs	r0, BASEPRI
   2db2a:	f383 8812 	msr	BASEPRI_MAX, r3
   2db2e:	f3bf 8f6f 	isb	sy
}
   2db32:	4770      	bx	lr

0002db34 <full_int_unlock>:
	__asm__ volatile(
   2db34:	f380 8811 	msr	BASEPRI, r0
   2db38:	f3bf 8f6f 	isb	sy
}
   2db3c:	4770      	bx	lr

0002db3e <set_absolute_alarm>:
{
   2db3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db40:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2db42:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   2db46:	f7f3 fbad 	bl	212a4 <get_comparator>
   2db4a:	4607      	mov	r7, r0
   2db4c:	e019      	b.n	2db82 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   2db4e:	2013      	movs	r0, #19
   2db50:	f001 fb2b 	bl	2f1aa <z_impl_k_busy_wait>
}
   2db54:	e022      	b.n	2db9c <set_absolute_alarm+0x5e>
		event_clear(chan);
   2db56:	4630      	mov	r0, r6
   2db58:	f7ff ffd4 	bl	2db04 <event_clear>
		event_enable(chan);
   2db5c:	4630      	mov	r0, r6
   2db5e:	f7f3 fba9 	bl	212b4 <event_enable>
		set_comparator(chan, cc_val);
   2db62:	4629      	mov	r1, r5
   2db64:	4630      	mov	r0, r6
   2db66:	f7f3 fb93 	bl	21290 <set_comparator>
		now2 = counter();
   2db6a:	f7f3 fbb7 	bl	212dc <counter>
	} while ((now2 != now) &&
   2db6e:	4284      	cmp	r4, r0
   2db70:	d01e      	beq.n	2dbb0 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2db72:	1c81      	adds	r1, r0, #2
   2db74:	4628      	mov	r0, r5
   2db76:	f7ff ffc1 	bl	2dafc <counter_sub>
	} while ((now2 != now) &&
   2db7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2db7e:	d917      	bls.n	2dbb0 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2db80:	462f      	mov	r7, r5
		now = counter();
   2db82:	f7f3 fbab 	bl	212dc <counter>
   2db86:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2db88:	4601      	mov	r1, r0
   2db8a:	4630      	mov	r0, r6
   2db8c:	f7f3 fb80 	bl	21290 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2db90:	4621      	mov	r1, r4
   2db92:	4638      	mov	r0, r7
   2db94:	f7ff ffb2 	bl	2dafc <counter_sub>
   2db98:	2801      	cmp	r0, #1
   2db9a:	d0d8      	beq.n	2db4e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2db9c:	1ca7      	adds	r7, r4, #2
   2db9e:	4639      	mov	r1, r7
   2dba0:	4628      	mov	r0, r5
   2dba2:	f7ff ffab 	bl	2dafc <counter_sub>
   2dba6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2dbaa:	d9d4      	bls.n	2db56 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2dbac:	463d      	mov	r5, r7
   2dbae:	e7d2      	b.n	2db56 <set_absolute_alarm+0x18>
}
   2dbb0:	4628      	mov	r0, r5
   2dbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dbb4 <compare_set>:
{
   2dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dbb6:	b083      	sub	sp, #12
   2dbb8:	4604      	mov	r4, r0
   2dbba:	4617      	mov	r7, r2
   2dbbc:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2dbbe:	f7f3 fb93 	bl	212e8 <compare_int_lock>
   2dbc2:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2dbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dbc6:	9301      	str	r3, [sp, #4]
   2dbc8:	9b08      	ldr	r3, [sp, #32]
   2dbca:	9300      	str	r3, [sp, #0]
   2dbcc:	463a      	mov	r2, r7
   2dbce:	462b      	mov	r3, r5
   2dbd0:	4620      	mov	r0, r4
   2dbd2:	f7f3 fcbd 	bl	21550 <compare_set_nolocks>
   2dbd6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2dbd8:	4631      	mov	r1, r6
   2dbda:	4620      	mov	r0, r4
   2dbdc:	f7f3 fbdc 	bl	21398 <compare_int_unlock>
}
   2dbe0:	4628      	mov	r0, r5
   2dbe2:	b003      	add	sp, #12
   2dbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002dbe6 <sys_clock_cycle_get_32>:
{
   2dbe6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2dbe8:	f7f3 fc92 	bl	21510 <z_nrf_rtc_timer_read>
}
   2dbec:	bd08      	pop	{r3, pc}

0002dbee <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2dbee:	b410      	push	{r4}
	*state = &config->states[0];
   2dbf0:	6843      	ldr	r3, [r0, #4]
   2dbf2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2dbf4:	e001      	b.n	2dbfa <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2dbf6:	3408      	adds	r4, #8
   2dbf8:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2dbfa:	6814      	ldr	r4, [r2, #0]
   2dbfc:	7a03      	ldrb	r3, [r0, #8]
   2dbfe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2dc02:	3b01      	subs	r3, #1
   2dc04:	f8d0 c004 	ldr.w	ip, [r0, #4]
   2dc08:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   2dc0c:	429c      	cmp	r4, r3
   2dc0e:	d804      	bhi.n	2dc1a <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   2dc10:	7963      	ldrb	r3, [r4, #5]
   2dc12:	428b      	cmp	r3, r1
   2dc14:	d1ef      	bne.n	2dbf6 <pinctrl_lookup_state+0x8>
			return 0;
   2dc16:	2000      	movs	r0, #0
   2dc18:	e001      	b.n	2dc1e <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   2dc1a:	f06f 0001 	mvn.w	r0, #1
}
   2dc1e:	bc10      	pop	{r4}
   2dc20:	4770      	bx	lr

0002dc22 <nrf_gpio_pin_present_check>:
    switch (port)
   2dc22:	0943      	lsrs	r3, r0, #5
   2dc24:	d00a      	beq.n	2dc3c <nrf_gpio_pin_present_check+0x1a>
   2dc26:	2b01      	cmp	r3, #1
   2dc28:	d10b      	bne.n	2dc42 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2dc2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2dc2e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2dc32:	fa23 f000 	lsr.w	r0, r3, r0
}
   2dc36:	f000 0001 	and.w	r0, r0, #1
   2dc3a:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2dc3c:	f04f 33ff 	mov.w	r3, #4294967295
   2dc40:	e7f5      	b.n	2dc2e <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2dc42:	2300      	movs	r3, #0
   2dc44:	e7f3      	b.n	2dc2e <nrf_gpio_pin_present_check+0xc>

0002dc46 <nrf_gpio_pin_clear>:
{
   2dc46:	b500      	push	{lr}
   2dc48:	b083      	sub	sp, #12
   2dc4a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dc4c:	a801      	add	r0, sp, #4
   2dc4e:	f7f3 fe1f 	bl	21890 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2dc52:	9a01      	ldr	r2, [sp, #4]
   2dc54:	2301      	movs	r3, #1
   2dc56:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2dc58:	60c3      	str	r3, [r0, #12]
}
   2dc5a:	b003      	add	sp, #12
   2dc5c:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc60 <nrf_gpio_pin_set>:
{
   2dc60:	b500      	push	{lr}
   2dc62:	b083      	sub	sp, #12
   2dc64:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dc66:	a801      	add	r0, sp, #4
   2dc68:	f7f3 fe12 	bl	21890 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2dc6c:	9a01      	ldr	r2, [sp, #4]
   2dc6e:	2301      	movs	r3, #1
   2dc70:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2dc72:	6083      	str	r3, [r0, #8]
}
   2dc74:	b003      	add	sp, #12
   2dc76:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc7a <nrf_gpio_pin_write>:
{
   2dc7a:	b508      	push	{r3, lr}
    if (value == 0)
   2dc7c:	b911      	cbnz	r1, 2dc84 <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   2dc7e:	f7ff ffe2 	bl	2dc46 <nrf_gpio_pin_clear>
}
   2dc82:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   2dc84:	f7ff ffec 	bl	2dc60 <nrf_gpio_pin_set>
}
   2dc88:	e7fb      	b.n	2dc82 <nrf_gpio_pin_write+0x8>

0002dc8a <nrf_gpio_cfg>:
{
   2dc8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dc8c:	b083      	sub	sp, #12
   2dc8e:	9001      	str	r0, [sp, #4]
   2dc90:	460c      	mov	r4, r1
   2dc92:	4617      	mov	r7, r2
   2dc94:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dc96:	a801      	add	r0, sp, #4
   2dc98:	f7f3 fdfa 	bl	21890 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2dc9c:	9901      	ldr	r1, [sp, #4]
   2dc9e:	3180      	adds	r1, #128	; 0x80
   2dca0:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   2dca4:	f005 4ce0 	and.w	ip, r5, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2dca8:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   2dcac:	ea44 0386 	orr.w	r3, r4, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2dcb0:	f89d 2020 	ldrb.w	r2, [sp, #32]
   2dcb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2dcb8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   2dcbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2dcc0:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   2dcc4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2dcc8:	b003      	add	sp, #12
   2dcca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002dccc <mbox_nrf_register_callback>:
	struct mbox_nrf_data *data = dev->data;
   2dccc:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2dcce:	290f      	cmp	r1, #15
   2dcd0:	d806      	bhi.n	2dce0 <mbox_nrf_register_callback+0x14>
	data->cb[channel] = cb;
   2dcd2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2dcd6:	3110      	adds	r1, #16
   2dcd8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	return 0;
   2dcdc:	2000      	movs	r0, #0
   2dcde:	4770      	bx	lr
		return -EINVAL;
   2dce0:	f06f 0015 	mvn.w	r0, #21
}
   2dce4:	4770      	bx	lr

0002dce6 <mbox_nrf_mtu_get>:
}
   2dce6:	2000      	movs	r0, #0
   2dce8:	4770      	bx	lr

0002dcea <mbox_nrf_max_channels_get>:
}
   2dcea:	2010      	movs	r0, #16
   2dcec:	4770      	bx	lr

0002dcee <gpio_pin_configure_dt>:
{
   2dcee:	b508      	push	{r3, lr}
   2dcf0:	4603      	mov	r3, r0
   2dcf2:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2dcf4:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2dcf6:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2dcf8:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2dcfa:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2dcfe:	f7f4 f93f 	bl	21f80 <z_impl_gpio_pin_configure>
}
   2dd02:	bd08      	pop	{r3, pc}

0002dd04 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
   2dd04:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 1);
   2dd06:	2101      	movs	r1, #1
   2dd08:	f7f4 faf6 	bl	222f8 <dk_set_led>
}
   2dd0c:	bd08      	pop	{r3, pc}

0002dd0e <dk_set_led_off>:

int dk_set_led_off(uint8_t led_idx)
{
   2dd0e:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 0);
   2dd10:	2100      	movs	r1, #0
   2dd12:	f7f4 faf1 	bl	222f8 <dk_set_led>
}
   2dd16:	bd08      	pop	{r3, pc}

0002dd18 <tfm_ns_interface_init>:
}
   2dd18:	2000      	movs	r0, #0
   2dd1a:	4770      	bx	lr

0002dd1c <tfm_platform_ioctl>:
}

enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
   2dd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd1e:	b089      	sub	sp, #36	; 0x24
   2dd20:	4615      	mov	r5, r2
    tfm_platform_ioctl_req_t req = request;
   2dd22:	9007      	str	r0, [sp, #28]
    struct psa_invec in_vec[2] = { {0} };
   2dd24:	2300      	movs	r3, #0
   2dd26:	9303      	str	r3, [sp, #12]
   2dd28:	9304      	str	r3, [sp, #16]
   2dd2a:	9305      	str	r3, [sp, #20]
   2dd2c:	9306      	str	r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2dd2e:	ab07      	add	r3, sp, #28
   2dd30:	9303      	str	r3, [sp, #12]
    in_vec[0].len = sizeof(req);
   2dd32:	2304      	movs	r3, #4
   2dd34:	9304      	str	r3, [sp, #16]
    if (input != NULL) {
   2dd36:	b1e1      	cbz	r1, 2dd72 <tfm_platform_ioctl+0x56>
        in_vec[1].base = input->base;
   2dd38:	680a      	ldr	r2, [r1, #0]
   2dd3a:	9205      	str	r2, [sp, #20]
        in_vec[1].len = input->len;
   2dd3c:	684b      	ldr	r3, [r1, #4]
   2dd3e:	9306      	str	r3, [sp, #24]
        inlen = 2;
   2dd40:	2602      	movs	r6, #2
    } else {
        inlen = 1;
    }

    if (output != NULL) {
   2dd42:	b1c5      	cbz	r5, 2dd76 <tfm_platform_ioctl+0x5a>
        outlen = 1;
   2dd44:	2701      	movs	r7, #1
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2dd46:	2101      	movs	r1, #1
   2dd48:	2041      	movs	r0, #65	; 0x41
   2dd4a:	f7f4 fc03 	bl	22554 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2dd4e:	1e04      	subs	r4, r0, #0
   2dd50:	dd13      	ble.n	2dd7a <tfm_platform_ioctl+0x5e>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    }

    status = psa_call(handle, PSA_IPC_CALL,
   2dd52:	9701      	str	r7, [sp, #4]
   2dd54:	9500      	str	r5, [sp, #0]
   2dd56:	4633      	mov	r3, r6
   2dd58:	aa03      	add	r2, sp, #12
   2dd5a:	2100      	movs	r1, #0
   2dd5c:	4620      	mov	r0, r4
   2dd5e:	f7f4 fbd1 	bl	22504 <psa_call>
   2dd62:	4605      	mov	r5, r0
                      in_vec, inlen,
                      output, outlen);
    psa_close(handle);
   2dd64:	4620      	mov	r0, r4
   2dd66:	f7f4 fc03 	bl	22570 <psa_close>

    if (status < PSA_SUCCESS) {
   2dd6a:	2d00      	cmp	r5, #0
   2dd6c:	db08      	blt.n	2dd80 <tfm_platform_ioctl+0x64>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
   2dd6e:	4628      	mov	r0, r5
   2dd70:	e004      	b.n	2dd7c <tfm_platform_ioctl+0x60>
        inlen = 1;
   2dd72:	2601      	movs	r6, #1
   2dd74:	e7e5      	b.n	2dd42 <tfm_platform_ioctl+0x26>
        outlen = 0;
   2dd76:	2700      	movs	r7, #0
   2dd78:	e7e5      	b.n	2dd46 <tfm_platform_ioctl+0x2a>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2dd7a:	2001      	movs	r0, #1
    }
}
   2dd7c:	b009      	add	sp, #36	; 0x24
   2dd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2dd80:	2001      	movs	r0, #1
   2dd82:	e7fb      	b.n	2dd7c <tfm_platform_ioctl+0x60>

0002dd84 <psa_crypto_init>:
}
   2dd84:	2000      	movs	r0, #0
   2dd86:	4770      	bx	lr

0002dd88 <tfm_platform_gpio_pin_mcu_select>:
	return ret;
}

enum tfm_platform_err_t tfm_platform_gpio_pin_mcu_select(uint32_t pin_number, uint32_t mcu,
							 uint32_t *result)
{
   2dd88:	b510      	push	{r4, lr}
   2dd8a:	b088      	sub	sp, #32
   2dd8c:	4614      	mov	r4, r2
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2dd8e:	2300      	movs	r3, #0
   2dd90:	9301      	str	r3, [sp, #4]
	args.mcu_select.pin_number = pin_number;
   2dd92:	9002      	str	r0, [sp, #8]
	args.mcu_select.mcu = mcu;
   2dd94:	9103      	str	r1, [sp, #12]

	in_vec.base = (const void *)&args;
   2dd96:	ab01      	add	r3, sp, #4
   2dd98:	9306      	str	r3, [sp, #24]
	in_vec.len = sizeof(args);
   2dd9a:	230c      	movs	r3, #12
   2dd9c:	9307      	str	r3, [sp, #28]

	out_vec.base = (void *)&out;
   2dd9e:	f8cd d010 	str.w	sp, [sp, #16]
	out_vec.len = sizeof(out);
   2dda2:	2304      	movs	r3, #4
   2dda4:	9305      	str	r3, [sp, #20]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2dda6:	aa04      	add	r2, sp, #16
   2dda8:	a906      	add	r1, sp, #24
   2ddaa:	2001      	movs	r0, #1
   2ddac:	f7ff ffb6 	bl	2dd1c <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ddb0:	9b00      	ldr	r3, [sp, #0]
   2ddb2:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2ddb4:	b008      	add	sp, #32
   2ddb6:	bd10      	pop	{r4, pc}

0002ddb8 <SystemInit>:

void SystemInit(void)
{
   2ddb8:	b508      	push	{r3, lr}
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2ddba:	f7f4 fbe7 	bl	2258c <SystemCoreClockUpdate>
}
   2ddbe:	bd08      	pop	{r3, pc}

0002ddc0 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   2ddc0:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2ddc2:	4780      	blx	r0
}
   2ddc4:	bd08      	pop	{r3, pc}

0002ddc6 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   2ddc6:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2ddc8:	f001 f9ef 	bl	2f1aa <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   2ddcc:	bd08      	pop	{r3, pc}

0002ddce <clock_initial_lfclksrc_get>:
}
   2ddce:	2001      	movs	r0, #1
   2ddd0:	4770      	bx	lr

0002ddd2 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   2ddd2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2ddd4:	2005      	movs	r0, #5
   2ddd6:	f7e7 fb2d 	bl	15434 <arch_irq_is_enabled>
   2ddda:	b100      	cbz	r0, 2ddde <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   2dddc:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2ddde:	2005      	movs	r0, #5
   2dde0:	f7fd f89c 	bl	2af1c <arch_irq_enable>
}
   2dde4:	e7fa      	b.n	2dddc <nrfx_power_clock_irq_init+0xa>

0002dde6 <clock_lfclksrc_tweak>:
{
   2dde6:	b538      	push	{r3, r4, r5, lr}
   2dde8:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   2ddea:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2ddec:	2b02      	cmp	r3, #2
   2ddee:	d006      	beq.n	2ddfe <clock_lfclksrc_tweak+0x18>
   2ddf0:	2b01      	cmp	r3, #1
   2ddf2:	d000      	beq.n	2ddf6 <clock_lfclksrc_tweak+0x10>
   2ddf4:	2300      	movs	r3, #0
    if (!is_correct_clk)
   2ddf6:	461d      	mov	r5, r3
   2ddf8:	b11b      	cbz	r3, 2de02 <clock_lfclksrc_tweak+0x1c>
}
   2ddfa:	4628      	mov	r0, r5
   2ddfc:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2ddfe:	2301      	movs	r3, #1
   2de00:	e7f9      	b.n	2ddf6 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2de02:	2000      	movs	r0, #0
   2de04:	f7f4 fc60 	bl	226c8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   2de08:	f7ff ffe1 	bl	2ddce <clock_initial_lfclksrc_get>
   2de0c:	7020      	strb	r0, [r4, #0]
   2de0e:	e7f4      	b.n	2ddfa <clock_lfclksrc_tweak+0x14>

0002de10 <nrf_gpiote_event_configure>:
{
   2de10:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2de12:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2de16:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2de1a:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   2de1e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   2de22:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2de26:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2de2a:	0212      	lsls	r2, r2, #8
   2de2c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   2de30:	041b      	lsls	r3, r3, #16
   2de32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2de36:	431a      	orrs	r2, r3
   2de38:	4314      	orrs	r4, r2
   2de3a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2de3e:	bc10      	pop	{r4}
   2de40:	4770      	bx	lr

0002de42 <nrf_gpiote_task_configure>:
{
   2de42:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2de44:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2de48:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2de4c:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   2de50:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   2de54:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2de58:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2de5c:	0212      	lsls	r2, r2, #8
   2de5e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2de62:	041b      	lsls	r3, r3, #16
   2de64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2de68:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2de6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2de6e:	051b      	lsls	r3, r3, #20
   2de70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2de74:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2de76:	4314      	orrs	r4, r2
   2de78:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2de7c:	bc10      	pop	{r4}
   2de7e:	4770      	bx	lr

0002de80 <nrf_gpio_pin_present_check>:
    switch (port)
   2de80:	0943      	lsrs	r3, r0, #5
   2de82:	d00a      	beq.n	2de9a <nrf_gpio_pin_present_check+0x1a>
   2de84:	2b01      	cmp	r3, #1
   2de86:	d10b      	bne.n	2dea0 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2de88:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2de8c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2de90:	fa23 f000 	lsr.w	r0, r3, r0
}
   2de94:	f000 0001 	and.w	r0, r0, #1
   2de98:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2de9a:	f04f 33ff 	mov.w	r3, #4294967295
   2de9e:	e7f5      	b.n	2de8c <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2dea0:	2300      	movs	r3, #0
   2dea2:	e7f3      	b.n	2de8c <nrf_gpio_pin_present_check+0xc>

0002dea4 <pin_is_task_output>:
{
   2dea4:	b510      	push	{r4, lr}
   2dea6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2dea8:	f7f4 fe2c 	bl	22b04 <pin_is_output>
   2deac:	b128      	cbz	r0, 2deba <pin_is_task_output+0x16>
   2deae:	4620      	mov	r0, r4
   2deb0:	f7f4 fe12 	bl	22ad8 <pin_in_use_by_te>
   2deb4:	b118      	cbz	r0, 2debe <pin_is_task_output+0x1a>
   2deb6:	2001      	movs	r0, #1
   2deb8:	e000      	b.n	2debc <pin_is_task_output+0x18>
   2deba:	2000      	movs	r0, #0
}
   2debc:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2debe:	2000      	movs	r0, #0
   2dec0:	e7fc      	b.n	2debc <pin_is_task_output+0x18>

0002dec2 <pin_is_input>:
{
   2dec2:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   2dec4:	f7f4 fe1e 	bl	22b04 <pin_is_output>
   2dec8:	f080 0001 	eor.w	r0, r0, #1
}
   2decc:	b2c0      	uxtb	r0, r0
   2dece:	bd08      	pop	{r3, pc}

0002ded0 <gpiote_polarity_to_trigger>:
}
   2ded0:	4770      	bx	lr

0002ded2 <gpiote_trigger_to_polarity>:
}
   2ded2:	4770      	bx	lr

0002ded4 <is_level>:
}
   2ded4:	2803      	cmp	r0, #3
   2ded6:	bf94      	ite	ls
   2ded8:	2000      	movls	r0, #0
   2deda:	2001      	movhi	r0, #1
   2dedc:	4770      	bx	lr

0002dede <latch_pending_read_and_check>:
{
   2dede:	b510      	push	{r4, lr}
   2dee0:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   2dee2:	4602      	mov	r2, r0
   2dee4:	2102      	movs	r1, #2
   2dee6:	2000      	movs	r0, #0
   2dee8:	f7f4 fdcc 	bl	22a84 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2deec:	2300      	movs	r3, #0
   2deee:	2b01      	cmp	r3, #1
   2def0:	d804      	bhi.n	2defc <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   2def2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2def6:	b91a      	cbnz	r2, 2df00 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2def8:	3301      	adds	r3, #1
   2defa:	e7f8      	b.n	2deee <latch_pending_read_and_check+0x10>
    return false;
   2defc:	2000      	movs	r0, #0
}
   2defe:	bd10      	pop	{r4, pc}
            return true;
   2df00:	2001      	movs	r0, #1
   2df02:	e7fc      	b.n	2defe <latch_pending_read_and_check+0x20>

0002df04 <nrf_gpio_cfg_default>:
{
   2df04:	b500      	push	{lr}
   2df06:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   2df08:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2df0a:	a801      	add	r0, sp, #4
   2df0c:	f7f4 feba 	bl	22c84 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2df10:	9a01      	ldr	r2, [sp, #4]
   2df12:	3280      	adds	r2, #128	; 0x80
   2df14:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2df18:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2df1c:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   2df20:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   2df24:	b003      	add	sp, #12
   2df26:	f85d fb04 	ldr.w	pc, [sp], #4

0002df2a <nrf_gpio_reconfigure>:
{
   2df2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df2e:	b082      	sub	sp, #8
   2df30:	9001      	str	r0, [sp, #4]
   2df32:	4688      	mov	r8, r1
   2df34:	4615      	mov	r5, r2
   2df36:	461c      	mov	r4, r3
   2df38:	9f08      	ldr	r7, [sp, #32]
   2df3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2df3c:	a801      	add	r0, sp, #4
   2df3e:	f7f4 fea1 	bl	22c84 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2df42:	9a01      	ldr	r2, [sp, #4]
   2df44:	f102 0380 	add.w	r3, r2, #128	; 0x80
   2df48:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2df4c:	f1b8 0f00 	cmp.w	r8, #0
   2df50:	d031      	beq.n	2dfb6 <nrf_gpio_reconfigure+0x8c>
   2df52:	f04f 0c01 	mov.w	ip, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2df56:	b38d      	cbz	r5, 2dfbc <nrf_gpio_reconfigure+0x92>
   2df58:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2df5a:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2df5e:	b37c      	cbz	r4, 2dfc0 <nrf_gpio_reconfigure+0x96>
   2df60:	230c      	movs	r3, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2df62:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2df66:	b36f      	cbz	r7, 2dfc4 <nrf_gpio_reconfigure+0x9a>
   2df68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2df6c:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2df70:	b356      	cbz	r6, 2dfc8 <nrf_gpio_reconfigure+0x9e>
   2df72:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2df76:	ea4c 0c03 	orr.w	ip, ip, r3
    cnf &= ~to_update;
   2df7a:	ea21 010c 	bic.w	r1, r1, ip
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2df7e:	f1b8 0f00 	cmp.w	r8, #0
   2df82:	d023      	beq.n	2dfcc <nrf_gpio_reconfigure+0xa2>
   2df84:	f898 3000 	ldrb.w	r3, [r8]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2df88:	b315      	cbz	r5, 2dfd0 <nrf_gpio_reconfigure+0xa6>
   2df8a:	782d      	ldrb	r5, [r5, #0]
   2df8c:	006d      	lsls	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2df8e:	432b      	orrs	r3, r5
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2df90:	b304      	cbz	r4, 2dfd4 <nrf_gpio_reconfigure+0xaa>
   2df92:	7824      	ldrb	r4, [r4, #0]
   2df94:	00a4      	lsls	r4, r4, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2df96:	4323      	orrs	r3, r4
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2df98:	b1f7      	cbz	r7, 2dfd8 <nrf_gpio_reconfigure+0xae>
   2df9a:	783c      	ldrb	r4, [r7, #0]
   2df9c:	0224      	lsls	r4, r4, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2df9e:	4323      	orrs	r3, r4
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2dfa0:	b1e6      	cbz	r6, 2dfdc <nrf_gpio_reconfigure+0xb2>
   2dfa2:	7834      	ldrb	r4, [r6, #0]
   2dfa4:	0424      	lsls	r4, r4, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2dfa6:	4323      	orrs	r3, r4
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2dfa8:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   2dfaa:	3280      	adds	r2, #128	; 0x80
   2dfac:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   2dfb0:	b002      	add	sp, #8
   2dfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2dfb6:	f04f 0c00 	mov.w	ip, #0
   2dfba:	e7cc      	b.n	2df56 <nrf_gpio_reconfigure+0x2c>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2dfbc:	2300      	movs	r3, #0
   2dfbe:	e7cc      	b.n	2df5a <nrf_gpio_reconfigure+0x30>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2dfc0:	2300      	movs	r3, #0
   2dfc2:	e7ce      	b.n	2df62 <nrf_gpio_reconfigure+0x38>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2dfc4:	2300      	movs	r3, #0
   2dfc6:	e7d1      	b.n	2df6c <nrf_gpio_reconfigure+0x42>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2dfc8:	2300      	movs	r3, #0
   2dfca:	e7d4      	b.n	2df76 <nrf_gpio_reconfigure+0x4c>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2dfcc:	2300      	movs	r3, #0
   2dfce:	e7db      	b.n	2df88 <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2dfd0:	2500      	movs	r5, #0
   2dfd2:	e7dc      	b.n	2df8e <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2dfd4:	2400      	movs	r4, #0
   2dfd6:	e7de      	b.n	2df96 <nrf_gpio_reconfigure+0x6c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2dfd8:	2400      	movs	r4, #0
   2dfda:	e7e0      	b.n	2df9e <nrf_gpio_reconfigure+0x74>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2dfdc:	2400      	movs	r4, #0
   2dfde:	e7e2      	b.n	2dfa6 <nrf_gpio_reconfigure+0x7c>

0002dfe0 <nrf_gpio_cfg_sense_set>:
{
   2dfe0:	b500      	push	{lr}
   2dfe2:	b085      	sub	sp, #20
   2dfe4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2dfe8:	f10d 030f 	add.w	r3, sp, #15
   2dfec:	9301      	str	r3, [sp, #4]
   2dfee:	2100      	movs	r1, #0
   2dff0:	9100      	str	r1, [sp, #0]
   2dff2:	460b      	mov	r3, r1
   2dff4:	460a      	mov	r2, r1
   2dff6:	f7ff ff98 	bl	2df2a <nrf_gpio_reconfigure>
}
   2dffa:	b005      	add	sp, #20
   2dffc:	f85d fb04 	ldr.w	pc, [sp], #4

0002e000 <nrf_gpio_pin_read>:
{
   2e000:	b500      	push	{lr}
   2e002:	b083      	sub	sp, #12
   2e004:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e006:	a801      	add	r0, sp, #4
   2e008:	f7f4 fe3c 	bl	22c84 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   2e00c:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2e00e:	9b01      	ldr	r3, [sp, #4]
   2e010:	40d8      	lsrs	r0, r3
}
   2e012:	f000 0001 	and.w	r0, r0, #1
   2e016:	b003      	add	sp, #12
   2e018:	f85d fb04 	ldr.w	pc, [sp], #4

0002e01c <nrf_gpio_pin_sense_get>:
{
   2e01c:	b500      	push	{lr}
   2e01e:	b083      	sub	sp, #12
   2e020:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e022:	a801      	add	r0, sp, #4
   2e024:	f7f4 fe2e 	bl	22c84 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2e028:	9b01      	ldr	r3, [sp, #4]
   2e02a:	3380      	adds	r3, #128	; 0x80
   2e02c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   2e030:	f3c0 4001 	ubfx	r0, r0, #16, #2
   2e034:	b003      	add	sp, #12
   2e036:	f85d fb04 	ldr.w	pc, [sp], #4

0002e03a <next_sense_cond_call_handler>:
{
   2e03a:	b570      	push	{r4, r5, r6, lr}
   2e03c:	4606      	mov	r6, r0
   2e03e:	460c      	mov	r4, r1
   2e040:	4615      	mov	r5, r2
    if (is_level(trigger))
   2e042:	4608      	mov	r0, r1
   2e044:	f7ff ff46 	bl	2ded4 <is_level>
   2e048:	b960      	cbnz	r0, 2e064 <next_sense_cond_call_handler+0x2a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2e04a:	2d02      	cmp	r5, #2
   2e04c:	d01c      	beq.n	2e088 <next_sense_cond_call_handler+0x4e>
   2e04e:	2102      	movs	r1, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2e050:	4630      	mov	r0, r6
   2e052:	f7ff ffc5 	bl	2dfe0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2e056:	2c03      	cmp	r4, #3
   2e058:	d01a      	beq.n	2e090 <next_sense_cond_call_handler+0x56>
   2e05a:	2d02      	cmp	r5, #2
   2e05c:	d016      	beq.n	2e08c <next_sense_cond_call_handler+0x52>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2e05e:	2d03      	cmp	r5, #3
   2e060:	d01b      	beq.n	2e09a <next_sense_cond_call_handler+0x60>
}
   2e062:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   2e064:	4621      	mov	r1, r4
   2e066:	4630      	mov	r0, r6
   2e068:	f7f4 fd9e 	bl	22ba8 <call_handler>
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2e06c:	4630      	mov	r0, r6
   2e06e:	f7ff ffd5 	bl	2e01c <nrf_gpio_pin_sense_get>
   2e072:	42a8      	cmp	r0, r5
   2e074:	d1f5      	bne.n	2e062 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2e076:	2100      	movs	r1, #0
   2e078:	4630      	mov	r0, r6
   2e07a:	f7ff ffb1 	bl	2dfe0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2e07e:	4629      	mov	r1, r5
   2e080:	4630      	mov	r0, r6
   2e082:	f7ff ffad 	bl	2dfe0 <nrf_gpio_cfg_sense_set>
   2e086:	e7ec      	b.n	2e062 <next_sense_cond_call_handler+0x28>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2e088:	2103      	movs	r1, #3
   2e08a:	e7e1      	b.n	2e050 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2e08c:	2c01      	cmp	r4, #1
   2e08e:	d1e6      	bne.n	2e05e <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   2e090:	4621      	mov	r1, r4
   2e092:	4630      	mov	r0, r6
   2e094:	f7f4 fd88 	bl	22ba8 <call_handler>
}
   2e098:	e7e3      	b.n	2e062 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2e09a:	2c02      	cmp	r4, #2
   2e09c:	d1e1      	bne.n	2e062 <next_sense_cond_call_handler+0x28>
   2e09e:	e7f7      	b.n	2e090 <next_sense_cond_call_handler+0x56>

0002e0a0 <nrf_gpio_pin_latch_clear>:
{
   2e0a0:	b500      	push	{lr}
   2e0a2:	b083      	sub	sp, #12
   2e0a4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e0a6:	a801      	add	r0, sp, #4
   2e0a8:	f7f4 fdec 	bl	22c84 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2e0ac:	2301      	movs	r3, #1
   2e0ae:	9a01      	ldr	r2, [sp, #4]
   2e0b0:	4093      	lsls	r3, r2
   2e0b2:	6203      	str	r3, [r0, #32]
}
   2e0b4:	b003      	add	sp, #12
   2e0b6:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0ba <nrf_gpio_pin_present_check>:
    switch (port)
   2e0ba:	0943      	lsrs	r3, r0, #5
   2e0bc:	d00a      	beq.n	2e0d4 <nrf_gpio_pin_present_check+0x1a>
   2e0be:	2b01      	cmp	r3, #1
   2e0c0:	d10b      	bne.n	2e0da <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   2e0c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2e0c6:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2e0ca:	fa23 f000 	lsr.w	r0, r3, r0
}
   2e0ce:	f000 0001 	and.w	r0, r0, #1
   2e0d2:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   2e0d4:	f04f 33ff 	mov.w	r3, #4294967295
   2e0d8:	e7f5      	b.n	2e0c6 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   2e0da:	2300      	movs	r3, #0
   2e0dc:	e7f3      	b.n	2e0c6 <nrf_gpio_pin_present_check+0xc>

0002e0de <start_playback>:
{
   2e0de:	b410      	push	{r4}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2e0e0:	2402      	movs	r4, #2
   2e0e2:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
   2e0e4:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   2e0e6:	6809      	ldr	r1, [r1, #0]
   2e0e8:	b181      	cbz	r1, 2e10c <start_playback+0x2e>
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ0)
   2e0ea:	f012 0f04 	tst.w	r2, #4
   2e0ee:	d11c      	bne.n	2e12a <start_playback+0x4c>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
   2e0f0:	2182      	movs	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   2e0f2:	f012 0f08 	tst.w	r2, #8
   2e0f6:	d001      	beq.n	2e0fc <start_playback+0x1e>
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   2e0f8:	f041 0120 	orr.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   2e0fc:	f012 0f10 	tst.w	r2, #16
   2e100:	d001      	beq.n	2e106 <start_playback+0x28>
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   2e102:	f021 0180 	bic.w	r1, r1, #128	; 0x80
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   2e106:	6804      	ldr	r4, [r0, #0]
    p_reg->INTEN = mask;
   2e108:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   2e10c:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e10e:	2400      	movs	r4, #0
   2e110:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
   2e114:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   2e118:	f012 0f80 	tst.w	r2, #128	; 0x80
   2e11c:	d107      	bne.n	2e12e <start_playback+0x50>
    nrf_pwm_task_trigger(p_instance->p_registers, starting_task);
   2e11e:	6802      	ldr	r2, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e120:	2101      	movs	r1, #1
   2e122:	50d1      	str	r1, [r2, r3]
    return 0;
   2e124:	2000      	movs	r0, #0
}
   2e126:	bc10      	pop	{r4}
   2e128:	4770      	bx	lr
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   2e12a:	2192      	movs	r1, #146	; 0x92
   2e12c:	e7e1      	b.n	2e0f2 <start_playback+0x14>
            nrf_pwm_task_address_get(p_instance->p_registers, starting_task);
   2e12e:	6800      	ldr	r0, [r0, #0]
    return ((uint32_t)p_reg + (uint32_t)task);
   2e130:	4418      	add	r0, r3
        return starting_task_address;
   2e132:	e7f8      	b.n	2e126 <start_playback+0x48>

0002e134 <nrf_gpio_pin_clear>:
{
   2e134:	b500      	push	{lr}
   2e136:	b083      	sub	sp, #12
   2e138:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e13a:	a801      	add	r0, sp, #4
   2e13c:	f7f5 f9c8 	bl	234d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e140:	9a01      	ldr	r2, [sp, #4]
   2e142:	2301      	movs	r3, #1
   2e144:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2e146:	60c3      	str	r3, [r0, #12]
}
   2e148:	b003      	add	sp, #12
   2e14a:	f85d fb04 	ldr.w	pc, [sp], #4

0002e14e <nrf_gpio_pin_set>:
{
   2e14e:	b500      	push	{lr}
   2e150:	b083      	sub	sp, #12
   2e152:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e154:	a801      	add	r0, sp, #4
   2e156:	f7f5 f9bb 	bl	234d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e15a:	9a01      	ldr	r2, [sp, #4]
   2e15c:	2301      	movs	r3, #1
   2e15e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2e160:	6083      	str	r3, [r0, #8]
}
   2e162:	b003      	add	sp, #12
   2e164:	f85d fb04 	ldr.w	pc, [sp], #4

0002e168 <nrf_gpio_pin_write>:
{
   2e168:	b508      	push	{r3, lr}
    if (value == 0)
   2e16a:	b911      	cbnz	r1, 2e172 <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   2e16c:	f7ff ffe2 	bl	2e134 <nrf_gpio_pin_clear>
}
   2e170:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   2e172:	f7ff ffec 	bl	2e14e <nrf_gpio_pin_set>
}
   2e176:	e7fb      	b.n	2e170 <nrf_gpio_pin_write+0x8>

0002e178 <nrf_gpio_cfg_output>:
{
   2e178:	b500      	push	{lr}
   2e17a:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   2e17c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e17e:	a801      	add	r0, sp, #4
   2e180:	f7f5 f9a6 	bl	234d0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e184:	9a01      	ldr	r2, [sp, #4]
   2e186:	3280      	adds	r2, #128	; 0x80
   2e188:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2e18c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2e190:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   2e194:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   2e198:	b003      	add	sp, #12
   2e19a:	f85d fb04 	ldr.w	pc, [sp], #4

0002e19e <configure_pins>:
{
   2e19e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e1a0:	b085      	sub	sp, #20
   2e1a2:	4607      	mov	r7, r0
   2e1a4:	460d      	mov	r5, r1
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   2e1a6:	7b0b      	ldrb	r3, [r1, #12]
   2e1a8:	b33b      	cbz	r3, 2e1fa <configure_pins+0x5c>
   2e1aa:	7b4b      	ldrb	r3, [r1, #13]
   2e1ac:	2b00      	cmp	r3, #0
   2e1ae:	d137      	bne.n	2e220 <configure_pins+0x82>
   2e1b0:	2400      	movs	r4, #0
   2e1b2:	e008      	b.n	2e1c6 <configure_pins+0x28>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   2e1b4:	f04f 32ff 	mov.w	r2, #4294967295
   2e1b8:	ab04      	add	r3, sp, #16
   2e1ba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2e1be:	f843 2c10 	str.w	r2, [r3, #-16]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   2e1c2:	3401      	adds	r4, #1
   2e1c4:	b2e4      	uxtb	r4, r4
   2e1c6:	2c03      	cmp	r4, #3
   2e1c8:	d819      	bhi.n	2e1fe <configure_pins+0x60>
        uint8_t output_pin = p_config->output_pins[i];
   2e1ca:	5d2b      	ldrb	r3, [r5, r4]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   2e1cc:	2bff      	cmp	r3, #255	; 0xff
   2e1ce:	d0f1      	beq.n	2e1b4 <configure_pins+0x16>
            bool inverted = output_pin &  NRFX_PWM_PIN_INVERTED;
   2e1d0:	09d9      	lsrs	r1, r3, #7
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   2e1d2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
   2e1d6:	ab04      	add	r3, sp, #16
   2e1d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2e1dc:	f843 0c10 	str.w	r0, [r3, #-16]
            if (!p_config->skip_gpio_cfg)
   2e1e0:	7b2b      	ldrb	r3, [r5, #12]
   2e1e2:	2b00      	cmp	r3, #0
   2e1e4:	d1ed      	bne.n	2e1c2 <configure_pins+0x24>
                nrf_gpio_pin_write(out_pins[i], inverted ? 1 : 0);
   2e1e6:	f7ff ffbf 	bl	2e168 <nrf_gpio_pin_write>
                nrf_gpio_cfg_output(out_pins[i]);
   2e1ea:	ab04      	add	r3, sp, #16
   2e1ec:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   2e1f0:	f856 0c10 	ldr.w	r0, [r6, #-16]
   2e1f4:	f7ff ffc0 	bl	2e178 <nrf_gpio_cfg_output>
   2e1f8:	e7e3      	b.n	2e1c2 <configure_pins+0x24>
   2e1fa:	2400      	movs	r4, #0
   2e1fc:	e7e3      	b.n	2e1c6 <configure_pins+0x28>
    if (!p_config->skip_psel_cfg)
   2e1fe:	7b6b      	ldrb	r3, [r5, #13]
   2e200:	b973      	cbnz	r3, 2e220 <configure_pins+0x82>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   2e202:	6838      	ldr	r0, [r7, #0]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   2e204:	2b03      	cmp	r3, #3
   2e206:	d80b      	bhi.n	2e220 <configure_pins+0x82>
        p_reg->PSEL.OUT[i] = out_pins[i];
   2e208:	aa04      	add	r2, sp, #16
   2e20a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2e20e:	f852 1c10 	ldr.w	r1, [r2, #-16]
   2e212:	f503 72ac 	add.w	r2, r3, #344	; 0x158
   2e216:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   2e21a:	3301      	adds	r3, #1
   2e21c:	b2db      	uxtb	r3, r3
   2e21e:	e7f1      	b.n	2e204 <configure_pins+0x66>
}
   2e220:	b005      	add	sp, #20
   2e222:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e224 <metal_device_open>:
	if (!bus_name || !strlen(bus_name) ||
   2e224:	b300      	cbz	r0, 2e268 <metal_device_open+0x44>
{
   2e226:	b570      	push	{r4, r5, r6, lr}
   2e228:	b082      	sub	sp, #8
   2e22a:	460c      	mov	r4, r1
   2e22c:	4615      	mov	r5, r2
   2e22e:	4606      	mov	r6, r0
	if (!bus_name || !strlen(bus_name) ||
   2e230:	f7fc ff3f 	bl	2b0b2 <strlen>
   2e234:	b190      	cbz	r0, 2e25c <metal_device_open+0x38>
   2e236:	b18c      	cbz	r4, 2e25c <metal_device_open+0x38>
	    !dev_name || !strlen(dev_name) ||
   2e238:	4620      	mov	r0, r4
   2e23a:	f7fc ff3a 	bl	2b0b2 <strlen>
   2e23e:	b168      	cbz	r0, 2e25c <metal_device_open+0x38>
   2e240:	b165      	cbz	r5, 2e25c <metal_device_open+0x38>
	error = metal_bus_find(bus_name, &bus);
   2e242:	a901      	add	r1, sp, #4
   2e244:	4630      	mov	r0, r6
   2e246:	f7f5 fc1f 	bl	23a88 <metal_bus_find>
	if (error)
   2e24a:	b928      	cbnz	r0, 2e258 <metal_device_open+0x34>
	if (!bus->ops.dev_open)
   2e24c:	9801      	ldr	r0, [sp, #4]
   2e24e:	6883      	ldr	r3, [r0, #8]
   2e250:	b13b      	cbz	r3, 2e262 <metal_device_open+0x3e>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2e252:	462a      	mov	r2, r5
   2e254:	4621      	mov	r1, r4
   2e256:	4798      	blx	r3
}
   2e258:	b002      	add	sp, #8
   2e25a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2e25c:	f06f 0015 	mvn.w	r0, #21
   2e260:	e7fa      	b.n	2e258 <metal_device_open+0x34>
		return -ENODEV;
   2e262:	f06f 0012 	mvn.w	r0, #18
   2e266:	e7f7      	b.n	2e258 <metal_device_open+0x34>
		return -EINVAL;
   2e268:	f06f 0015 	mvn.w	r0, #21
}
   2e26c:	4770      	bx	lr

0002e26e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2e26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e272:	b088      	sub	sp, #32
   2e274:	4604      	mov	r4, r0
   2e276:	4688      	mov	r8, r1
   2e278:	4617      	mov	r7, r2
   2e27a:	461e      	mov	r6, r3
   2e27c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	const struct metal_io_ops nops = {
   2e27e:	2220      	movs	r2, #32
   2e280:	2100      	movs	r1, #0
   2e282:	4668      	mov	r0, sp
   2e284:	f7fc ff87 	bl	2b196 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
   2e288:	f8c4 8000 	str.w	r8, [r4]
	io->physmap = physmap;
   2e28c:	6067      	str	r7, [r4, #4]
	io->size = size;
   2e28e:	60a6      	str	r6, [r4, #8]
	io->page_shift = page_shift;
   2e290:	60e5      	str	r5, [r4, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2e292:	2d1f      	cmp	r5, #31
   2e294:	d912      	bls.n	2e2bc <metal_io_init+0x4e>
		/* avoid overflow */
		io->page_mask = -1UL;
   2e296:	f04f 33ff 	mov.w	r3, #4294967295
   2e29a:	6123      	str	r3, [r4, #16]
	else
		io->page_mask = (1UL << page_shift) - 1UL;
	io->mem_flags = mem_flags;
   2e29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2e29e:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2e2a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2e2a2:	b183      	cbz	r3, 2e2c6 <metal_io_init+0x58>
   2e2a4:	3418      	adds	r4, #24
   2e2a6:	469c      	mov	ip, r3
   2e2a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2e2ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2e2ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   2e2b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2e2b6:	b008      	add	sp, #32
   2e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		io->page_mask = (1UL << page_shift) - 1UL;
   2e2bc:	2301      	movs	r3, #1
   2e2be:	40ab      	lsls	r3, r5
   2e2c0:	3b01      	subs	r3, #1
   2e2c2:	6123      	str	r3, [r4, #16]
   2e2c4:	e7ea      	b.n	2e29c <metal_io_init+0x2e>
	io->ops = ops ? *ops : nops;
   2e2c6:	3418      	adds	r4, #24
   2e2c8:	466d      	mov	r5, sp
   2e2ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2e2cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2e2ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2e2d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   2e2d6:	e7ee      	b.n	2e2b6 <metal_io_init+0x48>

0002e2d8 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2e2d8:	b530      	push	{r4, r5, lr}
   2e2da:	b083      	sub	sp, #12
	return (io->virt != METAL_BAD_VA && offset < io->size
   2e2dc:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2e2de:	f1b4 3fff 	cmp.w	r4, #4294967295
   2e2e2:	d032      	beq.n	2e34a <metal_io_block_read+0x72>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2e2e4:	6885      	ldr	r5, [r0, #8]
   2e2e6:	42a9      	cmp	r1, r5
   2e2e8:	d232      	bcs.n	2e350 <metal_io_block_read+0x78>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2e2ea:	eb11 0c04 	adds.w	ip, r1, r4
   2e2ee:	d032      	beq.n	2e356 <metal_io_block_read+0x7e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2e2f0:	185c      	adds	r4, r3, r1
   2e2f2:	42ac      	cmp	r4, r5
   2e2f4:	d900      	bls.n	2e2f8 <metal_io_block_read+0x20>
		len = io->size - offset;
   2e2f6:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2e2f8:	6a04      	ldr	r4, [r0, #32]
   2e2fa:	b124      	cbz	r4, 2e306 <metal_io_block_read+0x2e>
		retlen = (*io->ops.block_read)(
   2e2fc:	9300      	str	r3, [sp, #0]
   2e2fe:	2305      	movs	r3, #5
   2e300:	47a0      	blx	r4
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2e302:	b003      	add	sp, #12
   2e304:	bd30      	pop	{r4, r5, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2e306:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2e30a:	4619      	mov	r1, r3
   2e30c:	e004      	b.n	2e318 <metal_io_block_read+0x40>
				*(const unsigned char *)ptr;
   2e30e:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   2e312:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2e316:	3901      	subs	r1, #1
		while ( len && (
   2e318:	b159      	cbz	r1, 2e332 <metal_io_block_read+0x5a>
   2e31a:	f012 0f03 	tst.w	r2, #3
   2e31e:	d1f6      	bne.n	2e30e <metal_io_block_read+0x36>
			((uintptr_t)dest % sizeof(int)) ||
   2e320:	f01c 0f03 	tst.w	ip, #3
   2e324:	d1f3      	bne.n	2e30e <metal_io_block_read+0x36>
   2e326:	e004      	b.n	2e332 <metal_io_block_read+0x5a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2e328:	f85c 0b04 	ldr.w	r0, [ip], #4
   2e32c:	f842 0b04 	str.w	r0, [r2], #4
					len -= sizeof(int))
   2e330:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2e332:	2903      	cmp	r1, #3
   2e334:	dcf8      	bgt.n	2e328 <metal_io_block_read+0x50>
   2e336:	e004      	b.n	2e342 <metal_io_block_read+0x6a>
				*(const unsigned char *)ptr;
   2e338:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   2e33c:	f802 0b01 	strb.w	r0, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2e340:	3901      	subs	r1, #1
   2e342:	2900      	cmp	r1, #0
   2e344:	d1f8      	bne.n	2e338 <metal_io_block_read+0x60>
	retlen = len;
   2e346:	4618      	mov	r0, r3
   2e348:	e7db      	b.n	2e302 <metal_io_block_read+0x2a>
		return -ERANGE;
   2e34a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e34e:	e7d8      	b.n	2e302 <metal_io_block_read+0x2a>
   2e350:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e354:	e7d5      	b.n	2e302 <metal_io_block_read+0x2a>
   2e356:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e35a:	e7d2      	b.n	2e302 <metal_io_block_read+0x2a>

0002e35c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2e35c:	b530      	push	{r4, r5, lr}
   2e35e:	b083      	sub	sp, #12
   2e360:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2e362:	f1b4 3fff 	cmp.w	r4, #4294967295
   2e366:	d031      	beq.n	2e3cc <metal_io_block_write+0x70>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2e368:	6885      	ldr	r5, [r0, #8]
   2e36a:	42a9      	cmp	r1, r5
   2e36c:	d231      	bcs.n	2e3d2 <metal_io_block_write+0x76>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2e36e:	eb11 0c04 	adds.w	ip, r1, r4
   2e372:	d031      	beq.n	2e3d8 <metal_io_block_write+0x7c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2e374:	185c      	adds	r4, r3, r1
   2e376:	42ac      	cmp	r4, r5
   2e378:	d900      	bls.n	2e37c <metal_io_block_write+0x20>
		len = io->size - offset;
   2e37a:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2e37c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2e37e:	b18c      	cbz	r4, 2e3a4 <metal_io_block_write+0x48>
		retlen = (*io->ops.block_write)(
   2e380:	9300      	str	r3, [sp, #0]
   2e382:	2305      	movs	r3, #5
   2e384:	47a0      	blx	r4
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2e386:	b003      	add	sp, #12
   2e388:	bd30      	pop	{r4, r5, pc}
				*(const unsigned char *)source;
   2e38a:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   2e38e:	f80c 0b01 	strb.w	r0, [ip], #1
			len--;
   2e392:	3901      	subs	r1, #1
		while ( len && (
   2e394:	b169      	cbz	r1, 2e3b2 <metal_io_block_write+0x56>
   2e396:	f01c 0f03 	tst.w	ip, #3
   2e39a:	d1f6      	bne.n	2e38a <metal_io_block_write+0x2e>
			((uintptr_t)ptr % sizeof(int)) ||
   2e39c:	f012 0f03 	tst.w	r2, #3
   2e3a0:	d1f3      	bne.n	2e38a <metal_io_block_write+0x2e>
   2e3a2:	e006      	b.n	2e3b2 <metal_io_block_write+0x56>
   2e3a4:	4619      	mov	r1, r3
   2e3a6:	e7f5      	b.n	2e394 <metal_io_block_write+0x38>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2e3a8:	f852 0b04 	ldr.w	r0, [r2], #4
   2e3ac:	f84c 0b04 	str.w	r0, [ip], #4
					len -= sizeof(int))
   2e3b0:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2e3b2:	2903      	cmp	r1, #3
   2e3b4:	dcf8      	bgt.n	2e3a8 <metal_io_block_write+0x4c>
		for (; len != 0; ptr++, source++, len--)
   2e3b6:	b129      	cbz	r1, 2e3c4 <metal_io_block_write+0x68>
				*(const unsigned char *)source;
   2e3b8:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   2e3bc:	f80c 0b01 	strb.w	r0, [ip], #1
		for (; len != 0; ptr++, source++, len--)
   2e3c0:	3901      	subs	r1, #1
   2e3c2:	e7f8      	b.n	2e3b6 <metal_io_block_write+0x5a>
		atomic_thread_fence(memory_order_seq_cst);
   2e3c4:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2e3c8:	4618      	mov	r0, r3
   2e3ca:	e7dc      	b.n	2e386 <metal_io_block_write+0x2a>
		return -ERANGE;
   2e3cc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e3d0:	e7d9      	b.n	2e386 <metal_io_block_write+0x2a>
   2e3d2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e3d6:	e7d6      	b.n	2e386 <metal_io_block_write+0x2a>
   2e3d8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e3dc:	e7d3      	b.n	2e386 <metal_io_block_write+0x2a>

0002e3de <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2e3de:	b530      	push	{r4, r5, lr}
   2e3e0:	b083      	sub	sp, #12
   2e3e2:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2e3e4:	f1b4 3fff 	cmp.w	r4, #4294967295
   2e3e8:	d034      	beq.n	2e454 <metal_io_block_set+0x76>
   2e3ea:	461d      	mov	r5, r3
	return (io->virt != METAL_BAD_VA && offset < io->size
   2e3ec:	6883      	ldr	r3, [r0, #8]
   2e3ee:	4299      	cmp	r1, r3
   2e3f0:	d233      	bcs.n	2e45a <metal_io_block_set+0x7c>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2e3f2:	eb11 0c04 	adds.w	ip, r1, r4
   2e3f6:	d033      	beq.n	2e460 <metal_io_block_set+0x82>
		return -ERANGE;
	if ((offset + len) > io->size)
   2e3f8:	186c      	adds	r4, r5, r1
   2e3fa:	429c      	cmp	r4, r3
   2e3fc:	d900      	bls.n	2e400 <metal_io_block_set+0x22>
		len = io->size - offset;
   2e3fe:	1a5d      	subs	r5, r3, r1
	retlen = len;
	if (io->ops.block_set) {
   2e400:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2e402:	b12c      	cbz	r4, 2e410 <metal_io_block_set+0x32>
		(*io->ops.block_set)(
   2e404:	9500      	str	r5, [sp, #0]
   2e406:	2305      	movs	r3, #5
   2e408:	47a0      	blx	r4
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2e40a:	4628      	mov	r0, r5
}
   2e40c:	b003      	add	sp, #12
   2e40e:	bd30      	pop	{r4, r5, pc}
		unsigned int cint = value;
   2e410:	4613      	mov	r3, r2
		for (i = 1; i < sizeof(int); i++)
   2e412:	2101      	movs	r1, #1
   2e414:	e004      	b.n	2e420 <metal_io_block_set+0x42>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2e416:	00c8      	lsls	r0, r1, #3
   2e418:	fa02 f000 	lsl.w	r0, r2, r0
   2e41c:	4303      	orrs	r3, r0
		for (i = 1; i < sizeof(int); i++)
   2e41e:	3101      	adds	r1, #1
   2e420:	2903      	cmp	r1, #3
   2e422:	d9f8      	bls.n	2e416 <metal_io_block_set+0x38>
   2e424:	4629      	mov	r1, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2e426:	b149      	cbz	r1, 2e43c <metal_io_block_set+0x5e>
   2e428:	f01c 0f03 	tst.w	ip, #3
   2e42c:	d006      	beq.n	2e43c <metal_io_block_set+0x5e>
			*(unsigned char *)ptr = (unsigned char) value;
   2e42e:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2e432:	3901      	subs	r1, #1
   2e434:	e7f7      	b.n	2e426 <metal_io_block_set+0x48>
			*(unsigned int *)ptr = cint;
   2e436:	f84c 3b04 	str.w	r3, [ip], #4
						len -= sizeof(int))
   2e43a:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2e43c:	2903      	cmp	r1, #3
   2e43e:	dcfa      	bgt.n	2e436 <metal_io_block_set+0x58>
   2e440:	e002      	b.n	2e448 <metal_io_block_set+0x6a>
			*(unsigned char *)ptr = (unsigned char) value;
   2e442:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len != 0; ptr++, len--)
   2e446:	3901      	subs	r1, #1
   2e448:	2900      	cmp	r1, #0
   2e44a:	d1fa      	bne.n	2e442 <metal_io_block_set+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2e44c:	f3bf 8f5b 	dmb	ish
	return retlen;
   2e450:	4628      	mov	r0, r5
   2e452:	e7db      	b.n	2e40c <metal_io_block_set+0x2e>
		return -ERANGE;
   2e454:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e458:	e7d8      	b.n	2e40c <metal_io_block_set+0x2e>
   2e45a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e45e:	e7d5      	b.n	2e40c <metal_io_block_set+0x2e>
   2e460:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2e464:	e7d2      	b.n	2e40c <metal_io_block_set+0x2e>

0002e466 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2e466:	2000      	movs	r0, #0
   2e468:	4770      	bx	lr

0002e46a <vring_size>:
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   2e46a:	1cc3      	adds	r3, r0, #3
   2e46c:	005b      	lsls	r3, r3, #1
   2e46e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	size = (size + align - 1) & ~(align - 1);
   2e472:	440b      	add	r3, r1
   2e474:	3b01      	subs	r3, #1
   2e476:	4249      	negs	r1, r1
   2e478:	400b      	ands	r3, r1
	size += sizeof(struct vring_used) +
   2e47a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3

	return size;
}
   2e47e:	3006      	adds	r0, #6
   2e480:	4770      	bx	lr

0002e482 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2e482:	b508      	push	{r3, lr}
	if (!io->ops.offset_to_phys) {
   2e484:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2e486:	b10b      	cbz	r3, 2e48c <metal_io_phys+0xa>
		return (io->physmap && offset < io->size
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
   2e488:	4798      	blx	r3
}
   2e48a:	bd08      	pop	{r3, pc}
		unsigned long page = (io->page_shift >=
   2e48c:	68c3      	ldr	r3, [r0, #12]
				     0 : offset >> io->page_shift);
   2e48e:	2b1f      	cmp	r3, #31
   2e490:	d80d      	bhi.n	2e4ae <metal_io_phys+0x2c>
   2e492:	fa21 f303 	lsr.w	r3, r1, r3
		return (io->physmap && offset < io->size
   2e496:	6842      	ldr	r2, [r0, #4]
			: METAL_BAD_PHYS);
   2e498:	b15a      	cbz	r2, 2e4b2 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   2e49a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   2e49e:	458c      	cmp	ip, r1
   2e4a0:	d90a      	bls.n	2e4b8 <metal_io_phys+0x36>
			? io->physmap[page] + (offset & io->page_mask)
   2e4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2e4a6:	6902      	ldr	r2, [r0, #16]
   2e4a8:	400a      	ands	r2, r1
			: METAL_BAD_PHYS);
   2e4aa:	1898      	adds	r0, r3, r2
   2e4ac:	e7ed      	b.n	2e48a <metal_io_phys+0x8>
				     0 : offset >> io->page_shift);
   2e4ae:	2300      	movs	r3, #0
   2e4b0:	e7f1      	b.n	2e496 <metal_io_phys+0x14>
			: METAL_BAD_PHYS);
   2e4b2:	f04f 30ff 	mov.w	r0, #4294967295
   2e4b6:	e7e8      	b.n	2e48a <metal_io_phys+0x8>
   2e4b8:	f04f 30ff 	mov.w	r0, #4294967295
   2e4bc:	e7e5      	b.n	2e48a <metal_io_phys+0x8>

0002e4be <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2e4be:	b570      	push	{r4, r5, r6, lr}
   2e4c0:	4605      	mov	r5, r0
   2e4c2:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2e4c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2e4c6:	b11b      	cbz	r3, 2e4d0 <metal_io_phys_to_offset+0x12>
			offset += io->page_mask + 1;
		} while (offset < io->size);
		return METAL_BAD_OFFSET;
	}

	return (*io->ops.phys_to_offset)(io, phys);
   2e4c8:	4798      	blx	r3
   2e4ca:	4604      	mov	r4, r0
}
   2e4cc:	4620      	mov	r0, r4
   2e4ce:	bd70      	pop	{r4, r5, r6, pc}
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2e4d0:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2e4d2:	f1b4 3fff 	cmp.w	r4, #4294967295
   2e4d6:	d00f      	beq.n	2e4f8 <metal_io_phys_to_offset+0x3a>
   2e4d8:	400c      	ands	r4, r1
			if (metal_io_phys(io, offset) == phys)
   2e4da:	4621      	mov	r1, r4
   2e4dc:	4628      	mov	r0, r5
   2e4de:	f7ff ffd0 	bl	2e482 <metal_io_phys>
   2e4e2:	42b0      	cmp	r0, r6
   2e4e4:	d0f2      	beq.n	2e4cc <metal_io_phys_to_offset+0xe>
			offset += io->page_mask + 1;
   2e4e6:	692b      	ldr	r3, [r5, #16]
   2e4e8:	441c      	add	r4, r3
   2e4ea:	3401      	adds	r4, #1
		} while (offset < io->size);
   2e4ec:	68ab      	ldr	r3, [r5, #8]
   2e4ee:	42a3      	cmp	r3, r4
   2e4f0:	d8f3      	bhi.n	2e4da <metal_io_phys_to_offset+0x1c>
		return METAL_BAD_OFFSET;
   2e4f2:	f04f 34ff 	mov.w	r4, #4294967295
   2e4f6:	e7e9      	b.n	2e4cc <metal_io_phys_to_offset+0xe>
			phys - io->physmap[0] :  phys & io->page_mask);
   2e4f8:	6843      	ldr	r3, [r0, #4]
   2e4fa:	681c      	ldr	r4, [r3, #0]
   2e4fc:	1b0c      	subs	r4, r1, r4
   2e4fe:	e7ec      	b.n	2e4da <metal_io_phys_to_offset+0x1c>

0002e500 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2e500:	b510      	push	{r4, lr}
   2e502:	4604      	mov	r4, r0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2e504:	f7ff ffdb 	bl	2e4be <metal_io_phys_to_offset>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2e508:	6823      	ldr	r3, [r4, #0]
		: NULL);
   2e50a:	f1b3 3fff 	cmp.w	r3, #4294967295
   2e50e:	d004      	beq.n	2e51a <metal_io_phys_to_virt+0x1a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2e510:	68a2      	ldr	r2, [r4, #8]
   2e512:	4290      	cmp	r0, r2
   2e514:	d203      	bcs.n	2e51e <metal_io_phys_to_virt+0x1e>
		? (void *)((uintptr_t)io->virt + offset)
   2e516:	4418      	add	r0, r3
}
   2e518:	bd10      	pop	{r4, pc}
		: NULL);
   2e51a:	2000      	movs	r0, #0
   2e51c:	e7fc      	b.n	2e518 <metal_io_phys_to_virt+0x18>
   2e51e:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2e520:	e7fa      	b.n	2e518 <metal_io_phys_to_virt+0x18>

0002e522 <metal_io_virt_to_phys>:
 * @return	METAL_BAD_PHYS if out of range, or corresponding
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
   2e522:	b508      	push	{r3, lr}
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2e524:	6803      	ldr	r3, [r0, #0]
   2e526:	1ac9      	subs	r1, r1, r3
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2e528:	6883      	ldr	r3, [r0, #8]
   2e52a:	4299      	cmp	r1, r3
   2e52c:	d202      	bcs.n	2e534 <metal_io_virt_to_phys+0x12>
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2e52e:	f7ff ffa8 	bl	2e482 <metal_io_phys>
}
   2e532:	bd08      	pop	{r3, pc}
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2e534:	f04f 31ff 	mov.w	r1, #4294967295
   2e538:	e7f9      	b.n	2e52e <metal_io_virt_to_phys+0xc>

0002e53a <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
   2e53a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e53e:	4683      	mov	fp, r0
   2e540:	4689      	mov	r9, r1
   2e542:	4610      	mov	r0, r2
   2e544:	4698      	mov	r8, r3
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
   2e546:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   2e548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e54a:	441f      	add	r7, r3

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2e54c:	2500      	movs	r5, #0
   2e54e:	e001      	b.n	2e554 <vq_ring_add_buffer+0x1a>
   2e550:	3501      	adds	r5, #1
   2e552:	89e0      	ldrh	r0, [r4, #14]
   2e554:	42bd      	cmp	r5, r7
   2e556:	da22      	bge.n	2e59e <vq_ring_add_buffer+0x64>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		/* CACHE: No need to invalidate desc because it is only written by master */
		dp = &desc[idx];
   2e558:	ea4f 1a00 	mov.w	sl, r0, lsl #4
   2e55c:	eb09 1400 	add.w	r4, r9, r0, lsl #4
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2e560:	eb08 06c5 	add.w	r6, r8, r5, lsl #3
	return metal_io_virt_to_phys(io, buf);
   2e564:	f858 1035 	ldr.w	r1, [r8, r5, lsl #3]
   2e568:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
   2e56c:	f7ff ffd9 	bl	2e522 <metal_io_virt_to_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2e570:	2300      	movs	r3, #0
   2e572:	f849 000a 	str.w	r0, [r9, sl]
   2e576:	6063      	str	r3, [r4, #4]
		dp->len = buf_list[i].len;
   2e578:	6872      	ldr	r2, [r6, #4]
   2e57a:	60a2      	str	r2, [r4, #8]
		dp->flags = 0;
   2e57c:	7323      	strb	r3, [r4, #12]
   2e57e:	7363      	strb	r3, [r4, #13]

		if (i < needed - 1)
   2e580:	1e7b      	subs	r3, r7, #1
   2e582:	42ab      	cmp	r3, r5
   2e584:	dd03      	ble.n	2e58e <vq_ring_add_buffer+0x54>
			dp->flags |= VRING_DESC_F_NEXT;
   2e586:	2301      	movs	r3, #1
   2e588:	7323      	strb	r3, [r4, #12]
   2e58a:	2300      	movs	r3, #0
   2e58c:	7363      	strb	r3, [r4, #13]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
   2e58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e590:	429d      	cmp	r5, r3
   2e592:	dbdd      	blt.n	2e550 <vq_ring_add_buffer+0x16>
			dp->flags |= VRING_DESC_F_WRITE;
   2e594:	89a3      	ldrh	r3, [r4, #12]
   2e596:	f043 0302 	orr.w	r3, r3, #2
   2e59a:	81a3      	strh	r3, [r4, #12]
   2e59c:	e7d8      	b.n	2e550 <vq_ring_add_buffer+0x16>
		VRING_FLUSH(desc[idx]);

	}

	return idx;
}
   2e59e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e5a2 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
   2e5a2:	b510      	push	{r4, lr}
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	/* CACHE: desc is never written by slave, no need to invalidate */
	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
   2e5a4:	6984      	ldr	r4, [r0, #24]
   2e5a6:	eb04 1301 	add.w	r3, r4, r1, lsl #4
	dxp = &vq->vq_descx[desc_idx];

	if (vq->vq_free_cnt == 0) {
   2e5aa:	f8b0 e024 	ldrh.w	lr, [r0, #36]	; 0x24
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
   2e5ae:	1d8a      	adds	r2, r1, #6
   2e5b0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   2e5b4:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   2e5b8:	44e6      	add	lr, ip
   2e5ba:	f8a0 e024 	strh.w	lr, [r0, #36]	; 0x24
	dxp->ndescs--;
   2e5be:	f10c 3cff 	add.w	ip, ip, #4294967295
   2e5c2:	f8a2 c008 	strh.w	ip, [r2, #8]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2e5c6:	899a      	ldrh	r2, [r3, #12]
   2e5c8:	f012 0f04 	tst.w	r2, #4
   2e5cc:	d00f      	beq.n	2e5ee <vq_ring_free_chain+0x4c>
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 *
	 * CACHE: desc.next is never read by slave, no need to flush it.
	 */
	dp->next = vq->vq_desc_head_idx;
   2e5ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   2e5d0:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
   2e5d2:	8581      	strh	r1, [r0, #44]	; 0x2c
}
   2e5d4:	bd10      	pop	{r4, pc}
			dp = &vq->vq_ring.desc[dp->next];
   2e5d6:	89db      	ldrh	r3, [r3, #14]
   2e5d8:	eb04 1303 	add.w	r3, r4, r3, lsl #4
			dxp->ndescs--;
   2e5dc:	1d8a      	adds	r2, r1, #6
   2e5de:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   2e5e2:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   2e5e6:	f10c 3cff 	add.w	ip, ip, #4294967295
   2e5ea:	f8a2 c008 	strh.w	ip, [r2, #8]
		while (dp->flags & VRING_DESC_F_NEXT) {
   2e5ee:	899a      	ldrh	r2, [r3, #12]
   2e5f0:	f012 0f01 	tst.w	r2, #1
   2e5f4:	d1ef      	bne.n	2e5d6 <vq_ring_free_chain+0x34>
   2e5f6:	e7ea      	b.n	2e5ce <vq_ring_free_chain+0x2c>

0002e5f8 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
   2e5f8:	b410      	push	{r4}
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
   2e5fa:	8944      	ldrh	r4, [r0, #10]

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
   2e5fc:	6144      	str	r4, [r0, #20]
	vr->desc = (struct vring_desc *)p;
   2e5fe:	6181      	str	r1, [r0, #24]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2e600:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   2e604:	61c1      	str	r1, [r0, #28]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2e606:	eb01 0344 	add.w	r3, r1, r4, lsl #1
   2e60a:	3304      	adds	r3, #4
   2e60c:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
   2e60e:	3301      	adds	r3, #1
   2e610:	4252      	negs	r2, r2
   2e612:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
   2e614:	6203      	str	r3, [r0, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2e616:	6803      	ldr	r3, [r0, #0]
   2e618:	699b      	ldr	r3, [r3, #24]
   2e61a:	b19b      	cbz	r3, 2e644 <vq_ring_init+0x4c>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_DEVICE_ONLY*/
}
   2e61c:	bc10      	pop	{r4}
   2e61e:	4770      	bx	lr
			vr->desc[i].next = i + 1;
   2e620:	6982      	ldr	r2, [r0, #24]
   2e622:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2e626:	1c59      	adds	r1, r3, #1
   2e628:	81d1      	strh	r1, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2e62a:	460b      	mov	r3, r1
   2e62c:	1e62      	subs	r2, r4, #1
   2e62e:	429a      	cmp	r2, r3
   2e630:	dcf6      	bgt.n	2e620 <vq_ring_init+0x28>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2e632:	6982      	ldr	r2, [r0, #24]
   2e634:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   2e638:	2200      	movs	r2, #0
   2e63a:	739a      	strb	r2, [r3, #14]
   2e63c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   2e640:	73da      	strb	r2, [r3, #15]
}
   2e642:	e7eb      	b.n	2e61c <vq_ring_init+0x24>
		for (i = 0; i < size - 1; i++)
   2e644:	2300      	movs	r3, #0
   2e646:	e7f1      	b.n	2e62c <vq_ring_init+0x34>

0002e648 <vq_ring_must_notify>:
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2e648:	6803      	ldr	r3, [r0, #0]
   2e64a:	691a      	ldr	r2, [r3, #16]
   2e64c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2e650:	d027      	beq.n	2e6a2 <vq_ring_must_notify+0x5a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2e652:	699b      	ldr	r3, [r3, #24]
   2e654:	b11b      	cbz	r3, 2e65e <vq_ring_must_notify+0x16>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2e656:	2b01      	cmp	r3, #1
   2e658:	d012      	beq.n	2e680 <vq_ring_must_notify+0x38>
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	}

	return 0;
   2e65a:	2000      	movs	r0, #0
   2e65c:	4770      	bx	lr
			new_idx = vq->vq_ring.avail->idx;
   2e65e:	69c3      	ldr	r3, [r0, #28]
   2e660:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
   2e662:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_avail_event(&vq->vq_ring);
   2e664:	6a01      	ldr	r1, [r0, #32]
   2e666:	6940      	ldr	r0, [r0, #20]
   2e668:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   2e66c:	8889      	ldrh	r1, [r1, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2e66e:	1a52      	subs	r2, r2, r1
   2e670:	b292      	uxth	r2, r2
   2e672:	3a01      	subs	r2, #1
   2e674:	b292      	uxth	r2, r2
   2e676:	4293      	cmp	r3, r2
   2e678:	bf94      	ite	ls
   2e67a:	2000      	movls	r0, #0
   2e67c:	2001      	movhi	r0, #1
						prev_idx) != 0;
   2e67e:	4770      	bx	lr
			new_idx = vq->vq_ring.used->idx;
   2e680:	6a03      	ldr	r3, [r0, #32]
   2e682:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
   2e684:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_used_event(&vq->vq_ring);
   2e686:	69c1      	ldr	r1, [r0, #28]
   2e688:	6940      	ldr	r0, [r0, #20]
   2e68a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   2e68e:	8889      	ldrh	r1, [r1, #4]
   2e690:	1a52      	subs	r2, r2, r1
   2e692:	b292      	uxth	r2, r2
   2e694:	3a01      	subs	r2, #1
   2e696:	b292      	uxth	r2, r2
   2e698:	4293      	cmp	r3, r2
   2e69a:	bf94      	ite	ls
   2e69c:	2000      	movls	r0, #0
   2e69e:	2001      	movhi	r0, #1
						prev_idx) != 0;
   2e6a0:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2e6a2:	699b      	ldr	r3, [r3, #24]
   2e6a4:	b11b      	cbz	r3, 2e6ae <vq_ring_must_notify+0x66>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2e6a6:	2b01      	cmp	r3, #1
   2e6a8:	d008      	beq.n	2e6bc <vq_ring_must_notify+0x74>
	return 0;
   2e6aa:	2000      	movs	r0, #0
}
   2e6ac:	4770      	bx	lr
			return (vq->vq_ring.used->flags &
   2e6ae:	6a03      	ldr	r3, [r0, #32]
   2e6b0:	8818      	ldrh	r0, [r3, #0]
				VRING_USED_F_NO_NOTIFY) == 0;
   2e6b2:	f080 0001 	eor.w	r0, r0, #1
   2e6b6:	f000 0001 	and.w	r0, r0, #1
   2e6ba:	4770      	bx	lr
			return (vq->vq_ring.avail->flags &
   2e6bc:	69c3      	ldr	r3, [r0, #28]
   2e6be:	8818      	ldrh	r0, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2e6c0:	f080 0001 	eor.w	r0, r0, #1
   2e6c4:	f000 0001 	and.w	r0, r0, #1
   2e6c8:	4770      	bx	lr

0002e6ca <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
   2e6ca:	b508      	push	{r3, lr}
	if (vq->notify)
   2e6cc:	6903      	ldr	r3, [r0, #16]
   2e6ce:	b103      	cbz	r3, 2e6d2 <vq_ring_notify+0x8>
		vq->notify(vq);
   2e6d0:	4798      	blx	r3
}
   2e6d2:	bd08      	pop	{r3, pc}

0002e6d4 <vq_ring_update_avail>:
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2e6d4:	69c2      	ldr	r2, [r0, #28]
   2e6d6:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   2e6da:	8943      	ldrh	r3, [r0, #10]
   2e6dc:	3b01      	subs	r3, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2e6de:	ea03 030c 	and.w	r3, r3, ip
   2e6e2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   2e6e6:	8091      	strh	r1, [r2, #4]
	atomic_thread_fence(memory_order_seq_cst);
   2e6e8:	f3bf 8f5b 	dmb	ish
	vq->vq_ring.avail->idx++;
   2e6ec:	69c2      	ldr	r2, [r0, #28]
   2e6ee:	8853      	ldrh	r3, [r2, #2]
   2e6f0:	3301      	adds	r3, #1
   2e6f2:	8053      	strh	r3, [r2, #2]
	vq->vq_queued_cnt++;
   2e6f4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   2e6f6:	3301      	adds	r3, #1
   2e6f8:	84c3      	strh	r3, [r0, #38]	; 0x26
}
   2e6fa:	4770      	bx	lr

0002e6fc <virtqueue_create>:
{
   2e6fc:	b510      	push	{r4, lr}
   2e6fe:	4604      	mov	r4, r0
   2e700:	9804      	ldr	r0, [sp, #16]
		vq->vq_dev = virt_dev;
   2e702:	6004      	str	r4, [r0, #0]
		vq->vq_name = name;
   2e704:	6042      	str	r2, [r0, #4]
		vq->vq_queue_index = id;
   2e706:	8101      	strh	r1, [r0, #8]
		vq->vq_nentries = ring->num_descs;
   2e708:	891a      	ldrh	r2, [r3, #8]
   2e70a:	8142      	strh	r2, [r0, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2e70c:	8482      	strh	r2, [r0, #36]	; 0x24
		vq->callback = callback;
   2e70e:	9a02      	ldr	r2, [sp, #8]
   2e710:	60c2      	str	r2, [r0, #12]
		vq->notify = notify;
   2e712:	9a03      	ldr	r2, [sp, #12]
   2e714:	6102      	str	r2, [r0, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2e716:	685a      	ldr	r2, [r3, #4]
   2e718:	6819      	ldr	r1, [r3, #0]
   2e71a:	f7ff ff6d 	bl	2e5f8 <vq_ring_init>
}
   2e71e:	2000      	movs	r0, #0
   2e720:	bd10      	pop	{r4, pc}

0002e722 <virtqueue_add_buffer>:
{
   2e722:	b570      	push	{r4, r5, r6, lr}
   2e724:	b082      	sub	sp, #8
   2e726:	4604      	mov	r4, r0
	needed = readable + writable;
   2e728:	18d5      	adds	r5, r2, r3
		head_idx = vq->vq_desc_head_idx;
   2e72a:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
		dxp->cookie = cookie;
   2e72c:	f106 0c06 	add.w	ip, r6, #6
   2e730:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
   2e734:	f8dd e018 	ldr.w	lr, [sp, #24]
   2e738:	f8cc e004 	str.w	lr, [ip, #4]
		dxp->ndescs = needed;
   2e73c:	b2ad      	uxth	r5, r5
   2e73e:	f8ac 5008 	strh.w	r5, [ip, #8]
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2e742:	9301      	str	r3, [sp, #4]
   2e744:	9200      	str	r2, [sp, #0]
   2e746:	460b      	mov	r3, r1
   2e748:	4632      	mov	r2, r6
   2e74a:	6981      	ldr	r1, [r0, #24]
   2e74c:	f7ff fef5 	bl	2e53a <vq_ring_add_buffer>
		vq->vq_desc_head_idx = idx;
   2e750:	85a0      	strh	r0, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2e752:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2e754:	1b5b      	subs	r3, r3, r5
   2e756:	84a3      	strh	r3, [r4, #36]	; 0x24
		vq_ring_update_avail(vq, head_idx);
   2e758:	4631      	mov	r1, r6
   2e75a:	4620      	mov	r0, r4
   2e75c:	f7ff ffba 	bl	2e6d4 <vq_ring_update_avail>
}
   2e760:	2000      	movs	r0, #0
   2e762:	b002      	add	sp, #8
   2e764:	bd70      	pop	{r4, r5, r6, pc}

0002e766 <virtqueue_get_buffer>:
{
   2e766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2e768:	4604      	mov	r4, r0
   2e76a:	b310      	cbz	r0, 2e7b2 <virtqueue_get_buffer+0x4c>
   2e76c:	460b      	mov	r3, r1
   2e76e:	4617      	mov	r7, r2
   2e770:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
   2e772:	6a02      	ldr	r2, [r0, #32]
   2e774:	8850      	ldrh	r0, [r2, #2]
   2e776:	4281      	cmp	r1, r0
   2e778:	d01c      	beq.n	2e7b4 <virtqueue_get_buffer+0x4e>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2e77a:	1c48      	adds	r0, r1, #1
   2e77c:	85e0      	strh	r0, [r4, #46]	; 0x2e
   2e77e:	8966      	ldrh	r6, [r4, #10]
   2e780:	3e01      	subs	r6, #1
   2e782:	400e      	ands	r6, r1
	atomic_thread_fence(memory_order_seq_cst);
   2e784:	f3bf 8f5b 	dmb	ish
	desc_idx = (uint16_t)uep->id;
   2e788:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   2e78c:	684d      	ldr	r5, [r1, #4]
   2e78e:	b2a9      	uxth	r1, r5
	if (len)
   2e790:	b11b      	cbz	r3, 2e79a <virtqueue_get_buffer+0x34>
		*len = uep->len;
   2e792:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   2e796:	6892      	ldr	r2, [r2, #8]
   2e798:	601a      	str	r2, [r3, #0]
	vq_ring_free_chain(vq, desc_idx);
   2e79a:	4620      	mov	r0, r4
   2e79c:	f7ff ff01 	bl	2e5a2 <vq_ring_free_chain>
	cookie = vq->vq_descx[desc_idx].cookie;
   2e7a0:	b2ad      	uxth	r5, r5
   2e7a2:	3506      	adds	r5, #6
   2e7a4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   2e7a8:	6868      	ldr	r0, [r5, #4]
	vq->vq_descx[desc_idx].cookie = NULL;
   2e7aa:	2300      	movs	r3, #0
   2e7ac:	606b      	str	r3, [r5, #4]
	if (idx)
   2e7ae:	b107      	cbz	r7, 2e7b2 <virtqueue_get_buffer+0x4c>
		*idx = used_idx;
   2e7b0:	803e      	strh	r6, [r7, #0]
}
   2e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   2e7b4:	2000      	movs	r0, #0
   2e7b6:	e7fc      	b.n	2e7b2 <virtqueue_get_buffer+0x4c>

0002e7b8 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2e7b8:	6983      	ldr	r3, [r0, #24]
   2e7ba:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2e7be:	6898      	ldr	r0, [r3, #8]
   2e7c0:	4770      	bx	lr

0002e7c2 <virtqueue_get_available_buffer>:
{
   2e7c2:	b570      	push	{r4, r5, r6, lr}
   2e7c4:	460d      	mov	r5, r1
   2e7c6:	4616      	mov	r6, r2
	atomic_thread_fence(memory_order_seq_cst);
   2e7c8:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2e7cc:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2e7ce:	69c1      	ldr	r1, [r0, #28]
   2e7d0:	884b      	ldrh	r3, [r1, #2]
   2e7d2:	429a      	cmp	r2, r3
   2e7d4:	d017      	beq.n	2e806 <virtqueue_get_available_buffer+0x44>
   2e7d6:	4604      	mov	r4, r0
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2e7d8:	1c53      	adds	r3, r2, #1
   2e7da:	8603      	strh	r3, [r0, #48]	; 0x30
   2e7dc:	8943      	ldrh	r3, [r0, #10]
   2e7de:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2e7e0:	4013      	ands	r3, r2
   2e7e2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2e7e6:	888a      	ldrh	r2, [r1, #4]
   2e7e8:	b293      	uxth	r3, r2
   2e7ea:	802a      	strh	r2, [r5, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2e7ec:	6982      	ldr	r2, [r0, #24]
   2e7ee:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2e7f0:	58d1      	ldr	r1, [r2, r3]
   2e7f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2e7f4:	f7ff fe84 	bl	2e500 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2e7f8:	69a3      	ldr	r3, [r4, #24]
   2e7fa:	882a      	ldrh	r2, [r5, #0]
   2e7fc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2e800:	689b      	ldr	r3, [r3, #8]
   2e802:	6033      	str	r3, [r6, #0]
}
   2e804:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2e806:	2000      	movs	r0, #0
   2e808:	e7fc      	b.n	2e804 <virtqueue_get_available_buffer+0x42>

0002e80a <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2e80a:	6803      	ldr	r3, [r0, #0]
   2e80c:	691a      	ldr	r2, [r3, #16]
   2e80e:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2e812:	d01b      	beq.n	2e84c <virtqueue_disable_cb+0x42>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2e814:	699b      	ldr	r3, [r3, #24]
   2e816:	b94b      	cbnz	r3, 2e82c <virtqueue_disable_cb+0x22>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2e818:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   2e81a:	8942      	ldrh	r2, [r0, #10]
   2e81c:	1a9b      	subs	r3, r3, r2
   2e81e:	b29b      	uxth	r3, r3
			vring_used_event(&vq->vq_ring) =
   2e820:	69c2      	ldr	r2, [r0, #28]
   2e822:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2e824:	3b01      	subs	r3, #1
			vring_used_event(&vq->vq_ring) =
   2e826:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2e82a:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2e82c:	6803      	ldr	r3, [r0, #0]
   2e82e:	699b      	ldr	r3, [r3, #24]
   2e830:	2b01      	cmp	r3, #1
   2e832:	d000      	beq.n	2e836 <virtqueue_disable_cb+0x2c>
}
   2e834:	4770      	bx	lr
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2e836:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2e838:	8942      	ldrh	r2, [r0, #10]
   2e83a:	1a9b      	subs	r3, r3, r2
   2e83c:	b29b      	uxth	r3, r3
			vring_avail_event(&vq->vq_ring) =
   2e83e:	6a02      	ldr	r2, [r0, #32]
   2e840:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2e842:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   2e844:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2e848:	8093      	strh	r3, [r2, #4]
   2e84a:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2e84c:	699b      	ldr	r3, [r3, #24]
   2e84e:	b923      	cbnz	r3, 2e85a <virtqueue_disable_cb+0x50>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2e850:	69c2      	ldr	r2, [r0, #28]
   2e852:	8813      	ldrh	r3, [r2, #0]
   2e854:	f043 0301 	orr.w	r3, r3, #1
   2e858:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2e85a:	6803      	ldr	r3, [r0, #0]
   2e85c:	699b      	ldr	r3, [r3, #24]
   2e85e:	2b01      	cmp	r3, #1
   2e860:	d1e8      	bne.n	2e834 <virtqueue_disable_cb+0x2a>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2e862:	6a02      	ldr	r2, [r0, #32]
   2e864:	8813      	ldrh	r3, [r2, #0]
   2e866:	f043 0301 	orr.w	r3, r3, #1
   2e86a:	8013      	strh	r3, [r2, #0]
}
   2e86c:	e7e2      	b.n	2e834 <virtqueue_disable_cb+0x2a>

0002e86e <virtqueue_kick>:
{
   2e86e:	b510      	push	{r4, lr}
   2e870:	4604      	mov	r4, r0
	atomic_thread_fence(memory_order_seq_cst);
   2e872:	f3bf 8f5b 	dmb	ish
	if (vq_ring_must_notify(vq))
   2e876:	f7ff fee7 	bl	2e648 <vq_ring_must_notify>
   2e87a:	b910      	cbnz	r0, 2e882 <virtqueue_kick+0x14>
	vq->vq_queued_cnt = 0;
   2e87c:	2300      	movs	r3, #0
   2e87e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2e880:	bd10      	pop	{r4, pc}
		vq_ring_notify(vq);
   2e882:	4620      	mov	r0, r4
   2e884:	f7ff ff21 	bl	2e6ca <vq_ring_notify>
   2e888:	e7f8      	b.n	2e87c <virtqueue_kick+0xe>

0002e88a <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2e88a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   2e88c:	69c2      	ldr	r2, [r0, #28]
   2e88e:	8853      	ldrh	r3, [r2, #2]
   2e890:	4299      	cmp	r1, r3
   2e892:	d00a      	beq.n	2e8aa <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2e894:	8943      	ldrh	r3, [r0, #10]
   2e896:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2e898:	400b      	ands	r3, r1
   2e89a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   2e89e:	8892      	ldrh	r2, [r2, #4]
	len = vq->vq_ring.desc[avail_idx].len;
   2e8a0:	6983      	ldr	r3, [r0, #24]
   2e8a2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2e8a6:	6898      	ldr	r0, [r3, #8]
	return len;
   2e8a8:	4770      	bx	lr
		return 0;
   2e8aa:	2000      	movs	r0, #0
}
   2e8ac:	4770      	bx	lr

0002e8ae <virtqueue_notification>:
{
   2e8ae:	b508      	push	{r3, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2e8b0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2e8b4:	68c3      	ldr	r3, [r0, #12]
   2e8b6:	b103      	cbz	r3, 2e8ba <virtqueue_notification+0xc>
		vq->callback(vq);
   2e8b8:	4798      	blx	r3
}
   2e8ba:	bd08      	pop	{r3, pc}

0002e8bc <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
   2e8bc:	4684      	mov	ip, r0
   2e8be:	4608      	mov	r0, r1
	unsigned int bit;

	for (bit = start;
   2e8c0:	e000      	b.n	2e8c4 <metal_bitmap_next_clear_bit+0x8>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
   2e8c2:	3001      	adds	r0, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   2e8c4:	4290      	cmp	r0, r2
   2e8c6:	d208      	bcs.n	2e8da <metal_bitmap_next_clear_bit+0x1e>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   2e8c8:	0943      	lsrs	r3, r0, #5
   2e8ca:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   2e8ce:	f000 011f 	and.w	r1, r0, #31
   2e8d2:	40cb      	lsrs	r3, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   2e8d4:	f013 0f01 	tst.w	r3, #1
   2e8d8:	d1f3      	bne.n	2e8c2 <metal_bitmap_next_clear_bit+0x6>
		;
	return bit;
}
   2e8da:	4770      	bx	lr

0002e8dc <rpmsg_get_address>:
{
   2e8dc:	b538      	push	{r3, r4, r5, lr}
   2e8de:	4605      	mov	r5, r0
   2e8e0:	460c      	mov	r4, r1
	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
   2e8e2:	460a      	mov	r2, r1
   2e8e4:	2100      	movs	r1, #0
   2e8e6:	f7ff ffe9 	bl	2e8bc <metal_bitmap_next_clear_bit>
	if (nextbit < (uint32_t)size) {
   2e8ea:	4284      	cmp	r4, r0
   2e8ec:	d90e      	bls.n	2e90c <rpmsg_get_address+0x30>
   2e8ee:	4603      	mov	r3, r0
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   2e8f0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   2e8f4:	095c      	lsrs	r4, r3, #5
   2e8f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2e8fa:	f003 031f 	and.w	r3, r3, #31
   2e8fe:	2101      	movs	r1, #1
   2e900:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   2e904:	431a      	orrs	r2, r3
   2e906:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
}
   2e90a:	bd38      	pop	{r3, r4, r5, pc}
	unsigned int addr = RPMSG_ADDR_ANY;
   2e90c:	f04f 30ff 	mov.w	r0, #4294967295
	return addr;
   2e910:	e7fb      	b.n	2e90a <rpmsg_get_address+0x2e>

0002e912 <rpmsg_release_address>:
	if (addr >= 0 && addr < size)
   2e912:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   2e916:	d40e      	bmi.n	2e936 <rpmsg_release_address+0x24>
   2e918:	428a      	cmp	r2, r1
   2e91a:	da0c      	bge.n	2e936 <rpmsg_release_address+0x24>
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2e91c:	ea4f 1c52 	mov.w	ip, r2, lsr #5
   2e920:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2e924:	f002 021f 	and.w	r2, r2, #31
   2e928:	2101      	movs	r1, #1
   2e92a:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2e92e:	ea23 0302 	bic.w	r3, r3, r2
   2e932:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
}
   2e936:	4770      	bx	lr

0002e938 <__metal_mutex_acquire>:

	return ret;
}

static inline void __metal_mutex_acquire(metal_mutex_t *m)
{
   2e938:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2e93a:	f04f 32ff 	mov.w	r2, #4294967295
   2e93e:	f04f 33ff 	mov.w	r3, #4294967295
   2e942:	f7f7 f80d 	bl	25960 <z_impl_k_sem_take>
	k_sem_take(m, K_FOREVER);
}
   2e946:	bd08      	pop	{r3, pc}

0002e948 <rpmsg_unregister_endpoint>:
{
   2e948:	b570      	push	{r4, r5, r6, lr}
   2e94a:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2e94c:	6a06      	ldr	r6, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2e94e:	f106 0558 	add.w	r5, r6, #88	; 0x58
   2e952:	4628      	mov	r0, r5
   2e954:	f7ff fff0 	bl	2e938 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2e958:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2e95a:	f1b2 3fff 	cmp.w	r2, #4294967295
   2e95e:	d10e      	bne.n	2e97e <rpmsg_unregister_endpoint+0x36>
	metal_list_del(&ept->node);
   2e960:	f104 0334 	add.w	r3, r4, #52	; 0x34
	node->next->prev = node->prev;
   2e964:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2e966:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2e968:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2e96a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2e96c:	6011      	str	r1, [r2, #0]
	node->prev = node;
   2e96e:	63a3      	str	r3, [r4, #56]	; 0x38
	node->next = node;
   2e970:	6363      	str	r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2e972:	2300      	movs	r3, #0
   2e974:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2e976:	4628      	mov	r0, r5
   2e978:	f7f6 ffaa 	bl	258d0 <z_impl_k_sem_give>
}
   2e97c:	bd70      	pop	{r4, r5, r6, pc}
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2e97e:	2180      	movs	r1, #128	; 0x80
   2e980:	f106 0048 	add.w	r0, r6, #72	; 0x48
   2e984:	f7ff ffc5 	bl	2e912 <rpmsg_release_address>
   2e988:	e7ea      	b.n	2e960 <rpmsg_unregister_endpoint+0x18>

0002e98a <rpmsg_send_ns_message>:
{
   2e98a:	b510      	push	{r4, lr}
   2e98c:	b08c      	sub	sp, #48	; 0x30
   2e98e:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2e990:	910b      	str	r1, [sp, #44]	; 0x2c
	ns_msg.addr = ept->addr;
   2e992:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2e994:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2e996:	2220      	movs	r2, #32
   2e998:	4601      	mov	r1, r0
   2e99a:	a802      	add	r0, sp, #8
   2e99c:	f7fc fb6f 	bl	2b07e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2e9a0:	2301      	movs	r3, #1
   2e9a2:	9301      	str	r3, [sp, #4]
   2e9a4:	2328      	movs	r3, #40	; 0x28
   2e9a6:	9300      	str	r3, [sp, #0]
   2e9a8:	ab02      	add	r3, sp, #8
   2e9aa:	2235      	movs	r2, #53	; 0x35
   2e9ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2e9ae:	4620      	mov	r0, r4
   2e9b0:	f7f5 fa0c 	bl	23dcc <rpmsg_send_offchannel_raw>
	if (ret < 0)
   2e9b4:	2800      	cmp	r0, #0
   2e9b6:	db00      	blt.n	2e9ba <rpmsg_send_ns_message+0x30>
		return RPMSG_SUCCESS;
   2e9b8:	2000      	movs	r0, #0
}
   2e9ba:	b00c      	add	sp, #48	; 0x30
   2e9bc:	bd10      	pop	{r4, pc}

0002e9be <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2e9be:	b138      	cbz	r0, 2e9d0 <rpmsg_hold_rx_buffer+0x12>
{
   2e9c0:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   2e9c2:	6a00      	ldr	r0, [r0, #32]
   2e9c4:	b118      	cbz	r0, 2e9ce <rpmsg_hold_rx_buffer+0x10>
   2e9c6:	b111      	cbz	r1, 2e9ce <rpmsg_hold_rx_buffer+0x10>
	if (rdev->ops.hold_rx_buffer)
   2e9c8:	6f83      	ldr	r3, [r0, #120]	; 0x78
   2e9ca:	b103      	cbz	r3, 2e9ce <rpmsg_hold_rx_buffer+0x10>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2e9cc:	4798      	blx	r3
}
   2e9ce:	bd08      	pop	{r3, pc}
   2e9d0:	4770      	bx	lr

0002e9d2 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2e9d2:	b138      	cbz	r0, 2e9e4 <rpmsg_release_rx_buffer+0x12>
{
   2e9d4:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   2e9d6:	6a00      	ldr	r0, [r0, #32]
   2e9d8:	b118      	cbz	r0, 2e9e2 <rpmsg_release_rx_buffer+0x10>
   2e9da:	b111      	cbz	r1, 2e9e2 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2e9dc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2e9de:	b103      	cbz	r3, 2e9e2 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2e9e0:	4798      	blx	r3
}
   2e9e2:	bd08      	pop	{r3, pc}
   2e9e4:	4770      	bx	lr

0002e9e6 <rpmsg_get_tx_payload_buffer>:
{
   2e9e6:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !len)
   2e9e8:	b130      	cbz	r0, 2e9f8 <rpmsg_get_tx_payload_buffer+0x12>
   2e9ea:	6a00      	ldr	r0, [r0, #32]
   2e9ec:	b120      	cbz	r0, 2e9f8 <rpmsg_get_tx_payload_buffer+0x12>
   2e9ee:	b121      	cbz	r1, 2e9fa <rpmsg_get_tx_payload_buffer+0x14>
	if (rdev->ops.get_tx_payload_buffer)
   2e9f0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2e9f4:	b11b      	cbz	r3, 2e9fe <rpmsg_get_tx_payload_buffer+0x18>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2e9f6:	4798      	blx	r3
}
   2e9f8:	bd08      	pop	{r3, pc}
		return NULL;
   2e9fa:	4608      	mov	r0, r1
   2e9fc:	e7fc      	b.n	2e9f8 <rpmsg_get_tx_payload_buffer+0x12>
	return NULL;
   2e9fe:	2000      	movs	r0, #0
   2ea00:	e7fa      	b.n	2e9f8 <rpmsg_get_tx_payload_buffer+0x12>

0002ea02 <rpmsg_get_endpoint>:
{
   2ea02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ea06:	4680      	mov	r8, r0
   2ea08:	460f      	mov	r7, r1
   2ea0a:	4616      	mov	r6, r2
   2ea0c:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2ea0e:	6804      	ldr	r4, [r0, #0]
   2ea10:	e003      	b.n	2ea1a <rpmsg_get_endpoint+0x18>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2ea12:	f1b6 3fff 	cmp.w	r6, #4294967295
   2ea16:	d01a      	beq.n	2ea4e <rpmsg_get_endpoint+0x4c>
	metal_list_for_each(&rdev->endpoints, node) {
   2ea18:	6824      	ldr	r4, [r4, #0]
   2ea1a:	45a0      	cmp	r8, r4
   2ea1c:	d01c      	beq.n	2ea58 <rpmsg_get_endpoint+0x56>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2ea1e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2ea22:	f1b6 3fff 	cmp.w	r6, #4294967295
   2ea26:	d002      	beq.n	2ea2e <rpmsg_get_endpoint+0x2c>
   2ea28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2ea2a:	42b2      	cmp	r2, r6
   2ea2c:	d015      	beq.n	2ea5a <rpmsg_get_endpoint+0x58>
		if (name)
   2ea2e:	2f00      	cmp	r7, #0
   2ea30:	d0f2      	beq.n	2ea18 <rpmsg_get_endpoint+0x16>
			name_match = !strncmp(ept->name, name,
   2ea32:	2220      	movs	r2, #32
   2ea34:	4639      	mov	r1, r7
   2ea36:	4628      	mov	r0, r5
   2ea38:	f7fc fb59 	bl	2b0ee <strncmp>
		if (!name || !name_match)
   2ea3c:	2800      	cmp	r0, #0
   2ea3e:	d1eb      	bne.n	2ea18 <rpmsg_get_endpoint+0x16>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2ea40:	f1b9 3fff 	cmp.w	r9, #4294967295
   2ea44:	d0e5      	beq.n	2ea12 <rpmsg_get_endpoint+0x10>
   2ea46:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2ea48:	454b      	cmp	r3, r9
   2ea4a:	d1e2      	bne.n	2ea12 <rpmsg_get_endpoint+0x10>
   2ea4c:	e005      	b.n	2ea5a <rpmsg_get_endpoint+0x58>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2ea4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2ea50:	f1b3 3fff 	cmp.w	r3, #4294967295
   2ea54:	d1e0      	bne.n	2ea18 <rpmsg_get_endpoint+0x16>
   2ea56:	e000      	b.n	2ea5a <rpmsg_get_endpoint+0x58>
	return NULL;
   2ea58:	2500      	movs	r5, #0
}
   2ea5a:	4628      	mov	r0, r5
   2ea5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002ea60 <rpmsg_destroy_ept>:
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
   2ea60:	b1a0      	cbz	r0, 2ea8c <rpmsg_destroy_ept+0x2c>
{
   2ea62:	b510      	push	{r4, lr}
   2ea64:	4604      	mov	r4, r0
		return;

	rdev = ept->rdev;
   2ea66:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   2ea68:	b15b      	cbz	r3, 2ea82 <rpmsg_destroy_ept+0x22>
		return;

	if (ept->name[0] && rdev->support_ns &&
   2ea6a:	7802      	ldrb	r2, [r0, #0]
   2ea6c:	b132      	cbz	r2, 2ea7c <rpmsg_destroy_ept+0x1c>
   2ea6e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   2ea72:	b11b      	cbz	r3, 2ea7c <rpmsg_destroy_ept+0x1c>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
   2ea74:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (ept->name[0] && rdev->support_ns &&
   2ea76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2ea7a:	d203      	bcs.n	2ea84 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	rpmsg_unregister_endpoint(ept);
   2ea7c:	4620      	mov	r0, r4
   2ea7e:	f7ff ff63 	bl	2e948 <rpmsg_unregister_endpoint>
}
   2ea82:	bd10      	pop	{r4, pc}
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2ea84:	2101      	movs	r1, #1
   2ea86:	f7ff ff80 	bl	2e98a <rpmsg_send_ns_message>
   2ea8a:	e7f7      	b.n	2ea7c <rpmsg_destroy_ept+0x1c>
   2ea8c:	4770      	bx	lr

0002ea8e <rpmsg_virtio_wait_remote_ready>:
{
   2ea8e:	b510      	push	{r4, lr}
   2ea90:	4604      	mov	r4, r0
   2ea92:	e005      	b.n	2eaa0 <rpmsg_virtio_wait_remote_ready+0x12>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   2ea94:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   2ea98:	6a03      	ldr	r3, [r0, #32]
   2ea9a:	685b      	ldr	r3, [r3, #4]
   2ea9c:	2100      	movs	r1, #0
   2ea9e:	4798      	blx	r3
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2eaa0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   2eaa4:	6a03      	ldr	r3, [r0, #32]
   2eaa6:	681b      	ldr	r3, [r3, #0]
   2eaa8:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   2eaaa:	f010 0f40 	tst.w	r0, #64	; 0x40
   2eaae:	d1f1      	bne.n	2ea94 <rpmsg_virtio_wait_remote_ready+0x6>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   2eab0:	f010 0f04 	tst.w	r0, #4
   2eab4:	d0f4      	beq.n	2eaa0 <rpmsg_virtio_wait_remote_ready+0x12>
}
   2eab6:	2001      	movs	r0, #1
   2eab8:	bd10      	pop	{r4, pc}

0002eaba <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2eaba:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2eabe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2eac2:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2eac6:	4770      	bx	lr

0002eac8 <rpmsg_virtio_tx_callback>:
}
   2eac8:	4770      	bx	lr

0002eaca <__metal_mutex_acquire>:
{
   2eaca:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2eacc:	f04f 32ff 	mov.w	r2, #4294967295
   2ead0:	f04f 33ff 	mov.w	r3, #4294967295
   2ead4:	f7f6 ff44 	bl	25960 <z_impl_k_sem_take>
}
   2ead8:	bd08      	pop	{r3, pc}

0002eada <rpmsg_virtio_ns_callback>:
{
   2eada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eade:	b088      	sub	sp, #32
	struct rpmsg_device *rdev = ept->rdev;
   2eae0:	6a05      	ldr	r5, [r0, #32]
	struct metal_io_region *io = rvdev->shbuf_io;
   2eae2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
	if (len != sizeof(*ns_msg))
   2eae6:	2a28      	cmp	r2, #40	; 0x28
   2eae8:	d132      	bne.n	2eb50 <rpmsg_virtio_ns_callback+0x76>
   2eaea:	460c      	mov	r4, r1
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2eaec:	6801      	ldr	r1, [r0, #0]
   2eaee:	1a61      	subs	r1, r4, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2eaf0:	6883      	ldr	r3, [r0, #8]
   2eaf2:	4299      	cmp	r1, r3
   2eaf4:	d223      	bcs.n	2eb3e <rpmsg_virtio_ns_callback+0x64>
	metal_io_block_read(io,
   2eaf6:	2320      	movs	r3, #32
   2eaf8:	466a      	mov	r2, sp
   2eafa:	f7ff fbed 	bl	2e2d8 <metal_io_block_read>
	dest = ns_msg->addr;
   2eafe:	f8d4 8020 	ldr.w	r8, [r4, #32]
	metal_mutex_acquire(&rdev->lock);
   2eb02:	f105 0758 	add.w	r7, r5, #88	; 0x58
   2eb06:	4638      	mov	r0, r7
   2eb08:	f7ff ffdf 	bl	2eaca <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2eb0c:	4643      	mov	r3, r8
   2eb0e:	f04f 32ff 	mov.w	r2, #4294967295
   2eb12:	4669      	mov	r1, sp
   2eb14:	4628      	mov	r0, r5
   2eb16:	f7ff ff74 	bl	2ea02 <rpmsg_get_endpoint>
   2eb1a:	4606      	mov	r6, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2eb1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2eb1e:	f013 0f01 	tst.w	r3, #1
   2eb22:	d00f      	beq.n	2eb44 <rpmsg_virtio_ns_callback+0x6a>
		if (_ept)
   2eb24:	b110      	cbz	r0, 2eb2c <rpmsg_virtio_ns_callback+0x52>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2eb26:	f04f 33ff 	mov.w	r3, #4294967295
   2eb2a:	6283      	str	r3, [r0, #40]	; 0x28
	z_impl_k_sem_give(sem);
   2eb2c:	4638      	mov	r0, r7
   2eb2e:	f7f6 fecf 	bl	258d0 <z_impl_k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2eb32:	b16e      	cbz	r6, 2eb50 <rpmsg_virtio_ns_callback+0x76>
   2eb34:	6b33      	ldr	r3, [r6, #48]	; 0x30
   2eb36:	b15b      	cbz	r3, 2eb50 <rpmsg_virtio_ns_callback+0x76>
			_ept->ns_unbind_cb(_ept);
   2eb38:	4630      	mov	r0, r6
   2eb3a:	4798      	blx	r3
   2eb3c:	e008      	b.n	2eb50 <rpmsg_virtio_ns_callback+0x76>
   2eb3e:	f04f 31ff 	mov.w	r1, #4294967295
   2eb42:	e7d8      	b.n	2eaf6 <rpmsg_virtio_ns_callback+0x1c>
		if (!_ept) {
   2eb44:	b140      	cbz	r0, 2eb58 <rpmsg_virtio_ns_callback+0x7e>
			_ept->dest_addr = dest;
   2eb46:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2eb4a:	4638      	mov	r0, r7
   2eb4c:	f7f6 fec0 	bl	258d0 <z_impl_k_sem_give>
}
   2eb50:	2000      	movs	r0, #0
   2eb52:	b008      	add	sp, #32
   2eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2eb58:	4638      	mov	r0, r7
   2eb5a:	f7f6 feb9 	bl	258d0 <z_impl_k_sem_give>
			if (rdev->ns_bind_cb)
   2eb5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2eb60:	2b00      	cmp	r3, #0
   2eb62:	d0f5      	beq.n	2eb50 <rpmsg_virtio_ns_callback+0x76>
				rdev->ns_bind_cb(rdev, name, dest);
   2eb64:	4642      	mov	r2, r8
   2eb66:	4669      	mov	r1, sp
   2eb68:	4628      	mov	r0, r5
   2eb6a:	4798      	blx	r3
   2eb6c:	e7f0      	b.n	2eb50 <rpmsg_virtio_ns_callback+0x76>

0002eb6e <rpmsg_virtio_return_buffer>:
{
   2eb6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eb70:	b085      	sub	sp, #20
   2eb72:	4604      	mov	r4, r0
   2eb74:	4615      	mov	r5, r2
   2eb76:	461e      	mov	r6, r3
	return rvdev->vdev->role;
   2eb78:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2eb7c:	699f      	ldr	r7, [r3, #24]
	if (role == RPMSG_HOST) {
   2eb7e:	b11f      	cbz	r7, 2eb88 <rpmsg_virtio_return_buffer+0x1a>
	if (role == RPMSG_REMOTE) {
   2eb80:	2f01      	cmp	r7, #1
   2eb82:	d00c      	beq.n	2eb9e <rpmsg_virtio_return_buffer+0x30>
}
   2eb84:	b005      	add	sp, #20
   2eb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vqbuf.buf = buffer;
   2eb88:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   2eb8a:	9203      	str	r2, [sp, #12]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2eb8c:	9100      	str	r1, [sp, #0]
   2eb8e:	2301      	movs	r3, #1
   2eb90:	2200      	movs	r2, #0
   2eb92:	a902      	add	r1, sp, #8
   2eb94:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   2eb98:	f7ff fdc3 	bl	2e722 <virtqueue_add_buffer>
   2eb9c:	e7f0      	b.n	2eb80 <rpmsg_virtio_return_buffer+0x12>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2eb9e:	462a      	mov	r2, r5
   2eba0:	4631      	mov	r1, r6
   2eba2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2eba6:	f7f5 f8c5 	bl	23d34 <virtqueue_add_consumed_buffer>
}
   2ebaa:	e7eb      	b.n	2eb84 <rpmsg_virtio_return_buffer+0x16>

0002ebac <rpmsg_virtio_enqueue_buffer>:
{
   2ebac:	b510      	push	{r4, lr}
   2ebae:	b084      	sub	sp, #16
   2ebb0:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
   2ebb4:	69a4      	ldr	r4, [r4, #24]
	if (role == RPMSG_HOST) {
   2ebb6:	b124      	cbz	r4, 2ebc2 <rpmsg_virtio_enqueue_buffer+0x16>
	if (role == RPMSG_REMOTE) {
   2ebb8:	2c01      	cmp	r4, #1
   2ebba:	d00d      	beq.n	2ebd8 <rpmsg_virtio_enqueue_buffer+0x2c>
	return 0;
   2ebbc:	2000      	movs	r0, #0
}
   2ebbe:	b004      	add	sp, #16
   2ebc0:	bd10      	pop	{r4, pc}
		vqbuf.buf = buffer;
   2ebc2:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   2ebc4:	9203      	str	r2, [sp, #12]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   2ebc6:	9100      	str	r1, [sp, #0]
   2ebc8:	2300      	movs	r3, #0
   2ebca:	2201      	movs	r2, #1
   2ebcc:	a902      	add	r1, sp, #8
   2ebce:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   2ebd2:	f7ff fda6 	bl	2e722 <virtqueue_add_buffer>
   2ebd6:	e7f2      	b.n	2ebbe <rpmsg_virtio_enqueue_buffer+0x12>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   2ebd8:	4619      	mov	r1, r3
   2ebda:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   2ebde:	f7f5 f8a9 	bl	23d34 <virtqueue_add_consumed_buffer>
   2ebe2:	e7ec      	b.n	2ebbe <rpmsg_virtio_enqueue_buffer+0x12>

0002ebe4 <rpmsg_virtio_get_rx_buffer>:
{
   2ebe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ebe6:	4604      	mov	r4, r0
   2ebe8:	460e      	mov	r6, r1
   2ebea:	4615      	mov	r5, r2
   2ebec:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2ebf0:	699f      	ldr	r7, [r3, #24]
	if (role == RPMSG_HOST) {
   2ebf2:	b11f      	cbz	r7, 2ebfc <rpmsg_virtio_get_rx_buffer+0x18>
	void *data = NULL;
   2ebf4:	2000      	movs	r0, #0
	if (role == RPMSG_REMOTE) {
   2ebf6:	2f01      	cmp	r7, #1
   2ebf8:	d005      	beq.n	2ec06 <rpmsg_virtio_get_rx_buffer+0x22>
}
   2ebfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2ebfc:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   2ec00:	f7ff fdb1 	bl	2e766 <virtqueue_get_buffer>
   2ec04:	e7f7      	b.n	2ebf6 <rpmsg_virtio_get_rx_buffer+0x12>
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2ec06:	4632      	mov	r2, r6
   2ec08:	4629      	mov	r1, r5
   2ec0a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2ec0e:	f7ff fdd8 	bl	2e7c2 <virtqueue_get_available_buffer>
	return data;
   2ec12:	e7f2      	b.n	2ebfa <rpmsg_virtio_get_rx_buffer+0x16>

0002ec14 <rpmsg_virtio_release_rx_buffer>:
{
   2ec14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ec16:	4604      	mov	r4, r0
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
   2ec18:	f1a1 0710 	sub.w	r7, r1, #16
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ec1c:	f851 5c08 	ldr.w	r5, [r1, #-8]
   2ec20:	b2ad      	uxth	r5, r5
	metal_mutex_acquire(&rdev->lock);
   2ec22:	f100 0658 	add.w	r6, r0, #88	; 0x58
   2ec26:	4630      	mov	r0, r6
   2ec28:	f7ff ff4f 	bl	2eaca <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2ec2c:	4629      	mov	r1, r5
   2ec2e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2ec32:	f7ff fdc1 	bl	2e7b8 <virtqueue_get_buffer_length>
   2ec36:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2ec38:	462b      	mov	r3, r5
   2ec3a:	4639      	mov	r1, r7
   2ec3c:	4620      	mov	r0, r4
   2ec3e:	f7ff ff96 	bl	2eb6e <rpmsg_virtio_return_buffer>
   2ec42:	4630      	mov	r0, r6
   2ec44:	f7f6 fe44 	bl	258d0 <z_impl_k_sem_give>
}
   2ec48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ec4a <rpmsg_virtio_shm_pool_get_buffer>:
{
   2ec4a:	4603      	mov	r3, r0
	if (shpool->avail < size)
   2ec4c:	6842      	ldr	r2, [r0, #4]
   2ec4e:	428a      	cmp	r2, r1
   2ec50:	d308      	bcc.n	2ec64 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2ec52:	6800      	ldr	r0, [r0, #0]
   2ec54:	f8d3 c008 	ldr.w	ip, [r3, #8]
   2ec58:	ebac 0c02 	sub.w	ip, ip, r2
   2ec5c:	4460      	add	r0, ip
	shpool->avail -= size;
   2ec5e:	1a52      	subs	r2, r2, r1
   2ec60:	605a      	str	r2, [r3, #4]
	return buffer;
   2ec62:	4770      	bx	lr
		return NULL;
   2ec64:	2000      	movs	r0, #0
}
   2ec66:	4770      	bx	lr

0002ec68 <rpmsg_virtio_get_tx_buffer>:
{
   2ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ec6a:	4604      	mov	r4, r0
   2ec6c:	460f      	mov	r7, r1
   2ec6e:	4616      	mov	r6, r2
   2ec70:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2ec74:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2ec76:	b11d      	cbz	r5, 2ec80 <rpmsg_virtio_get_tx_buffer+0x18>
	void *data = NULL;
   2ec78:	2000      	movs	r0, #0
	if (role == RPMSG_REMOTE) {
   2ec7a:	2d01      	cmp	r5, #1
   2ec7c:	d017      	beq.n	2ecae <rpmsg_virtio_get_tx_buffer+0x46>
}
   2ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2ec80:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   2ec84:	f7ff fd6f 	bl	2e766 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   2ec88:	2800      	cmp	r0, #0
   2ec8a:	d1f6      	bne.n	2ec7a <rpmsg_virtio_get_tx_buffer+0x12>
   2ec8c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   2ec90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   2ec92:	2b00      	cmp	r3, #0
   2ec94:	d0f1      	beq.n	2ec7a <rpmsg_virtio_get_tx_buffer+0x12>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2ec96:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
   2ec9a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2ec9e:	f7ff ffd4 	bl	2ec4a <rpmsg_virtio_shm_pool_get_buffer>
			*len = rvdev->config.h2r_buf_size;
   2eca2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2eca6:	603b      	str	r3, [r7, #0]
			*idx = 0;
   2eca8:	2300      	movs	r3, #0
   2ecaa:	8033      	strh	r3, [r6, #0]
   2ecac:	e7e5      	b.n	2ec7a <rpmsg_virtio_get_tx_buffer+0x12>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2ecae:	463a      	mov	r2, r7
   2ecb0:	4631      	mov	r1, r6
   2ecb2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   2ecb6:	f7ff fd84 	bl	2e7c2 <virtqueue_get_available_buffer>
	return data;
   2ecba:	e7e0      	b.n	2ec7e <rpmsg_virtio_get_tx_buffer+0x16>

0002ecbc <rpmsg_virtio_get_tx_payload_buffer>:
{
   2ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ecc0:	b082      	sub	sp, #8
   2ecc2:	4607      	mov	r7, r0
   2ecc4:	4688      	mov	r8, r1
   2ecc6:	4615      	mov	r5, r2
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2ecc8:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   2eccc:	6a03      	ldr	r3, [r0, #32]
   2ecce:	681b      	ldr	r3, [r3, #0]
   2ecd0:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2ecd2:	f010 0f04 	tst.w	r0, #4
   2ecd6:	d027      	beq.n	2ed28 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
	if (wait)
   2ecd8:	b10d      	cbz	r5, 2ecde <rpmsg_virtio_get_tx_payload_buffer+0x22>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2ecda:	f643 2598 	movw	r5, #15000	; 0x3a98
		metal_mutex_acquire(&rdev->lock);
   2ecde:	f107 0658 	add.w	r6, r7, #88	; 0x58
   2ece2:	4630      	mov	r0, r6
   2ece4:	f7ff fef1 	bl	2eaca <__metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
   2ece8:	f10d 0206 	add.w	r2, sp, #6
   2ecec:	4641      	mov	r1, r8
   2ecee:	4638      	mov	r0, r7
   2ecf0:	f7ff ffba 	bl	2ec68 <rpmsg_virtio_get_tx_buffer>
   2ecf4:	4604      	mov	r4, r0
   2ecf6:	4630      	mov	r0, r6
   2ecf8:	f7f6 fdea 	bl	258d0 <z_impl_k_sem_give>
		if (rp_hdr || !tick_count)
   2ecfc:	b934      	cbnz	r4, 2ed0c <rpmsg_virtio_get_tx_payload_buffer+0x50>
   2ecfe:	b12d      	cbz	r5, 2ed0c <rpmsg_virtio_get_tx_payload_buffer+0x50>
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
	return __metal_sleep_usec(usec);
   2ed00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2ed04:	f7f5 fa1e 	bl	24144 <__metal_sleep_usec>
		tick_count--;
   2ed08:	3d01      	subs	r5, #1
		metal_mutex_acquire(&rdev->lock);
   2ed0a:	e7e8      	b.n	2ecde <rpmsg_virtio_get_tx_payload_buffer+0x22>
	if (!rp_hdr)
   2ed0c:	b144      	cbz	r4, 2ed20 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	rp_hdr->reserved = idx;
   2ed0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2ed12:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2ed14:	f8d8 3000 	ldr.w	r3, [r8]
   2ed18:	3b10      	subs	r3, #16
   2ed1a:	f8c8 3000 	str.w	r3, [r8]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2ed1e:	3410      	adds	r4, #16
}
   2ed20:	4620      	mov	r0, r4
   2ed22:	b002      	add	sp, #8
   2ed24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   2ed28:	2400      	movs	r4, #0
   2ed2a:	e7f9      	b.n	2ed20 <rpmsg_virtio_get_tx_payload_buffer+0x64>

0002ed2c <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   2ed2c:	b110      	cbz	r0, 2ed34 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->base = shb;
   2ed2e:	6001      	str	r1, [r0, #0]
	shpool->size = size;
   2ed30:	6082      	str	r2, [r0, #8]
	shpool->avail = size;
   2ed32:	6042      	str	r2, [r0, #4]
}
   2ed34:	4770      	bx	lr

0002ed36 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   2ed36:	b510      	push	{r4, lr}
   2ed38:	4604      	mov	r4, r0
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
   2ed3a:	e002      	b.n	2ed42 <rpmsg_deinit_vdev+0xc>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
   2ed3c:	3834      	subs	r0, #52	; 0x34
   2ed3e:	f7ff fe8f 	bl	2ea60 <rpmsg_destroy_ept>
	return list->next == list;
   2ed42:	6820      	ldr	r0, [r4, #0]
	while (!metal_list_is_empty(&rdev->endpoints)) {
   2ed44:	4284      	cmp	r4, r0
   2ed46:	d1f9      	bne.n	2ed3c <rpmsg_deinit_vdev+0x6>
	}

	rvdev->rvq = 0;
   2ed48:	2300      	movs	r3, #0
   2ed4a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	rvdev->svq = 0;
   2ed4e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

	metal_mutex_deinit(&rdev->lock);
}
   2ed52:	bd10      	pop	{r4, pc}

0002ed54 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2ed54:	b160      	cbz	r0, 2ed70 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2ed56:	68c3      	ldr	r3, [r0, #12]
   2ed58:	785a      	ldrb	r2, [r3, #1]
   2ed5a:	f012 0f01 	tst.w	r2, #1
   2ed5e:	d003      	beq.n	2ed68 <z_device_is_ready+0x14>
   2ed60:	781b      	ldrb	r3, [r3, #0]
   2ed62:	b11b      	cbz	r3, 2ed6c <z_device_is_ready+0x18>
   2ed64:	2000      	movs	r0, #0
   2ed66:	4770      	bx	lr
   2ed68:	2000      	movs	r0, #0
   2ed6a:	4770      	bx	lr
   2ed6c:	2001      	movs	r0, #1
   2ed6e:	4770      	bx	lr
		return false;
   2ed70:	2000      	movs	r0, #0
}
   2ed72:	4770      	bx	lr

0002ed74 <z_early_memset>:
{
   2ed74:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   2ed76:	f7fc fa0e 	bl	2b196 <memset>
}
   2ed7a:	bd08      	pop	{r3, pc}

0002ed7c <z_early_memcpy>:
{
   2ed7c:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   2ed7e:	f7fc f9db 	bl	2b138 <memcpy>
}
   2ed82:	bd08      	pop	{r3, pc}

0002ed84 <k_heap_init>:
{
   2ed84:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   2ed86:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2ed8a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2ed8c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2ed8e:	f7e2 fecf 	bl	11b30 <sys_heap_init>
}
   2ed92:	bd10      	pop	{r4, pc}

0002ed94 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ed94:	6902      	ldr	r2, [r0, #16]
   2ed96:	6943      	ldr	r3, [r0, #20]
   2ed98:	431a      	orrs	r2, r3
   2ed9a:	f012 0203 	ands.w	r2, r2, #3
   2ed9e:	d10d      	bne.n	2edbc <create_free_list+0x28>
	slab->free_list = NULL;
   2eda0:	2100      	movs	r1, #0
   2eda2:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2eda4:	e005      	b.n	2edb2 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2eda6:	6981      	ldr	r1, [r0, #24]
   2eda8:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2edaa:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   2edac:	6901      	ldr	r1, [r0, #16]
   2edae:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2edb0:	3201      	adds	r2, #1
   2edb2:	68c1      	ldr	r1, [r0, #12]
   2edb4:	4291      	cmp	r1, r2
   2edb6:	d8f6      	bhi.n	2eda6 <create_free_list+0x12>
	return 0;
   2edb8:	2000      	movs	r0, #0
   2edba:	4770      	bx	lr
		return -EINVAL;
   2edbc:	f06f 0015 	mvn.w	r0, #21
}
   2edc0:	4770      	bx	lr

0002edc2 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2edc2:	3207      	adds	r2, #7
   2edc4:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2edc8:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2edcc:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2edd0:	2300      	movs	r3, #0
   2edd2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   2edd6:	1888      	adds	r0, r1, r2
   2edd8:	4770      	bx	lr

0002edda <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2edda:	f3ef 8005 	mrs	r0, IPSR
}
   2edde:	3800      	subs	r0, #0
   2ede0:	bf18      	it	ne
   2ede2:	2001      	movne	r0, #1
   2ede4:	4770      	bx	lr

0002ede6 <k_thread_name_get>:
}
   2ede6:	3078      	adds	r0, #120	; 0x78
   2ede8:	4770      	bx	lr

0002edea <z_impl_k_thread_start>:
{
   2edea:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2edec:	f7f8 f8e4 	bl	26fb8 <z_sched_start>
}
   2edf0:	bd08      	pop	{r3, pc}

0002edf2 <z_init_thread_base>:
{
   2edf2:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   2edf4:	2400      	movs	r4, #0
   2edf6:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2edf8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2edfa:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   2edfc:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   2edfe:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2ee00:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2ee02:	61c4      	str	r4, [r0, #28]
}
   2ee04:	bc10      	pop	{r4}
   2ee06:	4770      	bx	lr

0002ee08 <z_pm_save_idle_exit>:
{
   2ee08:	b508      	push	{r3, lr}
	pm_system_resume();
   2ee0a:	f7e5 feaf 	bl	14b6c <pm_system_resume>
	sys_clock_idle_exit();
   2ee0e:	f7fe fe74 	bl	2dafa <sys_clock_idle_exit>
}
   2ee12:	bd08      	pop	{r3, pc}

0002ee14 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2ee14:	4288      	cmp	r0, r1
   2ee16:	da00      	bge.n	2ee1a <new_prio_for_inheritance+0x6>
   2ee18:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2ee1a:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2ee1e:	db01      	blt.n	2ee24 <new_prio_for_inheritance+0x10>
   2ee20:	4608      	mov	r0, r1
   2ee22:	4770      	bx	lr
   2ee24:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2ee28:	4770      	bx	lr

0002ee2a <adjust_owner_prio>:
{
   2ee2a:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2ee2c:	6880      	ldr	r0, [r0, #8]
   2ee2e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ee32:	428b      	cmp	r3, r1
   2ee34:	d101      	bne.n	2ee3a <adjust_owner_prio+0x10>
	return false;
   2ee36:	2000      	movs	r0, #0
}
   2ee38:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2ee3a:	f7f8 fa55 	bl	272e8 <z_set_prio>
   2ee3e:	e7fb      	b.n	2ee38 <adjust_owner_prio+0xe>

0002ee40 <z_impl_k_mutex_init>:
{
   2ee40:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2ee42:	2000      	movs	r0, #0
   2ee44:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2ee46:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2ee48:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2ee4a:	605b      	str	r3, [r3, #4]
}
   2ee4c:	4770      	bx	lr

0002ee4e <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ee4e:	680b      	ldr	r3, [r1, #0]
   2ee50:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee54:	600b      	str	r3, [r1, #0]
	return list->tail;
   2ee56:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2ee58:	b132      	cbz	r2, 2ee68 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ee5a:	6813      	ldr	r3, [r2, #0]
   2ee5c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee60:	430b      	orrs	r3, r1
   2ee62:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2ee64:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2ee66:	4770      	bx	lr
	list->tail = node;
   2ee68:	6041      	str	r1, [r0, #4]
	list->head = node;
   2ee6a:	6001      	str	r1, [r0, #0]
}
   2ee6c:	4770      	bx	lr

0002ee6e <sys_sflist_append_list>:
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2ee6e:	b171      	cbz	r1, 2ee8e <sys_sflist_append_list+0x20>
   2ee70:	b410      	push	{r4}
   2ee72:	460c      	mov	r4, r1
   2ee74:	b13a      	cbz	r2, 2ee86 <sys_sflist_append_list+0x18>
	return list->tail;
   2ee76:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2ee78:	b139      	cbz	r1, 2ee8a <sys_sflist_append_list+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ee7a:	680b      	ldr	r3, [r1, #0]
   2ee7c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee80:	4323      	orrs	r3, r4
   2ee82:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2ee84:	6042      	str	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2ee86:	bc10      	pop	{r4}
   2ee88:	4770      	bx	lr
	list->head = node;
   2ee8a:	6004      	str	r4, [r0, #0]
}
   2ee8c:	e7fa      	b.n	2ee84 <sys_sflist_append_list+0x16>
   2ee8e:	4770      	bx	lr

0002ee90 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   2ee90:	b508      	push	{r3, lr}
   2ee92:	b191      	cbz	r1, 2eeba <sys_sflist_insert+0x2a>
   2ee94:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ee96:	680b      	ldr	r3, [r1, #0]
   2ee98:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2ee9c:	2b03      	cmp	r3, #3
   2ee9e:	d918      	bls.n	2eed2 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eea0:	6813      	ldr	r3, [r2, #0]
   2eea2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2eea6:	430b      	orrs	r3, r1
   2eea8:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eeaa:	f8dc 3000 	ldr.w	r3, [ip]
   2eeae:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2eeb2:	4313      	orrs	r3, r2
   2eeb4:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   2eeb8:	bd08      	pop	{r3, pc}
	return list->head;
   2eeba:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eebc:	6813      	ldr	r3, [r2, #0]
   2eebe:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2eec2:	430b      	orrs	r3, r1
   2eec4:	6013      	str	r3, [r2, #0]
	list->head = node;
   2eec6:	6002      	str	r2, [r0, #0]
	return list->tail;
   2eec8:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2eeca:	2b00      	cmp	r3, #0
   2eecc:	d1f4      	bne.n	2eeb8 <sys_sflist_insert+0x28>
	list->tail = node;
   2eece:	6042      	str	r2, [r0, #4]
}
   2eed0:	e7f2      	b.n	2eeb8 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   2eed2:	4611      	mov	r1, r2
   2eed4:	f7ff ffbb 	bl	2ee4e <sys_sflist_append>
   2eed8:	e7ee      	b.n	2eeb8 <sys_sflist_insert+0x28>

0002eeda <prepare_thread_to_run>:
{
   2eeda:	b508      	push	{r3, lr}
   2eedc:	2200      	movs	r2, #0
   2eede:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2eee2:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2eee4:	f7f8 f814 	bl	26f10 <z_ready_thread>
}
   2eee8:	bd08      	pop	{r3, pc}

0002eeea <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2eeea:	b160      	cbz	r0, 2ef06 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eeec:	6803      	ldr	r3, [r0, #0]
   2eeee:	f013 0f03 	tst.w	r3, #3
   2eef2:	d008      	beq.n	2ef06 <z_queue_node_peek+0x1c>
{
   2eef4:	b510      	push	{r4, lr}
		ret = anode->data;
   2eef6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2eef8:	b909      	cbnz	r1, 2eefe <z_queue_node_peek+0x14>
		ret = anode->data;
   2eefa:	4620      	mov	r0, r4
}
   2eefc:	bd10      	pop	{r4, pc}
			k_free(anode);
   2eefe:	f000 fa47 	bl	2f390 <k_free>
		ret = anode->data;
   2ef02:	4620      	mov	r0, r4
   2ef04:	e7fa      	b.n	2eefc <z_queue_node_peek+0x12>
}
   2ef06:	4770      	bx	lr

0002ef08 <z_impl_k_queue_init>:
	list->head = NULL;
   2ef08:	2300      	movs	r3, #0
   2ef0a:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2ef0c:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   2ef0e:	6083      	str	r3, [r0, #8]
   2ef10:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   2ef14:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2ef16:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
   2ef18:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
   2ef1c:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   2ef1e:	6183      	str	r3, [r0, #24]
}
   2ef20:	4770      	bx	lr

0002ef22 <k_queue_append>:
{
   2ef22:	b500      	push	{lr}
   2ef24:	b083      	sub	sp, #12
   2ef26:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ef28:	2301      	movs	r3, #1
   2ef2a:	9300      	str	r3, [sp, #0]
   2ef2c:	2300      	movs	r3, #0
   2ef2e:	4619      	mov	r1, r3
   2ef30:	f7f6 fb64 	bl	255fc <queue_insert>
}
   2ef34:	b003      	add	sp, #12
   2ef36:	f85d fb04 	ldr.w	pc, [sp], #4

0002ef3a <k_queue_prepend>:
{
   2ef3a:	b500      	push	{lr}
   2ef3c:	b083      	sub	sp, #12
   2ef3e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2ef40:	2100      	movs	r1, #0
   2ef42:	9100      	str	r1, [sp, #0]
   2ef44:	460b      	mov	r3, r1
   2ef46:	f7f6 fb59 	bl	255fc <queue_insert>
}
   2ef4a:	b003      	add	sp, #12
   2ef4c:	f85d fb04 	ldr.w	pc, [sp], #4

0002ef50 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ef50:	b15a      	cbz	r2, 2ef6a <z_impl_k_sem_init+0x1a>
   2ef52:	428a      	cmp	r2, r1
   2ef54:	d30c      	bcc.n	2ef70 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2ef56:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2ef58:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2ef5a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2ef5c:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2ef5e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2ef62:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2ef64:	6143      	str	r3, [r0, #20]
	return 0;
   2ef66:	2000      	movs	r0, #0
   2ef68:	4770      	bx	lr
		return -EINVAL;
   2ef6a:	f06f 0015 	mvn.w	r0, #21
   2ef6e:	4770      	bx	lr
   2ef70:	f06f 0015 	mvn.w	r0, #21
}
   2ef74:	4770      	bx	lr

0002ef76 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2ef76:	460b      	mov	r3, r1
   2ef78:	b139      	cbz	r1, 2ef8a <sys_slist_remove+0x14>
	return node->next;
   2ef7a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2ef7c:	6019      	str	r1, [r3, #0]
	return list->tail;
   2ef7e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2ef80:	428a      	cmp	r2, r1
   2ef82:	d009      	beq.n	2ef98 <sys_slist_remove+0x22>
	parent->next = child;
   2ef84:	2300      	movs	r3, #0
   2ef86:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ef88:	4770      	bx	lr
	return node->next;
   2ef8a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2ef8c:	6003      	str	r3, [r0, #0]
	return list->tail;
   2ef8e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2ef90:	428a      	cmp	r2, r1
   2ef92:	d1f7      	bne.n	2ef84 <sys_slist_remove+0xe>
	list->tail = node;
   2ef94:	6043      	str	r3, [r0, #4]
}
   2ef96:	e7f5      	b.n	2ef84 <sys_slist_remove+0xe>
	list->tail = node;
   2ef98:	6043      	str	r3, [r0, #4]
}
   2ef9a:	e7f3      	b.n	2ef84 <sys_slist_remove+0xe>

0002ef9c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ef9c:	b508      	push	{r3, lr}
   2ef9e:	460a      	mov	r2, r1
	return list->head;
   2efa0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2efa2:	2100      	movs	r1, #0
   2efa4:	e001      	b.n	2efaa <sys_slist_find_and_remove+0xe>
   2efa6:	4619      	mov	r1, r3
   2efa8:	681b      	ldr	r3, [r3, #0]
   2efaa:	b12b      	cbz	r3, 2efb8 <sys_slist_find_and_remove+0x1c>
   2efac:	4293      	cmp	r3, r2
   2efae:	d1fa      	bne.n	2efa6 <sys_slist_find_and_remove+0xa>
   2efb0:	f7ff ffe1 	bl	2ef76 <sys_slist_remove>
   2efb4:	2001      	movs	r0, #1
   2efb6:	e000      	b.n	2efba <sys_slist_find_and_remove+0x1e>
   2efb8:	2000      	movs	r0, #0
   2efba:	bd08      	pop	{r3, pc}

0002efbc <queue_remove_locked>:
{
   2efbc:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2efbe:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2efc0:	f023 0204 	bic.w	r2, r3, #4
   2efc4:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2efc6:	f013 0f04 	tst.w	r3, #4
   2efca:	d100      	bne.n	2efce <queue_remove_locked+0x12>
}
   2efcc:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   2efce:	30b8      	adds	r0, #184	; 0xb8
   2efd0:	f7ff ffe4 	bl	2ef9c <sys_slist_find_and_remove>
}
   2efd4:	e7fa      	b.n	2efcc <queue_remove_locked+0x10>

0002efd6 <cancel_async_locked>:
{
   2efd6:	b510      	push	{r4, lr}
   2efd8:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2efda:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2efdc:	f013 0f02 	tst.w	r3, #2
   2efe0:	d009      	beq.n	2eff6 <cancel_async_locked+0x20>
	return *flagp;
   2efe2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2efe4:	f013 000f 	ands.w	r0, r3, #15
   2efe8:	d004      	beq.n	2eff4 <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   2efea:	f043 0202 	orr.w	r2, r3, #2
   2efee:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2eff0:	f040 0002 	orr.w	r0, r0, #2
}
   2eff4:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   2eff6:	4601      	mov	r1, r0
   2eff8:	6880      	ldr	r0, [r0, #8]
   2effa:	f7ff ffdf 	bl	2efbc <queue_remove_locked>
   2effe:	e7f0      	b.n	2efe2 <cancel_async_locked+0xc>

0002f000 <notify_queue_locked>:
	if (queue != NULL) {
   2f000:	b130      	cbz	r0, 2f010 <notify_queue_locked+0x10>
{
   2f002:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2f004:	2200      	movs	r2, #0
   2f006:	4611      	mov	r1, r2
   2f008:	30c0      	adds	r0, #192	; 0xc0
   2f00a:	f7f8 fe71 	bl	27cf0 <z_sched_wake>
}
   2f00e:	bd08      	pop	{r3, pc}
	bool rv = false;
   2f010:	2000      	movs	r0, #0
}
   2f012:	4770      	bx	lr

0002f014 <z_reschedule_unlocked>:
{
   2f014:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f016:	f04f 0320 	mov.w	r3, #32
   2f01a:	f3ef 8011 	mrs	r0, BASEPRI
   2f01e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f022:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f026:	f000 f83d 	bl	2f0a4 <z_reschedule_irqlock>
}
   2f02a:	bd08      	pop	{r3, pc}

0002f02c <cancel_sync_locked>:
{
   2f02c:	b510      	push	{r4, lr}
   2f02e:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   2f030:	68c4      	ldr	r4, [r0, #12]
   2f032:	f014 0f02 	tst.w	r4, #2
   2f036:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   2f03a:	d101      	bne.n	2f040 <cancel_sync_locked+0x14>
}
   2f03c:	4620      	mov	r0, r4
   2f03e:	bd10      	pop	{r4, pc}
   2f040:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   2f042:	4611      	mov	r1, r2
   2f044:	f7f6 fe48 	bl	25cd8 <init_work_cancel>
   2f048:	e7f8      	b.n	2f03c <cancel_sync_locked+0x10>

0002f04a <unschedule_locked>:
{
   2f04a:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2f04c:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2f04e:	f023 0208 	bic.w	r2, r3, #8
   2f052:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f054:	f013 0f08 	tst.w	r3, #8
   2f058:	d101      	bne.n	2f05e <unschedule_locked+0x14>
	bool ret = false;
   2f05a:	2000      	movs	r0, #0
}
   2f05c:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   2f05e:	3010      	adds	r0, #16
   2f060:	f7f8 fffa 	bl	28058 <z_abort_timeout>
		ret = true;
   2f064:	2001      	movs	r0, #1
   2f066:	e7f9      	b.n	2f05c <unschedule_locked+0x12>

0002f068 <cancel_delayable_async_locked>:
{
   2f068:	b510      	push	{r4, lr}
   2f06a:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   2f06c:	f7ff ffed 	bl	2f04a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2f070:	4620      	mov	r0, r4
   2f072:	f7ff ffb0 	bl	2efd6 <cancel_async_locked>
}
   2f076:	bd10      	pop	{r4, pc}

0002f078 <k_work_submit_to_queue>:
{
   2f078:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2f07a:	f7f6 ff75 	bl	25f68 <z_work_submit_to_queue>
	if (ret > 0) {
   2f07e:	1e04      	subs	r4, r0, #0
   2f080:	dc01      	bgt.n	2f086 <k_work_submit_to_queue+0xe>
}
   2f082:	4620      	mov	r0, r4
   2f084:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   2f086:	f7ff ffc5 	bl	2f014 <z_reschedule_unlocked>
	return ret;
   2f08a:	e7fa      	b.n	2f082 <k_work_submit_to_queue+0xa>

0002f08c <thread_active_elsewhere>:
}
   2f08c:	2000      	movs	r0, #0
   2f08e:	4770      	bx	lr

0002f090 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2f090:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2f094:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2f098:	4283      	cmp	r3, r0
   2f09a:	d001      	beq.n	2f0a0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2f09c:	1ac0      	subs	r0, r0, r3
   2f09e:	4770      	bx	lr
	return 0;
   2f0a0:	2000      	movs	r0, #0
}
   2f0a2:	4770      	bx	lr

0002f0a4 <z_reschedule_irqlock>:
{
   2f0a4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2f0a6:	4603      	mov	r3, r0
   2f0a8:	b928      	cbnz	r0, 2f0b6 <z_reschedule_irqlock+0x12>
   2f0aa:	f3ef 8205 	mrs	r2, IPSR
   2f0ae:	b912      	cbnz	r2, 2f0b6 <z_reschedule_irqlock+0x12>
   2f0b0:	f7e6 fa12 	bl	154d8 <arch_swap>
	return ret;
   2f0b4:	e003      	b.n	2f0be <z_reschedule_irqlock+0x1a>
	__asm__ volatile(
   2f0b6:	f383 8811 	msr	BASEPRI, r3
   2f0ba:	f3bf 8f6f 	isb	sy
}
   2f0be:	bd08      	pop	{r3, pc}

0002f0c0 <z_reschedule_unlocked>:
{
   2f0c0:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f0c2:	f04f 0320 	mov.w	r3, #32
   2f0c6:	f3ef 8011 	mrs	r0, BASEPRI
   2f0ca:	f383 8812 	msr	BASEPRI_MAX, r3
   2f0ce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f0d2:	f7ff ffe7 	bl	2f0a4 <z_reschedule_irqlock>
}
   2f0d6:	bd08      	pop	{r3, pc}

0002f0d8 <unpend_thread_no_timeout>:
{
   2f0d8:	b510      	push	{r4, lr}
   2f0da:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2f0dc:	f7f7 fb5e 	bl	2679c <pended_on_thread>
   2f0e0:	4621      	mov	r1, r4
   2f0e2:	f7f7 fd19 	bl	26b18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2f0e6:	7b63      	ldrb	r3, [r4, #13]
   2f0e8:	f023 0302 	bic.w	r3, r3, #2
   2f0ec:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2f0ee:	2300      	movs	r3, #0
   2f0f0:	60a3      	str	r3, [r4, #8]
}
   2f0f2:	bd10      	pop	{r4, pc}

0002f0f4 <z_priq_dumb_best>:
{
   2f0f4:	4603      	mov	r3, r0
	return list->head == list;
   2f0f6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f0f8:	4283      	cmp	r3, r0
   2f0fa:	d000      	beq.n	2f0fe <z_priq_dumb_best+0xa>
}
   2f0fc:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2f0fe:	2000      	movs	r0, #0
	return thread;
   2f100:	e7fc      	b.n	2f0fc <z_priq_dumb_best+0x8>

0002f102 <unpend_all>:
{
   2f102:	b538      	push	{r3, r4, r5, lr}
   2f104:	4605      	mov	r5, r0
	return list->head == list;
   2f106:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f108:	42a5      	cmp	r5, r4
   2f10a:	d00e      	beq.n	2f12a <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2f10c:	b16c      	cbz	r4, 2f12a <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   2f10e:	4620      	mov	r0, r4
   2f110:	f7ff ffe2 	bl	2f0d8 <unpend_thread_no_timeout>
   2f114:	f104 0018 	add.w	r0, r4, #24
   2f118:	f7f8 ff9e 	bl	28058 <z_abort_timeout>
   2f11c:	2300      	movs	r3, #0
   2f11e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   2f122:	4620      	mov	r0, r4
   2f124:	f7f7 fea2 	bl	26e6c <ready_thread>
   2f128:	e7ed      	b.n	2f106 <unpend_all+0x4>
}
   2f12a:	bd38      	pop	{r3, r4, r5, pc}

0002f12c <pend_locked>:
{
   2f12c:	b570      	push	{r4, r5, r6, lr}
   2f12e:	4604      	mov	r4, r0
   2f130:	4616      	mov	r6, r2
   2f132:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   2f134:	f7f8 f818 	bl	27168 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   2f138:	4632      	mov	r2, r6
   2f13a:	462b      	mov	r3, r5
   2f13c:	4620      	mov	r0, r4
   2f13e:	f7f7 fb79 	bl	26834 <add_thread_timeout>
}
   2f142:	bd70      	pop	{r4, r5, r6, pc}

0002f144 <z_unpend_all>:
{
   2f144:	b538      	push	{r3, r4, r5, lr}
   2f146:	4605      	mov	r5, r0
	int need_sched = 0;
   2f148:	2000      	movs	r0, #0
	return list->head == list;
   2f14a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f14c:	42a5      	cmp	r5, r4
   2f14e:	d008      	beq.n	2f162 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2f150:	b13c      	cbz	r4, 2f162 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   2f152:	4620      	mov	r0, r4
   2f154:	f7f7 fd02 	bl	26b5c <z_unpend_thread>
		z_ready_thread(thread);
   2f158:	4620      	mov	r0, r4
   2f15a:	f7f7 fed9 	bl	26f10 <z_ready_thread>
		need_sched = 1;
   2f15e:	2001      	movs	r0, #1
   2f160:	e7f3      	b.n	2f14a <z_unpend_all+0x6>
}
   2f162:	bd38      	pop	{r3, r4, r5, pc}

0002f164 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2f164:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2f166:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2f168:	6083      	str	r3, [r0, #8]
}
   2f16a:	4770      	bx	lr

0002f16c <remove_timeout>:
{
   2f16c:	b510      	push	{r4, lr}
   2f16e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2f170:	f7f8 fe5e 	bl	27e30 <next>
   2f174:	b148      	cbz	r0, 2f18a <remove_timeout+0x1e>
   2f176:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2f178:	6903      	ldr	r3, [r0, #16]
   2f17a:	6941      	ldr	r1, [r0, #20]
   2f17c:	6920      	ldr	r0, [r4, #16]
   2f17e:	181b      	adds	r3, r3, r0
   2f180:	6960      	ldr	r0, [r4, #20]
   2f182:	eb41 0100 	adc.w	r1, r1, r0
   2f186:	6113      	str	r3, [r2, #16]
   2f188:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2f18a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2f18c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2f18e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f190:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f192:	2300      	movs	r3, #0
   2f194:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2f196:	6063      	str	r3, [r4, #4]
}
   2f198:	bd10      	pop	{r4, pc}

0002f19a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2f19a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2f19c:	f7f9 f92c 	bl	283f8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2f1a0:	bd08      	pop	{r3, pc}

0002f1a2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   2f1a2:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   2f1a4:	f7f9 f928 	bl	283f8 <sys_clock_tick_get>
}
   2f1a8:	bd08      	pop	{r3, pc}

0002f1aa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2f1aa:	b900      	cbnz	r0, 2f1ae <z_impl_k_busy_wait+0x4>
   2f1ac:	4770      	bx	lr
{
   2f1ae:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2f1b0:	f7fa fda3 	bl	29cfa <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2f1b4:	bd08      	pop	{r3, pc}

0002f1b6 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2f1b6:	b538      	push	{r3, r4, r5, lr}
   2f1b8:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f1ba:	f1b1 3fff 	cmp.w	r1, #4294967295
   2f1be:	bf08      	it	eq
   2f1c0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2f1c4:	d020      	beq.n	2f208 <sys_clock_timeout_end_calc+0x52>
   2f1c6:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2f1c8:	ea51 0300 	orrs.w	r3, r1, r0
   2f1cc:	d009      	beq.n	2f1e2 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2f1ce:	f06f 0301 	mvn.w	r3, #1
   2f1d2:	1a18      	subs	r0, r3, r0
   2f1d4:	f04f 33ff 	mov.w	r3, #4294967295
   2f1d8:	eb63 0101 	sbc.w	r1, r3, r1
   2f1dc:	2900      	cmp	r1, #0
   2f1de:	db03      	blt.n	2f1e8 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2f1e0:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2f1e2:	f7f9 f909 	bl	283f8 <sys_clock_tick_get>
   2f1e6:	e7fb      	b.n	2f1e0 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   2f1e8:	f7f9 f906 	bl	283f8 <sys_clock_tick_get>
   2f1ec:	4603      	mov	r3, r0
   2f1ee:	462a      	mov	r2, r5
   2f1f0:	46a4      	mov	ip, r4
   2f1f2:	2d01      	cmp	r5, #1
   2f1f4:	f174 0400 	sbcs.w	r4, r4, #0
   2f1f8:	da02      	bge.n	2f200 <sys_clock_timeout_end_calc+0x4a>
   2f1fa:	2201      	movs	r2, #1
   2f1fc:	f04f 0c00 	mov.w	ip, #0
   2f200:	1898      	adds	r0, r3, r2
   2f202:	eb41 010c 	adc.w	r1, r1, ip
   2f206:	e7eb      	b.n	2f1e0 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   2f208:	f04f 30ff 	mov.w	r0, #4294967295
   2f20c:	4601      	mov	r1, r0
   2f20e:	e7e7      	b.n	2f1e0 <sys_clock_timeout_end_calc+0x2a>

0002f210 <z_reschedule_unlocked>:
{
   2f210:	b508      	push	{r3, lr}
   2f212:	f04f 0320 	mov.w	r3, #32
   2f216:	f3ef 8011 	mrs	r0, BASEPRI
   2f21a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f21e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f222:	f7ff ff3f 	bl	2f0a4 <z_reschedule_irqlock>
}
   2f226:	bd08      	pop	{r3, pc}

0002f228 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2f228:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2f22a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   2f22c:	2300      	movs	r3, #0
   2f22e:	6303      	str	r3, [r0, #48]	; 0x30
   2f230:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2f234:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2f236:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2f238:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2f23a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   2f23c:	6343      	str	r3, [r0, #52]	; 0x34
}
   2f23e:	4770      	bx	lr

0002f240 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2f240:	b510      	push	{r4, lr}
   2f242:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2f244:	f7f8 ff08 	bl	28058 <z_abort_timeout>

	if (inactive) {
   2f248:	b960      	cbnz	r0, 2f264 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   2f24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f24c:	b10b      	cbz	r3, 2f252 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2f24e:	4620      	mov	r0, r4
   2f250:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2f252:	f104 0018 	add.w	r0, r4, #24
   2f256:	f7f8 fa17 	bl	27688 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2f25a:	b118      	cbz	r0, 2f264 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   2f25c:	f7f7 fe58 	bl	26f10 <z_ready_thread>
			z_reschedule_unlocked();
   2f260:	f7ff ffd6 	bl	2f210 <z_reschedule_unlocked>
		}
	}
}
   2f264:	bd10      	pop	{r4, pc}

0002f266 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f266:	b108      	cbz	r0, 2f26c <poller_thread+0x6>
   2f268:	3860      	subs	r0, #96	; 0x60
   2f26a:	4770      	bx	lr
}
   2f26c:	4770      	bx	lr

0002f26e <add_event>:
{
   2f26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f272:	4605      	mov	r5, r0
   2f274:	460e      	mov	r6, r1
	return list->head == list;
   2f276:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2f278:	4298      	cmp	r0, r3
   2f27a:	d015      	beq.n	2f2a8 <add_event+0x3a>
   2f27c:	4614      	mov	r4, r2
   2f27e:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   2f280:	b193      	cbz	r3, 2f2a8 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2f282:	6898      	ldr	r0, [r3, #8]
   2f284:	f7ff ffef 	bl	2f266 <poller_thread>
   2f288:	4680      	mov	r8, r0
   2f28a:	4620      	mov	r0, r4
   2f28c:	f7ff ffeb 	bl	2f266 <poller_thread>
   2f290:	4607      	mov	r7, r0
   2f292:	4601      	mov	r1, r0
   2f294:	4640      	mov	r0, r8
   2f296:	f7ff fefb 	bl	2f090 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2f29a:	2800      	cmp	r0, #0
   2f29c:	dc04      	bgt.n	2f2a8 <add_event+0x3a>
	return list->head == list;
   2f29e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f2a0:	42a5      	cmp	r5, r4
   2f2a2:	d10f      	bne.n	2f2c4 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f2a4:	2400      	movs	r4, #0
   2f2a6:	e00d      	b.n	2f2c4 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2f2a8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2f2aa:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2f2ac:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2f2ae:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2f2b0:	606e      	str	r6, [r5, #4]
}
   2f2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   2f2b6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2f2b8:	6073      	str	r3, [r6, #4]
	node->next = successor;
   2f2ba:	6034      	str	r4, [r6, #0]
	prev->next = node;
   2f2bc:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   2f2be:	6066      	str	r6, [r4, #4]
			return;
   2f2c0:	e7f7      	b.n	2f2b2 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f2c2:	2400      	movs	r4, #0
   2f2c4:	b19c      	cbz	r4, 2f2ee <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   2f2c6:	68a0      	ldr	r0, [r4, #8]
   2f2c8:	f7ff ffcd 	bl	2f266 <poller_thread>
   2f2cc:	4601      	mov	r1, r0
   2f2ce:	4638      	mov	r0, r7
   2f2d0:	f7ff fede 	bl	2f090 <z_sched_prio_cmp>
   2f2d4:	2800      	cmp	r0, #0
   2f2d6:	dcee      	bgt.n	2f2b6 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f2d8:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   2f2da:	686b      	ldr	r3, [r5, #4]
   2f2dc:	429c      	cmp	r4, r3
   2f2de:	d0f0      	beq.n	2f2c2 <add_event+0x54>
   2f2e0:	6824      	ldr	r4, [r4, #0]
   2f2e2:	2c00      	cmp	r4, #0
   2f2e4:	d0ee      	beq.n	2f2c4 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2f2e6:	2a00      	cmp	r2, #0
   2f2e8:	d1ec      	bne.n	2f2c4 <add_event+0x56>
   2f2ea:	4614      	mov	r4, r2
   2f2ec:	e7ea      	b.n	2f2c4 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2f2ee:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2f2f0:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2f2f2:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2f2f4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2f2f6:	606e      	str	r6, [r5, #4]
}
   2f2f8:	e7db      	b.n	2f2b2 <add_event+0x44>

0002f2fa <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2f2fa:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2f2fc:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2f2fe:	7823      	ldrb	r3, [r4, #0]
   2f300:	b173      	cbz	r3, 2f320 <signal_triggered_work+0x26>
   2f302:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2f306:	b15d      	cbz	r5, 2f320 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2f308:	f1a4 0614 	sub.w	r6, r4, #20
   2f30c:	f104 0014 	add.w	r0, r4, #20
   2f310:	f7f8 fea2 	bl	28058 <z_abort_timeout>
		twork->poll_result = 0;
   2f314:	2300      	movs	r3, #0
   2f316:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2f318:	4631      	mov	r1, r6
   2f31a:	4628      	mov	r0, r5
   2f31c:	f7f6 fe24 	bl	25f68 <z_work_submit_to_queue>
	}

	return 0;
}
   2f320:	2000      	movs	r0, #0
   2f322:	bd70      	pop	{r4, r5, r6, pc}

0002f324 <signal_poll_event>:
{
   2f324:	b570      	push	{r4, r5, r6, lr}
   2f326:	4604      	mov	r4, r0
   2f328:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2f32a:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2f32c:	b1d6      	cbz	r6, 2f364 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2f32e:	7873      	ldrb	r3, [r6, #1]
   2f330:	2b01      	cmp	r3, #1
   2f332:	d00d      	beq.n	2f350 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2f334:	2b02      	cmp	r3, #2
   2f336:	d012      	beq.n	2f35e <signal_poll_event+0x3a>
		poller->is_polling = false;
   2f338:	2000      	movs	r0, #0
   2f33a:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2f33c:	2300      	movs	r3, #0
   2f33e:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2f340:	68e3      	ldr	r3, [r4, #12]
   2f342:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2f346:	432a      	orrs	r2, r5
   2f348:	f362 3394 	bfi	r3, r2, #14, #7
   2f34c:	60e3      	str	r3, [r4, #12]
}
   2f34e:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2f350:	f7f9 fc12 	bl	28b78 <signal_poller>
		poller->is_polling = false;
   2f354:	2300      	movs	r3, #0
   2f356:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2f358:	4298      	cmp	r0, r3
   2f35a:	daef      	bge.n	2f33c <signal_poll_event+0x18>
   2f35c:	e7f7      	b.n	2f34e <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2f35e:	f7ff ffcc 	bl	2f2fa <signal_triggered_work>
   2f362:	e7f7      	b.n	2f354 <signal_poll_event+0x30>
	int retcode = 0;
   2f364:	2000      	movs	r0, #0
   2f366:	e7e9      	b.n	2f33c <signal_poll_event+0x18>

0002f368 <z_handle_obj_poll_events>:
{
   2f368:	b508      	push	{r3, lr}
   2f36a:	4603      	mov	r3, r0
	return list->head == list;
   2f36c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2f36e:	4283      	cmp	r3, r0
   2f370:	d008      	beq.n	2f384 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   2f372:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2f374:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2f376:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f378:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f37a:	2300      	movs	r3, #0
   2f37c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2f37e:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   2f380:	f7ff ffd0 	bl	2f324 <signal_poll_event>
}
   2f384:	bd08      	pop	{r3, pc}

0002f386 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   2f386:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2f388:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   2f38a:	2300      	movs	r3, #0
   2f38c:	6083      	str	r3, [r0, #8]
}
   2f38e:	4770      	bx	lr

0002f390 <k_free>:
	if (ptr != NULL) {
   2f390:	b130      	cbz	r0, 2f3a0 <k_free+0x10>
{
   2f392:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2f394:	1f01      	subs	r1, r0, #4
   2f396:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2f39a:	f7f5 fbd1 	bl	24b40 <k_heap_free>
}
   2f39e:	bd08      	pop	{r3, pc}
   2f3a0:	4770      	bx	lr

0002f3a2 <k_malloc>:
{
   2f3a2:	b508      	push	{r3, lr}
   2f3a4:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2f3a6:	2004      	movs	r0, #4
   2f3a8:	f7f9 fe3e 	bl	29028 <k_aligned_alloc>
}
   2f3ac:	bd08      	pop	{r3, pc}

0002f3ae <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2f3ae:	4770      	bx	lr
