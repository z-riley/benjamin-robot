
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	60 c8 00 20 b1 d5 00 00 2b cc 01 00 85 d5 00 00     `.. ....+.......
    8010:	85 d5 00 00 85 d5 00 00 85 d5 00 00 85 d5 00 00     ................
	...
    802c:	39 ce 00 00 85 d5 00 00 00 00 00 00 d9 cd 00 00     9...............
    803c:	85 d5 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8050:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8060:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8070:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8080:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8090:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    80a0:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    80b0:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    80c0:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    80d0:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    80e0:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    80f0:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8100:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8110:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8120:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8130:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8140:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    8150:	c1 ce 00 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2uiz>:
    88f4:	004a      	lsls	r2, r1, #1
    88f6:	d211      	bcs.n	891c <__aeabi_d2uiz+0x28>
    88f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    88fc:	d211      	bcs.n	8922 <__aeabi_d2uiz+0x2e>
    88fe:	d50d      	bpl.n	891c <__aeabi_d2uiz+0x28>
    8900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8908:	d40e      	bmi.n	8928 <__aeabi_d2uiz+0x34>
    890a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    890e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8916:	fa23 f002 	lsr.w	r0, r3, r2
    891a:	4770      	bx	lr
    891c:	f04f 0000 	mov.w	r0, #0
    8920:	4770      	bx	lr
    8922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8926:	d102      	bne.n	892e <__aeabi_d2uiz+0x3a>
    8928:	f04f 30ff 	mov.w	r0, #4294967295
    892c:	4770      	bx	lr
    892e:	f04f 0000 	mov.w	r0, #0
    8932:	4770      	bx	lr

00008934 <__aeabi_uldivmod>:
    8934:	b953      	cbnz	r3, 894c <__aeabi_uldivmod+0x18>
    8936:	b94a      	cbnz	r2, 894c <__aeabi_uldivmod+0x18>
    8938:	2900      	cmp	r1, #0
    893a:	bf08      	it	eq
    893c:	2800      	cmpeq	r0, #0
    893e:	bf1c      	itt	ne
    8940:	f04f 31ff 	movne.w	r1, #4294967295
    8944:	f04f 30ff 	movne.w	r0, #4294967295
    8948:	f000 b80c 	b.w	8964 <__aeabi_idiv0>
    894c:	f1ad 0c08 	sub.w	ip, sp, #8
    8950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8954:	f000 f808 	bl	8968 <__udivmoddi4>
    8958:	f8dd e004 	ldr.w	lr, [sp, #4]
    895c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8960:	b004      	add	sp, #16
    8962:	4770      	bx	lr

00008964 <__aeabi_idiv0>:
    8964:	4770      	bx	lr
    8966:	bf00      	nop

00008968 <__udivmoddi4>:
    8968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    896c:	4686      	mov	lr, r0
    896e:	468c      	mov	ip, r1
    8970:	4608      	mov	r0, r1
    8972:	9e08      	ldr	r6, [sp, #32]
    8974:	4615      	mov	r5, r2
    8976:	4674      	mov	r4, lr
    8978:	4619      	mov	r1, r3
    897a:	2b00      	cmp	r3, #0
    897c:	f040 80c1 	bne.w	8b02 <__udivmoddi4+0x19a>
    8980:	4285      	cmp	r5, r0
    8982:	fab2 f282 	clz	r2, r2
    8986:	d945      	bls.n	8a14 <__udivmoddi4+0xac>
    8988:	b14a      	cbz	r2, 899e <__udivmoddi4+0x36>
    898a:	f1c2 0320 	rsb	r3, r2, #32
    898e:	fa00 fc02 	lsl.w	ip, r0, r2
    8992:	4095      	lsls	r5, r2
    8994:	4094      	lsls	r4, r2
    8996:	fa2e f303 	lsr.w	r3, lr, r3
    899a:	ea43 0c0c 	orr.w	ip, r3, ip
    899e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    89a2:	b2a8      	uxth	r0, r5
    89a4:	0c23      	lsrs	r3, r4, #16
    89a6:	fbbc f8fe 	udiv	r8, ip, lr
    89aa:	fb0e cc18 	mls	ip, lr, r8, ip
    89ae:	fb08 f900 	mul.w	r9, r8, r0
    89b2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    89b6:	4599      	cmp	r9, r3
    89b8:	d928      	bls.n	8a0c <__udivmoddi4+0xa4>
    89ba:	18eb      	adds	r3, r5, r3
    89bc:	f108 37ff 	add.w	r7, r8, #4294967295
    89c0:	d204      	bcs.n	89cc <__udivmoddi4+0x64>
    89c2:	4599      	cmp	r9, r3
    89c4:	d902      	bls.n	89cc <__udivmoddi4+0x64>
    89c6:	f1a8 0702 	sub.w	r7, r8, #2
    89ca:	442b      	add	r3, r5
    89cc:	eba3 0309 	sub.w	r3, r3, r9
    89d0:	b2a4      	uxth	r4, r4
    89d2:	fbb3 fcfe 	udiv	ip, r3, lr
    89d6:	fb0e 331c 	mls	r3, lr, ip, r3
    89da:	fb0c f000 	mul.w	r0, ip, r0
    89de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    89e2:	42a0      	cmp	r0, r4
    89e4:	d914      	bls.n	8a10 <__udivmoddi4+0xa8>
    89e6:	192c      	adds	r4, r5, r4
    89e8:	f10c 33ff 	add.w	r3, ip, #4294967295
    89ec:	d204      	bcs.n	89f8 <__udivmoddi4+0x90>
    89ee:	42a0      	cmp	r0, r4
    89f0:	d902      	bls.n	89f8 <__udivmoddi4+0x90>
    89f2:	f1ac 0302 	sub.w	r3, ip, #2
    89f6:	442c      	add	r4, r5
    89f8:	1a24      	subs	r4, r4, r0
    89fa:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    89fe:	b11e      	cbz	r6, 8a08 <__udivmoddi4+0xa0>
    8a00:	40d4      	lsrs	r4, r2
    8a02:	2300      	movs	r3, #0
    8a04:	6034      	str	r4, [r6, #0]
    8a06:	6073      	str	r3, [r6, #4]
    8a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a0c:	4647      	mov	r7, r8
    8a0e:	e7dd      	b.n	89cc <__udivmoddi4+0x64>
    8a10:	4663      	mov	r3, ip
    8a12:	e7f1      	b.n	89f8 <__udivmoddi4+0x90>
    8a14:	bb92      	cbnz	r2, 8a7c <__udivmoddi4+0x114>
    8a16:	1b43      	subs	r3, r0, r5
    8a18:	2101      	movs	r1, #1
    8a1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8a1e:	b2af      	uxth	r7, r5
    8a20:	0c20      	lsrs	r0, r4, #16
    8a22:	fbb3 fcfe 	udiv	ip, r3, lr
    8a26:	fb0e 331c 	mls	r3, lr, ip, r3
    8a2a:	fb0c f807 	mul.w	r8, ip, r7
    8a2e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8a32:	4598      	cmp	r8, r3
    8a34:	d961      	bls.n	8afa <__udivmoddi4+0x192>
    8a36:	18eb      	adds	r3, r5, r3
    8a38:	f10c 30ff 	add.w	r0, ip, #4294967295
    8a3c:	d204      	bcs.n	8a48 <__udivmoddi4+0xe0>
    8a3e:	4598      	cmp	r8, r3
    8a40:	d902      	bls.n	8a48 <__udivmoddi4+0xe0>
    8a42:	f1ac 0002 	sub.w	r0, ip, #2
    8a46:	442b      	add	r3, r5
    8a48:	eba3 0308 	sub.w	r3, r3, r8
    8a4c:	b2a4      	uxth	r4, r4
    8a4e:	fbb3 fcfe 	udiv	ip, r3, lr
    8a52:	fb0e 331c 	mls	r3, lr, ip, r3
    8a56:	fb0c f707 	mul.w	r7, ip, r7
    8a5a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8a5e:	42a7      	cmp	r7, r4
    8a60:	d94d      	bls.n	8afe <__udivmoddi4+0x196>
    8a62:	192c      	adds	r4, r5, r4
    8a64:	f10c 33ff 	add.w	r3, ip, #4294967295
    8a68:	d204      	bcs.n	8a74 <__udivmoddi4+0x10c>
    8a6a:	42a7      	cmp	r7, r4
    8a6c:	d902      	bls.n	8a74 <__udivmoddi4+0x10c>
    8a6e:	f1ac 0302 	sub.w	r3, ip, #2
    8a72:	442c      	add	r4, r5
    8a74:	1be4      	subs	r4, r4, r7
    8a76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8a7a:	e7c0      	b.n	89fe <__udivmoddi4+0x96>
    8a7c:	f1c2 0320 	rsb	r3, r2, #32
    8a80:	4095      	lsls	r5, r2
    8a82:	4094      	lsls	r4, r2
    8a84:	fa20 f103 	lsr.w	r1, r0, r3
    8a88:	fa2e f303 	lsr.w	r3, lr, r3
    8a8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8a90:	4090      	lsls	r0, r2
    8a92:	b2af      	uxth	r7, r5
    8a94:	4303      	orrs	r3, r0
    8a96:	fbb1 fcfe 	udiv	ip, r1, lr
    8a9a:	fb0e 101c 	mls	r0, lr, ip, r1
    8a9e:	0c19      	lsrs	r1, r3, #16
    8aa0:	fb0c f807 	mul.w	r8, ip, r7
    8aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8aa8:	4588      	cmp	r8, r1
    8aaa:	d922      	bls.n	8af2 <__udivmoddi4+0x18a>
    8aac:	1869      	adds	r1, r5, r1
    8aae:	f10c 30ff 	add.w	r0, ip, #4294967295
    8ab2:	d204      	bcs.n	8abe <__udivmoddi4+0x156>
    8ab4:	4588      	cmp	r8, r1
    8ab6:	d902      	bls.n	8abe <__udivmoddi4+0x156>
    8ab8:	f1ac 0002 	sub.w	r0, ip, #2
    8abc:	4429      	add	r1, r5
    8abe:	eba1 0108 	sub.w	r1, r1, r8
    8ac2:	b29b      	uxth	r3, r3
    8ac4:	fbb1 fcfe 	udiv	ip, r1, lr
    8ac8:	fb0e 111c 	mls	r1, lr, ip, r1
    8acc:	fb0c f707 	mul.w	r7, ip, r7
    8ad0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8ad4:	429f      	cmp	r7, r3
    8ad6:	d90e      	bls.n	8af6 <__udivmoddi4+0x18e>
    8ad8:	18eb      	adds	r3, r5, r3
    8ada:	f10c 31ff 	add.w	r1, ip, #4294967295
    8ade:	d204      	bcs.n	8aea <__udivmoddi4+0x182>
    8ae0:	429f      	cmp	r7, r3
    8ae2:	d902      	bls.n	8aea <__udivmoddi4+0x182>
    8ae4:	f1ac 0102 	sub.w	r1, ip, #2
    8ae8:	442b      	add	r3, r5
    8aea:	1bdb      	subs	r3, r3, r7
    8aec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8af0:	e793      	b.n	8a1a <__udivmoddi4+0xb2>
    8af2:	4660      	mov	r0, ip
    8af4:	e7e3      	b.n	8abe <__udivmoddi4+0x156>
    8af6:	4661      	mov	r1, ip
    8af8:	e7f7      	b.n	8aea <__udivmoddi4+0x182>
    8afa:	4660      	mov	r0, ip
    8afc:	e7a4      	b.n	8a48 <__udivmoddi4+0xe0>
    8afe:	4663      	mov	r3, ip
    8b00:	e7b8      	b.n	8a74 <__udivmoddi4+0x10c>
    8b02:	4283      	cmp	r3, r0
    8b04:	d906      	bls.n	8b14 <__udivmoddi4+0x1ac>
    8b06:	b916      	cbnz	r6, 8b0e <__udivmoddi4+0x1a6>
    8b08:	2100      	movs	r1, #0
    8b0a:	4608      	mov	r0, r1
    8b0c:	e77c      	b.n	8a08 <__udivmoddi4+0xa0>
    8b0e:	e9c6 e000 	strd	lr, r0, [r6]
    8b12:	e7f9      	b.n	8b08 <__udivmoddi4+0x1a0>
    8b14:	fab3 f783 	clz	r7, r3
    8b18:	b98f      	cbnz	r7, 8b3e <__udivmoddi4+0x1d6>
    8b1a:	4283      	cmp	r3, r0
    8b1c:	d301      	bcc.n	8b22 <__udivmoddi4+0x1ba>
    8b1e:	4572      	cmp	r2, lr
    8b20:	d808      	bhi.n	8b34 <__udivmoddi4+0x1cc>
    8b22:	ebbe 0402 	subs.w	r4, lr, r2
    8b26:	eb60 0303 	sbc.w	r3, r0, r3
    8b2a:	2001      	movs	r0, #1
    8b2c:	469c      	mov	ip, r3
    8b2e:	b91e      	cbnz	r6, 8b38 <__udivmoddi4+0x1d0>
    8b30:	2100      	movs	r1, #0
    8b32:	e769      	b.n	8a08 <__udivmoddi4+0xa0>
    8b34:	4638      	mov	r0, r7
    8b36:	e7fa      	b.n	8b2e <__udivmoddi4+0x1c6>
    8b38:	e9c6 4c00 	strd	r4, ip, [r6]
    8b3c:	e7f8      	b.n	8b30 <__udivmoddi4+0x1c8>
    8b3e:	f1c7 0c20 	rsb	ip, r7, #32
    8b42:	40bb      	lsls	r3, r7
    8b44:	fa0e f507 	lsl.w	r5, lr, r7
    8b48:	fa22 f40c 	lsr.w	r4, r2, ip
    8b4c:	fa2e f10c 	lsr.w	r1, lr, ip
    8b50:	40ba      	lsls	r2, r7
    8b52:	431c      	orrs	r4, r3
    8b54:	fa20 f30c 	lsr.w	r3, r0, ip
    8b58:	40b8      	lsls	r0, r7
    8b5a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8b5e:	4301      	orrs	r1, r0
    8b60:	fa1f fe84 	uxth.w	lr, r4
    8b64:	fbb3 f8f9 	udiv	r8, r3, r9
    8b68:	fb09 3018 	mls	r0, r9, r8, r3
    8b6c:	0c0b      	lsrs	r3, r1, #16
    8b6e:	fb08 fa0e 	mul.w	sl, r8, lr
    8b72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8b76:	459a      	cmp	sl, r3
    8b78:	d940      	bls.n	8bfc <__udivmoddi4+0x294>
    8b7a:	18e3      	adds	r3, r4, r3
    8b7c:	f108 30ff 	add.w	r0, r8, #4294967295
    8b80:	d204      	bcs.n	8b8c <__udivmoddi4+0x224>
    8b82:	459a      	cmp	sl, r3
    8b84:	d902      	bls.n	8b8c <__udivmoddi4+0x224>
    8b86:	f1a8 0002 	sub.w	r0, r8, #2
    8b8a:	4423      	add	r3, r4
    8b8c:	eba3 030a 	sub.w	r3, r3, sl
    8b90:	b289      	uxth	r1, r1
    8b92:	fbb3 f8f9 	udiv	r8, r3, r9
    8b96:	fb09 3318 	mls	r3, r9, r8, r3
    8b9a:	fb08 fe0e 	mul.w	lr, r8, lr
    8b9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8ba2:	458e      	cmp	lr, r1
    8ba4:	d92c      	bls.n	8c00 <__udivmoddi4+0x298>
    8ba6:	1861      	adds	r1, r4, r1
    8ba8:	f108 33ff 	add.w	r3, r8, #4294967295
    8bac:	d204      	bcs.n	8bb8 <__udivmoddi4+0x250>
    8bae:	458e      	cmp	lr, r1
    8bb0:	d902      	bls.n	8bb8 <__udivmoddi4+0x250>
    8bb2:	f1a8 0302 	sub.w	r3, r8, #2
    8bb6:	4421      	add	r1, r4
    8bb8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8bbc:	eba1 010e 	sub.w	r1, r1, lr
    8bc0:	fba0 9802 	umull	r9, r8, r0, r2
    8bc4:	4541      	cmp	r1, r8
    8bc6:	46ce      	mov	lr, r9
    8bc8:	4643      	mov	r3, r8
    8bca:	d302      	bcc.n	8bd2 <__udivmoddi4+0x26a>
    8bcc:	d106      	bne.n	8bdc <__udivmoddi4+0x274>
    8bce:	454d      	cmp	r5, r9
    8bd0:	d204      	bcs.n	8bdc <__udivmoddi4+0x274>
    8bd2:	3801      	subs	r0, #1
    8bd4:	ebb9 0e02 	subs.w	lr, r9, r2
    8bd8:	eb68 0304 	sbc.w	r3, r8, r4
    8bdc:	2e00      	cmp	r6, #0
    8bde:	d0a7      	beq.n	8b30 <__udivmoddi4+0x1c8>
    8be0:	ebb5 020e 	subs.w	r2, r5, lr
    8be4:	eb61 0103 	sbc.w	r1, r1, r3
    8be8:	fa01 fc0c 	lsl.w	ip, r1, ip
    8bec:	fa22 f307 	lsr.w	r3, r2, r7
    8bf0:	40f9      	lsrs	r1, r7
    8bf2:	ea4c 0303 	orr.w	r3, ip, r3
    8bf6:	e9c6 3100 	strd	r3, r1, [r6]
    8bfa:	e799      	b.n	8b30 <__udivmoddi4+0x1c8>
    8bfc:	4640      	mov	r0, r8
    8bfe:	e7c5      	b.n	8b8c <__udivmoddi4+0x224>
    8c00:	4643      	mov	r3, r8
    8c02:	e7d9      	b.n	8bb8 <__udivmoddi4+0x250>
    8c04:	0000      	movs	r0, r0
	...

00008c08 <pwm_set_pulse_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
    8c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c0c:	b089      	sub	sp, #36	; 0x24
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    8c0e:	e9d0 6300 	ldrd	r6, r3, [r0]
    8c12:	9303      	str	r3, [sp, #12]
		       spec->flags);
    8c14:	8983      	ldrh	r3, [r0, #12]
{
    8c16:	460d      	mov	r5, r1
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    8c18:	6887      	ldr	r7, [r0, #8]
		       spec->flags);
    8c1a:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
    8c1c:	68b3      	ldr	r3, [r6, #8]
    8c1e:	4630      	mov	r0, r6
    8c20:	685b      	ldr	r3, [r3, #4]
    8c22:	9903      	ldr	r1, [sp, #12]
    8c24:	aa06      	add	r2, sp, #24
    8c26:	4798      	blx	r3
	if (err < 0) {
    8c28:	2800      	cmp	r0, #0
    8c2a:	db31      	blt.n	8c90 <pwm_set_pulse_dt+0x88>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    8c2c:	e9dd 4b06 	ldrd	r4, fp, [sp, #24]
    8c30:	fba7 2304 	umull	r2, r3, r7, r4
    8c34:	fb07 380b 	mla	r8, r7, fp, r3
    8c38:	9204      	str	r2, [sp, #16]
	if (period_cycles > UINT32_MAX) {
    8c3a:	f04f 3aff 	mov.w	sl, #4294967295
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    8c3e:	a31a      	add	r3, pc, #104	; (adr r3, 8ca8 <pwm_set_pulse_dt+0xa0>)
    8c40:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c44:	4641      	mov	r1, r8
    8c46:	9804      	ldr	r0, [sp, #16]
    8c48:	f7ff fe74 	bl	8934 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
    8c4c:	9b04      	ldr	r3, [sp, #16]
    8c4e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8cb0 <pwm_set_pulse_dt+0xa8>
    8c52:	459a      	cmp	sl, r3
    8c54:	eb79 0308 	sbcs.w	r3, r9, r8
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    8c58:	4607      	mov	r7, r0
	if (period_cycles > UINT32_MAX) {
    8c5a:	d31c      	bcc.n	8c96 <pwm_set_pulse_dt+0x8e>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    8c5c:	fba5 4304 	umull	r4, r3, r5, r4
    8c60:	fb05 350b 	mla	r5, r5, fp, r3
    8c64:	a310      	add	r3, pc, #64	; (adr r3, 8ca8 <pwm_set_pulse_dt+0xa0>)
    8c66:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c6a:	4629      	mov	r1, r5
    8c6c:	4620      	mov	r0, r4
    8c6e:	f7ff fe61 	bl	8934 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
    8c72:	45a2      	cmp	sl, r4
    8c74:	eb79 0505 	sbcs.w	r5, r9, r5
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    8c78:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
    8c7a:	d30c      	bcc.n	8c96 <pwm_set_pulse_dt+0x8e>
	if (pulse > period) {
    8c7c:	4287      	cmp	r7, r0
	const struct pwm_driver_api *api =
    8c7e:	68b2      	ldr	r2, [r6, #8]
	if (pulse > period) {
    8c80:	d30c      	bcc.n	8c9c <pwm_set_pulse_dt+0x94>
	return api->set_cycles(dev, channel, period, pulse, flags);
    8c82:	9905      	ldr	r1, [sp, #20]
    8c84:	4630      	mov	r0, r6
    8c86:	9100      	str	r1, [sp, #0]
    8c88:	6814      	ldr	r4, [r2, #0]
    8c8a:	9903      	ldr	r1, [sp, #12]
    8c8c:	463a      	mov	r2, r7
    8c8e:	47a0      	blx	r4
}
    8c90:	b009      	add	sp, #36	; 0x24
    8c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
    8c96:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8c9a:	e7f9      	b.n	8c90 <pwm_set_pulse_dt+0x88>
		return -EINVAL;
    8c9c:	f06f 0015 	mvn.w	r0, #21
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    8ca0:	e7f6      	b.n	8c90 <pwm_set_pulse_dt+0x88>
    8ca2:	bf00      	nop
    8ca4:	f3af 8000 	nop.w
    8ca8:	3b9aca00 	.word	0x3b9aca00
    8cac:	00000000 	.word	0x00000000
    8cb0:	3b9ac9ff 	.word	0x3b9ac9ff
    8cb4:	00000000 	.word	0x00000000

00008cb8 <sense_distance>:
	return 0;
} /* ultrasonic_init */


uint32_t sense_distance(void) 
{
    8cb8:	b538      	push	{r3, r4, r5, lr}
	// Send 10 us trigger pulse, after which the echo_cb() ISR will run
	gpio_pin_set_raw(port_fw, pin_trig_fw, 0);
    8cba:	4d1d      	ldr	r5, [pc, #116]	; (8d30 <sense_distance+0x78>)
    8cbc:	4c1d      	ldr	r4, [pc, #116]	; (8d34 <sense_distance+0x7c>)
    8cbe:	2200      	movs	r2, #0
    8cc0:	7829      	ldrb	r1, [r5, #0]
    8cc2:	6820      	ldr	r0, [r4, #0]
    8cc4:	f000 fb84 	bl	93d0 <gpio_pin_set_raw.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    8cc8:	2100      	movs	r1, #0
    8cca:	2001      	movs	r0, #1
    8ccc:	f011 fc7c 	bl	1a5c8 <z_impl_k_sleep>
	k_sleep(K_USEC(2));
	gpio_pin_set_raw(port_fw, pin_trig_fw, 1);
    8cd0:	2201      	movs	r2, #1
    8cd2:	7829      	ldrb	r1, [r5, #0]
    8cd4:	6820      	ldr	r0, [r4, #0]
    8cd6:	f000 fb7b 	bl	93d0 <gpio_pin_set_raw.isra.0>
    8cda:	2100      	movs	r1, #0
    8cdc:	2001      	movs	r0, #1
    8cde:	f011 fc73 	bl	1a5c8 <z_impl_k_sleep>
	k_sleep(K_USEC(10));
	gpio_pin_set_raw(port_fw, pin_trig_fw, 0);
    8ce2:	2200      	movs	r2, #0
    8ce4:	7829      	ldrb	r1, [r5, #0]
    8ce6:	6820      	ldr	r0, [r4, #0]
    8ce8:	f000 fb72 	bl	93d0 <gpio_pin_set_raw.isra.0>
    8cec:	2100      	movs	r1, #0
    8cee:	2001      	movs	r0, #1
    8cf0:	f011 fc6a 	bl	1a5c8 <z_impl_k_sleep>
	k_sleep(K_USEC(2));

	// If device gives a bad reading, return last good value. 15000 chosen empirically
	if (us_spent > 15000)
    8cf4:	f643 2298 	movw	r2, #15000	; 0x3a98
    8cf8:	4b0f      	ldr	r3, [pc, #60]	; (8d38 <sense_distance+0x80>)
    8cfa:	4c10      	ldr	r4, [pc, #64]	; (8d3c <sense_distance+0x84>)
    8cfc:	6819      	ldr	r1, [r3, #0]
    8cfe:	4291      	cmp	r1, r2
    8d00:	d901      	bls.n	8d06 <sense_distance+0x4e>
		return distance;
	}

	// Calculate distance in mm. 0.344 is the speed of sound in millimeters per microsecond
	distance = 0.344*us_spent/2;
	return distance;
    8d02:	6820      	ldr	r0, [r4, #0]
} /* measure_distance */
    8d04:	bd38      	pop	{r3, r4, r5, pc}
	distance = 0.344*us_spent/2;
    8d06:	6818      	ldr	r0, [r3, #0]
    8d08:	f7ff fb68 	bl	83dc <__aeabi_ui2d>
    8d0c:	a306      	add	r3, pc, #24	; (adr r3, 8d28 <sense_distance+0x70>)
    8d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d12:	f7ff fbdd 	bl	84d0 <__aeabi_dmul>
    8d16:	2200      	movs	r2, #0
    8d18:	4b09      	ldr	r3, [pc, #36]	; (8d40 <sense_distance+0x88>)
    8d1a:	f7ff fbd9 	bl	84d0 <__aeabi_dmul>
    8d1e:	f7ff fde9 	bl	88f4 <__aeabi_d2uiz>
    8d22:	6020      	str	r0, [r4, #0]
    8d24:	e7ed      	b.n	8d02 <sense_distance+0x4a>
    8d26:	bf00      	nop
    8d28:	9374bc6a 	.word	0x9374bc6a
    8d2c:	3fd60418 	.word	0x3fd60418
    8d30:	20009bb5 	.word	0x20009bb5
    8d34:	20009698 	.word	0x20009698
    8d38:	20009688 	.word	0x20009688
    8d3c:	20009684 	.word	0x20009684
    8d40:	3fe00000 	.word	0x3fe00000

00008d44 <on_disconnected>:
	dk_set_led_on(CONN_STATUS_LED);
} /* on_connected */


void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
    8d44:	b598      	push	{r3, r4, r7, lr}
	LOG_INF("Disconnected (reason: %d)", reason);
    8d46:	466c      	mov	r4, sp
{
    8d48:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason: %d)", reason);
    8d4a:	b088      	sub	sp, #32
    8d4c:	466a      	mov	r2, sp
    8d4e:	4b0c      	ldr	r3, [pc, #48]	; (8d80 <on_disconnected+0x3c>)
    8d50:	480c      	ldr	r0, [pc, #48]	; (8d84 <on_disconnected+0x40>)
    8d52:	e9c2 3105 	strd	r3, r1, [r2, #20]
    8d56:	2303      	movs	r3, #3
    8d58:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8d5c:	f842 3f10 	str.w	r3, [r2, #16]!
    8d60:	f012 fd74 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8d64:	46a5      	mov	sp, r4
	dk_set_led_off(CONN_STATUS_LED);
	if(current_conn) {
    8d66:	4c08      	ldr	r4, [pc, #32]	; (8d88 <on_disconnected+0x44>)
	dk_set_led_off(CONN_STATUS_LED);
    8d68:	2001      	movs	r0, #1
    8d6a:	f015 fbc2 	bl	1e4f2 <dk_set_led_off>
	if(current_conn) {
    8d6e:	6820      	ldr	r0, [r4, #0]
    8d70:	b118      	cbz	r0, 8d7a <on_disconnected+0x36>
		bt_conn_unref(current_conn);
    8d72:	f007 fd25 	bl	107c0 <bt_conn_unref>
		current_conn = NULL;
    8d76:	2300      	movs	r3, #0
    8d78:	6023      	str	r3, [r4, #0]
	}
} /* on_disconnected */
    8d7a:	46bd      	mov	sp, r7
    8d7c:	bd98      	pop	{r3, r4, r7, pc}
    8d7e:	bf00      	nop
    8d80:	000201c0 	.word	0x000201c0
    8d84:	0001f8a0 	.word	0x0001f8a0
    8d88:	20009670 	.word	0x20009670

00008d8c <reset_motors>:
    return;
} /* update_motors */


void reset_motors(void)
{
    8d8c:	b590      	push	{r4, r7, lr}
    8d8e:	b087      	sub	sp, #28
    int motor_err;
    motor_err = pwm_set_pulse_dt(&motors_l, PWM_USEC(1500));
    8d90:	4917      	ldr	r1, [pc, #92]	; (8df0 <reset_motors+0x64>)
    8d92:	4818      	ldr	r0, [pc, #96]	; (8df4 <reset_motors+0x68>)
{
    8d94:	af00      	add	r7, sp, #0
    motor_err = pwm_set_pulse_dt(&motors_l, PWM_USEC(1500));
    8d96:	f7ff ff37 	bl	8c08 <pwm_set_pulse_dt>
     if (motor_err < 0) {
    8d9a:	2800      	cmp	r0, #0
    8d9c:	da11      	bge.n	8dc2 <reset_motors+0x36>
			LOG_ERR("Error %d: failed to reset left motors", motor_err);
    8d9e:	466c      	mov	r4, sp
    8da0:	b088      	sub	sp, #32
    8da2:	466a      	mov	r2, sp
    8da4:	4b14      	ldr	r3, [pc, #80]	; (8df8 <reset_motors+0x6c>)
			return;
		}
    motor_err = pwm_set_pulse_dt(&motors_r, PWM_USEC(1500));
    if (motor_err < 0) {
			LOG_ERR("Error %d: failed to reset right motors", motor_err);
    8da6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8daa:	2303      	movs	r3, #3
    8dac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8db0:	4812      	ldr	r0, [pc, #72]	; (8dfc <reset_motors+0x70>)
    8db2:	f842 3f10 	str.w	r3, [r2, #16]!
    8db6:	f012 fd49 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8dba:	46a5      	mov	sp, r4
			return;
		}
    LOG_INF("Motors turned off (1500 us)");
    return;
} /* reset_motors */
    8dbc:	371c      	adds	r7, #28
    8dbe:	46bd      	mov	sp, r7
    8dc0:	bd90      	pop	{r4, r7, pc}
    motor_err = pwm_set_pulse_dt(&motors_r, PWM_USEC(1500));
    8dc2:	490b      	ldr	r1, [pc, #44]	; (8df0 <reset_motors+0x64>)
    8dc4:	480e      	ldr	r0, [pc, #56]	; (8e00 <reset_motors+0x74>)
    8dc6:	f7ff ff1f 	bl	8c08 <pwm_set_pulse_dt>
    if (motor_err < 0) {
    8dca:	2800      	cmp	r0, #0
    8dcc:	da04      	bge.n	8dd8 <reset_motors+0x4c>
			LOG_ERR("Error %d: failed to reset right motors", motor_err);
    8dce:	466c      	mov	r4, sp
    8dd0:	b088      	sub	sp, #32
    8dd2:	466a      	mov	r2, sp
    8dd4:	4b0b      	ldr	r3, [pc, #44]	; (8e04 <reset_motors+0x78>)
    8dd6:	e7e6      	b.n	8da6 <reset_motors+0x1a>
    LOG_INF("Motors turned off (1500 us)");
    8dd8:	4b0b      	ldr	r3, [pc, #44]	; (8e08 <reset_motors+0x7c>)
    8dda:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8dde:	617b      	str	r3, [r7, #20]
    8de0:	2302      	movs	r3, #2
    8de2:	4806      	ldr	r0, [pc, #24]	; (8dfc <reset_motors+0x70>)
    8de4:	613b      	str	r3, [r7, #16]
    8de6:	f107 0210 	add.w	r2, r7, #16
    8dea:	f012 fd2f 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8dee:	e7e5      	b.n	8dbc <reset_motors+0x30>
    8df0:	0016e360 	.word	0x0016e360
    8df4:	0001fa58 	.word	0x0001fa58
    8df8:	000201da 	.word	0x000201da
    8dfc:	0001f8a0 	.word	0x0001f8a0
    8e00:	0001fa48 	.word	0x0001fa48
    8e04:	00020200 	.word	0x00020200
    8e08:	00020227 	.word	0x00020227

00008e0c <on_connected>:
{
    8e0c:	b590      	push	{r4, r7, lr}
    8e0e:	b087      	sub	sp, #28
    8e10:	4604      	mov	r4, r0
    8e12:	af00      	add	r7, sp, #0
	if(err) {
    8e14:	b189      	cbz	r1, 8e3a <on_connected+0x2e>
		LOG_ERR("connection err: %d", err);
    8e16:	466c      	mov	r4, sp
    8e18:	b088      	sub	sp, #32
    8e1a:	466a      	mov	r2, sp
    8e1c:	4b11      	ldr	r3, [pc, #68]	; (8e64 <on_connected+0x58>)
    8e1e:	4812      	ldr	r0, [pc, #72]	; (8e68 <on_connected+0x5c>)
    8e20:	e9c2 3105 	strd	r3, r1, [r2, #20]
    8e24:	2303      	movs	r3, #3
    8e26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8e2a:	f842 3f10 	str.w	r3, [r2, #16]!
    8e2e:	f012 fd0d 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8e32:	46a5      	mov	sp, r4
} /* on_connected */
    8e34:	371c      	adds	r7, #28
    8e36:	46bd      	mov	sp, r7
    8e38:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Connected.");
    8e3a:	4b0c      	ldr	r3, [pc, #48]	; (8e6c <on_connected+0x60>)
    8e3c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8e40:	617b      	str	r3, [r7, #20]
    8e42:	2302      	movs	r3, #2
    8e44:	f107 0210 	add.w	r2, r7, #16
    8e48:	613b      	str	r3, [r7, #16]
    8e4a:	4807      	ldr	r0, [pc, #28]	; (8e68 <on_connected+0x5c>)
    8e4c:	f012 fcfe 	bl	1b84c <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    8e50:	4620      	mov	r0, r4
    8e52:	f007 fc8d 	bl	10770 <bt_conn_ref>
    8e56:	4b06      	ldr	r3, [pc, #24]	; (8e70 <on_connected+0x64>)
    8e58:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CONN_STATUS_LED);
    8e5a:	2001      	movs	r0, #1
    8e5c:	f015 fb46 	bl	1e4ec <dk_set_led_on>
    8e60:	e7e8      	b.n	8e34 <on_connected+0x28>
    8e62:	bf00      	nop
    8e64:	00020243 	.word	0x00020243
    8e68:	0001f8a0 	.word	0x0001f8a0
    8e6c:	00020256 	.word	0x00020256
    8e70:	20009670 	.word	0x20009670

00008e74 <ultrasonic_thread>:
    return;
} /* config_dk_leds */


void ultrasonic_thread(void)
{
    8e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t dist_mm; 
    int motor_err;
    uint32_t motor_f_pwm_ns = PWM_USEC(1500);
    8e78:	4c30      	ldr	r4, [pc, #192]	; (8f3c <ultrasonic_thread+0xc8>)
{
    8e7a:	b083      	sub	sp, #12
    int dir;

    for (;;)
    {
        if (current_conn)
    8e7c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8f40 <ultrasonic_thread+0xcc>
        {
            // Move proximity sensor to next position
            motor_err = pwm_set_pulse_dt(&motor_f, motor_f_pwm_ns);
    8e80:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8f44 <ultrasonic_thread+0xd0>
            if (motor_err < 0) 
            {
                LOG_ERR("Error %d: failed to set pulse width of front motor", motor_err);
                return;
            }
            LOG_INF("Front motor set to %u us", motor_f_pwm_ns/1000);
    8e84:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8f48 <ultrasonic_thread+0xd4>
{
    8e88:	af00      	add	r7, sp, #0
        if (current_conn)
    8e8a:	f8d9 3000 	ldr.w	r3, [r9]
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d041      	beq.n	8f16 <ultrasonic_thread+0xa2>
            motor_err = pwm_set_pulse_dt(&motor_f, motor_f_pwm_ns);
    8e92:	4621      	mov	r1, r4
    8e94:	4650      	mov	r0, sl
    8e96:	f7ff feb7 	bl	8c08 <pwm_set_pulse_dt>
            if (motor_err < 0) 
    8e9a:	2800      	cmp	r0, #0
    8e9c:	da10      	bge.n	8ec0 <ultrasonic_thread+0x4c>
                LOG_ERR("Error %d: failed to set pulse width of front motor", motor_err);
    8e9e:	b088      	sub	sp, #32
    8ea0:	466a      	mov	r2, sp
    8ea2:	4b2a      	ldr	r3, [pc, #168]	; (8f4c <ultrasonic_thread+0xd8>)
    8ea4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8ea8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8eac:	2303      	movs	r3, #3
    8eae:	4828      	ldr	r0, [pc, #160]	; (8f50 <ultrasonic_thread+0xdc>)
    8eb0:	f842 3f10 	str.w	r3, [r2, #16]!
    8eb4:	f012 fcca 	bl	1b84c <z_log_msg_static_create.constprop.0>
            	}
            }
        }
        k_sleep(K_MSEC(25));
    }
}
    8eb8:	370c      	adds	r7, #12
    8eba:	46bd      	mov	sp, r7
    8ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LOG_INF("Front motor set to %u us", motor_f_pwm_ns/1000);
    8ec0:	46e8      	mov	r8, sp
    8ec2:	b088      	sub	sp, #32
    8ec4:	466d      	mov	r5, sp
    8ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8eca:	fbb4 f3f3 	udiv	r3, r4, r3
    8ece:	462a      	mov	r2, r5
    8ed0:	61ab      	str	r3, [r5, #24]
    8ed2:	2303      	movs	r3, #3
    8ed4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8ed8:	f8c5 b014 	str.w	fp, [r5, #20]
    8edc:	481c      	ldr	r0, [pc, #112]	; (8f50 <ultrasonic_thread+0xdc>)
    8ede:	f842 3f10 	str.w	r3, [r2, #16]!
    8ee2:	607a      	str	r2, [r7, #4]
    8ee4:	f012 fcb2 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8ee8:	46c5      	mov	sp, r8
            dist_mm = sense_distance();
    8eea:	f7ff fee5 	bl	8cb8 <sense_distance>
		    LOG_INF("Distance: %u mm", dist_mm);
    8eee:	46ad      	mov	sp, r5
    8ef0:	2303      	movs	r3, #3
    8ef2:	4918      	ldr	r1, [pc, #96]	; (8f54 <ultrasonic_thread+0xe0>)
    8ef4:	687a      	ldr	r2, [r7, #4]
    8ef6:	e9c5 1005 	strd	r1, r0, [r5, #20]
    8efa:	612b      	str	r3, [r5, #16]
    8efc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8f00:	4813      	ldr	r0, [pc, #76]	; (8f50 <ultrasonic_thread+0xdc>)
    8f02:	f012 fca3 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8f06:	46c5      	mov	sp, r8
            if (dir == 0)
    8f08:	b95e      	cbnz	r6, 8f22 <ultrasonic_thread+0xae>
                if (motor_f_pwm_ns <= min_pulse_f) 
    8f0a:	4b13      	ldr	r3, [pc, #76]	; (8f58 <ultrasonic_thread+0xe4>)
    8f0c:	429c      	cmp	r4, r3
    8f0e:	d911      	bls.n	8f34 <ultrasonic_thread+0xc0>
				motor_f_pwm_ns -= PWM_USEC(10);
    8f10:	f5a4 541c 	sub.w	r4, r4, #9984	; 0x2700
    8f14:	3c10      	subs	r4, #16
    8f16:	2100      	movs	r1, #0
    8f18:	f44f 704d 	mov.w	r0, #820	; 0x334
    8f1c:	f011 fb54 	bl	1a5c8 <z_impl_k_sleep>
    {
    8f20:	e7b3      	b.n	8e8a <ultrasonic_thread+0x16>
            	if (motor_f_pwm_ns >= max_pulse_f) 
    8f22:	4b0e      	ldr	r3, [pc, #56]	; (8f5c <ultrasonic_thread+0xe8>)
            	motor_f_pwm_ns = motor_f_pwm_ns + PWM_USEC(10);
    8f24:	f504 541c 	add.w	r4, r4, #9984	; 0x2700
    8f28:	3410      	adds	r4, #16
            	if (motor_f_pwm_ns >= max_pulse_f) 
    8f2a:	429c      	cmp	r4, r3
    8f2c:	d9f3      	bls.n	8f16 <ultrasonic_thread+0xa2>
            		dir = 0;
    8f2e:	2600      	movs	r6, #0
            		motor_f_pwm_ns = max_pulse_f;
    8f30:	4c0b      	ldr	r4, [pc, #44]	; (8f60 <ultrasonic_thread+0xec>)
    8f32:	e7f0      	b.n	8f16 <ultrasonic_thread+0xa2>
            		dir = 1;
    8f34:	2601      	movs	r6, #1
            		motor_f_pwm_ns = min_pulse_f;
    8f36:	461c      	mov	r4, r3
    8f38:	e7ed      	b.n	8f16 <ultrasonic_thread+0xa2>
    8f3a:	bf00      	nop
    8f3c:	0016e360 	.word	0x0016e360
    8f40:	20009670 	.word	0x20009670
    8f44:	0001fa38 	.word	0x0001fa38
    8f48:	00020294 	.word	0x00020294
    8f4c:	00020261 	.word	0x00020261
    8f50:	0001f8a0 	.word	0x0001f8a0
    8f54:	000202ad 	.word	0x000202ad
    8f58:	000f4240 	.word	0x000f4240
    8f5c:	001e847f 	.word	0x001e847f
    8f60:	001e8480 	.word	0x001e8480

00008f64 <update_motors>:
{
    8f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t dir = dir_ascii - '0';          // Convert to uint8
    8f68:	3830      	subs	r0, #48	; 0x30
    8f6a:	b2c0      	uxtb	r0, r0
{
    8f6c:	b086      	sub	sp, #24
    8f6e:	2803      	cmp	r0, #3
    8f70:	af00      	add	r7, sp, #0
    8f72:	d81e      	bhi.n	8fb2 <update_motors+0x4e>
    8f74:	4b2d      	ldr	r3, [pc, #180]	; (902c <update_motors+0xc8>)
    8f76:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    8f7a:	4b2d      	ldr	r3, [pc, #180]	; (9030 <update_motors+0xcc>)
    8f7c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    motor_err = pwm_set_pulse_dt(&motors_l, motors_l_pwm_ns);
    8f80:	4629      	mov	r1, r5
    8f82:	482c      	ldr	r0, [pc, #176]	; (9034 <update_motors+0xd0>)
    8f84:	f7ff fe40 	bl	8c08 <pwm_set_pulse_dt>
    if (motor_err < 0)
    8f88:	2800      	cmp	r0, #0
    8f8a:	da1e      	bge.n	8fca <update_motors+0x66>
        LOG_ERR("Error %d: failed to set pulse width of left motors", motor_err);
    8f8c:	466c      	mov	r4, sp
    8f8e:	b088      	sub	sp, #32
    8f90:	466a      	mov	r2, sp
    8f92:	4b29      	ldr	r3, [pc, #164]	; (9038 <update_motors+0xd4>)
        LOG_ERR("Error %d: failed to set pulse width of right motors", motor_err);
    8f94:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8f98:	2303      	movs	r3, #3
    8f9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8f9e:	4827      	ldr	r0, [pc, #156]	; (903c <update_motors+0xd8>)
    8fa0:	f842 3f10 	str.w	r3, [r2, #16]!
    8fa4:	f012 fc52 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8fa8:	46a5      	mov	sp, r4
} /* update_motors */
    8faa:	3718      	adds	r7, #24
    8fac:	46bd      	mov	sp, r7
    8fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            LOG_INF("Controller incorrectly configured. Set forwards = 0, right = 1, backwards = 2, left = 3.");
    8fb2:	4b23      	ldr	r3, [pc, #140]	; (9040 <update_motors+0xdc>)
    8fb4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8fb8:	617b      	str	r3, [r7, #20]
    8fba:	2302      	movs	r3, #2
    8fbc:	481f      	ldr	r0, [pc, #124]	; (903c <update_motors+0xd8>)
    8fbe:	613b      	str	r3, [r7, #16]
    8fc0:	f107 0210 	add.w	r2, r7, #16
    8fc4:	f012 fc42 	bl	1b84c <z_log_msg_static_create.constprop.0>
    8fc8:	e7da      	b.n	8f80 <update_motors+0x1c>
    motor_err = pwm_set_pulse_dt(&motors_r, motors_r_pwm_ns);
    8fca:	4631      	mov	r1, r6
    8fcc:	481d      	ldr	r0, [pc, #116]	; (9044 <update_motors+0xe0>)
    8fce:	f7ff fe1b 	bl	8c08 <pwm_set_pulse_dt>
    if (motor_err < 0) 
    8fd2:	2800      	cmp	r0, #0
    8fd4:	da04      	bge.n	8fe0 <update_motors+0x7c>
        LOG_ERR("Error %d: failed to set pulse width of right motors", motor_err);
    8fd6:	466c      	mov	r4, sp
    8fd8:	b088      	sub	sp, #32
    8fda:	466a      	mov	r2, sp
    8fdc:	4b1a      	ldr	r3, [pc, #104]	; (9048 <update_motors+0xe4>)
    8fde:	e7d9      	b.n	8f94 <update_motors+0x30>
    LOG_INF("Left motor set to %u us", motors_l_pwm_ns/1000);
    8fe0:	46e8      	mov	r8, sp
    8fe2:	b088      	sub	sp, #32
    8fe4:	466c      	mov	r4, sp
    8fe6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    8fea:	fbb5 f5fa 	udiv	r5, r5, sl
    8fee:	f04f 0903 	mov.w	r9, #3
    8ff2:	61a5      	str	r5, [r4, #24]
    8ff4:	4625      	mov	r5, r4
    8ff6:	4b15      	ldr	r3, [pc, #84]	; (904c <update_motors+0xe8>)
    8ff8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8ffc:	6163      	str	r3, [r4, #20]
    8ffe:	f845 9f10 	str.w	r9, [r5, #16]!
    9002:	462a      	mov	r2, r5
    9004:	480d      	ldr	r0, [pc, #52]	; (903c <update_motors+0xd8>)
    9006:	f012 fc21 	bl	1b84c <z_log_msg_static_create.constprop.0>
    900a:	46c5      	mov	sp, r8
    LOG_INF("Right motor set to %u us", motors_r_pwm_ns/1000);
    900c:	46a5      	mov	sp, r4
    900e:	fbb6 f6fa 	udiv	r6, r6, sl
    9012:	4b0f      	ldr	r3, [pc, #60]	; (9050 <update_motors+0xec>)
    9014:	462a      	mov	r2, r5
    9016:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    901a:	4808      	ldr	r0, [pc, #32]	; (903c <update_motors+0xd8>)
    901c:	6163      	str	r3, [r4, #20]
    901e:	61a6      	str	r6, [r4, #24]
    9020:	f8c4 9010 	str.w	r9, [r4, #16]
    9024:	f012 fc12 	bl	1b84c <z_log_msg_static_create.constprop.0>
    9028:	46c5      	mov	sp, r8
    902a:	e7be      	b.n	8faa <update_motors+0x46>
    902c:	0001fa28 	.word	0x0001fa28
    9030:	0001fa18 	.word	0x0001fa18
    9034:	0001fa58 	.word	0x0001fa58
    9038:	00020316 	.word	0x00020316
    903c:	0001f8a0 	.word	0x0001f8a0
    9040:	000202bd 	.word	0x000202bd
    9044:	0001fa48 	.word	0x0001fa48
    9048:	00020349 	.word	0x00020349
    904c:	0002037d 	.word	0x0002037d
    9050:	00020395 	.word	0x00020395

00009054 <on_data_received>:
{
    9054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9058:	b082      	sub	sp, #8
    905a:	4680      	mov	r8, r0
    uint8_t temp_str[len+1];
    905c:	4668      	mov	r0, sp
    905e:	f102 0308 	add.w	r3, r2, #8
    9062:	08db      	lsrs	r3, r3, #3
    9064:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
{
    9068:	af02      	add	r7, sp, #8
    uint8_t temp_str[len+1];
    906a:	469d      	mov	sp, r3
    906c:	ad02      	add	r5, sp, #8
    memcpy(temp_str, data, len);
    906e:	4628      	mov	r0, r5
{
    9070:	4614      	mov	r4, r2
    memcpy(temp_str, data, len);
    9072:	f013 fe70 	bl	1cd56 <memcpy>
    temp_str[len] = 0x00;
    9076:	2300      	movs	r3, #0
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
    9078:	466e      	mov	r6, sp
    907a:	b088      	sub	sp, #32
    temp_str[len] = 0x00;
    907c:	552b      	strb	r3, [r5, r4]
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
    907e:	aa02      	add	r2, sp, #8
    9080:	4b16      	ldr	r3, [pc, #88]	; (90dc <on_data_received+0x88>)
    9082:	61d4      	str	r4, [r2, #28]
    9084:	e9c2 3805 	strd	r3, r8, [r2, #20]
    9088:	2304      	movs	r3, #4
    908a:	4c15      	ldr	r4, [pc, #84]	; (90e0 <on_data_received+0x8c>)
    908c:	f842 3f10 	str.w	r3, [r2, #16]!
    9090:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    9094:	4620      	mov	r0, r4
    9096:	f012 fbd9 	bl	1b84c <z_log_msg_static_create.constprop.0>
    LOG_INF("Data: %s", temp_str);
    909a:	aa02      	add	r2, sp, #8
    909c:	4b11      	ldr	r3, [pc, #68]	; (90e4 <on_data_received+0x90>)
    909e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    90a2:	e9c2 3505 	strd	r3, r5, [r2, #20]
    90a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    90aa:	8393      	strh	r3, [r2, #28]
    90ac:	4b0e      	ldr	r3, [pc, #56]	; (90e8 <on_data_received+0x94>)
    90ae:	4620      	mov	r0, r4
    90b0:	f842 3f10 	str.w	r3, [r2, #16]!
    90b4:	f012 fbca 	bl	1b84c <z_log_msg_static_create.constprop.0>
    90b8:	46b5      	mov	sp, r6
    update_motors(temp_str[0]); 
    90ba:	7828      	ldrb	r0, [r5, #0]
    90bc:	f7ff ff52 	bl	8f64 <update_motors>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    90c0:	2200      	movs	r2, #0
    90c2:	2300      	movs	r3, #0
    90c4:	4809      	ldr	r0, [pc, #36]	; (90ec <on_data_received+0x98>)
    90c6:	e9cd 2300 	strd	r2, r3, [sp]
    90ca:	f640 02f6 	movw	r2, #2294	; 0x8f6
    90ce:	2300      	movs	r3, #0
    90d0:	f011 ff98 	bl	1b004 <z_impl_k_timer_start>
} /* on_data_received */
    90d4:	46bd      	mov	sp, r7
    90d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90da:	bf00      	nop
    90dc:	000203ae 	.word	0x000203ae
    90e0:	0001f8a0 	.word	0x0001f8a0
    90e4:	000203d0 	.word	0x000203d0
    90e8:	01000003 	.word	0x01000003
    90ec:	20008488 	.word	0x20008488

000090f0 <main>:


void main(void)
{
    90f0:	b590      	push	{r4, r7, lr}
    90f2:	b087      	sub	sp, #28
	int16_t ultrasonic_err;
    int err;
    int blink_status = 0;
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    90f4:	466c      	mov	r4, sp
{
    90f6:	af00      	add	r7, sp, #0
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    90f8:	b088      	sub	sp, #32
    90fa:	466a      	mov	r2, sp
    90fc:	4b39      	ldr	r3, [pc, #228]	; (91e4 <main+0xf4>)
    90fe:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    9102:	6153      	str	r3, [r2, #20]
    9104:	4b38      	ldr	r3, [pc, #224]	; (91e8 <main+0xf8>)
    9106:	4839      	ldr	r0, [pc, #228]	; (91ec <main+0xfc>)
    9108:	6193      	str	r3, [r2, #24]
    910a:	f44f 7300 	mov.w	r3, #512	; 0x200
    910e:	8393      	strh	r3, [r2, #28]
    9110:	4b37      	ldr	r3, [pc, #220]	; (91f0 <main+0x100>)
    9112:	f842 3f10 	str.w	r3, [r2, #16]!
    9116:	f012 fb99 	bl	1b84c <z_log_msg_static_create.constprop.0>
    911a:	46a5      	mov	sp, r4
    err = dk_leds_init();
    911c:	f00c fc62 	bl	159e4 <dk_leds_init>
    if (err) {
    9120:	b168      	cbz	r0, 913e <main+0x4e>
        LOG_ERR("Couldn't init LEDS (err %d)", err);
    9122:	b088      	sub	sp, #32
    9124:	466a      	mov	r2, sp
    9126:	4b33      	ldr	r3, [pc, #204]	; (91f4 <main+0x104>)
    9128:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    912c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9130:	2303      	movs	r3, #3
    9132:	482e      	ldr	r0, [pc, #184]	; (91ec <main+0xfc>)
    9134:	f842 3f10 	str.w	r3, [r2, #16]!
    9138:	f012 fb88 	bl	1b84c <z_log_msg_static_create.constprop.0>
    913c:	46a5      	mov	sp, r4

    config_dk_leds();
    ultrasonic_err = ultrasonic_init(gpio_dev, ULTRASONIC_TRIG_PIN, ULTRASONIC_ECHO_PIN);
    913e:	2119      	movs	r1, #25
    9140:	221a      	movs	r2, #26
    9142:	482d      	ldr	r0, [pc, #180]	; (91f8 <main+0x108>)
    9144:	f000 f96c 	bl	9420 <ultrasonic_init>
	if (!ultrasonic_err)
	{
		LOG_DBG("Ultrasonic sensor initialisation failed");
	}

    err = bluetooth_init(&bluetooth_callbacks, &remote_callbacks);
    9148:	492c      	ldr	r1, [pc, #176]	; (91fc <main+0x10c>)
    914a:	482d      	ldr	r0, [pc, #180]	; (9200 <main+0x110>)
    914c:	f000 f8aa 	bl	92a4 <bluetooth_init>
    if (err) {
    9150:	b170      	cbz	r0, 9170 <main+0x80>
        LOG_INF("Couldn't initialize Bluetooth. err: %d", err);
    9152:	466c      	mov	r4, sp
    9154:	b088      	sub	sp, #32
    9156:	466a      	mov	r2, sp
    9158:	4b2a      	ldr	r3, [pc, #168]	; (9204 <main+0x114>)
    915a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    915e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9162:	2303      	movs	r3, #3
    9164:	4821      	ldr	r0, [pc, #132]	; (91ec <main+0xfc>)
    9166:	f842 3f10 	str.w	r3, [r2, #16]!
    916a:	f012 fb6f 	bl	1b84c <z_log_msg_static_create.constprop.0>
    916e:	46a5      	mov	sp, r4
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    9170:	4c25      	ldr	r4, [pc, #148]	; (9208 <main+0x118>)
    9172:	4620      	mov	r0, r4
    9174:	f015 ff3d 	bl	1eff2 <z_device_is_ready>
    }

    if (!device_is_ready(motors_l.dev)) {
    9178:	b9a8      	cbnz	r0, 91a6 <main+0xb6>
		LOG_ERR("Error: PWM device %s is not ready\n", motors_l.dev->name);
		return;
	}
	if (!device_is_ready(motors_r.dev)) {
		LOG_ERR("Error: PWM device %s is not ready\n", motors_r.dev->name);
    917a:	6823      	ldr	r3, [r4, #0]
    917c:	466c      	mov	r4, sp
    917e:	b088      	sub	sp, #32
    9180:	466a      	mov	r2, sp
    9182:	4922      	ldr	r1, [pc, #136]	; (920c <main+0x11c>)
    9184:	4819      	ldr	r0, [pc, #100]	; (91ec <main+0xfc>)
    9186:	e9c2 1305 	strd	r1, r3, [r2, #20]
    918a:	f44f 7300 	mov.w	r3, #512	; 0x200
    918e:	8393      	strh	r3, [r2, #28]
    9190:	4b17      	ldr	r3, [pc, #92]	; (91f0 <main+0x100>)
    9192:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    9196:	f842 3f10 	str.w	r3, [r2, #16]!
    919a:	f012 fb57 	bl	1b84c <z_log_msg_static_create.constprop.0>
    919e:	46a5      	mov	sp, r4

        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
        k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));

    }
} /* main */
    91a0:	371c      	adds	r7, #28
    91a2:	46bd      	mov	sp, r7
    91a4:	bd90      	pop	{r4, r7, pc}
    91a6:	4620      	mov	r0, r4
    91a8:	f015 ff23 	bl	1eff2 <z_device_is_ready>
	if (!device_is_ready(motors_r.dev)) {
    91ac:	2800      	cmp	r0, #0
    91ae:	d0e4      	beq.n	917a <main+0x8a>
    LOG_INF("Running...");
    91b0:	4b17      	ldr	r3, [pc, #92]	; (9210 <main+0x120>)
    91b2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    91b6:	617b      	str	r3, [r7, #20]
    91b8:	2302      	movs	r3, #2
    91ba:	480c      	ldr	r0, [pc, #48]	; (91ec <main+0xfc>)
    91bc:	613b      	str	r3, [r7, #16]
    91be:	f107 0210 	add.w	r2, r7, #16
    91c2:	f012 fb43 	bl	1b84c <z_log_msg_static_create.constprop.0>
    int blink_status = 0;
    91c6:	2100      	movs	r1, #0
        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
    91c8:	1c4c      	adds	r4, r1, #1
    91ca:	2000      	movs	r0, #0
    91cc:	f001 0101 	and.w	r1, r1, #1
    91d0:	f00c fc34 	bl	15a3c <dk_set_led>
	return z_impl_k_sleep(timeout);
    91d4:	2100      	movs	r1, #0
    91d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    91da:	f011 f9f5 	bl	1a5c8 <z_impl_k_sleep>
    91de:	4621      	mov	r1, r4
    91e0:	e7f2      	b.n	91c8 <main+0xd8>
    91e2:	bf00      	nop
    91e4:	000203d9 	.word	0x000203d9
    91e8:	000203ea 	.word	0x000203ea
    91ec:	0001f8a0 	.word	0x0001f8a0
    91f0:	01000003 	.word	0x01000003
    91f4:	00020403 	.word	0x00020403
    91f8:	0001f528 	.word	0x0001f528
    91fc:	20008160 	.word	0x20008160
    9200:	20008164 	.word	0x20008164
    9204:	0002041f 	.word	0x0002041f
    9208:	0001f5a0 	.word	0x0001f5a0
    920c:	00020446 	.word	0x00020446
    9210:	00020469 	.word	0x00020469

00009214 <on_write>:
                        const struct bt_gatt_attr *attr,
                        const void *buf,
                        uint16_t len,
                        uint16_t offset,
                        uint8_t flags)
{
    9214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LOG_INF("Received data, handle %d, conn %p",
    9218:	46e8      	mov	r8, sp
{
    921a:	af00      	add	r7, sp, #0
    LOG_INF("Received data, handle %d, conn %p",
    921c:	b088      	sub	sp, #32
{
    921e:	4616      	mov	r6, r2
    9220:	461c      	mov	r4, r3
    9222:	4605      	mov	r5, r0
    LOG_INF("Received data, handle %d, conn %p",
    9224:	466a      	mov	r2, sp
    9226:	8a0b      	ldrh	r3, [r1, #16]
    9228:	490c      	ldr	r1, [pc, #48]	; (925c <on_write+0x48>)
    922a:	61d0      	str	r0, [r2, #28]
    922c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    9230:	2304      	movs	r3, #4
    9232:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    9236:	2300      	movs	r3, #0
    9238:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    923c:	4808      	ldr	r0, [pc, #32]	; (9260 <on_write+0x4c>)
    923e:	f002 fae3 	bl	b808 <z_impl_z_log_msg_static_create>
        attr->handle, (void *)conn);

    if (remote_service_callbacks.data_received) {
    9242:	4b08      	ldr	r3, [pc, #32]	; (9264 <on_write+0x50>)
    9244:	46c5      	mov	sp, r8
    9246:	681b      	ldr	r3, [r3, #0]
    9248:	b11b      	cbz	r3, 9252 <on_write+0x3e>
        remote_service_callbacks.data_received(conn, buf, len);
    924a:	4622      	mov	r2, r4
    924c:	4631      	mov	r1, r6
    924e:	4628      	mov	r0, r5
    9250:	4798      	blx	r3
    }
    return len;
} /* on_write */
    9252:	4620      	mov	r0, r4
    9254:	46bd      	mov	sp, r7
    9256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    925a:	bf00      	nop
    925c:	00020492 	.word	0x00020492
    9260:	0001f978 	.word	0x0001f978
    9264:	20009674 	.word	0x20009674

00009268 <bt_ready>:
{
    9268:	b598      	push	{r3, r4, r7, lr}
    926a:	af00      	add	r7, sp, #0
    if (err) {
    926c:	b178      	cbz	r0, 928e <bt_ready+0x26>
        LOG_ERR("bt_ready returned %d", err);
    926e:	466c      	mov	r4, sp
    9270:	b088      	sub	sp, #32
    9272:	466a      	mov	r2, sp
    9274:	4b08      	ldr	r3, [pc, #32]	; (9298 <bt_ready+0x30>)
    9276:	e9c2 3005 	strd	r3, r0, [r2, #20]
    927a:	2303      	movs	r3, #3
    927c:	f842 3f10 	str.w	r3, [r2, #16]!
    9280:	2300      	movs	r3, #0
    9282:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9286:	4805      	ldr	r0, [pc, #20]	; (929c <bt_ready+0x34>)
    9288:	f002 fabe 	bl	b808 <z_impl_z_log_msg_static_create>
    928c:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    928e:	4804      	ldr	r0, [pc, #16]	; (92a0 <bt_ready+0x38>)
    9290:	f00f faa6 	bl	187e0 <z_impl_k_sem_give>
} /* bt_ready */
    9294:	46bd      	mov	sp, r7
    9296:	bd98      	pop	{r3, r4, r7, pc}
    9298:	000204b4 	.word	0x000204b4
    929c:	0001f978 	.word	0x0001f978
    92a0:	2000854c 	.word	0x2000854c

000092a4 <bluetooth_init>:


int bluetooth_init(struct bt_conn_cb *bt_cb, struct bt_remote_service_cb *remote_cb)
{
    92a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92a8:	b088      	sub	sp, #32
    92aa:	4604      	mov	r4, r0
    92ac:	af02      	add	r7, sp, #8
    92ae:	460d      	mov	r5, r1
    int err;
    LOG_INF("Initializing Bluetooth");
    92b0:	466e      	mov	r6, sp
    92b2:	f04f 0802 	mov.w	r8, #2
    92b6:	4b25      	ldr	r3, [pc, #148]	; (934c <bluetooth_init+0xa8>)
    92b8:	f8c7 8010 	str.w	r8, [r7, #16]
    92bc:	617b      	str	r3, [r7, #20]
    92be:	2300      	movs	r3, #0
    92c0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    92c4:	4822      	ldr	r0, [pc, #136]	; (9350 <bluetooth_init+0xac>)
    92c6:	f107 0210 	add.w	r2, r7, #16
    92ca:	f002 fa9d 	bl	b808 <z_impl_z_log_msg_static_create>

    if (bt_cb == NULL){
    92ce:	2c00      	cmp	r4, #0
    92d0:	d03a      	beq.n	9348 <bluetooth_init+0xa4>
        return NRFX_ERROR_NULL;
    }
    bt_conn_cb_register(bt_cb);
    92d2:	4620      	mov	r0, r4
    92d4:	f007 fcae 	bl	10c34 <bt_conn_cb_register>
    remote_service_callbacks.data_received = remote_cb->data_received;
    92d8:	682a      	ldr	r2, [r5, #0]
    92da:	4b1e      	ldr	r3, [pc, #120]	; (9354 <bluetooth_init+0xb0>)

    err = bt_enable(bt_ready);
    92dc:	481e      	ldr	r0, [pc, #120]	; (9358 <bluetooth_init+0xb4>)
    remote_service_callbacks.data_received = remote_cb->data_received;
    92de:	601a      	str	r2, [r3, #0]
    err = bt_enable(bt_ready);
    92e0:	f006 f908 	bl	f4f4 <bt_enable>
    if (err) {
    92e4:	4604      	mov	r4, r0
    92e6:	b198      	cbz	r0, 9310 <bluetooth_init+0x6c>
        LOG_ERR("bt_enable returned %d", err);
    92e8:	b088      	sub	sp, #32
    92ea:	aa02      	add	r2, sp, #8
    92ec:	4b1b      	ldr	r3, [pc, #108]	; (935c <bluetooth_init+0xb8>)

    k_sem_take(&bt_init_ok, K_FOREVER);

    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    if (err){
        LOG_ERR("couldn't start advertising (err = %d", err);
    92ee:	e9c2 3405 	strd	r3, r4, [r2, #20]
    92f2:	2303      	movs	r3, #3
    92f4:	f842 3f10 	str.w	r3, [r2, #16]!
    92f8:	2300      	movs	r3, #0
    92fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    92fe:	4814      	ldr	r0, [pc, #80]	; (9350 <bluetooth_init+0xac>)
    9300:	f002 fa82 	bl	b808 <z_impl_z_log_msg_static_create>
    9304:	46b5      	mov	sp, r6
        return err;
    }

    return err;
} /* bluetooth_init */
    9306:	4620      	mov	r0, r4
    9308:	3718      	adds	r7, #24
    930a:	46bd      	mov	sp, r7
    930c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    9310:	463c      	mov	r4, r7
    9312:	4d13      	ldr	r5, [pc, #76]	; (9360 <bluetooth_init+0xbc>)
	return z_impl_k_sem_take(sem, timeout);
    9314:	f04f 32ff 	mov.w	r2, #4294967295
    9318:	f04f 33ff 	mov.w	r3, #4294967295
    931c:	4811      	ldr	r0, [pc, #68]	; (9364 <bluetooth_init+0xc0>)
    931e:	f00f faa3 	bl	18868 <z_impl_k_sem_take>
    9322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9326:	682b      	ldr	r3, [r5, #0]
    9328:	4642      	mov	r2, r8
    932a:	6023      	str	r3, [r4, #0]
    932c:	2301      	movs	r3, #1
    932e:	4638      	mov	r0, r7
    9330:	9300      	str	r3, [sp, #0]
    9332:	490d      	ldr	r1, [pc, #52]	; (9368 <bluetooth_init+0xc4>)
    9334:	4b0d      	ldr	r3, [pc, #52]	; (936c <bluetooth_init+0xc8>)
    9336:	f006 fdc9 	bl	fecc <bt_le_adv_start>
    if (err){
    933a:	4604      	mov	r4, r0
    933c:	2800      	cmp	r0, #0
    933e:	d0e2      	beq.n	9306 <bluetooth_init+0x62>
        LOG_ERR("couldn't start advertising (err = %d", err);
    9340:	b088      	sub	sp, #32
    9342:	aa02      	add	r2, sp, #8
    9344:	4b0a      	ldr	r3, [pc, #40]	; (9370 <bluetooth_init+0xcc>)
    9346:	e7d2      	b.n	92ee <bluetooth_init+0x4a>
        return NRFX_ERROR_NULL;
    9348:	4c0a      	ldr	r4, [pc, #40]	; (9374 <bluetooth_init+0xd0>)
    934a:	e7dc      	b.n	9306 <bluetooth_init+0x62>
    934c:	000204c9 	.word	0x000204c9
    9350:	0001f978 	.word	0x0001f978
    9354:	20009674 	.word	0x20009674
    9358:	00009269 	.word	0x00009269
    935c:	000204e0 	.word	0x000204e0
    9360:	0001f9b0 	.word	0x0001f9b0
    9364:	2000854c 	.word	0x2000854c
    9368:	0001faac 	.word	0x0001faac
    936c:	0001faa4 	.word	0x0001faa4
    9370:	000204f6 	.word	0x000204f6
    9374:	0bad0009 	.word	0x0bad0009

00009378 <echo_cb>:
{
    9378:	b538      	push	{r3, r4, r5, lr}
	if (!latch)
    937a:	4c0f      	ldr	r4, [pc, #60]	; (93b8 <echo_cb+0x40>)
    937c:	4d0f      	ldr	r5, [pc, #60]	; (93bc <echo_cb+0x44>)
    937e:	7823      	ldrb	r3, [r4, #0]
    9380:	b92b      	cbnz	r3, 938e <echo_cb+0x16>
		latch = 1;
    9382:	2301      	movs	r3, #1
    9384:	7023      	strb	r3, [r4, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9386:	f014 ffd0 	bl	1e32a <sys_clock_cycle_get_32>
		start_time = k_cycle_get_32();
    938a:	6028      	str	r0, [r5, #0]
} /* echo_cb */
    938c:	bd38      	pop	{r3, r4, r5, pc}
    938e:	f014 ffcc 	bl	1e32a <sys_clock_cycle_get_32>
		latch = 0;
    9392:	2200      	movs	r2, #0
		stop_time = k_cycle_get_32();
    9394:	4b0a      	ldr	r3, [pc, #40]	; (93c0 <echo_cb+0x48>)
    9396:	6018      	str	r0, [r3, #0]
		latch = 0;
    9398:	7022      	strb	r2, [r4, #0]
		cycles_spent = stop_time - start_time;
    939a:	681b      	ldr	r3, [r3, #0]
    939c:	682a      	ldr	r2, [r5, #0]
    939e:	1a9b      	subs	r3, r3, r2
    93a0:	4a08      	ldr	r2, [pc, #32]	; (93c4 <echo_cb+0x4c>)
    93a2:	6013      	str	r3, [r2, #0]
		us_spent = k_cyc_to_us_floor32(cycles_spent);
    93a4:	6813      	ldr	r3, [r2, #0]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    93a6:	4a08      	ldr	r2, [pc, #32]	; (93c8 <echo_cb+0x50>)
    93a8:	fba3 3202 	umull	r3, r2, r3, r2
    93ac:	0bdb      	lsrs	r3, r3, #15
    93ae:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    93b2:	4a06      	ldr	r2, [pc, #24]	; (93cc <echo_cb+0x54>)
    93b4:	6013      	str	r3, [r2, #0]
} /* echo_cb */
    93b6:	e7e9      	b.n	938c <echo_cb+0x14>
    93b8:	20009bb4 	.word	0x20009bb4
    93bc:	20009694 	.word	0x20009694
    93c0:	20009690 	.word	0x20009690
    93c4:	2000968c 	.word	0x2000968c
    93c8:	000f4240 	.word	0x000f4240
    93cc:	20009688 	.word	0x20009688

000093d0 <gpio_pin_set_raw.isra.0>:
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    93d0:	2301      	movs	r3, #1
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
    93d2:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    93d4:	fa03 f101 	lsl.w	r1, r3, r1
    93d8:	6843      	ldr	r3, [r0, #4]
    93da:	681b      	ldr	r3, [r3, #0]
    93dc:	4219      	tst	r1, r3
    93de:	d10e      	bne.n	93fe <gpio_pin_set_raw.isra.0+0x2e>
    93e0:	490b      	ldr	r1, [pc, #44]	; (9410 <gpio_pin_set_raw.isra.0+0x40>)
    93e2:	f240 43fe 	movw	r3, #1278	; 0x4fe
    93e6:	4a0b      	ldr	r2, [pc, #44]	; (9414 <gpio_pin_set_raw.isra.0+0x44>)
    93e8:	480b      	ldr	r0, [pc, #44]	; (9418 <gpio_pin_set_raw.isra.0+0x48>)
    93ea:	f012 fca5 	bl	1bd38 <assert_print>
    93ee:	480b      	ldr	r0, [pc, #44]	; (941c <gpio_pin_set_raw.isra.0+0x4c>)
    93f0:	f012 fca2 	bl	1bd38 <assert_print>
    93f4:	f240 41fe 	movw	r1, #1278	; 0x4fe
    93f8:	4806      	ldr	r0, [pc, #24]	; (9414 <gpio_pin_set_raw.isra.0+0x44>)
    93fa:	f012 fc96 	bl	1bd2a <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
    93fe:	b122      	cbz	r2, 940a <gpio_pin_set_raw.isra.0+0x3a>
	return api->port_set_bits_raw(port, pins);
    9400:	6883      	ldr	r3, [r0, #8]
    9402:	68db      	ldr	r3, [r3, #12]
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
    9404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    9408:	4718      	bx	r3
    940a:	6883      	ldr	r3, [r0, #8]
    940c:	691b      	ldr	r3, [r3, #16]
    940e:	e7f9      	b.n	9404 <gpio_pin_set_raw.isra.0+0x34>
    9410:	00020566 	.word	0x00020566
    9414:	00020535 	.word	0x00020535
    9418:	000205a4 	.word	0x000205a4
    941c:	000205c1 	.word	0x000205c1

00009420 <ultrasonic_init>:
{
    9420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9424:	4615      	mov	r5, r2
    port_fw = port;
    9426:	4a33      	ldr	r2, [pc, #204]	; (94f4 <ultrasonic_init+0xd4>)
{
    9428:	4604      	mov	r4, r0
    port_fw = port;
    942a:	6010      	str	r0, [r2, #0]
	pin_trig_fw = pin_trig;
    942c:	4a32      	ldr	r2, [pc, #200]	; (94f8 <ultrasonic_init+0xd8>)
    942e:	7011      	strb	r1, [r2, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9430:	2701      	movs	r7, #1
    9432:	6842      	ldr	r2, [r0, #4]
    9434:	fa07 f301 	lsl.w	r3, r7, r1
    9438:	6812      	ldr	r2, [r2, #0]
	const struct gpio_driver_api *api =
    943a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    943e:	4213      	tst	r3, r2
	struct gpio_driver_data *data =
    9440:	6906      	ldr	r6, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9442:	d10e      	bne.n	9462 <ultrasonic_init+0x42>
    9444:	492d      	ldr	r1, [pc, #180]	; (94fc <ultrasonic_init+0xdc>)
    9446:	f44f 7337 	mov.w	r3, #732	; 0x2dc
    944a:	4a2d      	ldr	r2, [pc, #180]	; (9500 <ultrasonic_init+0xe0>)
    944c:	482d      	ldr	r0, [pc, #180]	; (9504 <ultrasonic_init+0xe4>)
    944e:	f012 fc73 	bl	1bd38 <assert_print>
    9452:	482d      	ldr	r0, [pc, #180]	; (9508 <ultrasonic_init+0xe8>)
    9454:	f012 fc70 	bl	1bd38 <assert_print>
    9458:	f44f 7137 	mov.w	r1, #732	; 0x2dc
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    945c:	4828      	ldr	r0, [pc, #160]	; (9500 <ultrasonic_init+0xe0>)
    945e:	f012 fc64 	bl	1bd2a <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    9462:	6832      	ldr	r2, [r6, #0]
    9464:	ea22 0203 	bic.w	r2, r2, r3
    9468:	6032      	str	r2, [r6, #0]
	return api->pin_configure(port, pin, flags);
    946a:	f8dc 3000 	ldr.w	r3, [ip]
    946e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9472:	4798      	blx	r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9474:	6863      	ldr	r3, [r4, #4]
    9476:	fa07 f605 	lsl.w	r6, r7, r5
    947a:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
    947c:	68a1      	ldr	r1, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    947e:	421e      	tst	r6, r3
	struct gpio_driver_data *data =
    9480:	6922      	ldr	r2, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9482:	d0df      	beq.n	9444 <ultrasonic_init+0x24>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    9484:	6813      	ldr	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    9486:	4620      	mov	r0, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    9488:	ea23 0306 	bic.w	r3, r3, r6
    948c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    948e:	680b      	ldr	r3, [r1, #0]
    9490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9494:	4629      	mov	r1, r5
    9496:	4798      	blx	r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9498:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    949c:	6812      	ldr	r2, [r2, #0]
    949e:	4216      	tst	r6, r2
    94a0:	d10c      	bne.n	94bc <ultrasonic_init+0x9c>
    94a2:	4916      	ldr	r1, [pc, #88]	; (94fc <ultrasonic_init+0xdc>)
    94a4:	f240 237e 	movw	r3, #638	; 0x27e
    94a8:	4a15      	ldr	r2, [pc, #84]	; (9500 <ultrasonic_init+0xe0>)
    94aa:	4816      	ldr	r0, [pc, #88]	; (9504 <ultrasonic_init+0xe4>)
    94ac:	f012 fc44 	bl	1bd38 <assert_print>
    94b0:	4815      	ldr	r0, [pc, #84]	; (9508 <ultrasonic_init+0xe8>)
    94b2:	f012 fc41 	bl	1bd38 <assert_print>
    94b6:	f240 217e 	movw	r1, #638	; 0x27e
    94ba:	e7cf      	b.n	945c <ultrasonic_init+0x3c>
	return api->pin_interrupt_configure(port, pin, mode, trig);
    94bc:	f8d3 8018 	ldr.w	r8, [r3, #24]
    94c0:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    94c4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
    94c8:	4629      	mov	r1, r5
    94ca:	4620      	mov	r0, r4
    94cc:	47c0      	blx	r8
	if (err)
    94ce:	b970      	cbnz	r0, 94ee <ultrasonic_init+0xce>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    94d0:	4b0e      	ldr	r3, [pc, #56]	; (950c <ultrasonic_init+0xec>)
    94d2:	490f      	ldr	r1, [pc, #60]	; (9510 <ultrasonic_init+0xf0>)
	callback->pin_mask = pin_mask;
    94d4:	e9c1 3601 	strd	r3, r6, [r1, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    94d8:	68a3      	ldr	r3, [r4, #8]
    94da:	69db      	ldr	r3, [r3, #28]
    94dc:	b11b      	cbz	r3, 94e6 <ultrasonic_init+0xc6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    94de:	463a      	mov	r2, r7
    94e0:	4620      	mov	r0, r4
    94e2:	4798      	blx	r3
	if (err)
    94e4:	b108      	cbz	r0, 94ea <ultrasonic_init+0xca>
		return 667;
    94e6:	f240 209b 	movw	r0, #667	; 0x29b
} /* ultrasonic_init */
    94ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 666;
    94ee:	f240 209a 	movw	r0, #666	; 0x29a
    94f2:	e7fa      	b.n	94ea <ultrasonic_init+0xca>
    94f4:	20009698 	.word	0x20009698
    94f8:	20009bb5 	.word	0x20009bb5
    94fc:	00020566 	.word	0x00020566
    9500:	00020535 	.word	0x00020535
    9504:	000205a4 	.word	0x000205a4
    9508:	000205c1 	.word	0x000205c1
    950c:	00009379 	.word	0x00009379
    9510:	20009678 	.word	0x20009678

00009514 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    9514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9518:	b095      	sub	sp, #84	; 0x54
    951a:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    951c:	4604      	mov	r4, r0
{
    951e:	e9c7 1208 	strd	r1, r2, [r7, #32]
    9522:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    9526:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
    9528:	b958      	cbnz	r0, 9542 <cbprintf_package_convert+0x2e>
    952a:	49aa      	ldr	r1, [pc, #680]	; (97d4 <cbprintf_package_convert+0x2c0>)
    952c:	f44f 7365 	mov.w	r3, #916	; 0x394
    9530:	4aa9      	ldr	r2, [pc, #676]	; (97d8 <cbprintf_package_convert+0x2c4>)
    9532:	48aa      	ldr	r0, [pc, #680]	; (97dc <cbprintf_package_convert+0x2c8>)
    9534:	f012 fc00 	bl	1bd38 <assert_print>
    9538:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    953c:	48a6      	ldr	r0, [pc, #664]	; (97d8 <cbprintf_package_convert+0x2c4>)
    953e:	f012 fbf4 	bl	1bd2a <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    9542:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    9546:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    9548:	6a3b      	ldr	r3, [r7, #32]
    954a:	b953      	cbnz	r3, 9562 <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    954c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    954e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    9550:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    9552:	6a3d      	ldr	r5, [r7, #32]
	buf += ros_nbr;
    9554:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9558:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    955a:	42ae      	cmp	r6, r5
    955c:	d81a      	bhi.n	9594 <cbprintf_package_convert+0x80>
	return (size_t)(uintptr_t)(buf - start);
    955e:	1b03      	subs	r3, r0, r4
    9560:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
    9562:	f894 9002 	ldrb.w	r9, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    9566:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    9568:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
    956a:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    956c:	f1b9 0f00 	cmp.w	r9, #0
    9570:	d002      	beq.n	9578 <cbprintf_package_convert+0x64>
    9572:	f01b 0f01 	tst.w	fp, #1
    9576:	d116      	bne.n	95a6 <cbprintf_package_convert+0x92>
	rw_cpy = rws_nbr > 0 &&
    9578:	697b      	ldr	r3, [r7, #20]
    957a:	bb53      	cbnz	r3, 95d2 <cbprintf_package_convert+0xbe>
		if (cb) {
    957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    957e:	b11b      	cbz	r3, 9588 <cbprintf_package_convert+0x74>
			cb(in_packaged, in_len, ctx);
    9580:	4620      	mov	r0, r4
    9582:	69ba      	ldr	r2, [r7, #24]
    9584:	6a39      	ldr	r1, [r7, #32]
    9586:	4798      	blx	r3
		return in_len;
    9588:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    958a:	4628      	mov	r0, r5
    958c:	3754      	adds	r7, #84	; 0x54
    958e:	46bd      	mov	sp, r7
    9590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    9594:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    9598:	4640      	mov	r0, r8
    959a:	f013 fb9d 	bl	1ccd8 <strlen>
    959e:	3001      	adds	r0, #1
    95a0:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    95a2:	3501      	adds	r5, #1
    95a4:	e7d9      	b.n	955a <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    95a6:	6863      	ldr	r3, [r4, #4]
    95a8:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    95ac:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    95ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    95b0:	ea4f 028a 	mov.w	r2, sl, lsl #2
    95b4:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    95b6:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    95ba:	2b00      	cmp	r3, #0
    95bc:	f040 8105 	bne.w	97ca <cbprintf_package_convert+0x2b6>
		out_len = (int)in_len;
    95c0:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
    95c2:	2600      	movs	r6, #0
		out_len = (int)in_len;
    95c4:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    95c6:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
    95ca:	4598      	cmp	r8, r3
    95cc:	d14e      	bne.n	966c <cbprintf_package_convert+0x158>
    95ce:	44ca      	add	sl, r9
    95d0:	e013      	b.n	95fa <cbprintf_package_convert+0xe6>
	rw_cpy = rws_nbr > 0 &&
    95d2:	f01b 0f02 	tst.w	fp, #2
    95d6:	d0d1      	beq.n	957c <cbprintf_package_convert+0x68>
	args_size = in_desc->len * sizeof(int);
    95d8:	f894 a000 	ldrb.w	sl, [r4]
    95dc:	ea4f 038a 	mov.w	r3, sl, lsl #2
    95e0:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    95e2:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    95e4:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    95e8:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    95ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95ec:	2b00      	cmp	r3, #0
    95ee:	d178      	bne.n	96e2 <cbprintf_package_convert+0x1ce>
		out_len = (int)in_len;
    95f0:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    95f2:	f1b9 0f00 	cmp.w	r9, #0
    95f6:	d14e      	bne.n	9696 <cbprintf_package_convert+0x182>
	size_t strl_cnt = 0;
    95f8:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    95fa:	f01b 0f05 	tst.w	fp, #5
    95fe:	bf0c      	ite	eq
    9600:	2302      	moveq	r3, #2
    9602:	2301      	movne	r3, #1
    9604:	627b      	str	r3, [r7, #36]	; 0x24
    9606:	697b      	ldr	r3, [r7, #20]
    9608:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    960c:	f00b 0302 	and.w	r3, fp, #2
    9610:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    9612:	45ca      	cmp	sl, r9
    9614:	d0b9      	beq.n	958a <cbprintf_package_convert+0x76>
			uint8_t arg_idx = *str_pos++;
    9616:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    961a:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    961e:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    9622:	4b6f      	ldr	r3, [pc, #444]	; (97e0 <cbprintf_package_convert+0x2cc>)
    9624:	4598      	cmp	r8, r3
    9626:	d302      	bcc.n	962e <cbprintf_package_convert+0x11a>
    9628:	4b6e      	ldr	r3, [pc, #440]	; (97e4 <cbprintf_package_convert+0x2d0>)
    962a:	4598      	cmp	r8, r3
    962c:	d339      	bcc.n	96a2 <cbprintf_package_convert+0x18e>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    962e:	693b      	ldr	r3, [r7, #16]
    9630:	2b00      	cmp	r3, #0
    9632:	d043      	beq.n	96bc <cbprintf_package_convert+0x1a8>
    9634:	69f8      	ldr	r0, [r7, #28]
    9636:	f012 f93d 	bl	1b8b4 <is_ptr>
    963a:	2800      	cmp	r0, #0
    963c:	d03e      	beq.n	96bc <cbprintf_package_convert+0x1a8>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    963e:	46e8      	mov	r8, sp
    9640:	b08a      	sub	sp, #40	; 0x28
    9642:	466a      	mov	r2, sp
    9644:	4b68      	ldr	r3, [pc, #416]	; (97e8 <cbprintf_package_convert+0x2d4>)
    9646:	6153      	str	r3, [r2, #20]
    9648:	69fb      	ldr	r3, [r7, #28]
    964a:	e9c2 3106 	strd	r3, r1, [r2, #24]
    964e:	f44f 7300 	mov.w	r3, #512	; 0x200
    9652:	8413      	strh	r3, [r2, #32]
    9654:	4b65      	ldr	r3, [pc, #404]	; (97ec <cbprintf_package_convert+0x2d8>)
    9656:	f842 3f10 	str.w	r3, [r2, #16]!
    965a:	2300      	movs	r3, #0
    965c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    9660:	4863      	ldr	r0, [pc, #396]	; (97f0 <cbprintf_package_convert+0x2dc>)
    9662:	f002 f8d1 	bl	b808 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    9666:	3d02      	subs	r5, #2
    9668:	46c5      	mov	sp, r8
				continue;
    966a:	e7d2      	b.n	9612 <cbprintf_package_convert+0xfe>
				const char *str = *(const char **)&buf32[*str_pos];
    966c:	f818 2b01 	ldrb.w	r2, [r8], #1
    9670:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    9672:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    9676:	f013 fb2f 	bl	1ccd8 <strlen>
				if (strl && strl_cnt < strl_len) {
    967a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    967e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    9680:	b13a      	cbz	r2, 9692 <cbprintf_package_convert+0x17e>
    9682:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    9686:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    9688:	bf3e      	ittt	cc
    968a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    968c:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    9690:	3601      	addcc	r6, #1
				out_len += len;
    9692:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    9694:	e799      	b.n	95ca <cbprintf_package_convert+0xb6>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9696:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    969a:	bf1c      	itt	ne
    969c:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    969e:	44ca      	addne	sl, r9
    96a0:	e7ab      	b.n	95fa <cbprintf_package_convert+0xe6>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    96a2:	693b      	ldr	r3, [r7, #16]
    96a4:	b123      	cbz	r3, 96b0 <cbprintf_package_convert+0x19c>
    96a6:	69f8      	ldr	r0, [r7, #28]
    96a8:	f012 f904 	bl	1b8b4 <is_ptr>
    96ac:	2800      	cmp	r0, #0
    96ae:	d1c6      	bne.n	963e <cbprintf_package_convert+0x12a>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    96b0:	f01b 0f01 	tst.w	fp, #1
    96b4:	d105      	bne.n	96c2 <cbprintf_package_convert+0x1ae>
					out_len -= drop_ro_str_pos ? 2 : 1;
    96b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    96b8:	1aed      	subs	r5, r5, r3
    96ba:	e7aa      	b.n	9612 <cbprintf_package_convert+0xfe>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    96bc:	6a3b      	ldr	r3, [r7, #32]
    96be:	2b00      	cmp	r3, #0
    96c0:	d0a7      	beq.n	9612 <cbprintf_package_convert+0xfe>
		return 1 + strlen(str);
    96c2:	4640      	mov	r0, r8
    96c4:	f013 fb08 	bl	1ccd8 <strlen>
				if (strl && strl_cnt < strl_len) {
    96c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    96ca:	b143      	cbz	r3, 96de <cbprintf_package_convert+0x1ca>
    96cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    96d0:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    96d2:	bf3f      	itttt	cc
    96d4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    96d6:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    96d8:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    96dc:	3601      	addcc	r6, #1
				out_len += (len - 1);
    96de:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    96e0:	e797      	b.n	9612 <cbprintf_package_convert+0xfe>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    96e2:	f1b9 0f00 	cmp.w	r9, #0
    96e6:	f000 8085 	beq.w	97f4 <cbprintf_package_convert+0x2e0>
    96ea:	f01b 0604 	ands.w	r6, fp, #4
    96ee:	f000 8084 	beq.w	97fa <cbprintf_package_convert+0x2e6>
		keep_cnt = ros_nbr;
    96f2:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    96f4:	2600      	movs	r6, #0
		dst = keep_str_pos;
    96f6:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    96fa:	464a      	mov	r2, r9
    96fc:	4651      	mov	r1, sl
    96fe:	f013 fb2a 	bl	1cd56 <memcpy>
	str_pos += ros_nbr;
    9702:	697b      	ldr	r3, [r7, #20]
    9704:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    9706:	005b      	lsls	r3, r3, #1
    9708:	60bb      	str	r3, [r7, #8]
    970a:	697b      	ldr	r3, [r7, #20]
    970c:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    9710:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9712:	f00b 0302 	and.w	r3, fp, #2
    9716:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    9718:	697b      	ldr	r3, [r7, #20]
    971a:	459a      	cmp	sl, r3
    971c:	d16f      	bne.n	97fe <cbprintf_package_convert+0x2ea>
	out_desc.len = in_desc->len;
    971e:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9720:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    9724:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    9726:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9728:	bf18      	it	ne
    972a:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    972c:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9730:	bf08      	it	eq
    9732:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9736:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    973a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    973c:	f040 80e2 	bne.w	9904 <cbprintf_package_convert+0x3f0>
    9740:	f01b 0f04 	tst.w	fp, #4
    9744:	bf14      	ite	ne
    9746:	4640      	movne	r0, r8
    9748:	2000      	moveq	r0, #0
    974a:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    974c:	78a3      	ldrb	r3, [r4, #2]
    974e:	f894 b003 	ldrb.w	fp, [r4, #3]
    9752:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    9754:	7062      	strb	r2, [r4, #1]
    9756:	70a0      	strb	r0, [r4, #2]
    9758:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    975a:	4620      	mov	r0, r4
    975c:	69ba      	ldr	r2, [r7, #24]
    975e:	68f9      	ldr	r1, [r7, #12]
    9760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9762:	4798      	blx	r3
	if (rv < 0) {
    9764:	1e05      	subs	r5, r0, #0
    9766:	f6ff af10 	blt.w	958a <cbprintf_package_convert+0x76>
	*in_desc = in_desc_backup;
    976a:	697b      	ldr	r3, [r7, #20]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    976c:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    976e:	7023      	strb	r3, [r4, #0]
    9770:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    9772:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    9774:	7063      	strb	r3, [r4, #1]
    9776:	69fb      	ldr	r3, [r7, #28]
    9778:	f884 b003 	strb.w	fp, [r4, #3]
    977c:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    977e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    9782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9784:	4798      	blx	r3
	if (rv < 0) {
    9786:	f1b0 0800 	subs.w	r8, r0, #0
    978a:	f2c0 80e8 	blt.w	995e <cbprintf_package_convert+0x44a>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    978e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    9790:	4650      	mov	r0, sl
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    9792:	eba3 0109 	sub.w	r1, r3, r9
    9796:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    9798:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    979a:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    979c:	68bb      	ldr	r3, [r7, #8]
    979e:	1ac9      	subs	r1, r1, r3
    97a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    97a2:	4798      	blx	r3
	if (rv < 0) {
    97a4:	2800      	cmp	r0, #0
    97a6:	f2c0 80dc 	blt.w	9962 <cbprintf_package_convert+0x44e>
	for (int i = 0; i < scpy_cnt; i++) {
    97aa:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    97ae:	44a8      	add	r8, r5
	out_len += rv;
    97b0:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    97b4:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    97b8:	45b3      	cmp	fp, r6
    97ba:	f2c0 80a5 	blt.w	9908 <cbprintf_package_convert+0x3f4>
	(void)cb(NULL, 0, ctx);
    97be:	2100      	movs	r1, #0
    97c0:	69ba      	ldr	r2, [r7, #24]
    97c2:	4608      	mov	r0, r1
    97c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    97c6:	4798      	blx	r3
	return out_len;
    97c8:	e6df      	b.n	958a <cbprintf_package_convert+0x76>
	if (cb == NULL) {
    97ca:	f04f 0800 	mov.w	r8, #0
    97ce:	f107 0030 	add.w	r0, r7, #48	; 0x30
    97d2:	e792      	b.n	96fa <cbprintf_package_convert+0x1e6>
    97d4:	00020668 	.word	0x00020668
    97d8:	000205d3 	.word	0x000205d3
    97dc:	000205a4 	.word	0x000205a4
    97e0:	0001f440 	.word	0x0001f440
    97e4:	000245fc 	.word	0x000245fc
    97e8:	00020683 	.word	0x00020683
    97ec:	01000004 	.word	0x01000004
    97f0:	0001f900 	.word	0x0001f900
		scpy_cnt = 0;
    97f4:	464e      	mov	r6, r9
		keep_cnt = 0;
    97f6:	46c8      	mov	r8, r9
    97f8:	e783      	b.n	9702 <cbprintf_package_convert+0x1ee>
    97fa:	46b0      	mov	r8, r6
    97fc:	e781      	b.n	9702 <cbprintf_package_convert+0x1ee>
		uint8_t arg_idx = *str_pos++;
    97fe:	f81a 1b02 	ldrb.w	r1, [sl], #2
    9802:	4b59      	ldr	r3, [pc, #356]	; (9968 <cbprintf_package_convert+0x454>)
		uint8_t arg_pos = *str_pos++;
    9804:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    9808:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    980c:	429a      	cmp	r2, r3
    980e:	d302      	bcc.n	9816 <cbprintf_package_convert+0x302>
    9810:	4b56      	ldr	r3, [pc, #344]	; (996c <cbprintf_package_convert+0x458>)
    9812:	429a      	cmp	r2, r3
    9814:	d316      	bcc.n	9844 <cbprintf_package_convert+0x330>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9816:	693b      	ldr	r3, [r7, #16]
    9818:	b12b      	cbz	r3, 9826 <cbprintf_package_convert+0x312>
    981a:	69f8      	ldr	r0, [r7, #28]
    981c:	f012 f84a 	bl	1b8b4 <is_ptr>
    9820:	2800      	cmp	r0, #0
    9822:	f47f af79 	bne.w	9718 <cbprintf_package_convert+0x204>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	2b00      	cmp	r3, #0
    982a:	d04a      	beq.n	98c2 <cbprintf_package_convert+0x3ae>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    982c:	2e0f      	cmp	r6, #15
    982e:	d93e      	bls.n	98ae <cbprintf_package_convert+0x39a>
    9830:	494f      	ldr	r1, [pc, #316]	; (9970 <cbprintf_package_convert+0x45c>)
    9832:	f44f 6389 	mov.w	r3, #1096	; 0x448
    9836:	4a4f      	ldr	r2, [pc, #316]	; (9974 <cbprintf_package_convert+0x460>)
    9838:	484f      	ldr	r0, [pc, #316]	; (9978 <cbprintf_package_convert+0x464>)
    983a:	f012 fa7d 	bl	1bd38 <assert_print>
    983e:	f44f 6189 	mov.w	r1, #1096	; 0x448
    9842:	e67b      	b.n	953c <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9844:	693b      	ldr	r3, [r7, #16]
    9846:	b12b      	cbz	r3, 9854 <cbprintf_package_convert+0x340>
    9848:	69f8      	ldr	r0, [r7, #28]
    984a:	f012 f833 	bl	1b8b4 <is_ptr>
    984e:	2800      	cmp	r0, #0
    9850:	f47f af62 	bne.w	9718 <cbprintf_package_convert+0x204>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    9854:	f01b 0f01 	tst.w	fp, #1
    9858:	d00b      	beq.n	9872 <cbprintf_package_convert+0x35e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    985a:	2e0f      	cmp	r6, #15
    985c:	d927      	bls.n	98ae <cbprintf_package_convert+0x39a>
    985e:	4944      	ldr	r1, [pc, #272]	; (9970 <cbprintf_package_convert+0x45c>)
    9860:	f240 433e 	movw	r3, #1086	; 0x43e
    9864:	4a43      	ldr	r2, [pc, #268]	; (9974 <cbprintf_package_convert+0x460>)
    9866:	4844      	ldr	r0, [pc, #272]	; (9978 <cbprintf_package_convert+0x464>)
    9868:	f012 fa66 	bl	1bd38 <assert_print>
    986c:	f240 413e 	movw	r1, #1086	; 0x43e
    9870:	e664      	b.n	953c <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9872:	f01b 0f04 	tst.w	fp, #4
    9876:	f43f af4f 	beq.w	9718 <cbprintf_package_convert+0x204>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    987a:	f1b8 0f0f 	cmp.w	r8, #15
    987e:	d909      	bls.n	9894 <cbprintf_package_convert+0x380>
    9880:	493e      	ldr	r1, [pc, #248]	; (997c <cbprintf_package_convert+0x468>)
    9882:	f240 4341 	movw	r3, #1089	; 0x441
    9886:	4a3b      	ldr	r2, [pc, #236]	; (9974 <cbprintf_package_convert+0x460>)
    9888:	483b      	ldr	r0, [pc, #236]	; (9978 <cbprintf_package_convert+0x464>)
    988a:	f012 fa55 	bl	1bd38 <assert_print>
    988e:	f240 4141 	movw	r1, #1089	; 0x441
    9892:	e653      	b.n	953c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    9894:	f108 0328 	add.w	r3, r8, #40	; 0x28
    9898:	f107 0128 	add.w	r1, r7, #40	; 0x28
    989c:	f108 0201 	add.w	r2, r8, #1
    98a0:	eb03 0801 	add.w	r8, r3, r1
    98a4:	f808 5c10 	strb.w	r5, [r8, #-16]
    98a8:	fa5f f882 	uxtb.w	r8, r2
    98ac:	e734      	b.n	9718 <cbprintf_package_convert+0x204>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    98ae:	f106 0328 	add.w	r3, r6, #40	; 0x28
    98b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
    98b6:	1c72      	adds	r2, r6, #1
    98b8:	185e      	adds	r6, r3, r1
    98ba:	f806 5c20 	strb.w	r5, [r6, #-32]
    98be:	b2d6      	uxtb	r6, r2
    98c0:	e72a      	b.n	9718 <cbprintf_package_convert+0x204>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    98c2:	f1b8 0f0f 	cmp.w	r8, #15
    98c6:	d909      	bls.n	98dc <cbprintf_package_convert+0x3c8>
    98c8:	492c      	ldr	r1, [pc, #176]	; (997c <cbprintf_package_convert+0x468>)
    98ca:	f240 434b 	movw	r3, #1099	; 0x44b
    98ce:	4a29      	ldr	r2, [pc, #164]	; (9974 <cbprintf_package_convert+0x460>)
    98d0:	4829      	ldr	r0, [pc, #164]	; (9978 <cbprintf_package_convert+0x464>)
    98d2:	f012 fa31 	bl	1bd38 <assert_print>
    98d6:	f240 414b 	movw	r1, #1099	; 0x44b
    98da:	e62f      	b.n	953c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    98dc:	f108 0328 	add.w	r3, r8, #40	; 0x28
    98e0:	f107 0028 	add.w	r0, r7, #40	; 0x28
    98e4:	f108 0201 	add.w	r2, r8, #1
    98e8:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
    98ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
    98ee:	f108 0802 	add.w	r8, r8, #2
    98f2:	fa53 f282 	uxtab	r2, r3, r2
				keep_str_pos[keep_cnt++] = arg_idx;
    98f6:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    98fa:	fa5f f888 	uxtb.w	r8, r8
    98fe:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    9902:	e709      	b.n	9718 <cbprintf_package_convert+0x204>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9904:	2000      	movs	r0, #0
    9906:	e720      	b.n	974a <cbprintf_package_convert+0x236>
		uint8_t loc = cpy_str_pos[i];
    9908:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    990c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    9910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    9914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9916:	b1fb      	cbz	r3, 9958 <cbprintf_package_convert+0x444>
    9918:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    991c:	2101      	movs	r1, #1
    991e:	69ba      	ldr	r2, [r7, #24]
    9920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9922:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    9926:	4798      	blx	r3
		if (rv < 0) {
    9928:	2800      	cmp	r0, #0
    992a:	db1a      	blt.n	9962 <cbprintf_package_convert+0x44e>
		out_len += rv;
    992c:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    992e:	f1b8 0f00 	cmp.w	r8, #0
    9932:	d106      	bne.n	9942 <cbprintf_package_convert+0x42e>
    9934:	4648      	mov	r0, r9
    9936:	f013 f9cf 	bl	1ccd8 <strlen>
    993a:	f100 0801 	add.w	r8, r0, #1
    993e:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    9942:	4641      	mov	r1, r8
    9944:	4648      	mov	r0, r9
    9946:	69ba      	ldr	r2, [r7, #24]
    9948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    994a:	4798      	blx	r3
		if (rv < 0) {
    994c:	2800      	cmp	r0, #0
    994e:	db08      	blt.n	9962 <cbprintf_package_convert+0x44e>
		out_len += rv;
    9950:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    9952:	f10b 0b01 	add.w	fp, fp, #1
    9956:	e72f      	b.n	97b8 <cbprintf_package_convert+0x2a4>
		uint16_t str_len = strl ? strl[i] : 0;
    9958:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    995c:	e7de      	b.n	991c <cbprintf_package_convert+0x408>
    995e:	4645      	mov	r5, r8
    9960:	e613      	b.n	958a <cbprintf_package_convert+0x76>
    9962:	4605      	mov	r5, r0
    9964:	e611      	b.n	958a <cbprintf_package_convert+0x76>
    9966:	bf00      	nop
    9968:	0001f440 	.word	0x0001f440
    996c:	000245fc 	.word	0x000245fc
    9970:	00020726 	.word	0x00020726
    9974:	000205d3 	.word	0x000205d3
    9978:	000205a4 	.word	0x000205a4
    997c:	00020745 	.word	0x00020745

00009980 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    9980:	4b01      	ldr	r3, [pc, #4]	; (9988 <char_out+0x8>)
    9982:	681b      	ldr	r3, [r3, #0]
    9984:	4718      	bx	r3
    9986:	bf00      	nop
    9988:	20008180 	.word	0x20008180

0000998c <__printk_hook_install>:
	_char_out = fn;
    998c:	4b01      	ldr	r3, [pc, #4]	; (9994 <__printk_hook_install+0x8>)
    998e:	6018      	str	r0, [r3, #0]
}
    9990:	4770      	bx	lr
    9992:	bf00      	nop
    9994:	20008180 	.word	0x20008180

00009998 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    9998:	b507      	push	{r0, r1, r2, lr}
    999a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    999c:	2100      	movs	r1, #0
    999e:	4602      	mov	r2, r0
    99a0:	9100      	str	r1, [sp, #0]
    99a2:	4803      	ldr	r0, [pc, #12]	; (99b0 <vprintk+0x18>)
    99a4:	f000 fc38 	bl	a218 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    99a8:	b003      	add	sp, #12
    99aa:	f85d fb04 	ldr.w	pc, [sp], #4
    99ae:	bf00      	nop
    99b0:	00009981 	.word	0x00009981

000099b4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    99b4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    99b6:	2500      	movs	r5, #0
{
    99b8:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    99ba:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    99be:	4604      	mov	r4, r0
    99c0:	9500      	str	r5, [sp, #0]
    99c2:	a903      	add	r1, sp, #12
    99c4:	4805      	ldr	r0, [pc, #20]	; (99dc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    99c6:	9505      	str	r5, [sp, #20]
    99c8:	f000 fc26 	bl	a218 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    99cc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    99d0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    99d2:	bfb8      	it	lt
    99d4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    99d6:	b007      	add	sp, #28
    99d8:	bd30      	pop	{r4, r5, pc}
    99da:	bf00      	nop
    99dc:	0001b903 	.word	0x0001b903

000099e0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    99e0:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    99e2:	460c      	mov	r4, r1
    99e4:	2900      	cmp	r1, #0
    99e6:	d034      	beq.n	9a52 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    99e8:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    99ea:	1f0b      	subs	r3, r1, #4
    99ec:	1a9b      	subs	r3, r3, r2
    99ee:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    99f0:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    99f4:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    99f6:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    99f8:	07e8      	lsls	r0, r5, #31
    99fa:	d40d      	bmi.n	9a18 <sys_heap_free+0x38>
    99fc:	23af      	movs	r3, #175	; 0xaf
    99fe:	4a15      	ldr	r2, [pc, #84]	; (9a54 <sys_heap_free+0x74>)
    9a00:	4915      	ldr	r1, [pc, #84]	; (9a58 <sys_heap_free+0x78>)
    9a02:	4816      	ldr	r0, [pc, #88]	; (9a5c <sys_heap_free+0x7c>)
    9a04:	f012 f998 	bl	1bd38 <assert_print>
    9a08:	4621      	mov	r1, r4
    9a0a:	4815      	ldr	r0, [pc, #84]	; (9a60 <sys_heap_free+0x80>)
    9a0c:	f012 f994 	bl	1bd38 <assert_print>
    9a10:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    9a12:	4810      	ldr	r0, [pc, #64]	; (9a54 <sys_heap_free+0x74>)
    9a14:	f012 f989 	bl	1bd2a <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    9a18:	4610      	mov	r0, r2
    9a1a:	f011 ffa9 	bl	1b970 <chunk_size>
    9a1e:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    9a20:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9a24:	1b80      	subs	r0, r0, r6
    9a26:	4281      	cmp	r1, r0
    9a28:	d00b      	beq.n	9a42 <sys_heap_free+0x62>
    9a2a:	23b7      	movs	r3, #183	; 0xb7
    9a2c:	4a09      	ldr	r2, [pc, #36]	; (9a54 <sys_heap_free+0x74>)
    9a2e:	490d      	ldr	r1, [pc, #52]	; (9a64 <sys_heap_free+0x84>)
    9a30:	480a      	ldr	r0, [pc, #40]	; (9a5c <sys_heap_free+0x7c>)
    9a32:	f012 f981 	bl	1bd38 <assert_print>
    9a36:	4621      	mov	r1, r4
    9a38:	480b      	ldr	r0, [pc, #44]	; (9a68 <sys_heap_free+0x88>)
    9a3a:	f012 f97d 	bl	1bd38 <assert_print>
    9a3e:	21b7      	movs	r1, #183	; 0xb7
    9a40:	e7e7      	b.n	9a12 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9a42:	f025 0501 	bic.w	r5, r5, #1
    9a46:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    9a48:	4610      	mov	r0, r2
}
    9a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    9a4e:	f012 b84c 	b.w	1baea <free_chunk>
}
    9a52:	bd70      	pop	{r4, r5, r6, pc}
    9a54:	00020776 	.word	0x00020776
    9a58:	00020797 	.word	0x00020797
    9a5c:	000205a4 	.word	0x000205a4
    9a60:	000207a8 	.word	0x000207a8
    9a64:	000207e0 	.word	0x000207e0
    9a68:	00020806 	.word	0x00020806

00009a6c <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    9a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a70:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    9a72:	400b      	ands	r3, r1
{
    9a74:	460f      	mov	r7, r1
    9a76:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    9a78:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    9a7a:	d010      	beq.n	9a9e <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    9a7c:	f1c1 0900 	rsb	r9, r1, #0
    9a80:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    9a84:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    9a86:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    9a88:	2a04      	cmp	r2, #4
    9a8a:	bf28      	it	cs
    9a8c:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    9a8e:	4219      	tst	r1, r3
    9a90:	d10c      	bne.n	9aac <sys_heap_aligned_alloc+0x40>
    9a92:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    9a94:	b9e4      	cbnz	r4, 9ad0 <sys_heap_aligned_alloc+0x64>
		return NULL;
    9a96:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    9a98:	4628      	mov	r0, r5
    9a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    9a9e:	2904      	cmp	r1, #4
    9aa0:	d813      	bhi.n	9aca <sys_heap_aligned_alloc+0x5e>
}
    9aa2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    9aa6:	4611      	mov	r1, r2
    9aa8:	f012 b850 	b.w	1bb4c <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    9aac:	492c      	ldr	r1, [pc, #176]	; (9b60 <sys_heap_aligned_alloc+0xf4>)
    9aae:	f44f 73a2 	mov.w	r3, #324	; 0x144
    9ab2:	4a2c      	ldr	r2, [pc, #176]	; (9b64 <sys_heap_aligned_alloc+0xf8>)
    9ab4:	482c      	ldr	r0, [pc, #176]	; (9b68 <sys_heap_aligned_alloc+0xfc>)
    9ab6:	f012 f93f 	bl	1bd38 <assert_print>
    9aba:	482c      	ldr	r0, [pc, #176]	; (9b6c <sys_heap_aligned_alloc+0x100>)
    9abc:	f012 f93c 	bl	1bd38 <assert_print>
    9ac0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    9ac4:	4827      	ldr	r0, [pc, #156]	; (9b64 <sys_heap_aligned_alloc+0xf8>)
    9ac6:	f012 f930 	bl	1bd2a <assert_post_action>
		rew = 0;
    9aca:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    9acc:	2204      	movs	r2, #4
    9ace:	e7e1      	b.n	9a94 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    9ad0:	68b3      	ldr	r3, [r6, #8]
    9ad2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    9ad6:	d9de      	bls.n	9a96 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9ad8:	f104 010b 	add.w	r1, r4, #11
    9adc:	4439      	add	r1, r7
    9ade:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    9ae0:	4630      	mov	r0, r6
    9ae2:	08c9      	lsrs	r1, r1, #3
    9ae4:	f011 ff9a 	bl	1ba1c <alloc_chunk>
	if (c0 == 0) {
    9ae8:	4680      	mov	r8, r0
    9aea:	2800      	cmp	r0, #0
    9aec:	d0d3      	beq.n	9a96 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    9aee:	f109 0504 	add.w	r5, r9, #4
    9af2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    9af6:	1e7b      	subs	r3, r7, #1
    9af8:	4435      	add	r5, r6
    9afa:	441d      	add	r5, r3
    9afc:	427f      	negs	r7, r7
    9afe:	403d      	ands	r5, r7
    9b00:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9b04:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9b06:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9b08:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9b0a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9b0c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9b10:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9b12:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9b16:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    9b1a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9b1e:	d208      	bcs.n	9b32 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    9b20:	4601      	mov	r1, r0
    9b22:	463a      	mov	r2, r7
    9b24:	4630      	mov	r0, r6
    9b26:	f011 ffc6 	bl	1bab6 <split_chunks>
		free_list_add(h, c0);
    9b2a:	4641      	mov	r1, r8
    9b2c:	4630      	mov	r0, r6
    9b2e:	f011 ff24 	bl	1b97a <free_list_add>
	return c + chunk_size(h, c);
    9b32:	4639      	mov	r1, r7
    9b34:	4630      	mov	r0, r6
    9b36:	f011 ff1b 	bl	1b970 <chunk_size>
    9b3a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    9b3c:	4284      	cmp	r4, r0
    9b3e:	d207      	bcs.n	9b50 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    9b40:	4630      	mov	r0, r6
    9b42:	4622      	mov	r2, r4
    9b44:	f011 ffb7 	bl	1bab6 <split_chunks>
		free_list_add(h, c_end);
    9b48:	4621      	mov	r1, r4
    9b4a:	4630      	mov	r0, r6
    9b4c:	f011 ff15 	bl	1b97a <free_list_add>
	void *cmem = &buf[c];
    9b50:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9b54:	8873      	ldrh	r3, [r6, #2]
    9b56:	f043 0301 	orr.w	r3, r3, #1
    9b5a:	8073      	strh	r3, [r6, #2]
    9b5c:	e79c      	b.n	9a98 <sys_heap_aligned_alloc+0x2c>
    9b5e:	bf00      	nop
    9b60:	00020842 	.word	0x00020842
    9b64:	00020776 	.word	0x00020776
    9b68:	000205a4 	.word	0x000205a4
    9b6c:	0002085d 	.word	0x0002085d

00009b70 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    9b70:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    9b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b76:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    9b78:	d30e      	bcc.n	9b98 <sys_heap_init+0x28>
    9b7a:	493a      	ldr	r1, [pc, #232]	; (9c64 <sys_heap_init+0xf4>)
    9b7c:	f240 13eb 	movw	r3, #491	; 0x1eb
    9b80:	4a39      	ldr	r2, [pc, #228]	; (9c68 <sys_heap_init+0xf8>)
    9b82:	483a      	ldr	r0, [pc, #232]	; (9c6c <sys_heap_init+0xfc>)
    9b84:	f012 f8d8 	bl	1bd38 <assert_print>
    9b88:	4839      	ldr	r0, [pc, #228]	; (9c70 <sys_heap_init+0x100>)
    9b8a:	f012 f8d5 	bl	1bd38 <assert_print>
    9b8e:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    9b92:	4835      	ldr	r0, [pc, #212]	; (9c68 <sys_heap_init+0xf8>)
    9b94:	f012 f8c9 	bl	1bd2a <assert_post_action>
    9b98:	2a04      	cmp	r2, #4
    9b9a:	d80c      	bhi.n	9bb6 <sys_heap_init+0x46>
    9b9c:	4935      	ldr	r1, [pc, #212]	; (9c74 <sys_heap_init+0x104>)
    9b9e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    9ba2:	4a31      	ldr	r2, [pc, #196]	; (9c68 <sys_heap_init+0xf8>)
    9ba4:	4831      	ldr	r0, [pc, #196]	; (9c6c <sys_heap_init+0xfc>)
    9ba6:	f012 f8c7 	bl	1bd38 <assert_print>
    9baa:	4833      	ldr	r0, [pc, #204]	; (9c78 <sys_heap_init+0x108>)
    9bac:	f012 f8c4 	bl	1bd38 <assert_print>
    9bb0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    9bb4:	e7ed      	b.n	9b92 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    9bb6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9bb8:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9bba:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9bbc:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9bc0:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    9bc4:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    9bc6:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    9bc8:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    9bcc:	d80c      	bhi.n	9be8 <sys_heap_init+0x78>
    9bce:	492b      	ldr	r1, [pc, #172]	; (9c7c <sys_heap_init+0x10c>)
    9bd0:	f240 13fb 	movw	r3, #507	; 0x1fb
    9bd4:	4a24      	ldr	r2, [pc, #144]	; (9c68 <sys_heap_init+0xf8>)
    9bd6:	4825      	ldr	r0, [pc, #148]	; (9c6c <sys_heap_init+0xfc>)
    9bd8:	f012 f8ae 	bl	1bd38 <assert_print>
    9bdc:	4826      	ldr	r0, [pc, #152]	; (9c78 <sys_heap_init+0x108>)
    9bde:	f012 f8ab 	bl	1bd38 <assert_print>
    9be2:	f240 11fb 	movw	r1, #507	; 0x1fb
    9be6:	e7d4      	b.n	9b92 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    9be8:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    9bec:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    9bee:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    9bf0:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    9bf4:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    9bf8:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9bfa:	3107      	adds	r1, #7
    9bfc:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    9bfe:	1c4d      	adds	r5, r1, #1
    9c00:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    9c02:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    9c04:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    9c06:	d90c      	bls.n	9c22 <sys_heap_init+0xb2>
    9c08:	491d      	ldr	r1, [pc, #116]	; (9c80 <sys_heap_init+0x110>)
    9c0a:	f44f 7303 	mov.w	r3, #524	; 0x20c
    9c0e:	4a16      	ldr	r2, [pc, #88]	; (9c68 <sys_heap_init+0xf8>)
    9c10:	4816      	ldr	r0, [pc, #88]	; (9c6c <sys_heap_init+0xfc>)
    9c12:	f012 f891 	bl	1bd38 <assert_print>
    9c16:	4818      	ldr	r0, [pc, #96]	; (9c78 <sys_heap_init+0x108>)
    9c18:	f012 f88e 	bl	1bd38 <assert_print>
    9c1c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    9c20:	e7b7      	b.n	9b92 <sys_heap_init+0x22>
    9c22:	f100 050c 	add.w	r5, r0, #12
    9c26:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    9c2a:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    9c2e:	42b5      	cmp	r5, r6
    9c30:	d1fb      	bne.n	9c2a <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9c32:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9c34:	f045 0501 	orr.w	r5, r5, #1
    9c38:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    9c3a:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    9c3c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9c40:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    9c42:	8004      	strh	r4, [r0, #0]
    9c44:	8077      	strh	r7, [r6, #2]
    9c46:	1886      	adds	r6, r0, r2
    9c48:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    9c4c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    9c50:	8074      	strh	r4, [r6, #2]
    9c52:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9c54:	885a      	ldrh	r2, [r3, #2]
    9c56:	f042 0201 	orr.w	r2, r2, #1
    9c5a:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    9c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    9c60:	f011 be8b 	b.w	1b97a <free_list_add>
    9c64:	0002087a 	.word	0x0002087a
    9c68:	00020776 	.word	0x00020776
    9c6c:	000205a4 	.word	0x000205a4
    9c70:	00020890 	.word	0x00020890
    9c74:	000208a7 	.word	0x000208a7
    9c78:	000208c8 	.word	0x000208c8
    9c7c:	000208e1 	.word	0x000208e1
    9c80:	0002090a 	.word	0x0002090a

00009c84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c88:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9c8a:	8ba3      	ldrh	r3, [r4, #28]
{
    9c8c:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9c8e:	0719      	lsls	r1, r3, #28
{
    9c90:	4615      	mov	r5, r2
	if (processing) {
    9c92:	d412      	bmi.n	9cba <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    9c94:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9c96:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    9c9a:	d164      	bne.n	9d66 <process_event+0xe2>
			evt = process_recheck(mgr);
    9c9c:	4620      	mov	r0, r4
    9c9e:	f011 ff7e 	bl	1bb9e <process_recheck>
		}

		if (evt == EVT_NOP) {
    9ca2:	b188      	cbz	r0, 9cc8 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    9ca4:	3801      	subs	r0, #1
    9ca6:	2804      	cmp	r0, #4
    9ca8:	f200 8134 	bhi.w	9f14 <process_event+0x290>
    9cac:	e8df f010 	tbh	[pc, r0, lsl #1]
    9cb0:	0132005b 	.word	0x0132005b
    9cb4:	00d10081 	.word	0x00d10081
    9cb8:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    9cba:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9cbc:	bf0c      	ite	eq
    9cbe:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9cc2:	f043 0120 	orrne.w	r1, r3, #32
    9cc6:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    9cc8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9cca:	4620      	mov	r0, r4
    9ccc:	f00e fa80 	bl	181d0 <z_spin_unlock_valid>
    9cd0:	2800      	cmp	r0, #0
    9cd2:	f040 819b 	bne.w	a00c <process_event+0x388>
    9cd6:	4998      	ldr	r1, [pc, #608]	; (9f38 <process_event+0x2b4>)
    9cd8:	23c2      	movs	r3, #194	; 0xc2
    9cda:	4a98      	ldr	r2, [pc, #608]	; (9f3c <process_event+0x2b8>)
    9cdc:	4898      	ldr	r0, [pc, #608]	; (9f40 <process_event+0x2bc>)
    9cde:	f012 f82b 	bl	1bd38 <assert_print>
    9ce2:	4621      	mov	r1, r4
    9ce4:	e0b0      	b.n	9e48 <process_event+0x1c4>
    9ce6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9cea:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9cec:	2801      	cmp	r0, #1
    9cee:	d81e      	bhi.n	9d2e <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    9cf0:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    9cf2:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    9cf4:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    9cf6:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9cfa:	d114      	bne.n	9d26 <process_event+0xa2>
		*clients = mgr->clients;
    9cfc:	463a      	mov	r2, r7
    9cfe:	e003      	b.n	9d08 <process_event+0x84>
				mgr->refs += 1U;
    9d00:	8be0      	ldrh	r0, [r4, #30]
    9d02:	3001      	adds	r0, #1
    9d04:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    9d06:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9d08:	2a00      	cmp	r2, #0
    9d0a:	d1f9      	bne.n	9d00 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9d0c:	f023 0307 	bic.w	r3, r3, #7
    9d10:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    9d14:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9d16:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9d18:	f011 ff41 	bl	1bb9e <process_recheck>
    9d1c:	b390      	cbz	r0, 9d84 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9d1e:	f042 0220 	orr.w	r2, r2, #32
    9d22:	83a2      	strh	r2, [r4, #28]
    9d24:	e02e      	b.n	9d84 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9d26:	f023 0307 	bic.w	r3, r3, #7
    9d2a:	b29a      	uxth	r2, r3
}
    9d2c:	e7f2      	b.n	9d14 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9d2e:	2a04      	cmp	r2, #4
    9d30:	d133      	bne.n	9d9a <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9d32:	f023 0307 	bic.w	r3, r3, #7
    9d36:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    9d38:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9d3a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9d3c:	f011 ff2f 	bl	1bb9e <process_recheck>
    9d40:	b110      	cbz	r0, 9d48 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9d42:	f042 0220 	orr.w	r2, r2, #32
    9d46:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9d48:	8ba3      	ldrh	r3, [r4, #28]
    9d4a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9d4e:	4589      	cmp	r9, r1
    9d50:	f040 80ea 	bne.w	9f28 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9d54:	8ba1      	ldrh	r1, [r4, #28]
    9d56:	06ca      	lsls	r2, r1, #27
    9d58:	f140 814f 	bpl.w	9ffa <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9d5c:	f021 0310 	bic.w	r3, r1, #16
    9d60:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    9d62:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    9d66:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9d6a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    9d6c:	f1b8 0f00 	cmp.w	r8, #0
    9d70:	dab9      	bge.n	9ce6 <process_event+0x62>
	list->head = NULL;
    9d72:	2200      	movs	r2, #0
		*clients = mgr->clients;
    9d74:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9d76:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    9d7a:	e9c4 2200 	strd	r2, r2, [r4]
    9d7e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9d82:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9d84:	8ba3      	ldrh	r3, [r4, #28]
    9d86:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9d8a:	4589      	cmp	r9, r1
    9d8c:	f040 80cd 	bne.w	9f2a <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    9d90:	2f00      	cmp	r7, #0
    9d92:	d0df      	beq.n	9d54 <process_event+0xd0>
    9d94:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9d96:	46b2      	mov	sl, r6
    9d98:	e044      	b.n	9e24 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    9d9a:	496a      	ldr	r1, [pc, #424]	; (9f44 <process_event+0x2c0>)
    9d9c:	f240 131b 	movw	r3, #283	; 0x11b
    9da0:	4a69      	ldr	r2, [pc, #420]	; (9f48 <process_event+0x2c4>)
    9da2:	4867      	ldr	r0, [pc, #412]	; (9f40 <process_event+0x2bc>)
    9da4:	f011 ffc8 	bl	1bd38 <assert_print>
    9da8:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    9dac:	4866      	ldr	r0, [pc, #408]	; (9f48 <process_event+0x2c4>)
    9dae:	f011 ffbc 	bl	1bd2a <assert_post_action>
    9db2:	b149      	cbz	r1, 9dc8 <process_event+0x144>
    9db4:	4965      	ldr	r1, [pc, #404]	; (9f4c <process_event+0x2c8>)
    9db6:	f44f 73ab 	mov.w	r3, #342	; 0x156
    9dba:	4a63      	ldr	r2, [pc, #396]	; (9f48 <process_event+0x2c4>)
    9dbc:	4860      	ldr	r0, [pc, #384]	; (9f40 <process_event+0x2bc>)
    9dbe:	f011 ffbb 	bl	1bd38 <assert_print>
    9dc2:	f44f 71ab 	mov.w	r1, #342	; 0x156
    9dc6:	e7f1      	b.n	9dac <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9dc8:	6823      	ldr	r3, [r4, #0]
    9dca:	b94b      	cbnz	r3, 9de0 <process_event+0x15c>
    9dcc:	4960      	ldr	r1, [pc, #384]	; (9f50 <process_event+0x2cc>)
    9dce:	f240 1357 	movw	r3, #343	; 0x157
    9dd2:	4a5d      	ldr	r2, [pc, #372]	; (9f48 <process_event+0x2c4>)
    9dd4:	485a      	ldr	r0, [pc, #360]	; (9f40 <process_event+0x2bc>)
    9dd6:	f011 ffaf 	bl	1bd38 <assert_print>
    9dda:	f240 1157 	movw	r1, #343	; 0x157
    9dde:	e7e5      	b.n	9dac <process_event+0x128>
			transit = mgr->transitions->start;
    9de0:	6923      	ldr	r3, [r4, #16]
    9de2:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    9de4:	b94e      	cbnz	r6, 9dfa <process_event+0x176>
    9de6:	495b      	ldr	r1, [pc, #364]	; (9f54 <process_event+0x2d0>)
    9de8:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    9dec:	4a56      	ldr	r2, [pc, #344]	; (9f48 <process_event+0x2c4>)
    9dee:	4854      	ldr	r0, [pc, #336]	; (9f40 <process_event+0x2bc>)
    9df0:	f011 ffa2 	bl	1bd38 <assert_print>
    9df4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    9df8:	e7d8      	b.n	9dac <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    9dfa:	460f      	mov	r7, r1
		res = 0;
    9dfc:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9dfe:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9e02:	8ba3      	ldrh	r3, [r4, #28]
    9e04:	f023 0307 	bic.w	r3, r3, #7
    9e08:	f043 0306 	orr.w	r3, r3, #6
    9e0c:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    9e0e:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    9e10:	68a2      	ldr	r2, [r4, #8]
    9e12:	2a00      	cmp	r2, #0
    9e14:	f040 808b 	bne.w	9f2e <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    9e18:	2f00      	cmp	r7, #0
    9e1a:	f040 808b 	bne.w	9f34 <process_event+0x2b0>
		    || (transit != NULL)) {
    9e1e:	2e00      	cmp	r6, #0
    9e20:	d098      	beq.n	9d54 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9e22:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9e24:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    9e28:	f104 0b14 	add.w	fp, r4, #20
    9e2c:	4658      	mov	r0, fp
			mgr->flags = flags;
    9e2e:	83a3      	strh	r3, [r4, #28]
    9e30:	f00e f9ce 	bl	181d0 <z_spin_unlock_valid>
    9e34:	2800      	cmp	r0, #0
    9e36:	f040 8097 	bne.w	9f68 <process_event+0x2e4>
    9e3a:	493f      	ldr	r1, [pc, #252]	; (9f38 <process_event+0x2b4>)
    9e3c:	23c2      	movs	r3, #194	; 0xc2
    9e3e:	4a3f      	ldr	r2, [pc, #252]	; (9f3c <process_event+0x2b8>)
    9e40:	483f      	ldr	r0, [pc, #252]	; (9f40 <process_event+0x2bc>)
    9e42:	f011 ff79 	bl	1bd38 <assert_print>
    9e46:	4659      	mov	r1, fp
    9e48:	4843      	ldr	r0, [pc, #268]	; (9f58 <process_event+0x2d4>)
    9e4a:	f011 ff75 	bl	1bd38 <assert_print>
    9e4e:	21c2      	movs	r1, #194	; 0xc2
    9e50:	e0ae      	b.n	9fb0 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    9e52:	2902      	cmp	r1, #2
    9e54:	d009      	beq.n	9e6a <process_event+0x1e6>
    9e56:	4941      	ldr	r1, [pc, #260]	; (9f5c <process_event+0x2d8>)
    9e58:	f240 135d 	movw	r3, #349	; 0x15d
    9e5c:	4a3a      	ldr	r2, [pc, #232]	; (9f48 <process_event+0x2c4>)
    9e5e:	4838      	ldr	r0, [pc, #224]	; (9f40 <process_event+0x2bc>)
    9e60:	f011 ff6a 	bl	1bd38 <assert_print>
    9e64:	f240 115d 	movw	r1, #349	; 0x15d
    9e68:	e7a0      	b.n	9dac <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    9e6a:	8be7      	ldrh	r7, [r4, #30]
    9e6c:	b14f      	cbz	r7, 9e82 <process_event+0x1fe>
    9e6e:	493c      	ldr	r1, [pc, #240]	; (9f60 <process_event+0x2dc>)
    9e70:	f44f 73af 	mov.w	r3, #350	; 0x15e
    9e74:	4a34      	ldr	r2, [pc, #208]	; (9f48 <process_event+0x2c4>)
    9e76:	4832      	ldr	r0, [pc, #200]	; (9f40 <process_event+0x2bc>)
    9e78:	f011 ff5e 	bl	1bd38 <assert_print>
    9e7c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    9e80:	e794      	b.n	9dac <process_event+0x128>
			transit = mgr->transitions->stop;
    9e82:	6923      	ldr	r3, [r4, #16]
    9e84:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    9e86:	b94e      	cbnz	r6, 9e9c <process_event+0x218>
    9e88:	4932      	ldr	r1, [pc, #200]	; (9f54 <process_event+0x2d0>)
    9e8a:	f240 1361 	movw	r3, #353	; 0x161
    9e8e:	4a2e      	ldr	r2, [pc, #184]	; (9f48 <process_event+0x2c4>)
    9e90:	482b      	ldr	r0, [pc, #172]	; (9f40 <process_event+0x2bc>)
    9e92:	f011 ff51 	bl	1bd38 <assert_print>
    9e96:	f240 1161 	movw	r1, #353	; 0x161
    9e9a:	e787      	b.n	9dac <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9e9c:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    9e9e:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ea0:	f023 0307 	bic.w	r3, r3, #7
    9ea4:	f043 0304 	orr.w	r3, r3, #4
    9ea8:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9eaa:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9eae:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9eb0:	e7ae      	b.n	9e10 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    9eb2:	2901      	cmp	r1, #1
    9eb4:	d009      	beq.n	9eca <process_event+0x246>
    9eb6:	492b      	ldr	r1, [pc, #172]	; (9f64 <process_event+0x2e0>)
    9eb8:	f44f 73b2 	mov.w	r3, #356	; 0x164
    9ebc:	4a22      	ldr	r2, [pc, #136]	; (9f48 <process_event+0x2c4>)
    9ebe:	4820      	ldr	r0, [pc, #128]	; (9f40 <process_event+0x2bc>)
    9ec0:	f011 ff3a 	bl	1bd38 <assert_print>
    9ec4:	f44f 71b2 	mov.w	r1, #356	; 0x164
    9ec8:	e770      	b.n	9dac <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9eca:	6823      	ldr	r3, [r4, #0]
    9ecc:	b94b      	cbnz	r3, 9ee2 <process_event+0x25e>
    9ece:	4920      	ldr	r1, [pc, #128]	; (9f50 <process_event+0x2cc>)
    9ed0:	f240 1365 	movw	r3, #357	; 0x165
    9ed4:	4a1c      	ldr	r2, [pc, #112]	; (9f48 <process_event+0x2c4>)
    9ed6:	481a      	ldr	r0, [pc, #104]	; (9f40 <process_event+0x2bc>)
    9ed8:	f011 ff2e 	bl	1bd38 <assert_print>
    9edc:	f240 1165 	movw	r1, #357	; 0x165
    9ee0:	e764      	b.n	9dac <process_event+0x128>
			transit = mgr->transitions->reset;
    9ee2:	6923      	ldr	r3, [r4, #16]
    9ee4:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    9ee6:	b94e      	cbnz	r6, 9efc <process_event+0x278>
    9ee8:	491a      	ldr	r1, [pc, #104]	; (9f54 <process_event+0x2d0>)
    9eea:	f44f 73b4 	mov.w	r3, #360	; 0x168
    9eee:	4a16      	ldr	r2, [pc, #88]	; (9f48 <process_event+0x2c4>)
    9ef0:	4813      	ldr	r0, [pc, #76]	; (9f40 <process_event+0x2bc>)
    9ef2:	f011 ff21 	bl	1bd38 <assert_print>
    9ef6:	f44f 71b4 	mov.w	r1, #360	; 0x168
    9efa:	e757      	b.n	9dac <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    9efc:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9efe:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    9f00:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f02:	f023 0307 	bic.w	r3, r3, #7
    9f06:	f043 0305 	orr.w	r3, r3, #5
    9f0a:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f0c:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    9f10:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f12:	e77d      	b.n	9e10 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    9f14:	490b      	ldr	r1, [pc, #44]	; (9f44 <process_event+0x2c0>)
    9f16:	f240 136b 	movw	r3, #363	; 0x16b
    9f1a:	4a0b      	ldr	r2, [pc, #44]	; (9f48 <process_event+0x2c4>)
    9f1c:	4808      	ldr	r0, [pc, #32]	; (9f40 <process_event+0x2bc>)
    9f1e:	f011 ff0b 	bl	1bd38 <assert_print>
    9f22:	f240 116b 	movw	r1, #363	; 0x16b
    9f26:	e741      	b.n	9dac <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    9f28:	2700      	movs	r7, #0
    9f2a:	2600      	movs	r6, #0
    9f2c:	e770      	b.n	9e10 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f2e:	f04f 0a01 	mov.w	sl, #1
    9f32:	e777      	b.n	9e24 <process_event+0x1a0>
    9f34:	4692      	mov	sl, r2
    9f36:	e775      	b.n	9e24 <process_event+0x1a0>
    9f38:	00020a05 	.word	0x00020a05
    9f3c:	000209d8 	.word	0x000209d8
    9f40:	000205a4 	.word	0x000205a4
    9f44:	0002357e 	.word	0x0002357e
    9f48:	00020935 	.word	0x00020935
    9f4c:	00020957 	.word	0x00020957
    9f50:	00020963 	.word	0x00020963
    9f54:	00020986 	.word	0x00020986
    9f58:	00020a1c 	.word	0x00020a1c
    9f5c:	0002099d 	.word	0x0002099d
    9f60:	000209b3 	.word	0x000209b3
    9f64:	000209c2 	.word	0x000209c2
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9f68:	f385 8811 	msr	BASEPRI, r5
    9f6c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    9f70:	f1ba 0f00 	cmp.w	sl, #0
    9f74:	d11e      	bne.n	9fb4 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    9f76:	2f00      	cmp	r7, #0
    9f78:	d12f      	bne.n	9fda <process_event+0x356>
			if (transit != NULL) {
    9f7a:	b116      	cbz	r6, 9f82 <process_event+0x2fe>
				transit(mgr, transition_complete);
    9f7c:	4620      	mov	r0, r4
    9f7e:	4926      	ldr	r1, [pc, #152]	; (a018 <process_event+0x394>)
    9f80:	47b0      	blx	r6
	__asm__ volatile(
    9f82:	f04f 0320 	mov.w	r3, #32
    9f86:	f3ef 8511 	mrs	r5, BASEPRI
    9f8a:	f383 8812 	msr	BASEPRI_MAX, r3
    9f8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f92:	4658      	mov	r0, fp
    9f94:	f00e f90e 	bl	181b4 <z_spin_lock_valid>
    9f98:	bb38      	cbnz	r0, 9fea <process_event+0x366>
    9f9a:	2394      	movs	r3, #148	; 0x94
    9f9c:	4a1f      	ldr	r2, [pc, #124]	; (a01c <process_event+0x398>)
    9f9e:	4920      	ldr	r1, [pc, #128]	; (a020 <process_event+0x39c>)
    9fa0:	4820      	ldr	r0, [pc, #128]	; (a024 <process_event+0x3a0>)
    9fa2:	f011 fec9 	bl	1bd38 <assert_print>
    9fa6:	4659      	mov	r1, fp
    9fa8:	481f      	ldr	r0, [pc, #124]	; (a028 <process_event+0x3a4>)
    9faa:	f011 fec5 	bl	1bd38 <assert_print>
    9fae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fb0:	481a      	ldr	r0, [pc, #104]	; (a01c <process_event+0x398>)
    9fb2:	e6fc      	b.n	9dae <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    9fb4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9fb6:	2900      	cmp	r1, #0
    9fb8:	d0dd      	beq.n	9f76 <process_event+0x2f2>
	return node->next;
    9fba:	680d      	ldr	r5, [r1, #0]
    9fbc:	2900      	cmp	r1, #0
    9fbe:	d0da      	beq.n	9f76 <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    9fc0:	4643      	mov	r3, r8
    9fc2:	464a      	mov	r2, r9
    9fc4:	4620      	mov	r0, r4
    9fc6:	f8d1 a004 	ldr.w	sl, [r1, #4]
    9fca:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9fcc:	b11d      	cbz	r5, 9fd6 <process_event+0x352>
    9fce:	682b      	ldr	r3, [r5, #0]
    9fd0:	4629      	mov	r1, r5
    9fd2:	461d      	mov	r5, r3
    9fd4:	e7f2      	b.n	9fbc <process_event+0x338>
    9fd6:	462b      	mov	r3, r5
    9fd8:	e7fa      	b.n	9fd0 <process_event+0x34c>
    9fda:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    9fdc:	4643      	mov	r3, r8
    9fde:	464a      	mov	r2, r9
    9fe0:	4620      	mov	r0, r4
    9fe2:	683f      	ldr	r7, [r7, #0]
    9fe4:	f011 fe07 	bl	1bbf6 <notify_one>
    9fe8:	e7c5      	b.n	9f76 <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    9fea:	4658      	mov	r0, fp
    9fec:	f00e f8fe 	bl	181ec <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    9ff0:	8ba3      	ldrh	r3, [r4, #28]
    9ff2:	f023 0308 	bic.w	r3, r3, #8
    9ff6:	83a3      	strh	r3, [r4, #28]
    9ff8:	e6ac      	b.n	9d54 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    9ffa:	068b      	lsls	r3, r1, #26
    9ffc:	f57f ae64 	bpl.w	9cc8 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a000:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a004:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a006:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    a00a:	e647      	b.n	9c9c <process_event+0x18>
	__asm__ volatile(
    a00c:	f385 8811 	msr	BASEPRI, r5
    a010:	f3bf 8f6f 	isb	sy
}
    a014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a018:	0000a02d 	.word	0x0000a02d
    a01c:	000209d8 	.word	0x000209d8
    a020:	00020a31 	.word	0x00020a31
    a024:	000205a4 	.word	0x000205a4
    a028:	00020a46 	.word	0x00020a46

0000a02c <transition_complete>:
{
    a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a02e:	4604      	mov	r4, r0
    a030:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a032:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    a036:	f04f 0320 	mov.w	r3, #32
    a03a:	f3ef 8711 	mrs	r7, BASEPRI
    a03e:	f383 8812 	msr	BASEPRI_MAX, r3
    a042:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a046:	4630      	mov	r0, r6
    a048:	f00e f8b4 	bl	181b4 <z_spin_lock_valid>
    a04c:	b968      	cbnz	r0, a06a <transition_complete+0x3e>
    a04e:	2394      	movs	r3, #148	; 0x94
    a050:	4a0b      	ldr	r2, [pc, #44]	; (a080 <transition_complete+0x54>)
    a052:	490c      	ldr	r1, [pc, #48]	; (a084 <transition_complete+0x58>)
    a054:	480c      	ldr	r0, [pc, #48]	; (a088 <transition_complete+0x5c>)
    a056:	f011 fe6f 	bl	1bd38 <assert_print>
    a05a:	4631      	mov	r1, r6
    a05c:	480b      	ldr	r0, [pc, #44]	; (a08c <transition_complete+0x60>)
    a05e:	f011 fe6b 	bl	1bd38 <assert_print>
    a062:	2194      	movs	r1, #148	; 0x94
    a064:	4806      	ldr	r0, [pc, #24]	; (a080 <transition_complete+0x54>)
    a066:	f011 fe60 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
    a06a:	4630      	mov	r0, r6
    a06c:	f00e f8be 	bl	181ec <z_spin_lock_set_owner>
	mgr->last_res = res;
    a070:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a072:	463a      	mov	r2, r7
    a074:	4620      	mov	r0, r4
}
    a076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a07a:	2101      	movs	r1, #1
    a07c:	f7ff be02 	b.w	9c84 <process_event>
    a080:	000209d8 	.word	0x000209d8
    a084:	00020a31 	.word	0x00020a31
    a088:	000205a4 	.word	0x000205a4
    a08c:	00020a46 	.word	0x00020a46

0000a090 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a094:	4604      	mov	r4, r0
    a096:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a098:	f011 fd9d 	bl	1bbd6 <validate_args>

	if (rv < 0) {
    a09c:	1e05      	subs	r5, r0, #0
    a09e:	db67      	blt.n	a170 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a0a0:	f104 0914 	add.w	r9, r4, #20
    a0a4:	f04f 0320 	mov.w	r3, #32
    a0a8:	f3ef 8a11 	mrs	sl, BASEPRI
    a0ac:	f383 8812 	msr	BASEPRI_MAX, r3
    a0b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0b4:	4648      	mov	r0, r9
    a0b6:	f00e f87d 	bl	181b4 <z_spin_lock_valid>
    a0ba:	4680      	mov	r8, r0
    a0bc:	b960      	cbnz	r0, a0d8 <onoff_request+0x48>
    a0be:	2394      	movs	r3, #148	; 0x94
    a0c0:	4a37      	ldr	r2, [pc, #220]	; (a1a0 <onoff_request+0x110>)
    a0c2:	4938      	ldr	r1, [pc, #224]	; (a1a4 <onoff_request+0x114>)
    a0c4:	4838      	ldr	r0, [pc, #224]	; (a1a8 <onoff_request+0x118>)
    a0c6:	f011 fe37 	bl	1bd38 <assert_print>
    a0ca:	4649      	mov	r1, r9
    a0cc:	4837      	ldr	r0, [pc, #220]	; (a1ac <onoff_request+0x11c>)
    a0ce:	f011 fe33 	bl	1bd38 <assert_print>
    a0d2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a0d4:	4832      	ldr	r0, [pc, #200]	; (a1a0 <onoff_request+0x110>)
    a0d6:	e040      	b.n	a15a <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    a0d8:	4648      	mov	r0, r9
    a0da:	f00e f887 	bl	181ec <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a0de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a0e2:	8be3      	ldrh	r3, [r4, #30]
    a0e4:	8ba6      	ldrh	r6, [r4, #28]
    a0e6:	4293      	cmp	r3, r2
    a0e8:	f006 0607 	and.w	r6, r6, #7
    a0ec:	d043      	beq.n	a176 <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a0ee:	2e02      	cmp	r6, #2
    a0f0:	d113      	bne.n	a11a <onoff_request+0x8a>
	rv = state;
    a0f2:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    a0f4:	3301      	adds	r3, #1
    a0f6:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a0f8:	4648      	mov	r0, r9
    a0fa:	f00e f869 	bl	181d0 <z_spin_unlock_valid>
    a0fe:	2800      	cmp	r0, #0
    a100:	d13f      	bne.n	a182 <onoff_request+0xf2>
    a102:	23c2      	movs	r3, #194	; 0xc2
    a104:	4a26      	ldr	r2, [pc, #152]	; (a1a0 <onoff_request+0x110>)
    a106:	492a      	ldr	r1, [pc, #168]	; (a1b0 <onoff_request+0x120>)
    a108:	4827      	ldr	r0, [pc, #156]	; (a1a8 <onoff_request+0x118>)
    a10a:	f011 fe15 	bl	1bd38 <assert_print>
    a10e:	4649      	mov	r1, r9
    a110:	4828      	ldr	r0, [pc, #160]	; (a1b4 <onoff_request+0x124>)
    a112:	f011 fe11 	bl	1bd38 <assert_print>
    a116:	21c2      	movs	r1, #194	; 0xc2
    a118:	e7dc      	b.n	a0d4 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    a11a:	2e06      	cmp	r6, #6
    a11c:	d813      	bhi.n	a146 <onoff_request+0xb6>
    a11e:	e8df f006 	tbb	[pc, r6]
    a122:	2d09      	.short	0x2d09
    a124:	04091212 	.word	0x04091212
    a128:	09          	.byte	0x09
    a129:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    a12a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    a12e:	f04f 0800 	mov.w	r8, #0
    a132:	e7e1      	b.n	a0f8 <onoff_request+0x68>
	parent->next = child;
    a134:	2300      	movs	r3, #0
    a136:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a138:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a13a:	b983      	cbnz	r3, a15e <onoff_request+0xce>
	list->head = node;
    a13c:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    a140:	b186      	cbz	r6, a164 <onoff_request+0xd4>
	rv = state;
    a142:	4635      	mov	r5, r6
    a144:	e7f3      	b.n	a12e <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a146:	491c      	ldr	r1, [pc, #112]	; (a1b8 <onoff_request+0x128>)
    a148:	4817      	ldr	r0, [pc, #92]	; (a1a8 <onoff_request+0x118>)
    a14a:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    a14e:	4a1b      	ldr	r2, [pc, #108]	; (a1bc <onoff_request+0x12c>)
    a150:	f011 fdf2 	bl	1bd38 <assert_print>
    a154:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a158:	4818      	ldr	r0, [pc, #96]	; (a1bc <onoff_request+0x12c>)
    a15a:	f011 fde6 	bl	1bd2a <assert_post_action>
	parent->next = child;
    a15e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a160:	6067      	str	r7, [r4, #4]
}
    a162:	e7ed      	b.n	a140 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    a164:	4652      	mov	r2, sl
    a166:	2102      	movs	r1, #2
    a168:	4620      	mov	r0, r4
    a16a:	f7ff fd8b 	bl	9c84 <process_event>
    a16e:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    a170:	4628      	mov	r0, r5
    a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    a176:	f06f 050a 	mvn.w	r5, #10
    a17a:	e7d8      	b.n	a12e <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    a17c:	f06f 0504 	mvn.w	r5, #4
    a180:	e7d5      	b.n	a12e <onoff_request+0x9e>
	__asm__ volatile(
    a182:	f38a 8811 	msr	BASEPRI, sl
    a186:	f3bf 8f6f 	isb	sy
		if (notify) {
    a18a:	f1b8 0f00 	cmp.w	r8, #0
    a18e:	d0ef      	beq.n	a170 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    a190:	2300      	movs	r3, #0
    a192:	4632      	mov	r2, r6
    a194:	4639      	mov	r1, r7
    a196:	4620      	mov	r0, r4
    a198:	f011 fd2d 	bl	1bbf6 <notify_one>
    a19c:	e7e8      	b.n	a170 <onoff_request+0xe0>
    a19e:	bf00      	nop
    a1a0:	000209d8 	.word	0x000209d8
    a1a4:	00020a31 	.word	0x00020a31
    a1a8:	000205a4 	.word	0x000205a4
    a1ac:	00020a46 	.word	0x00020a46
    a1b0:	00020a05 	.word	0x00020a05
    a1b4:	00020a1c 	.word	0x00020a1c
    a1b8:	000209c2 	.word	0x000209c2
    a1bc:	00020935 	.word	0x00020935

0000a1c0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a1c0:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a1c2:	6842      	ldr	r2, [r0, #4]
    a1c4:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    a1c6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a1ca:	2a02      	cmp	r2, #2
	notify->result = res;
    a1cc:	6081      	str	r1, [r0, #8]
	switch (method) {
    a1ce:	d00a      	beq.n	a1e6 <sys_notify_finalize+0x26>
    a1d0:	2a03      	cmp	r2, #3
    a1d2:	f04f 0100 	mov.w	r1, #0
    a1d6:	d003      	beq.n	a1e0 <sys_notify_finalize+0x20>
    a1d8:	2a01      	cmp	r2, #1
    a1da:	d10a      	bne.n	a1f2 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a1dc:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a1de:	e006      	b.n	a1ee <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    a1e0:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a1e2:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a1e4:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    a1e6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a1e8:	2200      	movs	r2, #0
    a1ea:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a1ec:	b958      	cbnz	r0, a206 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    a1ee:	2000      	movs	r0, #0
    a1f0:	e7f8      	b.n	a1e4 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a1f2:	4906      	ldr	r1, [pc, #24]	; (a20c <sys_notify_finalize+0x4c>)
    a1f4:	4806      	ldr	r0, [pc, #24]	; (a210 <sys_notify_finalize+0x50>)
    a1f6:	2345      	movs	r3, #69	; 0x45
    a1f8:	4a06      	ldr	r2, [pc, #24]	; (a214 <sys_notify_finalize+0x54>)
    a1fa:	f011 fd9d 	bl	1bd38 <assert_print>
    a1fe:	2145      	movs	r1, #69	; 0x45
    a200:	4804      	ldr	r0, [pc, #16]	; (a214 <sys_notify_finalize+0x54>)
    a202:	f011 fd92 	bl	1bd2a <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    a206:	f011 fa39 	bl	1b67c <z_impl_k_poll_signal_raise>
    a20a:	e7f0      	b.n	a1ee <sys_notify_finalize+0x2e>
    a20c:	0002357e 	.word	0x0002357e
    a210:	000205a4 	.word	0x000205a4
    a214:	00020a5e 	.word	0x00020a5e

0000a218 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a21c:	4681      	mov	r9, r0
    a21e:	468b      	mov	fp, r1
    a220:	4617      	mov	r7, r2
    a222:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a224:	2500      	movs	r5, #0
{
    a226:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a228:	7838      	ldrb	r0, [r7, #0]
    a22a:	b908      	cbnz	r0, a230 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a22c:	4628      	mov	r0, r5
    a22e:	e357      	b.n	a8e0 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    a230:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    a232:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a234:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    a236:	d006      	beq.n	a246 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    a238:	4659      	mov	r1, fp
    a23a:	47c8      	blx	r9
    a23c:	2800      	cmp	r0, #0
    a23e:	f2c0 834f 	blt.w	a8e0 <z_cbvprintf_impl+0x6c8>
    a242:	3501      	adds	r5, #1
		if (bps == NULL) {
    a244:	e1fb      	b.n	a63e <z_cbvprintf_impl+0x426>
		} state = {
    a246:	2218      	movs	r2, #24
    a248:	2100      	movs	r1, #0
    a24a:	a80e      	add	r0, sp, #56	; 0x38
    a24c:	f012 fd8e 	bl	1cd6c <memset>
	if (*sp == '%') {
    a250:	787b      	ldrb	r3, [r7, #1]
    a252:	2b25      	cmp	r3, #37	; 0x25
    a254:	d07d      	beq.n	a352 <z_cbvprintf_impl+0x13a>
    a256:	2300      	movs	r3, #0
    a258:	4698      	mov	r8, r3
    a25a:	469e      	mov	lr, r3
    a25c:	469c      	mov	ip, r3
    a25e:	461e      	mov	r6, r3
    a260:	1c78      	adds	r0, r7, #1
    a262:	4601      	mov	r1, r0
		switch (*sp) {
    a264:	f810 2b01 	ldrb.w	r2, [r0], #1
    a268:	2a2b      	cmp	r2, #43	; 0x2b
    a26a:	f000 80a1 	beq.w	a3b0 <z_cbvprintf_impl+0x198>
    a26e:	f200 8098 	bhi.w	a3a2 <z_cbvprintf_impl+0x18a>
    a272:	2a20      	cmp	r2, #32
    a274:	f000 809f 	beq.w	a3b6 <z_cbvprintf_impl+0x19e>
    a278:	2a23      	cmp	r2, #35	; 0x23
    a27a:	f000 809f 	beq.w	a3bc <z_cbvprintf_impl+0x1a4>
    a27e:	b12b      	cbz	r3, a28c <z_cbvprintf_impl+0x74>
    a280:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a288:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a28c:	f1b8 0f00 	cmp.w	r8, #0
    a290:	d005      	beq.n	a29e <z_cbvprintf_impl+0x86>
    a292:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a296:	f043 0320 	orr.w	r3, r3, #32
    a29a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a29e:	f1be 0f00 	cmp.w	lr, #0
    a2a2:	d005      	beq.n	a2b0 <z_cbvprintf_impl+0x98>
    a2a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a2a8:	f043 0310 	orr.w	r3, r3, #16
    a2ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a2b0:	f1bc 0f00 	cmp.w	ip, #0
    a2b4:	d005      	beq.n	a2c2 <z_cbvprintf_impl+0xaa>
    a2b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a2ba:	f043 0308 	orr.w	r3, r3, #8
    a2be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a2c2:	b12e      	cbz	r6, a2d0 <z_cbvprintf_impl+0xb8>
    a2c4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a2c8:	f043 0304 	orr.w	r3, r3, #4
    a2cc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    a2d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a2d4:	f003 0044 	and.w	r0, r3, #68	; 0x44
    a2d8:	2844      	cmp	r0, #68	; 0x44
    a2da:	d103      	bne.n	a2e4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    a2dc:	f36f 1386 	bfc	r3, #6, #1
    a2e0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    a2e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a2e8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    a2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a2ee:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a2f2:	d17f      	bne.n	a3f4 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    a2f4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    a2f8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a2fa:	f042 0201 	orr.w	r2, r2, #1
    a2fe:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    a302:	781a      	ldrb	r2, [r3, #0]
    a304:	2a2e      	cmp	r2, #46	; 0x2e
    a306:	bf0c      	ite	eq
    a308:	2101      	moveq	r1, #1
    a30a:	2100      	movne	r1, #0
    a30c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a310:	f361 0241 	bfi	r2, r1, #1, #1
    a314:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    a318:	d178      	bne.n	a40c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    a31a:	785a      	ldrb	r2, [r3, #1]
    a31c:	2a2a      	cmp	r2, #42	; 0x2a
    a31e:	d06e      	beq.n	a3fe <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    a320:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a322:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    a326:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a328:	4619      	mov	r1, r3
    a32a:	f811 0b01 	ldrb.w	r0, [r1], #1
    a32e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a332:	2e09      	cmp	r6, #9
    a334:	f240 8095 	bls.w	a462 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    a338:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    a33c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    a33e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    a342:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    a346:	460a      	mov	r2, r1
    a348:	f360 0241 	bfi	r2, r0, #1, #1
    a34c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    a350:	e05c      	b.n	a40c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    a352:	1cba      	adds	r2, r7, #2
    a354:	9203      	str	r2, [sp, #12]
    a356:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    a35a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    a35e:	07da      	lsls	r2, r3, #31
    a360:	f140 812e 	bpl.w	a5c0 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    a364:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    a368:	f1b8 0f00 	cmp.w	r8, #0
    a36c:	da07      	bge.n	a37e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    a36e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    a372:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    a376:	f042 0204 	orr.w	r2, r2, #4
    a37a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    a37e:	075e      	lsls	r6, r3, #29
    a380:	f140 8127 	bpl.w	a5d2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    a384:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    a388:	f1ba 0f00 	cmp.w	sl, #0
    a38c:	f280 8126 	bge.w	a5dc <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    a390:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    a394:	f36f 0341 	bfc	r3, #1, #1
    a398:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    a39c:	f04f 3aff 	mov.w	sl, #4294967295
    a3a0:	e11c      	b.n	a5dc <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    a3a2:	2a2d      	cmp	r2, #45	; 0x2d
    a3a4:	d00d      	beq.n	a3c2 <z_cbvprintf_impl+0x1aa>
    a3a6:	2a30      	cmp	r2, #48	; 0x30
    a3a8:	f47f af69 	bne.w	a27e <z_cbvprintf_impl+0x66>
    a3ac:	2301      	movs	r3, #1
	} while (loop);
    a3ae:	e758      	b.n	a262 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    a3b0:	f04f 0c01 	mov.w	ip, #1
    a3b4:	e755      	b.n	a262 <z_cbvprintf_impl+0x4a>
    a3b6:	f04f 0e01 	mov.w	lr, #1
    a3ba:	e752      	b.n	a262 <z_cbvprintf_impl+0x4a>
    a3bc:	f04f 0801 	mov.w	r8, #1
    a3c0:	e74f      	b.n	a262 <z_cbvprintf_impl+0x4a>
    a3c2:	2601      	movs	r6, #1
    a3c4:	e74d      	b.n	a262 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    a3c6:	4603      	mov	r3, r0
    a3c8:	fb0e 6202 	mla	r2, lr, r2, r6
    a3cc:	3a30      	subs	r2, #48	; 0x30
    a3ce:	4618      	mov	r0, r3
    a3d0:	f810 6b01 	ldrb.w	r6, [r0], #1
    a3d4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a3d8:	f1bc 0f09 	cmp.w	ip, #9
    a3dc:	d9f3      	bls.n	a3c6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    a3de:	4299      	cmp	r1, r3
    a3e0:	d08f      	beq.n	a302 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a3e2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    a3e6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    a3e8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a3ea:	f362 0141 	bfi	r1, r2, #1, #1
    a3ee:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    a3f2:	e786      	b.n	a302 <z_cbvprintf_impl+0xea>
    a3f4:	460b      	mov	r3, r1
	size_t val = 0;
    a3f6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a3f8:	f04f 0e0a 	mov.w	lr, #10
    a3fc:	e7e7      	b.n	a3ce <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    a3fe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    a402:	3302      	adds	r3, #2
		conv->prec_star = true;
    a404:	f042 0204 	orr.w	r2, r2, #4
    a408:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    a40c:	781a      	ldrb	r2, [r3, #0]
    a40e:	2a6c      	cmp	r2, #108	; 0x6c
    a410:	d047      	beq.n	a4a2 <z_cbvprintf_impl+0x28a>
    a412:	d82b      	bhi.n	a46c <z_cbvprintf_impl+0x254>
    a414:	2a68      	cmp	r2, #104	; 0x68
    a416:	d031      	beq.n	a47c <z_cbvprintf_impl+0x264>
    a418:	2a6a      	cmp	r2, #106	; 0x6a
    a41a:	d04b      	beq.n	a4b4 <z_cbvprintf_impl+0x29c>
    a41c:	2a4c      	cmp	r2, #76	; 0x4c
    a41e:	d051      	beq.n	a4c4 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    a420:	461a      	mov	r2, r3
    a422:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    a426:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    a428:	9203      	str	r2, [sp, #12]
    a42a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    a42e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    a432:	f200 80be 	bhi.w	a5b2 <z_cbvprintf_impl+0x39a>
    a436:	2b6d      	cmp	r3, #109	; 0x6d
    a438:	d851      	bhi.n	a4de <z_cbvprintf_impl+0x2c6>
    a43a:	2b69      	cmp	r3, #105	; 0x69
    a43c:	f200 80b9 	bhi.w	a5b2 <z_cbvprintf_impl+0x39a>
    a440:	2b57      	cmp	r3, #87	; 0x57
    a442:	d867      	bhi.n	a514 <z_cbvprintf_impl+0x2fc>
    a444:	2b41      	cmp	r3, #65	; 0x41
    a446:	d003      	beq.n	a450 <z_cbvprintf_impl+0x238>
    a448:	3b45      	subs	r3, #69	; 0x45
    a44a:	2b02      	cmp	r3, #2
    a44c:	f200 80b1 	bhi.w	a5b2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    a450:	2204      	movs	r2, #4
    a452:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a456:	f362 0302 	bfi	r3, r2, #0, #3
    a45a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    a45e:	2301      	movs	r3, #1
			break;
    a460:	e073      	b.n	a54a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    a462:	fb0c 0202 	mla	r2, ip, r2, r0
    a466:	460b      	mov	r3, r1
    a468:	3a30      	subs	r2, #48	; 0x30
    a46a:	e75d      	b.n	a328 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    a46c:	2a74      	cmp	r2, #116	; 0x74
    a46e:	d025      	beq.n	a4bc <z_cbvprintf_impl+0x2a4>
    a470:	2a7a      	cmp	r2, #122	; 0x7a
    a472:	d1d5      	bne.n	a420 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    a474:	2106      	movs	r1, #6
    a476:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a47a:	e00c      	b.n	a496 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    a47c:	785a      	ldrb	r2, [r3, #1]
    a47e:	2a68      	cmp	r2, #104	; 0x68
    a480:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a484:	d106      	bne.n	a494 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    a486:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    a488:	f361 02c6 	bfi	r2, r1, #3, #4
    a48c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    a490:	3302      	adds	r3, #2
    a492:	e7c5      	b.n	a420 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    a494:	2102      	movs	r1, #2
    a496:	f361 02c6 	bfi	r2, r1, #3, #4
    a49a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    a49e:	3301      	adds	r3, #1
    a4a0:	e7be      	b.n	a420 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    a4a2:	785a      	ldrb	r2, [r3, #1]
    a4a4:	2a6c      	cmp	r2, #108	; 0x6c
    a4a6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a4aa:	d101      	bne.n	a4b0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    a4ac:	2104      	movs	r1, #4
    a4ae:	e7eb      	b.n	a488 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    a4b0:	2103      	movs	r1, #3
    a4b2:	e7f0      	b.n	a496 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    a4b4:	2105      	movs	r1, #5
    a4b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a4ba:	e7ec      	b.n	a496 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    a4bc:	2107      	movs	r1, #7
    a4be:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a4c2:	e7e8      	b.n	a496 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    a4c4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    a4c8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    a4cc:	f022 0202 	bic.w	r2, r2, #2
    a4d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    a4d4:	f042 0202 	orr.w	r2, r2, #2
    a4d8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    a4dc:	e7df      	b.n	a49e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    a4de:	3b6e      	subs	r3, #110	; 0x6e
    a4e0:	b2d9      	uxtb	r1, r3
    a4e2:	2301      	movs	r3, #1
    a4e4:	408b      	lsls	r3, r1
    a4e6:	f240 4182 	movw	r1, #1154	; 0x482
    a4ea:	420b      	tst	r3, r1
    a4ec:	d137      	bne.n	a55e <z_cbvprintf_impl+0x346>
    a4ee:	f013 0f24 	tst.w	r3, #36	; 0x24
    a4f2:	d151      	bne.n	a598 <z_cbvprintf_impl+0x380>
    a4f4:	07d8      	lsls	r0, r3, #31
    a4f6:	d55c      	bpl.n	a5b2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    a4f8:	2103      	movs	r1, #3
    a4fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a4fe:	f361 0302 	bfi	r3, r1, #0, #3
    a502:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    a506:	f002 0378 	and.w	r3, r2, #120	; 0x78
    a50a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    a50e:	424b      	negs	r3, r1
    a510:	414b      	adcs	r3, r1
    a512:	e01a      	b.n	a54a <z_cbvprintf_impl+0x332>
    a514:	2001      	movs	r0, #1
	switch (conv->specifier) {
    a516:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    a51a:	b2c9      	uxtb	r1, r1
    a51c:	fa00 f101 	lsl.w	r1, r0, r1
    a520:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    a524:	d194      	bne.n	a450 <z_cbvprintf_impl+0x238>
    a526:	f640 0601 	movw	r6, #2049	; 0x801
    a52a:	4231      	tst	r1, r6
    a52c:	d11d      	bne.n	a56a <z_cbvprintf_impl+0x352>
    a52e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    a532:	d03e      	beq.n	a5b2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    a534:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a538:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a53c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    a540:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    a542:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    a546:	d034      	beq.n	a5b2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    a548:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    a54a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    a54e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    a552:	430b      	orrs	r3, r1
    a554:	f363 0241 	bfi	r2, r3, #1, #1
    a558:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    a55c:	e6fd      	b.n	a35a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    a55e:	2102      	movs	r1, #2
    a560:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a564:	f361 0302 	bfi	r3, r1, #0, #3
    a568:	e7e8      	b.n	a53c <z_cbvprintf_impl+0x324>
    a56a:	2002      	movs	r0, #2
    a56c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    a570:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    a574:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a578:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    a57a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    a57e:	bf02      	ittt	eq
    a580:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    a584:	f041 0101 	orreq.w	r1, r1, #1
    a588:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    a58c:	2b63      	cmp	r3, #99	; 0x63
    a58e:	d1db      	bne.n	a548 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    a590:	1e13      	subs	r3, r2, #0
    a592:	bf18      	it	ne
    a594:	2301      	movne	r3, #1
    a596:	e7d8      	b.n	a54a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    a598:	2103      	movs	r1, #3
    a59a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    a59e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    a5a2:	f361 0302 	bfi	r3, r1, #0, #3
    a5a6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    a5aa:	bf14      	ite	ne
    a5ac:	2301      	movne	r3, #1
    a5ae:	2300      	moveq	r3, #0
    a5b0:	e7cb      	b.n	a54a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    a5b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a5b6:	f043 0301 	orr.w	r3, r3, #1
    a5ba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    a5be:	e7c3      	b.n	a548 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    a5c0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    a5c4:	2a00      	cmp	r2, #0
		int width = -1;
    a5c6:	bfac      	ite	ge
    a5c8:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    a5cc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    a5d0:	e6d5      	b.n	a37e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    a5d2:	0798      	lsls	r0, r3, #30
    a5d4:	f57f aee2 	bpl.w	a39c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    a5d8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    a5dc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    a5de:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    a5e2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    a5e6:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    a5ea:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    a5ee:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    a5f0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    a5f4:	d133      	bne.n	a65e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    a5f6:	1ecb      	subs	r3, r1, #3
    a5f8:	2b04      	cmp	r3, #4
    a5fa:	d804      	bhi.n	a606 <z_cbvprintf_impl+0x3ee>
    a5fc:	e8df f003 	tbb	[pc, r3]
    a600:	21464621 	.word	0x21464621
    a604:	21          	.byte	0x21
    a605:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    a606:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    a608:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    a60a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    a60e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    a612:	d11c      	bne.n	a64e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    a614:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    a618:	17da      	asrs	r2, r3, #31
    a61a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    a61e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    a620:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a624:	f013 0603 	ands.w	r6, r3, #3
    a628:	d050      	beq.n	a6cc <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    a62a:	463a      	mov	r2, r7
    a62c:	4659      	mov	r1, fp
    a62e:	4648      	mov	r0, r9
    a630:	9b03      	ldr	r3, [sp, #12]
    a632:	f011 fb63 	bl	1bcfc <outs>
    a636:	2800      	cmp	r0, #0
    a638:	f2c0 8152 	blt.w	a8e0 <z_cbvprintf_impl+0x6c8>
    a63c:	4405      	add	r5, r0
			continue;
    a63e:	9f03      	ldr	r7, [sp, #12]
    a640:	e5f2      	b.n	a228 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    a642:	f854 3b04 	ldr.w	r3, [r4], #4
    a646:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    a648:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    a64c:	e7e8      	b.n	a620 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    a64e:	2902      	cmp	r1, #2
    a650:	d1e5      	bne.n	a61e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    a652:	b21a      	sxth	r2, r3
    a654:	f343 33c0 	sbfx	r3, r3, #15, #1
    a658:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    a65c:	e7df      	b.n	a61e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    a65e:	2b02      	cmp	r3, #2
    a660:	d124      	bne.n	a6ac <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    a662:	1ecb      	subs	r3, r1, #3
    a664:	2b04      	cmp	r3, #4
    a666:	d804      	bhi.n	a672 <z_cbvprintf_impl+0x45a>
    a668:	e8df f003 	tbb	[pc, r3]
    a66c:	18101018 	.word	0x18101018
    a670:	18          	.byte	0x18
    a671:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    a672:	2901      	cmp	r1, #1
    a674:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    a678:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    a67c:	d014      	beq.n	a6a8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    a67e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    a680:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    a684:	d1cc      	bne.n	a620 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    a686:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    a688:	930e      	str	r3, [sp, #56]	; 0x38
    a68a:	e7c9      	b.n	a620 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    a68c:	3407      	adds	r4, #7
    a68e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    a692:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    a696:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    a69a:	e7c1      	b.n	a620 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    a69c:	f854 3b04 	ldr.w	r3, [r4], #4
    a6a0:	930e      	str	r3, [sp, #56]	; 0x38
    a6a2:	2300      	movs	r3, #0
    a6a4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    a6a6:	e7bb      	b.n	a620 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    a6a8:	b2db      	uxtb	r3, r3
    a6aa:	e7cd      	b.n	a648 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    a6ac:	2b04      	cmp	r3, #4
    a6ae:	d108      	bne.n	a6c2 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    a6b0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    a6b2:	f024 0407 	bic.w	r4, r4, #7
    a6b6:	e9d4 2300 	ldrd	r2, r3, [r4]
    a6ba:	3408      	adds	r4, #8
    a6bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    a6c0:	e7ae      	b.n	a620 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    a6c2:	2b03      	cmp	r3, #3
    a6c4:	d1ac      	bne.n	a620 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    a6c6:	f854 3b04 	ldr.w	r3, [r4], #4
    a6ca:	e7dd      	b.n	a688 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    a6cc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    a6d0:	2878      	cmp	r0, #120	; 0x78
    a6d2:	d8b4      	bhi.n	a63e <z_cbvprintf_impl+0x426>
    a6d4:	2862      	cmp	r0, #98	; 0x62
    a6d6:	d81c      	bhi.n	a712 <z_cbvprintf_impl+0x4fa>
    a6d8:	2825      	cmp	r0, #37	; 0x25
    a6da:	f43f adad 	beq.w	a238 <z_cbvprintf_impl+0x20>
    a6de:	2858      	cmp	r0, #88	; 0x58
    a6e0:	d1ad      	bne.n	a63e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    a6e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a6e6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a6ea:	9300      	str	r3, [sp, #0]
    a6ec:	aa10      	add	r2, sp, #64	; 0x40
    a6ee:	ab08      	add	r3, sp, #32
    a6f0:	f011 fabe 	bl	1bc70 <encode_uint>
			if (precision >= 0) {
    a6f4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    a6f8:	4607      	mov	r7, r0
			if (precision >= 0) {
    a6fa:	f280 8099 	bge.w	a830 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    a6fe:	2f00      	cmp	r7, #0
    a700:	d09d      	beq.n	a63e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    a702:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a706:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    a708:	2e00      	cmp	r6, #0
    a70a:	f000 80c0 	beq.w	a88e <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    a70e:	3001      	adds	r0, #1
    a710:	e0bd      	b.n	a88e <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    a712:	3863      	subs	r0, #99	; 0x63
    a714:	2815      	cmp	r0, #21
    a716:	d892      	bhi.n	a63e <z_cbvprintf_impl+0x426>
    a718:	a201      	add	r2, pc, #4	; (adr r2, a720 <z_cbvprintf_impl+0x508>)
    a71a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    a71e:	bf00      	nop
    a720:	0000a7f5 	.word	0x0000a7f5
    a724:	0000a807 	.word	0x0000a807
    a728:	0000a63f 	.word	0x0000a63f
    a72c:	0000a63f 	.word	0x0000a63f
    a730:	0000a63f 	.word	0x0000a63f
    a734:	0000a63f 	.word	0x0000a63f
    a738:	0000a807 	.word	0x0000a807
    a73c:	0000a63f 	.word	0x0000a63f
    a740:	0000a63f 	.word	0x0000a63f
    a744:	0000a63f 	.word	0x0000a63f
    a748:	0000a63f 	.word	0x0000a63f
    a74c:	0000a893 	.word	0x0000a893
    a750:	0000a82b 	.word	0x0000a82b
    a754:	0000a851 	.word	0x0000a851
    a758:	0000a63f 	.word	0x0000a63f
    a75c:	0000a63f 	.word	0x0000a63f
    a760:	0000a779 	.word	0x0000a779
    a764:	0000a63f 	.word	0x0000a63f
    a768:	0000a82b 	.word	0x0000a82b
    a76c:	0000a63f 	.word	0x0000a63f
    a770:	0000a63f 	.word	0x0000a63f
    a774:	0000a82b 	.word	0x0000a82b
			if (precision >= 0) {
    a778:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    a77c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    a77e:	db35      	blt.n	a7ec <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    a780:	4651      	mov	r1, sl
    a782:	4638      	mov	r0, r7
    a784:	f012 faaf 	bl	1cce6 <strnlen>
			bpe = bps + len;
    a788:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    a78c:	2f00      	cmp	r7, #0
    a78e:	f43f af56 	beq.w	a63e <z_cbvprintf_impl+0x426>
		char sign = 0;
    a792:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    a794:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a798:	f013 0210 	ands.w	r2, r3, #16
    a79c:	9205      	str	r2, [sp, #20]
    a79e:	f000 8092 	beq.w	a8c6 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    a7a2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    a7a4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    a7a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    a7a8:	bf48      	it	mi
    a7aa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    a7ac:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    a7ae:	bf48      	it	mi
    a7b0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    a7b2:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    a7b6:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    a7b8:	f340 809f 	ble.w	a8fa <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    a7bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    a7c0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    a7c4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    a7c8:	0750      	lsls	r0, r2, #29
    a7ca:	9306      	str	r3, [sp, #24]
    a7cc:	f100 8095 	bmi.w	a8fa <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    a7d0:	0651      	lsls	r1, r2, #25
    a7d2:	f140 8088 	bpl.w	a8e6 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    a7d6:	b13e      	cbz	r6, a7e8 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    a7d8:	4659      	mov	r1, fp
    a7da:	4630      	mov	r0, r6
    a7dc:	47c8      	blx	r9
    a7de:	2800      	cmp	r0, #0
    a7e0:	db7e      	blt.n	a8e0 <z_cbvprintf_impl+0x6c8>
    a7e2:	9b06      	ldr	r3, [sp, #24]
    a7e4:	3501      	adds	r5, #1
    a7e6:	461e      	mov	r6, r3
					pad = '0';
    a7e8:	2230      	movs	r2, #48	; 0x30
    a7ea:	e07d      	b.n	a8e8 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    a7ec:	4638      	mov	r0, r7
    a7ee:	f012 fa73 	bl	1ccd8 <strlen>
    a7f2:	e7c9      	b.n	a788 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    a7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    a7f6:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    a7f8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    a7fa:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    a7fe:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    a800:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    a804:	e7c6      	b.n	a794 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    a806:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    a808:	bf5a      	itte	pl
    a80a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    a80e:	015e      	lslpl	r6, r3, #5
				sign = '+';
    a810:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    a812:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    a816:	2b00      	cmp	r3, #0
    a818:	f6bf af63 	bge.w	a6e2 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    a81c:	4252      	negs	r2, r2
    a81e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    a822:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    a824:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    a828:	e75b      	b.n	a6e2 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    a82a:	2600      	movs	r6, #0
    a82c:	e759      	b.n	a6e2 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    a82e:	2600      	movs	r6, #0
				conv->flag_zero = false;
    a830:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    a834:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a838:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    a83a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    a83e:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    a840:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    a844:	f67f af5b 	bls.w	a6fe <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    a848:	ebaa 0303 	sub.w	r3, sl, r3
    a84c:	9311      	str	r3, [sp, #68]	; 0x44
    a84e:	e756      	b.n	a6fe <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    a850:	980e      	ldr	r0, [sp, #56]	; 0x38
    a852:	b390      	cbz	r0, a8ba <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a854:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a858:	9300      	str	r3, [sp, #0]
    a85a:	2100      	movs	r1, #0
    a85c:	ab08      	add	r3, sp, #32
    a85e:	aa10      	add	r2, sp, #64	; 0x40
    a860:	f011 fa06 	bl	1bc70 <encode_uint>
				conv->altform_0c = true;
    a864:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    a868:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    a86c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    a870:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    a874:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a878:	4607      	mov	r7, r0
				conv->altform_0c = true;
    a87a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    a87e:	dad6      	bge.n	a82e <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    a880:	2800      	cmp	r0, #0
    a882:	f43f aedc 	beq.w	a63e <z_cbvprintf_impl+0x426>
		char sign = 0;
    a886:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    a888:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a88c:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    a88e:	469a      	mov	sl, r3
    a890:	e780      	b.n	a794 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    a892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    a894:	2907      	cmp	r1, #7
    a896:	f63f aed2 	bhi.w	a63e <z_cbvprintf_impl+0x426>
    a89a:	e8df f001 	tbb	[pc, r1]
    a89e:	040c      	.short	0x040c
    a8a0:	08080c06 	.word	0x08080c06
    a8a4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    a8a6:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    a8a8:	e6c9      	b.n	a63e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    a8aa:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    a8ac:	e6c7      	b.n	a63e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    a8ae:	17ea      	asrs	r2, r5, #31
    a8b0:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    a8b4:	e6c3      	b.n	a63e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    a8b6:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    a8b8:	e6c1      	b.n	a63e <z_cbvprintf_impl+0x426>
    a8ba:	4f2f      	ldr	r7, [pc, #188]	; (a978 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    a8bc:	4606      	mov	r6, r0
			bpe = bps + 5;
    a8be:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    a8c2:	2005      	movs	r0, #5
    a8c4:	e766      	b.n	a794 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    a8c6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    a8c8:	bf48      	it	mi
    a8ca:	3001      	addmi	r0, #1
    a8cc:	e76a      	b.n	a7a4 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    a8ce:	4610      	mov	r0, r2
    a8d0:	9307      	str	r3, [sp, #28]
    a8d2:	9206      	str	r2, [sp, #24]
    a8d4:	4659      	mov	r1, fp
    a8d6:	47c8      	blx	r9
    a8d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a8dc:	2800      	cmp	r0, #0
    a8de:	da04      	bge.n	a8ea <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    a8e0:	b015      	add	sp, #84	; 0x54
    a8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    a8e6:	2220      	movs	r2, #32
					pad = '0';
    a8e8:	4643      	mov	r3, r8
				while (width-- > 0) {
    a8ea:	4619      	mov	r1, r3
    a8ec:	2900      	cmp	r1, #0
    a8ee:	f103 33ff 	add.w	r3, r3, #4294967295
    a8f2:	dcec      	bgt.n	a8ce <z_cbvprintf_impl+0x6b6>
    a8f4:	4445      	add	r5, r8
    a8f6:	4698      	mov	r8, r3
    a8f8:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    a8fa:	b12e      	cbz	r6, a908 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    a8fc:	4659      	mov	r1, fp
    a8fe:	4630      	mov	r0, r6
    a900:	47c8      	blx	r9
    a902:	2800      	cmp	r0, #0
    a904:	dbec      	blt.n	a8e0 <z_cbvprintf_impl+0x6c8>
    a906:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    a908:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a90c:	06da      	lsls	r2, r3, #27
    a90e:	d401      	bmi.n	a914 <z_cbvprintf_impl+0x6fc>
    a910:	071b      	lsls	r3, r3, #28
    a912:	d505      	bpl.n	a920 <z_cbvprintf_impl+0x708>
				OUTC('0');
    a914:	4659      	mov	r1, fp
    a916:	2030      	movs	r0, #48	; 0x30
    a918:	47c8      	blx	r9
    a91a:	2800      	cmp	r0, #0
    a91c:	dbe0      	blt.n	a8e0 <z_cbvprintf_impl+0x6c8>
    a91e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    a920:	9b05      	ldr	r3, [sp, #20]
    a922:	b133      	cbz	r3, a932 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    a924:	4659      	mov	r1, fp
    a926:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    a92a:	47c8      	blx	r9
    a92c:	2800      	cmp	r0, #0
    a92e:	dbd7      	blt.n	a8e0 <z_cbvprintf_impl+0x6c8>
    a930:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    a932:	9e04      	ldr	r6, [sp, #16]
    a934:	442e      	add	r6, r5
    a936:	e005      	b.n	a944 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    a938:	4659      	mov	r1, fp
    a93a:	2030      	movs	r0, #48	; 0x30
    a93c:	47c8      	blx	r9
    a93e:	2800      	cmp	r0, #0
    a940:	dbce      	blt.n	a8e0 <z_cbvprintf_impl+0x6c8>
    a942:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    a944:	1b73      	subs	r3, r6, r5
    a946:	2b00      	cmp	r3, #0
    a948:	dcf6      	bgt.n	a938 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    a94a:	4653      	mov	r3, sl
    a94c:	463a      	mov	r2, r7
    a94e:	4659      	mov	r1, fp
    a950:	4648      	mov	r0, r9
    a952:	f011 f9d3 	bl	1bcfc <outs>
    a956:	2800      	cmp	r0, #0
    a958:	dbc2      	blt.n	a8e0 <z_cbvprintf_impl+0x6c8>
    a95a:	4405      	add	r5, r0
		while (width > 0) {
    a95c:	44a8      	add	r8, r5
    a95e:	eba8 0305 	sub.w	r3, r8, r5
    a962:	2b00      	cmp	r3, #0
    a964:	f77f ae6b 	ble.w	a63e <z_cbvprintf_impl+0x426>
			OUTC(' ');
    a968:	4659      	mov	r1, fp
    a96a:	2020      	movs	r0, #32
    a96c:	47c8      	blx	r9
    a96e:	2800      	cmp	r0, #0
    a970:	dbb6      	blt.n	a8e0 <z_cbvprintf_impl+0x6c8>
    a972:	3501      	adds	r5, #1
			--width;
    a974:	e7f3      	b.n	a95e <z_cbvprintf_impl+0x746>
    a976:	bf00      	nop
    a978:	00020a81 	.word	0x00020a81

0000a97c <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    a97c:	b538      	push	{r3, r4, r5, lr}
    a97e:	460d      	mov	r5, r1
    a980:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    a982:	2220      	movs	r2, #32
    a984:	2100      	movs	r1, #0
    a986:	f012 f9f1 	bl	1cd6c <memset>
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    a98a:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    a98c:	68eb      	ldr	r3, [r5, #12]
    a98e:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    a990:	68ab      	ldr	r3, [r5, #8]
    a992:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    a994:	682b      	ldr	r3, [r5, #0]
    a996:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    a998:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    a99a:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    a99c:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    a99e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    a9a0:	b123      	cbz	r3, a9ac <mpsc_pbuf_init+0x30>
    a9a2:	1e59      	subs	r1, r3, #1
    a9a4:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    a9a6:	bf08      	it	eq
    a9a8:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    a9ac:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    a9ae:	2201      	movs	r2, #1
    a9b0:	2100      	movs	r1, #0
    a9b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a9b6:	f014 fb9a 	bl	1f0ee <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    a9ba:	b148      	cbz	r0, a9d0 <mpsc_pbuf_init+0x54>
    a9bc:	4905      	ldr	r1, [pc, #20]	; (a9d4 <mpsc_pbuf_init+0x58>)
    a9be:	4806      	ldr	r0, [pc, #24]	; (a9d8 <mpsc_pbuf_init+0x5c>)
    a9c0:	232e      	movs	r3, #46	; 0x2e
    a9c2:	4a06      	ldr	r2, [pc, #24]	; (a9dc <mpsc_pbuf_init+0x60>)
    a9c4:	f011 f9b8 	bl	1bd38 <assert_print>
    a9c8:	212e      	movs	r1, #46	; 0x2e
    a9ca:	4804      	ldr	r0, [pc, #16]	; (a9dc <mpsc_pbuf_init+0x60>)
    a9cc:	f011 f9ad 	bl	1bd2a <assert_post_action>
	ARG_UNUSED(err);
}
    a9d0:	bd38      	pop	{r3, r4, r5, pc}
    a9d2:	bf00      	nop
    a9d4:	00020aad 	.word	0x00020aad
    a9d8:	000205a4 	.word	0x000205a4
    a9dc:	00020a87 	.word	0x00020a87

0000a9e0 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9e4:	b087      	sub	sp, #28
    a9e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    a9ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    a9ec:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    a9ee:	3b01      	subs	r3, #1
    a9f0:	428b      	cmp	r3, r1
{
    a9f2:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    a9f4:	f0c0 80a0 	bcc.w	ab38 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    a9f8:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    a9fa:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    a9fc:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    aa00:	f04f 0320 	mov.w	r3, #32
    aa04:	f3ef 8b11 	mrs	fp, BASEPRI
    aa08:	f383 8812 	msr	BASEPRI_MAX, r3
    aa0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa10:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    aa12:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa14:	f00d fbce 	bl	181b4 <z_spin_lock_valid>
    aa18:	b958      	cbnz	r0, aa32 <mpsc_pbuf_alloc+0x52>
    aa1a:	2394      	movs	r3, #148	; 0x94
    aa1c:	4a49      	ldr	r2, [pc, #292]	; (ab44 <mpsc_pbuf_alloc+0x164>)
    aa1e:	494a      	ldr	r1, [pc, #296]	; (ab48 <mpsc_pbuf_alloc+0x168>)
    aa20:	484a      	ldr	r0, [pc, #296]	; (ab4c <mpsc_pbuf_alloc+0x16c>)
    aa22:	f011 f989 	bl	1bd38 <assert_print>
    aa26:	4629      	mov	r1, r5
    aa28:	4849      	ldr	r0, [pc, #292]	; (ab50 <mpsc_pbuf_alloc+0x170>)
    aa2a:	f011 f985 	bl	1bd38 <assert_print>
    aa2e:	2194      	movs	r1, #148	; 0x94
    aa30:	e050      	b.n	aad4 <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    aa32:	4628      	mov	r0, r5
    aa34:	f00d fbda 	bl	181ec <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    aa38:	a905      	add	r1, sp, #20
    aa3a:	4620      	mov	r0, r4
    aa3c:	f011 f989 	bl	1bd52 <free_space>

		if (free_wlen >= wlen) {
    aa40:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    aa42:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    aa44:	42b9      	cmp	r1, r7
    aa46:	d328      	bcc.n	aa9a <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    aa48:	6822      	ldr	r2, [r4, #0]
			item =
    aa4a:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    aa4c:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    aa4e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    aa52:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    aa56:	f021 0103 	bic.w	r1, r1, #3
    aa5a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    aa5e:	6821      	ldr	r1, [r4, #0]
    aa60:	463a      	mov	r2, r7
    aa62:	f011 f998 	bl	1bd96 <idx_inc>
		cont = false;
    aa66:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    aa6a:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa6c:	4628      	mov	r0, r5
    aa6e:	f00d fbaf 	bl	181d0 <z_spin_unlock_valid>
    aa72:	b320      	cbz	r0, aabe <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    aa74:	f389 8811 	msr	BASEPRI, r9
    aa78:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    aa7c:	f1b8 0f00 	cmp.w	r8, #0
    aa80:	d05c      	beq.n	ab3c <mpsc_pbuf_alloc+0x15c>
    aa82:	b146      	cbz	r6, aa96 <mpsc_pbuf_alloc+0xb6>
    aa84:	f89d 3013 	ldrb.w	r3, [sp, #19]
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d0b9      	beq.n	aa00 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    aa8c:	69a3      	ldr	r3, [r4, #24]
    aa8e:	b113      	cbz	r3, aa96 <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    aa90:	4631      	mov	r1, r6
    aa92:	4620      	mov	r0, r4
    aa94:	4798      	blx	r3
{
    aa96:	2600      	movs	r6, #0
    aa98:	e7b2      	b.n	aa00 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    aa9a:	b118      	cbz	r0, aaa4 <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    aa9c:	4620      	mov	r0, r4
    aa9e:	f011 f988 	bl	1bdb2 <add_skip_item>
			cont = true;
    aaa2:	e7e3      	b.n	aa6c <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    aaa4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    aaa8:	4313      	orrs	r3, r2
    aaaa:	d036      	beq.n	ab1a <mpsc_pbuf_alloc+0x13a>
    aaac:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    aaae:	f014 facd 	bl	1f04c <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    aab2:	9903      	ldr	r1, [sp, #12]
    aab4:	bb88      	cbnz	r0, ab1a <mpsc_pbuf_alloc+0x13a>
    aab6:	4628      	mov	r0, r5
    aab8:	f00d fb8a 	bl	181d0 <z_spin_unlock_valid>
    aabc:	b968      	cbnz	r0, aada <mpsc_pbuf_alloc+0xfa>
    aabe:	23c2      	movs	r3, #194	; 0xc2
    aac0:	4a20      	ldr	r2, [pc, #128]	; (ab44 <mpsc_pbuf_alloc+0x164>)
    aac2:	4924      	ldr	r1, [pc, #144]	; (ab54 <mpsc_pbuf_alloc+0x174>)
    aac4:	4821      	ldr	r0, [pc, #132]	; (ab4c <mpsc_pbuf_alloc+0x16c>)
    aac6:	f011 f937 	bl	1bd38 <assert_print>
    aaca:	4629      	mov	r1, r5
    aacc:	4822      	ldr	r0, [pc, #136]	; (ab58 <mpsc_pbuf_alloc+0x178>)
    aace:	f011 f933 	bl	1bd38 <assert_print>
    aad2:	21c2      	movs	r1, #194	; 0xc2
    aad4:	481b      	ldr	r0, [pc, #108]	; (ab44 <mpsc_pbuf_alloc+0x164>)
    aad6:	f011 f928 	bl	1bd2a <assert_post_action>
    aada:	f38b 8811 	msr	BASEPRI, fp
    aade:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    aae2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    aae6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    aaea:	f00d febd 	bl	18868 <z_impl_k_sem_take>
    aaee:	4680      	mov	r8, r0
	__asm__ volatile(
    aaf0:	f04f 0320 	mov.w	r3, #32
    aaf4:	f3ef 8911 	mrs	r9, BASEPRI
    aaf8:	f383 8812 	msr	BASEPRI_MAX, r3
    aafc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab00:	4628      	mov	r0, r5
    ab02:	f00d fb57 	bl	181b4 <z_spin_lock_valid>
    ab06:	2800      	cmp	r0, #0
    ab08:	d087      	beq.n	aa1a <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    ab0a:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    ab0e:	4628      	mov	r0, r5
    ab10:	f00d fb6c 	bl	181ec <z_spin_lock_set_owner>
    ab14:	ea4f 1858 	mov.w	r8, r8, lsr #5
    ab18:	e7a8      	b.n	aa6c <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    ab1a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    ab1c:	4620      	mov	r0, r4
    ab1e:	f10d 0313 	add.w	r3, sp, #19
    ab22:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ab26:	f011 f967 	bl	1bdf8 <drop_item_locked>
			cont = dropped_item != NULL;
    ab2a:	f1b0 0800 	subs.w	r8, r0, #0
    ab2e:	4606      	mov	r6, r0
    ab30:	bf18      	it	ne
    ab32:	f04f 0801 	movne.w	r8, #1
    ab36:	e799      	b.n	aa6c <mpsc_pbuf_alloc+0x8c>
		return NULL;
    ab38:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    ab3c:	4650      	mov	r0, sl
    ab3e:	b007      	add	sp, #28
    ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab44:	000209d8 	.word	0x000209d8
    ab48:	00020a31 	.word	0x00020a31
    ab4c:	000205a4 	.word	0x000205a4
    ab50:	00020a46 	.word	0x00020a46
    ab54:	00020a05 	.word	0x00020a05
    ab58:	00020a1c 	.word	0x00020a1c

0000ab5c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    ab5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab60:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ab62:	69c3      	ldr	r3, [r0, #28]
    ab64:	4608      	mov	r0, r1
{
    ab66:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    ab68:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    ab6a:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    ab6e:	4607      	mov	r7, r0
    ab70:	f04f 0320 	mov.w	r3, #32
    ab74:	f3ef 8811 	mrs	r8, BASEPRI
    ab78:	f383 8812 	msr	BASEPRI_MAX, r3
    ab7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab80:	4628      	mov	r0, r5
    ab82:	f00d fb17 	bl	181b4 <z_spin_lock_valid>
    ab86:	b968      	cbnz	r0, aba4 <mpsc_pbuf_commit+0x48>
    ab88:	2394      	movs	r3, #148	; 0x94
    ab8a:	4a19      	ldr	r2, [pc, #100]	; (abf0 <mpsc_pbuf_commit+0x94>)
    ab8c:	4919      	ldr	r1, [pc, #100]	; (abf4 <mpsc_pbuf_commit+0x98>)
    ab8e:	481a      	ldr	r0, [pc, #104]	; (abf8 <mpsc_pbuf_commit+0x9c>)
    ab90:	f011 f8d2 	bl	1bd38 <assert_print>
    ab94:	4629      	mov	r1, r5
    ab96:	4819      	ldr	r0, [pc, #100]	; (abfc <mpsc_pbuf_commit+0xa0>)
    ab98:	f011 f8ce 	bl	1bd38 <assert_print>
    ab9c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ab9e:	4814      	ldr	r0, [pc, #80]	; (abf0 <mpsc_pbuf_commit+0x94>)
    aba0:	f011 f8c3 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
    aba4:	4628      	mov	r0, r5
    aba6:	f00d fb21 	bl	181ec <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    abaa:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    abac:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    abae:	f043 0301 	orr.w	r3, r3, #1
    abb2:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    abb4:	6861      	ldr	r1, [r4, #4]
    abb6:	4620      	mov	r0, r4
    abb8:	f011 f8ed 	bl	1bd96 <idx_inc>
    abbc:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    abbe:	4620      	mov	r0, r4
    abc0:	f011 f90d 	bl	1bdde <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abc4:	4628      	mov	r0, r5
    abc6:	f00d fb03 	bl	181d0 <z_spin_unlock_valid>
    abca:	b958      	cbnz	r0, abe4 <mpsc_pbuf_commit+0x88>
    abcc:	23c2      	movs	r3, #194	; 0xc2
    abce:	4a08      	ldr	r2, [pc, #32]	; (abf0 <mpsc_pbuf_commit+0x94>)
    abd0:	490b      	ldr	r1, [pc, #44]	; (ac00 <mpsc_pbuf_commit+0xa4>)
    abd2:	4809      	ldr	r0, [pc, #36]	; (abf8 <mpsc_pbuf_commit+0x9c>)
    abd4:	f011 f8b0 	bl	1bd38 <assert_print>
    abd8:	4629      	mov	r1, r5
    abda:	480a      	ldr	r0, [pc, #40]	; (ac04 <mpsc_pbuf_commit+0xa8>)
    abdc:	f011 f8ac 	bl	1bd38 <assert_print>
    abe0:	21c2      	movs	r1, #194	; 0xc2
    abe2:	e7dc      	b.n	ab9e <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    abe4:	f388 8811 	msr	BASEPRI, r8
    abe8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    abec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abf0:	000209d8 	.word	0x000209d8
    abf4:	00020a31 	.word	0x00020a31
    abf8:	000205a4 	.word	0x000205a4
    abfc:	00020a46 	.word	0x00020a46
    ac00:	00020a05 	.word	0x00020a05
    ac04:	00020a1c 	.word	0x00020a1c

0000ac08 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    ac08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac0c:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    ac0e:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    ac12:	f04f 0320 	mov.w	r3, #32
    ac16:	f3ef 8811 	mrs	r8, BASEPRI
    ac1a:	f383 8812 	msr	BASEPRI_MAX, r3
    ac1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac22:	4638      	mov	r0, r7
    ac24:	f00d fac6 	bl	181b4 <z_spin_lock_valid>
    ac28:	4605      	mov	r5, r0
    ac2a:	b968      	cbnz	r0, ac48 <mpsc_pbuf_claim+0x40>
    ac2c:	2394      	movs	r3, #148	; 0x94
    ac2e:	4a33      	ldr	r2, [pc, #204]	; (acfc <mpsc_pbuf_claim+0xf4>)
    ac30:	4933      	ldr	r1, [pc, #204]	; (ad00 <mpsc_pbuf_claim+0xf8>)
    ac32:	4834      	ldr	r0, [pc, #208]	; (ad04 <mpsc_pbuf_claim+0xfc>)
    ac34:	f011 f880 	bl	1bd38 <assert_print>
    ac38:	4639      	mov	r1, r7
    ac3a:	4833      	ldr	r0, [pc, #204]	; (ad08 <mpsc_pbuf_claim+0x100>)
    ac3c:	f011 f87c 	bl	1bd38 <assert_print>
    ac40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ac42:	482e      	ldr	r0, [pc, #184]	; (acfc <mpsc_pbuf_claim+0xf4>)
    ac44:	f011 f871 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
    ac48:	4638      	mov	r0, r7
    ac4a:	f00d facf 	bl	181ec <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    ac4e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    ac52:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    ac54:	bf88      	it	hi
    ac56:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    ac58:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    ac5a:	2b00      	cmp	r3, #0
    ac5c:	d03f      	beq.n	acde <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    ac5e:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    ac60:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    ac64:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    ac68:	f013 0003 	ands.w	r0, r3, #3
    ac6c:	d03a      	beq.n	ace4 <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    ac6e:	2802      	cmp	r0, #2
    ac70:	d103      	bne.n	ac7a <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    ac72:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    ac76:	08b6      	lsrs	r6, r6, #2
    ac78:	d105      	bne.n	ac86 <mpsc_pbuf_claim+0x7e>
    ac7a:	07d8      	lsls	r0, r3, #31
    ac7c:	d41f      	bmi.n	acbe <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    ac7e:	4648      	mov	r0, r9
    ac80:	69e3      	ldr	r3, [r4, #28]
    ac82:	4798      	blx	r3
    ac84:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    ac86:	68a1      	ldr	r1, [r4, #8]
    ac88:	4632      	mov	r2, r6
    ac8a:	4620      	mov	r0, r4
    ac8c:	f011 f883 	bl	1bd96 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    ac90:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    ac92:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    ac94:	4632      	mov	r2, r6
    ac96:	4620      	mov	r0, r4
    ac98:	f011 f87d 	bl	1bd96 <idx_inc>
				buffer->rd_idx =
    ac9c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ac9e:	4638      	mov	r0, r7
    aca0:	f00d fa96 	bl	181d0 <z_spin_unlock_valid>
    aca4:	bb00      	cbnz	r0, ace8 <mpsc_pbuf_claim+0xe0>
    aca6:	23c2      	movs	r3, #194	; 0xc2
    aca8:	4a14      	ldr	r2, [pc, #80]	; (acfc <mpsc_pbuf_claim+0xf4>)
    acaa:	4918      	ldr	r1, [pc, #96]	; (ad0c <mpsc_pbuf_claim+0x104>)
    acac:	4815      	ldr	r0, [pc, #84]	; (ad04 <mpsc_pbuf_claim+0xfc>)
    acae:	f011 f843 	bl	1bd38 <assert_print>
    acb2:	4639      	mov	r1, r7
    acb4:	4816      	ldr	r0, [pc, #88]	; (ad10 <mpsc_pbuf_claim+0x108>)
    acb6:	f011 f83f 	bl	1bd38 <assert_print>
    acba:	21c2      	movs	r1, #194	; 0xc2
    acbc:	e7c1      	b.n	ac42 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    acbe:	f043 0302 	orr.w	r3, r3, #2
    acc2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    acc6:	69e3      	ldr	r3, [r4, #28]
    acc8:	4648      	mov	r0, r9
    acca:	68a5      	ldr	r5, [r4, #8]
    accc:	4798      	blx	r3
    acce:	4629      	mov	r1, r5
    acd0:	4602      	mov	r2, r0
    acd2:	4620      	mov	r0, r4
    acd4:	f011 f85f 	bl	1bd96 <idx_inc>
		cont = false;
    acd8:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    acda:	60a0      	str	r0, [r4, #8]
    acdc:	e7df      	b.n	ac9e <mpsc_pbuf_claim+0x96>
		cont = false;
    acde:	461d      	mov	r5, r3
			item = NULL;
    ace0:	46a9      	mov	r9, r5
    ace2:	e7dc      	b.n	ac9e <mpsc_pbuf_claim+0x96>
		cont = false;
    ace4:	4605      	mov	r5, r0
    ace6:	e7fb      	b.n	ace0 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    ace8:	f388 8811 	msr	BASEPRI, r8
    acec:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    acf0:	2d00      	cmp	r5, #0
    acf2:	d18e      	bne.n	ac12 <mpsc_pbuf_claim+0xa>

	return item;
}
    acf4:	4648      	mov	r0, r9
    acf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    acfa:	bf00      	nop
    acfc:	000209d8 	.word	0x000209d8
    ad00:	00020a31 	.word	0x00020a31
    ad04:	000205a4 	.word	0x000205a4
    ad08:	00020a46 	.word	0x00020a46
    ad0c:	00020a05 	.word	0x00020a05
    ad10:	00020a1c 	.word	0x00020a1c

0000ad14 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    ad14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad18:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ad1a:	69c3      	ldr	r3, [r0, #28]
    ad1c:	4608      	mov	r0, r1
{
    ad1e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ad20:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    ad22:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    ad26:	4607      	mov	r7, r0
	__asm__ volatile(
    ad28:	f04f 0320 	mov.w	r3, #32
    ad2c:	f3ef 8811 	mrs	r8, BASEPRI
    ad30:	f383 8812 	msr	BASEPRI_MAX, r3
    ad34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad38:	4630      	mov	r0, r6
    ad3a:	f00d fa3b 	bl	181b4 <z_spin_lock_valid>
    ad3e:	b968      	cbnz	r0, ad5c <mpsc_pbuf_free+0x48>
    ad40:	2394      	movs	r3, #148	; 0x94
    ad42:	4a23      	ldr	r2, [pc, #140]	; (add0 <mpsc_pbuf_free+0xbc>)
    ad44:	4923      	ldr	r1, [pc, #140]	; (add4 <mpsc_pbuf_free+0xc0>)
    ad46:	4824      	ldr	r0, [pc, #144]	; (add8 <mpsc_pbuf_free+0xc4>)
    ad48:	f010 fff6 	bl	1bd38 <assert_print>
    ad4c:	4631      	mov	r1, r6
    ad4e:	4823      	ldr	r0, [pc, #140]	; (addc <mpsc_pbuf_free+0xc8>)
    ad50:	f010 fff2 	bl	1bd38 <assert_print>
    ad54:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad56:	481e      	ldr	r0, [pc, #120]	; (add0 <mpsc_pbuf_free+0xbc>)
    ad58:	f010 ffe7 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
    ad5c:	4630      	mov	r0, r6
    ad5e:	f00d fa45 	bl	181ec <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    ad62:	782b      	ldrb	r3, [r5, #0]
    ad64:	f36f 0300 	bfc	r3, #0, #1
    ad68:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ad6a:	6923      	ldr	r3, [r4, #16]
    ad6c:	079b      	lsls	r3, r3, #30
    ad6e:	d505      	bpl.n	ad7c <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    ad70:	68e2      	ldr	r2, [r4, #12]
    ad72:	6a23      	ldr	r3, [r4, #32]
    ad74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ad78:	429d      	cmp	r5, r3
    ad7a:	d119      	bne.n	adb0 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    ad7c:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ad7e:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    ad80:	f36f 0341 	bfc	r3, #1, #1
    ad84:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ad86:	68e1      	ldr	r1, [r4, #12]
    ad88:	4620      	mov	r0, r4
    ad8a:	f011 f804 	bl	1bd96 <idx_inc>
    ad8e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad90:	4630      	mov	r0, r6
    ad92:	f00d fa1d 	bl	181d0 <z_spin_unlock_valid>
    ad96:	b980      	cbnz	r0, adba <mpsc_pbuf_free+0xa6>
    ad98:	23c2      	movs	r3, #194	; 0xc2
    ad9a:	4a0d      	ldr	r2, [pc, #52]	; (add0 <mpsc_pbuf_free+0xbc>)
    ad9c:	4910      	ldr	r1, [pc, #64]	; (ade0 <mpsc_pbuf_free+0xcc>)
    ad9e:	480e      	ldr	r0, [pc, #56]	; (add8 <mpsc_pbuf_free+0xc4>)
    ada0:	f010 ffca 	bl	1bd38 <assert_print>
    ada4:	4631      	mov	r1, r6
    ada6:	480f      	ldr	r0, [pc, #60]	; (ade4 <mpsc_pbuf_free+0xd0>)
    ada8:	f010 ffc6 	bl	1bd38 <assert_print>
    adac:	21c2      	movs	r1, #194	; 0xc2
    adae:	e7d2      	b.n	ad56 <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    adb0:	682b      	ldr	r3, [r5, #0]
    adb2:	f367 039f 	bfi	r3, r7, #2, #30
    adb6:	602b      	str	r3, [r5, #0]
    adb8:	e7ea      	b.n	ad90 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    adba:	f388 8811 	msr	BASEPRI, r8
    adbe:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    adc2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    adc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    adca:	f00d bd09 	b.w	187e0 <z_impl_k_sem_give>
    adce:	bf00      	nop
    add0:	000209d8 	.word	0x000209d8
    add4:	00020a31 	.word	0x00020a31
    add8:	000205a4 	.word	0x000205a4
    addc:	00020a46 	.word	0x00020a46
    ade0:	00020a05 	.word	0x00020a05
    ade4:	00020a1c 	.word	0x00020a1c

0000ade8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ade8:	b148      	cbz	r0, adfe <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    adea:	4b05      	ldr	r3, [pc, #20]	; (ae00 <arch_busy_wait+0x18>)
    adec:	4a05      	ldr	r2, [pc, #20]	; (ae04 <arch_busy_wait+0x1c>)
    adee:	681b      	ldr	r3, [r3, #0]
    adf0:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    adf4:	4358      	muls	r0, r3
    adf6:	4b04      	ldr	r3, [pc, #16]	; (ae08 <arch_busy_wait+0x20>)
    adf8:	f043 0301 	orr.w	r3, r3, #1
    adfc:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    adfe:	4770      	bx	lr
    ae00:	200082c4 	.word	0x200082c4
    ae04:	000f4240 	.word	0x000f4240
    ae08:	0001fa10 	.word	0x0001fa10

0000ae0c <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    ae0c:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    ae0e:	b570      	push	{r4, r5, r6, lr}
    ae10:	4605      	mov	r5, r0
    ae12:	461e      	mov	r6, r3
    ae14:	4608      	mov	r0, r1
    ae16:	d90b      	bls.n	ae30 <ppi_ipc_to_rtc.isra.0+0x24>
    ae18:	491d      	ldr	r1, [pc, #116]	; (ae90 <ppi_ipc_to_rtc.isra.0+0x84>)
    ae1a:	481e      	ldr	r0, [pc, #120]	; (ae94 <ppi_ipc_to_rtc.isra.0+0x88>)
    ae1c:	f240 13e7 	movw	r3, #487	; 0x1e7
    ae20:	4a1d      	ldr	r2, [pc, #116]	; (ae98 <ppi_ipc_to_rtc.isra.0+0x8c>)
    ae22:	f010 ff89 	bl	1bd38 <assert_print>
    ae26:	f240 11e7 	movw	r1, #487	; 0x1e7
    ae2a:	481b      	ldr	r0, [pc, #108]	; (ae98 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ae2c:	f010 ff7d 	bl	1bd2a <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    ae30:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    ae32:	f00a f925 	bl	15080 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    ae36:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    ae3a:	b1ae      	cbz	r6, ae68 <ppi_ipc_to_rtc.isra.0+0x5c>
    ae3c:	b950      	cbnz	r0, ae54 <ppi_ipc_to_rtc.isra.0+0x48>
    ae3e:	4917      	ldr	r1, [pc, #92]	; (ae9c <ppi_ipc_to_rtc.isra.0+0x90>)
    ae40:	f240 234e 	movw	r3, #590	; 0x24e
    ae44:	4a16      	ldr	r2, [pc, #88]	; (aea0 <ppi_ipc_to_rtc.isra.0+0x94>)
    ae46:	4813      	ldr	r0, [pc, #76]	; (ae94 <ppi_ipc_to_rtc.isra.0+0x88>)
    ae48:	f010 ff76 	bl	1bd38 <assert_print>
    ae4c:	f240 214e 	movw	r1, #590	; 0x24e
    ae50:	4813      	ldr	r0, [pc, #76]	; (aea0 <ppi_ipc_to_rtc.isra.0+0x94>)
    ae52:	e7eb      	b.n	ae2c <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    ae54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    ae58:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    ae5c:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    ae60:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    ae64:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    ae66:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ae68:	b948      	cbnz	r0, ae7e <ppi_ipc_to_rtc.isra.0+0x72>
    ae6a:	490c      	ldr	r1, [pc, #48]	; (ae9c <ppi_ipc_to_rtc.isra.0+0x90>)
    ae6c:	f240 2363 	movw	r3, #611	; 0x263
    ae70:	4a0b      	ldr	r2, [pc, #44]	; (aea0 <ppi_ipc_to_rtc.isra.0+0x94>)
    ae72:	4808      	ldr	r0, [pc, #32]	; (ae94 <ppi_ipc_to_rtc.isra.0+0x88>)
    ae74:	f010 ff60 	bl	1bd38 <assert_print>
    ae78:	f240 2163 	movw	r1, #611	; 0x263
    ae7c:	e7e8      	b.n	ae50 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    ae7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ae82:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    ae86:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    ae8a:	6016      	str	r6, [r2, #0]
    ae8c:	e7eb      	b.n	ae66 <ppi_ipc_to_rtc.isra.0+0x5a>
    ae8e:	bf00      	nop
    ae90:	00020aec 	.word	0x00020aec
    ae94:	000205a4 	.word	0x000205a4
    ae98:	00020aba 	.word	0x00020aba
    ae9c:	00020b2f 	.word	0x00020b2f
    aea0:	00020af7 	.word	0x00020af7

0000aea4 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    aea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    aea6:	b083      	sub	sp, #12
    aea8:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    aeaa:	1d38      	adds	r0, r7, #4
    aeac:	f00b f8f2 	bl	16094 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    aeb0:	4b24      	ldr	r3, [pc, #144]	; (af44 <sync_rtc_setup+0xa0>)
    aeb2:	4298      	cmp	r0, r3
    aeb4:	d143      	bne.n	af3e <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    aeb6:	f00a facb 	bl	15450 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    aeba:	1e04      	subs	r4, r0, #0
    aebc:	da13      	bge.n	aee6 <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    aebe:	7938      	ldrb	r0, [r7, #4]
    aec0:	f00b f8ee 	bl	160a0 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    aec4:	466d      	mov	r5, sp
    aec6:	b088      	sub	sp, #32
    aec8:	466a      	mov	r2, sp
    aeca:	4b1f      	ldr	r3, [pc, #124]	; (af48 <sync_rtc_setup+0xa4>)
    aecc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    aed0:	2303      	movs	r3, #3
    aed2:	f842 3f10 	str.w	r3, [r2, #16]!
    aed6:	2300      	movs	r3, #0
    aed8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    aedc:	481b      	ldr	r0, [pc, #108]	; (af4c <sync_rtc_setup+0xa8>)
    aede:	f000 fc93 	bl	b808 <z_impl_z_log_msg_static_create>
    aee2:	46ad      	mov	sp, r5
	}

	return rv;
    aee4:	e027      	b.n	af36 <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    aee6:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    aeea:	4d19      	ldr	r5, [pc, #100]	; (af50 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    aeec:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    aeee:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    aef0:	80fb      	strh	r3, [r7, #6]
    aef2:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    aef4:	687b      	ldr	r3, [r7, #4]
    aef6:	b914      	cbnz	r4, aefe <sync_rtc_setup+0x5a>
		return -ENOSYS;
    aef8:	f06f 0457 	mvn.w	r4, #87	; 0x57
    aefc:	e7e2      	b.n	aec4 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    aefe:	2108      	movs	r1, #8
    af00:	4628      	mov	r0, r5
    af02:	4a14      	ldr	r2, [pc, #80]	; (af54 <sync_rtc_setup+0xb0>)
    af04:	47a0      	blx	r4
	if (err < 0) {
    af06:	1e04      	subs	r4, r0, #0
    af08:	dbdc      	blt.n	aec4 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    af0a:	6933      	ldr	r3, [r6, #16]
    af0c:	2b00      	cmp	r3, #0
    af0e:	d0f3      	beq.n	aef8 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    af10:	2201      	movs	r2, #1
    af12:	2108      	movs	r1, #8
    af14:	4628      	mov	r0, r5
    af16:	4798      	blx	r3
	if (rv < 0) {
    af18:	1e04      	subs	r4, r0, #0
    af1a:	dbd3      	blt.n	aec4 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    af1c:	2301      	movs	r3, #1
    af1e:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    af20:	4a0d      	ldr	r2, [pc, #52]	; (af58 <sync_rtc_setup+0xb4>)
    af22:	fa03 f100 	lsl.w	r1, r3, r0
    af26:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    af2a:	79fa      	ldrb	r2, [r7, #7]
    af2c:	7979      	ldrb	r1, [r7, #5]
    af2e:	f7ff ff6d 	bl	ae0c <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    af32:	2c00      	cmp	r4, #0
    af34:	d1c6      	bne.n	aec4 <sync_rtc_setup+0x20>
}
    af36:	4620      	mov	r0, r4
    af38:	370c      	adds	r7, #12
    af3a:	46bd      	mov	sp, r7
    af3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    af3e:	f06f 0412 	mvn.w	r4, #18
    af42:	e7bf      	b.n	aec4 <sync_rtc_setup+0x20>
    af44:	0bad0000 	.word	0x0bad0000
    af48:	00020b33 	.word	0x00020b33
    af4c:	0001f988 	.word	0x0001f988
    af50:	0001f5b8 	.word	0x0001f5b8
    af54:	0000b00d 	.word	0x0000b00d
    af58:	40017000 	.word	0x40017000

0000af5c <rtc_cb>:
{
    af5c:	b570      	push	{r4, r5, r6, lr}
    af5e:	9e04      	ldr	r6, [sp, #16]
    af60:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    af64:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    af66:	f3c6 2607 	ubfx	r6, r6, #8, #8
    af6a:	4630      	mov	r0, r6
    af6c:	f00a f86e 	bl	1504c <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    af70:	2c0f      	cmp	r4, #15
    af72:	d90b      	bls.n	af8c <rtc_cb+0x30>
    af74:	491b      	ldr	r1, [pc, #108]	; (afe4 <rtc_cb+0x88>)
    af76:	481c      	ldr	r0, [pc, #112]	; (afe8 <rtc_cb+0x8c>)
    af78:	f240 13e1 	movw	r3, #481	; 0x1e1
    af7c:	4a1b      	ldr	r2, [pc, #108]	; (afec <rtc_cb+0x90>)
    af7e:	f010 fedb 	bl	1bd38 <assert_print>
    af82:	f240 11e1 	movw	r1, #481	; 0x1e1
    af86:	4819      	ldr	r0, [pc, #100]	; (afec <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    af88:	f010 fecf 	bl	1bd2a <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    af8c:	00a4      	lsls	r4, r4, #2
    af8e:	b2e4      	uxtb	r4, r4
    af90:	b950      	cbnz	r0, afa8 <rtc_cb+0x4c>
    af92:	4917      	ldr	r1, [pc, #92]	; (aff0 <rtc_cb+0x94>)
    af94:	4814      	ldr	r0, [pc, #80]	; (afe8 <rtc_cb+0x8c>)
    af96:	f44f 7317 	mov.w	r3, #604	; 0x25c
    af9a:	4a16      	ldr	r2, [pc, #88]	; (aff4 <rtc_cb+0x98>)
    af9c:	f010 fecc 	bl	1bd38 <assert_print>
    afa0:	f44f 7117 	mov.w	r1, #604	; 0x25c
    afa4:	4813      	ldr	r0, [pc, #76]	; (aff4 <rtc_cb+0x98>)
    afa6:	e7ef      	b.n	af88 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    afa8:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    afaa:	4b13      	ldr	r3, [pc, #76]	; (aff8 <rtc_cb+0x9c>)
    afac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    afb0:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    afb2:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    afb4:	4a11      	ldr	r2, [pc, #68]	; (affc <rtc_cb+0xa0>)
    afb6:	40ab      	lsls	r3, r5
    afb8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    afbc:	4630      	mov	r0, r6
    afbe:	f00a fa65 	bl	1548c <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    afc2:	4628      	mov	r0, r5
    afc4:	f00b f86c 	bl	160a0 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    afc8:	4b0d      	ldr	r3, [pc, #52]	; (b000 <rtc_cb+0xa4>)
    afca:	4298      	cmp	r0, r3
    afcc:	d008      	beq.n	afe0 <rtc_cb+0x84>
    afce:	490d      	ldr	r1, [pc, #52]	; (b004 <rtc_cb+0xa8>)
    afd0:	4805      	ldr	r0, [pc, #20]	; (afe8 <rtc_cb+0x8c>)
    afd2:	2374      	movs	r3, #116	; 0x74
    afd4:	4a0c      	ldr	r2, [pc, #48]	; (b008 <rtc_cb+0xac>)
    afd6:	f010 feaf 	bl	1bd38 <assert_print>
    afda:	2174      	movs	r1, #116	; 0x74
    afdc:	480a      	ldr	r0, [pc, #40]	; (b008 <rtc_cb+0xac>)
    afde:	e7d3      	b.n	af88 <rtc_cb+0x2c>
}
    afe0:	bd70      	pop	{r4, r5, r6, pc}
    afe2:	bf00      	nop
    afe4:	00020aec 	.word	0x00020aec
    afe8:	000205a4 	.word	0x000205a4
    afec:	00020aba 	.word	0x00020aba
    aff0:	00020b5b 	.word	0x00020b5b
    aff4:	00020af7 	.word	0x00020af7
    aff8:	4002a080 	.word	0x4002a080
    affc:	40017000 	.word	0x40017000
    b000:	0bad0000 	.word	0x0bad0000
    b004:	00020b96 	.word	0x00020b96
    b008:	00020b5f 	.word	0x00020b5f

0000b00c <mbox_callback>:
{
    b00c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b010:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    b012:	6883      	ldr	r3, [r0, #8]
    b014:	691b      	ldr	r3, [r3, #16]
    b016:	b94b      	cbnz	r3, b02c <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    b018:	4927      	ldr	r1, [pc, #156]	; (b0b8 <mbox_callback+0xac>)
    b01a:	4828      	ldr	r0, [pc, #160]	; (b0bc <mbox_callback+0xb0>)
    b01c:	23ca      	movs	r3, #202	; 0xca
    b01e:	4a28      	ldr	r2, [pc, #160]	; (b0c0 <mbox_callback+0xb4>)
    b020:	f010 fe8a 	bl	1bd38 <assert_print>
    b024:	21ca      	movs	r1, #202	; 0xca
    b026:	4826      	ldr	r0, [pc, #152]	; (b0c0 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    b028:	f010 fe7f 	bl	1bd2a <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    b02c:	2200      	movs	r2, #0
    b02e:	4798      	blx	r3
    b030:	4606      	mov	r6, r0
    b032:	2800      	cmp	r0, #0
    b034:	d1f0      	bne.n	b018 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    b036:	f3c4 2907 	ubfx	r9, r4, #8, #8
    b03a:	4648      	mov	r0, r9
    b03c:	f00a f83a 	bl	150b4 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    b040:	fa5f f884 	uxtb.w	r8, r4
    b044:	4633      	mov	r3, r6
    b046:	4649      	mov	r1, r9
    b048:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    b04a:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    b04c:	4640      	mov	r0, r8
    b04e:	f7ff fedd 	bl	ae0c <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    b052:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    b056:	4648      	mov	r0, r9
    b058:	f009 fff8 	bl	1504c <z_nrf_rtc_timer_compare_evt_address_get>
    b05c:	2d0f      	cmp	r5, #15
    b05e:	d90a      	bls.n	b076 <mbox_callback+0x6a>
    b060:	4918      	ldr	r1, [pc, #96]	; (b0c4 <mbox_callback+0xb8>)
    b062:	4816      	ldr	r0, [pc, #88]	; (b0bc <mbox_callback+0xb0>)
    b064:	f240 13e1 	movw	r3, #481	; 0x1e1
    b068:	4a17      	ldr	r2, [pc, #92]	; (b0c8 <mbox_callback+0xbc>)
    b06a:	f010 fe65 	bl	1bd38 <assert_print>
    b06e:	f240 11e1 	movw	r1, #481	; 0x1e1
    b072:	4815      	ldr	r0, [pc, #84]	; (b0c8 <mbox_callback+0xbc>)
    b074:	e7d8      	b.n	b028 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b076:	4a15      	ldr	r2, [pc, #84]	; (b0cc <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    b078:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b07a:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    b07c:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b080:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    b082:	b950      	cbnz	r0, b09a <mbox_callback+0x8e>
    b084:	4912      	ldr	r1, [pc, #72]	; (b0d0 <mbox_callback+0xc4>)
    b086:	480d      	ldr	r0, [pc, #52]	; (b0bc <mbox_callback+0xb0>)
    b088:	f44f 7312 	mov.w	r3, #584	; 0x248
    b08c:	4a11      	ldr	r2, [pc, #68]	; (b0d4 <mbox_callback+0xc8>)
    b08e:	f010 fe53 	bl	1bd38 <assert_print>
    b092:	f44f 7112 	mov.w	r1, #584	; 0x248
    b096:	480f      	ldr	r0, [pc, #60]	; (b0d4 <mbox_callback+0xc8>)
    b098:	e7c6      	b.n	b028 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    b09a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    b09e:	4b0e      	ldr	r3, [pc, #56]	; (b0d8 <mbox_callback+0xcc>)
    b0a0:	f107 0232 	add.w	r2, r7, #50	; 0x32
    b0a4:	9300      	str	r3, [sp, #0]
    b0a6:	4648      	mov	r0, r9
    b0a8:	4633      	mov	r3, r6
    b0aa:	9401      	str	r4, [sp, #4]
    b0ac:	0052      	lsls	r2, r2, #1
    b0ae:	f00a f8df 	bl	15270 <z_nrf_rtc_timer_set>
}
    b0b2:	b003      	add	sp, #12
    b0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b0b8:	00020aad 	.word	0x00020aad
    b0bc:	000205a4 	.word	0x000205a4
    b0c0:	00020b5f 	.word	0x00020b5f
    b0c4:	00020aec 	.word	0x00020aec
    b0c8:	00020aba 	.word	0x00020aba
    b0cc:	4002a080 	.word	0x4002a080
    b0d0:	00020b5b 	.word	0x00020b5b
    b0d4:	00020af7 	.word	0x00020af7
    b0d8:	0000af5d 	.word	0x0000af5d

0000b0dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b0dc:	f013 ba57 	b.w	1e58e <SystemInit>

0000b0e0 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    b0e0:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    b0e2:	aa01      	add	r2, sp, #4
    b0e4:	f013 fa3a 	bl	1e55c <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    b0e8:	4604      	mov	r4, r0
    b0ea:	b168      	cbz	r0, b108 <soc_secure_gpio_pin_mcu_select+0x28>
    b0ec:	2316      	movs	r3, #22
    b0ee:	4a0e      	ldr	r2, [pc, #56]	; (b128 <soc_secure_gpio_pin_mcu_select+0x48>)
    b0f0:	490e      	ldr	r1, [pc, #56]	; (b12c <soc_secure_gpio_pin_mcu_select+0x4c>)
    b0f2:	480f      	ldr	r0, [pc, #60]	; (b130 <soc_secure_gpio_pin_mcu_select+0x50>)
    b0f4:	f010 fe20 	bl	1bd38 <assert_print>
    b0f8:	4621      	mov	r1, r4
    b0fa:	480e      	ldr	r0, [pc, #56]	; (b134 <soc_secure_gpio_pin_mcu_select+0x54>)
    b0fc:	f010 fe1c 	bl	1bd38 <assert_print>
    b100:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    b102:	4809      	ldr	r0, [pc, #36]	; (b128 <soc_secure_gpio_pin_mcu_select+0x48>)
    b104:	f010 fe11 	bl	1bd2a <assert_post_action>
    b108:	9b01      	ldr	r3, [sp, #4]
    b10a:	b15b      	cbz	r3, b124 <soc_secure_gpio_pin_mcu_select+0x44>
    b10c:	2317      	movs	r3, #23
    b10e:	4a06      	ldr	r2, [pc, #24]	; (b128 <soc_secure_gpio_pin_mcu_select+0x48>)
    b110:	4909      	ldr	r1, [pc, #36]	; (b138 <soc_secure_gpio_pin_mcu_select+0x58>)
    b112:	4807      	ldr	r0, [pc, #28]	; (b130 <soc_secure_gpio_pin_mcu_select+0x50>)
    b114:	f010 fe10 	bl	1bd38 <assert_print>
    b118:	9901      	ldr	r1, [sp, #4]
    b11a:	4808      	ldr	r0, [pc, #32]	; (b13c <soc_secure_gpio_pin_mcu_select+0x5c>)
    b11c:	f010 fe0c 	bl	1bd38 <assert_print>
    b120:	2117      	movs	r1, #23
    b122:	e7ee      	b.n	b102 <soc_secure_gpio_pin_mcu_select+0x22>
}
    b124:	b002      	add	sp, #8
    b126:	bd10      	pop	{r4, pc}
    b128:	00020bb3 	.word	0x00020bb3
    b12c:	00020bed 	.word	0x00020bed
    b130:	000205a4 	.word	0x000205a4
    b134:	00020c0d 	.word	0x00020c0d
    b138:	00020c27 	.word	0x00020c27
    b13c:	00020c33 	.word	0x00020c33

0000b140 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    b140:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    b142:	2200      	movs	r2, #0
{
    b144:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    b146:	490f      	ldr	r1, [pc, #60]	; (b184 <enable_logger+0x44>)
    b148:	480f      	ldr	r0, [pc, #60]	; (b188 <enable_logger+0x48>)
    b14a:	f014 f8a1 	bl	1f290 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b14e:	2200      	movs	r2, #0
    b150:	2300      	movs	r3, #0
    b152:	2400      	movs	r4, #0
    b154:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b158:	230e      	movs	r3, #14
    b15a:	4d0c      	ldr	r5, [pc, #48]	; (b18c <enable_logger+0x4c>)
    b15c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    b160:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b164:	4628      	mov	r0, r5
    b166:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b16a:	4b09      	ldr	r3, [pc, #36]	; (b190 <enable_logger+0x50>)
    b16c:	4909      	ldr	r1, [pc, #36]	; (b194 <enable_logger+0x54>)
    b16e:	9400      	str	r4, [sp, #0]
    b170:	f00c ff56 	bl	18020 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    b174:	4908      	ldr	r1, [pc, #32]	; (b198 <enable_logger+0x58>)
    b176:	4628      	mov	r0, r5
    b178:	f013 ff6e 	bl	1f058 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    b17c:	4620      	mov	r0, r4
    b17e:	b009      	add	sp, #36	; 0x24
    b180:	bd30      	pop	{r4, r5, pc}
    b182:	bf00      	nop
    b184:	0000b2e1 	.word	0x0000b2e1
    b188:	20008c50 	.word	0x20008c50
    b18c:	200087c0 	.word	0x200087c0
    b190:	0000b5b1 	.word	0x0000b5b1
    b194:	2000a060 	.word	0x2000a060
    b198:	00020c4d 	.word	0x00020c4d

0000b19c <activate_foreach_backend>:
{
    b19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1a0:	4604      	mov	r4, r0
	while (mask_cpy) {
    b1a2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    b1a4:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b1a8:	f8df 8050 	ldr.w	r8, [pc, #80]	; b1fc <activate_foreach_backend+0x60>
	while (mask_cpy) {
    b1ac:	b914      	cbnz	r4, b1b4 <activate_foreach_backend+0x18>
}
    b1ae:	4638      	mov	r0, r7
    b1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    b1b4:	fa94 f5a4 	rbit	r5, r4
    b1b8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    b1bc:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b1c0:	012e      	lsls	r6, r5, #4
    b1c2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    b1c6:	ea6f 0a03 	mvn.w	sl, r3
    b1ca:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b1ce:	7b2b      	ldrb	r3, [r5, #12]
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d0eb      	beq.n	b1ac <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    b1d4:	f858 3006 	ldr.w	r3, [r8, r6]
    b1d8:	691b      	ldr	r3, [r3, #16]
    b1da:	b94b      	cbnz	r3, b1f0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    b1dc:	4446      	add	r6, r8
			log_backend_enable(backend,
    b1de:	6873      	ldr	r3, [r6, #4]
    b1e0:	2204      	movs	r2, #4
    b1e2:	4628      	mov	r0, r5
    b1e4:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    b1e6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    b1ea:	f000 fae7 	bl	b7bc <log_backend_enable>
    b1ee:	e7dd      	b.n	b1ac <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    b1f0:	4628      	mov	r0, r5
    b1f2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b1f4:	2800      	cmp	r0, #0
    b1f6:	d1d9      	bne.n	b1ac <activate_foreach_backend+0x10>
    b1f8:	e7f0      	b.n	b1dc <activate_foreach_backend+0x40>
    b1fa:	bf00      	nop
    b1fc:	0001f998 	.word	0x0001f998

0000b200 <z_log_init>:
{
    b200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    b204:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b2c0 <z_log_init+0xc0>
    b208:	4c2e      	ldr	r4, [pc, #184]	; (b2c4 <z_log_init+0xc4>)
    b20a:	4680      	mov	r8, r0
    b20c:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    b210:	2b9f      	cmp	r3, #159	; 0x9f
{
    b212:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    b214:	d90b      	bls.n	b22e <z_log_init+0x2e>
    b216:	492c      	ldr	r1, [pc, #176]	; (b2c8 <z_log_init+0xc8>)
    b218:	f240 1315 	movw	r3, #277	; 0x115
    b21c:	4a2b      	ldr	r2, [pc, #172]	; (b2cc <z_log_init+0xcc>)
    b21e:	482c      	ldr	r0, [pc, #176]	; (b2d0 <z_log_init+0xd0>)
    b220:	f010 fd8a 	bl	1bd38 <assert_print>
    b224:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b228:	4828      	ldr	r0, [pc, #160]	; (b2cc <z_log_init+0xcc>)
    b22a:	f010 fd7e 	bl	1bd2a <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    b22e:	4829      	ldr	r0, [pc, #164]	; (b2d4 <z_log_init+0xd4>)
    b230:	f010 fe99 	bl	1bf66 <atomic_inc>
    b234:	4606      	mov	r6, r0
    b236:	b360      	cbz	r0, b292 <z_log_init+0x92>
	uint32_t mask = 0;
    b238:	2500      	movs	r5, #0
}
    b23a:	4628      	mov	r0, r5
    b23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    b240:	7b23      	ldrb	r3, [r4, #12]
    b242:	b173      	cbz	r3, b262 <z_log_init+0x62>
	if (backend->api->init) {
    b244:	6823      	ldr	r3, [r4, #0]
    b246:	68db      	ldr	r3, [r3, #12]
    b248:	b10b      	cbz	r3, b24e <z_log_init+0x4e>
		backend->api->init(backend);
    b24a:	4620      	mov	r0, r4
    b24c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    b24e:	6823      	ldr	r3, [r4, #0]
    b250:	691b      	ldr	r3, [r3, #16]
    b252:	b9b3      	cbnz	r3, b282 <z_log_init+0x82>
				log_backend_enable(backend,
    b254:	6863      	ldr	r3, [r4, #4]
    b256:	2204      	movs	r2, #4
    b258:	4620      	mov	r0, r4
    b25a:	6819      	ldr	r1, [r3, #0]
    b25c:	f000 faae 	bl	b7bc <log_backend_enable>
			i++;
    b260:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b262:	3410      	adds	r4, #16
    b264:	454c      	cmp	r4, r9
    b266:	d918      	bls.n	b29a <z_log_init+0x9a>
    b268:	491b      	ldr	r1, [pc, #108]	; (b2d8 <z_log_init+0xd8>)
    b26a:	f44f 7391 	mov.w	r3, #290	; 0x122
    b26e:	4a17      	ldr	r2, [pc, #92]	; (b2cc <z_log_init+0xcc>)
    b270:	4817      	ldr	r0, [pc, #92]	; (b2d0 <z_log_init+0xd0>)
    b272:	f010 fd61 	bl	1bd38 <assert_print>
    b276:	4819      	ldr	r0, [pc, #100]	; (b2dc <z_log_init+0xdc>)
    b278:	f010 fd5e 	bl	1bd38 <assert_print>
    b27c:	f44f 7191 	mov.w	r1, #290	; 0x122
    b280:	e7d2      	b.n	b228 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    b282:	4620      	mov	r0, r4
    b284:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    b286:	2800      	cmp	r0, #0
    b288:	d0e4      	beq.n	b254 <z_log_init+0x54>
				mask |= BIT(i);
    b28a:	fa0a f306 	lsl.w	r3, sl, r6
    b28e:	431d      	orrs	r5, r3
    b290:	e7e6      	b.n	b260 <z_log_init+0x60>
	uint32_t mask = 0;
    b292:	4605      	mov	r5, r0
				mask |= BIT(i);
    b294:	f04f 0a01 	mov.w	sl, #1
    b298:	e7e4      	b.n	b264 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b29a:	d3d1      	bcc.n	b240 <z_log_init+0x40>
	if (blocking) {
    b29c:	f1b8 0f00 	cmp.w	r8, #0
    b2a0:	d0cb      	beq.n	b23a <z_log_init+0x3a>
		while (mask) {
    b2a2:	2d00      	cmp	r5, #0
    b2a4:	d0c8      	beq.n	b238 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    b2a6:	4628      	mov	r0, r5
    b2a8:	f7ff ff78 	bl	b19c <activate_foreach_backend>
    b2ac:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    b2ae:	2f00      	cmp	r7, #0
    b2b0:	d0f7      	beq.n	b2a2 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    b2b2:	2100      	movs	r1, #0
    b2b4:	f44f 70a4 	mov.w	r0, #328	; 0x148
    b2b8:	f00f f986 	bl	1a5c8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    b2bc:	e7f1      	b.n	b2a2 <z_log_init+0xa2>
    b2be:	bf00      	nop
    b2c0:	0001f9a8 	.word	0x0001f9a8
    b2c4:	0001f998 	.word	0x0001f998
    b2c8:	00020c82 	.word	0x00020c82
    b2cc:	00020c55 	.word	0x00020c55
    b2d0:	000205a4 	.word	0x000205a4
    b2d4:	200096b0 	.word	0x200096b0
    b2d8:	00020ca6 	.word	0x00020ca6
    b2dc:	00020cc7 	.word	0x00020cc7

0000b2e0 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    b2e0:	4801      	ldr	r0, [pc, #4]	; (b2e8 <log_process_thread_timer_expiry_fn+0x8>)
    b2e2:	f00d ba7d 	b.w	187e0 <z_impl_k_sem_give>
    b2e6:	bf00      	nop
    b2e8:	2000857c 	.word	0x2000857c

0000b2ec <log_format_func_t_get>:
}
    b2ec:	4b01      	ldr	r3, [pc, #4]	; (b2f4 <log_format_func_t_get+0x8>)
    b2ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b2f2:	4770      	bx	lr
    b2f4:	0001fad0 	.word	0x0001fad0

0000b2f8 <log_set_timestamp_func>:
{
    b2f8:	b508      	push	{r3, lr}
    b2fa:	4603      	mov	r3, r0
    b2fc:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    b2fe:	b12b      	cbz	r3, b30c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    b300:	4a04      	ldr	r2, [pc, #16]	; (b314 <log_set_timestamp_func+0x1c>)
    b302:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    b304:	f000 fcfc 	bl	bd00 <log_output_timestamp_freq_set>
	return 0;
    b308:	2000      	movs	r0, #0
}
    b30a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    b30c:	f06f 0015 	mvn.w	r0, #21
    b310:	e7fb      	b.n	b30a <log_set_timestamp_func+0x12>
    b312:	bf00      	nop
    b314:	20008184 	.word	0x20008184

0000b318 <z_log_notify_backend_enabled>:
{
    b318:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    b31a:	4c04      	ldr	r4, [pc, #16]	; (b32c <z_log_notify_backend_enabled+0x14>)
    b31c:	7823      	ldrb	r3, [r4, #0]
    b31e:	b913      	cbnz	r3, b326 <z_log_notify_backend_enabled+0xe>
    b320:	4803      	ldr	r0, [pc, #12]	; (b330 <z_log_notify_backend_enabled+0x18>)
    b322:	f00d fa5d 	bl	187e0 <z_impl_k_sem_give>
	backend_attached = true;
    b326:	2301      	movs	r3, #1
    b328:	7023      	strb	r3, [r4, #0]
}
    b32a:	bd10      	pop	{r4, pc}
    b32c:	20009bb6 	.word	0x20009bb6
    b330:	2000857c 	.word	0x2000857c

0000b334 <z_log_dropped>:
{
    b334:	b510      	push	{r4, lr}
    b336:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    b338:	4806      	ldr	r0, [pc, #24]	; (b354 <z_log_dropped+0x20>)
    b33a:	f010 fe14 	bl	1bf66 <atomic_inc>
	if (buffered) {
    b33e:	b13c      	cbz	r4, b350 <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b340:	4b05      	ldr	r3, [pc, #20]	; (b358 <z_log_dropped+0x24>)
    b342:	e8d3 1fef 	ldaex	r1, [r3]
    b346:	3901      	subs	r1, #1
    b348:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b34c:	2a00      	cmp	r2, #0
    b34e:	d1f8      	bne.n	b342 <z_log_dropped+0xe>
}
    b350:	bd10      	pop	{r4, pc}
    b352:	bf00      	nop
    b354:	200096a8 	.word	0x200096a8
    b358:	200096ac 	.word	0x200096ac

0000b35c <z_log_dropped_read_and_clear>:
}
    b35c:	2000      	movs	r0, #0
    b35e:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b360:	4b03      	ldr	r3, [pc, #12]	; (b370 <z_log_dropped_read_and_clear+0x14>)
    b362:	e8d3 0fef 	ldaex	r0, [r3]
    b366:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b36a:	2a00      	cmp	r2, #0
    b36c:	d1f9      	bne.n	b362 <z_log_dropped_read_and_clear+0x6>
    b36e:	4770      	bx	lr
    b370:	200096a8 	.word	0x200096a8

0000b374 <dropped_notify>:
{
    b374:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    b376:	f7ff fff1 	bl	b35c <z_log_dropped_read_and_clear>
    b37a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b37c:	4c0f      	ldr	r4, [pc, #60]	; (b3bc <dropped_notify+0x48>)
    b37e:	4e10      	ldr	r6, [pc, #64]	; (b3c0 <dropped_notify+0x4c>)
    b380:	42b4      	cmp	r4, r6
    b382:	d919      	bls.n	b3b8 <dropped_notify+0x44>
    b384:	490f      	ldr	r1, [pc, #60]	; (b3c4 <dropped_notify+0x50>)
    b386:	f240 13cd 	movw	r3, #461	; 0x1cd
    b38a:	4a0f      	ldr	r2, [pc, #60]	; (b3c8 <dropped_notify+0x54>)
    b38c:	480f      	ldr	r0, [pc, #60]	; (b3cc <dropped_notify+0x58>)
    b38e:	f010 fcd3 	bl	1bd38 <assert_print>
    b392:	480f      	ldr	r0, [pc, #60]	; (b3d0 <dropped_notify+0x5c>)
    b394:	f010 fcd0 	bl	1bd38 <assert_print>
    b398:	f240 11cd 	movw	r1, #461	; 0x1cd
    b39c:	480a      	ldr	r0, [pc, #40]	; (b3c8 <dropped_notify+0x54>)
    b39e:	f010 fcc4 	bl	1bd2a <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    b3a2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b3a4:	795b      	ldrb	r3, [r3, #5]
    b3a6:	b12b      	cbz	r3, b3b4 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    b3a8:	6823      	ldr	r3, [r4, #0]
    b3aa:	685b      	ldr	r3, [r3, #4]
    b3ac:	b113      	cbz	r3, b3b4 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    b3ae:	4629      	mov	r1, r5
    b3b0:	4620      	mov	r0, r4
    b3b2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b3b4:	3410      	adds	r4, #16
    b3b6:	e7e3      	b.n	b380 <dropped_notify+0xc>
    b3b8:	d3f3      	bcc.n	b3a2 <dropped_notify+0x2e>
}
    b3ba:	bd70      	pop	{r4, r5, r6, pc}
    b3bc:	0001f998 	.word	0x0001f998
    b3c0:	0001f9a8 	.word	0x0001f9a8
    b3c4:	00020ca6 	.word	0x00020ca6
    b3c8:	00020c55 	.word	0x00020c55
    b3cc:	000205a4 	.word	0x000205a4
    b3d0:	00020cc7 	.word	0x00020cc7

0000b3d4 <z_log_msg_init>:
{
    b3d4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    b3d6:	4c04      	ldr	r4, [pc, #16]	; (b3e8 <z_log_msg_init+0x14>)
    b3d8:	4904      	ldr	r1, [pc, #16]	; (b3ec <z_log_msg_init+0x18>)
    b3da:	4620      	mov	r0, r4
    b3dc:	f7ff face 	bl	a97c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    b3e0:	4b03      	ldr	r3, [pc, #12]	; (b3f0 <z_log_msg_init+0x1c>)
    b3e2:	601c      	str	r4, [r3, #0]
}
    b3e4:	bd10      	pop	{r4, pc}
    b3e6:	bf00      	nop
    b3e8:	20008440 	.word	0x20008440
    b3ec:	0001fabc 	.word	0x0001fabc
    b3f0:	200096a0 	.word	0x200096a0

0000b3f4 <log_core_init>:
{
    b3f4:	b508      	push	{r3, lr}
	panic_mode = false;
    b3f6:	2300      	movs	r3, #0
    b3f8:	4a06      	ldr	r2, [pc, #24]	; (b414 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    b3fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    b3fe:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    b400:	4a05      	ldr	r2, [pc, #20]	; (b418 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    b402:	4806      	ldr	r0, [pc, #24]	; (b41c <log_core_init+0x28>)
	dropped_cnt = 0;
    b404:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    b406:	f7ff ff77 	bl	b2f8 <log_set_timestamp_func>
}
    b40a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    b40e:	f7ff bfe1 	b.w	b3d4 <z_log_msg_init>
    b412:	bf00      	nop
    b414:	20009bb7 	.word	0x20009bb7
    b418:	200096a8 	.word	0x200096a8
    b41c:	0001bf63 	.word	0x0001bf63

0000b420 <z_log_msg_alloc>:
{
    b420:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    b422:	2200      	movs	r2, #0
    b424:	2300      	movs	r3, #0
    b426:	4801      	ldr	r0, [pc, #4]	; (b42c <z_log_msg_alloc+0xc>)
    b428:	f7ff bada 	b.w	a9e0 <mpsc_pbuf_alloc>
    b42c:	20008440 	.word	0x20008440

0000b430 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    b430:	4801      	ldr	r0, [pc, #4]	; (b438 <z_log_msg_local_claim+0x8>)
    b432:	f7ff bbe9 	b.w	ac08 <mpsc_pbuf_claim>
    b436:	bf00      	nop
    b438:	20008440 	.word	0x20008440

0000b43c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    b43c:	4b02      	ldr	r3, [pc, #8]	; (b448 <z_log_msg_free+0xc>)
{
    b43e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    b440:	6818      	ldr	r0, [r3, #0]
    b442:	f7ff bc67 	b.w	ad14 <mpsc_pbuf_free>
    b446:	bf00      	nop
    b448:	200096a0 	.word	0x200096a0

0000b44c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    b44c:	4801      	ldr	r0, [pc, #4]	; (b454 <z_log_msg_pending+0x8>)
    b44e:	f010 bd2d 	b.w	1beac <mpsc_pbuf_is_pending>
    b452:	bf00      	nop
    b454:	20008440 	.word	0x20008440

0000b458 <z_impl_log_process>:
{
    b458:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    b45a:	4b2e      	ldr	r3, [pc, #184]	; (b514 <z_impl_log_process+0xbc>)
    b45c:	7818      	ldrb	r0, [r3, #0]
    b45e:	2800      	cmp	r0, #0
    b460:	d057      	beq.n	b512 <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    b462:	f7ff ffe5 	bl	b430 <z_log_msg_local_claim>
	if (msg) {
    b466:	4605      	mov	r5, r0
    b468:	b340      	cbz	r0, b4bc <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b46a:	4b2b      	ldr	r3, [pc, #172]	; (b518 <z_impl_log_process+0xc0>)
    b46c:	e8d3 1fef 	ldaex	r1, [r3]
    b470:	3901      	subs	r1, #1
    b472:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b476:	2a00      	cmp	r2, #0
    b478:	d1f8      	bne.n	b46c <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b47a:	4c28      	ldr	r4, [pc, #160]	; (b51c <z_impl_log_process+0xc4>)
    b47c:	4e28      	ldr	r6, [pc, #160]	; (b520 <z_impl_log_process+0xc8>)
    b47e:	42b4      	cmp	r4, r6
    b480:	d918      	bls.n	b4b4 <z_impl_log_process+0x5c>
    b482:	4928      	ldr	r1, [pc, #160]	; (b524 <z_impl_log_process+0xcc>)
    b484:	f240 13c1 	movw	r3, #449	; 0x1c1
    b488:	4a27      	ldr	r2, [pc, #156]	; (b528 <z_impl_log_process+0xd0>)
    b48a:	4828      	ldr	r0, [pc, #160]	; (b52c <z_impl_log_process+0xd4>)
    b48c:	f010 fc54 	bl	1bd38 <assert_print>
    b490:	4827      	ldr	r0, [pc, #156]	; (b530 <z_impl_log_process+0xd8>)
    b492:	f010 fc51 	bl	1bd38 <assert_print>
    b496:	f240 11c1 	movw	r1, #449	; 0x1c1
    b49a:	4823      	ldr	r0, [pc, #140]	; (b528 <z_impl_log_process+0xd0>)
    b49c:	f010 fc45 	bl	1bd2a <assert_post_action>
	return backend->cb->active;
    b4a0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    b4a2:	795b      	ldrb	r3, [r3, #5]
    b4a4:	b123      	cbz	r3, b4b0 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    b4a6:	6823      	ldr	r3, [r4, #0]
    b4a8:	4629      	mov	r1, r5
    b4aa:	4620      	mov	r0, r4
    b4ac:	681b      	ldr	r3, [r3, #0]
    b4ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b4b0:	3410      	adds	r4, #16
    b4b2:	e7e4      	b.n	b47e <z_impl_log_process+0x26>
    b4b4:	d3f4      	bcc.n	b4a0 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    b4b6:	4628      	mov	r0, r5
    b4b8:	f7ff ffc0 	bl	b43c <z_log_msg_free>
	return dropped_cnt > 0;
    b4bc:	4b1d      	ldr	r3, [pc, #116]	; (b534 <z_impl_log_process+0xdc>)
    b4be:	4c1e      	ldr	r4, [pc, #120]	; (b538 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    b4c0:	681b      	ldr	r3, [r3, #0]
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	dd19      	ble.n	b4fa <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    b4c6:	f013 febb 	bl	1f240 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b4ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b4ce:	fba0 0302 	umull	r0, r3, r0, r2
    b4d2:	fb02 3101 	mla	r1, r2, r1, r3
    b4d6:	0bc3      	lsrs	r3, r0, #15
    b4d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b4dc:	e9d4 2000 	ldrd	r2, r0, [r4]
    b4e0:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    b4e2:	f240 32e9 	movw	r2, #1001	; 0x3e9
    b4e6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b4ea:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    b4ee:	4293      	cmp	r3, r2
    b4f0:	f171 0100 	sbcs.w	r1, r1, #0
    b4f4:	d301      	bcc.n	b4fa <z_impl_log_process+0xa2>
				dropped_notify();
    b4f6:	f7ff ff3d 	bl	b374 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    b4fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    b4fe:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    b502:	f142 0200 	adc.w	r2, r2, #0
    b506:	e9c4 3200 	strd	r3, r2, [r4]
}
    b50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    b50e:	f7ff bf9d 	b.w	b44c <z_log_msg_pending>
}
    b512:	bd70      	pop	{r4, r5, r6, pc}
    b514:	20009bb6 	.word	0x20009bb6
    b518:	200096ac 	.word	0x200096ac
    b51c:	0001f998 	.word	0x0001f998
    b520:	0001f9a8 	.word	0x0001f9a8
    b524:	00020ca6 	.word	0x00020ca6
    b528:	00020c55 	.word	0x00020c55
    b52c:	000205a4 	.word	0x000205a4
    b530:	00020cc7 	.word	0x00020cc7
    b534:	200096a8 	.word	0x200096a8
    b538:	20008c48 	.word	0x20008c48

0000b53c <z_impl_log_panic>:
{
    b53c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    b53e:	4d15      	ldr	r5, [pc, #84]	; (b594 <z_impl_log_panic+0x58>)
    b540:	7829      	ldrb	r1, [r5, #0]
    b542:	bb29      	cbnz	r1, b590 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    b544:	2001      	movs	r0, #1
    b546:	f7ff fe5b 	bl	b200 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b54a:	4c13      	ldr	r4, [pc, #76]	; (b598 <z_impl_log_panic+0x5c>)
    b54c:	4e13      	ldr	r6, [pc, #76]	; (b59c <z_impl_log_panic+0x60>)
    b54e:	42b4      	cmp	r4, r6
    b550:	d917      	bls.n	b582 <z_impl_log_panic+0x46>
    b552:	4913      	ldr	r1, [pc, #76]	; (b5a0 <z_impl_log_panic+0x64>)
    b554:	f44f 73c2 	mov.w	r3, #388	; 0x184
    b558:	4a12      	ldr	r2, [pc, #72]	; (b5a4 <z_impl_log_panic+0x68>)
    b55a:	4813      	ldr	r0, [pc, #76]	; (b5a8 <z_impl_log_panic+0x6c>)
    b55c:	f010 fbec 	bl	1bd38 <assert_print>
    b560:	4812      	ldr	r0, [pc, #72]	; (b5ac <z_impl_log_panic+0x70>)
    b562:	f010 fbe9 	bl	1bd38 <assert_print>
    b566:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b56a:	480e      	ldr	r0, [pc, #56]	; (b5a4 <z_impl_log_panic+0x68>)
    b56c:	f010 fbdd 	bl	1bd2a <assert_post_action>
	return backend->cb->active;
    b570:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b572:	795b      	ldrb	r3, [r3, #5]
    b574:	b11b      	cbz	r3, b57e <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    b576:	6823      	ldr	r3, [r4, #0]
    b578:	4620      	mov	r0, r4
    b57a:	689b      	ldr	r3, [r3, #8]
    b57c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b57e:	3410      	adds	r4, #16
    b580:	e7e5      	b.n	b54e <z_impl_log_panic+0x12>
    b582:	d3f5      	bcc.n	b570 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    b584:	f7ff ff68 	bl	b458 <z_impl_log_process>
		while (log_process() == true) {
    b588:	2800      	cmp	r0, #0
    b58a:	d1fb      	bne.n	b584 <z_impl_log_panic+0x48>
	panic_mode = true;
    b58c:	2301      	movs	r3, #1
    b58e:	702b      	strb	r3, [r5, #0]
}
    b590:	bd70      	pop	{r4, r5, r6, pc}
    b592:	bf00      	nop
    b594:	20009bb7 	.word	0x20009bb7
    b598:	0001f998 	.word	0x0001f998
    b59c:	0001f9a8 	.word	0x0001f9a8
    b5a0:	00020ca6 	.word	0x00020ca6
    b5a4:	00020c55 	.word	0x00020c55
    b5a8:	000205a4 	.word	0x000205a4
    b5ac:	00020cc7 	.word	0x00020cc7

0000b5b0 <log_process_thread_func>:
{
    b5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    b5b4:	4b2f      	ldr	r3, [pc, #188]	; (b674 <log_process_thread_func+0xc4>)
    b5b6:	4f30      	ldr	r7, [pc, #192]	; (b678 <log_process_thread_func+0xc8>)
    b5b8:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    b5ba:	091b      	lsrs	r3, r3, #4
    b5bc:	d10b      	bne.n	b5d6 <log_process_thread_func+0x26>
    b5be:	492f      	ldr	r1, [pc, #188]	; (b67c <log_process_thread_func+0xcc>)
    b5c0:	f240 3347 	movw	r3, #839	; 0x347
    b5c4:	4a2e      	ldr	r2, [pc, #184]	; (b680 <log_process_thread_func+0xd0>)
    b5c6:	482f      	ldr	r0, [pc, #188]	; (b684 <log_process_thread_func+0xd4>)
    b5c8:	f010 fbb6 	bl	1bd38 <assert_print>
    b5cc:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b5d0:	482b      	ldr	r0, [pc, #172]	; (b680 <log_process_thread_func+0xd0>)
    b5d2:	f010 fbaa 	bl	1bd2a <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    b5d6:	2100      	movs	r1, #0
    b5d8:	4608      	mov	r0, r1
    b5da:	f7ff fe11 	bl	b200 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b5de:	4604      	mov	r4, r0
    b5e0:	b340      	cbz	r0, b634 <log_process_thread_func+0x84>
    b5e2:	f240 6867 	movw	r8, #1639	; 0x667
    b5e6:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    b5ea:	f00f f821 	bl	1a630 <z_impl_z_current_get>
	proc_tid = process_tid;
    b5ee:	4b26      	ldr	r3, [pc, #152]	; (b688 <log_process_thread_func+0xd8>)
    b5f0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b5f2:	b130      	cbz	r0, b602 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    b5f4:	4b25      	ldr	r3, [pc, #148]	; (b68c <log_process_thread_func+0xdc>)
	    process_tid &&
    b5f6:	681b      	ldr	r3, [r3, #0]
    b5f8:	2b09      	cmp	r3, #9
    b5fa:	dd02      	ble.n	b602 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    b5fc:	4824      	ldr	r0, [pc, #144]	; (b690 <log_process_thread_func+0xe0>)
    b5fe:	f00d f8ef 	bl	187e0 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b602:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    b604:	f8df a088 	ldr.w	sl, [pc, #136]	; b690 <log_process_thread_func+0xe0>
		if (activate_mask) {
    b608:	b144      	cbz	r4, b61c <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    b60a:	4620      	mov	r0, r4
    b60c:	f7ff fdc6 	bl	b19c <activate_foreach_backend>
			if (!activate_mask) {
    b610:	4604      	mov	r4, r0
    b612:	b918      	cbnz	r0, b61c <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    b614:	f04f 38ff 	mov.w	r8, #4294967295
    b618:	f04f 39ff 	mov.w	r9, #4294967295
    b61c:	f7ff ff1c 	bl	b458 <z_impl_log_process>
		if (log_process() == false) {
    b620:	4606      	mov	r6, r0
    b622:	b928      	cbnz	r0, b630 <log_process_thread_func+0x80>
			if (processed_any) {
    b624:	b95d      	cbnz	r5, b63e <log_process_thread_func+0x8e>
    b626:	4642      	mov	r2, r8
    b628:	464b      	mov	r3, r9
    b62a:	4650      	mov	r0, sl
    b62c:	f00d f91c 	bl	18868 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b630:	4635      	mov	r5, r6
    b632:	e7e9      	b.n	b608 <log_process_thread_func+0x58>
    b634:	f04f 38ff 	mov.w	r8, #4294967295
    b638:	f04f 39ff 	mov.w	r9, #4294967295
    b63c:	e7d5      	b.n	b5ea <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b63e:	4d0d      	ldr	r5, [pc, #52]	; (b674 <log_process_thread_func+0xc4>)
    b640:	e008      	b.n	b654 <log_process_thread_func+0xa4>
    b642:	d2f0      	bcs.n	b626 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    b644:	682b      	ldr	r3, [r5, #0]
    b646:	699b      	ldr	r3, [r3, #24]
    b648:	b11b      	cbz	r3, b652 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    b64a:	2200      	movs	r2, #0
    b64c:	4628      	mov	r0, r5
    b64e:	4611      	mov	r1, r2
    b650:	4798      	blx	r3
    b652:	3510      	adds	r5, #16
    b654:	42bd      	cmp	r5, r7
    b656:	d9f4      	bls.n	b642 <log_process_thread_func+0x92>
    b658:	490e      	ldr	r1, [pc, #56]	; (b694 <log_process_thread_func+0xe4>)
    b65a:	f240 333b 	movw	r3, #827	; 0x33b
    b65e:	4a08      	ldr	r2, [pc, #32]	; (b680 <log_process_thread_func+0xd0>)
    b660:	4808      	ldr	r0, [pc, #32]	; (b684 <log_process_thread_func+0xd4>)
    b662:	f010 fb69 	bl	1bd38 <assert_print>
    b666:	480c      	ldr	r0, [pc, #48]	; (b698 <log_process_thread_func+0xe8>)
    b668:	f010 fb66 	bl	1bd38 <assert_print>
    b66c:	f240 313b 	movw	r1, #827	; 0x33b
    b670:	e7ae      	b.n	b5d0 <log_process_thread_func+0x20>
    b672:	bf00      	nop
    b674:	0001f998 	.word	0x0001f998
    b678:	0001f9a8 	.word	0x0001f9a8
    b67c:	00020ce6 	.word	0x00020ce6
    b680:	00020c55 	.word	0x00020c55
    b684:	000205a4 	.word	0x000205a4
    b688:	200096a4 	.word	0x200096a4
    b68c:	200096ac 	.word	0x200096ac
    b690:	2000857c 	.word	0x2000857c
    b694:	00020ca6 	.word	0x00020ca6
    b698:	00020cc7 	.word	0x00020cc7

0000b69c <z_log_msg_post_finalize>:
{
    b69c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    b69e:	482b      	ldr	r0, [pc, #172]	; (b74c <z_log_msg_post_finalize+0xb0>)
    b6a0:	f010 fc61 	bl	1bf66 <atomic_inc>
	if (panic_mode) {
    b6a4:	4b2a      	ldr	r3, [pc, #168]	; (b750 <z_log_msg_post_finalize+0xb4>)
    b6a6:	781b      	ldrb	r3, [r3, #0]
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d034      	beq.n	b716 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    b6ac:	f04f 0320 	mov.w	r3, #32
    b6b0:	f3ef 8411 	mrs	r4, BASEPRI
    b6b4:	f383 8812 	msr	BASEPRI_MAX, r3
    b6b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b6bc:	4825      	ldr	r0, [pc, #148]	; (b754 <z_log_msg_post_finalize+0xb8>)
    b6be:	f00c fd79 	bl	181b4 <z_spin_lock_valid>
    b6c2:	b968      	cbnz	r0, b6e0 <z_log_msg_post_finalize+0x44>
    b6c4:	2394      	movs	r3, #148	; 0x94
    b6c6:	4a24      	ldr	r2, [pc, #144]	; (b758 <z_log_msg_post_finalize+0xbc>)
    b6c8:	4924      	ldr	r1, [pc, #144]	; (b75c <z_log_msg_post_finalize+0xc0>)
    b6ca:	4825      	ldr	r0, [pc, #148]	; (b760 <z_log_msg_post_finalize+0xc4>)
    b6cc:	f010 fb34 	bl	1bd38 <assert_print>
    b6d0:	4920      	ldr	r1, [pc, #128]	; (b754 <z_log_msg_post_finalize+0xb8>)
    b6d2:	4824      	ldr	r0, [pc, #144]	; (b764 <z_log_msg_post_finalize+0xc8>)
    b6d4:	f010 fb30 	bl	1bd38 <assert_print>
    b6d8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b6da:	481f      	ldr	r0, [pc, #124]	; (b758 <z_log_msg_post_finalize+0xbc>)
    b6dc:	f010 fb25 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
    b6e0:	481c      	ldr	r0, [pc, #112]	; (b754 <z_log_msg_post_finalize+0xb8>)
    b6e2:	f00c fd83 	bl	181ec <z_spin_lock_set_owner>
    b6e6:	f7ff feb7 	bl	b458 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b6ea:	481a      	ldr	r0, [pc, #104]	; (b754 <z_log_msg_post_finalize+0xb8>)
    b6ec:	f00c fd70 	bl	181d0 <z_spin_unlock_valid>
    b6f0:	b958      	cbnz	r0, b70a <z_log_msg_post_finalize+0x6e>
    b6f2:	23c2      	movs	r3, #194	; 0xc2
    b6f4:	4a18      	ldr	r2, [pc, #96]	; (b758 <z_log_msg_post_finalize+0xbc>)
    b6f6:	491c      	ldr	r1, [pc, #112]	; (b768 <z_log_msg_post_finalize+0xcc>)
    b6f8:	4819      	ldr	r0, [pc, #100]	; (b760 <z_log_msg_post_finalize+0xc4>)
    b6fa:	f010 fb1d 	bl	1bd38 <assert_print>
    b6fe:	4915      	ldr	r1, [pc, #84]	; (b754 <z_log_msg_post_finalize+0xb8>)
    b700:	481a      	ldr	r0, [pc, #104]	; (b76c <z_log_msg_post_finalize+0xd0>)
    b702:	f010 fb19 	bl	1bd38 <assert_print>
    b706:	21c2      	movs	r1, #194	; 0xc2
    b708:	e7e7      	b.n	b6da <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    b70a:	f384 8811 	msr	BASEPRI, r4
    b70e:	f3bf 8f6f 	isb	sy
}
    b712:	b002      	add	sp, #8
    b714:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    b716:	4b16      	ldr	r3, [pc, #88]	; (b770 <z_log_msg_post_finalize+0xd4>)
    b718:	681b      	ldr	r3, [r3, #0]
    b71a:	2b00      	cmp	r3, #0
    b71c:	d0f9      	beq.n	b712 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    b71e:	b950      	cbnz	r0, b736 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    b720:	2200      	movs	r2, #0
    b722:	2300      	movs	r3, #0
    b724:	4813      	ldr	r0, [pc, #76]	; (b774 <z_log_msg_post_finalize+0xd8>)
    b726:	e9cd 2300 	strd	r2, r3, [sp]
    b72a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    b72e:	2300      	movs	r3, #0
    b730:	f00f fc68 	bl	1b004 <z_impl_k_timer_start>
    b734:	e7ed      	b.n	b712 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b736:	280a      	cmp	r0, #10
    b738:	d1eb      	bne.n	b712 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    b73a:	480e      	ldr	r0, [pc, #56]	; (b774 <z_log_msg_post_finalize+0xd8>)
    b73c:	f013 fdb4 	bl	1f2a8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    b740:	480d      	ldr	r0, [pc, #52]	; (b778 <z_log_msg_post_finalize+0xdc>)
}
    b742:	b002      	add	sp, #8
    b744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b748:	f00d b84a 	b.w	187e0 <z_impl_k_sem_give>
    b74c:	200096ac 	.word	0x200096ac
    b750:	20009bb7 	.word	0x20009bb7
    b754:	2000969c 	.word	0x2000969c
    b758:	000209d8 	.word	0x000209d8
    b75c:	00020a31 	.word	0x00020a31
    b760:	000205a4 	.word	0x000205a4
    b764:	00020a46 	.word	0x00020a46
    b768:	00020a05 	.word	0x00020a05
    b76c:	00020a1c 	.word	0x00020a1c
    b770:	200096a4 	.word	0x200096a4
    b774:	20008c50 	.word	0x20008c50
    b778:	2000857c 	.word	0x2000857c

0000b77c <z_log_msg_commit>:
{
    b77c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    b77e:	4b06      	ldr	r3, [pc, #24]	; (b798 <z_log_msg_commit+0x1c>)
{
    b780:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    b782:	681b      	ldr	r3, [r3, #0]
    b784:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    b786:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    b788:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    b78a:	4804      	ldr	r0, [pc, #16]	; (b79c <z_log_msg_commit+0x20>)
    b78c:	f7ff f9e6 	bl	ab5c <mpsc_pbuf_commit>
}
    b790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    b794:	f7ff bf82 	b.w	b69c <z_log_msg_post_finalize>
    b798:	20008184 	.word	0x20008184
    b79c:	20008440 	.word	0x20008440

0000b7a0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    b7a0:	4a04      	ldr	r2, [pc, #16]	; (b7b4 <log_source_name_get+0x14>)
    b7a2:	4b05      	ldr	r3, [pc, #20]	; (b7b8 <log_source_name_get+0x18>)
    b7a4:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    b7a6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    b7aa:	bf34      	ite	cc
    b7ac:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    b7b0:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    b7b2:	4770      	bx	lr
    b7b4:	0001f8a0 	.word	0x0001f8a0
    b7b8:	0001f998 	.word	0x0001f998

0000b7bc <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    b7bc:	4b0e      	ldr	r3, [pc, #56]	; (b7f8 <log_backend_enable+0x3c>)
{
    b7be:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    b7c0:	1ac3      	subs	r3, r0, r3
    b7c2:	111b      	asrs	r3, r3, #4
    b7c4:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    b7c6:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    b7c8:	b948      	cbnz	r0, b7de <log_backend_enable+0x22>
    b7ca:	490c      	ldr	r1, [pc, #48]	; (b7fc <log_backend_enable+0x40>)
    b7cc:	480c      	ldr	r0, [pc, #48]	; (b800 <log_backend_enable+0x44>)
    b7ce:	23de      	movs	r3, #222	; 0xde
    b7d0:	4a0c      	ldr	r2, [pc, #48]	; (b804 <log_backend_enable+0x48>)
    b7d2:	f010 fab1 	bl	1bd38 <assert_print>
    b7d6:	21de      	movs	r1, #222	; 0xde
    b7d8:	480a      	ldr	r0, [pc, #40]	; (b804 <log_backend_enable+0x48>)
    b7da:	f010 faa6 	bl	1bd2a <assert_post_action>
	backend->cb->id = id;
    b7de:	6844      	ldr	r4, [r0, #4]
    b7e0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    b7e2:	6843      	ldr	r3, [r0, #4]
    b7e4:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    b7e6:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    b7e8:	6843      	ldr	r3, [r0, #4]
    b7ea:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    b7ec:	6843      	ldr	r3, [r0, #4]
    b7ee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    b7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    b7f4:	f7ff bd90 	b.w	b318 <z_log_notify_backend_enabled>
    b7f8:	0001f998 	.word	0x0001f998
    b7fc:	00020d86 	.word	0x00020d86
    b800:	000205a4 	.word	0x000205a4
    b804:	00020d4e 	.word	0x00020d4e

0000b808 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    b80c:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    b810:	b08f      	sub	sp, #60	; 0x3c
    b812:	f3c1 2649 	ubfx	r6, r1, #9, #10
    b816:	460d      	mov	r5, r1
    b818:	4690      	mov	r8, r2
    b81a:	4699      	mov	r9, r3
    b81c:	9005      	str	r0, [sp, #20]
    b81e:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    b820:	2e00      	cmp	r6, #0
    b822:	d03d      	beq.n	b8a0 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    b824:	f04f 0b04 	mov.w	fp, #4
    b828:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    b82c:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    b82e:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    b830:	4631      	mov	r1, r6
    b832:	ab0b      	add	r3, sp, #44	; 0x2c
    b834:	4640      	mov	r0, r8
    b836:	f8cd b008 	str.w	fp, [sp, #8]
    b83a:	9701      	str	r7, [sp, #4]
    b83c:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    b840:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    b844:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    b846:	9607      	str	r6, [sp, #28]
    b848:	f7fd fe64 	bl	9514 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    b84c:	f3c0 0309 	ubfx	r3, r0, #0, #10
    b850:	1918      	adds	r0, r3, r4
    b852:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b856:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    b858:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b85a:	f363 2552 	bfi	r5, r3, #9, #10
    b85e:	9306      	str	r3, [sp, #24]
    b860:	f7ff fdde 	bl	b420 <z_log_msg_alloc>
		if (msg) {
    b864:	4604      	mov	r4, r0
    b866:	b308      	cbz	r0, b8ac <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    b868:	2200      	movs	r2, #0
    b86a:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    b86c:	3010      	adds	r0, #16
    b86e:	900b      	str	r0, [sp, #44]	; 0x2c
    b870:	930c      	str	r3, [sp, #48]	; 0x30
    b872:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    b874:	4640      	mov	r0, r8
    b876:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    b87a:	4a12      	ldr	r2, [pc, #72]	; (b8c4 <z_impl_z_log_msg_static_create+0xbc>)
    b87c:	9907      	ldr	r1, [sp, #28]
    b87e:	f8cd a000 	str.w	sl, [sp]
    b882:	ab0b      	add	r3, sp, #44	; 0x2c
    b884:	f7fd fe46 	bl	9514 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    b888:	2800      	cmp	r0, #0
    b88a:	da0f      	bge.n	b8ac <z_impl_z_log_msg_static_create+0xa4>
    b88c:	490e      	ldr	r1, [pc, #56]	; (b8c8 <z_impl_z_log_msg_static_create+0xc0>)
    b88e:	480f      	ldr	r0, [pc, #60]	; (b8cc <z_impl_z_log_msg_static_create+0xc4>)
    b890:	2349      	movs	r3, #73	; 0x49
    b892:	4a0f      	ldr	r2, [pc, #60]	; (b8d0 <z_impl_z_log_msg_static_create+0xc8>)
    b894:	f010 fa50 	bl	1bd38 <assert_print>
    b898:	2149      	movs	r1, #73	; 0x49
    b89a:	480d      	ldr	r0, [pc, #52]	; (b8d0 <z_impl_z_log_msg_static_create+0xc8>)
    b89c:	f010 fa45 	bl	1bd2a <assert_post_action>
    b8a0:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b8a4:	0880      	lsrs	r0, r0, #2
    b8a6:	f7ff fdbb 	bl	b420 <z_log_msg_alloc>
    b8aa:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    b8ac:	f366 2552 	bfi	r5, r6, #9, #10
    b8b0:	464b      	mov	r3, r9
    b8b2:	462a      	mov	r2, r5
    b8b4:	4620      	mov	r0, r4
    b8b6:	9905      	ldr	r1, [sp, #20]
}
    b8b8:	b00f      	add	sp, #60	; 0x3c
    b8ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    b8be:	f010 bb76 	b.w	1bfae <z_log_msg_finalize>
    b8c2:	bf00      	nop
    b8c4:	0001bf83 	.word	0x0001bf83
    b8c8:	00020dd2 	.word	0x00020dd2
    b8cc:	000205a4 	.word	0x000205a4
    b8d0:	00020da6 	.word	0x00020da6

0000b8d4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    b8d4:	b40e      	push	{r1, r2, r3}
    b8d6:	b503      	push	{r0, r1, lr}
    b8d8:	ab03      	add	r3, sp, #12
    b8da:	f853 2b04 	ldr.w	r2, [r3], #4
    b8de:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b8e0:	4804      	ldr	r0, [pc, #16]	; (b8f4 <print_formatted+0x20>)
	va_start(args, fmt);
    b8e2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b8e4:	f010 fb8a 	bl	1bffc <cbvprintf>
	va_end(args);

	return length;
}
    b8e8:	b002      	add	sp, #8
    b8ea:	f85d eb04 	ldr.w	lr, [sp], #4
    b8ee:	b003      	add	sp, #12
    b8f0:	4770      	bx	lr
    b8f2:	bf00      	nop
    b8f4:	0000b915 	.word	0x0000b915

0000b8f8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    b8f8:	06ca      	lsls	r2, r1, #27
    b8fa:	d405      	bmi.n	b908 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    b8fc:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    b8fe:	bf4c      	ite	mi
    b900:	4902      	ldrmi	r1, [pc, #8]	; (b90c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    b902:	4903      	ldrpl	r1, [pc, #12]	; (b910 <newline_print+0x18>)
    b904:	f7ff bfe6 	b.w	b8d4 <print_formatted>
	}
}
    b908:	4770      	bx	lr
    b90a:	bf00      	nop
    b90c:	00022c59 	.word	0x00022c59
    b910:	00023b09 	.word	0x00023b09

0000b914 <out_func>:
{
    b914:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    b916:	684b      	ldr	r3, [r1, #4]
{
    b918:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    b91a:	681a      	ldr	r2, [r3, #0]
    b91c:	68cb      	ldr	r3, [r1, #12]
{
    b91e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    b920:	429a      	cmp	r2, r3
    b922:	d102      	bne.n	b92a <out_func+0x16>
		log_output_flush(out_ctx);
    b924:	4608      	mov	r0, r1
    b926:	f010 fb70 	bl	1c00a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b92a:	6863      	ldr	r3, [r4, #4]
    b92c:	e8d3 2fef 	ldaex	r2, [r3]
    b930:	1c51      	adds	r1, r2, #1
    b932:	e8c3 1fe0 	stlex	r0, r1, [r3]
    b936:	2800      	cmp	r0, #0
    b938:	d1f8      	bne.n	b92c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    b93a:	68a3      	ldr	r3, [r4, #8]
    b93c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    b93e:	6863      	ldr	r3, [r4, #4]
    b940:	681a      	ldr	r2, [r3, #0]
    b942:	68e3      	ldr	r3, [r4, #12]
    b944:	429a      	cmp	r2, r3
    b946:	d909      	bls.n	b95c <out_func+0x48>
    b948:	4905      	ldr	r1, [pc, #20]	; (b960 <out_func+0x4c>)
    b94a:	4806      	ldr	r0, [pc, #24]	; (b964 <out_func+0x50>)
    b94c:	2379      	movs	r3, #121	; 0x79
    b94e:	4a06      	ldr	r2, [pc, #24]	; (b968 <out_func+0x54>)
    b950:	f010 f9f2 	bl	1bd38 <assert_print>
    b954:	2179      	movs	r1, #121	; 0x79
    b956:	4804      	ldr	r0, [pc, #16]	; (b968 <out_func+0x54>)
    b958:	f010 f9e7 	bl	1bd2a <assert_post_action>
}
    b95c:	2000      	movs	r0, #0
    b95e:	bd38      	pop	{r3, r4, r5, pc}
    b960:	00020e0a 	.word	0x00020e0a
    b964:	000205a4 	.word	0x000205a4
    b968:	00020ddb 	.word	0x00020ddb

0000b96c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    b96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b970:	b089      	sub	sp, #36	; 0x24
    b972:	469b      	mov	fp, r3
    b974:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    b978:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b97c:	4604      	mov	r4, r0
    b97e:	9304      	str	r3, [sp, #16]
    b980:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    b984:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    b986:	9b04      	ldr	r3, [sp, #16]
{
    b988:	460d      	mov	r5, r1
    b98a:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    b98c:	2b00      	cmp	r3, #0
    b98e:	f000 8087 	beq.w	baa0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    b992:	f006 0308 	and.w	r3, r6, #8
    b996:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    b998:	f010 faf1 	bl	1bf7e <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    b99c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    b9a0:	4602      	mov	r2, r0
    b9a2:	2800      	cmp	r0, #0
    b9a4:	d04b      	beq.n	ba3e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    b9a6:	4620      	mov	r0, r4
    b9a8:	498d      	ldr	r1, [pc, #564]	; (bbe0 <log_output_process+0x274>)
    b9aa:	f7ff ff93 	bl	b8d4 <print_formatted>
    b9ae:	4680      	mov	r8, r0
	if (stamp) {
    b9b0:	f1ba 0f00 	cmp.w	sl, #0
    b9b4:	d008      	beq.n	b9c8 <log_output_process+0x5c>
	if (!format) {
    b9b6:	f016 0f44 	tst.w	r6, #68	; 0x44
    b9ba:	d142      	bne.n	ba42 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    b9bc:	462a      	mov	r2, r5
    b9be:	4620      	mov	r0, r4
    b9c0:	4988      	ldr	r1, [pc, #544]	; (bbe4 <log_output_process+0x278>)
    b9c2:	f7ff ff87 	bl	b8d4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    b9c6:	4480      	add	r8, r0
	if (color) {
    b9c8:	f006 0301 	and.w	r3, r6, #1
    b9cc:	b15b      	cbz	r3, b9e6 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    b9ce:	4b86      	ldr	r3, [pc, #536]	; (bbe8 <log_output_process+0x27c>)
    b9d0:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    b9d2:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    b9d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    b9d8:	4b84      	ldr	r3, [pc, #528]	; (bbec <log_output_process+0x280>)
    b9da:	4985      	ldr	r1, [pc, #532]	; (bbf0 <log_output_process+0x284>)
    b9dc:	2a00      	cmp	r2, #0
    b9de:	bf08      	it	eq
    b9e0:	461a      	moveq	r2, r3
    b9e2:	f7ff ff77 	bl	b8d4 <print_formatted>
	if (level_on) {
    b9e6:	f006 0308 	and.w	r3, r6, #8
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d055      	beq.n	ba9a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    b9ee:	4b81      	ldr	r3, [pc, #516]	; (bbf4 <log_output_process+0x288>)
    b9f0:	9a04      	ldr	r2, [sp, #16]
    b9f2:	4620      	mov	r0, r4
    b9f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b9f8:	497f      	ldr	r1, [pc, #508]	; (bbf8 <log_output_process+0x28c>)
    b9fa:	f7ff ff6b 	bl	b8d4 <print_formatted>
    b9fe:	4605      	mov	r5, r0
	if (domain) {
    ba00:	9b06      	ldr	r3, [sp, #24]
    ba02:	b12b      	cbz	r3, ba10 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    ba04:	461a      	mov	r2, r3
    ba06:	4620      	mov	r0, r4
    ba08:	497c      	ldr	r1, [pc, #496]	; (bbfc <log_output_process+0x290>)
    ba0a:	f7ff ff63 	bl	b8d4 <print_formatted>
    ba0e:	4405      	add	r5, r0
	if (source) {
    ba10:	f1bb 0f00 	cmp.w	fp, #0
    ba14:	d005      	beq.n	ba22 <log_output_process+0xb6>
		total += print_formatted(output,
    ba16:	465a      	mov	r2, fp
    ba18:	4620      	mov	r0, r4
    ba1a:	4979      	ldr	r1, [pc, #484]	; (bc00 <log_output_process+0x294>)
    ba1c:	f7ff ff5a 	bl	b8d4 <print_formatted>
    ba20:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    ba22:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    ba24:	f1b9 0f00 	cmp.w	r9, #0
    ba28:	d14a      	bne.n	bac0 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    ba2a:	2f00      	cmp	r7, #0
    ba2c:	d161      	bne.n	baf2 <log_output_process+0x186>
	if (color) {
    ba2e:	07f3      	lsls	r3, r6, #31
    ba30:	f100 80cf 	bmi.w	bbd2 <log_output_process+0x266>
	newline_print(output, flags);
    ba34:	4631      	mov	r1, r6
    ba36:	4620      	mov	r0, r4
    ba38:	f7ff ff5e 	bl	b8f8 <newline_print>
}
    ba3c:	e0c3      	b.n	bbc6 <log_output_process+0x25a>
	uint32_t length = 0U;
    ba3e:	4680      	mov	r8, r0
    ba40:	e7b6      	b.n	b9b0 <log_output_process+0x44>
	} else if (freq != 0U) {
    ba42:	4b70      	ldr	r3, [pc, #448]	; (bc04 <log_output_process+0x298>)
    ba44:	6818      	ldr	r0, [r3, #0]
    ba46:	2800      	cmp	r0, #0
    ba48:	d0bd      	beq.n	b9c6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    ba4a:	4b6f      	ldr	r3, [pc, #444]	; (bc08 <log_output_process+0x29c>)
		ms = (remainder * 1000U) / freq;
    ba4c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ba50:	681b      	ldr	r3, [r3, #0]
    ba52:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    ba56:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    ba5a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    ba5e:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    ba62:	fb0e f505 	mul.w	r5, lr, r5
    ba66:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ba6a:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    ba6e:	213c      	movs	r1, #60	; 0x3c
    ba70:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ba74:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    ba78:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ba7c:	fb0e f505 	mul.w	r5, lr, r5
    ba80:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    ba84:	fb01 2213 	mls	r2, r1, r3, r2
    ba88:	4620      	mov	r0, r4
    ba8a:	9200      	str	r2, [sp, #0]
    ba8c:	e9cd c501 	strd	ip, r5, [sp, #4]
    ba90:	4652      	mov	r2, sl
    ba92:	495e      	ldr	r1, [pc, #376]	; (bc0c <log_output_process+0x2a0>)
    ba94:	f7ff ff1e 	bl	b8d4 <print_formatted>
    ba98:	e795      	b.n	b9c6 <log_output_process+0x5a>
	int total = 0;
    ba9a:	f006 0508 	and.w	r5, r6, #8
    ba9e:	e7af      	b.n	ba00 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    baa0:	f1bb 0f01 	cmp.w	fp, #1
    baa4:	d107      	bne.n	bab6 <log_output_process+0x14a>
	if (package) {
    baa6:	f1b9 0f00 	cmp.w	r9, #0
    baaa:	d11d      	bne.n	bae8 <log_output_process+0x17c>
	if (data_len) {
    baac:	2f00      	cmp	r7, #0
    baae:	f000 808a 	beq.w	bbc6 <log_output_process+0x25a>
		prefix_offset = 0;
    bab2:	2500      	movs	r5, #0
    bab4:	e01d      	b.n	baf2 <log_output_process+0x186>
	if (package) {
    bab6:	f1b9 0f00 	cmp.w	r9, #0
    baba:	d0f7      	beq.n	baac <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    babc:	4854      	ldr	r0, [pc, #336]	; (bc10 <log_output_process+0x2a4>)
    babe:	e014      	b.n	baea <log_output_process+0x17e>
		cb = out_func;
    bac0:	4854      	ldr	r0, [pc, #336]	; (bc14 <log_output_process+0x2a8>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    bac2:	464b      	mov	r3, r9
    bac4:	4622      	mov	r2, r4
    bac6:	4954      	ldr	r1, [pc, #336]	; (bc18 <log_output_process+0x2ac>)
    bac8:	f00f fec3 	bl	1b852 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    bacc:	2800      	cmp	r0, #0
    bace:	da0e      	bge.n	baee <log_output_process+0x182>
    bad0:	4952      	ldr	r1, [pc, #328]	; (bc1c <log_output_process+0x2b0>)
    bad2:	4853      	ldr	r0, [pc, #332]	; (bc20 <log_output_process+0x2b4>)
    bad4:	f44f 7300 	mov.w	r3, #512	; 0x200
    bad8:	4a52      	ldr	r2, [pc, #328]	; (bc24 <log_output_process+0x2b8>)
    bada:	f010 f92d 	bl	1bd38 <assert_print>
    bade:	f44f 7100 	mov.w	r1, #512	; 0x200
    bae2:	4850      	ldr	r0, [pc, #320]	; (bc24 <log_output_process+0x2b8>)
    bae4:	f010 f921 	bl	1bd2a <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bae8:	484a      	ldr	r0, [pc, #296]	; (bc14 <log_output_process+0x2a8>)
		prefix_offset = 0;
    baea:	9d04      	ldr	r5, [sp, #16]
    baec:	e7e9      	b.n	bac2 <log_output_process+0x156>
	if (data_len) {
    baee:	2f00      	cmp	r7, #0
    baf0:	d065      	beq.n	bbbe <log_output_process+0x252>
		print_formatted(output, " ");
    baf2:	f8df 9134 	ldr.w	r9, [pc, #308]	; bc28 <log_output_process+0x2bc>
			print_formatted(output, "%02x ", data[i]);
    baf6:	f8df a134 	ldr.w	sl, [pc, #308]	; bc2c <log_output_process+0x2c0>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bafa:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    bafc:	4631      	mov	r1, r6
    bafe:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bb00:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    bb02:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bb06:	bf28      	it	cs
    bb08:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    bb0c:	f7ff fef4 	bl	b8f8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    bb10:	455d      	cmp	r5, fp
    bb12:	dc42      	bgt.n	bb9a <log_output_process+0x22e>
			print_formatted(output, "%02x ", data[i]);
    bb14:	9b05      	ldr	r3, [sp, #20]
    bb16:	4651      	mov	r1, sl
    bb18:	4620      	mov	r0, r4
    bb1a:	781a      	ldrb	r2, [r3, #0]
    bb1c:	f7ff feda 	bl	b8d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bb20:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    bb24:	f01b 0f07 	tst.w	fp, #7
    bb28:	d103      	bne.n	bb32 <log_output_process+0x1c6>
			print_formatted(output, " ");
    bb2a:	4649      	mov	r1, r9
    bb2c:	4620      	mov	r0, r4
    bb2e:	f7ff fed1 	bl	b8d4 <print_formatted>
		if (i < length) {
    bb32:	45d8      	cmp	r8, fp
    bb34:	d938      	bls.n	bba8 <log_output_process+0x23c>
			print_formatted(output, "%02x ", data[i]);
    bb36:	9b05      	ldr	r3, [sp, #20]
    bb38:	4651      	mov	r1, sl
    bb3a:	4620      	mov	r0, r4
    bb3c:	f813 200b 	ldrb.w	r2, [r3, fp]
    bb40:	f7ff fec8 	bl	b8d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bb44:	f10b 0b01 	add.w	fp, fp, #1
    bb48:	f1bb 0f10 	cmp.w	fp, #16
    bb4c:	d1ea      	bne.n	bb24 <log_output_process+0x1b8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bb4e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    bb52:	4620      	mov	r0, r4
    bb54:	4936      	ldr	r1, [pc, #216]	; (bc30 <log_output_process+0x2c4>)
    bb56:	f7ff febd 	bl	b8d4 <print_formatted>
		if (i < length) {
    bb5a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    bb5c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    bb5e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    bb60:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    bb62:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    bb66:	295f      	cmp	r1, #95	; 0x5f
    bb68:	bf28      	it	cs
    bb6a:	222e      	movcs	r2, #46	; 0x2e
    bb6c:	4931      	ldr	r1, [pc, #196]	; (bc34 <log_output_process+0x2c8>)
    bb6e:	f7ff feb1 	bl	b8d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bb72:	f10b 0b01 	add.w	fp, fp, #1
    bb76:	f1bb 0f10 	cmp.w	fp, #16
    bb7a:	d01a      	beq.n	bbb2 <log_output_process+0x246>
		if (i > 0 && !(i % 8)) {
    bb7c:	f01b 0f07 	tst.w	fp, #7
    bb80:	d103      	bne.n	bb8a <log_output_process+0x21e>
			print_formatted(output, " ");
    bb82:	4649      	mov	r1, r9
    bb84:	4620      	mov	r0, r4
    bb86:	f7ff fea5 	bl	b8d4 <print_formatted>
		if (i < length) {
    bb8a:	45d8      	cmp	r8, fp
    bb8c:	465a      	mov	r2, fp
    bb8e:	d8e5      	bhi.n	bb5c <log_output_process+0x1f0>
			print_formatted(output, " ");
    bb90:	4649      	mov	r1, r9
    bb92:	4620      	mov	r0, r4
    bb94:	f7ff fe9e 	bl	b8d4 <print_formatted>
    bb98:	e7eb      	b.n	bb72 <log_output_process+0x206>
		print_formatted(output, " ");
    bb9a:	4649      	mov	r1, r9
    bb9c:	4620      	mov	r0, r4
    bb9e:	f7ff fe99 	bl	b8d4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    bba2:	f10b 0b01 	add.w	fp, fp, #1
    bba6:	e7b3      	b.n	bb10 <log_output_process+0x1a4>
			print_formatted(output, "   ");
    bba8:	4620      	mov	r0, r4
    bbaa:	4923      	ldr	r1, [pc, #140]	; (bc38 <log_output_process+0x2cc>)
    bbac:	f7ff fe92 	bl	b8d4 <print_formatted>
    bbb0:	e7c8      	b.n	bb44 <log_output_process+0x1d8>
		data += length;
    bbb2:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    bbb4:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    bbb8:	4443      	add	r3, r8
    bbba:	9305      	str	r3, [sp, #20]
	} while (len);
    bbbc:	d19d      	bne.n	bafa <log_output_process+0x18e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    bbbe:	9b04      	ldr	r3, [sp, #16]
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	f47f af34 	bne.w	ba2e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    bbc6:	4620      	mov	r0, r4
}
    bbc8:	b009      	add	sp, #36	; 0x24
    bbca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    bbce:	f010 ba1c 	b.w	1c00a <log_output_flush>
		print_formatted(output, "%s", log_color);
    bbd2:	4620      	mov	r0, r4
    bbd4:	4a05      	ldr	r2, [pc, #20]	; (bbec <log_output_process+0x280>)
    bbd6:	4906      	ldr	r1, [pc, #24]	; (bbf0 <log_output_process+0x284>)
    bbd8:	f7ff fe7c 	bl	b8d4 <print_formatted>
}
    bbdc:	e72a      	b.n	ba34 <log_output_process+0xc8>
    bbde:	bf00      	nop
    bbe0:	00020e3f 	.word	0x00020e3f
    bbe4:	00020e43 	.word	0x00020e43
    bbe8:	0001fae0 	.word	0x0001fae0
    bbec:	00020e3a 	.word	0x00020e3a
    bbf0:	000203d6 	.word	0x000203d6
    bbf4:	0001faf4 	.word	0x0001faf4
    bbf8:	00020e68 	.word	0x00020e68
    bbfc:	00020e6e 	.word	0x00020e6e
    bc00:	00020e72 	.word	0x00020e72
    bc04:	200096b8 	.word	0x200096b8
    bc08:	200096b4 	.word	0x200096b4
    bc0c:	00020e4c 	.word	0x00020e4c
    bc10:	0001c025 	.word	0x0001c025
    bc14:	0000b915 	.word	0x0000b915
    bc18:	0001bffd 	.word	0x0001bffd
    bc1c:	00020e77 	.word	0x00020e77
    bc20:	000205a4 	.word	0x000205a4
    bc24:	00020ddb 	.word	0x00020ddb
    bc28:	00023ad5 	.word	0x00023ad5
    bc2c:	00020e80 	.word	0x00020e80
    bc30:	00020e86 	.word	0x00020e86
    bc34:	00020e88 	.word	0x00020e88
    bc38:	00023ad3 	.word	0x00023ad3

0000bc3c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    bc40:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    bc42:	684b      	ldr	r3, [r1, #4]
    bc44:	4605      	mov	r5, r0
    bc46:	460c      	mov	r4, r1
    bc48:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    bc4a:	688e      	ldr	r6, [r1, #8]
    bc4c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    bc4e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    bc52:	b15b      	cbz	r3, bc6c <log_output_msg_process+0x30>
    bc54:	4a13      	ldr	r2, [pc, #76]	; (bca4 <log_output_msg_process+0x68>)
    bc56:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    bc58:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    bc5c:	2900      	cmp	r1, #0
    bc5e:	db1f      	blt.n	bca0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    bc60:	7820      	ldrb	r0, [r4, #0]
    bc62:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    bc66:	f7ff fd9b 	bl	b7a0 <log_source_name_get>
    bc6a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    bc6c:	4621      	mov	r1, r4
    bc6e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    bc72:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    bc74:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    bc78:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    bc7a:	eb01 0402 	add.w	r4, r1, r2
    bc7e:	bf08      	it	eq
    bc80:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    bc82:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    bc86:	e9cd 0803 	strd	r0, r8, [sp, #12]
    bc8a:	e9cd 1401 	strd	r1, r4, [sp, #4]
    bc8e:	2200      	movs	r2, #0
    bc90:	4631      	mov	r1, r6
    bc92:	4628      	mov	r0, r5
    bc94:	9700      	str	r7, [sp, #0]
    bc96:	f7ff fe69 	bl	b96c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    bc9a:	b006      	add	sp, #24
    bc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    bca0:	2300      	movs	r3, #0
    bca2:	e7e3      	b.n	bc6c <log_output_msg_process+0x30>
    bca4:	0001f8a0 	.word	0x0001f8a0

0000bca8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    bca8:	f242 730f 	movw	r3, #9999	; 0x270f
{
    bcac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    bcae:	428b      	cmp	r3, r1
    bcb0:	bf28      	it	cs
    bcb2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    bcb4:	6805      	ldr	r5, [r0, #0]
{
    bcb6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    bcb8:	2105      	movs	r1, #5
    bcba:	4668      	mov	r0, sp
    bcbc:	4a0d      	ldr	r2, [pc, #52]	; (bcf4 <log_output_dropped_process+0x4c>)
    bcbe:	f00f fe40 	bl	1b942 <snprintk>
    bcc2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    bcc4:	6863      	ldr	r3, [r4, #4]
    bcc6:	4628      	mov	r0, r5
    bcc8:	220b      	movs	r2, #11
    bcca:	685b      	ldr	r3, [r3, #4]
    bccc:	490a      	ldr	r1, [pc, #40]	; (bcf8 <log_output_dropped_process+0x50>)
    bcce:	f010 f988 	bl	1bfe2 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    bcd2:	6863      	ldr	r3, [r4, #4]
    bcd4:	4632      	mov	r2, r6
    bcd6:	4669      	mov	r1, sp
    bcd8:	4628      	mov	r0, r5
    bcda:	685b      	ldr	r3, [r3, #4]
    bcdc:	f010 f981 	bl	1bfe2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    bce0:	6863      	ldr	r3, [r4, #4]
    bce2:	221b      	movs	r2, #27
    bce4:	4628      	mov	r0, r5
    bce6:	685b      	ldr	r3, [r3, #4]
    bce8:	4904      	ldr	r1, [pc, #16]	; (bcfc <log_output_dropped_process+0x54>)
    bcea:	f010 f97a 	bl	1bfe2 <buffer_write>
		     output->control_block->ctx);
}
    bcee:	b002      	add	sp, #8
    bcf0:	bd70      	pop	{r4, r5, r6, pc}
    bcf2:	bf00      	nop
    bcf4:	00021aa8 	.word	0x00021aa8
    bcf8:	00020ea7 	.word	0x00020ea7
    bcfc:	00020e8b 	.word	0x00020e8b

0000bd00 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    bd00:	2100      	movs	r1, #0
    bd02:	2301      	movs	r3, #1
    bd04:	4a06      	ldr	r2, [pc, #24]	; (bd20 <log_output_timestamp_freq_set+0x20>)
    bd06:	4290      	cmp	r0, r2
    bd08:	d806      	bhi.n	bd18 <log_output_timestamp_freq_set+0x18>
    bd0a:	4a06      	ldr	r2, [pc, #24]	; (bd24 <log_output_timestamp_freq_set+0x24>)
    bd0c:	b901      	cbnz	r1, bd10 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    bd0e:	2301      	movs	r3, #1
    bd10:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    bd12:	4b05      	ldr	r3, [pc, #20]	; (bd28 <log_output_timestamp_freq_set+0x28>)
    bd14:	6018      	str	r0, [r3, #0]
}
    bd16:	4770      	bx	lr
		timestamp_div *= 2U;
    bd18:	2101      	movs	r1, #1
		frequency /= 2U;
    bd1a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    bd1c:	005b      	lsls	r3, r3, #1
    bd1e:	e7f2      	b.n	bd06 <log_output_timestamp_freq_set+0x6>
    bd20:	000f4240 	.word	0x000f4240
    bd24:	200096b4 	.word	0x200096b4
    bd28:	200096b8 	.word	0x200096b8

0000bd2c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    bd2c:	4b01      	ldr	r3, [pc, #4]	; (bd34 <format_set+0x8>)
	return 0;
}
    bd2e:	2000      	movs	r0, #0
	log_format_current = log_type;
    bd30:	6019      	str	r1, [r3, #0]
}
    bd32:	4770      	bx	lr
    bd34:	200096d0 	.word	0x200096d0

0000bd38 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    bd38:	2201      	movs	r2, #1
    bd3a:	4b02      	ldr	r3, [pc, #8]	; (bd44 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    bd3c:	4802      	ldr	r0, [pc, #8]	; (bd48 <panic+0x10>)
    bd3e:	701a      	strb	r2, [r3, #0]
    bd40:	f010 b963 	b.w	1c00a <log_output_flush>
    bd44:	20009bb9 	.word	0x20009bb9
    bd48:	0001fb24 	.word	0x0001fb24

0000bd4c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    bd4c:	4801      	ldr	r0, [pc, #4]	; (bd54 <dropped+0x8>)
    bd4e:	f7ff bfab 	b.w	bca8 <log_output_dropped_process>
    bd52:	bf00      	nop
    bd54:	0001fb24 	.word	0x0001fb24

0000bd58 <process>:
{
    bd58:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    bd5a:	4b06      	ldr	r3, [pc, #24]	; (bd74 <process+0x1c>)
{
    bd5c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    bd5e:	6818      	ldr	r0, [r3, #0]
    bd60:	f7ff fac4 	bl	b2ec <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    bd64:	4621      	mov	r1, r4
}
    bd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    bd6a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    bd6c:	220f      	movs	r2, #15
    bd6e:	4802      	ldr	r0, [pc, #8]	; (bd78 <process+0x20>)
    bd70:	4718      	bx	r3
    bd72:	bf00      	nop
    bd74:	200096d0 	.word	0x200096d0
    bd78:	0001fb24 	.word	0x0001fb24

0000bd7c <char_out>:
{
    bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd7e:	460d      	mov	r5, r1
    bd80:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    bd82:	4f06      	ldr	r7, [pc, #24]	; (bd9c <char_out+0x20>)
    bd84:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    bd86:	42b4      	cmp	r4, r6
    bd88:	d101      	bne.n	bd8e <char_out+0x12>
}
    bd8a:	4628      	mov	r0, r5
    bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    bd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
    bd92:	68bb      	ldr	r3, [r7, #8]
    bd94:	4801      	ldr	r0, [pc, #4]	; (bd9c <char_out+0x20>)
    bd96:	685b      	ldr	r3, [r3, #4]
    bd98:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    bd9a:	e7f4      	b.n	bd86 <char_out+0xa>
    bd9c:	0001f570 	.word	0x0001f570

0000bda0 <log_backend_uart_init>:
{
    bda0:	b508      	push	{r3, lr}
    bda2:	4807      	ldr	r0, [pc, #28]	; (bdc0 <log_backend_uart_init+0x20>)
    bda4:	f013 f925 	bl	1eff2 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    bda8:	b948      	cbnz	r0, bdbe <log_backend_uart_init+0x1e>
    bdaa:	4906      	ldr	r1, [pc, #24]	; (bdc4 <log_backend_uart_init+0x24>)
    bdac:	4806      	ldr	r0, [pc, #24]	; (bdc8 <log_backend_uart_init+0x28>)
    bdae:	236f      	movs	r3, #111	; 0x6f
    bdb0:	4a06      	ldr	r2, [pc, #24]	; (bdcc <log_backend_uart_init+0x2c>)
    bdb2:	f00f ffc1 	bl	1bd38 <assert_print>
    bdb6:	216f      	movs	r1, #111	; 0x6f
    bdb8:	4804      	ldr	r0, [pc, #16]	; (bdcc <log_backend_uart_init+0x2c>)
    bdba:	f00f ffb6 	bl	1bd2a <assert_post_action>
}
    bdbe:	bd08      	pop	{r3, pc}
    bdc0:	0001f570 	.word	0x0001f570
    bdc4:	00020f11 	.word	0x00020f11
    bdc8:	000205a4 	.word	0x000205a4
    bdcc:	00020ed3 	.word	0x00020ed3

0000bdd0 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    bdd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    bdd2:	b970      	cbnz	r0, bdf2 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    bdd4:	4b12      	ldr	r3, [pc, #72]	; (be20 <ipc_service_open_instance+0x50>)
    bdd6:	4813      	ldr	r0, [pc, #76]	; (be24 <ipc_service_open_instance+0x54>)
    bdd8:	9305      	str	r3, [sp, #20]
    bdda:	2302      	movs	r3, #2
    bddc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bde0:	aa04      	add	r2, sp, #16
    bde2:	9304      	str	r3, [sp, #16]
    bde4:	f010 f92c 	bl	1c040 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    bde8:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    bdec:	b007      	add	sp, #28
    bdee:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    bdf2:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    bdf4:	b963      	cbnz	r3, be10 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    bdf6:	4b0c      	ldr	r3, [pc, #48]	; (be28 <ipc_service_open_instance+0x58>)
    bdf8:	480a      	ldr	r0, [pc, #40]	; (be24 <ipc_service_open_instance+0x54>)
    bdfa:	9305      	str	r3, [sp, #20]
    bdfc:	2302      	movs	r3, #2
    bdfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be02:	aa04      	add	r2, sp, #16
    be04:	9304      	str	r3, [sp, #16]
    be06:	f010 f91b 	bl	1c040 <z_log_msg_static_create.constprop.0>
		return -EIO;
    be0a:	f06f 0004 	mvn.w	r0, #4
    be0e:	e7ed      	b.n	bdec <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    be10:	681b      	ldr	r3, [r3, #0]
    be12:	b11b      	cbz	r3, be1c <ipc_service_open_instance+0x4c>
}
    be14:	b007      	add	sp, #28
    be16:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    be1a:	4718      	bx	r3
		return 0;
    be1c:	4618      	mov	r0, r3
    be1e:	e7e5      	b.n	bdec <ipc_service_open_instance+0x1c>
    be20:	00020f45 	.word	0x00020f45
    be24:	0001f920 	.word	0x0001f920
    be28:	00020f56 	.word	0x00020f56

0000be2c <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    be2c:	b530      	push	{r4, r5, lr}
    be2e:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    be30:	b108      	cbz	r0, be36 <ipc_service_register_endpoint+0xa>
    be32:	b101      	cbz	r1, be36 <ipc_service_register_endpoint+0xa>
    be34:	b96a      	cbnz	r2, be52 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    be36:	4b13      	ldr	r3, [pc, #76]	; (be84 <ipc_service_register_endpoint+0x58>)
    be38:	4813      	ldr	r0, [pc, #76]	; (be88 <ipc_service_register_endpoint+0x5c>)
    be3a:	9305      	str	r3, [sp, #20]
    be3c:	2302      	movs	r3, #2
    be3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be42:	aa04      	add	r2, sp, #16
    be44:	9304      	str	r3, [sp, #16]
    be46:	f010 f8fb 	bl	1c040 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    be4a:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    be4e:	b007      	add	sp, #28
    be50:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    be52:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    be54:	b10c      	cbz	r4, be5a <ipc_service_register_endpoint+0x2e>
    be56:	68e5      	ldr	r5, [r4, #12]
    be58:	b965      	cbnz	r5, be74 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    be5a:	4b0c      	ldr	r3, [pc, #48]	; (be8c <ipc_service_register_endpoint+0x60>)
    be5c:	480a      	ldr	r0, [pc, #40]	; (be88 <ipc_service_register_endpoint+0x5c>)
    be5e:	9305      	str	r3, [sp, #20]
    be60:	2302      	movs	r3, #2
    be62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be66:	aa04      	add	r2, sp, #16
    be68:	9304      	str	r3, [sp, #16]
    be6a:	f010 f8e9 	bl	1c040 <z_log_msg_static_create.constprop.0>
		return -EIO;
    be6e:	f06f 0004 	mvn.w	r0, #4
    be72:	e7ec      	b.n	be4e <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    be74:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    be78:	68e3      	ldr	r3, [r4, #12]
}
    be7a:	b007      	add	sp, #28
    be7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    be80:	4718      	bx	r3
    be82:	bf00      	nop
    be84:	00020f74 	.word	0x00020f74
    be88:	0001f920 	.word	0x0001f920
    be8c:	00020f56 	.word	0x00020f56

0000be90 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    be90:	b530      	push	{r4, r5, lr}
    be92:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    be94:	4604      	mov	r4, r0
{
    be96:	b087      	sub	sp, #28
	if (!ept) {
    be98:	b968      	cbnz	r0, beb6 <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    be9a:	4b1a      	ldr	r3, [pc, #104]	; (bf04 <ipc_service_send+0x74>)
    be9c:	481a      	ldr	r0, [pc, #104]	; (bf08 <ipc_service_send+0x78>)
    be9e:	9305      	str	r3, [sp, #20]
    bea0:	2302      	movs	r3, #2
    bea2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bea6:	aa04      	add	r2, sp, #16
    bea8:	9304      	str	r3, [sp, #16]
    beaa:	f010 f8c9 	bl	1c040 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    beae:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    beb2:	b007      	add	sp, #28
    beb4:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    beb6:	6800      	ldr	r0, [r0, #0]
    beb8:	b960      	cbnz	r0, bed4 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    beba:	4b14      	ldr	r3, [pc, #80]	; (bf0c <ipc_service_send+0x7c>)
    bebc:	4812      	ldr	r0, [pc, #72]	; (bf08 <ipc_service_send+0x78>)
    bebe:	9305      	str	r3, [sp, #20]
    bec0:	2302      	movs	r3, #2
    bec2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bec6:	aa04      	add	r2, sp, #16
    bec8:	9304      	str	r3, [sp, #16]
    beca:	f010 f8b9 	bl	1c040 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    bece:	f06f 0001 	mvn.w	r0, #1
    bed2:	e7ee      	b.n	beb2 <ipc_service_send+0x22>
	backend = ept->instance->api;
    bed4:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    bed6:	b10a      	cbz	r2, bedc <ipc_service_send+0x4c>
    bed8:	6895      	ldr	r5, [r2, #8]
    beda:	b965      	cbnz	r5, bef6 <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    bedc:	4b0c      	ldr	r3, [pc, #48]	; (bf10 <ipc_service_send+0x80>)
    bede:	480a      	ldr	r0, [pc, #40]	; (bf08 <ipc_service_send+0x78>)
    bee0:	9305      	str	r3, [sp, #20]
    bee2:	2302      	movs	r3, #2
    bee4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bee8:	aa04      	add	r2, sp, #16
    beea:	9304      	str	r3, [sp, #16]
    beec:	f010 f8a8 	bl	1c040 <z_log_msg_static_create.constprop.0>
		return -EIO;
    bef0:	f06f 0004 	mvn.w	r0, #4
    bef4:	e7dd      	b.n	beb2 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    bef6:	460a      	mov	r2, r1
    bef8:	46ac      	mov	ip, r5
    befa:	6861      	ldr	r1, [r4, #4]
}
    befc:	b007      	add	sp, #28
    befe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    bf02:	4760      	bx	ip
    bf04:	00020fa0 	.word	0x00020fa0
    bf08:	0001f920 	.word	0x0001f920
    bf0c:	00020fb1 	.word	0x00020fb1
    bf10:	00020f56 	.word	0x00020f56

0000bf14 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    bf14:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    bf16:	2204      	movs	r2, #4
    bf18:	2100      	movs	r1, #0
    bf1a:	4802      	ldr	r0, [pc, #8]	; (bf24 <shared_memory_prepare+0x10>)
    bf1c:	f010 ff26 	bl	1cd6c <memset>
		}
	}

	return 0;
}
    bf20:	2000      	movs	r0, #0
    bf22:	bd08      	pop	{r3, pc}
    bf24:	20070000 	.word	0x20070000

0000bf28 <bound_cb>:
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    bf28:	2300      	movs	r3, #0
    bf2a:	2201      	movs	r2, #1
{
    bf2c:	b513      	push	{r0, r1, r4, lr}
    bf2e:	4604      	mov	r4, r0
    bf30:	e9cd 3200 	strd	r3, r2, [sp]
    bf34:	4b07      	ldr	r3, [pc, #28]	; (bf54 <bound_cb+0x2c>)
    bf36:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    bf3a:	f00b f95d 	bl	171f8 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    bf3e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bf40:	681b      	ldr	r3, [r3, #0]
    bf42:	b123      	cbz	r3, bf4e <bound_cb+0x26>
		ept->cb->bound(ept->priv);
    bf44:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    bf46:	b002      	add	sp, #8
    bf48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    bf4c:	4718      	bx	r3
}
    bf4e:	b002      	add	sp, #8
    bf50:	bd10      	pop	{r4, pc}
    bf52:	bf00      	nop
    bf54:	00022c5a 	.word	0x00022c5a

0000bf58 <advertise_ept>:
{
    bf58:	b530      	push	{r4, r5, lr}
    bf5a:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    bf5c:	490e      	ldr	r1, [pc, #56]	; (bf98 <advertise_ept+0x40>)
{
    bf5e:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    bf60:	9102      	str	r1, [sp, #8]
    bf62:	f8d0 1198 	ldr.w	r1, [r0, #408]	; 0x198
{
    bf66:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    bf68:	e9cd 3100 	strd	r3, r1, [sp]
    bf6c:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    bf70:	f04f 33ff 	mov.w	r3, #4294967295
    bf74:	4620      	mov	r0, r4
    bf76:	f00b f985 	bl	17284 <rpmsg_create_ept>
	if (err != 0) {
    bf7a:	b950      	cbnz	r0, bf92 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    bf7c:	2301      	movs	r3, #1
    bf7e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    bf82:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
    bf86:	b123      	cbz	r3, bf92 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    bf88:	4620      	mov	r0, r4
}
    bf8a:	b005      	add	sp, #20
    bf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    bf90:	4718      	bx	r3
}
    bf92:	b005      	add	sp, #20
    bf94:	bd30      	pop	{r4, r5, pc}
    bf96:	bf00      	nop
    bf98:	0001c137 	.word	0x0001c137

0000bf9c <get_ept>:
{
    bf9c:	b538      	push	{r3, r4, r5, lr}
    bf9e:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    bfa0:	4611      	mov	r1, r2
{
    bfa2:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    bfa4:	f010 f8c9 	bl	1c13a <get_ept_slot_with_name>
	if (ept != NULL) {
    bfa8:	4603      	mov	r3, r0
    bfaa:	b938      	cbnz	r0, bfbc <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    bfac:	4628      	mov	r0, r5
    bfae:	4904      	ldr	r1, [pc, #16]	; (bfc0 <get_ept+0x24>)
    bfb0:	f010 f8c3 	bl	1c13a <get_ept_slot_with_name>
    bfb4:	4603      	mov	r3, r0
	if (ept != NULL) {
    bfb6:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    bfb8:	6023      	str	r3, [r4, #0]
}
    bfba:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    bfbc:	2001      	movs	r0, #1
    bfbe:	e7fb      	b.n	bfb8 <get_ept+0x1c>
    bfc0:	00022c5a 	.word	0x00022c5a

0000bfc4 <open>:
{
    bfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    bfc8:	2301      	movs	r3, #1
    bfca:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    bfcc:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    bfce:	6846      	ldr	r6, [r0, #4]
{
    bfd0:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    bfd2:	f505 7755 	add.w	r7, r5, #852	; 0x354
    bfd6:	e8d7 2fef 	ldaex	r2, [r7]
    bfda:	2a00      	cmp	r2, #0
    bfdc:	d103      	bne.n	bfe6 <open+0x22>
    bfde:	e8c7 3fe1 	stlex	r1, r3, [r7]
    bfe2:	2900      	cmp	r1, #0
    bfe4:	d1f7      	bne.n	bfd6 <open+0x12>
    bfe6:	f040 80b8 	bne.w	c15a <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    bfea:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    bfec:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    bfee:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    bff0:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    bff2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    bff6:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    bffa:	bf26      	itte	cs
    bffc:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    c000:	fab3 f383 	clzcs	r3, r3
		return 0;
    c004:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    c006:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    c00a:	bf28      	it	cs
    c00c:	f1c3 0320 	rsbcs	r3, r3, #32
    c010:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    c012:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    c014:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
	if (num_desc == 0) {
    c018:	f000 8099 	beq.w	c14e <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    c01c:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    c01e:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    c020:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    c022:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    c024:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    c028:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    c02a:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    c02c:	3209      	adds	r2, #9
    c02e:	f8c5 0248 	str.w	r0, [r5, #584]	; 0x248
	size += sizeof(struct vring_used) +
    c032:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    c034:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    c038:	440a      	add	r2, r1
	return (buf_size * num);
    c03a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    c03c:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    c040:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    c042:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    c046:	f8c5 124c 	str.w	r1, [r5, #588]	; 0x24c
	return (buf_size * num);
    c04a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    c04c:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    c04e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    c052:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    c056:	3303      	adds	r3, #3
    c058:	4413      	add	r3, r2
    c05a:	f023 0303 	bic.w	r3, r3, #3
    c05e:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
	vr->status_reg_addr = conf->shm_addr;
    c062:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    c064:	f8c5 4244 	str.w	r4, [r5, #580]	; 0x244
	vr->status_reg_addr = conf->shm_addr;
    c068:	f8c5 3238 	str.w	r3, [r5, #568]	; 0x238
	data->vr.notify_cb = virtio_notify_cb;
    c06c:	4b3c      	ldr	r3, [pc, #240]	; (c160 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    c06e:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    c070:	e9c5 63a3 	strd	r6, r3, [r5, #652]	; 0x28c
	err = ipc_static_vrings_init(&data->vr, conf->role);
    c074:	6831      	ldr	r1, [r6, #0]
    c076:	f000 fa03 	bl	c480 <ipc_static_vrings_init>
	if (err != 0) {
    c07a:	4604      	mov	r4, r0
    c07c:	bb30      	cbnz	r0, c0cc <open+0x108>
	const struct backend_config_t *conf = instance->config;
    c07e:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    c082:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    c086:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    c08a:	f509 7b2a 	add.w	fp, r9, #680	; 0x2a8
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    c08e:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    c090:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    c092:	bf08      	it	eq
    c094:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    c096:	f00c ff17 	bl	18ec8 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    c09a:	2300      	movs	r3, #0
    c09c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    c0a0:	4930      	ldr	r1, [pc, #192]	; (c164 <open+0x1a0>)
    c0a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c0a6:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    c0aa:	9300      	str	r3, [sp, #0]
    c0ac:	4658      	mov	r0, fp
    c0ae:	4623      	mov	r3, r4
    c0b0:	f00c ff24 	bl	18efc <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    c0b4:	f509 7026 	add.w	r0, r9, #664	; 0x298
    c0b8:	492b      	ldr	r1, [pc, #172]	; (c168 <open+0x1a4>)
    c0ba:	f00c fe39 	bl	18d30 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    c0be:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    c0c2:	6883      	ldr	r3, [r0, #8]
    c0c4:	685c      	ldr	r4, [r3, #4]
    c0c6:	b91c      	cbnz	r4, c0d0 <open+0x10c>
		return -ENOSYS;
    c0c8:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    c0cc:	2100      	movs	r1, #0
    c0ce:	e037      	b.n	c140 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    c0d0:	464b      	mov	r3, r9
    c0d2:	4a26      	ldr	r2, [pc, #152]	; (c16c <open+0x1a8>)
    c0d4:	f8da 1018 	ldr.w	r1, [sl, #24]
    c0d8:	47a0      	blx	r4
	if (err != 0) {
    c0da:	4604      	mov	r4, r0
    c0dc:	2800      	cmp	r0, #0
    c0de:	d1f5      	bne.n	c0cc <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    c0e0:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    c0e4:	6883      	ldr	r3, [r0, #8]
    c0e6:	691b      	ldr	r3, [r3, #16]
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d0ed      	beq.n	c0c8 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    c0ec:	2201      	movs	r2, #1
    c0ee:	f8da 1018 	ldr.w	r1, [sl, #24]
    c0f2:	4798      	blx	r3
	if (err != 0) {
    c0f4:	4604      	mov	r4, r0
    c0f6:	2800      	cmp	r0, #0
    c0f8:	d1e8      	bne.n	c0cc <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    c0fa:	4b1d      	ldr	r3, [pc, #116]	; (c170 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    c0fc:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    c0fe:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	rpmsg_inst->cb = ept_cb;
    c102:	4b1c      	ldr	r3, [pc, #112]	; (c174 <open+0x1b0>)
    c104:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    c108:	4b1b      	ldr	r3, [pc, #108]	; (c178 <open+0x1b4>)
    c10a:	9303      	str	r3, [sp, #12]
    c10c:	f8d5 31f8 	ldr.w	r3, [r5, #504]	; 0x1f8
    c110:	9302      	str	r3, [sp, #8]
    c112:	f8d5 31f0 	ldr.w	r3, [r5, #496]	; 0x1f0
    c116:	e9cd 8300 	strd	r8, r3, [sp]
    c11a:	f8d5 3250 	ldr.w	r3, [r5, #592]	; 0x250
    c11e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    c120:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    c124:	f000 f976 	bl	c414 <ipc_rpmsg_init>
	if (err != 0) {
    c128:	4604      	mov	r4, r0
    c12a:	2800      	cmp	r0, #0
    c12c:	d1ce      	bne.n	c0cc <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    c12e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    c132:	f00b fa45 	bl	175c0 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    c136:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    c138:	f8c5 0358 	str.w	r0, [r5, #856]	; 0x358
	if (data->tx_buffer_size < 0) {
    c13c:	db0a      	blt.n	c154 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    c13e:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    c140:	4638      	mov	r0, r7
    c142:	f010 f846 	bl	1c1d2 <atomic_set.isra.0>
}
    c146:	4620      	mov	r0, r4
    c148:	b005      	add	sp, #20
    c14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    c14e:	f06f 040b 	mvn.w	r4, #11
    c152:	e7bb      	b.n	c0cc <open+0x108>
		err = -EINVAL;
    c154:	f06f 0415 	mvn.w	r4, #21
    c158:	e7b8      	b.n	c0cc <open+0x108>
		return -EALREADY;
    c15a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c15e:	e7f2      	b.n	c146 <open+0x182>
    c160:	0001c1bb 	.word	0x0001c1bb
    c164:	2000a860 	.word	0x2000a860
    c168:	0001c173 	.word	0x0001c173
    c16c:	0001c167 	.word	0x0001c167
    c170:	0000bf29 	.word	0x0000bf29
    c174:	0001c18d 	.word	0x0001c18d
    c178:	0001c203 	.word	0x0001c203

0000c17c <close>:
{
    c17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c180:	4606      	mov	r6, r0
    c182:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    c186:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    c188:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    c18c:	f505 7755 	add.w	r7, r5, #852	; 0x354
    c190:	e8d7 3fef 	ldaex	r3, [r7]
    c194:	2b02      	cmp	r3, #2
    c196:	d103      	bne.n	c1a0 <close+0x24>
    c198:	e8c7 9fe2 	stlex	r2, r9, [r7]
    c19c:	2a00      	cmp	r2, #0
    c19e:	d1f7      	bne.n	c190 <close+0x14>
    c1a0:	d149      	bne.n	c236 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    c1a2:	4826      	ldr	r0, [pc, #152]	; (c23c <close+0xc0>)
    c1a4:	f105 0140 	add.w	r1, r5, #64	; 0x40
    c1a8:	f010 fda6 	bl	1ccf8 <strcmp>
    c1ac:	b120      	cbz	r0, c1b8 <close+0x3c>
		return -EBUSY;
    c1ae:	f06f 040f 	mvn.w	r4, #15
}
    c1b2:	4620      	mov	r0, r4
    c1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    c1b8:	4820      	ldr	r0, [pc, #128]	; (c23c <close+0xc0>)
    c1ba:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    c1be:	f010 fd9b 	bl	1ccf8 <strcmp>
    c1c2:	2800      	cmp	r0, #0
    c1c4:	d1f3      	bne.n	c1ae <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    c1c6:	4628      	mov	r0, r5
    c1c8:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    c1cc:	f010 f86d 	bl	1c2aa <ipc_rpmsg_deinit>
	if (err != 0) {
    c1d0:	4604      	mov	r4, r0
    c1d2:	bb70      	cbnz	r0, c232 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    c1d4:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    c1d6:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    c1d8:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    c1da:	6883      	ldr	r3, [r0, #8]
    c1dc:	691b      	ldr	r3, [r3, #16]
    c1de:	b333      	cbz	r3, c22e <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    c1e0:	4622      	mov	r2, r4
    c1e2:	6989      	ldr	r1, [r1, #24]
    c1e4:	4798      	blx	r3
	if (err != 0) {
    c1e6:	4604      	mov	r4, r0
    c1e8:	bb18      	cbnz	r0, c232 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    c1ea:	f506 762a 	add.w	r6, r6, #680	; 0x2a8
    c1ee:	4649      	mov	r1, r9
    c1f0:	4630      	mov	r0, r6
    c1f2:	f00c feeb 	bl	18fcc <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    c1f6:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    c1f8:	f505 76d8 	add.w	r6, r5, #432	; 0x1b0
    c1fc:	f001 fa52 	bl	d6a4 <z_impl_k_thread_abort>
    c200:	4630      	mov	r0, r6
    c202:	f8d8 1000 	ldr.w	r1, [r8]
    c206:	f010 f88d 	bl	1c324 <ipc_static_vrings_deinit>
	if (err != 0) {
    c20a:	4604      	mov	r4, r0
    c20c:	b988      	cbnz	r0, c232 <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    c20e:	4601      	mov	r1, r0
    c210:	22e8      	movs	r2, #232	; 0xe8
    c212:	4630      	mov	r0, r6
    c214:	f010 fdaa 	bl	1cd6c <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    c218:	4621      	mov	r1, r4
    c21a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
    c21e:	4628      	mov	r0, r5
    c220:	f010 fda4 	bl	1cd6c <memset>
	atomic_set(&data->state, STATE_READY);
    c224:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    c226:	4638      	mov	r0, r7
    c228:	f00f ffd3 	bl	1c1d2 <atomic_set.isra.0>
	return err;
    c22c:	e7c1      	b.n	c1b2 <close+0x36>
		return -ENOSYS;
    c22e:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    c232:	2102      	movs	r1, #2
    c234:	e7f7      	b.n	c226 <close+0xaa>
		return -EALREADY;
    c236:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c23a:	e7ba      	b.n	c1b2 <close+0x36>
    c23c:	00022c5a 	.word	0x00022c5a

0000c240 <send>:
{
    c240:	b513      	push	{r0, r1, r4, lr}
    c242:	4604      	mov	r4, r0
    c244:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c246:	6921      	ldr	r1, [r4, #16]
    c248:	f501 7155 	add.w	r1, r1, #852	; 0x354
    c24c:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    c250:	2902      	cmp	r1, #2
    c252:	d110      	bne.n	c276 <send+0x36>
	if (len == 0) {
    c254:	b193      	cbz	r3, c27c <send+0x3c>
	if (!rpmsg_ept) {
    c256:	b1a0      	cbz	r0, c282 <send+0x42>
    c258:	2101      	movs	r1, #1
    c25a:	e9cd 3100 	strd	r3, r1, [sp]
    c25e:	4613      	mov	r3, r2
    c260:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    c264:	f00a ffc8 	bl	171f8 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    c268:	4b07      	ldr	r3, [pc, #28]	; (c288 <send+0x48>)
		return -ENOMEM;
    c26a:	4298      	cmp	r0, r3
    c26c:	bf08      	it	eq
    c26e:	f06f 000b 	mvneq.w	r0, #11
}
    c272:	b002      	add	sp, #8
    c274:	bd10      	pop	{r4, pc}
		return -EBUSY;
    c276:	f06f 000f 	mvn.w	r0, #15
    c27a:	e7fa      	b.n	c272 <send+0x32>
		return -EBADMSG;
    c27c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    c280:	e7f7      	b.n	c272 <send+0x32>
		return -ENOENT;
    c282:	f06f 0001 	mvn.w	r0, #1
    c286:	e7f4      	b.n	c272 <send+0x32>
    c288:	fffff82e 	.word	0xfffff82e

0000c28c <register_ept>:
{
    c28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c290:	4688      	mov	r8, r1
    c292:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    c294:	6906      	ldr	r6, [r0, #16]
    c296:	f506 7355 	add.w	r3, r6, #852	; 0x354
    c29a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    c29e:	2b02      	cmp	r3, #2
    c2a0:	d15f      	bne.n	c362 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    c2a2:	6813      	ldr	r3, [r2, #0]
    c2a4:	b923      	cbnz	r3, c2b0 <register_ept+0x24>
		return -EINVAL;
    c2a6:	f06f 0015 	mvn.w	r0, #21
}
    c2aa:	b003      	add	sp, #12
    c2ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    c2b0:	781b      	ldrb	r3, [r3, #0]
    c2b2:	2b00      	cmp	r3, #0
    c2b4:	d0f7      	beq.n	c2a6 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    c2b6:	f8d6 9350 	ldr.w	r9, [r6, #848]	; 0x350
    c2ba:	f1b9 0f00 	cmp.w	r9, #0
    c2be:	d133      	bne.n	c328 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    c2c0:	f506 77ce 	add.w	r7, r6, #412	; 0x19c
	return z_impl_k_mutex_lock(mutex, timeout);
    c2c4:	f04f 32ff 	mov.w	r2, #4294967295
    c2c8:	f04f 33ff 	mov.w	r3, #4294967295
    c2cc:	4638      	mov	r0, r7
    c2ce:	f00b ffc7 	bl	18260 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    c2d2:	4630      	mov	r0, r6
    c2d4:	682a      	ldr	r2, [r5, #0]
    c2d6:	a901      	add	r1, sp, #4
    c2d8:	f7ff fe60 	bl	bf9c <get_ept>
	if (rpmsg_ept == NULL) {
    c2dc:	9c01      	ldr	r4, [sp, #4]
    c2de:	b91c      	cbnz	r4, c2e8 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c2e0:	4638      	mov	r0, r7
    c2e2:	f00f ff74 	bl	1c1ce <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    c2e6:	e7de      	b.n	c2a6 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    c2e8:	f105 0308 	add.w	r3, r5, #8
    c2ec:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c2ee:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    c2f0:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    c2f4:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    c2f6:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    c2f8:	b160      	cbz	r0, c314 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c2fa:	4638      	mov	r0, r7
    c2fc:	f00f ff67 	bl	1c1ce <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    c300:	4621      	mov	r1, r4
    c302:	4630      	mov	r0, r6
    c304:	6e23      	ldr	r3, [r4, #96]	; 0x60
    c306:	682a      	ldr	r2, [r5, #0]
    c308:	f7ff fe26 	bl	bf58 <advertise_ept>
	return 0;
    c30c:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    c30e:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    c312:	e7ca      	b.n	c2aa <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c314:	2220      	movs	r2, #32
    c316:	6829      	ldr	r1, [r5, #0]
    c318:	f104 0040 	add.w	r0, r4, #64	; 0x40
    c31c:	f010 fcc8 	bl	1ccb0 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c320:	4638      	mov	r0, r7
    c322:	f00f ff54 	bl	1c1ce <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    c326:	e7f1      	b.n	c30c <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    c328:	4630      	mov	r0, r6
    c32a:	490f      	ldr	r1, [pc, #60]	; (c368 <register_ept+0xdc>)
    c32c:	f00f ff05 	bl	1c13a <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    c330:	4604      	mov	r4, r0
    c332:	2800      	cmp	r0, #0
    c334:	d0b7      	beq.n	c2a6 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    c336:	f105 0308 	add.w	r3, r5, #8
    c33a:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c33c:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    c33e:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    c340:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    c342:	2300      	movs	r3, #0
    c344:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c348:	2220      	movs	r2, #32
    c34a:	6829      	ldr	r1, [r5, #0]
    c34c:	3040      	adds	r0, #64	; 0x40
    c34e:	f010 fcaf 	bl	1ccb0 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    c352:	4622      	mov	r2, r4
    c354:	2101      	movs	r1, #1
    c356:	4630      	mov	r0, r6
    c358:	f000 f83e 	bl	c3d8 <ipc_rpmsg_register_ept>
	if (err != 0) {
    c35c:	2800      	cmp	r0, #0
    c35e:	d0d5      	beq.n	c30c <register_ept+0x80>
    c360:	e7a1      	b.n	c2a6 <register_ept+0x1a>
		return -EBUSY;
    c362:	f06f 000f 	mvn.w	r0, #15
    c366:	e7a0      	b.n	c2aa <register_ept+0x1e>
    c368:	00022c5a 	.word	0x00022c5a

0000c36c <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    c36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c370:	4605      	mov	r5, r0
    c372:	460e      	mov	r6, r1
    c374:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c376:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    c378:	f8d0 a0a4 	ldr.w	sl, [r0, #164]	; 0xa4
{
    c37c:	b085      	sub	sp, #20
    c37e:	f5aa 74a4 	sub.w	r4, sl, #328	; 0x148
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    c382:	4621      	mov	r1, r4
    c384:	4630      	mov	r0, r6
    c386:	f010 fcb7 	bl	1ccf8 <strcmp>
    c38a:	b9e0      	cbnz	r0, c3c6 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c38c:	4b11      	ldr	r3, [pc, #68]	; (c3d4 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    c38e:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c392:	9302      	str	r3, [sp, #8]
    c394:	f8da 3010 	ldr.w	r3, [sl, #16]
    c398:	4632      	mov	r2, r6
    c39a:	e9cd 8300 	strd	r8, r3, [sp]
    c39e:	4629      	mov	r1, r5
    c3a0:	f04f 33ff 	mov.w	r3, #4294967295
    c3a4:	4658      	mov	r0, fp
    c3a6:	f5aa 79c4 	sub.w	r9, sl, #392	; 0x188
    c3aa:	f00a ff6b 	bl	17284 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    c3ae:	b960      	cbnz	r0, c3ca <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    c3b0:	2370      	movs	r3, #112	; 0x70
    c3b2:	2201      	movs	r2, #1
    c3b4:	fb03 9307 	mla	r3, r3, r7, r9
    c3b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    c3bc:	f8da 300c 	ldr.w	r3, [sl, #12]
    c3c0:	b10b      	cbz	r3, c3c6 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    c3c2:	4658      	mov	r0, fp
    c3c4:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c3c6:	3470      	adds	r4, #112	; 0x70
    c3c8:	b117      	cbz	r7, c3d0 <ns_bind_cb+0x64>
			}
		}
	}
}
    c3ca:	b005      	add	sp, #20
    c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c3d0:	2701      	movs	r7, #1
    c3d2:	e7d6      	b.n	c382 <ns_bind_cb+0x16>
    c3d4:	0001c2a7 	.word	0x0001c2a7

0000c3d8 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    c3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c3da:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    c3dc:	b190      	cbz	r0, c404 <ipc_rpmsg_register_ept+0x2c>
    c3de:	b18a      	cbz	r2, c404 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    c3e0:	2901      	cmp	r1, #1
    c3e2:	d112      	bne.n	c40a <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    c3e4:	4b0a      	ldr	r3, [pc, #40]	; (c410 <ipc_rpmsg_register_ept+0x38>)
    c3e6:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    c3ea:	9302      	str	r3, [sp, #8]
    c3ec:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    c3f0:	3240      	adds	r2, #64	; 0x40
    c3f2:	9301      	str	r3, [sp, #4]
    c3f4:	f04f 33ff 	mov.w	r3, #4294967295
    c3f8:	4620      	mov	r0, r4
    c3fa:	9300      	str	r3, [sp, #0]
    c3fc:	f00a ff42 	bl	17284 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    c400:	b004      	add	sp, #16
    c402:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c404:	f06f 0015 	mvn.w	r0, #21
    c408:	e7fa      	b.n	c400 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    c40a:	2000      	movs	r0, #0
    c40c:	e7f8      	b.n	c400 <ipc_rpmsg_register_ept+0x28>
    c40e:	bf00      	nop
    c410:	0001c2a7 	.word	0x0001c2a7

0000c414 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    c414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c418:	b085      	sub	sp, #20
    c41a:	460f      	mov	r7, r1
    c41c:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	; 0x30
    c420:	4614      	mov	r4, r2
    c422:	e9dd 250e 	ldrd	r2, r5, [sp, #56]	; 0x38
    c426:	461e      	mov	r6, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    c428:	b328      	cbz	r0, c476 <ipc_rpmsg_init+0x62>
    c42a:	b321      	cbz	r1, c476 <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    c42c:	f8df c04c 	ldr.w	ip, [pc, #76]	; c47c <ipc_rpmsg_init+0x68>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    c430:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    c434:	2d00      	cmp	r5, #0
    c436:	bf08      	it	eq
    c438:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    c43a:	b997      	cbnz	r7, c462 <ipc_rpmsg_init+0x4e>
		config.r2h_buf_size = (uint32_t) buffer_size;
    c43c:	e9cd 4402 	strd	r4, r4, [sp, #8]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    c440:	f500 74c4 	add.w	r4, r0, #392	; 0x188
    c444:	4620      	mov	r0, r4
    c446:	f012 fdc1 	bl	1efcc <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    c44a:	ab02      	add	r3, sp, #8
    c44c:	e9cd 4300 	strd	r4, r3, [sp]
    c450:	462a      	mov	r2, r5
    c452:	4633      	mov	r3, r6
    c454:	4641      	mov	r1, r8
    c456:	4648      	mov	r0, r9
    c458:	f00b f8d8 	bl	1760c <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    c45c:	b005      	add	sp, #20
    c45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    c462:	2200      	movs	r2, #0
    c464:	4641      	mov	r1, r8
    c466:	920c      	str	r2, [sp, #48]	; 0x30
    c468:	4648      	mov	r0, r9
    c46a:	462a      	mov	r2, r5
}
    c46c:	b005      	add	sp, #20
    c46e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    c472:	f00b b9db 	b.w	1782c <rpmsg_init_vdev>
		return -EINVAL;
    c476:	f06f 0015 	mvn.w	r0, #21
    c47a:	e7ef      	b.n	c45c <ipc_rpmsg_init+0x48>
    c47c:	0000c36d 	.word	0x0000c36d

0000c480 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    c480:	b5f0      	push	{r4, r5, r6, r7, lr}
    c482:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    c484:	4604      	mov	r4, r0
{
    c486:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    c488:	2800      	cmp	r0, #0
    c48a:	d06f      	beq.n	c56c <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    c48c:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    c48e:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    c490:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c492:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    c494:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    c498:	4f36      	ldr	r7, [pc, #216]	; (c574 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c49a:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    c49c:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    c4a0:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c4a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c4a8:	f04f 33ff 	mov.w	r3, #4294967295
    c4ac:	9300      	str	r3, [sp, #0]
    c4ae:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    c4b0:	f012 f938 	bl	1e724 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    c4b4:	4a30      	ldr	r2, [pc, #192]	; (c578 <ipc_static_vrings_init+0xf8>)
    c4b6:	ab06      	add	r3, sp, #24
    c4b8:	e892 0003 	ldmia.w	r2, {r0, r1}
    c4bc:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    c4c0:	4618      	mov	r0, r3
    c4c2:	f00a fdb9 	bl	17038 <metal_init>
	if (err != 0) {
    c4c6:	4605      	mov	r5, r0
    c4c8:	b9d8      	cbnz	r0, c502 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    c4ca:	f104 0034 	add.w	r0, r4, #52	; 0x34
    c4ce:	f00a fd93 	bl	16ff8 <metal_register_generic_device>
	if (err != 0) {
    c4d2:	4605      	mov	r5, r0
    c4d4:	b9a8      	cbnz	r0, c502 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    c4d6:	4639      	mov	r1, r7
    c4d8:	4828      	ldr	r0, [pc, #160]	; (c57c <ipc_static_vrings_init+0xfc>)
    c4da:	aa05      	add	r2, sp, #20
    c4dc:	f012 f8fa 	bl	1e6d4 <metal_device_open>
	if (err != 0) {
    c4e0:	4605      	mov	r5, r0
    c4e2:	b970      	cbnz	r0, c502 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    c4e4:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    c4e6:	689a      	ldr	r2, [r3, #8]
    c4e8:	b172      	cbz	r2, c508 <ipc_static_vrings_init+0x88>
    c4ea:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    c4ec:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    c4f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    c4f4:	f00f ff08 	bl	1c308 <virtqueue_allocate>
    c4f8:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    c4fc:	b930      	cbnz	r0, c50c <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    c4fe:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    c502:	4628      	mov	r0, r5
    c504:	b009      	add	sp, #36	; 0x24
    c506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c508:	4603      	mov	r3, r0
    c50a:	e7ef      	b.n	c4ec <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    c50c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c510:	f00f fefa 	bl	1c308 <virtqueue_allocate>
    c514:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    c518:	2800      	cmp	r0, #0
    c51a:	d0f0      	beq.n	c4fe <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    c51c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    c520:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    c524:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    c528:	2304      	movs	r3, #4
    c52a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    c52e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    c532:	2302      	movs	r3, #2
    c534:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    c536:	4b12      	ldr	r3, [pc, #72]	; (c580 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    c538:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    c53c:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    c540:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    c544:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    c548:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    c54c:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    c54e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    c552:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    c556:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    c55a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    c55e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    c562:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    c566:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    c568:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    c56a:	e7ca      	b.n	c502 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    c56c:	f06f 0515 	mvn.w	r5, #21
    c570:	e7c7      	b.n	c502 <ipc_static_vrings_init+0x82>
    c572:	bf00      	nop
    c574:	00020fdb 	.word	0x00020fdb
    c578:	0001f9c4 	.word	0x0001f9c4
    c57c:	00020fe5 	.word	0x00020fe5
    c580:	0001fb60 	.word	0x0001fb60

0000c584 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c588:	4605      	mov	r5, r0
	__asm__ volatile(
    c58a:	f04f 0320 	mov.w	r3, #32
    c58e:	f3ef 8611 	mrs	r6, BASEPRI
    c592:	f383 8812 	msr	BASEPRI_MAX, r3
    c596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c59a:	4820      	ldr	r0, [pc, #128]	; (c61c <pm_state_notify+0x98>)
    c59c:	f00b fe0a 	bl	181b4 <z_spin_lock_valid>
    c5a0:	b968      	cbnz	r0, c5be <pm_state_notify+0x3a>
    c5a2:	2394      	movs	r3, #148	; 0x94
    c5a4:	4a1e      	ldr	r2, [pc, #120]	; (c620 <pm_state_notify+0x9c>)
    c5a6:	491f      	ldr	r1, [pc, #124]	; (c624 <pm_state_notify+0xa0>)
    c5a8:	481f      	ldr	r0, [pc, #124]	; (c628 <pm_state_notify+0xa4>)
    c5aa:	f00f fbc5 	bl	1bd38 <assert_print>
    c5ae:	491b      	ldr	r1, [pc, #108]	; (c61c <pm_state_notify+0x98>)
    c5b0:	481e      	ldr	r0, [pc, #120]	; (c62c <pm_state_notify+0xa8>)
    c5b2:	f00f fbc1 	bl	1bd38 <assert_print>
    c5b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c5b8:	4819      	ldr	r0, [pc, #100]	; (c620 <pm_state_notify+0x9c>)
    c5ba:	f00f fbb6 	bl	1bd2a <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c5be:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    c5c2:	4816      	ldr	r0, [pc, #88]	; (c61c <pm_state_notify+0x98>)
    c5c4:	f00b fe12 	bl	181ec <z_spin_lock_set_owner>
	return list->head;
    c5c8:	4b19      	ldr	r3, [pc, #100]	; (c630 <pm_state_notify+0xac>)
    c5ca:	4f1a      	ldr	r7, [pc, #104]	; (c634 <pm_state_notify+0xb0>)
    c5cc:	681c      	ldr	r4, [r3, #0]
    c5ce:	f8df 8068 	ldr.w	r8, [pc, #104]	; c638 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c5d2:	b97c      	cbnz	r4, c5f4 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c5d4:	4811      	ldr	r0, [pc, #68]	; (c61c <pm_state_notify+0x98>)
    c5d6:	f00b fdfb 	bl	181d0 <z_spin_unlock_valid>
    c5da:	b9c8      	cbnz	r0, c610 <pm_state_notify+0x8c>
    c5dc:	23c2      	movs	r3, #194	; 0xc2
    c5de:	4a10      	ldr	r2, [pc, #64]	; (c620 <pm_state_notify+0x9c>)
    c5e0:	4916      	ldr	r1, [pc, #88]	; (c63c <pm_state_notify+0xb8>)
    c5e2:	4811      	ldr	r0, [pc, #68]	; (c628 <pm_state_notify+0xa4>)
    c5e4:	f00f fba8 	bl	1bd38 <assert_print>
    c5e8:	490c      	ldr	r1, [pc, #48]	; (c61c <pm_state_notify+0x98>)
    c5ea:	4815      	ldr	r0, [pc, #84]	; (c640 <pm_state_notify+0xbc>)
    c5ec:	f00f fba4 	bl	1bd38 <assert_print>
    c5f0:	21c2      	movs	r1, #194	; 0xc2
    c5f2:	e7e1      	b.n	c5b8 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    c5f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    c5f8:	2d00      	cmp	r5, #0
    c5fa:	bf18      	it	ne
    c5fc:	4613      	movne	r3, r2
		if (callback) {
    c5fe:	b12b      	cbz	r3, c60c <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c600:	f898 2014 	ldrb.w	r2, [r8, #20]
    c604:	fb09 f202 	mul.w	r2, r9, r2
    c608:	5cb8      	ldrb	r0, [r7, r2]
    c60a:	4798      	blx	r3
	return node->next;
    c60c:	6824      	ldr	r4, [r4, #0]
    c60e:	e7e0      	b.n	c5d2 <pm_state_notify+0x4e>
	__asm__ volatile(
    c610:	f386 8811 	msr	BASEPRI, r6
    c614:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c61c:	200096d4 	.word	0x200096d4
    c620:	000209d8 	.word	0x000209d8
    c624:	00020a31 	.word	0x00020a31
    c628:	000205a4 	.word	0x000205a4
    c62c:	00020a46 	.word	0x00020a46
    c630:	200096f4 	.word	0x200096f4
    c634:	200096e8 	.word	0x200096e8
    c638:	20009b48 	.word	0x20009b48
    c63c:	00020a05 	.word	0x00020a05
    c640:	00020a1c 	.word	0x00020a1c

0000c644 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c644:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    c646:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c648:	4b16      	ldr	r3, [pc, #88]	; (c6a4 <pm_system_resume+0x60>)
    c64a:	7d1c      	ldrb	r4, [r3, #20]
    c64c:	f004 031f 	and.w	r3, r4, #31
    c650:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c652:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c654:	4b14      	ldr	r3, [pc, #80]	; (c6a8 <pm_system_resume+0x64>)
    c656:	0961      	lsrs	r1, r4, #5
    c658:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c65c:	e8d3 1fef 	ldaex	r1, [r3]
    c660:	ea01 0500 	and.w	r5, r1, r0
    c664:	e8c3 5fe6 	stlex	r6, r5, [r3]
    c668:	2e00      	cmp	r6, #0
    c66a:	d1f7      	bne.n	c65c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c66c:	420a      	tst	r2, r1
    c66e:	d013      	beq.n	c698 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    c670:	4b0e      	ldr	r3, [pc, #56]	; (c6ac <pm_system_resume+0x68>)
    c672:	4d0f      	ldr	r5, [pc, #60]	; (c6b0 <pm_system_resume+0x6c>)
    c674:	b18b      	cbz	r3, c69a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c676:	230c      	movs	r3, #12
    c678:	4363      	muls	r3, r4
    c67a:	18ea      	adds	r2, r5, r3
    c67c:	7851      	ldrb	r1, [r2, #1]
    c67e:	5ce8      	ldrb	r0, [r5, r3]
    c680:	f00f fc56 	bl	1bf30 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    c684:	2000      	movs	r0, #0
    c686:	f7ff ff7d 	bl	c584 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c68a:	230c      	movs	r3, #12
    c68c:	435c      	muls	r4, r3
    c68e:	2300      	movs	r3, #0
    c690:	192a      	adds	r2, r5, r4
    c692:	512b      	str	r3, [r5, r4]
    c694:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    c698:	bd70      	pop	{r4, r5, r6, pc}
    c69a:	f383 8811 	msr	BASEPRI, r3
    c69e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    c6a2:	e7ef      	b.n	c684 <pm_system_resume+0x40>
    c6a4:	20009b48 	.word	0x20009b48
    c6a8:	200096fc 	.word	0x200096fc
    c6ac:	0001bf31 	.word	0x0001bf31
    c6b0:	200096e8 	.word	0x200096e8

0000c6b4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    c6b8:	4b45      	ldr	r3, [pc, #276]	; (c7d0 <pm_system_suspend+0x11c>)
{
    c6ba:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    c6bc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    c6be:	f04f 0320 	mov.w	r3, #32
    c6c2:	f3ef 8811 	mrs	r8, BASEPRI
    c6c6:	f383 8812 	msr	BASEPRI_MAX, r3
    c6ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c6ce:	4841      	ldr	r0, [pc, #260]	; (c7d4 <pm_system_suspend+0x120>)
    c6d0:	f00b fd70 	bl	181b4 <z_spin_lock_valid>
    c6d4:	b968      	cbnz	r0, c6f2 <pm_system_suspend+0x3e>
    c6d6:	2394      	movs	r3, #148	; 0x94
    c6d8:	4a3f      	ldr	r2, [pc, #252]	; (c7d8 <pm_system_suspend+0x124>)
    c6da:	4940      	ldr	r1, [pc, #256]	; (c7dc <pm_system_suspend+0x128>)
    c6dc:	4840      	ldr	r0, [pc, #256]	; (c7e0 <pm_system_suspend+0x12c>)
    c6de:	f00f fb2b 	bl	1bd38 <assert_print>
    c6e2:	493c      	ldr	r1, [pc, #240]	; (c7d4 <pm_system_suspend+0x120>)
    c6e4:	483f      	ldr	r0, [pc, #252]	; (c7e4 <pm_system_suspend+0x130>)
    c6e6:	f00f fb27 	bl	1bd38 <assert_print>
    c6ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6ec:	483a      	ldr	r0, [pc, #232]	; (c7d8 <pm_system_suspend+0x124>)
    c6ee:	f00f fb1c 	bl	1bd2a <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c6f2:	240c      	movs	r4, #12
    c6f4:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    c6f6:	4837      	ldr	r0, [pc, #220]	; (c7d4 <pm_system_suspend+0x120>)
    c6f8:	f00b fd78 	bl	181ec <z_spin_lock_set_owner>
    c6fc:	4b3a      	ldr	r3, [pc, #232]	; (c7e8 <pm_system_suspend+0x134>)
    c6fe:	4e3b      	ldr	r6, [pc, #236]	; (c7ec <pm_system_suspend+0x138>)
    c700:	5d19      	ldrb	r1, [r3, r4]
    c702:	191a      	adds	r2, r3, r4
    c704:	b1b9      	cbz	r1, c736 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c706:	ca07      	ldmia	r2, {r0, r1, r2}
    c708:	eb06 0c04 	add.w	ip, r6, r4
    c70c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c710:	2200      	movs	r2, #0
    c712:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c714:	482f      	ldr	r0, [pc, #188]	; (c7d4 <pm_system_suspend+0x120>)
    c716:	f00b fd5b 	bl	181d0 <z_spin_unlock_valid>
    c71a:	4604      	mov	r4, r0
    c71c:	b9b0      	cbnz	r0, c74c <pm_system_suspend+0x98>
    c71e:	23c2      	movs	r3, #194	; 0xc2
    c720:	4a2d      	ldr	r2, [pc, #180]	; (c7d8 <pm_system_suspend+0x124>)
    c722:	4933      	ldr	r1, [pc, #204]	; (c7f0 <pm_system_suspend+0x13c>)
    c724:	482e      	ldr	r0, [pc, #184]	; (c7e0 <pm_system_suspend+0x12c>)
    c726:	f00f fb07 	bl	1bd38 <assert_print>
    c72a:	492a      	ldr	r1, [pc, #168]	; (c7d4 <pm_system_suspend+0x120>)
    c72c:	4831      	ldr	r0, [pc, #196]	; (c7f4 <pm_system_suspend+0x140>)
    c72e:	f00f fb03 	bl	1bd38 <assert_print>
    c732:	21c2      	movs	r1, #194	; 0xc2
    c734:	e7da      	b.n	c6ec <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    c736:	4639      	mov	r1, r7
    c738:	4628      	mov	r0, r5
    c73a:	f000 f865 	bl	c808 <pm_policy_next_state>
		if (info != NULL) {
    c73e:	2800      	cmp	r0, #0
    c740:	d0e8      	beq.n	c714 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    c742:	c807      	ldmia	r0, {r0, r1, r2}
    c744:	4434      	add	r4, r6
    c746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c74a:	e7e3      	b.n	c714 <pm_system_suspend+0x60>
	__asm__ volatile(
    c74c:	f388 8811 	msr	BASEPRI, r8
    c750:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c754:	230c      	movs	r3, #12
    c756:	436b      	muls	r3, r5
    c758:	18f2      	adds	r2, r6, r3
    c75a:	5cf3      	ldrb	r3, [r6, r3]
    c75c:	b3ab      	cbz	r3, c7ca <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c75e:	1c7b      	adds	r3, r7, #1
    c760:	d00f      	beq.n	c782 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c762:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    c766:	2100      	movs	r1, #0
    c768:	f8d2 e008 	ldr.w	lr, [r2, #8]
    c76c:	4822      	ldr	r0, [pc, #136]	; (c7f8 <pm_system_suspend+0x144>)
    c76e:	2300      	movs	r3, #0
    c770:	fbee 010c 	umlal	r0, r1, lr, ip
    c774:	4a21      	ldr	r2, [pc, #132]	; (c7fc <pm_system_suspend+0x148>)
    c776:	f7fc f8dd 	bl	8934 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    c77a:	2101      	movs	r1, #1
    c77c:	1a38      	subs	r0, r7, r0
    c77e:	f00e fa55 	bl	1ac2c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c782:	f00d f8d3 	bl	1992c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c786:	2001      	movs	r0, #1
    c788:	f7ff fefc 	bl	c584 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c78c:	4b1c      	ldr	r3, [pc, #112]	; (c800 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c78e:	096a      	lsrs	r2, r5, #5
    c790:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    c794:	2201      	movs	r2, #1
    c796:	f005 011f 	and.w	r1, r5, #31
    c79a:	408a      	lsls	r2, r1
    c79c:	e8d3 0fef 	ldaex	r0, [r3]
    c7a0:	4310      	orrs	r0, r2
    c7a2:	e8c3 0fe1 	stlex	r1, r0, [r3]
    c7a6:	2900      	cmp	r1, #0
    c7a8:	d1f8      	bne.n	c79c <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    c7aa:	4b16      	ldr	r3, [pc, #88]	; (c804 <pm_system_suspend+0x150>)
    c7ac:	b133      	cbz	r3, c7bc <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    c7ae:	230c      	movs	r3, #12
    c7b0:	436b      	muls	r3, r5
    c7b2:	18f2      	adds	r2, r6, r3
    c7b4:	7851      	ldrb	r1, [r2, #1]
    c7b6:	5cf0      	ldrb	r0, [r6, r3]
    c7b8:	f00f fbae 	bl	1bf18 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c7bc:	f7ff ff42 	bl	c644 <pm_system_resume>
	k_sched_unlock();
    c7c0:	f00d f920 	bl	19a04 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    c7c4:	4620      	mov	r0, r4
    c7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c7ca:	461c      	mov	r4, r3
    c7cc:	e7fa      	b.n	c7c4 <pm_system_suspend+0x110>
    c7ce:	bf00      	nop
    c7d0:	20009b48 	.word	0x20009b48
    c7d4:	200096d8 	.word	0x200096d8
    c7d8:	000209d8 	.word	0x000209d8
    c7dc:	00020a31 	.word	0x00020a31
    c7e0:	000205a4 	.word	0x000205a4
    c7e4:	00020a46 	.word	0x00020a46
    c7e8:	200096dc 	.word	0x200096dc
    c7ec:	200096e8 	.word	0x200096e8
    c7f0:	00020a05 	.word	0x00020a05
    c7f4:	00020a1c 	.word	0x00020a1c
    c7f8:	000f423f 	.word	0x000f423f
    c7fc:	000f4240 	.word	0x000f4240
    c800:	200096fc 	.word	0x200096fc
    c804:	0001bf19 	.word	0x0001bf19

0000c808 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c80c:	b085      	sub	sp, #20
    c80e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c810:	a903      	add	r1, sp, #12
    c812:	f000 f843 	bl	c89c <pm_state_cpu_get_all>
    c816:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c81a:	4604      	mov	r4, r0
    c81c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c820:	4b1b      	ldr	r3, [pc, #108]	; (c890 <pm_policy_next_state+0x88>)
    c822:	9d03      	ldr	r5, [sp, #12]
    c824:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c828:	1e43      	subs	r3, r0, #1
    c82a:	b21b      	sxth	r3, r3
    c82c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c830:	f8df 8060 	ldr.w	r8, [pc, #96]	; c894 <pm_policy_next_state+0x8c>
    c834:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c838:	b924      	cbnz	r4, c844 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    c83a:	46a1      	mov	r9, r4
}
    c83c:	4648      	mov	r0, r9
    c83e:	b005      	add	sp, #20
    c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c844:	46c4      	mov	ip, r8
    c846:	4659      	mov	r1, fp
    c848:	6868      	ldr	r0, [r5, #4]
    c84a:	2300      	movs	r3, #0
    c84c:	fbe0 c107 	umlal	ip, r1, r0, r7
    c850:	4a11      	ldr	r2, [pc, #68]	; (c898 <pm_policy_next_state+0x90>)
    c852:	4660      	mov	r0, ip
    c854:	f7fc f86e 	bl	8934 <__aeabi_uldivmod>
    c858:	46c4      	mov	ip, r8
    c85a:	4659      	mov	r1, fp
    c85c:	9001      	str	r0, [sp, #4]
    c85e:	68a8      	ldr	r0, [r5, #8]
    c860:	2300      	movs	r3, #0
    c862:	fbe0 c107 	umlal	ip, r1, r0, r7
    c866:	4a0c      	ldr	r2, [pc, #48]	; (c898 <pm_policy_next_state+0x90>)
    c868:	4660      	mov	r0, ip
    c86a:	f7fc f863 	bl	8934 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c86e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    c872:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c874:	d001      	beq.n	c87a <pm_policy_next_state+0x72>
    c876:	4582      	cmp	sl, r0
    c878:	d905      	bls.n	c886 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    c87a:	1c73      	adds	r3, r6, #1
    c87c:	d0de      	beq.n	c83c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    c87e:	9b01      	ldr	r3, [sp, #4]
    c880:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    c882:	42b0      	cmp	r0, r6
    c884:	d9da      	bls.n	c83c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c886:	3c01      	subs	r4, #1
    c888:	b2a4      	uxth	r4, r4
    c88a:	3d0c      	subs	r5, #12
    c88c:	e7d4      	b.n	c838 <pm_policy_next_state+0x30>
    c88e:	bf00      	nop
    c890:	200081b4 	.word	0x200081b4
    c894:	000f423f 	.word	0x000f423f
    c898:	000f4240 	.word	0x000f4240

0000c89c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c89c:	b908      	cbnz	r0, c8a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c89e:	4b02      	ldr	r3, [pc, #8]	; (c8a8 <pm_state_cpu_get_all+0xc>)
    c8a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c8a2:	2000      	movs	r0, #0
    c8a4:	4770      	bx	lr
    c8a6:	bf00      	nop
    c8a8:	0001fb84 	.word	0x0001fb84

0000c8ac <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    c8ac:	4904      	ldr	r1, [pc, #16]	; (c8c0 <sub_bytes+0x14>)
    c8ae:	1e43      	subs	r3, r0, #1
    c8b0:	300f      	adds	r0, #15
    c8b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c8b6:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    c8b8:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    c8ba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    c8bc:	d1f9      	bne.n	c8b2 <sub_bytes+0x6>
	}
}
    c8be:	4770      	bx	lr
    c8c0:	00020ff0 	.word	0x00020ff0

0000c8c4 <tc_aes128_set_encrypt_key>:
{
    c8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8c6:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    c8c8:	4e26      	ldr	r6, [pc, #152]	; (c964 <tc_aes128_set_encrypt_key+0xa0>)
{
    c8ca:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    c8cc:	ad01      	add	r5, sp, #4
{
    c8ce:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    c8d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c8d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c8d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c8d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c8d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    c8dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    c8e0:	4638      	mov	r0, r7
    c8e2:	2f00      	cmp	r7, #0
    c8e4:	d039      	beq.n	c95a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    c8e6:	2c00      	cmp	r4, #0
    c8e8:	d039      	beq.n	c95e <tc_aes128_set_encrypt_key+0x9a>
    c8ea:	1f38      	subs	r0, r7, #4
    c8ec:	4602      	mov	r2, r0
    c8ee:	4621      	mov	r1, r4
    c8f0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c8f2:	784b      	ldrb	r3, [r1, #1]
    c8f4:	780d      	ldrb	r5, [r1, #0]
    c8f6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c8f8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    c8fc:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    c8fe:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c900:	432b      	orrs	r3, r5
    c902:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    c906:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c908:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c90c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    c910:	d1ef      	bne.n	c8f2 <tc_aes128_set_encrypt_key+0x2e>
    c912:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c914:	4c14      	ldr	r4, [pc, #80]	; (c968 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    c916:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    c918:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    c91a:	d116      	bne.n	c94a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c91c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    c920:	5ca5      	ldrb	r5, [r4, r2]
    c922:	0e1a      	lsrs	r2, r3, #24
    c924:	5ca2      	ldrb	r2, [r4, r2]
    c926:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    c92a:	f3c3 2507 	ubfx	r5, r3, #8, #8
    c92e:	5d65      	ldrb	r5, [r4, r5]
    c930:	b2db      	uxtb	r3, r3
    c932:	5ce3      	ldrb	r3, [r4, r3]
    c934:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    c938:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    c93c:	f021 0303 	bic.w	r3, r1, #3
    c940:	3330      	adds	r3, #48	; 0x30
    c942:	446b      	add	r3, sp
    c944:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    c948:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    c94a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    c94e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    c950:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    c952:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    c954:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    c956:	d1de      	bne.n	c916 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    c958:	2001      	movs	r0, #1
}
    c95a:	b00d      	add	sp, #52	; 0x34
    c95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    c95e:	4620      	mov	r0, r4
    c960:	e7fb      	b.n	c95a <tc_aes128_set_encrypt_key+0x96>
    c962:	bf00      	nop
    c964:	0001f9cc 	.word	0x0001f9cc
    c968:	00020ff0 	.word	0x00020ff0

0000c96c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c970:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c972:	6803      	ldr	r3, [r0, #0]
{
    c974:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c976:	9302      	str	r3, [sp, #8]
    c978:	6843      	ldr	r3, [r0, #4]
    c97a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; cb38 <compress+0x1cc>
    c97e:	9303      	str	r3, [sp, #12]
    c980:	6883      	ldr	r3, [r0, #8]
    c982:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    c986:	9304      	str	r3, [sp, #16]
    c988:	68c3      	ldr	r3, [r0, #12]
    c98a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c98c:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c98e:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c992:	9306      	str	r3, [sp, #24]
    c994:	6943      	ldr	r3, [r0, #20]
    c996:	9307      	str	r3, [sp, #28]
    c998:	6983      	ldr	r3, [r0, #24]
    c99a:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    c99e:	9308      	str	r3, [sp, #32]
    c9a0:	69c3      	ldr	r3, [r0, #28]
    c9a2:	4698      	mov	r8, r3
    c9a4:	9309      	str	r3, [sp, #36]	; 0x24
    c9a6:	9b08      	ldr	r3, [sp, #32]
    c9a8:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    c9aa:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    c9ac:	ab0c      	add	r3, sp, #48	; 0x30
    c9ae:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c9b0:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    c9b4:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    c9b6:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c9ba:	44a9      	add	r9, r5
    c9bc:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    c9c0:	9d00      	ldr	r5, [sp, #0]
    c9c2:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    c9c6:	444b      	add	r3, r9
    c9c8:	ea25 0502 	bic.w	r5, r5, r2
    c9cc:	ea02 090c 	and.w	r9, r2, ip
    c9d0:	ea85 0509 	eor.w	r5, r5, r9
    c9d4:	442b      	add	r3, r5
    c9d6:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    c9d8:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    c9dc:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    c9e0:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    c9e4:	4025      	ands	r5, r4
    c9e6:	ea06 090b 	and.w	r9, r6, fp
    c9ea:	ea85 0509 	eor.w	r5, r5, r9
    c9ee:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    c9f2:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    c9f4:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    c9f6:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    c9f8:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    c9fc:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    c9fe:	46de      	mov	lr, fp
    ca00:	f8dd 8000 	ldr.w	r8, [sp]
    ca04:	f040 8088 	bne.w	cb18 <compress+0x1ac>
    ca08:	f04f 0a10 	mov.w	sl, #16
    ca0c:	494b      	ldr	r1, [pc, #300]	; (cb3c <compress+0x1d0>)
    ca0e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    ca10:	4651      	mov	r1, sl
    ca12:	f10a 0a01 	add.w	sl, sl, #1
    ca16:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    ca1a:	f00a 070f 	and.w	r7, sl, #15
    ca1e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    ca22:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca26:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    ca2a:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    ca2e:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    ca30:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    ca34:	f101 070e 	add.w	r7, r1, #14
    ca38:	f007 070f 	and.w	r7, r7, #15
    ca3c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    ca40:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca44:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    ca46:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    ca4a:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    ca4e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca52:	f001 010f 	and.w	r1, r1, #15
    ca56:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    ca5a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    ca5e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    ca62:	f859 ec40 	ldr.w	lr, [r9, #-64]
    ca66:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    ca6a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca6e:	4471      	add	r1, lr
		s0 = sigma0(s0);
    ca70:	f8dd e004 	ldr.w	lr, [sp, #4]
    ca74:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    ca78:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca7c:	4441      	add	r1, r8
		s1 = sigma1(s1);
    ca7e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca82:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca84:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    ca88:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca8c:	ea2c 0705 	bic.w	r7, ip, r5
    ca90:	ea87 0708 	eor.w	r7, r7, r8
    ca94:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    ca98:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ca9c:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    caa0:	4477      	add	r7, lr
    caa2:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    caa6:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    caaa:	4477      	add	r7, lr
    caac:	440f      	add	r7, r1
    caae:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    cab0:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cab4:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    cab6:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    caba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    cabe:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    cac2:	ea07 0703 	and.w	r7, r7, r3
    cac6:	ea04 0806 	and.w	r8, r4, r6
    caca:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    cace:	ea87 0708 	eor.w	r7, r7, r8
    cad2:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    cad4:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    cad6:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    cada:	f8cd c000 	str.w	ip, [sp]
    cade:	46b3      	mov	fp, r6
    cae0:	d122      	bne.n	cb28 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    cae2:	9902      	ldr	r1, [sp, #8]
    cae4:	4439      	add	r1, r7
    cae6:	6001      	str	r1, [r0, #0]
    cae8:	9903      	ldr	r1, [sp, #12]
    caea:	4419      	add	r1, r3
    caec:	9b04      	ldr	r3, [sp, #16]
    caee:	6041      	str	r1, [r0, #4]
    caf0:	4423      	add	r3, r4
    caf2:	6083      	str	r3, [r0, #8]
    caf4:	9b05      	ldr	r3, [sp, #20]
    caf6:	4433      	add	r3, r6
    caf8:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    cafa:	9b06      	ldr	r3, [sp, #24]
    cafc:	4473      	add	r3, lr
    cafe:	6103      	str	r3, [r0, #16]
    cb00:	9b07      	ldr	r3, [sp, #28]
    cb02:	442b      	add	r3, r5
    cb04:	6143      	str	r3, [r0, #20]
    cb06:	9b08      	ldr	r3, [sp, #32]
    cb08:	4413      	add	r3, r2
    cb0a:	6183      	str	r3, [r0, #24]
    cb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb0e:	4463      	add	r3, ip
    cb10:	61c3      	str	r3, [r0, #28]
}
    cb12:	b01d      	add	sp, #116	; 0x74
    cb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb18:	46b3      	mov	fp, r6
    cb1a:	f8cd c000 	str.w	ip, [sp]
    cb1e:	4626      	mov	r6, r4
    cb20:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    cb22:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cb24:	462a      	mov	r2, r5
    cb26:	e740      	b.n	c9aa <compress+0x3e>
    cb28:	4694      	mov	ip, r2
    cb2a:	4626      	mov	r6, r4
    cb2c:	462a      	mov	r2, r5
    cb2e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cb30:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    cb32:	463b      	mov	r3, r7
    cb34:	e76c      	b.n	ca10 <compress+0xa4>
    cb36:	bf00      	nop
    cb38:	0001fb84 	.word	0x0001fb84
    cb3c:	0001fbc0 	.word	0x0001fbc0

0000cb40 <tc_sha256_init>:
{
    cb40:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    cb42:	4604      	mov	r4, r0
    cb44:	b1c8      	cbz	r0, cb7a <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    cb46:	2270      	movs	r2, #112	; 0x70
    cb48:	2100      	movs	r1, #0
    cb4a:	f00f fc28 	bl	1c39e <_set>
	s->iv[1] = 0xbb67ae85;
    cb4e:	4b0b      	ldr	r3, [pc, #44]	; (cb7c <tc_sha256_init+0x3c>)
    cb50:	4a0b      	ldr	r2, [pc, #44]	; (cb80 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    cb52:	490c      	ldr	r1, [pc, #48]	; (cb84 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    cb54:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    cb58:	4b0b      	ldr	r3, [pc, #44]	; (cb88 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    cb5a:	480c      	ldr	r0, [pc, #48]	; (cb8c <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    cb5c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    cb60:	4b0b      	ldr	r3, [pc, #44]	; (cb90 <tc_sha256_init+0x50>)
    cb62:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    cb66:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    cb68:	4b0a      	ldr	r3, [pc, #40]	; (cb94 <tc_sha256_init+0x54>)
    cb6a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    cb6c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    cb70:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    cb74:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    cb78:	61e3      	str	r3, [r4, #28]
}
    cb7a:	bd10      	pop	{r4, pc}
    cb7c:	bb67ae85 	.word	0xbb67ae85
    cb80:	6a09e667 	.word	0x6a09e667
    cb84:	3c6ef372 	.word	0x3c6ef372
    cb88:	a54ff53a 	.word	0xa54ff53a
    cb8c:	510e527f 	.word	0x510e527f
    cb90:	9b05688c 	.word	0x9b05688c
    cb94:	1f83d9ab 	.word	0x1f83d9ab

0000cb98 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    cb98:	4901      	ldr	r1, [pc, #4]	; (cba0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    cb9a:	2210      	movs	r2, #16
	str	r2, [r1]
    cb9c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    cb9e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    cba0:	e000ed10 	.word	0xe000ed10

0000cba4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    cba4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    cba6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    cba8:	f380 8811 	msr	BASEPRI, r0
	isb
    cbac:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    cbb0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    cbb4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    cbb6:	b662      	cpsie	i
	isb
    cbb8:	f3bf 8f6f 	isb	sy

	bx	lr
    cbbc:	4770      	bx	lr
    cbbe:	bf00      	nop

0000cbc0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    cbc0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    cbc2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    cbc4:	f381 8811 	msr	BASEPRI, r1

	wfe
    cbc8:	bf20      	wfe

	msr	BASEPRI, r0
    cbca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    cbce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    cbd0:	4770      	bx	lr
    cbd2:	bf00      	nop

0000cbd4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    cbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbd8:	4681      	mov	r9, r0

	if (esf != NULL) {
    cbda:	460c      	mov	r4, r1
{
    cbdc:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    cbde:	2900      	cmp	r1, #0
    cbe0:	d04c      	beq.n	cc7c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    cbe2:	e9d1 1200 	ldrd	r1, r2, [r1]
    cbe6:	466e      	mov	r6, sp
    cbe8:	b08a      	sub	sp, #40	; 0x28
    cbea:	68a3      	ldr	r3, [r4, #8]
    cbec:	466d      	mov	r5, sp
    cbee:	f04f 0a05 	mov.w	sl, #5
    cbf2:	46a8      	mov	r8, r5
    cbf4:	4825      	ldr	r0, [pc, #148]	; (cc8c <z_arm_fatal_error+0xb8>)
    cbf6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    cbfa:	e9c5 0105 	strd	r0, r1, [r5, #20]
    cbfe:	f848 af10 	str.w	sl, [r8, #16]!
    cc02:	2300      	movs	r3, #0
    cc04:	4642      	mov	r2, r8
    cc06:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cc0a:	4821      	ldr	r0, [pc, #132]	; (cc90 <z_arm_fatal_error+0xbc>)
    cc0c:	f7fe fdfc 	bl	b808 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    cc10:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    cc14:	46b5      	mov	sp, r6
    cc16:	6963      	ldr	r3, [r4, #20]
    cc18:	46ad      	mov	sp, r5
    cc1a:	481e      	ldr	r0, [pc, #120]	; (cc94 <z_arm_fatal_error+0xc0>)
    cc1c:	e9c5 2307 	strd	r2, r3, [r5, #28]
    cc20:	e9c5 0105 	strd	r0, r1, [r5, #20]
    cc24:	f8c5 a010 	str.w	sl, [r5, #16]
    cc28:	2300      	movs	r3, #0
    cc2a:	4642      	mov	r2, r8
    cc2c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cc30:	4817      	ldr	r0, [pc, #92]	; (cc90 <z_arm_fatal_error+0xbc>)
    cc32:	f7fe fde9 	bl	b808 <z_impl_z_log_msg_static_create>
    cc36:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    cc38:	b088      	sub	sp, #32
    cc3a:	69e3      	ldr	r3, [r4, #28]
    cc3c:	466d      	mov	r5, sp
    cc3e:	f04f 0a03 	mov.w	sl, #3
    cc42:	46a8      	mov	r8, r5
    cc44:	4a14      	ldr	r2, [pc, #80]	; (cc98 <z_arm_fatal_error+0xc4>)
    cc46:	e9c5 2305 	strd	r2, r3, [r5, #20]
    cc4a:	f848 af10 	str.w	sl, [r8, #16]!
    cc4e:	2300      	movs	r3, #0
    cc50:	4642      	mov	r2, r8
    cc52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc56:	480e      	ldr	r0, [pc, #56]	; (cc90 <z_arm_fatal_error+0xbc>)
    cc58:	f7fe fdd6 	bl	b808 <z_impl_z_log_msg_static_create>
    cc5c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    cc5e:	69a3      	ldr	r3, [r4, #24]
    cc60:	46ad      	mov	sp, r5
    cc62:	4a0e      	ldr	r2, [pc, #56]	; (cc9c <z_arm_fatal_error+0xc8>)
    cc64:	f8c5 a010 	str.w	sl, [r5, #16]
    cc68:	e9c5 2305 	strd	r2, r3, [r5, #20]
    cc6c:	2300      	movs	r3, #0
    cc6e:	4642      	mov	r2, r8
    cc70:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc74:	4806      	ldr	r0, [pc, #24]	; (cc90 <z_arm_fatal_error+0xbc>)
    cc76:	f7fe fdc7 	bl	b808 <z_impl_z_log_msg_static_create>
    cc7a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    cc7c:	4621      	mov	r1, r4
    cc7e:	4648      	mov	r0, r9
    cc80:	f00a fde8 	bl	17854 <z_fatal_error>
}
    cc84:	46bd      	mov	sp, r7
    cc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc8a:	bf00      	nop
    cc8c:	000210f0 	.word	0x000210f0
    cc90:	0001f960 	.word	0x0001f960
    cc94:	0002111f 	.word	0x0002111f
    cc98:	0002114e 	.word	0x0002114e
    cc9c:	0002115d 	.word	0x0002115d

0000cca0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cca0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    cca2:	2800      	cmp	r0, #0
    cca4:	db07      	blt.n	ccb6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cca6:	2301      	movs	r3, #1
    cca8:	0941      	lsrs	r1, r0, #5
    ccaa:	4a03      	ldr	r2, [pc, #12]	; (ccb8 <arch_irq_enable+0x18>)
    ccac:	f000 001f 	and.w	r0, r0, #31
    ccb0:	4083      	lsls	r3, r0
    ccb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    ccb6:	4770      	bx	lr
    ccb8:	e000e100 	.word	0xe000e100

0000ccbc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    ccbc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    ccbe:	2800      	cmp	r0, #0
    ccc0:	db0c      	blt.n	ccdc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ccc2:	2201      	movs	r2, #1
    ccc4:	4906      	ldr	r1, [pc, #24]	; (cce0 <arch_irq_disable+0x24>)
    ccc6:	0943      	lsrs	r3, r0, #5
    ccc8:	f000 001f 	and.w	r0, r0, #31
    cccc:	4082      	lsls	r2, r0
    ccce:	3320      	adds	r3, #32
    ccd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ccd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ccd8:	f3bf 8f6f 	isb	sy
}
    ccdc:	4770      	bx	lr
    ccde:	bf00      	nop
    cce0:	e000e100 	.word	0xe000e100

0000cce4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cce4:	4b05      	ldr	r3, [pc, #20]	; (ccfc <arch_irq_is_enabled+0x18>)
    cce6:	0942      	lsrs	r2, r0, #5
    cce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ccec:	2301      	movs	r3, #1
    ccee:	f000 001f 	and.w	r0, r0, #31
    ccf2:	fa03 f000 	lsl.w	r0, r3, r0
}
    ccf6:	4010      	ands	r0, r2
    ccf8:	4770      	bx	lr
    ccfa:	bf00      	nop
    ccfc:	e000e100 	.word	0xe000e100

0000cd00 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    cd00:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    cd02:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cd04:	2b07      	cmp	r3, #7
{
    cd06:	4604      	mov	r4, r0
    cd08:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cd0a:	d90f      	bls.n	cd2c <z_arm_irq_priority_set+0x2c>
    cd0c:	235b      	movs	r3, #91	; 0x5b
    cd0e:	4a10      	ldr	r2, [pc, #64]	; (cd50 <z_arm_irq_priority_set+0x50>)
    cd10:	4910      	ldr	r1, [pc, #64]	; (cd54 <z_arm_irq_priority_set+0x54>)
    cd12:	4811      	ldr	r0, [pc, #68]	; (cd58 <z_arm_irq_priority_set+0x58>)
    cd14:	f00f f810 	bl	1bd38 <assert_print>
    cd18:	4629      	mov	r1, r5
    cd1a:	4810      	ldr	r0, [pc, #64]	; (cd5c <z_arm_irq_priority_set+0x5c>)
    cd1c:	2307      	movs	r3, #7
    cd1e:	4622      	mov	r2, r4
    cd20:	f00f f80a 	bl	1bd38 <assert_print>
    cd24:	215b      	movs	r1, #91	; 0x5b
    cd26:	480a      	ldr	r0, [pc, #40]	; (cd50 <z_arm_irq_priority_set+0x50>)
    cd28:	f00e ffff 	bl	1bd2a <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    cd2c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    cd2e:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd30:	bfac      	ite	ge
    cd32:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd36:	4a0a      	ldrlt	r2, [pc, #40]	; (cd60 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd38:	ea4f 1343 	mov.w	r3, r3, lsl #5
    cd3c:	b2db      	uxtb	r3, r3
    cd3e:	bfab      	itete	ge
    cd40:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd44:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd48:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd4c:	5413      	strblt	r3, [r2, r0]
}
    cd4e:	bd38      	pop	{r3, r4, r5, pc}
    cd50:	0002118b 	.word	0x0002118b
    cd54:	000211c1 	.word	0x000211c1
    cd58:	000205a4 	.word	0x000205a4
    cd5c:	000211dc 	.word	0x000211dc
    cd60:	e000ed14 	.word	0xe000ed14

0000cd64 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cd64:	bf30      	wfi
    b z_SysNmiOnReset
    cd66:	f7ff bffd 	b.w	cd64 <z_SysNmiOnReset>
    cd6a:	bf00      	nop

0000cd6c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cd6c:	4a0b      	ldr	r2, [pc, #44]	; (cd9c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    cd6e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cd70:	4b0b      	ldr	r3, [pc, #44]	; (cda0 <z_arm_prep_c+0x34>)
    cd72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    cd76:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    cd78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cd7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cd80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cd84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    cd88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    cd8c:	f00a fe34 	bl	179f8 <z_bss_zero>
	z_data_copy();
    cd90:	f00d fd8c 	bl	1a8ac <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    cd94:	f000 fc00 	bl	d598 <z_arm_interrupt_init>
	z_cstart();
    cd98:	f00a fe6e 	bl	17a78 <z_cstart>
    cd9c:	00008000 	.word	0x00008000
    cda0:	e000ed00 	.word	0xe000ed00

0000cda4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cda4:	4a09      	ldr	r2, [pc, #36]	; (cdcc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cda6:	490a      	ldr	r1, [pc, #40]	; (cdd0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    cda8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    cdaa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    cdac:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    cdae:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cdb0:	4908      	ldr	r1, [pc, #32]	; (cdd4 <arch_swap+0x30>)
    cdb2:	684b      	ldr	r3, [r1, #4]
    cdb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cdb8:	604b      	str	r3, [r1, #4]
    cdba:	2300      	movs	r3, #0
    cdbc:	f383 8811 	msr	BASEPRI, r3
    cdc0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cdc4:	6893      	ldr	r3, [r2, #8]
}
    cdc6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    cdc8:	4770      	bx	lr
    cdca:	bf00      	nop
    cdcc:	20009b48 	.word	0x20009b48
    cdd0:	00020190 	.word	0x00020190
    cdd4:	e000ed00 	.word	0xe000ed00

0000cdd8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    cdd8:	4915      	ldr	r1, [pc, #84]	; (ce30 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    cdda:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    cddc:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cde0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    cde4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cde6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    cdea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cdee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    cdf0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cdf4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cdf8:	4f0e      	ldr	r7, [pc, #56]	; (ce34 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cdfa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cdfe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    ce00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ce02:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    ce04:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ce08:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    ce0a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ce0c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ce0e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ce12:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    ce16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ce1a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    ce1e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    ce22:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    ce24:	f00f ff08 	bl	1cc38 <configure_builtin_stack_guard>
    pop {r2, lr}
    ce28:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    ce2c:	4770      	bx	lr
    ce2e:	0000      	.short	0x0000
    ldr r1, =_kernel
    ce30:	20009b48 	.word	0x20009b48
    ldr v4, =_SCS_ICSR
    ce34:	e000ed04 	.word	0xe000ed04

0000ce38 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    ce38:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ce3c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ce3e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ce42:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ce46:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ce48:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ce4c:	2902      	cmp	r1, #2
    beq _oops
    ce4e:	d0ff      	beq.n	ce50 <_oops>

0000ce50 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ce50:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    ce52:	f00f fee2 	bl	1cc1a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    ce56:	bd01      	pop	{r0, pc}

0000ce58 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    ce58:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ce5c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    ce5e:	490d      	ldr	r1, [pc, #52]	; (ce94 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    ce60:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ce64:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    ce66:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    ce6a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ce6e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    ce70:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    ce74:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ce78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ce7c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    ce80:	2300      	movs	r3, #0
    ce82:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    ce84:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ce88:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    ce8a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    ce8c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ce90:	4770      	bx	lr
    ce92:	bf00      	nop
    ce94:	0001b95d 	.word	0x0001b95d

0000ce98 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ce98:	4b08      	ldr	r3, [pc, #32]	; (cebc <arch_switch_to_main_thread+0x24>)
    ce9a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ce9c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    ce9e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    cea2:	4610      	mov	r0, r2
    cea4:	f381 8809 	msr	PSP, r1
    cea8:	2100      	movs	r1, #0
    ceaa:	b663      	cpsie	if
    ceac:	f381 8811 	msr	BASEPRI, r1
    ceb0:	f3bf 8f6f 	isb	sy
    ceb4:	2200      	movs	r2, #0
    ceb6:	2300      	movs	r3, #0
    ceb8:	f00e fd50 	bl	1b95c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cebc:	20009b48 	.word	0x20009b48

0000cec0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    cec0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    cec2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cec4:	4a0b      	ldr	r2, [pc, #44]	; (cef4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cec6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    cec8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ceca:	bf1e      	ittt	ne
	movne	r1, #0
    cecc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cece:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    ced0:	f012 f8c9 	blne	1f066 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ced4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ced6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ceda:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cede:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    cee2:	4905      	ldr	r1, [pc, #20]	; (cef8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cee4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cee6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    cee8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ceea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ceee:	4903      	ldr	r1, [pc, #12]	; (cefc <_isr_wrapper+0x3c>)
	bx r1
    cef0:	4708      	bx	r1
    cef2:	0000      	.short	0x0000
	ldr r2, =_kernel
    cef4:	20009b48 	.word	0x20009b48
	ldr r1, =_sw_isr_table
    cef8:	0001f5d0 	.word	0x0001f5d0
	ldr r1, =z_arm_int_exit
    cefc:	0000cf01 	.word	0x0000cf01

0000cf00 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    cf00:	4b04      	ldr	r3, [pc, #16]	; (cf14 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    cf02:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    cf04:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    cf06:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    cf08:	d003      	beq.n	cf12 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    cf0a:	4903      	ldr	r1, [pc, #12]	; (cf18 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    cf0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    cf10:	600a      	str	r2, [r1, #0]

0000cf12 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    cf12:	4770      	bx	lr
	ldr r3, =_kernel
    cf14:	20009b48 	.word	0x20009b48
	ldr r1, =_SCS_ICSR
    cf18:	e000ed04 	.word	0xe000ed04

0000cf1c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf20:	b086      	sub	sp, #24
    cf22:	4606      	mov	r6, r0
    cf24:	460d      	mov	r5, r1
    cf26:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    cf28:	2402      	movs	r4, #2
    cf2a:	4b4b      	ldr	r3, [pc, #300]	; (d058 <mem_manage_fault.constprop.0+0x13c>)
    cf2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf30:	617b      	str	r3, [r7, #20]
    cf32:	484a      	ldr	r0, [pc, #296]	; (d05c <mem_manage_fault.constprop.0+0x140>)
    cf34:	613c      	str	r4, [r7, #16]
    cf36:	f107 0210 	add.w	r2, r7, #16
    cf3a:	f00f fe81 	bl	1cc40 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    cf3e:	4b48      	ldr	r3, [pc, #288]	; (d060 <mem_manage_fault.constprop.0+0x144>)
    cf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf42:	06db      	lsls	r3, r3, #27
    cf44:	d509      	bpl.n	cf5a <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    cf46:	4b47      	ldr	r3, [pc, #284]	; (d064 <mem_manage_fault.constprop.0+0x148>)
    cf48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf4c:	e9c7 4304 	strd	r4, r3, [r7, #16]
    cf50:	4842      	ldr	r0, [pc, #264]	; (d05c <mem_manage_fault.constprop.0+0x140>)
    cf52:	f107 0210 	add.w	r2, r7, #16
    cf56:	f00f fe73 	bl	1cc40 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    cf5a:	4b41      	ldr	r3, [pc, #260]	; (d060 <mem_manage_fault.constprop.0+0x144>)
    cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf5e:	0718      	lsls	r0, r3, #28
    cf60:	d50a      	bpl.n	cf78 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    cf62:	4b41      	ldr	r3, [pc, #260]	; (d068 <mem_manage_fault.constprop.0+0x14c>)
    cf64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf68:	617b      	str	r3, [r7, #20]
    cf6a:	2302      	movs	r3, #2
    cf6c:	483b      	ldr	r0, [pc, #236]	; (d05c <mem_manage_fault.constprop.0+0x140>)
    cf6e:	613b      	str	r3, [r7, #16]
    cf70:	f107 0210 	add.w	r2, r7, #16
    cf74:	f00f fe64 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    cf78:	4c39      	ldr	r4, [pc, #228]	; (d060 <mem_manage_fault.constprop.0+0x144>)
    cf7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf7c:	0799      	lsls	r1, r3, #30
    cf7e:	d522      	bpl.n	cfc6 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    cf80:	46e8      	mov	r8, sp
    cf82:	4b3a      	ldr	r3, [pc, #232]	; (d06c <mem_manage_fault.constprop.0+0x150>)
    cf84:	f107 0210 	add.w	r2, r7, #16
    cf88:	617b      	str	r3, [r7, #20]
    cf8a:	2302      	movs	r3, #2
    cf8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf90:	613b      	str	r3, [r7, #16]
    cf92:	4832      	ldr	r0, [pc, #200]	; (d05c <mem_manage_fault.constprop.0+0x140>)
    cf94:	f00f fe54 	bl	1cc40 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    cf98:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    cf9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cf9c:	0612      	lsls	r2, r2, #24
    cf9e:	d512      	bpl.n	cfc6 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    cfa0:	b088      	sub	sp, #32
    cfa2:	466a      	mov	r2, sp
    cfa4:	4932      	ldr	r1, [pc, #200]	; (d070 <mem_manage_fault.constprop.0+0x154>)
    cfa6:	482d      	ldr	r0, [pc, #180]	; (d05c <mem_manage_fault.constprop.0+0x140>)
    cfa8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cfac:	2303      	movs	r3, #3
    cfae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cfb2:	f842 3f10 	str.w	r3, [r2, #16]!
    cfb6:	f00f fe43 	bl	1cc40 <z_log_msg_static_create.constprop.0>
    cfba:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    cfbc:	b11e      	cbz	r6, cfc6 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    cfbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cfc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cfc4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    cfc6:	4b26      	ldr	r3, [pc, #152]	; (d060 <mem_manage_fault.constprop.0+0x144>)
    cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cfca:	07db      	lsls	r3, r3, #31
    cfcc:	d50a      	bpl.n	cfe4 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    cfce:	4b29      	ldr	r3, [pc, #164]	; (d074 <mem_manage_fault.constprop.0+0x158>)
    cfd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cfd4:	617b      	str	r3, [r7, #20]
    cfd6:	2302      	movs	r3, #2
    cfd8:	4820      	ldr	r0, [pc, #128]	; (d05c <mem_manage_fault.constprop.0+0x140>)
    cfda:	613b      	str	r3, [r7, #16]
    cfdc:	f107 0210 	add.w	r2, r7, #16
    cfe0:	f00f fe2e 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cfe4:	4b1e      	ldr	r3, [pc, #120]	; (d060 <mem_manage_fault.constprop.0+0x144>)
    cfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cfe8:	069e      	lsls	r6, r3, #26
    cfea:	d50a      	bpl.n	d002 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    cfec:	4b22      	ldr	r3, [pc, #136]	; (d078 <mem_manage_fault.constprop.0+0x15c>)
    cfee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cff2:	617b      	str	r3, [r7, #20]
    cff4:	2302      	movs	r3, #2
    cff6:	4819      	ldr	r0, [pc, #100]	; (d05c <mem_manage_fault.constprop.0+0x140>)
    cff8:	613b      	str	r3, [r7, #16]
    cffa:	f107 0210 	add.w	r2, r7, #16
    cffe:	f00f fe1f 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d002:	4b17      	ldr	r3, [pc, #92]	; (d060 <mem_manage_fault.constprop.0+0x144>)
    d004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d006:	06d4      	lsls	r4, r2, #27
    d008:	d402      	bmi.n	d010 <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d00a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d00c:	0790      	lsls	r0, r2, #30
    d00e:	d511      	bpl.n	d034 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    d010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d012:	06d9      	lsls	r1, r3, #27
    d014:	d50e      	bpl.n	d034 <mem_manage_fault.constprop.0+0x118>
    d016:	4919      	ldr	r1, [pc, #100]	; (d07c <mem_manage_fault.constprop.0+0x160>)
    d018:	f44f 73ae 	mov.w	r3, #348	; 0x15c
    d01c:	4a18      	ldr	r2, [pc, #96]	; (d080 <mem_manage_fault.constprop.0+0x164>)
    d01e:	4819      	ldr	r0, [pc, #100]	; (d084 <mem_manage_fault.constprop.0+0x168>)
    d020:	f00e fe8a 	bl	1bd38 <assert_print>
    d024:	4818      	ldr	r0, [pc, #96]	; (d088 <mem_manage_fault.constprop.0+0x16c>)
    d026:	f00e fe87 	bl	1bd38 <assert_print>
    d02a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    d02e:	4814      	ldr	r0, [pc, #80]	; (d080 <mem_manage_fault.constprop.0+0x164>)
    d030:	f00e fe7b 	bl	1bd2a <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    d034:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d036:	4b0a      	ldr	r3, [pc, #40]	; (d060 <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
    d038:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d03a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d03c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    d03e:	bf42      	ittt	mi
    d040:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    d042:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    d046:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d04a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    d04e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d050:	7028      	strb	r0, [r5, #0]
}
    d052:	46bd      	mov	sp, r7
    d054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d058:	0002121c 	.word	0x0002121c
    d05c:	0001f960 	.word	0x0001f960
    d060:	e000ed00 	.word	0xe000ed00
    d064:	00021232 	.word	0x00021232
    d068:	00021265 	.word	0x00021265
    d06c:	00021278 	.word	0x00021278
    d070:	00021290 	.word	0x00021290
    d074:	000212a6 	.word	0x000212a6
    d078:	000212c5 	.word	0x000212c5
    d07c:	0002132e 	.word	0x0002132e
    d080:	000212f4 	.word	0x000212f4
    d084:	000205a4 	.word	0x000205a4
    d088:	00021378 	.word	0x00021378

0000d08c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d090:	b086      	sub	sp, #24
    d092:	4606      	mov	r6, r0
    d094:	460d      	mov	r5, r1
    d096:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    d098:	2402      	movs	r4, #2
    d09a:	4b3e      	ldr	r3, [pc, #248]	; (d194 <bus_fault.constprop.0+0x108>)
    d09c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d0a0:	617b      	str	r3, [r7, #20]
    d0a2:	483d      	ldr	r0, [pc, #244]	; (d198 <bus_fault.constprop.0+0x10c>)
    d0a4:	613c      	str	r4, [r7, #16]
    d0a6:	f107 0210 	add.w	r2, r7, #16
    d0aa:	f00f fdc9 	bl	1cc40 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d0ae:	4b3b      	ldr	r3, [pc, #236]	; (d19c <bus_fault.constprop.0+0x110>)
    d0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0b2:	04d9      	lsls	r1, r3, #19
    d0b4:	d509      	bpl.n	d0ca <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    d0b6:	4b3a      	ldr	r3, [pc, #232]	; (d1a0 <bus_fault.constprop.0+0x114>)
    d0b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d0bc:	e9c7 4304 	strd	r4, r3, [r7, #16]
    d0c0:	4835      	ldr	r0, [pc, #212]	; (d198 <bus_fault.constprop.0+0x10c>)
    d0c2:	f107 0210 	add.w	r2, r7, #16
    d0c6:	f00f fdbb 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d0ca:	4b34      	ldr	r3, [pc, #208]	; (d19c <bus_fault.constprop.0+0x110>)
    d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0ce:	051a      	lsls	r2, r3, #20
    d0d0:	d50a      	bpl.n	d0e8 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    d0d2:	4b34      	ldr	r3, [pc, #208]	; (d1a4 <bus_fault.constprop.0+0x118>)
    d0d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d0d8:	617b      	str	r3, [r7, #20]
    d0da:	2302      	movs	r3, #2
    d0dc:	482e      	ldr	r0, [pc, #184]	; (d198 <bus_fault.constprop.0+0x10c>)
    d0de:	613b      	str	r3, [r7, #16]
    d0e0:	f107 0210 	add.w	r2, r7, #16
    d0e4:	f00f fdac 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d0e8:	4c2c      	ldr	r4, [pc, #176]	; (d19c <bus_fault.constprop.0+0x110>)
    d0ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0ec:	059b      	lsls	r3, r3, #22
    d0ee:	d522      	bpl.n	d136 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    d0f0:	46e8      	mov	r8, sp
    d0f2:	4b2d      	ldr	r3, [pc, #180]	; (d1a8 <bus_fault.constprop.0+0x11c>)
    d0f4:	4828      	ldr	r0, [pc, #160]	; (d198 <bus_fault.constprop.0+0x10c>)
    d0f6:	617b      	str	r3, [r7, #20]
    d0f8:	2302      	movs	r3, #2
    d0fa:	f107 0210 	add.w	r2, r7, #16
    d0fe:	613b      	str	r3, [r7, #16]
    d100:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d104:	f00f fd9c 	bl	1cc40 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d108:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d10a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d10c:	0410      	lsls	r0, r2, #16
    d10e:	d512      	bpl.n	d136 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d110:	b088      	sub	sp, #32
    d112:	466a      	mov	r2, sp
    d114:	4925      	ldr	r1, [pc, #148]	; (d1ac <bus_fault.constprop.0+0x120>)
    d116:	4820      	ldr	r0, [pc, #128]	; (d198 <bus_fault.constprop.0+0x10c>)
    d118:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d11c:	2303      	movs	r3, #3
    d11e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d122:	f842 3f10 	str.w	r3, [r2, #16]!
    d126:	f00f fd8b 	bl	1cc40 <z_log_msg_static_create.constprop.0>
    d12a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    d12c:	b11e      	cbz	r6, d136 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d12e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d130:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    d134:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d136:	4b19      	ldr	r3, [pc, #100]	; (d19c <bus_fault.constprop.0+0x110>)
    d138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d13a:	0559      	lsls	r1, r3, #21
    d13c:	d50a      	bpl.n	d154 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    d13e:	4b1c      	ldr	r3, [pc, #112]	; (d1b0 <bus_fault.constprop.0+0x124>)
    d140:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d144:	617b      	str	r3, [r7, #20]
    d146:	2302      	movs	r3, #2
    d148:	4813      	ldr	r0, [pc, #76]	; (d198 <bus_fault.constprop.0+0x10c>)
    d14a:	613b      	str	r3, [r7, #16]
    d14c:	f107 0210 	add.w	r2, r7, #16
    d150:	f00f fd76 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d154:	4b11      	ldr	r3, [pc, #68]	; (d19c <bus_fault.constprop.0+0x110>)
    d156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d158:	05d2      	lsls	r2, r2, #23
    d15a:	d515      	bpl.n	d188 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    d15c:	4b15      	ldr	r3, [pc, #84]	; (d1b4 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d15e:	617b      	str	r3, [r7, #20]
    d160:	2302      	movs	r3, #2
    d162:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d166:	480c      	ldr	r0, [pc, #48]	; (d198 <bus_fault.constprop.0+0x10c>)
    d168:	613b      	str	r3, [r7, #16]
    d16a:	f107 0210 	add.w	r2, r7, #16
    d16e:	f00f fd67 	bl	1cc40 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    d172:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d174:	4a09      	ldr	r2, [pc, #36]	; (d19c <bus_fault.constprop.0+0x110>)

	return reason;
}
    d176:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d178:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d17a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d17e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d180:	7028      	strb	r0, [r5, #0]
}
    d182:	46bd      	mov	sp, r7
    d184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d18a:	049b      	lsls	r3, r3, #18
    d18c:	d5f1      	bpl.n	d172 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d18e:	4b0a      	ldr	r3, [pc, #40]	; (d1b8 <bus_fault.constprop.0+0x12c>)
    d190:	e7e5      	b.n	d15e <bus_fault.constprop.0+0xd2>
    d192:	bf00      	nop
    d194:	000213dc 	.word	0x000213dc
    d198:	0001f960 	.word	0x0001f960
    d19c:	e000ed00 	.word	0xe000ed00
    d1a0:	000213f2 	.word	0x000213f2
    d1a4:	00021265 	.word	0x00021265
    d1a8:	00021403 	.word	0x00021403
    d1ac:	0002141c 	.word	0x0002141c
    d1b0:	00021431 	.word	0x00021431
    d1b4:	0002144c 	.word	0x0002144c
    d1b8:	000212c5 	.word	0x000212c5

0000d1bc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    d1bc:	b510      	push	{r4, lr}
    d1be:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    d1c0:	2402      	movs	r4, #2
    d1c2:	4b3a      	ldr	r3, [pc, #232]	; (d2ac <usage_fault.constprop.0+0xf0>)
    d1c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1c8:	4839      	ldr	r0, [pc, #228]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d1ca:	aa04      	add	r2, sp, #16
    d1cc:	9305      	str	r3, [sp, #20]
    d1ce:	9404      	str	r4, [sp, #16]
    d1d0:	f00f fd36 	bl	1cc40 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d1d4:	4b37      	ldr	r3, [pc, #220]	; (d2b4 <usage_fault.constprop.0+0xf8>)
    d1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1d8:	019b      	lsls	r3, r3, #6
    d1da:	d508      	bpl.n	d1ee <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    d1dc:	4b36      	ldr	r3, [pc, #216]	; (d2b8 <usage_fault.constprop.0+0xfc>)
    d1de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1e2:	4833      	ldr	r0, [pc, #204]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d1e4:	aa04      	add	r2, sp, #16
    d1e6:	e9cd 4304 	strd	r4, r3, [sp, #16]
    d1ea:	f00f fd29 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d1ee:	4b31      	ldr	r3, [pc, #196]	; (d2b4 <usage_fault.constprop.0+0xf8>)
    d1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1f2:	01dc      	lsls	r4, r3, #7
    d1f4:	d509      	bpl.n	d20a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    d1f6:	4b31      	ldr	r3, [pc, #196]	; (d2bc <usage_fault.constprop.0+0x100>)
    d1f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1fc:	9305      	str	r3, [sp, #20]
    d1fe:	2302      	movs	r3, #2
    d200:	482b      	ldr	r0, [pc, #172]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d202:	aa04      	add	r2, sp, #16
    d204:	9304      	str	r3, [sp, #16]
    d206:	f00f fd1b 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d20a:	4b2a      	ldr	r3, [pc, #168]	; (d2b4 <usage_fault.constprop.0+0xf8>)
    d20c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d20e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    d212:	d009      	beq.n	d228 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    d214:	2402      	movs	r4, #2
    d216:	4b2a      	ldr	r3, [pc, #168]	; (d2c0 <usage_fault.constprop.0+0x104>)
    d218:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d21c:	4824      	ldr	r0, [pc, #144]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d21e:	aa04      	add	r2, sp, #16
    d220:	9305      	str	r3, [sp, #20]
    d222:	9404      	str	r4, [sp, #16]
    d224:	f00f fd0c 	bl	1cc40 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d228:	4b22      	ldr	r3, [pc, #136]	; (d2b4 <usage_fault.constprop.0+0xf8>)
    d22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d22c:	0318      	lsls	r0, r3, #12
    d22e:	d509      	bpl.n	d244 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    d230:	4b24      	ldr	r3, [pc, #144]	; (d2c4 <usage_fault.constprop.0+0x108>)
    d232:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d236:	9305      	str	r3, [sp, #20]
    d238:	2302      	movs	r3, #2
    d23a:	481d      	ldr	r0, [pc, #116]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d23c:	aa04      	add	r2, sp, #16
    d23e:	9304      	str	r3, [sp, #16]
    d240:	f00f fcfe 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d244:	4b1b      	ldr	r3, [pc, #108]	; (d2b4 <usage_fault.constprop.0+0xf8>)
    d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d248:	0359      	lsls	r1, r3, #13
    d24a:	d509      	bpl.n	d260 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d24c:	4b1e      	ldr	r3, [pc, #120]	; (d2c8 <usage_fault.constprop.0+0x10c>)
    d24e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d252:	9305      	str	r3, [sp, #20]
    d254:	2302      	movs	r3, #2
    d256:	4816      	ldr	r0, [pc, #88]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d258:	aa04      	add	r2, sp, #16
    d25a:	9304      	str	r3, [sp, #16]
    d25c:	f00f fcf0 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d260:	4b14      	ldr	r3, [pc, #80]	; (d2b4 <usage_fault.constprop.0+0xf8>)
    d262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d264:	039a      	lsls	r2, r3, #14
    d266:	d509      	bpl.n	d27c <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d268:	4b18      	ldr	r3, [pc, #96]	; (d2cc <usage_fault.constprop.0+0x110>)
    d26a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d26e:	9305      	str	r3, [sp, #20]
    d270:	2302      	movs	r3, #2
    d272:	480f      	ldr	r0, [pc, #60]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d274:	aa04      	add	r2, sp, #16
    d276:	9304      	str	r3, [sp, #16]
    d278:	f00f fce2 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d27c:	4b0d      	ldr	r3, [pc, #52]	; (d2b4 <usage_fault.constprop.0+0xf8>)
    d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d280:	03db      	lsls	r3, r3, #15
    d282:	d509      	bpl.n	d298 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d284:	4b12      	ldr	r3, [pc, #72]	; (d2d0 <usage_fault.constprop.0+0x114>)
    d286:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d28a:	9305      	str	r3, [sp, #20]
    d28c:	2302      	movs	r3, #2
    d28e:	4808      	ldr	r0, [pc, #32]	; (d2b0 <usage_fault.constprop.0+0xf4>)
    d290:	aa04      	add	r2, sp, #16
    d292:	9304      	str	r3, [sp, #16]
    d294:	f00f fcd4 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d298:	4a06      	ldr	r2, [pc, #24]	; (d2b4 <usage_fault.constprop.0+0xf8>)

	return reason;
}
    d29a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d29c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d29e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d2a2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d2a6:	6293      	str	r3, [r2, #40]	; 0x28
}
    d2a8:	b006      	add	sp, #24
    d2aa:	bd10      	pop	{r4, pc}
    d2ac:	00021464 	.word	0x00021464
    d2b0:	0001f960 	.word	0x0001f960
    d2b4:	e000ed00 	.word	0xe000ed00
    d2b8:	0002147c 	.word	0x0002147c
    d2bc:	0002148f 	.word	0x0002148f
    d2c0:	000214a9 	.word	0x000214a9
    d2c4:	000214d3 	.word	0x000214d3
    d2c8:	000214f1 	.word	0x000214f1
    d2cc:	00021516 	.word	0x00021516
    d2d0:	00021530 	.word	0x00021530

0000d2d4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2d8:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d2da:	4b90      	ldr	r3, [pc, #576]	; (d51c <z_arm_fault+0x248>)
{
    d2dc:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d2de:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
    d2e2:	4688      	mov	r8, r1
    d2e4:	4616      	mov	r6, r2
    d2e6:	2300      	movs	r3, #0
    d2e8:	af00      	add	r7, sp, #0
    d2ea:	f3ca 0908 	ubfx	r9, sl, #0, #9
    d2ee:	f383 8811 	msr	BASEPRI, r3
    d2f2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d2f6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d2fa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d2fe:	d00e      	beq.n	d31e <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    d300:	4987      	ldr	r1, [pc, #540]	; (d520 <z_arm_fault+0x24c>)
    d302:	f44f 6384 	mov.w	r3, #1056	; 0x420
    d306:	4a87      	ldr	r2, [pc, #540]	; (d524 <z_arm_fault+0x250>)
    d308:	4887      	ldr	r0, [pc, #540]	; (d528 <z_arm_fault+0x254>)
    d30a:	f00e fd15 	bl	1bd38 <assert_print>
    d30e:	4887      	ldr	r0, [pc, #540]	; (d52c <z_arm_fault+0x258>)
    d310:	f00e fd12 	bl	1bd38 <assert_print>
    d314:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
    d318:	4882      	ldr	r0, [pc, #520]	; (d524 <z_arm_fault+0x250>)
    d31a:	f00e fd06 	bl	1bd2a <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d31e:	f012 0401 	ands.w	r4, r2, #1
    d322:	d1ed      	bne.n	d300 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d324:	0653      	lsls	r3, r2, #25
    d326:	d404      	bmi.n	d332 <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d328:	0710      	lsls	r0, r2, #28
    d32a:	d40f      	bmi.n	d34c <z_arm_fault+0x78>
			*nested_exc = true;
    d32c:	f04f 0801 	mov.w	r8, #1
    d330:	e00f      	b.n	d352 <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
    d332:	4b7f      	ldr	r3, [pc, #508]	; (d530 <z_arm_fault+0x25c>)
    d334:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d338:	61fb      	str	r3, [r7, #28]
    d33a:	2302      	movs	r3, #2
    d33c:	487d      	ldr	r0, [pc, #500]	; (d534 <z_arm_fault+0x260>)
    d33e:	61bb      	str	r3, [r7, #24]
    d340:	f107 0218 	add.w	r2, r7, #24
    d344:	f00f fc7c 	bl	1cc40 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d348:	0771      	lsls	r1, r6, #29
    d34a:	d500      	bpl.n	d34e <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
    d34c:	4645      	mov	r5, r8
	*nested_exc = false;
    d34e:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
    d352:	2d00      	cmp	r5, #0
    d354:	d0d4      	beq.n	d300 <z_arm_fault+0x2c>
	*recoverable = false;
    d356:	2300      	movs	r3, #0
    d358:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    d35a:	f1a9 0303 	sub.w	r3, r9, #3
    d35e:	2b09      	cmp	r3, #9
    d360:	f200 80ba 	bhi.w	d4d8 <z_arm_fault+0x204>
    d364:	e8df f003 	tbb	[pc, r3]
    d368:	90b0ad05 	.word	0x90b0ad05
    d36c:	b8b8b8b8 	.word	0xb8b8b8b8
    d370:	b3b8      	.short	0xb3b8
	PR_FAULT_INFO("***** HARD FAULT *****");
    d372:	46e9      	mov	r9, sp
    d374:	f04f 0a02 	mov.w	sl, #2
    d378:	4b6f      	ldr	r3, [pc, #444]	; (d538 <z_arm_fault+0x264>)
    d37a:	f107 0218 	add.w	r2, r7, #24
    d37e:	61fb      	str	r3, [r7, #28]
    d380:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d384:	486b      	ldr	r0, [pc, #428]	; (d534 <z_arm_fault+0x260>)
    d386:	f8c7 a018 	str.w	sl, [r7, #24]
    d38a:	f00f fc59 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    d38e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d390:	4e62      	ldr	r6, [pc, #392]	; (d51c <z_arm_fault+0x248>)
	*recoverable = false;
    d392:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d394:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d396:	079a      	lsls	r2, r3, #30
    d398:	d50a      	bpl.n	d3b0 <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
    d39a:	4b68      	ldr	r3, [pc, #416]	; (d53c <z_arm_fault+0x268>)
		PR_EXC("  Debug event");
    d39c:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    d3a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d3a4:	4863      	ldr	r0, [pc, #396]	; (d534 <z_arm_fault+0x260>)
    d3a6:	f107 0218 	add.w	r2, r7, #24
    d3aa:	f00f fc49 	bl	1cc40 <z_log_msg_static_create.constprop.0>
}
    d3ae:	e041      	b.n	d434 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    d3b0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d3b2:	2b00      	cmp	r3, #0
    d3b4:	da01      	bge.n	d3ba <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
    d3b6:	4b62      	ldr	r3, [pc, #392]	; (d540 <z_arm_fault+0x26c>)
    d3b8:	e7f0      	b.n	d39c <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d3ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d3bc:	005b      	lsls	r3, r3, #1
    d3be:	d573      	bpl.n	d4a8 <z_arm_fault+0x1d4>
		PR_EXC("  Fault escalation (see below)");
    d3c0:	4b60      	ldr	r3, [pc, #384]	; (d544 <z_arm_fault+0x270>)
    d3c2:	f107 0218 	add.w	r2, r7, #24
    d3c6:	e9c7 a306 	strd	sl, r3, [r7, #24]
    d3ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d3ce:	4859      	ldr	r0, [pc, #356]	; (d534 <z_arm_fault+0x260>)
    d3d0:	f00f fc36 	bl	1cc40 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d3d4:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    d3d6:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d3dc:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d3de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d3e2:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d3e6:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    d3e8:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d3ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d3f0:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d3f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d3f6:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    d3fa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    d3fe:	429a      	cmp	r2, r3
    d400:	d008      	beq.n	d414 <z_arm_fault+0x140>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    d402:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d404:	b2db      	uxtb	r3, r3
    d406:	b393      	cbz	r3, d46e <z_arm_fault+0x19a>
			reason = mem_manage_fault(esf, 1, recoverable);
    d408:	2001      	movs	r0, #1
    d40a:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d40c:	f7ff fd86 	bl	cf1c <mem_manage_fault.constprop.0>
    d410:	4604      	mov	r4, r0
		break;
    d412:	e00f      	b.n	d434 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    d414:	b088      	sub	sp, #32
    d416:	682b      	ldr	r3, [r5, #0]
    d418:	466a      	mov	r2, sp
    d41a:	494b      	ldr	r1, [pc, #300]	; (d548 <z_arm_fault+0x274>)
    d41c:	4845      	ldr	r0, [pc, #276]	; (d534 <z_arm_fault+0x260>)
    d41e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d422:	2303      	movs	r3, #3
    d424:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d428:	f842 3f10 	str.w	r3, [r2, #16]!
    d42c:	f00f fc08 	bl	1cc40 <z_log_msg_static_create.constprop.0>
    d430:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    d432:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d434:	79fb      	ldrb	r3, [r7, #7]
    d436:	b9b3      	cbnz	r3, d466 <z_arm_fault+0x192>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d438:	2220      	movs	r2, #32
    d43a:	4629      	mov	r1, r5
    d43c:	f107 0008 	add.w	r0, r7, #8
    d440:	f00f fc89 	bl	1cd56 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d446:	f1b8 0f00 	cmp.w	r8, #0
    d44a:	d061      	beq.n	d510 <z_arm_fault+0x23c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d44c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d450:	b922      	cbnz	r2, d45c <z_arm_fault+0x188>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d452:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d456:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d45a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d45c:	4620      	mov	r0, r4
    d45e:	f107 0108 	add.w	r1, r7, #8
    d462:	f7ff fbb7 	bl	cbd4 <z_arm_fatal_error>
}
    d466:	3728      	adds	r7, #40	; 0x28
    d468:	46bd      	mov	sp, r7
    d46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    d46e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d470:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    d474:	d004      	beq.n	d480 <z_arm_fault+0x1ac>
			reason = bus_fault(esf, 1, recoverable);
    d476:	2001      	movs	r0, #1
    d478:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    d47a:	f7ff fe07 	bl	d08c <bus_fault.constprop.0>
    d47e:	e7c7      	b.n	d410 <z_arm_fault+0x13c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    d480:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d486:	d302      	bcc.n	d48e <z_arm_fault+0x1ba>
		reason = usage_fault(esf);
    d488:	f7ff fe98 	bl	d1bc <usage_fault.constprop.0>
    d48c:	e7c0      	b.n	d410 <z_arm_fault+0x13c>
			__ASSERT(0,
    d48e:	492f      	ldr	r1, [pc, #188]	; (d54c <z_arm_fault+0x278>)
    d490:	f240 23f2 	movw	r3, #754	; 0x2f2
    d494:	4a23      	ldr	r2, [pc, #140]	; (d524 <z_arm_fault+0x250>)
    d496:	4824      	ldr	r0, [pc, #144]	; (d528 <z_arm_fault+0x254>)
    d498:	f00e fc4e 	bl	1bd38 <assert_print>
    d49c:	482c      	ldr	r0, [pc, #176]	; (d550 <z_arm_fault+0x27c>)
    d49e:	f00e fc4b 	bl	1bd38 <assert_print>
    d4a2:	f240 21f2 	movw	r1, #754	; 0x2f2
    d4a6:	e737      	b.n	d318 <z_arm_fault+0x44>
		__ASSERT(0,
    d4a8:	4928      	ldr	r1, [pc, #160]	; (d54c <z_arm_fault+0x278>)
    d4aa:	f240 23f6 	movw	r3, #758	; 0x2f6
    d4ae:	4a1d      	ldr	r2, [pc, #116]	; (d524 <z_arm_fault+0x250>)
    d4b0:	481d      	ldr	r0, [pc, #116]	; (d528 <z_arm_fault+0x254>)
    d4b2:	f00e fc41 	bl	1bd38 <assert_print>
    d4b6:	4827      	ldr	r0, [pc, #156]	; (d554 <z_arm_fault+0x280>)
    d4b8:	f00e fc3e 	bl	1bd38 <assert_print>
    d4bc:	f240 21f6 	movw	r1, #758	; 0x2f6
    d4c0:	e72a      	b.n	d318 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    d4c2:	2000      	movs	r0, #0
    d4c4:	1df9      	adds	r1, r7, #7
    d4c6:	e7a1      	b.n	d40c <z_arm_fault+0x138>
		reason = bus_fault(esf, 0, recoverable);
    d4c8:	2000      	movs	r0, #0
    d4ca:	1df9      	adds	r1, r7, #7
    d4cc:	e7d5      	b.n	d47a <z_arm_fault+0x1a6>
	PR_FAULT_INFO(
    d4ce:	4b22      	ldr	r3, [pc, #136]	; (d558 <z_arm_fault+0x284>)
    d4d0:	61fb      	str	r3, [r7, #28]
    d4d2:	2302      	movs	r3, #2
    d4d4:	61bb      	str	r3, [r7, #24]
    d4d6:	e763      	b.n	d3a0 <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
    d4d8:	4a20      	ldr	r2, [pc, #128]	; (d55c <z_arm_fault+0x288>)
    d4da:	466e      	mov	r6, sp
    d4dc:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
    d4e0:	b08a      	sub	sp, #40	; 0x28
    d4e2:	4b1f      	ldr	r3, [pc, #124]	; (d560 <z_arm_fault+0x28c>)
    d4e4:	bf18      	it	ne
    d4e6:	4613      	movne	r3, r2
    d4e8:	466a      	mov	r2, sp
    d4ea:	491e      	ldr	r1, [pc, #120]	; (d564 <z_arm_fault+0x290>)
    d4ec:	4811      	ldr	r0, [pc, #68]	; (d534 <z_arm_fault+0x260>)
    d4ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d4f2:	f1a9 0310 	sub.w	r3, r9, #16
    d4f6:	61d3      	str	r3, [r2, #28]
    d4f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    d4fc:	8413      	strh	r3, [r2, #32]
    d4fe:	4b1a      	ldr	r3, [pc, #104]	; (d568 <z_arm_fault+0x294>)
    d500:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    d504:	f842 3f10 	str.w	r3, [r2, #16]!
    d508:	f00f fb9a 	bl	1cc40 <z_log_msg_static_create.constprop.0>
    d50c:	46b5      	mov	sp, r6
}
    d50e:	e791      	b.n	d434 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d510:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d514:	f023 0301 	bic.w	r3, r3, #1
    d518:	e79f      	b.n	d45a <z_arm_fault+0x186>
    d51a:	bf00      	nop
    d51c:	e000ed00 	.word	0xe000ed00
    d520:	00021589 	.word	0x00021589
    d524:	000212f4 	.word	0x000212f4
    d528:	000205a4 	.word	0x000205a4
    d52c:	0002159c 	.word	0x0002159c
    d530:	000215da 	.word	0x000215da
    d534:	0001f960 	.word	0x0001f960
    d538:	000215fd 	.word	0x000215fd
    d53c:	00021614 	.word	0x00021614
    d540:	00021635 	.word	0x00021635
    d544:	00021643 	.word	0x00021643
    d548:	00021662 	.word	0x00021662
    d54c:	0002357e 	.word	0x0002357e
    d550:	0002167e 	.word	0x0002167e
    d554:	000216a2 	.word	0x000216a2
    d558:	000216d2 	.word	0x000216d2
    d55c:	00021570 	.word	0x00021570
    d560:	0002155b 	.word	0x0002155b
    d564:	000216f6 	.word	0x000216f6
    d568:	01000004 	.word	0x01000004

0000d56c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d56c:	4b04      	ldr	r3, [pc, #16]	; (d580 <z_arm_fault_init+0x14>)
    d56e:	695a      	ldr	r2, [r3, #20]
    d570:	f042 0210 	orr.w	r2, r2, #16
    d574:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d576:	695a      	ldr	r2, [r3, #20]
    d578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d57c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    d57e:	4770      	bx	lr
    d580:	e000ed00 	.word	0xe000ed00

0000d584 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d584:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d588:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d58c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d58e:	4672      	mov	r2, lr
	bl z_arm_fault
    d590:	f7ff fea0 	bl	d2d4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d594:	bd01      	pop	{r0, pc}
    d596:	bf00      	nop

0000d598 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d598:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d59a:	2120      	movs	r1, #32
    d59c:	4803      	ldr	r0, [pc, #12]	; (d5ac <z_arm_interrupt_init+0x14>)
    d59e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d5a0:	3301      	adds	r3, #1
    d5a2:	2b45      	cmp	r3, #69	; 0x45
    d5a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d5a8:	d1f9      	bne.n	d59e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d5aa:	4770      	bx	lr
    d5ac:	e000e100 	.word	0xe000e100

0000d5b0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    d5b0:	2000      	movs	r0, #0
    msr CONTROL, r0
    d5b2:	f380 8814 	msr	CONTROL, r0
    isb
    d5b6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    d5ba:	2000      	movs	r0, #0
    msr MSPLIM, r0
    d5bc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    d5c0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    d5c4:	f7fd fd8a 	bl	b0dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    d5c8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    d5ca:	490e      	ldr	r1, [pc, #56]	; (d604 <__start+0x54>)
    str r0, [r1]
    d5cc:	6008      	str	r0, [r1, #0]
    dsb
    d5ce:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d5d2:	480d      	ldr	r0, [pc, #52]	; (d608 <__start+0x58>)
    msr msp, r0
    d5d4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    d5d8:	f000 f83e 	bl	d658 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d5dc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d5de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d5e2:	480a      	ldr	r0, [pc, #40]	; (d60c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d5e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d5e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d5ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d5ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d5f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d5f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d5f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d5fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d5fe:	f7ff fbb5 	bl	cd6c <z_arm_prep_c>
    d602:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    d604:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d608:	2000c860 	.word	0x2000c860
    ldr r0, =z_interrupt_stacks
    d60c:	2000bb20 	.word	0x2000bb20

0000d610 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d610:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d614:	4905      	ldr	r1, [pc, #20]	; (d62c <sys_arch_reboot+0x1c>)
    d616:	4b06      	ldr	r3, [pc, #24]	; (d630 <sys_arch_reboot+0x20>)
    d618:	68ca      	ldr	r2, [r1, #12]
    d61a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d61e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d620:	60cb      	str	r3, [r1, #12]
    d622:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d626:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d628:	e7fd      	b.n	d626 <sys_arch_reboot+0x16>
    d62a:	bf00      	nop
    d62c:	e000ed00 	.word	0xe000ed00
    d630:	05fa0004 	.word	0x05fa0004

0000d634 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    d634:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    d636:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    d638:	4906      	ldr	r1, [pc, #24]	; (d654 <z_arm_clear_arm_mpu_config+0x20>)
    d63a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    d63e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    d642:	4293      	cmp	r3, r2
    d644:	db00      	blt.n	d648 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    d646:	4770      	bx	lr
  mpu->RNR = rnr;
    d648:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    d64c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    d650:	3301      	adds	r3, #1
    d652:	e7f6      	b.n	d642 <z_arm_clear_arm_mpu_config+0xe>
    d654:	e000ed00 	.word	0xe000ed00

0000d658 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    d658:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    d65a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    d65c:	2400      	movs	r4, #0
    d65e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    d662:	f7ff ffe7 	bl	d634 <z_arm_clear_arm_mpu_config>
    d666:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    d668:	f04f 30ff 	mov.w	r0, #4294967295
    d66c:	4a0c      	ldr	r2, [pc, #48]	; (d6a0 <z_arm_init_arch_hw_at_boot+0x48>)
    d66e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d672:	3301      	adds	r3, #1
    d674:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    d676:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d67a:	d1f8      	bne.n	d66e <z_arm_init_arch_hw_at_boot+0x16>
    d67c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d67e:	f04f 30ff 	mov.w	r0, #4294967295
    d682:	4a07      	ldr	r2, [pc, #28]	; (d6a0 <z_arm_init_arch_hw_at_boot+0x48>)
    d684:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d688:	3301      	adds	r3, #1
    d68a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d68c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d690:	d1f8      	bne.n	d684 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    d692:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    d694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d698:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    d69c:	bd10      	pop	{r4, pc}
    d69e:	bf00      	nop
    d6a0:	e000e100 	.word	0xe000e100

0000d6a4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    d6a4:	4b08      	ldr	r3, [pc, #32]	; (d6c8 <z_impl_k_thread_abort+0x24>)
    d6a6:	689b      	ldr	r3, [r3, #8]
    d6a8:	4283      	cmp	r3, r0
    d6aa:	d10b      	bne.n	d6c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d6ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d6b0:	b143      	cbz	r3, d6c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d6b2:	4b06      	ldr	r3, [pc, #24]	; (d6cc <z_impl_k_thread_abort+0x28>)
    d6b4:	685a      	ldr	r2, [r3, #4]
    d6b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    d6ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    d6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d6be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d6c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    d6c4:	f00c bfba 	b.w	1a63c <z_thread_abort>
    d6c8:	20009b48 	.word	0x20009b48
    d6cc:	e000ed00 	.word	0xe000ed00

0000d6d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d6d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d6d2:	4c09      	ldr	r4, [pc, #36]	; (d6f8 <z_arm_configure_static_mpu_regions+0x28>)
    d6d4:	4a09      	ldr	r2, [pc, #36]	; (d6fc <z_arm_configure_static_mpu_regions+0x2c>)
    d6d6:	4623      	mov	r3, r4
    d6d8:	2101      	movs	r1, #1
    d6da:	4809      	ldr	r0, [pc, #36]	; (d700 <z_arm_configure_static_mpu_regions+0x30>)
    d6dc:	f000 f92a 	bl	d934 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d6e0:	2300      	movs	r3, #0
    d6e2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d6e4:	4b07      	ldr	r3, [pc, #28]	; (d704 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d6e6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d6e8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d6ea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d6ec:	9301      	str	r3, [sp, #4]
    d6ee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d6f0:	f000 f944 	bl	d97c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d6f4:	b004      	add	sp, #16
    d6f6:	bd10      	pop	{r4, pc}
    d6f8:	20070000 	.word	0x20070000
    d6fc:	20008000 	.word	0x20008000
    d700:	0001fc84 	.word	0x0001fc84
    d704:	20008738 	.word	0x20008738

0000d708 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d708:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    d70a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d70c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d70e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d712:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    d716:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d718:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d71a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d71c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    d720:	4905      	ldr	r1, [pc, #20]	; (d738 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d722:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d726:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    d72a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    d72e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    d732:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d736:	bd10      	pop	{r4, pc}
    d738:	e000ed00 	.word	0xe000ed00

0000d73c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    d73c:	b580      	push	{r7, lr}
    d73e:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d740:	b088      	sub	sp, #32
    d742:	466a      	mov	r2, sp
    d744:	4b07      	ldr	r3, [pc, #28]	; (d764 <region_allocate_and_init.part.0+0x28>)
    d746:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d74a:	2303      	movs	r3, #3
    d74c:	f842 3f10 	str.w	r3, [r2, #16]!
    d750:	2300      	movs	r3, #0
    d752:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d756:	4804      	ldr	r0, [pc, #16]	; (d768 <region_allocate_and_init.part.0+0x2c>)
    d758:	f7fe f856 	bl	b808 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    d75c:	f06f 0015 	mvn.w	r0, #21
    d760:	46bd      	mov	sp, r7
    d762:	bd80      	pop	{r7, pc}
    d764:	0002170d 	.word	0x0002170d
    d768:	0001f948 	.word	0x0001f948

0000d76c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d770:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d772:	4606      	mov	r6, r0
    d774:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d778:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    d77a:	4d5f      	ldr	r5, [pc, #380]	; (d8f8 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d77c:	af00      	add	r7, sp, #0
    d77e:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    d780:	687b      	ldr	r3, [r7, #4]
    d782:	4599      	cmp	r9, r3
    d784:	da35      	bge.n	d7f2 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    d786:	f8d6 8004 	ldr.w	r8, [r6, #4]
    d78a:	f1b8 0f00 	cmp.w	r8, #0
    d78e:	d054      	beq.n	d83a <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    d790:	f1b8 0f1f 	cmp.w	r8, #31
    d794:	d91b      	bls.n	d7ce <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    d796:	f018 0f1f 	tst.w	r8, #31
    d79a:	d118      	bne.n	d7ce <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    d79c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d7a0:	f01b 0f1f 	tst.w	fp, #31
    d7a4:	d113      	bne.n	d7ce <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d7a6:	4658      	mov	r0, fp
    d7a8:	f00f fa4f 	bl	1cc4a <arm_cmse_mpu_region_get>
    d7ac:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d7ae:	eb08 000b 	add.w	r0, r8, fp
    d7b2:	3801      	subs	r0, #1
    d7b4:	f00f fa49 	bl	1cc4a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d7b8:	4582      	cmp	sl, r0
    d7ba:	d01f      	beq.n	d7fc <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    d7bc:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d7c0:	466c      	mov	r4, sp
    d7c2:	b088      	sub	sp, #32
    d7c4:	466a      	mov	r2, sp
    d7c6:	494d      	ldr	r1, [pc, #308]	; (d8fc <mpu_configure_regions_and_partition.constprop.0+0x190>)
    d7c8:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    d7cc:	e005      	b.n	d7da <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d7ce:	466c      	mov	r4, sp
    d7d0:	b088      	sub	sp, #32
    d7d2:	466a      	mov	r2, sp
    d7d4:	4b4a      	ldr	r3, [pc, #296]	; (d900 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    d7d6:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    d7da:	2303      	movs	r3, #3
    d7dc:	f842 3f10 	str.w	r3, [r2, #16]!
    d7e0:	2300      	movs	r3, #0
    d7e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d7e6:	4847      	ldr	r0, [pc, #284]	; (d904 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    d7e8:	f7fe f80e 	bl	b808 <z_impl_z_log_msg_static_create>
    d7ec:	46a5      	mov	sp, r4
			return -EINVAL;
    d7ee:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d7f2:	4620      	mov	r0, r4
    d7f4:	371c      	adds	r7, #28
    d7f6:	46bd      	mov	sp, r7
    d7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d7fc:	f11a 0f16 	cmn.w	sl, #22
    d800:	d0de      	beq.n	d7c0 <mpu_configure_regions_and_partition.constprop.0+0x54>
    d802:	4554      	cmp	r4, sl
    d804:	dddc      	ble.n	d7c0 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    d806:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d80a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    d80e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    d812:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    d816:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d81a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d81e:	e9d6 2100 	ldrd	r2, r1, [r6]
    d822:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    d824:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d826:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d82a:	d11e      	bne.n	d86a <mpu_configure_regions_and_partition.constprop.0+0xfe>
    d82c:	45d8      	cmp	r8, fp
    d82e:	d108      	bne.n	d842 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    d830:	4631      	mov	r1, r6
    d832:	fa5f f08a 	uxtb.w	r0, sl
    d836:	f00f fa11 	bl	1cc5c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d83a:	f109 0901 	add.w	r9, r9, #1
    d83e:	360c      	adds	r6, #12
    d840:	e79e      	b.n	d780 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    d842:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d846:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    d84a:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    d84e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    d852:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    d854:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    d856:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d85a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d85c:	f00f f9fe 	bl	1cc5c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d860:	f110 0f16 	cmn.w	r0, #22
    d864:	d0c3      	beq.n	d7ee <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    d866:	1c44      	adds	r4, r0, #1
    d868:	e7e7      	b.n	d83a <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    d86a:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    d86c:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    d86e:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d870:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    d874:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d878:	d108      	bne.n	d88c <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    d87a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d87e:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d880:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d884:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    d886:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d88a:	e7e7      	b.n	d85c <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    d88c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d890:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d894:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    d896:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d89a:	4631      	mov	r1, r6
    d89c:	f00f f9de 	bl	1cc5c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d8a0:	f110 0f16 	cmn.w	r0, #22
    d8a4:	d0a3      	beq.n	d7ee <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    d8a6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d8aa:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    d8ae:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    d8b0:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    d8b4:	f362 0304 	bfi	r3, r2, #0, #5
    d8b8:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    d8ba:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    d8be:	7c3a      	ldrb	r2, [r7, #16]
    d8c0:	085b      	lsrs	r3, r3, #1
    d8c2:	f363 1247 	bfi	r2, r3, #5, #3
    d8c6:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    d8c8:	e9d6 3200 	ldrd	r3, r2, [r6]
    d8cc:	4413      	add	r3, r2
    d8ce:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d8d0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d8d4:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d8d6:	4443      	add	r3, r8
    d8d8:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    d8dc:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    d8de:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d8e2:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    d8e4:	617b      	str	r3, [r7, #20]
    d8e6:	d902      	bls.n	d8ee <mpu_configure_regions_and_partition.constprop.0+0x182>
    d8e8:	f7ff ff28 	bl	d73c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    d8ec:	e7b8      	b.n	d860 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    d8ee:	f107 0108 	add.w	r1, r7, #8
    d8f2:	f7ff ff09 	bl	d708 <region_init>
    d8f6:	e7b6      	b.n	d866 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    d8f8:	e000ed00 	.word	0xe000ed00
    d8fc:	00021756 	.word	0x00021756
    d900:	00021733 	.word	0x00021733
    d904:	0001f948 	.word	0x0001f948

0000d908 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d908:	2205      	movs	r2, #5
    d90a:	4b04      	ldr	r3, [pc, #16]	; (d91c <arm_core_mpu_enable+0x14>)
    d90c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d914:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d918:	4770      	bx	lr
    d91a:	bf00      	nop
    d91c:	e000ed00 	.word	0xe000ed00

0000d920 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    d920:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d924:	2200      	movs	r2, #0
    d926:	4b02      	ldr	r3, [pc, #8]	; (d930 <arm_core_mpu_disable+0x10>)
    d928:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d92c:	4770      	bx	lr
    d92e:	bf00      	nop
    d930:	e000ed00 	.word	0xe000ed00

0000d934 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    d934:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d936:	4d0c      	ldr	r5, [pc, #48]	; (d968 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    d938:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d93a:	782a      	ldrb	r2, [r5, #0]
    d93c:	f7ff ff16 	bl	d76c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d940:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d942:	3016      	adds	r0, #22
    d944:	d10f      	bne.n	d966 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d946:	f44f 738b 	mov.w	r3, #278	; 0x116
    d94a:	4a08      	ldr	r2, [pc, #32]	; (d96c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    d94c:	4908      	ldr	r1, [pc, #32]	; (d970 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    d94e:	4809      	ldr	r0, [pc, #36]	; (d974 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    d950:	f00e f9f2 	bl	1bd38 <assert_print>
    d954:	4621      	mov	r1, r4
    d956:	4808      	ldr	r0, [pc, #32]	; (d978 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    d958:	f00e f9ee 	bl	1bd38 <assert_print>
    d95c:	f44f 718b 	mov.w	r1, #278	; 0x116
    d960:	4802      	ldr	r0, [pc, #8]	; (d96c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    d962:	f00e f9e2 	bl	1bd2a <assert_post_action>
			regions_num);
	}
}
    d966:	bd38      	pop	{r3, r4, r5, pc}
    d968:	20009bba 	.word	0x20009bba
    d96c:	00021779 	.word	0x00021779
    d970:	0002357e 	.word	0x0002357e
    d974:	000205a4 	.word	0x000205a4
    d978:	000217b0 	.word	0x000217b0

0000d97c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    d97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d980:	4e31      	ldr	r6, [pc, #196]	; (da48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    d982:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d984:	4605      	mov	r5, r0
    d986:	f04f 0800 	mov.w	r8, #0
    d98a:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
    d98c:	4f2f      	ldr	r7, [pc, #188]	; (da4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d98e:	45c8      	cmp	r8, r9
    d990:	db02      	blt.n	d998 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    d992:	b003      	add	sp, #12
    d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    d998:	f8d5 a004 	ldr.w	sl, [r5, #4]
    d99c:	f1ba 0f00 	cmp.w	sl, #0
    d9a0:	d04c      	beq.n	da3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d9a2:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d9a4:	4608      	mov	r0, r1
    d9a6:	9101      	str	r1, [sp, #4]
    d9a8:	f00f f94f 	bl	1cc4a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d9ac:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d9ae:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d9b0:	eb0a 0001 	add.w	r0, sl, r1
    d9b4:	3801      	subs	r0, #1
    d9b6:	f00f f948 	bl	1cc4a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d9ba:	4284      	cmp	r4, r0
    d9bc:	f04f 0214 	mov.w	r2, #20
    d9c0:	4b23      	ldr	r3, [pc, #140]	; (da50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    d9c2:	d015      	beq.n	d9f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
    d9c4:	fb02 f308 	mul.w	r3, r2, r8
    d9c8:	f06f 0215 	mvn.w	r2, #21
    d9cc:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d9d0:	f44f 7393 	mov.w	r3, #294	; 0x126
    d9d4:	4a1f      	ldr	r2, [pc, #124]	; (da54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    d9d6:	4920      	ldr	r1, [pc, #128]	; (da58 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    d9d8:	4820      	ldr	r0, [pc, #128]	; (da5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
    d9da:	f00e f9ad 	bl	1bd38 <assert_print>
    d9de:	4649      	mov	r1, r9
    d9e0:	481f      	ldr	r0, [pc, #124]	; (da60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
    d9e2:	f00e f9a9 	bl	1bd38 <assert_print>
    d9e6:	f44f 7193 	mov.w	r1, #294	; 0x126
    d9ea:	481a      	ldr	r0, [pc, #104]	; (da54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    d9ec:	f00e f99d 	bl	1bd2a <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d9f0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d9f4:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d9f6:	d0eb      	beq.n	d9d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d9f8:	7819      	ldrb	r1, [r3, #0]
    d9fa:	42a1      	cmp	r1, r4
    d9fc:	dde8      	ble.n	d9d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
    d9fe:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    da02:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    da06:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    da0a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    da0e:	f100 0108 	add.w	r1, r0, #8
    da12:	7b00      	ldrb	r0, [r0, #12]
    da14:	f364 0004 	bfi	r0, r4, #0, #5
    da18:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    da1a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    da1e:	790c      	ldrb	r4, [r1, #4]
    da20:	0840      	lsrs	r0, r0, #1
    da22:	f360 1447 	bfi	r4, r0, #5, #3
    da26:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    da28:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    da2c:	f021 011f 	bic.w	r1, r1, #31
    da30:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
    da32:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    da36:	f021 011f 	bic.w	r1, r1, #31
    da3a:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    da3c:	f108 0801 	add.w	r8, r8, #1
    da40:	3614      	adds	r6, #20
    da42:	350c      	adds	r5, #12
    da44:	e7a3      	b.n	d98e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    da46:	bf00      	nop
    da48:	20009700 	.word	0x20009700
    da4c:	e000ed00 	.word	0xe000ed00
    da50:	20009bba 	.word	0x20009bba
    da54:	00021779 	.word	0x00021779
    da58:	0002357e 	.word	0x0002357e
    da5c:	000205a4 	.word	0x000205a4
    da60:	000217dc 	.word	0x000217dc

0000da64 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    da64:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    da66:	4d1f      	ldr	r5, [pc, #124]	; (dae4 <z_arm_mpu_init+0x80>)
    da68:	682c      	ldr	r4, [r5, #0]
    da6a:	2c08      	cmp	r4, #8
    da6c:	d910      	bls.n	da90 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    da6e:	f240 134d 	movw	r3, #333	; 0x14d
    da72:	4a1d      	ldr	r2, [pc, #116]	; (dae8 <z_arm_mpu_init+0x84>)
    da74:	491d      	ldr	r1, [pc, #116]	; (daec <z_arm_mpu_init+0x88>)
    da76:	481e      	ldr	r0, [pc, #120]	; (daf0 <z_arm_mpu_init+0x8c>)
    da78:	f00e f95e 	bl	1bd38 <assert_print>
    da7c:	4621      	mov	r1, r4
    da7e:	2208      	movs	r2, #8
    da80:	481c      	ldr	r0, [pc, #112]	; (daf4 <z_arm_mpu_init+0x90>)
    da82:	f00e f959 	bl	1bd38 <assert_print>
    da86:	f240 114d 	movw	r1, #333	; 0x14d
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    da8a:	4817      	ldr	r0, [pc, #92]	; (dae8 <z_arm_mpu_init+0x84>)
    da8c:	f00e f94d 	bl	1bd2a <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    da90:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    da92:	f7ff ff45 	bl	d920 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    da96:	4b18      	ldr	r3, [pc, #96]	; (daf8 <z_arm_mpu_init+0x94>)
    da98:	4a18      	ldr	r2, [pc, #96]	; (dafc <z_arm_mpu_init+0x98>)
    da9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    da9e:	4284      	cmp	r4, r0
    daa0:	d117      	bne.n	dad2 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
    daa2:	4b17      	ldr	r3, [pc, #92]	; (db00 <z_arm_mpu_init+0x9c>)
    daa4:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    daa6:	f7ff ff2f 	bl	d908 <arm_core_mpu_enable>
	__ASSERT(
    daaa:	4b13      	ldr	r3, [pc, #76]	; (daf8 <z_arm_mpu_init+0x94>)
    daac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    dab0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dab4:	2b08      	cmp	r3, #8
    dab6:	d013      	beq.n	dae0 <z_arm_mpu_init+0x7c>
    dab8:	4912      	ldr	r1, [pc, #72]	; (db04 <z_arm_mpu_init+0xa0>)
    daba:	f240 13b1 	movw	r3, #433	; 0x1b1
    dabe:	4a0a      	ldr	r2, [pc, #40]	; (dae8 <z_arm_mpu_init+0x84>)
    dac0:	480b      	ldr	r0, [pc, #44]	; (daf0 <z_arm_mpu_init+0x8c>)
    dac2:	f00e f939 	bl	1bd38 <assert_print>
    dac6:	4810      	ldr	r0, [pc, #64]	; (db08 <z_arm_mpu_init+0xa4>)
    dac8:	f00e f936 	bl	1bd38 <assert_print>
    dacc:	f240 11b1 	movw	r1, #433	; 0x1b1
    dad0:	e7db      	b.n	da8a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    dad2:	6869      	ldr	r1, [r5, #4]
    dad4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    dad8:	f7ff fe16 	bl	d708 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    dadc:	3001      	adds	r0, #1
    dade:	e7de      	b.n	da9e <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    dae0:	2000      	movs	r0, #0
    dae2:	bd38      	pop	{r3, r4, r5, pc}
    dae4:	0001fc90 	.word	0x0001fc90
    dae8:	00021779 	.word	0x00021779
    daec:	0002357e 	.word	0x0002357e
    daf0:	000205a4 	.word	0x000205a4
    daf4:	0002180b 	.word	0x0002180b
    daf8:	e000ed00 	.word	0xe000ed00
    dafc:	0044ffaa 	.word	0x0044ffaa
    db00:	20009bba 	.word	0x20009bba
    db04:	0002183f 	.word	0x0002183f
    db08:	0002188f 	.word	0x0002188f

0000db0c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    db0c:	4b01      	ldr	r3, [pc, #4]	; (db14 <__stdout_hook_install+0x8>)
    db0e:	6018      	str	r0, [r3, #0]
}
    db10:	4770      	bx	lr
    db12:	bf00      	nop
    db14:	200081b8 	.word	0x200081b8

0000db18 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    db18:	2000      	movs	r0, #0
    db1a:	4b02      	ldr	r3, [pc, #8]	; (db24 <remoteproc_mgr_boot+0xc>)
    db1c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    db20:	4770      	bx	lr
    db22:	bf00      	nop
    db24:	40005000 	.word	0x40005000

0000db28 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    db28:	4b0e      	ldr	r3, [pc, #56]	; (db64 <bt_hex+0x3c>)
    db2a:	2940      	cmp	r1, #64	; 0x40
    db2c:	bf28      	it	cs
    db2e:	2140      	movcs	r1, #64	; 0x40
{
    db30:	b570      	push	{r4, r5, r6, lr}
    db32:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    db34:	4c0c      	ldr	r4, [pc, #48]	; (db68 <bt_hex+0x40>)
    db36:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    db38:	42b0      	cmp	r0, r6
    db3a:	f103 0302 	add.w	r3, r3, #2
    db3e:	d104      	bne.n	db4a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    db40:	2300      	movs	r3, #0
    db42:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    db46:	4807      	ldr	r0, [pc, #28]	; (db64 <bt_hex+0x3c>)
    db48:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    db4a:	7802      	ldrb	r2, [r0, #0]
    db4c:	0912      	lsrs	r2, r2, #4
    db4e:	5ca2      	ldrb	r2, [r4, r2]
    db50:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    db54:	f810 2b01 	ldrb.w	r2, [r0], #1
    db58:	f002 020f 	and.w	r2, r2, #15
    db5c:	5ca2      	ldrb	r2, [r4, r2]
    db5e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    db62:	e7e9      	b.n	db38 <bt_hex+0x10>
    db64:	20009bd9 	.word	0x20009bd9
    db68:	0002191e 	.word	0x0002191e

0000db6c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    db6c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    db6e:	7803      	ldrb	r3, [r0, #0]
    db70:	b08b      	sub	sp, #44	; 0x2c
    db72:	4604      	mov	r4, r0
    db74:	ad07      	add	r5, sp, #28
    db76:	2b03      	cmp	r3, #3
    db78:	d821      	bhi.n	dbbe <bt_addr_le_str+0x52>
    db7a:	e8df f003 	tbb	[pc, r3]
    db7e:	1a02      	.short	0x1a02
    db80:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    db82:	4912      	ldr	r1, [pc, #72]	; (dbcc <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    db84:	4628      	mov	r0, r5
    db86:	f00f f889 	bl	1cc9c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    db8a:	9505      	str	r5, [sp, #20]
    db8c:	7863      	ldrb	r3, [r4, #1]
    db8e:	211e      	movs	r1, #30
    db90:	9304      	str	r3, [sp, #16]
    db92:	78a3      	ldrb	r3, [r4, #2]
    db94:	4a0e      	ldr	r2, [pc, #56]	; (dbd0 <bt_addr_le_str+0x64>)
    db96:	9303      	str	r3, [sp, #12]
    db98:	78e3      	ldrb	r3, [r4, #3]
    db9a:	480e      	ldr	r0, [pc, #56]	; (dbd4 <bt_addr_le_str+0x68>)
    db9c:	9302      	str	r3, [sp, #8]
    db9e:	7923      	ldrb	r3, [r4, #4]
    dba0:	9301      	str	r3, [sp, #4]
    dba2:	7963      	ldrb	r3, [r4, #5]
    dba4:	9300      	str	r3, [sp, #0]
    dba6:	79a3      	ldrb	r3, [r4, #6]
    dba8:	f00d fecb 	bl	1b942 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    dbac:	4809      	ldr	r0, [pc, #36]	; (dbd4 <bt_addr_le_str+0x68>)
    dbae:	b00b      	add	sp, #44	; 0x2c
    dbb0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    dbb2:	4909      	ldr	r1, [pc, #36]	; (dbd8 <bt_addr_le_str+0x6c>)
    dbb4:	e7e6      	b.n	db84 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    dbb6:	4909      	ldr	r1, [pc, #36]	; (dbdc <bt_addr_le_str+0x70>)
    dbb8:	e7e4      	b.n	db84 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    dbba:	4909      	ldr	r1, [pc, #36]	; (dbe0 <bt_addr_le_str+0x74>)
    dbbc:	e7e2      	b.n	db84 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dbbe:	210a      	movs	r1, #10
    dbc0:	4628      	mov	r0, r5
    dbc2:	4a08      	ldr	r2, [pc, #32]	; (dbe4 <bt_addr_le_str+0x78>)
    dbc4:	f00d febd 	bl	1b942 <snprintk>
		break;
    dbc8:	e7df      	b.n	db8a <bt_addr_le_str+0x1e>
    dbca:	bf00      	nop
    dbcc:	000218d9 	.word	0x000218d9
    dbd0:	000218fb 	.word	0x000218fb
    dbd4:	20009bbb 	.word	0x20009bbb
    dbd8:	000218e0 	.word	0x000218e0
    dbdc:	000218e7 	.word	0x000218e7
    dbe0:	000218f1 	.word	0x000218f1
    dbe4:	000228a4 	.word	0x000228a4

0000dbe8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    dbe8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dbea:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    dbec:	4d09      	ldr	r5, [pc, #36]	; (dc14 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dbee:	4b0a      	ldr	r3, [pc, #40]	; (dc18 <long_wq_init+0x30>)
{
    dbf0:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    dbf2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dbf4:	9302      	str	r3, [sp, #8]
    dbf6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    dbf8:	f00b f966 	bl	18ec8 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    dbfc:	ab02      	add	r3, sp, #8
    dbfe:	4628      	mov	r0, r5
    dc00:	9300      	str	r3, [sp, #0]
    dc02:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    dc06:	230a      	movs	r3, #10
    dc08:	4904      	ldr	r1, [pc, #16]	; (dc1c <long_wq_init+0x34>)
    dc0a:	f00b f977 	bl	18efc <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    dc0e:	4620      	mov	r0, r4
    dc10:	b005      	add	sp, #20
    dc12:	bd30      	pop	{r4, r5, pc}
    dc14:	20008fe8 	.word	0x20008fe8
    dc18:	0002192f 	.word	0x0002192f
    dc1c:	2000ac60 	.word	0x2000ac60

0000dc20 <bt_long_wq_schedule>:
{
    dc20:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    dc22:	4801      	ldr	r0, [pc, #4]	; (dc28 <bt_long_wq_schedule+0x8>)
    dc24:	f00b ba8c 	b.w	19140 <k_work_schedule_for_queue>
    dc28:	20008fe8 	.word	0x20008fe8

0000dc2c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    dc2c:	4603      	mov	r3, r0
    dc2e:	b430      	push	{r4, r5}
	switch (src->type) {
    dc30:	781a      	ldrb	r2, [r3, #0]
{
    dc32:	4608      	mov	r0, r1
	switch (src->type) {
    dc34:	2a01      	cmp	r2, #1
    dc36:	d013      	beq.n	dc60 <uuid_to_uuid128+0x34>
    dc38:	2a02      	cmp	r2, #2
    dc3a:	d026      	beq.n	dc8a <uuid_to_uuid128+0x5e>
    dc3c:	b972      	cbnz	r2, dc5c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    dc3e:	4a15      	ldr	r2, [pc, #84]	; (dc94 <uuid_to_uuid128+0x68>)
    dc40:	f102 0410 	add.w	r4, r2, #16
    dc44:	f852 5b04 	ldr.w	r5, [r2], #4
    dc48:	42a2      	cmp	r2, r4
    dc4a:	f841 5b04 	str.w	r5, [r1], #4
    dc4e:	d1f9      	bne.n	dc44 <uuid_to_uuid128+0x18>
    dc50:	7812      	ldrb	r2, [r2, #0]
    dc52:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    dc54:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    dc56:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    dc58:	0a1b      	lsrs	r3, r3, #8
    dc5a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    dc5c:	bc30      	pop	{r4, r5}
    dc5e:	4770      	bx	lr
		*dst = uuid128_base;
    dc60:	4a0c      	ldr	r2, [pc, #48]	; (dc94 <uuid_to_uuid128+0x68>)
    dc62:	f102 0410 	add.w	r4, r2, #16
    dc66:	f852 5b04 	ldr.w	r5, [r2], #4
    dc6a:	42a2      	cmp	r2, r4
    dc6c:	f841 5b04 	str.w	r5, [r1], #4
    dc70:	d1f9      	bne.n	dc66 <uuid_to_uuid128+0x3a>
    dc72:	7812      	ldrb	r2, [r2, #0]
    dc74:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    dc76:	685b      	ldr	r3, [r3, #4]
    dc78:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    dc7c:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    dc7e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dc80:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    dc82:	0a1b      	lsrs	r3, r3, #8
    dc84:	7382      	strb	r2, [r0, #14]
    dc86:	7403      	strb	r3, [r0, #16]
}
    dc88:	e7e8      	b.n	dc5c <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    dc8a:	2211      	movs	r2, #17
}
    dc8c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    dc8e:	4619      	mov	r1, r3
    dc90:	f00f b861 	b.w	1cd56 <memcpy>
    dc94:	00021938 	.word	0x00021938

0000dc98 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    dc98:	b538      	push	{r3, r4, r5, lr}
    dc9a:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dc9c:	2d01      	cmp	r5, #1
{
    dc9e:	4610      	mov	r0, r2
    dca0:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dca2:	d010      	beq.n	dcc6 <bt_buf_get_rx+0x2e>
    dca4:	2d03      	cmp	r5, #3
    dca6:	d01a      	beq.n	dcde <bt_buf_get_rx+0x46>
    dca8:	2d05      	cmp	r5, #5
    dcaa:	d018      	beq.n	dcde <bt_buf_get_rx+0x46>
    dcac:	490e      	ldr	r1, [pc, #56]	; (dce8 <bt_buf_get_rx+0x50>)
    dcae:	233f      	movs	r3, #63	; 0x3f
    dcb0:	4a0e      	ldr	r2, [pc, #56]	; (dcec <bt_buf_get_rx+0x54>)
    dcb2:	480f      	ldr	r0, [pc, #60]	; (dcf0 <bt_buf_get_rx+0x58>)
    dcb4:	f00e f840 	bl	1bd38 <assert_print>
    dcb8:	480e      	ldr	r0, [pc, #56]	; (dcf4 <bt_buf_get_rx+0x5c>)
    dcba:	f00e f83d 	bl	1bd38 <assert_print>
    dcbe:	213f      	movs	r1, #63	; 0x3f
    dcc0:	480a      	ldr	r0, [pc, #40]	; (dcec <bt_buf_get_rx+0x54>)
    dcc2:	f00e f832 	bl	1bd2a <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    dcc6:	480c      	ldr	r0, [pc, #48]	; (dcf8 <bt_buf_get_rx+0x60>)
    dcc8:	f010 f9e7 	bl	1e09a <net_buf_alloc_fixed>
    dccc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    dcce:	b120      	cbz	r0, dcda <bt_buf_get_rx+0x42>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    dcd0:	2101      	movs	r1, #1
    dcd2:	3008      	adds	r0, #8
    dcd4:	f005 fd74 	bl	137c0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    dcd8:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    dcda:	4620      	mov	r0, r4
    dcdc:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
    dcde:	4602      	mov	r2, r0
    dce0:	460b      	mov	r3, r1
    dce2:	4806      	ldr	r0, [pc, #24]	; (dcfc <bt_buf_get_rx+0x64>)
    dce4:	e7f0      	b.n	dcc8 <bt_buf_get_rx+0x30>
    dce6:	bf00      	nop
    dce8:	00021978 	.word	0x00021978
    dcec:	00021949 	.word	0x00021949
    dcf0:	000205a4 	.word	0x000205a4
    dcf4:	000219bd 	.word	0x000219bd
    dcf8:	20008668 	.word	0x20008668
    dcfc:	200085cc 	.word	0x200085cc

0000dd00 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    dd00:	b510      	push	{r4, lr}
    dd02:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    dd04:	490a      	ldr	r1, [pc, #40]	; (dd30 <bt_buf_get_cmd_complete+0x30>)
{
    dd06:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    dd08:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
    dd0c:	b920      	cbnz	r0, dd18 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    dd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dd12:	2001      	movs	r0, #1
    dd14:	f7ff bfc0 	b.w	dc98 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    dd18:	f005 feda 	bl	13ad0 <net_buf_ref>
    dd1c:	2101      	movs	r1, #1
		buf->len = 0U;
    dd1e:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
    dd20:	4604      	mov	r4, r0
    dd22:	7501      	strb	r1, [r0, #20]
		buf->len = 0U;
    dd24:	8183      	strh	r3, [r0, #12]
	net_buf_simple_reserve(&buf->b, reserve);
    dd26:	3008      	adds	r0, #8
    dd28:	f005 fd4a 	bl	137c0 <net_buf_simple_reserve>
}
    dd2c:	4620      	mov	r0, r4
    dd2e:	bd10      	pop	{r4, pc}
    dd30:	20008000 	.word	0x20008000

0000dd34 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    dd34:	b570      	push	{r4, r5, r6, lr}
    dd36:	4604      	mov	r4, r0
	switch (evt) {
    dd38:	2c0f      	cmp	r4, #15
{
    dd3a:	460d      	mov	r5, r1
    dd3c:	4610      	mov	r0, r2
    dd3e:	4619      	mov	r1, r3
	switch (evt) {
    dd40:	d805      	bhi.n	dd4e <bt_buf_get_evt+0x1a>
    dd42:	2c0d      	cmp	r4, #13
    dd44:	d90d      	bls.n	dd62 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    dd46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    dd4a:	f7ff bfd9 	b.w	dd00 <bt_buf_get_cmd_complete>
	switch (evt) {
    dd4e:	2c13      	cmp	r4, #19
    dd50:	d107      	bne.n	dd62 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    dd52:	480c      	ldr	r0, [pc, #48]	; (dd84 <bt_buf_get_evt+0x50>)
    dd54:	f010 f9a1 	bl	1e09a <net_buf_alloc_fixed>
			if (buf) {
    dd58:	4604      	mov	r4, r0
    dd5a:	b938      	cbnz	r0, dd6c <bt_buf_get_evt+0x38>
{
    dd5c:	2400      	movs	r4, #0
}
    dd5e:	4620      	mov	r0, r4
    dd60:	bd70      	pop	{r4, r5, r6, pc}
    dd62:	4602      	mov	r2, r0
    dd64:	460b      	mov	r3, r1
		if (discardable) {
    dd66:	b145      	cbz	r5, dd7a <bt_buf_get_evt+0x46>
    dd68:	4807      	ldr	r0, [pc, #28]	; (dd88 <bt_buf_get_evt+0x54>)
    dd6a:	e7f3      	b.n	dd54 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    dd6c:	2101      	movs	r1, #1
    dd6e:	3008      	adds	r0, #8
    dd70:	f005 fd26 	bl	137c0 <net_buf_simple_reserve>
    dd74:	2301      	movs	r3, #1
    dd76:	7523      	strb	r3, [r4, #20]
}
    dd78:	e7f1      	b.n	dd5e <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dd7a:	2001      	movs	r0, #1
}
    dd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dd80:	f7ff bf8a 	b.w	dc98 <bt_buf_get_rx>
    dd84:	20008704 	.word	0x20008704
    dd88:	20008634 	.word	0x20008634

0000dd8c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    dd8c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    dd8e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd90:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    dd94:	781b      	ldrb	r3, [r3, #0]
    dd96:	b963      	cbnz	r3, ddb2 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    dd98:	4620      	mov	r0, r4
    dd9a:	f002 fd41 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    dd9e:	4605      	mov	r5, r0
    dda0:	b940      	cbnz	r0, ddb4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    dda2:	4b08      	ldr	r3, [pc, #32]	; (ddc4 <hci_disconn_complete_prio+0x38>)
    dda4:	881a      	ldrh	r2, [r3, #0]
    dda6:	b922      	cbnz	r2, ddb2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    dda8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    ddac:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    ddb0:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    ddb2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    ddb4:	2101      	movs	r1, #1
    ddb6:	f002 fd3b 	bl	10830 <bt_conn_set_state>
	bt_conn_unref(conn);
    ddba:	4628      	mov	r0, r5
}
    ddbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ddc0:	f002 bcfe 	b.w	107c0 <bt_conn_unref>
    ddc4:	20009ba4 	.word	0x20009ba4

0000ddc8 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ddc8:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ddca:	4c08      	ldr	r4, [pc, #32]	; (ddec <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ddcc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ddce:	2205      	movs	r2, #5
    ddd0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    ddd4:	f002 ff9a 	bl	10d0c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
    ddd8:	b938      	cbnz	r0, ddea <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ddda:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    ddde:	2204      	movs	r2, #4

		return conn;
	}

	return NULL;
}
    dde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    dde4:	4902      	ldr	r1, [pc, #8]	; (ddf0 <find_pending_connect.part.0+0x28>)
    dde6:	f002 bf91 	b.w	10d0c <bt_conn_lookup_state_le>
}
    ddea:	bd10      	pop	{r4, pc}
    ddec:	20008000 	.word	0x20008000
    ddf0:	000218bf 	.word	0x000218bf

0000ddf4 <hci_data_buf_overflow>:
{
    ddf4:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    ddf6:	6883      	ldr	r3, [r0, #8]
{
    ddf8:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    ddfa:	b088      	sub	sp, #32
    ddfc:	466a      	mov	r2, sp
    ddfe:	781b      	ldrb	r3, [r3, #0]
    de00:	4906      	ldr	r1, [pc, #24]	; (de1c <hci_data_buf_overflow+0x28>)
    de02:	4807      	ldr	r0, [pc, #28]	; (de20 <hci_data_buf_overflow+0x2c>)
    de04:	e9c2 1305 	strd	r1, r3, [r2, #20]
    de08:	2303      	movs	r3, #3
    de0a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    de0e:	f842 3f10 	str.w	r3, [r2, #16]!
    de12:	f00f f82f 	bl	1ce74 <z_log_msg_static_create.constprop.0>
}
    de16:	46bd      	mov	sp, r7
    de18:	bd80      	pop	{r7, pc}
    de1a:	bf00      	nop
    de1c:	000219e4 	.word	0x000219e4
    de20:	0001f8d8 	.word	0x0001f8d8

0000de24 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    de24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		BT_ERR("Unable to allocate buffer");
    de26:	4b06      	ldr	r3, [pc, #24]	; (de40 <le_conn_param_neg_reply.part.0+0x1c>)
    de28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    de2c:	9305      	str	r3, [sp, #20]
    de2e:	2302      	movs	r3, #2
    de30:	4804      	ldr	r0, [pc, #16]	; (de44 <le_conn_param_neg_reply.part.0+0x20>)
    de32:	aa04      	add	r2, sp, #16
    de34:	9304      	str	r3, [sp, #16]
    de36:	f00f f81d 	bl	1ce74 <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    de3a:	b007      	add	sp, #28
    de3c:	f85d fb04 	ldr.w	pc, [sp], #4
    de40:	00021a0c 	.word	0x00021a0c
    de44:	0001f8d8 	.word	0x0001f8d8

0000de48 <le_conn_update_complete>:

	bt_conn_unref(conn);
}

static void le_conn_update_complete(struct net_buf *buf)
{
    de48:	b5f0      	push	{r4, r5, r6, r7, lr}
    de4a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    de4c:	6885      	ldr	r5, [r0, #8]
{
    de4e:	af00      	add	r7, sp, #0
	struct bt_conn *conn;
	uint16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    de50:	f8b5 6001 	ldrh.w	r6, [r5, #1]

	BT_DBG("status 0x%02x, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    de54:	4630      	mov	r0, r6
    de56:	f002 fce3 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    de5a:	4604      	mov	r4, r0
    de5c:	b988      	cbnz	r0, de82 <le_conn_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    de5e:	466c      	mov	r4, sp
    de60:	b088      	sub	sp, #32
    de62:	466a      	mov	r2, sp
    de64:	4b1c      	ldr	r3, [pc, #112]	; (ded8 <le_conn_update_complete+0x90>)
    de66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    de6a:	e9c2 3605 	strd	r3, r6, [r2, #20]
    de6e:	2303      	movs	r3, #3
    de70:	481a      	ldr	r0, [pc, #104]	; (dedc <le_conn_update_complete+0x94>)
    de72:	f842 3f10 	str.w	r3, [r2, #16]!
    de76:	f00e fffd 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    de7a:	46a5      	mov	sp, r4

		bt_l2cap_update_conn_param(conn, &param);
	}

	bt_conn_unref(conn);
}
    de7c:	370c      	adds	r7, #12
    de7e:	46bd      	mov	sp, r7
    de80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
    de82:	782b      	ldrb	r3, [r5, #0]
    de84:	b98b      	cbnz	r3, deaa <le_conn_update_complete+0x62>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    de86:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    de8a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    de8e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    de92:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    de96:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    de9a:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
    de9e:	f002 fe1b 	bl	10ad8 <notify_le_param_updated>
	bt_conn_unref(conn);
    dea2:	4620      	mov	r0, r4
    dea4:	f002 fc8c 	bl	107c0 <bt_conn_unref>
    dea8:	e7e8      	b.n	de7c <le_conn_update_complete+0x34>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    deaa:	2b1a      	cmp	r3, #26
    deac:	d1f9      	bne.n	dea2 <le_conn_update_complete+0x5a>
    deae:	78c3      	ldrb	r3, [r0, #3]
    deb0:	2b01      	cmp	r3, #1
    deb2:	d1f6      	bne.n	dea2 <le_conn_update_complete+0x5a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    deb4:	f44f 7100 	mov.w	r1, #512	; 0x200
    deb8:	3004      	adds	r0, #4
    deba:	f00e ffd0 	bl	1ce5e <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    debe:	0583      	lsls	r3, r0, #22
    dec0:	d4ef      	bmi.n	dea2 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    dec2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    dec6:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    dec8:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    deca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
    dece:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    ded0:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    ded2:	f003 fa01 	bl	112d8 <bt_l2cap_update_conn_param>
    ded6:	e7e4      	b.n	dea2 <le_conn_update_complete+0x5a>
    ded8:	00021a26 	.word	0x00021a26
    dedc:	0001f8d8 	.word	0x0001f8d8

0000dee0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    dee0:	b598      	push	{r3, r4, r7, lr}
    dee2:	4601      	mov	r1, r0
    dee4:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    dee6:	480d      	ldr	r0, [pc, #52]	; (df1c <rx_queue_put+0x3c>)
    dee8:	f005 fc90 	bl	1380c <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    deec:	490c      	ldr	r1, [pc, #48]	; (df20 <rx_queue_put+0x40>)
    deee:	480d      	ldr	r0, [pc, #52]	; (df24 <rx_queue_put+0x44>)
    def0:	f011 f960 	bl	1f1b4 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    def4:	2800      	cmp	r0, #0
    def6:	da0e      	bge.n	df16 <rx_queue_put+0x36>
		BT_ERR("Could not submit rx_work: %d", err);
    def8:	466c      	mov	r4, sp
    defa:	b088      	sub	sp, #32
    defc:	466a      	mov	r2, sp
    defe:	4b0a      	ldr	r3, [pc, #40]	; (df28 <rx_queue_put+0x48>)
    df00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df04:	e9c2 3005 	strd	r3, r0, [r2, #20]
    df08:	2303      	movs	r3, #3
    df0a:	4808      	ldr	r0, [pc, #32]	; (df2c <rx_queue_put+0x4c>)
    df0c:	f842 3f10 	str.w	r3, [r2, #16]!
    df10:	f00e ffb0 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    df14:	46a5      	mov	sp, r4
	}
}
    df16:	46bd      	mov	sp, r7
    df18:	bd98      	pop	{r3, r4, r7, pc}
    df1a:	bf00      	nop
    df1c:	20008134 	.word	0x20008134
    df20:	200081f8 	.word	0x200081f8
    df24:	20009118 	.word	0x20009118
    df28:	00021a4a 	.word	0x00021a4a
    df2c:	0001f8d8 	.word	0x0001f8d8

0000df30 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    df30:	460b      	mov	r3, r1
    df32:	b5b0      	push	{r4, r5, r7, lr}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    df34:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    df36:	af00      	add	r7, sp, #0
    df38:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    df3a:	4629      	mov	r1, r5
    df3c:	6898      	ldr	r0, [r3, #8]
    df3e:	f7ff fdf3 	bl	db28 <bt_hex>
    df42:	b08a      	sub	sp, #40	; 0x28
    df44:	466a      	mov	r2, sp
    df46:	4b09      	ldr	r3, [pc, #36]	; (df6c <handle_event.part.0+0x3c>)
    df48:	e9c2 5007 	strd	r5, r0, [r2, #28]
    df4c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    df50:	f240 4302 	movw	r3, #1026	; 0x402
    df54:	8493      	strh	r3, [r2, #36]	; 0x24
    df56:	4b06      	ldr	r3, [pc, #24]	; (df70 <handle_event.part.0+0x40>)
    df58:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    df5c:	4805      	ldr	r0, [pc, #20]	; (df74 <handle_event.part.0+0x44>)
    df5e:	f842 3f10 	str.w	r3, [r2, #16]!
    df62:	f00e ff87 	bl	1ce74 <z_log_msg_static_create.constprop.0>
}
    df66:	46bd      	mov	sp, r7
    df68:	bdb0      	pop	{r4, r5, r7, pc}
    df6a:	bf00      	nop
    df6c:	00021a67 	.word	0x00021a67
    df70:	01000005 	.word	0x01000005
    df74:	0001f8d8 	.word	0x0001f8d8

0000df78 <hci_hardware_error>:
{
    df78:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    df7a:	2101      	movs	r1, #1
    df7c:	af00      	add	r7, sp, #0
    df7e:	3008      	adds	r0, #8
    df80:	f005 fe66 	bl	13c50 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    df84:	b088      	sub	sp, #32
    df86:	466a      	mov	r2, sp
    df88:	7803      	ldrb	r3, [r0, #0]
    df8a:	4906      	ldr	r1, [pc, #24]	; (dfa4 <hci_hardware_error+0x2c>)
    df8c:	4806      	ldr	r0, [pc, #24]	; (dfa8 <hci_hardware_error+0x30>)
    df8e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    df92:	2303      	movs	r3, #3
    df94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df98:	f842 3f10 	str.w	r3, [r2, #16]!
    df9c:	f00e ff6a 	bl	1ce74 <z_log_msg_static_create.constprop.0>
}
    dfa0:	46bd      	mov	sp, r7
    dfa2:	bd80      	pop	{r7, pc}
    dfa4:	00021a89 	.word	0x00021a89
    dfa8:	0001f8d8 	.word	0x0001f8d8

0000dfac <le_data_len_change>:
{
    dfac:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dfae:	6883      	ldr	r3, [r0, #8]
{
    dfb0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dfb2:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    dfb4:	4620      	mov	r0, r4
    dfb6:	f002 fc33 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    dfba:	b980      	cbnz	r0, dfde <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dfbc:	466d      	mov	r5, sp
    dfbe:	b088      	sub	sp, #32
    dfc0:	466a      	mov	r2, sp
    dfc2:	4b08      	ldr	r3, [pc, #32]	; (dfe4 <le_data_len_change+0x38>)
    dfc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dfc8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dfcc:	2303      	movs	r3, #3
    dfce:	4806      	ldr	r0, [pc, #24]	; (dfe8 <le_data_len_change+0x3c>)
    dfd0:	f842 3f10 	str.w	r3, [r2, #16]!
    dfd4:	f00e ff4e 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    dfd8:	46ad      	mov	sp, r5
}
    dfda:	46bd      	mov	sp, r7
    dfdc:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    dfde:	f002 fbef 	bl	107c0 <bt_conn_unref>
    dfe2:	e7fa      	b.n	dfda <le_data_len_change+0x2e>
    dfe4:	00021a26 	.word	0x00021a26
    dfe8:	0001f8d8 	.word	0x0001f8d8

0000dfec <le_phy_update_complete>:
{
    dfec:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dfee:	6883      	ldr	r3, [r0, #8]
{
    dff0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dff2:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    dff6:	4620      	mov	r0, r4
    dff8:	f002 fc12 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    dffc:	b980      	cbnz	r0, e020 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dffe:	466d      	mov	r5, sp
    e000:	b088      	sub	sp, #32
    e002:	466a      	mov	r2, sp
    e004:	4b08      	ldr	r3, [pc, #32]	; (e028 <le_phy_update_complete+0x3c>)
    e006:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e00a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e00e:	2303      	movs	r3, #3
    e010:	4806      	ldr	r0, [pc, #24]	; (e02c <le_phy_update_complete+0x40>)
    e012:	f842 3f10 	str.w	r3, [r2, #16]!
    e016:	f00e ff2d 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e01a:	46ad      	mov	sp, r5
}
    e01c:	46bd      	mov	sp, r7
    e01e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    e020:	f002 fbce 	bl	107c0 <bt_conn_unref>
    e024:	e7fa      	b.n	e01c <le_phy_update_complete+0x30>
    e026:	bf00      	nop
    e028:	00021a26 	.word	0x00021a26
    e02c:	0001f8d8 	.word	0x0001f8d8

0000e030 <hci_disconn_complete>:
{
    e030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e034:	6885      	ldr	r5, [r0, #8]
{
    e036:	af00      	add	r7, sp, #0
	if (evt->status) {
    e038:	782e      	ldrb	r6, [r5, #0]
    e03a:	b9ae      	cbnz	r6, e068 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e03c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e040:	4640      	mov	r0, r8
    e042:	f002 fbed 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    e046:	4604      	mov	r4, r0
    e048:	b988      	cbnz	r0, e06e <hci_disconn_complete+0x3e>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e04a:	466c      	mov	r4, sp
    e04c:	b088      	sub	sp, #32
    e04e:	466a      	mov	r2, sp
    e050:	4b0b      	ldr	r3, [pc, #44]	; (e080 <hci_disconn_complete+0x50>)
    e052:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e056:	e9c2 3805 	strd	r3, r8, [r2, #20]
    e05a:	2303      	movs	r3, #3
    e05c:	4809      	ldr	r0, [pc, #36]	; (e084 <hci_disconn_complete+0x54>)
    e05e:	f842 3f10 	str.w	r3, [r2, #16]!
    e062:	f00e ff07 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e066:	46a5      	mov	sp, r4
}
    e068:	46bd      	mov	sp, r7
    e06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    e06e:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e070:	4631      	mov	r1, r6
	conn->err = evt->reason;
    e072:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e074:	f002 fbdc 	bl	10830 <bt_conn_set_state>
		bt_conn_unref(conn);
    e078:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    e07a:	f002 fba1 	bl	107c0 <bt_conn_unref>
    e07e:	e7f3      	b.n	e068 <hci_disconn_complete+0x38>
    e080:	00021aab 	.word	0x00021aab
    e084:	0001f8d8 	.word	0x0001f8d8

0000e088 <handle_event>:
{
    e088:	b5b0      	push	{r4, r5, r7, lr}
    e08a:	4604      	mov	r4, r0
    e08c:	af00      	add	r7, sp, #0
    e08e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    e092:	4293      	cmp	r3, r2
    e094:	d103      	bne.n	e09e <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    e096:	4620      	mov	r0, r4
    e098:	f7ff ff4a 	bl	df30 <handle_event.part.0>
}
    e09c:	e018      	b.n	e0d0 <handle_event+0x48>
		if (handler->event != event) {
    e09e:	4610      	mov	r0, r2
    e0a0:	f810 5b08 	ldrb.w	r5, [r0], #8
    e0a4:	42a5      	cmp	r5, r4
    e0a6:	d119      	bne.n	e0dc <handle_event+0x54>
		if (buf->len < handler->min_len) {
    e0a8:	898b      	ldrh	r3, [r1, #12]
    e0aa:	7850      	ldrb	r0, [r2, #1]
    e0ac:	4298      	cmp	r0, r3
    e0ae:	d911      	bls.n	e0d4 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e0b0:	466d      	mov	r5, sp
    e0b2:	b088      	sub	sp, #32
    e0b4:	466a      	mov	r2, sp
    e0b6:	490a      	ldr	r1, [pc, #40]	; (e0e0 <handle_event+0x58>)
    e0b8:	61d4      	str	r4, [r2, #28]
    e0ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
    e0be:	2304      	movs	r3, #4
    e0c0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e0c4:	4807      	ldr	r0, [pc, #28]	; (e0e4 <handle_event+0x5c>)
    e0c6:	f842 3f10 	str.w	r3, [r2, #16]!
    e0ca:	f00e fed3 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e0ce:	46ad      	mov	sp, r5
}
    e0d0:	46bd      	mov	sp, r7
    e0d2:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    e0d4:	4608      	mov	r0, r1
    e0d6:	6853      	ldr	r3, [r2, #4]
    e0d8:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    e0da:	e7f9      	b.n	e0d0 <handle_event+0x48>
    e0dc:	4602      	mov	r2, r0
    e0de:	e7d8      	b.n	e092 <handle_event+0xa>
    e0e0:	00021ad1 	.word	0x00021ad1
    e0e4:	0001f8d8 	.word	0x0001f8d8

0000e0e8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    e0ea:	4855      	ldr	r0, [pc, #340]	; (e240 <rx_work_handler+0x158>)
{
    e0ec:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    e0ee:	f005 fbfd 	bl	138ec <net_buf_slist_get>
	if (!buf) {
    e0f2:	4604      	mov	r4, r0
    e0f4:	2800      	cmp	r0, #0
    e0f6:	d06a      	beq.n	e1ce <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e0f8:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    e0fa:	2b01      	cmp	r3, #1
    e0fc:	d069      	beq.n	e1d2 <rx_work_handler+0xea>
    e0fe:	2b03      	cmp	r3, #3
    e100:	f040 8099 	bne.w	e236 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e104:	8983      	ldrh	r3, [r0, #12]
    e106:	2b03      	cmp	r3, #3
    e108:	d80c      	bhi.n	e124 <rx_work_handler+0x3c>
    e10a:	f240 13ed 	movw	r3, #493	; 0x1ed
    e10e:	4a4d      	ldr	r2, [pc, #308]	; (e244 <rx_work_handler+0x15c>)
    e110:	494d      	ldr	r1, [pc, #308]	; (e248 <rx_work_handler+0x160>)
    e112:	484e      	ldr	r0, [pc, #312]	; (e24c <rx_work_handler+0x164>)
    e114:	f00d fe10 	bl	1bd38 <assert_print>
    e118:	4040      	eors	r0, r0
    e11a:	f380 8811 	msr	BASEPRI, r0
    e11e:	f04f 0003 	mov.w	r0, #3
    e122:	df02      	svc	2
    e124:	2104      	movs	r1, #4
    e126:	f104 0008 	add.w	r0, r4, #8
    e12a:	f005 fd91 	bl	13c50 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e12e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    e130:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    e132:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    e134:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    e136:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    e13a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    e13c:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e13e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    e140:	d010      	beq.n	e164 <rx_work_handler+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    e142:	466d      	mov	r5, sp
    e144:	b088      	sub	sp, #32
    e146:	466a      	mov	r2, sp
    e148:	4841      	ldr	r0, [pc, #260]	; (e250 <rx_work_handler+0x168>)
    e14a:	61d3      	str	r3, [r2, #28]
    e14c:	2304      	movs	r3, #4
    e14e:	e9c2 0105 	strd	r0, r1, [r2, #20]
    e152:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e156:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e15a:	483e      	ldr	r0, [pc, #248]	; (e254 <rx_work_handler+0x16c>)
    e15c:	f00e fe8a 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e160:	46ad      	mov	sp, r5
    e162:	e064      	b.n	e22e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    e164:	f002 fb5c 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    e168:	4605      	mov	r5, r0
    e16a:	b960      	cbnz	r0, e186 <rx_work_handler+0x9e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    e16c:	466d      	mov	r5, sp
    e16e:	b088      	sub	sp, #32
    e170:	8ae3      	ldrh	r3, [r4, #22]
    e172:	466a      	mov	r2, sp
    e174:	4938      	ldr	r1, [pc, #224]	; (e258 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
    e176:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e17a:	2303      	movs	r3, #3
    e17c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e180:	f842 3f10 	str.w	r3, [r2, #16]!
    e184:	e7e9      	b.n	e15a <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
    e186:	f002 fc43 	bl	10a10 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    e18a:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    e18c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    e18e:	0b32      	lsrs	r2, r6, #12
    e190:	4628      	mov	r0, r5
    e192:	f002 f9af 	bl	104f4 <bt_conn_recv>
	bt_conn_unref(conn);
    e196:	4628      	mov	r0, r5
    e198:	f002 fb12 	bl	107c0 <bt_conn_unref>
	return list->head;
    e19c:	4b2f      	ldr	r3, [pc, #188]	; (e25c <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    e19e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    e1a2:	b1a3      	cbz	r3, e1ce <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    e1a4:	492e      	ldr	r1, [pc, #184]	; (e260 <rx_work_handler+0x178>)
    e1a6:	482f      	ldr	r0, [pc, #188]	; (e264 <rx_work_handler+0x17c>)
    e1a8:	f011 f804 	bl	1f1b4 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    e1ac:	2800      	cmp	r0, #0
    e1ae:	da0e      	bge.n	e1ce <rx_work_handler+0xe6>
			BT_ERR("Could not submit rx_work: %d", err);
    e1b0:	466c      	mov	r4, sp
    e1b2:	b088      	sub	sp, #32
    e1b4:	466a      	mov	r2, sp
    e1b6:	4b2c      	ldr	r3, [pc, #176]	; (e268 <rx_work_handler+0x180>)
    e1b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e1bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e1c0:	2303      	movs	r3, #3
    e1c2:	4824      	ldr	r0, [pc, #144]	; (e254 <rx_work_handler+0x16c>)
    e1c4:	f842 3f10 	str.w	r3, [r2, #16]!
    e1c8:	f00e fe54 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e1cc:	46a5      	mov	sp, r4
		}
	}
}
    e1ce:	46bd      	mov	sp, r7
    e1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e1d2:	8983      	ldrh	r3, [r0, #12]
    e1d4:	2b01      	cmp	r3, #1
    e1d6:	d80c      	bhi.n	e1f2 <rx_work_handler+0x10a>
    e1d8:	f44f 6316 	mov.w	r3, #2400	; 0x960
    e1dc:	4a19      	ldr	r2, [pc, #100]	; (e244 <rx_work_handler+0x15c>)
    e1de:	491a      	ldr	r1, [pc, #104]	; (e248 <rx_work_handler+0x160>)
    e1e0:	481a      	ldr	r0, [pc, #104]	; (e24c <rx_work_handler+0x164>)
    e1e2:	f00d fda9 	bl	1bd38 <assert_print>
    e1e6:	4040      	eors	r0, r0
    e1e8:	f380 8811 	msr	BASEPRI, r0
    e1ec:	f04f 0003 	mov.w	r0, #3
    e1f0:	df02      	svc	2
    e1f2:	2102      	movs	r1, #2
    e1f4:	f104 0008 	add.w	r0, r4, #8
    e1f8:	f005 fd2a 	bl	13c50 <net_buf_simple_pull_mem>
    e1fc:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e1fe:	7800      	ldrb	r0, [r0, #0]
    e200:	f00e fe17 	bl	1ce32 <bt_hci_evt_get_flags>
    e204:	0783      	lsls	r3, r0, #30
    e206:	d40c      	bmi.n	e222 <rx_work_handler+0x13a>
    e208:	f640 1364 	movw	r3, #2404	; 0x964
    e20c:	4a0d      	ldr	r2, [pc, #52]	; (e244 <rx_work_handler+0x15c>)
    e20e:	4917      	ldr	r1, [pc, #92]	; (e26c <rx_work_handler+0x184>)
    e210:	480e      	ldr	r0, [pc, #56]	; (e24c <rx_work_handler+0x164>)
    e212:	f00d fd91 	bl	1bd38 <assert_print>
    e216:	4040      	eors	r0, r0
    e218:	f380 8811 	msr	BASEPRI, r0
    e21c:	f04f 0003 	mov.w	r0, #3
    e220:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    e222:	2304      	movs	r3, #4
    e224:	4621      	mov	r1, r4
    e226:	4a12      	ldr	r2, [pc, #72]	; (e270 <rx_work_handler+0x188>)
    e228:	7828      	ldrb	r0, [r5, #0]
    e22a:	f7ff ff2d 	bl	e088 <handle_event>
		net_buf_unref(buf);
    e22e:	4620      	mov	r0, r4
    e230:	f005 fc0a 	bl	13a48 <net_buf_unref>
		break;
    e234:	e7b2      	b.n	e19c <rx_work_handler+0xb4>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e236:	466d      	mov	r5, sp
    e238:	b088      	sub	sp, #32
    e23a:	466a      	mov	r2, sp
    e23c:	490d      	ldr	r1, [pc, #52]	; (e274 <rx_work_handler+0x18c>)
    e23e:	e79a      	b.n	e176 <rx_work_handler+0x8e>
    e240:	20008134 	.word	0x20008134
    e244:	00021af3 	.word	0x00021af3
    e248:	00021b27 	.word	0x00021b27
    e24c:	000205a4 	.word	0x000205a4
    e250:	00021b40 	.word	0x00021b40
    e254:	0001f8d8 	.word	0x0001f8d8
    e258:	00021b64 	.word	0x00021b64
    e25c:	20008000 	.word	0x20008000
    e260:	200081f8 	.word	0x200081f8
    e264:	20009118 	.word	0x20009118
    e268:	00021a4a 	.word	0x00021a4a
    e26c:	00021b86 	.word	0x00021b86
    e270:	0001fd20 	.word	0x0001fd20
    e274:	00021bb4 	.word	0x00021bb4

0000e278 <hci_le_meta_event>:
{
    e278:	b510      	push	{r4, lr}
    e27a:	2101      	movs	r1, #1
    e27c:	4604      	mov	r4, r0
    e27e:	3008      	adds	r0, #8
    e280:	f005 fce6 	bl	13c50 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e284:	4621      	mov	r1, r4
}
    e286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e28a:	2307      	movs	r3, #7
    e28c:	4a01      	ldr	r2, [pc, #4]	; (e294 <hci_le_meta_event+0x1c>)
    e28e:	7800      	ldrb	r0, [r0, #0]
    e290:	f7ff befa 	b.w	e088 <handle_event>
    e294:	0001fd40 	.word	0x0001fd40

0000e298 <le_remote_feat_complete>:
{
    e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    e29a:	6885      	ldr	r5, [r0, #8]
{
    e29c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e29e:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e2a2:	4630      	mov	r0, r6
    e2a4:	f002 fabc 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    e2a8:	4604      	mov	r4, r0
    e2aa:	b980      	cbnz	r0, e2ce <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e2ac:	466c      	mov	r4, sp
    e2ae:	b088      	sub	sp, #32
    e2b0:	466a      	mov	r2, sp
    e2b2:	4b0f      	ldr	r3, [pc, #60]	; (e2f0 <le_remote_feat_complete+0x58>)
    e2b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e2b8:	e9c2 3605 	strd	r3, r6, [r2, #20]
    e2bc:	2303      	movs	r3, #3
    e2be:	480d      	ldr	r0, [pc, #52]	; (e2f4 <le_remote_feat_complete+0x5c>)
    e2c0:	f842 3f10 	str.w	r3, [r2, #16]!
    e2c4:	f00e fdd6 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e2c8:	46a5      	mov	sp, r4
}
    e2ca:	46bd      	mov	sp, r7
    e2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    e2ce:	782b      	ldrb	r3, [r5, #0]
    e2d0:	b923      	cbnz	r3, e2dc <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    e2d2:	2208      	movs	r2, #8
    e2d4:	1ce9      	adds	r1, r5, #3
    e2d6:	30b4      	adds	r0, #180	; 0xb4
    e2d8:	f00e fd3d 	bl	1cd56 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e2dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e2e0:	1d20      	adds	r0, r4, #4
    e2e2:	f00e fdbc 	bl	1ce5e <atomic_or>
	bt_conn_unref(conn);
    e2e6:	4620      	mov	r0, r4
    e2e8:	f002 fa6a 	bl	107c0 <bt_conn_unref>
    e2ec:	e7ed      	b.n	e2ca <le_remote_feat_complete+0x32>
    e2ee:	bf00      	nop
    e2f0:	00021a26 	.word	0x00021a26
    e2f4:	0001f8d8 	.word	0x0001f8d8

0000e2f8 <hci_cmd_done>:
{
    e2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e2fc:	4606      	mov	r6, r0
    e2fe:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e300:	7990      	ldrb	r0, [r2, #6]
{
    e302:	4688      	mov	r8, r1
    e304:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e306:	f005 f905 	bl	13514 <net_buf_pool_get>
    e30a:	4d41      	ldr	r5, [pc, #260]	; (e410 <hci_cmd_done+0x118>)
    e30c:	4285      	cmp	r5, r0
    e30e:	d018      	beq.n	e342 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    e310:	79a4      	ldrb	r4, [r4, #6]
    e312:	46e8      	mov	r8, sp
    e314:	4620      	mov	r0, r4
    e316:	f005 f8fd 	bl	13514 <net_buf_pool_get>
    e31a:	b08a      	sub	sp, #40	; 0x28
    e31c:	466a      	mov	r2, sp
    e31e:	4b3d      	ldr	r3, [pc, #244]	; (e414 <hci_cmd_done+0x11c>)
    e320:	e9c2 4007 	strd	r4, r0, [r2, #28]
    e324:	e9c2 3605 	strd	r3, r6, [r2, #20]
    e328:	2306      	movs	r3, #6
    e32a:	6255      	str	r5, [r2, #36]	; 0x24
    e32c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    e330:	4839      	ldr	r0, [pc, #228]	; (e418 <hci_cmd_done+0x120>)
    e332:	f842 3f10 	str.w	r3, [r2, #16]!
    e336:	f00e fd9d 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e33a:	46c5      	mov	sp, r8
}
    e33c:	46bd      	mov	sp, r7
    e33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    e342:	4620      	mov	r0, r4
    e344:	f005 f8ee 	bl	13524 <net_buf_id>
    e348:	f04f 090c 	mov.w	r9, #12
    e34c:	4d33      	ldr	r5, [pc, #204]	; (e41c <hci_cmd_done+0x124>)
    e34e:	fb09 5000 	mla	r0, r9, r0, r5
    e352:	8843      	ldrh	r3, [r0, #2]
    e354:	42b3      	cmp	r3, r6
    e356:	d016      	beq.n	e386 <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    e358:	4620      	mov	r0, r4
    e35a:	f005 f8e3 	bl	13524 <net_buf_id>
    e35e:	fb09 5000 	mla	r0, r9, r0, r5
    e362:	466c      	mov	r4, sp
    e364:	b088      	sub	sp, #32
    e366:	466a      	mov	r2, sp
    e368:	8843      	ldrh	r3, [r0, #2]
    e36a:	61d3      	str	r3, [r2, #28]
    e36c:	2304      	movs	r3, #4
    e36e:	492c      	ldr	r1, [pc, #176]	; (e420 <hci_cmd_done+0x128>)
    e370:	4829      	ldr	r0, [pc, #164]	; (e418 <hci_cmd_done+0x120>)
    e372:	e9c2 1605 	strd	r1, r6, [r2, #20]
    e376:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    e37a:	f842 3f10 	str.w	r3, [r2, #16]!
    e37e:	f00e fd79 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e382:	46a5      	mov	sp, r4
		return;
    e384:	e7da      	b.n	e33c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
    e386:	4e27      	ldr	r6, [pc, #156]	; (e424 <hci_cmd_done+0x12c>)
    e388:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
    e38c:	b120      	cbz	r0, e398 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
    e38e:	f005 fb5b 	bl	13a48 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e392:	2300      	movs	r3, #0
    e394:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    e398:	4620      	mov	r0, r4
    e39a:	f005 f8c3 	bl	13524 <net_buf_id>
    e39e:	260c      	movs	r6, #12
    e3a0:	fb06 5000 	mla	r0, r6, r0, r5
    e3a4:	6843      	ldr	r3, [r0, #4]
    e3a6:	b1ab      	cbz	r3, e3d4 <hci_cmd_done+0xdc>
    e3a8:	f1b8 0f00 	cmp.w	r8, #0
    e3ac:	d112      	bne.n	e3d4 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e3ae:	4620      	mov	r0, r4
    e3b0:	f005 f8b8 	bl	13524 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    e3b4:	2101      	movs	r1, #1
    e3b6:	fb06 5000 	mla	r0, r6, r0, r5
    e3ba:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e3bc:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    e3c0:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    e3c2:	f003 061f 	and.w	r6, r3, #31
    e3c6:	40b1      	lsls	r1, r6
	if (val) {
    e3c8:	095b      	lsrs	r3, r3, #5
    e3ca:	b1da      	cbz	r2, e404 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e3cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e3d0:	f00e fd45 	bl	1ce5e <atomic_or>
	if (cmd(buf)->sync) {
    e3d4:	4620      	mov	r0, r4
    e3d6:	f005 f8a5 	bl	13524 <net_buf_id>
    e3da:	260c      	movs	r6, #12
    e3dc:	fb06 5000 	mla	r0, r6, r0, r5
    e3e0:	6883      	ldr	r3, [r0, #8]
    e3e2:	2b00      	cmp	r3, #0
    e3e4:	d0aa      	beq.n	e33c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    e3e6:	4620      	mov	r0, r4
    e3e8:	f005 f89c 	bl	13524 <net_buf_id>
    e3ec:	4370      	muls	r0, r6
    e3ee:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    e3f2:	4620      	mov	r0, r4
    e3f4:	f005 f896 	bl	13524 <net_buf_id>
    e3f8:	fb06 5500 	mla	r5, r6, r0, r5
    e3fc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    e3fe:	f00a f9ef 	bl	187e0 <z_impl_k_sem_give>
}
    e402:	e79b      	b.n	e33c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e404:	43c9      	mvns	r1, r1
    e406:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e40a:	f00e fd36 	bl	1ce7a <atomic_and.isra.0>
    e40e:	e7e1      	b.n	e3d4 <hci_cmd_done+0xdc>
    e410:	200086d0 	.word	0x200086d0
    e414:	00021bc8 	.word	0x00021bc8
    e418:	0001f8d8 	.word	0x0001f8d8
    e41c:	20009714 	.word	0x20009714
    e420:	00021bfd 	.word	0x00021bfd
    e424:	20008000 	.word	0x20008000

0000e428 <hci_cmd_status>:
{
    e428:	b538      	push	{r3, r4, r5, lr}
    e42a:	2104      	movs	r1, #4
    e42c:	4604      	mov	r4, r0
    e42e:	3008      	adds	r0, #8
    e430:	f005 fc0e 	bl	13c50 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e434:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e436:	7801      	ldrb	r1, [r0, #0]
    e438:	4622      	mov	r2, r4
    e43a:	8840      	ldrh	r0, [r0, #2]
    e43c:	f7ff ff5c 	bl	e2f8 <hci_cmd_done>
	if (ncmd) {
    e440:	b125      	cbz	r5, e44c <hci_cmd_status+0x24>
}
    e442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    e446:	4802      	ldr	r0, [pc, #8]	; (e450 <hci_cmd_status+0x28>)
    e448:	f00a b9ca 	b.w	187e0 <z_impl_k_sem_give>
    e44c:	bd38      	pop	{r3, r4, r5, pc}
    e44e:	bf00      	nop
    e450:	20008118 	.word	0x20008118

0000e454 <hci_cmd_complete>:
{
    e454:	b538      	push	{r3, r4, r5, lr}
    e456:	2103      	movs	r1, #3
    e458:	4604      	mov	r4, r0
    e45a:	3008      	adds	r0, #8
    e45c:	f005 fbf8 	bl	13c50 <net_buf_simple_pull_mem>
	status = buf->data[0];
    e460:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    e462:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    e464:	4622      	mov	r2, r4
    e466:	7819      	ldrb	r1, [r3, #0]
    e468:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e46c:	f7ff ff44 	bl	e2f8 <hci_cmd_done>
	if (ncmd) {
    e470:	b125      	cbz	r5, e47c <hci_cmd_complete+0x28>
}
    e472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e476:	4802      	ldr	r0, [pc, #8]	; (e480 <hci_cmd_complete+0x2c>)
    e478:	f00a b9b2 	b.w	187e0 <z_impl_k_sem_give>
    e47c:	bd38      	pop	{r3, r4, r5, pc}
    e47e:	bf00      	nop
    e480:	20008118 	.word	0x20008118

0000e484 <hci_num_completed_packets>:
{
    e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    e488:	2500      	movs	r5, #0
{
    e48a:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
    e48c:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    e48e:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    e492:	f8df a0fc 	ldr.w	sl, [pc, #252]	; e590 <hci_num_completed_packets+0x10c>
{
    e496:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
    e498:	f898 3000 	ldrb.w	r3, [r8]
    e49c:	429d      	cmp	r5, r3
    e49e:	db03      	blt.n	e4a8 <hci_num_completed_packets+0x24>
}
    e4a0:	371c      	adds	r7, #28
    e4a2:	46bd      	mov	sp, r7
    e4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    e4a8:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    e4ac:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    e4b0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    e4b4:	4658      	mov	r0, fp
    e4b6:	f002 f9b3 	bl	10820 <bt_conn_lookup_handle>
		if (!conn) {
    e4ba:	4604      	mov	r4, r0
    e4bc:	b1d8      	cbz	r0, e4f6 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    e4be:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    e4c2:	2e00      	cmp	r6, #0
    e4c4:	d039      	beq.n	e53a <hci_num_completed_packets+0xb6>
	__asm__ volatile(
    e4c6:	f04f 0320 	mov.w	r3, #32
    e4ca:	f3ef 8211 	mrs	r2, BASEPRI
    e4ce:	f383 8812 	msr	BASEPRI_MAX, r3
    e4d2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    e4d6:	69e3      	ldr	r3, [r4, #28]
    e4d8:	b1f3      	cbz	r3, e518 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
    e4da:	3b01      	subs	r3, #1
    e4dc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e4de:	f382 8811 	msr	BASEPRI, r2
    e4e2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    e4e6:	4620      	mov	r0, r4
    e4e8:	f001 ff88 	bl	103fc <bt_conn_get_pkts>
    e4ec:	3e01      	subs	r6, #1
    e4ee:	f00a f977 	bl	187e0 <z_impl_k_sem_give>
    e4f2:	b2b6      	uxth	r6, r6
    e4f4:	e7e5      	b.n	e4c2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    e4f6:	466c      	mov	r4, sp
    e4f8:	b088      	sub	sp, #32
    e4fa:	466a      	mov	r2, sp
    e4fc:	4b25      	ldr	r3, [pc, #148]	; (e594 <hci_num_completed_packets+0x110>)
    e4fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e502:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    e506:	2303      	movs	r3, #3
    e508:	4823      	ldr	r0, [pc, #140]	; (e598 <hci_num_completed_packets+0x114>)
    e50a:	f842 3f10 	str.w	r3, [r2, #16]!
    e50e:	f00e fcb1 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e512:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    e514:	3501      	adds	r5, #1
    e516:	e7bf      	b.n	e498 <hci_num_completed_packets+0x14>
    e518:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e51a:	b993      	cbnz	r3, e542 <hci_num_completed_packets+0xbe>
    e51c:	f382 8811 	msr	BASEPRI, r2
    e520:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
    e524:	2302      	movs	r3, #2
    e526:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e52a:	481b      	ldr	r0, [pc, #108]	; (e598 <hci_num_completed_packets+0x114>)
    e52c:	f8c7 a014 	str.w	sl, [r7, #20]
    e530:	613b      	str	r3, [r7, #16]
    e532:	f107 0210 	add.w	r2, r7, #16
    e536:	f00e fc9d 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    e53a:	4620      	mov	r0, r4
    e53c:	f002 f940 	bl	107c0 <bt_conn_unref>
    e540:	e7e8      	b.n	e514 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e542:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e544:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e546:	428b      	cmp	r3, r1
	list->head = node;
    e548:	6160      	str	r0, [r4, #20]
	list->tail = node;
    e54a:	bf08      	it	eq
    e54c:	61a0      	streq	r0, [r4, #24]
    e54e:	f382 8811 	msr	BASEPRI, r2
    e552:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    e556:	f04f 0220 	mov.w	r2, #32
    e55a:	f3ef 8111 	mrs	r1, BASEPRI
    e55e:	f382 8812 	msr	BASEPRI_MAX, r2
    e562:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    e566:	68da      	ldr	r2, [r3, #12]
    e568:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    e56a:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    e56e:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    e572:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    e574:	b94a      	cbnz	r2, e58a <hci_num_completed_packets+0x106>
	list->head = node;
    e576:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    e57a:	f381 8811 	msr	BASEPRI, r1
    e57e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    e582:	4658      	mov	r0, fp
    e584:	f00a fc9a 	bl	18ebc <k_work_submit>
    e588:	e7ad      	b.n	e4e6 <hci_num_completed_packets+0x62>
	parent->next = child;
    e58a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e58c:	6263      	str	r3, [r4, #36]	; 0x24
}
    e58e:	e7f4      	b.n	e57a <hci_num_completed_packets+0xf6>
    e590:	00021c4c 	.word	0x00021c4c
    e594:	00021c30 	.word	0x00021c30
    e598:	0001f8d8 	.word	0x0001f8d8

0000e59c <bt_hci_cmd_state_set_init>:
{
    e59c:	b510      	push	{r4, lr}
	state->bit = bit;
    e59e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    e5a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    e5a6:	460c      	mov	r4, r1
	state->val = val;
    e5a8:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    e5aa:	f004 ffbb 	bl	13524 <net_buf_id>
    e5ae:	220c      	movs	r2, #12
    e5b0:	4b02      	ldr	r3, [pc, #8]	; (e5bc <bt_hci_cmd_state_set_init+0x20>)
    e5b2:	fb02 3300 	mla	r3, r2, r0, r3
    e5b6:	605c      	str	r4, [r3, #4]
}
    e5b8:	bd10      	pop	{r4, pc}
    e5ba:	bf00      	nop
    e5bc:	20009714 	.word	0x20009714

0000e5c0 <bt_hci_cmd_create>:
{
    e5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e5c4:	f04f 32ff 	mov.w	r2, #4294967295
    e5c8:	4606      	mov	r6, r0
    e5ca:	f04f 33ff 	mov.w	r3, #4294967295
    e5ce:	481e      	ldr	r0, [pc, #120]	; (e648 <bt_hci_cmd_create+0x88>)
    e5d0:	460f      	mov	r7, r1
    e5d2:	f00f fd62 	bl	1e09a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    e5d6:	4604      	mov	r4, r0
    e5d8:	b958      	cbnz	r0, e5f2 <bt_hci_cmd_create+0x32>
    e5da:	491c      	ldr	r1, [pc, #112]	; (e64c <bt_hci_cmd_create+0x8c>)
    e5dc:	481c      	ldr	r0, [pc, #112]	; (e650 <bt_hci_cmd_create+0x90>)
    e5de:	f240 1301 	movw	r3, #257	; 0x101
    e5e2:	4a1c      	ldr	r2, [pc, #112]	; (e654 <bt_hci_cmd_create+0x94>)
    e5e4:	f00d fba8 	bl	1bd38 <assert_print>
    e5e8:	f240 1101 	movw	r1, #257	; 0x101
    e5ec:	4819      	ldr	r0, [pc, #100]	; (e654 <bt_hci_cmd_create+0x94>)
    e5ee:	f00d fb9c 	bl	1bd2a <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e5f2:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    e5f6:	f100 0a08 	add.w	sl, r0, #8
    e5fa:	2101      	movs	r1, #1
    e5fc:	4650      	mov	r0, sl
    e5fe:	f005 f8df 	bl	137c0 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e602:	4620      	mov	r0, r4
    e604:	f884 8014 	strb.w	r8, [r4, #20]
    e608:	f004 ff8c 	bl	13524 <net_buf_id>
    e60c:	f04f 090c 	mov.w	r9, #12
    e610:	4d11      	ldr	r5, [pc, #68]	; (e658 <bt_hci_cmd_create+0x98>)
    e612:	fb09 5000 	mla	r0, r9, r0, r5
    e616:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e618:	4620      	mov	r0, r4
    e61a:	f004 ff83 	bl	13524 <net_buf_id>
    e61e:	fb09 5000 	mla	r0, r9, r0, r5
    e622:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e626:	4620      	mov	r0, r4
    e628:	f004 ff7c 	bl	13524 <net_buf_id>
    e62c:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e630:	2103      	movs	r1, #3
    e632:	4650      	mov	r0, sl
    e634:	f8c5 8004 	str.w	r8, [r5, #4]
    e638:	f005 fb28 	bl	13c8c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    e63c:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    e63e:	7087      	strb	r7, [r0, #2]
}
    e640:	4620      	mov	r0, r4
    e642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e646:	bf00      	nop
    e648:	200086d0 	.word	0x200086d0
    e64c:	000219e0 	.word	0x000219e0
    e650:	000205a4 	.word	0x000205a4
    e654:	00021af3 	.word	0x00021af3
    e658:	20009714 	.word	0x20009714

0000e65c <bt_hci_cmd_send_sync>:
{
    e65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e660:	b087      	sub	sp, #28
    e662:	4680      	mov	r8, r0
    e664:	4615      	mov	r5, r2
	if (!buf) {
    e666:	460c      	mov	r4, r1
{
    e668:	af00      	add	r7, sp, #0
	if (!buf) {
    e66a:	b921      	cbnz	r1, e676 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    e66c:	f7ff ffa8 	bl	e5c0 <bt_hci_cmd_create>
		if (!buf) {
    e670:	4604      	mov	r4, r0
    e672:	2800      	cmp	r0, #0
    e674:	d05a      	beq.n	e72c <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e676:	2201      	movs	r2, #1
    e678:	2100      	movs	r1, #0
    e67a:	4638      	mov	r0, r7
    e67c:	f010 fd37 	bl	1f0ee <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e680:	4620      	mov	r0, r4
    e682:	f004 ff4f 	bl	13524 <net_buf_id>
    e686:	230c      	movs	r3, #12
    e688:	f8df 90a8 	ldr.w	r9, [pc, #168]	; e734 <bt_hci_cmd_send_sync+0xd8>
    e68c:	fb03 9000 	mla	r0, r3, r0, r9
    e690:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    e692:	4620      	mov	r0, r4
    e694:	f005 fa1c 	bl	13ad0 <net_buf_ref>
    e698:	4601      	mov	r1, r0
    e69a:	4827      	ldr	r0, [pc, #156]	; (e738 <bt_hci_cmd_send_sync+0xdc>)
    e69c:	f005 f9a4 	bl	139e8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e6a0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e6a4:	2300      	movs	r3, #0
    e6a6:	4638      	mov	r0, r7
    e6a8:	f00a f8de 	bl	18868 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e6ac:	4606      	mov	r6, r0
    e6ae:	b180      	cbz	r0, e6d2 <bt_hci_cmd_send_sync+0x76>
    e6b0:	f240 1349 	movw	r3, #329	; 0x149
    e6b4:	4a21      	ldr	r2, [pc, #132]	; (e73c <bt_hci_cmd_send_sync+0xe0>)
    e6b6:	4922      	ldr	r1, [pc, #136]	; (e740 <bt_hci_cmd_send_sync+0xe4>)
    e6b8:	4822      	ldr	r0, [pc, #136]	; (e744 <bt_hci_cmd_send_sync+0xe8>)
    e6ba:	f00d fb3d 	bl	1bd38 <assert_print>
    e6be:	4631      	mov	r1, r6
    e6c0:	4821      	ldr	r0, [pc, #132]	; (e748 <bt_hci_cmd_send_sync+0xec>)
    e6c2:	f00d fb39 	bl	1bd38 <assert_print>
    e6c6:	4040      	eors	r0, r0
    e6c8:	f380 8811 	msr	BASEPRI, r0
    e6cc:	f04f 0003 	mov.w	r0, #3
    e6d0:	df02      	svc	2
	status = cmd(buf)->status;
    e6d2:	4620      	mov	r0, r4
    e6d4:	f004 ff26 	bl	13524 <net_buf_id>
    e6d8:	230c      	movs	r3, #12
    e6da:	4358      	muls	r0, r3
    e6dc:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    e6e0:	b1e6      	cbz	r6, e71c <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    e6e2:	466d      	mov	r5, sp
    e6e4:	b088      	sub	sp, #32
    e6e6:	466a      	mov	r2, sp
    e6e8:	4b18      	ldr	r3, [pc, #96]	; (e74c <bt_hci_cmd_send_sync+0xf0>)
    e6ea:	61d6      	str	r6, [r2, #28]
    e6ec:	e9c2 3805 	strd	r3, r8, [r2, #20]
    e6f0:	2304      	movs	r3, #4
    e6f2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    e6f6:	4816      	ldr	r0, [pc, #88]	; (e750 <bt_hci_cmd_send_sync+0xf4>)
    e6f8:	f842 3f10 	str.w	r3, [r2, #16]!
    e6fc:	f00e fbba 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    e700:	4620      	mov	r0, r4
    e702:	46ad      	mov	sp, r5
    e704:	f005 f9a0 	bl	13a48 <net_buf_unref>
			return -ECONNREFUSED;
    e708:	2e09      	cmp	r6, #9
    e70a:	bf14      	ite	ne
    e70c:	f06f 0004 	mvnne.w	r0, #4
    e710:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    e714:	371c      	adds	r7, #28
    e716:	46bd      	mov	sp, r7
    e718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    e71c:	b115      	cbz	r5, e724 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
    e71e:	602c      	str	r4, [r5, #0]
	return 0;
    e720:	2000      	movs	r0, #0
    e722:	e7f7      	b.n	e714 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
    e724:	4620      	mov	r0, r4
    e726:	f005 f98f 	bl	13a48 <net_buf_unref>
    e72a:	e7f9      	b.n	e720 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
    e72c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e730:	e7f0      	b.n	e714 <bt_hci_cmd_send_sync+0xb8>
    e732:	bf00      	nop
    e734:	20009714 	.word	0x20009714
    e738:	2000813c 	.word	0x2000813c
    e73c:	00021af3 	.word	0x00021af3
    e740:	00020aad 	.word	0x00020aad
    e744:	000205a4 	.word	0x000205a4
    e748:	00021c63 	.word	0x00021c63
    e74c:	00021c83 	.word	0x00021c83
    e750:	0001f8d8 	.word	0x0001f8d8

0000e754 <hci_le_read_max_data_len>:
{
    e754:	b570      	push	{r4, r5, r6, lr}
    e756:	b088      	sub	sp, #32
    e758:	4606      	mov	r6, r0
    e75a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    e75c:	f242 002f 	movw	r0, #8239	; 0x202f
    e760:	2100      	movs	r1, #0
    e762:	aa01      	add	r2, sp, #4
    e764:	f7ff ff7a 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    e768:	4604      	mov	r4, r0
    e76a:	b160      	cbz	r0, e786 <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
    e76c:	4b0b      	ldr	r3, [pc, #44]	; (e79c <hci_le_read_max_data_len+0x48>)
    e76e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e772:	9307      	str	r3, [sp, #28]
    e774:	2302      	movs	r3, #2
    e776:	480a      	ldr	r0, [pc, #40]	; (e7a0 <hci_le_read_max_data_len+0x4c>)
    e778:	aa06      	add	r2, sp, #24
    e77a:	9306      	str	r3, [sp, #24]
    e77c:	f00e fb7a 	bl	1ce74 <z_log_msg_static_create.constprop.0>
}
    e780:	4620      	mov	r0, r4
    e782:	b008      	add	sp, #32
    e784:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e786:	9801      	ldr	r0, [sp, #4]
    e788:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    e78a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e78e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    e790:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    e794:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    e796:	f005 f957 	bl	13a48 <net_buf_unref>
	return 0;
    e79a:	e7f1      	b.n	e780 <hci_le_read_max_data_len+0x2c>
    e79c:	00021c9f 	.word	0x00021c9f
    e7a0:	0001f8d8 	.word	0x0001f8d8

0000e7a4 <bt_hci_le_rand>:
{
    e7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e7a6:	4b14      	ldr	r3, [pc, #80]	; (e7f8 <bt_hci_le_rand+0x54>)
{
    e7a8:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e7aa:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
    e7ae:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e7b0:	2b00      	cmp	r3, #0
    e7b2:	da1d      	bge.n	e7f0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    e7b4:	b914      	cbnz	r4, e7bc <bt_hci_le_rand+0x18>
	return 0;
    e7b6:	4620      	mov	r0, r4
}
    e7b8:	b003      	add	sp, #12
    e7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    e7bc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e7be:	f04f 0100 	mov.w	r1, #0
    e7c2:	f242 0018 	movw	r0, #8216	; 0x2018
    e7c6:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    e7c8:	4626      	mov	r6, r4
    e7ca:	bf28      	it	cs
    e7cc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e7ce:	f7ff ff45 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    e7d2:	2800      	cmp	r0, #0
    e7d4:	d1f0      	bne.n	e7b8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    e7d6:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    e7d8:	4632      	mov	r2, r6
    e7da:	68b9      	ldr	r1, [r7, #8]
    e7dc:	4628      	mov	r0, r5
    e7de:	3101      	adds	r1, #1
    e7e0:	f00e fab9 	bl	1cd56 <memcpy>
		net_buf_unref(rsp);
    e7e4:	4638      	mov	r0, r7
    e7e6:	f005 f92f 	bl	13a48 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    e7ea:	4435      	add	r5, r6
		len -= count;
    e7ec:	1ba4      	subs	r4, r4, r6
    e7ee:	e7e1      	b.n	e7b4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    e7f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e7f4:	e7e0      	b.n	e7b8 <bt_hci_le_rand+0x14>
    e7f6:	bf00      	nop
    e7f8:	20008000 	.word	0x20008000

0000e7fc <bt_hci_le_enh_conn_complete>:
{
    e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e800:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e802:	f8b0 9001 	ldrh.w	r9, [r0, #1]
    e806:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
    e808:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    e80c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    e810:	4aa9      	ldr	r2, [pc, #676]	; (eab8 <bt_hci_le_enh_conn_complete+0x2bc>)
    e812:	b29b      	uxth	r3, r3
    e814:	8811      	ldrh	r1, [r2, #0]
{
    e816:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
    e818:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
    e81a:	bf08      	it	eq
    e81c:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
    e81e:	7804      	ldrb	r4, [r0, #0]
			return true;
    e820:	bf08      	it	eq
    e822:	2601      	moveq	r6, #1
{
    e824:	af02      	add	r7, sp, #8
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e826:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
    e82a:	b3a4      	cbz	r4, e896 <bt_hci_le_enh_conn_complete+0x9a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e82c:	2c3c      	cmp	r4, #60	; 0x3c
    e82e:	d122      	bne.n	e876 <bt_hci_le_enh_conn_complete+0x7a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    e830:	f001 fa0e 	bl	fc50 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e834:	f06f 0180 	mvn.w	r1, #128	; 0x80
    e838:	3010      	adds	r0, #16
    e83a:	f00e fb1e 	bl	1ce7a <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    e83e:	2000      	movs	r0, #0
    e840:	f7ff fac2 	bl	ddc8 <find_pending_connect.part.0>
		if (!conn) {
    e844:	4605      	mov	r5, r0
    e846:	b970      	cbnz	r0, e866 <bt_hci_le_enh_conn_complete+0x6a>
			BT_ERR("No pending peripheral connection");
    e848:	4b9c      	ldr	r3, [pc, #624]	; (eabc <bt_hci_le_enh_conn_complete+0x2c0>)
    e84a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e84e:	627b      	str	r3, [r7, #36]	; 0x24
    e850:	2302      	movs	r3, #2
    e852:	489b      	ldr	r0, [pc, #620]	; (eac0 <bt_hci_le_enh_conn_complete+0x2c4>)
    e854:	623b      	str	r3, [r7, #32]
    e856:	f107 0220 	add.w	r2, r7, #32
    e85a:	f00e fb0b 	bl	1ce74 <z_log_msg_static_create.constprop.0>
}
    e85e:	372c      	adds	r7, #44	; 0x2c
    e860:	46bd      	mov	sp, r7
    e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    e866:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e868:	2100      	movs	r1, #0
    e86a:	f001 ffe1 	bl	10830 <bt_conn_set_state>
		bt_conn_unref(conn);
    e86e:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    e870:	f001 ffa6 	bl	107c0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e874:	e7f3      	b.n	e85e <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    e876:	466d      	mov	r5, sp
    e878:	b088      	sub	sp, #32
    e87a:	aa02      	add	r2, sp, #8
    e87c:	4b91      	ldr	r3, [pc, #580]	; (eac4 <bt_hci_le_enh_conn_complete+0x2c8>)
    e87e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e882:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e886:	2303      	movs	r3, #3
    e888:	488d      	ldr	r0, [pc, #564]	; (eac0 <bt_hci_le_enh_conn_complete+0x2c4>)
    e88a:	f842 3f10 	str.w	r3, [r2, #16]!
    e88e:	f00e faf1 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    e892:	46ad      	mov	sp, r5
		return;
    e894:	e7e3      	b.n	e85e <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e896:	7903      	ldrb	r3, [r0, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    e898:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e89c:	3b02      	subs	r3, #2
    e89e:	2b01      	cmp	r3, #1
    e8a0:	d82d      	bhi.n	e8fe <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    e8a2:	4651      	mov	r1, sl
    e8a4:	f107 0010 	add.w	r0, r7, #16
    e8a8:	f00e fad6 	bl	1ce58 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    e8ac:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
    e8ae:	2206      	movs	r2, #6
    e8b0:	3b02      	subs	r3, #2
    e8b2:	743b      	strb	r3, [r7, #16]
    e8b4:	f105 0111 	add.w	r1, r5, #17
    e8b8:	f107 0009 	add.w	r0, r7, #9
    e8bc:	f00e fa4b 	bl	1cd56 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    e8c0:	2301      	movs	r3, #1
    e8c2:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    e8c4:	78eb      	ldrb	r3, [r5, #3]
    e8c6:	2b01      	cmp	r3, #1
    e8c8:	d02e      	beq.n	e928 <bt_hci_le_enh_conn_complete+0x12c>
		BT_ERR("No pending conn for peer %s",
    e8ca:	4650      	mov	r0, sl
    e8cc:	f7ff f94e 	bl	db6c <bt_addr_le_str>
    e8d0:	466c      	mov	r4, sp
    e8d2:	b088      	sub	sp, #32
    e8d4:	aa02      	add	r2, sp, #8
    e8d6:	4b7c      	ldr	r3, [pc, #496]	; (eac8 <bt_hci_le_enh_conn_complete+0x2cc>)
    e8d8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    e8dc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    e8e4:	8393      	strh	r3, [r2, #28]
    e8e6:	4b79      	ldr	r3, [pc, #484]	; (eacc <bt_hci_le_enh_conn_complete+0x2d0>)
    e8e8:	4875      	ldr	r0, [pc, #468]	; (eac0 <bt_hci_le_enh_conn_complete+0x2c4>)
    e8ea:	f842 3f10 	str.w	r3, [r2, #16]!
    e8ee:	f00e fac1 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    e8f2:	211f      	movs	r1, #31
    e8f4:	46a5      	mov	sp, r4
    e8f6:	4640      	mov	r0, r8
    e8f8:	f00e fac7 	bl	1ce8a <bt_hci_disconnect>
		return;
    e8fc:	e7af      	b.n	e85e <bt_hci_le_enh_conn_complete+0x62>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    e8fe:	78c3      	ldrb	r3, [r0, #3]
		bt_addr_le_copy(&id_addr,
    e900:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    e902:	2b01      	cmp	r3, #1
    e904:	bf04      	itt	eq
    e906:	4b72      	ldreq	r3, [pc, #456]	; (ead0 <bt_hci_le_enh_conn_complete+0x2d4>)
    e908:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    e90c:	4620      	mov	r0, r4
    e90e:	f00e fb6b 	bl	1cfe8 <bt_lookup_id_addr>
    e912:	4601      	mov	r1, r0
    e914:	f107 0010 	add.w	r0, r7, #16
    e918:	f00e fa9e 	bl	1ce58 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    e91c:	4651      	mov	r1, sl
    e91e:	f107 0008 	add.w	r0, r7, #8
    e922:	f00e fa99 	bl	1ce58 <bt_addr_le_copy>
    e926:	e7cd      	b.n	e8c4 <bt_hci_le_enh_conn_complete+0xc8>
    e928:	f107 0010 	add.w	r0, r7, #16
    e92c:	f7ff fa4c 	bl	ddc8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e930:	78eb      	ldrb	r3, [r5, #3]
    e932:	4604      	mov	r4, r0
    e934:	2b01      	cmp	r3, #1
    e936:	d10a      	bne.n	e94e <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    e938:	f001 f98a 	bl	fc50 <bt_le_adv_lookup_legacy>
    e93c:	4683      	mov	fp, r0
    e93e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    e942:	3010      	adds	r0, #16
    e944:	f00e fa99 	bl	1ce7a <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    e948:	4658      	mov	r0, fp
    e94a:	f00e fc4c 	bl	1d1e6 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    e94e:	2c00      	cmp	r4, #0
    e950:	d0bb      	beq.n	e8ca <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
    e952:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    e954:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
    e958:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    e95c:	f00e fa7c 	bl	1ce58 <bt_addr_le_copy>
	conn->err = 0U;
    e960:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    e962:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    e966:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    e96a:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    e96e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e972:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    e976:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
    e97a:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    e97c:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e97e:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    e980:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e982:	d116      	bne.n	e9b2 <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    e984:	f107 0108 	add.w	r1, r7, #8
    e988:	f104 0097 	add.w	r0, r4, #151	; 0x97
    e98c:	f00e fa64 	bl	1ce58 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    e990:	f001 f95e 	bl	fc50 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    e994:	7a21      	ldrb	r1, [r4, #8]
    e996:	4d4e      	ldr	r5, [pc, #312]	; (ead0 <bt_hci_le_enh_conn_complete+0x2d4>)
    e998:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    e99c:	4429      	add	r1, r5
    e99e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    e9a2:	f00e fa59 	bl	1ce58 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    e9a6:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    e9aa:	065d      	lsls	r5, r3, #25
    e9ac:	d501      	bpl.n	e9b2 <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
    e9ae:	f001 fb19 	bl	ffe4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    e9b2:	2107      	movs	r1, #7
    e9b4:	4620      	mov	r0, r4
    e9b6:	f001 ff3b 	bl	10830 <bt_conn_set_state>
	if (is_disconnected) {
    e9ba:	b11e      	cbz	r6, e9c4 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e9bc:	2101      	movs	r1, #1
    e9be:	4620      	mov	r0, r4
    e9c0:	f001 ff36 	bl	10830 <bt_conn_set_state>
	bt_conn_connected(conn);
    e9c4:	4620      	mov	r0, r4
    e9c6:	f00e fc42 	bl	1d24e <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    e9ca:	7aa3      	ldrb	r3, [r4, #10]
    e9cc:	2b07      	cmp	r3, #7
    e9ce:	d16e      	bne.n	eaae <bt_hci_le_enh_conn_complete+0x2b2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e9d0:	1d23      	adds	r3, r4, #4
    e9d2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    e9d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e9da:	4d3d      	ldr	r5, [pc, #244]	; (ead0 <bt_hci_le_enh_conn_complete+0x2d4>)
    e9dc:	d129      	bne.n	ea32 <bt_hci_le_enh_conn_complete+0x236>
    e9de:	78e3      	ldrb	r3, [r4, #3]
    e9e0:	b11b      	cbz	r3, e9ea <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    e9e2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    e9e6:	0718      	lsls	r0, r3, #28
    e9e8:	d523      	bpl.n	ea32 <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    e9ea:	2102      	movs	r1, #2
    e9ec:	f242 0016 	movw	r0, #8214	; 0x2016
    e9f0:	f7ff fde6 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    e9f4:	4606      	mov	r6, r0
    e9f6:	2800      	cmp	r0, #0
    e9f8:	d05b      	beq.n	eab2 <bt_hci_le_enh_conn_complete+0x2b6>
    e9fa:	2102      	movs	r1, #2
    e9fc:	3008      	adds	r0, #8
    e9fe:	f005 f945 	bl	13c8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    ea02:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    ea04:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    ea06:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    ea08:	4631      	mov	r1, r6
    ea0a:	f242 0016 	movw	r0, #8214	; 0x2016
    ea0e:	f7ff fe25 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    ea12:	b170      	cbz	r0, ea32 <bt_hci_le_enh_conn_complete+0x236>
			BT_ERR("Failed read remote features (%d)", err);
    ea14:	466e      	mov	r6, sp
    ea16:	b088      	sub	sp, #32
    ea18:	aa02      	add	r2, sp, #8
    ea1a:	4b2e      	ldr	r3, [pc, #184]	; (ead4 <bt_hci_le_enh_conn_complete+0x2d8>)
    ea1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ea20:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ea24:	2303      	movs	r3, #3
    ea26:	4826      	ldr	r0, [pc, #152]	; (eac0 <bt_hci_le_enh_conn_complete+0x2c4>)
    ea28:	f842 3f10 	str.w	r3, [r2, #16]!
    ea2c:	f00e fa22 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    ea30:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    ea32:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    ea36:	07d9      	lsls	r1, r3, #31
    ea38:	d516      	bpl.n	ea68 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    ea3a:	2100      	movs	r1, #0
    ea3c:	2302      	movs	r3, #2
    ea3e:	4620      	mov	r0, r4
    ea40:	461a      	mov	r2, r3
    ea42:	9100      	str	r1, [sp, #0]
    ea44:	f00e fa5a 	bl	1cefc <bt_le_set_phy>
		if (err) {
    ea48:	b170      	cbz	r0, ea68 <bt_hci_le_enh_conn_complete+0x26c>
			BT_ERR("Failed LE Set PHY (%d)", err);
    ea4a:	466e      	mov	r6, sp
    ea4c:	b088      	sub	sp, #32
    ea4e:	aa02      	add	r2, sp, #8
    ea50:	4b21      	ldr	r3, [pc, #132]	; (ead8 <bt_hci_le_enh_conn_complete+0x2dc>)
    ea52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ea56:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ea5a:	2303      	movs	r3, #3
    ea5c:	4818      	ldr	r0, [pc, #96]	; (eac0 <bt_hci_le_enh_conn_complete+0x2c4>)
    ea5e:	f842 3f10 	str.w	r3, [r2, #16]!
    ea62:	f00e fa07 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    ea66:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    ea68:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    ea6c:	069a      	lsls	r2, r3, #26
    ea6e:	d51e      	bpl.n	eaae <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    ea70:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    ea74:	689b      	ldr	r3, [r3, #8]
    ea76:	079b      	lsls	r3, r3, #30
    ea78:	d519      	bpl.n	eaae <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    ea7a:	1db9      	adds	r1, r7, #6
    ea7c:	1d38      	adds	r0, r7, #4
    ea7e:	f7ff fe69 	bl	e754 <hci_le_read_max_data_len>
			if (!err) {
    ea82:	b9a0      	cbnz	r0, eaae <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
    ea84:	4620      	mov	r0, r4
    ea86:	88fa      	ldrh	r2, [r7, #6]
    ea88:	88b9      	ldrh	r1, [r7, #4]
    ea8a:	f00e fa19 	bl	1cec0 <bt_le_set_data_len>
				if (err) {
    ea8e:	b170      	cbz	r0, eaae <bt_hci_le_enh_conn_complete+0x2b2>
					BT_ERR("Failed to set data len (%d)", err);
    ea90:	466d      	mov	r5, sp
    ea92:	b088      	sub	sp, #32
    ea94:	aa02      	add	r2, sp, #8
    ea96:	4b11      	ldr	r3, [pc, #68]	; (eadc <bt_hci_le_enh_conn_complete+0x2e0>)
    ea98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ea9c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    eaa0:	2303      	movs	r3, #3
    eaa2:	4807      	ldr	r0, [pc, #28]	; (eac0 <bt_hci_le_enh_conn_complete+0x2c4>)
    eaa4:	f842 3f10 	str.w	r3, [r2, #16]!
    eaa8:	f00e f9e4 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    eaac:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    eaae:	4620      	mov	r0, r4
    eab0:	e6de      	b.n	e870 <bt_hci_le_enh_conn_complete+0x74>
		return -ENOBUFS;
    eab2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    eab6:	e7ad      	b.n	ea14 <bt_hci_le_enh_conn_complete+0x218>
    eab8:	20009ba4 	.word	0x20009ba4
    eabc:	00021cbf 	.word	0x00021cbf
    eac0:	0001f8d8 	.word	0x0001f8d8
    eac4:	00021ce0 	.word	0x00021ce0
    eac8:	00021cf9 	.word	0x00021cf9
    eacc:	01000003 	.word	0x01000003
    ead0:	20008000 	.word	0x20008000
    ead4:	00021d15 	.word	0x00021d15
    ead8:	00021d36 	.word	0x00021d36
    eadc:	00021d4d 	.word	0x00021d4d

0000eae0 <le_legacy_conn_complete>:
{
    eae0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    eae2:	6881      	ldr	r1, [r0, #8]
{
    eae4:	b088      	sub	sp, #32
	enh.status         = evt->status;
    eae6:	780b      	ldrb	r3, [r1, #0]
    eae8:	4c16      	ldr	r4, [pc, #88]	; (eb44 <le_legacy_conn_complete+0x64>)
    eaea:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    eaee:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    eaf2:	a801      	add	r0, sp, #4
	enh.handle         = evt->handle;
    eaf4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    eaf8:	78cb      	ldrb	r3, [r1, #3]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    eafa:	3104      	adds	r1, #4
	enh.role           = evt->role;
    eafc:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    eb00:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    eb04:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    eb08:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    eb0c:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    eb10:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    eb14:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    eb18:	7b4b      	ldrb	r3, [r1, #13]
    eb1a:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    eb1e:	f00e f99b 	bl	1ce58 <bt_addr_le_copy>
    eb22:	4621      	mov	r1, r4
    eb24:	2206      	movs	r2, #6
    eb26:	f10d 000b 	add.w	r0, sp, #11
    eb2a:	f00e f914 	bl	1cd56 <memcpy>
    eb2e:	2206      	movs	r2, #6
    eb30:	4621      	mov	r1, r4
    eb32:	f10d 0011 	add.w	r0, sp, #17
    eb36:	f00e f90e 	bl	1cd56 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    eb3a:	4668      	mov	r0, sp
    eb3c:	f7ff fe5e 	bl	e7fc <bt_hci_le_enh_conn_complete>
}
    eb40:	b008      	add	sp, #32
    eb42:	bd10      	pop	{r4, pc}
    eb44:	000218d3 	.word	0x000218d3

0000eb48 <bt_send>:
	return bt_dev.drv->send(buf);
    eb48:	4b02      	ldr	r3, [pc, #8]	; (eb54 <bt_send+0xc>)
    eb4a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    eb4e:	695b      	ldr	r3, [r3, #20]
    eb50:	4718      	bx	r3
    eb52:	bf00      	nop
    eb54:	20008000 	.word	0x20008000

0000eb58 <bt_hci_cmd_send>:
{
    eb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb5a:	4605      	mov	r5, r0
	if (!buf) {
    eb5c:	460c      	mov	r4, r1
{
    eb5e:	af00      	add	r7, sp, #0
	if (!buf) {
    eb60:	b919      	cbnz	r1, eb6a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    eb62:	f7ff fd2d 	bl	e5c0 <bt_hci_cmd_create>
		if (!buf) {
    eb66:	4604      	mov	r4, r0
    eb68:	b318      	cbz	r0, ebb2 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    eb6a:	f640 4335 	movw	r3, #3125	; 0xc35
    eb6e:	429d      	cmp	r5, r3
    eb70:	d119      	bne.n	eba6 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
    eb72:	4620      	mov	r0, r4
    eb74:	f7ff ffe8 	bl	eb48 <bt_send>
		if (err) {
    eb78:	4605      	mov	r5, r0
    eb7a:	b188      	cbz	r0, eba0 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
    eb7c:	466e      	mov	r6, sp
    eb7e:	b088      	sub	sp, #32
    eb80:	466a      	mov	r2, sp
    eb82:	4b0d      	ldr	r3, [pc, #52]	; (ebb8 <bt_hci_cmd_send+0x60>)
    eb84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eb88:	e9c2 3005 	strd	r3, r0, [r2, #20]
    eb8c:	2303      	movs	r3, #3
    eb8e:	480b      	ldr	r0, [pc, #44]	; (ebbc <bt_hci_cmd_send+0x64>)
    eb90:	f842 3f10 	str.w	r3, [r2, #16]!
    eb94:	f00e f96e 	bl	1ce74 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    eb98:	4620      	mov	r0, r4
    eb9a:	46b5      	mov	sp, r6
    eb9c:	f004 ff54 	bl	13a48 <net_buf_unref>
}
    eba0:	4628      	mov	r0, r5
    eba2:	46bd      	mov	sp, r7
    eba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    eba6:	4621      	mov	r1, r4
    eba8:	4805      	ldr	r0, [pc, #20]	; (ebc0 <bt_hci_cmd_send+0x68>)
    ebaa:	f004 ff1d 	bl	139e8 <net_buf_put>
	return 0;
    ebae:	2500      	movs	r5, #0
    ebb0:	e7f6      	b.n	eba0 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    ebb2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    ebb6:	e7f3      	b.n	eba0 <bt_hci_cmd_send+0x48>
    ebb8:	00021d69 	.word	0x00021d69
    ebbc:	0001f8d8 	.word	0x0001f8d8
    ebc0:	2000813c 	.word	0x2000813c

0000ebc4 <bt_hci_host_num_completed_packets>:
{
    ebc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebc8:	b086      	sub	sp, #24
    ebca:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    ebcc:	8ac5      	ldrh	r5, [r0, #22]
	uint8_t index = acl(buf)->index;
    ebce:	7d46      	ldrb	r6, [r0, #21]
{
    ebd0:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ebd2:	7980      	ldrb	r0, [r0, #6]
    ebd4:	f004 fc9e 	bl	13514 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    ebd8:	4621      	mov	r1, r4
    ebda:	f010 fa7e 	bl	1f0da <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    ebde:	4b2d      	ldr	r3, [pc, #180]	; (ec94 <bt_hci_host_num_completed_packets+0xd0>)
    ebe0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    ebe4:	069b      	lsls	r3, r3, #26
    ebe6:	d513      	bpl.n	ec10 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
    ebe8:	4630      	mov	r0, r6
    ebea:	f002 f9fd 	bl	10fe8 <bt_conn_lookup_index>
	if (!conn) {
    ebee:	4604      	mov	r4, r0
    ebf0:	b990      	cbnz	r0, ec18 <bt_hci_host_num_completed_packets+0x54>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
    ebf2:	466c      	mov	r4, sp
    ebf4:	b088      	sub	sp, #32
    ebf6:	466a      	mov	r2, sp
    ebf8:	4b27      	ldr	r3, [pc, #156]	; (ec98 <bt_hci_host_num_completed_packets+0xd4>)
    ebfa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ebfe:	e9c2 3605 	strd	r3, r6, [r2, #20]
    ec02:	2303      	movs	r3, #3
    ec04:	4825      	ldr	r0, [pc, #148]	; (ec9c <bt_hci_host_num_completed_packets+0xd8>)
    ec06:	f842 3f10 	str.w	r3, [r2, #16]!
    ec0a:	f00e f933 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    ec0e:	46a5      	mov	sp, r4
}
    ec10:	3718      	adds	r7, #24
    ec12:	46bd      	mov	sp, r7
    ec14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
    ec18:	7a83      	ldrb	r3, [r0, #10]
    ec1a:	3b07      	subs	r3, #7
    ec1c:	2b01      	cmp	r3, #1
    ec1e:	d90e      	bls.n	ec3e <bt_hci_host_num_completed_packets+0x7a>
		BT_WARN("Not reporting packet for non-connected conn");
    ec20:	4b1f      	ldr	r3, [pc, #124]	; (eca0 <bt_hci_host_num_completed_packets+0xdc>)
    ec22:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ec26:	617b      	str	r3, [r7, #20]
    ec28:	2302      	movs	r3, #2
    ec2a:	481c      	ldr	r0, [pc, #112]	; (ec9c <bt_hci_host_num_completed_packets+0xd8>)
    ec2c:	613b      	str	r3, [r7, #16]
    ec2e:	f107 0210 	add.w	r2, r7, #16
    ec32:	f00e f91f 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    ec36:	4620      	mov	r0, r4
    ec38:	f001 fdc2 	bl	107c0 <bt_conn_unref>
		return;
    ec3c:	e7e8      	b.n	ec10 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
    ec3e:	f001 fdbf 	bl	107c0 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ec42:	2105      	movs	r1, #5
    ec44:	f640 4035 	movw	r0, #3125	; 0xc35
    ec48:	f7ff fcba 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    ec4c:	4604      	mov	r4, r0
    ec4e:	b958      	cbnz	r0, ec68 <bt_hci_host_num_completed_packets+0xa4>
		BT_ERR("Unable to allocate new HCI command");
    ec50:	4b14      	ldr	r3, [pc, #80]	; (eca4 <bt_hci_host_num_completed_packets+0xe0>)
    ec52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ec56:	617b      	str	r3, [r7, #20]
    ec58:	2302      	movs	r3, #2
    ec5a:	4810      	ldr	r0, [pc, #64]	; (ec9c <bt_hci_host_num_completed_packets+0xd8>)
    ec5c:	613b      	str	r3, [r7, #16]
    ec5e:	f107 0210 	add.w	r2, r7, #16
    ec62:	f00e f907 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		return;
    ec66:	e7d3      	b.n	ec10 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
    ec68:	f100 0808 	add.w	r8, r0, #8
    ec6c:	2101      	movs	r1, #1
    ec6e:	4640      	mov	r0, r8
    ec70:	f005 f80c 	bl	13c8c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    ec74:	2601      	movs	r6, #1
    ec76:	2104      	movs	r1, #4
    ec78:	7006      	strb	r6, [r0, #0]
    ec7a:	4640      	mov	r0, r8
    ec7c:	f005 f806 	bl	13c8c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    ec80:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    ec82:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    ec84:	7086      	strb	r6, [r0, #2]
    ec86:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ec88:	4621      	mov	r1, r4
    ec8a:	f640 4035 	movw	r0, #3125	; 0xc35
    ec8e:	f7ff ff63 	bl	eb58 <bt_hci_cmd_send>
    ec92:	e7bd      	b.n	ec10 <bt_hci_host_num_completed_packets+0x4c>
    ec94:	20008000 	.word	0x20008000
    ec98:	00021d8b 	.word	0x00021d8b
    ec9c:	0001f8d8 	.word	0x0001f8d8
    eca0:	00021db4 	.word	0x00021db4
    eca4:	00021de0 	.word	0x00021de0

0000eca8 <le_conn_param_req>:
{
    eca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecac:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    ecae:	6883      	ldr	r3, [r0, #8]
{
    ecb0:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ecb2:	78d9      	ldrb	r1, [r3, #3]
    ecb4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    ecb6:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ecba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ecbe:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ecc0:	7959      	ldrb	r1, [r3, #5]
    ecc2:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    ecc4:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ecc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    eccc:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    ecce:	799a      	ldrb	r2, [r3, #6]
    ecd0:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    ecd2:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    ecd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ecd8:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    ecda:	7a1a      	ldrb	r2, [r3, #8]
    ecdc:	7a5b      	ldrb	r3, [r3, #9]
    ecde:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ece2:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    ece4:	f001 fd9c 	bl	10820 <bt_conn_lookup_handle>
	if (!conn) {
    ece8:	4606      	mov	r6, r0
    ecea:	b9b0      	cbnz	r0, ed1a <le_conn_param_req+0x72>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ecec:	466d      	mov	r5, sp
    ecee:	b088      	sub	sp, #32
    ecf0:	466a      	mov	r2, sp
    ecf2:	4b20      	ldr	r3, [pc, #128]	; (ed74 <le_conn_param_req+0xcc>)
    ecf4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ecf8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ecfc:	2303      	movs	r3, #3
    ecfe:	481e      	ldr	r0, [pc, #120]	; (ed78 <le_conn_param_req+0xd0>)
    ed00:	f842 3f10 	str.w	r3, [r2, #16]!
    ed04:	f00e f8b6 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    ed08:	2102      	movs	r1, #2
    ed0a:	46ad      	mov	sp, r5
    ed0c:	4620      	mov	r0, r4
    ed0e:	f00e f941 	bl	1cf94 <le_conn_param_neg_reply>
}
    ed12:	3708      	adds	r7, #8
    ed14:	46bd      	mov	sp, r7
    ed16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    ed1a:	4639      	mov	r1, r7
    ed1c:	f001 ff38 	bl	10b90 <le_param_req>
    ed20:	b938      	cbnz	r0, ed32 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    ed22:	211e      	movs	r1, #30
    ed24:	4620      	mov	r0, r4
    ed26:	f00e f935 	bl	1cf94 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    ed2a:	4630      	mov	r0, r6
    ed2c:	f001 fd48 	bl	107c0 <bt_conn_unref>
    ed30:	e7ef      	b.n	ed12 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    ed32:	210e      	movs	r1, #14
    ed34:	f242 0020 	movw	r0, #8224	; 0x2020
    ed38:	f7ff fc42 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    ed3c:	4605      	mov	r5, r0
    ed3e:	2800      	cmp	r0, #0
    ed40:	d0f3      	beq.n	ed2a <le_conn_param_req+0x82>
    ed42:	210e      	movs	r1, #14
    ed44:	3008      	adds	r0, #8
    ed46:	f004 ffa1 	bl	13c8c <net_buf_simple_add>
    ed4a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    ed4c:	220e      	movs	r2, #14
    ed4e:	2100      	movs	r1, #0
    ed50:	f00e f80c 	bl	1cd6c <memset>
	cp->handle = sys_cpu_to_le16(handle);
    ed54:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ed58:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ed5a:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ed5c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ed5e:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ed60:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ed64:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ed66:	88bb      	ldrh	r3, [r7, #4]
    ed68:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    ed6a:	88fb      	ldrh	r3, [r7, #6]
    ed6c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ed6e:	f7ff fef3 	bl	eb58 <bt_hci_cmd_send>
    ed72:	e7da      	b.n	ed2a <le_conn_param_req+0x82>
    ed74:	00021a26 	.word	0x00021a26
    ed78:	0001f8d8 	.word	0x0001f8d8

0000ed7c <hci_tx_thread>:
{
    ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    ed80:	f8df 8154 	ldr.w	r8, [pc, #340]	; eed8 <hci_tx_thread+0x15c>
{
    ed84:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
    ed86:	f8df 9154 	ldr.w	r9, [pc, #340]	; eedc <hci_tx_thread+0x160>
{
    ed8a:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    ed8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ed90:	4853      	ldr	r0, [pc, #332]	; (eee0 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
    ed92:	f36f 3394 	bfc	r3, #14, #7
    ed96:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ed9a:	f001 fcaf 	bl	106fc <bt_conn_prepare_events>
    ed9e:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    eda0:	f04f 32ff 	mov.w	r2, #4294967295
    eda4:	f04f 33ff 	mov.w	r3, #4294967295
    eda8:	4629      	mov	r1, r5
    edaa:	484b      	ldr	r0, [pc, #300]	; (eed8 <hci_tx_thread+0x15c>)
    edac:	f00c fb8a 	bl	1b4c4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    edb0:	b160      	cbz	r0, edcc <hci_tx_thread+0x50>
    edb2:	f640 13da 	movw	r3, #2522	; 0x9da
    edb6:	464a      	mov	r2, r9
    edb8:	494a      	ldr	r1, [pc, #296]	; (eee4 <hci_tx_thread+0x168>)
    edba:	484b      	ldr	r0, [pc, #300]	; (eee8 <hci_tx_thread+0x16c>)
    edbc:	f00c ffbc 	bl	1bd38 <assert_print>
    edc0:	4040      	eors	r0, r0
    edc2:	f380 8811 	msr	BASEPRI, r0
    edc6:	f04f 0003 	mov.w	r0, #3
    edca:	df02      	svc	2
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    edcc:	f04f 0a03 	mov.w	sl, #3
{
    edd0:	4e41      	ldr	r6, [pc, #260]	; (eed8 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
    edd2:	b915      	cbnz	r5, edda <hci_tx_thread+0x5e>
	z_impl_k_yield();
    edd4:	f00b fabe 	bl	1a354 <z_impl_k_yield>
	while (1) {
    edd8:	e7d8      	b.n	ed8c <hci_tx_thread+0x10>
		switch (ev->state) {
    edda:	68f3      	ldr	r3, [r6, #12]
    eddc:	f3c3 3386 	ubfx	r3, r3, #14, #7
    ede0:	2b01      	cmp	r3, #1
    ede2:	d960      	bls.n	eea6 <hci_tx_thread+0x12a>
    ede4:	2b04      	cmp	r3, #4
    ede6:	d168      	bne.n	eeba <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    ede8:	7b33      	ldrb	r3, [r6, #12]
    edea:	2b00      	cmp	r3, #0
    edec:	d15e      	bne.n	eeac <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    edee:	2200      	movs	r2, #0
    edf0:	2300      	movs	r3, #0
    edf2:	483e      	ldr	r0, [pc, #248]	; (eeec <hci_tx_thread+0x170>)
    edf4:	f004 fcb6 	bl	13764 <net_buf_get>
	BT_ASSERT(buf);
    edf8:	4604      	mov	r4, r0
    edfa:	b960      	cbnz	r0, ee16 <hci_tx_thread+0x9a>
    edfc:	f640 1373 	movw	r3, #2419	; 0x973
    ee00:	464a      	mov	r2, r9
    ee02:	493b      	ldr	r1, [pc, #236]	; (eef0 <hci_tx_thread+0x174>)
    ee04:	4838      	ldr	r0, [pc, #224]	; (eee8 <hci_tx_thread+0x16c>)
    ee06:	f00c ff97 	bl	1bd38 <assert_print>
    ee0a:	4040      	eors	r0, r0
    ee0c:	f380 8811 	msr	BASEPRI, r0
    ee10:	f04f 0003 	mov.w	r0, #3
    ee14:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    ee16:	f8df b0dc 	ldr.w	fp, [pc, #220]	; eef4 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
    ee1a:	f04f 33ff 	mov.w	r3, #4294967295
    ee1e:	f04f 32ff 	mov.w	r2, #4294967295
    ee22:	4835      	ldr	r0, [pc, #212]	; (eef8 <hci_tx_thread+0x17c>)
    ee24:	f009 fd20 	bl	18868 <z_impl_k_sem_take>
    ee28:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
    ee2c:	b18b      	cbz	r3, ee52 <hci_tx_thread+0xd6>
		BT_ERR("Uncleared pending sent_cmd");
    ee2e:	4b33      	ldr	r3, [pc, #204]	; (eefc <hci_tx_thread+0x180>)
    ee30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ee34:	617b      	str	r3, [r7, #20]
    ee36:	2302      	movs	r3, #2
    ee38:	4831      	ldr	r0, [pc, #196]	; (ef00 <hci_tx_thread+0x184>)
    ee3a:	613b      	str	r3, [r7, #16]
    ee3c:	f107 0210 	add.w	r2, r7, #16
    ee40:	f00e f818 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    ee44:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
    ee48:	f004 fdfe 	bl	13a48 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ee4c:	2300      	movs	r3, #0
    ee4e:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    ee52:	4620      	mov	r0, r4
    ee54:	f004 fe3c 	bl	13ad0 <net_buf_ref>
    ee58:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
    ee5c:	4620      	mov	r0, r4
    ee5e:	f7ff fe73 	bl	eb48 <bt_send>
	if (err) {
    ee62:	b300      	cbz	r0, eea6 <hci_tx_thread+0x12a>
		BT_ERR("Unable to send to driver (err %d)", err);
    ee64:	46eb      	mov	fp, sp
    ee66:	b088      	sub	sp, #32
    ee68:	466a      	mov	r2, sp
    ee6a:	4b26      	ldr	r3, [pc, #152]	; (ef04 <hci_tx_thread+0x188>)
    ee6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ee70:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ee74:	2303      	movs	r3, #3
    ee76:	4822      	ldr	r0, [pc, #136]	; (ef00 <hci_tx_thread+0x184>)
    ee78:	f842 3f10 	str.w	r3, [r2, #16]!
    ee7c:	f00d fffa 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    ee80:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    ee82:	481d      	ldr	r0, [pc, #116]	; (eef8 <hci_tx_thread+0x17c>)
    ee84:	f009 fcac 	bl	187e0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    ee88:	4620      	mov	r0, r4
    ee8a:	f004 fb4b 	bl	13524 <net_buf_id>
    ee8e:	220c      	movs	r2, #12
    ee90:	4b1d      	ldr	r3, [pc, #116]	; (ef08 <hci_tx_thread+0x18c>)
    ee92:	211f      	movs	r1, #31
    ee94:	fb02 3000 	mla	r0, r2, r0, r3
    ee98:	4622      	mov	r2, r4
    ee9a:	8840      	ldrh	r0, [r0, #2]
    ee9c:	f7ff fa2c 	bl	e2f8 <hci_cmd_done>
		net_buf_unref(buf);
    eea0:	4620      	mov	r0, r4
    eea2:	f004 fdd1 	bl	13a48 <net_buf_unref>
	for (; count; ev++, count--) {
    eea6:	3614      	adds	r6, #20
    eea8:	3d01      	subs	r5, #1
    eeaa:	e792      	b.n	edd2 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    eeac:	2b01      	cmp	r3, #1
    eeae:	d1fa      	bne.n	eea6 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
    eeb0:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    eeb2:	3838      	subs	r0, #56	; 0x38
    eeb4:	f002 f82c 	bl	10f10 <bt_conn_process_tx>
    eeb8:	e7f5      	b.n	eea6 <hci_tx_thread+0x12a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    eeba:	466c      	mov	r4, sp
    eebc:	b088      	sub	sp, #32
    eebe:	466a      	mov	r2, sp
    eec0:	4912      	ldr	r1, [pc, #72]	; (ef0c <hci_tx_thread+0x190>)
    eec2:	480f      	ldr	r0, [pc, #60]	; (ef00 <hci_tx_thread+0x184>)
		switch (ev->state) {
    eec4:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    eec8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    eecc:	f842 af10 	str.w	sl, [r2, #16]!
    eed0:	f00d ffd0 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    eed4:	46a5      	mov	sp, r4
    eed6:	e7e6      	b.n	eea6 <hci_tx_thread+0x12a>
    eed8:	200081bc 	.word	0x200081bc
    eedc:	00021af3 	.word	0x00021af3
    eee0:	200081d0 	.word	0x200081d0
    eee4:	00020aad 	.word	0x00020aad
    eee8:	000205a4 	.word	0x000205a4
    eeec:	2000813c 	.word	0x2000813c
    eef0:	000219e0 	.word	0x000219e0
    eef4:	20008000 	.word	0x20008000
    eef8:	20008118 	.word	0x20008118
    eefc:	00021e03 	.word	0x00021e03
    ef00:	0001f8d8 	.word	0x0001f8d8
    ef04:	00021d69 	.word	0x00021d69
    ef08:	20009714 	.word	0x20009714
    ef0c:	00021e1e 	.word	0x00021e1e

0000ef10 <hci_event_prio>:
{
    ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef14:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    ef16:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    ef1a:	4630      	mov	r0, r6
    ef1c:	f00f f8d1 	bl	1e0c2 <net_buf_simple_headroom>
	state->len = buf->len;
    ef20:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    ef24:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ef26:	f1b8 0f01 	cmp.w	r8, #1
    ef2a:	d80c      	bhi.n	ef46 <hci_event_prio+0x36>
    ef2c:	f640 5377 	movw	r3, #3447	; 0xd77
    ef30:	4a1b      	ldr	r2, [pc, #108]	; (efa0 <hci_event_prio+0x90>)
    ef32:	491c      	ldr	r1, [pc, #112]	; (efa4 <hci_event_prio+0x94>)
    ef34:	481c      	ldr	r0, [pc, #112]	; (efa8 <hci_event_prio+0x98>)
    ef36:	f00c feff 	bl	1bd38 <assert_print>
    ef3a:	4040      	eors	r0, r0
    ef3c:	f380 8811 	msr	BASEPRI, r0
    ef40:	f04f 0003 	mov.w	r0, #3
    ef44:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    ef46:	4630      	mov	r0, r6
    ef48:	2102      	movs	r1, #2
    ef4a:	f004 fe81 	bl	13c50 <net_buf_simple_pull_mem>
    ef4e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ef50:	7800      	ldrb	r0, [r0, #0]
    ef52:	f00d ff6e 	bl	1ce32 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    ef56:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ef58:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    ef5a:	d40c      	bmi.n	ef76 <hci_event_prio+0x66>
    ef5c:	f640 537b 	movw	r3, #3451	; 0xd7b
    ef60:	4a0f      	ldr	r2, [pc, #60]	; (efa0 <hci_event_prio+0x90>)
    ef62:	4912      	ldr	r1, [pc, #72]	; (efac <hci_event_prio+0x9c>)
    ef64:	4810      	ldr	r0, [pc, #64]	; (efa8 <hci_event_prio+0x98>)
    ef66:	f00c fee7 	bl	1bd38 <assert_print>
    ef6a:	4040      	eors	r0, r0
    ef6c:	f380 8811 	msr	BASEPRI, r0
    ef70:	f04f 0003 	mov.w	r0, #3
    ef74:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    ef76:	2305      	movs	r3, #5
    ef78:	4621      	mov	r1, r4
    ef7a:	4a0d      	ldr	r2, [pc, #52]	; (efb0 <hci_event_prio+0xa0>)
    ef7c:	7838      	ldrb	r0, [r7, #0]
    ef7e:	f7ff f883 	bl	e088 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    ef82:	07b3      	lsls	r3, r6, #30
    ef84:	d507      	bpl.n	ef96 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    ef86:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    ef88:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ef8c:	fa13 f585 	uxtah	r5, r3, r5
    ef90:	60a5      	str	r5, [r4, #8]
}
    ef92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    ef96:	4620      	mov	r0, r4
}
    ef98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    ef9c:	f004 bd54 	b.w	13a48 <net_buf_unref>
    efa0:	00021af3 	.word	0x00021af3
    efa4:	00021b27 	.word	0x00021b27
    efa8:	000205a4 	.word	0x000205a4
    efac:	00021e3f 	.word	0x00021e3f
    efb0:	0001fcf8 	.word	0x0001fcf8

0000efb4 <bt_recv>:
{
    efb4:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    efb6:	7d03      	ldrb	r3, [r0, #20]
    efb8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    efba:	2b01      	cmp	r3, #1
{
    efbc:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    efbe:	d006      	beq.n	efce <bt_recv+0x1a>
    efc0:	2b03      	cmp	r3, #3
    efc2:	d112      	bne.n	efea <bt_recv+0x36>
			rx_queue_put(buf);
    efc4:	f7fe ff8c 	bl	dee0 <rx_queue_put>
		return 0;
    efc8:	2000      	movs	r0, #0
}
    efca:	46bd      	mov	sp, r7
    efcc:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    efce:	6883      	ldr	r3, [r0, #8]
    efd0:	7818      	ldrb	r0, [r3, #0]
    efd2:	f00d ff2e 	bl	1ce32 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    efd6:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    efd8:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    efda:	d502      	bpl.n	efe2 <bt_recv+0x2e>
			hci_event_prio(buf);
    efdc:	4620      	mov	r0, r4
    efde:	f7ff ff97 	bl	ef10 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    efe2:	07ab      	lsls	r3, r5, #30
    efe4:	d5f0      	bpl.n	efc8 <bt_recv+0x14>
			rx_queue_put(buf);
    efe6:	4620      	mov	r0, r4
    efe8:	e7ec      	b.n	efc4 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    efea:	466d      	mov	r5, sp
    efec:	b088      	sub	sp, #32
    efee:	466a      	mov	r2, sp
    eff0:	4908      	ldr	r1, [pc, #32]	; (f014 <bt_recv+0x60>)
    eff2:	4809      	ldr	r0, [pc, #36]	; (f018 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
    eff4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    eff8:	2303      	movs	r3, #3
    effa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    effe:	f842 3f10 	str.w	r3, [r2, #16]!
    f002:	f00d ff37 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    f006:	4620      	mov	r0, r4
    f008:	46ad      	mov	sp, r5
    f00a:	f004 fd1d 	bl	13a48 <net_buf_unref>
		return -EINVAL;
    f00e:	f06f 0015 	mvn.w	r0, #21
    f012:	e7da      	b.n	efca <bt_recv+0x16>
    f014:	00021e58 	.word	0x00021e58
    f018:	0001f8d8 	.word	0x0001f8d8

0000f01c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    f01c:	4a08      	ldr	r2, [pc, #32]	; (f040 <bt_hci_driver_register+0x24>)
{
    f01e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    f020:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
    f024:	b930      	cbnz	r0, f034 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    f026:	68d9      	ldr	r1, [r3, #12]
    f028:	b139      	cbz	r1, f03a <bt_hci_driver_register+0x1e>
    f02a:	6959      	ldr	r1, [r3, #20]
    f02c:	b129      	cbz	r1, f03a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    f02e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	return 0;
    f032:	4770      	bx	lr
		return -EALREADY;
    f034:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f038:	4770      	bx	lr
		return -EINVAL;
    f03a:	f06f 0015 	mvn.w	r0, #21
}
    f03e:	4770      	bx	lr
    f040:	20008000 	.word	0x20008000

0000f044 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f044:	2104      	movs	r1, #4
    f046:	4801      	ldr	r0, [pc, #4]	; (f04c <bt_finalize_init+0x8>)
    f048:	f00d bf09 	b.w	1ce5e <atomic_or>
    f04c:	200080cc 	.word	0x200080cc

0000f050 <bt_init>:
{
    f050:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f052:	4d63      	ldr	r5, [pc, #396]	; (f1e0 <bt_init+0x190>)
{
    f054:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f056:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    f05a:	6899      	ldr	r1, [r3, #8]
    f05c:	f011 0101 	ands.w	r1, r1, #1
    f060:	d11a      	bne.n	f098 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f062:	f640 4003 	movw	r0, #3075	; 0xc03
    f066:	aa01      	add	r2, sp, #4
    f068:	f7ff faf8 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    f06c:	4604      	mov	r4, r0
    f06e:	2800      	cmp	r0, #0
    f070:	f040 80b2 	bne.w	f1d8 <bt_init+0x188>
		hci_reset_complete(rsp);
    f074:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    f076:	6883      	ldr	r3, [r0, #8]
	if (status) {
    f078:	781b      	ldrb	r3, [r3, #0]
    f07a:	b95b      	cbnz	r3, f094 <bt_init+0x44>
    f07c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    f080:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f084:	f002 0209 	and.w	r2, r2, #9
    f088:	e8d3 1fef 	ldaex	r1, [r3]
    f08c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    f090:	2c00      	cmp	r4, #0
    f092:	d1f9      	bne.n	f088 <bt_init+0x38>
		net_buf_unref(rsp);
    f094:	f004 fcd8 	bl	13a48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f098:	2100      	movs	r1, #0
    f09a:	f241 0003 	movw	r0, #4099	; 0x1003
    f09e:	aa01      	add	r2, sp, #4
    f0a0:	f7ff fadc 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f0a4:	4604      	mov	r4, r0
    f0a6:	2800      	cmp	r0, #0
    f0a8:	f040 8096 	bne.w	f1d8 <bt_init+0x188>
	read_local_features_complete(rsp);
    f0ac:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f0ae:	2208      	movs	r2, #8
    f0b0:	68b1      	ldr	r1, [r6, #8]
    f0b2:	484c      	ldr	r0, [pc, #304]	; (f1e4 <bt_init+0x194>)
    f0b4:	3101      	adds	r1, #1
    f0b6:	f00d fe4e 	bl	1cd56 <memcpy>
	net_buf_unref(rsp);
    f0ba:	4630      	mov	r0, r6
    f0bc:	f004 fcc4 	bl	13a48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f0c0:	4621      	mov	r1, r4
    f0c2:	f241 0001 	movw	r0, #4097	; 0x1001
    f0c6:	aa01      	add	r2, sp, #4
    f0c8:	f7ff fac8 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f0cc:	4604      	mov	r4, r0
    f0ce:	2800      	cmp	r0, #0
    f0d0:	f040 8082 	bne.w	f1d8 <bt_init+0x188>
	read_local_ver_complete(rsp);
    f0d4:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    f0d6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f0d8:	785a      	ldrb	r2, [r3, #1]
    f0da:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f0de:	885a      	ldrh	r2, [r3, #2]
    f0e0:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    f0e4:	791a      	ldrb	r2, [r3, #4]
    f0e6:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f0ea:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    f0ee:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f0f2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    f0f6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    f0fa:	f004 fca5 	bl	13a48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f0fe:	4621      	mov	r1, r4
    f100:	f241 0002 	movw	r0, #4098	; 0x1002
    f104:	aa01      	add	r2, sp, #4
    f106:	f7ff faa9 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f10a:	4604      	mov	r4, r0
    f10c:	2800      	cmp	r0, #0
    f10e:	d163      	bne.n	f1d8 <bt_init+0x188>
	read_supported_commands_complete(rsp);
    f110:	9c01      	ldr	r4, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    f112:	2240      	movs	r2, #64	; 0x40
    f114:	68a1      	ldr	r1, [r4, #8]
    f116:	4834      	ldr	r0, [pc, #208]	; (f1e8 <bt_init+0x198>)
    f118:	3101      	adds	r1, #1
    f11a:	f00d fe1c 	bl	1cd56 <memcpy>
	net_buf_unref(rsp);
    f11e:	4620      	mov	r0, r4
    f120:	f004 fc92 	bl	13a48 <net_buf_unref>
		err = prng_init();
    f124:	f000 ffd4 	bl	100d0 <prng_init>
		if (err) {
    f128:	4604      	mov	r4, r0
    f12a:	2800      	cmp	r0, #0
    f12c:	d154      	bne.n	f1d8 <bt_init+0x188>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f12e:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f132:	069f      	lsls	r7, r3, #26
    f134:	d41a      	bmi.n	f16c <bt_init+0x11c>
		BT_WARN("Controller to host flow control not supported");
    f136:	4b2d      	ldr	r3, [pc, #180]	; (f1ec <bt_init+0x19c>)
    f138:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f13c:	9307      	str	r3, [sp, #28]
    f13e:	2302      	movs	r3, #2
    f140:	482b      	ldr	r0, [pc, #172]	; (f1f0 <bt_init+0x1a0>)
    f142:	aa06      	add	r2, sp, #24
    f144:	9306      	str	r3, [sp, #24]
    f146:	f00d fe95 	bl	1ce74 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f14a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    f14e:	065e      	lsls	r6, r3, #25
    f150:	d452      	bmi.n	f1f8 <bt_init+0x1a8>
		BT_ERR("Non-LE capable controller detected!");
    f152:	4b28      	ldr	r3, [pc, #160]	; (f1f4 <bt_init+0x1a4>)
    f154:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f158:	9307      	str	r3, [sp, #28]
    f15a:	2302      	movs	r3, #2
    f15c:	4824      	ldr	r0, [pc, #144]	; (f1f0 <bt_init+0x1a0>)
    f15e:	aa06      	add	r2, sp, #24
    f160:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    f162:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
    f166:	f00d fe85 	bl	1ce74 <z_log_msg_static_create.constprop.0>
	if (err) {
    f16a:	e035      	b.n	f1d8 <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    f16c:	2107      	movs	r1, #7
    f16e:	f640 4033 	movw	r0, #3123	; 0xc33
    f172:	f7ff fa25 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    f176:	4607      	mov	r7, r0
    f178:	2800      	cmp	r0, #0
    f17a:	f000 8121 	beq.w	f3c0 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    f17e:	2107      	movs	r1, #7
    f180:	3008      	adds	r0, #8
    f182:	f004 fd83 	bl	13c8c <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    f186:	4621      	mov	r1, r4
    f188:	2207      	movs	r2, #7
    f18a:	4606      	mov	r6, r0
    f18c:	f00d fdee 	bl	1cd6c <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    f190:	231b      	movs	r3, #27
    f192:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    f194:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f196:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    f198:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    f19a:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f19c:	4639      	mov	r1, r7
    f19e:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    f1a2:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f1a4:	f7ff fa5a 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f1a8:	4604      	mov	r4, r0
    f1aa:	b9a8      	cbnz	r0, f1d8 <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    f1ac:	2101      	movs	r1, #1
    f1ae:	f640 4031 	movw	r0, #3121	; 0xc31
    f1b2:	f7ff fa05 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    f1b6:	4606      	mov	r6, r0
    f1b8:	2800      	cmp	r0, #0
    f1ba:	f000 8101 	beq.w	f3c0 <bt_init+0x370>
	return net_buf_simple_add_u8(&buf->b, val);
    f1be:	2101      	movs	r1, #1
    f1c0:	3008      	adds	r0, #8
    f1c2:	f00e ff96 	bl	1e0f2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    f1c6:	4622      	mov	r2, r4
    f1c8:	4631      	mov	r1, r6
    f1ca:	f640 4031 	movw	r0, #3121	; 0xc31
    f1ce:	f7ff fa45 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f1d2:	4604      	mov	r4, r0
    f1d4:	2800      	cmp	r0, #0
    f1d6:	d0b8      	beq.n	f14a <bt_init+0xfa>
}
    f1d8:	4620      	mov	r0, r4
    f1da:	b009      	add	sp, #36	; 0x24
    f1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1de:	bf00      	nop
    f1e0:	20008000 	.word	0x20008000
    f1e4:	20008070 	.word	0x20008070
    f1e8:	20008078 	.word	0x20008078
    f1ec:	00021e6c 	.word	0x00021e6c
    f1f0:	0001f8d8 	.word	0x0001f8d8
    f1f4:	00021e9a 	.word	0x00021e9a
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f1f8:	2100      	movs	r1, #0
    f1fa:	f242 0003 	movw	r0, #8195	; 0x2003
    f1fe:	aa02      	add	r2, sp, #8
    f200:	f7ff fa2c 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f204:	4604      	mov	r4, r0
    f206:	2800      	cmp	r0, #0
    f208:	d1e6      	bne.n	f1d8 <bt_init+0x188>
	read_le_features_complete(rsp);
    f20a:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f20c:	2208      	movs	r2, #8
    f20e:	68b1      	ldr	r1, [r6, #8]
    f210:	48a9      	ldr	r0, [pc, #676]	; (f4b8 <bt_init+0x468>)
    f212:	3101      	adds	r1, #1
    f214:	f00d fd9f 	bl	1cd56 <memcpy>
	net_buf_unref(rsp);
    f218:	4630      	mov	r0, r6
    f21a:	f004 fc15 	bl	13a48 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f21e:	4621      	mov	r1, r4
    f220:	f242 0002 	movw	r0, #8194	; 0x2002
    f224:	aa02      	add	r2, sp, #8
    f226:	f7ff fa19 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    f22a:	4604      	mov	r4, r0
    f22c:	2800      	cmp	r0, #0
    f22e:	d1d3      	bne.n	f1d8 <bt_init+0x188>
		le_read_buffer_size_complete(rsp);
    f230:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    f232:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f234:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f238:	b291      	uxth	r1, r2
    f23a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    f23e:	b121      	cbz	r1, f24a <bt_init+0x1fa>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f240:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f242:	489e      	ldr	r0, [pc, #632]	; (f4bc <bt_init+0x46c>)
    f244:	4611      	mov	r1, r2
    f246:	f00f ff52 	bl	1f0ee <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f24a:	4620      	mov	r0, r4
    f24c:	f004 fbfc 	bl	13a48 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f250:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    f254:	f016 0620 	ands.w	r6, r6, #32
    f258:	d118      	bne.n	f28c <bt_init+0x23c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f25a:	2102      	movs	r1, #2
    f25c:	f640 406d 	movw	r0, #3181	; 0xc6d
    f260:	f7ff f9ae 	bl	e5c0 <bt_hci_cmd_create>
		if (!buf) {
    f264:	4604      	mov	r4, r0
    f266:	2800      	cmp	r0, #0
    f268:	f000 80aa 	beq.w	f3c0 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    f26c:	2102      	movs	r1, #2
    f26e:	3008      	adds	r0, #8
    f270:	f004 fd0c 	bl	13c8c <net_buf_simple_add>
		cp_le->le = 0x01;
    f274:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f276:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    f278:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f27a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f27c:	4632      	mov	r2, r6
    f27e:	f640 406d 	movw	r0, #3181	; 0xc6d
    f282:	f7ff f9eb 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    f286:	4604      	mov	r4, r0
    f288:	2800      	cmp	r0, #0
    f28a:	d1a5      	bne.n	f1d8 <bt_init+0x188>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f28c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    f290:	071c      	lsls	r4, r3, #28
    f292:	d512      	bpl.n	f2ba <bt_init+0x26a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f294:	2100      	movs	r1, #0
    f296:	f242 001c 	movw	r0, #8220	; 0x201c
    f29a:	aa02      	add	r2, sp, #8
    f29c:	f7ff f9de 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    f2a0:	4604      	mov	r4, r0
    f2a2:	2800      	cmp	r0, #0
    f2a4:	d198      	bne.n	f1d8 <bt_init+0x188>
		le_read_supp_states_complete(rsp);
    f2a6:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f2a8:	6883      	ldr	r3, [r0, #8]
    f2aa:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f2ae:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f2b2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    f2b6:	f004 fbc7 	bl	13a48 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f2ba:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    f2be:	0698      	lsls	r0, r3, #26
    f2c0:	d523      	bpl.n	f30a <bt_init+0x2ba>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f2c2:	a901      	add	r1, sp, #4
    f2c4:	f10d 0002 	add.w	r0, sp, #2
    f2c8:	f7ff fa44 	bl	e754 <hci_le_read_max_data_len>
		if (err) {
    f2cc:	4604      	mov	r4, r0
    f2ce:	2800      	cmp	r0, #0
    f2d0:	d182      	bne.n	f1d8 <bt_init+0x188>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f2d2:	2104      	movs	r1, #4
    f2d4:	f242 0024 	movw	r0, #8228	; 0x2024
    f2d8:	f7ff f972 	bl	e5c0 <bt_hci_cmd_create>
		if (!buf) {
    f2dc:	4606      	mov	r6, r0
    f2de:	2800      	cmp	r0, #0
    f2e0:	d06e      	beq.n	f3c0 <bt_init+0x370>
    f2e2:	2104      	movs	r1, #4
    f2e4:	3008      	adds	r0, #8
    f2e6:	f004 fcd1 	bl	13c8c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f2ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f2ee:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f2f0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f2f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f2f6:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f2f8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f2fa:	f242 0024 	movw	r0, #8228	; 0x2024
    f2fe:	f7ff f9ad 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    f302:	4604      	mov	r4, r0
    f304:	2800      	cmp	r0, #0
    f306:	f47f af67 	bne.w	f1d8 <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f30a:	2108      	movs	r1, #8
    f30c:	f242 0001 	movw	r0, #8193	; 0x2001
    f310:	f7ff f956 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    f314:	4604      	mov	r4, r0
    f316:	2800      	cmp	r0, #0
    f318:	d052      	beq.n	f3c0 <bt_init+0x370>
    f31a:	2108      	movs	r1, #8
    f31c:	4408      	add	r0, r1
    f31e:	f004 fcb5 	bl	13c8c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f322:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f326:	f012 0f02 	tst.w	r2, #2
    f32a:	bf14      	ite	ne
    f32c:	232f      	movne	r3, #47	; 0x2f
    f32e:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f330:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f332:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f336:	bf48      	it	mi
    f338:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f33c:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    f340:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f344:	bf18      	it	ne
    f346:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    f34a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f34c:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f350:	4621      	mov	r1, r4
    f352:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    f354:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f356:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    f358:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f35a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f35c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f35e:	71c2      	strb	r2, [r0, #7]
    f360:	f242 0001 	movw	r0, #8193	; 0x2001
    f364:	f7ff f97a 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f368:	4604      	mov	r4, r0
    f36a:	2800      	cmp	r0, #0
    f36c:	f47f af34 	bne.w	f1d8 <bt_init+0x188>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f370:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    f374:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f378:	069a      	lsls	r2, r3, #26
    f37a:	d424      	bmi.n	f3c6 <bt_init+0x376>
	if (bt_dev.le.acl_mtu) {
    f37c:	b9c9      	cbnz	r1, f3b2 <bt_init+0x362>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f37e:	f241 0005 	movw	r0, #4101	; 0x1005
    f382:	aa02      	add	r2, sp, #8
    f384:	f7ff f96a 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f388:	4604      	mov	r4, r0
    f38a:	2800      	cmp	r0, #0
    f38c:	f47f af24 	bne.w	f1d8 <bt_init+0x188>
	if (bt_dev.le.acl_mtu) {
    f390:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    f394:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    f396:	b94b      	cbnz	r3, f3ac <bt_init+0x35c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    f398:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f39a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f39e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f3a2:	889a      	ldrh	r2, [r3, #4]
    f3a4:	4845      	ldr	r0, [pc, #276]	; (f4bc <bt_init+0x46c>)
    f3a6:	4611      	mov	r1, r2
    f3a8:	f00f fea1 	bl	1f0ee <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f3ac:	4620      	mov	r0, r4
    f3ae:	f004 fb4b 	bl	13a48 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f3b2:	2108      	movs	r1, #8
    f3b4:	f640 4001 	movw	r0, #3073	; 0xc01
    f3b8:	f7ff f902 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    f3bc:	4604      	mov	r4, r0
    f3be:	b988      	cbnz	r0, f3e4 <bt_init+0x394>
		return -ENOBUFS;
    f3c0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f3c4:	e708      	b.n	f1d8 <bt_init+0x188>
	else if (!bt_dev.le.acl_mtu) {
    f3c6:	2900      	cmp	r1, #0
    f3c8:	d1f3      	bne.n	f3b2 <bt_init+0x362>
		BT_ERR("ACL BR/EDR buffers not initialized");
    f3ca:	4b3d      	ldr	r3, [pc, #244]	; (f4c0 <bt_init+0x470>)
    f3cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f3d0:	9307      	str	r3, [sp, #28]
    f3d2:	2302      	movs	r3, #2
    f3d4:	483b      	ldr	r0, [pc, #236]	; (f4c4 <bt_init+0x474>)
    f3d6:	aa06      	add	r2, sp, #24
    f3d8:	9306      	str	r3, [sp, #24]
		return -EIO;
    f3da:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
    f3de:	f00d fd49 	bl	1ce74 <z_log_msg_static_create.constprop.0>
	if (err) {
    f3e2:	e6f9      	b.n	f1d8 <bt_init+0x188>
    f3e4:	2108      	movs	r1, #8
    f3e6:	4408      	add	r0, r1
    f3e8:	f004 fc50 	bl	13c8c <net_buf_simple_add>
	dst[0] = val;
    f3ec:	2310      	movs	r3, #16
    f3ee:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f3f0:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    f3f2:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    f3f4:	7043      	strb	r3, [r0, #1]
    f3f6:	2602      	movs	r6, #2
    f3f8:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f3fa:	4621      	mov	r1, r4
	dst[0] = val;
    f3fc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f3fe:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    f400:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f402:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f404:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f406:	71c3      	strb	r3, [r0, #7]
    f408:	f640 4001 	movw	r0, #3073	; 0xc01
    f40c:	f7ff f926 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f410:	4604      	mov	r4, r0
    f412:	2800      	cmp	r0, #0
    f414:	f47f aee0 	bne.w	f1d8 <bt_init+0x188>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f418:	4601      	mov	r1, r0
    f41a:	aa01      	add	r2, sp, #4
    f41c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f420:	f7ff f91c 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f424:	4604      	mov	r4, r0
    f426:	b1b8      	cbz	r0, f458 <bt_init+0x408>
		BT_WARN("Vendor HCI extensions not available");
    f428:	4b27      	ldr	r3, [pc, #156]	; (f4c8 <bt_init+0x478>)
			BT_WARN("Failed to read supported vendor features");
    f42a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f42e:	4825      	ldr	r0, [pc, #148]	; (f4c4 <bt_init+0x474>)
    f430:	aa06      	add	r2, sp, #24
    f432:	e9cd 6306 	strd	r6, r3, [sp, #24]
    f436:	f00d fd1d 	bl	1ce74 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    f43a:	f000 faf1 	bl	fa20 <bt_id_init>
	if (err) {
    f43e:	4604      	mov	r4, r0
    f440:	2800      	cmp	r0, #0
    f442:	f47f aec9 	bne.w	f1d8 <bt_init+0x188>
		err = bt_conn_init();
    f446:	f001 fdd7 	bl	10ff8 <bt_conn_init>
		if (err) {
    f44a:	4604      	mov	r4, r0
    f44c:	2800      	cmp	r0, #0
    f44e:	f47f aec3 	bne.w	f1d8 <bt_init+0x188>
	bt_finalize_init();
    f452:	f7ff fdf7 	bl	f044 <bt_finalize_init>
	return 0;
    f456:	e6bf      	b.n	f1d8 <bt_init+0x188>
	net_buf_unref(rsp);
    f458:	9801      	ldr	r0, [sp, #4]
    f45a:	f004 faf5 	bl	13a48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f45e:	4621      	mov	r1, r4
    f460:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f464:	aa01      	add	r2, sp, #4
    f466:	f7ff f8f9 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f46a:	4604      	mov	r4, r0
    f46c:	b108      	cbz	r0, f472 <bt_init+0x422>
		BT_WARN("Failed to read supported vendor commands");
    f46e:	4b17      	ldr	r3, [pc, #92]	; (f4cc <bt_init+0x47c>)
    f470:	e7db      	b.n	f42a <bt_init+0x3da>
	rp.cmds = (void *)rsp->data;
    f472:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f474:	4632      	mov	r2, r6
    f476:	68b9      	ldr	r1, [r7, #8]
    f478:	4815      	ldr	r0, [pc, #84]	; (f4d0 <bt_init+0x480>)
    f47a:	3101      	adds	r1, #1
    f47c:	f00d fc6b 	bl	1cd56 <memcpy>
	net_buf_unref(rsp);
    f480:	4638      	mov	r0, r7
    f482:	f004 fae1 	bl	13a48 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f486:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    f48a:	075b      	lsls	r3, r3, #29
    f48c:	d5d5      	bpl.n	f43a <bt_init+0x3ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f48e:	4621      	mov	r1, r4
    f490:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f494:	aa01      	add	r2, sp, #4
    f496:	f7ff f8e1 	bl	e65c <bt_hci_cmd_send_sync>
		if (err) {
    f49a:	b108      	cbz	r0, f4a0 <bt_init+0x450>
			BT_WARN("Failed to read supported vendor features");
    f49c:	4b0d      	ldr	r3, [pc, #52]	; (f4d4 <bt_init+0x484>)
    f49e:	e7c4      	b.n	f42a <bt_init+0x3da>
		memcpy(bt_dev.vs_features, rp.feat->features,
    f4a0:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    f4a2:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f4a4:	480c      	ldr	r0, [pc, #48]	; (f4d8 <bt_init+0x488>)
    f4a6:	68a1      	ldr	r1, [r4, #8]
    f4a8:	4411      	add	r1, r2
    f4aa:	f00d fc54 	bl	1cd56 <memcpy>
		net_buf_unref(rsp);
    f4ae:	4620      	mov	r0, r4
    f4b0:	f004 faca 	bl	13a48 <net_buf_unref>
    f4b4:	e7c1      	b.n	f43a <bt_init+0x3ea>
    f4b6:	bf00      	nop
    f4b8:	200080d0 	.word	0x200080d0
    f4bc:	20008100 	.word	0x20008100
    f4c0:	00021ebe 	.word	0x00021ebe
    f4c4:	0001f8d8 	.word	0x0001f8d8
    f4c8:	00021ee1 	.word	0x00021ee1
    f4cc:	00021f05 	.word	0x00021f05
    f4d0:	200080b9 	.word	0x200080b9
    f4d4:	00021f2e 	.word	0x00021f2e
    f4d8:	200080b8 	.word	0x200080b8

0000f4dc <init_work>:
{
    f4dc:	b510      	push	{r4, lr}
	err = bt_init();
    f4de:	f7ff fdb7 	bl	f050 <bt_init>
	if (ready_cb) {
    f4e2:	4b03      	ldr	r3, [pc, #12]	; (f4f0 <init_work+0x14>)
    f4e4:	681b      	ldr	r3, [r3, #0]
    f4e6:	b113      	cbz	r3, f4ee <init_work+0x12>
}
    f4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f4ec:	4718      	bx	r3
}
    f4ee:	bd10      	pop	{r4, pc}
    f4f0:	2000978c 	.word	0x2000978c

0000f4f4 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    f4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4f6:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
    f4f8:	4d3b      	ldr	r5, [pc, #236]	; (f5e8 <bt_enable+0xf4>)
{
    f4fa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f4fc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
{
    f500:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    f502:	b983      	cbnz	r3, f526 <bt_enable+0x32>
		BT_ERR("No HCI driver registered");
    f504:	4b39      	ldr	r3, [pc, #228]	; (f5ec <bt_enable+0xf8>)
		return -ENODEV;
    f506:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
    f50a:	617b      	str	r3, [r7, #20]
    f50c:	2302      	movs	r3, #2
    f50e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f512:	4837      	ldr	r0, [pc, #220]	; (f5f0 <bt_enable+0xfc>)
    f514:	613b      	str	r3, [r7, #16]
    f516:	f107 0210 	add.w	r2, r7, #16
    f51a:	f00d fcab 	bl	1ce74 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    f51e:	4620      	mov	r0, r4
    f520:	371c      	adds	r7, #28
    f522:	46bd      	mov	sp, r7
    f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f526:	f06f 0102 	mvn.w	r1, #2
    f52a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    f52e:	f00d fca4 	bl	1ce7a <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f532:	2101      	movs	r1, #1
    f534:	f00d fc93 	bl	1ce5e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f538:	ea10 0401 	ands.w	r4, r0, r1
    f53c:	d150      	bne.n	f5e0 <bt_enable+0xec>
	ready_cb = cb;
    f53e:	4b2d      	ldr	r3, [pc, #180]	; (f5f4 <bt_enable+0x100>)
    f540:	601e      	str	r6, [r3, #0]
    f542:	460a      	mov	r2, r1
    f544:	f505 708c 	add.w	r0, r5, #280	; 0x118
    f548:	f00f fdd1 	bl	1f0ee <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    f54c:	f505 709e 	add.w	r0, r5, #316	; 0x13c
    f550:	f00f fdab 	bl	1f0aa <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f554:	2200      	movs	r2, #0
    f556:	2300      	movs	r3, #0
    f558:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f55c:	f06f 0308 	mvn.w	r3, #8
    f560:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f564:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f568:	e9cd 4400 	strd	r4, r4, [sp]
    f56c:	4b22      	ldr	r3, [pc, #136]	; (f5f8 <bt_enable+0x104>)
    f56e:	4923      	ldr	r1, [pc, #140]	; (f5fc <bt_enable+0x108>)
    f570:	9404      	str	r4, [sp, #16]
    f572:	4823      	ldr	r0, [pc, #140]	; (f600 <bt_enable+0x10c>)
    f574:	f008 fd54 	bl	18020 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f578:	4922      	ldr	r1, [pc, #136]	; (f604 <bt_enable+0x110>)
    f57a:	4821      	ldr	r0, [pc, #132]	; (f600 <bt_enable+0x10c>)
    f57c:	f00f fd6c 	bl	1f058 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    f580:	4821      	ldr	r0, [pc, #132]	; (f608 <bt_enable+0x114>)
    f582:	f009 fca1 	bl	18ec8 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    f586:	f06f 0307 	mvn.w	r3, #7
    f58a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    f58e:	491f      	ldr	r1, [pc, #124]	; (f60c <bt_enable+0x118>)
    f590:	481d      	ldr	r0, [pc, #116]	; (f608 <bt_enable+0x114>)
    f592:	9400      	str	r4, [sp, #0]
    f594:	f009 fcb2 	bl	18efc <k_work_queue_start>
    f598:	491d      	ldr	r1, [pc, #116]	; (f610 <bt_enable+0x11c>)
    f59a:	481b      	ldr	r0, [pc, #108]	; (f608 <bt_enable+0x114>)
    f59c:	f00f fd5c 	bl	1f058 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    f5a0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    f5a4:	68db      	ldr	r3, [r3, #12]
    f5a6:	4798      	blx	r3
	if (err) {
    f5a8:	4604      	mov	r4, r0
    f5aa:	b178      	cbz	r0, f5cc <bt_enable+0xd8>
		BT_ERR("HCI driver open failed (%d)", err);
    f5ac:	466d      	mov	r5, sp
    f5ae:	b088      	sub	sp, #32
    f5b0:	462a      	mov	r2, r5
    f5b2:	4b18      	ldr	r3, [pc, #96]	; (f614 <bt_enable+0x120>)
    f5b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f5b8:	e9c5 3005 	strd	r3, r0, [r5, #20]
    f5bc:	2303      	movs	r3, #3
    f5be:	480c      	ldr	r0, [pc, #48]	; (f5f0 <bt_enable+0xfc>)
    f5c0:	f842 3f10 	str.w	r3, [r2, #16]!
    f5c4:	f00d fc56 	bl	1ce74 <z_log_msg_static_create.constprop.0>
    f5c8:	46ad      	mov	sp, r5
		return err;
    f5ca:	e7a8      	b.n	f51e <bt_enable+0x2a>
	if (!cb) {
    f5cc:	b91e      	cbnz	r6, f5d6 <bt_enable+0xe2>
		return bt_init();
    f5ce:	f7ff fd3f 	bl	f050 <bt_init>
    f5d2:	4604      	mov	r4, r0
    f5d4:	e7a3      	b.n	f51e <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    f5d6:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    f5da:	f009 fc6f 	bl	18ebc <k_work_submit>
	return 0;
    f5de:	e79e      	b.n	f51e <bt_enable+0x2a>
		return -EALREADY;
    f5e0:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f5e4:	e79b      	b.n	f51e <bt_enable+0x2a>
    f5e6:	bf00      	nop
    f5e8:	20008000 	.word	0x20008000
    f5ec:	00021f57 	.word	0x00021f57
    f5f0:	0001f8d8 	.word	0x0001f8d8
    f5f4:	2000978c 	.word	0x2000978c
    f5f8:	0000ed7d 	.word	0x0000ed7d
    f5fc:	2000b178 	.word	0x2000b178
    f600:	20009090 	.word	0x20009090
    f604:	00021f70 	.word	0x00021f70
    f608:	20009118 	.word	0x20009118
    f60c:	2000b578 	.word	0x2000b578
    f610:	00021f76 	.word	0x00021f76
    f614:	00021f7c 	.word	0x00021f7c

0000f618 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f618:	4b02      	ldr	r3, [pc, #8]	; (f624 <bt_is_ready+0xc>)
    f61a:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    f61e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f622:	4770      	bx	lr
    f624:	200080cc 	.word	0x200080cc

0000f628 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    f628:	4800      	ldr	r0, [pc, #0]	; (f62c <bt_get_name+0x4>)
    f62a:	4770      	bx	lr
    f62c:	0002051b 	.word	0x0002051b

0000f630 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f632:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    f634:	2500      	movs	r5, #0
    f636:	4f09      	ldr	r7, [pc, #36]	; (f65c <id_find+0x2c>)
    f638:	79fb      	ldrb	r3, [r7, #7]
    f63a:	b2ec      	uxtb	r4, r5
    f63c:	42a3      	cmp	r3, r4
    f63e:	d802      	bhi.n	f646 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    f640:	f06f 0001 	mvn.w	r0, #1
    f644:	e009      	b.n	f65a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    f646:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    f64a:	4630      	mov	r0, r6
    f64c:	4439      	add	r1, r7
    f64e:	f00d fcc0 	bl	1cfd2 <bt_addr_le_eq>
    f652:	3501      	adds	r5, #1
    f654:	2800      	cmp	r0, #0
    f656:	d0ef      	beq.n	f638 <id_find+0x8>
    f658:	4620      	mov	r0, r4
}
    f65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f65c:	20008000 	.word	0x20008000

0000f660 <set_random_address>:
{
    f660:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    f662:	2206      	movs	r2, #6
    f664:	4912      	ldr	r1, [pc, #72]	; (f6b0 <set_random_address+0x50>)
    f666:	4605      	mov	r5, r0
    f668:	f00d fb65 	bl	1cd36 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f66c:	b1d8      	cbz	r0, f6a6 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f66e:	2106      	movs	r1, #6
    f670:	f242 0005 	movw	r0, #8197	; 0x2005
    f674:	f7fe ffa4 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    f678:	4604      	mov	r4, r0
    f67a:	b1b0      	cbz	r0, f6aa <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f67c:	2206      	movs	r2, #6
    f67e:	4629      	mov	r1, r5
    f680:	3008      	adds	r0, #8
    f682:	f00e fd2a 	bl	1e0da <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f686:	2200      	movs	r2, #0
    f688:	4621      	mov	r1, r4
    f68a:	f242 0005 	movw	r0, #8197	; 0x2005
    f68e:	f7fe ffe5 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f692:	b948      	cbnz	r0, f6a8 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    f694:	2206      	movs	r2, #6
    f696:	4629      	mov	r1, r5
    f698:	4805      	ldr	r0, [pc, #20]	; (f6b0 <set_random_address+0x50>)
    f69a:	f00d fb5c 	bl	1cd56 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f69e:	2201      	movs	r2, #1
    f6a0:	4b04      	ldr	r3, [pc, #16]	; (f6b4 <set_random_address+0x54>)
    f6a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
    f6a6:	2000      	movs	r0, #0
}
    f6a8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    f6aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f6ae:	e7fb      	b.n	f6a8 <set_random_address+0x48>
    f6b0:	20008061 	.word	0x20008061
    f6b4:	20008000 	.word	0x20008000

0000f6b8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    f6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f6ba:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f6bc:	460d      	mov	r5, r1
    f6be:	b179      	cbz	r1, f6e0 <id_create.constprop.0+0x28>
    f6c0:	4628      	mov	r0, r5
    f6c2:	4914      	ldr	r1, [pc, #80]	; (f714 <id_create.constprop.0+0x5c>)
    f6c4:	f00d fc85 	bl	1cfd2 <bt_addr_le_eq>
    f6c8:	b950      	cbnz	r0, f6e0 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    f6ca:	2207      	movs	r2, #7
    f6cc:	4629      	mov	r1, r5
    f6ce:	4812      	ldr	r0, [pc, #72]	; (f718 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    f6d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f6d4:	4420      	add	r0, r4
    f6d6:	f00d fb3e 	bl	1cd56 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    f6da:	2000      	movs	r0, #0
}
    f6dc:	b003      	add	sp, #12
    f6de:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    f6e0:	4668      	mov	r0, sp
    f6e2:	f00d fb98 	bl	1ce16 <bt_addr_le_create_static>
			if (err) {
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d1f8      	bne.n	f6dc <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    f6ea:	4668      	mov	r0, sp
    f6ec:	f7ff ffa0 	bl	f630 <id_find>
    f6f0:	2800      	cmp	r0, #0
    f6f2:	daf5      	bge.n	f6e0 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    f6f4:	4b08      	ldr	r3, [pc, #32]	; (f718 <id_create.constprop.0+0x60>)
    f6f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f6fa:	441c      	add	r4, r3
    f6fc:	2207      	movs	r2, #7
    f6fe:	4669      	mov	r1, sp
    f700:	4620      	mov	r0, r4
    f702:	f00d fb28 	bl	1cd56 <memcpy>
		if (addr) {
    f706:	2d00      	cmp	r5, #0
    f708:	d0e7      	beq.n	f6da <id_create.constprop.0+0x22>
    f70a:	2207      	movs	r2, #7
    f70c:	4621      	mov	r1, r4
    f70e:	4628      	mov	r0, r5
    f710:	e7e1      	b.n	f6d6 <id_create.constprop.0+0x1e>
    f712:	bf00      	nop
    f714:	000218c6 	.word	0x000218c6
    f718:	20008000 	.word	0x20008000

0000f71c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    f71c:	b570      	push	{r4, r5, r6, lr}
    f71e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f720:	4604      	mov	r4, r0
{
    f722:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f724:	b920      	cbnz	r0, f730 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    f726:	b31d      	cbz	r5, f770 <bt_id_create+0x54>
			return -EINVAL;
    f728:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    f72c:	b006      	add	sp, #24
    f72e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f730:	4920      	ldr	r1, [pc, #128]	; (f7b4 <bt_id_create+0x98>)
    f732:	f00d fc4e 	bl	1cfd2 <bt_addr_le_eq>
    f736:	2800      	cmp	r0, #0
    f738:	d1f5      	bne.n	f726 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    f73a:	7823      	ldrb	r3, [r4, #0]
    f73c:	2b01      	cmp	r3, #1
    f73e:	d104      	bne.n	f74a <bt_id_create+0x2e>
    f740:	79a3      	ldrb	r3, [r4, #6]
    f742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f746:	2bc0      	cmp	r3, #192	; 0xc0
    f748:	d00a      	beq.n	f760 <bt_id_create+0x44>
			BT_ERR("Only static random identity address supported");
    f74a:	4b1b      	ldr	r3, [pc, #108]	; (f7b8 <bt_id_create+0x9c>)
    f74c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f750:	9305      	str	r3, [sp, #20]
    f752:	2302      	movs	r3, #2
    f754:	4819      	ldr	r0, [pc, #100]	; (f7bc <bt_id_create+0xa0>)
    f756:	aa04      	add	r2, sp, #16
    f758:	9304      	str	r3, [sp, #16]
    f75a:	f00d fc42 	bl	1cfe2 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
    f75e:	e7e3      	b.n	f728 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    f760:	4620      	mov	r0, r4
    f762:	f7ff ff65 	bl	f630 <id_find>
    f766:	2800      	cmp	r0, #0
    f768:	dbdd      	blt.n	f726 <bt_id_create+0xa>
			return -EALREADY;
    f76a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f76e:	e7dd      	b.n	f72c <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    f770:	4d13      	ldr	r5, [pc, #76]	; (f7c0 <bt_id_create+0xa4>)
    f772:	79eb      	ldrb	r3, [r5, #7]
    f774:	2b01      	cmp	r3, #1
    f776:	d01a      	beq.n	f7ae <bt_id_create+0x92>
    f778:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    f77c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f780:	07db      	lsls	r3, r3, #31
    f782:	d50b      	bpl.n	f79c <bt_id_create+0x80>
	new_id = bt_dev.id_count;
    f784:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    f786:	4621      	mov	r1, r4
    f788:	4630      	mov	r0, r6
    f78a:	f7ff ff95 	bl	f6b8 <id_create.constprop.0>
	if (err) {
    f78e:	2800      	cmp	r0, #0
    f790:	d1cc      	bne.n	f72c <bt_id_create+0x10>
		bt_dev.id_count++;
    f792:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    f794:	4630      	mov	r0, r6
		bt_dev.id_count++;
    f796:	3301      	adds	r3, #1
    f798:	71eb      	strb	r3, [r5, #7]
	return new_id;
    f79a:	e7c7      	b.n	f72c <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    f79c:	2c00      	cmp	r4, #0
    f79e:	d0c3      	beq.n	f728 <bt_id_create+0xc>
    f7a0:	4620      	mov	r0, r4
    f7a2:	4904      	ldr	r1, [pc, #16]	; (f7b4 <bt_id_create+0x98>)
    f7a4:	f00d fc15 	bl	1cfd2 <bt_addr_le_eq>
    f7a8:	2800      	cmp	r0, #0
    f7aa:	d0eb      	beq.n	f784 <bt_id_create+0x68>
    f7ac:	e7bc      	b.n	f728 <bt_id_create+0xc>
		return -ENOMEM;
    f7ae:	f06f 000b 	mvn.w	r0, #11
    f7b2:	e7bb      	b.n	f72c <bt_id_create+0x10>
    f7b4:	000218c6 	.word	0x000218c6
    f7b8:	00021fa4 	.word	0x00021fa4
    f7bc:	0001f8e8 	.word	0x0001f8e8
    f7c0:	20008000 	.word	0x20008000

0000f7c4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    f7c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    f7c6:	4604      	mov	r4, r0
{
    f7c8:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
    f7ca:	b960      	cbnz	r0, f7e6 <bt_id_read_public_addr+0x22>
		BT_WARN("Invalid input parameters");
    f7cc:	4b1a      	ldr	r3, [pc, #104]	; (f838 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
    f7ce:	9307      	str	r3, [sp, #28]
    f7d0:	2302      	movs	r3, #2
    f7d2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f7d6:	4819      	ldr	r0, [pc, #100]	; (f83c <bt_id_read_public_addr+0x78>)
    f7d8:	aa06      	add	r2, sp, #24
    f7da:	9306      	str	r3, [sp, #24]
    f7dc:	f00d fc01 	bl	1cfe2 <z_log_msg_static_create.constprop.0>
		return 0U;
    f7e0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    f7e2:	b008      	add	sp, #32
    f7e4:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    f7e6:	2100      	movs	r1, #0
    f7e8:	f241 0009 	movw	r0, #4105	; 0x1009
    f7ec:	aa01      	add	r2, sp, #4
    f7ee:	f7fe ff35 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f7f2:	4606      	mov	r6, r0
    f7f4:	b108      	cbz	r0, f7fa <bt_id_read_public_addr+0x36>
		BT_WARN("Failed to read public address");
    f7f6:	4b12      	ldr	r3, [pc, #72]	; (f840 <bt_id_read_public_addr+0x7c>)
    f7f8:	e7e9      	b.n	f7ce <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    f7fa:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    f7fc:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f7fe:	689d      	ldr	r5, [r3, #8]
    f800:	4910      	ldr	r1, [pc, #64]	; (f844 <bt_id_read_public_addr+0x80>)
    f802:	3501      	adds	r5, #1
    f804:	4628      	mov	r0, r5
    f806:	f00d fa96 	bl	1cd36 <memcmp>
    f80a:	b918      	cbnz	r0, f814 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    f80c:	9801      	ldr	r0, [sp, #4]
    f80e:	f004 f91b 	bl	13a48 <net_buf_unref>
		return 0U;
    f812:	e7e5      	b.n	f7e0 <bt_id_read_public_addr+0x1c>
    f814:	2206      	movs	r2, #6
    f816:	4628      	mov	r0, r5
    f818:	490b      	ldr	r1, [pc, #44]	; (f848 <bt_id_read_public_addr+0x84>)
    f81a:	f00d fa8c 	bl	1cd36 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f81e:	2800      	cmp	r0, #0
    f820:	d0f4      	beq.n	f80c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    f822:	2206      	movs	r2, #6
    f824:	4629      	mov	r1, r5
    f826:	1c60      	adds	r0, r4, #1
    f828:	f00d fa95 	bl	1cd56 <memcpy>
	net_buf_unref(rsp);
    f82c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    f82e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    f830:	f004 f90a 	bl	13a48 <net_buf_unref>
	return 1U;
    f834:	2001      	movs	r0, #1
    f836:	e7d4      	b.n	f7e2 <bt_id_read_public_addr+0x1e>
    f838:	00021fd2 	.word	0x00021fd2
    f83c:	0001f8e8 	.word	0x0001f8e8
    f840:	00021feb 	.word	0x00021feb
    f844:	000218d3 	.word	0x000218d3
    f848:	000218cd 	.word	0x000218cd

0000f84c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    f84c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    f84e:	4668      	mov	r0, sp
    f850:	f7ff ffb8 	bl	f7c4 <bt_id_read_public_addr>
    f854:	4b04      	ldr	r3, [pc, #16]	; (f868 <bt_setup_public_id_addr+0x1c>)
    f856:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    f858:	b118      	cbz	r0, f862 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    f85a:	4669      	mov	r1, sp
    f85c:	2000      	movs	r0, #0
    f85e:	f7ff ff2b 	bl	f6b8 <id_create.constprop.0>
}
    f862:	b003      	add	sp, #12
    f864:	f85d fb04 	ldr.w	pc, [sp], #4
    f868:	20008000 	.word	0x20008000

0000f86c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    f86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f870:	4b22      	ldr	r3, [pc, #136]	; (f8fc <bt_read_static_addr+0x90>)
{
    f872:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f874:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
    f878:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f87a:	07db      	lsls	r3, r3, #31
{
    f87c:	b088      	sub	sp, #32
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f87e:	d40e      	bmi.n	f89e <bt_read_static_addr+0x32>
		BT_WARN("Read Static Addresses command not available");
    f880:	4b1f      	ldr	r3, [pc, #124]	; (f900 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
    f882:	9307      	str	r3, [sp, #28]
		return 0;
    f884:	2500      	movs	r5, #0
		BT_WARN("Failed to read static addresses");
    f886:	2302      	movs	r3, #2
    f888:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f88c:	481d      	ldr	r0, [pc, #116]	; (f904 <bt_read_static_addr+0x98>)
    f88e:	aa06      	add	r2, sp, #24
    f890:	9306      	str	r3, [sp, #24]
    f892:	f00d fba6 	bl	1cfe2 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    f896:	4628      	mov	r0, r5
    f898:	b008      	add	sp, #32
    f89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    f89e:	2100      	movs	r1, #0
    f8a0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    f8a4:	aa01      	add	r2, sp, #4
    f8a6:	f7fe fed9 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    f8aa:	4604      	mov	r4, r0
    f8ac:	b108      	cbz	r0, f8b2 <bt_read_static_addr+0x46>
		BT_WARN("Failed to read static addresses");
    f8ae:	4b16      	ldr	r3, [pc, #88]	; (f908 <bt_read_static_addr+0x9c>)
    f8b0:	e7e7      	b.n	f882 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
    f8b2:	9b01      	ldr	r3, [sp, #4]
    f8b4:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    f8b6:	7875      	ldrb	r5, [r6, #1]
    f8b8:	3602      	adds	r6, #2
    f8ba:	4545      	cmp	r5, r8
    f8bc:	bf28      	it	cs
    f8be:	4645      	movcs	r5, r8
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    f8c0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    f8c4:	42a5      	cmp	r5, r4
    f8c6:	dc0f      	bgt.n	f8e8 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
    f8c8:	9801      	ldr	r0, [sp, #4]
    f8ca:	f004 f8bd 	bl	13a48 <net_buf_unref>
	if (!cnt) {
    f8ce:	2d00      	cmp	r5, #0
    f8d0:	d1e1      	bne.n	f896 <bt_read_static_addr+0x2a>
		BT_WARN("No static addresses stored in controller");
    f8d2:	4b0e      	ldr	r3, [pc, #56]	; (f90c <bt_read_static_addr+0xa0>)
    f8d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f8d8:	9307      	str	r3, [sp, #28]
    f8da:	2302      	movs	r3, #2
    f8dc:	4809      	ldr	r0, [pc, #36]	; (f904 <bt_read_static_addr+0x98>)
    f8de:	aa06      	add	r2, sp, #24
    f8e0:	9306      	str	r3, [sp, #24]
    f8e2:	f00d fb7e 	bl	1cfe2 <z_log_msg_static_create.constprop.0>
    f8e6:	e7d6      	b.n	f896 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    f8e8:	4631      	mov	r1, r6
    f8ea:	fb08 7004 	mla	r0, r8, r4, r7
    f8ee:	2216      	movs	r2, #22
    f8f0:	f00d fa31 	bl	1cd56 <memcpy>
	for (i = 0; i < cnt; i++) {
    f8f4:	3401      	adds	r4, #1
    f8f6:	3616      	adds	r6, #22
    f8f8:	e7e4      	b.n	f8c4 <bt_read_static_addr+0x58>
    f8fa:	bf00      	nop
    f8fc:	20008000 	.word	0x20008000
    f900:	00022009 	.word	0x00022009
    f904:	0001f8e8 	.word	0x0001f8e8
    f908:	00022035 	.word	0x00022035
    f90c:	00022055 	.word	0x00022055

0000f910 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    f910:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    f912:	4e15      	ldr	r6, [pc, #84]	; (f968 <bt_setup_random_id_addr+0x58>)
{
    f914:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    f916:	79f4      	ldrb	r4, [r6, #7]
    f918:	b92c      	cbnz	r4, f926 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    f91a:	2101      	movs	r1, #1
    f91c:	a802      	add	r0, sp, #8
    f91e:	f7ff ffa5 	bl	f86c <bt_read_static_addr>
    f922:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    f924:	b9c8      	cbnz	r0, f95a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    f926:	2100      	movs	r1, #0
    f928:	4608      	mov	r0, r1
}
    f92a:	b009      	add	sp, #36	; 0x24
    f92c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    f930:	f7ff bef4 	b.w	f71c <bt_id_create>
    f934:	ab02      	add	r3, sp, #8
    f936:	fb07 3105 	mla	r1, r7, r5, r3
    f93a:	2206      	movs	r2, #6
    f93c:	f10d 0001 	add.w	r0, sp, #1
    f940:	f00d fa09 	bl	1cd56 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    f944:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    f946:	4669      	mov	r1, sp
    f948:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    f94a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    f94e:	f7ff feb3 	bl	f6b8 <id_create.constprop.0>
				if (err) {
    f952:	3401      	adds	r4, #1
    f954:	b110      	cbz	r0, f95c <bt_setup_random_id_addr+0x4c>
}
    f956:	b009      	add	sp, #36	; 0x24
    f958:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    f95a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    f95c:	79f3      	ldrb	r3, [r6, #7]
    f95e:	b2e5      	uxtb	r5, r4
    f960:	42ab      	cmp	r3, r5
    f962:	d8e7      	bhi.n	f934 <bt_setup_random_id_addr+0x24>
			return 0;
    f964:	2000      	movs	r0, #0
    f966:	e7f6      	b.n	f956 <bt_setup_random_id_addr+0x46>
    f968:	20008000 	.word	0x20008000

0000f96c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    f96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f970:	4690      	mov	r8, r2
    f972:	460e      	mov	r6, r1
    f974:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    f976:	4602      	mov	r2, r0
    f978:	2800      	cmp	r0, #0
    f97a:	d04b      	beq.n	fa14 <bt_id_set_adv_own_addr+0xa8>
    f97c:	2b00      	cmp	r3, #0
    f97e:	d049      	beq.n	fa14 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f980:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    f982:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f984:	d531      	bpl.n	f9ea <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f986:	4f25      	ldr	r7, [pc, #148]	; (fa1c <bt_id_set_adv_own_addr+0xb0>)
    f988:	f1b8 0f00 	cmp.w	r8, #0
    f98c:	d013      	beq.n	f9b6 <bt_id_set_adv_own_addr+0x4a>
    f98e:	0688      	lsls	r0, r1, #26
    f990:	d40a      	bmi.n	f9a8 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f992:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    f996:	5cfb      	ldrb	r3, [r7, r3]
    f998:	2b01      	cmp	r3, #1
    f99a:	d015      	beq.n	f9c8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    f99c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f99e:	06b2      	lsls	r2, r6, #26
    f9a0:	d50f      	bpl.n	f9c2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f9a2:	f043 0302 	orr.w	r3, r3, #2
    f9a6:	e00b      	b.n	f9c0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f9a8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    f9ac:	0659      	lsls	r1, r3, #25
    f9ae:	d4f0      	bmi.n	f992 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    f9b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f9b4:	e006      	b.n	f9c4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f9b6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    f9ba:	5cfb      	ldrb	r3, [r7, r3]
    f9bc:	2b01      	cmp	r3, #1
    f9be:	d003      	beq.n	f9c8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    f9c0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    f9c2:	2000      	movs	r0, #0
}
    f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    f9c8:	2107      	movs	r1, #7
    f9ca:	fb01 7104 	mla	r1, r1, r4, r7
    f9ce:	4610      	mov	r0, r2
    f9d0:	3101      	adds	r1, #1
    f9d2:	f00d fb0e 	bl	1cff2 <bt_id_set_adv_random_addr>
				if (err) {
    f9d6:	2800      	cmp	r0, #0
    f9d8:	d1f4      	bne.n	f9c4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    f9da:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f9de:	5d3b      	ldrb	r3, [r7, r4]
    f9e0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f9e2:	f1b8 0f00 	cmp.w	r8, #0
    f9e6:	d0ec      	beq.n	f9c2 <bt_id_set_adv_own_addr+0x56>
    f9e8:	e7d9      	b.n	f99e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f9ea:	074b      	lsls	r3, r1, #29
    f9ec:	d50e      	bpl.n	fa0c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f9ee:	4e0b      	ldr	r6, [pc, #44]	; (fa1c <bt_id_set_adv_own_addr+0xb0>)
    f9f0:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    f9f4:	5df3      	ldrb	r3, [r6, r7]
    f9f6:	2b01      	cmp	r3, #1
    f9f8:	d1e2      	bne.n	f9c0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    f9fa:	2107      	movs	r1, #7
    f9fc:	fb11 3104 	smlabb	r1, r1, r4, r3
    fa00:	4431      	add	r1, r6
    fa02:	f00d faf6 	bl	1cff2 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    fa06:	5df3      	ldrb	r3, [r6, r7]
    fa08:	702b      	strb	r3, [r5, #0]
		if (err) {
    fa0a:	e7db      	b.n	f9c4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    fa0c:	f00d faf9 	bl	1d002 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    fa10:	2301      	movs	r3, #1
    fa12:	e7f9      	b.n	fa08 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    fa14:	f06f 0015 	mvn.w	r0, #21
    fa18:	e7d4      	b.n	f9c4 <bt_id_set_adv_own_addr+0x58>
    fa1a:	bf00      	nop
    fa1c:	20008000 	.word	0x20008000

0000fa20 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    fa20:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fa22:	4d13      	ldr	r5, [pc, #76]	; (fa70 <bt_id_init+0x50>)
{
    fa24:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fa26:	79eb      	ldrb	r3, [r5, #7]
    fa28:	b11b      	cbz	r3, fa32 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    fa2a:	2400      	movs	r4, #0
}
    fa2c:	4620      	mov	r0, r4
    fa2e:	b007      	add	sp, #28
    fa30:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    fa32:	f7ff ff0b 	bl	f84c <bt_setup_public_id_addr>
		if (err) {
    fa36:	4604      	mov	r4, r0
    fa38:	b150      	cbz	r0, fa50 <bt_id_init+0x30>
			BT_ERR("Unable to set identity address");
    fa3a:	4b0e      	ldr	r3, [pc, #56]	; (fa74 <bt_id_init+0x54>)
			BT_ERR("Unable to set random address");
    fa3c:	9305      	str	r3, [sp, #20]
    fa3e:	2302      	movs	r3, #2
    fa40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fa44:	480c      	ldr	r0, [pc, #48]	; (fa78 <bt_id_init+0x58>)
    fa46:	aa04      	add	r2, sp, #16
    fa48:	9304      	str	r3, [sp, #16]
    fa4a:	f00d faca 	bl	1cfe2 <z_log_msg_static_create.constprop.0>
			return err;
    fa4e:	e7ed      	b.n	fa2c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fa50:	79eb      	ldrb	r3, [r5, #7]
    fa52:	2b00      	cmp	r3, #0
    fa54:	d1e9      	bne.n	fa2a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    fa56:	f7ff ff5b 	bl	f910 <bt_setup_random_id_addr>
		if (err) {
    fa5a:	4604      	mov	r4, r0
    fa5c:	2800      	cmp	r0, #0
    fa5e:	d1ec      	bne.n	fa3a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    fa60:	1c68      	adds	r0, r5, #1
    fa62:	f7ff fdfd 	bl	f660 <set_random_address>
		if (err) {
    fa66:	4604      	mov	r4, r0
    fa68:	2800      	cmp	r0, #0
    fa6a:	d0df      	beq.n	fa2c <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
    fa6c:	4b03      	ldr	r3, [pc, #12]	; (fa7c <bt_id_init+0x5c>)
    fa6e:	e7e5      	b.n	fa3c <bt_id_init+0x1c>
    fa70:	20008000 	.word	0x20008000
    fa74:	0002207e 	.word	0x0002207e
    fa78:	0001f8e8 	.word	0x0001f8e8
    fa7c:	0002209d 	.word	0x0002209d

0000fa80 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa84:	460c      	mov	r4, r1
    fa86:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    fa88:	2120      	movs	r1, #32
{
    fa8a:	4692      	mov	sl, r2
    fa8c:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    fa8e:	f7fe fd97 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    fa92:	4605      	mov	r5, r0
    fa94:	2800      	cmp	r0, #0
    fa96:	d05b      	beq.n	fb50 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    fa98:	2120      	movs	r1, #32
    fa9a:	3008      	adds	r0, #8
    fa9c:	f004 f8f6 	bl	13c8c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    faa0:	2220      	movs	r2, #32
    faa2:	4681      	mov	r9, r0
    faa4:	2100      	movs	r1, #0
    faa6:	f00d f961 	bl	1cd6c <memset>
	uint8_t set_data_len = 0;
    faaa:	2600      	movs	r6, #0

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    faac:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    fab0:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
    fab4:	2300      	movs	r3, #0
    fab6:	f8d4 8000 	ldr.w	r8, [r4]
    faba:	6862      	ldr	r2, [r4, #4]
    fabc:	4293      	cmp	r3, r2
    fabe:	d30c      	bcc.n	fada <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    fac0:	3408      	adds	r4, #8
    fac2:	45a2      	cmp	sl, r4
    fac4:	d1f6      	bne.n	fab4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fac6:	2200      	movs	r2, #0
    fac8:	4629      	mov	r1, r5
    faca:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
    facc:	f889 6000 	strb.w	r6, [r9]
}
    fad0:	b009      	add	sp, #36	; 0x24
    fad2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fad6:	f7fe bdc1 	b.w	e65c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    fada:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    fade:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    fae0:	1811      	adds	r1, r2, r0
    fae2:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    fae4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    fae8:	d91b      	bls.n	fb22 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    faea:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    faee:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    faf2:	d101      	bne.n	faf8 <hci_set_ad+0x78>
    faf4:	2a00      	cmp	r2, #0
    faf6:	dc12      	bgt.n	fb1e <hci_set_ad+0x9e>
					BT_ERR("Too big advertising data");
    faf8:	4b17      	ldr	r3, [pc, #92]	; (fb58 <hci_set_ad+0xd8>)
    fafa:	9307      	str	r3, [sp, #28]
    fafc:	2302      	movs	r3, #2
    fafe:	9306      	str	r3, [sp, #24]
    fb00:	2300      	movs	r3, #0
    fb02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fb06:	4815      	ldr	r0, [pc, #84]	; (fb5c <hci_set_ad+0xdc>)
    fb08:	aa06      	add	r2, sp, #24
    fb0a:	f7fb fe7d 	bl	b808 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    fb0e:	4628      	mov	r0, r5
    fb10:	f003 ff9a 	bl	13a48 <net_buf_unref>
					return -EINVAL;
    fb14:	f06f 0015 	mvn.w	r0, #21
}
    fb18:	b009      	add	sp, #36	; 0x24
    fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    fb1e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    fb22:	b2d7      	uxtb	r7, r2
    fb24:	1c79      	adds	r1, r7, #1
    fb26:	f80b 1006 	strb.w	r1, [fp, r6]
    fb2a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    fb2c:	b2c9      	uxtb	r1, r1
    fb2e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    fb32:	f8d8 1004 	ldr.w	r1, [r8, #4]
    fb36:	fa5b f080 	uxtab	r0, fp, r0
    fb3a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    fb3c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    fb3e:	f00d f90a 	bl	1cd56 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    fb42:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    fb44:	4437      	add	r7, r6
    fb46:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
    fb48:	3301      	adds	r3, #1
    fb4a:	f108 0808 	add.w	r8, r8, #8
    fb4e:	e7b4      	b.n	faba <hci_set_ad+0x3a>
		return -ENOBUFS;
    fb50:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fb54:	e7e0      	b.n	fb18 <hci_set_ad+0x98>
    fb56:	bf00      	nop
    fb58:	000220c0 	.word	0x000220c0
    fb5c:	0001f8a8 	.word	0x0001f8a8

0000fb60 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    fb60:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    fb62:	4605      	mov	r5, r0
    fb64:	4b16      	ldr	r3, [pc, #88]	; (fbc0 <le_adv_start_add_conn+0x60>)
    fb66:	f815 2b09 	ldrb.w	r2, [r5], #9
{
    fb6a:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    fb6c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    fb70:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
    fb72:	2207      	movs	r2, #7
    fb74:	4628      	mov	r0, r5
    fb76:	4913      	ldr	r1, [pc, #76]	; (fbc4 <le_adv_start_add_conn+0x64>)
    fb78:	f00d f8dd 	bl	1cd36 <memcmp>
    fb7c:	4603      	mov	r3, r0
    fb7e:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    fb80:	b96b      	cbnz	r3, fb9e <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    fb82:	4911      	ldr	r1, [pc, #68]	; (fbc8 <le_adv_start_add_conn+0x68>)
    fb84:	f001 f85e 	bl	10c44 <bt_conn_add_le>
		if (!conn) {
    fb88:	4604      	mov	r4, r0
    fb8a:	b910      	cbnz	r0, fb92 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
    fb8c:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    fb90:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    fb92:	2104      	movs	r1, #4
    fb94:	f000 fe4c 	bl	10830 <bt_conn_set_state>
		return 0;
    fb98:	2000      	movs	r0, #0
		*out_conn = conn;
    fb9a:	6034      	str	r4, [r6, #0]
    fb9c:	e7f8      	b.n	fb90 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    fb9e:	4629      	mov	r1, r5
    fba0:	f001 f884 	bl	10cac <bt_conn_exists_le>
    fba4:	b940      	cbnz	r0, fbb8 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    fba6:	7820      	ldrb	r0, [r4, #0]
    fba8:	4629      	mov	r1, r5
    fbaa:	f001 f84b 	bl	10c44 <bt_conn_add_le>
	if (!conn) {
    fbae:	4604      	mov	r4, r0
    fbb0:	2800      	cmp	r0, #0
    fbb2:	d0eb      	beq.n	fb8c <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    fbb4:	2105      	movs	r1, #5
    fbb6:	e7ed      	b.n	fb94 <le_adv_start_add_conn+0x34>
		return -EINVAL;
    fbb8:	f06f 0015 	mvn.w	r0, #21
    fbbc:	e7e8      	b.n	fb90 <le_adv_start_add_conn+0x30>
    fbbe:	bf00      	nop
    fbc0:	20008000 	.word	0x20008000
    fbc4:	000218c6 	.word	0x000218c6
    fbc8:	000218bf 	.word	0x000218bf

0000fbcc <valid_adv_param>:
{
    fbcc:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    fbce:	6843      	ldr	r3, [r0, #4]
{
    fbd0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    fbd2:	0558      	lsls	r0, r3, #21
    fbd4:	d501      	bpl.n	fbda <valid_adv_param+0xe>
		return false;
    fbd6:	2000      	movs	r0, #0
}
    fbd8:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fbda:	6922      	ldr	r2, [r4, #16]
    fbdc:	b10a      	cbz	r2, fbe2 <valid_adv_param+0x16>
    fbde:	07d9      	lsls	r1, r3, #31
    fbe0:	d5f9      	bpl.n	fbd6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    fbe2:	4d19      	ldr	r5, [pc, #100]	; (fc48 <valid_adv_param+0x7c>)
    fbe4:	7820      	ldrb	r0, [r4, #0]
    fbe6:	79eb      	ldrb	r3, [r5, #7]
    fbe8:	4283      	cmp	r3, r0
    fbea:	d9f4      	bls.n	fbd6 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    fbec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    fbf0:	2207      	movs	r2, #7
    fbf2:	4916      	ldr	r1, [pc, #88]	; (fc4c <valid_adv_param+0x80>)
    fbf4:	4428      	add	r0, r5
    fbf6:	f00d f89e 	bl	1cd36 <memcmp>
	if (param->id >= bt_dev.id_count ||
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d0eb      	beq.n	fbd6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fbfe:	6860      	ldr	r0, [r4, #4]
    fc00:	07c2      	lsls	r2, r0, #31
    fc02:	d406      	bmi.n	fc12 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    fc04:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    fc08:	2b08      	cmp	r3, #8
    fc0a:	d802      	bhi.n	fc12 <valid_adv_param+0x46>
    fc0c:	68a3      	ldr	r3, [r4, #8]
    fc0e:	2b9f      	cmp	r3, #159	; 0x9f
    fc10:	d9e1      	bls.n	fbd6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    fc12:	f010 0f30 	tst.w	r0, #48	; 0x30
    fc16:	d002      	beq.n	fc1e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    fc18:	6923      	ldr	r3, [r4, #16]
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d0db      	beq.n	fbd6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    fc1e:	06c3      	lsls	r3, r0, #27
    fc20:	d401      	bmi.n	fc26 <valid_adv_param+0x5a>
    fc22:	6923      	ldr	r3, [r4, #16]
    fc24:	b943      	cbnz	r3, fc38 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    fc26:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    fc2a:	429a      	cmp	r2, r3
    fc2c:	d8d3      	bhi.n	fbd6 <valid_adv_param+0xa>
    fc2e:	2a1f      	cmp	r2, #31
    fc30:	d9d1      	bls.n	fbd6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    fc32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    fc36:	d8ce      	bhi.n	fbd6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    fc38:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    fc3c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    fc40:	bf18      	it	ne
    fc42:	2001      	movne	r0, #1
    fc44:	e7c8      	b.n	fbd8 <valid_adv_param+0xc>
    fc46:	bf00      	nop
    fc48:	20008000 	.word	0x20008000
    fc4c:	000218c6 	.word	0x000218c6

0000fc50 <bt_le_adv_lookup_legacy>:
}
    fc50:	4800      	ldr	r0, [pc, #0]	; (fc54 <bt_le_adv_lookup_legacy+0x4>)
    fc52:	4770      	bx	lr
    fc54:	20008018 	.word	0x20008018

0000fc58 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc5c:	b093      	sub	sp, #76	; 0x4c
    fc5e:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    fc60:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    fc62:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    fc66:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
    fc68:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fc6c:	4892      	ldr	r0, [pc, #584]	; (feb8 <bt_le_adv_start_legacy+0x260>)
    fc6e:	bf18      	it	ne
    fc70:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
    fc72:	9307      	str	r3, [sp, #28]
    fc74:	f00d f9ef 	bl	1d056 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fc78:	0747      	lsls	r7, r0, #29
{
    fc7a:	460d      	mov	r5, r1
    fc7c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fc7e:	f140 8112 	bpl.w	fea6 <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    fc82:	4608      	mov	r0, r1
    fc84:	f7ff ffa2 	bl	fbcc <valid_adv_param>
    fc88:	b928      	cbnz	r0, fc96 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    fc8a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    fc8e:	4620      	mov	r0, r4
    fc90:	b013      	add	sp, #76	; 0x4c
    fc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    fc96:	4628      	mov	r0, r5
    fc98:	f00d f9ca 	bl	1d030 <bt_id_adv_random_addr_check>
    fc9c:	4681      	mov	r9, r0
    fc9e:	2800      	cmp	r0, #0
    fca0:	d0f3      	beq.n	fc8a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fca2:	f106 0810 	add.w	r8, r6, #16
    fca6:	4640      	mov	r0, r8
    fca8:	f00d f9d5 	bl	1d056 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    fcac:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    fcb0:	0600      	lsls	r0, r0, #24
    fcb2:	f100 80fb 	bmi.w	feac <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
    fcb6:	220f      	movs	r2, #15
    fcb8:	4639      	mov	r1, r7
    fcba:	a808      	add	r0, sp, #32
    fcbc:	f00d f856 	bl	1cd6c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fcc0:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    fcc2:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fcc4:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    fcc8:	68eb      	ldr	r3, [r5, #12]
    fcca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    fcce:	f00d f9b3 	bl	1d038 <get_adv_channel_map>
	if (adv->id != param->id) {
    fcd2:	7832      	ldrb	r2, [r6, #0]
    fcd4:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    fcd6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    fcda:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    fcdc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    fce0:	d004      	beq.n	fcec <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fce2:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    fce6:	4874      	ldr	r0, [pc, #464]	; (feb8 <bt_le_adv_start_legacy+0x260>)
    fce8:	f00d f9b8 	bl	1d05c <atomic_and>
	adv->id = param->id;
    fcec:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    fcee:	4a73      	ldr	r2, [pc, #460]	; (febc <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
    fcf0:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    fcf2:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    fcf6:	4630      	mov	r0, r6
    fcf8:	4622      	mov	r2, r4
    fcfa:	6869      	ldr	r1, [r5, #4]
    fcfc:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    fd00:	f7ff fe34 	bl	f96c <bt_id_set_adv_own_addr>
	if (err) {
    fd04:	4604      	mov	r4, r0
    fd06:	2800      	cmp	r0, #0
    fd08:	d1c1      	bne.n	fc8e <bt_le_adv_start_legacy+0x36>
	memcpy(dst, src, sizeof(*dst));
    fd0a:	2207      	movs	r2, #7
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fd0c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    fd10:	f1ba 0f00 	cmp.w	sl, #0
    fd14:	d013      	beq.n	fd3e <bt_le_adv_start_legacy+0xe6>
    fd16:	6929      	ldr	r1, [r5, #16]
    fd18:	f00d f81d 	bl	1cd56 <memcpy>
	name_type = get_adv_name_type_param(param);
    fd1c:	4628      	mov	r0, r5
    fd1e:	f00d fa2d 	bl	1d17c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fd22:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    fd24:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fd26:	07d9      	lsls	r1, r3, #31
    fd28:	d416      	bmi.n	fd58 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    fd2a:	059b      	lsls	r3, r3, #22
    fd2c:	d403      	bmi.n	fd36 <bt_le_adv_start_legacy+0xde>
    fd2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fd30:	b90b      	cbnz	r3, fd36 <bt_le_adv_start_legacy+0xde>
    fd32:	2f02      	cmp	r7, #2
    fd34:	d15a      	bne.n	fdec <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    fd36:	2302      	movs	r3, #2
    fd38:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fd3c:	e01a      	b.n	fd74 <bt_le_adv_start_legacy+0x11c>
    fd3e:	4960      	ldr	r1, [pc, #384]	; (fec0 <bt_le_adv_start_legacy+0x268>)
    fd40:	f00d f809 	bl	1cd56 <memcpy>
	name_type = get_adv_name_type_param(param);
    fd44:	4628      	mov	r0, r5
    fd46:	f00d fa19 	bl	1d17c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fd4a:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    fd4c:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fd4e:	07da      	lsls	r2, r3, #31
    fd50:	d5eb      	bpl.n	fd2a <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    fd52:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    fd56:	e00d      	b.n	fd74 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    fd58:	f013 0f10 	tst.w	r3, #16
    fd5c:	bf0c      	ite	eq
    fd5e:	2301      	moveq	r3, #1
    fd60:	2304      	movne	r3, #4
    fd62:	2207      	movs	r2, #7
    fd64:	6929      	ldr	r1, [r5, #16]
    fd66:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    fd6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
    fd6e:	46a1      	mov	r9, r4
    fd70:	f00c fff1 	bl	1cd56 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    fd74:	210f      	movs	r1, #15
    fd76:	f242 0006 	movw	r0, #8198	; 0x2006
    fd7a:	f7fe fc21 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
    fd7e:	4604      	mov	r4, r0
    fd80:	2800      	cmp	r0, #0
    fd82:	f000 8096 	beq.w	feb2 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fd86:	220f      	movs	r2, #15
    fd88:	a908      	add	r1, sp, #32
    fd8a:	3008      	adds	r0, #8
    fd8c:	f00e f9a5 	bl	1e0da <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    fd90:	4621      	mov	r1, r4
    fd92:	2200      	movs	r2, #0
    fd94:	f242 0006 	movw	r0, #8198	; 0x2006
    fd98:	f7fe fc60 	bl	e65c <bt_hci_cmd_send_sync>
	if (err) {
    fd9c:	4604      	mov	r4, r0
    fd9e:	2800      	cmp	r0, #0
    fda0:	f47f af75 	bne.w	fc8e <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
    fda4:	f1ba 0f00 	cmp.w	sl, #0
    fda8:	d026      	beq.n	fdf8 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fdaa:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fdac:	07dc      	lsls	r4, r3, #31
    fdae:	d431      	bmi.n	fe14 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
    fdb0:	2101      	movs	r1, #1
    fdb2:	4630      	mov	r0, r6
    fdb4:	f00d f9f2 	bl	1d19c <bt_le_adv_set_enable_legacy>
	if (err) {
    fdb8:	4604      	mov	r4, r0
    fdba:	2800      	cmp	r0, #0
    fdbc:	d06b      	beq.n	fe96 <bt_le_adv_start_legacy+0x23e>
		BT_ERR("Failed to start advertiser");
    fdbe:	4b41      	ldr	r3, [pc, #260]	; (fec4 <bt_le_adv_start_legacy+0x26c>)
    fdc0:	9311      	str	r3, [sp, #68]	; 0x44
    fdc2:	2302      	movs	r3, #2
    fdc4:	9310      	str	r3, [sp, #64]	; 0x40
    fdc6:	2300      	movs	r3, #0
    fdc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fdcc:	483e      	ldr	r0, [pc, #248]	; (fec8 <bt_le_adv_start_legacy+0x270>)
    fdce:	aa10      	add	r2, sp, #64	; 0x40
    fdd0:	f7fb fd1a 	bl	b808 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fdd4:	9d07      	ldr	r5, [sp, #28]
    fdd6:	2d00      	cmp	r5, #0
    fdd8:	f43f af59 	beq.w	fc8e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fddc:	4628      	mov	r0, r5
    fdde:	2100      	movs	r1, #0
    fde0:	f000 fd26 	bl	10830 <bt_conn_set_state>
			bt_conn_unref(conn);
    fde4:	4628      	mov	r0, r5
    fde6:	f000 fceb 	bl	107c0 <bt_conn_unref>
    fdea:	e750      	b.n	fc8e <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    fdec:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    fdee:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    fdf2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fdf6:	e7bd      	b.n	fd74 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    fdf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fdfa:	4659      	mov	r1, fp
    fdfc:	9300      	str	r3, [sp, #0]
    fdfe:	4630      	mov	r0, r6
    fe00:	e9cd 9701 	strd	r9, r7, [sp, #4]
    fe04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fe06:	9a05      	ldr	r2, [sp, #20]
    fe08:	f00d f946 	bl	1d098 <le_adv_update.constprop.0>
		if (err) {
    fe0c:	4604      	mov	r4, r0
    fe0e:	2800      	cmp	r0, #0
    fe10:	d0cb      	beq.n	fdaa <bt_le_adv_start_legacy+0x152>
    fe12:	e73c      	b.n	fc8e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    fe14:	4630      	mov	r0, r6
    fe16:	a907      	add	r1, sp, #28
    fe18:	f7ff fea2 	bl	fb60 <le_adv_start_add_conn>
		if (err) {
    fe1c:	4604      	mov	r4, r0
    fe1e:	2800      	cmp	r0, #0
    fe20:	d0c6      	beq.n	fdb0 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
    fe22:	f110 0f0c 	cmn.w	r0, #12
    fe26:	f47f af32 	bne.w	fc8e <bt_le_adv_start_legacy+0x36>
    fe2a:	f1ba 0f00 	cmp.w	sl, #0
    fe2e:	f47f af2e 	bne.w	fc8e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    fe32:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    fe34:	0798      	lsls	r0, r3, #30
    fe36:	f53f af2a 	bmi.w	fc8e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fe3a:	686c      	ldr	r4, [r5, #4]
    fe3c:	f084 0402 	eor.w	r4, r4, #2
    fe40:	f3c4 0440 	ubfx	r4, r4, #1, #1
    fe44:	f004 0201 	and.w	r2, r4, #1
    fe48:	210e      	movs	r1, #14
    fe4a:	4640      	mov	r0, r8
    fe4c:	f00d f911 	bl	1d072 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    fe50:	1e7b      	subs	r3, r7, #1
    fe52:	425a      	negs	r2, r3
    fe54:	415a      	adcs	r2, r3
    fe56:	2108      	movs	r1, #8
    fe58:	4640      	mov	r0, r8
    fe5a:	f00d f90a 	bl	1d072 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    fe5e:	1eb9      	subs	r1, r7, #2
    fe60:	424a      	negs	r2, r1
    fe62:	414a      	adcs	r2, r1
    fe64:	4640      	mov	r0, r8
    fe66:	2109      	movs	r1, #9
    fe68:	f00d f903 	bl	1d072 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    fe6c:	686a      	ldr	r2, [r5, #4]
    fe6e:	210a      	movs	r1, #10
    fe70:	4640      	mov	r0, r8
    fe72:	f002 0201 	and.w	r2, r2, #1
    fe76:	f00d f8fc 	bl	1d072 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    fe7a:	464a      	mov	r2, r9
    fe7c:	210b      	movs	r1, #11
    fe7e:	4640      	mov	r0, r8
    fe80:	f00d f8f7 	bl	1d072 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    fe84:	686a      	ldr	r2, [r5, #4]
    fe86:	210d      	movs	r1, #13
    fe88:	4640      	mov	r0, r8
    fe8a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    fe8e:	f00d f8f0 	bl	1d072 <atomic_set_bit_to>
	return 0;
    fe92:	2400      	movs	r4, #0
    fe94:	e6fb      	b.n	fc8e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fe96:	9807      	ldr	r0, [sp, #28]
    fe98:	b108      	cbz	r0, fe9e <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
    fe9a:	f000 fc91 	bl	107c0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fe9e:	f1ba 0f00 	cmp.w	sl, #0
    fea2:	d1cf      	bne.n	fe44 <bt_le_adv_start_legacy+0x1ec>
    fea4:	e7c9      	b.n	fe3a <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
    fea6:	f06f 040a 	mvn.w	r4, #10
    feaa:	e6f0      	b.n	fc8e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    feac:	f06f 0477 	mvn.w	r4, #119	; 0x77
    feb0:	e6ed      	b.n	fc8e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    feb2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    feb6:	e6ea      	b.n	fc8e <bt_le_adv_start_legacy+0x36>
    feb8:	200080cc 	.word	0x200080cc
    febc:	20008000 	.word	0x20008000
    fec0:	000218c6 	.word	0x000218c6
    fec4:	000220d9 	.word	0x000220d9
    fec8:	0001f8a8 	.word	0x0001f8a8

0000fecc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    fecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fece:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    fed0:	9a06      	ldr	r2, [sp, #24]
{
    fed2:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    fed4:	e9cd 3200 	strd	r3, r2, [sp]
    fed8:	462b      	mov	r3, r5
    feda:	460a      	mov	r2, r1
    fedc:	4601      	mov	r1, r0
    fede:	4811      	ldr	r0, [pc, #68]	; (ff24 <bt_le_adv_start+0x58>)
    fee0:	f7ff feba 	bl	fc58 <bt_le_adv_start_legacy>
    fee4:	4621      	mov	r1, r4
    fee6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    fee8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    feea:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    feee:	429d      	cmp	r5, r3
    fef0:	d102      	bne.n	fef8 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    fef2:	4630      	mov	r0, r6
    fef4:	b002      	add	sp, #8
    fef6:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    fef8:	880a      	ldrh	r2, [r1, #0]
    fefa:	4282      	cmp	r2, r0
    fefc:	d104      	bne.n	ff08 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    fefe:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    ff00:	b112      	cbz	r2, ff08 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    ff02:	7812      	ldrb	r2, [r2, #0]
    ff04:	07d2      	lsls	r2, r2, #31
    ff06:	d402      	bmi.n	ff0e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    ff08:	3301      	adds	r3, #1
    ff0a:	3108      	adds	r1, #8
    ff0c:	e7ef      	b.n	feee <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    ff0e:	4906      	ldr	r1, [pc, #24]	; (ff28 <bt_le_adv_start+0x5c>)
    ff10:	4806      	ldr	r0, [pc, #24]	; (ff2c <bt_le_adv_start+0x60>)
    ff12:	f009 f8e9 	bl	190e8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    ff16:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    ff1a:	2300      	movs	r3, #0
    ff1c:	4803      	ldr	r0, [pc, #12]	; (ff2c <bt_le_adv_start+0x60>)
    ff1e:	f009 f9ff 	bl	19320 <k_work_reschedule>
    ff22:	e7e6      	b.n	fef2 <bt_le_adv_start+0x26>
    ff24:	20008018 	.word	0x20008018
    ff28:	0000ffb5 	.word	0x0000ffb5
    ff2c:	20008030 	.word	0x20008030

0000ff30 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    ff30:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    ff32:	481a      	ldr	r0, [pc, #104]	; (ff9c <bt_le_adv_stop+0x6c>)
    ff34:	f00d f957 	bl	1d1e6 <bt_le_lim_adv_cancel_timeout>
    ff38:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    ff3c:	4818      	ldr	r0, [pc, #96]	; (ffa0 <bt_le_adv_stop+0x70>)
    ff3e:	f00d f88d 	bl	1d05c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ff42:	4817      	ldr	r0, [pc, #92]	; (ffa0 <bt_le_adv_stop+0x70>)
    ff44:	f00d f887 	bl	1d056 <atomic_get>
    ff48:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ff4a:	061a      	lsls	r2, r3, #24
    ff4c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    ff50:	d523      	bpl.n	ff9a <bt_le_adv_stop+0x6a>
    ff52:	4813      	ldr	r0, [pc, #76]	; (ffa0 <bt_le_adv_stop+0x70>)
    ff54:	f00d f87f 	bl	1d056 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ff58:	0543      	lsls	r3, r0, #21
    ff5a:	d514      	bpl.n	ff86 <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
    ff5c:	2207      	movs	r2, #7
    ff5e:	4911      	ldr	r1, [pc, #68]	; (ffa4 <bt_le_adv_stop+0x74>)
    ff60:	4811      	ldr	r0, [pc, #68]	; (ffa8 <bt_le_adv_stop+0x78>)
    ff62:	f00c fee8 	bl	1cd36 <memcmp>
    ff66:	4b11      	ldr	r3, [pc, #68]	; (ffac <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ff68:	b998      	cbnz	r0, ff92 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    ff6a:	2204      	movs	r2, #4
    ff6c:	4910      	ldr	r1, [pc, #64]	; (ffb0 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ff6e:	7e18      	ldrb	r0, [r3, #24]
    ff70:	f000 fecc 	bl	10d0c <bt_conn_lookup_state_le>
    ff74:	4604      	mov	r4, r0
	if (conn) {
    ff76:	b130      	cbz	r0, ff86 <bt_le_adv_stop+0x56>
		conn->err = status;
    ff78:	2100      	movs	r1, #0
    ff7a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ff7c:	f000 fc58 	bl	10830 <bt_conn_set_state>
		bt_conn_unref(conn);
    ff80:	4620      	mov	r0, r4
    ff82:	f000 fc1d 	bl	107c0 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    ff86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    ff8a:	2100      	movs	r1, #0
    ff8c:	4803      	ldr	r0, [pc, #12]	; (ff9c <bt_le_adv_stop+0x6c>)
    ff8e:	f00d b905 	b.w	1d19c <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ff92:	2205      	movs	r2, #5
    ff94:	f103 0121 	add.w	r1, r3, #33	; 0x21
    ff98:	e7e9      	b.n	ff6e <bt_le_adv_stop+0x3e>
}
    ff9a:	bd10      	pop	{r4, pc}
    ff9c:	20008018 	.word	0x20008018
    ffa0:	20008028 	.word	0x20008028
    ffa4:	000218c6 	.word	0x000218c6
    ffa8:	20008021 	.word	0x20008021
    ffac:	20008000 	.word	0x20008000
    ffb0:	000218bf 	.word	0x000218bf

0000ffb4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    ffb4:	b580      	push	{r7, lr}
    ffb6:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    ffb8:	f7ff ffba 	bl	ff30 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
    ffbc:	b088      	sub	sp, #32
    ffbe:	466a      	mov	r2, sp
    ffc0:	4b06      	ldr	r3, [pc, #24]	; (ffdc <adv_timeout+0x28>)
    ffc2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ffc6:	2303      	movs	r3, #3
    ffc8:	f842 3f10 	str.w	r3, [r2, #16]!
    ffcc:	2300      	movs	r3, #0
    ffce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ffd2:	4803      	ldr	r0, [pc, #12]	; (ffe0 <adv_timeout+0x2c>)
    ffd4:	f7fb fc18 	bl	b808 <z_impl_z_log_msg_static_create>
}
    ffd8:	46bd      	mov	sp, r7
    ffda:	bd80      	pop	{r7, pc}
    ffdc:	000220f4 	.word	0x000220f4
    ffe0:	0001f8a8 	.word	0x0001f8a8

0000ffe4 <bt_le_adv_resume>:
{
    ffe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ffe6:	4c1e      	ldr	r4, [pc, #120]	; (10060 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x60>)
    ffe8:	4620      	mov	r0, r4
    ffea:	f00d f834 	bl	1d056 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    ffee:	0440      	lsls	r0, r0, #17
    fff0:	d534      	bpl.n	1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
    fff2:	4620      	mov	r0, r4
    fff4:	f00d f82f 	bl	1d056 <atomic_get>
    fff8:	0601      	lsls	r1, r0, #24
    fffa:	d42f      	bmi.n	1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
    fffc:	4620      	mov	r0, r4
    fffe:	f00d f82a 	bl	1d056 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10002:	0542      	lsls	r2, r0, #21
   10004:	d52a      	bpl.n	1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
	err = le_adv_start_add_conn(adv, &conn);
   10006:	a901      	add	r1, sp, #4
   10008:	f1a4 0010 	sub.w	r0, r4, #16
   1000c:	f7ff fda8 	bl	fb60 <le_adv_start_add_conn>
	if (err) {
   10010:	4605      	mov	r5, r0
   10012:	bb18      	cbnz	r0, 1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   10014:	2101      	movs	r1, #1
   10016:	f1a4 0010 	sub.w	r0, r4, #16
   1001a:	f00d f8bf 	bl	1d19c <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1001e:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   10020:	b928      	cbnz	r0, 1002e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2e>
	bt_conn_unref(conn);
   10022:	4630      	mov	r0, r6
}
   10024:	b002      	add	sp, #8
   10026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1002a:	f000 bbc9 	b.w	107c0 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1002e:	4629      	mov	r1, r5
   10030:	4630      	mov	r0, r6
   10032:	f000 fbfd 	bl	10830 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10036:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1003a:	4620      	mov	r0, r4
   1003c:	f00d f80e 	bl	1d05c <atomic_and>
   10040:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   10042:	4630      	mov	r0, r6
   10044:	f000 fbbc 	bl	107c0 <bt_conn_unref>
	if (persist_paused) {
   10048:	046b      	lsls	r3, r5, #17
   1004a:	d507      	bpl.n	1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1004c:	e8d4 3fef 	ldaex	r3, [r4]
   10050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10054:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10058:	2a00      	cmp	r2, #0
   1005a:	d1f7      	bne.n	1004c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4c>
}
   1005c:	b002      	add	sp, #8
   1005e:	bd70      	pop	{r4, r5, r6, pc}
   10060:	20008028 	.word	0x20008028

00010064 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10064:	b530      	push	{r4, r5, lr}
   10066:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   10068:	2120      	movs	r1, #32
   1006a:	a80a      	add	r0, sp, #40	; 0x28
   1006c:	f7fe fb9a 	bl	e7a4 <bt_hci_le_rand>
	if (ret) {
   10070:	4604      	mov	r4, r0
   10072:	bb18      	cbnz	r0, 100bc <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   10074:	f00f f8e4 	bl	1f240 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   10078:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1007c:	fba0 2305 	umull	r2, r3, r0, r5
   10080:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10084:	2308      	movs	r3, #8
   10086:	0bd2      	lsrs	r2, r2, #15
   10088:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1008c:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1008e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10092:	9300      	str	r3, [sp, #0]
   10094:	2220      	movs	r2, #32
   10096:	480b      	ldr	r0, [pc, #44]	; (100c4 <prng_reseed.constprop.0+0x60>)
   10098:	446b      	add	r3, sp
   1009a:	a90a      	add	r1, sp, #40	; 0x28
   1009c:	f00c fd5d 	bl	1cb5a <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   100a0:	b960      	cbnz	r0, 100bc <prng_reseed.constprop.0+0x58>
		BT_ERR("Failed to re-seed PRNG");
   100a2:	4b09      	ldr	r3, [pc, #36]	; (100c8 <prng_reseed.constprop.0+0x64>)
   100a4:	9309      	str	r3, [sp, #36]	; 0x24
   100a6:	2302      	movs	r3, #2
   100a8:	9308      	str	r3, [sp, #32]
   100aa:	4623      	mov	r3, r4
   100ac:	f06f 0404 	mvn.w	r4, #4
   100b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   100b4:	4805      	ldr	r0, [pc, #20]	; (100cc <prng_reseed.constprop.0+0x68>)
   100b6:	aa08      	add	r2, sp, #32
   100b8:	f7fb fba6 	bl	b808 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   100bc:	4620      	mov	r0, r4
   100be:	b013      	add	sp, #76	; 0x4c
   100c0:	bd30      	pop	{r4, r5, pc}
   100c2:	bf00      	nop
   100c4:	200091c0 	.word	0x200091c0
   100c8:	0002211a 	.word	0x0002211a
   100cc:	0001f8c8 	.word	0x0001f8c8

000100d0 <prng_init>:

int prng_init(void)
{
   100d0:	b510      	push	{r4, lr}
   100d2:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   100d4:	2108      	movs	r1, #8
   100d6:	4668      	mov	r0, sp
   100d8:	f7fe fb64 	bl	e7a4 <bt_hci_le_rand>
	if (ret) {
   100dc:	4604      	mov	r4, r0
   100de:	b990      	cbnz	r0, 10106 <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   100e0:	2208      	movs	r2, #8
   100e2:	4669      	mov	r1, sp
   100e4:	480b      	ldr	r0, [pc, #44]	; (10114 <prng_init+0x44>)
   100e6:	f00c fd18 	bl	1cb1a <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   100ea:	b978      	cbnz	r0, 1010c <prng_init+0x3c>
		BT_ERR("Failed to initialize PRNG");
   100ec:	4b0a      	ldr	r3, [pc, #40]	; (10118 <prng_init+0x48>)
   100ee:	9307      	str	r3, [sp, #28]
   100f0:	2302      	movs	r3, #2
   100f2:	9306      	str	r3, [sp, #24]
   100f4:	4623      	mov	r3, r4
		return -EIO;
   100f6:	f06f 0404 	mvn.w	r4, #4
   100fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   100fe:	4807      	ldr	r0, [pc, #28]	; (1011c <prng_init+0x4c>)
   10100:	aa06      	add	r2, sp, #24
   10102:	f7fb fb81 	bl	b808 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10106:	4620      	mov	r0, r4
   10108:	b008      	add	sp, #32
   1010a:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1010c:	f7ff ffaa 	bl	10064 <prng_reseed.constprop.0>
   10110:	4604      	mov	r4, r0
   10112:	e7f8      	b.n	10106 <prng_init+0x36>
   10114:	200091c0 	.word	0x200091c0
   10118:	00022131 	.word	0x00022131
   1011c:	0001f8c8 	.word	0x0001f8c8

00010120 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   10120:	b538      	push	{r3, r4, r5, lr}
   10122:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   10124:	4604      	mov	r4, r0
   10126:	b198      	cbz	r0, 10150 <bt_rand+0x30>
   10128:	b191      	cbz	r1, 10150 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1012a:	4a0b      	ldr	r2, [pc, #44]	; (10158 <bt_rand+0x38>)
   1012c:	f00c fd2e 	bl	1cb8c <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10130:	1c43      	adds	r3, r0, #1
   10132:	d107      	bne.n	10144 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   10134:	f7ff ff96 	bl	10064 <prng_reseed.constprop.0>
		if (ret) {
   10138:	b948      	cbnz	r0, 1014e <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1013a:	4629      	mov	r1, r5
   1013c:	4620      	mov	r0, r4
   1013e:	4a06      	ldr	r2, [pc, #24]	; (10158 <bt_rand+0x38>)
   10140:	f00c fd24 	bl	1cb8c <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   10144:	2801      	cmp	r0, #1
   10146:	bf0c      	ite	eq
   10148:	2000      	moveq	r0, #0
   1014a:	f06f 0004 	mvnne.w	r0, #4
}
   1014e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10150:	f06f 0015 	mvn.w	r0, #21
   10154:	e7fb      	b.n	1014e <bt_rand+0x2e>
   10156:	bf00      	nop
   10158:	200091c0 	.word	0x200091c0

0001015c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1015c:	b570      	push	{r4, r5, r6, lr}
   1015e:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   10160:	4b12      	ldr	r3, [pc, #72]	; (101ac <notify_connected+0x50>)
   10162:	681d      	ldr	r5, [r3, #0]
   10164:	b995      	cbnz	r5, 1018c <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10166:	4d12      	ldr	r5, [pc, #72]	; (101b0 <notify_connected+0x54>)
   10168:	4e12      	ldr	r6, [pc, #72]	; (101b4 <notify_connected+0x58>)
   1016a:	42b5      	cmp	r5, r6
   1016c:	d91c      	bls.n	101a8 <notify_connected+0x4c>
   1016e:	4912      	ldr	r1, [pc, #72]	; (101b8 <notify_connected+0x5c>)
   10170:	f44f 63ab 	mov.w	r3, #1368	; 0x558
   10174:	4a11      	ldr	r2, [pc, #68]	; (101bc <notify_connected+0x60>)
   10176:	4812      	ldr	r0, [pc, #72]	; (101c0 <notify_connected+0x64>)
   10178:	f00b fdde 	bl	1bd38 <assert_print>
   1017c:	4811      	ldr	r0, [pc, #68]	; (101c4 <notify_connected+0x68>)
   1017e:	f00b fddb 	bl	1bd38 <assert_print>
   10182:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   10186:	480d      	ldr	r0, [pc, #52]	; (101bc <notify_connected+0x60>)
   10188:	f00b fdcf 	bl	1bd2a <assert_post_action>
		if (cb->connected) {
   1018c:	682b      	ldr	r3, [r5, #0]
   1018e:	b113      	cbz	r3, 10196 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   10190:	4620      	mov	r0, r4
   10192:	7a61      	ldrb	r1, [r4, #9]
   10194:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10196:	692d      	ldr	r5, [r5, #16]
   10198:	e7e4      	b.n	10164 <notify_connected+0x8>
		if (cb->connected) {
   1019a:	682b      	ldr	r3, [r5, #0]
   1019c:	b113      	cbz	r3, 101a4 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1019e:	4620      	mov	r0, r4
   101a0:	7a61      	ldrb	r1, [r4, #9]
   101a2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   101a4:	3514      	adds	r5, #20
   101a6:	e7e0      	b.n	1016a <notify_connected+0xe>
   101a8:	d3f7      	bcc.n	1019a <notify_connected+0x3e>
		}
	}
}
   101aa:	bd70      	pop	{r4, r5, r6, pc}
   101ac:	200097c0 	.word	0x200097c0
   101b0:	0001f888 	.word	0x0001f888
   101b4:	0001f888 	.word	0x0001f888
   101b8:	00022185 	.word	0x00022185
   101bc:	00022155 	.word	0x00022155
   101c0:	000205a4 	.word	0x000205a4
   101c4:	00020cc7 	.word	0x00020cc7

000101c8 <tx_notify>:
{
   101c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101cc:	4604      	mov	r4, r0
	tx->cb = NULL;
   101ce:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   101d2:	4f14      	ldr	r7, [pc, #80]	; (10224 <tx_notify+0x5c>)
	__asm__ volatile(
   101d4:	f04f 0220 	mov.w	r2, #32
   101d8:	f3ef 8311 	mrs	r3, BASEPRI
   101dc:	f382 8812 	msr	BASEPRI_MAX, r2
   101e0:	f3bf 8f6f 	isb	sy
	return list->head;
   101e4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   101e6:	b929      	cbnz	r1, 101f4 <tx_notify+0x2c>
	__asm__ volatile(
   101e8:	f383 8811 	msr	BASEPRI, r3
   101ec:	f3bf 8f6f 	isb	sy
}
   101f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   101f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   101f6:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   101f8:	4281      	cmp	r1, r0
	list->tail = node;
   101fa:	bf08      	it	eq
   101fc:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   101fe:	6222      	str	r2, [r4, #32]
   10200:	f383 8811 	msr	BASEPRI, r3
   10204:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   10208:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1020c:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1020e:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   10212:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   10216:	f00e ff55 	bl	1f0c4 <k_queue_append>
		cb(conn, user_data, 0);
   1021a:	2200      	movs	r2, #0
   1021c:	4631      	mov	r1, r6
   1021e:	4620      	mov	r0, r4
   10220:	47a8      	blx	r5
	while (1) {
   10222:	e7d7      	b.n	101d4 <tx_notify+0xc>
   10224:	200085b0 	.word	0x200085b0

00010228 <conn_tx_destroy>:
{
   10228:	b570      	push	{r4, r5, r6, lr}
   1022a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1022c:	b949      	cbnz	r1, 10242 <conn_tx_destroy+0x1a>
   1022e:	490d      	ldr	r1, [pc, #52]	; (10264 <conn_tx_destroy+0x3c>)
   10230:	480d      	ldr	r0, [pc, #52]	; (10268 <conn_tx_destroy+0x40>)
   10232:	2338      	movs	r3, #56	; 0x38
   10234:	4a0d      	ldr	r2, [pc, #52]	; (1026c <conn_tx_destroy+0x44>)
   10236:	f00b fd7f 	bl	1bd38 <assert_print>
   1023a:	2138      	movs	r1, #56	; 0x38
   1023c:	480b      	ldr	r0, [pc, #44]	; (1026c <conn_tx_destroy+0x44>)
   1023e:	f00b fd74 	bl	1bd2a <assert_post_action>
	tx->cb = NULL;
   10242:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   10244:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   10248:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   1024a:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1024e:	4808      	ldr	r0, [pc, #32]	; (10270 <conn_tx_destroy+0x48>)
   10250:	f00e ff38 	bl	1f0c4 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   10254:	4631      	mov	r1, r6
   10256:	4620      	mov	r0, r4
   10258:	462b      	mov	r3, r5
}
   1025a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1025e:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   10262:	4718      	bx	r3
   10264:	000221a0 	.word	0x000221a0
   10268:	000205a4 	.word	0x000205a4
   1026c:	00022155 	.word	0x00022155
   10270:	200085b0 	.word	0x200085b0

00010274 <send_frag>:
{
   10274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10278:	4604      	mov	r4, r0
   1027a:	460e      	mov	r6, r1
   1027c:	4692      	mov	sl, r2
   1027e:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10280:	694d      	ldr	r5, [r1, #20]
{
   10282:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   10284:	f04f 33ff 	mov.w	r3, #4294967295
   10288:	f04f 32ff 	mov.w	r2, #4294967295
   1028c:	4855      	ldr	r0, [pc, #340]	; (103e4 <send_frag+0x170>)
   1028e:	f008 faeb 	bl	18868 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   10292:	7aa3      	ldrb	r3, [r4, #10]
   10294:	2b07      	cmp	r3, #7
   10296:	f040 8099 	bne.w	103cc <send_frag+0x158>
	__asm__ volatile(
   1029a:	f04f 0320 	mov.w	r3, #32
   1029e:	f3ef 8211 	mrs	r2, BASEPRI
   102a2:	f383 8812 	msr	BASEPRI_MAX, r3
   102a6:	f3bf 8f6f 	isb	sy
	if (tx) {
   102aa:	2d00      	cmp	r5, #0
   102ac:	d058      	beq.n	10360 <send_frag+0xec>
	parent->next = child;
   102ae:	2300      	movs	r3, #0
   102b0:	602b      	str	r3, [r5, #0]
	return list->tail;
   102b2:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   102b4:	2b00      	cmp	r3, #0
   102b6:	d150      	bne.n	1035a <send_frag+0xe6>
	list->head = node;
   102b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   102bc:	f382 8811 	msr	BASEPRI, r2
   102c0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   102c4:	2104      	movs	r1, #4
   102c6:	f106 0008 	add.w	r0, r6, #8
   102ca:	f003 fc83 	bl	13bd4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   102ce:	8823      	ldrh	r3, [r4, #0]
   102d0:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   102d4:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   102d8:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   102dc:	89b3      	ldrh	r3, [r6, #12]
   102de:	3b04      	subs	r3, #4
   102e0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   102e2:	2302      	movs	r3, #2
	return bt_send(buf);
   102e4:	4630      	mov	r0, r6
   102e6:	7533      	strb	r3, [r6, #20]
   102e8:	f7fe fc2e 	bl	eb48 <bt_send>
	if (err) {
   102ec:	2800      	cmp	r0, #0
   102ee:	d077      	beq.n	103e0 <send_frag+0x16c>
		BT_ERR("Unable to send to driver (err %d)", err);
   102f0:	46ea      	mov	sl, sp
   102f2:	b088      	sub	sp, #32
   102f4:	466a      	mov	r2, sp
   102f6:	4b3c      	ldr	r3, [pc, #240]	; (103e8 <send_frag+0x174>)
   102f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   102fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10300:	2303      	movs	r3, #3
   10302:	483a      	ldr	r0, [pc, #232]	; (103ec <send_frag+0x178>)
   10304:	f842 3f10 	str.w	r3, [r2, #16]!
   10308:	f00c ff70 	bl	1d1ec <z_log_msg_static_create.constprop.0>
   1030c:	46d5      	mov	sp, sl
	__asm__ volatile(
   1030e:	f04f 0320 	mov.w	r3, #32
   10312:	f3ef 8111 	mrs	r1, BASEPRI
   10316:	f383 8812 	msr	BASEPRI_MAX, r3
   1031a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1031e:	2d00      	cmp	r5, #0
   10320:	d034      	beq.n	1038c <send_frag+0x118>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10322:	2200      	movs	r2, #0
	return list->head;
   10324:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10326:	b153      	cbz	r3, 1033e <send_frag+0xca>
   10328:	429d      	cmp	r5, r3
   1032a:	d12c      	bne.n	10386 <send_frag+0x112>
	return node->next;
   1032c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1032e:	bb22      	cbnz	r2, 1037a <send_frag+0x106>
   10330:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   10332:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   10334:	4295      	cmp	r5, r2
   10336:	d100      	bne.n	1033a <send_frag+0xc6>
	list->tail = node;
   10338:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1033a:	2300      	movs	r3, #0
   1033c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1033e:	f381 8811 	msr	BASEPRI, r1
   10342:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10346:	4827      	ldr	r0, [pc, #156]	; (103e4 <send_frag+0x170>)
   10348:	f008 fa4a 	bl	187e0 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1034c:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   1034e:	4629      	mov	r1, r5
   10350:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   10352:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   10354:	f7ff ff68 	bl	10228 <conn_tx_destroy>
   10358:	e031      	b.n	103be <send_frag+0x14a>
   1035a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1035c:	61a5      	str	r5, [r4, #24]
}
   1035e:	e7ad      	b.n	102bc <send_frag+0x48>
	return list->tail;
   10360:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   10362:	b133      	cbz	r3, 10372 <send_frag+0xfe>
			pending_no_cb = &tail_tx->pending_no_cb;
   10364:	f103 080c 	add.w	r8, r3, #12
   10368:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1036a:	3301      	adds	r3, #1
   1036c:	f8c8 3000 	str.w	r3, [r8]
   10370:	e7a4      	b.n	102bc <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   10372:	69e3      	ldr	r3, [r4, #28]
   10374:	f104 081c 	add.w	r8, r4, #28
   10378:	e7f7      	b.n	1036a <send_frag+0xf6>
	parent->next = child;
   1037a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1037c:	69a3      	ldr	r3, [r4, #24]
   1037e:	429d      	cmp	r5, r3
	list->tail = node;
   10380:	bf08      	it	eq
   10382:	61a2      	streq	r2, [r4, #24]
}
   10384:	e7d9      	b.n	1033a <send_frag+0xc6>
	return node->next;
   10386:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10388:	681b      	ldr	r3, [r3, #0]
   1038a:	e7cc      	b.n	10326 <send_frag+0xb2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1038c:	f8d8 3000 	ldr.w	r3, [r8]
   10390:	b95b      	cbnz	r3, 103aa <send_frag+0x136>
   10392:	4917      	ldr	r1, [pc, #92]	; (103f0 <send_frag+0x17c>)
   10394:	4817      	ldr	r0, [pc, #92]	; (103f4 <send_frag+0x180>)
   10396:	f240 2329 	movw	r3, #553	; 0x229
   1039a:	4a17      	ldr	r2, [pc, #92]	; (103f8 <send_frag+0x184>)
   1039c:	f00b fccc 	bl	1bd38 <assert_print>
   103a0:	f240 2129 	movw	r1, #553	; 0x229
   103a4:	4814      	ldr	r0, [pc, #80]	; (103f8 <send_frag+0x184>)
   103a6:	f00b fcc0 	bl	1bd2a <assert_post_action>
			(*pending_no_cb)--;
   103aa:	3b01      	subs	r3, #1
   103ac:	f8c8 3000 	str.w	r3, [r8]
   103b0:	f381 8811 	msr	BASEPRI, r1
   103b4:	f3bf 8f6f 	isb	sy
   103b8:	480a      	ldr	r0, [pc, #40]	; (103e4 <send_frag+0x170>)
   103ba:	f008 fa11 	bl	187e0 <z_impl_k_sem_give>
	if (always_consume) {
   103be:	f1b9 0f00 	cmp.w	r9, #0
   103c2:	d109      	bne.n	103d8 <send_frag+0x164>
	return false;
   103c4:	2000      	movs	r0, #0
}
   103c6:	46bd      	mov	sp, r7
   103c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   103cc:	4805      	ldr	r0, [pc, #20]	; (103e4 <send_frag+0x170>)
   103ce:	f008 fa07 	bl	187e0 <z_impl_k_sem_give>
	if (tx) {
   103d2:	2d00      	cmp	r5, #0
   103d4:	d1ba      	bne.n	1034c <send_frag+0xd8>
   103d6:	e7f2      	b.n	103be <send_frag+0x14a>
		net_buf_unref(buf);
   103d8:	4630      	mov	r0, r6
   103da:	f003 fb35 	bl	13a48 <net_buf_unref>
   103de:	e7f1      	b.n	103c4 <send_frag+0x150>
	return true;
   103e0:	2001      	movs	r0, #1
   103e2:	e7f0      	b.n	103c6 <send_frag+0x152>
   103e4:	20008100 	.word	0x20008100
   103e8:	00021d69 	.word	0x00021d69
   103ec:	0001f8c0 	.word	0x0001f8c0
   103f0:	000221a3 	.word	0x000221a3
   103f4:	000205a4 	.word	0x000205a4
   103f8:	00022155 	.word	0x00022155

000103fc <bt_conn_get_pkts>:
}
   103fc:	4800      	ldr	r0, [pc, #0]	; (10400 <bt_conn_get_pkts+0x4>)
   103fe:	4770      	bx	lr
   10400:	20008100 	.word	0x20008100

00010404 <bt_conn_new>:
{
   10404:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   10406:	2200      	movs	r2, #0
   10408:	4604      	mov	r4, r0
   1040a:	428a      	cmp	r2, r1
   1040c:	d102      	bne.n	10414 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1040e:	2400      	movs	r4, #0
}
   10410:	4620      	mov	r0, r4
   10412:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10414:	2001      	movs	r0, #1
   10416:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1041a:	e8d3 5fef 	ldaex	r5, [r3]
   1041e:	2d00      	cmp	r5, #0
   10420:	d104      	bne.n	1042c <bt_conn_new+0x28>
   10422:	e8c3 0fec 	stlex	ip, r0, [r3]
   10426:	f1bc 0f00 	cmp.w	ip, #0
   1042a:	d1f6      	bne.n	1041a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1042c:	d002      	beq.n	10434 <bt_conn_new+0x30>
   1042e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   10430:	4402      	add	r2, r0
   10432:	e7ea      	b.n	1040a <bt_conn_new+0x6>
	if (!conn) {
   10434:	2c00      	cmp	r4, #0
   10436:	d0ea      	beq.n	1040e <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   10438:	22c0      	movs	r2, #192	; 0xc0
   1043a:	2100      	movs	r1, #0
   1043c:	4620      	mov	r0, r4
   1043e:	f00c fc95 	bl	1cd6c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   10442:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10446:	4904      	ldr	r1, [pc, #16]	; (10458 <bt_conn_new+0x54>)
   10448:	f008 fe4e 	bl	190e8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1044c:	4903      	ldr	r1, [pc, #12]	; (1045c <bt_conn_new+0x58>)
   1044e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10452:	f008 fc6d 	bl	18d30 <k_work_init>
	return conn;
   10456:	e7db      	b.n	10410 <bt_conn_new+0xc>
   10458:	00010db9 	.word	0x00010db9
   1045c:	0001d1f3 	.word	0x0001d1f3

00010460 <conn_cleanup>:
{
   10460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10464:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   10466:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10468:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1046c:	2300      	movs	r3, #0
   1046e:	2200      	movs	r2, #0
   10470:	4630      	mov	r0, r6
   10472:	f003 f977 	bl	13764 <net_buf_get>
   10476:	4603      	mov	r3, r0
   10478:	b980      	cbnz	r0, 1049c <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1047a:	6963      	ldr	r3, [r4, #20]
   1047c:	b1cb      	cbz	r3, 104b2 <conn_cleanup+0x52>
   1047e:	4918      	ldr	r1, [pc, #96]	; (104e0 <conn_cleanup+0x80>)
   10480:	f240 23b6 	movw	r3, #694	; 0x2b6
   10484:	4a17      	ldr	r2, [pc, #92]	; (104e4 <conn_cleanup+0x84>)
   10486:	4818      	ldr	r0, [pc, #96]	; (104e8 <conn_cleanup+0x88>)
   10488:	f00b fc56 	bl	1bd38 <assert_print>
   1048c:	4817      	ldr	r0, [pc, #92]	; (104ec <conn_cleanup+0x8c>)
   1048e:	f00b fc53 	bl	1bd38 <assert_print>
   10492:	f240 21b6 	movw	r1, #694	; 0x2b6
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   10496:	4813      	ldr	r0, [pc, #76]	; (104e4 <conn_cleanup+0x84>)
   10498:	f00b fc47 	bl	1bd2a <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1049c:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1049e:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   104a0:	f003 fad2 	bl	13a48 <net_buf_unref>
		if (tx) {
   104a4:	2d00      	cmp	r5, #0
   104a6:	d0e1      	beq.n	1046c <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   104a8:	4629      	mov	r1, r5
   104aa:	4620      	mov	r0, r4
   104ac:	f7ff febc 	bl	10228 <conn_tx_destroy>
   104b0:	e7da      	b.n	10468 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   104b2:	69e3      	ldr	r3, [r4, #28]
   104b4:	b14b      	cbz	r3, 104ca <conn_cleanup+0x6a>
   104b6:	490e      	ldr	r1, [pc, #56]	; (104f0 <conn_cleanup+0x90>)
   104b8:	f240 23b7 	movw	r3, #695	; 0x2b7
   104bc:	4a09      	ldr	r2, [pc, #36]	; (104e4 <conn_cleanup+0x84>)
   104be:	480a      	ldr	r0, [pc, #40]	; (104e8 <conn_cleanup+0x88>)
   104c0:	f00b fc3a 	bl	1bd38 <assert_print>
   104c4:	f240 21b7 	movw	r1, #695	; 0x2b7
   104c8:	e7e5      	b.n	10496 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   104ca:	4620      	mov	r0, r4
   104cc:	f00c fe94 	bl	1d1f8 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   104d0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   104d4:	2200      	movs	r2, #0
}
   104d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   104da:	2300      	movs	r3, #0
   104dc:	f008 bf20 	b.w	19320 <k_work_reschedule>
   104e0:	000221b6 	.word	0x000221b6
   104e4:	00022155 	.word	0x00022155
   104e8:	000205a4 	.word	0x000205a4
   104ec:	000221dc 	.word	0x000221dc
   104f0:	000221f1 	.word	0x000221f1

000104f4 <bt_conn_recv>:
{
   104f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104f8:	4616      	mov	r6, r2
   104fa:	b086      	sub	sp, #24
   104fc:	af00      	add	r7, sp, #0
   104fe:	4604      	mov	r4, r0
   10500:	460d      	mov	r5, r1
	tx_notify(conn);
   10502:	f7ff fe61 	bl	101c8 <tx_notify>
	switch (flags) {
   10506:	2e01      	cmp	r6, #1
   10508:	d030      	beq.n	1056c <bt_conn_recv+0x78>
   1050a:	2e02      	cmp	r6, #2
   1050c:	d16a      	bne.n	105e4 <bt_conn_recv+0xf0>
		if (conn->rx) {
   1050e:	6923      	ldr	r3, [r4, #16]
   10510:	b163      	cbz	r3, 1052c <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   10512:	4b40      	ldr	r3, [pc, #256]	; (10614 <bt_conn_recv+0x120>)
   10514:	4840      	ldr	r0, [pc, #256]	; (10618 <bt_conn_recv+0x124>)
   10516:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1051a:	e9c7 6304 	strd	r6, r3, [r7, #16]
   1051e:	f107 0210 	add.w	r2, r7, #16
   10522:	f00c fe63 	bl	1d1ec <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   10526:	4620      	mov	r0, r4
   10528:	f00c fe66 	bl	1d1f8 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1052c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1052e:	6921      	ldr	r1, [r4, #16]
   10530:	8988      	ldrh	r0, [r1, #12]
   10532:	2801      	cmp	r0, #1
   10534:	d930      	bls.n	10598 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   10536:	688b      	ldr	r3, [r1, #8]
   10538:	881b      	ldrh	r3, [r3, #0]
   1053a:	3304      	adds	r3, #4
   1053c:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1053e:	4298      	cmp	r0, r3
   10540:	d32a      	bcc.n	10598 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   10542:	d95f      	bls.n	10604 <bt_conn_recv+0x110>
		BT_ERR("ACL len mismatch (%u > %u)",
   10544:	466d      	mov	r5, sp
   10546:	b088      	sub	sp, #32
   10548:	466a      	mov	r2, sp
   1054a:	61d3      	str	r3, [r2, #28]
   1054c:	2304      	movs	r3, #4
   1054e:	4933      	ldr	r1, [pc, #204]	; (1061c <bt_conn_recv+0x128>)
   10550:	e9c2 1005 	strd	r1, r0, [r2, #20]
   10554:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10558:	482f      	ldr	r0, [pc, #188]	; (10618 <bt_conn_recv+0x124>)
   1055a:	f842 3f10 	str.w	r3, [r2, #16]!
   1055e:	f00c fe45 	bl	1d1ec <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   10562:	4620      	mov	r0, r4
   10564:	46ad      	mov	sp, r5
   10566:	f00c fe47 	bl	1d1f8 <bt_conn_reset_rx_state>
		return;
   1056a:	e015      	b.n	10598 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   1056c:	6920      	ldr	r0, [r4, #16]
   1056e:	b970      	cbnz	r0, 1058e <bt_conn_recv+0x9a>
			BT_ERR("Unexpected L2CAP continuation");
   10570:	4b2b      	ldr	r3, [pc, #172]	; (10620 <bt_conn_recv+0x12c>)
   10572:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10576:	617b      	str	r3, [r7, #20]
   10578:	2302      	movs	r3, #2
   1057a:	4827      	ldr	r0, [pc, #156]	; (10618 <bt_conn_recv+0x124>)
   1057c:	613b      	str	r3, [r7, #16]
   1057e:	f107 0210 	add.w	r2, r7, #16
   10582:	f00c fe33 	bl	1d1ec <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   10586:	4620      	mov	r0, r4
   10588:	f00c fe36 	bl	1d1f8 <bt_conn_reset_rx_state>
   1058c:	e001      	b.n	10592 <bt_conn_recv+0x9e>
		if (!buf->len) {
   1058e:	89ae      	ldrh	r6, [r5, #12]
   10590:	b936      	cbnz	r6, 105a0 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   10592:	4628      	mov	r0, r5
   10594:	f003 fa58 	bl	13a48 <net_buf_unref>
}
   10598:	3718      	adds	r7, #24
   1059a:	46bd      	mov	sp, r7
   1059c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   105a0:	3008      	adds	r0, #8
   105a2:	f00d fd92 	bl	1e0ca <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   105a6:	4286      	cmp	r6, r0
   105a8:	d912      	bls.n	105d0 <bt_conn_recv+0xdc>
			BT_ERR("Not enough buffer space for L2CAP data");
   105aa:	4b1e      	ldr	r3, [pc, #120]	; (10624 <bt_conn_recv+0x130>)
   105ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   105b0:	617b      	str	r3, [r7, #20]
   105b2:	2302      	movs	r3, #2
   105b4:	4818      	ldr	r0, [pc, #96]	; (10618 <bt_conn_recv+0x124>)
   105b6:	613b      	str	r3, [r7, #16]
   105b8:	f107 0210 	add.w	r2, r7, #16
   105bc:	f00c fe16 	bl	1d1ec <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   105c0:	2200      	movs	r2, #0
   105c2:	4620      	mov	r0, r4
   105c4:	6921      	ldr	r1, [r4, #16]
   105c6:	f000 fe49 	bl	1125c <bt_l2cap_recv>
			conn->rx = NULL;
   105ca:	2300      	movs	r3, #0
   105cc:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   105ce:	e7e0      	b.n	10592 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   105d0:	6920      	ldr	r0, [r4, #16]
   105d2:	89aa      	ldrh	r2, [r5, #12]
   105d4:	68a9      	ldr	r1, [r5, #8]
   105d6:	3008      	adds	r0, #8
   105d8:	f00d fd7f 	bl	1e0da <net_buf_simple_add_mem>
		net_buf_unref(buf);
   105dc:	4628      	mov	r0, r5
   105de:	f003 fa33 	bl	13a48 <net_buf_unref>
		break;
   105e2:	e7a4      	b.n	1052e <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   105e4:	46e8      	mov	r8, sp
   105e6:	b088      	sub	sp, #32
   105e8:	466a      	mov	r2, sp
   105ea:	4b0f      	ldr	r3, [pc, #60]	; (10628 <bt_conn_recv+0x134>)
   105ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   105f0:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   105f4:	2303      	movs	r3, #3
   105f6:	4808      	ldr	r0, [pc, #32]	; (10618 <bt_conn_recv+0x124>)
   105f8:	f842 3f10 	str.w	r3, [r2, #16]!
   105fc:	f00c fdf6 	bl	1d1ec <z_log_msg_static_create.constprop.0>
   10600:	46c5      	mov	sp, r8
   10602:	e7c0      	b.n	10586 <bt_conn_recv+0x92>
	conn->rx = NULL;
   10604:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   10606:	2201      	movs	r2, #1
   10608:	4620      	mov	r0, r4
	conn->rx = NULL;
   1060a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1060c:	f000 fe26 	bl	1125c <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   10610:	e7c2      	b.n	10598 <bt_conn_recv+0xa4>
   10612:	bf00      	nop
   10614:	0002220a 	.word	0x0002220a
   10618:	0001f8c0 	.word	0x0001f8c0
   1061c:	0002228a 	.word	0x0002228a
   10620:	00022227 	.word	0x00022227
   10624:	00022245 	.word	0x00022245
   10628:	0002226c 	.word	0x0002226c

0001062c <bt_conn_send_cb>:
{
   1062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10630:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   10632:	7a83      	ldrb	r3, [r0, #10]
{
   10634:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10636:	2b07      	cmp	r3, #7
{
   10638:	460f      	mov	r7, r1
   1063a:	4616      	mov	r6, r2
   1063c:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   1063e:	d00c      	beq.n	1065a <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
   10640:	4b28      	ldr	r3, [pc, #160]	; (106e4 <bt_conn_send_cb+0xb8>)
   10642:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10646:	9305      	str	r3, [sp, #20]
   10648:	2302      	movs	r3, #2
   1064a:	4827      	ldr	r0, [pc, #156]	; (106e8 <bt_conn_send_cb+0xbc>)
   1064c:	aa04      	add	r2, sp, #16
   1064e:	9304      	str	r3, [sp, #16]
   10650:	f00c fdcc 	bl	1d1ec <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   10654:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10658:	e01d      	b.n	10696 <bt_conn_send_cb+0x6a>
	if (cb) {
   1065a:	2a00      	cmp	r2, #0
   1065c:	d040      	beq.n	106e0 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   1065e:	f009 ffe7 	bl	1a630 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   10662:	4b22      	ldr	r3, [pc, #136]	; (106ec <bt_conn_send_cb+0xc0>)
   10664:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   10666:	4822      	ldr	r0, [pc, #136]	; (106f0 <bt_conn_send_cb+0xc4>)
   10668:	bf07      	ittee	eq
   1066a:	2200      	moveq	r2, #0
   1066c:	2300      	moveq	r3, #0
   1066e:	f04f 32ff 	movne.w	r2, #4294967295
   10672:	f04f 33ff 	movne.w	r3, #4294967295
   10676:	f008 f849 	bl	1870c <z_impl_k_queue_get>
   1067a:	4604      	mov	r4, r0
		if (!tx) {
   1067c:	b970      	cbnz	r0, 1069c <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
   1067e:	4b1d      	ldr	r3, [pc, #116]	; (106f4 <bt_conn_send_cb+0xc8>)
   10680:	4819      	ldr	r0, [pc, #100]	; (106e8 <bt_conn_send_cb+0xbc>)
   10682:	9305      	str	r3, [sp, #20]
   10684:	2302      	movs	r3, #2
   10686:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1068a:	aa04      	add	r2, sp, #16
   1068c:	9304      	str	r3, [sp, #16]
   1068e:	f00c fdad 	bl	1d1ec <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   10692:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10696:	b006      	add	sp, #24
   10698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1069c:	7aab      	ldrb	r3, [r5, #10]
   1069e:	2b07      	cmp	r3, #7
   106a0:	d012      	beq.n	106c8 <bt_conn_send_cb+0x9c>
			BT_WARN("Disconnected while allocating context");
   106a2:	4b15      	ldr	r3, [pc, #84]	; (106f8 <bt_conn_send_cb+0xcc>)
   106a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   106a8:	9305      	str	r3, [sp, #20]
   106aa:	2302      	movs	r3, #2
   106ac:	480e      	ldr	r0, [pc, #56]	; (106e8 <bt_conn_send_cb+0xbc>)
   106ae:	aa04      	add	r2, sp, #16
   106b0:	9304      	str	r3, [sp, #16]
   106b2:	f00c fd9b 	bl	1d1ec <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   106b6:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   106b8:	4621      	mov	r1, r4
	tx->user_data = NULL;
   106ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   106be:	480c      	ldr	r0, [pc, #48]	; (106f0 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   106c0:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   106c2:	f00e fcff 	bl	1f0c4 <k_queue_append>
}
   106c6:	e7c5      	b.n	10654 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   106c8:	2300      	movs	r3, #0
		tx->user_data = user_data;
   106ca:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   106ce:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   106d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   106d4:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
   106d6:	617c      	str	r4, [r7, #20]
	net_buf_put(&conn->tx_queue, buf);
   106d8:	f003 f986 	bl	139e8 <net_buf_put>
	return 0;
   106dc:	2000      	movs	r0, #0
   106de:	e7da      	b.n	10696 <bt_conn_send_cb+0x6a>
   106e0:	4614      	mov	r4, r2
   106e2:	e7f5      	b.n	106d0 <bt_conn_send_cb+0xa4>
   106e4:	000222a5 	.word	0x000222a5
   106e8:	0001f8c0 	.word	0x0001f8c0
   106ec:	200095c0 	.word	0x200095c0
   106f0:	200085b0 	.word	0x200085b0
   106f4:	000222b4 	.word	0x000222b4
   106f8:	000222d2 	.word	0x000222d2

000106fc <bt_conn_prepare_events>:
{
   106fc:	b570      	push	{r4, r5, r6, lr}
   106fe:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   10700:	4818      	ldr	r0, [pc, #96]	; (10764 <bt_conn_prepare_events+0x68>)
   10702:	f00e fe87 	bl	1f414 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10706:	4620      	mov	r0, r4
   10708:	2200      	movs	r2, #0
   1070a:	2101      	movs	r1, #1
   1070c:	4b15      	ldr	r3, [pc, #84]	; (10764 <bt_conn_prepare_events+0x68>)
   1070e:	f00a fe97 	bl	1b440 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10712:	4a15      	ldr	r2, [pc, #84]	; (10768 <bt_conn_prepare_events+0x6c>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   10714:	f104 0014 	add.w	r0, r4, #20
   10718:	e8d2 3faf 	lda	r3, [r2]
	if (!atomic_get(&conn->ref)) {
   1071c:	b90b      	cbnz	r3, 10722 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1071e:	2001      	movs	r0, #1
}
   10720:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10722:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
   10726:	f812 2cb6 	ldrb.w	r2, [r2, #-182]
   1072a:	b972      	cbnz	r2, 1074a <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1072c:	1d1a      	adds	r2, r3, #4
   1072e:	e8d2 1fef 	ldaex	r1, [r2]
   10732:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   10736:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1073a:	2e00      	cmp	r6, #0
   1073c:	d1f7      	bne.n	1072e <bt_conn_prepare_events+0x32>
   1073e:	064a      	lsls	r2, r1, #25
   10740:	d503      	bpl.n	1074a <bt_conn_prepare_events+0x4e>
		conn_cleanup(conn);
   10742:	4618      	mov	r0, r3
   10744:	f7ff fe8c 	bl	10460 <conn_cleanup>
		return -ENOTCONN;
   10748:	e7e9      	b.n	1071e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1074a:	7a9b      	ldrb	r3, [r3, #10]
   1074c:	2b07      	cmp	r3, #7
   1074e:	d1e6      	bne.n	1071e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   10750:	4b06      	ldr	r3, [pc, #24]	; (1076c <bt_conn_prepare_events+0x70>)
   10752:	2200      	movs	r2, #0
   10754:	2104      	movs	r1, #4
   10756:	f00a fe73 	bl	1b440 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1075a:	2301      	movs	r3, #1
			ev_count++;
   1075c:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1075e:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   10762:	e7dd      	b.n	10720 <bt_conn_prepare_events+0x24>
   10764:	20008208 	.word	0x20008208
   10768:	200093b8 	.word	0x200093b8
   1076c:	20009330 	.word	0x20009330

00010770 <bt_conn_ref>:
{
   10770:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   10772:	b180      	cbz	r0, 10796 <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   10774:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10778:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   1077c:	b1bb      	cbz	r3, 107ae <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1077e:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10780:	e8d2 4fef 	ldaex	r4, [r2]
   10784:	429c      	cmp	r4, r3
   10786:	d104      	bne.n	10792 <bt_conn_ref+0x22>
   10788:	e8c2 1fec 	stlex	ip, r1, [r2]
   1078c:	f1bc 0f00 	cmp.w	ip, #0
   10790:	d1f6      	bne.n	10780 <bt_conn_ref+0x10>
   10792:	d1f1      	bne.n	10778 <bt_conn_ref+0x8>
}
   10794:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   10796:	4907      	ldr	r1, [pc, #28]	; (107b4 <bt_conn_ref+0x44>)
   10798:	4807      	ldr	r0, [pc, #28]	; (107b8 <bt_conn_ref+0x48>)
   1079a:	f44f 638f 	mov.w	r3, #1144	; 0x478
   1079e:	4a07      	ldr	r2, [pc, #28]	; (107bc <bt_conn_ref+0x4c>)
   107a0:	f00b faca 	bl	1bd38 <assert_print>
   107a4:	f44f 618f 	mov.w	r1, #1144	; 0x478
   107a8:	4804      	ldr	r0, [pc, #16]	; (107bc <bt_conn_ref+0x4c>)
   107aa:	f00b fabe 	bl	1bd2a <assert_post_action>
			return NULL;
   107ae:	4618      	mov	r0, r3
   107b0:	e7f0      	b.n	10794 <bt_conn_ref+0x24>
   107b2:	bf00      	nop
   107b4:	00021ddb 	.word	0x00021ddb
   107b8:	000205a4 	.word	0x000205a4
   107bc:	00022155 	.word	0x00022155

000107c0 <bt_conn_unref>:
{
   107c0:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   107c2:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   107c6:	e8d3 2fef 	ldaex	r2, [r3]
   107ca:	1e51      	subs	r1, r2, #1
   107cc:	e8c3 1fe4 	stlex	r4, r1, [r3]
   107d0:	2c00      	cmp	r4, #0
   107d2:	d1f8      	bne.n	107c6 <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   107d4:	2a00      	cmp	r2, #0
   107d6:	dc0e      	bgt.n	107f6 <bt_conn_unref+0x36>
   107d8:	490d      	ldr	r1, [pc, #52]	; (10810 <bt_conn_unref+0x50>)
   107da:	f240 4395 	movw	r3, #1173	; 0x495
   107de:	4a0d      	ldr	r2, [pc, #52]	; (10814 <bt_conn_unref+0x54>)
   107e0:	480d      	ldr	r0, [pc, #52]	; (10818 <bt_conn_unref+0x58>)
   107e2:	f00b faa9 	bl	1bd38 <assert_print>
   107e6:	480d      	ldr	r0, [pc, #52]	; (1081c <bt_conn_unref+0x5c>)
   107e8:	f00b faa6 	bl	1bd38 <assert_print>
   107ec:	f240 4195 	movw	r1, #1173	; 0x495
   107f0:	4808      	ldr	r0, [pc, #32]	; (10814 <bt_conn_unref+0x54>)
   107f2:	f00b fa9a 	bl	1bd2a <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   107f6:	f240 1201 	movw	r2, #257	; 0x101
   107fa:	8841      	ldrh	r1, [r0, #2]
   107fc:	4291      	cmp	r1, r2
   107fe:	d106      	bne.n	1080e <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10800:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   10804:	b91b      	cbnz	r3, 1080e <bt_conn_unref+0x4e>
}
   10806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1080a:	f7ff bbeb 	b.w	ffe4 <bt_le_adv_resume>
}
   1080e:	bd10      	pop	{r4, pc}
   10810:	000222f8 	.word	0x000222f8
   10814:	00022155 	.word	0x00022155
   10818:	000205a4 	.word	0x000205a4
   1081c:	00022300 	.word	0x00022300

00010820 <bt_conn_lookup_handle>:
{
   10820:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   10822:	2101      	movs	r1, #1
   10824:	4801      	ldr	r0, [pc, #4]	; (1082c <bt_conn_lookup_handle+0xc>)
   10826:	f00c bcf0 	b.w	1d20a <conn_lookup_handle>
   1082a:	bf00      	nop
   1082c:	200092f8 	.word	0x200092f8

00010830 <bt_conn_set_state>:
{
   10830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   10832:	7a86      	ldrb	r6, [r0, #10]
{
   10834:	4604      	mov	r4, r0
	if (conn->state == state) {
   10836:	428e      	cmp	r6, r1
{
   10838:	460d      	mov	r5, r1
   1083a:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   1083c:	d119      	bne.n	10872 <bt_conn_set_state+0x42>
	switch (state) {
   1083e:	2e08      	cmp	r6, #8
   10840:	bf98      	it	ls
   10842:	4b6a      	ldrls	r3, [pc, #424]	; (109ec <bt_conn_set_state+0x1bc>)
		BT_WARN("no transition %s", state2str(state));
   10844:	466c      	mov	r4, sp
   10846:	b088      	sub	sp, #32
   10848:	bf94      	ite	ls
   1084a:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   1084e:	4b68      	ldrhi	r3, [pc, #416]	; (109f0 <bt_conn_set_state+0x1c0>)
		BT_WARN("no transition %s", state2str(state));
   10850:	466a      	mov	r2, sp
   10852:	4968      	ldr	r1, [pc, #416]	; (109f4 <bt_conn_set_state+0x1c4>)
   10854:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10858:	f44f 7300 	mov.w	r3, #512	; 0x200
   1085c:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   10860:	8393      	strh	r3, [r2, #28]
   10862:	4b65      	ldr	r3, [pc, #404]	; (109f8 <bt_conn_set_state+0x1c8>)
   10864:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("no valid (%u) state was set", state);
   10868:	4864      	ldr	r0, [pc, #400]	; (109fc <bt_conn_set_state+0x1cc>)
   1086a:	f00c fcbf 	bl	1d1ec <z_log_msg_static_create.constprop.0>
   1086e:	46a5      	mov	sp, r4
   10870:	e040      	b.n	108f4 <bt_conn_set_state+0xc4>
	conn->state = state;
   10872:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   10874:	b926      	cbnz	r6, 10880 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   10876:	7883      	ldrb	r3, [r0, #2]
   10878:	2b08      	cmp	r3, #8
   1087a:	d001      	beq.n	10880 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   1087c:	f7ff ff78 	bl	10770 <bt_conn_ref>
	switch (conn->state) {
   10880:	7aa3      	ldrb	r3, [r4, #10]
   10882:	2b08      	cmp	r3, #8
   10884:	f200 80ac 	bhi.w	109e0 <bt_conn_set_state+0x1b0>
   10888:	e8df f003 	tbb	[pc, r3]
   1088c:	34340536 	.word	0x34340536
   10890:	1c343434 	.word	0x1c343434
   10894:	34          	.byte	0x34
   10895:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   10896:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   10898:	4d59      	ldr	r5, [pc, #356]	; (10a00 <bt_conn_set_state+0x1d0>)
	__asm__ volatile(
   1089a:	f04f 0220 	mov.w	r2, #32
   1089e:	f3ef 8311 	mrs	r3, BASEPRI
   108a2:	f382 8812 	msr	BASEPRI_MAX, r2
   108a6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   108aa:	69e2      	ldr	r2, [r4, #28]
   108ac:	2a00      	cmp	r2, #0
   108ae:	d073      	beq.n	10998 <bt_conn_set_state+0x168>
			conn->pending_no_cb--;
   108b0:	3a01      	subs	r2, #1
   108b2:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   108b4:	f383 8811 	msr	BASEPRI, r3
   108b8:	f3bf 8f6f 	isb	sy
   108bc:	4628      	mov	r0, r5
   108be:	f007 ff8f 	bl	187e0 <z_impl_k_sem_give>
}
   108c2:	e7ea      	b.n	1089a <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   108c4:	78a3      	ldrb	r3, [r4, #2]
   108c6:	2b04      	cmp	r3, #4
   108c8:	d014      	beq.n	108f4 <bt_conn_set_state+0xc4>
	z_impl_k_queue_init(queue);
   108ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   108ce:	f00e fbec 	bl	1f0aa <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   108d2:	2100      	movs	r1, #0
   108d4:	484b      	ldr	r0, [pc, #300]	; (10a04 <bt_conn_set_state+0x1d4>)
   108d6:	f00a fed1 	bl	1b67c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   108da:	2300      	movs	r3, #0
	list->tail = NULL;
   108dc:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   108e0:	78e3      	ldrb	r3, [r4, #3]
   108e2:	2b01      	cmp	r3, #1
   108e4:	d106      	bne.n	108f4 <bt_conn_set_state+0xc4>
			k_work_schedule(&conn->deferred_work,
   108e6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   108ea:	2300      	movs	r3, #0
   108ec:	f104 0060 	add.w	r0, r4, #96	; 0x60
   108f0:	f008 fc9c 	bl	1922c <k_work_schedule>
}
   108f4:	46bd      	mov	sp, r7
   108f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   108f8:	78a3      	ldrb	r3, [r4, #2]
   108fa:	2b04      	cmp	r3, #4
   108fc:	d103      	bne.n	10906 <bt_conn_set_state+0xd6>
			bt_conn_unref(conn);
   108fe:	4620      	mov	r0, r4
   10900:	f7ff ff5e 	bl	107c0 <bt_conn_unref>
			break;
   10904:	e7f6      	b.n	108f4 <bt_conn_set_state+0xc4>
		switch (old_state) {
   10906:	2e08      	cmp	r6, #8
   10908:	d8f4      	bhi.n	108f4 <bt_conn_set_state+0xc4>
   1090a:	a301      	add	r3, pc, #4	; (adr r3, 10910 <bt_conn_set_state+0xe0>)
   1090c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   10910:	00010981 	.word	0x00010981
   10914:	00010935 	.word	0x00010935
   10918:	00010973 	.word	0x00010973
   1091c:	000108ff 	.word	0x000108ff
   10920:	000108ff 	.word	0x000108ff
   10924:	00010973 	.word	0x00010973
   10928:	00010973 	.word	0x00010973
   1092c:	000108f5 	.word	0x000108f5
   10930:	00010981 	.word	0x00010981
			tx_notify(conn);
   10934:	4620      	mov	r0, r4
   10936:	f7ff fc47 	bl	101c8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1093a:	78a3      	ldrb	r3, [r4, #2]
   1093c:	2b01      	cmp	r3, #1
   1093e:	d10a      	bne.n	10956 <bt_conn_set_state+0x126>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   10940:	f104 0560 	add.w	r5, r4, #96	; 0x60
   10944:	4628      	mov	r0, r5
   10946:	f00e fc46 	bl	1f1d6 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1094a:	f010 0f0c 	tst.w	r0, #12
   1094e:	d002      	beq.n	10956 <bt_conn_set_state+0x126>
				k_work_cancel_delayable(&conn->deferred_work);
   10950:	4628      	mov	r0, r5
   10952:	f008 fceb 	bl	1932c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10956:	3404      	adds	r4, #4
   10958:	e8d4 3fef 	ldaex	r3, [r4]
   1095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10960:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10964:	2a00      	cmp	r2, #0
   10966:	d1f7      	bne.n	10958 <bt_conn_set_state+0x128>
   10968:	2100      	movs	r1, #0
   1096a:	4826      	ldr	r0, [pc, #152]	; (10a04 <bt_conn_set_state+0x1d4>)
   1096c:	f00a fe86 	bl	1b67c <z_impl_k_poll_signal_raise>
   10970:	e7c0      	b.n	108f4 <bt_conn_set_state+0xc4>
			if (conn->err) {
   10972:	7a63      	ldrb	r3, [r4, #9]
   10974:	2b00      	cmp	r3, #0
   10976:	d0c2      	beq.n	108fe <bt_conn_set_state+0xce>
				notify_connected(conn);
   10978:	4620      	mov	r0, r4
   1097a:	f7ff fbef 	bl	1015c <notify_connected>
   1097e:	e7be      	b.n	108fe <bt_conn_set_state+0xce>
			BT_WARN("Invalid (%u) old state", state);
   10980:	466c      	mov	r4, sp
   10982:	b088      	sub	sp, #32
   10984:	466a      	mov	r2, sp
   10986:	4b20      	ldr	r3, [pc, #128]	; (10a08 <bt_conn_set_state+0x1d8>)
		BT_WARN("no valid (%u) state was set", state);
   10988:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1098c:	2303      	movs	r3, #3
   1098e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10992:	f842 3f10 	str.w	r3, [r2, #16]!
   10996:	e767      	b.n	10868 <bt_conn_set_state+0x38>
	return list->head;
   10998:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1099a:	b921      	cbnz	r1, 109a6 <bt_conn_set_state+0x176>
   1099c:	f383 8811 	msr	BASEPRI, r3
   109a0:	f3bf 8f6f 	isb	sy
		if (!node) {
   109a4:	e7a6      	b.n	108f4 <bt_conn_set_state+0xc4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   109a6:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   109a8:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   109aa:	4281      	cmp	r1, r0
	list->tail = node;
   109ac:	bf08      	it	eq
   109ae:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   109b0:	6162      	str	r2, [r4, #20]
   109b2:	f383 8811 	msr	BASEPRI, r3
   109b6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   109ba:	f04f 0220 	mov.w	r2, #32
   109be:	f3ef 8311 	mrs	r3, BASEPRI
   109c2:	f382 8812 	msr	BASEPRI_MAX, r2
   109c6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   109ca:	68ca      	ldr	r2, [r1, #12]
   109cc:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   109ce:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   109d0:	f383 8811 	msr	BASEPRI, r3
   109d4:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   109d8:	4620      	mov	r0, r4
   109da:	f7ff fc25 	bl	10228 <conn_tx_destroy>
   109de:	e76d      	b.n	108bc <bt_conn_set_state+0x8c>
		BT_WARN("no valid (%u) state was set", state);
   109e0:	466c      	mov	r4, sp
   109e2:	b088      	sub	sp, #32
   109e4:	466a      	mov	r2, sp
   109e6:	4b09      	ldr	r3, [pc, #36]	; (10a0c <bt_conn_set_state+0x1dc>)
   109e8:	e7ce      	b.n	10988 <bt_conn_set_state+0x158>
   109ea:	bf00      	nop
   109ec:	0001fd88 	.word	0x0001fd88
   109f0:	0002231e 	.word	0x0002231e
   109f4:	00022328 	.word	0x00022328
   109f8:	01000003 	.word	0x01000003
   109fc:	0001f8c0 	.word	0x0001f8c0
   10a00:	20008100 	.word	0x20008100
   10a04:	20008208 	.word	0x20008208
   10a08:	00022339 	.word	0x00022339
   10a0c:	00022350 	.word	0x00022350

00010a10 <bt_conn_index>:
		index = conn - acl_conns;
   10a10:	4a0c      	ldr	r2, [pc, #48]	; (10a44 <bt_conn_index+0x34>)
{
   10a12:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   10a14:	490c      	ldr	r1, [pc, #48]	; (10a48 <bt_conn_index+0x38>)
   10a16:	1a83      	subs	r3, r0, r2
   10a18:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   10a1a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   10a1c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   10a20:	d00e      	beq.n	10a40 <bt_conn_index+0x30>
   10a22:	490a      	ldr	r1, [pc, #40]	; (10a4c <bt_conn_index+0x3c>)
   10a24:	f240 43b3 	movw	r3, #1203	; 0x4b3
   10a28:	4a09      	ldr	r2, [pc, #36]	; (10a50 <bt_conn_index+0x40>)
   10a2a:	480a      	ldr	r0, [pc, #40]	; (10a54 <bt_conn_index+0x44>)
   10a2c:	f00b f984 	bl	1bd38 <assert_print>
   10a30:	4809      	ldr	r0, [pc, #36]	; (10a58 <bt_conn_index+0x48>)
   10a32:	f00b f981 	bl	1bd38 <assert_print>
   10a36:	f240 41b3 	movw	r1, #1203	; 0x4b3
   10a3a:	4805      	ldr	r0, [pc, #20]	; (10a50 <bt_conn_index+0x40>)
   10a3c:	f00b f975 	bl	1bd2a <assert_post_action>
}
   10a40:	b2d8      	uxtb	r0, r3
   10a42:	bd08      	pop	{r3, pc}
   10a44:	200092f8 	.word	0x200092f8
   10a48:	c28f5c29 	.word	0xc28f5c29
   10a4c:	0002236c 	.word	0x0002236c
   10a50:	00022155 	.word	0x00022155
   10a54:	000205a4 	.word	0x000205a4
   10a58:	00022435 	.word	0x00022435

00010a5c <bt_conn_create_pdu_timeout>:
{
   10a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a5e:	b087      	sub	sp, #28
   10a60:	4604      	mov	r4, r0
   10a62:	460d      	mov	r5, r1
   10a64:	4617      	mov	r7, r2
   10a66:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   10a68:	f00e faf0 	bl	1f04c <k_is_in_isr>
   10a6c:	b158      	cbz	r0, 10a86 <bt_conn_create_pdu_timeout+0x2a>
   10a6e:	4914      	ldr	r1, [pc, #80]	; (10ac0 <bt_conn_create_pdu_timeout+0x64>)
   10a70:	4814      	ldr	r0, [pc, #80]	; (10ac4 <bt_conn_create_pdu_timeout+0x68>)
   10a72:	f240 43cf 	movw	r3, #1231	; 0x4cf
   10a76:	4a14      	ldr	r2, [pc, #80]	; (10ac8 <bt_conn_create_pdu_timeout+0x6c>)
   10a78:	f00b f95e 	bl	1bd38 <assert_print>
   10a7c:	f240 41cf 	movw	r1, #1231	; 0x4cf
   10a80:	4811      	ldr	r0, [pc, #68]	; (10ac8 <bt_conn_create_pdu_timeout+0x6c>)
   10a82:	f00b f952 	bl	1bd2a <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   10a86:	4911      	ldr	r1, [pc, #68]	; (10acc <bt_conn_create_pdu_timeout+0x70>)
   10a88:	463a      	mov	r2, r7
   10a8a:	2c00      	cmp	r4, #0
   10a8c:	bf14      	ite	ne
   10a8e:	4620      	movne	r0, r4
   10a90:	4608      	moveq	r0, r1
   10a92:	4633      	mov	r3, r6
   10a94:	f00d fb01 	bl	1e09a <net_buf_alloc_fixed>
	if (!buf) {
   10a98:	4604      	mov	r4, r0
   10a9a:	b960      	cbnz	r0, 10ab6 <bt_conn_create_pdu_timeout+0x5a>
		BT_WARN("Unable to allocate buffer within timeout");
   10a9c:	4b0c      	ldr	r3, [pc, #48]	; (10ad0 <bt_conn_create_pdu_timeout+0x74>)
   10a9e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10aa2:	9305      	str	r3, [sp, #20]
   10aa4:	2302      	movs	r3, #2
   10aa6:	480b      	ldr	r0, [pc, #44]	; (10ad4 <bt_conn_create_pdu_timeout+0x78>)
   10aa8:	aa04      	add	r2, sp, #16
   10aaa:	9304      	str	r3, [sp, #16]
   10aac:	f00c fb9e 	bl	1d1ec <z_log_msg_static_create.constprop.0>
}
   10ab0:	4620      	mov	r0, r4
   10ab2:	b007      	add	sp, #28
   10ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   10ab6:	1d69      	adds	r1, r5, #5
   10ab8:	3008      	adds	r0, #8
   10aba:	f002 fe81 	bl	137c0 <net_buf_simple_reserve>
	return buf;
   10abe:	e7f7      	b.n	10ab0 <bt_conn_create_pdu_timeout+0x54>
   10ac0:	0002244f 	.word	0x0002244f
   10ac4:	000205a4 	.word	0x000205a4
   10ac8:	00022155 	.word	0x00022155
   10acc:	20008600 	.word	0x20008600
   10ad0:	0002245e 	.word	0x0002245e
   10ad4:	0001f8c0 	.word	0x0001f8c0

00010ad8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   10ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ada:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   10adc:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10ade:	e8d3 2faf 	lda	r2, [r3]
   10ae2:	05d2      	lsls	r2, r2, #23
   10ae4:	d515      	bpl.n	10b12 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   10ae6:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   10aea:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   10aee:	4291      	cmp	r1, r2
   10af0:	d80f      	bhi.n	10b12 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   10af2:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   10af6:	4291      	cmp	r1, r2
   10af8:	d30b      	bcc.n	10b12 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   10afa:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   10afe:	4291      	cmp	r1, r2
   10b00:	d107      	bne.n	10b12 <notify_le_param_updated+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10b02:	e8d3 1fef 	ldaex	r1, [r3]
   10b06:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   10b0a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10b0e:	2a00      	cmp	r2, #0
   10b10:	d1f7      	bne.n	10b02 <notify_le_param_updated+0x2a>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   10b12:	4b18      	ldr	r3, [pc, #96]	; (10b74 <notify_le_param_updated+0x9c>)
   10b14:	681d      	ldr	r5, [r3, #0]
   10b16:	b995      	cbnz	r5, 10b3e <notify_le_param_updated+0x66>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10b18:	4d17      	ldr	r5, [pc, #92]	; (10b78 <notify_le_param_updated+0xa0>)
   10b1a:	4f18      	ldr	r7, [pc, #96]	; (10b7c <notify_le_param_updated+0xa4>)
   10b1c:	42bd      	cmp	r5, r7
   10b1e:	d926      	bls.n	10b6e <notify_le_param_updated+0x96>
   10b20:	4917      	ldr	r1, [pc, #92]	; (10b80 <notify_le_param_updated+0xa8>)
   10b22:	f240 53a2 	movw	r3, #1442	; 0x5a2
   10b26:	4a17      	ldr	r2, [pc, #92]	; (10b84 <notify_le_param_updated+0xac>)
   10b28:	4817      	ldr	r0, [pc, #92]	; (10b88 <notify_le_param_updated+0xb0>)
   10b2a:	f00b f905 	bl	1bd38 <assert_print>
   10b2e:	4817      	ldr	r0, [pc, #92]	; (10b8c <notify_le_param_updated+0xb4>)
   10b30:	f00b f902 	bl	1bd38 <assert_print>
   10b34:	f240 51a2 	movw	r1, #1442	; 0x5a2
   10b38:	4812      	ldr	r0, [pc, #72]	; (10b84 <notify_le_param_updated+0xac>)
   10b3a:	f00b f8f6 	bl	1bd2a <assert_post_action>
		if (cb->le_param_updated) {
   10b3e:	68ee      	ldr	r6, [r5, #12]
   10b40:	b13e      	cbz	r6, 10b52 <notify_le_param_updated+0x7a>
			cb->le_param_updated(conn, conn->le.interval,
   10b42:	4620      	mov	r0, r4
   10b44:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   10b48:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   10b4c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   10b50:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10b52:	692d      	ldr	r5, [r5, #16]
   10b54:	e7df      	b.n	10b16 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   10b56:	68ee      	ldr	r6, [r5, #12]
   10b58:	b13e      	cbz	r6, 10b6a <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   10b5a:	4620      	mov	r0, r4
   10b5c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   10b60:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   10b64:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   10b68:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10b6a:	3514      	adds	r5, #20
   10b6c:	e7d6      	b.n	10b1c <notify_le_param_updated+0x44>
   10b6e:	d3f2      	bcc.n	10b56 <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   10b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b72:	bf00      	nop
   10b74:	200097c0 	.word	0x200097c0
   10b78:	0001f888 	.word	0x0001f888
   10b7c:	0001f888 	.word	0x0001f888
   10b80:	00022185 	.word	0x00022185
   10b84:	00022155 	.word	0x00022155
   10b88:	000205a4 	.word	0x000205a4
   10b8c:	00020cc7 	.word	0x00020cc7

00010b90 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   10b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b94:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   10b96:	4608      	mov	r0, r1
{
   10b98:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   10b9a:	f00c f9da 	bl	1cf52 <bt_le_conn_params_valid>
   10b9e:	4605      	mov	r5, r0
   10ba0:	b918      	cbnz	r0, 10baa <le_param_req+0x1a>
		return false;
   10ba2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   10ba4:	4628      	mov	r0, r5
   10ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10baa:	4b1b      	ldr	r3, [pc, #108]	; (10c18 <le_param_req+0x88>)
   10bac:	681e      	ldr	r6, [r3, #0]
   10bae:	b99e      	cbnz	r6, 10bd8 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10bb0:	4e1a      	ldr	r6, [pc, #104]	; (10c1c <le_param_req+0x8c>)
   10bb2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 10c20 <le_param_req+0x90>
   10bb6:	4546      	cmp	r6, r8
   10bb8:	d927      	bls.n	10c0a <le_param_req+0x7a>
   10bba:	491a      	ldr	r1, [pc, #104]	; (10c24 <le_param_req+0x94>)
   10bbc:	f240 53ea 	movw	r3, #1514	; 0x5ea
   10bc0:	4a19      	ldr	r2, [pc, #100]	; (10c28 <le_param_req+0x98>)
   10bc2:	481a      	ldr	r0, [pc, #104]	; (10c2c <le_param_req+0x9c>)
   10bc4:	f00b f8b8 	bl	1bd38 <assert_print>
   10bc8:	4819      	ldr	r0, [pc, #100]	; (10c30 <le_param_req+0xa0>)
   10bca:	f00b f8b5 	bl	1bd38 <assert_print>
   10bce:	f240 51ea 	movw	r1, #1514	; 0x5ea
   10bd2:	4815      	ldr	r0, [pc, #84]	; (10c28 <le_param_req+0x98>)
   10bd4:	f00b f8a9 	bl	1bd2a <assert_post_action>
		if (!cb->le_param_req) {
   10bd8:	68b3      	ldr	r3, [r6, #8]
   10bda:	b90b      	cbnz	r3, 10be0 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   10bdc:	6936      	ldr	r6, [r6, #16]
   10bde:	e7e6      	b.n	10bae <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   10be0:	4621      	mov	r1, r4
   10be2:	4638      	mov	r0, r7
   10be4:	4798      	blx	r3
   10be6:	2800      	cmp	r0, #0
   10be8:	d0db      	beq.n	10ba2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   10bea:	4620      	mov	r0, r4
   10bec:	f00c f9b1 	bl	1cf52 <bt_le_conn_params_valid>
   10bf0:	2800      	cmp	r0, #0
   10bf2:	d1f3      	bne.n	10bdc <le_param_req+0x4c>
   10bf4:	e7d5      	b.n	10ba2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   10bf6:	4621      	mov	r1, r4
   10bf8:	4638      	mov	r0, r7
   10bfa:	4798      	blx	r3
   10bfc:	2800      	cmp	r0, #0
   10bfe:	d0d0      	beq.n	10ba2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   10c00:	4620      	mov	r0, r4
   10c02:	f00c f9a6 	bl	1cf52 <bt_le_conn_params_valid>
   10c06:	b920      	cbnz	r0, 10c12 <le_param_req+0x82>
   10c08:	e7cb      	b.n	10ba2 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10c0a:	d2cb      	bcs.n	10ba4 <le_param_req+0x14>
		if (!cb->le_param_req) {
   10c0c:	68b3      	ldr	r3, [r6, #8]
   10c0e:	2b00      	cmp	r3, #0
   10c10:	d1f1      	bne.n	10bf6 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10c12:	3614      	adds	r6, #20
   10c14:	e7cf      	b.n	10bb6 <le_param_req+0x26>
   10c16:	bf00      	nop
   10c18:	200097c0 	.word	0x200097c0
   10c1c:	0001f888 	.word	0x0001f888
   10c20:	0001f888 	.word	0x0001f888
   10c24:	00022185 	.word	0x00022185
   10c28:	00022155 	.word	0x00022155
   10c2c:	000205a4 	.word	0x000205a4
   10c30:	00020cc7 	.word	0x00020cc7

00010c34 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   10c34:	4b02      	ldr	r3, [pc, #8]	; (10c40 <bt_conn_cb_register+0xc>)
   10c36:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   10c38:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   10c3a:	6102      	str	r2, [r0, #16]
}
   10c3c:	4770      	bx	lr
   10c3e:	bf00      	nop
   10c40:	200097c0 	.word	0x200097c0

00010c44 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   10c44:	b570      	push	{r4, r5, r6, lr}
   10c46:	4606      	mov	r6, r0
   10c48:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   10c4a:	4809      	ldr	r0, [pc, #36]	; (10c70 <bt_conn_add_le+0x2c>)
   10c4c:	2101      	movs	r1, #1
   10c4e:	f7ff fbd9 	bl	10404 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   10c52:	4604      	mov	r4, r0
   10c54:	b150      	cbz	r0, 10c6c <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   10c56:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   10c58:	2207      	movs	r2, #7
   10c5a:	4629      	mov	r1, r5
   10c5c:	3090      	adds	r0, #144	; 0x90
   10c5e:	f00c f87a 	bl	1cd56 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   10c62:	2301      	movs	r3, #1
   10c64:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   10c66:	4b03      	ldr	r3, [pc, #12]	; (10c74 <bt_conn_add_le+0x30>)
   10c68:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   10c6c:	4620      	mov	r0, r4
   10c6e:	bd70      	pop	{r4, r5, r6, pc}
   10c70:	200092f8 	.word	0x200092f8
   10c74:	00280018 	.word	0x00280018

00010c78 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   10c78:	b570      	push	{r4, r5, r6, lr}
   10c7a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10c7c:	480a      	ldr	r0, [pc, #40]	; (10ca8 <bt_conn_lookup_addr_le+0x30>)
{
   10c7e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10c80:	f7ff fd76 	bl	10770 <bt_conn_ref>
   10c84:	4604      	mov	r4, r0

		if (!conn) {
   10c86:	b120      	cbz	r0, 10c92 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   10c88:	7883      	ldrb	r3, [r0, #2]
   10c8a:	2b01      	cmp	r3, #1
   10c8c:	d004      	beq.n	10c98 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   10c8e:	f7ff fd97 	bl	107c0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   10c92:	2400      	movs	r4, #0
}
   10c94:	4620      	mov	r0, r4
   10c96:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   10c98:	4632      	mov	r2, r6
   10c9a:	4629      	mov	r1, r5
   10c9c:	f00c fae2 	bl	1d264 <bt_conn_is_peer_addr_le>
   10ca0:	2800      	cmp	r0, #0
   10ca2:	d1f7      	bne.n	10c94 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   10ca4:	4620      	mov	r0, r4
   10ca6:	e7f2      	b.n	10c8e <bt_conn_lookup_addr_le+0x16>
   10ca8:	200092f8 	.word	0x200092f8

00010cac <bt_conn_exists_le>:
{
   10cac:	b5b0      	push	{r4, r5, r7, lr}
   10cae:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   10cb0:	f7ff ffe2 	bl	10c78 <bt_conn_lookup_addr_le>
	if (conn) {
   10cb4:	4604      	mov	r4, r0
   10cb6:	b1e8      	cbz	r0, 10cf4 <bt_conn_exists_le+0x48>
		BT_WARN("Found valid connection in %s state",
   10cb8:	7a83      	ldrb	r3, [r0, #10]
   10cba:	466d      	mov	r5, sp
   10cbc:	2b08      	cmp	r3, #8
   10cbe:	bf98      	it	ls
   10cc0:	4a0d      	ldrls	r2, [pc, #52]	; (10cf8 <bt_conn_exists_le+0x4c>)
   10cc2:	b088      	sub	sp, #32
   10cc4:	bf94      	ite	ls
   10cc6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   10cca:	4b0c      	ldrhi	r3, [pc, #48]	; (10cfc <bt_conn_exists_le+0x50>)
   10ccc:	466a      	mov	r2, sp
   10cce:	490c      	ldr	r1, [pc, #48]	; (10d00 <bt_conn_exists_le+0x54>)
   10cd0:	480c      	ldr	r0, [pc, #48]	; (10d04 <bt_conn_exists_le+0x58>)
   10cd2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
   10cda:	8393      	strh	r3, [r2, #28]
   10cdc:	4b0a      	ldr	r3, [pc, #40]	; (10d08 <bt_conn_exists_le+0x5c>)
   10cde:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   10ce2:	f842 3f10 	str.w	r3, [r2, #16]!
   10ce6:	f00c fa81 	bl	1d1ec <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   10cea:	4620      	mov	r0, r4
   10cec:	46ad      	mov	sp, r5
   10cee:	f7ff fd67 	bl	107c0 <bt_conn_unref>
		return true;
   10cf2:	2001      	movs	r0, #1
}
   10cf4:	46bd      	mov	sp, r7
   10cf6:	bdb0      	pop	{r4, r5, r7, pc}
   10cf8:	0001fd88 	.word	0x0001fd88
   10cfc:	0002231e 	.word	0x0002231e
   10d00:	00022487 	.word	0x00022487
   10d04:	0001f8c0 	.word	0x0001f8c0
   10d08:	01000003 	.word	0x01000003

00010d0c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   10d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d0e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10d10:	480e      	ldr	r0, [pc, #56]	; (10d4c <bt_conn_lookup_state_le+0x40>)
{
   10d12:	460e      	mov	r6, r1
   10d14:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10d16:	f7ff fd2b 	bl	10770 <bt_conn_ref>

		if (!conn) {
   10d1a:	4604      	mov	r4, r0
   10d1c:	b120      	cbz	r0, 10d28 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   10d1e:	7883      	ldrb	r3, [r0, #2]
   10d20:	2b01      	cmp	r3, #1
   10d22:	d003      	beq.n	10d2c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   10d24:	f7ff fd4c 	bl	107c0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   10d28:	2400      	movs	r4, #0
   10d2a:	e00d      	b.n	10d48 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   10d2c:	b136      	cbz	r6, 10d3c <bt_conn_lookup_state_le+0x30>
   10d2e:	4632      	mov	r2, r6
   10d30:	4629      	mov	r1, r5
   10d32:	f00c fa97 	bl	1d264 <bt_conn_is_peer_addr_le>
   10d36:	b908      	cbnz	r0, 10d3c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   10d38:	4620      	mov	r0, r4
   10d3a:	e7f3      	b.n	10d24 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   10d3c:	7aa3      	ldrb	r3, [r4, #10]
   10d3e:	42bb      	cmp	r3, r7
   10d40:	d1fa      	bne.n	10d38 <bt_conn_lookup_state_le+0x2c>
   10d42:	7a23      	ldrb	r3, [r4, #8]
   10d44:	42ab      	cmp	r3, r5
   10d46:	d1f7      	bne.n	10d38 <bt_conn_lookup_state_le+0x2c>
}
   10d48:	4620      	mov	r0, r4
   10d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d4c:	200092f8 	.word	0x200092f8

00010d50 <send_conn_le_param_update>:
{
   10d50:	b538      	push	{r3, r4, r5, lr}
   10d52:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   10d54:	4608      	mov	r0, r1
{
   10d56:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10d58:	f00c f8fb 	bl	1cf52 <bt_le_conn_params_valid>
   10d5c:	b338      	cbz	r0, 10dae <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10d5e:	4b15      	ldr	r3, [pc, #84]	; (10db4 <send_conn_le_param_update+0x64>)
   10d60:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   10d64:	0799      	lsls	r1, r3, #30
   10d66:	d407      	bmi.n	10d78 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   10d68:	78e3      	ldrb	r3, [r4, #3]
   10d6a:	b173      	cbz	r3, 10d8a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   10d6c:	4629      	mov	r1, r5
   10d6e:	4620      	mov	r0, r4
}
   10d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   10d74:	f000 bab0 	b.w	112d8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10d78:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   10d7c:	079a      	lsls	r2, r3, #30
   10d7e:	d5f3      	bpl.n	10d68 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10d80:	1d23      	adds	r3, r4, #4
   10d82:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   10d86:	059b      	lsls	r3, r3, #22
   10d88:	d4ee      	bmi.n	10d68 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   10d8a:	4629      	mov	r1, r5
   10d8c:	4620      	mov	r0, r4
   10d8e:	f00c fa89 	bl	1d2a4 <bt_conn_le_conn_update>
		if (rc == 0) {
   10d92:	b958      	cbnz	r0, 10dac <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   10d94:	882b      	ldrh	r3, [r5, #0]
   10d96:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   10d9a:	886b      	ldrh	r3, [r5, #2]
   10d9c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   10da0:	88ab      	ldrh	r3, [r5, #4]
   10da2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   10da6:	88eb      	ldrh	r3, [r5, #6]
   10da8:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   10dac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10dae:	f06f 0015 	mvn.w	r0, #21
   10db2:	e7fb      	b.n	10dac <send_conn_le_param_update+0x5c>
   10db4:	20008000 	.word	0x20008000

00010db8 <deferred_work>:
{
   10db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   10dba:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   10dbe:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   10dc0:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   10dc4:	bb7b      	cbnz	r3, 10e26 <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   10dc6:	4628      	mov	r0, r5
   10dc8:	f00c fac9 	bl	1d35e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   10dcc:	4b2a      	ldr	r3, [pc, #168]	; (10e78 <deferred_work+0xc0>)
   10dce:	681e      	ldr	r6, [r3, #0]
   10dd0:	b996      	cbnz	r6, 10df8 <deferred_work+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10dd2:	4e2a      	ldr	r6, [pc, #168]	; (10e7c <deferred_work+0xc4>)
   10dd4:	4f2a      	ldr	r7, [pc, #168]	; (10e80 <deferred_work+0xc8>)
   10dd6:	42be      	cmp	r6, r7
   10dd8:	d91e      	bls.n	10e18 <deferred_work+0x60>
   10dda:	492a      	ldr	r1, [pc, #168]	; (10e84 <deferred_work+0xcc>)
   10ddc:	f240 5369 	movw	r3, #1385	; 0x569
   10de0:	4a29      	ldr	r2, [pc, #164]	; (10e88 <deferred_work+0xd0>)
   10de2:	482a      	ldr	r0, [pc, #168]	; (10e8c <deferred_work+0xd4>)
   10de4:	f00a ffa8 	bl	1bd38 <assert_print>
   10de8:	4829      	ldr	r0, [pc, #164]	; (10e90 <deferred_work+0xd8>)
   10dea:	f00a ffa5 	bl	1bd38 <assert_print>
   10dee:	f240 5169 	movw	r1, #1385	; 0x569
   10df2:	4825      	ldr	r0, [pc, #148]	; (10e88 <deferred_work+0xd0>)
   10df4:	f00a ff99 	bl	1bd2a <assert_post_action>
		if (cb->disconnected) {
   10df8:	6873      	ldr	r3, [r6, #4]
   10dfa:	b11b      	cbz	r3, 10e04 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
   10dfc:	4628      	mov	r0, r5
   10dfe:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   10e02:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10e04:	6936      	ldr	r6, [r6, #16]
   10e06:	e7e3      	b.n	10dd0 <deferred_work+0x18>
		if (cb->disconnected) {
   10e08:	6873      	ldr	r3, [r6, #4]
   10e0a:	b11b      	cbz	r3, 10e14 <deferred_work+0x5c>
			cb->disconnected(conn, conn->err);
   10e0c:	4628      	mov	r0, r5
   10e0e:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   10e12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10e14:	3614      	adds	r6, #20
   10e16:	e7de      	b.n	10dd6 <deferred_work+0x1e>
   10e18:	d3f6      	bcc.n	10e08 <deferred_work+0x50>
		bt_conn_unref(conn);
   10e1a:	4628      	mov	r0, r5
}
   10e1c:	b003      	add	sp, #12
   10e1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   10e22:	f7ff bccd 	b.w	107c0 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   10e26:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   10e2a:	2b01      	cmp	r3, #1
   10e2c:	d11b      	bne.n	10e66 <deferred_work+0xae>
	if (atomic_test_and_clear_bit(conn->flags,
   10e2e:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e32:	e8d6 3fef 	ldaex	r3, [r6]
   10e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   10e3a:	e8c6 2fe1 	stlex	r1, r2, [r6]
   10e3e:	2900      	cmp	r1, #0
   10e40:	d1f7      	bne.n	10e32 <deferred_work+0x7a>
   10e42:	05db      	lsls	r3, r3, #23
   10e44:	d511      	bpl.n	10e6a <deferred_work+0xb2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   10e46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   10e48:	9300      	str	r3, [sp, #0]
   10e4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   10e4c:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   10e4e:	4669      	mov	r1, sp
   10e50:	4628      	mov	r0, r5
   10e52:	f7ff ff7d 	bl	10d50 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10e56:	e8d6 3fef 	ldaex	r3, [r6]
   10e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e5e:	e8c6 3fe2 	stlex	r2, r3, [r6]
   10e62:	2a00      	cmp	r2, #0
   10e64:	d1f7      	bne.n	10e56 <deferred_work+0x9e>
}
   10e66:	b003      	add	sp, #12
   10e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   10e6a:	466b      	mov	r3, sp
   10e6c:	4a09      	ldr	r2, [pc, #36]	; (10e94 <deferred_work+0xdc>)
   10e6e:	6810      	ldr	r0, [r2, #0]
   10e70:	6851      	ldr	r1, [r2, #4]
   10e72:	c303      	stmia	r3!, {r0, r1}
   10e74:	e7eb      	b.n	10e4e <deferred_work+0x96>
   10e76:	bf00      	nop
   10e78:	200097c0 	.word	0x200097c0
   10e7c:	0001f888 	.word	0x0001f888
   10e80:	0001f888 	.word	0x0001f888
   10e84:	00022185 	.word	0x00022185
   10e88:	00022155 	.word	0x00022155
   10e8c:	000205a4 	.word	0x000205a4
   10e90:	00020cc7 	.word	0x00020cc7
   10e94:	0001fa00 	.word	0x0001fa00

00010e98 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   10e98:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   10e9a:	4801      	ldr	r0, [pc, #4]	; (10ea0 <bt_conn_create_frag_timeout+0x8>)
   10e9c:	f7ff bdde 	b.w	10a5c <bt_conn_create_pdu_timeout>
   10ea0:	2000869c 	.word	0x2000869c

00010ea4 <create_frag>:
{
   10ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ea8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   10eaa:	f04f 33ff 	mov.w	r3, #4294967295
   10eae:	f04f 32ff 	mov.w	r2, #4294967295
   10eb2:	2000      	movs	r0, #0
{
   10eb4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   10eb6:	f7ff ffef 	bl	10e98 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   10eba:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   10ebc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10ebe:	2b07      	cmp	r3, #7
   10ec0:	f04f 0600 	mov.w	r6, #0
   10ec4:	d005      	beq.n	10ed2 <create_frag+0x2e>
		net_buf_unref(frag);
   10ec6:	f002 fdbf 	bl	13a48 <net_buf_unref>
		return NULL;
   10eca:	4635      	mov	r5, r6
}
   10ecc:	4628      	mov	r0, r5
   10ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   10ed2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   10ed4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   10ed8:	4e0c      	ldr	r6, [pc, #48]	; (10f0c <create_frag+0x68>)
   10eda:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10edc:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   10ee0:	f00d f8f3 	bl	1e0ca <net_buf_simple_tailroom>
   10ee4:	4580      	cmp	r8, r0
   10ee6:	d20c      	bcs.n	10f02 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   10ee8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10eec:	f854 1f08 	ldr.w	r1, [r4, #8]!
   10ef0:	4632      	mov	r2, r6
   10ef2:	4638      	mov	r0, r7
   10ef4:	f00d f8f1 	bl	1e0da <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   10ef8:	4631      	mov	r1, r6
   10efa:	4620      	mov	r0, r4
   10efc:	f002 fe8a 	bl	13c14 <net_buf_simple_pull>
   10f00:	e7e4      	b.n	10ecc <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   10f02:	4638      	mov	r0, r7
   10f04:	f00d f8e1 	bl	1e0ca <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10f08:	b286      	uxth	r6, r0
   10f0a:	e7ef      	b.n	10eec <create_frag+0x48>
   10f0c:	20008000 	.word	0x20008000

00010f10 <bt_conn_process_tx>:
{
   10f10:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10f12:	7a83      	ldrb	r3, [r0, #10]
{
   10f14:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   10f16:	b973      	cbnz	r3, 10f36 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10f18:	1d03      	adds	r3, r0, #4
   10f1a:	e8d3 2fef 	ldaex	r2, [r3]
   10f1e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   10f22:	e8c3 1fe5 	stlex	r5, r1, [r3]
   10f26:	2d00      	cmp	r5, #0
   10f28:	d1f7      	bne.n	10f1a <bt_conn_process_tx+0xa>
   10f2a:	0653      	lsls	r3, r2, #25
   10f2c:	d503      	bpl.n	10f36 <bt_conn_process_tx+0x26>
}
   10f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   10f32:	f7ff ba95 	b.w	10460 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   10f36:	2200      	movs	r2, #0
   10f38:	2300      	movs	r3, #0
   10f3a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   10f3e:	f002 fc11 	bl	13764 <net_buf_get>
	BT_ASSERT(buf);
   10f42:	4605      	mov	r5, r0
   10f44:	b960      	cbnz	r0, 10f60 <bt_conn_process_tx+0x50>
   10f46:	f44f 7347 	mov.w	r3, #796	; 0x31c
   10f4a:	4a23      	ldr	r2, [pc, #140]	; (10fd8 <bt_conn_process_tx+0xc8>)
   10f4c:	4923      	ldr	r1, [pc, #140]	; (10fdc <bt_conn_process_tx+0xcc>)
   10f4e:	4824      	ldr	r0, [pc, #144]	; (10fe0 <bt_conn_process_tx+0xd0>)
   10f50:	f00a fef2 	bl	1bd38 <assert_print>
   10f54:	4040      	eors	r0, r0
   10f56:	f380 8811 	msr	BASEPRI, r0
   10f5a:	f04f 0003 	mov.w	r0, #3
   10f5e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   10f60:	4e20      	ldr	r6, [pc, #128]	; (10fe4 <bt_conn_process_tx+0xd4>)
	if (buf->len <= conn_mtu(conn)) {
   10f62:	89aa      	ldrh	r2, [r5, #12]
   10f64:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   10f68:	429a      	cmp	r2, r3
   10f6a:	d807      	bhi.n	10f7c <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   10f6c:	2300      	movs	r3, #0
   10f6e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   10f70:	4629      	mov	r1, r5
   10f72:	4620      	mov	r0, r4
   10f74:	f7ff f97e 	bl	10274 <send_frag>
	if (!send_buf(conn, buf)) {
   10f78:	b968      	cbnz	r0, 10f96 <bt_conn_process_tx+0x86>
   10f7a:	e005      	b.n	10f88 <bt_conn_process_tx+0x78>
	frag = create_frag(conn, buf);
   10f7c:	4629      	mov	r1, r5
   10f7e:	4620      	mov	r0, r4
   10f80:	f7ff ff90 	bl	10ea4 <create_frag>
	if (!frag) {
   10f84:	4601      	mov	r1, r0
   10f86:	b938      	cbnz	r0, 10f98 <bt_conn_process_tx+0x88>
		tx_data(buf)->tx = NULL;
   10f88:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   10f8a:	696e      	ldr	r6, [r5, #20]
		net_buf_unref(buf);
   10f8c:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   10f8e:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   10f90:	f002 fd5a 	bl	13a48 <net_buf_unref>
		if (tx) {
   10f94:	b9ce      	cbnz	r6, 10fca <bt_conn_process_tx+0xba>
}
   10f96:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   10f98:	2301      	movs	r3, #1
   10f9a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   10f9c:	4620      	mov	r0, r4
   10f9e:	f7ff f969 	bl	10274 <send_frag>
   10fa2:	2800      	cmp	r0, #0
   10fa4:	d0f0      	beq.n	10f88 <bt_conn_process_tx+0x78>
	while (buf->len > conn_mtu(conn)) {
   10fa6:	89aa      	ldrh	r2, [r5, #12]
   10fa8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   10fac:	429a      	cmp	r2, r3
   10fae:	d802      	bhi.n	10fb6 <bt_conn_process_tx+0xa6>
	return send_frag(conn, buf, FRAG_END, false);
   10fb0:	2300      	movs	r3, #0
   10fb2:	2203      	movs	r2, #3
   10fb4:	e7dc      	b.n	10f70 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
   10fb6:	4629      	mov	r1, r5
   10fb8:	4620      	mov	r0, r4
   10fba:	f7ff ff73 	bl	10ea4 <create_frag>
		if (!frag) {
   10fbe:	4601      	mov	r1, r0
   10fc0:	2800      	cmp	r0, #0
   10fc2:	d0e1      	beq.n	10f88 <bt_conn_process_tx+0x78>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   10fc4:	2301      	movs	r3, #1
   10fc6:	461a      	mov	r2, r3
   10fc8:	e7e8      	b.n	10f9c <bt_conn_process_tx+0x8c>
			conn_tx_destroy(conn, tx);
   10fca:	4631      	mov	r1, r6
   10fcc:	4620      	mov	r0, r4
}
   10fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   10fd2:	f7ff b929 	b.w	10228 <conn_tx_destroy>
   10fd6:	bf00      	nop
   10fd8:	00022155 	.word	0x00022155
   10fdc:	000219e0 	.word	0x000219e0
   10fe0:	000205a4 	.word	0x000205a4
   10fe4:	20008000 	.word	0x20008000

00010fe8 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   10fe8:	b910      	cbnz	r0, 10ff0 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   10fea:	4802      	ldr	r0, [pc, #8]	; (10ff4 <bt_conn_lookup_index+0xc>)
   10fec:	f7ff bbc0 	b.w	10770 <bt_conn_ref>
}
   10ff0:	2000      	movs	r0, #0
   10ff2:	4770      	bx	lr
   10ff4:	200092f8 	.word	0x200092f8

00010ff8 <bt_conn_init>:

int bt_conn_init(void)
{
   10ff8:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   10ffa:	480c      	ldr	r0, [pc, #48]	; (1102c <bt_conn_init+0x34>)
   10ffc:	f00e f855 	bl	1f0aa <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11000:	490b      	ldr	r1, [pc, #44]	; (11030 <bt_conn_init+0x38>)
   11002:	480a      	ldr	r0, [pc, #40]	; (1102c <bt_conn_init+0x34>)
   11004:	f00e f85e 	bl	1f0c4 <k_queue_append>
   11008:	490a      	ldr	r1, [pc, #40]	; (11034 <bt_conn_init+0x3c>)
   1100a:	4808      	ldr	r0, [pc, #32]	; (1102c <bt_conn_init+0x34>)
   1100c:	f00e f85a 	bl	1f0c4 <k_queue_append>
   11010:	4909      	ldr	r1, [pc, #36]	; (11038 <bt_conn_init+0x40>)
   11012:	4806      	ldr	r0, [pc, #24]	; (1102c <bt_conn_init+0x34>)
   11014:	f00e f856 	bl	1f0c4 <k_queue_append>
	}

	bt_att_init();
   11018:	f001 f930 	bl	1227c <bt_att_init>

	err = bt_smp_init();
   1101c:	f00d f83a 	bl	1e094 <bt_smp_init>
	if (err) {
   11020:	4604      	mov	r4, r0
   11022:	b908      	cbnz	r0, 11028 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   11024:	f00c f9d8 	bl	1d3d8 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   11028:	4620      	mov	r0, r4
   1102a:	bd10      	pop	{r4, pc}
   1102c:	200085b0 	.word	0x200085b0
   11030:	20009790 	.word	0x20009790
   11034:	200097a0 	.word	0x200097a0
   11038:	200097b0 	.word	0x200097b0

0001103c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1103c:	b580      	push	{r7, lr}
   1103e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11040:	b088      	sub	sp, #32
   11042:	466a      	mov	r2, sp
   11044:	4b06      	ldr	r3, [pc, #24]	; (11060 <l2cap_create_le_sig_pdu.part.0+0x24>)
   11046:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1104a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1104e:	2303      	movs	r3, #3
   11050:	4804      	ldr	r0, [pc, #16]	; (11064 <l2cap_create_le_sig_pdu.part.0+0x28>)
   11052:	f842 3f10 	str.w	r3, [r2, #16]!
   11056:	f00c f94e 	bl	1d2f6 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1105a:	2000      	movs	r0, #0
   1105c:	46bd      	mov	sp, r7
   1105e:	bd80      	pop	{r7, pc}
   11060:	00022523 	.word	0x00022523
   11064:	0001f8f0 	.word	0x0001f8f0

00011068 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   11068:	b580      	push	{r7, lr}
   1106a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1106c:	b088      	sub	sp, #32
   1106e:	466a      	mov	r2, sp
   11070:	4b07      	ldr	r3, [pc, #28]	; (11090 <l2cap_accept.part.0+0x28>)
   11072:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11076:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1107a:	2303      	movs	r3, #3
   1107c:	4805      	ldr	r0, [pc, #20]	; (11094 <l2cap_accept.part.0+0x2c>)
   1107e:	f842 3f10 	str.w	r3, [r2, #16]!
   11082:	f00c f938 	bl	1d2f6 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   11086:	f06f 000b 	mvn.w	r0, #11
   1108a:	46bd      	mov	sp, r7
   1108c:	bd80      	pop	{r7, pc}
   1108e:	bf00      	nop
   11090:	0002254b 	.word	0x0002254b
   11094:	0001f8f0 	.word	0x0001f8f0

00011098 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   11098:	4b04      	ldr	r3, [pc, #16]	; (110ac <l2cap_accept+0x14>)
   1109a:	681a      	ldr	r2, [r3, #0]
   1109c:	b10a      	cbz	r2, 110a2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1109e:	f7ff bfe3 	b.w	11068 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   110a2:	4803      	ldr	r0, [pc, #12]	; (110b0 <l2cap_accept+0x18>)
   110a4:	6058      	str	r0, [r3, #4]
}
   110a6:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   110a8:	600b      	str	r3, [r1, #0]
}
   110aa:	4770      	bx	lr
   110ac:	200097c4 	.word	0x200097c4
   110b0:	0001fdcc 	.word	0x0001fdcc

000110b4 <bt_l2cap_connected>:
{
   110b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   110b6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   110b8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   110ba:	4d27      	ldr	r5, [pc, #156]	; (11158 <bt_l2cap_connected+0xa4>)
   110bc:	4f27      	ldr	r7, [pc, #156]	; (1115c <bt_l2cap_connected+0xa8>)
   110be:	42bd      	cmp	r5, r7
   110c0:	d946      	bls.n	11150 <bt_l2cap_connected+0x9c>
   110c2:	4927      	ldr	r1, [pc, #156]	; (11160 <bt_l2cap_connected+0xac>)
   110c4:	f240 1381 	movw	r3, #385	; 0x181
   110c8:	4a26      	ldr	r2, [pc, #152]	; (11164 <bt_l2cap_connected+0xb0>)
   110ca:	4827      	ldr	r0, [pc, #156]	; (11168 <bt_l2cap_connected+0xb4>)
   110cc:	f00a fe34 	bl	1bd38 <assert_print>
   110d0:	4826      	ldr	r0, [pc, #152]	; (1116c <bt_l2cap_connected+0xb8>)
   110d2:	f00a fe31 	bl	1bd38 <assert_print>
   110d6:	f240 1181 	movw	r1, #385	; 0x181
   110da:	4822      	ldr	r0, [pc, #136]	; (11164 <bt_l2cap_connected+0xb0>)
   110dc:	f00a fe25 	bl	1bd2a <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   110e0:	4620      	mov	r0, r4
   110e2:	686b      	ldr	r3, [r5, #4]
   110e4:	a901      	add	r1, sp, #4
   110e6:	4798      	blx	r3
   110e8:	2800      	cmp	r0, #0
   110ea:	db2c      	blt.n	11146 <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   110ec:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   110ee:	882a      	ldrh	r2, [r5, #0]
   110f0:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   110f2:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   110f4:	68a8      	ldr	r0, [r5, #8]
   110f6:	f103 0210 	add.w	r2, r3, #16
   110fa:	e8d2 1fef 	ldaex	r1, [r2]
   110fe:	e8c2 6fec 	stlex	ip, r6, [r2]
   11102:	f1bc 0f00 	cmp.w	ip, #0
   11106:	d1f8      	bne.n	110fa <bt_l2cap_connected+0x46>
	parent->next = child;
   11108:	609e      	str	r6, [r3, #8]
	return list->tail;
   1110a:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1110c:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   11110:	b9d9      	cbnz	r1, 1114a <bt_l2cap_connected+0x96>
	list->head = node;
   11112:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   11116:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   11118:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1111a:	9801      	ldr	r0, [sp, #4]
   1111c:	6843      	ldr	r3, [r0, #4]
   1111e:	681b      	ldr	r3, [r3, #0]
   11120:	b103      	cbz	r3, 11124 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   11122:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11124:	9b01      	ldr	r3, [sp, #4]
   11126:	3310      	adds	r3, #16
   11128:	e8d3 1fef 	ldaex	r1, [r3]
   1112c:	f041 0101 	orr.w	r1, r1, #1
   11130:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11134:	2a00      	cmp	r2, #0
   11136:	d1f7      	bne.n	11128 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   11138:	9801      	ldr	r0, [sp, #4]
   1113a:	6843      	ldr	r3, [r0, #4]
   1113c:	69db      	ldr	r3, [r3, #28]
   1113e:	b113      	cbz	r3, 11146 <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   11140:	f100 0110 	add.w	r1, r0, #16
   11144:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11146:	350c      	adds	r5, #12
   11148:	e7b9      	b.n	110be <bt_l2cap_connected+0xa>
	parent->next = child;
   1114a:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1114c:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1114e:	e7e2      	b.n	11116 <bt_l2cap_connected+0x62>
   11150:	d3c6      	bcc.n	110e0 <bt_l2cap_connected+0x2c>
}
   11152:	b003      	add	sp, #12
   11154:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11156:	bf00      	nop
   11158:	0001f864 	.word	0x0001f864
   1115c:	0001f888 	.word	0x0001f888
   11160:	000225a3 	.word	0x000225a3
   11164:	00022572 	.word	0x00022572
   11168:	000205a4 	.word	0x000205a4
   1116c:	00020cc7 	.word	0x00020cc7

00011170 <l2cap_recv>:
{
   11170:	b5f0      	push	{r4, r5, r6, r7, lr}
   11172:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   11174:	898b      	ldrh	r3, [r1, #12]
{
   11176:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11178:	2b03      	cmp	r3, #3
{
   1117a:	460d      	mov	r5, r1
   1117c:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1117e:	d80b      	bhi.n	11198 <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   11180:	4b30      	ldr	r3, [pc, #192]	; (11244 <l2cap_recv+0xd4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   11182:	617b      	str	r3, [r7, #20]
   11184:	2302      	movs	r3, #2
   11186:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1118a:	482f      	ldr	r0, [pc, #188]	; (11248 <l2cap_recv+0xd8>)
   1118c:	613b      	str	r3, [r7, #16]
   1118e:	f107 0210 	add.w	r2, r7, #16
   11192:	f00c f8b0 	bl	1d2f6 <z_log_msg_static_create.constprop.0>
		return 0;
   11196:	e019      	b.n	111cc <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   11198:	2104      	movs	r1, #4
   1119a:	f105 0008 	add.w	r0, r5, #8
   1119e:	f002 fd57 	bl	13c50 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   111a2:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   111a4:	8843      	ldrh	r3, [r0, #2]
   111a6:	4604      	mov	r4, r0
	if (buf->len != len) {
   111a8:	4299      	cmp	r1, r3
   111aa:	d013      	beq.n	111d4 <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   111ac:	466c      	mov	r4, sp
   111ae:	b088      	sub	sp, #32
   111b0:	aa02      	add	r2, sp, #8
   111b2:	61d3      	str	r3, [r2, #28]
   111b4:	2304      	movs	r3, #4
   111b6:	4825      	ldr	r0, [pc, #148]	; (1124c <l2cap_recv+0xdc>)
   111b8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   111bc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   111c0:	4821      	ldr	r0, [pc, #132]	; (11248 <l2cap_recv+0xd8>)
   111c2:	f842 3f10 	str.w	r3, [r2, #16]!
   111c6:	f00c f896 	bl	1d2f6 <z_log_msg_static_create.constprop.0>
   111ca:	46a5      	mov	sp, r4
}
   111cc:	2000      	movs	r0, #0
   111ce:	371c      	adds	r7, #28
   111d0:	46bd      	mov	sp, r7
   111d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   111d4:	7843      	ldrb	r3, [r0, #1]
   111d6:	b90b      	cbnz	r3, 111dc <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   111d8:	4b1d      	ldr	r3, [pc, #116]	; (11250 <l2cap_recv+0xe0>)
   111da:	e7d2      	b.n	11182 <l2cap_recv+0x12>
	switch (hdr->code) {
   111dc:	7803      	ldrb	r3, [r0, #0]
   111de:	2b01      	cmp	r3, #1
   111e0:	d0f4      	beq.n	111cc <l2cap_recv+0x5c>
   111e2:	2b13      	cmp	r3, #19
   111e4:	d103      	bne.n	111ee <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   111e6:	2901      	cmp	r1, #1
   111e8:	d8f0      	bhi.n	111cc <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   111ea:	4b1a      	ldr	r3, [pc, #104]	; (11254 <l2cap_recv+0xe4>)
   111ec:	e7c9      	b.n	11182 <l2cap_recv+0x12>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   111ee:	466d      	mov	r5, sp
   111f0:	b088      	sub	sp, #32
   111f2:	aa02      	add	r2, sp, #8
   111f4:	4918      	ldr	r1, [pc, #96]	; (11258 <l2cap_recv+0xe8>)
   111f6:	4814      	ldr	r0, [pc, #80]	; (11248 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   111f8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   111fc:	2303      	movs	r3, #3
   111fe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11202:	f842 3f10 	str.w	r3, [r2, #16]!
   11206:	f00c f876 	bl	1d2f6 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1120a:	2202      	movs	r2, #2
   1120c:	46ad      	mov	sp, r5
   1120e:	7861      	ldrb	r1, [r4, #1]
   11210:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   11212:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   11214:	f00c f872 	bl	1d2fc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11218:	4604      	mov	r4, r0
   1121a:	2800      	cmp	r0, #0
   1121c:	d0d6      	beq.n	111cc <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1121e:	2102      	movs	r1, #2
   11220:	3008      	adds	r0, #8
   11222:	f002 fd33 	bl	13c8c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   11226:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11228:	4622      	mov	r2, r4
   1122a:	7003      	strb	r3, [r0, #0]
   1122c:	7043      	strb	r3, [r0, #1]
   1122e:	2105      	movs	r1, #5
   11230:	4628      	mov	r0, r5
   11232:	9300      	str	r3, [sp, #0]
   11234:	f00c f8ae 	bl	1d394 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   11238:	2800      	cmp	r0, #0
   1123a:	d0c7      	beq.n	111cc <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1123c:	4620      	mov	r0, r4
   1123e:	f002 fc03 	bl	13a48 <net_buf_unref>
   11242:	e7c3      	b.n	111cc <l2cap_recv+0x5c>
   11244:	000225ca 	.word	0x000225ca
   11248:	0001f8f0 	.word	0x0001f8f0
   1124c:	000225e8 	.word	0x000225e8
   11250:	00022609 	.word	0x00022609
   11254:	0002262a 	.word	0x0002262a
   11258:	00022646 	.word	0x00022646

0001125c <bt_l2cap_recv>:
{
   1125c:	b5b0      	push	{r4, r5, r7, lr}
   1125e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   11260:	898b      	ldrh	r3, [r1, #12]
{
   11262:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11264:	2b03      	cmp	r3, #3
{
   11266:	460c      	mov	r4, r1
   11268:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1126a:	d810      	bhi.n	1128e <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
   1126c:	4b17      	ldr	r3, [pc, #92]	; (112cc <bt_l2cap_recv+0x70>)
   1126e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11272:	617b      	str	r3, [r7, #20]
   11274:	2302      	movs	r3, #2
   11276:	4816      	ldr	r0, [pc, #88]	; (112d0 <bt_l2cap_recv+0x74>)
   11278:	613b      	str	r3, [r7, #16]
   1127a:	f107 0210 	add.w	r2, r7, #16
   1127e:	f00c f83a 	bl	1d2f6 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   11282:	4620      	mov	r0, r4
   11284:	f002 fbe0 	bl	13a48 <net_buf_unref>
}
   11288:	3718      	adds	r7, #24
   1128a:	46bd      	mov	sp, r7
   1128c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1128e:	2104      	movs	r1, #4
   11290:	f104 0008 	add.w	r0, r4, #8
   11294:	f002 fcdc 	bl	13c50 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   11298:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1129a:	4628      	mov	r0, r5
   1129c:	f00c f893 	bl	1d3c6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   112a0:	b978      	cbnz	r0, 112c2 <bt_l2cap_recv+0x66>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   112a2:	466d      	mov	r5, sp
   112a4:	b088      	sub	sp, #32
   112a6:	466a      	mov	r2, sp
   112a8:	4b0a      	ldr	r3, [pc, #40]	; (112d4 <bt_l2cap_recv+0x78>)
   112aa:	4809      	ldr	r0, [pc, #36]	; (112d0 <bt_l2cap_recv+0x74>)
   112ac:	e9c2 3105 	strd	r3, r1, [r2, #20]
   112b0:	2303      	movs	r3, #3
   112b2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   112b6:	f842 3f10 	str.w	r3, [r2, #16]!
   112ba:	f00c f81c 	bl	1d2f6 <z_log_msg_static_create.constprop.0>
   112be:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   112c0:	e7df      	b.n	11282 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   112c2:	6843      	ldr	r3, [r0, #4]
   112c4:	4621      	mov	r1, r4
   112c6:	695b      	ldr	r3, [r3, #20]
   112c8:	4798      	blx	r3
   112ca:	e7da      	b.n	11282 <bt_l2cap_recv+0x26>
   112cc:	0002266e 	.word	0x0002266e
   112d0:	0001f8f0 	.word	0x0001f8f0
   112d4:	0002268b 	.word	0x0002268b

000112d8 <bt_l2cap_update_conn_param>:
{
   112d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   112da:	4b17      	ldr	r3, [pc, #92]	; (11338 <bt_l2cap_update_conn_param+0x60>)
{
   112dc:	460e      	mov	r6, r1
	ident++;
   112de:	7819      	ldrb	r1, [r3, #0]
{
   112e0:	4605      	mov	r5, r0
	ident++;
   112e2:	3101      	adds	r1, #1
   112e4:	b2c9      	uxtb	r1, r1
   112e6:	2901      	cmp	r1, #1
   112e8:	bf38      	it	cc
   112ea:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   112ec:	2208      	movs	r2, #8
   112ee:	2012      	movs	r0, #18
	ident++;
   112f0:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   112f2:	f00c f803 	bl	1d2fc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   112f6:	4604      	mov	r4, r0
   112f8:	b1d0      	cbz	r0, 11330 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   112fa:	2108      	movs	r1, #8
   112fc:	4408      	add	r0, r1
   112fe:	f002 fcc5 	bl	13c8c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   11302:	8833      	ldrh	r3, [r6, #0]
   11304:	4622      	mov	r2, r4
   11306:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   11308:	8873      	ldrh	r3, [r6, #2]
   1130a:	2105      	movs	r1, #5
   1130c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1130e:	88b3      	ldrh	r3, [r6, #4]
   11310:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   11312:	88f3      	ldrh	r3, [r6, #6]
   11314:	80c3      	strh	r3, [r0, #6]
   11316:	2300      	movs	r3, #0
   11318:	4628      	mov	r0, r5
   1131a:	9300      	str	r3, [sp, #0]
   1131c:	f00c f83a 	bl	1d394 <bt_l2cap_send_cb>
	if (err) {
   11320:	4605      	mov	r5, r0
   11322:	b110      	cbz	r0, 1132a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   11324:	4620      	mov	r0, r4
   11326:	f002 fb8f 	bl	13a48 <net_buf_unref>
}
   1132a:	4628      	mov	r0, r5
   1132c:	b002      	add	sp, #8
   1132e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   11330:	f06f 050b 	mvn.w	r5, #11
   11334:	e7f9      	b.n	1132a <bt_l2cap_update_conn_param+0x52>
   11336:	bf00      	nop
   11338:	20009c5a 	.word	0x20009c5a

0001133c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1133c:	2823      	cmp	r0, #35	; 0x23
   1133e:	d81f      	bhi.n	11380 <att_op_get_type+0x44>
   11340:	281a      	cmp	r0, #26
   11342:	d804      	bhi.n	1134e <att_op_get_type+0x12>
   11344:	1e43      	subs	r3, r0, #1
   11346:	2b18      	cmp	r3, #24
   11348:	d90e      	bls.n	11368 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1134a:	2006      	movs	r0, #6
   1134c:	4770      	bx	lr
	switch (op) {
   1134e:	f1a0 031b 	sub.w	r3, r0, #27
   11352:	2b08      	cmp	r3, #8
   11354:	d81e      	bhi.n	11394 <att_op_get_type+0x58>
   11356:	e8df f003 	tbb	[pc, r3]
   1135a:	1d05      	.short	0x1d05
   1135c:	191d231b 	.word	0x191d231b
   11360:	1d25      	.short	0x1d25
   11362:	05          	.byte	0x05
   11363:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   11364:	2003      	movs	r0, #3
   11366:	4770      	bx	lr
   11368:	2301      	movs	r3, #1
	switch (op) {
   1136a:	4a0f      	ldr	r2, [pc, #60]	; (113a8 <att_op_get_type+0x6c>)
   1136c:	4083      	lsls	r3, r0
   1136e:	401a      	ands	r2, r3
   11370:	b9c2      	cbnz	r2, 113a4 <att_op_get_type+0x68>
   11372:	4a0e      	ldr	r2, [pc, #56]	; (113ac <att_op_get_type+0x70>)
   11374:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   11376:	2a00      	cmp	r2, #0
   11378:	bf14      	ite	ne
   1137a:	2001      	movne	r0, #1
   1137c:	2006      	moveq	r0, #6
   1137e:	4770      	bx	lr
	switch (op) {
   11380:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   11384:	2b52      	cmp	r3, #82	; 0x52
   11386:	d105      	bne.n	11394 <att_op_get_type+0x58>
		return ATT_COMMAND;
   11388:	2000      	movs	r0, #0
}
   1138a:	4770      	bx	lr
		return ATT_REQUEST;
   1138c:	2001      	movs	r0, #1
   1138e:	4770      	bx	lr
		return ATT_INDICATION;
   11390:	2005      	movs	r0, #5
   11392:	4770      	bx	lr
		return ATT_COMMAND;
   11394:	f010 0f40 	tst.w	r0, #64	; 0x40
   11398:	bf0c      	ite	eq
   1139a:	2006      	moveq	r0, #6
   1139c:	2000      	movne	r0, #0
   1139e:	4770      	bx	lr
	switch (op) {
   113a0:	2004      	movs	r0, #4
   113a2:	4770      	bx	lr
		return ATT_RESPONSE;
   113a4:	2002      	movs	r0, #2
   113a6:	4770      	bx	lr
   113a8:	028aaaaa 	.word	0x028aaaaa
   113ac:	01455554 	.word	0x01455554

000113b0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   113b0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   113b2:	3804      	subs	r0, #4
   113b4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   113b6:	a901      	add	r1, sp, #4
   113b8:	4802      	ldr	r0, [pc, #8]	; (113c4 <bt_att_released+0x14>)
   113ba:	f006 fd7b 	bl	17eb4 <k_mem_slab_free>
}
   113be:	b003      	add	sp, #12
   113c0:	f85d fb04 	ldr.w	pc, [sp], #4
   113c4:	200084e0 	.word	0x200084e0

000113c8 <tx_meta_data_free>:
{
   113c8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   113ca:	4604      	mov	r4, r0
   113cc:	b948      	cbnz	r0, 113e2 <tx_meta_data_free+0x1a>
   113ce:	490a      	ldr	r1, [pc, #40]	; (113f8 <tx_meta_data_free+0x30>)
   113d0:	480a      	ldr	r0, [pc, #40]	; (113fc <tx_meta_data_free+0x34>)
   113d2:	23a5      	movs	r3, #165	; 0xa5
   113d4:	4a0a      	ldr	r2, [pc, #40]	; (11400 <tx_meta_data_free+0x38>)
   113d6:	f00a fcaf 	bl	1bd38 <assert_print>
   113da:	21a5      	movs	r1, #165	; 0xa5
   113dc:	4808      	ldr	r0, [pc, #32]	; (11400 <tx_meta_data_free+0x38>)
   113de:	f00a fca4 	bl	1bd2a <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   113e2:	2100      	movs	r1, #0
   113e4:	2214      	movs	r2, #20
   113e6:	f00b fcc1 	bl	1cd6c <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   113ea:	4621      	mov	r1, r4
}
   113ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   113f0:	4804      	ldr	r0, [pc, #16]	; (11404 <tx_meta_data_free+0x3c>)
   113f2:	f00d be67 	b.w	1f0c4 <k_queue_append>
   113f6:	bf00      	nop
   113f8:	00022267 	.word	0x00022267
   113fc:	000205a4 	.word	0x000205a4
   11400:	000226c0 	.word	0x000226c0
   11404:	20008594 	.word	0x20008594

00011408 <find_type_cb>:
{
   11408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1140c:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1140e:	f8d2 a000 	ldr.w	sl, [r2]
{
   11412:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   11414:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11418:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1141a:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1141c:	f642 0301 	movw	r3, #10241	; 0x2801
{
   11420:	4680      	mov	r8, r0
   11422:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11424:	6800      	ldr	r0, [r0, #0]
   11426:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1142a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1142c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   11430:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11432:	f00b fca7 	bl	1cd84 <bt_uuid_cmp>
   11436:	2800      	cmp	r0, #0
   11438:	d070      	beq.n	1151c <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1143a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1143e:	f8d8 0000 	ldr.w	r0, [r8]
   11442:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   11446:	85fb      	strh	r3, [r7, #46]	; 0x2e
   11448:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1144c:	f00b fc9a 	bl	1cd84 <bt_uuid_cmp>
   11450:	b138      	cbz	r0, 11462 <find_type_cb+0x5a>
		if (data->group &&
   11452:	68a3      	ldr	r3, [r4, #8]
   11454:	b11b      	cbz	r3, 1145e <find_type_cb+0x56>
   11456:	885a      	ldrh	r2, [r3, #2]
   11458:	42b2      	cmp	r2, r6
   1145a:	d200      	bcs.n	1145e <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1145c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1145e:	2001      	movs	r0, #1
   11460:	e009      	b.n	11476 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   11462:	6861      	ldr	r1, [r4, #4]
   11464:	4608      	mov	r0, r1
   11466:	f00b ffc2 	bl	1d3ee <net_buf_frags_len>
   1146a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1146e:	1a1b      	subs	r3, r3, r0
   11470:	2b03      	cmp	r3, #3
   11472:	d804      	bhi.n	1147e <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   11474:	2000      	movs	r0, #0
}
   11476:	3744      	adds	r7, #68	; 0x44
   11478:	46bd      	mov	sp, r7
   1147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1147e:	4608      	mov	r0, r1
   11480:	f002 fb3e 	bl	13b00 <net_buf_frag_last>
   11484:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   11486:	6860      	ldr	r0, [r4, #4]
   11488:	f00b ffb1 	bl	1d3ee <net_buf_frags_len>
   1148c:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   11490:	f105 0908 	add.w	r9, r5, #8
   11494:	ebab 0b00 	sub.w	fp, fp, r0
   11498:	4648      	mov	r0, r9
   1149a:	f00c fe16 	bl	1e0ca <net_buf_simple_tailroom>
   1149e:	4558      	cmp	r0, fp
   114a0:	d93f      	bls.n	11522 <find_type_cb+0x11a>
   114a2:	6860      	ldr	r0, [r4, #4]
   114a4:	f00b ffa3 	bl	1d3ee <net_buf_frags_len>
   114a8:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   114ac:	1a18      	subs	r0, r3, r0
	if (!len) {
   114ae:	b970      	cbnz	r0, 114ce <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   114b0:	6863      	ldr	r3, [r4, #4]
   114b2:	7998      	ldrb	r0, [r3, #6]
   114b4:	f002 f82e 	bl	13514 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   114b8:	2200      	movs	r2, #0
   114ba:	2300      	movs	r3, #0
   114bc:	f00c fded 	bl	1e09a <net_buf_alloc_fixed>
		if (!frag) {
   114c0:	4605      	mov	r5, r0
   114c2:	2800      	cmp	r0, #0
   114c4:	d0d6      	beq.n	11474 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   114c6:	4601      	mov	r1, r0
   114c8:	6860      	ldr	r0, [r4, #4]
   114ca:	f002 fb5f 	bl	13b8c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   114ce:	2300      	movs	r3, #0
   114d0:	9300      	str	r3, [sp, #0]
   114d2:	4641      	mov	r1, r8
   114d4:	f8d8 a004 	ldr.w	sl, [r8, #4]
   114d8:	2310      	movs	r3, #16
   114da:	6878      	ldr	r0, [r7, #4]
   114dc:	f107 0208 	add.w	r2, r7, #8
   114e0:	47d0      	blx	sl
	if (read < 0) {
   114e2:	f1b0 0800 	subs.w	r8, r0, #0
   114e6:	db19      	blt.n	1151c <find_type_cb+0x114>
	if (read != data->value_len) {
   114e8:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   114ea:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   114ec:	4542      	cmp	r2, r8
   114ee:	d03f      	beq.n	11570 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   114f0:	4601      	mov	r1, r0
   114f2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   114f6:	f00b fc73 	bl	1cde0 <bt_uuid_create>
   114fa:	b9b0      	cbnz	r0, 1152a <find_type_cb+0x122>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   114fc:	466d      	mov	r5, sp
   114fe:	b088      	sub	sp, #32
   11500:	7c23      	ldrb	r3, [r4, #16]
   11502:	aa02      	add	r2, sp, #8
   11504:	491d      	ldr	r1, [pc, #116]	; (1157c <find_type_cb+0x174>)
   11506:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   1150a:	2303      	movs	r3, #3
   1150c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11510:	481b      	ldr	r0, [pc, #108]	; (11580 <find_type_cb+0x178>)
   11512:	f842 3f10 	str.w	r3, [r2, #16]!
   11516:	f00c f855 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
   1151a:	46ad      	mov	sp, r5
	data->group = NULL;
   1151c:	2300      	movs	r3, #0
   1151e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   11520:	e79d      	b.n	1145e <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   11522:	4648      	mov	r0, r9
   11524:	f00c fdd1 	bl	1e0ca <net_buf_simple_tailroom>
   11528:	e7c1      	b.n	114ae <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1152a:	fa5f f288 	uxtb.w	r2, r8
   1152e:	f107 0108 	add.w	r1, r7, #8
   11532:	f107 0018 	add.w	r0, r7, #24
   11536:	f00b fc53 	bl	1cde0 <bt_uuid_create>
   1153a:	b930      	cbnz	r0, 1154a <find_type_cb+0x142>
			BT_WARN("Unable to create UUID: size %d", read);
   1153c:	466d      	mov	r5, sp
   1153e:	b088      	sub	sp, #32
   11540:	aa02      	add	r2, sp, #8
   11542:	4b10      	ldr	r3, [pc, #64]	; (11584 <find_type_cb+0x17c>)
   11544:	e9c2 3805 	strd	r3, r8, [r2, #20]
   11548:	e7df      	b.n	1150a <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1154a:	f107 0118 	add.w	r1, r7, #24
   1154e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   11552:	f00b fc17 	bl	1cd84 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   11556:	2800      	cmp	r0, #0
   11558:	d1e0      	bne.n	1151c <find_type_cb+0x114>
	data->err = 0x00;
   1155a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1155c:	2104      	movs	r1, #4
   1155e:	7463      	strb	r3, [r4, #17]
   11560:	f105 0008 	add.w	r0, r5, #8
   11564:	f002 fb92 	bl	13c8c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   11568:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1156a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1156c:	68a3      	ldr	r3, [r4, #8]
   1156e:	e775      	b.n	1145c <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   11570:	f107 0108 	add.w	r1, r7, #8
   11574:	f00b fbdf 	bl	1cd36 <memcmp>
   11578:	e7ed      	b.n	11556 <find_type_cb+0x14e>
   1157a:	bf00      	nop
   1157c:	000226ef 	.word	0x000226ef
   11580:	0001f8b0 	.word	0x0001f8b0
   11584:	0002270e 	.word	0x0002270e

00011588 <chan_send>:
{
   11588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1158c:	4606      	mov	r6, r0
   1158e:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   11590:	f8d1 9014 	ldr.w	r9, [r1, #20]
	hdr = (void *)buf->data;
   11594:	688b      	ldr	r3, [r1, #8]
{
   11596:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   11598:	2102      	movs	r1, #2
   1159a:	3098      	adds	r0, #152	; 0x98
   1159c:	f00b ff41 	bl	1d422 <atomic_test_bit>
   115a0:	2800      	cmp	r0, #0
   115a2:	d053      	beq.n	1164c <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   115a4:	781b      	ldrb	r3, [r3, #0]
   115a6:	2bd2      	cmp	r3, #210	; 0xd2
   115a8:	d11a      	bne.n	115e0 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   115aa:	6833      	ldr	r3, [r6, #0]
   115ac:	4621      	mov	r1, r4
   115ae:	6818      	ldr	r0, [r3, #0]
   115b0:	f00c fd6d 	bl	1e08e <bt_smp_sign>
		if (err) {
   115b4:	4605      	mov	r5, r0
   115b6:	b198      	cbz	r0, 115e0 <chan_send+0x58>
			BT_ERR("Error signing data");
   115b8:	4b26      	ldr	r3, [pc, #152]	; (11654 <chan_send+0xcc>)
   115ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   115be:	9307      	str	r3, [sp, #28]
   115c0:	2302      	movs	r3, #2
   115c2:	4825      	ldr	r0, [pc, #148]	; (11658 <chan_send+0xd0>)
   115c4:	aa06      	add	r2, sp, #24
   115c6:	9306      	str	r3, [sp, #24]
   115c8:	f00b fffc 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   115cc:	6960      	ldr	r0, [r4, #20]
   115ce:	f7ff fefb 	bl	113c8 <tx_meta_data_free>
			net_buf_unref(buf);
   115d2:	4620      	mov	r0, r4
   115d4:	f002 fa38 	bl	13a48 <net_buf_unref>
}
   115d8:	4628      	mov	r0, r5
   115da:	b009      	add	sp, #36	; 0x24
   115dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   115e0:	f104 0008 	add.w	r0, r4, #8
   115e4:	f00c fd6d 	bl	1e0c2 <net_buf_simple_headroom>
	state->len = buf->len;
   115e8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	data->att_chan = chan;
   115ec:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   115f0:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   115f2:	4607      	mov	r7, r0
   115f4:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   115f6:	68a3      	ldr	r3, [r4, #8]
   115f8:	7818      	ldrb	r0, [r3, #0]
   115fa:	f7ff fe9f 	bl	1133c <att_op_get_type>
   115fe:	2805      	cmp	r0, #5
   11600:	4605      	mov	r5, r0
	switch (op_type) {
   11602:	d813      	bhi.n	1162c <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11604:	4b15      	ldr	r3, [pc, #84]	; (1165c <chan_send+0xd4>)
   11606:	4622      	mov	r2, r4
   11608:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1160c:	2104      	movs	r1, #4
   1160e:	4630      	mov	r0, r6
   11610:	f8cd 9000 	str.w	r9, [sp]
   11614:	f00b febe 	bl	1d394 <bt_l2cap_send_cb>
	if (err) {
   11618:	4605      	mov	r5, r0
   1161a:	2800      	cmp	r0, #0
   1161c:	d0dc      	beq.n	115d8 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1161e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   11620:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   11624:	fa13 f787 	uxtah	r7, r3, r7
   11628:	60a7      	str	r7, [r4, #8]
}
   1162a:	e7d5      	b.n	115d8 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   1162c:	f240 2357 	movw	r3, #599	; 0x257
   11630:	4a0b      	ldr	r2, [pc, #44]	; (11660 <chan_send+0xd8>)
   11632:	490c      	ldr	r1, [pc, #48]	; (11664 <chan_send+0xdc>)
   11634:	480c      	ldr	r0, [pc, #48]	; (11668 <chan_send+0xe0>)
   11636:	f00a fb7f 	bl	1bd38 <assert_print>
   1163a:	4629      	mov	r1, r5
   1163c:	480b      	ldr	r0, [pc, #44]	; (1166c <chan_send+0xe4>)
   1163e:	f00a fb7b 	bl	1bd38 <assert_print>
   11642:	f240 2157 	movw	r1, #599	; 0x257
   11646:	4806      	ldr	r0, [pc, #24]	; (11660 <chan_send+0xd8>)
   11648:	f00a fb6f 	bl	1bd2a <assert_post_action>
		return -EINVAL;
   1164c:	f06f 0515 	mvn.w	r5, #21
   11650:	e7c2      	b.n	115d8 <chan_send+0x50>
   11652:	bf00      	nop
   11654:	0002272d 	.word	0x0002272d
   11658:	0001f8b0 	.word	0x0001f8b0
   1165c:	0001fdf4 	.word	0x0001fdf4
   11660:	000226c0 	.word	0x000226c0
   11664:	0002357e 	.word	0x0002357e
   11668:	000205a4 	.word	0x000205a4
   1166c:	00022740 	.word	0x00022740

00011670 <bt_att_chan_req_send>:
{
   11670:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   11672:	b958      	cbnz	r0, 1168c <bt_att_chan_req_send+0x1c>
   11674:	4919      	ldr	r1, [pc, #100]	; (116dc <bt_att_chan_req_send+0x6c>)
   11676:	f44f 7346 	mov.w	r3, #792	; 0x318
   1167a:	4a19      	ldr	r2, [pc, #100]	; (116e0 <bt_att_chan_req_send+0x70>)
   1167c:	4819      	ldr	r0, [pc, #100]	; (116e4 <bt_att_chan_req_send+0x74>)
   1167e:	f00a fb5b 	bl	1bd38 <assert_print>
   11682:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   11686:	4816      	ldr	r0, [pc, #88]	; (116e0 <bt_att_chan_req_send+0x70>)
   11688:	f00a fb4f 	bl	1bd2a <assert_post_action>
   1168c:	b949      	cbnz	r1, 116a2 <bt_att_chan_req_send+0x32>
   1168e:	4916      	ldr	r1, [pc, #88]	; (116e8 <bt_att_chan_req_send+0x78>)
   11690:	f240 3319 	movw	r3, #793	; 0x319
   11694:	4a12      	ldr	r2, [pc, #72]	; (116e0 <bt_att_chan_req_send+0x70>)
   11696:	4813      	ldr	r0, [pc, #76]	; (116e4 <bt_att_chan_req_send+0x74>)
   11698:	f00a fb4e 	bl	1bd38 <assert_print>
   1169c:	f240 3119 	movw	r1, #793	; 0x319
   116a0:	e7f1      	b.n	11686 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   116a2:	684a      	ldr	r2, [r1, #4]
   116a4:	b94a      	cbnz	r2, 116ba <bt_att_chan_req_send+0x4a>
   116a6:	4911      	ldr	r1, [pc, #68]	; (116ec <bt_att_chan_req_send+0x7c>)
   116a8:	f240 331a 	movw	r3, #794	; 0x31a
   116ac:	4a0c      	ldr	r2, [pc, #48]	; (116e0 <bt_att_chan_req_send+0x70>)
   116ae:	480d      	ldr	r0, [pc, #52]	; (116e4 <bt_att_chan_req_send+0x74>)
   116b0:	f00a fb42 	bl	1bd38 <assert_print>
   116b4:	f240 311a 	movw	r1, #794	; 0x31a
   116b8:	e7e5      	b.n	11686 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   116ba:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   116be:	b14b      	cbz	r3, 116d4 <bt_att_chan_req_send+0x64>
   116c0:	490b      	ldr	r1, [pc, #44]	; (116f0 <bt_att_chan_req_send+0x80>)
   116c2:	f240 331b 	movw	r3, #795	; 0x31b
   116c6:	4a06      	ldr	r2, [pc, #24]	; (116e0 <bt_att_chan_req_send+0x70>)
   116c8:	4806      	ldr	r0, [pc, #24]	; (116e4 <bt_att_chan_req_send+0x74>)
   116ca:	f00a fb35 	bl	1bd38 <assert_print>
   116ce:	f240 311b 	movw	r1, #795	; 0x31b
   116d2:	e7d8      	b.n	11686 <bt_att_chan_req_send+0x16>
}
   116d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   116d8:	f00b bf77 	b.w	1d5ca <chan_req_send>
   116dc:	00022759 	.word	0x00022759
   116e0:	000226c0 	.word	0x000226c0
   116e4:	000205a4 	.word	0x000205a4
   116e8:	0002276f 	.word	0x0002276f
   116ec:	0002275e 	.word	0x0002275e
   116f0:	00022768 	.word	0x00022768

000116f4 <att_get>:
{
   116f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   116f6:	7a83      	ldrb	r3, [r0, #10]
   116f8:	2b07      	cmp	r3, #7
   116fa:	d00d      	beq.n	11718 <att_get+0x24>
		BT_WARN("Not connected");
   116fc:	4b18      	ldr	r3, [pc, #96]	; (11760 <att_get+0x6c>)
   116fe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11702:	9305      	str	r3, [sp, #20]
   11704:	2302      	movs	r3, #2
   11706:	aa04      	add	r2, sp, #16
   11708:	9304      	str	r3, [sp, #16]
		BT_ERR("Unable to find ATT channel");
   1170a:	4816      	ldr	r0, [pc, #88]	; (11764 <att_get+0x70>)
   1170c:	f00b ff5a 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
		return NULL;
   11710:	2000      	movs	r0, #0
}
   11712:	b007      	add	sp, #28
   11714:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   11718:	2104      	movs	r1, #4
   1171a:	f00b fe54 	bl	1d3c6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1171e:	4603      	mov	r3, r0
   11720:	b938      	cbnz	r0, 11732 <att_get+0x3e>
		BT_ERR("Unable to find ATT channel");
   11722:	4b11      	ldr	r3, [pc, #68]	; (11768 <att_get+0x74>)
   11724:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11728:	9305      	str	r3, [sp, #20]
   1172a:	2302      	movs	r3, #2
   1172c:	aa04      	add	r2, sp, #16
   1172e:	9304      	str	r3, [sp, #16]
   11730:	e7eb      	b.n	1170a <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   11732:	2102      	movs	r1, #2
   11734:	3094      	adds	r0, #148	; 0x94
   11736:	f00b fe74 	bl	1d422 <atomic_test_bit>
   1173a:	b970      	cbnz	r0, 1175a <att_get+0x66>
   1173c:	490b      	ldr	r1, [pc, #44]	; (1176c <att_get+0x78>)
   1173e:	f640 332e 	movw	r3, #2862	; 0xb2e
   11742:	4a0b      	ldr	r2, [pc, #44]	; (11770 <att_get+0x7c>)
   11744:	480b      	ldr	r0, [pc, #44]	; (11774 <att_get+0x80>)
   11746:	f00a faf7 	bl	1bd38 <assert_print>
   1174a:	480b      	ldr	r0, [pc, #44]	; (11778 <att_get+0x84>)
   1174c:	f00a faf4 	bl	1bd38 <assert_print>
   11750:	f640 312e 	movw	r1, #2862	; 0xb2e
   11754:	4806      	ldr	r0, [pc, #24]	; (11770 <att_get+0x7c>)
   11756:	f00a fae8 	bl	1bd2a <assert_post_action>
	return att_chan->att;
   1175a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1175e:	e7d8      	b.n	11712 <att_get+0x1e>
   11760:	00022773 	.word	0x00022773
   11764:	0001f8b0 	.word	0x0001f8b0
   11768:	00022781 	.word	0x00022781
   1176c:	0002279c 	.word	0x0002279c
   11770:	000226c0 	.word	0x000226c0
   11774:	000205a4 	.word	0x000205a4
   11778:	000227cc 	.word	0x000227cc

0001177c <bt_att_connected>:
{
   1177c:	b510      	push	{r4, lr}
   1177e:	4604      	mov	r4, r0
   11780:	f100 0394 	add.w	r3, r0, #148	; 0x94
   11784:	e8d3 1fef 	ldaex	r1, [r3]
   11788:	f041 0104 	orr.w	r1, r1, #4
   1178c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11790:	2a00      	cmp	r2, #0
   11792:	d1f7      	bne.n	11784 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11794:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   11796:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11798:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1179a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1179c:	f00b fecf 	bl	1d53e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   117a0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   117a4:	4903      	ldr	r1, [pc, #12]	; (117b4 <bt_att_connected+0x38>)
   117a6:	f007 fc9f 	bl	190e8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   117aa:	6820      	ldr	r0, [r4, #0]
}
   117ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   117b0:	f001 be42 	b.w	13438 <bt_gatt_connected>
   117b4:	00012481 	.word	0x00012481

000117b8 <read_group_cb>:
{
   117b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   117bc:	f04f 0800 	mov.w	r8, #0
   117c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   117c4:	4605      	mov	r5, r0
   117c6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   117c8:	6800      	ldr	r0, [r0, #0]
   117ca:	a902      	add	r1, sp, #8
{
   117cc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   117ce:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   117d0:	f88d 8008 	strb.w	r8, [sp, #8]
   117d4:	f8ad 300a 	strh.w	r3, [sp, #10]
   117d8:	f00b fad4 	bl	1cd84 <bt_uuid_cmp>
   117dc:	b1a0      	cbz	r0, 11808 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   117de:	f642 0301 	movw	r3, #10241	; 0x2801
   117e2:	6828      	ldr	r0, [r5, #0]
   117e4:	a903      	add	r1, sp, #12
   117e6:	f88d 800c 	strb.w	r8, [sp, #12]
   117ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   117ee:	f00b fac9 	bl	1cd84 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   117f2:	b148      	cbz	r0, 11808 <read_group_cb+0x50>
		if (data->group &&
   117f4:	6923      	ldr	r3, [r4, #16]
   117f6:	b11b      	cbz	r3, 11800 <read_group_cb+0x48>
   117f8:	885a      	ldrh	r2, [r3, #2]
   117fa:	42b2      	cmp	r2, r6
   117fc:	d200      	bcs.n	11800 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   117fe:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11800:	2001      	movs	r0, #1
}
   11802:	b004      	add	sp, #16
   11804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11808:	6861      	ldr	r1, [r4, #4]
   1180a:	6828      	ldr	r0, [r5, #0]
   1180c:	f00b faba 	bl	1cd84 <bt_uuid_cmp>
   11810:	b110      	cbz	r0, 11818 <read_group_cb+0x60>
		data->group = NULL;
   11812:	2300      	movs	r3, #0
   11814:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   11816:	e7f3      	b.n	11800 <read_group_cb+0x48>
	if (data->rsp->len &&
   11818:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1181a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1181c:	781a      	ldrb	r2, [r3, #0]
   1181e:	b132      	cbz	r2, 1182e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11820:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   11822:	8981      	ldrh	r1, [r0, #12]
   11824:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   11826:	4293      	cmp	r3, r2
   11828:	da01      	bge.n	1182e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1182a:	2000      	movs	r0, #0
   1182c:	e7e9      	b.n	11802 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1182e:	2104      	movs	r1, #4
   11830:	3008      	adds	r0, #8
   11832:	f002 fa2b 	bl	13c8c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   11836:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   11838:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1183a:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1183c:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1183e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11840:	4b07      	ldr	r3, [pc, #28]	; (11860 <read_group_cb+0xa8>)
   11842:	9401      	str	r4, [sp, #4]
   11844:	9300      	str	r3, [sp, #0]
   11846:	4638      	mov	r0, r7
   11848:	2300      	movs	r3, #0
   1184a:	68a2      	ldr	r2, [r4, #8]
   1184c:	f00b fefe 	bl	1d64c <att_chan_read>
	if (read < 0) {
   11850:	2800      	cmp	r0, #0
   11852:	dbea      	blt.n	1182a <read_group_cb+0x72>
	if (!data->group) {
   11854:	6920      	ldr	r0, [r4, #16]
   11856:	3800      	subs	r0, #0
   11858:	bf18      	it	ne
   1185a:	2001      	movne	r0, #1
   1185c:	e7d1      	b.n	11802 <read_group_cb+0x4a>
   1185e:	bf00      	nop
   11860:	0001d5a5 	.word	0x0001d5a5

00011864 <read_type_cb>:
{
   11864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   11868:	6817      	ldr	r7, [r2, #0]
{
   1186a:	4605      	mov	r5, r0
   1186c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1186e:	6800      	ldr	r0, [r0, #0]
   11870:	6851      	ldr	r1, [r2, #4]
{
   11872:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   11874:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11876:	f00b fa85 	bl	1cd84 <bt_uuid_cmp>
   1187a:	4681      	mov	r9, r0
   1187c:	2800      	cmp	r0, #0
   1187e:	d13c      	bne.n	118fa <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   11880:	4630      	mov	r0, r6
   11882:	2295      	movs	r2, #149	; 0x95
   11884:	4629      	mov	r1, r5
   11886:	f00c fb77 	bl	1df78 <bt_gatt_check_perm>
   1188a:	4606      	mov	r6, r0
   1188c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1188e:	b140      	cbz	r0, 118a2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   11890:	68e3      	ldr	r3, [r4, #12]
   11892:	781b      	ldrb	r3, [r3, #0]
   11894:	b10b      	cbz	r3, 1189a <read_type_cb+0x36>
			data->err = 0x00;
   11896:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1189a:	2000      	movs	r0, #0
}
   1189c:	b003      	add	sp, #12
   1189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   118a2:	68a0      	ldr	r0, [r4, #8]
   118a4:	f002 f92c 	bl	13b00 <net_buf_frag_last>
   118a8:	2102      	movs	r1, #2
   118aa:	3008      	adds	r0, #8
   118ac:	f002 f9ee 	bl	13c8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   118b0:	4b13      	ldr	r3, [pc, #76]	; (11900 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   118b2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   118b4:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   118b8:	9300      	str	r3, [sp, #0]
   118ba:	9401      	str	r4, [sp, #4]
   118bc:	4633      	mov	r3, r6
   118be:	4629      	mov	r1, r5
   118c0:	4638      	mov	r0, r7
   118c2:	68a2      	ldr	r2, [r4, #8]
   118c4:	f00b fec2 	bl	1d64c <att_chan_read>
	if (read < 0) {
   118c8:	2800      	cmp	r0, #0
   118ca:	da07      	bge.n	118dc <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   118cc:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   118d0:	bf32      	itee	cc
   118d2:	200e      	movcc	r0, #14
		return -err;
   118d4:	4240      	negcs	r0, r0
   118d6:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   118d8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   118da:	e7de      	b.n	1189a <read_type_cb+0x36>
	if (!data->item) {
   118dc:	6923      	ldr	r3, [r4, #16]
   118de:	2b00      	cmp	r3, #0
   118e0:	d0db      	beq.n	1189a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   118e2:	68a0      	ldr	r0, [r4, #8]
   118e4:	f00b fd83 	bl	1d3ee <net_buf_frags_len>
   118e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   118ea:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   118ec:	68e3      	ldr	r3, [r4, #12]
   118ee:	781b      	ldrb	r3, [r3, #0]
   118f0:	4298      	cmp	r0, r3
   118f2:	bf94      	ite	ls
   118f4:	2000      	movls	r0, #0
   118f6:	2001      	movhi	r0, #1
   118f8:	e7d0      	b.n	1189c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   118fa:	2001      	movs	r0, #1
   118fc:	e7ce      	b.n	1189c <read_type_cb+0x38>
   118fe:	bf00      	nop
   11900:	0001d3ff 	.word	0x0001d3ff

00011904 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   11904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11908:	b082      	sub	sp, #8
   1190a:	af00      	add	r7, sp, #0
   1190c:	4604      	mov	r4, r0
   1190e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11910:	2200      	movs	r2, #0
   11912:	2300      	movs	r3, #0
   11914:	4639      	mov	r1, r7
   11916:	4838      	ldr	r0, [pc, #224]	; (119f8 <bt_att_accept+0xf4>)
   11918:	f006 fa62 	bl	17de0 <k_mem_slab_alloc>
   1191c:	4605      	mov	r5, r0
   1191e:	b1a8      	cbz	r0, 1194c <bt_att_accept+0x48>
		BT_ERR("No available ATT context for conn %p", conn);
   11920:	466d      	mov	r5, sp
   11922:	b088      	sub	sp, #32
   11924:	466a      	mov	r2, sp
   11926:	4b35      	ldr	r3, [pc, #212]	; (119fc <bt_att_accept+0xf8>)
   11928:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1192c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11930:	2303      	movs	r3, #3
   11932:	4833      	ldr	r0, [pc, #204]	; (11a00 <bt_att_accept+0xfc>)
   11934:	f842 3f10 	str.w	r3, [r2, #16]!
   11938:	f00b fe44 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
   1193c:	46ad      	mov	sp, r5
		return -ENOMEM;
   1193e:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   11942:	4628      	mov	r0, r5
   11944:	3708      	adds	r7, #8
   11946:	46bd      	mov	sp, r7
   11948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1194c:	f008 fe70 	bl	1a630 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   11950:	4b2c      	ldr	r3, [pc, #176]	; (11a04 <bt_att_accept+0x100>)
	(void)memset(att, 0, sizeof(*att));
   11952:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   11954:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   11956:	2230      	movs	r2, #48	; 0x30
   11958:	6838      	ldr	r0, [r7, #0]
   1195a:	f00b fa07 	bl	1cd6c <memset>
	att->conn = conn;
   1195e:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11960:	2200      	movs	r2, #0
	att->conn = conn;
   11962:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   11964:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11966:	2300      	movs	r3, #0
	list->tail = NULL;
   11968:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1196c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   11970:	4825      	ldr	r0, [pc, #148]	; (11a08 <bt_att_accept+0x104>)
   11972:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   11974:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11976:	f006 fa33 	bl	17de0 <k_mem_slab_alloc>
   1197a:	4605      	mov	r5, r0
   1197c:	b180      	cbz	r0, 119a0 <bt_att_accept+0x9c>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1197e:	6823      	ldr	r3, [r4, #0]
   11980:	466c      	mov	r4, sp
   11982:	b088      	sub	sp, #32
   11984:	466a      	mov	r2, sp
   11986:	4921      	ldr	r1, [pc, #132]	; (11a0c <bt_att_accept+0x108>)
   11988:	481d      	ldr	r0, [pc, #116]	; (11a00 <bt_att_accept+0xfc>)
   1198a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1198e:	2303      	movs	r3, #3
   11990:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11994:	f842 3f10 	str.w	r3, [r2, #16]!
   11998:	f00b fe14 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
   1199c:	46a5      	mov	sp, r4
	if (!chan) {
   1199e:	e7ce      	b.n	1193e <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   119a0:	4601      	mov	r1, r0
   119a2:	22f8      	movs	r2, #248	; 0xf8
   119a4:	6878      	ldr	r0, [r7, #4]
   119a6:	f00b f9e1 	bl	1cd6c <memset>
	chan->chan.chan.ops = &ops;
   119aa:	6878      	ldr	r0, [r7, #4]
   119ac:	4b18      	ldr	r3, [pc, #96]	; (11a10 <bt_att_accept+0x10c>)
   119ae:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   119b0:	30a0      	adds	r0, #160	; 0xa0
   119b2:	f00d fb7a 	bl	1f0aa <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   119b6:	687b      	ldr	r3, [r7, #4]
   119b8:	3398      	adds	r3, #152	; 0x98
   119ba:	e8d3 2fef 	ldaex	r2, [r3]
   119be:	e8c3 5fe1 	stlex	r1, r5, [r3]
   119c2:	2900      	cmp	r1, #0
   119c4:	d1f9      	bne.n	119ba <bt_att_accept+0xb6>
	chan->att = att;
   119c6:	687b      	ldr	r3, [r7, #4]
   119c8:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   119ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   119cc:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   119d0:	b91b      	cbnz	r3, 119da <bt_att_accept+0xd6>
   119d2:	f104 000c 	add.w	r0, r4, #12
   119d6:	f00d fb68 	bl	1f0aa <z_impl_k_queue_init>
	return list->head;
   119da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   119dc:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   119e0:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   119e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   119e6:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   119e8:	b902      	cbnz	r2, 119ec <bt_att_accept+0xe8>
	list->tail = node;
   119ea:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   119ec:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   119ee:	2b00      	cmp	r3, #0
   119f0:	d0a5      	beq.n	1193e <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   119f2:	3304      	adds	r3, #4
   119f4:	6033      	str	r3, [r6, #0]
	return 0;
   119f6:	e7a4      	b.n	11942 <bt_att_accept+0x3e>
   119f8:	200084c0 	.word	0x200084c0
   119fc:	000227e8 	.word	0x000227e8
   11a00:	0001f8b0 	.word	0x0001f8b0
   11a04:	20009894 	.word	0x20009894
   11a08:	200084e0 	.word	0x200084e0
   11a0c:	0002280d 	.word	0x0002280d
   11a10:	20008218 	.word	0x20008218

00011a14 <bt_att_chan_create_pdu>:
{
   11a14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   11a18:	b086      	sub	sp, #24
   11a1a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11a1c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   11a1e:	1c53      	adds	r3, r2, #1
   11a20:	428b      	cmp	r3, r1
{
   11a22:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11a24:	d915      	bls.n	11a52 <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   11a26:	466c      	mov	r4, sp
   11a28:	b088      	sub	sp, #32
   11a2a:	466a      	mov	r2, sp
   11a2c:	4829      	ldr	r0, [pc, #164]	; (11ad4 <bt_att_chan_create_pdu+0xc0>)
   11a2e:	61d3      	str	r3, [r2, #28]
   11a30:	2304      	movs	r3, #4
   11a32:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11a36:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11a3a:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11a3e:	4826      	ldr	r0, [pc, #152]	; (11ad8 <bt_att_chan_create_pdu+0xc4>)
   11a40:	f00b fdc0 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
   11a44:	46a5      	mov	sp, r4
		return NULL;
   11a46:	2400      	movs	r4, #0
}
   11a48:	4620      	mov	r0, r4
   11a4a:	3718      	adds	r7, #24
   11a4c:	46bd      	mov	sp, r7
   11a4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   11a52:	4628      	mov	r0, r5
   11a54:	f7ff fc72 	bl	1133c <att_op_get_type>
   11a58:	2802      	cmp	r0, #2
   11a5a:	d019      	beq.n	11a90 <bt_att_chan_create_pdu+0x7c>
   11a5c:	2804      	cmp	r0, #4
   11a5e:	d017      	beq.n	11a90 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   11a60:	f04f 38ff 	mov.w	r8, #4294967295
   11a64:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   11a68:	2100      	movs	r1, #0
   11a6a:	4642      	mov	r2, r8
   11a6c:	464b      	mov	r3, r9
   11a6e:	4608      	mov	r0, r1
   11a70:	f00b fc8d 	bl	1d38e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   11a74:	4604      	mov	r4, r0
   11a76:	b980      	cbnz	r0, 11a9a <bt_att_chan_create_pdu+0x86>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11a78:	466c      	mov	r4, sp
   11a7a:	b088      	sub	sp, #32
   11a7c:	466a      	mov	r2, sp
   11a7e:	4b17      	ldr	r3, [pc, #92]	; (11adc <bt_att_chan_create_pdu+0xc8>)
   11a80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a84:	e9c2 3505 	strd	r3, r5, [r2, #20]
   11a88:	2303      	movs	r3, #3
   11a8a:	f842 3f10 	str.w	r3, [r2, #16]!
   11a8e:	e7d6      	b.n	11a3e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   11a90:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   11a94:	f04f 0900 	mov.w	r9, #0
   11a98:	e7e6      	b.n	11a68 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   11a9a:	4811      	ldr	r0, [pc, #68]	; (11ae0 <bt_att_chan_create_pdu+0xcc>)
   11a9c:	4642      	mov	r2, r8
   11a9e:	464b      	mov	r3, r9
   11aa0:	f006 fe34 	bl	1870c <z_impl_k_queue_get>
	if (!data) {
   11aa4:	b970      	cbnz	r0, 11ac4 <bt_att_chan_create_pdu+0xb0>
		BT_WARN("Unable to allocate ATT TX meta");
   11aa6:	4b0f      	ldr	r3, [pc, #60]	; (11ae4 <bt_att_chan_create_pdu+0xd0>)
   11aa8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11aac:	617b      	str	r3, [r7, #20]
   11aae:	2302      	movs	r3, #2
   11ab0:	4809      	ldr	r0, [pc, #36]	; (11ad8 <bt_att_chan_create_pdu+0xc4>)
   11ab2:	613b      	str	r3, [r7, #16]
   11ab4:	f107 0210 	add.w	r2, r7, #16
   11ab8:	f00b fd84 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   11abc:	4620      	mov	r0, r4
   11abe:	f001 ffc3 	bl	13a48 <net_buf_unref>
		return NULL;
   11ac2:	e7c0      	b.n	11a46 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   11ac4:	6160      	str	r0, [r4, #20]
   11ac6:	2101      	movs	r1, #1
   11ac8:	f104 0008 	add.w	r0, r4, #8
   11acc:	f002 f8de 	bl	13c8c <net_buf_simple_add>
	hdr->code = op;
   11ad0:	7005      	strb	r5, [r0, #0]
	return buf;
   11ad2:	e7b9      	b.n	11a48 <bt_att_chan_create_pdu+0x34>
   11ad4:	00022832 	.word	0x00022832
   11ad8:	0001f8b0 	.word	0x0001f8b0
   11adc:	00022523 	.word	0x00022523
   11ae0:	20008594 	.word	0x20008594
   11ae4:	00022857 	.word	0x00022857

00011ae8 <bt_att_recv>:
{
   11ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aec:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   11aee:	898b      	ldrh	r3, [r1, #12]
{
   11af0:	4682      	mov	sl, r0
   11af2:	460c      	mov	r4, r1
   11af4:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   11af6:	b97b      	cbnz	r3, 11b18 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   11af8:	4b4c      	ldr	r3, [pc, #304]	; (11c2c <bt_att_recv+0x144>)
   11afa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11afe:	617b      	str	r3, [r7, #20]
   11b00:	2302      	movs	r3, #2
   11b02:	f107 0210 	add.w	r2, r7, #16
   11b06:	613b      	str	r3, [r7, #16]
			BT_WARN("Ignoring unexpected request");
   11b08:	4849      	ldr	r0, [pc, #292]	; (11c30 <bt_att_recv+0x148>)
   11b0a:	f00b fd5b 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
}
   11b0e:	2000      	movs	r0, #0
   11b10:	371c      	adds	r7, #28
   11b12:	46bd      	mov	sp, r7
   11b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   11b18:	2101      	movs	r1, #1
   11b1a:	f104 0008 	add.w	r0, r4, #8
   11b1e:	f002 f897 	bl	13c50 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11b22:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   11b26:	4605      	mov	r5, r0
   11b28:	2b00      	cmp	r3, #0
   11b2a:	d0f0      	beq.n	11b0e <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11b2c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11b2e:	7801      	ldrb	r1, [r0, #0]
   11b30:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11c34 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11b34:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   11b38:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   11b3c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   11b40:	4288      	cmp	r0, r1
   11b42:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   11b46:	d114      	bne.n	11b72 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   11b48:	f892 9002 	ldrb.w	r9, [r2, #2]
   11b4c:	f1b9 0f01 	cmp.w	r9, #1
   11b50:	d131      	bne.n	11bb6 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   11b52:	2100      	movs	r1, #0
   11b54:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   11b58:	f00b fe1e 	bl	1d798 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   11b5c:	2800      	cmp	r0, #0
   11b5e:	d035      	beq.n	11bcc <bt_att_recv+0xe4>
			BT_WARN("Ignoring unexpected request");
   11b60:	4b35      	ldr	r3, [pc, #212]	; (11c38 <bt_att_recv+0x150>)
   11b62:	617b      	str	r3, [r7, #20]
   11b64:	2302      	movs	r3, #2
   11b66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11b6a:	613b      	str	r3, [r7, #16]
   11b6c:	f107 0210 	add.w	r2, r7, #16
   11b70:	e7ca      	b.n	11b08 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11b72:	3301      	adds	r3, #1
   11b74:	2b0e      	cmp	r3, #14
   11b76:	d1df      	bne.n	11b38 <bt_att_recv+0x50>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   11b78:	466c      	mov	r4, sp
   11b7a:	b088      	sub	sp, #32
   11b7c:	466a      	mov	r2, sp
   11b7e:	4b2f      	ldr	r3, [pc, #188]	; (11c3c <bt_att_recv+0x154>)
   11b80:	482b      	ldr	r0, [pc, #172]	; (11c30 <bt_att_recv+0x148>)
   11b82:	e9c2 3105 	strd	r3, r1, [r2, #20]
   11b86:	2303      	movs	r3, #3
   11b88:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11b8c:	f842 3f10 	str.w	r3, [r2, #16]!
   11b90:	f00b fd18 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   11b94:	7829      	ldrb	r1, [r5, #0]
   11b96:	46a5      	mov	sp, r4
   11b98:	4608      	mov	r0, r1
   11b9a:	f7ff fbcf 	bl	1133c <att_op_get_type>
   11b9e:	2800      	cmp	r0, #0
   11ba0:	d0b5      	beq.n	11b0e <bt_att_recv+0x26>
   11ba2:	2805      	cmp	r0, #5
   11ba4:	d0b3      	beq.n	11b0e <bt_att_recv+0x26>
	if (!req) {
   11ba6:	2900      	cmp	r1, #0
   11ba8:	d0b1      	beq.n	11b0e <bt_att_recv+0x26>
   11baa:	2306      	movs	r3, #6
   11bac:	2200      	movs	r2, #0
   11bae:	4630      	mov	r0, r6
   11bb0:	f00b ff56 	bl	1da60 <send_err_rsp.part.0>
   11bb4:	e7ab      	b.n	11b0e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   11bb6:	f1b9 0f05 	cmp.w	r9, #5
   11bba:	d107      	bne.n	11bcc <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   11bbc:	2101      	movs	r1, #1
   11bbe:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   11bc2:	f00b fde9 	bl	1d798 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   11bc6:	b108      	cbz	r0, 11bcc <bt_att_recv+0xe4>
			BT_WARN("Ignoring unexpected indication");
   11bc8:	4b1d      	ldr	r3, [pc, #116]	; (11c40 <bt_att_recv+0x158>)
   11bca:	e7ca      	b.n	11b62 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   11bcc:	44d8      	add	r8, fp
   11bce:	89a3      	ldrh	r3, [r4, #12]
   11bd0:	f898 2001 	ldrb.w	r2, [r8, #1]
   11bd4:	429a      	cmp	r2, r3
   11bd6:	d916      	bls.n	11c06 <bt_att_recv+0x11e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   11bd8:	46e9      	mov	r9, sp
   11bda:	b088      	sub	sp, #32
   11bdc:	466a      	mov	r2, sp
   11bde:	7829      	ldrb	r1, [r5, #0]
   11be0:	2404      	movs	r4, #4
   11be2:	4818      	ldr	r0, [pc, #96]	; (11c44 <bt_att_recv+0x15c>)
   11be4:	61d1      	str	r1, [r2, #28]
   11be6:	e9c2 0305 	strd	r0, r3, [r2, #20]
   11bea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11bee:	4810      	ldr	r0, [pc, #64]	; (11c30 <bt_att_recv+0x148>)
   11bf0:	f842 4f10 	str.w	r4, [r2, #16]!
   11bf4:	f00b fce6 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   11bf8:	f898 3002 	ldrb.w	r3, [r8, #2]
   11bfc:	46cd      	mov	sp, r9
   11bfe:	2b01      	cmp	r3, #1
   11c00:	d185      	bne.n	11b0e <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   11c02:	4623      	mov	r3, r4
   11c04:	e00c      	b.n	11c20 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   11c06:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11c0a:	4621      	mov	r1, r4
   11c0c:	4630      	mov	r0, r6
   11c0e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   11c10:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   11c14:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   11c16:	f47f af7a 	bne.w	11b0e <bt_att_recv+0x26>
   11c1a:	2800      	cmp	r0, #0
   11c1c:	f43f af77 	beq.w	11b0e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   11c20:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   11c22:	2900      	cmp	r1, #0
   11c24:	f43f af73 	beq.w	11b0e <bt_att_recv+0x26>
   11c28:	e7c0      	b.n	11bac <bt_att_recv+0xc4>
   11c2a:	bf00      	nop
   11c2c:	00022876 	.word	0x00022876
   11c30:	0001f8b0 	.word	0x0001f8b0
   11c34:	0001fe0c 	.word	0x0001fe0c
   11c38:	000228ab 	.word	0x000228ab
   11c3c:	00022891 	.word	0x00022891
   11c40:	000228c7 	.word	0x000228c7
   11c44:	000228e6 	.word	0x000228e6

00011c48 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c4a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c4c:	6803      	ldr	r3, [r0, #0]
   11c4e:	460d      	mov	r5, r1
   11c50:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c52:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c54:	bf18      	it	ne
   11c56:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c58:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c5a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c5c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c5e:	f00c f9b4 	bl	1dfca <bt_gatt_change_aware>
   11c62:	b948      	cbnz	r0, 11c78 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11c64:	2105      	movs	r1, #5
   11c66:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11c6a:	f00b fd95 	bl	1d798 <atomic_test_and_set_bit>
   11c6e:	2800      	cmp	r0, #0
   11c70:	d048      	beq.n	11d04 <att_write_rsp.constprop.0+0xbc>
			return 0;
   11c72:	2000      	movs	r0, #0
}
   11c74:	b007      	add	sp, #28
   11c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   11c78:	2e00      	cmp	r6, #0
   11c7a:	d045      	beq.n	11d08 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   11c7c:	2218      	movs	r2, #24
   11c7e:	2100      	movs	r1, #0
   11c80:	4668      	mov	r0, sp
   11c82:	f00b f873 	bl	1cd6c <memset>
	if (rsp) {
   11c86:	bb67      	cbnz	r7, 11ce2 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   11c88:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c8a:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   11c8c:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c8e:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   11c90:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   11c92:	2300      	movs	r3, #0
   11c94:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   11c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c9a:	4a1c      	ldr	r2, [pc, #112]	; (11d0c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   11c9c:	9303      	str	r3, [sp, #12]
	data.len = len;
   11c9e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   11ca2:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   11ca6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11caa:	2301      	movs	r3, #1
   11cac:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11cb0:	466b      	mov	r3, sp
   11cb2:	f00b fbed 	bl	1d490 <bt_gatt_foreach_attr>
	if (data.err) {
   11cb6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11cba:	b1e3      	cbz	r3, 11cf6 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   11cbc:	2f00      	cmp	r7, #0
   11cbe:	d0d8      	beq.n	11c72 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11cc0:	9b01      	ldr	r3, [sp, #4]
   11cc2:	6958      	ldr	r0, [r3, #20]
   11cc4:	f7ff fb80 	bl	113c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   11cc8:	9801      	ldr	r0, [sp, #4]
   11cca:	f001 febd 	bl	13a48 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   11cce:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   11cd2:	2d00      	cmp	r5, #0
   11cd4:	d0cd      	beq.n	11c72 <att_write_rsp.constprop.0+0x2a>
   11cd6:	4632      	mov	r2, r6
   11cd8:	4629      	mov	r1, r5
   11cda:	4620      	mov	r0, r4
   11cdc:	f00b fec0 	bl	1da60 <send_err_rsp.part.0>
   11ce0:	e7c7      	b.n	11c72 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   11ce2:	2200      	movs	r2, #0
   11ce4:	4639      	mov	r1, r7
   11ce6:	4620      	mov	r0, r4
   11ce8:	f7ff fe94 	bl	11a14 <bt_att_chan_create_pdu>
   11cec:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   11cee:	2800      	cmp	r0, #0
   11cf0:	d1ca      	bne.n	11c88 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   11cf2:	200e      	movs	r0, #14
   11cf4:	e7be      	b.n	11c74 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   11cf6:	9901      	ldr	r1, [sp, #4]
   11cf8:	2900      	cmp	r1, #0
   11cfa:	d0ba      	beq.n	11c72 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   11cfc:	4620      	mov	r0, r4
   11cfe:	f00b fc97 	bl	1d630 <bt_att_chan_send_rsp>
   11d02:	e7b6      	b.n	11c72 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11d04:	2012      	movs	r0, #18
   11d06:	e7b5      	b.n	11c74 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11d08:	2001      	movs	r0, #1
   11d0a:	e7b3      	b.n	11c74 <att_write_rsp.constprop.0+0x2c>
   11d0c:	0001d42f 	.word	0x0001d42f

00011d10 <bt_att_create_pdu>:
{
   11d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d12:	af00      	add	r7, sp, #0
   11d14:	460e      	mov	r6, r1
   11d16:	4615      	mov	r5, r2
	att = att_get(conn);
   11d18:	f7ff fcec 	bl	116f4 <att_get>
	if (!att) {
   11d1c:	b1e0      	cbz	r0, 11d58 <bt_att_create_pdu+0x48>
	return list->head;
   11d1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d20:	4618      	mov	r0, r3
   11d22:	b11b      	cbz	r3, 11d2c <bt_att_create_pdu+0x1c>
	return node->next;
   11d24:	f850 39f0 	ldr.w	r3, [r0], #-240
   11d28:	b103      	cbz	r3, 11d2c <bt_att_create_pdu+0x1c>
   11d2a:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11d2c:	1c6c      	adds	r4, r5, #1
   11d2e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d30:	b118      	cbz	r0, 11d3a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11d32:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   11d34:	42a1      	cmp	r1, r4
   11d36:	d219      	bcs.n	11d6c <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d38:	b983      	cbnz	r3, 11d5c <bt_att_create_pdu+0x4c>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   11d3a:	466d      	mov	r5, sp
   11d3c:	b088      	sub	sp, #32
   11d3e:	466a      	mov	r2, sp
   11d40:	4b0e      	ldr	r3, [pc, #56]	; (11d7c <bt_att_create_pdu+0x6c>)
   11d42:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11d46:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11d4a:	2303      	movs	r3, #3
   11d4c:	480c      	ldr	r0, [pc, #48]	; (11d80 <bt_att_create_pdu+0x70>)
   11d4e:	f842 3f10 	str.w	r3, [r2, #16]!
   11d52:	f00b fc37 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
   11d56:	46ad      	mov	sp, r5
		return NULL;
   11d58:	2000      	movs	r0, #0
   11d5a:	e00b      	b.n	11d74 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d5c:	4618      	mov	r0, r3
   11d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   11d62:	b14b      	cbz	r3, 11d78 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11d64:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d66:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11d68:	428a      	cmp	r2, r1
   11d6a:	d8f7      	bhi.n	11d5c <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   11d6c:	462a      	mov	r2, r5
   11d6e:	4631      	mov	r1, r6
   11d70:	f7ff fe50 	bl	11a14 <bt_att_chan_create_pdu>
}
   11d74:	46bd      	mov	sp, r7
   11d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11d78:	4614      	mov	r4, r2
   11d7a:	e7da      	b.n	11d32 <bt_att_create_pdu+0x22>
   11d7c:	00022905 	.word	0x00022905
   11d80:	0001f8b0 	.word	0x0001f8b0

00011d84 <att_read_group_req>:
{
   11d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11d88:	898e      	ldrh	r6, [r1, #12]
{
   11d8a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11d8c:	3e04      	subs	r6, #4
   11d8e:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   11d90:	2e02      	cmp	r6, #2
{
   11d92:	4608      	mov	r0, r1
   11d94:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11d96:	d001      	beq.n	11d9c <att_read_group_req+0x18>
   11d98:	2e10      	cmp	r6, #16
   11d9a:	d16a      	bne.n	11e72 <att_read_group_req+0xee>
   11d9c:	2104      	movs	r1, #4
   11d9e:	3008      	adds	r0, #8
   11da0:	f001 ff56 	bl	13c50 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11da4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   11da8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11daa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11dac:	1d01      	adds	r1, r0, #4
   11dae:	4632      	mov	r2, r6
   11db0:	4640      	mov	r0, r8
   11db2:	f00b f815 	bl	1cde0 <bt_uuid_create>
   11db6:	2800      	cmp	r0, #0
   11db8:	d05d      	beq.n	11e76 <att_read_group_req+0xf2>
	if (!start || !end) {
   11dba:	2d00      	cmp	r5, #0
   11dbc:	d03a      	beq.n	11e34 <att_read_group_req+0xb0>
   11dbe:	2600      	movs	r6, #0
   11dc0:	2f00      	cmp	r7, #0
   11dc2:	d036      	beq.n	11e32 <att_read_group_req+0xae>
	if (start > end) {
   11dc4:	42bd      	cmp	r5, r7
   11dc6:	d835      	bhi.n	11e34 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11dc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11dcc:	4640      	mov	r0, r8
   11dce:	a901      	add	r1, sp, #4
   11dd0:	f88d 6004 	strb.w	r6, [sp, #4]
   11dd4:	f8ad 3006 	strh.w	r3, [sp, #6]
   11dd8:	f00a ffd4 	bl	1cd84 <bt_uuid_cmp>
   11ddc:	bb70      	cbnz	r0, 11e3c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   11dde:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   11de0:	2214      	movs	r2, #20
   11de2:	2100      	movs	r1, #0
   11de4:	a807      	add	r0, sp, #28
   11de6:	f00a ffc1 	bl	1cd6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   11dea:	2201      	movs	r2, #1
   11dec:	2111      	movs	r1, #17
   11dee:	4630      	mov	r0, r6
   11df0:	f7ff ff8e 	bl	11d10 <bt_att_create_pdu>
   11df4:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   11df6:	2800      	cmp	r0, #0
   11df8:	d03d      	beq.n	11e76 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   11dfa:	2101      	movs	r1, #1
   11dfc:	3008      	adds	r0, #8
	data.uuid = uuid;
   11dfe:	e9cd 4807 	strd	r4, r8, [sp, #28]
   11e02:	f001 ff43 	bl	13c8c <net_buf_simple_add>
	data.rsp->len = 0U;
   11e06:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11e08:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11e0a:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   11e0c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11e0e:	4a1b      	ldr	r2, [pc, #108]	; (11e7c <att_read_group_req+0xf8>)
	data.group = NULL;
   11e10:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11e12:	4628      	mov	r0, r5
   11e14:	ab07      	add	r3, sp, #28
   11e16:	f00b fb3b 	bl	1d490 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   11e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11e1c:	781b      	ldrb	r3, [r3, #0]
   11e1e:	bb1b      	cbnz	r3, 11e68 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e22:	6958      	ldr	r0, [r3, #20]
   11e24:	f7ff fad0 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   11e28:	9809      	ldr	r0, [sp, #36]	; 0x24
   11e2a:	f001 fe0d 	bl	13a48 <net_buf_unref>
	if (!req) {
   11e2e:	230a      	movs	r3, #10
   11e30:	e001      	b.n	11e36 <att_read_group_req+0xb2>
			*err = 0U;
   11e32:	463d      	mov	r5, r7
	if (!req) {
   11e34:	2301      	movs	r3, #1
   11e36:	462a      	mov	r2, r5
   11e38:	2110      	movs	r1, #16
   11e3a:	e00e      	b.n	11e5a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   11e3c:	f642 0301 	movw	r3, #10241	; 0x2801
   11e40:	4640      	mov	r0, r8
   11e42:	a907      	add	r1, sp, #28
   11e44:	f88d 601c 	strb.w	r6, [sp, #28]
   11e48:	f8ad 301e 	strh.w	r3, [sp, #30]
   11e4c:	f00a ff9a 	bl	1cd84 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11e50:	2800      	cmp	r0, #0
   11e52:	d0c4      	beq.n	11dde <att_read_group_req+0x5a>
	if (!req) {
   11e54:	2310      	movs	r3, #16
   11e56:	462a      	mov	r2, r5
   11e58:	4619      	mov	r1, r3
   11e5a:	4620      	mov	r0, r4
   11e5c:	f00b fe00 	bl	1da60 <send_err_rsp.part.0>
		return 0;
   11e60:	2000      	movs	r0, #0
}
   11e62:	b00c      	add	sp, #48	; 0x30
   11e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   11e68:	4620      	mov	r0, r4
   11e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
   11e6c:	f00b fbe0 	bl	1d630 <bt_att_chan_send_rsp>
	return 0;
   11e70:	e7f6      	b.n	11e60 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   11e72:	2004      	movs	r0, #4
   11e74:	e7f5      	b.n	11e62 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   11e76:	200e      	movs	r0, #14
   11e78:	e7f3      	b.n	11e62 <att_read_group_req+0xde>
   11e7a:	bf00      	nop
   11e7c:	000117b9 	.word	0x000117b9

00011e80 <att_read_mult_vl_req>:
{
   11e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11e84:	6846      	ldr	r6, [r0, #4]
{
   11e86:	4604      	mov	r4, r0
   11e88:	460d      	mov	r5, r1
   11e8a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   11e8c:	2101      	movs	r1, #1
   11e8e:	4630      	mov	r0, r6
   11e90:	f00c f89b 	bl	1dfca <bt_gatt_change_aware>
   11e94:	b950      	cbnz	r0, 11eac <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11e96:	2105      	movs	r1, #5
   11e98:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11e9c:	f00b fc7c 	bl	1d798 <atomic_test_and_set_bit>
   11ea0:	2800      	cmp	r0, #0
   11ea2:	d13b      	bne.n	11f1c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11ea4:	2012      	movs	r0, #18
}
   11ea6:	b005      	add	sp, #20
   11ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   11eac:	2210      	movs	r2, #16
   11eae:	2100      	movs	r1, #0
   11eb0:	4668      	mov	r0, sp
   11eb2:	f00a ff5b 	bl	1cd6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   11eb6:	2200      	movs	r2, #0
   11eb8:	2121      	movs	r1, #33	; 0x21
   11eba:	4630      	mov	r0, r6
   11ebc:	f7ff ff28 	bl	11d10 <bt_att_create_pdu>
   11ec0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11ec2:	b368      	cbz	r0, 11f20 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11ec4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   11ec8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 11f24 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   11ecc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   11ece:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   11ed2:	89ab      	ldrh	r3, [r5, #12]
   11ed4:	2b01      	cmp	r3, #1
   11ed6:	d804      	bhi.n	11ee2 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   11ed8:	4620      	mov	r0, r4
   11eda:	9902      	ldr	r1, [sp, #8]
   11edc:	f00b fba8 	bl	1d630 <bt_att_chan_send_rsp>
	return 0;
   11ee0:	e01c      	b.n	11f1c <att_read_mult_vl_req+0x9c>
   11ee2:	4638      	mov	r0, r7
   11ee4:	f00c f8e5 	bl	1e0b2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   11ee8:	466b      	mov	r3, sp
   11eea:	464a      	mov	r2, r9
   11eec:	4601      	mov	r1, r0
   11eee:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11ef0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   11ef4:	f00b facc 	bl	1d490 <bt_gatt_foreach_attr>
		if (data.err) {
   11ef8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11efc:	2b00      	cmp	r3, #0
   11efe:	d0e8      	beq.n	11ed2 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11f00:	9b02      	ldr	r3, [sp, #8]
   11f02:	6958      	ldr	r0, [r3, #20]
   11f04:	f7ff fa60 	bl	113c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   11f08:	9802      	ldr	r0, [sp, #8]
   11f0a:	f001 fd9d 	bl	13a48 <net_buf_unref>
	if (!req) {
   11f0e:	4632      	mov	r2, r6
   11f10:	2120      	movs	r1, #32
   11f12:	4620      	mov	r0, r4
   11f14:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11f18:	f00b fda2 	bl	1da60 <send_err_rsp.part.0>
			return 0;
   11f1c:	2000      	movs	r0, #0
   11f1e:	e7c2      	b.n	11ea6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   11f20:	200e      	movs	r0, #14
   11f22:	e7c0      	b.n	11ea6 <att_read_mult_vl_req+0x26>
   11f24:	0001d801 	.word	0x0001d801

00011f28 <att_read_mult_req>:
{
   11f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11f2c:	6846      	ldr	r6, [r0, #4]
{
   11f2e:	4604      	mov	r4, r0
   11f30:	460d      	mov	r5, r1
   11f32:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   11f34:	2101      	movs	r1, #1
   11f36:	4630      	mov	r0, r6
   11f38:	f00c f847 	bl	1dfca <bt_gatt_change_aware>
   11f3c:	b950      	cbnz	r0, 11f54 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11f3e:	2105      	movs	r1, #5
   11f40:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11f44:	f00b fc28 	bl	1d798 <atomic_test_and_set_bit>
   11f48:	2800      	cmp	r0, #0
   11f4a:	d13b      	bne.n	11fc4 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11f4c:	2012      	movs	r0, #18
}
   11f4e:	b005      	add	sp, #20
   11f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   11f54:	2210      	movs	r2, #16
   11f56:	2100      	movs	r1, #0
   11f58:	4668      	mov	r0, sp
   11f5a:	f00a ff07 	bl	1cd6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   11f5e:	2200      	movs	r2, #0
   11f60:	210f      	movs	r1, #15
   11f62:	4630      	mov	r0, r6
   11f64:	f7ff fed4 	bl	11d10 <bt_att_create_pdu>
   11f68:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11f6a:	b368      	cbz	r0, 11fc8 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f6c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f70:	f8df 9058 	ldr.w	r9, [pc, #88]	; 11fcc <att_read_mult_req+0xa4>
	data.chan = chan;
   11f74:	9400      	str	r4, [sp, #0]
   11f76:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   11f7a:	89ab      	ldrh	r3, [r5, #12]
   11f7c:	2b01      	cmp	r3, #1
   11f7e:	d804      	bhi.n	11f8a <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   11f80:	4620      	mov	r0, r4
   11f82:	9902      	ldr	r1, [sp, #8]
   11f84:	f00b fb54 	bl	1d630 <bt_att_chan_send_rsp>
	return 0;
   11f88:	e01c      	b.n	11fc4 <att_read_mult_req+0x9c>
   11f8a:	4638      	mov	r0, r7
   11f8c:	f00c f891 	bl	1e0b2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f90:	466b      	mov	r3, sp
   11f92:	464a      	mov	r2, r9
   11f94:	4601      	mov	r1, r0
   11f96:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f98:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f9c:	f00b fa78 	bl	1d490 <bt_gatt_foreach_attr>
		if (data.err) {
   11fa0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11fa4:	2b00      	cmp	r3, #0
   11fa6:	d0e8      	beq.n	11f7a <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11fa8:	9b02      	ldr	r3, [sp, #8]
   11faa:	6958      	ldr	r0, [r3, #20]
   11fac:	f7ff fa0c 	bl	113c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   11fb0:	9802      	ldr	r0, [sp, #8]
   11fb2:	f001 fd49 	bl	13a48 <net_buf_unref>
	if (!req) {
   11fb6:	4632      	mov	r2, r6
   11fb8:	210e      	movs	r1, #14
   11fba:	4620      	mov	r0, r4
   11fbc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11fc0:	f00b fd4e 	bl	1da60 <send_err_rsp.part.0>
			return 0;
   11fc4:	2000      	movs	r0, #0
   11fc6:	e7c2      	b.n	11f4e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   11fc8:	200e      	movs	r0, #14
   11fca:	e7c0      	b.n	11f4e <att_read_mult_req+0x26>
   11fcc:	0001d7bb 	.word	0x0001d7bb

00011fd0 <att_read_rsp>:
{
   11fd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11fd4:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   11fd8:	4604      	mov	r4, r0
   11fda:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   11fdc:	4640      	mov	r0, r8
   11fde:	2101      	movs	r1, #1
{
   11fe0:	4617      	mov	r7, r2
   11fe2:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   11fe4:	f00b fff1 	bl	1dfca <bt_gatt_change_aware>
   11fe8:	b948      	cbnz	r0, 11ffe <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11fea:	2105      	movs	r1, #5
   11fec:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11ff0:	f00b fbd2 	bl	1d798 <atomic_test_and_set_bit>
   11ff4:	bb78      	cbnz	r0, 12056 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11ff6:	2012      	movs	r0, #18
}
   11ff8:	b004      	add	sp, #16
   11ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   11ffe:	b38d      	cbz	r5, 12064 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   12000:	2210      	movs	r2, #16
   12002:	2100      	movs	r1, #0
   12004:	4668      	mov	r0, sp
   12006:	f00a feb1 	bl	1cd6c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1200a:	2200      	movs	r2, #0
   1200c:	4639      	mov	r1, r7
   1200e:	4640      	mov	r0, r8
   12010:	f7ff fe7e 	bl	11d10 <bt_att_create_pdu>
   12014:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12016:	b338      	cbz	r0, 12068 <att_read_rsp+0x98>
	data.offset = offset;
   12018:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1201c:	4629      	mov	r1, r5
	data.offset = offset;
   1201e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12022:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12024:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12026:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1202a:	4a10      	ldr	r2, [pc, #64]	; (1206c <att_read_rsp+0x9c>)
   1202c:	466b      	mov	r3, sp
	data.chan = chan;
   1202e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12030:	f00b fa2e 	bl	1d490 <bt_gatt_foreach_attr>
	if (data.err) {
   12034:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12038:	b17b      	cbz	r3, 1205a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1203a:	9b02      	ldr	r3, [sp, #8]
   1203c:	6958      	ldr	r0, [r3, #20]
   1203e:	f7ff f9c3 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12042:	9802      	ldr	r0, [sp, #8]
   12044:	f001 fd00 	bl	13a48 <net_buf_unref>
	if (!req) {
   12048:	462a      	mov	r2, r5
   1204a:	4631      	mov	r1, r6
   1204c:	4620      	mov	r0, r4
   1204e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12052:	f00b fd05 	bl	1da60 <send_err_rsp.part.0>
			return 0;
   12056:	2000      	movs	r0, #0
   12058:	e7ce      	b.n	11ff8 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1205a:	4620      	mov	r0, r4
   1205c:	9902      	ldr	r1, [sp, #8]
   1205e:	f00b fae7 	bl	1d630 <bt_att_chan_send_rsp>
	return 0;
   12062:	e7f8      	b.n	12056 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   12064:	2001      	movs	r0, #1
   12066:	e7c7      	b.n	11ff8 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   12068:	200e      	movs	r0, #14
   1206a:	e7c5      	b.n	11ff8 <att_read_rsp+0x28>
   1206c:	0001d7bb 	.word	0x0001d7bb

00012070 <att_read_type_req>:
{
   12070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12074:	898d      	ldrh	r5, [r1, #12]
{
   12076:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12078:	3d04      	subs	r5, #4
   1207a:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1207c:	2d02      	cmp	r5, #2
{
   1207e:	4608      	mov	r0, r1
   12080:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12082:	d001      	beq.n	12088 <att_read_type_req+0x18>
   12084:	2d10      	cmp	r5, #16
   12086:	d150      	bne.n	1212a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12088:	2104      	movs	r1, #4
   1208a:	3008      	adds	r0, #8
   1208c:	f001 fde0 	bl	13c50 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12090:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12094:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12096:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12098:	1d01      	adds	r1, r0, #4
   1209a:	462a      	mov	r2, r5
   1209c:	4640      	mov	r0, r8
   1209e:	f00a fe9f 	bl	1cde0 <bt_uuid_create>
   120a2:	b188      	cbz	r0, 120c8 <att_read_type_req+0x58>
	if (!start || !end) {
   120a4:	b19e      	cbz	r6, 120ce <att_read_type_req+0x5e>
   120a6:	b18f      	cbz	r7, 120cc <att_read_type_req+0x5c>
	if (start > end) {
   120a8:	42b7      	cmp	r7, r6
   120aa:	d310      	bcc.n	120ce <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   120ac:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   120ae:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   120b0:	2100      	movs	r1, #0
   120b2:	eb0d 0002 	add.w	r0, sp, r2
   120b6:	f00a fe59 	bl	1cd6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   120ba:	2201      	movs	r2, #1
   120bc:	2109      	movs	r1, #9
   120be:	4628      	mov	r0, r5
   120c0:	f7ff fe26 	bl	11d10 <bt_att_create_pdu>
   120c4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   120c6:	b960      	cbnz	r0, 120e2 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   120c8:	200e      	movs	r0, #14
   120ca:	e007      	b.n	120dc <att_read_type_req+0x6c>
			*err = 0U;
   120cc:	463e      	mov	r6, r7
	if (!req) {
   120ce:	2301      	movs	r3, #1
   120d0:	4632      	mov	r2, r6
   120d2:	2108      	movs	r1, #8
   120d4:	4620      	mov	r0, r4
   120d6:	f00b fcc3 	bl	1da60 <send_err_rsp.part.0>
		return 0;
   120da:	2000      	movs	r0, #0
}
   120dc:	b00c      	add	sp, #48	; 0x30
   120de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   120e2:	2101      	movs	r1, #1
   120e4:	3008      	adds	r0, #8
	data.uuid = uuid;
   120e6:	e9cd 4806 	strd	r4, r8, [sp, #24]
   120ea:	f001 fdcf 	bl	13c8c <net_buf_simple_add>
	data.rsp->len = 0U;
   120ee:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   120f0:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   120f2:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   120f4:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   120f6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   120f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   120fc:	4630      	mov	r0, r6
   120fe:	ab06      	add	r3, sp, #24
   12100:	4a0b      	ldr	r2, [pc, #44]	; (12130 <att_read_type_req+0xc0>)
   12102:	f00b f9c5 	bl	1d490 <bt_gatt_foreach_attr>
	if (data.err) {
   12106:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1210a:	b14b      	cbz	r3, 12120 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1210c:	9b08      	ldr	r3, [sp, #32]
   1210e:	6958      	ldr	r0, [r3, #20]
   12110:	f7ff f95a 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12114:	9808      	ldr	r0, [sp, #32]
   12116:	f001 fc97 	bl	13a48 <net_buf_unref>
	if (!req) {
   1211a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1211e:	e7d7      	b.n	120d0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   12120:	4620      	mov	r0, r4
   12122:	9908      	ldr	r1, [sp, #32]
   12124:	f00b fa84 	bl	1d630 <bt_att_chan_send_rsp>
	return 0;
   12128:	e7d7      	b.n	120da <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1212a:	2004      	movs	r0, #4
   1212c:	e7d6      	b.n	120dc <att_read_type_req+0x6c>
   1212e:	bf00      	nop
   12130:	00011865 	.word	0x00011865

00012134 <att_find_type_req>:
{
   12134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12138:	460f      	mov	r7, r1
   1213a:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1213c:	2106      	movs	r1, #6
   1213e:	b086      	sub	sp, #24
   12140:	f107 0008 	add.w	r0, r7, #8
   12144:	f001 fd84 	bl	13c50 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12148:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1214a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1214e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   12150:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   12154:	b1c5      	cbz	r5, 12188 <att_find_type_req+0x54>
   12156:	2300      	movs	r3, #0
   12158:	f1b8 0f00 	cmp.w	r8, #0
   1215c:	d013      	beq.n	12186 <att_find_type_req+0x52>
	if (start > end) {
   1215e:	4545      	cmp	r5, r8
   12160:	d812      	bhi.n	12188 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12162:	f88d 3000 	strb.w	r3, [sp]
   12166:	f88d 3004 	strb.w	r3, [sp, #4]
   1216a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1216e:	4668      	mov	r0, sp
   12170:	a901      	add	r1, sp, #4
   12172:	f8ad 2002 	strh.w	r2, [sp, #2]
   12176:	f8ad 3006 	strh.w	r3, [sp, #6]
   1217a:	f00a fe03 	bl	1cd84 <bt_uuid_cmp>
   1217e:	4606      	mov	r6, r0
   12180:	b160      	cbz	r0, 1219c <att_find_type_req+0x68>
	if (!req) {
   12182:	230a      	movs	r3, #10
   12184:	e001      	b.n	1218a <att_find_type_req+0x56>
			*err = 0U;
   12186:	4645      	mov	r5, r8
	if (!req) {
   12188:	2301      	movs	r3, #1
   1218a:	462a      	mov	r2, r5
   1218c:	2106      	movs	r1, #6
   1218e:	4620      	mov	r0, r4
   12190:	f00b fc66 	bl	1da60 <send_err_rsp.part.0>
		return 0;
   12194:	2000      	movs	r0, #0
}
   12196:	b006      	add	sp, #24
   12198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1219c:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   121a0:	4601      	mov	r1, r0
   121a2:	2214      	movs	r2, #20
   121a4:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   121a6:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   121a8:	f00a fde0 	bl	1cd6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   121ac:	4632      	mov	r2, r6
   121ae:	2107      	movs	r1, #7
   121b0:	4650      	mov	r0, sl
   121b2:	f7ff fdad 	bl	11d10 <bt_att_create_pdu>
   121b6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   121b8:	b1f8      	cbz	r0, 121fa <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   121ba:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   121bc:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   121be:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   121c2:	4628      	mov	r0, r5
   121c4:	ab01      	add	r3, sp, #4
   121c6:	4a0e      	ldr	r2, [pc, #56]	; (12200 <att_find_type_req+0xcc>)
	data.value = value;
   121c8:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   121cc:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   121ce:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   121d2:	f00b f95d 	bl	1d490 <bt_gatt_foreach_attr>
	if (data.err) {
   121d6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   121da:	b14b      	cbz	r3, 121f0 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   121dc:	9b02      	ldr	r3, [sp, #8]
   121de:	6958      	ldr	r0, [r3, #20]
   121e0:	f7ff f8f2 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   121e4:	9802      	ldr	r0, [sp, #8]
   121e6:	f001 fc2f 	bl	13a48 <net_buf_unref>
	if (!req) {
   121ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   121ee:	e7cc      	b.n	1218a <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   121f0:	4620      	mov	r0, r4
   121f2:	9902      	ldr	r1, [sp, #8]
   121f4:	f00b fa1c 	bl	1d630 <bt_att_chan_send_rsp>
	return 0;
   121f8:	e7cc      	b.n	12194 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   121fa:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   121fc:	e7cb      	b.n	12196 <att_find_type_req+0x62>
   121fe:	bf00      	nop
   12200:	00011409 	.word	0x00011409

00012204 <att_find_info_req>:
{
   12204:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12206:	688b      	ldr	r3, [r1, #8]
{
   12208:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1220a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1220c:	885e      	ldrh	r6, [r3, #2]
{
   1220e:	b085      	sub	sp, #20
	if (!start || !end) {
   12210:	b195      	cbz	r5, 12238 <att_find_info_req+0x34>
   12212:	b186      	cbz	r6, 12236 <att_find_info_req+0x32>
	if (start > end) {
   12214:	42b5      	cmp	r5, r6
   12216:	d80f      	bhi.n	12238 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12218:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1221a:	2210      	movs	r2, #16
   1221c:	2100      	movs	r1, #0
   1221e:	4668      	mov	r0, sp
   12220:	f00a fda4 	bl	1cd6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12224:	2200      	movs	r2, #0
   12226:	2105      	movs	r1, #5
   12228:	4638      	mov	r0, r7
   1222a:	f7ff fd71 	bl	11d10 <bt_att_create_pdu>
   1222e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12230:	b958      	cbnz	r0, 1224a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12232:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12234:	e007      	b.n	12246 <att_find_info_req+0x42>
			*err = 0U;
   12236:	4635      	mov	r5, r6
	if (!req) {
   12238:	2301      	movs	r3, #1
   1223a:	462a      	mov	r2, r5
   1223c:	2104      	movs	r1, #4
   1223e:	4620      	mov	r0, r4
   12240:	f00b fc0e 	bl	1da60 <send_err_rsp.part.0>
		return 0;
   12244:	2000      	movs	r0, #0
}
   12246:	b005      	add	sp, #20
   12248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1224a:	466b      	mov	r3, sp
   1224c:	4631      	mov	r1, r6
   1224e:	4628      	mov	r0, r5
   12250:	4a09      	ldr	r2, [pc, #36]	; (12278 <att_find_info_req+0x74>)
	data.chan = chan;
   12252:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12254:	f00b f91c 	bl	1d490 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12258:	9b02      	ldr	r3, [sp, #8]
   1225a:	b943      	cbnz	r3, 1226e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1225c:	9b01      	ldr	r3, [sp, #4]
   1225e:	6958      	ldr	r0, [r3, #20]
   12260:	f7ff f8b2 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12264:	9801      	ldr	r0, [sp, #4]
   12266:	f001 fbef 	bl	13a48 <net_buf_unref>
	if (!req) {
   1226a:	230a      	movs	r3, #10
   1226c:	e7e5      	b.n	1223a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1226e:	4620      	mov	r0, r4
   12270:	9901      	ldr	r1, [sp, #4]
   12272:	f00b f9dd 	bl	1d630 <bt_att_chan_send_rsp>
	return 0;
   12276:	e7e5      	b.n	12244 <att_find_info_req+0x40>
   12278:	0001d4a7 	.word	0x0001d4a7

0001227c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1227c:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1227e:	4c0b      	ldr	r4, [pc, #44]	; (122ac <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   12280:	4d0b      	ldr	r5, [pc, #44]	; (122b0 <bt_att_init+0x34>)
   12282:	4620      	mov	r0, r4
   12284:	f00c ff11 	bl	1f0aa <z_impl_k_queue_init>
   12288:	4629      	mov	r1, r5
   1228a:	4620      	mov	r0, r4
   1228c:	f00c ff1a 	bl	1f0c4 <k_queue_append>
   12290:	4620      	mov	r0, r4
   12292:	f105 0114 	add.w	r1, r5, #20
   12296:	f00c ff15 	bl	1f0c4 <k_queue_append>
   1229a:	4620      	mov	r0, r4
   1229c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   122a0:	f00c ff10 	bl	1f0c4 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   122a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   122a8:	f000 bb6c 	b.w	12984 <bt_gatt_init>
   122ac:	20008594 	.word	0x20008594
   122b0:	20009858 	.word	0x20009858

000122b4 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   122b4:	2300      	movs	r3, #0
{
   122b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   122b8:	4605      	mov	r5, r0
   122ba:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   122bc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   122be:	f008 f9b7 	bl	1a630 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   122c2:	4b0b      	ldr	r3, [pc, #44]	; (122f0 <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   122c4:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   122c6:	681b      	ldr	r3, [r3, #0]
   122c8:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   122ca:	bf04      	itt	eq
   122cc:	2500      	moveq	r5, #0
   122ce:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   122d0:	462a      	mov	r2, r5
   122d2:	4623      	mov	r3, r4
   122d4:	4807      	ldr	r0, [pc, #28]	; (122f4 <bt_att_req_alloc+0x40>)
   122d6:	f005 fd83 	bl	17de0 <k_mem_slab_alloc>
   122da:	4601      	mov	r1, r0
   122dc:	b930      	cbnz	r0, 122ec <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   122de:	2210      	movs	r2, #16
   122e0:	9801      	ldr	r0, [sp, #4]
   122e2:	f00a fd43 	bl	1cd6c <memset>

	return req;
   122e6:	9801      	ldr	r0, [sp, #4]
}
   122e8:	b003      	add	sp, #12
   122ea:	bd30      	pop	{r4, r5, pc}
		return NULL;
   122ec:	2000      	movs	r0, #0
   122ee:	e7fb      	b.n	122e8 <bt_att_req_alloc+0x34>
   122f0:	20009894 	.word	0x20009894
   122f4:	20008500 	.word	0x20008500

000122f8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   122f8:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   122fa:	6883      	ldr	r3, [r0, #8]
{
   122fc:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   122fe:	b14b      	cbz	r3, 12314 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   12300:	6958      	ldr	r0, [r3, #20]
   12302:	f7ff f861 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(req->buf);
   12306:	9b01      	ldr	r3, [sp, #4]
   12308:	6898      	ldr	r0, [r3, #8]
   1230a:	f001 fb9d 	bl	13a48 <net_buf_unref>
		req->buf = NULL;
   1230e:	2200      	movs	r2, #0
   12310:	9b01      	ldr	r3, [sp, #4]
   12312:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   12314:	4803      	ldr	r0, [pc, #12]	; (12324 <bt_att_req_free+0x2c>)
   12316:	a901      	add	r1, sp, #4
   12318:	f005 fdcc 	bl	17eb4 <k_mem_slab_free>
}
   1231c:	b003      	add	sp, #12
   1231e:	f85d fb04 	ldr.w	pc, [sp], #4
   12322:	bf00      	nop
   12324:	20008500 	.word	0x20008500

00012328 <att_handle_rsp>:
{
   12328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1232c:	4604      	mov	r4, r0
   1232e:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   12330:	30c0      	adds	r0, #192	; 0xc0
{
   12332:	460e      	mov	r6, r1
   12334:	4617      	mov	r7, r2
   12336:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   12338:	f006 fff8 	bl	1932c <k_work_cancel_delayable>
	if (!chan->req) {
   1233c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   12340:	b980      	cbnz	r0, 12364 <att_handle_rsp+0x3c>
		BT_WARN("No pending ATT request");
   12342:	4b1a      	ldr	r3, [pc, #104]	; (123ac <att_handle_rsp+0x84>)
   12344:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12348:	9307      	str	r3, [sp, #28]
   1234a:	2302      	movs	r3, #2
   1234c:	4818      	ldr	r0, [pc, #96]	; (123b0 <att_handle_rsp+0x88>)
   1234e:	aa06      	add	r2, sp, #24
   12350:	9306      	str	r3, [sp, #24]
   12352:	f00b f937 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   12356:	6820      	ldr	r0, [r4, #0]
   12358:	f00b faba 	bl	1d8d0 <att_req_send_process>
}
   1235c:	2000      	movs	r0, #0
   1235e:	b008      	add	sp, #32
   12360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12364:	4b13      	ldr	r3, [pc, #76]	; (123b4 <att_handle_rsp+0x8c>)
   12366:	f04f 0800 	mov.w	r8, #0
   1236a:	4298      	cmp	r0, r3
   1236c:	d102      	bne.n	12374 <att_handle_rsp+0x4c>
		chan->req = NULL;
   1236e:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   12372:	e7f0      	b.n	12356 <att_handle_rsp+0x2e>
	func = chan->req->func;
   12374:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   12378:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1237c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   12380:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   12384:	f7ff ffb8 	bl	122f8 <bt_att_req_free>
	att_req_send_process(chan->att);
   12388:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1238a:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   1238e:	f00b fa9f 	bl	1d8d0 <att_req_send_process>
	if (func) {
   12392:	f1b9 0f00 	cmp.w	r9, #0
   12396:	d0e1      	beq.n	1235c <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   12398:	6820      	ldr	r0, [r4, #0]
   1239a:	f8cd a000 	str.w	sl, [sp]
   1239e:	463b      	mov	r3, r7
   123a0:	4632      	mov	r2, r6
   123a2:	4629      	mov	r1, r5
   123a4:	6800      	ldr	r0, [r0, #0]
   123a6:	47c8      	blx	r9
   123a8:	e7d8      	b.n	1235c <att_handle_rsp+0x34>
   123aa:	bf00      	nop
   123ac:	00022920 	.word	0x00022920
   123b0:	0001f8b0 	.word	0x0001f8b0
   123b4:	20009898 	.word	0x20009898

000123b8 <bt_att_disconnected>:
{
   123b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   123bc:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   123c0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   123c2:	2e00      	cmp	r6, #0
   123c4:	d056      	beq.n	12474 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   123c6:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   123ca:	f106 0028 	add.w	r0, r6, #40	; 0x28
   123ce:	f00b f9c8 	bl	1d762 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   123d2:	1f27      	subs	r7, r4, #4
   123d4:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   123d8:	2200      	movs	r2, #0
   123da:	2300      	movs	r3, #0
   123dc:	4640      	mov	r0, r8
   123de:	f001 f9c1 	bl	13764 <net_buf_get>
   123e2:	4605      	mov	r5, r0
   123e4:	bb28      	cbnz	r0, 12432 <bt_att_disconnected+0x7a>
	if (chan->req) {
   123e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   123ea:	b12b      	cbz	r3, 123f8 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   123ec:	4602      	mov	r2, r0
   123ee:	4601      	mov	r1, r0
   123f0:	230e      	movs	r3, #14
   123f2:	4638      	mov	r0, r7
   123f4:	f7ff ff98 	bl	12328 <att_handle_rsp>
	chan->att = NULL;
   123f8:	2300      	movs	r3, #0
   123fa:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   123fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12400:	2b00      	cmp	r3, #0
   12402:	d137      	bne.n	12474 <bt_att_disconnected+0xbc>
	att_reset(att);
   12404:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12406:	9803      	ldr	r0, [sp, #12]
   12408:	2200      	movs	r2, #0
   1240a:	2300      	movs	r3, #0
   1240c:	300c      	adds	r0, #12
   1240e:	f001 f9a9 	bl	13764 <net_buf_get>
   12412:	4605      	mov	r5, r0
   12414:	b9a0      	cbnz	r0, 12440 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   12416:	9803      	ldr	r0, [sp, #12]
	return list->head;
   12418:	6845      	ldr	r5, [r0, #4]
   1241a:	b9c5      	cbnz	r5, 1244e <bt_att_disconnected+0x96>
	att->conn = NULL;
   1241c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1241e:	a903      	add	r1, sp, #12
   12420:	4816      	ldr	r0, [pc, #88]	; (1247c <bt_att_disconnected+0xc4>)
   12422:	f005 fd47 	bl	17eb4 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   12426:	6820      	ldr	r0, [r4, #0]
}
   12428:	b004      	add	sp, #16
   1242a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1242e:	f001 b827 	b.w	13480 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   12432:	6968      	ldr	r0, [r5, #20]
   12434:	f7fe ffc8 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(buf);
   12438:	4628      	mov	r0, r5
   1243a:	f001 fb05 	bl	13a48 <net_buf_unref>
   1243e:	e7cb      	b.n	123d8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   12440:	6968      	ldr	r0, [r5, #20]
   12442:	f7fe ffc1 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(buf);
   12446:	4628      	mov	r0, r5
   12448:	f001 fafe 	bl	13a48 <net_buf_unref>
   1244c:	e7db      	b.n	12406 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1244e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   12450:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12452:	4295      	cmp	r5, r2
	list->head = node;
   12454:	6043      	str	r3, [r0, #4]
	list->tail = node;
   12456:	bf08      	it	eq
   12458:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1245a:	686e      	ldr	r6, [r5, #4]
   1245c:	b136      	cbz	r6, 1246c <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1245e:	68eb      	ldr	r3, [r5, #12]
   12460:	210e      	movs	r1, #14
   12462:	9300      	str	r3, [sp, #0]
   12464:	2300      	movs	r3, #0
   12466:	6800      	ldr	r0, [r0, #0]
   12468:	461a      	mov	r2, r3
   1246a:	47b0      	blx	r6
		bt_att_req_free(req);
   1246c:	4628      	mov	r0, r5
   1246e:	f7ff ff43 	bl	122f8 <bt_att_req_free>
   12472:	e7d0      	b.n	12416 <bt_att_disconnected+0x5e>
}
   12474:	b004      	add	sp, #16
   12476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1247a:	bf00      	nop
   1247c:	200084c0 	.word	0x200084c0

00012480 <att_timeout>:
{
   12480:	b510      	push	{r4, lr}
   12482:	4604      	mov	r4, r0
   12484:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   12486:	4b08      	ldr	r3, [pc, #32]	; (124a8 <att_timeout+0x28>)
   12488:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1248c:	9305      	str	r3, [sp, #20]
   1248e:	2302      	movs	r3, #2
   12490:	4806      	ldr	r0, [pc, #24]	; (124ac <att_timeout+0x2c>)
   12492:	aa04      	add	r2, sp, #16
   12494:	9304      	str	r3, [sp, #16]
   12496:	f00b f895 	bl	1d5c4 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1249a:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   1249e:	b006      	add	sp, #24
   124a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   124a4:	f7ff bf88 	b.w	123b8 <bt_att_disconnected>
   124a8:	00022937 	.word	0x00022937
   124ac:	0001f8b0 	.word	0x0001f8b0

000124b0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   124b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124b2:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   124b4:	b958      	cbnz	r0, 124ce <bt_att_send+0x1e>
   124b6:	4929      	ldr	r1, [pc, #164]	; (1255c <bt_att_send+0xac>)
   124b8:	f640 63a8 	movw	r3, #3752	; 0xea8
   124bc:	4a28      	ldr	r2, [pc, #160]	; (12560 <bt_att_send+0xb0>)
   124be:	4829      	ldr	r0, [pc, #164]	; (12564 <bt_att_send+0xb4>)
   124c0:	f009 fc3a 	bl	1bd38 <assert_print>
   124c4:	f640 61a8 	movw	r1, #3752	; 0xea8
	__ASSERT_NO_MSG(buf);
   124c8:	4825      	ldr	r0, [pc, #148]	; (12560 <bt_att_send+0xb0>)
   124ca:	f009 fc2e 	bl	1bd2a <assert_post_action>
   124ce:	b949      	cbnz	r1, 124e4 <bt_att_send+0x34>
   124d0:	4925      	ldr	r1, [pc, #148]	; (12568 <bt_att_send+0xb8>)
   124d2:	f640 63a9 	movw	r3, #3753	; 0xea9
   124d6:	4a22      	ldr	r2, [pc, #136]	; (12560 <bt_att_send+0xb0>)
   124d8:	4822      	ldr	r0, [pc, #136]	; (12564 <bt_att_send+0xb4>)
   124da:	f009 fc2d 	bl	1bd38 <assert_print>
   124de:	f640 61a9 	movw	r1, #3753	; 0xea9
   124e2:	e7f1      	b.n	124c8 <bt_att_send+0x18>

	att = att_get(conn);
   124e4:	f7ff f906 	bl	116f4 <att_get>
	if (!att) {
   124e8:	4605      	mov	r5, r0
   124ea:	b940      	cbnz	r0, 124fe <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   124ec:	6960      	ldr	r0, [r4, #20]
   124ee:	f7fe ff6b 	bl	113c8 <tx_meta_data_free>
		net_buf_unref(buf);
   124f2:	4620      	mov	r0, r4
   124f4:	f001 faa8 	bl	13a48 <net_buf_unref>
		return -ENOTCONN;
   124f8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   124fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   124fe:	f100 060c 	add.w	r6, r0, #12
   12502:	4621      	mov	r1, r4
   12504:	4630      	mov	r0, r6
   12506:	f001 fa6f 	bl	139e8 <net_buf_put>
	return list->head;
   1250a:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1250c:	b14d      	cbz	r5, 12522 <bt_att_send+0x72>
	return node->next;
   1250e:	f855 49f0 	ldr.w	r4, [r5], #-240
   12512:	b104      	cbz	r4, 12516 <bt_att_send+0x66>
   12514:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   12516:	4631      	mov	r1, r6
   12518:	4628      	mov	r0, r5
   1251a:	f00b f870 	bl	1d5fe <process_queue>
		if (!err) {
   1251e:	4603      	mov	r3, r0
   12520:	b980      	cbnz	r0, 12544 <bt_att_send+0x94>
	return 0;
   12522:	2000      	movs	r0, #0
   12524:	e7ea      	b.n	124fc <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   12526:	2103      	movs	r1, #3
   12528:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1252c:	f00a ff79 	bl	1d422 <atomic_test_bit>
   12530:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   12532:	f105 0098 	add.w	r0, r5, #152	; 0x98
   12536:	f00a ff74 	bl	1d422 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1253a:	4287      	cmp	r7, r0
   1253c:	f06f 0301 	mvn.w	r3, #1
   12540:	d107      	bne.n	12552 <bt_att_send+0xa2>
   12542:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12544:	2c00      	cmp	r4, #0
   12546:	d0ec      	beq.n	12522 <bt_att_send+0x72>
   12548:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   1254c:	b922      	cbnz	r2, 12558 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   1254e:	3302      	adds	r3, #2
   12550:	d0e9      	beq.n	12526 <bt_att_send+0x76>
{
   12552:	4625      	mov	r5, r4
   12554:	4614      	mov	r4, r2
   12556:	e7de      	b.n	12516 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12558:	3af0      	subs	r2, #240	; 0xf0
   1255a:	e7f8      	b.n	1254e <bt_att_send+0x9e>
   1255c:	00021ddb 	.word	0x00021ddb
   12560:	000226c0 	.word	0x000226c0
   12564:	000205a4 	.word	0x000205a4
   12568:	000219e0 	.word	0x000219e0

0001256c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1256c:	b510      	push	{r4, lr}
   1256e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   12570:	b958      	cbnz	r0, 1258a <bt_att_req_send+0x1e>
   12572:	4915      	ldr	r1, [pc, #84]	; (125c8 <bt_att_req_send+0x5c>)
   12574:	f640 63be 	movw	r3, #3774	; 0xebe
   12578:	4a14      	ldr	r2, [pc, #80]	; (125cc <bt_att_req_send+0x60>)
   1257a:	4815      	ldr	r0, [pc, #84]	; (125d0 <bt_att_req_send+0x64>)
   1257c:	f009 fbdc 	bl	1bd38 <assert_print>
   12580:	f640 61be 	movw	r1, #3774	; 0xebe
	__ASSERT_NO_MSG(req);
   12584:	4811      	ldr	r0, [pc, #68]	; (125cc <bt_att_req_send+0x60>)
   12586:	f009 fbd0 	bl	1bd2a <assert_post_action>
   1258a:	b949      	cbnz	r1, 125a0 <bt_att_req_send+0x34>
   1258c:	4911      	ldr	r1, [pc, #68]	; (125d4 <bt_att_req_send+0x68>)
   1258e:	f640 63bf 	movw	r3, #3775	; 0xebf
   12592:	4a0e      	ldr	r2, [pc, #56]	; (125cc <bt_att_req_send+0x60>)
   12594:	480e      	ldr	r0, [pc, #56]	; (125d0 <bt_att_req_send+0x64>)
   12596:	f009 fbcf 	bl	1bd38 <assert_print>
   1259a:	f640 61bf 	movw	r1, #3775	; 0xebf
   1259e:	e7f1      	b.n	12584 <bt_att_req_send+0x18>

	att = att_get(conn);
   125a0:	f7ff f8a8 	bl	116f4 <att_get>
	if (!att) {
   125a4:	b160      	cbz	r0, 125c0 <bt_att_req_send+0x54>
	parent->next = child;
   125a6:	2300      	movs	r3, #0
   125a8:	6023      	str	r3, [r4, #0]
	return list->tail;
   125aa:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   125ac:	b92b      	cbnz	r3, 125ba <bt_att_req_send+0x4e>
	list->head = node;
   125ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   125b2:	f00b f98d 	bl	1d8d0 <att_req_send_process>

	return 0;
   125b6:	2000      	movs	r0, #0
}
   125b8:	bd10      	pop	{r4, pc}
	parent->next = child;
   125ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   125bc:	6084      	str	r4, [r0, #8]
}
   125be:	e7f8      	b.n	125b2 <bt_att_req_send+0x46>
		return -ENOTCONN;
   125c0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   125c4:	e7f8      	b.n	125b8 <bt_att_req_send+0x4c>
   125c6:	bf00      	nop
   125c8:	00021ddb 	.word	0x00021ddb
   125cc:	000226c0 	.word	0x000226c0
   125d0:	000205a4 	.word	0x000205a4
   125d4:	0002276f 	.word	0x0002276f

000125d8 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   125d8:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   125da:	b930      	cbnz	r0, 125ea <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   125dc:	4907      	ldr	r1, [pc, #28]	; (125fc <find_cf_cfg+0x24>)
   125de:	4808      	ldr	r0, [pc, #32]	; (12600 <find_cf_cfg+0x28>)
   125e0:	f00b fb6c 	bl	1dcbc <bt_addr_le_eq>
   125e4:	b138      	cbz	r0, 125f6 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   125e6:	4807      	ldr	r0, [pc, #28]	; (12604 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   125e8:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   125ea:	4a05      	ldr	r2, [pc, #20]	; (12600 <find_cf_cfg+0x28>)
   125ec:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   125f0:	f00a fe38 	bl	1d264 <bt_conn_is_peer_addr_le>
   125f4:	e7f6      	b.n	125e4 <find_cf_cfg+0xc>
	return NULL;
   125f6:	2000      	movs	r0, #0
   125f8:	e7f6      	b.n	125e8 <find_cf_cfg+0x10>
   125fa:	bf00      	nop
   125fc:	000218c6 	.word	0x000218c6
   12600:	200098c1 	.word	0x200098c1
   12604:	200098c0 	.word	0x200098c0

00012608 <find_sc_cfg>:
{
   12608:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1260a:	4c06      	ldr	r4, [pc, #24]	; (12624 <find_sc_cfg+0x1c>)
   1260c:	7823      	ldrb	r3, [r4, #0]
   1260e:	4283      	cmp	r3, r0
   12610:	d103      	bne.n	1261a <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   12612:	1c60      	adds	r0, r4, #1
   12614:	f00b fb52 	bl	1dcbc <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   12618:	b908      	cbnz	r0, 1261e <find_sc_cfg+0x16>
	return NULL;
   1261a:	2000      	movs	r0, #0
}
   1261c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1261e:	4620      	mov	r0, r4
   12620:	e7fc      	b.n	1261c <find_sc_cfg+0x14>
   12622:	bf00      	nop
   12624:	20009ba6 	.word	0x20009ba6

00012628 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   12628:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1262a:	1c4a      	adds	r2, r1, #1
{
   1262c:	460c      	mov	r4, r1
		if (conn) {
   1262e:	b138      	cbz	r0, 12640 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   12630:	7809      	ldrb	r1, [r1, #0]
   12632:	f00a fe17 	bl	1d264 <bt_conn_is_peer_addr_le>
   12636:	b108      	cbz	r0, 1263c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   12638:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   1263a:	bd10      	pop	{r4, pc}
	return NULL;
   1263c:	2000      	movs	r0, #0
   1263e:	e7fc      	b.n	1263a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   12640:	4610      	mov	r0, r2
   12642:	4902      	ldr	r1, [pc, #8]	; (1264c <find_ccc_cfg+0x24>)
   12644:	f00b fb3a 	bl	1dcbc <bt_addr_le_eq>
   12648:	e7f5      	b.n	12636 <find_ccc_cfg+0xe>
   1264a:	bf00      	nop
   1264c:	000218c6 	.word	0x000218c6

00012650 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   12650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12654:	b087      	sub	sp, #28
   12656:	461e      	mov	r6, r3
   12658:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1265c:	4681      	mov	r9, r0
   1265e:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   12660:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   12664:	2b00      	cmp	r3, #0
   12666:	d14b      	bne.n	12700 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   12668:	1e73      	subs	r3, r6, #1
   1266a:	2b01      	cmp	r3, #1
   1266c:	d84b      	bhi.n	12706 <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1266e:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   12670:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   12672:	7815      	ldrb	r5, [r2, #0]
   12674:	bf18      	it	ne
   12676:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   12678:	f7ff ffd6 	bl	12628 <find_ccc_cfg>
	if (!cfg) {
   1267c:	4604      	mov	r4, r0
   1267e:	b9f0      	cbnz	r0, 126be <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   12680:	b91d      	cbnz	r5, 1268a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   12682:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   12684:	b007      	add	sp, #28
   12686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1268a:	4641      	mov	r1, r8
   1268c:	f7ff ffcc 	bl	12628 <find_ccc_cfg>
		if (!cfg) {
   12690:	4604      	mov	r4, r0
   12692:	b960      	cbnz	r0, 126ae <bt_gatt_attr_write_ccc+0x5e>
			BT_WARN("No space to store CCC cfg");
   12694:	4b1d      	ldr	r3, [pc, #116]	; (1270c <bt_gatt_attr_write_ccc+0xbc>)
   12696:	481e      	ldr	r0, [pc, #120]	; (12710 <bt_gatt_attr_write_ccc+0xc0>)
   12698:	9305      	str	r3, [sp, #20]
   1269a:	2302      	movs	r3, #2
   1269c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   126a0:	aa04      	add	r2, sp, #16
   126a2:	9304      	str	r3, [sp, #16]
   126a4:	f00b fb15 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   126a8:	f06f 0010 	mvn.w	r0, #16
   126ac:	e7ea      	b.n	12684 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   126ae:	f109 0190 	add.w	r1, r9, #144	; 0x90
   126b2:	3001      	adds	r0, #1
   126b4:	f00b fb0a 	bl	1dccc <bt_addr_le_copy>
		cfg->id = conn->id;
   126b8:	f899 3008 	ldrb.w	r3, [r9, #8]
   126bc:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   126be:	f8d8 3010 	ldr.w	r3, [r8, #16]
   126c2:	b98b      	cbnz	r3, 126e8 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   126c4:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   126c6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   126ca:	42ab      	cmp	r3, r5
   126cc:	d003      	beq.n	126d6 <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   126ce:	4641      	mov	r1, r8
   126d0:	4638      	mov	r0, r7
   126d2:	f00b fa7f 	bl	1dbd4 <gatt_ccc_changed>
	if (!value) {
   126d6:	2d00      	cmp	r5, #0
   126d8:	d1d3      	bne.n	12682 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   126da:	490e      	ldr	r1, [pc, #56]	; (12714 <bt_gatt_attr_write_ccc+0xc4>)
   126dc:	1c60      	adds	r0, r4, #1
   126de:	f00b faf5 	bl	1dccc <bt_addr_le_copy>
	cfg->id = 0U;
   126e2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   126e4:	8125      	strh	r5, [r4, #8]
}
   126e6:	e7cc      	b.n	12682 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   126e8:	462a      	mov	r2, r5
   126ea:	4639      	mov	r1, r7
   126ec:	4648      	mov	r0, r9
   126ee:	4798      	blx	r3
		if (write < 0) {
   126f0:	2800      	cmp	r0, #0
   126f2:	dbc7      	blt.n	12684 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   126f4:	3801      	subs	r0, #1
   126f6:	2801      	cmp	r0, #1
   126f8:	d9e4      	bls.n	126c4 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   126fa:	f06f 000d 	mvn.w	r0, #13
   126fe:	e7c1      	b.n	12684 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12700:	f06f 0006 	mvn.w	r0, #6
   12704:	e7be      	b.n	12684 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12706:	f06f 000c 	mvn.w	r0, #12
   1270a:	e7bb      	b.n	12684 <bt_gatt_attr_write_ccc+0x34>
   1270c:	0002294a 	.word	0x0002294a
   12710:	0001f8d0 	.word	0x0001f8d0
   12714:	000218c6 	.word	0x000218c6

00012718 <clear_cf_cfg>:
{
   12718:	b510      	push	{r4, lr}
   1271a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1271c:	4909      	ldr	r1, [pc, #36]	; (12744 <clear_cf_cfg+0x2c>)
   1271e:	3001      	adds	r0, #1
   12720:	f00b fad4 	bl	1dccc <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   12724:	f104 0008 	add.w	r0, r4, #8
   12728:	2201      	movs	r2, #1
   1272a:	2100      	movs	r1, #0
   1272c:	f00a fb1e 	bl	1cd6c <memset>
   12730:	2300      	movs	r3, #0
   12732:	340c      	adds	r4, #12
   12734:	e8d4 2fef 	ldaex	r2, [r4]
   12738:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1273c:	2900      	cmp	r1, #0
   1273e:	d1f9      	bne.n	12734 <clear_cf_cfg+0x1c>
}
   12740:	bd10      	pop	{r4, pc}
   12742:	bf00      	nop
   12744:	000218c6 	.word	0x000218c6

00012748 <sc_save>:
{
   12748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1274c:	b086      	sub	sp, #24
   1274e:	4680      	mov	r8, r0
   12750:	460f      	mov	r7, r1
   12752:	4616      	mov	r6, r2
   12754:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   12756:	f7ff ff57 	bl	12608 <find_sc_cfg>
	if (!cfg) {
   1275a:	4604      	mov	r4, r0
   1275c:	b9b0      	cbnz	r0, 1278c <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1275e:	4912      	ldr	r1, [pc, #72]	; (127a8 <sc_save+0x60>)
   12760:	f7ff ff52 	bl	12608 <find_sc_cfg>
		if (!cfg) {
   12764:	4604      	mov	r4, r0
   12766:	b960      	cbnz	r0, 12782 <sc_save+0x3a>
			BT_ERR("unable to save SC: no cfg left");
   12768:	4b10      	ldr	r3, [pc, #64]	; (127ac <sc_save+0x64>)
   1276a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1276e:	9305      	str	r3, [sp, #20]
   12770:	2302      	movs	r3, #2
   12772:	480f      	ldr	r0, [pc, #60]	; (127b0 <sc_save+0x68>)
   12774:	aa04      	add	r2, sp, #16
   12776:	9304      	str	r3, [sp, #16]
   12778:	f00b faab 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
}
   1277c:	b006      	add	sp, #24
   1277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   12782:	4639      	mov	r1, r7
		cfg->id = id;
   12784:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   12788:	f00b faa0 	bl	1dccc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1278c:	8922      	ldrh	r2, [r4, #8]
   1278e:	8963      	ldrh	r3, [r4, #10]
   12790:	b91a      	cbnz	r2, 1279a <sc_save+0x52>
   12792:	b92b      	cbnz	r3, 127a0 <sc_save+0x58>
		cfg->data.start = start;
   12794:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   12796:	8165      	strh	r5, [r4, #10]
   12798:	e7f0      	b.n	1277c <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   1279a:	4296      	cmp	r6, r2
		*start = new_start;
   1279c:	bf38      	it	cc
   1279e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   127a0:	429d      	cmp	r5, r3
   127a2:	d9eb      	bls.n	1277c <sc_save+0x34>
   127a4:	e7f7      	b.n	12796 <sc_save+0x4e>
   127a6:	bf00      	nop
   127a8:	000218c6 	.word	0x000218c6
   127ac:	00022964 	.word	0x00022964
   127b0:	0001f8d0 	.word	0x0001f8d0

000127b4 <cf_write>:
{
   127b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127b8:	b086      	sub	sp, #24
   127ba:	461f      	mov	r7, r3
   127bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   127c0:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   127c2:	2b01      	cmp	r3, #1
{
   127c4:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   127c6:	d83c      	bhi.n	12842 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   127c8:	443b      	add	r3, r7
   127ca:	2b01      	cmp	r3, #1
   127cc:	463d      	mov	r5, r7
   127ce:	dc3b      	bgt.n	12848 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   127d0:	f7ff ff02 	bl	125d8 <find_cf_cfg>
	if (!cfg) {
   127d4:	4604      	mov	r4, r0
   127d6:	b998      	cbnz	r0, 12800 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   127d8:	f7ff fefe 	bl	125d8 <find_cf_cfg>
	if (!cfg) {
   127dc:	4604      	mov	r4, r0
   127de:	b978      	cbnz	r0, 12800 <cf_write+0x4c>
		BT_WARN("No space to store Client Supported Features");
   127e0:	4b1c      	ldr	r3, [pc, #112]	; (12854 <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   127e2:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   127e6:	9305      	str	r3, [sp, #20]
   127e8:	2302      	movs	r3, #2
   127ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   127ee:	481a      	ldr	r0, [pc, #104]	; (12858 <cf_write+0xa4>)
   127f0:	aa04      	add	r2, sp, #16
   127f2:	9304      	str	r3, [sp, #16]
   127f4:	f00b fa6d 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
}
   127f8:	4628      	mov	r0, r5
   127fa:	b006      	add	sp, #24
   127fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   12800:	b197      	cbz	r7, 12828 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   12802:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   12804:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   12806:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1280a:	fa21 f003 	lsr.w	r0, r1, r3
   1280e:	07c7      	lsls	r7, r0, #31
   12810:	d503      	bpl.n	1281a <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   12812:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   12816:	07c0      	lsls	r0, r0, #31
   12818:	d519      	bpl.n	1284e <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1281a:	3301      	adds	r3, #1
   1281c:	2b03      	cmp	r3, #3
   1281e:	d1f4      	bne.n	1280a <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   12820:	f002 0207 	and.w	r2, r2, #7
   12824:	4311      	orrs	r1, r2
   12826:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12828:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1282c:	1c60      	adds	r0, r4, #1
   1282e:	f00b fa4d 	bl	1dccc <bt_addr_le_copy>
	cfg->id = conn->id;
   12832:	4620      	mov	r0, r4
   12834:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   12836:	2100      	movs	r1, #0
	cfg->id = conn->id;
   12838:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1283c:	f00b fa4c 	bl	1dcd8 <atomic_set_bit>
	return len;
   12840:	e7da      	b.n	127f8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12842:	f06f 0506 	mvn.w	r5, #6
   12846:	e7d7      	b.n	127f8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12848:	f06f 050c 	mvn.w	r5, #12
   1284c:	e7d4      	b.n	127f8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1284e:	f06f 0512 	mvn.w	r5, #18
   12852:	e7d1      	b.n	127f8 <cf_write+0x44>
   12854:	00022983 	.word	0x00022983
   12858:	0001f8d0 	.word	0x0001f8d0

0001285c <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1285c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12860:	4b23      	ldr	r3, [pc, #140]	; (128f0 <disconnected_cb+0x94>)
{
   12862:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12864:	6882      	ldr	r2, [r0, #8]
{
   12866:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12868:	429a      	cmp	r2, r3
   1286a:	d102      	bne.n	12872 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1286c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1286e:	8963      	ldrh	r3, [r4, #10]
   12870:	bb33      	cbnz	r3, 128c0 <disconnected_cb+0x64>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   12872:	2001      	movs	r0, #1
   12874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   12878:	f7fd ffa2 	bl	107c0 <bt_conn_unref>
		ccc->value = 0U;
   1287c:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1287e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   12880:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   12882:	2b00      	cmp	r3, #0
   12884:	d0f5      	beq.n	12872 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   12886:	4638      	mov	r0, r7
   12888:	4798      	blx	r3
   1288a:	e7f2      	b.n	12872 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1288c:	f105 0890 	add.w	r8, r5, #144	; 0x90
   12890:	4641      	mov	r1, r8
   12892:	7a28      	ldrb	r0, [r5, #8]
   12894:	f00a fb9b 	bl	1cfce <bt_addr_le_is_bonded>
   12898:	b968      	cbnz	r0, 128b6 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1289a:	4b16      	ldr	r3, [pc, #88]	; (128f4 <disconnected_cb+0x98>)
   1289c:	429c      	cmp	r4, r3
   1289e:	d102      	bne.n	128a6 <disconnected_cb+0x4a>
					sc_clear(conn);
   128a0:	4628      	mov	r0, r5
   128a2:	f00b fa43 	bl	1dd2c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   128a6:	4630      	mov	r0, r6
   128a8:	4913      	ldr	r1, [pc, #76]	; (128f8 <disconnected_cb+0x9c>)
   128aa:	f00b fa0f 	bl	1dccc <bt_addr_le_copy>
	cfg->id = 0U;
   128ae:	2300      	movs	r3, #0
   128b0:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   128b2:	8123      	strh	r3, [r4, #8]
}
   128b4:	e7e2      	b.n	1287c <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   128b6:	4641      	mov	r1, r8
   128b8:	4630      	mov	r0, r6
   128ba:	f00b fa07 	bl	1dccc <bt_addr_le_copy>
   128be:	e7dd      	b.n	1287c <disconnected_cb+0x20>
		if (!cfg->value) {
   128c0:	8923      	ldrh	r3, [r4, #8]
   128c2:	2b00      	cmp	r3, #0
   128c4:	d0da      	beq.n	1287c <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   128c6:	4626      	mov	r6, r4
   128c8:	f816 1b01 	ldrb.w	r1, [r6], #1
   128cc:	4628      	mov	r0, r5
   128ce:	4632      	mov	r2, r6
   128d0:	f00a fcc8 	bl	1d264 <bt_conn_is_peer_addr_le>
   128d4:	2800      	cmp	r0, #0
   128d6:	d1d9      	bne.n	1288c <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   128d8:	4631      	mov	r1, r6
   128da:	7820      	ldrb	r0, [r4, #0]
   128dc:	f7fe f9cc 	bl	10c78 <bt_conn_lookup_addr_le>
			if (tmp) {
   128e0:	2800      	cmp	r0, #0
   128e2:	d0cb      	beq.n	1287c <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   128e4:	7a83      	ldrb	r3, [r0, #10]
   128e6:	2b07      	cmp	r3, #7
   128e8:	d1c6      	bne.n	12878 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   128ea:	f7fd ff69 	bl	107c0 <bt_conn_unref>
	if (!value_used) {
   128ee:	e7c0      	b.n	12872 <disconnected_cb+0x16>
   128f0:	00012651 	.word	0x00012651
   128f4:	20008258 	.word	0x20008258
   128f8:	000218c6 	.word	0x000218c6

000128fc <read_ppcp>:
{
   128fc:	b513      	push	{r0, r1, r4, lr}
   128fe:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12900:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   12904:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12908:	4c09      	ldr	r4, [pc, #36]	; (12930 <read_ppcp+0x34>)
	if (offset > value_len) {
   1290a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1290c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   12910:	d80b      	bhi.n	1292a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   12912:	f1c1 0408 	rsb	r4, r1, #8
   12916:	429c      	cmp	r4, r3
   12918:	bfa8      	it	ge
   1291a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1291c:	4469      	add	r1, sp
   1291e:	4622      	mov	r2, r4
   12920:	f00a fa19 	bl	1cd56 <memcpy>
}
   12924:	4620      	mov	r0, r4
   12926:	b002      	add	sp, #8
   12928:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1292a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1292e:	e7f9      	b.n	12924 <read_ppcp+0x28>
   12930:	00280018 	.word	0x00280018

00012934 <sc_indicate_rsp>:
{
   12934:	b510      	push	{r4, lr}
   12936:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12938:	4811      	ldr	r0, [pc, #68]	; (12980 <sc_indicate_rsp+0x4c>)
   1293a:	e8d0 3fef 	ldaex	r3, [r0]
   1293e:	f023 0302 	bic.w	r3, r3, #2
   12942:	e8c0 3fe2 	stlex	r2, r3, [r0]
   12946:	2a00      	cmp	r2, #0
   12948:	d1f7      	bne.n	1293a <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1294a:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1294e:	07da      	lsls	r2, r3, #31
   12950:	d504      	bpl.n	1295c <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   12952:	2200      	movs	r2, #0
   12954:	2300      	movs	r3, #0
   12956:	3830      	subs	r0, #48	; 0x30
   12958:	f006 fce2 	bl	19320 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1295c:	4620      	mov	r0, r4
   1295e:	f00b f90c 	bl	1db7a <bt_att_fixed_chan_only>
   12962:	b160      	cbz	r0, 1297e <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   12964:	4620      	mov	r0, r4
   12966:	f7ff fe37 	bl	125d8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1296a:	b140      	cbz	r0, 1297e <sc_indicate_rsp+0x4a>
   1296c:	7a03      	ldrb	r3, [r0, #8]
   1296e:	07db      	lsls	r3, r3, #31
   12970:	d505      	bpl.n	1297e <sc_indicate_rsp+0x4a>
}
   12972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   12976:	2100      	movs	r1, #0
   12978:	300c      	adds	r0, #12
   1297a:	f00b b9ad 	b.w	1dcd8 <atomic_set_bit>
}
   1297e:	bd10      	pop	{r4, pc}
   12980:	20009478 	.word	0x20009478

00012984 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12984:	2201      	movs	r2, #1
{
   12986:	b510      	push	{r4, lr}
   12988:	4b24      	ldr	r3, [pc, #144]	; (12a1c <bt_gatt_init+0x98>)
   1298a:	e8d3 1fef 	ldaex	r1, [r3]
   1298e:	2900      	cmp	r1, #0
   12990:	d103      	bne.n	1299a <bt_gatt_init+0x16>
   12992:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12996:	2800      	cmp	r0, #0
   12998:	d1f7      	bne.n	1298a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1299a:	d13e      	bne.n	12a1a <bt_gatt_init+0x96>
   1299c:	4b20      	ldr	r3, [pc, #128]	; (12a20 <bt_gatt_init+0x9c>)
   1299e:	e8d3 1fef 	ldaex	r1, [r3]
   129a2:	2900      	cmp	r1, #0
   129a4:	d103      	bne.n	129ae <bt_gatt_init+0x2a>
   129a6:	e8c3 2fe0 	stlex	r0, r2, [r3]
   129aa:	2800      	cmp	r0, #0
   129ac:	d1f7      	bne.n	1299e <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   129ae:	d120      	bne.n	129f2 <bt_gatt_init+0x6e>
   129b0:	2000      	movs	r0, #0
   129b2:	491c      	ldr	r1, [pc, #112]	; (12a24 <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   129b4:	4a1c      	ldr	r2, [pc, #112]	; (12a28 <bt_gatt_init+0xa4>)
   129b6:	880b      	ldrh	r3, [r1, #0]
   129b8:	4c1c      	ldr	r4, [pc, #112]	; (12a2c <bt_gatt_init+0xa8>)
   129ba:	42a2      	cmp	r2, r4
   129bc:	d916      	bls.n	129ec <bt_gatt_init+0x68>
   129be:	b100      	cbz	r0, 129c2 <bt_gatt_init+0x3e>
   129c0:	800b      	strh	r3, [r1, #0]
   129c2:	491b      	ldr	r1, [pc, #108]	; (12a30 <bt_gatt_init+0xac>)
   129c4:	f240 530e 	movw	r3, #1294	; 0x50e
   129c8:	4a1a      	ldr	r2, [pc, #104]	; (12a34 <bt_gatt_init+0xb0>)
   129ca:	481b      	ldr	r0, [pc, #108]	; (12a38 <bt_gatt_init+0xb4>)
   129cc:	f009 f9b4 	bl	1bd38 <assert_print>
   129d0:	481a      	ldr	r0, [pc, #104]	; (12a3c <bt_gatt_init+0xb8>)
   129d2:	f009 f9b1 	bl	1bd38 <assert_print>
   129d6:	f240 510e 	movw	r1, #1294	; 0x50e
   129da:	4816      	ldr	r0, [pc, #88]	; (12a34 <bt_gatt_init+0xb0>)
   129dc:	f009 f9a5 	bl	1bd2a <assert_post_action>
		last_static_handle += svc->attr_count;
   129e0:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   129e2:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   129e4:	4403      	add	r3, r0
   129e6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   129e8:	2001      	movs	r0, #1
   129ea:	e7e6      	b.n	129ba <bt_gatt_init+0x36>
   129ec:	d3f8      	bcc.n	129e0 <bt_gatt_init+0x5c>
   129ee:	b100      	cbz	r0, 129f2 <bt_gatt_init+0x6e>
   129f0:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   129f2:	2200      	movs	r2, #0
   129f4:	4b12      	ldr	r3, [pc, #72]	; (12a40 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   129f6:	4913      	ldr	r1, [pc, #76]	; (12a44 <bt_gatt_init+0xc0>)
   129f8:	4813      	ldr	r0, [pc, #76]	; (12a48 <bt_gatt_init+0xc4>)
	list->tail = NULL;
   129fa:	e9c3 2200 	strd	r2, r2, [r3]
   129fe:	f006 fb73 	bl	190e8 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   12a02:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12a06:	2300      	movs	r3, #0
   12a08:	480f      	ldr	r0, [pc, #60]	; (12a48 <bt_gatt_init+0xc4>)
   12a0a:	f7fb f909 	bl	dc20 <bt_long_wq_schedule>
}
   12a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   12a12:	490e      	ldr	r1, [pc, #56]	; (12a4c <bt_gatt_init+0xc8>)
   12a14:	480e      	ldr	r0, [pc, #56]	; (12a50 <bt_gatt_init+0xcc>)
   12a16:	f006 bb67 	b.w	190e8 <k_work_init_delayable>
}
   12a1a:	bd10      	pop	{r4, pc}
   12a1c:	200098d4 	.word	0x200098d4
   12a20:	200098d0 	.word	0x200098d0
   12a24:	20009bb2 	.word	0x20009bb2
   12a28:	0001f888 	.word	0x0001f888
   12a2c:	0001f8a0 	.word	0x0001f8a0
   12a30:	000229e6 	.word	0x000229e6
   12a34:	000229af 	.word	0x000229af
   12a38:	000205a4 	.word	0x000205a4
   12a3c:	00020cc7 	.word	0x00020cc7
   12a40:	200098d8 	.word	0x200098d8
   12a44:	0001df75 	.word	0x0001df75
   12a48:	200093d0 	.word	0x200093d0
   12a4c:	000130c9 	.word	0x000130c9
   12a50:	20009448 	.word	0x20009448

00012a54 <bt_gatt_attr_get_handle>:
	if (!attr) {
   12a54:	4603      	mov	r3, r0
{
   12a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   12a5a:	b398      	cbz	r0, 12ac4 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   12a5c:	8a00      	ldrh	r0, [r0, #16]
   12a5e:	bb88      	cbnz	r0, 12ac4 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   12a60:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12a62:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12a66:	4919      	ldr	r1, [pc, #100]	; (12acc <bt_gatt_attr_get_handle+0x78>)
   12a68:	f8df e064 	ldr.w	lr, [pc, #100]	; 12ad0 <bt_gatt_attr_get_handle+0x7c>
   12a6c:	4571      	cmp	r1, lr
   12a6e:	d928      	bls.n	12ac2 <bt_gatt_attr_get_handle+0x6e>
   12a70:	4918      	ldr	r1, [pc, #96]	; (12ad4 <bt_gatt_attr_get_handle+0x80>)
   12a72:	f240 6365 	movw	r3, #1637	; 0x665
   12a76:	4a18      	ldr	r2, [pc, #96]	; (12ad8 <bt_gatt_attr_get_handle+0x84>)
   12a78:	4818      	ldr	r0, [pc, #96]	; (12adc <bt_gatt_attr_get_handle+0x88>)
   12a7a:	f009 f95d 	bl	1bd38 <assert_print>
   12a7e:	4818      	ldr	r0, [pc, #96]	; (12ae0 <bt_gatt_attr_get_handle+0x8c>)
   12a80:	f009 f95a 	bl	1bd38 <assert_print>
   12a84:	f240 6165 	movw	r1, #1637	; 0x665
   12a88:	4813      	ldr	r0, [pc, #76]	; (12ad8 <bt_gatt_attr_get_handle+0x84>)
   12a8a:	f009 f94e 	bl	1bd2a <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12a8e:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   12a92:	42bb      	cmp	r3, r7
   12a94:	d304      	bcc.n	12aa0 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12a96:	fb0c 7206 	mla	r2, ip, r6, r7
   12a9a:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   12a9c:	4293      	cmp	r3, r2
   12a9e:	d90e      	bls.n	12abe <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   12aa0:	4434      	add	r4, r6
   12aa2:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12aa4:	4614      	mov	r4, r2
   12aa6:	3108      	adds	r1, #8
   12aa8:	e7e0      	b.n	12a6c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   12aaa:	fb0c 7805 	mla	r8, ip, r5, r7
   12aae:	4543      	cmp	r3, r8
   12ab0:	d00a      	beq.n	12ac8 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   12ab2:	3501      	adds	r5, #1
   12ab4:	1962      	adds	r2, r4, r5
   12ab6:	42b5      	cmp	r5, r6
   12ab8:	b292      	uxth	r2, r2
   12aba:	d1f6      	bne.n	12aaa <bt_gatt_attr_get_handle+0x56>
   12abc:	e7f2      	b.n	12aa4 <bt_gatt_attr_get_handle+0x50>
   12abe:	2500      	movs	r5, #0
   12ac0:	e7f8      	b.n	12ab4 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12ac2:	d3e4      	bcc.n	12a8e <bt_gatt_attr_get_handle+0x3a>
}
   12ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ac8:	4610      	mov	r0, r2
   12aca:	e7fb      	b.n	12ac4 <bt_gatt_attr_get_handle+0x70>
   12acc:	0001f888 	.word	0x0001f888
   12ad0:	0001f8a0 	.word	0x0001f8a0
   12ad4:	000229df 	.word	0x000229df
   12ad8:	000229af 	.word	0x000229af
   12adc:	000205a4 	.word	0x000205a4
   12ae0:	00020cc7 	.word	0x00020cc7

00012ae4 <bt_gatt_foreach_attr_type>:
{
   12ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae8:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   12aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   12aee:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   12af2:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   12af4:	2d00      	cmp	r5, #0
   12af6:	bf08      	it	eq
   12af8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   12afa:	4b2b      	ldr	r3, [pc, #172]	; (12ba8 <bt_gatt_foreach_attr_type+0xc4>)
{
   12afc:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   12afe:	881b      	ldrh	r3, [r3, #0]
{
   12b00:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   12b02:	4283      	cmp	r3, r0
   12b04:	d232      	bcs.n	12b6c <bt_gatt_foreach_attr_type+0x88>
}
   12b06:	b003      	add	sp, #12
   12b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12b0c:	4640      	mov	r0, r8
   12b0e:	5889      	ldr	r1, [r1, r2]
   12b10:	9301      	str	r3, [sp, #4]
   12b12:	f00a f937 	bl	1cd84 <bt_uuid_cmp>
   12b16:	9b01      	ldr	r3, [sp, #4]
   12b18:	b190      	cbz	r0, 12b40 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12b1a:	3401      	adds	r4, #1
   12b1c:	f10a 0a01 	add.w	sl, sl, #1
   12b20:	b2a4      	uxth	r4, r4
   12b22:	6873      	ldr	r3, [r6, #4]
   12b24:	4553      	cmp	r3, sl
   12b26:	d92c      	bls.n	12b82 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   12b28:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12b2a:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   12b2c:	429c      	cmp	r4, r3
   12b2e:	d8ea      	bhi.n	12b06 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   12b30:	42bc      	cmp	r4, r7
   12b32:	d3f2      	bcc.n	12b1a <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12b34:	fb0b f20a 	mul.w	r2, fp, sl
   12b38:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12b3a:	f1b8 0f00 	cmp.w	r8, #0
   12b3e:	d1e5      	bne.n	12b0c <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   12b40:	f1b9 0f00 	cmp.w	r9, #0
   12b44:	d10b      	bne.n	12b5e <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   12b46:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   12b48:	4618      	mov	r0, r3
	*num_matches -= 1;
   12b4a:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   12b4c:	4621      	mov	r1, r4
   12b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12b50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12b52:	4798      	blx	r3
	if (!*num_matches) {
   12b54:	2d00      	cmp	r5, #0
   12b56:	d0d6      	beq.n	12b06 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12b58:	2800      	cmp	r0, #0
   12b5a:	d1de      	bne.n	12b1a <bt_gatt_foreach_attr_type+0x36>
   12b5c:	e7d3      	b.n	12b06 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   12b5e:	68da      	ldr	r2, [r3, #12]
   12b60:	4591      	cmp	r9, r2
   12b62:	d1da      	bne.n	12b1a <bt_gatt_foreach_attr_type+0x36>
   12b64:	e7ef      	b.n	12b46 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12b66:	f04f 0a00 	mov.w	sl, #0
   12b6a:	e7da      	b.n	12b22 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   12b6c:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12b6e:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12b72:	4e0e      	ldr	r6, [pc, #56]	; (12bac <bt_gatt_foreach_attr_type+0xc8>)
   12b74:	e006      	b.n	12b84 <bt_gatt_foreach_attr_type+0xa0>
   12b76:	d2c6      	bcs.n	12b06 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   12b78:	6873      	ldr	r3, [r6, #4]
   12b7a:	4423      	add	r3, r4
   12b7c:	42bb      	cmp	r3, r7
   12b7e:	d2f2      	bcs.n	12b66 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   12b80:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12b82:	3608      	adds	r6, #8
   12b84:	4b0a      	ldr	r3, [pc, #40]	; (12bb0 <bt_gatt_foreach_attr_type+0xcc>)
   12b86:	429e      	cmp	r6, r3
   12b88:	d9f5      	bls.n	12b76 <bt_gatt_foreach_attr_type+0x92>
   12b8a:	490a      	ldr	r1, [pc, #40]	; (12bb4 <bt_gatt_foreach_attr_type+0xd0>)
   12b8c:	f240 7329 	movw	r3, #1833	; 0x729
   12b90:	4a09      	ldr	r2, [pc, #36]	; (12bb8 <bt_gatt_foreach_attr_type+0xd4>)
   12b92:	480a      	ldr	r0, [pc, #40]	; (12bbc <bt_gatt_foreach_attr_type+0xd8>)
   12b94:	f009 f8d0 	bl	1bd38 <assert_print>
   12b98:	4809      	ldr	r0, [pc, #36]	; (12bc0 <bt_gatt_foreach_attr_type+0xdc>)
   12b9a:	f009 f8cd 	bl	1bd38 <assert_print>
   12b9e:	f240 7129 	movw	r1, #1833	; 0x729
   12ba2:	4805      	ldr	r0, [pc, #20]	; (12bb8 <bt_gatt_foreach_attr_type+0xd4>)
   12ba4:	f009 f8c1 	bl	1bd2a <assert_post_action>
   12ba8:	20009bb2 	.word	0x20009bb2
   12bac:	0001f888 	.word	0x0001f888
   12bb0:	0001f8a0 	.word	0x0001f8a0
   12bb4:	000229df 	.word	0x000229df
   12bb8:	000229af 	.word	0x000229af
   12bbc:	000205a4 	.word	0x000205a4
   12bc0:	00020cc7 	.word	0x00020cc7

00012bc4 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   12bc4:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   12bc6:	b510      	push	{r4, lr}
   12bc8:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12bca:	4669      	mov	r1, sp
   12bcc:	aa22      	add	r2, sp, #136	; 0x88
   12bce:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   12bd0:	e9cd 3300 	strd	r3, r3, [sp]
   12bd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12bd8:	f009 fd34 	bl	1c644 <tc_cmac_setup>
   12bdc:	b958      	cbnz	r0, 12bf6 <db_hash_gen.constprop.0+0x32>
		BT_ERR("Unable to setup AES CMAC");
   12bde:	4b18      	ldr	r3, [pc, #96]	; (12c40 <db_hash_gen.constprop.0+0x7c>)
		BT_ERR("Unable to calculate hash");
   12be0:	9309      	str	r3, [sp, #36]	; 0x24
   12be2:	2302      	movs	r3, #2
   12be4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12be8:	4816      	ldr	r0, [pc, #88]	; (12c44 <db_hash_gen.constprop.0+0x80>)
   12bea:	aa08      	add	r2, sp, #32
   12bec:	9308      	str	r3, [sp, #32]
   12bee:	f00b f870 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
}
   12bf2:	b04e      	add	sp, #312	; 0x138
   12bf4:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   12bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12bfa:	2001      	movs	r0, #1
   12bfc:	4a12      	ldr	r2, [pc, #72]	; (12c48 <db_hash_gen.constprop.0+0x84>)
   12bfe:	ab0a      	add	r3, sp, #40	; 0x28
   12c00:	f00b f9ad 	bl	1df5e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   12c04:	4811      	ldr	r0, [pc, #68]	; (12c4c <db_hash_gen.constprop.0+0x88>)
   12c06:	a90a      	add	r1, sp, #40	; 0x28
   12c08:	f009 fdb1 	bl	1c76e <tc_cmac_final>
   12c0c:	b908      	cbnz	r0, 12c12 <db_hash_gen.constprop.0+0x4e>
		BT_ERR("Unable to calculate hash");
   12c0e:	4b10      	ldr	r3, [pc, #64]	; (12c50 <db_hash_gen.constprop.0+0x8c>)
   12c10:	e7e6      	b.n	12be0 <db_hash_gen.constprop.0+0x1c>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   12c12:	2208      	movs	r2, #8
   12c14:	4b0d      	ldr	r3, [pc, #52]	; (12c4c <db_hash_gen.constprop.0+0x88>)
   12c16:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   12c1a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12c1c:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   12c20:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12c22:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   12c26:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   12c28:	d1f7      	bne.n	12c1a <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c2a:	4b0a      	ldr	r3, [pc, #40]	; (12c54 <db_hash_gen.constprop.0+0x90>)
   12c2c:	e8d3 1fef 	ldaex	r1, [r3]
   12c30:	f041 0104 	orr.w	r1, r1, #4
   12c34:	e8c3 1fe2 	stlex	r2, r1, [r3]
   12c38:	2a00      	cmp	r2, #0
   12c3a:	d0da      	beq.n	12bf2 <db_hash_gen.constprop.0+0x2e>
   12c3c:	e7f6      	b.n	12c2c <db_hash_gen.constprop.0+0x68>
   12c3e:	bf00      	nop
   12c40:	00022a0e 	.word	0x00022a0e
   12c44:	0001f8d0 	.word	0x0001f8d0
   12c48:	0001dc17 	.word	0x0001dc17
   12c4c:	200093c0 	.word	0x200093c0
   12c50:	00022a27 	.word	0x00022a27
   12c54:	20009478 	.word	0x20009478

00012c58 <db_hash_read>:
{
   12c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12c5a:	4919      	ldr	r1, [pc, #100]	; (12cc0 <db_hash_read+0x68>)
{
   12c5c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12c5e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   12c62:	4615      	mov	r5, r2
   12c64:	461f      	mov	r7, r3
   12c66:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12c6a:	f006 fbb9 	bl	193e0 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12c6e:	4b15      	ldr	r3, [pc, #84]	; (12cc4 <db_hash_read+0x6c>)
   12c70:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   12c74:	0759      	lsls	r1, r3, #29
   12c76:	d401      	bmi.n	12c7c <db_hash_read+0x24>
		db_hash_gen(true);
   12c78:	f7ff ffa4 	bl	12bc4 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   12c7c:	4620      	mov	r0, r4
   12c7e:	f7ff fcab 	bl	125d8 <find_cf_cfg>
	if (cfg &&
   12c82:	b150      	cbz	r0, 12c9a <db_hash_read+0x42>
   12c84:	7a03      	ldrb	r3, [r0, #8]
   12c86:	07da      	lsls	r2, r3, #31
   12c88:	d507      	bpl.n	12c9a <db_hash_read+0x42>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   12c8a:	300c      	adds	r0, #12
   12c8c:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   12c90:	07db      	lsls	r3, r3, #31
   12c92:	d402      	bmi.n	12c9a <db_hash_read+0x42>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   12c94:	2101      	movs	r1, #1
   12c96:	f00b f81f 	bl	1dcd8 <atomic_set_bit>
	if (offset > value_len) {
   12c9a:	2e10      	cmp	r6, #16
   12c9c:	d80c      	bhi.n	12cb8 <db_hash_read+0x60>
	len = MIN(buf_len, value_len - offset);
   12c9e:	f1c6 0410 	rsb	r4, r6, #16
   12ca2:	42bc      	cmp	r4, r7
   12ca4:	bfa8      	it	ge
   12ca6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   12ca8:	4907      	ldr	r1, [pc, #28]	; (12cc8 <db_hash_read+0x70>)
   12caa:	4622      	mov	r2, r4
   12cac:	4628      	mov	r0, r5
   12cae:	4431      	add	r1, r6
   12cb0:	f00a f851 	bl	1cd56 <memcpy>
}
   12cb4:	4620      	mov	r0, r4
   12cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12cb8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   12cbc:	e7fa      	b.n	12cb4 <db_hash_read+0x5c>
   12cbe:	bf00      	nop
   12cc0:	20009400 	.word	0x20009400
   12cc4:	20009478 	.word	0x20009478
   12cc8:	200093c0 	.word	0x200093c0

00012ccc <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   12ccc:	2300      	movs	r3, #0
{
   12cce:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   12cd0:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   12cd2:	f7ff febf 	bl	12a54 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   12cd6:	1c41      	adds	r1, r0, #1
   12cd8:	b289      	uxth	r1, r1
   12cda:	4608      	mov	r0, r1
   12cdc:	4a03      	ldr	r2, [pc, #12]	; (12cec <bt_gatt_attr_next+0x20>)
   12cde:	ab01      	add	r3, sp, #4
   12ce0:	f00b f93d 	bl	1df5e <bt_gatt_foreach_attr>
}
   12ce4:	9801      	ldr	r0, [sp, #4]
   12ce6:	b003      	add	sp, #12
   12ce8:	f85d fb04 	ldr.w	pc, [sp], #4
   12cec:	0001dbcf 	.word	0x0001dbcf

00012cf0 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   12cf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12cf4:	460c      	mov	r4, r1
   12cf6:	4617      	mov	r7, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   12cf8:	4605      	mov	r5, r0
   12cfa:	b970      	cbnz	r0, 12d1a <bt_gatt_is_subscribed+0x2a>
   12cfc:	495b      	ldr	r1, [pc, #364]	; (12e6c <bt_gatt_is_subscribed+0x17c>)
   12cfe:	f640 434b 	movw	r3, #3147	; 0xc4b
   12d02:	4a5b      	ldr	r2, [pc, #364]	; (12e70 <bt_gatt_is_subscribed+0x180>)
   12d04:	485b      	ldr	r0, [pc, #364]	; (12e74 <bt_gatt_is_subscribed+0x184>)
   12d06:	f009 f817 	bl	1bd38 <assert_print>
   12d0a:	485b      	ldr	r0, [pc, #364]	; (12e78 <bt_gatt_is_subscribed+0x188>)
   12d0c:	f009 f814 	bl	1bd38 <assert_print>
   12d10:	f640 414b 	movw	r1, #3147	; 0xc4b
	__ASSERT(attr, "invalid parameter\n");
   12d14:	4856      	ldr	r0, [pc, #344]	; (12e70 <bt_gatt_is_subscribed+0x180>)
   12d16:	f009 f808 	bl	1bd2a <assert_post_action>
   12d1a:	b961      	cbnz	r1, 12d36 <bt_gatt_is_subscribed+0x46>
   12d1c:	4957      	ldr	r1, [pc, #348]	; (12e7c <bt_gatt_is_subscribed+0x18c>)
   12d1e:	f640 434c 	movw	r3, #3148	; 0xc4c
   12d22:	4a53      	ldr	r2, [pc, #332]	; (12e70 <bt_gatt_is_subscribed+0x180>)
   12d24:	4853      	ldr	r0, [pc, #332]	; (12e74 <bt_gatt_is_subscribed+0x184>)
   12d26:	f009 f807 	bl	1bd38 <assert_print>
   12d2a:	4853      	ldr	r0, [pc, #332]	; (12e78 <bt_gatt_is_subscribed+0x188>)
   12d2c:	f009 f804 	bl	1bd38 <assert_print>
   12d30:	f640 414c 	movw	r1, #3148	; 0xc4c
   12d34:	e7ee      	b.n	12d14 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   12d36:	7a83      	ldrb	r3, [r0, #10]
   12d38:	2b07      	cmp	r3, #7
   12d3a:	d110      	bne.n	12d5e <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   12d3c:	2300      	movs	r3, #0
   12d3e:	f88d 300c 	strb.w	r3, [sp, #12]
   12d42:	f642 0303 	movw	r3, #10243	; 0x2803
   12d46:	6820      	ldr	r0, [r4, #0]
   12d48:	a903      	add	r1, sp, #12
   12d4a:	f8ad 300e 	strh.w	r3, [sp, #14]
   12d4e:	f00a f819 	bl	1cd84 <bt_uuid_cmp>
   12d52:	b9d0      	cbnz	r0, 12d8a <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   12d54:	68e3      	ldr	r3, [r4, #12]
   12d56:	799b      	ldrb	r3, [r3, #6]
   12d58:	f013 0f30 	tst.w	r3, #48	; 0x30
   12d5c:	d103      	bne.n	12d66 <bt_gatt_is_subscribed+0x76>
		return false;
   12d5e:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   12d60:	b004      	add	sp, #16
   12d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   12d66:	4620      	mov	r0, r4
   12d68:	f7ff ffb0 	bl	12ccc <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   12d6c:	4604      	mov	r4, r0
   12d6e:	b960      	cbnz	r0, 12d8a <bt_gatt_is_subscribed+0x9a>
   12d70:	4942      	ldr	r1, [pc, #264]	; (12e7c <bt_gatt_is_subscribed+0x18c>)
   12d72:	f640 435d 	movw	r3, #3165	; 0xc5d
   12d76:	4a3e      	ldr	r2, [pc, #248]	; (12e70 <bt_gatt_is_subscribed+0x180>)
   12d78:	483e      	ldr	r0, [pc, #248]	; (12e74 <bt_gatt_is_subscribed+0x184>)
   12d7a:	f008 ffdd 	bl	1bd38 <assert_print>
   12d7e:	4840      	ldr	r0, [pc, #256]	; (12e80 <bt_gatt_is_subscribed+0x190>)
   12d80:	f008 ffda 	bl	1bd38 <assert_print>
   12d84:	f640 415d 	movw	r1, #3165	; 0xc5d
   12d88:	e7c4      	b.n	12d14 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   12d8a:	2300      	movs	r3, #0
   12d8c:	6820      	ldr	r0, [r4, #0]
   12d8e:	f88d 300c 	strb.w	r3, [sp, #12]
   12d92:	f642 1302 	movw	r3, #10498	; 0x2902
   12d96:	a903      	add	r1, sp, #12
   12d98:	f8ad 300e 	strh.w	r3, [sp, #14]
   12d9c:	f009 fff2 	bl	1cd84 <bt_uuid_cmp>
   12da0:	b188      	cbz	r0, 12dc6 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   12da2:	4620      	mov	r0, r4
   12da4:	f7ff ff92 	bl	12ccc <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   12da8:	4604      	mov	r4, r0
   12daa:	b960      	cbnz	r0, 12dc6 <bt_gatt_is_subscribed+0xd6>
   12dac:	4933      	ldr	r1, [pc, #204]	; (12e7c <bt_gatt_is_subscribed+0x18c>)
   12dae:	f640 4363 	movw	r3, #3171	; 0xc63
   12db2:	4a2f      	ldr	r2, [pc, #188]	; (12e70 <bt_gatt_is_subscribed+0x180>)
   12db4:	482f      	ldr	r0, [pc, #188]	; (12e74 <bt_gatt_is_subscribed+0x184>)
   12db6:	f008 ffbf 	bl	1bd38 <assert_print>
   12dba:	4831      	ldr	r0, [pc, #196]	; (12e80 <bt_gatt_is_subscribed+0x190>)
   12dbc:	f008 ffbc 	bl	1bd38 <assert_print>
   12dc0:	f640 4163 	movw	r1, #3171	; 0xc63
   12dc4:	e7a6      	b.n	12d14 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   12dc6:	2600      	movs	r6, #0
   12dc8:	f642 1802 	movw	r8, #10498	; 0x2902
   12dcc:	6820      	ldr	r0, [r4, #0]
   12dce:	4669      	mov	r1, sp
   12dd0:	f88d 6000 	strb.w	r6, [sp]
   12dd4:	f8ad 8002 	strh.w	r8, [sp, #2]
   12dd8:	f009 ffd4 	bl	1cd84 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12ddc:	b9d8      	cbnz	r0, 12e16 <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   12dde:	2300      	movs	r3, #0
   12de0:	6820      	ldr	r0, [r4, #0]
   12de2:	f88d 300c 	strb.w	r3, [sp, #12]
   12de6:	f642 1302 	movw	r3, #10498	; 0x2902
   12dea:	a903      	add	r1, sp, #12
   12dec:	f8ad 300e 	strh.w	r3, [sp, #14]
   12df0:	f009 ffc8 	bl	1cd84 <bt_uuid_cmp>
   12df4:	2800      	cmp	r0, #0
   12df6:	d1b2      	bne.n	12d5e <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   12df8:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   12dfa:	4628      	mov	r0, r5
   12dfc:	4622      	mov	r2, r4
   12dfe:	f812 1b01 	ldrb.w	r1, [r2], #1
   12e02:	f00a fa2f 	bl	1d264 <bt_conn_is_peer_addr_le>
   12e06:	2800      	cmp	r0, #0
   12e08:	d0a9      	beq.n	12d5e <bt_gatt_is_subscribed+0x6e>
   12e0a:	8923      	ldrh	r3, [r4, #8]
   12e0c:	421f      	tst	r7, r3
   12e0e:	bf14      	ite	ne
   12e10:	2001      	movne	r0, #1
   12e12:	2000      	moveq	r0, #0
   12e14:	e7a4      	b.n	12d60 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   12e16:	f642 0303 	movw	r3, #10243	; 0x2803
   12e1a:	6820      	ldr	r0, [r4, #0]
   12e1c:	a901      	add	r1, sp, #4
   12e1e:	f88d 6004 	strb.w	r6, [sp, #4]
   12e22:	f8ad 3006 	strh.w	r3, [sp, #6]
   12e26:	f009 ffad 	bl	1cd84 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   12e2a:	2800      	cmp	r0, #0
   12e2c:	d0d7      	beq.n	12dde <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12e2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12e32:	6820      	ldr	r0, [r4, #0]
   12e34:	a902      	add	r1, sp, #8
   12e36:	f88d 6008 	strb.w	r6, [sp, #8]
   12e3a:	f8ad 300a 	strh.w	r3, [sp, #10]
   12e3e:	f009 ffa1 	bl	1cd84 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   12e42:	2800      	cmp	r0, #0
   12e44:	d0cb      	beq.n	12dde <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12e46:	f642 0301 	movw	r3, #10241	; 0x2801
   12e4a:	6820      	ldr	r0, [r4, #0]
   12e4c:	a903      	add	r1, sp, #12
   12e4e:	f88d 600c 	strb.w	r6, [sp, #12]
   12e52:	f8ad 300e 	strh.w	r3, [sp, #14]
   12e56:	f009 ff95 	bl	1cd84 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12e5a:	2800      	cmp	r0, #0
   12e5c:	d0bf      	beq.n	12dde <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   12e5e:	4620      	mov	r0, r4
   12e60:	f7ff ff34 	bl	12ccc <bt_gatt_attr_next>
		if (!attr) {
   12e64:	4604      	mov	r4, r0
   12e66:	2800      	cmp	r0, #0
   12e68:	d1b0      	bne.n	12dcc <bt_gatt_is_subscribed+0xdc>
   12e6a:	e778      	b.n	12d5e <bt_gatt_is_subscribed+0x6e>
   12e6c:	00021ddb 	.word	0x00021ddb
   12e70:	000229af 	.word	0x000229af
   12e74:	000205a4 	.word	0x000205a4
   12e78:	00022a40 	.word	0x00022a40
   12e7c:	00022a55 	.word	0x00022a55
   12e80:	00022a5a 	.word	0x00022a5a

00012e84 <gatt_indicate>:
{
   12e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12e88:	4615      	mov	r5, r2
   12e8a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12e8c:	2294      	movs	r2, #148	; 0x94
   12e8e:	6869      	ldr	r1, [r5, #4]
{
   12e90:	b086      	sub	sp, #24
   12e92:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12e94:	f00b f870 	bl	1df78 <bt_gatt_check_perm>
   12e98:	4680      	mov	r8, r0
   12e9a:	b178      	cbz	r0, 12ebc <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   12e9c:	4b34      	ldr	r3, [pc, #208]	; (12f70 <gatt_indicate+0xec>)
		return -EPERM;
   12e9e:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
   12ea2:	9305      	str	r3, [sp, #20]
   12ea4:	2302      	movs	r3, #2
   12ea6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12eaa:	4832      	ldr	r0, [pc, #200]	; (12f74 <gatt_indicate+0xf0>)
   12eac:	aa04      	add	r2, sp, #16
   12eae:	9304      	str	r3, [sp, #16]
   12eb0:	f00a ff0f 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
}
   12eb4:	4628      	mov	r0, r5
   12eb6:	b006      	add	sp, #24
   12eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   12ebc:	2202      	movs	r2, #2
   12ebe:	4630      	mov	r0, r6
   12ec0:	6869      	ldr	r1, [r5, #4]
   12ec2:	f7ff ff15 	bl	12cf0 <bt_gatt_is_subscribed>
   12ec6:	b960      	cbnz	r0, 12ee2 <gatt_indicate+0x5e>
			BT_WARN("Device is not subscribed to characteristic");
   12ec8:	4b2b      	ldr	r3, [pc, #172]	; (12f78 <gatt_indicate+0xf4>)
   12eca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12ece:	9305      	str	r3, [sp, #20]
   12ed0:	2302      	movs	r3, #2
   12ed2:	4828      	ldr	r0, [pc, #160]	; (12f74 <gatt_indicate+0xf0>)
   12ed4:	aa04      	add	r2, sp, #16
   12ed6:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   12ed8:	f06f 0515 	mvn.w	r5, #21
			BT_WARN("Device is not subscribed to characteristic");
   12edc:	f00a fef9 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   12ee0:	e7e8      	b.n	12eb4 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12ee2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   12ee6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   12ee8:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12eea:	f7ff f9e3 	bl	122b4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   12eee:	3702      	adds	r7, #2
	if (!req) {
   12ef0:	4604      	mov	r4, r0
   12ef2:	b1b0      	cbz	r0, 12f22 <gatt_indicate+0x9e>
	req->func = func;
   12ef4:	4b21      	ldr	r3, [pc, #132]	; (12f7c <gatt_indicate+0xf8>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   12ef6:	463a      	mov	r2, r7
	req->func = func;
   12ef8:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   12efa:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   12efc:	211d      	movs	r1, #29
   12efe:	4630      	mov	r0, r6
   12f00:	f7fe ff06 	bl	11d10 <bt_att_create_pdu>
	if (!buf) {
   12f04:	4607      	mov	r7, r0
   12f06:	b978      	cbnz	r0, 12f28 <gatt_indicate+0xa4>
		BT_WARN("No buffer available to send indication");
   12f08:	4b1d      	ldr	r3, [pc, #116]	; (12f80 <gatt_indicate+0xfc>)
   12f0a:	481a      	ldr	r0, [pc, #104]	; (12f74 <gatt_indicate+0xf0>)
   12f0c:	9305      	str	r3, [sp, #20]
   12f0e:	2302      	movs	r3, #2
   12f10:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12f14:	aa04      	add	r2, sp, #16
   12f16:	9304      	str	r3, [sp, #16]
   12f18:	f00a fedb 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   12f1c:	4620      	mov	r0, r4
   12f1e:	f7ff f9eb 	bl	122f8 <bt_att_req_free>
		return -ENOMEM;
   12f22:	f06f 050b 	mvn.w	r5, #11
   12f26:	e7c5      	b.n	12eb4 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   12f28:	2301      	movs	r3, #1
   12f2a:	4642      	mov	r2, r8
   12f2c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   12f2e:	f107 0a08 	add.w	sl, r7, #8
   12f32:	f00a fe45 	bl	1dbc0 <bt_att_set_tx_meta_data>
   12f36:	2102      	movs	r1, #2
   12f38:	4650      	mov	r0, sl
   12f3a:	f000 fea7 	bl	13c8c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   12f3e:	4680      	mov	r8, r0
   12f40:	f828 9b02 	strh.w	r9, [r8], #2
   12f44:	8aa9      	ldrh	r1, [r5, #20]
   12f46:	4650      	mov	r0, sl
   12f48:	f000 fea0 	bl	13c8c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   12f4c:	8aaa      	ldrh	r2, [r5, #20]
   12f4e:	6929      	ldr	r1, [r5, #16]
   12f50:	4640      	mov	r0, r8
   12f52:	f009 ff00 	bl	1cd56 <memcpy>
	err = bt_att_req_send(conn, req);
   12f56:	4621      	mov	r1, r4
   12f58:	4630      	mov	r0, r6
	req->buf = buf;
   12f5a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   12f5c:	f7ff fb06 	bl	1256c <bt_att_req_send>
	if (err) {
   12f60:	4605      	mov	r5, r0
   12f62:	2800      	cmp	r0, #0
   12f64:	d0a6      	beq.n	12eb4 <gatt_indicate+0x30>
		bt_att_req_free(req);
   12f66:	4620      	mov	r0, r4
   12f68:	f7ff f9c6 	bl	122f8 <bt_att_req_free>
   12f6c:	e7a2      	b.n	12eb4 <gatt_indicate+0x30>
   12f6e:	bf00      	nop
   12f70:	00022a70 	.word	0x00022a70
   12f74:	0001f8d0 	.word	0x0001f8d0
   12f78:	00022a86 	.word	0x00022a86
   12f7c:	0001dbe9 	.word	0x0001dbe9
   12f80:	00022ab1 	.word	0x00022ab1

00012f84 <bt_gatt_indicate>:
{
   12f84:	b530      	push	{r4, r5, lr}
   12f86:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   12f88:	460c      	mov	r4, r1
{
   12f8a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   12f8c:	b971      	cbnz	r1, 12fac <bt_gatt_indicate+0x28>
   12f8e:	4946      	ldr	r1, [pc, #280]	; (130a8 <bt_gatt_indicate+0x124>)
   12f90:	f640 330b 	movw	r3, #2827	; 0xb0b
   12f94:	4a45      	ldr	r2, [pc, #276]	; (130ac <bt_gatt_indicate+0x128>)
   12f96:	4846      	ldr	r0, [pc, #280]	; (130b0 <bt_gatt_indicate+0x12c>)
   12f98:	f008 fece 	bl	1bd38 <assert_print>
   12f9c:	4845      	ldr	r0, [pc, #276]	; (130b4 <bt_gatt_indicate+0x130>)
   12f9e:	f008 fecb 	bl	1bd38 <assert_print>
   12fa2:	f640 310b 	movw	r1, #2827	; 0xb0b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   12fa6:	4841      	ldr	r0, [pc, #260]	; (130ac <bt_gatt_indicate+0x128>)
   12fa8:	f008 febf 	bl	1bd2a <assert_post_action>
   12fac:	684b      	ldr	r3, [r1, #4]
   12fae:	b973      	cbnz	r3, 12fce <bt_gatt_indicate+0x4a>
   12fb0:	680b      	ldr	r3, [r1, #0]
   12fb2:	b963      	cbnz	r3, 12fce <bt_gatt_indicate+0x4a>
   12fb4:	4940      	ldr	r1, [pc, #256]	; (130b8 <bt_gatt_indicate+0x134>)
   12fb6:	f640 330c 	movw	r3, #2828	; 0xb0c
   12fba:	4a3c      	ldr	r2, [pc, #240]	; (130ac <bt_gatt_indicate+0x128>)
   12fbc:	483c      	ldr	r0, [pc, #240]	; (130b0 <bt_gatt_indicate+0x12c>)
   12fbe:	f008 febb 	bl	1bd38 <assert_print>
   12fc2:	483c      	ldr	r0, [pc, #240]	; (130b4 <bt_gatt_indicate+0x130>)
   12fc4:	f008 feb8 	bl	1bd38 <assert_print>
   12fc8:	f640 310c 	movw	r1, #2828	; 0xb0c
   12fcc:	e7eb      	b.n	12fa6 <bt_gatt_indicate+0x22>
   12fce:	4b3b      	ldr	r3, [pc, #236]	; (130bc <bt_gatt_indicate+0x138>)
   12fd0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   12fd4:	075a      	lsls	r2, r3, #29
   12fd6:	d561      	bpl.n	1309c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   12fd8:	b115      	cbz	r5, 12fe0 <bt_gatt_indicate+0x5c>
   12fda:	7aab      	ldrb	r3, [r5, #10]
   12fdc:	2b07      	cmp	r3, #7
   12fde:	d160      	bne.n	130a2 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   12fe0:	6860      	ldr	r0, [r4, #4]
   12fe2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   12fe4:	f7ff fd36 	bl	12a54 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   12fe8:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   12fea:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   12fee:	b33a      	cbz	r2, 13040 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   12ff0:	a905      	add	r1, sp, #20
   12ff2:	9102      	str	r1, [sp, #8]
   12ff4:	4932      	ldr	r1, [pc, #200]	; (130c0 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   12ff6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   12ff8:	9101      	str	r1, [sp, #4]
   12ffa:	2101      	movs	r1, #1
   12ffc:	9100      	str	r1, [sp, #0]
   12ffe:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13002:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13004:	f7ff fd6e 	bl	12ae4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13008:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1300a:	b91b      	cbnz	r3, 13014 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1300c:	f06f 0001 	mvn.w	r0, #1
}
   13010:	b00b      	add	sp, #44	; 0x2c
   13012:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   13014:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13016:	9b05      	ldr	r3, [sp, #20]
   13018:	a904      	add	r1, sp, #16
   1301a:	6818      	ldr	r0, [r3, #0]
   1301c:	2300      	movs	r3, #0
   1301e:	f88d 3010 	strb.w	r3, [sp, #16]
   13022:	f642 0303 	movw	r3, #10243	; 0x2803
   13026:	f8ad 3012 	strh.w	r3, [sp, #18]
   1302a:	f009 feab 	bl	1cd84 <bt_uuid_cmp>
   1302e:	b970      	cbnz	r0, 1304e <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13030:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   13032:	68c3      	ldr	r3, [r0, #12]
   13034:	799b      	ldrb	r3, [r3, #6]
   13036:	069b      	lsls	r3, r3, #26
   13038:	d405      	bmi.n	13046 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1303a:	f06f 0015 	mvn.w	r0, #21
   1303e:	e7e7      	b.n	13010 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   13040:	2800      	cmp	r0, #0
   13042:	d1e8      	bne.n	13016 <bt_gatt_indicate+0x92>
   13044:	e7e2      	b.n	1300c <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13046:	f00a ff3c 	bl	1dec2 <bt_gatt_attr_value_handle>
   1304a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1304e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13052:	b13d      	cbz	r5, 13064 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   13054:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   13056:	4601      	mov	r1, r0
   13058:	4622      	mov	r2, r4
   1305a:	4628      	mov	r0, r5
		params->_ref = 1;
   1305c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1305e:	f7ff ff11 	bl	12e84 <gatt_indicate>
   13062:	e7d5      	b.n	13010 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   13064:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   13068:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1306a:	2302      	movs	r3, #2
   1306c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13070:	f642 1302 	movw	r3, #10498	; 0x2902
   13074:	f8ad 3012 	strh.w	r3, [sp, #18]
   13078:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1307a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1307c:	9302      	str	r3, [sp, #8]
   1307e:	4b11      	ldr	r3, [pc, #68]	; (130c4 <bt_gatt_indicate+0x140>)
   13080:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13084:	9301      	str	r3, [sp, #4]
   13086:	2301      	movs	r3, #1
   13088:	aa04      	add	r2, sp, #16
   1308a:	9300      	str	r3, [sp, #0]
   1308c:	462b      	mov	r3, r5
	data.ind_params = params;
   1308e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13090:	f88d 5010 	strb.w	r5, [sp, #16]
   13094:	f7ff fd26 	bl	12ae4 <bt_gatt_foreach_attr_type>
	return data.err;
   13098:	9807      	ldr	r0, [sp, #28]
   1309a:	e7b9      	b.n	13010 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1309c:	f06f 000a 	mvn.w	r0, #10
   130a0:	e7b6      	b.n	13010 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   130a2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   130a6:	e7b3      	b.n	13010 <bt_gatt_indicate+0x8c>
   130a8:	00022ad8 	.word	0x00022ad8
   130ac:	000229af 	.word	0x000229af
   130b0:	000205a4 	.word	0x000205a4
   130b4:	00022adf 	.word	0x00022adf
   130b8:	00022af5 	.word	0x00022af5
   130bc:	200080cc 	.word	0x200080cc
   130c0:	0001dc0f 	.word	0x0001dc0f
   130c4:	00013321 	.word	0x00013321

000130c8 <sc_process>:
{
   130c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   130ca:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   130cc:	f1a0 0120 	sub.w	r1, r0, #32
   130d0:	f100 0430 	add.w	r4, r0, #48	; 0x30
   130d4:	e8d4 2faf 	lda	r2, [r4]
   130d8:	f3c2 0040 	ubfx	r0, r2, #1, #1
   130dc:	0792      	lsls	r2, r2, #30
   130de:	d50e      	bpl.n	130fe <sc_process+0x36>
   130e0:	4919      	ldr	r1, [pc, #100]	; (13148 <sc_process+0x80>)
   130e2:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   130e6:	4a19      	ldr	r2, [pc, #100]	; (1314c <sc_process+0x84>)
   130e8:	4819      	ldr	r0, [pc, #100]	; (13150 <sc_process+0x88>)
   130ea:	f008 fe25 	bl	1bd38 <assert_print>
   130ee:	4819      	ldr	r0, [pc, #100]	; (13154 <sc_process+0x8c>)
   130f0:	f008 fe22 	bl	1bd38 <assert_print>
   130f4:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   130f8:	4814      	ldr	r0, [pc, #80]	; (1314c <sc_process+0x84>)
   130fa:	f008 fe16 	bl	1bd2a <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   130fe:	f853 2c08 	ldr.w	r2, [r3, #-8]
   13102:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13104:	e8d4 2fef 	ldaex	r2, [r4]
   13108:	f022 0201 	bic.w	r2, r2, #1
   1310c:	e8c4 2fe5 	stlex	r5, r2, [r4]
   13110:	2d00      	cmp	r5, #0
   13112:	d1f7      	bne.n	13104 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13114:	4a10      	ldr	r2, [pc, #64]	; (13158 <sc_process+0x90>)
	sc->start = 0U;
   13116:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1311a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1311e:	4a0f      	ldr	r2, [pc, #60]	; (1315c <sc_process+0x94>)
	sc->end = 0U;
   13120:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   13124:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   13128:	aa01      	add	r2, sp, #4
   1312a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1312e:	2204      	movs	r2, #4
   13130:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   13134:	f7ff ff26 	bl	12f84 <bt_gatt_indicate>
   13138:	b918      	cbnz	r0, 13142 <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1313a:	2101      	movs	r1, #1
   1313c:	4620      	mov	r0, r4
   1313e:	f00a fdcb 	bl	1dcd8 <atomic_set_bit>
}
   13142:	b003      	add	sp, #12
   13144:	bd30      	pop	{r4, r5, pc}
   13146:	bf00      	nop
   13148:	00022b12 	.word	0x00022b12
   1314c:	000229af 	.word	0x000229af
   13150:	000205a4 	.word	0x000205a4
   13154:	00022b43 	.word	0x00022b43
   13158:	0001fea4 	.word	0x0001fea4
   1315c:	00012935 	.word	0x00012935

00013160 <update_ccc>:
{
   13160:	b5f0      	push	{r4, r5, r6, r7, lr}
   13162:	b089      	sub	sp, #36	; 0x24
	if (attr->write != bt_gatt_attr_write_ccc) {
   13164:	4b31      	ldr	r3, [pc, #196]	; (1322c <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   13166:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   13168:	6882      	ldr	r2, [r0, #8]
{
   1316a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1316c:	429a      	cmp	r2, r3
{
   1316e:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13170:	d11e      	bne.n	131b0 <update_ccc+0x50>
	ccc = attr->user_data;
   13172:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   13174:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13176:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   13178:	b1d3      	cbz	r3, 131b0 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1317a:	4628      	mov	r0, r5
   1317c:	7831      	ldrb	r1, [r6, #0]
   1317e:	f00a f871 	bl	1d264 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   13182:	b1a8      	cbz	r0, 131b0 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   13184:	f44f 7295 	mov.w	r2, #298	; 0x12a
   13188:	4621      	mov	r1, r4
   1318a:	4628      	mov	r0, r5
   1318c:	f00a fef4 	bl	1df78 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   13190:	2803      	cmp	r0, #3
   13192:	d111      	bne.n	131b8 <update_ccc+0x58>
				BT_WARN("CCC %p not writable", attr);
   13194:	466d      	mov	r5, sp
   13196:	b088      	sub	sp, #32
   13198:	466a      	mov	r2, sp
   1319a:	4b25      	ldr	r3, [pc, #148]	; (13230 <update_ccc+0xd0>)
   1319c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   131a0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   131a4:	f842 0f10 	str.w	r0, [r2, #16]!
   131a8:	4822      	ldr	r0, [pc, #136]	; (13234 <update_ccc+0xd4>)
   131aa:	f00a fd92 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
   131ae:	46ad      	mov	sp, r5
}
   131b0:	2001      	movs	r0, #1
   131b2:	3724      	adds	r7, #36	; 0x24
   131b4:	46bd      	mov	sp, r7
   131b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   131b8:	4631      	mov	r1, r6
   131ba:	4620      	mov	r0, r4
   131bc:	f00a fd0a 	bl	1dbd4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   131c0:	4b1d      	ldr	r3, [pc, #116]	; (13238 <update_ccc+0xd8>)
   131c2:	429e      	cmp	r6, r3
   131c4:	d1f4      	bne.n	131b0 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   131c6:	7a28      	ldrb	r0, [r5, #8]
   131c8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   131cc:	f7ff fa1c 	bl	12608 <find_sc_cfg>
	if (!cfg) {
   131d0:	2800      	cmp	r0, #0
   131d2:	d0ed      	beq.n	131b0 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   131d4:	8902      	ldrh	r2, [r0, #8]
   131d6:	8943      	ldrh	r3, [r0, #10]
   131d8:	ea52 0103 	orrs.w	r1, r2, r3
   131dc:	d0e8      	beq.n	131b0 <update_ccc+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   131de:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   131e0:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   131e2:	4628      	mov	r0, r5
   131e4:	f7fd fc14 	bl	10a10 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   131e8:	2318      	movs	r3, #24
   131ea:	4914      	ldr	r1, [pc, #80]	; (1323c <update_ccc+0xdc>)
   131ec:	4a14      	ldr	r2, [pc, #80]	; (13240 <update_ccc+0xe0>)
   131ee:	fb03 1300 	mla	r3, r3, r0, r1
   131f2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   131f4:	4a13      	ldr	r2, [pc, #76]	; (13244 <update_ccc+0xe4>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   131f6:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   131f8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   131fa:	1d3a      	adds	r2, r7, #4
   131fc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   131fe:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13200:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13204:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   13208:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1320a:	4628      	mov	r0, r5
   1320c:	f7ff feba 	bl	12f84 <bt_gatt_indicate>
   13210:	2800      	cmp	r0, #0
   13212:	d0cd      	beq.n	131b0 <update_ccc+0x50>
		BT_ERR("SC restore indication failed");
   13214:	4b0c      	ldr	r3, [pc, #48]	; (13248 <update_ccc+0xe8>)
   13216:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1321a:	61fb      	str	r3, [r7, #28]
   1321c:	2302      	movs	r3, #2
   1321e:	4805      	ldr	r0, [pc, #20]	; (13234 <update_ccc+0xd4>)
   13220:	61bb      	str	r3, [r7, #24]
   13222:	f107 0218 	add.w	r2, r7, #24
   13226:	f00a fd54 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
   1322a:	e7c1      	b.n	131b0 <update_ccc+0x50>
   1322c:	00012651 	.word	0x00012651
   13230:	00022b5e 	.word	0x00022b5e
   13234:	0001f8d0 	.word	0x0001f8d0
   13238:	20008258 	.word	0x20008258
   1323c:	200098a8 	.word	0x200098a8
   13240:	0001fea4 	.word	0x0001fea4
   13244:	0001dced 	.word	0x0001dced
   13248:	00022b72 	.word	0x00022b72

0001324c <gatt_notify>:
{
   1324c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13250:	4614      	mov	r4, r2
   13252:	4688      	mov	r8, r1
   13254:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13256:	2294      	movs	r2, #148	; 0x94
   13258:	6861      	ldr	r1, [r4, #4]
{
   1325a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1325c:	f00a fe8c 	bl	1df78 <bt_gatt_check_perm>
   13260:	b170      	cbz	r0, 13280 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   13262:	4b2b      	ldr	r3, [pc, #172]	; (13310 <gatt_notify+0xc4>)
   13264:	482b      	ldr	r0, [pc, #172]	; (13314 <gatt_notify+0xc8>)
   13266:	9305      	str	r3, [sp, #20]
   13268:	2302      	movs	r3, #2
   1326a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1326e:	aa04      	add	r2, sp, #16
   13270:	9304      	str	r3, [sp, #16]
   13272:	f00a fd2e 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   13276:	f04f 30ff 	mov.w	r0, #4294967295
}
   1327a:	b007      	add	sp, #28
   1327c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   13280:	2201      	movs	r2, #1
   13282:	4630      	mov	r0, r6
   13284:	6861      	ldr	r1, [r4, #4]
   13286:	f7ff fd33 	bl	12cf0 <bt_gatt_is_subscribed>
   1328a:	b960      	cbnz	r0, 132a6 <gatt_notify+0x5a>
			BT_WARN("Device is not subscribed to characteristic");
   1328c:	4b22      	ldr	r3, [pc, #136]	; (13318 <gatt_notify+0xcc>)
   1328e:	4821      	ldr	r0, [pc, #132]	; (13314 <gatt_notify+0xc8>)
   13290:	9305      	str	r3, [sp, #20]
   13292:	2302      	movs	r3, #2
   13294:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13298:	aa04      	add	r2, sp, #16
   1329a:	9304      	str	r3, [sp, #16]
   1329c:	f00a fd19 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   132a0:	f06f 0015 	mvn.w	r0, #21
   132a4:	e7e9      	b.n	1327a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   132a6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   132a8:	211b      	movs	r1, #27
   132aa:	4630      	mov	r0, r6
   132ac:	3202      	adds	r2, #2
   132ae:	f7fe fd2f 	bl	11d10 <bt_att_create_pdu>
	if (!buf) {
   132b2:	4605      	mov	r5, r0
   132b4:	b960      	cbnz	r0, 132d0 <gatt_notify+0x84>
		BT_WARN("No buffer available to send notification");
   132b6:	4b19      	ldr	r3, [pc, #100]	; (1331c <gatt_notify+0xd0>)
   132b8:	4816      	ldr	r0, [pc, #88]	; (13314 <gatt_notify+0xc8>)
   132ba:	9305      	str	r3, [sp, #20]
   132bc:	2302      	movs	r3, #2
   132be:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   132c2:	aa04      	add	r2, sp, #16
   132c4:	9304      	str	r3, [sp, #16]
   132c6:	f00a fd04 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   132ca:	f06f 000b 	mvn.w	r0, #11
   132ce:	e7d4      	b.n	1327a <gatt_notify+0x2e>
   132d0:	f100 0908 	add.w	r9, r0, #8
   132d4:	2102      	movs	r1, #2
   132d6:	4648      	mov	r0, r9
   132d8:	f000 fcd8 	bl	13c8c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   132dc:	4607      	mov	r7, r0
   132de:	f827 8b02 	strh.w	r8, [r7], #2
   132e2:	89a1      	ldrh	r1, [r4, #12]
   132e4:	4648      	mov	r0, r9
   132e6:	f000 fcd1 	bl	13c8c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   132ea:	89a2      	ldrh	r2, [r4, #12]
   132ec:	68a1      	ldr	r1, [r4, #8]
   132ee:	4638      	mov	r0, r7
   132f0:	f009 fd31 	bl	1cd56 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   132f4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   132f8:	4628      	mov	r0, r5
   132fa:	2301      	movs	r3, #1
   132fc:	f00a fc60 	bl	1dbc0 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   13300:	4629      	mov	r1, r5
   13302:	4630      	mov	r0, r6
}
   13304:	b007      	add	sp, #28
   13306:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1330a:	f7ff b8d1 	b.w	124b0 <bt_att_send>
   1330e:	bf00      	nop
   13310:	00022a70 	.word	0x00022a70
   13314:	0001f8d0 	.word	0x0001f8d0
   13318:	00022a86 	.word	0x00022a86
   1331c:	00022b8f 	.word	0x00022b8f

00013320 <notify_cb>:
{
   13320:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13322:	4b3f      	ldr	r3, [pc, #252]	; (13420 <notify_cb+0x100>)
{
   13324:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13326:	6882      	ldr	r2, [r0, #8]
{
   13328:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1332a:	429a      	cmp	r2, r3
{
   1332c:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   1332e:	d003      	beq.n	13338 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13330:	2701      	movs	r7, #1
}
   13332:	4638      	mov	r0, r7
   13334:	b007      	add	sp, #28
   13336:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   13338:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1333a:	4b3a      	ldr	r3, [pc, #232]	; (13424 <notify_cb+0x104>)
   1333c:	429e      	cmp	r6, r3
   1333e:	d055      	beq.n	133ec <notify_cb+0xcc>
		if (cfg->value != data->type) {
   13340:	8932      	ldrh	r2, [r6, #8]
   13342:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13344:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   13346:	429a      	cmp	r2, r3
   13348:	d1f2      	bne.n	13330 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1334a:	7830      	ldrb	r0, [r6, #0]
   1334c:	f7fd fc94 	bl	10c78 <bt_conn_lookup_addr_le>
		if (!conn) {
   13350:	4604      	mov	r4, r0
   13352:	2800      	cmp	r0, #0
   13354:	d0ec      	beq.n	13330 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   13356:	7a83      	ldrb	r3, [r0, #10]
   13358:	2b07      	cmp	r3, #7
   1335a:	d005      	beq.n	13368 <notify_cb+0x48>
			bt_conn_unref(conn);
   1335c:	f7fd fa30 	bl	107c0 <bt_conn_unref>
			continue;
   13360:	e7e6      	b.n	13330 <notify_cb+0x10>
			bt_conn_unref(conn);
   13362:	f7fd fa2d 	bl	107c0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13366:	e7eb      	b.n	13340 <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13368:	6973      	ldr	r3, [r6, #20]
   1336a:	b123      	cbz	r3, 13376 <notify_cb+0x56>
   1336c:	4639      	mov	r1, r7
   1336e:	4798      	blx	r3
   13370:	b908      	cbnz	r0, 13376 <notify_cb+0x56>
			bt_conn_unref(conn);
   13372:	4620      	mov	r0, r4
   13374:	e7f2      	b.n	1335c <notify_cb+0x3c>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13376:	4639      	mov	r1, r7
   13378:	2294      	movs	r2, #148	; 0x94
   1337a:	4620      	mov	r0, r4
   1337c:	f00a fdfc 	bl	1df78 <bt_gatt_check_perm>
   13380:	4607      	mov	r7, r0
   13382:	b150      	cbz	r0, 1339a <notify_cb+0x7a>
			BT_WARN("Link is not encrypted");
   13384:	4b28      	ldr	r3, [pc, #160]	; (13428 <notify_cb+0x108>)
   13386:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1338a:	9305      	str	r3, [sp, #20]
   1338c:	2302      	movs	r3, #2
   1338e:	4827      	ldr	r0, [pc, #156]	; (1342c <notify_cb+0x10c>)
   13390:	aa04      	add	r2, sp, #16
   13392:	9304      	str	r3, [sp, #16]
   13394:	f00a fc9d 	bl	1dcd2 <z_log_msg_static_create.constprop.0>
   13398:	e7eb      	b.n	13372 <notify_cb+0x52>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1339a:	89ab      	ldrh	r3, [r5, #12]
   1339c:	2b02      	cmp	r3, #2
   1339e:	d114      	bne.n	133ca <notify_cb+0xaa>
   133a0:	8933      	ldrh	r3, [r6, #8]
   133a2:	079a      	lsls	r2, r3, #30
   133a4:	d405      	bmi.n	133b2 <notify_cb+0x92>
		bt_conn_unref(conn);
   133a6:	4620      	mov	r0, r4
   133a8:	f7fd fa0a 	bl	107c0 <bt_conn_unref>
		data->err = 0;
   133ac:	2300      	movs	r3, #0
   133ae:	60ab      	str	r3, [r5, #8]
   133b0:	e7be      	b.n	13330 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   133b2:	4620      	mov	r0, r4
   133b4:	692a      	ldr	r2, [r5, #16]
   133b6:	88a9      	ldrh	r1, [r5, #4]
   133b8:	f7ff fd64 	bl	12e84 <gatt_indicate>
			if (err == 0) {
   133bc:	4606      	mov	r6, r0
   133be:	b978      	cbnz	r0, 133e0 <notify_cb+0xc0>
				data->ind_params->_ref++;
   133c0:	692a      	ldr	r2, [r5, #16]
   133c2:	7d93      	ldrb	r3, [r2, #22]
   133c4:	3301      	adds	r3, #1
   133c6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   133c8:	e7ed      	b.n	133a6 <notify_cb+0x86>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   133ca:	2b01      	cmp	r3, #1
   133cc:	d1eb      	bne.n	133a6 <notify_cb+0x86>
   133ce:	8933      	ldrh	r3, [r6, #8]
   133d0:	07db      	lsls	r3, r3, #31
   133d2:	d5e8      	bpl.n	133a6 <notify_cb+0x86>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   133d4:	4620      	mov	r0, r4
   133d6:	692a      	ldr	r2, [r5, #16]
   133d8:	88a9      	ldrh	r1, [r5, #4]
   133da:	f7ff ff37 	bl	1324c <gatt_notify>
   133de:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   133e0:	4620      	mov	r0, r4
   133e2:	f7fd f9ed 	bl	107c0 <bt_conn_unref>
		if (err < 0) {
   133e6:	2e00      	cmp	r6, #0
   133e8:	dba3      	blt.n	13332 <notify_cb+0x12>
   133ea:	e7df      	b.n	133ac <notify_cb+0x8c>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   133ec:	4c10      	ldr	r4, [pc, #64]	; (13430 <notify_cb+0x110>)
   133ee:	4911      	ldr	r1, [pc, #68]	; (13434 <notify_cb+0x114>)
   133f0:	4620      	mov	r0, r4
   133f2:	f00a fc63 	bl	1dcbc <bt_addr_le_eq>
   133f6:	2800      	cmp	r0, #0
   133f8:	d1a2      	bne.n	13340 <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   133fa:	2207      	movs	r2, #7
   133fc:	4621      	mov	r1, r4
   133fe:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13402:	f7fd fc83 	bl	10d0c <bt_conn_lookup_state_le>
			if (!conn) {
   13406:	2800      	cmp	r0, #0
   13408:	d1ab      	bne.n	13362 <notify_cb+0x42>
				sc = (struct sc_data *)data->ind_params->data;
   1340a:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1340c:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1340e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13410:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13414:	8853      	ldrh	r3, [r2, #2]
   13416:	8812      	ldrh	r2, [r2, #0]
   13418:	f7ff f996 	bl	12748 <sc_save>
				continue;
   1341c:	e790      	b.n	13340 <notify_cb+0x20>
   1341e:	bf00      	nop
   13420:	00012651 	.word	0x00012651
   13424:	20008258 	.word	0x20008258
   13428:	00022a70 	.word	0x00022a70
   1342c:	0001f8d0 	.word	0x0001f8d0
   13430:	20009ba7 	.word	0x20009ba7
   13434:	000218c6 	.word	0x000218c6

00013438 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   13438:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1343a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1343c:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1343e:	466b      	mov	r3, sp
   13440:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13444:	4a03      	ldr	r2, [pc, #12]	; (13454 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   13446:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1344a:	f00a fd88 	bl	1df5e <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1344e:	b003      	add	sp, #12
   13450:	f85d fb04 	ldr.w	pc, [sp], #4
   13454:	00013161 	.word	0x00013161

00013458 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   13458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1345a:	4605      	mov	r5, r0
   1345c:	460e      	mov	r6, r1
   1345e:	4617      	mov	r7, r2
	return list->head;
   13460:	4b06      	ldr	r3, [pc, #24]	; (1347c <bt_gatt_att_max_mtu_changed+0x24>)
   13462:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13464:	b14c      	cbz	r4, 1347a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   13466:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1346a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1346c:	b11b      	cbz	r3, 13476 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1346e:	463a      	mov	r2, r7
   13470:	4631      	mov	r1, r6
   13472:	4628      	mov	r0, r5
   13474:	4798      	blx	r3
	return node->next;
   13476:	6864      	ldr	r4, [r4, #4]
   13478:	e7f4      	b.n	13464 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1347a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1347c:	200098d8 	.word	0x200098d8

00013480 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   13480:	b570      	push	{r4, r5, r6, lr}
   13482:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   13484:	4603      	mov	r3, r0
   13486:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1348a:	2001      	movs	r0, #1
   1348c:	4a0d      	ldr	r2, [pc, #52]	; (134c4 <bt_gatt_disconnected+0x44>)
   1348e:	f00a fd66 	bl	1df5e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   13492:	4620      	mov	r0, r4
   13494:	f7ff f8a0 	bl	125d8 <find_cf_cfg>
	if (!cfg) {
   13498:	4605      	mov	r5, r0
   1349a:	b188      	cbz	r0, 134c0 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1349c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   134a0:	4631      	mov	r1, r6
   134a2:	7a20      	ldrb	r0, [r4, #8]
   134a4:	f009 fd93 	bl	1cfce <bt_addr_le_is_bonded>
   134a8:	b920      	cbnz	r0, 134b4 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   134aa:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   134ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   134b0:	f7ff b932 	b.w	12718 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   134b4:	4631      	mov	r1, r6
   134b6:	1c68      	adds	r0, r5, #1
}
   134b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   134bc:	f00a bc06 	b.w	1dccc <bt_addr_le_copy>
}
   134c0:	bd70      	pop	{r4, r5, r6, pc}
   134c2:	bf00      	nop
   134c4:	0001285d 	.word	0x0001285d

000134c8 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   134c8:	b580      	push	{r7, lr}
   134ca:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   134cc:	b088      	sub	sp, #32
   134ce:	466a      	mov	r2, sp
   134d0:	4b07      	ldr	r3, [pc, #28]	; (134f0 <bt_smp_accept.part.0+0x28>)
   134d2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   134d6:	2303      	movs	r3, #3
   134d8:	f842 3f10 	str.w	r3, [r2, #16]!
   134dc:	2300      	movs	r3, #0
   134de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   134e2:	4804      	ldr	r0, [pc, #16]	; (134f4 <bt_smp_accept.part.0+0x2c>)
   134e4:	f7f8 f990 	bl	b808 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   134e8:	f06f 000b 	mvn.w	r0, #11
   134ec:	46bd      	mov	sp, r7
   134ee:	bd80      	pop	{r7, pc}
   134f0:	00022bc7 	.word	0x00022bc7
   134f4:	0001f8f8 	.word	0x0001f8f8

000134f8 <bt_smp_accept>:
		if (smp->chan.conn) {
   134f8:	4b04      	ldr	r3, [pc, #16]	; (1350c <bt_smp_accept+0x14>)
   134fa:	681a      	ldr	r2, [r3, #0]
   134fc:	b10a      	cbz	r2, 13502 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   134fe:	f7ff bfe3 	b.w	134c8 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   13502:	4803      	ldr	r0, [pc, #12]	; (13510 <bt_smp_accept+0x18>)
   13504:	6058      	str	r0, [r3, #4]
}
   13506:	4610      	mov	r0, r2
		*chan = &smp->chan;
   13508:	600b      	str	r3, [r1, #0]
}
   1350a:	4770      	bx	lr
   1350c:	200098e0 	.word	0x200098e0
   13510:	0001ffa8 	.word	0x0001ffa8

00013514 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   13514:	2234      	movs	r2, #52	; 0x34
   13516:	4b02      	ldr	r3, [pc, #8]	; (13520 <net_buf_pool_get+0xc>)
   13518:	fb02 3000 	mla	r0, r2, r0, r3
   1351c:	4770      	bx	lr
   1351e:	bf00      	nop
   13520:	200085cc 	.word	0x200085cc

00013524 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13524:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13526:	7982      	ldrb	r2, [r0, #6]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13528:	4b06      	ldr	r3, [pc, #24]	; (13544 <net_buf_id+0x20>)
   1352a:	fb01 3302 	mla	r3, r1, r2, r3
   1352e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13534:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13536:	3317      	adds	r3, #23
   13538:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1353c:	fbb0 f0f3 	udiv	r0, r0, r3
   13540:	4770      	bx	lr
   13542:	bf00      	nop
   13544:	200085cc 	.word	0x200085cc

00013548 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   13548:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1354a:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1354c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1354e:	4b09      	ldr	r3, [pc, #36]	; (13574 <fixed_data_alloc+0x2c>)
   13550:	fb04 3302 	mla	r3, r4, r2, r3
   13554:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   13556:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13558:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1355a:	681a      	ldr	r2, [r3, #0]
   1355c:	4294      	cmp	r4, r2
   1355e:	bf94      	ite	ls
   13560:	600c      	strls	r4, [r1, #0]
   13562:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13564:	e9d3 5400 	ldrd	r5, r4, [r3]
   13568:	f7ff ffdc 	bl	13524 <net_buf_id>
}
   1356c:	fb05 4000 	mla	r0, r5, r0, r4
   13570:	bd38      	pop	{r3, r4, r5, pc}
   13572:	bf00      	nop
   13574:	200085cc 	.word	0x200085cc

00013578 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   13578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1357c:	b085      	sub	sp, #20
   1357e:	9103      	str	r1, [sp, #12]
   13580:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   13582:	4619      	mov	r1, r3
   13584:	4610      	mov	r0, r2
{
   13586:	4692      	mov	sl, r2
   13588:	4699      	mov	r9, r3
   1358a:	4690      	mov	r8, r2
   1358c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1358e:	f00b fe5d 	bl	1f24c <sys_clock_timeout_end_calc>
   13592:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   13596:	b945      	cbnz	r5, 135aa <net_buf_alloc_len+0x32>
   13598:	4966      	ldr	r1, [pc, #408]	; (13734 <net_buf_alloc_len+0x1bc>)
   1359a:	23f4      	movs	r3, #244	; 0xf4
   1359c:	4a66      	ldr	r2, [pc, #408]	; (13738 <net_buf_alloc_len+0x1c0>)
   1359e:	4867      	ldr	r0, [pc, #412]	; (1373c <net_buf_alloc_len+0x1c4>)
   135a0:	f008 fbca 	bl	1bd38 <assert_print>
   135a4:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   135a6:	4864      	ldr	r0, [pc, #400]	; (13738 <net_buf_alloc_len+0x1c0>)
   135a8:	e019      	b.n	135de <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   135aa:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   135ae:	f04f 0320 	mov.w	r3, #32
   135b2:	f3ef 8b11 	mrs	fp, BASEPRI
   135b6:	f383 8812 	msr	BASEPRI_MAX, r3
   135ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   135be:	4630      	mov	r0, r6
   135c0:	f004 fdf8 	bl	181b4 <z_spin_lock_valid>
   135c4:	b968      	cbnz	r0, 135e2 <net_buf_alloc_len+0x6a>
   135c6:	2394      	movs	r3, #148	; 0x94
   135c8:	4a5d      	ldr	r2, [pc, #372]	; (13740 <net_buf_alloc_len+0x1c8>)
   135ca:	495e      	ldr	r1, [pc, #376]	; (13744 <net_buf_alloc_len+0x1cc>)
   135cc:	485b      	ldr	r0, [pc, #364]	; (1373c <net_buf_alloc_len+0x1c4>)
   135ce:	f008 fbb3 	bl	1bd38 <assert_print>
   135d2:	4631      	mov	r1, r6
   135d4:	485c      	ldr	r0, [pc, #368]	; (13748 <net_buf_alloc_len+0x1d0>)
   135d6:	f008 fbaf 	bl	1bd38 <assert_print>
   135da:	2194      	movs	r1, #148	; 0x94
   135dc:	4858      	ldr	r0, [pc, #352]	; (13740 <net_buf_alloc_len+0x1c8>)
   135de:	f008 fba4 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   135e2:	4630      	mov	r0, r6
   135e4:	f004 fe02 	bl	181ec <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   135e8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   135ea:	2b00      	cmp	r3, #0
   135ec:	d070      	beq.n	136d0 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   135ee:	8c2a      	ldrh	r2, [r5, #32]
   135f0:	429a      	cmp	r2, r3
   135f2:	d94d      	bls.n	13690 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   135f4:	2200      	movs	r2, #0
   135f6:	2300      	movs	r3, #0
   135f8:	4628      	mov	r0, r5
   135fa:	f005 f887 	bl	1870c <z_impl_k_queue_get>
			if (buf) {
   135fe:	4604      	mov	r4, r0
   13600:	2800      	cmp	r0, #0
   13602:	d045      	beq.n	13690 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13604:	4630      	mov	r0, r6
   13606:	f004 fde3 	bl	181d0 <z_spin_unlock_valid>
   1360a:	b958      	cbnz	r0, 13624 <net_buf_alloc_len+0xac>
   1360c:	23c2      	movs	r3, #194	; 0xc2
   1360e:	4a4c      	ldr	r2, [pc, #304]	; (13740 <net_buf_alloc_len+0x1c8>)
   13610:	494e      	ldr	r1, [pc, #312]	; (1374c <net_buf_alloc_len+0x1d4>)
   13612:	484a      	ldr	r0, [pc, #296]	; (1373c <net_buf_alloc_len+0x1c4>)
   13614:	f008 fb90 	bl	1bd38 <assert_print>
   13618:	4631      	mov	r1, r6
   1361a:	484d      	ldr	r0, [pc, #308]	; (13750 <net_buf_alloc_len+0x1d8>)
   1361c:	f008 fb8c 	bl	1bd38 <assert_print>
   13620:	21c2      	movs	r1, #194	; 0xc2
   13622:	e7db      	b.n	135dc <net_buf_alloc_len+0x64>
	__asm__ volatile(
   13624:	f38b 8811 	msr	BASEPRI, fp
   13628:	f3bf 8f6f 	isb	sy
	if (size) {
   1362c:	9d03      	ldr	r5, [sp, #12]
   1362e:	2d00      	cmp	r5, #0
   13630:	d074      	beq.n	1371c <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13632:	ea59 030a 	orrs.w	r3, r9, sl
   13636:	d012      	beq.n	1365e <net_buf_alloc_len+0xe6>
   13638:	f1b9 3fff 	cmp.w	r9, #4294967295
   1363c:	bf08      	it	eq
   1363e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13642:	d00c      	beq.n	1365e <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   13644:	f007 fbe2 	bl	1ae0c <sys_clock_tick_get>
   13648:	9b01      	ldr	r3, [sp, #4]
   1364a:	ebb3 0800 	subs.w	r8, r3, r0
   1364e:	9b02      	ldr	r3, [sp, #8]
   13650:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   13654:	2f00      	cmp	r7, #0
   13656:	bfbc      	itt	lt
   13658:	f04f 0800 	movlt.w	r8, #0
   1365c:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1365e:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13662:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13664:	4e3b      	ldr	r6, [pc, #236]	; (13754 <net_buf_alloc_len+0x1dc>)
   13666:	4642      	mov	r2, r8
   13668:	fb09 6303 	mla	r3, r9, r3, r6
   1366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1366e:	4620      	mov	r0, r4
   13670:	681b      	ldr	r3, [r3, #0]
   13672:	a903      	add	r1, sp, #12
   13674:	f8d3 a000 	ldr.w	sl, [r3]
   13678:	463b      	mov	r3, r7
   1367a:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1367c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1367e:	2800      	cmp	r0, #0
   13680:	d13c      	bne.n	136fc <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   13682:	79a0      	ldrb	r0, [r4, #6]
   13684:	4621      	mov	r1, r4
   13686:	fb00 6009 	mla	r0, r0, r9, r6
   1368a:	f00b fd26 	bl	1f0da <k_queue_prepend>
}
   1368e:	e030      	b.n	136f2 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   13690:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   13692:	4630      	mov	r0, r6
   13694:	1e63      	subs	r3, r4, #1
   13696:	846b      	strh	r3, [r5, #34]	; 0x22
   13698:	f004 fd9a 	bl	181d0 <z_spin_unlock_valid>
   1369c:	2800      	cmp	r0, #0
   1369e:	d0b5      	beq.n	1360c <net_buf_alloc_len+0x94>
   136a0:	f38b 8811 	msr	BASEPRI, fp
   136a4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   136a8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   136ac:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   136ae:	3317      	adds	r3, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   136b0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   136b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   136b4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   136b8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   136bc:	4b25      	ldr	r3, [pc, #148]	; (13754 <net_buf_alloc_len+0x1dc>)
   136be:	4a26      	ldr	r2, [pc, #152]	; (13758 <net_buf_alloc_len+0x1e0>)
   136c0:	1aeb      	subs	r3, r5, r3
   136c2:	109b      	asrs	r3, r3, #2
   136c4:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   136c6:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   136c8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   136cc:	71e3      	strb	r3, [r4, #7]
		goto success;
   136ce:	e7ad      	b.n	1362c <net_buf_alloc_len+0xb4>
   136d0:	4630      	mov	r0, r6
   136d2:	f004 fd7d 	bl	181d0 <z_spin_unlock_valid>
   136d6:	2800      	cmp	r0, #0
   136d8:	d098      	beq.n	1360c <net_buf_alloc_len+0x94>
   136da:	f38b 8811 	msr	BASEPRI, fp
   136de:	f3bf 8f6f 	isb	sy
   136e2:	4652      	mov	r2, sl
   136e4:	464b      	mov	r3, r9
   136e6:	4628      	mov	r0, r5
   136e8:	f005 f810 	bl	1870c <z_impl_k_queue_get>
	if (!buf) {
   136ec:	4604      	mov	r4, r0
   136ee:	2800      	cmp	r0, #0
   136f0:	d19c      	bne.n	1362c <net_buf_alloc_len+0xb4>
		return NULL;
   136f2:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   136f4:	4620      	mov	r0, r4
   136f6:	b005      	add	sp, #20
   136f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   136fc:	9b03      	ldr	r3, [sp, #12]
   136fe:	429d      	cmp	r5, r3
   13700:	d90d      	bls.n	1371e <net_buf_alloc_len+0x1a6>
   13702:	4916      	ldr	r1, [pc, #88]	; (1375c <net_buf_alloc_len+0x1e4>)
   13704:	f240 1355 	movw	r3, #341	; 0x155
   13708:	4a0b      	ldr	r2, [pc, #44]	; (13738 <net_buf_alloc_len+0x1c0>)
   1370a:	480c      	ldr	r0, [pc, #48]	; (1373c <net_buf_alloc_len+0x1c4>)
   1370c:	f008 fb14 	bl	1bd38 <assert_print>
   13710:	4813      	ldr	r0, [pc, #76]	; (13760 <net_buf_alloc_len+0x1e8>)
   13712:	f008 fb11 	bl	1bd38 <assert_print>
   13716:	f240 1155 	movw	r1, #341	; 0x155
   1371a:	e744      	b.n	135a6 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1371c:	6125      	str	r5, [r4, #16]
	buf->frags = NULL;
   1371e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   13720:	2201      	movs	r2, #1
	buf->frags = NULL;
   13722:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   13724:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   13726:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   13728:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1372a:	6923      	ldr	r3, [r4, #16]
   1372c:	81e2      	strh	r2, [r4, #14]
   1372e:	60a3      	str	r3, [r4, #8]
}
   13730:	e7e0      	b.n	136f4 <net_buf_alloc_len+0x17c>
   13732:	bf00      	nop
   13734:	00022c42 	.word	0x00022c42
   13738:	00022bf3 	.word	0x00022bf3
   1373c:	000205a4 	.word	0x000205a4
   13740:	000209d8 	.word	0x000209d8
   13744:	00020a31 	.word	0x00020a31
   13748:	00020a46 	.word	0x00020a46
   1374c:	00020a05 	.word	0x00020a05
   13750:	00020a1c 	.word	0x00020a1c
   13754:	200085cc 	.word	0x200085cc
   13758:	c4ec4ec5 	.word	0xc4ec4ec5
   1375c:	00022c47 	.word	0x00022c47
   13760:	00022c58 	.word	0x00022c58

00013764 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   13764:	b570      	push	{r4, r5, r6, lr}
   13766:	4606      	mov	r6, r0
   13768:	f004 ffd0 	bl	1870c <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1376c:	4605      	mov	r5, r0
   1376e:	b128      	cbz	r0, 1377c <net_buf_get+0x18>
   13770:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13772:	7963      	ldrb	r3, [r4, #5]
   13774:	f013 0301 	ands.w	r3, r3, #1
   13778:	d102      	bne.n	13780 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1377a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1377c:	4628      	mov	r0, r5
   1377e:	bd70      	pop	{r4, r5, r6, pc}
   13780:	2200      	movs	r2, #0
   13782:	2300      	movs	r3, #0
   13784:	4630      	mov	r0, r6
   13786:	f004 ffc1 	bl	1870c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1378a:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1378c:	b958      	cbnz	r0, 137a6 <net_buf_get+0x42>
   1378e:	4909      	ldr	r1, [pc, #36]	; (137b4 <net_buf_get+0x50>)
   13790:	4809      	ldr	r0, [pc, #36]	; (137b8 <net_buf_get+0x54>)
   13792:	f240 13ad 	movw	r3, #429	; 0x1ad
   13796:	4a09      	ldr	r2, [pc, #36]	; (137bc <net_buf_get+0x58>)
   13798:	f008 face 	bl	1bd38 <assert_print>
   1379c:	f240 11ad 	movw	r1, #429	; 0x1ad
   137a0:	4806      	ldr	r0, [pc, #24]	; (137bc <net_buf_get+0x58>)
   137a2:	f008 fac2 	bl	1bd2a <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   137a6:	7963      	ldrb	r3, [r4, #5]
   137a8:	f023 0301 	bic.w	r3, r3, #1
   137ac:	7163      	strb	r3, [r4, #5]
   137ae:	4604      	mov	r4, r0
   137b0:	e7df      	b.n	13772 <net_buf_get+0xe>
   137b2:	bf00      	nop
   137b4:	00022c5b 	.word	0x00022c5b
   137b8:	000205a4 	.word	0x000205a4
   137bc:	00022bf3 	.word	0x00022bf3

000137c0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   137c0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   137c2:	b958      	cbnz	r0, 137dc <net_buf_simple_reserve+0x1c>
   137c4:	490d      	ldr	r1, [pc, #52]	; (137fc <net_buf_simple_reserve+0x3c>)
   137c6:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   137ca:	4a0d      	ldr	r2, [pc, #52]	; (13800 <net_buf_simple_reserve+0x40>)
   137cc:	480d      	ldr	r0, [pc, #52]	; (13804 <net_buf_simple_reserve+0x44>)
   137ce:	f008 fab3 	bl	1bd38 <assert_print>
   137d2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT_NO_MSG(buf->len == 0U);
   137d6:	480a      	ldr	r0, [pc, #40]	; (13800 <net_buf_simple_reserve+0x40>)
   137d8:	f008 faa7 	bl	1bd2a <assert_post_action>
   137dc:	8883      	ldrh	r3, [r0, #4]
   137de:	b14b      	cbz	r3, 137f4 <net_buf_simple_reserve+0x34>
   137e0:	4909      	ldr	r1, [pc, #36]	; (13808 <net_buf_simple_reserve+0x48>)
   137e2:	f240 13c5 	movw	r3, #453	; 0x1c5
   137e6:	4a06      	ldr	r2, [pc, #24]	; (13800 <net_buf_simple_reserve+0x40>)
   137e8:	4806      	ldr	r0, [pc, #24]	; (13804 <net_buf_simple_reserve+0x44>)
   137ea:	f008 faa5 	bl	1bd38 <assert_print>
   137ee:	f240 11c5 	movw	r1, #453	; 0x1c5
   137f2:	e7f0      	b.n	137d6 <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   137f4:	6883      	ldr	r3, [r0, #8]
   137f6:	440b      	add	r3, r1
   137f8:	6003      	str	r3, [r0, #0]
}
   137fa:	bd08      	pop	{r3, pc}
   137fc:	000219e0 	.word	0x000219e0
   13800:	00022bf3 	.word	0x00022bf3
   13804:	000205a4 	.word	0x000205a4
   13808:	00022c67 	.word	0x00022c67

0001380c <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1380e:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   13810:	4604      	mov	r4, r0
   13812:	b958      	cbnz	r0, 1382c <net_buf_slist_put+0x20>
   13814:	492b      	ldr	r1, [pc, #172]	; (138c4 <net_buf_slist_put+0xb8>)
   13816:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1381a:	4a2b      	ldr	r2, [pc, #172]	; (138c8 <net_buf_slist_put+0xbc>)
   1381c:	482b      	ldr	r0, [pc, #172]	; (138cc <net_buf_slist_put+0xc0>)
   1381e:	f008 fa8b 	bl	1bd38 <assert_print>
   13822:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(buf);
   13826:	4828      	ldr	r0, [pc, #160]	; (138c8 <net_buf_slist_put+0xbc>)
   13828:	f008 fa7f 	bl	1bd2a <assert_post_action>
   1382c:	bb51      	cbnz	r1, 13884 <net_buf_slist_put+0x78>
   1382e:	4928      	ldr	r1, [pc, #160]	; (138d0 <net_buf_slist_put+0xc4>)
   13830:	f240 13d3 	movw	r3, #467	; 0x1d3
   13834:	4a24      	ldr	r2, [pc, #144]	; (138c8 <net_buf_slist_put+0xbc>)
   13836:	4825      	ldr	r0, [pc, #148]	; (138cc <net_buf_slist_put+0xc0>)
   13838:	f008 fa7e 	bl	1bd38 <assert_print>
   1383c:	f240 11d3 	movw	r1, #467	; 0x1d3
   13840:	e7f1      	b.n	13826 <net_buf_slist_put+0x1a>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   13842:	7973      	ldrb	r3, [r6, #5]
   13844:	f043 0301 	orr.w	r3, r3, #1
   13848:	7173      	strb	r3, [r6, #5]
   1384a:	4616      	mov	r6, r2
	for (tail = buf; tail->frags; tail = tail->frags) {
   1384c:	6832      	ldr	r2, [r6, #0]
   1384e:	2a00      	cmp	r2, #0
   13850:	d1f7      	bne.n	13842 <net_buf_slist_put+0x36>
	__asm__ volatile(
   13852:	f04f 0320 	mov.w	r3, #32
   13856:	f3ef 8711 	mrs	r7, BASEPRI
   1385a:	f383 8812 	msr	BASEPRI_MAX, r3
   1385e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13862:	481c      	ldr	r0, [pc, #112]	; (138d4 <net_buf_slist_put+0xc8>)
   13864:	f004 fca6 	bl	181b4 <z_spin_lock_valid>
   13868:	b970      	cbnz	r0, 13888 <net_buf_slist_put+0x7c>
   1386a:	2394      	movs	r3, #148	; 0x94
   1386c:	4a1a      	ldr	r2, [pc, #104]	; (138d8 <net_buf_slist_put+0xcc>)
   1386e:	491b      	ldr	r1, [pc, #108]	; (138dc <net_buf_slist_put+0xd0>)
   13870:	4816      	ldr	r0, [pc, #88]	; (138cc <net_buf_slist_put+0xc0>)
   13872:	f008 fa61 	bl	1bd38 <assert_print>
   13876:	4917      	ldr	r1, [pc, #92]	; (138d4 <net_buf_slist_put+0xc8>)
   13878:	4819      	ldr	r0, [pc, #100]	; (138e0 <net_buf_slist_put+0xd4>)
   1387a:	f008 fa5d 	bl	1bd38 <assert_print>
   1387e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13880:	4815      	ldr	r0, [pc, #84]	; (138d8 <net_buf_slist_put+0xcc>)
   13882:	e7d1      	b.n	13828 <net_buf_slist_put+0x1c>
   13884:	460e      	mov	r6, r1
   13886:	e7e1      	b.n	1384c <net_buf_slist_put+0x40>
	z_spin_lock_set_owner(l);
   13888:	4812      	ldr	r0, [pc, #72]	; (138d4 <net_buf_slist_put+0xc8>)
   1388a:	f004 fcaf 	bl	181ec <z_spin_lock_set_owner>
	return list->tail;
   1388e:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   13890:	b98b      	cbnz	r3, 138b6 <net_buf_slist_put+0xaa>
	list->head = node;
   13892:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13894:	480f      	ldr	r0, [pc, #60]	; (138d4 <net_buf_slist_put+0xc8>)
	list->tail = node;
   13896:	6066      	str	r6, [r4, #4]
   13898:	f004 fc9a 	bl	181d0 <z_spin_unlock_valid>
   1389c:	b968      	cbnz	r0, 138ba <net_buf_slist_put+0xae>
   1389e:	23c2      	movs	r3, #194	; 0xc2
   138a0:	4a0d      	ldr	r2, [pc, #52]	; (138d8 <net_buf_slist_put+0xcc>)
   138a2:	4910      	ldr	r1, [pc, #64]	; (138e4 <net_buf_slist_put+0xd8>)
   138a4:	4809      	ldr	r0, [pc, #36]	; (138cc <net_buf_slist_put+0xc0>)
   138a6:	f008 fa47 	bl	1bd38 <assert_print>
   138aa:	490a      	ldr	r1, [pc, #40]	; (138d4 <net_buf_slist_put+0xc8>)
   138ac:	480e      	ldr	r0, [pc, #56]	; (138e8 <net_buf_slist_put+0xdc>)
   138ae:	f008 fa43 	bl	1bd38 <assert_print>
   138b2:	21c2      	movs	r1, #194	; 0xc2
   138b4:	e7e4      	b.n	13880 <net_buf_slist_put+0x74>
	parent->next = child;
   138b6:	601d      	str	r5, [r3, #0]
}
   138b8:	e7ec      	b.n	13894 <net_buf_slist_put+0x88>
	__asm__ volatile(
   138ba:	f387 8811 	msr	BASEPRI, r7
   138be:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   138c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138c4:	00022c76 	.word	0x00022c76
   138c8:	00022bf3 	.word	0x00022bf3
   138cc:	000205a4 	.word	0x000205a4
   138d0:	000219e0 	.word	0x000219e0
   138d4:	20009974 	.word	0x20009974
   138d8:	000209d8 	.word	0x000209d8
   138dc:	00020a31 	.word	0x00020a31
   138e0:	00020a46 	.word	0x00020a46
   138e4:	00020a05 	.word	0x00020a05
   138e8:	00020a1c 	.word	0x00020a1c

000138ec <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   138ec:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   138ee:	4604      	mov	r4, r0
   138f0:	b950      	cbnz	r0, 13908 <net_buf_slist_get+0x1c>
   138f2:	4933      	ldr	r1, [pc, #204]	; (139c0 <net_buf_slist_get+0xd4>)
   138f4:	f240 13e3 	movw	r3, #483	; 0x1e3
   138f8:	4a32      	ldr	r2, [pc, #200]	; (139c4 <net_buf_slist_get+0xd8>)
   138fa:	4833      	ldr	r0, [pc, #204]	; (139c8 <net_buf_slist_get+0xdc>)
   138fc:	f008 fa1c 	bl	1bd38 <assert_print>
   13900:	f240 11e3 	movw	r1, #483	; 0x1e3

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   13904:	482f      	ldr	r0, [pc, #188]	; (139c4 <net_buf_slist_get+0xd8>)
   13906:	e017      	b.n	13938 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   13908:	f04f 0320 	mov.w	r3, #32
   1390c:	f3ef 8611 	mrs	r6, BASEPRI
   13910:	f383 8812 	msr	BASEPRI_MAX, r3
   13914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13918:	482c      	ldr	r0, [pc, #176]	; (139cc <net_buf_slist_get+0xe0>)
   1391a:	f004 fc4b 	bl	181b4 <z_spin_lock_valid>
   1391e:	b968      	cbnz	r0, 1393c <net_buf_slist_get+0x50>
   13920:	2394      	movs	r3, #148	; 0x94
   13922:	4a2b      	ldr	r2, [pc, #172]	; (139d0 <net_buf_slist_get+0xe4>)
   13924:	492b      	ldr	r1, [pc, #172]	; (139d4 <net_buf_slist_get+0xe8>)
   13926:	4828      	ldr	r0, [pc, #160]	; (139c8 <net_buf_slist_get+0xdc>)
   13928:	f008 fa06 	bl	1bd38 <assert_print>
   1392c:	4927      	ldr	r1, [pc, #156]	; (139cc <net_buf_slist_get+0xe0>)
   1392e:	482a      	ldr	r0, [pc, #168]	; (139d8 <net_buf_slist_get+0xec>)
   13930:	f008 fa02 	bl	1bd38 <assert_print>
   13934:	2194      	movs	r1, #148	; 0x94
   13936:	4826      	ldr	r0, [pc, #152]	; (139d0 <net_buf_slist_get+0xe4>)
   13938:	f008 f9f7 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1393c:	4823      	ldr	r0, [pc, #140]	; (139cc <net_buf_slist_get+0xe0>)
   1393e:	f004 fc55 	bl	181ec <z_spin_lock_set_owner>
	return list->head;
   13942:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   13944:	b15d      	cbz	r5, 1395e <net_buf_slist_get+0x72>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13946:	6862      	ldr	r2, [r4, #4]
	return node->next;
   13948:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1394a:	4295      	cmp	r5, r2
	list->head = node;
   1394c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1394e:	bf08      	it	eq
   13950:	6063      	streq	r3, [r4, #4]
{
   13952:	462b      	mov	r3, r5
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13954:	795a      	ldrb	r2, [r3, #5]
   13956:	f012 0201 	ands.w	r2, r2, #1
   1395a:	d110      	bne.n	1397e <net_buf_slist_get+0x92>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1395c:	601a      	str	r2, [r3, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1395e:	481b      	ldr	r0, [pc, #108]	; (139cc <net_buf_slist_get+0xe0>)
   13960:	f004 fc36 	bl	181d0 <z_spin_unlock_valid>
   13964:	bb28      	cbnz	r0, 139b2 <net_buf_slist_get+0xc6>
   13966:	23c2      	movs	r3, #194	; 0xc2
   13968:	4a19      	ldr	r2, [pc, #100]	; (139d0 <net_buf_slist_get+0xe4>)
   1396a:	491c      	ldr	r1, [pc, #112]	; (139dc <net_buf_slist_get+0xf0>)
   1396c:	4816      	ldr	r0, [pc, #88]	; (139c8 <net_buf_slist_get+0xdc>)
   1396e:	f008 f9e3 	bl	1bd38 <assert_print>
   13972:	4916      	ldr	r1, [pc, #88]	; (139cc <net_buf_slist_get+0xe0>)
   13974:	481a      	ldr	r0, [pc, #104]	; (139e0 <net_buf_slist_get+0xf4>)
   13976:	f008 f9df 	bl	1bd38 <assert_print>
   1397a:	21c2      	movs	r1, #194	; 0xc2
   1397c:	e7db      	b.n	13936 <net_buf_slist_get+0x4a>
	return list->head;
   1397e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_GET(slist, snode)
   13980:	b162      	cbz	r2, 1399c <net_buf_slist_get+0xb0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13982:	6860      	ldr	r0, [r4, #4]
	return node->next;
   13984:	6811      	ldr	r1, [r2, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13986:	4282      	cmp	r2, r0
	list->head = node;
   13988:	6021      	str	r1, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1398a:	d100      	bne.n	1398e <net_buf_slist_get+0xa2>
	list->tail = node;
   1398c:	6061      	str	r1, [r4, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   1398e:	7959      	ldrb	r1, [r3, #5]
			frag->frags = (void *)sys_slist_get(list);
   13990:	601a      	str	r2, [r3, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   13992:	f021 0101 	bic.w	r1, r1, #1
   13996:	7159      	strb	r1, [r3, #5]
   13998:	4613      	mov	r3, r2
   1399a:	e7db      	b.n	13954 <net_buf_slist_get+0x68>
			frag->frags = (void *)sys_slist_get(list);
   1399c:	601a      	str	r2, [r3, #0]
			__ASSERT_NO_MSG(frag->frags);
   1399e:	4911      	ldr	r1, [pc, #68]	; (139e4 <net_buf_slist_get+0xf8>)
   139a0:	f240 13ed 	movw	r3, #493	; 0x1ed
   139a4:	4a07      	ldr	r2, [pc, #28]	; (139c4 <net_buf_slist_get+0xd8>)
   139a6:	4808      	ldr	r0, [pc, #32]	; (139c8 <net_buf_slist_get+0xdc>)
   139a8:	f008 f9c6 	bl	1bd38 <assert_print>
   139ac:	f240 11ed 	movw	r1, #493	; 0x1ed
   139b0:	e7a8      	b.n	13904 <net_buf_slist_get+0x18>
	__asm__ volatile(
   139b2:	f386 8811 	msr	BASEPRI, r6
   139b6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   139ba:	4628      	mov	r0, r5
   139bc:	bd70      	pop	{r4, r5, r6, pc}
   139be:	bf00      	nop
   139c0:	00022c76 	.word	0x00022c76
   139c4:	00022bf3 	.word	0x00022bf3
   139c8:	000205a4 	.word	0x000205a4
   139cc:	20009974 	.word	0x20009974
   139d0:	000209d8 	.word	0x000209d8
   139d4:	00020a31 	.word	0x00020a31
   139d8:	00020a46 	.word	0x00020a46
   139dc:	00020a05 	.word	0x00020a05
   139e0:	00020a1c 	.word	0x00020a1c
   139e4:	00022c5b 	.word	0x00022c5b

000139e8 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   139e8:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   139ea:	b958      	cbnz	r0, 13a04 <net_buf_put+0x1c>
   139ec:	4912      	ldr	r1, [pc, #72]	; (13a38 <net_buf_put+0x50>)
   139ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   139f2:	4a12      	ldr	r2, [pc, #72]	; (13a3c <net_buf_put+0x54>)
   139f4:	4812      	ldr	r0, [pc, #72]	; (13a40 <net_buf_put+0x58>)
   139f6:	f008 f99f 	bl	1bd38 <assert_print>
   139fa:	f44f 7100 	mov.w	r1, #512	; 0x200
	__ASSERT_NO_MSG(buf);
   139fe:	480f      	ldr	r0, [pc, #60]	; (13a3c <net_buf_put+0x54>)
   13a00:	f008 f993 	bl	1bd2a <assert_post_action>
   13a04:	b9a9      	cbnz	r1, 13a32 <net_buf_put+0x4a>
   13a06:	490f      	ldr	r1, [pc, #60]	; (13a44 <net_buf_put+0x5c>)
   13a08:	f240 2301 	movw	r3, #513	; 0x201
   13a0c:	4a0b      	ldr	r2, [pc, #44]	; (13a3c <net_buf_put+0x54>)
   13a0e:	480c      	ldr	r0, [pc, #48]	; (13a40 <net_buf_put+0x58>)
   13a10:	f008 f992 	bl	1bd38 <assert_print>
   13a14:	f240 2101 	movw	r1, #513	; 0x201
   13a18:	e7f1      	b.n	139fe <net_buf_put+0x16>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   13a1a:	7953      	ldrb	r3, [r2, #5]
   13a1c:	f043 0301 	orr.w	r3, r3, #1
   13a20:	7153      	strb	r3, [r2, #5]
   13a22:	4622      	mov	r2, r4
	for (tail = buf; tail->frags; tail = tail->frags) {
   13a24:	6814      	ldr	r4, [r2, #0]
   13a26:	2c00      	cmp	r4, #0
   13a28:	d1f7      	bne.n	13a1a <net_buf_put+0x32>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   13a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put_list(fifo, buf, tail);
   13a2e:	f004 be0f 	b.w	18650 <k_queue_append_list>
   13a32:	460a      	mov	r2, r1
   13a34:	e7f6      	b.n	13a24 <net_buf_put+0x3c>
   13a36:	bf00      	nop
   13a38:	00022c7b 	.word	0x00022c7b
   13a3c:	00022bf3 	.word	0x00022bf3
   13a40:	000205a4 	.word	0x000205a4
   13a44:	000219e0 	.word	0x000219e0

00013a48 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   13a4c:	4605      	mov	r5, r0
   13a4e:	b328      	cbz	r0, 13a9c <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13a50:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   13a52:	f04f 0834 	mov.w	r8, #52	; 0x34
   13a56:	4e1a      	ldr	r6, [pc, #104]	; (13ac0 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   13a58:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   13a5a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13a5c:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   13a5e:	3b01      	subs	r3, #1
   13a60:	b2db      	uxtb	r3, r3
   13a62:	7123      	strb	r3, [r4, #4]
   13a64:	b9c3      	cbnz	r3, 13a98 <net_buf_unref+0x50>
		if (buf->__buf) {
   13a66:	6921      	ldr	r1, [r4, #16]
   13a68:	b159      	cbz	r1, 13a82 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13a6a:	7963      	ldrb	r3, [r4, #5]
   13a6c:	079b      	lsls	r3, r3, #30
   13a6e:	d407      	bmi.n	13a80 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13a70:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   13a72:	4620      	mov	r0, r4
   13a74:	fb08 6303 	mla	r3, r8, r3, r6
   13a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13a7a:	681b      	ldr	r3, [r3, #0]
   13a7c:	689b      	ldr	r3, [r3, #8]
   13a7e:	4798      	blx	r3
			buf->__buf = NULL;
   13a80:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   13a82:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13a84:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   13a86:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   13a8a:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   13a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13a8e:	b18b      	cbz	r3, 13ab4 <net_buf_unref+0x6c>
			pool->destroy(buf);
   13a90:	4620      	mov	r0, r4
   13a92:	4798      	blx	r3
	while (buf) {
   13a94:	2d00      	cmp	r5, #0
   13a96:	d1df      	bne.n	13a58 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   13a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   13a9c:	4909      	ldr	r1, [pc, #36]	; (13ac4 <net_buf_unref+0x7c>)
   13a9e:	480a      	ldr	r0, [pc, #40]	; (13ac8 <net_buf_unref+0x80>)
   13aa0:	f44f 7304 	mov.w	r3, #528	; 0x210
   13aa4:	4a09      	ldr	r2, [pc, #36]	; (13acc <net_buf_unref+0x84>)
   13aa6:	f008 f947 	bl	1bd38 <assert_print>
   13aaa:	f44f 7104 	mov.w	r1, #528	; 0x210
   13aae:	4807      	ldr	r0, [pc, #28]	; (13acc <net_buf_unref+0x84>)
   13ab0:	f008 f93b 	bl	1bd2a <assert_post_action>
	k_lifo_put(&pool->free, buf);
   13ab4:	4621      	mov	r1, r4
   13ab6:	fb00 6008 	mla	r0, r0, r8, r6
   13aba:	f00b fb0e 	bl	1f0da <k_queue_prepend>
}
   13abe:	e7e9      	b.n	13a94 <net_buf_unref+0x4c>
   13ac0:	200085cc 	.word	0x200085cc
   13ac4:	000219e0 	.word	0x000219e0
   13ac8:	000205a4 	.word	0x000205a4
   13acc:	00022bf3 	.word	0x00022bf3

00013ad0 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   13ad0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   13ad2:	b958      	cbnz	r0, 13aec <net_buf_ref+0x1c>
   13ad4:	4907      	ldr	r1, [pc, #28]	; (13af4 <net_buf_ref+0x24>)
   13ad6:	4808      	ldr	r0, [pc, #32]	; (13af8 <net_buf_ref+0x28>)
   13ad8:	f240 233f 	movw	r3, #575	; 0x23f
   13adc:	4a07      	ldr	r2, [pc, #28]	; (13afc <net_buf_ref+0x2c>)
   13ade:	f008 f92b 	bl	1bd38 <assert_print>
   13ae2:	f240 213f 	movw	r1, #575	; 0x23f
   13ae6:	4805      	ldr	r0, [pc, #20]	; (13afc <net_buf_ref+0x2c>)
   13ae8:	f008 f91f 	bl	1bd2a <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13aec:	7902      	ldrb	r2, [r0, #4]
   13aee:	3201      	adds	r2, #1
   13af0:	7102      	strb	r2, [r0, #4]
	return buf;
}
   13af2:	bd08      	pop	{r3, pc}
   13af4:	000219e0 	.word	0x000219e0
   13af8:	000205a4 	.word	0x000205a4
   13afc:	00022bf3 	.word	0x00022bf3

00013b00 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   13b00:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   13b02:	4603      	mov	r3, r0
   13b04:	b958      	cbnz	r0, 13b1e <net_buf_frag_last+0x1e>
   13b06:	4908      	ldr	r1, [pc, #32]	; (13b28 <net_buf_frag_last+0x28>)
   13b08:	4808      	ldr	r0, [pc, #32]	; (13b2c <net_buf_frag_last+0x2c>)
   13b0a:	f44f 731f 	mov.w	r3, #636	; 0x27c
   13b0e:	4a08      	ldr	r2, [pc, #32]	; (13b30 <net_buf_frag_last+0x30>)
   13b10:	f008 f912 	bl	1bd38 <assert_print>
   13b14:	f44f 711f 	mov.w	r1, #636	; 0x27c
   13b18:	4805      	ldr	r0, [pc, #20]	; (13b30 <net_buf_frag_last+0x30>)
   13b1a:	f008 f906 	bl	1bd2a <assert_post_action>

	while (buf->frags) {
   13b1e:	4618      	mov	r0, r3
   13b20:	681b      	ldr	r3, [r3, #0]
   13b22:	2b00      	cmp	r3, #0
   13b24:	d1fb      	bne.n	13b1e <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   13b26:	bd08      	pop	{r3, pc}
   13b28:	000219e0 	.word	0x000219e0
   13b2c:	000205a4 	.word	0x000205a4
   13b30:	00022bf3 	.word	0x00022bf3

00013b34 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   13b34:	b570      	push	{r4, r5, r6, lr}
   13b36:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   13b38:	4604      	mov	r4, r0
   13b3a:	b958      	cbnz	r0, 13b54 <net_buf_frag_insert+0x20>
   13b3c:	490f      	ldr	r1, [pc, #60]	; (13b7c <net_buf_frag_insert+0x48>)
   13b3e:	f240 2387 	movw	r3, #647	; 0x287
   13b42:	4a0f      	ldr	r2, [pc, #60]	; (13b80 <net_buf_frag_insert+0x4c>)
   13b44:	480f      	ldr	r0, [pc, #60]	; (13b84 <net_buf_frag_insert+0x50>)
   13b46:	f008 f8f7 	bl	1bd38 <assert_print>
   13b4a:	f240 2187 	movw	r1, #647	; 0x287
	__ASSERT_NO_MSG(frag);
   13b4e:	480c      	ldr	r0, [pc, #48]	; (13b80 <net_buf_frag_insert+0x4c>)
   13b50:	f008 f8eb 	bl	1bd2a <assert_post_action>
   13b54:	b949      	cbnz	r1, 13b6a <net_buf_frag_insert+0x36>
   13b56:	490c      	ldr	r1, [pc, #48]	; (13b88 <net_buf_frag_insert+0x54>)
   13b58:	f44f 7322 	mov.w	r3, #648	; 0x288
   13b5c:	4a08      	ldr	r2, [pc, #32]	; (13b80 <net_buf_frag_insert+0x4c>)
   13b5e:	4809      	ldr	r0, [pc, #36]	; (13b84 <net_buf_frag_insert+0x50>)
   13b60:	f008 f8ea 	bl	1bd38 <assert_print>
   13b64:	f44f 7122 	mov.w	r1, #648	; 0x288
   13b68:	e7f1      	b.n	13b4e <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   13b6a:	6806      	ldr	r6, [r0, #0]
   13b6c:	b11e      	cbz	r6, 13b76 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   13b6e:	4608      	mov	r0, r1
   13b70:	f7ff ffc6 	bl	13b00 <net_buf_frag_last>
   13b74:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   13b76:	6025      	str	r5, [r4, #0]
}
   13b78:	bd70      	pop	{r4, r5, r6, pc}
   13b7a:	bf00      	nop
   13b7c:	00022c80 	.word	0x00022c80
   13b80:	00022bf3 	.word	0x00022bf3
   13b84:	000205a4 	.word	0x000205a4
   13b88:	00022c87 	.word	0x00022c87

00013b8c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   13b8c:	b538      	push	{r3, r4, r5, lr}
   13b8e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   13b90:	460c      	mov	r4, r1
   13b92:	b959      	cbnz	r1, 13bac <net_buf_frag_add+0x20>
   13b94:	490c      	ldr	r1, [pc, #48]	; (13bc8 <net_buf_frag_add+0x3c>)
   13b96:	480d      	ldr	r0, [pc, #52]	; (13bcc <net_buf_frag_add+0x40>)
   13b98:	f240 2393 	movw	r3, #659	; 0x293
   13b9c:	4a0c      	ldr	r2, [pc, #48]	; (13bd0 <net_buf_frag_add+0x44>)
   13b9e:	f008 f8cb 	bl	1bd38 <assert_print>
   13ba2:	f240 2193 	movw	r1, #659	; 0x293
   13ba6:	480a      	ldr	r0, [pc, #40]	; (13bd0 <net_buf_frag_add+0x44>)
   13ba8:	f008 f8bf 	bl	1bd2a <assert_post_action>

	if (!head) {
   13bac:	b920      	cbnz	r0, 13bb8 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   13bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   13bb2:	4608      	mov	r0, r1
   13bb4:	f7ff bf8c 	b.w	13ad0 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   13bb8:	f7ff ffa2 	bl	13b00 <net_buf_frag_last>
   13bbc:	4621      	mov	r1, r4
   13bbe:	f7ff ffb9 	bl	13b34 <net_buf_frag_insert>
}
   13bc2:	4628      	mov	r0, r5
   13bc4:	bd38      	pop	{r3, r4, r5, pc}
   13bc6:	bf00      	nop
   13bc8:	00022c87 	.word	0x00022c87
   13bcc:	000205a4 	.word	0x000205a4
   13bd0:	00022bf3 	.word	0x00022bf3

00013bd4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   13bd4:	b508      	push	{r3, lr}
   13bd6:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13bd8:	6800      	ldr	r0, [r0, #0]
   13bda:	689a      	ldr	r2, [r3, #8]
   13bdc:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   13bde:	4291      	cmp	r1, r2
   13be0:	d90b      	bls.n	13bfa <net_buf_simple_push+0x26>
   13be2:	4909      	ldr	r1, [pc, #36]	; (13c08 <net_buf_simple_push+0x34>)
   13be4:	4809      	ldr	r0, [pc, #36]	; (13c0c <net_buf_simple_push+0x38>)
   13be6:	f240 4317 	movw	r3, #1047	; 0x417
   13bea:	4a09      	ldr	r2, [pc, #36]	; (13c10 <net_buf_simple_push+0x3c>)
   13bec:	f008 f8a4 	bl	1bd38 <assert_print>
   13bf0:	f240 4117 	movw	r1, #1047	; 0x417
   13bf4:	4806      	ldr	r0, [pc, #24]	; (13c10 <net_buf_simple_push+0x3c>)
   13bf6:	f008 f898 	bl	1bd2a <assert_post_action>
	buf->len += len;
   13bfa:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   13bfc:	1a40      	subs	r0, r0, r1
	buf->len += len;
   13bfe:	4411      	add	r1, r2
	buf->data -= len;
   13c00:	6018      	str	r0, [r3, #0]
	buf->len += len;
   13c02:	8099      	strh	r1, [r3, #4]
}
   13c04:	bd08      	pop	{r3, pc}
   13c06:	bf00      	nop
   13c08:	00022c9c 	.word	0x00022c9c
   13c0c:	000205a4 	.word	0x000205a4
   13c10:	00022bf3 	.word	0x00022bf3

00013c14 <net_buf_simple_pull>:
{
   13c14:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   13c16:	8882      	ldrh	r2, [r0, #4]
{
   13c18:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   13c1a:	428a      	cmp	r2, r1
   13c1c:	d20b      	bcs.n	13c36 <net_buf_simple_pull+0x22>
   13c1e:	4909      	ldr	r1, [pc, #36]	; (13c44 <net_buf_simple_pull+0x30>)
   13c20:	4809      	ldr	r0, [pc, #36]	; (13c48 <net_buf_simple_pull+0x34>)
   13c22:	f240 4377 	movw	r3, #1143	; 0x477
   13c26:	4a09      	ldr	r2, [pc, #36]	; (13c4c <net_buf_simple_pull+0x38>)
   13c28:	f008 f886 	bl	1bd38 <assert_print>
   13c2c:	f240 4177 	movw	r1, #1143	; 0x477
   13c30:	4806      	ldr	r0, [pc, #24]	; (13c4c <net_buf_simple_pull+0x38>)
   13c32:	f008 f87a 	bl	1bd2a <assert_post_action>
	buf->len -= len;
   13c36:	1a52      	subs	r2, r2, r1
   13c38:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   13c3a:	6800      	ldr	r0, [r0, #0]
   13c3c:	4408      	add	r0, r1
   13c3e:	6018      	str	r0, [r3, #0]
}
   13c40:	bd08      	pop	{r3, pc}
   13c42:	bf00      	nop
   13c44:	00022c8c 	.word	0x00022c8c
   13c48:	000205a4 	.word	0x000205a4
   13c4c:	00022bf3 	.word	0x00022bf3

00013c50 <net_buf_simple_pull_mem>:
{
   13c50:	b508      	push	{r3, lr}
   13c52:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   13c54:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   13c56:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   13c58:	428a      	cmp	r2, r1
   13c5a:	d20b      	bcs.n	13c74 <net_buf_simple_pull_mem+0x24>
   13c5c:	4908      	ldr	r1, [pc, #32]	; (13c80 <net_buf_simple_pull_mem+0x30>)
   13c5e:	4809      	ldr	r0, [pc, #36]	; (13c84 <net_buf_simple_pull_mem+0x34>)
   13c60:	f240 4383 	movw	r3, #1155	; 0x483
   13c64:	4a08      	ldr	r2, [pc, #32]	; (13c88 <net_buf_simple_pull_mem+0x38>)
   13c66:	f008 f867 	bl	1bd38 <assert_print>
   13c6a:	f240 4183 	movw	r1, #1155	; 0x483
   13c6e:	4806      	ldr	r0, [pc, #24]	; (13c88 <net_buf_simple_pull_mem+0x38>)
   13c70:	f008 f85b 	bl	1bd2a <assert_post_action>
	buf->len -= len;
   13c74:	1a52      	subs	r2, r2, r1
	buf->data += len;
   13c76:	4401      	add	r1, r0
	buf->len -= len;
   13c78:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   13c7a:	6019      	str	r1, [r3, #0]
}
   13c7c:	bd08      	pop	{r3, pc}
   13c7e:	bf00      	nop
   13c80:	00022c8c 	.word	0x00022c8c
   13c84:	000205a4 	.word	0x000205a4
   13c88:	00022bf3 	.word	0x00022bf3

00013c8c <net_buf_simple_add>:
{
   13c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   13c8e:	8885      	ldrh	r5, [r0, #4]
   13c90:	6803      	ldr	r3, [r0, #0]
   13c92:	460e      	mov	r6, r1
   13c94:	4604      	mov	r4, r0
   13c96:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   13c98:	f00a fa17 	bl	1e0ca <net_buf_simple_tailroom>
   13c9c:	42b0      	cmp	r0, r6
   13c9e:	d20b      	bcs.n	13cb8 <net_buf_simple_add+0x2c>
   13ca0:	4907      	ldr	r1, [pc, #28]	; (13cc0 <net_buf_simple_add+0x34>)
   13ca2:	4808      	ldr	r0, [pc, #32]	; (13cc4 <net_buf_simple_add+0x38>)
   13ca4:	f44f 734a 	mov.w	r3, #808	; 0x328
   13ca8:	4a07      	ldr	r2, [pc, #28]	; (13cc8 <net_buf_simple_add+0x3c>)
   13caa:	f008 f845 	bl	1bd38 <assert_print>
   13cae:	f44f 714a 	mov.w	r1, #808	; 0x328
   13cb2:	4805      	ldr	r0, [pc, #20]	; (13cc8 <net_buf_simple_add+0x3c>)
   13cb4:	f008 f839 	bl	1bd2a <assert_post_action>
	buf->len += len;
   13cb8:	4435      	add	r5, r6
   13cba:	80a5      	strh	r5, [r4, #4]
}
   13cbc:	4638      	mov	r0, r7
   13cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13cc0:	00022cc0 	.word	0x00022cc0
   13cc4:	000205a4 	.word	0x000205a4
   13cc8:	00022bf3 	.word	0x00022bf3

00013ccc <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   13ccc:	b508      	push	{r3, lr}
   13cce:	4804      	ldr	r0, [pc, #16]	; (13ce0 <xoshiro128_initialize+0x14>)
   13cd0:	f00b f98f 	bl	1eff2 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   13cd4:	2800      	cmp	r0, #0
}
   13cd6:	bf0c      	ite	eq
   13cd8:	f06f 0012 	mvneq.w	r0, #18
   13cdc:	2000      	movne	r0, #0
   13cde:	bd08      	pop	{r3, pc}
   13ce0:	0001f558 	.word	0x0001f558

00013ce4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13ce6:	2340      	movs	r3, #64	; 0x40
{
   13ce8:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13cea:	490a      	ldr	r1, [pc, #40]	; (13d14 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13cec:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   13cee:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13cf0:	1149      	asrs	r1, r1, #5
{
   13cf2:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13cf4:	4623      	mov	r3, r4
   13cf6:	4a08      	ldr	r2, [pc, #32]	; (13d18 <onoff_start+0x34>)
   13cf8:	4808      	ldr	r0, [pc, #32]	; (13d1c <onoff_start+0x38>)
   13cfa:	f00a fa14 	bl	1e126 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   13cfe:	1e01      	subs	r1, r0, #0
   13d00:	da05      	bge.n	13d0e <onoff_start+0x2a>
		notify(mgr, err);
   13d02:	4628      	mov	r0, r5
   13d04:	4623      	mov	r3, r4
	}
}
   13d06:	b003      	add	sp, #12
   13d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   13d0c:	4718      	bx	r3
}
   13d0e:	b003      	add	sp, #12
   13d10:	bd30      	pop	{r4, r5, pc}
   13d12:	bf00      	nop
   13d14:	2000998c 	.word	0x2000998c
   13d18:	0001e195 	.word	0x0001e195
   13d1c:	0001f4f8 	.word	0x0001f4f8

00013d20 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13d20:	b2c9      	uxtb	r1, r1
   13d22:	2903      	cmp	r1, #3
{
   13d24:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13d26:	d909      	bls.n	13d3c <get_status+0x1c>
   13d28:	4909      	ldr	r1, [pc, #36]	; (13d50 <get_status+0x30>)
   13d2a:	480a      	ldr	r0, [pc, #40]	; (13d54 <get_status+0x34>)
   13d2c:	237a      	movs	r3, #122	; 0x7a
   13d2e:	4a0a      	ldr	r2, [pc, #40]	; (13d58 <get_status+0x38>)
   13d30:	f008 f802 	bl	1bd38 <assert_print>
   13d34:	217a      	movs	r1, #122	; 0x7a
   13d36:	4808      	ldr	r0, [pc, #32]	; (13d58 <get_status+0x38>)
   13d38:	f007 fff7 	bl	1bd2a <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13d3c:	220c      	movs	r2, #12
   13d3e:	6903      	ldr	r3, [r0, #16]
   13d40:	fb01 3302 	mla	r3, r1, r2, r3
   13d44:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   13d48:	f000 0007 	and.w	r0, r0, #7
   13d4c:	bd08      	pop	{r3, pc}
   13d4e:	bf00      	nop
   13d50:	00022d29 	.word	0x00022d29
   13d54:	000205a4 	.word	0x000205a4
   13d58:	00022cec 	.word	0x00022cec

00013d5c <stop>:
{
   13d5c:	b570      	push	{r4, r5, r6, lr}
   13d5e:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13d60:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   13d62:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13d64:	d90b      	bls.n	13d7e <stop+0x22>
   13d66:	491a      	ldr	r1, [pc, #104]	; (13dd0 <stop+0x74>)
   13d68:	481a      	ldr	r0, [pc, #104]	; (13dd4 <stop+0x78>)
   13d6a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   13d6e:	4a1a      	ldr	r2, [pc, #104]	; (13dd8 <stop+0x7c>)
   13d70:	f007 ffe2 	bl	1bd38 <assert_print>
   13d74:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   13d78:	4817      	ldr	r0, [pc, #92]	; (13dd8 <stop+0x7c>)
   13d7a:	f007 ffd6 	bl	1bd2a <assert_post_action>
	__asm__ volatile(
   13d7e:	f04f 0420 	mov.w	r4, #32
   13d82:	f3ef 8511 	mrs	r5, BASEPRI
   13d86:	f384 8812 	msr	BASEPRI_MAX, r4
   13d8a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13d8e:	260c      	movs	r6, #12
   13d90:	fb06 3401 	mla	r4, r6, r1, r3
   13d94:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13d98:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   13d9c:	d008      	beq.n	13db0 <stop+0x54>
   13d9e:	42a2      	cmp	r2, r4
   13da0:	d006      	beq.n	13db0 <stop+0x54>
	__asm__ volatile(
   13da2:	f385 8811 	msr	BASEPRI, r5
   13da6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   13daa:	f04f 30ff 	mov.w	r0, #4294967295
}
   13dae:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13db0:	2201      	movs	r2, #1
   13db2:	4371      	muls	r1, r6
   13db4:	440b      	add	r3, r1
   13db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   13dba:	f385 8811 	msr	BASEPRI, r5
   13dbe:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   13dc2:	6843      	ldr	r3, [r0, #4]
   13dc4:	440b      	add	r3, r1
   13dc6:	685b      	ldr	r3, [r3, #4]
   13dc8:	4798      	blx	r3
	return 0;
   13dca:	2000      	movs	r0, #0
   13dcc:	e7ef      	b.n	13dae <stop+0x52>
   13dce:	bf00      	nop
   13dd0:	00022d29 	.word	0x00022d29
   13dd4:	000205a4 	.word	0x000205a4
   13dd8:	00022cec 	.word	0x00022cec

00013ddc <onoff_stop>:
{
   13ddc:	b570      	push	{r4, r5, r6, lr}
   13dde:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13de0:	4906      	ldr	r1, [pc, #24]	; (13dfc <onoff_stop+0x20>)
{
   13de2:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13de4:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13de6:	1149      	asrs	r1, r1, #5
   13de8:	2240      	movs	r2, #64	; 0x40
   13dea:	4805      	ldr	r0, [pc, #20]	; (13e00 <onoff_stop+0x24>)
   13dec:	f7ff ffb6 	bl	13d5c <stop>
	notify(mgr, res);
   13df0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13df2:	4601      	mov	r1, r0
	notify(mgr, res);
   13df4:	4620      	mov	r0, r4
}
   13df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13dfa:	4718      	bx	r3
   13dfc:	2000998c 	.word	0x2000998c
   13e00:	0001f4f8 	.word	0x0001f4f8

00013e04 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   13e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13e08:	2200      	movs	r2, #0
   13e0a:	2101      	movs	r1, #1
{
   13e0c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13e0e:	2005      	movs	r0, #5
   13e10:	f7f8 ff76 	bl	cd00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13e14:	4811      	ldr	r0, [pc, #68]	; (13e5c <clk_init+0x58>)
   13e16:	f001 ffff 	bl	15e18 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13e1a:	4b11      	ldr	r3, [pc, #68]	; (13e60 <clk_init+0x5c>)
   13e1c:	4298      	cmp	r0, r3
   13e1e:	d119      	bne.n	13e54 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13e20:	f002 f81e 	bl	15e60 <nrfx_clock_enable>
   13e24:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13e26:	f04f 080c 	mov.w	r8, #12
   13e2a:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13e2c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 13e64 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   13e30:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13e32:	4649      	mov	r1, r9
   13e34:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   13e38:	f007 fef3 	bl	1bc22 <onoff_manager_init>
		if (err < 0) {
   13e3c:	2800      	cmp	r0, #0
   13e3e:	db07      	blt.n	13e50 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13e40:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13e44:	3401      	adds	r4, #1
   13e46:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13e48:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13e4c:	d1f0      	bne.n	13e30 <clk_init+0x2c>
	}

	return 0;
   13e4e:	2000      	movs	r0, #0
}
   13e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   13e54:	f06f 0004 	mvn.w	r0, #4
   13e58:	e7fa      	b.n	13e50 <clk_init+0x4c>
   13e5a:	bf00      	nop
   13e5c:	00013ea1 	.word	0x00013ea1
   13e60:	0bad0000 	.word	0x0bad0000
   13e64:	0001ffdc 	.word	0x0001ffdc

00013e68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   13e68:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   13e6a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   13e6c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   13e6e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13e70:	434b      	muls	r3, r1
   13e72:	4809      	ldr	r0, [pc, #36]	; (13e98 <clkstarted_handle.constprop.0+0x30>)
   13e74:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   13e76:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   13e78:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   13e7c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   13e7e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   13e82:	f00a f93d 	bl	1e100 <set_on_state>
	if (callback) {
   13e86:	b12d      	cbz	r5, 13e94 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13e88:	4632      	mov	r2, r6
   13e8a:	462b      	mov	r3, r5
}
   13e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13e90:	4802      	ldr	r0, [pc, #8]	; (13e9c <clkstarted_handle.constprop.0+0x34>)
   13e92:	4718      	bx	r3
}
   13e94:	bd70      	pop	{r4, r5, r6, pc}
   13e96:	bf00      	nop
   13e98:	2000998c 	.word	0x2000998c
   13e9c:	0001f4f8 	.word	0x0001f4f8

00013ea0 <clock_event_handler>:
{
   13ea0:	b508      	push	{r3, lr}
	switch (event) {
   13ea2:	2805      	cmp	r0, #5
   13ea4:	d820      	bhi.n	13ee8 <clock_event_handler+0x48>
   13ea6:	e8df f000 	tbb	[pc, r0]
   13eaa:	1103      	.short	0x1103
   13eac:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13eb0:	4b13      	ldr	r3, [pc, #76]	; (13f00 <clock_event_handler+0x60>)
   13eb2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   13eb6:	f010 0007 	ands.w	r0, r0, #7
   13eba:	d11f      	bne.n	13efc <clock_event_handler+0x5c>
}
   13ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13ec0:	f7ff bfd2 	b.w	13e68 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   13ec4:	2002      	movs	r0, #2
   13ec6:	e7f9      	b.n	13ebc <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   13ec8:	2003      	movs	r0, #3
   13eca:	e7f7      	b.n	13ebc <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13ecc:	2001      	movs	r0, #1
   13ece:	e7f5      	b.n	13ebc <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   13ed0:	490c      	ldr	r1, [pc, #48]	; (13f04 <clock_event_handler+0x64>)
   13ed2:	f240 235f 	movw	r3, #607	; 0x25f
   13ed6:	4a0c      	ldr	r2, [pc, #48]	; (13f08 <clock_event_handler+0x68>)
   13ed8:	480c      	ldr	r0, [pc, #48]	; (13f0c <clock_event_handler+0x6c>)
   13eda:	f007 ff2d 	bl	1bd38 <assert_print>
   13ede:	f240 215f 	movw	r1, #607	; 0x25f
		__ASSERT_NO_MSG(0);
   13ee2:	4809      	ldr	r0, [pc, #36]	; (13f08 <clock_event_handler+0x68>)
   13ee4:	f007 ff21 	bl	1bd2a <assert_post_action>
   13ee8:	4906      	ldr	r1, [pc, #24]	; (13f04 <clock_event_handler+0x64>)
   13eea:	f240 2363 	movw	r3, #611	; 0x263
   13eee:	4a06      	ldr	r2, [pc, #24]	; (13f08 <clock_event_handler+0x68>)
   13ef0:	4806      	ldr	r0, [pc, #24]	; (13f0c <clock_event_handler+0x6c>)
   13ef2:	f007 ff21 	bl	1bd38 <assert_print>
   13ef6:	f240 2163 	movw	r1, #611	; 0x263
   13efa:	e7f2      	b.n	13ee2 <clock_event_handler+0x42>
}
   13efc:	bd08      	pop	{r3, pc}
   13efe:	bf00      	nop
   13f00:	2000998c 	.word	0x2000998c
   13f04:	0002357e 	.word	0x0002357e
   13f08:	00022cec 	.word	0x00022cec
   13f0c:	000205a4 	.word	0x000205a4

00013f10 <generic_hfclk_start>:
{
   13f10:	b508      	push	{r3, lr}
	__asm__ volatile(
   13f12:	f04f 0320 	mov.w	r3, #32
   13f16:	f3ef 8111 	mrs	r1, BASEPRI
   13f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   13f1e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13f22:	4a11      	ldr	r2, [pc, #68]	; (13f68 <generic_hfclk_start+0x58>)
   13f24:	6813      	ldr	r3, [r2, #0]
   13f26:	f043 0002 	orr.w	r0, r3, #2
   13f2a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13f2c:	07da      	lsls	r2, r3, #31
   13f2e:	d408      	bmi.n	13f42 <generic_hfclk_start+0x32>
	__asm__ volatile(
   13f30:	f381 8811 	msr	BASEPRI, r1
   13f34:	f3bf 8f6f 	isb	sy
}
   13f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13f3c:	2001      	movs	r0, #1
   13f3e:	f001 bfb9 	b.w	15eb4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13f42:	4b0a      	ldr	r3, [pc, #40]	; (13f6c <generic_hfclk_start+0x5c>)
   13f44:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13f48:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13f4c:	07d3      	lsls	r3, r2, #31
   13f4e:	d5ef      	bpl.n	13f30 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   13f50:	4807      	ldr	r0, [pc, #28]	; (13f70 <generic_hfclk_start+0x60>)
   13f52:	f00a f8d5 	bl	1e100 <set_on_state>
   13f56:	f381 8811 	msr	BASEPRI, r1
   13f5a:	f3bf 8f6f 	isb	sy
}
   13f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   13f62:	2000      	movs	r0, #0
   13f64:	f7ff bf80 	b.w	13e68 <clkstarted_handle.constprop.0>
   13f68:	20009a3c 	.word	0x20009a3c
   13f6c:	40005000 	.word	0x40005000
   13f70:	20009a14 	.word	0x20009a14

00013f74 <api_blocking_start>:
{
   13f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13f76:	2200      	movs	r2, #0
   13f78:	2301      	movs	r3, #1
   13f7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   13f7e:	ab04      	add	r3, sp, #16
   13f80:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13f84:	4a09      	ldr	r2, [pc, #36]	; (13fac <api_blocking_start+0x38>)
   13f86:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13f88:	f8cd d000 	str.w	sp, [sp]
   13f8c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13f90:	f00a f8f9 	bl	1e186 <api_start>
	if (err < 0) {
   13f94:	2800      	cmp	r0, #0
   13f96:	db05      	blt.n	13fa4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   13f98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13f9c:	2300      	movs	r3, #0
   13f9e:	4668      	mov	r0, sp
   13fa0:	f004 fc62 	bl	18868 <z_impl_k_sem_take>
}
   13fa4:	b007      	add	sp, #28
   13fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   13faa:	bf00      	nop
   13fac:	0001e1c5 	.word	0x0001e1c5

00013fb0 <generic_hfclk_stop>:
   13fb0:	4b07      	ldr	r3, [pc, #28]	; (13fd0 <generic_hfclk_stop+0x20>)
   13fb2:	e8d3 2fef 	ldaex	r2, [r3]
   13fb6:	f022 0102 	bic.w	r1, r2, #2
   13fba:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13fbe:	2800      	cmp	r0, #0
   13fc0:	d1f7      	bne.n	13fb2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13fc2:	07d3      	lsls	r3, r2, #31
   13fc4:	d402      	bmi.n	13fcc <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13fc6:	2001      	movs	r0, #1
   13fc8:	f001 bff2 	b.w	15fb0 <nrfx_clock_stop>
}
   13fcc:	4770      	bx	lr
   13fce:	bf00      	nop
   13fd0:	20009a3c 	.word	0x20009a3c

00013fd4 <z_nrf_clock_control_lf_on>:
{
   13fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13fd8:	2201      	movs	r2, #1
   13fda:	4606      	mov	r6, r0
   13fdc:	4941      	ldr	r1, [pc, #260]	; (140e4 <z_nrf_clock_control_lf_on+0x110>)
   13fde:	e8d1 3fef 	ldaex	r3, [r1]
   13fe2:	e8c1 2fe0 	stlex	r0, r2, [r1]
   13fe6:	2800      	cmp	r0, #0
   13fe8:	d1f9      	bne.n	13fde <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   13fea:	b9a3      	cbnz	r3, 14016 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   13fec:	493e      	ldr	r1, [pc, #248]	; (140e8 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   13fee:	483f      	ldr	r0, [pc, #252]	; (140ec <z_nrf_clock_control_lf_on+0x118>)
   13ff0:	604b      	str	r3, [r1, #4]
   13ff2:	60cb      	str	r3, [r1, #12]
   13ff4:	608a      	str	r2, [r1, #8]
   13ff6:	f7f6 f84b 	bl	a090 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   13ffa:	2800      	cmp	r0, #0
   13ffc:	da0b      	bge.n	14016 <z_nrf_clock_control_lf_on+0x42>
   13ffe:	493c      	ldr	r1, [pc, #240]	; (140f0 <z_nrf_clock_control_lf_on+0x11c>)
   14000:	f240 2321 	movw	r3, #545	; 0x221
   14004:	4a3b      	ldr	r2, [pc, #236]	; (140f4 <z_nrf_clock_control_lf_on+0x120>)
   14006:	483c      	ldr	r0, [pc, #240]	; (140f8 <z_nrf_clock_control_lf_on+0x124>)
   14008:	f007 fe96 	bl	1bd38 <assert_print>
   1400c:	f240 2121 	movw	r1, #545	; 0x221
		__ASSERT_NO_MSG(false);
   14010:	4838      	ldr	r0, [pc, #224]	; (140f4 <z_nrf_clock_control_lf_on+0x120>)
   14012:	f007 fe8a 	bl	1bd2a <assert_post_action>
	switch (start_mode) {
   14016:	b35e      	cbz	r6, 14070 <z_nrf_clock_control_lf_on+0x9c>
   14018:	1e73      	subs	r3, r6, #1
   1401a:	2b01      	cmp	r3, #1
   1401c:	d858      	bhi.n	140d0 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1401e:	2e01      	cmp	r6, #1
   14020:	d106      	bne.n	14030 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14022:	4b36      	ldr	r3, [pc, #216]	; (140fc <z_nrf_clock_control_lf_on+0x128>)
   14024:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14028:	f003 0303 	and.w	r3, r3, #3
   1402c:	2b02      	cmp	r3, #2
   1402e:	d01f      	beq.n	14070 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14030:	f00b f80c 	bl	1f04c <k_is_in_isr>
   14034:	4605      	mov	r5, r0
   14036:	b9e8      	cbnz	r0, 14074 <z_nrf_clock_control_lf_on+0xa0>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   14038:	4b31      	ldr	r3, [pc, #196]	; (14100 <z_nrf_clock_control_lf_on+0x12c>)
   1403a:	781b      	ldrb	r3, [r3, #0]
   1403c:	b1d3      	cbz	r3, 14074 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1403e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   14040:	4607      	mov	r7, r0
   14042:	4b2e      	ldr	r3, [pc, #184]	; (140fc <z_nrf_clock_control_lf_on+0x128>)
   14044:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14048:	4c2c      	ldr	r4, [pc, #176]	; (140fc <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1404a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 14104 <z_nrf_clock_control_lf_on+0x130>
   1404e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14052:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   14056:	03d2      	lsls	r2, r2, #15
   14058:	d516      	bpl.n	14088 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1405a:	f003 0303 	and.w	r3, r3, #3
   1405e:	2b02      	cmp	r3, #2
   14060:	d001      	beq.n	14066 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14062:	2e01      	cmp	r6, #1
   14064:	d110      	bne.n	14088 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   14066:	b375      	cbz	r5, 140c6 <z_nrf_clock_control_lf_on+0xf2>
   14068:	f387 8811 	msr	BASEPRI, r7
   1406c:	f3bf 8f6f 	isb	sy
}
   14070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   14074:	f04f 0320 	mov.w	r3, #32
   14078:	f3ef 8711 	mrs	r7, BASEPRI
   1407c:	f383 8812 	msr	BASEPRI_MAX, r3
   14080:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14084:	2501      	movs	r5, #1
   14086:	e7df      	b.n	14048 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14088:	b1c5      	cbz	r5, 140bc <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1408a:	4638      	mov	r0, r7
   1408c:	f7f8 fd98 	bl	cbc0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14090:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14094:	b2db      	uxtb	r3, r3
   14096:	2b01      	cmp	r3, #1
   14098:	d1d9      	bne.n	1404e <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1409a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1409e:	2a00      	cmp	r2, #0
   140a0:	d0d5      	beq.n	1404e <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140a2:	2200      	movs	r2, #0
   140a4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   140a8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   140ac:	2202      	movs	r2, #2
   140ae:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   140b2:	2220      	movs	r2, #32
   140b4:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   140b8:	60a3      	str	r3, [r4, #8]
}
   140ba:	e7c8      	b.n	1404e <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   140bc:	2100      	movs	r1, #0
   140be:	2021      	movs	r0, #33	; 0x21
   140c0:	f006 fa82 	bl	1a5c8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   140c4:	e7e4      	b.n	14090 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   140c6:	2202      	movs	r2, #2
   140c8:	4b0c      	ldr	r3, [pc, #48]	; (140fc <z_nrf_clock_control_lf_on+0x128>)
   140ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   140ce:	e7cf      	b.n	14070 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   140d0:	490d      	ldr	r1, [pc, #52]	; (14108 <z_nrf_clock_control_lf_on+0x134>)
   140d2:	f240 2333 	movw	r3, #563	; 0x233
   140d6:	4a07      	ldr	r2, [pc, #28]	; (140f4 <z_nrf_clock_control_lf_on+0x120>)
   140d8:	4807      	ldr	r0, [pc, #28]	; (140f8 <z_nrf_clock_control_lf_on+0x124>)
   140da:	f007 fe2d 	bl	1bd38 <assert_print>
   140de:	f240 2133 	movw	r1, #563	; 0x233
   140e2:	e795      	b.n	14010 <z_nrf_clock_control_lf_on+0x3c>
   140e4:	20009988 	.word	0x20009988
   140e8:	20009978 	.word	0x20009978
   140ec:	200099ac 	.word	0x200099ac
   140f0:	00020e77 	.word	0x00020e77
   140f4:	00022cec 	.word	0x00022cec
   140f8:	000205a4 	.word	0x000205a4
   140fc:	40005000 	.word	0x40005000
   14100:	20009c5d 	.word	0x20009c5d
   14104:	e000e100 	.word	0xe000e100
   14108:	0002357e 	.word	0x0002357e

0001410c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1410c:	b508      	push	{r3, lr}
   1410e:	4807      	ldr	r0, [pc, #28]	; (1412c <uart_console_init+0x20>)
   14110:	f00a ff6f 	bl	1eff2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   14114:	b138      	cbz	r0, 14126 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   14116:	4806      	ldr	r0, [pc, #24]	; (14130 <uart_console_init+0x24>)
   14118:	f7f9 fcf8 	bl	db0c <__stdout_hook_install>
	__printk_hook_install(console_out);
   1411c:	4804      	ldr	r0, [pc, #16]	; (14130 <uart_console_init+0x24>)
   1411e:	f7f5 fc35 	bl	998c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   14122:	2000      	movs	r0, #0
}
   14124:	bd08      	pop	{r3, pc}
		return -ENODEV;
   14126:	f06f 0012 	mvn.w	r0, #18
   1412a:	e7fb      	b.n	14124 <uart_console_init+0x18>
   1412c:	0001f570 	.word	0x0001f570
   14130:	00014135 	.word	0x00014135

00014134 <console_out>:
	if ('\n' == c) {
   14134:	280a      	cmp	r0, #10
{
   14136:	b538      	push	{r3, r4, r5, lr}
   14138:	4604      	mov	r4, r0
   1413a:	4d07      	ldr	r5, [pc, #28]	; (14158 <console_out+0x24>)
	if ('\n' == c) {
   1413c:	d104      	bne.n	14148 <console_out+0x14>
   1413e:	68ab      	ldr	r3, [r5, #8]
   14140:	210d      	movs	r1, #13
   14142:	4628      	mov	r0, r5
   14144:	685b      	ldr	r3, [r3, #4]
   14146:	4798      	blx	r3
   14148:	68ab      	ldr	r3, [r5, #8]
   1414a:	4803      	ldr	r0, [pc, #12]	; (14158 <console_out+0x24>)
   1414c:	685b      	ldr	r3, [r3, #4]
   1414e:	b2e1      	uxtb	r1, r4
   14150:	4798      	blx	r3
}
   14152:	4620      	mov	r0, r4
   14154:	bd38      	pop	{r3, r4, r5, pc}
   14156:	bf00      	nop
   14158:	0001f570 	.word	0x0001f570

0001415c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1415c:	b510      	push	{r4, lr}
	return port->data;
   1415e:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   14160:	b961      	cbnz	r1, 1417c <gpio_nrfx_manage_callback+0x20>
   14162:	4920      	ldr	r1, [pc, #128]	; (141e4 <gpio_nrfx_manage_callback+0x88>)
   14164:	232a      	movs	r3, #42	; 0x2a
   14166:	4a20      	ldr	r2, [pc, #128]	; (141e8 <gpio_nrfx_manage_callback+0x8c>)
   14168:	4820      	ldr	r0, [pc, #128]	; (141ec <gpio_nrfx_manage_callback+0x90>)
   1416a:	f007 fde5 	bl	1bd38 <assert_print>
   1416e:	4820      	ldr	r0, [pc, #128]	; (141f0 <gpio_nrfx_manage_callback+0x94>)
   14170:	f007 fde2 	bl	1bd38 <assert_print>
   14174:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   14176:	481c      	ldr	r0, [pc, #112]	; (141e8 <gpio_nrfx_manage_callback+0x8c>)
   14178:	f007 fdd7 	bl	1bd2a <assert_post_action>
   1417c:	6848      	ldr	r0, [r1, #4]
   1417e:	b950      	cbnz	r0, 14196 <gpio_nrfx_manage_callback+0x3a>
   14180:	491c      	ldr	r1, [pc, #112]	; (141f4 <gpio_nrfx_manage_callback+0x98>)
   14182:	232b      	movs	r3, #43	; 0x2b
   14184:	4a18      	ldr	r2, [pc, #96]	; (141e8 <gpio_nrfx_manage_callback+0x8c>)
   14186:	4819      	ldr	r0, [pc, #100]	; (141ec <gpio_nrfx_manage_callback+0x90>)
   14188:	f007 fdd6 	bl	1bd38 <assert_print>
   1418c:	481a      	ldr	r0, [pc, #104]	; (141f8 <gpio_nrfx_manage_callback+0x9c>)
   1418e:	f007 fdd3 	bl	1bd38 <assert_print>
   14192:	212b      	movs	r1, #43	; 0x2b
   14194:	e7ef      	b.n	14176 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   14196:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   14198:	b1f8      	cbz	r0, 141da <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1419a:	4288      	cmp	r0, r1
   1419c:	d119      	bne.n	141d2 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1419e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   141a0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   141a2:	42a1      	cmp	r1, r4
	list->head = node;
   141a4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   141a6:	d100      	bne.n	141aa <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   141a8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   141aa:	2000      	movs	r0, #0
   141ac:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   141ae:	b12a      	cbz	r2, 141bc <gpio_nrfx_manage_callback+0x60>
	return list->head;
   141b0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   141b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   141b4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   141b6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   141b8:	b902      	cbnz	r2, 141bc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   141ba:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   141bc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   141be:	e010      	b.n	141e2 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   141c0:	4281      	cmp	r1, r0
   141c2:	d106      	bne.n	141d2 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   141c4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   141c6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   141c8:	6898      	ldr	r0, [r3, #8]
   141ca:	4281      	cmp	r1, r0
   141cc:	d1ed      	bne.n	141aa <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   141ce:	609c      	str	r4, [r3, #8]
}
   141d0:	e7eb      	b.n	141aa <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   141d2:	4604      	mov	r4, r0
   141d4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   141d6:	2800      	cmp	r0, #0
   141d8:	d1f2      	bne.n	141c0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   141da:	2a00      	cmp	r2, #0
   141dc:	d1e8      	bne.n	141b0 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   141de:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   141e2:	bd10      	pop	{r4, pc}
   141e4:	00022dc3 	.word	0x00022dc3
   141e8:	00022d87 	.word	0x00022d87
   141ec:	000205a4 	.word	0x000205a4
   141f0:	00022dcc 	.word	0x00022dcc
   141f4:	00022ddb 	.word	0x00022ddb
   141f8:	00022ded 	.word	0x00022ded

000141fc <gpio_nrfx_pin_interrupt_configure>:
{
   141fc:	b530      	push	{r4, r5, lr}
	return port->config;
   141fe:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14200:	f001 041f 	and.w	r4, r1, #31
   14204:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   14206:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1420a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1420c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   14210:	d105      	bne.n	1421e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   14212:	4620      	mov	r0, r4
   14214:	f002 fa16 	bl	16644 <nrfx_gpiote_trigger_disable>
		return 0;
   14218:	2000      	movs	r0, #0
}
   1421a:	b005      	add	sp, #20
   1421c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1421e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   14220:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   14224:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   14228:	d114      	bne.n	14254 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1422a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1422e:	bf0c      	ite	eq
   14230:	2304      	moveq	r3, #4
   14232:	2305      	movne	r3, #5
   14234:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14238:	2300      	movs	r3, #0
   1423a:	4620      	mov	r0, r4
   1423c:	4619      	mov	r1, r3
   1423e:	aa02      	add	r2, sp, #8
   14240:	f002 f80a 	bl	16258 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14244:	4b2a      	ldr	r3, [pc, #168]	; (142f0 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   14246:	4298      	cmp	r0, r3
   14248:	d14f      	bne.n	142ea <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1424a:	2101      	movs	r1, #1
   1424c:	4620      	mov	r0, r4
   1424e:	f002 f98f 	bl	16570 <nrfx_gpiote_trigger_enable>
	return 0;
   14252:	e7e1      	b.n	14218 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   14254:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   14258:	d024      	beq.n	142a4 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1425a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1425e:	bf14      	ite	ne
   14260:	2301      	movne	r3, #1
   14262:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   14264:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   14268:	6883      	ldr	r3, [r0, #8]
   1426a:	40cb      	lsrs	r3, r1
   1426c:	07d8      	lsls	r0, r3, #31
   1426e:	d4e3      	bmi.n	14238 <gpio_nrfx_pin_interrupt_configure+0x3c>
   14270:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   14274:	d1e0      	bne.n	14238 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   14276:	0962      	lsrs	r2, r4, #5
   14278:	f004 031f 	and.w	r3, r4, #31
   1427c:	d014      	beq.n	142a8 <gpio_nrfx_pin_interrupt_configure+0xac>
   1427e:	2a01      	cmp	r2, #1
   14280:	d104      	bne.n	1428c <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   14282:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14286:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14288:	07d1      	lsls	r1, r2, #31
   1428a:	d414      	bmi.n	142b6 <gpio_nrfx_pin_interrupt_configure+0xba>
   1428c:	4919      	ldr	r1, [pc, #100]	; (142f4 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1428e:	481a      	ldr	r0, [pc, #104]	; (142f8 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   14290:	f240 2347 	movw	r3, #583	; 0x247
   14294:	4a19      	ldr	r2, [pc, #100]	; (142fc <gpio_nrfx_pin_interrupt_configure+0x100>)
   14296:	f007 fd4f 	bl	1bd38 <assert_print>
   1429a:	f240 2147 	movw	r1, #583	; 0x247
   1429e:	4817      	ldr	r0, [pc, #92]	; (142fc <gpio_nrfx_pin_interrupt_configure+0x100>)
   142a0:	f007 fd43 	bl	1bd2a <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   142a4:	2303      	movs	r3, #3
   142a6:	e7dd      	b.n	14264 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   142a8:	f04f 32ff 	mov.w	r2, #4294967295
   142ac:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   142ae:	07d2      	lsls	r2, r2, #31
   142b0:	d5ec      	bpl.n	1428c <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   142b2:	4a13      	ldr	r2, [pc, #76]	; (14300 <gpio_nrfx_pin_interrupt_configure+0x104>)
   142b4:	e000      	b.n	142b8 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   142b6:	4a13      	ldr	r2, [pc, #76]	; (14304 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   142b8:	3380      	adds	r3, #128	; 0x80
   142ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   142be:	07db      	lsls	r3, r3, #31
   142c0:	d4ba      	bmi.n	14238 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   142c2:	f10d 0507 	add.w	r5, sp, #7
   142c6:	4629      	mov	r1, r5
   142c8:	4620      	mov	r0, r4
   142ca:	f002 f8eb 	bl	164a4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   142ce:	4b0e      	ldr	r3, [pc, #56]	; (14308 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   142d0:	4298      	cmp	r0, r3
   142d2:	d001      	beq.n	142d8 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   142d4:	9503      	str	r5, [sp, #12]
   142d6:	e7af      	b.n	14238 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   142d8:	4628      	mov	r0, r5
   142da:	f002 f943 	bl	16564 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   142de:	4b04      	ldr	r3, [pc, #16]	; (142f0 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   142e0:	4298      	cmp	r0, r3
   142e2:	d0f7      	beq.n	142d4 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   142e4:	f06f 000b 	mvn.w	r0, #11
   142e8:	e797      	b.n	1421a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   142ea:	f06f 0015 	mvn.w	r0, #21
   142ee:	e794      	b.n	1421a <gpio_nrfx_pin_interrupt_configure+0x1e>
   142f0:	0bad0000 	.word	0x0bad0000
   142f4:	00022e37 	.word	0x00022e37
   142f8:	000205a4 	.word	0x000205a4
   142fc:	00022e04 	.word	0x00022e04
   14300:	40842500 	.word	0x40842500
   14304:	40842800 	.word	0x40842800
   14308:	0bad0004 	.word	0x0bad0004

0001430c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1430c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1430e:	f002 f919 	bl	16544 <nrfx_gpiote_is_init>
   14312:	4604      	mov	r4, r0
   14314:	b968      	cbnz	r0, 14332 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   14316:	f002 f8ed 	bl	164f4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1431a:	4b08      	ldr	r3, [pc, #32]	; (1433c <gpio_nrfx_init+0x30>)
   1431c:	4298      	cmp	r0, r3
   1431e:	d10a      	bne.n	14336 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   14320:	4621      	mov	r1, r4
   14322:	4807      	ldr	r0, [pc, #28]	; (14340 <gpio_nrfx_init+0x34>)
   14324:	f002 f8b8 	bl	16498 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14328:	4622      	mov	r2, r4
   1432a:	2105      	movs	r1, #5
   1432c:	202f      	movs	r0, #47	; 0x2f
   1432e:	f7f8 fce7 	bl	cd00 <z_arm_irq_priority_set>
		return 0;
   14332:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   14334:	bd10      	pop	{r4, pc}
		return -EIO;
   14336:	f06f 0004 	mvn.w	r0, #4
   1433a:	e7fb      	b.n	14334 <gpio_nrfx_init+0x28>
   1433c:	0bad0000 	.word	0x0bad0000
   14340:	00014345 	.word	0x00014345

00014344 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14344:	0942      	lsrs	r2, r0, #5
{
   14346:	4603      	mov	r3, r0
   14348:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1434a:	d002      	beq.n	14352 <nrfx_gpio_handler+0xe>
   1434c:	2a01      	cmp	r2, #1
   1434e:	d01e      	beq.n	1438e <nrfx_gpio_handler+0x4a>
}
   14350:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14352:	4e14      	ldr	r6, [pc, #80]	; (143a4 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   14354:	6932      	ldr	r2, [r6, #16]
   14356:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14358:	2900      	cmp	r1, #0
   1435a:	d0f9      	beq.n	14350 <nrfx_gpio_handler+0xc>
   1435c:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1435e:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   14362:	680c      	ldr	r4, [r1, #0]
   14364:	409d      	lsls	r5, r3
   14366:	2900      	cmp	r1, #0
   14368:	d0f2      	beq.n	14350 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1436a:	688a      	ldr	r2, [r1, #8]
   1436c:	402a      	ands	r2, r5
   1436e:	d012      	beq.n	14396 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   14370:	684b      	ldr	r3, [r1, #4]
   14372:	b973      	cbnz	r3, 14392 <nrfx_gpio_handler+0x4e>
   14374:	490c      	ldr	r1, [pc, #48]	; (143a8 <nrfx_gpio_handler+0x64>)
   14376:	234d      	movs	r3, #77	; 0x4d
   14378:	4a0c      	ldr	r2, [pc, #48]	; (143ac <nrfx_gpio_handler+0x68>)
   1437a:	480d      	ldr	r0, [pc, #52]	; (143b0 <nrfx_gpio_handler+0x6c>)
   1437c:	f007 fcdc 	bl	1bd38 <assert_print>
   14380:	480c      	ldr	r0, [pc, #48]	; (143b4 <nrfx_gpio_handler+0x70>)
   14382:	f007 fcd9 	bl	1bd38 <assert_print>
   14386:	214d      	movs	r1, #77	; 0x4d
   14388:	4808      	ldr	r0, [pc, #32]	; (143ac <nrfx_gpio_handler+0x68>)
   1438a:	f007 fcce 	bl	1bd2a <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1438e:	4e0a      	ldr	r6, [pc, #40]	; (143b8 <nrfx_gpio_handler+0x74>)
   14390:	e7e0      	b.n	14354 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   14392:	4630      	mov	r0, r6
   14394:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14396:	b11c      	cbz	r4, 143a0 <nrfx_gpio_handler+0x5c>
   14398:	6823      	ldr	r3, [r4, #0]
   1439a:	4621      	mov	r1, r4
   1439c:	461c      	mov	r4, r3
   1439e:	e7e2      	b.n	14366 <nrfx_gpio_handler+0x22>
   143a0:	4623      	mov	r3, r4
   143a2:	e7fa      	b.n	1439a <nrfx_gpio_handler+0x56>
   143a4:	0001f528 	.word	0x0001f528
   143a8:	00022e5a 	.word	0x00022e5a
   143ac:	00022d87 	.word	0x00022d87
   143b0:	000205a4 	.word	0x000205a4
   143b4:	00022ded 	.word	0x00022ded
   143b8:	0001f510 	.word	0x0001f510

000143bc <gpio_nrfx_pin_configure>:
{
   143bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   143c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   143c4:	f001 051f 	and.w	r5, r1, #31
   143c8:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   143cc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   143ce:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   143d2:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   143d4:	4628      	mov	r0, r5
   143d6:	f10d 0103 	add.w	r1, sp, #3
   143da:	f002 f863 	bl	164a4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   143de:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   143e2:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   143e4:	d115      	bne.n	14412 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   143e6:	4628      	mov	r0, r5
   143e8:	f002 f956 	bl	16698 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   143ec:	4b48      	ldr	r3, [pc, #288]	; (14510 <gpio_nrfx_pin_configure+0x154>)
   143ee:	429e      	cmp	r6, r3
   143f0:	d170      	bne.n	144d4 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   143f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   143f6:	f002 f8af 	bl	16558 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   143fa:	42b0      	cmp	r0, r6
   143fc:	d06a      	beq.n	144d4 <gpio_nrfx_pin_configure+0x118>
   143fe:	4945      	ldr	r1, [pc, #276]	; (14514 <gpio_nrfx_pin_configure+0x158>)
   14400:	236a      	movs	r3, #106	; 0x6a
   14402:	4a45      	ldr	r2, [pc, #276]	; (14518 <gpio_nrfx_pin_configure+0x15c>)
   14404:	4845      	ldr	r0, [pc, #276]	; (1451c <gpio_nrfx_pin_configure+0x160>)
   14406:	f007 fc97 	bl	1bd38 <assert_print>
   1440a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1440c:	4842      	ldr	r0, [pc, #264]	; (14518 <gpio_nrfx_pin_configure+0x15c>)
   1440e:	f007 fc8c 	bl	1bd2a <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   14412:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14414:	4628      	mov	r0, r5
   14416:	4619      	mov	r1, r3
   14418:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1441a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1441e:	f001 ff1b 	bl	16258 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14422:	4b3b      	ldr	r3, [pc, #236]	; (14510 <gpio_nrfx_pin_configure+0x154>)
   14424:	4298      	cmp	r0, r3
   14426:	d004      	beq.n	14432 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   14428:	f06f 0015 	mvn.w	r0, #21
}
   1442c:	b004      	add	sp, #16
   1442e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   14432:	4286      	cmp	r6, r0
   14434:	d10d      	bne.n	14452 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   14436:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1443a:	f002 f88d 	bl	16558 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1443e:	42b0      	cmp	r0, r6
   14440:	d007      	beq.n	14452 <gpio_nrfx_pin_configure+0x96>
   14442:	4934      	ldr	r1, [pc, #208]	; (14514 <gpio_nrfx_pin_configure+0x158>)
   14444:	237c      	movs	r3, #124	; 0x7c
   14446:	4a34      	ldr	r2, [pc, #208]	; (14518 <gpio_nrfx_pin_configure+0x15c>)
   14448:	4834      	ldr	r0, [pc, #208]	; (1451c <gpio_nrfx_pin_configure+0x160>)
   1444a:	f007 fc75 	bl	1bd38 <assert_print>
   1444e:	217c      	movs	r1, #124	; 0x7c
   14450:	e7dc      	b.n	1440c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   14452:	03a6      	lsls	r6, r4, #14
   14454:	d54c      	bpl.n	144f0 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14456:	f240 3306 	movw	r3, #774	; 0x306
   1445a:	4023      	ands	r3, r4
   1445c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   14460:	d019      	beq.n	14496 <gpio_nrfx_pin_configure+0xda>
   14462:	d80c      	bhi.n	1447e <gpio_nrfx_pin_configure+0xc2>
   14464:	2b06      	cmp	r3, #6
   14466:	d017      	beq.n	14498 <gpio_nrfx_pin_configure+0xdc>
   14468:	d804      	bhi.n	14474 <gpio_nrfx_pin_configure+0xb8>
   1446a:	b1ab      	cbz	r3, 14498 <gpio_nrfx_pin_configure+0xdc>
   1446c:	2b02      	cmp	r3, #2
   1446e:	d1db      	bne.n	14428 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   14470:	2304      	movs	r3, #4
   14472:	e011      	b.n	14498 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   14478:	d1d6      	bne.n	14428 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1447a:	2301      	movs	r3, #1
   1447c:	e00c      	b.n	14498 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1447e:	f240 2202 	movw	r2, #514	; 0x202
   14482:	4293      	cmp	r3, r2
   14484:	d028      	beq.n	144d8 <gpio_nrfx_pin_configure+0x11c>
   14486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1448a:	d027      	beq.n	144dc <gpio_nrfx_pin_configure+0x120>
   1448c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14490:	d1ca      	bne.n	14428 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   14492:	2302      	movs	r3, #2
   14494:	e000      	b.n	14498 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   14496:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   14498:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1449c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   144a0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   144a4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   144a6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   144aa:	bf4c      	ite	mi
   144ac:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   144ae:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   144b2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   144b4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   144b8:	d512      	bpl.n	144e0 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   144ba:	2301      	movs	r3, #1
   144bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   144c0:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   144c2:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   144c4:	2200      	movs	r2, #0
   144c6:	4628      	mov	r0, r5
   144c8:	a901      	add	r1, sp, #4
   144ca:	f001 ff6d 	bl	163a8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   144ce:	4b10      	ldr	r3, [pc, #64]	; (14510 <gpio_nrfx_pin_configure+0x154>)
   144d0:	4298      	cmp	r0, r3
   144d2:	d1a9      	bne.n	14428 <gpio_nrfx_pin_configure+0x6c>
   144d4:	2000      	movs	r0, #0
   144d6:	e7a9      	b.n	1442c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   144d8:	2305      	movs	r3, #5
   144da:	e7dd      	b.n	14498 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   144dc:	2303      	movs	r3, #3
   144de:	e7db      	b.n	14498 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   144e0:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   144e2:	bf41      	itttt	mi
   144e4:	2301      	movmi	r3, #1
   144e6:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   144ea:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   144ec:	60d3      	strmi	r3, [r2, #12]
}
   144ee:	e7e9      	b.n	144c4 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   144f0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   144f2:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   144f6:	bf4c      	ite	mi
   144f8:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   144fa:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   144fe:	461a      	mov	r2, r3
   14500:	4628      	mov	r0, r5
   14502:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   14504:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14508:	f001 fea6 	bl	16258 <nrfx_gpiote_input_configure>
   1450c:	e7df      	b.n	144ce <gpio_nrfx_pin_configure+0x112>
   1450e:	bf00      	nop
   14510:	0bad0000 	.word	0x0bad0000
   14514:	00020b96 	.word	0x00020b96
   14518:	00022e66 	.word	0x00022e66
   1451c:	000205a4 	.word	0x000205a4

00014520 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   14520:	2100      	movs	r1, #0
   14522:	4802      	ldr	r0, [pc, #8]	; (1452c <pwm_nrfx_get_cycles_per_sec+0xc>)
   14524:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   14528:	2000      	movs	r0, #0
   1452a:	4770      	bx	lr
   1452c:	00f42400 	.word	0x00f42400

00014530 <nrf_gpio_pin_port_decode>:
{
   14530:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14532:	6803      	ldr	r3, [r0, #0]
    switch (port)
   14534:	095a      	lsrs	r2, r3, #5
   14536:	d00d      	beq.n	14554 <nrf_gpio_pin_port_decode+0x24>
   14538:	2a01      	cmp	r2, #1
   1453a:	d013      	beq.n	14564 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1453c:	490e      	ldr	r1, [pc, #56]	; (14578 <nrf_gpio_pin_port_decode+0x48>)
   1453e:	480f      	ldr	r0, [pc, #60]	; (1457c <nrf_gpio_pin_port_decode+0x4c>)
   14540:	f240 2347 	movw	r3, #583	; 0x247
   14544:	4a0e      	ldr	r2, [pc, #56]	; (14580 <nrf_gpio_pin_port_decode+0x50>)
   14546:	f007 fbf7 	bl	1bd38 <assert_print>
   1454a:	f240 2147 	movw	r1, #583	; 0x247
   1454e:	480c      	ldr	r0, [pc, #48]	; (14580 <nrf_gpio_pin_port_decode+0x50>)
   14550:	f007 fbeb 	bl	1bd2a <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   14554:	f04f 32ff 	mov.w	r2, #4294967295
   14558:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1455c:	07d9      	lsls	r1, r3, #31
   1455e:	d5ed      	bpl.n	1453c <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   14560:	4808      	ldr	r0, [pc, #32]	; (14584 <nrf_gpio_pin_port_decode+0x54>)
   14562:	e008      	b.n	14576 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   14564:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   14568:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1456c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1456e:	07d2      	lsls	r2, r2, #31
   14570:	d5e4      	bpl.n	1453c <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   14572:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   14574:	4804      	ldr	r0, [pc, #16]	; (14588 <nrf_gpio_pin_port_decode+0x58>)
}
   14576:	bd08      	pop	{r3, pc}
   14578:	00022e37 	.word	0x00022e37
   1457c:	000205a4 	.word	0x000205a4
   14580:	00022e04 	.word	0x00022e04
   14584:	40842500 	.word	0x40842500
   14588:	40842800 	.word	0x40842800

0001458c <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   1458c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14590:	b082      	sub	sp, #8
	const struct pwm_nrfx_config *config = dev->config;
   14592:	6845      	ldr	r5, [r0, #4]
{
   14594:	af00      	add	r7, sp, #0
	struct pwm_nrfx_data *data = dev->data;

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   14596:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
	struct pwm_nrfx_data *data = dev->data;
   1459a:	6906      	ldr	r6, [r0, #16]
{
   1459c:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1459e:	2100      	movs	r1, #0
   145a0:	4640      	mov	r0, r8
   145a2:	1d3a      	adds	r2, r7, #4
   145a4:	f009 fec5 	bl	1e332 <pinctrl_lookup_state>
	if (ret < 0) {
   145a8:	2800      	cmp	r0, #0
   145aa:	db59      	blt.n	14660 <pwm_nrfx_init+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   145ac:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   145ae:	f8d8 2000 	ldr.w	r2, [r8]
   145b2:	7919      	ldrb	r1, [r3, #4]
   145b4:	6818      	ldr	r0, [r3, #0]
   145b6:	f009 fed2 	bl	1e35e <pinctrl_configure_pins>

	if (ret < 0) {
   145ba:	2800      	cmp	r0, #0
   145bc:	db50      	blt.n	14660 <pwm_nrfx_init+0xd4>
		return ret;
	}

	data->initially_inverted = 0;
   145be:	f04f 0800 	mov.w	r8, #0
   145c2:	f886 800e 	strb.w	r8, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
   145c6:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    return p_reg->PSEL.OUT[channel];
   145c8:	f508 72ac 	add.w	r2, r8, #344	; 0x158
   145cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   145d0:	2b00      	cmp	r3, #0
   145d2:	db10      	blt.n	145f6 <pwm_nrfx_init+0x6a>
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
   145d4:	607b      	str	r3, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   145d6:	1d38      	adds	r0, r7, #4
   145d8:	f7ff ffaa 	bl	14530 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   145dc:	687a      	ldr	r2, [r7, #4]
    return p_reg->OUT;
   145de:	6843      	ldr	r3, [r0, #4]
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   145e0:	40d3      	lsrs	r3, r2
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   145e2:	f013 0301 	ands.w	r3, r3, #1
   145e6:	bf18      	it	ne
   145e8:	2301      	movne	r3, #1
			data->initially_inverted |=
   145ea:	7bb2      	ldrb	r2, [r6, #14]
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   145ec:	bf18      	it	ne
   145ee:	fa03 f308 	lslne.w	r3, r3, r8
			data->initially_inverted |=
   145f2:	4313      	orrs	r3, r2
   145f4:	73b3      	strb	r3, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   145f6:	f108 0801 	add.w	r8, r8, #1
   145fa:	f1b8 0f04 	cmp.w	r8, #4
   145fe:	d1e2      	bne.n	145c6 <pwm_nrfx_init+0x3a>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   14600:	2300      	movs	r3, #0
		bool inverted = data->initially_inverted & BIT(i);
   14602:	2001      	movs	r0, #1
   14604:	7bb1      	ldrb	r1, [r6, #14]
   14606:	3602      	adds	r6, #2
   14608:	fa00 f203 	lsl.w	r2, r0, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   1460c:	420a      	tst	r2, r1
   1460e:	bf0c      	ite	eq
   14610:	2201      	moveq	r2, #1
   14612:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   14614:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   14616:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   14618:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   1461a:	f826 2f02 	strh.w	r2, [r6, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   1461e:	d1f3      	bne.n	14608 <pwm_nrfx_init+0x7c>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   14620:	2300      	movs	r3, #0
   14622:	4628      	mov	r0, r5
   14624:	461a      	mov	r2, r3
   14626:	f105 0108 	add.w	r1, r5, #8
   1462a:	f002 fa9b 	bl	16b64 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   1462e:	4b0f      	ldr	r3, [pc, #60]	; (1466c <pwm_nrfx_init+0xe0>)
   14630:	4298      	cmp	r0, r3
   14632:	d019      	beq.n	14668 <pwm_nrfx_init+0xdc>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   14634:	6823      	ldr	r3, [r4, #0]
   14636:	466c      	mov	r4, sp
   14638:	b088      	sub	sp, #32
   1463a:	466a      	mov	r2, sp
   1463c:	490c      	ldr	r1, [pc, #48]	; (14670 <pwm_nrfx_init+0xe4>)
   1463e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14642:	f44f 7300 	mov.w	r3, #512	; 0x200
   14646:	8393      	strh	r3, [r2, #28]
   14648:	4b0a      	ldr	r3, [pc, #40]	; (14674 <pwm_nrfx_init+0xe8>)
   1464a:	f842 3f10 	str.w	r3, [r2, #16]!
   1464e:	480a      	ldr	r0, [pc, #40]	; (14678 <pwm_nrfx_init+0xec>)
   14650:	2300      	movs	r3, #0
   14652:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   14656:	f7f7 f8d7 	bl	b808 <z_impl_z_log_msg_static_create>
		return -EBUSY;
   1465a:	f06f 000f 	mvn.w	r0, #15
   1465e:	46a5      	mov	sp, r4
	}

	return 0;
}
   14660:	3708      	adds	r7, #8
   14662:	46bd      	mov	sp, r7
   14664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   14668:	2000      	movs	r0, #0
   1466a:	e7f9      	b.n	14660 <pwm_nrfx_init+0xd4>
   1466c:	0bad0000 	.word	0x0bad0000
   14670:	00022eaa 	.word	0x00022eaa
   14674:	01000003 	.word	0x01000003
   14678:	0001f970 	.word	0x0001f970

0001467c <pwm_nrfx_set_cycles>:
{
   1467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14680:	b086      	sub	sp, #24
   14682:	af00      	add	r7, sp, #0
   14684:	f8b7 c030 	ldrh.w	ip, [r7, #48]	; 0x30
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   14688:	2903      	cmp	r1, #3
{
   1468a:	4616      	mov	r6, r2
	const struct pwm_nrfx_config *config = dev->config;
   1468c:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   1468e:	6904      	ldr	r4, [r0, #16]
	bool inverted = (flags & PWM_POLARITY_INVERTED);
   14690:	f00c 0c01 	and.w	ip, ip, #1
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   14694:	d910      	bls.n	146b8 <pwm_nrfx_set_cycles+0x3c>
		LOG_ERR("Invalid channel: %u.", channel);
   14696:	466c      	mov	r4, sp
   14698:	b088      	sub	sp, #32
   1469a:	466a      	mov	r2, sp
   1469c:	4b59      	ldr	r3, [pc, #356]	; (14804 <pwm_nrfx_set_cycles+0x188>)
   1469e:	e9c2 3105 	strd	r3, r1, [r2, #20]
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   146a2:	2303      	movs	r3, #3
   146a4:	f842 3f10 	str.w	r3, [r2, #16]!
   146a8:	2300      	movs	r3, #0
   146aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   146ae:	4856      	ldr	r0, [pc, #344]	; (14808 <pwm_nrfx_set_cycles+0x18c>)
   146b0:	f7f7 f8aa 	bl	b808 <z_impl_z_log_msg_static_create>
   146b4:	46a5      	mov	sp, r4
	return false;
   146b6:	e01f      	b.n	146f8 <pwm_nrfx_set_cycles+0x7c>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   146b8:	f04f 0801 	mov.w	r8, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   146bc:	7baa      	ldrb	r2, [r5, #14]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   146be:	fa08 f801 	lsl.w	r8, r8, r1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   146c2:	2a01      	cmp	r2, #1
		pulse_cycles /= 2;
   146c4:	bf04      	itt	eq
   146c6:	085b      	lsreq	r3, r3, #1
		period_cycles /= 2;
   146c8:	0876      	lsreq	r6, r6, #1
	if (pulse_cycles == 0) {
   146ca:	2b00      	cmp	r3, #0
   146cc:	d074      	beq.n	147b8 <pwm_nrfx_set_cycles+0x13c>
	} else if (pulse_cycles >= period_cycles) {
   146ce:	429e      	cmp	r6, r3
   146d0:	d943      	bls.n	1475a <pwm_nrfx_set_cycles+0xde>
	if (period_cycles == data->period_cycles) {
   146d2:	6820      	ldr	r0, [r4, #0]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   146d4:	7b22      	ldrb	r2, [r4, #12]
	if (period_cycles == data->period_cycles) {
   146d6:	4286      	cmp	r6, r0
   146d8:	d023      	beq.n	14722 <pwm_nrfx_set_cycles+0xa6>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   146da:	ea32 0208 	bics.w	r2, r2, r8
   146de:	d011      	beq.n	14704 <pwm_nrfx_set_cycles+0x88>
		LOG_ERR("Incompatible period.");
   146e0:	4b4a      	ldr	r3, [pc, #296]	; (1480c <pwm_nrfx_set_cycles+0x190>)
   146e2:	617b      	str	r3, [r7, #20]
   146e4:	2302      	movs	r3, #2
   146e6:	613b      	str	r3, [r7, #16]
   146e8:	2300      	movs	r3, #0
   146ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   146ee:	4846      	ldr	r0, [pc, #280]	; (14808 <pwm_nrfx_set_cycles+0x18c>)
   146f0:	f107 0210 	add.w	r2, r7, #16
   146f4:	f7f7 f888 	bl	b808 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   146f8:	f06f 0015 	mvn.w	r0, #21
}
   146fc:	3718      	adds	r7, #24
   146fe:	46bd      	mov	sp, r7
   14700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14704:	4630      	mov	r0, r6
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   14706:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1470a:	d21a      	bcs.n	14742 <pwm_nrfx_set_cycles+0xc6>
			data->period_cycles = period_cycles;
   1470c:	6026      	str	r6, [r4, #0]
			data->prescaler     = prescaler;
   1470e:	7362      	strb	r2, [r4, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   14710:	682e      	ldr	r6, [r5, #0]
					  config->initial_config.count_mode,
   14712:	f895 e00e 	ldrb.w	lr, [r5, #14]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   14716:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1471a:	f8c6 e504 	str.w	lr, [r6, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1471e:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   14722:	7b62      	ldrb	r2, [r4, #13]
   14724:	40d3      	lsrs	r3, r2
   14726:	b29b      	uxth	r3, r3
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   14728:	f1bc 0f00 	cmp.w	ip, #0
   1472c:	d101      	bne.n	14732 <pwm_nrfx_set_cycles+0xb6>
   1472e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	if (!needs_pwm) {
   14732:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   14736:	808b      	strh	r3, [r1, #4]
		data->pwm_needed |= BIT(channel);
   14738:	7b23      	ldrb	r3, [r4, #12]
   1473a:	ea43 0308 	orr.w	r3, r3, r8
   1473e:	7323      	strb	r3, [r4, #12]
	if (data->pwm_needed == 0) {
   14740:	e030      	b.n	147a4 <pwm_nrfx_set_cycles+0x128>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   14742:	3201      	adds	r2, #1
   14744:	2a08      	cmp	r2, #8
		countertop >>= 1;
   14746:	ea4f 0050 	mov.w	r0, r0, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1474a:	d1dc      	bne.n	14706 <pwm_nrfx_set_cycles+0x8a>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   1474c:	466c      	mov	r4, sp
   1474e:	b088      	sub	sp, #32
   14750:	466a      	mov	r2, sp
   14752:	4b2f      	ldr	r3, [pc, #188]	; (14810 <pwm_nrfx_set_cycles+0x194>)
   14754:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14758:	e7a3      	b.n	146a2 <pwm_nrfx_set_cycles+0x26>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1475a:	004b      	lsls	r3, r1, #1
   1475c:	4423      	add	r3, r4
   1475e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   14762:	f1bc 0f00 	cmp.w	ip, #0
   14766:	d010      	beq.n	1478a <pwm_nrfx_set_cycles+0x10e>
   14768:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1476c:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   1476e:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.OUT[channel];
   14770:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14774:	2b00      	cmp	r3, #0
   14776:	db10      	blt.n	1479a <pwm_nrfx_set_cycles+0x11e>
        nrf_gpio_pin_clear(pin_number);
   14778:	603b      	str	r3, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1477a:	4638      	mov	r0, r7
   1477c:	f7ff fed8 	bl	14530 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14780:	2301      	movs	r3, #1
   14782:	683a      	ldr	r2, [r7, #0]
   14784:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   14786:	60c3      	str	r3, [r0, #12]
   14788:	e007      	b.n	1479a <pwm_nrfx_set_cycles+0x11e>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1478a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1478e:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   14790:	682b      	ldr	r3, [r5, #0]
   14792:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14796:	2b00      	cmp	r3, #0
   14798:	da1b      	bge.n	147d2 <pwm_nrfx_set_cycles+0x156>
		data->pwm_needed &= ~BIT(channel);
   1479a:	7b21      	ldrb	r1, [r4, #12]
   1479c:	ea21 0108 	bic.w	r1, r1, r8
   147a0:	7321      	strb	r1, [r4, #12]
	if (data->pwm_needed == 0) {
   147a2:	b1f9      	cbz	r1, 147e4 <pwm_nrfx_set_cycles+0x168>
		if (data->stop_requested) {
   147a4:	7be3      	ldrb	r3, [r4, #15]
   147a6:	bb23      	cbnz	r3, 147f2 <pwm_nrfx_set_cycles+0x176>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   147a8:	2300      	movs	r3, #0
   147aa:	2201      	movs	r2, #1
   147ac:	4628      	mov	r0, r5
   147ae:	f105 0118 	add.w	r1, r5, #24
   147b2:	f002 faa5 	bl	16d00 <nrfx_pwm_simple_playback>
   147b6:	e01a      	b.n	147ee <pwm_nrfx_set_cycles+0x172>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   147b8:	004a      	lsls	r2, r1, #1
   147ba:	4422      	add	r2, r4
   147bc:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   147c0:	f1bc 0f00 	cmp.w	ip, #0
   147c4:	d001      	beq.n	147ca <pwm_nrfx_set_cycles+0x14e>
   147c6:	8093      	strh	r3, [r2, #4]
   147c8:	e7e2      	b.n	14790 <pwm_nrfx_set_cycles+0x114>
   147ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   147ce:	8093      	strh	r3, [r2, #4]
   147d0:	e7cd      	b.n	1476e <pwm_nrfx_set_cycles+0xf2>
        nrf_gpio_pin_set(pin_number);
   147d2:	603b      	str	r3, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   147d4:	4638      	mov	r0, r7
   147d6:	f7ff feab 	bl	14530 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   147da:	2301      	movs	r3, #1
   147dc:	683a      	ldr	r2, [r7, #0]
   147de:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   147e0:	6083      	str	r3, [r0, #8]
   147e2:	e7da      	b.n	1479a <pwm_nrfx_set_cycles+0x11e>
		nrfx_pwm_stop(&config->pwm, false);
   147e4:	4628      	mov	r0, r5
   147e6:	f002 fb29 	bl	16e3c <nrfx_pwm_stop>
		data->stop_requested = true;
   147ea:	2301      	movs	r3, #1
   147ec:	73e3      	strb	r3, [r4, #15]
	return 0;
   147ee:	2000      	movs	r0, #0
   147f0:	e784      	b.n	146fc <pwm_nrfx_set_cycles+0x80>
			data->stop_requested = false;
   147f2:	2300      	movs	r3, #0
   147f4:	73e3      	strb	r3, [r4, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   147f6:	4628      	mov	r0, r5
   147f8:	f002 faf6 	bl	16de8 <nrfx_pwm_is_stopped>
   147fc:	2800      	cmp	r0, #0
   147fe:	d0fa      	beq.n	147f6 <pwm_nrfx_set_cycles+0x17a>
   14800:	e7d2      	b.n	147a8 <pwm_nrfx_set_cycles+0x12c>
   14802:	bf00      	nop
   14804:	00022eca 	.word	0x00022eca
   14808:	0001f970 	.word	0x0001f970
   1480c:	00022edf 	.word	0x00022edf
   14810:	00022ef4 	.word	0x00022ef4

00014814 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   14814:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   14816:	794b      	ldrb	r3, [r1, #5]
   14818:	2b01      	cmp	r3, #1
   1481a:	d029      	beq.n	14870 <uarte_nrfx_configure+0x5c>
   1481c:	2b03      	cmp	r3, #3
   1481e:	d124      	bne.n	1486a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14820:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14822:	798b      	ldrb	r3, [r1, #6]
   14824:	2b03      	cmp	r3, #3
   14826:	d120      	bne.n	1486a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14828:	79ce      	ldrb	r6, [r1, #7]
   1482a:	b10e      	cbz	r6, 14830 <uarte_nrfx_configure+0x1c>
   1482c:	2e01      	cmp	r6, #1
   1482e:	d11c      	bne.n	1486a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14830:	790a      	ldrb	r2, [r1, #4]
   14832:	2a01      	cmp	r2, #1
   14834:	d01e      	beq.n	14874 <uarte_nrfx_configure+0x60>
   14836:	2a02      	cmp	r2, #2
   14838:	d020      	beq.n	1487c <uarte_nrfx_configure+0x68>
   1483a:	b9b2      	cbnz	r2, 1486a <uarte_nrfx_configure+0x56>
   1483c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1483e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14840:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   14842:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14846:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1484a:	d06e      	beq.n	1492a <uarte_nrfx_configure+0x116>
   1484c:	d833      	bhi.n	148b6 <uarte_nrfx_configure+0xa2>
   1484e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14852:	d06d      	beq.n	14930 <uarte_nrfx_configure+0x11c>
   14854:	d81c      	bhi.n	14890 <uarte_nrfx_configure+0x7c>
   14856:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1485a:	d06b      	beq.n	14934 <uarte_nrfx_configure+0x120>
   1485c:	d810      	bhi.n	14880 <uarte_nrfx_configure+0x6c>
   1485e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14862:	d06a      	beq.n	1493a <uarte_nrfx_configure+0x126>
   14864:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14868:	d06a      	beq.n	14940 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1486a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1486e:	e05b      	b.n	14928 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   14870:	2700      	movs	r7, #0
   14872:	e7d6      	b.n	14822 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   14874:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14878:	220e      	movs	r2, #14
   1487a:	e7e0      	b.n	1483e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1487c:	2400      	movs	r4, #0
   1487e:	e7fb      	b.n	14878 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   14880:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14884:	d05f      	beq.n	14946 <uarte_nrfx_configure+0x132>
   14886:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1488a:	d1ee      	bne.n	1486a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1488c:	4b38      	ldr	r3, [pc, #224]	; (14970 <uarte_nrfx_configure+0x15c>)
   1488e:	e03c      	b.n	1490a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14890:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14894:	d05a      	beq.n	1494c <uarte_nrfx_configure+0x138>
   14896:	d807      	bhi.n	148a8 <uarte_nrfx_configure+0x94>
   14898:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1489c:	d058      	beq.n	14950 <uarte_nrfx_configure+0x13c>
   1489e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   148a2:	d1e2      	bne.n	1486a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   148a4:	4b33      	ldr	r3, [pc, #204]	; (14974 <uarte_nrfx_configure+0x160>)
   148a6:	e030      	b.n	1490a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   148a8:	f647 2512 	movw	r5, #31250	; 0x7a12
   148ac:	42ab      	cmp	r3, r5
   148ae:	d1dc      	bne.n	1486a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   148b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   148b4:	e029      	b.n	1490a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   148b6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   148ba:	d04b      	beq.n	14954 <uarte_nrfx_configure+0x140>
   148bc:	d813      	bhi.n	148e6 <uarte_nrfx_configure+0xd2>
   148be:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   148c2:	d04a      	beq.n	1495a <uarte_nrfx_configure+0x146>
   148c4:	d809      	bhi.n	148da <uarte_nrfx_configure+0xc6>
   148c6:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   148ca:	42ab      	cmp	r3, r5
   148cc:	d047      	beq.n	1495e <uarte_nrfx_configure+0x14a>
   148ce:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   148d2:	d1ca      	bne.n	1486a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   148d4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   148d8:	e017      	b.n	1490a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   148da:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   148de:	d1c4      	bne.n	1486a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   148e0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   148e4:	e011      	b.n	1490a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   148e6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   148ea:	d03b      	beq.n	14964 <uarte_nrfx_configure+0x150>
   148ec:	d808      	bhi.n	14900 <uarte_nrfx_configure+0xec>
   148ee:	4d22      	ldr	r5, [pc, #136]	; (14978 <uarte_nrfx_configure+0x164>)
   148f0:	42ab      	cmp	r3, r5
   148f2:	d03a      	beq.n	1496a <uarte_nrfx_configure+0x156>
   148f4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   148f8:	d1b7      	bne.n	1486a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   148fa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   148fe:	e004      	b.n	1490a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14900:	4d1e      	ldr	r5, [pc, #120]	; (1497c <uarte_nrfx_configure+0x168>)
   14902:	42ab      	cmp	r3, r5
   14904:	d1b1      	bne.n	1486a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1490a:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1490c:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   14910:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   14912:	433a      	orrs	r2, r7
   14914:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   14916:	4334      	orrs	r4, r6
   14918:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1491a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1491e:	1d2b      	adds	r3, r5, #4
   14920:	c903      	ldmia	r1, {r0, r1}
   14922:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   14926:	2000      	movs	r0, #0
}
   14928:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1492a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1492e:	e7ec      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   14930:	4b13      	ldr	r3, [pc, #76]	; (14980 <uarte_nrfx_configure+0x16c>)
   14932:	e7ea      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   14934:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14938:	e7e7      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1493a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1493e:	e7e4      	b.n	1490a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   14940:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   14944:	e7e1      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   14946:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1494a:	e7de      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1494c:	4b0d      	ldr	r3, [pc, #52]	; (14984 <uarte_nrfx_configure+0x170>)
   1494e:	e7dc      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14950:	4b0d      	ldr	r3, [pc, #52]	; (14988 <uarte_nrfx_configure+0x174>)
   14952:	e7da      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14954:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14958:	e7d7      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1495a:	4b0c      	ldr	r3, [pc, #48]	; (1498c <uarte_nrfx_configure+0x178>)
   1495c:	e7d5      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1495e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14962:	e7d2      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14964:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14968:	e7cf      	b.n	1490a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1496a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1496e:	e7cc      	b.n	1490a <uarte_nrfx_configure+0xf6>
   14970:	0013b000 	.word	0x0013b000
   14974:	004ea000 	.word	0x004ea000
   14978:	0003d090 	.word	0x0003d090
   1497c:	000f4240 	.word	0x000f4240
   14980:	00275000 	.word	0x00275000
   14984:	0075c000 	.word	0x0075c000
   14988:	003af000 	.word	0x003af000
   1498c:	013a9000 	.word	0x013a9000

00014990 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   14990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14994:	4680      	mov	r8, r0
   14996:	b087      	sub	sp, #28
   14998:	2200      	movs	r2, #0
   1499a:	2101      	movs	r1, #1
   1499c:	2008      	movs	r0, #8
   1499e:	f7f8 f9af 	bl	cd00 <z_arm_irq_priority_set>
   149a2:	2008      	movs	r0, #8
   149a4:	f7f8 f97c 	bl	cca0 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   149a8:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   149aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   149ae:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   149b2:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   149b4:	466a      	mov	r2, sp
   149b6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   149ba:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   149be:	f8d7 900c 	ldr.w	r9, [r7, #12]
   149c2:	4648      	mov	r0, r9
   149c4:	f009 fcb5 	bl	1e332 <pinctrl_lookup_state>
	if (ret < 0) {
   149c8:	1e05      	subs	r5, r0, #0
   149ca:	db25      	blt.n	14a18 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   149cc:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   149ce:	f8d9 2000 	ldr.w	r2, [r9]
   149d2:	7919      	ldrb	r1, [r3, #4]
   149d4:	6818      	ldr	r0, [r3, #0]
   149d6:	f009 fcc2 	bl	1e35e <pinctrl_configure_pins>
	if (err < 0) {
   149da:	1e05      	subs	r5, r0, #0
   149dc:	db1c      	blt.n	14a18 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   149de:	4640      	mov	r0, r8
   149e0:	1d31      	adds	r1, r6, #4
   149e2:	f7ff ff17 	bl	14814 <uarte_nrfx_configure>
	if (err) {
   149e6:	4605      	mov	r5, r0
   149e8:	b9b0      	cbnz	r0, 14a18 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   149ea:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   149ec:	0799      	lsls	r1, r3, #30
   149ee:	d533      	bpl.n	14a58 <uarte_0_init+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   149f0:	f106 0018 	add.w	r0, r6, #24
   149f4:	f001 fb4e 	bl	16094 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   149f8:	4b2b      	ldr	r3, [pc, #172]	; (14aa8 <uarte_0_init+0x118>)
   149fa:	4298      	cmp	r0, r3
   149fc:	d010      	beq.n	14a20 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   149fe:	4b2b      	ldr	r3, [pc, #172]	; (14aac <uarte_0_init+0x11c>)
   14a00:	9305      	str	r3, [sp, #20]
   14a02:	2302      	movs	r3, #2
   14a04:	9304      	str	r3, [sp, #16]
   14a06:	462b      	mov	r3, r5
		return -EIO;
   14a08:	f06f 0504 	mvn.w	r5, #4
   14a0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14a10:	4827      	ldr	r0, [pc, #156]	; (14ab0 <uarte_0_init+0x120>)
   14a12:	aa04      	add	r2, sp, #16
   14a14:	f7f6 fef8 	bl	b808 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   14a18:	4628      	mov	r0, r5
   14a1a:	b007      	add	sp, #28
   14a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14a20:	7e33      	ldrb	r3, [r6, #24]
    NRFX_ASSERT(tep);
   14a22:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14a2a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   14a2e:	d10b      	bne.n	14a48 <uarte_0_init+0xb8>
   14a30:	4920      	ldr	r1, [pc, #128]	; (14ab4 <uarte_0_init+0x124>)
   14a32:	4821      	ldr	r0, [pc, #132]	; (14ab8 <uarte_0_init+0x128>)
   14a34:	f240 234e 	movw	r3, #590	; 0x24e
   14a38:	4a20      	ldr	r2, [pc, #128]	; (14abc <uarte_0_init+0x12c>)
   14a3a:	f007 f97d 	bl	1bd38 <assert_print>
   14a3e:	f240 214e 	movw	r1, #590	; 0x24e
   14a42:	481e      	ldr	r0, [pc, #120]	; (14abc <uarte_0_init+0x12c>)
   14a44:	f007 f971 	bl	1bd2a <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14a48:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   14a4c:	2301      	movs	r3, #1
   14a4e:	7e32      	ldrb	r2, [r6, #24]
   14a50:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   14a52:	4a1b      	ldr	r2, [pc, #108]	; (14ac0 <uarte_0_init+0x130>)
   14a54:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14a58:	2308      	movs	r3, #8
   14a5a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   14a5e:	7a3b      	ldrb	r3, [r7, #8]
   14a60:	b953      	cbnz	r3, 14a78 <uarte_0_init+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a62:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   14a66:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14a6a:	6973      	ldr	r3, [r6, #20]
   14a6c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14a70:	2301      	movs	r3, #1
   14a72:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14a76:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   14a78:	687b      	ldr	r3, [r7, #4]
   14a7a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   14a7c:	bf5c      	itt	pl
   14a7e:	f44f 7380 	movpl.w	r3, #256	; 0x100
   14a82:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14a86:	687b      	ldr	r3, [r7, #4]
   14a88:	06db      	lsls	r3, r3, #27
   14a8a:	bf44      	itt	mi
   14a8c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   14a90:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14a94:	6933      	ldr	r3, [r6, #16]
   14a96:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14a9a:	2300      	movs	r3, #0
   14a9c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14aa0:	2301      	movs	r3, #1
   14aa2:	60a3      	str	r3, [r4, #8]
   14aa4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   14aa6:	e7b7      	b.n	14a18 <uarte_0_init+0x88>
   14aa8:	0bad0000 	.word	0x0bad0000
   14aac:	00022f31 	.word	0x00022f31
   14ab0:	0001f990 	.word	0x0001f990
   14ab4:	00020b2f 	.word	0x00020b2f
   14ab8:	000205a4 	.word	0x000205a4
   14abc:	00020af7 	.word	0x00020af7
   14ac0:	40017000 	.word	0x40017000

00014ac4 <uarte_nrfx_poll_out>:
{
   14ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ac6:	4604      	mov	r4, r0
   14ac8:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   14aca:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14acc:	f00a fabe 	bl	1f04c <k_is_in_isr>
   14ad0:	b9b0      	cbnz	r0, 14b00 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   14ad2:	4b2e      	ldr	r3, [pc, #184]	; (14b8c <uarte_nrfx_poll_out+0xc8>)
   14ad4:	781b      	ldrb	r3, [r3, #0]
   14ad6:	b19b      	cbz	r3, 14b00 <uarte_nrfx_poll_out+0x3c>
{
   14ad8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   14ada:	6860      	ldr	r0, [r4, #4]
   14adc:	f009 fbbf 	bl	1e25e <is_tx_ready.isra.0>
   14ae0:	bb00      	cbnz	r0, 14b24 <uarte_nrfx_poll_out+0x60>
   14ae2:	2001      	movs	r0, #1
   14ae4:	f009 fd56 	bl	1e594 <nrfx_busy_wait>
   14ae8:	3e01      	subs	r6, #1
   14aea:	d1f6      	bne.n	14ada <uarte_nrfx_poll_out+0x16>
   14aec:	2100      	movs	r1, #0
   14aee:	2021      	movs	r0, #33	; 0x21
   14af0:	f005 fd6a 	bl	1a5c8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14af4:	e7f0      	b.n	14ad8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   14af6:	f386 8811 	msr	BASEPRI, r6
   14afa:	f3bf 8f6f 	isb	sy
}
   14afe:	e7f5      	b.n	14aec <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   14b00:	f04f 0320 	mov.w	r3, #32
   14b04:	f3ef 8611 	mrs	r6, BASEPRI
   14b08:	f383 8812 	msr	BASEPRI_MAX, r3
   14b0c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14b10:	6860      	ldr	r0, [r4, #4]
   14b12:	4631      	mov	r1, r6
   14b14:	f009 fba3 	bl	1e25e <is_tx_ready.isra.0>
   14b18:	b990      	cbnz	r0, 14b40 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   14b1a:	f386 8811 	msr	BASEPRI, r6
   14b1e:	f3bf 8f6f 	isb	sy
}
   14b22:	e7ed      	b.n	14b00 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   14b24:	f04f 0320 	mov.w	r3, #32
   14b28:	f3ef 8611 	mrs	r6, BASEPRI
   14b2c:	f383 8812 	msr	BASEPRI_MAX, r3
   14b30:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14b34:	6860      	ldr	r0, [r4, #4]
   14b36:	4631      	mov	r1, r6
   14b38:	f009 fb91 	bl	1e25e <is_tx_ready.isra.0>
   14b3c:	2800      	cmp	r0, #0
   14b3e:	d0da      	beq.n	14af6 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   14b40:	693b      	ldr	r3, [r7, #16]
   14b42:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   14b44:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14b46:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   14b48:	6813      	ldr	r3, [r2, #0]
   14b4a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14b4e:	2001      	movs	r0, #1
   14b50:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b54:	2000      	movs	r0, #0
   14b56:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   14b5a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   14b5e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14b62:	6852      	ldr	r2, [r2, #4]
   14b64:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   14b68:	06d2      	lsls	r2, r2, #27
   14b6a:	d508      	bpl.n	14b7e <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14b6c:	2008      	movs	r0, #8
	return config->uarte_regs;
   14b6e:	6862      	ldr	r2, [r4, #4]
   14b70:	6812      	ldr	r2, [r2, #0]
   14b72:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   14b76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   14b7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b7e:	2201      	movs	r2, #1
   14b80:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   14b82:	f381 8811 	msr	BASEPRI, r1
   14b86:	f3bf 8f6f 	isb	sy
}
   14b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b8c:	20009c5d 	.word	0x20009c5d

00014b90 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   14b90:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14b92:	7d01      	ldrb	r1, [r0, #20]
   14b94:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   14b96:	2902      	cmp	r1, #2
{
   14b98:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   14b9a:	d018      	beq.n	14bce <bt_rpmsg_send+0x3e>
   14b9c:	2904      	cmp	r1, #4
   14b9e:	d015      	beq.n	14bcc <bt_rpmsg_send+0x3c>
   14ba0:	b339      	cbz	r1, 14bf2 <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   14ba2:	466d      	mov	r5, sp
   14ba4:	b088      	sub	sp, #32
   14ba6:	466a      	mov	r2, sp
   14ba8:	4b13      	ldr	r3, [pc, #76]	; (14bf8 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   14baa:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		BT_ERR("Failed to send (err %d)", err);
   14bae:	2303      	movs	r3, #3
   14bb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14bb4:	4811      	ldr	r0, [pc, #68]	; (14bfc <bt_rpmsg_send+0x6c>)
   14bb6:	f842 3f10 	str.w	r3, [r2, #16]!
   14bba:	f009 fb99 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
   14bbe:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   14bc0:	4620      	mov	r0, r4
   14bc2:	f7fe ff41 	bl	13a48 <net_buf_unref>
	return 0;
}
   14bc6:	2000      	movs	r0, #0
   14bc8:	46bd      	mov	sp, r7
   14bca:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   14bcc:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   14bce:	f104 0008 	add.w	r0, r4, #8
   14bd2:	f009 fa67 	bl	1e0a4 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   14bd6:	89a2      	ldrh	r2, [r4, #12]
   14bd8:	68a1      	ldr	r1, [r4, #8]
   14bda:	4809      	ldr	r0, [pc, #36]	; (14c00 <bt_rpmsg_send+0x70>)
   14bdc:	f7f7 f958 	bl	be90 <ipc_service_send>
	if (err < 0) {
   14be0:	2800      	cmp	r0, #0
   14be2:	daed      	bge.n	14bc0 <bt_rpmsg_send+0x30>
		BT_ERR("Failed to send (err %d)", err);
   14be4:	466d      	mov	r5, sp
   14be6:	b088      	sub	sp, #32
   14be8:	466a      	mov	r2, sp
   14bea:	4b06      	ldr	r3, [pc, #24]	; (14c04 <bt_rpmsg_send+0x74>)
   14bec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14bf0:	e7dd      	b.n	14bae <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   14bf2:	2101      	movs	r1, #1
   14bf4:	e7eb      	b.n	14bce <bt_rpmsg_send+0x3e>
   14bf6:	bf00      	nop
   14bf8:	00022f6a 	.word	0x00022f6a
   14bfc:	0001f8e0 	.word	0x0001f8e0
   14c00:	20009a68 	.word	0x20009a68
   14c04:	00022f7a 	.word	0x00022f7a

00014c08 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   14c08:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   14c0a:	480c      	ldr	r0, [pc, #48]	; (14c3c <bt_rpmsg_init+0x34>)
{
   14c0c:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   14c0e:	f7fa fa05 	bl	f01c <bt_hci_driver_register>
	if (err < 0) {
   14c12:	1e04      	subs	r4, r0, #0
   14c14:	da0e      	bge.n	14c34 <bt_rpmsg_init+0x2c>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   14c16:	466d      	mov	r5, sp
   14c18:	b088      	sub	sp, #32
   14c1a:	466a      	mov	r2, sp
   14c1c:	4b08      	ldr	r3, [pc, #32]	; (14c40 <bt_rpmsg_init+0x38>)
   14c1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c22:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14c26:	2303      	movs	r3, #3
   14c28:	4806      	ldr	r0, [pc, #24]	; (14c44 <bt_rpmsg_init+0x3c>)
   14c2a:	f842 3f10 	str.w	r3, [r2, #16]!
   14c2e:	f009 fb5f 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
   14c32:	46ad      	mov	sp, r5
	}

	return err;
}
   14c34:	4620      	mov	r0, r4
   14c36:	46bd      	mov	sp, r7
   14c38:	bdb0      	pop	{r4, r5, r7, pc}
   14c3a:	bf00      	nop
   14c3c:	00020114 	.word	0x00020114
   14c40:	00022f92 	.word	0x00022f92
   14c44:	0001f8e0 	.word	0x0001f8e0

00014c48 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   14c48:	4801      	ldr	r0, [pc, #4]	; (14c50 <hci_ept_bound+0x8>)
   14c4a:	f003 bdc9 	b.w	187e0 <z_impl_k_sem_give>
   14c4e:	bf00      	nop
   14c50:	20008564 	.word	0x20008564

00014c54 <bt_rpmsg_open>:
{
   14c54:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   14c56:	481a      	ldr	r0, [pc, #104]	; (14cc0 <bt_rpmsg_open+0x6c>)
{
   14c58:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   14c5a:	f7f7 f8b9 	bl	bdd0 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   14c5e:	4604      	mov	r4, r0
   14c60:	b1a0      	cbz	r0, 14c8c <bt_rpmsg_open+0x38>
   14c62:	f110 0f78 	cmn.w	r0, #120	; 0x78
   14c66:	d011      	beq.n	14c8c <bt_rpmsg_open+0x38>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   14c68:	466d      	mov	r5, sp
   14c6a:	b088      	sub	sp, #32
   14c6c:	466a      	mov	r2, sp
   14c6e:	4b15      	ldr	r3, [pc, #84]	; (14cc4 <bt_rpmsg_open+0x70>)
		BT_ERR("Endpoint binding failed with %d", err);
   14c70:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14c74:	2303      	movs	r3, #3
   14c76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c7a:	4813      	ldr	r0, [pc, #76]	; (14cc8 <bt_rpmsg_open+0x74>)
   14c7c:	f842 3f10 	str.w	r3, [r2, #16]!
   14c80:	f009 fb36 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
   14c84:	46ad      	mov	sp, r5
}
   14c86:	4620      	mov	r0, r4
   14c88:	46bd      	mov	sp, r7
   14c8a:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   14c8c:	4a0f      	ldr	r2, [pc, #60]	; (14ccc <bt_rpmsg_open+0x78>)
   14c8e:	4910      	ldr	r1, [pc, #64]	; (14cd0 <bt_rpmsg_open+0x7c>)
   14c90:	480b      	ldr	r0, [pc, #44]	; (14cc0 <bt_rpmsg_open+0x6c>)
   14c92:	f7f7 f8cb 	bl	be2c <ipc_service_register_endpoint>
	if (err) {
   14c96:	4604      	mov	r4, r0
   14c98:	b120      	cbz	r0, 14ca4 <bt_rpmsg_open+0x50>
		BT_ERR("Registering endpoint failed with %d", err);
   14c9a:	466d      	mov	r5, sp
   14c9c:	b088      	sub	sp, #32
   14c9e:	466a      	mov	r2, sp
   14ca0:	4b0c      	ldr	r3, [pc, #48]	; (14cd4 <bt_rpmsg_open+0x80>)
   14ca2:	e7e5      	b.n	14c70 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   14ca4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14ca8:	2300      	movs	r3, #0
   14caa:	480b      	ldr	r0, [pc, #44]	; (14cd8 <bt_rpmsg_open+0x84>)
   14cac:	f003 fddc 	bl	18868 <z_impl_k_sem_take>
	if (err) {
   14cb0:	4604      	mov	r4, r0
   14cb2:	2800      	cmp	r0, #0
   14cb4:	d0e7      	beq.n	14c86 <bt_rpmsg_open+0x32>
		BT_ERR("Endpoint binding failed with %d", err);
   14cb6:	466d      	mov	r5, sp
   14cb8:	b088      	sub	sp, #32
   14cba:	466a      	mov	r2, sp
   14cbc:	4b07      	ldr	r3, [pc, #28]	; (14cdc <bt_rpmsg_open+0x88>)
   14cbe:	e7d7      	b.n	14c70 <bt_rpmsg_open+0x1c>
   14cc0:	0001f588 	.word	0x0001f588
   14cc4:	00022fbc 	.word	0x00022fbc
   14cc8:	0001f8e0 	.word	0x0001f8e0
   14ccc:	200082a4 	.word	0x200082a4
   14cd0:	20009a68 	.word	0x20009a68
   14cd4:	00022fec 	.word	0x00022fec
   14cd8:	20008564 	.word	0x20008564
   14cdc:	00023010 	.word	0x00023010

00014ce0 <hci_ept_recv>:
{
   14ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ce4:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   14ce6:	4680      	mov	r8, r0
   14ce8:	f818 9b01 	ldrb.w	r9, [r8], #1
{
   14cec:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   14cee:	f1b9 0f04 	cmp.w	r9, #4
{
   14cf2:	460c      	mov	r4, r1
   14cf4:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   14cf6:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   14cfa:	d00d      	beq.n	14d18 <hci_ept_recv+0x38>
   14cfc:	f1b9 0f05 	cmp.w	r9, #5
   14d00:	f000 80a3 	beq.w	14e4a <hci_ept_recv+0x16a>
   14d04:	f1b9 0f02 	cmp.w	r9, #2
   14d08:	f040 80cc 	bne.w	14ea4 <hci_ept_recv+0x1c4>
	if (remaining < sizeof(hdr)) {
   14d0c:	2b03      	cmp	r3, #3
   14d0e:	d875      	bhi.n	14dfc <hci_ept_recv+0x11c>
		BT_ERR("Not enough data for ACL header");
   14d10:	4b6c      	ldr	r3, [pc, #432]	; (14ec4 <hci_ept_recv+0x1e4>)
		BT_ERR("No available ACL buffers!");
   14d12:	e9c7 9306 	strd	r9, r3, [r7, #24]
   14d16:	e005      	b.n	14d24 <hci_ept_recv+0x44>
	if (remaining < sizeof(hdr)) {
   14d18:	2b01      	cmp	r3, #1
   14d1a:	d80e      	bhi.n	14d3a <hci_ept_recv+0x5a>
		BT_ERR("Not enough data for event header");
   14d1c:	4b6a      	ldr	r3, [pc, #424]	; (14ec8 <hci_ept_recv+0x1e8>)
		BT_ERR("Event payload length is not correct");
   14d1e:	61fb      	str	r3, [r7, #28]
   14d20:	2302      	movs	r3, #2
   14d22:	61bb      	str	r3, [r7, #24]
   14d24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d28:	4868      	ldr	r0, [pc, #416]	; (14ecc <hci_ept_recv+0x1ec>)
   14d2a:	f107 0218 	add.w	r2, r7, #24
   14d2e:	f009 fadf 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
}
   14d32:	3724      	adds	r7, #36	; 0x24
   14d34:	46bd      	mov	sp, r7
   14d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   14d3a:	7843      	ldrb	r3, [r0, #1]
   14d3c:	2b3e      	cmp	r3, #62	; 0x3e
   14d3e:	d13e      	bne.n	14dbe <hci_ept_recv+0xde>
		switch (subevt_type) {
   14d40:	f890 a003 	ldrb.w	sl, [r0, #3]
   14d44:	f1aa 0302 	sub.w	r3, sl, #2
   14d48:	f1d3 0a00 	rsbs	sl, r3, #0
   14d4c:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   14d50:	2202      	movs	r2, #2
   14d52:	4641      	mov	r1, r8
   14d54:	1d38      	adds	r0, r7, #4
   14d56:	f007 fffe 	bl	1cd56 <memcpy>
	if (remaining != hdr.len) {
   14d5a:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   14d5c:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   14d5e:	429c      	cmp	r4, r3
   14d60:	d133      	bne.n	14dca <hci_ept_recv+0xea>
   14d62:	f1ba 0f00 	cmp.w	sl, #0
   14d66:	d02d      	beq.n	14dc4 <hci_ept_recv+0xe4>
   14d68:	f04f 0800 	mov.w	r8, #0
   14d6c:	f04f 0900 	mov.w	r9, #0
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   14d70:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   14d74:	4642      	mov	r2, r8
   14d76:	464b      	mov	r3, r9
   14d78:	4651      	mov	r1, sl
   14d7a:	7938      	ldrb	r0, [r7, #4]
   14d7c:	f7f8 ffda 	bl	dd34 <bt_buf_get_evt>
		if (!buf) {
   14d80:	4605      	mov	r5, r0
   14d82:	b320      	cbz	r0, 14dce <hci_ept_recv+0xee>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14d84:	f100 0808 	add.w	r8, r0, #8
   14d88:	2202      	movs	r2, #2
   14d8a:	1d39      	adds	r1, r7, #4
   14d8c:	4640      	mov	r0, r8
   14d8e:	f009 f9a4 	bl	1e0da <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   14d92:	4640      	mov	r0, r8
   14d94:	f009 f999 	bl	1e0ca <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   14d98:	4284      	cmp	r4, r0
   14d9a:	d926      	bls.n	14dea <hci_ept_recv+0x10a>
		BT_ERR("Not enough space in buffer %zu/%zu",
   14d9c:	466e      	mov	r6, sp
   14d9e:	b088      	sub	sp, #32
   14da0:	466a      	mov	r2, sp
   14da2:	4b4b      	ldr	r3, [pc, #300]	; (14ed0 <hci_ept_recv+0x1f0>)
   14da4:	61d0      	str	r0, [r2, #28]
   14da6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14daa:	2304      	movs	r3, #4
   14dac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14db0:	4846      	ldr	r0, [pc, #280]	; (14ecc <hci_ept_recv+0x1ec>)
   14db2:	f842 3f10 	str.w	r3, [r2, #16]!
   14db6:	f009 fa9b 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
   14dba:	46b5      	mov	sp, r6
   14dbc:	e03f      	b.n	14e3e <hci_ept_recv+0x15e>
			return false;
   14dbe:	f04f 0a00 	mov.w	sl, #0
   14dc2:	e7c5      	b.n	14d50 <hci_ept_recv+0x70>
   14dc4:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   14dc8:	e7d0      	b.n	14d6c <hci_ept_recv+0x8c>
		BT_ERR("Event payload length is not correct");
   14dca:	4b42      	ldr	r3, [pc, #264]	; (14ed4 <hci_ept_recv+0x1f4>)
   14dcc:	e7a7      	b.n	14d1e <hci_ept_recv+0x3e>
			if (discardable) {
   14dce:	f1ba 0f00 	cmp.w	sl, #0
   14dd2:	d1ae      	bne.n	14d32 <hci_ept_recv+0x52>
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   14dd4:	4b40      	ldr	r3, [pc, #256]	; (14ed8 <hci_ept_recv+0x1f8>)
   14dd6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14dda:	e9c7 b306 	strd	fp, r3, [r7, #24]
   14dde:	483b      	ldr	r0, [pc, #236]	; (14ecc <hci_ept_recv+0x1ec>)
   14de0:	f107 0218 	add.w	r2, r7, #24
   14de4:	f009 fa84 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
	} while (!buf);
   14de8:	e7c4      	b.n	14d74 <hci_ept_recv+0x94>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14dea:	4622      	mov	r2, r4
   14dec:	1cf1      	adds	r1, r6, #3
   14dee:	4640      	mov	r0, r8
   14df0:	f009 f973 	bl	1e0da <net_buf_simple_add_mem>
		bt_recv(buf);
   14df4:	4628      	mov	r0, r5
   14df6:	f7fa f8dd 	bl	efb4 <bt_recv>
}
   14dfa:	e79a      	b.n	14d32 <hci_ept_recv+0x52>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   14dfc:	2200      	movs	r2, #0
   14dfe:	2300      	movs	r3, #0
   14e00:	2003      	movs	r0, #3
   14e02:	f7f8 ff49 	bl	dc98 <bt_buf_get_rx>
	if (buf) {
   14e06:	4605      	mov	r5, r0
   14e08:	b1e8      	cbz	r0, 14e46 <hci_ept_recv+0x166>
		memcpy((void *)&hdr, data, sizeof(hdr));
   14e0a:	2204      	movs	r2, #4
   14e0c:	4641      	mov	r1, r8
   14e0e:	18b8      	adds	r0, r7, r2
   14e10:	f007 ffa1 	bl	1cd56 <memcpy>
   14e14:	2204      	movs	r2, #4
   14e16:	f105 0808 	add.w	r8, r5, #8
   14e1a:	4640      	mov	r0, r8
   14e1c:	18b9      	adds	r1, r7, r2
   14e1e:	f009 f95c 	bl	1e0da <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   14e22:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   14e24:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   14e26:	429c      	cmp	r4, r3
   14e28:	d033      	beq.n	14e92 <hci_ept_recv+0x1b2>
		BT_ERR("ACL payload length is not correct");
   14e2a:	4b2c      	ldr	r3, [pc, #176]	; (14edc <hci_ept_recv+0x1fc>)
   14e2c:	e9c7 9306 	strd	r9, r3, [r7, #24]
		BT_ERR("ISO payload length is not correct");
   14e30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e34:	4825      	ldr	r0, [pc, #148]	; (14ecc <hci_ept_recv+0x1ec>)
   14e36:	f107 0218 	add.w	r2, r7, #24
   14e3a:	f009 fa59 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   14e3e:	4628      	mov	r0, r5
   14e40:	f7fe fe02 	bl	13a48 <net_buf_unref>
	if (buf) {
   14e44:	e775      	b.n	14d32 <hci_ept_recv+0x52>
		BT_ERR("No available ACL buffers!");
   14e46:	4b26      	ldr	r3, [pc, #152]	; (14ee0 <hci_ept_recv+0x200>)
   14e48:	e763      	b.n	14d12 <hci_ept_recv+0x32>
	if (remaining < sizeof(hdr)) {
   14e4a:	2b03      	cmp	r3, #3
   14e4c:	d801      	bhi.n	14e52 <hci_ept_recv+0x172>
		BT_ERR("Not enough data for ISO header");
   14e4e:	4b25      	ldr	r3, [pc, #148]	; (14ee4 <hci_ept_recv+0x204>)
   14e50:	e765      	b.n	14d1e <hci_ept_recv+0x3e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   14e52:	2200      	movs	r2, #0
   14e54:	2300      	movs	r3, #0
   14e56:	4648      	mov	r0, r9
   14e58:	f7f8 ff1e 	bl	dc98 <bt_buf_get_rx>
	if (buf) {
   14e5c:	4605      	mov	r5, r0
   14e5e:	b1b0      	cbz	r0, 14e8e <hci_ept_recv+0x1ae>
		memcpy((void *)&hdr, data, sizeof(hdr));
   14e60:	2204      	movs	r2, #4
   14e62:	4641      	mov	r1, r8
   14e64:	18b8      	adds	r0, r7, r2
   14e66:	f007 ff76 	bl	1cd56 <memcpy>
   14e6a:	2204      	movs	r2, #4
   14e6c:	f105 0808 	add.w	r8, r5, #8
   14e70:	4640      	mov	r0, r8
   14e72:	18b9      	adds	r1, r7, r2
   14e74:	f009 f931 	bl	1e0da <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   14e78:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   14e7a:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   14e7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   14e80:	429c      	cmp	r4, r3
   14e82:	d006      	beq.n	14e92 <hci_ept_recv+0x1b2>
		BT_ERR("ISO payload length is not correct");
   14e84:	4b18      	ldr	r3, [pc, #96]	; (14ee8 <hci_ept_recv+0x208>)
   14e86:	61fb      	str	r3, [r7, #28]
   14e88:	2302      	movs	r3, #2
   14e8a:	61bb      	str	r3, [r7, #24]
   14e8c:	e7d0      	b.n	14e30 <hci_ept_recv+0x150>
		BT_ERR("No available ISO buffers!");
   14e8e:	4b17      	ldr	r3, [pc, #92]	; (14eec <hci_ept_recv+0x20c>)
   14e90:	e745      	b.n	14d1e <hci_ept_recv+0x3e>
	return net_buf_simple_tailroom(&buf->b);
   14e92:	4640      	mov	r0, r8
   14e94:	f009 f919 	bl	1e0ca <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   14e98:	4284      	cmp	r4, r0
   14e9a:	f63f af7f 	bhi.w	14d9c <hci_ept_recv+0xbc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14e9e:	4622      	mov	r2, r4
   14ea0:	1d71      	adds	r1, r6, #5
   14ea2:	e7a4      	b.n	14dee <hci_ept_recv+0x10e>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   14ea4:	466c      	mov	r4, sp
   14ea6:	b088      	sub	sp, #32
   14ea8:	466a      	mov	r2, sp
   14eaa:	4b11      	ldr	r3, [pc, #68]	; (14ef0 <hci_ept_recv+0x210>)
   14eac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   14eb0:	e9c2 3905 	strd	r3, r9, [r2, #20]
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   14eb4:	2303      	movs	r3, #3
   14eb6:	4805      	ldr	r0, [pc, #20]	; (14ecc <hci_ept_recv+0x1ec>)
   14eb8:	f842 3f10 	str.w	r3, [r2, #16]!
   14ebc:	f009 fa18 	bl	1e2f0 <z_log_msg_static_create.constprop.0>
   14ec0:	46a5      	mov	sp, r4
   14ec2:	e736      	b.n	14d32 <hci_ept_recv+0x52>
   14ec4:	000230cd 	.word	0x000230cd
   14ec8:	00023030 	.word	0x00023030
   14ecc:	0001f8e0 	.word	0x0001f8e0
   14ed0:	000230aa 	.word	0x000230aa
   14ed4:	00023051 	.word	0x00023051
   14ed8:	00023075 	.word	0x00023075
   14edc:	00023106 	.word	0x00023106
   14ee0:	000230ec 	.word	0x000230ec
   14ee4:	00023128 	.word	0x00023128
   14ee8:	00023161 	.word	0x00023161
   14eec:	00023147 	.word	0x00023147
   14ef0:	00023183 	.word	0x00023183

00014ef4 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   14ef4:	b508      	push	{r3, lr}
   14ef6:	4603      	mov	r3, r0
   14ef8:	4608      	mov	r0, r1
   14efa:	4611      	mov	r1, r2
	__ASSERT_NO_MSG(dev != NULL);
   14efc:	b94b      	cbnz	r3, 14f12 <entropy_cc3xx_rng_get_entropy+0x1e>
   14efe:	490c      	ldr	r1, [pc, #48]	; (14f30 <entropy_cc3xx_rng_get_entropy+0x3c>)
   14f00:	2320      	movs	r3, #32
   14f02:	4a0c      	ldr	r2, [pc, #48]	; (14f34 <entropy_cc3xx_rng_get_entropy+0x40>)
   14f04:	480c      	ldr	r0, [pc, #48]	; (14f38 <entropy_cc3xx_rng_get_entropy+0x44>)
   14f06:	f006 ff17 	bl	1bd38 <assert_print>
   14f0a:	2120      	movs	r1, #32
	__ASSERT_NO_MSG(buffer != NULL);
   14f0c:	4809      	ldr	r0, [pc, #36]	; (14f34 <entropy_cc3xx_rng_get_entropy+0x40>)
   14f0e:	f006 ff0c 	bl	1bd2a <assert_post_action>
   14f12:	b938      	cbnz	r0, 14f24 <entropy_cc3xx_rng_get_entropy+0x30>
   14f14:	4909      	ldr	r1, [pc, #36]	; (14f3c <entropy_cc3xx_rng_get_entropy+0x48>)
   14f16:	2321      	movs	r3, #33	; 0x21
   14f18:	4a06      	ldr	r2, [pc, #24]	; (14f34 <entropy_cc3xx_rng_get_entropy+0x40>)
   14f1a:	4807      	ldr	r0, [pc, #28]	; (14f38 <entropy_cc3xx_rng_get_entropy+0x44>)
   14f1c:	f006 ff0c 	bl	1bd38 <assert_print>
   14f20:	2121      	movs	r1, #33	; 0x21
   14f22:	e7f3      	b.n	14f0c <entropy_cc3xx_rng_get_entropy+0x18>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   14f24:	f000 fe04 	bl	15b30 <psa_generate_random>
	int err = EINVAL;
   14f28:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   14f2a:	bf18      	it	ne
   14f2c:	2016      	movne	r0, #22
   14f2e:	bd08      	pop	{r3, pc}
   14f30:	000231f5 	.word	0x000231f5
   14f34:	000231c5 	.word	0x000231c5
   14f38:	000205a4 	.word	0x000205a4
   14f3c:	00023208 	.word	0x00023208

00014f40 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14f40:	2301      	movs	r3, #1
   14f42:	4083      	lsls	r3, r0
{
   14f44:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   14f46:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14f48:	4a0b      	ldr	r2, [pc, #44]	; (14f78 <compare_int_lock+0x38>)
   14f4a:	e8d2 1fef 	ldaex	r1, [r2]
   14f4e:	ea01 0504 	and.w	r5, r1, r4
   14f52:	e8c2 5fe6 	stlex	r6, r5, [r2]
   14f56:	2e00      	cmp	r6, #0
   14f58:	d1f7      	bne.n	14f4a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14f5e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   14f60:	4806      	ldr	r0, [pc, #24]	; (14f7c <compare_int_lock+0x3c>)
   14f62:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   14f66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f6a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   14f6e:	420b      	tst	r3, r1
}
   14f70:	bf14      	ite	ne
   14f72:	2001      	movne	r0, #1
   14f74:	2000      	moveq	r0, #0
   14f76:	bd70      	pop	{r4, r5, r6, pc}
   14f78:	20009a78 	.word	0x20009a78
   14f7c:	40015000 	.word	0x40015000

00014f80 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   14f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14f82:	491b      	ldr	r1, [pc, #108]	; (14ff0 <sys_clock_timeout_handler+0x70>)
{
   14f84:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   14f86:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14f8a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   14f8c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   14f90:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14f94:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   14f96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14f9a:	d30f      	bcc.n	14fbc <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14f9c:	f005 fe96 	bl	1accc <sys_clock_announce>
    return p_reg->CC[ch];
   14fa0:	00a3      	lsls	r3, r4, #2
   14fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14fa6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   14faa:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   14fae:	4295      	cmp	r5, r2
   14fb0:	d11d      	bne.n	14fee <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   14fb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   14fb6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   14fba:	e012      	b.n	14fe2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   14fbc:	4b0d      	ldr	r3, [pc, #52]	; (14ff4 <sys_clock_timeout_handler+0x74>)
   14fbe:	681b      	ldr	r3, [r3, #0]
   14fc0:	0a1a      	lsrs	r2, r3, #8
   14fc2:	061b      	lsls	r3, r3, #24
   14fc4:	195e      	adds	r6, r3, r5
   14fc6:	4b0c      	ldr	r3, [pc, #48]	; (14ff8 <sys_clock_timeout_handler+0x78>)
   14fc8:	f142 0700 	adc.w	r7, r2, #0
   14fcc:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14fd0:	f005 fe7c 	bl	1accc <sys_clock_announce>
    return p_reg->CC[ch];
   14fd4:	4a09      	ldr	r2, [pc, #36]	; (14ffc <sys_clock_timeout_handler+0x7c>)
   14fd6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   14fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   14fde:	429d      	cmp	r5, r3
   14fe0:	d105      	bne.n	14fee <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14fe6:	4a05      	ldr	r2, [pc, #20]	; (14ffc <sys_clock_timeout_handler+0x7c>)
   14fe8:	40a3      	lsls	r3, r4
   14fea:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   14fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ff0:	200094a0 	.word	0x200094a0
   14ff4:	20009a7c 	.word	0x20009a7c
   14ff8:	200094a8 	.word	0x200094a8
   14ffc:	40015000 	.word	0x40015000

00015000 <compare_int_unlock>:
	if (key) {
   15000:	b1d9      	cbz	r1, 1503a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   15002:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15004:	4a0d      	ldr	r2, [pc, #52]	; (1503c <compare_int_unlock+0x3c>)
   15006:	4083      	lsls	r3, r0
   15008:	e8d2 cfef 	ldaex	ip, [r2]
   1500c:	ea4c 0c03 	orr.w	ip, ip, r3
   15010:	e8c2 cfe1 	stlex	r1, ip, [r2]
   15014:	2900      	cmp	r1, #0
   15016:	d1f7      	bne.n	15008 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1501c:	4a08      	ldr	r2, [pc, #32]	; (15040 <compare_int_unlock+0x40>)
   1501e:	4083      	lsls	r3, r0
   15020:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15024:	4b07      	ldr	r3, [pc, #28]	; (15044 <compare_int_unlock+0x44>)
   15026:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1502a:	40c3      	lsrs	r3, r0
   1502c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1502e:	bf42      	ittt	mi
   15030:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   15034:	4b04      	ldrmi	r3, [pc, #16]	; (15048 <compare_int_unlock+0x48>)
   15036:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1503a:	4770      	bx	lr
   1503c:	20009a78 	.word	0x20009a78
   15040:	40015000 	.word	0x40015000
   15044:	20009a70 	.word	0x20009a70
   15048:	e000e100 	.word	0xe000e100

0001504c <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1504c:	2801      	cmp	r0, #1
{
   1504e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   15050:	d909      	bls.n	15066 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   15052:	4907      	ldr	r1, [pc, #28]	; (15070 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   15054:	4807      	ldr	r0, [pc, #28]	; (15074 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   15056:	237b      	movs	r3, #123	; 0x7b
   15058:	4a07      	ldr	r2, [pc, #28]	; (15078 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1505a:	f006 fe6d 	bl	1bd38 <assert_print>
   1505e:	217b      	movs	r1, #123	; 0x7b
   15060:	4805      	ldr	r0, [pc, #20]	; (15078 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   15062:	f006 fe62 	bl	1bd2a <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   15066:	0083      	lsls	r3, r0, #2
}
   15068:	4804      	ldr	r0, [pc, #16]	; (1507c <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1506a:	4418      	add	r0, r3
   1506c:	bd08      	pop	{r3, pc}
   1506e:	bf00      	nop
   15070:	0002325d 	.word	0x0002325d
   15074:	000205a4 	.word	0x000205a4
   15078:	0002322c 	.word	0x0002322c
   1507c:	40015140 	.word	0x40015140

00015080 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   15080:	2801      	cmp	r0, #1
{
   15082:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   15084:	d909      	bls.n	1509a <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   15086:	4907      	ldr	r1, [pc, #28]	; (150a4 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   15088:	4807      	ldr	r0, [pc, #28]	; (150a8 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1508a:	2382      	movs	r3, #130	; 0x82
   1508c:	4a07      	ldr	r2, [pc, #28]	; (150ac <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1508e:	f006 fe53 	bl	1bd38 <assert_print>
   15092:	2182      	movs	r1, #130	; 0x82
   15094:	4805      	ldr	r0, [pc, #20]	; (150ac <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   15096:	f006 fe48 	bl	1bd2a <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1509a:	2800      	cmp	r0, #0
}
   1509c:	4804      	ldr	r0, [pc, #16]	; (150b0 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1509e:	bf08      	it	eq
   150a0:	2000      	moveq	r0, #0
   150a2:	bd08      	pop	{r3, pc}
   150a4:	0002325d 	.word	0x0002325d
   150a8:	000205a4 	.word	0x000205a4
   150ac:	0002322c 	.word	0x0002322c
   150b0:	40015044 	.word	0x40015044

000150b4 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   150b4:	2801      	cmp	r0, #1
{
   150b6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   150b8:	d909      	bls.n	150ce <z_nrf_rtc_timer_compare_read+0x1a>
   150ba:	4908      	ldr	r1, [pc, #32]	; (150dc <z_nrf_rtc_timer_compare_read+0x28>)
   150bc:	4808      	ldr	r0, [pc, #32]	; (150e0 <z_nrf_rtc_timer_compare_read+0x2c>)
   150be:	23b8      	movs	r3, #184	; 0xb8
   150c0:	4a08      	ldr	r2, [pc, #32]	; (150e4 <z_nrf_rtc_timer_compare_read+0x30>)
   150c2:	f006 fe39 	bl	1bd38 <assert_print>
   150c6:	21b8      	movs	r1, #184	; 0xb8
   150c8:	4806      	ldr	r0, [pc, #24]	; (150e4 <z_nrf_rtc_timer_compare_read+0x30>)
   150ca:	f006 fe2e 	bl	1bd2a <assert_post_action>
    return p_reg->CC[ch];
   150ce:	4b06      	ldr	r3, [pc, #24]	; (150e8 <z_nrf_rtc_timer_compare_read+0x34>)
   150d0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   150d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   150d8:	bd08      	pop	{r3, pc}
   150da:	bf00      	nop
   150dc:	0002325d 	.word	0x0002325d
   150e0:	000205a4 	.word	0x000205a4
   150e4:	0002322c 	.word	0x0002322c
   150e8:	40015000 	.word	0x40015000

000150ec <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   150ec:	4b0d      	ldr	r3, [pc, #52]	; (15124 <z_nrf_rtc_timer_read+0x38>)
   150ee:	6818      	ldr	r0, [r3, #0]
   150f0:	0a01      	lsrs	r1, r0, #8
   150f2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   150f4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   150f8:	4b0b      	ldr	r3, [pc, #44]	; (15128 <z_nrf_rtc_timer_read+0x3c>)
   150fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   150fe:	1818      	adds	r0, r3, r0
   15100:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   15104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15108:	d20a      	bcs.n	15120 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1510a:	4b08      	ldr	r3, [pc, #32]	; (1512c <z_nrf_rtc_timer_read+0x40>)
   1510c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15110:	4290      	cmp	r0, r2
   15112:	eb71 0303 	sbcs.w	r3, r1, r3
   15116:	d203      	bcs.n	15120 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   15118:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1511c:	f141 0100 	adc.w	r1, r1, #0
}
   15120:	4770      	bx	lr
   15122:	bf00      	nop
   15124:	20009a7c 	.word	0x20009a7c
   15128:	40015000 	.word	0x40015000
   1512c:	200094a8 	.word	0x200094a8

00015130 <compare_set>:
{
   15130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15134:	4614      	mov	r4, r2
   15136:	461d      	mov	r5, r3
   15138:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1513a:	f7ff ff01 	bl	14f40 <compare_int_lock>
   1513e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   15140:	f7ff ffd4 	bl	150ec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   15144:	42a0      	cmp	r0, r4
   15146:	eb71 0305 	sbcs.w	r3, r1, r5
   1514a:	d27a      	bcs.n	15242 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   1514c:	4b44      	ldr	r3, [pc, #272]	; (15260 <compare_set+0x130>)
   1514e:	1a20      	subs	r0, r4, r0
   15150:	eb65 0101 	sbc.w	r1, r5, r1
   15154:	4298      	cmp	r0, r3
   15156:	f171 0100 	sbcs.w	r1, r1, #0
   1515a:	d27d      	bcs.n	15258 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
   1515c:	4b41      	ldr	r3, [pc, #260]	; (15264 <compare_set+0x134>)
   1515e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   15162:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   15166:	429d      	cmp	r5, r3
   15168:	bf08      	it	eq
   1516a:	4294      	cmpeq	r4, r2
   1516c:	d054      	beq.n	15218 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1516e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   15172:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   15176:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15178:	2100      	movs	r1, #0
   1517a:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1517e:	f107 0850 	add.w	r8, r7, #80	; 0x50
   15182:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   15186:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1518a:	40bb      	lsls	r3, r7
   1518c:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
   15190:	fa1f f888 	uxth.w	r8, r8
   15194:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   15198:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1519a:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1519e:	4b32      	ldr	r3, [pc, #200]	; (15268 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   151a0:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   151a4:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   151a8:	eba0 000a 	sub.w	r0, r0, sl
   151ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   151b0:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   151b4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   151b6:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
   151ba:	d104      	bne.n	151c6 <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
   151bc:	2013      	movs	r0, #19
   151be:	f00a f841 	bl	1f244 <z_impl_k_busy_wait>
   151c2:	2100      	movs	r1, #0
   151c4:	4b28      	ldr	r3, [pc, #160]	; (15268 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   151c6:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   151ca:	eba6 000c 	sub.w	r0, r6, ip
   151ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   151d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   151d6:	bf88      	it	hi
   151d8:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   151da:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
   151de:	9a01      	ldr	r2, [sp, #4]
   151e0:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   151e4:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   151e8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   151ec:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   151f0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
   151f4:	4582      	cmp	sl, r0
   151f6:	d006      	beq.n	15206 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   151f8:	1a30      	subs	r0, r6, r0
   151fa:	3802      	subs	r0, #2
   151fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   15200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15204:	d81b      	bhi.n	1523e <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   15206:	eba6 060b 	sub.w	r6, r6, fp
   1520a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1520e:	1936      	adds	r6, r6, r4
   15210:	f145 0300 	adc.w	r3, r5, #0
   15214:	4634      	mov	r4, r6
   15216:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   15218:	4912      	ldr	r1, [pc, #72]	; (15264 <compare_set+0x134>)
	cc_data[chan].callback = handler;
   1521a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1521c:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   15220:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   15224:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   15226:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   15228:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1522a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1522c:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1522e:	4638      	mov	r0, r7
   15230:	9900      	ldr	r1, [sp, #0]
   15232:	f7ff fee5 	bl	15000 <compare_int_unlock>
}
   15236:	4620      	mov	r0, r4
   15238:	b003      	add	sp, #12
   1523a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1523e:	4630      	mov	r0, r6
   15240:	e7b0      	b.n	151a4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   15242:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15244:	4a09      	ldr	r2, [pc, #36]	; (1526c <compare_set+0x13c>)
   15246:	40bb      	lsls	r3, r7
   15248:	e8d2 0fef 	ldaex	r0, [r2]
   1524c:	4318      	orrs	r0, r3
   1524e:	e8c2 0fe1 	stlex	r1, r0, [r2]
   15252:	2900      	cmp	r1, #0
   15254:	d0e0      	beq.n	15218 <compare_set+0xe8>
   15256:	e7f7      	b.n	15248 <compare_set+0x118>
			return -EINVAL;
   15258:	f06f 0415 	mvn.w	r4, #21
   1525c:	e7e7      	b.n	1522e <compare_set+0xfe>
   1525e:	bf00      	nop
   15260:	01000001 	.word	0x01000001
   15264:	20009480 	.word	0x20009480
   15268:	40015000 	.word	0x40015000
   1526c:	20009a70 	.word	0x20009a70

00015270 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   15270:	2801      	cmp	r0, #1
{
   15272:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   15274:	d00b      	beq.n	1528e <z_nrf_rtc_timer_set+0x1e>
   15276:	4908      	ldr	r1, [pc, #32]	; (15298 <z_nrf_rtc_timer_set+0x28>)
   15278:	4808      	ldr	r0, [pc, #32]	; (1529c <z_nrf_rtc_timer_set+0x2c>)
   1527a:	f240 134d 	movw	r3, #333	; 0x14d
   1527e:	4a08      	ldr	r2, [pc, #32]	; (152a0 <z_nrf_rtc_timer_set+0x30>)
   15280:	f006 fd5a 	bl	1bd38 <assert_print>
   15284:	f240 114d 	movw	r1, #333	; 0x14d
   15288:	4805      	ldr	r0, [pc, #20]	; (152a0 <z_nrf_rtc_timer_set+0x30>)
   1528a:	f006 fd4e 	bl	1bd2a <assert_post_action>
}
   1528e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   15292:	f7ff bf4d 	b.w	15130 <compare_set>
   15296:	bf00      	nop
   15298:	00023279 	.word	0x00023279
   1529c:	000205a4 	.word	0x000205a4
   152a0:	0002322c 	.word	0x0002322c

000152a4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   152a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   152a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   152aa:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   152ac:	f04f 30ff 	mov.w	r0, #4294967295
   152b0:	f04f 31ff 	mov.w	r1, #4294967295
   152b4:	4c19      	ldr	r4, [pc, #100]	; (1531c <sys_clock_driver_init+0x78>)
   152b6:	4b1a      	ldr	r3, [pc, #104]	; (15320 <sys_clock_driver_init+0x7c>)
   152b8:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   152bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   152c0:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   152c4:	e9c3 0106 	strd	r0, r1, [r3, #24]
   152c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   152cc:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   152ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   152d2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   152d6:	4b13      	ldr	r3, [pc, #76]	; (15324 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   152d8:	2101      	movs	r1, #1
   152da:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   152de:	2015      	movs	r0, #21
   152e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   152e4:	462a      	mov	r2, r5
   152e6:	f7f7 fd0b 	bl	cd00 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   152ea:	2015      	movs	r0, #21
   152ec:	f7f7 fcd8 	bl	cca0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   152f0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   152f2:	2203      	movs	r2, #3
   152f4:	60a3      	str	r3, [r4, #8]
   152f6:	6023      	str	r3, [r4, #0]
   152f8:	4b0b      	ldr	r3, [pc, #44]	; (15328 <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   152fa:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   152fc:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   152fe:	4b0b      	ldr	r3, [pc, #44]	; (1532c <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15300:	4a0b      	ldr	r2, [pc, #44]	; (15330 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   15302:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15304:	4b0b      	ldr	r3, [pc, #44]	; (15334 <sys_clock_driver_init+0x90>)
   15306:	9501      	str	r5, [sp, #4]
   15308:	9300      	str	r3, [sp, #0]
   1530a:	2300      	movs	r3, #0
   1530c:	f7ff ff10 	bl	15130 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   15310:	4630      	mov	r0, r6
   15312:	f7fe fe5f 	bl	13fd4 <z_nrf_clock_control_lf_on>

	return 0;
}
   15316:	4628      	mov	r0, r5
   15318:	b002      	add	sp, #8
   1531a:	bd70      	pop	{r4, r5, r6, pc}
   1531c:	40015000 	.word	0x40015000
   15320:	20009480 	.word	0x20009480
   15324:	e000e100 	.word	0xe000e100
   15328:	20009a78 	.word	0x20009a78
   1532c:	20009a74 	.word	0x20009a74
   15330:	007fffff 	.word	0x007fffff
   15334:	00014f81 	.word	0x00014f81

00015338 <rtc_nrf_isr>:
{
   15338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1533c:	4b3f      	ldr	r3, [pc, #252]	; (1543c <rtc_nrf_isr+0x104>)
   1533e:	b085      	sub	sp, #20
   15340:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   15344:	0792      	lsls	r2, r2, #30
   15346:	d50b      	bpl.n	15360 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15348:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1534c:	b142      	cbz	r2, 15360 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1534e:	2200      	movs	r2, #0
   15350:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   15354:	4a3a      	ldr	r2, [pc, #232]	; (15440 <rtc_nrf_isr+0x108>)
   15356:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1535a:	6813      	ldr	r3, [r2, #0]
   1535c:	3301      	adds	r3, #1
   1535e:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15360:	4d38      	ldr	r5, [pc, #224]	; (15444 <rtc_nrf_isr+0x10c>)
   15362:	2400      	movs	r4, #0
   15364:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   15366:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1536a:	4e34      	ldr	r6, [pc, #208]	; (1543c <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1536c:	f04f 0320 	mov.w	r3, #32
   15370:	f3ef 8211 	mrs	r2, BASEPRI
   15374:	f383 8812 	msr	BASEPRI_MAX, r3
   15378:	f3bf 8f6f 	isb	sy
   1537c:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   15380:	fa0b f904 	lsl.w	r9, fp, r4
   15384:	ea19 0f03 	tst.w	r9, r3
   15388:	d10a      	bne.n	153a0 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1538a:	f382 8811 	msr	BASEPRI, r2
   1538e:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15392:	3510      	adds	r5, #16
   15394:	b114      	cbz	r4, 1539c <rtc_nrf_isr+0x64>
}
   15396:	b005      	add	sp, #20
   15398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1539c:	2401      	movs	r4, #1
   1539e:	e7e5      	b.n	1536c <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   153a0:	2301      	movs	r3, #1
   153a2:	40a3      	lsls	r3, r4
   153a4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   153a6:	4928      	ldr	r1, [pc, #160]	; (15448 <rtc_nrf_isr+0x110>)
   153a8:	e8d1 0fef 	ldaex	r0, [r1]
   153ac:	ea00 0c03 	and.w	ip, r0, r3
   153b0:	e8c1 cfee 	stlex	lr, ip, [r1]
   153b4:	f1be 0f00 	cmp.w	lr, #0
   153b8:	d1f6      	bne.n	153a8 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   153ba:	4b24      	ldr	r3, [pc, #144]	; (1544c <rtc_nrf_isr+0x114>)
   153bc:	00a1      	lsls	r1, r4, #2
   153be:	b918      	cbnz	r0, 153c8 <rtc_nrf_isr+0x90>
   153c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   153c4:	2800      	cmp	r0, #0
   153c6:	d0e0      	beq.n	1538a <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   153c8:	f04f 0a00 	mov.w	sl, #0
   153cc:	f841 a003 	str.w	sl, [r1, r3]
   153d0:	58cb      	ldr	r3, [r1, r3]
   153d2:	f382 8811 	msr	BASEPRI, r2
   153d6:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   153da:	f7ff fe87 	bl	150ec <z_nrf_rtc_timer_read>
	__asm__ volatile(
   153de:	f04f 0320 	mov.w	r3, #32
   153e2:	f3ef 8c11 	mrs	ip, BASEPRI
   153e6:	f383 8812 	msr	BASEPRI_MAX, r3
   153ea:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   153ee:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   153f2:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   153f6:	4290      	cmp	r0, r2
   153f8:	4199      	sbcs	r1, r3
   153fa:	d204      	bcs.n	15406 <rtc_nrf_isr+0xce>
	__asm__ volatile(
   153fc:	f38c 8811 	msr	BASEPRI, ip
   15400:	f3bf 8f6f 	isb	sy
		if (handler) {
   15404:	e7c5      	b.n	15392 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   15406:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1540a:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1540e:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15410:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   15414:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15418:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1541c:	4907      	ldr	r1, [pc, #28]	; (1543c <rtc_nrf_isr+0x104>)
   1541e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   15422:	f38c 8811 	msr	BASEPRI, ip
   15426:	f3bf 8f6f 	isb	sy
		if (handler) {
   1542a:	f1b8 0f00 	cmp.w	r8, #0
   1542e:	d0b0      	beq.n	15392 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   15430:	9903      	ldr	r1, [sp, #12]
   15432:	4620      	mov	r0, r4
   15434:	9100      	str	r1, [sp, #0]
   15436:	47c0      	blx	r8
   15438:	e7ab      	b.n	15392 <rtc_nrf_isr+0x5a>
   1543a:	bf00      	nop
   1543c:	40015000 	.word	0x40015000
   15440:	20009a7c 	.word	0x20009a7c
   15444:	20009480 	.word	0x20009480
   15448:	20009a70 	.word	0x20009a70
   1544c:	40015140 	.word	0x40015140

00015450 <z_nrf_rtc_timer_chan_alloc>:
{
   15450:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   15452:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   15454:	4b0c      	ldr	r3, [pc, #48]	; (15488 <z_nrf_rtc_timer_chan_alloc+0x38>)
   15456:	6818      	ldr	r0, [r3, #0]
   15458:	b190      	cbz	r0, 15480 <z_nrf_rtc_timer_chan_alloc+0x30>
   1545a:	fab0 f080 	clz	r0, r0
   1545e:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   15462:	fa04 f100 	lsl.w	r1, r4, r0
   15466:	43c9      	mvns	r1, r1
   15468:	e8d3 2fef 	ldaex	r2, [r3]
   1546c:	ea02 0501 	and.w	r5, r2, r1
   15470:	e8c3 5fe6 	stlex	r6, r5, [r3]
   15474:	2e00      	cmp	r6, #0
   15476:	d1f7      	bne.n	15468 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   15478:	40c2      	lsrs	r2, r0
   1547a:	07d2      	lsls	r2, r2, #31
   1547c:	d5eb      	bpl.n	15456 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1547e:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   15480:	f06f 000b 	mvn.w	r0, #11
   15484:	e7fb      	b.n	1547e <z_nrf_rtc_timer_chan_alloc+0x2e>
   15486:	bf00      	nop
   15488:	20009a74 	.word	0x20009a74

0001548c <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1548c:	2801      	cmp	r0, #1
{
   1548e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   15490:	d00b      	beq.n	154aa <z_nrf_rtc_timer_chan_free+0x1e>
   15492:	490b      	ldr	r1, [pc, #44]	; (154c0 <z_nrf_rtc_timer_chan_free+0x34>)
   15494:	480b      	ldr	r0, [pc, #44]	; (154c4 <z_nrf_rtc_timer_chan_free+0x38>)
   15496:	f240 231b 	movw	r3, #539	; 0x21b
   1549a:	4a0b      	ldr	r2, [pc, #44]	; (154c8 <z_nrf_rtc_timer_chan_free+0x3c>)
   1549c:	f006 fc4c 	bl	1bd38 <assert_print>
   154a0:	f240 211b 	movw	r1, #539	; 0x21b
   154a4:	4808      	ldr	r0, [pc, #32]	; (154c8 <z_nrf_rtc_timer_chan_free+0x3c>)
   154a6:	f006 fc40 	bl	1bd2a <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   154aa:	4b08      	ldr	r3, [pc, #32]	; (154cc <z_nrf_rtc_timer_chan_free+0x40>)
   154ac:	e8d3 1fef 	ldaex	r1, [r3]
   154b0:	f041 0102 	orr.w	r1, r1, #2
   154b4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   154b8:	2a00      	cmp	r2, #0
   154ba:	d1f7      	bne.n	154ac <z_nrf_rtc_timer_chan_free+0x20>
}
   154bc:	bd08      	pop	{r3, pc}
   154be:	bf00      	nop
   154c0:	00023279 	.word	0x00023279
   154c4:	000205a4 	.word	0x000205a4
   154c8:	0002322c 	.word	0x0002322c
   154cc:	20009a74 	.word	0x20009a74

000154d0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   154d0:	1c43      	adds	r3, r0, #1
{
   154d2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   154d4:	d020      	beq.n	15518 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   154d6:	2801      	cmp	r0, #1
   154d8:	dd20      	ble.n	1551c <sys_clock_set_timeout+0x4c>
   154da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   154de:	da1f      	bge.n	15520 <sys_clock_set_timeout+0x50>
   154e0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   154e2:	f7ff fe03 	bl	150ec <z_nrf_rtc_timer_read>
   154e6:	4b0f      	ldr	r3, [pc, #60]	; (15524 <sys_clock_set_timeout+0x54>)
   154e8:	e9d3 1300 	ldrd	r1, r3, [r3]
   154ec:	1a42      	subs	r2, r0, r1
		ticks = 0;
   154ee:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   154f2:	bf28      	it	cs
   154f4:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   154f6:	480c      	ldr	r0, [pc, #48]	; (15528 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   154f8:	3201      	adds	r2, #1
   154fa:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   154fc:	4282      	cmp	r2, r0
   154fe:	bf28      	it	cs
   15500:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   15502:	2000      	movs	r0, #0
   15504:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15506:	4909      	ldr	r1, [pc, #36]	; (1552c <sys_clock_set_timeout+0x5c>)
   15508:	9001      	str	r0, [sp, #4]
   1550a:	9100      	str	r1, [sp, #0]
   1550c:	f143 0300 	adc.w	r3, r3, #0
   15510:	f7ff fe0e 	bl	15130 <compare_set>
}
   15514:	b002      	add	sp, #8
   15516:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15518:	4803      	ldr	r0, [pc, #12]	; (15528 <sys_clock_set_timeout+0x58>)
   1551a:	e7e1      	b.n	154e0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1551c:	2400      	movs	r4, #0
   1551e:	e7e0      	b.n	154e2 <sys_clock_set_timeout+0x12>
   15520:	4c01      	ldr	r4, [pc, #4]	; (15528 <sys_clock_set_timeout+0x58>)
   15522:	e7de      	b.n	154e2 <sys_clock_set_timeout+0x12>
   15524:	200094a0 	.word	0x200094a0
   15528:	007fffff 	.word	0x007fffff
   1552c:	00014f81 	.word	0x00014f81

00015530 <sys_clock_elapsed>:
{
   15530:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   15532:	f7ff fddb 	bl	150ec <z_nrf_rtc_timer_read>
   15536:	4b02      	ldr	r3, [pc, #8]	; (15540 <sys_clock_elapsed+0x10>)
   15538:	681b      	ldr	r3, [r3, #0]
}
   1553a:	1ac0      	subs	r0, r0, r3
   1553c:	bd08      	pop	{r3, pc}
   1553e:	bf00      	nop
   15540:	200094a0 	.word	0x200094a0

00015544 <nrf_gpio_pin_port_decode>:
{
   15544:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15546:	6803      	ldr	r3, [r0, #0]
    switch (port)
   15548:	095a      	lsrs	r2, r3, #5
   1554a:	d00d      	beq.n	15568 <nrf_gpio_pin_port_decode+0x24>
   1554c:	2a01      	cmp	r2, #1
   1554e:	d013      	beq.n	15578 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15550:	490e      	ldr	r1, [pc, #56]	; (1558c <nrf_gpio_pin_port_decode+0x48>)
   15552:	480f      	ldr	r0, [pc, #60]	; (15590 <nrf_gpio_pin_port_decode+0x4c>)
   15554:	f240 2347 	movw	r3, #583	; 0x247
   15558:	4a0e      	ldr	r2, [pc, #56]	; (15594 <nrf_gpio_pin_port_decode+0x50>)
   1555a:	f006 fbed 	bl	1bd38 <assert_print>
   1555e:	f240 2147 	movw	r1, #583	; 0x247
   15562:	480c      	ldr	r0, [pc, #48]	; (15594 <nrf_gpio_pin_port_decode+0x50>)
   15564:	f006 fbe1 	bl	1bd2a <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   15568:	f04f 32ff 	mov.w	r2, #4294967295
   1556c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15570:	07d9      	lsls	r1, r3, #31
   15572:	d5ed      	bpl.n	15550 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   15574:	4808      	ldr	r0, [pc, #32]	; (15598 <nrf_gpio_pin_port_decode+0x54>)
   15576:	e008      	b.n	1558a <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   15578:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1557c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   15580:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15582:	07d2      	lsls	r2, r2, #31
   15584:	d5e4      	bpl.n	15550 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   15586:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   15588:	4804      	ldr	r0, [pc, #16]	; (1559c <nrf_gpio_pin_port_decode+0x58>)
}
   1558a:	bd08      	pop	{r3, pc}
   1558c:	00022e37 	.word	0x00022e37
   15590:	000205a4 	.word	0x000205a4
   15594:	00022e04 	.word	0x00022e04
   15598:	40842500 	.word	0x40842500
   1559c:	40842800 	.word	0x40842800

000155a0 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   155a0:	b510      	push	{r4, lr}
   155a2:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   155a4:	6902      	ldr	r2, [r0, #16]
{
   155a6:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   155a8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   155ac:	4925      	ldr	r1, [pc, #148]	; (15644 <mbox_nrf_init+0xa4>)
   155ae:	2000      	movs	r0, #0
   155b0:	f001 f974 	bl	1689c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   155b4:	2200      	movs	r2, #0
   155b6:	2101      	movs	r1, #1
   155b8:	202a      	movs	r0, #42	; 0x2a
   155ba:	f7f7 fba1 	bl	cd00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   155be:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   155c0:	2284      	movs	r2, #132	; 0x84
   155c2:	2100      	movs	r1, #0
   155c4:	a807      	add	r0, sp, #28
   155c6:	f007 fbd1 	bl	1cd6c <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   155ca:	6863      	ldr	r3, [r4, #4]
   155cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   155d0:	d30a      	bcc.n	155e8 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   155d2:	4b1d      	ldr	r3, [pc, #116]	; (15648 <mbox_nrf_init+0xa8>)
   155d4:	9305      	str	r3, [sp, #20]
   155d6:	2302      	movs	r3, #2
   155d8:	9304      	str	r3, [sp, #16]
   155da:	2300      	movs	r3, #0
   155dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   155e0:	481a      	ldr	r0, [pc, #104]	; (1564c <mbox_nrf_init+0xac>)
   155e2:	aa04      	add	r2, sp, #16
   155e4:	f7f6 f910 	bl	b808 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   155e8:	6823      	ldr	r3, [r4, #0]
   155ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   155ee:	d30a      	bcc.n	15606 <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   155f0:	4b17      	ldr	r3, [pc, #92]	; (15650 <mbox_nrf_init+0xb0>)
   155f2:	9305      	str	r3, [sp, #20]
   155f4:	2302      	movs	r3, #2
   155f6:	9304      	str	r3, [sp, #16]
   155f8:	2300      	movs	r3, #0
   155fa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   155fe:	4813      	ldr	r0, [pc, #76]	; (1564c <mbox_nrf_init+0xac>)
   15600:	aa04      	add	r2, sp, #16
   15602:	f7f6 f901 	bl	b808 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   15606:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   15608:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1560a:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1560c:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   1560e:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15610:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   15612:	40d9      	lsrs	r1, r3
   15614:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   15616:	bf44      	itt	mi
   15618:	fa00 f103 	lslmi.w	r1, r0, r3
   1561c:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   15620:	6821      	ldr	r1, [r4, #0]
   15622:	40d9      	lsrs	r1, r3
   15624:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   15626:	bf48      	it	mi
   15628:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1562c:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   15630:	bf48      	it	mi
   15632:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15634:	2b10      	cmp	r3, #16
   15636:	d1ea      	bne.n	1560e <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   15638:	a807      	add	r0, sp, #28
   1563a:	f001 f947 	bl	168cc <nrfx_ipc_config_load>

	return 0;
}
   1563e:	2000      	movs	r0, #0
   15640:	b028      	add	sp, #160	; 0xa0
   15642:	bd10      	pop	{r4, pc}
   15644:	00015749 	.word	0x00015749
   15648:	00023294 	.word	0x00023294
   1564c:	0001f940 	.word	0x0001f940
   15650:	000232c0 	.word	0x000232c0

00015654 <mbox_nrf_set_enabled>:
{
   15654:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15656:	290f      	cmp	r1, #15
{
   15658:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1565a:	6905      	ldr	r5, [r0, #16]
{
   1565c:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1565e:	d842      	bhi.n	156e6 <mbox_nrf_set_enabled+0x92>
   15660:	6843      	ldr	r3, [r0, #4]
   15662:	681b      	ldr	r3, [r3, #0]
   15664:	40cb      	lsrs	r3, r1
   15666:	07db      	lsls	r3, r3, #31
   15668:	d53d      	bpl.n	156e6 <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1566a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1566e:	40cb      	lsrs	r3, r1
   15670:	f003 0301 	and.w	r3, r3, #1
   15674:	b91a      	cbnz	r2, 1567e <mbox_nrf_set_enabled+0x2a>
   15676:	bb13      	cbnz	r3, 156be <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   15678:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1567c:	e031      	b.n	156e2 <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1567e:	2b00      	cmp	r3, #0
   15680:	d1fa      	bne.n	15678 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   15682:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   15686:	b94b      	cbnz	r3, 1569c <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   15688:	4a18      	ldr	r2, [pc, #96]	; (156ec <mbox_nrf_set_enabled+0x98>)
   1568a:	9205      	str	r2, [sp, #20]
   1568c:	2202      	movs	r2, #2
   1568e:	9204      	str	r2, [sp, #16]
   15690:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15694:	4816      	ldr	r0, [pc, #88]	; (156f0 <mbox_nrf_set_enabled+0x9c>)
   15696:	aa04      	add	r2, sp, #16
   15698:	f7f6 f8b6 	bl	b808 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   1569c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156a0:	b913      	cbnz	r3, 156a8 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   156a2:	202a      	movs	r0, #42	; 0x2a
   156a4:	f7f7 fafc 	bl	cca0 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   156a8:	2201      	movs	r2, #1
   156aa:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156ae:	40a2      	lsls	r2, r4
   156b0:	4313      	orrs	r3, r2
   156b2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   156b6:	b2e0      	uxtb	r0, r4
   156b8:	f001 f94a 	bl	16950 <nrfx_ipc_receive_event_enable>
   156bc:	e00a      	b.n	156d4 <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   156be:	b2c8      	uxtb	r0, r1
   156c0:	f001 f964 	bl	1698c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   156c4:	2201      	movs	r2, #1
   156c6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156ca:	40a2      	lsls	r2, r4
   156cc:	ea23 0302 	bic.w	r3, r3, r2
   156d0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   156d4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   156d8:	b913      	cbnz	r3, 156e0 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   156da:	202a      	movs	r0, #42	; 0x2a
   156dc:	f7f7 faee 	bl	ccbc <arch_irq_disable>
	return 0;
   156e0:	2000      	movs	r0, #0
}
   156e2:	b007      	add	sp, #28
   156e4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   156e6:	f06f 0015 	mvn.w	r0, #21
   156ea:	e7fa      	b.n	156e2 <mbox_nrf_set_enabled+0x8e>
   156ec:	000232ec 	.word	0x000232ec
   156f0:	0001f940 	.word	0x0001f940

000156f4 <mbox_nrf_send>:
{
   156f4:	b530      	push	{r4, r5, lr}
   156f6:	4605      	mov	r5, r0
   156f8:	460c      	mov	r4, r1
   156fa:	b087      	sub	sp, #28
	if (msg) {
   156fc:	b152      	cbz	r2, 15714 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   156fe:	4b10      	ldr	r3, [pc, #64]	; (15740 <mbox_nrf_send+0x4c>)
   15700:	9305      	str	r3, [sp, #20]
   15702:	2302      	movs	r3, #2
   15704:	9304      	str	r3, [sp, #16]
   15706:	2300      	movs	r3, #0
   15708:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1570c:	480d      	ldr	r0, [pc, #52]	; (15744 <mbox_nrf_send+0x50>)
   1570e:	aa04      	add	r2, sp, #16
   15710:	f7f6 f87a 	bl	b808 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   15714:	2c0f      	cmp	r4, #15
   15716:	d80f      	bhi.n	15738 <mbox_nrf_send+0x44>
   15718:	686b      	ldr	r3, [r5, #4]
   1571a:	685b      	ldr	r3, [r3, #4]
   1571c:	40e3      	lsrs	r3, r4
   1571e:	07db      	lsls	r3, r3, #31
   15720:	d50a      	bpl.n	15738 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15722:	2301      	movs	r3, #1
	return 0;
   15724:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   15726:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15728:	b2e4      	uxtb	r4, r4
   1572a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1572e:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   15732:	6023      	str	r3, [r4, #0]
}
   15734:	b007      	add	sp, #28
   15736:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   15738:	f06f 0015 	mvn.w	r0, #21
   1573c:	e7fa      	b.n	15734 <mbox_nrf_send+0x40>
   1573e:	bf00      	nop
   15740:	0002331c 	.word	0x0002331c
   15744:	0001f940 	.word	0x0001f940

00015748 <mbox_dispatcher>:
{
   15748:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1574a:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1574e:	280f      	cmp	r0, #15
{
   15750:	4604      	mov	r4, r0
   15752:	460d      	mov	r5, r1
   15754:	6873      	ldr	r3, [r6, #4]
   15756:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15758:	d803      	bhi.n	15762 <mbox_dispatcher+0x1a>
   1575a:	681b      	ldr	r3, [r3, #0]
   1575c:	40c3      	lsrs	r3, r0
   1575e:	07db      	lsls	r3, r3, #31
   15760:	d40a      	bmi.n	15778 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   15762:	4b15      	ldr	r3, [pc, #84]	; (157b8 <mbox_dispatcher+0x70>)
   15764:	9305      	str	r3, [sp, #20]
   15766:	2302      	movs	r3, #2
   15768:	9304      	str	r3, [sp, #16]
   1576a:	2300      	movs	r3, #0
   1576c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15770:	4812      	ldr	r0, [pc, #72]	; (157bc <mbox_dispatcher+0x74>)
   15772:	aa04      	add	r2, sp, #16
   15774:	f7f6 f848 	bl	b808 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   15778:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1577c:	40e3      	lsrs	r3, r4
   1577e:	f013 0301 	ands.w	r3, r3, #1
   15782:	d109      	bne.n	15798 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   15784:	4a0e      	ldr	r2, [pc, #56]	; (157c0 <mbox_dispatcher+0x78>)
   15786:	9205      	str	r2, [sp, #20]
   15788:	2202      	movs	r2, #2
   1578a:	9204      	str	r2, [sp, #16]
   1578c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15790:	480a      	ldr	r0, [pc, #40]	; (157bc <mbox_dispatcher+0x74>)
   15792:	aa04      	add	r2, sp, #16
   15794:	f7f6 f838 	bl	b808 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   15798:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1579c:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   157a0:	b145      	cbz	r5, 157b4 <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   157a2:	2300      	movs	r3, #0
   157a4:	4621      	mov	r1, r4
   157a6:	4630      	mov	r0, r6
   157a8:	46ac      	mov	ip, r5
   157aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   157ac:	b006      	add	sp, #24
   157ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   157b2:	4760      	bx	ip
}
   157b4:	b006      	add	sp, #24
   157b6:	bd70      	pop	{r4, r5, r6, pc}
   157b8:	00023337 	.word	0x00023337
   157bc:	0001f940 	.word	0x0001f940
   157c0:	00023353 	.word	0x00023353

000157c4 <z_impl_gpio_pin_configure>:
{
   157c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   157c8:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   157cc:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   157ce:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   157d2:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   157d4:	d00e      	beq.n	157f4 <z_impl_gpio_pin_configure+0x30>
   157d6:	4942      	ldr	r1, [pc, #264]	; (158e0 <z_impl_gpio_pin_configure+0x11c>)
   157d8:	f240 23be 	movw	r3, #702	; 0x2be
   157dc:	4a41      	ldr	r2, [pc, #260]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   157de:	4842      	ldr	r0, [pc, #264]	; (158e8 <z_impl_gpio_pin_configure+0x124>)
   157e0:	f006 faaa 	bl	1bd38 <assert_print>
   157e4:	4841      	ldr	r0, [pc, #260]	; (158ec <z_impl_gpio_pin_configure+0x128>)
   157e6:	f006 faa7 	bl	1bd38 <assert_print>
   157ea:	f240 21be 	movw	r1, #702	; 0x2be
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   157ee:	483d      	ldr	r0, [pc, #244]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   157f0:	f006 fa9b 	bl	1bd2a <assert_post_action>
   157f4:	f002 0230 	and.w	r2, r2, #48	; 0x30
   157f8:	2a30      	cmp	r2, #48	; 0x30
   157fa:	d10c      	bne.n	15816 <z_impl_gpio_pin_configure+0x52>
   157fc:	493c      	ldr	r1, [pc, #240]	; (158f0 <z_impl_gpio_pin_configure+0x12c>)
   157fe:	f240 23c1 	movw	r3, #705	; 0x2c1
   15802:	4a38      	ldr	r2, [pc, #224]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   15804:	4838      	ldr	r0, [pc, #224]	; (158e8 <z_impl_gpio_pin_configure+0x124>)
   15806:	f006 fa97 	bl	1bd38 <assert_print>
   1580a:	483a      	ldr	r0, [pc, #232]	; (158f4 <z_impl_gpio_pin_configure+0x130>)
   1580c:	f006 fa94 	bl	1bd38 <assert_print>
   15810:	f240 21c1 	movw	r1, #705	; 0x2c1
   15814:	e7eb      	b.n	157ee <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   15816:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   1581a:	2a02      	cmp	r2, #2
   1581c:	d10c      	bne.n	15838 <z_impl_gpio_pin_configure+0x74>
   1581e:	4936      	ldr	r1, [pc, #216]	; (158f8 <z_impl_gpio_pin_configure+0x134>)
   15820:	f240 23c5 	movw	r3, #709	; 0x2c5
   15824:	4a2f      	ldr	r2, [pc, #188]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   15826:	4830      	ldr	r0, [pc, #192]	; (158e8 <z_impl_gpio_pin_configure+0x124>)
   15828:	f006 fa86 	bl	1bd38 <assert_print>
   1582c:	4833      	ldr	r0, [pc, #204]	; (158fc <z_impl_gpio_pin_configure+0x138>)
   1582e:	f006 fa83 	bl	1bd38 <assert_print>
   15832:	f240 21c5 	movw	r1, #709	; 0x2c5
   15836:	e7da      	b.n	157ee <z_impl_gpio_pin_configure+0x2a>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   15838:	f003 0206 	and.w	r2, r3, #6
   1583c:	2a04      	cmp	r2, #4
   1583e:	d109      	bne.n	15854 <z_impl_gpio_pin_configure+0x90>
   15840:	492f      	ldr	r1, [pc, #188]	; (15900 <z_impl_gpio_pin_configure+0x13c>)
   15842:	f240 23c9 	movw	r3, #713	; 0x2c9
   15846:	4a27      	ldr	r2, [pc, #156]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   15848:	4827      	ldr	r0, [pc, #156]	; (158e8 <z_impl_gpio_pin_configure+0x124>)
   1584a:	f006 fa75 	bl	1bd38 <assert_print>
   1584e:	f240 21c9 	movw	r1, #713	; 0x2c9
   15852:	e7cc      	b.n	157ee <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   15854:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   15858:	d016      	beq.n	15888 <z_impl_gpio_pin_configure+0xc4>
   1585a:	039d      	lsls	r5, r3, #14
   1585c:	d40c      	bmi.n	15878 <z_impl_gpio_pin_configure+0xb4>
   1585e:	4929      	ldr	r1, [pc, #164]	; (15904 <z_impl_gpio_pin_configure+0x140>)
   15860:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   15864:	4a1f      	ldr	r2, [pc, #124]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   15866:	4820      	ldr	r0, [pc, #128]	; (158e8 <z_impl_gpio_pin_configure+0x124>)
   15868:	f006 fa66 	bl	1bd38 <assert_print>
   1586c:	4826      	ldr	r0, [pc, #152]	; (15908 <z_impl_gpio_pin_configure+0x144>)
   1586e:	f006 fa63 	bl	1bd38 <assert_print>
   15872:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   15876:	e7ba      	b.n	157ee <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   15878:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1587c:	d018      	beq.n	158b0 <z_impl_gpio_pin_configure+0xec>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1587e:	4a23      	ldr	r2, [pc, #140]	; (1590c <z_impl_gpio_pin_configure+0x148>)
   15880:	439a      	bics	r2, r3
   15882:	d101      	bne.n	15888 <z_impl_gpio_pin_configure+0xc4>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   15884:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15888:	2501      	movs	r5, #1
   1588a:	6824      	ldr	r4, [r4, #0]
   1588c:	408d      	lsls	r5, r1
   1588e:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   15890:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15894:	d119      	bne.n	158ca <z_impl_gpio_pin_configure+0x106>
   15896:	491e      	ldr	r1, [pc, #120]	; (15910 <z_impl_gpio_pin_configure+0x14c>)
   15898:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   1589c:	4a11      	ldr	r2, [pc, #68]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   1589e:	4812      	ldr	r0, [pc, #72]	; (158e8 <z_impl_gpio_pin_configure+0x124>)
   158a0:	f006 fa4a 	bl	1bd38 <assert_print>
   158a4:	481b      	ldr	r0, [pc, #108]	; (15914 <z_impl_gpio_pin_configure+0x150>)
   158a6:	f006 fa47 	bl	1bd38 <assert_print>
   158aa:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   158ae:	e79e      	b.n	157ee <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   158b0:	4919      	ldr	r1, [pc, #100]	; (15918 <z_impl_gpio_pin_configure+0x154>)
   158b2:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   158b6:	4a0b      	ldr	r2, [pc, #44]	; (158e4 <z_impl_gpio_pin_configure+0x120>)
   158b8:	480b      	ldr	r0, [pc, #44]	; (158e8 <z_impl_gpio_pin_configure+0x124>)
   158ba:	f006 fa3d 	bl	1bd38 <assert_print>
   158be:	4817      	ldr	r0, [pc, #92]	; (1591c <z_impl_gpio_pin_configure+0x158>)
   158c0:	f006 fa3a 	bl	1bd38 <assert_print>
   158c4:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   158c8:	e791      	b.n	157ee <z_impl_gpio_pin_configure+0x2a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   158ca:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   158cc:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   158ce:	bf4c      	ite	mi
   158d0:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   158d2:	43ac      	bicpl	r4, r5
   158d4:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   158d6:	683b      	ldr	r3, [r7, #0]
}
   158d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   158dc:	4718      	bx	r3
   158de:	bf00      	nop
   158e0:	00023389 	.word	0x00023389
   158e4:	00020535 	.word	0x00020535
   158e8:	000205a4 	.word	0x000205a4
   158ec:	000233e6 	.word	0x000233e6
   158f0:	0002340a 	.word	0x0002340a
   158f4:	00023443 	.word	0x00023443
   158f8:	00023480 	.word	0x00023480
   158fc:	000234b5 	.word	0x000234b5
   15900:	00023507 	.word	0x00023507
   15904:	0002353a 	.word	0x0002353a
   15908:	00023580 	.word	0x00023580
   1590c:	00100001 	.word	0x00100001
   15910:	00020566 	.word	0x00020566
   15914:	000205c1 	.word	0x000205c1
   15918:	000235bb 	.word	0x000235bb
   1591c:	000235fc 	.word	0x000235fc

00015920 <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15920:	2301      	movs	r3, #1
{
   15922:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15924:	fa03 f101 	lsl.w	r1, r3, r1
   15928:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1592a:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1592c:	681b      	ldr	r3, [r3, #0]
   1592e:	4219      	tst	r1, r3
   15930:	d10e      	bne.n	15950 <gpio_pin_set+0x30>
   15932:	490e      	ldr	r1, [pc, #56]	; (1596c <gpio_pin_set+0x4c>)
   15934:	f240 5327 	movw	r3, #1319	; 0x527
   15938:	4a0d      	ldr	r2, [pc, #52]	; (15970 <gpio_pin_set+0x50>)
   1593a:	480e      	ldr	r0, [pc, #56]	; (15974 <gpio_pin_set+0x54>)
   1593c:	f006 f9fc 	bl	1bd38 <assert_print>
   15940:	480d      	ldr	r0, [pc, #52]	; (15978 <gpio_pin_set+0x58>)
   15942:	f006 f9f9 	bl	1bd38 <assert_print>
   15946:	f240 5127 	movw	r1, #1319	; 0x527
   1594a:	4809      	ldr	r0, [pc, #36]	; (15970 <gpio_pin_set+0x50>)
   1594c:	f006 f9ed 	bl	1bd2a <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   15950:	6823      	ldr	r3, [r4, #0]
   15952:	4219      	tst	r1, r3
   15954:	d003      	beq.n	1595e <gpio_pin_set+0x3e>
	if (value != 0)	{
   15956:	b122      	cbz	r2, 15962 <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   15958:	6883      	ldr	r3, [r0, #8]
   1595a:	691b      	ldr	r3, [r3, #16]
   1595c:	e003      	b.n	15966 <gpio_pin_set+0x46>
	if (value != 0)	{
   1595e:	2a00      	cmp	r2, #0
   15960:	d0fa      	beq.n	15958 <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   15962:	6883      	ldr	r3, [r0, #8]
   15964:	68db      	ldr	r3, [r3, #12]
}
   15966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1596a:	4718      	bx	r3
   1596c:	00020566 	.word	0x00020566
   15970:	00020535 	.word	0x00020535
   15974:	000205a4 	.word	0x000205a4
   15978:	000205c1 	.word	0x000205c1

0001597c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1597c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15980:	4607      	mov	r7, r0
   15982:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   15984:	2500      	movs	r5, #0
   15986:	4e14      	ldr	r6, [pc, #80]	; (159d8 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   15988:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1598a:	fa27 f205 	lsr.w	r2, r7, r5
   1598e:	f012 0201 	ands.w	r2, r2, #1
   15992:	d117      	bne.n	159c4 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   15994:	fa28 f305 	lsr.w	r3, r8, r5
   15998:	07db      	lsls	r3, r3, #31
   1599a:	d515      	bpl.n	159c8 <dk_set_leds_state.part.0+0x4c>
	return gpio_pin_set(spec->port, spec->pin, value);
   1599c:	7931      	ldrb	r1, [r6, #4]
   1599e:	6830      	ldr	r0, [r6, #0]
   159a0:	f7ff ffbe 	bl	15920 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   159a4:	4604      	mov	r4, r0
   159a6:	b178      	cbz	r0, 159c8 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   159a8:	4b0c      	ldr	r3, [pc, #48]	; (159dc <dk_set_leds_state.part.0+0x60>)
   159aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   159ae:	9305      	str	r3, [sp, #20]
   159b0:	2302      	movs	r3, #2
   159b2:	480b      	ldr	r0, [pc, #44]	; (159e0 <dk_set_leds_state.part.0+0x64>)
   159b4:	aa04      	add	r2, sp, #16
   159b6:	9304      	str	r3, [sp, #16]
   159b8:	f008 fd95 	bl	1e4e6 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   159bc:	4620      	mov	r0, r4
   159be:	b006      	add	sp, #24
   159c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   159c4:	2201      	movs	r2, #1
   159c6:	e7e9      	b.n	1599c <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   159c8:	3501      	adds	r5, #1
   159ca:	2d04      	cmp	r5, #4
   159cc:	f106 0608 	add.w	r6, r6, #8
   159d0:	d1db      	bne.n	1598a <dk_set_leds_state.part.0+0xe>
	return 0;
   159d2:	2400      	movs	r4, #0
   159d4:	e7f2      	b.n	159bc <dk_set_leds_state.part.0+0x40>
   159d6:	bf00      	nop
   159d8:	00020150 	.word	0x00020150
   159dc:	00023628 	.word	0x00023628
   159e0:	0001f910 	.word	0x0001f910

000159e4 <dk_leds_init>:
{
   159e4:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   159e6:	2600      	movs	r6, #0
   159e8:	4c11      	ldr	r4, [pc, #68]	; (15a30 <dk_leds_init+0x4c>)
{
   159ea:	b086      	sub	sp, #24
				  spec->dt_flags | extra_flags);
   159ec:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   159ee:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   159f0:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   159f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   159f6:	f7ff fee5 	bl	157c4 <z_impl_gpio_pin_configure>
		if (err) {
   159fa:	4605      	mov	r5, r0
   159fc:	b950      	cbnz	r0, 15a14 <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   159fe:	3601      	adds	r6, #1
   15a00:	2e04      	cmp	r6, #4
   15a02:	f104 0408 	add.w	r4, r4, #8
   15a06:	d1f1      	bne.n	159ec <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   15a08:	210f      	movs	r1, #15
}
   15a0a:	b006      	add	sp, #24
   15a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15a10:	f7ff bfb4 	b.w	1597c <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   15a14:	4b07      	ldr	r3, [pc, #28]	; (15a34 <dk_leds_init+0x50>)
   15a16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a1a:	9305      	str	r3, [sp, #20]
   15a1c:	2302      	movs	r3, #2
   15a1e:	4806      	ldr	r0, [pc, #24]	; (15a38 <dk_leds_init+0x54>)
   15a20:	aa04      	add	r2, sp, #16
   15a22:	9304      	str	r3, [sp, #16]
   15a24:	f008 fd5f 	bl	1e4e6 <z_log_msg_static_create.constprop.0>
}
   15a28:	4628      	mov	r0, r5
   15a2a:	b006      	add	sp, #24
   15a2c:	bd70      	pop	{r4, r5, r6, pc}
   15a2e:	bf00      	nop
   15a30:	00020150 	.word	0x00020150
   15a34:	0002363e 	.word	0x0002363e
   15a38:	0001f910 	.word	0x0001f910

00015a3c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   15a3c:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   15a3e:	2803      	cmp	r0, #3
{
   15a40:	460a      	mov	r2, r1
   15a42:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   15a44:	d90e      	bls.n	15a64 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   15a46:	4b12      	ldr	r3, [pc, #72]	; (15a90 <dk_set_led+0x54>)
		return -EINVAL;
   15a48:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   15a4c:	9305      	str	r3, [sp, #20]
   15a4e:	2302      	movs	r3, #2
   15a50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a54:	480f      	ldr	r0, [pc, #60]	; (15a94 <dk_set_led+0x58>)
   15a56:	aa04      	add	r2, sp, #16
   15a58:	9304      	str	r3, [sp, #16]
   15a5a:	f008 fd44 	bl	1e4e6 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   15a5e:	4620      	mov	r0, r4
   15a60:	b006      	add	sp, #24
   15a62:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   15a64:	4b0c      	ldr	r3, [pc, #48]	; (15a98 <dk_set_led+0x5c>)
   15a66:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   15a6a:	7909      	ldrb	r1, [r1, #4]
   15a6c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   15a70:	f7ff ff56 	bl	15920 <gpio_pin_set>
	if (err) {
   15a74:	4604      	mov	r4, r0
   15a76:	2800      	cmp	r0, #0
   15a78:	d0f1      	beq.n	15a5e <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   15a7a:	4b08      	ldr	r3, [pc, #32]	; (15a9c <dk_set_led+0x60>)
   15a7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a80:	9305      	str	r3, [sp, #20]
   15a82:	2302      	movs	r3, #2
   15a84:	4803      	ldr	r0, [pc, #12]	; (15a94 <dk_set_led+0x58>)
   15a86:	aa04      	add	r2, sp, #16
   15a88:	9304      	str	r3, [sp, #16]
   15a8a:	f008 fd2c 	bl	1e4e6 <z_log_msg_static_create.constprop.0>
   15a8e:	e7e6      	b.n	15a5e <dk_set_led+0x22>
   15a90:	00023658 	.word	0x00023658
   15a94:	0001f910 	.word	0x0001f910
   15a98:	00020150 	.word	0x00020150
   15a9c:	00023628 	.word	0x00023628

00015aa0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   15aa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   15aa2:	f7f5 fd4b 	bl	b53c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   15aa6:	4b07      	ldr	r3, [pc, #28]	; (15ac4 <k_sys_fatal_error_handler+0x24>)
   15aa8:	9305      	str	r3, [sp, #20]
   15aaa:	2302      	movs	r3, #2
   15aac:	9304      	str	r3, [sp, #16]
   15aae:	4806      	ldr	r0, [pc, #24]	; (15ac8 <k_sys_fatal_error_handler+0x28>)
   15ab0:	2300      	movs	r3, #0
   15ab2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15ab6:	aa04      	add	r2, sp, #16
   15ab8:	f7f5 fea6 	bl	b808 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   15abc:	2000      	movs	r0, #0
   15abe:	f7f7 fda7 	bl	d610 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   15ac2:	bf00      	nop
   15ac4:	00023687 	.word	0x00023687
   15ac8:	0001f918 	.word	0x0001f918

00015acc <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   15acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ad0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   15ad2:	4b15      	ldr	r3, [pc, #84]	; (15b28 <tfm_ns_interface_dispatch+0x5c>)
   15ad4:	4604      	mov	r4, r0
   15ad6:	f893 8000 	ldrb.w	r8, [r3]
   15ada:	460d      	mov	r5, r1
   15adc:	4616      	mov	r6, r2
   15ade:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   15ae0:	f1b8 0f00 	cmp.w	r8, #0
   15ae4:	d115      	bne.n	15b12 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   15ae6:	4668      	mov	r0, sp
   15ae8:	f007 f8ad 	bl	1cc46 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   15aec:	463a      	mov	r2, r7
   15aee:	4631      	mov	r1, r6
   15af0:	4628      	mov	r0, r5
   15af2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   15af4:	47a0      	blx	r4
   15af6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   15af8:	4668      	mov	r0, sp
   15afa:	f007 f8a5 	bl	1cc48 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   15afe:	f1b8 0f00 	cmp.w	r8, #0
   15b02:	d002      	beq.n	15b0a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   15b04:	4809      	ldr	r0, [pc, #36]	; (15b2c <tfm_ns_interface_dispatch+0x60>)
   15b06:	f002 fc7b 	bl	18400 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   15b0a:	4620      	mov	r0, r4
   15b0c:	b022      	add	sp, #136	; 0x88
   15b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   15b12:	f04f 32ff 	mov.w	r2, #4294967295
   15b16:	f04f 33ff 	mov.w	r3, #4294967295
   15b1a:	4804      	ldr	r0, [pc, #16]	; (15b2c <tfm_ns_interface_dispatch+0x60>)
   15b1c:	f002 fba0 	bl	18260 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   15b20:	2800      	cmp	r0, #0
   15b22:	d0e0      	beq.n	15ae6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   15b24:	241f      	movs	r4, #31
   15b26:	e7f0      	b.n	15b0a <tfm_ns_interface_dispatch+0x3e>
   15b28:	20009c5d 	.word	0x20009c5d
   15b2c:	20008538 	.word	0x20008538

00015b30 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   15b30:	b530      	push	{r4, r5, lr}
   15b32:	b095      	sub	sp, #84	; 0x54
   15b34:	4605      	mov	r5, r0
   15b36:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   15b38:	2230      	movs	r2, #48	; 0x30
   15b3a:	2100      	movs	r1, #0
   15b3c:	a808      	add	r0, sp, #32
   15b3e:	f007 f915 	bl	1cd6c <memset>
   15b42:	233f      	movs	r3, #63	; 0x3f
   15b44:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   15b46:	ab07      	add	r3, sp, #28
   15b48:	9303      	str	r3, [sp, #12]
   15b4a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   15b4c:	9406      	str	r4, [sp, #24]
   15b4e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   15b52:	b154      	cbz	r4, 15b6a <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   15b54:	2301      	movs	r3, #1
   15b56:	aa05      	add	r2, sp, #20
   15b58:	9200      	str	r2, [sp, #0]
   15b5a:	2100      	movs	r1, #0
   15b5c:	4804      	ldr	r0, [pc, #16]	; (15b70 <psa_generate_random+0x40>)
   15b5e:	9301      	str	r3, [sp, #4]
   15b60:	aa03      	add	r2, sp, #12
   15b62:	f000 f807 	bl	15b74 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   15b66:	b015      	add	sp, #84	; 0x54
   15b68:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   15b6a:	4620      	mov	r0, r4
   15b6c:	e7fb      	b.n	15b66 <psa_generate_random+0x36>
   15b6e:	bf00      	nop
   15b70:	40000100 	.word	0x40000100

00015b74 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   15b74:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   15b76:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   15b7a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   15b7e:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   15b80:	d20d      	bcs.n	15b9e <psa_call+0x2a>
        (type < INT16_MIN) ||
   15b82:	ea43 0504 	orr.w	r5, r3, r4
   15b86:	2dff      	cmp	r5, #255	; 0xff
   15b88:	d809      	bhi.n	15b9e <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   15b8a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   15b8e:	4613      	mov	r3, r2
   15b90:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   15b94:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   15b96:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   15b98:	4803      	ldr	r0, [pc, #12]	; (15ba8 <psa_call+0x34>)
   15b9a:	f7ff bf97 	b.w	15acc <tfm_ns_interface_dispatch>
}
   15b9e:	f06f 0080 	mvn.w	r0, #128	; 0x80
   15ba2:	bc30      	pop	{r4, r5}
   15ba4:	4770      	bx	lr
   15ba6:	bf00      	nop
   15ba8:	00007c21 	.word	0x00007c21

00015bac <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   15bac:	2300      	movs	r3, #0
{
   15bae:	b507      	push	{r0, r1, r2, lr}
   15bb0:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   15bb2:	9300      	str	r3, [sp, #0]
   15bb4:	4601      	mov	r1, r0
   15bb6:	4803      	ldr	r0, [pc, #12]	; (15bc4 <psa_connect+0x18>)
   15bb8:	f7ff ff88 	bl	15acc <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   15bbc:	b003      	add	sp, #12
   15bbe:	f85d fb04 	ldr.w	pc, [sp], #4
   15bc2:	bf00      	nop
   15bc4:	00007c19 	.word	0x00007c19

00015bc8 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   15bc8:	2300      	movs	r3, #0
{
   15bca:	b507      	push	{r0, r1, r2, lr}
   15bcc:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   15bce:	461a      	mov	r2, r3
   15bd0:	9300      	str	r3, [sp, #0]
   15bd2:	4803      	ldr	r0, [pc, #12]	; (15be0 <psa_close+0x18>)
   15bd4:	f7ff ff7a 	bl	15acc <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   15bd8:	b003      	add	sp, #12
   15bda:	f85d fb04 	ldr.w	pc, [sp], #4
   15bde:	bf00      	nop
   15be0:	00007c11 	.word	0x00007c11

00015be4 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   15be4:	4b04      	ldr	r3, [pc, #16]	; (15bf8 <SystemCoreClockUpdate+0x14>)
   15be6:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   15bea:	4b04      	ldr	r3, [pc, #16]	; (15bfc <SystemCoreClockUpdate+0x18>)
   15bec:	f002 0203 	and.w	r2, r2, #3
   15bf0:	40d3      	lsrs	r3, r2
   15bf2:	4a03      	ldr	r2, [pc, #12]	; (15c00 <SystemCoreClockUpdate+0x1c>)
   15bf4:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   15bf6:	4770      	bx	lr
   15bf8:	40005000 	.word	0x40005000
   15bfc:	07a12000 	.word	0x07a12000
   15c00:	200082c4 	.word	0x200082c4

00015c04 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   15c04:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   15c06:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   15c08:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   15c0a:	fab2 f382 	clz	r3, r2
   15c0e:	f1c3 031f 	rsb	r3, r3, #31
   15c12:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   15c14:	fa05 f403 	lsl.w	r4, r5, r3
   15c18:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15c1c:	e8d0 6fef 	ldaex	r6, [r0]
   15c20:	4296      	cmp	r6, r2
   15c22:	d104      	bne.n	15c2e <nrfx_flag32_alloc+0x2a>
   15c24:	e8c0 4fec 	stlex	ip, r4, [r0]
   15c28:	f1bc 0f00 	cmp.w	ip, #0
   15c2c:	d1f6      	bne.n	15c1c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15c2e:	d1eb      	bne.n	15c08 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   15c30:	4801      	ldr	r0, [pc, #4]	; (15c38 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   15c32:	700b      	strb	r3, [r1, #0]
}
   15c34:	bd70      	pop	{r4, r5, r6, pc}
   15c36:	bf00      	nop
   15c38:	0bad0000 	.word	0x0bad0000

00015c3c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   15c3c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   15c3e:	6803      	ldr	r3, [r0, #0]
   15c40:	40cb      	lsrs	r3, r1
   15c42:	07db      	lsls	r3, r3, #31
   15c44:	d410      	bmi.n	15c68 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   15c46:	2301      	movs	r3, #1
   15c48:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   15c4a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   15c4c:	ea43 0102 	orr.w	r1, r3, r2
   15c50:	e8d0 4fef 	ldaex	r4, [r0]
   15c54:	4294      	cmp	r4, r2
   15c56:	d104      	bne.n	15c62 <nrfx_flag32_free+0x26>
   15c58:	e8c0 1fec 	stlex	ip, r1, [r0]
   15c5c:	f1bc 0f00 	cmp.w	ip, #0
   15c60:	d1f6      	bne.n	15c50 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15c62:	d1f2      	bne.n	15c4a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   15c64:	4801      	ldr	r0, [pc, #4]	; (15c6c <nrfx_flag32_free+0x30>)
}
   15c66:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15c68:	4801      	ldr	r0, [pc, #4]	; (15c70 <nrfx_flag32_free+0x34>)
   15c6a:	e7fc      	b.n	15c66 <nrfx_flag32_free+0x2a>
   15c6c:	0bad0000 	.word	0x0bad0000
   15c70:	0bad0004 	.word	0x0bad0004

00015c74 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   15c74:	2200      	movs	r2, #0
{
   15c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15c78:	4b62      	ldr	r3, [pc, #392]	; (15e04 <clock_stop+0x190>)
    switch (domain)
   15c7a:	2803      	cmp	r0, #3
   15c7c:	d838      	bhi.n	15cf0 <clock_stop+0x7c>
   15c7e:	e8df f000 	tbb	[pc, r0]
   15c82:	0d02      	.short	0x0d02
   15c84:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   15c86:	2102      	movs	r1, #2
   15c88:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15c90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c94:	2201      	movs	r2, #1
   15c96:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15c98:	2400      	movs	r4, #0
   15c9a:	e009      	b.n	15cb0 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   15c9c:	2101      	movs	r1, #1
   15c9e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ca2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15ca6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   15caa:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15cae:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   15cb0:	2301      	movs	r3, #1
   15cb2:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   15cb6:	2803      	cmp	r0, #3
   15cb8:	f200 8093 	bhi.w	15de2 <clock_stop+0x16e>
   15cbc:	e8df f000 	tbb	[pc, r0]
   15cc0:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   15cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
   15cc8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ccc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15cd0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15cd4:	2201      	movs	r2, #1
   15cd6:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   15cd8:	e7de      	b.n	15c98 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   15cda:	f44f 7180 	mov.w	r1, #256	; 0x100
   15cde:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ce2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15ce6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15cea:	2201      	movs	r2, #1
   15cec:	61da      	str	r2, [r3, #28]
   15cee:	e7d3      	b.n	15c98 <clock_stop+0x24>
            NRFX_ASSERT(0);
   15cf0:	4945      	ldr	r1, [pc, #276]	; (15e08 <clock_stop+0x194>)
   15cf2:	4846      	ldr	r0, [pc, #280]	; (15e0c <clock_stop+0x198>)
   15cf4:	23d8      	movs	r3, #216	; 0xd8
   15cf6:	4a46      	ldr	r2, [pc, #280]	; (15e10 <clock_stop+0x19c>)
   15cf8:	f006 f81e 	bl	1bd38 <assert_print>
   15cfc:	21d8      	movs	r1, #216	; 0xd8
   15cfe:	4844      	ldr	r0, [pc, #272]	; (15e10 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   15d00:	f006 f813 	bl	1bd2a <assert_post_action>
    switch (domain)
   15d04:	f242 7510 	movw	r5, #10000	; 0x2710
   15d08:	4e3e      	ldr	r6, [pc, #248]	; (15e04 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   15d0a:	b194      	cbz	r4, 15d32 <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15d0c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   15d10:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   15d14:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15d16:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   15d1a:	03d9      	lsls	r1, r3, #15
   15d1c:	d507      	bpl.n	15d2e <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   15d1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15d22:	2801      	cmp	r0, #1
   15d24:	d103      	bne.n	15d2e <clock_stop+0xba>
   15d26:	f008 fc35 	bl	1e594 <nrfx_busy_wait>
   15d2a:	3d01      	subs	r5, #1
   15d2c:	d1ed      	bne.n	15d0a <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15d2e:	b002      	add	sp, #8
   15d30:	bd70      	pop	{r4, r5, r6, pc}
   15d32:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   15d36:	03da      	lsls	r2, r3, #15
   15d38:	d5f9      	bpl.n	15d2e <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   15d3a:	2001      	movs	r0, #1
   15d3c:	f008 fc2a 	bl	1e594 <nrfx_busy_wait>
   15d40:	3d01      	subs	r5, #1
   15d42:	d1f6      	bne.n	15d32 <clock_stop+0xbe>
   15d44:	e7f3      	b.n	15d2e <clock_stop+0xba>
    switch (domain)
   15d46:	f242 7510 	movw	r5, #10000	; 0x2710
   15d4a:	4e2e      	ldr	r6, [pc, #184]	; (15e04 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   15d4c:	b18c      	cbz	r4, 15d72 <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15d4e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15d52:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   15d56:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15d58:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15d5c:	03db      	lsls	r3, r3, #15
   15d5e:	d5e6      	bpl.n	15d2e <clock_stop+0xba>
   15d60:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15d64:	2801      	cmp	r0, #1
   15d66:	d1e2      	bne.n	15d2e <clock_stop+0xba>
   15d68:	f008 fc14 	bl	1e594 <nrfx_busy_wait>
   15d6c:	3d01      	subs	r5, #1
   15d6e:	d1ed      	bne.n	15d4c <clock_stop+0xd8>
   15d70:	e7dd      	b.n	15d2e <clock_stop+0xba>
   15d72:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   15d76:	03d8      	lsls	r0, r3, #15
   15d78:	d5d9      	bpl.n	15d2e <clock_stop+0xba>
   15d7a:	2001      	movs	r0, #1
   15d7c:	f008 fc0a 	bl	1e594 <nrfx_busy_wait>
   15d80:	3d01      	subs	r5, #1
   15d82:	d1f6      	bne.n	15d72 <clock_stop+0xfe>
   15d84:	e7d3      	b.n	15d2e <clock_stop+0xba>
    switch (domain)
   15d86:	f242 7510 	movw	r5, #10000	; 0x2710
   15d8a:	4e1e      	ldr	r6, [pc, #120]	; (15e04 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   15d8c:	b18c      	cbz	r4, 15db2 <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   15d8e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15d92:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   15d96:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15d98:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15d9c:	03d9      	lsls	r1, r3, #15
   15d9e:	d5c6      	bpl.n	15d2e <clock_stop+0xba>
   15da0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15da4:	2801      	cmp	r0, #1
   15da6:	d1c2      	bne.n	15d2e <clock_stop+0xba>
   15da8:	f008 fbf4 	bl	1e594 <nrfx_busy_wait>
   15dac:	3d01      	subs	r5, #1
   15dae:	d1ed      	bne.n	15d8c <clock_stop+0x118>
   15db0:	e7bd      	b.n	15d2e <clock_stop+0xba>
   15db2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15db6:	03da      	lsls	r2, r3, #15
   15db8:	d5b9      	bpl.n	15d2e <clock_stop+0xba>
   15dba:	2001      	movs	r0, #1
   15dbc:	f008 fbea 	bl	1e594 <nrfx_busy_wait>
   15dc0:	3d01      	subs	r5, #1
   15dc2:	d1f6      	bne.n	15db2 <clock_stop+0x13e>
   15dc4:	e7b3      	b.n	15d2e <clock_stop+0xba>
    switch (domain)
   15dc6:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   15dca:	4e0e      	ldr	r6, [pc, #56]	; (15e04 <clock_stop+0x190>)
   15dcc:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   15dd0:	03db      	lsls	r3, r3, #15
   15dd2:	d5ac      	bpl.n	15d2e <clock_stop+0xba>
   15dd4:	b984      	cbnz	r4, 15df8 <clock_stop+0x184>
   15dd6:	2001      	movs	r0, #1
   15dd8:	f008 fbdc 	bl	1e594 <nrfx_busy_wait>
   15ddc:	3d01      	subs	r5, #1
   15dde:	d1f5      	bne.n	15dcc <clock_stop+0x158>
   15de0:	e7a5      	b.n	15d2e <clock_stop+0xba>
            NRFX_ASSERT(0);
   15de2:	4909      	ldr	r1, [pc, #36]	; (15e08 <clock_stop+0x194>)
   15de4:	4809      	ldr	r0, [pc, #36]	; (15e0c <clock_stop+0x198>)
   15de6:	f240 3347 	movw	r3, #839	; 0x347
   15dea:	4a0a      	ldr	r2, [pc, #40]	; (15e14 <clock_stop+0x1a0>)
   15dec:	f005 ffa4 	bl	1bd38 <assert_print>
   15df0:	f240 3147 	movw	r1, #839	; 0x347
   15df4:	4807      	ldr	r0, [pc, #28]	; (15e14 <clock_stop+0x1a0>)
   15df6:	e783      	b.n	15d00 <clock_stop+0x8c>
   15df8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15dfc:	2801      	cmp	r0, #1
   15dfe:	d0eb      	beq.n	15dd8 <clock_stop+0x164>
   15e00:	e795      	b.n	15d2e <clock_stop+0xba>
   15e02:	bf00      	nop
   15e04:	40005000 	.word	0x40005000
   15e08:	0002357e 	.word	0x0002357e
   15e0c:	000205a4 	.word	0x000205a4
   15e10:	000236a4 	.word	0x000236a4
   15e14:	000236e1 	.word	0x000236e1

00015e18 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   15e18:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   15e1a:	b958      	cbnz	r0, 15e34 <nrfx_clock_init+0x1c>
   15e1c:	490a      	ldr	r1, [pc, #40]	; (15e48 <nrfx_clock_init+0x30>)
   15e1e:	480b      	ldr	r0, [pc, #44]	; (15e4c <nrfx_clock_init+0x34>)
   15e20:	f240 1315 	movw	r3, #277	; 0x115
   15e24:	4a0a      	ldr	r2, [pc, #40]	; (15e50 <nrfx_clock_init+0x38>)
   15e26:	f005 ff87 	bl	1bd38 <assert_print>
   15e2a:	f240 1115 	movw	r1, #277	; 0x115
   15e2e:	4808      	ldr	r0, [pc, #32]	; (15e50 <nrfx_clock_init+0x38>)
   15e30:	f005 ff7b 	bl	1bd2a <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15e34:	4b07      	ldr	r3, [pc, #28]	; (15e54 <nrfx_clock_init+0x3c>)
   15e36:	791a      	ldrb	r2, [r3, #4]
   15e38:	b922      	cbnz	r2, 15e44 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15e3a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   15e3c:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   15e3e:	4806      	ldr	r0, [pc, #24]	; (15e58 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   15e40:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15e42:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15e44:	4805      	ldr	r0, [pc, #20]	; (15e5c <nrfx_clock_init+0x44>)
    return err_code;
   15e46:	e7fc      	b.n	15e42 <nrfx_clock_init+0x2a>
   15e48:	00023715 	.word	0x00023715
   15e4c:	000205a4 	.word	0x000205a4
   15e50:	000236a4 	.word	0x000236a4
   15e54:	20009b08 	.word	0x20009b08
   15e58:	0bad0000 	.word	0x0bad0000
   15e5c:	0bad000c 	.word	0x0bad000c

00015e60 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15e60:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e62:	4b0f      	ldr	r3, [pc, #60]	; (15ea0 <nrfx_clock_enable+0x40>)
   15e64:	791b      	ldrb	r3, [r3, #4]
   15e66:	b95b      	cbnz	r3, 15e80 <nrfx_clock_enable+0x20>
   15e68:	490e      	ldr	r1, [pc, #56]	; (15ea4 <nrfx_clock_enable+0x44>)
   15e6a:	480f      	ldr	r0, [pc, #60]	; (15ea8 <nrfx_clock_enable+0x48>)
   15e6c:	f44f 7397 	mov.w	r3, #302	; 0x12e
   15e70:	4a0e      	ldr	r2, [pc, #56]	; (15eac <nrfx_clock_enable+0x4c>)
   15e72:	f005 ff61 	bl	1bd38 <assert_print>
   15e76:	f44f 7197 	mov.w	r1, #302	; 0x12e
   15e7a:	480c      	ldr	r0, [pc, #48]	; (15eac <nrfx_clock_enable+0x4c>)
   15e7c:	f005 ff55 	bl	1bd2a <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15e80:	2005      	movs	r0, #5
   15e82:	f7f6 ff2f 	bl	cce4 <arch_irq_is_enabled>
   15e86:	b910      	cbnz	r0, 15e8e <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15e88:	2005      	movs	r0, #5
   15e8a:	f7f6 ff09 	bl	cca0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15e8e:	2201      	movs	r2, #1
   15e90:	4b07      	ldr	r3, [pc, #28]	; (15eb0 <nrfx_clock_enable+0x50>)
   15e92:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   15e96:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15e9a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15e9e:	bd08      	pop	{r3, pc}
   15ea0:	20009b08 	.word	0x20009b08
   15ea4:	00023723 	.word	0x00023723
   15ea8:	000205a4 	.word	0x000205a4
   15eac:	000236a4 	.word	0x000236a4
   15eb0:	40005000 	.word	0x40005000

00015eb4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   15eb4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15eb6:	4b38      	ldr	r3, [pc, #224]	; (15f98 <nrfx_clock_start+0xe4>)
   15eb8:	791b      	ldrb	r3, [r3, #4]
   15eba:	b95b      	cbnz	r3, 15ed4 <nrfx_clock_start+0x20>
   15ebc:	4937      	ldr	r1, [pc, #220]	; (15f9c <nrfx_clock_start+0xe8>)
   15ebe:	f44f 73b4 	mov.w	r3, #360	; 0x168
   15ec2:	4a37      	ldr	r2, [pc, #220]	; (15fa0 <nrfx_clock_start+0xec>)
   15ec4:	4837      	ldr	r0, [pc, #220]	; (15fa4 <nrfx_clock_start+0xf0>)
   15ec6:	f005 ff37 	bl	1bd38 <assert_print>
   15eca:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   15ece:	4834      	ldr	r0, [pc, #208]	; (15fa0 <nrfx_clock_start+0xec>)
   15ed0:	f005 ff2b 	bl	1bd2a <assert_post_action>
    switch (domain)
   15ed4:	4b34      	ldr	r3, [pc, #208]	; (15fa8 <nrfx_clock_start+0xf4>)
   15ed6:	2803      	cmp	r0, #3
   15ed8:	d853      	bhi.n	15f82 <nrfx_clock_start+0xce>
   15eda:	e8df f000 	tbb	[pc, r0]
   15ede:	3002      	.short	0x3002
   15ee0:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15ee2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15ee6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   15eea:	03c9      	lsls	r1, r1, #15
   15eec:	d511      	bpl.n	15f12 <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15eee:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   15ef2:	2b02      	cmp	r3, #2
   15ef4:	d11c      	bne.n	15f30 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15ef6:	4a2c      	ldr	r2, [pc, #176]	; (15fa8 <nrfx_clock_start+0xf4>)
   15ef8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15efc:	2300      	movs	r3, #0
   15efe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   15f02:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   15f06:	2302      	movs	r3, #2
   15f08:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f0c:	2301      	movs	r3, #1
   15f0e:	6093      	str	r3, [r2, #8]
}
   15f10:	e00d      	b.n	15f2e <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   15f12:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   15f16:	07d2      	lsls	r2, r2, #31
   15f18:	d50f      	bpl.n	15f3a <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15f1a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   15f1e:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   15f22:	3a01      	subs	r2, #1
   15f24:	2a01      	cmp	r2, #1
   15f26:	d805      	bhi.n	15f34 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   15f28:	2202      	movs	r2, #2
   15f2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   15f2e:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   15f30:	2b01      	cmp	r3, #1
   15f32:	d002      	beq.n	15f3a <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   15f34:	2000      	movs	r0, #0
   15f36:	f7ff fe9d 	bl	15c74 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   15f3a:	2301      	movs	r3, #1
   15f3c:	e7db      	b.n	15ef6 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f3e:	2200      	movs	r2, #0
   15f40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15f44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15f48:	2201      	movs	r2, #1
   15f4a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f4e:	601a      	str	r2, [r3, #0]
}
   15f50:	e7ed      	b.n	15f2e <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f52:	2200      	movs	r2, #0
   15f54:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15f58:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   15f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15f60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f64:	2201      	movs	r2, #1
   15f66:	621a      	str	r2, [r3, #32]
}
   15f68:	e7e1      	b.n	15f2e <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f6a:	2200      	movs	r2, #0
   15f6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15f70:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15f74:	f44f 7280 	mov.w	r2, #256	; 0x100
   15f78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f7c:	2201      	movs	r2, #1
   15f7e:	619a      	str	r2, [r3, #24]
}
   15f80:	e7d5      	b.n	15f2e <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   15f82:	490a      	ldr	r1, [pc, #40]	; (15fac <nrfx_clock_start+0xf8>)
   15f84:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   15f88:	4a05      	ldr	r2, [pc, #20]	; (15fa0 <nrfx_clock_start+0xec>)
   15f8a:	4806      	ldr	r0, [pc, #24]	; (15fa4 <nrfx_clock_start+0xf0>)
   15f8c:	f005 fed4 	bl	1bd38 <assert_print>
   15f90:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   15f94:	e79b      	b.n	15ece <nrfx_clock_start+0x1a>
   15f96:	bf00      	nop
   15f98:	20009b08 	.word	0x20009b08
   15f9c:	00023723 	.word	0x00023723
   15fa0:	000236a4 	.word	0x000236a4
   15fa4:	000205a4 	.word	0x000205a4
   15fa8:	40005000 	.word	0x40005000
   15fac:	0002357e 	.word	0x0002357e

00015fb0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   15fb0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15fb2:	4b09      	ldr	r3, [pc, #36]	; (15fd8 <nrfx_clock_stop+0x28>)
   15fb4:	791b      	ldrb	r3, [r3, #4]
   15fb6:	b95b      	cbnz	r3, 15fd0 <nrfx_clock_stop+0x20>
   15fb8:	4908      	ldr	r1, [pc, #32]	; (15fdc <nrfx_clock_stop+0x2c>)
   15fba:	4809      	ldr	r0, [pc, #36]	; (15fe0 <nrfx_clock_stop+0x30>)
   15fbc:	f240 13ad 	movw	r3, #429	; 0x1ad
   15fc0:	4a08      	ldr	r2, [pc, #32]	; (15fe4 <nrfx_clock_stop+0x34>)
   15fc2:	f005 feb9 	bl	1bd38 <assert_print>
   15fc6:	f240 11ad 	movw	r1, #429	; 0x1ad
   15fca:	4806      	ldr	r0, [pc, #24]	; (15fe4 <nrfx_clock_stop+0x34>)
   15fcc:	f005 fead 	bl	1bd2a <assert_post_action>
    clock_stop(domain);
}
   15fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   15fd4:	f7ff be4e 	b.w	15c74 <clock_stop>
   15fd8:	20009b08 	.word	0x20009b08
   15fdc:	00023723 	.word	0x00023723
   15fe0:	000205a4 	.word	0x000205a4
   15fe4:	000236a4 	.word	0x000236a4

00015fe8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   15fe8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15fea:	4b28      	ldr	r3, [pc, #160]	; (1608c <nrfx_power_clock_irq_handler+0xa4>)
   15fec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   15ff0:	b152      	cbz	r2, 16008 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ff2:	2000      	movs	r0, #0
   15ff4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15ff8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   15ffc:	2201      	movs	r2, #1
   15ffe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16002:	4b23      	ldr	r3, [pc, #140]	; (16090 <nrfx_power_clock_irq_handler+0xa8>)
   16004:	681b      	ldr	r3, [r3, #0]
   16006:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16008:	4b20      	ldr	r3, [pc, #128]	; (1608c <nrfx_power_clock_irq_handler+0xa4>)
   1600a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1600e:	b18a      	cbz	r2, 16034 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16010:	2200      	movs	r2, #0
   16012:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16016:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1601a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1601e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16022:	f002 0203 	and.w	r2, r2, #3
   16026:	2a01      	cmp	r2, #1
   16028:	f04f 0102 	mov.w	r1, #2
   1602c:	d126      	bne.n	1607c <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1602e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16032:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16034:	4b15      	ldr	r3, [pc, #84]	; (1608c <nrfx_power_clock_irq_handler+0xa4>)
   16036:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1603a:	b162      	cbz	r2, 16056 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1603c:	2200      	movs	r2, #0
   1603e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16042:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   16046:	f44f 7280 	mov.w	r2, #256	; 0x100
   1604a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1604e:	4b10      	ldr	r3, [pc, #64]	; (16090 <nrfx_power_clock_irq_handler+0xa8>)
   16050:	2004      	movs	r0, #4
   16052:	681b      	ldr	r3, [r3, #0]
   16054:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16056:	4b0d      	ldr	r3, [pc, #52]	; (1608c <nrfx_power_clock_irq_handler+0xa4>)
   16058:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1605c:	b1aa      	cbz	r2, 1608a <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1605e:	2200      	movs	r2, #0
   16060:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16064:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   16068:	f44f 7200 	mov.w	r2, #512	; 0x200
   1606c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16070:	4b07      	ldr	r3, [pc, #28]	; (16090 <nrfx_power_clock_irq_handler+0xa8>)
   16072:	2005      	movs	r0, #5
    }
#endif
}
   16074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16078:	681b      	ldr	r3, [r3, #0]
   1607a:	4718      	bx	r3
   1607c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16080:	4b03      	ldr	r3, [pc, #12]	; (16090 <nrfx_power_clock_irq_handler+0xa8>)
   16082:	2001      	movs	r0, #1
   16084:	681b      	ldr	r3, [r3, #0]
   16086:	4798      	blx	r3
   16088:	e7d4      	b.n	16034 <nrfx_power_clock_irq_handler+0x4c>
}
   1608a:	bd10      	pop	{r4, pc}
   1608c:	40005000 	.word	0x40005000
   16090:	20009b08 	.word	0x20009b08

00016094 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   16094:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   16096:	4801      	ldr	r0, [pc, #4]	; (1609c <nrfx_dppi_channel_alloc+0x8>)
   16098:	f7ff bdb4 	b.w	15c04 <nrfx_flag32_alloc>
   1609c:	200082c8 	.word	0x200082c8

000160a0 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   160a0:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   160a2:	4a04      	ldr	r2, [pc, #16]	; (160b4 <nrfx_dppi_channel_free+0x14>)
   160a4:	4083      	lsls	r3, r0
{
   160a6:	4601      	mov	r1, r0
   160a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   160ac:	4802      	ldr	r0, [pc, #8]	; (160b8 <nrfx_dppi_channel_free+0x18>)
   160ae:	f7ff bdc5 	b.w	15c3c <nrfx_flag32_free>
   160b2:	bf00      	nop
   160b4:	40017000 	.word	0x40017000
   160b8:	200082c8 	.word	0x200082c8

000160bc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   160bc:	4b03      	ldr	r3, [pc, #12]	; (160cc <pin_in_use_by_te+0x10>)
   160be:	3008      	adds	r0, #8
   160c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   160c4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   160c8:	4770      	bx	lr
   160ca:	bf00      	nop
   160cc:	200082cc 	.word	0x200082cc

000160d0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   160d0:	4b04      	ldr	r3, [pc, #16]	; (160e4 <pin_has_trigger+0x14>)
   160d2:	3008      	adds	r0, #8
   160d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   160d8:	f010 001c 	ands.w	r0, r0, #28
   160dc:	bf18      	it	ne
   160de:	2001      	movne	r0, #1
   160e0:	4770      	bx	lr
   160e2:	bf00      	nop
   160e4:	200082cc 	.word	0x200082cc

000160e8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   160e8:	4b03      	ldr	r3, [pc, #12]	; (160f8 <pin_is_output+0x10>)
   160ea:	3008      	adds	r0, #8
   160ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   160f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   160f4:	4770      	bx	lr
   160f6:	bf00      	nop
   160f8:	200082cc 	.word	0x200082cc

000160fc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   160fc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   160fe:	4c0d      	ldr	r4, [pc, #52]	; (16134 <call_handler+0x38>)
   16100:	f100 0308 	add.w	r3, r0, #8
   16104:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   16108:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1610a:	05da      	lsls	r2, r3, #23
{
   1610c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1610e:	d507      	bpl.n	16120 <call_handler+0x24>
   16110:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   16114:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   16118:	6852      	ldr	r2, [r2, #4]
   1611a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1611e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   16120:	68a3      	ldr	r3, [r4, #8]
   16122:	b12b      	cbz	r3, 16130 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   16124:	4631      	mov	r1, r6
   16126:	4628      	mov	r0, r5
   16128:	68e2      	ldr	r2, [r4, #12]
    }
}
   1612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1612e:	4718      	bx	r3
}
   16130:	bd70      	pop	{r4, r5, r6, pc}
   16132:	bf00      	nop
   16134:	200082cc 	.word	0x200082cc

00016138 <release_handler>:
{
   16138:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1613a:	4a18      	ldr	r2, [pc, #96]	; (1619c <release_handler+0x64>)
   1613c:	3008      	adds	r0, #8
   1613e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   16142:	05d9      	lsls	r1, r3, #23
   16144:	d51d      	bpl.n	16182 <release_handler+0x4a>
   16146:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1614a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1614e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   16152:	2000      	movs	r0, #0
   16154:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   16158:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1615c:	f413 7f80 	tst.w	r3, #256	; 0x100
   16160:	d003      	beq.n	1616a <release_handler+0x32>
   16162:	f3c3 2343 	ubfx	r3, r3, #9, #4
   16166:	4299      	cmp	r1, r3
   16168:	d00b      	beq.n	16182 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1616a:	3001      	adds	r0, #1
   1616c:	2830      	cmp	r0, #48	; 0x30
   1616e:	d1f3      	bne.n	16158 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   16170:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   16172:	480b      	ldr	r0, [pc, #44]	; (161a0 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   16174:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   16178:	f7ff fd60 	bl	15c3c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1617c:	4b09      	ldr	r3, [pc, #36]	; (161a4 <release_handler+0x6c>)
   1617e:	4298      	cmp	r0, r3
   16180:	d100      	bne.n	16184 <release_handler+0x4c>
}
   16182:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   16184:	4908      	ldr	r1, [pc, #32]	; (161a8 <release_handler+0x70>)
   16186:	4809      	ldr	r0, [pc, #36]	; (161ac <release_handler+0x74>)
   16188:	f44f 7399 	mov.w	r3, #306	; 0x132
   1618c:	4a08      	ldr	r2, [pc, #32]	; (161b0 <release_handler+0x78>)
   1618e:	f005 fdd3 	bl	1bd38 <assert_print>
   16192:	f44f 7199 	mov.w	r1, #306	; 0x132
   16196:	4806      	ldr	r0, [pc, #24]	; (161b0 <release_handler+0x78>)
   16198:	f005 fdc7 	bl	1bd2a <assert_post_action>
   1619c:	200082cc 	.word	0x200082cc
   161a0:	20008340 	.word	0x20008340
   161a4:	0bad0000 	.word	0x0bad0000
   161a8:	00020b96 	.word	0x00020b96
   161ac:	000205a4 	.word	0x000205a4
   161b0:	00023741 	.word	0x00023741

000161b4 <pin_handler_trigger_uninit>:
{
   161b4:	b538      	push	{r3, r4, r5, lr}
   161b6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   161b8:	f7ff ff80 	bl	160bc <pin_in_use_by_te>
   161bc:	4c0b      	ldr	r4, [pc, #44]	; (161ec <pin_handler_trigger_uninit+0x38>)
   161be:	f102 0508 	add.w	r5, r2, #8
   161c2:	b160      	cbz	r0, 161de <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   161c4:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   161c6:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   161ca:	0b5b      	lsrs	r3, r3, #13
   161cc:	009b      	lsls	r3, r3, #2
   161ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   161d2:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   161d6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   161da:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   161de:	4610      	mov	r0, r2
   161e0:	f7ff ffaa 	bl	16138 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   161e4:	2300      	movs	r3, #0
   161e6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   161ea:	bd38      	pop	{r3, r4, r5, pc}
   161ec:	200082cc 	.word	0x200082cc

000161f0 <nrf_gpio_pin_port_decode>:
{
   161f0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   161f2:	6802      	ldr	r2, [r0, #0]
{
   161f4:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   161f6:	4610      	mov	r0, r2
   161f8:	f008 f9ce 	bl	1e598 <nrf_gpio_pin_present_check>
   161fc:	b958      	cbnz	r0, 16216 <nrf_gpio_pin_port_decode+0x26>
   161fe:	4910      	ldr	r1, [pc, #64]	; (16240 <nrf_gpio_pin_port_decode+0x50>)
   16200:	f240 2347 	movw	r3, #583	; 0x247
   16204:	4a0f      	ldr	r2, [pc, #60]	; (16244 <nrf_gpio_pin_port_decode+0x54>)
   16206:	4810      	ldr	r0, [pc, #64]	; (16248 <nrf_gpio_pin_port_decode+0x58>)
   16208:	f005 fd96 	bl	1bd38 <assert_print>
   1620c:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   16210:	480c      	ldr	r0, [pc, #48]	; (16244 <nrf_gpio_pin_port_decode+0x54>)
   16212:	f005 fd8a 	bl	1bd2a <assert_post_action>
    *p_pin = pin_number & 0x1F;
   16216:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1621a:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1621c:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1621e:	d00b      	beq.n	16238 <nrf_gpio_pin_port_decode+0x48>
   16220:	2a01      	cmp	r2, #1
   16222:	d00b      	beq.n	1623c <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   16224:	4909      	ldr	r1, [pc, #36]	; (1624c <nrf_gpio_pin_port_decode+0x5c>)
   16226:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1622a:	4a06      	ldr	r2, [pc, #24]	; (16244 <nrf_gpio_pin_port_decode+0x54>)
   1622c:	4806      	ldr	r0, [pc, #24]	; (16248 <nrf_gpio_pin_port_decode+0x58>)
   1622e:	f005 fd83 	bl	1bd38 <assert_print>
   16232:	f44f 7113 	mov.w	r1, #588	; 0x24c
   16236:	e7eb      	b.n	16210 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   16238:	4805      	ldr	r0, [pc, #20]	; (16250 <nrf_gpio_pin_port_decode+0x60>)
}
   1623a:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1623c:	4805      	ldr	r0, [pc, #20]	; (16254 <nrf_gpio_pin_port_decode+0x64>)
   1623e:	e7fc      	b.n	1623a <nrf_gpio_pin_port_decode+0x4a>
   16240:	00022e37 	.word	0x00022e37
   16244:	00022e04 	.word	0x00022e04
   16248:	000205a4 	.word	0x000205a4
   1624c:	0002357e 	.word	0x0002357e
   16250:	40842500 	.word	0x40842500
   16254:	40842800 	.word	0x40842800

00016258 <nrfx_gpiote_input_configure>:
{
   16258:	b5f0      	push	{r4, r5, r6, r7, lr}
   1625a:	4604      	mov	r4, r0
   1625c:	4617      	mov	r7, r2
   1625e:	461d      	mov	r5, r3
   16260:	b085      	sub	sp, #20
    if (p_input_config)
   16262:	b1d9      	cbz	r1, 1629c <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   16264:	f008 f9a9 	bl	1e5ba <pin_is_task_output>
   16268:	bb00      	cbnz	r0, 162ac <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1626a:	460b      	mov	r3, r1
   1626c:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   16270:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   16274:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   16278:	f10d 020f 	add.w	r2, sp, #15
   1627c:	f10d 010e 	add.w	r1, sp, #14
   16280:	4620      	mov	r0, r4
   16282:	f008 f9a5 	bl	1e5d0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   16286:	4a44      	ldr	r2, [pc, #272]	; (16398 <nrfx_gpiote_input_configure+0x140>)
   16288:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1628c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   16290:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   16294:	f043 0301 	orr.w	r3, r3, #1
   16298:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1629c:	b36f      	cbz	r7, 162fa <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1629e:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   162a0:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   162a2:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   162a4:	f7ff ff20 	bl	160e8 <pin_is_output>
   162a8:	b110      	cbz	r0, 162b0 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   162aa:	b1da      	cbz	r2, 162e4 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   162ac:	483b      	ldr	r0, [pc, #236]	; (1639c <nrfx_gpiote_input_configure+0x144>)
   162ae:	e026      	b.n	162fe <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   162b0:	4839      	ldr	r0, [pc, #228]	; (16398 <nrfx_gpiote_input_configure+0x140>)
   162b2:	f104 0c08 	add.w	ip, r4, #8
   162b6:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   162ba:	f021 0120 	bic.w	r1, r1, #32
   162be:	04c9      	lsls	r1, r1, #19
   162c0:	0cc9      	lsrs	r1, r1, #19
   162c2:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   162c6:	b16a      	cbz	r2, 162e4 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   162c8:	2e03      	cmp	r6, #3
   162ca:	d8ef      	bhi.n	162ac <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   162cc:	687b      	ldr	r3, [r7, #4]
   162ce:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   162d0:	00ba      	lsls	r2, r7, #2
   162d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   162d6:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   162da:	b996      	cbnz	r6, 16302 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   162dc:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   162e0:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   162e4:	4a2c      	ldr	r2, [pc, #176]	; (16398 <nrfx_gpiote_input_configure+0x140>)
   162e6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   162ea:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   162ee:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   162f2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   162f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   162fa:	bb15      	cbnz	r5, 16342 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   162fc:	4828      	ldr	r0, [pc, #160]	; (163a0 <nrfx_gpiote_input_configure+0x148>)
}
   162fe:	b005      	add	sp, #20
   16300:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16302:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   16306:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1630a:	f023 0303 	bic.w	r3, r3, #3
   1630e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16312:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   16316:	f041 0120 	orr.w	r1, r1, #32
   1631a:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1631e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   16322:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16326:	0223      	lsls	r3, r4, #8
   16328:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1632c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   16330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   16334:	ea43 030e 	orr.w	r3, r3, lr
   16338:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1633c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   16340:	e7d0      	b.n	162e4 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   16342:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   16344:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   16348:	f7ff fef6 	bl	16138 <release_handler>
    if (!handler)
   1634c:	2e00      	cmp	r6, #0
   1634e:	d0d5      	beq.n	162fc <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16350:	4d11      	ldr	r5, [pc, #68]	; (16398 <nrfx_gpiote_input_configure+0x140>)
   16352:	e9d5 2300 	ldrd	r2, r3, [r5]
   16356:	4296      	cmp	r6, r2
   16358:	d101      	bne.n	1635e <nrfx_gpiote_input_configure+0x106>
   1635a:	429f      	cmp	r7, r3
   1635c:	d019      	beq.n	16392 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1635e:	4811      	ldr	r0, [pc, #68]	; (163a4 <nrfx_gpiote_input_configure+0x14c>)
   16360:	f10d 010f 	add.w	r1, sp, #15
   16364:	f7ff fc4e 	bl	15c04 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   16368:	4b0d      	ldr	r3, [pc, #52]	; (163a0 <nrfx_gpiote_input_configure+0x148>)
   1636a:	4298      	cmp	r0, r3
   1636c:	d1c7      	bne.n	162fe <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1636e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   16372:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16376:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1637a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1637c:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   16380:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16384:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   16388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1638c:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   16390:	e7b4      	b.n	162fc <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16392:	2200      	movs	r2, #0
   16394:	e7ed      	b.n	16372 <nrfx_gpiote_input_configure+0x11a>
   16396:	bf00      	nop
   16398:	200082cc 	.word	0x200082cc
   1639c:	0bad0004 	.word	0x0bad0004
   163a0:	0bad0000 	.word	0x0bad0000
   163a4:	20008340 	.word	0x20008340

000163a8 <nrfx_gpiote_output_configure>:
{
   163a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   163aa:	4604      	mov	r4, r0
   163ac:	4615      	mov	r5, r2
   163ae:	b085      	sub	sp, #20
    if (p_config)
   163b0:	b321      	cbz	r1, 163fc <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   163b2:	f7ff fe99 	bl	160e8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   163b6:	b920      	cbnz	r0, 163c2 <nrfx_gpiote_output_configure+0x1a>
   163b8:	4620      	mov	r0, r4
   163ba:	f7ff fe7f 	bl	160bc <pin_in_use_by_te>
   163be:	2800      	cmp	r0, #0
   163c0:	d161      	bne.n	16486 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   163c2:	4620      	mov	r0, r4
   163c4:	f7ff fe84 	bl	160d0 <pin_has_trigger>
   163c8:	b110      	cbz	r0, 163d0 <nrfx_gpiote_output_configure+0x28>
   163ca:	784b      	ldrb	r3, [r1, #1]
   163cc:	2b01      	cmp	r3, #1
   163ce:	d05a      	beq.n	16486 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   163d0:	2301      	movs	r3, #1
   163d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   163d6:	2300      	movs	r3, #0
   163d8:	1c4a      	adds	r2, r1, #1
   163da:	e9cd 1300 	strd	r1, r3, [sp]
   163de:	4620      	mov	r0, r4
   163e0:	1c8b      	adds	r3, r1, #2
   163e2:	f10d 010f 	add.w	r1, sp, #15
   163e6:	f008 f8f3 	bl	1e5d0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   163ea:	4a28      	ldr	r2, [pc, #160]	; (1648c <nrfx_gpiote_output_configure+0xe4>)
   163ec:	f104 0108 	add.w	r1, r4, #8
   163f0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   163f4:	f043 0303 	orr.w	r3, r3, #3
   163f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   163fc:	b915      	cbnz	r5, 16404 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   163fe:	4824      	ldr	r0, [pc, #144]	; (16490 <nrfx_gpiote_output_configure+0xe8>)
}
   16400:	b005      	add	sp, #20
   16402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   16404:	4620      	mov	r0, r4
   16406:	f7ff fe6f 	bl	160e8 <pin_is_output>
        if (pin_is_input(pin))
   1640a:	2800      	cmp	r0, #0
   1640c:	d03b      	beq.n	16486 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1640e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   16412:	2300      	movs	r3, #0
   16414:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   16416:	4e1d      	ldr	r6, [pc, #116]	; (1648c <nrfx_gpiote_output_configure+0xe4>)
   16418:	f104 0708 	add.w	r7, r4, #8
   1641c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   16420:	0089      	lsls	r1, r1, #2
   16422:	f020 0020 	bic.w	r0, r0, #32
   16426:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1642a:	04c0      	lsls	r0, r0, #19
   1642c:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   16430:	0cc0      	lsrs	r0, r0, #19
   16432:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   16436:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1643a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1643e:	786a      	ldrb	r2, [r5, #1]
   16440:	2a00      	cmp	r2, #0
   16442:	d0dc      	beq.n	163fe <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   16444:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   16448:	78ad      	ldrb	r5, [r5, #2]
   1644a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1644e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   16452:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16456:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1645a:	0223      	lsls	r3, r4, #8
   1645c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   16460:	0412      	lsls	r2, r2, #16
   16462:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16466:	ea43 030e 	orr.w	r3, r3, lr
   1646a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1646c:	052a      	lsls	r2, r5, #20
   1646e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   16472:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16476:	4313      	orrs	r3, r2
   16478:	f040 0020 	orr.w	r0, r0, #32
   1647c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   16480:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   16484:	e7bb      	b.n	163fe <nrfx_gpiote_output_configure+0x56>
{
   16486:	4803      	ldr	r0, [pc, #12]	; (16494 <nrfx_gpiote_output_configure+0xec>)
   16488:	e7ba      	b.n	16400 <nrfx_gpiote_output_configure+0x58>
   1648a:	bf00      	nop
   1648c:	200082cc 	.word	0x200082cc
   16490:	0bad0000 	.word	0x0bad0000
   16494:	0bad0004 	.word	0x0bad0004

00016498 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   16498:	4b01      	ldr	r3, [pc, #4]	; (164a0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1649a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1649e:	4770      	bx	lr
   164a0:	200082cc 	.word	0x200082cc

000164a4 <nrfx_gpiote_channel_get>:
{
   164a4:	4602      	mov	r2, r0
   164a6:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   164a8:	b959      	cbnz	r1, 164c2 <nrfx_gpiote_channel_get+0x1e>
   164aa:	490c      	ldr	r1, [pc, #48]	; (164dc <nrfx_gpiote_channel_get+0x38>)
   164ac:	480c      	ldr	r0, [pc, #48]	; (164e0 <nrfx_gpiote_channel_get+0x3c>)
   164ae:	f240 2335 	movw	r3, #565	; 0x235
   164b2:	4a0c      	ldr	r2, [pc, #48]	; (164e4 <nrfx_gpiote_channel_get+0x40>)
   164b4:	f005 fc40 	bl	1bd38 <assert_print>
   164b8:	f240 2135 	movw	r1, #565	; 0x235
   164bc:	4809      	ldr	r0, [pc, #36]	; (164e4 <nrfx_gpiote_channel_get+0x40>)
   164be:	f005 fc34 	bl	1bd2a <assert_post_action>
    if (pin_in_use_by_te(pin))
   164c2:	f7ff fdfb 	bl	160bc <pin_in_use_by_te>
   164c6:	b138      	cbz	r0, 164d8 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   164c8:	4b07      	ldr	r3, [pc, #28]	; (164e8 <nrfx_gpiote_channel_get+0x44>)
   164ca:	3208      	adds	r2, #8
   164cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   164d0:	4806      	ldr	r0, [pc, #24]	; (164ec <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   164d2:	0b5b      	lsrs	r3, r3, #13
   164d4:	700b      	strb	r3, [r1, #0]
}
   164d6:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   164d8:	4805      	ldr	r0, [pc, #20]	; (164f0 <nrfx_gpiote_channel_get+0x4c>)
   164da:	e7fc      	b.n	164d6 <nrfx_gpiote_channel_get+0x32>
   164dc:	0002377f 	.word	0x0002377f
   164e0:	000205a4 	.word	0x000205a4
   164e4:	00023741 	.word	0x00023741
   164e8:	200082cc 	.word	0x200082cc
   164ec:	0bad0000 	.word	0x0bad0000
   164f0:	0bad0004 	.word	0x0bad0004

000164f4 <nrfx_gpiote_init>:
{
   164f4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   164f6:	4c0f      	ldr	r4, [pc, #60]	; (16534 <nrfx_gpiote_init+0x40>)
   164f8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   164fc:	b9bd      	cbnz	r5, 1652e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   164fe:	2260      	movs	r2, #96	; 0x60
   16500:	4629      	mov	r1, r5
   16502:	f104 0010 	add.w	r0, r4, #16
   16506:	f006 fc31 	bl	1cd6c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1650a:	202f      	movs	r0, #47	; 0x2f
   1650c:	f7f6 fbc8 	bl	cca0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16510:	4b09      	ldr	r3, [pc, #36]	; (16538 <nrfx_gpiote_init+0x44>)
    return err_code;
   16512:	480a      	ldr	r0, [pc, #40]	; (1653c <nrfx_gpiote_init+0x48>)
   16514:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   16518:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1651c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16520:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16524:	2301      	movs	r3, #1
   16526:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1652a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1652c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1652e:	4804      	ldr	r0, [pc, #16]	; (16540 <nrfx_gpiote_init+0x4c>)
   16530:	e7fc      	b.n	1652c <nrfx_gpiote_init+0x38>
   16532:	bf00      	nop
   16534:	200082cc 	.word	0x200082cc
   16538:	4002f000 	.word	0x4002f000
   1653c:	0bad0000 	.word	0x0bad0000
   16540:	0bad0005 	.word	0x0bad0005

00016544 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   16544:	4b03      	ldr	r3, [pc, #12]	; (16554 <nrfx_gpiote_is_init+0x10>)
   16546:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1654a:	3800      	subs	r0, #0
   1654c:	bf18      	it	ne
   1654e:	2001      	movne	r0, #1
   16550:	4770      	bx	lr
   16552:	bf00      	nop
   16554:	200082cc 	.word	0x200082cc

00016558 <nrfx_gpiote_channel_free>:
{
   16558:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1655a:	4801      	ldr	r0, [pc, #4]	; (16560 <nrfx_gpiote_channel_free+0x8>)
   1655c:	f7ff bb6e 	b.w	15c3c <nrfx_flag32_free>
   16560:	2000833c 	.word	0x2000833c

00016564 <nrfx_gpiote_channel_alloc>:
{
   16564:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   16566:	4801      	ldr	r0, [pc, #4]	; (1656c <nrfx_gpiote_channel_alloc+0x8>)
   16568:	f7ff bb4c 	b.w	15c04 <nrfx_flag32_alloc>
   1656c:	2000833c 	.word	0x2000833c

00016570 <nrfx_gpiote_trigger_enable>:
{
   16570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16572:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   16574:	f7ff fdac 	bl	160d0 <pin_has_trigger>
   16578:	b958      	cbnz	r0, 16592 <nrfx_gpiote_trigger_enable+0x22>
   1657a:	492b      	ldr	r1, [pc, #172]	; (16628 <nrfx_gpiote_trigger_enable+0xb8>)
   1657c:	f240 33df 	movw	r3, #991	; 0x3df
   16580:	4a2a      	ldr	r2, [pc, #168]	; (1662c <nrfx_gpiote_trigger_enable+0xbc>)
   16582:	482b      	ldr	r0, [pc, #172]	; (16630 <nrfx_gpiote_trigger_enable+0xc0>)
   16584:	f005 fbd8 	bl	1bd38 <assert_print>
   16588:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1658c:	4827      	ldr	r0, [pc, #156]	; (1662c <nrfx_gpiote_trigger_enable+0xbc>)
   1658e:	f005 fbcc 	bl	1bd2a <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16592:	4620      	mov	r0, r4
   16594:	f7ff fd92 	bl	160bc <pin_in_use_by_te>
   16598:	4a26      	ldr	r2, [pc, #152]	; (16634 <nrfx_gpiote_trigger_enable+0xc4>)
   1659a:	f104 0508 	add.w	r5, r4, #8
   1659e:	b1e0      	cbz	r0, 165da <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   165a0:	4620      	mov	r0, r4
   165a2:	f7ff fda1 	bl	160e8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   165a6:	b9c0      	cbnz	r0, 165da <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   165a8:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   165ac:	4c22      	ldr	r4, [pc, #136]	; (16638 <nrfx_gpiote_trigger_enable+0xc8>)
   165ae:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   165b0:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   165b2:	50e0      	str	r0, [r4, r3]
   165b4:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   165b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   165ba:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   165be:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   165c2:	f040 0001 	orr.w	r0, r0, #1
   165c6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   165ca:	b121      	cbz	r1, 165d6 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   165cc:	2301      	movs	r3, #1
   165ce:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   165d0:	4a1a      	ldr	r2, [pc, #104]	; (1663c <nrfx_gpiote_trigger_enable+0xcc>)
   165d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   165d6:	b003      	add	sp, #12
   165d8:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   165da:	b949      	cbnz	r1, 165f0 <nrfx_gpiote_trigger_enable+0x80>
   165dc:	4918      	ldr	r1, [pc, #96]	; (16640 <nrfx_gpiote_trigger_enable+0xd0>)
   165de:	f240 33ee 	movw	r3, #1006	; 0x3ee
   165e2:	4a12      	ldr	r2, [pc, #72]	; (1662c <nrfx_gpiote_trigger_enable+0xbc>)
   165e4:	4812      	ldr	r0, [pc, #72]	; (16630 <nrfx_gpiote_trigger_enable+0xc0>)
   165e6:	f005 fba7 	bl	1bd38 <assert_print>
   165ea:	f240 31ee 	movw	r1, #1006	; 0x3ee
   165ee:	e7cd      	b.n	1658c <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   165f0:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   165f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   165f8:	2b04      	cmp	r3, #4
   165fa:	d011      	beq.n	16620 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   165fc:	2b05      	cmp	r3, #5
   165fe:	d011      	beq.n	16624 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16600:	a801      	add	r0, sp, #4
   16602:	9401      	str	r4, [sp, #4]
   16604:	f7ff fdf4 	bl	161f0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16608:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1660a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1660c:	40d9      	lsrs	r1, r3
   1660e:	f001 0101 	and.w	r1, r1, #1
   16612:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   16614:	4620      	mov	r0, r4
}
   16616:	b003      	add	sp, #12
   16618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1661c:	f008 b825 	b.w	1e66a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   16620:	2103      	movs	r1, #3
   16622:	e7f7      	b.n	16614 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   16624:	2102      	movs	r1, #2
   16626:	e7f5      	b.n	16614 <nrfx_gpiote_trigger_enable+0xa4>
   16628:	00023789 	.word	0x00023789
   1662c:	00023741 	.word	0x00023741
   16630:	000205a4 	.word	0x000205a4
   16634:	200082cc 	.word	0x200082cc
   16638:	4002f100 	.word	0x4002f100
   1663c:	4002f000 	.word	0x4002f000
   16640:	0002379e 	.word	0x0002379e

00016644 <nrfx_gpiote_trigger_disable>:
{
   16644:	b508      	push	{r3, lr}
   16646:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16648:	f7ff fd38 	bl	160bc <pin_in_use_by_te>
   1664c:	b1c8      	cbz	r0, 16682 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1664e:	4610      	mov	r0, r2
   16650:	f7ff fd4a 	bl	160e8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16654:	b9a8      	cbnz	r0, 16682 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16656:	4b0e      	ldr	r3, [pc, #56]	; (16690 <nrfx_gpiote_trigger_disable+0x4c>)
   16658:	3208      	adds	r2, #8
   1665a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1665e:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16660:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   16662:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   16664:	490b      	ldr	r1, [pc, #44]	; (16694 <nrfx_gpiote_trigger_disable+0x50>)
   16666:	009b      	lsls	r3, r3, #2
   16668:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1666c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16670:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   16674:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16678:	f022 0203 	bic.w	r2, r2, #3
   1667c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   16680:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16682:	2100      	movs	r1, #0
}
   16684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16688:	4610      	mov	r0, r2
   1668a:	f007 bfee 	b.w	1e66a <nrf_gpio_cfg_sense_set>
   1668e:	bf00      	nop
   16690:	200082cc 	.word	0x200082cc
   16694:	4002f000 	.word	0x4002f000

00016698 <nrfx_gpiote_pin_uninit>:
{
   16698:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1669a:	4b10      	ldr	r3, [pc, #64]	; (166dc <nrfx_gpiote_pin_uninit+0x44>)
   1669c:	f100 0208 	add.w	r2, r0, #8
   166a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   166a4:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   166a6:	07db      	lsls	r3, r3, #31
   166a8:	d516      	bpl.n	166d8 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   166aa:	f7ff ffcb 	bl	16644 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   166ae:	4620      	mov	r0, r4
   166b0:	f7ff fd80 	bl	161b4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   166b4:	a801      	add	r0, sp, #4
   166b6:	9401      	str	r4, [sp, #4]
   166b8:	f7ff fd9a 	bl	161f0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   166bc:	9b01      	ldr	r3, [sp, #4]
   166be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   166c2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   166c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   166ca:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   166ce:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   166d2:	4803      	ldr	r0, [pc, #12]	; (166e0 <nrfx_gpiote_pin_uninit+0x48>)
}
   166d4:	b002      	add	sp, #8
   166d6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   166d8:	4802      	ldr	r0, [pc, #8]	; (166e4 <nrfx_gpiote_pin_uninit+0x4c>)
   166da:	e7fb      	b.n	166d4 <nrfx_gpiote_pin_uninit+0x3c>
   166dc:	200082cc 	.word	0x200082cc
   166e0:	0bad0000 	.word	0x0bad0000
   166e4:	0bad0004 	.word	0x0bad0004

000166e8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   166e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   166ec:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   166ee:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   166f0:	4634      	mov	r4, r6
{
   166f2:	4b64      	ldr	r3, [pc, #400]	; (16884 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   166f4:	4864      	ldr	r0, [pc, #400]	; (16888 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   166f6:	4965      	ldr	r1, [pc, #404]	; (1688c <nrfx_gpiote_irq_handler+0x1a4>)
{
   166f8:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   166fa:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   166fc:	b135      	cbz	r5, 1670c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   166fe:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   16702:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16704:	bf1e      	ittt	ne
   16706:	601c      	strne	r4, [r3, #0]
   16708:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1670a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1670c:	3304      	adds	r3, #4
   1670e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   16710:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16714:	d1f1      	bne.n	166fa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16716:	f8df a170 	ldr.w	sl, [pc, #368]	; 16888 <nrfx_gpiote_irq_handler+0x1a0>
   1671a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1671e:	2b00      	cmp	r3, #0
   16720:	f000 8093 	beq.w	1684a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   16724:	f8df 8168 	ldr.w	r8, [pc, #360]	; 16890 <nrfx_gpiote_irq_handler+0x1a8>
   16728:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1672c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1672e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   16732:	4b58      	ldr	r3, [pc, #352]	; (16894 <nrfx_gpiote_irq_handler+0x1ac>)
   16734:	6a1a      	ldr	r2, [r3, #32]
   16736:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   16738:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1673a:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1673e:	f10d 0b10 	add.w	fp, sp, #16
   16742:	ea4f 1349 	mov.w	r3, r9, lsl #5
   16746:	9300      	str	r3, [sp, #0]
   16748:	e04a      	b.n	167e0 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1674a:	fa94 f4a4 	rbit	r4, r4
   1674e:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   16752:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16754:	4a50      	ldr	r2, [pc, #320]	; (16898 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   16756:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16758:	f104 0308 	add.w	r3, r4, #8
   1675c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   16760:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   16762:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   16764:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   16768:	fa03 f101 	lsl.w	r1, r3, r1
   1676c:	f81b 3000 	ldrb.w	r3, [fp, r0]
   16770:	08ba      	lsrs	r2, r7, #2
   16772:	ea23 0301 	bic.w	r3, r3, r1
   16776:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1677a:	a803      	add	r0, sp, #12
   1677c:	9201      	str	r2, [sp, #4]
   1677e:	9403      	str	r4, [sp, #12]
   16780:	f7ff fd36 	bl	161f0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16784:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   16786:	9a01      	ldr	r2, [sp, #4]
   16788:	3380      	adds	r3, #128	; 0x80
   1678a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1678e:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   16792:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16794:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   16796:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1679a:	d52b      	bpl.n	167f4 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1679c:	4639      	mov	r1, r7
   1679e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   167a0:	b2dd      	uxtb	r5, r3
   167a2:	f7ff fcab 	bl	160fc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   167a6:	a803      	add	r0, sp, #12
   167a8:	9403      	str	r4, [sp, #12]
   167aa:	f7ff fd21 	bl	161f0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   167ae:	9b03      	ldr	r3, [sp, #12]
   167b0:	3380      	adds	r3, #128	; 0x80
   167b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   167b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   167ba:	429d      	cmp	r5, r3
   167bc:	d107      	bne.n	167ce <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   167be:	2100      	movs	r1, #0
   167c0:	4620      	mov	r0, r4
   167c2:	f007 ff52 	bl	1e66a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   167c6:	4629      	mov	r1, r5
   167c8:	4620      	mov	r0, r4
   167ca:	f007 ff4e 	bl	1e66a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   167ce:	a803      	add	r0, sp, #12
   167d0:	9403      	str	r4, [sp, #12]
   167d2:	f7ff fd0d 	bl	161f0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   167d6:	2201      	movs	r2, #1
   167d8:	9b03      	ldr	r3, [sp, #12]
   167da:	fa02 f303 	lsl.w	r3, r2, r3
   167de:	6203      	str	r3, [r0, #32]
            while (latch[i])
   167e0:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   167e4:	2c00      	cmp	r4, #0
   167e6:	d1b0      	bne.n	1674a <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   167e8:	f1b9 0f00 	cmp.w	r9, #0
   167ec:	d11d      	bne.n	1682a <nrfx_gpiote_irq_handler+0x142>
   167ee:	f04f 0901 	mov.w	r9, #1
   167f2:	e7a6      	b.n	16742 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   167f4:	2b02      	cmp	r3, #2
   167f6:	d10c      	bne.n	16812 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   167f8:	2103      	movs	r1, #3
   167fa:	4620      	mov	r0, r4
   167fc:	f007 ff35 	bl	1e66a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16800:	f005 0305 	and.w	r3, r5, #5
   16804:	2b01      	cmp	r3, #1
   16806:	d1e2      	bne.n	167ce <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   16808:	4639      	mov	r1, r7
   1680a:	4620      	mov	r0, r4
   1680c:	f7ff fc76 	bl	160fc <call_handler>
   16810:	e7dd      	b.n	167ce <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   16812:	2102      	movs	r1, #2
   16814:	4620      	mov	r0, r4
   16816:	9301      	str	r3, [sp, #4]
   16818:	f007 ff27 	bl	1e66a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1681c:	2d03      	cmp	r5, #3
   1681e:	d0f3      	beq.n	16808 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16820:	9b01      	ldr	r3, [sp, #4]
   16822:	2b03      	cmp	r3, #3
   16824:	d1d3      	bne.n	167ce <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   16826:	2d02      	cmp	r5, #2
   16828:	e7ed      	b.n	16806 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1682a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1682e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   16832:	f8d8 3020 	ldr.w	r3, [r8, #32]
   16836:	4917      	ldr	r1, [pc, #92]	; (16894 <nrfx_gpiote_irq_handler+0x1ac>)
   16838:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1683a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1683e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   16840:	4313      	orrs	r3, r2
   16842:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   16844:	620a      	str	r2, [r1, #32]
   16846:	f47f af78 	bne.w	1673a <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1684a:	2401      	movs	r4, #1
    while (mask)
   1684c:	b916      	cbnz	r6, 16854 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1684e:	b007      	add	sp, #28
   16850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   16854:	fa96 f3a6 	rbit	r3, r6
   16858:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1685c:	fa04 f203 	lsl.w	r2, r4, r3
   16860:	009b      	lsls	r3, r3, #2
   16862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16866:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1686a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1686e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   16872:	f3c0 2005 	ubfx	r0, r0, #8, #6
   16876:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1687a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1687e:	f7ff fc3d 	bl	160fc <call_handler>
   16882:	e7e3      	b.n	1684c <nrfx_gpiote_irq_handler+0x164>
   16884:	4002f100 	.word	0x4002f100
   16888:	4002f000 	.word	0x4002f000
   1688c:	4002f120 	.word	0x4002f120
   16890:	40842500 	.word	0x40842500
   16894:	40842800 	.word	0x40842800
   16898:	200082cc 	.word	0x200082cc

0001689c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1689c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1689e:	4c08      	ldr	r4, [pc, #32]	; (168c0 <nrfx_ipc_init+0x24>)
{
   168a0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   168a2:	7923      	ldrb	r3, [r4, #4]
{
   168a4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   168a6:	b943      	cbnz	r3, 168ba <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   168a8:	202a      	movs	r0, #42	; 0x2a
   168aa:	f7f6 f9f9 	bl	cca0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   168ae:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   168b0:	4804      	ldr	r0, [pc, #16]	; (168c4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   168b2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   168b4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   168b6:	60a5      	str	r5, [r4, #8]
}
   168b8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   168ba:	4803      	ldr	r0, [pc, #12]	; (168c8 <nrfx_ipc_init+0x2c>)
   168bc:	e7fc      	b.n	168b8 <nrfx_ipc_init+0x1c>
   168be:	bf00      	nop
   168c0:	20009b10 	.word	0x20009b10
   168c4:	0bad0000 	.word	0x0bad0000
   168c8:	0bad000c 	.word	0x0bad000c

000168cc <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   168cc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   168ce:	b948      	cbnz	r0, 168e4 <nrfx_ipc_config_load+0x18>
   168d0:	4919      	ldr	r1, [pc, #100]	; (16938 <nrfx_ipc_config_load+0x6c>)
   168d2:	2345      	movs	r3, #69	; 0x45
   168d4:	4a19      	ldr	r2, [pc, #100]	; (1693c <nrfx_ipc_config_load+0x70>)
   168d6:	481a      	ldr	r0, [pc, #104]	; (16940 <nrfx_ipc_config_load+0x74>)
   168d8:	f005 fa2e 	bl	1bd38 <assert_print>
   168dc:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   168de:	4817      	ldr	r0, [pc, #92]	; (1693c <nrfx_ipc_config_load+0x70>)
   168e0:	f005 fa23 	bl	1bd2a <assert_post_action>
   168e4:	4b17      	ldr	r3, [pc, #92]	; (16944 <nrfx_ipc_config_load+0x78>)
   168e6:	791b      	ldrb	r3, [r3, #4]
   168e8:	2b01      	cmp	r3, #1
   168ea:	d007      	beq.n	168fc <nrfx_ipc_config_load+0x30>
   168ec:	4916      	ldr	r1, [pc, #88]	; (16948 <nrfx_ipc_config_load+0x7c>)
   168ee:	2346      	movs	r3, #70	; 0x46
   168f0:	4a12      	ldr	r2, [pc, #72]	; (1693c <nrfx_ipc_config_load+0x70>)
   168f2:	4813      	ldr	r0, [pc, #76]	; (16940 <nrfx_ipc_config_load+0x74>)
   168f4:	f005 fa20 	bl	1bd38 <assert_print>
   168f8:	2146      	movs	r1, #70	; 0x46
   168fa:	e7f0      	b.n	168de <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   168fc:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   168fe:	4a13      	ldr	r2, [pc, #76]	; (1694c <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   16900:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   16904:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16908:	3301      	adds	r3, #1
   1690a:	2b10      	cmp	r3, #16
   1690c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   16910:	d1f6      	bne.n	16900 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   16912:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   16914:	4a0d      	ldr	r2, [pc, #52]	; (1694c <nrfx_ipc_config_load+0x80>)
   16916:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1691a:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1691e:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16922:	3301      	adds	r3, #1
   16924:	2b10      	cmp	r3, #16
   16926:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1692a:	d1f6      	bne.n	1691a <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1692c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   16930:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16934:	bd38      	pop	{r3, r4, r5, pc}
   16936:	bf00      	nop
   16938:	000237e4 	.word	0x000237e4
   1693c:	000237a9 	.word	0x000237a9
   16940:	000205a4 	.word	0x000205a4
   16944:	20009b10 	.word	0x20009b10
   16948:	000237ed 	.word	0x000237ed
   1694c:	4002a000 	.word	0x4002a000

00016950 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   16950:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16952:	4b09      	ldr	r3, [pc, #36]	; (16978 <nrfx_ipc_receive_event_enable+0x28>)
   16954:	791b      	ldrb	r3, [r3, #4]
   16956:	2b01      	cmp	r3, #1
   16958:	d009      	beq.n	1696e <nrfx_ipc_receive_event_enable+0x1e>
   1695a:	4908      	ldr	r1, [pc, #32]	; (1697c <nrfx_ipc_receive_event_enable+0x2c>)
   1695c:	4808      	ldr	r0, [pc, #32]	; (16980 <nrfx_ipc_receive_event_enable+0x30>)
   1695e:	236b      	movs	r3, #107	; 0x6b
   16960:	4a08      	ldr	r2, [pc, #32]	; (16984 <nrfx_ipc_receive_event_enable+0x34>)
   16962:	f005 f9e9 	bl	1bd38 <assert_print>
   16966:	216b      	movs	r1, #107	; 0x6b
   16968:	4806      	ldr	r0, [pc, #24]	; (16984 <nrfx_ipc_receive_event_enable+0x34>)
   1696a:	f005 f9de 	bl	1bd2a <assert_post_action>
   1696e:	4a06      	ldr	r2, [pc, #24]	; (16988 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   16970:	4083      	lsls	r3, r0
   16972:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16976:	bd08      	pop	{r3, pc}
   16978:	20009b10 	.word	0x20009b10
   1697c:	000237ed 	.word	0x000237ed
   16980:	000205a4 	.word	0x000205a4
   16984:	000237a9 	.word	0x000237a9
   16988:	4002a000 	.word	0x4002a000

0001698c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1698c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1698e:	4b09      	ldr	r3, [pc, #36]	; (169b4 <nrfx_ipc_receive_event_disable+0x28>)
   16990:	791b      	ldrb	r3, [r3, #4]
   16992:	2b01      	cmp	r3, #1
   16994:	d009      	beq.n	169aa <nrfx_ipc_receive_event_disable+0x1e>
   16996:	4908      	ldr	r1, [pc, #32]	; (169b8 <nrfx_ipc_receive_event_disable+0x2c>)
   16998:	4808      	ldr	r0, [pc, #32]	; (169bc <nrfx_ipc_receive_event_disable+0x30>)
   1699a:	2371      	movs	r3, #113	; 0x71
   1699c:	4a08      	ldr	r2, [pc, #32]	; (169c0 <nrfx_ipc_receive_event_disable+0x34>)
   1699e:	f005 f9cb 	bl	1bd38 <assert_print>
   169a2:	2171      	movs	r1, #113	; 0x71
   169a4:	4806      	ldr	r0, [pc, #24]	; (169c0 <nrfx_ipc_receive_event_disable+0x34>)
   169a6:	f005 f9c0 	bl	1bd2a <assert_post_action>
    p_reg->INTENCLR = mask;
   169aa:	4a06      	ldr	r2, [pc, #24]	; (169c4 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   169ac:	4083      	lsls	r3, r0
   169ae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   169b2:	bd08      	pop	{r3, pc}
   169b4:	20009b10 	.word	0x20009b10
   169b8:	000237ed 	.word	0x000237ed
   169bc:	000205a4 	.word	0x000205a4
   169c0:	000237a9 	.word	0x000237a9
   169c4:	4002a000 	.word	0x4002a000

000169c8 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   169c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   169ca:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   169cc:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   169ce:	4b12      	ldr	r3, [pc, #72]	; (16a18 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   169d0:	4d12      	ldr	r5, [pc, #72]	; (16a1c <nrfx_ipc_irq_handler+0x54>)
   169d2:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   169d6:	b904      	cbnz	r4, 169da <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   169d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   169da:	fa94 f0a4 	rbit	r0, r4
   169de:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   169e2:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   169e6:	280f      	cmp	r0, #15
   169e8:	ea24 0403 	bic.w	r4, r4, r3
   169ec:	dd0b      	ble.n	16a06 <nrfx_ipc_irq_handler+0x3e>
   169ee:	490c      	ldr	r1, [pc, #48]	; (16a20 <nrfx_ipc_irq_handler+0x58>)
   169f0:	480c      	ldr	r0, [pc, #48]	; (16a24 <nrfx_ipc_irq_handler+0x5c>)
   169f2:	f240 13e7 	movw	r3, #487	; 0x1e7
   169f6:	4a0c      	ldr	r2, [pc, #48]	; (16a28 <nrfx_ipc_irq_handler+0x60>)
   169f8:	f005 f99e 	bl	1bd38 <assert_print>
   169fc:	f240 11e7 	movw	r1, #487	; 0x1e7
   16a00:	4809      	ldr	r0, [pc, #36]	; (16a28 <nrfx_ipc_irq_handler+0x60>)
   16a02:	f005 f992 	bl	1bd2a <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a06:	4b09      	ldr	r3, [pc, #36]	; (16a2c <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16a08:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a0a:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   16a0c:	682b      	ldr	r3, [r5, #0]
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d0e1      	beq.n	169d6 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   16a12:	68a9      	ldr	r1, [r5, #8]
   16a14:	4798      	blx	r3
   16a16:	e7de      	b.n	169d6 <nrfx_ipc_irq_handler+0xe>
   16a18:	4002a000 	.word	0x4002a000
   16a1c:	20009b10 	.word	0x20009b10
   16a20:	00020aec 	.word	0x00020aec
   16a24:	000205a4 	.word	0x000205a4
   16a28:	00020aba 	.word	0x00020aba
   16a2c:	4002a100 	.word	0x4002a100

00016a30 <nrf_gpio_pin_port_decode>:
{
   16a30:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16a32:	6803      	ldr	r3, [r0, #0]
    switch (port)
   16a34:	095a      	lsrs	r2, r3, #5
   16a36:	d00d      	beq.n	16a54 <nrf_gpio_pin_port_decode+0x24>
   16a38:	2a01      	cmp	r2, #1
   16a3a:	d013      	beq.n	16a64 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16a3c:	490e      	ldr	r1, [pc, #56]	; (16a78 <nrf_gpio_pin_port_decode+0x48>)
   16a3e:	480f      	ldr	r0, [pc, #60]	; (16a7c <nrf_gpio_pin_port_decode+0x4c>)
   16a40:	f240 2347 	movw	r3, #583	; 0x247
   16a44:	4a0e      	ldr	r2, [pc, #56]	; (16a80 <nrf_gpio_pin_port_decode+0x50>)
   16a46:	f005 f977 	bl	1bd38 <assert_print>
   16a4a:	f240 2147 	movw	r1, #583	; 0x247
   16a4e:	480c      	ldr	r0, [pc, #48]	; (16a80 <nrf_gpio_pin_port_decode+0x50>)
   16a50:	f005 f96b 	bl	1bd2a <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   16a54:	f04f 32ff 	mov.w	r2, #4294967295
   16a58:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16a5c:	07d9      	lsls	r1, r3, #31
   16a5e:	d5ed      	bpl.n	16a3c <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   16a60:	4808      	ldr	r0, [pc, #32]	; (16a84 <nrf_gpio_pin_port_decode+0x54>)
   16a62:	e008      	b.n	16a76 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   16a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   16a68:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   16a6c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16a6e:	07d2      	lsls	r2, r2, #31
   16a70:	d5e4      	bpl.n	16a3c <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   16a72:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   16a74:	4804      	ldr	r0, [pc, #16]	; (16a88 <nrf_gpio_pin_port_decode+0x58>)
}
   16a76:	bd08      	pop	{r3, pc}
   16a78:	00022e37 	.word	0x00022e37
   16a7c:	000205a4 	.word	0x000205a4
   16a80:	00022e04 	.word	0x00022e04
   16a84:	40842500 	.word	0x40842500
   16a88:	40842800 	.word	0x40842800

00016a8c <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
   16a8c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_seq != NULL);
   16a8e:	b95a      	cbnz	r2, 16aa8 <nrf_pwm_sequence_set+0x1c>
   16a90:	492c      	ldr	r1, [pc, #176]	; (16b44 <nrf_pwm_sequence_set+0xb8>)
   16a92:	f44f 732c 	mov.w	r3, #688	; 0x2b0
   16a96:	4a2c      	ldr	r2, [pc, #176]	; (16b48 <nrf_pwm_sequence_set+0xbc>)
   16a98:	482c      	ldr	r0, [pc, #176]	; (16b4c <nrf_pwm_sequence_set+0xc0>)
   16a9a:	f005 f94d 	bl	1bd38 <assert_print>
   16a9e:	f44f 712c 	mov.w	r1, #688	; 0x2b0
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   16aa2:	4829      	ldr	r0, [pc, #164]	; (16b48 <nrf_pwm_sequence_set+0xbc>)
   16aa4:	f005 f941 	bl	1bd2a <assert_post_action>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   16aa8:	6813      	ldr	r3, [r2, #0]
    NRFX_ASSERT(p_values != NULL);
   16aaa:	b94b      	cbnz	r3, 16ac0 <nrf_pwm_sequence_set+0x34>
   16aac:	4928      	ldr	r1, [pc, #160]	; (16b50 <nrf_pwm_sequence_set+0xc4>)
   16aae:	f240 23bd 	movw	r3, #701	; 0x2bd
   16ab2:	4a25      	ldr	r2, [pc, #148]	; (16b48 <nrf_pwm_sequence_set+0xbc>)
   16ab4:	4825      	ldr	r0, [pc, #148]	; (16b4c <nrf_pwm_sequence_set+0xc0>)
   16ab6:	f005 f93f 	bl	1bd38 <assert_print>
   16aba:	f240 21bd 	movw	r1, #701	; 0x2bd
   16abe:	e7f0      	b.n	16aa2 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   16ac0:	eb00 1441 	add.w	r4, r0, r1, lsl #5
   16ac4:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   16ac8:	8893      	ldrh	r3, [r2, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   16aca:	b94b      	cbnz	r3, 16ae0 <nrf_pwm_sequence_set+0x54>
   16acc:	4921      	ldr	r1, [pc, #132]	; (16b54 <nrf_pwm_sequence_set+0xc8>)
   16ace:	f240 23c6 	movw	r3, #710	; 0x2c6
   16ad2:	4a1d      	ldr	r2, [pc, #116]	; (16b48 <nrf_pwm_sequence_set+0xbc>)
   16ad4:	481d      	ldr	r0, [pc, #116]	; (16b4c <nrf_pwm_sequence_set+0xc0>)
   16ad6:	f005 f92f 	bl	1bd38 <assert_print>
   16ada:	f240 21c6 	movw	r1, #710	; 0x2c6
   16ade:	e7e0      	b.n	16aa2 <nrf_pwm_sequence_set+0x16>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   16ae0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   16ae4:	d009      	beq.n	16afa <nrf_pwm_sequence_set+0x6e>
   16ae6:	491c      	ldr	r1, [pc, #112]	; (16b58 <nrf_pwm_sequence_set+0xcc>)
   16ae8:	f240 23c7 	movw	r3, #711	; 0x2c7
   16aec:	4a16      	ldr	r2, [pc, #88]	; (16b48 <nrf_pwm_sequence_set+0xbc>)
   16aee:	4817      	ldr	r0, [pc, #92]	; (16b4c <nrf_pwm_sequence_set+0xc0>)
   16af0:	f005 f922 	bl	1bd38 <assert_print>
   16af4:	f240 21c7 	movw	r1, #711	; 0x2c7
   16af8:	e7d3      	b.n	16aa2 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].CNT = length;
   16afa:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   16afe:	6893      	ldr	r3, [r2, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   16b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   16b04:	d309      	bcc.n	16b1a <nrf_pwm_sequence_set+0x8e>
   16b06:	4915      	ldr	r1, [pc, #84]	; (16b5c <nrf_pwm_sequence_set+0xd0>)
   16b08:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   16b0c:	4a0e      	ldr	r2, [pc, #56]	; (16b48 <nrf_pwm_sequence_set+0xbc>)
   16b0e:	480f      	ldr	r0, [pc, #60]	; (16b4c <nrf_pwm_sequence_set+0xc0>)
   16b10:	f005 f912 	bl	1bd38 <assert_print>
   16b14:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   16b18:	e7c3      	b.n	16aa2 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   16b1a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   16b1e:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   16b22:	68d3      	ldr	r3, [r2, #12]
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   16b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   16b28:	d309      	bcc.n	16b3e <nrf_pwm_sequence_set+0xb2>
   16b2a:	490d      	ldr	r1, [pc, #52]	; (16b60 <nrf_pwm_sequence_set+0xd4>)
   16b2c:	f240 23d9 	movw	r3, #729	; 0x2d9
   16b30:	4a05      	ldr	r2, [pc, #20]	; (16b48 <nrf_pwm_sequence_set+0xbc>)
   16b32:	4806      	ldr	r0, [pc, #24]	; (16b4c <nrf_pwm_sequence_set+0xc0>)
   16b34:	f005 f900 	bl	1bd38 <assert_print>
   16b38:	f240 21d9 	movw	r1, #729	; 0x2d9
   16b3c:	e7b1      	b.n	16aa2 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   16b3e:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
}
   16b42:	bd10      	pop	{r4, pc}
   16b44:	0002384c 	.word	0x0002384c
   16b48:	0002381a 	.word	0x0002381a
   16b4c:	000205a4 	.word	0x000205a4
   16b50:	00023861 	.word	0x00023861
   16b54:	00023879 	.word	0x00023879
   16b58:	00023885 	.word	0x00023885
   16b5c:	000238a3 	.word	0x000238a3
   16b60:	000238c4 	.word	0x000238c4

00016b64 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   16b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b68:	4604      	mov	r4, r0
    NRFX_ASSERT(p_config);
   16b6a:	460d      	mov	r5, r1
{
   16b6c:	b087      	sub	sp, #28
    NRFX_ASSERT(p_config);
   16b6e:	b949      	cbnz	r1, 16b84 <nrfx_pwm_init+0x20>
   16b70:	495b      	ldr	r1, [pc, #364]	; (16ce0 <nrfx_pwm_init+0x17c>)
   16b72:	485c      	ldr	r0, [pc, #368]	; (16ce4 <nrfx_pwm_init+0x180>)
   16b74:	238c      	movs	r3, #140	; 0x8c
   16b76:	4a5c      	ldr	r2, [pc, #368]	; (16ce8 <nrfx_pwm_init+0x184>)
   16b78:	f005 f8de 	bl	1bd38 <assert_print>
   16b7c:	218c      	movs	r1, #140	; 0x8c
   16b7e:	485a      	ldr	r0, [pc, #360]	; (16ce8 <nrfx_pwm_init+0x184>)
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   16b80:	f005 f8d3 	bl	1bd2a <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   16b84:	210c      	movs	r1, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   16b86:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   16b8a:	4e58      	ldr	r6, [pc, #352]	; (16cec <nrfx_pwm_init+0x188>)
   16b8c:	fb01 f108 	mul.w	r1, r1, r8
   16b90:	1870      	adds	r0, r6, r1
   16b92:	7a07      	ldrb	r7, [r0, #8]
   16b94:	2f00      	cmp	r7, #0
   16b96:	f040 80a0 	bne.w	16cda <nrfx_pwm_init+0x176>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   16b9a:	6043      	str	r3, [r0, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   16b9c:	7b2b      	ldrb	r3, [r5, #12]
    p_cb->handler = handler;
   16b9e:	5072      	str	r2, [r6, r1]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   16ba0:	7283      	strb	r3, [r0, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   16ba2:	b1c3      	cbz	r3, 16bd6 <nrfx_pwm_init+0x72>
   16ba4:	7b6b      	ldrb	r3, [r5, #13]
   16ba6:	b1b3      	cbz	r3, 16bd6 <nrfx_pwm_init+0x72>
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   16ba8:	2201      	movs	r2, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   16baa:	6823      	ldr	r3, [r4, #0]
   16bac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   16bb0:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    nrf_pwm_configure(p_instance->p_registers,
   16bb4:	6823      	ldr	r3, [r4, #0]
   16bb6:	2f00      	cmp	r7, #0
        p_config->base_clock, p_config->count_mode, p_config->top_value);
   16bb8:	7968      	ldrb	r0, [r5, #5]
   16bba:	79a9      	ldrb	r1, [r5, #6]
   16bbc:	892a      	ldrh	r2, [r5, #8]
   16bbe:	da54      	bge.n	16c6a <nrfx_pwm_init+0x106>
   16bc0:	494b      	ldr	r1, [pc, #300]	; (16cf0 <nrfx_pwm_init+0x18c>)
   16bc2:	4848      	ldr	r0, [pc, #288]	; (16ce4 <nrfx_pwm_init+0x180>)
   16bc4:	f240 23a5 	movw	r3, #677	; 0x2a5
   16bc8:	4a4a      	ldr	r2, [pc, #296]	; (16cf4 <nrfx_pwm_init+0x190>)
   16bca:	f005 f8b5 	bl	1bd38 <assert_print>
   16bce:	f240 21a5 	movw	r1, #677	; 0x2a5
   16bd2:	4848      	ldr	r0, [pc, #288]	; (16cf4 <nrfx_pwm_init+0x190>)
   16bd4:	e7d4      	b.n	16b80 <nrfx_pwm_init+0x1c>
   16bd6:	f105 39ff 	add.w	r9, r5, #4294967295
   16bda:	af02      	add	r7, sp, #8
   16bdc:	f105 0a03 	add.w	sl, r5, #3
        uint8_t output_pin = p_config->output_pins[i];
   16be0:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   16be4:	2aff      	cmp	r2, #255	; 0xff
   16be6:	d03c      	beq.n	16c62 <nrfx_pwm_init+0xfe>
            if (!p_config->skip_gpio_cfg)
   16be8:	7b29      	ldrb	r1, [r5, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   16bea:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
   16bee:	f8c7 b000 	str.w	fp, [r7]
            if (!p_config->skip_gpio_cfg)
   16bf2:	b9d1      	cbnz	r1, 16c2a <nrfx_pwm_init+0xc6>
    if (value == 0)
   16bf4:	0613      	lsls	r3, r2, #24
   16bf6:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16bfa:	a801      	add	r0, sp, #4
    if (value == 0)
   16bfc:	d42a      	bmi.n	16c54 <nrfx_pwm_init+0xf0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16bfe:	f7ff ff17 	bl	16a30 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16c02:	2201      	movs	r2, #1
   16c04:	9901      	ldr	r1, [sp, #4]
   16c06:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   16c08:	60c2      	str	r2, [r0, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16c0a:	a801      	add	r0, sp, #4
   16c0c:	f8cd b004 	str.w	fp, [sp, #4]
   16c10:	f7ff ff0e 	bl	16a30 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16c14:	9b01      	ldr	r3, [sp, #4]
   16c16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16c1a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   16c1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16c22:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   16c26:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   16c2a:	45ca      	cmp	sl, r9
   16c2c:	f107 0704 	add.w	r7, r7, #4
   16c30:	d1d6      	bne.n	16be0 <nrfx_pwm_init+0x7c>
    if (!p_config->skip_psel_cfg)
   16c32:	7b6b      	ldrb	r3, [r5, #13]
   16c34:	2b00      	cmp	r3, #0
   16c36:	d1b7      	bne.n	16ba8 <nrfx_pwm_init+0x44>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   16c38:	6823      	ldr	r3, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   16c3a:	9a02      	ldr	r2, [sp, #8]
   16c3c:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
   16c40:	9a03      	ldr	r2, [sp, #12]
   16c42:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   16c46:	9a04      	ldr	r2, [sp, #16]
   16c48:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
   16c4c:	9a05      	ldr	r2, [sp, #20]
   16c4e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   16c52:	e7a9      	b.n	16ba8 <nrfx_pwm_init+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16c54:	f7ff feec 	bl	16a30 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16c58:	2201      	movs	r2, #1
   16c5a:	9901      	ldr	r1, [sp, #4]
   16c5c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   16c5e:	6082      	str	r2, [r0, #8]
   16c60:	e7d3      	b.n	16c0a <nrfx_pwm_init+0xa6>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   16c62:	f04f 33ff 	mov.w	r3, #4294967295
   16c66:	603b      	str	r3, [r7, #0]
   16c68:	e7df      	b.n	16c2a <nrfx_pwm_init+0xc6>
    p_reg->PRESCALER  = base_clock;
   16c6a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
   16c6e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   16c72:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
   16c76:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   16c78:	896a      	ldrh	r2, [r5, #10]
   16c7a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->SHORTS = mask;
   16c7e:	2300      	movs	r3, #0
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   16c80:	6822      	ldr	r2, [r4, #0]
   16c82:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   16c86:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
   16c88:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   16c8c:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16c8e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
   16c92:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   16c96:	6822      	ldr	r2, [r4, #0]
   16c98:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
   16c9c:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   16ca0:	6822      	ldr	r2, [r4, #0]
   16ca2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   16ca6:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   16caa:	6822      	ldr	r2, [r4, #0]
   16cac:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   16cb0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   16cb4:	230c      	movs	r3, #12
   16cb6:	fb03 f308 	mul.w	r3, r3, r8
   16cba:	58f3      	ldr	r3, [r6, r3]
   16cbc:	b123      	cbz	r3, 16cc8 <nrfx_pwm_init+0x164>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   16cbe:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   16cc0:	f340 3007 	sbfx	r0, r0, #12, #8
   16cc4:	f7f5 ffec 	bl	cca0 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   16cc8:	230c      	movs	r3, #12
   16cca:	fb03 6608 	mla	r6, r3, r8, r6
   16cce:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   16cd0:	4809      	ldr	r0, [pc, #36]	; (16cf8 <nrfx_pwm_init+0x194>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   16cd2:	7233      	strb	r3, [r6, #8]
}
   16cd4:	b007      	add	sp, #28
   16cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
   16cda:	4808      	ldr	r0, [pc, #32]	; (16cfc <nrfx_pwm_init+0x198>)
   16cdc:	e7fa      	b.n	16cd4 <nrfx_pwm_init+0x170>
   16cde:	bf00      	nop
   16ce0:	000237e4 	.word	0x000237e4
   16ce4:	000205a4 	.word	0x000205a4
   16ce8:	000238e7 	.word	0x000238e7
   16cec:	20009b1c 	.word	0x20009b1c
   16cf0:	00023922 	.word	0x00023922
   16cf4:	0002381a 	.word	0x0002381a
   16cf8:	0bad0000 	.word	0x0bad0000
   16cfc:	0bad0005 	.word	0x0bad0005

00016d00 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   16d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d04:	4688      	mov	r8, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   16d06:	210c      	movs	r1, #12
{
   16d08:	4616      	mov	r6, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   16d0a:	7902      	ldrb	r2, [r0, #4]
{
   16d0c:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   16d0e:	4b30      	ldr	r3, [pc, #192]	; (16dd0 <nrfx_pwm_simple_playback+0xd0>)
   16d10:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   16d14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   16d18:	fb01 3302 	mla	r3, r1, r2, r3
   16d1c:	7a1b      	ldrb	r3, [r3, #8]
{
   16d1e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   16d20:	b95b      	cbnz	r3, 16d3a <nrfx_pwm_simple_playback+0x3a>
   16d22:	492c      	ldr	r1, [pc, #176]	; (16dd4 <nrfx_pwm_simple_playback+0xd4>)
   16d24:	f44f 7396 	mov.w	r3, #300	; 0x12c
   16d28:	4a2b      	ldr	r2, [pc, #172]	; (16dd8 <nrfx_pwm_simple_playback+0xd8>)
   16d2a:	482c      	ldr	r0, [pc, #176]	; (16ddc <nrfx_pwm_simple_playback+0xdc>)
   16d2c:	f005 f804 	bl	1bd38 <assert_print>
   16d30:	f44f 7196 	mov.w	r1, #300	; 0x12c
    NRFX_ASSERT(playback_count > 0);
   16d34:	4828      	ldr	r0, [pc, #160]	; (16dd8 <nrfx_pwm_simple_playback+0xd8>)
   16d36:	f004 fff8 	bl	1bd2a <assert_post_action>
   16d3a:	b94e      	cbnz	r6, 16d50 <nrfx_pwm_simple_playback+0x50>
   16d3c:	4928      	ldr	r1, [pc, #160]	; (16de0 <nrfx_pwm_simple_playback+0xe0>)
   16d3e:	f240 132d 	movw	r3, #301	; 0x12d
   16d42:	4a25      	ldr	r2, [pc, #148]	; (16dd8 <nrfx_pwm_simple_playback+0xd8>)
   16d44:	4825      	ldr	r0, [pc, #148]	; (16ddc <nrfx_pwm_simple_playback+0xdc>)
   16d46:	f004 fff7 	bl	1bd38 <assert_print>
   16d4a:	f240 112d 	movw	r1, #301	; 0x12d
   16d4e:	e7f1      	b.n	16d34 <nrfx_pwm_simple_playback+0x34>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   16d50:	f8d8 3000 	ldr.w	r3, [r8]
   16d54:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   16d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   16d5c:	d009      	beq.n	16d72 <nrfx_pwm_simple_playback+0x72>
   16d5e:	4921      	ldr	r1, [pc, #132]	; (16de4 <nrfx_pwm_simple_playback+0xe4>)
   16d60:	f44f 7397 	mov.w	r3, #302	; 0x12e
   16d64:	4a1c      	ldr	r2, [pc, #112]	; (16dd8 <nrfx_pwm_simple_playback+0xd8>)
   16d66:	481d      	ldr	r0, [pc, #116]	; (16ddc <nrfx_pwm_simple_playback+0xdc>)
   16d68:	f004 ffe6 	bl	1bd38 <assert_print>
   16d6c:	f44f 7197 	mov.w	r1, #302	; 0x12e
   16d70:	e7e0      	b.n	16d34 <nrfx_pwm_simple_playback+0x34>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   16d72:	4642      	mov	r2, r8
   16d74:	2100      	movs	r1, #0
   16d76:	6800      	ldr	r0, [r0, #0]
   16d78:	f7ff fe88 	bl	16a8c <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   16d7c:	4642      	mov	r2, r8
   16d7e:	2101      	movs	r1, #1
   16d80:	6820      	ldr	r0, [r4, #0]
   16d82:	f7ff fe83 	bl	16a8c <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   16d86:	6822      	ldr	r2, [r4, #0]
   16d88:	f006 0301 	and.w	r3, r6, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   16d8c:	eb03 0656 	add.w	r6, r3, r6, lsr #1
   16d90:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   16d94:	f015 0f01 	tst.w	r5, #1
   16d98:	6821      	ldr	r1, [r4, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   16d9a:	b2ea      	uxtb	r2, r5
    if (flags & NRFX_PWM_FLAG_STOP)
   16d9c:	d112      	bne.n	16dc4 <nrfx_pwm_simple_playback+0xc4>
    else if (flags & NRFX_PWM_FLAG_LOOP)
   16d9e:	f015 0502 	ands.w	r5, r5, #2
   16da2:	d010      	beq.n	16dc6 <nrfx_pwm_simple_playback+0xc6>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   16da4:	b94b      	cbnz	r3, 16dba <nrfx_pwm_simple_playback+0xba>
    p_reg->SHORTS = mask;
   16da6:	2304      	movs	r3, #4
   16da8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   16dac:	2308      	movs	r3, #8
   16dae:	4639      	mov	r1, r7
   16db0:	4620      	mov	r0, r4
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   16db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   16db6:	f007 bc67 	b.w	1e688 <start_playback>
   16dba:	2308      	movs	r3, #8
   16dbc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
   16dc0:	230c      	movs	r3, #12
   16dc2:	e7f4      	b.n	16dae <nrfx_pwm_simple_playback+0xae>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   16dc4:	2510      	movs	r5, #16
   16dc6:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   16dca:	2b00      	cmp	r3, #0
   16dcc:	d1f8      	bne.n	16dc0 <nrfx_pwm_simple_playback+0xc0>
   16dce:	e7ed      	b.n	16dac <nrfx_pwm_simple_playback+0xac>
   16dd0:	20009b1c 	.word	0x20009b1c
   16dd4:	00023943 	.word	0x00023943
   16dd8:	000238e7 	.word	0x000238e7
   16ddc:	000205a4 	.word	0x000205a4
   16de0:	0002396f 	.word	0x0002396f
   16de4:	00023982 	.word	0x00023982

00016de8 <nrfx_pwm_is_stopped>:


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   16de8:	210c      	movs	r1, #12
{
   16dea:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   16dec:	4a0f      	ldr	r2, [pc, #60]	; (16e2c <nrfx_pwm_is_stopped+0x44>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   16dee:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   16df0:	fb01 2203 	mla	r2, r1, r3, r2
   16df4:	7a13      	ldrb	r3, [r2, #8]
   16df6:	b95b      	cbnz	r3, 16e10 <nrfx_pwm_is_stopped+0x28>
   16df8:	490d      	ldr	r1, [pc, #52]	; (16e30 <nrfx_pwm_is_stopped+0x48>)
   16dfa:	480e      	ldr	r0, [pc, #56]	; (16e34 <nrfx_pwm_is_stopped+0x4c>)
   16dfc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   16e00:	4a0d      	ldr	r2, [pc, #52]	; (16e38 <nrfx_pwm_is_stopped+0x50>)
   16e02:	f004 ff99 	bl	1bd38 <assert_print>
   16e06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   16e0a:	480b      	ldr	r0, [pc, #44]	; (16e38 <nrfx_pwm_is_stopped+0x50>)
   16e0c:	f004 ff8d 	bl	1bd2a <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   16e10:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   16e12:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16e14:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   16e18:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   16e1a:	b919      	cbnz	r1, 16e24 <nrfx_pwm_is_stopped+0x3c>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   16e1c:	1e98      	subs	r0, r3, #2
   16e1e:	bf18      	it	ne
   16e20:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   16e22:	bd08      	pop	{r3, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   16e24:	2001      	movs	r0, #1
   16e26:	7210      	strb	r0, [r2, #8]
        ret_val = true;
   16e28:	e7fb      	b.n	16e22 <nrfx_pwm_is_stopped+0x3a>
   16e2a:	bf00      	nop
   16e2c:	20009b1c 	.word	0x20009b1c
   16e30:	00023943 	.word	0x00023943
   16e34:	000205a4 	.word	0x000205a4
   16e38:	000238e7 	.word	0x000238e7

00016e3c <nrfx_pwm_stop>:
{
   16e3c:	b538      	push	{r3, r4, r5, lr}
   16e3e:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   16e40:	210c      	movs	r1, #12
   16e42:	7902      	ldrb	r2, [r0, #4]
   16e44:	4b12      	ldr	r3, [pc, #72]	; (16e90 <nrfx_pwm_stop+0x54>)
{
   16e46:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   16e48:	fb01 3302 	mla	r3, r1, r2, r3
   16e4c:	7a1b      	ldrb	r3, [r3, #8]
   16e4e:	b95b      	cbnz	r3, 16e68 <nrfx_pwm_stop+0x2c>
   16e50:	4910      	ldr	r1, [pc, #64]	; (16e94 <nrfx_pwm_stop+0x58>)
   16e52:	4811      	ldr	r0, [pc, #68]	; (16e98 <nrfx_pwm_stop+0x5c>)
   16e54:	f240 1385 	movw	r3, #389	; 0x185
   16e58:	4a10      	ldr	r2, [pc, #64]	; (16e9c <nrfx_pwm_stop+0x60>)
   16e5a:	f004 ff6d 	bl	1bd38 <assert_print>
   16e5e:	f240 1185 	movw	r1, #389	; 0x185
   16e62:	480e      	ldr	r0, [pc, #56]	; (16e9c <nrfx_pwm_stop+0x60>)
   16e64:	f004 ff61 	bl	1bd2a <assert_post_action>
    p_reg->SHORTS = mask;
   16e68:	2200      	movs	r2, #0
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   16e6a:	6803      	ldr	r3, [r0, #0]
   16e6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e70:	2201      	movs	r2, #1
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   16e72:	6803      	ldr	r3, [r0, #0]
   16e74:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   16e76:	f7ff ffb7 	bl	16de8 <nrfx_pwm_is_stopped>
   16e7a:	b938      	cbnz	r0, 16e8c <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
   16e7c:	4620      	mov	r0, r4
   16e7e:	f7ff ffb3 	bl	16de8 <nrfx_pwm_is_stopped>
   16e82:	b918      	cbnz	r0, 16e8c <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
   16e84:	2d00      	cmp	r5, #0
   16e86:	d1f9      	bne.n	16e7c <nrfx_pwm_stop+0x40>
}
   16e88:	4628      	mov	r0, r5
   16e8a:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
   16e8c:	2501      	movs	r5, #1
   16e8e:	e7fb      	b.n	16e88 <nrfx_pwm_stop+0x4c>
   16e90:	20009b1c 	.word	0x20009b1c
   16e94:	000239ab 	.word	0x000239ab
   16e98:	000205a4 	.word	0x000205a4
   16e9c:	000238e7 	.word	0x000238e7

00016ea0 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   16ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ea4:	460e      	mov	r6, r1
   16ea6:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16ea8:	4d0c      	ldr	r5, [pc, #48]	; (16edc <metal_generic_dev_open+0x3c>)
   16eaa:	f855 4f18 	ldr.w	r4, [r5, #24]!
   16eae:	42ac      	cmp	r4, r5
   16eb0:	d103      	bne.n	16eba <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   16eb2:	f06f 0012 	mvn.w	r0, #18
   16eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   16eba:	4631      	mov	r1, r6
   16ebc:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   16ec0:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   16ec4:	f005 ff18 	bl	1ccf8 <strcmp>
   16ec8:	b930      	cbnz	r0, 16ed8 <metal_generic_dev_open+0x38>
			*device = dev;
   16eca:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   16ece:	4640      	mov	r0, r8
}
   16ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   16ed4:	f007 bcf7 	b.w	1e8c6 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16ed8:	6824      	ldr	r4, [r4, #0]
   16eda:	e7e8      	b.n	16eae <metal_generic_dev_open+0xe>
   16edc:	20009b28 	.word	0x20009b28

00016ee0 <metal_bus_unregister>:
{
   16ee0:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   16ee2:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   16ee6:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   16ee8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   16eea:	f100 0324 	add.w	r3, r0, #36	; 0x24
   16eee:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   16ef0:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   16ef4:	6843      	ldr	r3, [r0, #4]
{
   16ef6:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   16ef8:	b103      	cbz	r3, 16efc <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   16efa:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   16efc:	4b05      	ldr	r3, [pc, #20]	; (16f14 <metal_bus_unregister+0x34>)
   16efe:	781a      	ldrb	r2, [r3, #0]
   16f00:	2a06      	cmp	r2, #6
   16f02:	d905      	bls.n	16f10 <metal_bus_unregister+0x30>
   16f04:	685b      	ldr	r3, [r3, #4]
   16f06:	b11b      	cbz	r3, 16f10 <metal_bus_unregister+0x30>
   16f08:	2007      	movs	r0, #7
   16f0a:	6822      	ldr	r2, [r4, #0]
   16f0c:	4902      	ldr	r1, [pc, #8]	; (16f18 <metal_bus_unregister+0x38>)
   16f0e:	4798      	blx	r3
}
   16f10:	2000      	movs	r0, #0
   16f12:	bd10      	pop	{r4, pc}
   16f14:	20009b28 	.word	0x20009b28
   16f18:	000239f0 	.word	0x000239f0

00016f1c <metal_bus_find>:
{
   16f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f20:	4607      	mov	r7, r0
   16f22:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   16f24:	4e0b      	ldr	r6, [pc, #44]	; (16f54 <metal_bus_find+0x38>)
   16f26:	f856 4f08 	ldr.w	r4, [r6, #8]!
   16f2a:	42b4      	cmp	r4, r6
   16f2c:	d102      	bne.n	16f34 <metal_bus_find+0x18>
	return -ENOENT;
   16f2e:	f06f 0001 	mvn.w	r0, #1
   16f32:	e00a      	b.n	16f4a <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   16f34:	4639      	mov	r1, r7
   16f36:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   16f3a:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   16f3e:	f005 fedb 	bl	1ccf8 <strcmp>
   16f42:	b920      	cbnz	r0, 16f4e <metal_bus_find+0x32>
   16f44:	b11d      	cbz	r5, 16f4e <metal_bus_find+0x32>
			*result = bus;
   16f46:	f8c5 8000 	str.w	r8, [r5]
}
   16f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   16f4e:	6824      	ldr	r4, [r4, #0]
   16f50:	e7eb      	b.n	16f2a <metal_bus_find+0xe>
   16f52:	bf00      	nop
   16f54:	20009b28 	.word	0x20009b28

00016f58 <metal_bus_register>:
{
   16f58:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   16f5a:	4604      	mov	r4, r0
   16f5c:	b910      	cbnz	r0, 16f64 <metal_bus_register+0xc>
		return -EINVAL;
   16f5e:	f06f 0015 	mvn.w	r0, #21
}
   16f62:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   16f64:	6800      	ldr	r0, [r0, #0]
   16f66:	2800      	cmp	r0, #0
   16f68:	d0f9      	beq.n	16f5e <metal_bus_register+0x6>
   16f6a:	f005 feb5 	bl	1ccd8 <strlen>
   16f6e:	2800      	cmp	r0, #0
   16f70:	d0f5      	beq.n	16f5e <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   16f72:	2100      	movs	r1, #0
   16f74:	6820      	ldr	r0, [r4, #0]
   16f76:	f7ff ffd1 	bl	16f1c <metal_bus_find>
   16f7a:	b1c8      	cbz	r0, 16fb0 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   16f7c:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   16f80:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   16f84:	4b0c      	ldr	r3, [pc, #48]	; (16fb8 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   16f86:	f104 0224 	add.w	r2, r4, #36	; 0x24
   16f8a:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   16f8c:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   16f90:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   16f92:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   16f94:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   16f96:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   16f98:	781a      	ldrb	r2, [r3, #0]
   16f9a:	2a06      	cmp	r2, #6
   16f9c:	d901      	bls.n	16fa2 <metal_bus_register+0x4a>
   16f9e:	685b      	ldr	r3, [r3, #4]
   16fa0:	b90b      	cbnz	r3, 16fa6 <metal_bus_register+0x4e>
	return 0;
   16fa2:	2000      	movs	r0, #0
   16fa4:	e7dd      	b.n	16f62 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   16fa6:	2007      	movs	r0, #7
   16fa8:	6822      	ldr	r2, [r4, #0]
   16faa:	4904      	ldr	r1, [pc, #16]	; (16fbc <metal_bus_register+0x64>)
   16fac:	4798      	blx	r3
   16fae:	e7f8      	b.n	16fa2 <metal_bus_register+0x4a>
		return -EEXIST;
   16fb0:	f06f 0010 	mvn.w	r0, #16
   16fb4:	e7d5      	b.n	16f62 <metal_bus_register+0xa>
   16fb6:	bf00      	nop
   16fb8:	20009b28 	.word	0x20009b28
   16fbc:	000239f2 	.word	0x000239f2

00016fc0 <metal_device_close>:
	metal_assert(device && device->bus);
   16fc0:	4601      	mov	r1, r0
{
   16fc2:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   16fc4:	b108      	cbz	r0, 16fca <metal_device_close+0xa>
   16fc6:	6840      	ldr	r0, [r0, #4]
   16fc8:	b948      	cbnz	r0, 16fde <metal_device_close+0x1e>
   16fca:	4908      	ldr	r1, [pc, #32]	; (16fec <metal_device_close+0x2c>)
   16fcc:	4808      	ldr	r0, [pc, #32]	; (16ff0 <metal_device_close+0x30>)
   16fce:	2351      	movs	r3, #81	; 0x51
   16fd0:	4a08      	ldr	r2, [pc, #32]	; (16ff4 <metal_device_close+0x34>)
   16fd2:	f004 feb1 	bl	1bd38 <assert_print>
   16fd6:	2151      	movs	r1, #81	; 0x51
   16fd8:	4806      	ldr	r0, [pc, #24]	; (16ff4 <metal_device_close+0x34>)
   16fda:	f004 fea6 	bl	1bd2a <assert_post_action>
	if (device->bus->ops.dev_close)
   16fde:	68c3      	ldr	r3, [r0, #12]
   16fe0:	b113      	cbz	r3, 16fe8 <metal_device_close+0x28>
}
   16fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   16fe6:	4718      	bx	r3
}
   16fe8:	bd10      	pop	{r4, pc}
   16fea:	bf00      	nop
   16fec:	00023a3c 	.word	0x00023a3c
   16ff0:	000205a4 	.word	0x000205a4
   16ff4:	00023a05 	.word	0x00023a05

00016ff8 <metal_register_generic_device>:
{
   16ff8:	b510      	push	{r4, lr}
   16ffa:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   16ffc:	6800      	ldr	r0, [r0, #0]
   16ffe:	b910      	cbnz	r0, 17006 <metal_register_generic_device+0xe>
		return -EINVAL;
   17000:	f06f 0015 	mvn.w	r0, #21
}
   17004:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   17006:	f005 fe67 	bl	1ccd8 <strlen>
   1700a:	2800      	cmp	r0, #0
   1700c:	d0f8      	beq.n	17000 <metal_register_generic_device+0x8>
   1700e:	68a3      	ldr	r3, [r4, #8]
   17010:	2b01      	cmp	r3, #1
   17012:	d8f5      	bhi.n	17000 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   17014:	4b06      	ldr	r3, [pc, #24]	; (17030 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   17016:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1701a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1701c:	4b05      	ldr	r3, [pc, #20]	; (17034 <metal_register_generic_device+0x3c>)
   1701e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   17020:	f103 0018 	add.w	r0, r3, #24
   17024:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   17026:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   17028:	61d9      	str	r1, [r3, #28]
	return 0;
   1702a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1702c:	6011      	str	r1, [r2, #0]
}
   1702e:	e7e9      	b.n	17004 <metal_register_generic_device+0xc>
   17030:	20008348 	.word	0x20008348
   17034:	20009b28 	.word	0x20009b28

00017038 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   17038:	b538      	push	{r3, r4, r5, lr}
   1703a:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1703c:	4c0d      	ldr	r4, [pc, #52]	; (17074 <metal_init+0x3c>)
   1703e:	2220      	movs	r2, #32
   17040:	4620      	mov	r0, r4
   17042:	2100      	movs	r1, #0
   17044:	f005 fe92 	bl	1cd6c <memset>

	_metal.common.log_handler   = params->log_handler;
   17048:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1704a:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   1704c:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   1704e:	4623      	mov	r3, r4
   17050:	792a      	ldrb	r2, [r5, #4]
   17052:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   17056:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   1705a:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   1705e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   17062:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   17066:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   1706a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   1706e:	f000 b80f 	b.w	17090 <metal_sys_init>
   17072:	bf00      	nop
   17074:	20009b28 	.word	0x20009b28

00017078 <metal_finish>:

void metal_finish(void)
{
   17078:	b508      	push	{r3, lr}
	metal_sys_finish();
   1707a:	f000 f811 	bl	170a0 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1707e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   17082:	2220      	movs	r2, #32
   17084:	2100      	movs	r1, #0
   17086:	4801      	ldr	r0, [pc, #4]	; (1708c <metal_finish+0x14>)
   17088:	f005 be70 	b.w	1cd6c <memset>
   1708c:	20009b28 	.word	0x20009b28

00017090 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17090:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   17092:	4802      	ldr	r0, [pc, #8]	; (1709c <metal_sys_init+0xc>)
   17094:	f7ff ff60 	bl	16f58 <metal_bus_register>
	return 0;
}
   17098:	2000      	movs	r0, #0
   1709a:	bd08      	pop	{r3, pc}
   1709c:	20008348 	.word	0x20008348

000170a0 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   170a0:	4801      	ldr	r0, [pc, #4]	; (170a8 <metal_sys_finish+0x8>)
   170a2:	f7ff bf1d 	b.w	16ee0 <metal_bus_unregister>
   170a6:	bf00      	nop
   170a8:	20008348 	.word	0x20008348

000170ac <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   170ac:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   170ae:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   170b0:	2b06      	cmp	r3, #6
{
   170b2:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   170b4:	bf88      	it	hi
   170b6:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   170b8:	4b09      	ldr	r3, [pc, #36]	; (170e0 <metal_zephyr_log_handler+0x34>)
{
   170ba:	ac05      	add	r4, sp, #20
   170bc:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   170c0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   170c4:	4807      	ldr	r0, [pc, #28]	; (170e4 <metal_zephyr_log_handler+0x38>)
   170c6:	f004 fc2f 	bl	1b928 <printk>

	va_start(args, format);
	vprintk(format, args);
   170ca:	4621      	mov	r1, r4
   170cc:	4628      	mov	r0, r5
	va_start(args, format);
   170ce:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   170d0:	f7f2 fc62 	bl	9998 <vprintk>
	va_end(args);
}
   170d4:	b002      	add	sp, #8
   170d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   170da:	b003      	add	sp, #12
   170dc:	4770      	bx	lr
   170de:	bf00      	nop
   170e0:	00020170 	.word	0x00020170
   170e4:	000203d6 	.word	0x000203d6

000170e8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   170e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170ec:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   170ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   170f0:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   170f2:	4293      	cmp	r3, r2
{
   170f4:	4617      	mov	r7, r2
   170f6:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   170f8:	d341      	bcc.n	1717e <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   170fa:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   170fc:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   17100:	42bd      	cmp	r5, r7
   17102:	d103      	bne.n	1710c <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   17104:	2000      	movs	r0, #0
}
   17106:	b007      	add	sp, #28
   17108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1710c:	fb0b f805 	mul.w	r8, fp, r5
   17110:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   17114:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   17116:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1711a:	1d23      	adds	r3, r4, #4
   1711c:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1711e:	b9ca      	cbnz	r2, 17154 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   17120:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   17122:	6861      	ldr	r1, [r4, #4]
   17124:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   17126:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1712a:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1712c:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1712e:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   17132:	1e5c      	subs	r4, r3, #1
   17134:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   17138:	425b      	negs	r3, r3
   1713a:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1713e:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   17140:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   17144:	6884      	ldr	r4, [r0, #8]
   17146:	3306      	adds	r3, #6
   17148:	42a1      	cmp	r1, r4
   1714a:	bf28      	it	cs
   1714c:	f04f 31ff 	movcs.w	r1, #4294967295
   17150:	f007 fb85 	bl	1e85e <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   17154:	f859 3008 	ldr.w	r3, [r9, r8]
   17158:	4630      	mov	r0, r6
   1715a:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   1715c:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1715e:	b2a9      	uxth	r1, r5
   17160:	6a1b      	ldr	r3, [r3, #32]
   17162:	9301      	str	r3, [sp, #4]
   17164:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17166:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1716a:	9300      	str	r3, [sp, #0]
   1716c:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   17170:	9b05      	ldr	r3, [sp, #20]
   17172:	f007 fbc6 	bl	1e902 <virtqueue_create>
		if (ret)
   17176:	2800      	cmp	r0, #0
   17178:	d1c5      	bne.n	17106 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1717a:	3501      	adds	r5, #1
   1717c:	e7c0      	b.n	17100 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1717e:	4801      	ldr	r0, [pc, #4]	; (17184 <virtio_create_virtqueues+0x9c>)
   17180:	e7c1      	b.n	17106 <virtio_create_virtqueues+0x1e>
   17182:	bf00      	nop
   17184:	fffff440 	.word	0xfffff440

00017188 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   17188:	b510      	push	{r4, lr}
	if (vq) {
   1718a:	4604      	mov	r4, r0
   1718c:	b190      	cbz	r0, 171b4 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1718e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   17190:	8943      	ldrh	r3, [r0, #10]
   17192:	429a      	cmp	r2, r3
   17194:	d009      	beq.n	171aa <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   17196:	4b08      	ldr	r3, [pc, #32]	; (171b8 <virtqueue_free+0x30>)
   17198:	781a      	ldrb	r2, [r3, #0]
   1719a:	2a03      	cmp	r2, #3
   1719c:	d905      	bls.n	171aa <virtqueue_free+0x22>
   1719e:	685b      	ldr	r3, [r3, #4]
   171a0:	b11b      	cbz	r3, 171aa <virtqueue_free+0x22>
   171a2:	6842      	ldr	r2, [r0, #4]
   171a4:	4905      	ldr	r1, [pc, #20]	; (171bc <virtqueue_free+0x34>)
   171a6:	2004      	movs	r0, #4
   171a8:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   171aa:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   171ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171b0:	f008 b935 	b.w	1f41e <k_free>
   171b4:	bd10      	pop	{r4, pc}
   171b6:	bf00      	nop
   171b8:	20009b28 	.word	0x20009b28
   171bc:	00023aea 	.word	0x00023aea

000171c0 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   171c0:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   171c2:	8944      	ldrh	r4, [r0, #10]
   171c4:	428c      	cmp	r4, r1
   171c6:	d312      	bcc.n	171ee <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   171c8:	6a03      	ldr	r3, [r0, #32]
   171ca:	3c01      	subs	r4, #1
   171cc:	885d      	ldrh	r5, [r3, #2]
   171ce:	402c      	ands	r4, r5
   171d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   171d4:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   171d6:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   171d8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   171dc:	6a02      	ldr	r2, [r0, #32]
   171de:	8853      	ldrh	r3, [r2, #2]
   171e0:	3301      	adds	r3, #1
   171e2:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   171e4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   171e6:	3301      	adds	r3, #1
   171e8:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   171ea:	2000      	movs	r0, #0
}
   171ec:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   171ee:	4801      	ldr	r0, [pc, #4]	; (171f4 <virtqueue_add_consumed_buffer+0x34>)
   171f0:	e7fc      	b.n	171ec <virtqueue_add_consumed_buffer+0x2c>
   171f2:	bf00      	nop
   171f4:	fffff441 	.word	0xfffff441

000171f8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   171f8:	b430      	push	{r4, r5}
   171fa:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   171fc:	b148      	cbz	r0, 17212 <rpmsg_send_offchannel_raw+0x1a>
   171fe:	6a00      	ldr	r0, [r0, #32]
   17200:	b138      	cbz	r0, 17212 <rpmsg_send_offchannel_raw+0x1a>
   17202:	b133      	cbz	r3, 17212 <rpmsg_send_offchannel_raw+0x1a>
   17204:	3401      	adds	r4, #1
   17206:	d004      	beq.n	17212 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   17208:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1720a:	b114      	cbz	r4, 17212 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1720c:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   1720e:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   17210:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   17212:	4801      	ldr	r0, [pc, #4]	; (17218 <rpmsg_send_offchannel_raw+0x20>)
}
   17214:	bc30      	pop	{r4, r5}
   17216:	4770      	bx	lr
   17218:	fffff82d 	.word	0xfffff82d

0001721c <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   1721c:	b430      	push	{r4, r5}
   1721e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   17220:	b150      	cbz	r0, 17238 <rpmsg_send_offchannel_nocopy+0x1c>
   17222:	6a00      	ldr	r0, [r0, #32]
   17224:	b140      	cbz	r0, 17238 <rpmsg_send_offchannel_nocopy+0x1c>
   17226:	b13b      	cbz	r3, 17238 <rpmsg_send_offchannel_nocopy+0x1c>
   17228:	3401      	adds	r4, #1
   1722a:	d005      	beq.n	17238 <rpmsg_send_offchannel_nocopy+0x1c>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1722c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
   17230:	b114      	cbz	r4, 17238 <rpmsg_send_offchannel_nocopy+0x1c>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   17232:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   17234:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   17236:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   17238:	4801      	ldr	r0, [pc, #4]	; (17240 <rpmsg_send_offchannel_nocopy+0x24>)
}
   1723a:	bc30      	pop	{r4, r5}
   1723c:	4770      	bx	lr
   1723e:	bf00      	nop
   17240:	fffff82d 	.word	0xfffff82d

00017244 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   17244:	b570      	push	{r4, r5, r6, lr}
   17246:	460c      	mov	r4, r1
   17248:	4611      	mov	r1, r2
   1724a:	4605      	mov	r5, r0
   1724c:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1724e:	4b0c      	ldr	r3, [pc, #48]	; (17280 <rpmsg_register_endpoint+0x3c>)
   17250:	2220      	movs	r2, #32
   17252:	2900      	cmp	r1, #0
   17254:	bf08      	it	eq
   17256:	4619      	moveq	r1, r3
   17258:	4620      	mov	r0, r4
   1725a:	f005 fd29 	bl	1ccb0 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   1725e:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   17260:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   17262:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   17264:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   17266:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   17268:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1726a:	9b06      	ldr	r3, [sp, #24]
   1726c:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1726e:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   17270:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   17274:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   17278:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1727a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1727c:	6013      	str	r3, [r2, #0]
}
   1727e:	bd70      	pop	{r4, r5, r6, pc}
   17280:	00022c5a 	.word	0x00022c5a

00017284 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   17284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17288:	460e      	mov	r6, r1
   1728a:	4691      	mov	r9, r2
   1728c:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   1728e:	4605      	mov	r5, r0
{
   17290:	b085      	sub	sp, #20
	if (!ept)
   17292:	2800      	cmp	r0, #0
   17294:	d068      	beq.n	17368 <rpmsg_create_ept+0xe4>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   17296:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1729a:	4640      	mov	r0, r8
   1729c:	f007 fcca 	bl	1ec34 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   172a0:	1c78      	adds	r0, r7, #1
   172a2:	d141      	bne.n	17328 <rpmsg_create_ept+0xa4>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   172a4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
   172a6:	f106 0348 	add.w	r3, r6, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   172aa:	f014 0401 	ands.w	r4, r4, #1
   172ae:	d00b      	beq.n	172c8 <rpmsg_create_ept+0x44>
	for (bit = start;
   172b0:	2400      	movs	r4, #0
	     bit++)
   172b2:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   172b4:	2c80      	cmp	r4, #128	; 0x80
   172b6:	d055      	beq.n	17364 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   172b8:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   172ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   172be:	f004 011f 	and.w	r1, r4, #31
   172c2:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   172c4:	07d1      	lsls	r1, r2, #31
   172c6:	d4f4      	bmi.n	172b2 <rpmsg_create_ept+0x2e>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   172c8:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   172ca:	0960      	lsrs	r0, r4, #5
   172cc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   172d0:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   172d4:	f004 041f 	and.w	r4, r4, #31
   172d8:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   172da:	430a      	orrs	r2, r1
   172dc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   172e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   172e2:	464a      	mov	r2, r9
   172e4:	9302      	str	r3, [sp, #8]
   172e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   172e8:	4629      	mov	r1, r5
   172ea:	9301      	str	r3, [sp, #4]
   172ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   172ee:	4630      	mov	r0, r6
   172f0:	9300      	str	r3, [sp, #0]
   172f2:	463b      	mov	r3, r7
   172f4:	f7ff ffa6 	bl	17244 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   172f8:	4640      	mov	r0, r8
   172fa:	f001 fa71 	bl	187e0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   172fe:	782c      	ldrb	r4, [r5, #0]
   17300:	b174      	cbz	r4, 17320 <rpmsg_create_ept+0x9c>
   17302:	f896 4088 	ldrb.w	r4, [r6, #136]	; 0x88
   17306:	b15c      	cbz	r4, 17320 <rpmsg_create_ept+0x9c>
   17308:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1730a:	3301      	adds	r3, #1
   1730c:	d12e      	bne.n	1736c <rpmsg_create_ept+0xe8>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1730e:	2100      	movs	r1, #0
   17310:	4628      	mov	r0, r5
   17312:	f007 fcbe 	bl	1ec92 <rpmsg_send_ns_message>

	if (status)
   17316:	4604      	mov	r4, r0
   17318:	b110      	cbz	r0, 17320 <rpmsg_create_ept+0x9c>
		rpmsg_unregister_endpoint(ept);
   1731a:	4628      	mov	r0, r5
   1731c:	f007 fc90 	bl	1ec40 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   17320:	4620      	mov	r0, r4
   17322:	b005      	add	sp, #20
   17324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   17328:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1732c:	d3d8      	bcc.n	172e0 <rpmsg_create_ept+0x5c>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1732e:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   17332:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   17334:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   17338:	d80f      	bhi.n	1735a <rpmsg_create_ept+0xd6>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1733a:	0958      	lsrs	r0, r3, #5
   1733c:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   17340:	f003 031f 	and.w	r3, r3, #31
   17344:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   17348:	07d2      	lsls	r2, r2, #31
   1734a:	d40b      	bmi.n	17364 <rpmsg_create_ept+0xe0>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1734c:	2201      	movs	r2, #1
   1734e:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   17352:	4323      	orrs	r3, r4
   17354:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   17358:	e7c2      	b.n	172e0 <rpmsg_create_ept+0x5c>
   1735a:	4c05      	ldr	r4, [pc, #20]	; (17370 <rpmsg_create_ept+0xec>)
   1735c:	4640      	mov	r0, r8
   1735e:	f001 fa3f 	bl	187e0 <z_impl_k_sem_give>
}
   17362:	e7dd      	b.n	17320 <rpmsg_create_ept+0x9c>
			status = RPMSG_ERR_ADDR;
   17364:	4c03      	ldr	r4, [pc, #12]	; (17374 <rpmsg_create_ept+0xf0>)
   17366:	e7f9      	b.n	1735c <rpmsg_create_ept+0xd8>
		return RPMSG_ERR_PARAM;
   17368:	4c01      	ldr	r4, [pc, #4]	; (17370 <rpmsg_create_ept+0xec>)
   1736a:	e7d9      	b.n	17320 <rpmsg_create_ept+0x9c>
   1736c:	2400      	movs	r4, #0
   1736e:	e7d7      	b.n	17320 <rpmsg_create_ept+0x9c>
   17370:	fffff82d 	.word	0xfffff82d
   17374:	fffff829 	.word	0xfffff829

00017378 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   17378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   1737c:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   17380:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   17384:	2300      	movs	r3, #0
{
   17386:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   17388:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1738a:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1738e:	2310      	movs	r3, #16
	rp_hdr.src = src;
   17390:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   17394:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17396:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   17398:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	rp_hdr.len = len;
   1739c:	f8ad 501c 	strh.w	r5, [sp, #28]
   173a0:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   173a2:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   173a4:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   173a8:	42b1      	cmp	r1, r6
   173aa:	bf28      	it	cs
   173ac:	f04f 31ff 	movcs.w	r1, #4294967295
   173b0:	eb0d 0203 	add.w	r2, sp, r3
   173b4:	f007 fa19 	bl	1e7ea <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   173b8:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   173ba:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   173bc:	d00b      	beq.n	173d6 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   173be:	4924      	ldr	r1, [pc, #144]	; (17450 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   173c0:	f240 138b 	movw	r3, #395	; 0x18b
   173c4:	4a23      	ldr	r2, [pc, #140]	; (17454 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   173c6:	4824      	ldr	r0, [pc, #144]	; (17458 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   173c8:	f004 fcb6 	bl	1bd38 <assert_print>
   173cc:	f240 118b 	movw	r1, #395	; 0x18b
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   173d0:	4820      	ldr	r0, [pc, #128]	; (17454 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   173d2:	f004 fcaa 	bl	1bd2a <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   173d6:	f104 0658 	add.w	r6, r4, #88	; 0x58
   173da:	4630      	mov	r0, r6
   173dc:	f007 fce8 	bl	1edb0 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   173e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   173e4:	699b      	ldr	r3, [r3, #24]
   173e6:	b9d3      	cbnz	r3, 1741e <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   173e8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   173ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   173f0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   173f4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   173f6:	b9cb      	cbnz	r3, 1742c <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   173f8:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   173fc:	f8cd 8000 	str.w	r8, [sp]
   17400:	2201      	movs	r2, #1
   17402:	a902      	add	r1, sp, #8
   17404:	f007 faaa 	bl	1e95c <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   17408:	b1b0      	cbz	r0, 17438 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   1740a:	4914      	ldr	r1, [pc, #80]	; (1745c <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   1740c:	f44f 73cc 	mov.w	r3, #408	; 0x198
   17410:	4a10      	ldr	r2, [pc, #64]	; (17454 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   17412:	4811      	ldr	r0, [pc, #68]	; (17458 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   17414:	f004 fc90 	bl	1bd38 <assert_print>
   17418:	f44f 71cc 	mov.w	r1, #408	; 0x198
   1741c:	e7d8      	b.n	173d0 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1741e:	4639      	mov	r1, r7
   17420:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   17424:	f007 fb30 	bl	1ea88 <virtqueue_get_buffer_length>
   17428:	4602      	mov	r2, r0
   1742a:	e7df      	b.n	173ec <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   1742c:	2b01      	cmp	r3, #1
   1742e:	d103      	bne.n	17438 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   17430:	4639      	mov	r1, r7
   17432:	f7ff fec5 	bl	171c0 <virtqueue_add_consumed_buffer>
   17436:	e7e7      	b.n	17408 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   17438:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1743c:	f007 fbab 	bl	1eb96 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   17440:	4630      	mov	r0, r6
   17442:	f007 fcb3 	bl	1edac <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   17446:	4628      	mov	r0, r5
   17448:	b008      	add	sp, #32
   1744a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1744e:	bf00      	nop
   17450:	00023b4f 	.word	0x00023b4f
   17454:	00023b0c 	.word	0x00023b0c
   17458:	000205a4 	.word	0x000205a4
   1745c:	00023b68 	.word	0x00023b68

00017460 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   17460:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   17464:	6803      	ldr	r3, [r0, #0]
   17466:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   17468:	f107 0658 	add.w	r6, r7, #88	; 0x58
   1746c:	4630      	mov	r0, r6
   1746e:	f007 fc9f 	bl	1edb0 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   17472:	4638      	mov	r0, r7
   17474:	f10d 020a 	add.w	r2, sp, #10
   17478:	a903      	add	r1, sp, #12
   1747a:	f007 fce7 	bl	1ee4c <rpmsg_virtio_get_rx_buffer>
   1747e:	4604      	mov	r4, r0
   17480:	4630      	mov	r0, r6
   17482:	f007 fc93 	bl	1edac <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   17486:	2c00      	cmp	r4, #0
   17488:	d04f      	beq.n	1752a <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1748a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1748e:	4630      	mov	r0, r6
   17490:	60a3      	str	r3, [r4, #8]
   17492:	f007 fc8d 	bl	1edb0 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   17496:	f04f 33ff 	mov.w	r3, #4294967295
   1749a:	2100      	movs	r1, #0
   1749c:	4638      	mov	r0, r7
   1749e:	6862      	ldr	r2, [r4, #4]
   174a0:	f007 fc2a 	bl	1ecf8 <rpmsg_get_endpoint>
   174a4:	4605      	mov	r5, r0
   174a6:	4630      	mov	r0, r6
   174a8:	f007 fc80 	bl	1edac <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   174ac:	b1ed      	cbz	r5, 174ea <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   174ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   174b0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   174b2:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   174b4:	bf08      	it	eq
   174b6:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   174b8:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   174ba:	bf08      	it	eq
   174bc:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   174be:	6823      	ldr	r3, [r4, #0]
   174c0:	89a2      	ldrh	r2, [r4, #12]
   174c2:	9100      	str	r1, [sp, #0]
   174c4:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   174c8:	f104 0110 	add.w	r1, r4, #16
   174cc:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   174ce:	2800      	cmp	r0, #0
   174d0:	da0b      	bge.n	174ea <rpmsg_virtio_rx_callback+0x8a>
   174d2:	4917      	ldr	r1, [pc, #92]	; (17530 <rpmsg_virtio_rx_callback+0xd0>)
   174d4:	4817      	ldr	r0, [pc, #92]	; (17534 <rpmsg_virtio_rx_callback+0xd4>)
   174d6:	f44f 7302 	mov.w	r3, #520	; 0x208
   174da:	4a17      	ldr	r2, [pc, #92]	; (17538 <rpmsg_virtio_rx_callback+0xd8>)
   174dc:	f004 fc2c 	bl	1bd38 <assert_print>
   174e0:	f44f 7102 	mov.w	r1, #520	; 0x208
   174e4:	4814      	ldr	r0, [pc, #80]	; (17538 <rpmsg_virtio_rx_callback+0xd8>)
   174e6:	f004 fc20 	bl	1bd2a <assert_post_action>
   174ea:	4630      	mov	r0, r6
   174ec:	f007 fc60 	bl	1edb0 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   174f0:	68a3      	ldr	r3, [r4, #8]
   174f2:	2b00      	cmp	r3, #0
   174f4:	db06      	blt.n	17504 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   174f6:	4621      	mov	r1, r4
   174f8:	4638      	mov	r0, r7
   174fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   174fe:	9a03      	ldr	r2, [sp, #12]
   17500:	f007 fcbb 	bl	1ee7a <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   17504:	4638      	mov	r0, r7
   17506:	f10d 020a 	add.w	r2, sp, #10
   1750a:	a903      	add	r1, sp, #12
   1750c:	f007 fc9e 	bl	1ee4c <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   17510:	4604      	mov	r4, r0
   17512:	b118      	cbz	r0, 1751c <rpmsg_virtio_rx_callback+0xbc>
   17514:	4630      	mov	r0, r6
   17516:	f007 fc49 	bl	1edac <k_sem_give>
	while (rp_hdr) {
   1751a:	e7b6      	b.n	1748a <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   1751c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   17520:	f007 fb39 	bl	1eb96 <virtqueue_kick>
   17524:	4630      	mov	r0, r6
   17526:	f007 fc41 	bl	1edac <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   1752a:	b004      	add	sp, #16
   1752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17530:	00023b74 	.word	0x00023b74
   17534:	000205a4 	.word	0x000205a4
   17538:	00023b0c 	.word	0x00023b0c

0001753c <rpmsg_virtio_send_offchannel_raw>:
{
   1753c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17540:	b085      	sub	sp, #20
   17542:	460f      	mov	r7, r1
   17544:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   17546:	a903      	add	r1, sp, #12
   17548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1754a:	4606      	mov	r6, r0
   1754c:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1754e:	f007 fcda 	bl	1ef06 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   17552:	4604      	mov	r4, r0
   17554:	b350      	cbz	r0, 175ac <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   17556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   17558:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1755a:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
   1755e:	429d      	cmp	r5, r3
   17560:	bfa8      	it	ge
   17562:	461d      	movge	r5, r3
   17564:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   17566:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1756a:	1a61      	subs	r1, r4, r1
   1756c:	4561      	cmp	r1, ip
   1756e:	bf28      	it	cs
   17570:	f04f 31ff 	movcs.w	r1, #4294967295
   17574:	462b      	mov	r3, r5
   17576:	464a      	mov	r2, r9
   17578:	f007 f937 	bl	1e7ea <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   1757c:	4285      	cmp	r5, r0
   1757e:	d00b      	beq.n	17598 <rpmsg_virtio_send_offchannel_raw+0x5c>
   17580:	490b      	ldr	r1, [pc, #44]	; (175b0 <rpmsg_virtio_send_offchannel_raw+0x74>)
   17582:	480c      	ldr	r0, [pc, #48]	; (175b4 <rpmsg_virtio_send_offchannel_raw+0x78>)
   17584:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   17588:	4a0b      	ldr	r2, [pc, #44]	; (175b8 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1758a:	f004 fbd5 	bl	1bd38 <assert_print>
   1758e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   17592:	4809      	ldr	r0, [pc, #36]	; (175b8 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   17594:	f004 fbc9 	bl	1bd2a <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   17598:	4623      	mov	r3, r4
   1759a:	4642      	mov	r2, r8
   1759c:	4639      	mov	r1, r7
   1759e:	4630      	mov	r0, r6
   175a0:	9500      	str	r5, [sp, #0]
   175a2:	f7ff fee9 	bl	17378 <rpmsg_virtio_send_offchannel_nocopy>
}
   175a6:	b005      	add	sp, #20
   175a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   175ac:	4803      	ldr	r0, [pc, #12]	; (175bc <rpmsg_virtio_send_offchannel_raw+0x80>)
   175ae:	e7fa      	b.n	175a6 <rpmsg_virtio_send_offchannel_raw+0x6a>
   175b0:	00023b80 	.word	0x00023b80
   175b4:	000205a4 	.word	0x000205a4
   175b8:	00023b0c 	.word	0x00023b0c
   175bc:	fffff82e 	.word	0xfffff82e

000175c0 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   175c0:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   175c2:	4604      	mov	r4, r0
   175c4:	b1e0      	cbz	r0, 17600 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   175c6:	f100 0558 	add.w	r5, r0, #88	; 0x58
   175ca:	4628      	mov	r0, r5
   175cc:	f007 fbf0 	bl	1edb0 <__metal_mutex_acquire>
   175d0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   175d4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   175d6:	b953      	cbnz	r3, 175ee <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   175d8:	f8d4 408c 	ldr.w	r4, [r4, #140]	; 0x8c
   175dc:	3c10      	subs	r4, #16
	if (length <= 0) {
   175de:	2c00      	cmp	r4, #0
   175e0:	dc00      	bgt.n	175e4 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   175e2:	4c08      	ldr	r4, [pc, #32]	; (17604 <rpmsg_virtio_get_buffer_size+0x44>)
   175e4:	4628      	mov	r0, r5
   175e6:	f007 fbe1 	bl	1edac <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   175ea:	4620      	mov	r0, r4
   175ec:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   175ee:	2b01      	cmp	r3, #1
   175f0:	d1f7      	bne.n	175e2 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   175f2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   175f6:	f007 fb05 	bl	1ec04 <virtqueue_get_desc_size>
   175fa:	f1a0 0410 	sub.w	r4, r0, #16
   175fe:	e7ee      	b.n	175de <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   17600:	4c01      	ldr	r4, [pc, #4]	; (17608 <rpmsg_virtio_get_buffer_size+0x48>)
   17602:	e7f2      	b.n	175ea <rpmsg_virtio_get_buffer_size+0x2a>
   17604:	fffff82e 	.word	0xfffff82e
   17608:	fffff82d 	.word	0xfffff82d

0001760c <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17610:	460d      	mov	r5, r1
   17612:	b08a      	sub	sp, #40	; 0x28
   17614:	4690      	mov	r8, r2
   17616:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   1761a:	228c      	movs	r2, #140	; 0x8c
   1761c:	2100      	movs	r1, #0
{
   1761e:	4604      	mov	r4, r0
   17620:	461e      	mov	r6, r3
	memset(rdev, 0, sizeof(*rdev));
   17622:	f005 fba3 	bl	1cd6c <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17626:	2201      	movs	r2, #1
   17628:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1762c:	4611      	mov	r1, r2
   1762e:	f007 fd5e 	bl	1f0ee <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   17632:	4b71      	ldr	r3, [pc, #452]	; (177f8 <rpmsg_init_vdev_with_config+0x1ec>)
	rvdev->vdev = vdev;
   17634:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	rdev->ns_bind_cb = ns_bind_cb;
   17638:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1763c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1763e:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   17640:	4b6e      	ldr	r3, [pc, #440]	; (177fc <rpmsg_init_vdev_with_config+0x1f0>)
   17642:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   17644:	4b6e      	ldr	r3, [pc, #440]	; (17800 <rpmsg_init_vdev_with_config+0x1f4>)
   17646:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   17648:	4b6e      	ldr	r3, [pc, #440]	; (17804 <rpmsg_init_vdev_with_config+0x1f8>)
   1764a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1764e:	4b6e      	ldr	r3, [pc, #440]	; (17808 <rpmsg_init_vdev_with_config+0x1fc>)
   17650:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   17654:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   17658:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   1765c:	f1b8 0f00 	cmp.w	r8, #0
   17660:	d165      	bne.n	1772e <rpmsg_init_vdev_with_config+0x122>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   17662:	b927      	cbnz	r7, 1766e <rpmsg_init_vdev_with_config+0x62>
			return RPMSG_ERR_PARAM;
   17664:	4f69      	ldr	r7, [pc, #420]	; (1780c <rpmsg_init_vdev_with_config+0x200>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   17666:	4638      	mov	r0, r7
   17668:	b00a      	add	sp, #40	; 0x28
   1766a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rvdev->config = *config;
   1766e:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   17672:	e897 0003 	ldmia.w	r7, {r0, r1}
   17676:	e883 0003 	stmia.w	r3, {r0, r1}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1767a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1767e:	6a03      	ldr	r3, [r0, #32]
   17680:	689b      	ldr	r3, [r3, #8]
   17682:	4798      	blx	r3
   17684:	2300      	movs	r3, #0
   17686:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   17688:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1768c:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1768e:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	if (role == RPMSG_HOST) {
   17692:	f1b8 0f00 	cmp.w	r8, #0
   17696:	d15e      	bne.n	17756 <rpmsg_init_vdev_with_config+0x14a>
		if (!shpool)
   17698:	f1b9 0f00 	cmp.w	r9, #0
   1769c:	d0e2      	beq.n	17664 <rpmsg_init_vdev_with_config+0x58>
		if (!shpool->size)
   1769e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   176a2:	2b00      	cmp	r3, #0
   176a4:	f000 80a5 	beq.w	177f2 <rpmsg_init_vdev_with_config+0x1e6>
		vq_names[0] = "rx_vq";
   176a8:	4b59      	ldr	r3, [pc, #356]	; (17810 <rpmsg_init_vdev_with_config+0x204>)
		rvdev->shpool = shpool;
   176aa:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
		vq_names[0] = "rx_vq";
   176ae:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   176b0:	4b58      	ldr	r3, [pc, #352]	; (17814 <rpmsg_init_vdev_with_config+0x208>)
   176b2:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   176b4:	4b58      	ldr	r3, [pc, #352]	; (17818 <rpmsg_init_vdev_with_config+0x20c>)
   176b6:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   176b8:	4b58      	ldr	r3, [pc, #352]	; (1781c <rpmsg_init_vdev_with_config+0x210>)
   176ba:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   176bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   176be:	681b      	ldr	r3, [r3, #0]
   176c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[1].vq;
   176c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   176c6:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   176c8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   176cc:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   176ce:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
   176d2:	9300      	str	r3, [sp, #0]
   176d4:	2202      	movs	r2, #2
   176d6:	2100      	movs	r1, #0
   176d8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   176dc:	ab04      	add	r3, sp, #16
   176de:	f7ff fd03 	bl	170e8 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   176e2:	4607      	mov	r7, r0
   176e4:	2800      	cmp	r0, #0
   176e6:	d1be      	bne.n	17666 <rpmsg_init_vdev_with_config+0x5a>
	virtqueue_disable_cb(rvdev->svq);
   176e8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   176ec:	f007 fa25 	bl	1eb3a <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   176f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   176f2:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   176f4:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   176f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   176f8:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   176fa:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   176fc:	f1b8 0f00 	cmp.w	r8, #0
   17700:	d15f      	bne.n	177c2 <rpmsg_init_vdev_with_config+0x1b6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17702:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   17704:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   17708:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1770a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1770e:	895b      	ldrh	r3, [r3, #10]
   17710:	4553      	cmp	r3, sl
   17712:	d832      	bhi.n	1777a <rpmsg_init_vdev_with_config+0x16e>
	if (rdev->support_ns) {
   17714:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
	list->next = list;
   17718:	e9c4 4400 	strd	r4, r4, [r4]
   1771c:	2b00      	cmp	r3, #0
   1771e:	d157      	bne.n	177d0 <rpmsg_init_vdev_with_config+0x1c4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   17720:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   17724:	2104      	movs	r1, #4
   17726:	6a03      	ldr	r3, [r0, #32]
   17728:	685b      	ldr	r3, [r3, #4]
   1772a:	4798      	blx	r3
}
   1772c:	e79b      	b.n	17666 <rpmsg_init_vdev_with_config+0x5a>
	if (role == RPMSG_REMOTE) {
   1772e:	f1b8 0f01 	cmp.w	r8, #1
   17732:	d1a2      	bne.n	1767a <rpmsg_init_vdev_with_config+0x6e>
		status = rpmsg_virtio_get_status(rvdev);
   17734:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	return rvdev->vdev->func->get_status(rvdev->vdev);
   17738:	6a03      	ldr	r3, [r0, #32]
   1773a:	681b      	ldr	r3, [r3, #0]
   1773c:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1773e:	0642      	lsls	r2, r0, #25
   17740:	d506      	bpl.n	17750 <rpmsg_init_vdev_with_config+0x144>
			rpmsg_virtio_set_status(rvdev, 0);
   17742:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   17746:	2100      	movs	r1, #0
   17748:	6a03      	ldr	r3, [r0, #32]
   1774a:	685b      	ldr	r3, [r3, #4]
   1774c:	4798      	blx	r3
}
   1774e:	e7f1      	b.n	17734 <rpmsg_init_vdev_with_config+0x128>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   17750:	0743      	lsls	r3, r0, #29
   17752:	d5ef      	bpl.n	17734 <rpmsg_init_vdev_with_config+0x128>
   17754:	e791      	b.n	1767a <rpmsg_init_vdev_with_config+0x6e>
	if (role == RPMSG_REMOTE) {
   17756:	f1b8 0f01 	cmp.w	r8, #1
   1775a:	d1b7      	bne.n	176cc <rpmsg_init_vdev_with_config+0xc0>
		vq_names[0] = "tx_vq";
   1775c:	4b2d      	ldr	r3, [pc, #180]	; (17814 <rpmsg_init_vdev_with_config+0x208>)
   1775e:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   17760:	4b2b      	ldr	r3, [pc, #172]	; (17810 <rpmsg_init_vdev_with_config+0x204>)
   17762:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   17764:	4b2d      	ldr	r3, [pc, #180]	; (1781c <rpmsg_init_vdev_with_config+0x210>)
   17766:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   17768:	4b2b      	ldr	r3, [pc, #172]	; (17818 <rpmsg_init_vdev_with_config+0x20c>)
   1776a:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1776c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1776e:	699b      	ldr	r3, [r3, #24]
   17770:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[0].vq;
   17774:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   17776:	681b      	ldr	r3, [r3, #0]
   17778:	e7a6      	b.n	176c8 <rpmsg_init_vdev_with_config+0xbc>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1777a:	4648      	mov	r0, r9
   1777c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   17780:	f007 fbb3 	bl	1eeea <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   17784:	4605      	mov	r5, r0
   17786:	b1c8      	cbz	r0, 177bc <rpmsg_init_vdev_with_config+0x1b0>
   17788:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1778a:	9008      	str	r0, [sp, #32]
   1778c:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1778e:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   17790:	2200      	movs	r2, #0
   17792:	4281      	cmp	r1, r0
   17794:	bf28      	it	cs
   17796:	f04f 31ff 	movcs.w	r1, #4294967295
   1779a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1779e:	4630      	mov	r0, r6
   177a0:	f007 f85d 	bl	1e85e <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   177a4:	9500      	str	r5, [sp, #0]
   177a6:	2301      	movs	r3, #1
   177a8:	2200      	movs	r2, #0
   177aa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   177ae:	a908      	add	r1, sp, #32
   177b0:	f007 f8d4 	bl	1e95c <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   177b4:	b918      	cbnz	r0, 177be <rpmsg_init_vdev_with_config+0x1b2>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   177b6:	f10a 0a01 	add.w	sl, sl, #1
   177ba:	e7a6      	b.n	1770a <rpmsg_init_vdev_with_config+0xfe>
				return RPMSG_ERR_NO_BUFF;
   177bc:	4818      	ldr	r0, [pc, #96]	; (17820 <rpmsg_init_vdev_with_config+0x214>)
   177be:	4607      	mov	r7, r0
   177c0:	e751      	b.n	17666 <rpmsg_init_vdev_with_config+0x5a>
	if (rdev->support_ns) {
   177c2:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   177c6:	e9c4 4400 	strd	r4, r4, [r4]
   177ca:	2b00      	cmp	r3, #0
   177cc:	f43f af4b 	beq.w	17666 <rpmsg_init_vdev_with_config+0x5a>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   177d0:	2300      	movs	r3, #0
   177d2:	9302      	str	r3, [sp, #8]
   177d4:	4b13      	ldr	r3, [pc, #76]	; (17824 <rpmsg_init_vdev_with_config+0x218>)
   177d6:	4620      	mov	r0, r4
   177d8:	9301      	str	r3, [sp, #4]
   177da:	2335      	movs	r3, #53	; 0x35
   177dc:	4a12      	ldr	r2, [pc, #72]	; (17828 <rpmsg_init_vdev_with_config+0x21c>)
   177de:	9300      	str	r3, [sp, #0]
   177e0:	f104 0108 	add.w	r1, r4, #8
   177e4:	f7ff fd2e 	bl	17244 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   177e8:	f1b8 0f00 	cmp.w	r8, #0
   177ec:	f47f af3b 	bne.w	17666 <rpmsg_init_vdev_with_config+0x5a>
   177f0:	e796      	b.n	17720 <rpmsg_init_vdev_with_config+0x114>
			return RPMSG_ERR_NO_BUFF;
   177f2:	4f0b      	ldr	r7, [pc, #44]	; (17820 <rpmsg_init_vdev_with_config+0x214>)
   177f4:	e737      	b.n	17666 <rpmsg_init_vdev_with_config+0x5a>
   177f6:	bf00      	nop
   177f8:	0001753d 	.word	0x0001753d
   177fc:	0001ed9d 	.word	0x0001ed9d
   17800:	0001eeb3 	.word	0x0001eeb3
   17804:	0001ef07 	.word	0x0001ef07
   17808:	00017379 	.word	0x00017379
   1780c:	fffff82d 	.word	0xfffff82d
   17810:	00023b8e 	.word	0x00023b8e
   17814:	00023b94 	.word	0x00023b94
   17818:	00017461 	.word	0x00017461
   1781c:	0001edab 	.word	0x0001edab
   17820:	fffff82e 	.word	0xfffff82e
   17824:	0001edbd 	.word	0x0001edbd
   17828:	00023b9a 	.word	0x00023b9a

0001782c <rpmsg_init_vdev>:
{
   1782c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1782e:	4605      	mov	r5, r0
   17830:	460e      	mov	r6, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   17832:	4907      	ldr	r1, [pc, #28]	; (17850 <rpmsg_init_vdev+0x24>)
   17834:	ac02      	add	r4, sp, #8
   17836:	c903      	ldmia	r1, {r0, r1}
   17838:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1783c:	9908      	ldr	r1, [sp, #32]
   1783e:	4628      	mov	r0, r5
   17840:	9100      	str	r1, [sp, #0]
   17842:	9401      	str	r4, [sp, #4]
   17844:	4631      	mov	r1, r6
   17846:	f7ff fee1 	bl	1760c <rpmsg_init_vdev_with_config>
}
   1784a:	b004      	add	sp, #16
   1784c:	bd70      	pop	{r4, r5, r6, pc}
   1784e:	bf00      	nop
   17850:	0001f9f8 	.word	0x0001f9f8

00017854 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17858:	b086      	sub	sp, #24
   1785a:	4604      	mov	r4, r0
   1785c:	460e      	mov	r6, r1
   1785e:	af00      	add	r7, sp, #0
	__asm__ volatile(
   17860:	f04f 0320 	mov.w	r3, #32
   17864:	f3ef 8811 	mrs	r8, BASEPRI
   17868:	f383 8812 	msr	BASEPRI_MAX, r3
   1786c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   17870:	f002 fede 	bl	1a630 <z_impl_z_current_get>
   17874:	2c04      	cmp	r4, #4
   17876:	bf98      	it	ls
   17878:	4b34      	ldrls	r3, [pc, #208]	; (1794c <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1787a:	46e9      	mov	r9, sp
   1787c:	b08a      	sub	sp, #40	; 0x28
   1787e:	4605      	mov	r5, r0
   17880:	466a      	mov	r2, sp
   17882:	bf94      	ite	ls
   17884:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   17888:	4b31      	ldrhi	r3, [pc, #196]	; (17950 <z_fatal_error+0xfc>)
   1788a:	61d3      	str	r3, [r2, #28]
   1788c:	f240 3301 	movw	r3, #769	; 0x301
   17890:	f04f 0a00 	mov.w	sl, #0
   17894:	8493      	strh	r3, [r2, #36]	; 0x24
   17896:	492f      	ldr	r1, [pc, #188]	; (17954 <z_fatal_error+0x100>)
   17898:	4b2f      	ldr	r3, [pc, #188]	; (17958 <z_fatal_error+0x104>)
   1789a:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1789e:	f8c2 a020 	str.w	sl, [r2, #32]
   178a2:	f842 3f10 	str.w	r3, [r2, #16]!
   178a6:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   178aa:	4653      	mov	r3, sl
   178ac:	482b      	ldr	r0, [pc, #172]	; (1795c <z_fatal_error+0x108>)
   178ae:	f7f3 ffab 	bl	b808 <z_impl_z_log_msg_static_create>
   178b2:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   178b4:	b17e      	cbz	r6, 178d6 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   178b6:	69f3      	ldr	r3, [r6, #28]
   178b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   178bc:	b15b      	cbz	r3, 178d6 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   178be:	4b28      	ldr	r3, [pc, #160]	; (17960 <z_fatal_error+0x10c>)
   178c0:	617b      	str	r3, [r7, #20]
   178c2:	2302      	movs	r3, #2
   178c4:	613b      	str	r3, [r7, #16]
   178c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   178ca:	4653      	mov	r3, sl
   178cc:	4823      	ldr	r0, [pc, #140]	; (1795c <z_fatal_error+0x108>)
   178ce:	f107 0210 	add.w	r2, r7, #16
   178d2:	f7f3 ff99 	bl	b808 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   178d6:	b12d      	cbz	r5, 178e4 <z_fatal_error+0x90>
   178d8:	4628      	mov	r0, r5
   178da:	f007 fbc0 	bl	1f05e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   178de:	b108      	cbz	r0, 178e4 <z_fatal_error+0x90>
   178e0:	7803      	ldrb	r3, [r0, #0]
   178e2:	b903      	cbnz	r3, 178e6 <z_fatal_error+0x92>
		thread_name = "unknown";
   178e4:	481f      	ldr	r0, [pc, #124]	; (17964 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   178e6:	46e9      	mov	r9, sp
   178e8:	b08a      	sub	sp, #40	; 0x28
   178ea:	466a      	mov	r2, sp
   178ec:	4b1e      	ldr	r3, [pc, #120]	; (17968 <z_fatal_error+0x114>)
   178ee:	61d0      	str	r0, [r2, #28]
   178f0:	e9c2 3505 	strd	r3, r5, [r2, #20]
   178f4:	f240 3301 	movw	r3, #769	; 0x301
   178f8:	8413      	strh	r3, [r2, #32]
   178fa:	4b1c      	ldr	r3, [pc, #112]	; (1796c <z_fatal_error+0x118>)
   178fc:	f842 3f10 	str.w	r3, [r2, #16]!
   17900:	2300      	movs	r3, #0
   17902:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   17906:	4815      	ldr	r0, [pc, #84]	; (1795c <z_fatal_error+0x108>)
   17908:	f7f3 ff7e 	bl	b808 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1790c:	4631      	mov	r1, r6
   1790e:	46cd      	mov	sp, r9
   17910:	4620      	mov	r0, r4
   17912:	f7fe f8c5 	bl	15aa0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   17916:	2c04      	cmp	r4, #4
   17918:	d10c      	bne.n	17934 <z_fatal_error+0xe0>
   1791a:	4915      	ldr	r1, [pc, #84]	; (17970 <z_fatal_error+0x11c>)
   1791c:	2393      	movs	r3, #147	; 0x93
   1791e:	4a15      	ldr	r2, [pc, #84]	; (17974 <z_fatal_error+0x120>)
   17920:	4815      	ldr	r0, [pc, #84]	; (17978 <z_fatal_error+0x124>)
   17922:	f004 fa09 	bl	1bd38 <assert_print>
   17926:	4815      	ldr	r0, [pc, #84]	; (1797c <z_fatal_error+0x128>)
   17928:	f004 fa06 	bl	1bd38 <assert_print>
   1792c:	2193      	movs	r1, #147	; 0x93
   1792e:	4811      	ldr	r0, [pc, #68]	; (17974 <z_fatal_error+0x120>)
   17930:	f004 f9fb 	bl	1bd2a <assert_post_action>
	__asm__ volatile(
   17934:	f388 8811 	msr	BASEPRI, r8
   17938:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1793c:	4628      	mov	r0, r5
   1793e:	f7f5 feb1 	bl	d6a4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   17942:	3718      	adds	r7, #24
   17944:	46bd      	mov	sp, r7
   17946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1794a:	bf00      	nop
   1794c:	00020194 	.word	0x00020194
   17950:	00023b9d 	.word	0x00023b9d
   17954:	00023bb3 	.word	0x00023bb3
   17958:	01000005 	.word	0x01000005
   1795c:	0001f960 	.word	0x0001f960
   17960:	00023bdb 	.word	0x00023bdb
   17964:	00023bab 	.word	0x00023bab
   17968:	00023bfc 	.word	0x00023bfc
   1796c:	01000004 	.word	0x01000004
   17970:	00023c36 	.word	0x00023c36
   17974:	00023c14 	.word	0x00023c14
   17978:	000205a4 	.word	0x000205a4
   1797c:	00023c53 	.word	0x00023c53

00017980 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17980:	4b0f      	ldr	r3, [pc, #60]	; (179c0 <z_sys_init_run_level+0x40>)
{
   17982:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17984:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17988:	3001      	adds	r0, #1
   1798a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1798e:	42a6      	cmp	r6, r4
   17990:	d800      	bhi.n	17994 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   17992:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   17994:	e9d4 3500 	ldrd	r3, r5, [r4]
   17998:	4628      	mov	r0, r5
   1799a:	4798      	blx	r3
		if (dev != NULL) {
   1799c:	b16d      	cbz	r5, 179ba <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1799e:	b138      	cbz	r0, 179b0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   179a0:	2800      	cmp	r0, #0
   179a2:	bfb8      	it	lt
   179a4:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   179a6:	28ff      	cmp	r0, #255	; 0xff
   179a8:	bfa8      	it	ge
   179aa:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   179ac:	68eb      	ldr	r3, [r5, #12]
   179ae:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   179b0:	68ea      	ldr	r2, [r5, #12]
   179b2:	7853      	ldrb	r3, [r2, #1]
   179b4:	f043 0301 	orr.w	r3, r3, #1
   179b8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   179ba:	3408      	adds	r4, #8
   179bc:	e7e7      	b.n	1798e <z_sys_init_run_level+0xe>
   179be:	bf00      	nop
   179c0:	000201a8 	.word	0x000201a8

000179c4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   179c4:	2201      	movs	r2, #1
{
   179c6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   179c8:	4b09      	ldr	r3, [pc, #36]	; (179f0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   179ca:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   179cc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   179ce:	f7ff ffd7 	bl	17980 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   179d2:	f003 ff35 	bl	1b840 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   179d6:	2004      	movs	r0, #4
   179d8:	f7ff ffd2 	bl	17980 <z_sys_init_run_level>

	z_init_static_threads();
   179dc:	f000 fb66 	bl	180ac <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   179e0:	f7f1 fb86 	bl	90f0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   179e4:	4a03      	ldr	r2, [pc, #12]	; (179f4 <bg_thread_main+0x30>)
   179e6:	7b13      	ldrb	r3, [r2, #12]
   179e8:	f023 0301 	bic.w	r3, r3, #1
   179ec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   179ee:	bd08      	pop	{r3, pc}
   179f0:	20009c5d 	.word	0x20009c5d
   179f4:	20009538 	.word	0x20009538

000179f8 <z_bss_zero>:
{
   179f8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   179fa:	4803      	ldr	r0, [pc, #12]	; (17a08 <z_bss_zero+0x10>)
   179fc:	4a03      	ldr	r2, [pc, #12]	; (17a0c <z_bss_zero+0x14>)
   179fe:	2100      	movs	r1, #0
   17a00:	1a12      	subs	r2, r2, r0
   17a02:	f007 fb01 	bl	1f008 <z_early_memset>
}
   17a06:	bd08      	pop	{r3, pc}
   17a08:	20008738 	.word	0x20008738
   17a0c:	20009c60 	.word	0x20009c60

00017a10 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   17a10:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   17a12:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   17a14:	4e13      	ldr	r6, [pc, #76]	; (17a64 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   17a16:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   17a18:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   17a1c:	2300      	movs	r3, #0
{
   17a1e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   17a20:	e9cd 2304 	strd	r2, r3, [sp, #16]
   17a24:	220f      	movs	r2, #15
   17a26:	9301      	str	r3, [sp, #4]
   17a28:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17a2c:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   17a2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17a32:	4d0d      	ldr	r5, [pc, #52]	; (17a68 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   17a34:	490d      	ldr	r1, [pc, #52]	; (17a6c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17a36:	fb03 5500 	mla	r5, r3, r0, r5
{
   17a3a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   17a3c:	fb02 1100 	mla	r1, r2, r0, r1
   17a40:	4b0b      	ldr	r3, [pc, #44]	; (17a70 <z_init_cpu+0x60>)
   17a42:	4630      	mov	r0, r6
   17a44:	9500      	str	r5, [sp, #0]
   17a46:	f000 fa97 	bl	17f78 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17a4a:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   17a4c:	752c      	strb	r4, [r5, #20]
   17a4e:	f023 0304 	bic.w	r3, r3, #4
   17a52:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   17a54:	4b07      	ldr	r3, [pc, #28]	; (17a74 <z_init_cpu+0x64>)
   17a56:	3401      	adds	r4, #1
   17a58:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   17a5c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   17a5e:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   17a60:	b006      	add	sp, #24
   17a62:	bd70      	pop	{r4, r5, r6, pc}
   17a64:	200094b0 	.word	0x200094b0
   17a68:	20009b48 	.word	0x20009b48
   17a6c:	2000c320 	.word	0x2000c320
   17a70:	000181fd 	.word	0x000181fd
   17a74:	2000bb20 	.word	0x2000bb20

00017a78 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   17a78:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   17a7a:	2000      	movs	r0, #0
{
   17a7c:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   17a7e:	f7ff ff7f 	bl	17980 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   17a82:	4b2f      	ldr	r3, [pc, #188]	; (17b40 <z_cstart+0xc8>)
	uint32_t msp =
   17a84:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17a88:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   17a8c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17a90:	2400      	movs	r4, #0
   17a92:	23e0      	movs	r3, #224	; 0xe0
   17a94:	4d2b      	ldr	r5, [pc, #172]	; (17b44 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   17a96:	4e2c      	ldr	r6, [pc, #176]	; (17b48 <z_cstart+0xd0>)
   17a98:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17a9c:	77ec      	strb	r4, [r5, #31]
   17a9e:	762c      	strb	r4, [r5, #24]
   17aa0:	766c      	strb	r4, [r5, #25]
   17aa2:	76ac      	strb	r4, [r5, #26]
   17aa4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17aa8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17aaa:	4f28      	ldr	r7, [pc, #160]	; (17b4c <z_cstart+0xd4>)
   17aac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17ab0:	626b      	str	r3, [r5, #36]	; 0x24
   17ab2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17ab6:	f7f5 fd59 	bl	d56c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17aba:	f7f5 f86d 	bl	cb98 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17abe:	f04f 33ff 	mov.w	r3, #4294967295
   17ac2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17ac4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   17ac6:	f7f5 ffcd 	bl	da64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   17aca:	f7f5 fe01 	bl	d6d0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   17ace:	f7f3 fc91 	bl	b3f4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   17ad2:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   17ad6:	ad06      	add	r5, sp, #24
   17ad8:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   17ada:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   17ade:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   17ae2:	f003 fe8f 	bl	1b804 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   17ae6:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   17ae8:	f007 fa82 	bl	1eff0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   17aec:	2001      	movs	r0, #1
   17aee:	f7ff ff47 	bl	17980 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   17af2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   17af4:	4d16      	ldr	r5, [pc, #88]	; (17b50 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   17af6:	f7ff ff43 	bl	17980 <z_sys_init_run_level>
	z_sched_init();
   17afa:	f002 fc1f 	bl	1a33c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17afe:	4b15      	ldr	r3, [pc, #84]	; (17b54 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   17b00:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17b02:	9305      	str	r3, [sp, #20]
   17b04:	2301      	movs	r3, #1
   17b06:	4914      	ldr	r1, [pc, #80]	; (17b58 <z_cstart+0xe0>)
   17b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17b0c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   17b10:	4628      	mov	r0, r5
   17b12:	463b      	mov	r3, r7
   17b14:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17b18:	9400      	str	r4, [sp, #0]
   17b1a:	f000 fa2d 	bl	17f78 <z_setup_new_thread>
   17b1e:	4606      	mov	r6, r0
   17b20:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   17b22:	4628      	mov	r0, r5
   17b24:	f022 0204 	bic.w	r2, r2, #4
   17b28:	736a      	strb	r2, [r5, #13]
   17b2a:	f001 fddf 	bl	196ec <z_ready_thread>
	z_init_cpu(0);
   17b2e:	4620      	mov	r0, r4
   17b30:	f7ff ff6e 	bl	17a10 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17b34:	463a      	mov	r2, r7
   17b36:	4631      	mov	r1, r6
   17b38:	4628      	mov	r0, r5
   17b3a:	f7f5 f9ad 	bl	ce98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17b3e:	bf00      	nop
   17b40:	2000bb20 	.word	0x2000bb20
   17b44:	e000ed00 	.word	0xe000ed00
   17b48:	20009b48 	.word	0x20009b48
   17b4c:	000179c5 	.word	0x000179c5
   17b50:	20009538 	.word	0x20009538
   17b54:	00023cd2 	.word	0x00023cd2
   17b58:	2000c460 	.word	0x2000c460

00017b5c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   17b5c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17b5e:	4c0d      	ldr	r4, [pc, #52]	; (17b94 <statics_init+0x38>)
   17b60:	4d0d      	ldr	r5, [pc, #52]	; (17b98 <statics_init+0x3c>)
   17b62:	42ac      	cmp	r4, r5
   17b64:	d913      	bls.n	17b8e <statics_init+0x32>
   17b66:	490d      	ldr	r1, [pc, #52]	; (17b9c <statics_init+0x40>)
   17b68:	2318      	movs	r3, #24
   17b6a:	4a0d      	ldr	r2, [pc, #52]	; (17ba0 <statics_init+0x44>)
   17b6c:	480d      	ldr	r0, [pc, #52]	; (17ba4 <statics_init+0x48>)
   17b6e:	f004 f8e3 	bl	1bd38 <assert_print>
   17b72:	480d      	ldr	r0, [pc, #52]	; (17ba8 <statics_init+0x4c>)
   17b74:	f004 f8e0 	bl	1bd38 <assert_print>
   17b78:	2118      	movs	r1, #24
   17b7a:	4809      	ldr	r0, [pc, #36]	; (17ba0 <statics_init+0x44>)
   17b7c:	f004 f8d5 	bl	1bd2a <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17b80:	4620      	mov	r0, r4
   17b82:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17b86:	f007 fa43 	bl	1f010 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17b8a:	3418      	adds	r4, #24
   17b8c:	e7e9      	b.n	17b62 <statics_init+0x6>
   17b8e:	d3f7      	bcc.n	17b80 <statics_init+0x24>
		}
	}
	return 0;
}
   17b90:	2000      	movs	r0, #0
   17b92:	bd38      	pop	{r3, r4, r5, pc}
   17b94:	20008520 	.word	0x20008520
   17b98:	20008538 	.word	0x20008538
   17b9c:	00023cfc 	.word	0x00023cfc
   17ba0:	00023cda 	.word	0x00023cda
   17ba4:	000205a4 	.word	0x000205a4
   17ba8:	00020cc7 	.word	0x00020cc7

00017bac <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bb0:	b085      	sub	sp, #20
   17bb2:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   17bb6:	4680      	mov	r8, r0
   17bb8:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   17bba:	4648      	mov	r0, r9
   17bbc:	4659      	mov	r1, fp
{
   17bbe:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   17bc0:	f007 fb44 	bl	1f24c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   17bc4:	f1bb 3fff 	cmp.w	fp, #4294967295
   17bc8:	bf08      	it	eq
   17bca:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   17bce:	4606      	mov	r6, r0
   17bd0:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   17bd2:	bf04      	itt	eq
   17bd4:	f04f 36ff 	moveq.w	r6, #4294967295
   17bd8:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17bdc:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   17be0:	f04f 0320 	mov.w	r3, #32
   17be4:	f3ef 8511 	mrs	r5, BASEPRI
   17be8:	f383 8812 	msr	BASEPRI_MAX, r3
   17bec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17bf0:	4620      	mov	r0, r4
   17bf2:	f000 fadf 	bl	181b4 <z_spin_lock_valid>
   17bf6:	b960      	cbnz	r0, 17c12 <k_heap_aligned_alloc+0x66>
   17bf8:	2394      	movs	r3, #148	; 0x94
   17bfa:	4a33      	ldr	r2, [pc, #204]	; (17cc8 <k_heap_aligned_alloc+0x11c>)
   17bfc:	4933      	ldr	r1, [pc, #204]	; (17ccc <k_heap_aligned_alloc+0x120>)
   17bfe:	4834      	ldr	r0, [pc, #208]	; (17cd0 <k_heap_aligned_alloc+0x124>)
   17c00:	f004 f89a 	bl	1bd38 <assert_print>
   17c04:	4621      	mov	r1, r4
   17c06:	4833      	ldr	r0, [pc, #204]	; (17cd4 <k_heap_aligned_alloc+0x128>)
   17c08:	f004 f896 	bl	1bd38 <assert_print>
   17c0c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c0e:	482e      	ldr	r0, [pc, #184]	; (17cc8 <k_heap_aligned_alloc+0x11c>)
   17c10:	e031      	b.n	17c76 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   17c12:	4620      	mov	r0, r4
   17c14:	f000 faea 	bl	181ec <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17c18:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17c1c:	b113      	cbz	r3, 17c24 <k_heap_aligned_alloc+0x78>
   17c1e:	ea5b 0909 	orrs.w	r9, fp, r9
   17c22:	d11d      	bne.n	17c60 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17c24:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17c28:	4652      	mov	r2, sl
   17c2a:	4640      	mov	r0, r8
   17c2c:	9903      	ldr	r1, [sp, #12]
   17c2e:	f7f1 ff1d 	bl	9a6c <sys_heap_aligned_alloc>
   17c32:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   17c34:	f003 f8ea 	bl	1ae0c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   17c38:	f1b9 0f00 	cmp.w	r9, #0
   17c3c:	d01d      	beq.n	17c7a <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c3e:	4620      	mov	r0, r4
   17c40:	f000 fac6 	bl	181d0 <z_spin_unlock_valid>
   17c44:	2800      	cmp	r0, #0
   17c46:	d137      	bne.n	17cb8 <k_heap_aligned_alloc+0x10c>
   17c48:	23c2      	movs	r3, #194	; 0xc2
   17c4a:	4a1f      	ldr	r2, [pc, #124]	; (17cc8 <k_heap_aligned_alloc+0x11c>)
   17c4c:	4922      	ldr	r1, [pc, #136]	; (17cd8 <k_heap_aligned_alloc+0x12c>)
   17c4e:	4820      	ldr	r0, [pc, #128]	; (17cd0 <k_heap_aligned_alloc+0x124>)
   17c50:	f004 f872 	bl	1bd38 <assert_print>
   17c54:	4621      	mov	r1, r4
   17c56:	4821      	ldr	r0, [pc, #132]	; (17cdc <k_heap_aligned_alloc+0x130>)
   17c58:	f004 f86e 	bl	1bd38 <assert_print>
   17c5c:	21c2      	movs	r1, #194	; 0xc2
   17c5e:	e7d6      	b.n	17c0e <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17c60:	491f      	ldr	r1, [pc, #124]	; (17ce0 <k_heap_aligned_alloc+0x134>)
   17c62:	234c      	movs	r3, #76	; 0x4c
   17c64:	4a1f      	ldr	r2, [pc, #124]	; (17ce4 <k_heap_aligned_alloc+0x138>)
   17c66:	481a      	ldr	r0, [pc, #104]	; (17cd0 <k_heap_aligned_alloc+0x124>)
   17c68:	f004 f866 	bl	1bd38 <assert_print>
   17c6c:	481e      	ldr	r0, [pc, #120]	; (17ce8 <k_heap_aligned_alloc+0x13c>)
   17c6e:	f004 f863 	bl	1bd38 <assert_print>
   17c72:	214c      	movs	r1, #76	; 0x4c
   17c74:	481b      	ldr	r0, [pc, #108]	; (17ce4 <k_heap_aligned_alloc+0x138>)
   17c76:	f004 f858 	bl	1bd2a <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   17c7a:	1a30      	subs	r0, r6, r0
   17c7c:	eb67 0101 	sbc.w	r1, r7, r1
   17c80:	2801      	cmp	r0, #1
   17c82:	f171 0300 	sbcs.w	r3, r1, #0
   17c86:	dbda      	blt.n	17c3e <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17c88:	e9cd 0100 	strd	r0, r1, [sp]
   17c8c:	465a      	mov	r2, fp
   17c8e:	4629      	mov	r1, r5
   17c90:	4620      	mov	r0, r4
   17c92:	f002 f885 	bl	19da0 <z_pend_curr>
   17c96:	f04f 0320 	mov.w	r3, #32
   17c9a:	f3ef 8511 	mrs	r5, BASEPRI
   17c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   17ca2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ca6:	4620      	mov	r0, r4
   17ca8:	f000 fa84 	bl	181b4 <z_spin_lock_valid>
   17cac:	2800      	cmp	r0, #0
   17cae:	d0a3      	beq.n	17bf8 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   17cb0:	4620      	mov	r0, r4
   17cb2:	f000 fa9b 	bl	181ec <z_spin_lock_set_owner>
	return k;
   17cb6:	e7b7      	b.n	17c28 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   17cb8:	f385 8811 	msr	BASEPRI, r5
   17cbc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17cc0:	4648      	mov	r0, r9
   17cc2:	b005      	add	sp, #20
   17cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cc8:	000209d8 	.word	0x000209d8
   17ccc:	00020a31 	.word	0x00020a31
   17cd0:	000205a4 	.word	0x000205a4
   17cd4:	00020a46 	.word	0x00020a46
   17cd8:	00020a05 	.word	0x00020a05
   17cdc:	00020a1c 	.word	0x00020a1c
   17ce0:	00023d12 	.word	0x00023d12
   17ce4:	00023cda 	.word	0x00023cda
   17ce8:	00022c58 	.word	0x00022c58

00017cec <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   17cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cee:	4605      	mov	r5, r0
   17cf0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17cf2:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   17cf6:	f04f 0320 	mov.w	r3, #32
   17cfa:	f3ef 8711 	mrs	r7, BASEPRI
   17cfe:	f383 8812 	msr	BASEPRI_MAX, r3
   17d02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d06:	4620      	mov	r0, r4
   17d08:	f000 fa54 	bl	181b4 <z_spin_lock_valid>
   17d0c:	b968      	cbnz	r0, 17d2a <k_heap_free+0x3e>
   17d0e:	2394      	movs	r3, #148	; 0x94
   17d10:	4a19      	ldr	r2, [pc, #100]	; (17d78 <k_heap_free+0x8c>)
   17d12:	491a      	ldr	r1, [pc, #104]	; (17d7c <k_heap_free+0x90>)
   17d14:	481a      	ldr	r0, [pc, #104]	; (17d80 <k_heap_free+0x94>)
   17d16:	f004 f80f 	bl	1bd38 <assert_print>
   17d1a:	4621      	mov	r1, r4
   17d1c:	4819      	ldr	r0, [pc, #100]	; (17d84 <k_heap_free+0x98>)
   17d1e:	f004 f80b 	bl	1bd38 <assert_print>
   17d22:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d24:	4814      	ldr	r0, [pc, #80]	; (17d78 <k_heap_free+0x8c>)
   17d26:	f004 f800 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   17d2a:	4620      	mov	r0, r4
   17d2c:	f000 fa5e 	bl	181ec <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17d30:	4628      	mov	r0, r5
   17d32:	4631      	mov	r1, r6
   17d34:	f7f1 fe54 	bl	99e0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   17d38:	f105 000c 	add.w	r0, r5, #12
   17d3c:	f007 fa6c 	bl	1f218 <z_unpend_all>
   17d40:	b128      	cbz	r0, 17d4e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   17d42:	4639      	mov	r1, r7
   17d44:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17d46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17d4a:	f001 bd5b 	b.w	19804 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d4e:	4620      	mov	r0, r4
   17d50:	f000 fa3e 	bl	181d0 <z_spin_unlock_valid>
   17d54:	b958      	cbnz	r0, 17d6e <k_heap_free+0x82>
   17d56:	23c2      	movs	r3, #194	; 0xc2
   17d58:	4a07      	ldr	r2, [pc, #28]	; (17d78 <k_heap_free+0x8c>)
   17d5a:	490b      	ldr	r1, [pc, #44]	; (17d88 <k_heap_free+0x9c>)
   17d5c:	4808      	ldr	r0, [pc, #32]	; (17d80 <k_heap_free+0x94>)
   17d5e:	f003 ffeb 	bl	1bd38 <assert_print>
   17d62:	4621      	mov	r1, r4
   17d64:	4809      	ldr	r0, [pc, #36]	; (17d8c <k_heap_free+0xa0>)
   17d66:	f003 ffe7 	bl	1bd38 <assert_print>
   17d6a:	21c2      	movs	r1, #194	; 0xc2
   17d6c:	e7da      	b.n	17d24 <k_heap_free+0x38>
	__asm__ volatile(
   17d6e:	f387 8811 	msr	BASEPRI, r7
   17d72:	f3bf 8f6f 	isb	sy
}
   17d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d78:	000209d8 	.word	0x000209d8
   17d7c:	00020a31 	.word	0x00020a31
   17d80:	000205a4 	.word	0x000205a4
   17d84:	00020a46 	.word	0x00020a46
   17d88:	00020a05 	.word	0x00020a05
   17d8c:	00020a1c 	.word	0x00020a1c

00017d90 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   17d90:	2000      	movs	r0, #0
{
   17d92:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17d94:	4c0c      	ldr	r4, [pc, #48]	; (17dc8 <init_mem_slab_module+0x38>)
   17d96:	4d0d      	ldr	r5, [pc, #52]	; (17dcc <init_mem_slab_module+0x3c>)
   17d98:	42ac      	cmp	r4, r5
   17d9a:	d913      	bls.n	17dc4 <init_mem_slab_module+0x34>
   17d9c:	490c      	ldr	r1, [pc, #48]	; (17dd0 <init_mem_slab_module+0x40>)
   17d9e:	233d      	movs	r3, #61	; 0x3d
   17da0:	4a0c      	ldr	r2, [pc, #48]	; (17dd4 <init_mem_slab_module+0x44>)
   17da2:	480d      	ldr	r0, [pc, #52]	; (17dd8 <init_mem_slab_module+0x48>)
   17da4:	f003 ffc8 	bl	1bd38 <assert_print>
   17da8:	480c      	ldr	r0, [pc, #48]	; (17ddc <init_mem_slab_module+0x4c>)
   17daa:	f003 ffc5 	bl	1bd38 <assert_print>
   17dae:	213d      	movs	r1, #61	; 0x3d
   17db0:	4808      	ldr	r0, [pc, #32]	; (17dd4 <init_mem_slab_module+0x44>)
   17db2:	f003 ffba 	bl	1bd2a <assert_post_action>
		rc = create_free_list(slab);
   17db6:	4620      	mov	r0, r4
   17db8:	f007 f932 	bl	1f020 <create_free_list>
		if (rc < 0) {
   17dbc:	2800      	cmp	r0, #0
   17dbe:	db02      	blt.n	17dc6 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17dc0:	3420      	adds	r4, #32
   17dc2:	e7e9      	b.n	17d98 <init_mem_slab_module+0x8>
   17dc4:	d3f7      	bcc.n	17db6 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   17dc6:	bd38      	pop	{r3, r4, r5, pc}
   17dc8:	200084c0 	.word	0x200084c0
   17dcc:	20008520 	.word	0x20008520
   17dd0:	00023d7d 	.word	0x00023d7d
   17dd4:	00023d58 	.word	0x00023d58
   17dd8:	000205a4 	.word	0x000205a4
   17ddc:	00020cc7 	.word	0x00020cc7

00017de0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17de4:	4604      	mov	r4, r0
   17de6:	460e      	mov	r6, r1
   17de8:	4690      	mov	r8, r2
   17dea:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   17dec:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   17df0:	f04f 0320 	mov.w	r3, #32
   17df4:	f3ef 8911 	mrs	r9, BASEPRI
   17df8:	f383 8812 	msr	BASEPRI_MAX, r3
   17dfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e00:	4628      	mov	r0, r5
   17e02:	f000 f9d7 	bl	181b4 <z_spin_lock_valid>
   17e06:	b968      	cbnz	r0, 17e24 <k_mem_slab_alloc+0x44>
   17e08:	2394      	movs	r3, #148	; 0x94
   17e0a:	4a23      	ldr	r2, [pc, #140]	; (17e98 <k_mem_slab_alloc+0xb8>)
   17e0c:	4923      	ldr	r1, [pc, #140]	; (17e9c <k_mem_slab_alloc+0xbc>)
   17e0e:	4824      	ldr	r0, [pc, #144]	; (17ea0 <k_mem_slab_alloc+0xc0>)
   17e10:	f003 ff92 	bl	1bd38 <assert_print>
   17e14:	4629      	mov	r1, r5
   17e16:	4823      	ldr	r0, [pc, #140]	; (17ea4 <k_mem_slab_alloc+0xc4>)
   17e18:	f003 ff8e 	bl	1bd38 <assert_print>
   17e1c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e1e:	481e      	ldr	r0, [pc, #120]	; (17e98 <k_mem_slab_alloc+0xb8>)
   17e20:	f003 ff83 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   17e24:	4628      	mov	r0, r5
   17e26:	f000 f9e1 	bl	181ec <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   17e2a:	69a3      	ldr	r3, [r4, #24]
   17e2c:	b1b3      	cbz	r3, 17e5c <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   17e2e:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   17e30:	681b      	ldr	r3, [r3, #0]
   17e32:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   17e34:	69e3      	ldr	r3, [r4, #28]
   17e36:	3301      	adds	r3, #1
   17e38:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17e3a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e3c:	4628      	mov	r0, r5
   17e3e:	f000 f9c7 	bl	181d0 <z_spin_unlock_valid>
   17e42:	bb18      	cbnz	r0, 17e8c <k_mem_slab_alloc+0xac>
   17e44:	23c2      	movs	r3, #194	; 0xc2
   17e46:	4a14      	ldr	r2, [pc, #80]	; (17e98 <k_mem_slab_alloc+0xb8>)
   17e48:	4917      	ldr	r1, [pc, #92]	; (17ea8 <k_mem_slab_alloc+0xc8>)
   17e4a:	4815      	ldr	r0, [pc, #84]	; (17ea0 <k_mem_slab_alloc+0xc0>)
   17e4c:	f003 ff74 	bl	1bd38 <assert_print>
   17e50:	4629      	mov	r1, r5
   17e52:	4816      	ldr	r0, [pc, #88]	; (17eac <k_mem_slab_alloc+0xcc>)
   17e54:	f003 ff70 	bl	1bd38 <assert_print>
   17e58:	21c2      	movs	r1, #194	; 0xc2
   17e5a:	e7e0      	b.n	17e1e <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17e5c:	ea58 0207 	orrs.w	r2, r8, r7
   17e60:	d103      	bne.n	17e6a <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   17e62:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   17e66:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   17e68:	e7e8      	b.n	17e3c <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   17e6a:	4622      	mov	r2, r4
   17e6c:	4649      	mov	r1, r9
   17e6e:	4628      	mov	r0, r5
   17e70:	e9cd 8700 	strd	r8, r7, [sp]
   17e74:	f001 ff94 	bl	19da0 <z_pend_curr>
		if (result == 0) {
   17e78:	4604      	mov	r4, r0
   17e7a:	b918      	cbnz	r0, 17e84 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   17e7c:	4b0c      	ldr	r3, [pc, #48]	; (17eb0 <k_mem_slab_alloc+0xd0>)
   17e7e:	689b      	ldr	r3, [r3, #8]
   17e80:	695b      	ldr	r3, [r3, #20]
   17e82:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   17e84:	4620      	mov	r0, r4
   17e86:	b003      	add	sp, #12
   17e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   17e8c:	f389 8811 	msr	BASEPRI, r9
   17e90:	f3bf 8f6f 	isb	sy
	return result;
   17e94:	e7f6      	b.n	17e84 <k_mem_slab_alloc+0xa4>
   17e96:	bf00      	nop
   17e98:	000209d8 	.word	0x000209d8
   17e9c:	00020a31 	.word	0x00020a31
   17ea0:	000205a4 	.word	0x000205a4
   17ea4:	00020a46 	.word	0x00020a46
   17ea8:	00020a05 	.word	0x00020a05
   17eac:	00020a1c 	.word	0x00020a1c
   17eb0:	20009b48 	.word	0x20009b48

00017eb4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   17eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17eb8:	4604      	mov	r4, r0
   17eba:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   17ebc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   17ec0:	f04f 0320 	mov.w	r3, #32
   17ec4:	f3ef 8711 	mrs	r7, BASEPRI
   17ec8:	f383 8812 	msr	BASEPRI_MAX, r3
   17ecc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ed0:	4628      	mov	r0, r5
   17ed2:	f000 f96f 	bl	181b4 <z_spin_lock_valid>
   17ed6:	b968      	cbnz	r0, 17ef4 <k_mem_slab_free+0x40>
   17ed8:	2394      	movs	r3, #148	; 0x94
   17eda:	4a21      	ldr	r2, [pc, #132]	; (17f60 <k_mem_slab_free+0xac>)
   17edc:	4921      	ldr	r1, [pc, #132]	; (17f64 <k_mem_slab_free+0xb0>)
   17ede:	4822      	ldr	r0, [pc, #136]	; (17f68 <k_mem_slab_free+0xb4>)
   17ee0:	f003 ff2a 	bl	1bd38 <assert_print>
   17ee4:	4629      	mov	r1, r5
   17ee6:	4821      	ldr	r0, [pc, #132]	; (17f6c <k_mem_slab_free+0xb8>)
   17ee8:	f003 ff26 	bl	1bd38 <assert_print>
   17eec:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17eee:	481c      	ldr	r0, [pc, #112]	; (17f60 <k_mem_slab_free+0xac>)
   17ef0:	f003 ff1b 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   17ef4:	4628      	mov	r0, r5
   17ef6:	f000 f979 	bl	181ec <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   17efa:	f8d4 8018 	ldr.w	r8, [r4, #24]
   17efe:	f1b8 0f00 	cmp.w	r8, #0
   17f02:	d10f      	bne.n	17f24 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   17f04:	4620      	mov	r0, r4
   17f06:	f002 f9c9 	bl	1a29c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   17f0a:	b158      	cbz	r0, 17f24 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   17f0c:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17f0e:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17f12:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   17f14:	f001 fbea 	bl	196ec <z_ready_thread>
			z_reschedule(&slab->lock, key);
   17f18:	4639      	mov	r1, r7
   17f1a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   17f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   17f20:	f001 bc70 	b.w	19804 <z_reschedule>
	**(char ***) mem = slab->free_list;
   17f24:	6833      	ldr	r3, [r6, #0]
   17f26:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f28:	4628      	mov	r0, r5
   17f2a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   17f2c:	6833      	ldr	r3, [r6, #0]
   17f2e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   17f30:	69e3      	ldr	r3, [r4, #28]
   17f32:	3b01      	subs	r3, #1
   17f34:	61e3      	str	r3, [r4, #28]
   17f36:	f000 f94b 	bl	181d0 <z_spin_unlock_valid>
   17f3a:	b958      	cbnz	r0, 17f54 <k_mem_slab_free+0xa0>
   17f3c:	23c2      	movs	r3, #194	; 0xc2
   17f3e:	4a08      	ldr	r2, [pc, #32]	; (17f60 <k_mem_slab_free+0xac>)
   17f40:	490b      	ldr	r1, [pc, #44]	; (17f70 <k_mem_slab_free+0xbc>)
   17f42:	4809      	ldr	r0, [pc, #36]	; (17f68 <k_mem_slab_free+0xb4>)
   17f44:	f003 fef8 	bl	1bd38 <assert_print>
   17f48:	4629      	mov	r1, r5
   17f4a:	480a      	ldr	r0, [pc, #40]	; (17f74 <k_mem_slab_free+0xc0>)
   17f4c:	f003 fef4 	bl	1bd38 <assert_print>
   17f50:	21c2      	movs	r1, #194	; 0xc2
   17f52:	e7cc      	b.n	17eee <k_mem_slab_free+0x3a>
	__asm__ volatile(
   17f54:	f387 8811 	msr	BASEPRI, r7
   17f58:	f3bf 8f6f 	isb	sy
}
   17f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f60:	000209d8 	.word	0x000209d8
   17f64:	00020a31 	.word	0x00020a31
   17f68:	000205a4 	.word	0x000205a4
   17f6c:	00020a46 	.word	0x00020a46
   17f70:	00020a05 	.word	0x00020a05
   17f74:	00020a1c 	.word	0x00020a1c

00017f78 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17f78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   17f7a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   17f7c:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   17f7e:	2e0f      	cmp	r6, #15
   17f80:	d12a      	bne.n	17fd8 <z_setup_new_thread+0x60>
   17f82:	4821      	ldr	r0, [pc, #132]	; (18008 <z_setup_new_thread+0x90>)
   17f84:	4283      	cmp	r3, r0
   17f86:	d12b      	bne.n	17fe0 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   17f88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   17f8c:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17f90:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   17f92:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   17f94:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   17f96:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17f98:	3207      	adds	r2, #7
   17f9a:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   17f9e:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   17fa2:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   17fa4:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   17fa8:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   17faa:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   17fae:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   17fb0:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   17fb2:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17fb4:	9202      	str	r2, [sp, #8]
   17fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17fb8:	4620      	mov	r0, r4
   17fba:	9201      	str	r2, [sp, #4]
   17fbc:	9a08      	ldr	r2, [sp, #32]
   17fbe:	9200      	str	r2, [sp, #0]
   17fc0:	4632      	mov	r2, r6
   17fc2:	f7f4 ff49 	bl	ce58 <arch_new_thread>
	if (!_current) {
   17fc6:	4b11      	ldr	r3, [pc, #68]	; (1800c <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   17fc8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   17fca:	689b      	ldr	r3, [r3, #8]
   17fcc:	b103      	cbz	r3, 17fd0 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   17fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   17fd0:	4630      	mov	r0, r6
   17fd2:	6763      	str	r3, [r4, #116]	; 0x74
   17fd4:	b004      	add	sp, #16
   17fd6:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   17fd8:	f106 0010 	add.w	r0, r6, #16
   17fdc:	281e      	cmp	r0, #30
   17fde:	d9d3      	bls.n	17f88 <z_setup_new_thread+0x10>
   17fe0:	f44f 7306 	mov.w	r3, #536	; 0x218
   17fe4:	4a0a      	ldr	r2, [pc, #40]	; (18010 <z_setup_new_thread+0x98>)
   17fe6:	490b      	ldr	r1, [pc, #44]	; (18014 <z_setup_new_thread+0x9c>)
   17fe8:	480b      	ldr	r0, [pc, #44]	; (18018 <z_setup_new_thread+0xa0>)
   17fea:	f003 fea5 	bl	1bd38 <assert_print>
   17fee:	4631      	mov	r1, r6
   17ff0:	480a      	ldr	r0, [pc, #40]	; (1801c <z_setup_new_thread+0xa4>)
   17ff2:	f06f 030f 	mvn.w	r3, #15
   17ff6:	220e      	movs	r2, #14
   17ff8:	f003 fe9e 	bl	1bd38 <assert_print>
   17ffc:	f44f 7106 	mov.w	r1, #536	; 0x218
   18000:	4803      	ldr	r0, [pc, #12]	; (18010 <z_setup_new_thread+0x98>)
   18002:	f003 fe92 	bl	1bd2a <assert_post_action>
   18006:	bf00      	nop
   18008:	000181fd 	.word	0x000181fd
   1800c:	20009b48 	.word	0x20009b48
   18010:	00023d9a 	.word	0x00023d9a
   18014:	00023dbd 	.word	0x00023dbd
   18018:	000205a4 	.word	0x000205a4
   1801c:	00023e3d 	.word	0x00023e3d

00018020 <z_impl_k_thread_create>:
{
   18020:	b5f0      	push	{r4, r5, r6, r7, lr}
   18022:	b087      	sub	sp, #28
   18024:	4604      	mov	r4, r0
   18026:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1802a:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1802e:	b175      	cbz	r5, 1804e <z_impl_k_thread_create+0x2e>
   18030:	4919      	ldr	r1, [pc, #100]	; (18098 <z_impl_k_thread_create+0x78>)
   18032:	f240 2387 	movw	r3, #647	; 0x287
   18036:	4a19      	ldr	r2, [pc, #100]	; (1809c <z_impl_k_thread_create+0x7c>)
   18038:	4819      	ldr	r0, [pc, #100]	; (180a0 <z_impl_k_thread_create+0x80>)
   1803a:	f003 fe7d 	bl	1bd38 <assert_print>
   1803e:	4819      	ldr	r0, [pc, #100]	; (180a4 <z_impl_k_thread_create+0x84>)
   18040:	f003 fe7a 	bl	1bd38 <assert_print>
   18044:	f240 2187 	movw	r1, #647	; 0x287
   18048:	4814      	ldr	r0, [pc, #80]	; (1809c <z_impl_k_thread_create+0x7c>)
   1804a:	f003 fe6e 	bl	1bd2a <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1804e:	9505      	str	r5, [sp, #20]
   18050:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18052:	9504      	str	r5, [sp, #16]
   18054:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   18056:	9503      	str	r5, [sp, #12]
   18058:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1805a:	9502      	str	r5, [sp, #8]
   1805c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1805e:	9501      	str	r5, [sp, #4]
   18060:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18062:	9500      	str	r5, [sp, #0]
   18064:	f7ff ff88 	bl	17f78 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   18068:	f1b6 3fff 	cmp.w	r6, #4294967295
   1806c:	bf08      	it	eq
   1806e:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   18072:	d005      	beq.n	18080 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18074:	ea56 0307 	orrs.w	r3, r6, r7
   18078:	d105      	bne.n	18086 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   1807a:	4620      	mov	r0, r4
   1807c:	f001 fc04 	bl	19888 <z_sched_start>
}
   18080:	4620      	mov	r0, r4
   18082:	b007      	add	sp, #28
   18084:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18086:	463a      	mov	r2, r7
   18088:	4633      	mov	r3, r6
   1808a:	4907      	ldr	r1, [pc, #28]	; (180a8 <z_impl_k_thread_create+0x88>)
   1808c:	f104 0018 	add.w	r0, r4, #24
   18090:	f002 fc74 	bl	1a97c <z_add_timeout>
   18094:	e7f4      	b.n	18080 <z_impl_k_thread_create+0x60>
   18096:	bf00      	nop
   18098:	00023e6e 	.word	0x00023e6e
   1809c:	00023d9a 	.word	0x00023d9a
   180a0:	000205a4 	.word	0x000205a4
   180a4:	00023e80 	.word	0x00023e80
   180a8:	0001a155 	.word	0x0001a155

000180ac <z_init_static_threads>:
{
   180ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   180b0:	4c39      	ldr	r4, [pc, #228]	; (18198 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   180b2:	4d3a      	ldr	r5, [pc, #232]	; (1819c <z_init_static_threads+0xf0>)
{
   180b4:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   180b6:	42ac      	cmp	r4, r5
   180b8:	4626      	mov	r6, r4
   180ba:	d92a      	bls.n	18112 <z_init_static_threads+0x66>
   180bc:	4938      	ldr	r1, [pc, #224]	; (181a0 <z_init_static_threads+0xf4>)
   180be:	f240 23ee 	movw	r3, #750	; 0x2ee
   180c2:	4a38      	ldr	r2, [pc, #224]	; (181a4 <z_init_static_threads+0xf8>)
   180c4:	4838      	ldr	r0, [pc, #224]	; (181a8 <z_init_static_threads+0xfc>)
   180c6:	f003 fe37 	bl	1bd38 <assert_print>
   180ca:	4838      	ldr	r0, [pc, #224]	; (181ac <z_init_static_threads+0x100>)
   180cc:	f003 fe34 	bl	1bd38 <assert_print>
   180d0:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   180d4:	4833      	ldr	r0, [pc, #204]	; (181a4 <z_init_static_threads+0xf8>)
   180d6:	f003 fe28 	bl	1bd2a <assert_post_action>
		z_setup_new_thread(
   180da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   180de:	9305      	str	r3, [sp, #20]
   180e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   180e4:	9304      	str	r3, [sp, #16]
   180e6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   180ea:	9303      	str	r3, [sp, #12]
   180ec:	f854 3c18 	ldr.w	r3, [r4, #-24]
   180f0:	9302      	str	r3, [sp, #8]
   180f2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   180f6:	9301      	str	r3, [sp, #4]
   180f8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   180fc:	9300      	str	r3, [sp, #0]
   180fe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18102:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18106:	f7ff ff37 	bl	17f78 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1810a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1810e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   18110:	e7d1      	b.n	180b6 <z_init_static_threads+0xa>
   18112:	42ae      	cmp	r6, r5
   18114:	f104 0430 	add.w	r4, r4, #48	; 0x30
   18118:	d3df      	bcc.n	180da <z_init_static_threads+0x2e>
	k_sched_lock();
   1811a:	f001 fc07 	bl	1992c <k_sched_lock>
   1811e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   18122:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   18126:	4c1c      	ldr	r4, [pc, #112]	; (18198 <z_init_static_threads+0xec>)
   18128:	f8df 9084 	ldr.w	r9, [pc, #132]	; 181b0 <z_init_static_threads+0x104>
   1812c:	42ac      	cmp	r4, r5
   1812e:	d92c      	bls.n	1818a <z_init_static_threads+0xde>
   18130:	491b      	ldr	r1, [pc, #108]	; (181a0 <z_init_static_threads+0xf4>)
   18132:	f240 330d 	movw	r3, #781	; 0x30d
   18136:	4a1b      	ldr	r2, [pc, #108]	; (181a4 <z_init_static_threads+0xf8>)
   18138:	481b      	ldr	r0, [pc, #108]	; (181a8 <z_init_static_threads+0xfc>)
   1813a:	f003 fdfd 	bl	1bd38 <assert_print>
   1813e:	481b      	ldr	r0, [pc, #108]	; (181ac <z_init_static_threads+0x100>)
   18140:	f003 fdfa 	bl	1bd38 <assert_print>
   18144:	f240 310d 	movw	r1, #781	; 0x30d
   18148:	e7c4      	b.n	180d4 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1814a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1814c:	1c5a      	adds	r2, r3, #1
   1814e:	d00d      	beq.n	1816c <z_init_static_threads+0xc0>
   18150:	2100      	movs	r1, #0
   18152:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   18154:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18158:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1815c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   18160:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18164:	d104      	bne.n	18170 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   18166:	4640      	mov	r0, r8
   18168:	f001 fb8e 	bl	19888 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1816c:	3430      	adds	r4, #48	; 0x30
   1816e:	e7dd      	b.n	1812c <z_init_static_threads+0x80>
   18170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18174:	2300      	movs	r3, #0
   18176:	f7f0 fbdd 	bl	8934 <__aeabi_uldivmod>
   1817a:	4602      	mov	r2, r0
   1817c:	460b      	mov	r3, r1
   1817e:	f108 0018 	add.w	r0, r8, #24
   18182:	4649      	mov	r1, r9
   18184:	f002 fbfa 	bl	1a97c <z_add_timeout>
   18188:	e7f0      	b.n	1816c <z_init_static_threads+0xc0>
   1818a:	d3de      	bcc.n	1814a <z_init_static_threads+0x9e>
}
   1818c:	b007      	add	sp, #28
   1818e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   18192:	f001 bc37 	b.w	19a04 <k_sched_unlock>
   18196:	bf00      	nop
   18198:	0001f7f8 	.word	0x0001f7f8
   1819c:	0001f828 	.word	0x0001f828
   181a0:	00023ea5 	.word	0x00023ea5
   181a4:	00023d9a 	.word	0x00023d9a
   181a8:	000205a4 	.word	0x000205a4
   181ac:	00020cc7 	.word	0x00020cc7
   181b0:	0001a155 	.word	0x0001a155

000181b4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   181b4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   181b6:	b138      	cbz	r0, 181c8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   181b8:	4b04      	ldr	r3, [pc, #16]	; (181cc <z_spin_lock_valid+0x18>)
   181ba:	f000 0003 	and.w	r0, r0, #3
   181be:	7d1b      	ldrb	r3, [r3, #20]
   181c0:	1ac0      	subs	r0, r0, r3
   181c2:	bf18      	it	ne
   181c4:	2001      	movne	r0, #1
   181c6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   181c8:	2001      	movs	r0, #1
}
   181ca:	4770      	bx	lr
   181cc:	20009b48 	.word	0x20009b48

000181d0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   181d0:	4a05      	ldr	r2, [pc, #20]	; (181e8 <z_spin_unlock_valid+0x18>)
{
   181d2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   181d4:	7d11      	ldrb	r1, [r2, #20]
   181d6:	6892      	ldr	r2, [r2, #8]
   181d8:	430a      	orrs	r2, r1
   181da:	6801      	ldr	r1, [r0, #0]
   181dc:	2000      	movs	r0, #0
   181de:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   181e0:	bf04      	itt	eq
   181e2:	6018      	streq	r0, [r3, #0]
	return true;
   181e4:	2001      	moveq	r0, #1
}
   181e6:	4770      	bx	lr
   181e8:	20009b48 	.word	0x20009b48

000181ec <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   181ec:	4b02      	ldr	r3, [pc, #8]	; (181f8 <z_spin_lock_set_owner+0xc>)
   181ee:	7d1a      	ldrb	r2, [r3, #20]
   181f0:	689b      	ldr	r3, [r3, #8]
   181f2:	4313      	orrs	r3, r2
   181f4:	6003      	str	r3, [r0, #0]
}
   181f6:	4770      	bx	lr
   181f8:	20009b48 	.word	0x20009b48

000181fc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   181fc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   181fe:	4c13      	ldr	r4, [pc, #76]	; (1824c <idle+0x50>)
   18200:	68a3      	ldr	r3, [r4, #8]
   18202:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18206:	2b00      	cmp	r3, #0
   18208:	db10      	blt.n	1822c <idle+0x30>
   1820a:	4d11      	ldr	r5, [pc, #68]	; (18250 <idle+0x54>)
	__asm__ volatile(
   1820c:	f04f 0220 	mov.w	r2, #32
   18210:	f3ef 8311 	mrs	r3, BASEPRI
   18214:	f382 8812 	msr	BASEPRI_MAX, r2
   18218:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1821c:	f002 fcc0 	bl	1aba0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18220:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   18222:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18224:	b963      	cbnz	r3, 18240 <idle+0x44>
	arch_cpu_idle();
   18226:	f7f4 fcbd 	bl	cba4 <arch_cpu_idle>
}
   1822a:	e7ef      	b.n	1820c <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1822c:	4909      	ldr	r1, [pc, #36]	; (18254 <idle+0x58>)
   1822e:	480a      	ldr	r0, [pc, #40]	; (18258 <idle+0x5c>)
   18230:	2327      	movs	r3, #39	; 0x27
   18232:	4a0a      	ldr	r2, [pc, #40]	; (1825c <idle+0x60>)
   18234:	f003 fd80 	bl	1bd38 <assert_print>
   18238:	2127      	movs	r1, #39	; 0x27
   1823a:	4808      	ldr	r0, [pc, #32]	; (1825c <idle+0x60>)
   1823c:	f003 fd75 	bl	1bd2a <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18240:	f7f4 fa38 	bl	c6b4 <pm_system_suspend>
   18244:	2800      	cmp	r0, #0
   18246:	d1e1      	bne.n	1820c <idle+0x10>
   18248:	e7ed      	b.n	18226 <idle+0x2a>
   1824a:	bf00      	nop
   1824c:	20009b48 	.word	0x20009b48
   18250:	20009c5d 	.word	0x20009c5d
   18254:	00023ef3 	.word	0x00023ef3
   18258:	000205a4 	.word	0x000205a4
   1825c:	00023ed2 	.word	0x00023ed2

00018260 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18264:	4604      	mov	r4, r0
   18266:	4617      	mov	r7, r2
   18268:	461e      	mov	r6, r3
   1826a:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1826e:	b165      	cbz	r5, 1828a <z_impl_k_mutex_lock+0x2a>
   18270:	4958      	ldr	r1, [pc, #352]	; (183d4 <z_impl_k_mutex_lock+0x174>)
   18272:	2365      	movs	r3, #101	; 0x65
   18274:	4a58      	ldr	r2, [pc, #352]	; (183d8 <z_impl_k_mutex_lock+0x178>)
   18276:	4859      	ldr	r0, [pc, #356]	; (183dc <z_impl_k_mutex_lock+0x17c>)
   18278:	f003 fd5e 	bl	1bd38 <assert_print>
   1827c:	4858      	ldr	r0, [pc, #352]	; (183e0 <z_impl_k_mutex_lock+0x180>)
   1827e:	f003 fd5b 	bl	1bd38 <assert_print>
   18282:	2165      	movs	r1, #101	; 0x65
   18284:	4854      	ldr	r0, [pc, #336]	; (183d8 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18286:	f003 fd50 	bl	1bd2a <assert_post_action>
   1828a:	f04f 0320 	mov.w	r3, #32
   1828e:	f3ef 8811 	mrs	r8, BASEPRI
   18292:	f383 8812 	msr	BASEPRI_MAX, r3
   18296:	f3bf 8f6f 	isb	sy
   1829a:	4852      	ldr	r0, [pc, #328]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   1829c:	f7ff ff8a 	bl	181b4 <z_spin_lock_valid>
   182a0:	b960      	cbnz	r0, 182bc <z_impl_k_mutex_lock+0x5c>
   182a2:	2394      	movs	r3, #148	; 0x94
   182a4:	4a50      	ldr	r2, [pc, #320]	; (183e8 <z_impl_k_mutex_lock+0x188>)
   182a6:	4951      	ldr	r1, [pc, #324]	; (183ec <z_impl_k_mutex_lock+0x18c>)
   182a8:	484c      	ldr	r0, [pc, #304]	; (183dc <z_impl_k_mutex_lock+0x17c>)
   182aa:	f003 fd45 	bl	1bd38 <assert_print>
   182ae:	494d      	ldr	r1, [pc, #308]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   182b0:	484f      	ldr	r0, [pc, #316]	; (183f0 <z_impl_k_mutex_lock+0x190>)
   182b2:	f003 fd41 	bl	1bd38 <assert_print>
   182b6:	2194      	movs	r1, #148	; 0x94
   182b8:	484b      	ldr	r0, [pc, #300]	; (183e8 <z_impl_k_mutex_lock+0x188>)
   182ba:	e7e4      	b.n	18286 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   182bc:	4849      	ldr	r0, [pc, #292]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   182be:	f7ff ff95 	bl	181ec <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   182c2:	68e3      	ldr	r3, [r4, #12]
   182c4:	4a4b      	ldr	r2, [pc, #300]	; (183f4 <z_impl_k_mutex_lock+0x194>)
   182c6:	b19b      	cbz	r3, 182f0 <z_impl_k_mutex_lock+0x90>
   182c8:	68a0      	ldr	r0, [r4, #8]
   182ca:	6891      	ldr	r1, [r2, #8]
   182cc:	4288      	cmp	r0, r1
   182ce:	d027      	beq.n	18320 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   182d0:	ea57 0306 	orrs.w	r3, r7, r6
   182d4:	d12c      	bne.n	18330 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182d6:	4843      	ldr	r0, [pc, #268]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   182d8:	f7ff ff7a 	bl	181d0 <z_spin_unlock_valid>
   182dc:	b1a0      	cbz	r0, 18308 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   182de:	f388 8811 	msr	BASEPRI, r8
   182e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   182e6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   182ea:	b002      	add	sp, #8
   182ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   182f0:	6891      	ldr	r1, [r2, #8]
   182f2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   182f6:	3301      	adds	r3, #1
   182f8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   182fa:	6893      	ldr	r3, [r2, #8]
   182fc:	4839      	ldr	r0, [pc, #228]	; (183e4 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   182fe:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   18300:	60a3      	str	r3, [r4, #8]
   18302:	f7ff ff65 	bl	181d0 <z_spin_unlock_valid>
   18306:	b968      	cbnz	r0, 18324 <z_impl_k_mutex_lock+0xc4>
   18308:	23c2      	movs	r3, #194	; 0xc2
   1830a:	4a37      	ldr	r2, [pc, #220]	; (183e8 <z_impl_k_mutex_lock+0x188>)
   1830c:	493a      	ldr	r1, [pc, #232]	; (183f8 <z_impl_k_mutex_lock+0x198>)
   1830e:	4833      	ldr	r0, [pc, #204]	; (183dc <z_impl_k_mutex_lock+0x17c>)
   18310:	f003 fd12 	bl	1bd38 <assert_print>
   18314:	4933      	ldr	r1, [pc, #204]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   18316:	4839      	ldr	r0, [pc, #228]	; (183fc <z_impl_k_mutex_lock+0x19c>)
   18318:	f003 fd0e 	bl	1bd38 <assert_print>
   1831c:	21c2      	movs	r1, #194	; 0xc2
   1831e:	e7cb      	b.n	182b8 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   18320:	6921      	ldr	r1, [r4, #16]
   18322:	e7e8      	b.n	182f6 <z_impl_k_mutex_lock+0x96>
   18324:	f388 8811 	msr	BASEPRI, r8
   18328:	f3bf 8f6f 	isb	sy
		return 0;
   1832c:	2000      	movs	r0, #0
   1832e:	e7dc      	b.n	182ea <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18330:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18334:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   18338:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1833c:	4299      	cmp	r1, r3
   1833e:	bfa8      	it	ge
   18340:	4619      	movge	r1, r3
   18342:	4291      	cmp	r1, r2
   18344:	bfb8      	it	lt
   18346:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18348:	428b      	cmp	r3, r1
   1834a:	dd02      	ble.n	18352 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   1834c:	f006 fe92 	bl	1f074 <adjust_owner_prio.isra.0>
   18350:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18352:	4622      	mov	r2, r4
   18354:	4641      	mov	r1, r8
   18356:	e9cd 7600 	strd	r7, r6, [sp]
   1835a:	4822      	ldr	r0, [pc, #136]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   1835c:	f001 fd20 	bl	19da0 <z_pend_curr>
	if (got_mutex == 0) {
   18360:	2800      	cmp	r0, #0
   18362:	d0e3      	beq.n	1832c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   18364:	f04f 0320 	mov.w	r3, #32
   18368:	f3ef 8611 	mrs	r6, BASEPRI
   1836c:	f383 8812 	msr	BASEPRI_MAX, r3
   18370:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18374:	481b      	ldr	r0, [pc, #108]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   18376:	f7ff ff1d 	bl	181b4 <z_spin_lock_valid>
   1837a:	2800      	cmp	r0, #0
   1837c:	d091      	beq.n	182a2 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   1837e:	4819      	ldr	r0, [pc, #100]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   18380:	f7ff ff34 	bl	181ec <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   18384:	68a0      	ldr	r0, [r4, #8]
   18386:	b1c0      	cbz	r0, 183ba <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18388:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1838a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1838c:	429c      	cmp	r4, r3
   1838e:	d00a      	beq.n	183a6 <z_impl_k_mutex_lock+0x146>
   18390:	b14b      	cbz	r3, 183a6 <z_impl_k_mutex_lock+0x146>
   18392:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18396:	4299      	cmp	r1, r3
   18398:	bfa8      	it	ge
   1839a:	4619      	movge	r1, r3
   1839c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   183a0:	4299      	cmp	r1, r3
   183a2:	bfb8      	it	lt
   183a4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   183a6:	f006 fe65 	bl	1f074 <adjust_owner_prio.isra.0>
   183aa:	b130      	cbz	r0, 183ba <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   183ac:	4631      	mov	r1, r6
   183ae:	480d      	ldr	r0, [pc, #52]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   183b0:	f001 fa28 	bl	19804 <z_reschedule>
	return -EAGAIN;
   183b4:	f06f 000a 	mvn.w	r0, #10
   183b8:	e797      	b.n	182ea <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   183ba:	2d00      	cmp	r5, #0
   183bc:	d1f6      	bne.n	183ac <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   183be:	4809      	ldr	r0, [pc, #36]	; (183e4 <z_impl_k_mutex_lock+0x184>)
   183c0:	f7ff ff06 	bl	181d0 <z_spin_unlock_valid>
   183c4:	2800      	cmp	r0, #0
   183c6:	d09f      	beq.n	18308 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   183c8:	f386 8811 	msr	BASEPRI, r6
   183cc:	f3bf 8f6f 	isb	sy
   183d0:	e7f0      	b.n	183b4 <z_impl_k_mutex_lock+0x154>
   183d2:	bf00      	nop
   183d4:	00023e6e 	.word	0x00023e6e
   183d8:	00023f1b 	.word	0x00023f1b
   183dc:	000205a4 	.word	0x000205a4
   183e0:	00023f3d 	.word	0x00023f3d
   183e4:	20009b70 	.word	0x20009b70
   183e8:	000209d8 	.word	0x000209d8
   183ec:	00020a31 	.word	0x00020a31
   183f0:	00020a46 	.word	0x00020a46
   183f4:	20009b48 	.word	0x20009b48
   183f8:	00020a05 	.word	0x00020a05
   183fc:	00020a1c 	.word	0x00020a1c

00018400 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18400:	b570      	push	{r4, r5, r6, lr}
   18402:	4604      	mov	r4, r0
   18404:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   18408:	b166      	cbz	r6, 18424 <z_impl_k_mutex_unlock+0x24>
   1840a:	4938      	ldr	r1, [pc, #224]	; (184ec <z_impl_k_mutex_unlock+0xec>)
   1840c:	23cd      	movs	r3, #205	; 0xcd
   1840e:	4a38      	ldr	r2, [pc, #224]	; (184f0 <z_impl_k_mutex_unlock+0xf0>)
   18410:	4838      	ldr	r0, [pc, #224]	; (184f4 <z_impl_k_mutex_unlock+0xf4>)
   18412:	f003 fc91 	bl	1bd38 <assert_print>
   18416:	4838      	ldr	r0, [pc, #224]	; (184f8 <z_impl_k_mutex_unlock+0xf8>)
   18418:	f003 fc8e 	bl	1bd38 <assert_print>
   1841c:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1841e:	4834      	ldr	r0, [pc, #208]	; (184f0 <z_impl_k_mutex_unlock+0xf0>)
   18420:	f003 fc83 	bl	1bd2a <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   18424:	6883      	ldr	r3, [r0, #8]
   18426:	2b00      	cmp	r3, #0
   18428:	d059      	beq.n	184de <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   1842a:	4a34      	ldr	r2, [pc, #208]	; (184fc <z_impl_k_mutex_unlock+0xfc>)
   1842c:	6892      	ldr	r2, [r2, #8]
   1842e:	4293      	cmp	r3, r2
   18430:	d158      	bne.n	184e4 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   18432:	68c3      	ldr	r3, [r0, #12]
   18434:	b93b      	cbnz	r3, 18446 <z_impl_k_mutex_unlock+0x46>
   18436:	4932      	ldr	r1, [pc, #200]	; (18500 <z_impl_k_mutex_unlock+0x100>)
   18438:	23e5      	movs	r3, #229	; 0xe5
   1843a:	4a2d      	ldr	r2, [pc, #180]	; (184f0 <z_impl_k_mutex_unlock+0xf0>)
   1843c:	482d      	ldr	r0, [pc, #180]	; (184f4 <z_impl_k_mutex_unlock+0xf4>)
   1843e:	f003 fc7b 	bl	1bd38 <assert_print>
   18442:	21e5      	movs	r1, #229	; 0xe5
   18444:	e7eb      	b.n	1841e <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   18446:	2b01      	cmp	r3, #1
   18448:	d003      	beq.n	18452 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   1844a:	3b01      	subs	r3, #1
   1844c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1844e:	2000      	movs	r0, #0
}
   18450:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   18452:	f04f 0320 	mov.w	r3, #32
   18456:	f3ef 8511 	mrs	r5, BASEPRI
   1845a:	f383 8812 	msr	BASEPRI_MAX, r3
   1845e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18462:	4828      	ldr	r0, [pc, #160]	; (18504 <z_impl_k_mutex_unlock+0x104>)
   18464:	f7ff fea6 	bl	181b4 <z_spin_lock_valid>
   18468:	b960      	cbnz	r0, 18484 <z_impl_k_mutex_unlock+0x84>
   1846a:	2394      	movs	r3, #148	; 0x94
   1846c:	4a26      	ldr	r2, [pc, #152]	; (18508 <z_impl_k_mutex_unlock+0x108>)
   1846e:	4927      	ldr	r1, [pc, #156]	; (1850c <z_impl_k_mutex_unlock+0x10c>)
   18470:	4820      	ldr	r0, [pc, #128]	; (184f4 <z_impl_k_mutex_unlock+0xf4>)
   18472:	f003 fc61 	bl	1bd38 <assert_print>
   18476:	4923      	ldr	r1, [pc, #140]	; (18504 <z_impl_k_mutex_unlock+0x104>)
   18478:	4825      	ldr	r0, [pc, #148]	; (18510 <z_impl_k_mutex_unlock+0x110>)
   1847a:	f003 fc5d 	bl	1bd38 <assert_print>
   1847e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18480:	4821      	ldr	r0, [pc, #132]	; (18508 <z_impl_k_mutex_unlock+0x108>)
   18482:	e7cd      	b.n	18420 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   18484:	481f      	ldr	r0, [pc, #124]	; (18504 <z_impl_k_mutex_unlock+0x104>)
   18486:	f7ff feb1 	bl	181ec <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1848a:	6921      	ldr	r1, [r4, #16]
   1848c:	68a0      	ldr	r0, [r4, #8]
   1848e:	f006 fdf1 	bl	1f074 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18492:	4620      	mov	r0, r4
   18494:	f001 ff02 	bl	1a29c <z_unpend_first_thread>
	mutex->owner = new_owner;
   18498:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1849a:	b150      	cbz	r0, 184b2 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   1849c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   184a0:	6122      	str	r2, [r4, #16]
   184a2:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   184a4:	f001 f922 	bl	196ec <z_ready_thread>
		z_reschedule(&lock, key);
   184a8:	4629      	mov	r1, r5
   184aa:	4816      	ldr	r0, [pc, #88]	; (18504 <z_impl_k_mutex_unlock+0x104>)
   184ac:	f001 f9aa 	bl	19804 <z_reschedule>
   184b0:	e7cd      	b.n	1844e <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   184b2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   184b4:	4813      	ldr	r0, [pc, #76]	; (18504 <z_impl_k_mutex_unlock+0x104>)
   184b6:	f7ff fe8b 	bl	181d0 <z_spin_unlock_valid>
   184ba:	b958      	cbnz	r0, 184d4 <z_impl_k_mutex_unlock+0xd4>
   184bc:	23c2      	movs	r3, #194	; 0xc2
   184be:	4a12      	ldr	r2, [pc, #72]	; (18508 <z_impl_k_mutex_unlock+0x108>)
   184c0:	4914      	ldr	r1, [pc, #80]	; (18514 <z_impl_k_mutex_unlock+0x114>)
   184c2:	480c      	ldr	r0, [pc, #48]	; (184f4 <z_impl_k_mutex_unlock+0xf4>)
   184c4:	f003 fc38 	bl	1bd38 <assert_print>
   184c8:	490e      	ldr	r1, [pc, #56]	; (18504 <z_impl_k_mutex_unlock+0x104>)
   184ca:	4813      	ldr	r0, [pc, #76]	; (18518 <z_impl_k_mutex_unlock+0x118>)
   184cc:	f003 fc34 	bl	1bd38 <assert_print>
   184d0:	21c2      	movs	r1, #194	; 0xc2
   184d2:	e7d5      	b.n	18480 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   184d4:	f385 8811 	msr	BASEPRI, r5
   184d8:	f3bf 8f6f 	isb	sy
   184dc:	e7b7      	b.n	1844e <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   184de:	f06f 0015 	mvn.w	r0, #21
   184e2:	e7b5      	b.n	18450 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   184e4:	f04f 30ff 	mov.w	r0, #4294967295
   184e8:	e7b2      	b.n	18450 <z_impl_k_mutex_unlock+0x50>
   184ea:	bf00      	nop
   184ec:	00023e6e 	.word	0x00023e6e
   184f0:	00023f1b 	.word	0x00023f1b
   184f4:	000205a4 	.word	0x000205a4
   184f8:	00023f3d 	.word	0x00023f3d
   184fc:	20009b48 	.word	0x20009b48
   18500:	00023f62 	.word	0x00023f62
   18504:	20009b70 	.word	0x20009b70
   18508:	000209d8 	.word	0x000209d8
   1850c:	00020a31 	.word	0x00020a31
   18510:	00020a46 	.word	0x00020a46
   18514:	00020a05 	.word	0x00020a05
   18518:	00020a1c 	.word	0x00020a1c

0001851c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18520:	4604      	mov	r4, r0
   18522:	460e      	mov	r6, r1
   18524:	4690      	mov	r8, r2
   18526:	4699      	mov	r9, r3
   18528:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1852c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   18530:	f04f 0320 	mov.w	r3, #32
   18534:	f3ef 8711 	mrs	r7, BASEPRI
   18538:	f383 8812 	msr	BASEPRI_MAX, r3
   1853c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18540:	4628      	mov	r0, r5
   18542:	f7ff fe37 	bl	181b4 <z_spin_lock_valid>
   18546:	b968      	cbnz	r0, 18564 <queue_insert+0x48>
   18548:	2394      	movs	r3, #148	; 0x94
   1854a:	4a3b      	ldr	r2, [pc, #236]	; (18638 <queue_insert+0x11c>)
   1854c:	493b      	ldr	r1, [pc, #236]	; (1863c <queue_insert+0x120>)
   1854e:	483c      	ldr	r0, [pc, #240]	; (18640 <queue_insert+0x124>)
   18550:	f003 fbf2 	bl	1bd38 <assert_print>
   18554:	4629      	mov	r1, r5
   18556:	483b      	ldr	r0, [pc, #236]	; (18644 <queue_insert+0x128>)
   18558:	f003 fbee 	bl	1bd38 <assert_print>
   1855c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1855e:	4836      	ldr	r0, [pc, #216]	; (18638 <queue_insert+0x11c>)
   18560:	f003 fbe3 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   18564:	4628      	mov	r0, r5
   18566:	f7ff fe41 	bl	181ec <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1856a:	f1ba 0f00 	cmp.w	sl, #0
   1856e:	d000      	beq.n	18572 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   18570:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   18572:	f104 000c 	add.w	r0, r4, #12
   18576:	f001 fe91 	bl	1a29c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1857a:	b158      	cbz	r0, 18594 <queue_insert+0x78>
   1857c:	2300      	movs	r3, #0
   1857e:	f8c0 8014 	str.w	r8, [r0, #20]
   18582:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   18584:	f001 f8b2 	bl	196ec <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   18588:	4628      	mov	r0, r5
   1858a:	4639      	mov	r1, r7
   1858c:	f001 f93a 	bl	19804 <z_reschedule>
		return 0;
   18590:	2000      	movs	r0, #0
   18592:	e01c      	b.n	185ce <queue_insert+0xb2>
	if (alloc) {
   18594:	f1b9 0f00 	cmp.w	r9, #0
   18598:	d02b      	beq.n	185f2 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   1859a:	2108      	movs	r1, #8
   1859c:	f003 f938 	bl	1b810 <z_thread_aligned_alloc>
		if (anode == NULL) {
   185a0:	b9b8      	cbnz	r0, 185d2 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   185a2:	4628      	mov	r0, r5
   185a4:	f7ff fe14 	bl	181d0 <z_spin_unlock_valid>
   185a8:	b958      	cbnz	r0, 185c2 <queue_insert+0xa6>
   185aa:	23c2      	movs	r3, #194	; 0xc2
   185ac:	4a22      	ldr	r2, [pc, #136]	; (18638 <queue_insert+0x11c>)
   185ae:	4926      	ldr	r1, [pc, #152]	; (18648 <queue_insert+0x12c>)
   185b0:	4823      	ldr	r0, [pc, #140]	; (18640 <queue_insert+0x124>)
   185b2:	f003 fbc1 	bl	1bd38 <assert_print>
   185b6:	4629      	mov	r1, r5
   185b8:	4824      	ldr	r0, [pc, #144]	; (1864c <queue_insert+0x130>)
   185ba:	f003 fbbd 	bl	1bd38 <assert_print>
   185be:	21c2      	movs	r1, #194	; 0xc2
   185c0:	e7cd      	b.n	1855e <queue_insert+0x42>
	__asm__ volatile(
   185c2:	f387 8811 	msr	BASEPRI, r7
   185c6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   185ca:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   185ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   185d2:	2201      	movs	r2, #1
		anode->data = data;
   185d4:	f8c0 8004 	str.w	r8, [r0, #4]
   185d8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   185da:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   185dc:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   185e0:	b95e      	cbnz	r6, 185fa <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   185e2:	6822      	ldr	r2, [r4, #0]
   185e4:	430a      	orrs	r2, r1
   185e6:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   185e8:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   185ea:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   185ec:	b96a      	cbnz	r2, 1860a <queue_insert+0xee>
	list->tail = node;
   185ee:	6060      	str	r0, [r4, #4]
}
   185f0:	e00b      	b.n	1860a <queue_insert+0xee>
}
   185f2:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   185f4:	f8c8 9000 	str.w	r9, [r8]
}
   185f8:	e7ef      	b.n	185da <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   185fa:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   185fc:	2a03      	cmp	r2, #3
   185fe:	d810      	bhi.n	18622 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18600:	6001      	str	r1, [r0, #0]
	return list->tail;
   18602:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   18604:	b939      	cbnz	r1, 18616 <queue_insert+0xfa>
	list->head = node;
   18606:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1860a:	2104      	movs	r1, #4
   1860c:	f104 0014 	add.w	r0, r4, #20
   18610:	f006 fef2 	bl	1f3f8 <z_handle_obj_poll_events>
   18614:	e7b8      	b.n	18588 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18616:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18618:	f002 0203 	and.w	r2, r2, #3
   1861c:	4302      	orrs	r2, r0
   1861e:	600a      	str	r2, [r1, #0]
   18620:	e7e5      	b.n	185ee <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18622:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   18626:	430a      	orrs	r2, r1
   18628:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1862a:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1862c:	f002 0203 	and.w	r2, r2, #3
   18630:	ea40 0302 	orr.w	r3, r0, r2
   18634:	6033      	str	r3, [r6, #0]
}
   18636:	e7e8      	b.n	1860a <queue_insert+0xee>
   18638:	000209d8 	.word	0x000209d8
   1863c:	00020a31 	.word	0x00020a31
   18640:	000205a4 	.word	0x000205a4
   18644:	00020a46 	.word	0x00020a46
   18648:	00020a05 	.word	0x00020a05
   1864c:	00020a1c 	.word	0x00020a1c

00018650 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   18650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18654:	4605      	mov	r5, r0
   18656:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   18658:	460c      	mov	r4, r1
   1865a:	2900      	cmp	r1, #0
   1865c:	d04a      	beq.n	186f4 <k_queue_append_list+0xa4>
   1865e:	2a00      	cmp	r2, #0
   18660:	d048      	beq.n	186f4 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18662:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   18666:	f04f 0320 	mov.w	r3, #32
   1866a:	f3ef 8911 	mrs	r9, BASEPRI
   1866e:	f383 8812 	msr	BASEPRI_MAX, r3
   18672:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18676:	4630      	mov	r0, r6
   18678:	f7ff fd9c 	bl	181b4 <z_spin_lock_valid>
   1867c:	b968      	cbnz	r0, 1869a <k_queue_append_list+0x4a>
   1867e:	2394      	movs	r3, #148	; 0x94
   18680:	4a1e      	ldr	r2, [pc, #120]	; (186fc <k_queue_append_list+0xac>)
   18682:	491f      	ldr	r1, [pc, #124]	; (18700 <k_queue_append_list+0xb0>)
   18684:	481f      	ldr	r0, [pc, #124]	; (18704 <k_queue_append_list+0xb4>)
   18686:	f003 fb57 	bl	1bd38 <assert_print>
   1868a:	4631      	mov	r1, r6
   1868c:	481e      	ldr	r0, [pc, #120]	; (18708 <k_queue_append_list+0xb8>)
   1868e:	f003 fb53 	bl	1bd38 <assert_print>
   18692:	2194      	movs	r1, #148	; 0x94
   18694:	4819      	ldr	r0, [pc, #100]	; (186fc <k_queue_append_list+0xac>)
   18696:	f003 fb48 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1869a:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1869c:	f105 080c 	add.w	r8, r5, #12
   186a0:	f7ff fda4 	bl	181ec <z_spin_lock_set_owner>
   186a4:	4640      	mov	r0, r8
   186a6:	f001 fdf9 	bl	1a29c <z_unpend_first_thread>
	}

	while ((head != NULL) && (thread != NULL)) {
   186aa:	b168      	cbz	r0, 186c8 <k_queue_append_list+0x78>
   186ac:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   186b0:	6144      	str	r4, [r0, #20]
   186b2:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   186b6:	f001 f819 	bl	196ec <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   186ba:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   186bc:	4640      	mov	r0, r8
   186be:	f001 fded 	bl	1a29c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   186c2:	b12c      	cbz	r4, 186d0 <k_queue_append_list+0x80>
   186c4:	2800      	cmp	r0, #0
   186c6:	d1f3      	bne.n	186b0 <k_queue_append_list+0x60>
	return list->tail;
   186c8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   186ca:	b96b      	cbnz	r3, 186e8 <k_queue_append_list+0x98>
	list->head = node;
   186cc:	602c      	str	r4, [r5, #0]
	list->tail = node;
   186ce:	606f      	str	r7, [r5, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   186d0:	2104      	movs	r1, #4
   186d2:	f105 0014 	add.w	r0, r5, #20
   186d6:	f006 fe8f 	bl	1f3f8 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   186da:	4630      	mov	r0, r6
   186dc:	4649      	mov	r1, r9
   186de:	f001 f891 	bl	19804 <z_reschedule>
	return 0;
   186e2:	2000      	movs	r0, #0
}
   186e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   186e8:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   186ea:	f002 0203 	and.w	r2, r2, #3
   186ee:	4314      	orrs	r4, r2
   186f0:	601c      	str	r4, [r3, #0]
}
   186f2:	e7ec      	b.n	186ce <k_queue_append_list+0x7e>
		return -EINVAL;
   186f4:	f06f 0015 	mvn.w	r0, #21
   186f8:	e7f4      	b.n	186e4 <k_queue_append_list+0x94>
   186fa:	bf00      	nop
   186fc:	000209d8 	.word	0x000209d8
   18700:	00020a31 	.word	0x00020a31
   18704:	000205a4 	.word	0x000205a4
   18708:	00020a46 	.word	0x00020a46

0001870c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1870c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18710:	4606      	mov	r6, r0
   18712:	4691      	mov	r9, r2
   18714:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18716:	f100 0508 	add.w	r5, r0, #8
   1871a:	f04f 0320 	mov.w	r3, #32
   1871e:	f3ef 8811 	mrs	r8, BASEPRI
   18722:	f383 8812 	msr	BASEPRI_MAX, r3
   18726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1872a:	4628      	mov	r0, r5
   1872c:	f7ff fd42 	bl	181b4 <z_spin_lock_valid>
   18730:	b968      	cbnz	r0, 1874e <z_impl_k_queue_get+0x42>
   18732:	2394      	movs	r3, #148	; 0x94
   18734:	4a23      	ldr	r2, [pc, #140]	; (187c4 <z_impl_k_queue_get+0xb8>)
   18736:	4924      	ldr	r1, [pc, #144]	; (187c8 <z_impl_k_queue_get+0xbc>)
   18738:	4824      	ldr	r0, [pc, #144]	; (187cc <z_impl_k_queue_get+0xc0>)
   1873a:	f003 fafd 	bl	1bd38 <assert_print>
   1873e:	4629      	mov	r1, r5
   18740:	4823      	ldr	r0, [pc, #140]	; (187d0 <z_impl_k_queue_get+0xc4>)
   18742:	f003 faf9 	bl	1bd38 <assert_print>
   18746:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18748:	481e      	ldr	r0, [pc, #120]	; (187c4 <z_impl_k_queue_get+0xb8>)
   1874a:	f003 faee 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1874e:	4628      	mov	r0, r5
   18750:	f7ff fd4c 	bl	181ec <z_spin_lock_set_owner>
	return list->head;
   18754:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18756:	b1ec      	cbz	r4, 18794 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18758:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1875a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1875c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18760:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18762:	4620      	mov	r0, r4
   18764:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   18768:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1876a:	bf08      	it	eq
   1876c:	6073      	streq	r3, [r6, #4]
   1876e:	f006 fc90 	bl	1f092 <z_queue_node_peek>
   18772:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18774:	4628      	mov	r0, r5
   18776:	f7ff fd2b 	bl	181d0 <z_spin_unlock_valid>
   1877a:	b9d8      	cbnz	r0, 187b4 <z_impl_k_queue_get+0xa8>
   1877c:	23c2      	movs	r3, #194	; 0xc2
   1877e:	4a11      	ldr	r2, [pc, #68]	; (187c4 <z_impl_k_queue_get+0xb8>)
   18780:	4914      	ldr	r1, [pc, #80]	; (187d4 <z_impl_k_queue_get+0xc8>)
   18782:	4812      	ldr	r0, [pc, #72]	; (187cc <z_impl_k_queue_get+0xc0>)
   18784:	f003 fad8 	bl	1bd38 <assert_print>
   18788:	4629      	mov	r1, r5
   1878a:	4813      	ldr	r0, [pc, #76]	; (187d8 <z_impl_k_queue_get+0xcc>)
   1878c:	f003 fad4 	bl	1bd38 <assert_print>
   18790:	21c2      	movs	r1, #194	; 0xc2
   18792:	e7d9      	b.n	18748 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18794:	ea59 0307 	orrs.w	r3, r9, r7
   18798:	d0ec      	beq.n	18774 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1879a:	4641      	mov	r1, r8
   1879c:	4628      	mov	r0, r5
   1879e:	e9cd 9700 	strd	r9, r7, [sp]
   187a2:	f106 020c 	add.w	r2, r6, #12
   187a6:	f001 fafb 	bl	19da0 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   187aa:	b938      	cbnz	r0, 187bc <z_impl_k_queue_get+0xb0>
   187ac:	4b0b      	ldr	r3, [pc, #44]	; (187dc <z_impl_k_queue_get+0xd0>)
   187ae:	689b      	ldr	r3, [r3, #8]
   187b0:	695c      	ldr	r4, [r3, #20]
   187b2:	e003      	b.n	187bc <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   187b4:	f388 8811 	msr	BASEPRI, r8
   187b8:	f3bf 8f6f 	isb	sy
}
   187bc:	4620      	mov	r0, r4
   187be:	b003      	add	sp, #12
   187c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   187c4:	000209d8 	.word	0x000209d8
   187c8:	00020a31 	.word	0x00020a31
   187cc:	000205a4 	.word	0x000205a4
   187d0:	00020a46 	.word	0x00020a46
   187d4:	00020a05 	.word	0x00020a05
   187d8:	00020a1c 	.word	0x00020a1c
   187dc:	20009b48 	.word	0x20009b48

000187e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   187e0:	b538      	push	{r3, r4, r5, lr}
   187e2:	4604      	mov	r4, r0
	__asm__ volatile(
   187e4:	f04f 0320 	mov.w	r3, #32
   187e8:	f3ef 8511 	mrs	r5, BASEPRI
   187ec:	f383 8812 	msr	BASEPRI_MAX, r3
   187f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   187f4:	4817      	ldr	r0, [pc, #92]	; (18854 <z_impl_k_sem_give+0x74>)
   187f6:	f7ff fcdd 	bl	181b4 <z_spin_lock_valid>
   187fa:	b968      	cbnz	r0, 18818 <z_impl_k_sem_give+0x38>
   187fc:	2394      	movs	r3, #148	; 0x94
   187fe:	4a16      	ldr	r2, [pc, #88]	; (18858 <z_impl_k_sem_give+0x78>)
   18800:	4916      	ldr	r1, [pc, #88]	; (1885c <z_impl_k_sem_give+0x7c>)
   18802:	4817      	ldr	r0, [pc, #92]	; (18860 <z_impl_k_sem_give+0x80>)
   18804:	f003 fa98 	bl	1bd38 <assert_print>
   18808:	4912      	ldr	r1, [pc, #72]	; (18854 <z_impl_k_sem_give+0x74>)
   1880a:	4816      	ldr	r0, [pc, #88]	; (18864 <z_impl_k_sem_give+0x84>)
   1880c:	f003 fa94 	bl	1bd38 <assert_print>
   18810:	2194      	movs	r1, #148	; 0x94
   18812:	4811      	ldr	r0, [pc, #68]	; (18858 <z_impl_k_sem_give+0x78>)
   18814:	f003 fa89 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   18818:	480e      	ldr	r0, [pc, #56]	; (18854 <z_impl_k_sem_give+0x74>)
   1881a:	f7ff fce7 	bl	181ec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1881e:	4620      	mov	r0, r4
   18820:	f001 fd3c 	bl	1a29c <z_unpend_first_thread>

	if (thread != NULL) {
   18824:	b148      	cbz	r0, 1883a <z_impl_k_sem_give+0x5a>
   18826:	2200      	movs	r2, #0
   18828:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1882a:	f000 ff5f 	bl	196ec <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1882e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18834:	4807      	ldr	r0, [pc, #28]	; (18854 <z_impl_k_sem_give+0x74>)
   18836:	f000 bfe5 	b.w	19804 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1883a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1883e:	429a      	cmp	r2, r3
   18840:	bf18      	it	ne
   18842:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18844:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18846:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18848:	f104 0010 	add.w	r0, r4, #16
   1884c:	f006 fdd4 	bl	1f3f8 <z_handle_obj_poll_events>
}
   18850:	e7ed      	b.n	1882e <z_impl_k_sem_give+0x4e>
   18852:	bf00      	nop
   18854:	20009b74 	.word	0x20009b74
   18858:	000209d8 	.word	0x000209d8
   1885c:	00020a31 	.word	0x00020a31
   18860:	000205a4 	.word	0x000205a4
   18864:	00020a46 	.word	0x00020a46

00018868 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1886a:	4604      	mov	r4, r0
   1886c:	4616      	mov	r6, r2
   1886e:	461d      	mov	r5, r3
   18870:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   18874:	b17b      	cbz	r3, 18896 <z_impl_k_sem_take+0x2e>
   18876:	ea52 0305 	orrs.w	r3, r2, r5
   1887a:	d00c      	beq.n	18896 <z_impl_k_sem_take+0x2e>
   1887c:	492d      	ldr	r1, [pc, #180]	; (18934 <z_impl_k_sem_take+0xcc>)
   1887e:	2379      	movs	r3, #121	; 0x79
   18880:	4a2d      	ldr	r2, [pc, #180]	; (18938 <z_impl_k_sem_take+0xd0>)
   18882:	482e      	ldr	r0, [pc, #184]	; (1893c <z_impl_k_sem_take+0xd4>)
   18884:	f003 fa58 	bl	1bd38 <assert_print>
   18888:	482d      	ldr	r0, [pc, #180]	; (18940 <z_impl_k_sem_take+0xd8>)
   1888a:	f003 fa55 	bl	1bd38 <assert_print>
   1888e:	2179      	movs	r1, #121	; 0x79
   18890:	4829      	ldr	r0, [pc, #164]	; (18938 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18892:	f003 fa4a 	bl	1bd2a <assert_post_action>
   18896:	f04f 0320 	mov.w	r3, #32
   1889a:	f3ef 8711 	mrs	r7, BASEPRI
   1889e:	f383 8812 	msr	BASEPRI_MAX, r3
   188a2:	f3bf 8f6f 	isb	sy
   188a6:	4827      	ldr	r0, [pc, #156]	; (18944 <z_impl_k_sem_take+0xdc>)
   188a8:	f7ff fc84 	bl	181b4 <z_spin_lock_valid>
   188ac:	b960      	cbnz	r0, 188c8 <z_impl_k_sem_take+0x60>
   188ae:	2394      	movs	r3, #148	; 0x94
   188b0:	4a25      	ldr	r2, [pc, #148]	; (18948 <z_impl_k_sem_take+0xe0>)
   188b2:	4926      	ldr	r1, [pc, #152]	; (1894c <z_impl_k_sem_take+0xe4>)
   188b4:	4821      	ldr	r0, [pc, #132]	; (1893c <z_impl_k_sem_take+0xd4>)
   188b6:	f003 fa3f 	bl	1bd38 <assert_print>
   188ba:	4922      	ldr	r1, [pc, #136]	; (18944 <z_impl_k_sem_take+0xdc>)
   188bc:	4824      	ldr	r0, [pc, #144]	; (18950 <z_impl_k_sem_take+0xe8>)
   188be:	f003 fa3b 	bl	1bd38 <assert_print>
   188c2:	2194      	movs	r1, #148	; 0x94
   188c4:	4820      	ldr	r0, [pc, #128]	; (18948 <z_impl_k_sem_take+0xe0>)
   188c6:	e7e4      	b.n	18892 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   188c8:	481e      	ldr	r0, [pc, #120]	; (18944 <z_impl_k_sem_take+0xdc>)
   188ca:	f7ff fc8f 	bl	181ec <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   188ce:	68a3      	ldr	r3, [r4, #8]
   188d0:	b1c3      	cbz	r3, 18904 <z_impl_k_sem_take+0x9c>
		sem->count--;
   188d2:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188d4:	481b      	ldr	r0, [pc, #108]	; (18944 <z_impl_k_sem_take+0xdc>)
   188d6:	60a3      	str	r3, [r4, #8]
   188d8:	f7ff fc7a 	bl	181d0 <z_spin_unlock_valid>
   188dc:	b958      	cbnz	r0, 188f6 <z_impl_k_sem_take+0x8e>
   188de:	23c2      	movs	r3, #194	; 0xc2
   188e0:	4a19      	ldr	r2, [pc, #100]	; (18948 <z_impl_k_sem_take+0xe0>)
   188e2:	491c      	ldr	r1, [pc, #112]	; (18954 <z_impl_k_sem_take+0xec>)
   188e4:	4815      	ldr	r0, [pc, #84]	; (1893c <z_impl_k_sem_take+0xd4>)
   188e6:	f003 fa27 	bl	1bd38 <assert_print>
   188ea:	4916      	ldr	r1, [pc, #88]	; (18944 <z_impl_k_sem_take+0xdc>)
   188ec:	481a      	ldr	r0, [pc, #104]	; (18958 <z_impl_k_sem_take+0xf0>)
   188ee:	f003 fa23 	bl	1bd38 <assert_print>
   188f2:	21c2      	movs	r1, #194	; 0xc2
   188f4:	e7e6      	b.n	188c4 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   188f6:	f387 8811 	msr	BASEPRI, r7
   188fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   188fe:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18900:	b003      	add	sp, #12
   18902:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18904:	ea56 0305 	orrs.w	r3, r6, r5
   18908:	d10b      	bne.n	18922 <z_impl_k_sem_take+0xba>
   1890a:	480e      	ldr	r0, [pc, #56]	; (18944 <z_impl_k_sem_take+0xdc>)
   1890c:	f7ff fc60 	bl	181d0 <z_spin_unlock_valid>
   18910:	2800      	cmp	r0, #0
   18912:	d0e4      	beq.n	188de <z_impl_k_sem_take+0x76>
   18914:	f387 8811 	msr	BASEPRI, r7
   18918:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1891c:	f06f 000f 	mvn.w	r0, #15
   18920:	e7ee      	b.n	18900 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18922:	4622      	mov	r2, r4
   18924:	4639      	mov	r1, r7
   18926:	e9cd 6500 	strd	r6, r5, [sp]
   1892a:	4806      	ldr	r0, [pc, #24]	; (18944 <z_impl_k_sem_take+0xdc>)
   1892c:	f001 fa38 	bl	19da0 <z_pend_curr>
	return ret;
   18930:	e7e6      	b.n	18900 <z_impl_k_sem_take+0x98>
   18932:	bf00      	nop
   18934:	00023f99 	.word	0x00023f99
   18938:	00023f79 	.word	0x00023f79
   1893c:	000205a4 	.word	0x000205a4
   18940:	00022c58 	.word	0x00022c58
   18944:	20009b74 	.word	0x20009b74
   18948:	000209d8 	.word	0x000209d8
   1894c:	00020a31 	.word	0x00020a31
   18950:	00020a46 	.word	0x00020a46
   18954:	00020a05 	.word	0x00020a05
   18958:	00020a1c 	.word	0x00020a1c

0001895c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1895c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1895e:	2400      	movs	r4, #0
   18960:	4b08      	ldr	r3, [pc, #32]	; (18984 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   18962:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   18966:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   18968:	ab02      	add	r3, sp, #8
   1896a:	9300      	str	r3, [sp, #0]
   1896c:	4906      	ldr	r1, [pc, #24]	; (18988 <k_sys_work_q_init+0x2c>)
   1896e:	f04f 33ff 	mov.w	r3, #4294967295
   18972:	4806      	ldr	r0, [pc, #24]	; (1898c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   18974:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   18978:	f000 fac0 	bl	18efc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1897c:	4620      	mov	r0, r4
   1897e:	b004      	add	sp, #16
   18980:	bd10      	pop	{r4, pc}
   18982:	bf00      	nop
   18984:	00023fe7 	.word	0x00023fe7
   18988:	2000c860 	.word	0x2000c860
   1898c:	200095c0 	.word	0x200095c0

00018990 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18994:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18996:	4e6e      	ldr	r6, [pc, #440]	; (18b50 <work_queue_main+0x1c0>)
	return list->head;
   18998:	4f6e      	ldr	r7, [pc, #440]	; (18b54 <work_queue_main+0x1c4>)
   1899a:	b085      	sub	sp, #20
	__asm__ volatile(
   1899c:	f04f 0320 	mov.w	r3, #32
   189a0:	f3ef 8811 	mrs	r8, BASEPRI
   189a4:	f383 8812 	msr	BASEPRI_MAX, r3
   189a8:	f3bf 8f6f 	isb	sy
   189ac:	4630      	mov	r0, r6
   189ae:	f7ff fc01 	bl	181b4 <z_spin_lock_valid>
   189b2:	b968      	cbnz	r0, 189d0 <work_queue_main+0x40>
   189b4:	2394      	movs	r3, #148	; 0x94
   189b6:	4a68      	ldr	r2, [pc, #416]	; (18b58 <work_queue_main+0x1c8>)
   189b8:	4968      	ldr	r1, [pc, #416]	; (18b5c <work_queue_main+0x1cc>)
   189ba:	4869      	ldr	r0, [pc, #420]	; (18b60 <work_queue_main+0x1d0>)
   189bc:	f003 f9bc 	bl	1bd38 <assert_print>
   189c0:	4963      	ldr	r1, [pc, #396]	; (18b50 <work_queue_main+0x1c0>)
   189c2:	4868      	ldr	r0, [pc, #416]	; (18b64 <work_queue_main+0x1d4>)
   189c4:	f003 f9b8 	bl	1bd38 <assert_print>
   189c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   189ca:	4863      	ldr	r0, [pc, #396]	; (18b58 <work_queue_main+0x1c8>)
   189cc:	f003 f9ad 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   189d0:	4630      	mov	r0, r6
   189d2:	f7ff fc0b 	bl	181ec <z_spin_lock_set_owner>
   189d6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   189da:	b9ad      	cbnz	r5, 18a08 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   189dc:	2102      	movs	r1, #2
   189de:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   189e2:	f006 fb94 	bl	1f10e <flag_test_and_clear>
   189e6:	2800      	cmp	r0, #0
   189e8:	d135      	bne.n	18a56 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   189ea:	2300      	movs	r3, #0
   189ec:	f04f 32ff 	mov.w	r2, #4294967295
   189f0:	9302      	str	r3, [sp, #8]
   189f2:	f04f 33ff 	mov.w	r3, #4294967295
   189f6:	4641      	mov	r1, r8
   189f8:	e9cd 2300 	strd	r2, r3, [sp]
   189fc:	4630      	mov	r0, r6
   189fe:	f104 0290 	add.w	r2, r4, #144	; 0x90
   18a02:	f001 ff41 	bl	1a888 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   18a06:	e7c9      	b.n	1899c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18a08:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   18a0c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18a0e:	4295      	cmp	r5, r2
	list->tail = node;
   18a10:	bf08      	it	eq
   18a12:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   18a16:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   18a1a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a1e:	4630      	mov	r0, r6
   18a20:	f043 0302 	orr.w	r3, r3, #2
   18a24:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   18a28:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   18a2a:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   18a2e:	f023 0304 	bic.w	r3, r3, #4
   18a32:	f043 0301 	orr.w	r3, r3, #1
   18a36:	60eb      	str	r3, [r5, #12]
   18a38:	f7ff fbca 	bl	181d0 <z_spin_unlock_valid>
   18a3c:	b9a8      	cbnz	r0, 18a6a <work_queue_main+0xda>
   18a3e:	23c2      	movs	r3, #194	; 0xc2
   18a40:	4a45      	ldr	r2, [pc, #276]	; (18b58 <work_queue_main+0x1c8>)
   18a42:	4949      	ldr	r1, [pc, #292]	; (18b68 <work_queue_main+0x1d8>)
   18a44:	4846      	ldr	r0, [pc, #280]	; (18b60 <work_queue_main+0x1d0>)
   18a46:	f003 f977 	bl	1bd38 <assert_print>
   18a4a:	4941      	ldr	r1, [pc, #260]	; (18b50 <work_queue_main+0x1c0>)
   18a4c:	4847      	ldr	r0, [pc, #284]	; (18b6c <work_queue_main+0x1dc>)
   18a4e:	f003 f973 	bl	1bd38 <assert_print>
   18a52:	21c2      	movs	r1, #194	; 0xc2
   18a54:	e7b9      	b.n	189ca <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   18a56:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18a5a:	2200      	movs	r2, #0
   18a5c:	2101      	movs	r1, #1
   18a5e:	4628      	mov	r0, r5
   18a60:	f001 feb4 	bl	1a7cc <z_sched_wake>
   18a64:	2800      	cmp	r0, #0
   18a66:	d1f8      	bne.n	18a5a <work_queue_main+0xca>
   18a68:	e7bf      	b.n	189ea <work_queue_main+0x5a>
	__asm__ volatile(
   18a6a:	f388 8811 	msr	BASEPRI, r8
   18a6e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   18a72:	f1b9 0f00 	cmp.w	r9, #0
   18a76:	d10a      	bne.n	18a8e <work_queue_main+0xfe>
   18a78:	493d      	ldr	r1, [pc, #244]	; (18b70 <work_queue_main+0x1e0>)
   18a7a:	4839      	ldr	r0, [pc, #228]	; (18b60 <work_queue_main+0x1d0>)
   18a7c:	f240 239b 	movw	r3, #667	; 0x29b
   18a80:	4a3c      	ldr	r2, [pc, #240]	; (18b74 <work_queue_main+0x1e4>)
   18a82:	f003 f959 	bl	1bd38 <assert_print>
   18a86:	f240 219b 	movw	r1, #667	; 0x29b
   18a8a:	483a      	ldr	r0, [pc, #232]	; (18b74 <work_queue_main+0x1e4>)
   18a8c:	e79e      	b.n	189cc <work_queue_main+0x3c>
		handler(work);
   18a8e:	4628      	mov	r0, r5
   18a90:	47c8      	blx	r9
	__asm__ volatile(
   18a92:	f04f 0320 	mov.w	r3, #32
   18a96:	f3ef 8a11 	mrs	sl, BASEPRI
   18a9a:	f383 8812 	msr	BASEPRI_MAX, r3
   18a9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18aa2:	4630      	mov	r0, r6
   18aa4:	f7ff fb86 	bl	181b4 <z_spin_lock_valid>
   18aa8:	2800      	cmp	r0, #0
   18aaa:	d083      	beq.n	189b4 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   18aac:	4630      	mov	r0, r6
   18aae:	f7ff fb9d 	bl	181ec <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   18ab2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18ab4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   18ab6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18aba:	d417      	bmi.n	18aec <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   18abc:	60ea      	str	r2, [r5, #12]
   18abe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ac2:	4630      	mov	r0, r6
   18ac4:	f023 0302 	bic.w	r3, r3, #2
   18ac8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   18acc:	f3c3 2500 	ubfx	r5, r3, #8, #1
   18ad0:	f7ff fb7e 	bl	181d0 <z_spin_unlock_valid>
   18ad4:	2800      	cmp	r0, #0
   18ad6:	d0b2      	beq.n	18a3e <work_queue_main+0xae>
	__asm__ volatile(
   18ad8:	f38a 8811 	msr	BASEPRI, sl
   18adc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   18ae0:	2d00      	cmp	r5, #0
   18ae2:	f47f af5b 	bne.w	1899c <work_queue_main+0xc>
	z_impl_k_yield();
   18ae6:	f001 fc35 	bl	1a354 <z_impl_k_yield>
}
   18aea:	e757      	b.n	1899c <work_queue_main+0xc>
	return list->head;
   18aec:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   18aee:	f023 0303 	bic.w	r3, r3, #3
   18af2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18af4:	2800      	cmp	r0, #0
   18af6:	d0e2      	beq.n	18abe <work_queue_main+0x12e>
	return node->next;
   18af8:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   18afc:	46c3      	mov	fp, r8
	return node->next;
   18afe:	f8d0 9000 	ldr.w	r9, [r0]
   18b02:	2800      	cmp	r0, #0
   18b04:	d0db      	beq.n	18abe <work_queue_main+0x12e>
		if (wc->work == work) {
   18b06:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   18b08:	4602      	mov	r2, r0
		if (wc->work == work) {
   18b0a:	429d      	cmp	r5, r3
   18b0c:	d10d      	bne.n	18b2a <work_queue_main+0x19a>
   18b0e:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18b10:	f1b8 0f00 	cmp.w	r8, #0
   18b14:	d112      	bne.n	18b3c <work_queue_main+0x1ac>
   18b16:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   18b18:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   18b1a:	4283      	cmp	r3, r0
   18b1c:	d100      	bne.n	18b20 <work_queue_main+0x190>
	list->tail = node;
   18b1e:	607a      	str	r2, [r7, #4]
	parent->next = child;
   18b20:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   18b24:	f7ff fe5c 	bl	187e0 <z_impl_k_sem_give>
}
   18b28:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18b2a:	f1b9 0f00 	cmp.w	r9, #0
   18b2e:	d00d      	beq.n	18b4c <work_queue_main+0x1bc>
	return node->next;
   18b30:	f8d9 3000 	ldr.w	r3, [r9]
   18b34:	4648      	mov	r0, r9
   18b36:	4690      	mov	r8, r2
   18b38:	4699      	mov	r9, r3
   18b3a:	e7e2      	b.n	18b02 <work_queue_main+0x172>
	parent->next = child;
   18b3c:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   18b40:	687b      	ldr	r3, [r7, #4]
   18b42:	4283      	cmp	r3, r0
	list->tail = node;
   18b44:	bf08      	it	eq
   18b46:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   18b4a:	e7e9      	b.n	18b20 <work_queue_main+0x190>
   18b4c:	464b      	mov	r3, r9
   18b4e:	e7f1      	b.n	18b34 <work_queue_main+0x1a4>
   18b50:	20009b80 	.word	0x20009b80
   18b54:	20009b78 	.word	0x20009b78
   18b58:	000209d8 	.word	0x000209d8
   18b5c:	00020a31 	.word	0x00020a31
   18b60:	000205a4 	.word	0x000205a4
   18b64:	00020a46 	.word	0x00020a46
   18b68:	00020a05 	.word	0x00020a05
   18b6c:	00020a1c 	.word	0x00020a1c
   18b70:	00024011 	.word	0x00024011
   18b74:	00023ff0 	.word	0x00023ff0

00018b78 <cancel_sync_locked>:
{
   18b78:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   18b7a:	68c3      	ldr	r3, [r0, #12]
{
   18b7c:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   18b7e:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   18b82:	079b      	lsls	r3, r3, #30
{
   18b84:	460c      	mov	r4, r1
	if (ret) {
   18b86:	d50d      	bpl.n	18ba4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18b88:	2201      	movs	r2, #1
   18b8a:	2100      	movs	r1, #0
   18b8c:	f104 0008 	add.w	r0, r4, #8
   18b90:	f006 faad 	bl	1f0ee <z_impl_k_sem_init>
	parent->next = child;
   18b94:	2300      	movs	r3, #0
   18b96:	6023      	str	r3, [r4, #0]
	return list->tail;
   18b98:	4b05      	ldr	r3, [pc, #20]	; (18bb0 <cancel_sync_locked+0x38>)
	canceler->work = work;
   18b9a:	6065      	str	r5, [r4, #4]
   18b9c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   18b9e:	b91a      	cbnz	r2, 18ba8 <cancel_sync_locked+0x30>
	list->head = node;
   18ba0:	e9c3 4400 	strd	r4, r4, [r3]
}
   18ba4:	4630      	mov	r0, r6
   18ba6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   18ba8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18baa:	605c      	str	r4, [r3, #4]
}
   18bac:	e7fa      	b.n	18ba4 <cancel_sync_locked+0x2c>
   18bae:	bf00      	nop
   18bb0:	20009b78 	.word	0x20009b78

00018bb4 <submit_to_queue_locked>:
{
   18bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   18bb6:	68c3      	ldr	r3, [r0, #12]
{
   18bb8:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18bba:	079a      	lsls	r2, r3, #30
{
   18bbc:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18bbe:	f3c3 0640 	ubfx	r6, r3, #1, #1
   18bc2:	d439      	bmi.n	18c38 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   18bc4:	075b      	lsls	r3, r3, #29
   18bc6:	d425      	bmi.n	18c14 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   18bc8:	680b      	ldr	r3, [r1, #0]
   18bca:	b90b      	cbnz	r3, 18bd0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18bcc:	6883      	ldr	r3, [r0, #8]
   18bce:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   18bd0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18bd2:	07dd      	lsls	r5, r3, #31
   18bd4:	d521      	bpl.n	18c1a <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   18bd6:	68a3      	ldr	r3, [r4, #8]
   18bd8:	b95b      	cbnz	r3, 18bf2 <submit_to_queue_locked+0x3e>
   18bda:	4928      	ldr	r1, [pc, #160]	; (18c7c <submit_to_queue_locked+0xc8>)
   18bdc:	4828      	ldr	r0, [pc, #160]	; (18c80 <submit_to_queue_locked+0xcc>)
   18bde:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   18be2:	4a28      	ldr	r2, [pc, #160]	; (18c84 <submit_to_queue_locked+0xd0>)
   18be4:	f003 f8a8 	bl	1bd38 <assert_print>
   18be8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   18bec:	4825      	ldr	r0, [pc, #148]	; (18c84 <submit_to_queue_locked+0xd0>)
   18bee:	f003 f89c 	bl	1bd2a <assert_post_action>
			ret = 2;
   18bf2:	2602      	movs	r6, #2
			*queuep = work->queue;
   18bf4:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   18bf6:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   18bf8:	2d00      	cmp	r5, #0
   18bfa:	d03c      	beq.n	18c76 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18bfc:	4b22      	ldr	r3, [pc, #136]	; (18c88 <submit_to_queue_locked+0xd4>)
   18bfe:	689b      	ldr	r3, [r3, #8]
   18c00:	42ab      	cmp	r3, r5
   18c02:	d00c      	beq.n	18c1e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   18c04:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18c08:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18c0a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18c0e:	d416      	bmi.n	18c3e <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   18c10:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   18c14:	2300      	movs	r3, #0
   18c16:	603b      	str	r3, [r7, #0]
	return ret;
   18c18:	e027      	b.n	18c6a <submit_to_queue_locked+0xb6>
		ret = 1;
   18c1a:	2601      	movs	r6, #1
   18c1c:	e7eb      	b.n	18bf6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18c1e:	f006 fa15 	bl	1f04c <k_is_in_isr>
   18c22:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   18c26:	2800      	cmp	r0, #0
   18c28:	d1ee      	bne.n	18c08 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18c2a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18c2c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18c30:	d5ee      	bpl.n	18c10 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   18c32:	b152      	cbz	r2, 18c4a <submit_to_queue_locked+0x96>
   18c34:	075b      	lsls	r3, r3, #29
   18c36:	d408      	bmi.n	18c4a <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   18c38:	f06f 060f 	mvn.w	r6, #15
   18c3c:	e7ea      	b.n	18c14 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   18c3e:	2a00      	cmp	r2, #0
   18c40:	d1fa      	bne.n	18c38 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   18c42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   18c46:	2b00      	cmp	r3, #0
   18c48:	d1f6      	bne.n	18c38 <submit_to_queue_locked+0x84>
	parent->next = child;
   18c4a:	2300      	movs	r3, #0
   18c4c:	6023      	str	r3, [r4, #0]
	return list->tail;
   18c4e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   18c52:	b963      	cbnz	r3, 18c6e <submit_to_queue_locked+0xba>
	list->head = node;
   18c54:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   18c58:	4628      	mov	r0, r5
   18c5a:	f006 fa71 	bl	1f140 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18c5e:	68e3      	ldr	r3, [r4, #12]
   18c60:	f043 0304 	orr.w	r3, r3, #4
   18c64:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18c66:	683b      	ldr	r3, [r7, #0]
   18c68:	60a3      	str	r3, [r4, #8]
}
   18c6a:	4630      	mov	r0, r6
   18c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18c6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18c70:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   18c74:	e7f0      	b.n	18c58 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   18c76:	f06f 0615 	mvn.w	r6, #21
   18c7a:	e7cb      	b.n	18c14 <submit_to_queue_locked+0x60>
   18c7c:	00024028 	.word	0x00024028
   18c80:	000205a4 	.word	0x000205a4
   18c84:	00023ff0 	.word	0x00023ff0
   18c88:	20009b48 	.word	0x20009b48

00018c8c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   18c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18c8e:	4604      	mov	r4, r0
	__asm__ volatile(
   18c90:	f04f 0320 	mov.w	r3, #32
   18c94:	f3ef 8511 	mrs	r5, BASEPRI
   18c98:	f383 8812 	msr	BASEPRI_MAX, r3
   18c9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ca0:	481c      	ldr	r0, [pc, #112]	; (18d14 <work_timeout+0x88>)
   18ca2:	f7ff fa87 	bl	181b4 <z_spin_lock_valid>
   18ca6:	b968      	cbnz	r0, 18cc4 <work_timeout+0x38>
   18ca8:	2394      	movs	r3, #148	; 0x94
   18caa:	4a1b      	ldr	r2, [pc, #108]	; (18d18 <work_timeout+0x8c>)
   18cac:	491b      	ldr	r1, [pc, #108]	; (18d1c <work_timeout+0x90>)
   18cae:	481c      	ldr	r0, [pc, #112]	; (18d20 <work_timeout+0x94>)
   18cb0:	f003 f842 	bl	1bd38 <assert_print>
   18cb4:	4917      	ldr	r1, [pc, #92]	; (18d14 <work_timeout+0x88>)
   18cb6:	481b      	ldr	r0, [pc, #108]	; (18d24 <work_timeout+0x98>)
   18cb8:	f003 f83e 	bl	1bd38 <assert_print>
   18cbc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18cbe:	4816      	ldr	r0, [pc, #88]	; (18d18 <work_timeout+0x8c>)
   18cc0:	f003 f833 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   18cc4:	4813      	ldr	r0, [pc, #76]	; (18d14 <work_timeout+0x88>)
   18cc6:	f7ff fa91 	bl	181ec <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   18cca:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   18ccc:	2103      	movs	r1, #3
   18cce:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   18cd0:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   18cd2:	f1a4 0610 	sub.w	r6, r4, #16
   18cd6:	f006 fa1a 	bl	1f10e <flag_test_and_clear>
   18cda:	b128      	cbz	r0, 18ce8 <work_timeout+0x5c>
		queue = dw->queue;
   18cdc:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   18cde:	4630      	mov	r0, r6
   18ce0:	a901      	add	r1, sp, #4
		queue = dw->queue;
   18ce2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   18ce4:	f7ff ff66 	bl	18bb4 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ce8:	480a      	ldr	r0, [pc, #40]	; (18d14 <work_timeout+0x88>)
   18cea:	f7ff fa71 	bl	181d0 <z_spin_unlock_valid>
   18cee:	b958      	cbnz	r0, 18d08 <work_timeout+0x7c>
   18cf0:	23c2      	movs	r3, #194	; 0xc2
   18cf2:	4a09      	ldr	r2, [pc, #36]	; (18d18 <work_timeout+0x8c>)
   18cf4:	490c      	ldr	r1, [pc, #48]	; (18d28 <work_timeout+0x9c>)
   18cf6:	480a      	ldr	r0, [pc, #40]	; (18d20 <work_timeout+0x94>)
   18cf8:	f003 f81e 	bl	1bd38 <assert_print>
   18cfc:	4905      	ldr	r1, [pc, #20]	; (18d14 <work_timeout+0x88>)
   18cfe:	480b      	ldr	r0, [pc, #44]	; (18d2c <work_timeout+0xa0>)
   18d00:	f003 f81a 	bl	1bd38 <assert_print>
   18d04:	21c2      	movs	r1, #194	; 0xc2
   18d06:	e7da      	b.n	18cbe <work_timeout+0x32>
	__asm__ volatile(
   18d08:	f385 8811 	msr	BASEPRI, r5
   18d0c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   18d10:	b002      	add	sp, #8
   18d12:	bd70      	pop	{r4, r5, r6, pc}
   18d14:	20009b80 	.word	0x20009b80
   18d18:	000209d8 	.word	0x000209d8
   18d1c:	00020a31 	.word	0x00020a31
   18d20:	000205a4 	.word	0x000205a4
   18d24:	00020a46 	.word	0x00020a46
   18d28:	00020a05 	.word	0x00020a05
   18d2c:	00020a1c 	.word	0x00020a1c

00018d30 <k_work_init>:
{
   18d30:	b538      	push	{r3, r4, r5, lr}
   18d32:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   18d34:	4604      	mov	r4, r0
   18d36:	b948      	cbnz	r0, 18d4c <k_work_init+0x1c>
   18d38:	490c      	ldr	r1, [pc, #48]	; (18d6c <k_work_init+0x3c>)
   18d3a:	2389      	movs	r3, #137	; 0x89
   18d3c:	4a0c      	ldr	r2, [pc, #48]	; (18d70 <k_work_init+0x40>)
   18d3e:	480d      	ldr	r0, [pc, #52]	; (18d74 <k_work_init+0x44>)
   18d40:	f002 fffa 	bl	1bd38 <assert_print>
   18d44:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   18d46:	480a      	ldr	r0, [pc, #40]	; (18d70 <k_work_init+0x40>)
   18d48:	f002 ffef 	bl	1bd2a <assert_post_action>
   18d4c:	b939      	cbnz	r1, 18d5e <k_work_init+0x2e>
   18d4e:	490a      	ldr	r1, [pc, #40]	; (18d78 <k_work_init+0x48>)
   18d50:	238a      	movs	r3, #138	; 0x8a
   18d52:	4a07      	ldr	r2, [pc, #28]	; (18d70 <k_work_init+0x40>)
   18d54:	4807      	ldr	r0, [pc, #28]	; (18d74 <k_work_init+0x44>)
   18d56:	f002 ffef 	bl	1bd38 <assert_print>
   18d5a:	218a      	movs	r1, #138	; 0x8a
   18d5c:	e7f3      	b.n	18d46 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18d5e:	2210      	movs	r2, #16
   18d60:	2100      	movs	r1, #0
   18d62:	f004 f803 	bl	1cd6c <memset>
   18d66:	6065      	str	r5, [r4, #4]
}
   18d68:	bd38      	pop	{r3, r4, r5, pc}
   18d6a:	bf00      	nop
   18d6c:	000240c7 	.word	0x000240c7
   18d70:	00023ff0 	.word	0x00023ff0
   18d74:	000205a4 	.word	0x000205a4
   18d78:	00024011 	.word	0x00024011

00018d7c <k_work_busy_get>:
{
   18d7c:	b538      	push	{r3, r4, r5, lr}
   18d7e:	4604      	mov	r4, r0
	__asm__ volatile(
   18d80:	f04f 0320 	mov.w	r3, #32
   18d84:	f3ef 8511 	mrs	r5, BASEPRI
   18d88:	f383 8812 	msr	BASEPRI_MAX, r3
   18d8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d90:	4816      	ldr	r0, [pc, #88]	; (18dec <k_work_busy_get+0x70>)
   18d92:	f7ff fa0f 	bl	181b4 <z_spin_lock_valid>
   18d96:	b968      	cbnz	r0, 18db4 <k_work_busy_get+0x38>
   18d98:	2394      	movs	r3, #148	; 0x94
   18d9a:	4a15      	ldr	r2, [pc, #84]	; (18df0 <k_work_busy_get+0x74>)
   18d9c:	4915      	ldr	r1, [pc, #84]	; (18df4 <k_work_busy_get+0x78>)
   18d9e:	4816      	ldr	r0, [pc, #88]	; (18df8 <k_work_busy_get+0x7c>)
   18da0:	f002 ffca 	bl	1bd38 <assert_print>
   18da4:	4911      	ldr	r1, [pc, #68]	; (18dec <k_work_busy_get+0x70>)
   18da6:	4815      	ldr	r0, [pc, #84]	; (18dfc <k_work_busy_get+0x80>)
   18da8:	f002 ffc6 	bl	1bd38 <assert_print>
   18dac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dae:	4810      	ldr	r0, [pc, #64]	; (18df0 <k_work_busy_get+0x74>)
   18db0:	f002 ffbb 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   18db4:	480d      	ldr	r0, [pc, #52]	; (18dec <k_work_busy_get+0x70>)
   18db6:	f7ff fa19 	bl	181ec <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   18dba:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dbc:	480b      	ldr	r0, [pc, #44]	; (18dec <k_work_busy_get+0x70>)
   18dbe:	f004 040f 	and.w	r4, r4, #15
   18dc2:	f7ff fa05 	bl	181d0 <z_spin_unlock_valid>
   18dc6:	b958      	cbnz	r0, 18de0 <k_work_busy_get+0x64>
   18dc8:	23c2      	movs	r3, #194	; 0xc2
   18dca:	4a09      	ldr	r2, [pc, #36]	; (18df0 <k_work_busy_get+0x74>)
   18dcc:	490c      	ldr	r1, [pc, #48]	; (18e00 <k_work_busy_get+0x84>)
   18dce:	480a      	ldr	r0, [pc, #40]	; (18df8 <k_work_busy_get+0x7c>)
   18dd0:	f002 ffb2 	bl	1bd38 <assert_print>
   18dd4:	4905      	ldr	r1, [pc, #20]	; (18dec <k_work_busy_get+0x70>)
   18dd6:	480b      	ldr	r0, [pc, #44]	; (18e04 <k_work_busy_get+0x88>)
   18dd8:	f002 ffae 	bl	1bd38 <assert_print>
   18ddc:	21c2      	movs	r1, #194	; 0xc2
   18dde:	e7e6      	b.n	18dae <k_work_busy_get+0x32>
	__asm__ volatile(
   18de0:	f385 8811 	msr	BASEPRI, r5
   18de4:	f3bf 8f6f 	isb	sy
}
   18de8:	4620      	mov	r0, r4
   18dea:	bd38      	pop	{r3, r4, r5, pc}
   18dec:	20009b80 	.word	0x20009b80
   18df0:	000209d8 	.word	0x000209d8
   18df4:	00020a31 	.word	0x00020a31
   18df8:	000205a4 	.word	0x000205a4
   18dfc:	00020a46 	.word	0x00020a46
   18e00:	00020a05 	.word	0x00020a05
   18e04:	00020a1c 	.word	0x00020a1c

00018e08 <z_work_submit_to_queue>:
{
   18e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   18e0a:	460c      	mov	r4, r1
{
   18e0c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   18e0e:	b959      	cbnz	r1, 18e28 <z_work_submit_to_queue+0x20>
   18e10:	4921      	ldr	r1, [pc, #132]	; (18e98 <z_work_submit_to_queue+0x90>)
   18e12:	4822      	ldr	r0, [pc, #136]	; (18e9c <z_work_submit_to_queue+0x94>)
   18e14:	f44f 73ba 	mov.w	r3, #372	; 0x174
   18e18:	4a21      	ldr	r2, [pc, #132]	; (18ea0 <z_work_submit_to_queue+0x98>)
   18e1a:	f002 ff8d 	bl	1bd38 <assert_print>
   18e1e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   18e22:	481f      	ldr	r0, [pc, #124]	; (18ea0 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e24:	f002 ff81 	bl	1bd2a <assert_post_action>
	__asm__ volatile(
   18e28:	f04f 0320 	mov.w	r3, #32
   18e2c:	f3ef 8511 	mrs	r5, BASEPRI
   18e30:	f383 8812 	msr	BASEPRI_MAX, r3
   18e34:	f3bf 8f6f 	isb	sy
   18e38:	481a      	ldr	r0, [pc, #104]	; (18ea4 <z_work_submit_to_queue+0x9c>)
   18e3a:	f7ff f9bb 	bl	181b4 <z_spin_lock_valid>
   18e3e:	b960      	cbnz	r0, 18e5a <z_work_submit_to_queue+0x52>
   18e40:	2394      	movs	r3, #148	; 0x94
   18e42:	4a19      	ldr	r2, [pc, #100]	; (18ea8 <z_work_submit_to_queue+0xa0>)
   18e44:	4919      	ldr	r1, [pc, #100]	; (18eac <z_work_submit_to_queue+0xa4>)
   18e46:	4815      	ldr	r0, [pc, #84]	; (18e9c <z_work_submit_to_queue+0x94>)
   18e48:	f002 ff76 	bl	1bd38 <assert_print>
   18e4c:	4915      	ldr	r1, [pc, #84]	; (18ea4 <z_work_submit_to_queue+0x9c>)
   18e4e:	4818      	ldr	r0, [pc, #96]	; (18eb0 <z_work_submit_to_queue+0xa8>)
   18e50:	f002 ff72 	bl	1bd38 <assert_print>
   18e54:	2194      	movs	r1, #148	; 0x94
   18e56:	4814      	ldr	r0, [pc, #80]	; (18ea8 <z_work_submit_to_queue+0xa0>)
   18e58:	e7e4      	b.n	18e24 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   18e5a:	4812      	ldr	r0, [pc, #72]	; (18ea4 <z_work_submit_to_queue+0x9c>)
   18e5c:	f7ff f9c6 	bl	181ec <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   18e60:	4620      	mov	r0, r4
   18e62:	a901      	add	r1, sp, #4
   18e64:	f7ff fea6 	bl	18bb4 <submit_to_queue_locked>
   18e68:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e6a:	480e      	ldr	r0, [pc, #56]	; (18ea4 <z_work_submit_to_queue+0x9c>)
   18e6c:	f7ff f9b0 	bl	181d0 <z_spin_unlock_valid>
   18e70:	b958      	cbnz	r0, 18e8a <z_work_submit_to_queue+0x82>
   18e72:	23c2      	movs	r3, #194	; 0xc2
   18e74:	4a0c      	ldr	r2, [pc, #48]	; (18ea8 <z_work_submit_to_queue+0xa0>)
   18e76:	490f      	ldr	r1, [pc, #60]	; (18eb4 <z_work_submit_to_queue+0xac>)
   18e78:	4808      	ldr	r0, [pc, #32]	; (18e9c <z_work_submit_to_queue+0x94>)
   18e7a:	f002 ff5d 	bl	1bd38 <assert_print>
   18e7e:	4909      	ldr	r1, [pc, #36]	; (18ea4 <z_work_submit_to_queue+0x9c>)
   18e80:	480d      	ldr	r0, [pc, #52]	; (18eb8 <z_work_submit_to_queue+0xb0>)
   18e82:	f002 ff59 	bl	1bd38 <assert_print>
   18e86:	21c2      	movs	r1, #194	; 0xc2
   18e88:	e7e5      	b.n	18e56 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   18e8a:	f385 8811 	msr	BASEPRI, r5
   18e8e:	f3bf 8f6f 	isb	sy
}
   18e92:	4620      	mov	r0, r4
   18e94:	b003      	add	sp, #12
   18e96:	bd30      	pop	{r4, r5, pc}
   18e98:	000240c7 	.word	0x000240c7
   18e9c:	000205a4 	.word	0x000205a4
   18ea0:	00023ff0 	.word	0x00023ff0
   18ea4:	20009b80 	.word	0x20009b80
   18ea8:	000209d8 	.word	0x000209d8
   18eac:	00020a31 	.word	0x00020a31
   18eb0:	00020a46 	.word	0x00020a46
   18eb4:	00020a05 	.word	0x00020a05
   18eb8:	00020a1c 	.word	0x00020a1c

00018ebc <k_work_submit>:
{
   18ebc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   18ebe:	4801      	ldr	r0, [pc, #4]	; (18ec4 <k_work_submit+0x8>)
   18ec0:	f006 b978 	b.w	1f1b4 <k_work_submit_to_queue>
   18ec4:	200095c0 	.word	0x200095c0

00018ec8 <k_work_queue_init>:
{
   18ec8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   18eca:	b958      	cbnz	r0, 18ee4 <k_work_queue_init+0x1c>
   18ecc:	4908      	ldr	r1, [pc, #32]	; (18ef0 <k_work_queue_init+0x28>)
   18ece:	4809      	ldr	r0, [pc, #36]	; (18ef4 <k_work_queue_init+0x2c>)
   18ed0:	f240 23b9 	movw	r3, #697	; 0x2b9
   18ed4:	4a08      	ldr	r2, [pc, #32]	; (18ef8 <k_work_queue_init+0x30>)
   18ed6:	f002 ff2f 	bl	1bd38 <assert_print>
   18eda:	f240 21b9 	movw	r1, #697	; 0x2b9
   18ede:	4806      	ldr	r0, [pc, #24]	; (18ef8 <k_work_queue_init+0x30>)
   18ee0:	f002 ff23 	bl	1bd2a <assert_post_action>
	*queue = (struct k_work_q) {
   18ee4:	22a8      	movs	r2, #168	; 0xa8
   18ee6:	2100      	movs	r1, #0
   18ee8:	f003 ff40 	bl	1cd6c <memset>
}
   18eec:	bd08      	pop	{r3, pc}
   18eee:	bf00      	nop
   18ef0:	0002402e 	.word	0x0002402e
   18ef4:	000205a4 	.word	0x000205a4
   18ef8:	00023ff0 	.word	0x00023ff0

00018efc <k_work_queue_start>:
{
   18efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18efe:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   18f00:	4604      	mov	r4, r0
{
   18f02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   18f04:	b958      	cbnz	r0, 18f1e <k_work_queue_start+0x22>
   18f06:	492b      	ldr	r1, [pc, #172]	; (18fb4 <k_work_queue_start+0xb8>)
   18f08:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   18f0c:	4a2a      	ldr	r2, [pc, #168]	; (18fb8 <k_work_queue_start+0xbc>)
   18f0e:	482b      	ldr	r0, [pc, #172]	; (18fbc <k_work_queue_start+0xc0>)
   18f10:	f002 ff12 	bl	1bd38 <assert_print>
   18f14:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   18f18:	4827      	ldr	r0, [pc, #156]	; (18fb8 <k_work_queue_start+0xbc>)
   18f1a:	f002 ff06 	bl	1bd2a <assert_post_action>
   18f1e:	b949      	cbnz	r1, 18f34 <k_work_queue_start+0x38>
   18f20:	4927      	ldr	r1, [pc, #156]	; (18fc0 <k_work_queue_start+0xc4>)
   18f22:	f240 23c9 	movw	r3, #713	; 0x2c9
   18f26:	4a24      	ldr	r2, [pc, #144]	; (18fb8 <k_work_queue_start+0xbc>)
   18f28:	4824      	ldr	r0, [pc, #144]	; (18fbc <k_work_queue_start+0xc0>)
   18f2a:	f002 ff05 	bl	1bd38 <assert_print>
   18f2e:	f240 21c9 	movw	r1, #713	; 0x2c9
   18f32:	e7f1      	b.n	18f18 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   18f34:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   18f38:	f010 0001 	ands.w	r0, r0, #1
   18f3c:	d009      	beq.n	18f52 <k_work_queue_start+0x56>
   18f3e:	4921      	ldr	r1, [pc, #132]	; (18fc4 <k_work_queue_start+0xc8>)
   18f40:	f240 23ca 	movw	r3, #714	; 0x2ca
   18f44:	4a1c      	ldr	r2, [pc, #112]	; (18fb8 <k_work_queue_start+0xbc>)
   18f46:	481d      	ldr	r0, [pc, #116]	; (18fbc <k_work_queue_start+0xc0>)
   18f48:	f002 fef6 	bl	1bd38 <assert_print>
   18f4c:	f240 21ca 	movw	r1, #714	; 0x2ca
   18f50:	e7e2      	b.n	18f18 <k_work_queue_start+0x1c>
	list->tail = NULL;
   18f52:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   18f56:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   18f5a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   18f5e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18f62:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   18f66:	b31d      	cbz	r5, 18fb0 <k_work_queue_start+0xb4>
   18f68:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   18f6a:	2800      	cmp	r0, #0
   18f6c:	f240 1001 	movw	r0, #257	; 0x101
   18f70:	bf08      	it	eq
   18f72:	2001      	moveq	r0, #1
	*flagp = flags;
   18f74:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18f78:	2000      	movs	r0, #0
   18f7a:	f04f 36ff 	mov.w	r6, #4294967295
   18f7e:	f04f 37ff 	mov.w	r7, #4294967295
   18f82:	e9cd 3003 	strd	r3, r0, [sp, #12]
   18f86:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18f8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18f8e:	4620      	mov	r0, r4
   18f90:	4b0d      	ldr	r3, [pc, #52]	; (18fc8 <k_work_queue_start+0xcc>)
   18f92:	9400      	str	r4, [sp, #0]
   18f94:	f7ff f844 	bl	18020 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   18f98:	b125      	cbz	r5, 18fa4 <k_work_queue_start+0xa8>
   18f9a:	6829      	ldr	r1, [r5, #0]
   18f9c:	b111      	cbz	r1, 18fa4 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   18f9e:	4620      	mov	r0, r4
   18fa0:	f006 f85a 	bl	1f058 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18fa4:	4620      	mov	r0, r4
}
   18fa6:	b009      	add	sp, #36	; 0x24
   18fa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18fac:	f006 b859 	b.w	1f062 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   18fb0:	2001      	movs	r0, #1
   18fb2:	e7df      	b.n	18f74 <k_work_queue_start+0x78>
   18fb4:	00024086 	.word	0x00024086
   18fb8:	00023ff0 	.word	0x00023ff0
   18fbc:	000205a4 	.word	0x000205a4
   18fc0:	0002408c 	.word	0x0002408c
   18fc4:	00024092 	.word	0x00024092
   18fc8:	00018991 	.word	0x00018991

00018fcc <k_work_queue_drain>:
{
   18fcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   18fce:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   18fd0:	4604      	mov	r4, r0
   18fd2:	b958      	cbnz	r0, 18fec <k_work_queue_drain+0x20>
   18fd4:	493a      	ldr	r1, [pc, #232]	; (190c0 <k_work_queue_drain+0xf4>)
   18fd6:	f240 23ed 	movw	r3, #749	; 0x2ed
   18fda:	4a3a      	ldr	r2, [pc, #232]	; (190c4 <k_work_queue_drain+0xf8>)
   18fdc:	483a      	ldr	r0, [pc, #232]	; (190c8 <k_work_queue_drain+0xfc>)
   18fde:	f002 feab 	bl	1bd38 <assert_print>
   18fe2:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   18fe6:	4837      	ldr	r0, [pc, #220]	; (190c4 <k_work_queue_drain+0xf8>)
   18fe8:	f002 fe9f 	bl	1bd2a <assert_post_action>
   18fec:	f006 f82e 	bl	1f04c <k_is_in_isr>
   18ff0:	b148      	cbz	r0, 19006 <k_work_queue_drain+0x3a>
   18ff2:	4936      	ldr	r1, [pc, #216]	; (190cc <k_work_queue_drain+0x100>)
   18ff4:	f240 23ee 	movw	r3, #750	; 0x2ee
   18ff8:	4a32      	ldr	r2, [pc, #200]	; (190c4 <k_work_queue_drain+0xf8>)
   18ffa:	4833      	ldr	r0, [pc, #204]	; (190c8 <k_work_queue_drain+0xfc>)
   18ffc:	f002 fe9c 	bl	1bd38 <assert_print>
   19000:	f240 21ee 	movw	r1, #750	; 0x2ee
   19004:	e7ef      	b.n	18fe6 <k_work_queue_drain+0x1a>
	__asm__ volatile(
   19006:	f04f 0320 	mov.w	r3, #32
   1900a:	f3ef 8611 	mrs	r6, BASEPRI
   1900e:	f383 8812 	msr	BASEPRI_MAX, r3
   19012:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19016:	482e      	ldr	r0, [pc, #184]	; (190d0 <k_work_queue_drain+0x104>)
   19018:	f7ff f8cc 	bl	181b4 <z_spin_lock_valid>
   1901c:	b960      	cbnz	r0, 19038 <k_work_queue_drain+0x6c>
   1901e:	2394      	movs	r3, #148	; 0x94
   19020:	4a2c      	ldr	r2, [pc, #176]	; (190d4 <k_work_queue_drain+0x108>)
   19022:	492d      	ldr	r1, [pc, #180]	; (190d8 <k_work_queue_drain+0x10c>)
   19024:	4828      	ldr	r0, [pc, #160]	; (190c8 <k_work_queue_drain+0xfc>)
   19026:	f002 fe87 	bl	1bd38 <assert_print>
   1902a:	4929      	ldr	r1, [pc, #164]	; (190d0 <k_work_queue_drain+0x104>)
   1902c:	482b      	ldr	r0, [pc, #172]	; (190dc <k_work_queue_drain+0x110>)
   1902e:	f002 fe83 	bl	1bd38 <assert_print>
   19032:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19034:	4827      	ldr	r0, [pc, #156]	; (190d4 <k_work_queue_drain+0x108>)
   19036:	e7d7      	b.n	18fe8 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   19038:	4825      	ldr	r0, [pc, #148]	; (190d0 <k_work_queue_drain+0x104>)
   1903a:	f7ff f8d7 	bl	181ec <z_spin_lock_set_owner>
	return *flagp;
   1903e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   19042:	f013 0f06 	tst.w	r3, #6
   19046:	d11d      	bne.n	19084 <k_work_queue_drain+0xb8>
	    || plug
   19048:	b1b5      	cbz	r5, 19078 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   1904a:	f043 030c 	orr.w	r3, r3, #12
   1904e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   19052:	4620      	mov	r0, r4
   19054:	f006 f874 	bl	1f140 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   19058:	2300      	movs	r3, #0
   1905a:	f04f 32ff 	mov.w	r2, #4294967295
   1905e:	9302      	str	r3, [sp, #8]
   19060:	f04f 33ff 	mov.w	r3, #4294967295
   19064:	4631      	mov	r1, r6
   19066:	e9cd 2300 	strd	r2, r3, [sp]
   1906a:	4819      	ldr	r0, [pc, #100]	; (190d0 <k_work_queue_drain+0x104>)
   1906c:	f104 0298 	add.w	r2, r4, #152	; 0x98
   19070:	f001 fc0a 	bl	1a888 <z_sched_wait>
}
   19074:	b004      	add	sp, #16
   19076:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   19078:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   1907c:	b14d      	cbz	r5, 19092 <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   1907e:	f043 0304 	orr.w	r3, r3, #4
   19082:	e7e4      	b.n	1904e <k_work_queue_drain+0x82>
   19084:	f043 0204 	orr.w	r2, r3, #4
   19088:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   1908c:	2d00      	cmp	r5, #0
   1908e:	d0e0      	beq.n	19052 <k_work_queue_drain+0x86>
   19090:	e7db      	b.n	1904a <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19092:	480f      	ldr	r0, [pc, #60]	; (190d0 <k_work_queue_drain+0x104>)
   19094:	f7ff f89c 	bl	181d0 <z_spin_unlock_valid>
   19098:	b958      	cbnz	r0, 190b2 <k_work_queue_drain+0xe6>
   1909a:	23c2      	movs	r3, #194	; 0xc2
   1909c:	4a0d      	ldr	r2, [pc, #52]	; (190d4 <k_work_queue_drain+0x108>)
   1909e:	4910      	ldr	r1, [pc, #64]	; (190e0 <k_work_queue_drain+0x114>)
   190a0:	4809      	ldr	r0, [pc, #36]	; (190c8 <k_work_queue_drain+0xfc>)
   190a2:	f002 fe49 	bl	1bd38 <assert_print>
   190a6:	490a      	ldr	r1, [pc, #40]	; (190d0 <k_work_queue_drain+0x104>)
   190a8:	480e      	ldr	r0, [pc, #56]	; (190e4 <k_work_queue_drain+0x118>)
   190aa:	f002 fe45 	bl	1bd38 <assert_print>
   190ae:	21c2      	movs	r1, #194	; 0xc2
   190b0:	e7c0      	b.n	19034 <k_work_queue_drain+0x68>
	__asm__ volatile(
   190b2:	f386 8811 	msr	BASEPRI, r6
   190b6:	f3bf 8f6f 	isb	sy
	int ret = 0;
   190ba:	4628      	mov	r0, r5
	return ret;
   190bc:	e7da      	b.n	19074 <k_work_queue_drain+0xa8>
   190be:	bf00      	nop
   190c0:	00024086 	.word	0x00024086
   190c4:	00023ff0 	.word	0x00023ff0
   190c8:	000205a4 	.word	0x000205a4
   190cc:	0002244f 	.word	0x0002244f
   190d0:	20009b80 	.word	0x20009b80
   190d4:	000209d8 	.word	0x000209d8
   190d8:	00020a31 	.word	0x00020a31
   190dc:	00020a46 	.word	0x00020a46
   190e0:	00020a05 	.word	0x00020a05
   190e4:	00020a1c 	.word	0x00020a1c

000190e8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   190e8:	b538      	push	{r3, r4, r5, lr}
   190ea:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   190ec:	4604      	mov	r4, r0
   190ee:	b958      	cbnz	r0, 19108 <k_work_init_delayable+0x20>
   190f0:	490f      	ldr	r1, [pc, #60]	; (19130 <k_work_init_delayable+0x48>)
   190f2:	f44f 7350 	mov.w	r3, #832	; 0x340
   190f6:	4a0f      	ldr	r2, [pc, #60]	; (19134 <k_work_init_delayable+0x4c>)
   190f8:	480f      	ldr	r0, [pc, #60]	; (19138 <k_work_init_delayable+0x50>)
   190fa:	f002 fe1d 	bl	1bd38 <assert_print>
   190fe:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   19102:	480c      	ldr	r0, [pc, #48]	; (19134 <k_work_init_delayable+0x4c>)
   19104:	f002 fe11 	bl	1bd2a <assert_post_action>
   19108:	b949      	cbnz	r1, 1911e <k_work_init_delayable+0x36>
   1910a:	490c      	ldr	r1, [pc, #48]	; (1913c <k_work_init_delayable+0x54>)
   1910c:	f240 3341 	movw	r3, #833	; 0x341
   19110:	4a08      	ldr	r2, [pc, #32]	; (19134 <k_work_init_delayable+0x4c>)
   19112:	4809      	ldr	r0, [pc, #36]	; (19138 <k_work_init_delayable+0x50>)
   19114:	f002 fe10 	bl	1bd38 <assert_print>
   19118:	f240 3141 	movw	r1, #833	; 0x341
   1911c:	e7f1      	b.n	19102 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   1911e:	2230      	movs	r2, #48	; 0x30
   19120:	2100      	movs	r1, #0
   19122:	f003 fe23 	bl	1cd6c <memset>
   19126:	f44f 7380 	mov.w	r3, #256	; 0x100
   1912a:	6065      	str	r5, [r4, #4]
   1912c:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   1912e:	bd38      	pop	{r3, r4, r5, pc}
   19130:	000240c6 	.word	0x000240c6
   19134:	00023ff0 	.word	0x00023ff0
   19138:	000205a4 	.word	0x000205a4
   1913c:	00024011 	.word	0x00024011

00019140 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   19140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19142:	4616      	mov	r6, r2
   19144:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   19146:	460c      	mov	r4, r1
{
   19148:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   1914a:	b959      	cbnz	r1, 19164 <k_work_schedule_for_queue+0x24>
   1914c:	492d      	ldr	r1, [pc, #180]	; (19204 <k_work_schedule_for_queue+0xc4>)
   1914e:	482e      	ldr	r0, [pc, #184]	; (19208 <k_work_schedule_for_queue+0xc8>)
   19150:	f240 33b7 	movw	r3, #951	; 0x3b7
   19154:	4a2d      	ldr	r2, [pc, #180]	; (1920c <k_work_schedule_for_queue+0xcc>)
   19156:	f002 fdef 	bl	1bd38 <assert_print>
   1915a:	f240 31b7 	movw	r1, #951	; 0x3b7
   1915e:	482b      	ldr	r0, [pc, #172]	; (1920c <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19160:	f002 fde3 	bl	1bd2a <assert_post_action>
	__asm__ volatile(
   19164:	f04f 0320 	mov.w	r3, #32
   19168:	f3ef 8711 	mrs	r7, BASEPRI
   1916c:	f383 8812 	msr	BASEPRI_MAX, r3
   19170:	f3bf 8f6f 	isb	sy
   19174:	4826      	ldr	r0, [pc, #152]	; (19210 <k_work_schedule_for_queue+0xd0>)
   19176:	f7ff f81d 	bl	181b4 <z_spin_lock_valid>
   1917a:	b960      	cbnz	r0, 19196 <k_work_schedule_for_queue+0x56>
   1917c:	2394      	movs	r3, #148	; 0x94
   1917e:	4a25      	ldr	r2, [pc, #148]	; (19214 <k_work_schedule_for_queue+0xd4>)
   19180:	4925      	ldr	r1, [pc, #148]	; (19218 <k_work_schedule_for_queue+0xd8>)
   19182:	4821      	ldr	r0, [pc, #132]	; (19208 <k_work_schedule_for_queue+0xc8>)
   19184:	f002 fdd8 	bl	1bd38 <assert_print>
   19188:	4921      	ldr	r1, [pc, #132]	; (19210 <k_work_schedule_for_queue+0xd0>)
   1918a:	4824      	ldr	r0, [pc, #144]	; (1921c <k_work_schedule_for_queue+0xdc>)
   1918c:	f002 fdd4 	bl	1bd38 <assert_print>
   19190:	2194      	movs	r1, #148	; 0x94
   19192:	4820      	ldr	r0, [pc, #128]	; (19214 <k_work_schedule_for_queue+0xd4>)
   19194:	e7e4      	b.n	19160 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   19196:	481e      	ldr	r0, [pc, #120]	; (19210 <k_work_schedule_for_queue+0xd0>)
   19198:	f7ff f828 	bl	181ec <z_spin_lock_set_owner>
	return *flagp;
   1919c:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1919e:	f013 0f0e 	tst.w	r3, #14
   191a2:	d125      	bne.n	191f0 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   191a4:	ea55 0206 	orrs.w	r2, r5, r6
   191a8:	d114      	bne.n	191d4 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   191aa:	4620      	mov	r0, r4
   191ac:	a901      	add	r1, sp, #4
   191ae:	f7ff fd01 	bl	18bb4 <submit_to_queue_locked>
   191b2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   191b4:	4816      	ldr	r0, [pc, #88]	; (19210 <k_work_schedule_for_queue+0xd0>)
   191b6:	f7ff f80b 	bl	181d0 <z_spin_unlock_valid>
   191ba:	b9d8      	cbnz	r0, 191f4 <k_work_schedule_for_queue+0xb4>
   191bc:	23c2      	movs	r3, #194	; 0xc2
   191be:	4a15      	ldr	r2, [pc, #84]	; (19214 <k_work_schedule_for_queue+0xd4>)
   191c0:	4917      	ldr	r1, [pc, #92]	; (19220 <k_work_schedule_for_queue+0xe0>)
   191c2:	4811      	ldr	r0, [pc, #68]	; (19208 <k_work_schedule_for_queue+0xc8>)
   191c4:	f002 fdb8 	bl	1bd38 <assert_print>
   191c8:	4911      	ldr	r1, [pc, #68]	; (19210 <k_work_schedule_for_queue+0xd0>)
   191ca:	4816      	ldr	r0, [pc, #88]	; (19224 <k_work_schedule_for_queue+0xe4>)
   191cc:	f002 fdb4 	bl	1bd38 <assert_print>
   191d0:	21c2      	movs	r1, #194	; 0xc2
   191d2:	e7de      	b.n	19192 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   191d4:	f043 0308 	orr.w	r3, r3, #8
   191d8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   191da:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   191dc:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   191e0:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   191e2:	4632      	mov	r2, r6
   191e4:	462b      	mov	r3, r5
   191e6:	4910      	ldr	r1, [pc, #64]	; (19228 <k_work_schedule_for_queue+0xe8>)
   191e8:	f001 fbc8 	bl	1a97c <z_add_timeout>
	return ret;
   191ec:	2401      	movs	r4, #1
   191ee:	e7e1      	b.n	191b4 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   191f0:	2400      	movs	r4, #0
   191f2:	e7df      	b.n	191b4 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   191f4:	f387 8811 	msr	BASEPRI, r7
   191f8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   191fc:	4620      	mov	r0, r4
   191fe:	b003      	add	sp, #12
   19200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19202:	bf00      	nop
   19204:	000240c6 	.word	0x000240c6
   19208:	000205a4 	.word	0x000205a4
   1920c:	00023ff0 	.word	0x00023ff0
   19210:	20009b80 	.word	0x20009b80
   19214:	000209d8 	.word	0x000209d8
   19218:	00020a31 	.word	0x00020a31
   1921c:	00020a46 	.word	0x00020a46
   19220:	00020a05 	.word	0x00020a05
   19224:	00020a1c 	.word	0x00020a1c
   19228:	00018c8d 	.word	0x00018c8d

0001922c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1922c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1922e:	4801      	ldr	r0, [pc, #4]	; (19234 <k_work_schedule+0x8>)
   19230:	f7ff bf86 	b.w	19140 <k_work_schedule_for_queue>
   19234:	200095c0 	.word	0x200095c0

00019238 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   19238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1923a:	4616      	mov	r6, r2
   1923c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1923e:	460c      	mov	r4, r1
{
   19240:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   19242:	b959      	cbnz	r1, 1925c <k_work_reschedule_for_queue+0x24>
   19244:	492c      	ldr	r1, [pc, #176]	; (192f8 <k_work_reschedule_for_queue+0xc0>)
   19246:	482d      	ldr	r0, [pc, #180]	; (192fc <k_work_reschedule_for_queue+0xc4>)
   19248:	f240 33db 	movw	r3, #987	; 0x3db
   1924c:	4a2c      	ldr	r2, [pc, #176]	; (19300 <k_work_reschedule_for_queue+0xc8>)
   1924e:	f002 fd73 	bl	1bd38 <assert_print>
   19252:	f240 31db 	movw	r1, #987	; 0x3db
   19256:	482a      	ldr	r0, [pc, #168]	; (19300 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19258:	f002 fd67 	bl	1bd2a <assert_post_action>
	__asm__ volatile(
   1925c:	f04f 0320 	mov.w	r3, #32
   19260:	f3ef 8711 	mrs	r7, BASEPRI
   19264:	f383 8812 	msr	BASEPRI_MAX, r3
   19268:	f3bf 8f6f 	isb	sy
   1926c:	4825      	ldr	r0, [pc, #148]	; (19304 <k_work_reschedule_for_queue+0xcc>)
   1926e:	f7fe ffa1 	bl	181b4 <z_spin_lock_valid>
   19272:	b960      	cbnz	r0, 1928e <k_work_reschedule_for_queue+0x56>
   19274:	2394      	movs	r3, #148	; 0x94
   19276:	4a24      	ldr	r2, [pc, #144]	; (19308 <k_work_reschedule_for_queue+0xd0>)
   19278:	4924      	ldr	r1, [pc, #144]	; (1930c <k_work_reschedule_for_queue+0xd4>)
   1927a:	4820      	ldr	r0, [pc, #128]	; (192fc <k_work_reschedule_for_queue+0xc4>)
   1927c:	f002 fd5c 	bl	1bd38 <assert_print>
   19280:	4920      	ldr	r1, [pc, #128]	; (19304 <k_work_reschedule_for_queue+0xcc>)
   19282:	4823      	ldr	r0, [pc, #140]	; (19310 <k_work_reschedule_for_queue+0xd8>)
   19284:	f002 fd58 	bl	1bd38 <assert_print>
   19288:	2194      	movs	r1, #148	; 0x94
   1928a:	481f      	ldr	r0, [pc, #124]	; (19308 <k_work_reschedule_for_queue+0xd0>)
   1928c:	e7e4      	b.n	19258 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   1928e:	481d      	ldr	r0, [pc, #116]	; (19304 <k_work_reschedule_for_queue+0xcc>)
   19290:	f7fe ffac 	bl	181ec <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   19294:	4620      	mov	r0, r4
   19296:	f005 ff45 	bl	1f124 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1929a:	ea55 0306 	orrs.w	r3, r5, r6
   1929e:	d114      	bne.n	192ca <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   192a0:	4620      	mov	r0, r4
   192a2:	a901      	add	r1, sp, #4
   192a4:	f7ff fc86 	bl	18bb4 <submit_to_queue_locked>
   192a8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   192aa:	4816      	ldr	r0, [pc, #88]	; (19304 <k_work_reschedule_for_queue+0xcc>)
   192ac:	f7fe ff90 	bl	181d0 <z_spin_unlock_valid>
   192b0:	b9d0      	cbnz	r0, 192e8 <k_work_reschedule_for_queue+0xb0>
   192b2:	23c2      	movs	r3, #194	; 0xc2
   192b4:	4a14      	ldr	r2, [pc, #80]	; (19308 <k_work_reschedule_for_queue+0xd0>)
   192b6:	4917      	ldr	r1, [pc, #92]	; (19314 <k_work_reschedule_for_queue+0xdc>)
   192b8:	4810      	ldr	r0, [pc, #64]	; (192fc <k_work_reschedule_for_queue+0xc4>)
   192ba:	f002 fd3d 	bl	1bd38 <assert_print>
   192be:	4911      	ldr	r1, [pc, #68]	; (19304 <k_work_reschedule_for_queue+0xcc>)
   192c0:	4815      	ldr	r0, [pc, #84]	; (19318 <k_work_reschedule_for_queue+0xe0>)
   192c2:	f002 fd39 	bl	1bd38 <assert_print>
   192c6:	21c2      	movs	r1, #194	; 0xc2
   192c8:	e7df      	b.n	1928a <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   192ca:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   192cc:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   192d0:	f043 0308 	orr.w	r3, r3, #8
   192d4:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   192d6:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   192d8:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   192da:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   192dc:	490f      	ldr	r1, [pc, #60]	; (1931c <k_work_reschedule_for_queue+0xe4>)
   192de:	462b      	mov	r3, r5
   192e0:	f001 fb4c 	bl	1a97c <z_add_timeout>
	return ret;
   192e4:	2401      	movs	r4, #1
   192e6:	e7e0      	b.n	192aa <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   192e8:	f387 8811 	msr	BASEPRI, r7
   192ec:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   192f0:	4620      	mov	r0, r4
   192f2:	b003      	add	sp, #12
   192f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   192f6:	bf00      	nop
   192f8:	000240c6 	.word	0x000240c6
   192fc:	000205a4 	.word	0x000205a4
   19300:	00023ff0 	.word	0x00023ff0
   19304:	20009b80 	.word	0x20009b80
   19308:	000209d8 	.word	0x000209d8
   1930c:	00020a31 	.word	0x00020a31
   19310:	00020a46 	.word	0x00020a46
   19314:	00020a05 	.word	0x00020a05
   19318:	00020a1c 	.word	0x00020a1c
   1931c:	00018c8d 	.word	0x00018c8d

00019320 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   19320:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   19322:	4801      	ldr	r0, [pc, #4]	; (19328 <k_work_reschedule+0x8>)
   19324:	f7ff bf88 	b.w	19238 <k_work_reschedule_for_queue>
   19328:	200095c0 	.word	0x200095c0

0001932c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1932c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1932e:	4604      	mov	r4, r0
   19330:	b958      	cbnz	r0, 1934a <k_work_cancel_delayable+0x1e>
   19332:	4922      	ldr	r1, [pc, #136]	; (193bc <k_work_cancel_delayable+0x90>)
   19334:	4822      	ldr	r0, [pc, #136]	; (193c0 <k_work_cancel_delayable+0x94>)
   19336:	f240 33fd 	movw	r3, #1021	; 0x3fd
   1933a:	4a22      	ldr	r2, [pc, #136]	; (193c4 <k_work_cancel_delayable+0x98>)
   1933c:	f002 fcfc 	bl	1bd38 <assert_print>
   19340:	f240 31fd 	movw	r1, #1021	; 0x3fd
   19344:	481f      	ldr	r0, [pc, #124]	; (193c4 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19346:	f002 fcf0 	bl	1bd2a <assert_post_action>
	__asm__ volatile(
   1934a:	f04f 0320 	mov.w	r3, #32
   1934e:	f3ef 8511 	mrs	r5, BASEPRI
   19352:	f383 8812 	msr	BASEPRI_MAX, r3
   19356:	f3bf 8f6f 	isb	sy
   1935a:	481b      	ldr	r0, [pc, #108]	; (193c8 <k_work_cancel_delayable+0x9c>)
   1935c:	f7fe ff2a 	bl	181b4 <z_spin_lock_valid>
   19360:	b960      	cbnz	r0, 1937c <k_work_cancel_delayable+0x50>
   19362:	2394      	movs	r3, #148	; 0x94
   19364:	4a19      	ldr	r2, [pc, #100]	; (193cc <k_work_cancel_delayable+0xa0>)
   19366:	491a      	ldr	r1, [pc, #104]	; (193d0 <k_work_cancel_delayable+0xa4>)
   19368:	4815      	ldr	r0, [pc, #84]	; (193c0 <k_work_cancel_delayable+0x94>)
   1936a:	f002 fce5 	bl	1bd38 <assert_print>
   1936e:	4916      	ldr	r1, [pc, #88]	; (193c8 <k_work_cancel_delayable+0x9c>)
   19370:	4818      	ldr	r0, [pc, #96]	; (193d4 <k_work_cancel_delayable+0xa8>)
   19372:	f002 fce1 	bl	1bd38 <assert_print>
   19376:	2194      	movs	r1, #148	; 0x94
   19378:	4814      	ldr	r0, [pc, #80]	; (193cc <k_work_cancel_delayable+0xa0>)
   1937a:	e7e4      	b.n	19346 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   1937c:	4812      	ldr	r0, [pc, #72]	; (193c8 <k_work_cancel_delayable+0x9c>)
   1937e:	f7fe ff35 	bl	181ec <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   19382:	4620      	mov	r0, r4
   19384:	f005 fece 	bl	1f124 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   19388:	4620      	mov	r0, r4
   1938a:	f005 fee0 	bl	1f14e <cancel_async_locked>
   1938e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19390:	480d      	ldr	r0, [pc, #52]	; (193c8 <k_work_cancel_delayable+0x9c>)
   19392:	f7fe ff1d 	bl	181d0 <z_spin_unlock_valid>
   19396:	b958      	cbnz	r0, 193b0 <k_work_cancel_delayable+0x84>
   19398:	23c2      	movs	r3, #194	; 0xc2
   1939a:	4a0c      	ldr	r2, [pc, #48]	; (193cc <k_work_cancel_delayable+0xa0>)
   1939c:	490e      	ldr	r1, [pc, #56]	; (193d8 <k_work_cancel_delayable+0xac>)
   1939e:	4808      	ldr	r0, [pc, #32]	; (193c0 <k_work_cancel_delayable+0x94>)
   193a0:	f002 fcca 	bl	1bd38 <assert_print>
   193a4:	4908      	ldr	r1, [pc, #32]	; (193c8 <k_work_cancel_delayable+0x9c>)
   193a6:	480d      	ldr	r0, [pc, #52]	; (193dc <k_work_cancel_delayable+0xb0>)
   193a8:	f002 fcc6 	bl	1bd38 <assert_print>
   193ac:	21c2      	movs	r1, #194	; 0xc2
   193ae:	e7e3      	b.n	19378 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   193b0:	f385 8811 	msr	BASEPRI, r5
   193b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   193b8:	4620      	mov	r0, r4
   193ba:	bd38      	pop	{r3, r4, r5, pc}
   193bc:	000240c6 	.word	0x000240c6
   193c0:	000205a4 	.word	0x000205a4
   193c4:	00023ff0 	.word	0x00023ff0
   193c8:	20009b80 	.word	0x20009b80
   193cc:	000209d8 	.word	0x000209d8
   193d0:	00020a31 	.word	0x00020a31
   193d4:	00020a46 	.word	0x00020a46
   193d8:	00020a05 	.word	0x00020a05
   193dc:	00020a1c 	.word	0x00020a1c

000193e0 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   193e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193e4:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   193e6:	4605      	mov	r5, r0
   193e8:	b958      	cbnz	r0, 19402 <k_work_cancel_delayable_sync+0x22>
   193ea:	493a      	ldr	r1, [pc, #232]	; (194d4 <k_work_cancel_delayable_sync+0xf4>)
   193ec:	f240 430e 	movw	r3, #1038	; 0x40e
   193f0:	4a39      	ldr	r2, [pc, #228]	; (194d8 <k_work_cancel_delayable_sync+0xf8>)
   193f2:	483a      	ldr	r0, [pc, #232]	; (194dc <k_work_cancel_delayable_sync+0xfc>)
   193f4:	f002 fca0 	bl	1bd38 <assert_print>
   193f8:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   193fc:	4836      	ldr	r0, [pc, #216]	; (194d8 <k_work_cancel_delayable_sync+0xf8>)
   193fe:	f002 fc94 	bl	1bd2a <assert_post_action>
   19402:	b949      	cbnz	r1, 19418 <k_work_cancel_delayable_sync+0x38>
   19404:	4936      	ldr	r1, [pc, #216]	; (194e0 <k_work_cancel_delayable_sync+0x100>)
   19406:	f240 430f 	movw	r3, #1039	; 0x40f
   1940a:	4a33      	ldr	r2, [pc, #204]	; (194d8 <k_work_cancel_delayable_sync+0xf8>)
   1940c:	4833      	ldr	r0, [pc, #204]	; (194dc <k_work_cancel_delayable_sync+0xfc>)
   1940e:	f002 fc93 	bl	1bd38 <assert_print>
   19412:	f240 410f 	movw	r1, #1039	; 0x40f
   19416:	e7f1      	b.n	193fc <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   19418:	f005 fe18 	bl	1f04c <k_is_in_isr>
   1941c:	4604      	mov	r4, r0
   1941e:	b148      	cbz	r0, 19434 <k_work_cancel_delayable_sync+0x54>
   19420:	4930      	ldr	r1, [pc, #192]	; (194e4 <k_work_cancel_delayable_sync+0x104>)
   19422:	f44f 6382 	mov.w	r3, #1040	; 0x410
   19426:	4a2c      	ldr	r2, [pc, #176]	; (194d8 <k_work_cancel_delayable_sync+0xf8>)
   19428:	482c      	ldr	r0, [pc, #176]	; (194dc <k_work_cancel_delayable_sync+0xfc>)
   1942a:	f002 fc85 	bl	1bd38 <assert_print>
   1942e:	f44f 6182 	mov.w	r1, #1040	; 0x410
   19432:	e7e3      	b.n	193fc <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   19434:	f04f 0320 	mov.w	r3, #32
   19438:	f3ef 8811 	mrs	r8, BASEPRI
   1943c:	f383 8812 	msr	BASEPRI_MAX, r3
   19440:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19444:	4828      	ldr	r0, [pc, #160]	; (194e8 <k_work_cancel_delayable_sync+0x108>)
   19446:	f7fe feb5 	bl	181b4 <z_spin_lock_valid>
   1944a:	b960      	cbnz	r0, 19466 <k_work_cancel_delayable_sync+0x86>
   1944c:	2394      	movs	r3, #148	; 0x94
   1944e:	4a27      	ldr	r2, [pc, #156]	; (194ec <k_work_cancel_delayable_sync+0x10c>)
   19450:	4927      	ldr	r1, [pc, #156]	; (194f0 <k_work_cancel_delayable_sync+0x110>)
   19452:	4822      	ldr	r0, [pc, #136]	; (194dc <k_work_cancel_delayable_sync+0xfc>)
   19454:	f002 fc70 	bl	1bd38 <assert_print>
   19458:	4923      	ldr	r1, [pc, #140]	; (194e8 <k_work_cancel_delayable_sync+0x108>)
   1945a:	4826      	ldr	r0, [pc, #152]	; (194f4 <k_work_cancel_delayable_sync+0x114>)
   1945c:	f002 fc6c 	bl	1bd38 <assert_print>
   19460:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19462:	4822      	ldr	r0, [pc, #136]	; (194ec <k_work_cancel_delayable_sync+0x10c>)
   19464:	e7cb      	b.n	193fe <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   19466:	4820      	ldr	r0, [pc, #128]	; (194e8 <k_work_cancel_delayable_sync+0x108>)
   19468:	f7fe fec0 	bl	181ec <z_spin_lock_set_owner>
	return *flagp;
   1946c:	68eb      	ldr	r3, [r5, #12]
   1946e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   19472:	2b00      	cmp	r3, #0
   19474:	bf14      	ite	ne
   19476:	2701      	movne	r7, #1
   19478:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1947a:	d00a      	beq.n	19492 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   1947c:	4628      	mov	r0, r5
   1947e:	f005 fe51 	bl	1f124 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   19482:	4628      	mov	r0, r5
   19484:	f005 fe63 	bl	1f14e <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   19488:	4631      	mov	r1, r6
   1948a:	4628      	mov	r0, r5
   1948c:	f7ff fb74 	bl	18b78 <cancel_sync_locked>
   19490:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19492:	4815      	ldr	r0, [pc, #84]	; (194e8 <k_work_cancel_delayable_sync+0x108>)
   19494:	f7fe fe9c 	bl	181d0 <z_spin_unlock_valid>
   19498:	b958      	cbnz	r0, 194b2 <k_work_cancel_delayable_sync+0xd2>
   1949a:	23c2      	movs	r3, #194	; 0xc2
   1949c:	4a13      	ldr	r2, [pc, #76]	; (194ec <k_work_cancel_delayable_sync+0x10c>)
   1949e:	4916      	ldr	r1, [pc, #88]	; (194f8 <k_work_cancel_delayable_sync+0x118>)
   194a0:	480e      	ldr	r0, [pc, #56]	; (194dc <k_work_cancel_delayable_sync+0xfc>)
   194a2:	f002 fc49 	bl	1bd38 <assert_print>
   194a6:	4910      	ldr	r1, [pc, #64]	; (194e8 <k_work_cancel_delayable_sync+0x108>)
   194a8:	4814      	ldr	r0, [pc, #80]	; (194fc <k_work_cancel_delayable_sync+0x11c>)
   194aa:	f002 fc45 	bl	1bd38 <assert_print>
   194ae:	21c2      	movs	r1, #194	; 0xc2
   194b0:	e7d7      	b.n	19462 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   194b2:	f388 8811 	msr	BASEPRI, r8
   194b6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   194ba:	b13c      	cbz	r4, 194cc <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   194bc:	f04f 32ff 	mov.w	r2, #4294967295
   194c0:	f04f 33ff 	mov.w	r3, #4294967295
   194c4:	f106 0008 	add.w	r0, r6, #8
   194c8:	f7ff f9ce 	bl	18868 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   194cc:	4638      	mov	r0, r7
   194ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194d2:	bf00      	nop
   194d4:	000240c6 	.word	0x000240c6
   194d8:	00023ff0 	.word	0x00023ff0
   194dc:	000205a4 	.word	0x000205a4
   194e0:	00024072 	.word	0x00024072
   194e4:	0002244f 	.word	0x0002244f
   194e8:	20009b80 	.word	0x20009b80
   194ec:	000209d8 	.word	0x000209d8
   194f0:	00020a31 	.word	0x00020a31
   194f4:	00020a46 	.word	0x00020a46
   194f8:	00020a05 	.word	0x00020a05
   194fc:	00020a1c 	.word	0x00020a1c

00019500 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   19500:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   19502:	4d07      	ldr	r5, [pc, #28]	; (19520 <z_reset_time_slice+0x20>)
   19504:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   19506:	b154      	cbz	r4, 1951e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   19508:	f7fc f812 	bl	15530 <sys_clock_elapsed>
   1950c:	4b05      	ldr	r3, [pc, #20]	; (19524 <z_reset_time_slice+0x24>)
   1950e:	4404      	add	r4, r0
   19510:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   19512:	6828      	ldr	r0, [r5, #0]
   19514:	2100      	movs	r1, #0
	}
}
   19516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1951a:	f001 bb87 	b.w	1ac2c <z_set_timeout_expiry>
}
   1951e:	bd38      	pop	{r3, r4, r5, pc}
   19520:	20009b8c 	.word	0x20009b8c
   19524:	20009b48 	.word	0x20009b48

00019528 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   19528:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1952a:	4d14      	ldr	r5, [pc, #80]	; (1957c <update_cache+0x54>)
   1952c:	462b      	mov	r3, r5
   1952e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19532:	429c      	cmp	r4, r3
   19534:	d000      	beq.n	19538 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19536:	b904      	cbnz	r4, 1953a <update_cache+0x12>
   19538:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   1953a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1953c:	b9a8      	cbnz	r0, 1956a <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   1953e:	b963      	cbnz	r3, 1955a <update_cache+0x32>
   19540:	490f      	ldr	r1, [pc, #60]	; (19580 <update_cache+0x58>)
   19542:	2389      	movs	r3, #137	; 0x89
   19544:	4a0f      	ldr	r2, [pc, #60]	; (19584 <update_cache+0x5c>)
   19546:	4810      	ldr	r0, [pc, #64]	; (19588 <update_cache+0x60>)
   19548:	f002 fbf6 	bl	1bd38 <assert_print>
   1954c:	480f      	ldr	r0, [pc, #60]	; (1958c <update_cache+0x64>)
   1954e:	f002 fbf3 	bl	1bd38 <assert_print>
   19552:	2189      	movs	r1, #137	; 0x89
   19554:	480b      	ldr	r0, [pc, #44]	; (19584 <update_cache+0x5c>)
   19556:	f002 fbe8 	bl	1bd2a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1955a:	7b5a      	ldrb	r2, [r3, #13]
   1955c:	06d2      	lsls	r2, r2, #27
   1955e:	d104      	bne.n	1956a <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19560:	69a2      	ldr	r2, [r4, #24]
   19562:	b912      	cbnz	r2, 1956a <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   19564:	89da      	ldrh	r2, [r3, #14]
   19566:	2a7f      	cmp	r2, #127	; 0x7f
   19568:	d805      	bhi.n	19576 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1956a:	429c      	cmp	r4, r3
   1956c:	d002      	beq.n	19574 <update_cache+0x4c>
			z_reset_time_slice(thread);
   1956e:	4620      	mov	r0, r4
   19570:	f7ff ffc6 	bl	19500 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   19574:	4623      	mov	r3, r4
   19576:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   19578:	bd38      	pop	{r3, r4, r5, pc}
   1957a:	bf00      	nop
   1957c:	20009b48 	.word	0x20009b48
   19580:	000240fd 	.word	0x000240fd
   19584:	000240db 	.word	0x000240db
   19588:	000205a4 	.word	0x000205a4
   1958c:	00022c58 	.word	0x00022c58

00019590 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   19590:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   19592:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   19596:	7b42      	ldrb	r2, [r0, #13]
   19598:	2b00      	cmp	r3, #0
   1959a:	db38      	blt.n	1960e <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1959c:	06d3      	lsls	r3, r2, #27
   1959e:	d136      	bne.n	1960e <ready_thread+0x7e>
	return node->next != NULL;
   195a0:	6983      	ldr	r3, [r0, #24]
   195a2:	2b00      	cmp	r3, #0
   195a4:	d133      	bne.n	1960e <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   195a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   195aa:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   195ac:	4a18      	ldr	r2, [pc, #96]	; (19610 <ready_thread+0x80>)
   195ae:	4290      	cmp	r0, r2
   195b0:	d109      	bne.n	195c6 <ready_thread+0x36>
   195b2:	4918      	ldr	r1, [pc, #96]	; (19614 <ready_thread+0x84>)
   195b4:	4818      	ldr	r0, [pc, #96]	; (19618 <ready_thread+0x88>)
   195b6:	23ba      	movs	r3, #186	; 0xba
   195b8:	4a18      	ldr	r2, [pc, #96]	; (1961c <ready_thread+0x8c>)
   195ba:	f002 fbbd 	bl	1bd38 <assert_print>
   195be:	21ba      	movs	r1, #186	; 0xba
   195c0:	4816      	ldr	r0, [pc, #88]	; (1961c <ready_thread+0x8c>)
   195c2:	f002 fbb2 	bl	1bd2a <assert_post_action>
	return list->head == list;
   195c6:	4916      	ldr	r1, [pc, #88]	; (19620 <ready_thread+0x90>)
   195c8:	460a      	mov	r2, r1
   195ca:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195ce:	4294      	cmp	r4, r2
   195d0:	bf18      	it	ne
   195d2:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   195d4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   195d6:	b923      	cbnz	r3, 195e2 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   195d8:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   195dc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   195de:	6248      	str	r0, [r1, #36]	; 0x24
}
   195e0:	e00c      	b.n	195fc <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   195e2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   195e6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   195ea:	42b5      	cmp	r5, r6
   195ec:	d00b      	beq.n	19606 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   195ee:	42ae      	cmp	r6, r5
   195f0:	dd09      	ble.n	19606 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   195f2:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   195f4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   195f8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   195fa:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   195fc:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   195fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   19602:	f7ff bf91 	b.w	19528 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19606:	42a3      	cmp	r3, r4
   19608:	d0e6      	beq.n	195d8 <ready_thread+0x48>
   1960a:	681b      	ldr	r3, [r3, #0]
   1960c:	e7e3      	b.n	195d6 <ready_thread+0x46>
}
   1960e:	bd70      	pop	{r4, r5, r6, pc}
   19610:	200094b0 	.word	0x200094b0
   19614:	00024124 	.word	0x00024124
   19618:	000205a4 	.word	0x000205a4
   1961c:	000240db 	.word	0x000240db
   19620:	20009b48 	.word	0x20009b48

00019624 <k_sched_time_slice_set>:
{
   19624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19626:	4604      	mov	r4, r0
   19628:	460d      	mov	r5, r1
	__asm__ volatile(
   1962a:	f04f 0320 	mov.w	r3, #32
   1962e:	f3ef 8711 	mrs	r7, BASEPRI
   19632:	f383 8812 	msr	BASEPRI_MAX, r3
   19636:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1963a:	4822      	ldr	r0, [pc, #136]	; (196c4 <k_sched_time_slice_set+0xa0>)
   1963c:	f7fe fdba 	bl	181b4 <z_spin_lock_valid>
   19640:	b968      	cbnz	r0, 1965e <k_sched_time_slice_set+0x3a>
   19642:	2394      	movs	r3, #148	; 0x94
   19644:	4a20      	ldr	r2, [pc, #128]	; (196c8 <k_sched_time_slice_set+0xa4>)
   19646:	4921      	ldr	r1, [pc, #132]	; (196cc <k_sched_time_slice_set+0xa8>)
   19648:	4821      	ldr	r0, [pc, #132]	; (196d0 <k_sched_time_slice_set+0xac>)
   1964a:	f002 fb75 	bl	1bd38 <assert_print>
   1964e:	491d      	ldr	r1, [pc, #116]	; (196c4 <k_sched_time_slice_set+0xa0>)
   19650:	4820      	ldr	r0, [pc, #128]	; (196d4 <k_sched_time_slice_set+0xb0>)
   19652:	f002 fb71 	bl	1bd38 <assert_print>
   19656:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19658:	481b      	ldr	r0, [pc, #108]	; (196c8 <k_sched_time_slice_set+0xa4>)
   1965a:	f002 fb66 	bl	1bd2a <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1965e:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   19660:	4818      	ldr	r0, [pc, #96]	; (196c4 <k_sched_time_slice_set+0xa0>)
   19662:	f7fe fdc3 	bl	181ec <z_spin_lock_set_owner>
   19666:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1966a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1966e:	4631      	mov	r1, r6
   19670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19674:	2300      	movs	r3, #0
   19676:	fbe4 010c 	umlal	r0, r1, r4, ip
   1967a:	f7ef f95b 	bl	8934 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1967e:	42b4      	cmp	r4, r6
   19680:	dd02      	ble.n	19688 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   19682:	2802      	cmp	r0, #2
   19684:	bfb8      	it	lt
   19686:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   19688:	4a13      	ldr	r2, [pc, #76]	; (196d8 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   1968a:	4b14      	ldr	r3, [pc, #80]	; (196dc <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1968c:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1968e:	4a14      	ldr	r2, [pc, #80]	; (196e0 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   19690:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   19692:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   19694:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   19696:	f7ff ff33 	bl	19500 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1969a:	480a      	ldr	r0, [pc, #40]	; (196c4 <k_sched_time_slice_set+0xa0>)
   1969c:	f7fe fd98 	bl	181d0 <z_spin_unlock_valid>
   196a0:	b958      	cbnz	r0, 196ba <k_sched_time_slice_set+0x96>
   196a2:	23c2      	movs	r3, #194	; 0xc2
   196a4:	4a08      	ldr	r2, [pc, #32]	; (196c8 <k_sched_time_slice_set+0xa4>)
   196a6:	490f      	ldr	r1, [pc, #60]	; (196e4 <k_sched_time_slice_set+0xc0>)
   196a8:	4809      	ldr	r0, [pc, #36]	; (196d0 <k_sched_time_slice_set+0xac>)
   196aa:	f002 fb45 	bl	1bd38 <assert_print>
   196ae:	4905      	ldr	r1, [pc, #20]	; (196c4 <k_sched_time_slice_set+0xa0>)
   196b0:	480d      	ldr	r0, [pc, #52]	; (196e8 <k_sched_time_slice_set+0xc4>)
   196b2:	f002 fb41 	bl	1bd38 <assert_print>
   196b6:	21c2      	movs	r1, #194	; 0xc2
   196b8:	e7ce      	b.n	19658 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   196ba:	f387 8811 	msr	BASEPRI, r7
   196be:	f3bf 8f6f 	isb	sy
}
   196c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196c4:	20009b90 	.word	0x20009b90
   196c8:	000209d8 	.word	0x000209d8
   196cc:	00020a31 	.word	0x00020a31
   196d0:	000205a4 	.word	0x000205a4
   196d4:	00020a46 	.word	0x00020a46
   196d8:	20009b8c 	.word	0x20009b8c
   196dc:	20009b48 	.word	0x20009b48
   196e0:	20009b88 	.word	0x20009b88
   196e4:	00020a05 	.word	0x00020a05
   196e8:	00020a1c 	.word	0x00020a1c

000196ec <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   196ec:	b538      	push	{r3, r4, r5, lr}
   196ee:	4604      	mov	r4, r0
	__asm__ volatile(
   196f0:	f04f 0320 	mov.w	r3, #32
   196f4:	f3ef 8511 	mrs	r5, BASEPRI
   196f8:	f383 8812 	msr	BASEPRI_MAX, r3
   196fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19700:	4816      	ldr	r0, [pc, #88]	; (1975c <z_ready_thread+0x70>)
   19702:	f7fe fd57 	bl	181b4 <z_spin_lock_valid>
   19706:	b968      	cbnz	r0, 19724 <z_ready_thread+0x38>
   19708:	2394      	movs	r3, #148	; 0x94
   1970a:	4a15      	ldr	r2, [pc, #84]	; (19760 <z_ready_thread+0x74>)
   1970c:	4915      	ldr	r1, [pc, #84]	; (19764 <z_ready_thread+0x78>)
   1970e:	4816      	ldr	r0, [pc, #88]	; (19768 <z_ready_thread+0x7c>)
   19710:	f002 fb12 	bl	1bd38 <assert_print>
   19714:	4911      	ldr	r1, [pc, #68]	; (1975c <z_ready_thread+0x70>)
   19716:	4815      	ldr	r0, [pc, #84]	; (1976c <z_ready_thread+0x80>)
   19718:	f002 fb0e 	bl	1bd38 <assert_print>
   1971c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1971e:	4810      	ldr	r0, [pc, #64]	; (19760 <z_ready_thread+0x74>)
   19720:	f002 fb03 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   19724:	480d      	ldr	r0, [pc, #52]	; (1975c <z_ready_thread+0x70>)
   19726:	f7fe fd61 	bl	181ec <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   1972a:	4620      	mov	r0, r4
   1972c:	f7ff ff30 	bl	19590 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19730:	480a      	ldr	r0, [pc, #40]	; (1975c <z_ready_thread+0x70>)
   19732:	f7fe fd4d 	bl	181d0 <z_spin_unlock_valid>
   19736:	b958      	cbnz	r0, 19750 <z_ready_thread+0x64>
   19738:	23c2      	movs	r3, #194	; 0xc2
   1973a:	4a09      	ldr	r2, [pc, #36]	; (19760 <z_ready_thread+0x74>)
   1973c:	490c      	ldr	r1, [pc, #48]	; (19770 <z_ready_thread+0x84>)
   1973e:	480a      	ldr	r0, [pc, #40]	; (19768 <z_ready_thread+0x7c>)
   19740:	f002 fafa 	bl	1bd38 <assert_print>
   19744:	4905      	ldr	r1, [pc, #20]	; (1975c <z_ready_thread+0x70>)
   19746:	480b      	ldr	r0, [pc, #44]	; (19774 <z_ready_thread+0x88>)
   19748:	f002 faf6 	bl	1bd38 <assert_print>
   1974c:	21c2      	movs	r1, #194	; 0xc2
   1974e:	e7e6      	b.n	1971e <z_ready_thread+0x32>
	__asm__ volatile(
   19750:	f385 8811 	msr	BASEPRI, r5
   19754:	f3bf 8f6f 	isb	sy
		}
	}
}
   19758:	bd38      	pop	{r3, r4, r5, pc}
   1975a:	bf00      	nop
   1975c:	20009b90 	.word	0x20009b90
   19760:	000209d8 	.word	0x000209d8
   19764:	00020a31 	.word	0x00020a31
   19768:	000205a4 	.word	0x000205a4
   1976c:	00020a46 	.word	0x00020a46
   19770:	00020a05 	.word	0x00020a05
   19774:	00020a1c 	.word	0x00020a1c

00019778 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   19778:	b538      	push	{r3, r4, r5, lr}
   1977a:	4604      	mov	r4, r0
	__asm__ volatile(
   1977c:	f04f 0320 	mov.w	r3, #32
   19780:	f3ef 8511 	mrs	r5, BASEPRI
   19784:	f383 8812 	msr	BASEPRI_MAX, r3
   19788:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1978c:	4816      	ldr	r0, [pc, #88]	; (197e8 <z_unpend_thread_no_timeout+0x70>)
   1978e:	f7fe fd11 	bl	181b4 <z_spin_lock_valid>
   19792:	b968      	cbnz	r0, 197b0 <z_unpend_thread_no_timeout+0x38>
   19794:	2394      	movs	r3, #148	; 0x94
   19796:	4a15      	ldr	r2, [pc, #84]	; (197ec <z_unpend_thread_no_timeout+0x74>)
   19798:	4915      	ldr	r1, [pc, #84]	; (197f0 <z_unpend_thread_no_timeout+0x78>)
   1979a:	4816      	ldr	r0, [pc, #88]	; (197f4 <z_unpend_thread_no_timeout+0x7c>)
   1979c:	f002 facc 	bl	1bd38 <assert_print>
   197a0:	4911      	ldr	r1, [pc, #68]	; (197e8 <z_unpend_thread_no_timeout+0x70>)
   197a2:	4815      	ldr	r0, [pc, #84]	; (197f8 <z_unpend_thread_no_timeout+0x80>)
   197a4:	f002 fac8 	bl	1bd38 <assert_print>
   197a8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197aa:	4810      	ldr	r0, [pc, #64]	; (197ec <z_unpend_thread_no_timeout+0x74>)
   197ac:	f002 fabd 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   197b0:	480d      	ldr	r0, [pc, #52]	; (197e8 <z_unpend_thread_no_timeout+0x70>)
   197b2:	f7fe fd1b 	bl	181ec <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   197b6:	4620      	mov	r0, r4
   197b8:	f000 fc62 	bl	1a080 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197bc:	480a      	ldr	r0, [pc, #40]	; (197e8 <z_unpend_thread_no_timeout+0x70>)
   197be:	f7fe fd07 	bl	181d0 <z_spin_unlock_valid>
   197c2:	b958      	cbnz	r0, 197dc <z_unpend_thread_no_timeout+0x64>
   197c4:	23c2      	movs	r3, #194	; 0xc2
   197c6:	4a09      	ldr	r2, [pc, #36]	; (197ec <z_unpend_thread_no_timeout+0x74>)
   197c8:	490c      	ldr	r1, [pc, #48]	; (197fc <z_unpend_thread_no_timeout+0x84>)
   197ca:	480a      	ldr	r0, [pc, #40]	; (197f4 <z_unpend_thread_no_timeout+0x7c>)
   197cc:	f002 fab4 	bl	1bd38 <assert_print>
   197d0:	4905      	ldr	r1, [pc, #20]	; (197e8 <z_unpend_thread_no_timeout+0x70>)
   197d2:	480b      	ldr	r0, [pc, #44]	; (19800 <z_unpend_thread_no_timeout+0x88>)
   197d4:	f002 fab0 	bl	1bd38 <assert_print>
   197d8:	21c2      	movs	r1, #194	; 0xc2
   197da:	e7e6      	b.n	197aa <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   197dc:	f385 8811 	msr	BASEPRI, r5
   197e0:	f3bf 8f6f 	isb	sy
	}
}
   197e4:	bd38      	pop	{r3, r4, r5, pc}
   197e6:	bf00      	nop
   197e8:	20009b90 	.word	0x20009b90
   197ec:	000209d8 	.word	0x000209d8
   197f0:	00020a31 	.word	0x00020a31
   197f4:	000205a4 	.word	0x000205a4
   197f8:	00020a46 	.word	0x00020a46
   197fc:	00020a05 	.word	0x00020a05
   19800:	00020a1c 	.word	0x00020a1c

00019804 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   19804:	b570      	push	{r4, r5, r6, lr}
   19806:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   19808:	460d      	mov	r5, r1
   1980a:	b9e9      	cbnz	r1, 19848 <z_reschedule+0x44>
   1980c:	f3ef 8605 	mrs	r6, IPSR
   19810:	b9d6      	cbnz	r6, 19848 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   19812:	4b18      	ldr	r3, [pc, #96]	; (19874 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   19814:	69da      	ldr	r2, [r3, #28]
   19816:	689b      	ldr	r3, [r3, #8]
   19818:	429a      	cmp	r2, r3
   1981a:	d015      	beq.n	19848 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1981c:	f7fe fcd8 	bl	181d0 <z_spin_unlock_valid>
   19820:	b968      	cbnz	r0, 1983e <z_reschedule+0x3a>
   19822:	23e1      	movs	r3, #225	; 0xe1
   19824:	4a14      	ldr	r2, [pc, #80]	; (19878 <z_reschedule+0x74>)
   19826:	4915      	ldr	r1, [pc, #84]	; (1987c <z_reschedule+0x78>)
   19828:	4815      	ldr	r0, [pc, #84]	; (19880 <z_reschedule+0x7c>)
   1982a:	f002 fa85 	bl	1bd38 <assert_print>
   1982e:	4621      	mov	r1, r4
   19830:	4814      	ldr	r0, [pc, #80]	; (19884 <z_reschedule+0x80>)
   19832:	f002 fa81 	bl	1bd38 <assert_print>
   19836:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19838:	480f      	ldr	r0, [pc, #60]	; (19878 <z_reschedule+0x74>)
   1983a:	f002 fa76 	bl	1bd2a <assert_post_action>
	ret = arch_swap(key);
   1983e:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   19840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19844:	f7f3 baae 	b.w	cda4 <arch_swap>
   19848:	4620      	mov	r0, r4
   1984a:	f7fe fcc1 	bl	181d0 <z_spin_unlock_valid>
   1984e:	b958      	cbnz	r0, 19868 <z_reschedule+0x64>
   19850:	23c2      	movs	r3, #194	; 0xc2
   19852:	4a09      	ldr	r2, [pc, #36]	; (19878 <z_reschedule+0x74>)
   19854:	4909      	ldr	r1, [pc, #36]	; (1987c <z_reschedule+0x78>)
   19856:	480a      	ldr	r0, [pc, #40]	; (19880 <z_reschedule+0x7c>)
   19858:	f002 fa6e 	bl	1bd38 <assert_print>
   1985c:	4621      	mov	r1, r4
   1985e:	4809      	ldr	r0, [pc, #36]	; (19884 <z_reschedule+0x80>)
   19860:	f002 fa6a 	bl	1bd38 <assert_print>
   19864:	21c2      	movs	r1, #194	; 0xc2
   19866:	e7e7      	b.n	19838 <z_reschedule+0x34>
   19868:	f385 8811 	msr	BASEPRI, r5
   1986c:	f3bf 8f6f 	isb	sy
   19870:	bd70      	pop	{r4, r5, r6, pc}
   19872:	bf00      	nop
   19874:	20009b48 	.word	0x20009b48
   19878:	000209d8 	.word	0x000209d8
   1987c:	00020a05 	.word	0x00020a05
   19880:	000205a4 	.word	0x000205a4
   19884:	00020a1c 	.word	0x00020a1c

00019888 <z_sched_start>:
{
   19888:	b538      	push	{r3, r4, r5, lr}
   1988a:	4604      	mov	r4, r0
	__asm__ volatile(
   1988c:	f04f 0320 	mov.w	r3, #32
   19890:	f3ef 8511 	mrs	r5, BASEPRI
   19894:	f383 8812 	msr	BASEPRI_MAX, r3
   19898:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1989c:	481c      	ldr	r0, [pc, #112]	; (19910 <z_sched_start+0x88>)
   1989e:	f7fe fc89 	bl	181b4 <z_spin_lock_valid>
   198a2:	b968      	cbnz	r0, 198c0 <z_sched_start+0x38>
   198a4:	2394      	movs	r3, #148	; 0x94
   198a6:	4a1b      	ldr	r2, [pc, #108]	; (19914 <z_sched_start+0x8c>)
   198a8:	491b      	ldr	r1, [pc, #108]	; (19918 <z_sched_start+0x90>)
   198aa:	481c      	ldr	r0, [pc, #112]	; (1991c <z_sched_start+0x94>)
   198ac:	f002 fa44 	bl	1bd38 <assert_print>
   198b0:	4917      	ldr	r1, [pc, #92]	; (19910 <z_sched_start+0x88>)
   198b2:	481b      	ldr	r0, [pc, #108]	; (19920 <z_sched_start+0x98>)
   198b4:	f002 fa40 	bl	1bd38 <assert_print>
   198b8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   198ba:	4816      	ldr	r0, [pc, #88]	; (19914 <z_sched_start+0x8c>)
   198bc:	f002 fa35 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   198c0:	4813      	ldr	r0, [pc, #76]	; (19910 <z_sched_start+0x88>)
   198c2:	f7fe fc93 	bl	181ec <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   198c6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   198c8:	075a      	lsls	r2, r3, #29
   198ca:	d414      	bmi.n	198f6 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   198cc:	4810      	ldr	r0, [pc, #64]	; (19910 <z_sched_start+0x88>)
   198ce:	f7fe fc7f 	bl	181d0 <z_spin_unlock_valid>
   198d2:	b958      	cbnz	r0, 198ec <z_sched_start+0x64>
   198d4:	23c2      	movs	r3, #194	; 0xc2
   198d6:	4a0f      	ldr	r2, [pc, #60]	; (19914 <z_sched_start+0x8c>)
   198d8:	4912      	ldr	r1, [pc, #72]	; (19924 <z_sched_start+0x9c>)
   198da:	4810      	ldr	r0, [pc, #64]	; (1991c <z_sched_start+0x94>)
   198dc:	f002 fa2c 	bl	1bd38 <assert_print>
   198e0:	490b      	ldr	r1, [pc, #44]	; (19910 <z_sched_start+0x88>)
   198e2:	4811      	ldr	r0, [pc, #68]	; (19928 <z_sched_start+0xa0>)
   198e4:	f002 fa28 	bl	1bd38 <assert_print>
   198e8:	21c2      	movs	r1, #194	; 0xc2
   198ea:	e7e6      	b.n	198ba <z_sched_start+0x32>
	__asm__ volatile(
   198ec:	f385 8811 	msr	BASEPRI, r5
   198f0:	f3bf 8f6f 	isb	sy
}
   198f4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   198f6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   198fa:	4620      	mov	r0, r4
   198fc:	7363      	strb	r3, [r4, #13]
   198fe:	f7ff fe47 	bl	19590 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19902:	4629      	mov	r1, r5
}
   19904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   19908:	4801      	ldr	r0, [pc, #4]	; (19910 <z_sched_start+0x88>)
   1990a:	f7ff bf7b 	b.w	19804 <z_reschedule>
   1990e:	bf00      	nop
   19910:	20009b90 	.word	0x20009b90
   19914:	000209d8 	.word	0x000209d8
   19918:	00020a31 	.word	0x00020a31
   1991c:	000205a4 	.word	0x000205a4
   19920:	00020a46 	.word	0x00020a46
   19924:	00020a05 	.word	0x00020a05
   19928:	00020a1c 	.word	0x00020a1c

0001992c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   1992c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1992e:	f04f 0320 	mov.w	r3, #32
   19932:	f3ef 8411 	mrs	r4, BASEPRI
   19936:	f383 8812 	msr	BASEPRI_MAX, r3
   1993a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1993e:	4825      	ldr	r0, [pc, #148]	; (199d4 <k_sched_lock+0xa8>)
   19940:	f7fe fc38 	bl	181b4 <z_spin_lock_valid>
   19944:	b960      	cbnz	r0, 19960 <k_sched_lock+0x34>
   19946:	2394      	movs	r3, #148	; 0x94
   19948:	4a23      	ldr	r2, [pc, #140]	; (199d8 <k_sched_lock+0xac>)
   1994a:	4924      	ldr	r1, [pc, #144]	; (199dc <k_sched_lock+0xb0>)
   1994c:	4824      	ldr	r0, [pc, #144]	; (199e0 <k_sched_lock+0xb4>)
   1994e:	f002 f9f3 	bl	1bd38 <assert_print>
   19952:	4920      	ldr	r1, [pc, #128]	; (199d4 <k_sched_lock+0xa8>)
   19954:	4823      	ldr	r0, [pc, #140]	; (199e4 <k_sched_lock+0xb8>)
   19956:	f002 f9ef 	bl	1bd38 <assert_print>
   1995a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1995c:	481e      	ldr	r0, [pc, #120]	; (199d8 <k_sched_lock+0xac>)
   1995e:	e010      	b.n	19982 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   19960:	481c      	ldr	r0, [pc, #112]	; (199d4 <k_sched_lock+0xa8>)
   19962:	f7fe fc43 	bl	181ec <z_spin_lock_set_owner>
   19966:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1996a:	b163      	cbz	r3, 19986 <k_sched_lock+0x5a>
   1996c:	491e      	ldr	r1, [pc, #120]	; (199e8 <k_sched_lock+0xbc>)
   1996e:	23fd      	movs	r3, #253	; 0xfd
   19970:	4a1e      	ldr	r2, [pc, #120]	; (199ec <k_sched_lock+0xc0>)
   19972:	481b      	ldr	r0, [pc, #108]	; (199e0 <k_sched_lock+0xb4>)
   19974:	f002 f9e0 	bl	1bd38 <assert_print>
   19978:	481d      	ldr	r0, [pc, #116]	; (199f0 <k_sched_lock+0xc4>)
   1997a:	f002 f9dd 	bl	1bd38 <assert_print>
   1997e:	21fd      	movs	r1, #253	; 0xfd
   19980:	481a      	ldr	r0, [pc, #104]	; (199ec <k_sched_lock+0xc0>)
   19982:	f002 f9d2 	bl	1bd2a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   19986:	4b1b      	ldr	r3, [pc, #108]	; (199f4 <k_sched_lock+0xc8>)
   19988:	689a      	ldr	r2, [r3, #8]
   1998a:	7bd3      	ldrb	r3, [r2, #15]
   1998c:	2b01      	cmp	r3, #1
   1998e:	d10a      	bne.n	199a6 <k_sched_lock+0x7a>
   19990:	4919      	ldr	r1, [pc, #100]	; (199f8 <k_sched_lock+0xcc>)
   19992:	23fe      	movs	r3, #254	; 0xfe
   19994:	4a15      	ldr	r2, [pc, #84]	; (199ec <k_sched_lock+0xc0>)
   19996:	4812      	ldr	r0, [pc, #72]	; (199e0 <k_sched_lock+0xb4>)
   19998:	f002 f9ce 	bl	1bd38 <assert_print>
   1999c:	4814      	ldr	r0, [pc, #80]	; (199f0 <k_sched_lock+0xc4>)
   1999e:	f002 f9cb 	bl	1bd38 <assert_print>
   199a2:	21fe      	movs	r1, #254	; 0xfe
   199a4:	e7ec      	b.n	19980 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   199a6:	3b01      	subs	r3, #1
   199a8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   199aa:	480a      	ldr	r0, [pc, #40]	; (199d4 <k_sched_lock+0xa8>)
   199ac:	f7fe fc10 	bl	181d0 <z_spin_unlock_valid>
   199b0:	b958      	cbnz	r0, 199ca <k_sched_lock+0x9e>
   199b2:	23c2      	movs	r3, #194	; 0xc2
   199b4:	4a08      	ldr	r2, [pc, #32]	; (199d8 <k_sched_lock+0xac>)
   199b6:	4911      	ldr	r1, [pc, #68]	; (199fc <k_sched_lock+0xd0>)
   199b8:	4809      	ldr	r0, [pc, #36]	; (199e0 <k_sched_lock+0xb4>)
   199ba:	f002 f9bd 	bl	1bd38 <assert_print>
   199be:	4905      	ldr	r1, [pc, #20]	; (199d4 <k_sched_lock+0xa8>)
   199c0:	480f      	ldr	r0, [pc, #60]	; (19a00 <k_sched_lock+0xd4>)
   199c2:	f002 f9b9 	bl	1bd38 <assert_print>
   199c6:	21c2      	movs	r1, #194	; 0xc2
   199c8:	e7c8      	b.n	1995c <k_sched_lock+0x30>
	__asm__ volatile(
   199ca:	f384 8811 	msr	BASEPRI, r4
   199ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   199d2:	bd10      	pop	{r4, pc}
   199d4:	20009b90 	.word	0x20009b90
   199d8:	000209d8 	.word	0x000209d8
   199dc:	00020a31 	.word	0x00020a31
   199e0:	000205a4 	.word	0x000205a4
   199e4:	00020a46 	.word	0x00020a46
   199e8:	00023e6e 	.word	0x00023e6e
   199ec:	00024145 	.word	0x00024145
   199f0:	00022c58 	.word	0x00022c58
   199f4:	20009b48 	.word	0x20009b48
   199f8:	00024170 	.word	0x00024170
   199fc:	00020a05 	.word	0x00020a05
   19a00:	00020a1c 	.word	0x00020a1c

00019a04 <k_sched_unlock>:

void k_sched_unlock(void)
{
   19a04:	b510      	push	{r4, lr}
	__asm__ volatile(
   19a06:	f04f 0320 	mov.w	r3, #32
   19a0a:	f3ef 8411 	mrs	r4, BASEPRI
   19a0e:	f383 8812 	msr	BASEPRI_MAX, r3
   19a12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19a16:	4829      	ldr	r0, [pc, #164]	; (19abc <k_sched_unlock+0xb8>)
   19a18:	f7fe fbcc 	bl	181b4 <z_spin_lock_valid>
   19a1c:	b960      	cbnz	r0, 19a38 <k_sched_unlock+0x34>
   19a1e:	2394      	movs	r3, #148	; 0x94
   19a20:	4a27      	ldr	r2, [pc, #156]	; (19ac0 <k_sched_unlock+0xbc>)
   19a22:	4928      	ldr	r1, [pc, #160]	; (19ac4 <k_sched_unlock+0xc0>)
   19a24:	4828      	ldr	r0, [pc, #160]	; (19ac8 <k_sched_unlock+0xc4>)
   19a26:	f002 f987 	bl	1bd38 <assert_print>
   19a2a:	4924      	ldr	r1, [pc, #144]	; (19abc <k_sched_unlock+0xb8>)
   19a2c:	4827      	ldr	r0, [pc, #156]	; (19acc <k_sched_unlock+0xc8>)
   19a2e:	f002 f983 	bl	1bd38 <assert_print>
   19a32:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a34:	4822      	ldr	r0, [pc, #136]	; (19ac0 <k_sched_unlock+0xbc>)
   19a36:	e013      	b.n	19a60 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   19a38:	4820      	ldr	r0, [pc, #128]	; (19abc <k_sched_unlock+0xb8>)
   19a3a:	f7fe fbd7 	bl	181ec <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   19a3e:	4b24      	ldr	r3, [pc, #144]	; (19ad0 <k_sched_unlock+0xcc>)
   19a40:	689a      	ldr	r2, [r3, #8]
   19a42:	7bd3      	ldrb	r3, [r2, #15]
   19a44:	b973      	cbnz	r3, 19a64 <k_sched_unlock+0x60>
   19a46:	4923      	ldr	r1, [pc, #140]	; (19ad4 <k_sched_unlock+0xd0>)
   19a48:	f240 33e7 	movw	r3, #999	; 0x3e7
   19a4c:	4a22      	ldr	r2, [pc, #136]	; (19ad8 <k_sched_unlock+0xd4>)
   19a4e:	481e      	ldr	r0, [pc, #120]	; (19ac8 <k_sched_unlock+0xc4>)
   19a50:	f002 f972 	bl	1bd38 <assert_print>
   19a54:	4821      	ldr	r0, [pc, #132]	; (19adc <k_sched_unlock+0xd8>)
   19a56:	f002 f96f 	bl	1bd38 <assert_print>
   19a5a:	f240 31e7 	movw	r1, #999	; 0x3e7
   19a5e:	481e      	ldr	r0, [pc, #120]	; (19ad8 <k_sched_unlock+0xd4>)
   19a60:	f002 f963 	bl	1bd2a <assert_post_action>
   19a64:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   19a68:	b160      	cbz	r0, 19a84 <k_sched_unlock+0x80>
   19a6a:	491d      	ldr	r1, [pc, #116]	; (19ae0 <k_sched_unlock+0xdc>)
   19a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19a70:	4a19      	ldr	r2, [pc, #100]	; (19ad8 <k_sched_unlock+0xd4>)
   19a72:	4815      	ldr	r0, [pc, #84]	; (19ac8 <k_sched_unlock+0xc4>)
   19a74:	f002 f960 	bl	1bd38 <assert_print>
   19a78:	4818      	ldr	r0, [pc, #96]	; (19adc <k_sched_unlock+0xd8>)
   19a7a:	f002 f95d 	bl	1bd38 <assert_print>
   19a7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19a82:	e7ec      	b.n	19a5e <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   19a84:	3301      	adds	r3, #1
   19a86:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19a88:	f7ff fd4e 	bl	19528 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a8c:	480b      	ldr	r0, [pc, #44]	; (19abc <k_sched_unlock+0xb8>)
   19a8e:	f7fe fb9f 	bl	181d0 <z_spin_unlock_valid>
   19a92:	b958      	cbnz	r0, 19aac <k_sched_unlock+0xa8>
   19a94:	23c2      	movs	r3, #194	; 0xc2
   19a96:	4a0a      	ldr	r2, [pc, #40]	; (19ac0 <k_sched_unlock+0xbc>)
   19a98:	4912      	ldr	r1, [pc, #72]	; (19ae4 <k_sched_unlock+0xe0>)
   19a9a:	480b      	ldr	r0, [pc, #44]	; (19ac8 <k_sched_unlock+0xc4>)
   19a9c:	f002 f94c 	bl	1bd38 <assert_print>
   19aa0:	4906      	ldr	r1, [pc, #24]	; (19abc <k_sched_unlock+0xb8>)
   19aa2:	4811      	ldr	r0, [pc, #68]	; (19ae8 <k_sched_unlock+0xe4>)
   19aa4:	f002 f948 	bl	1bd38 <assert_print>
   19aa8:	21c2      	movs	r1, #194	; 0xc2
   19aaa:	e7c3      	b.n	19a34 <k_sched_unlock+0x30>
	__asm__ volatile(
   19aac:	f384 8811 	msr	BASEPRI, r4
   19ab0:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   19ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   19ab8:	f005 bba4 	b.w	1f204 <z_reschedule_unlocked>
   19abc:	20009b90 	.word	0x20009b90
   19ac0:	000209d8 	.word	0x000209d8
   19ac4:	00020a31 	.word	0x00020a31
   19ac8:	000205a4 	.word	0x000205a4
   19acc:	00020a46 	.word	0x00020a46
   19ad0:	20009b48 	.word	0x20009b48
   19ad4:	000241a1 	.word	0x000241a1
   19ad8:	000240db 	.word	0x000240db
   19adc:	00022c58 	.word	0x00022c58
   19ae0:	00023e6e 	.word	0x00023e6e
   19ae4:	00020a05 	.word	0x00020a05
   19ae8:	00020a1c 	.word	0x00020a1c

00019aec <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   19aec:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19aee:	4b0b      	ldr	r3, [pc, #44]	; (19b1c <z_priq_dumb_remove+0x30>)
   19af0:	4299      	cmp	r1, r3
   19af2:	d10b      	bne.n	19b0c <z_priq_dumb_remove+0x20>
   19af4:	490a      	ldr	r1, [pc, #40]	; (19b20 <z_priq_dumb_remove+0x34>)
   19af6:	480b      	ldr	r0, [pc, #44]	; (19b24 <z_priq_dumb_remove+0x38>)
   19af8:	f240 4373 	movw	r3, #1139	; 0x473
   19afc:	4a0a      	ldr	r2, [pc, #40]	; (19b28 <z_priq_dumb_remove+0x3c>)
   19afe:	f002 f91b 	bl	1bd38 <assert_print>
   19b02:	f240 4173 	movw	r1, #1139	; 0x473
   19b06:	4808      	ldr	r0, [pc, #32]	; (19b28 <z_priq_dumb_remove+0x3c>)
   19b08:	f002 f90f 	bl	1bd2a <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   19b0c:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   19b10:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19b12:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19b14:	2300      	movs	r3, #0
	node->prev = NULL;
   19b16:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   19b1a:	bd08      	pop	{r3, pc}
   19b1c:	200094b0 	.word	0x200094b0
   19b20:	00024124 	.word	0x00024124
   19b24:	000205a4 	.word	0x000205a4
   19b28:	000240db 	.word	0x000240db

00019b2c <move_thread_to_end_of_prio_q>:
{
   19b2c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   19b2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19b32:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   19b34:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   19b36:	7b43      	ldrb	r3, [r0, #13]
   19b38:	da06      	bge.n	19b48 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   19b3e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19b40:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19b42:	481d      	ldr	r0, [pc, #116]	; (19bb8 <move_thread_to_end_of_prio_q+0x8c>)
   19b44:	f7ff ffd2 	bl	19aec <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   19b48:	7b63      	ldrb	r3, [r4, #13]
   19b4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19b4e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19b50:	4b1a      	ldr	r3, [pc, #104]	; (19bbc <move_thread_to_end_of_prio_q+0x90>)
   19b52:	429c      	cmp	r4, r3
   19b54:	d109      	bne.n	19b6a <move_thread_to_end_of_prio_q+0x3e>
   19b56:	491a      	ldr	r1, [pc, #104]	; (19bc0 <move_thread_to_end_of_prio_q+0x94>)
   19b58:	481a      	ldr	r0, [pc, #104]	; (19bc4 <move_thread_to_end_of_prio_q+0x98>)
   19b5a:	23ba      	movs	r3, #186	; 0xba
   19b5c:	4a1a      	ldr	r2, [pc, #104]	; (19bc8 <move_thread_to_end_of_prio_q+0x9c>)
   19b5e:	f002 f8eb 	bl	1bd38 <assert_print>
   19b62:	21ba      	movs	r1, #186	; 0xba
   19b64:	4818      	ldr	r0, [pc, #96]	; (19bc8 <move_thread_to_end_of_prio_q+0x9c>)
   19b66:	f002 f8e0 	bl	1bd2a <assert_post_action>
	return list->head == list;
   19b6a:	4a18      	ldr	r2, [pc, #96]	; (19bcc <move_thread_to_end_of_prio_q+0xa0>)
   19b6c:	4611      	mov	r1, r2
   19b6e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   19b72:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19b74:	428b      	cmp	r3, r1
   19b76:	bf08      	it	eq
   19b78:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19b7a:	b923      	cbnz	r3, 19b86 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   19b7c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   19b80:	6004      	str	r4, [r0, #0]
	list->tail = node;
   19b82:	6254      	str	r4, [r2, #36]	; 0x24
}
   19b84:	e00c      	b.n	19ba0 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   19b86:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   19b8a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   19b8e:	42b5      	cmp	r5, r6
   19b90:	d00e      	beq.n	19bb0 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19b92:	42ae      	cmp	r6, r5
   19b94:	dd0c      	ble.n	19bb0 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   19b96:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19b98:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   19b9c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19b9e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   19ba0:	6890      	ldr	r0, [r2, #8]
   19ba2:	1b03      	subs	r3, r0, r4
   19ba4:	4258      	negs	r0, r3
   19ba6:	4158      	adcs	r0, r3
}
   19ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   19bac:	f7ff bcbc 	b.w	19528 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19bb0:	4298      	cmp	r0, r3
   19bb2:	d0e3      	beq.n	19b7c <move_thread_to_end_of_prio_q+0x50>
   19bb4:	681b      	ldr	r3, [r3, #0]
   19bb6:	e7e0      	b.n	19b7a <move_thread_to_end_of_prio_q+0x4e>
   19bb8:	20009b68 	.word	0x20009b68
   19bbc:	200094b0 	.word	0x200094b0
   19bc0:	00024124 	.word	0x00024124
   19bc4:	000205a4 	.word	0x000205a4
   19bc8:	000240db 	.word	0x000240db
   19bcc:	20009b48 	.word	0x20009b48

00019bd0 <z_time_slice>:
{
   19bd0:	b570      	push	{r4, r5, r6, lr}
   19bd2:	4605      	mov	r5, r0
	__asm__ volatile(
   19bd4:	f04f 0320 	mov.w	r3, #32
   19bd8:	f3ef 8611 	mrs	r6, BASEPRI
   19bdc:	f383 8812 	msr	BASEPRI_MAX, r3
   19be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19be4:	4829      	ldr	r0, [pc, #164]	; (19c8c <z_time_slice+0xbc>)
   19be6:	f7fe fae5 	bl	181b4 <z_spin_lock_valid>
   19bea:	b968      	cbnz	r0, 19c08 <z_time_slice+0x38>
   19bec:	2394      	movs	r3, #148	; 0x94
   19bee:	4a28      	ldr	r2, [pc, #160]	; (19c90 <z_time_slice+0xc0>)
   19bf0:	4928      	ldr	r1, [pc, #160]	; (19c94 <z_time_slice+0xc4>)
   19bf2:	4829      	ldr	r0, [pc, #164]	; (19c98 <z_time_slice+0xc8>)
   19bf4:	f002 f8a0 	bl	1bd38 <assert_print>
   19bf8:	4924      	ldr	r1, [pc, #144]	; (19c8c <z_time_slice+0xbc>)
   19bfa:	4828      	ldr	r0, [pc, #160]	; (19c9c <z_time_slice+0xcc>)
   19bfc:	f002 f89c 	bl	1bd38 <assert_print>
   19c00:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c02:	4823      	ldr	r0, [pc, #140]	; (19c90 <z_time_slice+0xc0>)
   19c04:	f002 f891 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   19c08:	4820      	ldr	r0, [pc, #128]	; (19c8c <z_time_slice+0xbc>)
   19c0a:	f7fe faef 	bl	181ec <z_spin_lock_set_owner>
	if (pending_current == _current) {
   19c0e:	4b24      	ldr	r3, [pc, #144]	; (19ca0 <z_time_slice+0xd0>)
   19c10:	4a24      	ldr	r2, [pc, #144]	; (19ca4 <z_time_slice+0xd4>)
   19c12:	689c      	ldr	r4, [r3, #8]
   19c14:	6811      	ldr	r1, [r2, #0]
   19c16:	428c      	cmp	r4, r1
   19c18:	d112      	bne.n	19c40 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   19c1a:	4620      	mov	r0, r4
   19c1c:	f7ff fc70 	bl	19500 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c20:	481a      	ldr	r0, [pc, #104]	; (19c8c <z_time_slice+0xbc>)
   19c22:	f7fe fad5 	bl	181d0 <z_spin_unlock_valid>
   19c26:	bb58      	cbnz	r0, 19c80 <z_time_slice+0xb0>
   19c28:	23c2      	movs	r3, #194	; 0xc2
   19c2a:	4a19      	ldr	r2, [pc, #100]	; (19c90 <z_time_slice+0xc0>)
   19c2c:	491e      	ldr	r1, [pc, #120]	; (19ca8 <z_time_slice+0xd8>)
   19c2e:	481a      	ldr	r0, [pc, #104]	; (19c98 <z_time_slice+0xc8>)
   19c30:	f002 f882 	bl	1bd38 <assert_print>
   19c34:	4915      	ldr	r1, [pc, #84]	; (19c8c <z_time_slice+0xbc>)
   19c36:	481d      	ldr	r0, [pc, #116]	; (19cac <z_time_slice+0xdc>)
   19c38:	f002 f87e 	bl	1bd38 <assert_print>
   19c3c:	21c2      	movs	r1, #194	; 0xc2
   19c3e:	e7e0      	b.n	19c02 <z_time_slice+0x32>
	pending_current = NULL;
   19c40:	2100      	movs	r1, #0
   19c42:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   19c44:	4a1a      	ldr	r2, [pc, #104]	; (19cb0 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   19c46:	6812      	ldr	r2, [r2, #0]
   19c48:	b1c2      	cbz	r2, 19c7c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   19c4a:	89e2      	ldrh	r2, [r4, #14]
   19c4c:	2a7f      	cmp	r2, #127	; 0x7f
   19c4e:	d815      	bhi.n	19c7c <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   19c50:	7b62      	ldrb	r2, [r4, #13]
   19c52:	06d2      	lsls	r2, r2, #27
   19c54:	d112      	bne.n	19c7c <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19c56:	4a17      	ldr	r2, [pc, #92]	; (19cb4 <z_time_slice+0xe4>)
   19c58:	f994 100e 	ldrsb.w	r1, [r4, #14]
   19c5c:	6812      	ldr	r2, [r2, #0]
   19c5e:	4291      	cmp	r1, r2
   19c60:	db0c      	blt.n	19c7c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   19c62:	4a15      	ldr	r2, [pc, #84]	; (19cb8 <z_time_slice+0xe8>)
   19c64:	4294      	cmp	r4, r2
   19c66:	d009      	beq.n	19c7c <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   19c68:	691a      	ldr	r2, [r3, #16]
   19c6a:	42aa      	cmp	r2, r5
   19c6c:	dc03      	bgt.n	19c76 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   19c6e:	4620      	mov	r0, r4
   19c70:	f7ff ff5c 	bl	19b2c <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   19c74:	e7d1      	b.n	19c1a <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   19c76:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   19c78:	611a      	str	r2, [r3, #16]
   19c7a:	e7d1      	b.n	19c20 <z_time_slice+0x50>
   19c7c:	2200      	movs	r2, #0
   19c7e:	e7fb      	b.n	19c78 <z_time_slice+0xa8>
	__asm__ volatile(
   19c80:	f386 8811 	msr	BASEPRI, r6
   19c84:	f3bf 8f6f 	isb	sy
}
   19c88:	bd70      	pop	{r4, r5, r6, pc}
   19c8a:	bf00      	nop
   19c8c:	20009b90 	.word	0x20009b90
   19c90:	000209d8 	.word	0x000209d8
   19c94:	00020a31 	.word	0x00020a31
   19c98:	000205a4 	.word	0x000205a4
   19c9c:	00020a46 	.word	0x00020a46
   19ca0:	20009b48 	.word	0x20009b48
   19ca4:	20009b84 	.word	0x20009b84
   19ca8:	00020a05 	.word	0x00020a05
   19cac:	00020a1c 	.word	0x00020a1c
   19cb0:	20009b8c 	.word	0x20009b8c
   19cb4:	20009b88 	.word	0x20009b88
   19cb8:	200094b0 	.word	0x200094b0

00019cbc <unready_thread>:
{
   19cbc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   19cbe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   19cc2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   19cc4:	2a00      	cmp	r2, #0
   19cc6:	7b43      	ldrb	r3, [r0, #13]
   19cc8:	da06      	bge.n	19cd8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   19cce:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19cd0:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19cd2:	4806      	ldr	r0, [pc, #24]	; (19cec <unready_thread+0x30>)
   19cd4:	f7ff ff0a 	bl	19aec <z_priq_dumb_remove>
	update_cache(thread == _current);
   19cd8:	4b05      	ldr	r3, [pc, #20]	; (19cf0 <unready_thread+0x34>)
   19cda:	6898      	ldr	r0, [r3, #8]
   19cdc:	1b03      	subs	r3, r0, r4
   19cde:	4258      	negs	r0, r3
   19ce0:	4158      	adcs	r0, r3
}
   19ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   19ce6:	f7ff bc1f 	b.w	19528 <update_cache>
   19cea:	bf00      	nop
   19cec:	20009b68 	.word	0x20009b68
   19cf0:	20009b48 	.word	0x20009b48

00019cf4 <add_to_waitq_locked>:
{
   19cf4:	b538      	push	{r3, r4, r5, lr}
   19cf6:	4604      	mov	r4, r0
   19cf8:	460d      	mov	r5, r1
	unready_thread(thread);
   19cfa:	f7ff ffdf 	bl	19cbc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   19cfe:	7b63      	ldrb	r3, [r4, #13]
   19d00:	f043 0302 	orr.w	r3, r3, #2
   19d04:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   19d06:	b34d      	cbz	r5, 19d5c <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19d08:	4b15      	ldr	r3, [pc, #84]	; (19d60 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   19d0a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19d0c:	429c      	cmp	r4, r3
   19d0e:	d109      	bne.n	19d24 <add_to_waitq_locked+0x30>
   19d10:	4914      	ldr	r1, [pc, #80]	; (19d64 <add_to_waitq_locked+0x70>)
   19d12:	4815      	ldr	r0, [pc, #84]	; (19d68 <add_to_waitq_locked+0x74>)
   19d14:	23ba      	movs	r3, #186	; 0xba
   19d16:	4a15      	ldr	r2, [pc, #84]	; (19d6c <add_to_waitq_locked+0x78>)
   19d18:	f002 f80e 	bl	1bd38 <assert_print>
   19d1c:	21ba      	movs	r1, #186	; 0xba
   19d1e:	4813      	ldr	r0, [pc, #76]	; (19d6c <add_to_waitq_locked+0x78>)
   19d20:	f002 f803 	bl	1bd2a <assert_post_action>
	return list->head == list;
   19d24:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19d26:	429d      	cmp	r5, r3
   19d28:	d109      	bne.n	19d3e <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   19d2a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   19d2c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   19d30:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19d32:	606c      	str	r4, [r5, #4]
}
   19d34:	e012      	b.n	19d5c <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   19d36:	686a      	ldr	r2, [r5, #4]
   19d38:	4293      	cmp	r3, r2
   19d3a:	d0f6      	beq.n	19d2a <add_to_waitq_locked+0x36>
   19d3c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19d3e:	2b00      	cmp	r3, #0
   19d40:	d0f3      	beq.n	19d2a <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   19d42:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   19d46:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   19d4a:	428a      	cmp	r2, r1
   19d4c:	d0f3      	beq.n	19d36 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19d4e:	4291      	cmp	r1, r2
   19d50:	ddf1      	ble.n	19d36 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   19d52:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19d54:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   19d58:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19d5a:	605c      	str	r4, [r3, #4]
}
   19d5c:	bd38      	pop	{r3, r4, r5, pc}
   19d5e:	bf00      	nop
   19d60:	200094b0 	.word	0x200094b0
   19d64:	00024124 	.word	0x00024124
   19d68:	000205a4 	.word	0x000205a4
   19d6c:	000240db 	.word	0x000240db

00019d70 <pend_locked>:
{
   19d70:	b570      	push	{r4, r5, r6, lr}
   19d72:	4615      	mov	r5, r2
   19d74:	461c      	mov	r4, r3
   19d76:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   19d78:	f7ff ffbc 	bl	19cf4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19d7c:	f1b4 3fff 	cmp.w	r4, #4294967295
   19d80:	bf08      	it	eq
   19d82:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   19d86:	d008      	beq.n	19d9a <pend_locked+0x2a>
   19d88:	462a      	mov	r2, r5
   19d8a:	4623      	mov	r3, r4
   19d8c:	f106 0018 	add.w	r0, r6, #24
   19d90:	4902      	ldr	r1, [pc, #8]	; (19d9c <pend_locked+0x2c>)
}
   19d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19d96:	f000 bdf1 	b.w	1a97c <z_add_timeout>
   19d9a:	bd70      	pop	{r4, r5, r6, pc}
   19d9c:	0001a155 	.word	0x0001a155

00019da0 <z_pend_curr>:
{
   19da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19da4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   19da8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 19e60 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   19dac:	4c2d      	ldr	r4, [pc, #180]	; (19e64 <z_pend_curr+0xc4>)
{
   19dae:	4617      	mov	r7, r2
	pending_current = _current;
   19db0:	4b2d      	ldr	r3, [pc, #180]	; (19e68 <z_pend_curr+0xc8>)
   19db2:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   19db6:	42a0      	cmp	r0, r4
{
   19db8:	4605      	mov	r5, r0
   19dba:	460e      	mov	r6, r1
	pending_current = _current;
   19dbc:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   19dbe:	d10b      	bne.n	19dd8 <z_pend_curr+0x38>
   19dc0:	492a      	ldr	r1, [pc, #168]	; (19e6c <z_pend_curr+0xcc>)
   19dc2:	482b      	ldr	r0, [pc, #172]	; (19e70 <z_pend_curr+0xd0>)
   19dc4:	f240 334e 	movw	r3, #846	; 0x34e
   19dc8:	4a2a      	ldr	r2, [pc, #168]	; (19e74 <z_pend_curr+0xd4>)
   19dca:	f001 ffb5 	bl	1bd38 <assert_print>
   19dce:	f240 314e 	movw	r1, #846	; 0x34e
   19dd2:	4828      	ldr	r0, [pc, #160]	; (19e74 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19dd4:	f001 ffa9 	bl	1bd2a <assert_post_action>
	__asm__ volatile(
   19dd8:	f04f 0220 	mov.w	r2, #32
   19ddc:	f3ef 8311 	mrs	r3, BASEPRI
   19de0:	f382 8812 	msr	BASEPRI_MAX, r2
   19de4:	f3bf 8f6f 	isb	sy
   19de8:	4620      	mov	r0, r4
   19dea:	f7fe f9e3 	bl	181b4 <z_spin_lock_valid>
   19dee:	b960      	cbnz	r0, 19e0a <z_pend_curr+0x6a>
   19df0:	2394      	movs	r3, #148	; 0x94
   19df2:	4a21      	ldr	r2, [pc, #132]	; (19e78 <z_pend_curr+0xd8>)
   19df4:	4921      	ldr	r1, [pc, #132]	; (19e7c <z_pend_curr+0xdc>)
   19df6:	481e      	ldr	r0, [pc, #120]	; (19e70 <z_pend_curr+0xd0>)
   19df8:	f001 ff9e 	bl	1bd38 <assert_print>
   19dfc:	4621      	mov	r1, r4
   19dfe:	4820      	ldr	r0, [pc, #128]	; (19e80 <z_pend_curr+0xe0>)
   19e00:	f001 ff9a 	bl	1bd38 <assert_print>
   19e04:	2194      	movs	r1, #148	; 0x94
   19e06:	481c      	ldr	r0, [pc, #112]	; (19e78 <z_pend_curr+0xd8>)
   19e08:	e7e4      	b.n	19dd4 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   19e0a:	4620      	mov	r0, r4
   19e0c:	f7fe f9ee 	bl	181ec <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   19e10:	f8da 0008 	ldr.w	r0, [sl, #8]
   19e14:	4642      	mov	r2, r8
   19e16:	464b      	mov	r3, r9
   19e18:	4639      	mov	r1, r7
   19e1a:	f7ff ffa9 	bl	19d70 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19e1e:	4628      	mov	r0, r5
   19e20:	f7fe f9d6 	bl	181d0 <z_spin_unlock_valid>
   19e24:	b958      	cbnz	r0, 19e3e <z_pend_curr+0x9e>
   19e26:	4917      	ldr	r1, [pc, #92]	; (19e84 <z_pend_curr+0xe4>)
   19e28:	23e1      	movs	r3, #225	; 0xe1
   19e2a:	4a13      	ldr	r2, [pc, #76]	; (19e78 <z_pend_curr+0xd8>)
   19e2c:	4810      	ldr	r0, [pc, #64]	; (19e70 <z_pend_curr+0xd0>)
   19e2e:	f001 ff83 	bl	1bd38 <assert_print>
   19e32:	4629      	mov	r1, r5
   19e34:	4814      	ldr	r0, [pc, #80]	; (19e88 <z_pend_curr+0xe8>)
   19e36:	f001 ff7f 	bl	1bd38 <assert_print>
   19e3a:	21e1      	movs	r1, #225	; 0xe1
   19e3c:	e7e3      	b.n	19e06 <z_pend_curr+0x66>
   19e3e:	4620      	mov	r0, r4
   19e40:	f7fe f9c6 	bl	181d0 <z_spin_unlock_valid>
   19e44:	b938      	cbnz	r0, 19e56 <z_pend_curr+0xb6>
   19e46:	490f      	ldr	r1, [pc, #60]	; (19e84 <z_pend_curr+0xe4>)
   19e48:	23e1      	movs	r3, #225	; 0xe1
   19e4a:	4a0b      	ldr	r2, [pc, #44]	; (19e78 <z_pend_curr+0xd8>)
   19e4c:	4808      	ldr	r0, [pc, #32]	; (19e70 <z_pend_curr+0xd0>)
   19e4e:	f001 ff73 	bl	1bd38 <assert_print>
   19e52:	4621      	mov	r1, r4
   19e54:	e7ee      	b.n	19e34 <z_pend_curr+0x94>
   19e56:	4630      	mov	r0, r6
}
   19e58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e5c:	f7f2 bfa2 	b.w	cda4 <arch_swap>
   19e60:	20009b48 	.word	0x20009b48
   19e64:	20009b90 	.word	0x20009b90
   19e68:	20009b84 	.word	0x20009b84
   19e6c:	000241d2 	.word	0x000241d2
   19e70:	000205a4 	.word	0x000205a4
   19e74:	000240db 	.word	0x000240db
   19e78:	000209d8 	.word	0x000209d8
   19e7c:	00020a31 	.word	0x00020a31
   19e80:	00020a46 	.word	0x00020a46
   19e84:	00020a05 	.word	0x00020a05
   19e88:	00020a1c 	.word	0x00020a1c

00019e8c <z_set_prio>:
{
   19e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19e90:	4604      	mov	r4, r0
   19e92:	460e      	mov	r6, r1
   19e94:	f04f 0320 	mov.w	r3, #32
   19e98:	f3ef 8911 	mrs	r9, BASEPRI
   19e9c:	f383 8812 	msr	BASEPRI_MAX, r3
   19ea0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ea4:	4837      	ldr	r0, [pc, #220]	; (19f84 <z_set_prio+0xf8>)
   19ea6:	f7fe f985 	bl	181b4 <z_spin_lock_valid>
   19eaa:	4607      	mov	r7, r0
   19eac:	b960      	cbnz	r0, 19ec8 <z_set_prio+0x3c>
   19eae:	2394      	movs	r3, #148	; 0x94
   19eb0:	4a35      	ldr	r2, [pc, #212]	; (19f88 <z_set_prio+0xfc>)
   19eb2:	4936      	ldr	r1, [pc, #216]	; (19f8c <z_set_prio+0x100>)
   19eb4:	4836      	ldr	r0, [pc, #216]	; (19f90 <z_set_prio+0x104>)
   19eb6:	f001 ff3f 	bl	1bd38 <assert_print>
   19eba:	4932      	ldr	r1, [pc, #200]	; (19f84 <z_set_prio+0xf8>)
   19ebc:	4835      	ldr	r0, [pc, #212]	; (19f94 <z_set_prio+0x108>)
   19ebe:	f001 ff3b 	bl	1bd38 <assert_print>
   19ec2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ec4:	4830      	ldr	r0, [pc, #192]	; (19f88 <z_set_prio+0xfc>)
   19ec6:	e021      	b.n	19f0c <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   19ec8:	482e      	ldr	r0, [pc, #184]	; (19f84 <z_set_prio+0xf8>)
   19eca:	f7fe f98f 	bl	181ec <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   19ece:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   19ed0:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19ed2:	06da      	lsls	r2, r3, #27
   19ed4:	d11c      	bne.n	19f10 <z_set_prio+0x84>
	return node->next != NULL;
   19ed6:	69a5      	ldr	r5, [r4, #24]
   19ed8:	b9d5      	cbnz	r5, 19f10 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   19eda:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 19f98 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19ee2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19ee4:	4621      	mov	r1, r4
   19ee6:	4640      	mov	r0, r8
   19ee8:	f7ff fe00 	bl	19aec <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   19eec:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   19eee:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   19ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19ef4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19ef6:	4b29      	ldr	r3, [pc, #164]	; (19f9c <z_set_prio+0x110>)
   19ef8:	429c      	cmp	r4, r3
   19efa:	d11b      	bne.n	19f34 <z_set_prio+0xa8>
   19efc:	4928      	ldr	r1, [pc, #160]	; (19fa0 <z_set_prio+0x114>)
   19efe:	4824      	ldr	r0, [pc, #144]	; (19f90 <z_set_prio+0x104>)
   19f00:	23ba      	movs	r3, #186	; 0xba
   19f02:	4a28      	ldr	r2, [pc, #160]	; (19fa4 <z_set_prio+0x118>)
   19f04:	f001 ff18 	bl	1bd38 <assert_print>
   19f08:	21ba      	movs	r1, #186	; 0xba
   19f0a:	4826      	ldr	r0, [pc, #152]	; (19fa4 <z_set_prio+0x118>)
   19f0c:	f001 ff0d 	bl	1bd2a <assert_post_action>
   19f10:	2700      	movs	r7, #0
			thread->base.prio = prio;
   19f12:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f14:	481b      	ldr	r0, [pc, #108]	; (19f84 <z_set_prio+0xf8>)
   19f16:	f7fe f95b 	bl	181d0 <z_spin_unlock_valid>
   19f1a:	bb58      	cbnz	r0, 19f74 <z_set_prio+0xe8>
   19f1c:	23c2      	movs	r3, #194	; 0xc2
   19f1e:	4a1a      	ldr	r2, [pc, #104]	; (19f88 <z_set_prio+0xfc>)
   19f20:	4921      	ldr	r1, [pc, #132]	; (19fa8 <z_set_prio+0x11c>)
   19f22:	481b      	ldr	r0, [pc, #108]	; (19f90 <z_set_prio+0x104>)
   19f24:	f001 ff08 	bl	1bd38 <assert_print>
   19f28:	4916      	ldr	r1, [pc, #88]	; (19f84 <z_set_prio+0xf8>)
   19f2a:	4820      	ldr	r0, [pc, #128]	; (19fac <z_set_prio+0x120>)
   19f2c:	f001 ff04 	bl	1bd38 <assert_print>
   19f30:	21c2      	movs	r1, #194	; 0xc2
   19f32:	e7c7      	b.n	19ec4 <z_set_prio+0x38>
	return list->head == list;
   19f34:	4643      	mov	r3, r8
   19f36:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19f3a:	4542      	cmp	r2, r8
   19f3c:	bf18      	it	ne
   19f3e:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   19f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19f42:	b925      	cbnz	r5, 19f4e <z_set_prio+0xc2>
	node->prev = tail;
   19f44:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   19f48:	6014      	str	r4, [r2, #0]
	list->tail = node;
   19f4a:	625c      	str	r4, [r3, #36]	; 0x24
}
   19f4c:	e00a      	b.n	19f64 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   19f4e:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   19f52:	428e      	cmp	r6, r1
   19f54:	d00a      	beq.n	19f6c <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19f56:	42b1      	cmp	r1, r6
   19f58:	dd08      	ble.n	19f6c <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   19f5a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   19f5c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   19f60:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   19f62:	606c      	str	r4, [r5, #4]
			update_cache(1);
   19f64:	2001      	movs	r0, #1
   19f66:	f7ff fadf 	bl	19528 <update_cache>
   19f6a:	e7d3      	b.n	19f14 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   19f6c:	42aa      	cmp	r2, r5
   19f6e:	d0e9      	beq.n	19f44 <z_set_prio+0xb8>
   19f70:	682d      	ldr	r5, [r5, #0]
   19f72:	e7e6      	b.n	19f42 <z_set_prio+0xb6>
	__asm__ volatile(
   19f74:	f389 8811 	msr	BASEPRI, r9
   19f78:	f3bf 8f6f 	isb	sy
}
   19f7c:	4638      	mov	r0, r7
   19f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19f82:	bf00      	nop
   19f84:	20009b90 	.word	0x20009b90
   19f88:	000209d8 	.word	0x000209d8
   19f8c:	00020a31 	.word	0x00020a31
   19f90:	000205a4 	.word	0x000205a4
   19f94:	00020a46 	.word	0x00020a46
   19f98:	20009b68 	.word	0x20009b68
   19f9c:	200094b0 	.word	0x200094b0
   19fa0:	00024124 	.word	0x00024124
   19fa4:	000240db 	.word	0x000240db
   19fa8:	00020a05 	.word	0x00020a05
   19fac:	00020a1c 	.word	0x00020a1c

00019fb0 <z_impl_k_thread_suspend>:
{
   19fb0:	b570      	push	{r4, r5, r6, lr}
   19fb2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   19fb4:	3018      	adds	r0, #24
   19fb6:	f000 fda7 	bl	1ab08 <z_abort_timeout>
	__asm__ volatile(
   19fba:	f04f 0320 	mov.w	r3, #32
   19fbe:	f3ef 8611 	mrs	r6, BASEPRI
   19fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   19fc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fca:	4824      	ldr	r0, [pc, #144]	; (1a05c <z_impl_k_thread_suspend+0xac>)
   19fcc:	f7fe f8f2 	bl	181b4 <z_spin_lock_valid>
   19fd0:	b968      	cbnz	r0, 19fee <z_impl_k_thread_suspend+0x3e>
   19fd2:	2394      	movs	r3, #148	; 0x94
   19fd4:	4a22      	ldr	r2, [pc, #136]	; (1a060 <z_impl_k_thread_suspend+0xb0>)
   19fd6:	4923      	ldr	r1, [pc, #140]	; (1a064 <z_impl_k_thread_suspend+0xb4>)
   19fd8:	4823      	ldr	r0, [pc, #140]	; (1a068 <z_impl_k_thread_suspend+0xb8>)
   19fda:	f001 fead 	bl	1bd38 <assert_print>
   19fde:	491f      	ldr	r1, [pc, #124]	; (1a05c <z_impl_k_thread_suspend+0xac>)
   19fe0:	4822      	ldr	r0, [pc, #136]	; (1a06c <z_impl_k_thread_suspend+0xbc>)
   19fe2:	f001 fea9 	bl	1bd38 <assert_print>
   19fe6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19fe8:	481d      	ldr	r0, [pc, #116]	; (1a060 <z_impl_k_thread_suspend+0xb0>)
   19fea:	f001 fe9e 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   19fee:	481b      	ldr	r0, [pc, #108]	; (1a05c <z_impl_k_thread_suspend+0xac>)
   19ff0:	f7fe f8fc 	bl	181ec <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   19ff4:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   19ff8:	7b63      	ldrb	r3, [r4, #13]
   19ffa:	2a00      	cmp	r2, #0
   19ffc:	da06      	bge.n	1a00c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1a002:	4621      	mov	r1, r4
   1a004:	481a      	ldr	r0, [pc, #104]	; (1a070 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a006:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a008:	f7ff fd70 	bl	19aec <z_priq_dumb_remove>
		update_cache(thread == _current);
   1a00c:	4d19      	ldr	r5, [pc, #100]	; (1a074 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a00e:	7b63      	ldrb	r3, [r4, #13]
   1a010:	68a8      	ldr	r0, [r5, #8]
   1a012:	f043 0310 	orr.w	r3, r3, #16
   1a016:	7363      	strb	r3, [r4, #13]
   1a018:	1b03      	subs	r3, r0, r4
   1a01a:	4258      	negs	r0, r3
   1a01c:	4158      	adcs	r0, r3
   1a01e:	f7ff fa83 	bl	19528 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a022:	480e      	ldr	r0, [pc, #56]	; (1a05c <z_impl_k_thread_suspend+0xac>)
   1a024:	f7fe f8d4 	bl	181d0 <z_spin_unlock_valid>
   1a028:	b958      	cbnz	r0, 1a042 <z_impl_k_thread_suspend+0x92>
   1a02a:	23c2      	movs	r3, #194	; 0xc2
   1a02c:	4a0c      	ldr	r2, [pc, #48]	; (1a060 <z_impl_k_thread_suspend+0xb0>)
   1a02e:	4912      	ldr	r1, [pc, #72]	; (1a078 <z_impl_k_thread_suspend+0xc8>)
   1a030:	480d      	ldr	r0, [pc, #52]	; (1a068 <z_impl_k_thread_suspend+0xb8>)
   1a032:	f001 fe81 	bl	1bd38 <assert_print>
   1a036:	4909      	ldr	r1, [pc, #36]	; (1a05c <z_impl_k_thread_suspend+0xac>)
   1a038:	4810      	ldr	r0, [pc, #64]	; (1a07c <z_impl_k_thread_suspend+0xcc>)
   1a03a:	f001 fe7d 	bl	1bd38 <assert_print>
   1a03e:	21c2      	movs	r1, #194	; 0xc2
   1a040:	e7d2      	b.n	19fe8 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   1a042:	f386 8811 	msr	BASEPRI, r6
   1a046:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a04a:	68ab      	ldr	r3, [r5, #8]
   1a04c:	42a3      	cmp	r3, r4
   1a04e:	d103      	bne.n	1a058 <z_impl_k_thread_suspend+0xa8>
}
   1a050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a054:	f005 b8d6 	b.w	1f204 <z_reschedule_unlocked>
}
   1a058:	bd70      	pop	{r4, r5, r6, pc}
   1a05a:	bf00      	nop
   1a05c:	20009b90 	.word	0x20009b90
   1a060:	000209d8 	.word	0x000209d8
   1a064:	00020a31 	.word	0x00020a31
   1a068:	000205a4 	.word	0x000205a4
   1a06c:	00020a46 	.word	0x00020a46
   1a070:	20009b68 	.word	0x20009b68
   1a074:	20009b48 	.word	0x20009b48
   1a078:	00020a05 	.word	0x00020a05
   1a07c:	00020a1c 	.word	0x00020a1c

0001a080 <unpend_thread_no_timeout>:
{
   1a080:	b510      	push	{r4, lr}
   1a082:	4604      	mov	r4, r0
   1a084:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a086:	b958      	cbnz	r0, 1a0a0 <unpend_thread_no_timeout+0x20>
   1a088:	490a      	ldr	r1, [pc, #40]	; (1a0b4 <unpend_thread_no_timeout+0x34>)
   1a08a:	480b      	ldr	r0, [pc, #44]	; (1a0b8 <unpend_thread_no_timeout+0x38>)
   1a08c:	f240 23d6 	movw	r3, #726	; 0x2d6
   1a090:	4a0a      	ldr	r2, [pc, #40]	; (1a0bc <unpend_thread_no_timeout+0x3c>)
   1a092:	f001 fe51 	bl	1bd38 <assert_print>
   1a096:	f240 21d6 	movw	r1, #726	; 0x2d6
   1a09a:	4808      	ldr	r0, [pc, #32]	; (1a0bc <unpend_thread_no_timeout+0x3c>)
   1a09c:	f001 fe45 	bl	1bd2a <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1a0a0:	4621      	mov	r1, r4
   1a0a2:	f7ff fd23 	bl	19aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a0a6:	7b63      	ldrb	r3, [r4, #13]
   1a0a8:	f023 0302 	bic.w	r3, r3, #2
   1a0ac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1a0ae:	2300      	movs	r3, #0
   1a0b0:	60a3      	str	r3, [r4, #8]
}
   1a0b2:	bd10      	pop	{r4, pc}
   1a0b4:	00024209 	.word	0x00024209
   1a0b8:	000205a4 	.word	0x000205a4
   1a0bc:	000240db 	.word	0x000240db

0001a0c0 <z_unpend_thread>:
{
   1a0c0:	b538      	push	{r3, r4, r5, lr}
   1a0c2:	4604      	mov	r4, r0
	__asm__ volatile(
   1a0c4:	f04f 0320 	mov.w	r3, #32
   1a0c8:	f3ef 8511 	mrs	r5, BASEPRI
   1a0cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0d4:	4818      	ldr	r0, [pc, #96]	; (1a138 <z_unpend_thread+0x78>)
   1a0d6:	f7fe f86d 	bl	181b4 <z_spin_lock_valid>
   1a0da:	b968      	cbnz	r0, 1a0f8 <z_unpend_thread+0x38>
   1a0dc:	2394      	movs	r3, #148	; 0x94
   1a0de:	4a17      	ldr	r2, [pc, #92]	; (1a13c <z_unpend_thread+0x7c>)
   1a0e0:	4917      	ldr	r1, [pc, #92]	; (1a140 <z_unpend_thread+0x80>)
   1a0e2:	4818      	ldr	r0, [pc, #96]	; (1a144 <z_unpend_thread+0x84>)
   1a0e4:	f001 fe28 	bl	1bd38 <assert_print>
   1a0e8:	4913      	ldr	r1, [pc, #76]	; (1a138 <z_unpend_thread+0x78>)
   1a0ea:	4817      	ldr	r0, [pc, #92]	; (1a148 <z_unpend_thread+0x88>)
   1a0ec:	f001 fe24 	bl	1bd38 <assert_print>
   1a0f0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0f2:	4812      	ldr	r0, [pc, #72]	; (1a13c <z_unpend_thread+0x7c>)
   1a0f4:	f001 fe19 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1a0f8:	480f      	ldr	r0, [pc, #60]	; (1a138 <z_unpend_thread+0x78>)
   1a0fa:	f7fe f877 	bl	181ec <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1a0fe:	4620      	mov	r0, r4
   1a100:	f7ff ffbe 	bl	1a080 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a104:	480c      	ldr	r0, [pc, #48]	; (1a138 <z_unpend_thread+0x78>)
   1a106:	f7fe f863 	bl	181d0 <z_spin_unlock_valid>
   1a10a:	b958      	cbnz	r0, 1a124 <z_unpend_thread+0x64>
   1a10c:	23c2      	movs	r3, #194	; 0xc2
   1a10e:	4a0b      	ldr	r2, [pc, #44]	; (1a13c <z_unpend_thread+0x7c>)
   1a110:	490e      	ldr	r1, [pc, #56]	; (1a14c <z_unpend_thread+0x8c>)
   1a112:	480c      	ldr	r0, [pc, #48]	; (1a144 <z_unpend_thread+0x84>)
   1a114:	f001 fe10 	bl	1bd38 <assert_print>
   1a118:	4907      	ldr	r1, [pc, #28]	; (1a138 <z_unpend_thread+0x78>)
   1a11a:	480d      	ldr	r0, [pc, #52]	; (1a150 <z_unpend_thread+0x90>)
   1a11c:	f001 fe0c 	bl	1bd38 <assert_print>
   1a120:	21c2      	movs	r1, #194	; 0xc2
   1a122:	e7e6      	b.n	1a0f2 <z_unpend_thread+0x32>
	__asm__ volatile(
   1a124:	f385 8811 	msr	BASEPRI, r5
   1a128:	f3bf 8f6f 	isb	sy
   1a12c:	f104 0018 	add.w	r0, r4, #24
}
   1a130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a134:	f000 bce8 	b.w	1ab08 <z_abort_timeout>
   1a138:	20009b90 	.word	0x20009b90
   1a13c:	000209d8 	.word	0x000209d8
   1a140:	00020a31 	.word	0x00020a31
   1a144:	000205a4 	.word	0x000205a4
   1a148:	00020a46 	.word	0x00020a46
   1a14c:	00020a05 	.word	0x00020a05
   1a150:	00020a1c 	.word	0x00020a1c

0001a154 <z_thread_timeout>:
{
   1a154:	b570      	push	{r4, r5, r6, lr}
   1a156:	4604      	mov	r4, r0
	__asm__ volatile(
   1a158:	f04f 0320 	mov.w	r3, #32
   1a15c:	f3ef 8611 	mrs	r6, BASEPRI
   1a160:	f383 8812 	msr	BASEPRI_MAX, r3
   1a164:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a168:	481f      	ldr	r0, [pc, #124]	; (1a1e8 <z_thread_timeout+0x94>)
   1a16a:	f7fe f823 	bl	181b4 <z_spin_lock_valid>
   1a16e:	b968      	cbnz	r0, 1a18c <z_thread_timeout+0x38>
   1a170:	2394      	movs	r3, #148	; 0x94
   1a172:	4a1e      	ldr	r2, [pc, #120]	; (1a1ec <z_thread_timeout+0x98>)
   1a174:	491e      	ldr	r1, [pc, #120]	; (1a1f0 <z_thread_timeout+0x9c>)
   1a176:	481f      	ldr	r0, [pc, #124]	; (1a1f4 <z_thread_timeout+0xa0>)
   1a178:	f001 fdde 	bl	1bd38 <assert_print>
   1a17c:	491a      	ldr	r1, [pc, #104]	; (1a1e8 <z_thread_timeout+0x94>)
   1a17e:	481e      	ldr	r0, [pc, #120]	; (1a1f8 <z_thread_timeout+0xa4>)
   1a180:	f001 fdda 	bl	1bd38 <assert_print>
   1a184:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a186:	4819      	ldr	r0, [pc, #100]	; (1a1ec <z_thread_timeout+0x98>)
   1a188:	f001 fdcf 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1a18c:	4816      	ldr	r0, [pc, #88]	; (1a1e8 <z_thread_timeout+0x94>)
   1a18e:	f7fe f82d 	bl	181ec <z_spin_lock_set_owner>
		if (!killed) {
   1a192:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1a196:	f013 0f28 	tst.w	r3, #40	; 0x28
   1a19a:	d110      	bne.n	1a1be <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   1a19c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1a1a0:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1a1a4:	b113      	cbz	r3, 1a1ac <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   1a1a6:	4628      	mov	r0, r5
   1a1a8:	f7ff ff6a 	bl	1a080 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1a1ac:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   1a1b0:	4628      	mov	r0, r5
   1a1b2:	f023 0314 	bic.w	r3, r3, #20
   1a1b6:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1a1ba:	f7ff f9e9 	bl	19590 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1be:	480a      	ldr	r0, [pc, #40]	; (1a1e8 <z_thread_timeout+0x94>)
   1a1c0:	f7fe f806 	bl	181d0 <z_spin_unlock_valid>
   1a1c4:	b958      	cbnz	r0, 1a1de <z_thread_timeout+0x8a>
   1a1c6:	23c2      	movs	r3, #194	; 0xc2
   1a1c8:	4a08      	ldr	r2, [pc, #32]	; (1a1ec <z_thread_timeout+0x98>)
   1a1ca:	490c      	ldr	r1, [pc, #48]	; (1a1fc <z_thread_timeout+0xa8>)
   1a1cc:	4809      	ldr	r0, [pc, #36]	; (1a1f4 <z_thread_timeout+0xa0>)
   1a1ce:	f001 fdb3 	bl	1bd38 <assert_print>
   1a1d2:	4905      	ldr	r1, [pc, #20]	; (1a1e8 <z_thread_timeout+0x94>)
   1a1d4:	480a      	ldr	r0, [pc, #40]	; (1a200 <z_thread_timeout+0xac>)
   1a1d6:	f001 fdaf 	bl	1bd38 <assert_print>
   1a1da:	21c2      	movs	r1, #194	; 0xc2
   1a1dc:	e7d3      	b.n	1a186 <z_thread_timeout+0x32>
	__asm__ volatile(
   1a1de:	f386 8811 	msr	BASEPRI, r6
   1a1e2:	f3bf 8f6f 	isb	sy
}
   1a1e6:	bd70      	pop	{r4, r5, r6, pc}
   1a1e8:	20009b90 	.word	0x20009b90
   1a1ec:	000209d8 	.word	0x000209d8
   1a1f0:	00020a31 	.word	0x00020a31
   1a1f4:	000205a4 	.word	0x000205a4
   1a1f8:	00020a46 	.word	0x00020a46
   1a1fc:	00020a05 	.word	0x00020a05
   1a200:	00020a1c 	.word	0x00020a1c

0001a204 <z_unpend1_no_timeout>:
{
   1a204:	b570      	push	{r4, r5, r6, lr}
   1a206:	4605      	mov	r5, r0
	__asm__ volatile(
   1a208:	f04f 0320 	mov.w	r3, #32
   1a20c:	f3ef 8611 	mrs	r6, BASEPRI
   1a210:	f383 8812 	msr	BASEPRI_MAX, r3
   1a214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a218:	4819      	ldr	r0, [pc, #100]	; (1a280 <z_unpend1_no_timeout+0x7c>)
   1a21a:	f7fd ffcb 	bl	181b4 <z_spin_lock_valid>
   1a21e:	b968      	cbnz	r0, 1a23c <z_unpend1_no_timeout+0x38>
   1a220:	2394      	movs	r3, #148	; 0x94
   1a222:	4a18      	ldr	r2, [pc, #96]	; (1a284 <z_unpend1_no_timeout+0x80>)
   1a224:	4918      	ldr	r1, [pc, #96]	; (1a288 <z_unpend1_no_timeout+0x84>)
   1a226:	4819      	ldr	r0, [pc, #100]	; (1a28c <z_unpend1_no_timeout+0x88>)
   1a228:	f001 fd86 	bl	1bd38 <assert_print>
   1a22c:	4914      	ldr	r1, [pc, #80]	; (1a280 <z_unpend1_no_timeout+0x7c>)
   1a22e:	4818      	ldr	r0, [pc, #96]	; (1a290 <z_unpend1_no_timeout+0x8c>)
   1a230:	f001 fd82 	bl	1bd38 <assert_print>
   1a234:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a236:	4813      	ldr	r0, [pc, #76]	; (1a284 <z_unpend1_no_timeout+0x80>)
   1a238:	f001 fd77 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1a23c:	4810      	ldr	r0, [pc, #64]	; (1a280 <z_unpend1_no_timeout+0x7c>)
   1a23e:	f7fd ffd5 	bl	181ec <z_spin_lock_set_owner>
	return list->head == list;
   1a242:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a244:	42a5      	cmp	r5, r4
   1a246:	d013      	beq.n	1a270 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   1a248:	b114      	cbz	r4, 1a250 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   1a24a:	4620      	mov	r0, r4
   1a24c:	f7ff ff18 	bl	1a080 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a250:	480b      	ldr	r0, [pc, #44]	; (1a280 <z_unpend1_no_timeout+0x7c>)
   1a252:	f7fd ffbd 	bl	181d0 <z_spin_unlock_valid>
   1a256:	b968      	cbnz	r0, 1a274 <z_unpend1_no_timeout+0x70>
   1a258:	23c2      	movs	r3, #194	; 0xc2
   1a25a:	4a0a      	ldr	r2, [pc, #40]	; (1a284 <z_unpend1_no_timeout+0x80>)
   1a25c:	490d      	ldr	r1, [pc, #52]	; (1a294 <z_unpend1_no_timeout+0x90>)
   1a25e:	480b      	ldr	r0, [pc, #44]	; (1a28c <z_unpend1_no_timeout+0x88>)
   1a260:	f001 fd6a 	bl	1bd38 <assert_print>
   1a264:	4906      	ldr	r1, [pc, #24]	; (1a280 <z_unpend1_no_timeout+0x7c>)
   1a266:	480c      	ldr	r0, [pc, #48]	; (1a298 <z_unpend1_no_timeout+0x94>)
   1a268:	f001 fd66 	bl	1bd38 <assert_print>
   1a26c:	21c2      	movs	r1, #194	; 0xc2
   1a26e:	e7e2      	b.n	1a236 <z_unpend1_no_timeout+0x32>
   1a270:	2400      	movs	r4, #0
   1a272:	e7ed      	b.n	1a250 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   1a274:	f386 8811 	msr	BASEPRI, r6
   1a278:	f3bf 8f6f 	isb	sy
}
   1a27c:	4620      	mov	r0, r4
   1a27e:	bd70      	pop	{r4, r5, r6, pc}
   1a280:	20009b90 	.word	0x20009b90
   1a284:	000209d8 	.word	0x000209d8
   1a288:	00020a31 	.word	0x00020a31
   1a28c:	000205a4 	.word	0x000205a4
   1a290:	00020a46 	.word	0x00020a46
   1a294:	00020a05 	.word	0x00020a05
   1a298:	00020a1c 	.word	0x00020a1c

0001a29c <z_unpend_first_thread>:
{
   1a29c:	b570      	push	{r4, r5, r6, lr}
   1a29e:	4605      	mov	r5, r0
	__asm__ volatile(
   1a2a0:	f04f 0320 	mov.w	r3, #32
   1a2a4:	f3ef 8611 	mrs	r6, BASEPRI
   1a2a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a2b0:	481b      	ldr	r0, [pc, #108]	; (1a320 <z_unpend_first_thread+0x84>)
   1a2b2:	f7fd ff7f 	bl	181b4 <z_spin_lock_valid>
   1a2b6:	b968      	cbnz	r0, 1a2d4 <z_unpend_first_thread+0x38>
   1a2b8:	2394      	movs	r3, #148	; 0x94
   1a2ba:	4a1a      	ldr	r2, [pc, #104]	; (1a324 <z_unpend_first_thread+0x88>)
   1a2bc:	491a      	ldr	r1, [pc, #104]	; (1a328 <z_unpend_first_thread+0x8c>)
   1a2be:	481b      	ldr	r0, [pc, #108]	; (1a32c <z_unpend_first_thread+0x90>)
   1a2c0:	f001 fd3a 	bl	1bd38 <assert_print>
   1a2c4:	4916      	ldr	r1, [pc, #88]	; (1a320 <z_unpend_first_thread+0x84>)
   1a2c6:	481a      	ldr	r0, [pc, #104]	; (1a330 <z_unpend_first_thread+0x94>)
   1a2c8:	f001 fd36 	bl	1bd38 <assert_print>
   1a2cc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a2ce:	4815      	ldr	r0, [pc, #84]	; (1a324 <z_unpend_first_thread+0x88>)
   1a2d0:	f001 fd2b 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1a2d4:	4812      	ldr	r0, [pc, #72]	; (1a320 <z_unpend_first_thread+0x84>)
   1a2d6:	f7fd ff89 	bl	181ec <z_spin_lock_set_owner>
	return list->head == list;
   1a2da:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a2dc:	42a5      	cmp	r5, r4
   1a2de:	d017      	beq.n	1a310 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   1a2e0:	b134      	cbz	r4, 1a2f0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   1a2e2:	4620      	mov	r0, r4
   1a2e4:	f7ff fecc 	bl	1a080 <unpend_thread_no_timeout>
   1a2e8:	f104 0018 	add.w	r0, r4, #24
   1a2ec:	f000 fc0c 	bl	1ab08 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a2f0:	480b      	ldr	r0, [pc, #44]	; (1a320 <z_unpend_first_thread+0x84>)
   1a2f2:	f7fd ff6d 	bl	181d0 <z_spin_unlock_valid>
   1a2f6:	b968      	cbnz	r0, 1a314 <z_unpend_first_thread+0x78>
   1a2f8:	23c2      	movs	r3, #194	; 0xc2
   1a2fa:	4a0a      	ldr	r2, [pc, #40]	; (1a324 <z_unpend_first_thread+0x88>)
   1a2fc:	490d      	ldr	r1, [pc, #52]	; (1a334 <z_unpend_first_thread+0x98>)
   1a2fe:	480b      	ldr	r0, [pc, #44]	; (1a32c <z_unpend_first_thread+0x90>)
   1a300:	f001 fd1a 	bl	1bd38 <assert_print>
   1a304:	4906      	ldr	r1, [pc, #24]	; (1a320 <z_unpend_first_thread+0x84>)
   1a306:	480c      	ldr	r0, [pc, #48]	; (1a338 <z_unpend_first_thread+0x9c>)
   1a308:	f001 fd16 	bl	1bd38 <assert_print>
   1a30c:	21c2      	movs	r1, #194	; 0xc2
   1a30e:	e7de      	b.n	1a2ce <z_unpend_first_thread+0x32>
   1a310:	2400      	movs	r4, #0
   1a312:	e7ed      	b.n	1a2f0 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   1a314:	f386 8811 	msr	BASEPRI, r6
   1a318:	f3bf 8f6f 	isb	sy
}
   1a31c:	4620      	mov	r0, r4
   1a31e:	bd70      	pop	{r4, r5, r6, pc}
   1a320:	20009b90 	.word	0x20009b90
   1a324:	000209d8 	.word	0x000209d8
   1a328:	00020a31 	.word	0x00020a31
   1a32c:	000205a4 	.word	0x000205a4
   1a330:	00020a46 	.word	0x00020a46
   1a334:	00020a05 	.word	0x00020a05
   1a338:	00020a1c 	.word	0x00020a1c

0001a33c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a33c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1a33e:	4b04      	ldr	r3, [pc, #16]	; (1a350 <z_sched_init+0x14>)
   1a340:	4608      	mov	r0, r1
   1a342:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1a346:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1a34a:	f7ff b96b 	b.w	19624 <k_sched_time_slice_set>
   1a34e:	bf00      	nop
   1a350:	20009b48 	.word	0x20009b48

0001a354 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a356:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a35a:	b16b      	cbz	r3, 1a378 <z_impl_k_yield+0x24>
   1a35c:	493c      	ldr	r1, [pc, #240]	; (1a450 <z_impl_k_yield+0xfc>)
   1a35e:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   1a362:	4a3c      	ldr	r2, [pc, #240]	; (1a454 <z_impl_k_yield+0x100>)
   1a364:	483c      	ldr	r0, [pc, #240]	; (1a458 <z_impl_k_yield+0x104>)
   1a366:	f001 fce7 	bl	1bd38 <assert_print>
   1a36a:	483c      	ldr	r0, [pc, #240]	; (1a45c <z_impl_k_yield+0x108>)
   1a36c:	f001 fce4 	bl	1bd38 <assert_print>
   1a370:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a374:	4837      	ldr	r0, [pc, #220]	; (1a454 <z_impl_k_yield+0x100>)
   1a376:	e017      	b.n	1a3a8 <z_impl_k_yield+0x54>
	__asm__ volatile(
   1a378:	f04f 0320 	mov.w	r3, #32
   1a37c:	f3ef 8611 	mrs	r6, BASEPRI
   1a380:	f383 8812 	msr	BASEPRI_MAX, r3
   1a384:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a388:	4835      	ldr	r0, [pc, #212]	; (1a460 <z_impl_k_yield+0x10c>)
   1a38a:	f7fd ff13 	bl	181b4 <z_spin_lock_valid>
   1a38e:	b968      	cbnz	r0, 1a3ac <z_impl_k_yield+0x58>
   1a390:	2394      	movs	r3, #148	; 0x94
   1a392:	4a34      	ldr	r2, [pc, #208]	; (1a464 <z_impl_k_yield+0x110>)
   1a394:	4934      	ldr	r1, [pc, #208]	; (1a468 <z_impl_k_yield+0x114>)
   1a396:	4830      	ldr	r0, [pc, #192]	; (1a458 <z_impl_k_yield+0x104>)
   1a398:	f001 fcce 	bl	1bd38 <assert_print>
   1a39c:	4930      	ldr	r1, [pc, #192]	; (1a460 <z_impl_k_yield+0x10c>)
   1a39e:	4833      	ldr	r0, [pc, #204]	; (1a46c <z_impl_k_yield+0x118>)
   1a3a0:	f001 fcca 	bl	1bd38 <assert_print>
   1a3a4:	2194      	movs	r1, #148	; 0x94
   1a3a6:	482f      	ldr	r0, [pc, #188]	; (1a464 <z_impl_k_yield+0x110>)
   1a3a8:	f001 fcbf 	bl	1bd2a <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1a3ac:	4c30      	ldr	r4, [pc, #192]	; (1a470 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   1a3ae:	482c      	ldr	r0, [pc, #176]	; (1a460 <z_impl_k_yield+0x10c>)
   1a3b0:	f7fd ff1c 	bl	181ec <z_spin_lock_set_owner>
   1a3b4:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   1a3b6:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a3ba:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a3bc:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a3c2:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a3c4:	f7ff fb92 	bl	19aec <z_priq_dumb_remove>
	}
	queue_thread(_current);
   1a3c8:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1a3ca:	7b5a      	ldrb	r2, [r3, #13]
   1a3cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1a3d0:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a3d2:	4a28      	ldr	r2, [pc, #160]	; (1a474 <z_impl_k_yield+0x120>)
   1a3d4:	4293      	cmp	r3, r2
   1a3d6:	d107      	bne.n	1a3e8 <z_impl_k_yield+0x94>
   1a3d8:	4927      	ldr	r1, [pc, #156]	; (1a478 <z_impl_k_yield+0x124>)
   1a3da:	23ba      	movs	r3, #186	; 0xba
   1a3dc:	4a1d      	ldr	r2, [pc, #116]	; (1a454 <z_impl_k_yield+0x100>)
   1a3de:	481e      	ldr	r0, [pc, #120]	; (1a458 <z_impl_k_yield+0x104>)
   1a3e0:	f001 fcaa 	bl	1bd38 <assert_print>
   1a3e4:	21ba      	movs	r1, #186	; 0xba
   1a3e6:	e7c5      	b.n	1a374 <z_impl_k_yield+0x20>
	return list->head == list;
   1a3e8:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   1a3ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a3ec:	42aa      	cmp	r2, r5
   1a3ee:	bf08      	it	eq
   1a3f0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a3f2:	b922      	cbnz	r2, 1a3fe <z_impl_k_yield+0xaa>
	node->prev = tail;
   1a3f4:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   1a3f8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1a3fa:	6263      	str	r3, [r4, #36]	; 0x24
}
   1a3fc:	e00c      	b.n	1a418 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   1a3fe:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1a402:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1a406:	42b8      	cmp	r0, r7
   1a408:	d019      	beq.n	1a43e <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a40a:	4287      	cmp	r7, r0
   1a40c:	dd17      	ble.n	1a43e <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   1a40e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a410:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1a414:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1a416:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1a418:	2001      	movs	r0, #1
   1a41a:	f7ff f885 	bl	19528 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a41e:	4810      	ldr	r0, [pc, #64]	; (1a460 <z_impl_k_yield+0x10c>)
   1a420:	f7fd fed6 	bl	181d0 <z_spin_unlock_valid>
   1a424:	b978      	cbnz	r0, 1a446 <z_impl_k_yield+0xf2>
   1a426:	23e1      	movs	r3, #225	; 0xe1
   1a428:	4a0e      	ldr	r2, [pc, #56]	; (1a464 <z_impl_k_yield+0x110>)
   1a42a:	4914      	ldr	r1, [pc, #80]	; (1a47c <z_impl_k_yield+0x128>)
   1a42c:	480a      	ldr	r0, [pc, #40]	; (1a458 <z_impl_k_yield+0x104>)
   1a42e:	f001 fc83 	bl	1bd38 <assert_print>
   1a432:	490b      	ldr	r1, [pc, #44]	; (1a460 <z_impl_k_yield+0x10c>)
   1a434:	4812      	ldr	r0, [pc, #72]	; (1a480 <z_impl_k_yield+0x12c>)
   1a436:	f001 fc7f 	bl	1bd38 <assert_print>
   1a43a:	21e1      	movs	r1, #225	; 0xe1
   1a43c:	e7b3      	b.n	1a3a6 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   1a43e:	428a      	cmp	r2, r1
   1a440:	d0d8      	beq.n	1a3f4 <z_impl_k_yield+0xa0>
   1a442:	6812      	ldr	r2, [r2, #0]
   1a444:	e7d5      	b.n	1a3f2 <z_impl_k_yield+0x9e>
   1a446:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1a448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a44c:	f7f2 bcaa 	b.w	cda4 <arch_swap>
   1a450:	00023e6e 	.word	0x00023e6e
   1a454:	000240db 	.word	0x000240db
   1a458:	000205a4 	.word	0x000205a4
   1a45c:	00022c58 	.word	0x00022c58
   1a460:	20009b90 	.word	0x20009b90
   1a464:	000209d8 	.word	0x000209d8
   1a468:	00020a31 	.word	0x00020a31
   1a46c:	00020a46 	.word	0x00020a46
   1a470:	20009b48 	.word	0x20009b48
   1a474:	200094b0 	.word	0x200094b0
   1a478:	00024124 	.word	0x00024124
   1a47c:	00020a05 	.word	0x00020a05
   1a480:	00020a1c 	.word	0x00020a1c

0001a484 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a488:	4605      	mov	r5, r0
   1a48a:	460e      	mov	r6, r1
   1a48c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1a490:	b16b      	cbz	r3, 1a4ae <z_tick_sleep+0x2a>
   1a492:	493f      	ldr	r1, [pc, #252]	; (1a590 <z_tick_sleep+0x10c>)
   1a494:	f240 538c 	movw	r3, #1420	; 0x58c
   1a498:	4a3e      	ldr	r2, [pc, #248]	; (1a594 <z_tick_sleep+0x110>)
   1a49a:	483f      	ldr	r0, [pc, #252]	; (1a598 <z_tick_sleep+0x114>)
   1a49c:	f001 fc4c 	bl	1bd38 <assert_print>
   1a4a0:	483e      	ldr	r0, [pc, #248]	; (1a59c <z_tick_sleep+0x118>)
   1a4a2:	f001 fc49 	bl	1bd38 <assert_print>
   1a4a6:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1a4aa:	483a      	ldr	r0, [pc, #232]	; (1a594 <z_tick_sleep+0x110>)
   1a4ac:	e025      	b.n	1a4fa <z_tick_sleep+0x76>
	if (ticks == 0) {
   1a4ae:	ea50 0301 	orrs.w	r3, r0, r1
   1a4b2:	d103      	bne.n	1a4bc <z_tick_sleep+0x38>
	z_impl_k_yield();
   1a4b4:	f7ff ff4e 	bl	1a354 <z_impl_k_yield>
		return 0;
   1a4b8:	2000      	movs	r0, #0
   1a4ba:	e066      	b.n	1a58a <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   1a4bc:	1c82      	adds	r2, r0, #2
   1a4be:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1a4c2:	db1c      	blt.n	1a4fe <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1a4c4:	f004 feb8 	bl	1f238 <sys_clock_tick_get_32>
   1a4c8:	1944      	adds	r4, r0, r5
   1a4ca:	f04f 0320 	mov.w	r3, #32
   1a4ce:	f3ef 8811 	mrs	r8, BASEPRI
   1a4d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4da:	4831      	ldr	r0, [pc, #196]	; (1a5a0 <z_tick_sleep+0x11c>)
   1a4dc:	f7fd fe6a 	bl	181b4 <z_spin_lock_valid>
   1a4e0:	b988      	cbnz	r0, 1a506 <z_tick_sleep+0x82>
   1a4e2:	2394      	movs	r3, #148	; 0x94
   1a4e4:	4a2f      	ldr	r2, [pc, #188]	; (1a5a4 <z_tick_sleep+0x120>)
   1a4e6:	4930      	ldr	r1, [pc, #192]	; (1a5a8 <z_tick_sleep+0x124>)
   1a4e8:	482b      	ldr	r0, [pc, #172]	; (1a598 <z_tick_sleep+0x114>)
   1a4ea:	f001 fc25 	bl	1bd38 <assert_print>
   1a4ee:	492c      	ldr	r1, [pc, #176]	; (1a5a0 <z_tick_sleep+0x11c>)
   1a4f0:	482e      	ldr	r0, [pc, #184]	; (1a5ac <z_tick_sleep+0x128>)
   1a4f2:	f001 fc21 	bl	1bd38 <assert_print>
   1a4f6:	2194      	movs	r1, #148	; 0x94
   1a4f8:	482a      	ldr	r0, [pc, #168]	; (1a5a4 <z_tick_sleep+0x120>)
   1a4fa:	f001 fc16 	bl	1bd2a <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1a4fe:	f06f 0401 	mvn.w	r4, #1
   1a502:	1a24      	subs	r4, r4, r0
   1a504:	e7e1      	b.n	1a4ca <z_tick_sleep+0x46>
	pending_current = _current;
   1a506:	4f2a      	ldr	r7, [pc, #168]	; (1a5b0 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   1a508:	4825      	ldr	r0, [pc, #148]	; (1a5a0 <z_tick_sleep+0x11c>)
   1a50a:	f7fd fe6f 	bl	181ec <z_spin_lock_set_owner>
   1a50e:	68b8      	ldr	r0, [r7, #8]
   1a510:	4b28      	ldr	r3, [pc, #160]	; (1a5b4 <z_tick_sleep+0x130>)
   1a512:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1a514:	f7ff fbd2 	bl	19cbc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1a518:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a51a:	462a      	mov	r2, r5
   1a51c:	4633      	mov	r3, r6
   1a51e:	3018      	adds	r0, #24
   1a520:	4925      	ldr	r1, [pc, #148]	; (1a5b8 <z_tick_sleep+0x134>)
   1a522:	f000 fa2b 	bl	1a97c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a526:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a528:	481d      	ldr	r0, [pc, #116]	; (1a5a0 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a52a:	7b53      	ldrb	r3, [r2, #13]
   1a52c:	f043 0310 	orr.w	r3, r3, #16
   1a530:	7353      	strb	r3, [r2, #13]
   1a532:	f7fd fe4d 	bl	181d0 <z_spin_unlock_valid>
   1a536:	b958      	cbnz	r0, 1a550 <z_tick_sleep+0xcc>
   1a538:	23e1      	movs	r3, #225	; 0xe1
   1a53a:	4a1a      	ldr	r2, [pc, #104]	; (1a5a4 <z_tick_sleep+0x120>)
   1a53c:	491f      	ldr	r1, [pc, #124]	; (1a5bc <z_tick_sleep+0x138>)
   1a53e:	4816      	ldr	r0, [pc, #88]	; (1a598 <z_tick_sleep+0x114>)
   1a540:	f001 fbfa 	bl	1bd38 <assert_print>
   1a544:	4916      	ldr	r1, [pc, #88]	; (1a5a0 <z_tick_sleep+0x11c>)
   1a546:	481e      	ldr	r0, [pc, #120]	; (1a5c0 <z_tick_sleep+0x13c>)
   1a548:	f001 fbf6 	bl	1bd38 <assert_print>
   1a54c:	21e1      	movs	r1, #225	; 0xe1
   1a54e:	e7d3      	b.n	1a4f8 <z_tick_sleep+0x74>
   1a550:	4640      	mov	r0, r8
   1a552:	f7f2 fc27 	bl	cda4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1a556:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1a558:	7b5b      	ldrb	r3, [r3, #13]
   1a55a:	06db      	lsls	r3, r3, #27
   1a55c:	d50c      	bpl.n	1a578 <z_tick_sleep+0xf4>
   1a55e:	4919      	ldr	r1, [pc, #100]	; (1a5c4 <z_tick_sleep+0x140>)
   1a560:	f240 53ad 	movw	r3, #1453	; 0x5ad
   1a564:	4a0b      	ldr	r2, [pc, #44]	; (1a594 <z_tick_sleep+0x110>)
   1a566:	480c      	ldr	r0, [pc, #48]	; (1a598 <z_tick_sleep+0x114>)
   1a568:	f001 fbe6 	bl	1bd38 <assert_print>
   1a56c:	480b      	ldr	r0, [pc, #44]	; (1a59c <z_tick_sleep+0x118>)
   1a56e:	f001 fbe3 	bl	1bd38 <assert_print>
   1a572:	f240 51ad 	movw	r1, #1453	; 0x5ad
   1a576:	e798      	b.n	1a4aa <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1a578:	f004 fe5e 	bl	1f238 <sys_clock_tick_get_32>
   1a57c:	1a20      	subs	r0, r4, r0
   1a57e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1a582:	2801      	cmp	r0, #1
   1a584:	f173 0300 	sbcs.w	r3, r3, #0
   1a588:	db96      	blt.n	1a4b8 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   1a58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a58e:	bf00      	nop
   1a590:	00023e6e 	.word	0x00023e6e
   1a594:	000240db 	.word	0x000240db
   1a598:	000205a4 	.word	0x000205a4
   1a59c:	00022c58 	.word	0x00022c58
   1a5a0:	20009b90 	.word	0x20009b90
   1a5a4:	000209d8 	.word	0x000209d8
   1a5a8:	00020a31 	.word	0x00020a31
   1a5ac:	00020a46 	.word	0x00020a46
   1a5b0:	20009b48 	.word	0x20009b48
   1a5b4:	20009b84 	.word	0x20009b84
   1a5b8:	0001a155 	.word	0x0001a155
   1a5bc:	00020a05 	.word	0x00020a05
   1a5c0:	00020a1c 	.word	0x00020a1c
   1a5c4:	00024220 	.word	0x00024220

0001a5c8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1a5c8:	b508      	push	{r3, lr}
   1a5ca:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1a5ce:	b173      	cbz	r3, 1a5ee <z_impl_k_sleep+0x26>
   1a5d0:	4912      	ldr	r1, [pc, #72]	; (1a61c <z_impl_k_sleep+0x54>)
   1a5d2:	f240 53bc 	movw	r3, #1468	; 0x5bc
   1a5d6:	4a12      	ldr	r2, [pc, #72]	; (1a620 <z_impl_k_sleep+0x58>)
   1a5d8:	4812      	ldr	r0, [pc, #72]	; (1a624 <z_impl_k_sleep+0x5c>)
   1a5da:	f001 fbad 	bl	1bd38 <assert_print>
   1a5de:	4812      	ldr	r0, [pc, #72]	; (1a628 <z_impl_k_sleep+0x60>)
   1a5e0:	f001 fbaa 	bl	1bd38 <assert_print>
   1a5e4:	f240 51bc 	movw	r1, #1468	; 0x5bc
   1a5e8:	480d      	ldr	r0, [pc, #52]	; (1a620 <z_impl_k_sleep+0x58>)
   1a5ea:	f001 fb9e 	bl	1bd2a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a5ee:	f1b1 3fff 	cmp.w	r1, #4294967295
   1a5f2:	bf08      	it	eq
   1a5f4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1a5f8:	d106      	bne.n	1a608 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   1a5fa:	4b0c      	ldr	r3, [pc, #48]	; (1a62c <z_impl_k_sleep+0x64>)
   1a5fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a5fe:	f7ff fcd7 	bl	19fb0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1a602:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1a606:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1a608:	f7ff ff3c 	bl	1a484 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1a60c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a610:	fb80 0303 	smull	r0, r3, r0, r3
   1a614:	0bc0      	lsrs	r0, r0, #15
   1a616:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1a61a:	e7f4      	b.n	1a606 <z_impl_k_sleep+0x3e>
   1a61c:	00023e6e 	.word	0x00023e6e
   1a620:	000240db 	.word	0x000240db
   1a624:	000205a4 	.word	0x000205a4
   1a628:	00022c58 	.word	0x00022c58
   1a62c:	20009b48 	.word	0x20009b48

0001a630 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1a630:	4b01      	ldr	r3, [pc, #4]	; (1a638 <z_impl_z_current_get+0x8>)
   1a632:	6898      	ldr	r0, [r3, #8]
   1a634:	4770      	bx	lr
   1a636:	bf00      	nop
   1a638:	20009b48 	.word	0x20009b48

0001a63c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a640:	4604      	mov	r4, r0
   1a642:	f04f 0320 	mov.w	r3, #32
   1a646:	f3ef 8611 	mrs	r6, BASEPRI
   1a64a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a64e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a652:	4851      	ldr	r0, [pc, #324]	; (1a798 <z_thread_abort+0x15c>)
   1a654:	f7fd fdae 	bl	181b4 <z_spin_lock_valid>
   1a658:	b968      	cbnz	r0, 1a676 <z_thread_abort+0x3a>
   1a65a:	2394      	movs	r3, #148	; 0x94
   1a65c:	4a4f      	ldr	r2, [pc, #316]	; (1a79c <z_thread_abort+0x160>)
   1a65e:	4950      	ldr	r1, [pc, #320]	; (1a7a0 <z_thread_abort+0x164>)
   1a660:	4850      	ldr	r0, [pc, #320]	; (1a7a4 <z_thread_abort+0x168>)
   1a662:	f001 fb69 	bl	1bd38 <assert_print>
   1a666:	494c      	ldr	r1, [pc, #304]	; (1a798 <z_thread_abort+0x15c>)
   1a668:	484f      	ldr	r0, [pc, #316]	; (1a7a8 <z_thread_abort+0x16c>)
   1a66a:	f001 fb65 	bl	1bd38 <assert_print>
   1a66e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a670:	484a      	ldr	r0, [pc, #296]	; (1a79c <z_thread_abort+0x160>)
   1a672:	f001 fb5a 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1a676:	4848      	ldr	r0, [pc, #288]	; (1a798 <z_thread_abort+0x15c>)
   1a678:	f7fd fdb8 	bl	181ec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1a67c:	7b23      	ldrb	r3, [r4, #12]
   1a67e:	07d9      	lsls	r1, r3, #31
   1a680:	d522      	bpl.n	1a6c8 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a682:	4845      	ldr	r0, [pc, #276]	; (1a798 <z_thread_abort+0x15c>)
   1a684:	f7fd fda4 	bl	181d0 <z_spin_unlock_valid>
   1a688:	b958      	cbnz	r0, 1a6a2 <z_thread_abort+0x66>
   1a68a:	23c2      	movs	r3, #194	; 0xc2
   1a68c:	4a43      	ldr	r2, [pc, #268]	; (1a79c <z_thread_abort+0x160>)
   1a68e:	4947      	ldr	r1, [pc, #284]	; (1a7ac <z_thread_abort+0x170>)
   1a690:	4844      	ldr	r0, [pc, #272]	; (1a7a4 <z_thread_abort+0x168>)
   1a692:	f001 fb51 	bl	1bd38 <assert_print>
   1a696:	4940      	ldr	r1, [pc, #256]	; (1a798 <z_thread_abort+0x15c>)
   1a698:	4845      	ldr	r0, [pc, #276]	; (1a7b0 <z_thread_abort+0x174>)
   1a69a:	f001 fb4d 	bl	1bd38 <assert_print>
   1a69e:	21c2      	movs	r1, #194	; 0xc2
   1a6a0:	e7e6      	b.n	1a670 <z_thread_abort+0x34>
	__asm__ volatile(
   1a6a2:	f386 8811 	msr	BASEPRI, r6
   1a6a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   1a6aa:	f44f 63d9 	mov.w	r3, #1736	; 0x6c8
   1a6ae:	4a41      	ldr	r2, [pc, #260]	; (1a7b4 <z_thread_abort+0x178>)
   1a6b0:	4941      	ldr	r1, [pc, #260]	; (1a7b8 <z_thread_abort+0x17c>)
   1a6b2:	483c      	ldr	r0, [pc, #240]	; (1a7a4 <z_thread_abort+0x168>)
   1a6b4:	f001 fb40 	bl	1bd38 <assert_print>
   1a6b8:	4621      	mov	r1, r4
   1a6ba:	4840      	ldr	r0, [pc, #256]	; (1a7bc <z_thread_abort+0x180>)
   1a6bc:	f001 fb3c 	bl	1bd38 <assert_print>
   1a6c0:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   1a6c4:	483b      	ldr	r0, [pc, #236]	; (1a7b4 <z_thread_abort+0x178>)
   1a6c6:	e7d4      	b.n	1a672 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1a6c8:	7b63      	ldrb	r3, [r4, #13]
   1a6ca:	071a      	lsls	r2, r3, #28
   1a6cc:	d50a      	bpl.n	1a6e4 <z_thread_abort+0xa8>
   1a6ce:	4832      	ldr	r0, [pc, #200]	; (1a798 <z_thread_abort+0x15c>)
   1a6d0:	f7fd fd7e 	bl	181d0 <z_spin_unlock_valid>
   1a6d4:	2800      	cmp	r0, #0
   1a6d6:	d0d8      	beq.n	1a68a <z_thread_abort+0x4e>
   1a6d8:	f386 8811 	msr	BASEPRI, r6
   1a6dc:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a6e4:	f023 0220 	bic.w	r2, r3, #32
   1a6e8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1a6ec:	09d2      	lsrs	r2, r2, #7
   1a6ee:	d12c      	bne.n	1a74a <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a6f0:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1a6f2:	68a3      	ldr	r3, [r4, #8]
   1a6f4:	b113      	cbz	r3, 1a6fc <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   1a6f6:	4620      	mov	r0, r4
   1a6f8:	f7ff fcc2 	bl	1a080 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1a6fc:	f104 0018 	add.w	r0, r4, #24
   1a700:	f000 fa02 	bl	1ab08 <z_abort_timeout>
   1a704:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a708:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1a70c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a70e:	42bd      	cmp	r5, r7
   1a710:	d000      	beq.n	1a714 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a712:	bb25      	cbnz	r5, 1a75e <z_thread_abort+0x122>
		update_cache(1);
   1a714:	2001      	movs	r0, #1
   1a716:	f7fe ff07 	bl	19528 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1a71a:	4b29      	ldr	r3, [pc, #164]	; (1a7c0 <z_thread_abort+0x184>)
   1a71c:	689b      	ldr	r3, [r3, #8]
   1a71e:	42a3      	cmp	r3, r4
   1a720:	d1d5      	bne.n	1a6ce <z_thread_abort+0x92>
   1a722:	f3ef 8305 	mrs	r3, IPSR
   1a726:	2b00      	cmp	r3, #0
   1a728:	d1d1      	bne.n	1a6ce <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a72a:	481b      	ldr	r0, [pc, #108]	; (1a798 <z_thread_abort+0x15c>)
   1a72c:	f7fd fd50 	bl	181d0 <z_spin_unlock_valid>
   1a730:	bb10      	cbnz	r0, 1a778 <z_thread_abort+0x13c>
   1a732:	23e1      	movs	r3, #225	; 0xe1
   1a734:	4a19      	ldr	r2, [pc, #100]	; (1a79c <z_thread_abort+0x160>)
   1a736:	491d      	ldr	r1, [pc, #116]	; (1a7ac <z_thread_abort+0x170>)
   1a738:	481a      	ldr	r0, [pc, #104]	; (1a7a4 <z_thread_abort+0x168>)
   1a73a:	f001 fafd 	bl	1bd38 <assert_print>
   1a73e:	4916      	ldr	r1, [pc, #88]	; (1a798 <z_thread_abort+0x15c>)
   1a740:	481b      	ldr	r0, [pc, #108]	; (1a7b0 <z_thread_abort+0x174>)
   1a742:	f001 faf9 	bl	1bd38 <assert_print>
   1a746:	21e1      	movs	r1, #225	; 0xe1
   1a748:	e792      	b.n	1a670 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a74a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1a74e:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   1a752:	4621      	mov	r1, r4
   1a754:	481b      	ldr	r0, [pc, #108]	; (1a7c4 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a756:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a758:	f7ff f9c8 	bl	19aec <z_priq_dumb_remove>
}
   1a75c:	e7c9      	b.n	1a6f2 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   1a75e:	4628      	mov	r0, r5
   1a760:	f7ff fc8e 	bl	1a080 <unpend_thread_no_timeout>
   1a764:	f105 0018 	add.w	r0, r5, #24
   1a768:	f000 f9ce 	bl	1ab08 <z_abort_timeout>
		ready_thread(thread);
   1a76c:	4628      	mov	r0, r5
   1a76e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   1a772:	f7fe ff0d 	bl	19590 <ready_thread>
   1a776:	e7c9      	b.n	1a70c <z_thread_abort+0xd0>
   1a778:	4630      	mov	r0, r6
   1a77a:	f7f2 fb13 	bl	cda4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1a77e:	490e      	ldr	r1, [pc, #56]	; (1a7b8 <z_thread_abort+0x17c>)
   1a780:	f240 63f7 	movw	r3, #1783	; 0x6f7
   1a784:	4a0b      	ldr	r2, [pc, #44]	; (1a7b4 <z_thread_abort+0x178>)
   1a786:	4807      	ldr	r0, [pc, #28]	; (1a7a4 <z_thread_abort+0x168>)
   1a788:	f001 fad6 	bl	1bd38 <assert_print>
   1a78c:	480e      	ldr	r0, [pc, #56]	; (1a7c8 <z_thread_abort+0x18c>)
   1a78e:	f001 fad3 	bl	1bd38 <assert_print>
   1a792:	f240 61f7 	movw	r1, #1783	; 0x6f7
   1a796:	e795      	b.n	1a6c4 <z_thread_abort+0x88>
   1a798:	20009b90 	.word	0x20009b90
   1a79c:	000209d8 	.word	0x000209d8
   1a7a0:	00020a31 	.word	0x00020a31
   1a7a4:	000205a4 	.word	0x000205a4
   1a7a8:	00020a46 	.word	0x00020a46
   1a7ac:	00020a05 	.word	0x00020a05
   1a7b0:	00020a1c 	.word	0x00020a1c
   1a7b4:	000240db 	.word	0x000240db
   1a7b8:	0002357e 	.word	0x0002357e
   1a7bc:	00024260 	.word	0x00024260
   1a7c0:	20009b48 	.word	0x20009b48
   1a7c4:	20009b68 	.word	0x20009b68
   1a7c8:	0002427f 	.word	0x0002427f

0001a7cc <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1a7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a7d0:	4606      	mov	r6, r0
   1a7d2:	4688      	mov	r8, r1
   1a7d4:	4617      	mov	r7, r2
	__asm__ volatile(
   1a7d6:	f04f 0320 	mov.w	r3, #32
   1a7da:	f3ef 8911 	mrs	r9, BASEPRI
   1a7de:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a7e6:	4821      	ldr	r0, [pc, #132]	; (1a86c <z_sched_wake+0xa0>)
   1a7e8:	f7fd fce4 	bl	181b4 <z_spin_lock_valid>
   1a7ec:	4605      	mov	r5, r0
   1a7ee:	b968      	cbnz	r0, 1a80c <z_sched_wake+0x40>
   1a7f0:	2394      	movs	r3, #148	; 0x94
   1a7f2:	4a1f      	ldr	r2, [pc, #124]	; (1a870 <z_sched_wake+0xa4>)
   1a7f4:	491f      	ldr	r1, [pc, #124]	; (1a874 <z_sched_wake+0xa8>)
   1a7f6:	4820      	ldr	r0, [pc, #128]	; (1a878 <z_sched_wake+0xac>)
   1a7f8:	f001 fa9e 	bl	1bd38 <assert_print>
   1a7fc:	491b      	ldr	r1, [pc, #108]	; (1a86c <z_sched_wake+0xa0>)
   1a7fe:	481f      	ldr	r0, [pc, #124]	; (1a87c <z_sched_wake+0xb0>)
   1a800:	f001 fa9a 	bl	1bd38 <assert_print>
   1a804:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a806:	481a      	ldr	r0, [pc, #104]	; (1a870 <z_sched_wake+0xa4>)
   1a808:	f001 fa8f 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1a80c:	4817      	ldr	r0, [pc, #92]	; (1a86c <z_sched_wake+0xa0>)
   1a80e:	f7fd fced 	bl	181ec <z_spin_lock_set_owner>
	return list->head == list;
   1a812:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a814:	42a6      	cmp	r6, r4
   1a816:	d01d      	beq.n	1a854 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   1a818:	b1f4      	cbz	r4, 1a858 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1a81a:	4620      	mov	r0, r4
   1a81c:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   1a820:	6167      	str	r7, [r4, #20]
   1a822:	f7ff fc2d 	bl	1a080 <unpend_thread_no_timeout>
   1a826:	f104 0018 	add.w	r0, r4, #24
   1a82a:	f000 f96d 	bl	1ab08 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1a82e:	4620      	mov	r0, r4
   1a830:	f7fe feae 	bl	19590 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a834:	480d      	ldr	r0, [pc, #52]	; (1a86c <z_sched_wake+0xa0>)
   1a836:	f7fd fccb 	bl	181d0 <z_spin_unlock_valid>
   1a83a:	b978      	cbnz	r0, 1a85c <z_sched_wake+0x90>
   1a83c:	23c2      	movs	r3, #194	; 0xc2
   1a83e:	4a0c      	ldr	r2, [pc, #48]	; (1a870 <z_sched_wake+0xa4>)
   1a840:	490f      	ldr	r1, [pc, #60]	; (1a880 <z_sched_wake+0xb4>)
   1a842:	480d      	ldr	r0, [pc, #52]	; (1a878 <z_sched_wake+0xac>)
   1a844:	f001 fa78 	bl	1bd38 <assert_print>
   1a848:	4908      	ldr	r1, [pc, #32]	; (1a86c <z_sched_wake+0xa0>)
   1a84a:	480e      	ldr	r0, [pc, #56]	; (1a884 <z_sched_wake+0xb8>)
   1a84c:	f001 fa74 	bl	1bd38 <assert_print>
   1a850:	21c2      	movs	r1, #194	; 0xc2
   1a852:	e7d8      	b.n	1a806 <z_sched_wake+0x3a>
	bool ret = false;
   1a854:	2500      	movs	r5, #0
   1a856:	e7ed      	b.n	1a834 <z_sched_wake+0x68>
   1a858:	4625      	mov	r5, r4
   1a85a:	e7eb      	b.n	1a834 <z_sched_wake+0x68>
	__asm__ volatile(
   1a85c:	f389 8811 	msr	BASEPRI, r9
   1a860:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   1a864:	4628      	mov	r0, r5
   1a866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a86a:	bf00      	nop
   1a86c:	20009b90 	.word	0x20009b90
   1a870:	000209d8 	.word	0x000209d8
   1a874:	00020a31 	.word	0x00020a31
   1a878:	000205a4 	.word	0x000205a4
   1a87c:	00020a46 	.word	0x00020a46
   1a880:	00020a05 	.word	0x00020a05
   1a884:	00020a1c 	.word	0x00020a1c

0001a888 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1a888:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a88a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1a88e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a890:	e9cd 6700 	strd	r6, r7, [sp]
   1a894:	f7ff fa84 	bl	19da0 <z_pend_curr>

	if (data != NULL) {
   1a898:	b11c      	cbz	r4, 1a8a2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1a89a:	4b03      	ldr	r3, [pc, #12]	; (1a8a8 <z_sched_wait+0x20>)
   1a89c:	689b      	ldr	r3, [r3, #8]
   1a89e:	695b      	ldr	r3, [r3, #20]
   1a8a0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1a8a2:	b002      	add	sp, #8
   1a8a4:	bdd0      	pop	{r4, r6, r7, pc}
   1a8a6:	bf00      	nop
   1a8a8:	20009b48 	.word	0x20009b48

0001a8ac <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1a8ac:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1a8ae:	4806      	ldr	r0, [pc, #24]	; (1a8c8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1a8b0:	4a06      	ldr	r2, [pc, #24]	; (1a8cc <z_data_copy+0x20>)
   1a8b2:	4907      	ldr	r1, [pc, #28]	; (1a8d0 <z_data_copy+0x24>)
   1a8b4:	1a12      	subs	r2, r2, r0
   1a8b6:	f004 fba9 	bl	1f00c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a8ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1a8be:	4a05      	ldr	r2, [pc, #20]	; (1a8d4 <z_data_copy+0x28>)
   1a8c0:	4905      	ldr	r1, [pc, #20]	; (1a8d8 <z_data_copy+0x2c>)
   1a8c2:	4806      	ldr	r0, [pc, #24]	; (1a8dc <z_data_copy+0x30>)
   1a8c4:	f004 bba2 	b.w	1f00c <z_early_memcpy>
   1a8c8:	20008000 	.word	0x20008000
   1a8cc:	20008738 	.word	0x20008738
   1a8d0:	000245fc 	.word	0x000245fc
   1a8d4:	00000000 	.word	0x00000000
   1a8d8:	000245fc 	.word	0x000245fc
   1a8dc:	20008000 	.word	0x20008000

0001a8e0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1a8e0:	4b03      	ldr	r3, [pc, #12]	; (1a8f0 <elapsed+0x10>)
   1a8e2:	681b      	ldr	r3, [r3, #0]
   1a8e4:	b90b      	cbnz	r3, 1a8ea <elapsed+0xa>
   1a8e6:	f7fa be23 	b.w	15530 <sys_clock_elapsed>
}
   1a8ea:	2000      	movs	r0, #0
   1a8ec:	4770      	bx	lr
   1a8ee:	bf00      	nop
   1a8f0:	20009b94 	.word	0x20009b94

0001a8f4 <next_timeout>:

static int32_t next_timeout(void)
{
   1a8f4:	b510      	push	{r4, lr}
	return list->head == list;
   1a8f6:	4b11      	ldr	r3, [pc, #68]	; (1a93c <next_timeout+0x48>)
   1a8f8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8fa:	429c      	cmp	r4, r3
   1a8fc:	d10a      	bne.n	1a914 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1a8fe:	f7ff ffef 	bl	1a8e0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1a902:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1a906:	4b0e      	ldr	r3, [pc, #56]	; (1a940 <next_timeout+0x4c>)
   1a908:	691b      	ldr	r3, [r3, #16]
   1a90a:	b113      	cbz	r3, 1a912 <next_timeout+0x1e>
   1a90c:	4298      	cmp	r0, r3
   1a90e:	bfa8      	it	ge
   1a910:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1a912:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1a914:	f7ff ffe4 	bl	1a8e0 <elapsed>
	if ((to == NULL) ||
   1a918:	2c00      	cmp	r4, #0
   1a91a:	d0f2      	beq.n	1a902 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1a91c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1a920:	1a1b      	subs	r3, r3, r0
   1a922:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1a926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a92a:	f172 0100 	sbcs.w	r1, r2, #0
   1a92e:	dae8      	bge.n	1a902 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1a930:	2a00      	cmp	r2, #0
   1a932:	bfac      	ite	ge
   1a934:	4618      	movge	r0, r3
   1a936:	2000      	movlt	r0, #0
   1a938:	e7e5      	b.n	1a906 <next_timeout+0x12>
   1a93a:	bf00      	nop
   1a93c:	20008374 	.word	0x20008374
   1a940:	20009b48 	.word	0x20009b48

0001a944 <remove_timeout>:
{
   1a944:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a946:	b170      	cbz	r0, 1a966 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1a948:	4b0b      	ldr	r3, [pc, #44]	; (1a978 <remove_timeout+0x34>)
   1a94a:	685b      	ldr	r3, [r3, #4]
   1a94c:	4298      	cmp	r0, r3
   1a94e:	d00a      	beq.n	1a966 <remove_timeout+0x22>
   1a950:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1a952:	b143      	cbz	r3, 1a966 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1a954:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1a958:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a95c:	1912      	adds	r2, r2, r4
   1a95e:	eb41 0105 	adc.w	r1, r1, r5
   1a962:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   1a966:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1a96a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a96c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a96e:	2300      	movs	r3, #0
	node->prev = NULL;
   1a970:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a974:	bd30      	pop	{r4, r5, pc}
   1a976:	bf00      	nop
   1a978:	20008374 	.word	0x20008374

0001a97c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a980:	bf08      	it	eq
   1a982:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1a986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a98a:	4604      	mov	r4, r0
   1a98c:	4692      	mov	sl, r2
   1a98e:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a990:	f000 809e 	beq.w	1aad0 <z_add_timeout+0x154>
	return node->next != NULL;
   1a994:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1a996:	b166      	cbz	r6, 1a9b2 <z_add_timeout+0x36>
   1a998:	494e      	ldr	r1, [pc, #312]	; (1aad4 <z_add_timeout+0x158>)
   1a99a:	2363      	movs	r3, #99	; 0x63
   1a99c:	4a4e      	ldr	r2, [pc, #312]	; (1aad8 <z_add_timeout+0x15c>)
   1a99e:	484f      	ldr	r0, [pc, #316]	; (1aadc <z_add_timeout+0x160>)
   1a9a0:	f001 f9ca 	bl	1bd38 <assert_print>
   1a9a4:	484e      	ldr	r0, [pc, #312]	; (1aae0 <z_add_timeout+0x164>)
   1a9a6:	f001 f9c7 	bl	1bd38 <assert_print>
   1a9aa:	2163      	movs	r1, #99	; 0x63
   1a9ac:	484a      	ldr	r0, [pc, #296]	; (1aad8 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a9ae:	f001 f9bc 	bl	1bd2a <assert_post_action>
	to->fn = fn;
   1a9b2:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1a9b4:	f04f 0320 	mov.w	r3, #32
   1a9b8:	f3ef 8711 	mrs	r7, BASEPRI
   1a9bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9c0:	f3bf 8f6f 	isb	sy
   1a9c4:	4847      	ldr	r0, [pc, #284]	; (1aae4 <z_add_timeout+0x168>)
   1a9c6:	f7fd fbf5 	bl	181b4 <z_spin_lock_valid>
   1a9ca:	b960      	cbnz	r0, 1a9e6 <z_add_timeout+0x6a>
   1a9cc:	2394      	movs	r3, #148	; 0x94
   1a9ce:	4a46      	ldr	r2, [pc, #280]	; (1aae8 <z_add_timeout+0x16c>)
   1a9d0:	4946      	ldr	r1, [pc, #280]	; (1aaec <z_add_timeout+0x170>)
   1a9d2:	4842      	ldr	r0, [pc, #264]	; (1aadc <z_add_timeout+0x160>)
   1a9d4:	f001 f9b0 	bl	1bd38 <assert_print>
   1a9d8:	4942      	ldr	r1, [pc, #264]	; (1aae4 <z_add_timeout+0x168>)
   1a9da:	4845      	ldr	r0, [pc, #276]	; (1aaf0 <z_add_timeout+0x174>)
   1a9dc:	f001 f9ac 	bl	1bd38 <assert_print>
   1a9e0:	2194      	movs	r1, #148	; 0x94
   1a9e2:	4841      	ldr	r0, [pc, #260]	; (1aae8 <z_add_timeout+0x16c>)
   1a9e4:	e7e3      	b.n	1a9ae <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   1a9e6:	483f      	ldr	r0, [pc, #252]	; (1aae4 <z_add_timeout+0x168>)
   1a9e8:	f7fd fc00 	bl	181ec <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1a9ec:	f1ba 3fff 	cmp.w	sl, #4294967295
   1a9f0:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1a9f4:	da23      	bge.n	1aa3e <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1a9f6:	f06f 0301 	mvn.w	r3, #1
   1a9fa:	493e      	ldr	r1, [pc, #248]	; (1aaf4 <z_add_timeout+0x178>)
   1a9fc:	e9d1 2000 	ldrd	r2, r0, [r1]
   1aa00:	1a9b      	subs	r3, r3, r2
   1aa02:	f04f 32ff 	mov.w	r2, #4294967295
   1aa06:	eb62 0000 	sbc.w	r0, r2, r0
   1aa0a:	ebb3 030a 	subs.w	r3, r3, sl
   1aa0e:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1aa12:	2b01      	cmp	r3, #1
   1aa14:	f170 0200 	sbcs.w	r2, r0, #0
   1aa18:	da01      	bge.n	1aa1e <z_add_timeout+0xa2>
   1aa1a:	2301      	movs	r3, #1
   1aa1c:	4630      	mov	r0, r6
   1aa1e:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   1aa22:	4b35      	ldr	r3, [pc, #212]	; (1aaf8 <z_add_timeout+0x17c>)
   1aa24:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   1aa26:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa2a:	429a      	cmp	r2, r3
   1aa2c:	bf18      	it	ne
   1aa2e:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1aa30:	b986      	cbnz	r6, 1aa54 <z_add_timeout+0xd8>
	node->prev = tail;
   1aa32:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   1aa36:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1aa3a:	605c      	str	r4, [r3, #4]
}
   1aa3c:	e01c      	b.n	1aa78 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   1aa3e:	f7ff ff4f 	bl	1a8e0 <elapsed>
   1aa42:	f11a 0801 	adds.w	r8, sl, #1
   1aa46:	f145 0500 	adc.w	r5, r5, #0
   1aa4a:	eb18 0300 	adds.w	r3, r8, r0
   1aa4e:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1aa52:	e7e4      	b.n	1aa1e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   1aa54:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   1aa58:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   1aa5c:	428a      	cmp	r2, r1
   1aa5e:	eb70 0e05 	sbcs.w	lr, r0, r5
   1aa62:	da28      	bge.n	1aab6 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   1aa64:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   1aa66:	6872      	ldr	r2, [r6, #4]
   1aa68:	eb65 0500 	sbc.w	r5, r5, r0
   1aa6c:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   1aa70:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   1aa74:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1aa76:	6074      	str	r4, [r6, #4]
	return list->head == list;
   1aa78:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa7a:	429a      	cmp	r2, r3
   1aa7c:	d00b      	beq.n	1aa96 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1aa7e:	4294      	cmp	r4, r2
   1aa80:	d109      	bne.n	1aa96 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1aa82:	f7ff ff37 	bl	1a8f4 <next_timeout>

			if (next_time == 0 ||
   1aa86:	b118      	cbz	r0, 1aa90 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   1aa88:	4b1c      	ldr	r3, [pc, #112]	; (1aafc <z_add_timeout+0x180>)
			if (next_time == 0 ||
   1aa8a:	691b      	ldr	r3, [r3, #16]
   1aa8c:	4283      	cmp	r3, r0
   1aa8e:	d002      	beq.n	1aa96 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   1aa90:	2100      	movs	r1, #0
   1aa92:	f7fa fd1d 	bl	154d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa96:	4813      	ldr	r0, [pc, #76]	; (1aae4 <z_add_timeout+0x168>)
   1aa98:	f7fd fb9a 	bl	181d0 <z_spin_unlock_valid>
   1aa9c:	b9a0      	cbnz	r0, 1aac8 <z_add_timeout+0x14c>
   1aa9e:	23c2      	movs	r3, #194	; 0xc2
   1aaa0:	4a11      	ldr	r2, [pc, #68]	; (1aae8 <z_add_timeout+0x16c>)
   1aaa2:	4917      	ldr	r1, [pc, #92]	; (1ab00 <z_add_timeout+0x184>)
   1aaa4:	480d      	ldr	r0, [pc, #52]	; (1aadc <z_add_timeout+0x160>)
   1aaa6:	f001 f947 	bl	1bd38 <assert_print>
   1aaaa:	490e      	ldr	r1, [pc, #56]	; (1aae4 <z_add_timeout+0x168>)
   1aaac:	4815      	ldr	r0, [pc, #84]	; (1ab04 <z_add_timeout+0x188>)
   1aaae:	f001 f943 	bl	1bd38 <assert_print>
   1aab2:	21c2      	movs	r1, #194	; 0xc2
   1aab4:	e795      	b.n	1a9e2 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   1aab6:	1a52      	subs	r2, r2, r1
   1aab8:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   1aabc:	4566      	cmp	r6, ip
   1aabe:	e9c4 2004 	strd	r2, r0, [r4, #16]
   1aac2:	d0b6      	beq.n	1aa32 <z_add_timeout+0xb6>
   1aac4:	6836      	ldr	r6, [r6, #0]
   1aac6:	e7b3      	b.n	1aa30 <z_add_timeout+0xb4>
	__asm__ volatile(
   1aac8:	f387 8811 	msr	BASEPRI, r7
   1aacc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1aad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aad4:	000242c5 	.word	0x000242c5
   1aad8:	000242a1 	.word	0x000242a1
   1aadc:	000205a4 	.word	0x000205a4
   1aae0:	00022c58 	.word	0x00022c58
   1aae4:	20009b98 	.word	0x20009b98
   1aae8:	000209d8 	.word	0x000209d8
   1aaec:	00020a31 	.word	0x00020a31
   1aaf0:	00020a46 	.word	0x00020a46
   1aaf4:	20009668 	.word	0x20009668
   1aaf8:	20008374 	.word	0x20008374
   1aafc:	20009b48 	.word	0x20009b48
   1ab00:	00020a05 	.word	0x00020a05
   1ab04:	00020a1c 	.word	0x00020a1c

0001ab08 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1ab08:	b538      	push	{r3, r4, r5, lr}
   1ab0a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ab0c:	f04f 0320 	mov.w	r3, #32
   1ab10:	f3ef 8511 	mrs	r5, BASEPRI
   1ab14:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab1c:	4819      	ldr	r0, [pc, #100]	; (1ab84 <z_abort_timeout+0x7c>)
   1ab1e:	f7fd fb49 	bl	181b4 <z_spin_lock_valid>
   1ab22:	b968      	cbnz	r0, 1ab40 <z_abort_timeout+0x38>
   1ab24:	2394      	movs	r3, #148	; 0x94
   1ab26:	4a18      	ldr	r2, [pc, #96]	; (1ab88 <z_abort_timeout+0x80>)
   1ab28:	4918      	ldr	r1, [pc, #96]	; (1ab8c <z_abort_timeout+0x84>)
   1ab2a:	4819      	ldr	r0, [pc, #100]	; (1ab90 <z_abort_timeout+0x88>)
   1ab2c:	f001 f904 	bl	1bd38 <assert_print>
   1ab30:	4914      	ldr	r1, [pc, #80]	; (1ab84 <z_abort_timeout+0x7c>)
   1ab32:	4818      	ldr	r0, [pc, #96]	; (1ab94 <z_abort_timeout+0x8c>)
   1ab34:	f001 f900 	bl	1bd38 <assert_print>
   1ab38:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab3a:	4813      	ldr	r0, [pc, #76]	; (1ab88 <z_abort_timeout+0x80>)
   1ab3c:	f001 f8f5 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1ab40:	4810      	ldr	r0, [pc, #64]	; (1ab84 <z_abort_timeout+0x7c>)
   1ab42:	f7fd fb53 	bl	181ec <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1ab46:	6823      	ldr	r3, [r4, #0]
   1ab48:	b19b      	cbz	r3, 1ab72 <z_abort_timeout+0x6a>
			remove_timeout(to);
   1ab4a:	4620      	mov	r0, r4
   1ab4c:	f7ff fefa 	bl	1a944 <remove_timeout>
			ret = 0;
   1ab50:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab52:	480c      	ldr	r0, [pc, #48]	; (1ab84 <z_abort_timeout+0x7c>)
   1ab54:	f7fd fb3c 	bl	181d0 <z_spin_unlock_valid>
   1ab58:	b970      	cbnz	r0, 1ab78 <z_abort_timeout+0x70>
   1ab5a:	23c2      	movs	r3, #194	; 0xc2
   1ab5c:	4a0a      	ldr	r2, [pc, #40]	; (1ab88 <z_abort_timeout+0x80>)
   1ab5e:	490e      	ldr	r1, [pc, #56]	; (1ab98 <z_abort_timeout+0x90>)
   1ab60:	480b      	ldr	r0, [pc, #44]	; (1ab90 <z_abort_timeout+0x88>)
   1ab62:	f001 f8e9 	bl	1bd38 <assert_print>
   1ab66:	4907      	ldr	r1, [pc, #28]	; (1ab84 <z_abort_timeout+0x7c>)
   1ab68:	480c      	ldr	r0, [pc, #48]	; (1ab9c <z_abort_timeout+0x94>)
   1ab6a:	f001 f8e5 	bl	1bd38 <assert_print>
   1ab6e:	21c2      	movs	r1, #194	; 0xc2
   1ab70:	e7e3      	b.n	1ab3a <z_abort_timeout+0x32>
	int ret = -EINVAL;
   1ab72:	f06f 0415 	mvn.w	r4, #21
   1ab76:	e7ec      	b.n	1ab52 <z_abort_timeout+0x4a>
	__asm__ volatile(
   1ab78:	f385 8811 	msr	BASEPRI, r5
   1ab7c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1ab80:	4620      	mov	r0, r4
   1ab82:	bd38      	pop	{r3, r4, r5, pc}
   1ab84:	20009b98 	.word	0x20009b98
   1ab88:	000209d8 	.word	0x000209d8
   1ab8c:	00020a31 	.word	0x00020a31
   1ab90:	000205a4 	.word	0x000205a4
   1ab94:	00020a46 	.word	0x00020a46
   1ab98:	00020a05 	.word	0x00020a05
   1ab9c:	00020a1c 	.word	0x00020a1c

0001aba0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1aba0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1aba2:	f04f 0320 	mov.w	r3, #32
   1aba6:	f3ef 8511 	mrs	r5, BASEPRI
   1abaa:	f383 8812 	msr	BASEPRI_MAX, r3
   1abae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1abb2:	4817      	ldr	r0, [pc, #92]	; (1ac10 <z_get_next_timeout_expiry+0x70>)
   1abb4:	f7fd fafe 	bl	181b4 <z_spin_lock_valid>
   1abb8:	b968      	cbnz	r0, 1abd6 <z_get_next_timeout_expiry+0x36>
   1abba:	2394      	movs	r3, #148	; 0x94
   1abbc:	4a15      	ldr	r2, [pc, #84]	; (1ac14 <z_get_next_timeout_expiry+0x74>)
   1abbe:	4916      	ldr	r1, [pc, #88]	; (1ac18 <z_get_next_timeout_expiry+0x78>)
   1abc0:	4816      	ldr	r0, [pc, #88]	; (1ac1c <z_get_next_timeout_expiry+0x7c>)
   1abc2:	f001 f8b9 	bl	1bd38 <assert_print>
   1abc6:	4912      	ldr	r1, [pc, #72]	; (1ac10 <z_get_next_timeout_expiry+0x70>)
   1abc8:	4815      	ldr	r0, [pc, #84]	; (1ac20 <z_get_next_timeout_expiry+0x80>)
   1abca:	f001 f8b5 	bl	1bd38 <assert_print>
   1abce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1abd0:	4810      	ldr	r0, [pc, #64]	; (1ac14 <z_get_next_timeout_expiry+0x74>)
   1abd2:	f001 f8aa 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1abd6:	480e      	ldr	r0, [pc, #56]	; (1ac10 <z_get_next_timeout_expiry+0x70>)
   1abd8:	f7fd fb08 	bl	181ec <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1abdc:	f7ff fe8a 	bl	1a8f4 <next_timeout>
   1abe0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1abe2:	480b      	ldr	r0, [pc, #44]	; (1ac10 <z_get_next_timeout_expiry+0x70>)
   1abe4:	f7fd faf4 	bl	181d0 <z_spin_unlock_valid>
   1abe8:	b958      	cbnz	r0, 1ac02 <z_get_next_timeout_expiry+0x62>
   1abea:	23c2      	movs	r3, #194	; 0xc2
   1abec:	4a09      	ldr	r2, [pc, #36]	; (1ac14 <z_get_next_timeout_expiry+0x74>)
   1abee:	490d      	ldr	r1, [pc, #52]	; (1ac24 <z_get_next_timeout_expiry+0x84>)
   1abf0:	480a      	ldr	r0, [pc, #40]	; (1ac1c <z_get_next_timeout_expiry+0x7c>)
   1abf2:	f001 f8a1 	bl	1bd38 <assert_print>
   1abf6:	4906      	ldr	r1, [pc, #24]	; (1ac10 <z_get_next_timeout_expiry+0x70>)
   1abf8:	480b      	ldr	r0, [pc, #44]	; (1ac28 <z_get_next_timeout_expiry+0x88>)
   1abfa:	f001 f89d 	bl	1bd38 <assert_print>
   1abfe:	21c2      	movs	r1, #194	; 0xc2
   1ac00:	e7e6      	b.n	1abd0 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   1ac02:	f385 8811 	msr	BASEPRI, r5
   1ac06:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1ac0a:	4620      	mov	r0, r4
   1ac0c:	bd38      	pop	{r3, r4, r5, pc}
   1ac0e:	bf00      	nop
   1ac10:	20009b98 	.word	0x20009b98
   1ac14:	000209d8 	.word	0x000209d8
   1ac18:	00020a31 	.word	0x00020a31
   1ac1c:	000205a4 	.word	0x000205a4
   1ac20:	00020a46 	.word	0x00020a46
   1ac24:	00020a05 	.word	0x00020a05
   1ac28:	00020a1c 	.word	0x00020a1c

0001ac2c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1ac2c:	b570      	push	{r4, r5, r6, lr}
   1ac2e:	4604      	mov	r4, r0
   1ac30:	460d      	mov	r5, r1
	__asm__ volatile(
   1ac32:	f04f 0320 	mov.w	r3, #32
   1ac36:	f3ef 8611 	mrs	r6, BASEPRI
   1ac3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac42:	481b      	ldr	r0, [pc, #108]	; (1acb0 <z_set_timeout_expiry+0x84>)
   1ac44:	f7fd fab6 	bl	181b4 <z_spin_lock_valid>
   1ac48:	b968      	cbnz	r0, 1ac66 <z_set_timeout_expiry+0x3a>
   1ac4a:	2394      	movs	r3, #148	; 0x94
   1ac4c:	4a19      	ldr	r2, [pc, #100]	; (1acb4 <z_set_timeout_expiry+0x88>)
   1ac4e:	491a      	ldr	r1, [pc, #104]	; (1acb8 <z_set_timeout_expiry+0x8c>)
   1ac50:	481a      	ldr	r0, [pc, #104]	; (1acbc <z_set_timeout_expiry+0x90>)
   1ac52:	f001 f871 	bl	1bd38 <assert_print>
   1ac56:	4916      	ldr	r1, [pc, #88]	; (1acb0 <z_set_timeout_expiry+0x84>)
   1ac58:	4819      	ldr	r0, [pc, #100]	; (1acc0 <z_set_timeout_expiry+0x94>)
   1ac5a:	f001 f86d 	bl	1bd38 <assert_print>
   1ac5e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac60:	4814      	ldr	r0, [pc, #80]	; (1acb4 <z_set_timeout_expiry+0x88>)
   1ac62:	f001 f862 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac66:	4812      	ldr	r0, [pc, #72]	; (1acb0 <z_set_timeout_expiry+0x84>)
   1ac68:	f7fd fac0 	bl	181ec <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1ac6c:	f7ff fe42 	bl	1a8f4 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   1ac70:	2801      	cmp	r0, #1
   1ac72:	dd07      	ble.n	1ac84 <z_set_timeout_expiry+0x58>
   1ac74:	42a0      	cmp	r0, r4
   1ac76:	db05      	blt.n	1ac84 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1ac78:	42a0      	cmp	r0, r4
   1ac7a:	4629      	mov	r1, r5
   1ac7c:	bfa8      	it	ge
   1ac7e:	4620      	movge	r0, r4
   1ac80:	f7fa fc26 	bl	154d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac84:	480a      	ldr	r0, [pc, #40]	; (1acb0 <z_set_timeout_expiry+0x84>)
   1ac86:	f7fd faa3 	bl	181d0 <z_spin_unlock_valid>
   1ac8a:	b958      	cbnz	r0, 1aca4 <z_set_timeout_expiry+0x78>
   1ac8c:	23c2      	movs	r3, #194	; 0xc2
   1ac8e:	4a09      	ldr	r2, [pc, #36]	; (1acb4 <z_set_timeout_expiry+0x88>)
   1ac90:	490c      	ldr	r1, [pc, #48]	; (1acc4 <z_set_timeout_expiry+0x98>)
   1ac92:	480a      	ldr	r0, [pc, #40]	; (1acbc <z_set_timeout_expiry+0x90>)
   1ac94:	f001 f850 	bl	1bd38 <assert_print>
   1ac98:	4905      	ldr	r1, [pc, #20]	; (1acb0 <z_set_timeout_expiry+0x84>)
   1ac9a:	480b      	ldr	r0, [pc, #44]	; (1acc8 <z_set_timeout_expiry+0x9c>)
   1ac9c:	f001 f84c 	bl	1bd38 <assert_print>
   1aca0:	21c2      	movs	r1, #194	; 0xc2
   1aca2:	e7dd      	b.n	1ac60 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   1aca4:	f386 8811 	msr	BASEPRI, r6
   1aca8:	f3bf 8f6f 	isb	sy
		}
	}
}
   1acac:	bd70      	pop	{r4, r5, r6, pc}
   1acae:	bf00      	nop
   1acb0:	20009b98 	.word	0x20009b98
   1acb4:	000209d8 	.word	0x000209d8
   1acb8:	00020a31 	.word	0x00020a31
   1acbc:	000205a4 	.word	0x000205a4
   1acc0:	00020a46 	.word	0x00020a46
   1acc4:	00020a05 	.word	0x00020a05
   1acc8:	00020a1c 	.word	0x00020a1c

0001accc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1acd0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1acd2:	f7fe ff7d 	bl	19bd0 <z_time_slice>
	__asm__ volatile(
   1acd6:	f04f 0320 	mov.w	r3, #32
   1acda:	f3ef 8711 	mrs	r7, BASEPRI
   1acde:	f383 8812 	msr	BASEPRI_MAX, r3
   1ace2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ace6:	483f      	ldr	r0, [pc, #252]	; (1ade4 <sys_clock_announce+0x118>)
   1ace8:	f7fd fa64 	bl	181b4 <z_spin_lock_valid>
   1acec:	b968      	cbnz	r0, 1ad0a <sys_clock_announce+0x3e>
   1acee:	2394      	movs	r3, #148	; 0x94
   1acf0:	4a3d      	ldr	r2, [pc, #244]	; (1ade8 <sys_clock_announce+0x11c>)
   1acf2:	493e      	ldr	r1, [pc, #248]	; (1adec <sys_clock_announce+0x120>)
   1acf4:	483e      	ldr	r0, [pc, #248]	; (1adf0 <sys_clock_announce+0x124>)
   1acf6:	f001 f81f 	bl	1bd38 <assert_print>
   1acfa:	493a      	ldr	r1, [pc, #232]	; (1ade4 <sys_clock_announce+0x118>)
   1acfc:	483d      	ldr	r0, [pc, #244]	; (1adf4 <sys_clock_announce+0x128>)
   1acfe:	f001 f81b 	bl	1bd38 <assert_print>
   1ad02:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad04:	4838      	ldr	r0, [pc, #224]	; (1ade8 <sys_clock_announce+0x11c>)
   1ad06:	f001 f810 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad0a:	4836      	ldr	r0, [pc, #216]	; (1ade4 <sys_clock_announce+0x118>)
   1ad0c:	f7fd fa6e 	bl	181ec <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1ad10:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1adf8 <sys_clock_announce+0x12c>
	return list->head == list;
   1ad14:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1adfc <sys_clock_announce+0x130>
   1ad18:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1ad1c:	4a38      	ldr	r2, [pc, #224]	; (1ae00 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad1e:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   1ad20:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   1ad24:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   1ad28:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad2c:	d00b      	beq.n	1ad46 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ad2e:	b155      	cbz	r5, 1ad46 <sys_clock_announce+0x7a>
   1ad30:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   1ad34:	42b4      	cmp	r4, r6
   1ad36:	eb71 0e00 	sbcs.w	lr, r1, r0
   1ad3a:	da1c      	bge.n	1ad76 <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1ad3c:	1b36      	subs	r6, r6, r4
   1ad3e:	eb60 0001 	sbc.w	r0, r0, r1
   1ad42:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   1ad46:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   1ad48:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   1ad4c:	eb4c 0101 	adc.w	r1, ip, r1
   1ad50:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1ad54:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   1ad58:	f7ff fdcc 	bl	1a8f4 <next_timeout>
   1ad5c:	4621      	mov	r1, r4
   1ad5e:	f7fa fbb7 	bl	154d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad62:	4820      	ldr	r0, [pc, #128]	; (1ade4 <sys_clock_announce+0x118>)
   1ad64:	f7fd fa34 	bl	181d0 <z_spin_unlock_valid>
   1ad68:	b1a8      	cbz	r0, 1ad96 <sys_clock_announce+0xca>
	__asm__ volatile(
   1ad6a:	f387 8811 	msr	BASEPRI, r7
   1ad6e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ad72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1ad76:	18f3      	adds	r3, r6, r3
   1ad78:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   1ad7c:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1ad80:	2200      	movs	r2, #0
   1ad82:	2300      	movs	r3, #0
		remove_timeout(t);
   1ad84:	4628      	mov	r0, r5
		t->dticks = 0;
   1ad86:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   1ad8a:	f7ff fddb 	bl	1a944 <remove_timeout>
   1ad8e:	4815      	ldr	r0, [pc, #84]	; (1ade4 <sys_clock_announce+0x118>)
   1ad90:	f7fd fa1e 	bl	181d0 <z_spin_unlock_valid>
   1ad94:	b958      	cbnz	r0, 1adae <sys_clock_announce+0xe2>
   1ad96:	23c2      	movs	r3, #194	; 0xc2
   1ad98:	4a13      	ldr	r2, [pc, #76]	; (1ade8 <sys_clock_announce+0x11c>)
   1ad9a:	491a      	ldr	r1, [pc, #104]	; (1ae04 <sys_clock_announce+0x138>)
   1ad9c:	4814      	ldr	r0, [pc, #80]	; (1adf0 <sys_clock_announce+0x124>)
   1ad9e:	f000 ffcb 	bl	1bd38 <assert_print>
   1ada2:	4910      	ldr	r1, [pc, #64]	; (1ade4 <sys_clock_announce+0x118>)
   1ada4:	4818      	ldr	r0, [pc, #96]	; (1ae08 <sys_clock_announce+0x13c>)
   1ada6:	f000 ffc7 	bl	1bd38 <assert_print>
   1adaa:	21c2      	movs	r1, #194	; 0xc2
   1adac:	e7aa      	b.n	1ad04 <sys_clock_announce+0x38>
   1adae:	f387 8811 	msr	BASEPRI, r7
   1adb2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1adb6:	4628      	mov	r0, r5
   1adb8:	68ab      	ldr	r3, [r5, #8]
   1adba:	4798      	blx	r3
	__asm__ volatile(
   1adbc:	f04f 0320 	mov.w	r3, #32
   1adc0:	f3ef 8711 	mrs	r7, BASEPRI
   1adc4:	f383 8812 	msr	BASEPRI_MAX, r3
   1adc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1adcc:	4805      	ldr	r0, [pc, #20]	; (1ade4 <sys_clock_announce+0x118>)
   1adce:	f7fd f9f1 	bl	181b4 <z_spin_lock_valid>
   1add2:	2800      	cmp	r0, #0
   1add4:	d08b      	beq.n	1acee <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   1add6:	4803      	ldr	r0, [pc, #12]	; (1ade4 <sys_clock_announce+0x118>)
   1add8:	f7fd fa08 	bl	181ec <z_spin_lock_set_owner>
		announce_remaining -= dt;
   1addc:	f8d8 4000 	ldr.w	r4, [r8]
   1ade0:	1ba4      	subs	r4, r4, r6
   1ade2:	e799      	b.n	1ad18 <sys_clock_announce+0x4c>
   1ade4:	20009b98 	.word	0x20009b98
   1ade8:	000209d8 	.word	0x000209d8
   1adec:	00020a31 	.word	0x00020a31
   1adf0:	000205a4 	.word	0x000205a4
   1adf4:	00020a46 	.word	0x00020a46
   1adf8:	20009b94 	.word	0x20009b94
   1adfc:	20008374 	.word	0x20008374
   1ae00:	20009668 	.word	0x20009668
   1ae04:	00020a05 	.word	0x00020a05
   1ae08:	00020a1c 	.word	0x00020a1c

0001ae0c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1ae0c:	b570      	push	{r4, r5, r6, lr}
   1ae0e:	f04f 0320 	mov.w	r3, #32
   1ae12:	f3ef 8611 	mrs	r6, BASEPRI
   1ae16:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae1e:	481a      	ldr	r0, [pc, #104]	; (1ae88 <sys_clock_tick_get+0x7c>)
   1ae20:	f7fd f9c8 	bl	181b4 <z_spin_lock_valid>
   1ae24:	b968      	cbnz	r0, 1ae42 <sys_clock_tick_get+0x36>
   1ae26:	2394      	movs	r3, #148	; 0x94
   1ae28:	4a18      	ldr	r2, [pc, #96]	; (1ae8c <sys_clock_tick_get+0x80>)
   1ae2a:	4919      	ldr	r1, [pc, #100]	; (1ae90 <sys_clock_tick_get+0x84>)
   1ae2c:	4819      	ldr	r0, [pc, #100]	; (1ae94 <sys_clock_tick_get+0x88>)
   1ae2e:	f000 ff83 	bl	1bd38 <assert_print>
   1ae32:	4915      	ldr	r1, [pc, #84]	; (1ae88 <sys_clock_tick_get+0x7c>)
   1ae34:	4818      	ldr	r0, [pc, #96]	; (1ae98 <sys_clock_tick_get+0x8c>)
   1ae36:	f000 ff7f 	bl	1bd38 <assert_print>
   1ae3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae3c:	4813      	ldr	r0, [pc, #76]	; (1ae8c <sys_clock_tick_get+0x80>)
   1ae3e:	f000 ff74 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1ae42:	4811      	ldr	r0, [pc, #68]	; (1ae88 <sys_clock_tick_get+0x7c>)
   1ae44:	f7fd f9d2 	bl	181ec <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1ae48:	f7ff fd4a 	bl	1a8e0 <elapsed>
   1ae4c:	4a13      	ldr	r2, [pc, #76]	; (1ae9c <sys_clock_tick_get+0x90>)
   1ae4e:	e9d2 4500 	ldrd	r4, r5, [r2]
   1ae52:	1904      	adds	r4, r0, r4
   1ae54:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae58:	480b      	ldr	r0, [pc, #44]	; (1ae88 <sys_clock_tick_get+0x7c>)
   1ae5a:	f7fd f9b9 	bl	181d0 <z_spin_unlock_valid>
   1ae5e:	b958      	cbnz	r0, 1ae78 <sys_clock_tick_get+0x6c>
   1ae60:	23c2      	movs	r3, #194	; 0xc2
   1ae62:	4a0a      	ldr	r2, [pc, #40]	; (1ae8c <sys_clock_tick_get+0x80>)
   1ae64:	490e      	ldr	r1, [pc, #56]	; (1aea0 <sys_clock_tick_get+0x94>)
   1ae66:	480b      	ldr	r0, [pc, #44]	; (1ae94 <sys_clock_tick_get+0x88>)
   1ae68:	f000 ff66 	bl	1bd38 <assert_print>
   1ae6c:	4906      	ldr	r1, [pc, #24]	; (1ae88 <sys_clock_tick_get+0x7c>)
   1ae6e:	480d      	ldr	r0, [pc, #52]	; (1aea4 <sys_clock_tick_get+0x98>)
   1ae70:	f000 ff62 	bl	1bd38 <assert_print>
   1ae74:	21c2      	movs	r1, #194	; 0xc2
   1ae76:	e7e1      	b.n	1ae3c <sys_clock_tick_get+0x30>
	__asm__ volatile(
   1ae78:	f386 8811 	msr	BASEPRI, r6
   1ae7c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1ae80:	4620      	mov	r0, r4
   1ae82:	4629      	mov	r1, r5
   1ae84:	bd70      	pop	{r4, r5, r6, pc}
   1ae86:	bf00      	nop
   1ae88:	20009b98 	.word	0x20009b98
   1ae8c:	000209d8 	.word	0x000209d8
   1ae90:	00020a31 	.word	0x00020a31
   1ae94:	000205a4 	.word	0x000205a4
   1ae98:	00020a46 	.word	0x00020a46
   1ae9c:	20009668 	.word	0x20009668
   1aea0:	00020a05 	.word	0x00020a05
   1aea4:	00020a1c 	.word	0x00020a1c

0001aea8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1aea8:	b570      	push	{r4, r5, r6, lr}
   1aeaa:	4604      	mov	r4, r0
	__asm__ volatile(
   1aeac:	f04f 0320 	mov.w	r3, #32
   1aeb0:	f3ef 8511 	mrs	r5, BASEPRI
   1aeb4:	f383 8812 	msr	BASEPRI_MAX, r3
   1aeb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aebc:	4849      	ldr	r0, [pc, #292]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1aebe:	f7fd f979 	bl	181b4 <z_spin_lock_valid>
   1aec2:	b968      	cbnz	r0, 1aee0 <z_timer_expiration_handler+0x38>
   1aec4:	2394      	movs	r3, #148	; 0x94
   1aec6:	4a48      	ldr	r2, [pc, #288]	; (1afe8 <z_timer_expiration_handler+0x140>)
   1aec8:	4948      	ldr	r1, [pc, #288]	; (1afec <z_timer_expiration_handler+0x144>)
   1aeca:	4849      	ldr	r0, [pc, #292]	; (1aff0 <z_timer_expiration_handler+0x148>)
   1aecc:	f000 ff34 	bl	1bd38 <assert_print>
   1aed0:	4944      	ldr	r1, [pc, #272]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1aed2:	4848      	ldr	r0, [pc, #288]	; (1aff4 <z_timer_expiration_handler+0x14c>)
   1aed4:	f000 ff30 	bl	1bd38 <assert_print>
   1aed8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aeda:	4843      	ldr	r0, [pc, #268]	; (1afe8 <z_timer_expiration_handler+0x140>)
   1aedc:	f000 ff25 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1aee0:	4840      	ldr	r0, [pc, #256]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1aee2:	f7fd f983 	bl	181ec <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1aee6:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1aeea:	3301      	adds	r3, #1
   1aeec:	f142 0200 	adc.w	r2, r2, #0
   1aef0:	2b02      	cmp	r3, #2
   1aef2:	f172 0200 	sbcs.w	r2, r2, #0
   1aef6:	d322      	bcc.n	1af3e <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   1aef8:	f004 f9a2 	bl	1f240 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1aefc:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1af00:	3001      	adds	r0, #1
   1af02:	f141 0100 	adc.w	r1, r1, #0
   1af06:	18c0      	adds	r0, r0, r3
   1af08:	eb41 0102 	adc.w	r1, r1, r2
   1af0c:	2801      	cmp	r0, #1
   1af0e:	f171 0100 	sbcs.w	r1, r1, #0
   1af12:	db29      	blt.n	1af68 <z_timer_expiration_handler+0xc0>
   1af14:	f004 f994 	bl	1f240 <z_impl_k_uptime_ticks>
   1af18:	3001      	adds	r0, #1
   1af1a:	f141 0300 	adc.w	r3, r1, #0
   1af1e:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   1af22:	1880      	adds	r0, r0, r2
   1af24:	f06f 0201 	mvn.w	r2, #1
   1af28:	eb43 0301 	adc.w	r3, r3, r1
   1af2c:	f04f 31ff 	mov.w	r1, #4294967295
   1af30:	1a12      	subs	r2, r2, r0
   1af32:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1af36:	4620      	mov	r0, r4
   1af38:	492f      	ldr	r1, [pc, #188]	; (1aff8 <z_timer_expiration_handler+0x150>)
   1af3a:	f7ff fd1f 	bl	1a97c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1af3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1af40:	3301      	adds	r3, #1
   1af42:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1af44:	6a23      	ldr	r3, [r4, #32]
   1af46:	b35b      	cbz	r3, 1afa0 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af48:	4826      	ldr	r0, [pc, #152]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1af4a:	f7fd f941 	bl	181d0 <z_spin_unlock_valid>
   1af4e:	b980      	cbnz	r0, 1af72 <z_timer_expiration_handler+0xca>
   1af50:	23c2      	movs	r3, #194	; 0xc2
   1af52:	4a25      	ldr	r2, [pc, #148]	; (1afe8 <z_timer_expiration_handler+0x140>)
   1af54:	4929      	ldr	r1, [pc, #164]	; (1affc <z_timer_expiration_handler+0x154>)
   1af56:	4826      	ldr	r0, [pc, #152]	; (1aff0 <z_timer_expiration_handler+0x148>)
   1af58:	f000 feee 	bl	1bd38 <assert_print>
   1af5c:	4921      	ldr	r1, [pc, #132]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1af5e:	4828      	ldr	r0, [pc, #160]	; (1b000 <z_timer_expiration_handler+0x158>)
   1af60:	f000 feea 	bl	1bd38 <assert_print>
   1af64:	21c2      	movs	r1, #194	; 0xc2
   1af66:	e7b8      	b.n	1aeda <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1af68:	f06f 0201 	mvn.w	r2, #1
   1af6c:	f04f 33ff 	mov.w	r3, #4294967295
   1af70:	e7e1      	b.n	1af36 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   1af72:	f385 8811 	msr	BASEPRI, r5
   1af76:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1af7a:	4620      	mov	r0, r4
   1af7c:	6a23      	ldr	r3, [r4, #32]
   1af7e:	4798      	blx	r3
	__asm__ volatile(
   1af80:	f04f 0320 	mov.w	r3, #32
   1af84:	f3ef 8511 	mrs	r5, BASEPRI
   1af88:	f383 8812 	msr	BASEPRI_MAX, r3
   1af8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1af90:	4814      	ldr	r0, [pc, #80]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1af92:	f7fd f90f 	bl	181b4 <z_spin_lock_valid>
   1af96:	2800      	cmp	r0, #0
   1af98:	d094      	beq.n	1aec4 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   1af9a:	4812      	ldr	r0, [pc, #72]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1af9c:	f7fd f926 	bl	181ec <z_spin_lock_set_owner>
	return list->head == list;
   1afa0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afa4:	42a6      	cmp	r6, r4
   1afa6:	d000      	beq.n	1afaa <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1afa8:	b94e      	cbnz	r6, 1afbe <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1afaa:	480e      	ldr	r0, [pc, #56]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1afac:	f7fd f910 	bl	181d0 <z_spin_unlock_valid>
   1afb0:	2800      	cmp	r0, #0
   1afb2:	d0cd      	beq.n	1af50 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   1afb4:	f385 8811 	msr	BASEPRI, r5
   1afb8:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1afbc:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   1afbe:	4630      	mov	r0, r6
   1afc0:	f7fe fbda 	bl	19778 <z_unpend_thread_no_timeout>
   1afc4:	2300      	movs	r3, #0
   1afc6:	4807      	ldr	r0, [pc, #28]	; (1afe4 <z_timer_expiration_handler+0x13c>)
   1afc8:	67f3      	str	r3, [r6, #124]	; 0x7c
   1afca:	f7fd f901 	bl	181d0 <z_spin_unlock_valid>
   1afce:	2800      	cmp	r0, #0
   1afd0:	d0be      	beq.n	1af50 <z_timer_expiration_handler+0xa8>
   1afd2:	f385 8811 	msr	BASEPRI, r5
   1afd6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1afda:	4630      	mov	r0, r6
}
   1afdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1afe0:	f7fe bb84 	b.w	196ec <z_ready_thread>
   1afe4:	20009b9c 	.word	0x20009b9c
   1afe8:	000209d8 	.word	0x000209d8
   1afec:	00020a31 	.word	0x00020a31
   1aff0:	000205a4 	.word	0x000205a4
   1aff4:	00020a46 	.word	0x00020a46
   1aff8:	0001aea9 	.word	0x0001aea9
   1affc:	00020a05 	.word	0x00020a05
   1b000:	00020a1c 	.word	0x00020a1c

0001b004 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b004:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b008:	bf08      	it	eq
   1b00a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1b00e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b012:	4619      	mov	r1, r3
   1b014:	4605      	mov	r5, r0
   1b016:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   1b01a:	4614      	mov	r4, r2
   1b01c:	4691      	mov	r9, r2
   1b01e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b020:	d037      	beq.n	1b092 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1b022:	f1b0 3fff 	cmp.w	r0, #4294967295
   1b026:	bf08      	it	eq
   1b028:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b02c:	4637      	mov	r7, r6
   1b02e:	4682      	mov	sl, r0
   1b030:	d011      	beq.n	1b056 <z_impl_k_timer_start+0x52>
   1b032:	ea50 0306 	orrs.w	r3, r0, r6
   1b036:	d00e      	beq.n	1b056 <z_impl_k_timer_start+0x52>
   1b038:	1c72      	adds	r2, r6, #1
   1b03a:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   1b03e:	db0a      	blt.n	1b056 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   1b040:	2e02      	cmp	r6, #2
   1b042:	4684      	mov	ip, r0
   1b044:	f170 0000 	sbcs.w	r0, r0, #0
   1b048:	bfbc      	itt	lt
   1b04a:	2702      	movlt	r7, #2
   1b04c:	f04f 0c00 	movlt.w	ip, #0
   1b050:	3f01      	subs	r7, #1
   1b052:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1b056:	1c63      	adds	r3, r4, #1
   1b058:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1b05c:	db0a      	blt.n	1b074 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1b05e:	2c01      	cmp	r4, #1
   1b060:	f171 0300 	sbcs.w	r3, r1, #0
   1b064:	4622      	mov	r2, r4
   1b066:	bfbc      	itt	lt
   1b068:	2201      	movlt	r2, #1
   1b06a:	2100      	movlt	r1, #0
   1b06c:	f112 39ff 	adds.w	r9, r2, #4294967295
   1b070:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1b074:	4628      	mov	r0, r5
   1b076:	f7ff fd47 	bl	1ab08 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1b07a:	2300      	movs	r3, #0
	timer->period = period;
   1b07c:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   1b080:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b082:	464a      	mov	r2, r9
   1b084:	4643      	mov	r3, r8
   1b086:	4628      	mov	r0, r5
		     duration);
}
   1b088:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b08c:	4902      	ldr	r1, [pc, #8]	; (1b098 <z_impl_k_timer_start+0x94>)
   1b08e:	f7ff bc75 	b.w	1a97c <z_add_timeout>
}
   1b092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b096:	bf00      	nop
   1b098:	0001aea9 	.word	0x0001aea9

0001b09c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1b09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1b0a0:	2600      	movs	r6, #0
{
   1b0a2:	4688      	mov	r8, r1
   1b0a4:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   1b0a6:	4604      	mov	r4, r0
	int events_registered = 0;
   1b0a8:	4637      	mov	r7, r6
	event->poller = NULL;
   1b0aa:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b0ac:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 1b26c <register_events+0x1d0>
{
   1b0b0:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1b0b2:	4546      	cmp	r6, r8
   1b0b4:	db03      	blt.n	1b0be <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1b0b6:	4638      	mov	r0, r7
   1b0b8:	b003      	add	sp, #12
   1b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1b0be:	f04f 0320 	mov.w	r3, #32
   1b0c2:	f3ef 8b11 	mrs	fp, BASEPRI
   1b0c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0ca:	f3bf 8f6f 	isb	sy
   1b0ce:	4648      	mov	r0, r9
   1b0d0:	f7fd f870 	bl	181b4 <z_spin_lock_valid>
   1b0d4:	b960      	cbnz	r0, 1b0f0 <register_events+0x54>
   1b0d6:	2394      	movs	r3, #148	; 0x94
   1b0d8:	4a65      	ldr	r2, [pc, #404]	; (1b270 <register_events+0x1d4>)
   1b0da:	4966      	ldr	r1, [pc, #408]	; (1b274 <register_events+0x1d8>)
   1b0dc:	4866      	ldr	r0, [pc, #408]	; (1b278 <register_events+0x1dc>)
   1b0de:	f000 fe2b 	bl	1bd38 <assert_print>
   1b0e2:	4962      	ldr	r1, [pc, #392]	; (1b26c <register_events+0x1d0>)
   1b0e4:	4865      	ldr	r0, [pc, #404]	; (1b27c <register_events+0x1e0>)
   1b0e6:	f000 fe27 	bl	1bd38 <assert_print>
   1b0ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b0ec:	4860      	ldr	r0, [pc, #384]	; (1b270 <register_events+0x1d4>)
   1b0ee:	e060      	b.n	1b1b2 <register_events+0x116>
	z_spin_lock_set_owner(l);
   1b0f0:	4648      	mov	r0, r9
   1b0f2:	f7fd f87b 	bl	181ec <z_spin_lock_set_owner>
	switch (event->type) {
   1b0f6:	7b63      	ldrb	r3, [r4, #13]
   1b0f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b0fc:	2b08      	cmp	r3, #8
   1b0fe:	d84a      	bhi.n	1b196 <register_events+0xfa>
   1b100:	e8df f003 	tbb	[pc, r3]
   1b104:	49053d2b 	.word	0x49053d2b
   1b108:	49494927 	.word	0x49494927
   1b10c:	43          	.byte	0x43
   1b10d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1b10e:	6923      	ldr	r3, [r4, #16]
   1b110:	689b      	ldr	r3, [r3, #8]
   1b112:	b313      	cbz	r3, 1b15a <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1b114:	2302      	movs	r3, #2
	event->state |= state;
   1b116:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1b118:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   1b11c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1b120:	430b      	orrs	r3, r1
   1b122:	f363 3294 	bfi	r2, r3, #14, #7
   1b126:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1b128:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b12c:	4648      	mov	r0, r9
   1b12e:	f7fd f84f 	bl	181d0 <z_spin_unlock_valid>
   1b132:	3414      	adds	r4, #20
   1b134:	2800      	cmp	r0, #0
   1b136:	f040 8092 	bne.w	1b25e <register_events+0x1c2>
   1b13a:	23c2      	movs	r3, #194	; 0xc2
   1b13c:	4a4c      	ldr	r2, [pc, #304]	; (1b270 <register_events+0x1d4>)
   1b13e:	4950      	ldr	r1, [pc, #320]	; (1b280 <register_events+0x1e4>)
   1b140:	484d      	ldr	r0, [pc, #308]	; (1b278 <register_events+0x1dc>)
   1b142:	f000 fdf9 	bl	1bd38 <assert_print>
   1b146:	4949      	ldr	r1, [pc, #292]	; (1b26c <register_events+0x1d0>)
   1b148:	484e      	ldr	r0, [pc, #312]	; (1b284 <register_events+0x1e8>)
   1b14a:	f000 fdf5 	bl	1bd38 <assert_print>
   1b14e:	21c2      	movs	r1, #194	; 0xc2
   1b150:	e7cc      	b.n	1b0ec <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   1b152:	6923      	ldr	r3, [r4, #16]
   1b154:	681b      	ldr	r3, [r3, #0]
   1b156:	2b00      	cmp	r3, #0
   1b158:	d12d      	bne.n	1b1b6 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   1b15a:	9b01      	ldr	r3, [sp, #4]
   1b15c:	2b00      	cmp	r3, #0
   1b15e:	d1e5      	bne.n	1b12c <register_events+0x90>
   1b160:	782b      	ldrb	r3, [r5, #0]
   1b162:	2b00      	cmp	r3, #0
   1b164:	d0e2      	beq.n	1b12c <register_events+0x90>
	switch (event->type) {
   1b166:	7b63      	ldrb	r3, [r4, #13]
   1b168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b16c:	2b08      	cmp	r3, #8
   1b16e:	d86b      	bhi.n	1b248 <register_events+0x1ac>
   1b170:	e8df f003 	tbb	[pc, r3]
   1b174:	6a234935 	.word	0x6a234935
   1b178:	6a6a6a38 	.word	0x6a6a6a38
   1b17c:	59          	.byte	0x59
   1b17d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1b17e:	6923      	ldr	r3, [r4, #16]
   1b180:	689b      	ldr	r3, [r3, #8]
   1b182:	2b00      	cmp	r3, #0
   1b184:	d0e9      	beq.n	1b15a <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   1b186:	2301      	movs	r3, #1
   1b188:	e7c5      	b.n	1b116 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   1b18a:	6923      	ldr	r3, [r4, #16]
   1b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b18e:	2b00      	cmp	r3, #0
   1b190:	d0e3      	beq.n	1b15a <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1b192:	2310      	movs	r3, #16
   1b194:	e7bf      	b.n	1b116 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1b196:	2363      	movs	r3, #99	; 0x63
   1b198:	4a3b      	ldr	r2, [pc, #236]	; (1b288 <register_events+0x1ec>)
   1b19a:	493c      	ldr	r1, [pc, #240]	; (1b28c <register_events+0x1f0>)
   1b19c:	4836      	ldr	r0, [pc, #216]	; (1b278 <register_events+0x1dc>)
   1b19e:	f000 fdcb 	bl	1bd38 <assert_print>
   1b1a2:	7b61      	ldrb	r1, [r4, #13]
   1b1a4:	483a      	ldr	r0, [pc, #232]	; (1b290 <register_events+0x1f4>)
   1b1a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1b1aa:	f000 fdc5 	bl	1bd38 <assert_print>
   1b1ae:	2163      	movs	r1, #99	; 0x63
   1b1b0:	4835      	ldr	r0, [pc, #212]	; (1b288 <register_events+0x1ec>)
   1b1b2:	f000 fdba 	bl	1bd2a <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1b1b6:	2304      	movs	r3, #4
   1b1b8:	e7ad      	b.n	1b116 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1b1ba:	6920      	ldr	r0, [r4, #16]
   1b1bc:	b950      	cbnz	r0, 1b1d4 <register_events+0x138>
   1b1be:	4935      	ldr	r1, [pc, #212]	; (1b294 <register_events+0x1f8>)
   1b1c0:	238d      	movs	r3, #141	; 0x8d
   1b1c2:	4a31      	ldr	r2, [pc, #196]	; (1b288 <register_events+0x1ec>)
   1b1c4:	482c      	ldr	r0, [pc, #176]	; (1b278 <register_events+0x1dc>)
   1b1c6:	f000 fdb7 	bl	1bd38 <assert_print>
   1b1ca:	4833      	ldr	r0, [pc, #204]	; (1b298 <register_events+0x1fc>)
   1b1cc:	f000 fdb4 	bl	1bd38 <assert_print>
   1b1d0:	218d      	movs	r1, #141	; 0x8d
   1b1d2:	e7ed      	b.n	1b1b0 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   1b1d4:	462a      	mov	r2, r5
   1b1d6:	4621      	mov	r1, r4
   1b1d8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1b1da:	f004 f882 	bl	1f2e2 <add_event>
	event->poller = poller;
   1b1de:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   1b1e0:	3701      	adds	r7, #1
   1b1e2:	e7a3      	b.n	1b12c <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1b1e4:	6920      	ldr	r0, [r4, #16]
   1b1e6:	b950      	cbnz	r0, 1b1fe <register_events+0x162>
   1b1e8:	492c      	ldr	r1, [pc, #176]	; (1b29c <register_events+0x200>)
   1b1ea:	2391      	movs	r3, #145	; 0x91
   1b1ec:	4a26      	ldr	r2, [pc, #152]	; (1b288 <register_events+0x1ec>)
   1b1ee:	4822      	ldr	r0, [pc, #136]	; (1b278 <register_events+0x1dc>)
   1b1f0:	f000 fda2 	bl	1bd38 <assert_print>
   1b1f4:	482a      	ldr	r0, [pc, #168]	; (1b2a0 <register_events+0x204>)
   1b1f6:	f000 fd9f 	bl	1bd38 <assert_print>
   1b1fa:	2191      	movs	r1, #145	; 0x91
   1b1fc:	e7d8      	b.n	1b1b0 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   1b1fe:	462a      	mov	r2, r5
   1b200:	4621      	mov	r1, r4
   1b202:	3014      	adds	r0, #20
   1b204:	e7e9      	b.n	1b1da <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1b206:	6920      	ldr	r0, [r4, #16]
   1b208:	b950      	cbnz	r0, 1b220 <register_events+0x184>
   1b20a:	4926      	ldr	r1, [pc, #152]	; (1b2a4 <register_events+0x208>)
   1b20c:	2395      	movs	r3, #149	; 0x95
   1b20e:	4a1e      	ldr	r2, [pc, #120]	; (1b288 <register_events+0x1ec>)
   1b210:	4819      	ldr	r0, [pc, #100]	; (1b278 <register_events+0x1dc>)
   1b212:	f000 fd91 	bl	1bd38 <assert_print>
   1b216:	4824      	ldr	r0, [pc, #144]	; (1b2a8 <register_events+0x20c>)
   1b218:	f000 fd8e 	bl	1bd38 <assert_print>
   1b21c:	2195      	movs	r1, #149	; 0x95
   1b21e:	e7c7      	b.n	1b1b0 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   1b220:	462a      	mov	r2, r5
   1b222:	4621      	mov	r1, r4
   1b224:	e7d9      	b.n	1b1da <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1b226:	6920      	ldr	r0, [r4, #16]
   1b228:	b950      	cbnz	r0, 1b240 <register_events+0x1a4>
   1b22a:	4920      	ldr	r1, [pc, #128]	; (1b2ac <register_events+0x210>)
   1b22c:	2399      	movs	r3, #153	; 0x99
   1b22e:	4a16      	ldr	r2, [pc, #88]	; (1b288 <register_events+0x1ec>)
   1b230:	4811      	ldr	r0, [pc, #68]	; (1b278 <register_events+0x1dc>)
   1b232:	f000 fd81 	bl	1bd38 <assert_print>
   1b236:	481e      	ldr	r0, [pc, #120]	; (1b2b0 <register_events+0x214>)
   1b238:	f000 fd7e 	bl	1bd38 <assert_print>
   1b23c:	2199      	movs	r1, #153	; 0x99
   1b23e:	e7b7      	b.n	1b1b0 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   1b240:	462a      	mov	r2, r5
   1b242:	4621      	mov	r1, r4
   1b244:	3028      	adds	r0, #40	; 0x28
   1b246:	e7c8      	b.n	1b1da <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   1b248:	4910      	ldr	r1, [pc, #64]	; (1b28c <register_events+0x1f0>)
   1b24a:	23a6      	movs	r3, #166	; 0xa6
   1b24c:	4a0e      	ldr	r2, [pc, #56]	; (1b288 <register_events+0x1ec>)
   1b24e:	480a      	ldr	r0, [pc, #40]	; (1b278 <register_events+0x1dc>)
   1b250:	f000 fd72 	bl	1bd38 <assert_print>
   1b254:	4817      	ldr	r0, [pc, #92]	; (1b2b4 <register_events+0x218>)
   1b256:	f000 fd6f 	bl	1bd38 <assert_print>
   1b25a:	21a6      	movs	r1, #166	; 0xa6
   1b25c:	e7a8      	b.n	1b1b0 <register_events+0x114>
	__asm__ volatile(
   1b25e:	f38b 8811 	msr	BASEPRI, fp
   1b262:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1b266:	3601      	adds	r6, #1
   1b268:	e723      	b.n	1b0b2 <register_events+0x16>
   1b26a:	bf00      	nop
   1b26c:	20009ba0 	.word	0x20009ba0
   1b270:	000209d8 	.word	0x000209d8
   1b274:	00020a31 	.word	0x00020a31
   1b278:	000205a4 	.word	0x000205a4
   1b27c:	00020a46 	.word	0x00020a46
   1b280:	00020a05 	.word	0x00020a05
   1b284:	00020a1c 	.word	0x00020a1c
   1b288:	000242e5 	.word	0x000242e5
   1b28c:	0002357e 	.word	0x0002357e
   1b290:	00024306 	.word	0x00024306
   1b294:	00024323 	.word	0x00024323
   1b298:	0002433d 	.word	0x0002433d
   1b29c:	00024352 	.word	0x00024352
   1b2a0:	0002436e 	.word	0x0002436e
   1b2a4:	0002437f 	.word	0x0002437f
   1b2a8:	0002439c 	.word	0x0002439c
   1b2ac:	000243b3 	.word	0x000243b3
   1b2b0:	000243ce 	.word	0x000243ce
   1b2b4:	000243e7 	.word	0x000243e7

0001b2b8 <clear_event_registrations>:
{
   1b2b8:	2314      	movs	r3, #20
   1b2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2be:	4615      	mov	r5, r2
	while (num_events--) {
   1b2c0:	460c      	mov	r4, r1
	event->poller = NULL;
   1b2c2:	2600      	movs	r6, #0
   1b2c4:	fb03 0001 	mla	r0, r3, r1, r0
   1b2c8:	4f4b      	ldr	r7, [pc, #300]	; (1b3f8 <clear_event_registrations+0x140>)
	while (num_events--) {
   1b2ca:	b90c      	cbnz	r4, 1b2d0 <clear_event_registrations+0x18>
}
   1b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   1b2d0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1b2d4:	f1a0 0814 	sub.w	r8, r0, #20
   1b2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   1b2dc:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   1b2e0:	2b08      	cmp	r3, #8
   1b2e2:	d842      	bhi.n	1b36a <clear_event_registrations+0xb2>
   1b2e4:	e8df f003 	tbb	[pc, r3]
   1b2e8:	41052555 	.word	0x41052555
   1b2ec:	41414116 	.word	0x41414116
   1b2f0:	33          	.byte	0x33
   1b2f1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1b2f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1b2f6:	2b00      	cmp	r3, #0
   1b2f8:	d142      	bne.n	1b380 <clear_event_registrations+0xc8>
   1b2fa:	4940      	ldr	r1, [pc, #256]	; (1b3fc <clear_event_registrations+0x144>)
   1b2fc:	23b6      	movs	r3, #182	; 0xb6
   1b2fe:	4a40      	ldr	r2, [pc, #256]	; (1b400 <clear_event_registrations+0x148>)
   1b300:	4840      	ldr	r0, [pc, #256]	; (1b404 <clear_event_registrations+0x14c>)
   1b302:	f000 fd19 	bl	1bd38 <assert_print>
   1b306:	4840      	ldr	r0, [pc, #256]	; (1b408 <clear_event_registrations+0x150>)
   1b308:	f000 fd16 	bl	1bd38 <assert_print>
   1b30c:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1b30e:	483c      	ldr	r0, [pc, #240]	; (1b400 <clear_event_registrations+0x148>)
   1b310:	f000 fd0b 	bl	1bd2a <assert_post_action>
   1b314:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1b318:	2b00      	cmp	r3, #0
   1b31a:	d131      	bne.n	1b380 <clear_event_registrations+0xc8>
   1b31c:	493b      	ldr	r1, [pc, #236]	; (1b40c <clear_event_registrations+0x154>)
   1b31e:	23ba      	movs	r3, #186	; 0xba
   1b320:	4a37      	ldr	r2, [pc, #220]	; (1b400 <clear_event_registrations+0x148>)
   1b322:	4838      	ldr	r0, [pc, #224]	; (1b404 <clear_event_registrations+0x14c>)
   1b324:	f000 fd08 	bl	1bd38 <assert_print>
   1b328:	4839      	ldr	r0, [pc, #228]	; (1b410 <clear_event_registrations+0x158>)
   1b32a:	f000 fd05 	bl	1bd38 <assert_print>
   1b32e:	21ba      	movs	r1, #186	; 0xba
   1b330:	e7ed      	b.n	1b30e <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1b332:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1b336:	bb1b      	cbnz	r3, 1b380 <clear_event_registrations+0xc8>
   1b338:	4936      	ldr	r1, [pc, #216]	; (1b414 <clear_event_registrations+0x15c>)
   1b33a:	23be      	movs	r3, #190	; 0xbe
   1b33c:	4a30      	ldr	r2, [pc, #192]	; (1b400 <clear_event_registrations+0x148>)
   1b33e:	4831      	ldr	r0, [pc, #196]	; (1b404 <clear_event_registrations+0x14c>)
   1b340:	f000 fcfa 	bl	1bd38 <assert_print>
   1b344:	4834      	ldr	r0, [pc, #208]	; (1b418 <clear_event_registrations+0x160>)
   1b346:	f000 fcf7 	bl	1bd38 <assert_print>
   1b34a:	21be      	movs	r1, #190	; 0xbe
   1b34c:	e7df      	b.n	1b30e <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1b34e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1b352:	b9ab      	cbnz	r3, 1b380 <clear_event_registrations+0xc8>
   1b354:	4931      	ldr	r1, [pc, #196]	; (1b41c <clear_event_registrations+0x164>)
   1b356:	23c2      	movs	r3, #194	; 0xc2
   1b358:	4a29      	ldr	r2, [pc, #164]	; (1b400 <clear_event_registrations+0x148>)
   1b35a:	482a      	ldr	r0, [pc, #168]	; (1b404 <clear_event_registrations+0x14c>)
   1b35c:	f000 fcec 	bl	1bd38 <assert_print>
   1b360:	482f      	ldr	r0, [pc, #188]	; (1b420 <clear_event_registrations+0x168>)
   1b362:	f000 fce9 	bl	1bd38 <assert_print>
   1b366:	21c2      	movs	r1, #194	; 0xc2
   1b368:	e7d1      	b.n	1b30e <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   1b36a:	492e      	ldr	r1, [pc, #184]	; (1b424 <clear_event_registrations+0x16c>)
   1b36c:	23cf      	movs	r3, #207	; 0xcf
   1b36e:	4a24      	ldr	r2, [pc, #144]	; (1b400 <clear_event_registrations+0x148>)
   1b370:	4824      	ldr	r0, [pc, #144]	; (1b404 <clear_event_registrations+0x14c>)
   1b372:	f000 fce1 	bl	1bd38 <assert_print>
   1b376:	482c      	ldr	r0, [pc, #176]	; (1b428 <clear_event_registrations+0x170>)
   1b378:	f000 fcde 	bl	1bd38 <assert_print>
   1b37c:	21cf      	movs	r1, #207	; 0xcf
   1b37e:	e7c6      	b.n	1b30e <clear_event_registrations+0x56>
	return node->next != NULL;
   1b380:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1b384:	b12b      	cbz	r3, 1b392 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   1b386:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   1b38a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b38c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   1b38e:	e940 6605 	strd	r6, r6, [r0, #-20]
   1b392:	4638      	mov	r0, r7
   1b394:	f7fc ff1c 	bl	181d0 <z_spin_unlock_valid>
   1b398:	b960      	cbnz	r0, 1b3b4 <clear_event_registrations+0xfc>
   1b39a:	23c2      	movs	r3, #194	; 0xc2
   1b39c:	4a23      	ldr	r2, [pc, #140]	; (1b42c <clear_event_registrations+0x174>)
   1b39e:	4924      	ldr	r1, [pc, #144]	; (1b430 <clear_event_registrations+0x178>)
   1b3a0:	4818      	ldr	r0, [pc, #96]	; (1b404 <clear_event_registrations+0x14c>)
   1b3a2:	f000 fcc9 	bl	1bd38 <assert_print>
   1b3a6:	4914      	ldr	r1, [pc, #80]	; (1b3f8 <clear_event_registrations+0x140>)
   1b3a8:	4822      	ldr	r0, [pc, #136]	; (1b434 <clear_event_registrations+0x17c>)
   1b3aa:	f000 fcc5 	bl	1bd38 <assert_print>
   1b3ae:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3b0:	481e      	ldr	r0, [pc, #120]	; (1b42c <clear_event_registrations+0x174>)
   1b3b2:	e7ad      	b.n	1b310 <clear_event_registrations+0x58>
   1b3b4:	f385 8811 	msr	BASEPRI, r5
   1b3b8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b3bc:	f04f 0320 	mov.w	r3, #32
   1b3c0:	f3ef 8511 	mrs	r5, BASEPRI
   1b3c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3c8:	f3bf 8f6f 	isb	sy
   1b3cc:	4638      	mov	r0, r7
   1b3ce:	f7fc fef1 	bl	181b4 <z_spin_lock_valid>
   1b3d2:	3c01      	subs	r4, #1
   1b3d4:	b958      	cbnz	r0, 1b3ee <clear_event_registrations+0x136>
   1b3d6:	2394      	movs	r3, #148	; 0x94
   1b3d8:	4a14      	ldr	r2, [pc, #80]	; (1b42c <clear_event_registrations+0x174>)
   1b3da:	4917      	ldr	r1, [pc, #92]	; (1b438 <clear_event_registrations+0x180>)
   1b3dc:	4809      	ldr	r0, [pc, #36]	; (1b404 <clear_event_registrations+0x14c>)
   1b3de:	f000 fcab 	bl	1bd38 <assert_print>
   1b3e2:	4905      	ldr	r1, [pc, #20]	; (1b3f8 <clear_event_registrations+0x140>)
   1b3e4:	4815      	ldr	r0, [pc, #84]	; (1b43c <clear_event_registrations+0x184>)
   1b3e6:	f000 fca7 	bl	1bd38 <assert_print>
   1b3ea:	2194      	movs	r1, #148	; 0x94
   1b3ec:	e7e0      	b.n	1b3b0 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   1b3ee:	4638      	mov	r0, r7
   1b3f0:	f7fc fefc 	bl	181ec <z_spin_lock_set_owner>
	return k;
   1b3f4:	4640      	mov	r0, r8
   1b3f6:	e768      	b.n	1b2ca <clear_event_registrations+0x12>
   1b3f8:	20009ba0 	.word	0x20009ba0
   1b3fc:	00024323 	.word	0x00024323
   1b400:	000242e5 	.word	0x000242e5
   1b404:	000205a4 	.word	0x000205a4
   1b408:	0002433d 	.word	0x0002433d
   1b40c:	00024352 	.word	0x00024352
   1b410:	0002436e 	.word	0x0002436e
   1b414:	0002437f 	.word	0x0002437f
   1b418:	0002439c 	.word	0x0002439c
   1b41c:	000243b3 	.word	0x000243b3
   1b420:	000243ce 	.word	0x000243ce
   1b424:	0002357e 	.word	0x0002357e
   1b428:	000243e7 	.word	0x000243e7
   1b42c:	000209d8 	.word	0x000209d8
   1b430:	00020a05 	.word	0x00020a05
   1b434:	00020a1c 	.word	0x00020a1c
   1b438:	00020a31 	.word	0x00020a31
   1b43c:	00020a46 	.word	0x00020a46

0001b440 <k_poll_event_init>:
{
   1b440:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1b442:	b162      	cbz	r2, 1b45e <k_poll_event_init+0x1e>
   1b444:	4917      	ldr	r1, [pc, #92]	; (1b4a4 <k_poll_event_init+0x64>)
   1b446:	232d      	movs	r3, #45	; 0x2d
   1b448:	4a17      	ldr	r2, [pc, #92]	; (1b4a8 <k_poll_event_init+0x68>)
   1b44a:	4818      	ldr	r0, [pc, #96]	; (1b4ac <k_poll_event_init+0x6c>)
   1b44c:	f000 fc74 	bl	1bd38 <assert_print>
   1b450:	4817      	ldr	r0, [pc, #92]	; (1b4b0 <k_poll_event_init+0x70>)
   1b452:	f000 fc71 	bl	1bd38 <assert_print>
   1b456:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1b458:	4813      	ldr	r0, [pc, #76]	; (1b4a8 <k_poll_event_init+0x68>)
   1b45a:	f000 fc66 	bl	1bd2a <assert_post_action>
   1b45e:	293f      	cmp	r1, #63	; 0x3f
   1b460:	d90a      	bls.n	1b478 <k_poll_event_init+0x38>
   1b462:	4914      	ldr	r1, [pc, #80]	; (1b4b4 <k_poll_event_init+0x74>)
   1b464:	232f      	movs	r3, #47	; 0x2f
   1b466:	4a10      	ldr	r2, [pc, #64]	; (1b4a8 <k_poll_event_init+0x68>)
   1b468:	4810      	ldr	r0, [pc, #64]	; (1b4ac <k_poll_event_init+0x6c>)
   1b46a:	f000 fc65 	bl	1bd38 <assert_print>
   1b46e:	4812      	ldr	r0, [pc, #72]	; (1b4b8 <k_poll_event_init+0x78>)
   1b470:	f000 fc62 	bl	1bd38 <assert_print>
   1b474:	212f      	movs	r1, #47	; 0x2f
   1b476:	e7ef      	b.n	1b458 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   1b478:	b953      	cbnz	r3, 1b490 <k_poll_event_init+0x50>
   1b47a:	4910      	ldr	r1, [pc, #64]	; (1b4bc <k_poll_event_init+0x7c>)
   1b47c:	2330      	movs	r3, #48	; 0x30
   1b47e:	4a0a      	ldr	r2, [pc, #40]	; (1b4a8 <k_poll_event_init+0x68>)
   1b480:	480a      	ldr	r0, [pc, #40]	; (1b4ac <k_poll_event_init+0x6c>)
   1b482:	f000 fc59 	bl	1bd38 <assert_print>
   1b486:	480e      	ldr	r0, [pc, #56]	; (1b4c0 <k_poll_event_init+0x80>)
   1b488:	f000 fc56 	bl	1bd38 <assert_print>
   1b48c:	2130      	movs	r1, #48	; 0x30
   1b48e:	e7e3      	b.n	1b458 <k_poll_event_init+0x18>
	event->poller = NULL;
   1b490:	6082      	str	r2, [r0, #8]
	event->type = type;
   1b492:	0209      	lsls	r1, r1, #8
   1b494:	7b02      	ldrb	r2, [r0, #12]
   1b496:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1b49a:	4311      	orrs	r1, r2
	event->obj = obj;
   1b49c:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   1b4a0:	bd08      	pop	{r3, pc}
   1b4a2:	bf00      	nop
   1b4a4:	000243fd 	.word	0x000243fd
   1b4a8:	000242e5 	.word	0x000242e5
   1b4ac:	000205a4 	.word	0x000205a4
   1b4b0:	0002441d 	.word	0x0002441d
   1b4b4:	00024443 	.word	0x00024443
   1b4b8:	00024467 	.word	0x00024467
   1b4bc:	00024477 	.word	0x00024477
   1b4c0:	0002448a 	.word	0x0002448a

0001b4c4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1b4c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4c8:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1b4ca:	4b5c      	ldr	r3, [pc, #368]	; (1b63c <z_impl_k_poll+0x178>)
{
   1b4cc:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   1b4ce:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   1b4d2:	2301      	movs	r3, #1
{
   1b4d4:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   1b4d6:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   1b4da:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   1b4de:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   1b4e2:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   1b4e6:	f1bb 0f00 	cmp.w	fp, #0
   1b4ea:	d00e      	beq.n	1b50a <z_impl_k_poll+0x46>
   1b4ec:	4954      	ldr	r1, [pc, #336]	; (1b640 <z_impl_k_poll+0x17c>)
   1b4ee:	f240 132d 	movw	r3, #301	; 0x12d
   1b4f2:	4a54      	ldr	r2, [pc, #336]	; (1b644 <z_impl_k_poll+0x180>)
   1b4f4:	4854      	ldr	r0, [pc, #336]	; (1b648 <z_impl_k_poll+0x184>)
   1b4f6:	f000 fc1f 	bl	1bd38 <assert_print>
   1b4fa:	4854      	ldr	r0, [pc, #336]	; (1b64c <z_impl_k_poll+0x188>)
   1b4fc:	f000 fc1c 	bl	1bd38 <assert_print>
   1b500:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   1b504:	484f      	ldr	r0, [pc, #316]	; (1b644 <z_impl_k_poll+0x180>)
   1b506:	f000 fc10 	bl	1bd2a <assert_post_action>
   1b50a:	b960      	cbnz	r0, 1b526 <z_impl_k_poll+0x62>
   1b50c:	4950      	ldr	r1, [pc, #320]	; (1b650 <z_impl_k_poll+0x18c>)
   1b50e:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1b512:	4a4c      	ldr	r2, [pc, #304]	; (1b644 <z_impl_k_poll+0x180>)
   1b514:	484c      	ldr	r0, [pc, #304]	; (1b648 <z_impl_k_poll+0x184>)
   1b516:	f000 fc0f 	bl	1bd38 <assert_print>
   1b51a:	484e      	ldr	r0, [pc, #312]	; (1b654 <z_impl_k_poll+0x190>)
   1b51c:	f000 fc0c 	bl	1bd38 <assert_print>
   1b520:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1b524:	e7ee      	b.n	1b504 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   1b526:	2900      	cmp	r1, #0
   1b528:	da0c      	bge.n	1b544 <z_impl_k_poll+0x80>
   1b52a:	494b      	ldr	r1, [pc, #300]	; (1b658 <z_impl_k_poll+0x194>)
   1b52c:	f240 132f 	movw	r3, #303	; 0x12f
   1b530:	4a44      	ldr	r2, [pc, #272]	; (1b644 <z_impl_k_poll+0x180>)
   1b532:	4845      	ldr	r0, [pc, #276]	; (1b648 <z_impl_k_poll+0x184>)
   1b534:	f000 fc00 	bl	1bd38 <assert_print>
   1b538:	4848      	ldr	r0, [pc, #288]	; (1b65c <z_impl_k_poll+0x198>)
   1b53a:	f000 fbfd 	bl	1bd38 <assert_print>
   1b53e:	f240 112f 	movw	r1, #303	; 0x12f
   1b542:	e7df      	b.n	1b504 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1b544:	ea57 0306 	orrs.w	r3, r7, r6
   1b548:	bf0c      	ite	eq
   1b54a:	2301      	moveq	r3, #1
   1b54c:	2300      	movne	r3, #0
   1b54e:	f7ff fda5 	bl	1b09c <register_events>
   1b552:	4681      	mov	r9, r0
   1b554:	f04f 0320 	mov.w	r3, #32
   1b558:	f3ef 8a11 	mrs	sl, BASEPRI
   1b55c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b560:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b564:	483e      	ldr	r0, [pc, #248]	; (1b660 <z_impl_k_poll+0x19c>)
   1b566:	f7fc fe25 	bl	181b4 <z_spin_lock_valid>
   1b56a:	b960      	cbnz	r0, 1b586 <z_impl_k_poll+0xc2>
   1b56c:	2394      	movs	r3, #148	; 0x94
   1b56e:	4a3d      	ldr	r2, [pc, #244]	; (1b664 <z_impl_k_poll+0x1a0>)
   1b570:	493d      	ldr	r1, [pc, #244]	; (1b668 <z_impl_k_poll+0x1a4>)
   1b572:	4835      	ldr	r0, [pc, #212]	; (1b648 <z_impl_k_poll+0x184>)
   1b574:	f000 fbe0 	bl	1bd38 <assert_print>
   1b578:	4939      	ldr	r1, [pc, #228]	; (1b660 <z_impl_k_poll+0x19c>)
   1b57a:	483c      	ldr	r0, [pc, #240]	; (1b66c <z_impl_k_poll+0x1a8>)
   1b57c:	f000 fbdc 	bl	1bd38 <assert_print>
   1b580:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b582:	4838      	ldr	r0, [pc, #224]	; (1b664 <z_impl_k_poll+0x1a0>)
   1b584:	e7bf      	b.n	1b506 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   1b586:	4836      	ldr	r0, [pc, #216]	; (1b660 <z_impl_k_poll+0x19c>)
   1b588:	f7fc fe30 	bl	181ec <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1b58c:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   1b590:	b9e4      	cbnz	r4, 1b5cc <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   1b592:	4628      	mov	r0, r5
   1b594:	4652      	mov	r2, sl
   1b596:	4649      	mov	r1, r9
   1b598:	f7ff fe8e 	bl	1b2b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b59c:	4830      	ldr	r0, [pc, #192]	; (1b660 <z_impl_k_poll+0x19c>)
   1b59e:	f7fc fe17 	bl	181d0 <z_spin_unlock_valid>
   1b5a2:	b958      	cbnz	r0, 1b5bc <z_impl_k_poll+0xf8>
   1b5a4:	23c2      	movs	r3, #194	; 0xc2
   1b5a6:	4a2f      	ldr	r2, [pc, #188]	; (1b664 <z_impl_k_poll+0x1a0>)
   1b5a8:	4931      	ldr	r1, [pc, #196]	; (1b670 <z_impl_k_poll+0x1ac>)
   1b5aa:	4827      	ldr	r0, [pc, #156]	; (1b648 <z_impl_k_poll+0x184>)
   1b5ac:	f000 fbc4 	bl	1bd38 <assert_print>
   1b5b0:	492b      	ldr	r1, [pc, #172]	; (1b660 <z_impl_k_poll+0x19c>)
   1b5b2:	4830      	ldr	r0, [pc, #192]	; (1b674 <z_impl_k_poll+0x1b0>)
   1b5b4:	f000 fbc0 	bl	1bd38 <assert_print>
   1b5b8:	21c2      	movs	r1, #194	; 0xc2
   1b5ba:	e7e2      	b.n	1b582 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   1b5bc:	f38a 8811 	msr	BASEPRI, sl
   1b5c0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1b5c4:	4620      	mov	r0, r4
   1b5c6:	b003      	add	sp, #12
   1b5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b5cc:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   1b5d0:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b5d4:	d10b      	bne.n	1b5ee <z_impl_k_poll+0x12a>
   1b5d6:	4822      	ldr	r0, [pc, #136]	; (1b660 <z_impl_k_poll+0x19c>)
   1b5d8:	f7fc fdfa 	bl	181d0 <z_spin_unlock_valid>
   1b5dc:	2800      	cmp	r0, #0
   1b5de:	d0e1      	beq.n	1b5a4 <z_impl_k_poll+0xe0>
   1b5e0:	f38a 8811 	msr	BASEPRI, sl
   1b5e4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1b5e8:	f06f 040a 	mvn.w	r4, #10
   1b5ec:	e7ea      	b.n	1b5c4 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b5ee:	4651      	mov	r1, sl
   1b5f0:	e9cd 7600 	strd	r7, r6, [sp]
   1b5f4:	4a20      	ldr	r2, [pc, #128]	; (1b678 <z_impl_k_poll+0x1b4>)
   1b5f6:	481a      	ldr	r0, [pc, #104]	; (1b660 <z_impl_k_poll+0x19c>)
   1b5f8:	f7fe fbd2 	bl	19da0 <z_pend_curr>
   1b5fc:	4604      	mov	r4, r0
	__asm__ volatile(
   1b5fe:	f04f 0320 	mov.w	r3, #32
   1b602:	f3ef 8611 	mrs	r6, BASEPRI
   1b606:	f383 8812 	msr	BASEPRI_MAX, r3
   1b60a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b60e:	4814      	ldr	r0, [pc, #80]	; (1b660 <z_impl_k_poll+0x19c>)
   1b610:	f7fc fdd0 	bl	181b4 <z_spin_lock_valid>
   1b614:	2800      	cmp	r0, #0
   1b616:	d0a9      	beq.n	1b56c <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   1b618:	4811      	ldr	r0, [pc, #68]	; (1b660 <z_impl_k_poll+0x19c>)
   1b61a:	f7fc fde7 	bl	181ec <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1b61e:	4628      	mov	r0, r5
   1b620:	4632      	mov	r2, r6
   1b622:	4649      	mov	r1, r9
   1b624:	f7ff fe48 	bl	1b2b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b628:	480d      	ldr	r0, [pc, #52]	; (1b660 <z_impl_k_poll+0x19c>)
   1b62a:	f7fc fdd1 	bl	181d0 <z_spin_unlock_valid>
   1b62e:	2800      	cmp	r0, #0
   1b630:	d0b8      	beq.n	1b5a4 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   1b632:	f386 8811 	msr	BASEPRI, r6
   1b636:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1b63a:	e7c3      	b.n	1b5c4 <z_impl_k_poll+0x100>
   1b63c:	20009b48 	.word	0x20009b48
   1b640:	00023e6e 	.word	0x00023e6e
   1b644:	000242e5 	.word	0x000242e5
   1b648:	000205a4 	.word	0x000205a4
   1b64c:	00022c58 	.word	0x00022c58
   1b650:	000244a4 	.word	0x000244a4
   1b654:	000244ba 	.word	0x000244ba
   1b658:	000244c9 	.word	0x000244c9
   1b65c:	000244d9 	.word	0x000244d9
   1b660:	20009ba0 	.word	0x20009ba0
   1b664:	000209d8 	.word	0x000209d8
   1b668:	00020a31 	.word	0x00020a31
   1b66c:	00020a46 	.word	0x00020a46
   1b670:	00020a05 	.word	0x00020a05
   1b674:	00020a1c 	.word	0x00020a1c
   1b678:	2000837c 	.word	0x2000837c

0001b67c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1b67c:	b570      	push	{r4, r5, r6, lr}
   1b67e:	4604      	mov	r4, r0
   1b680:	460d      	mov	r5, r1
	__asm__ volatile(
   1b682:	f04f 0320 	mov.w	r3, #32
   1b686:	f3ef 8611 	mrs	r6, BASEPRI
   1b68a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b68e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b692:	4820      	ldr	r0, [pc, #128]	; (1b714 <z_impl_k_poll_signal_raise+0x98>)
   1b694:	f7fc fd8e 	bl	181b4 <z_spin_lock_valid>
   1b698:	b968      	cbnz	r0, 1b6b6 <z_impl_k_poll_signal_raise+0x3a>
   1b69a:	2394      	movs	r3, #148	; 0x94
   1b69c:	4a1e      	ldr	r2, [pc, #120]	; (1b718 <z_impl_k_poll_signal_raise+0x9c>)
   1b69e:	491f      	ldr	r1, [pc, #124]	; (1b71c <z_impl_k_poll_signal_raise+0xa0>)
   1b6a0:	481f      	ldr	r0, [pc, #124]	; (1b720 <z_impl_k_poll_signal_raise+0xa4>)
   1b6a2:	f000 fb49 	bl	1bd38 <assert_print>
   1b6a6:	491b      	ldr	r1, [pc, #108]	; (1b714 <z_impl_k_poll_signal_raise+0x98>)
   1b6a8:	481e      	ldr	r0, [pc, #120]	; (1b724 <z_impl_k_poll_signal_raise+0xa8>)
   1b6aa:	f000 fb45 	bl	1bd38 <assert_print>
   1b6ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b6b0:	4819      	ldr	r0, [pc, #100]	; (1b718 <z_impl_k_poll_signal_raise+0x9c>)
   1b6b2:	f000 fb3a 	bl	1bd2a <assert_post_action>
	z_spin_lock_set_owner(l);
   1b6b6:	4817      	ldr	r0, [pc, #92]	; (1b714 <z_impl_k_poll_signal_raise+0x98>)
   1b6b8:	f7fc fd98 	bl	181ec <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   1b6bc:	2101      	movs	r1, #1
	return list->head == list;
   1b6be:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   1b6c0:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1b6c2:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   1b6c4:	60a1      	str	r1, [r4, #8]
   1b6c6:	d10f      	bne.n	1b6e8 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b6c8:	4812      	ldr	r0, [pc, #72]	; (1b714 <z_impl_k_poll_signal_raise+0x98>)
   1b6ca:	f7fc fd81 	bl	181d0 <z_spin_unlock_valid>
   1b6ce:	b9d8      	cbnz	r0, 1b708 <z_impl_k_poll_signal_raise+0x8c>
   1b6d0:	23c2      	movs	r3, #194	; 0xc2
   1b6d2:	4a11      	ldr	r2, [pc, #68]	; (1b718 <z_impl_k_poll_signal_raise+0x9c>)
   1b6d4:	4914      	ldr	r1, [pc, #80]	; (1b728 <z_impl_k_poll_signal_raise+0xac>)
   1b6d6:	4812      	ldr	r0, [pc, #72]	; (1b720 <z_impl_k_poll_signal_raise+0xa4>)
   1b6d8:	f000 fb2e 	bl	1bd38 <assert_print>
   1b6dc:	490d      	ldr	r1, [pc, #52]	; (1b714 <z_impl_k_poll_signal_raise+0x98>)
   1b6de:	4813      	ldr	r0, [pc, #76]	; (1b72c <z_impl_k_poll_signal_raise+0xb0>)
   1b6e0:	f000 fb2a 	bl	1bd38 <assert_print>
   1b6e4:	21c2      	movs	r1, #194	; 0xc2
   1b6e6:	e7e3      	b.n	1b6b0 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   1b6e8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1b6ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b6ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b6f0:	2300      	movs	r3, #0
	node->prev = NULL;
   1b6f2:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b6f6:	f003 fe25 	bl	1f344 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1b6fa:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b6fc:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1b6fe:	4805      	ldr	r0, [pc, #20]	; (1b714 <z_impl_k_poll_signal_raise+0x98>)
   1b700:	f7fe f880 	bl	19804 <z_reschedule>
	return rc;
}
   1b704:	4620      	mov	r0, r4
   1b706:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1b708:	f386 8811 	msr	BASEPRI, r6
   1b70c:	f3bf 8f6f 	isb	sy
		return 0;
   1b710:	2400      	movs	r4, #0
   1b712:	e7f7      	b.n	1b704 <z_impl_k_poll_signal_raise+0x88>
   1b714:	20009ba0 	.word	0x20009ba0
   1b718:	000209d8 	.word	0x000209d8
   1b71c:	00020a31 	.word	0x00020a31
   1b720:	000205a4 	.word	0x000205a4
   1b724:	00020a46 	.word	0x00020a46
   1b728:	00020a05 	.word	0x00020a05
   1b72c:	00020a1c 	.word	0x00020a1c

0001b730 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1b730:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   1b732:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   1b736:	4606      	mov	r6, r0
   1b738:	460d      	mov	r5, r1
   1b73a:	d220      	bcs.n	1b77e <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1b73c:	f04f 0800 	mov.w	r8, #0
   1b740:	f04f 0900 	mov.w	r9, #0
   1b744:	f041 0104 	orr.w	r1, r1, #4
   1b748:	e9cd 8900 	strd	r8, r9, [sp]
   1b74c:	f7fc fa2e 	bl	17bac <k_heap_aligned_alloc>
	if (mem == NULL) {
   1b750:	4604      	mov	r4, r0
   1b752:	b1a0      	cbz	r0, 1b77e <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   1b754:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1b758:	b195      	cbz	r5, 1b780 <z_heap_aligned_alloc+0x50>
   1b75a:	1e6b      	subs	r3, r5, #1
   1b75c:	421c      	tst	r4, r3
   1b75e:	d00f      	beq.n	1b780 <z_heap_aligned_alloc+0x50>
   1b760:	2325      	movs	r3, #37	; 0x25
   1b762:	4a09      	ldr	r2, [pc, #36]	; (1b788 <z_heap_aligned_alloc+0x58>)
   1b764:	4909      	ldr	r1, [pc, #36]	; (1b78c <z_heap_aligned_alloc+0x5c>)
   1b766:	480a      	ldr	r0, [pc, #40]	; (1b790 <z_heap_aligned_alloc+0x60>)
   1b768:	f000 fae6 	bl	1bd38 <assert_print>
   1b76c:	4621      	mov	r1, r4
   1b76e:	4809      	ldr	r0, [pc, #36]	; (1b794 <z_heap_aligned_alloc+0x64>)
   1b770:	462a      	mov	r2, r5
   1b772:	f000 fae1 	bl	1bd38 <assert_print>
   1b776:	2125      	movs	r1, #37	; 0x25
   1b778:	4803      	ldr	r0, [pc, #12]	; (1b788 <z_heap_aligned_alloc+0x58>)
   1b77a:	f000 fad6 	bl	1bd2a <assert_post_action>
		return NULL;
   1b77e:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   1b780:	4620      	mov	r0, r4
   1b782:	b002      	add	sp, #8
   1b784:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1b788:	000244e6 	.word	0x000244e6
   1b78c:	0002450a 	.word	0x0002450a
   1b790:	000205a4 	.word	0x000205a4
   1b794:	0002453c 	.word	0x0002453c

0001b798 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1b798:	2803      	cmp	r0, #3
{
   1b79a:	460a      	mov	r2, r1
   1b79c:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   1b79e:	d901      	bls.n	1b7a4 <k_aligned_alloc+0xc>
   1b7a0:	0783      	lsls	r3, r0, #30
   1b7a2:	d00c      	beq.n	1b7be <k_aligned_alloc+0x26>
   1b7a4:	4910      	ldr	r1, [pc, #64]	; (1b7e8 <k_aligned_alloc+0x50>)
   1b7a6:	2342      	movs	r3, #66	; 0x42
   1b7a8:	4a10      	ldr	r2, [pc, #64]	; (1b7ec <k_aligned_alloc+0x54>)
   1b7aa:	4811      	ldr	r0, [pc, #68]	; (1b7f0 <k_aligned_alloc+0x58>)
   1b7ac:	f000 fac4 	bl	1bd38 <assert_print>
   1b7b0:	4810      	ldr	r0, [pc, #64]	; (1b7f4 <k_aligned_alloc+0x5c>)
   1b7b2:	f000 fac1 	bl	1bd38 <assert_print>
   1b7b6:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1b7b8:	480c      	ldr	r0, [pc, #48]	; (1b7ec <k_aligned_alloc+0x54>)
   1b7ba:	f000 fab6 	bl	1bd2a <assert_post_action>
   1b7be:	1e43      	subs	r3, r0, #1
   1b7c0:	4203      	tst	r3, r0
   1b7c2:	d00a      	beq.n	1b7da <k_aligned_alloc+0x42>
   1b7c4:	490c      	ldr	r1, [pc, #48]	; (1b7f8 <k_aligned_alloc+0x60>)
   1b7c6:	2346      	movs	r3, #70	; 0x46
   1b7c8:	4a08      	ldr	r2, [pc, #32]	; (1b7ec <k_aligned_alloc+0x54>)
   1b7ca:	4809      	ldr	r0, [pc, #36]	; (1b7f0 <k_aligned_alloc+0x58>)
   1b7cc:	f000 fab4 	bl	1bd38 <assert_print>
   1b7d0:	480a      	ldr	r0, [pc, #40]	; (1b7fc <k_aligned_alloc+0x64>)
   1b7d2:	f000 fab1 	bl	1bd38 <assert_print>
   1b7d6:	2146      	movs	r1, #70	; 0x46
   1b7d8:	e7ee      	b.n	1b7b8 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1b7da:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   1b7dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1b7e0:	4807      	ldr	r0, [pc, #28]	; (1b800 <k_aligned_alloc+0x68>)
   1b7e2:	f7ff bfa5 	b.w	1b730 <z_heap_aligned_alloc>
   1b7e6:	bf00      	nop
   1b7e8:	00024564 	.word	0x00024564
   1b7ec:	000244e6 	.word	0x000244e6
   1b7f0:	000205a4 	.word	0x000205a4
   1b7f4:	000245a1 	.word	0x000245a1
   1b7f8:	00020842 	.word	0x00020842
   1b7fc:	0002085d 	.word	0x0002085d
   1b800:	20008520 	.word	0x20008520

0001b804 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   1b804:	4b01      	ldr	r3, [pc, #4]	; (1b80c <k_thread_system_pool_assign+0x8>)
   1b806:	6743      	str	r3, [r0, #116]	; 0x74
}
   1b808:	4770      	bx	lr
   1b80a:	bf00      	nop
   1b80c:	20008520 	.word	0x20008520

0001b810 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1b810:	b538      	push	{r3, r4, r5, lr}
   1b812:	4604      	mov	r4, r0
   1b814:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1b816:	f003 fc19 	bl	1f04c <k_is_in_isr>
   1b81a:	b920      	cbnz	r0, 1b826 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1b81c:	4b06      	ldr	r3, [pc, #24]	; (1b838 <z_thread_aligned_alloc+0x28>)
   1b81e:	689b      	ldr	r3, [r3, #8]
   1b820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1b822:	b90b      	cbnz	r3, 1b828 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   1b824:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1b826:	4b05      	ldr	r3, [pc, #20]	; (1b83c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   1b828:	462a      	mov	r2, r5
   1b82a:	4621      	mov	r1, r4
   1b82c:	4618      	mov	r0, r3
}
   1b82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1b832:	f7ff bf7d 	b.w	1b730 <z_heap_aligned_alloc>
   1b836:	bf00      	nop
   1b838:	20009b48 	.word	0x20009b48
   1b83c:	20008520 	.word	0x20008520

0001b840 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1b840:	4801      	ldr	r0, [pc, #4]	; (1b848 <boot_banner+0x8>)
   1b842:	f000 b871 	b.w	1b928 <printk>
   1b846:	bf00      	nop
   1b848:	000245ce 	.word	0x000245ce

0001b84c <z_log_msg_static_create.constprop.0>:
   1b84c:	2300      	movs	r3, #0
   1b84e:	f7ef bfdb 	b.w	b808 <z_impl_z_log_msg_static_create>

0001b852 <cbpprintf_external>:
{
   1b852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b856:	4606      	mov	r6, r0
   1b858:	460d      	mov	r5, r1
   1b85a:	4617      	mov	r7, r2
	if (buf == NULL) {
   1b85c:	4698      	mov	r8, r3
   1b85e:	b32b      	cbz	r3, 1b8ac <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   1b860:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   1b864:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1b868:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1b86c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1b86e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1b870:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1b874:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1b878:	441c      	add	r4, r3
   1b87a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1b87c:	45ca      	cmp	sl, r9
   1b87e:	d309      	bcc.n	1b894 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1b880:	4639      	mov	r1, r7
   1b882:	4630      	mov	r0, r6
   1b884:	46ac      	mov	ip, r5
   1b886:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b88a:	f108 0308 	add.w	r3, r8, #8
}
   1b88e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1b892:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1b894:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1b898:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   1b89c:	4620      	mov	r0, r4
		*ps = s;
   1b89e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1b8a2:	f001 fa19 	bl	1ccd8 <strlen>
   1b8a6:	3001      	adds	r0, #1
   1b8a8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1b8aa:	e7e7      	b.n	1b87c <cbpprintf_external+0x2a>
}
   1b8ac:	f06f 0015 	mvn.w	r0, #21
   1b8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b8b4 <is_ptr>:
{
   1b8b4:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1b8b6:	2500      	movs	r5, #0
{
   1b8b8:	4602      	mov	r2, r0
	bool mod = false;
   1b8ba:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1b8bc:	4614      	mov	r4, r2
   1b8be:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b8c2:	b90b      	cbnz	r3, 1b8c8 <is_ptr+0x14>
					return false;
   1b8c4:	4618      	mov	r0, r3
   1b8c6:	e009      	b.n	1b8dc <is_ptr+0x28>
		if (mod) {
   1b8c8:	b198      	cbz	r0, 1b8f2 <is_ptr+0x3e>
			if (cnt == n) {
   1b8ca:	428d      	cmp	r5, r1
   1b8cc:	d107      	bne.n	1b8de <is_ptr+0x2a>
				if (c == 'p') {
   1b8ce:	2b70      	cmp	r3, #112	; 0x70
   1b8d0:	d004      	beq.n	1b8dc <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   1b8d2:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1b8d6:	2a3a      	cmp	r2, #58	; 0x3a
   1b8d8:	d80b      	bhi.n	1b8f2 <is_ptr+0x3e>
					return false;
   1b8da:	2000      	movs	r0, #0
}
   1b8dc:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1b8de:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   1b8e2:	2e3a      	cmp	r6, #58	; 0x3a
   1b8e4:	d805      	bhi.n	1b8f2 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1b8e6:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1b8e8:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1b8ea:	1c94      	adds	r4, r2, #2
   1b8ec:	2b00      	cmp	r3, #0
   1b8ee:	d0e9      	beq.n	1b8c4 <is_ptr+0x10>
   1b8f0:	2000      	movs	r0, #0
		if (c == '%') {
   1b8f2:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   1b8f4:	4622      	mov	r2, r4
			mod = !mod;
   1b8f6:	bf08      	it	eq
   1b8f8:	f080 0001 	eoreq.w	r0, r0, #1
   1b8fc:	e7de      	b.n	1b8bc <is_ptr+0x8>

0001b8fe <arch_printk_char_out>:
}
   1b8fe:	2000      	movs	r0, #0
   1b900:	4770      	bx	lr

0001b902 <str_out>:
{
   1b902:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1b904:	688a      	ldr	r2, [r1, #8]
   1b906:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1b908:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1b90a:	b114      	cbz	r4, 1b912 <str_out+0x10>
   1b90c:	684b      	ldr	r3, [r1, #4]
   1b90e:	4293      	cmp	r3, r2
   1b910:	dc01      	bgt.n	1b916 <str_out+0x14>
		ctx->count++;
   1b912:	608d      	str	r5, [r1, #8]
}
   1b914:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1b916:	3b01      	subs	r3, #1
   1b918:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1b91a:	bf08      	it	eq
   1b91c:	2200      	moveq	r2, #0
   1b91e:	608d      	str	r5, [r1, #8]
   1b920:	bf0c      	ite	eq
   1b922:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1b924:	54a0      	strbne	r0, [r4, r2]
   1b926:	e7f5      	b.n	1b914 <str_out+0x12>

0001b928 <printk>:
{
   1b928:	b40f      	push	{r0, r1, r2, r3}
   1b92a:	b507      	push	{r0, r1, r2, lr}
   1b92c:	a904      	add	r1, sp, #16
   1b92e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1b932:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1b934:	f7ee f830 	bl	9998 <vprintk>
}
   1b938:	b003      	add	sp, #12
   1b93a:	f85d eb04 	ldr.w	lr, [sp], #4
   1b93e:	b004      	add	sp, #16
   1b940:	4770      	bx	lr

0001b942 <snprintk>:
{
   1b942:	b40c      	push	{r2, r3}
   1b944:	b507      	push	{r0, r1, r2, lr}
   1b946:	ab04      	add	r3, sp, #16
   1b948:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1b94c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1b94e:	f7ee f831 	bl	99b4 <vsnprintk>
}
   1b952:	b003      	add	sp, #12
   1b954:	f85d eb04 	ldr.w	lr, [sp], #4
   1b958:	b002      	add	sp, #8
   1b95a:	4770      	bx	lr

0001b95c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1b95c:	4604      	mov	r4, r0
   1b95e:	b508      	push	{r3, lr}
   1b960:	4608      	mov	r0, r1
   1b962:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1b964:	461a      	mov	r2, r3
   1b966:	47a0      	blx	r4
	return z_impl_z_current_get();
   1b968:	f7fe fe62 	bl	1a630 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1b96c:	f7f1 fe9a 	bl	d6a4 <z_impl_k_thread_abort>

0001b970 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   1b970:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1b974:	8840      	ldrh	r0, [r0, #2]
}
   1b976:	0840      	lsrs	r0, r0, #1
   1b978:	4770      	bx	lr

0001b97a <free_list_add>:
{
   1b97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b97c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b97e:	f7ff fff7 	bl	1b970 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1b982:	fab0 f080 	clz	r0, r0
   1b986:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1b98a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1b98e:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   1b992:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   1b994:	1d17      	adds	r7, r2, #4
{
   1b996:	460c      	mov	r4, r1
   1b998:	3206      	adds	r2, #6
   1b99a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1b99c:	b956      	cbnz	r6, 1b9b4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1b99e:	2101      	movs	r1, #1
   1b9a0:	fa01 f000 	lsl.w	r0, r1, r0
   1b9a4:	68d9      	ldr	r1, [r3, #12]
   1b9a6:	4301      	orrs	r1, r0
   1b9a8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1b9aa:	f8cc 4010 	str.w	r4, [ip, #16]
   1b9ae:	53dd      	strh	r5, [r3, r7]
   1b9b0:	529d      	strh	r5, [r3, r2]
}
   1b9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1b9b4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1b9b6:	3104      	adds	r1, #4
   1b9b8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1b9ba:	53d8      	strh	r0, [r3, r7]
   1b9bc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b9c0:	529e      	strh	r6, [r3, r2]
   1b9c2:	80c5      	strh	r5, [r0, #6]
   1b9c4:	525d      	strh	r5, [r3, r1]
   1b9c6:	e7f4      	b.n	1b9b2 <free_list_add+0x38>

0001b9c8 <free_list_remove_bidx>:
{
   1b9c8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1b9ca:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1b9ce:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1b9d0:	4299      	cmp	r1, r3
   1b9d2:	f102 0104 	add.w	r1, r2, #4
   1b9d6:	d10a      	bne.n	1b9ee <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1b9d8:	2301      	movs	r3, #1
   1b9da:	fa03 f202 	lsl.w	r2, r3, r2
   1b9de:	68c3      	ldr	r3, [r0, #12]
   1b9e0:	ea23 0302 	bic.w	r3, r3, r2
   1b9e4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1b9e6:	2300      	movs	r3, #0
   1b9e8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1b9ec:	bd10      	pop	{r4, pc}
   1b9ee:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1b9f0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1b9f4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1b9f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1b9fc:	80cb      	strh	r3, [r1, #6]
   1b9fe:	8082      	strh	r2, [r0, #4]
}
   1ba00:	e7f4      	b.n	1b9ec <free_list_remove_bidx+0x24>

0001ba02 <free_list_remove>:
{
   1ba02:	b508      	push	{r3, lr}
   1ba04:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ba06:	f7ff ffb3 	bl	1b970 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1ba0a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1ba0e:	4618      	mov	r0, r3
}
   1ba10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1ba14:	f1c2 021f 	rsb	r2, r2, #31
   1ba18:	f7ff bfd6 	b.w	1b9c8 <free_list_remove_bidx>

0001ba1c <alloc_chunk>:
{
   1ba1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ba20:	fab1 f581 	clz	r5, r1
   1ba24:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   1ba28:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   1ba2c:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1ba30:	4603      	mov	r3, r0
   1ba32:	460e      	mov	r6, r1
	if (b->next) {
   1ba34:	b1c2      	cbz	r2, 1ba68 <alloc_chunk+0x4c>
   1ba36:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1ba38:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1ba3c:	4618      	mov	r0, r3
   1ba3e:	4621      	mov	r1, r4
   1ba40:	f7ff ff96 	bl	1b970 <chunk_size>
   1ba44:	42b0      	cmp	r0, r6
   1ba46:	d306      	bcc.n	1ba56 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1ba48:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   1ba4a:	4618      	mov	r0, r3
   1ba4c:	f7ff ffbc 	bl	1b9c8 <free_list_remove_bidx>
}
   1ba50:	4620      	mov	r0, r4
   1ba52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1ba56:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ba5a:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   1ba5c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1ba5e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1ba62:	d001      	beq.n	1ba68 <alloc_chunk+0x4c>
   1ba64:	4282      	cmp	r2, r0
   1ba66:	d1e7      	bne.n	1ba38 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1ba68:	f04f 34ff 	mov.w	r4, #4294967295
   1ba6c:	f1c5 0220 	rsb	r2, r5, #32
   1ba70:	4094      	lsls	r4, r2
   1ba72:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1ba74:	4014      	ands	r4, r2
   1ba76:	d0eb      	beq.n	1ba50 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1ba78:	fa94 f2a4 	rbit	r2, r4
   1ba7c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ba80:	1d11      	adds	r1, r2, #4
   1ba82:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1ba86:	4621      	mov	r1, r4
   1ba88:	e7df      	b.n	1ba4a <alloc_chunk+0x2e>

0001ba8a <merge_chunks>:
{
   1ba8a:	b538      	push	{r3, r4, r5, lr}
   1ba8c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ba8e:	f7ff ff6f 	bl	1b970 <chunk_size>
{
   1ba92:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ba94:	4604      	mov	r4, r0
   1ba96:	4611      	mov	r1, r2
   1ba98:	4618      	mov	r0, r3
   1ba9a:	f7ff ff69 	bl	1b970 <chunk_size>
   1ba9e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1baa0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1baa2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1baa6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1baa8:	4618      	mov	r0, r3
   1baaa:	f7ff ff61 	bl	1b970 <chunk_size>
	void *cmem = &buf[c];
   1baae:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1bab0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1bab4:	bd38      	pop	{r3, r4, r5, pc}

0001bab6 <split_chunks>:
{
   1bab6:	b538      	push	{r3, r4, r5, lr}
   1bab8:	460c      	mov	r4, r1
   1baba:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1babc:	f7ff ff58 	bl	1b970 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   1bac0:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1bac2:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1bac4:	4405      	add	r5, r0
   1bac6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1baca:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1bacc:	8060      	strh	r0, [r4, #2]
   1bace:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1bad2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1bad4:	8044      	strh	r4, [r0, #2]
   1bad6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1bada:	4618      	mov	r0, r3
   1badc:	4611      	mov	r1, r2
   1bade:	f7ff ff47 	bl	1b970 <chunk_size>
	void *cmem = &buf[c];
   1bae2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1bae4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1bae8:	bd38      	pop	{r3, r4, r5, pc}

0001baea <free_chunk>:
{
   1baea:	b538      	push	{r3, r4, r5, lr}
   1baec:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1baee:	f7ff ff3f 	bl	1b970 <chunk_size>
   1baf2:	460c      	mov	r4, r1
   1baf4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1baf6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1bafa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1bafc:	07da      	lsls	r2, r3, #31
   1bafe:	d40a      	bmi.n	1bb16 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1bb00:	4628      	mov	r0, r5
   1bb02:	f7ff ff7e 	bl	1ba02 <free_list_remove>
	return c + chunk_size(h, c);
   1bb06:	4621      	mov	r1, r4
   1bb08:	4628      	mov	r0, r5
   1bb0a:	f7ff ff31 	bl	1b970 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1bb0e:	1822      	adds	r2, r4, r0
   1bb10:	4628      	mov	r0, r5
   1bb12:	f7ff ffba 	bl	1ba8a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1bb16:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1bb1a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1bb1c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1bb20:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1bb22:	07db      	lsls	r3, r3, #31
   1bb24:	d40c      	bmi.n	1bb40 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1bb26:	4628      	mov	r0, r5
   1bb28:	f7ff ff6b 	bl	1ba02 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1bb2c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1bb30:	4622      	mov	r2, r4
   1bb32:	1a61      	subs	r1, r4, r1
   1bb34:	4628      	mov	r0, r5
   1bb36:	f7ff ffa8 	bl	1ba8a <merge_chunks>
   1bb3a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1bb3e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1bb40:	4621      	mov	r1, r4
   1bb42:	4628      	mov	r0, r5
}
   1bb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1bb48:	f7ff bf17 	b.w	1b97a <free_list_add>

0001bb4c <sys_heap_alloc>:
{
   1bb4c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1bb4e:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1bb50:	b909      	cbnz	r1, 1bb56 <sys_heap_alloc+0xa>
		return NULL;
   1bb52:	2000      	movs	r0, #0
}
   1bb54:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1bb56:	68ab      	ldr	r3, [r5, #8]
   1bb58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1bb5c:	d9f9      	bls.n	1bb52 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1bb5e:	310b      	adds	r1, #11
   1bb60:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1bb62:	4621      	mov	r1, r4
   1bb64:	4628      	mov	r0, r5
   1bb66:	f7ff ff59 	bl	1ba1c <alloc_chunk>
	if (c == 0U) {
   1bb6a:	4606      	mov	r6, r0
   1bb6c:	2800      	cmp	r0, #0
   1bb6e:	d0f0      	beq.n	1bb52 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1bb70:	4601      	mov	r1, r0
   1bb72:	4628      	mov	r0, r5
   1bb74:	f7ff fefc 	bl	1b970 <chunk_size>
   1bb78:	42a0      	cmp	r0, r4
   1bb7a:	d907      	bls.n	1bb8c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1bb7c:	4628      	mov	r0, r5
   1bb7e:	1932      	adds	r2, r6, r4
   1bb80:	f7ff ff99 	bl	1bab6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1bb84:	4611      	mov	r1, r2
   1bb86:	4628      	mov	r0, r5
   1bb88:	f7ff fef7 	bl	1b97a <free_list_add>
	void *cmem = &buf[c];
   1bb8c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1bb90:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1bb92:	8853      	ldrh	r3, [r2, #2]
   1bb94:	3004      	adds	r0, #4
   1bb96:	f043 0301 	orr.w	r3, r3, #1
   1bb9a:	8053      	strh	r3, [r2, #2]
	return mem;
   1bb9c:	e7da      	b.n	1bb54 <sys_heap_alloc+0x8>

0001bb9e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1bb9e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1bba0:	f013 0307 	ands.w	r3, r3, #7
   1bba4:	d105      	bne.n	1bbb2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1bba6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1bba8:	2b00      	cmp	r3, #0
   1bbaa:	bf0c      	ite	eq
   1bbac:	2000      	moveq	r0, #0
   1bbae:	2003      	movne	r0, #3
   1bbb0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1bbb2:	2b02      	cmp	r3, #2
   1bbb4:	d105      	bne.n	1bbc2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1bbb6:	8bc0      	ldrh	r0, [r0, #30]
   1bbb8:	fab0 f080 	clz	r0, r0
   1bbbc:	0940      	lsrs	r0, r0, #5
   1bbbe:	0080      	lsls	r0, r0, #2
   1bbc0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1bbc2:	2b01      	cmp	r3, #1
   1bbc4:	d105      	bne.n	1bbd2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1bbc6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1bbc8:	2b00      	cmp	r3, #0
   1bbca:	bf0c      	ite	eq
   1bbcc:	2000      	moveq	r0, #0
   1bbce:	2005      	movne	r0, #5
   1bbd0:	4770      	bx	lr
	int evt = EVT_NOP;
   1bbd2:	2000      	movs	r0, #0
}
   1bbd4:	4770      	bx	lr

0001bbd6 <validate_args>:
{
   1bbd6:	b510      	push	{r4, lr}
   1bbd8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1bbda:	b100      	cbz	r0, 1bbde <validate_args+0x8>
   1bbdc:	b911      	cbnz	r1, 1bbe4 <validate_args+0xe>
		return -EINVAL;
   1bbde:	f06f 0015 	mvn.w	r0, #21
}
   1bbe2:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1bbe4:	1d08      	adds	r0, r1, #4
   1bbe6:	f000 f82f 	bl	1bc48 <sys_notify_validate>
	if ((rv == 0)
   1bbea:	2800      	cmp	r0, #0
   1bbec:	d1f9      	bne.n	1bbe2 <validate_args+0xc>
	    && ((cli->notify.flags
   1bbee:	68a3      	ldr	r3, [r4, #8]
   1bbf0:	2b03      	cmp	r3, #3
   1bbf2:	d9f6      	bls.n	1bbe2 <validate_args+0xc>
   1bbf4:	e7f3      	b.n	1bbde <validate_args+0x8>

0001bbf6 <notify_one>:
{
   1bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbfa:	460d      	mov	r5, r1
   1bbfc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1bbfe:	4619      	mov	r1, r3
   1bc00:	1d28      	adds	r0, r5, #4
{
   1bc02:	4690      	mov	r8, r2
   1bc04:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1bc06:	f7ee fadb 	bl	a1c0 <sys_notify_finalize>
	if (cb) {
   1bc0a:	4604      	mov	r4, r0
   1bc0c:	b138      	cbz	r0, 1bc1e <notify_one+0x28>
		cb(mgr, cli, state, res);
   1bc0e:	4633      	mov	r3, r6
   1bc10:	4642      	mov	r2, r8
   1bc12:	4629      	mov	r1, r5
   1bc14:	4638      	mov	r0, r7
   1bc16:	46a4      	mov	ip, r4
}
   1bc18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1bc1c:	4760      	bx	ip
}
   1bc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bc22 <onoff_manager_init>:
{
   1bc22:	b538      	push	{r3, r4, r5, lr}
   1bc24:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1bc26:	4605      	mov	r5, r0
   1bc28:	b158      	cbz	r0, 1bc42 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1bc2a:	b151      	cbz	r1, 1bc42 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1bc2c:	680b      	ldr	r3, [r1, #0]
   1bc2e:	b143      	cbz	r3, 1bc42 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1bc30:	684b      	ldr	r3, [r1, #4]
   1bc32:	b133      	cbz	r3, 1bc42 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1bc34:	2220      	movs	r2, #32
   1bc36:	2100      	movs	r1, #0
   1bc38:	f001 f898 	bl	1cd6c <memset>
	return 0;
   1bc3c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1bc3e:	612c      	str	r4, [r5, #16]
}
   1bc40:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1bc42:	f06f 0015 	mvn.w	r0, #21
   1bc46:	e7fb      	b.n	1bc40 <onoff_manager_init+0x1e>

0001bc48 <sys_notify_validate>:
	if (notify == NULL) {
   1bc48:	4603      	mov	r3, r0
   1bc4a:	b140      	cbz	r0, 1bc5e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1bc4c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1bc4e:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1bc52:	2a02      	cmp	r2, #2
   1bc54:	d006      	beq.n	1bc64 <sys_notify_validate+0x1c>
   1bc56:	2a03      	cmp	r2, #3
   1bc58:	d004      	beq.n	1bc64 <sys_notify_validate+0x1c>
   1bc5a:	2a01      	cmp	r2, #1
   1bc5c:	d005      	beq.n	1bc6a <sys_notify_validate+0x22>
   1bc5e:	f06f 0015 	mvn.w	r0, #21
}
   1bc62:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1bc64:	681a      	ldr	r2, [r3, #0]
   1bc66:	2a00      	cmp	r2, #0
   1bc68:	d0f9      	beq.n	1bc5e <sys_notify_validate+0x16>
		notify->result = 0;
   1bc6a:	2000      	movs	r0, #0
   1bc6c:	6098      	str	r0, [r3, #8]
   1bc6e:	4770      	bx	lr

0001bc70 <encode_uint>:
{
   1bc70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc74:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1bc76:	78d3      	ldrb	r3, [r2, #3]
{
   1bc78:	4680      	mov	r8, r0
	switch (specifier) {
   1bc7a:	2b6f      	cmp	r3, #111	; 0x6f
{
   1bc7c:	460f      	mov	r7, r1
   1bc7e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bc80:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1bc84:	d029      	beq.n	1bcda <encode_uint+0x6a>
   1bc86:	d824      	bhi.n	1bcd2 <encode_uint+0x62>
		return 10;
   1bc88:	2b58      	cmp	r3, #88	; 0x58
   1bc8a:	bf0c      	ite	eq
   1bc8c:	2610      	moveq	r6, #16
   1bc8e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1bc90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1bc94:	4632      	mov	r2, r6
   1bc96:	2300      	movs	r3, #0
   1bc98:	4640      	mov	r0, r8
   1bc9a:	4639      	mov	r1, r7
   1bc9c:	f7ec fe4a 	bl	8934 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1bca0:	2a09      	cmp	r2, #9
   1bca2:	b2d4      	uxtb	r4, r2
   1bca4:	d81e      	bhi.n	1bce4 <encode_uint+0x74>
   1bca6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1bca8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1bcaa:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1bcac:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1bcb0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1bcb4:	d301      	bcc.n	1bcba <encode_uint+0x4a>
   1bcb6:	45d1      	cmp	r9, sl
   1bcb8:	d811      	bhi.n	1bcde <encode_uint+0x6e>
	if (conv->flag_hash) {
   1bcba:	782b      	ldrb	r3, [r5, #0]
   1bcbc:	069b      	lsls	r3, r3, #26
   1bcbe:	d505      	bpl.n	1bccc <encode_uint+0x5c>
		if (radix == 8) {
   1bcc0:	2e08      	cmp	r6, #8
   1bcc2:	d115      	bne.n	1bcf0 <encode_uint+0x80>
			conv->altform_0 = true;
   1bcc4:	78ab      	ldrb	r3, [r5, #2]
   1bcc6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1bcca:	70ab      	strb	r3, [r5, #2]
}
   1bccc:	4648      	mov	r0, r9
   1bcce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1bcd2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1bcd6:	2b70      	cmp	r3, #112	; 0x70
   1bcd8:	e7d7      	b.n	1bc8a <encode_uint+0x1a>
	switch (specifier) {
   1bcda:	2608      	movs	r6, #8
   1bcdc:	e7d8      	b.n	1bc90 <encode_uint+0x20>
		value /= radix;
   1bcde:	4680      	mov	r8, r0
   1bce0:	460f      	mov	r7, r1
   1bce2:	e7d7      	b.n	1bc94 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1bce4:	f1bb 0f19 	cmp.w	fp, #25
   1bce8:	bf94      	ite	ls
   1bcea:	3437      	addls	r4, #55	; 0x37
   1bcec:	3457      	addhi	r4, #87	; 0x57
   1bcee:	e7db      	b.n	1bca8 <encode_uint+0x38>
		} else if (radix == 16) {
   1bcf0:	2e10      	cmp	r6, #16
   1bcf2:	d1eb      	bne.n	1bccc <encode_uint+0x5c>
			conv->altform_0c = true;
   1bcf4:	78ab      	ldrb	r3, [r5, #2]
   1bcf6:	f043 0310 	orr.w	r3, r3, #16
   1bcfa:	e7e6      	b.n	1bcca <encode_uint+0x5a>

0001bcfc <outs>:
{
   1bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd00:	4607      	mov	r7, r0
   1bd02:	4688      	mov	r8, r1
   1bd04:	4615      	mov	r5, r2
   1bd06:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1bd08:	4614      	mov	r4, r2
   1bd0a:	42b4      	cmp	r4, r6
   1bd0c:	d305      	bcc.n	1bd1a <outs+0x1e>
   1bd0e:	b10e      	cbz	r6, 1bd14 <outs+0x18>
	return (int)count;
   1bd10:	1b60      	subs	r0, r4, r5
   1bd12:	e008      	b.n	1bd26 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1bd14:	7823      	ldrb	r3, [r4, #0]
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d0fa      	beq.n	1bd10 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1bd1a:	4641      	mov	r1, r8
   1bd1c:	f814 0b01 	ldrb.w	r0, [r4], #1
   1bd20:	47b8      	blx	r7
		if (rc < 0) {
   1bd22:	2800      	cmp	r0, #0
   1bd24:	daf1      	bge.n	1bd0a <outs+0xe>
}
   1bd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bd2a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1bd2a:	4040      	eors	r0, r0
   1bd2c:	f380 8811 	msr	BASEPRI, r0
   1bd30:	f04f 0004 	mov.w	r0, #4
   1bd34:	df02      	svc	2
}
   1bd36:	4770      	bx	lr

0001bd38 <assert_print>:

void assert_print(const char *fmt, ...)
{
   1bd38:	b40f      	push	{r0, r1, r2, r3}
   1bd3a:	b507      	push	{r0, r1, r2, lr}
   1bd3c:	a904      	add	r1, sp, #16
   1bd3e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1bd42:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1bd44:	f7ed fe28 	bl	9998 <vprintk>

	va_end(ap);
}
   1bd48:	b003      	add	sp, #12
   1bd4a:	f85d eb04 	ldr.w	lr, [sp], #4
   1bd4e:	b004      	add	sp, #16
   1bd50:	4770      	bx	lr

0001bd52 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1bd52:	68c3      	ldr	r3, [r0, #12]
   1bd54:	6802      	ldr	r2, [r0, #0]
   1bd56:	4293      	cmp	r3, r2
   1bd58:	d904      	bls.n	1bd64 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1bd5a:	3b01      	subs	r3, #1
   1bd5c:	1a9a      	subs	r2, r3, r2
		return false;
   1bd5e:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1bd60:	600a      	str	r2, [r1, #0]
}
   1bd62:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1bd64:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   1bd66:	b913      	cbnz	r3, 1bd6e <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1bd68:	3801      	subs	r0, #1
   1bd6a:	1a82      	subs	r2, r0, r2
		return false;
   1bd6c:	e7f7      	b.n	1bd5e <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   1bd6e:	1a82      	subs	r2, r0, r2
	return true;
   1bd70:	2001      	movs	r0, #1
   1bd72:	e7f5      	b.n	1bd60 <free_space+0xe>

0001bd74 <get_usage>:
{
   1bd74:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   1bd76:	a901      	add	r1, sp, #4
{
   1bd78:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1bd7a:	f7ff ffea 	bl	1bd52 <free_space>
   1bd7e:	b120      	cbz	r0, 1bd8a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1bd80:	9b01      	ldr	r3, [sp, #4]
   1bd82:	68e2      	ldr	r2, [r4, #12]
   1bd84:	3b01      	subs	r3, #1
   1bd86:	4413      	add	r3, r2
   1bd88:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   1bd8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1bd8c:	9b01      	ldr	r3, [sp, #4]
   1bd8e:	1ac0      	subs	r0, r0, r3
}
   1bd90:	3801      	subs	r0, #1
   1bd92:	b002      	add	sp, #8
   1bd94:	bd10      	pop	{r4, pc}

0001bd96 <idx_inc>:
{
   1bd96:	b510      	push	{r4, lr}
   1bd98:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1bd9a:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1bd9c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1bd9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1bda0:	07d2      	lsls	r2, r2, #31
   1bda2:	d502      	bpl.n	1bdaa <idx_inc+0x14>
		return i & (buffer->size - 1);
   1bda4:	3b01      	subs	r3, #1
   1bda6:	4018      	ands	r0, r3
}
   1bda8:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1bdaa:	4298      	cmp	r0, r3
   1bdac:	bf28      	it	cs
   1bdae:	1ac0      	subcs	r0, r0, r3
   1bdb0:	e7fa      	b.n	1bda8 <idx_inc+0x12>

0001bdb2 <add_skip_item>:
{
   1bdb2:	b538      	push	{r3, r4, r5, lr}
   1bdb4:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1bdb6:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   1bdb8:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1bdba:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1bdbc:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1bdc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1bdc4:	6801      	ldr	r1, [r0, #0]
   1bdc6:	462a      	mov	r2, r5
{
   1bdc8:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1bdca:	f7ff ffe4 	bl	1bd96 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1bdce:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1bdd0:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1bdd2:	462a      	mov	r2, r5
   1bdd4:	4620      	mov	r0, r4
   1bdd6:	f7ff ffde 	bl	1bd96 <idx_inc>
   1bdda:	6060      	str	r0, [r4, #4]
}
   1bddc:	bd38      	pop	{r3, r4, r5, pc}

0001bdde <max_utilization_update>:
{
   1bdde:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1bde0:	6903      	ldr	r3, [r0, #16]
{
   1bde2:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1bde4:	075b      	lsls	r3, r3, #29
   1bde6:	d506      	bpl.n	1bdf6 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1bde8:	6a85      	ldr	r5, [r0, #40]	; 0x28
   1bdea:	f7ff ffc3 	bl	1bd74 <get_usage>
   1bdee:	4285      	cmp	r5, r0
   1bdf0:	bf2c      	ite	cs
   1bdf2:	62a5      	strcs	r5, [r4, #40]	; 0x28
   1bdf4:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   1bdf6:	bd38      	pop	{r3, r4, r5, pc}

0001bdf8 <drop_item_locked>:
{
   1bdf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdfc:	461f      	mov	r7, r3
	*user_packet = false;
   1bdfe:	2300      	movs	r3, #0
   1be00:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1be02:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1be06:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   1be0a:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   1be0c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   1be10:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   1be12:	f003 0303 	and.w	r3, r3, #3
   1be16:	2b02      	cmp	r3, #2
{
   1be18:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1be1a:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1be1e:	d103      	bne.n	1be28 <drop_item_locked+0x30>
		return item->skip.len;
   1be20:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1be24:	08ad      	lsrs	r5, r5, #2
   1be26:	d12e      	bne.n	1be86 <drop_item_locked+0x8e>
   1be28:	4630      	mov	r0, r6
   1be2a:	69e3      	ldr	r3, [r4, #28]
   1be2c:	4798      	blx	r3
   1be2e:	4605      	mov	r5, r0
	} else if (allow_drop) {
   1be30:	f1b8 0f00 	cmp.w	r8, #0
   1be34:	d038      	beq.n	1bea8 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   1be36:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1be3a:	079b      	lsls	r3, r3, #30
   1be3c:	d531      	bpl.n	1bea2 <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   1be3e:	4620      	mov	r0, r4
   1be40:	f10b 0101 	add.w	r1, fp, #1
   1be44:	f7ff ffb5 	bl	1bdb2 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1be48:	6861      	ldr	r1, [r4, #4]
   1be4a:	462a      	mov	r2, r5
   1be4c:	4620      	mov	r0, r4
   1be4e:	f7ff ffa2 	bl	1bd96 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1be52:	6821      	ldr	r1, [r4, #0]
   1be54:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1be56:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1be58:	4620      	mov	r0, r4
   1be5a:	f7ff ff9c 	bl	1bd96 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1be5e:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1be60:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1be62:	68e1      	ldr	r1, [r4, #12]
   1be64:	4620      	mov	r0, r4
   1be66:	f7ff ff96 	bl	1bd96 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1be6a:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   1be6c:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1be70:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1be74:	f002 0203 	and.w	r2, r2, #3
   1be78:	2a02      	cmp	r2, #2
   1be7a:	d10e      	bne.n	1be9a <drop_item_locked+0xa2>
		return item->skip.len;
   1be7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   1be80:	089b      	lsrs	r3, r3, #2
   1be82:	d00a      	beq.n	1be9a <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   1be84:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1be86:	68e1      	ldr	r1, [r4, #12]
   1be88:	462a      	mov	r2, r5
   1be8a:	4620      	mov	r0, r4
   1be8c:	f7ff ff83 	bl	1bd96 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1be90:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   1be94:	4630      	mov	r0, r6
   1be96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   1be9a:	4630      	mov	r0, r6
   1be9c:	69e3      	ldr	r3, [r4, #28]
   1be9e:	4798      	blx	r3
   1bea0:	4405      	add	r5, r0
			*user_packet = true;
   1bea2:	2301      	movs	r3, #1
   1bea4:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1bea6:	e7ee      	b.n	1be86 <drop_item_locked+0x8e>
		item = NULL;
   1bea8:	4646      	mov	r6, r8
	return item;
   1beaa:	e7f3      	b.n	1be94 <drop_item_locked+0x9c>

0001beac <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1beac:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1beb0:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1beb2:	bf88      	it	hi
   1beb4:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   1beb6:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1beb8:	1e18      	subs	r0, r3, #0
   1beba:	bf18      	it	ne
   1bebc:	2001      	movne	r0, #1
   1bebe:	4770      	bx	lr

0001bec0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1bec0:	4770      	bx	lr

0001bec2 <nordicsemi_nrf53_init>:
{
   1bec2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bec4:	f04f 0320 	mov.w	r3, #32
   1bec8:	f3ef 8511 	mrs	r5, BASEPRI
   1becc:	f383 8812 	msr	BASEPRI_MAX, r3
   1bed0:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   1bed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1bed8:	2401      	movs	r4, #1
   1beda:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   1bedc:	4621      	mov	r1, r4
   1bede:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   1bee2:	2021      	movs	r0, #33	; 0x21
   1bee4:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1bee8:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1beec:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   1bef0:	f7ef f8f6 	bl	b0e0 <soc_secure_gpio_pin_mcu_select>
   1bef4:	4621      	mov	r1, r4
   1bef6:	2020      	movs	r0, #32
   1bef8:	f7ef f8f2 	bl	b0e0 <soc_secure_gpio_pin_mcu_select>
   1befc:	4621      	mov	r1, r4
   1befe:	200b      	movs	r0, #11
   1bf00:	f7ef f8ee 	bl	b0e0 <soc_secure_gpio_pin_mcu_select>
   1bf04:	4621      	mov	r1, r4
   1bf06:	200a      	movs	r0, #10
   1bf08:	f7ef f8ea 	bl	b0e0 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   1bf0c:	f385 8811 	msr	BASEPRI, r5
   1bf10:	f3bf 8f6f 	isb	sy
}
   1bf14:	2000      	movs	r0, #0
   1bf16:	bd38      	pop	{r3, r4, r5, pc}

0001bf18 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1bf18:	2806      	cmp	r0, #6
   1bf1a:	d108      	bne.n	1bf2e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1bf1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1bf20:	2201      	movs	r2, #1
   1bf22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1bf26:	f3bf 8f4f 	dsb	sy
        __WFE();
   1bf2a:	bf20      	wfe
    while (true)
   1bf2c:	e7fd      	b.n	1bf2a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1bf2e:	4770      	bx	lr

0001bf30 <pm_state_exit_post_ops>:
   1bf30:	2300      	movs	r3, #0
   1bf32:	f383 8811 	msr	BASEPRI, r3
   1bf36:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1bf3a:	4770      	bx	lr

0001bf3c <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1bf3c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1bf3e:	075b      	lsls	r3, r3, #29
   1bf40:	d40b      	bmi.n	1bf5a <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1bf42:	6803      	ldr	r3, [r0, #0]
   1bf44:	8842      	ldrh	r2, [r0, #2]
   1bf46:	f3c3 2349 	ubfx	r3, r3, #9, #10
   1bf4a:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   1bf4e:	1898      	adds	r0, r3, r2
   1bf50:	3017      	adds	r0, #23
   1bf52:	f020 0007 	bic.w	r0, r0, #7
   1bf56:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1bf58:	4770      	bx	lr
	return 0;
   1bf5a:	2000      	movs	r0, #0
}
   1bf5c:	4770      	bx	lr

0001bf5e <dummy_timestamp>:
}
   1bf5e:	2000      	movs	r0, #0
   1bf60:	4770      	bx	lr

0001bf62 <default_get_timestamp>:
   1bf62:	f002 b9e2 	b.w	1e32a <sys_clock_cycle_get_32>

0001bf66 <atomic_inc>:
{
   1bf66:	4603      	mov	r3, r0
}
   1bf68:	e8d3 0fef 	ldaex	r0, [r3]
   1bf6c:	1c42      	adds	r2, r0, #1
   1bf6e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bf72:	2900      	cmp	r1, #0
   1bf74:	d1f8      	bne.n	1bf68 <atomic_inc+0x2>
   1bf76:	4770      	bx	lr

0001bf78 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1bf78:	2001      	movs	r0, #1
   1bf7a:	f7ef b9db 	b.w	b334 <z_log_dropped>

0001bf7e <z_log_get_tag>:
}
   1bf7e:	2000      	movs	r0, #0
   1bf80:	4770      	bx	lr

0001bf82 <z_cbprintf_cpy>:
{
   1bf82:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1bf84:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1bf88:	1b9b      	subs	r3, r3, r6
   1bf8a:	428b      	cmp	r3, r1
{
   1bf8c:	460c      	mov	r4, r1
   1bf8e:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1bf90:	d30a      	bcc.n	1bfa8 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1bf92:	6813      	ldr	r3, [r2, #0]
   1bf94:	460a      	mov	r2, r1
   1bf96:	4601      	mov	r1, r0
   1bf98:	1998      	adds	r0, r3, r6
   1bf9a:	f000 fedc 	bl	1cd56 <memcpy>
	return len;
   1bf9e:	4620      	mov	r0, r4
	desc->off += len;
   1bfa0:	68ab      	ldr	r3, [r5, #8]
   1bfa2:	4423      	add	r3, r4
   1bfa4:	60ab      	str	r3, [r5, #8]
}
   1bfa6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1bfa8:	f06f 001b 	mvn.w	r0, #27
   1bfac:	e7fb      	b.n	1bfa6 <z_cbprintf_cpy+0x24>

0001bfae <z_log_msg_finalize>:
{
   1bfae:	b570      	push	{r4, r5, r6, lr}
   1bfb0:	460e      	mov	r6, r1
   1bfb2:	4615      	mov	r5, r2
   1bfb4:	4619      	mov	r1, r3
	if (!msg) {
   1bfb6:	4604      	mov	r4, r0
   1bfb8:	b918      	cbnz	r0, 1bfc2 <z_log_msg_finalize+0x14>
}
   1bfba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1bfbe:	f7ef b9b9 	b.w	b334 <z_log_dropped>
	if (data) {
   1bfc2:	b13b      	cbz	r3, 1bfd4 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1bfc4:	f3c2 2349 	ubfx	r3, r2, #9, #10
   1bfc8:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   1bfca:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1bfce:	4418      	add	r0, r3
   1bfd0:	f000 fec1 	bl	1cd56 <memcpy>
	msg->hdr.source = source;
   1bfd4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1bfd8:	4620      	mov	r0, r4
}
   1bfda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1bfde:	f7ef bbcd 	b.w	b77c <z_log_msg_commit>

0001bfe2 <buffer_write>:
{
   1bfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bfe4:	4606      	mov	r6, r0
   1bfe6:	460d      	mov	r5, r1
   1bfe8:	4614      	mov	r4, r2
   1bfea:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1bfec:	4621      	mov	r1, r4
   1bfee:	4628      	mov	r0, r5
   1bff0:	463a      	mov	r2, r7
   1bff2:	47b0      	blx	r6
	} while (len != 0);
   1bff4:	1a24      	subs	r4, r4, r0
		buf += processed;
   1bff6:	4405      	add	r5, r0
	} while (len != 0);
   1bff8:	d1f8      	bne.n	1bfec <buffer_write+0xa>
}
   1bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bffc <cbvprintf>:
{
   1bffc:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1bffe:	2400      	movs	r4, #0
   1c000:	9400      	str	r4, [sp, #0]
   1c002:	f7ee f909 	bl	a218 <z_cbvprintf_impl>
}
   1c006:	b002      	add	sp, #8
   1c008:	bd10      	pop	{r4, pc}

0001c00a <log_output_flush>:
{
   1c00a:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1c00c:	6842      	ldr	r2, [r0, #4]
{
   1c00e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1c010:	e9d2 2300 	ldrd	r2, r3, [r2]
   1c014:	6881      	ldr	r1, [r0, #8]
   1c016:	6800      	ldr	r0, [r0, #0]
   1c018:	f7ff ffe3 	bl	1bfe2 <buffer_write>
	output->control_block->offset = 0;
   1c01c:	2200      	movs	r2, #0
   1c01e:	6863      	ldr	r3, [r4, #4]
   1c020:	601a      	str	r2, [r3, #0]
}
   1c022:	bd10      	pop	{r4, pc}

0001c024 <cr_out_func>:
	if (c == '\n') {
   1c024:	280a      	cmp	r0, #10
{
   1c026:	b538      	push	{r3, r4, r5, lr}
   1c028:	4604      	mov	r4, r0
   1c02a:	460d      	mov	r5, r1
	if (c == '\n') {
   1c02c:	d102      	bne.n	1c034 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1c02e:	200d      	movs	r0, #13
   1c030:	f7ef fc70 	bl	b914 <out_func>
	out_func(c, ctx);
   1c034:	4629      	mov	r1, r5
   1c036:	4620      	mov	r0, r4
   1c038:	f7ef fc6c 	bl	b914 <out_func>
}
   1c03c:	2000      	movs	r0, #0
   1c03e:	bd38      	pop	{r3, r4, r5, pc}

0001c040 <z_log_msg_static_create.constprop.0>:
   1c040:	2300      	movs	r3, #0
   1c042:	f7ef bbe1 	b.w	b808 <z_impl_z_log_msg_static_create>

0001c046 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   1c046:	6903      	ldr	r3, [r0, #16]
}
   1c048:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
   1c04c:	4770      	bx	lr

0001c04e <drop_tx_buffer>:
}
   1c04e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c052:	4770      	bx	lr

0001c054 <release_rx_buffer>:
{
   1c054:	4608      	mov	r0, r1
   1c056:	b508      	push	{r3, lr}
   1c058:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1c05a:	b118      	cbz	r0, 1c064 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   1c05c:	f002 fe3a 	bl	1ecd4 <rpmsg_release_rx_buffer>
	return 0;
   1c060:	2000      	movs	r0, #0
}
   1c062:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1c064:	f06f 0001 	mvn.w	r0, #1
   1c068:	e7fb      	b.n	1c062 <release_rx_buffer+0xe>

0001c06a <hold_rx_buffer>:
{
   1c06a:	4608      	mov	r0, r1
   1c06c:	b508      	push	{r3, lr}
   1c06e:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1c070:	b118      	cbz	r0, 1c07a <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1c072:	f002 fe27 	bl	1ecc4 <rpmsg_hold_rx_buffer>
	return 0;
   1c076:	2000      	movs	r0, #0
}
   1c078:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1c07a:	f06f 0001 	mvn.w	r0, #1
   1c07e:	e7fb      	b.n	1c078 <hold_rx_buffer+0xe>

0001c080 <send_nocopy>:
{
   1c080:	b513      	push	{r0, r1, r4, lr}
   1c082:	4604      	mov	r4, r0
   1c084:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c086:	6921      	ldr	r1, [r4, #16]
   1c088:	f501 7155 	add.w	r1, r1, #852	; 0x354
   1c08c:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1c090:	2902      	cmp	r1, #2
   1c092:	d109      	bne.n	1c0a8 <send_nocopy+0x28>
	if (len == 0) {
   1c094:	b15b      	cbz	r3, 1c0ae <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   1c096:	b168      	cbz	r0, 1c0b4 <send_nocopy+0x34>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   1c098:	9300      	str	r3, [sp, #0]
   1c09a:	4613      	mov	r3, r2
   1c09c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1c0a0:	f7fb f8bc 	bl	1721c <rpmsg_send_offchannel_nocopy>
}
   1c0a4:	b002      	add	sp, #8
   1c0a6:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1c0a8:	f06f 000f 	mvn.w	r0, #15
   1c0ac:	e7fa      	b.n	1c0a4 <send_nocopy+0x24>
		return -EBADMSG;
   1c0ae:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1c0b2:	e7f7      	b.n	1c0a4 <send_nocopy+0x24>
		return -ENOENT;
   1c0b4:	f06f 0001 	mvn.w	r0, #1
   1c0b8:	e7f4      	b.n	1c0a4 <send_nocopy+0x24>

0001c0ba <get_tx_buffer>:
{
   1c0ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c0be:	461c      	mov	r4, r3
   1c0c0:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   1c0c4:	4616      	mov	r6, r2
   1c0c6:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   1c0c8:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   1c0ca:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   1c0cc:	b339      	cbz	r1, 1c11e <get_tx_buffer+0x64>
	if (!r_data || !size) {
   1c0ce:	b34a      	cbz	r2, 1c124 <get_tx_buffer+0x6a>
   1c0d0:	b344      	cbz	r4, 1c124 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   1c0d2:	1c6a      	adds	r2, r5, #1
   1c0d4:	f143 0300 	adc.w	r3, r3, #0
   1c0d8:	2a02      	cmp	r2, #2
   1c0da:	f173 0300 	sbcs.w	r3, r3, #0
   1c0de:	d224      	bcs.n	1c12a <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   1c0e0:	6822      	ldr	r2, [r4, #0]
   1c0e2:	b142      	cbz	r2, 1c0f6 <get_tx_buffer+0x3c>
   1c0e4:	f8d0 3358 	ldr.w	r3, [r0, #856]	; 0x358
   1c0e8:	429a      	cmp	r2, r3
   1c0ea:	d904      	bls.n	1c0f6 <get_tx_buffer+0x3c>
		return -ENOMEM;
   1c0ec:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   1c0f0:	6023      	str	r3, [r4, #0]
}
   1c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   1c0f6:	ea05 0908 	and.w	r9, r5, r8
   1c0fa:	f109 0301 	add.w	r3, r9, #1
   1c0fe:	425a      	negs	r2, r3
   1c100:	415a      	adcs	r2, r3
   1c102:	4621      	mov	r1, r4
   1c104:	4638      	mov	r0, r7
   1c106:	f002 fded 	bl	1ece4 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   1c10a:	b988      	cbnz	r0, 1c130 <get_tx_buffer+0x76>
   1c10c:	f1b8 3fff 	cmp.w	r8, #4294967295
   1c110:	bf08      	it	eq
   1c112:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1c116:	d0f0      	beq.n	1c0fa <get_tx_buffer+0x40>
		return -ENOBUFS;
   1c118:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c11c:	e7e9      	b.n	1c0f2 <get_tx_buffer+0x38>
		return -ENOENT;
   1c11e:	f06f 0001 	mvn.w	r0, #1
   1c122:	e7e6      	b.n	1c0f2 <get_tx_buffer+0x38>
		return -EINVAL;
   1c124:	f06f 0015 	mvn.w	r0, #21
   1c128:	e7e3      	b.n	1c0f2 <get_tx_buffer+0x38>
		return -ENOTSUP;
   1c12a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c12e:	e7e0      	b.n	1c0f2 <get_tx_buffer+0x38>
	(*r_data) = payload;
   1c130:	6030      	str	r0, [r6, #0]
	return 0;
   1c132:	2000      	movs	r0, #0
   1c134:	e7dd      	b.n	1c0f2 <get_tx_buffer+0x38>

0001c136 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1c136:	f002 be1a 	b.w	1ed6e <rpmsg_destroy_ept>

0001c13a <get_ept_slot_with_name>:
{
   1c13a:	b538      	push	{r3, r4, r5, lr}
   1c13c:	460d      	mov	r5, r1
   1c13e:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1c140:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1c144:	4628      	mov	r0, r5
   1c146:	f000 fdd7 	bl	1ccf8 <strcmp>
   1c14a:	b130      	cbz	r0, 1c15a <get_ept_slot_with_name+0x20>
   1c14c:	4628      	mov	r0, r5
   1c14e:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1c152:	f000 fdd1 	bl	1ccf8 <strcmp>
   1c156:	b920      	cbnz	r0, 1c162 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1c158:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   1c15a:	2370      	movs	r3, #112	; 0x70
   1c15c:	fb03 4000 	mla	r0, r3, r0, r4
}
   1c160:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1c162:	2000      	movs	r0, #0
   1c164:	e7fc      	b.n	1c160 <get_ept_slot_with_name+0x26>

0001c166 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   1c166:	f502 7126 	add.w	r1, r2, #664	; 0x298
   1c16a:	f502 702a 	add.w	r0, r2, #680	; 0x2a8
   1c16e:	f003 b821 	b.w	1f1b4 <k_work_submit_to_queue>

0001c172 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1c172:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   1c176:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1c17a:	3b00      	subs	r3, #0
   1c17c:	bf18      	it	ne
   1c17e:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1c180:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1c184:	f8d0 0284 	ldr.w	r0, [r0, #644]	; 0x284
   1c188:	f002 bd4e 	b.w	1ec28 <virtqueue_notification>

0001c18c <ept_cb>:
{
   1c18c:	b510      	push	{r4, lr}
   1c18e:	4608      	mov	r0, r1
   1c190:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   1c192:	4611      	mov	r1, r2
   1c194:	b952      	cbnz	r2, 1c1ac <ept_cb+0x20>
		if (!ept->bound) {
   1c196:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1c19a:	b92a      	cbnz	r2, 1c1a8 <ept_cb+0x1c>
			ept->bound = true;
   1c19c:	2201      	movs	r2, #1
			bound_cb(ept);
   1c19e:	4618      	mov	r0, r3
			ept->bound = true;
   1c1a0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   1c1a4:	f7ef fec0 	bl	bf28 <bound_cb>
}
   1c1a8:	2000      	movs	r0, #0
   1c1aa:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   1c1ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1c1ae:	6854      	ldr	r4, [r2, #4]
   1c1b0:	2c00      	cmp	r4, #0
   1c1b2:	d0f9      	beq.n	1c1a8 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   1c1b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1c1b6:	47a0      	blx	r4
   1c1b8:	e7f6      	b.n	1c1a8 <ept_cb+0x1c>

0001c1ba <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   1c1ba:	68cb      	ldr	r3, [r1, #12]
   1c1bc:	b133      	cbz	r3, 1c1cc <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1c1be:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1c1c0:	6883      	ldr	r3, [r0, #8]
   1c1c2:	681b      	ldr	r3, [r3, #0]
   1c1c4:	b113      	cbz	r3, 1c1cc <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   1c1c6:	2200      	movs	r2, #0
   1c1c8:	6909      	ldr	r1, [r1, #16]
   1c1ca:	4718      	bx	r3
}
   1c1cc:	4770      	bx	lr

0001c1ce <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1c1ce:	f7fc b917 	b.w	18400 <z_impl_k_mutex_unlock>

0001c1d2 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c1d2:	e8d0 3fef 	ldaex	r3, [r0]
   1c1d6:	e8c0 1fe2 	stlex	r2, r1, [r0]
   1c1da:	2a00      	cmp	r2, #0
   1c1dc:	d1f9      	bne.n	1c1d2 <atomic_set.isra.0>
}
   1c1de:	4770      	bx	lr

0001c1e0 <backend_init>:
{
   1c1e0:	b510      	push	{r4, lr}
	data->role = conf->role;
   1c1e2:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   1c1e4:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   1c1e6:	681b      	ldr	r3, [r3, #0]
   1c1e8:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
	return z_impl_k_mutex_init(mutex);
   1c1ec:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   1c1f0:	f002 ff48 	bl	1f084 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   1c1f4:	2100      	movs	r1, #0
   1c1f6:	f504 7055 	add.w	r0, r4, #852	; 0x354
   1c1fa:	f7ff ffea 	bl	1c1d2 <atomic_set.isra.0>
}
   1c1fe:	4608      	mov	r0, r1
   1c200:	bd10      	pop	{r4, pc}

0001c202 <ns_bind_cb>:
{
   1c202:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c206:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   1c208:	460d      	mov	r5, r1
   1c20a:	b379      	cbz	r1, 1c26c <ns_bind_cb+0x6a>
   1c20c:	780b      	ldrb	r3, [r1, #0]
   1c20e:	b36b      	cbz	r3, 1c26c <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   1c210:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
   1c214:	f5a4 78c4 	sub.w	r8, r4, #392	; 0x188
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   1c218:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1c21a:	f04f 32ff 	mov.w	r2, #4294967295
   1c21e:	f04f 33ff 	mov.w	r3, #4294967295
   1c222:	4620      	mov	r0, r4
   1c224:	f7fc f81c 	bl	18260 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   1c228:	462a      	mov	r2, r5
   1c22a:	4640      	mov	r0, r8
   1c22c:	a901      	add	r1, sp, #4
   1c22e:	f7ef feb5 	bl	bf9c <get_ept>
	if (rpmsg_ept == NULL) {
   1c232:	9e01      	ldr	r6, [sp, #4]
   1c234:	b92e      	cbnz	r6, 1c242 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1c236:	4620      	mov	r0, r4
}
   1c238:	b002      	add	sp, #8
   1c23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   1c23e:	f7ff bfc6 	b.w	1c1ce <k_mutex_unlock.isra.0>
	if (ept_cached) {
   1c242:	b158      	cbz	r0, 1c25c <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1c244:	4620      	mov	r0, r4
   1c246:	f7ff ffc2 	bl	1c1ce <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1c24a:	463b      	mov	r3, r7
   1c24c:	462a      	mov	r2, r5
   1c24e:	4631      	mov	r1, r6
   1c250:	4640      	mov	r0, r8
}
   1c252:	b002      	add	sp, #8
   1c254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1c258:	f7ef be7e 	b.w	bf58 <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   1c25c:	2220      	movs	r2, #32
   1c25e:	4629      	mov	r1, r5
   1c260:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1c264:	f000 fd24 	bl	1ccb0 <strncpy>
		rpmsg_ept->dest = dest;
   1c268:	6637      	str	r7, [r6, #96]	; 0x60
   1c26a:	e7e4      	b.n	1c236 <ns_bind_cb+0x34>
}
   1c26c:	b002      	add	sp, #8
   1c26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c272 <deregister_ept>:
{
   1c272:	b510      	push	{r4, lr}
   1c274:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c276:	6903      	ldr	r3, [r0, #16]
   1c278:	f503 7355 	add.w	r3, r3, #852	; 0x354
   1c27c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1c280:	2b02      	cmp	r3, #2
   1c282:	d10a      	bne.n	1c29a <deregister_ept+0x28>
	if (!rpmsg_ept) {
   1c284:	b161      	cbz	r1, 1c2a0 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   1c286:	4608      	mov	r0, r1
   1c288:	f002 fd71 	bl	1ed6e <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   1c28c:	2270      	movs	r2, #112	; 0x70
   1c28e:	2100      	movs	r1, #0
   1c290:	4620      	mov	r0, r4
   1c292:	f000 fd6b 	bl	1cd6c <memset>
	return 0;
   1c296:	2000      	movs	r0, #0
}
   1c298:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1c29a:	f06f 000f 	mvn.w	r0, #15
   1c29e:	e7fb      	b.n	1c298 <deregister_ept+0x26>
		return -ENOENT;
   1c2a0:	f06f 0001 	mvn.w	r0, #1
   1c2a4:	e7f8      	b.n	1c298 <deregister_ept+0x26>

0001c2a6 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1c2a6:	f002 bd62 	b.w	1ed6e <rpmsg_destroy_ept>

0001c2aa <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   1c2aa:	b538      	push	{r3, r4, r5, lr}
   1c2ac:	460d      	mov	r5, r1
	if (!instance) {
   1c2ae:	4604      	mov	r4, r0
   1c2b0:	b160      	cbz	r0, 1c2cc <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   1c2b2:	30e0      	adds	r0, #224	; 0xe0
   1c2b4:	f002 fe8f 	bl	1efd6 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   1c2b8:	b10d      	cbz	r5, 1c2be <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   1c2ba:	2000      	movs	r0, #0
}
   1c2bc:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   1c2be:	220c      	movs	r2, #12
   1c2c0:	4629      	mov	r1, r5
   1c2c2:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   1c2c6:	f000 fd51 	bl	1cd6c <memset>
   1c2ca:	e7f6      	b.n	1c2ba <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   1c2cc:	f06f 0015 	mvn.w	r0, #21
   1c2d0:	e7f4      	b.n	1c2bc <ipc_rpmsg_deinit+0x12>

0001c2d2 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   1c2d2:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   1c2d4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1c2d8:	b113      	cbz	r3, 1c2e0 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   1c2da:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   1c2de:	4718      	bx	r3
}
   1c2e0:	4770      	bx	lr

0001c2e2 <virtio_set_features>:
}
   1c2e2:	4770      	bx	lr

0001c2e4 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   1c2e4:	6983      	ldr	r3, [r0, #24]
   1c2e6:	b913      	cbnz	r3, 1c2ee <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   1c2e8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1c2ec:	7019      	strb	r1, [r3, #0]
}
   1c2ee:	4770      	bx	lr

0001c2f0 <virtio_get_features>:
}
   1c2f0:	2001      	movs	r0, #1
   1c2f2:	4770      	bx	lr

0001c2f4 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   1c2f4:	6983      	ldr	r3, [r0, #24]
   1c2f6:	2b01      	cmp	r3, #1
   1c2f8:	d104      	bne.n	1c304 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   1c2fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1c2fe:	7818      	ldrb	r0, [r3, #0]
   1c300:	b2c0      	uxtb	r0, r0
   1c302:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   1c304:	2004      	movs	r0, #4
}
   1c306:	4770      	bx	lr

0001c308 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   1c308:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   1c30a:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   1c30c:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   1c30e:	4620      	mov	r0, r4
   1c310:	f003 f88c 	bl	1f42c <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1c314:	4605      	mov	r5, r0
   1c316:	b118      	cbz	r0, 1c320 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   1c318:	4622      	mov	r2, r4
   1c31a:	2100      	movs	r1, #0
   1c31c:	f000 fd26 	bl	1cd6c <memset>
	}

	return vqs;
}
   1c320:	4628      	mov	r0, r5
   1c322:	bd38      	pop	{r3, r4, r5, pc}

0001c324 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   1c324:	b538      	push	{r3, r4, r5, lr}
   1c326:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   1c328:	2230      	movs	r2, #48	; 0x30
   1c32a:	2100      	movs	r1, #0
   1c32c:	f000 fd1e 	bl	1cd6c <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   1c330:	2218      	movs	r2, #24
   1c332:	2100      	movs	r1, #0
   1c334:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1c338:	f000 fd18 	bl	1cd6c <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   1c33c:	2218      	movs	r2, #24
   1c33e:	2100      	movs	r1, #0
   1c340:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1c344:	f000 fd12 	bl	1cd6c <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   1c348:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1c34c:	f7fa ff1c 	bl	17188 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1c350:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   1c354:	f7fa ff18 	bl	17188 <virtqueue_free>
	vr->shm_io = 0;
   1c358:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   1c35a:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1c35e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1c362:	f7fa fe2d 	bl	16fc0 <metal_device_close>
	metal_finish();
   1c366:	f7fa fe87 	bl	17078 <metal_finish>
	if (io->ops.close)
   1c36a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   1c36c:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1c370:	b10b      	cbz	r3, 1c376 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1c372:	4628      	mov	r0, r5
   1c374:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   1c376:	2238      	movs	r2, #56	; 0x38
   1c378:	2100      	movs	r1, #0
   1c37a:	4628      	mov	r0, r5
   1c37c:	f000 fcf6 	bl	1cd6c <memset>

	return 0;
}
   1c380:	2000      	movs	r0, #0
   1c382:	bd38      	pop	{r3, r4, r5, pc}

0001c384 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1c384:	b538      	push	{r3, r4, r5, lr}
   1c386:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1c388:	42ab      	cmp	r3, r5
{
   1c38a:	4611      	mov	r1, r2
   1c38c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1c38e:	d804      	bhi.n	1c39a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1c390:	461a      	mov	r2, r3
   1c392:	f000 fce0 	bl	1cd56 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1c396:	4620      	mov	r0, r4
   1c398:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1c39a:	2400      	movs	r4, #0
   1c39c:	e7fb      	b.n	1c396 <_copy+0x12>

0001c39e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1c39e:	f000 bce5 	b.w	1cd6c <memset>

0001c3a2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1c3a2:	09c3      	lsrs	r3, r0, #7
   1c3a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c3a8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1c3ac:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1c3b0:	b2c0      	uxtb	r0, r0
   1c3b2:	4770      	bx	lr

0001c3b4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1c3b4:	78cb      	ldrb	r3, [r1, #3]
   1c3b6:	7802      	ldrb	r2, [r0, #0]
   1c3b8:	4053      	eors	r3, r2
   1c3ba:	7003      	strb	r3, [r0, #0]
   1c3bc:	884b      	ldrh	r3, [r1, #2]
   1c3be:	7842      	ldrb	r2, [r0, #1]
   1c3c0:	4053      	eors	r3, r2
   1c3c2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1c3c4:	680a      	ldr	r2, [r1, #0]
   1c3c6:	7883      	ldrb	r3, [r0, #2]
   1c3c8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c3cc:	7083      	strb	r3, [r0, #2]
   1c3ce:	680a      	ldr	r2, [r1, #0]
   1c3d0:	78c3      	ldrb	r3, [r0, #3]
   1c3d2:	4053      	eors	r3, r2
   1c3d4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1c3d6:	79cb      	ldrb	r3, [r1, #7]
   1c3d8:	7902      	ldrb	r2, [r0, #4]
   1c3da:	4053      	eors	r3, r2
   1c3dc:	7103      	strb	r3, [r0, #4]
   1c3de:	88cb      	ldrh	r3, [r1, #6]
   1c3e0:	7942      	ldrb	r2, [r0, #5]
   1c3e2:	4053      	eors	r3, r2
   1c3e4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1c3e6:	684a      	ldr	r2, [r1, #4]
   1c3e8:	7983      	ldrb	r3, [r0, #6]
   1c3ea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c3ee:	7183      	strb	r3, [r0, #6]
   1c3f0:	684a      	ldr	r2, [r1, #4]
   1c3f2:	79c3      	ldrb	r3, [r0, #7]
   1c3f4:	4053      	eors	r3, r2
   1c3f6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1c3f8:	7acb      	ldrb	r3, [r1, #11]
   1c3fa:	7a02      	ldrb	r2, [r0, #8]
   1c3fc:	4053      	eors	r3, r2
   1c3fe:	7203      	strb	r3, [r0, #8]
   1c400:	7a42      	ldrb	r2, [r0, #9]
   1c402:	894b      	ldrh	r3, [r1, #10]
   1c404:	4053      	eors	r3, r2
   1c406:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1c408:	688a      	ldr	r2, [r1, #8]
   1c40a:	7a83      	ldrb	r3, [r0, #10]
   1c40c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c410:	7283      	strb	r3, [r0, #10]
   1c412:	688a      	ldr	r2, [r1, #8]
   1c414:	7ac3      	ldrb	r3, [r0, #11]
   1c416:	4053      	eors	r3, r2
   1c418:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1c41a:	7bcb      	ldrb	r3, [r1, #15]
   1c41c:	7b02      	ldrb	r2, [r0, #12]
   1c41e:	4053      	eors	r3, r2
   1c420:	7303      	strb	r3, [r0, #12]
   1c422:	89cb      	ldrh	r3, [r1, #14]
   1c424:	7b42      	ldrb	r2, [r0, #13]
   1c426:	4053      	eors	r3, r2
   1c428:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1c42a:	68ca      	ldr	r2, [r1, #12]
   1c42c:	7b83      	ldrb	r3, [r0, #14]
   1c42e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c432:	7383      	strb	r3, [r0, #14]
   1c434:	68ca      	ldr	r2, [r1, #12]
   1c436:	7bc3      	ldrb	r3, [r0, #15]
   1c438:	4053      	eors	r3, r2
   1c43a:	73c3      	strb	r3, [r0, #15]
}
   1c43c:	4770      	bx	lr

0001c43e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1c43e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1c440:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1c442:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1c444:	f88d 2000 	strb.w	r2, [sp]
   1c448:	7942      	ldrb	r2, [r0, #5]
   1c44a:	f88d 2001 	strb.w	r2, [sp, #1]
   1c44e:	7a82      	ldrb	r2, [r0, #10]
   1c450:	f88d 2002 	strb.w	r2, [sp, #2]
   1c454:	7bc2      	ldrb	r2, [r0, #15]
   1c456:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1c45a:	7902      	ldrb	r2, [r0, #4]
   1c45c:	f88d 2004 	strb.w	r2, [sp, #4]
   1c460:	7a42      	ldrb	r2, [r0, #9]
   1c462:	f88d 2005 	strb.w	r2, [sp, #5]
   1c466:	7b82      	ldrb	r2, [r0, #14]
   1c468:	f88d 2006 	strb.w	r2, [sp, #6]
   1c46c:	78c2      	ldrb	r2, [r0, #3]
   1c46e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1c472:	7a02      	ldrb	r2, [r0, #8]
   1c474:	f88d 2008 	strb.w	r2, [sp, #8]
   1c478:	7b42      	ldrb	r2, [r0, #13]
   1c47a:	f88d 2009 	strb.w	r2, [sp, #9]
   1c47e:	7882      	ldrb	r2, [r0, #2]
   1c480:	f88d 200a 	strb.w	r2, [sp, #10]
   1c484:	79c2      	ldrb	r2, [r0, #7]
   1c486:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1c48a:	7b02      	ldrb	r2, [r0, #12]
   1c48c:	f88d 200c 	strb.w	r2, [sp, #12]
   1c490:	7842      	ldrb	r2, [r0, #1]
   1c492:	f88d 200d 	strb.w	r2, [sp, #13]
   1c496:	7982      	ldrb	r2, [r0, #6]
   1c498:	f88d 200e 	strb.w	r2, [sp, #14]
   1c49c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1c4a0:	2310      	movs	r3, #16
   1c4a2:	466a      	mov	r2, sp
   1c4a4:	4619      	mov	r1, r3
   1c4a6:	f7ff ff6d 	bl	1c384 <_copy>
}
   1c4aa:	b005      	add	sp, #20
   1c4ac:	f85d fb04 	ldr.w	pc, [sp], #4

0001c4b0 <mult_row_column>:
{
   1c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4b2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1c4b4:	7808      	ldrb	r0, [r1, #0]
{
   1c4b6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1c4b8:	f7ff ff73 	bl	1c3a2 <_double_byte>
   1c4bc:	4605      	mov	r5, r0
   1c4be:	7860      	ldrb	r0, [r4, #1]
   1c4c0:	f7ff ff6f 	bl	1c3a2 <_double_byte>
   1c4c4:	78a2      	ldrb	r2, [r4, #2]
   1c4c6:	7863      	ldrb	r3, [r4, #1]
   1c4c8:	4053      	eors	r3, r2
   1c4ca:	78e2      	ldrb	r2, [r4, #3]
   1c4cc:	4053      	eors	r3, r2
   1c4ce:	405d      	eors	r5, r3
   1c4d0:	4068      	eors	r0, r5
   1c4d2:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1c4d4:	7860      	ldrb	r0, [r4, #1]
   1c4d6:	7827      	ldrb	r7, [r4, #0]
   1c4d8:	f7ff ff63 	bl	1c3a2 <_double_byte>
   1c4dc:	4605      	mov	r5, r0
   1c4de:	78a0      	ldrb	r0, [r4, #2]
   1c4e0:	f7ff ff5f 	bl	1c3a2 <_double_byte>
   1c4e4:	78a3      	ldrb	r3, [r4, #2]
   1c4e6:	405f      	eors	r7, r3
   1c4e8:	78e3      	ldrb	r3, [r4, #3]
   1c4ea:	405f      	eors	r7, r3
   1c4ec:	407d      	eors	r5, r7
   1c4ee:	4068      	eors	r0, r5
   1c4f0:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1c4f2:	7863      	ldrb	r3, [r4, #1]
   1c4f4:	7827      	ldrb	r7, [r4, #0]
   1c4f6:	78a0      	ldrb	r0, [r4, #2]
   1c4f8:	405f      	eors	r7, r3
   1c4fa:	f7ff ff52 	bl	1c3a2 <_double_byte>
   1c4fe:	4605      	mov	r5, r0
   1c500:	78e0      	ldrb	r0, [r4, #3]
   1c502:	f7ff ff4e 	bl	1c3a2 <_double_byte>
   1c506:	78e3      	ldrb	r3, [r4, #3]
   1c508:	405f      	eors	r7, r3
   1c50a:	407d      	eors	r5, r7
   1c50c:	4068      	eors	r0, r5
   1c50e:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1c510:	7820      	ldrb	r0, [r4, #0]
   1c512:	f7ff ff46 	bl	1c3a2 <_double_byte>
   1c516:	7862      	ldrb	r2, [r4, #1]
   1c518:	7823      	ldrb	r3, [r4, #0]
   1c51a:	4053      	eors	r3, r2
   1c51c:	78a2      	ldrb	r2, [r4, #2]
   1c51e:	4053      	eors	r3, r2
   1c520:	ea80 0503 	eor.w	r5, r0, r3
   1c524:	78e0      	ldrb	r0, [r4, #3]
   1c526:	f7ff ff3c 	bl	1c3a2 <_double_byte>
   1c52a:	b2ed      	uxtb	r5, r5
   1c52c:	4045      	eors	r5, r0
   1c52e:	70f5      	strb	r5, [r6, #3]
}
   1c530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c532 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1c532:	b570      	push	{r4, r5, r6, lr}
   1c534:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1c536:	4605      	mov	r5, r0
{
   1c538:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1c53a:	2800      	cmp	r0, #0
   1c53c:	d049      	beq.n	1c5d2 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1c53e:	2900      	cmp	r1, #0
   1c540:	d049      	beq.n	1c5d6 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1c542:	2a00      	cmp	r2, #0
   1c544:	d049      	beq.n	1c5da <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1c546:	2310      	movs	r3, #16
   1c548:	460a      	mov	r2, r1
   1c54a:	4668      	mov	r0, sp
   1c54c:	4619      	mov	r1, r3
   1c54e:	f7ff ff19 	bl	1c384 <_copy>
	add_round_key(state, s->words);
   1c552:	4621      	mov	r1, r4
   1c554:	4668      	mov	r0, sp
   1c556:	f7ff ff2d 	bl	1c3b4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1c55a:	3410      	adds	r4, #16
   1c55c:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1c560:	4668      	mov	r0, sp
   1c562:	f7f0 f9a3 	bl	c8ac <sub_bytes>
		shift_rows(state);
   1c566:	4668      	mov	r0, sp
   1c568:	f7ff ff69 	bl	1c43e <shift_rows>
	mult_row_column(t, s);
   1c56c:	4669      	mov	r1, sp
   1c56e:	a804      	add	r0, sp, #16
   1c570:	f7ff ff9e 	bl	1c4b0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1c574:	a901      	add	r1, sp, #4
   1c576:	a805      	add	r0, sp, #20
   1c578:	f7ff ff9a 	bl	1c4b0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1c57c:	a902      	add	r1, sp, #8
   1c57e:	a806      	add	r0, sp, #24
   1c580:	f7ff ff96 	bl	1c4b0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1c584:	a903      	add	r1, sp, #12
   1c586:	a807      	add	r0, sp, #28
   1c588:	f7ff ff92 	bl	1c4b0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1c58c:	2310      	movs	r3, #16
   1c58e:	4668      	mov	r0, sp
   1c590:	4619      	mov	r1, r3
   1c592:	eb0d 0203 	add.w	r2, sp, r3
   1c596:	f7ff fef5 	bl	1c384 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1c59a:	4621      	mov	r1, r4
   1c59c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1c59e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1c5a0:	f7ff ff08 	bl	1c3b4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1c5a4:	42b4      	cmp	r4, r6
   1c5a6:	d1db      	bne.n	1c560 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1c5a8:	f7f0 f980 	bl	c8ac <sub_bytes>
	shift_rows(state);
   1c5ac:	4668      	mov	r0, sp
   1c5ae:	f7ff ff46 	bl	1c43e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1c5b2:	4621      	mov	r1, r4
   1c5b4:	4668      	mov	r0, sp
   1c5b6:	f7ff fefd 	bl	1c3b4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1c5ba:	2310      	movs	r3, #16
   1c5bc:	466a      	mov	r2, sp
   1c5be:	4619      	mov	r1, r3
   1c5c0:	4628      	mov	r0, r5
   1c5c2:	f7ff fedf 	bl	1c384 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1c5c6:	4668      	mov	r0, sp
   1c5c8:	2210      	movs	r2, #16
   1c5ca:	2100      	movs	r1, #0
   1c5cc:	f7ff fee7 	bl	1c39e <_set>

	return TC_CRYPTO_SUCCESS;
   1c5d0:	2001      	movs	r0, #1
}
   1c5d2:	b008      	add	sp, #32
   1c5d4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1c5d6:	4608      	mov	r0, r1
   1c5d8:	e7fb      	b.n	1c5d2 <tc_aes_encrypt+0xa0>
   1c5da:	4610      	mov	r0, r2
   1c5dc:	e7f9      	b.n	1c5d2 <tc_aes_encrypt+0xa0>

0001c5de <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1c5de:	460a      	mov	r2, r1
{
   1c5e0:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1c5e2:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1c5e6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1c5e8:	2b00      	cmp	r3, #0
   1c5ea:	bfac      	ite	ge
   1c5ec:	2300      	movge	r3, #0
   1c5ee:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1c5f0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1c5f4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1c5f8:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1c5fa:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1c5fe:	d002      	beq.n	1c606 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1c600:	7813      	ldrb	r3, [r2, #0]
   1c602:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1c604:	e7f4      	b.n	1c5f0 <gf_double+0x12>
	}
}
   1c606:	bd10      	pop	{r4, pc}

0001c608 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1c608:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1c60a:	b120      	cbz	r0, 1c616 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1c60c:	2258      	movs	r2, #88	; 0x58
   1c60e:	2100      	movs	r1, #0
   1c610:	f7ff fec5 	bl	1c39e <_set>
   1c614:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1c616:	bd08      	pop	{r3, pc}

0001c618 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1c618:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1c61a:	4604      	mov	r4, r0
   1c61c:	b188      	cbz	r0, 1c642 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1c61e:	2210      	movs	r2, #16
   1c620:	2100      	movs	r1, #0
   1c622:	f7ff febc 	bl	1c39e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1c626:	2210      	movs	r2, #16
   1c628:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1c62c:	2100      	movs	r1, #0
   1c62e:	f7ff feb6 	bl	1c39e <_set>
	s->leftover_offset = 0;
   1c632:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1c634:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1c636:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1c638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1c63c:	2001      	movs	r0, #1
   1c63e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1c642:	bd10      	pop	{r4, pc}

0001c644 <tc_cmac_setup>:
{
   1c644:	b570      	push	{r4, r5, r6, lr}
   1c646:	4604      	mov	r4, r0
   1c648:	460d      	mov	r5, r1
   1c64a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1c64c:	b310      	cbz	r0, 1c694 <tc_cmac_setup+0x50>
   1c64e:	b311      	cbz	r1, 1c696 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1c650:	2258      	movs	r2, #88	; 0x58
   1c652:	2100      	movs	r1, #0
   1c654:	f7ff fea3 	bl	1c39e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1c658:	4629      	mov	r1, r5
   1c65a:	4630      	mov	r0, r6
	s->sched = sched;
   1c65c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1c65e:	f7f0 f931 	bl	c8c4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1c662:	2210      	movs	r2, #16
   1c664:	2100      	movs	r1, #0
   1c666:	4620      	mov	r0, r4
   1c668:	f7ff fe99 	bl	1c39e <_set>
	gf_double (s->K1, s->iv);
   1c66c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1c670:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c672:	4621      	mov	r1, r4
   1c674:	4620      	mov	r0, r4
   1c676:	f7ff ff5c 	bl	1c532 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1c67a:	4621      	mov	r1, r4
   1c67c:	4628      	mov	r0, r5
   1c67e:	f7ff ffae 	bl	1c5de <gf_double>
	gf_double (s->K2, s->K1);
   1c682:	4629      	mov	r1, r5
   1c684:	f104 0020 	add.w	r0, r4, #32
   1c688:	f7ff ffa9 	bl	1c5de <gf_double>
	tc_cmac_init(s);
   1c68c:	4620      	mov	r0, r4
   1c68e:	f7ff ffc3 	bl	1c618 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1c692:	2001      	movs	r0, #1
}
   1c694:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1c696:	4608      	mov	r0, r1
   1c698:	e7fc      	b.n	1c694 <tc_cmac_setup+0x50>

0001c69a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1c69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c69e:	460e      	mov	r6, r1
   1c6a0:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1c6a2:	4604      	mov	r4, r0
   1c6a4:	2800      	cmp	r0, #0
   1c6a6:	d060      	beq.n	1c76a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1c6a8:	b1fa      	cbz	r2, 1c6ea <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1c6aa:	2900      	cmp	r1, #0
   1c6ac:	d05d      	beq.n	1c76a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1c6ae:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1c6b2:	ea53 0102 	orrs.w	r1, r3, r2
   1c6b6:	d058      	beq.n	1c76a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1c6b8:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1c6ba:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1c6be:	f142 32ff 	adc.w	r2, r2, #4294967295
   1c6c2:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1c6c6:	f1b8 0f00 	cmp.w	r8, #0
   1c6ca:	d02c      	beq.n	1c726 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1c6cc:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1c6d0:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1c6d4:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1c6d6:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1c6d8:	d20a      	bcs.n	1c6f0 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1c6da:	462b      	mov	r3, r5
   1c6dc:	4632      	mov	r2, r6
   1c6de:	4629      	mov	r1, r5
   1c6e0:	f7ff fe50 	bl	1c384 <_copy>
			s->leftover_offset += data_length;
   1c6e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c6e6:	442b      	add	r3, r5
   1c6e8:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1c6ea:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1c6f0:	463b      	mov	r3, r7
   1c6f2:	4632      	mov	r2, r6
   1c6f4:	4639      	mov	r1, r7
   1c6f6:	f7ff fe45 	bl	1c384 <_copy>
		s->leftover_offset = 0;
   1c6fa:	2300      	movs	r3, #0
   1c6fc:	3d10      	subs	r5, #16
   1c6fe:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1c700:	4445      	add	r5, r8
		data += remaining_space;
   1c702:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c704:	1e63      	subs	r3, r4, #1
   1c706:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1c70a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1c70e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c712:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1c714:	ea82 0200 	eor.w	r2, r2, r0
   1c718:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c71a:	d1f6      	bne.n	1c70a <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1c71c:	4621      	mov	r1, r4
   1c71e:	4620      	mov	r0, r4
   1c720:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c722:	f7ff ff06 	bl	1c532 <tc_aes_encrypt>
   1c726:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1c72a:	2d10      	cmp	r5, #16
   1c72c:	d80a      	bhi.n	1c744 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1c72e:	2d00      	cmp	r5, #0
   1c730:	d0db      	beq.n	1c6ea <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1c732:	462b      	mov	r3, r5
   1c734:	4632      	mov	r2, r6
   1c736:	4629      	mov	r1, r5
   1c738:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1c73c:	f7ff fe22 	bl	1c384 <_copy>
		s->leftover_offset = data_length;
   1c740:	6465      	str	r5, [r4, #68]	; 0x44
   1c742:	e7d2      	b.n	1c6ea <tc_cmac_update+0x50>
   1c744:	1e63      	subs	r3, r4, #1
   1c746:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1c748:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1c74c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c750:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1c752:	ea82 0200 	eor.w	r2, r2, r0
   1c756:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c758:	d1f6      	bne.n	1c748 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1c75a:	4621      	mov	r1, r4
   1c75c:	4620      	mov	r0, r4
   1c75e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c760:	f7ff fee7 	bl	1c532 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1c764:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1c766:	3d10      	subs	r5, #16
   1c768:	e7df      	b.n	1c72a <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1c76a:	2000      	movs	r0, #0
   1c76c:	e7be      	b.n	1c6ec <tc_cmac_update+0x52>

0001c76e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1c76e:	b570      	push	{r4, r5, r6, lr}
   1c770:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1c772:	4605      	mov	r5, r0
   1c774:	b1f0      	cbz	r0, 1c7b4 <tc_cmac_final+0x46>
   1c776:	b371      	cbz	r1, 1c7d6 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1c778:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1c77a:	2a10      	cmp	r2, #16
   1c77c:	d11b      	bne.n	1c7b6 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1c77e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c780:	1e63      	subs	r3, r4, #1
   1c782:	3901      	subs	r1, #1
   1c784:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1c788:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1c78c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c790:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1c792:	ea82 0206 	eor.w	r2, r2, r6
   1c796:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1c79a:	ea82 0206 	eor.w	r2, r2, r6
   1c79e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1c7a0:	d1f2      	bne.n	1c788 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1c7a2:	4621      	mov	r1, r4
   1c7a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c7a6:	4628      	mov	r0, r5
   1c7a8:	f7ff fec3 	bl	1c532 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1c7ac:	4620      	mov	r0, r4
   1c7ae:	f7ff ff2b 	bl	1c608 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1c7b2:	2001      	movs	r0, #1
}
   1c7b4:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1c7b6:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1c7ba:	2100      	movs	r1, #0
   1c7bc:	f1c2 0210 	rsb	r2, r2, #16
   1c7c0:	4420      	add	r0, r4
   1c7c2:	f7ff fdec 	bl	1c39e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1c7c6:	2280      	movs	r2, #128	; 0x80
   1c7c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1c7ca:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1c7ce:	4423      	add	r3, r4
   1c7d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1c7d4:	e7d4      	b.n	1c780 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1c7d6:	4608      	mov	r0, r1
   1c7d8:	e7ec      	b.n	1c7b4 <tc_cmac_final+0x46>

0001c7da <tc_sha256_update>:
{
   1c7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c7dc:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1c7de:	b110      	cbz	r0, 1c7e6 <tc_sha256_update+0xc>
   1c7e0:	b1f9      	cbz	r1, 1c822 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1c7e2:	b90a      	cbnz	r2, 1c7e8 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1c7e4:	2001      	movs	r0, #1
}
   1c7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1c7e8:	2700      	movs	r7, #0
   1c7ea:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1c7ec:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   1c7f0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1c7f2:	1c5a      	adds	r2, r3, #1
   1c7f4:	6682      	str	r2, [r0, #104]	; 0x68
   1c7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c7fa:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1c7fc:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1c7fe:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1c802:	d90b      	bls.n	1c81c <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   1c804:	4631      	mov	r1, r6
   1c806:	f7f0 f8b1 	bl	c96c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1c80a:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1c80e:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1c812:	f142 0200 	adc.w	r2, r2, #0
   1c816:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1c81a:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   1c81c:	42a5      	cmp	r5, r4
   1c81e:	d1e7      	bne.n	1c7f0 <tc_sha256_update+0x16>
   1c820:	e7e0      	b.n	1c7e4 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   1c822:	4608      	mov	r0, r1
   1c824:	e7df      	b.n	1c7e6 <tc_sha256_update+0xc>

0001c826 <tc_sha256_final>:
{
   1c826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c828:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1c82a:	4605      	mov	r5, r0
   1c82c:	2800      	cmp	r0, #0
   1c82e:	d054      	beq.n	1c8da <tc_sha256_final+0xb4>
   1c830:	2900      	cmp	r1, #0
   1c832:	d053      	beq.n	1c8dc <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   1c834:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1c836:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1c83a:	00d8      	lsls	r0, r3, #3
   1c83c:	1812      	adds	r2, r2, r0
   1c83e:	f141 0100 	adc.w	r1, r1, #0
   1c842:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1c846:	2280      	movs	r2, #128	; 0x80
   1c848:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1c84a:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1c84c:	4423      	add	r3, r4
   1c84e:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1c850:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1c854:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1c858:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1c85c:	d90a      	bls.n	1c874 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1c85e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1c862:	4639      	mov	r1, r7
   1c864:	4430      	add	r0, r6
   1c866:	f7ff fd9a 	bl	1c39e <_set>
		compress(s->iv, s->leftover);
   1c86a:	4631      	mov	r1, r6
   1c86c:	4620      	mov	r0, r4
   1c86e:	f7f0 f87d 	bl	c96c <compress>
		s->leftover_offset = 0;
   1c872:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1c874:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1c876:	2100      	movs	r1, #0
   1c878:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1c87c:	4430      	add	r0, r6
   1c87e:	f7ff fd8e 	bl	1c39e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1c882:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1c884:	4631      	mov	r1, r6
   1c886:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1c888:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1c88a:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1c88c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1c88e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1c892:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1c896:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1c898:	0e1b      	lsrs	r3, r3, #24
   1c89a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   1c89e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1c8a0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1c8a4:	f7f0 f862 	bl	c96c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1c8a8:	1d2b      	adds	r3, r5, #4
   1c8aa:	1f21      	subs	r1, r4, #4
   1c8ac:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1c8ae:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1c8b2:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1c8b4:	0e10      	lsrs	r0, r2, #24
   1c8b6:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1c8ba:	0c10      	lsrs	r0, r2, #16
   1c8bc:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1c8c0:	0a10      	lsrs	r0, r2, #8
   1c8c2:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1c8c6:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1c8ca:	42ab      	cmp	r3, r5
   1c8cc:	d1ef      	bne.n	1c8ae <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   1c8ce:	4620      	mov	r0, r4
   1c8d0:	2270      	movs	r2, #112	; 0x70
   1c8d2:	2100      	movs	r1, #0
   1c8d4:	f7ff fd63 	bl	1c39e <_set>
	return TC_CRYPTO_SUCCESS;
   1c8d8:	2001      	movs	r0, #1
}
   1c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1c8dc:	4608      	mov	r0, r1
   1c8de:	e7fc      	b.n	1c8da <tc_sha256_final+0xb4>

0001c8e0 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1c8e0:	b530      	push	{r4, r5, lr}
   1c8e2:	1e43      	subs	r3, r0, #1
   1c8e4:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1c8e6:	42a9      	cmp	r1, r5
   1c8e8:	d106      	bne.n	1c8f8 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1c8ea:	2136      	movs	r1, #54	; 0x36
   1c8ec:	245c      	movs	r4, #92	; 0x5c
   1c8ee:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1c8f0:	1a13      	subs	r3, r2, r0
   1c8f2:	2b3f      	cmp	r3, #63	; 0x3f
   1c8f4:	d90c      	bls.n	1c910 <rekey+0x30>
	}
}
   1c8f6:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1c8f8:	780c      	ldrb	r4, [r1, #0]
   1c8fa:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1c8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1c902:	f811 4b01 	ldrb.w	r4, [r1], #1
   1c906:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1c90a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1c90e:	e7ea      	b.n	1c8e6 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1c910:	f802 1b01 	strb.w	r1, [r2], #1
   1c914:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1c918:	e7ea      	b.n	1c8f0 <rekey+0x10>

0001c91a <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1c91a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c91c:	460e      	mov	r6, r1
   1c91e:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1c920:	4605      	mov	r5, r0
{
   1c922:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1c924:	b1b8      	cbz	r0, 1c956 <tc_hmac_set_key+0x3c>
   1c926:	b341      	cbz	r1, 1c97a <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1c928:	b34a      	cbz	r2, 1c97e <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1c92a:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1c92c:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1c930:	d813      	bhi.n	1c95a <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1c932:	a810      	add	r0, sp, #64	; 0x40
   1c934:	f7f0 f904 	bl	cb40 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1c938:	4622      	mov	r2, r4
   1c93a:	4669      	mov	r1, sp
   1c93c:	a810      	add	r0, sp, #64	; 0x40
   1c93e:	f7ff ff4c 	bl	1c7da <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1c942:	a910      	add	r1, sp, #64	; 0x40
   1c944:	a834      	add	r0, sp, #208	; 0xd0
   1c946:	f7ff ff6e 	bl	1c826 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1c94a:	4622      	mov	r2, r4
   1c94c:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1c94e:	4638      	mov	r0, r7
   1c950:	f7ff ffc6 	bl	1c8e0 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1c954:	2001      	movs	r0, #1
}
   1c956:	b04d      	add	sp, #308	; 0x134
   1c958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1c95a:	f7f0 f8f1 	bl	cb40 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1c95e:	4622      	mov	r2, r4
   1c960:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1c962:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1c966:	4628      	mov	r0, r5
   1c968:	f7ff ff37 	bl	1c7da <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1c96c:	4629      	mov	r1, r5
   1c96e:	4620      	mov	r0, r4
   1c970:	f7ff ff59 	bl	1c826 <tc_sha256_final>
		rekey(ctx->key,
   1c974:	2220      	movs	r2, #32
   1c976:	4621      	mov	r1, r4
   1c978:	e7e9      	b.n	1c94e <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1c97a:	4608      	mov	r0, r1
   1c97c:	e7eb      	b.n	1c956 <tc_hmac_set_key+0x3c>
   1c97e:	4610      	mov	r0, r2
   1c980:	e7e9      	b.n	1c956 <tc_hmac_set_key+0x3c>

0001c982 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1c982:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1c984:	4604      	mov	r4, r0
   1c986:	b140      	cbz	r0, 1c99a <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1c988:	f7f0 f8da 	bl	cb40 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1c98c:	2240      	movs	r2, #64	; 0x40
   1c98e:	4620      	mov	r0, r4
   1c990:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1c994:	f7ff ff21 	bl	1c7da <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1c998:	2001      	movs	r0, #1
}
   1c99a:	bd10      	pop	{r4, pc}

0001c99c <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1c99c:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1c99e:	b110      	cbz	r0, 1c9a6 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1c9a0:	f7ff ff1b 	bl	1c7da <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1c9a4:	2001      	movs	r0, #1
}
   1c9a6:	bd08      	pop	{r3, pc}

0001c9a8 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1c9a8:	b570      	push	{r4, r5, r6, lr}
   1c9aa:	460e      	mov	r6, r1
   1c9ac:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1c9ae:	4605      	mov	r5, r0
   1c9b0:	b1f0      	cbz	r0, 1c9f0 <tc_hmac_final+0x48>
   1c9b2:	2920      	cmp	r1, #32
   1c9b4:	d11c      	bne.n	1c9f0 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1c9b6:	b1ea      	cbz	r2, 1c9f4 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1c9b8:	4611      	mov	r1, r2
   1c9ba:	f7ff ff34 	bl	1c826 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1c9be:	4620      	mov	r0, r4
   1c9c0:	f7f0 f8be 	bl	cb40 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1c9c4:	2240      	movs	r2, #64	; 0x40
   1c9c6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1c9ca:	4620      	mov	r0, r4
   1c9cc:	f7ff ff05 	bl	1c7da <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1c9d0:	4632      	mov	r2, r6
   1c9d2:	4629      	mov	r1, r5
   1c9d4:	4620      	mov	r0, r4
   1c9d6:	f7ff ff00 	bl	1c7da <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1c9da:	4621      	mov	r1, r4
   1c9dc:	4628      	mov	r0, r5
   1c9de:	f7ff ff22 	bl	1c826 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1c9e2:	4620      	mov	r0, r4
   1c9e4:	22f0      	movs	r2, #240	; 0xf0
   1c9e6:	2100      	movs	r1, #0
   1c9e8:	f7ff fcd9 	bl	1c39e <_set>

	return TC_CRYPTO_SUCCESS;
   1c9ec:	2001      	movs	r0, #1
}
   1c9ee:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1c9f0:	2000      	movs	r0, #0
   1c9f2:	e7fc      	b.n	1c9ee <tc_hmac_final+0x46>
   1c9f4:	4610      	mov	r0, r2
   1c9f6:	e7fa      	b.n	1c9ee <tc_hmac_final+0x46>

0001c9f8 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1c9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9fc:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1c9fe:	f04f 0b01 	mov.w	fp, #1
{
   1ca02:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1ca04:	2300      	movs	r3, #0
{
   1ca06:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ca08:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1ca0c:	4631      	mov	r1, r6
{
   1ca0e:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ca10:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1ca12:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1ca16:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1ca1a:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ca1e:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ca22:	f7ff ff7a 	bl	1c91a <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1ca26:	4620      	mov	r0, r4
   1ca28:	f7ff ffab 	bl	1c982 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ca2c:	2220      	movs	r2, #32
   1ca2e:	4629      	mov	r1, r5
   1ca30:	4620      	mov	r0, r4
   1ca32:	f7ff ffb3 	bl	1c99c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1ca36:	465a      	mov	r2, fp
   1ca38:	4620      	mov	r0, r4
   1ca3a:	f10d 0106 	add.w	r1, sp, #6
   1ca3e:	f7ff ffad 	bl	1c99c <tc_hmac_update>

	if (data && datalen)
   1ca42:	f1b8 0f00 	cmp.w	r8, #0
   1ca46:	d007      	beq.n	1ca58 <update+0x60>
   1ca48:	f1b9 0f00 	cmp.w	r9, #0
   1ca4c:	d004      	beq.n	1ca58 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1ca4e:	464a      	mov	r2, r9
   1ca50:	4641      	mov	r1, r8
   1ca52:	4620      	mov	r0, r4
   1ca54:	f7ff ffa2 	bl	1c99c <tc_hmac_update>
	if (additional_data && additional_datalen)
   1ca58:	b13f      	cbz	r7, 1ca6a <update+0x72>
   1ca5a:	f1ba 0f00 	cmp.w	sl, #0
   1ca5e:	d004      	beq.n	1ca6a <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1ca60:	4652      	mov	r2, sl
   1ca62:	4639      	mov	r1, r7
   1ca64:	4620      	mov	r0, r4
   1ca66:	f7ff ff99 	bl	1c99c <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1ca6a:	4622      	mov	r2, r4
   1ca6c:	2120      	movs	r1, #32
   1ca6e:	4630      	mov	r0, r6
   1ca70:	f7ff ff9a 	bl	1c9a8 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ca74:	2220      	movs	r2, #32
   1ca76:	4631      	mov	r1, r6
   1ca78:	4620      	mov	r0, r4
   1ca7a:	f7ff ff4e 	bl	1c91a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1ca7e:	4620      	mov	r0, r4
   1ca80:	f7ff ff7f 	bl	1c982 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ca84:	2220      	movs	r2, #32
   1ca86:	4629      	mov	r1, r5
   1ca88:	4620      	mov	r0, r4
   1ca8a:	f7ff ff87 	bl	1c99c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ca8e:	4622      	mov	r2, r4
   1ca90:	2120      	movs	r1, #32
   1ca92:	4628      	mov	r0, r5
   1ca94:	f7ff ff88 	bl	1c9a8 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1ca98:	f1b8 0f00 	cmp.w	r8, #0
   1ca9c:	d03a      	beq.n	1cb14 <update+0x11c>
   1ca9e:	f1b9 0f00 	cmp.w	r9, #0
   1caa2:	d037      	beq.n	1cb14 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1caa4:	2220      	movs	r2, #32
   1caa6:	4631      	mov	r1, r6
   1caa8:	4620      	mov	r0, r4
   1caaa:	f7ff ff36 	bl	1c91a <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1caae:	4620      	mov	r0, r4
   1cab0:	f7ff ff67 	bl	1c982 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1cab4:	2220      	movs	r2, #32
   1cab6:	4629      	mov	r1, r5
   1cab8:	4620      	mov	r0, r4
   1caba:	f7ff ff6f 	bl	1c99c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1cabe:	2201      	movs	r2, #1
   1cac0:	f10d 0107 	add.w	r1, sp, #7
   1cac4:	4620      	mov	r0, r4
   1cac6:	f7ff ff69 	bl	1c99c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1caca:	464a      	mov	r2, r9
   1cacc:	4641      	mov	r1, r8
   1cace:	4620      	mov	r0, r4
   1cad0:	f7ff ff64 	bl	1c99c <tc_hmac_update>
	if (additional_data && additional_datalen)
   1cad4:	b13f      	cbz	r7, 1cae6 <update+0xee>
   1cad6:	f1ba 0f00 	cmp.w	sl, #0
   1cada:	d004      	beq.n	1cae6 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1cadc:	4652      	mov	r2, sl
   1cade:	4639      	mov	r1, r7
   1cae0:	4620      	mov	r0, r4
   1cae2:	f7ff ff5b 	bl	1c99c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1cae6:	4622      	mov	r2, r4
   1cae8:	2120      	movs	r1, #32
   1caea:	4630      	mov	r0, r6
   1caec:	f7ff ff5c 	bl	1c9a8 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1caf0:	2220      	movs	r2, #32
   1caf2:	4631      	mov	r1, r6
   1caf4:	4620      	mov	r0, r4
   1caf6:	f7ff ff10 	bl	1c91a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1cafa:	4620      	mov	r0, r4
   1cafc:	f7ff ff41 	bl	1c982 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1cb00:	2220      	movs	r2, #32
   1cb02:	4629      	mov	r1, r5
   1cb04:	4620      	mov	r0, r4
   1cb06:	f7ff ff49 	bl	1c99c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1cb0a:	4622      	mov	r2, r4
   1cb0c:	2120      	movs	r1, #32
   1cb0e:	4628      	mov	r0, r5
   1cb10:	f7ff ff4a 	bl	1c9a8 <tc_hmac_final>
}
   1cb14:	b003      	add	sp, #12
   1cb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cb1a <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1cb1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb1c:	460c      	mov	r4, r1
   1cb1e:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1cb20:	4605      	mov	r5, r0
   1cb22:	b1b0      	cbz	r0, 1cb52 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1cb24:	b1b9      	cbz	r1, 1cb56 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1cb26:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1cb28:	2220      	movs	r2, #32
   1cb2a:	2100      	movs	r1, #0
   1cb2c:	30f0      	adds	r0, #240	; 0xf0
   1cb2e:	f7ff fc36 	bl	1c39e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1cb32:	2220      	movs	r2, #32
   1cb34:	2101      	movs	r1, #1
   1cb36:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1cb3a:	f7ff fc30 	bl	1c39e <_set>
	update(prng, personalization, plen, 0, 0);
   1cb3e:	4628      	mov	r0, r5
   1cb40:	4633      	mov	r3, r6
   1cb42:	463a      	mov	r2, r7
   1cb44:	4621      	mov	r1, r4
   1cb46:	9600      	str	r6, [sp, #0]
   1cb48:	f7ff ff56 	bl	1c9f8 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1cb4c:	2001      	movs	r0, #1
	prng->countdown = 0;
   1cb4e:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1cb52:	b003      	add	sp, #12
   1cb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1cb56:	4608      	mov	r0, r1
   1cb58:	e7fb      	b.n	1cb52 <tc_hmac_prng_init+0x38>

0001cb5a <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1cb5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb5c:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1cb5e:	4605      	mov	r5, r0
   1cb60:	b180      	cbz	r0, 1cb84 <tc_hmac_prng_reseed+0x2a>
   1cb62:	b179      	cbz	r1, 1cb84 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1cb64:	2a1f      	cmp	r2, #31
   1cb66:	d90d      	bls.n	1cb84 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1cb68:	b153      	cbz	r3, 1cb80 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1cb6a:	b16c      	cbz	r4, 1cb88 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1cb6c:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1cb6e:	f7ff ff43 	bl	1c9f8 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1cb72:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1cb76:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1cb78:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1cb7c:	b003      	add	sp, #12
   1cb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1cb80:	9300      	str	r3, [sp, #0]
   1cb82:	e7f4      	b.n	1cb6e <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1cb84:	2000      	movs	r0, #0
   1cb86:	e7f9      	b.n	1cb7c <tc_hmac_prng_reseed+0x22>
   1cb88:	4620      	mov	r0, r4
   1cb8a:	e7f7      	b.n	1cb7c <tc_hmac_prng_reseed+0x22>

0001cb8c <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1cb8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cb90:	460d      	mov	r5, r1
   1cb92:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1cb94:	4680      	mov	r8, r0
   1cb96:	b3d8      	cbz	r0, 1cc10 <tc_hmac_prng_generate+0x84>
   1cb98:	b3d2      	cbz	r2, 1cc10 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1cb9a:	1e4b      	subs	r3, r1, #1
   1cb9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1cba0:	d236      	bcs.n	1cc10 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1cba2:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1cba6:	b3ab      	cbz	r3, 1cc14 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1cba8:	3b01      	subs	r3, #1
   1cbaa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1cbae:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1cbb2:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1cbb6:	2220      	movs	r2, #32
   1cbb8:	4649      	mov	r1, r9
   1cbba:	4620      	mov	r0, r4
   1cbbc:	f7ff fead 	bl	1c91a <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1cbc0:	4620      	mov	r0, r4
   1cbc2:	f7ff fede 	bl	1c982 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1cbc6:	2220      	movs	r2, #32
   1cbc8:	4639      	mov	r1, r7
   1cbca:	4620      	mov	r0, r4
   1cbcc:	f7ff fee6 	bl	1c99c <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1cbd0:	4622      	mov	r2, r4
   1cbd2:	2120      	movs	r1, #32
   1cbd4:	4638      	mov	r0, r7
   1cbd6:	f7ff fee7 	bl	1c9a8 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1cbda:	2d20      	cmp	r5, #32
   1cbdc:	462e      	mov	r6, r5
   1cbde:	bf28      	it	cs
   1cbe0:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1cbe2:	4640      	mov	r0, r8
   1cbe4:	4633      	mov	r3, r6
   1cbe6:	463a      	mov	r2, r7
   1cbe8:	4631      	mov	r1, r6
   1cbea:	f7ff fbcb 	bl	1c384 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1cbee:	2d20      	cmp	r5, #32
   1cbf0:	bf38      	it	cc
   1cbf2:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1cbf4:	3d20      	subs	r5, #32
		out += bufferlen;
   1cbf6:	44b0      	add	r8, r6
	while (outlen != 0) {
   1cbf8:	d1dd      	bne.n	1cbb6 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1cbfa:	4620      	mov	r0, r4
   1cbfc:	462b      	mov	r3, r5
   1cbfe:	462a      	mov	r2, r5
   1cc00:	4629      	mov	r1, r5
   1cc02:	9500      	str	r5, [sp, #0]
   1cc04:	f7ff fef8 	bl	1c9f8 <update>

	return TC_CRYPTO_SUCCESS;
   1cc08:	2001      	movs	r0, #1
}
   1cc0a:	b003      	add	sp, #12
   1cc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1cc10:	2000      	movs	r0, #0
   1cc12:	e7fa      	b.n	1cc0a <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1cc14:	f04f 30ff 	mov.w	r0, #4294967295
   1cc18:	e7f7      	b.n	1cc0a <tc_hmac_prng_generate+0x7e>

0001cc1a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1cc1a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1cc1c:	6800      	ldr	r0, [r0, #0]
   1cc1e:	f7ef bfd9 	b.w	cbd4 <z_arm_fatal_error>

0001cc22 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1cc22:	2100      	movs	r1, #0
   1cc24:	2001      	movs	r0, #1
   1cc26:	f7ef bfd5 	b.w	cbd4 <z_arm_fatal_error>

0001cc2a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1cc2a:	b508      	push	{r3, lr}
	handler();
   1cc2c:	f7f0 f89a 	bl	cd64 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1cc30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1cc34:	f7f0 b964 	b.w	cf00 <z_arm_exc_exit>

0001cc38 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1cc38:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1cc3a:	f383 880b 	msr	PSPLIM, r3
}
   1cc3e:	4770      	bx	lr

0001cc40 <z_log_msg_static_create.constprop.0>:
   1cc40:	2300      	movs	r3, #0
   1cc42:	f7ee bde1 	b.w	b808 <z_impl_z_log_msg_static_create>

0001cc46 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1cc46:	4770      	bx	lr

0001cc48 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   1cc48:	4770      	bx	lr

0001cc4a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1cc4a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1cc4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1cc52:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1cc54:	bf08      	it	eq
   1cc56:	f06f 0015 	mvneq.w	r0, #21
   1cc5a:	4770      	bx	lr

0001cc5c <mpu_configure_region>:
{
   1cc5c:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1cc5e:	890a      	ldrh	r2, [r1, #8]
   1cc60:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1cc62:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1cc64:	684c      	ldr	r4, [r1, #4]
   1cc66:	f002 021f 	and.w	r2, r2, #31
{
   1cc6a:	b085      	sub	sp, #20
   1cc6c:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1cc70:	9300      	str	r3, [sp, #0]
   1cc72:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cc76:	f023 031f 	bic.w	r3, r3, #31
   1cc7a:	1e62      	subs	r2, r4, #1
   1cc7c:	4413      	add	r3, r2
   1cc7e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1cc82:	2807      	cmp	r0, #7
   1cc84:	9303      	str	r3, [sp, #12]
   1cc86:	d904      	bls.n	1cc92 <mpu_configure_region+0x36>
}
   1cc88:	b005      	add	sp, #20
   1cc8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1cc8e:	f7f0 bd55 	b.w	d73c <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   1cc92:	4669      	mov	r1, sp
   1cc94:	f7f0 fd38 	bl	d708 <region_init>
}
   1cc98:	b005      	add	sp, #20
   1cc9a:	bd30      	pop	{r4, r5, pc}

0001cc9c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1cc9c:	4603      	mov	r3, r0
   1cc9e:	3901      	subs	r1, #1
   1cca0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cca4:	b90a      	cbnz	r2, 1ccaa <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1cca6:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1cca8:	4770      	bx	lr
		*d = *s;
   1ccaa:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1ccae:	e7f7      	b.n	1cca0 <strcpy+0x4>

0001ccb0 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1ccb0:	4603      	mov	r3, r0
{
   1ccb2:	b510      	push	{r4, lr}
   1ccb4:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   1ccb6:	b922      	cbnz	r2, 1ccc2 <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1ccb8:	2100      	movs	r1, #0
   1ccba:	441a      	add	r2, r3
	while (n > 0) {
   1ccbc:	4293      	cmp	r3, r2
   1ccbe:	d108      	bne.n	1ccd2 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   1ccc0:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   1ccc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ccc6:	2c00      	cmp	r4, #0
   1ccc8:	d0f6      	beq.n	1ccb8 <strncpy+0x8>
		*d = *s;
   1ccca:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1ccce:	3a01      	subs	r2, #1
   1ccd0:	e7f1      	b.n	1ccb6 <strncpy+0x6>
		*d = '\0';
   1ccd2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ccd6:	e7f1      	b.n	1ccbc <strncpy+0xc>

0001ccd8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1ccd8:	4603      	mov	r3, r0
	size_t n = 0;
   1ccda:	2000      	movs	r0, #0

	while (*s != '\0') {
   1ccdc:	5c1a      	ldrb	r2, [r3, r0]
   1ccde:	b902      	cbnz	r2, 1cce2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1cce0:	4770      	bx	lr
		n++;
   1cce2:	3001      	adds	r0, #1
   1cce4:	e7fa      	b.n	1ccdc <strlen+0x4>

0001cce6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1cce6:	4603      	mov	r3, r0
	size_t n = 0;
   1cce8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1ccea:	5c1a      	ldrb	r2, [r3, r0]
   1ccec:	b10a      	cbz	r2, 1ccf2 <strnlen+0xc>
   1ccee:	4288      	cmp	r0, r1
   1ccf0:	d100      	bne.n	1ccf4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1ccf2:	4770      	bx	lr
		n++;
   1ccf4:	3001      	adds	r0, #1
   1ccf6:	e7f8      	b.n	1ccea <strnlen+0x4>

0001ccf8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1ccf8:	1e43      	subs	r3, r0, #1
   1ccfa:	3901      	subs	r1, #1
   1ccfc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cd00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1cd04:	4282      	cmp	r2, r0
   1cd06:	d101      	bne.n	1cd0c <strcmp+0x14>
   1cd08:	2a00      	cmp	r2, #0
   1cd0a:	d1f7      	bne.n	1ccfc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1cd0c:	1a10      	subs	r0, r2, r0
   1cd0e:	4770      	bx	lr

0001cd10 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1cd10:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1cd12:	460b      	mov	r3, r1
   1cd14:	4605      	mov	r5, r0
   1cd16:	b162      	cbz	r2, 1cd32 <strncmp+0x22>
   1cd18:	f810 6b01 	ldrb.w	r6, [r0], #1
   1cd1c:	781c      	ldrb	r4, [r3, #0]
   1cd1e:	3101      	adds	r1, #1
   1cd20:	42b4      	cmp	r4, r6
   1cd22:	d100      	bne.n	1cd26 <strncmp+0x16>
   1cd24:	b91c      	cbnz	r4, 1cd2e <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1cd26:	782a      	ldrb	r2, [r5, #0]
   1cd28:	781b      	ldrb	r3, [r3, #0]
   1cd2a:	1ad0      	subs	r0, r2, r3
   1cd2c:	e002      	b.n	1cd34 <strncmp+0x24>
		n--;
   1cd2e:	3a01      	subs	r2, #1
   1cd30:	e7ef      	b.n	1cd12 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   1cd32:	4610      	mov	r0, r2
}
   1cd34:	bd70      	pop	{r4, r5, r6, pc}

0001cd36 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1cd36:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1cd38:	b15a      	cbz	r2, 1cd52 <_flash_used+0x1a>
   1cd3a:	3901      	subs	r1, #1
   1cd3c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1cd3e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cd42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1cd46:	42a0      	cmp	r0, r4
   1cd48:	d001      	beq.n	1cd4e <_flash_used+0x16>
   1cd4a:	429a      	cmp	r2, r3
   1cd4c:	d0f7      	beq.n	1cd3e <_flash_used+0x6>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1cd4e:	1ad0      	subs	r0, r2, r3
}
   1cd50:	bd10      	pop	{r4, pc}
		return 0;
   1cd52:	4610      	mov	r0, r2
   1cd54:	e7fc      	b.n	1cd50 <_flash_used+0x18>

0001cd56 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1cd56:	b510      	push	{r4, lr}
   1cd58:	1e43      	subs	r3, r0, #1
   1cd5a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1cd5c:	4291      	cmp	r1, r2
   1cd5e:	d100      	bne.n	1cd62 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1cd60:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1cd62:	f811 4b01 	ldrb.w	r4, [r1], #1
   1cd66:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1cd6a:	e7f7      	b.n	1cd5c <memcpy+0x6>

0001cd6c <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1cd6c:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   1cd6e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1cd70:	4402      	add	r2, r0
   1cd72:	4293      	cmp	r3, r2
   1cd74:	d100      	bne.n	1cd78 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1cd76:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1cd78:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1cd7c:	e7f9      	b.n	1cd72 <memset+0x6>

0001cd7e <_stdout_hook_default>:
}
   1cd7e:	f04f 30ff 	mov.w	r0, #4294967295
   1cd82:	4770      	bx	lr

0001cd84 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1cd84:	b510      	push	{r4, lr}
   1cd86:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1cd88:	7801      	ldrb	r1, [r0, #0]
   1cd8a:	7822      	ldrb	r2, [r4, #0]
{
   1cd8c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1cd8e:	428a      	cmp	r2, r1
   1cd90:	d00f      	beq.n	1cdb2 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1cd92:	4669      	mov	r1, sp
   1cd94:	f7f0 ff4a 	bl	dc2c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1cd98:	4620      	mov	r0, r4
   1cd9a:	a905      	add	r1, sp, #20
   1cd9c:	f7f0 ff46 	bl	dc2c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1cda0:	2210      	movs	r2, #16
   1cda2:	f10d 0115 	add.w	r1, sp, #21
   1cda6:	f10d 0001 	add.w	r0, sp, #1
   1cdaa:	f7ff ffc4 	bl	1cd36 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1cdae:	b00a      	add	sp, #40	; 0x28
   1cdb0:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1cdb2:	2a01      	cmp	r2, #1
   1cdb4:	d006      	beq.n	1cdc4 <bt_uuid_cmp+0x40>
   1cdb6:	2a02      	cmp	r2, #2
   1cdb8:	d007      	beq.n	1cdca <bt_uuid_cmp+0x46>
   1cdba:	b972      	cbnz	r2, 1cdda <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1cdbc:	8840      	ldrh	r0, [r0, #2]
   1cdbe:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1cdc0:	1ac0      	subs	r0, r0, r3
   1cdc2:	e7f4      	b.n	1cdae <bt_uuid_cmp+0x2a>
   1cdc4:	6840      	ldr	r0, [r0, #4]
   1cdc6:	6863      	ldr	r3, [r4, #4]
   1cdc8:	e7fa      	b.n	1cdc0 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1cdca:	2210      	movs	r2, #16
   1cdcc:	1c61      	adds	r1, r4, #1
   1cdce:	3001      	adds	r0, #1
}
   1cdd0:	b00a      	add	sp, #40	; 0x28
   1cdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1cdd6:	f7ff bfae 	b.w	1cd36 <memcmp>
	switch (u1->type) {
   1cdda:	f06f 0015 	mvn.w	r0, #21
   1cdde:	e7e6      	b.n	1cdae <bt_uuid_cmp+0x2a>

0001cde0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1cde0:	2a04      	cmp	r2, #4
{
   1cde2:	b510      	push	{r4, lr}
	switch (data_len) {
   1cde4:	d00a      	beq.n	1cdfc <bt_uuid_create+0x1c>
   1cde6:	2a10      	cmp	r2, #16
   1cde8:	d00d      	beq.n	1ce06 <bt_uuid_create+0x26>
   1cdea:	2a02      	cmp	r2, #2
   1cdec:	f04f 0300 	mov.w	r3, #0
   1cdf0:	d10f      	bne.n	1ce12 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1cdf2:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1cdf4:	880b      	ldrh	r3, [r1, #0]
   1cdf6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1cdf8:	2001      	movs	r0, #1
}
   1cdfa:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1cdfc:	2301      	movs	r3, #1
   1cdfe:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1ce00:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1ce02:	6043      	str	r3, [r0, #4]
		break;
   1ce04:	e7f8      	b.n	1cdf8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1ce06:	2302      	movs	r3, #2
   1ce08:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1ce0c:	f7ff ffa3 	bl	1cd56 <memcpy>
		break;
   1ce10:	e7f2      	b.n	1cdf8 <bt_uuid_create+0x18>
	switch (data_len) {
   1ce12:	4618      	mov	r0, r3
   1ce14:	e7f1      	b.n	1cdfa <bt_uuid_create+0x1a>

0001ce16 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1ce16:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1ce18:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1ce1a:	2106      	movs	r1, #6
{
   1ce1c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1ce1e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1ce22:	f7f3 f97d 	bl	10120 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1ce26:	b918      	cbnz	r0, 1ce30 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1ce28:	79a3      	ldrb	r3, [r4, #6]
   1ce2a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ce2e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1ce30:	bd10      	pop	{r4, pc}

0001ce32 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1ce32:	280f      	cmp	r0, #15
   1ce34:	d807      	bhi.n	1ce46 <bt_hci_evt_get_flags+0x14>
   1ce36:	280d      	cmp	r0, #13
   1ce38:	d80b      	bhi.n	1ce52 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1ce3a:	2805      	cmp	r0, #5
   1ce3c:	bf08      	it	eq
   1ce3e:	2003      	moveq	r0, #3
   1ce40:	bf18      	it	ne
   1ce42:	2002      	movne	r0, #2
   1ce44:	4770      	bx	lr
	switch (evt) {
   1ce46:	2813      	cmp	r0, #19
   1ce48:	d003      	beq.n	1ce52 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1ce4a:	281a      	cmp	r0, #26
   1ce4c:	bf08      	it	eq
   1ce4e:	2001      	moveq	r0, #1
   1ce50:	e7f6      	b.n	1ce40 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1ce52:	2001      	movs	r0, #1
	}
}
   1ce54:	4770      	bx	lr

0001ce56 <hci_vendor_event>:
}
   1ce56:	4770      	bx	lr

0001ce58 <bt_addr_le_copy>:
   1ce58:	2207      	movs	r2, #7
   1ce5a:	f7ff bf7c 	b.w	1cd56 <memcpy>

0001ce5e <atomic_or>:
{
   1ce5e:	4603      	mov	r3, r0
   1ce60:	b510      	push	{r4, lr}
}
   1ce62:	e8d3 0fef 	ldaex	r0, [r3]
   1ce66:	ea40 0201 	orr.w	r2, r0, r1
   1ce6a:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1ce6e:	2c00      	cmp	r4, #0
   1ce70:	d1f7      	bne.n	1ce62 <atomic_or+0x4>
   1ce72:	bd10      	pop	{r4, pc}

0001ce74 <z_log_msg_static_create.constprop.0>:
   1ce74:	2300      	movs	r3, #0
   1ce76:	f7ee bcc7 	b.w	b808 <z_impl_z_log_msg_static_create>

0001ce7a <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ce7a:	e8d0 3fef 	ldaex	r3, [r0]
   1ce7e:	400b      	ands	r3, r1
   1ce80:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ce84:	2a00      	cmp	r2, #0
   1ce86:	d1f8      	bne.n	1ce7a <atomic_and.isra.0>
}
   1ce88:	4770      	bx	lr

0001ce8a <bt_hci_disconnect>:
{
   1ce8a:	b570      	push	{r4, r5, r6, lr}
   1ce8c:	4606      	mov	r6, r0
   1ce8e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1ce90:	f240 4006 	movw	r0, #1030	; 0x406
   1ce94:	2103      	movs	r1, #3
   1ce96:	f7f1 fb93 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
   1ce9a:	4604      	mov	r4, r0
   1ce9c:	b168      	cbz	r0, 1ceba <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1ce9e:	2103      	movs	r1, #3
   1cea0:	3008      	adds	r0, #8
   1cea2:	f7f6 fef3 	bl	13c8c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1cea6:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1cea8:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1ceaa:	4621      	mov	r1, r4
}
   1ceac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1ceb0:	2200      	movs	r2, #0
   1ceb2:	f240 4006 	movw	r0, #1030	; 0x406
   1ceb6:	f7f1 bbd1 	b.w	e65c <bt_hci_cmd_send_sync>
}
   1ceba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1cebe:	bd70      	pop	{r4, r5, r6, pc}

0001cec0 <bt_le_set_data_len>:
{
   1cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cec2:	4607      	mov	r7, r0
   1cec4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1cec6:	f242 0022 	movw	r0, #8226	; 0x2022
   1ceca:	2106      	movs	r1, #6
{
   1cecc:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1cece:	f7f1 fb77 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
   1ced2:	4604      	mov	r4, r0
   1ced4:	b178      	cbz	r0, 1cef6 <bt_le_set_data_len+0x36>
   1ced6:	2106      	movs	r1, #6
   1ced8:	3008      	adds	r0, #8
   1ceda:	f7f6 fed7 	bl	13c8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1cede:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1cee0:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1cee2:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1cee4:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1cee6:	4621      	mov	r1, r4
}
   1cee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1ceec:	2200      	movs	r2, #0
   1ceee:	f242 0022 	movw	r0, #8226	; 0x2022
   1cef2:	f7f1 bbb3 	b.w	e65c <bt_hci_cmd_send_sync>
}
   1cef6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1cefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cefc <bt_le_set_phy>:
{
   1cefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf00:	4681      	mov	r9, r0
   1cf02:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1cf04:	f242 0032 	movw	r0, #8242	; 0x2032
   1cf08:	2107      	movs	r1, #7
{
   1cf0a:	4617      	mov	r7, r2
   1cf0c:	461e      	mov	r6, r3
   1cf0e:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1cf12:	f7f1 fb55 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
   1cf16:	4605      	mov	r5, r0
   1cf18:	b1a0      	cbz	r0, 1cf44 <bt_le_set_phy+0x48>
   1cf1a:	2107      	movs	r1, #7
   1cf1c:	3008      	adds	r0, #8
   1cf1e:	f7f6 feb5 	bl	13c8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1cf22:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1cf26:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1cf2a:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1cf2c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1cf2e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1cf30:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1cf34:	4629      	mov	r1, r5
}
   1cf36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1cf3a:	2200      	movs	r2, #0
   1cf3c:	f242 0032 	movw	r0, #8242	; 0x2032
   1cf40:	f7f1 bb8c 	b.w	e65c <bt_hci_cmd_send_sync>
}
   1cf44:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1cf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001cf4c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1cf4c:	6880      	ldr	r0, [r0, #8]
   1cf4e:	f7f1 bc55 	b.w	e7fc <bt_hci_le_enh_conn_complete>

0001cf52 <bt_le_conn_params_valid>:
{
   1cf52:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1cf54:	8803      	ldrh	r3, [r0, #0]
   1cf56:	8842      	ldrh	r2, [r0, #2]
   1cf58:	4293      	cmp	r3, r2
   1cf5a:	d819      	bhi.n	1cf90 <bt_le_conn_params_valid+0x3e>
   1cf5c:	2b05      	cmp	r3, #5
   1cf5e:	d917      	bls.n	1cf90 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1cf60:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1cf64:	d814      	bhi.n	1cf90 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1cf66:	8883      	ldrh	r3, [r0, #4]
   1cf68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1cf6c:	d210      	bcs.n	1cf90 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1cf6e:	f640 4476 	movw	r4, #3190	; 0xc76
   1cf72:	88c0      	ldrh	r0, [r0, #6]
   1cf74:	f1a0 010a 	sub.w	r1, r0, #10
   1cf78:	b289      	uxth	r1, r1
   1cf7a:	42a1      	cmp	r1, r4
   1cf7c:	d808      	bhi.n	1cf90 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1cf7e:	3301      	adds	r3, #1
   1cf80:	b29b      	uxth	r3, r3
   1cf82:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1cf84:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1cf88:	bf34      	ite	cc
   1cf8a:	2001      	movcc	r0, #1
   1cf8c:	2000      	movcs	r0, #0
}
   1cf8e:	bd10      	pop	{r4, pc}
		return false;
   1cf90:	2000      	movs	r0, #0
   1cf92:	e7fc      	b.n	1cf8e <bt_le_conn_params_valid+0x3c>

0001cf94 <le_conn_param_neg_reply>:
{
   1cf94:	b570      	push	{r4, r5, r6, lr}
   1cf96:	4606      	mov	r6, r0
   1cf98:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1cf9a:	f242 0021 	movw	r0, #8225	; 0x2021
   1cf9e:	2103      	movs	r1, #3
   1cfa0:	f7f1 fb0e 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
   1cfa4:	4604      	mov	r4, r0
   1cfa6:	b918      	cbnz	r0, 1cfb0 <le_conn_param_neg_reply+0x1c>
}
   1cfa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cfac:	f7f0 bf3a 	b.w	de24 <le_conn_param_neg_reply.part.0>
   1cfb0:	2103      	movs	r1, #3
   1cfb2:	3008      	adds	r0, #8
   1cfb4:	f7f6 fe6a 	bl	13c8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1cfb8:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1cfba:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1cfbc:	4621      	mov	r1, r4
}
   1cfbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1cfc2:	f242 0021 	movw	r0, #8225	; 0x2021
   1cfc6:	f7f1 bdc7 	b.w	eb58 <bt_hci_cmd_send>

0001cfca <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1cfca:	2000      	movs	r0, #0
   1cfcc:	4770      	bx	lr

0001cfce <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1cfce:	2000      	movs	r0, #0
   1cfd0:	4770      	bx	lr

0001cfd2 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   1cfd2:	2207      	movs	r2, #7
{
   1cfd4:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1cfd6:	f7ff feae 	bl	1cd36 <memcmp>
}
   1cfda:	fab0 f080 	clz	r0, r0
   1cfde:	0940      	lsrs	r0, r0, #5
   1cfe0:	bd08      	pop	{r3, pc}

0001cfe2 <z_log_msg_static_create.constprop.0>:
   1cfe2:	2300      	movs	r3, #0
   1cfe4:	f7ee bc10 	b.w	b808 <z_impl_z_log_msg_static_create>

0001cfe8 <bt_lookup_id_addr>:
	return addr;
   1cfe8:	2800      	cmp	r0, #0
}
   1cfea:	bf0c      	ite	eq
   1cfec:	4608      	moveq	r0, r1
   1cfee:	2000      	movne	r0, #0
   1cff0:	4770      	bx	lr

0001cff2 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1cff2:	b118      	cbz	r0, 1cffc <bt_id_set_adv_random_addr+0xa>
   1cff4:	b111      	cbz	r1, 1cffc <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1cff6:	4608      	mov	r0, r1
   1cff8:	f7f2 bb32 	b.w	f660 <set_random_address>
}
   1cffc:	f06f 0015 	mvn.w	r0, #21
   1d000:	4770      	bx	lr

0001d002 <bt_id_set_adv_private_addr>:
{
   1d002:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1d004:	4604      	mov	r4, r0
   1d006:	b180      	cbz	r0, 1d02a <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1d008:	2106      	movs	r1, #6
   1d00a:	4668      	mov	r0, sp
   1d00c:	f7f3 f888 	bl	10120 <bt_rand>
	if (err) {
   1d010:	b948      	cbnz	r0, 1d026 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1d012:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1d016:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1d018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1d01c:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1d01e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1d022:	f7ff ffe6 	bl	1cff2 <bt_id_set_adv_random_addr>
}
   1d026:	b002      	add	sp, #8
   1d028:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d02a:	f06f 0015 	mvn.w	r0, #21
   1d02e:	e7fa      	b.n	1d026 <bt_id_set_adv_private_addr+0x24>

0001d030 <bt_id_adv_random_addr_check>:
}
   1d030:	3800      	subs	r0, #0
   1d032:	bf18      	it	ne
   1d034:	2001      	movne	r0, #1
   1d036:	4770      	bx	lr

0001d038 <get_adv_channel_map>:
{
   1d038:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1d03a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1d03e:	bf0c      	ite	eq
   1d040:	2007      	moveq	r0, #7
   1d042:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1d044:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1d046:	bf48      	it	mi
   1d048:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1d04c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1d04e:	bf48      	it	mi
   1d050:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1d054:	4770      	bx	lr

0001d056 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d056:	e8d0 0faf 	lda	r0, [r0]
}
   1d05a:	4770      	bx	lr

0001d05c <atomic_and>:
{
   1d05c:	4603      	mov	r3, r0
   1d05e:	b510      	push	{r4, lr}
}
   1d060:	e8d3 0fef 	ldaex	r0, [r3]
   1d064:	ea00 0201 	and.w	r2, r0, r1
   1d068:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1d06c:	2c00      	cmp	r4, #0
   1d06e:	d1f7      	bne.n	1d060 <atomic_and+0x4>
   1d070:	bd10      	pop	{r4, pc}

0001d072 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d072:	2301      	movs	r3, #1
{
   1d074:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d076:	fa03 f101 	lsl.w	r1, r3, r1
{
   1d07a:	4604      	mov	r4, r0
	if (val) {
   1d07c:	b142      	cbz	r2, 1d090 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d07e:	e8d4 3fef 	ldaex	r3, [r4]
   1d082:	430b      	orrs	r3, r1
   1d084:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d088:	2a00      	cmp	r2, #0
   1d08a:	d1f8      	bne.n	1d07e <atomic_set_bit_to+0xc>
	}
}
   1d08c:	bc10      	pop	{r4}
   1d08e:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d090:	43c9      	mvns	r1, r1
}
   1d092:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d094:	f7ff bfe2 	b.w	1d05c <atomic_and>

0001d098 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d09c:	b087      	sub	sp, #28
   1d09e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1d0a2:	4605      	mov	r5, r0
   1d0a4:	460c      	mov	r4, r1
   1d0a6:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1d0a8:	2100      	movs	r1, #0
   1d0aa:	2210      	movs	r2, #16
   1d0ac:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1d0ae:	461f      	mov	r7, r3
   1d0b0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1d0b4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   1d0b8:	f7ff fe58 	bl	1cd6c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1d0bc:	b9ce      	cbnz	r6, 1d0f2 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   1d0be:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1d0c2:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1d0c4:	f242 0008 	movw	r0, #8200	; 0x2008
   1d0c8:	a902      	add	r1, sp, #8
   1d0ca:	f7f2 fcd9 	bl	fa80 <hci_set_ad>
		if (err) {
   1d0ce:	4604      	mov	r4, r0
   1d0d0:	b958      	cbnz	r0, 1d0ea <le_adv_update.constprop.0+0x52>
	if (scannable) {
   1d0d2:	f1ba 0f00 	cmp.w	sl, #0
   1d0d6:	d13a      	bne.n	1d14e <le_adv_update.constprop.0+0xb6>
   1d0d8:	3510      	adds	r5, #16
   1d0da:	e8d5 3fef 	ldaex	r3, [r5]
   1d0de:	f043 0304 	orr.w	r3, r3, #4
   1d0e2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1d0e6:	2a00      	cmp	r2, #0
   1d0e8:	d1f7      	bne.n	1d0da <le_adv_update.constprop.0+0x42>
}
   1d0ea:	4620      	mov	r0, r4
   1d0ec:	b007      	add	sp, #28
   1d0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1d0f2:	f7f2 fa99 	bl	f628 <bt_get_name>
   1d0f6:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1d0f8:	b9e4      	cbnz	r4, 1d134 <le_adv_update.constprop.0+0x9c>
   1d0fa:	bb37      	cbnz	r7, 1d14a <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   1d0fc:	4658      	mov	r0, fp
   1d0fe:	f7ff fdeb 	bl	1ccd8 <strlen>
   1d102:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1d104:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1d106:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1d10a:	f88d 3000 	strb.w	r3, [sp]
   1d10e:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1d112:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1d116:	d1d4      	bne.n	1d0c2 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   1d118:	2202      	movs	r2, #2
			d[1].data = &data;
   1d11a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1d11e:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1d120:	e7d0      	b.n	1d0c4 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1d122:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1d126:	3a08      	subs	r2, #8
   1d128:	2a01      	cmp	r2, #1
   1d12a:	d924      	bls.n	1d176 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1d12c:	3301      	adds	r3, #1
   1d12e:	4598      	cmp	r8, r3
   1d130:	d1f7      	bne.n	1d122 <le_adv_update.constprop.0+0x8a>
   1d132:	e7e2      	b.n	1d0fa <le_adv_update.constprop.0+0x62>
   1d134:	2300      	movs	r3, #0
   1d136:	e7fa      	b.n	1d12e <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1d138:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1d13c:	3a08      	subs	r2, #8
   1d13e:	2a01      	cmp	r2, #1
   1d140:	d919      	bls.n	1d176 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1d142:	3301      	adds	r3, #1
   1d144:	4599      	cmp	r9, r3
   1d146:	d1f7      	bne.n	1d138 <le_adv_update.constprop.0+0xa0>
   1d148:	e7d8      	b.n	1d0fc <le_adv_update.constprop.0+0x64>
   1d14a:	2300      	movs	r3, #0
   1d14c:	e7fa      	b.n	1d144 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   1d14e:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   1d150:	2e02      	cmp	r6, #2
			d[1].len = 1;
   1d152:	bf08      	it	eq
   1d154:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1d156:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   1d15a:	bf08      	it	eq
   1d15c:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1d15e:	a902      	add	r1, sp, #8
			d[1].data = &data;
   1d160:	bf08      	it	eq
   1d162:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1d166:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1d16a:	f7f2 fc89 	bl	fa80 <hci_set_ad>
		if (err) {
   1d16e:	2800      	cmp	r0, #0
   1d170:	d0b2      	beq.n	1d0d8 <le_adv_update.constprop.0+0x40>
   1d172:	4604      	mov	r4, r0
   1d174:	e7b9      	b.n	1d0ea <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   1d176:	f06f 0415 	mvn.w	r4, #21
   1d17a:	e7b6      	b.n	1d0ea <le_adv_update.constprop.0+0x52>

0001d17c <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1d17c:	6843      	ldr	r3, [r0, #4]
   1d17e:	f013 0008 	ands.w	r0, r3, #8
   1d182:	d00a      	beq.n	1d19a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1d184:	035a      	lsls	r2, r3, #13
   1d186:	d407      	bmi.n	1d198 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1d188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1d18c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1d190:	bf14      	ite	ne
   1d192:	2002      	movne	r0, #2
   1d194:	2001      	moveq	r0, #1
   1d196:	4770      	bx	lr
   1d198:	2001      	movs	r0, #1
}
   1d19a:	4770      	bx	lr

0001d19c <bt_le_adv_set_enable_legacy>:
{
   1d19c:	b570      	push	{r4, r5, r6, lr}
   1d19e:	4606      	mov	r6, r0
   1d1a0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1d1a2:	f242 000a 	movw	r0, #8202	; 0x200a
   1d1a6:	2101      	movs	r1, #1
{
   1d1a8:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1d1aa:	f7f1 fa09 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
   1d1ae:	4604      	mov	r4, r0
   1d1b0:	b1b0      	cbz	r0, 1d1e0 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1d1b2:	3008      	adds	r0, #8
	if (enable) {
   1d1b4:	b195      	cbz	r5, 1d1dc <bt_le_adv_set_enable_legacy+0x40>
   1d1b6:	2101      	movs	r1, #1
   1d1b8:	f000 ff9b 	bl	1e0f2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1d1bc:	4620      	mov	r0, r4
   1d1be:	f106 0210 	add.w	r2, r6, #16
   1d1c2:	a903      	add	r1, sp, #12
   1d1c4:	2307      	movs	r3, #7
   1d1c6:	9500      	str	r5, [sp, #0]
   1d1c8:	f7f1 f9e8 	bl	e59c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1d1cc:	2200      	movs	r2, #0
   1d1ce:	4621      	mov	r1, r4
   1d1d0:	f242 000a 	movw	r0, #8202	; 0x200a
   1d1d4:	f7f1 fa42 	bl	e65c <bt_hci_cmd_send_sync>
}
   1d1d8:	b006      	add	sp, #24
   1d1da:	bd70      	pop	{r4, r5, r6, pc}
   1d1dc:	4629      	mov	r1, r5
   1d1de:	e7eb      	b.n	1d1b8 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1d1e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d1e4:	e7f8      	b.n	1d1d8 <bt_le_adv_set_enable_legacy+0x3c>

0001d1e6 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1d1e6:	3018      	adds	r0, #24
   1d1e8:	f7fc b8a0 	b.w	1932c <k_work_cancel_delayable>

0001d1ec <z_log_msg_static_create.constprop.0>:
   1d1ec:	2300      	movs	r3, #0
   1d1ee:	f7ee bb0b 	b.w	b808 <z_impl_z_log_msg_static_create>

0001d1f2 <tx_complete_work>:
	tx_notify(conn);
   1d1f2:	3828      	subs	r0, #40	; 0x28
   1d1f4:	f7f2 bfe8 	b.w	101c8 <tx_notify>

0001d1f8 <bt_conn_reset_rx_state>:
{
   1d1f8:	b510      	push	{r4, lr}
   1d1fa:	4604      	mov	r4, r0
	if (!conn->rx) {
   1d1fc:	6900      	ldr	r0, [r0, #16]
   1d1fe:	b118      	cbz	r0, 1d208 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1d200:	f7f6 fc22 	bl	13a48 <net_buf_unref>
	conn->rx = NULL;
   1d204:	2300      	movs	r3, #0
   1d206:	6123      	str	r3, [r4, #16]
}
   1d208:	bd10      	pop	{r4, pc}

0001d20a <conn_lookup_handle>:
{
   1d20a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d20e:	4607      	mov	r7, r0
   1d210:	460e      	mov	r6, r1
   1d212:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1d214:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1d216:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1d21a:	42b4      	cmp	r4, r6
   1d21c:	d103      	bne.n	1d226 <conn_lookup_handle+0x1c>
	return NULL;
   1d21e:	2300      	movs	r3, #0
}
   1d220:	4618      	mov	r0, r3
   1d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1d226:	fb09 7004 	mla	r0, r9, r4, r7
   1d22a:	f7f3 faa1 	bl	10770 <bt_conn_ref>
   1d22e:	4603      	mov	r3, r0
		if (!conn) {
   1d230:	b158      	cbz	r0, 1d24a <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1d232:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1d234:	2d01      	cmp	r5, #1
   1d236:	d002      	beq.n	1d23e <conn_lookup_handle+0x34>
   1d238:	3d07      	subs	r5, #7
   1d23a:	2d01      	cmp	r5, #1
   1d23c:	d803      	bhi.n	1d246 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1d23e:	881a      	ldrh	r2, [r3, #0]
   1d240:	4542      	cmp	r2, r8
   1d242:	d0ed      	beq.n	1d220 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1d244:	4618      	mov	r0, r3
   1d246:	f7f3 fabb 	bl	107c0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1d24a:	3401      	adds	r4, #1
   1d24c:	e7e5      	b.n	1d21a <conn_lookup_handle+0x10>

0001d24e <bt_conn_connected>:
{
   1d24e:	b510      	push	{r4, lr}
   1d250:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1d252:	f7f3 ff2f 	bl	110b4 <bt_l2cap_connected>
	notify_connected(conn);
   1d256:	4620      	mov	r0, r4
}
   1d258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1d25c:	f7f2 bf7e 	b.w	1015c <notify_connected>

0001d260 <bt_conn_get_security>:
}
   1d260:	2001      	movs	r0, #1
   1d262:	4770      	bx	lr

0001d264 <bt_conn_is_peer_addr_le>:
{
   1d264:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1d266:	7a03      	ldrb	r3, [r0, #8]
{
   1d268:	4604      	mov	r4, r0
	if (id != conn->id) {
   1d26a:	428b      	cmp	r3, r1
{
   1d26c:	4615      	mov	r5, r2
	if (id != conn->id) {
   1d26e:	d115      	bne.n	1d29c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1d270:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1d274:	2207      	movs	r2, #7
   1d276:	4628      	mov	r0, r5
   1d278:	f7ff fd5d 	bl	1cd36 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1d27c:	b180      	cbz	r0, 1d2a0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1d27e:	78e3      	ldrb	r3, [r4, #3]
   1d280:	2207      	movs	r2, #7
   1d282:	b943      	cbnz	r3, 1d296 <bt_conn_is_peer_addr_le+0x32>
   1d284:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   1d288:	4628      	mov	r0, r5
   1d28a:	f7ff fd54 	bl	1cd36 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1d28e:	fab0 f080 	clz	r0, r0
   1d292:	0940      	lsrs	r0, r0, #5
}
   1d294:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1d296:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1d29a:	e7f5      	b.n	1d288 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1d29c:	2000      	movs	r0, #0
   1d29e:	e7f9      	b.n	1d294 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1d2a0:	2001      	movs	r0, #1
   1d2a2:	e7f7      	b.n	1d294 <bt_conn_is_peer_addr_le+0x30>

0001d2a4 <bt_conn_le_conn_update>:
{
   1d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2a6:	4607      	mov	r7, r0
   1d2a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1d2aa:	f242 0013 	movw	r0, #8211	; 0x2013
   1d2ae:	210e      	movs	r1, #14
   1d2b0:	f7f1 f986 	bl	e5c0 <bt_hci_cmd_create>
	if (!buf) {
   1d2b4:	4606      	mov	r6, r0
   1d2b6:	b1d0      	cbz	r0, 1d2ee <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1d2b8:	210e      	movs	r1, #14
   1d2ba:	3008      	adds	r0, #8
   1d2bc:	f7f6 fce6 	bl	13c8c <net_buf_simple_add>
   1d2c0:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1d2c2:	220e      	movs	r2, #14
   1d2c4:	2100      	movs	r1, #0
   1d2c6:	f7ff fd51 	bl	1cd6c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1d2ca:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1d2cc:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1d2ce:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1d2d0:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1d2d2:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1d2d4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1d2d6:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1d2d8:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1d2dc:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1d2de:	88ab      	ldrh	r3, [r5, #4]
   1d2e0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1d2e2:	88eb      	ldrh	r3, [r5, #6]
   1d2e4:	8123      	strh	r3, [r4, #8]
}
   1d2e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1d2ea:	f7f1 b9b7 	b.w	e65c <bt_hci_cmd_send_sync>
}
   1d2ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d2f4 <l2cap_connected>:
}
   1d2f4:	4770      	bx	lr

0001d2f6 <z_log_msg_static_create.constprop.0>:
   1d2f6:	2300      	movs	r3, #0
   1d2f8:	f7ee ba86 	b.w	b808 <z_impl_z_log_msg_static_create>

0001d2fc <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2fe:	4605      	mov	r5, r0
   1d300:	460f      	mov	r7, r1
   1d302:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1d304:	2300      	movs	r3, #0
   1d306:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d30a:	2104      	movs	r1, #4
   1d30c:	2000      	movs	r0, #0
   1d30e:	f7f3 fba5 	bl	10a5c <bt_conn_create_pdu_timeout>
	if (!buf) {
   1d312:	4604      	mov	r4, r0
   1d314:	b920      	cbnz	r0, 1d320 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1d316:	4628      	mov	r0, r5
}
   1d318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d31c:	f7f3 be8e 	b.w	1103c <l2cap_create_le_sig_pdu.part.0>
   1d320:	2104      	movs	r1, #4
   1d322:	3008      	adds	r0, #8
   1d324:	f7f6 fcb2 	bl	13c8c <net_buf_simple_add>
	hdr->code = code;
   1d328:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1d32a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1d32c:	8046      	strh	r6, [r0, #2]
}
   1d32e:	4620      	mov	r0, r4
   1d330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d332 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1d332:	4770      	bx	lr

0001d334 <bt_l2cap_chan_del>:
{
   1d334:	b570      	push	{r4, r5, r6, lr}
   1d336:	4604      	mov	r4, r0
	if (!chan->conn) {
   1d338:	e9d0 3500 	ldrd	r3, r5, [r0]
   1d33c:	b123      	cbz	r3, 1d348 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1d33e:	686b      	ldr	r3, [r5, #4]
   1d340:	b103      	cbz	r3, 1d344 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1d342:	4798      	blx	r3
	chan->conn = NULL;
   1d344:	2300      	movs	r3, #0
   1d346:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1d348:	68e3      	ldr	r3, [r4, #12]
   1d34a:	b10b      	cbz	r3, 1d350 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1d34c:	4620      	mov	r0, r4
   1d34e:	4798      	blx	r3
	if (ops->released) {
   1d350:	6a2b      	ldr	r3, [r5, #32]
   1d352:	b11b      	cbz	r3, 1d35c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1d354:	4620      	mov	r0, r4
}
   1d356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1d35a:	4718      	bx	r3
}
   1d35c:	bd70      	pop	{r4, r5, r6, pc}

0001d35e <bt_l2cap_disconnected>:
{
   1d35e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1d360:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1d362:	b130      	cbz	r0, 1d372 <bt_l2cap_disconnected+0x14>
	return node->next;
   1d364:	f850 4908 	ldr.w	r4, [r0], #-8
   1d368:	b104      	cbz	r4, 1d36c <bt_l2cap_disconnected+0xe>
   1d36a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1d36c:	f7ff ffe2 	bl	1d334 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1d370:	b904      	cbnz	r4, 1d374 <bt_l2cap_disconnected+0x16>
}
   1d372:	bd38      	pop	{r3, r4, r5, pc}
   1d374:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1d376:	b12d      	cbz	r5, 1d384 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1d378:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1d37a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1d37c:	f7ff ffda 	bl	1d334 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1d380:	462c      	mov	r4, r5
   1d382:	e7f7      	b.n	1d374 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1d384:	4620      	mov	r0, r4
}
   1d386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1d38a:	f7ff bfd3 	b.w	1d334 <bt_l2cap_chan_del>

0001d38e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1d38e:	3104      	adds	r1, #4
   1d390:	f7f3 bb64 	b.w	10a5c <bt_conn_create_pdu_timeout>

0001d394 <bt_l2cap_send_cb>:
{
   1d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d398:	4614      	mov	r4, r2
   1d39a:	4605      	mov	r5, r0
   1d39c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1d39e:	f102 0008 	add.w	r0, r2, #8
   1d3a2:	2104      	movs	r1, #4
   1d3a4:	461e      	mov	r6, r3
   1d3a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1d3aa:	f7f6 fc13 	bl	13bd4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1d3ae:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1d3b0:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1d3b2:	3a04      	subs	r2, #4
   1d3b4:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1d3b6:	4643      	mov	r3, r8
   1d3b8:	4632      	mov	r2, r6
   1d3ba:	4621      	mov	r1, r4
   1d3bc:	4628      	mov	r0, r5
}
   1d3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1d3c2:	f7f3 b933 	b.w	1062c <bt_conn_send_cb>

0001d3c6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1d3c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1d3c8:	b128      	cbz	r0, 1d3d6 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1d3ca:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1d3cc:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1d3ce:	428b      	cmp	r3, r1
   1d3d0:	d001      	beq.n	1d3d6 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   1d3d2:	6880      	ldr	r0, [r0, #8]
   1d3d4:	e7f8      	b.n	1d3c8 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1d3d6:	4770      	bx	lr

0001d3d8 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1d3d8:	4770      	bx	lr

0001d3da <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1d3da:	4603      	mov	r3, r0
	return list->head;
   1d3dc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1d3de:	b128      	cbz	r0, 1d3ec <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d3e0:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1d3e2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d3e4:	4288      	cmp	r0, r1
	list->head = node;
   1d3e6:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1d3e8:	bf08      	it	eq
   1d3ea:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1d3ec:	4770      	bx	lr

0001d3ee <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1d3ee:	4603      	mov	r3, r0
	size_t bytes = 0;
   1d3f0:	2000      	movs	r0, #0

	while (buf) {
   1d3f2:	b903      	cbnz	r3, 1d3f6 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1d3f4:	4770      	bx	lr
		bytes += buf->len;
   1d3f6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1d3f8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1d3fa:	4410      	add	r0, r2
		buf = buf->frags;
   1d3fc:	e7f9      	b.n	1d3f2 <net_buf_frags_len+0x4>

0001d3fe <attr_read_type_cb>:
{
   1d3fe:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1d400:	68d4      	ldr	r4, [r2, #12]
   1d402:	3102      	adds	r1, #2
   1d404:	7823      	ldrb	r3, [r4, #0]
   1d406:	b913      	cbnz	r3, 1d40e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1d408:	7021      	strb	r1, [r4, #0]
	return true;
   1d40a:	2001      	movs	r0, #1
}
   1d40c:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1d40e:	428b      	cmp	r3, r1
   1d410:	d0fb      	beq.n	1d40a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1d412:	8983      	ldrh	r3, [r0, #12]
   1d414:	3b02      	subs	r3, #2
   1d416:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1d418:	2000      	movs	r0, #0
   1d41a:	6110      	str	r0, [r2, #16]
		return false;
   1d41c:	e7f6      	b.n	1d40c <attr_read_type_cb+0xe>

0001d41e <att_prepare_write_req>:
}
   1d41e:	2006      	movs	r0, #6
   1d420:	4770      	bx	lr

0001d422 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d422:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d426:	4108      	asrs	r0, r1
}
   1d428:	f000 0001 	and.w	r0, r0, #1
   1d42c:	4770      	bx	lr

0001d42e <write_cb>:
{
   1d42e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d430:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1d432:	4601      	mov	r1, r0
{
   1d434:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1d436:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1d43a:	6820      	ldr	r0, [r4, #0]
   1d43c:	f000 fd9c 	bl	1df78 <bt_gatt_check_perm>
   1d440:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1d442:	bb00      	cbnz	r0, 1d486 <write_cb+0x58>
	if (!data->req) {
   1d444:	7a23      	ldrb	r3, [r4, #8]
   1d446:	b1b3      	cbz	r3, 1d476 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1d448:	f1a3 0218 	sub.w	r2, r3, #24
   1d44c:	4253      	negs	r3, r2
   1d44e:	4153      	adcs	r3, r2
   1d450:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1d452:	9301      	str	r3, [sp, #4]
   1d454:	8a63      	ldrh	r3, [r4, #18]
   1d456:	4629      	mov	r1, r5
   1d458:	9300      	str	r3, [sp, #0]
   1d45a:	68ae      	ldr	r6, [r5, #8]
   1d45c:	8a23      	ldrh	r3, [r4, #16]
   1d45e:	68e2      	ldr	r2, [r4, #12]
   1d460:	6820      	ldr	r0, [r4, #0]
   1d462:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1d464:	2800      	cmp	r0, #0
   1d466:	db08      	blt.n	1d47a <write_cb+0x4c>
   1d468:	8a23      	ldrh	r3, [r4, #16]
   1d46a:	4298      	cmp	r0, r3
   1d46c:	d10e      	bne.n	1d48c <write_cb+0x5e>
	data->err = 0U;
   1d46e:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   1d470:	2001      	movs	r0, #1
	data->err = 0U;
   1d472:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1d474:	e008      	b.n	1d488 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1d476:	2302      	movs	r3, #2
   1d478:	e7eb      	b.n	1d452 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1d47a:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1d47e:	d305      	bcc.n	1d48c <write_cb+0x5e>
		return -err;
   1d480:	4240      	negs	r0, r0
   1d482:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1d484:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1d486:	2000      	movs	r0, #0
}
   1d488:	b002      	add	sp, #8
   1d48a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1d48c:	200e      	movs	r0, #14
   1d48e:	e7f9      	b.n	1d484 <write_cb+0x56>

0001d490 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1d490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d492:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d496:	2300      	movs	r3, #0
   1d498:	461a      	mov	r2, r3
   1d49a:	9300      	str	r3, [sp, #0]
   1d49c:	f7f5 fb22 	bl	12ae4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1d4a0:	b005      	add	sp, #20
   1d4a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001d4a6 <find_info_cb>:
{
   1d4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1d4a8:	6893      	ldr	r3, [r2, #8]
{
   1d4aa:	4605      	mov	r5, r0
   1d4ac:	460e      	mov	r6, r1
   1d4ae:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1d4b0:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1d4b2:	b963      	cbnz	r3, 1d4ce <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1d4b4:	6850      	ldr	r0, [r2, #4]
   1d4b6:	2101      	movs	r1, #1
   1d4b8:	3008      	adds	r0, #8
   1d4ba:	f7f6 fbe7 	bl	13c8c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1d4be:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1d4c0:	682b      	ldr	r3, [r5, #0]
   1d4c2:	781b      	ldrb	r3, [r3, #0]
   1d4c4:	2b00      	cmp	r3, #0
   1d4c6:	bf14      	ite	ne
   1d4c8:	2302      	movne	r3, #2
   1d4ca:	2301      	moveq	r3, #1
   1d4cc:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1d4ce:	68a3      	ldr	r3, [r4, #8]
   1d4d0:	781b      	ldrb	r3, [r3, #0]
   1d4d2:	2b01      	cmp	r3, #1
   1d4d4:	d003      	beq.n	1d4de <find_info_cb+0x38>
   1d4d6:	2b02      	cmp	r3, #2
   1d4d8:	d019      	beq.n	1d50e <find_info_cb+0x68>
   1d4da:	2000      	movs	r0, #0
   1d4dc:	e016      	b.n	1d50c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1d4de:	682b      	ldr	r3, [r5, #0]
   1d4e0:	781b      	ldrb	r3, [r3, #0]
   1d4e2:	2b00      	cmp	r3, #0
   1d4e4:	d1f9      	bne.n	1d4da <find_info_cb+0x34>
   1d4e6:	6860      	ldr	r0, [r4, #4]
   1d4e8:	2104      	movs	r1, #4
   1d4ea:	3008      	adds	r0, #8
   1d4ec:	f7f6 fbce 	bl	13c8c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1d4f0:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1d4f2:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1d4f4:	682a      	ldr	r2, [r5, #0]
   1d4f6:	68e3      	ldr	r3, [r4, #12]
   1d4f8:	8852      	ldrh	r2, [r2, #2]
   1d4fa:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1d4fc:	6863      	ldr	r3, [r4, #4]
   1d4fe:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1d500:	899b      	ldrh	r3, [r3, #12]
   1d502:	1ac0      	subs	r0, r0, r3
   1d504:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1d506:	bf94      	ite	ls
   1d508:	2000      	movls	r0, #0
   1d50a:	2001      	movhi	r0, #1
}
   1d50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1d50e:	682b      	ldr	r3, [r5, #0]
   1d510:	781b      	ldrb	r3, [r3, #0]
   1d512:	2b02      	cmp	r3, #2
   1d514:	d1e1      	bne.n	1d4da <find_info_cb+0x34>
   1d516:	6860      	ldr	r0, [r4, #4]
   1d518:	2112      	movs	r1, #18
   1d51a:	3008      	adds	r0, #8
   1d51c:	f7f6 fbb6 	bl	13c8c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1d520:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1d522:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1d524:	6829      	ldr	r1, [r5, #0]
   1d526:	68e0      	ldr	r0, [r4, #12]
   1d528:	2210      	movs	r2, #16
   1d52a:	3101      	adds	r1, #1
   1d52c:	3002      	adds	r0, #2
   1d52e:	f7ff fc12 	bl	1cd56 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1d532:	6863      	ldr	r3, [r4, #4]
   1d534:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1d536:	899b      	ldrh	r3, [r3, #12]
   1d538:	1ac0      	subs	r0, r0, r3
   1d53a:	2812      	cmp	r0, #18
   1d53c:	e7e3      	b.n	1d506 <find_info_cb+0x60>

0001d53e <att_chan_mtu_updated>:
{
   1d53e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1d540:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1d542:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d544:	b352      	cbz	r2, 1d59c <att_chan_mtu_updated+0x5e>
	return node->next;
   1d546:	6813      	ldr	r3, [r2, #0]
   1d548:	b103      	cbz	r3, 1d54c <att_chan_mtu_updated+0xe>
   1d54a:	3bf0      	subs	r3, #240	; 0xf0
   1d54c:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   1d550:	2200      	movs	r2, #0
   1d552:	4611      	mov	r1, r2
   1d554:	e000      	b.n	1d558 <att_chan_mtu_updated+0x1a>
   1d556:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   1d558:	4284      	cmp	r4, r0
   1d55a:	d007      	beq.n	1d56c <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1d55c:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1d55e:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1d560:	42b1      	cmp	r1, r6
   1d562:	bf38      	it	cc
   1d564:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1d566:	42a2      	cmp	r2, r4
   1d568:	bf38      	it	cc
   1d56a:	4622      	movcc	r2, r4
   1d56c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d56e:	b12b      	cbz	r3, 1d57c <att_chan_mtu_updated+0x3e>
   1d570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1d574:	2b00      	cmp	r3, #0
   1d576:	d1ee      	bne.n	1d556 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1d578:	4284      	cmp	r4, r0
   1d57a:	d1ef      	bne.n	1d55c <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1d57c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1d57e:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1d580:	428b      	cmp	r3, r1
   1d582:	d801      	bhi.n	1d588 <att_chan_mtu_updated+0x4a>
   1d584:	4290      	cmp	r0, r2
   1d586:	d90b      	bls.n	1d5a0 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1d588:	4282      	cmp	r2, r0
   1d58a:	bf38      	it	cc
   1d58c:	4602      	movcc	r2, r0
   1d58e:	4299      	cmp	r1, r3
   1d590:	6828      	ldr	r0, [r5, #0]
   1d592:	bf38      	it	cc
   1d594:	4619      	movcc	r1, r3
}
   1d596:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1d598:	f7f5 bf5e 	b.w	13458 <bt_gatt_att_max_mtu_changed>
   1d59c:	4611      	mov	r1, r2
   1d59e:	e7ed      	b.n	1d57c <att_chan_mtu_updated+0x3e>
}
   1d5a0:	bc70      	pop	{r4, r5, r6}
   1d5a2:	4770      	bx	lr

0001d5a4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1d5a4:	68d0      	ldr	r0, [r2, #12]
   1d5a6:	3104      	adds	r1, #4
   1d5a8:	7803      	ldrb	r3, [r0, #0]
   1d5aa:	b913      	cbnz	r3, 1d5b2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1d5ac:	7001      	strb	r1, [r0, #0]
	return true;
   1d5ae:	2001      	movs	r0, #1
   1d5b0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1d5b2:	428b      	cmp	r3, r1
   1d5b4:	d0fb      	beq.n	1d5ae <attr_read_group_cb+0xa>
		data->group = NULL;
   1d5b6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1d5b8:	6891      	ldr	r1, [r2, #8]
   1d5ba:	898b      	ldrh	r3, [r1, #12]
   1d5bc:	3b04      	subs	r3, #4
   1d5be:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1d5c0:	6110      	str	r0, [r2, #16]
}
   1d5c2:	4770      	bx	lr

0001d5c4 <z_log_msg_static_create.constprop.0>:
   1d5c4:	2300      	movs	r3, #0
   1d5c6:	f7ee b91f 	b.w	b808 <z_impl_z_log_msg_static_create>

0001d5ca <chan_req_send>:
{
   1d5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d5cc:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1d5ce:	6888      	ldr	r0, [r1, #8]
   1d5d0:	f7ff ff0d 	bl	1d3ee <net_buf_frags_len>
   1d5d4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1d5d6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1d5d8:	4283      	cmp	r3, r0
   1d5da:	d30d      	bcc.n	1d5f8 <chan_req_send+0x2e>
	req->buf = NULL;
   1d5dc:	2600      	movs	r6, #0
	chan->req = req;
   1d5de:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   1d5e2:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   1d5e4:	4628      	mov	r0, r5
	req->buf = NULL;
   1d5e6:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1d5e8:	4639      	mov	r1, r7
   1d5ea:	f7f3 ffcd 	bl	11588 <chan_send>
	if (err) {
   1d5ee:	b110      	cbz	r0, 1d5f6 <chan_req_send+0x2c>
		req->buf = buf;
   1d5f0:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1d5f2:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   1d5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1d5f8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d5fc:	e7fb      	b.n	1d5f6 <chan_req_send+0x2c>

0001d5fe <process_queue>:
{
   1d5fe:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1d600:	2200      	movs	r2, #0
{
   1d602:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1d604:	2300      	movs	r3, #0
   1d606:	4608      	mov	r0, r1
{
   1d608:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1d60a:	f7f6 f8ab 	bl	13764 <net_buf_get>
	if (buf) {
   1d60e:	4605      	mov	r5, r0
   1d610:	b158      	cbz	r0, 1d62a <process_queue+0x2c>
	return chan_send(chan, buf);
   1d612:	4601      	mov	r1, r0
   1d614:	4620      	mov	r0, r4
   1d616:	f7f3 ffb7 	bl	11588 <chan_send>
		if (err) {
   1d61a:	4604      	mov	r4, r0
   1d61c:	b118      	cbz	r0, 1d626 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1d61e:	4629      	mov	r1, r5
   1d620:	4630      	mov	r0, r6
   1d622:	f001 fd5a 	bl	1f0da <k_queue_prepend>
}
   1d626:	4620      	mov	r0, r4
   1d628:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1d62a:	f06f 0401 	mvn.w	r4, #1
   1d62e:	e7fa      	b.n	1d626 <process_queue+0x28>

0001d630 <bt_att_chan_send_rsp>:
{
   1d630:	b538      	push	{r3, r4, r5, lr}
   1d632:	4604      	mov	r4, r0
   1d634:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1d636:	f7f3 ffa7 	bl	11588 <chan_send>
	if (err) {
   1d63a:	b130      	cbz	r0, 1d64a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1d63c:	4629      	mov	r1, r5
   1d63e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   1d642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1d646:	f7f6 b9cf 	b.w	139e8 <net_buf_put>
}
   1d64a:	bd38      	pop	{r3, r4, r5, pc}

0001d64c <att_chan_read>:
{
   1d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d650:	4680      	mov	r8, r0
   1d652:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1d654:	4610      	mov	r0, r2
{
   1d656:	4699      	mov	r9, r3
   1d658:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1d65a:	f7ff fec8 	bl	1d3ee <net_buf_frags_len>
   1d65e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   1d662:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1d664:	4283      	cmp	r3, r0
   1d666:	d97a      	bls.n	1d75e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1d668:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1d66c:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1d66e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1d670:	f7f6 fa46 	bl	13b00 <net_buf_frag_last>
	size_t len, total = 0;
   1d674:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1d678:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1d67a:	4630      	mov	r0, r6
   1d67c:	f7ff feb7 	bl	1d3ee <net_buf_frags_len>
   1d680:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1d684:	f105 0708 	add.w	r7, r5, #8
   1d688:	1a24      	subs	r4, r4, r0
   1d68a:	4638      	mov	r0, r7
   1d68c:	f000 fd1d 	bl	1e0ca <net_buf_simple_tailroom>
   1d690:	4284      	cmp	r4, r0
   1d692:	d211      	bcs.n	1d6b8 <att_chan_read+0x6c>
   1d694:	4630      	mov	r0, r6
   1d696:	f7ff feaa 	bl	1d3ee <net_buf_frags_len>
   1d69a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1d69e:	1a24      	subs	r4, r4, r0
		if (!len) {
   1d6a0:	bb34      	cbnz	r4, 1d6f0 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1d6a2:	79b0      	ldrb	r0, [r6, #6]
   1d6a4:	f7f5 ff36 	bl	13514 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1d6a8:	2200      	movs	r2, #0
   1d6aa:	2300      	movs	r3, #0
   1d6ac:	f000 fcf5 	bl	1e09a <net_buf_alloc_fixed>
			if (!frag) {
   1d6b0:	4605      	mov	r5, r0
   1d6b2:	b930      	cbnz	r0, 1d6c2 <att_chan_read+0x76>
	return total;
   1d6b4:	4657      	mov	r7, sl
   1d6b6:	e02c      	b.n	1d712 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1d6b8:	4638      	mov	r0, r7
   1d6ba:	f000 fd06 	bl	1e0ca <net_buf_simple_tailroom>
   1d6be:	4604      	mov	r4, r0
   1d6c0:	e7ee      	b.n	1d6a0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1d6c2:	4601      	mov	r1, r0
   1d6c4:	4630      	mov	r0, r6
   1d6c6:	f7f6 fa61 	bl	13b8c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1d6ca:	4630      	mov	r0, r6
   1d6cc:	f7ff fe8f 	bl	1d3ee <net_buf_frags_len>
   1d6d0:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1d6d4:	f105 0708 	add.w	r7, r5, #8
   1d6d8:	1a24      	subs	r4, r4, r0
   1d6da:	4638      	mov	r0, r7
   1d6dc:	f000 fcf5 	bl	1e0ca <net_buf_simple_tailroom>
   1d6e0:	4284      	cmp	r4, r0
   1d6e2:	d21a      	bcs.n	1d71a <att_chan_read+0xce>
   1d6e4:	4630      	mov	r0, r6
   1d6e6:	f7ff fe82 	bl	1d3ee <net_buf_frags_len>
   1d6ea:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1d6ee:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1d6f0:	68a9      	ldr	r1, [r5, #8]
   1d6f2:	89aa      	ldrh	r2, [r5, #12]
   1d6f4:	f8cd 9000 	str.w	r9, [sp]
   1d6f8:	f8db 7004 	ldr.w	r7, [fp, #4]
   1d6fc:	440a      	add	r2, r1
   1d6fe:	9803      	ldr	r0, [sp, #12]
   1d700:	4659      	mov	r1, fp
   1d702:	b2a3      	uxth	r3, r4
   1d704:	47b8      	blx	r7
		if (read < 0) {
   1d706:	1e07      	subs	r7, r0, #0
   1d708:	da0c      	bge.n	1d724 <att_chan_read+0xd8>
				return total;
   1d70a:	f1ba 0f00 	cmp.w	sl, #0
   1d70e:	bf18      	it	ne
   1d710:	4657      	movne	r7, sl
}
   1d712:	4638      	mov	r0, r7
   1d714:	b005      	add	sp, #20
   1d716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d71a:	4638      	mov	r0, r7
   1d71c:	f000 fcd5 	bl	1e0ca <net_buf_simple_tailroom>
   1d720:	4604      	mov	r4, r0
   1d722:	e7e5      	b.n	1d6f0 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1d724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d726:	b993      	cbnz	r3, 1d74e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1d728:	4639      	mov	r1, r7
   1d72a:	f105 0008 	add.w	r0, r5, #8
   1d72e:	f7f6 faad 	bl	13c8c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1d732:	4630      	mov	r0, r6
   1d734:	f7ff fe5b 	bl	1d3ee <net_buf_frags_len>
   1d738:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1d73c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1d73e:	4283      	cmp	r3, r0
		total += read;
   1d740:	44ba      	add	sl, r7
		offset += read;
   1d742:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1d746:	d9b5      	bls.n	1d6b4 <att_chan_read+0x68>
   1d748:	42a7      	cmp	r7, r4
   1d74a:	d096      	beq.n	1d67a <att_chan_read+0x2e>
   1d74c:	e7b2      	b.n	1d6b4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1d74e:	4639      	mov	r1, r7
   1d750:	4628      	mov	r0, r5
   1d752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d756:	4798      	blx	r3
   1d758:	2800      	cmp	r0, #0
   1d75a:	d1e5      	bne.n	1d728 <att_chan_read+0xdc>
   1d75c:	e7aa      	b.n	1d6b4 <att_chan_read+0x68>
		return 0;
   1d75e:	2700      	movs	r7, #0
   1d760:	e7d7      	b.n	1d712 <att_chan_read+0xc6>

0001d762 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d762:	2200      	movs	r2, #0
	return list->head;
   1d764:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d766:	b903      	cbnz	r3, 1d76a <sys_slist_find_and_remove.isra.0+0x8>
   1d768:	4770      	bx	lr
   1d76a:	428b      	cmp	r3, r1
   1d76c:	d10f      	bne.n	1d78e <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1d76e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d770:	b93a      	cbnz	r2, 1d782 <sys_slist_find_and_remove.isra.0+0x20>
   1d772:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1d774:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d776:	4291      	cmp	r1, r2
   1d778:	d100      	bne.n	1d77c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1d77a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1d77c:	2300      	movs	r3, #0
   1d77e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d780:	4770      	bx	lr
	parent->next = child;
   1d782:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d784:	6843      	ldr	r3, [r0, #4]
   1d786:	4299      	cmp	r1, r3
	list->tail = node;
   1d788:	bf08      	it	eq
   1d78a:	6042      	streq	r2, [r0, #4]
}
   1d78c:	e7f6      	b.n	1d77c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1d78e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d790:	681b      	ldr	r3, [r3, #0]
   1d792:	e7e8      	b.n	1d766 <sys_slist_find_and_remove.isra.0+0x4>

0001d794 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1d794:	2006      	movs	r0, #6
   1d796:	4770      	bx	lr

0001d798 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d798:	2301      	movs	r3, #1
{
   1d79a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d79c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d7a0:	e8d0 3fef 	ldaex	r3, [r0]
   1d7a4:	ea43 0201 	orr.w	r2, r3, r1
   1d7a8:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1d7ac:	2c00      	cmp	r4, #0
   1d7ae:	d1f7      	bne.n	1d7a0 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   1d7b0:	4219      	tst	r1, r3
}
   1d7b2:	bf14      	ite	ne
   1d7b4:	2001      	movne	r0, #1
   1d7b6:	2000      	moveq	r0, #0
   1d7b8:	bd10      	pop	{r4, pc}

0001d7ba <read_cb>:
{
   1d7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   1d7bc:	2300      	movs	r3, #0
{
   1d7be:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   1d7c0:	6816      	ldr	r6, [r2, #0]
{
   1d7c2:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1d7c4:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1d7c6:	4629      	mov	r1, r5
	data->err = 0x00;
   1d7c8:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1d7ca:	2295      	movs	r2, #149	; 0x95
   1d7cc:	f000 fbd4 	bl	1df78 <bt_gatt_check_perm>
   1d7d0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1d7d2:	b980      	cbnz	r0, 1d7f6 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1d7d4:	e9cd 0000 	strd	r0, r0, [sp]
   1d7d8:	4629      	mov	r1, r5
   1d7da:	4630      	mov	r0, r6
   1d7dc:	88a3      	ldrh	r3, [r4, #4]
   1d7de:	68a2      	ldr	r2, [r4, #8]
   1d7e0:	f7ff ff34 	bl	1d64c <att_chan_read>
	if (ret < 0) {
   1d7e4:	2800      	cmp	r0, #0
   1d7e6:	da09      	bge.n	1d7fc <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1d7e8:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1d7ec:	bf32      	itee	cc
   1d7ee:	200e      	movcc	r0, #14
		return -err;
   1d7f0:	4240      	negcs	r0, r0
   1d7f2:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   1d7f4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1d7f6:	2000      	movs	r0, #0
}
   1d7f8:	b002      	add	sp, #8
   1d7fa:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1d7fc:	2001      	movs	r0, #1
   1d7fe:	e7fb      	b.n	1d7f8 <read_cb+0x3e>

0001d800 <read_vl_cb>:
{
   1d800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   1d804:	2300      	movs	r3, #0
{
   1d806:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   1d808:	f8d2 8000 	ldr.w	r8, [r2]
{
   1d80c:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1d80e:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1d812:	4631      	mov	r1, r6
	data->err = 0x00;
   1d814:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1d816:	2295      	movs	r2, #149	; 0x95
   1d818:	f000 fbae 	bl	1df78 <bt_gatt_check_perm>
   1d81c:	4605      	mov	r5, r0
   1d81e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1d820:	b9e0      	cbnz	r0, 1d85c <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1d822:	68a0      	ldr	r0, [r4, #8]
   1d824:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1d828:	8982      	ldrh	r2, [r0, #12]
   1d82a:	1a9b      	subs	r3, r3, r2
   1d82c:	2b01      	cmp	r3, #1
   1d82e:	dd15      	ble.n	1d85c <read_vl_cb+0x5c>
   1d830:	2102      	movs	r1, #2
   1d832:	3008      	adds	r0, #8
   1d834:	f7f6 fa2a 	bl	13c8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1d838:	e9cd 5500 	strd	r5, r5, [sp]
   1d83c:	4607      	mov	r7, r0
   1d83e:	88a3      	ldrh	r3, [r4, #4]
   1d840:	4631      	mov	r1, r6
   1d842:	4640      	mov	r0, r8
   1d844:	68a2      	ldr	r2, [r4, #8]
   1d846:	f7ff ff01 	bl	1d64c <att_chan_read>
	if (read < 0) {
   1d84a:	1e03      	subs	r3, r0, #0
   1d84c:	da0a      	bge.n	1d864 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1d84e:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1d852:	bf32      	itee	cc
   1d854:	230e      	movcc	r3, #14
		return -err;
   1d856:	425b      	negcs	r3, r3
   1d858:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   1d85a:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1d85c:	2000      	movs	r0, #0
}
   1d85e:	b002      	add	sp, #8
   1d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1d864:	2001      	movs	r0, #1
	rsp->len = read;
   1d866:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1d868:	e7f9      	b.n	1d85e <read_vl_cb+0x5e>

0001d86a <bt_att_sent>:
{
   1d86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d86c:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   1d86e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1d872:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d874:	f100 0394 	add.w	r3, r0, #148	; 0x94
   1d878:	e8d3 1fef 	ldaex	r1, [r3]
   1d87c:	f021 0110 	bic.w	r1, r1, #16
   1d880:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1d884:	2a00      	cmp	r2, #0
   1d886:	d1f7      	bne.n	1d878 <bt_att_sent+0xe>
	if (!att) {
   1d888:	b30c      	cbz	r4, 1d8ce <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1d88a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1d88e:	b98b      	cbnz	r3, 1d8b4 <bt_att_sent+0x4a>
   1d890:	6863      	ldr	r3, [r4, #4]
   1d892:	b17b      	cbz	r3, 1d8b4 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1d894:	1d20      	adds	r0, r4, #4
   1d896:	f7ff fda0 	bl	1d3da <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d89a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1d89c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d89e:	4638      	mov	r0, r7
   1d8a0:	f7ff fe93 	bl	1d5ca <chan_req_send>
   1d8a4:	2800      	cmp	r0, #0
   1d8a6:	da12      	bge.n	1d8ce <bt_att_sent+0x64>
	return list->head;
   1d8a8:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1d8aa:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d8ac:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1d8ae:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d8b0:	b903      	cbnz	r3, 1d8b4 <bt_att_sent+0x4a>
	list->tail = node;
   1d8b2:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1d8b4:	4638      	mov	r0, r7
   1d8b6:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   1d8ba:	f7ff fea0 	bl	1d5fe <process_queue>
	if (!err) {
   1d8be:	b130      	cbz	r0, 1d8ce <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   1d8c0:	4638      	mov	r0, r7
   1d8c2:	f104 010c 	add.w	r1, r4, #12
}
   1d8c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1d8ca:	f7ff be98 	b.w	1d5fe <process_queue>
}
   1d8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d8d0 <att_req_send_process>:
{
   1d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1d8d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1d8d6:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d8d8:	2c00      	cmp	r4, #0
   1d8da:	d03b      	beq.n	1d954 <att_req_send_process+0x84>
	return node->next;
   1d8dc:	f854 69f0 	ldr.w	r6, [r4], #-240
   1d8e0:	b106      	cbz	r6, 1d8e4 <att_req_send_process+0x14>
   1d8e2:	3ef0      	subs	r6, #240	; 0xf0
{
   1d8e4:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1d8e6:	f108 0704 	add.w	r7, r8, #4
{
   1d8ea:	461d      	mov	r5, r3
   1d8ec:	e013      	b.n	1d916 <att_req_send_process+0x46>
		if (!req && prev &&
   1d8ee:	b1c3      	cbz	r3, 1d922 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1d8f0:	2103      	movs	r1, #3
   1d8f2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1d8f6:	f7ff fd94 	bl	1d422 <atomic_test_bit>
   1d8fa:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1d8fc:	f103 0098 	add.w	r0, r3, #152	; 0x98
   1d900:	f7ff fd8f 	bl	1d422 <atomic_test_bit>
		if (!req && prev &&
   1d904:	4282      	cmp	r2, r0
   1d906:	d10c      	bne.n	1d922 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d908:	b326      	cbz	r6, 1d954 <att_req_send_process+0x84>
   1d90a:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   1d90e:	b102      	cbz	r2, 1d912 <att_req_send_process+0x42>
   1d910:	3af0      	subs	r2, #240	; 0xf0
{
   1d912:	4634      	mov	r4, r6
   1d914:	4616      	mov	r6, r2
		if (chan->req) {
   1d916:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   1d91a:	2a00      	cmp	r2, #0
   1d91c:	d1f4      	bne.n	1d908 <att_req_send_process+0x38>
		if (!req && prev &&
   1d91e:	2d00      	cmp	r5, #0
   1d920:	d0e5      	beq.n	1d8ee <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1d922:	4638      	mov	r0, r7
   1d924:	f7ff fd59 	bl	1d3da <sys_slist_get>
	if (node) {
   1d928:	4605      	mov	r5, r0
   1d92a:	b908      	cbnz	r0, 1d930 <att_req_send_process+0x60>
   1d92c:	4623      	mov	r3, r4
   1d92e:	e7eb      	b.n	1d908 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1d930:	4601      	mov	r1, r0
   1d932:	4620      	mov	r0, r4
   1d934:	f7f3 fe9c 	bl	11670 <bt_att_chan_req_send>
   1d938:	2800      	cmp	r0, #0
   1d93a:	da0b      	bge.n	1d954 <att_req_send_process+0x84>
	return list->head;
   1d93c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1d940:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d942:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1d946:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d94a:	2b00      	cmp	r3, #0
   1d94c:	d1ee      	bne.n	1d92c <att_req_send_process+0x5c>
	list->tail = node;
   1d94e:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1d952:	e7eb      	b.n	1d92c <att_req_send_process+0x5c>
}
   1d954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d958 <bt_att_status>:
{
   1d958:	b538      	push	{r3, r4, r5, lr}
   1d95a:	4605      	mov	r5, r0
   1d95c:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1d95e:	2100      	movs	r1, #0
   1d960:	f7ff fd5f 	bl	1d422 <atomic_test_bit>
   1d964:	b1c0      	cbz	r0, 1d998 <bt_att_status+0x40>
	if (!chan->att) {
   1d966:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1d96a:	b1a8      	cbz	r0, 1d998 <bt_att_status+0x40>
	if (chan->req) {
   1d96c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1d970:	b993      	cbnz	r3, 1d998 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1d972:	3004      	adds	r0, #4
   1d974:	f7ff fd31 	bl	1d3da <sys_slist_get>
	if (!node) {
   1d978:	4604      	mov	r4, r0
   1d97a:	b168      	cbz	r0, 1d998 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d97c:	4601      	mov	r1, r0
   1d97e:	1f28      	subs	r0, r5, #4
   1d980:	f7f3 fe76 	bl	11670 <bt_att_chan_req_send>
   1d984:	2800      	cmp	r0, #0
   1d986:	da07      	bge.n	1d998 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1d988:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1d98c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1d98e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d990:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1d992:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d994:	b902      	cbnz	r2, 1d998 <bt_att_status+0x40>
	list->tail = node;
   1d996:	609c      	str	r4, [r3, #8]
}
   1d998:	bd38      	pop	{r3, r4, r5, pc}

0001d99a <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1d99a:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1d99c:	6883      	ldr	r3, [r0, #8]
   1d99e:	699b      	ldr	r3, [r3, #24]
   1d9a0:	b10b      	cbz	r3, 1d9a6 <att_sent+0xc>
		chan->ops->sent(chan);
   1d9a2:	3004      	adds	r0, #4
   1d9a4:	4718      	bx	r3
}
   1d9a6:	4770      	bx	lr

0001d9a8 <att_tx_complete>:
{
   1d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d9ac:	4606      	mov	r6, r0
   1d9ae:	460d      	mov	r5, r1
	if (!err) {
   1d9b0:	4614      	mov	r4, r2
   1d9b2:	b122      	cbz	r2, 1d9be <att_tx_complete+0x16>
}
   1d9b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1d9b8:	4608      	mov	r0, r1
   1d9ba:	f7f3 bd05 	b.w	113c8 <tx_meta_data_free>
		att_sent(conn, user_data);
   1d9be:	f7ff ffec 	bl	1d99a <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1d9c2:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1d9c4:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1d9c6:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1d9ca:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1d9ce:	f7f3 fcfb 	bl	113c8 <tx_meta_data_free>
	if (!err && func) {
   1d9d2:	b92f      	cbnz	r7, 1d9e0 <att_tx_complete+0x38>
}
   1d9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1d9d8:	4649      	mov	r1, r9
   1d9da:	4630      	mov	r0, r6
   1d9dc:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1d9de:	3401      	adds	r4, #1
   1d9e0:	b2a3      	uxth	r3, r4
   1d9e2:	4543      	cmp	r3, r8
   1d9e4:	d3f8      	bcc.n	1d9d8 <att_tx_complete+0x30>
   1d9e6:	e7f5      	b.n	1d9d4 <att_tx_complete+0x2c>

0001d9e8 <att_req_sent>:
{
   1d9e8:	b510      	push	{r4, lr}
   1d9ea:	460c      	mov	r4, r1
	if (!err) {
   1d9ec:	b90a      	cbnz	r2, 1d9f2 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1d9ee:	f7ff ffd4 	bl	1d99a <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1d9f2:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1d9f4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1d9f8:	b12b      	cbz	r3, 1da06 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1d9fa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d9fe:	2300      	movs	r3, #0
   1da00:	30c0      	adds	r0, #192	; 0xc0
   1da02:	f7fb fc8d 	bl	19320 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1da06:	4620      	mov	r0, r4
}
   1da08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1da0c:	f7f3 bcdc 	b.w	113c8 <tx_meta_data_free>

0001da10 <att_cfm_sent>:
{
   1da10:	b510      	push	{r4, lr}
   1da12:	460c      	mov	r4, r1
	if (!err) {
   1da14:	b90a      	cbnz	r2, 1da1a <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1da16:	f7ff ffc0 	bl	1d99a <att_sent>
   1da1a:	6823      	ldr	r3, [r4, #0]
   1da1c:	3398      	adds	r3, #152	; 0x98
   1da1e:	e8d3 1fef 	ldaex	r1, [r3]
   1da22:	f021 0102 	bic.w	r1, r1, #2
   1da26:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1da2a:	2a00      	cmp	r2, #0
   1da2c:	d1f7      	bne.n	1da1e <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   1da2e:	4620      	mov	r0, r4
}
   1da30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1da34:	f7f3 bcc8 	b.w	113c8 <tx_meta_data_free>

0001da38 <att_rsp_sent>:
{
   1da38:	b510      	push	{r4, lr}
   1da3a:	460c      	mov	r4, r1
	if (!err) {
   1da3c:	b90a      	cbnz	r2, 1da42 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1da3e:	f7ff ffac 	bl	1d99a <att_sent>
   1da42:	6823      	ldr	r3, [r4, #0]
   1da44:	3398      	adds	r3, #152	; 0x98
   1da46:	e8d3 1fef 	ldaex	r1, [r3]
   1da4a:	f021 0101 	bic.w	r1, r1, #1
   1da4e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1da52:	2a00      	cmp	r2, #0
   1da54:	d1f7      	bne.n	1da46 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   1da56:	4620      	mov	r0, r4
}
   1da58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1da5c:	f7f3 bcb4 	b.w	113c8 <tx_meta_data_free>

0001da60 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1da60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da64:	4688      	mov	r8, r1
   1da66:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1da68:	2101      	movs	r1, #1
   1da6a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1da6c:	4605      	mov	r5, r0
   1da6e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1da70:	f7f3 ffd0 	bl	11a14 <bt_att_chan_create_pdu>
	if (!buf) {
   1da74:	4604      	mov	r4, r0
   1da76:	b170      	cbz	r0, 1da96 <send_err_rsp.part.0+0x36>
   1da78:	2104      	movs	r1, #4
   1da7a:	3008      	adds	r0, #8
   1da7c:	f7f6 f906 	bl	13c8c <net_buf_simple_add>
	rsp->request = req;
   1da80:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1da84:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1da88:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1da8a:	4621      	mov	r1, r4
   1da8c:	4628      	mov	r0, r5
}
   1da8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1da92:	f7ff bdcd 	b.w	1d630 <bt_att_chan_send_rsp>
}
   1da96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001da9a <att_write_req>:
{
   1da9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1da9c:	460c      	mov	r4, r1
   1da9e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1daa0:	f101 0008 	add.w	r0, r1, #8
   1daa4:	f000 fb05 	bl	1e0b2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1daa8:	89a2      	ldrh	r2, [r4, #12]
   1daaa:	4603      	mov	r3, r0
   1daac:	9201      	str	r2, [sp, #4]
   1daae:	68a2      	ldr	r2, [r4, #8]
   1dab0:	2112      	movs	r1, #18
   1dab2:	9200      	str	r2, [sp, #0]
   1dab4:	4628      	mov	r0, r5
   1dab6:	2213      	movs	r2, #19
   1dab8:	f7f4 f8c6 	bl	11c48 <att_write_rsp.constprop.0>
}
   1dabc:	b003      	add	sp, #12
   1dabe:	bd30      	pop	{r4, r5, pc}

0001dac0 <att_write_cmd>:
{
   1dac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dac2:	460c      	mov	r4, r1
   1dac4:	4605      	mov	r5, r0
   1dac6:	f101 0008 	add.w	r0, r1, #8
   1daca:	f000 faf2 	bl	1e0b2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1dace:	89a2      	ldrh	r2, [r4, #12]
   1dad0:	4603      	mov	r3, r0
   1dad2:	9201      	str	r2, [sp, #4]
   1dad4:	68a2      	ldr	r2, [r4, #8]
   1dad6:	4628      	mov	r0, r5
   1dad8:	9200      	str	r2, [sp, #0]
   1dada:	2200      	movs	r2, #0
   1dadc:	4611      	mov	r1, r2
   1dade:	f7f4 f8b3 	bl	11c48 <att_write_rsp.constprop.0>
}
   1dae2:	b003      	add	sp, #12
   1dae4:	bd30      	pop	{r4, r5, pc}

0001dae6 <att_read_blob_req>:
{
   1dae6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1dae8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1daea:	210c      	movs	r1, #12
   1daec:	8813      	ldrh	r3, [r2, #0]
   1daee:	8852      	ldrh	r2, [r2, #2]
   1daf0:	9200      	str	r2, [sp, #0]
   1daf2:	220d      	movs	r2, #13
   1daf4:	f7f4 fa6c 	bl	11fd0 <att_read_rsp>
}
   1daf8:	b003      	add	sp, #12
   1dafa:	f85d fb04 	ldr.w	pc, [sp], #4

0001dafe <att_read_req>:
{
   1dafe:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1db00:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1db02:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1db04:	210a      	movs	r1, #10
   1db06:	881b      	ldrh	r3, [r3, #0]
   1db08:	9200      	str	r2, [sp, #0]
   1db0a:	220b      	movs	r2, #11
   1db0c:	f7f4 fa60 	bl	11fd0 <att_read_rsp>
}
   1db10:	b003      	add	sp, #12
   1db12:	f85d fb04 	ldr.w	pc, [sp], #4

0001db16 <att_mtu_req>:
{
   1db16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db18:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1db1a:	f850 2b98 	ldr.w	r2, [r0], #152
{
   1db1e:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1db20:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1db22:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1db24:	f7ff fc7d 	bl	1d422 <atomic_test_bit>
   1db28:	4604      	mov	r4, r0
   1db2a:	b9d8      	cbnz	r0, 1db64 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1db2c:	689b      	ldr	r3, [r3, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1db2e:	881b      	ldrh	r3, [r3, #0]
   1db30:	2b16      	cmp	r3, #22
   1db32:	d919      	bls.n	1db68 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1db34:	4630      	mov	r0, r6
   1db36:	2202      	movs	r2, #2
   1db38:	f7f4 f8ea 	bl	11d10 <bt_att_create_pdu>
	if (!pdu) {
   1db3c:	4606      	mov	r6, r0
   1db3e:	b1a8      	cbz	r0, 1db6c <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   1db40:	2102      	movs	r1, #2
   1db42:	3008      	adds	r0, #8
   1db44:	f7f6 f8a2 	bl	13c8c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1db48:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu);
   1db4a:	4631      	mov	r1, r6
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1db4c:	7007      	strb	r7, [r0, #0]
   1db4e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1db50:	4628      	mov	r0, r5
   1db52:	f7ff fd6d 	bl	1d630 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1db56:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1db58:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1db5a:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1db5c:	f7ff fcef 	bl	1d53e <att_chan_mtu_updated>
	return 0;
   1db60:	4620      	mov	r0, r4
}
   1db62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1db64:	2006      	movs	r0, #6
   1db66:	e7fc      	b.n	1db62 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   1db68:	2004      	movs	r0, #4
   1db6a:	e7fa      	b.n	1db62 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1db6c:	200e      	movs	r0, #14
   1db6e:	e7f8      	b.n	1db62 <att_mtu_req+0x4c>

0001db70 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1db70:	898a      	ldrh	r2, [r1, #12]
   1db72:	2300      	movs	r3, #0
   1db74:	6889      	ldr	r1, [r1, #8]
   1db76:	f7f4 bbd7 	b.w	12328 <att_handle_rsp>

0001db7a <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1db7a:	2001      	movs	r0, #1
   1db7c:	4770      	bx	lr

0001db7e <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1db7e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1db80:	f7f3 fdb8 	bl	116f4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1db84:	b178      	cbz	r0, 1dba6 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   1db86:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1db88:	b16b      	cbz	r3, 1dba6 <bt_att_clear_out_of_sync_sent+0x28>
   1db8a:	3bf0      	subs	r3, #240	; 0xf0
   1db8c:	f103 0298 	add.w	r2, r3, #152	; 0x98
   1db90:	e8d2 0fef 	ldaex	r0, [r2]
   1db94:	f020 0020 	bic.w	r0, r0, #32
   1db98:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1db9c:	2900      	cmp	r1, #0
   1db9e:	d1f7      	bne.n	1db90 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   1dba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1dba4:	e7f0      	b.n	1db88 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1dba6:	bd08      	pop	{r3, pc}

0001dba8 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1dba8:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1dbaa:	2104      	movs	r1, #4
   1dbac:	f7ff fc0b 	bl	1d3c6 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1dbb0:	b128      	cbz	r0, 1dbbe <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1dbb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1dbb6:	2105      	movs	r1, #5
   1dbb8:	3094      	adds	r0, #148	; 0x94
   1dbba:	f7ff bc32 	b.w	1d422 <atomic_test_bit>
}
   1dbbe:	bd08      	pop	{r3, pc}

0001dbc0 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1dbc0:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   1dbc2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1dbc6:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   1dbc8:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   1dbca:	8082      	strh	r2, [r0, #4]
}
   1dbcc:	4770      	bx	lr

0001dbce <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1dbce:	6010      	str	r0, [r2, #0]
}
   1dbd0:	2000      	movs	r0, #0
   1dbd2:	4770      	bx	lr

0001dbd4 <gatt_ccc_changed>:
{
   1dbd4:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1dbd6:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1dbd8:	895a      	ldrh	r2, [r3, #10]
   1dbda:	428a      	cmp	r2, r1
   1dbdc:	d003      	beq.n	1dbe6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1dbde:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1dbe0:	68db      	ldr	r3, [r3, #12]
   1dbe2:	b103      	cbz	r3, 1dbe6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1dbe4:	4718      	bx	r3
}
   1dbe6:	4770      	bx	lr

0001dbe8 <gatt_indicate_rsp>:
{
   1dbe8:	b510      	push	{r4, lr}
   1dbea:	9c02      	ldr	r4, [sp, #8]
   1dbec:	460a      	mov	r2, r1
	if (params->func) {
   1dbee:	68a3      	ldr	r3, [r4, #8]
   1dbf0:	b10b      	cbz	r3, 1dbf6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1dbf2:	4621      	mov	r1, r4
   1dbf4:	4798      	blx	r3
	params->_ref--;
   1dbf6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1dbf8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1dbfa:	3b01      	subs	r3, #1
   1dbfc:	b2db      	uxtb	r3, r3
   1dbfe:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1dc00:	b122      	cbz	r2, 1dc0c <gatt_indicate_rsp+0x24>
   1dc02:	b91b      	cbnz	r3, 1dc0c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1dc04:	4620      	mov	r0, r4
}
   1dc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1dc0a:	4710      	bx	r2
}
   1dc0c:	bd10      	pop	{r4, pc}

0001dc0e <match_uuid>:
	data->attr = attr;
   1dc0e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1dc10:	8091      	strh	r1, [r2, #4]
}
   1dc12:	2000      	movs	r0, #0
   1dc14:	4770      	bx	lr

0001dc16 <gen_hash_m>:
{
   1dc16:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1dc18:	6807      	ldr	r7, [r0, #0]
{
   1dc1a:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1dc1c:	783d      	ldrb	r5, [r7, #0]
{
   1dc1e:	4614      	mov	r4, r2
   1dc20:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1dc22:	b9dd      	cbnz	r5, 1dc5c <gen_hash_m+0x46>
	switch (u16->val) {
   1dc24:	887b      	ldrh	r3, [r7, #2]
   1dc26:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1dc2a:	d004      	beq.n	1dc36 <gen_hash_m+0x20>
   1dc2c:	d810      	bhi.n	1dc50 <gen_hash_m+0x3a>
   1dc2e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1dc32:	2b03      	cmp	r3, #3
   1dc34:	d812      	bhi.n	1dc5c <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1dc36:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1dc3a:	2202      	movs	r2, #2
   1dc3c:	4620      	mov	r0, r4
   1dc3e:	f10d 010a 	add.w	r1, sp, #10
   1dc42:	f7fe fd2a 	bl	1c69a <tc_cmac_update>
   1dc46:	b968      	cbnz	r0, 1dc64 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1dc48:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1dc4c:	65a2      	str	r2, [r4, #88]	; 0x58
   1dc4e:	e006      	b.n	1dc5e <gen_hash_m+0x48>
	switch (u16->val) {
   1dc50:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1dc54:	33ff      	adds	r3, #255	; 0xff
   1dc56:	b29b      	uxth	r3, r3
   1dc58:	2b04      	cmp	r3, #4
   1dc5a:	d91e      	bls.n	1dc9a <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1dc5c:	2501      	movs	r5, #1
}
   1dc5e:	4628      	mov	r0, r5
   1dc60:	b009      	add	sp, #36	; 0x24
   1dc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1dc64:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1dc66:	2202      	movs	r2, #2
   1dc68:	4620      	mov	r0, r4
   1dc6a:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   1dc6e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1dc72:	f7fe fd12 	bl	1c69a <tc_cmac_update>
   1dc76:	2800      	cmp	r0, #0
   1dc78:	d0e6      	beq.n	1dc48 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1dc7a:	2000      	movs	r0, #0
   1dc7c:	9000      	str	r0, [sp, #0]
   1dc7e:	aa03      	add	r2, sp, #12
   1dc80:	2313      	movs	r3, #19
   1dc82:	4631      	mov	r1, r6
   1dc84:	6877      	ldr	r7, [r6, #4]
   1dc86:	47b8      	blx	r7
		if (len < 0) {
   1dc88:	1e02      	subs	r2, r0, #0
   1dc8a:	dbdf      	blt.n	1dc4c <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1dc8c:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1dc8e:	4620      	mov	r0, r4
   1dc90:	f7fe fd03 	bl	1c69a <tc_cmac_update>
   1dc94:	2800      	cmp	r0, #0
   1dc96:	d1e1      	bne.n	1dc5c <gen_hash_m+0x46>
   1dc98:	e7d6      	b.n	1dc48 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1dc9a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1dc9e:	2202      	movs	r2, #2
   1dca0:	4620      	mov	r0, r4
   1dca2:	f10d 010a 	add.w	r1, sp, #10
   1dca6:	f7fe fcf8 	bl	1c69a <tc_cmac_update>
   1dcaa:	2800      	cmp	r0, #0
   1dcac:	d0cc      	beq.n	1dc48 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1dcae:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1dcb0:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1dcb2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1dcb6:	f10d 010a 	add.w	r1, sp, #10
   1dcba:	e7e8      	b.n	1dc8e <gen_hash_m+0x78>

0001dcbc <bt_addr_le_eq>:
   1dcbc:	2207      	movs	r2, #7
{
   1dcbe:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1dcc0:	f7ff f839 	bl	1cd36 <memcmp>
}
   1dcc4:	fab0 f080 	clz	r0, r0
   1dcc8:	0940      	lsrs	r0, r0, #5
   1dcca:	bd08      	pop	{r3, pc}

0001dccc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1dccc:	2207      	movs	r2, #7
   1dcce:	f7ff b842 	b.w	1cd56 <memcpy>

0001dcd2 <z_log_msg_static_create.constprop.0>:
   1dcd2:	2300      	movs	r3, #0
   1dcd4:	f7ed bd98 	b.w	b808 <z_impl_z_log_msg_static_create>

0001dcd8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1dcd8:	2301      	movs	r3, #1
   1dcda:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dcdc:	e8d0 2fef 	ldaex	r2, [r0]
   1dce0:	431a      	orrs	r2, r3
   1dce2:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1dce6:	2900      	cmp	r1, #0
   1dce8:	d1f8      	bne.n	1dcdc <atomic_set_bit+0x4>
}
   1dcea:	4770      	bx	lr

0001dcec <sc_restore_rsp>:
{
   1dcec:	b538      	push	{r3, r4, r5, lr}
   1dcee:	4604      	mov	r4, r0
   1dcf0:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1dcf2:	f7ff ff42 	bl	1db7a <bt_att_fixed_chan_only>
   1dcf6:	b150      	cbz	r0, 1dd0e <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1dcf8:	4620      	mov	r0, r4
   1dcfa:	f7f4 fc6d 	bl	125d8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1dcfe:	b130      	cbz	r0, 1dd0e <sc_restore_rsp+0x22>
   1dd00:	7a03      	ldrb	r3, [r0, #8]
   1dd02:	07db      	lsls	r3, r3, #31
   1dd04:	d503      	bpl.n	1dd0e <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1dd06:	2100      	movs	r1, #0
   1dd08:	300c      	adds	r0, #12
   1dd0a:	f7ff ffe5 	bl	1dcd8 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1dd0e:	b965      	cbnz	r5, 1dd2a <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1dd10:	7a20      	ldrb	r0, [r4, #8]
   1dd12:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1dd16:	f7f4 fc77 	bl	12608 <find_sc_cfg>
		if (sc_cfg) {
   1dd1a:	b130      	cbz	r0, 1dd2a <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1dd1c:	4629      	mov	r1, r5
}
   1dd1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1dd22:	2204      	movs	r2, #4
   1dd24:	3008      	adds	r0, #8
   1dd26:	f7ff b821 	b.w	1cd6c <memset>
}
   1dd2a:	bd38      	pop	{r3, r4, r5, pc}

0001dd2c <sc_clear>:
{
   1dd2c:	b570      	push	{r4, r5, r6, lr}
   1dd2e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dd30:	f100 0690 	add.w	r6, r0, #144	; 0x90
   1dd34:	4631      	mov	r1, r6
   1dd36:	7a00      	ldrb	r0, [r0, #8]
   1dd38:	f7ff f949 	bl	1cfce <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1dd3c:	4631      	mov	r1, r6
   1dd3e:	7a20      	ldrb	r0, [r4, #8]
   1dd40:	f7f4 fc62 	bl	12608 <find_sc_cfg>
	if (!cfg) {
   1dd44:	b128      	cbz	r0, 1dd52 <sc_clear+0x26>
}
   1dd46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1dd4a:	220c      	movs	r2, #12
   1dd4c:	2100      	movs	r1, #0
   1dd4e:	f7ff b80d 	b.w	1cd6c <memset>
}
   1dd52:	bd70      	pop	{r4, r5, r6, pc}

0001dd54 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1dd54:	2a02      	cmp	r2, #2
{
   1dd56:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1dd58:	d108      	bne.n	1dd6c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1dd5a:	2300      	movs	r3, #0
   1dd5c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1dd60:	461a      	mov	r2, r3
   1dd62:	7a00      	ldrb	r0, [r0, #8]
   1dd64:	f7f4 fcf0 	bl	12748 <sc_save>
}
   1dd68:	2002      	movs	r0, #2
   1dd6a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1dd6c:	f7ff ffde 	bl	1dd2c <sc_clear>
   1dd70:	e7fa      	b.n	1dd68 <sc_ccc_cfg_write+0x14>

0001dd72 <read_appearance>:
{
   1dd72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dd74:	4615      	mov	r5, r2
   1dd76:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1dd7a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1dd7c:	f7ff f925 	bl	1cfca <bt_get_appearance>
	if (offset > value_len) {
   1dd80:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1dd82:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1dd86:	d80e      	bhi.n	1dda6 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1dd88:	f1c6 0402 	rsb	r4, r6, #2
   1dd8c:	42bc      	cmp	r4, r7
   1dd8e:	bfa8      	it	ge
   1dd90:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1dd92:	f10d 0306 	add.w	r3, sp, #6
   1dd96:	4622      	mov	r2, r4
   1dd98:	4628      	mov	r0, r5
   1dd9a:	1999      	adds	r1, r3, r6
   1dd9c:	f7fe ffdb 	bl	1cd56 <memcpy>
}
   1dda0:	4620      	mov	r0, r4
   1dda2:	b003      	add	sp, #12
   1dda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dda6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ddaa:	e7f9      	b.n	1dda0 <read_appearance+0x2e>

0001ddac <read_name>:
{
   1ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddb0:	4698      	mov	r8, r3
   1ddb2:	4615      	mov	r5, r2
   1ddb4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1ddb8:	f7f1 fc36 	bl	f628 <bt_get_name>
   1ddbc:	4607      	mov	r7, r0
				 strlen(name));
   1ddbe:	f7fe ff8b 	bl	1ccd8 <strlen>
	if (offset > value_len) {
   1ddc2:	b283      	uxth	r3, r0
   1ddc4:	42b3      	cmp	r3, r6
   1ddc6:	d30c      	bcc.n	1dde2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1ddc8:	1b9c      	subs	r4, r3, r6
   1ddca:	4544      	cmp	r4, r8
   1ddcc:	bfa8      	it	ge
   1ddce:	4644      	movge	r4, r8
   1ddd0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1ddd2:	4622      	mov	r2, r4
   1ddd4:	4628      	mov	r0, r5
   1ddd6:	19b9      	adds	r1, r7, r6
   1ddd8:	f7fe ffbd 	bl	1cd56 <memcpy>
}
   1dddc:	4620      	mov	r0, r4
   1ddde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dde2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1dde6:	e7f9      	b.n	1dddc <read_name+0x30>

0001dde8 <cf_read>:
{
   1dde8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ddea:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1ddec:	2300      	movs	r3, #0
{
   1ddee:	4615      	mov	r5, r2
   1ddf0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1ddf4:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1ddf8:	f7f4 fbee 	bl	125d8 <find_cf_cfg>
	if (cfg) {
   1ddfc:	b128      	cbz	r0, 1de0a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1ddfe:	f100 0108 	add.w	r1, r0, #8
   1de02:	2201      	movs	r2, #1
   1de04:	a801      	add	r0, sp, #4
   1de06:	f7fe ffa6 	bl	1cd56 <memcpy>
	if (offset > value_len) {
   1de0a:	2e01      	cmp	r6, #1
   1de0c:	d80d      	bhi.n	1de2a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1de0e:	f1c6 0401 	rsb	r4, r6, #1
   1de12:	42bc      	cmp	r4, r7
   1de14:	bfa8      	it	ge
   1de16:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1de18:	ab01      	add	r3, sp, #4
   1de1a:	4622      	mov	r2, r4
   1de1c:	4628      	mov	r0, r5
   1de1e:	1999      	adds	r1, r3, r6
   1de20:	f7fe ff99 	bl	1cd56 <memcpy>
}
   1de24:	4620      	mov	r0, r4
   1de26:	b003      	add	sp, #12
   1de28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1de2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1de2e:	e7f9      	b.n	1de24 <cf_read+0x3c>

0001de30 <bt_gatt_attr_read_service>:
{
   1de30:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1de32:	68c9      	ldr	r1, [r1, #12]
{
   1de34:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1de36:	780a      	ldrb	r2, [r1, #0]
{
   1de38:	461c      	mov	r4, r3
   1de3a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1de3e:	b992      	cbnz	r2, 1de66 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1de40:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   1de42:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1de44:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1de48:	d818      	bhi.n	1de7c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1de4a:	f1c3 0202 	rsb	r2, r3, #2
   1de4e:	4294      	cmp	r4, r2
   1de50:	bfa8      	it	ge
   1de52:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1de54:	4622      	mov	r2, r4
   1de56:	f10d 0106 	add.w	r1, sp, #6
   1de5a:	4419      	add	r1, r3
   1de5c:	f7fe ff7b 	bl	1cd56 <memcpy>
}
   1de60:	4620      	mov	r0, r4
   1de62:	b002      	add	sp, #8
   1de64:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   1de66:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   1de68:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1de6c:	d806      	bhi.n	1de7c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1de6e:	f1c3 0210 	rsb	r2, r3, #16
   1de72:	4294      	cmp	r4, r2
   1de74:	bfa8      	it	ge
   1de76:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1de78:	4622      	mov	r2, r4
   1de7a:	e7ee      	b.n	1de5a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1de7c:	f06f 0406 	mvn.w	r4, #6
   1de80:	e7ee      	b.n	1de60 <bt_gatt_attr_read_service+0x30>

0001de82 <bt_gatt_attr_read_ccc>:
{
   1de82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1de84:	68c9      	ldr	r1, [r1, #12]
{
   1de86:	4615      	mov	r5, r2
   1de88:	461f      	mov	r7, r3
   1de8a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1de8e:	f7f4 fbcb 	bl	12628 <find_ccc_cfg>
	if (cfg) {
   1de92:	b100      	cbz	r0, 1de96 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1de94:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1de96:	2e02      	cmp	r6, #2
   1de98:	f8ad 0006 	strh.w	r0, [sp, #6]
   1de9c:	d80e      	bhi.n	1debc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1de9e:	f1c6 0402 	rsb	r4, r6, #2
   1dea2:	42bc      	cmp	r4, r7
   1dea4:	bfa8      	it	ge
   1dea6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1dea8:	f10d 0306 	add.w	r3, sp, #6
   1deac:	4622      	mov	r2, r4
   1deae:	4628      	mov	r0, r5
   1deb0:	1999      	adds	r1, r3, r6
   1deb2:	f7fe ff50 	bl	1cd56 <memcpy>
}
   1deb6:	4620      	mov	r0, r4
   1deb8:	b003      	add	sp, #12
   1deba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1debc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1dec0:	e7f9      	b.n	1deb6 <bt_gatt_attr_read_ccc+0x34>

0001dec2 <bt_gatt_attr_value_handle>:
{
   1dec2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1dec4:	4604      	mov	r4, r0
   1dec6:	b910      	cbnz	r0, 1dece <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1dec8:	2000      	movs	r0, #0
}
   1deca:	b002      	add	sp, #8
   1decc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1dece:	2300      	movs	r3, #0
   1ded0:	f88d 3004 	strb.w	r3, [sp, #4]
   1ded4:	f642 0303 	movw	r3, #10243	; 0x2803
   1ded8:	6800      	ldr	r0, [r0, #0]
   1deda:	a901      	add	r1, sp, #4
   1dedc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1dee0:	f7fe ff50 	bl	1cd84 <bt_uuid_cmp>
   1dee4:	2800      	cmp	r0, #0
   1dee6:	d1ef      	bne.n	1dec8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1dee8:	68e3      	ldr	r3, [r4, #12]
   1deea:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1deec:	2800      	cmp	r0, #0
   1deee:	d1ec      	bne.n	1deca <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1def0:	4620      	mov	r0, r4
   1def2:	f7f4 fdaf 	bl	12a54 <bt_gatt_attr_get_handle>
   1def6:	3001      	adds	r0, #1
   1def8:	b280      	uxth	r0, r0
	return handle;
   1defa:	e7e6      	b.n	1deca <bt_gatt_attr_value_handle+0x8>

0001defc <bt_gatt_attr_read_chrc>:
{
   1defc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1defe:	68cc      	ldr	r4, [r1, #12]
{
   1df00:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   1df02:	79a3      	ldrb	r3, [r4, #6]
{
   1df04:	b087      	sub	sp, #28
   1df06:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1df08:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1df0c:	4615      	mov	r5, r2
   1df0e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1df12:	f7ff ffd6 	bl	1dec2 <bt_gatt_attr_value_handle>
   1df16:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1df1a:	6821      	ldr	r1, [r4, #0]
   1df1c:	780b      	ldrb	r3, [r1, #0]
   1df1e:	b99b      	cbnz	r3, 1df48 <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   1df20:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1df22:	884b      	ldrh	r3, [r1, #2]
   1df24:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1df28:	42b4      	cmp	r4, r6
   1df2a:	d315      	bcc.n	1df58 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1df2c:	1ba4      	subs	r4, r4, r6
   1df2e:	42bc      	cmp	r4, r7
   1df30:	bfa8      	it	ge
   1df32:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1df34:	ab01      	add	r3, sp, #4
   1df36:	b2a4      	uxth	r4, r4
   1df38:	4622      	mov	r2, r4
   1df3a:	4628      	mov	r0, r5
   1df3c:	1999      	adds	r1, r3, r6
   1df3e:	f7fe ff0a 	bl	1cd56 <memcpy>
}
   1df42:	4620      	mov	r0, r4
   1df44:	b007      	add	sp, #28
   1df46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1df48:	2210      	movs	r2, #16
   1df4a:	3101      	adds	r1, #1
   1df4c:	f10d 0007 	add.w	r0, sp, #7
   1df50:	f7fe ff01 	bl	1cd56 <memcpy>
		value_len += 16U;
   1df54:	2413      	movs	r4, #19
   1df56:	e7e7      	b.n	1df28 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1df58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1df5c:	e7f1      	b.n	1df42 <bt_gatt_attr_read_chrc+0x46>

0001df5e <bt_gatt_foreach_attr>:
{
   1df5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1df60:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1df64:	2300      	movs	r3, #0
   1df66:	461a      	mov	r2, r3
   1df68:	9300      	str	r3, [sp, #0]
   1df6a:	f7f4 fdbb 	bl	12ae4 <bt_gatt_foreach_attr_type>
}
   1df6e:	b005      	add	sp, #20
   1df70:	f85d fb04 	ldr.w	pc, [sp], #4

0001df74 <db_hash_process>:
	db_hash_gen(true);
   1df74:	f7f4 be26 	b.w	12bc4 <db_hash_gen.constprop.0>

0001df78 <bt_gatt_check_perm>:
{
   1df78:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1df7a:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1df7c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1df7e:	d504      	bpl.n	1df8a <bt_gatt_check_perm+0x12>
   1df80:	f013 0f95 	tst.w	r3, #149	; 0x95
   1df84:	d01d      	beq.n	1dfc2 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1df86:	684c      	ldr	r4, [r1, #4]
   1df88:	b1dc      	cbz	r4, 1dfc2 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1df8a:	0794      	lsls	r4, r2, #30
   1df8c:	d504      	bpl.n	1df98 <bt_gatt_check_perm+0x20>
   1df8e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1df92:	d018      	beq.n	1dfc6 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1df94:	6889      	ldr	r1, [r1, #8]
   1df96:	b1b1      	cbz	r1, 1dfc6 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   1df98:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1df9c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1dfa0:	d001      	beq.n	1dfa6 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   1dfa2:	2005      	movs	r0, #5
}
   1dfa4:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1dfa6:	f014 0f30 	tst.w	r4, #48	; 0x30
   1dfaa:	d105      	bne.n	1dfb8 <bt_gatt_check_perm+0x40>
	return 0;
   1dfac:	f014 0f0c 	tst.w	r4, #12
   1dfb0:	bf14      	ite	ne
   1dfb2:	200f      	movne	r0, #15
   1dfb4:	2000      	moveq	r0, #0
   1dfb6:	e7f5      	b.n	1dfa4 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1dfb8:	f7ff f952 	bl	1d260 <bt_conn_get_security>
   1dfbc:	2802      	cmp	r0, #2
   1dfbe:	d8f5      	bhi.n	1dfac <bt_gatt_check_perm+0x34>
   1dfc0:	e7ef      	b.n	1dfa2 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1dfc2:	2002      	movs	r0, #2
   1dfc4:	e7ee      	b.n	1dfa4 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1dfc6:	2003      	movs	r0, #3
   1dfc8:	e7ec      	b.n	1dfa4 <bt_gatt_check_perm+0x2c>

0001dfca <bt_gatt_change_aware>:
{
   1dfca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfcc:	4606      	mov	r6, r0
   1dfce:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1dfd0:	f7f4 fb02 	bl	125d8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1dfd4:	b1e0      	cbz	r0, 1e010 <bt_gatt_change_aware+0x46>
   1dfd6:	7a03      	ldrb	r3, [r0, #8]
   1dfd8:	07db      	lsls	r3, r3, #31
   1dfda:	d519      	bpl.n	1e010 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1dfdc:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dfe0:	e8d4 5faf 	lda	r5, [r4]
   1dfe4:	f015 0501 	ands.w	r5, r5, #1
   1dfe8:	d112      	bne.n	1e010 <bt_gatt_change_aware+0x46>
	if (!req) {
   1dfea:	b197      	cbz	r7, 1e012 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfec:	e8d4 1fef 	ldaex	r1, [r4]
   1dff0:	f021 0302 	bic.w	r3, r1, #2
   1dff4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1dff8:	2a00      	cmp	r2, #0
   1dffa:	d1f7      	bne.n	1dfec <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1dffc:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1e000:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1e002:	d008      	beq.n	1e016 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   1e004:	f7ff fdbb 	bl	1db7e <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1e008:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1e00a:	4620      	mov	r0, r4
   1e00c:	f7ff fe64 	bl	1dcd8 <atomic_set_bit>
		return true;
   1e010:	2501      	movs	r5, #1
}
   1e012:	4628      	mov	r0, r5
   1e014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1e016:	f7ff fdb0 	bl	1db7a <bt_att_fixed_chan_only>
   1e01a:	2800      	cmp	r0, #0
   1e01c:	d0f9      	beq.n	1e012 <bt_gatt_change_aware+0x48>
   1e01e:	4630      	mov	r0, r6
   1e020:	f7ff fdc2 	bl	1dba8 <bt_att_out_of_sync_sent_on_fixed>
   1e024:	2800      	cmp	r0, #0
   1e026:	d0f4      	beq.n	1e012 <bt_gatt_change_aware+0x48>
   1e028:	e8d4 3fef 	ldaex	r3, [r4]
   1e02c:	f023 0302 	bic.w	r3, r3, #2
   1e030:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1e034:	2a00      	cmp	r2, #0
   1e036:	d1f7      	bne.n	1e028 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   1e038:	4630      	mov	r0, r6
   1e03a:	f7ff fda0 	bl	1db7e <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1e03e:	4639      	mov	r1, r7
   1e040:	e7e3      	b.n	1e00a <bt_gatt_change_aware+0x40>

0001e042 <bt_smp_recv>:
{
   1e042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1e044:	2100      	movs	r1, #0
   1e046:	f04f 32ff 	mov.w	r2, #4294967295
   1e04a:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1e04e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1e050:	4608      	mov	r0, r1
   1e052:	f7ff f99c 	bl	1d38e <bt_l2cap_create_pdu_timeout>
   1e056:	f100 0608 	add.w	r6, r0, #8
   1e05a:	4604      	mov	r4, r0
   1e05c:	2101      	movs	r1, #1
   1e05e:	4630      	mov	r0, r6
   1e060:	f7f5 fe14 	bl	13c8c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1e064:	2505      	movs	r5, #5
   1e066:	2101      	movs	r1, #1
   1e068:	7005      	strb	r5, [r0, #0]
   1e06a:	4630      	mov	r0, r6
   1e06c:	f7f5 fe0e 	bl	13c8c <net_buf_simple_add>
   1e070:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1e072:	7005      	strb	r5, [r0, #0]
   1e074:	4622      	mov	r2, r4
   1e076:	2106      	movs	r1, #6
   1e078:	4638      	mov	r0, r7
   1e07a:	9300      	str	r3, [sp, #0]
   1e07c:	f7ff f98a 	bl	1d394 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1e080:	b110      	cbz	r0, 1e088 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1e082:	4620      	mov	r0, r4
   1e084:	f7f5 fce0 	bl	13a48 <net_buf_unref>
}
   1e088:	2000      	movs	r0, #0
   1e08a:	b003      	add	sp, #12
   1e08c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e08e <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1e08e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e092:	4770      	bx	lr

0001e094 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1e094:	2000      	movs	r0, #0
   1e096:	4770      	bx	lr

0001e098 <fixed_data_unref>:
}
   1e098:	4770      	bx	lr

0001e09a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e09a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1e09c:	6849      	ldr	r1, [r1, #4]
   1e09e:	6809      	ldr	r1, [r1, #0]
   1e0a0:	f7f5 ba6a 	b.w	13578 <net_buf_alloc_len>

0001e0a4 <net_buf_simple_push_u8>:
{
   1e0a4:	b510      	push	{r4, lr}
   1e0a6:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1e0a8:	2101      	movs	r1, #1
   1e0aa:	f7f5 fd93 	bl	13bd4 <net_buf_simple_push>
	*data = val;
   1e0ae:	7004      	strb	r4, [r0, #0]
}
   1e0b0:	bd10      	pop	{r4, pc}

0001e0b2 <net_buf_simple_pull_le16>:
{
   1e0b2:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1e0b4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1e0b6:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1e0b8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1e0ba:	f7f5 fdab 	bl	13c14 <net_buf_simple_pull>
}
   1e0be:	4620      	mov	r0, r4
   1e0c0:	bd10      	pop	{r4, pc}

0001e0c2 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1e0c2:	6802      	ldr	r2, [r0, #0]
   1e0c4:	6880      	ldr	r0, [r0, #8]
}
   1e0c6:	1a10      	subs	r0, r2, r0
   1e0c8:	4770      	bx	lr

0001e0ca <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1e0ca:	8883      	ldrh	r3, [r0, #4]
   1e0cc:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1e0ce:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1e0d0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1e0d2:	6803      	ldr	r3, [r0, #0]
   1e0d4:	1a5b      	subs	r3, r3, r1
}
   1e0d6:	1ad0      	subs	r0, r2, r3
   1e0d8:	4770      	bx	lr

0001e0da <net_buf_simple_add_mem>:
{
   1e0da:	b538      	push	{r3, r4, r5, lr}
   1e0dc:	460d      	mov	r5, r1
   1e0de:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1e0e0:	4611      	mov	r1, r2
   1e0e2:	f7f5 fdd3 	bl	13c8c <net_buf_simple_add>
   1e0e6:	4622      	mov	r2, r4
   1e0e8:	4629      	mov	r1, r5
}
   1e0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1e0ee:	f7fe be32 	b.w	1cd56 <memcpy>

0001e0f2 <net_buf_simple_add_u8>:
{
   1e0f2:	b510      	push	{r4, lr}
   1e0f4:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1e0f6:	2101      	movs	r1, #1
   1e0f8:	f7f5 fdc8 	bl	13c8c <net_buf_simple_add>
	*u8 = val;
   1e0fc:	7004      	strb	r4, [r0, #0]
}
   1e0fe:	bd10      	pop	{r4, pc}

0001e100 <set_on_state>:
	__asm__ volatile(
   1e100:	f04f 0320 	mov.w	r3, #32
   1e104:	f3ef 8211 	mrs	r2, BASEPRI
   1e108:	f383 8812 	msr	BASEPRI_MAX, r3
   1e10c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1e110:	6803      	ldr	r3, [r0, #0]
   1e112:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e116:	f043 0302 	orr.w	r3, r3, #2
   1e11a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1e11c:	f382 8811 	msr	BASEPRI, r2
   1e120:	f3bf 8f6f 	isb	sy
}
   1e124:	4770      	bx	lr

0001e126 <async_start>:
{
   1e126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e128:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1e12a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1e12c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1e12e:	f04f 0520 	mov.w	r5, #32
   1e132:	f3ef 8611 	mrs	r6, BASEPRI
   1e136:	f385 8812 	msr	BASEPRI_MAX, r5
   1e13a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e13e:	250c      	movs	r5, #12
   1e140:	4369      	muls	r1, r5
   1e142:	440c      	add	r4, r1
   1e144:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1e148:	f005 0c07 	and.w	ip, r5, #7
   1e14c:	f1bc 0f01 	cmp.w	ip, #1
   1e150:	d10c      	bne.n	1e16c <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1e152:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   1e156:	f386 8811 	msr	BASEPRI, r6
   1e15a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1e15e:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1e162:	6843      	ldr	r3, [r0, #4]
   1e164:	585b      	ldr	r3, [r3, r1]
   1e166:	4798      	blx	r3
	return 0;
   1e168:	2000      	movs	r0, #0
}
   1e16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1e16c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1e170:	42af      	cmp	r7, r5
   1e172:	f386 8811 	msr	BASEPRI, r6
   1e176:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1e17a:	bf0c      	ite	eq
   1e17c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1e180:	f04f 30ff 	movne.w	r0, #4294967295
   1e184:	e7f1      	b.n	1e16a <async_start+0x44>

0001e186 <api_start>:
{
   1e186:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1e188:	2480      	movs	r4, #128	; 0x80
   1e18a:	9400      	str	r4, [sp, #0]
   1e18c:	f7ff ffcb 	bl	1e126 <async_start>
}
   1e190:	b002      	add	sp, #8
   1e192:	bd10      	pop	{r4, pc}

0001e194 <onoff_started_callback>:
	return &data->mgr[type];
   1e194:	6900      	ldr	r0, [r0, #16]
   1e196:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1e198:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1e19c:	2100      	movs	r1, #0
   1e19e:	4710      	bx	r2

0001e1a0 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1e1a0:	2003      	movs	r0, #3
   1e1a2:	f7f7 be87 	b.w	15eb4 <nrfx_clock_start>

0001e1a6 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1e1a6:	2002      	movs	r0, #2
   1e1a8:	f7f7 be84 	b.w	15eb4 <nrfx_clock_start>

0001e1ac <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1e1ac:	2000      	movs	r0, #0
   1e1ae:	f7f7 be81 	b.w	15eb4 <nrfx_clock_start>

0001e1b2 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1e1b2:	2003      	movs	r0, #3
   1e1b4:	f7f7 befc 	b.w	15fb0 <nrfx_clock_stop>

0001e1b8 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1e1b8:	2002      	movs	r0, #2
   1e1ba:	f7f7 bef9 	b.w	15fb0 <nrfx_clock_stop>

0001e1be <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e1be:	2000      	movs	r0, #0
   1e1c0:	f7f7 bef6 	b.w	15fb0 <nrfx_clock_stop>

0001e1c4 <blocking_start_callback>:
{
   1e1c4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1e1c6:	f7fa bb0b 	b.w	187e0 <z_impl_k_sem_give>

0001e1ca <api_stop>:
	return stop(dev, subsys, CTX_API);
   1e1ca:	2280      	movs	r2, #128	; 0x80
   1e1cc:	f7f5 bdc6 	b.w	13d5c <stop>

0001e1d0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1d0:	6843      	ldr	r3, [r0, #4]
}
   1e1d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1e1d6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1e1d8:	600b      	str	r3, [r1, #0]
}
   1e1da:	4770      	bx	lr

0001e1dc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1dc:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   1e1de:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1e2:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1e1e4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1e1e8:	6098      	str	r0, [r3, #8]
}
   1e1ea:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1e1ec:	60d9      	str	r1, [r3, #12]
   1e1ee:	4770      	bx	lr

0001e1f0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1f0:	6843      	ldr	r3, [r0, #4]
}
   1e1f2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1f4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1e1f6:	6099      	str	r1, [r3, #8]
}
   1e1f8:	4770      	bx	lr

0001e1fa <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1fa:	6843      	ldr	r3, [r0, #4]
}
   1e1fc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e1fe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1e200:	60d9      	str	r1, [r3, #12]
}
   1e202:	4770      	bx	lr

0001e204 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e204:	6843      	ldr	r3, [r0, #4]
   1e206:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1e208:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1e20a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1e20e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1e210:	6090      	str	r0, [r2, #8]
}
   1e212:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1e214:	60d3      	str	r3, [r2, #12]
   1e216:	4770      	bx	lr

0001e218 <uarte_nrfx_config_get>:
{
   1e218:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   1e21a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1e21c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1e220:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1e224:	2000      	movs	r0, #0
   1e226:	4770      	bx	lr

0001e228 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1e228:	6843      	ldr	r3, [r0, #4]
   1e22a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1e22c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1e230:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1e234:	4770      	bx	lr

0001e236 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1e236:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1e238:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1e23a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e23c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1e240:	b150      	cbz	r0, 1e258 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e242:	2000      	movs	r0, #0
	*c = *data->rx_data;
   1e244:	6952      	ldr	r2, [r2, #20]
   1e246:	7812      	ldrb	r2, [r2, #0]
   1e248:	700a      	strb	r2, [r1, #0]
   1e24a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1e24e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e252:	2201      	movs	r2, #1
   1e254:	601a      	str	r2, [r3, #0]
	return 0;
   1e256:	4770      	bx	lr
		return -1;
   1e258:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e25c:	4770      	bx	lr

0001e25e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1e25e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1e260:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e262:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1e266:	b940      	cbnz	r0, 1e27a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1e268:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1e26a:	079b      	lsls	r3, r3, #30
   1e26c:	d406      	bmi.n	1e27c <is_tx_ready.isra.0+0x1e>
   1e26e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1e272:	3800      	subs	r0, #0
   1e274:	bf18      	it	ne
   1e276:	2001      	movne	r0, #1
   1e278:	4770      	bx	lr
   1e27a:	2001      	movs	r0, #1
}
   1e27c:	4770      	bx	lr

0001e27e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1e27e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1e280:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1e282:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1e286:	05c9      	lsls	r1, r1, #23
   1e288:	d518      	bpl.n	1e2bc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e28a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1e28e:	b1a9      	cbz	r1, 1e2bc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1e290:	f04f 0020 	mov.w	r0, #32
   1e294:	f3ef 8111 	mrs	r1, BASEPRI
   1e298:	f380 8812 	msr	BASEPRI_MAX, r0
   1e29c:	f3bf 8f6f 	isb	sy
   1e2a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1e2a4:	b130      	cbz	r0, 1e2b4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e2a6:	2000      	movs	r0, #0
   1e2a8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1e2ac:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e2b0:	2001      	movs	r0, #1
   1e2b2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1e2b4:	f381 8811 	msr	BASEPRI, r1
   1e2b8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e2bc:	6852      	ldr	r2, [r2, #4]
   1e2be:	06d2      	lsls	r2, r2, #27
   1e2c0:	d515      	bpl.n	1e2ee <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1e2c2:	f04f 0120 	mov.w	r1, #32
   1e2c6:	f3ef 8211 	mrs	r2, BASEPRI
   1e2ca:	f381 8812 	msr	BASEPRI_MAX, r1
   1e2ce:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e2d2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1e2d6:	b111      	cbz	r1, 1e2de <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e2d8:	2100      	movs	r1, #0
   1e2da:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1e2de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1e2e2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1e2e6:	f382 8811 	msr	BASEPRI, r2
   1e2ea:	f3bf 8f6f 	isb	sy
}
   1e2ee:	4770      	bx	lr

0001e2f0 <z_log_msg_static_create.constprop.0>:
   1e2f0:	2300      	movs	r3, #0
   1e2f2:	f7ed ba89 	b.w	b808 <z_impl_z_log_msg_static_create>

0001e2f6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1e2f6:	2000      	movs	r0, #0
   1e2f8:	4770      	bx	lr

0001e2fa <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1e2fa:	b538      	push	{r3, r4, r5, lr}
   1e2fc:	460c      	mov	r4, r1
   1e2fe:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1e300:	f7f1 f98a 	bl	f618 <bt_is_ready>
   1e304:	b128      	cbz	r0, 1e312 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1e306:	4629      	mov	r1, r5
   1e308:	4620      	mov	r0, r4
}
   1e30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1e30e:	f7f0 ba49 	b.w	e7a4 <bt_hci_le_rand>
}
   1e312:	f06f 000a 	mvn.w	r0, #10
   1e316:	bd38      	pop	{r3, r4, r5, pc}

0001e318 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1e318:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   1e31a:	f000 f91d 	bl	1e558 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   1e31e:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   1e320:	bf18      	it	ne
   1e322:	f06f 0015 	mvnne.w	r0, #21
   1e326:	bd08      	pop	{r3, pc}

0001e328 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1e328:	4770      	bx	lr

0001e32a <sys_clock_cycle_get_32>:
{
   1e32a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1e32c:	f7f6 fede 	bl	150ec <z_nrf_rtc_timer_read>
}
   1e330:	bd08      	pop	{r3, pc}

0001e332 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1e332:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1e334:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   1e338:	6843      	ldr	r3, [r0, #4]
   1e33a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1e33c:	7a05      	ldrb	r5, [r0, #8]
   1e33e:	6844      	ldr	r4, [r0, #4]
   1e340:	4435      	add	r5, r6
   1e342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1e346:	42a3      	cmp	r3, r4
   1e348:	d902      	bls.n	1e350 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   1e34a:	f06f 0001 	mvn.w	r0, #1
}
   1e34e:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   1e350:	795c      	ldrb	r4, [r3, #5]
   1e352:	428c      	cmp	r4, r1
   1e354:	d001      	beq.n	1e35a <pinctrl_lookup_state+0x28>
		(*state)++;
   1e356:	3308      	adds	r3, #8
   1e358:	e7ef      	b.n	1e33a <pinctrl_lookup_state+0x8>
			return 0;
   1e35a:	2000      	movs	r0, #0
   1e35c:	e7f7      	b.n	1e34e <pinctrl_lookup_state+0x1c>

0001e35e <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1e35e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e362:	4615      	mov	r5, r2
   1e364:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e366:	f04f 0901 	mov.w	r9, #1
   1e36a:	b085      	sub	sp, #20
   1e36c:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1e370:	45d0      	cmp	r8, sl
   1e372:	d103      	bne.n	1e37c <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1e374:	2000      	movs	r0, #0
}
   1e376:	b005      	add	sp, #20
   1e378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1e37c:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1e380:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1e384:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   1e388:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1e38a:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   1e38e:	bf08      	it	eq
   1e390:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1e394:	2b22      	cmp	r3, #34	; 0x22
   1e396:	f200 8091 	bhi.w	1e4bc <pinctrl_configure_pins+0x15e>
   1e39a:	e8df f003 	tbb	[pc, r3]
   1e39e:	1e12      	.short	0x1e12
   1e3a0:	34263823 	.word	0x34263823
   1e3a4:	8f8f8f38 	.word	0x8f8f8f38
   1e3a8:	8f653b8f 	.word	0x8f653b8f
   1e3ac:	8f8f8f8f 	.word	0x8f8f8f8f
   1e3b0:	8f8f8f8f 	.word	0x8f8f8f8f
   1e3b4:	77747168 	.word	0x77747168
   1e3b8:	7a8f8f8f 	.word	0x7a8f8f8f
   1e3bc:	89868380 	.word	0x89868380
   1e3c0:	8c          	.byte	0x8c
   1e3c1:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1e3c2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e3c6:	a803      	add	r0, sp, #12
   1e3c8:	9403      	str	r4, [sp, #12]
   1e3ca:	f7f7 f8bb 	bl	15544 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e3ce:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   1e3d0:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e3d2:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   1e3d6:	6083      	str	r3, [r0, #8]
   1e3d8:	e002      	b.n	1e3e0 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   1e3da:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1e3de:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   1e3e0:	46b3      	mov	fp, r6
   1e3e2:	e01e      	b.n	1e422 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1e3e4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   1e3e8:	e7ed      	b.n	1e3c6 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1e3ea:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1e3ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e3f0:	a803      	add	r0, sp, #12
   1e3f2:	9403      	str	r4, [sp, #12]
   1e3f4:	f7f7 f8a6 	bl	15544 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1e3f8:	9b03      	ldr	r3, [sp, #12]
   1e3fa:	f04f 0b01 	mov.w	fp, #1
   1e3fe:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   1e402:	60c3      	str	r3, [r0, #12]
   1e404:	e00d      	b.n	1e422 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1e406:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1e40a:	2601      	movs	r6, #1
   1e40c:	e7f0      	b.n	1e3f0 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1e40e:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   1e412:	e7e4      	b.n	1e3de <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1e414:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1e418:	2f00      	cmp	r7, #0
   1e41a:	d1e0      	bne.n	1e3de <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1e41c:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   1e41e:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1e420:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1e422:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e426:	a803      	add	r0, sp, #12
   1e428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e42c:	2a00      	cmp	r2, #0
   1e42e:	bf1c      	itt	ne
   1e430:	2601      	movne	r6, #1
   1e432:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1e436:	9301      	str	r3, [sp, #4]
   1e438:	9403      	str	r4, [sp, #12]
   1e43a:	f7f7 f883 	bl	15544 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1e43e:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e440:	9b01      	ldr	r3, [sp, #4]
   1e442:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1e446:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e44a:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1e44e:	023b      	lsls	r3, r7, #8
   1e450:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   1e454:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1e458:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   1e45c:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1e45e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1e462:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1e466:	e783      	b.n	1e370 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1e468:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1e46c:	e7d4      	b.n	1e418 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1e46e:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1e472:	f8da 3000 	ldr.w	r3, [sl]
   1e476:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   1e47a:	2b00      	cmp	r3, #0
   1e47c:	d0c5      	beq.n	1e40a <pinctrl_configure_pins+0xac>
   1e47e:	e7a2      	b.n	1e3c6 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1e480:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1e484:	e7f5      	b.n	1e472 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1e486:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1e48a:	e7f2      	b.n	1e472 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1e48c:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   1e490:	e7ef      	b.n	1e472 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1e492:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e496:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1e498:	f04f 0b00 	mov.w	fp, #0
   1e49c:	e7c1      	b.n	1e422 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1e49e:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   1e4a2:	e790      	b.n	1e3c6 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1e4a4:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   1e4a8:	e7f5      	b.n	1e496 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1e4aa:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   1e4ae:	e7f2      	b.n	1e496 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1e4b0:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   1e4b4:	e7ef      	b.n	1e496 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1e4b6:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   1e4ba:	e7ec      	b.n	1e496 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   1e4bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e4c0:	e759      	b.n	1e376 <pinctrl_configure_pins+0x18>

0001e4c2 <mbox_nrf_register_callback>:
{
   1e4c2:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1e4c4:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1e4c6:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   1e4c8:	bf9f      	itttt	ls
   1e4ca:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   1e4ce:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1e4d2:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1e4d4:	2000      	movls	r0, #0
		return -EINVAL;
   1e4d6:	bf88      	it	hi
   1e4d8:	f06f 0015 	mvnhi.w	r0, #21
}
   1e4dc:	bd10      	pop	{r4, pc}

0001e4de <mbox_nrf_mtu_get>:
}
   1e4de:	2000      	movs	r0, #0
   1e4e0:	4770      	bx	lr

0001e4e2 <mbox_nrf_max_channels_get>:
}
   1e4e2:	2010      	movs	r0, #16
   1e4e4:	4770      	bx	lr

0001e4e6 <z_log_msg_static_create.constprop.0>:
   1e4e6:	2300      	movs	r3, #0
   1e4e8:	f7ed b98e 	b.w	b808 <z_impl_z_log_msg_static_create>

0001e4ec <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1e4ec:	2101      	movs	r1, #1
   1e4ee:	f7f7 baa5 	b.w	15a3c <dk_set_led>

0001e4f2 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1e4f2:	2100      	movs	r1, #0
   1e4f4:	f7f7 baa2 	b.w	15a3c <dk_set_led>

0001e4f8 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1e4f8:	2000      	movs	r0, #0
   1e4fa:	4770      	bx	lr

0001e4fc <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   1e4fc:	2300      	movs	r3, #0
{
   1e4fe:	b570      	push	{r4, r5, r6, lr}
   1e500:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   1e502:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   1e506:	ab03      	add	r3, sp, #12
   1e508:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   1e50a:	2304      	movs	r3, #4
{
   1e50c:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   1e50e:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   1e510:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   1e512:	b169      	cbz	r1, 1e530 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   1e514:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   1e516:	680b      	ldr	r3, [r1, #0]
   1e518:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   1e51a:	684b      	ldr	r3, [r1, #4]
   1e51c:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   1e51e:	2101      	movs	r1, #1
   1e520:	2041      	movs	r0, #65	; 0x41
   1e522:	f7f7 fb43 	bl	15bac <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   1e526:	1e05      	subs	r5, r0, #0
   1e528:	dc04      	bgt.n	1e534 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   1e52a:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   1e52c:	b008      	add	sp, #32
   1e52e:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   1e530:	2601      	movs	r6, #1
   1e532:	e7f4      	b.n	1e51e <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   1e534:	1e23      	subs	r3, r4, #0
   1e536:	bf18      	it	ne
   1e538:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   1e53a:	2100      	movs	r1, #0
   1e53c:	e9cd 4300 	strd	r4, r3, [sp]
   1e540:	aa04      	add	r2, sp, #16
   1e542:	4633      	mov	r3, r6
   1e544:	f7f7 fb16 	bl	15b74 <psa_call>
   1e548:	4604      	mov	r4, r0
    psa_close(handle);
   1e54a:	4628      	mov	r0, r5
   1e54c:	f7f7 fb3c 	bl	15bc8 <psa_close>
    if (status < PSA_SUCCESS) {
   1e550:	2c00      	cmp	r4, #0
   1e552:	dbea      	blt.n	1e52a <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   1e554:	4620      	mov	r0, r4
   1e556:	e7e9      	b.n	1e52c <tfm_platform_ioctl+0x30>

0001e558 <psa_crypto_init>:
}
   1e558:	2000      	movs	r0, #0
   1e55a:	4770      	bx	lr

0001e55c <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   1e55c:	2300      	movs	r3, #0
{
   1e55e:	b510      	push	{r4, lr}
   1e560:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   1e562:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   1e566:	ab05      	add	r3, sp, #20
   1e568:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   1e56a:	230c      	movs	r3, #12
   1e56c:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   1e56e:	2304      	movs	r3, #4
{
   1e570:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   1e572:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1e574:	aa03      	add	r2, sp, #12
   1e576:	eb0d 0103 	add.w	r1, sp, r3
   1e57a:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   1e57c:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   1e57e:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1e582:	f7ff ffbb 	bl	1e4fc <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   1e586:	9b00      	ldr	r3, [sp, #0]
   1e588:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   1e58a:	b008      	add	sp, #32
   1e58c:	bd10      	pop	{r4, pc}

0001e58e <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1e58e:	f7f7 bb29 	b.w	15be4 <SystemCoreClockUpdate>

0001e592 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1e592:	4700      	bx	r0

0001e594 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1e594:	f000 be56 	b.w	1f244 <z_impl_k_busy_wait>

0001e598 <nrf_gpio_pin_present_check>:
    switch (port)
   1e598:	0943      	lsrs	r3, r0, #5
   1e59a:	d00b      	beq.n	1e5b4 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   1e59c:	2b01      	cmp	r3, #1
   1e59e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e5a2:	bf18      	it	ne
   1e5a4:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1e5a6:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e5aa:	fa23 f000 	lsr.w	r0, r3, r0
}
   1e5ae:	f000 0001 	and.w	r0, r0, #1
   1e5b2:	4770      	bx	lr
    switch (port)
   1e5b4:	f04f 33ff 	mov.w	r3, #4294967295
   1e5b8:	e7f5      	b.n	1e5a6 <nrf_gpio_pin_present_check+0xe>

0001e5ba <pin_is_task_output>:
{
   1e5ba:	b508      	push	{r3, lr}
   1e5bc:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1e5be:	f7f7 fd93 	bl	160e8 <pin_is_output>
   1e5c2:	b110      	cbz	r0, 1e5ca <pin_is_task_output+0x10>
   1e5c4:	4610      	mov	r0, r2
   1e5c6:	f7f7 fd79 	bl	160bc <pin_in_use_by_te>
}
   1e5ca:	f000 0001 	and.w	r0, r0, #1
   1e5ce:	bd08      	pop	{r3, pc}

0001e5d0 <nrf_gpio_reconfigure>:
{
   1e5d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e5d4:	4617      	mov	r7, r2
   1e5d6:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   1e5da:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e5dc:	a801      	add	r0, sp, #4
{
   1e5de:	460c      	mov	r4, r1
   1e5e0:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e5e2:	f7f7 fe05 	bl	161f0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e5e6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e5e8:	1e39      	subs	r1, r7, #0
   1e5ea:	bf18      	it	ne
   1e5ec:	2101      	movne	r1, #1
   1e5ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e5f2:	1e23      	subs	r3, r4, #0
   1e5f4:	bf18      	it	ne
   1e5f6:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e5f8:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e5fa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e5fe:	bf14      	ite	ne
   1e600:	210c      	movne	r1, #12
   1e602:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e604:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e606:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e60a:	bf14      	ite	ne
   1e60c:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   1e610:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e612:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e616:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e61a:	bf14      	ite	ne
   1e61c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   1e620:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e622:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e626:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   1e628:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e62c:	b104      	cbz	r4, 1e630 <nrf_gpio_reconfigure+0x60>
   1e62e:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1e630:	b10f      	cbz	r7, 1e636 <nrf_gpio_reconfigure+0x66>
   1e632:	783f      	ldrb	r7, [r7, #0]
   1e634:	007f      	lsls	r7, r7, #1
   1e636:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1e638:	b10e      	cbz	r6, 1e63e <nrf_gpio_reconfigure+0x6e>
   1e63a:	7836      	ldrb	r6, [r6, #0]
   1e63c:	00b6      	lsls	r6, r6, #2
   1e63e:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1e640:	b18d      	cbz	r5, 1e666 <nrf_gpio_reconfigure+0x96>
   1e642:	7829      	ldrb	r1, [r5, #0]
   1e644:	0209      	lsls	r1, r1, #8
   1e646:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1e648:	f1b8 0f00 	cmp.w	r8, #0
   1e64c:	d003      	beq.n	1e656 <nrf_gpio_reconfigure+0x86>
   1e64e:	f898 8000 	ldrb.w	r8, [r8]
   1e652:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e656:	4321      	orrs	r1, r4
   1e658:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   1e65c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1e660:	b002      	add	sp, #8
   1e662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1e666:	4629      	mov	r1, r5
   1e668:	e7ed      	b.n	1e646 <nrf_gpio_reconfigure+0x76>

0001e66a <nrf_gpio_cfg_sense_set>:
{
   1e66a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e66c:	f10d 030f 	add.w	r3, sp, #15
   1e670:	9301      	str	r3, [sp, #4]
   1e672:	2300      	movs	r3, #0
{
   1e674:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e678:	461a      	mov	r2, r3
   1e67a:	4619      	mov	r1, r3
   1e67c:	9300      	str	r3, [sp, #0]
   1e67e:	f7ff ffa7 	bl	1e5d0 <nrf_gpio_reconfigure>
}
   1e682:	b005      	add	sp, #20
   1e684:	f85d fb04 	ldr.w	pc, [sp], #4

0001e688 <start_playback>:
{
   1e688:	b510      	push	{r4, lr}
   1e68a:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1e68c:	2002      	movs	r0, #2
    p_cb->flags = flags;
   1e68e:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1e690:	7208      	strb	r0, [r1, #8]
    if (p_cb->handler)
   1e692:	6809      	ldr	r1, [r1, #0]
   1e694:	b179      	cbz	r1, 1e6b6 <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   1e696:	f012 0f04 	tst.w	r2, #4
   1e69a:	bf0c      	ite	eq
   1e69c:	2182      	moveq	r1, #130	; 0x82
   1e69e:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1e6a0:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1e6a2:	bf48      	it	mi
   1e6a4:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1e6a8:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   1e6aa:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   1e6ac:	bf48      	it	mi
   1e6ae:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1e6b2:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6b6:	2000      	movs	r0, #0
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1e6b8:	6821      	ldr	r1, [r4, #0]
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1e6ba:	f012 0f80 	tst.w	r2, #128	; 0x80
   1e6be:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   1e6c2:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e6c6:	bf08      	it	eq
   1e6c8:	2101      	moveq	r1, #1
   1e6ca:	6822      	ldr	r2, [r4, #0]
   1e6cc:	bf0c      	ite	eq
   1e6ce:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   1e6d0:	18d0      	addne	r0, r2, r3
}
   1e6d2:	bd10      	pop	{r4, pc}

0001e6d4 <metal_device_open>:
{
   1e6d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e6d6:	460c      	mov	r4, r1
   1e6d8:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1e6da:	4606      	mov	r6, r0
   1e6dc:	b918      	cbnz	r0, 1e6e6 <metal_device_open+0x12>
		return -EINVAL;
   1e6de:	f06f 0015 	mvn.w	r0, #21
}
   1e6e2:	b002      	add	sp, #8
   1e6e4:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1e6e6:	f7fe faf7 	bl	1ccd8 <strlen>
   1e6ea:	2800      	cmp	r0, #0
   1e6ec:	d0f7      	beq.n	1e6de <metal_device_open+0xa>
   1e6ee:	2c00      	cmp	r4, #0
   1e6f0:	d0f5      	beq.n	1e6de <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1e6f2:	4620      	mov	r0, r4
   1e6f4:	f7fe faf0 	bl	1ccd8 <strlen>
   1e6f8:	2800      	cmp	r0, #0
   1e6fa:	d0f0      	beq.n	1e6de <metal_device_open+0xa>
   1e6fc:	2d00      	cmp	r5, #0
   1e6fe:	d0ee      	beq.n	1e6de <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1e700:	4630      	mov	r0, r6
   1e702:	a901      	add	r1, sp, #4
   1e704:	f7f8 fc0a 	bl	16f1c <metal_bus_find>
	if (error)
   1e708:	2800      	cmp	r0, #0
   1e70a:	d1ea      	bne.n	1e6e2 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1e70c:	9801      	ldr	r0, [sp, #4]
   1e70e:	6883      	ldr	r3, [r0, #8]
   1e710:	b12b      	cbz	r3, 1e71e <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1e712:	462a      	mov	r2, r5
   1e714:	4621      	mov	r1, r4
}
   1e716:	b002      	add	sp, #8
   1e718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1e71c:	4718      	bx	r3
		return -ENODEV;
   1e71e:	f06f 0012 	mvn.w	r0, #18
   1e722:	e7de      	b.n	1e6e2 <metal_device_open+0xe>

0001e724 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   1e724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e728:	b089      	sub	sp, #36	; 0x24
   1e72a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1e72c:	4604      	mov	r4, r0
   1e72e:	4689      	mov	r9, r1
   1e730:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   1e732:	2100      	movs	r1, #0
   1e734:	2220      	movs	r2, #32
   1e736:	4668      	mov	r0, sp
{
   1e738:	461f      	mov	r7, r3
   1e73a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   1e73c:	f7fe fb16 	bl	1cd6c <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1e740:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   1e742:	bf97      	itett	ls
   1e744:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   1e746:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   1e74a:	40b3      	lslls	r3, r6
   1e74c:	f103 33ff 	addls.w	r3, r3, #4294967295
   1e750:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   1e752:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   1e754:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   1e758:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   1e75c:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   1e75e:	3418      	adds	r4, #24
   1e760:	b145      	cbz	r5, 1e774 <metal_io_init+0x50>
   1e762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e766:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e76a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   1e76e:	b009      	add	sp, #36	; 0x24
   1e770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   1e774:	466d      	mov	r5, sp
   1e776:	e7f4      	b.n	1e762 <metal_io_init+0x3e>

0001e778 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1e778:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e77a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e77c:	1c66      	adds	r6, r4, #1
   1e77e:	d031      	beq.n	1e7e4 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e780:	6885      	ldr	r5, [r0, #8]
   1e782:	42a9      	cmp	r1, r5
   1e784:	d22e      	bcs.n	1e7e4 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1e786:	1864      	adds	r4, r4, r1
   1e788:	d02c      	beq.n	1e7e4 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e78a:	185e      	adds	r6, r3, r1
   1e78c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1e78e:	bf88      	it	hi
   1e790:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1e792:	6a05      	ldr	r5, [r0, #32]
   1e794:	b135      	cbz	r5, 1e7a4 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   1e796:	9300      	str	r3, [sp, #0]
   1e798:	2305      	movs	r3, #5
   1e79a:	47a8      	blx	r5
   1e79c:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1e79e:	4618      	mov	r0, r3
   1e7a0:	b002      	add	sp, #8
   1e7a2:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   1e7a4:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1e7a8:	4619      	mov	r1, r3
   1e7aa:	1aa4      	subs	r4, r4, r2
   1e7ac:	1910      	adds	r0, r2, r4
   1e7ae:	b119      	cbz	r1, 1e7b8 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   1e7b0:	ea40 0502 	orr.w	r5, r0, r2
   1e7b4:	07ad      	lsls	r5, r5, #30
   1e7b6:	d10a      	bne.n	1e7ce <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1e7b8:	2903      	cmp	r1, #3
   1e7ba:	dc0d      	bgt.n	1e7d8 <metal_io_block_read+0x60>
   1e7bc:	3801      	subs	r0, #1
   1e7be:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   1e7c0:	428a      	cmp	r2, r1
   1e7c2:	d0ec      	beq.n	1e79e <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   1e7c4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   1e7c8:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1e7cc:	e7f8      	b.n	1e7c0 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   1e7ce:	7800      	ldrb	r0, [r0, #0]
			len--;
   1e7d0:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   1e7d2:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   1e7d6:	e7e9      	b.n	1e7ac <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1e7d8:	f850 4b04 	ldr.w	r4, [r0], #4
   1e7dc:	3904      	subs	r1, #4
   1e7de:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   1e7e2:	e7e9      	b.n	1e7b8 <metal_io_block_read+0x40>
		return -ERANGE;
   1e7e4:	f06f 0321 	mvn.w	r3, #33	; 0x21
   1e7e8:	e7d9      	b.n	1e79e <metal_io_block_read+0x26>

0001e7ea <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1e7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e7ec:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e7ee:	1c65      	adds	r5, r4, #1
   1e7f0:	d032      	beq.n	1e858 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e7f2:	6885      	ldr	r5, [r0, #8]
   1e7f4:	42a9      	cmp	r1, r5
   1e7f6:	d22f      	bcs.n	1e858 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   1e7f8:	1864      	adds	r4, r4, r1
   1e7fa:	d02d      	beq.n	1e858 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e7fc:	185e      	adds	r6, r3, r1
   1e7fe:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1e800:	bf88      	it	hi
   1e802:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1e804:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1e806:	b1cd      	cbz	r5, 1e83c <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   1e808:	9300      	str	r3, [sp, #0]
   1e80a:	2305      	movs	r3, #5
   1e80c:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1e80e:	b002      	add	sp, #8
   1e810:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1e812:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   1e816:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1e818:	7005      	strb	r5, [r0, #0]
			len--;
   1e81a:	4615      	mov	r5, r2
   1e81c:	18a0      	adds	r0, r4, r2
		while ( len && (
   1e81e:	b119      	cbz	r1, 1e828 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   1e820:	ea40 0602 	orr.w	r6, r0, r2
   1e824:	07b6      	lsls	r6, r6, #30
   1e826:	d1f4      	bne.n	1e812 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e828:	2903      	cmp	r1, #3
   1e82a:	dc0a      	bgt.n	1e842 <metal_io_block_write+0x58>
   1e82c:	3d01      	subs	r5, #1
   1e82e:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   1e830:	4288      	cmp	r0, r1
   1e832:	d10c      	bne.n	1e84e <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   1e834:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1e838:	4618      	mov	r0, r3
   1e83a:	e7e8      	b.n	1e80e <metal_io_block_write+0x24>
   1e83c:	4619      	mov	r1, r3
   1e83e:	1aa4      	subs	r4, r4, r2
   1e840:	e7eb      	b.n	1e81a <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1e842:	f855 2b04 	ldr.w	r2, [r5], #4
   1e846:	3904      	subs	r1, #4
   1e848:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   1e84c:	e7ec      	b.n	1e828 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   1e84e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   1e852:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   1e856:	e7eb      	b.n	1e830 <metal_io_block_write+0x46>
		return -ERANGE;
   1e858:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e85c:	e7d7      	b.n	1e80e <metal_io_block_write+0x24>

0001e85e <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1e85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e860:	6804      	ldr	r4, [r0, #0]
   1e862:	461d      	mov	r5, r3
		: NULL);
   1e864:	1c66      	adds	r6, r4, #1
   1e866:	d02b      	beq.n	1e8c0 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e868:	6883      	ldr	r3, [r0, #8]
   1e86a:	4299      	cmp	r1, r3
   1e86c:	d228      	bcs.n	1e8c0 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   1e86e:	1864      	adds	r4, r4, r1
   1e870:	d026      	beq.n	1e8c0 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e872:	186e      	adds	r6, r5, r1
   1e874:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1e876:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1e878:	bf88      	it	hi
   1e87a:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1e87c:	b12e      	cbz	r6, 1e88a <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   1e87e:	2305      	movs	r3, #5
   1e880:	9500      	str	r5, [sp, #0]
   1e882:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   1e884:	4628      	mov	r0, r5
}
   1e886:	b002      	add	sp, #8
   1e888:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   1e88a:	4621      	mov	r1, r4
   1e88c:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e88e:	b94b      	cbnz	r3, 1e8a4 <metal_io_block_set+0x46>
   1e890:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   1e892:	4299      	cmp	r1, r3
   1e894:	d111      	bne.n	1e8ba <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   1e896:	f3bf 8f5b 	dmb	ish
   1e89a:	e7f3      	b.n	1e884 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   1e89c:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e8a0:	3b01      	subs	r3, #1
   1e8a2:	e7f4      	b.n	1e88e <metal_io_block_set+0x30>
   1e8a4:	0788      	lsls	r0, r1, #30
   1e8a6:	d1f9      	bne.n	1e89c <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1e8a8:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   1e8ac:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e8ae:	2b03      	cmp	r3, #3
   1e8b0:	ddee      	ble.n	1e890 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   1e8b2:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e8b6:	3b04      	subs	r3, #4
   1e8b8:	e7f9      	b.n	1e8ae <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   1e8ba:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   1e8be:	e7e8      	b.n	1e892 <metal_io_block_set+0x34>
		return -ERANGE;
   1e8c0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e8c4:	e7df      	b.n	1e886 <metal_io_block_set+0x28>

0001e8c6 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1e8c6:	2000      	movs	r0, #0
   1e8c8:	4770      	bx	lr

0001e8ca <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1e8ca:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   1e8cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1e8ce:	4602      	mov	r2, r0
   1e8d0:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1e8d2:	b984      	cbnz	r4, 1e8f6 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   1e8d4:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   1e8d6:	291f      	cmp	r1, #31
   1e8d8:	bf98      	it	ls
   1e8da:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   1e8de:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1e8e0:	b161      	cbz	r1, 1e8fc <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   1e8e2:	6880      	ldr	r0, [r0, #8]
   1e8e4:	4283      	cmp	r3, r0
   1e8e6:	d209      	bcs.n	1e8fc <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   1e8e8:	6910      	ldr	r0, [r2, #16]
   1e8ea:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   1e8ec:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1e8f0:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1e8f2:	bc10      	pop	{r4}
   1e8f4:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1e8f6:	4623      	mov	r3, r4
}
   1e8f8:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   1e8fa:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1e8fc:	f04f 30ff 	mov.w	r0, #4294967295
   1e900:	e7f7      	b.n	1e8f2 <metal_io_phys+0x28>

0001e902 <virtqueue_create>:
{
   1e902:	b530      	push	{r4, r5, lr}
   1e904:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   1e906:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   1e90a:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   1e90c:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   1e90e:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   1e910:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   1e912:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   1e914:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1e916:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   1e918:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1e91a:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1e91e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   1e922:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1e926:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1e928:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1e92a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   1e92e:	1c6a      	adds	r2, r5, #1
   1e930:	4413      	add	r3, r2
   1e932:	426d      	negs	r5, r5
   1e934:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1e936:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e938:	6983      	ldr	r3, [r0, #24]
   1e93a:	b953      	cbnz	r3, 1e952 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   1e93c:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   1e93e:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   1e940:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   1e942:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   1e946:	db06      	blt.n	1e956 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1e948:	2300      	movs	r3, #0
   1e94a:	7393      	strb	r3, [r2, #14]
   1e94c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e950:	73d3      	strb	r3, [r2, #15]
}
   1e952:	2000      	movs	r0, #0
   1e954:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   1e956:	3301      	adds	r3, #1
   1e958:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1e95a:	e7f0      	b.n	1e93e <virtqueue_create+0x3c>

0001e95c <virtqueue_add_buffer>:
{
   1e95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   1e960:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   1e964:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e966:	4655      	mov	r5, sl
   1e968:	2600      	movs	r6, #0
{
   1e96a:	b085      	sub	sp, #20
	needed = readable + writable;
   1e96c:	eb02 0803 	add.w	r8, r2, r3
{
   1e970:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1e972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e974:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   1e978:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   1e97c:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1e97e:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   1e982:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1e986:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e988:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   1e98a:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e98c:	45b0      	cmp	r8, r6
   1e98e:	dc1a      	bgt.n	1e9c6 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   1e990:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   1e992:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1e994:	eba3 030b 	sub.w	r3, r3, fp
   1e998:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by slave, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1e99a:	69e3      	ldr	r3, [r4, #28]
   1e99c:	8961      	ldrh	r1, [r4, #10]
   1e99e:	885a      	ldrh	r2, [r3, #2]
   1e9a0:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1e9a2:	400a      	ands	r2, r1
   1e9a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1e9a8:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1e9ac:	f3bf 8f5b 	dmb	ish
}
   1e9b0:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   1e9b2:	69e2      	ldr	r2, [r4, #28]
   1e9b4:	8853      	ldrh	r3, [r2, #2]
   1e9b6:	3301      	adds	r3, #1
   1e9b8:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1e9ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1e9bc:	3301      	adds	r3, #1
   1e9be:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1e9c0:	b005      	add	sp, #20
   1e9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1e9c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1e9c8:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e9ca:	f857 1c04 	ldr.w	r1, [r7, #-4]
   1e9ce:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1e9d2:	9302      	str	r3, [sp, #8]
   1e9d4:	6803      	ldr	r3, [r0, #0]
   1e9d6:	9203      	str	r2, [sp, #12]
   1e9d8:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1e9da:	6883      	ldr	r3, [r0, #8]
   1e9dc:	3708      	adds	r7, #8
   1e9de:	4299      	cmp	r1, r3
   1e9e0:	bf28      	it	cs
   1e9e2:	f04f 31ff 	movcs.w	r1, #4294967295
   1e9e6:	f7ff ff70 	bl	1e8ca <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1e9ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e9ee:	5098      	str	r0, [r3, r2]
   1e9f0:	2200      	movs	r2, #0
   1e9f2:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   1e9f4:	f857 2c08 	ldr.w	r2, [r7, #-8]
   1e9f8:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1e9fa:	9a01      	ldr	r2, [sp, #4]
   1e9fc:	4296      	cmp	r6, r2
   1e9fe:	bfac      	ite	ge
   1ea00:	2200      	movge	r2, #0
   1ea02:	2201      	movlt	r2, #1
		if (i >= readable)
   1ea04:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   1ea06:	bfd8      	it	le
   1ea08:	f042 0202 	orrle.w	r2, r2, #2
   1ea0c:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1ea0e:	3601      	adds	r6, #1
   1ea10:	89ed      	ldrh	r5, [r5, #14]
   1ea12:	e7bb      	b.n	1e98c <virtqueue_add_buffer+0x30>

0001ea14 <virtqueue_get_buffer>:
{
   1ea14:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1ea16:	b350      	cbz	r0, 1ea6e <virtqueue_get_buffer+0x5a>
   1ea18:	6a05      	ldr	r5, [r0, #32]
   1ea1a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   1ea1c:	886b      	ldrh	r3, [r5, #2]
   1ea1e:	42a3      	cmp	r3, r4
   1ea20:	d030      	beq.n	1ea84 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1ea22:	1c63      	adds	r3, r4, #1
   1ea24:	85c3      	strh	r3, [r0, #46]	; 0x2e
   1ea26:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1ea28:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1ea2c:	3b01      	subs	r3, #1
   1ea2e:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1ea30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1ea34:	686b      	ldr	r3, [r5, #4]
   1ea36:	b29e      	uxth	r6, r3
	if (len)
   1ea38:	b109      	cbz	r1, 1ea3e <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1ea3a:	68ad      	ldr	r5, [r5, #8]
   1ea3c:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1ea3e:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1ea42:	b29b      	uxth	r3, r3
   1ea44:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1ea48:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1ea4c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1ea4e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1ea50:	442f      	add	r7, r5
	dxp->ndescs--;
   1ea52:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1ea54:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1ea56:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1ea58:	898d      	ldrh	r5, [r1, #12]
   1ea5a:	076f      	lsls	r7, r5, #29
   1ea5c:	d50e      	bpl.n	1ea7c <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1ea5e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1ea60:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1ea62:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1ea64:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1ea66:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1ea68:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1ea6a:	b102      	cbz	r2, 1ea6e <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1ea6c:	8014      	strh	r4, [r2, #0]
}
   1ea6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1ea70:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1ea72:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1ea74:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1ea76:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1ea7a:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1ea7c:	898d      	ldrh	r5, [r1, #12]
   1ea7e:	07ed      	lsls	r5, r5, #31
   1ea80:	d4f6      	bmi.n	1ea70 <virtqueue_get_buffer+0x5c>
   1ea82:	e7ec      	b.n	1ea5e <virtqueue_get_buffer+0x4a>
		return NULL;
   1ea84:	2000      	movs	r0, #0
   1ea86:	e7f2      	b.n	1ea6e <virtqueue_get_buffer+0x5a>

0001ea88 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1ea88:	6983      	ldr	r3, [r0, #24]
   1ea8a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1ea8e:	6898      	ldr	r0, [r3, #8]
   1ea90:	4770      	bx	lr

0001ea92 <virtqueue_get_available_buffer>:
{
   1ea92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1ea96:	f3bf 8f5b 	dmb	ish
{
   1ea9a:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1ea9c:	69c2      	ldr	r2, [r0, #28]
{
   1ea9e:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1eaa0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1eaa2:	8851      	ldrh	r1, [r2, #2]
{
   1eaa4:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1eaa6:	4299      	cmp	r1, r3
   1eaa8:	d045      	beq.n	1eb36 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1eaaa:	1c59      	adds	r1, r3, #1
   1eaac:	8601      	strh	r1, [r0, #48]	; 0x30
   1eaae:	8941      	ldrh	r1, [r0, #10]
   1eab0:	3901      	subs	r1, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1eab2:	400b      	ands	r3, r1
   1eab4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   1eab8:	8892      	ldrh	r2, [r2, #4]
   1eaba:	8032      	strh	r2, [r6, #0]
   1eabc:	b293      	uxth	r3, r2
   1eabe:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1eac2:	6982      	ldr	r2, [r0, #24]
   1eac4:	011b      	lsls	r3, r3, #4
   1eac6:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1eaca:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1eace:	bb5b      	cbnz	r3, 1eb28 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1ead0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1ead4:	1c62      	adds	r2, r4, #1
   1ead6:	bf09      	itett	eq
   1ead8:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1eadc:	ea09 0404 	andne.w	r4, r9, r4
   1eae0:	681c      	ldreq	r4, [r3, #0]
   1eae2:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1eae6:	4621      	mov	r1, r4
   1eae8:	4640      	mov	r0, r8
   1eaea:	f7ff feee 	bl	1e8ca <metal_io_phys>
   1eaee:	4581      	cmp	r9, r0
   1eaf0:	d009      	beq.n	1eb06 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1eaf2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1eaf6:	3301      	adds	r3, #1
   1eaf8:	441c      	add	r4, r3
		} while (offset < io->size);
   1eafa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1eafe:	429c      	cmp	r4, r3
   1eb00:	d3f1      	bcc.n	1eae6 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1eb02:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1eb06:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1eb0a:	1c43      	adds	r3, r0, #1
   1eb0c:	d011      	beq.n	1eb32 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1eb0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1eb12:	42a3      	cmp	r3, r4
   1eb14:	d90d      	bls.n	1eb32 <virtqueue_get_available_buffer+0xa0>
		? (void *)((uintptr_t)io->virt + offset)
   1eb16:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1eb18:	8832      	ldrh	r2, [r6, #0]
   1eb1a:	69ab      	ldr	r3, [r5, #24]
   1eb1c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1eb20:	689b      	ldr	r3, [r3, #8]
   1eb22:	603b      	str	r3, [r7, #0]
}
   1eb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1eb28:	4649      	mov	r1, r9
   1eb2a:	4640      	mov	r0, r8
   1eb2c:	4798      	blx	r3
   1eb2e:	4604      	mov	r4, r0
   1eb30:	e7e9      	b.n	1eb06 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1eb32:	2000      	movs	r0, #0
   1eb34:	e7f0      	b.n	1eb18 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1eb36:	2000      	movs	r0, #0
   1eb38:	e7f4      	b.n	1eb24 <virtqueue_get_available_buffer+0x92>

0001eb3a <virtqueue_disable_cb>:
{
   1eb3a:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1eb3c:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1eb3e:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1eb40:	6912      	ldr	r2, [r2, #16]
   1eb42:	0092      	lsls	r2, r2, #2
   1eb44:	d517      	bpl.n	1eb76 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1eb46:	b943      	cbnz	r3, 1eb5a <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1eb48:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   1eb4a:	69c2      	ldr	r2, [r0, #28]
   1eb4c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1eb4e:	8944      	ldrh	r4, [r0, #10]
   1eb50:	3b01      	subs	r3, #1
   1eb52:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   1eb54:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1eb58:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1eb5a:	6803      	ldr	r3, [r0, #0]
   1eb5c:	699b      	ldr	r3, [r3, #24]
   1eb5e:	2b01      	cmp	r3, #1
   1eb60:	d108      	bne.n	1eb74 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1eb62:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   1eb64:	6a02      	ldr	r2, [r0, #32]
   1eb66:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1eb68:	8940      	ldrh	r0, [r0, #10]
   1eb6a:	3b01      	subs	r3, #1
   1eb6c:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   1eb6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1eb72:	8093      	strh	r3, [r2, #4]
}
   1eb74:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1eb76:	b923      	cbnz	r3, 1eb82 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1eb78:	69c2      	ldr	r2, [r0, #28]
   1eb7a:	8813      	ldrh	r3, [r2, #0]
   1eb7c:	f043 0301 	orr.w	r3, r3, #1
   1eb80:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1eb82:	6803      	ldr	r3, [r0, #0]
   1eb84:	699b      	ldr	r3, [r3, #24]
   1eb86:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1eb88:	bf01      	itttt	eq
   1eb8a:	6a02      	ldreq	r2, [r0, #32]
   1eb8c:	8813      	ldrheq	r3, [r2, #0]
   1eb8e:	f043 0301 	orreq.w	r3, r3, #1
   1eb92:	8013      	strheq	r3, [r2, #0]
}
   1eb94:	e7ee      	b.n	1eb74 <virtqueue_disable_cb+0x3a>

0001eb96 <virtqueue_kick>:
{
   1eb96:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1eb98:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1eb9c:	6803      	ldr	r3, [r0, #0]
{
   1eb9e:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1eba0:	691a      	ldr	r2, [r3, #16]
   1eba2:	699b      	ldr	r3, [r3, #24]
   1eba4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1eba8:	d01a      	beq.n	1ebe0 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1ebaa:	b97b      	cbnz	r3, 1ebcc <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   1ebac:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   1ebae:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   1ebb0:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1ebb2:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1ebb4:	3b01      	subs	r3, #1
   1ebb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   1ebba:	8892      	ldrh	r2, [r2, #4]
   1ebbc:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   1ebbe:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1ebc0:	b29b      	uxth	r3, r3
   1ebc2:	429a      	cmp	r2, r3
   1ebc4:	d814      	bhi.n	1ebf0 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   1ebc6:	2300      	movs	r3, #0
   1ebc8:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1ebca:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1ebcc:	2b01      	cmp	r3, #1
   1ebce:	d1fa      	bne.n	1ebc6 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1ebd0:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1ebd2:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   1ebd4:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1ebd6:	6941      	ldr	r1, [r0, #20]
   1ebd8:	3b01      	subs	r3, #1
   1ebda:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1ebde:	e7ec      	b.n	1ebba <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1ebe0:	b963      	cbnz	r3, 1ebfc <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   1ebe2:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   1ebe4:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1ebe6:	43db      	mvns	r3, r3
   1ebe8:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1ebec:	2b00      	cmp	r3, #0
   1ebee:	d0ea      	beq.n	1ebc6 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1ebf0:	6923      	ldr	r3, [r4, #16]
   1ebf2:	2b00      	cmp	r3, #0
   1ebf4:	d0e7      	beq.n	1ebc6 <virtqueue_kick+0x30>
		vq->notify(vq);
   1ebf6:	4620      	mov	r0, r4
   1ebf8:	4798      	blx	r3
   1ebfa:	e7e4      	b.n	1ebc6 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1ebfc:	2b01      	cmp	r3, #1
   1ebfe:	d1e2      	bne.n	1ebc6 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1ec00:	69c3      	ldr	r3, [r0, #28]
   1ec02:	e7ef      	b.n	1ebe4 <virtqueue_kick+0x4e>

0001ec04 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1ec04:	69c3      	ldr	r3, [r0, #28]
   1ec06:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   1ec08:	8859      	ldrh	r1, [r3, #2]
   1ec0a:	4291      	cmp	r1, r2
   1ec0c:	d00a      	beq.n	1ec24 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1ec0e:	8941      	ldrh	r1, [r0, #10]
   1ec10:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1ec12:	400a      	ands	r2, r1
   1ec14:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1ec18:	889a      	ldrh	r2, [r3, #4]
   1ec1a:	6983      	ldr	r3, [r0, #24]
   1ec1c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1ec20:	6898      	ldr	r0, [r3, #8]
	return len;
   1ec22:	4770      	bx	lr
		return 0;
   1ec24:	2000      	movs	r0, #0
}
   1ec26:	4770      	bx	lr

0001ec28 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1ec28:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1ec2c:	68c3      	ldr	r3, [r0, #12]
   1ec2e:	b103      	cbz	r3, 1ec32 <virtqueue_notification+0xa>
		vq->callback(vq);
   1ec30:	4718      	bx	r3
}
   1ec32:	4770      	bx	lr

0001ec34 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1ec34:	f04f 32ff 	mov.w	r2, #4294967295
   1ec38:	f04f 33ff 	mov.w	r3, #4294967295
   1ec3c:	f7f9 be14 	b.w	18868 <z_impl_k_sem_take>

0001ec40 <rpmsg_unregister_endpoint>:
{
   1ec40:	b570      	push	{r4, r5, r6, lr}
   1ec42:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1ec44:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1ec46:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1ec4a:	4630      	mov	r0, r6
   1ec4c:	f7ff fff2 	bl	1ec34 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1ec50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ec52:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   1ec56:	2b7f      	cmp	r3, #127	; 0x7f
   1ec58:	d80b      	bhi.n	1ec72 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1ec5a:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1ec5c:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1ec5e:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1ec60:	f003 031f 	and.w	r3, r3, #31
   1ec64:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1ec66:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1ec6a:	ea23 0302 	bic.w	r3, r3, r2
   1ec6e:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   1ec72:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1ec76:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1ec78:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   1ec7a:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1ec7e:	6011      	str	r1, [r2, #0]
	node->next = node;
   1ec80:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1ec84:	2300      	movs	r3, #0
   1ec86:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1ec88:	4630      	mov	r0, r6
}
   1ec8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ec8e:	f7f9 bda7 	b.w	187e0 <z_impl_k_sem_give>

0001ec92 <rpmsg_send_ns_message>:
{
   1ec92:	b510      	push	{r4, lr}
   1ec94:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   1ec96:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1ec98:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1ec9a:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1ec9c:	2220      	movs	r2, #32
   1ec9e:	4601      	mov	r1, r0
   1eca0:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1eca2:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1eca4:	f7fe f804 	bl	1ccb0 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1eca8:	2328      	movs	r3, #40	; 0x28
   1ecaa:	2201      	movs	r2, #1
   1ecac:	e9cd 3200 	strd	r3, r2, [sp]
   1ecb0:	4620      	mov	r0, r4
   1ecb2:	2235      	movs	r2, #53	; 0x35
   1ecb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ecb6:	ab02      	add	r3, sp, #8
   1ecb8:	f7f8 fa9e 	bl	171f8 <rpmsg_send_offchannel_raw>
}
   1ecbc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1ecc0:	b00c      	add	sp, #48	; 0x30
   1ecc2:	bd10      	pop	{r4, pc}

0001ecc4 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1ecc4:	b128      	cbz	r0, 1ecd2 <rpmsg_hold_rx_buffer+0xe>
   1ecc6:	6a00      	ldr	r0, [r0, #32]
   1ecc8:	b118      	cbz	r0, 1ecd2 <rpmsg_hold_rx_buffer+0xe>
   1ecca:	b111      	cbz	r1, 1ecd2 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   1eccc:	6f83      	ldr	r3, [r0, #120]	; 0x78
   1ecce:	b103      	cbz	r3, 1ecd2 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1ecd0:	4718      	bx	r3
}
   1ecd2:	4770      	bx	lr

0001ecd4 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1ecd4:	b128      	cbz	r0, 1ece2 <rpmsg_release_rx_buffer+0xe>
   1ecd6:	6a00      	ldr	r0, [r0, #32]
   1ecd8:	b118      	cbz	r0, 1ece2 <rpmsg_release_rx_buffer+0xe>
   1ecda:	b111      	cbz	r1, 1ece2 <rpmsg_release_rx_buffer+0xe>
	if (rdev->ops.release_rx_buffer)
   1ecdc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1ecde:	b103      	cbz	r3, 1ece2 <rpmsg_release_rx_buffer+0xe>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1ece0:	4718      	bx	r3
}
   1ece2:	4770      	bx	lr

0001ece4 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   1ece4:	b130      	cbz	r0, 1ecf4 <rpmsg_get_tx_payload_buffer+0x10>
   1ece6:	6a00      	ldr	r0, [r0, #32]
   1ece8:	b120      	cbz	r0, 1ecf4 <rpmsg_get_tx_payload_buffer+0x10>
   1ecea:	b119      	cbz	r1, 1ecf4 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   1ecec:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1ecf0:	b103      	cbz	r3, 1ecf4 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1ecf2:	4718      	bx	r3
}
   1ecf4:	2000      	movs	r0, #0
   1ecf6:	4770      	bx	lr

0001ecf8 <rpmsg_get_endpoint>:
{
   1ecf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ecfc:	4606      	mov	r6, r0
   1ecfe:	4688      	mov	r8, r1
   1ed00:	4617      	mov	r7, r2
   1ed02:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1ed04:	6804      	ldr	r4, [r0, #0]
   1ed06:	42a6      	cmp	r6, r4
   1ed08:	d101      	bne.n	1ed0e <rpmsg_get_endpoint+0x16>
	return NULL;
   1ed0a:	2500      	movs	r5, #0
   1ed0c:	e023      	b.n	1ed56 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ed0e:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1ed10:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ed14:	d002      	beq.n	1ed1c <rpmsg_get_endpoint+0x24>
   1ed16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ed18:	42bb      	cmp	r3, r7
   1ed1a:	d01c      	beq.n	1ed56 <rpmsg_get_endpoint+0x5e>
		if (name)
   1ed1c:	f1b8 0f00 	cmp.w	r8, #0
   1ed20:	d101      	bne.n	1ed26 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   1ed22:	6824      	ldr	r4, [r4, #0]
   1ed24:	e7ef      	b.n	1ed06 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   1ed26:	2220      	movs	r2, #32
   1ed28:	4641      	mov	r1, r8
   1ed2a:	4628      	mov	r0, r5
   1ed2c:	f7fd fff0 	bl	1cd10 <strncmp>
		if (!name || !name_match)
   1ed30:	2800      	cmp	r0, #0
   1ed32:	d1f6      	bne.n	1ed22 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1ed34:	f1b9 3fff 	cmp.w	r9, #4294967295
   1ed38:	d002      	beq.n	1ed40 <rpmsg_get_endpoint+0x48>
   1ed3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ed3c:	454b      	cmp	r3, r9
   1ed3e:	d00a      	beq.n	1ed56 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1ed40:	1c7b      	adds	r3, r7, #1
   1ed42:	d00b      	beq.n	1ed5c <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   1ed44:	6824      	ldr	r4, [r4, #0]
   1ed46:	42b4      	cmp	r4, r6
   1ed48:	d0df      	beq.n	1ed0a <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ed4a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1ed4e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ed52:	429f      	cmp	r7, r3
   1ed54:	d1e7      	bne.n	1ed26 <rpmsg_get_endpoint+0x2e>
}
   1ed56:	4628      	mov	r0, r5
   1ed58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1ed5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ed5e:	3301      	adds	r3, #1
   1ed60:	d0f9      	beq.n	1ed56 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   1ed62:	6824      	ldr	r4, [r4, #0]
   1ed64:	42b4      	cmp	r4, r6
   1ed66:	d0d0      	beq.n	1ed0a <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1ed68:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ed6c:	e7d6      	b.n	1ed1c <rpmsg_get_endpoint+0x24>

0001ed6e <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1ed6e:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1ed70:	4604      	mov	r4, r0
   1ed72:	b190      	cbz	r0, 1ed9a <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1ed74:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1ed76:	b183      	cbz	r3, 1ed9a <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1ed78:	7802      	ldrb	r2, [r0, #0]
   1ed7a:	b14a      	cbz	r2, 1ed90 <rpmsg_destroy_ept+0x22>
   1ed7c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   1ed80:	b133      	cbz	r3, 1ed90 <rpmsg_destroy_ept+0x22>
   1ed82:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ed84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1ed88:	d302      	bcc.n	1ed90 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1ed8a:	2101      	movs	r1, #1
   1ed8c:	f7ff ff81 	bl	1ec92 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1ed90:	4620      	mov	r0, r4
}
   1ed92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1ed96:	f7ff bf53 	b.w	1ec40 <rpmsg_unregister_endpoint>
}
   1ed9a:	bd10      	pop	{r4, pc}

0001ed9c <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1ed9c:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1eda0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1eda4:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1eda8:	4770      	bx	lr

0001edaa <rpmsg_virtio_tx_callback>:
}
   1edaa:	4770      	bx	lr

0001edac <k_sem_give>:
   1edac:	f7f9 bd18 	b.w	187e0 <z_impl_k_sem_give>

0001edb0 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1edb0:	f04f 32ff 	mov.w	r2, #4294967295
   1edb4:	f04f 33ff 	mov.w	r3, #4294967295
   1edb8:	f7f9 bd56 	b.w	18868 <z_impl_k_sem_take>

0001edbc <rpmsg_virtio_ns_callback>:
{
   1edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   1edc0:	6a06      	ldr	r6, [r0, #32]
	if (len != sizeof(*ns_msg))
   1edc2:	2a28      	cmp	r2, #40	; 0x28
{
   1edc4:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   1edc6:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
{
   1edca:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   1edcc:	d12b      	bne.n	1ee26 <rpmsg_virtio_ns_callback+0x6a>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1edce:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1edd0:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1edd2:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   1edd4:	42a1      	cmp	r1, r4
   1edd6:	bf28      	it	cs
   1edd8:	f04f 31ff 	movcs.w	r1, #4294967295
   1eddc:	2320      	movs	r3, #32
   1edde:	466a      	mov	r2, sp
   1ede0:	f7ff fcca 	bl	1e778 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1ede4:	f106 0558 	add.w	r5, r6, #88	; 0x58
	dest = ns_msg->addr;
   1ede8:	f8d7 8020 	ldr.w	r8, [r7, #32]
   1edec:	4628      	mov	r0, r5
   1edee:	f7ff ffdf 	bl	1edb0 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1edf2:	4643      	mov	r3, r8
   1edf4:	f04f 32ff 	mov.w	r2, #4294967295
   1edf8:	4669      	mov	r1, sp
   1edfa:	4630      	mov	r0, r6
   1edfc:	f7ff ff7c 	bl	1ecf8 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1ee02:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1ee04:	07db      	lsls	r3, r3, #31
   1ee06:	d512      	bpl.n	1ee2e <rpmsg_virtio_ns_callback+0x72>
		if (_ept)
   1ee08:	b918      	cbnz	r0, 1ee12 <rpmsg_virtio_ns_callback+0x56>
   1ee0a:	4628      	mov	r0, r5
   1ee0c:	f7ff ffce 	bl	1edac <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1ee10:	e009      	b.n	1ee26 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1ee12:	f04f 33ff 	mov.w	r3, #4294967295
   1ee16:	6283      	str	r3, [r0, #40]	; 0x28
   1ee18:	4628      	mov	r0, r5
   1ee1a:	f7ff ffc7 	bl	1edac <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1ee1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ee20:	b10b      	cbz	r3, 1ee26 <rpmsg_virtio_ns_callback+0x6a>
			_ept->ns_unbind_cb(_ept);
   1ee22:	4620      	mov	r0, r4
   1ee24:	4798      	blx	r3
}
   1ee26:	2000      	movs	r0, #0
   1ee28:	b008      	add	sp, #32
   1ee2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_ept) {
   1ee2e:	b950      	cbnz	r0, 1ee46 <rpmsg_virtio_ns_callback+0x8a>
   1ee30:	4628      	mov	r0, r5
   1ee32:	f7ff ffbb 	bl	1edac <k_sem_give>
			if (rdev->ns_bind_cb)
   1ee36:	6f33      	ldr	r3, [r6, #112]	; 0x70
   1ee38:	2b00      	cmp	r3, #0
   1ee3a:	d0f4      	beq.n	1ee26 <rpmsg_virtio_ns_callback+0x6a>
				rdev->ns_bind_cb(rdev, name, dest);
   1ee3c:	4642      	mov	r2, r8
   1ee3e:	4669      	mov	r1, sp
   1ee40:	4630      	mov	r0, r6
   1ee42:	4798      	blx	r3
   1ee44:	e7ef      	b.n	1ee26 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = dest;
   1ee46:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1ee4a:	e7de      	b.n	1ee0a <rpmsg_virtio_ns_callback+0x4e>

0001ee4c <rpmsg_virtio_get_rx_buffer>:
{
   1ee4c:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1ee4e:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
   1ee52:	4613      	mov	r3, r2
   1ee54:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   1ee56:	b925      	cbnz	r5, 1ee62 <rpmsg_virtio_get_rx_buffer+0x16>
}
   1ee58:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1ee5a:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1ee5e:	f7ff bdd9 	b.w	1ea14 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1ee62:	2d01      	cmp	r5, #1
   1ee64:	d106      	bne.n	1ee74 <rpmsg_virtio_get_rx_buffer+0x28>
}
   1ee66:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1ee68:	460a      	mov	r2, r1
   1ee6a:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1ee6e:	4619      	mov	r1, r3
   1ee70:	f7ff be0f 	b.w	1ea92 <virtqueue_get_available_buffer>
}
   1ee74:	2000      	movs	r0, #0
   1ee76:	bc30      	pop	{r4, r5}
   1ee78:	4770      	bx	lr

0001ee7a <rpmsg_virtio_return_buffer>:
{
   1ee7a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ee7c:	460c      	mov	r4, r1
   1ee7e:	4619      	mov	r1, r3
   1ee80:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1ee84:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1ee86:	b95d      	cbnz	r5, 1eea0 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1ee88:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1ee8a:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1ee8e:	2301      	movs	r3, #1
   1ee90:	462a      	mov	r2, r5
   1ee92:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1ee96:	a902      	add	r1, sp, #8
   1ee98:	f7ff fd60 	bl	1e95c <virtqueue_add_buffer>
}
   1ee9c:	b004      	add	sp, #16
   1ee9e:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   1eea0:	2d01      	cmp	r5, #1
   1eea2:	d1fb      	bne.n	1ee9c <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1eea4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
}
   1eea8:	b004      	add	sp, #16
   1eeaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1eeae:	f7f8 b987 	b.w	171c0 <virtqueue_add_consumed_buffer>

0001eeb2 <rpmsg_virtio_release_rx_buffer>:
{
   1eeb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eeb4:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1eeb6:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1eeba:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1eebe:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1eec0:	b2b6      	uxth	r6, r6
{
   1eec2:	460d      	mov	r5, r1
   1eec4:	f7ff ff74 	bl	1edb0 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1eec8:	4631      	mov	r1, r6
   1eeca:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1eece:	f7ff fddb 	bl	1ea88 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1eed2:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1eed4:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1eed6:	f1a5 0110 	sub.w	r1, r5, #16
   1eeda:	4620      	mov	r0, r4
   1eedc:	f7ff ffcd 	bl	1ee7a <rpmsg_virtio_return_buffer>
   1eee0:	4638      	mov	r0, r7
}
   1eee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1eee6:	f7ff bf61 	b.w	1edac <k_sem_give>

0001eeea <rpmsg_virtio_shm_pool_get_buffer>:
{
   1eeea:	4603      	mov	r3, r0
   1eeec:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1eeee:	6842      	ldr	r2, [r0, #4]
   1eef0:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1eef2:	bf29      	itett	cs
   1eef4:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1eef6:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1eef8:	1a84      	subcs	r4, r0, r2
   1eefa:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1eefc:	bf22      	ittt	cs
   1eefe:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1ef00:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1ef02:	605a      	strcs	r2, [r3, #4]
}
   1ef04:	bd10      	pop	{r4, pc}

0001ef06 <rpmsg_virtio_get_tx_payload_buffer>:
{
   1ef06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ef0a:	4605      	mov	r5, r0
   1ef0c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1ef10:	460f      	mov	r7, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1ef12:	6a03      	ldr	r3, [r0, #32]
   1ef14:	4616      	mov	r6, r2
   1ef16:	681b      	ldr	r3, [r3, #0]
   1ef18:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1ef1a:	0743      	lsls	r3, r0, #29
   1ef1c:	d403      	bmi.n	1ef26 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1ef1e:	2000      	movs	r0, #0
}
   1ef20:	b003      	add	sp, #12
   1ef22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1ef26:	f643 2398 	movw	r3, #15000	; 0x3a98
   1ef2a:	2e00      	cmp	r6, #0
   1ef2c:	bf18      	it	ne
   1ef2e:	461e      	movne	r6, r3
		metal_mutex_acquire(&rdev->lock);
   1ef30:	f105 0858 	add.w	r8, r5, #88	; 0x58
   1ef34:	4640      	mov	r0, r8
   1ef36:	f7ff ff3b 	bl	1edb0 <__metal_mutex_acquire>
	return rvdev->vdev->role;
   1ef3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1ef3e:	f8d3 9018 	ldr.w	r9, [r3, #24]
	if (role == RPMSG_HOST) {
   1ef42:	f1b9 0f00 	cmp.w	r9, #0
   1ef46:	d135      	bne.n	1efb4 <rpmsg_virtio_get_tx_payload_buffer+0xae>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1ef48:	4639      	mov	r1, r7
   1ef4a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1ef4e:	f10d 0206 	add.w	r2, sp, #6
   1ef52:	f7ff fd5f 	bl	1ea14 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1ef56:	4604      	mov	r4, r0
   1ef58:	b158      	cbz	r0, 1ef72 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
   1ef5a:	4640      	mov	r0, r8
   1ef5c:	f7ff ff26 	bl	1edac <k_sem_give>
	rp_hdr->reserved = idx;
   1ef60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1ef64:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1ef68:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1ef6a:	683b      	ldr	r3, [r7, #0]
   1ef6c:	3b10      	subs	r3, #16
   1ef6e:	603b      	str	r3, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1ef70:	e7d6      	b.n	1ef20 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (!data && rvdev->svq->vq_free_cnt) {
   1ef72:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1ef76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1ef78:	b953      	cbnz	r3, 1ef90 <rpmsg_virtio_get_tx_payload_buffer+0x8a>
   1ef7a:	4640      	mov	r0, r8
   1ef7c:	f7ff ff16 	bl	1edac <k_sem_give>
		if (rp_hdr || !tick_count)
   1ef80:	2e00      	cmp	r6, #0
   1ef82:	d0cc      	beq.n	1ef1e <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1ef84:	2021      	movs	r0, #33	; 0x21
   1ef86:	2100      	movs	r1, #0
   1ef88:	f7fb fb1e 	bl	1a5c8 <z_impl_k_sleep>
		tick_count--;
   1ef8c:	3e01      	subs	r6, #1
		metal_mutex_acquire(&rdev->lock);
   1ef8e:	e7d1      	b.n	1ef34 <rpmsg_virtio_get_tx_payload_buffer+0x2e>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1ef90:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   1ef94:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1ef98:	f7ff ffa7 	bl	1eeea <rpmsg_virtio_shm_pool_get_buffer>
   1ef9c:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1ef9e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
			*idx = 0;
   1efa2:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1efa6:	603b      	str	r3, [r7, #0]
   1efa8:	4640      	mov	r0, r8
   1efaa:	f7ff feff 	bl	1edac <k_sem_give>
		if (rp_hdr || !tick_count)
   1efae:	2c00      	cmp	r4, #0
   1efb0:	d0e6      	beq.n	1ef80 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
   1efb2:	e7d5      	b.n	1ef60 <rpmsg_virtio_get_tx_payload_buffer+0x5a>
	if (role == RPMSG_REMOTE) {
   1efb4:	f1b9 0f01 	cmp.w	r9, #1
   1efb8:	d1df      	bne.n	1ef7a <rpmsg_virtio_get_tx_payload_buffer+0x74>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1efba:	463a      	mov	r2, r7
   1efbc:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1efc0:	f10d 0106 	add.w	r1, sp, #6
   1efc4:	f7ff fd65 	bl	1ea92 <virtqueue_get_available_buffer>
   1efc8:	4604      	mov	r4, r0
   1efca:	e7ed      	b.n	1efa8 <rpmsg_virtio_get_tx_payload_buffer+0xa2>

0001efcc <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1efcc:	b110      	cbz	r0, 1efd4 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1efce:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1efd2:	6001      	str	r1, [r0, #0]
}
   1efd4:	4770      	bx	lr

0001efd6 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1efd6:	b510      	push	{r4, lr}
   1efd8:	4604      	mov	r4, r0
	return list->next == list;
   1efda:	6820      	ldr	r0, [r4, #0]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
   1efdc:	4284      	cmp	r4, r0
   1efde:	d103      	bne.n	1efe8 <rpmsg_deinit_vdev+0x12>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
	}

	rvdev->rvq = 0;
   1efe0:	2300      	movs	r3, #0
	rvdev->svq = 0;
   1efe2:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98

	metal_mutex_deinit(&rdev->lock);
}
   1efe6:	bd10      	pop	{r4, pc}
		rpmsg_destroy_ept(ept);
   1efe8:	3834      	subs	r0, #52	; 0x34
   1efea:	f7ff fec0 	bl	1ed6e <rpmsg_destroy_ept>
   1efee:	e7f4      	b.n	1efda <rpmsg_deinit_vdev+0x4>

0001eff0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1eff0:	4770      	bx	lr

0001eff2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1eff2:	b140      	cbz	r0, 1f006 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1eff4:	68c3      	ldr	r3, [r0, #12]
   1eff6:	7858      	ldrb	r0, [r3, #1]
   1eff8:	f010 0001 	ands.w	r0, r0, #1
   1effc:	bf1e      	ittt	ne
   1effe:	7818      	ldrbne	r0, [r3, #0]
   1f000:	fab0 f080 	clzne	r0, r0
   1f004:	0940      	lsrne	r0, r0, #5
}
   1f006:	4770      	bx	lr

0001f008 <z_early_memset>:
	(void) memset(dst, c, n);
   1f008:	f7fd beb0 	b.w	1cd6c <memset>

0001f00c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1f00c:	f7fd bea3 	b.w	1cd56 <memcpy>

0001f010 <k_heap_init>:
{
   1f010:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1f012:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1f016:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1f01a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1f01c:	f7ea bda8 	b.w	9b70 <sys_heap_init>

0001f020 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f020:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   1f024:	4313      	orrs	r3, r2
   1f026:	f013 0303 	ands.w	r3, r3, #3
   1f02a:	d10c      	bne.n	1f046 <create_free_list+0x26>
	slab->free_list = NULL;
   1f02c:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f02e:	68c1      	ldr	r1, [r0, #12]
   1f030:	4299      	cmp	r1, r3
   1f032:	d801      	bhi.n	1f038 <create_free_list+0x18>
	return 0;
   1f034:	2000      	movs	r0, #0
   1f036:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1f038:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f03a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1f03c:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1f03e:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   1f040:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   1f042:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1f044:	e7f3      	b.n	1f02e <create_free_list+0xe>
		return -EINVAL;
   1f046:	f06f 0015 	mvn.w	r0, #21
}
   1f04a:	4770      	bx	lr

0001f04c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f04c:	f3ef 8005 	mrs	r0, IPSR
}
   1f050:	3800      	subs	r0, #0
   1f052:	bf18      	it	ne
   1f054:	2001      	movne	r0, #1
   1f056:	4770      	bx	lr

0001f058 <z_impl_k_thread_name_set>:
}
   1f058:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1f05c:	4770      	bx	lr

0001f05e <k_thread_name_get>:
}
   1f05e:	2000      	movs	r0, #0
   1f060:	4770      	bx	lr

0001f062 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1f062:	f7fa bc11 	b.w	19888 <z_sched_start>

0001f066 <z_pm_save_idle_exit>:
{
   1f066:	b508      	push	{r3, lr}
	pm_system_resume();
   1f068:	f7ed faec 	bl	c644 <pm_system_resume>
}
   1f06c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1f070:	f7ff b95a 	b.w	1e328 <sys_clock_idle_exit>

0001f074 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1f074:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f078:	428b      	cmp	r3, r1
   1f07a:	d001      	beq.n	1f080 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1f07c:	f7fa bf06 	b.w	19e8c <z_set_prio>
}
   1f080:	2000      	movs	r0, #0
   1f082:	4770      	bx	lr

0001f084 <z_impl_k_mutex_init>:
{
   1f084:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1f086:	2000      	movs	r0, #0
   1f088:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1f08c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1f090:	4770      	bx	lr

0001f092 <z_queue_node_peek>:
{
   1f092:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1f094:	4604      	mov	r4, r0
   1f096:	b130      	cbz	r0, 1f0a6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f098:	6802      	ldr	r2, [r0, #0]
   1f09a:	0793      	lsls	r3, r2, #30
   1f09c:	d003      	beq.n	1f0a6 <z_queue_node_peek+0x14>
		ret = anode->data;
   1f09e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f0a0:	b109      	cbz	r1, 1f0a6 <z_queue_node_peek+0x14>
			k_free(anode);
   1f0a2:	f000 f9bc 	bl	1f41e <k_free>
}
   1f0a6:	4620      	mov	r0, r4
   1f0a8:	bd10      	pop	{r4, pc}

0001f0aa <z_impl_k_queue_init>:
	list->head = NULL;
   1f0aa:	2300      	movs	r3, #0
	list->tail = NULL;
   1f0ac:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1f0b0:	6083      	str	r3, [r0, #8]
   1f0b2:	f100 030c 	add.w	r3, r0, #12
   1f0b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1f0ba:	f100 0314 	add.w	r3, r0, #20
   1f0be:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1f0c2:	4770      	bx	lr

0001f0c4 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1f0c4:	2301      	movs	r3, #1
{
   1f0c6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1f0c8:	9300      	str	r3, [sp, #0]
   1f0ca:	2300      	movs	r3, #0
{
   1f0cc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f0ce:	4619      	mov	r1, r3
   1f0d0:	f7f9 fa24 	bl	1851c <queue_insert>
}
   1f0d4:	b003      	add	sp, #12
   1f0d6:	f85d fb04 	ldr.w	pc, [sp], #4

0001f0da <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1f0da:	2300      	movs	r3, #0
{
   1f0dc:	b507      	push	{r0, r1, r2, lr}
   1f0de:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f0e0:	9300      	str	r3, [sp, #0]
   1f0e2:	4619      	mov	r1, r3
   1f0e4:	f7f9 fa1a 	bl	1851c <queue_insert>
}
   1f0e8:	b003      	add	sp, #12
   1f0ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001f0ee <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1f0ee:	b15a      	cbz	r2, 1f108 <z_impl_k_sem_init+0x1a>
   1f0f0:	428a      	cmp	r2, r1
   1f0f2:	d309      	bcc.n	1f108 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1f0f4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1f0f8:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1f0fc:	e9c0 0000 	strd	r0, r0, [r0]
   1f100:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1f104:	2000      	movs	r0, #0
   1f106:	4770      	bx	lr
		return -EINVAL;
   1f108:	f06f 0015 	mvn.w	r0, #21
}
   1f10c:	4770      	bx	lr

0001f10e <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1f10e:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1f110:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1f112:	408b      	lsls	r3, r1
   1f114:	ea22 0303 	bic.w	r3, r2, r3
   1f118:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1f11a:	fa22 f001 	lsr.w	r0, r2, r1
}
   1f11e:	f000 0001 	and.w	r0, r0, #1
   1f122:	4770      	bx	lr

0001f124 <unschedule_locked>:
{
   1f124:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f126:	2103      	movs	r1, #3
{
   1f128:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f12a:	300c      	adds	r0, #12
   1f12c:	f7ff ffef 	bl	1f10e <flag_test_and_clear>
   1f130:	4604      	mov	r4, r0
   1f132:	b118      	cbz	r0, 1f13c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1f134:	f105 0010 	add.w	r0, r5, #16
   1f138:	f7fb fce6 	bl	1ab08 <z_abort_timeout>
}
   1f13c:	4620      	mov	r0, r4
   1f13e:	bd38      	pop	{r3, r4, r5, pc}

0001f140 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1f140:	b120      	cbz	r0, 1f14c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f142:	2200      	movs	r2, #0
   1f144:	3090      	adds	r0, #144	; 0x90
   1f146:	4611      	mov	r1, r2
   1f148:	f7fb bb40 	b.w	1a7cc <z_sched_wake>
}
   1f14c:	4770      	bx	lr

0001f14e <cancel_async_locked>:
{
   1f14e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f150:	68c3      	ldr	r3, [r0, #12]
{
   1f152:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f154:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1f158:	079b      	lsls	r3, r3, #30
   1f15a:	d416      	bmi.n	1f18a <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1f15c:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f15e:	2102      	movs	r1, #2
   1f160:	300c      	adds	r0, #12
   1f162:	f7ff ffd4 	bl	1f10e <flag_test_and_clear>
   1f166:	b180      	cbz	r0, 1f18a <cancel_async_locked+0x3c>
	return list->head;
   1f168:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f16c:	b16a      	cbz	r2, 1f18a <cancel_async_locked+0x3c>
   1f16e:	4294      	cmp	r4, r2
   1f170:	d11d      	bne.n	1f1ae <cancel_async_locked+0x60>
	return node->next;
   1f172:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f174:	b99e      	cbnz	r6, 1f19e <cancel_async_locked+0x50>
   1f176:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   1f17a:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   1f17e:	429c      	cmp	r4, r3
   1f180:	d101      	bne.n	1f186 <cancel_async_locked+0x38>
	list->tail = node;
   1f182:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   1f186:	2300      	movs	r3, #0
   1f188:	6023      	str	r3, [r4, #0]
	return *flagp;
   1f18a:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1f18c:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1f190:	bf1e      	ittt	ne
   1f192:	f043 0302 	orrne.w	r3, r3, #2
   1f196:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f198:	f040 0002 	orrne.w	r0, r0, #2
}
   1f19c:	bd70      	pop	{r4, r5, r6, pc}
   1f19e:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f1a0:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   1f1a4:	4294      	cmp	r4, r2
	list->tail = node;
   1f1a6:	bf08      	it	eq
   1f1a8:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   1f1ac:	e7eb      	b.n	1f186 <cancel_async_locked+0x38>
	return node->next;
   1f1ae:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f1b0:	6812      	ldr	r2, [r2, #0]
   1f1b2:	e7db      	b.n	1f16c <cancel_async_locked+0x1e>

0001f1b4 <k_work_submit_to_queue>:
{
   1f1b4:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1f1b6:	f7f9 fe27 	bl	18e08 <z_work_submit_to_queue>
	if (ret > 0) {
   1f1ba:	1e04      	subs	r4, r0, #0
   1f1bc:	dd09      	ble.n	1f1d2 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1f1be:	f04f 0320 	mov.w	r3, #32
   1f1c2:	f3ef 8011 	mrs	r0, BASEPRI
   1f1c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1ca:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f1ce:	f000 f80d 	bl	1f1ec <z_reschedule_irqlock>
}
   1f1d2:	4620      	mov	r0, r4
   1f1d4:	bd10      	pop	{r4, pc}

0001f1d6 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1f1d6:	f7f9 bdd1 	b.w	18d7c <k_work_busy_get>

0001f1da <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f1da:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f1de:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f1e2:	4283      	cmp	r3, r0
		return b2 - b1;
   1f1e4:	bf14      	ite	ne
   1f1e6:	1ac0      	subne	r0, r0, r3
	return 0;
   1f1e8:	2000      	moveq	r0, #0
}
   1f1ea:	4770      	bx	lr

0001f1ec <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f1ec:	4603      	mov	r3, r0
   1f1ee:	b920      	cbnz	r0, 1f1fa <z_reschedule_irqlock+0xe>
   1f1f0:	f3ef 8205 	mrs	r2, IPSR
   1f1f4:	b90a      	cbnz	r2, 1f1fa <z_reschedule_irqlock+0xe>
   1f1f6:	f7ed bdd5 	b.w	cda4 <arch_swap>
	__asm__ volatile(
   1f1fa:	f383 8811 	msr	BASEPRI, r3
   1f1fe:	f3bf 8f6f 	isb	sy
}
   1f202:	4770      	bx	lr

0001f204 <z_reschedule_unlocked>:
	__asm__ volatile(
   1f204:	f04f 0320 	mov.w	r3, #32
   1f208:	f3ef 8011 	mrs	r0, BASEPRI
   1f20c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f210:	f3bf 8f6f 	isb	sy
   1f214:	f7ff bfea 	b.w	1f1ec <z_reschedule_irqlock>

0001f218 <z_unpend_all>:
{
   1f218:	b538      	push	{r3, r4, r5, lr}
   1f21a:	4605      	mov	r5, r0
	int need_sched = 0;
   1f21c:	2000      	movs	r0, #0
	return list->head == list;
   1f21e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f220:	42a5      	cmp	r5, r4
   1f222:	d000      	beq.n	1f226 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f224:	b904      	cbnz	r4, 1f228 <z_unpend_all+0x10>
}
   1f226:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1f228:	4620      	mov	r0, r4
   1f22a:	f7fa ff49 	bl	1a0c0 <z_unpend_thread>
		z_ready_thread(thread);
   1f22e:	4620      	mov	r0, r4
   1f230:	f7fa fa5c 	bl	196ec <z_ready_thread>
		need_sched = 1;
   1f234:	2001      	movs	r0, #1
   1f236:	e7f2      	b.n	1f21e <z_unpend_all+0x6>

0001f238 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f238:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1f23a:	f7fb fde7 	bl	1ae0c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1f23e:	bd08      	pop	{r3, pc}

0001f240 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1f240:	f7fb bde4 	b.w	1ae0c <sys_clock_tick_get>

0001f244 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1f244:	b108      	cbz	r0, 1f24a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1f246:	f7eb bdcf 	b.w	ade8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1f24a:	4770      	bx	lr

0001f24c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f24c:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f250:	bf08      	it	eq
   1f252:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1f256:	b538      	push	{r3, r4, r5, lr}
   1f258:	460c      	mov	r4, r1
   1f25a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f25c:	d014      	beq.n	1f288 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f25e:	4308      	orrs	r0, r1
   1f260:	d103      	bne.n	1f26a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1f262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1f266:	f7fb bdd1 	b.w	1ae0c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f26a:	f06f 0001 	mvn.w	r0, #1
   1f26e:	f04f 33ff 	mov.w	r3, #4294967295
   1f272:	1b40      	subs	r0, r0, r5
   1f274:	eb63 0101 	sbc.w	r1, r3, r1
   1f278:	2900      	cmp	r1, #0
   1f27a:	da04      	bge.n	1f286 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1f27c:	f7fb fdc6 	bl	1ae0c <sys_clock_tick_get>
   1f280:	1940      	adds	r0, r0, r5
   1f282:	eb41 0104 	adc.w	r1, r1, r4
}
   1f286:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1f288:	f04f 30ff 	mov.w	r0, #4294967295
   1f28c:	4601      	mov	r1, r0
   1f28e:	e7fa      	b.n	1f286 <sys_clock_timeout_end_calc+0x3a>

0001f290 <k_timer_init>:
	timer->status = 0U;
   1f290:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1f292:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1f296:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1f29a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1f29e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1f2a2:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1f2a4:	6343      	str	r3, [r0, #52]	; 0x34
}
   1f2a6:	4770      	bx	lr

0001f2a8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1f2a8:	b510      	push	{r4, lr}
   1f2aa:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1f2ac:	f7fb fc2c 	bl	1ab08 <z_abort_timeout>

	if (inactive) {
   1f2b0:	b9b0      	cbnz	r0, 1f2e0 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1f2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f2b4:	b10b      	cbz	r3, 1f2ba <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1f2b6:	4620      	mov	r0, r4
   1f2b8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1f2ba:	f104 0018 	add.w	r0, r4, #24
   1f2be:	f7fa ffa1 	bl	1a204 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1f2c2:	b168      	cbz	r0, 1f2e0 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1f2c4:	f7fa fa12 	bl	196ec <z_ready_thread>
   1f2c8:	f04f 0320 	mov.w	r3, #32
   1f2cc:	f3ef 8011 	mrs	r0, BASEPRI
   1f2d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2d4:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1f2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f2dc:	f7ff bf86 	b.w	1f1ec <z_reschedule_irqlock>
   1f2e0:	bd10      	pop	{r4, pc}

0001f2e2 <add_event>:
{
   1f2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f2e4:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1f2e6:	e9d0 1300 	ldrd	r1, r3, [r0]
   1f2ea:	4288      	cmp	r0, r1
   1f2ec:	4604      	mov	r4, r0
   1f2ee:	d105      	bne.n	1f2fc <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1f2f0:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1f2f2:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1f2f6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f2f8:	6065      	str	r5, [r4, #4]
   1f2fa:	e01d      	b.n	1f338 <add_event+0x56>
	if ((pending == NULL) ||
   1f2fc:	2b00      	cmp	r3, #0
   1f2fe:	d0f7      	beq.n	1f2f0 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f300:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f302:	b100      	cbz	r0, 1f306 <add_event+0x24>
   1f304:	3860      	subs	r0, #96	; 0x60
   1f306:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f30a:	4639      	mov	r1, r7
   1f30c:	f7ff ff65 	bl	1f1da <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1f310:	2800      	cmp	r0, #0
   1f312:	dced      	bgt.n	1f2f0 <add_event+0xe>
	return list->head == list;
   1f314:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f316:	42b4      	cmp	r4, r6
   1f318:	d0ea      	beq.n	1f2f0 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1f31a:	2e00      	cmp	r6, #0
   1f31c:	d0e8      	beq.n	1f2f0 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1f31e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f320:	b101      	cbz	r1, 1f324 <add_event+0x42>
   1f322:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1f324:	4638      	mov	r0, r7
   1f326:	f7ff ff58 	bl	1f1da <z_sched_prio_cmp>
   1f32a:	2800      	cmp	r0, #0
   1f32c:	dd05      	ble.n	1f33a <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1f32e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1f330:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1f334:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f336:	6075      	str	r5, [r6, #4]
}
   1f338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1f33a:	6863      	ldr	r3, [r4, #4]
   1f33c:	429e      	cmp	r6, r3
   1f33e:	d0d7      	beq.n	1f2f0 <add_event+0xe>
   1f340:	6836      	ldr	r6, [r6, #0]
   1f342:	e7ea      	b.n	1f31a <add_event+0x38>

0001f344 <signal_poll_event>:
{
   1f344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1f348:	6884      	ldr	r4, [r0, #8]
{
   1f34a:	4605      	mov	r5, r0
   1f34c:	460e      	mov	r6, r1
	if (poller != NULL) {
   1f34e:	b144      	cbz	r4, 1f362 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1f350:	7863      	ldrb	r3, [r4, #1]
   1f352:	2b01      	cmp	r3, #1
   1f354:	d12e      	bne.n	1f3b4 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1f356:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1f35a:	f013 0302 	ands.w	r3, r3, #2
   1f35e:	d10a      	bne.n	1f376 <signal_poll_event+0x32>
		poller->is_polling = false;
   1f360:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1f362:	2000      	movs	r0, #0
	event->state |= state;
   1f364:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1f366:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1f368:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1f36c:	4316      	orrs	r6, r2
   1f36e:	f366 3394 	bfi	r3, r6, #14, #7
   1f372:	60eb      	str	r3, [r5, #12]
	return retcode;
   1f374:	e03e      	b.n	1f3f4 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1f376:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1f37a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f37e:	bf08      	it	eq
   1f380:	f112 0f02 	cmneq.w	r2, #2
   1f384:	d032      	beq.n	1f3ec <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f386:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1f38a:	4640      	mov	r0, r8
   1f38c:	f7fa fe98 	bl	1a0c0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1f390:	2e08      	cmp	r6, #8
   1f392:	bf0c      	ite	eq
   1f394:	f06f 0303 	mvneq.w	r3, #3
   1f398:	2300      	movne	r3, #0
   1f39a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f39c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1f3a0:	06db      	lsls	r3, r3, #27
   1f3a2:	d109      	bne.n	1f3b8 <signal_poll_event+0x74>
   1f3a4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1f3a8:	b937      	cbnz	r7, 1f3b8 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1f3aa:	4640      	mov	r0, r8
   1f3ac:	f7fa f99e 	bl	196ec <z_ready_thread>
		poller->is_polling = false;
   1f3b0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1f3b2:	e7d6      	b.n	1f362 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1f3b4:	2b02      	cmp	r3, #2
   1f3b6:	d001      	beq.n	1f3bc <signal_poll_event+0x78>
		poller->is_polling = false;
   1f3b8:	2300      	movs	r3, #0
   1f3ba:	e7d1      	b.n	1f360 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1f3bc:	7823      	ldrb	r3, [r4, #0]
   1f3be:	2b00      	cmp	r3, #0
   1f3c0:	d0cf      	beq.n	1f362 <signal_poll_event+0x1e>
   1f3c2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1f3c6:	2f00      	cmp	r7, #0
   1f3c8:	d0f2      	beq.n	1f3b0 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1f3ca:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1f3ce:	f1a4 0914 	sub.w	r9, r4, #20
   1f3d2:	f104 0014 	add.w	r0, r4, #20
   1f3d6:	f7fb fb97 	bl	1ab08 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1f3da:	4649      	mov	r1, r9
   1f3dc:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1f3de:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1f3e2:	f7f9 fd11 	bl	18e08 <z_work_submit_to_queue>
		poller->is_polling = false;
   1f3e6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1f3ea:	e7ba      	b.n	1f362 <signal_poll_event+0x1e>
		poller->is_polling = false;
   1f3ec:	2300      	movs	r3, #0
		return -EAGAIN;
   1f3ee:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1f3f2:	7023      	strb	r3, [r4, #0]
}
   1f3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f3f8 <z_handle_obj_poll_events>:
{
   1f3f8:	4603      	mov	r3, r0
	return list->head == list;
   1f3fa:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f3fc:	4283      	cmp	r3, r0
   1f3fe:	d008      	beq.n	1f412 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1f400:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f404:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f406:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f408:	2300      	movs	r3, #0
	node->prev = NULL;
   1f40a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1f40e:	f7ff bf99 	b.w	1f344 <signal_poll_event>
}
   1f412:	4770      	bx	lr

0001f414 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1f414:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1f416:	e9c0 0000 	strd	r0, r0, [r0]
   1f41a:	6083      	str	r3, [r0, #8]
}
   1f41c:	4770      	bx	lr

0001f41e <k_free>:
	if (ptr != NULL) {
   1f41e:	b120      	cbz	r0, 1f42a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1f420:	1f01      	subs	r1, r0, #4
   1f422:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1f426:	f7f8 bc61 	b.w	17cec <k_heap_free>
}
   1f42a:	4770      	bx	lr

0001f42c <k_malloc>:
{
   1f42c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1f42e:	2004      	movs	r0, #4
   1f430:	f7fc b9b2 	b.w	1b798 <k_aligned_alloc>

0001f434 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1f434:	4770      	bx	lr
	...
