
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	20 c9 00 20 b1 d6 00 00 dd d9 01 00 85 d6 00 00      .. ............
    8010:	85 d6 00 00 85 d6 00 00 85 d6 00 00 85 d6 00 00     ................
	...
    802c:	39 cf 00 00 85 d6 00 00 00 00 00 00 d9 ce 00 00     9...............
    803c:	85 d6 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8050:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8060:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8070:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8080:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8090:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    80a0:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    80b0:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    80c0:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    80d0:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    80e0:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    80f0:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8100:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8110:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8120:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8130:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8140:	c1 cf 00 00 c1 cf 00 00 c1 cf 00 00 c1 cf 00 00     ................
    8150:	c1 cf 00 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2uiz>:
    88f4:	004a      	lsls	r2, r1, #1
    88f6:	d211      	bcs.n	891c <__aeabi_d2uiz+0x28>
    88f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    88fc:	d211      	bcs.n	8922 <__aeabi_d2uiz+0x2e>
    88fe:	d50d      	bpl.n	891c <__aeabi_d2uiz+0x28>
    8900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8908:	d40e      	bmi.n	8928 <__aeabi_d2uiz+0x34>
    890a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    890e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8916:	fa23 f002 	lsr.w	r0, r3, r2
    891a:	4770      	bx	lr
    891c:	f04f 0000 	mov.w	r0, #0
    8920:	4770      	bx	lr
    8922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8926:	d102      	bne.n	892e <__aeabi_d2uiz+0x3a>
    8928:	f04f 30ff 	mov.w	r0, #4294967295
    892c:	4770      	bx	lr
    892e:	f04f 0000 	mov.w	r0, #0
    8932:	4770      	bx	lr

00008934 <__aeabi_uldivmod>:
    8934:	b953      	cbnz	r3, 894c <__aeabi_uldivmod+0x18>
    8936:	b94a      	cbnz	r2, 894c <__aeabi_uldivmod+0x18>
    8938:	2900      	cmp	r1, #0
    893a:	bf08      	it	eq
    893c:	2800      	cmpeq	r0, #0
    893e:	bf1c      	itt	ne
    8940:	f04f 31ff 	movne.w	r1, #4294967295
    8944:	f04f 30ff 	movne.w	r0, #4294967295
    8948:	f000 b80c 	b.w	8964 <__aeabi_idiv0>
    894c:	f1ad 0c08 	sub.w	ip, sp, #8
    8950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8954:	f000 f808 	bl	8968 <__udivmoddi4>
    8958:	f8dd e004 	ldr.w	lr, [sp, #4]
    895c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8960:	b004      	add	sp, #16
    8962:	4770      	bx	lr

00008964 <__aeabi_idiv0>:
    8964:	4770      	bx	lr
    8966:	bf00      	nop

00008968 <__udivmoddi4>:
    8968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    896c:	4686      	mov	lr, r0
    896e:	468c      	mov	ip, r1
    8970:	4608      	mov	r0, r1
    8972:	9e08      	ldr	r6, [sp, #32]
    8974:	4615      	mov	r5, r2
    8976:	4674      	mov	r4, lr
    8978:	4619      	mov	r1, r3
    897a:	2b00      	cmp	r3, #0
    897c:	f040 80c1 	bne.w	8b02 <__udivmoddi4+0x19a>
    8980:	4285      	cmp	r5, r0
    8982:	fab2 f282 	clz	r2, r2
    8986:	d945      	bls.n	8a14 <__udivmoddi4+0xac>
    8988:	b14a      	cbz	r2, 899e <__udivmoddi4+0x36>
    898a:	f1c2 0320 	rsb	r3, r2, #32
    898e:	fa00 fc02 	lsl.w	ip, r0, r2
    8992:	4095      	lsls	r5, r2
    8994:	4094      	lsls	r4, r2
    8996:	fa2e f303 	lsr.w	r3, lr, r3
    899a:	ea43 0c0c 	orr.w	ip, r3, ip
    899e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    89a2:	b2a8      	uxth	r0, r5
    89a4:	0c23      	lsrs	r3, r4, #16
    89a6:	fbbc f8fe 	udiv	r8, ip, lr
    89aa:	fb0e cc18 	mls	ip, lr, r8, ip
    89ae:	fb08 f900 	mul.w	r9, r8, r0
    89b2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    89b6:	4599      	cmp	r9, r3
    89b8:	d928      	bls.n	8a0c <__udivmoddi4+0xa4>
    89ba:	18eb      	adds	r3, r5, r3
    89bc:	f108 37ff 	add.w	r7, r8, #4294967295
    89c0:	d204      	bcs.n	89cc <__udivmoddi4+0x64>
    89c2:	4599      	cmp	r9, r3
    89c4:	d902      	bls.n	89cc <__udivmoddi4+0x64>
    89c6:	f1a8 0702 	sub.w	r7, r8, #2
    89ca:	442b      	add	r3, r5
    89cc:	eba3 0309 	sub.w	r3, r3, r9
    89d0:	b2a4      	uxth	r4, r4
    89d2:	fbb3 fcfe 	udiv	ip, r3, lr
    89d6:	fb0e 331c 	mls	r3, lr, ip, r3
    89da:	fb0c f000 	mul.w	r0, ip, r0
    89de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    89e2:	42a0      	cmp	r0, r4
    89e4:	d914      	bls.n	8a10 <__udivmoddi4+0xa8>
    89e6:	192c      	adds	r4, r5, r4
    89e8:	f10c 33ff 	add.w	r3, ip, #4294967295
    89ec:	d204      	bcs.n	89f8 <__udivmoddi4+0x90>
    89ee:	42a0      	cmp	r0, r4
    89f0:	d902      	bls.n	89f8 <__udivmoddi4+0x90>
    89f2:	f1ac 0302 	sub.w	r3, ip, #2
    89f6:	442c      	add	r4, r5
    89f8:	1a24      	subs	r4, r4, r0
    89fa:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    89fe:	b11e      	cbz	r6, 8a08 <__udivmoddi4+0xa0>
    8a00:	40d4      	lsrs	r4, r2
    8a02:	2300      	movs	r3, #0
    8a04:	6034      	str	r4, [r6, #0]
    8a06:	6073      	str	r3, [r6, #4]
    8a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a0c:	4647      	mov	r7, r8
    8a0e:	e7dd      	b.n	89cc <__udivmoddi4+0x64>
    8a10:	4663      	mov	r3, ip
    8a12:	e7f1      	b.n	89f8 <__udivmoddi4+0x90>
    8a14:	bb92      	cbnz	r2, 8a7c <__udivmoddi4+0x114>
    8a16:	1b43      	subs	r3, r0, r5
    8a18:	2101      	movs	r1, #1
    8a1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8a1e:	b2af      	uxth	r7, r5
    8a20:	0c20      	lsrs	r0, r4, #16
    8a22:	fbb3 fcfe 	udiv	ip, r3, lr
    8a26:	fb0e 331c 	mls	r3, lr, ip, r3
    8a2a:	fb0c f807 	mul.w	r8, ip, r7
    8a2e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8a32:	4598      	cmp	r8, r3
    8a34:	d961      	bls.n	8afa <__udivmoddi4+0x192>
    8a36:	18eb      	adds	r3, r5, r3
    8a38:	f10c 30ff 	add.w	r0, ip, #4294967295
    8a3c:	d204      	bcs.n	8a48 <__udivmoddi4+0xe0>
    8a3e:	4598      	cmp	r8, r3
    8a40:	d902      	bls.n	8a48 <__udivmoddi4+0xe0>
    8a42:	f1ac 0002 	sub.w	r0, ip, #2
    8a46:	442b      	add	r3, r5
    8a48:	eba3 0308 	sub.w	r3, r3, r8
    8a4c:	b2a4      	uxth	r4, r4
    8a4e:	fbb3 fcfe 	udiv	ip, r3, lr
    8a52:	fb0e 331c 	mls	r3, lr, ip, r3
    8a56:	fb0c f707 	mul.w	r7, ip, r7
    8a5a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8a5e:	42a7      	cmp	r7, r4
    8a60:	d94d      	bls.n	8afe <__udivmoddi4+0x196>
    8a62:	192c      	adds	r4, r5, r4
    8a64:	f10c 33ff 	add.w	r3, ip, #4294967295
    8a68:	d204      	bcs.n	8a74 <__udivmoddi4+0x10c>
    8a6a:	42a7      	cmp	r7, r4
    8a6c:	d902      	bls.n	8a74 <__udivmoddi4+0x10c>
    8a6e:	f1ac 0302 	sub.w	r3, ip, #2
    8a72:	442c      	add	r4, r5
    8a74:	1be4      	subs	r4, r4, r7
    8a76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8a7a:	e7c0      	b.n	89fe <__udivmoddi4+0x96>
    8a7c:	f1c2 0320 	rsb	r3, r2, #32
    8a80:	4095      	lsls	r5, r2
    8a82:	4094      	lsls	r4, r2
    8a84:	fa20 f103 	lsr.w	r1, r0, r3
    8a88:	fa2e f303 	lsr.w	r3, lr, r3
    8a8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8a90:	4090      	lsls	r0, r2
    8a92:	b2af      	uxth	r7, r5
    8a94:	4303      	orrs	r3, r0
    8a96:	fbb1 fcfe 	udiv	ip, r1, lr
    8a9a:	fb0e 101c 	mls	r0, lr, ip, r1
    8a9e:	0c19      	lsrs	r1, r3, #16
    8aa0:	fb0c f807 	mul.w	r8, ip, r7
    8aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8aa8:	4588      	cmp	r8, r1
    8aaa:	d922      	bls.n	8af2 <__udivmoddi4+0x18a>
    8aac:	1869      	adds	r1, r5, r1
    8aae:	f10c 30ff 	add.w	r0, ip, #4294967295
    8ab2:	d204      	bcs.n	8abe <__udivmoddi4+0x156>
    8ab4:	4588      	cmp	r8, r1
    8ab6:	d902      	bls.n	8abe <__udivmoddi4+0x156>
    8ab8:	f1ac 0002 	sub.w	r0, ip, #2
    8abc:	4429      	add	r1, r5
    8abe:	eba1 0108 	sub.w	r1, r1, r8
    8ac2:	b29b      	uxth	r3, r3
    8ac4:	fbb1 fcfe 	udiv	ip, r1, lr
    8ac8:	fb0e 111c 	mls	r1, lr, ip, r1
    8acc:	fb0c f707 	mul.w	r7, ip, r7
    8ad0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8ad4:	429f      	cmp	r7, r3
    8ad6:	d90e      	bls.n	8af6 <__udivmoddi4+0x18e>
    8ad8:	18eb      	adds	r3, r5, r3
    8ada:	f10c 31ff 	add.w	r1, ip, #4294967295
    8ade:	d204      	bcs.n	8aea <__udivmoddi4+0x182>
    8ae0:	429f      	cmp	r7, r3
    8ae2:	d902      	bls.n	8aea <__udivmoddi4+0x182>
    8ae4:	f1ac 0102 	sub.w	r1, ip, #2
    8ae8:	442b      	add	r3, r5
    8aea:	1bdb      	subs	r3, r3, r7
    8aec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8af0:	e793      	b.n	8a1a <__udivmoddi4+0xb2>
    8af2:	4660      	mov	r0, ip
    8af4:	e7e3      	b.n	8abe <__udivmoddi4+0x156>
    8af6:	4661      	mov	r1, ip
    8af8:	e7f7      	b.n	8aea <__udivmoddi4+0x182>
    8afa:	4660      	mov	r0, ip
    8afc:	e7a4      	b.n	8a48 <__udivmoddi4+0xe0>
    8afe:	4663      	mov	r3, ip
    8b00:	e7b8      	b.n	8a74 <__udivmoddi4+0x10c>
    8b02:	4283      	cmp	r3, r0
    8b04:	d906      	bls.n	8b14 <__udivmoddi4+0x1ac>
    8b06:	b916      	cbnz	r6, 8b0e <__udivmoddi4+0x1a6>
    8b08:	2100      	movs	r1, #0
    8b0a:	4608      	mov	r0, r1
    8b0c:	e77c      	b.n	8a08 <__udivmoddi4+0xa0>
    8b0e:	e9c6 e000 	strd	lr, r0, [r6]
    8b12:	e7f9      	b.n	8b08 <__udivmoddi4+0x1a0>
    8b14:	fab3 f783 	clz	r7, r3
    8b18:	b98f      	cbnz	r7, 8b3e <__udivmoddi4+0x1d6>
    8b1a:	4283      	cmp	r3, r0
    8b1c:	d301      	bcc.n	8b22 <__udivmoddi4+0x1ba>
    8b1e:	4572      	cmp	r2, lr
    8b20:	d808      	bhi.n	8b34 <__udivmoddi4+0x1cc>
    8b22:	ebbe 0402 	subs.w	r4, lr, r2
    8b26:	eb60 0303 	sbc.w	r3, r0, r3
    8b2a:	2001      	movs	r0, #1
    8b2c:	469c      	mov	ip, r3
    8b2e:	b91e      	cbnz	r6, 8b38 <__udivmoddi4+0x1d0>
    8b30:	2100      	movs	r1, #0
    8b32:	e769      	b.n	8a08 <__udivmoddi4+0xa0>
    8b34:	4638      	mov	r0, r7
    8b36:	e7fa      	b.n	8b2e <__udivmoddi4+0x1c6>
    8b38:	e9c6 4c00 	strd	r4, ip, [r6]
    8b3c:	e7f8      	b.n	8b30 <__udivmoddi4+0x1c8>
    8b3e:	f1c7 0c20 	rsb	ip, r7, #32
    8b42:	40bb      	lsls	r3, r7
    8b44:	fa0e f507 	lsl.w	r5, lr, r7
    8b48:	fa22 f40c 	lsr.w	r4, r2, ip
    8b4c:	fa2e f10c 	lsr.w	r1, lr, ip
    8b50:	40ba      	lsls	r2, r7
    8b52:	431c      	orrs	r4, r3
    8b54:	fa20 f30c 	lsr.w	r3, r0, ip
    8b58:	40b8      	lsls	r0, r7
    8b5a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8b5e:	4301      	orrs	r1, r0
    8b60:	fa1f fe84 	uxth.w	lr, r4
    8b64:	fbb3 f8f9 	udiv	r8, r3, r9
    8b68:	fb09 3018 	mls	r0, r9, r8, r3
    8b6c:	0c0b      	lsrs	r3, r1, #16
    8b6e:	fb08 fa0e 	mul.w	sl, r8, lr
    8b72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8b76:	459a      	cmp	sl, r3
    8b78:	d940      	bls.n	8bfc <__udivmoddi4+0x294>
    8b7a:	18e3      	adds	r3, r4, r3
    8b7c:	f108 30ff 	add.w	r0, r8, #4294967295
    8b80:	d204      	bcs.n	8b8c <__udivmoddi4+0x224>
    8b82:	459a      	cmp	sl, r3
    8b84:	d902      	bls.n	8b8c <__udivmoddi4+0x224>
    8b86:	f1a8 0002 	sub.w	r0, r8, #2
    8b8a:	4423      	add	r3, r4
    8b8c:	eba3 030a 	sub.w	r3, r3, sl
    8b90:	b289      	uxth	r1, r1
    8b92:	fbb3 f8f9 	udiv	r8, r3, r9
    8b96:	fb09 3318 	mls	r3, r9, r8, r3
    8b9a:	fb08 fe0e 	mul.w	lr, r8, lr
    8b9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8ba2:	458e      	cmp	lr, r1
    8ba4:	d92c      	bls.n	8c00 <__udivmoddi4+0x298>
    8ba6:	1861      	adds	r1, r4, r1
    8ba8:	f108 33ff 	add.w	r3, r8, #4294967295
    8bac:	d204      	bcs.n	8bb8 <__udivmoddi4+0x250>
    8bae:	458e      	cmp	lr, r1
    8bb0:	d902      	bls.n	8bb8 <__udivmoddi4+0x250>
    8bb2:	f1a8 0302 	sub.w	r3, r8, #2
    8bb6:	4421      	add	r1, r4
    8bb8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8bbc:	eba1 010e 	sub.w	r1, r1, lr
    8bc0:	fba0 9802 	umull	r9, r8, r0, r2
    8bc4:	4541      	cmp	r1, r8
    8bc6:	46ce      	mov	lr, r9
    8bc8:	4643      	mov	r3, r8
    8bca:	d302      	bcc.n	8bd2 <__udivmoddi4+0x26a>
    8bcc:	d106      	bne.n	8bdc <__udivmoddi4+0x274>
    8bce:	454d      	cmp	r5, r9
    8bd0:	d204      	bcs.n	8bdc <__udivmoddi4+0x274>
    8bd2:	3801      	subs	r0, #1
    8bd4:	ebb9 0e02 	subs.w	lr, r9, r2
    8bd8:	eb68 0304 	sbc.w	r3, r8, r4
    8bdc:	2e00      	cmp	r6, #0
    8bde:	d0a7      	beq.n	8b30 <__udivmoddi4+0x1c8>
    8be0:	ebb5 020e 	subs.w	r2, r5, lr
    8be4:	eb61 0103 	sbc.w	r1, r1, r3
    8be8:	fa01 fc0c 	lsl.w	ip, r1, ip
    8bec:	fa22 f307 	lsr.w	r3, r2, r7
    8bf0:	40f9      	lsrs	r1, r7
    8bf2:	ea4c 0303 	orr.w	r3, ip, r3
    8bf6:	e9c6 3100 	strd	r3, r1, [r6]
    8bfa:	e799      	b.n	8b30 <__udivmoddi4+0x1c8>
    8bfc:	4640      	mov	r0, r8
    8bfe:	e7c5      	b.n	8b8c <__udivmoddi4+0x224>
    8c00:	4643      	mov	r3, r8
    8c02:	e7d9      	b.n	8bb8 <__udivmoddi4+0x250>
    8c04:	0000      	movs	r0, r0
	...

00008c08 <pwm_set_pulse_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
    8c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c0c:	b089      	sub	sp, #36	; 0x24
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    8c0e:	e9d0 6300 	ldrd	r6, r3, [r0]
    8c12:	9303      	str	r3, [sp, #12]
		       spec->flags);
    8c14:	8983      	ldrh	r3, [r0, #12]
{
    8c16:	460d      	mov	r5, r1
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    8c18:	6887      	ldr	r7, [r0, #8]
		       spec->flags);
    8c1a:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
    8c1c:	68b3      	ldr	r3, [r6, #8]
    8c1e:	4630      	mov	r0, r6
    8c20:	685b      	ldr	r3, [r3, #4]
    8c22:	9903      	ldr	r1, [sp, #12]
    8c24:	aa06      	add	r2, sp, #24
    8c26:	4798      	blx	r3
	if (err < 0) {
    8c28:	2800      	cmp	r0, #0
    8c2a:	db31      	blt.n	8c90 <pwm_set_pulse_dt+0x88>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    8c2c:	e9dd 4b06 	ldrd	r4, fp, [sp, #24]
    8c30:	fba7 2304 	umull	r2, r3, r7, r4
    8c34:	fb07 380b 	mla	r8, r7, fp, r3
    8c38:	9204      	str	r2, [sp, #16]
	if (period_cycles > UINT32_MAX) {
    8c3a:	f04f 3aff 	mov.w	sl, #4294967295
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    8c3e:	a31a      	add	r3, pc, #104	; (adr r3, 8ca8 <pwm_set_pulse_dt+0xa0>)
    8c40:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c44:	4641      	mov	r1, r8
    8c46:	9804      	ldr	r0, [sp, #16]
    8c48:	f7ff fe74 	bl	8934 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
    8c4c:	9b04      	ldr	r3, [sp, #16]
    8c4e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8cb0 <pwm_set_pulse_dt+0xa8>
    8c52:	459a      	cmp	sl, r3
    8c54:	eb79 0308 	sbcs.w	r3, r9, r8
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    8c58:	4607      	mov	r7, r0
	if (period_cycles > UINT32_MAX) {
    8c5a:	d31c      	bcc.n	8c96 <pwm_set_pulse_dt+0x8e>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    8c5c:	fba5 4304 	umull	r4, r3, r5, r4
    8c60:	fb05 350b 	mla	r5, r5, fp, r3
    8c64:	a310      	add	r3, pc, #64	; (adr r3, 8ca8 <pwm_set_pulse_dt+0xa0>)
    8c66:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c6a:	4629      	mov	r1, r5
    8c6c:	4620      	mov	r0, r4
    8c6e:	f7ff fe61 	bl	8934 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
    8c72:	45a2      	cmp	sl, r4
    8c74:	eb79 0505 	sbcs.w	r5, r9, r5
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    8c78:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
    8c7a:	d30c      	bcc.n	8c96 <pwm_set_pulse_dt+0x8e>
	if (pulse > period) {
    8c7c:	4287      	cmp	r7, r0
	const struct pwm_driver_api *api =
    8c7e:	68b2      	ldr	r2, [r6, #8]
	if (pulse > period) {
    8c80:	d30c      	bcc.n	8c9c <pwm_set_pulse_dt+0x94>
	return api->set_cycles(dev, channel, period, pulse, flags);
    8c82:	9905      	ldr	r1, [sp, #20]
    8c84:	4630      	mov	r0, r6
    8c86:	9100      	str	r1, [sp, #0]
    8c88:	6814      	ldr	r4, [r2, #0]
    8c8a:	9903      	ldr	r1, [sp, #12]
    8c8c:	463a      	mov	r2, r7
    8c8e:	47a0      	blx	r4
}
    8c90:	b009      	add	sp, #36	; 0x24
    8c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
    8c96:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8c9a:	e7f9      	b.n	8c90 <pwm_set_pulse_dt+0x88>
		return -EINVAL;
    8c9c:	f06f 0015 	mvn.w	r0, #21
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
    8ca0:	e7f6      	b.n	8c90 <pwm_set_pulse_dt+0x88>
    8ca2:	bf00      	nop
    8ca4:	f3af 8000 	nop.w
    8ca8:	3b9aca00 	.word	0x3b9aca00
    8cac:	00000000 	.word	0x00000000
    8cb0:	3b9ac9ff 	.word	0x3b9ac9ff
    8cb4:	00000000 	.word	0x00000000

00008cb8 <sense_distance>:
	return 0;
} /* ultrasonic_init */


uint32_t sense_distance(void) 
{
    8cb8:	b538      	push	{r3, r4, r5, lr}
	// Send 10 us trigger pulse, after which the echo_cb() ISR will run
	gpio_pin_set_raw(port_fw, pin_trig_fw, 0);
    8cba:	4d1d      	ldr	r5, [pc, #116]	; (8d30 <sense_distance+0x78>)
    8cbc:	4c1d      	ldr	r4, [pc, #116]	; (8d34 <sense_distance+0x7c>)
    8cbe:	2200      	movs	r2, #0
    8cc0:	7829      	ldrb	r1, [r5, #0]
    8cc2:	6820      	ldr	r0, [r4, #0]
    8cc4:	f000 fc04 	bl	94d0 <gpio_pin_set_raw.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    8cc8:	2100      	movs	r1, #0
    8cca:	2001      	movs	r0, #1
    8ccc:	f012 fb30 	bl	1b330 <z_impl_k_sleep>
	k_sleep(K_USEC(2));
	gpio_pin_set_raw(port_fw, pin_trig_fw, 1);
    8cd0:	2201      	movs	r2, #1
    8cd2:	7829      	ldrb	r1, [r5, #0]
    8cd4:	6820      	ldr	r0, [r4, #0]
    8cd6:	f000 fbfb 	bl	94d0 <gpio_pin_set_raw.isra.0>
    8cda:	2100      	movs	r1, #0
    8cdc:	2001      	movs	r0, #1
    8cde:	f012 fb27 	bl	1b330 <z_impl_k_sleep>
	k_sleep(K_USEC(10));
	gpio_pin_set_raw(port_fw, pin_trig_fw, 0);
    8ce2:	2200      	movs	r2, #0
    8ce4:	7829      	ldrb	r1, [r5, #0]
    8ce6:	6820      	ldr	r0, [r4, #0]
    8ce8:	f000 fbf2 	bl	94d0 <gpio_pin_set_raw.isra.0>
    8cec:	2100      	movs	r1, #0
    8cee:	2001      	movs	r0, #1
    8cf0:	f012 fb1e 	bl	1b330 <z_impl_k_sleep>
	k_sleep(K_USEC(2));

	// If device gives a bad reading, return last good value. 15000 chosen empirically
	if (us_spent > 15000)
    8cf4:	f643 2298 	movw	r2, #15000	; 0x3a98
    8cf8:	4b0f      	ldr	r3, [pc, #60]	; (8d38 <sense_distance+0x80>)
    8cfa:	4c10      	ldr	r4, [pc, #64]	; (8d3c <sense_distance+0x84>)
    8cfc:	6819      	ldr	r1, [r3, #0]
    8cfe:	4291      	cmp	r1, r2
    8d00:	d901      	bls.n	8d06 <sense_distance+0x4e>
		return distance;
	}

	// Calculate distance in mm. 0.344 is the speed of sound in millimeters per microsecond
	distance = 0.344*us_spent/2;
	return distance;
    8d02:	6820      	ldr	r0, [r4, #0]
} /* measure_distance */
    8d04:	bd38      	pop	{r3, r4, r5, pc}
	distance = 0.344*us_spent/2;
    8d06:	6818      	ldr	r0, [r3, #0]
    8d08:	f7ff fb68 	bl	83dc <__aeabi_ui2d>
    8d0c:	a306      	add	r3, pc, #24	; (adr r3, 8d28 <sense_distance+0x70>)
    8d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8d12:	f7ff fbdd 	bl	84d0 <__aeabi_dmul>
    8d16:	2200      	movs	r2, #0
    8d18:	4b09      	ldr	r3, [pc, #36]	; (8d40 <sense_distance+0x88>)
    8d1a:	f7ff fbd9 	bl	84d0 <__aeabi_dmul>
    8d1e:	f7ff fde9 	bl	88f4 <__aeabi_d2uiz>
    8d22:	6020      	str	r0, [r4, #0]
    8d24:	e7ed      	b.n	8d02 <sense_distance+0x4a>
    8d26:	bf00      	nop
    8d28:	9374bc6a 	.word	0x9374bc6a
    8d2c:	3fd60418 	.word	0x3fd60418
    8d30:	20009c6c 	.word	0x20009c6c
    8d34:	2000972c 	.word	0x2000972c
    8d38:	2000971c 	.word	0x2000971c
    8d3c:	20009718 	.word	0x20009718
    8d40:	3fe00000 	.word	0x3fe00000

00008d44 <on_disconnected>:
	dk_set_led_on(CONN_STATUS_LED);
} /* on_connected */


void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
    8d44:	b598      	push	{r3, r4, r7, lr}
	LOG_INF("Disconnected (reason: %d)", reason);
    8d46:	466c      	mov	r4, sp
{
    8d48:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason: %d)", reason);
    8d4a:	b088      	sub	sp, #32
    8d4c:	466a      	mov	r2, sp
    8d4e:	4b0c      	ldr	r3, [pc, #48]	; (8d80 <on_disconnected+0x3c>)
    8d50:	480c      	ldr	r0, [pc, #48]	; (8d84 <on_disconnected+0x40>)
    8d52:	e9c2 3105 	strd	r3, r1, [r2, #20]
    8d56:	2303      	movs	r3, #3
    8d58:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8d5c:	f842 3f10 	str.w	r3, [r2, #16]!
    8d60:	f013 fc28 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    8d64:	46a5      	mov	sp, r4
	dk_set_led_off(CONN_STATUS_LED);
	if(current_conn) {
    8d66:	4c08      	ldr	r4, [pc, #32]	; (8d88 <on_disconnected+0x44>)
	dk_set_led_off(CONN_STATUS_LED);
    8d68:	2001      	movs	r0, #1
    8d6a:	f016 fb0e 	bl	1f38a <dk_set_led_off>
	if(current_conn) {
    8d6e:	6820      	ldr	r0, [r4, #0]
    8d70:	b118      	cbz	r0, 8d7a <on_disconnected+0x36>
		bt_conn_unref(current_conn);
    8d72:	f007 fda5 	bl	108c0 <bt_conn_unref>
		current_conn = NULL;
    8d76:	2300      	movs	r3, #0
    8d78:	6023      	str	r3, [r4, #0]
	}
} /* on_disconnected */
    8d7a:	46bd      	mov	sp, r7
    8d7c:	bd98      	pop	{r3, r4, r7, pc}
    8d7e:	bf00      	nop
    8d80:	0002119c 	.word	0x0002119c
    8d84:	00020804 	.word	0x00020804
    8d88:	20009704 	.word	0x20009704

00008d8c <reset_motors>:
    return;
} /* update_motors */


void reset_motors(struct k_timer *timer)
{
    8d8c:	b510      	push	{r4, lr}
    ARG_UNUSED(timer);
    uint16_t error;
    error = pwm_set_pulse_dt(&motors_l, PWM_USEC(1500));
    8d8e:	4c0b      	ldr	r4, [pc, #44]	; (8dbc <reset_motors+0x30>)
{
    8d90:	b086      	sub	sp, #24
    error = pwm_set_pulse_dt(&motors_l, PWM_USEC(1500));
    8d92:	4621      	mov	r1, r4
    8d94:	480a      	ldr	r0, [pc, #40]	; (8dc0 <reset_motors+0x34>)
    8d96:	f7ff ff37 	bl	8c08 <pwm_set_pulse_dt>
     if (error < 0) {
			LOG_ERR("Error %d: failed to reset left motors", error);
			return;
		}
    error = pwm_set_pulse_dt(&motors_r, PWM_USEC(1500));
    8d9a:	4621      	mov	r1, r4
    8d9c:	4809      	ldr	r0, [pc, #36]	; (8dc4 <reset_motors+0x38>)
    8d9e:	f7ff ff33 	bl	8c08 <pwm_set_pulse_dt>
    if (error < 0) {
			LOG_ERR("Error %d: failed to reset right motors", error);
			return;
		}
    LOG_INF("Motors turned off (1500 us)");
    8da2:	4b09      	ldr	r3, [pc, #36]	; (8dc8 <reset_motors+0x3c>)
    8da4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8da8:	9305      	str	r3, [sp, #20]
    8daa:	2302      	movs	r3, #2
    8dac:	4807      	ldr	r0, [pc, #28]	; (8dcc <reset_motors+0x40>)
    8dae:	aa04      	add	r2, sp, #16
    8db0:	9304      	str	r3, [sp, #16]
    8db2:	f013 fbff 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    return;
} /* reset_motors */
    8db6:	b006      	add	sp, #24
    8db8:	bd10      	pop	{r4, pc}
    8dba:	bf00      	nop
    8dbc:	0016e360 	.word	0x0016e360
    8dc0:	000209d4 	.word	0x000209d4
    8dc4:	000209c4 	.word	0x000209c4
    8dc8:	000211b6 	.word	0x000211b6
    8dcc:	00020804 	.word	0x00020804

00008dd0 <on_connected>:
{
    8dd0:	b590      	push	{r4, r7, lr}
    8dd2:	b087      	sub	sp, #28
    8dd4:	4604      	mov	r4, r0
    8dd6:	af00      	add	r7, sp, #0
	if(error) {
    8dd8:	b189      	cbz	r1, 8dfe <on_connected+0x2e>
		LOG_ERR("connection err: %d", error);
    8dda:	466c      	mov	r4, sp
    8ddc:	b088      	sub	sp, #32
    8dde:	466a      	mov	r2, sp
    8de0:	4b11      	ldr	r3, [pc, #68]	; (8e28 <on_connected+0x58>)
    8de2:	4812      	ldr	r0, [pc, #72]	; (8e2c <on_connected+0x5c>)
    8de4:	e9c2 3105 	strd	r3, r1, [r2, #20]
    8de8:	2303      	movs	r3, #3
    8dea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8dee:	f842 3f10 	str.w	r3, [r2, #16]!
    8df2:	f013 fbdf 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    8df6:	46a5      	mov	sp, r4
} /* on_connected */
    8df8:	371c      	adds	r7, #28
    8dfa:	46bd      	mov	sp, r7
    8dfc:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Connected.");
    8dfe:	4b0c      	ldr	r3, [pc, #48]	; (8e30 <on_connected+0x60>)
    8e00:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8e04:	617b      	str	r3, [r7, #20]
    8e06:	2302      	movs	r3, #2
    8e08:	f107 0210 	add.w	r2, r7, #16
    8e0c:	613b      	str	r3, [r7, #16]
    8e0e:	4807      	ldr	r0, [pc, #28]	; (8e2c <on_connected+0x5c>)
    8e10:	f013 fbd0 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    8e14:	4620      	mov	r0, r4
    8e16:	f007 fd2b 	bl	10870 <bt_conn_ref>
    8e1a:	4b06      	ldr	r3, [pc, #24]	; (8e34 <on_connected+0x64>)
    8e1c:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CONN_STATUS_LED);
    8e1e:	2001      	movs	r0, #1
    8e20:	f016 fab0 	bl	1f384 <dk_set_led_on>
    8e24:	e7e8      	b.n	8df8 <on_connected+0x28>
    8e26:	bf00      	nop
    8e28:	000211d2 	.word	0x000211d2
    8e2c:	00020804 	.word	0x00020804
    8e30:	000211e5 	.word	0x000211e5
    8e34:	20009704 	.word	0x20009704

00008e38 <update_motors>:
{
    8e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t dir = dir_ascii - '0';          // Convert to uint8
    8e3c:	3830      	subs	r0, #48	; 0x30
    8e3e:	b2c0      	uxtb	r0, r0
{
    8e40:	b086      	sub	sp, #24
    8e42:	2803      	cmp	r0, #3
    8e44:	af00      	add	r7, sp, #0
    8e46:	d835      	bhi.n	8eb4 <update_motors+0x7c>
    8e48:	4b22      	ldr	r3, [pc, #136]	; (8ed4 <update_motors+0x9c>)
    8e4a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    8e4e:	4b22      	ldr	r3, [pc, #136]	; (8ed8 <update_motors+0xa0>)
    8e50:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    error = pwm_set_pulse_dt(&motors_l, motors_l_pwm_ns);
    8e54:	4631      	mov	r1, r6
    8e56:	4821      	ldr	r0, [pc, #132]	; (8edc <update_motors+0xa4>)
    8e58:	f7ff fed6 	bl	8c08 <pwm_set_pulse_dt>
    error = pwm_set_pulse_dt(&motors_r, motors_r_pwm_ns);
    8e5c:	4629      	mov	r1, r5
    8e5e:	4820      	ldr	r0, [pc, #128]	; (8ee0 <update_motors+0xa8>)
    8e60:	f7ff fed2 	bl	8c08 <pwm_set_pulse_dt>
    LOG_INF("Left motor set to %u us", motors_l_pwm_ns/1000);
    8e64:	46e9      	mov	r9, sp
    8e66:	b088      	sub	sp, #32
    8e68:	466c      	mov	r4, sp
    8e6a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    8e6e:	fbb6 f6fa 	udiv	r6, r6, sl
    8e72:	f04f 0803 	mov.w	r8, #3
    8e76:	61a6      	str	r6, [r4, #24]
    8e78:	4626      	mov	r6, r4
    8e7a:	4b1a      	ldr	r3, [pc, #104]	; (8ee4 <update_motors+0xac>)
    8e7c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8e80:	6163      	str	r3, [r4, #20]
    8e82:	f846 8f10 	str.w	r8, [r6, #16]!
    8e86:	4632      	mov	r2, r6
    8e88:	4817      	ldr	r0, [pc, #92]	; (8ee8 <update_motors+0xb0>)
    8e8a:	f013 fb93 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    8e8e:	46cd      	mov	sp, r9
    LOG_INF("Right motor set to %u us", motors_r_pwm_ns/1000);
    8e90:	46a5      	mov	sp, r4
    8e92:	fbb5 f5fa 	udiv	r5, r5, sl
    8e96:	4b15      	ldr	r3, [pc, #84]	; (8eec <update_motors+0xb4>)
    8e98:	4632      	mov	r2, r6
    8e9a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    8e9e:	4812      	ldr	r0, [pc, #72]	; (8ee8 <update_motors+0xb0>)
    8ea0:	6163      	str	r3, [r4, #20]
    8ea2:	61a5      	str	r5, [r4, #24]
    8ea4:	f8c4 8010 	str.w	r8, [r4, #16]
    8ea8:	f013 fb84 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
} /* update_motors */
    8eac:	3718      	adds	r7, #24
    8eae:	46bd      	mov	sp, r7
    8eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            LOG_INF("Controller incorrectly configured. Set forwards = 0, right = 1, backwards = 2, left = 3.");
    8eb4:	4b0e      	ldr	r3, [pc, #56]	; (8ef0 <update_motors+0xb8>)
    uint32_t motors_r_pwm_ns = 1500;
    8eb6:	f240 55dc 	movw	r5, #1500	; 0x5dc
            LOG_INF("Controller incorrectly configured. Set forwards = 0, right = 1, backwards = 2, left = 3.");
    8eba:	617b      	str	r3, [r7, #20]
    8ebc:	2302      	movs	r3, #2
    8ebe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8ec2:	4809      	ldr	r0, [pc, #36]	; (8ee8 <update_motors+0xb0>)
    8ec4:	613b      	str	r3, [r7, #16]
    8ec6:	f107 0210 	add.w	r2, r7, #16
    8eca:	f013 fb73 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    uint32_t motors_l_pwm_ns = 1500;
    8ece:	462e      	mov	r6, r5
    8ed0:	e7c0      	b.n	8e54 <update_motors+0x1c>
    8ed2:	bf00      	nop
    8ed4:	00020998 	.word	0x00020998
    8ed8:	00020988 	.word	0x00020988
    8edc:	000209d4 	.word	0x000209d4
    8ee0:	000209c4 	.word	0x000209c4
    8ee4:	00021249 	.word	0x00021249
    8ee8:	00020804 	.word	0x00020804
    8eec:	00021261 	.word	0x00021261
    8ef0:	000211f0 	.word	0x000211f0

00008ef4 <on_data_received>:
{
    8ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ef8:	b082      	sub	sp, #8
    8efa:	4680      	mov	r8, r0
    uint8_t temp_str[len+1];
    8efc:	4668      	mov	r0, sp
    8efe:	f102 0308 	add.w	r3, r2, #8
    8f02:	08db      	lsrs	r3, r3, #3
    8f04:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
{
    8f08:	af02      	add	r7, sp, #8
    uint8_t temp_str[len+1];
    8f0a:	469d      	mov	sp, r3
    8f0c:	ad02      	add	r5, sp, #8
    memcpy(temp_str, data, len);
    8f0e:	4628      	mov	r0, r5
{
    8f10:	4614      	mov	r4, r2
    memcpy(temp_str, data, len);
    8f12:	f014 fdf9 	bl	1db08 <memcpy>
    temp_str[len] = 0x00;
    8f16:	2300      	movs	r3, #0
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
    8f18:	466e      	mov	r6, sp
    8f1a:	b088      	sub	sp, #32
    temp_str[len] = 0x00;
    8f1c:	552b      	strb	r3, [r5, r4]
    LOG_INF("Received data on conn %p. Len: %d", (void *)conn, len);;
    8f1e:	aa02      	add	r2, sp, #8
    8f20:	4b16      	ldr	r3, [pc, #88]	; (8f7c <on_data_received+0x88>)
    8f22:	61d4      	str	r4, [r2, #28]
    8f24:	e9c2 3805 	strd	r3, r8, [r2, #20]
    8f28:	2304      	movs	r3, #4
    8f2a:	4c15      	ldr	r4, [pc, #84]	; (8f80 <on_data_received+0x8c>)
    8f2c:	f842 3f10 	str.w	r3, [r2, #16]!
    8f30:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    8f34:	4620      	mov	r0, r4
    8f36:	f013 fb3d 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    LOG_INF("Data: %s", temp_str);
    8f3a:	aa02      	add	r2, sp, #8
    8f3c:	4b11      	ldr	r3, [pc, #68]	; (8f84 <on_data_received+0x90>)
    8f3e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    8f42:	e9c2 3505 	strd	r3, r5, [r2, #20]
    8f46:	f44f 7300 	mov.w	r3, #512	; 0x200
    8f4a:	8393      	strh	r3, [r2, #28]
    8f4c:	4b0e      	ldr	r3, [pc, #56]	; (8f88 <on_data_received+0x94>)
    8f4e:	4620      	mov	r0, r4
    8f50:	f842 3f10 	str.w	r3, [r2, #16]!
    8f54:	f013 fb2e 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    8f58:	46b5      	mov	sp, r6
    update_motors(temp_str[0]); 
    8f5a:	7828      	ldrb	r0, [r5, #0]
    8f5c:	f7ff ff6c 	bl	8e38 <update_motors>
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    8f60:	2200      	movs	r2, #0
    8f62:	2300      	movs	r3, #0
    8f64:	4809      	ldr	r0, [pc, #36]	; (8f8c <on_data_received+0x98>)
    8f66:	e9cd 2300 	strd	r2, r3, [sp]
    8f6a:	f640 02f6 	movw	r2, #2294	; 0x8f6
    8f6e:	2300      	movs	r3, #0
    8f70:	f012 fefc 	bl	1bd6c <z_impl_k_timer_start>
} /* on_data_received */
    8f74:	46bd      	mov	sp, r7
    8f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f7a:	bf00      	nop
    8f7c:	0002127a 	.word	0x0002127a
    8f80:	00020804 	.word	0x00020804
    8f84:	0002129c 	.word	0x0002129c
    8f88:	01000003 	.word	0x01000003
    8f8c:	20008518 	.word	0x20008518

00008f90 <dot_matrix_write>:


void dot_matrix_write(uint8_t addr, uint8_t data)
{
	static uint8_t tx_buffer[2];
	const struct spi_buf tx_buf = {
    8f90:	2202      	movs	r2, #2
{
    8f92:	b590      	push	{r4, r7, lr}
    8f94:	b085      	sub	sp, #20
    8f96:	af00      	add	r7, sp, #0
		.buf = tx_buffer,
		.len = sizeof(tx_buffer)
	};
	const struct spi_buf_set tx = {
    8f98:	e9c7 2701 	strd	r2, r7, [r7, #4]
    8f9c:	2201      	movs	r2, #1
	const struct spi_buf tx_buf = {
    8f9e:	4b11      	ldr	r3, [pc, #68]	; (8fe4 <dot_matrix_write+0x54>)
	const struct spi_buf_set tx = {
    8fa0:	60fa      	str	r2, [r7, #12]
		.buffers = &tx_buf,
		.count = 1
	};

    tx_buffer[0] = addr;
    8fa2:	7018      	strb	r0, [r3, #0]
    tx_buffer[1] = data;
    8fa4:	7059      	strb	r1, [r3, #1]
	const struct spi_buf tx_buf = {
    8fa6:	603b      	str	r3, [r7, #0]
    
    LOG_DBG("SPI TX: 0x%.2x, 0x%.2x\n", tx_buffer[0], tx_buffer[1]);
	
	// Start transaction
    int16_t error;
	error = spi_write(spi_dev, &spi_cfg, &tx);
    8fa8:	4b0f      	ldr	r3, [pc, #60]	; (8fe8 <dot_matrix_write+0x58>)
    8faa:	6818      	ldr	r0, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    8fac:	6883      	ldr	r3, [r0, #8]
    8fae:	490f      	ldr	r1, [pc, #60]	; (8fec <dot_matrix_write+0x5c>)
    8fb0:	681c      	ldr	r4, [r3, #0]
    8fb2:	f107 0208 	add.w	r2, r7, #8
    8fb6:	2300      	movs	r3, #0
    8fb8:	47a0      	blx	r4
    8fba:	b200      	sxth	r0, r0
    if(error != 0)
    8fbc:	b170      	cbz	r0, 8fdc <dot_matrix_write+0x4c>
    {
		LOG_ERR("SPI write error: %i\n", error);
    8fbe:	466c      	mov	r4, sp
    8fc0:	b088      	sub	sp, #32
    8fc2:	466a      	mov	r2, sp
    8fc4:	4b0a      	ldr	r3, [pc, #40]	; (8ff0 <dot_matrix_write+0x60>)
    8fc6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8fca:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8fce:	2303      	movs	r3, #3
    8fd0:	4808      	ldr	r0, [pc, #32]	; (8ff4 <dot_matrix_write+0x64>)
    8fd2:	f842 3f10 	str.w	r3, [r2, #16]!
    8fd6:	f013 faed 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    8fda:	46a5      	mov	sp, r4
		return;
	}
	return;
} /* dot_matrix_write */
    8fdc:	3714      	adds	r7, #20
    8fde:	46bd      	mov	sp, r7
    8fe0:	bd90      	pop	{r4, r7, pc}
    8fe2:	bf00      	nop
    8fe4:	20009c68 	.word	0x20009c68
    8fe8:	20009700 	.word	0x20009700
    8fec:	000209a8 	.word	0x000209a8
    8ff0:	000212a5 	.word	0x000212a5
    8ff4:	00020804 	.word	0x00020804

00008ff8 <ultrasonic_thread>:
{
    8ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t prev_scan_position = 0;
    8ffc:	f04f 0a00 	mov.w	sl, #0
    bool b_dir = 0;
    9000:	46d0      	mov	r8, sl
{
    9002:	b087      	sub	sp, #28
    uint32_t motor_f_pwm_ns = PWM_USEC(1500);
    9004:	4c58      	ldr	r4, [pc, #352]	; (9168 <ultrasonic_thread+0x170>)
            if (!b_dot_matrix_ok)
    9006:	f8df 9164 	ldr.w	r9, [pc, #356]	; 916c <ultrasonic_thread+0x174>
{
    900a:	af02      	add	r7, sp, #8
            if (!b_dot_matrix_ok)
    900c:	f899 3000 	ldrb.w	r3, [r9]
    9010:	b923      	cbnz	r3, 901c <ultrasonic_thread+0x24>
                dot_matrix_init();
    9012:	f013 fad2 	bl	1c5ba <dot_matrix_init>
                b_dot_matrix_ok = 1;
    9016:	2301      	movs	r3, #1
    9018:	f889 3000 	strb.w	r3, [r9]
            motor_err = pwm_set_pulse_dt(&motor_f, motor_f_pwm_ns);
    901c:	4621      	mov	r1, r4
    901e:	4854      	ldr	r0, [pc, #336]	; (9170 <ultrasonic_thread+0x178>)
    9020:	f7ff fdf2 	bl	8c08 <pwm_set_pulse_dt>
    9024:	b200      	sxth	r0, r0
            if (motor_err < 0) 
    9026:	2800      	cmp	r0, #0
    9028:	da10      	bge.n	904c <ultrasonic_thread+0x54>
                LOG_ERR("Error %d: failed to set pulse width of front motor", motor_err);
    902a:	b088      	sub	sp, #32
    902c:	aa02      	add	r2, sp, #8
    902e:	4b51      	ldr	r3, [pc, #324]	; (9174 <ultrasonic_thread+0x17c>)
    9030:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9034:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9038:	2303      	movs	r3, #3
    903a:	484f      	ldr	r0, [pc, #316]	; (9178 <ultrasonic_thread+0x180>)
    903c:	f842 3f10 	str.w	r3, [r2, #16]!
    9040:	f013 fab8 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
}
    9044:	3714      	adds	r7, #20
    9046:	46bd      	mov	sp, r7
    9048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dist_mm = sense_distance();
    904c:	f7ff fe34 	bl	8cb8 <sense_distance>
            scan_position = map(motor_f_pwm_ns, 1000000, 2000000, 1, 8);
    9050:	f04f 0b08 	mov.w	fp, #8
            dist_mm = sense_distance();
    9054:	4606      	mov	r6, r0
            scan_position = map(motor_f_pwm_ns, 1000000, 2000000, 1, 8);
    9056:	2301      	movs	r3, #1
    9058:	4620      	mov	r0, r4
    905a:	4a48      	ldr	r2, [pc, #288]	; (917c <ultrasonic_thread+0x184>)
    905c:	4948      	ldr	r1, [pc, #288]	; (9180 <ultrasonic_thread+0x188>)
    905e:	f8cd b000 	str.w	fp, [sp]
    9062:	f013 fabd 	bl	1c5e0 <map>
            if (scan_position != prev_scan_position)
    9066:	4550      	cmp	r0, sl
            scan_position = map(motor_f_pwm_ns, 1000000, 2000000, 1, 8);
    9068:	4605      	mov	r5, r0
            if (scan_position != prev_scan_position)
    906a:	d05e      	beq.n	912a <ultrasonic_thread+0x132>
                dist_display = 0xFF << map(dist_mm, 0, 500, 0, 8);
    906c:	2300      	movs	r3, #0
    906e:	f8cd b000 	str.w	fp, [sp]
    9072:	4619      	mov	r1, r3
    9074:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    9078:	4630      	mov	r0, r6
    907a:	f013 fab1 	bl	1c5e0 <map>
    907e:	22ff      	movs	r2, #255	; 0xff
    9080:	4082      	lsls	r2, r0
                LOG_INF("Distance: %u mm, Position: %u, Distance bit field: "BYTE_TO_BINARY_PATTERN, dist_mm, scan_position, BYTE_TO_BINARY(dist_display));
    9082:	f012 0f80 	tst.w	r2, #128	; 0x80
    9086:	bf0c      	ite	eq
    9088:	f04f 0c30 	moveq.w	ip, #48	; 0x30
    908c:	f04f 0c31 	movne.w	ip, #49	; 0x31
    9090:	f012 0f40 	tst.w	r2, #64	; 0x40
    9094:	bf14      	ite	ne
    9096:	2131      	movne	r1, #49	; 0x31
    9098:	2130      	moveq	r1, #48	; 0x30
    909a:	f012 0f20 	tst.w	r2, #32
                dist_display = 0xFF << map(dist_mm, 0, 500, 0, 8);
    909e:	4603      	mov	r3, r0
                LOG_INF("Distance: %u mm, Position: %u, Distance bit field: "BYTE_TO_BINARY_PATTERN, dist_mm, scan_position, BYTE_TO_BINARY(dist_display));
    90a0:	60f9      	str	r1, [r7, #12]
    90a2:	bf14      	ite	ne
    90a4:	2131      	movne	r1, #49	; 0x31
    90a6:	2130      	moveq	r1, #48	; 0x30
    90a8:	f012 0f10 	tst.w	r2, #16
    90ac:	bf14      	ite	ne
    90ae:	f04f 0b31 	movne.w	fp, #49	; 0x31
    90b2:	f04f 0b30 	moveq.w	fp, #48	; 0x30
    90b6:	f012 0f08 	tst.w	r2, #8
    90ba:	bf14      	ite	ne
    90bc:	f04f 0e31 	movne.w	lr, #49	; 0x31
    90c0:	f04f 0e30 	moveq.w	lr, #48	; 0x30
    90c4:	f012 0f04 	tst.w	r2, #4
    90c8:	bf14      	ite	ne
    90ca:	2031      	movne	r0, #49	; 0x31
    90cc:	2030      	moveq	r0, #48	; 0x30
    90ce:	f012 0f02 	tst.w	r2, #2
    90d2:	60b9      	str	r1, [r7, #8]
    90d4:	bf0c      	ite	eq
    90d6:	2130      	moveq	r1, #48	; 0x30
    90d8:	2131      	movne	r1, #49	; 0x31
    90da:	2b00      	cmp	r3, #0
    90dc:	bf14      	ite	ne
    90de:	2330      	movne	r3, #48	; 0x30
    90e0:	2331      	moveq	r3, #49	; 0x31
    90e2:	f8c7 d000 	str.w	sp, [r7]
    90e6:	b090      	sub	sp, #64	; 0x40
                dist_display = 0xFF << map(dist_mm, 0, 500, 0, 8);
    90e8:	fa5f fa82 	uxtb.w	sl, r2
                LOG_INF("Distance: %u mm, Position: %u, Distance bit field: "BYTE_TO_BINARY_PATTERN, dist_mm, scan_position, BYTE_TO_BINARY(dist_display));
    90ec:	607b      	str	r3, [r7, #4]
    90ee:	aa02      	add	r2, sp, #8
    90f0:	4b24      	ldr	r3, [pc, #144]	; (9184 <ultrasonic_thread+0x18c>)
    90f2:	e9c2 e00c 	strd	lr, r0, [r2, #48]	; 0x30
    90f6:	e9c2 3605 	strd	r3, r6, [r2, #20]
    90fa:	68fb      	ldr	r3, [r7, #12]
    90fc:	6391      	str	r1, [r2, #56]	; 0x38
    90fe:	6253      	str	r3, [r2, #36]	; 0x24
    9100:	68bb      	ldr	r3, [r7, #8]
    9102:	f246 01c0 	movw	r1, #24768	; 0x60c0
    9106:	e9c2 3b0a 	strd	r3, fp, [r2, #40]	; 0x28
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	e9c2 5c07 	strd	r5, ip, [r2, #28]
    9110:	63d3      	str	r3, [r2, #60]	; 0x3c
    9112:	230c      	movs	r3, #12
    9114:	4818      	ldr	r0, [pc, #96]	; (9178 <ultrasonic_thread+0x180>)
    9116:	f842 3f10 	str.w	r3, [r2, #16]!
    911a:	f013 fa4b 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
                dot_matrix_write(scan_position, dist_display);
    911e:	4651      	mov	r1, sl
    9120:	f8d7 d000 	ldr.w	sp, [r7]
    9124:	b2e8      	uxtb	r0, r5
    9126:	f7ff ff33 	bl	8f90 <dot_matrix_write>
            if (b_dir == 0)
    912a:	f1b8 0f00 	cmp.w	r8, #0
    912e:	d10c      	bne.n	914a <ultrasonic_thread+0x152>
                if (motor_f_pwm_ns <= MIN_PULSE_F) 
    9130:	4b13      	ldr	r3, [pc, #76]	; (9180 <ultrasonic_thread+0x188>)
    9132:	429c      	cmp	r4, r3
    9134:	d913      	bls.n	915e <ultrasonic_thread+0x166>
				    motor_f_pwm_ns -= PWM_USEC(10);                 // 30 is a nice speed
    9136:	f5a4 541c 	sub.w	r4, r4, #9984	; 0x2700
    913a:	3c10      	subs	r4, #16
	return z_impl_k_sleep(timeout);
    913c:	f240 501f 	movw	r0, #1311	; 0x51f
    9140:	2100      	movs	r1, #0
    9142:	f012 f8f5 	bl	1b330 <z_impl_k_sleep>
            scan_position = map(motor_f_pwm_ns, 1000000, 2000000, 1, 8);
    9146:	46aa      	mov	sl, r5
    {
    9148:	e760      	b.n	900c <ultrasonic_thread+0x14>
            	if (motor_f_pwm_ns >= MAX_PULSE_F) 
    914a:	4b0f      	ldr	r3, [pc, #60]	; (9188 <ultrasonic_thread+0x190>)
            	motor_f_pwm_ns = motor_f_pwm_ns + PWM_USEC(10);     // 30 is a nice speed
    914c:	f504 541c 	add.w	r4, r4, #9984	; 0x2700
    9150:	3410      	adds	r4, #16
            	if (motor_f_pwm_ns >= MAX_PULSE_F) 
    9152:	429c      	cmp	r4, r3
    9154:	d9f2      	bls.n	913c <ultrasonic_thread+0x144>
                    b_dir = 0;
    9156:	f04f 0800 	mov.w	r8, #0
            		motor_f_pwm_ns = MAX_PULSE_F;
    915a:	4c08      	ldr	r4, [pc, #32]	; (917c <ultrasonic_thread+0x184>)
    915c:	e7ee      	b.n	913c <ultrasonic_thread+0x144>
                    b_dir = 1;
    915e:	f04f 0801 	mov.w	r8, #1
            		motor_f_pwm_ns = MIN_PULSE_F;
    9162:	461c      	mov	r4, r3
    9164:	e7ea      	b.n	913c <ultrasonic_thread+0x144>
    9166:	bf00      	nop
    9168:	0016e360 	.word	0x0016e360
    916c:	20009c6a 	.word	0x20009c6a
    9170:	000209b4 	.word	0x000209b4
    9174:	000212ba 	.word	0x000212ba
    9178:	00020804 	.word	0x00020804
    917c:	001e8480 	.word	0x001e8480
    9180:	000f4240 	.word	0x000f4240
    9184:	000212ed 	.word	0x000212ed
    9188:	001e847f 	.word	0x001e847f

0000918c <main>:


void main(void)
{
    918c:	b590      	push	{r4, r7, lr}
    918e:	b087      	sub	sp, #28
    int16_t error;
    int16_t blink_status = 0;
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    9190:	466c      	mov	r4, sp
{
    9192:	af00      	add	r7, sp, #0
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    9194:	b088      	sub	sp, #32
    9196:	466a      	mov	r2, sp
    9198:	4b4d      	ldr	r3, [pc, #308]	; (92d0 <main+0x144>)
    919a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    919e:	6153      	str	r3, [r2, #20]
    91a0:	4b4c      	ldr	r3, [pc, #304]	; (92d4 <main+0x148>)
    91a2:	484d      	ldr	r0, [pc, #308]	; (92d8 <main+0x14c>)
    91a4:	6193      	str	r3, [r2, #24]
    91a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    91aa:	8393      	strh	r3, [r2, #28]
    91ac:	4b4b      	ldr	r3, [pc, #300]	; (92dc <main+0x150>)
    91ae:	f842 3f10 	str.w	r3, [r2, #16]!
    91b2:	f013 f9ff 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    91b6:	46a5      	mov	sp, r4
    error = dk_leds_init();
    91b8:	f00c fff0 	bl	1619c <dk_leds_init>
    91bc:	b200      	sxth	r0, r0
    if (error) {
    91be:	b168      	cbz	r0, 91dc <main+0x50>
        LOG_ERR("Couldn't init LEDS (error %d)", error);
    91c0:	b088      	sub	sp, #32
    91c2:	466a      	mov	r2, sp
    91c4:	4b46      	ldr	r3, [pc, #280]	; (92e0 <main+0x154>)
    91c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    91ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
    91ce:	2303      	movs	r3, #3
    91d0:	4841      	ldr	r0, [pc, #260]	; (92d8 <main+0x14c>)
    91d2:	f842 3f10 	str.w	r3, [r2, #16]!
    91d6:	f013 f9ed 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    91da:	46a5      	mov	sp, r4

    config_dk_leds();
    error = ultrasonic_init(gpio_dev, ULTRASONIC_TRIG_PIN, ULTRASONIC_ECHO_PIN);
    91dc:	221a      	movs	r2, #26
    91de:	2119      	movs	r1, #25
    91e0:	4840      	ldr	r0, [pc, #256]	; (92e4 <main+0x158>)
    91e2:	f000 f99d 	bl	9520 <ultrasonic_init>
	spi_dev = DEVICE_DT_GET(MY_SPI_MASTER);
    91e6:	4840      	ldr	r0, [pc, #256]	; (92e8 <main+0x15c>)
    91e8:	4b40      	ldr	r3, [pc, #256]	; (92ec <main+0x160>)
    91ea:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    91ec:	f016 fea0 	bl	1ff30 <z_device_is_ready>
	if(!device_is_ready(spi_dev)) 
    91f0:	b950      	cbnz	r0, 9208 <main+0x7c>
		LOG_ERR("SPI master device not ready!\n");
    91f2:	4b3f      	ldr	r3, [pc, #252]	; (92f0 <main+0x164>)
    91f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    91f8:	617b      	str	r3, [r7, #20]
    91fa:	2302      	movs	r3, #2
    91fc:	4836      	ldr	r0, [pc, #216]	; (92d8 <main+0x14c>)
    91fe:	613b      	str	r3, [r7, #16]
    9200:	f107 0210 	add.w	r2, r7, #16
    9204:	f013 f9d6 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
	if(!device_is_ready(dot_matrix_cs.gpio.port))
    9208:	4b3a      	ldr	r3, [pc, #232]	; (92f4 <main+0x168>)
    920a:	6818      	ldr	r0, [r3, #0]
    920c:	f016 fe90 	bl	1ff30 <z_device_is_ready>
    9210:	b950      	cbnz	r0, 9228 <main+0x9c>
		LOG_ERR("SPI master chip select device not ready!\n");
    9212:	4b39      	ldr	r3, [pc, #228]	; (92f8 <main+0x16c>)
    9214:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9218:	617b      	str	r3, [r7, #20]
    921a:	2302      	movs	r3, #2
    921c:	482e      	ldr	r0, [pc, #184]	; (92d8 <main+0x14c>)
    921e:	613b      	str	r3, [r7, #16]
    9220:	f107 0210 	add.w	r2, r7, #16
    9224:	f013 f9c6 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
		LOG_DBG("Ultrasonic sensor initialisation failed");
	}

    spi_init();

    error = bluetooth_init(&bluetooth_callbacks, &remote_callbacks);
    9228:	4934      	ldr	r1, [pc, #208]	; (92fc <main+0x170>)
    922a:	4835      	ldr	r0, [pc, #212]	; (9300 <main+0x174>)
    922c:	f000 f8ba 	bl	93a4 <bluetooth_init>
    9230:	b200      	sxth	r0, r0
    if (error) 
    9232:	b170      	cbz	r0, 9252 <main+0xc6>
    {
        LOG_INF("Couldn't initialize Bluetooth. error %d", error);
    9234:	466c      	mov	r4, sp
    9236:	b088      	sub	sp, #32
    9238:	466a      	mov	r2, sp
    923a:	4b32      	ldr	r3, [pc, #200]	; (9304 <main+0x178>)
    923c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    9240:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9244:	2303      	movs	r3, #3
    9246:	4824      	ldr	r0, [pc, #144]	; (92d8 <main+0x14c>)
    9248:	f842 3f10 	str.w	r3, [r2, #16]!
    924c:	f013 f9b2 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    9250:	46a5      	mov	sp, r4
    9252:	4c2d      	ldr	r4, [pc, #180]	; (9308 <main+0x17c>)
    9254:	4620      	mov	r0, r4
    9256:	f016 fe6b 	bl	1ff30 <z_device_is_ready>
    }

    if (!device_is_ready(motors_l.dev))
    925a:	b9a8      	cbnz	r0, 9288 <main+0xfc>
		LOG_ERR("Error: PWM device %s is not ready\n", motors_l.dev->name);
		return;
	}
	if (!device_is_ready(motors_r.dev))
    {
		LOG_ERR("Error: PWM device %s is not ready\n", motors_r.dev->name);
    925c:	6823      	ldr	r3, [r4, #0]
    925e:	466c      	mov	r4, sp
    9260:	b088      	sub	sp, #32
    9262:	466a      	mov	r2, sp
    9264:	4929      	ldr	r1, [pc, #164]	; (930c <main+0x180>)
    9266:	481c      	ldr	r0, [pc, #112]	; (92d8 <main+0x14c>)
    9268:	e9c2 1305 	strd	r1, r3, [r2, #20]
    926c:	f44f 7300 	mov.w	r3, #512	; 0x200
    9270:	8393      	strh	r3, [r2, #28]
    9272:	4b1a      	ldr	r3, [pc, #104]	; (92dc <main+0x150>)
    9274:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    9278:	f842 3f10 	str.w	r3, [r2, #16]!
    927c:	f013 f99a 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    9280:	46a5      	mov	sp, r4

        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
        k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));

    }
} /* main */
    9282:	371c      	adds	r7, #28
    9284:	46bd      	mov	sp, r7
    9286:	bd90      	pop	{r4, r7, pc}
    9288:	4620      	mov	r0, r4
    928a:	f016 fe51 	bl	1ff30 <z_device_is_ready>
	if (!device_is_ready(motors_r.dev))
    928e:	2800      	cmp	r0, #0
    9290:	d0e4      	beq.n	925c <main+0xd0>
    LOG_INF("Running...");
    9292:	4b1f      	ldr	r3, [pc, #124]	; (9310 <main+0x184>)
    9294:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    9298:	617b      	str	r3, [r7, #20]
    929a:	2302      	movs	r3, #2
    929c:	480e      	ldr	r0, [pc, #56]	; (92d8 <main+0x14c>)
    929e:	613b      	str	r3, [r7, #16]
    92a0:	f107 0210 	add.w	r2, r7, #16
    92a4:	f013 f986 	bl	1c5b4 <z_log_msg_static_create.constprop.0>
    int16_t blink_status = 0;
    92a8:	2100      	movs	r1, #0
        dk_set_led(RUN_STATUS_LED, (blink_status++)%2);
    92aa:	2900      	cmp	r1, #0
    92ac:	f101 0401 	add.w	r4, r1, #1
    92b0:	f001 0101 	and.w	r1, r1, #1
    92b4:	bfb8      	it	lt
    92b6:	4249      	neglt	r1, r1
    92b8:	2000      	movs	r0, #0
    92ba:	f00c ff9b 	bl	161f4 <dk_set_led>
    92be:	b224      	sxth	r4, r4
    92c0:	2100      	movs	r1, #0
    92c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    92c6:	f012 f833 	bl	1b330 <z_impl_k_sleep>
    92ca:	4621      	mov	r1, r4
    92cc:	e7ed      	b.n	92aa <main+0x11e>
    92ce:	bf00      	nop
    92d0:	00021331 	.word	0x00021331
    92d4:	00021342 	.word	0x00021342
    92d8:	00020804 	.word	0x00020804
    92dc:	01000003 	.word	0x01000003
    92e0:	0002135b 	.word	0x0002135b
    92e4:	0002046c 	.word	0x0002046c
    92e8:	00020514 	.word	0x00020514
    92ec:	20009700 	.word	0x20009700
    92f0:	00021379 	.word	0x00021379
    92f4:	20008178 	.word	0x20008178
    92f8:	00021397 	.word	0x00021397
    92fc:	20008160 	.word	0x20008160
    9300:	20008164 	.word	0x20008164
    9304:	000213c1 	.word	0x000213c1
    9308:	000204e4 	.word	0x000204e4
    930c:	000213e9 	.word	0x000213e9
    9310:	0002140c 	.word	0x0002140c

00009314 <on_write>:
                        const struct bt_gatt_attr *attr,
                        const void *buf,
                        uint16_t len,
                        uint16_t offset,
                        uint8_t flags)
{
    9314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LOG_INF("Received data, handle %d, conn %p",
    9318:	46e8      	mov	r8, sp
{
    931a:	af00      	add	r7, sp, #0
    LOG_INF("Received data, handle %d, conn %p",
    931c:	b088      	sub	sp, #32
{
    931e:	4616      	mov	r6, r2
    9320:	461c      	mov	r4, r3
    9322:	4605      	mov	r5, r0
    LOG_INF("Received data, handle %d, conn %p",
    9324:	466a      	mov	r2, sp
    9326:	8a0b      	ldrh	r3, [r1, #16]
    9328:	490c      	ldr	r1, [pc, #48]	; (935c <on_write+0x48>)
    932a:	61d0      	str	r0, [r2, #28]
    932c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    9330:	2304      	movs	r3, #4
    9332:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    9336:	2300      	movs	r3, #0
    9338:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    933c:	4808      	ldr	r0, [pc, #32]	; (9360 <on_write+0x4c>)
    933e:	f002 fae3 	bl	b908 <z_impl_z_log_msg_static_create>
        attr->handle, (void *)conn);

    if (remote_service_callbacks.data_received) {
    9342:	4b08      	ldr	r3, [pc, #32]	; (9364 <on_write+0x50>)
    9344:	46c5      	mov	sp, r8
    9346:	681b      	ldr	r3, [r3, #0]
    9348:	b11b      	cbz	r3, 9352 <on_write+0x3e>
        remote_service_callbacks.data_received(conn, buf, len);
    934a:	4622      	mov	r2, r4
    934c:	4631      	mov	r1, r6
    934e:	4628      	mov	r0, r5
    9350:	4798      	blx	r3
    }
    return len;
} /* on_write */
    9352:	4620      	mov	r0, r4
    9354:	46bd      	mov	sp, r7
    9356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    935a:	bf00      	nop
    935c:	00021435 	.word	0x00021435
    9360:	000208dc 	.word	0x000208dc
    9364:	20009708 	.word	0x20009708

00009368 <bt_ready>:
{
    9368:	b598      	push	{r3, r4, r7, lr}
    936a:	af00      	add	r7, sp, #0
    if (err) {
    936c:	b178      	cbz	r0, 938e <bt_ready+0x26>
        LOG_ERR("bt_ready returned %d", err);
    936e:	466c      	mov	r4, sp
    9370:	b088      	sub	sp, #32
    9372:	466a      	mov	r2, sp
    9374:	4b08      	ldr	r3, [pc, #32]	; (9398 <bt_ready+0x30>)
    9376:	e9c2 3005 	strd	r3, r0, [r2, #20]
    937a:	2303      	movs	r3, #3
    937c:	f842 3f10 	str.w	r3, [r2, #16]!
    9380:	2300      	movs	r3, #0
    9382:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9386:	4805      	ldr	r0, [pc, #20]	; (939c <bt_ready+0x34>)
    9388:	f002 fabe 	bl	b908 <z_impl_z_log_msg_static_create>
    938c:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    938e:	4804      	ldr	r0, [pc, #16]	; (93a0 <bt_ready+0x38>)
    9390:	f010 f8da 	bl	19548 <z_impl_k_sem_give>
} /* bt_ready */
    9394:	46bd      	mov	sp, r7
    9396:	bd98      	pop	{r3, r4, r7, pc}
    9398:	00021457 	.word	0x00021457
    939c:	000208dc 	.word	0x000208dc
    93a0:	200085dc 	.word	0x200085dc

000093a4 <bluetooth_init>:


int bluetooth_init(struct bt_conn_cb *bt_cb, struct bt_remote_service_cb *remote_cb)
{
    93a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93a8:	b088      	sub	sp, #32
    93aa:	4604      	mov	r4, r0
    93ac:	af02      	add	r7, sp, #8
    93ae:	460d      	mov	r5, r1
    int err;
    LOG_INF("Initializing Bluetooth");
    93b0:	466e      	mov	r6, sp
    93b2:	f04f 0802 	mov.w	r8, #2
    93b6:	4b25      	ldr	r3, [pc, #148]	; (944c <bluetooth_init+0xa8>)
    93b8:	f8c7 8010 	str.w	r8, [r7, #16]
    93bc:	617b      	str	r3, [r7, #20]
    93be:	2300      	movs	r3, #0
    93c0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    93c4:	4822      	ldr	r0, [pc, #136]	; (9450 <bluetooth_init+0xac>)
    93c6:	f107 0210 	add.w	r2, r7, #16
    93ca:	f002 fa9d 	bl	b908 <z_impl_z_log_msg_static_create>

    if (bt_cb == NULL){
    93ce:	2c00      	cmp	r4, #0
    93d0:	d03a      	beq.n	9448 <bluetooth_init+0xa4>
        return NRFX_ERROR_NULL;
    }
    bt_conn_cb_register(bt_cb);
    93d2:	4620      	mov	r0, r4
    93d4:	f007 fcae 	bl	10d34 <bt_conn_cb_register>
    remote_service_callbacks.data_received = remote_cb->data_received;
    93d8:	682a      	ldr	r2, [r5, #0]
    93da:	4b1e      	ldr	r3, [pc, #120]	; (9454 <bluetooth_init+0xb0>)

    err = bt_enable(bt_ready);
    93dc:	481e      	ldr	r0, [pc, #120]	; (9458 <bluetooth_init+0xb4>)
    remote_service_callbacks.data_received = remote_cb->data_received;
    93de:	601a      	str	r2, [r3, #0]
    err = bt_enable(bt_ready);
    93e0:	f006 f908 	bl	f5f4 <bt_enable>
    if (err) {
    93e4:	4604      	mov	r4, r0
    93e6:	b198      	cbz	r0, 9410 <bluetooth_init+0x6c>
        LOG_ERR("bt_enable returned %d", err);
    93e8:	b088      	sub	sp, #32
    93ea:	aa02      	add	r2, sp, #8
    93ec:	4b1b      	ldr	r3, [pc, #108]	; (945c <bluetooth_init+0xb8>)

    k_sem_take(&bt_init_ok, K_FOREVER);

    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    if (err){
        LOG_ERR("couldn't start advertising (err = %d", err);
    93ee:	e9c2 3405 	strd	r3, r4, [r2, #20]
    93f2:	2303      	movs	r3, #3
    93f4:	f842 3f10 	str.w	r3, [r2, #16]!
    93f8:	2300      	movs	r3, #0
    93fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    93fe:	4814      	ldr	r0, [pc, #80]	; (9450 <bluetooth_init+0xac>)
    9400:	f002 fa82 	bl	b908 <z_impl_z_log_msg_static_create>
    9404:	46b5      	mov	sp, r6
        return err;
    }

    return err;
} /* bluetooth_init */
    9406:	4620      	mov	r0, r4
    9408:	3718      	adds	r7, #24
    940a:	46bd      	mov	sp, r7
    940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    9410:	463c      	mov	r4, r7
    9412:	4d13      	ldr	r5, [pc, #76]	; (9460 <bluetooth_init+0xbc>)
	return z_impl_k_sem_take(sem, timeout);
    9414:	f04f 32ff 	mov.w	r2, #4294967295
    9418:	f04f 33ff 	mov.w	r3, #4294967295
    941c:	4811      	ldr	r0, [pc, #68]	; (9464 <bluetooth_init+0xc0>)
    941e:	f010 f8d7 	bl	195d0 <z_impl_k_sem_take>
    9422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9426:	682b      	ldr	r3, [r5, #0]
    9428:	4642      	mov	r2, r8
    942a:	6023      	str	r3, [r4, #0]
    942c:	2301      	movs	r3, #1
    942e:	4638      	mov	r0, r7
    9430:	9300      	str	r3, [sp, #0]
    9432:	490d      	ldr	r1, [pc, #52]	; (9468 <bluetooth_init+0xc4>)
    9434:	4b0d      	ldr	r3, [pc, #52]	; (946c <bluetooth_init+0xc8>)
    9436:	f006 fdc9 	bl	ffcc <bt_le_adv_start>
    if (err){
    943a:	4604      	mov	r4, r0
    943c:	2800      	cmp	r0, #0
    943e:	d0e2      	beq.n	9406 <bluetooth_init+0x62>
        LOG_ERR("couldn't start advertising (err = %d", err);
    9440:	b088      	sub	sp, #32
    9442:	aa02      	add	r2, sp, #8
    9444:	4b0a      	ldr	r3, [pc, #40]	; (9470 <bluetooth_init+0xcc>)
    9446:	e7d2      	b.n	93ee <bluetooth_init+0x4a>
        return NRFX_ERROR_NULL;
    9448:	4c0a      	ldr	r4, [pc, #40]	; (9474 <bluetooth_init+0xd0>)
    944a:	e7dc      	b.n	9406 <bluetooth_init+0x62>
    944c:	0002146c 	.word	0x0002146c
    9450:	000208dc 	.word	0x000208dc
    9454:	20009708 	.word	0x20009708
    9458:	00009369 	.word	0x00009369
    945c:	00021483 	.word	0x00021483
    9460:	00020920 	.word	0x00020920
    9464:	200085dc 	.word	0x200085dc
    9468:	00020a28 	.word	0x00020a28
    946c:	00020a20 	.word	0x00020a20
    9470:	00021499 	.word	0x00021499
    9474:	0bad0009 	.word	0x0bad0009

00009478 <echo_cb>:
{
    9478:	b538      	push	{r3, r4, r5, lr}
	if (!latch)
    947a:	4c0f      	ldr	r4, [pc, #60]	; (94b8 <echo_cb+0x40>)
    947c:	4d0f      	ldr	r5, [pc, #60]	; (94bc <echo_cb+0x44>)
    947e:	7823      	ldrb	r3, [r4, #0]
    9480:	b92b      	cbnz	r3, 948e <echo_cb+0x16>
		latch = 1;
    9482:	2301      	movs	r3, #1
    9484:	7023      	strb	r3, [r4, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9486:	f015 fe9c 	bl	1f1c2 <sys_clock_cycle_get_32>
		start_time = k_cycle_get_32();
    948a:	6028      	str	r0, [r5, #0]
} /* echo_cb */
    948c:	bd38      	pop	{r3, r4, r5, pc}
    948e:	f015 fe98 	bl	1f1c2 <sys_clock_cycle_get_32>
		latch = 0;
    9492:	2200      	movs	r2, #0
		stop_time = k_cycle_get_32();
    9494:	4b0a      	ldr	r3, [pc, #40]	; (94c0 <echo_cb+0x48>)
    9496:	6018      	str	r0, [r3, #0]
		latch = 0;
    9498:	7022      	strb	r2, [r4, #0]
		cycles_spent = stop_time - start_time;
    949a:	681b      	ldr	r3, [r3, #0]
    949c:	682a      	ldr	r2, [r5, #0]
    949e:	1a9b      	subs	r3, r3, r2
    94a0:	4a08      	ldr	r2, [pc, #32]	; (94c4 <echo_cb+0x4c>)
    94a2:	6013      	str	r3, [r2, #0]
		us_spent = k_cyc_to_us_floor32(cycles_spent);
    94a4:	6813      	ldr	r3, [r2, #0]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    94a6:	4a08      	ldr	r2, [pc, #32]	; (94c8 <echo_cb+0x50>)
    94a8:	fba3 3202 	umull	r3, r2, r3, r2
    94ac:	0bdb      	lsrs	r3, r3, #15
    94ae:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    94b2:	4a06      	ldr	r2, [pc, #24]	; (94cc <echo_cb+0x54>)
    94b4:	6013      	str	r3, [r2, #0]
} /* echo_cb */
    94b6:	e7e9      	b.n	948c <echo_cb+0x14>
    94b8:	20009c6b 	.word	0x20009c6b
    94bc:	20009728 	.word	0x20009728
    94c0:	20009724 	.word	0x20009724
    94c4:	20009720 	.word	0x20009720
    94c8:	000f4240 	.word	0x000f4240
    94cc:	2000971c 	.word	0x2000971c

000094d0 <gpio_pin_set_raw.isra.0>:
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    94d0:	2301      	movs	r3, #1
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
    94d2:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    94d4:	fa03 f101 	lsl.w	r1, r3, r1
    94d8:	6843      	ldr	r3, [r0, #4]
    94da:	681b      	ldr	r3, [r3, #0]
    94dc:	4219      	tst	r1, r3
    94de:	d10e      	bne.n	94fe <gpio_pin_set_raw.isra.0+0x2e>
    94e0:	490b      	ldr	r1, [pc, #44]	; (9510 <gpio_pin_set_raw.isra.0+0x40>)
    94e2:	f240 43fe 	movw	r3, #1278	; 0x4fe
    94e6:	4a0b      	ldr	r2, [pc, #44]	; (9514 <gpio_pin_set_raw.isra.0+0x44>)
    94e8:	480b      	ldr	r0, [pc, #44]	; (9518 <gpio_pin_set_raw.isra.0+0x48>)
    94ea:	f013 fafe 	bl	1caea <assert_print>
    94ee:	480b      	ldr	r0, [pc, #44]	; (951c <gpio_pin_set_raw.isra.0+0x4c>)
    94f0:	f013 fafb 	bl	1caea <assert_print>
    94f4:	f240 41fe 	movw	r1, #1278	; 0x4fe
    94f8:	4806      	ldr	r0, [pc, #24]	; (9514 <gpio_pin_set_raw.isra.0+0x44>)
    94fa:	f013 faef 	bl	1cadc <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
    94fe:	b122      	cbz	r2, 950a <gpio_pin_set_raw.isra.0+0x3a>
	return api->port_set_bits_raw(port, pins);
    9500:	6883      	ldr	r3, [r0, #8]
    9502:	68db      	ldr	r3, [r3, #12]
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
    9504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    9508:	4718      	bx	r3
    950a:	6883      	ldr	r3, [r0, #8]
    950c:	691b      	ldr	r3, [r3, #16]
    950e:	e7f9      	b.n	9504 <gpio_pin_set_raw.isra.0+0x34>
    9510:	00021509 	.word	0x00021509
    9514:	000214d8 	.word	0x000214d8
    9518:	00021547 	.word	0x00021547
    951c:	00021564 	.word	0x00021564

00009520 <ultrasonic_init>:
{
    9520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9524:	4615      	mov	r5, r2
    port_fw = port;
    9526:	4a33      	ldr	r2, [pc, #204]	; (95f4 <ultrasonic_init+0xd4>)
{
    9528:	4604      	mov	r4, r0
    port_fw = port;
    952a:	6010      	str	r0, [r2, #0]
	pin_trig_fw = pin_trig;
    952c:	4a32      	ldr	r2, [pc, #200]	; (95f8 <ultrasonic_init+0xd8>)
    952e:	7011      	strb	r1, [r2, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9530:	2701      	movs	r7, #1
    9532:	6842      	ldr	r2, [r0, #4]
    9534:	fa07 f301 	lsl.w	r3, r7, r1
    9538:	6812      	ldr	r2, [r2, #0]
	const struct gpio_driver_api *api =
    953a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    953e:	4213      	tst	r3, r2
	struct gpio_driver_data *data =
    9540:	6906      	ldr	r6, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9542:	d10e      	bne.n	9562 <ultrasonic_init+0x42>
    9544:	492d      	ldr	r1, [pc, #180]	; (95fc <ultrasonic_init+0xdc>)
    9546:	f44f 7337 	mov.w	r3, #732	; 0x2dc
    954a:	4a2d      	ldr	r2, [pc, #180]	; (9600 <ultrasonic_init+0xe0>)
    954c:	482d      	ldr	r0, [pc, #180]	; (9604 <ultrasonic_init+0xe4>)
    954e:	f013 facc 	bl	1caea <assert_print>
    9552:	482d      	ldr	r0, [pc, #180]	; (9608 <ultrasonic_init+0xe8>)
    9554:	f013 fac9 	bl	1caea <assert_print>
    9558:	f44f 7137 	mov.w	r1, #732	; 0x2dc
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    955c:	4828      	ldr	r0, [pc, #160]	; (9600 <ultrasonic_init+0xe0>)
    955e:	f013 fabd 	bl	1cadc <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    9562:	6832      	ldr	r2, [r6, #0]
    9564:	ea22 0203 	bic.w	r2, r2, r3
    9568:	6032      	str	r2, [r6, #0]
	return api->pin_configure(port, pin, flags);
    956a:	f8dc 3000 	ldr.w	r3, [ip]
    956e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9572:	4798      	blx	r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9574:	6863      	ldr	r3, [r4, #4]
    9576:	fa07 f605 	lsl.w	r6, r7, r5
    957a:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
    957c:	68a1      	ldr	r1, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    957e:	421e      	tst	r6, r3
	struct gpio_driver_data *data =
    9580:	6922      	ldr	r2, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9582:	d0df      	beq.n	9544 <ultrasonic_init+0x24>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    9584:	6813      	ldr	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    9586:	4620      	mov	r0, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    9588:	ea23 0306 	bic.w	r3, r3, r6
    958c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    958e:	680b      	ldr	r3, [r1, #0]
    9590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9594:	4629      	mov	r1, r5
    9596:	4798      	blx	r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    9598:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    959c:	6812      	ldr	r2, [r2, #0]
    959e:	4216      	tst	r6, r2
    95a0:	d10c      	bne.n	95bc <ultrasonic_init+0x9c>
    95a2:	4916      	ldr	r1, [pc, #88]	; (95fc <ultrasonic_init+0xdc>)
    95a4:	f240 237e 	movw	r3, #638	; 0x27e
    95a8:	4a15      	ldr	r2, [pc, #84]	; (9600 <ultrasonic_init+0xe0>)
    95aa:	4816      	ldr	r0, [pc, #88]	; (9604 <ultrasonic_init+0xe4>)
    95ac:	f013 fa9d 	bl	1caea <assert_print>
    95b0:	4815      	ldr	r0, [pc, #84]	; (9608 <ultrasonic_init+0xe8>)
    95b2:	f013 fa9a 	bl	1caea <assert_print>
    95b6:	f240 217e 	movw	r1, #638	; 0x27e
    95ba:	e7cf      	b.n	955c <ultrasonic_init+0x3c>
	return api->pin_interrupt_configure(port, pin, mode, trig);
    95bc:	f8d3 8018 	ldr.w	r8, [r3, #24]
    95c0:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    95c4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
    95c8:	4629      	mov	r1, r5
    95ca:	4620      	mov	r0, r4
    95cc:	47c0      	blx	r8
	if (err)
    95ce:	b970      	cbnz	r0, 95ee <ultrasonic_init+0xce>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    95d0:	4b0e      	ldr	r3, [pc, #56]	; (960c <ultrasonic_init+0xec>)
    95d2:	490f      	ldr	r1, [pc, #60]	; (9610 <ultrasonic_init+0xf0>)
	callback->pin_mask = pin_mask;
    95d4:	e9c1 3601 	strd	r3, r6, [r1, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    95d8:	68a3      	ldr	r3, [r4, #8]
    95da:	69db      	ldr	r3, [r3, #28]
    95dc:	b11b      	cbz	r3, 95e6 <ultrasonic_init+0xc6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    95de:	463a      	mov	r2, r7
    95e0:	4620      	mov	r0, r4
    95e2:	4798      	blx	r3
	if (err)
    95e4:	b108      	cbz	r0, 95ea <ultrasonic_init+0xca>
		return 667;
    95e6:	f240 209b 	movw	r0, #667	; 0x29b
} /* ultrasonic_init */
    95ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 666;
    95ee:	f240 209a 	movw	r0, #666	; 0x29a
    95f2:	e7fa      	b.n	95ea <ultrasonic_init+0xca>
    95f4:	2000972c 	.word	0x2000972c
    95f8:	20009c6c 	.word	0x20009c6c
    95fc:	00021509 	.word	0x00021509
    9600:	000214d8 	.word	0x000214d8
    9604:	00021547 	.word	0x00021547
    9608:	00021564 	.word	0x00021564
    960c:	00009479 	.word	0x00009479
    9610:	2000970c 	.word	0x2000970c

00009614 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    9614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9618:	b095      	sub	sp, #84	; 0x54
    961a:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    961c:	4604      	mov	r4, r0
{
    961e:	e9c7 1208 	strd	r1, r2, [r7, #32]
    9622:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    9626:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
    9628:	b958      	cbnz	r0, 9642 <cbprintf_package_convert+0x2e>
    962a:	49aa      	ldr	r1, [pc, #680]	; (98d4 <cbprintf_package_convert+0x2c0>)
    962c:	f44f 7365 	mov.w	r3, #916	; 0x394
    9630:	4aa9      	ldr	r2, [pc, #676]	; (98d8 <cbprintf_package_convert+0x2c4>)
    9632:	48aa      	ldr	r0, [pc, #680]	; (98dc <cbprintf_package_convert+0x2c8>)
    9634:	f013 fa59 	bl	1caea <assert_print>
    9638:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    963c:	48a6      	ldr	r0, [pc, #664]	; (98d8 <cbprintf_package_convert+0x2c4>)
    963e:	f013 fa4d 	bl	1cadc <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    9642:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    9646:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    9648:	6a3b      	ldr	r3, [r7, #32]
    964a:	b953      	cbnz	r3, 9662 <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    964c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    964e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    9650:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    9652:	6a3d      	ldr	r5, [r7, #32]
	buf += ros_nbr;
    9654:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9658:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    965a:	42ae      	cmp	r6, r5
    965c:	d81a      	bhi.n	9694 <cbprintf_package_convert+0x80>
	return (size_t)(uintptr_t)(buf - start);
    965e:	1b03      	subs	r3, r0, r4
    9660:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
    9662:	f894 9002 	ldrb.w	r9, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    9666:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    9668:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
    966a:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    966c:	f1b9 0f00 	cmp.w	r9, #0
    9670:	d002      	beq.n	9678 <cbprintf_package_convert+0x64>
    9672:	f01b 0f01 	tst.w	fp, #1
    9676:	d116      	bne.n	96a6 <cbprintf_package_convert+0x92>
	rw_cpy = rws_nbr > 0 &&
    9678:	697b      	ldr	r3, [r7, #20]
    967a:	bb53      	cbnz	r3, 96d2 <cbprintf_package_convert+0xbe>
		if (cb) {
    967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    967e:	b11b      	cbz	r3, 9688 <cbprintf_package_convert+0x74>
			cb(in_packaged, in_len, ctx);
    9680:	4620      	mov	r0, r4
    9682:	69ba      	ldr	r2, [r7, #24]
    9684:	6a39      	ldr	r1, [r7, #32]
    9686:	4798      	blx	r3
		return in_len;
    9688:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    968a:	4628      	mov	r0, r5
    968c:	3754      	adds	r7, #84	; 0x54
    968e:	46bd      	mov	sp, r7
    9690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    9694:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    9698:	4640      	mov	r0, r8
    969a:	f014 f9f6 	bl	1da8a <strlen>
    969e:	3001      	adds	r0, #1
    96a0:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    96a2:	3501      	adds	r5, #1
    96a4:	e7d9      	b.n	965a <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    96a6:	6863      	ldr	r3, [r4, #4]
    96a8:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    96ac:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    96ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    96b0:	ea4f 028a 	mov.w	r2, sl, lsl #2
    96b4:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    96b6:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    96ba:	2b00      	cmp	r3, #0
    96bc:	f040 8105 	bne.w	98ca <cbprintf_package_convert+0x2b6>
		out_len = (int)in_len;
    96c0:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
    96c2:	2600      	movs	r6, #0
		out_len = (int)in_len;
    96c4:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    96c6:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
    96ca:	4598      	cmp	r8, r3
    96cc:	d14e      	bne.n	976c <cbprintf_package_convert+0x158>
    96ce:	44ca      	add	sl, r9
    96d0:	e013      	b.n	96fa <cbprintf_package_convert+0xe6>
	rw_cpy = rws_nbr > 0 &&
    96d2:	f01b 0f02 	tst.w	fp, #2
    96d6:	d0d1      	beq.n	967c <cbprintf_package_convert+0x68>
	args_size = in_desc->len * sizeof(int);
    96d8:	f894 a000 	ldrb.w	sl, [r4]
    96dc:	ea4f 038a 	mov.w	r3, sl, lsl #2
    96e0:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    96e2:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    96e4:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    96e8:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    96ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    96ec:	2b00      	cmp	r3, #0
    96ee:	d178      	bne.n	97e2 <cbprintf_package_convert+0x1ce>
		out_len = (int)in_len;
    96f0:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    96f2:	f1b9 0f00 	cmp.w	r9, #0
    96f6:	d14e      	bne.n	9796 <cbprintf_package_convert+0x182>
	size_t strl_cnt = 0;
    96f8:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    96fa:	f01b 0f05 	tst.w	fp, #5
    96fe:	bf0c      	ite	eq
    9700:	2302      	moveq	r3, #2
    9702:	2301      	movne	r3, #1
    9704:	627b      	str	r3, [r7, #36]	; 0x24
    9706:	697b      	ldr	r3, [r7, #20]
    9708:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    970c:	f00b 0302 	and.w	r3, fp, #2
    9710:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    9712:	45ca      	cmp	sl, r9
    9714:	d0b9      	beq.n	968a <cbprintf_package_convert+0x76>
			uint8_t arg_idx = *str_pos++;
    9716:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    971a:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    971e:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    9722:	4b6f      	ldr	r3, [pc, #444]	; (98e0 <cbprintf_package_convert+0x2cc>)
    9724:	4598      	cmp	r8, r3
    9726:	d302      	bcc.n	972e <cbprintf_package_convert+0x11a>
    9728:	4b6e      	ldr	r3, [pc, #440]	; (98e4 <cbprintf_package_convert+0x2d0>)
    972a:	4598      	cmp	r8, r3
    972c:	d339      	bcc.n	97a2 <cbprintf_package_convert+0x18e>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    972e:	693b      	ldr	r3, [r7, #16]
    9730:	2b00      	cmp	r3, #0
    9732:	d043      	beq.n	97bc <cbprintf_package_convert+0x1a8>
    9734:	69f8      	ldr	r0, [r7, #28]
    9736:	f012 ff96 	bl	1c666 <is_ptr>
    973a:	2800      	cmp	r0, #0
    973c:	d03e      	beq.n	97bc <cbprintf_package_convert+0x1a8>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    973e:	46e8      	mov	r8, sp
    9740:	b08a      	sub	sp, #40	; 0x28
    9742:	466a      	mov	r2, sp
    9744:	4b68      	ldr	r3, [pc, #416]	; (98e8 <cbprintf_package_convert+0x2d4>)
    9746:	6153      	str	r3, [r2, #20]
    9748:	69fb      	ldr	r3, [r7, #28]
    974a:	e9c2 3106 	strd	r3, r1, [r2, #24]
    974e:	f44f 7300 	mov.w	r3, #512	; 0x200
    9752:	8413      	strh	r3, [r2, #32]
    9754:	4b65      	ldr	r3, [pc, #404]	; (98ec <cbprintf_package_convert+0x2d8>)
    9756:	f842 3f10 	str.w	r3, [r2, #16]!
    975a:	2300      	movs	r3, #0
    975c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    9760:	4863      	ldr	r0, [pc, #396]	; (98f0 <cbprintf_package_convert+0x2dc>)
    9762:	f002 f8d1 	bl	b908 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    9766:	3d02      	subs	r5, #2
    9768:	46c5      	mov	sp, r8
				continue;
    976a:	e7d2      	b.n	9712 <cbprintf_package_convert+0xfe>
				const char *str = *(const char **)&buf32[*str_pos];
    976c:	f818 2b01 	ldrb.w	r2, [r8], #1
    9770:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    9772:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    9776:	f014 f988 	bl	1da8a <strlen>
				if (strl && strl_cnt < strl_len) {
    977a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    977e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    9780:	b13a      	cbz	r2, 9792 <cbprintf_package_convert+0x17e>
    9782:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    9786:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    9788:	bf3e      	ittt	cc
    978a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    978c:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    9790:	3601      	addcc	r6, #1
				out_len += len;
    9792:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    9794:	e799      	b.n	96ca <cbprintf_package_convert+0xb6>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9796:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    979a:	bf1c      	itt	ne
    979c:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    979e:	44ca      	addne	sl, r9
    97a0:	e7ab      	b.n	96fa <cbprintf_package_convert+0xe6>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    97a2:	693b      	ldr	r3, [r7, #16]
    97a4:	b123      	cbz	r3, 97b0 <cbprintf_package_convert+0x19c>
    97a6:	69f8      	ldr	r0, [r7, #28]
    97a8:	f012 ff5d 	bl	1c666 <is_ptr>
    97ac:	2800      	cmp	r0, #0
    97ae:	d1c6      	bne.n	973e <cbprintf_package_convert+0x12a>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    97b0:	f01b 0f01 	tst.w	fp, #1
    97b4:	d105      	bne.n	97c2 <cbprintf_package_convert+0x1ae>
					out_len -= drop_ro_str_pos ? 2 : 1;
    97b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    97b8:	1aed      	subs	r5, r5, r3
    97ba:	e7aa      	b.n	9712 <cbprintf_package_convert+0xfe>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    97bc:	6a3b      	ldr	r3, [r7, #32]
    97be:	2b00      	cmp	r3, #0
    97c0:	d0a7      	beq.n	9712 <cbprintf_package_convert+0xfe>
		return 1 + strlen(str);
    97c2:	4640      	mov	r0, r8
    97c4:	f014 f961 	bl	1da8a <strlen>
				if (strl && strl_cnt < strl_len) {
    97c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    97ca:	b143      	cbz	r3, 97de <cbprintf_package_convert+0x1ca>
    97cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    97d0:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    97d2:	bf3f      	itttt	cc
    97d4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    97d6:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    97d8:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    97dc:	3601      	addcc	r6, #1
				out_len += (len - 1);
    97de:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    97e0:	e797      	b.n	9712 <cbprintf_package_convert+0xfe>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    97e2:	f1b9 0f00 	cmp.w	r9, #0
    97e6:	f000 8085 	beq.w	98f4 <cbprintf_package_convert+0x2e0>
    97ea:	f01b 0604 	ands.w	r6, fp, #4
    97ee:	f000 8084 	beq.w	98fa <cbprintf_package_convert+0x2e6>
		keep_cnt = ros_nbr;
    97f2:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    97f4:	2600      	movs	r6, #0
		dst = keep_str_pos;
    97f6:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    97fa:	464a      	mov	r2, r9
    97fc:	4651      	mov	r1, sl
    97fe:	f014 f983 	bl	1db08 <memcpy>
	str_pos += ros_nbr;
    9802:	697b      	ldr	r3, [r7, #20]
    9804:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    9806:	005b      	lsls	r3, r3, #1
    9808:	60bb      	str	r3, [r7, #8]
    980a:	697b      	ldr	r3, [r7, #20]
    980c:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    9810:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9812:	f00b 0302 	and.w	r3, fp, #2
    9816:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    9818:	697b      	ldr	r3, [r7, #20]
    981a:	459a      	cmp	sl, r3
    981c:	d16f      	bne.n	98fe <cbprintf_package_convert+0x2ea>
	out_desc.len = in_desc->len;
    981e:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9820:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    9824:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    9826:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9828:	bf18      	it	ne
    982a:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    982c:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    9830:	bf08      	it	eq
    9832:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9836:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    983a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    983c:	f040 80e2 	bne.w	9a04 <cbprintf_package_convert+0x3f0>
    9840:	f01b 0f04 	tst.w	fp, #4
    9844:	bf14      	ite	ne
    9846:	4640      	movne	r0, r8
    9848:	2000      	moveq	r0, #0
    984a:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    984c:	78a3      	ldrb	r3, [r4, #2]
    984e:	f894 b003 	ldrb.w	fp, [r4, #3]
    9852:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    9854:	7062      	strb	r2, [r4, #1]
    9856:	70a0      	strb	r0, [r4, #2]
    9858:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    985a:	4620      	mov	r0, r4
    985c:	69ba      	ldr	r2, [r7, #24]
    985e:	68f9      	ldr	r1, [r7, #12]
    9860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9862:	4798      	blx	r3
	if (rv < 0) {
    9864:	1e05      	subs	r5, r0, #0
    9866:	f6ff af10 	blt.w	968a <cbprintf_package_convert+0x76>
	*in_desc = in_desc_backup;
    986a:	697b      	ldr	r3, [r7, #20]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    986c:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    986e:	7023      	strb	r3, [r4, #0]
    9870:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    9872:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    9874:	7063      	strb	r3, [r4, #1]
    9876:	69fb      	ldr	r3, [r7, #28]
    9878:	f884 b003 	strb.w	fp, [r4, #3]
    987c:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    987e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    9882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9884:	4798      	blx	r3
	if (rv < 0) {
    9886:	f1b0 0800 	subs.w	r8, r0, #0
    988a:	f2c0 80e8 	blt.w	9a5e <cbprintf_package_convert+0x44a>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    988e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    9890:	4650      	mov	r0, sl
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    9892:	eba3 0109 	sub.w	r1, r3, r9
    9896:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    9898:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    989a:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    989c:	68bb      	ldr	r3, [r7, #8]
    989e:	1ac9      	subs	r1, r1, r3
    98a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    98a2:	4798      	blx	r3
	if (rv < 0) {
    98a4:	2800      	cmp	r0, #0
    98a6:	f2c0 80dc 	blt.w	9a62 <cbprintf_package_convert+0x44e>
	for (int i = 0; i < scpy_cnt; i++) {
    98aa:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    98ae:	44a8      	add	r8, r5
	out_len += rv;
    98b0:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    98b4:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    98b8:	45b3      	cmp	fp, r6
    98ba:	f2c0 80a5 	blt.w	9a08 <cbprintf_package_convert+0x3f4>
	(void)cb(NULL, 0, ctx);
    98be:	2100      	movs	r1, #0
    98c0:	69ba      	ldr	r2, [r7, #24]
    98c2:	4608      	mov	r0, r1
    98c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    98c6:	4798      	blx	r3
	return out_len;
    98c8:	e6df      	b.n	968a <cbprintf_package_convert+0x76>
	if (cb == NULL) {
    98ca:	f04f 0800 	mov.w	r8, #0
    98ce:	f107 0030 	add.w	r0, r7, #48	; 0x30
    98d2:	e792      	b.n	97fa <cbprintf_package_convert+0x1e6>
    98d4:	0002160b 	.word	0x0002160b
    98d8:	00021576 	.word	0x00021576
    98dc:	00021547 	.word	0x00021547
    98e0:	0002037c 	.word	0x0002037c
    98e4:	000258b0 	.word	0x000258b0
    98e8:	00021626 	.word	0x00021626
    98ec:	01000004 	.word	0x01000004
    98f0:	00020864 	.word	0x00020864
		scpy_cnt = 0;
    98f4:	464e      	mov	r6, r9
		keep_cnt = 0;
    98f6:	46c8      	mov	r8, r9
    98f8:	e783      	b.n	9802 <cbprintf_package_convert+0x1ee>
    98fa:	46b0      	mov	r8, r6
    98fc:	e781      	b.n	9802 <cbprintf_package_convert+0x1ee>
		uint8_t arg_idx = *str_pos++;
    98fe:	f81a 1b02 	ldrb.w	r1, [sl], #2
    9902:	4b59      	ldr	r3, [pc, #356]	; (9a68 <cbprintf_package_convert+0x454>)
		uint8_t arg_pos = *str_pos++;
    9904:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    9908:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    990c:	429a      	cmp	r2, r3
    990e:	d302      	bcc.n	9916 <cbprintf_package_convert+0x302>
    9910:	4b56      	ldr	r3, [pc, #344]	; (9a6c <cbprintf_package_convert+0x458>)
    9912:	429a      	cmp	r2, r3
    9914:	d316      	bcc.n	9944 <cbprintf_package_convert+0x330>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9916:	693b      	ldr	r3, [r7, #16]
    9918:	b12b      	cbz	r3, 9926 <cbprintf_package_convert+0x312>
    991a:	69f8      	ldr	r0, [r7, #28]
    991c:	f012 fea3 	bl	1c666 <is_ptr>
    9920:	2800      	cmp	r0, #0
    9922:	f47f af79 	bne.w	9818 <cbprintf_package_convert+0x204>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    9926:	687b      	ldr	r3, [r7, #4]
    9928:	2b00      	cmp	r3, #0
    992a:	d04a      	beq.n	99c2 <cbprintf_package_convert+0x3ae>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    992c:	2e0f      	cmp	r6, #15
    992e:	d93e      	bls.n	99ae <cbprintf_package_convert+0x39a>
    9930:	494f      	ldr	r1, [pc, #316]	; (9a70 <cbprintf_package_convert+0x45c>)
    9932:	f44f 6389 	mov.w	r3, #1096	; 0x448
    9936:	4a4f      	ldr	r2, [pc, #316]	; (9a74 <cbprintf_package_convert+0x460>)
    9938:	484f      	ldr	r0, [pc, #316]	; (9a78 <cbprintf_package_convert+0x464>)
    993a:	f013 f8d6 	bl	1caea <assert_print>
    993e:	f44f 6189 	mov.w	r1, #1096	; 0x448
    9942:	e67b      	b.n	963c <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    9944:	693b      	ldr	r3, [r7, #16]
    9946:	b12b      	cbz	r3, 9954 <cbprintf_package_convert+0x340>
    9948:	69f8      	ldr	r0, [r7, #28]
    994a:	f012 fe8c 	bl	1c666 <is_ptr>
    994e:	2800      	cmp	r0, #0
    9950:	f47f af62 	bne.w	9818 <cbprintf_package_convert+0x204>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    9954:	f01b 0f01 	tst.w	fp, #1
    9958:	d00b      	beq.n	9972 <cbprintf_package_convert+0x35e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    995a:	2e0f      	cmp	r6, #15
    995c:	d927      	bls.n	99ae <cbprintf_package_convert+0x39a>
    995e:	4944      	ldr	r1, [pc, #272]	; (9a70 <cbprintf_package_convert+0x45c>)
    9960:	f240 433e 	movw	r3, #1086	; 0x43e
    9964:	4a43      	ldr	r2, [pc, #268]	; (9a74 <cbprintf_package_convert+0x460>)
    9966:	4844      	ldr	r0, [pc, #272]	; (9a78 <cbprintf_package_convert+0x464>)
    9968:	f013 f8bf 	bl	1caea <assert_print>
    996c:	f240 413e 	movw	r1, #1086	; 0x43e
    9970:	e664      	b.n	963c <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    9972:	f01b 0f04 	tst.w	fp, #4
    9976:	f43f af4f 	beq.w	9818 <cbprintf_package_convert+0x204>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    997a:	f1b8 0f0f 	cmp.w	r8, #15
    997e:	d909      	bls.n	9994 <cbprintf_package_convert+0x380>
    9980:	493e      	ldr	r1, [pc, #248]	; (9a7c <cbprintf_package_convert+0x468>)
    9982:	f240 4341 	movw	r3, #1089	; 0x441
    9986:	4a3b      	ldr	r2, [pc, #236]	; (9a74 <cbprintf_package_convert+0x460>)
    9988:	483b      	ldr	r0, [pc, #236]	; (9a78 <cbprintf_package_convert+0x464>)
    998a:	f013 f8ae 	bl	1caea <assert_print>
    998e:	f240 4141 	movw	r1, #1089	; 0x441
    9992:	e653      	b.n	963c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    9994:	f108 0328 	add.w	r3, r8, #40	; 0x28
    9998:	f107 0128 	add.w	r1, r7, #40	; 0x28
    999c:	f108 0201 	add.w	r2, r8, #1
    99a0:	eb03 0801 	add.w	r8, r3, r1
    99a4:	f808 5c10 	strb.w	r5, [r8, #-16]
    99a8:	fa5f f882 	uxtb.w	r8, r2
    99ac:	e734      	b.n	9818 <cbprintf_package_convert+0x204>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    99ae:	f106 0328 	add.w	r3, r6, #40	; 0x28
    99b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
    99b6:	1c72      	adds	r2, r6, #1
    99b8:	185e      	adds	r6, r3, r1
    99ba:	f806 5c20 	strb.w	r5, [r6, #-32]
    99be:	b2d6      	uxtb	r6, r2
    99c0:	e72a      	b.n	9818 <cbprintf_package_convert+0x204>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    99c2:	f1b8 0f0f 	cmp.w	r8, #15
    99c6:	d909      	bls.n	99dc <cbprintf_package_convert+0x3c8>
    99c8:	492c      	ldr	r1, [pc, #176]	; (9a7c <cbprintf_package_convert+0x468>)
    99ca:	f240 434b 	movw	r3, #1099	; 0x44b
    99ce:	4a29      	ldr	r2, [pc, #164]	; (9a74 <cbprintf_package_convert+0x460>)
    99d0:	4829      	ldr	r0, [pc, #164]	; (9a78 <cbprintf_package_convert+0x464>)
    99d2:	f013 f88a 	bl	1caea <assert_print>
    99d6:	f240 414b 	movw	r1, #1099	; 0x44b
    99da:	e62f      	b.n	963c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    99dc:	f108 0328 	add.w	r3, r8, #40	; 0x28
    99e0:	f107 0028 	add.w	r0, r7, #40	; 0x28
    99e4:	f108 0201 	add.w	r2, r8, #1
    99e8:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
    99ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
    99ee:	f108 0802 	add.w	r8, r8, #2
    99f2:	fa53 f282 	uxtab	r2, r3, r2
				keep_str_pos[keep_cnt++] = arg_idx;
    99f6:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    99fa:	fa5f f888 	uxtb.w	r8, r8
    99fe:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    9a02:	e709      	b.n	9818 <cbprintf_package_convert+0x204>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    9a04:	2000      	movs	r0, #0
    9a06:	e720      	b.n	984a <cbprintf_package_convert+0x236>
		uint8_t loc = cpy_str_pos[i];
    9a08:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    9a0c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    9a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    9a14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9a16:	b1fb      	cbz	r3, 9a58 <cbprintf_package_convert+0x444>
    9a18:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    9a1c:	2101      	movs	r1, #1
    9a1e:	69ba      	ldr	r2, [r7, #24]
    9a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9a22:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    9a26:	4798      	blx	r3
		if (rv < 0) {
    9a28:	2800      	cmp	r0, #0
    9a2a:	db1a      	blt.n	9a62 <cbprintf_package_convert+0x44e>
		out_len += rv;
    9a2c:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    9a2e:	f1b8 0f00 	cmp.w	r8, #0
    9a32:	d106      	bne.n	9a42 <cbprintf_package_convert+0x42e>
    9a34:	4648      	mov	r0, r9
    9a36:	f014 f828 	bl	1da8a <strlen>
    9a3a:	f100 0801 	add.w	r8, r0, #1
    9a3e:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    9a42:	4641      	mov	r1, r8
    9a44:	4648      	mov	r0, r9
    9a46:	69ba      	ldr	r2, [r7, #24]
    9a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9a4a:	4798      	blx	r3
		if (rv < 0) {
    9a4c:	2800      	cmp	r0, #0
    9a4e:	db08      	blt.n	9a62 <cbprintf_package_convert+0x44e>
		out_len += rv;
    9a50:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    9a52:	f10b 0b01 	add.w	fp, fp, #1
    9a56:	e72f      	b.n	98b8 <cbprintf_package_convert+0x2a4>
		uint16_t str_len = strl ? strl[i] : 0;
    9a58:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    9a5c:	e7de      	b.n	9a1c <cbprintf_package_convert+0x408>
    9a5e:	4645      	mov	r5, r8
    9a60:	e613      	b.n	968a <cbprintf_package_convert+0x76>
    9a62:	4605      	mov	r5, r0
    9a64:	e611      	b.n	968a <cbprintf_package_convert+0x76>
    9a66:	bf00      	nop
    9a68:	0002037c 	.word	0x0002037c
    9a6c:	000258b0 	.word	0x000258b0
    9a70:	000216c9 	.word	0x000216c9
    9a74:	00021576 	.word	0x00021576
    9a78:	00021547 	.word	0x00021547
    9a7c:	000216e8 	.word	0x000216e8

00009a80 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    9a80:	4b01      	ldr	r3, [pc, #4]	; (9a88 <char_out+0x8>)
    9a82:	681b      	ldr	r3, [r3, #0]
    9a84:	4718      	bx	r3
    9a86:	bf00      	nop
    9a88:	2000818c 	.word	0x2000818c

00009a8c <__printk_hook_install>:
	_char_out = fn;
    9a8c:	4b01      	ldr	r3, [pc, #4]	; (9a94 <__printk_hook_install+0x8>)
    9a8e:	6018      	str	r0, [r3, #0]
}
    9a90:	4770      	bx	lr
    9a92:	bf00      	nop
    9a94:	2000818c 	.word	0x2000818c

00009a98 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    9a98:	b507      	push	{r0, r1, r2, lr}
    9a9a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    9a9c:	2100      	movs	r1, #0
    9a9e:	4602      	mov	r2, r0
    9aa0:	9100      	str	r1, [sp, #0]
    9aa2:	4803      	ldr	r0, [pc, #12]	; (9ab0 <vprintk+0x18>)
    9aa4:	f000 fc38 	bl	a318 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    9aa8:	b003      	add	sp, #12
    9aaa:	f85d fb04 	ldr.w	pc, [sp], #4
    9aae:	bf00      	nop
    9ab0:	00009a81 	.word	0x00009a81

00009ab4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9ab4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9ab6:	2500      	movs	r5, #0
{
    9ab8:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    9aba:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    9abe:	4604      	mov	r4, r0
    9ac0:	9500      	str	r5, [sp, #0]
    9ac2:	a903      	add	r1, sp, #12
    9ac4:	4805      	ldr	r0, [pc, #20]	; (9adc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    9ac6:	9505      	str	r5, [sp, #20]
    9ac8:	f000 fc26 	bl	a318 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    9acc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    9ad0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9ad2:	bfb8      	it	lt
    9ad4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9ad6:	b007      	add	sp, #28
    9ad8:	bd30      	pop	{r4, r5, pc}
    9ada:	bf00      	nop
    9adc:	0001c6b5 	.word	0x0001c6b5

00009ae0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    9ae0:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    9ae2:	460c      	mov	r4, r1
    9ae4:	2900      	cmp	r1, #0
    9ae6:	d034      	beq.n	9b52 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    9ae8:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9aea:	1f0b      	subs	r3, r1, #4
    9aec:	1a9b      	subs	r3, r3, r2
    9aee:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    9af0:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    9af4:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9af6:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    9af8:	07e8      	lsls	r0, r5, #31
    9afa:	d40d      	bmi.n	9b18 <sys_heap_free+0x38>
    9afc:	23af      	movs	r3, #175	; 0xaf
    9afe:	4a15      	ldr	r2, [pc, #84]	; (9b54 <sys_heap_free+0x74>)
    9b00:	4915      	ldr	r1, [pc, #84]	; (9b58 <sys_heap_free+0x78>)
    9b02:	4816      	ldr	r0, [pc, #88]	; (9b5c <sys_heap_free+0x7c>)
    9b04:	f012 fff1 	bl	1caea <assert_print>
    9b08:	4621      	mov	r1, r4
    9b0a:	4815      	ldr	r0, [pc, #84]	; (9b60 <sys_heap_free+0x80>)
    9b0c:	f012 ffed 	bl	1caea <assert_print>
    9b10:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    9b12:	4810      	ldr	r0, [pc, #64]	; (9b54 <sys_heap_free+0x74>)
    9b14:	f012 ffe2 	bl	1cadc <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    9b18:	4610      	mov	r0, r2
    9b1a:	f012 fe02 	bl	1c722 <chunk_size>
    9b1e:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    9b20:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9b24:	1b80      	subs	r0, r0, r6
    9b26:	4281      	cmp	r1, r0
    9b28:	d00b      	beq.n	9b42 <sys_heap_free+0x62>
    9b2a:	23b7      	movs	r3, #183	; 0xb7
    9b2c:	4a09      	ldr	r2, [pc, #36]	; (9b54 <sys_heap_free+0x74>)
    9b2e:	490d      	ldr	r1, [pc, #52]	; (9b64 <sys_heap_free+0x84>)
    9b30:	480a      	ldr	r0, [pc, #40]	; (9b5c <sys_heap_free+0x7c>)
    9b32:	f012 ffda 	bl	1caea <assert_print>
    9b36:	4621      	mov	r1, r4
    9b38:	480b      	ldr	r0, [pc, #44]	; (9b68 <sys_heap_free+0x88>)
    9b3a:	f012 ffd6 	bl	1caea <assert_print>
    9b3e:	21b7      	movs	r1, #183	; 0xb7
    9b40:	e7e7      	b.n	9b12 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9b42:	f025 0501 	bic.w	r5, r5, #1
    9b46:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    9b48:	4610      	mov	r0, r2
}
    9b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    9b4e:	f012 bea5 	b.w	1c89c <free_chunk>
}
    9b52:	bd70      	pop	{r4, r5, r6, pc}
    9b54:	00021719 	.word	0x00021719
    9b58:	0002173a 	.word	0x0002173a
    9b5c:	00021547 	.word	0x00021547
    9b60:	0002174b 	.word	0x0002174b
    9b64:	00021783 	.word	0x00021783
    9b68:	000217a9 	.word	0x000217a9

00009b6c <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    9b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b70:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    9b72:	400b      	ands	r3, r1
{
    9b74:	460f      	mov	r7, r1
    9b76:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    9b78:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    9b7a:	d010      	beq.n	9b9e <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    9b7c:	f1c1 0900 	rsb	r9, r1, #0
    9b80:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    9b84:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    9b86:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    9b88:	2a04      	cmp	r2, #4
    9b8a:	bf28      	it	cs
    9b8c:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    9b8e:	4219      	tst	r1, r3
    9b90:	d10c      	bne.n	9bac <sys_heap_aligned_alloc+0x40>
    9b92:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    9b94:	b9e4      	cbnz	r4, 9bd0 <sys_heap_aligned_alloc+0x64>
		return NULL;
    9b96:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    9b98:	4628      	mov	r0, r5
    9b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    9b9e:	2904      	cmp	r1, #4
    9ba0:	d813      	bhi.n	9bca <sys_heap_aligned_alloc+0x5e>
}
    9ba2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    9ba6:	4611      	mov	r1, r2
    9ba8:	f012 bea9 	b.w	1c8fe <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    9bac:	492c      	ldr	r1, [pc, #176]	; (9c60 <sys_heap_aligned_alloc+0xf4>)
    9bae:	f44f 73a2 	mov.w	r3, #324	; 0x144
    9bb2:	4a2c      	ldr	r2, [pc, #176]	; (9c64 <sys_heap_aligned_alloc+0xf8>)
    9bb4:	482c      	ldr	r0, [pc, #176]	; (9c68 <sys_heap_aligned_alloc+0xfc>)
    9bb6:	f012 ff98 	bl	1caea <assert_print>
    9bba:	482c      	ldr	r0, [pc, #176]	; (9c6c <sys_heap_aligned_alloc+0x100>)
    9bbc:	f012 ff95 	bl	1caea <assert_print>
    9bc0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    9bc4:	4827      	ldr	r0, [pc, #156]	; (9c64 <sys_heap_aligned_alloc+0xf8>)
    9bc6:	f012 ff89 	bl	1cadc <assert_post_action>
		rew = 0;
    9bca:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    9bcc:	2204      	movs	r2, #4
    9bce:	e7e1      	b.n	9b94 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    9bd0:	68b3      	ldr	r3, [r6, #8]
    9bd2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    9bd6:	d9de      	bls.n	9b96 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9bd8:	f104 010b 	add.w	r1, r4, #11
    9bdc:	4439      	add	r1, r7
    9bde:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    9be0:	4630      	mov	r0, r6
    9be2:	08c9      	lsrs	r1, r1, #3
    9be4:	f012 fdf3 	bl	1c7ce <alloc_chunk>
	if (c0 == 0) {
    9be8:	4680      	mov	r8, r0
    9bea:	2800      	cmp	r0, #0
    9bec:	d0d3      	beq.n	9b96 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    9bee:	f109 0504 	add.w	r5, r9, #4
    9bf2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    9bf6:	1e7b      	subs	r3, r7, #1
    9bf8:	4435      	add	r5, r6
    9bfa:	441d      	add	r5, r3
    9bfc:	427f      	negs	r7, r7
    9bfe:	403d      	ands	r5, r7
    9c00:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9c04:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9c06:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9c08:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9c0a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9c0c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9c10:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9c12:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9c16:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    9c1a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9c1e:	d208      	bcs.n	9c32 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    9c20:	4601      	mov	r1, r0
    9c22:	463a      	mov	r2, r7
    9c24:	4630      	mov	r0, r6
    9c26:	f012 fe1f 	bl	1c868 <split_chunks>
		free_list_add(h, c0);
    9c2a:	4641      	mov	r1, r8
    9c2c:	4630      	mov	r0, r6
    9c2e:	f012 fd7d 	bl	1c72c <free_list_add>
	return c + chunk_size(h, c);
    9c32:	4639      	mov	r1, r7
    9c34:	4630      	mov	r0, r6
    9c36:	f012 fd74 	bl	1c722 <chunk_size>
    9c3a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    9c3c:	4284      	cmp	r4, r0
    9c3e:	d207      	bcs.n	9c50 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    9c40:	4630      	mov	r0, r6
    9c42:	4622      	mov	r2, r4
    9c44:	f012 fe10 	bl	1c868 <split_chunks>
		free_list_add(h, c_end);
    9c48:	4621      	mov	r1, r4
    9c4a:	4630      	mov	r0, r6
    9c4c:	f012 fd6e 	bl	1c72c <free_list_add>
	void *cmem = &buf[c];
    9c50:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9c54:	8873      	ldrh	r3, [r6, #2]
    9c56:	f043 0301 	orr.w	r3, r3, #1
    9c5a:	8073      	strh	r3, [r6, #2]
    9c5c:	e79c      	b.n	9b98 <sys_heap_aligned_alloc+0x2c>
    9c5e:	bf00      	nop
    9c60:	000217e5 	.word	0x000217e5
    9c64:	00021719 	.word	0x00021719
    9c68:	00021547 	.word	0x00021547
    9c6c:	00021800 	.word	0x00021800

00009c70 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    9c70:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    9c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c76:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    9c78:	d30e      	bcc.n	9c98 <sys_heap_init+0x28>
    9c7a:	493a      	ldr	r1, [pc, #232]	; (9d64 <sys_heap_init+0xf4>)
    9c7c:	f240 13eb 	movw	r3, #491	; 0x1eb
    9c80:	4a39      	ldr	r2, [pc, #228]	; (9d68 <sys_heap_init+0xf8>)
    9c82:	483a      	ldr	r0, [pc, #232]	; (9d6c <sys_heap_init+0xfc>)
    9c84:	f012 ff31 	bl	1caea <assert_print>
    9c88:	4839      	ldr	r0, [pc, #228]	; (9d70 <sys_heap_init+0x100>)
    9c8a:	f012 ff2e 	bl	1caea <assert_print>
    9c8e:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    9c92:	4835      	ldr	r0, [pc, #212]	; (9d68 <sys_heap_init+0xf8>)
    9c94:	f012 ff22 	bl	1cadc <assert_post_action>
    9c98:	2a04      	cmp	r2, #4
    9c9a:	d80c      	bhi.n	9cb6 <sys_heap_init+0x46>
    9c9c:	4935      	ldr	r1, [pc, #212]	; (9d74 <sys_heap_init+0x104>)
    9c9e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    9ca2:	4a31      	ldr	r2, [pc, #196]	; (9d68 <sys_heap_init+0xf8>)
    9ca4:	4831      	ldr	r0, [pc, #196]	; (9d6c <sys_heap_init+0xfc>)
    9ca6:	f012 ff20 	bl	1caea <assert_print>
    9caa:	4833      	ldr	r0, [pc, #204]	; (9d78 <sys_heap_init+0x108>)
    9cac:	f012 ff1d 	bl	1caea <assert_print>
    9cb0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    9cb4:	e7ed      	b.n	9c92 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    9cb6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9cb8:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9cba:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9cbc:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9cc0:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    9cc4:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    9cc6:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    9cc8:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    9ccc:	d80c      	bhi.n	9ce8 <sys_heap_init+0x78>
    9cce:	492b      	ldr	r1, [pc, #172]	; (9d7c <sys_heap_init+0x10c>)
    9cd0:	f240 13fb 	movw	r3, #507	; 0x1fb
    9cd4:	4a24      	ldr	r2, [pc, #144]	; (9d68 <sys_heap_init+0xf8>)
    9cd6:	4825      	ldr	r0, [pc, #148]	; (9d6c <sys_heap_init+0xfc>)
    9cd8:	f012 ff07 	bl	1caea <assert_print>
    9cdc:	4826      	ldr	r0, [pc, #152]	; (9d78 <sys_heap_init+0x108>)
    9cde:	f012 ff04 	bl	1caea <assert_print>
    9ce2:	f240 11fb 	movw	r1, #507	; 0x1fb
    9ce6:	e7d4      	b.n	9c92 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    9ce8:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    9cec:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    9cee:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    9cf0:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    9cf4:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    9cf8:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9cfa:	3107      	adds	r1, #7
    9cfc:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    9cfe:	1c4d      	adds	r5, r1, #1
    9d00:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    9d02:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    9d04:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    9d06:	d90c      	bls.n	9d22 <sys_heap_init+0xb2>
    9d08:	491d      	ldr	r1, [pc, #116]	; (9d80 <sys_heap_init+0x110>)
    9d0a:	f44f 7303 	mov.w	r3, #524	; 0x20c
    9d0e:	4a16      	ldr	r2, [pc, #88]	; (9d68 <sys_heap_init+0xf8>)
    9d10:	4816      	ldr	r0, [pc, #88]	; (9d6c <sys_heap_init+0xfc>)
    9d12:	f012 feea 	bl	1caea <assert_print>
    9d16:	4818      	ldr	r0, [pc, #96]	; (9d78 <sys_heap_init+0x108>)
    9d18:	f012 fee7 	bl	1caea <assert_print>
    9d1c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    9d20:	e7b7      	b.n	9c92 <sys_heap_init+0x22>
    9d22:	f100 050c 	add.w	r5, r0, #12
    9d26:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    9d2a:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    9d2e:	42b5      	cmp	r5, r6
    9d30:	d1fb      	bne.n	9d2a <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9d32:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9d34:	f045 0501 	orr.w	r5, r5, #1
    9d38:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    9d3a:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    9d3c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9d40:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    9d42:	8004      	strh	r4, [r0, #0]
    9d44:	8077      	strh	r7, [r6, #2]
    9d46:	1886      	adds	r6, r0, r2
    9d48:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    9d4c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    9d50:	8074      	strh	r4, [r6, #2]
    9d52:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9d54:	885a      	ldrh	r2, [r3, #2]
    9d56:	f042 0201 	orr.w	r2, r2, #1
    9d5a:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    9d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    9d60:	f012 bce4 	b.w	1c72c <free_list_add>
    9d64:	0002181d 	.word	0x0002181d
    9d68:	00021719 	.word	0x00021719
    9d6c:	00021547 	.word	0x00021547
    9d70:	00021833 	.word	0x00021833
    9d74:	0002184a 	.word	0x0002184a
    9d78:	0002186b 	.word	0x0002186b
    9d7c:	00021884 	.word	0x00021884
    9d80:	000218ad 	.word	0x000218ad

00009d84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d88:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9d8a:	8ba3      	ldrh	r3, [r4, #28]
{
    9d8c:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9d8e:	0719      	lsls	r1, r3, #28
{
    9d90:	4615      	mov	r5, r2
	if (processing) {
    9d92:	d412      	bmi.n	9dba <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    9d94:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9d96:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    9d9a:	d164      	bne.n	9e66 <process_event+0xe2>
			evt = process_recheck(mgr);
    9d9c:	4620      	mov	r0, r4
    9d9e:	f012 fdd7 	bl	1c950 <process_recheck>
		}

		if (evt == EVT_NOP) {
    9da2:	b188      	cbz	r0, 9dc8 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    9da4:	3801      	subs	r0, #1
    9da6:	2804      	cmp	r0, #4
    9da8:	f200 8134 	bhi.w	a014 <process_event+0x290>
    9dac:	e8df f010 	tbh	[pc, r0, lsl #1]
    9db0:	0132005b 	.word	0x0132005b
    9db4:	00d10081 	.word	0x00d10081
    9db8:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    9dba:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9dbc:	bf0c      	ite	eq
    9dbe:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9dc2:	f043 0120 	orrne.w	r1, r3, #32
    9dc6:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    9dc8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9dca:	4620      	mov	r0, r4
    9dcc:	f00f f8b4 	bl	18f38 <z_spin_unlock_valid>
    9dd0:	2800      	cmp	r0, #0
    9dd2:	f040 819b 	bne.w	a10c <process_event+0x388>
    9dd6:	4998      	ldr	r1, [pc, #608]	; (a038 <process_event+0x2b4>)
    9dd8:	23c2      	movs	r3, #194	; 0xc2
    9dda:	4a98      	ldr	r2, [pc, #608]	; (a03c <process_event+0x2b8>)
    9ddc:	4898      	ldr	r0, [pc, #608]	; (a040 <process_event+0x2bc>)
    9dde:	f012 fe84 	bl	1caea <assert_print>
    9de2:	4621      	mov	r1, r4
    9de4:	e0b0      	b.n	9f48 <process_event+0x1c4>
    9de6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9dea:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9dec:	2801      	cmp	r0, #1
    9dee:	d81e      	bhi.n	9e2e <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    9df0:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    9df2:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    9df4:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    9df6:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9dfa:	d114      	bne.n	9e26 <process_event+0xa2>
		*clients = mgr->clients;
    9dfc:	463a      	mov	r2, r7
    9dfe:	e003      	b.n	9e08 <process_event+0x84>
				mgr->refs += 1U;
    9e00:	8be0      	ldrh	r0, [r4, #30]
    9e02:	3001      	adds	r0, #1
    9e04:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    9e06:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9e08:	2a00      	cmp	r2, #0
    9e0a:	d1f9      	bne.n	9e00 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9e0c:	f023 0307 	bic.w	r3, r3, #7
    9e10:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    9e14:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9e16:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9e18:	f012 fd9a 	bl	1c950 <process_recheck>
    9e1c:	b390      	cbz	r0, 9e84 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9e1e:	f042 0220 	orr.w	r2, r2, #32
    9e22:	83a2      	strh	r2, [r4, #28]
    9e24:	e02e      	b.n	9e84 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9e26:	f023 0307 	bic.w	r3, r3, #7
    9e2a:	b29a      	uxth	r2, r3
}
    9e2c:	e7f2      	b.n	9e14 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9e2e:	2a04      	cmp	r2, #4
    9e30:	d133      	bne.n	9e9a <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9e32:	f023 0307 	bic.w	r3, r3, #7
    9e36:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    9e38:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9e3a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9e3c:	f012 fd88 	bl	1c950 <process_recheck>
    9e40:	b110      	cbz	r0, 9e48 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9e42:	f042 0220 	orr.w	r2, r2, #32
    9e46:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9e48:	8ba3      	ldrh	r3, [r4, #28]
    9e4a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9e4e:	4589      	cmp	r9, r1
    9e50:	f040 80ea 	bne.w	a028 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9e54:	8ba1      	ldrh	r1, [r4, #28]
    9e56:	06ca      	lsls	r2, r1, #27
    9e58:	f140 814f 	bpl.w	a0fa <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9e5c:	f021 0310 	bic.w	r3, r1, #16
    9e60:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    9e62:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    9e66:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9e6a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    9e6c:	f1b8 0f00 	cmp.w	r8, #0
    9e70:	dab9      	bge.n	9de6 <process_event+0x62>
	list->head = NULL;
    9e72:	2200      	movs	r2, #0
		*clients = mgr->clients;
    9e74:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9e76:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    9e7a:	e9c4 2200 	strd	r2, r2, [r4]
    9e7e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9e82:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9e84:	8ba3      	ldrh	r3, [r4, #28]
    9e86:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9e8a:	4589      	cmp	r9, r1
    9e8c:	f040 80cd 	bne.w	a02a <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    9e90:	2f00      	cmp	r7, #0
    9e92:	d0df      	beq.n	9e54 <process_event+0xd0>
    9e94:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9e96:	46b2      	mov	sl, r6
    9e98:	e044      	b.n	9f24 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    9e9a:	496a      	ldr	r1, [pc, #424]	; (a044 <process_event+0x2c0>)
    9e9c:	f240 131b 	movw	r3, #283	; 0x11b
    9ea0:	4a69      	ldr	r2, [pc, #420]	; (a048 <process_event+0x2c4>)
    9ea2:	4867      	ldr	r0, [pc, #412]	; (a040 <process_event+0x2bc>)
    9ea4:	f012 fe21 	bl	1caea <assert_print>
    9ea8:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    9eac:	4866      	ldr	r0, [pc, #408]	; (a048 <process_event+0x2c4>)
    9eae:	f012 fe15 	bl	1cadc <assert_post_action>
    9eb2:	b149      	cbz	r1, 9ec8 <process_event+0x144>
    9eb4:	4965      	ldr	r1, [pc, #404]	; (a04c <process_event+0x2c8>)
    9eb6:	f44f 73ab 	mov.w	r3, #342	; 0x156
    9eba:	4a63      	ldr	r2, [pc, #396]	; (a048 <process_event+0x2c4>)
    9ebc:	4860      	ldr	r0, [pc, #384]	; (a040 <process_event+0x2bc>)
    9ebe:	f012 fe14 	bl	1caea <assert_print>
    9ec2:	f44f 71ab 	mov.w	r1, #342	; 0x156
    9ec6:	e7f1      	b.n	9eac <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9ec8:	6823      	ldr	r3, [r4, #0]
    9eca:	b94b      	cbnz	r3, 9ee0 <process_event+0x15c>
    9ecc:	4960      	ldr	r1, [pc, #384]	; (a050 <process_event+0x2cc>)
    9ece:	f240 1357 	movw	r3, #343	; 0x157
    9ed2:	4a5d      	ldr	r2, [pc, #372]	; (a048 <process_event+0x2c4>)
    9ed4:	485a      	ldr	r0, [pc, #360]	; (a040 <process_event+0x2bc>)
    9ed6:	f012 fe08 	bl	1caea <assert_print>
    9eda:	f240 1157 	movw	r1, #343	; 0x157
    9ede:	e7e5      	b.n	9eac <process_event+0x128>
			transit = mgr->transitions->start;
    9ee0:	6923      	ldr	r3, [r4, #16]
    9ee2:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    9ee4:	b94e      	cbnz	r6, 9efa <process_event+0x176>
    9ee6:	495b      	ldr	r1, [pc, #364]	; (a054 <process_event+0x2d0>)
    9ee8:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    9eec:	4a56      	ldr	r2, [pc, #344]	; (a048 <process_event+0x2c4>)
    9eee:	4854      	ldr	r0, [pc, #336]	; (a040 <process_event+0x2bc>)
    9ef0:	f012 fdfb 	bl	1caea <assert_print>
    9ef4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    9ef8:	e7d8      	b.n	9eac <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    9efa:	460f      	mov	r7, r1
		res = 0;
    9efc:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9efe:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f02:	8ba3      	ldrh	r3, [r4, #28]
    9f04:	f023 0307 	bic.w	r3, r3, #7
    9f08:	f043 0306 	orr.w	r3, r3, #6
    9f0c:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    9f0e:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    9f10:	68a2      	ldr	r2, [r4, #8]
    9f12:	2a00      	cmp	r2, #0
    9f14:	f040 808b 	bne.w	a02e <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    9f18:	2f00      	cmp	r7, #0
    9f1a:	f040 808b 	bne.w	a034 <process_event+0x2b0>
		    || (transit != NULL)) {
    9f1e:	2e00      	cmp	r6, #0
    9f20:	d098      	beq.n	9e54 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f22:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9f24:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    9f28:	f104 0b14 	add.w	fp, r4, #20
    9f2c:	4658      	mov	r0, fp
			mgr->flags = flags;
    9f2e:	83a3      	strh	r3, [r4, #28]
    9f30:	f00f f802 	bl	18f38 <z_spin_unlock_valid>
    9f34:	2800      	cmp	r0, #0
    9f36:	f040 8097 	bne.w	a068 <process_event+0x2e4>
    9f3a:	493f      	ldr	r1, [pc, #252]	; (a038 <process_event+0x2b4>)
    9f3c:	23c2      	movs	r3, #194	; 0xc2
    9f3e:	4a3f      	ldr	r2, [pc, #252]	; (a03c <process_event+0x2b8>)
    9f40:	483f      	ldr	r0, [pc, #252]	; (a040 <process_event+0x2bc>)
    9f42:	f012 fdd2 	bl	1caea <assert_print>
    9f46:	4659      	mov	r1, fp
    9f48:	4843      	ldr	r0, [pc, #268]	; (a058 <process_event+0x2d4>)
    9f4a:	f012 fdce 	bl	1caea <assert_print>
    9f4e:	21c2      	movs	r1, #194	; 0xc2
    9f50:	e0ae      	b.n	a0b0 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    9f52:	2902      	cmp	r1, #2
    9f54:	d009      	beq.n	9f6a <process_event+0x1e6>
    9f56:	4941      	ldr	r1, [pc, #260]	; (a05c <process_event+0x2d8>)
    9f58:	f240 135d 	movw	r3, #349	; 0x15d
    9f5c:	4a3a      	ldr	r2, [pc, #232]	; (a048 <process_event+0x2c4>)
    9f5e:	4838      	ldr	r0, [pc, #224]	; (a040 <process_event+0x2bc>)
    9f60:	f012 fdc3 	bl	1caea <assert_print>
    9f64:	f240 115d 	movw	r1, #349	; 0x15d
    9f68:	e7a0      	b.n	9eac <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    9f6a:	8be7      	ldrh	r7, [r4, #30]
    9f6c:	b14f      	cbz	r7, 9f82 <process_event+0x1fe>
    9f6e:	493c      	ldr	r1, [pc, #240]	; (a060 <process_event+0x2dc>)
    9f70:	f44f 73af 	mov.w	r3, #350	; 0x15e
    9f74:	4a34      	ldr	r2, [pc, #208]	; (a048 <process_event+0x2c4>)
    9f76:	4832      	ldr	r0, [pc, #200]	; (a040 <process_event+0x2bc>)
    9f78:	f012 fdb7 	bl	1caea <assert_print>
    9f7c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    9f80:	e794      	b.n	9eac <process_event+0x128>
			transit = mgr->transitions->stop;
    9f82:	6923      	ldr	r3, [r4, #16]
    9f84:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    9f86:	b94e      	cbnz	r6, 9f9c <process_event+0x218>
    9f88:	4932      	ldr	r1, [pc, #200]	; (a054 <process_event+0x2d0>)
    9f8a:	f240 1361 	movw	r3, #353	; 0x161
    9f8e:	4a2e      	ldr	r2, [pc, #184]	; (a048 <process_event+0x2c4>)
    9f90:	482b      	ldr	r0, [pc, #172]	; (a040 <process_event+0x2bc>)
    9f92:	f012 fdaa 	bl	1caea <assert_print>
    9f96:	f240 1161 	movw	r1, #353	; 0x161
    9f9a:	e787      	b.n	9eac <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f9c:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    9f9e:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9fa0:	f023 0307 	bic.w	r3, r3, #7
    9fa4:	f043 0304 	orr.w	r3, r3, #4
    9fa8:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9faa:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9fae:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9fb0:	e7ae      	b.n	9f10 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    9fb2:	2901      	cmp	r1, #1
    9fb4:	d009      	beq.n	9fca <process_event+0x246>
    9fb6:	492b      	ldr	r1, [pc, #172]	; (a064 <process_event+0x2e0>)
    9fb8:	f44f 73b2 	mov.w	r3, #356	; 0x164
    9fbc:	4a22      	ldr	r2, [pc, #136]	; (a048 <process_event+0x2c4>)
    9fbe:	4820      	ldr	r0, [pc, #128]	; (a040 <process_event+0x2bc>)
    9fc0:	f012 fd93 	bl	1caea <assert_print>
    9fc4:	f44f 71b2 	mov.w	r1, #356	; 0x164
    9fc8:	e770      	b.n	9eac <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9fca:	6823      	ldr	r3, [r4, #0]
    9fcc:	b94b      	cbnz	r3, 9fe2 <process_event+0x25e>
    9fce:	4920      	ldr	r1, [pc, #128]	; (a050 <process_event+0x2cc>)
    9fd0:	f240 1365 	movw	r3, #357	; 0x165
    9fd4:	4a1c      	ldr	r2, [pc, #112]	; (a048 <process_event+0x2c4>)
    9fd6:	481a      	ldr	r0, [pc, #104]	; (a040 <process_event+0x2bc>)
    9fd8:	f012 fd87 	bl	1caea <assert_print>
    9fdc:	f240 1165 	movw	r1, #357	; 0x165
    9fe0:	e764      	b.n	9eac <process_event+0x128>
			transit = mgr->transitions->reset;
    9fe2:	6923      	ldr	r3, [r4, #16]
    9fe4:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    9fe6:	b94e      	cbnz	r6, 9ffc <process_event+0x278>
    9fe8:	491a      	ldr	r1, [pc, #104]	; (a054 <process_event+0x2d0>)
    9fea:	f44f 73b4 	mov.w	r3, #360	; 0x168
    9fee:	4a16      	ldr	r2, [pc, #88]	; (a048 <process_event+0x2c4>)
    9ff0:	4813      	ldr	r0, [pc, #76]	; (a040 <process_event+0x2bc>)
    9ff2:	f012 fd7a 	bl	1caea <assert_print>
    9ff6:	f44f 71b4 	mov.w	r1, #360	; 0x168
    9ffa:	e757      	b.n	9eac <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    9ffc:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ffe:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    a000:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a002:	f023 0307 	bic.w	r3, r3, #7
    a006:	f043 0305 	orr.w	r3, r3, #5
    a00a:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a00c:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    a010:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a012:	e77d      	b.n	9f10 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    a014:	490b      	ldr	r1, [pc, #44]	; (a044 <process_event+0x2c0>)
    a016:	f240 136b 	movw	r3, #363	; 0x16b
    a01a:	4a0b      	ldr	r2, [pc, #44]	; (a048 <process_event+0x2c4>)
    a01c:	4808      	ldr	r0, [pc, #32]	; (a040 <process_event+0x2bc>)
    a01e:	f012 fd64 	bl	1caea <assert_print>
    a022:	f240 116b 	movw	r1, #363	; 0x16b
    a026:	e741      	b.n	9eac <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    a028:	2700      	movs	r7, #0
    a02a:	2600      	movs	r6, #0
    a02c:	e770      	b.n	9f10 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a02e:	f04f 0a01 	mov.w	sl, #1
    a032:	e777      	b.n	9f24 <process_event+0x1a0>
    a034:	4692      	mov	sl, r2
    a036:	e775      	b.n	9f24 <process_event+0x1a0>
    a038:	000219a8 	.word	0x000219a8
    a03c:	0002197b 	.word	0x0002197b
    a040:	00021547 	.word	0x00021547
    a044:	00024673 	.word	0x00024673
    a048:	000218d8 	.word	0x000218d8
    a04c:	000218fa 	.word	0x000218fa
    a050:	00021906 	.word	0x00021906
    a054:	00021929 	.word	0x00021929
    a058:	000219bf 	.word	0x000219bf
    a05c:	00021940 	.word	0x00021940
    a060:	00021956 	.word	0x00021956
    a064:	00021965 	.word	0x00021965
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a068:	f385 8811 	msr	BASEPRI, r5
    a06c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a070:	f1ba 0f00 	cmp.w	sl, #0
    a074:	d11e      	bne.n	a0b4 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    a076:	2f00      	cmp	r7, #0
    a078:	d12f      	bne.n	a0da <process_event+0x356>
			if (transit != NULL) {
    a07a:	b116      	cbz	r6, a082 <process_event+0x2fe>
				transit(mgr, transition_complete);
    a07c:	4620      	mov	r0, r4
    a07e:	4926      	ldr	r1, [pc, #152]	; (a118 <process_event+0x394>)
    a080:	47b0      	blx	r6
	__asm__ volatile(
    a082:	f04f 0320 	mov.w	r3, #32
    a086:	f3ef 8511 	mrs	r5, BASEPRI
    a08a:	f383 8812 	msr	BASEPRI_MAX, r3
    a08e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a092:	4658      	mov	r0, fp
    a094:	f00e ff42 	bl	18f1c <z_spin_lock_valid>
    a098:	bb38      	cbnz	r0, a0ea <process_event+0x366>
    a09a:	2394      	movs	r3, #148	; 0x94
    a09c:	4a1f      	ldr	r2, [pc, #124]	; (a11c <process_event+0x398>)
    a09e:	4920      	ldr	r1, [pc, #128]	; (a120 <process_event+0x39c>)
    a0a0:	4820      	ldr	r0, [pc, #128]	; (a124 <process_event+0x3a0>)
    a0a2:	f012 fd22 	bl	1caea <assert_print>
    a0a6:	4659      	mov	r1, fp
    a0a8:	481f      	ldr	r0, [pc, #124]	; (a128 <process_event+0x3a4>)
    a0aa:	f012 fd1e 	bl	1caea <assert_print>
    a0ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a0b0:	481a      	ldr	r0, [pc, #104]	; (a11c <process_event+0x398>)
    a0b2:	e6fc      	b.n	9eae <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a0b4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a0b6:	2900      	cmp	r1, #0
    a0b8:	d0dd      	beq.n	a076 <process_event+0x2f2>
	return node->next;
    a0ba:	680d      	ldr	r5, [r1, #0]
    a0bc:	2900      	cmp	r1, #0
    a0be:	d0da      	beq.n	a076 <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    a0c0:	4643      	mov	r3, r8
    a0c2:	464a      	mov	r2, r9
    a0c4:	4620      	mov	r0, r4
    a0c6:	f8d1 a004 	ldr.w	sl, [r1, #4]
    a0ca:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a0cc:	b11d      	cbz	r5, a0d6 <process_event+0x352>
    a0ce:	682b      	ldr	r3, [r5, #0]
    a0d0:	4629      	mov	r1, r5
    a0d2:	461d      	mov	r5, r3
    a0d4:	e7f2      	b.n	a0bc <process_event+0x338>
    a0d6:	462b      	mov	r3, r5
    a0d8:	e7fa      	b.n	a0d0 <process_event+0x34c>
    a0da:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    a0dc:	4643      	mov	r3, r8
    a0de:	464a      	mov	r2, r9
    a0e0:	4620      	mov	r0, r4
    a0e2:	683f      	ldr	r7, [r7, #0]
    a0e4:	f012 fc60 	bl	1c9a8 <notify_one>
    a0e8:	e7c5      	b.n	a076 <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    a0ea:	4658      	mov	r0, fp
    a0ec:	f00e ff32 	bl	18f54 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a0f0:	8ba3      	ldrh	r3, [r4, #28]
    a0f2:	f023 0308 	bic.w	r3, r3, #8
    a0f6:	83a3      	strh	r3, [r4, #28]
    a0f8:	e6ac      	b.n	9e54 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a0fa:	068b      	lsls	r3, r1, #26
    a0fc:	f57f ae64 	bpl.w	9dc8 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a100:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a104:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a106:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    a10a:	e647      	b.n	9d9c <process_event+0x18>
	__asm__ volatile(
    a10c:	f385 8811 	msr	BASEPRI, r5
    a110:	f3bf 8f6f 	isb	sy
}
    a114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a118:	0000a12d 	.word	0x0000a12d
    a11c:	0002197b 	.word	0x0002197b
    a120:	000219d4 	.word	0x000219d4
    a124:	00021547 	.word	0x00021547
    a128:	000219e9 	.word	0x000219e9

0000a12c <transition_complete>:
{
    a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a12e:	4604      	mov	r4, r0
    a130:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a132:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    a136:	f04f 0320 	mov.w	r3, #32
    a13a:	f3ef 8711 	mrs	r7, BASEPRI
    a13e:	f383 8812 	msr	BASEPRI_MAX, r3
    a142:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a146:	4630      	mov	r0, r6
    a148:	f00e fee8 	bl	18f1c <z_spin_lock_valid>
    a14c:	b968      	cbnz	r0, a16a <transition_complete+0x3e>
    a14e:	2394      	movs	r3, #148	; 0x94
    a150:	4a0b      	ldr	r2, [pc, #44]	; (a180 <transition_complete+0x54>)
    a152:	490c      	ldr	r1, [pc, #48]	; (a184 <transition_complete+0x58>)
    a154:	480c      	ldr	r0, [pc, #48]	; (a188 <transition_complete+0x5c>)
    a156:	f012 fcc8 	bl	1caea <assert_print>
    a15a:	4631      	mov	r1, r6
    a15c:	480b      	ldr	r0, [pc, #44]	; (a18c <transition_complete+0x60>)
    a15e:	f012 fcc4 	bl	1caea <assert_print>
    a162:	2194      	movs	r1, #148	; 0x94
    a164:	4806      	ldr	r0, [pc, #24]	; (a180 <transition_complete+0x54>)
    a166:	f012 fcb9 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
    a16a:	4630      	mov	r0, r6
    a16c:	f00e fef2 	bl	18f54 <z_spin_lock_set_owner>
	mgr->last_res = res;
    a170:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a172:	463a      	mov	r2, r7
    a174:	4620      	mov	r0, r4
}
    a176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a17a:	2101      	movs	r1, #1
    a17c:	f7ff be02 	b.w	9d84 <process_event>
    a180:	0002197b 	.word	0x0002197b
    a184:	000219d4 	.word	0x000219d4
    a188:	00021547 	.word	0x00021547
    a18c:	000219e9 	.word	0x000219e9

0000a190 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a194:	4604      	mov	r4, r0
    a196:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a198:	f012 fbf6 	bl	1c988 <validate_args>

	if (rv < 0) {
    a19c:	1e05      	subs	r5, r0, #0
    a19e:	db67      	blt.n	a270 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a1a0:	f104 0914 	add.w	r9, r4, #20
    a1a4:	f04f 0320 	mov.w	r3, #32
    a1a8:	f3ef 8a11 	mrs	sl, BASEPRI
    a1ac:	f383 8812 	msr	BASEPRI_MAX, r3
    a1b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a1b4:	4648      	mov	r0, r9
    a1b6:	f00e feb1 	bl	18f1c <z_spin_lock_valid>
    a1ba:	4680      	mov	r8, r0
    a1bc:	b960      	cbnz	r0, a1d8 <onoff_request+0x48>
    a1be:	2394      	movs	r3, #148	; 0x94
    a1c0:	4a37      	ldr	r2, [pc, #220]	; (a2a0 <onoff_request+0x110>)
    a1c2:	4938      	ldr	r1, [pc, #224]	; (a2a4 <onoff_request+0x114>)
    a1c4:	4838      	ldr	r0, [pc, #224]	; (a2a8 <onoff_request+0x118>)
    a1c6:	f012 fc90 	bl	1caea <assert_print>
    a1ca:	4649      	mov	r1, r9
    a1cc:	4837      	ldr	r0, [pc, #220]	; (a2ac <onoff_request+0x11c>)
    a1ce:	f012 fc8c 	bl	1caea <assert_print>
    a1d2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1d4:	4832      	ldr	r0, [pc, #200]	; (a2a0 <onoff_request+0x110>)
    a1d6:	e040      	b.n	a25a <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    a1d8:	4648      	mov	r0, r9
    a1da:	f00e febb 	bl	18f54 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a1de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a1e2:	8be3      	ldrh	r3, [r4, #30]
    a1e4:	8ba6      	ldrh	r6, [r4, #28]
    a1e6:	4293      	cmp	r3, r2
    a1e8:	f006 0607 	and.w	r6, r6, #7
    a1ec:	d043      	beq.n	a276 <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a1ee:	2e02      	cmp	r6, #2
    a1f0:	d113      	bne.n	a21a <onoff_request+0x8a>
	rv = state;
    a1f2:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    a1f4:	3301      	adds	r3, #1
    a1f6:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1f8:	4648      	mov	r0, r9
    a1fa:	f00e fe9d 	bl	18f38 <z_spin_unlock_valid>
    a1fe:	2800      	cmp	r0, #0
    a200:	d13f      	bne.n	a282 <onoff_request+0xf2>
    a202:	23c2      	movs	r3, #194	; 0xc2
    a204:	4a26      	ldr	r2, [pc, #152]	; (a2a0 <onoff_request+0x110>)
    a206:	492a      	ldr	r1, [pc, #168]	; (a2b0 <onoff_request+0x120>)
    a208:	4827      	ldr	r0, [pc, #156]	; (a2a8 <onoff_request+0x118>)
    a20a:	f012 fc6e 	bl	1caea <assert_print>
    a20e:	4649      	mov	r1, r9
    a210:	4828      	ldr	r0, [pc, #160]	; (a2b4 <onoff_request+0x124>)
    a212:	f012 fc6a 	bl	1caea <assert_print>
    a216:	21c2      	movs	r1, #194	; 0xc2
    a218:	e7dc      	b.n	a1d4 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    a21a:	2e06      	cmp	r6, #6
    a21c:	d813      	bhi.n	a246 <onoff_request+0xb6>
    a21e:	e8df f006 	tbb	[pc, r6]
    a222:	2d09      	.short	0x2d09
    a224:	04091212 	.word	0x04091212
    a228:	09          	.byte	0x09
    a229:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    a22a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    a22e:	f04f 0800 	mov.w	r8, #0
    a232:	e7e1      	b.n	a1f8 <onoff_request+0x68>
	parent->next = child;
    a234:	2300      	movs	r3, #0
    a236:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a238:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a23a:	b983      	cbnz	r3, a25e <onoff_request+0xce>
	list->head = node;
    a23c:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    a240:	b186      	cbz	r6, a264 <onoff_request+0xd4>
	rv = state;
    a242:	4635      	mov	r5, r6
    a244:	e7f3      	b.n	a22e <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a246:	491c      	ldr	r1, [pc, #112]	; (a2b8 <onoff_request+0x128>)
    a248:	4817      	ldr	r0, [pc, #92]	; (a2a8 <onoff_request+0x118>)
    a24a:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    a24e:	4a1b      	ldr	r2, [pc, #108]	; (a2bc <onoff_request+0x12c>)
    a250:	f012 fc4b 	bl	1caea <assert_print>
    a254:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a258:	4818      	ldr	r0, [pc, #96]	; (a2bc <onoff_request+0x12c>)
    a25a:	f012 fc3f 	bl	1cadc <assert_post_action>
	parent->next = child;
    a25e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a260:	6067      	str	r7, [r4, #4]
}
    a262:	e7ed      	b.n	a240 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    a264:	4652      	mov	r2, sl
    a266:	2102      	movs	r1, #2
    a268:	4620      	mov	r0, r4
    a26a:	f7ff fd8b 	bl	9d84 <process_event>
    a26e:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    a270:	4628      	mov	r0, r5
    a272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    a276:	f06f 050a 	mvn.w	r5, #10
    a27a:	e7d8      	b.n	a22e <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    a27c:	f06f 0504 	mvn.w	r5, #4
    a280:	e7d5      	b.n	a22e <onoff_request+0x9e>
	__asm__ volatile(
    a282:	f38a 8811 	msr	BASEPRI, sl
    a286:	f3bf 8f6f 	isb	sy
		if (notify) {
    a28a:	f1b8 0f00 	cmp.w	r8, #0
    a28e:	d0ef      	beq.n	a270 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    a290:	2300      	movs	r3, #0
    a292:	4632      	mov	r2, r6
    a294:	4639      	mov	r1, r7
    a296:	4620      	mov	r0, r4
    a298:	f012 fb86 	bl	1c9a8 <notify_one>
    a29c:	e7e8      	b.n	a270 <onoff_request+0xe0>
    a29e:	bf00      	nop
    a2a0:	0002197b 	.word	0x0002197b
    a2a4:	000219d4 	.word	0x000219d4
    a2a8:	00021547 	.word	0x00021547
    a2ac:	000219e9 	.word	0x000219e9
    a2b0:	000219a8 	.word	0x000219a8
    a2b4:	000219bf 	.word	0x000219bf
    a2b8:	00021965 	.word	0x00021965
    a2bc:	000218d8 	.word	0x000218d8

0000a2c0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a2c0:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a2c2:	6842      	ldr	r2, [r0, #4]
    a2c4:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    a2c6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a2ca:	2a02      	cmp	r2, #2
	notify->result = res;
    a2cc:	6081      	str	r1, [r0, #8]
	switch (method) {
    a2ce:	d00a      	beq.n	a2e6 <sys_notify_finalize+0x26>
    a2d0:	2a03      	cmp	r2, #3
    a2d2:	f04f 0100 	mov.w	r1, #0
    a2d6:	d003      	beq.n	a2e0 <sys_notify_finalize+0x20>
    a2d8:	2a01      	cmp	r2, #1
    a2da:	d10a      	bne.n	a2f2 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a2dc:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a2de:	e006      	b.n	a2ee <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    a2e0:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a2e2:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a2e4:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    a2e6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a2e8:	2200      	movs	r2, #0
    a2ea:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a2ec:	b958      	cbnz	r0, a306 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    a2ee:	2000      	movs	r0, #0
    a2f0:	e7f8      	b.n	a2e4 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a2f2:	4906      	ldr	r1, [pc, #24]	; (a30c <sys_notify_finalize+0x4c>)
    a2f4:	4806      	ldr	r0, [pc, #24]	; (a310 <sys_notify_finalize+0x50>)
    a2f6:	2345      	movs	r3, #69	; 0x45
    a2f8:	4a06      	ldr	r2, [pc, #24]	; (a314 <sys_notify_finalize+0x54>)
    a2fa:	f012 fbf6 	bl	1caea <assert_print>
    a2fe:	2145      	movs	r1, #69	; 0x45
    a300:	4804      	ldr	r0, [pc, #16]	; (a314 <sys_notify_finalize+0x54>)
    a302:	f012 fbeb 	bl	1cadc <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    a306:	f012 f86d 	bl	1c3e4 <z_impl_k_poll_signal_raise>
    a30a:	e7f0      	b.n	a2ee <sys_notify_finalize+0x2e>
    a30c:	00024673 	.word	0x00024673
    a310:	00021547 	.word	0x00021547
    a314:	00021a01 	.word	0x00021a01

0000a318 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a31c:	4681      	mov	r9, r0
    a31e:	468b      	mov	fp, r1
    a320:	4617      	mov	r7, r2
    a322:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a324:	2500      	movs	r5, #0
{
    a326:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a328:	7838      	ldrb	r0, [r7, #0]
    a32a:	b908      	cbnz	r0, a330 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a32c:	4628      	mov	r0, r5
    a32e:	e357      	b.n	a9e0 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    a330:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    a332:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a334:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    a336:	d006      	beq.n	a346 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    a338:	4659      	mov	r1, fp
    a33a:	47c8      	blx	r9
    a33c:	2800      	cmp	r0, #0
    a33e:	f2c0 834f 	blt.w	a9e0 <z_cbvprintf_impl+0x6c8>
    a342:	3501      	adds	r5, #1
		if (bps == NULL) {
    a344:	e1fb      	b.n	a73e <z_cbvprintf_impl+0x426>
		} state = {
    a346:	2218      	movs	r2, #24
    a348:	2100      	movs	r1, #0
    a34a:	a80e      	add	r0, sp, #56	; 0x38
    a34c:	f013 fbe7 	bl	1db1e <memset>
	if (*sp == '%') {
    a350:	787b      	ldrb	r3, [r7, #1]
    a352:	2b25      	cmp	r3, #37	; 0x25
    a354:	d07d      	beq.n	a452 <z_cbvprintf_impl+0x13a>
    a356:	2300      	movs	r3, #0
    a358:	4698      	mov	r8, r3
    a35a:	469e      	mov	lr, r3
    a35c:	469c      	mov	ip, r3
    a35e:	461e      	mov	r6, r3
    a360:	1c78      	adds	r0, r7, #1
    a362:	4601      	mov	r1, r0
		switch (*sp) {
    a364:	f810 2b01 	ldrb.w	r2, [r0], #1
    a368:	2a2b      	cmp	r2, #43	; 0x2b
    a36a:	f000 80a1 	beq.w	a4b0 <z_cbvprintf_impl+0x198>
    a36e:	f200 8098 	bhi.w	a4a2 <z_cbvprintf_impl+0x18a>
    a372:	2a20      	cmp	r2, #32
    a374:	f000 809f 	beq.w	a4b6 <z_cbvprintf_impl+0x19e>
    a378:	2a23      	cmp	r2, #35	; 0x23
    a37a:	f000 809f 	beq.w	a4bc <z_cbvprintf_impl+0x1a4>
    a37e:	b12b      	cbz	r3, a38c <z_cbvprintf_impl+0x74>
    a380:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a388:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a38c:	f1b8 0f00 	cmp.w	r8, #0
    a390:	d005      	beq.n	a39e <z_cbvprintf_impl+0x86>
    a392:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a396:	f043 0320 	orr.w	r3, r3, #32
    a39a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a39e:	f1be 0f00 	cmp.w	lr, #0
    a3a2:	d005      	beq.n	a3b0 <z_cbvprintf_impl+0x98>
    a3a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a3a8:	f043 0310 	orr.w	r3, r3, #16
    a3ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a3b0:	f1bc 0f00 	cmp.w	ip, #0
    a3b4:	d005      	beq.n	a3c2 <z_cbvprintf_impl+0xaa>
    a3b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a3ba:	f043 0308 	orr.w	r3, r3, #8
    a3be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a3c2:	b12e      	cbz	r6, a3d0 <z_cbvprintf_impl+0xb8>
    a3c4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a3c8:	f043 0304 	orr.w	r3, r3, #4
    a3cc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    a3d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a3d4:	f003 0044 	and.w	r0, r3, #68	; 0x44
    a3d8:	2844      	cmp	r0, #68	; 0x44
    a3da:	d103      	bne.n	a3e4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    a3dc:	f36f 1386 	bfc	r3, #6, #1
    a3e0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    a3e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a3e8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    a3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a3ee:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a3f2:	d17f      	bne.n	a4f4 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    a3f4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    a3f8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a3fa:	f042 0201 	orr.w	r2, r2, #1
    a3fe:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    a402:	781a      	ldrb	r2, [r3, #0]
    a404:	2a2e      	cmp	r2, #46	; 0x2e
    a406:	bf0c      	ite	eq
    a408:	2101      	moveq	r1, #1
    a40a:	2100      	movne	r1, #0
    a40c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a410:	f361 0241 	bfi	r2, r1, #1, #1
    a414:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    a418:	d178      	bne.n	a50c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    a41a:	785a      	ldrb	r2, [r3, #1]
    a41c:	2a2a      	cmp	r2, #42	; 0x2a
    a41e:	d06e      	beq.n	a4fe <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    a420:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a422:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    a426:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a428:	4619      	mov	r1, r3
    a42a:	f811 0b01 	ldrb.w	r0, [r1], #1
    a42e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a432:	2e09      	cmp	r6, #9
    a434:	f240 8095 	bls.w	a562 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    a438:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    a43c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    a43e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    a442:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    a446:	460a      	mov	r2, r1
    a448:	f360 0241 	bfi	r2, r0, #1, #1
    a44c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    a450:	e05c      	b.n	a50c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    a452:	1cba      	adds	r2, r7, #2
    a454:	9203      	str	r2, [sp, #12]
    a456:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    a45a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    a45e:	07da      	lsls	r2, r3, #31
    a460:	f140 812e 	bpl.w	a6c0 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    a464:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    a468:	f1b8 0f00 	cmp.w	r8, #0
    a46c:	da07      	bge.n	a47e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    a46e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    a472:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    a476:	f042 0204 	orr.w	r2, r2, #4
    a47a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    a47e:	075e      	lsls	r6, r3, #29
    a480:	f140 8127 	bpl.w	a6d2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    a484:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    a488:	f1ba 0f00 	cmp.w	sl, #0
    a48c:	f280 8126 	bge.w	a6dc <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    a490:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    a494:	f36f 0341 	bfc	r3, #1, #1
    a498:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    a49c:	f04f 3aff 	mov.w	sl, #4294967295
    a4a0:	e11c      	b.n	a6dc <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    a4a2:	2a2d      	cmp	r2, #45	; 0x2d
    a4a4:	d00d      	beq.n	a4c2 <z_cbvprintf_impl+0x1aa>
    a4a6:	2a30      	cmp	r2, #48	; 0x30
    a4a8:	f47f af69 	bne.w	a37e <z_cbvprintf_impl+0x66>
    a4ac:	2301      	movs	r3, #1
	} while (loop);
    a4ae:	e758      	b.n	a362 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    a4b0:	f04f 0c01 	mov.w	ip, #1
    a4b4:	e755      	b.n	a362 <z_cbvprintf_impl+0x4a>
    a4b6:	f04f 0e01 	mov.w	lr, #1
    a4ba:	e752      	b.n	a362 <z_cbvprintf_impl+0x4a>
    a4bc:	f04f 0801 	mov.w	r8, #1
    a4c0:	e74f      	b.n	a362 <z_cbvprintf_impl+0x4a>
    a4c2:	2601      	movs	r6, #1
    a4c4:	e74d      	b.n	a362 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    a4c6:	4603      	mov	r3, r0
    a4c8:	fb0e 6202 	mla	r2, lr, r2, r6
    a4cc:	3a30      	subs	r2, #48	; 0x30
    a4ce:	4618      	mov	r0, r3
    a4d0:	f810 6b01 	ldrb.w	r6, [r0], #1
    a4d4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a4d8:	f1bc 0f09 	cmp.w	ip, #9
    a4dc:	d9f3      	bls.n	a4c6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    a4de:	4299      	cmp	r1, r3
    a4e0:	d08f      	beq.n	a402 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a4e2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    a4e6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    a4e8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a4ea:	f362 0141 	bfi	r1, r2, #1, #1
    a4ee:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    a4f2:	e786      	b.n	a402 <z_cbvprintf_impl+0xea>
    a4f4:	460b      	mov	r3, r1
	size_t val = 0;
    a4f6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a4f8:	f04f 0e0a 	mov.w	lr, #10
    a4fc:	e7e7      	b.n	a4ce <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    a4fe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    a502:	3302      	adds	r3, #2
		conv->prec_star = true;
    a504:	f042 0204 	orr.w	r2, r2, #4
    a508:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    a50c:	781a      	ldrb	r2, [r3, #0]
    a50e:	2a6c      	cmp	r2, #108	; 0x6c
    a510:	d047      	beq.n	a5a2 <z_cbvprintf_impl+0x28a>
    a512:	d82b      	bhi.n	a56c <z_cbvprintf_impl+0x254>
    a514:	2a68      	cmp	r2, #104	; 0x68
    a516:	d031      	beq.n	a57c <z_cbvprintf_impl+0x264>
    a518:	2a6a      	cmp	r2, #106	; 0x6a
    a51a:	d04b      	beq.n	a5b4 <z_cbvprintf_impl+0x29c>
    a51c:	2a4c      	cmp	r2, #76	; 0x4c
    a51e:	d051      	beq.n	a5c4 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    a520:	461a      	mov	r2, r3
    a522:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    a526:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    a528:	9203      	str	r2, [sp, #12]
    a52a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    a52e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    a532:	f200 80be 	bhi.w	a6b2 <z_cbvprintf_impl+0x39a>
    a536:	2b6d      	cmp	r3, #109	; 0x6d
    a538:	d851      	bhi.n	a5de <z_cbvprintf_impl+0x2c6>
    a53a:	2b69      	cmp	r3, #105	; 0x69
    a53c:	f200 80b9 	bhi.w	a6b2 <z_cbvprintf_impl+0x39a>
    a540:	2b57      	cmp	r3, #87	; 0x57
    a542:	d867      	bhi.n	a614 <z_cbvprintf_impl+0x2fc>
    a544:	2b41      	cmp	r3, #65	; 0x41
    a546:	d003      	beq.n	a550 <z_cbvprintf_impl+0x238>
    a548:	3b45      	subs	r3, #69	; 0x45
    a54a:	2b02      	cmp	r3, #2
    a54c:	f200 80b1 	bhi.w	a6b2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    a550:	2204      	movs	r2, #4
    a552:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a556:	f362 0302 	bfi	r3, r2, #0, #3
    a55a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    a55e:	2301      	movs	r3, #1
			break;
    a560:	e073      	b.n	a64a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    a562:	fb0c 0202 	mla	r2, ip, r2, r0
    a566:	460b      	mov	r3, r1
    a568:	3a30      	subs	r2, #48	; 0x30
    a56a:	e75d      	b.n	a428 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    a56c:	2a74      	cmp	r2, #116	; 0x74
    a56e:	d025      	beq.n	a5bc <z_cbvprintf_impl+0x2a4>
    a570:	2a7a      	cmp	r2, #122	; 0x7a
    a572:	d1d5      	bne.n	a520 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    a574:	2106      	movs	r1, #6
    a576:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a57a:	e00c      	b.n	a596 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    a57c:	785a      	ldrb	r2, [r3, #1]
    a57e:	2a68      	cmp	r2, #104	; 0x68
    a580:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a584:	d106      	bne.n	a594 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    a586:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    a588:	f361 02c6 	bfi	r2, r1, #3, #4
    a58c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    a590:	3302      	adds	r3, #2
    a592:	e7c5      	b.n	a520 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    a594:	2102      	movs	r1, #2
    a596:	f361 02c6 	bfi	r2, r1, #3, #4
    a59a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    a59e:	3301      	adds	r3, #1
    a5a0:	e7be      	b.n	a520 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    a5a2:	785a      	ldrb	r2, [r3, #1]
    a5a4:	2a6c      	cmp	r2, #108	; 0x6c
    a5a6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a5aa:	d101      	bne.n	a5b0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    a5ac:	2104      	movs	r1, #4
    a5ae:	e7eb      	b.n	a588 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    a5b0:	2103      	movs	r1, #3
    a5b2:	e7f0      	b.n	a596 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    a5b4:	2105      	movs	r1, #5
    a5b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a5ba:	e7ec      	b.n	a596 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    a5bc:	2107      	movs	r1, #7
    a5be:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a5c2:	e7e8      	b.n	a596 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    a5c4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    a5c8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    a5cc:	f022 0202 	bic.w	r2, r2, #2
    a5d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    a5d4:	f042 0202 	orr.w	r2, r2, #2
    a5d8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    a5dc:	e7df      	b.n	a59e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    a5de:	3b6e      	subs	r3, #110	; 0x6e
    a5e0:	b2d9      	uxtb	r1, r3
    a5e2:	2301      	movs	r3, #1
    a5e4:	408b      	lsls	r3, r1
    a5e6:	f240 4182 	movw	r1, #1154	; 0x482
    a5ea:	420b      	tst	r3, r1
    a5ec:	d137      	bne.n	a65e <z_cbvprintf_impl+0x346>
    a5ee:	f013 0f24 	tst.w	r3, #36	; 0x24
    a5f2:	d151      	bne.n	a698 <z_cbvprintf_impl+0x380>
    a5f4:	07d8      	lsls	r0, r3, #31
    a5f6:	d55c      	bpl.n	a6b2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    a5f8:	2103      	movs	r1, #3
    a5fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a5fe:	f361 0302 	bfi	r3, r1, #0, #3
    a602:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    a606:	f002 0378 	and.w	r3, r2, #120	; 0x78
    a60a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    a60e:	424b      	negs	r3, r1
    a610:	414b      	adcs	r3, r1
    a612:	e01a      	b.n	a64a <z_cbvprintf_impl+0x332>
    a614:	2001      	movs	r0, #1
	switch (conv->specifier) {
    a616:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    a61a:	b2c9      	uxtb	r1, r1
    a61c:	fa00 f101 	lsl.w	r1, r0, r1
    a620:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    a624:	d194      	bne.n	a550 <z_cbvprintf_impl+0x238>
    a626:	f640 0601 	movw	r6, #2049	; 0x801
    a62a:	4231      	tst	r1, r6
    a62c:	d11d      	bne.n	a66a <z_cbvprintf_impl+0x352>
    a62e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    a632:	d03e      	beq.n	a6b2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    a634:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a638:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a63c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    a640:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    a642:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    a646:	d034      	beq.n	a6b2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    a648:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    a64a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    a64e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    a652:	430b      	orrs	r3, r1
    a654:	f363 0241 	bfi	r2, r3, #1, #1
    a658:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    a65c:	e6fd      	b.n	a45a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    a65e:	2102      	movs	r1, #2
    a660:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a664:	f361 0302 	bfi	r3, r1, #0, #3
    a668:	e7e8      	b.n	a63c <z_cbvprintf_impl+0x324>
    a66a:	2002      	movs	r0, #2
    a66c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    a670:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    a674:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a678:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    a67a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    a67e:	bf02      	ittt	eq
    a680:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    a684:	f041 0101 	orreq.w	r1, r1, #1
    a688:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    a68c:	2b63      	cmp	r3, #99	; 0x63
    a68e:	d1db      	bne.n	a648 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    a690:	1e13      	subs	r3, r2, #0
    a692:	bf18      	it	ne
    a694:	2301      	movne	r3, #1
    a696:	e7d8      	b.n	a64a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    a698:	2103      	movs	r1, #3
    a69a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    a69e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    a6a2:	f361 0302 	bfi	r3, r1, #0, #3
    a6a6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    a6aa:	bf14      	ite	ne
    a6ac:	2301      	movne	r3, #1
    a6ae:	2300      	moveq	r3, #0
    a6b0:	e7cb      	b.n	a64a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    a6b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a6b6:	f043 0301 	orr.w	r3, r3, #1
    a6ba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    a6be:	e7c3      	b.n	a648 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    a6c0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    a6c4:	2a00      	cmp	r2, #0
		int width = -1;
    a6c6:	bfac      	ite	ge
    a6c8:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    a6cc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    a6d0:	e6d5      	b.n	a47e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    a6d2:	0798      	lsls	r0, r3, #30
    a6d4:	f57f aee2 	bpl.w	a49c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    a6d8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    a6dc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    a6de:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    a6e2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    a6e6:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    a6ea:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    a6ee:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    a6f0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    a6f4:	d133      	bne.n	a75e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    a6f6:	1ecb      	subs	r3, r1, #3
    a6f8:	2b04      	cmp	r3, #4
    a6fa:	d804      	bhi.n	a706 <z_cbvprintf_impl+0x3ee>
    a6fc:	e8df f003 	tbb	[pc, r3]
    a700:	21464621 	.word	0x21464621
    a704:	21          	.byte	0x21
    a705:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    a706:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    a708:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    a70a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    a70e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    a712:	d11c      	bne.n	a74e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    a714:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    a718:	17da      	asrs	r2, r3, #31
    a71a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    a71e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    a720:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a724:	f013 0603 	ands.w	r6, r3, #3
    a728:	d050      	beq.n	a7cc <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    a72a:	463a      	mov	r2, r7
    a72c:	4659      	mov	r1, fp
    a72e:	4648      	mov	r0, r9
    a730:	9b03      	ldr	r3, [sp, #12]
    a732:	f012 f9bc 	bl	1caae <outs>
    a736:	2800      	cmp	r0, #0
    a738:	f2c0 8152 	blt.w	a9e0 <z_cbvprintf_impl+0x6c8>
    a73c:	4405      	add	r5, r0
			continue;
    a73e:	9f03      	ldr	r7, [sp, #12]
    a740:	e5f2      	b.n	a328 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    a742:	f854 3b04 	ldr.w	r3, [r4], #4
    a746:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    a748:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    a74c:	e7e8      	b.n	a720 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    a74e:	2902      	cmp	r1, #2
    a750:	d1e5      	bne.n	a71e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    a752:	b21a      	sxth	r2, r3
    a754:	f343 33c0 	sbfx	r3, r3, #15, #1
    a758:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    a75c:	e7df      	b.n	a71e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    a75e:	2b02      	cmp	r3, #2
    a760:	d124      	bne.n	a7ac <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    a762:	1ecb      	subs	r3, r1, #3
    a764:	2b04      	cmp	r3, #4
    a766:	d804      	bhi.n	a772 <z_cbvprintf_impl+0x45a>
    a768:	e8df f003 	tbb	[pc, r3]
    a76c:	18101018 	.word	0x18101018
    a770:	18          	.byte	0x18
    a771:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    a772:	2901      	cmp	r1, #1
    a774:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    a778:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    a77c:	d014      	beq.n	a7a8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    a77e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    a780:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    a784:	d1cc      	bne.n	a720 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    a786:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    a788:	930e      	str	r3, [sp, #56]	; 0x38
    a78a:	e7c9      	b.n	a720 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    a78c:	3407      	adds	r4, #7
    a78e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    a792:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    a796:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    a79a:	e7c1      	b.n	a720 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    a79c:	f854 3b04 	ldr.w	r3, [r4], #4
    a7a0:	930e      	str	r3, [sp, #56]	; 0x38
    a7a2:	2300      	movs	r3, #0
    a7a4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    a7a6:	e7bb      	b.n	a720 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    a7a8:	b2db      	uxtb	r3, r3
    a7aa:	e7cd      	b.n	a748 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    a7ac:	2b04      	cmp	r3, #4
    a7ae:	d108      	bne.n	a7c2 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    a7b0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    a7b2:	f024 0407 	bic.w	r4, r4, #7
    a7b6:	e9d4 2300 	ldrd	r2, r3, [r4]
    a7ba:	3408      	adds	r4, #8
    a7bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    a7c0:	e7ae      	b.n	a720 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    a7c2:	2b03      	cmp	r3, #3
    a7c4:	d1ac      	bne.n	a720 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    a7c6:	f854 3b04 	ldr.w	r3, [r4], #4
    a7ca:	e7dd      	b.n	a788 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    a7cc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    a7d0:	2878      	cmp	r0, #120	; 0x78
    a7d2:	d8b4      	bhi.n	a73e <z_cbvprintf_impl+0x426>
    a7d4:	2862      	cmp	r0, #98	; 0x62
    a7d6:	d81c      	bhi.n	a812 <z_cbvprintf_impl+0x4fa>
    a7d8:	2825      	cmp	r0, #37	; 0x25
    a7da:	f43f adad 	beq.w	a338 <z_cbvprintf_impl+0x20>
    a7de:	2858      	cmp	r0, #88	; 0x58
    a7e0:	d1ad      	bne.n	a73e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    a7e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    a7e6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a7ea:	9300      	str	r3, [sp, #0]
    a7ec:	aa10      	add	r2, sp, #64	; 0x40
    a7ee:	ab08      	add	r3, sp, #32
    a7f0:	f012 f917 	bl	1ca22 <encode_uint>
			if (precision >= 0) {
    a7f4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    a7f8:	4607      	mov	r7, r0
			if (precision >= 0) {
    a7fa:	f280 8099 	bge.w	a930 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    a7fe:	2f00      	cmp	r7, #0
    a800:	d09d      	beq.n	a73e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    a802:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a806:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    a808:	2e00      	cmp	r6, #0
    a80a:	f000 80c0 	beq.w	a98e <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    a80e:	3001      	adds	r0, #1
    a810:	e0bd      	b.n	a98e <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    a812:	3863      	subs	r0, #99	; 0x63
    a814:	2815      	cmp	r0, #21
    a816:	d892      	bhi.n	a73e <z_cbvprintf_impl+0x426>
    a818:	a201      	add	r2, pc, #4	; (adr r2, a820 <z_cbvprintf_impl+0x508>)
    a81a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    a81e:	bf00      	nop
    a820:	0000a8f5 	.word	0x0000a8f5
    a824:	0000a907 	.word	0x0000a907
    a828:	0000a73f 	.word	0x0000a73f
    a82c:	0000a73f 	.word	0x0000a73f
    a830:	0000a73f 	.word	0x0000a73f
    a834:	0000a73f 	.word	0x0000a73f
    a838:	0000a907 	.word	0x0000a907
    a83c:	0000a73f 	.word	0x0000a73f
    a840:	0000a73f 	.word	0x0000a73f
    a844:	0000a73f 	.word	0x0000a73f
    a848:	0000a73f 	.word	0x0000a73f
    a84c:	0000a993 	.word	0x0000a993
    a850:	0000a92b 	.word	0x0000a92b
    a854:	0000a951 	.word	0x0000a951
    a858:	0000a73f 	.word	0x0000a73f
    a85c:	0000a73f 	.word	0x0000a73f
    a860:	0000a879 	.word	0x0000a879
    a864:	0000a73f 	.word	0x0000a73f
    a868:	0000a92b 	.word	0x0000a92b
    a86c:	0000a73f 	.word	0x0000a73f
    a870:	0000a73f 	.word	0x0000a73f
    a874:	0000a92b 	.word	0x0000a92b
			if (precision >= 0) {
    a878:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    a87c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    a87e:	db35      	blt.n	a8ec <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    a880:	4651      	mov	r1, sl
    a882:	4638      	mov	r0, r7
    a884:	f013 f908 	bl	1da98 <strnlen>
			bpe = bps + len;
    a888:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    a88c:	2f00      	cmp	r7, #0
    a88e:	f43f af56 	beq.w	a73e <z_cbvprintf_impl+0x426>
		char sign = 0;
    a892:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    a894:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    a898:	f013 0210 	ands.w	r2, r3, #16
    a89c:	9205      	str	r2, [sp, #20]
    a89e:	f000 8092 	beq.w	a9c6 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    a8a2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    a8a4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    a8a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    a8a8:	bf48      	it	mi
    a8aa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    a8ac:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    a8ae:	bf48      	it	mi
    a8b0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    a8b2:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    a8b6:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    a8b8:	f340 809f 	ble.w	a9fa <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    a8bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    a8c0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    a8c4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    a8c8:	0750      	lsls	r0, r2, #29
    a8ca:	9306      	str	r3, [sp, #24]
    a8cc:	f100 8095 	bmi.w	a9fa <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    a8d0:	0651      	lsls	r1, r2, #25
    a8d2:	f140 8088 	bpl.w	a9e6 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    a8d6:	b13e      	cbz	r6, a8e8 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    a8d8:	4659      	mov	r1, fp
    a8da:	4630      	mov	r0, r6
    a8dc:	47c8      	blx	r9
    a8de:	2800      	cmp	r0, #0
    a8e0:	db7e      	blt.n	a9e0 <z_cbvprintf_impl+0x6c8>
    a8e2:	9b06      	ldr	r3, [sp, #24]
    a8e4:	3501      	adds	r5, #1
    a8e6:	461e      	mov	r6, r3
					pad = '0';
    a8e8:	2230      	movs	r2, #48	; 0x30
    a8ea:	e07d      	b.n	a9e8 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    a8ec:	4638      	mov	r0, r7
    a8ee:	f013 f8cc 	bl	1da8a <strlen>
    a8f2:	e7c9      	b.n	a888 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    a8f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    a8f6:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    a8f8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    a8fa:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    a8fe:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    a900:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    a904:	e7c6      	b.n	a894 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    a906:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    a908:	bf5a      	itte	pl
    a90a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    a90e:	015e      	lslpl	r6, r3, #5
				sign = '+';
    a910:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    a912:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    a916:	2b00      	cmp	r3, #0
    a918:	f6bf af63 	bge.w	a7e2 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    a91c:	4252      	negs	r2, r2
    a91e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    a922:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    a924:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    a928:	e75b      	b.n	a7e2 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    a92a:	2600      	movs	r6, #0
    a92c:	e759      	b.n	a7e2 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    a92e:	2600      	movs	r6, #0
				conv->flag_zero = false;
    a930:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    a934:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a938:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    a93a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    a93e:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    a940:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    a944:	f67f af5b 	bls.w	a7fe <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    a948:	ebaa 0303 	sub.w	r3, sl, r3
    a94c:	9311      	str	r3, [sp, #68]	; 0x44
    a94e:	e756      	b.n	a7fe <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    a950:	980e      	ldr	r0, [sp, #56]	; 0x38
    a952:	b390      	cbz	r0, a9ba <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a954:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a958:	9300      	str	r3, [sp, #0]
    a95a:	2100      	movs	r1, #0
    a95c:	ab08      	add	r3, sp, #32
    a95e:	aa10      	add	r2, sp, #64	; 0x40
    a960:	f012 f85f 	bl	1ca22 <encode_uint>
				conv->altform_0c = true;
    a964:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    a968:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    a96c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    a970:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    a974:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a978:	4607      	mov	r7, r0
				conv->altform_0c = true;
    a97a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    a97e:	dad6      	bge.n	a92e <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    a980:	2800      	cmp	r0, #0
    a982:	f43f aedc 	beq.w	a73e <z_cbvprintf_impl+0x426>
		char sign = 0;
    a986:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    a988:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    a98c:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    a98e:	469a      	mov	sl, r3
    a990:	e780      	b.n	a894 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    a992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    a994:	2907      	cmp	r1, #7
    a996:	f63f aed2 	bhi.w	a73e <z_cbvprintf_impl+0x426>
    a99a:	e8df f001 	tbb	[pc, r1]
    a99e:	040c      	.short	0x040c
    a9a0:	08080c06 	.word	0x08080c06
    a9a4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    a9a6:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    a9a8:	e6c9      	b.n	a73e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    a9aa:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    a9ac:	e6c7      	b.n	a73e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    a9ae:	17ea      	asrs	r2, r5, #31
    a9b0:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    a9b4:	e6c3      	b.n	a73e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    a9b6:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    a9b8:	e6c1      	b.n	a73e <z_cbvprintf_impl+0x426>
    a9ba:	4f2f      	ldr	r7, [pc, #188]	; (aa78 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    a9bc:	4606      	mov	r6, r0
			bpe = bps + 5;
    a9be:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    a9c2:	2005      	movs	r0, #5
    a9c4:	e766      	b.n	a894 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    a9c6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    a9c8:	bf48      	it	mi
    a9ca:	3001      	addmi	r0, #1
    a9cc:	e76a      	b.n	a8a4 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    a9ce:	4610      	mov	r0, r2
    a9d0:	9307      	str	r3, [sp, #28]
    a9d2:	9206      	str	r2, [sp, #24]
    a9d4:	4659      	mov	r1, fp
    a9d6:	47c8      	blx	r9
    a9d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a9dc:	2800      	cmp	r0, #0
    a9de:	da04      	bge.n	a9ea <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    a9e0:	b015      	add	sp, #84	; 0x54
    a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    a9e6:	2220      	movs	r2, #32
					pad = '0';
    a9e8:	4643      	mov	r3, r8
				while (width-- > 0) {
    a9ea:	4619      	mov	r1, r3
    a9ec:	2900      	cmp	r1, #0
    a9ee:	f103 33ff 	add.w	r3, r3, #4294967295
    a9f2:	dcec      	bgt.n	a9ce <z_cbvprintf_impl+0x6b6>
    a9f4:	4445      	add	r5, r8
    a9f6:	4698      	mov	r8, r3
    a9f8:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    a9fa:	b12e      	cbz	r6, aa08 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    a9fc:	4659      	mov	r1, fp
    a9fe:	4630      	mov	r0, r6
    aa00:	47c8      	blx	r9
    aa02:	2800      	cmp	r0, #0
    aa04:	dbec      	blt.n	a9e0 <z_cbvprintf_impl+0x6c8>
    aa06:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    aa08:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    aa0c:	06da      	lsls	r2, r3, #27
    aa0e:	d401      	bmi.n	aa14 <z_cbvprintf_impl+0x6fc>
    aa10:	071b      	lsls	r3, r3, #28
    aa12:	d505      	bpl.n	aa20 <z_cbvprintf_impl+0x708>
				OUTC('0');
    aa14:	4659      	mov	r1, fp
    aa16:	2030      	movs	r0, #48	; 0x30
    aa18:	47c8      	blx	r9
    aa1a:	2800      	cmp	r0, #0
    aa1c:	dbe0      	blt.n	a9e0 <z_cbvprintf_impl+0x6c8>
    aa1e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    aa20:	9b05      	ldr	r3, [sp, #20]
    aa22:	b133      	cbz	r3, aa32 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    aa24:	4659      	mov	r1, fp
    aa26:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    aa2a:	47c8      	blx	r9
    aa2c:	2800      	cmp	r0, #0
    aa2e:	dbd7      	blt.n	a9e0 <z_cbvprintf_impl+0x6c8>
    aa30:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    aa32:	9e04      	ldr	r6, [sp, #16]
    aa34:	442e      	add	r6, r5
    aa36:	e005      	b.n	aa44 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    aa38:	4659      	mov	r1, fp
    aa3a:	2030      	movs	r0, #48	; 0x30
    aa3c:	47c8      	blx	r9
    aa3e:	2800      	cmp	r0, #0
    aa40:	dbce      	blt.n	a9e0 <z_cbvprintf_impl+0x6c8>
    aa42:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    aa44:	1b73      	subs	r3, r6, r5
    aa46:	2b00      	cmp	r3, #0
    aa48:	dcf6      	bgt.n	aa38 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    aa4a:	4653      	mov	r3, sl
    aa4c:	463a      	mov	r2, r7
    aa4e:	4659      	mov	r1, fp
    aa50:	4648      	mov	r0, r9
    aa52:	f012 f82c 	bl	1caae <outs>
    aa56:	2800      	cmp	r0, #0
    aa58:	dbc2      	blt.n	a9e0 <z_cbvprintf_impl+0x6c8>
    aa5a:	4405      	add	r5, r0
		while (width > 0) {
    aa5c:	44a8      	add	r8, r5
    aa5e:	eba8 0305 	sub.w	r3, r8, r5
    aa62:	2b00      	cmp	r3, #0
    aa64:	f77f ae6b 	ble.w	a73e <z_cbvprintf_impl+0x426>
			OUTC(' ');
    aa68:	4659      	mov	r1, fp
    aa6a:	2020      	movs	r0, #32
    aa6c:	47c8      	blx	r9
    aa6e:	2800      	cmp	r0, #0
    aa70:	dbb6      	blt.n	a9e0 <z_cbvprintf_impl+0x6c8>
    aa72:	3501      	adds	r5, #1
			--width;
    aa74:	e7f3      	b.n	aa5e <z_cbvprintf_impl+0x746>
    aa76:	bf00      	nop
    aa78:	00021a24 	.word	0x00021a24

0000aa7c <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    aa7c:	b538      	push	{r3, r4, r5, lr}
    aa7e:	460d      	mov	r5, r1
    aa80:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    aa82:	2220      	movs	r2, #32
    aa84:	2100      	movs	r1, #0
    aa86:	f013 f84a 	bl	1db1e <memset>
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    aa8a:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    aa8c:	68eb      	ldr	r3, [r5, #12]
    aa8e:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    aa90:	68ab      	ldr	r3, [r5, #8]
    aa92:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    aa94:	682b      	ldr	r3, [r5, #0]
    aa96:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    aa98:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    aa9a:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    aa9c:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    aa9e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    aaa0:	b123      	cbz	r3, aaac <mpsc_pbuf_init+0x30>
    aaa2:	1e59      	subs	r1, r3, #1
    aaa4:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    aaa6:	bf08      	it	eq
    aaa8:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    aaac:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    aaae:	2201      	movs	r2, #1
    aab0:	2100      	movs	r1, #0
    aab2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    aab6:	f015 fab9 	bl	2002c <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    aaba:	b148      	cbz	r0, aad0 <mpsc_pbuf_init+0x54>
    aabc:	4905      	ldr	r1, [pc, #20]	; (aad4 <mpsc_pbuf_init+0x58>)
    aabe:	4806      	ldr	r0, [pc, #24]	; (aad8 <mpsc_pbuf_init+0x5c>)
    aac0:	232e      	movs	r3, #46	; 0x2e
    aac2:	4a06      	ldr	r2, [pc, #24]	; (aadc <mpsc_pbuf_init+0x60>)
    aac4:	f012 f811 	bl	1caea <assert_print>
    aac8:	212e      	movs	r1, #46	; 0x2e
    aaca:	4804      	ldr	r0, [pc, #16]	; (aadc <mpsc_pbuf_init+0x60>)
    aacc:	f012 f806 	bl	1cadc <assert_post_action>
	ARG_UNUSED(err);
}
    aad0:	bd38      	pop	{r3, r4, r5, pc}
    aad2:	bf00      	nop
    aad4:	00021a50 	.word	0x00021a50
    aad8:	00021547 	.word	0x00021547
    aadc:	00021a2a 	.word	0x00021a2a

0000aae0 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aae4:	b087      	sub	sp, #28
    aae6:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    aaea:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    aaec:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    aaee:	3b01      	subs	r3, #1
    aaf0:	428b      	cmp	r3, r1
{
    aaf2:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    aaf4:	f0c0 80a0 	bcc.w	ac38 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    aaf8:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    aafa:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    aafc:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    ab00:	f04f 0320 	mov.w	r3, #32
    ab04:	f3ef 8b11 	mrs	fp, BASEPRI
    ab08:	f383 8812 	msr	BASEPRI_MAX, r3
    ab0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab10:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    ab12:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab14:	f00e fa02 	bl	18f1c <z_spin_lock_valid>
    ab18:	b958      	cbnz	r0, ab32 <mpsc_pbuf_alloc+0x52>
    ab1a:	2394      	movs	r3, #148	; 0x94
    ab1c:	4a49      	ldr	r2, [pc, #292]	; (ac44 <mpsc_pbuf_alloc+0x164>)
    ab1e:	494a      	ldr	r1, [pc, #296]	; (ac48 <mpsc_pbuf_alloc+0x168>)
    ab20:	484a      	ldr	r0, [pc, #296]	; (ac4c <mpsc_pbuf_alloc+0x16c>)
    ab22:	f011 ffe2 	bl	1caea <assert_print>
    ab26:	4629      	mov	r1, r5
    ab28:	4849      	ldr	r0, [pc, #292]	; (ac50 <mpsc_pbuf_alloc+0x170>)
    ab2a:	f011 ffde 	bl	1caea <assert_print>
    ab2e:	2194      	movs	r1, #148	; 0x94
    ab30:	e050      	b.n	abd4 <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    ab32:	4628      	mov	r0, r5
    ab34:	f00e fa0e 	bl	18f54 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    ab38:	a905      	add	r1, sp, #20
    ab3a:	4620      	mov	r0, r4
    ab3c:	f011 ffe2 	bl	1cb04 <free_space>

		if (free_wlen >= wlen) {
    ab40:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    ab42:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    ab44:	42b9      	cmp	r1, r7
    ab46:	d328      	bcc.n	ab9a <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    ab48:	6822      	ldr	r2, [r4, #0]
			item =
    ab4a:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    ab4c:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    ab4e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    ab52:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    ab56:	f021 0103 	bic.w	r1, r1, #3
    ab5a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    ab5e:	6821      	ldr	r1, [r4, #0]
    ab60:	463a      	mov	r2, r7
    ab62:	f011 fff1 	bl	1cb48 <idx_inc>
		cont = false;
    ab66:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    ab6a:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ab6c:	4628      	mov	r0, r5
    ab6e:	f00e f9e3 	bl	18f38 <z_spin_unlock_valid>
    ab72:	b320      	cbz	r0, abbe <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    ab74:	f389 8811 	msr	BASEPRI, r9
    ab78:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    ab7c:	f1b8 0f00 	cmp.w	r8, #0
    ab80:	d05c      	beq.n	ac3c <mpsc_pbuf_alloc+0x15c>
    ab82:	b146      	cbz	r6, ab96 <mpsc_pbuf_alloc+0xb6>
    ab84:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d0b9      	beq.n	ab00 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    ab8c:	69a3      	ldr	r3, [r4, #24]
    ab8e:	b113      	cbz	r3, ab96 <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    ab90:	4631      	mov	r1, r6
    ab92:	4620      	mov	r0, r4
    ab94:	4798      	blx	r3
{
    ab96:	2600      	movs	r6, #0
    ab98:	e7b2      	b.n	ab00 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    ab9a:	b118      	cbz	r0, aba4 <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    ab9c:	4620      	mov	r0, r4
    ab9e:	f011 ffe1 	bl	1cb64 <add_skip_item>
			cont = true;
    aba2:	e7e3      	b.n	ab6c <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    aba4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    aba8:	4313      	orrs	r3, r2
    abaa:	d036      	beq.n	ac1a <mpsc_pbuf_alloc+0x13a>
    abac:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    abae:	f015 f9ec 	bl	1ff8a <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    abb2:	9903      	ldr	r1, [sp, #12]
    abb4:	bb88      	cbnz	r0, ac1a <mpsc_pbuf_alloc+0x13a>
    abb6:	4628      	mov	r0, r5
    abb8:	f00e f9be 	bl	18f38 <z_spin_unlock_valid>
    abbc:	b968      	cbnz	r0, abda <mpsc_pbuf_alloc+0xfa>
    abbe:	23c2      	movs	r3, #194	; 0xc2
    abc0:	4a20      	ldr	r2, [pc, #128]	; (ac44 <mpsc_pbuf_alloc+0x164>)
    abc2:	4924      	ldr	r1, [pc, #144]	; (ac54 <mpsc_pbuf_alloc+0x174>)
    abc4:	4821      	ldr	r0, [pc, #132]	; (ac4c <mpsc_pbuf_alloc+0x16c>)
    abc6:	f011 ff90 	bl	1caea <assert_print>
    abca:	4629      	mov	r1, r5
    abcc:	4822      	ldr	r0, [pc, #136]	; (ac58 <mpsc_pbuf_alloc+0x178>)
    abce:	f011 ff8c 	bl	1caea <assert_print>
    abd2:	21c2      	movs	r1, #194	; 0xc2
    abd4:	481b      	ldr	r0, [pc, #108]	; (ac44 <mpsc_pbuf_alloc+0x164>)
    abd6:	f011 ff81 	bl	1cadc <assert_post_action>
    abda:	f38b 8811 	msr	BASEPRI, fp
    abde:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    abe2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    abe6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    abea:	f00e fcf1 	bl	195d0 <z_impl_k_sem_take>
    abee:	4680      	mov	r8, r0
	__asm__ volatile(
    abf0:	f04f 0320 	mov.w	r3, #32
    abf4:	f3ef 8911 	mrs	r9, BASEPRI
    abf8:	f383 8812 	msr	BASEPRI_MAX, r3
    abfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac00:	4628      	mov	r0, r5
    ac02:	f00e f98b 	bl	18f1c <z_spin_lock_valid>
    ac06:	2800      	cmp	r0, #0
    ac08:	d087      	beq.n	ab1a <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    ac0a:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    ac0e:	4628      	mov	r0, r5
    ac10:	f00e f9a0 	bl	18f54 <z_spin_lock_set_owner>
    ac14:	ea4f 1858 	mov.w	r8, r8, lsr #5
    ac18:	e7a8      	b.n	ab6c <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    ac1a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    ac1c:	4620      	mov	r0, r4
    ac1e:	f10d 0313 	add.w	r3, sp, #19
    ac22:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ac26:	f011 ffc0 	bl	1cbaa <drop_item_locked>
			cont = dropped_item != NULL;
    ac2a:	f1b0 0800 	subs.w	r8, r0, #0
    ac2e:	4606      	mov	r6, r0
    ac30:	bf18      	it	ne
    ac32:	f04f 0801 	movne.w	r8, #1
    ac36:	e799      	b.n	ab6c <mpsc_pbuf_alloc+0x8c>
		return NULL;
    ac38:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    ac3c:	4650      	mov	r0, sl
    ac3e:	b007      	add	sp, #28
    ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac44:	0002197b 	.word	0x0002197b
    ac48:	000219d4 	.word	0x000219d4
    ac4c:	00021547 	.word	0x00021547
    ac50:	000219e9 	.word	0x000219e9
    ac54:	000219a8 	.word	0x000219a8
    ac58:	000219bf 	.word	0x000219bf

0000ac5c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac60:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ac62:	69c3      	ldr	r3, [r0, #28]
    ac64:	4608      	mov	r0, r1
{
    ac66:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    ac68:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    ac6a:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    ac6e:	4607      	mov	r7, r0
    ac70:	f04f 0320 	mov.w	r3, #32
    ac74:	f3ef 8811 	mrs	r8, BASEPRI
    ac78:	f383 8812 	msr	BASEPRI_MAX, r3
    ac7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac80:	4628      	mov	r0, r5
    ac82:	f00e f94b 	bl	18f1c <z_spin_lock_valid>
    ac86:	b968      	cbnz	r0, aca4 <mpsc_pbuf_commit+0x48>
    ac88:	2394      	movs	r3, #148	; 0x94
    ac8a:	4a19      	ldr	r2, [pc, #100]	; (acf0 <mpsc_pbuf_commit+0x94>)
    ac8c:	4919      	ldr	r1, [pc, #100]	; (acf4 <mpsc_pbuf_commit+0x98>)
    ac8e:	481a      	ldr	r0, [pc, #104]	; (acf8 <mpsc_pbuf_commit+0x9c>)
    ac90:	f011 ff2b 	bl	1caea <assert_print>
    ac94:	4629      	mov	r1, r5
    ac96:	4819      	ldr	r0, [pc, #100]	; (acfc <mpsc_pbuf_commit+0xa0>)
    ac98:	f011 ff27 	bl	1caea <assert_print>
    ac9c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ac9e:	4814      	ldr	r0, [pc, #80]	; (acf0 <mpsc_pbuf_commit+0x94>)
    aca0:	f011 ff1c 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
    aca4:	4628      	mov	r0, r5
    aca6:	f00e f955 	bl	18f54 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    acaa:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    acac:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    acae:	f043 0301 	orr.w	r3, r3, #1
    acb2:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    acb4:	6861      	ldr	r1, [r4, #4]
    acb6:	4620      	mov	r0, r4
    acb8:	f011 ff46 	bl	1cb48 <idx_inc>
    acbc:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    acbe:	4620      	mov	r0, r4
    acc0:	f011 ff66 	bl	1cb90 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    acc4:	4628      	mov	r0, r5
    acc6:	f00e f937 	bl	18f38 <z_spin_unlock_valid>
    acca:	b958      	cbnz	r0, ace4 <mpsc_pbuf_commit+0x88>
    accc:	23c2      	movs	r3, #194	; 0xc2
    acce:	4a08      	ldr	r2, [pc, #32]	; (acf0 <mpsc_pbuf_commit+0x94>)
    acd0:	490b      	ldr	r1, [pc, #44]	; (ad00 <mpsc_pbuf_commit+0xa4>)
    acd2:	4809      	ldr	r0, [pc, #36]	; (acf8 <mpsc_pbuf_commit+0x9c>)
    acd4:	f011 ff09 	bl	1caea <assert_print>
    acd8:	4629      	mov	r1, r5
    acda:	480a      	ldr	r0, [pc, #40]	; (ad04 <mpsc_pbuf_commit+0xa8>)
    acdc:	f011 ff05 	bl	1caea <assert_print>
    ace0:	21c2      	movs	r1, #194	; 0xc2
    ace2:	e7dc      	b.n	ac9e <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    ace4:	f388 8811 	msr	BASEPRI, r8
    ace8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acf0:	0002197b 	.word	0x0002197b
    acf4:	000219d4 	.word	0x000219d4
    acf8:	00021547 	.word	0x00021547
    acfc:	000219e9 	.word	0x000219e9
    ad00:	000219a8 	.word	0x000219a8
    ad04:	000219bf 	.word	0x000219bf

0000ad08 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ad0c:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    ad0e:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    ad12:	f04f 0320 	mov.w	r3, #32
    ad16:	f3ef 8811 	mrs	r8, BASEPRI
    ad1a:	f383 8812 	msr	BASEPRI_MAX, r3
    ad1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad22:	4638      	mov	r0, r7
    ad24:	f00e f8fa 	bl	18f1c <z_spin_lock_valid>
    ad28:	4605      	mov	r5, r0
    ad2a:	b968      	cbnz	r0, ad48 <mpsc_pbuf_claim+0x40>
    ad2c:	2394      	movs	r3, #148	; 0x94
    ad2e:	4a33      	ldr	r2, [pc, #204]	; (adfc <mpsc_pbuf_claim+0xf4>)
    ad30:	4933      	ldr	r1, [pc, #204]	; (ae00 <mpsc_pbuf_claim+0xf8>)
    ad32:	4834      	ldr	r0, [pc, #208]	; (ae04 <mpsc_pbuf_claim+0xfc>)
    ad34:	f011 fed9 	bl	1caea <assert_print>
    ad38:	4639      	mov	r1, r7
    ad3a:	4833      	ldr	r0, [pc, #204]	; (ae08 <mpsc_pbuf_claim+0x100>)
    ad3c:	f011 fed5 	bl	1caea <assert_print>
    ad40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad42:	482e      	ldr	r0, [pc, #184]	; (adfc <mpsc_pbuf_claim+0xf4>)
    ad44:	f011 feca 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
    ad48:	4638      	mov	r0, r7
    ad4a:	f00e f903 	bl	18f54 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    ad4e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    ad52:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    ad54:	bf88      	it	hi
    ad56:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    ad58:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d03f      	beq.n	adde <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    ad5e:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    ad60:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    ad64:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    ad68:	f013 0003 	ands.w	r0, r3, #3
    ad6c:	d03a      	beq.n	ade4 <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    ad6e:	2802      	cmp	r0, #2
    ad70:	d103      	bne.n	ad7a <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    ad72:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    ad76:	08b6      	lsrs	r6, r6, #2
    ad78:	d105      	bne.n	ad86 <mpsc_pbuf_claim+0x7e>
    ad7a:	07d8      	lsls	r0, r3, #31
    ad7c:	d41f      	bmi.n	adbe <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    ad7e:	4648      	mov	r0, r9
    ad80:	69e3      	ldr	r3, [r4, #28]
    ad82:	4798      	blx	r3
    ad84:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    ad86:	68a1      	ldr	r1, [r4, #8]
    ad88:	4632      	mov	r2, r6
    ad8a:	4620      	mov	r0, r4
    ad8c:	f011 fedc 	bl	1cb48 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    ad90:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    ad92:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    ad94:	4632      	mov	r2, r6
    ad96:	4620      	mov	r0, r4
    ad98:	f011 fed6 	bl	1cb48 <idx_inc>
				buffer->rd_idx =
    ad9c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad9e:	4638      	mov	r0, r7
    ada0:	f00e f8ca 	bl	18f38 <z_spin_unlock_valid>
    ada4:	bb00      	cbnz	r0, ade8 <mpsc_pbuf_claim+0xe0>
    ada6:	23c2      	movs	r3, #194	; 0xc2
    ada8:	4a14      	ldr	r2, [pc, #80]	; (adfc <mpsc_pbuf_claim+0xf4>)
    adaa:	4918      	ldr	r1, [pc, #96]	; (ae0c <mpsc_pbuf_claim+0x104>)
    adac:	4815      	ldr	r0, [pc, #84]	; (ae04 <mpsc_pbuf_claim+0xfc>)
    adae:	f011 fe9c 	bl	1caea <assert_print>
    adb2:	4639      	mov	r1, r7
    adb4:	4816      	ldr	r0, [pc, #88]	; (ae10 <mpsc_pbuf_claim+0x108>)
    adb6:	f011 fe98 	bl	1caea <assert_print>
    adba:	21c2      	movs	r1, #194	; 0xc2
    adbc:	e7c1      	b.n	ad42 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    adbe:	f043 0302 	orr.w	r3, r3, #2
    adc2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    adc6:	69e3      	ldr	r3, [r4, #28]
    adc8:	4648      	mov	r0, r9
    adca:	68a5      	ldr	r5, [r4, #8]
    adcc:	4798      	blx	r3
    adce:	4629      	mov	r1, r5
    add0:	4602      	mov	r2, r0
    add2:	4620      	mov	r0, r4
    add4:	f011 feb8 	bl	1cb48 <idx_inc>
		cont = false;
    add8:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    adda:	60a0      	str	r0, [r4, #8]
    addc:	e7df      	b.n	ad9e <mpsc_pbuf_claim+0x96>
		cont = false;
    adde:	461d      	mov	r5, r3
			item = NULL;
    ade0:	46a9      	mov	r9, r5
    ade2:	e7dc      	b.n	ad9e <mpsc_pbuf_claim+0x96>
		cont = false;
    ade4:	4605      	mov	r5, r0
    ade6:	e7fb      	b.n	ade0 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    ade8:	f388 8811 	msr	BASEPRI, r8
    adec:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    adf0:	2d00      	cmp	r5, #0
    adf2:	d18e      	bne.n	ad12 <mpsc_pbuf_claim+0xa>

	return item;
}
    adf4:	4648      	mov	r0, r9
    adf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    adfa:	bf00      	nop
    adfc:	0002197b 	.word	0x0002197b
    ae00:	000219d4 	.word	0x000219d4
    ae04:	00021547 	.word	0x00021547
    ae08:	000219e9 	.word	0x000219e9
    ae0c:	000219a8 	.word	0x000219a8
    ae10:	000219bf 	.word	0x000219bf

0000ae14 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    ae14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae18:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ae1a:	69c3      	ldr	r3, [r0, #28]
    ae1c:	4608      	mov	r0, r1
{
    ae1e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ae20:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    ae22:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    ae26:	4607      	mov	r7, r0
	__asm__ volatile(
    ae28:	f04f 0320 	mov.w	r3, #32
    ae2c:	f3ef 8811 	mrs	r8, BASEPRI
    ae30:	f383 8812 	msr	BASEPRI_MAX, r3
    ae34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae38:	4630      	mov	r0, r6
    ae3a:	f00e f86f 	bl	18f1c <z_spin_lock_valid>
    ae3e:	b968      	cbnz	r0, ae5c <mpsc_pbuf_free+0x48>
    ae40:	2394      	movs	r3, #148	; 0x94
    ae42:	4a23      	ldr	r2, [pc, #140]	; (aed0 <mpsc_pbuf_free+0xbc>)
    ae44:	4923      	ldr	r1, [pc, #140]	; (aed4 <mpsc_pbuf_free+0xc0>)
    ae46:	4824      	ldr	r0, [pc, #144]	; (aed8 <mpsc_pbuf_free+0xc4>)
    ae48:	f011 fe4f 	bl	1caea <assert_print>
    ae4c:	4631      	mov	r1, r6
    ae4e:	4823      	ldr	r0, [pc, #140]	; (aedc <mpsc_pbuf_free+0xc8>)
    ae50:	f011 fe4b 	bl	1caea <assert_print>
    ae54:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ae56:	481e      	ldr	r0, [pc, #120]	; (aed0 <mpsc_pbuf_free+0xbc>)
    ae58:	f011 fe40 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
    ae5c:	4630      	mov	r0, r6
    ae5e:	f00e f879 	bl	18f54 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    ae62:	782b      	ldrb	r3, [r5, #0]
    ae64:	f36f 0300 	bfc	r3, #0, #1
    ae68:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ae6a:	6923      	ldr	r3, [r4, #16]
    ae6c:	079b      	lsls	r3, r3, #30
    ae6e:	d505      	bpl.n	ae7c <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    ae70:	68e2      	ldr	r2, [r4, #12]
    ae72:	6a23      	ldr	r3, [r4, #32]
    ae74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ae78:	429d      	cmp	r5, r3
    ae7a:	d119      	bne.n	aeb0 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    ae7c:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ae7e:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    ae80:	f36f 0341 	bfc	r3, #1, #1
    ae84:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ae86:	68e1      	ldr	r1, [r4, #12]
    ae88:	4620      	mov	r0, r4
    ae8a:	f011 fe5d 	bl	1cb48 <idx_inc>
    ae8e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ae90:	4630      	mov	r0, r6
    ae92:	f00e f851 	bl	18f38 <z_spin_unlock_valid>
    ae96:	b980      	cbnz	r0, aeba <mpsc_pbuf_free+0xa6>
    ae98:	23c2      	movs	r3, #194	; 0xc2
    ae9a:	4a0d      	ldr	r2, [pc, #52]	; (aed0 <mpsc_pbuf_free+0xbc>)
    ae9c:	4910      	ldr	r1, [pc, #64]	; (aee0 <mpsc_pbuf_free+0xcc>)
    ae9e:	480e      	ldr	r0, [pc, #56]	; (aed8 <mpsc_pbuf_free+0xc4>)
    aea0:	f011 fe23 	bl	1caea <assert_print>
    aea4:	4631      	mov	r1, r6
    aea6:	480f      	ldr	r0, [pc, #60]	; (aee4 <mpsc_pbuf_free+0xd0>)
    aea8:	f011 fe1f 	bl	1caea <assert_print>
    aeac:	21c2      	movs	r1, #194	; 0xc2
    aeae:	e7d2      	b.n	ae56 <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    aeb0:	682b      	ldr	r3, [r5, #0]
    aeb2:	f367 039f 	bfi	r3, r7, #2, #30
    aeb6:	602b      	str	r3, [r5, #0]
    aeb8:	e7ea      	b.n	ae90 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    aeba:	f388 8811 	msr	BASEPRI, r8
    aebe:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    aec2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aeca:	f00e bb3d 	b.w	19548 <z_impl_k_sem_give>
    aece:	bf00      	nop
    aed0:	0002197b 	.word	0x0002197b
    aed4:	000219d4 	.word	0x000219d4
    aed8:	00021547 	.word	0x00021547
    aedc:	000219e9 	.word	0x000219e9
    aee0:	000219a8 	.word	0x000219a8
    aee4:	000219bf 	.word	0x000219bf

0000aee8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    aee8:	b148      	cbz	r0, aefe <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    aeea:	4b05      	ldr	r3, [pc, #20]	; (af00 <arch_busy_wait+0x18>)
    aeec:	4a05      	ldr	r2, [pc, #20]	; (af04 <arch_busy_wait+0x1c>)
    aeee:	681b      	ldr	r3, [r3, #0]
    aef0:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    aef4:	4358      	muls	r0, r3
    aef6:	4b04      	ldr	r3, [pc, #16]	; (af08 <arch_busy_wait+0x20>)
    aef8:	f043 0301 	orr.w	r3, r3, #1
    aefc:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    aefe:	4770      	bx	lr
    af00:	20008350 	.word	0x20008350
    af04:	000f4240 	.word	0x000f4240
    af08:	00020980 	.word	0x00020980

0000af0c <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    af0c:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    af0e:	b570      	push	{r4, r5, r6, lr}
    af10:	4605      	mov	r5, r0
    af12:	461e      	mov	r6, r3
    af14:	4608      	mov	r0, r1
    af16:	d90b      	bls.n	af30 <ppi_ipc_to_rtc.isra.0+0x24>
    af18:	491d      	ldr	r1, [pc, #116]	; (af90 <ppi_ipc_to_rtc.isra.0+0x84>)
    af1a:	481e      	ldr	r0, [pc, #120]	; (af94 <ppi_ipc_to_rtc.isra.0+0x88>)
    af1c:	f240 13e7 	movw	r3, #487	; 0x1e7
    af20:	4a1d      	ldr	r2, [pc, #116]	; (af98 <ppi_ipc_to_rtc.isra.0+0x8c>)
    af22:	f011 fde2 	bl	1caea <assert_print>
    af26:	f240 11e7 	movw	r1, #487	; 0x1e7
    af2a:	481b      	ldr	r0, [pc, #108]	; (af98 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    af2c:	f011 fdd6 	bl	1cadc <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    af30:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    af32:	f00a fc81 	bl	15838 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    af36:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    af3a:	b1ae      	cbz	r6, af68 <ppi_ipc_to_rtc.isra.0+0x5c>
    af3c:	b950      	cbnz	r0, af54 <ppi_ipc_to_rtc.isra.0+0x48>
    af3e:	4917      	ldr	r1, [pc, #92]	; (af9c <ppi_ipc_to_rtc.isra.0+0x90>)
    af40:	f240 234e 	movw	r3, #590	; 0x24e
    af44:	4a16      	ldr	r2, [pc, #88]	; (afa0 <ppi_ipc_to_rtc.isra.0+0x94>)
    af46:	4813      	ldr	r0, [pc, #76]	; (af94 <ppi_ipc_to_rtc.isra.0+0x88>)
    af48:	f011 fdcf 	bl	1caea <assert_print>
    af4c:	f240 214e 	movw	r1, #590	; 0x24e
    af50:	4813      	ldr	r0, [pc, #76]	; (afa0 <ppi_ipc_to_rtc.isra.0+0x94>)
    af52:	e7eb      	b.n	af2c <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    af54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    af58:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    af5c:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    af60:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    af64:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    af66:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    af68:	b948      	cbnz	r0, af7e <ppi_ipc_to_rtc.isra.0+0x72>
    af6a:	490c      	ldr	r1, [pc, #48]	; (af9c <ppi_ipc_to_rtc.isra.0+0x90>)
    af6c:	f240 2363 	movw	r3, #611	; 0x263
    af70:	4a0b      	ldr	r2, [pc, #44]	; (afa0 <ppi_ipc_to_rtc.isra.0+0x94>)
    af72:	4808      	ldr	r0, [pc, #32]	; (af94 <ppi_ipc_to_rtc.isra.0+0x88>)
    af74:	f011 fdb9 	bl	1caea <assert_print>
    af78:	f240 2163 	movw	r1, #611	; 0x263
    af7c:	e7e8      	b.n	af50 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    af7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    af82:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    af86:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    af8a:	6016      	str	r6, [r2, #0]
    af8c:	e7eb      	b.n	af66 <ppi_ipc_to_rtc.isra.0+0x5a>
    af8e:	bf00      	nop
    af90:	00021a8f 	.word	0x00021a8f
    af94:	00021547 	.word	0x00021547
    af98:	00021a5d 	.word	0x00021a5d
    af9c:	00021ad2 	.word	0x00021ad2
    afa0:	00021a9a 	.word	0x00021a9a

0000afa4 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    afa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    afa6:	b083      	sub	sp, #12
    afa8:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    afaa:	1d38      	adds	r0, r7, #4
    afac:	f00b fc4e 	bl	1684c <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    afb0:	4b24      	ldr	r3, [pc, #144]	; (b044 <sync_rtc_setup+0xa0>)
    afb2:	4298      	cmp	r0, r3
    afb4:	d143      	bne.n	b03e <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    afb6:	f00a fe27 	bl	15c08 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    afba:	1e04      	subs	r4, r0, #0
    afbc:	da13      	bge.n	afe6 <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    afbe:	7938      	ldrb	r0, [r7, #4]
    afc0:	f00b fc4a 	bl	16858 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    afc4:	466d      	mov	r5, sp
    afc6:	b088      	sub	sp, #32
    afc8:	466a      	mov	r2, sp
    afca:	4b1f      	ldr	r3, [pc, #124]	; (b048 <sync_rtc_setup+0xa4>)
    afcc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    afd0:	2303      	movs	r3, #3
    afd2:	f842 3f10 	str.w	r3, [r2, #16]!
    afd6:	2300      	movs	r3, #0
    afd8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    afdc:	481b      	ldr	r0, [pc, #108]	; (b04c <sync_rtc_setup+0xa8>)
    afde:	f000 fc93 	bl	b908 <z_impl_z_log_msg_static_create>
    afe2:	46ad      	mov	sp, r5
	}

	return rv;
    afe4:	e027      	b.n	b036 <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    afe6:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    afea:	4d19      	ldr	r5, [pc, #100]	; (b050 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    afec:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    afee:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    aff0:	80fb      	strh	r3, [r7, #6]
    aff2:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    aff4:	687b      	ldr	r3, [r7, #4]
    aff6:	b914      	cbnz	r4, affe <sync_rtc_setup+0x5a>
		return -ENOSYS;
    aff8:	f06f 0457 	mvn.w	r4, #87	; 0x57
    affc:	e7e2      	b.n	afc4 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    affe:	2108      	movs	r1, #8
    b000:	4628      	mov	r0, r5
    b002:	4a14      	ldr	r2, [pc, #80]	; (b054 <sync_rtc_setup+0xb0>)
    b004:	47a0      	blx	r4
	if (err < 0) {
    b006:	1e04      	subs	r4, r0, #0
    b008:	dbdc      	blt.n	afc4 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    b00a:	6933      	ldr	r3, [r6, #16]
    b00c:	2b00      	cmp	r3, #0
    b00e:	d0f3      	beq.n	aff8 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    b010:	2201      	movs	r2, #1
    b012:	2108      	movs	r1, #8
    b014:	4628      	mov	r0, r5
    b016:	4798      	blx	r3
	if (rv < 0) {
    b018:	1e04      	subs	r4, r0, #0
    b01a:	dbd3      	blt.n	afc4 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    b01c:	2301      	movs	r3, #1
    b01e:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    b020:	4a0d      	ldr	r2, [pc, #52]	; (b058 <sync_rtc_setup+0xb4>)
    b022:	fa03 f100 	lsl.w	r1, r3, r0
    b026:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    b02a:	79fa      	ldrb	r2, [r7, #7]
    b02c:	7979      	ldrb	r1, [r7, #5]
    b02e:	f7ff ff6d 	bl	af0c <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    b032:	2c00      	cmp	r4, #0
    b034:	d1c6      	bne.n	afc4 <sync_rtc_setup+0x20>
}
    b036:	4620      	mov	r0, r4
    b038:	370c      	adds	r7, #12
    b03a:	46bd      	mov	sp, r7
    b03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    b03e:	f06f 0412 	mvn.w	r4, #18
    b042:	e7bf      	b.n	afc4 <sync_rtc_setup+0x20>
    b044:	0bad0000 	.word	0x0bad0000
    b048:	00021ad6 	.word	0x00021ad6
    b04c:	000208f4 	.word	0x000208f4
    b050:	000204fc 	.word	0x000204fc
    b054:	0000b10d 	.word	0x0000b10d
    b058:	40017000 	.word	0x40017000

0000b05c <rtc_cb>:
{
    b05c:	b570      	push	{r4, r5, r6, lr}
    b05e:	9e04      	ldr	r6, [sp, #16]
    b060:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    b064:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    b066:	f3c6 2607 	ubfx	r6, r6, #8, #8
    b06a:	4630      	mov	r0, r6
    b06c:	f00a fbca 	bl	15804 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    b070:	2c0f      	cmp	r4, #15
    b072:	d90b      	bls.n	b08c <rtc_cb+0x30>
    b074:	491b      	ldr	r1, [pc, #108]	; (b0e4 <rtc_cb+0x88>)
    b076:	481c      	ldr	r0, [pc, #112]	; (b0e8 <rtc_cb+0x8c>)
    b078:	f240 13e1 	movw	r3, #481	; 0x1e1
    b07c:	4a1b      	ldr	r2, [pc, #108]	; (b0ec <rtc_cb+0x90>)
    b07e:	f011 fd34 	bl	1caea <assert_print>
    b082:	f240 11e1 	movw	r1, #481	; 0x1e1
    b086:	4819      	ldr	r0, [pc, #100]	; (b0ec <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    b088:	f011 fd28 	bl	1cadc <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    b08c:	00a4      	lsls	r4, r4, #2
    b08e:	b2e4      	uxtb	r4, r4
    b090:	b950      	cbnz	r0, b0a8 <rtc_cb+0x4c>
    b092:	4917      	ldr	r1, [pc, #92]	; (b0f0 <rtc_cb+0x94>)
    b094:	4814      	ldr	r0, [pc, #80]	; (b0e8 <rtc_cb+0x8c>)
    b096:	f44f 7317 	mov.w	r3, #604	; 0x25c
    b09a:	4a16      	ldr	r2, [pc, #88]	; (b0f4 <rtc_cb+0x98>)
    b09c:	f011 fd25 	bl	1caea <assert_print>
    b0a0:	f44f 7117 	mov.w	r1, #604	; 0x25c
    b0a4:	4813      	ldr	r0, [pc, #76]	; (b0f4 <rtc_cb+0x98>)
    b0a6:	e7ef      	b.n	b088 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    b0a8:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    b0aa:	4b13      	ldr	r3, [pc, #76]	; (b0f8 <rtc_cb+0x9c>)
    b0ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    b0b0:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    b0b2:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    b0b4:	4a11      	ldr	r2, [pc, #68]	; (b0fc <rtc_cb+0xa0>)
    b0b6:	40ab      	lsls	r3, r5
    b0b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    b0bc:	4630      	mov	r0, r6
    b0be:	f00a fdc1 	bl	15c44 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    b0c2:	4628      	mov	r0, r5
    b0c4:	f00b fbc8 	bl	16858 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    b0c8:	4b0d      	ldr	r3, [pc, #52]	; (b100 <rtc_cb+0xa4>)
    b0ca:	4298      	cmp	r0, r3
    b0cc:	d008      	beq.n	b0e0 <rtc_cb+0x84>
    b0ce:	490d      	ldr	r1, [pc, #52]	; (b104 <rtc_cb+0xa8>)
    b0d0:	4805      	ldr	r0, [pc, #20]	; (b0e8 <rtc_cb+0x8c>)
    b0d2:	2374      	movs	r3, #116	; 0x74
    b0d4:	4a0c      	ldr	r2, [pc, #48]	; (b108 <rtc_cb+0xac>)
    b0d6:	f011 fd08 	bl	1caea <assert_print>
    b0da:	2174      	movs	r1, #116	; 0x74
    b0dc:	480a      	ldr	r0, [pc, #40]	; (b108 <rtc_cb+0xac>)
    b0de:	e7d3      	b.n	b088 <rtc_cb+0x2c>
}
    b0e0:	bd70      	pop	{r4, r5, r6, pc}
    b0e2:	bf00      	nop
    b0e4:	00021a8f 	.word	0x00021a8f
    b0e8:	00021547 	.word	0x00021547
    b0ec:	00021a5d 	.word	0x00021a5d
    b0f0:	00021afe 	.word	0x00021afe
    b0f4:	00021a9a 	.word	0x00021a9a
    b0f8:	4002a080 	.word	0x4002a080
    b0fc:	40017000 	.word	0x40017000
    b100:	0bad0000 	.word	0x0bad0000
    b104:	00021b39 	.word	0x00021b39
    b108:	00021b02 	.word	0x00021b02

0000b10c <mbox_callback>:
{
    b10c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b110:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    b112:	6883      	ldr	r3, [r0, #8]
    b114:	691b      	ldr	r3, [r3, #16]
    b116:	b94b      	cbnz	r3, b12c <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    b118:	4927      	ldr	r1, [pc, #156]	; (b1b8 <mbox_callback+0xac>)
    b11a:	4828      	ldr	r0, [pc, #160]	; (b1bc <mbox_callback+0xb0>)
    b11c:	23ca      	movs	r3, #202	; 0xca
    b11e:	4a28      	ldr	r2, [pc, #160]	; (b1c0 <mbox_callback+0xb4>)
    b120:	f011 fce3 	bl	1caea <assert_print>
    b124:	21ca      	movs	r1, #202	; 0xca
    b126:	4826      	ldr	r0, [pc, #152]	; (b1c0 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    b128:	f011 fcd8 	bl	1cadc <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    b12c:	2200      	movs	r2, #0
    b12e:	4798      	blx	r3
    b130:	4606      	mov	r6, r0
    b132:	2800      	cmp	r0, #0
    b134:	d1f0      	bne.n	b118 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    b136:	f3c4 2907 	ubfx	r9, r4, #8, #8
    b13a:	4648      	mov	r0, r9
    b13c:	f00a fb96 	bl	1586c <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    b140:	fa5f f884 	uxtb.w	r8, r4
    b144:	4633      	mov	r3, r6
    b146:	4649      	mov	r1, r9
    b148:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    b14a:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    b14c:	4640      	mov	r0, r8
    b14e:	f7ff fedd 	bl	af0c <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    b152:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    b156:	4648      	mov	r0, r9
    b158:	f00a fb54 	bl	15804 <z_nrf_rtc_timer_compare_evt_address_get>
    b15c:	2d0f      	cmp	r5, #15
    b15e:	d90a      	bls.n	b176 <mbox_callback+0x6a>
    b160:	4918      	ldr	r1, [pc, #96]	; (b1c4 <mbox_callback+0xb8>)
    b162:	4816      	ldr	r0, [pc, #88]	; (b1bc <mbox_callback+0xb0>)
    b164:	f240 13e1 	movw	r3, #481	; 0x1e1
    b168:	4a17      	ldr	r2, [pc, #92]	; (b1c8 <mbox_callback+0xbc>)
    b16a:	f011 fcbe 	bl	1caea <assert_print>
    b16e:	f240 11e1 	movw	r1, #481	; 0x1e1
    b172:	4815      	ldr	r0, [pc, #84]	; (b1c8 <mbox_callback+0xbc>)
    b174:	e7d8      	b.n	b128 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b176:	4a15      	ldr	r2, [pc, #84]	; (b1cc <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    b178:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b17a:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    b17c:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    b180:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    b182:	b950      	cbnz	r0, b19a <mbox_callback+0x8e>
    b184:	4912      	ldr	r1, [pc, #72]	; (b1d0 <mbox_callback+0xc4>)
    b186:	480d      	ldr	r0, [pc, #52]	; (b1bc <mbox_callback+0xb0>)
    b188:	f44f 7312 	mov.w	r3, #584	; 0x248
    b18c:	4a11      	ldr	r2, [pc, #68]	; (b1d4 <mbox_callback+0xc8>)
    b18e:	f011 fcac 	bl	1caea <assert_print>
    b192:	f44f 7112 	mov.w	r1, #584	; 0x248
    b196:	480f      	ldr	r0, [pc, #60]	; (b1d4 <mbox_callback+0xc8>)
    b198:	e7c6      	b.n	b128 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    b19a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    b19e:	4b0e      	ldr	r3, [pc, #56]	; (b1d8 <mbox_callback+0xcc>)
    b1a0:	f107 0232 	add.w	r2, r7, #50	; 0x32
    b1a4:	9300      	str	r3, [sp, #0]
    b1a6:	4648      	mov	r0, r9
    b1a8:	4633      	mov	r3, r6
    b1aa:	9401      	str	r4, [sp, #4]
    b1ac:	0052      	lsls	r2, r2, #1
    b1ae:	f00a fc3b 	bl	15a28 <z_nrf_rtc_timer_set>
}
    b1b2:	b003      	add	sp, #12
    b1b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b1b8:	00021a50 	.word	0x00021a50
    b1bc:	00021547 	.word	0x00021547
    b1c0:	00021b02 	.word	0x00021b02
    b1c4:	00021a8f 	.word	0x00021a8f
    b1c8:	00021a5d 	.word	0x00021a5d
    b1cc:	4002a080 	.word	0x4002a080
    b1d0:	00021afe 	.word	0x00021afe
    b1d4:	00021a9a 	.word	0x00021a9a
    b1d8:	0000b05d 	.word	0x0000b05d

0000b1dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b1dc:	f014 b923 	b.w	1f426 <SystemInit>

0000b1e0 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    b1e0:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    b1e2:	aa01      	add	r2, sp, #4
    b1e4:	f014 f906 	bl	1f3f4 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    b1e8:	4604      	mov	r4, r0
    b1ea:	b168      	cbz	r0, b208 <soc_secure_gpio_pin_mcu_select+0x28>
    b1ec:	2316      	movs	r3, #22
    b1ee:	4a0e      	ldr	r2, [pc, #56]	; (b228 <soc_secure_gpio_pin_mcu_select+0x48>)
    b1f0:	490e      	ldr	r1, [pc, #56]	; (b22c <soc_secure_gpio_pin_mcu_select+0x4c>)
    b1f2:	480f      	ldr	r0, [pc, #60]	; (b230 <soc_secure_gpio_pin_mcu_select+0x50>)
    b1f4:	f011 fc79 	bl	1caea <assert_print>
    b1f8:	4621      	mov	r1, r4
    b1fa:	480e      	ldr	r0, [pc, #56]	; (b234 <soc_secure_gpio_pin_mcu_select+0x54>)
    b1fc:	f011 fc75 	bl	1caea <assert_print>
    b200:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    b202:	4809      	ldr	r0, [pc, #36]	; (b228 <soc_secure_gpio_pin_mcu_select+0x48>)
    b204:	f011 fc6a 	bl	1cadc <assert_post_action>
    b208:	9b01      	ldr	r3, [sp, #4]
    b20a:	b15b      	cbz	r3, b224 <soc_secure_gpio_pin_mcu_select+0x44>
    b20c:	2317      	movs	r3, #23
    b20e:	4a06      	ldr	r2, [pc, #24]	; (b228 <soc_secure_gpio_pin_mcu_select+0x48>)
    b210:	4909      	ldr	r1, [pc, #36]	; (b238 <soc_secure_gpio_pin_mcu_select+0x58>)
    b212:	4807      	ldr	r0, [pc, #28]	; (b230 <soc_secure_gpio_pin_mcu_select+0x50>)
    b214:	f011 fc69 	bl	1caea <assert_print>
    b218:	9901      	ldr	r1, [sp, #4]
    b21a:	4808      	ldr	r0, [pc, #32]	; (b23c <soc_secure_gpio_pin_mcu_select+0x5c>)
    b21c:	f011 fc65 	bl	1caea <assert_print>
    b220:	2117      	movs	r1, #23
    b222:	e7ee      	b.n	b202 <soc_secure_gpio_pin_mcu_select+0x22>
}
    b224:	b002      	add	sp, #8
    b226:	bd10      	pop	{r4, pc}
    b228:	00021b56 	.word	0x00021b56
    b22c:	00021b90 	.word	0x00021b90
    b230:	00021547 	.word	0x00021547
    b234:	00021bb0 	.word	0x00021bb0
    b238:	00021bca 	.word	0x00021bca
    b23c:	00021bd6 	.word	0x00021bd6

0000b240 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    b240:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    b242:	2200      	movs	r2, #0
{
    b244:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    b246:	490f      	ldr	r1, [pc, #60]	; (b284 <enable_logger+0x44>)
    b248:	480f      	ldr	r0, [pc, #60]	; (b288 <enable_logger+0x48>)
    b24a:	f014 ffc0 	bl	201ce <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b24e:	2200      	movs	r2, #0
    b250:	2300      	movs	r3, #0
    b252:	2400      	movs	r4, #0
    b254:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b258:	230e      	movs	r3, #14
    b25a:	4d0c      	ldr	r5, [pc, #48]	; (b28c <enable_logger+0x4c>)
    b25c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    b260:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b264:	4628      	mov	r0, r5
    b266:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b26a:	4b09      	ldr	r3, [pc, #36]	; (b290 <enable_logger+0x50>)
    b26c:	4909      	ldr	r1, [pc, #36]	; (b294 <enable_logger+0x54>)
    b26e:	9400      	str	r4, [sp, #0]
    b270:	f00d fd8a 	bl	18d88 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    b274:	4908      	ldr	r1, [pc, #32]	; (b298 <enable_logger+0x58>)
    b276:	4628      	mov	r0, r5
    b278:	f014 fe8d 	bl	1ff96 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    b27c:	4620      	mov	r0, r4
    b27e:	b009      	add	sp, #36	; 0x24
    b280:	bd30      	pop	{r4, r5, pc}
    b282:	bf00      	nop
    b284:	0000b3e1 	.word	0x0000b3e1
    b288:	20008ce0 	.word	0x20008ce0
    b28c:	20008850 	.word	0x20008850
    b290:	0000b6b1 	.word	0x0000b6b1
    b294:	2000a120 	.word	0x2000a120
    b298:	00021bf0 	.word	0x00021bf0

0000b29c <activate_foreach_backend>:
{
    b29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b2a0:	4604      	mov	r4, r0
	while (mask_cpy) {
    b2a2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    b2a4:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b2a8:	f8df 8050 	ldr.w	r8, [pc, #80]	; b2fc <activate_foreach_backend+0x60>
	while (mask_cpy) {
    b2ac:	b914      	cbnz	r4, b2b4 <activate_foreach_backend+0x18>
}
    b2ae:	4638      	mov	r0, r7
    b2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    b2b4:	fa94 f5a4 	rbit	r5, r4
    b2b8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    b2bc:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b2c0:	012e      	lsls	r6, r5, #4
    b2c2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    b2c6:	ea6f 0a03 	mvn.w	sl, r3
    b2ca:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b2ce:	7b2b      	ldrb	r3, [r5, #12]
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d0eb      	beq.n	b2ac <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    b2d4:	f858 3006 	ldr.w	r3, [r8, r6]
    b2d8:	691b      	ldr	r3, [r3, #16]
    b2da:	b94b      	cbnz	r3, b2f0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    b2dc:	4446      	add	r6, r8
			log_backend_enable(backend,
    b2de:	6873      	ldr	r3, [r6, #4]
    b2e0:	2204      	movs	r2, #4
    b2e2:	4628      	mov	r0, r5
    b2e4:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    b2e6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    b2ea:	f000 fae7 	bl	b8bc <log_backend_enable>
    b2ee:	e7dd      	b.n	b2ac <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    b2f0:	4628      	mov	r0, r5
    b2f2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b2f4:	2800      	cmp	r0, #0
    b2f6:	d1d9      	bne.n	b2ac <activate_foreach_backend+0x10>
    b2f8:	e7f0      	b.n	b2dc <activate_foreach_backend+0x40>
    b2fa:	bf00      	nop
    b2fc:	00020904 	.word	0x00020904

0000b300 <z_log_init>:
{
    b300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    b304:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b3c0 <z_log_init+0xc0>
    b308:	4c2e      	ldr	r4, [pc, #184]	; (b3c4 <z_log_init+0xc4>)
    b30a:	4680      	mov	r8, r0
    b30c:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    b310:	2b9f      	cmp	r3, #159	; 0x9f
{
    b312:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    b314:	d90b      	bls.n	b32e <z_log_init+0x2e>
    b316:	492c      	ldr	r1, [pc, #176]	; (b3c8 <z_log_init+0xc8>)
    b318:	f240 1315 	movw	r3, #277	; 0x115
    b31c:	4a2b      	ldr	r2, [pc, #172]	; (b3cc <z_log_init+0xcc>)
    b31e:	482c      	ldr	r0, [pc, #176]	; (b3d0 <z_log_init+0xd0>)
    b320:	f011 fbe3 	bl	1caea <assert_print>
    b324:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b328:	4828      	ldr	r0, [pc, #160]	; (b3cc <z_log_init+0xcc>)
    b32a:	f011 fbd7 	bl	1cadc <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    b32e:	4829      	ldr	r0, [pc, #164]	; (b3d4 <z_log_init+0xd4>)
    b330:	f011 fcf2 	bl	1cd18 <atomic_inc>
    b334:	4606      	mov	r6, r0
    b336:	b360      	cbz	r0, b392 <z_log_init+0x92>
	uint32_t mask = 0;
    b338:	2500      	movs	r5, #0
}
    b33a:	4628      	mov	r0, r5
    b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    b340:	7b23      	ldrb	r3, [r4, #12]
    b342:	b173      	cbz	r3, b362 <z_log_init+0x62>
	if (backend->api->init) {
    b344:	6823      	ldr	r3, [r4, #0]
    b346:	68db      	ldr	r3, [r3, #12]
    b348:	b10b      	cbz	r3, b34e <z_log_init+0x4e>
		backend->api->init(backend);
    b34a:	4620      	mov	r0, r4
    b34c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    b34e:	6823      	ldr	r3, [r4, #0]
    b350:	691b      	ldr	r3, [r3, #16]
    b352:	b9b3      	cbnz	r3, b382 <z_log_init+0x82>
				log_backend_enable(backend,
    b354:	6863      	ldr	r3, [r4, #4]
    b356:	2204      	movs	r2, #4
    b358:	4620      	mov	r0, r4
    b35a:	6819      	ldr	r1, [r3, #0]
    b35c:	f000 faae 	bl	b8bc <log_backend_enable>
			i++;
    b360:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b362:	3410      	adds	r4, #16
    b364:	454c      	cmp	r4, r9
    b366:	d918      	bls.n	b39a <z_log_init+0x9a>
    b368:	491b      	ldr	r1, [pc, #108]	; (b3d8 <z_log_init+0xd8>)
    b36a:	f44f 7391 	mov.w	r3, #290	; 0x122
    b36e:	4a17      	ldr	r2, [pc, #92]	; (b3cc <z_log_init+0xcc>)
    b370:	4817      	ldr	r0, [pc, #92]	; (b3d0 <z_log_init+0xd0>)
    b372:	f011 fbba 	bl	1caea <assert_print>
    b376:	4819      	ldr	r0, [pc, #100]	; (b3dc <z_log_init+0xdc>)
    b378:	f011 fbb7 	bl	1caea <assert_print>
    b37c:	f44f 7191 	mov.w	r1, #290	; 0x122
    b380:	e7d2      	b.n	b328 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    b382:	4620      	mov	r0, r4
    b384:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    b386:	2800      	cmp	r0, #0
    b388:	d0e4      	beq.n	b354 <z_log_init+0x54>
				mask |= BIT(i);
    b38a:	fa0a f306 	lsl.w	r3, sl, r6
    b38e:	431d      	orrs	r5, r3
    b390:	e7e6      	b.n	b360 <z_log_init+0x60>
	uint32_t mask = 0;
    b392:	4605      	mov	r5, r0
				mask |= BIT(i);
    b394:	f04f 0a01 	mov.w	sl, #1
    b398:	e7e4      	b.n	b364 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b39a:	d3d1      	bcc.n	b340 <z_log_init+0x40>
	if (blocking) {
    b39c:	f1b8 0f00 	cmp.w	r8, #0
    b3a0:	d0cb      	beq.n	b33a <z_log_init+0x3a>
		while (mask) {
    b3a2:	2d00      	cmp	r5, #0
    b3a4:	d0c8      	beq.n	b338 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    b3a6:	4628      	mov	r0, r5
    b3a8:	f7ff ff78 	bl	b29c <activate_foreach_backend>
    b3ac:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    b3ae:	2f00      	cmp	r7, #0
    b3b0:	d0f7      	beq.n	b3a2 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    b3b2:	2100      	movs	r1, #0
    b3b4:	f44f 70a4 	mov.w	r0, #328	; 0x148
    b3b8:	f00f ffba 	bl	1b330 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    b3bc:	e7f1      	b.n	b3a2 <z_log_init+0xa2>
    b3be:	bf00      	nop
    b3c0:	00020914 	.word	0x00020914
    b3c4:	00020904 	.word	0x00020904
    b3c8:	00021c25 	.word	0x00021c25
    b3cc:	00021bf8 	.word	0x00021bf8
    b3d0:	00021547 	.word	0x00021547
    b3d4:	20009744 	.word	0x20009744
    b3d8:	00021c49 	.word	0x00021c49
    b3dc:	00021c6a 	.word	0x00021c6a

0000b3e0 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    b3e0:	4801      	ldr	r0, [pc, #4]	; (b3e8 <log_process_thread_timer_expiry_fn+0x8>)
    b3e2:	f00e b8b1 	b.w	19548 <z_impl_k_sem_give>
    b3e6:	bf00      	nop
    b3e8:	2000860c 	.word	0x2000860c

0000b3ec <log_format_func_t_get>:
}
    b3ec:	4b01      	ldr	r3, [pc, #4]	; (b3f4 <log_format_func_t_get+0x8>)
    b3ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b3f2:	4770      	bx	lr
    b3f4:	00020a4c 	.word	0x00020a4c

0000b3f8 <log_set_timestamp_func>:
{
    b3f8:	b508      	push	{r3, lr}
    b3fa:	4603      	mov	r3, r0
    b3fc:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    b3fe:	b12b      	cbz	r3, b40c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    b400:	4a04      	ldr	r2, [pc, #16]	; (b414 <log_set_timestamp_func+0x1c>)
    b402:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    b404:	f000 fcfc 	bl	be00 <log_output_timestamp_freq_set>
	return 0;
    b408:	2000      	movs	r0, #0
}
    b40a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    b40c:	f06f 0015 	mvn.w	r0, #21
    b410:	e7fb      	b.n	b40a <log_set_timestamp_func+0x12>
    b412:	bf00      	nop
    b414:	20008190 	.word	0x20008190

0000b418 <z_log_notify_backend_enabled>:
{
    b418:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    b41a:	4c04      	ldr	r4, [pc, #16]	; (b42c <z_log_notify_backend_enabled+0x14>)
    b41c:	7823      	ldrb	r3, [r4, #0]
    b41e:	b913      	cbnz	r3, b426 <z_log_notify_backend_enabled+0xe>
    b420:	4803      	ldr	r0, [pc, #12]	; (b430 <z_log_notify_backend_enabled+0x18>)
    b422:	f00e f891 	bl	19548 <z_impl_k_sem_give>
	backend_attached = true;
    b426:	2301      	movs	r3, #1
    b428:	7023      	strb	r3, [r4, #0]
}
    b42a:	bd10      	pop	{r4, pc}
    b42c:	20009c6d 	.word	0x20009c6d
    b430:	2000860c 	.word	0x2000860c

0000b434 <z_log_dropped>:
{
    b434:	b510      	push	{r4, lr}
    b436:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    b438:	4806      	ldr	r0, [pc, #24]	; (b454 <z_log_dropped+0x20>)
    b43a:	f011 fc6d 	bl	1cd18 <atomic_inc>
	if (buffered) {
    b43e:	b13c      	cbz	r4, b450 <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b440:	4b05      	ldr	r3, [pc, #20]	; (b458 <z_log_dropped+0x24>)
    b442:	e8d3 1fef 	ldaex	r1, [r3]
    b446:	3901      	subs	r1, #1
    b448:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b44c:	2a00      	cmp	r2, #0
    b44e:	d1f8      	bne.n	b442 <z_log_dropped+0xe>
}
    b450:	bd10      	pop	{r4, pc}
    b452:	bf00      	nop
    b454:	2000973c 	.word	0x2000973c
    b458:	20009740 	.word	0x20009740

0000b45c <z_log_dropped_read_and_clear>:
}
    b45c:	2000      	movs	r0, #0
    b45e:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b460:	4b03      	ldr	r3, [pc, #12]	; (b470 <z_log_dropped_read_and_clear+0x14>)
    b462:	e8d3 0fef 	ldaex	r0, [r3]
    b466:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b46a:	2a00      	cmp	r2, #0
    b46c:	d1f9      	bne.n	b462 <z_log_dropped_read_and_clear+0x6>
    b46e:	4770      	bx	lr
    b470:	2000973c 	.word	0x2000973c

0000b474 <dropped_notify>:
{
    b474:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    b476:	f7ff fff1 	bl	b45c <z_log_dropped_read_and_clear>
    b47a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b47c:	4c0f      	ldr	r4, [pc, #60]	; (b4bc <dropped_notify+0x48>)
    b47e:	4e10      	ldr	r6, [pc, #64]	; (b4c0 <dropped_notify+0x4c>)
    b480:	42b4      	cmp	r4, r6
    b482:	d919      	bls.n	b4b8 <dropped_notify+0x44>
    b484:	490f      	ldr	r1, [pc, #60]	; (b4c4 <dropped_notify+0x50>)
    b486:	f240 13cd 	movw	r3, #461	; 0x1cd
    b48a:	4a0f      	ldr	r2, [pc, #60]	; (b4c8 <dropped_notify+0x54>)
    b48c:	480f      	ldr	r0, [pc, #60]	; (b4cc <dropped_notify+0x58>)
    b48e:	f011 fb2c 	bl	1caea <assert_print>
    b492:	480f      	ldr	r0, [pc, #60]	; (b4d0 <dropped_notify+0x5c>)
    b494:	f011 fb29 	bl	1caea <assert_print>
    b498:	f240 11cd 	movw	r1, #461	; 0x1cd
    b49c:	480a      	ldr	r0, [pc, #40]	; (b4c8 <dropped_notify+0x54>)
    b49e:	f011 fb1d 	bl	1cadc <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    b4a2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b4a4:	795b      	ldrb	r3, [r3, #5]
    b4a6:	b12b      	cbz	r3, b4b4 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    b4a8:	6823      	ldr	r3, [r4, #0]
    b4aa:	685b      	ldr	r3, [r3, #4]
    b4ac:	b113      	cbz	r3, b4b4 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    b4ae:	4629      	mov	r1, r5
    b4b0:	4620      	mov	r0, r4
    b4b2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b4b4:	3410      	adds	r4, #16
    b4b6:	e7e3      	b.n	b480 <dropped_notify+0xc>
    b4b8:	d3f3      	bcc.n	b4a2 <dropped_notify+0x2e>
}
    b4ba:	bd70      	pop	{r4, r5, r6, pc}
    b4bc:	00020904 	.word	0x00020904
    b4c0:	00020914 	.word	0x00020914
    b4c4:	00021c49 	.word	0x00021c49
    b4c8:	00021bf8 	.word	0x00021bf8
    b4cc:	00021547 	.word	0x00021547
    b4d0:	00021c6a 	.word	0x00021c6a

0000b4d4 <z_log_msg_init>:
{
    b4d4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    b4d6:	4c04      	ldr	r4, [pc, #16]	; (b4e8 <z_log_msg_init+0x14>)
    b4d8:	4904      	ldr	r1, [pc, #16]	; (b4ec <z_log_msg_init+0x18>)
    b4da:	4620      	mov	r0, r4
    b4dc:	f7ff face 	bl	aa7c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    b4e0:	4b03      	ldr	r3, [pc, #12]	; (b4f0 <z_log_msg_init+0x1c>)
    b4e2:	601c      	str	r4, [r3, #0]
}
    b4e4:	bd10      	pop	{r4, pc}
    b4e6:	bf00      	nop
    b4e8:	200084cc 	.word	0x200084cc
    b4ec:	00020a38 	.word	0x00020a38
    b4f0:	20009734 	.word	0x20009734

0000b4f4 <log_core_init>:
{
    b4f4:	b508      	push	{r3, lr}
	panic_mode = false;
    b4f6:	2300      	movs	r3, #0
    b4f8:	4a06      	ldr	r2, [pc, #24]	; (b514 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    b4fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    b4fe:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    b500:	4a05      	ldr	r2, [pc, #20]	; (b518 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    b502:	4806      	ldr	r0, [pc, #24]	; (b51c <log_core_init+0x28>)
	dropped_cnt = 0;
    b504:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    b506:	f7ff ff77 	bl	b3f8 <log_set_timestamp_func>
}
    b50a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    b50e:	f7ff bfe1 	b.w	b4d4 <z_log_msg_init>
    b512:	bf00      	nop
    b514:	20009c6e 	.word	0x20009c6e
    b518:	2000973c 	.word	0x2000973c
    b51c:	0001cd15 	.word	0x0001cd15

0000b520 <z_log_msg_alloc>:
{
    b520:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    b522:	2200      	movs	r2, #0
    b524:	2300      	movs	r3, #0
    b526:	4801      	ldr	r0, [pc, #4]	; (b52c <z_log_msg_alloc+0xc>)
    b528:	f7ff bada 	b.w	aae0 <mpsc_pbuf_alloc>
    b52c:	200084cc 	.word	0x200084cc

0000b530 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    b530:	4801      	ldr	r0, [pc, #4]	; (b538 <z_log_msg_local_claim+0x8>)
    b532:	f7ff bbe9 	b.w	ad08 <mpsc_pbuf_claim>
    b536:	bf00      	nop
    b538:	200084cc 	.word	0x200084cc

0000b53c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    b53c:	4b02      	ldr	r3, [pc, #8]	; (b548 <z_log_msg_free+0xc>)
{
    b53e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    b540:	6818      	ldr	r0, [r3, #0]
    b542:	f7ff bc67 	b.w	ae14 <mpsc_pbuf_free>
    b546:	bf00      	nop
    b548:	20009734 	.word	0x20009734

0000b54c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    b54c:	4801      	ldr	r0, [pc, #4]	; (b554 <z_log_msg_pending+0x8>)
    b54e:	f011 bb86 	b.w	1cc5e <mpsc_pbuf_is_pending>
    b552:	bf00      	nop
    b554:	200084cc 	.word	0x200084cc

0000b558 <z_impl_log_process>:
{
    b558:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    b55a:	4b2e      	ldr	r3, [pc, #184]	; (b614 <z_impl_log_process+0xbc>)
    b55c:	7818      	ldrb	r0, [r3, #0]
    b55e:	2800      	cmp	r0, #0
    b560:	d057      	beq.n	b612 <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    b562:	f7ff ffe5 	bl	b530 <z_log_msg_local_claim>
	if (msg) {
    b566:	4605      	mov	r5, r0
    b568:	b340      	cbz	r0, b5bc <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b56a:	4b2b      	ldr	r3, [pc, #172]	; (b618 <z_impl_log_process+0xc0>)
    b56c:	e8d3 1fef 	ldaex	r1, [r3]
    b570:	3901      	subs	r1, #1
    b572:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b576:	2a00      	cmp	r2, #0
    b578:	d1f8      	bne.n	b56c <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b57a:	4c28      	ldr	r4, [pc, #160]	; (b61c <z_impl_log_process+0xc4>)
    b57c:	4e28      	ldr	r6, [pc, #160]	; (b620 <z_impl_log_process+0xc8>)
    b57e:	42b4      	cmp	r4, r6
    b580:	d918      	bls.n	b5b4 <z_impl_log_process+0x5c>
    b582:	4928      	ldr	r1, [pc, #160]	; (b624 <z_impl_log_process+0xcc>)
    b584:	f240 13c1 	movw	r3, #449	; 0x1c1
    b588:	4a27      	ldr	r2, [pc, #156]	; (b628 <z_impl_log_process+0xd0>)
    b58a:	4828      	ldr	r0, [pc, #160]	; (b62c <z_impl_log_process+0xd4>)
    b58c:	f011 faad 	bl	1caea <assert_print>
    b590:	4827      	ldr	r0, [pc, #156]	; (b630 <z_impl_log_process+0xd8>)
    b592:	f011 faaa 	bl	1caea <assert_print>
    b596:	f240 11c1 	movw	r1, #449	; 0x1c1
    b59a:	4823      	ldr	r0, [pc, #140]	; (b628 <z_impl_log_process+0xd0>)
    b59c:	f011 fa9e 	bl	1cadc <assert_post_action>
	return backend->cb->active;
    b5a0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    b5a2:	795b      	ldrb	r3, [r3, #5]
    b5a4:	b123      	cbz	r3, b5b0 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    b5a6:	6823      	ldr	r3, [r4, #0]
    b5a8:	4629      	mov	r1, r5
    b5aa:	4620      	mov	r0, r4
    b5ac:	681b      	ldr	r3, [r3, #0]
    b5ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b5b0:	3410      	adds	r4, #16
    b5b2:	e7e4      	b.n	b57e <z_impl_log_process+0x26>
    b5b4:	d3f4      	bcc.n	b5a0 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    b5b6:	4628      	mov	r0, r5
    b5b8:	f7ff ffc0 	bl	b53c <z_log_msg_free>
	return dropped_cnt > 0;
    b5bc:	4b1d      	ldr	r3, [pc, #116]	; (b634 <z_impl_log_process+0xdc>)
    b5be:	4c1e      	ldr	r4, [pc, #120]	; (b638 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    b5c0:	681b      	ldr	r3, [r3, #0]
    b5c2:	2b00      	cmp	r3, #0
    b5c4:	dd19      	ble.n	b5fa <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    b5c6:	f014 fdda 	bl	2017e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b5ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b5ce:	fba0 0302 	umull	r0, r3, r0, r2
    b5d2:	fb02 3101 	mla	r1, r2, r1, r3
    b5d6:	0bc3      	lsrs	r3, r0, #15
    b5d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b5dc:	e9d4 2000 	ldrd	r2, r0, [r4]
    b5e0:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    b5e2:	f240 32e9 	movw	r2, #1001	; 0x3e9
    b5e6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b5ea:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    b5ee:	4293      	cmp	r3, r2
    b5f0:	f171 0100 	sbcs.w	r1, r1, #0
    b5f4:	d301      	bcc.n	b5fa <z_impl_log_process+0xa2>
				dropped_notify();
    b5f6:	f7ff ff3d 	bl	b474 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    b5fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    b5fe:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    b602:	f142 0200 	adc.w	r2, r2, #0
    b606:	e9c4 3200 	strd	r3, r2, [r4]
}
    b60a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    b60e:	f7ff bf9d 	b.w	b54c <z_log_msg_pending>
}
    b612:	bd70      	pop	{r4, r5, r6, pc}
    b614:	20009c6d 	.word	0x20009c6d
    b618:	20009740 	.word	0x20009740
    b61c:	00020904 	.word	0x00020904
    b620:	00020914 	.word	0x00020914
    b624:	00021c49 	.word	0x00021c49
    b628:	00021bf8 	.word	0x00021bf8
    b62c:	00021547 	.word	0x00021547
    b630:	00021c6a 	.word	0x00021c6a
    b634:	2000973c 	.word	0x2000973c
    b638:	20008cd8 	.word	0x20008cd8

0000b63c <z_impl_log_panic>:
{
    b63c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    b63e:	4d15      	ldr	r5, [pc, #84]	; (b694 <z_impl_log_panic+0x58>)
    b640:	7829      	ldrb	r1, [r5, #0]
    b642:	bb29      	cbnz	r1, b690 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    b644:	2001      	movs	r0, #1
    b646:	f7ff fe5b 	bl	b300 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b64a:	4c13      	ldr	r4, [pc, #76]	; (b698 <z_impl_log_panic+0x5c>)
    b64c:	4e13      	ldr	r6, [pc, #76]	; (b69c <z_impl_log_panic+0x60>)
    b64e:	42b4      	cmp	r4, r6
    b650:	d917      	bls.n	b682 <z_impl_log_panic+0x46>
    b652:	4913      	ldr	r1, [pc, #76]	; (b6a0 <z_impl_log_panic+0x64>)
    b654:	f44f 73c2 	mov.w	r3, #388	; 0x184
    b658:	4a12      	ldr	r2, [pc, #72]	; (b6a4 <z_impl_log_panic+0x68>)
    b65a:	4813      	ldr	r0, [pc, #76]	; (b6a8 <z_impl_log_panic+0x6c>)
    b65c:	f011 fa45 	bl	1caea <assert_print>
    b660:	4812      	ldr	r0, [pc, #72]	; (b6ac <z_impl_log_panic+0x70>)
    b662:	f011 fa42 	bl	1caea <assert_print>
    b666:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b66a:	480e      	ldr	r0, [pc, #56]	; (b6a4 <z_impl_log_panic+0x68>)
    b66c:	f011 fa36 	bl	1cadc <assert_post_action>
	return backend->cb->active;
    b670:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b672:	795b      	ldrb	r3, [r3, #5]
    b674:	b11b      	cbz	r3, b67e <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    b676:	6823      	ldr	r3, [r4, #0]
    b678:	4620      	mov	r0, r4
    b67a:	689b      	ldr	r3, [r3, #8]
    b67c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b67e:	3410      	adds	r4, #16
    b680:	e7e5      	b.n	b64e <z_impl_log_panic+0x12>
    b682:	d3f5      	bcc.n	b670 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    b684:	f7ff ff68 	bl	b558 <z_impl_log_process>
		while (log_process() == true) {
    b688:	2800      	cmp	r0, #0
    b68a:	d1fb      	bne.n	b684 <z_impl_log_panic+0x48>
	panic_mode = true;
    b68c:	2301      	movs	r3, #1
    b68e:	702b      	strb	r3, [r5, #0]
}
    b690:	bd70      	pop	{r4, r5, r6, pc}
    b692:	bf00      	nop
    b694:	20009c6e 	.word	0x20009c6e
    b698:	00020904 	.word	0x00020904
    b69c:	00020914 	.word	0x00020914
    b6a0:	00021c49 	.word	0x00021c49
    b6a4:	00021bf8 	.word	0x00021bf8
    b6a8:	00021547 	.word	0x00021547
    b6ac:	00021c6a 	.word	0x00021c6a

0000b6b0 <log_process_thread_func>:
{
    b6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    b6b4:	4b2f      	ldr	r3, [pc, #188]	; (b774 <log_process_thread_func+0xc4>)
    b6b6:	4f30      	ldr	r7, [pc, #192]	; (b778 <log_process_thread_func+0xc8>)
    b6b8:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    b6ba:	091b      	lsrs	r3, r3, #4
    b6bc:	d10b      	bne.n	b6d6 <log_process_thread_func+0x26>
    b6be:	492f      	ldr	r1, [pc, #188]	; (b77c <log_process_thread_func+0xcc>)
    b6c0:	f240 3347 	movw	r3, #839	; 0x347
    b6c4:	4a2e      	ldr	r2, [pc, #184]	; (b780 <log_process_thread_func+0xd0>)
    b6c6:	482f      	ldr	r0, [pc, #188]	; (b784 <log_process_thread_func+0xd4>)
    b6c8:	f011 fa0f 	bl	1caea <assert_print>
    b6cc:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b6d0:	482b      	ldr	r0, [pc, #172]	; (b780 <log_process_thread_func+0xd0>)
    b6d2:	f011 fa03 	bl	1cadc <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    b6d6:	2100      	movs	r1, #0
    b6d8:	4608      	mov	r0, r1
    b6da:	f7ff fe11 	bl	b300 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b6de:	4604      	mov	r4, r0
    b6e0:	b340      	cbz	r0, b734 <log_process_thread_func+0x84>
    b6e2:	f240 6867 	movw	r8, #1639	; 0x667
    b6e6:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    b6ea:	f00f fe55 	bl	1b398 <z_impl_z_current_get>
	proc_tid = process_tid;
    b6ee:	4b26      	ldr	r3, [pc, #152]	; (b788 <log_process_thread_func+0xd8>)
    b6f0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b6f2:	b130      	cbz	r0, b702 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    b6f4:	4b25      	ldr	r3, [pc, #148]	; (b78c <log_process_thread_func+0xdc>)
	    process_tid &&
    b6f6:	681b      	ldr	r3, [r3, #0]
    b6f8:	2b09      	cmp	r3, #9
    b6fa:	dd02      	ble.n	b702 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    b6fc:	4824      	ldr	r0, [pc, #144]	; (b790 <log_process_thread_func+0xe0>)
    b6fe:	f00d ff23 	bl	19548 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b702:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    b704:	f8df a088 	ldr.w	sl, [pc, #136]	; b790 <log_process_thread_func+0xe0>
		if (activate_mask) {
    b708:	b144      	cbz	r4, b71c <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    b70a:	4620      	mov	r0, r4
    b70c:	f7ff fdc6 	bl	b29c <activate_foreach_backend>
			if (!activate_mask) {
    b710:	4604      	mov	r4, r0
    b712:	b918      	cbnz	r0, b71c <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    b714:	f04f 38ff 	mov.w	r8, #4294967295
    b718:	f04f 39ff 	mov.w	r9, #4294967295
    b71c:	f7ff ff1c 	bl	b558 <z_impl_log_process>
		if (log_process() == false) {
    b720:	4606      	mov	r6, r0
    b722:	b928      	cbnz	r0, b730 <log_process_thread_func+0x80>
			if (processed_any) {
    b724:	b95d      	cbnz	r5, b73e <log_process_thread_func+0x8e>
    b726:	4642      	mov	r2, r8
    b728:	464b      	mov	r3, r9
    b72a:	4650      	mov	r0, sl
    b72c:	f00d ff50 	bl	195d0 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    b730:	4635      	mov	r5, r6
    b732:	e7e9      	b.n	b708 <log_process_thread_func+0x58>
    b734:	f04f 38ff 	mov.w	r8, #4294967295
    b738:	f04f 39ff 	mov.w	r9, #4294967295
    b73c:	e7d5      	b.n	b6ea <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b73e:	4d0d      	ldr	r5, [pc, #52]	; (b774 <log_process_thread_func+0xc4>)
    b740:	e008      	b.n	b754 <log_process_thread_func+0xa4>
    b742:	d2f0      	bcs.n	b726 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    b744:	682b      	ldr	r3, [r5, #0]
    b746:	699b      	ldr	r3, [r3, #24]
    b748:	b11b      	cbz	r3, b752 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    b74a:	2200      	movs	r2, #0
    b74c:	4628      	mov	r0, r5
    b74e:	4611      	mov	r1, r2
    b750:	4798      	blx	r3
    b752:	3510      	adds	r5, #16
    b754:	42bd      	cmp	r5, r7
    b756:	d9f4      	bls.n	b742 <log_process_thread_func+0x92>
    b758:	490e      	ldr	r1, [pc, #56]	; (b794 <log_process_thread_func+0xe4>)
    b75a:	f240 333b 	movw	r3, #827	; 0x33b
    b75e:	4a08      	ldr	r2, [pc, #32]	; (b780 <log_process_thread_func+0xd0>)
    b760:	4808      	ldr	r0, [pc, #32]	; (b784 <log_process_thread_func+0xd4>)
    b762:	f011 f9c2 	bl	1caea <assert_print>
    b766:	480c      	ldr	r0, [pc, #48]	; (b798 <log_process_thread_func+0xe8>)
    b768:	f011 f9bf 	bl	1caea <assert_print>
    b76c:	f240 313b 	movw	r1, #827	; 0x33b
    b770:	e7ae      	b.n	b6d0 <log_process_thread_func+0x20>
    b772:	bf00      	nop
    b774:	00020904 	.word	0x00020904
    b778:	00020914 	.word	0x00020914
    b77c:	00021c89 	.word	0x00021c89
    b780:	00021bf8 	.word	0x00021bf8
    b784:	00021547 	.word	0x00021547
    b788:	20009738 	.word	0x20009738
    b78c:	20009740 	.word	0x20009740
    b790:	2000860c 	.word	0x2000860c
    b794:	00021c49 	.word	0x00021c49
    b798:	00021c6a 	.word	0x00021c6a

0000b79c <z_log_msg_post_finalize>:
{
    b79c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    b79e:	482b      	ldr	r0, [pc, #172]	; (b84c <z_log_msg_post_finalize+0xb0>)
    b7a0:	f011 faba 	bl	1cd18 <atomic_inc>
	if (panic_mode) {
    b7a4:	4b2a      	ldr	r3, [pc, #168]	; (b850 <z_log_msg_post_finalize+0xb4>)
    b7a6:	781b      	ldrb	r3, [r3, #0]
    b7a8:	2b00      	cmp	r3, #0
    b7aa:	d034      	beq.n	b816 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    b7ac:	f04f 0320 	mov.w	r3, #32
    b7b0:	f3ef 8411 	mrs	r4, BASEPRI
    b7b4:	f383 8812 	msr	BASEPRI_MAX, r3
    b7b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b7bc:	4825      	ldr	r0, [pc, #148]	; (b854 <z_log_msg_post_finalize+0xb8>)
    b7be:	f00d fbad 	bl	18f1c <z_spin_lock_valid>
    b7c2:	b968      	cbnz	r0, b7e0 <z_log_msg_post_finalize+0x44>
    b7c4:	2394      	movs	r3, #148	; 0x94
    b7c6:	4a24      	ldr	r2, [pc, #144]	; (b858 <z_log_msg_post_finalize+0xbc>)
    b7c8:	4924      	ldr	r1, [pc, #144]	; (b85c <z_log_msg_post_finalize+0xc0>)
    b7ca:	4825      	ldr	r0, [pc, #148]	; (b860 <z_log_msg_post_finalize+0xc4>)
    b7cc:	f011 f98d 	bl	1caea <assert_print>
    b7d0:	4920      	ldr	r1, [pc, #128]	; (b854 <z_log_msg_post_finalize+0xb8>)
    b7d2:	4824      	ldr	r0, [pc, #144]	; (b864 <z_log_msg_post_finalize+0xc8>)
    b7d4:	f011 f989 	bl	1caea <assert_print>
    b7d8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7da:	481f      	ldr	r0, [pc, #124]	; (b858 <z_log_msg_post_finalize+0xbc>)
    b7dc:	f011 f97e 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
    b7e0:	481c      	ldr	r0, [pc, #112]	; (b854 <z_log_msg_post_finalize+0xb8>)
    b7e2:	f00d fbb7 	bl	18f54 <z_spin_lock_set_owner>
    b7e6:	f7ff feb7 	bl	b558 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7ea:	481a      	ldr	r0, [pc, #104]	; (b854 <z_log_msg_post_finalize+0xb8>)
    b7ec:	f00d fba4 	bl	18f38 <z_spin_unlock_valid>
    b7f0:	b958      	cbnz	r0, b80a <z_log_msg_post_finalize+0x6e>
    b7f2:	23c2      	movs	r3, #194	; 0xc2
    b7f4:	4a18      	ldr	r2, [pc, #96]	; (b858 <z_log_msg_post_finalize+0xbc>)
    b7f6:	491c      	ldr	r1, [pc, #112]	; (b868 <z_log_msg_post_finalize+0xcc>)
    b7f8:	4819      	ldr	r0, [pc, #100]	; (b860 <z_log_msg_post_finalize+0xc4>)
    b7fa:	f011 f976 	bl	1caea <assert_print>
    b7fe:	4915      	ldr	r1, [pc, #84]	; (b854 <z_log_msg_post_finalize+0xb8>)
    b800:	481a      	ldr	r0, [pc, #104]	; (b86c <z_log_msg_post_finalize+0xd0>)
    b802:	f011 f972 	bl	1caea <assert_print>
    b806:	21c2      	movs	r1, #194	; 0xc2
    b808:	e7e7      	b.n	b7da <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    b80a:	f384 8811 	msr	BASEPRI, r4
    b80e:	f3bf 8f6f 	isb	sy
}
    b812:	b002      	add	sp, #8
    b814:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    b816:	4b16      	ldr	r3, [pc, #88]	; (b870 <z_log_msg_post_finalize+0xd4>)
    b818:	681b      	ldr	r3, [r3, #0]
    b81a:	2b00      	cmp	r3, #0
    b81c:	d0f9      	beq.n	b812 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    b81e:	b950      	cbnz	r0, b836 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    b820:	2200      	movs	r2, #0
    b822:	2300      	movs	r3, #0
    b824:	4813      	ldr	r0, [pc, #76]	; (b874 <z_log_msg_post_finalize+0xd8>)
    b826:	e9cd 2300 	strd	r2, r3, [sp]
    b82a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    b82e:	2300      	movs	r3, #0
    b830:	f010 fa9c 	bl	1bd6c <z_impl_k_timer_start>
    b834:	e7ed      	b.n	b812 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    b836:	280a      	cmp	r0, #10
    b838:	d1eb      	bne.n	b812 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    b83a:	480e      	ldr	r0, [pc, #56]	; (b874 <z_log_msg_post_finalize+0xd8>)
    b83c:	f014 fcd3 	bl	201e6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    b840:	480d      	ldr	r0, [pc, #52]	; (b878 <z_log_msg_post_finalize+0xdc>)
}
    b842:	b002      	add	sp, #8
    b844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b848:	f00d be7e 	b.w	19548 <z_impl_k_sem_give>
    b84c:	20009740 	.word	0x20009740
    b850:	20009c6e 	.word	0x20009c6e
    b854:	20009730 	.word	0x20009730
    b858:	0002197b 	.word	0x0002197b
    b85c:	000219d4 	.word	0x000219d4
    b860:	00021547 	.word	0x00021547
    b864:	000219e9 	.word	0x000219e9
    b868:	000219a8 	.word	0x000219a8
    b86c:	000219bf 	.word	0x000219bf
    b870:	20009738 	.word	0x20009738
    b874:	20008ce0 	.word	0x20008ce0
    b878:	2000860c 	.word	0x2000860c

0000b87c <z_log_msg_commit>:
{
    b87c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    b87e:	4b06      	ldr	r3, [pc, #24]	; (b898 <z_log_msg_commit+0x1c>)
{
    b880:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    b882:	681b      	ldr	r3, [r3, #0]
    b884:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    b886:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    b888:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    b88a:	4804      	ldr	r0, [pc, #16]	; (b89c <z_log_msg_commit+0x20>)
    b88c:	f7ff f9e6 	bl	ac5c <mpsc_pbuf_commit>
}
    b890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    b894:	f7ff bf82 	b.w	b79c <z_log_msg_post_finalize>
    b898:	20008190 	.word	0x20008190
    b89c:	200084cc 	.word	0x200084cc

0000b8a0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    b8a0:	4a04      	ldr	r2, [pc, #16]	; (b8b4 <log_source_name_get+0x14>)
    b8a2:	4b05      	ldr	r3, [pc, #20]	; (b8b8 <log_source_name_get+0x18>)
    b8a4:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    b8a6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    b8aa:	bf34      	ite	cc
    b8ac:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    b8b0:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    b8b2:	4770      	bx	lr
    b8b4:	00020804 	.word	0x00020804
    b8b8:	00020904 	.word	0x00020904

0000b8bc <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    b8bc:	4b0e      	ldr	r3, [pc, #56]	; (b8f8 <log_backend_enable+0x3c>)
{
    b8be:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    b8c0:	1ac3      	subs	r3, r0, r3
    b8c2:	111b      	asrs	r3, r3, #4
    b8c4:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    b8c6:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    b8c8:	b948      	cbnz	r0, b8de <log_backend_enable+0x22>
    b8ca:	490c      	ldr	r1, [pc, #48]	; (b8fc <log_backend_enable+0x40>)
    b8cc:	480c      	ldr	r0, [pc, #48]	; (b900 <log_backend_enable+0x44>)
    b8ce:	23de      	movs	r3, #222	; 0xde
    b8d0:	4a0c      	ldr	r2, [pc, #48]	; (b904 <log_backend_enable+0x48>)
    b8d2:	f011 f90a 	bl	1caea <assert_print>
    b8d6:	21de      	movs	r1, #222	; 0xde
    b8d8:	480a      	ldr	r0, [pc, #40]	; (b904 <log_backend_enable+0x48>)
    b8da:	f011 f8ff 	bl	1cadc <assert_post_action>
	backend->cb->id = id;
    b8de:	6844      	ldr	r4, [r0, #4]
    b8e0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    b8e2:	6843      	ldr	r3, [r0, #4]
    b8e4:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    b8e6:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    b8e8:	6843      	ldr	r3, [r0, #4]
    b8ea:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    b8ec:	6843      	ldr	r3, [r0, #4]
    b8ee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    b8f4:	f7ff bd90 	b.w	b418 <z_log_notify_backend_enabled>
    b8f8:	00020904 	.word	0x00020904
    b8fc:	00021d29 	.word	0x00021d29
    b900:	00021547 	.word	0x00021547
    b904:	00021cf1 	.word	0x00021cf1

0000b908 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    b90c:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    b910:	b08f      	sub	sp, #60	; 0x3c
    b912:	f3c1 2649 	ubfx	r6, r1, #9, #10
    b916:	460d      	mov	r5, r1
    b918:	4690      	mov	r8, r2
    b91a:	4699      	mov	r9, r3
    b91c:	9005      	str	r0, [sp, #20]
    b91e:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    b920:	2e00      	cmp	r6, #0
    b922:	d03d      	beq.n	b9a0 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    b924:	f04f 0b04 	mov.w	fp, #4
    b928:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    b92c:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    b92e:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    b930:	4631      	mov	r1, r6
    b932:	ab0b      	add	r3, sp, #44	; 0x2c
    b934:	4640      	mov	r0, r8
    b936:	f8cd b008 	str.w	fp, [sp, #8]
    b93a:	9701      	str	r7, [sp, #4]
    b93c:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    b940:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    b944:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    b946:	9607      	str	r6, [sp, #28]
    b948:	f7fd fe64 	bl	9614 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    b94c:	f3c0 0309 	ubfx	r3, r0, #0, #10
    b950:	1918      	adds	r0, r3, r4
    b952:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b956:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    b958:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b95a:	f363 2552 	bfi	r5, r3, #9, #10
    b95e:	9306      	str	r3, [sp, #24]
    b960:	f7ff fdde 	bl	b520 <z_log_msg_alloc>
		if (msg) {
    b964:	4604      	mov	r4, r0
    b966:	b308      	cbz	r0, b9ac <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    b968:	2200      	movs	r2, #0
    b96a:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    b96c:	3010      	adds	r0, #16
    b96e:	900b      	str	r0, [sp, #44]	; 0x2c
    b970:	930c      	str	r3, [sp, #48]	; 0x30
    b972:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    b974:	4640      	mov	r0, r8
    b976:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    b97a:	4a12      	ldr	r2, [pc, #72]	; (b9c4 <z_impl_z_log_msg_static_create+0xbc>)
    b97c:	9907      	ldr	r1, [sp, #28]
    b97e:	f8cd a000 	str.w	sl, [sp]
    b982:	ab0b      	add	r3, sp, #44	; 0x2c
    b984:	f7fd fe46 	bl	9614 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    b988:	2800      	cmp	r0, #0
    b98a:	da0f      	bge.n	b9ac <z_impl_z_log_msg_static_create+0xa4>
    b98c:	490e      	ldr	r1, [pc, #56]	; (b9c8 <z_impl_z_log_msg_static_create+0xc0>)
    b98e:	480f      	ldr	r0, [pc, #60]	; (b9cc <z_impl_z_log_msg_static_create+0xc4>)
    b990:	2349      	movs	r3, #73	; 0x49
    b992:	4a0f      	ldr	r2, [pc, #60]	; (b9d0 <z_impl_z_log_msg_static_create+0xc8>)
    b994:	f011 f8a9 	bl	1caea <assert_print>
    b998:	2149      	movs	r1, #73	; 0x49
    b99a:	480d      	ldr	r0, [pc, #52]	; (b9d0 <z_impl_z_log_msg_static_create+0xc8>)
    b99c:	f011 f89e 	bl	1cadc <assert_post_action>
    b9a0:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    b9a4:	0880      	lsrs	r0, r0, #2
    b9a6:	f7ff fdbb 	bl	b520 <z_log_msg_alloc>
    b9aa:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    b9ac:	f366 2552 	bfi	r5, r6, #9, #10
    b9b0:	464b      	mov	r3, r9
    b9b2:	462a      	mov	r2, r5
    b9b4:	4620      	mov	r0, r4
    b9b6:	9905      	ldr	r1, [sp, #20]
}
    b9b8:	b00f      	add	sp, #60	; 0x3c
    b9ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    b9be:	f011 b9cf 	b.w	1cd60 <z_log_msg_finalize>
    b9c2:	bf00      	nop
    b9c4:	0001cd35 	.word	0x0001cd35
    b9c8:	00021d75 	.word	0x00021d75
    b9cc:	00021547 	.word	0x00021547
    b9d0:	00021d49 	.word	0x00021d49

0000b9d4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    b9d4:	b40e      	push	{r1, r2, r3}
    b9d6:	b503      	push	{r0, r1, lr}
    b9d8:	ab03      	add	r3, sp, #12
    b9da:	f853 2b04 	ldr.w	r2, [r3], #4
    b9de:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b9e0:	4804      	ldr	r0, [pc, #16]	; (b9f4 <print_formatted+0x20>)
	va_start(args, fmt);
    b9e2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    b9e4:	f011 f9e3 	bl	1cdae <cbvprintf>
	va_end(args);

	return length;
}
    b9e8:	b002      	add	sp, #8
    b9ea:	f85d eb04 	ldr.w	lr, [sp], #4
    b9ee:	b003      	add	sp, #12
    b9f0:	4770      	bx	lr
    b9f2:	bf00      	nop
    b9f4:	0000ba15 	.word	0x0000ba15

0000b9f8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    b9f8:	06ca      	lsls	r2, r1, #27
    b9fa:	d405      	bmi.n	ba08 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    b9fc:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    b9fe:	bf4c      	ite	mi
    ba00:	4902      	ldrmi	r1, [pc, #8]	; (ba0c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    ba02:	4903      	ldrpl	r1, [pc, #12]	; (ba10 <newline_print+0x18>)
    ba04:	f7ff bfe6 	b.w	b9d4 <print_formatted>
	}
}
    ba08:	4770      	bx	lr
    ba0a:	bf00      	nop
    ba0c:	00023bf9 	.word	0x00023bf9
    ba10:	00024dbd 	.word	0x00024dbd

0000ba14 <out_func>:
{
    ba14:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    ba16:	684b      	ldr	r3, [r1, #4]
{
    ba18:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    ba1a:	681a      	ldr	r2, [r3, #0]
    ba1c:	68cb      	ldr	r3, [r1, #12]
{
    ba1e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    ba20:	429a      	cmp	r2, r3
    ba22:	d102      	bne.n	ba2a <out_func+0x16>
		log_output_flush(out_ctx);
    ba24:	4608      	mov	r0, r1
    ba26:	f011 f9c9 	bl	1cdbc <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ba2a:	6863      	ldr	r3, [r4, #4]
    ba2c:	e8d3 2fef 	ldaex	r2, [r3]
    ba30:	1c51      	adds	r1, r2, #1
    ba32:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ba36:	2800      	cmp	r0, #0
    ba38:	d1f8      	bne.n	ba2c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    ba3a:	68a3      	ldr	r3, [r4, #8]
    ba3c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    ba3e:	6863      	ldr	r3, [r4, #4]
    ba40:	681a      	ldr	r2, [r3, #0]
    ba42:	68e3      	ldr	r3, [r4, #12]
    ba44:	429a      	cmp	r2, r3
    ba46:	d909      	bls.n	ba5c <out_func+0x48>
    ba48:	4905      	ldr	r1, [pc, #20]	; (ba60 <out_func+0x4c>)
    ba4a:	4806      	ldr	r0, [pc, #24]	; (ba64 <out_func+0x50>)
    ba4c:	2379      	movs	r3, #121	; 0x79
    ba4e:	4a06      	ldr	r2, [pc, #24]	; (ba68 <out_func+0x54>)
    ba50:	f011 f84b 	bl	1caea <assert_print>
    ba54:	2179      	movs	r1, #121	; 0x79
    ba56:	4804      	ldr	r0, [pc, #16]	; (ba68 <out_func+0x54>)
    ba58:	f011 f840 	bl	1cadc <assert_post_action>
}
    ba5c:	2000      	movs	r0, #0
    ba5e:	bd38      	pop	{r3, r4, r5, pc}
    ba60:	00021dad 	.word	0x00021dad
    ba64:	00021547 	.word	0x00021547
    ba68:	00021d7e 	.word	0x00021d7e

0000ba6c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    ba6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba70:	b089      	sub	sp, #36	; 0x24
    ba72:	469b      	mov	fp, r3
    ba74:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    ba78:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ba7c:	4604      	mov	r4, r0
    ba7e:	9304      	str	r3, [sp, #16]
    ba80:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    ba84:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    ba86:	9b04      	ldr	r3, [sp, #16]
{
    ba88:	460d      	mov	r5, r1
    ba8a:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    ba8c:	2b00      	cmp	r3, #0
    ba8e:	f000 8087 	beq.w	bba0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ba92:	f006 0308 	and.w	r3, r6, #8
    ba96:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    ba98:	f011 f94a 	bl	1cd30 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    ba9c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    baa0:	4602      	mov	r2, r0
    baa2:	2800      	cmp	r0, #0
    baa4:	d04b      	beq.n	bb3e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    baa6:	4620      	mov	r0, r4
    baa8:	498d      	ldr	r1, [pc, #564]	; (bce0 <log_output_process+0x274>)
    baaa:	f7ff ff93 	bl	b9d4 <print_formatted>
    baae:	4680      	mov	r8, r0
	if (stamp) {
    bab0:	f1ba 0f00 	cmp.w	sl, #0
    bab4:	d008      	beq.n	bac8 <log_output_process+0x5c>
	if (!format) {
    bab6:	f016 0f44 	tst.w	r6, #68	; 0x44
    baba:	d142      	bne.n	bb42 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    babc:	462a      	mov	r2, r5
    babe:	4620      	mov	r0, r4
    bac0:	4988      	ldr	r1, [pc, #544]	; (bce4 <log_output_process+0x278>)
    bac2:	f7ff ff87 	bl	b9d4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    bac6:	4480      	add	r8, r0
	if (color) {
    bac8:	f006 0301 	and.w	r3, r6, #1
    bacc:	b15b      	cbz	r3, bae6 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    bace:	4b86      	ldr	r3, [pc, #536]	; (bce8 <log_output_process+0x27c>)
    bad0:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    bad2:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    bad4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    bad8:	4b84      	ldr	r3, [pc, #528]	; (bcec <log_output_process+0x280>)
    bada:	4985      	ldr	r1, [pc, #532]	; (bcf0 <log_output_process+0x284>)
    badc:	2a00      	cmp	r2, #0
    bade:	bf08      	it	eq
    bae0:	461a      	moveq	r2, r3
    bae2:	f7ff ff77 	bl	b9d4 <print_formatted>
	if (level_on) {
    bae6:	f006 0308 	and.w	r3, r6, #8
    baea:	2b00      	cmp	r3, #0
    baec:	d055      	beq.n	bb9a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    baee:	4b81      	ldr	r3, [pc, #516]	; (bcf4 <log_output_process+0x288>)
    baf0:	9a04      	ldr	r2, [sp, #16]
    baf2:	4620      	mov	r0, r4
    baf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    baf8:	497f      	ldr	r1, [pc, #508]	; (bcf8 <log_output_process+0x28c>)
    bafa:	f7ff ff6b 	bl	b9d4 <print_formatted>
    bafe:	4605      	mov	r5, r0
	if (domain) {
    bb00:	9b06      	ldr	r3, [sp, #24]
    bb02:	b12b      	cbz	r3, bb10 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    bb04:	461a      	mov	r2, r3
    bb06:	4620      	mov	r0, r4
    bb08:	497c      	ldr	r1, [pc, #496]	; (bcfc <log_output_process+0x290>)
    bb0a:	f7ff ff63 	bl	b9d4 <print_formatted>
    bb0e:	4405      	add	r5, r0
	if (source) {
    bb10:	f1bb 0f00 	cmp.w	fp, #0
    bb14:	d005      	beq.n	bb22 <log_output_process+0xb6>
		total += print_formatted(output,
    bb16:	465a      	mov	r2, fp
    bb18:	4620      	mov	r0, r4
    bb1a:	4979      	ldr	r1, [pc, #484]	; (bd00 <log_output_process+0x294>)
    bb1c:	f7ff ff5a 	bl	b9d4 <print_formatted>
    bb20:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    bb22:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    bb24:	f1b9 0f00 	cmp.w	r9, #0
    bb28:	d14a      	bne.n	bbc0 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    bb2a:	2f00      	cmp	r7, #0
    bb2c:	d161      	bne.n	bbf2 <log_output_process+0x186>
	if (color) {
    bb2e:	07f3      	lsls	r3, r6, #31
    bb30:	f100 80cf 	bmi.w	bcd2 <log_output_process+0x266>
	newline_print(output, flags);
    bb34:	4631      	mov	r1, r6
    bb36:	4620      	mov	r0, r4
    bb38:	f7ff ff5e 	bl	b9f8 <newline_print>
}
    bb3c:	e0c3      	b.n	bcc6 <log_output_process+0x25a>
	uint32_t length = 0U;
    bb3e:	4680      	mov	r8, r0
    bb40:	e7b6      	b.n	bab0 <log_output_process+0x44>
	} else if (freq != 0U) {
    bb42:	4b70      	ldr	r3, [pc, #448]	; (bd04 <log_output_process+0x298>)
    bb44:	6818      	ldr	r0, [r3, #0]
    bb46:	2800      	cmp	r0, #0
    bb48:	d0bd      	beq.n	bac6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    bb4a:	4b6f      	ldr	r3, [pc, #444]	; (bd08 <log_output_process+0x29c>)
		ms = (remainder * 1000U) / freq;
    bb4c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    bb50:	681b      	ldr	r3, [r3, #0]
    bb52:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    bb56:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    bb5a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    bb5e:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    bb62:	fb0e f505 	mul.w	r5, lr, r5
    bb66:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    bb6a:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    bb6e:	213c      	movs	r1, #60	; 0x3c
    bb70:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    bb74:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    bb78:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    bb7c:	fb0e f505 	mul.w	r5, lr, r5
    bb80:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    bb84:	fb01 2213 	mls	r2, r1, r3, r2
    bb88:	4620      	mov	r0, r4
    bb8a:	9200      	str	r2, [sp, #0]
    bb8c:	e9cd c501 	strd	ip, r5, [sp, #4]
    bb90:	4652      	mov	r2, sl
    bb92:	495e      	ldr	r1, [pc, #376]	; (bd0c <log_output_process+0x2a0>)
    bb94:	f7ff ff1e 	bl	b9d4 <print_formatted>
    bb98:	e795      	b.n	bac6 <log_output_process+0x5a>
	int total = 0;
    bb9a:	f006 0508 	and.w	r5, r6, #8
    bb9e:	e7af      	b.n	bb00 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bba0:	f1bb 0f01 	cmp.w	fp, #1
    bba4:	d107      	bne.n	bbb6 <log_output_process+0x14a>
	if (package) {
    bba6:	f1b9 0f00 	cmp.w	r9, #0
    bbaa:	d11d      	bne.n	bbe8 <log_output_process+0x17c>
	if (data_len) {
    bbac:	2f00      	cmp	r7, #0
    bbae:	f000 808a 	beq.w	bcc6 <log_output_process+0x25a>
		prefix_offset = 0;
    bbb2:	2500      	movs	r5, #0
    bbb4:	e01d      	b.n	bbf2 <log_output_process+0x186>
	if (package) {
    bbb6:	f1b9 0f00 	cmp.w	r9, #0
    bbba:	d0f7      	beq.n	bbac <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bbbc:	4854      	ldr	r0, [pc, #336]	; (bd10 <log_output_process+0x2a4>)
    bbbe:	e014      	b.n	bbea <log_output_process+0x17e>
		cb = out_func;
    bbc0:	4854      	ldr	r0, [pc, #336]	; (bd14 <log_output_process+0x2a8>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    bbc2:	464b      	mov	r3, r9
    bbc4:	4622      	mov	r2, r4
    bbc6:	4954      	ldr	r1, [pc, #336]	; (bd18 <log_output_process+0x2ac>)
    bbc8:	f010 fd1c 	bl	1c604 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    bbcc:	2800      	cmp	r0, #0
    bbce:	da0e      	bge.n	bbee <log_output_process+0x182>
    bbd0:	4952      	ldr	r1, [pc, #328]	; (bd1c <log_output_process+0x2b0>)
    bbd2:	4853      	ldr	r0, [pc, #332]	; (bd20 <log_output_process+0x2b4>)
    bbd4:	f44f 7300 	mov.w	r3, #512	; 0x200
    bbd8:	4a52      	ldr	r2, [pc, #328]	; (bd24 <log_output_process+0x2b8>)
    bbda:	f010 ff86 	bl	1caea <assert_print>
    bbde:	f44f 7100 	mov.w	r1, #512	; 0x200
    bbe2:	4850      	ldr	r0, [pc, #320]	; (bd24 <log_output_process+0x2b8>)
    bbe4:	f010 ff7a 	bl	1cadc <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bbe8:	484a      	ldr	r0, [pc, #296]	; (bd14 <log_output_process+0x2a8>)
		prefix_offset = 0;
    bbea:	9d04      	ldr	r5, [sp, #16]
    bbec:	e7e9      	b.n	bbc2 <log_output_process+0x156>
	if (data_len) {
    bbee:	2f00      	cmp	r7, #0
    bbf0:	d065      	beq.n	bcbe <log_output_process+0x252>
		print_formatted(output, " ");
    bbf2:	f8df 9134 	ldr.w	r9, [pc, #308]	; bd28 <log_output_process+0x2bc>
			print_formatted(output, "%02x ", data[i]);
    bbf6:	f8df a134 	ldr.w	sl, [pc, #308]	; bd2c <log_output_process+0x2c0>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bbfa:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    bbfc:	4631      	mov	r1, r6
    bbfe:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bc00:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    bc02:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bc06:	bf28      	it	cs
    bc08:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    bc0c:	f7ff fef4 	bl	b9f8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    bc10:	455d      	cmp	r5, fp
    bc12:	dc42      	bgt.n	bc9a <log_output_process+0x22e>
			print_formatted(output, "%02x ", data[i]);
    bc14:	9b05      	ldr	r3, [sp, #20]
    bc16:	4651      	mov	r1, sl
    bc18:	4620      	mov	r0, r4
    bc1a:	781a      	ldrb	r2, [r3, #0]
    bc1c:	f7ff feda 	bl	b9d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bc20:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    bc24:	f01b 0f07 	tst.w	fp, #7
    bc28:	d103      	bne.n	bc32 <log_output_process+0x1c6>
			print_formatted(output, " ");
    bc2a:	4649      	mov	r1, r9
    bc2c:	4620      	mov	r0, r4
    bc2e:	f7ff fed1 	bl	b9d4 <print_formatted>
		if (i < length) {
    bc32:	45d8      	cmp	r8, fp
    bc34:	d938      	bls.n	bca8 <log_output_process+0x23c>
			print_formatted(output, "%02x ", data[i]);
    bc36:	9b05      	ldr	r3, [sp, #20]
    bc38:	4651      	mov	r1, sl
    bc3a:	4620      	mov	r0, r4
    bc3c:	f813 200b 	ldrb.w	r2, [r3, fp]
    bc40:	f7ff fec8 	bl	b9d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bc44:	f10b 0b01 	add.w	fp, fp, #1
    bc48:	f1bb 0f10 	cmp.w	fp, #16
    bc4c:	d1ea      	bne.n	bc24 <log_output_process+0x1b8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bc4e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    bc52:	4620      	mov	r0, r4
    bc54:	4936      	ldr	r1, [pc, #216]	; (bd30 <log_output_process+0x2c4>)
    bc56:	f7ff febd 	bl	b9d4 <print_formatted>
		if (i < length) {
    bc5a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    bc5c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    bc5e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    bc60:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    bc62:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    bc66:	295f      	cmp	r1, #95	; 0x5f
    bc68:	bf28      	it	cs
    bc6a:	222e      	movcs	r2, #46	; 0x2e
    bc6c:	4931      	ldr	r1, [pc, #196]	; (bd34 <log_output_process+0x2c8>)
    bc6e:	f7ff feb1 	bl	b9d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bc72:	f10b 0b01 	add.w	fp, fp, #1
    bc76:	f1bb 0f10 	cmp.w	fp, #16
    bc7a:	d01a      	beq.n	bcb2 <log_output_process+0x246>
		if (i > 0 && !(i % 8)) {
    bc7c:	f01b 0f07 	tst.w	fp, #7
    bc80:	d103      	bne.n	bc8a <log_output_process+0x21e>
			print_formatted(output, " ");
    bc82:	4649      	mov	r1, r9
    bc84:	4620      	mov	r0, r4
    bc86:	f7ff fea5 	bl	b9d4 <print_formatted>
		if (i < length) {
    bc8a:	45d8      	cmp	r8, fp
    bc8c:	465a      	mov	r2, fp
    bc8e:	d8e5      	bhi.n	bc5c <log_output_process+0x1f0>
			print_formatted(output, " ");
    bc90:	4649      	mov	r1, r9
    bc92:	4620      	mov	r0, r4
    bc94:	f7ff fe9e 	bl	b9d4 <print_formatted>
    bc98:	e7eb      	b.n	bc72 <log_output_process+0x206>
		print_formatted(output, " ");
    bc9a:	4649      	mov	r1, r9
    bc9c:	4620      	mov	r0, r4
    bc9e:	f7ff fe99 	bl	b9d4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    bca2:	f10b 0b01 	add.w	fp, fp, #1
    bca6:	e7b3      	b.n	bc10 <log_output_process+0x1a4>
			print_formatted(output, "   ");
    bca8:	4620      	mov	r0, r4
    bcaa:	4923      	ldr	r1, [pc, #140]	; (bd38 <log_output_process+0x2cc>)
    bcac:	f7ff fe92 	bl	b9d4 <print_formatted>
    bcb0:	e7c8      	b.n	bc44 <log_output_process+0x1d8>
		data += length;
    bcb2:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    bcb4:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    bcb8:	4443      	add	r3, r8
    bcba:	9305      	str	r3, [sp, #20]
	} while (len);
    bcbc:	d19d      	bne.n	bbfa <log_output_process+0x18e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    bcbe:	9b04      	ldr	r3, [sp, #16]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	f47f af34 	bne.w	bb2e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    bcc6:	4620      	mov	r0, r4
}
    bcc8:	b009      	add	sp, #36	; 0x24
    bcca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    bcce:	f011 b875 	b.w	1cdbc <log_output_flush>
		print_formatted(output, "%s", log_color);
    bcd2:	4620      	mov	r0, r4
    bcd4:	4a05      	ldr	r2, [pc, #20]	; (bcec <log_output_process+0x280>)
    bcd6:	4906      	ldr	r1, [pc, #24]	; (bcf0 <log_output_process+0x284>)
    bcd8:	f7ff fe7c 	bl	b9d4 <print_formatted>
}
    bcdc:	e72a      	b.n	bb34 <log_output_process+0xc8>
    bcde:	bf00      	nop
    bce0:	00021de2 	.word	0x00021de2
    bce4:	00021de6 	.word	0x00021de6
    bce8:	00020a5c 	.word	0x00020a5c
    bcec:	00021ddd 	.word	0x00021ddd
    bcf0:	000212a2 	.word	0x000212a2
    bcf4:	00020a70 	.word	0x00020a70
    bcf8:	00021e0b 	.word	0x00021e0b
    bcfc:	00021e11 	.word	0x00021e11
    bd00:	00021e15 	.word	0x00021e15
    bd04:	2000974c 	.word	0x2000974c
    bd08:	20009748 	.word	0x20009748
    bd0c:	00021def 	.word	0x00021def
    bd10:	0001cdd7 	.word	0x0001cdd7
    bd14:	0000ba15 	.word	0x0000ba15
    bd18:	0001cdaf 	.word	0x0001cdaf
    bd1c:	00021e1a 	.word	0x00021e1a
    bd20:	00021547 	.word	0x00021547
    bd24:	00021d7e 	.word	0x00021d7e
    bd28:	00024d89 	.word	0x00024d89
    bd2c:	00021e23 	.word	0x00021e23
    bd30:	00021e29 	.word	0x00021e29
    bd34:	0002132e 	.word	0x0002132e
    bd38:	00024d87 	.word	0x00024d87

0000bd3c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    bd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    bd40:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    bd42:	684b      	ldr	r3, [r1, #4]
    bd44:	4605      	mov	r5, r0
    bd46:	460c      	mov	r4, r1
    bd48:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    bd4a:	688e      	ldr	r6, [r1, #8]
    bd4c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    bd4e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    bd52:	b15b      	cbz	r3, bd6c <log_output_msg_process+0x30>
    bd54:	4a13      	ldr	r2, [pc, #76]	; (bda4 <log_output_msg_process+0x68>)
    bd56:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    bd58:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    bd5c:	2900      	cmp	r1, #0
    bd5e:	db1f      	blt.n	bda0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    bd60:	7820      	ldrb	r0, [r4, #0]
    bd62:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    bd66:	f7ff fd9b 	bl	b8a0 <log_source_name_get>
    bd6a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    bd6c:	4621      	mov	r1, r4
    bd6e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    bd72:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    bd74:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    bd78:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    bd7a:	eb01 0402 	add.w	r4, r1, r2
    bd7e:	bf08      	it	eq
    bd80:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    bd82:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    bd86:	e9cd 0803 	strd	r0, r8, [sp, #12]
    bd8a:	e9cd 1401 	strd	r1, r4, [sp, #4]
    bd8e:	2200      	movs	r2, #0
    bd90:	4631      	mov	r1, r6
    bd92:	4628      	mov	r0, r5
    bd94:	9700      	str	r7, [sp, #0]
    bd96:	f7ff fe69 	bl	ba6c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    bd9a:	b006      	add	sp, #24
    bd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    bda0:	2300      	movs	r3, #0
    bda2:	e7e3      	b.n	bd6c <log_output_msg_process+0x30>
    bda4:	00020804 	.word	0x00020804

0000bda8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    bda8:	f242 730f 	movw	r3, #9999	; 0x270f
{
    bdac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    bdae:	428b      	cmp	r3, r1
    bdb0:	bf28      	it	cs
    bdb2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    bdb4:	6805      	ldr	r5, [r0, #0]
{
    bdb6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    bdb8:	2105      	movs	r1, #5
    bdba:	4668      	mov	r0, sp
    bdbc:	4a0d      	ldr	r2, [pc, #52]	; (bdf4 <log_output_dropped_process+0x4c>)
    bdbe:	f010 fc99 	bl	1c6f4 <snprintk>
    bdc2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    bdc4:	6863      	ldr	r3, [r4, #4]
    bdc6:	4628      	mov	r0, r5
    bdc8:	220b      	movs	r2, #11
    bdca:	685b      	ldr	r3, [r3, #4]
    bdcc:	490a      	ldr	r1, [pc, #40]	; (bdf8 <log_output_dropped_process+0x50>)
    bdce:	f010 ffe1 	bl	1cd94 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    bdd2:	6863      	ldr	r3, [r4, #4]
    bdd4:	4632      	mov	r2, r6
    bdd6:	4669      	mov	r1, sp
    bdd8:	4628      	mov	r0, r5
    bdda:	685b      	ldr	r3, [r3, #4]
    bddc:	f010 ffda 	bl	1cd94 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    bde0:	6863      	ldr	r3, [r4, #4]
    bde2:	221b      	movs	r2, #27
    bde4:	4628      	mov	r0, r5
    bde6:	685b      	ldr	r3, [r3, #4]
    bde8:	4904      	ldr	r1, [pc, #16]	; (bdfc <log_output_dropped_process+0x54>)
    bdea:	f010 ffd3 	bl	1cd94 <buffer_write>
		     output->control_block->ctx);
}
    bdee:	b002      	add	sp, #8
    bdf0:	bd70      	pop	{r4, r5, r6, pc}
    bdf2:	bf00      	nop
    bdf4:	00022a48 	.word	0x00022a48
    bdf8:	00021e47 	.word	0x00021e47
    bdfc:	00021e2b 	.word	0x00021e2b

0000be00 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    be00:	2100      	movs	r1, #0
    be02:	2301      	movs	r3, #1
    be04:	4a06      	ldr	r2, [pc, #24]	; (be20 <log_output_timestamp_freq_set+0x20>)
    be06:	4290      	cmp	r0, r2
    be08:	d806      	bhi.n	be18 <log_output_timestamp_freq_set+0x18>
    be0a:	4a06      	ldr	r2, [pc, #24]	; (be24 <log_output_timestamp_freq_set+0x24>)
    be0c:	b901      	cbnz	r1, be10 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    be0e:	2301      	movs	r3, #1
    be10:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    be12:	4b05      	ldr	r3, [pc, #20]	; (be28 <log_output_timestamp_freq_set+0x28>)
    be14:	6018      	str	r0, [r3, #0]
}
    be16:	4770      	bx	lr
		timestamp_div *= 2U;
    be18:	2101      	movs	r1, #1
		frequency /= 2U;
    be1a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    be1c:	005b      	lsls	r3, r3, #1
    be1e:	e7f2      	b.n	be06 <log_output_timestamp_freq_set+0x6>
    be20:	000f4240 	.word	0x000f4240
    be24:	20009748 	.word	0x20009748
    be28:	2000974c 	.word	0x2000974c

0000be2c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    be2c:	4b01      	ldr	r3, [pc, #4]	; (be34 <format_set+0x8>)
	return 0;
}
    be2e:	2000      	movs	r0, #0
	log_format_current = log_type;
    be30:	6019      	str	r1, [r3, #0]
}
    be32:	4770      	bx	lr
    be34:	20009764 	.word	0x20009764

0000be38 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    be38:	2201      	movs	r2, #1
    be3a:	4b02      	ldr	r3, [pc, #8]	; (be44 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    be3c:	4802      	ldr	r0, [pc, #8]	; (be48 <panic+0x10>)
    be3e:	701a      	strb	r2, [r3, #0]
    be40:	f010 bfbc 	b.w	1cdbc <log_output_flush>
    be44:	20009c70 	.word	0x20009c70
    be48:	00020aa0 	.word	0x00020aa0

0000be4c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    be4c:	4801      	ldr	r0, [pc, #4]	; (be54 <dropped+0x8>)
    be4e:	f7ff bfab 	b.w	bda8 <log_output_dropped_process>
    be52:	bf00      	nop
    be54:	00020aa0 	.word	0x00020aa0

0000be58 <process>:
{
    be58:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    be5a:	4b06      	ldr	r3, [pc, #24]	; (be74 <process+0x1c>)
{
    be5c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    be5e:	6818      	ldr	r0, [r3, #0]
    be60:	f7ff fac4 	bl	b3ec <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    be64:	4621      	mov	r1, r4
}
    be66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    be6a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    be6c:	220f      	movs	r2, #15
    be6e:	4802      	ldr	r0, [pc, #8]	; (be78 <process+0x20>)
    be70:	4718      	bx	r3
    be72:	bf00      	nop
    be74:	20009764 	.word	0x20009764
    be78:	00020aa0 	.word	0x00020aa0

0000be7c <char_out>:
{
    be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be7e:	460d      	mov	r5, r1
    be80:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    be82:	4f06      	ldr	r7, [pc, #24]	; (be9c <char_out+0x20>)
    be84:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    be86:	42b4      	cmp	r4, r6
    be88:	d101      	bne.n	be8e <char_out+0x12>
}
    be8a:	4628      	mov	r0, r5
    be8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    be8e:	f814 1b01 	ldrb.w	r1, [r4], #1
    be92:	68bb      	ldr	r3, [r7, #8]
    be94:	4801      	ldr	r0, [pc, #4]	; (be9c <char_out+0x20>)
    be96:	685b      	ldr	r3, [r3, #4]
    be98:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    be9a:	e7f4      	b.n	be86 <char_out+0xa>
    be9c:	000204b4 	.word	0x000204b4

0000bea0 <log_backend_uart_init>:
{
    bea0:	b508      	push	{r3, lr}
    bea2:	4807      	ldr	r0, [pc, #28]	; (bec0 <log_backend_uart_init+0x20>)
    bea4:	f014 f844 	bl	1ff30 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    bea8:	b948      	cbnz	r0, bebe <log_backend_uart_init+0x1e>
    beaa:	4906      	ldr	r1, [pc, #24]	; (bec4 <log_backend_uart_init+0x24>)
    beac:	4806      	ldr	r0, [pc, #24]	; (bec8 <log_backend_uart_init+0x28>)
    beae:	236f      	movs	r3, #111	; 0x6f
    beb0:	4a06      	ldr	r2, [pc, #24]	; (becc <log_backend_uart_init+0x2c>)
    beb2:	f010 fe1a 	bl	1caea <assert_print>
    beb6:	216f      	movs	r1, #111	; 0x6f
    beb8:	4804      	ldr	r0, [pc, #16]	; (becc <log_backend_uart_init+0x2c>)
    beba:	f010 fe0f 	bl	1cadc <assert_post_action>
}
    bebe:	bd08      	pop	{r3, pc}
    bec0:	000204b4 	.word	0x000204b4
    bec4:	00021eb1 	.word	0x00021eb1
    bec8:	00021547 	.word	0x00021547
    becc:	00021e73 	.word	0x00021e73

0000bed0 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    bed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    bed2:	b970      	cbnz	r0, bef2 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    bed4:	4b12      	ldr	r3, [pc, #72]	; (bf20 <ipc_service_open_instance+0x50>)
    bed6:	4813      	ldr	r0, [pc, #76]	; (bf24 <ipc_service_open_instance+0x54>)
    bed8:	9305      	str	r3, [sp, #20]
    beda:	2302      	movs	r3, #2
    bedc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bee0:	aa04      	add	r2, sp, #16
    bee2:	9304      	str	r3, [sp, #16]
    bee4:	f010 ff85 	bl	1cdf2 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    bee8:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    beec:	b007      	add	sp, #28
    beee:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    bef2:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    bef4:	b963      	cbnz	r3, bf10 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    bef6:	4b0c      	ldr	r3, [pc, #48]	; (bf28 <ipc_service_open_instance+0x58>)
    bef8:	480a      	ldr	r0, [pc, #40]	; (bf24 <ipc_service_open_instance+0x54>)
    befa:	9305      	str	r3, [sp, #20]
    befc:	2302      	movs	r3, #2
    befe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bf02:	aa04      	add	r2, sp, #16
    bf04:	9304      	str	r3, [sp, #16]
    bf06:	f010 ff74 	bl	1cdf2 <z_log_msg_static_create.constprop.0>
		return -EIO;
    bf0a:	f06f 0004 	mvn.w	r0, #4
    bf0e:	e7ed      	b.n	beec <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    bf10:	681b      	ldr	r3, [r3, #0]
    bf12:	b11b      	cbz	r3, bf1c <ipc_service_open_instance+0x4c>
}
    bf14:	b007      	add	sp, #28
    bf16:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    bf1a:	4718      	bx	r3
		return 0;
    bf1c:	4618      	mov	r0, r3
    bf1e:	e7e5      	b.n	beec <ipc_service_open_instance+0x1c>
    bf20:	00021ee5 	.word	0x00021ee5
    bf24:	00020884 	.word	0x00020884
    bf28:	00021ef6 	.word	0x00021ef6

0000bf2c <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    bf2c:	b530      	push	{r4, r5, lr}
    bf2e:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    bf30:	b108      	cbz	r0, bf36 <ipc_service_register_endpoint+0xa>
    bf32:	b101      	cbz	r1, bf36 <ipc_service_register_endpoint+0xa>
    bf34:	b96a      	cbnz	r2, bf52 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    bf36:	4b13      	ldr	r3, [pc, #76]	; (bf84 <ipc_service_register_endpoint+0x58>)
    bf38:	4813      	ldr	r0, [pc, #76]	; (bf88 <ipc_service_register_endpoint+0x5c>)
    bf3a:	9305      	str	r3, [sp, #20]
    bf3c:	2302      	movs	r3, #2
    bf3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bf42:	aa04      	add	r2, sp, #16
    bf44:	9304      	str	r3, [sp, #16]
    bf46:	f010 ff54 	bl	1cdf2 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    bf4a:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    bf4e:	b007      	add	sp, #28
    bf50:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    bf52:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    bf54:	b10c      	cbz	r4, bf5a <ipc_service_register_endpoint+0x2e>
    bf56:	68e5      	ldr	r5, [r4, #12]
    bf58:	b965      	cbnz	r5, bf74 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    bf5a:	4b0c      	ldr	r3, [pc, #48]	; (bf8c <ipc_service_register_endpoint+0x60>)
    bf5c:	480a      	ldr	r0, [pc, #40]	; (bf88 <ipc_service_register_endpoint+0x5c>)
    bf5e:	9305      	str	r3, [sp, #20]
    bf60:	2302      	movs	r3, #2
    bf62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bf66:	aa04      	add	r2, sp, #16
    bf68:	9304      	str	r3, [sp, #16]
    bf6a:	f010 ff42 	bl	1cdf2 <z_log_msg_static_create.constprop.0>
		return -EIO;
    bf6e:	f06f 0004 	mvn.w	r0, #4
    bf72:	e7ec      	b.n	bf4e <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    bf74:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    bf78:	68e3      	ldr	r3, [r4, #12]
}
    bf7a:	b007      	add	sp, #28
    bf7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    bf80:	4718      	bx	r3
    bf82:	bf00      	nop
    bf84:	00021f14 	.word	0x00021f14
    bf88:	00020884 	.word	0x00020884
    bf8c:	00021ef6 	.word	0x00021ef6

0000bf90 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    bf90:	b530      	push	{r4, r5, lr}
    bf92:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    bf94:	4604      	mov	r4, r0
{
    bf96:	b087      	sub	sp, #28
	if (!ept) {
    bf98:	b968      	cbnz	r0, bfb6 <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    bf9a:	4b1a      	ldr	r3, [pc, #104]	; (c004 <ipc_service_send+0x74>)
    bf9c:	481a      	ldr	r0, [pc, #104]	; (c008 <ipc_service_send+0x78>)
    bf9e:	9305      	str	r3, [sp, #20]
    bfa0:	2302      	movs	r3, #2
    bfa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bfa6:	aa04      	add	r2, sp, #16
    bfa8:	9304      	str	r3, [sp, #16]
    bfaa:	f010 ff22 	bl	1cdf2 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    bfae:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    bfb2:	b007      	add	sp, #28
    bfb4:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    bfb6:	6800      	ldr	r0, [r0, #0]
    bfb8:	b960      	cbnz	r0, bfd4 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    bfba:	4b14      	ldr	r3, [pc, #80]	; (c00c <ipc_service_send+0x7c>)
    bfbc:	4812      	ldr	r0, [pc, #72]	; (c008 <ipc_service_send+0x78>)
    bfbe:	9305      	str	r3, [sp, #20]
    bfc0:	2302      	movs	r3, #2
    bfc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bfc6:	aa04      	add	r2, sp, #16
    bfc8:	9304      	str	r3, [sp, #16]
    bfca:	f010 ff12 	bl	1cdf2 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    bfce:	f06f 0001 	mvn.w	r0, #1
    bfd2:	e7ee      	b.n	bfb2 <ipc_service_send+0x22>
	backend = ept->instance->api;
    bfd4:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    bfd6:	b10a      	cbz	r2, bfdc <ipc_service_send+0x4c>
    bfd8:	6895      	ldr	r5, [r2, #8]
    bfda:	b965      	cbnz	r5, bff6 <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    bfdc:	4b0c      	ldr	r3, [pc, #48]	; (c010 <ipc_service_send+0x80>)
    bfde:	480a      	ldr	r0, [pc, #40]	; (c008 <ipc_service_send+0x78>)
    bfe0:	9305      	str	r3, [sp, #20]
    bfe2:	2302      	movs	r3, #2
    bfe4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bfe8:	aa04      	add	r2, sp, #16
    bfea:	9304      	str	r3, [sp, #16]
    bfec:	f010 ff01 	bl	1cdf2 <z_log_msg_static_create.constprop.0>
		return -EIO;
    bff0:	f06f 0004 	mvn.w	r0, #4
    bff4:	e7dd      	b.n	bfb2 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    bff6:	460a      	mov	r2, r1
    bff8:	46ac      	mov	ip, r5
    bffa:	6861      	ldr	r1, [r4, #4]
}
    bffc:	b007      	add	sp, #28
    bffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    c002:	4760      	bx	ip
    c004:	00021f40 	.word	0x00021f40
    c008:	00020884 	.word	0x00020884
    c00c:	00021f51 	.word	0x00021f51
    c010:	00021ef6 	.word	0x00021ef6

0000c014 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    c014:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    c016:	2204      	movs	r2, #4
    c018:	2100      	movs	r1, #0
    c01a:	4802      	ldr	r0, [pc, #8]	; (c024 <shared_memory_prepare+0x10>)
    c01c:	f011 fd7f 	bl	1db1e <memset>
		}
	}

	return 0;
}
    c020:	2000      	movs	r0, #0
    c022:	bd08      	pop	{r3, pc}
    c024:	20070000 	.word	0x20070000

0000c028 <bound_cb>:
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    c028:	2300      	movs	r3, #0
    c02a:	2201      	movs	r2, #1
{
    c02c:	b513      	push	{r0, r1, r4, lr}
    c02e:	4604      	mov	r4, r0
    c030:	e9cd 3200 	strd	r3, r2, [sp]
    c034:	4b07      	ldr	r3, [pc, #28]	; (c054 <bound_cb+0x2c>)
    c036:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    c03a:	f00b ff91 	bl	17f60 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    c03e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    c040:	681b      	ldr	r3, [r3, #0]
    c042:	b123      	cbz	r3, c04e <bound_cb+0x26>
		ept->cb->bound(ept->priv);
    c044:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    c046:	b002      	add	sp, #8
    c048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    c04c:	4718      	bx	r3
}
    c04e:	b002      	add	sp, #8
    c050:	bd10      	pop	{r4, pc}
    c052:	bf00      	nop
    c054:	00023bfa 	.word	0x00023bfa

0000c058 <advertise_ept>:
{
    c058:	b530      	push	{r4, r5, lr}
    c05a:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c05c:	490e      	ldr	r1, [pc, #56]	; (c098 <advertise_ept+0x40>)
{
    c05e:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c060:	9102      	str	r1, [sp, #8]
    c062:	f8d0 1198 	ldr.w	r1, [r0, #408]	; 0x198
{
    c066:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c068:	e9cd 3100 	strd	r3, r1, [sp]
    c06c:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    c070:	f04f 33ff 	mov.w	r3, #4294967295
    c074:	4620      	mov	r0, r4
    c076:	f00b ffb9 	bl	17fec <rpmsg_create_ept>
	if (err != 0) {
    c07a:	b950      	cbnz	r0, c092 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    c07c:	2301      	movs	r3, #1
    c07e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    c082:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
    c086:	b123      	cbz	r3, c092 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    c088:	4620      	mov	r0, r4
}
    c08a:	b005      	add	sp, #20
    c08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    c090:	4718      	bx	r3
}
    c092:	b005      	add	sp, #20
    c094:	bd30      	pop	{r4, r5, pc}
    c096:	bf00      	nop
    c098:	0001cee9 	.word	0x0001cee9

0000c09c <get_ept>:
{
    c09c:	b538      	push	{r3, r4, r5, lr}
    c09e:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    c0a0:	4611      	mov	r1, r2
{
    c0a2:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    c0a4:	f010 ff22 	bl	1ceec <get_ept_slot_with_name>
	if (ept != NULL) {
    c0a8:	4603      	mov	r3, r0
    c0aa:	b938      	cbnz	r0, c0bc <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    c0ac:	4628      	mov	r0, r5
    c0ae:	4904      	ldr	r1, [pc, #16]	; (c0c0 <get_ept+0x24>)
    c0b0:	f010 ff1c 	bl	1ceec <get_ept_slot_with_name>
    c0b4:	4603      	mov	r3, r0
	if (ept != NULL) {
    c0b6:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    c0b8:	6023      	str	r3, [r4, #0]
}
    c0ba:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    c0bc:	2001      	movs	r0, #1
    c0be:	e7fb      	b.n	c0b8 <get_ept+0x1c>
    c0c0:	00023bfa 	.word	0x00023bfa

0000c0c4 <open>:
{
    c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c0c8:	2301      	movs	r3, #1
    c0ca:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    c0cc:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    c0ce:	6846      	ldr	r6, [r0, #4]
{
    c0d0:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    c0d2:	f505 7755 	add.w	r7, r5, #852	; 0x354
    c0d6:	e8d7 2fef 	ldaex	r2, [r7]
    c0da:	2a00      	cmp	r2, #0
    c0dc:	d103      	bne.n	c0e6 <open+0x22>
    c0de:	e8c7 3fe1 	stlex	r1, r3, [r7]
    c0e2:	2900      	cmp	r1, #0
    c0e4:	d1f7      	bne.n	c0d6 <open+0x12>
    c0e6:	f040 80b8 	bne.w	c25a <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    c0ea:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    c0ec:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    c0ee:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    c0f0:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    c0f2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    c0f6:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    c0fa:	bf26      	itte	cs
    c0fc:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    c100:	fab3 f383 	clzcs	r3, r3
		return 0;
    c104:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    c106:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    c10a:	bf28      	it	cs
    c10c:	f1c3 0320 	rsbcs	r3, r3, #32
    c110:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    c112:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    c114:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
	if (num_desc == 0) {
    c118:	f000 8099 	beq.w	c24e <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    c11c:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    c11e:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    c120:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    c122:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    c124:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    c128:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    c12a:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    c12c:	3209      	adds	r2, #9
    c12e:	f8c5 0248 	str.w	r0, [r5, #584]	; 0x248
	size += sizeof(struct vring_used) +
    c132:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    c134:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    c138:	440a      	add	r2, r1
	return (buf_size * num);
    c13a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    c13c:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    c140:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    c142:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    c146:	f8c5 124c 	str.w	r1, [r5, #588]	; 0x24c
	return (buf_size * num);
    c14a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    c14c:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    c14e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    c152:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    c156:	3303      	adds	r3, #3
    c158:	4413      	add	r3, r2
    c15a:	f023 0303 	bic.w	r3, r3, #3
    c15e:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
	vr->status_reg_addr = conf->shm_addr;
    c162:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    c164:	f8c5 4244 	str.w	r4, [r5, #580]	; 0x244
	vr->status_reg_addr = conf->shm_addr;
    c168:	f8c5 3238 	str.w	r3, [r5, #568]	; 0x238
	data->vr.notify_cb = virtio_notify_cb;
    c16c:	4b3c      	ldr	r3, [pc, #240]	; (c260 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    c16e:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    c170:	e9c5 63a3 	strd	r6, r3, [r5, #652]	; 0x28c
	err = ipc_static_vrings_init(&data->vr, conf->role);
    c174:	6831      	ldr	r1, [r6, #0]
    c176:	f000 fa03 	bl	c580 <ipc_static_vrings_init>
	if (err != 0) {
    c17a:	4604      	mov	r4, r0
    c17c:	bb30      	cbnz	r0, c1cc <open+0x108>
	const struct backend_config_t *conf = instance->config;
    c17e:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    c182:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    c186:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    c18a:	f509 7b2a 	add.w	fp, r9, #680	; 0x2a8
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    c18e:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    c190:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    c192:	bf08      	it	eq
    c194:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    c196:	f00d fd4b 	bl	19c30 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    c19a:	2300      	movs	r3, #0
    c19c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    c1a0:	4930      	ldr	r1, [pc, #192]	; (c264 <open+0x1a0>)
    c1a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c1a6:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    c1aa:	9300      	str	r3, [sp, #0]
    c1ac:	4658      	mov	r0, fp
    c1ae:	4623      	mov	r3, r4
    c1b0:	f00d fd58 	bl	19c64 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    c1b4:	f509 7026 	add.w	r0, r9, #664	; 0x298
    c1b8:	492b      	ldr	r1, [pc, #172]	; (c268 <open+0x1a4>)
    c1ba:	f00d fc6d 	bl	19a98 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    c1be:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    c1c2:	6883      	ldr	r3, [r0, #8]
    c1c4:	685c      	ldr	r4, [r3, #4]
    c1c6:	b91c      	cbnz	r4, c1d0 <open+0x10c>
		return -ENOSYS;
    c1c8:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    c1cc:	2100      	movs	r1, #0
    c1ce:	e037      	b.n	c240 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    c1d0:	464b      	mov	r3, r9
    c1d2:	4a26      	ldr	r2, [pc, #152]	; (c26c <open+0x1a8>)
    c1d4:	f8da 1018 	ldr.w	r1, [sl, #24]
    c1d8:	47a0      	blx	r4
	if (err != 0) {
    c1da:	4604      	mov	r4, r0
    c1dc:	2800      	cmp	r0, #0
    c1de:	d1f5      	bne.n	c1cc <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    c1e0:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    c1e4:	6883      	ldr	r3, [r0, #8]
    c1e6:	691b      	ldr	r3, [r3, #16]
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	d0ed      	beq.n	c1c8 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    c1ec:	2201      	movs	r2, #1
    c1ee:	f8da 1018 	ldr.w	r1, [sl, #24]
    c1f2:	4798      	blx	r3
	if (err != 0) {
    c1f4:	4604      	mov	r4, r0
    c1f6:	2800      	cmp	r0, #0
    c1f8:	d1e8      	bne.n	c1cc <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    c1fa:	4b1d      	ldr	r3, [pc, #116]	; (c270 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    c1fc:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    c1fe:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	rpmsg_inst->cb = ept_cb;
    c202:	4b1c      	ldr	r3, [pc, #112]	; (c274 <open+0x1b0>)
    c204:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    c208:	4b1b      	ldr	r3, [pc, #108]	; (c278 <open+0x1b4>)
    c20a:	9303      	str	r3, [sp, #12]
    c20c:	f8d5 31f8 	ldr.w	r3, [r5, #504]	; 0x1f8
    c210:	9302      	str	r3, [sp, #8]
    c212:	f8d5 31f0 	ldr.w	r3, [r5, #496]	; 0x1f0
    c216:	e9cd 8300 	strd	r8, r3, [sp]
    c21a:	f8d5 3250 	ldr.w	r3, [r5, #592]	; 0x250
    c21e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    c220:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    c224:	f000 f976 	bl	c514 <ipc_rpmsg_init>
	if (err != 0) {
    c228:	4604      	mov	r4, r0
    c22a:	2800      	cmp	r0, #0
    c22c:	d1ce      	bne.n	c1cc <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    c22e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    c232:	f00c f879 	bl	18328 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    c236:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    c238:	f8c5 0358 	str.w	r0, [r5, #856]	; 0x358
	if (data->tx_buffer_size < 0) {
    c23c:	db0a      	blt.n	c254 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    c23e:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    c240:	4638      	mov	r0, r7
    c242:	f010 fe9f 	bl	1cf84 <atomic_set.isra.0>
}
    c246:	4620      	mov	r0, r4
    c248:	b005      	add	sp, #20
    c24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    c24e:	f06f 040b 	mvn.w	r4, #11
    c252:	e7bb      	b.n	c1cc <open+0x108>
		err = -EINVAL;
    c254:	f06f 0415 	mvn.w	r4, #21
    c258:	e7b8      	b.n	c1cc <open+0x108>
		return -EALREADY;
    c25a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c25e:	e7f2      	b.n	c246 <open+0x182>
    c260:	0001cf6d 	.word	0x0001cf6d
    c264:	2000a920 	.word	0x2000a920
    c268:	0001cf25 	.word	0x0001cf25
    c26c:	0001cf19 	.word	0x0001cf19
    c270:	0000c029 	.word	0x0000c029
    c274:	0001cf3f 	.word	0x0001cf3f
    c278:	0001cfb5 	.word	0x0001cfb5

0000c27c <close>:
{
    c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c280:	4606      	mov	r6, r0
    c282:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    c286:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    c288:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    c28c:	f505 7755 	add.w	r7, r5, #852	; 0x354
    c290:	e8d7 3fef 	ldaex	r3, [r7]
    c294:	2b02      	cmp	r3, #2
    c296:	d103      	bne.n	c2a0 <close+0x24>
    c298:	e8c7 9fe2 	stlex	r2, r9, [r7]
    c29c:	2a00      	cmp	r2, #0
    c29e:	d1f7      	bne.n	c290 <close+0x14>
    c2a0:	d149      	bne.n	c336 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    c2a2:	4826      	ldr	r0, [pc, #152]	; (c33c <close+0xc0>)
    c2a4:	f105 0140 	add.w	r1, r5, #64	; 0x40
    c2a8:	f011 fbff 	bl	1daaa <strcmp>
    c2ac:	b120      	cbz	r0, c2b8 <close+0x3c>
		return -EBUSY;
    c2ae:	f06f 040f 	mvn.w	r4, #15
}
    c2b2:	4620      	mov	r0, r4
    c2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    c2b8:	4820      	ldr	r0, [pc, #128]	; (c33c <close+0xc0>)
    c2ba:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    c2be:	f011 fbf4 	bl	1daaa <strcmp>
    c2c2:	2800      	cmp	r0, #0
    c2c4:	d1f3      	bne.n	c2ae <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    c2c6:	4628      	mov	r0, r5
    c2c8:	f8d5 1350 	ldr.w	r1, [r5, #848]	; 0x350
    c2cc:	f010 fec6 	bl	1d05c <ipc_rpmsg_deinit>
	if (err != 0) {
    c2d0:	4604      	mov	r4, r0
    c2d2:	bb70      	cbnz	r0, c332 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    c2d4:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    c2d6:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    c2d8:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    c2da:	6883      	ldr	r3, [r0, #8]
    c2dc:	691b      	ldr	r3, [r3, #16]
    c2de:	b333      	cbz	r3, c32e <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    c2e0:	4622      	mov	r2, r4
    c2e2:	6989      	ldr	r1, [r1, #24]
    c2e4:	4798      	blx	r3
	if (err != 0) {
    c2e6:	4604      	mov	r4, r0
    c2e8:	bb18      	cbnz	r0, c332 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    c2ea:	f506 762a 	add.w	r6, r6, #680	; 0x2a8
    c2ee:	4649      	mov	r1, r9
    c2f0:	4630      	mov	r0, r6
    c2f2:	f00d fd1f 	bl	19d34 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    c2f6:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    c2f8:	f505 76d8 	add.w	r6, r5, #432	; 0x1b0
    c2fc:	f001 fa52 	bl	d7a4 <z_impl_k_thread_abort>
    c300:	4630      	mov	r0, r6
    c302:	f8d8 1000 	ldr.w	r1, [r8]
    c306:	f010 fee6 	bl	1d0d6 <ipc_static_vrings_deinit>
	if (err != 0) {
    c30a:	4604      	mov	r4, r0
    c30c:	b988      	cbnz	r0, c332 <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    c30e:	4601      	mov	r1, r0
    c310:	22e8      	movs	r2, #232	; 0xe8
    c312:	4630      	mov	r0, r6
    c314:	f011 fc03 	bl	1db1e <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    c318:	4621      	mov	r1, r4
    c31a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
    c31e:	4628      	mov	r0, r5
    c320:	f011 fbfd 	bl	1db1e <memset>
	atomic_set(&data->state, STATE_READY);
    c324:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    c326:	4638      	mov	r0, r7
    c328:	f010 fe2c 	bl	1cf84 <atomic_set.isra.0>
	return err;
    c32c:	e7c1      	b.n	c2b2 <close+0x36>
		return -ENOSYS;
    c32e:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    c332:	2102      	movs	r1, #2
    c334:	e7f7      	b.n	c326 <close+0xaa>
		return -EALREADY;
    c336:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c33a:	e7ba      	b.n	c2b2 <close+0x36>
    c33c:	00023bfa 	.word	0x00023bfa

0000c340 <send>:
{
    c340:	b513      	push	{r0, r1, r4, lr}
    c342:	4604      	mov	r4, r0
    c344:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c346:	6921      	ldr	r1, [r4, #16]
    c348:	f501 7155 	add.w	r1, r1, #852	; 0x354
    c34c:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    c350:	2902      	cmp	r1, #2
    c352:	d110      	bne.n	c376 <send+0x36>
	if (len == 0) {
    c354:	b193      	cbz	r3, c37c <send+0x3c>
	if (!rpmsg_ept) {
    c356:	b1a0      	cbz	r0, c382 <send+0x42>
    c358:	2101      	movs	r1, #1
    c35a:	e9cd 3100 	strd	r3, r1, [sp]
    c35e:	4613      	mov	r3, r2
    c360:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    c364:	f00b fdfc 	bl	17f60 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    c368:	4b07      	ldr	r3, [pc, #28]	; (c388 <send+0x48>)
		return -ENOMEM;
    c36a:	4298      	cmp	r0, r3
    c36c:	bf08      	it	eq
    c36e:	f06f 000b 	mvneq.w	r0, #11
}
    c372:	b002      	add	sp, #8
    c374:	bd10      	pop	{r4, pc}
		return -EBUSY;
    c376:	f06f 000f 	mvn.w	r0, #15
    c37a:	e7fa      	b.n	c372 <send+0x32>
		return -EBADMSG;
    c37c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    c380:	e7f7      	b.n	c372 <send+0x32>
		return -ENOENT;
    c382:	f06f 0001 	mvn.w	r0, #1
    c386:	e7f4      	b.n	c372 <send+0x32>
    c388:	fffff82e 	.word	0xfffff82e

0000c38c <register_ept>:
{
    c38c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c390:	4688      	mov	r8, r1
    c392:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    c394:	6906      	ldr	r6, [r0, #16]
    c396:	f506 7355 	add.w	r3, r6, #852	; 0x354
    c39a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    c39e:	2b02      	cmp	r3, #2
    c3a0:	d15f      	bne.n	c462 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    c3a2:	6813      	ldr	r3, [r2, #0]
    c3a4:	b923      	cbnz	r3, c3b0 <register_ept+0x24>
		return -EINVAL;
    c3a6:	f06f 0015 	mvn.w	r0, #21
}
    c3aa:	b003      	add	sp, #12
    c3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    c3b0:	781b      	ldrb	r3, [r3, #0]
    c3b2:	2b00      	cmp	r3, #0
    c3b4:	d0f7      	beq.n	c3a6 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    c3b6:	f8d6 9350 	ldr.w	r9, [r6, #848]	; 0x350
    c3ba:	f1b9 0f00 	cmp.w	r9, #0
    c3be:	d133      	bne.n	c428 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    c3c0:	f506 77ce 	add.w	r7, r6, #412	; 0x19c
	return z_impl_k_mutex_lock(mutex, timeout);
    c3c4:	f04f 32ff 	mov.w	r2, #4294967295
    c3c8:	f04f 33ff 	mov.w	r3, #4294967295
    c3cc:	4638      	mov	r0, r7
    c3ce:	f00c fdfb 	bl	18fc8 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    c3d2:	4630      	mov	r0, r6
    c3d4:	682a      	ldr	r2, [r5, #0]
    c3d6:	a901      	add	r1, sp, #4
    c3d8:	f7ff fe60 	bl	c09c <get_ept>
	if (rpmsg_ept == NULL) {
    c3dc:	9c01      	ldr	r4, [sp, #4]
    c3de:	b91c      	cbnz	r4, c3e8 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c3e0:	4638      	mov	r0, r7
    c3e2:	f010 fdcd 	bl	1cf80 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    c3e6:	e7de      	b.n	c3a6 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    c3e8:	f105 0308 	add.w	r3, r5, #8
    c3ec:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c3ee:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    c3f0:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    c3f4:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    c3f6:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    c3f8:	b160      	cbz	r0, c414 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c3fa:	4638      	mov	r0, r7
    c3fc:	f010 fdc0 	bl	1cf80 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    c400:	4621      	mov	r1, r4
    c402:	4630      	mov	r0, r6
    c404:	6e23      	ldr	r3, [r4, #96]	; 0x60
    c406:	682a      	ldr	r2, [r5, #0]
    c408:	f7ff fe26 	bl	c058 <advertise_ept>
	return 0;
    c40c:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    c40e:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    c412:	e7ca      	b.n	c3aa <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c414:	2220      	movs	r2, #32
    c416:	6829      	ldr	r1, [r5, #0]
    c418:	f104 0040 	add.w	r0, r4, #64	; 0x40
    c41c:	f011 fb21 	bl	1da62 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    c420:	4638      	mov	r0, r7
    c422:	f010 fdad 	bl	1cf80 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    c426:	e7f1      	b.n	c40c <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    c428:	4630      	mov	r0, r6
    c42a:	490f      	ldr	r1, [pc, #60]	; (c468 <register_ept+0xdc>)
    c42c:	f010 fd5e 	bl	1ceec <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    c430:	4604      	mov	r4, r0
    c432:	2800      	cmp	r0, #0
    c434:	d0b7      	beq.n	c3a6 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    c436:	f105 0308 	add.w	r3, r5, #8
    c43a:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c43c:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    c43e:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    c440:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    c442:	2300      	movs	r3, #0
    c444:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c448:	2220      	movs	r2, #32
    c44a:	6829      	ldr	r1, [r5, #0]
    c44c:	3040      	adds	r0, #64	; 0x40
    c44e:	f011 fb08 	bl	1da62 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    c452:	4622      	mov	r2, r4
    c454:	2101      	movs	r1, #1
    c456:	4630      	mov	r0, r6
    c458:	f000 f83e 	bl	c4d8 <ipc_rpmsg_register_ept>
	if (err != 0) {
    c45c:	2800      	cmp	r0, #0
    c45e:	d0d5      	beq.n	c40c <register_ept+0x80>
    c460:	e7a1      	b.n	c3a6 <register_ept+0x1a>
		return -EBUSY;
    c462:	f06f 000f 	mvn.w	r0, #15
    c466:	e7a0      	b.n	c3aa <register_ept+0x1e>
    c468:	00023bfa 	.word	0x00023bfa

0000c46c <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c470:	4605      	mov	r5, r0
    c472:	460e      	mov	r6, r1
    c474:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c476:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    c478:	f8d0 a0a4 	ldr.w	sl, [r0, #164]	; 0xa4
{
    c47c:	b085      	sub	sp, #20
    c47e:	f5aa 74a4 	sub.w	r4, sl, #328	; 0x148
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    c482:	4621      	mov	r1, r4
    c484:	4630      	mov	r0, r6
    c486:	f011 fb10 	bl	1daaa <strcmp>
    c48a:	b9e0      	cbnz	r0, c4c6 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c48c:	4b11      	ldr	r3, [pc, #68]	; (c4d4 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    c48e:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    c492:	9302      	str	r3, [sp, #8]
    c494:	f8da 3010 	ldr.w	r3, [sl, #16]
    c498:	4632      	mov	r2, r6
    c49a:	e9cd 8300 	strd	r8, r3, [sp]
    c49e:	4629      	mov	r1, r5
    c4a0:	f04f 33ff 	mov.w	r3, #4294967295
    c4a4:	4658      	mov	r0, fp
    c4a6:	f5aa 79c4 	sub.w	r9, sl, #392	; 0x188
    c4aa:	f00b fd9f 	bl	17fec <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    c4ae:	b960      	cbnz	r0, c4ca <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    c4b0:	2370      	movs	r3, #112	; 0x70
    c4b2:	2201      	movs	r2, #1
    c4b4:	fb03 9307 	mla	r3, r3, r7, r9
    c4b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    c4bc:	f8da 300c 	ldr.w	r3, [sl, #12]
    c4c0:	b10b      	cbz	r3, c4c6 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    c4c2:	4658      	mov	r0, fp
    c4c4:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c4c6:	3470      	adds	r4, #112	; 0x70
    c4c8:	b117      	cbz	r7, c4d0 <ns_bind_cb+0x64>
			}
		}
	}
}
    c4ca:	b005      	add	sp, #20
    c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c4d0:	2701      	movs	r7, #1
    c4d2:	e7d6      	b.n	c482 <ns_bind_cb+0x16>
    c4d4:	0001d059 	.word	0x0001d059

0000c4d8 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    c4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c4da:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    c4dc:	b190      	cbz	r0, c504 <ipc_rpmsg_register_ept+0x2c>
    c4de:	b18a      	cbz	r2, c504 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    c4e0:	2901      	cmp	r1, #1
    c4e2:	d112      	bne.n	c50a <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    c4e4:	4b0a      	ldr	r3, [pc, #40]	; (c510 <ipc_rpmsg_register_ept+0x38>)
    c4e6:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    c4ea:	9302      	str	r3, [sp, #8]
    c4ec:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    c4f0:	3240      	adds	r2, #64	; 0x40
    c4f2:	9301      	str	r3, [sp, #4]
    c4f4:	f04f 33ff 	mov.w	r3, #4294967295
    c4f8:	4620      	mov	r0, r4
    c4fa:	9300      	str	r3, [sp, #0]
    c4fc:	f00b fd76 	bl	17fec <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    c500:	b004      	add	sp, #16
    c502:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c504:	f06f 0015 	mvn.w	r0, #21
    c508:	e7fa      	b.n	c500 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    c50a:	2000      	movs	r0, #0
    c50c:	e7f8      	b.n	c500 <ipc_rpmsg_register_ept+0x28>
    c50e:	bf00      	nop
    c510:	0001d059 	.word	0x0001d059

0000c514 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    c514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c518:	b085      	sub	sp, #20
    c51a:	460f      	mov	r7, r1
    c51c:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	; 0x30
    c520:	4614      	mov	r4, r2
    c522:	e9dd 250e 	ldrd	r2, r5, [sp, #56]	; 0x38
    c526:	461e      	mov	r6, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    c528:	b328      	cbz	r0, c576 <ipc_rpmsg_init+0x62>
    c52a:	b321      	cbz	r1, c576 <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    c52c:	f8df c04c 	ldr.w	ip, [pc, #76]	; c57c <ipc_rpmsg_init+0x68>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    c530:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    c534:	2d00      	cmp	r5, #0
    c536:	bf08      	it	eq
    c538:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    c53a:	b997      	cbnz	r7, c562 <ipc_rpmsg_init+0x4e>
		config.r2h_buf_size = (uint32_t) buffer_size;
    c53c:	e9cd 4402 	strd	r4, r4, [sp, #8]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    c540:	f500 74c4 	add.w	r4, r0, #392	; 0x188
    c544:	4620      	mov	r0, r4
    c546:	f013 fce0 	bl	1ff0a <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    c54a:	ab02      	add	r3, sp, #8
    c54c:	e9cd 4300 	strd	r4, r3, [sp]
    c550:	462a      	mov	r2, r5
    c552:	4633      	mov	r3, r6
    c554:	4641      	mov	r1, r8
    c556:	4648      	mov	r0, r9
    c558:	f00b ff0c 	bl	18374 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    c55c:	b005      	add	sp, #20
    c55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    c562:	2200      	movs	r2, #0
    c564:	4641      	mov	r1, r8
    c566:	920c      	str	r2, [sp, #48]	; 0x30
    c568:	4648      	mov	r0, r9
    c56a:	462a      	mov	r2, r5
}
    c56c:	b005      	add	sp, #20
    c56e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    c572:	f00c b80f 	b.w	18594 <rpmsg_init_vdev>
		return -EINVAL;
    c576:	f06f 0015 	mvn.w	r0, #21
    c57a:	e7ef      	b.n	c55c <ipc_rpmsg_init+0x48>
    c57c:	0000c46d 	.word	0x0000c46d

0000c580 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    c580:	b5f0      	push	{r4, r5, r6, r7, lr}
    c582:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    c584:	4604      	mov	r4, r0
{
    c586:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    c588:	2800      	cmp	r0, #0
    c58a:	d06f      	beq.n	c66c <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    c58c:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    c58e:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    c590:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c592:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    c594:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    c598:	4f36      	ldr	r7, [pc, #216]	; (c674 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c59a:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    c59c:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    c5a0:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    c5a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c5a8:	f04f 33ff 	mov.w	r3, #4294967295
    c5ac:	9300      	str	r3, [sp, #0]
    c5ae:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    c5b0:	f013 f857 	bl	1f662 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    c5b4:	4a30      	ldr	r2, [pc, #192]	; (c678 <ipc_static_vrings_init+0xf8>)
    c5b6:	ab06      	add	r3, sp, #24
    c5b8:	e892 0003 	ldmia.w	r2, {r0, r1}
    c5bc:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    c5c0:	4618      	mov	r0, r3
    c5c2:	f00b fbed 	bl	17da0 <metal_init>
	if (err != 0) {
    c5c6:	4605      	mov	r5, r0
    c5c8:	b9d8      	cbnz	r0, c602 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    c5ca:	f104 0034 	add.w	r0, r4, #52	; 0x34
    c5ce:	f00b fbc7 	bl	17d60 <metal_register_generic_device>
	if (err != 0) {
    c5d2:	4605      	mov	r5, r0
    c5d4:	b9a8      	cbnz	r0, c602 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    c5d6:	4639      	mov	r1, r7
    c5d8:	4828      	ldr	r0, [pc, #160]	; (c67c <ipc_static_vrings_init+0xfc>)
    c5da:	aa05      	add	r2, sp, #20
    c5dc:	f013 f819 	bl	1f612 <metal_device_open>
	if (err != 0) {
    c5e0:	4605      	mov	r5, r0
    c5e2:	b970      	cbnz	r0, c602 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    c5e4:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    c5e6:	689a      	ldr	r2, [r3, #8]
    c5e8:	b172      	cbz	r2, c608 <ipc_static_vrings_init+0x88>
    c5ea:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    c5ec:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    c5f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    c5f4:	f010 fd61 	bl	1d0ba <virtqueue_allocate>
    c5f8:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    c5fc:	b930      	cbnz	r0, c60c <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    c5fe:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    c602:	4628      	mov	r0, r5
    c604:	b009      	add	sp, #36	; 0x24
    c606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c608:	4603      	mov	r3, r0
    c60a:	e7ef      	b.n	c5ec <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    c60c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c610:	f010 fd53 	bl	1d0ba <virtqueue_allocate>
    c614:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    c618:	2800      	cmp	r0, #0
    c61a:	d0f0      	beq.n	c5fe <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    c61c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    c620:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    c624:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    c628:	2304      	movs	r3, #4
    c62a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    c62e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    c632:	2302      	movs	r3, #2
    c634:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    c636:	4b12      	ldr	r3, [pc, #72]	; (c680 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    c638:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    c63c:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    c640:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    c644:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    c648:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    c64c:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    c64e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    c652:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    c656:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    c65a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    c65e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    c662:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    c666:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    c668:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    c66a:	e7ca      	b.n	c602 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    c66c:	f06f 0515 	mvn.w	r5, #21
    c670:	e7c7      	b.n	c602 <ipc_static_vrings_init+0x82>
    c672:	bf00      	nop
    c674:	00021f7b 	.word	0x00021f7b
    c678:	00020934 	.word	0x00020934
    c67c:	00021f85 	.word	0x00021f85
    c680:	00020adc 	.word	0x00020adc

0000c684 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c688:	4605      	mov	r5, r0
	__asm__ volatile(
    c68a:	f04f 0320 	mov.w	r3, #32
    c68e:	f3ef 8611 	mrs	r6, BASEPRI
    c692:	f383 8812 	msr	BASEPRI_MAX, r3
    c696:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c69a:	4820      	ldr	r0, [pc, #128]	; (c71c <pm_state_notify+0x98>)
    c69c:	f00c fc3e 	bl	18f1c <z_spin_lock_valid>
    c6a0:	b968      	cbnz	r0, c6be <pm_state_notify+0x3a>
    c6a2:	2394      	movs	r3, #148	; 0x94
    c6a4:	4a1e      	ldr	r2, [pc, #120]	; (c720 <pm_state_notify+0x9c>)
    c6a6:	491f      	ldr	r1, [pc, #124]	; (c724 <pm_state_notify+0xa0>)
    c6a8:	481f      	ldr	r0, [pc, #124]	; (c728 <pm_state_notify+0xa4>)
    c6aa:	f010 fa1e 	bl	1caea <assert_print>
    c6ae:	491b      	ldr	r1, [pc, #108]	; (c71c <pm_state_notify+0x98>)
    c6b0:	481e      	ldr	r0, [pc, #120]	; (c72c <pm_state_notify+0xa8>)
    c6b2:	f010 fa1a 	bl	1caea <assert_print>
    c6b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6b8:	4819      	ldr	r0, [pc, #100]	; (c720 <pm_state_notify+0x9c>)
    c6ba:	f010 fa0f 	bl	1cadc <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c6be:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    c6c2:	4816      	ldr	r0, [pc, #88]	; (c71c <pm_state_notify+0x98>)
    c6c4:	f00c fc46 	bl	18f54 <z_spin_lock_set_owner>
	return list->head;
    c6c8:	4b19      	ldr	r3, [pc, #100]	; (c730 <pm_state_notify+0xac>)
    c6ca:	4f1a      	ldr	r7, [pc, #104]	; (c734 <pm_state_notify+0xb0>)
    c6cc:	681c      	ldr	r4, [r3, #0]
    c6ce:	f8df 8068 	ldr.w	r8, [pc, #104]	; c738 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c6d2:	b97c      	cbnz	r4, c6f4 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6d4:	4811      	ldr	r0, [pc, #68]	; (c71c <pm_state_notify+0x98>)
    c6d6:	f00c fc2f 	bl	18f38 <z_spin_unlock_valid>
    c6da:	b9c8      	cbnz	r0, c710 <pm_state_notify+0x8c>
    c6dc:	23c2      	movs	r3, #194	; 0xc2
    c6de:	4a10      	ldr	r2, [pc, #64]	; (c720 <pm_state_notify+0x9c>)
    c6e0:	4916      	ldr	r1, [pc, #88]	; (c73c <pm_state_notify+0xb8>)
    c6e2:	4811      	ldr	r0, [pc, #68]	; (c728 <pm_state_notify+0xa4>)
    c6e4:	f010 fa01 	bl	1caea <assert_print>
    c6e8:	490c      	ldr	r1, [pc, #48]	; (c71c <pm_state_notify+0x98>)
    c6ea:	4815      	ldr	r0, [pc, #84]	; (c740 <pm_state_notify+0xbc>)
    c6ec:	f010 f9fd 	bl	1caea <assert_print>
    c6f0:	21c2      	movs	r1, #194	; 0xc2
    c6f2:	e7e1      	b.n	c6b8 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    c6f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    c6f8:	2d00      	cmp	r5, #0
    c6fa:	bf18      	it	ne
    c6fc:	4613      	movne	r3, r2
		if (callback) {
    c6fe:	b12b      	cbz	r3, c70c <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c700:	f898 2014 	ldrb.w	r2, [r8, #20]
    c704:	fb09 f202 	mul.w	r2, r9, r2
    c708:	5cb8      	ldrb	r0, [r7, r2]
    c70a:	4798      	blx	r3
	return node->next;
    c70c:	6824      	ldr	r4, [r4, #0]
    c70e:	e7e0      	b.n	c6d2 <pm_state_notify+0x4e>
	__asm__ volatile(
    c710:	f386 8811 	msr	BASEPRI, r6
    c714:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c71c:	20009768 	.word	0x20009768
    c720:	0002197b 	.word	0x0002197b
    c724:	000219d4 	.word	0x000219d4
    c728:	00021547 	.word	0x00021547
    c72c:	000219e9 	.word	0x000219e9
    c730:	20009788 	.word	0x20009788
    c734:	2000977c 	.word	0x2000977c
    c738:	20009bfc 	.word	0x20009bfc
    c73c:	000219a8 	.word	0x000219a8
    c740:	000219bf 	.word	0x000219bf

0000c744 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c744:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    c746:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c748:	4b16      	ldr	r3, [pc, #88]	; (c7a4 <pm_system_resume+0x60>)
    c74a:	7d1c      	ldrb	r4, [r3, #20]
    c74c:	f004 031f 	and.w	r3, r4, #31
    c750:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c752:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c754:	4b14      	ldr	r3, [pc, #80]	; (c7a8 <pm_system_resume+0x64>)
    c756:	0961      	lsrs	r1, r4, #5
    c758:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c75c:	e8d3 1fef 	ldaex	r1, [r3]
    c760:	ea01 0500 	and.w	r5, r1, r0
    c764:	e8c3 5fe6 	stlex	r6, r5, [r3]
    c768:	2e00      	cmp	r6, #0
    c76a:	d1f7      	bne.n	c75c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c76c:	420a      	tst	r2, r1
    c76e:	d013      	beq.n	c798 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    c770:	4b0e      	ldr	r3, [pc, #56]	; (c7ac <pm_system_resume+0x68>)
    c772:	4d0f      	ldr	r5, [pc, #60]	; (c7b0 <pm_system_resume+0x6c>)
    c774:	b18b      	cbz	r3, c79a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c776:	230c      	movs	r3, #12
    c778:	4363      	muls	r3, r4
    c77a:	18ea      	adds	r2, r5, r3
    c77c:	7851      	ldrb	r1, [r2, #1]
    c77e:	5ce8      	ldrb	r0, [r5, r3]
    c780:	f010 faaf 	bl	1cce2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    c784:	2000      	movs	r0, #0
    c786:	f7ff ff7d 	bl	c684 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c78a:	230c      	movs	r3, #12
    c78c:	435c      	muls	r4, r3
    c78e:	2300      	movs	r3, #0
    c790:	192a      	adds	r2, r5, r4
    c792:	512b      	str	r3, [r5, r4]
    c794:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    c798:	bd70      	pop	{r4, r5, r6, pc}
    c79a:	f383 8811 	msr	BASEPRI, r3
    c79e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    c7a2:	e7ef      	b.n	c784 <pm_system_resume+0x40>
    c7a4:	20009bfc 	.word	0x20009bfc
    c7a8:	20009790 	.word	0x20009790
    c7ac:	0001cce3 	.word	0x0001cce3
    c7b0:	2000977c 	.word	0x2000977c

0000c7b4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    c7b8:	4b45      	ldr	r3, [pc, #276]	; (c8d0 <pm_system_suspend+0x11c>)
{
    c7ba:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    c7bc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    c7be:	f04f 0320 	mov.w	r3, #32
    c7c2:	f3ef 8811 	mrs	r8, BASEPRI
    c7c6:	f383 8812 	msr	BASEPRI_MAX, r3
    c7ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c7ce:	4841      	ldr	r0, [pc, #260]	; (c8d4 <pm_system_suspend+0x120>)
    c7d0:	f00c fba4 	bl	18f1c <z_spin_lock_valid>
    c7d4:	b968      	cbnz	r0, c7f2 <pm_system_suspend+0x3e>
    c7d6:	2394      	movs	r3, #148	; 0x94
    c7d8:	4a3f      	ldr	r2, [pc, #252]	; (c8d8 <pm_system_suspend+0x124>)
    c7da:	4940      	ldr	r1, [pc, #256]	; (c8dc <pm_system_suspend+0x128>)
    c7dc:	4840      	ldr	r0, [pc, #256]	; (c8e0 <pm_system_suspend+0x12c>)
    c7de:	f010 f984 	bl	1caea <assert_print>
    c7e2:	493c      	ldr	r1, [pc, #240]	; (c8d4 <pm_system_suspend+0x120>)
    c7e4:	483f      	ldr	r0, [pc, #252]	; (c8e4 <pm_system_suspend+0x130>)
    c7e6:	f010 f980 	bl	1caea <assert_print>
    c7ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c7ec:	483a      	ldr	r0, [pc, #232]	; (c8d8 <pm_system_suspend+0x124>)
    c7ee:	f010 f975 	bl	1cadc <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c7f2:	240c      	movs	r4, #12
    c7f4:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    c7f6:	4837      	ldr	r0, [pc, #220]	; (c8d4 <pm_system_suspend+0x120>)
    c7f8:	f00c fbac 	bl	18f54 <z_spin_lock_set_owner>
    c7fc:	4b3a      	ldr	r3, [pc, #232]	; (c8e8 <pm_system_suspend+0x134>)
    c7fe:	4e3b      	ldr	r6, [pc, #236]	; (c8ec <pm_system_suspend+0x138>)
    c800:	5d19      	ldrb	r1, [r3, r4]
    c802:	191a      	adds	r2, r3, r4
    c804:	b1b9      	cbz	r1, c836 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c806:	ca07      	ldmia	r2, {r0, r1, r2}
    c808:	eb06 0c04 	add.w	ip, r6, r4
    c80c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c810:	2200      	movs	r2, #0
    c812:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c814:	482f      	ldr	r0, [pc, #188]	; (c8d4 <pm_system_suspend+0x120>)
    c816:	f00c fb8f 	bl	18f38 <z_spin_unlock_valid>
    c81a:	4604      	mov	r4, r0
    c81c:	b9b0      	cbnz	r0, c84c <pm_system_suspend+0x98>
    c81e:	23c2      	movs	r3, #194	; 0xc2
    c820:	4a2d      	ldr	r2, [pc, #180]	; (c8d8 <pm_system_suspend+0x124>)
    c822:	4933      	ldr	r1, [pc, #204]	; (c8f0 <pm_system_suspend+0x13c>)
    c824:	482e      	ldr	r0, [pc, #184]	; (c8e0 <pm_system_suspend+0x12c>)
    c826:	f010 f960 	bl	1caea <assert_print>
    c82a:	492a      	ldr	r1, [pc, #168]	; (c8d4 <pm_system_suspend+0x120>)
    c82c:	4831      	ldr	r0, [pc, #196]	; (c8f4 <pm_system_suspend+0x140>)
    c82e:	f010 f95c 	bl	1caea <assert_print>
    c832:	21c2      	movs	r1, #194	; 0xc2
    c834:	e7da      	b.n	c7ec <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    c836:	4639      	mov	r1, r7
    c838:	4628      	mov	r0, r5
    c83a:	f000 f865 	bl	c908 <pm_policy_next_state>
		if (info != NULL) {
    c83e:	2800      	cmp	r0, #0
    c840:	d0e8      	beq.n	c814 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    c842:	c807      	ldmia	r0, {r0, r1, r2}
    c844:	4434      	add	r4, r6
    c846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c84a:	e7e3      	b.n	c814 <pm_system_suspend+0x60>
	__asm__ volatile(
    c84c:	f388 8811 	msr	BASEPRI, r8
    c850:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c854:	230c      	movs	r3, #12
    c856:	436b      	muls	r3, r5
    c858:	18f2      	adds	r2, r6, r3
    c85a:	5cf3      	ldrb	r3, [r6, r3]
    c85c:	b3ab      	cbz	r3, c8ca <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c85e:	1c7b      	adds	r3, r7, #1
    c860:	d00f      	beq.n	c882 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c862:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    c866:	2100      	movs	r1, #0
    c868:	f8d2 e008 	ldr.w	lr, [r2, #8]
    c86c:	4822      	ldr	r0, [pc, #136]	; (c8f8 <pm_system_suspend+0x144>)
    c86e:	2300      	movs	r3, #0
    c870:	fbee 010c 	umlal	r0, r1, lr, ip
    c874:	4a21      	ldr	r2, [pc, #132]	; (c8fc <pm_system_suspend+0x148>)
    c876:	f7fc f85d 	bl	8934 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    c87a:	2101      	movs	r1, #1
    c87c:	1a38      	subs	r0, r7, r0
    c87e:	f00f f889 	bl	1b994 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c882:	f00d ff07 	bl	1a694 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c886:	2001      	movs	r0, #1
    c888:	f7ff fefc 	bl	c684 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c88c:	4b1c      	ldr	r3, [pc, #112]	; (c900 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c88e:	096a      	lsrs	r2, r5, #5
    c890:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    c894:	2201      	movs	r2, #1
    c896:	f005 011f 	and.w	r1, r5, #31
    c89a:	408a      	lsls	r2, r1
    c89c:	e8d3 0fef 	ldaex	r0, [r3]
    c8a0:	4310      	orrs	r0, r2
    c8a2:	e8c3 0fe1 	stlex	r1, r0, [r3]
    c8a6:	2900      	cmp	r1, #0
    c8a8:	d1f8      	bne.n	c89c <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    c8aa:	4b16      	ldr	r3, [pc, #88]	; (c904 <pm_system_suspend+0x150>)
    c8ac:	b133      	cbz	r3, c8bc <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    c8ae:	230c      	movs	r3, #12
    c8b0:	436b      	muls	r3, r5
    c8b2:	18f2      	adds	r2, r6, r3
    c8b4:	7851      	ldrb	r1, [r2, #1]
    c8b6:	5cf0      	ldrb	r0, [r6, r3]
    c8b8:	f010 fa07 	bl	1ccca <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c8bc:	f7ff ff42 	bl	c744 <pm_system_resume>
	k_sched_unlock();
    c8c0:	f00d ff54 	bl	1a76c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    c8c4:	4620      	mov	r0, r4
    c8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c8ca:	461c      	mov	r4, r3
    c8cc:	e7fa      	b.n	c8c4 <pm_system_suspend+0x110>
    c8ce:	bf00      	nop
    c8d0:	20009bfc 	.word	0x20009bfc
    c8d4:	2000976c 	.word	0x2000976c
    c8d8:	0002197b 	.word	0x0002197b
    c8dc:	000219d4 	.word	0x000219d4
    c8e0:	00021547 	.word	0x00021547
    c8e4:	000219e9 	.word	0x000219e9
    c8e8:	20009770 	.word	0x20009770
    c8ec:	2000977c 	.word	0x2000977c
    c8f0:	000219a8 	.word	0x000219a8
    c8f4:	000219bf 	.word	0x000219bf
    c8f8:	000f423f 	.word	0x000f423f
    c8fc:	000f4240 	.word	0x000f4240
    c900:	20009790 	.word	0x20009790
    c904:	0001cccb 	.word	0x0001cccb

0000c908 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c90c:	b085      	sub	sp, #20
    c90e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c910:	a903      	add	r1, sp, #12
    c912:	f000 f843 	bl	c99c <pm_state_cpu_get_all>
    c916:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c91a:	4604      	mov	r4, r0
    c91c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c920:	4b1b      	ldr	r3, [pc, #108]	; (c990 <pm_policy_next_state+0x88>)
    c922:	9d03      	ldr	r5, [sp, #12]
    c924:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c928:	1e43      	subs	r3, r0, #1
    c92a:	b21b      	sxth	r3, r3
    c92c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c930:	f8df 8060 	ldr.w	r8, [pc, #96]	; c994 <pm_policy_next_state+0x8c>
    c934:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c938:	b924      	cbnz	r4, c944 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    c93a:	46a1      	mov	r9, r4
}
    c93c:	4648      	mov	r0, r9
    c93e:	b005      	add	sp, #20
    c940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c944:	46c4      	mov	ip, r8
    c946:	4659      	mov	r1, fp
    c948:	6868      	ldr	r0, [r5, #4]
    c94a:	2300      	movs	r3, #0
    c94c:	fbe0 c107 	umlal	ip, r1, r0, r7
    c950:	4a11      	ldr	r2, [pc, #68]	; (c998 <pm_policy_next_state+0x90>)
    c952:	4660      	mov	r0, ip
    c954:	f7fb ffee 	bl	8934 <__aeabi_uldivmod>
    c958:	46c4      	mov	ip, r8
    c95a:	4659      	mov	r1, fp
    c95c:	9001      	str	r0, [sp, #4]
    c95e:	68a8      	ldr	r0, [r5, #8]
    c960:	2300      	movs	r3, #0
    c962:	fbe0 c107 	umlal	ip, r1, r0, r7
    c966:	4a0c      	ldr	r2, [pc, #48]	; (c998 <pm_policy_next_state+0x90>)
    c968:	4660      	mov	r0, ip
    c96a:	f7fb ffe3 	bl	8934 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c96e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    c972:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c974:	d001      	beq.n	c97a <pm_policy_next_state+0x72>
    c976:	4582      	cmp	sl, r0
    c978:	d905      	bls.n	c986 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    c97a:	1c73      	adds	r3, r6, #1
    c97c:	d0de      	beq.n	c93c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    c97e:	9b01      	ldr	r3, [sp, #4]
    c980:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    c982:	42b0      	cmp	r0, r6
    c984:	d9da      	bls.n	c93c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c986:	3c01      	subs	r4, #1
    c988:	b2a4      	uxth	r4, r4
    c98a:	3d0c      	subs	r5, #12
    c98c:	e7d4      	b.n	c938 <pm_policy_next_state+0x30>
    c98e:	bf00      	nop
    c990:	200081c0 	.word	0x200081c0
    c994:	000f423f 	.word	0x000f423f
    c998:	000f4240 	.word	0x000f4240

0000c99c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c99c:	b908      	cbnz	r0, c9a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c99e:	4b02      	ldr	r3, [pc, #8]	; (c9a8 <pm_state_cpu_get_all+0xc>)
    c9a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c9a2:	2000      	movs	r0, #0
    c9a4:	4770      	bx	lr
    c9a6:	bf00      	nop
    c9a8:	00020b00 	.word	0x00020b00

0000c9ac <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    c9ac:	4904      	ldr	r1, [pc, #16]	; (c9c0 <sub_bytes+0x14>)
    c9ae:	1e43      	subs	r3, r0, #1
    c9b0:	300f      	adds	r0, #15
    c9b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c9b6:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    c9b8:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    c9ba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    c9bc:	d1f9      	bne.n	c9b2 <sub_bytes+0x6>
	}
}
    c9be:	4770      	bx	lr
    c9c0:	00021f90 	.word	0x00021f90

0000c9c4 <tc_aes128_set_encrypt_key>:
{
    c9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9c6:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    c9c8:	4e26      	ldr	r6, [pc, #152]	; (ca64 <tc_aes128_set_encrypt_key+0xa0>)
{
    c9ca:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    c9cc:	ad01      	add	r5, sp, #4
{
    c9ce:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    c9d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c9d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c9d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c9d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c9d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    c9dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    c9e0:	4638      	mov	r0, r7
    c9e2:	2f00      	cmp	r7, #0
    c9e4:	d039      	beq.n	ca5a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    c9e6:	2c00      	cmp	r4, #0
    c9e8:	d039      	beq.n	ca5e <tc_aes128_set_encrypt_key+0x9a>
    c9ea:	1f38      	subs	r0, r7, #4
    c9ec:	4602      	mov	r2, r0
    c9ee:	4621      	mov	r1, r4
    c9f0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c9f2:	784b      	ldrb	r3, [r1, #1]
    c9f4:	780d      	ldrb	r5, [r1, #0]
    c9f6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c9f8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    c9fc:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    c9fe:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    ca00:	432b      	orrs	r3, r5
    ca02:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    ca06:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    ca08:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    ca0c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    ca10:	d1ef      	bne.n	c9f2 <tc_aes128_set_encrypt_key+0x2e>
    ca12:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    ca14:	4c14      	ldr	r4, [pc, #80]	; (ca68 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    ca16:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    ca18:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    ca1a:	d116      	bne.n	ca4a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    ca1c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    ca20:	5ca5      	ldrb	r5, [r4, r2]
    ca22:	0e1a      	lsrs	r2, r3, #24
    ca24:	5ca2      	ldrb	r2, [r4, r2]
    ca26:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    ca2a:	f3c3 2507 	ubfx	r5, r3, #8, #8
    ca2e:	5d65      	ldrb	r5, [r4, r5]
    ca30:	b2db      	uxtb	r3, r3
    ca32:	5ce3      	ldrb	r3, [r4, r3]
    ca34:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    ca38:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    ca3c:	f021 0303 	bic.w	r3, r1, #3
    ca40:	3330      	adds	r3, #48	; 0x30
    ca42:	446b      	add	r3, sp
    ca44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    ca48:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    ca4a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca4e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    ca50:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca52:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    ca54:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca56:	d1de      	bne.n	ca16 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    ca58:	2001      	movs	r0, #1
}
    ca5a:	b00d      	add	sp, #52	; 0x34
    ca5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    ca5e:	4620      	mov	r0, r4
    ca60:	e7fb      	b.n	ca5a <tc_aes128_set_encrypt_key+0x96>
    ca62:	bf00      	nop
    ca64:	0002093c 	.word	0x0002093c
    ca68:	00021f90 	.word	0x00021f90

0000ca6c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ca70:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ca72:	6803      	ldr	r3, [r0, #0]
{
    ca74:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ca76:	9302      	str	r3, [sp, #8]
    ca78:	6843      	ldr	r3, [r0, #4]
    ca7a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; cc38 <compress+0x1cc>
    ca7e:	9303      	str	r3, [sp, #12]
    ca80:	6883      	ldr	r3, [r0, #8]
    ca82:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    ca86:	9304      	str	r3, [sp, #16]
    ca88:	68c3      	ldr	r3, [r0, #12]
    ca8a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ca8c:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ca8e:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ca92:	9306      	str	r3, [sp, #24]
    ca94:	6943      	ldr	r3, [r0, #20]
    ca96:	9307      	str	r3, [sp, #28]
    ca98:	6983      	ldr	r3, [r0, #24]
    ca9a:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    ca9e:	9308      	str	r3, [sp, #32]
    caa0:	69c3      	ldr	r3, [r0, #28]
    caa2:	4698      	mov	r8, r3
    caa4:	9309      	str	r3, [sp, #36]	; 0x24
    caa6:	9b08      	ldr	r3, [sp, #32]
    caa8:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    caaa:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    caac:	ab0c      	add	r3, sp, #48	; 0x30
    caae:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cab0:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    cab4:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    cab6:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    caba:	44a9      	add	r9, r5
    cabc:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    cac0:	9d00      	ldr	r5, [sp, #0]
    cac2:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    cac6:	444b      	add	r3, r9
    cac8:	ea25 0502 	bic.w	r5, r5, r2
    cacc:	ea02 090c 	and.w	r9, r2, ip
    cad0:	ea85 0509 	eor.w	r5, r5, r9
    cad4:	442b      	add	r3, r5
    cad6:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    cad8:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    cadc:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    cae0:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    cae4:	4025      	ands	r5, r4
    cae6:	ea06 090b 	and.w	r9, r6, fp
    caea:	ea85 0509 	eor.w	r5, r5, r9
    caee:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    caf2:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    caf4:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    caf6:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    caf8:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    cafc:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    cafe:	46de      	mov	lr, fp
    cb00:	f8dd 8000 	ldr.w	r8, [sp]
    cb04:	f040 8088 	bne.w	cc18 <compress+0x1ac>
    cb08:	f04f 0a10 	mov.w	sl, #16
    cb0c:	494b      	ldr	r1, [pc, #300]	; (cc3c <compress+0x1d0>)
    cb0e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    cb10:	4651      	mov	r1, sl
    cb12:	f10a 0a01 	add.w	sl, sl, #1
    cb16:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    cb1a:	f00a 070f 	and.w	r7, sl, #15
    cb1e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cb22:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb26:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    cb2a:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    cb2e:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    cb30:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    cb34:	f101 070e 	add.w	r7, r1, #14
    cb38:	f007 070f 	and.w	r7, r7, #15
    cb3c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cb40:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb44:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    cb46:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    cb4a:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    cb4e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb52:	f001 010f 	and.w	r1, r1, #15
    cb56:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    cb5a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    cb5e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    cb62:	f859 ec40 	ldr.w	lr, [r9, #-64]
    cb66:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    cb6a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb6e:	4471      	add	r1, lr
		s0 = sigma0(s0);
    cb70:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb74:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    cb78:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb7c:	4441      	add	r1, r8
		s1 = sigma1(s1);
    cb7e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb82:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cb84:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    cb88:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cb8c:	ea2c 0705 	bic.w	r7, ip, r5
    cb90:	ea87 0708 	eor.w	r7, r7, r8
    cb94:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    cb98:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    cb9c:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    cba0:	4477      	add	r7, lr
    cba2:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cba6:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cbaa:	4477      	add	r7, lr
    cbac:	440f      	add	r7, r1
    cbae:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    cbb0:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cbb4:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    cbb6:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cbba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    cbbe:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    cbc2:	ea07 0703 	and.w	r7, r7, r3
    cbc6:	ea04 0806 	and.w	r8, r4, r6
    cbca:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    cbce:	ea87 0708 	eor.w	r7, r7, r8
    cbd2:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    cbd4:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    cbd6:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    cbda:	f8cd c000 	str.w	ip, [sp]
    cbde:	46b3      	mov	fp, r6
    cbe0:	d122      	bne.n	cc28 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    cbe2:	9902      	ldr	r1, [sp, #8]
    cbe4:	4439      	add	r1, r7
    cbe6:	6001      	str	r1, [r0, #0]
    cbe8:	9903      	ldr	r1, [sp, #12]
    cbea:	4419      	add	r1, r3
    cbec:	9b04      	ldr	r3, [sp, #16]
    cbee:	6041      	str	r1, [r0, #4]
    cbf0:	4423      	add	r3, r4
    cbf2:	6083      	str	r3, [r0, #8]
    cbf4:	9b05      	ldr	r3, [sp, #20]
    cbf6:	4433      	add	r3, r6
    cbf8:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    cbfa:	9b06      	ldr	r3, [sp, #24]
    cbfc:	4473      	add	r3, lr
    cbfe:	6103      	str	r3, [r0, #16]
    cc00:	9b07      	ldr	r3, [sp, #28]
    cc02:	442b      	add	r3, r5
    cc04:	6143      	str	r3, [r0, #20]
    cc06:	9b08      	ldr	r3, [sp, #32]
    cc08:	4413      	add	r3, r2
    cc0a:	6183      	str	r3, [r0, #24]
    cc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc0e:	4463      	add	r3, ip
    cc10:	61c3      	str	r3, [r0, #28]
}
    cc12:	b01d      	add	sp, #116	; 0x74
    cc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc18:	46b3      	mov	fp, r6
    cc1a:	f8cd c000 	str.w	ip, [sp]
    cc1e:	4626      	mov	r6, r4
    cc20:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    cc22:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cc24:	462a      	mov	r2, r5
    cc26:	e740      	b.n	caaa <compress+0x3e>
    cc28:	4694      	mov	ip, r2
    cc2a:	4626      	mov	r6, r4
    cc2c:	462a      	mov	r2, r5
    cc2e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cc30:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    cc32:	463b      	mov	r3, r7
    cc34:	e76c      	b.n	cb10 <compress+0xa4>
    cc36:	bf00      	nop
    cc38:	00020b00 	.word	0x00020b00
    cc3c:	00020b3c 	.word	0x00020b3c

0000cc40 <tc_sha256_init>:
{
    cc40:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    cc42:	4604      	mov	r4, r0
    cc44:	b1c8      	cbz	r0, cc7a <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    cc46:	2270      	movs	r2, #112	; 0x70
    cc48:	2100      	movs	r1, #0
    cc4a:	f010 fa81 	bl	1d150 <_set>
	s->iv[1] = 0xbb67ae85;
    cc4e:	4b0b      	ldr	r3, [pc, #44]	; (cc7c <tc_sha256_init+0x3c>)
    cc50:	4a0b      	ldr	r2, [pc, #44]	; (cc80 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    cc52:	490c      	ldr	r1, [pc, #48]	; (cc84 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    cc54:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    cc58:	4b0b      	ldr	r3, [pc, #44]	; (cc88 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    cc5a:	480c      	ldr	r0, [pc, #48]	; (cc8c <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    cc5c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    cc60:	4b0b      	ldr	r3, [pc, #44]	; (cc90 <tc_sha256_init+0x50>)
    cc62:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    cc66:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    cc68:	4b0a      	ldr	r3, [pc, #40]	; (cc94 <tc_sha256_init+0x54>)
    cc6a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    cc6c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    cc70:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    cc74:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    cc78:	61e3      	str	r3, [r4, #28]
}
    cc7a:	bd10      	pop	{r4, pc}
    cc7c:	bb67ae85 	.word	0xbb67ae85
    cc80:	6a09e667 	.word	0x6a09e667
    cc84:	3c6ef372 	.word	0x3c6ef372
    cc88:	a54ff53a 	.word	0xa54ff53a
    cc8c:	510e527f 	.word	0x510e527f
    cc90:	9b05688c 	.word	0x9b05688c
    cc94:	1f83d9ab 	.word	0x1f83d9ab

0000cc98 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    cc98:	4901      	ldr	r1, [pc, #4]	; (cca0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    cc9a:	2210      	movs	r2, #16
	str	r2, [r1]
    cc9c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    cc9e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    cca0:	e000ed10 	.word	0xe000ed10

0000cca4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    cca4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    cca6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    cca8:	f380 8811 	msr	BASEPRI, r0
	isb
    ccac:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    ccb0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    ccb4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    ccb6:	b662      	cpsie	i
	isb
    ccb8:	f3bf 8f6f 	isb	sy

	bx	lr
    ccbc:	4770      	bx	lr
    ccbe:	bf00      	nop

0000ccc0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    ccc0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    ccc2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    ccc4:	f381 8811 	msr	BASEPRI, r1

	wfe
    ccc8:	bf20      	wfe

	msr	BASEPRI, r0
    ccca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    ccce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    ccd0:	4770      	bx	lr
    ccd2:	bf00      	nop

0000ccd4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ccd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccd8:	4681      	mov	r9, r0

	if (esf != NULL) {
    ccda:	460c      	mov	r4, r1
{
    ccdc:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    ccde:	2900      	cmp	r1, #0
    cce0:	d04c      	beq.n	cd7c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    cce2:	e9d1 1200 	ldrd	r1, r2, [r1]
    cce6:	466e      	mov	r6, sp
    cce8:	b08a      	sub	sp, #40	; 0x28
    ccea:	68a3      	ldr	r3, [r4, #8]
    ccec:	466d      	mov	r5, sp
    ccee:	f04f 0a05 	mov.w	sl, #5
    ccf2:	46a8      	mov	r8, r5
    ccf4:	4825      	ldr	r0, [pc, #148]	; (cd8c <z_arm_fatal_error+0xb8>)
    ccf6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    ccfa:	e9c5 0105 	strd	r0, r1, [r5, #20]
    ccfe:	f848 af10 	str.w	sl, [r8, #16]!
    cd02:	2300      	movs	r3, #0
    cd04:	4642      	mov	r2, r8
    cd06:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cd0a:	4821      	ldr	r0, [pc, #132]	; (cd90 <z_arm_fatal_error+0xbc>)
    cd0c:	f7fe fdfc 	bl	b908 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    cd10:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    cd14:	46b5      	mov	sp, r6
    cd16:	6963      	ldr	r3, [r4, #20]
    cd18:	46ad      	mov	sp, r5
    cd1a:	481e      	ldr	r0, [pc, #120]	; (cd94 <z_arm_fatal_error+0xc0>)
    cd1c:	e9c5 2307 	strd	r2, r3, [r5, #28]
    cd20:	e9c5 0105 	strd	r0, r1, [r5, #20]
    cd24:	f8c5 a010 	str.w	sl, [r5, #16]
    cd28:	2300      	movs	r3, #0
    cd2a:	4642      	mov	r2, r8
    cd2c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cd30:	4817      	ldr	r0, [pc, #92]	; (cd90 <z_arm_fatal_error+0xbc>)
    cd32:	f7fe fde9 	bl	b908 <z_impl_z_log_msg_static_create>
    cd36:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    cd38:	b088      	sub	sp, #32
    cd3a:	69e3      	ldr	r3, [r4, #28]
    cd3c:	466d      	mov	r5, sp
    cd3e:	f04f 0a03 	mov.w	sl, #3
    cd42:	46a8      	mov	r8, r5
    cd44:	4a14      	ldr	r2, [pc, #80]	; (cd98 <z_arm_fatal_error+0xc4>)
    cd46:	e9c5 2305 	strd	r2, r3, [r5, #20]
    cd4a:	f848 af10 	str.w	sl, [r8, #16]!
    cd4e:	2300      	movs	r3, #0
    cd50:	4642      	mov	r2, r8
    cd52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd56:	480e      	ldr	r0, [pc, #56]	; (cd90 <z_arm_fatal_error+0xbc>)
    cd58:	f7fe fdd6 	bl	b908 <z_impl_z_log_msg_static_create>
    cd5c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    cd5e:	69a3      	ldr	r3, [r4, #24]
    cd60:	46ad      	mov	sp, r5
    cd62:	4a0e      	ldr	r2, [pc, #56]	; (cd9c <z_arm_fatal_error+0xc8>)
    cd64:	f8c5 a010 	str.w	sl, [r5, #16]
    cd68:	e9c5 2305 	strd	r2, r3, [r5, #20]
    cd6c:	2300      	movs	r3, #0
    cd6e:	4642      	mov	r2, r8
    cd70:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd74:	4806      	ldr	r0, [pc, #24]	; (cd90 <z_arm_fatal_error+0xbc>)
    cd76:	f7fe fdc7 	bl	b908 <z_impl_z_log_msg_static_create>
    cd7a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    cd7c:	4621      	mov	r1, r4
    cd7e:	4648      	mov	r0, r9
    cd80:	f00b fc1c 	bl	185bc <z_fatal_error>
}
    cd84:	46bd      	mov	sp, r7
    cd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd8a:	bf00      	nop
    cd8c:	00022090 	.word	0x00022090
    cd90:	000208c4 	.word	0x000208c4
    cd94:	000220bf 	.word	0x000220bf
    cd98:	000220ee 	.word	0x000220ee
    cd9c:	000220fd 	.word	0x000220fd

0000cda0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cda0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    cda2:	2800      	cmp	r0, #0
    cda4:	db07      	blt.n	cdb6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cda6:	2301      	movs	r3, #1
    cda8:	0941      	lsrs	r1, r0, #5
    cdaa:	4a03      	ldr	r2, [pc, #12]	; (cdb8 <arch_irq_enable+0x18>)
    cdac:	f000 001f 	and.w	r0, r0, #31
    cdb0:	4083      	lsls	r3, r0
    cdb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    cdb6:	4770      	bx	lr
    cdb8:	e000e100 	.word	0xe000e100

0000cdbc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    cdbc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    cdbe:	2800      	cmp	r0, #0
    cdc0:	db0c      	blt.n	cddc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cdc2:	2201      	movs	r2, #1
    cdc4:	4906      	ldr	r1, [pc, #24]	; (cde0 <arch_irq_disable+0x24>)
    cdc6:	0943      	lsrs	r3, r0, #5
    cdc8:	f000 001f 	and.w	r0, r0, #31
    cdcc:	4082      	lsls	r2, r0
    cdce:	3320      	adds	r3, #32
    cdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cdd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cdd8:	f3bf 8f6f 	isb	sy
}
    cddc:	4770      	bx	lr
    cdde:	bf00      	nop
    cde0:	e000e100 	.word	0xe000e100

0000cde4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cde4:	4b05      	ldr	r3, [pc, #20]	; (cdfc <arch_irq_is_enabled+0x18>)
    cde6:	0942      	lsrs	r2, r0, #5
    cde8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cdec:	2301      	movs	r3, #1
    cdee:	f000 001f 	and.w	r0, r0, #31
    cdf2:	fa03 f000 	lsl.w	r0, r3, r0
}
    cdf6:	4010      	ands	r0, r2
    cdf8:	4770      	bx	lr
    cdfa:	bf00      	nop
    cdfc:	e000e100 	.word	0xe000e100

0000ce00 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    ce00:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    ce02:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    ce04:	2b07      	cmp	r3, #7
{
    ce06:	4604      	mov	r4, r0
    ce08:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    ce0a:	d90f      	bls.n	ce2c <z_arm_irq_priority_set+0x2c>
    ce0c:	235b      	movs	r3, #91	; 0x5b
    ce0e:	4a10      	ldr	r2, [pc, #64]	; (ce50 <z_arm_irq_priority_set+0x50>)
    ce10:	4910      	ldr	r1, [pc, #64]	; (ce54 <z_arm_irq_priority_set+0x54>)
    ce12:	4811      	ldr	r0, [pc, #68]	; (ce58 <z_arm_irq_priority_set+0x58>)
    ce14:	f00f fe69 	bl	1caea <assert_print>
    ce18:	4629      	mov	r1, r5
    ce1a:	4810      	ldr	r0, [pc, #64]	; (ce5c <z_arm_irq_priority_set+0x5c>)
    ce1c:	2307      	movs	r3, #7
    ce1e:	4622      	mov	r2, r4
    ce20:	f00f fe63 	bl	1caea <assert_print>
    ce24:	215b      	movs	r1, #91	; 0x5b
    ce26:	480a      	ldr	r0, [pc, #40]	; (ce50 <z_arm_irq_priority_set+0x50>)
    ce28:	f00f fe58 	bl	1cadc <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ce2c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ce2e:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce30:	bfac      	ite	ge
    ce32:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce36:	4a0a      	ldrlt	r2, [pc, #40]	; (ce60 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce38:	ea4f 1343 	mov.w	r3, r3, lsl #5
    ce3c:	b2db      	uxtb	r3, r3
    ce3e:	bfab      	itete	ge
    ce40:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce44:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce48:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce4c:	5413      	strblt	r3, [r2, r0]
}
    ce4e:	bd38      	pop	{r3, r4, r5, pc}
    ce50:	0002212b 	.word	0x0002212b
    ce54:	00022161 	.word	0x00022161
    ce58:	00021547 	.word	0x00021547
    ce5c:	0002217c 	.word	0x0002217c
    ce60:	e000ed14 	.word	0xe000ed14

0000ce64 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    ce64:	bf30      	wfi
    b z_SysNmiOnReset
    ce66:	f7ff bffd 	b.w	ce64 <z_SysNmiOnReset>
    ce6a:	bf00      	nop

0000ce6c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ce6c:	4a0b      	ldr	r2, [pc, #44]	; (ce9c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    ce6e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ce70:	4b0b      	ldr	r3, [pc, #44]	; (cea0 <z_arm_prep_c+0x34>)
    ce72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ce76:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    ce78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ce7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    ce80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ce84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    ce88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ce8c:	f00b fc68 	bl	18760 <z_bss_zero>
	z_data_copy();
    ce90:	f00e fbc0 	bl	1b614 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    ce94:	f000 fc00 	bl	d698 <z_arm_interrupt_init>
	z_cstart();
    ce98:	f00b fca2 	bl	187e0 <z_cstart>
    ce9c:	00008000 	.word	0x00008000
    cea0:	e000ed00 	.word	0xe000ed00

0000cea4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cea4:	4a09      	ldr	r2, [pc, #36]	; (cecc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cea6:	490a      	ldr	r1, [pc, #40]	; (ced0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    cea8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ceaa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    ceac:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    ceae:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ceb0:	4908      	ldr	r1, [pc, #32]	; (ced4 <arch_swap+0x30>)
    ceb2:	684b      	ldr	r3, [r1, #4]
    ceb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ceb8:	604b      	str	r3, [r1, #4]
    ceba:	2300      	movs	r3, #0
    cebc:	f383 8811 	msr	BASEPRI, r3
    cec0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cec4:	6893      	ldr	r3, [r2, #8]
}
    cec6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    cec8:	4770      	bx	lr
    ceca:	bf00      	nop
    cecc:	20009bfc 	.word	0x20009bfc
    ced0:	0002116c 	.word	0x0002116c
    ced4:	e000ed00 	.word	0xe000ed00

0000ced8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ced8:	4915      	ldr	r1, [pc, #84]	; (cf30 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ceda:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    cedc:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cee0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    cee4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cee6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ceea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ceee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    cef0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cef4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cef8:	4f0e      	ldr	r7, [pc, #56]	; (cf34 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cefa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cefe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    cf00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    cf02:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    cf04:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    cf08:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    cf0a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    cf0c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    cf0e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    cf12:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    cf16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    cf1a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    cf1e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    cf22:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    cf24:	f010 fd61 	bl	1d9ea <configure_builtin_stack_guard>
    pop {r2, lr}
    cf28:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    cf2c:	4770      	bx	lr
    cf2e:	0000      	.short	0x0000
    ldr r1, =_kernel
    cf30:	20009bfc 	.word	0x20009bfc
    ldr v4, =_SCS_ICSR
    cf34:	e000ed04 	.word	0xe000ed04

0000cf38 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    cf38:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cf3c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cf3e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    cf42:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    cf46:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    cf48:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cf4c:	2902      	cmp	r1, #2
    beq _oops
    cf4e:	d0ff      	beq.n	cf50 <_oops>

0000cf50 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cf50:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    cf52:	f010 fd3b 	bl	1d9cc <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    cf56:	bd01      	pop	{r0, pc}

0000cf58 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    cf58:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    cf5c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    cf5e:	490d      	ldr	r1, [pc, #52]	; (cf94 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    cf60:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    cf64:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    cf66:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    cf6a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    cf6e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    cf70:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    cf74:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    cf78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    cf7c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    cf80:	2300      	movs	r3, #0
    cf82:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    cf84:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    cf88:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    cf8a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    cf8c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    cf90:	4770      	bx	lr
    cf92:	bf00      	nop
    cf94:	0001c70f 	.word	0x0001c70f

0000cf98 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    cf98:	4b08      	ldr	r3, [pc, #32]	; (cfbc <arch_switch_to_main_thread+0x24>)
    cf9a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    cf9c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    cf9e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    cfa2:	4610      	mov	r0, r2
    cfa4:	f381 8809 	msr	PSP, r1
    cfa8:	2100      	movs	r1, #0
    cfaa:	b663      	cpsie	if
    cfac:	f381 8811 	msr	BASEPRI, r1
    cfb0:	f3bf 8f6f 	isb	sy
    cfb4:	2200      	movs	r2, #0
    cfb6:	2300      	movs	r3, #0
    cfb8:	f00f fba9 	bl	1c70e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cfbc:	20009bfc 	.word	0x20009bfc

0000cfc0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    cfc0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    cfc2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cfc4:	4a0b      	ldr	r2, [pc, #44]	; (cff4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cfc6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    cfc8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    cfca:	bf1e      	ittt	ne
	movne	r1, #0
    cfcc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cfce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    cfd0:	f012 ffe8 	blne	1ffa4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    cfd4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    cfd6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    cfda:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cfde:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    cfe2:	4905      	ldr	r1, [pc, #20]	; (cff8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cfe4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cfe6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    cfe8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    cfea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    cfee:	4903      	ldr	r1, [pc, #12]	; (cffc <_isr_wrapper+0x3c>)
	bx r1
    cff0:	4708      	bx	r1
    cff2:	0000      	.short	0x0000
	ldr r2, =_kernel
    cff4:	20009bfc 	.word	0x20009bfc
	ldr r1, =_sw_isr_table
    cff8:	0002052c 	.word	0x0002052c
	ldr r1, =z_arm_int_exit
    cffc:	0000d001 	.word	0x0000d001

0000d000 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d000:	4b04      	ldr	r3, [pc, #16]	; (d014 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d002:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d004:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    d006:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d008:	d003      	beq.n	d012 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d00a:	4903      	ldr	r1, [pc, #12]	; (d018 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d010:	600a      	str	r2, [r1, #0]

0000d012 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d012:	4770      	bx	lr
	ldr r3, =_kernel
    d014:	20009bfc 	.word	0x20009bfc
	ldr r1, =_SCS_ICSR
    d018:	e000ed04 	.word	0xe000ed04

0000d01c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d020:	b086      	sub	sp, #24
    d022:	4606      	mov	r6, r0
    d024:	460d      	mov	r5, r1
    d026:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    d028:	2402      	movs	r4, #2
    d02a:	4b4b      	ldr	r3, [pc, #300]	; (d158 <mem_manage_fault.constprop.0+0x13c>)
    d02c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d030:	617b      	str	r3, [r7, #20]
    d032:	484a      	ldr	r0, [pc, #296]	; (d15c <mem_manage_fault.constprop.0+0x140>)
    d034:	613c      	str	r4, [r7, #16]
    d036:	f107 0210 	add.w	r2, r7, #16
    d03a:	f010 fcda 	bl	1d9f2 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d03e:	4b48      	ldr	r3, [pc, #288]	; (d160 <mem_manage_fault.constprop.0+0x144>)
    d040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d042:	06db      	lsls	r3, r3, #27
    d044:	d509      	bpl.n	d05a <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    d046:	4b47      	ldr	r3, [pc, #284]	; (d164 <mem_manage_fault.constprop.0+0x148>)
    d048:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d04c:	e9c7 4304 	strd	r4, r3, [r7, #16]
    d050:	4842      	ldr	r0, [pc, #264]	; (d15c <mem_manage_fault.constprop.0+0x140>)
    d052:	f107 0210 	add.w	r2, r7, #16
    d056:	f010 fccc 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d05a:	4b41      	ldr	r3, [pc, #260]	; (d160 <mem_manage_fault.constprop.0+0x144>)
    d05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d05e:	0718      	lsls	r0, r3, #28
    d060:	d50a      	bpl.n	d078 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    d062:	4b41      	ldr	r3, [pc, #260]	; (d168 <mem_manage_fault.constprop.0+0x14c>)
    d064:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d068:	617b      	str	r3, [r7, #20]
    d06a:	2302      	movs	r3, #2
    d06c:	483b      	ldr	r0, [pc, #236]	; (d15c <mem_manage_fault.constprop.0+0x140>)
    d06e:	613b      	str	r3, [r7, #16]
    d070:	f107 0210 	add.w	r2, r7, #16
    d074:	f010 fcbd 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d078:	4c39      	ldr	r4, [pc, #228]	; (d160 <mem_manage_fault.constprop.0+0x144>)
    d07a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d07c:	0799      	lsls	r1, r3, #30
    d07e:	d522      	bpl.n	d0c6 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    d080:	46e8      	mov	r8, sp
    d082:	4b3a      	ldr	r3, [pc, #232]	; (d16c <mem_manage_fault.constprop.0+0x150>)
    d084:	f107 0210 	add.w	r2, r7, #16
    d088:	617b      	str	r3, [r7, #20]
    d08a:	2302      	movs	r3, #2
    d08c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d090:	613b      	str	r3, [r7, #16]
    d092:	4832      	ldr	r0, [pc, #200]	; (d15c <mem_manage_fault.constprop.0+0x140>)
    d094:	f010 fcad 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    d098:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d09a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d09c:	0612      	lsls	r2, r2, #24
    d09e:	d512      	bpl.n	d0c6 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    d0a0:	b088      	sub	sp, #32
    d0a2:	466a      	mov	r2, sp
    d0a4:	4932      	ldr	r1, [pc, #200]	; (d170 <mem_manage_fault.constprop.0+0x154>)
    d0a6:	482d      	ldr	r0, [pc, #180]	; (d15c <mem_manage_fault.constprop.0+0x140>)
    d0a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d0ac:	2303      	movs	r3, #3
    d0ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d0b2:	f842 3f10 	str.w	r3, [r2, #16]!
    d0b6:	f010 fc9c 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
    d0ba:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    d0bc:	b11e      	cbz	r6, d0c6 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d0be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d0c4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d0c6:	4b26      	ldr	r3, [pc, #152]	; (d160 <mem_manage_fault.constprop.0+0x144>)
    d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0ca:	07db      	lsls	r3, r3, #31
    d0cc:	d50a      	bpl.n	d0e4 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    d0ce:	4b29      	ldr	r3, [pc, #164]	; (d174 <mem_manage_fault.constprop.0+0x158>)
    d0d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d0d4:	617b      	str	r3, [r7, #20]
    d0d6:	2302      	movs	r3, #2
    d0d8:	4820      	ldr	r0, [pc, #128]	; (d15c <mem_manage_fault.constprop.0+0x140>)
    d0da:	613b      	str	r3, [r7, #16]
    d0dc:	f107 0210 	add.w	r2, r7, #16
    d0e0:	f010 fc87 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d0e4:	4b1e      	ldr	r3, [pc, #120]	; (d160 <mem_manage_fault.constprop.0+0x144>)
    d0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0e8:	069e      	lsls	r6, r3, #26
    d0ea:	d50a      	bpl.n	d102 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    d0ec:	4b22      	ldr	r3, [pc, #136]	; (d178 <mem_manage_fault.constprop.0+0x15c>)
    d0ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d0f2:	617b      	str	r3, [r7, #20]
    d0f4:	2302      	movs	r3, #2
    d0f6:	4819      	ldr	r0, [pc, #100]	; (d15c <mem_manage_fault.constprop.0+0x140>)
    d0f8:	613b      	str	r3, [r7, #16]
    d0fa:	f107 0210 	add.w	r2, r7, #16
    d0fe:	f010 fc78 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d102:	4b17      	ldr	r3, [pc, #92]	; (d160 <mem_manage_fault.constprop.0+0x144>)
    d104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d106:	06d4      	lsls	r4, r2, #27
    d108:	d402      	bmi.n	d110 <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d10a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d10c:	0790      	lsls	r0, r2, #30
    d10e:	d511      	bpl.n	d134 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    d110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d112:	06d9      	lsls	r1, r3, #27
    d114:	d50e      	bpl.n	d134 <mem_manage_fault.constprop.0+0x118>
    d116:	4919      	ldr	r1, [pc, #100]	; (d17c <mem_manage_fault.constprop.0+0x160>)
    d118:	f44f 73ae 	mov.w	r3, #348	; 0x15c
    d11c:	4a18      	ldr	r2, [pc, #96]	; (d180 <mem_manage_fault.constprop.0+0x164>)
    d11e:	4819      	ldr	r0, [pc, #100]	; (d184 <mem_manage_fault.constprop.0+0x168>)
    d120:	f00f fce3 	bl	1caea <assert_print>
    d124:	4818      	ldr	r0, [pc, #96]	; (d188 <mem_manage_fault.constprop.0+0x16c>)
    d126:	f00f fce0 	bl	1caea <assert_print>
    d12a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    d12e:	4814      	ldr	r0, [pc, #80]	; (d180 <mem_manage_fault.constprop.0+0x164>)
    d130:	f00f fcd4 	bl	1cadc <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    d134:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d136:	4b0a      	ldr	r3, [pc, #40]	; (d160 <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
    d138:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d13a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d13c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    d13e:	bf42      	ittt	mi
    d140:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    d142:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    d146:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d14a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    d14e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d150:	7028      	strb	r0, [r5, #0]
}
    d152:	46bd      	mov	sp, r7
    d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d158:	000221bc 	.word	0x000221bc
    d15c:	000208c4 	.word	0x000208c4
    d160:	e000ed00 	.word	0xe000ed00
    d164:	000221d2 	.word	0x000221d2
    d168:	00022205 	.word	0x00022205
    d16c:	00022218 	.word	0x00022218
    d170:	00022230 	.word	0x00022230
    d174:	00022246 	.word	0x00022246
    d178:	00022265 	.word	0x00022265
    d17c:	000222ce 	.word	0x000222ce
    d180:	00022294 	.word	0x00022294
    d184:	00021547 	.word	0x00021547
    d188:	00022318 	.word	0x00022318

0000d18c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d190:	b086      	sub	sp, #24
    d192:	4606      	mov	r6, r0
    d194:	460d      	mov	r5, r1
    d196:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    d198:	2402      	movs	r4, #2
    d19a:	4b3e      	ldr	r3, [pc, #248]	; (d294 <bus_fault.constprop.0+0x108>)
    d19c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1a0:	617b      	str	r3, [r7, #20]
    d1a2:	483d      	ldr	r0, [pc, #244]	; (d298 <bus_fault.constprop.0+0x10c>)
    d1a4:	613c      	str	r4, [r7, #16]
    d1a6:	f107 0210 	add.w	r2, r7, #16
    d1aa:	f010 fc22 	bl	1d9f2 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d1ae:	4b3b      	ldr	r3, [pc, #236]	; (d29c <bus_fault.constprop.0+0x110>)
    d1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1b2:	04d9      	lsls	r1, r3, #19
    d1b4:	d509      	bpl.n	d1ca <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    d1b6:	4b3a      	ldr	r3, [pc, #232]	; (d2a0 <bus_fault.constprop.0+0x114>)
    d1b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1bc:	e9c7 4304 	strd	r4, r3, [r7, #16]
    d1c0:	4835      	ldr	r0, [pc, #212]	; (d298 <bus_fault.constprop.0+0x10c>)
    d1c2:	f107 0210 	add.w	r2, r7, #16
    d1c6:	f010 fc14 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d1ca:	4b34      	ldr	r3, [pc, #208]	; (d29c <bus_fault.constprop.0+0x110>)
    d1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1ce:	051a      	lsls	r2, r3, #20
    d1d0:	d50a      	bpl.n	d1e8 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    d1d2:	4b34      	ldr	r3, [pc, #208]	; (d2a4 <bus_fault.constprop.0+0x118>)
    d1d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1d8:	617b      	str	r3, [r7, #20]
    d1da:	2302      	movs	r3, #2
    d1dc:	482e      	ldr	r0, [pc, #184]	; (d298 <bus_fault.constprop.0+0x10c>)
    d1de:	613b      	str	r3, [r7, #16]
    d1e0:	f107 0210 	add.w	r2, r7, #16
    d1e4:	f010 fc05 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d1e8:	4c2c      	ldr	r4, [pc, #176]	; (d29c <bus_fault.constprop.0+0x110>)
    d1ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1ec:	059b      	lsls	r3, r3, #22
    d1ee:	d522      	bpl.n	d236 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    d1f0:	46e8      	mov	r8, sp
    d1f2:	4b2d      	ldr	r3, [pc, #180]	; (d2a8 <bus_fault.constprop.0+0x11c>)
    d1f4:	4828      	ldr	r0, [pc, #160]	; (d298 <bus_fault.constprop.0+0x10c>)
    d1f6:	617b      	str	r3, [r7, #20]
    d1f8:	2302      	movs	r3, #2
    d1fa:	f107 0210 	add.w	r2, r7, #16
    d1fe:	613b      	str	r3, [r7, #16]
    d200:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d204:	f010 fbf5 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d208:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d20a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d20c:	0410      	lsls	r0, r2, #16
    d20e:	d512      	bpl.n	d236 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d210:	b088      	sub	sp, #32
    d212:	466a      	mov	r2, sp
    d214:	4925      	ldr	r1, [pc, #148]	; (d2ac <bus_fault.constprop.0+0x120>)
    d216:	4820      	ldr	r0, [pc, #128]	; (d298 <bus_fault.constprop.0+0x10c>)
    d218:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d21c:	2303      	movs	r3, #3
    d21e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d222:	f842 3f10 	str.w	r3, [r2, #16]!
    d226:	f010 fbe4 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
    d22a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    d22c:	b11e      	cbz	r6, d236 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d22e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d230:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    d234:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d236:	4b19      	ldr	r3, [pc, #100]	; (d29c <bus_fault.constprop.0+0x110>)
    d238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d23a:	0559      	lsls	r1, r3, #21
    d23c:	d50a      	bpl.n	d254 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    d23e:	4b1c      	ldr	r3, [pc, #112]	; (d2b0 <bus_fault.constprop.0+0x124>)
    d240:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d244:	617b      	str	r3, [r7, #20]
    d246:	2302      	movs	r3, #2
    d248:	4813      	ldr	r0, [pc, #76]	; (d298 <bus_fault.constprop.0+0x10c>)
    d24a:	613b      	str	r3, [r7, #16]
    d24c:	f107 0210 	add.w	r2, r7, #16
    d250:	f010 fbcf 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d254:	4b11      	ldr	r3, [pc, #68]	; (d29c <bus_fault.constprop.0+0x110>)
    d256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d258:	05d2      	lsls	r2, r2, #23
    d25a:	d515      	bpl.n	d288 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    d25c:	4b15      	ldr	r3, [pc, #84]	; (d2b4 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d25e:	617b      	str	r3, [r7, #20]
    d260:	2302      	movs	r3, #2
    d262:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d266:	480c      	ldr	r0, [pc, #48]	; (d298 <bus_fault.constprop.0+0x10c>)
    d268:	613b      	str	r3, [r7, #16]
    d26a:	f107 0210 	add.w	r2, r7, #16
    d26e:	f010 fbc0 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    d272:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d274:	4a09      	ldr	r2, [pc, #36]	; (d29c <bus_fault.constprop.0+0x110>)

	return reason;
}
    d276:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d278:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d27a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d27e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d280:	7028      	strb	r0, [r5, #0]
}
    d282:	46bd      	mov	sp, r7
    d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d28a:	049b      	lsls	r3, r3, #18
    d28c:	d5f1      	bpl.n	d272 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d28e:	4b0a      	ldr	r3, [pc, #40]	; (d2b8 <bus_fault.constprop.0+0x12c>)
    d290:	e7e5      	b.n	d25e <bus_fault.constprop.0+0xd2>
    d292:	bf00      	nop
    d294:	0002237c 	.word	0x0002237c
    d298:	000208c4 	.word	0x000208c4
    d29c:	e000ed00 	.word	0xe000ed00
    d2a0:	00022392 	.word	0x00022392
    d2a4:	00022205 	.word	0x00022205
    d2a8:	000223a3 	.word	0x000223a3
    d2ac:	000223bc 	.word	0x000223bc
    d2b0:	000223d1 	.word	0x000223d1
    d2b4:	000223ec 	.word	0x000223ec
    d2b8:	00022265 	.word	0x00022265

0000d2bc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    d2bc:	b510      	push	{r4, lr}
    d2be:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    d2c0:	2402      	movs	r4, #2
    d2c2:	4b3a      	ldr	r3, [pc, #232]	; (d3ac <usage_fault.constprop.0+0xf0>)
    d2c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d2c8:	4839      	ldr	r0, [pc, #228]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d2ca:	aa04      	add	r2, sp, #16
    d2cc:	9305      	str	r3, [sp, #20]
    d2ce:	9404      	str	r4, [sp, #16]
    d2d0:	f010 fb8f 	bl	1d9f2 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d2d4:	4b37      	ldr	r3, [pc, #220]	; (d3b4 <usage_fault.constprop.0+0xf8>)
    d2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d2d8:	019b      	lsls	r3, r3, #6
    d2da:	d508      	bpl.n	d2ee <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    d2dc:	4b36      	ldr	r3, [pc, #216]	; (d3b8 <usage_fault.constprop.0+0xfc>)
    d2de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d2e2:	4833      	ldr	r0, [pc, #204]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d2e4:	aa04      	add	r2, sp, #16
    d2e6:	e9cd 4304 	strd	r4, r3, [sp, #16]
    d2ea:	f010 fb82 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d2ee:	4b31      	ldr	r3, [pc, #196]	; (d3b4 <usage_fault.constprop.0+0xf8>)
    d2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d2f2:	01dc      	lsls	r4, r3, #7
    d2f4:	d509      	bpl.n	d30a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    d2f6:	4b31      	ldr	r3, [pc, #196]	; (d3bc <usage_fault.constprop.0+0x100>)
    d2f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d2fc:	9305      	str	r3, [sp, #20]
    d2fe:	2302      	movs	r3, #2
    d300:	482b      	ldr	r0, [pc, #172]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d302:	aa04      	add	r2, sp, #16
    d304:	9304      	str	r3, [sp, #16]
    d306:	f010 fb74 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d30a:	4b2a      	ldr	r3, [pc, #168]	; (d3b4 <usage_fault.constprop.0+0xf8>)
    d30c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d30e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    d312:	d009      	beq.n	d328 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    d314:	2402      	movs	r4, #2
    d316:	4b2a      	ldr	r3, [pc, #168]	; (d3c0 <usage_fault.constprop.0+0x104>)
    d318:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d31c:	4824      	ldr	r0, [pc, #144]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d31e:	aa04      	add	r2, sp, #16
    d320:	9305      	str	r3, [sp, #20]
    d322:	9404      	str	r4, [sp, #16]
    d324:	f010 fb65 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d328:	4b22      	ldr	r3, [pc, #136]	; (d3b4 <usage_fault.constprop.0+0xf8>)
    d32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d32c:	0318      	lsls	r0, r3, #12
    d32e:	d509      	bpl.n	d344 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    d330:	4b24      	ldr	r3, [pc, #144]	; (d3c4 <usage_fault.constprop.0+0x108>)
    d332:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d336:	9305      	str	r3, [sp, #20]
    d338:	2302      	movs	r3, #2
    d33a:	481d      	ldr	r0, [pc, #116]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d33c:	aa04      	add	r2, sp, #16
    d33e:	9304      	str	r3, [sp, #16]
    d340:	f010 fb57 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d344:	4b1b      	ldr	r3, [pc, #108]	; (d3b4 <usage_fault.constprop.0+0xf8>)
    d346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d348:	0359      	lsls	r1, r3, #13
    d34a:	d509      	bpl.n	d360 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d34c:	4b1e      	ldr	r3, [pc, #120]	; (d3c8 <usage_fault.constprop.0+0x10c>)
    d34e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d352:	9305      	str	r3, [sp, #20]
    d354:	2302      	movs	r3, #2
    d356:	4816      	ldr	r0, [pc, #88]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d358:	aa04      	add	r2, sp, #16
    d35a:	9304      	str	r3, [sp, #16]
    d35c:	f010 fb49 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d360:	4b14      	ldr	r3, [pc, #80]	; (d3b4 <usage_fault.constprop.0+0xf8>)
    d362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d364:	039a      	lsls	r2, r3, #14
    d366:	d509      	bpl.n	d37c <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d368:	4b18      	ldr	r3, [pc, #96]	; (d3cc <usage_fault.constprop.0+0x110>)
    d36a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d36e:	9305      	str	r3, [sp, #20]
    d370:	2302      	movs	r3, #2
    d372:	480f      	ldr	r0, [pc, #60]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d374:	aa04      	add	r2, sp, #16
    d376:	9304      	str	r3, [sp, #16]
    d378:	f010 fb3b 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d37c:	4b0d      	ldr	r3, [pc, #52]	; (d3b4 <usage_fault.constprop.0+0xf8>)
    d37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d380:	03db      	lsls	r3, r3, #15
    d382:	d509      	bpl.n	d398 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d384:	4b12      	ldr	r3, [pc, #72]	; (d3d0 <usage_fault.constprop.0+0x114>)
    d386:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d38a:	9305      	str	r3, [sp, #20]
    d38c:	2302      	movs	r3, #2
    d38e:	4808      	ldr	r0, [pc, #32]	; (d3b0 <usage_fault.constprop.0+0xf4>)
    d390:	aa04      	add	r2, sp, #16
    d392:	9304      	str	r3, [sp, #16]
    d394:	f010 fb2d 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d398:	4a06      	ldr	r2, [pc, #24]	; (d3b4 <usage_fault.constprop.0+0xf8>)

	return reason;
}
    d39a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d39c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d39e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d3a2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d3a6:	6293      	str	r3, [r2, #40]	; 0x28
}
    d3a8:	b006      	add	sp, #24
    d3aa:	bd10      	pop	{r4, pc}
    d3ac:	00022404 	.word	0x00022404
    d3b0:	000208c4 	.word	0x000208c4
    d3b4:	e000ed00 	.word	0xe000ed00
    d3b8:	0002241c 	.word	0x0002241c
    d3bc:	0002242f 	.word	0x0002242f
    d3c0:	00022449 	.word	0x00022449
    d3c4:	00022473 	.word	0x00022473
    d3c8:	00022491 	.word	0x00022491
    d3cc:	000224b6 	.word	0x000224b6
    d3d0:	000224d0 	.word	0x000224d0

0000d3d4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3d8:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d3da:	4b90      	ldr	r3, [pc, #576]	; (d61c <z_arm_fault+0x248>)
{
    d3dc:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d3de:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
    d3e2:	4688      	mov	r8, r1
    d3e4:	4616      	mov	r6, r2
    d3e6:	2300      	movs	r3, #0
    d3e8:	af00      	add	r7, sp, #0
    d3ea:	f3ca 0908 	ubfx	r9, sl, #0, #9
    d3ee:	f383 8811 	msr	BASEPRI, r3
    d3f2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d3f6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d3fa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d3fe:	d00e      	beq.n	d41e <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    d400:	4987      	ldr	r1, [pc, #540]	; (d620 <z_arm_fault+0x24c>)
    d402:	f44f 6384 	mov.w	r3, #1056	; 0x420
    d406:	4a87      	ldr	r2, [pc, #540]	; (d624 <z_arm_fault+0x250>)
    d408:	4887      	ldr	r0, [pc, #540]	; (d628 <z_arm_fault+0x254>)
    d40a:	f00f fb6e 	bl	1caea <assert_print>
    d40e:	4887      	ldr	r0, [pc, #540]	; (d62c <z_arm_fault+0x258>)
    d410:	f00f fb6b 	bl	1caea <assert_print>
    d414:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
    d418:	4882      	ldr	r0, [pc, #520]	; (d624 <z_arm_fault+0x250>)
    d41a:	f00f fb5f 	bl	1cadc <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d41e:	f012 0401 	ands.w	r4, r2, #1
    d422:	d1ed      	bne.n	d400 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d424:	0653      	lsls	r3, r2, #25
    d426:	d404      	bmi.n	d432 <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d428:	0710      	lsls	r0, r2, #28
    d42a:	d40f      	bmi.n	d44c <z_arm_fault+0x78>
			*nested_exc = true;
    d42c:	f04f 0801 	mov.w	r8, #1
    d430:	e00f      	b.n	d452 <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
    d432:	4b7f      	ldr	r3, [pc, #508]	; (d630 <z_arm_fault+0x25c>)
    d434:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d438:	61fb      	str	r3, [r7, #28]
    d43a:	2302      	movs	r3, #2
    d43c:	487d      	ldr	r0, [pc, #500]	; (d634 <z_arm_fault+0x260>)
    d43e:	61bb      	str	r3, [r7, #24]
    d440:	f107 0218 	add.w	r2, r7, #24
    d444:	f010 fad5 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d448:	0771      	lsls	r1, r6, #29
    d44a:	d500      	bpl.n	d44e <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
    d44c:	4645      	mov	r5, r8
	*nested_exc = false;
    d44e:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
    d452:	2d00      	cmp	r5, #0
    d454:	d0d4      	beq.n	d400 <z_arm_fault+0x2c>
	*recoverable = false;
    d456:	2300      	movs	r3, #0
    d458:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    d45a:	f1a9 0303 	sub.w	r3, r9, #3
    d45e:	2b09      	cmp	r3, #9
    d460:	f200 80ba 	bhi.w	d5d8 <z_arm_fault+0x204>
    d464:	e8df f003 	tbb	[pc, r3]
    d468:	90b0ad05 	.word	0x90b0ad05
    d46c:	b8b8b8b8 	.word	0xb8b8b8b8
    d470:	b3b8      	.short	0xb3b8
	PR_FAULT_INFO("***** HARD FAULT *****");
    d472:	46e9      	mov	r9, sp
    d474:	f04f 0a02 	mov.w	sl, #2
    d478:	4b6f      	ldr	r3, [pc, #444]	; (d638 <z_arm_fault+0x264>)
    d47a:	f107 0218 	add.w	r2, r7, #24
    d47e:	61fb      	str	r3, [r7, #28]
    d480:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d484:	486b      	ldr	r0, [pc, #428]	; (d634 <z_arm_fault+0x260>)
    d486:	f8c7 a018 	str.w	sl, [r7, #24]
    d48a:	f010 fab2 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    d48e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d490:	4e62      	ldr	r6, [pc, #392]	; (d61c <z_arm_fault+0x248>)
	*recoverable = false;
    d492:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d494:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d496:	079a      	lsls	r2, r3, #30
    d498:	d50a      	bpl.n	d4b0 <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
    d49a:	4b68      	ldr	r3, [pc, #416]	; (d63c <z_arm_fault+0x268>)
		PR_EXC("  Debug event");
    d49c:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    d4a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d4a4:	4863      	ldr	r0, [pc, #396]	; (d634 <z_arm_fault+0x260>)
    d4a6:	f107 0218 	add.w	r2, r7, #24
    d4aa:	f010 faa2 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
}
    d4ae:	e041      	b.n	d534 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    d4b0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d4b2:	2b00      	cmp	r3, #0
    d4b4:	da01      	bge.n	d4ba <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
    d4b6:	4b62      	ldr	r3, [pc, #392]	; (d640 <z_arm_fault+0x26c>)
    d4b8:	e7f0      	b.n	d49c <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d4ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d4bc:	005b      	lsls	r3, r3, #1
    d4be:	d573      	bpl.n	d5a8 <z_arm_fault+0x1d4>
		PR_EXC("  Fault escalation (see below)");
    d4c0:	4b60      	ldr	r3, [pc, #384]	; (d644 <z_arm_fault+0x270>)
    d4c2:	f107 0218 	add.w	r2, r7, #24
    d4c6:	e9c7 a306 	strd	sl, r3, [r7, #24]
    d4ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d4ce:	4859      	ldr	r0, [pc, #356]	; (d634 <z_arm_fault+0x260>)
    d4d0:	f010 fa8f 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d4d4:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    d4d6:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d4d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d4dc:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d4de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d4e2:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d4e6:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    d4e8:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d4f0:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d4f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d4f6:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    d4fa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    d4fe:	429a      	cmp	r2, r3
    d500:	d008      	beq.n	d514 <z_arm_fault+0x140>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    d502:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d504:	b2db      	uxtb	r3, r3
    d506:	b393      	cbz	r3, d56e <z_arm_fault+0x19a>
			reason = mem_manage_fault(esf, 1, recoverable);
    d508:	2001      	movs	r0, #1
    d50a:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d50c:	f7ff fd86 	bl	d01c <mem_manage_fault.constprop.0>
    d510:	4604      	mov	r4, r0
		break;
    d512:	e00f      	b.n	d534 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    d514:	b088      	sub	sp, #32
    d516:	682b      	ldr	r3, [r5, #0]
    d518:	466a      	mov	r2, sp
    d51a:	494b      	ldr	r1, [pc, #300]	; (d648 <z_arm_fault+0x274>)
    d51c:	4845      	ldr	r0, [pc, #276]	; (d634 <z_arm_fault+0x260>)
    d51e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d522:	2303      	movs	r3, #3
    d524:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d528:	f842 3f10 	str.w	r3, [r2, #16]!
    d52c:	f010 fa61 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
    d530:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    d532:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d534:	79fb      	ldrb	r3, [r7, #7]
    d536:	b9b3      	cbnz	r3, d566 <z_arm_fault+0x192>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d538:	2220      	movs	r2, #32
    d53a:	4629      	mov	r1, r5
    d53c:	f107 0008 	add.w	r0, r7, #8
    d540:	f010 fae2 	bl	1db08 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d546:	f1b8 0f00 	cmp.w	r8, #0
    d54a:	d061      	beq.n	d610 <z_arm_fault+0x23c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d54c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d550:	b922      	cbnz	r2, d55c <z_arm_fault+0x188>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d552:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d556:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d55a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d55c:	4620      	mov	r0, r4
    d55e:	f107 0108 	add.w	r1, r7, #8
    d562:	f7ff fbb7 	bl	ccd4 <z_arm_fatal_error>
}
    d566:	3728      	adds	r7, #40	; 0x28
    d568:	46bd      	mov	sp, r7
    d56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    d56e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d570:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    d574:	d004      	beq.n	d580 <z_arm_fault+0x1ac>
			reason = bus_fault(esf, 1, recoverable);
    d576:	2001      	movs	r0, #1
    d578:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    d57a:	f7ff fe07 	bl	d18c <bus_fault.constprop.0>
    d57e:	e7c7      	b.n	d510 <z_arm_fault+0x13c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    d580:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d586:	d302      	bcc.n	d58e <z_arm_fault+0x1ba>
		reason = usage_fault(esf);
    d588:	f7ff fe98 	bl	d2bc <usage_fault.constprop.0>
    d58c:	e7c0      	b.n	d510 <z_arm_fault+0x13c>
			__ASSERT(0,
    d58e:	492f      	ldr	r1, [pc, #188]	; (d64c <z_arm_fault+0x278>)
    d590:	f240 23f2 	movw	r3, #754	; 0x2f2
    d594:	4a23      	ldr	r2, [pc, #140]	; (d624 <z_arm_fault+0x250>)
    d596:	4824      	ldr	r0, [pc, #144]	; (d628 <z_arm_fault+0x254>)
    d598:	f00f faa7 	bl	1caea <assert_print>
    d59c:	482c      	ldr	r0, [pc, #176]	; (d650 <z_arm_fault+0x27c>)
    d59e:	f00f faa4 	bl	1caea <assert_print>
    d5a2:	f240 21f2 	movw	r1, #754	; 0x2f2
    d5a6:	e737      	b.n	d418 <z_arm_fault+0x44>
		__ASSERT(0,
    d5a8:	4928      	ldr	r1, [pc, #160]	; (d64c <z_arm_fault+0x278>)
    d5aa:	f240 23f6 	movw	r3, #758	; 0x2f6
    d5ae:	4a1d      	ldr	r2, [pc, #116]	; (d624 <z_arm_fault+0x250>)
    d5b0:	481d      	ldr	r0, [pc, #116]	; (d628 <z_arm_fault+0x254>)
    d5b2:	f00f fa9a 	bl	1caea <assert_print>
    d5b6:	4827      	ldr	r0, [pc, #156]	; (d654 <z_arm_fault+0x280>)
    d5b8:	f00f fa97 	bl	1caea <assert_print>
    d5bc:	f240 21f6 	movw	r1, #758	; 0x2f6
    d5c0:	e72a      	b.n	d418 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    d5c2:	2000      	movs	r0, #0
    d5c4:	1df9      	adds	r1, r7, #7
    d5c6:	e7a1      	b.n	d50c <z_arm_fault+0x138>
		reason = bus_fault(esf, 0, recoverable);
    d5c8:	2000      	movs	r0, #0
    d5ca:	1df9      	adds	r1, r7, #7
    d5cc:	e7d5      	b.n	d57a <z_arm_fault+0x1a6>
	PR_FAULT_INFO(
    d5ce:	4b22      	ldr	r3, [pc, #136]	; (d658 <z_arm_fault+0x284>)
    d5d0:	61fb      	str	r3, [r7, #28]
    d5d2:	2302      	movs	r3, #2
    d5d4:	61bb      	str	r3, [r7, #24]
    d5d6:	e763      	b.n	d4a0 <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
    d5d8:	4a20      	ldr	r2, [pc, #128]	; (d65c <z_arm_fault+0x288>)
    d5da:	466e      	mov	r6, sp
    d5dc:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
    d5e0:	b08a      	sub	sp, #40	; 0x28
    d5e2:	4b1f      	ldr	r3, [pc, #124]	; (d660 <z_arm_fault+0x28c>)
    d5e4:	bf18      	it	ne
    d5e6:	4613      	movne	r3, r2
    d5e8:	466a      	mov	r2, sp
    d5ea:	491e      	ldr	r1, [pc, #120]	; (d664 <z_arm_fault+0x290>)
    d5ec:	4811      	ldr	r0, [pc, #68]	; (d634 <z_arm_fault+0x260>)
    d5ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d5f2:	f1a9 0310 	sub.w	r3, r9, #16
    d5f6:	61d3      	str	r3, [r2, #28]
    d5f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    d5fc:	8413      	strh	r3, [r2, #32]
    d5fe:	4b1a      	ldr	r3, [pc, #104]	; (d668 <z_arm_fault+0x294>)
    d600:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    d604:	f842 3f10 	str.w	r3, [r2, #16]!
    d608:	f010 f9f3 	bl	1d9f2 <z_log_msg_static_create.constprop.0>
    d60c:	46b5      	mov	sp, r6
}
    d60e:	e791      	b.n	d534 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d610:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d614:	f023 0301 	bic.w	r3, r3, #1
    d618:	e79f      	b.n	d55a <z_arm_fault+0x186>
    d61a:	bf00      	nop
    d61c:	e000ed00 	.word	0xe000ed00
    d620:	00022529 	.word	0x00022529
    d624:	00022294 	.word	0x00022294
    d628:	00021547 	.word	0x00021547
    d62c:	0002253c 	.word	0x0002253c
    d630:	0002257a 	.word	0x0002257a
    d634:	000208c4 	.word	0x000208c4
    d638:	0002259d 	.word	0x0002259d
    d63c:	000225b4 	.word	0x000225b4
    d640:	000225d5 	.word	0x000225d5
    d644:	000225e3 	.word	0x000225e3
    d648:	00022602 	.word	0x00022602
    d64c:	00024673 	.word	0x00024673
    d650:	0002261e 	.word	0x0002261e
    d654:	00022642 	.word	0x00022642
    d658:	00022672 	.word	0x00022672
    d65c:	00022510 	.word	0x00022510
    d660:	000224fb 	.word	0x000224fb
    d664:	00022696 	.word	0x00022696
    d668:	01000004 	.word	0x01000004

0000d66c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d66c:	4b04      	ldr	r3, [pc, #16]	; (d680 <z_arm_fault_init+0x14>)
    d66e:	695a      	ldr	r2, [r3, #20]
    d670:	f042 0210 	orr.w	r2, r2, #16
    d674:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d676:	695a      	ldr	r2, [r3, #20]
    d678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d67c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    d67e:	4770      	bx	lr
    d680:	e000ed00 	.word	0xe000ed00

0000d684 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d684:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d688:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d68c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d68e:	4672      	mov	r2, lr
	bl z_arm_fault
    d690:	f7ff fea0 	bl	d3d4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d694:	bd01      	pop	{r0, pc}
    d696:	bf00      	nop

0000d698 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d698:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d69a:	2120      	movs	r1, #32
    d69c:	4803      	ldr	r0, [pc, #12]	; (d6ac <z_arm_interrupt_init+0x14>)
    d69e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d6a0:	3301      	adds	r3, #1
    d6a2:	2b45      	cmp	r3, #69	; 0x45
    d6a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d6a8:	d1f9      	bne.n	d69e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d6aa:	4770      	bx	lr
    d6ac:	e000e100 	.word	0xe000e100

0000d6b0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    d6b0:	2000      	movs	r0, #0
    msr CONTROL, r0
    d6b2:	f380 8814 	msr	CONTROL, r0
    isb
    d6b6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    d6ba:	2000      	movs	r0, #0
    msr MSPLIM, r0
    d6bc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    d6c0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    d6c4:	f7fd fd8a 	bl	b1dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    d6c8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    d6ca:	490e      	ldr	r1, [pc, #56]	; (d704 <__start+0x54>)
    str r0, [r1]
    d6cc:	6008      	str	r0, [r1, #0]
    dsb
    d6ce:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d6d2:	480d      	ldr	r0, [pc, #52]	; (d708 <__start+0x58>)
    msr msp, r0
    d6d4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    d6d8:	f000 f83e 	bl	d758 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d6dc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d6de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d6e2:	480a      	ldr	r0, [pc, #40]	; (d70c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d6e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d6e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d6ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d6ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d6f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d6f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d6f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d6fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d6fe:	f7ff fbb5 	bl	ce6c <z_arm_prep_c>
    d702:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    d704:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d708:	2000c920 	.word	0x2000c920
    ldr r0, =z_interrupt_stacks
    d70c:	2000bbe0 	.word	0x2000bbe0

0000d710 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d710:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d714:	4905      	ldr	r1, [pc, #20]	; (d72c <sys_arch_reboot+0x1c>)
    d716:	4b06      	ldr	r3, [pc, #24]	; (d730 <sys_arch_reboot+0x20>)
    d718:	68ca      	ldr	r2, [r1, #12]
    d71a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d71e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d720:	60cb      	str	r3, [r1, #12]
    d722:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d726:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d728:	e7fd      	b.n	d726 <sys_arch_reboot+0x16>
    d72a:	bf00      	nop
    d72c:	e000ed00 	.word	0xe000ed00
    d730:	05fa0004 	.word	0x05fa0004

0000d734 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    d734:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    d736:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    d738:	4906      	ldr	r1, [pc, #24]	; (d754 <z_arm_clear_arm_mpu_config+0x20>)
    d73a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    d73e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    d742:	4293      	cmp	r3, r2
    d744:	db00      	blt.n	d748 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    d746:	4770      	bx	lr
  mpu->RNR = rnr;
    d748:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    d74c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    d750:	3301      	adds	r3, #1
    d752:	e7f6      	b.n	d742 <z_arm_clear_arm_mpu_config+0xe>
    d754:	e000ed00 	.word	0xe000ed00

0000d758 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    d758:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    d75a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    d75c:	2400      	movs	r4, #0
    d75e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    d762:	f7ff ffe7 	bl	d734 <z_arm_clear_arm_mpu_config>
    d766:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    d768:	f04f 30ff 	mov.w	r0, #4294967295
    d76c:	4a0c      	ldr	r2, [pc, #48]	; (d7a0 <z_arm_init_arch_hw_at_boot+0x48>)
    d76e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d772:	3301      	adds	r3, #1
    d774:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    d776:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d77a:	d1f8      	bne.n	d76e <z_arm_init_arch_hw_at_boot+0x16>
    d77c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d77e:	f04f 30ff 	mov.w	r0, #4294967295
    d782:	4a07      	ldr	r2, [pc, #28]	; (d7a0 <z_arm_init_arch_hw_at_boot+0x48>)
    d784:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d788:	3301      	adds	r3, #1
    d78a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d78c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d790:	d1f8      	bne.n	d784 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    d792:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    d794:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d798:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    d79c:	bd10      	pop	{r4, pc}
    d79e:	bf00      	nop
    d7a0:	e000e100 	.word	0xe000e100

0000d7a4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    d7a4:	4b08      	ldr	r3, [pc, #32]	; (d7c8 <z_impl_k_thread_abort+0x24>)
    d7a6:	689b      	ldr	r3, [r3, #8]
    d7a8:	4283      	cmp	r3, r0
    d7aa:	d10b      	bne.n	d7c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d7ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d7b0:	b143      	cbz	r3, d7c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d7b2:	4b06      	ldr	r3, [pc, #24]	; (d7cc <z_impl_k_thread_abort+0x28>)
    d7b4:	685a      	ldr	r2, [r3, #4]
    d7b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    d7ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    d7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d7be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d7c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    d7c4:	f00d bdee 	b.w	1b3a4 <z_thread_abort>
    d7c8:	20009bfc 	.word	0x20009bfc
    d7cc:	e000ed00 	.word	0xe000ed00

0000d7d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d7d2:	4c09      	ldr	r4, [pc, #36]	; (d7f8 <z_arm_configure_static_mpu_regions+0x28>)
    d7d4:	4a09      	ldr	r2, [pc, #36]	; (d7fc <z_arm_configure_static_mpu_regions+0x2c>)
    d7d6:	4623      	mov	r3, r4
    d7d8:	2101      	movs	r1, #1
    d7da:	4809      	ldr	r0, [pc, #36]	; (d800 <z_arm_configure_static_mpu_regions+0x30>)
    d7dc:	f000 f92a 	bl	da34 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d7e0:	2300      	movs	r3, #0
    d7e2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d7e4:	4b07      	ldr	r3, [pc, #28]	; (d804 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d7e6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d7e8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d7ea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d7ec:	9301      	str	r3, [sp, #4]
    d7ee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d7f0:	f000 f944 	bl	da7c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d7f4:	b004      	add	sp, #16
    d7f6:	bd10      	pop	{r4, pc}
    d7f8:	20070000 	.word	0x20070000
    d7fc:	20008000 	.word	0x20008000
    d800:	00020c00 	.word	0x00020c00
    d804:	200087c8 	.word	0x200087c8

0000d808 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d808:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    d80a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d80c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d80e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d812:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    d816:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d818:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d81a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d81c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    d820:	4905      	ldr	r1, [pc, #20]	; (d838 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d822:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d826:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    d82a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    d82e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    d832:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d836:	bd10      	pop	{r4, pc}
    d838:	e000ed00 	.word	0xe000ed00

0000d83c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    d83c:	b580      	push	{r7, lr}
    d83e:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d840:	b088      	sub	sp, #32
    d842:	466a      	mov	r2, sp
    d844:	4b07      	ldr	r3, [pc, #28]	; (d864 <region_allocate_and_init.part.0+0x28>)
    d846:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d84a:	2303      	movs	r3, #3
    d84c:	f842 3f10 	str.w	r3, [r2, #16]!
    d850:	2300      	movs	r3, #0
    d852:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d856:	4804      	ldr	r0, [pc, #16]	; (d868 <region_allocate_and_init.part.0+0x2c>)
    d858:	f7fe f856 	bl	b908 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    d85c:	f06f 0015 	mvn.w	r0, #21
    d860:	46bd      	mov	sp, r7
    d862:	bd80      	pop	{r7, pc}
    d864:	000226ad 	.word	0x000226ad
    d868:	000208ac 	.word	0x000208ac

0000d86c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d870:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d872:	4606      	mov	r6, r0
    d874:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d878:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    d87a:	4d5f      	ldr	r5, [pc, #380]	; (d9f8 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d87c:	af00      	add	r7, sp, #0
    d87e:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    d880:	687b      	ldr	r3, [r7, #4]
    d882:	4599      	cmp	r9, r3
    d884:	da35      	bge.n	d8f2 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    d886:	f8d6 8004 	ldr.w	r8, [r6, #4]
    d88a:	f1b8 0f00 	cmp.w	r8, #0
    d88e:	d054      	beq.n	d93a <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    d890:	f1b8 0f1f 	cmp.w	r8, #31
    d894:	d91b      	bls.n	d8ce <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    d896:	f018 0f1f 	tst.w	r8, #31
    d89a:	d118      	bne.n	d8ce <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    d89c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d8a0:	f01b 0f1f 	tst.w	fp, #31
    d8a4:	d113      	bne.n	d8ce <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d8a6:	4658      	mov	r0, fp
    d8a8:	f010 f8a8 	bl	1d9fc <arm_cmse_mpu_region_get>
    d8ac:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d8ae:	eb08 000b 	add.w	r0, r8, fp
    d8b2:	3801      	subs	r0, #1
    d8b4:	f010 f8a2 	bl	1d9fc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d8b8:	4582      	cmp	sl, r0
    d8ba:	d01f      	beq.n	d8fc <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    d8bc:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d8c0:	466c      	mov	r4, sp
    d8c2:	b088      	sub	sp, #32
    d8c4:	466a      	mov	r2, sp
    d8c6:	494d      	ldr	r1, [pc, #308]	; (d9fc <mpu_configure_regions_and_partition.constprop.0+0x190>)
    d8c8:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    d8cc:	e005      	b.n	d8da <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d8ce:	466c      	mov	r4, sp
    d8d0:	b088      	sub	sp, #32
    d8d2:	466a      	mov	r2, sp
    d8d4:	4b4a      	ldr	r3, [pc, #296]	; (da00 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    d8d6:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    d8da:	2303      	movs	r3, #3
    d8dc:	f842 3f10 	str.w	r3, [r2, #16]!
    d8e0:	2300      	movs	r3, #0
    d8e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d8e6:	4847      	ldr	r0, [pc, #284]	; (da04 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    d8e8:	f7fe f80e 	bl	b908 <z_impl_z_log_msg_static_create>
    d8ec:	46a5      	mov	sp, r4
			return -EINVAL;
    d8ee:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d8f2:	4620      	mov	r0, r4
    d8f4:	371c      	adds	r7, #28
    d8f6:	46bd      	mov	sp, r7
    d8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d8fc:	f11a 0f16 	cmn.w	sl, #22
    d900:	d0de      	beq.n	d8c0 <mpu_configure_regions_and_partition.constprop.0+0x54>
    d902:	4554      	cmp	r4, sl
    d904:	dddc      	ble.n	d8c0 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    d906:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d90a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    d90e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    d912:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    d916:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d91a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d91e:	e9d6 2100 	ldrd	r2, r1, [r6]
    d922:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    d924:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d926:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d92a:	d11e      	bne.n	d96a <mpu_configure_regions_and_partition.constprop.0+0xfe>
    d92c:	45d8      	cmp	r8, fp
    d92e:	d108      	bne.n	d942 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    d930:	4631      	mov	r1, r6
    d932:	fa5f f08a 	uxtb.w	r0, sl
    d936:	f010 f86a 	bl	1da0e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d93a:	f109 0901 	add.w	r9, r9, #1
    d93e:	360c      	adds	r6, #12
    d940:	e79e      	b.n	d880 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    d942:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d946:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    d94a:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    d94e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    d952:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    d954:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    d956:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d95a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d95c:	f010 f857 	bl	1da0e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d960:	f110 0f16 	cmn.w	r0, #22
    d964:	d0c3      	beq.n	d8ee <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    d966:	1c44      	adds	r4, r0, #1
    d968:	e7e7      	b.n	d93a <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    d96a:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    d96c:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    d96e:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d970:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    d974:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d978:	d108      	bne.n	d98c <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    d97a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d97e:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d980:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d984:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    d986:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d98a:	e7e7      	b.n	d95c <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    d98c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d990:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d994:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    d996:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d99a:	4631      	mov	r1, r6
    d99c:	f010 f837 	bl	1da0e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d9a0:	f110 0f16 	cmn.w	r0, #22
    d9a4:	d0a3      	beq.n	d8ee <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    d9a6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d9aa:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    d9ae:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    d9b0:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    d9b4:	f362 0304 	bfi	r3, r2, #0, #5
    d9b8:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    d9ba:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    d9be:	7c3a      	ldrb	r2, [r7, #16]
    d9c0:	085b      	lsrs	r3, r3, #1
    d9c2:	f363 1247 	bfi	r2, r3, #5, #3
    d9c6:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    d9c8:	e9d6 3200 	ldrd	r3, r2, [r6]
    d9cc:	4413      	add	r3, r2
    d9ce:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d9d0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d9d4:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d9d6:	4443      	add	r3, r8
    d9d8:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    d9dc:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    d9de:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d9e2:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    d9e4:	617b      	str	r3, [r7, #20]
    d9e6:	d902      	bls.n	d9ee <mpu_configure_regions_and_partition.constprop.0+0x182>
    d9e8:	f7ff ff28 	bl	d83c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    d9ec:	e7b8      	b.n	d960 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    d9ee:	f107 0108 	add.w	r1, r7, #8
    d9f2:	f7ff ff09 	bl	d808 <region_init>
    d9f6:	e7b6      	b.n	d966 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    d9f8:	e000ed00 	.word	0xe000ed00
    d9fc:	000226f6 	.word	0x000226f6
    da00:	000226d3 	.word	0x000226d3
    da04:	000208ac 	.word	0x000208ac

0000da08 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    da08:	2205      	movs	r2, #5
    da0a:	4b04      	ldr	r3, [pc, #16]	; (da1c <arm_core_mpu_enable+0x14>)
    da0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    da10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    da14:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    da18:	4770      	bx	lr
    da1a:	bf00      	nop
    da1c:	e000ed00 	.word	0xe000ed00

0000da20 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    da20:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    da24:	2200      	movs	r2, #0
    da26:	4b02      	ldr	r3, [pc, #8]	; (da30 <arm_core_mpu_disable+0x10>)
    da28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    da2c:	4770      	bx	lr
    da2e:	bf00      	nop
    da30:	e000ed00 	.word	0xe000ed00

0000da34 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    da34:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    da36:	4d0c      	ldr	r5, [pc, #48]	; (da68 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    da38:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    da3a:	782a      	ldrb	r2, [r5, #0]
    da3c:	f7ff ff16 	bl	d86c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    da40:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    da42:	3016      	adds	r0, #22
    da44:	d10f      	bne.n	da66 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    da46:	f44f 738b 	mov.w	r3, #278	; 0x116
    da4a:	4a08      	ldr	r2, [pc, #32]	; (da6c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    da4c:	4908      	ldr	r1, [pc, #32]	; (da70 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    da4e:	4809      	ldr	r0, [pc, #36]	; (da74 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    da50:	f00f f84b 	bl	1caea <assert_print>
    da54:	4621      	mov	r1, r4
    da56:	4808      	ldr	r0, [pc, #32]	; (da78 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    da58:	f00f f847 	bl	1caea <assert_print>
    da5c:	f44f 718b 	mov.w	r1, #278	; 0x116
    da60:	4802      	ldr	r0, [pc, #8]	; (da6c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    da62:	f00f f83b 	bl	1cadc <assert_post_action>
			regions_num);
	}
}
    da66:	bd38      	pop	{r3, r4, r5, pc}
    da68:	20009c71 	.word	0x20009c71
    da6c:	00022719 	.word	0x00022719
    da70:	00024673 	.word	0x00024673
    da74:	00021547 	.word	0x00021547
    da78:	00022750 	.word	0x00022750

0000da7c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    da7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da80:	4e31      	ldr	r6, [pc, #196]	; (db48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    da82:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    da84:	4605      	mov	r5, r0
    da86:	f04f 0800 	mov.w	r8, #0
    da8a:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
    da8c:	4f2f      	ldr	r7, [pc, #188]	; (db4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    da8e:	45c8      	cmp	r8, r9
    da90:	db02      	blt.n	da98 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    da92:	b003      	add	sp, #12
    da94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    da98:	f8d5 a004 	ldr.w	sl, [r5, #4]
    da9c:	f1ba 0f00 	cmp.w	sl, #0
    daa0:	d04c      	beq.n	db3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    daa2:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    daa4:	4608      	mov	r0, r1
    daa6:	9101      	str	r1, [sp, #4]
    daa8:	f00f ffa8 	bl	1d9fc <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    daac:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    daae:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    dab0:	eb0a 0001 	add.w	r0, sl, r1
    dab4:	3801      	subs	r0, #1
    dab6:	f00f ffa1 	bl	1d9fc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    daba:	4284      	cmp	r4, r0
    dabc:	f04f 0214 	mov.w	r2, #20
    dac0:	4b23      	ldr	r3, [pc, #140]	; (db50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    dac2:	d015      	beq.n	daf0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
    dac4:	fb02 f308 	mul.w	r3, r2, r8
    dac8:	f06f 0215 	mvn.w	r2, #21
    dacc:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    dad0:	f44f 7393 	mov.w	r3, #294	; 0x126
    dad4:	4a1f      	ldr	r2, [pc, #124]	; (db54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    dad6:	4920      	ldr	r1, [pc, #128]	; (db58 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    dad8:	4820      	ldr	r0, [pc, #128]	; (db5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
    dada:	f00f f806 	bl	1caea <assert_print>
    dade:	4649      	mov	r1, r9
    dae0:	481f      	ldr	r0, [pc, #124]	; (db60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
    dae2:	f00f f802 	bl	1caea <assert_print>
    dae6:	f44f 7193 	mov.w	r1, #294	; 0x126
    daea:	481a      	ldr	r0, [pc, #104]	; (db54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    daec:	f00e fff6 	bl	1cadc <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    daf0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    daf4:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    daf6:	d0eb      	beq.n	dad0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    daf8:	7819      	ldrb	r1, [r3, #0]
    dafa:	42a1      	cmp	r1, r4
    dafc:	dde8      	ble.n	dad0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
    dafe:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    db02:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    db06:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    db0a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    db0e:	f100 0108 	add.w	r1, r0, #8
    db12:	7b00      	ldrb	r0, [r0, #12]
    db14:	f364 0004 	bfi	r0, r4, #0, #5
    db18:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    db1a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    db1e:	790c      	ldrb	r4, [r1, #4]
    db20:	0840      	lsrs	r0, r0, #1
    db22:	f360 1447 	bfi	r4, r0, #5, #3
    db26:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    db28:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    db2c:	f021 011f 	bic.w	r1, r1, #31
    db30:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
    db32:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    db36:	f021 011f 	bic.w	r1, r1, #31
    db3a:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    db3c:	f108 0801 	add.w	r8, r8, #1
    db40:	3614      	adds	r6, #20
    db42:	350c      	adds	r5, #12
    db44:	e7a3      	b.n	da8e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    db46:	bf00      	nop
    db48:	20009794 	.word	0x20009794
    db4c:	e000ed00 	.word	0xe000ed00
    db50:	20009c71 	.word	0x20009c71
    db54:	00022719 	.word	0x00022719
    db58:	00024673 	.word	0x00024673
    db5c:	00021547 	.word	0x00021547
    db60:	0002277c 	.word	0x0002277c

0000db64 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    db64:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    db66:	4d1f      	ldr	r5, [pc, #124]	; (dbe4 <z_arm_mpu_init+0x80>)
    db68:	682c      	ldr	r4, [r5, #0]
    db6a:	2c08      	cmp	r4, #8
    db6c:	d910      	bls.n	db90 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    db6e:	f240 134d 	movw	r3, #333	; 0x14d
    db72:	4a1d      	ldr	r2, [pc, #116]	; (dbe8 <z_arm_mpu_init+0x84>)
    db74:	491d      	ldr	r1, [pc, #116]	; (dbec <z_arm_mpu_init+0x88>)
    db76:	481e      	ldr	r0, [pc, #120]	; (dbf0 <z_arm_mpu_init+0x8c>)
    db78:	f00e ffb7 	bl	1caea <assert_print>
    db7c:	4621      	mov	r1, r4
    db7e:	2208      	movs	r2, #8
    db80:	481c      	ldr	r0, [pc, #112]	; (dbf4 <z_arm_mpu_init+0x90>)
    db82:	f00e ffb2 	bl	1caea <assert_print>
    db86:	f240 114d 	movw	r1, #333	; 0x14d
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    db8a:	4817      	ldr	r0, [pc, #92]	; (dbe8 <z_arm_mpu_init+0x84>)
    db8c:	f00e ffa6 	bl	1cadc <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    db90:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    db92:	f7ff ff45 	bl	da20 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    db96:	4b18      	ldr	r3, [pc, #96]	; (dbf8 <z_arm_mpu_init+0x94>)
    db98:	4a18      	ldr	r2, [pc, #96]	; (dbfc <z_arm_mpu_init+0x98>)
    db9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    db9e:	4284      	cmp	r4, r0
    dba0:	d117      	bne.n	dbd2 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
    dba2:	4b17      	ldr	r3, [pc, #92]	; (dc00 <z_arm_mpu_init+0x9c>)
    dba4:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    dba6:	f7ff ff2f 	bl	da08 <arm_core_mpu_enable>
	__ASSERT(
    dbaa:	4b13      	ldr	r3, [pc, #76]	; (dbf8 <z_arm_mpu_init+0x94>)
    dbac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    dbb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dbb4:	2b08      	cmp	r3, #8
    dbb6:	d013      	beq.n	dbe0 <z_arm_mpu_init+0x7c>
    dbb8:	4912      	ldr	r1, [pc, #72]	; (dc04 <z_arm_mpu_init+0xa0>)
    dbba:	f240 13b1 	movw	r3, #433	; 0x1b1
    dbbe:	4a0a      	ldr	r2, [pc, #40]	; (dbe8 <z_arm_mpu_init+0x84>)
    dbc0:	480b      	ldr	r0, [pc, #44]	; (dbf0 <z_arm_mpu_init+0x8c>)
    dbc2:	f00e ff92 	bl	1caea <assert_print>
    dbc6:	4810      	ldr	r0, [pc, #64]	; (dc08 <z_arm_mpu_init+0xa4>)
    dbc8:	f00e ff8f 	bl	1caea <assert_print>
    dbcc:	f240 11b1 	movw	r1, #433	; 0x1b1
    dbd0:	e7db      	b.n	db8a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    dbd2:	6869      	ldr	r1, [r5, #4]
    dbd4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    dbd8:	f7ff fe16 	bl	d808 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    dbdc:	3001      	adds	r0, #1
    dbde:	e7de      	b.n	db9e <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    dbe0:	2000      	movs	r0, #0
    dbe2:	bd38      	pop	{r3, r4, r5, pc}
    dbe4:	00020c0c 	.word	0x00020c0c
    dbe8:	00022719 	.word	0x00022719
    dbec:	00024673 	.word	0x00024673
    dbf0:	00021547 	.word	0x00021547
    dbf4:	000227ab 	.word	0x000227ab
    dbf8:	e000ed00 	.word	0xe000ed00
    dbfc:	0044ffaa 	.word	0x0044ffaa
    dc00:	20009c71 	.word	0x20009c71
    dc04:	000227df 	.word	0x000227df
    dc08:	0002282f 	.word	0x0002282f

0000dc0c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    dc0c:	4b01      	ldr	r3, [pc, #4]	; (dc14 <__stdout_hook_install+0x8>)
    dc0e:	6018      	str	r0, [r3, #0]
}
    dc10:	4770      	bx	lr
    dc12:	bf00      	nop
    dc14:	200081c4 	.word	0x200081c4

0000dc18 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    dc18:	2000      	movs	r0, #0
    dc1a:	4b02      	ldr	r3, [pc, #8]	; (dc24 <remoteproc_mgr_boot+0xc>)
    dc1c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    dc20:	4770      	bx	lr
    dc22:	bf00      	nop
    dc24:	40005000 	.word	0x40005000

0000dc28 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    dc28:	4b0e      	ldr	r3, [pc, #56]	; (dc64 <bt_hex+0x3c>)
    dc2a:	2940      	cmp	r1, #64	; 0x40
    dc2c:	bf28      	it	cs
    dc2e:	2140      	movcs	r1, #64	; 0x40
{
    dc30:	b570      	push	{r4, r5, r6, lr}
    dc32:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    dc34:	4c0c      	ldr	r4, [pc, #48]	; (dc68 <bt_hex+0x40>)
    dc36:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    dc38:	42b0      	cmp	r0, r6
    dc3a:	f103 0302 	add.w	r3, r3, #2
    dc3e:	d104      	bne.n	dc4a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    dc40:	2300      	movs	r3, #0
    dc42:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    dc46:	4807      	ldr	r0, [pc, #28]	; (dc64 <bt_hex+0x3c>)
    dc48:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    dc4a:	7802      	ldrb	r2, [r0, #0]
    dc4c:	0912      	lsrs	r2, r2, #4
    dc4e:	5ca2      	ldrb	r2, [r4, r2]
    dc50:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    dc54:	f810 2b01 	ldrb.w	r2, [r0], #1
    dc58:	f002 020f 	and.w	r2, r2, #15
    dc5c:	5ca2      	ldrb	r2, [r4, r2]
    dc5e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    dc62:	e7e9      	b.n	dc38 <bt_hex+0x10>
    dc64:	20009c90 	.word	0x20009c90
    dc68:	000228be 	.word	0x000228be

0000dc6c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    dc6c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    dc6e:	7803      	ldrb	r3, [r0, #0]
    dc70:	b08b      	sub	sp, #44	; 0x2c
    dc72:	4604      	mov	r4, r0
    dc74:	ad07      	add	r5, sp, #28
    dc76:	2b03      	cmp	r3, #3
    dc78:	d821      	bhi.n	dcbe <bt_addr_le_str+0x52>
    dc7a:	e8df f003 	tbb	[pc, r3]
    dc7e:	1a02      	.short	0x1a02
    dc80:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    dc82:	4912      	ldr	r1, [pc, #72]	; (dccc <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    dc84:	4628      	mov	r0, r5
    dc86:	f00f fee2 	bl	1da4e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    dc8a:	9505      	str	r5, [sp, #20]
    dc8c:	7863      	ldrb	r3, [r4, #1]
    dc8e:	211e      	movs	r1, #30
    dc90:	9304      	str	r3, [sp, #16]
    dc92:	78a3      	ldrb	r3, [r4, #2]
    dc94:	4a0e      	ldr	r2, [pc, #56]	; (dcd0 <bt_addr_le_str+0x64>)
    dc96:	9303      	str	r3, [sp, #12]
    dc98:	78e3      	ldrb	r3, [r4, #3]
    dc9a:	480e      	ldr	r0, [pc, #56]	; (dcd4 <bt_addr_le_str+0x68>)
    dc9c:	9302      	str	r3, [sp, #8]
    dc9e:	7923      	ldrb	r3, [r4, #4]
    dca0:	9301      	str	r3, [sp, #4]
    dca2:	7963      	ldrb	r3, [r4, #5]
    dca4:	9300      	str	r3, [sp, #0]
    dca6:	79a3      	ldrb	r3, [r4, #6]
    dca8:	f00e fd24 	bl	1c6f4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    dcac:	4809      	ldr	r0, [pc, #36]	; (dcd4 <bt_addr_le_str+0x68>)
    dcae:	b00b      	add	sp, #44	; 0x2c
    dcb0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    dcb2:	4909      	ldr	r1, [pc, #36]	; (dcd8 <bt_addr_le_str+0x6c>)
    dcb4:	e7e6      	b.n	dc84 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    dcb6:	4909      	ldr	r1, [pc, #36]	; (dcdc <bt_addr_le_str+0x70>)
    dcb8:	e7e4      	b.n	dc84 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    dcba:	4909      	ldr	r1, [pc, #36]	; (dce0 <bt_addr_le_str+0x74>)
    dcbc:	e7e2      	b.n	dc84 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dcbe:	210a      	movs	r1, #10
    dcc0:	4628      	mov	r0, r5
    dcc2:	4a08      	ldr	r2, [pc, #32]	; (dce4 <bt_addr_le_str+0x78>)
    dcc4:	f00e fd16 	bl	1c6f4 <snprintk>
		break;
    dcc8:	e7df      	b.n	dc8a <bt_addr_le_str+0x1e>
    dcca:	bf00      	nop
    dccc:	00022879 	.word	0x00022879
    dcd0:	0002289b 	.word	0x0002289b
    dcd4:	20009c72 	.word	0x20009c72
    dcd8:	00022880 	.word	0x00022880
    dcdc:	00022887 	.word	0x00022887
    dce0:	00022891 	.word	0x00022891
    dce4:	00023844 	.word	0x00023844

0000dce8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    dce8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dcea:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    dcec:	4d09      	ldr	r5, [pc, #36]	; (dd14 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dcee:	4b0a      	ldr	r3, [pc, #40]	; (dd18 <long_wq_init+0x30>)
{
    dcf0:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    dcf2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dcf4:	9302      	str	r3, [sp, #8]
    dcf6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    dcf8:	f00b ff9a 	bl	19c30 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    dcfc:	ab02      	add	r3, sp, #8
    dcfe:	4628      	mov	r0, r5
    dd00:	9300      	str	r3, [sp, #0]
    dd02:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    dd06:	230a      	movs	r3, #10
    dd08:	4904      	ldr	r1, [pc, #16]	; (dd1c <long_wq_init+0x34>)
    dd0a:	f00b ffab 	bl	19c64 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    dd0e:	4620      	mov	r0, r4
    dd10:	b005      	add	sp, #20
    dd12:	bd30      	pop	{r4, r5, pc}
    dd14:	20009078 	.word	0x20009078
    dd18:	000228cf 	.word	0x000228cf
    dd1c:	2000ad20 	.word	0x2000ad20

0000dd20 <bt_long_wq_schedule>:
{
    dd20:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    dd22:	4801      	ldr	r0, [pc, #4]	; (dd28 <bt_long_wq_schedule+0x8>)
    dd24:	f00c b8c0 	b.w	19ea8 <k_work_schedule_for_queue>
    dd28:	20009078 	.word	0x20009078

0000dd2c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    dd2c:	4603      	mov	r3, r0
    dd2e:	b430      	push	{r4, r5}
	switch (src->type) {
    dd30:	781a      	ldrb	r2, [r3, #0]
{
    dd32:	4608      	mov	r0, r1
	switch (src->type) {
    dd34:	2a01      	cmp	r2, #1
    dd36:	d013      	beq.n	dd60 <uuid_to_uuid128+0x34>
    dd38:	2a02      	cmp	r2, #2
    dd3a:	d026      	beq.n	dd8a <uuid_to_uuid128+0x5e>
    dd3c:	b972      	cbnz	r2, dd5c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    dd3e:	4a15      	ldr	r2, [pc, #84]	; (dd94 <uuid_to_uuid128+0x68>)
    dd40:	f102 0410 	add.w	r4, r2, #16
    dd44:	f852 5b04 	ldr.w	r5, [r2], #4
    dd48:	42a2      	cmp	r2, r4
    dd4a:	f841 5b04 	str.w	r5, [r1], #4
    dd4e:	d1f9      	bne.n	dd44 <uuid_to_uuid128+0x18>
    dd50:	7812      	ldrb	r2, [r2, #0]
    dd52:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    dd54:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    dd56:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    dd58:	0a1b      	lsrs	r3, r3, #8
    dd5a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    dd5c:	bc30      	pop	{r4, r5}
    dd5e:	4770      	bx	lr
		*dst = uuid128_base;
    dd60:	4a0c      	ldr	r2, [pc, #48]	; (dd94 <uuid_to_uuid128+0x68>)
    dd62:	f102 0410 	add.w	r4, r2, #16
    dd66:	f852 5b04 	ldr.w	r5, [r2], #4
    dd6a:	42a2      	cmp	r2, r4
    dd6c:	f841 5b04 	str.w	r5, [r1], #4
    dd70:	d1f9      	bne.n	dd66 <uuid_to_uuid128+0x3a>
    dd72:	7812      	ldrb	r2, [r2, #0]
    dd74:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    dd76:	685b      	ldr	r3, [r3, #4]
    dd78:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    dd7c:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    dd7e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dd80:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    dd82:	0a1b      	lsrs	r3, r3, #8
    dd84:	7382      	strb	r2, [r0, #14]
    dd86:	7403      	strb	r3, [r0, #16]
}
    dd88:	e7e8      	b.n	dd5c <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    dd8a:	2211      	movs	r2, #17
}
    dd8c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    dd8e:	4619      	mov	r1, r3
    dd90:	f00f beba 	b.w	1db08 <memcpy>
    dd94:	000228d8 	.word	0x000228d8

0000dd98 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    dd98:	b538      	push	{r3, r4, r5, lr}
    dd9a:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dd9c:	2d01      	cmp	r5, #1
{
    dd9e:	4610      	mov	r0, r2
    dda0:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dda2:	d010      	beq.n	ddc6 <bt_buf_get_rx+0x2e>
    dda4:	2d03      	cmp	r5, #3
    dda6:	d01a      	beq.n	ddde <bt_buf_get_rx+0x46>
    dda8:	2d05      	cmp	r5, #5
    ddaa:	d018      	beq.n	ddde <bt_buf_get_rx+0x46>
    ddac:	490e      	ldr	r1, [pc, #56]	; (dde8 <bt_buf_get_rx+0x50>)
    ddae:	233f      	movs	r3, #63	; 0x3f
    ddb0:	4a0e      	ldr	r2, [pc, #56]	; (ddec <bt_buf_get_rx+0x54>)
    ddb2:	480f      	ldr	r0, [pc, #60]	; (ddf0 <bt_buf_get_rx+0x58>)
    ddb4:	f00e fe99 	bl	1caea <assert_print>
    ddb8:	480e      	ldr	r0, [pc, #56]	; (ddf4 <bt_buf_get_rx+0x5c>)
    ddba:	f00e fe96 	bl	1caea <assert_print>
    ddbe:	213f      	movs	r1, #63	; 0x3f
    ddc0:	480a      	ldr	r0, [pc, #40]	; (ddec <bt_buf_get_rx+0x54>)
    ddc2:	f00e fe8b 	bl	1cadc <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    ddc6:	480c      	ldr	r0, [pc, #48]	; (ddf8 <bt_buf_get_rx+0x60>)
    ddc8:	f011 f840 	bl	1ee4c <net_buf_alloc_fixed>
    ddcc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    ddce:	b120      	cbz	r0, ddda <bt_buf_get_rx+0x42>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    ddd0:	2101      	movs	r1, #1
    ddd2:	3008      	adds	r0, #8
    ddd4:	f005 fd74 	bl	138c0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ddd8:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    ddda:	4620      	mov	r0, r4
    dddc:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
    ddde:	4602      	mov	r2, r0
    dde0:	460b      	mov	r3, r1
    dde2:	4806      	ldr	r0, [pc, #24]	; (ddfc <bt_buf_get_rx+0x64>)
    dde4:	e7f0      	b.n	ddc8 <bt_buf_get_rx+0x30>
    dde6:	bf00      	nop
    dde8:	00022918 	.word	0x00022918
    ddec:	000228e9 	.word	0x000228e9
    ddf0:	00021547 	.word	0x00021547
    ddf4:	0002295d 	.word	0x0002295d
    ddf8:	200086f8 	.word	0x200086f8
    ddfc:	2000865c 	.word	0x2000865c

0000de00 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    de00:	b510      	push	{r4, lr}
    de02:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    de04:	490a      	ldr	r1, [pc, #40]	; (de30 <bt_buf_get_cmd_complete+0x30>)
{
    de06:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    de08:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
    de0c:	b920      	cbnz	r0, de18 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    de0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    de12:	2001      	movs	r0, #1
    de14:	f7ff bfc0 	b.w	dd98 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    de18:	f005 feda 	bl	13bd0 <net_buf_ref>
    de1c:	2101      	movs	r1, #1
		buf->len = 0U;
    de1e:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
    de20:	4604      	mov	r4, r0
    de22:	7501      	strb	r1, [r0, #20]
		buf->len = 0U;
    de24:	8183      	strh	r3, [r0, #12]
	net_buf_simple_reserve(&buf->b, reserve);
    de26:	3008      	adds	r0, #8
    de28:	f005 fd4a 	bl	138c0 <net_buf_simple_reserve>
}
    de2c:	4620      	mov	r0, r4
    de2e:	bd10      	pop	{r4, pc}
    de30:	20008000 	.word	0x20008000

0000de34 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    de34:	b570      	push	{r4, r5, r6, lr}
    de36:	4604      	mov	r4, r0
	switch (evt) {
    de38:	2c0f      	cmp	r4, #15
{
    de3a:	460d      	mov	r5, r1
    de3c:	4610      	mov	r0, r2
    de3e:	4619      	mov	r1, r3
	switch (evt) {
    de40:	d805      	bhi.n	de4e <bt_buf_get_evt+0x1a>
    de42:	2c0d      	cmp	r4, #13
    de44:	d90d      	bls.n	de62 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    de46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    de4a:	f7ff bfd9 	b.w	de00 <bt_buf_get_cmd_complete>
	switch (evt) {
    de4e:	2c13      	cmp	r4, #19
    de50:	d107      	bne.n	de62 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    de52:	480c      	ldr	r0, [pc, #48]	; (de84 <bt_buf_get_evt+0x50>)
    de54:	f010 fffa 	bl	1ee4c <net_buf_alloc_fixed>
			if (buf) {
    de58:	4604      	mov	r4, r0
    de5a:	b938      	cbnz	r0, de6c <bt_buf_get_evt+0x38>
{
    de5c:	2400      	movs	r4, #0
}
    de5e:	4620      	mov	r0, r4
    de60:	bd70      	pop	{r4, r5, r6, pc}
    de62:	4602      	mov	r2, r0
    de64:	460b      	mov	r3, r1
		if (discardable) {
    de66:	b145      	cbz	r5, de7a <bt_buf_get_evt+0x46>
    de68:	4807      	ldr	r0, [pc, #28]	; (de88 <bt_buf_get_evt+0x54>)
    de6a:	e7f3      	b.n	de54 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    de6c:	2101      	movs	r1, #1
    de6e:	3008      	adds	r0, #8
    de70:	f005 fd26 	bl	138c0 <net_buf_simple_reserve>
    de74:	2301      	movs	r3, #1
    de76:	7523      	strb	r3, [r4, #20]
}
    de78:	e7f1      	b.n	de5e <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    de7a:	2001      	movs	r0, #1
}
    de7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    de80:	f7ff bf8a 	b.w	dd98 <bt_buf_get_rx>
    de84:	20008794 	.word	0x20008794
    de88:	200086c4 	.word	0x200086c4

0000de8c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    de8c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    de8e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    de90:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    de94:	781b      	ldrb	r3, [r3, #0]
    de96:	b963      	cbnz	r3, deb2 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    de98:	4620      	mov	r0, r4
    de9a:	f002 fd41 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    de9e:	4605      	mov	r5, r0
    dea0:	b940      	cbnz	r0, deb4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    dea2:	4b08      	ldr	r3, [pc, #32]	; (dec4 <hci_disconn_complete_prio+0x38>)
    dea4:	881a      	ldrh	r2, [r3, #0]
    dea6:	b922      	cbnz	r2, deb2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    dea8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    deac:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    deb0:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    deb2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    deb4:	2101      	movs	r1, #1
    deb6:	f002 fd3b 	bl	10930 <bt_conn_set_state>
	bt_conn_unref(conn);
    deba:	4628      	mov	r0, r5
}
    debc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    dec0:	f002 bcfe 	b.w	108c0 <bt_conn_unref>
    dec4:	20009c58 	.word	0x20009c58

0000dec8 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    dec8:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    deca:	4c08      	ldr	r4, [pc, #32]	; (deec <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    decc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    dece:	2205      	movs	r2, #5
    ded0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    ded4:	f002 ff9a 	bl	10e0c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
    ded8:	b938      	cbnz	r0, deea <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    deda:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    dede:	2204      	movs	r2, #4

		return conn;
	}

	return NULL;
}
    dee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    dee4:	4902      	ldr	r1, [pc, #8]	; (def0 <find_pending_connect.part.0+0x28>)
    dee6:	f002 bf91 	b.w	10e0c <bt_conn_lookup_state_le>
}
    deea:	bd10      	pop	{r4, pc}
    deec:	20008000 	.word	0x20008000
    def0:	0002285f 	.word	0x0002285f

0000def4 <hci_data_buf_overflow>:
{
    def4:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    def6:	6883      	ldr	r3, [r0, #8]
{
    def8:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    defa:	b088      	sub	sp, #32
    defc:	466a      	mov	r2, sp
    defe:	781b      	ldrb	r3, [r3, #0]
    df00:	4906      	ldr	r1, [pc, #24]	; (df1c <hci_data_buf_overflow+0x28>)
    df02:	4807      	ldr	r0, [pc, #28]	; (df20 <hci_data_buf_overflow+0x2c>)
    df04:	e9c2 1305 	strd	r1, r3, [r2, #20]
    df08:	2303      	movs	r3, #3
    df0a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    df0e:	f842 3f10 	str.w	r3, [r2, #16]!
    df12:	f00f fe88 	bl	1dc26 <z_log_msg_static_create.constprop.0>
}
    df16:	46bd      	mov	sp, r7
    df18:	bd80      	pop	{r7, pc}
    df1a:	bf00      	nop
    df1c:	00022984 	.word	0x00022984
    df20:	0002083c 	.word	0x0002083c

0000df24 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    df24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		BT_ERR("Unable to allocate buffer");
    df26:	4b06      	ldr	r3, [pc, #24]	; (df40 <le_conn_param_neg_reply.part.0+0x1c>)
    df28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    df2c:	9305      	str	r3, [sp, #20]
    df2e:	2302      	movs	r3, #2
    df30:	4804      	ldr	r0, [pc, #16]	; (df44 <le_conn_param_neg_reply.part.0+0x20>)
    df32:	aa04      	add	r2, sp, #16
    df34:	9304      	str	r3, [sp, #16]
    df36:	f00f fe76 	bl	1dc26 <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    df3a:	b007      	add	sp, #28
    df3c:	f85d fb04 	ldr.w	pc, [sp], #4
    df40:	000229ac 	.word	0x000229ac
    df44:	0002083c 	.word	0x0002083c

0000df48 <le_conn_update_complete>:

	bt_conn_unref(conn);
}

static void le_conn_update_complete(struct net_buf *buf)
{
    df48:	b5f0      	push	{r4, r5, r6, r7, lr}
    df4a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    df4c:	6885      	ldr	r5, [r0, #8]
{
    df4e:	af00      	add	r7, sp, #0
	struct bt_conn *conn;
	uint16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    df50:	f8b5 6001 	ldrh.w	r6, [r5, #1]

	BT_DBG("status 0x%02x, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    df54:	4630      	mov	r0, r6
    df56:	f002 fce3 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    df5a:	4604      	mov	r4, r0
    df5c:	b988      	cbnz	r0, df82 <le_conn_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    df5e:	466c      	mov	r4, sp
    df60:	b088      	sub	sp, #32
    df62:	466a      	mov	r2, sp
    df64:	4b1c      	ldr	r3, [pc, #112]	; (dfd8 <le_conn_update_complete+0x90>)
    df66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df6a:	e9c2 3605 	strd	r3, r6, [r2, #20]
    df6e:	2303      	movs	r3, #3
    df70:	481a      	ldr	r0, [pc, #104]	; (dfdc <le_conn_update_complete+0x94>)
    df72:	f842 3f10 	str.w	r3, [r2, #16]!
    df76:	f00f fe56 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    df7a:	46a5      	mov	sp, r4

		bt_l2cap_update_conn_param(conn, &param);
	}

	bt_conn_unref(conn);
}
    df7c:	370c      	adds	r7, #12
    df7e:	46bd      	mov	sp, r7
    df80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
    df82:	782b      	ldrb	r3, [r5, #0]
    df84:	b98b      	cbnz	r3, dfaa <le_conn_update_complete+0x62>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    df86:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    df8a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    df8e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    df92:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    df96:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    df9a:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
    df9e:	f002 fe1b 	bl	10bd8 <notify_le_param_updated>
	bt_conn_unref(conn);
    dfa2:	4620      	mov	r0, r4
    dfa4:	f002 fc8c 	bl	108c0 <bt_conn_unref>
    dfa8:	e7e8      	b.n	df7c <le_conn_update_complete+0x34>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    dfaa:	2b1a      	cmp	r3, #26
    dfac:	d1f9      	bne.n	dfa2 <le_conn_update_complete+0x5a>
    dfae:	78c3      	ldrb	r3, [r0, #3]
    dfb0:	2b01      	cmp	r3, #1
    dfb2:	d1f6      	bne.n	dfa2 <le_conn_update_complete+0x5a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    dfb4:	f44f 7100 	mov.w	r1, #512	; 0x200
    dfb8:	3004      	adds	r0, #4
    dfba:	f00f fe29 	bl	1dc10 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    dfbe:	0583      	lsls	r3, r0, #22
    dfc0:	d4ef      	bmi.n	dfa2 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    dfc2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    dfc6:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    dfc8:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    dfca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
    dfce:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    dfd0:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    dfd2:	f003 fa01 	bl	113d8 <bt_l2cap_update_conn_param>
    dfd6:	e7e4      	b.n	dfa2 <le_conn_update_complete+0x5a>
    dfd8:	000229c6 	.word	0x000229c6
    dfdc:	0002083c 	.word	0x0002083c

0000dfe0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    dfe0:	b598      	push	{r3, r4, r7, lr}
    dfe2:	4601      	mov	r1, r0
    dfe4:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    dfe6:	480d      	ldr	r0, [pc, #52]	; (e01c <rx_queue_put+0x3c>)
    dfe8:	f005 fc90 	bl	1390c <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    dfec:	490c      	ldr	r1, [pc, #48]	; (e020 <rx_queue_put+0x40>)
    dfee:	480d      	ldr	r0, [pc, #52]	; (e024 <rx_queue_put+0x44>)
    dff0:	f012 f87f 	bl	200f2 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    dff4:	2800      	cmp	r0, #0
    dff6:	da0e      	bge.n	e016 <rx_queue_put+0x36>
		BT_ERR("Could not submit rx_work: %d", err);
    dff8:	466c      	mov	r4, sp
    dffa:	b088      	sub	sp, #32
    dffc:	466a      	mov	r2, sp
    dffe:	4b0a      	ldr	r3, [pc, #40]	; (e028 <rx_queue_put+0x48>)
    e000:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e004:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e008:	2303      	movs	r3, #3
    e00a:	4808      	ldr	r0, [pc, #32]	; (e02c <rx_queue_put+0x4c>)
    e00c:	f842 3f10 	str.w	r3, [r2, #16]!
    e010:	f00f fe09 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e014:	46a5      	mov	sp, r4
	}
}
    e016:	46bd      	mov	sp, r7
    e018:	bd98      	pop	{r3, r4, r7, pc}
    e01a:	bf00      	nop
    e01c:	20008134 	.word	0x20008134
    e020:	20008204 	.word	0x20008204
    e024:	200091a8 	.word	0x200091a8
    e028:	000229ea 	.word	0x000229ea
    e02c:	0002083c 	.word	0x0002083c

0000e030 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    e030:	460b      	mov	r3, r1
    e032:	b5b0      	push	{r4, r5, r7, lr}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    e034:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    e036:	af00      	add	r7, sp, #0
    e038:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    e03a:	4629      	mov	r1, r5
    e03c:	6898      	ldr	r0, [r3, #8]
    e03e:	f7ff fdf3 	bl	dc28 <bt_hex>
    e042:	b08a      	sub	sp, #40	; 0x28
    e044:	466a      	mov	r2, sp
    e046:	4b09      	ldr	r3, [pc, #36]	; (e06c <handle_event.part.0+0x3c>)
    e048:	e9c2 5007 	strd	r5, r0, [r2, #28]
    e04c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e050:	f240 4302 	movw	r3, #1026	; 0x402
    e054:	8493      	strh	r3, [r2, #36]	; 0x24
    e056:	4b06      	ldr	r3, [pc, #24]	; (e070 <handle_event.part.0+0x40>)
    e058:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    e05c:	4805      	ldr	r0, [pc, #20]	; (e074 <handle_event.part.0+0x44>)
    e05e:	f842 3f10 	str.w	r3, [r2, #16]!
    e062:	f00f fde0 	bl	1dc26 <z_log_msg_static_create.constprop.0>
}
    e066:	46bd      	mov	sp, r7
    e068:	bdb0      	pop	{r4, r5, r7, pc}
    e06a:	bf00      	nop
    e06c:	00022a07 	.word	0x00022a07
    e070:	01000005 	.word	0x01000005
    e074:	0002083c 	.word	0x0002083c

0000e078 <hci_hardware_error>:
{
    e078:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    e07a:	2101      	movs	r1, #1
    e07c:	af00      	add	r7, sp, #0
    e07e:	3008      	adds	r0, #8
    e080:	f005 fe66 	bl	13d50 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e084:	b088      	sub	sp, #32
    e086:	466a      	mov	r2, sp
    e088:	7803      	ldrb	r3, [r0, #0]
    e08a:	4906      	ldr	r1, [pc, #24]	; (e0a4 <hci_hardware_error+0x2c>)
    e08c:	4806      	ldr	r0, [pc, #24]	; (e0a8 <hci_hardware_error+0x30>)
    e08e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    e092:	2303      	movs	r3, #3
    e094:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e098:	f842 3f10 	str.w	r3, [r2, #16]!
    e09c:	f00f fdc3 	bl	1dc26 <z_log_msg_static_create.constprop.0>
}
    e0a0:	46bd      	mov	sp, r7
    e0a2:	bd80      	pop	{r7, pc}
    e0a4:	00022a29 	.word	0x00022a29
    e0a8:	0002083c 	.word	0x0002083c

0000e0ac <le_data_len_change>:
{
    e0ac:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e0ae:	6883      	ldr	r3, [r0, #8]
{
    e0b0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e0b2:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e0b4:	4620      	mov	r0, r4
    e0b6:	f002 fc33 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    e0ba:	b980      	cbnz	r0, e0de <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e0bc:	466d      	mov	r5, sp
    e0be:	b088      	sub	sp, #32
    e0c0:	466a      	mov	r2, sp
    e0c2:	4b08      	ldr	r3, [pc, #32]	; (e0e4 <le_data_len_change+0x38>)
    e0c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e0c8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e0cc:	2303      	movs	r3, #3
    e0ce:	4806      	ldr	r0, [pc, #24]	; (e0e8 <le_data_len_change+0x3c>)
    e0d0:	f842 3f10 	str.w	r3, [r2, #16]!
    e0d4:	f00f fda7 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e0d8:	46ad      	mov	sp, r5
}
    e0da:	46bd      	mov	sp, r7
    e0dc:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    e0de:	f002 fbef 	bl	108c0 <bt_conn_unref>
    e0e2:	e7fa      	b.n	e0da <le_data_len_change+0x2e>
    e0e4:	000229c6 	.word	0x000229c6
    e0e8:	0002083c 	.word	0x0002083c

0000e0ec <le_phy_update_complete>:
{
    e0ec:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e0ee:	6883      	ldr	r3, [r0, #8]
{
    e0f0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e0f2:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    e0f6:	4620      	mov	r0, r4
    e0f8:	f002 fc12 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    e0fc:	b980      	cbnz	r0, e120 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e0fe:	466d      	mov	r5, sp
    e100:	b088      	sub	sp, #32
    e102:	466a      	mov	r2, sp
    e104:	4b08      	ldr	r3, [pc, #32]	; (e128 <le_phy_update_complete+0x3c>)
    e106:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e10a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e10e:	2303      	movs	r3, #3
    e110:	4806      	ldr	r0, [pc, #24]	; (e12c <le_phy_update_complete+0x40>)
    e112:	f842 3f10 	str.w	r3, [r2, #16]!
    e116:	f00f fd86 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e11a:	46ad      	mov	sp, r5
}
    e11c:	46bd      	mov	sp, r7
    e11e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    e120:	f002 fbce 	bl	108c0 <bt_conn_unref>
    e124:	e7fa      	b.n	e11c <le_phy_update_complete+0x30>
    e126:	bf00      	nop
    e128:	000229c6 	.word	0x000229c6
    e12c:	0002083c 	.word	0x0002083c

0000e130 <hci_disconn_complete>:
{
    e130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e134:	6885      	ldr	r5, [r0, #8]
{
    e136:	af00      	add	r7, sp, #0
	if (evt->status) {
    e138:	782e      	ldrb	r6, [r5, #0]
    e13a:	b9ae      	cbnz	r6, e168 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e13c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e140:	4640      	mov	r0, r8
    e142:	f002 fbed 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    e146:	4604      	mov	r4, r0
    e148:	b988      	cbnz	r0, e16e <hci_disconn_complete+0x3e>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e14a:	466c      	mov	r4, sp
    e14c:	b088      	sub	sp, #32
    e14e:	466a      	mov	r2, sp
    e150:	4b0b      	ldr	r3, [pc, #44]	; (e180 <hci_disconn_complete+0x50>)
    e152:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e156:	e9c2 3805 	strd	r3, r8, [r2, #20]
    e15a:	2303      	movs	r3, #3
    e15c:	4809      	ldr	r0, [pc, #36]	; (e184 <hci_disconn_complete+0x54>)
    e15e:	f842 3f10 	str.w	r3, [r2, #16]!
    e162:	f00f fd60 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e166:	46a5      	mov	sp, r4
}
    e168:	46bd      	mov	sp, r7
    e16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    e16e:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e170:	4631      	mov	r1, r6
	conn->err = evt->reason;
    e172:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e174:	f002 fbdc 	bl	10930 <bt_conn_set_state>
		bt_conn_unref(conn);
    e178:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    e17a:	f002 fba1 	bl	108c0 <bt_conn_unref>
    e17e:	e7f3      	b.n	e168 <hci_disconn_complete+0x38>
    e180:	00022a4b 	.word	0x00022a4b
    e184:	0002083c 	.word	0x0002083c

0000e188 <handle_event>:
{
    e188:	b5b0      	push	{r4, r5, r7, lr}
    e18a:	4604      	mov	r4, r0
    e18c:	af00      	add	r7, sp, #0
    e18e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    e192:	4293      	cmp	r3, r2
    e194:	d103      	bne.n	e19e <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    e196:	4620      	mov	r0, r4
    e198:	f7ff ff4a 	bl	e030 <handle_event.part.0>
}
    e19c:	e018      	b.n	e1d0 <handle_event+0x48>
		if (handler->event != event) {
    e19e:	4610      	mov	r0, r2
    e1a0:	f810 5b08 	ldrb.w	r5, [r0], #8
    e1a4:	42a5      	cmp	r5, r4
    e1a6:	d119      	bne.n	e1dc <handle_event+0x54>
		if (buf->len < handler->min_len) {
    e1a8:	898b      	ldrh	r3, [r1, #12]
    e1aa:	7850      	ldrb	r0, [r2, #1]
    e1ac:	4298      	cmp	r0, r3
    e1ae:	d911      	bls.n	e1d4 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e1b0:	466d      	mov	r5, sp
    e1b2:	b088      	sub	sp, #32
    e1b4:	466a      	mov	r2, sp
    e1b6:	490a      	ldr	r1, [pc, #40]	; (e1e0 <handle_event+0x58>)
    e1b8:	61d4      	str	r4, [r2, #28]
    e1ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
    e1be:	2304      	movs	r3, #4
    e1c0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e1c4:	4807      	ldr	r0, [pc, #28]	; (e1e4 <handle_event+0x5c>)
    e1c6:	f842 3f10 	str.w	r3, [r2, #16]!
    e1ca:	f00f fd2c 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e1ce:	46ad      	mov	sp, r5
}
    e1d0:	46bd      	mov	sp, r7
    e1d2:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    e1d4:	4608      	mov	r0, r1
    e1d6:	6853      	ldr	r3, [r2, #4]
    e1d8:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    e1da:	e7f9      	b.n	e1d0 <handle_event+0x48>
    e1dc:	4602      	mov	r2, r0
    e1de:	e7d8      	b.n	e192 <handle_event+0xa>
    e1e0:	00022a71 	.word	0x00022a71
    e1e4:	0002083c 	.word	0x0002083c

0000e1e8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    e1ea:	4855      	ldr	r0, [pc, #340]	; (e340 <rx_work_handler+0x158>)
{
    e1ec:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    e1ee:	f005 fbfd 	bl	139ec <net_buf_slist_get>
	if (!buf) {
    e1f2:	4604      	mov	r4, r0
    e1f4:	2800      	cmp	r0, #0
    e1f6:	d06a      	beq.n	e2ce <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e1f8:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    e1fa:	2b01      	cmp	r3, #1
    e1fc:	d069      	beq.n	e2d2 <rx_work_handler+0xea>
    e1fe:	2b03      	cmp	r3, #3
    e200:	f040 8099 	bne.w	e336 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e204:	8983      	ldrh	r3, [r0, #12]
    e206:	2b03      	cmp	r3, #3
    e208:	d80c      	bhi.n	e224 <rx_work_handler+0x3c>
    e20a:	f240 13ed 	movw	r3, #493	; 0x1ed
    e20e:	4a4d      	ldr	r2, [pc, #308]	; (e344 <rx_work_handler+0x15c>)
    e210:	494d      	ldr	r1, [pc, #308]	; (e348 <rx_work_handler+0x160>)
    e212:	484e      	ldr	r0, [pc, #312]	; (e34c <rx_work_handler+0x164>)
    e214:	f00e fc69 	bl	1caea <assert_print>
    e218:	4040      	eors	r0, r0
    e21a:	f380 8811 	msr	BASEPRI, r0
    e21e:	f04f 0003 	mov.w	r0, #3
    e222:	df02      	svc	2
    e224:	2104      	movs	r1, #4
    e226:	f104 0008 	add.w	r0, r4, #8
    e22a:	f005 fd91 	bl	13d50 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e22e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    e230:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    e232:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    e234:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    e236:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    e23a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    e23c:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e23e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    e240:	d010      	beq.n	e264 <rx_work_handler+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    e242:	466d      	mov	r5, sp
    e244:	b088      	sub	sp, #32
    e246:	466a      	mov	r2, sp
    e248:	4841      	ldr	r0, [pc, #260]	; (e350 <rx_work_handler+0x168>)
    e24a:	61d3      	str	r3, [r2, #28]
    e24c:	2304      	movs	r3, #4
    e24e:	e9c2 0105 	strd	r0, r1, [r2, #20]
    e252:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e256:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e25a:	483e      	ldr	r0, [pc, #248]	; (e354 <rx_work_handler+0x16c>)
    e25c:	f00f fce3 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e260:	46ad      	mov	sp, r5
    e262:	e064      	b.n	e32e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    e264:	f002 fb5c 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    e268:	4605      	mov	r5, r0
    e26a:	b960      	cbnz	r0, e286 <rx_work_handler+0x9e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    e26c:	466d      	mov	r5, sp
    e26e:	b088      	sub	sp, #32
    e270:	8ae3      	ldrh	r3, [r4, #22]
    e272:	466a      	mov	r2, sp
    e274:	4938      	ldr	r1, [pc, #224]	; (e358 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
    e276:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e27a:	2303      	movs	r3, #3
    e27c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e280:	f842 3f10 	str.w	r3, [r2, #16]!
    e284:	e7e9      	b.n	e25a <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
    e286:	f002 fc43 	bl	10b10 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    e28a:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    e28c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    e28e:	0b32      	lsrs	r2, r6, #12
    e290:	4628      	mov	r0, r5
    e292:	f002 f9af 	bl	105f4 <bt_conn_recv>
	bt_conn_unref(conn);
    e296:	4628      	mov	r0, r5
    e298:	f002 fb12 	bl	108c0 <bt_conn_unref>
	return list->head;
    e29c:	4b2f      	ldr	r3, [pc, #188]	; (e35c <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    e29e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    e2a2:	b1a3      	cbz	r3, e2ce <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    e2a4:	492e      	ldr	r1, [pc, #184]	; (e360 <rx_work_handler+0x178>)
    e2a6:	482f      	ldr	r0, [pc, #188]	; (e364 <rx_work_handler+0x17c>)
    e2a8:	f011 ff23 	bl	200f2 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    e2ac:	2800      	cmp	r0, #0
    e2ae:	da0e      	bge.n	e2ce <rx_work_handler+0xe6>
			BT_ERR("Could not submit rx_work: %d", err);
    e2b0:	466c      	mov	r4, sp
    e2b2:	b088      	sub	sp, #32
    e2b4:	466a      	mov	r2, sp
    e2b6:	4b2c      	ldr	r3, [pc, #176]	; (e368 <rx_work_handler+0x180>)
    e2b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e2bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e2c0:	2303      	movs	r3, #3
    e2c2:	4824      	ldr	r0, [pc, #144]	; (e354 <rx_work_handler+0x16c>)
    e2c4:	f842 3f10 	str.w	r3, [r2, #16]!
    e2c8:	f00f fcad 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e2cc:	46a5      	mov	sp, r4
		}
	}
}
    e2ce:	46bd      	mov	sp, r7
    e2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e2d2:	8983      	ldrh	r3, [r0, #12]
    e2d4:	2b01      	cmp	r3, #1
    e2d6:	d80c      	bhi.n	e2f2 <rx_work_handler+0x10a>
    e2d8:	f44f 6316 	mov.w	r3, #2400	; 0x960
    e2dc:	4a19      	ldr	r2, [pc, #100]	; (e344 <rx_work_handler+0x15c>)
    e2de:	491a      	ldr	r1, [pc, #104]	; (e348 <rx_work_handler+0x160>)
    e2e0:	481a      	ldr	r0, [pc, #104]	; (e34c <rx_work_handler+0x164>)
    e2e2:	f00e fc02 	bl	1caea <assert_print>
    e2e6:	4040      	eors	r0, r0
    e2e8:	f380 8811 	msr	BASEPRI, r0
    e2ec:	f04f 0003 	mov.w	r0, #3
    e2f0:	df02      	svc	2
    e2f2:	2102      	movs	r1, #2
    e2f4:	f104 0008 	add.w	r0, r4, #8
    e2f8:	f005 fd2a 	bl	13d50 <net_buf_simple_pull_mem>
    e2fc:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e2fe:	7800      	ldrb	r0, [r0, #0]
    e300:	f00f fc70 	bl	1dbe4 <bt_hci_evt_get_flags>
    e304:	0783      	lsls	r3, r0, #30
    e306:	d40c      	bmi.n	e322 <rx_work_handler+0x13a>
    e308:	f640 1364 	movw	r3, #2404	; 0x964
    e30c:	4a0d      	ldr	r2, [pc, #52]	; (e344 <rx_work_handler+0x15c>)
    e30e:	4917      	ldr	r1, [pc, #92]	; (e36c <rx_work_handler+0x184>)
    e310:	480e      	ldr	r0, [pc, #56]	; (e34c <rx_work_handler+0x164>)
    e312:	f00e fbea 	bl	1caea <assert_print>
    e316:	4040      	eors	r0, r0
    e318:	f380 8811 	msr	BASEPRI, r0
    e31c:	f04f 0003 	mov.w	r0, #3
    e320:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    e322:	2304      	movs	r3, #4
    e324:	4621      	mov	r1, r4
    e326:	4a12      	ldr	r2, [pc, #72]	; (e370 <rx_work_handler+0x188>)
    e328:	7828      	ldrb	r0, [r5, #0]
    e32a:	f7ff ff2d 	bl	e188 <handle_event>
		net_buf_unref(buf);
    e32e:	4620      	mov	r0, r4
    e330:	f005 fc0a 	bl	13b48 <net_buf_unref>
		break;
    e334:	e7b2      	b.n	e29c <rx_work_handler+0xb4>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e336:	466d      	mov	r5, sp
    e338:	b088      	sub	sp, #32
    e33a:	466a      	mov	r2, sp
    e33c:	490d      	ldr	r1, [pc, #52]	; (e374 <rx_work_handler+0x18c>)
    e33e:	e79a      	b.n	e276 <rx_work_handler+0x8e>
    e340:	20008134 	.word	0x20008134
    e344:	00022a93 	.word	0x00022a93
    e348:	00022ac7 	.word	0x00022ac7
    e34c:	00021547 	.word	0x00021547
    e350:	00022ae0 	.word	0x00022ae0
    e354:	0002083c 	.word	0x0002083c
    e358:	00022b04 	.word	0x00022b04
    e35c:	20008000 	.word	0x20008000
    e360:	20008204 	.word	0x20008204
    e364:	200091a8 	.word	0x200091a8
    e368:	000229ea 	.word	0x000229ea
    e36c:	00022b26 	.word	0x00022b26
    e370:	00020c9c 	.word	0x00020c9c
    e374:	00022b54 	.word	0x00022b54

0000e378 <hci_le_meta_event>:
{
    e378:	b510      	push	{r4, lr}
    e37a:	2101      	movs	r1, #1
    e37c:	4604      	mov	r4, r0
    e37e:	3008      	adds	r0, #8
    e380:	f005 fce6 	bl	13d50 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e384:	4621      	mov	r1, r4
}
    e386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e38a:	2307      	movs	r3, #7
    e38c:	4a01      	ldr	r2, [pc, #4]	; (e394 <hci_le_meta_event+0x1c>)
    e38e:	7800      	ldrb	r0, [r0, #0]
    e390:	f7ff befa 	b.w	e188 <handle_event>
    e394:	00020cbc 	.word	0x00020cbc

0000e398 <le_remote_feat_complete>:
{
    e398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    e39a:	6885      	ldr	r5, [r0, #8]
{
    e39c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e39e:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e3a2:	4630      	mov	r0, r6
    e3a4:	f002 fabc 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    e3a8:	4604      	mov	r4, r0
    e3aa:	b980      	cbnz	r0, e3ce <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e3ac:	466c      	mov	r4, sp
    e3ae:	b088      	sub	sp, #32
    e3b0:	466a      	mov	r2, sp
    e3b2:	4b0f      	ldr	r3, [pc, #60]	; (e3f0 <le_remote_feat_complete+0x58>)
    e3b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e3b8:	e9c2 3605 	strd	r3, r6, [r2, #20]
    e3bc:	2303      	movs	r3, #3
    e3be:	480d      	ldr	r0, [pc, #52]	; (e3f4 <le_remote_feat_complete+0x5c>)
    e3c0:	f842 3f10 	str.w	r3, [r2, #16]!
    e3c4:	f00f fc2f 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e3c8:	46a5      	mov	sp, r4
}
    e3ca:	46bd      	mov	sp, r7
    e3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    e3ce:	782b      	ldrb	r3, [r5, #0]
    e3d0:	b923      	cbnz	r3, e3dc <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    e3d2:	2208      	movs	r2, #8
    e3d4:	1ce9      	adds	r1, r5, #3
    e3d6:	30b4      	adds	r0, #180	; 0xb4
    e3d8:	f00f fb96 	bl	1db08 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e3dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e3e0:	1d20      	adds	r0, r4, #4
    e3e2:	f00f fc15 	bl	1dc10 <atomic_or>
	bt_conn_unref(conn);
    e3e6:	4620      	mov	r0, r4
    e3e8:	f002 fa6a 	bl	108c0 <bt_conn_unref>
    e3ec:	e7ed      	b.n	e3ca <le_remote_feat_complete+0x32>
    e3ee:	bf00      	nop
    e3f0:	000229c6 	.word	0x000229c6
    e3f4:	0002083c 	.word	0x0002083c

0000e3f8 <hci_cmd_done>:
{
    e3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e3fc:	4606      	mov	r6, r0
    e3fe:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e400:	7990      	ldrb	r0, [r2, #6]
{
    e402:	4688      	mov	r8, r1
    e404:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e406:	f005 f905 	bl	13614 <net_buf_pool_get>
    e40a:	4d41      	ldr	r5, [pc, #260]	; (e510 <hci_cmd_done+0x118>)
    e40c:	4285      	cmp	r5, r0
    e40e:	d018      	beq.n	e442 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    e410:	79a4      	ldrb	r4, [r4, #6]
    e412:	46e8      	mov	r8, sp
    e414:	4620      	mov	r0, r4
    e416:	f005 f8fd 	bl	13614 <net_buf_pool_get>
    e41a:	b08a      	sub	sp, #40	; 0x28
    e41c:	466a      	mov	r2, sp
    e41e:	4b3d      	ldr	r3, [pc, #244]	; (e514 <hci_cmd_done+0x11c>)
    e420:	e9c2 4007 	strd	r4, r0, [r2, #28]
    e424:	e9c2 3605 	strd	r3, r6, [r2, #20]
    e428:	2306      	movs	r3, #6
    e42a:	6255      	str	r5, [r2, #36]	; 0x24
    e42c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    e430:	4839      	ldr	r0, [pc, #228]	; (e518 <hci_cmd_done+0x120>)
    e432:	f842 3f10 	str.w	r3, [r2, #16]!
    e436:	f00f fbf6 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e43a:	46c5      	mov	sp, r8
}
    e43c:	46bd      	mov	sp, r7
    e43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    e442:	4620      	mov	r0, r4
    e444:	f005 f8ee 	bl	13624 <net_buf_id>
    e448:	f04f 090c 	mov.w	r9, #12
    e44c:	4d33      	ldr	r5, [pc, #204]	; (e51c <hci_cmd_done+0x124>)
    e44e:	fb09 5000 	mla	r0, r9, r0, r5
    e452:	8843      	ldrh	r3, [r0, #2]
    e454:	42b3      	cmp	r3, r6
    e456:	d016      	beq.n	e486 <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    e458:	4620      	mov	r0, r4
    e45a:	f005 f8e3 	bl	13624 <net_buf_id>
    e45e:	fb09 5000 	mla	r0, r9, r0, r5
    e462:	466c      	mov	r4, sp
    e464:	b088      	sub	sp, #32
    e466:	466a      	mov	r2, sp
    e468:	8843      	ldrh	r3, [r0, #2]
    e46a:	61d3      	str	r3, [r2, #28]
    e46c:	2304      	movs	r3, #4
    e46e:	492c      	ldr	r1, [pc, #176]	; (e520 <hci_cmd_done+0x128>)
    e470:	4829      	ldr	r0, [pc, #164]	; (e518 <hci_cmd_done+0x120>)
    e472:	e9c2 1605 	strd	r1, r6, [r2, #20]
    e476:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    e47a:	f842 3f10 	str.w	r3, [r2, #16]!
    e47e:	f00f fbd2 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e482:	46a5      	mov	sp, r4
		return;
    e484:	e7da      	b.n	e43c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
    e486:	4e27      	ldr	r6, [pc, #156]	; (e524 <hci_cmd_done+0x12c>)
    e488:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
    e48c:	b120      	cbz	r0, e498 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
    e48e:	f005 fb5b 	bl	13b48 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e492:	2300      	movs	r3, #0
    e494:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    e498:	4620      	mov	r0, r4
    e49a:	f005 f8c3 	bl	13624 <net_buf_id>
    e49e:	260c      	movs	r6, #12
    e4a0:	fb06 5000 	mla	r0, r6, r0, r5
    e4a4:	6843      	ldr	r3, [r0, #4]
    e4a6:	b1ab      	cbz	r3, e4d4 <hci_cmd_done+0xdc>
    e4a8:	f1b8 0f00 	cmp.w	r8, #0
    e4ac:	d112      	bne.n	e4d4 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e4ae:	4620      	mov	r0, r4
    e4b0:	f005 f8b8 	bl	13624 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    e4b4:	2101      	movs	r1, #1
    e4b6:	fb06 5000 	mla	r0, r6, r0, r5
    e4ba:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e4bc:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    e4c0:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    e4c2:	f003 061f 	and.w	r6, r3, #31
    e4c6:	40b1      	lsls	r1, r6
	if (val) {
    e4c8:	095b      	lsrs	r3, r3, #5
    e4ca:	b1da      	cbz	r2, e504 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e4cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e4d0:	f00f fb9e 	bl	1dc10 <atomic_or>
	if (cmd(buf)->sync) {
    e4d4:	4620      	mov	r0, r4
    e4d6:	f005 f8a5 	bl	13624 <net_buf_id>
    e4da:	260c      	movs	r6, #12
    e4dc:	fb06 5000 	mla	r0, r6, r0, r5
    e4e0:	6883      	ldr	r3, [r0, #8]
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d0aa      	beq.n	e43c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    e4e6:	4620      	mov	r0, r4
    e4e8:	f005 f89c 	bl	13624 <net_buf_id>
    e4ec:	4370      	muls	r0, r6
    e4ee:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    e4f2:	4620      	mov	r0, r4
    e4f4:	f005 f896 	bl	13624 <net_buf_id>
    e4f8:	fb06 5500 	mla	r5, r6, r0, r5
    e4fc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    e4fe:	f00b f823 	bl	19548 <z_impl_k_sem_give>
}
    e502:	e79b      	b.n	e43c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e504:	43c9      	mvns	r1, r1
    e506:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e50a:	f00f fb8f 	bl	1dc2c <atomic_and.isra.0>
    e50e:	e7e1      	b.n	e4d4 <hci_cmd_done+0xdc>
    e510:	20008760 	.word	0x20008760
    e514:	00022b68 	.word	0x00022b68
    e518:	0002083c 	.word	0x0002083c
    e51c:	200097a8 	.word	0x200097a8
    e520:	00022b9d 	.word	0x00022b9d
    e524:	20008000 	.word	0x20008000

0000e528 <hci_cmd_status>:
{
    e528:	b538      	push	{r3, r4, r5, lr}
    e52a:	2104      	movs	r1, #4
    e52c:	4604      	mov	r4, r0
    e52e:	3008      	adds	r0, #8
    e530:	f005 fc0e 	bl	13d50 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e534:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e536:	7801      	ldrb	r1, [r0, #0]
    e538:	4622      	mov	r2, r4
    e53a:	8840      	ldrh	r0, [r0, #2]
    e53c:	f7ff ff5c 	bl	e3f8 <hci_cmd_done>
	if (ncmd) {
    e540:	b125      	cbz	r5, e54c <hci_cmd_status+0x24>
}
    e542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    e546:	4802      	ldr	r0, [pc, #8]	; (e550 <hci_cmd_status+0x28>)
    e548:	f00a bffe 	b.w	19548 <z_impl_k_sem_give>
    e54c:	bd38      	pop	{r3, r4, r5, pc}
    e54e:	bf00      	nop
    e550:	20008118 	.word	0x20008118

0000e554 <hci_cmd_complete>:
{
    e554:	b538      	push	{r3, r4, r5, lr}
    e556:	2103      	movs	r1, #3
    e558:	4604      	mov	r4, r0
    e55a:	3008      	adds	r0, #8
    e55c:	f005 fbf8 	bl	13d50 <net_buf_simple_pull_mem>
	status = buf->data[0];
    e560:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    e562:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    e564:	4622      	mov	r2, r4
    e566:	7819      	ldrb	r1, [r3, #0]
    e568:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e56c:	f7ff ff44 	bl	e3f8 <hci_cmd_done>
	if (ncmd) {
    e570:	b125      	cbz	r5, e57c <hci_cmd_complete+0x28>
}
    e572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e576:	4802      	ldr	r0, [pc, #8]	; (e580 <hci_cmd_complete+0x2c>)
    e578:	f00a bfe6 	b.w	19548 <z_impl_k_sem_give>
    e57c:	bd38      	pop	{r3, r4, r5, pc}
    e57e:	bf00      	nop
    e580:	20008118 	.word	0x20008118

0000e584 <hci_num_completed_packets>:
{
    e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    e588:	2500      	movs	r5, #0
{
    e58a:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
    e58c:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    e58e:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    e592:	f8df a0fc 	ldr.w	sl, [pc, #252]	; e690 <hci_num_completed_packets+0x10c>
{
    e596:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
    e598:	f898 3000 	ldrb.w	r3, [r8]
    e59c:	429d      	cmp	r5, r3
    e59e:	db03      	blt.n	e5a8 <hci_num_completed_packets+0x24>
}
    e5a0:	371c      	adds	r7, #28
    e5a2:	46bd      	mov	sp, r7
    e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    e5a8:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    e5ac:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    e5b0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    e5b4:	4658      	mov	r0, fp
    e5b6:	f002 f9b3 	bl	10920 <bt_conn_lookup_handle>
		if (!conn) {
    e5ba:	4604      	mov	r4, r0
    e5bc:	b1d8      	cbz	r0, e5f6 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    e5be:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    e5c2:	2e00      	cmp	r6, #0
    e5c4:	d039      	beq.n	e63a <hci_num_completed_packets+0xb6>
	__asm__ volatile(
    e5c6:	f04f 0320 	mov.w	r3, #32
    e5ca:	f3ef 8211 	mrs	r2, BASEPRI
    e5ce:	f383 8812 	msr	BASEPRI_MAX, r3
    e5d2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    e5d6:	69e3      	ldr	r3, [r4, #28]
    e5d8:	b1f3      	cbz	r3, e618 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
    e5da:	3b01      	subs	r3, #1
    e5dc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e5de:	f382 8811 	msr	BASEPRI, r2
    e5e2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    e5e6:	4620      	mov	r0, r4
    e5e8:	f001 ff88 	bl	104fc <bt_conn_get_pkts>
    e5ec:	3e01      	subs	r6, #1
    e5ee:	f00a ffab 	bl	19548 <z_impl_k_sem_give>
    e5f2:	b2b6      	uxth	r6, r6
    e5f4:	e7e5      	b.n	e5c2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    e5f6:	466c      	mov	r4, sp
    e5f8:	b088      	sub	sp, #32
    e5fa:	466a      	mov	r2, sp
    e5fc:	4b25      	ldr	r3, [pc, #148]	; (e694 <hci_num_completed_packets+0x110>)
    e5fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e602:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    e606:	2303      	movs	r3, #3
    e608:	4823      	ldr	r0, [pc, #140]	; (e698 <hci_num_completed_packets+0x114>)
    e60a:	f842 3f10 	str.w	r3, [r2, #16]!
    e60e:	f00f fb0a 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e612:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    e614:	3501      	adds	r5, #1
    e616:	e7bf      	b.n	e598 <hci_num_completed_packets+0x14>
    e618:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e61a:	b993      	cbnz	r3, e642 <hci_num_completed_packets+0xbe>
    e61c:	f382 8811 	msr	BASEPRI, r2
    e620:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
    e624:	2302      	movs	r3, #2
    e626:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e62a:	481b      	ldr	r0, [pc, #108]	; (e698 <hci_num_completed_packets+0x114>)
    e62c:	f8c7 a014 	str.w	sl, [r7, #20]
    e630:	613b      	str	r3, [r7, #16]
    e632:	f107 0210 	add.w	r2, r7, #16
    e636:	f00f faf6 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    e63a:	4620      	mov	r0, r4
    e63c:	f002 f940 	bl	108c0 <bt_conn_unref>
    e640:	e7e8      	b.n	e614 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e642:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e644:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e646:	428b      	cmp	r3, r1
	list->head = node;
    e648:	6160      	str	r0, [r4, #20]
	list->tail = node;
    e64a:	bf08      	it	eq
    e64c:	61a0      	streq	r0, [r4, #24]
    e64e:	f382 8811 	msr	BASEPRI, r2
    e652:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    e656:	f04f 0220 	mov.w	r2, #32
    e65a:	f3ef 8111 	mrs	r1, BASEPRI
    e65e:	f382 8812 	msr	BASEPRI_MAX, r2
    e662:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    e666:	68da      	ldr	r2, [r3, #12]
    e668:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    e66a:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    e66e:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    e672:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    e674:	b94a      	cbnz	r2, e68a <hci_num_completed_packets+0x106>
	list->head = node;
    e676:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    e67a:	f381 8811 	msr	BASEPRI, r1
    e67e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    e682:	4658      	mov	r0, fp
    e684:	f00b face 	bl	19c24 <k_work_submit>
    e688:	e7ad      	b.n	e5e6 <hci_num_completed_packets+0x62>
	parent->next = child;
    e68a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e68c:	6263      	str	r3, [r4, #36]	; 0x24
}
    e68e:	e7f4      	b.n	e67a <hci_num_completed_packets+0xf6>
    e690:	00022bec 	.word	0x00022bec
    e694:	00022bd0 	.word	0x00022bd0
    e698:	0002083c 	.word	0x0002083c

0000e69c <bt_hci_cmd_state_set_init>:
{
    e69c:	b510      	push	{r4, lr}
	state->bit = bit;
    e69e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    e6a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    e6a6:	460c      	mov	r4, r1
	state->val = val;
    e6a8:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    e6aa:	f004 ffbb 	bl	13624 <net_buf_id>
    e6ae:	220c      	movs	r2, #12
    e6b0:	4b02      	ldr	r3, [pc, #8]	; (e6bc <bt_hci_cmd_state_set_init+0x20>)
    e6b2:	fb02 3300 	mla	r3, r2, r0, r3
    e6b6:	605c      	str	r4, [r3, #4]
}
    e6b8:	bd10      	pop	{r4, pc}
    e6ba:	bf00      	nop
    e6bc:	200097a8 	.word	0x200097a8

0000e6c0 <bt_hci_cmd_create>:
{
    e6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e6c4:	f04f 32ff 	mov.w	r2, #4294967295
    e6c8:	4606      	mov	r6, r0
    e6ca:	f04f 33ff 	mov.w	r3, #4294967295
    e6ce:	481e      	ldr	r0, [pc, #120]	; (e748 <bt_hci_cmd_create+0x88>)
    e6d0:	460f      	mov	r7, r1
    e6d2:	f010 fbbb 	bl	1ee4c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    e6d6:	4604      	mov	r4, r0
    e6d8:	b958      	cbnz	r0, e6f2 <bt_hci_cmd_create+0x32>
    e6da:	491c      	ldr	r1, [pc, #112]	; (e74c <bt_hci_cmd_create+0x8c>)
    e6dc:	481c      	ldr	r0, [pc, #112]	; (e750 <bt_hci_cmd_create+0x90>)
    e6de:	f240 1301 	movw	r3, #257	; 0x101
    e6e2:	4a1c      	ldr	r2, [pc, #112]	; (e754 <bt_hci_cmd_create+0x94>)
    e6e4:	f00e fa01 	bl	1caea <assert_print>
    e6e8:	f240 1101 	movw	r1, #257	; 0x101
    e6ec:	4819      	ldr	r0, [pc, #100]	; (e754 <bt_hci_cmd_create+0x94>)
    e6ee:	f00e f9f5 	bl	1cadc <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e6f2:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    e6f6:	f100 0a08 	add.w	sl, r0, #8
    e6fa:	2101      	movs	r1, #1
    e6fc:	4650      	mov	r0, sl
    e6fe:	f005 f8df 	bl	138c0 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e702:	4620      	mov	r0, r4
    e704:	f884 8014 	strb.w	r8, [r4, #20]
    e708:	f004 ff8c 	bl	13624 <net_buf_id>
    e70c:	f04f 090c 	mov.w	r9, #12
    e710:	4d11      	ldr	r5, [pc, #68]	; (e758 <bt_hci_cmd_create+0x98>)
    e712:	fb09 5000 	mla	r0, r9, r0, r5
    e716:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e718:	4620      	mov	r0, r4
    e71a:	f004 ff83 	bl	13624 <net_buf_id>
    e71e:	fb09 5000 	mla	r0, r9, r0, r5
    e722:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e726:	4620      	mov	r0, r4
    e728:	f004 ff7c 	bl	13624 <net_buf_id>
    e72c:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e730:	2103      	movs	r1, #3
    e732:	4650      	mov	r0, sl
    e734:	f8c5 8004 	str.w	r8, [r5, #4]
    e738:	f005 fb28 	bl	13d8c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    e73c:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    e73e:	7087      	strb	r7, [r0, #2]
}
    e740:	4620      	mov	r0, r4
    e742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e746:	bf00      	nop
    e748:	20008760 	.word	0x20008760
    e74c:	00022980 	.word	0x00022980
    e750:	00021547 	.word	0x00021547
    e754:	00022a93 	.word	0x00022a93
    e758:	200097a8 	.word	0x200097a8

0000e75c <bt_hci_cmd_send_sync>:
{
    e75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e760:	b087      	sub	sp, #28
    e762:	4680      	mov	r8, r0
    e764:	4615      	mov	r5, r2
	if (!buf) {
    e766:	460c      	mov	r4, r1
{
    e768:	af00      	add	r7, sp, #0
	if (!buf) {
    e76a:	b921      	cbnz	r1, e776 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    e76c:	f7ff ffa8 	bl	e6c0 <bt_hci_cmd_create>
		if (!buf) {
    e770:	4604      	mov	r4, r0
    e772:	2800      	cmp	r0, #0
    e774:	d05a      	beq.n	e82c <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e776:	2201      	movs	r2, #1
    e778:	2100      	movs	r1, #0
    e77a:	4638      	mov	r0, r7
    e77c:	f011 fc56 	bl	2002c <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e780:	4620      	mov	r0, r4
    e782:	f004 ff4f 	bl	13624 <net_buf_id>
    e786:	230c      	movs	r3, #12
    e788:	f8df 90a8 	ldr.w	r9, [pc, #168]	; e834 <bt_hci_cmd_send_sync+0xd8>
    e78c:	fb03 9000 	mla	r0, r3, r0, r9
    e790:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    e792:	4620      	mov	r0, r4
    e794:	f005 fa1c 	bl	13bd0 <net_buf_ref>
    e798:	4601      	mov	r1, r0
    e79a:	4827      	ldr	r0, [pc, #156]	; (e838 <bt_hci_cmd_send_sync+0xdc>)
    e79c:	f005 f9a4 	bl	13ae8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e7a0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e7a4:	2300      	movs	r3, #0
    e7a6:	4638      	mov	r0, r7
    e7a8:	f00a ff12 	bl	195d0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e7ac:	4606      	mov	r6, r0
    e7ae:	b180      	cbz	r0, e7d2 <bt_hci_cmd_send_sync+0x76>
    e7b0:	f240 1349 	movw	r3, #329	; 0x149
    e7b4:	4a21      	ldr	r2, [pc, #132]	; (e83c <bt_hci_cmd_send_sync+0xe0>)
    e7b6:	4922      	ldr	r1, [pc, #136]	; (e840 <bt_hci_cmd_send_sync+0xe4>)
    e7b8:	4822      	ldr	r0, [pc, #136]	; (e844 <bt_hci_cmd_send_sync+0xe8>)
    e7ba:	f00e f996 	bl	1caea <assert_print>
    e7be:	4631      	mov	r1, r6
    e7c0:	4821      	ldr	r0, [pc, #132]	; (e848 <bt_hci_cmd_send_sync+0xec>)
    e7c2:	f00e f992 	bl	1caea <assert_print>
    e7c6:	4040      	eors	r0, r0
    e7c8:	f380 8811 	msr	BASEPRI, r0
    e7cc:	f04f 0003 	mov.w	r0, #3
    e7d0:	df02      	svc	2
	status = cmd(buf)->status;
    e7d2:	4620      	mov	r0, r4
    e7d4:	f004 ff26 	bl	13624 <net_buf_id>
    e7d8:	230c      	movs	r3, #12
    e7da:	4358      	muls	r0, r3
    e7dc:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    e7e0:	b1e6      	cbz	r6, e81c <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    e7e2:	466d      	mov	r5, sp
    e7e4:	b088      	sub	sp, #32
    e7e6:	466a      	mov	r2, sp
    e7e8:	4b18      	ldr	r3, [pc, #96]	; (e84c <bt_hci_cmd_send_sync+0xf0>)
    e7ea:	61d6      	str	r6, [r2, #28]
    e7ec:	e9c2 3805 	strd	r3, r8, [r2, #20]
    e7f0:	2304      	movs	r3, #4
    e7f2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    e7f6:	4816      	ldr	r0, [pc, #88]	; (e850 <bt_hci_cmd_send_sync+0xf4>)
    e7f8:	f842 3f10 	str.w	r3, [r2, #16]!
    e7fc:	f00f fa13 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    e800:	4620      	mov	r0, r4
    e802:	46ad      	mov	sp, r5
    e804:	f005 f9a0 	bl	13b48 <net_buf_unref>
			return -ECONNREFUSED;
    e808:	2e09      	cmp	r6, #9
    e80a:	bf14      	ite	ne
    e80c:	f06f 0004 	mvnne.w	r0, #4
    e810:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    e814:	371c      	adds	r7, #28
    e816:	46bd      	mov	sp, r7
    e818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    e81c:	b115      	cbz	r5, e824 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
    e81e:	602c      	str	r4, [r5, #0]
	return 0;
    e820:	2000      	movs	r0, #0
    e822:	e7f7      	b.n	e814 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
    e824:	4620      	mov	r0, r4
    e826:	f005 f98f 	bl	13b48 <net_buf_unref>
    e82a:	e7f9      	b.n	e820 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
    e82c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e830:	e7f0      	b.n	e814 <bt_hci_cmd_send_sync+0xb8>
    e832:	bf00      	nop
    e834:	200097a8 	.word	0x200097a8
    e838:	2000813c 	.word	0x2000813c
    e83c:	00022a93 	.word	0x00022a93
    e840:	00021a50 	.word	0x00021a50
    e844:	00021547 	.word	0x00021547
    e848:	00022c03 	.word	0x00022c03
    e84c:	00022c23 	.word	0x00022c23
    e850:	0002083c 	.word	0x0002083c

0000e854 <hci_le_read_max_data_len>:
{
    e854:	b570      	push	{r4, r5, r6, lr}
    e856:	b088      	sub	sp, #32
    e858:	4606      	mov	r6, r0
    e85a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    e85c:	f242 002f 	movw	r0, #8239	; 0x202f
    e860:	2100      	movs	r1, #0
    e862:	aa01      	add	r2, sp, #4
    e864:	f7ff ff7a 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    e868:	4604      	mov	r4, r0
    e86a:	b160      	cbz	r0, e886 <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
    e86c:	4b0b      	ldr	r3, [pc, #44]	; (e89c <hci_le_read_max_data_len+0x48>)
    e86e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e872:	9307      	str	r3, [sp, #28]
    e874:	2302      	movs	r3, #2
    e876:	480a      	ldr	r0, [pc, #40]	; (e8a0 <hci_le_read_max_data_len+0x4c>)
    e878:	aa06      	add	r2, sp, #24
    e87a:	9306      	str	r3, [sp, #24]
    e87c:	f00f f9d3 	bl	1dc26 <z_log_msg_static_create.constprop.0>
}
    e880:	4620      	mov	r0, r4
    e882:	b008      	add	sp, #32
    e884:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e886:	9801      	ldr	r0, [sp, #4]
    e888:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    e88a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e88e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    e890:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    e894:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    e896:	f005 f957 	bl	13b48 <net_buf_unref>
	return 0;
    e89a:	e7f1      	b.n	e880 <hci_le_read_max_data_len+0x2c>
    e89c:	00022c3f 	.word	0x00022c3f
    e8a0:	0002083c 	.word	0x0002083c

0000e8a4 <bt_hci_le_rand>:
{
    e8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e8a6:	4b14      	ldr	r3, [pc, #80]	; (e8f8 <bt_hci_le_rand+0x54>)
{
    e8a8:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e8aa:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
    e8ae:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	da1d      	bge.n	e8f0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    e8b4:	b914      	cbnz	r4, e8bc <bt_hci_le_rand+0x18>
	return 0;
    e8b6:	4620      	mov	r0, r4
}
    e8b8:	b003      	add	sp, #12
    e8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    e8bc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e8be:	f04f 0100 	mov.w	r1, #0
    e8c2:	f242 0018 	movw	r0, #8216	; 0x2018
    e8c6:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    e8c8:	4626      	mov	r6, r4
    e8ca:	bf28      	it	cs
    e8cc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e8ce:	f7ff ff45 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    e8d2:	2800      	cmp	r0, #0
    e8d4:	d1f0      	bne.n	e8b8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    e8d6:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    e8d8:	4632      	mov	r2, r6
    e8da:	68b9      	ldr	r1, [r7, #8]
    e8dc:	4628      	mov	r0, r5
    e8de:	3101      	adds	r1, #1
    e8e0:	f00f f912 	bl	1db08 <memcpy>
		net_buf_unref(rsp);
    e8e4:	4638      	mov	r0, r7
    e8e6:	f005 f92f 	bl	13b48 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    e8ea:	4435      	add	r5, r6
		len -= count;
    e8ec:	1ba4      	subs	r4, r4, r6
    e8ee:	e7e1      	b.n	e8b4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    e8f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e8f4:	e7e0      	b.n	e8b8 <bt_hci_le_rand+0x14>
    e8f6:	bf00      	nop
    e8f8:	20008000 	.word	0x20008000

0000e8fc <bt_hci_le_enh_conn_complete>:
{
    e8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e900:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e902:	f8b0 9001 	ldrh.w	r9, [r0, #1]
    e906:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
    e908:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    e90c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    e910:	4aa9      	ldr	r2, [pc, #676]	; (ebb8 <bt_hci_le_enh_conn_complete+0x2bc>)
    e912:	b29b      	uxth	r3, r3
    e914:	8811      	ldrh	r1, [r2, #0]
{
    e916:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
    e918:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
    e91a:	bf08      	it	eq
    e91c:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
    e91e:	7804      	ldrb	r4, [r0, #0]
			return true;
    e920:	bf08      	it	eq
    e922:	2601      	moveq	r6, #1
{
    e924:	af02      	add	r7, sp, #8
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e926:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
    e92a:	b3a4      	cbz	r4, e996 <bt_hci_le_enh_conn_complete+0x9a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e92c:	2c3c      	cmp	r4, #60	; 0x3c
    e92e:	d122      	bne.n	e976 <bt_hci_le_enh_conn_complete+0x7a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    e930:	f001 fa0e 	bl	fd50 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e934:	f06f 0180 	mvn.w	r1, #128	; 0x80
    e938:	3010      	adds	r0, #16
    e93a:	f00f f977 	bl	1dc2c <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    e93e:	2000      	movs	r0, #0
    e940:	f7ff fac2 	bl	dec8 <find_pending_connect.part.0>
		if (!conn) {
    e944:	4605      	mov	r5, r0
    e946:	b970      	cbnz	r0, e966 <bt_hci_le_enh_conn_complete+0x6a>
			BT_ERR("No pending peripheral connection");
    e948:	4b9c      	ldr	r3, [pc, #624]	; (ebbc <bt_hci_le_enh_conn_complete+0x2c0>)
    e94a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e94e:	627b      	str	r3, [r7, #36]	; 0x24
    e950:	2302      	movs	r3, #2
    e952:	489b      	ldr	r0, [pc, #620]	; (ebc0 <bt_hci_le_enh_conn_complete+0x2c4>)
    e954:	623b      	str	r3, [r7, #32]
    e956:	f107 0220 	add.w	r2, r7, #32
    e95a:	f00f f964 	bl	1dc26 <z_log_msg_static_create.constprop.0>
}
    e95e:	372c      	adds	r7, #44	; 0x2c
    e960:	46bd      	mov	sp, r7
    e962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    e966:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e968:	2100      	movs	r1, #0
    e96a:	f001 ffe1 	bl	10930 <bt_conn_set_state>
		bt_conn_unref(conn);
    e96e:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    e970:	f001 ffa6 	bl	108c0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e974:	e7f3      	b.n	e95e <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    e976:	466d      	mov	r5, sp
    e978:	b088      	sub	sp, #32
    e97a:	aa02      	add	r2, sp, #8
    e97c:	4b91      	ldr	r3, [pc, #580]	; (ebc4 <bt_hci_le_enh_conn_complete+0x2c8>)
    e97e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e982:	e9c2 3405 	strd	r3, r4, [r2, #20]
    e986:	2303      	movs	r3, #3
    e988:	488d      	ldr	r0, [pc, #564]	; (ebc0 <bt_hci_le_enh_conn_complete+0x2c4>)
    e98a:	f842 3f10 	str.w	r3, [r2, #16]!
    e98e:	f00f f94a 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    e992:	46ad      	mov	sp, r5
		return;
    e994:	e7e3      	b.n	e95e <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e996:	7903      	ldrb	r3, [r0, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    e998:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e99c:	3b02      	subs	r3, #2
    e99e:	2b01      	cmp	r3, #1
    e9a0:	d82d      	bhi.n	e9fe <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    e9a2:	4651      	mov	r1, sl
    e9a4:	f107 0010 	add.w	r0, r7, #16
    e9a8:	f00f f92f 	bl	1dc0a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    e9ac:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
    e9ae:	2206      	movs	r2, #6
    e9b0:	3b02      	subs	r3, #2
    e9b2:	743b      	strb	r3, [r7, #16]
    e9b4:	f105 0111 	add.w	r1, r5, #17
    e9b8:	f107 0009 	add.w	r0, r7, #9
    e9bc:	f00f f8a4 	bl	1db08 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    e9c0:	2301      	movs	r3, #1
    e9c2:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    e9c4:	78eb      	ldrb	r3, [r5, #3]
    e9c6:	2b01      	cmp	r3, #1
    e9c8:	d02e      	beq.n	ea28 <bt_hci_le_enh_conn_complete+0x12c>
		BT_ERR("No pending conn for peer %s",
    e9ca:	4650      	mov	r0, sl
    e9cc:	f7ff f94e 	bl	dc6c <bt_addr_le_str>
    e9d0:	466c      	mov	r4, sp
    e9d2:	b088      	sub	sp, #32
    e9d4:	aa02      	add	r2, sp, #8
    e9d6:	4b7c      	ldr	r3, [pc, #496]	; (ebc8 <bt_hci_le_enh_conn_complete+0x2cc>)
    e9d8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    e9dc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e9e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    e9e4:	8393      	strh	r3, [r2, #28]
    e9e6:	4b79      	ldr	r3, [pc, #484]	; (ebcc <bt_hci_le_enh_conn_complete+0x2d0>)
    e9e8:	4875      	ldr	r0, [pc, #468]	; (ebc0 <bt_hci_le_enh_conn_complete+0x2c4>)
    e9ea:	f842 3f10 	str.w	r3, [r2, #16]!
    e9ee:	f00f f91a 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    e9f2:	211f      	movs	r1, #31
    e9f4:	46a5      	mov	sp, r4
    e9f6:	4640      	mov	r0, r8
    e9f8:	f00f f920 	bl	1dc3c <bt_hci_disconnect>
		return;
    e9fc:	e7af      	b.n	e95e <bt_hci_le_enh_conn_complete+0x62>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    e9fe:	78c3      	ldrb	r3, [r0, #3]
		bt_addr_le_copy(&id_addr,
    ea00:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    ea02:	2b01      	cmp	r3, #1
    ea04:	bf04      	itt	eq
    ea06:	4b72      	ldreq	r3, [pc, #456]	; (ebd0 <bt_hci_le_enh_conn_complete+0x2d4>)
    ea08:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    ea0c:	4620      	mov	r0, r4
    ea0e:	f00f f9c4 	bl	1dd9a <bt_lookup_id_addr>
    ea12:	4601      	mov	r1, r0
    ea14:	f107 0010 	add.w	r0, r7, #16
    ea18:	f00f f8f7 	bl	1dc0a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    ea1c:	4651      	mov	r1, sl
    ea1e:	f107 0008 	add.w	r0, r7, #8
    ea22:	f00f f8f2 	bl	1dc0a <bt_addr_le_copy>
    ea26:	e7cd      	b.n	e9c4 <bt_hci_le_enh_conn_complete+0xc8>
    ea28:	f107 0010 	add.w	r0, r7, #16
    ea2c:	f7ff fa4c 	bl	dec8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ea30:	78eb      	ldrb	r3, [r5, #3]
    ea32:	4604      	mov	r4, r0
    ea34:	2b01      	cmp	r3, #1
    ea36:	d10a      	bne.n	ea4e <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    ea38:	f001 f98a 	bl	fd50 <bt_le_adv_lookup_legacy>
    ea3c:	4683      	mov	fp, r0
    ea3e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    ea42:	3010      	adds	r0, #16
    ea44:	f00f f8f2 	bl	1dc2c <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    ea48:	4658      	mov	r0, fp
    ea4a:	f00f faa5 	bl	1df98 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    ea4e:	2c00      	cmp	r4, #0
    ea50:	d0bb      	beq.n	e9ca <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
    ea52:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ea54:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
    ea58:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ea5c:	f00f f8d5 	bl	1dc0a <bt_addr_le_copy>
	conn->err = 0U;
    ea60:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    ea62:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    ea66:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    ea6a:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    ea6e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ea72:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    ea76:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
    ea7a:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    ea7c:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ea7e:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    ea80:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ea82:	d116      	bne.n	eab2 <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    ea84:	f107 0108 	add.w	r1, r7, #8
    ea88:	f104 0097 	add.w	r0, r4, #151	; 0x97
    ea8c:	f00f f8bd 	bl	1dc0a <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    ea90:	f001 f95e 	bl	fd50 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    ea94:	7a21      	ldrb	r1, [r4, #8]
    ea96:	4d4e      	ldr	r5, [pc, #312]	; (ebd0 <bt_hci_le_enh_conn_complete+0x2d4>)
    ea98:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    ea9c:	4429      	add	r1, r5
    ea9e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    eaa2:	f00f f8b2 	bl	1dc0a <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    eaa6:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    eaaa:	065d      	lsls	r5, r3, #25
    eaac:	d501      	bpl.n	eab2 <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
    eaae:	f001 fb19 	bl	100e4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    eab2:	2107      	movs	r1, #7
    eab4:	4620      	mov	r0, r4
    eab6:	f001 ff3b 	bl	10930 <bt_conn_set_state>
	if (is_disconnected) {
    eaba:	b11e      	cbz	r6, eac4 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    eabc:	2101      	movs	r1, #1
    eabe:	4620      	mov	r0, r4
    eac0:	f001 ff36 	bl	10930 <bt_conn_set_state>
	bt_conn_connected(conn);
    eac4:	4620      	mov	r0, r4
    eac6:	f00f fa9b 	bl	1e000 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    eaca:	7aa3      	ldrb	r3, [r4, #10]
    eacc:	2b07      	cmp	r3, #7
    eace:	d16e      	bne.n	ebae <bt_hci_le_enh_conn_complete+0x2b2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ead0:	1d23      	adds	r3, r4, #4
    ead2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    ead6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    eada:	4d3d      	ldr	r5, [pc, #244]	; (ebd0 <bt_hci_le_enh_conn_complete+0x2d4>)
    eadc:	d129      	bne.n	eb32 <bt_hci_le_enh_conn_complete+0x236>
    eade:	78e3      	ldrb	r3, [r4, #3]
    eae0:	b11b      	cbz	r3, eaea <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    eae2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    eae6:	0718      	lsls	r0, r3, #28
    eae8:	d523      	bpl.n	eb32 <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    eaea:	2102      	movs	r1, #2
    eaec:	f242 0016 	movw	r0, #8214	; 0x2016
    eaf0:	f7ff fde6 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    eaf4:	4606      	mov	r6, r0
    eaf6:	2800      	cmp	r0, #0
    eaf8:	d05b      	beq.n	ebb2 <bt_hci_le_enh_conn_complete+0x2b6>
    eafa:	2102      	movs	r1, #2
    eafc:	3008      	adds	r0, #8
    eafe:	f005 f945 	bl	13d8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    eb02:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    eb04:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    eb06:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    eb08:	4631      	mov	r1, r6
    eb0a:	f242 0016 	movw	r0, #8214	; 0x2016
    eb0e:	f7ff fe25 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    eb12:	b170      	cbz	r0, eb32 <bt_hci_le_enh_conn_complete+0x236>
			BT_ERR("Failed read remote features (%d)", err);
    eb14:	466e      	mov	r6, sp
    eb16:	b088      	sub	sp, #32
    eb18:	aa02      	add	r2, sp, #8
    eb1a:	4b2e      	ldr	r3, [pc, #184]	; (ebd4 <bt_hci_le_enh_conn_complete+0x2d8>)
    eb1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eb20:	e9c2 3005 	strd	r3, r0, [r2, #20]
    eb24:	2303      	movs	r3, #3
    eb26:	4826      	ldr	r0, [pc, #152]	; (ebc0 <bt_hci_le_enh_conn_complete+0x2c4>)
    eb28:	f842 3f10 	str.w	r3, [r2, #16]!
    eb2c:	f00f f87b 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    eb30:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    eb32:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    eb36:	07d9      	lsls	r1, r3, #31
    eb38:	d516      	bpl.n	eb68 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    eb3a:	2100      	movs	r1, #0
    eb3c:	2302      	movs	r3, #2
    eb3e:	4620      	mov	r0, r4
    eb40:	461a      	mov	r2, r3
    eb42:	9100      	str	r1, [sp, #0]
    eb44:	f00f f8b3 	bl	1dcae <bt_le_set_phy>
		if (err) {
    eb48:	b170      	cbz	r0, eb68 <bt_hci_le_enh_conn_complete+0x26c>
			BT_ERR("Failed LE Set PHY (%d)", err);
    eb4a:	466e      	mov	r6, sp
    eb4c:	b088      	sub	sp, #32
    eb4e:	aa02      	add	r2, sp, #8
    eb50:	4b21      	ldr	r3, [pc, #132]	; (ebd8 <bt_hci_le_enh_conn_complete+0x2dc>)
    eb52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eb56:	e9c2 3005 	strd	r3, r0, [r2, #20]
    eb5a:	2303      	movs	r3, #3
    eb5c:	4818      	ldr	r0, [pc, #96]	; (ebc0 <bt_hci_le_enh_conn_complete+0x2c4>)
    eb5e:	f842 3f10 	str.w	r3, [r2, #16]!
    eb62:	f00f f860 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    eb66:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    eb68:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    eb6c:	069a      	lsls	r2, r3, #26
    eb6e:	d51e      	bpl.n	ebae <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    eb70:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    eb74:	689b      	ldr	r3, [r3, #8]
    eb76:	079b      	lsls	r3, r3, #30
    eb78:	d519      	bpl.n	ebae <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    eb7a:	1db9      	adds	r1, r7, #6
    eb7c:	1d38      	adds	r0, r7, #4
    eb7e:	f7ff fe69 	bl	e854 <hci_le_read_max_data_len>
			if (!err) {
    eb82:	b9a0      	cbnz	r0, ebae <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
    eb84:	4620      	mov	r0, r4
    eb86:	88fa      	ldrh	r2, [r7, #6]
    eb88:	88b9      	ldrh	r1, [r7, #4]
    eb8a:	f00f f872 	bl	1dc72 <bt_le_set_data_len>
				if (err) {
    eb8e:	b170      	cbz	r0, ebae <bt_hci_le_enh_conn_complete+0x2b2>
					BT_ERR("Failed to set data len (%d)", err);
    eb90:	466d      	mov	r5, sp
    eb92:	b088      	sub	sp, #32
    eb94:	aa02      	add	r2, sp, #8
    eb96:	4b11      	ldr	r3, [pc, #68]	; (ebdc <bt_hci_le_enh_conn_complete+0x2e0>)
    eb98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eb9c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    eba0:	2303      	movs	r3, #3
    eba2:	4807      	ldr	r0, [pc, #28]	; (ebc0 <bt_hci_le_enh_conn_complete+0x2c4>)
    eba4:	f842 3f10 	str.w	r3, [r2, #16]!
    eba8:	f00f f83d 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    ebac:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    ebae:	4620      	mov	r0, r4
    ebb0:	e6de      	b.n	e970 <bt_hci_le_enh_conn_complete+0x74>
		return -ENOBUFS;
    ebb2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ebb6:	e7ad      	b.n	eb14 <bt_hci_le_enh_conn_complete+0x218>
    ebb8:	20009c58 	.word	0x20009c58
    ebbc:	00022c5f 	.word	0x00022c5f
    ebc0:	0002083c 	.word	0x0002083c
    ebc4:	00022c80 	.word	0x00022c80
    ebc8:	00022c99 	.word	0x00022c99
    ebcc:	01000003 	.word	0x01000003
    ebd0:	20008000 	.word	0x20008000
    ebd4:	00022cb5 	.word	0x00022cb5
    ebd8:	00022cd6 	.word	0x00022cd6
    ebdc:	00022ced 	.word	0x00022ced

0000ebe0 <le_legacy_conn_complete>:
{
    ebe0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    ebe2:	6881      	ldr	r1, [r0, #8]
{
    ebe4:	b088      	sub	sp, #32
	enh.status         = evt->status;
    ebe6:	780b      	ldrb	r3, [r1, #0]
    ebe8:	4c16      	ldr	r4, [pc, #88]	; (ec44 <le_legacy_conn_complete+0x64>)
    ebea:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    ebee:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    ebf2:	a801      	add	r0, sp, #4
	enh.handle         = evt->handle;
    ebf4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    ebf8:	78cb      	ldrb	r3, [r1, #3]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    ebfa:	3104      	adds	r1, #4
	enh.role           = evt->role;
    ebfc:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    ec00:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    ec04:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    ec08:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    ec0c:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    ec10:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    ec14:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    ec18:	7b4b      	ldrb	r3, [r1, #13]
    ec1a:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    ec1e:	f00e fff4 	bl	1dc0a <bt_addr_le_copy>
    ec22:	4621      	mov	r1, r4
    ec24:	2206      	movs	r2, #6
    ec26:	f10d 000b 	add.w	r0, sp, #11
    ec2a:	f00e ff6d 	bl	1db08 <memcpy>
    ec2e:	2206      	movs	r2, #6
    ec30:	4621      	mov	r1, r4
    ec32:	f10d 0011 	add.w	r0, sp, #17
    ec36:	f00e ff67 	bl	1db08 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    ec3a:	4668      	mov	r0, sp
    ec3c:	f7ff fe5e 	bl	e8fc <bt_hci_le_enh_conn_complete>
}
    ec40:	b008      	add	sp, #32
    ec42:	bd10      	pop	{r4, pc}
    ec44:	00022873 	.word	0x00022873

0000ec48 <bt_send>:
	return bt_dev.drv->send(buf);
    ec48:	4b02      	ldr	r3, [pc, #8]	; (ec54 <bt_send+0xc>)
    ec4a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    ec4e:	695b      	ldr	r3, [r3, #20]
    ec50:	4718      	bx	r3
    ec52:	bf00      	nop
    ec54:	20008000 	.word	0x20008000

0000ec58 <bt_hci_cmd_send>:
{
    ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec5a:	4605      	mov	r5, r0
	if (!buf) {
    ec5c:	460c      	mov	r4, r1
{
    ec5e:	af00      	add	r7, sp, #0
	if (!buf) {
    ec60:	b919      	cbnz	r1, ec6a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    ec62:	f7ff fd2d 	bl	e6c0 <bt_hci_cmd_create>
		if (!buf) {
    ec66:	4604      	mov	r4, r0
    ec68:	b318      	cbz	r0, ecb2 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    ec6a:	f640 4335 	movw	r3, #3125	; 0xc35
    ec6e:	429d      	cmp	r5, r3
    ec70:	d119      	bne.n	eca6 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
    ec72:	4620      	mov	r0, r4
    ec74:	f7ff ffe8 	bl	ec48 <bt_send>
		if (err) {
    ec78:	4605      	mov	r5, r0
    ec7a:	b188      	cbz	r0, eca0 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
    ec7c:	466e      	mov	r6, sp
    ec7e:	b088      	sub	sp, #32
    ec80:	466a      	mov	r2, sp
    ec82:	4b0d      	ldr	r3, [pc, #52]	; (ecb8 <bt_hci_cmd_send+0x60>)
    ec84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ec88:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ec8c:	2303      	movs	r3, #3
    ec8e:	480b      	ldr	r0, [pc, #44]	; (ecbc <bt_hci_cmd_send+0x64>)
    ec90:	f842 3f10 	str.w	r3, [r2, #16]!
    ec94:	f00e ffc7 	bl	1dc26 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    ec98:	4620      	mov	r0, r4
    ec9a:	46b5      	mov	sp, r6
    ec9c:	f004 ff54 	bl	13b48 <net_buf_unref>
}
    eca0:	4628      	mov	r0, r5
    eca2:	46bd      	mov	sp, r7
    eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    eca6:	4621      	mov	r1, r4
    eca8:	4805      	ldr	r0, [pc, #20]	; (ecc0 <bt_hci_cmd_send+0x68>)
    ecaa:	f004 ff1d 	bl	13ae8 <net_buf_put>
	return 0;
    ecae:	2500      	movs	r5, #0
    ecb0:	e7f6      	b.n	eca0 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    ecb2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    ecb6:	e7f3      	b.n	eca0 <bt_hci_cmd_send+0x48>
    ecb8:	00022d09 	.word	0x00022d09
    ecbc:	0002083c 	.word	0x0002083c
    ecc0:	2000813c 	.word	0x2000813c

0000ecc4 <bt_hci_host_num_completed_packets>:
{
    ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecc8:	b086      	sub	sp, #24
    ecca:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    eccc:	8ac5      	ldrh	r5, [r0, #22]
	uint8_t index = acl(buf)->index;
    ecce:	7d46      	ldrb	r6, [r0, #21]
{
    ecd0:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ecd2:	7980      	ldrb	r0, [r0, #6]
    ecd4:	f004 fc9e 	bl	13614 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    ecd8:	4621      	mov	r1, r4
    ecda:	f011 f99d 	bl	20018 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    ecde:	4b2d      	ldr	r3, [pc, #180]	; (ed94 <bt_hci_host_num_completed_packets+0xd0>)
    ece0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    ece4:	069b      	lsls	r3, r3, #26
    ece6:	d513      	bpl.n	ed10 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
    ece8:	4630      	mov	r0, r6
    ecea:	f002 f9fd 	bl	110e8 <bt_conn_lookup_index>
	if (!conn) {
    ecee:	4604      	mov	r4, r0
    ecf0:	b990      	cbnz	r0, ed18 <bt_hci_host_num_completed_packets+0x54>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
    ecf2:	466c      	mov	r4, sp
    ecf4:	b088      	sub	sp, #32
    ecf6:	466a      	mov	r2, sp
    ecf8:	4b27      	ldr	r3, [pc, #156]	; (ed98 <bt_hci_host_num_completed_packets+0xd4>)
    ecfa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ecfe:	e9c2 3605 	strd	r3, r6, [r2, #20]
    ed02:	2303      	movs	r3, #3
    ed04:	4825      	ldr	r0, [pc, #148]	; (ed9c <bt_hci_host_num_completed_packets+0xd8>)
    ed06:	f842 3f10 	str.w	r3, [r2, #16]!
    ed0a:	f00e ff8c 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    ed0e:	46a5      	mov	sp, r4
}
    ed10:	3718      	adds	r7, #24
    ed12:	46bd      	mov	sp, r7
    ed14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
    ed18:	7a83      	ldrb	r3, [r0, #10]
    ed1a:	3b07      	subs	r3, #7
    ed1c:	2b01      	cmp	r3, #1
    ed1e:	d90e      	bls.n	ed3e <bt_hci_host_num_completed_packets+0x7a>
		BT_WARN("Not reporting packet for non-connected conn");
    ed20:	4b1f      	ldr	r3, [pc, #124]	; (eda0 <bt_hci_host_num_completed_packets+0xdc>)
    ed22:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ed26:	617b      	str	r3, [r7, #20]
    ed28:	2302      	movs	r3, #2
    ed2a:	481c      	ldr	r0, [pc, #112]	; (ed9c <bt_hci_host_num_completed_packets+0xd8>)
    ed2c:	613b      	str	r3, [r7, #16]
    ed2e:	f107 0210 	add.w	r2, r7, #16
    ed32:	f00e ff78 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    ed36:	4620      	mov	r0, r4
    ed38:	f001 fdc2 	bl	108c0 <bt_conn_unref>
		return;
    ed3c:	e7e8      	b.n	ed10 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
    ed3e:	f001 fdbf 	bl	108c0 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ed42:	2105      	movs	r1, #5
    ed44:	f640 4035 	movw	r0, #3125	; 0xc35
    ed48:	f7ff fcba 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    ed4c:	4604      	mov	r4, r0
    ed4e:	b958      	cbnz	r0, ed68 <bt_hci_host_num_completed_packets+0xa4>
		BT_ERR("Unable to allocate new HCI command");
    ed50:	4b14      	ldr	r3, [pc, #80]	; (eda4 <bt_hci_host_num_completed_packets+0xe0>)
    ed52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ed56:	617b      	str	r3, [r7, #20]
    ed58:	2302      	movs	r3, #2
    ed5a:	4810      	ldr	r0, [pc, #64]	; (ed9c <bt_hci_host_num_completed_packets+0xd8>)
    ed5c:	613b      	str	r3, [r7, #16]
    ed5e:	f107 0210 	add.w	r2, r7, #16
    ed62:	f00e ff60 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		return;
    ed66:	e7d3      	b.n	ed10 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
    ed68:	f100 0808 	add.w	r8, r0, #8
    ed6c:	2101      	movs	r1, #1
    ed6e:	4640      	mov	r0, r8
    ed70:	f005 f80c 	bl	13d8c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    ed74:	2601      	movs	r6, #1
    ed76:	2104      	movs	r1, #4
    ed78:	7006      	strb	r6, [r0, #0]
    ed7a:	4640      	mov	r0, r8
    ed7c:	f005 f806 	bl	13d8c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    ed80:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    ed82:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    ed84:	7086      	strb	r6, [r0, #2]
    ed86:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ed88:	4621      	mov	r1, r4
    ed8a:	f640 4035 	movw	r0, #3125	; 0xc35
    ed8e:	f7ff ff63 	bl	ec58 <bt_hci_cmd_send>
    ed92:	e7bd      	b.n	ed10 <bt_hci_host_num_completed_packets+0x4c>
    ed94:	20008000 	.word	0x20008000
    ed98:	00022d2b 	.word	0x00022d2b
    ed9c:	0002083c 	.word	0x0002083c
    eda0:	00022d54 	.word	0x00022d54
    eda4:	00022d80 	.word	0x00022d80

0000eda8 <le_conn_param_req>:
{
    eda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    edac:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    edae:	6883      	ldr	r3, [r0, #8]
{
    edb0:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    edb2:	78d9      	ldrb	r1, [r3, #3]
    edb4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    edb6:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    edba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    edbe:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    edc0:	7959      	ldrb	r1, [r3, #5]
    edc2:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    edc4:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    edc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    edcc:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    edce:	799a      	ldrb	r2, [r3, #6]
    edd0:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    edd2:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    edd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    edd8:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    edda:	7a1a      	ldrb	r2, [r3, #8]
    eddc:	7a5b      	ldrb	r3, [r3, #9]
    edde:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ede2:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    ede4:	f001 fd9c 	bl	10920 <bt_conn_lookup_handle>
	if (!conn) {
    ede8:	4606      	mov	r6, r0
    edea:	b9b0      	cbnz	r0, ee1a <le_conn_param_req+0x72>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    edec:	466d      	mov	r5, sp
    edee:	b088      	sub	sp, #32
    edf0:	466a      	mov	r2, sp
    edf2:	4b20      	ldr	r3, [pc, #128]	; (ee74 <le_conn_param_req+0xcc>)
    edf4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    edf8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    edfc:	2303      	movs	r3, #3
    edfe:	481e      	ldr	r0, [pc, #120]	; (ee78 <le_conn_param_req+0xd0>)
    ee00:	f842 3f10 	str.w	r3, [r2, #16]!
    ee04:	f00e ff0f 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    ee08:	2102      	movs	r1, #2
    ee0a:	46ad      	mov	sp, r5
    ee0c:	4620      	mov	r0, r4
    ee0e:	f00e ff9a 	bl	1dd46 <le_conn_param_neg_reply>
}
    ee12:	3708      	adds	r7, #8
    ee14:	46bd      	mov	sp, r7
    ee16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    ee1a:	4639      	mov	r1, r7
    ee1c:	f001 ff38 	bl	10c90 <le_param_req>
    ee20:	b938      	cbnz	r0, ee32 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    ee22:	211e      	movs	r1, #30
    ee24:	4620      	mov	r0, r4
    ee26:	f00e ff8e 	bl	1dd46 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    ee2a:	4630      	mov	r0, r6
    ee2c:	f001 fd48 	bl	108c0 <bt_conn_unref>
    ee30:	e7ef      	b.n	ee12 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    ee32:	210e      	movs	r1, #14
    ee34:	f242 0020 	movw	r0, #8224	; 0x2020
    ee38:	f7ff fc42 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    ee3c:	4605      	mov	r5, r0
    ee3e:	2800      	cmp	r0, #0
    ee40:	d0f3      	beq.n	ee2a <le_conn_param_req+0x82>
    ee42:	210e      	movs	r1, #14
    ee44:	3008      	adds	r0, #8
    ee46:	f004 ffa1 	bl	13d8c <net_buf_simple_add>
    ee4a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    ee4c:	220e      	movs	r2, #14
    ee4e:	2100      	movs	r1, #0
    ee50:	f00e fe65 	bl	1db1e <memset>
	cp->handle = sys_cpu_to_le16(handle);
    ee54:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ee58:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ee5a:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ee5c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ee5e:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ee60:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ee64:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ee66:	88bb      	ldrh	r3, [r7, #4]
    ee68:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    ee6a:	88fb      	ldrh	r3, [r7, #6]
    ee6c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ee6e:	f7ff fef3 	bl	ec58 <bt_hci_cmd_send>
    ee72:	e7da      	b.n	ee2a <le_conn_param_req+0x82>
    ee74:	000229c6 	.word	0x000229c6
    ee78:	0002083c 	.word	0x0002083c

0000ee7c <hci_tx_thread>:
{
    ee7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    ee80:	f8df 8154 	ldr.w	r8, [pc, #340]	; efd8 <hci_tx_thread+0x15c>
{
    ee84:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
    ee86:	f8df 9154 	ldr.w	r9, [pc, #340]	; efdc <hci_tx_thread+0x160>
{
    ee8a:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    ee8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ee90:	4853      	ldr	r0, [pc, #332]	; (efe0 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
    ee92:	f36f 3394 	bfc	r3, #14, #7
    ee96:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ee9a:	f001 fcaf 	bl	107fc <bt_conn_prepare_events>
    ee9e:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    eea0:	f04f 32ff 	mov.w	r2, #4294967295
    eea4:	f04f 33ff 	mov.w	r3, #4294967295
    eea8:	4629      	mov	r1, r5
    eeaa:	484b      	ldr	r0, [pc, #300]	; (efd8 <hci_tx_thread+0x15c>)
    eeac:	f00d f9be 	bl	1c22c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    eeb0:	b160      	cbz	r0, eecc <hci_tx_thread+0x50>
    eeb2:	f640 13da 	movw	r3, #2522	; 0x9da
    eeb6:	464a      	mov	r2, r9
    eeb8:	494a      	ldr	r1, [pc, #296]	; (efe4 <hci_tx_thread+0x168>)
    eeba:	484b      	ldr	r0, [pc, #300]	; (efe8 <hci_tx_thread+0x16c>)
    eebc:	f00d fe15 	bl	1caea <assert_print>
    eec0:	4040      	eors	r0, r0
    eec2:	f380 8811 	msr	BASEPRI, r0
    eec6:	f04f 0003 	mov.w	r0, #3
    eeca:	df02      	svc	2
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    eecc:	f04f 0a03 	mov.w	sl, #3
{
    eed0:	4e41      	ldr	r6, [pc, #260]	; (efd8 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
    eed2:	b915      	cbnz	r5, eeda <hci_tx_thread+0x5e>
	z_impl_k_yield();
    eed4:	f00c f8f2 	bl	1b0bc <z_impl_k_yield>
	while (1) {
    eed8:	e7d8      	b.n	ee8c <hci_tx_thread+0x10>
		switch (ev->state) {
    eeda:	68f3      	ldr	r3, [r6, #12]
    eedc:	f3c3 3386 	ubfx	r3, r3, #14, #7
    eee0:	2b01      	cmp	r3, #1
    eee2:	d960      	bls.n	efa6 <hci_tx_thread+0x12a>
    eee4:	2b04      	cmp	r3, #4
    eee6:	d168      	bne.n	efba <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    eee8:	7b33      	ldrb	r3, [r6, #12]
    eeea:	2b00      	cmp	r3, #0
    eeec:	d15e      	bne.n	efac <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    eeee:	2200      	movs	r2, #0
    eef0:	2300      	movs	r3, #0
    eef2:	483e      	ldr	r0, [pc, #248]	; (efec <hci_tx_thread+0x170>)
    eef4:	f004 fcb6 	bl	13864 <net_buf_get>
	BT_ASSERT(buf);
    eef8:	4604      	mov	r4, r0
    eefa:	b960      	cbnz	r0, ef16 <hci_tx_thread+0x9a>
    eefc:	f640 1373 	movw	r3, #2419	; 0x973
    ef00:	464a      	mov	r2, r9
    ef02:	493b      	ldr	r1, [pc, #236]	; (eff0 <hci_tx_thread+0x174>)
    ef04:	4838      	ldr	r0, [pc, #224]	; (efe8 <hci_tx_thread+0x16c>)
    ef06:	f00d fdf0 	bl	1caea <assert_print>
    ef0a:	4040      	eors	r0, r0
    ef0c:	f380 8811 	msr	BASEPRI, r0
    ef10:	f04f 0003 	mov.w	r0, #3
    ef14:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    ef16:	f8df b0dc 	ldr.w	fp, [pc, #220]	; eff4 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
    ef1a:	f04f 33ff 	mov.w	r3, #4294967295
    ef1e:	f04f 32ff 	mov.w	r2, #4294967295
    ef22:	4835      	ldr	r0, [pc, #212]	; (eff8 <hci_tx_thread+0x17c>)
    ef24:	f00a fb54 	bl	195d0 <z_impl_k_sem_take>
    ef28:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
    ef2c:	b18b      	cbz	r3, ef52 <hci_tx_thread+0xd6>
		BT_ERR("Uncleared pending sent_cmd");
    ef2e:	4b33      	ldr	r3, [pc, #204]	; (effc <hci_tx_thread+0x180>)
    ef30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef34:	617b      	str	r3, [r7, #20]
    ef36:	2302      	movs	r3, #2
    ef38:	4831      	ldr	r0, [pc, #196]	; (f000 <hci_tx_thread+0x184>)
    ef3a:	613b      	str	r3, [r7, #16]
    ef3c:	f107 0210 	add.w	r2, r7, #16
    ef40:	f00e fe71 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    ef44:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
    ef48:	f004 fdfe 	bl	13b48 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ef4c:	2300      	movs	r3, #0
    ef4e:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    ef52:	4620      	mov	r0, r4
    ef54:	f004 fe3c 	bl	13bd0 <net_buf_ref>
    ef58:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
    ef5c:	4620      	mov	r0, r4
    ef5e:	f7ff fe73 	bl	ec48 <bt_send>
	if (err) {
    ef62:	b300      	cbz	r0, efa6 <hci_tx_thread+0x12a>
		BT_ERR("Unable to send to driver (err %d)", err);
    ef64:	46eb      	mov	fp, sp
    ef66:	b088      	sub	sp, #32
    ef68:	466a      	mov	r2, sp
    ef6a:	4b26      	ldr	r3, [pc, #152]	; (f004 <hci_tx_thread+0x188>)
    ef6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ef70:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ef74:	2303      	movs	r3, #3
    ef76:	4822      	ldr	r0, [pc, #136]	; (f000 <hci_tx_thread+0x184>)
    ef78:	f842 3f10 	str.w	r3, [r2, #16]!
    ef7c:	f00e fe53 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    ef80:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    ef82:	481d      	ldr	r0, [pc, #116]	; (eff8 <hci_tx_thread+0x17c>)
    ef84:	f00a fae0 	bl	19548 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    ef88:	4620      	mov	r0, r4
    ef8a:	f004 fb4b 	bl	13624 <net_buf_id>
    ef8e:	220c      	movs	r2, #12
    ef90:	4b1d      	ldr	r3, [pc, #116]	; (f008 <hci_tx_thread+0x18c>)
    ef92:	211f      	movs	r1, #31
    ef94:	fb02 3000 	mla	r0, r2, r0, r3
    ef98:	4622      	mov	r2, r4
    ef9a:	8840      	ldrh	r0, [r0, #2]
    ef9c:	f7ff fa2c 	bl	e3f8 <hci_cmd_done>
		net_buf_unref(buf);
    efa0:	4620      	mov	r0, r4
    efa2:	f004 fdd1 	bl	13b48 <net_buf_unref>
	for (; count; ev++, count--) {
    efa6:	3614      	adds	r6, #20
    efa8:	3d01      	subs	r5, #1
    efaa:	e792      	b.n	eed2 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    efac:	2b01      	cmp	r3, #1
    efae:	d1fa      	bne.n	efa6 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
    efb0:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    efb2:	3838      	subs	r0, #56	; 0x38
    efb4:	f002 f82c 	bl	11010 <bt_conn_process_tx>
    efb8:	e7f5      	b.n	efa6 <hci_tx_thread+0x12a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    efba:	466c      	mov	r4, sp
    efbc:	b088      	sub	sp, #32
    efbe:	466a      	mov	r2, sp
    efc0:	4912      	ldr	r1, [pc, #72]	; (f00c <hci_tx_thread+0x190>)
    efc2:	480f      	ldr	r0, [pc, #60]	; (f000 <hci_tx_thread+0x184>)
		switch (ev->state) {
    efc4:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    efc8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    efcc:	f842 af10 	str.w	sl, [r2, #16]!
    efd0:	f00e fe29 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    efd4:	46a5      	mov	sp, r4
    efd6:	e7e6      	b.n	efa6 <hci_tx_thread+0x12a>
    efd8:	200081c8 	.word	0x200081c8
    efdc:	00022a93 	.word	0x00022a93
    efe0:	200081dc 	.word	0x200081dc
    efe4:	00021a50 	.word	0x00021a50
    efe8:	00021547 	.word	0x00021547
    efec:	2000813c 	.word	0x2000813c
    eff0:	00022980 	.word	0x00022980
    eff4:	20008000 	.word	0x20008000
    eff8:	20008118 	.word	0x20008118
    effc:	00022da3 	.word	0x00022da3
    f000:	0002083c 	.word	0x0002083c
    f004:	00022d09 	.word	0x00022d09
    f008:	200097a8 	.word	0x200097a8
    f00c:	00022dbe 	.word	0x00022dbe

0000f010 <hci_event_prio>:
{
    f010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f014:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    f016:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    f01a:	4630      	mov	r0, r6
    f01c:	f00f ff2a 	bl	1ee74 <net_buf_simple_headroom>
	state->len = buf->len;
    f020:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f024:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f026:	f1b8 0f01 	cmp.w	r8, #1
    f02a:	d80c      	bhi.n	f046 <hci_event_prio+0x36>
    f02c:	f640 5377 	movw	r3, #3447	; 0xd77
    f030:	4a1b      	ldr	r2, [pc, #108]	; (f0a0 <hci_event_prio+0x90>)
    f032:	491c      	ldr	r1, [pc, #112]	; (f0a4 <hci_event_prio+0x94>)
    f034:	481c      	ldr	r0, [pc, #112]	; (f0a8 <hci_event_prio+0x98>)
    f036:	f00d fd58 	bl	1caea <assert_print>
    f03a:	4040      	eors	r0, r0
    f03c:	f380 8811 	msr	BASEPRI, r0
    f040:	f04f 0003 	mov.w	r0, #3
    f044:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    f046:	4630      	mov	r0, r6
    f048:	2102      	movs	r1, #2
    f04a:	f004 fe81 	bl	13d50 <net_buf_simple_pull_mem>
    f04e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f050:	7800      	ldrb	r0, [r0, #0]
    f052:	f00e fdc7 	bl	1dbe4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f056:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f058:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f05a:	d40c      	bmi.n	f076 <hci_event_prio+0x66>
    f05c:	f640 537b 	movw	r3, #3451	; 0xd7b
    f060:	4a0f      	ldr	r2, [pc, #60]	; (f0a0 <hci_event_prio+0x90>)
    f062:	4912      	ldr	r1, [pc, #72]	; (f0ac <hci_event_prio+0x9c>)
    f064:	4810      	ldr	r0, [pc, #64]	; (f0a8 <hci_event_prio+0x98>)
    f066:	f00d fd40 	bl	1caea <assert_print>
    f06a:	4040      	eors	r0, r0
    f06c:	f380 8811 	msr	BASEPRI, r0
    f070:	f04f 0003 	mov.w	r0, #3
    f074:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    f076:	2305      	movs	r3, #5
    f078:	4621      	mov	r1, r4
    f07a:	4a0d      	ldr	r2, [pc, #52]	; (f0b0 <hci_event_prio+0xa0>)
    f07c:	7838      	ldrb	r0, [r7, #0]
    f07e:	f7ff f883 	bl	e188 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f082:	07b3      	lsls	r3, r6, #30
    f084:	d507      	bpl.n	f096 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    f086:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    f088:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f08c:	fa13 f585 	uxtah	r5, r3, r5
    f090:	60a5      	str	r5, [r4, #8]
}
    f092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f096:	4620      	mov	r0, r4
}
    f098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    f09c:	f004 bd54 	b.w	13b48 <net_buf_unref>
    f0a0:	00022a93 	.word	0x00022a93
    f0a4:	00022ac7 	.word	0x00022ac7
    f0a8:	00021547 	.word	0x00021547
    f0ac:	00022ddf 	.word	0x00022ddf
    f0b0:	00020c74 	.word	0x00020c74

0000f0b4 <bt_recv>:
{
    f0b4:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f0b6:	7d03      	ldrb	r3, [r0, #20]
    f0b8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    f0ba:	2b01      	cmp	r3, #1
{
    f0bc:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    f0be:	d006      	beq.n	f0ce <bt_recv+0x1a>
    f0c0:	2b03      	cmp	r3, #3
    f0c2:	d112      	bne.n	f0ea <bt_recv+0x36>
			rx_queue_put(buf);
    f0c4:	f7fe ff8c 	bl	dfe0 <rx_queue_put>
		return 0;
    f0c8:	2000      	movs	r0, #0
}
    f0ca:	46bd      	mov	sp, r7
    f0cc:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f0ce:	6883      	ldr	r3, [r0, #8]
    f0d0:	7818      	ldrb	r0, [r3, #0]
    f0d2:	f00e fd87 	bl	1dbe4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f0d6:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f0d8:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f0da:	d502      	bpl.n	f0e2 <bt_recv+0x2e>
			hci_event_prio(buf);
    f0dc:	4620      	mov	r0, r4
    f0de:	f7ff ff97 	bl	f010 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f0e2:	07ab      	lsls	r3, r5, #30
    f0e4:	d5f0      	bpl.n	f0c8 <bt_recv+0x14>
			rx_queue_put(buf);
    f0e6:	4620      	mov	r0, r4
    f0e8:	e7ec      	b.n	f0c4 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f0ea:	466d      	mov	r5, sp
    f0ec:	b088      	sub	sp, #32
    f0ee:	466a      	mov	r2, sp
    f0f0:	4908      	ldr	r1, [pc, #32]	; (f114 <bt_recv+0x60>)
    f0f2:	4809      	ldr	r0, [pc, #36]	; (f118 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
    f0f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f0f8:	2303      	movs	r3, #3
    f0fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f0fe:	f842 3f10 	str.w	r3, [r2, #16]!
    f102:	f00e fd90 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    f106:	4620      	mov	r0, r4
    f108:	46ad      	mov	sp, r5
    f10a:	f004 fd1d 	bl	13b48 <net_buf_unref>
		return -EINVAL;
    f10e:	f06f 0015 	mvn.w	r0, #21
    f112:	e7da      	b.n	f0ca <bt_recv+0x16>
    f114:	00022df8 	.word	0x00022df8
    f118:	0002083c 	.word	0x0002083c

0000f11c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    f11c:	4a08      	ldr	r2, [pc, #32]	; (f140 <bt_hci_driver_register+0x24>)
{
    f11e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    f120:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
    f124:	b930      	cbnz	r0, f134 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    f126:	68d9      	ldr	r1, [r3, #12]
    f128:	b139      	cbz	r1, f13a <bt_hci_driver_register+0x1e>
    f12a:	6959      	ldr	r1, [r3, #20]
    f12c:	b129      	cbz	r1, f13a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    f12e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	return 0;
    f132:	4770      	bx	lr
		return -EALREADY;
    f134:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f138:	4770      	bx	lr
		return -EINVAL;
    f13a:	f06f 0015 	mvn.w	r0, #21
}
    f13e:	4770      	bx	lr
    f140:	20008000 	.word	0x20008000

0000f144 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f144:	2104      	movs	r1, #4
    f146:	4801      	ldr	r0, [pc, #4]	; (f14c <bt_finalize_init+0x8>)
    f148:	f00e bd62 	b.w	1dc10 <atomic_or>
    f14c:	200080cc 	.word	0x200080cc

0000f150 <bt_init>:
{
    f150:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f152:	4d63      	ldr	r5, [pc, #396]	; (f2e0 <bt_init+0x190>)
{
    f154:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f156:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    f15a:	6899      	ldr	r1, [r3, #8]
    f15c:	f011 0101 	ands.w	r1, r1, #1
    f160:	d11a      	bne.n	f198 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f162:	f640 4003 	movw	r0, #3075	; 0xc03
    f166:	aa01      	add	r2, sp, #4
    f168:	f7ff faf8 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    f16c:	4604      	mov	r4, r0
    f16e:	2800      	cmp	r0, #0
    f170:	f040 80b2 	bne.w	f2d8 <bt_init+0x188>
		hci_reset_complete(rsp);
    f174:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    f176:	6883      	ldr	r3, [r0, #8]
	if (status) {
    f178:	781b      	ldrb	r3, [r3, #0]
    f17a:	b95b      	cbnz	r3, f194 <bt_init+0x44>
    f17c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    f180:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f184:	f002 0209 	and.w	r2, r2, #9
    f188:	e8d3 1fef 	ldaex	r1, [r3]
    f18c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    f190:	2c00      	cmp	r4, #0
    f192:	d1f9      	bne.n	f188 <bt_init+0x38>
		net_buf_unref(rsp);
    f194:	f004 fcd8 	bl	13b48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f198:	2100      	movs	r1, #0
    f19a:	f241 0003 	movw	r0, #4099	; 0x1003
    f19e:	aa01      	add	r2, sp, #4
    f1a0:	f7ff fadc 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f1a4:	4604      	mov	r4, r0
    f1a6:	2800      	cmp	r0, #0
    f1a8:	f040 8096 	bne.w	f2d8 <bt_init+0x188>
	read_local_features_complete(rsp);
    f1ac:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f1ae:	2208      	movs	r2, #8
    f1b0:	68b1      	ldr	r1, [r6, #8]
    f1b2:	484c      	ldr	r0, [pc, #304]	; (f2e4 <bt_init+0x194>)
    f1b4:	3101      	adds	r1, #1
    f1b6:	f00e fca7 	bl	1db08 <memcpy>
	net_buf_unref(rsp);
    f1ba:	4630      	mov	r0, r6
    f1bc:	f004 fcc4 	bl	13b48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f1c0:	4621      	mov	r1, r4
    f1c2:	f241 0001 	movw	r0, #4097	; 0x1001
    f1c6:	aa01      	add	r2, sp, #4
    f1c8:	f7ff fac8 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f1cc:	4604      	mov	r4, r0
    f1ce:	2800      	cmp	r0, #0
    f1d0:	f040 8082 	bne.w	f2d8 <bt_init+0x188>
	read_local_ver_complete(rsp);
    f1d4:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    f1d6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f1d8:	785a      	ldrb	r2, [r3, #1]
    f1da:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f1de:	885a      	ldrh	r2, [r3, #2]
    f1e0:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    f1e4:	791a      	ldrb	r2, [r3, #4]
    f1e6:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f1ea:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    f1ee:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f1f2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    f1f6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    f1fa:	f004 fca5 	bl	13b48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f1fe:	4621      	mov	r1, r4
    f200:	f241 0002 	movw	r0, #4098	; 0x1002
    f204:	aa01      	add	r2, sp, #4
    f206:	f7ff faa9 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f20a:	4604      	mov	r4, r0
    f20c:	2800      	cmp	r0, #0
    f20e:	d163      	bne.n	f2d8 <bt_init+0x188>
	read_supported_commands_complete(rsp);
    f210:	9c01      	ldr	r4, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    f212:	2240      	movs	r2, #64	; 0x40
    f214:	68a1      	ldr	r1, [r4, #8]
    f216:	4834      	ldr	r0, [pc, #208]	; (f2e8 <bt_init+0x198>)
    f218:	3101      	adds	r1, #1
    f21a:	f00e fc75 	bl	1db08 <memcpy>
	net_buf_unref(rsp);
    f21e:	4620      	mov	r0, r4
    f220:	f004 fc92 	bl	13b48 <net_buf_unref>
		err = prng_init();
    f224:	f000 ffd4 	bl	101d0 <prng_init>
		if (err) {
    f228:	4604      	mov	r4, r0
    f22a:	2800      	cmp	r0, #0
    f22c:	d154      	bne.n	f2d8 <bt_init+0x188>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f22e:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f232:	069f      	lsls	r7, r3, #26
    f234:	d41a      	bmi.n	f26c <bt_init+0x11c>
		BT_WARN("Controller to host flow control not supported");
    f236:	4b2d      	ldr	r3, [pc, #180]	; (f2ec <bt_init+0x19c>)
    f238:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f23c:	9307      	str	r3, [sp, #28]
    f23e:	2302      	movs	r3, #2
    f240:	482b      	ldr	r0, [pc, #172]	; (f2f0 <bt_init+0x1a0>)
    f242:	aa06      	add	r2, sp, #24
    f244:	9306      	str	r3, [sp, #24]
    f246:	f00e fcee 	bl	1dc26 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f24a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    f24e:	065e      	lsls	r6, r3, #25
    f250:	d452      	bmi.n	f2f8 <bt_init+0x1a8>
		BT_ERR("Non-LE capable controller detected!");
    f252:	4b28      	ldr	r3, [pc, #160]	; (f2f4 <bt_init+0x1a4>)
    f254:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f258:	9307      	str	r3, [sp, #28]
    f25a:	2302      	movs	r3, #2
    f25c:	4824      	ldr	r0, [pc, #144]	; (f2f0 <bt_init+0x1a0>)
    f25e:	aa06      	add	r2, sp, #24
    f260:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    f262:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
    f266:	f00e fcde 	bl	1dc26 <z_log_msg_static_create.constprop.0>
	if (err) {
    f26a:	e035      	b.n	f2d8 <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    f26c:	2107      	movs	r1, #7
    f26e:	f640 4033 	movw	r0, #3123	; 0xc33
    f272:	f7ff fa25 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    f276:	4607      	mov	r7, r0
    f278:	2800      	cmp	r0, #0
    f27a:	f000 8121 	beq.w	f4c0 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    f27e:	2107      	movs	r1, #7
    f280:	3008      	adds	r0, #8
    f282:	f004 fd83 	bl	13d8c <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    f286:	4621      	mov	r1, r4
    f288:	2207      	movs	r2, #7
    f28a:	4606      	mov	r6, r0
    f28c:	f00e fc47 	bl	1db1e <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    f290:	231b      	movs	r3, #27
    f292:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    f294:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f296:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    f298:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    f29a:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f29c:	4639      	mov	r1, r7
    f29e:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    f2a2:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f2a4:	f7ff fa5a 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f2a8:	4604      	mov	r4, r0
    f2aa:	b9a8      	cbnz	r0, f2d8 <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    f2ac:	2101      	movs	r1, #1
    f2ae:	f640 4031 	movw	r0, #3121	; 0xc31
    f2b2:	f7ff fa05 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    f2b6:	4606      	mov	r6, r0
    f2b8:	2800      	cmp	r0, #0
    f2ba:	f000 8101 	beq.w	f4c0 <bt_init+0x370>
	return net_buf_simple_add_u8(&buf->b, val);
    f2be:	2101      	movs	r1, #1
    f2c0:	3008      	adds	r0, #8
    f2c2:	f00f fdef 	bl	1eea4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    f2c6:	4622      	mov	r2, r4
    f2c8:	4631      	mov	r1, r6
    f2ca:	f640 4031 	movw	r0, #3121	; 0xc31
    f2ce:	f7ff fa45 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f2d2:	4604      	mov	r4, r0
    f2d4:	2800      	cmp	r0, #0
    f2d6:	d0b8      	beq.n	f24a <bt_init+0xfa>
}
    f2d8:	4620      	mov	r0, r4
    f2da:	b009      	add	sp, #36	; 0x24
    f2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2de:	bf00      	nop
    f2e0:	20008000 	.word	0x20008000
    f2e4:	20008070 	.word	0x20008070
    f2e8:	20008078 	.word	0x20008078
    f2ec:	00022e0c 	.word	0x00022e0c
    f2f0:	0002083c 	.word	0x0002083c
    f2f4:	00022e3a 	.word	0x00022e3a
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f2f8:	2100      	movs	r1, #0
    f2fa:	f242 0003 	movw	r0, #8195	; 0x2003
    f2fe:	aa02      	add	r2, sp, #8
    f300:	f7ff fa2c 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f304:	4604      	mov	r4, r0
    f306:	2800      	cmp	r0, #0
    f308:	d1e6      	bne.n	f2d8 <bt_init+0x188>
	read_le_features_complete(rsp);
    f30a:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f30c:	2208      	movs	r2, #8
    f30e:	68b1      	ldr	r1, [r6, #8]
    f310:	48a9      	ldr	r0, [pc, #676]	; (f5b8 <bt_init+0x468>)
    f312:	3101      	adds	r1, #1
    f314:	f00e fbf8 	bl	1db08 <memcpy>
	net_buf_unref(rsp);
    f318:	4630      	mov	r0, r6
    f31a:	f004 fc15 	bl	13b48 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f31e:	4621      	mov	r1, r4
    f320:	f242 0002 	movw	r0, #8194	; 0x2002
    f324:	aa02      	add	r2, sp, #8
    f326:	f7ff fa19 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    f32a:	4604      	mov	r4, r0
    f32c:	2800      	cmp	r0, #0
    f32e:	d1d3      	bne.n	f2d8 <bt_init+0x188>
		le_read_buffer_size_complete(rsp);
    f330:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    f332:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f334:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f338:	b291      	uxth	r1, r2
    f33a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    f33e:	b121      	cbz	r1, f34a <bt_init+0x1fa>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f340:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f342:	489e      	ldr	r0, [pc, #632]	; (f5bc <bt_init+0x46c>)
    f344:	4611      	mov	r1, r2
    f346:	f010 fe71 	bl	2002c <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f34a:	4620      	mov	r0, r4
    f34c:	f004 fbfc 	bl	13b48 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f350:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    f354:	f016 0620 	ands.w	r6, r6, #32
    f358:	d118      	bne.n	f38c <bt_init+0x23c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f35a:	2102      	movs	r1, #2
    f35c:	f640 406d 	movw	r0, #3181	; 0xc6d
    f360:	f7ff f9ae 	bl	e6c0 <bt_hci_cmd_create>
		if (!buf) {
    f364:	4604      	mov	r4, r0
    f366:	2800      	cmp	r0, #0
    f368:	f000 80aa 	beq.w	f4c0 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    f36c:	2102      	movs	r1, #2
    f36e:	3008      	adds	r0, #8
    f370:	f004 fd0c 	bl	13d8c <net_buf_simple_add>
		cp_le->le = 0x01;
    f374:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f376:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    f378:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f37a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f37c:	4632      	mov	r2, r6
    f37e:	f640 406d 	movw	r0, #3181	; 0xc6d
    f382:	f7ff f9eb 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    f386:	4604      	mov	r4, r0
    f388:	2800      	cmp	r0, #0
    f38a:	d1a5      	bne.n	f2d8 <bt_init+0x188>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f38c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    f390:	071c      	lsls	r4, r3, #28
    f392:	d512      	bpl.n	f3ba <bt_init+0x26a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f394:	2100      	movs	r1, #0
    f396:	f242 001c 	movw	r0, #8220	; 0x201c
    f39a:	aa02      	add	r2, sp, #8
    f39c:	f7ff f9de 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    f3a0:	4604      	mov	r4, r0
    f3a2:	2800      	cmp	r0, #0
    f3a4:	d198      	bne.n	f2d8 <bt_init+0x188>
		le_read_supp_states_complete(rsp);
    f3a6:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f3a8:	6883      	ldr	r3, [r0, #8]
    f3aa:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f3ae:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f3b2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    f3b6:	f004 fbc7 	bl	13b48 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f3ba:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    f3be:	0698      	lsls	r0, r3, #26
    f3c0:	d523      	bpl.n	f40a <bt_init+0x2ba>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f3c2:	a901      	add	r1, sp, #4
    f3c4:	f10d 0002 	add.w	r0, sp, #2
    f3c8:	f7ff fa44 	bl	e854 <hci_le_read_max_data_len>
		if (err) {
    f3cc:	4604      	mov	r4, r0
    f3ce:	2800      	cmp	r0, #0
    f3d0:	d182      	bne.n	f2d8 <bt_init+0x188>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f3d2:	2104      	movs	r1, #4
    f3d4:	f242 0024 	movw	r0, #8228	; 0x2024
    f3d8:	f7ff f972 	bl	e6c0 <bt_hci_cmd_create>
		if (!buf) {
    f3dc:	4606      	mov	r6, r0
    f3de:	2800      	cmp	r0, #0
    f3e0:	d06e      	beq.n	f4c0 <bt_init+0x370>
    f3e2:	2104      	movs	r1, #4
    f3e4:	3008      	adds	r0, #8
    f3e6:	f004 fcd1 	bl	13d8c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f3ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f3ee:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f3f0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f3f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f3f6:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f3f8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f3fa:	f242 0024 	movw	r0, #8228	; 0x2024
    f3fe:	f7ff f9ad 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    f402:	4604      	mov	r4, r0
    f404:	2800      	cmp	r0, #0
    f406:	f47f af67 	bne.w	f2d8 <bt_init+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f40a:	2108      	movs	r1, #8
    f40c:	f242 0001 	movw	r0, #8193	; 0x2001
    f410:	f7ff f956 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    f414:	4604      	mov	r4, r0
    f416:	2800      	cmp	r0, #0
    f418:	d052      	beq.n	f4c0 <bt_init+0x370>
    f41a:	2108      	movs	r1, #8
    f41c:	4408      	add	r0, r1
    f41e:	f004 fcb5 	bl	13d8c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f422:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f426:	f012 0f02 	tst.w	r2, #2
    f42a:	bf14      	ite	ne
    f42c:	232f      	movne	r3, #47	; 0x2f
    f42e:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f430:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f432:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f436:	bf48      	it	mi
    f438:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f43c:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    f440:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f444:	bf18      	it	ne
    f446:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    f44a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f44c:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f450:	4621      	mov	r1, r4
    f452:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    f454:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f456:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    f458:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f45a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f45c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f45e:	71c2      	strb	r2, [r0, #7]
    f460:	f242 0001 	movw	r0, #8193	; 0x2001
    f464:	f7ff f97a 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f468:	4604      	mov	r4, r0
    f46a:	2800      	cmp	r0, #0
    f46c:	f47f af34 	bne.w	f2d8 <bt_init+0x188>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f470:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    f474:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f478:	069a      	lsls	r2, r3, #26
    f47a:	d424      	bmi.n	f4c6 <bt_init+0x376>
	if (bt_dev.le.acl_mtu) {
    f47c:	b9c9      	cbnz	r1, f4b2 <bt_init+0x362>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f47e:	f241 0005 	movw	r0, #4101	; 0x1005
    f482:	aa02      	add	r2, sp, #8
    f484:	f7ff f96a 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f488:	4604      	mov	r4, r0
    f48a:	2800      	cmp	r0, #0
    f48c:	f47f af24 	bne.w	f2d8 <bt_init+0x188>
	if (bt_dev.le.acl_mtu) {
    f490:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    f494:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    f496:	b94b      	cbnz	r3, f4ac <bt_init+0x35c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    f498:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f49a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f49e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f4a2:	889a      	ldrh	r2, [r3, #4]
    f4a4:	4845      	ldr	r0, [pc, #276]	; (f5bc <bt_init+0x46c>)
    f4a6:	4611      	mov	r1, r2
    f4a8:	f010 fdc0 	bl	2002c <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f4ac:	4620      	mov	r0, r4
    f4ae:	f004 fb4b 	bl	13b48 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f4b2:	2108      	movs	r1, #8
    f4b4:	f640 4001 	movw	r0, #3073	; 0xc01
    f4b8:	f7ff f902 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    f4bc:	4604      	mov	r4, r0
    f4be:	b988      	cbnz	r0, f4e4 <bt_init+0x394>
		return -ENOBUFS;
    f4c0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f4c4:	e708      	b.n	f2d8 <bt_init+0x188>
	else if (!bt_dev.le.acl_mtu) {
    f4c6:	2900      	cmp	r1, #0
    f4c8:	d1f3      	bne.n	f4b2 <bt_init+0x362>
		BT_ERR("ACL BR/EDR buffers not initialized");
    f4ca:	4b3d      	ldr	r3, [pc, #244]	; (f5c0 <bt_init+0x470>)
    f4cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f4d0:	9307      	str	r3, [sp, #28]
    f4d2:	2302      	movs	r3, #2
    f4d4:	483b      	ldr	r0, [pc, #236]	; (f5c4 <bt_init+0x474>)
    f4d6:	aa06      	add	r2, sp, #24
    f4d8:	9306      	str	r3, [sp, #24]
		return -EIO;
    f4da:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
    f4de:	f00e fba2 	bl	1dc26 <z_log_msg_static_create.constprop.0>
	if (err) {
    f4e2:	e6f9      	b.n	f2d8 <bt_init+0x188>
    f4e4:	2108      	movs	r1, #8
    f4e6:	4408      	add	r0, r1
    f4e8:	f004 fc50 	bl	13d8c <net_buf_simple_add>
	dst[0] = val;
    f4ec:	2310      	movs	r3, #16
    f4ee:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f4f0:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    f4f2:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    f4f4:	7043      	strb	r3, [r0, #1]
    f4f6:	2602      	movs	r6, #2
    f4f8:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f4fa:	4621      	mov	r1, r4
	dst[0] = val;
    f4fc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f4fe:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    f500:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f502:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f504:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f506:	71c3      	strb	r3, [r0, #7]
    f508:	f640 4001 	movw	r0, #3073	; 0xc01
    f50c:	f7ff f926 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f510:	4604      	mov	r4, r0
    f512:	2800      	cmp	r0, #0
    f514:	f47f aee0 	bne.w	f2d8 <bt_init+0x188>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f518:	4601      	mov	r1, r0
    f51a:	aa01      	add	r2, sp, #4
    f51c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f520:	f7ff f91c 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f524:	4604      	mov	r4, r0
    f526:	b1b8      	cbz	r0, f558 <bt_init+0x408>
		BT_WARN("Vendor HCI extensions not available");
    f528:	4b27      	ldr	r3, [pc, #156]	; (f5c8 <bt_init+0x478>)
			BT_WARN("Failed to read supported vendor features");
    f52a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f52e:	4825      	ldr	r0, [pc, #148]	; (f5c4 <bt_init+0x474>)
    f530:	aa06      	add	r2, sp, #24
    f532:	e9cd 6306 	strd	r6, r3, [sp, #24]
    f536:	f00e fb76 	bl	1dc26 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    f53a:	f000 faf1 	bl	fb20 <bt_id_init>
	if (err) {
    f53e:	4604      	mov	r4, r0
    f540:	2800      	cmp	r0, #0
    f542:	f47f aec9 	bne.w	f2d8 <bt_init+0x188>
		err = bt_conn_init();
    f546:	f001 fdd7 	bl	110f8 <bt_conn_init>
		if (err) {
    f54a:	4604      	mov	r4, r0
    f54c:	2800      	cmp	r0, #0
    f54e:	f47f aec3 	bne.w	f2d8 <bt_init+0x188>
	bt_finalize_init();
    f552:	f7ff fdf7 	bl	f144 <bt_finalize_init>
	return 0;
    f556:	e6bf      	b.n	f2d8 <bt_init+0x188>
	net_buf_unref(rsp);
    f558:	9801      	ldr	r0, [sp, #4]
    f55a:	f004 faf5 	bl	13b48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f55e:	4621      	mov	r1, r4
    f560:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f564:	aa01      	add	r2, sp, #4
    f566:	f7ff f8f9 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f56a:	4604      	mov	r4, r0
    f56c:	b108      	cbz	r0, f572 <bt_init+0x422>
		BT_WARN("Failed to read supported vendor commands");
    f56e:	4b17      	ldr	r3, [pc, #92]	; (f5cc <bt_init+0x47c>)
    f570:	e7db      	b.n	f52a <bt_init+0x3da>
	rp.cmds = (void *)rsp->data;
    f572:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f574:	4632      	mov	r2, r6
    f576:	68b9      	ldr	r1, [r7, #8]
    f578:	4815      	ldr	r0, [pc, #84]	; (f5d0 <bt_init+0x480>)
    f57a:	3101      	adds	r1, #1
    f57c:	f00e fac4 	bl	1db08 <memcpy>
	net_buf_unref(rsp);
    f580:	4638      	mov	r0, r7
    f582:	f004 fae1 	bl	13b48 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f586:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    f58a:	075b      	lsls	r3, r3, #29
    f58c:	d5d5      	bpl.n	f53a <bt_init+0x3ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f58e:	4621      	mov	r1, r4
    f590:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f594:	aa01      	add	r2, sp, #4
    f596:	f7ff f8e1 	bl	e75c <bt_hci_cmd_send_sync>
		if (err) {
    f59a:	b108      	cbz	r0, f5a0 <bt_init+0x450>
			BT_WARN("Failed to read supported vendor features");
    f59c:	4b0d      	ldr	r3, [pc, #52]	; (f5d4 <bt_init+0x484>)
    f59e:	e7c4      	b.n	f52a <bt_init+0x3da>
		memcpy(bt_dev.vs_features, rp.feat->features,
    f5a0:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    f5a2:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f5a4:	480c      	ldr	r0, [pc, #48]	; (f5d8 <bt_init+0x488>)
    f5a6:	68a1      	ldr	r1, [r4, #8]
    f5a8:	4411      	add	r1, r2
    f5aa:	f00e faad 	bl	1db08 <memcpy>
		net_buf_unref(rsp);
    f5ae:	4620      	mov	r0, r4
    f5b0:	f004 faca 	bl	13b48 <net_buf_unref>
    f5b4:	e7c1      	b.n	f53a <bt_init+0x3ea>
    f5b6:	bf00      	nop
    f5b8:	200080d0 	.word	0x200080d0
    f5bc:	20008100 	.word	0x20008100
    f5c0:	00022e5e 	.word	0x00022e5e
    f5c4:	0002083c 	.word	0x0002083c
    f5c8:	00022e81 	.word	0x00022e81
    f5cc:	00022ea5 	.word	0x00022ea5
    f5d0:	200080b9 	.word	0x200080b9
    f5d4:	00022ece 	.word	0x00022ece
    f5d8:	200080b8 	.word	0x200080b8

0000f5dc <init_work>:
{
    f5dc:	b510      	push	{r4, lr}
	err = bt_init();
    f5de:	f7ff fdb7 	bl	f150 <bt_init>
	if (ready_cb) {
    f5e2:	4b03      	ldr	r3, [pc, #12]	; (f5f0 <init_work+0x14>)
    f5e4:	681b      	ldr	r3, [r3, #0]
    f5e6:	b113      	cbz	r3, f5ee <init_work+0x12>
}
    f5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f5ec:	4718      	bx	r3
}
    f5ee:	bd10      	pop	{r4, pc}
    f5f0:	20009820 	.word	0x20009820

0000f5f4 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    f5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5f6:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
    f5f8:	4d3b      	ldr	r5, [pc, #236]	; (f6e8 <bt_enable+0xf4>)
{
    f5fa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f5fc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
{
    f600:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    f602:	b983      	cbnz	r3, f626 <bt_enable+0x32>
		BT_ERR("No HCI driver registered");
    f604:	4b39      	ldr	r3, [pc, #228]	; (f6ec <bt_enable+0xf8>)
		return -ENODEV;
    f606:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
    f60a:	617b      	str	r3, [r7, #20]
    f60c:	2302      	movs	r3, #2
    f60e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f612:	4837      	ldr	r0, [pc, #220]	; (f6f0 <bt_enable+0xfc>)
    f614:	613b      	str	r3, [r7, #16]
    f616:	f107 0210 	add.w	r2, r7, #16
    f61a:	f00e fb04 	bl	1dc26 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    f61e:	4620      	mov	r0, r4
    f620:	371c      	adds	r7, #28
    f622:	46bd      	mov	sp, r7
    f624:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f626:	f06f 0102 	mvn.w	r1, #2
    f62a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    f62e:	f00e fafd 	bl	1dc2c <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f632:	2101      	movs	r1, #1
    f634:	f00e faec 	bl	1dc10 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f638:	ea10 0401 	ands.w	r4, r0, r1
    f63c:	d150      	bne.n	f6e0 <bt_enable+0xec>
	ready_cb = cb;
    f63e:	4b2d      	ldr	r3, [pc, #180]	; (f6f4 <bt_enable+0x100>)
    f640:	601e      	str	r6, [r3, #0]
    f642:	460a      	mov	r2, r1
    f644:	f505 708c 	add.w	r0, r5, #280	; 0x118
    f648:	f010 fcf0 	bl	2002c <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    f64c:	f505 709e 	add.w	r0, r5, #316	; 0x13c
    f650:	f010 fcca 	bl	1ffe8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f654:	2200      	movs	r2, #0
    f656:	2300      	movs	r3, #0
    f658:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f65c:	f06f 0308 	mvn.w	r3, #8
    f660:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f664:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f668:	e9cd 4400 	strd	r4, r4, [sp]
    f66c:	4b22      	ldr	r3, [pc, #136]	; (f6f8 <bt_enable+0x104>)
    f66e:	4923      	ldr	r1, [pc, #140]	; (f6fc <bt_enable+0x108>)
    f670:	9404      	str	r4, [sp, #16]
    f672:	4823      	ldr	r0, [pc, #140]	; (f700 <bt_enable+0x10c>)
    f674:	f009 fb88 	bl	18d88 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f678:	4922      	ldr	r1, [pc, #136]	; (f704 <bt_enable+0x110>)
    f67a:	4821      	ldr	r0, [pc, #132]	; (f700 <bt_enable+0x10c>)
    f67c:	f010 fc8b 	bl	1ff96 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    f680:	4821      	ldr	r0, [pc, #132]	; (f708 <bt_enable+0x114>)
    f682:	f00a fad5 	bl	19c30 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    f686:	f06f 0307 	mvn.w	r3, #7
    f68a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    f68e:	491f      	ldr	r1, [pc, #124]	; (f70c <bt_enable+0x118>)
    f690:	481d      	ldr	r0, [pc, #116]	; (f708 <bt_enable+0x114>)
    f692:	9400      	str	r4, [sp, #0]
    f694:	f00a fae6 	bl	19c64 <k_work_queue_start>
    f698:	491d      	ldr	r1, [pc, #116]	; (f710 <bt_enable+0x11c>)
    f69a:	481b      	ldr	r0, [pc, #108]	; (f708 <bt_enable+0x114>)
    f69c:	f010 fc7b 	bl	1ff96 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    f6a0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    f6a4:	68db      	ldr	r3, [r3, #12]
    f6a6:	4798      	blx	r3
	if (err) {
    f6a8:	4604      	mov	r4, r0
    f6aa:	b178      	cbz	r0, f6cc <bt_enable+0xd8>
		BT_ERR("HCI driver open failed (%d)", err);
    f6ac:	466d      	mov	r5, sp
    f6ae:	b088      	sub	sp, #32
    f6b0:	462a      	mov	r2, r5
    f6b2:	4b18      	ldr	r3, [pc, #96]	; (f714 <bt_enable+0x120>)
    f6b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f6b8:	e9c5 3005 	strd	r3, r0, [r5, #20]
    f6bc:	2303      	movs	r3, #3
    f6be:	480c      	ldr	r0, [pc, #48]	; (f6f0 <bt_enable+0xfc>)
    f6c0:	f842 3f10 	str.w	r3, [r2, #16]!
    f6c4:	f00e faaf 	bl	1dc26 <z_log_msg_static_create.constprop.0>
    f6c8:	46ad      	mov	sp, r5
		return err;
    f6ca:	e7a8      	b.n	f61e <bt_enable+0x2a>
	if (!cb) {
    f6cc:	b91e      	cbnz	r6, f6d6 <bt_enable+0xe2>
		return bt_init();
    f6ce:	f7ff fd3f 	bl	f150 <bt_init>
    f6d2:	4604      	mov	r4, r0
    f6d4:	e7a3      	b.n	f61e <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    f6d6:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    f6da:	f00a faa3 	bl	19c24 <k_work_submit>
	return 0;
    f6de:	e79e      	b.n	f61e <bt_enable+0x2a>
		return -EALREADY;
    f6e0:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f6e4:	e79b      	b.n	f61e <bt_enable+0x2a>
    f6e6:	bf00      	nop
    f6e8:	20008000 	.word	0x20008000
    f6ec:	00022ef7 	.word	0x00022ef7
    f6f0:	0002083c 	.word	0x0002083c
    f6f4:	20009820 	.word	0x20009820
    f6f8:	0000ee7d 	.word	0x0000ee7d
    f6fc:	2000b238 	.word	0x2000b238
    f700:	20009120 	.word	0x20009120
    f704:	00022f10 	.word	0x00022f10
    f708:	200091a8 	.word	0x200091a8
    f70c:	2000b638 	.word	0x2000b638
    f710:	00022f16 	.word	0x00022f16
    f714:	00022f1c 	.word	0x00022f1c

0000f718 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f718:	4b02      	ldr	r3, [pc, #8]	; (f724 <bt_is_ready+0xc>)
    f71a:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    f71e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f722:	4770      	bx	lr
    f724:	200080cc 	.word	0x200080cc

0000f728 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    f728:	4800      	ldr	r0, [pc, #0]	; (f72c <bt_get_name+0x4>)
    f72a:	4770      	bx	lr
    f72c:	000214be 	.word	0x000214be

0000f730 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f732:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    f734:	2500      	movs	r5, #0
    f736:	4f09      	ldr	r7, [pc, #36]	; (f75c <id_find+0x2c>)
    f738:	79fb      	ldrb	r3, [r7, #7]
    f73a:	b2ec      	uxtb	r4, r5
    f73c:	42a3      	cmp	r3, r4
    f73e:	d802      	bhi.n	f746 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    f740:	f06f 0001 	mvn.w	r0, #1
    f744:	e009      	b.n	f75a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    f746:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    f74a:	4630      	mov	r0, r6
    f74c:	4439      	add	r1, r7
    f74e:	f00e fb19 	bl	1dd84 <bt_addr_le_eq>
    f752:	3501      	adds	r5, #1
    f754:	2800      	cmp	r0, #0
    f756:	d0ef      	beq.n	f738 <id_find+0x8>
    f758:	4620      	mov	r0, r4
}
    f75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f75c:	20008000 	.word	0x20008000

0000f760 <set_random_address>:
{
    f760:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    f762:	2206      	movs	r2, #6
    f764:	4912      	ldr	r1, [pc, #72]	; (f7b0 <set_random_address+0x50>)
    f766:	4605      	mov	r5, r0
    f768:	f00e f9be 	bl	1dae8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f76c:	b1d8      	cbz	r0, f7a6 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f76e:	2106      	movs	r1, #6
    f770:	f242 0005 	movw	r0, #8197	; 0x2005
    f774:	f7fe ffa4 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    f778:	4604      	mov	r4, r0
    f77a:	b1b0      	cbz	r0, f7aa <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f77c:	2206      	movs	r2, #6
    f77e:	4629      	mov	r1, r5
    f780:	3008      	adds	r0, #8
    f782:	f00f fb83 	bl	1ee8c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f786:	2200      	movs	r2, #0
    f788:	4621      	mov	r1, r4
    f78a:	f242 0005 	movw	r0, #8197	; 0x2005
    f78e:	f7fe ffe5 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f792:	b948      	cbnz	r0, f7a8 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    f794:	2206      	movs	r2, #6
    f796:	4629      	mov	r1, r5
    f798:	4805      	ldr	r0, [pc, #20]	; (f7b0 <set_random_address+0x50>)
    f79a:	f00e f9b5 	bl	1db08 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f79e:	2201      	movs	r2, #1
    f7a0:	4b04      	ldr	r3, [pc, #16]	; (f7b4 <set_random_address+0x54>)
    f7a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
    f7a6:	2000      	movs	r0, #0
}
    f7a8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    f7aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f7ae:	e7fb      	b.n	f7a8 <set_random_address+0x48>
    f7b0:	20008061 	.word	0x20008061
    f7b4:	20008000 	.word	0x20008000

0000f7b8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    f7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f7ba:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f7bc:	460d      	mov	r5, r1
    f7be:	b179      	cbz	r1, f7e0 <id_create.constprop.0+0x28>
    f7c0:	4628      	mov	r0, r5
    f7c2:	4914      	ldr	r1, [pc, #80]	; (f814 <id_create.constprop.0+0x5c>)
    f7c4:	f00e fade 	bl	1dd84 <bt_addr_le_eq>
    f7c8:	b950      	cbnz	r0, f7e0 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    f7ca:	2207      	movs	r2, #7
    f7cc:	4629      	mov	r1, r5
    f7ce:	4812      	ldr	r0, [pc, #72]	; (f818 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    f7d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f7d4:	4420      	add	r0, r4
    f7d6:	f00e f997 	bl	1db08 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    f7da:	2000      	movs	r0, #0
}
    f7dc:	b003      	add	sp, #12
    f7de:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    f7e0:	4668      	mov	r0, sp
    f7e2:	f00e f9f1 	bl	1dbc8 <bt_addr_le_create_static>
			if (err) {
    f7e6:	2800      	cmp	r0, #0
    f7e8:	d1f8      	bne.n	f7dc <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    f7ea:	4668      	mov	r0, sp
    f7ec:	f7ff ffa0 	bl	f730 <id_find>
    f7f0:	2800      	cmp	r0, #0
    f7f2:	daf5      	bge.n	f7e0 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    f7f4:	4b08      	ldr	r3, [pc, #32]	; (f818 <id_create.constprop.0+0x60>)
    f7f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f7fa:	441c      	add	r4, r3
    f7fc:	2207      	movs	r2, #7
    f7fe:	4669      	mov	r1, sp
    f800:	4620      	mov	r0, r4
    f802:	f00e f981 	bl	1db08 <memcpy>
		if (addr) {
    f806:	2d00      	cmp	r5, #0
    f808:	d0e7      	beq.n	f7da <id_create.constprop.0+0x22>
    f80a:	2207      	movs	r2, #7
    f80c:	4621      	mov	r1, r4
    f80e:	4628      	mov	r0, r5
    f810:	e7e1      	b.n	f7d6 <id_create.constprop.0+0x1e>
    f812:	bf00      	nop
    f814:	00022866 	.word	0x00022866
    f818:	20008000 	.word	0x20008000

0000f81c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    f81c:	b570      	push	{r4, r5, r6, lr}
    f81e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f820:	4604      	mov	r4, r0
{
    f822:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f824:	b920      	cbnz	r0, f830 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    f826:	b31d      	cbz	r5, f870 <bt_id_create+0x54>
			return -EINVAL;
    f828:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    f82c:	b006      	add	sp, #24
    f82e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f830:	4920      	ldr	r1, [pc, #128]	; (f8b4 <bt_id_create+0x98>)
    f832:	f00e faa7 	bl	1dd84 <bt_addr_le_eq>
    f836:	2800      	cmp	r0, #0
    f838:	d1f5      	bne.n	f826 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    f83a:	7823      	ldrb	r3, [r4, #0]
    f83c:	2b01      	cmp	r3, #1
    f83e:	d104      	bne.n	f84a <bt_id_create+0x2e>
    f840:	79a3      	ldrb	r3, [r4, #6]
    f842:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f846:	2bc0      	cmp	r3, #192	; 0xc0
    f848:	d00a      	beq.n	f860 <bt_id_create+0x44>
			BT_ERR("Only static random identity address supported");
    f84a:	4b1b      	ldr	r3, [pc, #108]	; (f8b8 <bt_id_create+0x9c>)
    f84c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f850:	9305      	str	r3, [sp, #20]
    f852:	2302      	movs	r3, #2
    f854:	4819      	ldr	r0, [pc, #100]	; (f8bc <bt_id_create+0xa0>)
    f856:	aa04      	add	r2, sp, #16
    f858:	9304      	str	r3, [sp, #16]
    f85a:	f00e fa9b 	bl	1dd94 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
    f85e:	e7e3      	b.n	f828 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    f860:	4620      	mov	r0, r4
    f862:	f7ff ff65 	bl	f730 <id_find>
    f866:	2800      	cmp	r0, #0
    f868:	dbdd      	blt.n	f826 <bt_id_create+0xa>
			return -EALREADY;
    f86a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f86e:	e7dd      	b.n	f82c <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    f870:	4d13      	ldr	r5, [pc, #76]	; (f8c0 <bt_id_create+0xa4>)
    f872:	79eb      	ldrb	r3, [r5, #7]
    f874:	2b01      	cmp	r3, #1
    f876:	d01a      	beq.n	f8ae <bt_id_create+0x92>
    f878:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    f87c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f880:	07db      	lsls	r3, r3, #31
    f882:	d50b      	bpl.n	f89c <bt_id_create+0x80>
	new_id = bt_dev.id_count;
    f884:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    f886:	4621      	mov	r1, r4
    f888:	4630      	mov	r0, r6
    f88a:	f7ff ff95 	bl	f7b8 <id_create.constprop.0>
	if (err) {
    f88e:	2800      	cmp	r0, #0
    f890:	d1cc      	bne.n	f82c <bt_id_create+0x10>
		bt_dev.id_count++;
    f892:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    f894:	4630      	mov	r0, r6
		bt_dev.id_count++;
    f896:	3301      	adds	r3, #1
    f898:	71eb      	strb	r3, [r5, #7]
	return new_id;
    f89a:	e7c7      	b.n	f82c <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    f89c:	2c00      	cmp	r4, #0
    f89e:	d0c3      	beq.n	f828 <bt_id_create+0xc>
    f8a0:	4620      	mov	r0, r4
    f8a2:	4904      	ldr	r1, [pc, #16]	; (f8b4 <bt_id_create+0x98>)
    f8a4:	f00e fa6e 	bl	1dd84 <bt_addr_le_eq>
    f8a8:	2800      	cmp	r0, #0
    f8aa:	d0eb      	beq.n	f884 <bt_id_create+0x68>
    f8ac:	e7bc      	b.n	f828 <bt_id_create+0xc>
		return -ENOMEM;
    f8ae:	f06f 000b 	mvn.w	r0, #11
    f8b2:	e7bb      	b.n	f82c <bt_id_create+0x10>
    f8b4:	00022866 	.word	0x00022866
    f8b8:	00022f44 	.word	0x00022f44
    f8bc:	0002084c 	.word	0x0002084c
    f8c0:	20008000 	.word	0x20008000

0000f8c4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    f8c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    f8c6:	4604      	mov	r4, r0
{
    f8c8:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
    f8ca:	b960      	cbnz	r0, f8e6 <bt_id_read_public_addr+0x22>
		BT_WARN("Invalid input parameters");
    f8cc:	4b1a      	ldr	r3, [pc, #104]	; (f938 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
    f8ce:	9307      	str	r3, [sp, #28]
    f8d0:	2302      	movs	r3, #2
    f8d2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f8d6:	4819      	ldr	r0, [pc, #100]	; (f93c <bt_id_read_public_addr+0x78>)
    f8d8:	aa06      	add	r2, sp, #24
    f8da:	9306      	str	r3, [sp, #24]
    f8dc:	f00e fa5a 	bl	1dd94 <z_log_msg_static_create.constprop.0>
		return 0U;
    f8e0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    f8e2:	b008      	add	sp, #32
    f8e4:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    f8e6:	2100      	movs	r1, #0
    f8e8:	f241 0009 	movw	r0, #4105	; 0x1009
    f8ec:	aa01      	add	r2, sp, #4
    f8ee:	f7fe ff35 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f8f2:	4606      	mov	r6, r0
    f8f4:	b108      	cbz	r0, f8fa <bt_id_read_public_addr+0x36>
		BT_WARN("Failed to read public address");
    f8f6:	4b12      	ldr	r3, [pc, #72]	; (f940 <bt_id_read_public_addr+0x7c>)
    f8f8:	e7e9      	b.n	f8ce <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    f8fa:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    f8fc:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f8fe:	689d      	ldr	r5, [r3, #8]
    f900:	4910      	ldr	r1, [pc, #64]	; (f944 <bt_id_read_public_addr+0x80>)
    f902:	3501      	adds	r5, #1
    f904:	4628      	mov	r0, r5
    f906:	f00e f8ef 	bl	1dae8 <memcmp>
    f90a:	b918      	cbnz	r0, f914 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    f90c:	9801      	ldr	r0, [sp, #4]
    f90e:	f004 f91b 	bl	13b48 <net_buf_unref>
		return 0U;
    f912:	e7e5      	b.n	f8e0 <bt_id_read_public_addr+0x1c>
    f914:	2206      	movs	r2, #6
    f916:	4628      	mov	r0, r5
    f918:	490b      	ldr	r1, [pc, #44]	; (f948 <bt_id_read_public_addr+0x84>)
    f91a:	f00e f8e5 	bl	1dae8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f91e:	2800      	cmp	r0, #0
    f920:	d0f4      	beq.n	f90c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    f922:	2206      	movs	r2, #6
    f924:	4629      	mov	r1, r5
    f926:	1c60      	adds	r0, r4, #1
    f928:	f00e f8ee 	bl	1db08 <memcpy>
	net_buf_unref(rsp);
    f92c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    f92e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    f930:	f004 f90a 	bl	13b48 <net_buf_unref>
	return 1U;
    f934:	2001      	movs	r0, #1
    f936:	e7d4      	b.n	f8e2 <bt_id_read_public_addr+0x1e>
    f938:	00022f72 	.word	0x00022f72
    f93c:	0002084c 	.word	0x0002084c
    f940:	00022f8b 	.word	0x00022f8b
    f944:	00022873 	.word	0x00022873
    f948:	0002286d 	.word	0x0002286d

0000f94c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    f94c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    f94e:	4668      	mov	r0, sp
    f950:	f7ff ffb8 	bl	f8c4 <bt_id_read_public_addr>
    f954:	4b04      	ldr	r3, [pc, #16]	; (f968 <bt_setup_public_id_addr+0x1c>)
    f956:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    f958:	b118      	cbz	r0, f962 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    f95a:	4669      	mov	r1, sp
    f95c:	2000      	movs	r0, #0
    f95e:	f7ff ff2b 	bl	f7b8 <id_create.constprop.0>
}
    f962:	b003      	add	sp, #12
    f964:	f85d fb04 	ldr.w	pc, [sp], #4
    f968:	20008000 	.word	0x20008000

0000f96c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    f96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f970:	4b22      	ldr	r3, [pc, #136]	; (f9fc <bt_read_static_addr+0x90>)
{
    f972:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f974:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
    f978:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f97a:	07db      	lsls	r3, r3, #31
{
    f97c:	b088      	sub	sp, #32
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f97e:	d40e      	bmi.n	f99e <bt_read_static_addr+0x32>
		BT_WARN("Read Static Addresses command not available");
    f980:	4b1f      	ldr	r3, [pc, #124]	; (fa00 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
    f982:	9307      	str	r3, [sp, #28]
		return 0;
    f984:	2500      	movs	r5, #0
		BT_WARN("Failed to read static addresses");
    f986:	2302      	movs	r3, #2
    f988:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f98c:	481d      	ldr	r0, [pc, #116]	; (fa04 <bt_read_static_addr+0x98>)
    f98e:	aa06      	add	r2, sp, #24
    f990:	9306      	str	r3, [sp, #24]
    f992:	f00e f9ff 	bl	1dd94 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    f996:	4628      	mov	r0, r5
    f998:	b008      	add	sp, #32
    f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    f99e:	2100      	movs	r1, #0
    f9a0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    f9a4:	aa01      	add	r2, sp, #4
    f9a6:	f7fe fed9 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    f9aa:	4604      	mov	r4, r0
    f9ac:	b108      	cbz	r0, f9b2 <bt_read_static_addr+0x46>
		BT_WARN("Failed to read static addresses");
    f9ae:	4b16      	ldr	r3, [pc, #88]	; (fa08 <bt_read_static_addr+0x9c>)
    f9b0:	e7e7      	b.n	f982 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
    f9b2:	9b01      	ldr	r3, [sp, #4]
    f9b4:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    f9b6:	7875      	ldrb	r5, [r6, #1]
    f9b8:	3602      	adds	r6, #2
    f9ba:	4545      	cmp	r5, r8
    f9bc:	bf28      	it	cs
    f9be:	4645      	movcs	r5, r8
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    f9c0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    f9c4:	42a5      	cmp	r5, r4
    f9c6:	dc0f      	bgt.n	f9e8 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
    f9c8:	9801      	ldr	r0, [sp, #4]
    f9ca:	f004 f8bd 	bl	13b48 <net_buf_unref>
	if (!cnt) {
    f9ce:	2d00      	cmp	r5, #0
    f9d0:	d1e1      	bne.n	f996 <bt_read_static_addr+0x2a>
		BT_WARN("No static addresses stored in controller");
    f9d2:	4b0e      	ldr	r3, [pc, #56]	; (fa0c <bt_read_static_addr+0xa0>)
    f9d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f9d8:	9307      	str	r3, [sp, #28]
    f9da:	2302      	movs	r3, #2
    f9dc:	4809      	ldr	r0, [pc, #36]	; (fa04 <bt_read_static_addr+0x98>)
    f9de:	aa06      	add	r2, sp, #24
    f9e0:	9306      	str	r3, [sp, #24]
    f9e2:	f00e f9d7 	bl	1dd94 <z_log_msg_static_create.constprop.0>
    f9e6:	e7d6      	b.n	f996 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    f9e8:	4631      	mov	r1, r6
    f9ea:	fb08 7004 	mla	r0, r8, r4, r7
    f9ee:	2216      	movs	r2, #22
    f9f0:	f00e f88a 	bl	1db08 <memcpy>
	for (i = 0; i < cnt; i++) {
    f9f4:	3401      	adds	r4, #1
    f9f6:	3616      	adds	r6, #22
    f9f8:	e7e4      	b.n	f9c4 <bt_read_static_addr+0x58>
    f9fa:	bf00      	nop
    f9fc:	20008000 	.word	0x20008000
    fa00:	00022fa9 	.word	0x00022fa9
    fa04:	0002084c 	.word	0x0002084c
    fa08:	00022fd5 	.word	0x00022fd5
    fa0c:	00022ff5 	.word	0x00022ff5

0000fa10 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    fa10:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    fa12:	4e15      	ldr	r6, [pc, #84]	; (fa68 <bt_setup_random_id_addr+0x58>)
{
    fa14:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    fa16:	79f4      	ldrb	r4, [r6, #7]
    fa18:	b92c      	cbnz	r4, fa26 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    fa1a:	2101      	movs	r1, #1
    fa1c:	a802      	add	r0, sp, #8
    fa1e:	f7ff ffa5 	bl	f96c <bt_read_static_addr>
    fa22:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    fa24:	b9c8      	cbnz	r0, fa5a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    fa26:	2100      	movs	r1, #0
    fa28:	4608      	mov	r0, r1
}
    fa2a:	b009      	add	sp, #36	; 0x24
    fa2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    fa30:	f7ff bef4 	b.w	f81c <bt_id_create>
    fa34:	ab02      	add	r3, sp, #8
    fa36:	fb07 3105 	mla	r1, r7, r5, r3
    fa3a:	2206      	movs	r2, #6
    fa3c:	f10d 0001 	add.w	r0, sp, #1
    fa40:	f00e f862 	bl	1db08 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    fa44:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    fa46:	4669      	mov	r1, sp
    fa48:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    fa4a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    fa4e:	f7ff feb3 	bl	f7b8 <id_create.constprop.0>
				if (err) {
    fa52:	3401      	adds	r4, #1
    fa54:	b110      	cbz	r0, fa5c <bt_setup_random_id_addr+0x4c>
}
    fa56:	b009      	add	sp, #36	; 0x24
    fa58:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    fa5a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    fa5c:	79f3      	ldrb	r3, [r6, #7]
    fa5e:	b2e5      	uxtb	r5, r4
    fa60:	42ab      	cmp	r3, r5
    fa62:	d8e7      	bhi.n	fa34 <bt_setup_random_id_addr+0x24>
			return 0;
    fa64:	2000      	movs	r0, #0
    fa66:	e7f6      	b.n	fa56 <bt_setup_random_id_addr+0x46>
    fa68:	20008000 	.word	0x20008000

0000fa6c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    fa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa70:	4690      	mov	r8, r2
    fa72:	460e      	mov	r6, r1
    fa74:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    fa76:	4602      	mov	r2, r0
    fa78:	2800      	cmp	r0, #0
    fa7a:	d04b      	beq.n	fb14 <bt_id_set_adv_own_addr+0xa8>
    fa7c:	2b00      	cmp	r3, #0
    fa7e:	d049      	beq.n	fb14 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    fa80:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    fa82:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    fa84:	d531      	bpl.n	faea <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    fa86:	4f25      	ldr	r7, [pc, #148]	; (fb1c <bt_id_set_adv_own_addr+0xb0>)
    fa88:	f1b8 0f00 	cmp.w	r8, #0
    fa8c:	d013      	beq.n	fab6 <bt_id_set_adv_own_addr+0x4a>
    fa8e:	0688      	lsls	r0, r1, #26
    fa90:	d40a      	bmi.n	faa8 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    fa92:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    fa96:	5cfb      	ldrb	r3, [r7, r3]
    fa98:	2b01      	cmp	r3, #1
    fa9a:	d015      	beq.n	fac8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    fa9c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    fa9e:	06b2      	lsls	r2, r6, #26
    faa0:	d50f      	bpl.n	fac2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    faa2:	f043 0302 	orr.w	r3, r3, #2
    faa6:	e00b      	b.n	fac0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    faa8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    faac:	0659      	lsls	r1, r3, #25
    faae:	d4f0      	bmi.n	fa92 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    fab0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fab4:	e006      	b.n	fac4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    fab6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    faba:	5cfb      	ldrb	r3, [r7, r3]
    fabc:	2b01      	cmp	r3, #1
    fabe:	d003      	beq.n	fac8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    fac0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    fac2:	2000      	movs	r0, #0
}
    fac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    fac8:	2107      	movs	r1, #7
    faca:	fb01 7104 	mla	r1, r1, r4, r7
    face:	4610      	mov	r0, r2
    fad0:	3101      	adds	r1, #1
    fad2:	f00e f967 	bl	1dda4 <bt_id_set_adv_random_addr>
				if (err) {
    fad6:	2800      	cmp	r0, #0
    fad8:	d1f4      	bne.n	fac4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    fada:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    fade:	5d3b      	ldrb	r3, [r7, r4]
    fae0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    fae2:	f1b8 0f00 	cmp.w	r8, #0
    fae6:	d0ec      	beq.n	fac2 <bt_id_set_adv_own_addr+0x56>
    fae8:	e7d9      	b.n	fa9e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    faea:	074b      	lsls	r3, r1, #29
    faec:	d50e      	bpl.n	fb0c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    faee:	4e0b      	ldr	r6, [pc, #44]	; (fb1c <bt_id_set_adv_own_addr+0xb0>)
    faf0:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    faf4:	5df3      	ldrb	r3, [r6, r7]
    faf6:	2b01      	cmp	r3, #1
    faf8:	d1e2      	bne.n	fac0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    fafa:	2107      	movs	r1, #7
    fafc:	fb11 3104 	smlabb	r1, r1, r4, r3
    fb00:	4431      	add	r1, r6
    fb02:	f00e f94f 	bl	1dda4 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    fb06:	5df3      	ldrb	r3, [r6, r7]
    fb08:	702b      	strb	r3, [r5, #0]
		if (err) {
    fb0a:	e7db      	b.n	fac4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    fb0c:	f00e f952 	bl	1ddb4 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    fb10:	2301      	movs	r3, #1
    fb12:	e7f9      	b.n	fb08 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    fb14:	f06f 0015 	mvn.w	r0, #21
    fb18:	e7d4      	b.n	fac4 <bt_id_set_adv_own_addr+0x58>
    fb1a:	bf00      	nop
    fb1c:	20008000 	.word	0x20008000

0000fb20 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    fb20:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fb22:	4d13      	ldr	r5, [pc, #76]	; (fb70 <bt_id_init+0x50>)
{
    fb24:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fb26:	79eb      	ldrb	r3, [r5, #7]
    fb28:	b11b      	cbz	r3, fb32 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    fb2a:	2400      	movs	r4, #0
}
    fb2c:	4620      	mov	r0, r4
    fb2e:	b007      	add	sp, #28
    fb30:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    fb32:	f7ff ff0b 	bl	f94c <bt_setup_public_id_addr>
		if (err) {
    fb36:	4604      	mov	r4, r0
    fb38:	b150      	cbz	r0, fb50 <bt_id_init+0x30>
			BT_ERR("Unable to set identity address");
    fb3a:	4b0e      	ldr	r3, [pc, #56]	; (fb74 <bt_id_init+0x54>)
			BT_ERR("Unable to set random address");
    fb3c:	9305      	str	r3, [sp, #20]
    fb3e:	2302      	movs	r3, #2
    fb40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fb44:	480c      	ldr	r0, [pc, #48]	; (fb78 <bt_id_init+0x58>)
    fb46:	aa04      	add	r2, sp, #16
    fb48:	9304      	str	r3, [sp, #16]
    fb4a:	f00e f923 	bl	1dd94 <z_log_msg_static_create.constprop.0>
			return err;
    fb4e:	e7ed      	b.n	fb2c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    fb50:	79eb      	ldrb	r3, [r5, #7]
    fb52:	2b00      	cmp	r3, #0
    fb54:	d1e9      	bne.n	fb2a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    fb56:	f7ff ff5b 	bl	fa10 <bt_setup_random_id_addr>
		if (err) {
    fb5a:	4604      	mov	r4, r0
    fb5c:	2800      	cmp	r0, #0
    fb5e:	d1ec      	bne.n	fb3a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    fb60:	1c68      	adds	r0, r5, #1
    fb62:	f7ff fdfd 	bl	f760 <set_random_address>
		if (err) {
    fb66:	4604      	mov	r4, r0
    fb68:	2800      	cmp	r0, #0
    fb6a:	d0df      	beq.n	fb2c <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
    fb6c:	4b03      	ldr	r3, [pc, #12]	; (fb7c <bt_id_init+0x5c>)
    fb6e:	e7e5      	b.n	fb3c <bt_id_init+0x1c>
    fb70:	20008000 	.word	0x20008000
    fb74:	0002301e 	.word	0x0002301e
    fb78:	0002084c 	.word	0x0002084c
    fb7c:	0002303d 	.word	0x0002303d

0000fb80 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb84:	460c      	mov	r4, r1
    fb86:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    fb88:	2120      	movs	r1, #32
{
    fb8a:	4692      	mov	sl, r2
    fb8c:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    fb8e:	f7fe fd97 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    fb92:	4605      	mov	r5, r0
    fb94:	2800      	cmp	r0, #0
    fb96:	d05b      	beq.n	fc50 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    fb98:	2120      	movs	r1, #32
    fb9a:	3008      	adds	r0, #8
    fb9c:	f004 f8f6 	bl	13d8c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    fba0:	2220      	movs	r2, #32
    fba2:	4681      	mov	r9, r0
    fba4:	2100      	movs	r1, #0
    fba6:	f00d ffba 	bl	1db1e <memset>
	uint8_t set_data_len = 0;
    fbaa:	2600      	movs	r6, #0

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    fbac:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    fbb0:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
    fbb4:	2300      	movs	r3, #0
    fbb6:	f8d4 8000 	ldr.w	r8, [r4]
    fbba:	6862      	ldr	r2, [r4, #4]
    fbbc:	4293      	cmp	r3, r2
    fbbe:	d30c      	bcc.n	fbda <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    fbc0:	3408      	adds	r4, #8
    fbc2:	45a2      	cmp	sl, r4
    fbc4:	d1f6      	bne.n	fbb4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fbc6:	2200      	movs	r2, #0
    fbc8:	4629      	mov	r1, r5
    fbca:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
    fbcc:	f889 6000 	strb.w	r6, [r9]
}
    fbd0:	b009      	add	sp, #36	; 0x24
    fbd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fbd6:	f7fe bdc1 	b.w	e75c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    fbda:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    fbde:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    fbe0:	1811      	adds	r1, r2, r0
    fbe2:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    fbe4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    fbe8:	d91b      	bls.n	fc22 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    fbea:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    fbee:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    fbf2:	d101      	bne.n	fbf8 <hci_set_ad+0x78>
    fbf4:	2a00      	cmp	r2, #0
    fbf6:	dc12      	bgt.n	fc1e <hci_set_ad+0x9e>
					BT_ERR("Too big advertising data");
    fbf8:	4b17      	ldr	r3, [pc, #92]	; (fc58 <hci_set_ad+0xd8>)
    fbfa:	9307      	str	r3, [sp, #28]
    fbfc:	2302      	movs	r3, #2
    fbfe:	9306      	str	r3, [sp, #24]
    fc00:	2300      	movs	r3, #0
    fc02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fc06:	4815      	ldr	r0, [pc, #84]	; (fc5c <hci_set_ad+0xdc>)
    fc08:	aa06      	add	r2, sp, #24
    fc0a:	f7fb fe7d 	bl	b908 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    fc0e:	4628      	mov	r0, r5
    fc10:	f003 ff9a 	bl	13b48 <net_buf_unref>
					return -EINVAL;
    fc14:	f06f 0015 	mvn.w	r0, #21
}
    fc18:	b009      	add	sp, #36	; 0x24
    fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    fc1e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    fc22:	b2d7      	uxtb	r7, r2
    fc24:	1c79      	adds	r1, r7, #1
    fc26:	f80b 1006 	strb.w	r1, [fp, r6]
    fc2a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    fc2c:	b2c9      	uxtb	r1, r1
    fc2e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    fc32:	f8d8 1004 	ldr.w	r1, [r8, #4]
    fc36:	fa5b f080 	uxtab	r0, fp, r0
    fc3a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    fc3c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    fc3e:	f00d ff63 	bl	1db08 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    fc42:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    fc44:	4437      	add	r7, r6
    fc46:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
    fc48:	3301      	adds	r3, #1
    fc4a:	f108 0808 	add.w	r8, r8, #8
    fc4e:	e7b4      	b.n	fbba <hci_set_ad+0x3a>
		return -ENOBUFS;
    fc50:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fc54:	e7e0      	b.n	fc18 <hci_set_ad+0x98>
    fc56:	bf00      	nop
    fc58:	00023060 	.word	0x00023060
    fc5c:	0002080c 	.word	0x0002080c

0000fc60 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    fc60:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    fc62:	4605      	mov	r5, r0
    fc64:	4b16      	ldr	r3, [pc, #88]	; (fcc0 <le_adv_start_add_conn+0x60>)
    fc66:	f815 2b09 	ldrb.w	r2, [r5], #9
{
    fc6a:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    fc6c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    fc70:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
    fc72:	2207      	movs	r2, #7
    fc74:	4628      	mov	r0, r5
    fc76:	4913      	ldr	r1, [pc, #76]	; (fcc4 <le_adv_start_add_conn+0x64>)
    fc78:	f00d ff36 	bl	1dae8 <memcmp>
    fc7c:	4603      	mov	r3, r0
    fc7e:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    fc80:	b96b      	cbnz	r3, fc9e <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    fc82:	4911      	ldr	r1, [pc, #68]	; (fcc8 <le_adv_start_add_conn+0x68>)
    fc84:	f001 f85e 	bl	10d44 <bt_conn_add_le>
		if (!conn) {
    fc88:	4604      	mov	r4, r0
    fc8a:	b910      	cbnz	r0, fc92 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
    fc8c:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    fc90:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    fc92:	2104      	movs	r1, #4
    fc94:	f000 fe4c 	bl	10930 <bt_conn_set_state>
		return 0;
    fc98:	2000      	movs	r0, #0
		*out_conn = conn;
    fc9a:	6034      	str	r4, [r6, #0]
    fc9c:	e7f8      	b.n	fc90 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    fc9e:	4629      	mov	r1, r5
    fca0:	f001 f884 	bl	10dac <bt_conn_exists_le>
    fca4:	b940      	cbnz	r0, fcb8 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    fca6:	7820      	ldrb	r0, [r4, #0]
    fca8:	4629      	mov	r1, r5
    fcaa:	f001 f84b 	bl	10d44 <bt_conn_add_le>
	if (!conn) {
    fcae:	4604      	mov	r4, r0
    fcb0:	2800      	cmp	r0, #0
    fcb2:	d0eb      	beq.n	fc8c <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    fcb4:	2105      	movs	r1, #5
    fcb6:	e7ed      	b.n	fc94 <le_adv_start_add_conn+0x34>
		return -EINVAL;
    fcb8:	f06f 0015 	mvn.w	r0, #21
    fcbc:	e7e8      	b.n	fc90 <le_adv_start_add_conn+0x30>
    fcbe:	bf00      	nop
    fcc0:	20008000 	.word	0x20008000
    fcc4:	00022866 	.word	0x00022866
    fcc8:	0002285f 	.word	0x0002285f

0000fccc <valid_adv_param>:
{
    fccc:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    fcce:	6843      	ldr	r3, [r0, #4]
{
    fcd0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    fcd2:	0558      	lsls	r0, r3, #21
    fcd4:	d501      	bpl.n	fcda <valid_adv_param+0xe>
		return false;
    fcd6:	2000      	movs	r0, #0
}
    fcd8:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fcda:	6922      	ldr	r2, [r4, #16]
    fcdc:	b10a      	cbz	r2, fce2 <valid_adv_param+0x16>
    fcde:	07d9      	lsls	r1, r3, #31
    fce0:	d5f9      	bpl.n	fcd6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    fce2:	4d19      	ldr	r5, [pc, #100]	; (fd48 <valid_adv_param+0x7c>)
    fce4:	7820      	ldrb	r0, [r4, #0]
    fce6:	79eb      	ldrb	r3, [r5, #7]
    fce8:	4283      	cmp	r3, r0
    fcea:	d9f4      	bls.n	fcd6 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    fcec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    fcf0:	2207      	movs	r2, #7
    fcf2:	4916      	ldr	r1, [pc, #88]	; (fd4c <valid_adv_param+0x80>)
    fcf4:	4428      	add	r0, r5
    fcf6:	f00d fef7 	bl	1dae8 <memcmp>
	if (param->id >= bt_dev.id_count ||
    fcfa:	2800      	cmp	r0, #0
    fcfc:	d0eb      	beq.n	fcd6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fcfe:	6860      	ldr	r0, [r4, #4]
    fd00:	07c2      	lsls	r2, r0, #31
    fd02:	d406      	bmi.n	fd12 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    fd04:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    fd08:	2b08      	cmp	r3, #8
    fd0a:	d802      	bhi.n	fd12 <valid_adv_param+0x46>
    fd0c:	68a3      	ldr	r3, [r4, #8]
    fd0e:	2b9f      	cmp	r3, #159	; 0x9f
    fd10:	d9e1      	bls.n	fcd6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    fd12:	f010 0f30 	tst.w	r0, #48	; 0x30
    fd16:	d002      	beq.n	fd1e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    fd18:	6923      	ldr	r3, [r4, #16]
    fd1a:	2b00      	cmp	r3, #0
    fd1c:	d0db      	beq.n	fcd6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    fd1e:	06c3      	lsls	r3, r0, #27
    fd20:	d401      	bmi.n	fd26 <valid_adv_param+0x5a>
    fd22:	6923      	ldr	r3, [r4, #16]
    fd24:	b943      	cbnz	r3, fd38 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    fd26:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    fd2a:	429a      	cmp	r2, r3
    fd2c:	d8d3      	bhi.n	fcd6 <valid_adv_param+0xa>
    fd2e:	2a1f      	cmp	r2, #31
    fd30:	d9d1      	bls.n	fcd6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    fd32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    fd36:	d8ce      	bhi.n	fcd6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    fd38:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    fd3c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    fd40:	bf18      	it	ne
    fd42:	2001      	movne	r0, #1
    fd44:	e7c8      	b.n	fcd8 <valid_adv_param+0xc>
    fd46:	bf00      	nop
    fd48:	20008000 	.word	0x20008000
    fd4c:	00022866 	.word	0x00022866

0000fd50 <bt_le_adv_lookup_legacy>:
}
    fd50:	4800      	ldr	r0, [pc, #0]	; (fd54 <bt_le_adv_lookup_legacy+0x4>)
    fd52:	4770      	bx	lr
    fd54:	20008018 	.word	0x20008018

0000fd58 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd5c:	b093      	sub	sp, #76	; 0x4c
    fd5e:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    fd60:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    fd62:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    fd66:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
    fd68:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fd6c:	4892      	ldr	r0, [pc, #584]	; (ffb8 <bt_le_adv_start_legacy+0x260>)
    fd6e:	bf18      	it	ne
    fd70:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
    fd72:	9307      	str	r3, [sp, #28]
    fd74:	f00e f848 	bl	1de08 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fd78:	0747      	lsls	r7, r0, #29
{
    fd7a:	460d      	mov	r5, r1
    fd7c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fd7e:	f140 8112 	bpl.w	ffa6 <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    fd82:	4608      	mov	r0, r1
    fd84:	f7ff ffa2 	bl	fccc <valid_adv_param>
    fd88:	b928      	cbnz	r0, fd96 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    fd8a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    fd8e:	4620      	mov	r0, r4
    fd90:	b013      	add	sp, #76	; 0x4c
    fd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    fd96:	4628      	mov	r0, r5
    fd98:	f00e f823 	bl	1dde2 <bt_id_adv_random_addr_check>
    fd9c:	4681      	mov	r9, r0
    fd9e:	2800      	cmp	r0, #0
    fda0:	d0f3      	beq.n	fd8a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fda2:	f106 0810 	add.w	r8, r6, #16
    fda6:	4640      	mov	r0, r8
    fda8:	f00e f82e 	bl	1de08 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    fdac:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    fdb0:	0600      	lsls	r0, r0, #24
    fdb2:	f100 80fb 	bmi.w	ffac <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
    fdb6:	220f      	movs	r2, #15
    fdb8:	4639      	mov	r1, r7
    fdba:	a808      	add	r0, sp, #32
    fdbc:	f00d feaf 	bl	1db1e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fdc0:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    fdc2:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fdc4:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    fdc8:	68eb      	ldr	r3, [r5, #12]
    fdca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    fdce:	f00e f80c 	bl	1ddea <get_adv_channel_map>
	if (adv->id != param->id) {
    fdd2:	7832      	ldrb	r2, [r6, #0]
    fdd4:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    fdd6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    fdda:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    fddc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    fde0:	d004      	beq.n	fdec <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fde2:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    fde6:	4874      	ldr	r0, [pc, #464]	; (ffb8 <bt_le_adv_start_legacy+0x260>)
    fde8:	f00e f811 	bl	1de0e <atomic_and>
	adv->id = param->id;
    fdec:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    fdee:	4a73      	ldr	r2, [pc, #460]	; (ffbc <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
    fdf0:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    fdf2:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    fdf6:	4630      	mov	r0, r6
    fdf8:	4622      	mov	r2, r4
    fdfa:	6869      	ldr	r1, [r5, #4]
    fdfc:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    fe00:	f7ff fe34 	bl	fa6c <bt_id_set_adv_own_addr>
	if (err) {
    fe04:	4604      	mov	r4, r0
    fe06:	2800      	cmp	r0, #0
    fe08:	d1c1      	bne.n	fd8e <bt_le_adv_start_legacy+0x36>
	memcpy(dst, src, sizeof(*dst));
    fe0a:	2207      	movs	r2, #7
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fe0c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    fe10:	f1ba 0f00 	cmp.w	sl, #0
    fe14:	d013      	beq.n	fe3e <bt_le_adv_start_legacy+0xe6>
    fe16:	6929      	ldr	r1, [r5, #16]
    fe18:	f00d fe76 	bl	1db08 <memcpy>
	name_type = get_adv_name_type_param(param);
    fe1c:	4628      	mov	r0, r5
    fe1e:	f00e f886 	bl	1df2e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fe22:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    fe24:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fe26:	07d9      	lsls	r1, r3, #31
    fe28:	d416      	bmi.n	fe58 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    fe2a:	059b      	lsls	r3, r3, #22
    fe2c:	d403      	bmi.n	fe36 <bt_le_adv_start_legacy+0xde>
    fe2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fe30:	b90b      	cbnz	r3, fe36 <bt_le_adv_start_legacy+0xde>
    fe32:	2f02      	cmp	r7, #2
    fe34:	d15a      	bne.n	feec <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    fe36:	2302      	movs	r3, #2
    fe38:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fe3c:	e01a      	b.n	fe74 <bt_le_adv_start_legacy+0x11c>
    fe3e:	4960      	ldr	r1, [pc, #384]	; (ffc0 <bt_le_adv_start_legacy+0x268>)
    fe40:	f00d fe62 	bl	1db08 <memcpy>
	name_type = get_adv_name_type_param(param);
    fe44:	4628      	mov	r0, r5
    fe46:	f00e f872 	bl	1df2e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fe4a:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    fe4c:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fe4e:	07da      	lsls	r2, r3, #31
    fe50:	d5eb      	bpl.n	fe2a <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    fe52:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    fe56:	e00d      	b.n	fe74 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    fe58:	f013 0f10 	tst.w	r3, #16
    fe5c:	bf0c      	ite	eq
    fe5e:	2301      	moveq	r3, #1
    fe60:	2304      	movne	r3, #4
    fe62:	2207      	movs	r2, #7
    fe64:	6929      	ldr	r1, [r5, #16]
    fe66:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    fe6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
    fe6e:	46a1      	mov	r9, r4
    fe70:	f00d fe4a 	bl	1db08 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    fe74:	210f      	movs	r1, #15
    fe76:	f242 0006 	movw	r0, #8198	; 0x2006
    fe7a:	f7fe fc21 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
    fe7e:	4604      	mov	r4, r0
    fe80:	2800      	cmp	r0, #0
    fe82:	f000 8096 	beq.w	ffb2 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fe86:	220f      	movs	r2, #15
    fe88:	a908      	add	r1, sp, #32
    fe8a:	3008      	adds	r0, #8
    fe8c:	f00e fffe 	bl	1ee8c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    fe90:	4621      	mov	r1, r4
    fe92:	2200      	movs	r2, #0
    fe94:	f242 0006 	movw	r0, #8198	; 0x2006
    fe98:	f7fe fc60 	bl	e75c <bt_hci_cmd_send_sync>
	if (err) {
    fe9c:	4604      	mov	r4, r0
    fe9e:	2800      	cmp	r0, #0
    fea0:	f47f af75 	bne.w	fd8e <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
    fea4:	f1ba 0f00 	cmp.w	sl, #0
    fea8:	d026      	beq.n	fef8 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    feaa:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    feac:	07dc      	lsls	r4, r3, #31
    feae:	d431      	bmi.n	ff14 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
    feb0:	2101      	movs	r1, #1
    feb2:	4630      	mov	r0, r6
    feb4:	f00e f84b 	bl	1df4e <bt_le_adv_set_enable_legacy>
	if (err) {
    feb8:	4604      	mov	r4, r0
    feba:	2800      	cmp	r0, #0
    febc:	d06b      	beq.n	ff96 <bt_le_adv_start_legacy+0x23e>
		BT_ERR("Failed to start advertiser");
    febe:	4b41      	ldr	r3, [pc, #260]	; (ffc4 <bt_le_adv_start_legacy+0x26c>)
    fec0:	9311      	str	r3, [sp, #68]	; 0x44
    fec2:	2302      	movs	r3, #2
    fec4:	9310      	str	r3, [sp, #64]	; 0x40
    fec6:	2300      	movs	r3, #0
    fec8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fecc:	483e      	ldr	r0, [pc, #248]	; (ffc8 <bt_le_adv_start_legacy+0x270>)
    fece:	aa10      	add	r2, sp, #64	; 0x40
    fed0:	f7fb fd1a 	bl	b908 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fed4:	9d07      	ldr	r5, [sp, #28]
    fed6:	2d00      	cmp	r5, #0
    fed8:	f43f af59 	beq.w	fd8e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fedc:	4628      	mov	r0, r5
    fede:	2100      	movs	r1, #0
    fee0:	f000 fd26 	bl	10930 <bt_conn_set_state>
			bt_conn_unref(conn);
    fee4:	4628      	mov	r0, r5
    fee6:	f000 fceb 	bl	108c0 <bt_conn_unref>
    feea:	e750      	b.n	fd8e <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    feec:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    feee:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    fef2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fef6:	e7bd      	b.n	fe74 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    fef8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fefa:	4659      	mov	r1, fp
    fefc:	9300      	str	r3, [sp, #0]
    fefe:	4630      	mov	r0, r6
    ff00:	e9cd 9701 	strd	r9, r7, [sp, #4]
    ff04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ff06:	9a05      	ldr	r2, [sp, #20]
    ff08:	f00d ff9f 	bl	1de4a <le_adv_update.constprop.0>
		if (err) {
    ff0c:	4604      	mov	r4, r0
    ff0e:	2800      	cmp	r0, #0
    ff10:	d0cb      	beq.n	feaa <bt_le_adv_start_legacy+0x152>
    ff12:	e73c      	b.n	fd8e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    ff14:	4630      	mov	r0, r6
    ff16:	a907      	add	r1, sp, #28
    ff18:	f7ff fea2 	bl	fc60 <le_adv_start_add_conn>
		if (err) {
    ff1c:	4604      	mov	r4, r0
    ff1e:	2800      	cmp	r0, #0
    ff20:	d0c6      	beq.n	feb0 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
    ff22:	f110 0f0c 	cmn.w	r0, #12
    ff26:	f47f af32 	bne.w	fd8e <bt_le_adv_start_legacy+0x36>
    ff2a:	f1ba 0f00 	cmp.w	sl, #0
    ff2e:	f47f af2e 	bne.w	fd8e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    ff32:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    ff34:	0798      	lsls	r0, r3, #30
    ff36:	f53f af2a 	bmi.w	fd8e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ff3a:	686c      	ldr	r4, [r5, #4]
    ff3c:	f084 0402 	eor.w	r4, r4, #2
    ff40:	f3c4 0440 	ubfx	r4, r4, #1, #1
    ff44:	f004 0201 	and.w	r2, r4, #1
    ff48:	210e      	movs	r1, #14
    ff4a:	4640      	mov	r0, r8
    ff4c:	f00d ff6a 	bl	1de24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    ff50:	1e7b      	subs	r3, r7, #1
    ff52:	425a      	negs	r2, r3
    ff54:	415a      	adcs	r2, r3
    ff56:	2108      	movs	r1, #8
    ff58:	4640      	mov	r0, r8
    ff5a:	f00d ff63 	bl	1de24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    ff5e:	1eb9      	subs	r1, r7, #2
    ff60:	424a      	negs	r2, r1
    ff62:	414a      	adcs	r2, r1
    ff64:	4640      	mov	r0, r8
    ff66:	2109      	movs	r1, #9
    ff68:	f00d ff5c 	bl	1de24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    ff6c:	686a      	ldr	r2, [r5, #4]
    ff6e:	210a      	movs	r1, #10
    ff70:	4640      	mov	r0, r8
    ff72:	f002 0201 	and.w	r2, r2, #1
    ff76:	f00d ff55 	bl	1de24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    ff7a:	464a      	mov	r2, r9
    ff7c:	210b      	movs	r1, #11
    ff7e:	4640      	mov	r0, r8
    ff80:	f00d ff50 	bl	1de24 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    ff84:	686a      	ldr	r2, [r5, #4]
    ff86:	210d      	movs	r1, #13
    ff88:	4640      	mov	r0, r8
    ff8a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    ff8e:	f00d ff49 	bl	1de24 <atomic_set_bit_to>
	return 0;
    ff92:	2400      	movs	r4, #0
    ff94:	e6fb      	b.n	fd8e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ff96:	9807      	ldr	r0, [sp, #28]
    ff98:	b108      	cbz	r0, ff9e <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
    ff9a:	f000 fc91 	bl	108c0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ff9e:	f1ba 0f00 	cmp.w	sl, #0
    ffa2:	d1cf      	bne.n	ff44 <bt_le_adv_start_legacy+0x1ec>
    ffa4:	e7c9      	b.n	ff3a <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
    ffa6:	f06f 040a 	mvn.w	r4, #10
    ffaa:	e6f0      	b.n	fd8e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    ffac:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ffb0:	e6ed      	b.n	fd8e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    ffb2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    ffb6:	e6ea      	b.n	fd8e <bt_le_adv_start_legacy+0x36>
    ffb8:	200080cc 	.word	0x200080cc
    ffbc:	20008000 	.word	0x20008000
    ffc0:	00022866 	.word	0x00022866
    ffc4:	00023079 	.word	0x00023079
    ffc8:	0002080c 	.word	0x0002080c

0000ffcc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    ffcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ffce:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ffd0:	9a06      	ldr	r2, [sp, #24]
{
    ffd2:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ffd4:	e9cd 3200 	strd	r3, r2, [sp]
    ffd8:	462b      	mov	r3, r5
    ffda:	460a      	mov	r2, r1
    ffdc:	4601      	mov	r1, r0
    ffde:	4811      	ldr	r0, [pc, #68]	; (10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>)
    ffe0:	f7ff feba 	bl	fd58 <bt_le_adv_start_legacy>
    ffe4:	4621      	mov	r1, r4
    ffe6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    ffe8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    ffea:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    ffee:	429d      	cmp	r5, r3
    fff0:	d102      	bne.n	fff8 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    fff2:	4630      	mov	r0, r6
    fff4:	b002      	add	sp, #8
    fff6:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    fff8:	880a      	ldrh	r2, [r1, #0]
    fffa:	4282      	cmp	r2, r0
    fffc:	d104      	bne.n	10008 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8>
		    ad[i].data != NULL) {
    fffe:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   10000:	b112      	cbz	r2, 10008 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   10002:	7812      	ldrb	r2, [r2, #0]
   10004:	07d2      	lsls	r2, r2, #31
   10006:	d402      	bmi.n	1000e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe>
	for (i = 0; i < ad_len; i++) {
   10008:	3301      	adds	r3, #1
   1000a:	3108      	adds	r1, #8
   1000c:	e7ef      	b.n	ffee <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1000e:	4906      	ldr	r1, [pc, #24]	; (10028 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x28>)
   10010:	4806      	ldr	r0, [pc, #24]	; (1002c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2c>)
   10012:	f009 ff1d 	bl	19e50 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   10016:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1001a:	2300      	movs	r3, #0
   1001c:	4803      	ldr	r0, [pc, #12]	; (1002c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2c>)
   1001e:	f00a f833 	bl	1a088 <k_work_reschedule>
   10022:	e7e6      	b.n	fff2 <bt_le_adv_start+0x26>
   10024:	20008018 	.word	0x20008018
   10028:	000100b5 	.word	0x000100b5
   1002c:	20008030 	.word	0x20008030

00010030 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10030:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   10032:	481a      	ldr	r0, [pc, #104]	; (1009c <bt_le_adv_stop+0x6c>)
   10034:	f00d ffb0 	bl	1df98 <bt_le_lim_adv_cancel_timeout>
   10038:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1003c:	4818      	ldr	r0, [pc, #96]	; (100a0 <bt_le_adv_stop+0x70>)
   1003e:	f00d fee6 	bl	1de0e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10042:	4817      	ldr	r0, [pc, #92]	; (100a0 <bt_le_adv_stop+0x70>)
   10044:	f00d fee0 	bl	1de08 <atomic_get>
   10048:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1004a:	061a      	lsls	r2, r3, #24
   1004c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   10050:	d523      	bpl.n	1009a <bt_le_adv_stop+0x6a>
   10052:	4813      	ldr	r0, [pc, #76]	; (100a0 <bt_le_adv_stop+0x70>)
   10054:	f00d fed8 	bl	1de08 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10058:	0543      	lsls	r3, r0, #21
   1005a:	d514      	bpl.n	10086 <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   1005c:	2207      	movs	r2, #7
   1005e:	4911      	ldr	r1, [pc, #68]	; (100a4 <bt_le_adv_stop+0x74>)
   10060:	4811      	ldr	r0, [pc, #68]	; (100a8 <bt_le_adv_stop+0x78>)
   10062:	f00d fd41 	bl	1dae8 <memcmp>
   10066:	4b11      	ldr	r3, [pc, #68]	; (100ac <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10068:	b998      	cbnz	r0, 10092 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1006a:	2204      	movs	r2, #4
   1006c:	4910      	ldr	r1, [pc, #64]	; (100b0 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1006e:	7e18      	ldrb	r0, [r3, #24]
   10070:	f000 fecc 	bl	10e0c <bt_conn_lookup_state_le>
   10074:	4604      	mov	r4, r0
	if (conn) {
   10076:	b130      	cbz	r0, 10086 <bt_le_adv_stop+0x56>
		conn->err = status;
   10078:	2100      	movs	r1, #0
   1007a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1007c:	f000 fc58 	bl	10930 <bt_conn_set_state>
		bt_conn_unref(conn);
   10080:	4620      	mov	r0, r4
   10082:	f000 fc1d 	bl	108c0 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1008a:	2100      	movs	r1, #0
   1008c:	4803      	ldr	r0, [pc, #12]	; (1009c <bt_le_adv_stop+0x6c>)
   1008e:	f00d bf5e 	b.w	1df4e <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10092:	2205      	movs	r2, #5
   10094:	f103 0121 	add.w	r1, r3, #33	; 0x21
   10098:	e7e9      	b.n	1006e <bt_le_adv_stop+0x3e>
}
   1009a:	bd10      	pop	{r4, pc}
   1009c:	20008018 	.word	0x20008018
   100a0:	20008028 	.word	0x20008028
   100a4:	00022866 	.word	0x00022866
   100a8:	20008021 	.word	0x20008021
   100ac:	20008000 	.word	0x20008000
   100b0:	0002285f 	.word	0x0002285f

000100b4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   100b4:	b580      	push	{r7, lr}
   100b6:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   100b8:	f7ff ffba 	bl	10030 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   100bc:	b088      	sub	sp, #32
   100be:	466a      	mov	r2, sp
   100c0:	4b06      	ldr	r3, [pc, #24]	; (100dc <adv_timeout+0x28>)
   100c2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   100c6:	2303      	movs	r3, #3
   100c8:	f842 3f10 	str.w	r3, [r2, #16]!
   100cc:	2300      	movs	r3, #0
   100ce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   100d2:	4803      	ldr	r0, [pc, #12]	; (100e0 <adv_timeout+0x2c>)
   100d4:	f7fb fc18 	bl	b908 <z_impl_z_log_msg_static_create>
}
   100d8:	46bd      	mov	sp, r7
   100da:	bd80      	pop	{r7, pc}
   100dc:	00023094 	.word	0x00023094
   100e0:	0002080c 	.word	0x0002080c

000100e4 <bt_le_adv_resume>:
{
   100e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   100e6:	4c1e      	ldr	r4, [pc, #120]	; (10160 <bt_le_adv_resume+0x7c>)
   100e8:	4620      	mov	r0, r4
   100ea:	f00d fe8d 	bl	1de08 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   100ee:	0440      	lsls	r0, r0, #17
   100f0:	d534      	bpl.n	1015c <bt_le_adv_resume+0x78>
   100f2:	4620      	mov	r0, r4
   100f4:	f00d fe88 	bl	1de08 <atomic_get>
   100f8:	0601      	lsls	r1, r0, #24
   100fa:	d42f      	bmi.n	1015c <bt_le_adv_resume+0x78>
   100fc:	4620      	mov	r0, r4
   100fe:	f00d fe83 	bl	1de08 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10102:	0542      	lsls	r2, r0, #21
   10104:	d52a      	bpl.n	1015c <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   10106:	a901      	add	r1, sp, #4
   10108:	f1a4 0010 	sub.w	r0, r4, #16
   1010c:	f7ff fda8 	bl	fc60 <le_adv_start_add_conn>
	if (err) {
   10110:	4605      	mov	r5, r0
   10112:	bb18      	cbnz	r0, 1015c <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   10114:	2101      	movs	r1, #1
   10116:	f1a4 0010 	sub.w	r0, r4, #16
   1011a:	f00d ff18 	bl	1df4e <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1011e:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   10120:	b928      	cbnz	r0, 1012e <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   10122:	4630      	mov	r0, r6
}
   10124:	b002      	add	sp, #8
   10126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1012a:	f000 bbc9 	b.w	108c0 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1012e:	4629      	mov	r1, r5
   10130:	4630      	mov	r0, r6
   10132:	f000 fbfd 	bl	10930 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10136:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1013a:	4620      	mov	r0, r4
   1013c:	f00d fe67 	bl	1de0e <atomic_and>
   10140:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   10142:	4630      	mov	r0, r6
   10144:	f000 fbbc 	bl	108c0 <bt_conn_unref>
	if (persist_paused) {
   10148:	046b      	lsls	r3, r5, #17
   1014a:	d507      	bpl.n	1015c <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1014c:	e8d4 3fef 	ldaex	r3, [r4]
   10150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10154:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10158:	2a00      	cmp	r2, #0
   1015a:	d1f7      	bne.n	1014c <bt_le_adv_resume+0x68>
}
   1015c:	b002      	add	sp, #8
   1015e:	bd70      	pop	{r4, r5, r6, pc}
   10160:	20008028 	.word	0x20008028

00010164 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10164:	b530      	push	{r4, r5, lr}
   10166:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   10168:	2120      	movs	r1, #32
   1016a:	a80a      	add	r0, sp, #40	; 0x28
   1016c:	f7fe fb9a 	bl	e8a4 <bt_hci_le_rand>
	if (ret) {
   10170:	4604      	mov	r4, r0
   10172:	bb18      	cbnz	r0, 101bc <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   10174:	f010 f803 	bl	2017e <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   10178:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1017c:	fba0 2305 	umull	r2, r3, r0, r5
   10180:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10184:	2308      	movs	r3, #8
   10186:	0bd2      	lsrs	r2, r2, #15
   10188:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1018c:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1018e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10192:	9300      	str	r3, [sp, #0]
   10194:	2220      	movs	r2, #32
   10196:	480b      	ldr	r0, [pc, #44]	; (101c4 <prng_reseed.constprop.0+0x60>)
   10198:	446b      	add	r3, sp
   1019a:	a90a      	add	r1, sp, #40	; 0x28
   1019c:	f00d fbb6 	bl	1d90c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   101a0:	b960      	cbnz	r0, 101bc <prng_reseed.constprop.0+0x58>
		BT_ERR("Failed to re-seed PRNG");
   101a2:	4b09      	ldr	r3, [pc, #36]	; (101c8 <prng_reseed.constprop.0+0x64>)
   101a4:	9309      	str	r3, [sp, #36]	; 0x24
   101a6:	2302      	movs	r3, #2
   101a8:	9308      	str	r3, [sp, #32]
   101aa:	4623      	mov	r3, r4
   101ac:	f06f 0404 	mvn.w	r4, #4
   101b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   101b4:	4805      	ldr	r0, [pc, #20]	; (101cc <prng_reseed.constprop.0+0x68>)
   101b6:	aa08      	add	r2, sp, #32
   101b8:	f7fb fba6 	bl	b908 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   101bc:	4620      	mov	r0, r4
   101be:	b013      	add	sp, #76	; 0x4c
   101c0:	bd30      	pop	{r4, r5, pc}
   101c2:	bf00      	nop
   101c4:	20009250 	.word	0x20009250
   101c8:	000230ba 	.word	0x000230ba
   101cc:	0002082c 	.word	0x0002082c

000101d0 <prng_init>:

int prng_init(void)
{
   101d0:	b510      	push	{r4, lr}
   101d2:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   101d4:	2108      	movs	r1, #8
   101d6:	4668      	mov	r0, sp
   101d8:	f7fe fb64 	bl	e8a4 <bt_hci_le_rand>
	if (ret) {
   101dc:	4604      	mov	r4, r0
   101de:	b990      	cbnz	r0, 10206 <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   101e0:	2208      	movs	r2, #8
   101e2:	4669      	mov	r1, sp
   101e4:	480b      	ldr	r0, [pc, #44]	; (10214 <prng_init+0x44>)
   101e6:	f00d fb71 	bl	1d8cc <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   101ea:	b978      	cbnz	r0, 1020c <prng_init+0x3c>
		BT_ERR("Failed to initialize PRNG");
   101ec:	4b0a      	ldr	r3, [pc, #40]	; (10218 <prng_init+0x48>)
   101ee:	9307      	str	r3, [sp, #28]
   101f0:	2302      	movs	r3, #2
   101f2:	9306      	str	r3, [sp, #24]
   101f4:	4623      	mov	r3, r4
		return -EIO;
   101f6:	f06f 0404 	mvn.w	r4, #4
   101fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   101fe:	4807      	ldr	r0, [pc, #28]	; (1021c <prng_init+0x4c>)
   10200:	aa06      	add	r2, sp, #24
   10202:	f7fb fb81 	bl	b908 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10206:	4620      	mov	r0, r4
   10208:	b008      	add	sp, #32
   1020a:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1020c:	f7ff ffaa 	bl	10164 <prng_reseed.constprop.0>
   10210:	4604      	mov	r4, r0
   10212:	e7f8      	b.n	10206 <prng_init+0x36>
   10214:	20009250 	.word	0x20009250
   10218:	000230d1 	.word	0x000230d1
   1021c:	0002082c 	.word	0x0002082c

00010220 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   10220:	b538      	push	{r3, r4, r5, lr}
   10222:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   10224:	4604      	mov	r4, r0
   10226:	b198      	cbz	r0, 10250 <bt_rand+0x30>
   10228:	b191      	cbz	r1, 10250 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1022a:	4a0b      	ldr	r2, [pc, #44]	; (10258 <bt_rand+0x38>)
   1022c:	f00d fb87 	bl	1d93e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10230:	1c43      	adds	r3, r0, #1
   10232:	d107      	bne.n	10244 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   10234:	f7ff ff96 	bl	10164 <prng_reseed.constprop.0>
		if (ret) {
   10238:	b948      	cbnz	r0, 1024e <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1023a:	4629      	mov	r1, r5
   1023c:	4620      	mov	r0, r4
   1023e:	4a06      	ldr	r2, [pc, #24]	; (10258 <bt_rand+0x38>)
   10240:	f00d fb7d 	bl	1d93e <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   10244:	2801      	cmp	r0, #1
   10246:	bf0c      	ite	eq
   10248:	2000      	moveq	r0, #0
   1024a:	f06f 0004 	mvnne.w	r0, #4
}
   1024e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10250:	f06f 0015 	mvn.w	r0, #21
   10254:	e7fb      	b.n	1024e <bt_rand+0x2e>
   10256:	bf00      	nop
   10258:	20009250 	.word	0x20009250

0001025c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1025c:	b570      	push	{r4, r5, r6, lr}
   1025e:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   10260:	4b12      	ldr	r3, [pc, #72]	; (102ac <notify_connected+0x50>)
   10262:	681d      	ldr	r5, [r3, #0]
   10264:	b995      	cbnz	r5, 1028c <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10266:	4d12      	ldr	r5, [pc, #72]	; (102b0 <notify_connected+0x54>)
   10268:	4e12      	ldr	r6, [pc, #72]	; (102b4 <notify_connected+0x58>)
   1026a:	42b5      	cmp	r5, r6
   1026c:	d91c      	bls.n	102a8 <notify_connected+0x4c>
   1026e:	4912      	ldr	r1, [pc, #72]	; (102b8 <notify_connected+0x5c>)
   10270:	f44f 63ab 	mov.w	r3, #1368	; 0x558
   10274:	4a11      	ldr	r2, [pc, #68]	; (102bc <notify_connected+0x60>)
   10276:	4812      	ldr	r0, [pc, #72]	; (102c0 <notify_connected+0x64>)
   10278:	f00c fc37 	bl	1caea <assert_print>
   1027c:	4811      	ldr	r0, [pc, #68]	; (102c4 <notify_connected+0x68>)
   1027e:	f00c fc34 	bl	1caea <assert_print>
   10282:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   10286:	480d      	ldr	r0, [pc, #52]	; (102bc <notify_connected+0x60>)
   10288:	f00c fc28 	bl	1cadc <assert_post_action>
		if (cb->connected) {
   1028c:	682b      	ldr	r3, [r5, #0]
   1028e:	b113      	cbz	r3, 10296 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   10290:	4620      	mov	r0, r4
   10292:	7a61      	ldrb	r1, [r4, #9]
   10294:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10296:	692d      	ldr	r5, [r5, #16]
   10298:	e7e4      	b.n	10264 <notify_connected+0x8>
		if (cb->connected) {
   1029a:	682b      	ldr	r3, [r5, #0]
   1029c:	b113      	cbz	r3, 102a4 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1029e:	4620      	mov	r0, r4
   102a0:	7a61      	ldrb	r1, [r4, #9]
   102a2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   102a4:	3514      	adds	r5, #20
   102a6:	e7e0      	b.n	1026a <notify_connected+0xe>
   102a8:	d3f7      	bcc.n	1029a <notify_connected+0x3e>
		}
	}
}
   102aa:	bd70      	pop	{r4, r5, r6, pc}
   102ac:	20009854 	.word	0x20009854
   102b0:	000207ec 	.word	0x000207ec
   102b4:	000207ec 	.word	0x000207ec
   102b8:	00023125 	.word	0x00023125
   102bc:	000230f5 	.word	0x000230f5
   102c0:	00021547 	.word	0x00021547
   102c4:	00021c6a 	.word	0x00021c6a

000102c8 <tx_notify>:
{
   102c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102cc:	4604      	mov	r4, r0
	tx->cb = NULL;
   102ce:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   102d2:	4f14      	ldr	r7, [pc, #80]	; (10324 <tx_notify+0x5c>)
	__asm__ volatile(
   102d4:	f04f 0220 	mov.w	r2, #32
   102d8:	f3ef 8311 	mrs	r3, BASEPRI
   102dc:	f382 8812 	msr	BASEPRI_MAX, r2
   102e0:	f3bf 8f6f 	isb	sy
	return list->head;
   102e4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   102e6:	b929      	cbnz	r1, 102f4 <tx_notify+0x2c>
	__asm__ volatile(
   102e8:	f383 8811 	msr	BASEPRI, r3
   102ec:	f3bf 8f6f 	isb	sy
}
   102f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   102f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   102f6:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   102f8:	4281      	cmp	r1, r0
	list->tail = node;
   102fa:	bf08      	it	eq
   102fc:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   102fe:	6222      	str	r2, [r4, #32]
   10300:	f383 8811 	msr	BASEPRI, r3
   10304:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   10308:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1030c:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1030e:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   10312:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   10316:	f00f fe74 	bl	20002 <k_queue_append>
		cb(conn, user_data, 0);
   1031a:	2200      	movs	r2, #0
   1031c:	4631      	mov	r1, r6
   1031e:	4620      	mov	r0, r4
   10320:	47a8      	blx	r5
	while (1) {
   10322:	e7d7      	b.n	102d4 <tx_notify+0xc>
   10324:	20008640 	.word	0x20008640

00010328 <conn_tx_destroy>:
{
   10328:	b570      	push	{r4, r5, r6, lr}
   1032a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1032c:	b949      	cbnz	r1, 10342 <conn_tx_destroy+0x1a>
   1032e:	490d      	ldr	r1, [pc, #52]	; (10364 <conn_tx_destroy+0x3c>)
   10330:	480d      	ldr	r0, [pc, #52]	; (10368 <conn_tx_destroy+0x40>)
   10332:	2338      	movs	r3, #56	; 0x38
   10334:	4a0d      	ldr	r2, [pc, #52]	; (1036c <conn_tx_destroy+0x44>)
   10336:	f00c fbd8 	bl	1caea <assert_print>
   1033a:	2138      	movs	r1, #56	; 0x38
   1033c:	480b      	ldr	r0, [pc, #44]	; (1036c <conn_tx_destroy+0x44>)
   1033e:	f00c fbcd 	bl	1cadc <assert_post_action>
	tx->cb = NULL;
   10342:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   10344:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   10348:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   1034a:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1034e:	4808      	ldr	r0, [pc, #32]	; (10370 <conn_tx_destroy+0x48>)
   10350:	f00f fe57 	bl	20002 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   10354:	4631      	mov	r1, r6
   10356:	4620      	mov	r0, r4
   10358:	462b      	mov	r3, r5
}
   1035a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1035e:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   10362:	4718      	bx	r3
   10364:	00023140 	.word	0x00023140
   10368:	00021547 	.word	0x00021547
   1036c:	000230f5 	.word	0x000230f5
   10370:	20008640 	.word	0x20008640

00010374 <send_frag>:
{
   10374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10378:	4604      	mov	r4, r0
   1037a:	460e      	mov	r6, r1
   1037c:	4692      	mov	sl, r2
   1037e:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10380:	694d      	ldr	r5, [r1, #20]
{
   10382:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   10384:	f04f 33ff 	mov.w	r3, #4294967295
   10388:	f04f 32ff 	mov.w	r2, #4294967295
   1038c:	4855      	ldr	r0, [pc, #340]	; (104e4 <send_frag+0x170>)
   1038e:	f009 f91f 	bl	195d0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   10392:	7aa3      	ldrb	r3, [r4, #10]
   10394:	2b07      	cmp	r3, #7
   10396:	f040 8099 	bne.w	104cc <send_frag+0x158>
	__asm__ volatile(
   1039a:	f04f 0320 	mov.w	r3, #32
   1039e:	f3ef 8211 	mrs	r2, BASEPRI
   103a2:	f383 8812 	msr	BASEPRI_MAX, r3
   103a6:	f3bf 8f6f 	isb	sy
	if (tx) {
   103aa:	2d00      	cmp	r5, #0
   103ac:	d058      	beq.n	10460 <send_frag+0xec>
	parent->next = child;
   103ae:	2300      	movs	r3, #0
   103b0:	602b      	str	r3, [r5, #0]
	return list->tail;
   103b2:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   103b4:	2b00      	cmp	r3, #0
   103b6:	d150      	bne.n	1045a <send_frag+0xe6>
	list->head = node;
   103b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   103bc:	f382 8811 	msr	BASEPRI, r2
   103c0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   103c4:	2104      	movs	r1, #4
   103c6:	f106 0008 	add.w	r0, r6, #8
   103ca:	f003 fc83 	bl	13cd4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   103ce:	8823      	ldrh	r3, [r4, #0]
   103d0:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   103d4:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   103d8:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   103dc:	89b3      	ldrh	r3, [r6, #12]
   103de:	3b04      	subs	r3, #4
   103e0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   103e2:	2302      	movs	r3, #2
	return bt_send(buf);
   103e4:	4630      	mov	r0, r6
   103e6:	7533      	strb	r3, [r6, #20]
   103e8:	f7fe fc2e 	bl	ec48 <bt_send>
	if (err) {
   103ec:	2800      	cmp	r0, #0
   103ee:	d077      	beq.n	104e0 <send_frag+0x16c>
		BT_ERR("Unable to send to driver (err %d)", err);
   103f0:	46ea      	mov	sl, sp
   103f2:	b088      	sub	sp, #32
   103f4:	466a      	mov	r2, sp
   103f6:	4b3c      	ldr	r3, [pc, #240]	; (104e8 <send_frag+0x174>)
   103f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   103fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10400:	2303      	movs	r3, #3
   10402:	483a      	ldr	r0, [pc, #232]	; (104ec <send_frag+0x178>)
   10404:	f842 3f10 	str.w	r3, [r2, #16]!
   10408:	f00d fdc9 	bl	1df9e <z_log_msg_static_create.constprop.0>
   1040c:	46d5      	mov	sp, sl
	__asm__ volatile(
   1040e:	f04f 0320 	mov.w	r3, #32
   10412:	f3ef 8111 	mrs	r1, BASEPRI
   10416:	f383 8812 	msr	BASEPRI_MAX, r3
   1041a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1041e:	2d00      	cmp	r5, #0
   10420:	d034      	beq.n	1048c <send_frag+0x118>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10422:	2200      	movs	r2, #0
	return list->head;
   10424:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10426:	b153      	cbz	r3, 1043e <send_frag+0xca>
   10428:	429d      	cmp	r5, r3
   1042a:	d12c      	bne.n	10486 <send_frag+0x112>
	return node->next;
   1042c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1042e:	bb22      	cbnz	r2, 1047a <send_frag+0x106>
   10430:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   10432:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   10434:	4295      	cmp	r5, r2
   10436:	d100      	bne.n	1043a <send_frag+0xc6>
	list->tail = node;
   10438:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1043a:	2300      	movs	r3, #0
   1043c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1043e:	f381 8811 	msr	BASEPRI, r1
   10442:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10446:	4827      	ldr	r0, [pc, #156]	; (104e4 <send_frag+0x170>)
   10448:	f009 f87e 	bl	19548 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1044c:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   1044e:	4629      	mov	r1, r5
   10450:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   10452:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   10454:	f7ff ff68 	bl	10328 <conn_tx_destroy>
   10458:	e031      	b.n	104be <send_frag+0x14a>
   1045a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1045c:	61a5      	str	r5, [r4, #24]
}
   1045e:	e7ad      	b.n	103bc <send_frag+0x48>
	return list->tail;
   10460:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   10462:	b133      	cbz	r3, 10472 <send_frag+0xfe>
			pending_no_cb = &tail_tx->pending_no_cb;
   10464:	f103 080c 	add.w	r8, r3, #12
   10468:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1046a:	3301      	adds	r3, #1
   1046c:	f8c8 3000 	str.w	r3, [r8]
   10470:	e7a4      	b.n	103bc <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   10472:	69e3      	ldr	r3, [r4, #28]
   10474:	f104 081c 	add.w	r8, r4, #28
   10478:	e7f7      	b.n	1046a <send_frag+0xf6>
	parent->next = child;
   1047a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1047c:	69a3      	ldr	r3, [r4, #24]
   1047e:	429d      	cmp	r5, r3
	list->tail = node;
   10480:	bf08      	it	eq
   10482:	61a2      	streq	r2, [r4, #24]
}
   10484:	e7d9      	b.n	1043a <send_frag+0xc6>
	return node->next;
   10486:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10488:	681b      	ldr	r3, [r3, #0]
   1048a:	e7cc      	b.n	10426 <send_frag+0xb2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1048c:	f8d8 3000 	ldr.w	r3, [r8]
   10490:	b95b      	cbnz	r3, 104aa <send_frag+0x136>
   10492:	4917      	ldr	r1, [pc, #92]	; (104f0 <send_frag+0x17c>)
   10494:	4817      	ldr	r0, [pc, #92]	; (104f4 <send_frag+0x180>)
   10496:	f240 2329 	movw	r3, #553	; 0x229
   1049a:	4a17      	ldr	r2, [pc, #92]	; (104f8 <send_frag+0x184>)
   1049c:	f00c fb25 	bl	1caea <assert_print>
   104a0:	f240 2129 	movw	r1, #553	; 0x229
   104a4:	4814      	ldr	r0, [pc, #80]	; (104f8 <send_frag+0x184>)
   104a6:	f00c fb19 	bl	1cadc <assert_post_action>
			(*pending_no_cb)--;
   104aa:	3b01      	subs	r3, #1
   104ac:	f8c8 3000 	str.w	r3, [r8]
   104b0:	f381 8811 	msr	BASEPRI, r1
   104b4:	f3bf 8f6f 	isb	sy
   104b8:	480a      	ldr	r0, [pc, #40]	; (104e4 <send_frag+0x170>)
   104ba:	f009 f845 	bl	19548 <z_impl_k_sem_give>
	if (always_consume) {
   104be:	f1b9 0f00 	cmp.w	r9, #0
   104c2:	d109      	bne.n	104d8 <send_frag+0x164>
	return false;
   104c4:	2000      	movs	r0, #0
}
   104c6:	46bd      	mov	sp, r7
   104c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   104cc:	4805      	ldr	r0, [pc, #20]	; (104e4 <send_frag+0x170>)
   104ce:	f009 f83b 	bl	19548 <z_impl_k_sem_give>
	if (tx) {
   104d2:	2d00      	cmp	r5, #0
   104d4:	d1ba      	bne.n	1044c <send_frag+0xd8>
   104d6:	e7f2      	b.n	104be <send_frag+0x14a>
		net_buf_unref(buf);
   104d8:	4630      	mov	r0, r6
   104da:	f003 fb35 	bl	13b48 <net_buf_unref>
   104de:	e7f1      	b.n	104c4 <send_frag+0x150>
	return true;
   104e0:	2001      	movs	r0, #1
   104e2:	e7f0      	b.n	104c6 <send_frag+0x152>
   104e4:	20008100 	.word	0x20008100
   104e8:	00022d09 	.word	0x00022d09
   104ec:	00020824 	.word	0x00020824
   104f0:	00023143 	.word	0x00023143
   104f4:	00021547 	.word	0x00021547
   104f8:	000230f5 	.word	0x000230f5

000104fc <bt_conn_get_pkts>:
}
   104fc:	4800      	ldr	r0, [pc, #0]	; (10500 <bt_conn_get_pkts+0x4>)
   104fe:	4770      	bx	lr
   10500:	20008100 	.word	0x20008100

00010504 <bt_conn_new>:
{
   10504:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   10506:	2200      	movs	r2, #0
   10508:	4604      	mov	r4, r0
   1050a:	428a      	cmp	r2, r1
   1050c:	d102      	bne.n	10514 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1050e:	2400      	movs	r4, #0
}
   10510:	4620      	mov	r0, r4
   10512:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10514:	2001      	movs	r0, #1
   10516:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1051a:	e8d3 5fef 	ldaex	r5, [r3]
   1051e:	2d00      	cmp	r5, #0
   10520:	d104      	bne.n	1052c <bt_conn_new+0x28>
   10522:	e8c3 0fec 	stlex	ip, r0, [r3]
   10526:	f1bc 0f00 	cmp.w	ip, #0
   1052a:	d1f6      	bne.n	1051a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1052c:	d002      	beq.n	10534 <bt_conn_new+0x30>
   1052e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   10530:	4402      	add	r2, r0
   10532:	e7ea      	b.n	1050a <bt_conn_new+0x6>
	if (!conn) {
   10534:	2c00      	cmp	r4, #0
   10536:	d0ea      	beq.n	1050e <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   10538:	22c0      	movs	r2, #192	; 0xc0
   1053a:	2100      	movs	r1, #0
   1053c:	4620      	mov	r0, r4
   1053e:	f00d faee 	bl	1db1e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   10542:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10546:	4904      	ldr	r1, [pc, #16]	; (10558 <bt_conn_new+0x54>)
   10548:	f009 fc82 	bl	19e50 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1054c:	4903      	ldr	r1, [pc, #12]	; (1055c <bt_conn_new+0x58>)
   1054e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10552:	f009 faa1 	bl	19a98 <k_work_init>
	return conn;
   10556:	e7db      	b.n	10510 <bt_conn_new+0xc>
   10558:	00010eb9 	.word	0x00010eb9
   1055c:	0001dfa5 	.word	0x0001dfa5

00010560 <conn_cleanup>:
{
   10560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10564:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   10566:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10568:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1056c:	2300      	movs	r3, #0
   1056e:	2200      	movs	r2, #0
   10570:	4630      	mov	r0, r6
   10572:	f003 f977 	bl	13864 <net_buf_get>
   10576:	4603      	mov	r3, r0
   10578:	b980      	cbnz	r0, 1059c <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1057a:	6963      	ldr	r3, [r4, #20]
   1057c:	b1cb      	cbz	r3, 105b2 <conn_cleanup+0x52>
   1057e:	4918      	ldr	r1, [pc, #96]	; (105e0 <conn_cleanup+0x80>)
   10580:	f240 23b6 	movw	r3, #694	; 0x2b6
   10584:	4a17      	ldr	r2, [pc, #92]	; (105e4 <conn_cleanup+0x84>)
   10586:	4818      	ldr	r0, [pc, #96]	; (105e8 <conn_cleanup+0x88>)
   10588:	f00c faaf 	bl	1caea <assert_print>
   1058c:	4817      	ldr	r0, [pc, #92]	; (105ec <conn_cleanup+0x8c>)
   1058e:	f00c faac 	bl	1caea <assert_print>
   10592:	f240 21b6 	movw	r1, #694	; 0x2b6
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   10596:	4813      	ldr	r0, [pc, #76]	; (105e4 <conn_cleanup+0x84>)
   10598:	f00c faa0 	bl	1cadc <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1059c:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1059e:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   105a0:	f003 fad2 	bl	13b48 <net_buf_unref>
		if (tx) {
   105a4:	2d00      	cmp	r5, #0
   105a6:	d0e1      	beq.n	1056c <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   105a8:	4629      	mov	r1, r5
   105aa:	4620      	mov	r0, r4
   105ac:	f7ff febc 	bl	10328 <conn_tx_destroy>
   105b0:	e7da      	b.n	10568 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   105b2:	69e3      	ldr	r3, [r4, #28]
   105b4:	b14b      	cbz	r3, 105ca <conn_cleanup+0x6a>
   105b6:	490e      	ldr	r1, [pc, #56]	; (105f0 <conn_cleanup+0x90>)
   105b8:	f240 23b7 	movw	r3, #695	; 0x2b7
   105bc:	4a09      	ldr	r2, [pc, #36]	; (105e4 <conn_cleanup+0x84>)
   105be:	480a      	ldr	r0, [pc, #40]	; (105e8 <conn_cleanup+0x88>)
   105c0:	f00c fa93 	bl	1caea <assert_print>
   105c4:	f240 21b7 	movw	r1, #695	; 0x2b7
   105c8:	e7e5      	b.n	10596 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   105ca:	4620      	mov	r0, r4
   105cc:	f00d fced 	bl	1dfaa <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   105d0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   105d4:	2200      	movs	r2, #0
}
   105d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   105da:	2300      	movs	r3, #0
   105dc:	f009 bd54 	b.w	1a088 <k_work_reschedule>
   105e0:	00023156 	.word	0x00023156
   105e4:	000230f5 	.word	0x000230f5
   105e8:	00021547 	.word	0x00021547
   105ec:	0002317c 	.word	0x0002317c
   105f0:	00023191 	.word	0x00023191

000105f4 <bt_conn_recv>:
{
   105f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105f8:	4616      	mov	r6, r2
   105fa:	b086      	sub	sp, #24
   105fc:	af00      	add	r7, sp, #0
   105fe:	4604      	mov	r4, r0
   10600:	460d      	mov	r5, r1
	tx_notify(conn);
   10602:	f7ff fe61 	bl	102c8 <tx_notify>
	switch (flags) {
   10606:	2e01      	cmp	r6, #1
   10608:	d030      	beq.n	1066c <bt_conn_recv+0x78>
   1060a:	2e02      	cmp	r6, #2
   1060c:	d16a      	bne.n	106e4 <bt_conn_recv+0xf0>
		if (conn->rx) {
   1060e:	6923      	ldr	r3, [r4, #16]
   10610:	b163      	cbz	r3, 1062c <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   10612:	4b40      	ldr	r3, [pc, #256]	; (10714 <bt_conn_recv+0x120>)
   10614:	4840      	ldr	r0, [pc, #256]	; (10718 <bt_conn_recv+0x124>)
   10616:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1061a:	e9c7 6304 	strd	r6, r3, [r7, #16]
   1061e:	f107 0210 	add.w	r2, r7, #16
   10622:	f00d fcbc 	bl	1df9e <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   10626:	4620      	mov	r0, r4
   10628:	f00d fcbf 	bl	1dfaa <bt_conn_reset_rx_state>
		conn->rx = buf;
   1062c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1062e:	6921      	ldr	r1, [r4, #16]
   10630:	8988      	ldrh	r0, [r1, #12]
   10632:	2801      	cmp	r0, #1
   10634:	d930      	bls.n	10698 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   10636:	688b      	ldr	r3, [r1, #8]
   10638:	881b      	ldrh	r3, [r3, #0]
   1063a:	3304      	adds	r3, #4
   1063c:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1063e:	4298      	cmp	r0, r3
   10640:	d32a      	bcc.n	10698 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   10642:	d95f      	bls.n	10704 <bt_conn_recv+0x110>
		BT_ERR("ACL len mismatch (%u > %u)",
   10644:	466d      	mov	r5, sp
   10646:	b088      	sub	sp, #32
   10648:	466a      	mov	r2, sp
   1064a:	61d3      	str	r3, [r2, #28]
   1064c:	2304      	movs	r3, #4
   1064e:	4933      	ldr	r1, [pc, #204]	; (1071c <bt_conn_recv+0x128>)
   10650:	e9c2 1005 	strd	r1, r0, [r2, #20]
   10654:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10658:	482f      	ldr	r0, [pc, #188]	; (10718 <bt_conn_recv+0x124>)
   1065a:	f842 3f10 	str.w	r3, [r2, #16]!
   1065e:	f00d fc9e 	bl	1df9e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   10662:	4620      	mov	r0, r4
   10664:	46ad      	mov	sp, r5
   10666:	f00d fca0 	bl	1dfaa <bt_conn_reset_rx_state>
		return;
   1066a:	e015      	b.n	10698 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   1066c:	6920      	ldr	r0, [r4, #16]
   1066e:	b970      	cbnz	r0, 1068e <bt_conn_recv+0x9a>
			BT_ERR("Unexpected L2CAP continuation");
   10670:	4b2b      	ldr	r3, [pc, #172]	; (10720 <bt_conn_recv+0x12c>)
   10672:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10676:	617b      	str	r3, [r7, #20]
   10678:	2302      	movs	r3, #2
   1067a:	4827      	ldr	r0, [pc, #156]	; (10718 <bt_conn_recv+0x124>)
   1067c:	613b      	str	r3, [r7, #16]
   1067e:	f107 0210 	add.w	r2, r7, #16
   10682:	f00d fc8c 	bl	1df9e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   10686:	4620      	mov	r0, r4
   10688:	f00d fc8f 	bl	1dfaa <bt_conn_reset_rx_state>
   1068c:	e001      	b.n	10692 <bt_conn_recv+0x9e>
		if (!buf->len) {
   1068e:	89ae      	ldrh	r6, [r5, #12]
   10690:	b936      	cbnz	r6, 106a0 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   10692:	4628      	mov	r0, r5
   10694:	f003 fa58 	bl	13b48 <net_buf_unref>
}
   10698:	3718      	adds	r7, #24
   1069a:	46bd      	mov	sp, r7
   1069c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   106a0:	3008      	adds	r0, #8
   106a2:	f00e fbeb 	bl	1ee7c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   106a6:	4286      	cmp	r6, r0
   106a8:	d912      	bls.n	106d0 <bt_conn_recv+0xdc>
			BT_ERR("Not enough buffer space for L2CAP data");
   106aa:	4b1e      	ldr	r3, [pc, #120]	; (10724 <bt_conn_recv+0x130>)
   106ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   106b0:	617b      	str	r3, [r7, #20]
   106b2:	2302      	movs	r3, #2
   106b4:	4818      	ldr	r0, [pc, #96]	; (10718 <bt_conn_recv+0x124>)
   106b6:	613b      	str	r3, [r7, #16]
   106b8:	f107 0210 	add.w	r2, r7, #16
   106bc:	f00d fc6f 	bl	1df9e <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   106c0:	2200      	movs	r2, #0
   106c2:	4620      	mov	r0, r4
   106c4:	6921      	ldr	r1, [r4, #16]
   106c6:	f000 fe49 	bl	1135c <bt_l2cap_recv>
			conn->rx = NULL;
   106ca:	2300      	movs	r3, #0
   106cc:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   106ce:	e7e0      	b.n	10692 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   106d0:	6920      	ldr	r0, [r4, #16]
   106d2:	89aa      	ldrh	r2, [r5, #12]
   106d4:	68a9      	ldr	r1, [r5, #8]
   106d6:	3008      	adds	r0, #8
   106d8:	f00e fbd8 	bl	1ee8c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   106dc:	4628      	mov	r0, r5
   106de:	f003 fa33 	bl	13b48 <net_buf_unref>
		break;
   106e2:	e7a4      	b.n	1062e <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   106e4:	46e8      	mov	r8, sp
   106e6:	b088      	sub	sp, #32
   106e8:	466a      	mov	r2, sp
   106ea:	4b0f      	ldr	r3, [pc, #60]	; (10728 <bt_conn_recv+0x134>)
   106ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   106f0:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   106f4:	2303      	movs	r3, #3
   106f6:	4808      	ldr	r0, [pc, #32]	; (10718 <bt_conn_recv+0x124>)
   106f8:	f842 3f10 	str.w	r3, [r2, #16]!
   106fc:	f00d fc4f 	bl	1df9e <z_log_msg_static_create.constprop.0>
   10700:	46c5      	mov	sp, r8
   10702:	e7c0      	b.n	10686 <bt_conn_recv+0x92>
	conn->rx = NULL;
   10704:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   10706:	2201      	movs	r2, #1
   10708:	4620      	mov	r0, r4
	conn->rx = NULL;
   1070a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1070c:	f000 fe26 	bl	1135c <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   10710:	e7c2      	b.n	10698 <bt_conn_recv+0xa4>
   10712:	bf00      	nop
   10714:	000231aa 	.word	0x000231aa
   10718:	00020824 	.word	0x00020824
   1071c:	0002322a 	.word	0x0002322a
   10720:	000231c7 	.word	0x000231c7
   10724:	000231e5 	.word	0x000231e5
   10728:	0002320c 	.word	0x0002320c

0001072c <bt_conn_send_cb>:
{
   1072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10730:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   10732:	7a83      	ldrb	r3, [r0, #10]
{
   10734:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10736:	2b07      	cmp	r3, #7
{
   10738:	460f      	mov	r7, r1
   1073a:	4616      	mov	r6, r2
   1073c:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   1073e:	d00c      	beq.n	1075a <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
   10740:	4b28      	ldr	r3, [pc, #160]	; (107e4 <bt_conn_send_cb+0xb8>)
   10742:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10746:	9305      	str	r3, [sp, #20]
   10748:	2302      	movs	r3, #2
   1074a:	4827      	ldr	r0, [pc, #156]	; (107e8 <bt_conn_send_cb+0xbc>)
   1074c:	aa04      	add	r2, sp, #16
   1074e:	9304      	str	r3, [sp, #16]
   10750:	f00d fc25 	bl	1df9e <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   10754:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10758:	e01d      	b.n	10796 <bt_conn_send_cb+0x6a>
	if (cb) {
   1075a:	2a00      	cmp	r2, #0
   1075c:	d040      	beq.n	107e0 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   1075e:	f00a fe1b 	bl	1b398 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   10762:	4b22      	ldr	r3, [pc, #136]	; (107ec <bt_conn_send_cb+0xc0>)
   10764:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   10766:	4822      	ldr	r0, [pc, #136]	; (107f0 <bt_conn_send_cb+0xc4>)
   10768:	bf07      	ittee	eq
   1076a:	2200      	moveq	r2, #0
   1076c:	2300      	moveq	r3, #0
   1076e:	f04f 32ff 	movne.w	r2, #4294967295
   10772:	f04f 33ff 	movne.w	r3, #4294967295
   10776:	f008 fe7d 	bl	19474 <z_impl_k_queue_get>
   1077a:	4604      	mov	r4, r0
		if (!tx) {
   1077c:	b970      	cbnz	r0, 1079c <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
   1077e:	4b1d      	ldr	r3, [pc, #116]	; (107f4 <bt_conn_send_cb+0xc8>)
   10780:	4819      	ldr	r0, [pc, #100]	; (107e8 <bt_conn_send_cb+0xbc>)
   10782:	9305      	str	r3, [sp, #20]
   10784:	2302      	movs	r3, #2
   10786:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1078a:	aa04      	add	r2, sp, #16
   1078c:	9304      	str	r3, [sp, #16]
   1078e:	f00d fc06 	bl	1df9e <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   10792:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10796:	b006      	add	sp, #24
   10798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1079c:	7aab      	ldrb	r3, [r5, #10]
   1079e:	2b07      	cmp	r3, #7
   107a0:	d012      	beq.n	107c8 <bt_conn_send_cb+0x9c>
			BT_WARN("Disconnected while allocating context");
   107a2:	4b15      	ldr	r3, [pc, #84]	; (107f8 <bt_conn_send_cb+0xcc>)
   107a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   107a8:	9305      	str	r3, [sp, #20]
   107aa:	2302      	movs	r3, #2
   107ac:	480e      	ldr	r0, [pc, #56]	; (107e8 <bt_conn_send_cb+0xbc>)
   107ae:	aa04      	add	r2, sp, #16
   107b0:	9304      	str	r3, [sp, #16]
   107b2:	f00d fbf4 	bl	1df9e <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   107b6:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   107b8:	4621      	mov	r1, r4
	tx->user_data = NULL;
   107ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   107be:	480c      	ldr	r0, [pc, #48]	; (107f0 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   107c0:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   107c2:	f00f fc1e 	bl	20002 <k_queue_append>
}
   107c6:	e7c5      	b.n	10754 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   107c8:	2300      	movs	r3, #0
		tx->user_data = user_data;
   107ca:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   107ce:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   107d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   107d4:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
   107d6:	617c      	str	r4, [r7, #20]
	net_buf_put(&conn->tx_queue, buf);
   107d8:	f003 f986 	bl	13ae8 <net_buf_put>
	return 0;
   107dc:	2000      	movs	r0, #0
   107de:	e7da      	b.n	10796 <bt_conn_send_cb+0x6a>
   107e0:	4614      	mov	r4, r2
   107e2:	e7f5      	b.n	107d0 <bt_conn_send_cb+0xa4>
   107e4:	00023245 	.word	0x00023245
   107e8:	00020824 	.word	0x00020824
   107ec:	20009650 	.word	0x20009650
   107f0:	20008640 	.word	0x20008640
   107f4:	00023254 	.word	0x00023254
   107f8:	00023272 	.word	0x00023272

000107fc <bt_conn_prepare_events>:
{
   107fc:	b570      	push	{r4, r5, r6, lr}
   107fe:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   10800:	4818      	ldr	r0, [pc, #96]	; (10864 <bt_conn_prepare_events+0x68>)
   10802:	f00f fda6 	bl	20352 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10806:	4620      	mov	r0, r4
   10808:	2200      	movs	r2, #0
   1080a:	2101      	movs	r1, #1
   1080c:	4b15      	ldr	r3, [pc, #84]	; (10864 <bt_conn_prepare_events+0x68>)
   1080e:	f00b fccb 	bl	1c1a8 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10812:	4a15      	ldr	r2, [pc, #84]	; (10868 <bt_conn_prepare_events+0x6c>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   10814:	f104 0014 	add.w	r0, r4, #20
   10818:	e8d2 3faf 	lda	r3, [r2]
	if (!atomic_get(&conn->ref)) {
   1081c:	b90b      	cbnz	r3, 10822 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1081e:	2001      	movs	r0, #1
}
   10820:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10822:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
   10826:	f812 2cb6 	ldrb.w	r2, [r2, #-182]
   1082a:	b972      	cbnz	r2, 1084a <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1082c:	1d1a      	adds	r2, r3, #4
   1082e:	e8d2 1fef 	ldaex	r1, [r2]
   10832:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   10836:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1083a:	2e00      	cmp	r6, #0
   1083c:	d1f7      	bne.n	1082e <bt_conn_prepare_events+0x32>
   1083e:	064a      	lsls	r2, r1, #25
   10840:	d503      	bpl.n	1084a <bt_conn_prepare_events+0x4e>
		conn_cleanup(conn);
   10842:	4618      	mov	r0, r3
   10844:	f7ff fe8c 	bl	10560 <conn_cleanup>
		return -ENOTCONN;
   10848:	e7e9      	b.n	1081e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1084a:	7a9b      	ldrb	r3, [r3, #10]
   1084c:	2b07      	cmp	r3, #7
   1084e:	d1e6      	bne.n	1081e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   10850:	4b06      	ldr	r3, [pc, #24]	; (1086c <bt_conn_prepare_events+0x70>)
   10852:	2200      	movs	r2, #0
   10854:	2104      	movs	r1, #4
   10856:	f00b fca7 	bl	1c1a8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1085a:	2301      	movs	r3, #1
			ev_count++;
   1085c:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1085e:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   10862:	e7dd      	b.n	10820 <bt_conn_prepare_events+0x24>
   10864:	20008214 	.word	0x20008214
   10868:	20009448 	.word	0x20009448
   1086c:	200093c0 	.word	0x200093c0

00010870 <bt_conn_ref>:
{
   10870:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   10872:	b180      	cbz	r0, 10896 <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   10874:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10878:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   1087c:	b1bb      	cbz	r3, 108ae <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1087e:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10880:	e8d2 4fef 	ldaex	r4, [r2]
   10884:	429c      	cmp	r4, r3
   10886:	d104      	bne.n	10892 <bt_conn_ref+0x22>
   10888:	e8c2 1fec 	stlex	ip, r1, [r2]
   1088c:	f1bc 0f00 	cmp.w	ip, #0
   10890:	d1f6      	bne.n	10880 <bt_conn_ref+0x10>
   10892:	d1f1      	bne.n	10878 <bt_conn_ref+0x8>
}
   10894:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   10896:	4907      	ldr	r1, [pc, #28]	; (108b4 <bt_conn_ref+0x44>)
   10898:	4807      	ldr	r0, [pc, #28]	; (108b8 <bt_conn_ref+0x48>)
   1089a:	f44f 638f 	mov.w	r3, #1144	; 0x478
   1089e:	4a07      	ldr	r2, [pc, #28]	; (108bc <bt_conn_ref+0x4c>)
   108a0:	f00c f923 	bl	1caea <assert_print>
   108a4:	f44f 618f 	mov.w	r1, #1144	; 0x478
   108a8:	4804      	ldr	r0, [pc, #16]	; (108bc <bt_conn_ref+0x4c>)
   108aa:	f00c f917 	bl	1cadc <assert_post_action>
			return NULL;
   108ae:	4618      	mov	r0, r3
   108b0:	e7f0      	b.n	10894 <bt_conn_ref+0x24>
   108b2:	bf00      	nop
   108b4:	00022d7b 	.word	0x00022d7b
   108b8:	00021547 	.word	0x00021547
   108bc:	000230f5 	.word	0x000230f5

000108c0 <bt_conn_unref>:
{
   108c0:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   108c2:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   108c6:	e8d3 2fef 	ldaex	r2, [r3]
   108ca:	1e51      	subs	r1, r2, #1
   108cc:	e8c3 1fe4 	stlex	r4, r1, [r3]
   108d0:	2c00      	cmp	r4, #0
   108d2:	d1f8      	bne.n	108c6 <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   108d4:	2a00      	cmp	r2, #0
   108d6:	dc0e      	bgt.n	108f6 <bt_conn_unref+0x36>
   108d8:	490d      	ldr	r1, [pc, #52]	; (10910 <bt_conn_unref+0x50>)
   108da:	f240 4395 	movw	r3, #1173	; 0x495
   108de:	4a0d      	ldr	r2, [pc, #52]	; (10914 <bt_conn_unref+0x54>)
   108e0:	480d      	ldr	r0, [pc, #52]	; (10918 <bt_conn_unref+0x58>)
   108e2:	f00c f902 	bl	1caea <assert_print>
   108e6:	480d      	ldr	r0, [pc, #52]	; (1091c <bt_conn_unref+0x5c>)
   108e8:	f00c f8ff 	bl	1caea <assert_print>
   108ec:	f240 4195 	movw	r1, #1173	; 0x495
   108f0:	4808      	ldr	r0, [pc, #32]	; (10914 <bt_conn_unref+0x54>)
   108f2:	f00c f8f3 	bl	1cadc <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   108f6:	f240 1201 	movw	r2, #257	; 0x101
   108fa:	8841      	ldrh	r1, [r0, #2]
   108fc:	4291      	cmp	r1, r2
   108fe:	d106      	bne.n	1090e <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10900:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   10904:	b91b      	cbnz	r3, 1090e <bt_conn_unref+0x4e>
}
   10906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1090a:	f7ff bbeb 	b.w	100e4 <bt_le_adv_resume>
}
   1090e:	bd10      	pop	{r4, pc}
   10910:	00023298 	.word	0x00023298
   10914:	000230f5 	.word	0x000230f5
   10918:	00021547 	.word	0x00021547
   1091c:	000232a0 	.word	0x000232a0

00010920 <bt_conn_lookup_handle>:
{
   10920:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   10922:	2101      	movs	r1, #1
   10924:	4801      	ldr	r0, [pc, #4]	; (1092c <bt_conn_lookup_handle+0xc>)
   10926:	f00d bb49 	b.w	1dfbc <conn_lookup_handle>
   1092a:	bf00      	nop
   1092c:	20009388 	.word	0x20009388

00010930 <bt_conn_set_state>:
{
   10930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   10932:	7a86      	ldrb	r6, [r0, #10]
{
   10934:	4604      	mov	r4, r0
	if (conn->state == state) {
   10936:	428e      	cmp	r6, r1
{
   10938:	460d      	mov	r5, r1
   1093a:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   1093c:	d119      	bne.n	10972 <bt_conn_set_state+0x42>
	switch (state) {
   1093e:	2e08      	cmp	r6, #8
   10940:	bf98      	it	ls
   10942:	4b6a      	ldrls	r3, [pc, #424]	; (10aec <bt_conn_set_state+0x1bc>)
		BT_WARN("no transition %s", state2str(state));
   10944:	466c      	mov	r4, sp
   10946:	b088      	sub	sp, #32
   10948:	bf94      	ite	ls
   1094a:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   1094e:	4b68      	ldrhi	r3, [pc, #416]	; (10af0 <bt_conn_set_state+0x1c0>)
		BT_WARN("no transition %s", state2str(state));
   10950:	466a      	mov	r2, sp
   10952:	4968      	ldr	r1, [pc, #416]	; (10af4 <bt_conn_set_state+0x1c4>)
   10954:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10958:	f44f 7300 	mov.w	r3, #512	; 0x200
   1095c:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   10960:	8393      	strh	r3, [r2, #28]
   10962:	4b65      	ldr	r3, [pc, #404]	; (10af8 <bt_conn_set_state+0x1c8>)
   10964:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_WARN("no valid (%u) state was set", state);
   10968:	4864      	ldr	r0, [pc, #400]	; (10afc <bt_conn_set_state+0x1cc>)
   1096a:	f00d fb18 	bl	1df9e <z_log_msg_static_create.constprop.0>
   1096e:	46a5      	mov	sp, r4
   10970:	e040      	b.n	109f4 <bt_conn_set_state+0xc4>
	conn->state = state;
   10972:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   10974:	b926      	cbnz	r6, 10980 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   10976:	7883      	ldrb	r3, [r0, #2]
   10978:	2b08      	cmp	r3, #8
   1097a:	d001      	beq.n	10980 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   1097c:	f7ff ff78 	bl	10870 <bt_conn_ref>
	switch (conn->state) {
   10980:	7aa3      	ldrb	r3, [r4, #10]
   10982:	2b08      	cmp	r3, #8
   10984:	f200 80ac 	bhi.w	10ae0 <bt_conn_set_state+0x1b0>
   10988:	e8df f003 	tbb	[pc, r3]
   1098c:	34340536 	.word	0x34340536
   10990:	1c343434 	.word	0x1c343434
   10994:	34          	.byte	0x34
   10995:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   10996:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   10998:	4d59      	ldr	r5, [pc, #356]	; (10b00 <bt_conn_set_state+0x1d0>)
	__asm__ volatile(
   1099a:	f04f 0220 	mov.w	r2, #32
   1099e:	f3ef 8311 	mrs	r3, BASEPRI
   109a2:	f382 8812 	msr	BASEPRI_MAX, r2
   109a6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   109aa:	69e2      	ldr	r2, [r4, #28]
   109ac:	2a00      	cmp	r2, #0
   109ae:	d073      	beq.n	10a98 <bt_conn_set_state+0x168>
			conn->pending_no_cb--;
   109b0:	3a01      	subs	r2, #1
   109b2:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   109b4:	f383 8811 	msr	BASEPRI, r3
   109b8:	f3bf 8f6f 	isb	sy
   109bc:	4628      	mov	r0, r5
   109be:	f008 fdc3 	bl	19548 <z_impl_k_sem_give>
}
   109c2:	e7ea      	b.n	1099a <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   109c4:	78a3      	ldrb	r3, [r4, #2]
   109c6:	2b04      	cmp	r3, #4
   109c8:	d014      	beq.n	109f4 <bt_conn_set_state+0xc4>
	z_impl_k_queue_init(queue);
   109ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   109ce:	f00f fb0b 	bl	1ffe8 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   109d2:	2100      	movs	r1, #0
   109d4:	484b      	ldr	r0, [pc, #300]	; (10b04 <bt_conn_set_state+0x1d4>)
   109d6:	f00b fd05 	bl	1c3e4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   109da:	2300      	movs	r3, #0
	list->tail = NULL;
   109dc:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   109e0:	78e3      	ldrb	r3, [r4, #3]
   109e2:	2b01      	cmp	r3, #1
   109e4:	d106      	bne.n	109f4 <bt_conn_set_state+0xc4>
			k_work_schedule(&conn->deferred_work,
   109e6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   109ea:	2300      	movs	r3, #0
   109ec:	f104 0060 	add.w	r0, r4, #96	; 0x60
   109f0:	f009 fad0 	bl	19f94 <k_work_schedule>
}
   109f4:	46bd      	mov	sp, r7
   109f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   109f8:	78a3      	ldrb	r3, [r4, #2]
   109fa:	2b04      	cmp	r3, #4
   109fc:	d103      	bne.n	10a06 <bt_conn_set_state+0xd6>
			bt_conn_unref(conn);
   109fe:	4620      	mov	r0, r4
   10a00:	f7ff ff5e 	bl	108c0 <bt_conn_unref>
			break;
   10a04:	e7f6      	b.n	109f4 <bt_conn_set_state+0xc4>
		switch (old_state) {
   10a06:	2e08      	cmp	r6, #8
   10a08:	d8f4      	bhi.n	109f4 <bt_conn_set_state+0xc4>
   10a0a:	a301      	add	r3, pc, #4	; (adr r3, 10a10 <bt_conn_set_state+0xe0>)
   10a0c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   10a10:	00010a81 	.word	0x00010a81
   10a14:	00010a35 	.word	0x00010a35
   10a18:	00010a73 	.word	0x00010a73
   10a1c:	000109ff 	.word	0x000109ff
   10a20:	000109ff 	.word	0x000109ff
   10a24:	00010a73 	.word	0x00010a73
   10a28:	00010a73 	.word	0x00010a73
   10a2c:	000109f5 	.word	0x000109f5
   10a30:	00010a81 	.word	0x00010a81
			tx_notify(conn);
   10a34:	4620      	mov	r0, r4
   10a36:	f7ff fc47 	bl	102c8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   10a3a:	78a3      	ldrb	r3, [r4, #2]
   10a3c:	2b01      	cmp	r3, #1
   10a3e:	d10a      	bne.n	10a56 <bt_conn_set_state+0x126>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   10a40:	f104 0560 	add.w	r5, r4, #96	; 0x60
   10a44:	4628      	mov	r0, r5
   10a46:	f00f fb65 	bl	20114 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   10a4a:	f010 0f0c 	tst.w	r0, #12
   10a4e:	d002      	beq.n	10a56 <bt_conn_set_state+0x126>
				k_work_cancel_delayable(&conn->deferred_work);
   10a50:	4628      	mov	r0, r5
   10a52:	f009 fb1f 	bl	1a094 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10a56:	3404      	adds	r4, #4
   10a58:	e8d4 3fef 	ldaex	r3, [r4]
   10a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a60:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10a64:	2a00      	cmp	r2, #0
   10a66:	d1f7      	bne.n	10a58 <bt_conn_set_state+0x128>
   10a68:	2100      	movs	r1, #0
   10a6a:	4826      	ldr	r0, [pc, #152]	; (10b04 <bt_conn_set_state+0x1d4>)
   10a6c:	f00b fcba 	bl	1c3e4 <z_impl_k_poll_signal_raise>
   10a70:	e7c0      	b.n	109f4 <bt_conn_set_state+0xc4>
			if (conn->err) {
   10a72:	7a63      	ldrb	r3, [r4, #9]
   10a74:	2b00      	cmp	r3, #0
   10a76:	d0c2      	beq.n	109fe <bt_conn_set_state+0xce>
				notify_connected(conn);
   10a78:	4620      	mov	r0, r4
   10a7a:	f7ff fbef 	bl	1025c <notify_connected>
   10a7e:	e7be      	b.n	109fe <bt_conn_set_state+0xce>
			BT_WARN("Invalid (%u) old state", state);
   10a80:	466c      	mov	r4, sp
   10a82:	b088      	sub	sp, #32
   10a84:	466a      	mov	r2, sp
   10a86:	4b20      	ldr	r3, [pc, #128]	; (10b08 <bt_conn_set_state+0x1d8>)
		BT_WARN("no valid (%u) state was set", state);
   10a88:	e9c2 3505 	strd	r3, r5, [r2, #20]
   10a8c:	2303      	movs	r3, #3
   10a8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10a92:	f842 3f10 	str.w	r3, [r2, #16]!
   10a96:	e767      	b.n	10968 <bt_conn_set_state+0x38>
	return list->head;
   10a98:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   10a9a:	b921      	cbnz	r1, 10aa6 <bt_conn_set_state+0x176>
   10a9c:	f383 8811 	msr	BASEPRI, r3
   10aa0:	f3bf 8f6f 	isb	sy
		if (!node) {
   10aa4:	e7a6      	b.n	109f4 <bt_conn_set_state+0xc4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10aa6:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   10aa8:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10aaa:	4281      	cmp	r1, r0
	list->tail = node;
   10aac:	bf08      	it	eq
   10aae:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   10ab0:	6162      	str	r2, [r4, #20]
   10ab2:	f383 8811 	msr	BASEPRI, r3
   10ab6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   10aba:	f04f 0220 	mov.w	r2, #32
   10abe:	f3ef 8311 	mrs	r3, BASEPRI
   10ac2:	f382 8812 	msr	BASEPRI_MAX, r2
   10ac6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   10aca:	68ca      	ldr	r2, [r1, #12]
   10acc:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   10ace:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   10ad0:	f383 8811 	msr	BASEPRI, r3
   10ad4:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   10ad8:	4620      	mov	r0, r4
   10ada:	f7ff fc25 	bl	10328 <conn_tx_destroy>
   10ade:	e76d      	b.n	109bc <bt_conn_set_state+0x8c>
		BT_WARN("no valid (%u) state was set", state);
   10ae0:	466c      	mov	r4, sp
   10ae2:	b088      	sub	sp, #32
   10ae4:	466a      	mov	r2, sp
   10ae6:	4b09      	ldr	r3, [pc, #36]	; (10b0c <bt_conn_set_state+0x1dc>)
   10ae8:	e7ce      	b.n	10a88 <bt_conn_set_state+0x158>
   10aea:	bf00      	nop
   10aec:	00020d04 	.word	0x00020d04
   10af0:	000232be 	.word	0x000232be
   10af4:	000232c8 	.word	0x000232c8
   10af8:	01000003 	.word	0x01000003
   10afc:	00020824 	.word	0x00020824
   10b00:	20008100 	.word	0x20008100
   10b04:	20008214 	.word	0x20008214
   10b08:	000232d9 	.word	0x000232d9
   10b0c:	000232f0 	.word	0x000232f0

00010b10 <bt_conn_index>:
		index = conn - acl_conns;
   10b10:	4a0c      	ldr	r2, [pc, #48]	; (10b44 <bt_conn_index+0x34>)
{
   10b12:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   10b14:	490c      	ldr	r1, [pc, #48]	; (10b48 <bt_conn_index+0x38>)
   10b16:	1a83      	subs	r3, r0, r2
   10b18:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   10b1a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   10b1c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   10b20:	d00e      	beq.n	10b40 <bt_conn_index+0x30>
   10b22:	490a      	ldr	r1, [pc, #40]	; (10b4c <bt_conn_index+0x3c>)
   10b24:	f240 43b3 	movw	r3, #1203	; 0x4b3
   10b28:	4a09      	ldr	r2, [pc, #36]	; (10b50 <bt_conn_index+0x40>)
   10b2a:	480a      	ldr	r0, [pc, #40]	; (10b54 <bt_conn_index+0x44>)
   10b2c:	f00b ffdd 	bl	1caea <assert_print>
   10b30:	4809      	ldr	r0, [pc, #36]	; (10b58 <bt_conn_index+0x48>)
   10b32:	f00b ffda 	bl	1caea <assert_print>
   10b36:	f240 41b3 	movw	r1, #1203	; 0x4b3
   10b3a:	4805      	ldr	r0, [pc, #20]	; (10b50 <bt_conn_index+0x40>)
   10b3c:	f00b ffce 	bl	1cadc <assert_post_action>
}
   10b40:	b2d8      	uxtb	r0, r3
   10b42:	bd08      	pop	{r3, pc}
   10b44:	20009388 	.word	0x20009388
   10b48:	c28f5c29 	.word	0xc28f5c29
   10b4c:	0002330c 	.word	0x0002330c
   10b50:	000230f5 	.word	0x000230f5
   10b54:	00021547 	.word	0x00021547
   10b58:	000233d5 	.word	0x000233d5

00010b5c <bt_conn_create_pdu_timeout>:
{
   10b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b5e:	b087      	sub	sp, #28
   10b60:	4604      	mov	r4, r0
   10b62:	460d      	mov	r5, r1
   10b64:	4617      	mov	r7, r2
   10b66:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   10b68:	f00f fa0f 	bl	1ff8a <k_is_in_isr>
   10b6c:	b158      	cbz	r0, 10b86 <bt_conn_create_pdu_timeout+0x2a>
   10b6e:	4914      	ldr	r1, [pc, #80]	; (10bc0 <bt_conn_create_pdu_timeout+0x64>)
   10b70:	4814      	ldr	r0, [pc, #80]	; (10bc4 <bt_conn_create_pdu_timeout+0x68>)
   10b72:	f240 43cf 	movw	r3, #1231	; 0x4cf
   10b76:	4a14      	ldr	r2, [pc, #80]	; (10bc8 <bt_conn_create_pdu_timeout+0x6c>)
   10b78:	f00b ffb7 	bl	1caea <assert_print>
   10b7c:	f240 41cf 	movw	r1, #1231	; 0x4cf
   10b80:	4811      	ldr	r0, [pc, #68]	; (10bc8 <bt_conn_create_pdu_timeout+0x6c>)
   10b82:	f00b ffab 	bl	1cadc <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   10b86:	4911      	ldr	r1, [pc, #68]	; (10bcc <bt_conn_create_pdu_timeout+0x70>)
   10b88:	463a      	mov	r2, r7
   10b8a:	2c00      	cmp	r4, #0
   10b8c:	bf14      	ite	ne
   10b8e:	4620      	movne	r0, r4
   10b90:	4608      	moveq	r0, r1
   10b92:	4633      	mov	r3, r6
   10b94:	f00e f95a 	bl	1ee4c <net_buf_alloc_fixed>
	if (!buf) {
   10b98:	4604      	mov	r4, r0
   10b9a:	b960      	cbnz	r0, 10bb6 <bt_conn_create_pdu_timeout+0x5a>
		BT_WARN("Unable to allocate buffer within timeout");
   10b9c:	4b0c      	ldr	r3, [pc, #48]	; (10bd0 <bt_conn_create_pdu_timeout+0x74>)
   10b9e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10ba2:	9305      	str	r3, [sp, #20]
   10ba4:	2302      	movs	r3, #2
   10ba6:	480b      	ldr	r0, [pc, #44]	; (10bd4 <bt_conn_create_pdu_timeout+0x78>)
   10ba8:	aa04      	add	r2, sp, #16
   10baa:	9304      	str	r3, [sp, #16]
   10bac:	f00d f9f7 	bl	1df9e <z_log_msg_static_create.constprop.0>
}
   10bb0:	4620      	mov	r0, r4
   10bb2:	b007      	add	sp, #28
   10bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   10bb6:	1d69      	adds	r1, r5, #5
   10bb8:	3008      	adds	r0, #8
   10bba:	f002 fe81 	bl	138c0 <net_buf_simple_reserve>
	return buf;
   10bbe:	e7f7      	b.n	10bb0 <bt_conn_create_pdu_timeout+0x54>
   10bc0:	000233ef 	.word	0x000233ef
   10bc4:	00021547 	.word	0x00021547
   10bc8:	000230f5 	.word	0x000230f5
   10bcc:	20008690 	.word	0x20008690
   10bd0:	000233fe 	.word	0x000233fe
   10bd4:	00020824 	.word	0x00020824

00010bd8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   10bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bda:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   10bdc:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10bde:	e8d3 2faf 	lda	r2, [r3]
   10be2:	05d2      	lsls	r2, r2, #23
   10be4:	d515      	bpl.n	10c12 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   10be6:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   10bea:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   10bee:	4291      	cmp	r1, r2
   10bf0:	d80f      	bhi.n	10c12 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   10bf2:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   10bf6:	4291      	cmp	r1, r2
   10bf8:	d30b      	bcc.n	10c12 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   10bfa:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   10bfe:	4291      	cmp	r1, r2
   10c00:	d107      	bne.n	10c12 <notify_le_param_updated+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10c02:	e8d3 1fef 	ldaex	r1, [r3]
   10c06:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   10c0a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10c0e:	2a00      	cmp	r2, #0
   10c10:	d1f7      	bne.n	10c02 <notify_le_param_updated+0x2a>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   10c12:	4b18      	ldr	r3, [pc, #96]	; (10c74 <notify_le_param_updated+0x9c>)
   10c14:	681d      	ldr	r5, [r3, #0]
   10c16:	b995      	cbnz	r5, 10c3e <notify_le_param_updated+0x66>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10c18:	4d17      	ldr	r5, [pc, #92]	; (10c78 <notify_le_param_updated+0xa0>)
   10c1a:	4f18      	ldr	r7, [pc, #96]	; (10c7c <notify_le_param_updated+0xa4>)
   10c1c:	42bd      	cmp	r5, r7
   10c1e:	d926      	bls.n	10c6e <notify_le_param_updated+0x96>
   10c20:	4917      	ldr	r1, [pc, #92]	; (10c80 <notify_le_param_updated+0xa8>)
   10c22:	f240 53a2 	movw	r3, #1442	; 0x5a2
   10c26:	4a17      	ldr	r2, [pc, #92]	; (10c84 <notify_le_param_updated+0xac>)
   10c28:	4817      	ldr	r0, [pc, #92]	; (10c88 <notify_le_param_updated+0xb0>)
   10c2a:	f00b ff5e 	bl	1caea <assert_print>
   10c2e:	4817      	ldr	r0, [pc, #92]	; (10c8c <notify_le_param_updated+0xb4>)
   10c30:	f00b ff5b 	bl	1caea <assert_print>
   10c34:	f240 51a2 	movw	r1, #1442	; 0x5a2
   10c38:	4812      	ldr	r0, [pc, #72]	; (10c84 <notify_le_param_updated+0xac>)
   10c3a:	f00b ff4f 	bl	1cadc <assert_post_action>
		if (cb->le_param_updated) {
   10c3e:	68ee      	ldr	r6, [r5, #12]
   10c40:	b13e      	cbz	r6, 10c52 <notify_le_param_updated+0x7a>
			cb->le_param_updated(conn, conn->le.interval,
   10c42:	4620      	mov	r0, r4
   10c44:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   10c48:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   10c4c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   10c50:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10c52:	692d      	ldr	r5, [r5, #16]
   10c54:	e7df      	b.n	10c16 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   10c56:	68ee      	ldr	r6, [r5, #12]
   10c58:	b13e      	cbz	r6, 10c6a <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   10c5a:	4620      	mov	r0, r4
   10c5c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   10c60:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   10c64:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   10c68:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10c6a:	3514      	adds	r5, #20
   10c6c:	e7d6      	b.n	10c1c <notify_le_param_updated+0x44>
   10c6e:	d3f2      	bcc.n	10c56 <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   10c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c72:	bf00      	nop
   10c74:	20009854 	.word	0x20009854
   10c78:	000207ec 	.word	0x000207ec
   10c7c:	000207ec 	.word	0x000207ec
   10c80:	00023125 	.word	0x00023125
   10c84:	000230f5 	.word	0x000230f5
   10c88:	00021547 	.word	0x00021547
   10c8c:	00021c6a 	.word	0x00021c6a

00010c90 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   10c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c94:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   10c96:	4608      	mov	r0, r1
{
   10c98:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   10c9a:	f00d f833 	bl	1dd04 <bt_le_conn_params_valid>
   10c9e:	4605      	mov	r5, r0
   10ca0:	b918      	cbnz	r0, 10caa <le_param_req+0x1a>
		return false;
   10ca2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   10ca4:	4628      	mov	r0, r5
   10ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10caa:	4b1b      	ldr	r3, [pc, #108]	; (10d18 <le_param_req+0x88>)
   10cac:	681e      	ldr	r6, [r3, #0]
   10cae:	b99e      	cbnz	r6, 10cd8 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10cb0:	4e1a      	ldr	r6, [pc, #104]	; (10d1c <le_param_req+0x8c>)
   10cb2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 10d20 <le_param_req+0x90>
   10cb6:	4546      	cmp	r6, r8
   10cb8:	d927      	bls.n	10d0a <le_param_req+0x7a>
   10cba:	491a      	ldr	r1, [pc, #104]	; (10d24 <le_param_req+0x94>)
   10cbc:	f240 53ea 	movw	r3, #1514	; 0x5ea
   10cc0:	4a19      	ldr	r2, [pc, #100]	; (10d28 <le_param_req+0x98>)
   10cc2:	481a      	ldr	r0, [pc, #104]	; (10d2c <le_param_req+0x9c>)
   10cc4:	f00b ff11 	bl	1caea <assert_print>
   10cc8:	4819      	ldr	r0, [pc, #100]	; (10d30 <le_param_req+0xa0>)
   10cca:	f00b ff0e 	bl	1caea <assert_print>
   10cce:	f240 51ea 	movw	r1, #1514	; 0x5ea
   10cd2:	4815      	ldr	r0, [pc, #84]	; (10d28 <le_param_req+0x98>)
   10cd4:	f00b ff02 	bl	1cadc <assert_post_action>
		if (!cb->le_param_req) {
   10cd8:	68b3      	ldr	r3, [r6, #8]
   10cda:	b90b      	cbnz	r3, 10ce0 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   10cdc:	6936      	ldr	r6, [r6, #16]
   10cde:	e7e6      	b.n	10cae <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   10ce0:	4621      	mov	r1, r4
   10ce2:	4638      	mov	r0, r7
   10ce4:	4798      	blx	r3
   10ce6:	2800      	cmp	r0, #0
   10ce8:	d0db      	beq.n	10ca2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   10cea:	4620      	mov	r0, r4
   10cec:	f00d f80a 	bl	1dd04 <bt_le_conn_params_valid>
   10cf0:	2800      	cmp	r0, #0
   10cf2:	d1f3      	bne.n	10cdc <le_param_req+0x4c>
   10cf4:	e7d5      	b.n	10ca2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   10cf6:	4621      	mov	r1, r4
   10cf8:	4638      	mov	r0, r7
   10cfa:	4798      	blx	r3
   10cfc:	2800      	cmp	r0, #0
   10cfe:	d0d0      	beq.n	10ca2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   10d00:	4620      	mov	r0, r4
   10d02:	f00c ffff 	bl	1dd04 <bt_le_conn_params_valid>
   10d06:	b920      	cbnz	r0, 10d12 <le_param_req+0x82>
   10d08:	e7cb      	b.n	10ca2 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10d0a:	d2cb      	bcs.n	10ca4 <le_param_req+0x14>
		if (!cb->le_param_req) {
   10d0c:	68b3      	ldr	r3, [r6, #8]
   10d0e:	2b00      	cmp	r3, #0
   10d10:	d1f1      	bne.n	10cf6 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10d12:	3614      	adds	r6, #20
   10d14:	e7cf      	b.n	10cb6 <le_param_req+0x26>
   10d16:	bf00      	nop
   10d18:	20009854 	.word	0x20009854
   10d1c:	000207ec 	.word	0x000207ec
   10d20:	000207ec 	.word	0x000207ec
   10d24:	00023125 	.word	0x00023125
   10d28:	000230f5 	.word	0x000230f5
   10d2c:	00021547 	.word	0x00021547
   10d30:	00021c6a 	.word	0x00021c6a

00010d34 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   10d34:	4b02      	ldr	r3, [pc, #8]	; (10d40 <bt_conn_cb_register+0xc>)
   10d36:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   10d38:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   10d3a:	6102      	str	r2, [r0, #16]
}
   10d3c:	4770      	bx	lr
   10d3e:	bf00      	nop
   10d40:	20009854 	.word	0x20009854

00010d44 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   10d44:	b570      	push	{r4, r5, r6, lr}
   10d46:	4606      	mov	r6, r0
   10d48:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   10d4a:	4809      	ldr	r0, [pc, #36]	; (10d70 <bt_conn_add_le+0x2c>)
   10d4c:	2101      	movs	r1, #1
   10d4e:	f7ff fbd9 	bl	10504 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   10d52:	4604      	mov	r4, r0
   10d54:	b150      	cbz	r0, 10d6c <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   10d56:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   10d58:	2207      	movs	r2, #7
   10d5a:	4629      	mov	r1, r5
   10d5c:	3090      	adds	r0, #144	; 0x90
   10d5e:	f00c fed3 	bl	1db08 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   10d62:	2301      	movs	r3, #1
   10d64:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   10d66:	4b03      	ldr	r3, [pc, #12]	; (10d74 <bt_conn_add_le+0x30>)
   10d68:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   10d6c:	4620      	mov	r0, r4
   10d6e:	bd70      	pop	{r4, r5, r6, pc}
   10d70:	20009388 	.word	0x20009388
   10d74:	00280018 	.word	0x00280018

00010d78 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   10d78:	b570      	push	{r4, r5, r6, lr}
   10d7a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10d7c:	480a      	ldr	r0, [pc, #40]	; (10da8 <bt_conn_lookup_addr_le+0x30>)
{
   10d7e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10d80:	f7ff fd76 	bl	10870 <bt_conn_ref>
   10d84:	4604      	mov	r4, r0

		if (!conn) {
   10d86:	b120      	cbz	r0, 10d92 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   10d88:	7883      	ldrb	r3, [r0, #2]
   10d8a:	2b01      	cmp	r3, #1
   10d8c:	d004      	beq.n	10d98 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   10d8e:	f7ff fd97 	bl	108c0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   10d92:	2400      	movs	r4, #0
}
   10d94:	4620      	mov	r0, r4
   10d96:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   10d98:	4632      	mov	r2, r6
   10d9a:	4629      	mov	r1, r5
   10d9c:	f00d f93b 	bl	1e016 <bt_conn_is_peer_addr_le>
   10da0:	2800      	cmp	r0, #0
   10da2:	d1f7      	bne.n	10d94 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   10da4:	4620      	mov	r0, r4
   10da6:	e7f2      	b.n	10d8e <bt_conn_lookup_addr_le+0x16>
   10da8:	20009388 	.word	0x20009388

00010dac <bt_conn_exists_le>:
{
   10dac:	b5b0      	push	{r4, r5, r7, lr}
   10dae:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   10db0:	f7ff ffe2 	bl	10d78 <bt_conn_lookup_addr_le>
	if (conn) {
   10db4:	4604      	mov	r4, r0
   10db6:	b1e8      	cbz	r0, 10df4 <bt_conn_exists_le+0x48>
		BT_WARN("Found valid connection in %s state",
   10db8:	7a83      	ldrb	r3, [r0, #10]
   10dba:	466d      	mov	r5, sp
   10dbc:	2b08      	cmp	r3, #8
   10dbe:	bf98      	it	ls
   10dc0:	4a0d      	ldrls	r2, [pc, #52]	; (10df8 <bt_conn_exists_le+0x4c>)
   10dc2:	b088      	sub	sp, #32
   10dc4:	bf94      	ite	ls
   10dc6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   10dca:	4b0c      	ldrhi	r3, [pc, #48]	; (10dfc <bt_conn_exists_le+0x50>)
   10dcc:	466a      	mov	r2, sp
   10dce:	490c      	ldr	r1, [pc, #48]	; (10e00 <bt_conn_exists_le+0x54>)
   10dd0:	480c      	ldr	r0, [pc, #48]	; (10e04 <bt_conn_exists_le+0x58>)
   10dd2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
   10dda:	8393      	strh	r3, [r2, #28]
   10ddc:	4b0a      	ldr	r3, [pc, #40]	; (10e08 <bt_conn_exists_le+0x5c>)
   10dde:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   10de2:	f842 3f10 	str.w	r3, [r2, #16]!
   10de6:	f00d f8da 	bl	1df9e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   10dea:	4620      	mov	r0, r4
   10dec:	46ad      	mov	sp, r5
   10dee:	f7ff fd67 	bl	108c0 <bt_conn_unref>
		return true;
   10df2:	2001      	movs	r0, #1
}
   10df4:	46bd      	mov	sp, r7
   10df6:	bdb0      	pop	{r4, r5, r7, pc}
   10df8:	00020d04 	.word	0x00020d04
   10dfc:	000232be 	.word	0x000232be
   10e00:	00023427 	.word	0x00023427
   10e04:	00020824 	.word	0x00020824
   10e08:	01000003 	.word	0x01000003

00010e0c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   10e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e0e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10e10:	480e      	ldr	r0, [pc, #56]	; (10e4c <bt_conn_lookup_state_le+0x40>)
{
   10e12:	460e      	mov	r6, r1
   10e14:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10e16:	f7ff fd2b 	bl	10870 <bt_conn_ref>

		if (!conn) {
   10e1a:	4604      	mov	r4, r0
   10e1c:	b120      	cbz	r0, 10e28 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   10e1e:	7883      	ldrb	r3, [r0, #2]
   10e20:	2b01      	cmp	r3, #1
   10e22:	d003      	beq.n	10e2c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   10e24:	f7ff fd4c 	bl	108c0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   10e28:	2400      	movs	r4, #0
   10e2a:	e00d      	b.n	10e48 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   10e2c:	b136      	cbz	r6, 10e3c <bt_conn_lookup_state_le+0x30>
   10e2e:	4632      	mov	r2, r6
   10e30:	4629      	mov	r1, r5
   10e32:	f00d f8f0 	bl	1e016 <bt_conn_is_peer_addr_le>
   10e36:	b908      	cbnz	r0, 10e3c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   10e38:	4620      	mov	r0, r4
   10e3a:	e7f3      	b.n	10e24 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   10e3c:	7aa3      	ldrb	r3, [r4, #10]
   10e3e:	42bb      	cmp	r3, r7
   10e40:	d1fa      	bne.n	10e38 <bt_conn_lookup_state_le+0x2c>
   10e42:	7a23      	ldrb	r3, [r4, #8]
   10e44:	42ab      	cmp	r3, r5
   10e46:	d1f7      	bne.n	10e38 <bt_conn_lookup_state_le+0x2c>
}
   10e48:	4620      	mov	r0, r4
   10e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e4c:	20009388 	.word	0x20009388

00010e50 <send_conn_le_param_update>:
{
   10e50:	b538      	push	{r3, r4, r5, lr}
   10e52:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   10e54:	4608      	mov	r0, r1
{
   10e56:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10e58:	f00c ff54 	bl	1dd04 <bt_le_conn_params_valid>
   10e5c:	b338      	cbz	r0, 10eae <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10e5e:	4b15      	ldr	r3, [pc, #84]	; (10eb4 <send_conn_le_param_update+0x64>)
   10e60:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   10e64:	0799      	lsls	r1, r3, #30
   10e66:	d407      	bmi.n	10e78 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   10e68:	78e3      	ldrb	r3, [r4, #3]
   10e6a:	b173      	cbz	r3, 10e8a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   10e6c:	4629      	mov	r1, r5
   10e6e:	4620      	mov	r0, r4
}
   10e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   10e74:	f000 bab0 	b.w	113d8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10e78:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   10e7c:	079a      	lsls	r2, r3, #30
   10e7e:	d5f3      	bpl.n	10e68 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10e80:	1d23      	adds	r3, r4, #4
   10e82:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   10e86:	059b      	lsls	r3, r3, #22
   10e88:	d4ee      	bmi.n	10e68 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   10e8a:	4629      	mov	r1, r5
   10e8c:	4620      	mov	r0, r4
   10e8e:	f00d f8e2 	bl	1e056 <bt_conn_le_conn_update>
		if (rc == 0) {
   10e92:	b958      	cbnz	r0, 10eac <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   10e94:	882b      	ldrh	r3, [r5, #0]
   10e96:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   10e9a:	886b      	ldrh	r3, [r5, #2]
   10e9c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   10ea0:	88ab      	ldrh	r3, [r5, #4]
   10ea2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   10ea6:	88eb      	ldrh	r3, [r5, #6]
   10ea8:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   10eac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10eae:	f06f 0015 	mvn.w	r0, #21
   10eb2:	e7fb      	b.n	10eac <send_conn_le_param_update+0x5c>
   10eb4:	20008000 	.word	0x20008000

00010eb8 <deferred_work>:
{
   10eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   10eba:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   10ebe:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   10ec0:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   10ec4:	bb7b      	cbnz	r3, 10f26 <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   10ec6:	4628      	mov	r0, r5
   10ec8:	f00d f922 	bl	1e110 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   10ecc:	4b2a      	ldr	r3, [pc, #168]	; (10f78 <deferred_work+0xc0>)
   10ece:	681e      	ldr	r6, [r3, #0]
   10ed0:	b996      	cbnz	r6, 10ef8 <deferred_work+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10ed2:	4e2a      	ldr	r6, [pc, #168]	; (10f7c <deferred_work+0xc4>)
   10ed4:	4f2a      	ldr	r7, [pc, #168]	; (10f80 <deferred_work+0xc8>)
   10ed6:	42be      	cmp	r6, r7
   10ed8:	d91e      	bls.n	10f18 <deferred_work+0x60>
   10eda:	492a      	ldr	r1, [pc, #168]	; (10f84 <deferred_work+0xcc>)
   10edc:	f240 5369 	movw	r3, #1385	; 0x569
   10ee0:	4a29      	ldr	r2, [pc, #164]	; (10f88 <deferred_work+0xd0>)
   10ee2:	482a      	ldr	r0, [pc, #168]	; (10f8c <deferred_work+0xd4>)
   10ee4:	f00b fe01 	bl	1caea <assert_print>
   10ee8:	4829      	ldr	r0, [pc, #164]	; (10f90 <deferred_work+0xd8>)
   10eea:	f00b fdfe 	bl	1caea <assert_print>
   10eee:	f240 5169 	movw	r1, #1385	; 0x569
   10ef2:	4825      	ldr	r0, [pc, #148]	; (10f88 <deferred_work+0xd0>)
   10ef4:	f00b fdf2 	bl	1cadc <assert_post_action>
		if (cb->disconnected) {
   10ef8:	6873      	ldr	r3, [r6, #4]
   10efa:	b11b      	cbz	r3, 10f04 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
   10efc:	4628      	mov	r0, r5
   10efe:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   10f02:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10f04:	6936      	ldr	r6, [r6, #16]
   10f06:	e7e3      	b.n	10ed0 <deferred_work+0x18>
		if (cb->disconnected) {
   10f08:	6873      	ldr	r3, [r6, #4]
   10f0a:	b11b      	cbz	r3, 10f14 <deferred_work+0x5c>
			cb->disconnected(conn, conn->err);
   10f0c:	4628      	mov	r0, r5
   10f0e:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   10f12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10f14:	3614      	adds	r6, #20
   10f16:	e7de      	b.n	10ed6 <deferred_work+0x1e>
   10f18:	d3f6      	bcc.n	10f08 <deferred_work+0x50>
		bt_conn_unref(conn);
   10f1a:	4628      	mov	r0, r5
}
   10f1c:	b003      	add	sp, #12
   10f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   10f22:	f7ff bccd 	b.w	108c0 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   10f26:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   10f2a:	2b01      	cmp	r3, #1
   10f2c:	d11b      	bne.n	10f66 <deferred_work+0xae>
	if (atomic_test_and_clear_bit(conn->flags,
   10f2e:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10f32:	e8d6 3fef 	ldaex	r3, [r6]
   10f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   10f3a:	e8c6 2fe1 	stlex	r1, r2, [r6]
   10f3e:	2900      	cmp	r1, #0
   10f40:	d1f7      	bne.n	10f32 <deferred_work+0x7a>
   10f42:	05db      	lsls	r3, r3, #23
   10f44:	d511      	bpl.n	10f6a <deferred_work+0xb2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   10f46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   10f48:	9300      	str	r3, [sp, #0]
   10f4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   10f4c:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   10f4e:	4669      	mov	r1, sp
   10f50:	4628      	mov	r0, r5
   10f52:	f7ff ff7d 	bl	10e50 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10f56:	e8d6 3fef 	ldaex	r3, [r6]
   10f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10f5e:	e8c6 3fe2 	stlex	r2, r3, [r6]
   10f62:	2a00      	cmp	r2, #0
   10f64:	d1f7      	bne.n	10f56 <deferred_work+0x9e>
}
   10f66:	b003      	add	sp, #12
   10f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   10f6a:	466b      	mov	r3, sp
   10f6c:	4a09      	ldr	r2, [pc, #36]	; (10f94 <deferred_work+0xdc>)
   10f6e:	6810      	ldr	r0, [r2, #0]
   10f70:	6851      	ldr	r1, [r2, #4]
   10f72:	c303      	stmia	r3!, {r0, r1}
   10f74:	e7eb      	b.n	10f4e <deferred_work+0x96>
   10f76:	bf00      	nop
   10f78:	20009854 	.word	0x20009854
   10f7c:	000207ec 	.word	0x000207ec
   10f80:	000207ec 	.word	0x000207ec
   10f84:	00023125 	.word	0x00023125
   10f88:	000230f5 	.word	0x000230f5
   10f8c:	00021547 	.word	0x00021547
   10f90:	00021c6a 	.word	0x00021c6a
   10f94:	00020970 	.word	0x00020970

00010f98 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   10f98:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   10f9a:	4801      	ldr	r0, [pc, #4]	; (10fa0 <bt_conn_create_frag_timeout+0x8>)
   10f9c:	f7ff bdde 	b.w	10b5c <bt_conn_create_pdu_timeout>
   10fa0:	2000872c 	.word	0x2000872c

00010fa4 <create_frag>:
{
   10fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fa8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   10faa:	f04f 33ff 	mov.w	r3, #4294967295
   10fae:	f04f 32ff 	mov.w	r2, #4294967295
   10fb2:	2000      	movs	r0, #0
{
   10fb4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   10fb6:	f7ff ffef 	bl	10f98 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   10fba:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   10fbc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10fbe:	2b07      	cmp	r3, #7
   10fc0:	f04f 0600 	mov.w	r6, #0
   10fc4:	d005      	beq.n	10fd2 <create_frag+0x2e>
		net_buf_unref(frag);
   10fc6:	f002 fdbf 	bl	13b48 <net_buf_unref>
		return NULL;
   10fca:	4635      	mov	r5, r6
}
   10fcc:	4628      	mov	r0, r5
   10fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   10fd2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   10fd4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   10fd8:	4e0c      	ldr	r6, [pc, #48]	; (1100c <create_frag+0x68>)
   10fda:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10fdc:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   10fe0:	f00d ff4c 	bl	1ee7c <net_buf_simple_tailroom>
   10fe4:	4580      	cmp	r8, r0
   10fe6:	d20c      	bcs.n	11002 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   10fe8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10fec:	f854 1f08 	ldr.w	r1, [r4, #8]!
   10ff0:	4632      	mov	r2, r6
   10ff2:	4638      	mov	r0, r7
   10ff4:	f00d ff4a 	bl	1ee8c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   10ff8:	4631      	mov	r1, r6
   10ffa:	4620      	mov	r0, r4
   10ffc:	f002 fe8a 	bl	13d14 <net_buf_simple_pull>
   11000:	e7e4      	b.n	10fcc <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11002:	4638      	mov	r0, r7
   11004:	f00d ff3a 	bl	1ee7c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11008:	b286      	uxth	r6, r0
   1100a:	e7ef      	b.n	10fec <create_frag+0x48>
   1100c:	20008000 	.word	0x20008000

00011010 <bt_conn_process_tx>:
{
   11010:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11012:	7a83      	ldrb	r3, [r0, #10]
{
   11014:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11016:	b973      	cbnz	r3, 11036 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11018:	1d03      	adds	r3, r0, #4
   1101a:	e8d3 2fef 	ldaex	r2, [r3]
   1101e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11022:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11026:	2d00      	cmp	r5, #0
   11028:	d1f7      	bne.n	1101a <bt_conn_process_tx+0xa>
   1102a:	0653      	lsls	r3, r2, #25
   1102c:	d503      	bpl.n	11036 <bt_conn_process_tx+0x26>
}
   1102e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11032:	f7ff ba95 	b.w	10560 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11036:	2200      	movs	r2, #0
   11038:	2300      	movs	r3, #0
   1103a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1103e:	f002 fc11 	bl	13864 <net_buf_get>
	BT_ASSERT(buf);
   11042:	4605      	mov	r5, r0
   11044:	b960      	cbnz	r0, 11060 <bt_conn_process_tx+0x50>
   11046:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1104a:	4a23      	ldr	r2, [pc, #140]	; (110d8 <bt_conn_process_tx+0xc8>)
   1104c:	4923      	ldr	r1, [pc, #140]	; (110dc <bt_conn_process_tx+0xcc>)
   1104e:	4824      	ldr	r0, [pc, #144]	; (110e0 <bt_conn_process_tx+0xd0>)
   11050:	f00b fd4b 	bl	1caea <assert_print>
   11054:	4040      	eors	r0, r0
   11056:	f380 8811 	msr	BASEPRI, r0
   1105a:	f04f 0003 	mov.w	r0, #3
   1105e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11060:	4e20      	ldr	r6, [pc, #128]	; (110e4 <bt_conn_process_tx+0xd4>)
	if (buf->len <= conn_mtu(conn)) {
   11062:	89aa      	ldrh	r2, [r5, #12]
   11064:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   11068:	429a      	cmp	r2, r3
   1106a:	d807      	bhi.n	1107c <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1106c:	2300      	movs	r3, #0
   1106e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11070:	4629      	mov	r1, r5
   11072:	4620      	mov	r0, r4
   11074:	f7ff f97e 	bl	10374 <send_frag>
	if (!send_buf(conn, buf)) {
   11078:	b968      	cbnz	r0, 11096 <bt_conn_process_tx+0x86>
   1107a:	e005      	b.n	11088 <bt_conn_process_tx+0x78>
	frag = create_frag(conn, buf);
   1107c:	4629      	mov	r1, r5
   1107e:	4620      	mov	r0, r4
   11080:	f7ff ff90 	bl	10fa4 <create_frag>
	if (!frag) {
   11084:	4601      	mov	r1, r0
   11086:	b938      	cbnz	r0, 11098 <bt_conn_process_tx+0x88>
		tx_data(buf)->tx = NULL;
   11088:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1108a:	696e      	ldr	r6, [r5, #20]
		net_buf_unref(buf);
   1108c:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   1108e:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   11090:	f002 fd5a 	bl	13b48 <net_buf_unref>
		if (tx) {
   11094:	b9ce      	cbnz	r6, 110ca <bt_conn_process_tx+0xba>
}
   11096:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11098:	2301      	movs	r3, #1
   1109a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1109c:	4620      	mov	r0, r4
   1109e:	f7ff f969 	bl	10374 <send_frag>
   110a2:	2800      	cmp	r0, #0
   110a4:	d0f0      	beq.n	11088 <bt_conn_process_tx+0x78>
	while (buf->len > conn_mtu(conn)) {
   110a6:	89aa      	ldrh	r2, [r5, #12]
   110a8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   110ac:	429a      	cmp	r2, r3
   110ae:	d802      	bhi.n	110b6 <bt_conn_process_tx+0xa6>
	return send_frag(conn, buf, FRAG_END, false);
   110b0:	2300      	movs	r3, #0
   110b2:	2203      	movs	r2, #3
   110b4:	e7dc      	b.n	11070 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
   110b6:	4629      	mov	r1, r5
   110b8:	4620      	mov	r0, r4
   110ba:	f7ff ff73 	bl	10fa4 <create_frag>
		if (!frag) {
   110be:	4601      	mov	r1, r0
   110c0:	2800      	cmp	r0, #0
   110c2:	d0e1      	beq.n	11088 <bt_conn_process_tx+0x78>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   110c4:	2301      	movs	r3, #1
   110c6:	461a      	mov	r2, r3
   110c8:	e7e8      	b.n	1109c <bt_conn_process_tx+0x8c>
			conn_tx_destroy(conn, tx);
   110ca:	4631      	mov	r1, r6
   110cc:	4620      	mov	r0, r4
}
   110ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   110d2:	f7ff b929 	b.w	10328 <conn_tx_destroy>
   110d6:	bf00      	nop
   110d8:	000230f5 	.word	0x000230f5
   110dc:	00022980 	.word	0x00022980
   110e0:	00021547 	.word	0x00021547
   110e4:	20008000 	.word	0x20008000

000110e8 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   110e8:	b910      	cbnz	r0, 110f0 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   110ea:	4802      	ldr	r0, [pc, #8]	; (110f4 <bt_conn_lookup_index+0xc>)
   110ec:	f7ff bbc0 	b.w	10870 <bt_conn_ref>
}
   110f0:	2000      	movs	r0, #0
   110f2:	4770      	bx	lr
   110f4:	20009388 	.word	0x20009388

000110f8 <bt_conn_init>:

int bt_conn_init(void)
{
   110f8:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   110fa:	480c      	ldr	r0, [pc, #48]	; (1112c <bt_conn_init+0x34>)
   110fc:	f00e ff74 	bl	1ffe8 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11100:	490b      	ldr	r1, [pc, #44]	; (11130 <bt_conn_init+0x38>)
   11102:	480a      	ldr	r0, [pc, #40]	; (1112c <bt_conn_init+0x34>)
   11104:	f00e ff7d 	bl	20002 <k_queue_append>
   11108:	490a      	ldr	r1, [pc, #40]	; (11134 <bt_conn_init+0x3c>)
   1110a:	4808      	ldr	r0, [pc, #32]	; (1112c <bt_conn_init+0x34>)
   1110c:	f00e ff79 	bl	20002 <k_queue_append>
   11110:	4909      	ldr	r1, [pc, #36]	; (11138 <bt_conn_init+0x40>)
   11112:	4806      	ldr	r0, [pc, #24]	; (1112c <bt_conn_init+0x34>)
   11114:	f00e ff75 	bl	20002 <k_queue_append>
	}

	bt_att_init();
   11118:	f001 f930 	bl	1237c <bt_att_init>

	err = bt_smp_init();
   1111c:	f00d fe93 	bl	1ee46 <bt_smp_init>
	if (err) {
   11120:	4604      	mov	r4, r0
   11122:	b908      	cbnz	r0, 11128 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   11124:	f00d f831 	bl	1e18a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   11128:	4620      	mov	r0, r4
   1112a:	bd10      	pop	{r4, pc}
   1112c:	20008640 	.word	0x20008640
   11130:	20009824 	.word	0x20009824
   11134:	20009834 	.word	0x20009834
   11138:	20009844 	.word	0x20009844

0001113c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1113c:	b580      	push	{r7, lr}
   1113e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11140:	b088      	sub	sp, #32
   11142:	466a      	mov	r2, sp
   11144:	4b06      	ldr	r3, [pc, #24]	; (11160 <l2cap_create_le_sig_pdu.part.0+0x24>)
   11146:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1114a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1114e:	2303      	movs	r3, #3
   11150:	4804      	ldr	r0, [pc, #16]	; (11164 <l2cap_create_le_sig_pdu.part.0+0x28>)
   11152:	f842 3f10 	str.w	r3, [r2, #16]!
   11156:	f00c ffa7 	bl	1e0a8 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1115a:	2000      	movs	r0, #0
   1115c:	46bd      	mov	sp, r7
   1115e:	bd80      	pop	{r7, pc}
   11160:	000234c3 	.word	0x000234c3
   11164:	00020854 	.word	0x00020854

00011168 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   11168:	b580      	push	{r7, lr}
   1116a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1116c:	b088      	sub	sp, #32
   1116e:	466a      	mov	r2, sp
   11170:	4b07      	ldr	r3, [pc, #28]	; (11190 <l2cap_accept.part.0+0x28>)
   11172:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11176:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1117a:	2303      	movs	r3, #3
   1117c:	4805      	ldr	r0, [pc, #20]	; (11194 <l2cap_accept.part.0+0x2c>)
   1117e:	f842 3f10 	str.w	r3, [r2, #16]!
   11182:	f00c ff91 	bl	1e0a8 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   11186:	f06f 000b 	mvn.w	r0, #11
   1118a:	46bd      	mov	sp, r7
   1118c:	bd80      	pop	{r7, pc}
   1118e:	bf00      	nop
   11190:	000234eb 	.word	0x000234eb
   11194:	00020854 	.word	0x00020854

00011198 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   11198:	4b04      	ldr	r3, [pc, #16]	; (111ac <l2cap_accept+0x14>)
   1119a:	681a      	ldr	r2, [r3, #0]
   1119c:	b10a      	cbz	r2, 111a2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1119e:	f7ff bfe3 	b.w	11168 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   111a2:	4803      	ldr	r0, [pc, #12]	; (111b0 <l2cap_accept+0x18>)
   111a4:	6058      	str	r0, [r3, #4]
}
   111a6:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   111a8:	600b      	str	r3, [r1, #0]
}
   111aa:	4770      	bx	lr
   111ac:	20009858 	.word	0x20009858
   111b0:	00020d48 	.word	0x00020d48

000111b4 <bt_l2cap_connected>:
{
   111b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111b6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   111b8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   111ba:	4d27      	ldr	r5, [pc, #156]	; (11258 <bt_l2cap_connected+0xa4>)
   111bc:	4f27      	ldr	r7, [pc, #156]	; (1125c <bt_l2cap_connected+0xa8>)
   111be:	42bd      	cmp	r5, r7
   111c0:	d946      	bls.n	11250 <bt_l2cap_connected+0x9c>
   111c2:	4927      	ldr	r1, [pc, #156]	; (11260 <bt_l2cap_connected+0xac>)
   111c4:	f240 1381 	movw	r3, #385	; 0x181
   111c8:	4a26      	ldr	r2, [pc, #152]	; (11264 <bt_l2cap_connected+0xb0>)
   111ca:	4827      	ldr	r0, [pc, #156]	; (11268 <bt_l2cap_connected+0xb4>)
   111cc:	f00b fc8d 	bl	1caea <assert_print>
   111d0:	4826      	ldr	r0, [pc, #152]	; (1126c <bt_l2cap_connected+0xb8>)
   111d2:	f00b fc8a 	bl	1caea <assert_print>
   111d6:	f240 1181 	movw	r1, #385	; 0x181
   111da:	4822      	ldr	r0, [pc, #136]	; (11264 <bt_l2cap_connected+0xb0>)
   111dc:	f00b fc7e 	bl	1cadc <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   111e0:	4620      	mov	r0, r4
   111e2:	686b      	ldr	r3, [r5, #4]
   111e4:	a901      	add	r1, sp, #4
   111e6:	4798      	blx	r3
   111e8:	2800      	cmp	r0, #0
   111ea:	db2c      	blt.n	11246 <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   111ec:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   111ee:	882a      	ldrh	r2, [r5, #0]
   111f0:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   111f2:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   111f4:	68a8      	ldr	r0, [r5, #8]
   111f6:	f103 0210 	add.w	r2, r3, #16
   111fa:	e8d2 1fef 	ldaex	r1, [r2]
   111fe:	e8c2 6fec 	stlex	ip, r6, [r2]
   11202:	f1bc 0f00 	cmp.w	ip, #0
   11206:	d1f8      	bne.n	111fa <bt_l2cap_connected+0x46>
	parent->next = child;
   11208:	609e      	str	r6, [r3, #8]
	return list->tail;
   1120a:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1120c:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   11210:	b9d9      	cbnz	r1, 1124a <bt_l2cap_connected+0x96>
	list->head = node;
   11212:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   11216:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   11218:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1121a:	9801      	ldr	r0, [sp, #4]
   1121c:	6843      	ldr	r3, [r0, #4]
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	b103      	cbz	r3, 11224 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   11222:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11224:	9b01      	ldr	r3, [sp, #4]
   11226:	3310      	adds	r3, #16
   11228:	e8d3 1fef 	ldaex	r1, [r3]
   1122c:	f041 0101 	orr.w	r1, r1, #1
   11230:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11234:	2a00      	cmp	r2, #0
   11236:	d1f7      	bne.n	11228 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   11238:	9801      	ldr	r0, [sp, #4]
   1123a:	6843      	ldr	r3, [r0, #4]
   1123c:	69db      	ldr	r3, [r3, #28]
   1123e:	b113      	cbz	r3, 11246 <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   11240:	f100 0110 	add.w	r1, r0, #16
   11244:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11246:	350c      	adds	r5, #12
   11248:	e7b9      	b.n	111be <bt_l2cap_connected+0xa>
	parent->next = child;
   1124a:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1124c:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1124e:	e7e2      	b.n	11216 <bt_l2cap_connected+0x62>
   11250:	d3c6      	bcc.n	111e0 <bt_l2cap_connected+0x2c>
}
   11252:	b003      	add	sp, #12
   11254:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11256:	bf00      	nop
   11258:	000207c8 	.word	0x000207c8
   1125c:	000207ec 	.word	0x000207ec
   11260:	00023543 	.word	0x00023543
   11264:	00023512 	.word	0x00023512
   11268:	00021547 	.word	0x00021547
   1126c:	00021c6a 	.word	0x00021c6a

00011270 <l2cap_recv>:
{
   11270:	b5f0      	push	{r4, r5, r6, r7, lr}
   11272:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   11274:	898b      	ldrh	r3, [r1, #12]
{
   11276:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11278:	2b03      	cmp	r3, #3
{
   1127a:	460d      	mov	r5, r1
   1127c:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1127e:	d80b      	bhi.n	11298 <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   11280:	4b30      	ldr	r3, [pc, #192]	; (11344 <l2cap_recv+0xd4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   11282:	617b      	str	r3, [r7, #20]
   11284:	2302      	movs	r3, #2
   11286:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1128a:	482f      	ldr	r0, [pc, #188]	; (11348 <l2cap_recv+0xd8>)
   1128c:	613b      	str	r3, [r7, #16]
   1128e:	f107 0210 	add.w	r2, r7, #16
   11292:	f00c ff09 	bl	1e0a8 <z_log_msg_static_create.constprop.0>
		return 0;
   11296:	e019      	b.n	112cc <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   11298:	2104      	movs	r1, #4
   1129a:	f105 0008 	add.w	r0, r5, #8
   1129e:	f002 fd57 	bl	13d50 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   112a2:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   112a4:	8843      	ldrh	r3, [r0, #2]
   112a6:	4604      	mov	r4, r0
	if (buf->len != len) {
   112a8:	4299      	cmp	r1, r3
   112aa:	d013      	beq.n	112d4 <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   112ac:	466c      	mov	r4, sp
   112ae:	b088      	sub	sp, #32
   112b0:	aa02      	add	r2, sp, #8
   112b2:	61d3      	str	r3, [r2, #28]
   112b4:	2304      	movs	r3, #4
   112b6:	4825      	ldr	r0, [pc, #148]	; (1134c <l2cap_recv+0xdc>)
   112b8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   112bc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   112c0:	4821      	ldr	r0, [pc, #132]	; (11348 <l2cap_recv+0xd8>)
   112c2:	f842 3f10 	str.w	r3, [r2, #16]!
   112c6:	f00c feef 	bl	1e0a8 <z_log_msg_static_create.constprop.0>
   112ca:	46a5      	mov	sp, r4
}
   112cc:	2000      	movs	r0, #0
   112ce:	371c      	adds	r7, #28
   112d0:	46bd      	mov	sp, r7
   112d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   112d4:	7843      	ldrb	r3, [r0, #1]
   112d6:	b90b      	cbnz	r3, 112dc <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   112d8:	4b1d      	ldr	r3, [pc, #116]	; (11350 <l2cap_recv+0xe0>)
   112da:	e7d2      	b.n	11282 <l2cap_recv+0x12>
	switch (hdr->code) {
   112dc:	7803      	ldrb	r3, [r0, #0]
   112de:	2b01      	cmp	r3, #1
   112e0:	d0f4      	beq.n	112cc <l2cap_recv+0x5c>
   112e2:	2b13      	cmp	r3, #19
   112e4:	d103      	bne.n	112ee <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   112e6:	2901      	cmp	r1, #1
   112e8:	d8f0      	bhi.n	112cc <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   112ea:	4b1a      	ldr	r3, [pc, #104]	; (11354 <l2cap_recv+0xe4>)
   112ec:	e7c9      	b.n	11282 <l2cap_recv+0x12>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   112ee:	466d      	mov	r5, sp
   112f0:	b088      	sub	sp, #32
   112f2:	aa02      	add	r2, sp, #8
   112f4:	4918      	ldr	r1, [pc, #96]	; (11358 <l2cap_recv+0xe8>)
   112f6:	4814      	ldr	r0, [pc, #80]	; (11348 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   112f8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   112fc:	2303      	movs	r3, #3
   112fe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11302:	f842 3f10 	str.w	r3, [r2, #16]!
   11306:	f00c fecf 	bl	1e0a8 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1130a:	2202      	movs	r2, #2
   1130c:	46ad      	mov	sp, r5
   1130e:	7861      	ldrb	r1, [r4, #1]
   11310:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   11312:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   11314:	f00c fecb 	bl	1e0ae <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11318:	4604      	mov	r4, r0
   1131a:	2800      	cmp	r0, #0
   1131c:	d0d6      	beq.n	112cc <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1131e:	2102      	movs	r1, #2
   11320:	3008      	adds	r0, #8
   11322:	f002 fd33 	bl	13d8c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   11326:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11328:	4622      	mov	r2, r4
   1132a:	7003      	strb	r3, [r0, #0]
   1132c:	7043      	strb	r3, [r0, #1]
   1132e:	2105      	movs	r1, #5
   11330:	4628      	mov	r0, r5
   11332:	9300      	str	r3, [sp, #0]
   11334:	f00c ff07 	bl	1e146 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   11338:	2800      	cmp	r0, #0
   1133a:	d0c7      	beq.n	112cc <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1133c:	4620      	mov	r0, r4
   1133e:	f002 fc03 	bl	13b48 <net_buf_unref>
   11342:	e7c3      	b.n	112cc <l2cap_recv+0x5c>
   11344:	0002356a 	.word	0x0002356a
   11348:	00020854 	.word	0x00020854
   1134c:	00023588 	.word	0x00023588
   11350:	000235a9 	.word	0x000235a9
   11354:	000235ca 	.word	0x000235ca
   11358:	000235e6 	.word	0x000235e6

0001135c <bt_l2cap_recv>:
{
   1135c:	b5b0      	push	{r4, r5, r7, lr}
   1135e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   11360:	898b      	ldrh	r3, [r1, #12]
{
   11362:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11364:	2b03      	cmp	r3, #3
{
   11366:	460c      	mov	r4, r1
   11368:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1136a:	d810      	bhi.n	1138e <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
   1136c:	4b17      	ldr	r3, [pc, #92]	; (113cc <bt_l2cap_recv+0x70>)
   1136e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11372:	617b      	str	r3, [r7, #20]
   11374:	2302      	movs	r3, #2
   11376:	4816      	ldr	r0, [pc, #88]	; (113d0 <bt_l2cap_recv+0x74>)
   11378:	613b      	str	r3, [r7, #16]
   1137a:	f107 0210 	add.w	r2, r7, #16
   1137e:	f00c fe93 	bl	1e0a8 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   11382:	4620      	mov	r0, r4
   11384:	f002 fbe0 	bl	13b48 <net_buf_unref>
}
   11388:	3718      	adds	r7, #24
   1138a:	46bd      	mov	sp, r7
   1138c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1138e:	2104      	movs	r1, #4
   11390:	f104 0008 	add.w	r0, r4, #8
   11394:	f002 fcdc 	bl	13d50 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   11398:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1139a:	4628      	mov	r0, r5
   1139c:	f00c feec 	bl	1e178 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   113a0:	b978      	cbnz	r0, 113c2 <bt_l2cap_recv+0x66>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   113a2:	466d      	mov	r5, sp
   113a4:	b088      	sub	sp, #32
   113a6:	466a      	mov	r2, sp
   113a8:	4b0a      	ldr	r3, [pc, #40]	; (113d4 <bt_l2cap_recv+0x78>)
   113aa:	4809      	ldr	r0, [pc, #36]	; (113d0 <bt_l2cap_recv+0x74>)
   113ac:	e9c2 3105 	strd	r3, r1, [r2, #20]
   113b0:	2303      	movs	r3, #3
   113b2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   113b6:	f842 3f10 	str.w	r3, [r2, #16]!
   113ba:	f00c fe75 	bl	1e0a8 <z_log_msg_static_create.constprop.0>
   113be:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   113c0:	e7df      	b.n	11382 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   113c2:	6843      	ldr	r3, [r0, #4]
   113c4:	4621      	mov	r1, r4
   113c6:	695b      	ldr	r3, [r3, #20]
   113c8:	4798      	blx	r3
   113ca:	e7da      	b.n	11382 <bt_l2cap_recv+0x26>
   113cc:	0002360e 	.word	0x0002360e
   113d0:	00020854 	.word	0x00020854
   113d4:	0002362b 	.word	0x0002362b

000113d8 <bt_l2cap_update_conn_param>:
{
   113d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   113da:	4b17      	ldr	r3, [pc, #92]	; (11438 <bt_l2cap_update_conn_param+0x60>)
{
   113dc:	460e      	mov	r6, r1
	ident++;
   113de:	7819      	ldrb	r1, [r3, #0]
{
   113e0:	4605      	mov	r5, r0
	ident++;
   113e2:	3101      	adds	r1, #1
   113e4:	b2c9      	uxtb	r1, r1
   113e6:	2901      	cmp	r1, #1
   113e8:	bf38      	it	cc
   113ea:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   113ec:	2208      	movs	r2, #8
   113ee:	2012      	movs	r0, #18
	ident++;
   113f0:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   113f2:	f00c fe5c 	bl	1e0ae <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   113f6:	4604      	mov	r4, r0
   113f8:	b1d0      	cbz	r0, 11430 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   113fa:	2108      	movs	r1, #8
   113fc:	4408      	add	r0, r1
   113fe:	f002 fcc5 	bl	13d8c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   11402:	8833      	ldrh	r3, [r6, #0]
   11404:	4622      	mov	r2, r4
   11406:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   11408:	8873      	ldrh	r3, [r6, #2]
   1140a:	2105      	movs	r1, #5
   1140c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1140e:	88b3      	ldrh	r3, [r6, #4]
   11410:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   11412:	88f3      	ldrh	r3, [r6, #6]
   11414:	80c3      	strh	r3, [r0, #6]
   11416:	2300      	movs	r3, #0
   11418:	4628      	mov	r0, r5
   1141a:	9300      	str	r3, [sp, #0]
   1141c:	f00c fe93 	bl	1e146 <bt_l2cap_send_cb>
	if (err) {
   11420:	4605      	mov	r5, r0
   11422:	b110      	cbz	r0, 1142a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   11424:	4620      	mov	r0, r4
   11426:	f002 fb8f 	bl	13b48 <net_buf_unref>
}
   1142a:	4628      	mov	r0, r5
   1142c:	b002      	add	sp, #8
   1142e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   11430:	f06f 050b 	mvn.w	r5, #11
   11434:	e7f9      	b.n	1142a <bt_l2cap_update_conn_param+0x52>
   11436:	bf00      	nop
   11438:	20009d11 	.word	0x20009d11

0001143c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1143c:	2823      	cmp	r0, #35	; 0x23
   1143e:	d81f      	bhi.n	11480 <att_op_get_type+0x44>
   11440:	281a      	cmp	r0, #26
   11442:	d804      	bhi.n	1144e <att_op_get_type+0x12>
   11444:	1e43      	subs	r3, r0, #1
   11446:	2b18      	cmp	r3, #24
   11448:	d90e      	bls.n	11468 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1144a:	2006      	movs	r0, #6
   1144c:	4770      	bx	lr
	switch (op) {
   1144e:	f1a0 031b 	sub.w	r3, r0, #27
   11452:	2b08      	cmp	r3, #8
   11454:	d81e      	bhi.n	11494 <att_op_get_type+0x58>
   11456:	e8df f003 	tbb	[pc, r3]
   1145a:	1d05      	.short	0x1d05
   1145c:	191d231b 	.word	0x191d231b
   11460:	1d25      	.short	0x1d25
   11462:	05          	.byte	0x05
   11463:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   11464:	2003      	movs	r0, #3
   11466:	4770      	bx	lr
   11468:	2301      	movs	r3, #1
	switch (op) {
   1146a:	4a0f      	ldr	r2, [pc, #60]	; (114a8 <att_op_get_type+0x6c>)
   1146c:	4083      	lsls	r3, r0
   1146e:	401a      	ands	r2, r3
   11470:	b9c2      	cbnz	r2, 114a4 <att_op_get_type+0x68>
   11472:	4a0e      	ldr	r2, [pc, #56]	; (114ac <att_op_get_type+0x70>)
   11474:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   11476:	2a00      	cmp	r2, #0
   11478:	bf14      	ite	ne
   1147a:	2001      	movne	r0, #1
   1147c:	2006      	moveq	r0, #6
   1147e:	4770      	bx	lr
	switch (op) {
   11480:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   11484:	2b52      	cmp	r3, #82	; 0x52
   11486:	d105      	bne.n	11494 <att_op_get_type+0x58>
		return ATT_COMMAND;
   11488:	2000      	movs	r0, #0
}
   1148a:	4770      	bx	lr
		return ATT_REQUEST;
   1148c:	2001      	movs	r0, #1
   1148e:	4770      	bx	lr
		return ATT_INDICATION;
   11490:	2005      	movs	r0, #5
   11492:	4770      	bx	lr
		return ATT_COMMAND;
   11494:	f010 0f40 	tst.w	r0, #64	; 0x40
   11498:	bf0c      	ite	eq
   1149a:	2006      	moveq	r0, #6
   1149c:	2000      	movne	r0, #0
   1149e:	4770      	bx	lr
	switch (op) {
   114a0:	2004      	movs	r0, #4
   114a2:	4770      	bx	lr
		return ATT_RESPONSE;
   114a4:	2002      	movs	r0, #2
   114a6:	4770      	bx	lr
   114a8:	028aaaaa 	.word	0x028aaaaa
   114ac:	01455554 	.word	0x01455554

000114b0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   114b0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   114b2:	3804      	subs	r0, #4
   114b4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   114b6:	a901      	add	r1, sp, #4
   114b8:	4802      	ldr	r0, [pc, #8]	; (114c4 <bt_att_released+0x14>)
   114ba:	f007 fbaf 	bl	18c1c <k_mem_slab_free>
}
   114be:	b003      	add	sp, #12
   114c0:	f85d fb04 	ldr.w	pc, [sp], #4
   114c4:	20008570 	.word	0x20008570

000114c8 <tx_meta_data_free>:
{
   114c8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   114ca:	4604      	mov	r4, r0
   114cc:	b948      	cbnz	r0, 114e2 <tx_meta_data_free+0x1a>
   114ce:	490a      	ldr	r1, [pc, #40]	; (114f8 <tx_meta_data_free+0x30>)
   114d0:	480a      	ldr	r0, [pc, #40]	; (114fc <tx_meta_data_free+0x34>)
   114d2:	23a5      	movs	r3, #165	; 0xa5
   114d4:	4a0a      	ldr	r2, [pc, #40]	; (11500 <tx_meta_data_free+0x38>)
   114d6:	f00b fb08 	bl	1caea <assert_print>
   114da:	21a5      	movs	r1, #165	; 0xa5
   114dc:	4808      	ldr	r0, [pc, #32]	; (11500 <tx_meta_data_free+0x38>)
   114de:	f00b fafd 	bl	1cadc <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   114e2:	2100      	movs	r1, #0
   114e4:	2214      	movs	r2, #20
   114e6:	f00c fb1a 	bl	1db1e <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   114ea:	4621      	mov	r1, r4
}
   114ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   114f0:	4804      	ldr	r0, [pc, #16]	; (11504 <tx_meta_data_free+0x3c>)
   114f2:	f00e bd86 	b.w	20002 <k_queue_append>
   114f6:	bf00      	nop
   114f8:	00023207 	.word	0x00023207
   114fc:	00021547 	.word	0x00021547
   11500:	00023660 	.word	0x00023660
   11504:	20008624 	.word	0x20008624

00011508 <find_type_cb>:
{
   11508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1150c:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1150e:	f8d2 a000 	ldr.w	sl, [r2]
{
   11512:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   11514:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11518:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1151a:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1151c:	f642 0301 	movw	r3, #10241	; 0x2801
{
   11520:	4680      	mov	r8, r0
   11522:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11524:	6800      	ldr	r0, [r0, #0]
   11526:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1152a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1152c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   11530:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11532:	f00c fb00 	bl	1db36 <bt_uuid_cmp>
   11536:	2800      	cmp	r0, #0
   11538:	d070      	beq.n	1161c <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1153a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1153e:	f8d8 0000 	ldr.w	r0, [r8]
   11542:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   11546:	85fb      	strh	r3, [r7, #46]	; 0x2e
   11548:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1154c:	f00c faf3 	bl	1db36 <bt_uuid_cmp>
   11550:	b138      	cbz	r0, 11562 <find_type_cb+0x5a>
		if (data->group &&
   11552:	68a3      	ldr	r3, [r4, #8]
   11554:	b11b      	cbz	r3, 1155e <find_type_cb+0x56>
   11556:	885a      	ldrh	r2, [r3, #2]
   11558:	42b2      	cmp	r2, r6
   1155a:	d200      	bcs.n	1155e <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1155c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1155e:	2001      	movs	r0, #1
   11560:	e009      	b.n	11576 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   11562:	6861      	ldr	r1, [r4, #4]
   11564:	4608      	mov	r0, r1
   11566:	f00c fe1b 	bl	1e1a0 <net_buf_frags_len>
   1156a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1156e:	1a1b      	subs	r3, r3, r0
   11570:	2b03      	cmp	r3, #3
   11572:	d804      	bhi.n	1157e <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   11574:	2000      	movs	r0, #0
}
   11576:	3744      	adds	r7, #68	; 0x44
   11578:	46bd      	mov	sp, r7
   1157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1157e:	4608      	mov	r0, r1
   11580:	f002 fb3e 	bl	13c00 <net_buf_frag_last>
   11584:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   11586:	6860      	ldr	r0, [r4, #4]
   11588:	f00c fe0a 	bl	1e1a0 <net_buf_frags_len>
   1158c:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   11590:	f105 0908 	add.w	r9, r5, #8
   11594:	ebab 0b00 	sub.w	fp, fp, r0
   11598:	4648      	mov	r0, r9
   1159a:	f00d fc6f 	bl	1ee7c <net_buf_simple_tailroom>
   1159e:	4558      	cmp	r0, fp
   115a0:	d93f      	bls.n	11622 <find_type_cb+0x11a>
   115a2:	6860      	ldr	r0, [r4, #4]
   115a4:	f00c fdfc 	bl	1e1a0 <net_buf_frags_len>
   115a8:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   115ac:	1a18      	subs	r0, r3, r0
	if (!len) {
   115ae:	b970      	cbnz	r0, 115ce <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   115b0:	6863      	ldr	r3, [r4, #4]
   115b2:	7998      	ldrb	r0, [r3, #6]
   115b4:	f002 f82e 	bl	13614 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   115b8:	2200      	movs	r2, #0
   115ba:	2300      	movs	r3, #0
   115bc:	f00d fc46 	bl	1ee4c <net_buf_alloc_fixed>
		if (!frag) {
   115c0:	4605      	mov	r5, r0
   115c2:	2800      	cmp	r0, #0
   115c4:	d0d6      	beq.n	11574 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   115c6:	4601      	mov	r1, r0
   115c8:	6860      	ldr	r0, [r4, #4]
   115ca:	f002 fb5f 	bl	13c8c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   115ce:	2300      	movs	r3, #0
   115d0:	9300      	str	r3, [sp, #0]
   115d2:	4641      	mov	r1, r8
   115d4:	f8d8 a004 	ldr.w	sl, [r8, #4]
   115d8:	2310      	movs	r3, #16
   115da:	6878      	ldr	r0, [r7, #4]
   115dc:	f107 0208 	add.w	r2, r7, #8
   115e0:	47d0      	blx	sl
	if (read < 0) {
   115e2:	f1b0 0800 	subs.w	r8, r0, #0
   115e6:	db19      	blt.n	1161c <find_type_cb+0x114>
	if (read != data->value_len) {
   115e8:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   115ea:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   115ec:	4542      	cmp	r2, r8
   115ee:	d03f      	beq.n	11670 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   115f0:	4601      	mov	r1, r0
   115f2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   115f6:	f00c facc 	bl	1db92 <bt_uuid_create>
   115fa:	b9b0      	cbnz	r0, 1162a <find_type_cb+0x122>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   115fc:	466d      	mov	r5, sp
   115fe:	b088      	sub	sp, #32
   11600:	7c23      	ldrb	r3, [r4, #16]
   11602:	aa02      	add	r2, sp, #8
   11604:	491d      	ldr	r1, [pc, #116]	; (1167c <find_type_cb+0x174>)
   11606:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   1160a:	2303      	movs	r3, #3
   1160c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11610:	481b      	ldr	r0, [pc, #108]	; (11680 <find_type_cb+0x178>)
   11612:	f842 3f10 	str.w	r3, [r2, #16]!
   11616:	f00c feae 	bl	1e376 <z_log_msg_static_create.constprop.0>
   1161a:	46ad      	mov	sp, r5
	data->group = NULL;
   1161c:	2300      	movs	r3, #0
   1161e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   11620:	e79d      	b.n	1155e <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   11622:	4648      	mov	r0, r9
   11624:	f00d fc2a 	bl	1ee7c <net_buf_simple_tailroom>
   11628:	e7c1      	b.n	115ae <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1162a:	fa5f f288 	uxtb.w	r2, r8
   1162e:	f107 0108 	add.w	r1, r7, #8
   11632:	f107 0018 	add.w	r0, r7, #24
   11636:	f00c faac 	bl	1db92 <bt_uuid_create>
   1163a:	b930      	cbnz	r0, 1164a <find_type_cb+0x142>
			BT_WARN("Unable to create UUID: size %d", read);
   1163c:	466d      	mov	r5, sp
   1163e:	b088      	sub	sp, #32
   11640:	aa02      	add	r2, sp, #8
   11642:	4b10      	ldr	r3, [pc, #64]	; (11684 <find_type_cb+0x17c>)
   11644:	e9c2 3805 	strd	r3, r8, [r2, #20]
   11648:	e7df      	b.n	1160a <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1164a:	f107 0118 	add.w	r1, r7, #24
   1164e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   11652:	f00c fa70 	bl	1db36 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   11656:	2800      	cmp	r0, #0
   11658:	d1e0      	bne.n	1161c <find_type_cb+0x114>
	data->err = 0x00;
   1165a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1165c:	2104      	movs	r1, #4
   1165e:	7463      	strb	r3, [r4, #17]
   11660:	f105 0008 	add.w	r0, r5, #8
   11664:	f002 fb92 	bl	13d8c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   11668:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1166a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1166c:	68a3      	ldr	r3, [r4, #8]
   1166e:	e775      	b.n	1155c <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   11670:	f107 0108 	add.w	r1, r7, #8
   11674:	f00c fa38 	bl	1dae8 <memcmp>
   11678:	e7ed      	b.n	11656 <find_type_cb+0x14e>
   1167a:	bf00      	nop
   1167c:	0002368f 	.word	0x0002368f
   11680:	00020814 	.word	0x00020814
   11684:	000236ae 	.word	0x000236ae

00011688 <chan_send>:
{
   11688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1168c:	4606      	mov	r6, r0
   1168e:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   11690:	f8d1 9014 	ldr.w	r9, [r1, #20]
	hdr = (void *)buf->data;
   11694:	688b      	ldr	r3, [r1, #8]
{
   11696:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   11698:	2102      	movs	r1, #2
   1169a:	3098      	adds	r0, #152	; 0x98
   1169c:	f00c fd9a 	bl	1e1d4 <atomic_test_bit>
   116a0:	2800      	cmp	r0, #0
   116a2:	d053      	beq.n	1174c <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   116a4:	781b      	ldrb	r3, [r3, #0]
   116a6:	2bd2      	cmp	r3, #210	; 0xd2
   116a8:	d11a      	bne.n	116e0 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   116aa:	6833      	ldr	r3, [r6, #0]
   116ac:	4621      	mov	r1, r4
   116ae:	6818      	ldr	r0, [r3, #0]
   116b0:	f00d fbc6 	bl	1ee40 <bt_smp_sign>
		if (err) {
   116b4:	4605      	mov	r5, r0
   116b6:	b198      	cbz	r0, 116e0 <chan_send+0x58>
			BT_ERR("Error signing data");
   116b8:	4b26      	ldr	r3, [pc, #152]	; (11754 <chan_send+0xcc>)
   116ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   116be:	9307      	str	r3, [sp, #28]
   116c0:	2302      	movs	r3, #2
   116c2:	4825      	ldr	r0, [pc, #148]	; (11758 <chan_send+0xd0>)
   116c4:	aa06      	add	r2, sp, #24
   116c6:	9306      	str	r3, [sp, #24]
   116c8:	f00c fe55 	bl	1e376 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   116cc:	6960      	ldr	r0, [r4, #20]
   116ce:	f7ff fefb 	bl	114c8 <tx_meta_data_free>
			net_buf_unref(buf);
   116d2:	4620      	mov	r0, r4
   116d4:	f002 fa38 	bl	13b48 <net_buf_unref>
}
   116d8:	4628      	mov	r0, r5
   116da:	b009      	add	sp, #36	; 0x24
   116dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   116e0:	f104 0008 	add.w	r0, r4, #8
   116e4:	f00d fbc6 	bl	1ee74 <net_buf_simple_headroom>
	state->len = buf->len;
   116e8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	data->att_chan = chan;
   116ec:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   116f0:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   116f2:	4607      	mov	r7, r0
   116f4:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   116f6:	68a3      	ldr	r3, [r4, #8]
   116f8:	7818      	ldrb	r0, [r3, #0]
   116fa:	f7ff fe9f 	bl	1143c <att_op_get_type>
   116fe:	2805      	cmp	r0, #5
   11700:	4605      	mov	r5, r0
	switch (op_type) {
   11702:	d813      	bhi.n	1172c <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11704:	4b15      	ldr	r3, [pc, #84]	; (1175c <chan_send+0xd4>)
   11706:	4622      	mov	r2, r4
   11708:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1170c:	2104      	movs	r1, #4
   1170e:	4630      	mov	r0, r6
   11710:	f8cd 9000 	str.w	r9, [sp]
   11714:	f00c fd17 	bl	1e146 <bt_l2cap_send_cb>
	if (err) {
   11718:	4605      	mov	r5, r0
   1171a:	2800      	cmp	r0, #0
   1171c:	d0dc      	beq.n	116d8 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1171e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   11720:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   11724:	fa13 f787 	uxtah	r7, r3, r7
   11728:	60a7      	str	r7, [r4, #8]
}
   1172a:	e7d5      	b.n	116d8 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   1172c:	f240 2357 	movw	r3, #599	; 0x257
   11730:	4a0b      	ldr	r2, [pc, #44]	; (11760 <chan_send+0xd8>)
   11732:	490c      	ldr	r1, [pc, #48]	; (11764 <chan_send+0xdc>)
   11734:	480c      	ldr	r0, [pc, #48]	; (11768 <chan_send+0xe0>)
   11736:	f00b f9d8 	bl	1caea <assert_print>
   1173a:	4629      	mov	r1, r5
   1173c:	480b      	ldr	r0, [pc, #44]	; (1176c <chan_send+0xe4>)
   1173e:	f00b f9d4 	bl	1caea <assert_print>
   11742:	f240 2157 	movw	r1, #599	; 0x257
   11746:	4806      	ldr	r0, [pc, #24]	; (11760 <chan_send+0xd8>)
   11748:	f00b f9c8 	bl	1cadc <assert_post_action>
		return -EINVAL;
   1174c:	f06f 0515 	mvn.w	r5, #21
   11750:	e7c2      	b.n	116d8 <chan_send+0x50>
   11752:	bf00      	nop
   11754:	000236cd 	.word	0x000236cd
   11758:	00020814 	.word	0x00020814
   1175c:	00020d70 	.word	0x00020d70
   11760:	00023660 	.word	0x00023660
   11764:	00024673 	.word	0x00024673
   11768:	00021547 	.word	0x00021547
   1176c:	000236e0 	.word	0x000236e0

00011770 <bt_att_chan_req_send>:
{
   11770:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   11772:	b958      	cbnz	r0, 1178c <bt_att_chan_req_send+0x1c>
   11774:	4919      	ldr	r1, [pc, #100]	; (117dc <bt_att_chan_req_send+0x6c>)
   11776:	f44f 7346 	mov.w	r3, #792	; 0x318
   1177a:	4a19      	ldr	r2, [pc, #100]	; (117e0 <bt_att_chan_req_send+0x70>)
   1177c:	4819      	ldr	r0, [pc, #100]	; (117e4 <bt_att_chan_req_send+0x74>)
   1177e:	f00b f9b4 	bl	1caea <assert_print>
   11782:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   11786:	4816      	ldr	r0, [pc, #88]	; (117e0 <bt_att_chan_req_send+0x70>)
   11788:	f00b f9a8 	bl	1cadc <assert_post_action>
   1178c:	b949      	cbnz	r1, 117a2 <bt_att_chan_req_send+0x32>
   1178e:	4916      	ldr	r1, [pc, #88]	; (117e8 <bt_att_chan_req_send+0x78>)
   11790:	f240 3319 	movw	r3, #793	; 0x319
   11794:	4a12      	ldr	r2, [pc, #72]	; (117e0 <bt_att_chan_req_send+0x70>)
   11796:	4813      	ldr	r0, [pc, #76]	; (117e4 <bt_att_chan_req_send+0x74>)
   11798:	f00b f9a7 	bl	1caea <assert_print>
   1179c:	f240 3119 	movw	r1, #793	; 0x319
   117a0:	e7f1      	b.n	11786 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   117a2:	684a      	ldr	r2, [r1, #4]
   117a4:	b94a      	cbnz	r2, 117ba <bt_att_chan_req_send+0x4a>
   117a6:	4911      	ldr	r1, [pc, #68]	; (117ec <bt_att_chan_req_send+0x7c>)
   117a8:	f240 331a 	movw	r3, #794	; 0x31a
   117ac:	4a0c      	ldr	r2, [pc, #48]	; (117e0 <bt_att_chan_req_send+0x70>)
   117ae:	480d      	ldr	r0, [pc, #52]	; (117e4 <bt_att_chan_req_send+0x74>)
   117b0:	f00b f99b 	bl	1caea <assert_print>
   117b4:	f240 311a 	movw	r1, #794	; 0x31a
   117b8:	e7e5      	b.n	11786 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   117ba:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   117be:	b14b      	cbz	r3, 117d4 <bt_att_chan_req_send+0x64>
   117c0:	490b      	ldr	r1, [pc, #44]	; (117f0 <bt_att_chan_req_send+0x80>)
   117c2:	f240 331b 	movw	r3, #795	; 0x31b
   117c6:	4a06      	ldr	r2, [pc, #24]	; (117e0 <bt_att_chan_req_send+0x70>)
   117c8:	4806      	ldr	r0, [pc, #24]	; (117e4 <bt_att_chan_req_send+0x74>)
   117ca:	f00b f98e 	bl	1caea <assert_print>
   117ce:	f240 311b 	movw	r1, #795	; 0x31b
   117d2:	e7d8      	b.n	11786 <bt_att_chan_req_send+0x16>
}
   117d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   117d8:	f00c bdd0 	b.w	1e37c <chan_req_send>
   117dc:	000236f9 	.word	0x000236f9
   117e0:	00023660 	.word	0x00023660
   117e4:	00021547 	.word	0x00021547
   117e8:	0002370f 	.word	0x0002370f
   117ec:	000236fe 	.word	0x000236fe
   117f0:	00023708 	.word	0x00023708

000117f4 <att_get>:
{
   117f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   117f6:	7a83      	ldrb	r3, [r0, #10]
   117f8:	2b07      	cmp	r3, #7
   117fa:	d00d      	beq.n	11818 <att_get+0x24>
		BT_WARN("Not connected");
   117fc:	4b18      	ldr	r3, [pc, #96]	; (11860 <att_get+0x6c>)
   117fe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11802:	9305      	str	r3, [sp, #20]
   11804:	2302      	movs	r3, #2
   11806:	aa04      	add	r2, sp, #16
   11808:	9304      	str	r3, [sp, #16]
		BT_ERR("Unable to find ATT channel");
   1180a:	4816      	ldr	r0, [pc, #88]	; (11864 <att_get+0x70>)
   1180c:	f00c fdb3 	bl	1e376 <z_log_msg_static_create.constprop.0>
		return NULL;
   11810:	2000      	movs	r0, #0
}
   11812:	b007      	add	sp, #28
   11814:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   11818:	2104      	movs	r1, #4
   1181a:	f00c fcad 	bl	1e178 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1181e:	4603      	mov	r3, r0
   11820:	b938      	cbnz	r0, 11832 <att_get+0x3e>
		BT_ERR("Unable to find ATT channel");
   11822:	4b11      	ldr	r3, [pc, #68]	; (11868 <att_get+0x74>)
   11824:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11828:	9305      	str	r3, [sp, #20]
   1182a:	2302      	movs	r3, #2
   1182c:	aa04      	add	r2, sp, #16
   1182e:	9304      	str	r3, [sp, #16]
   11830:	e7eb      	b.n	1180a <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   11832:	2102      	movs	r1, #2
   11834:	3094      	adds	r0, #148	; 0x94
   11836:	f00c fccd 	bl	1e1d4 <atomic_test_bit>
   1183a:	b970      	cbnz	r0, 1185a <att_get+0x66>
   1183c:	490b      	ldr	r1, [pc, #44]	; (1186c <att_get+0x78>)
   1183e:	f640 332e 	movw	r3, #2862	; 0xb2e
   11842:	4a0b      	ldr	r2, [pc, #44]	; (11870 <att_get+0x7c>)
   11844:	480b      	ldr	r0, [pc, #44]	; (11874 <att_get+0x80>)
   11846:	f00b f950 	bl	1caea <assert_print>
   1184a:	480b      	ldr	r0, [pc, #44]	; (11878 <att_get+0x84>)
   1184c:	f00b f94d 	bl	1caea <assert_print>
   11850:	f640 312e 	movw	r1, #2862	; 0xb2e
   11854:	4806      	ldr	r0, [pc, #24]	; (11870 <att_get+0x7c>)
   11856:	f00b f941 	bl	1cadc <assert_post_action>
	return att_chan->att;
   1185a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1185e:	e7d8      	b.n	11812 <att_get+0x1e>
   11860:	00023713 	.word	0x00023713
   11864:	00020814 	.word	0x00020814
   11868:	00023721 	.word	0x00023721
   1186c:	0002373c 	.word	0x0002373c
   11870:	00023660 	.word	0x00023660
   11874:	00021547 	.word	0x00021547
   11878:	0002376c 	.word	0x0002376c

0001187c <bt_att_connected>:
{
   1187c:	b510      	push	{r4, lr}
   1187e:	4604      	mov	r4, r0
   11880:	f100 0394 	add.w	r3, r0, #148	; 0x94
   11884:	e8d3 1fef 	ldaex	r1, [r3]
   11888:	f041 0104 	orr.w	r1, r1, #4
   1188c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11890:	2a00      	cmp	r2, #0
   11892:	d1f7      	bne.n	11884 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11894:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   11896:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11898:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1189a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1189c:	f00c fd28 	bl	1e2f0 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   118a0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   118a4:	4903      	ldr	r1, [pc, #12]	; (118b4 <bt_att_connected+0x38>)
   118a6:	f008 fad3 	bl	19e50 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   118aa:	6820      	ldr	r0, [r4, #0]
}
   118ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   118b0:	f001 be42 	b.w	13538 <bt_gatt_connected>
   118b4:	00012581 	.word	0x00012581

000118b8 <read_group_cb>:
{
   118b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   118bc:	f04f 0800 	mov.w	r8, #0
   118c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   118c4:	4605      	mov	r5, r0
   118c6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   118c8:	6800      	ldr	r0, [r0, #0]
   118ca:	a902      	add	r1, sp, #8
{
   118cc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   118ce:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   118d0:	f88d 8008 	strb.w	r8, [sp, #8]
   118d4:	f8ad 300a 	strh.w	r3, [sp, #10]
   118d8:	f00c f92d 	bl	1db36 <bt_uuid_cmp>
   118dc:	b1a0      	cbz	r0, 11908 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   118de:	f642 0301 	movw	r3, #10241	; 0x2801
   118e2:	6828      	ldr	r0, [r5, #0]
   118e4:	a903      	add	r1, sp, #12
   118e6:	f88d 800c 	strb.w	r8, [sp, #12]
   118ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   118ee:	f00c f922 	bl	1db36 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   118f2:	b148      	cbz	r0, 11908 <read_group_cb+0x50>
		if (data->group &&
   118f4:	6923      	ldr	r3, [r4, #16]
   118f6:	b11b      	cbz	r3, 11900 <read_group_cb+0x48>
   118f8:	885a      	ldrh	r2, [r3, #2]
   118fa:	42b2      	cmp	r2, r6
   118fc:	d200      	bcs.n	11900 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   118fe:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11900:	2001      	movs	r0, #1
}
   11902:	b004      	add	sp, #16
   11904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11908:	6861      	ldr	r1, [r4, #4]
   1190a:	6828      	ldr	r0, [r5, #0]
   1190c:	f00c f913 	bl	1db36 <bt_uuid_cmp>
   11910:	b110      	cbz	r0, 11918 <read_group_cb+0x60>
		data->group = NULL;
   11912:	2300      	movs	r3, #0
   11914:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   11916:	e7f3      	b.n	11900 <read_group_cb+0x48>
	if (data->rsp->len &&
   11918:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1191a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1191c:	781a      	ldrb	r2, [r3, #0]
   1191e:	b132      	cbz	r2, 1192e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11920:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   11922:	8981      	ldrh	r1, [r0, #12]
   11924:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   11926:	4293      	cmp	r3, r2
   11928:	da01      	bge.n	1192e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1192a:	2000      	movs	r0, #0
   1192c:	e7e9      	b.n	11902 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1192e:	2104      	movs	r1, #4
   11930:	3008      	adds	r0, #8
   11932:	f002 fa2b 	bl	13d8c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   11936:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   11938:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1193a:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1193c:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1193e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11940:	4b07      	ldr	r3, [pc, #28]	; (11960 <read_group_cb+0xa8>)
   11942:	9401      	str	r4, [sp, #4]
   11944:	9300      	str	r3, [sp, #0]
   11946:	4638      	mov	r0, r7
   11948:	2300      	movs	r3, #0
   1194a:	68a2      	ldr	r2, [r4, #8]
   1194c:	f00c fd57 	bl	1e3fe <att_chan_read>
	if (read < 0) {
   11950:	2800      	cmp	r0, #0
   11952:	dbea      	blt.n	1192a <read_group_cb+0x72>
	if (!data->group) {
   11954:	6920      	ldr	r0, [r4, #16]
   11956:	3800      	subs	r0, #0
   11958:	bf18      	it	ne
   1195a:	2001      	movne	r0, #1
   1195c:	e7d1      	b.n	11902 <read_group_cb+0x4a>
   1195e:	bf00      	nop
   11960:	0001e357 	.word	0x0001e357

00011964 <read_type_cb>:
{
   11964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   11968:	6817      	ldr	r7, [r2, #0]
{
   1196a:	4605      	mov	r5, r0
   1196c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1196e:	6800      	ldr	r0, [r0, #0]
   11970:	6851      	ldr	r1, [r2, #4]
{
   11972:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   11974:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11976:	f00c f8de 	bl	1db36 <bt_uuid_cmp>
   1197a:	4681      	mov	r9, r0
   1197c:	2800      	cmp	r0, #0
   1197e:	d13c      	bne.n	119fa <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   11980:	4630      	mov	r0, r6
   11982:	2295      	movs	r2, #149	; 0x95
   11984:	4629      	mov	r1, r5
   11986:	f00d f9d0 	bl	1ed2a <bt_gatt_check_perm>
   1198a:	4606      	mov	r6, r0
   1198c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1198e:	b140      	cbz	r0, 119a2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   11990:	68e3      	ldr	r3, [r4, #12]
   11992:	781b      	ldrb	r3, [r3, #0]
   11994:	b10b      	cbz	r3, 1199a <read_type_cb+0x36>
			data->err = 0x00;
   11996:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1199a:	2000      	movs	r0, #0
}
   1199c:	b003      	add	sp, #12
   1199e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   119a2:	68a0      	ldr	r0, [r4, #8]
   119a4:	f002 f92c 	bl	13c00 <net_buf_frag_last>
   119a8:	2102      	movs	r1, #2
   119aa:	3008      	adds	r0, #8
   119ac:	f002 f9ee 	bl	13d8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   119b0:	4b13      	ldr	r3, [pc, #76]	; (11a00 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   119b2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   119b4:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   119b8:	9300      	str	r3, [sp, #0]
   119ba:	9401      	str	r4, [sp, #4]
   119bc:	4633      	mov	r3, r6
   119be:	4629      	mov	r1, r5
   119c0:	4638      	mov	r0, r7
   119c2:	68a2      	ldr	r2, [r4, #8]
   119c4:	f00c fd1b 	bl	1e3fe <att_chan_read>
	if (read < 0) {
   119c8:	2800      	cmp	r0, #0
   119ca:	da07      	bge.n	119dc <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   119cc:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   119d0:	bf32      	itee	cc
   119d2:	200e      	movcc	r0, #14
		return -err;
   119d4:	4240      	negcs	r0, r0
   119d6:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   119d8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   119da:	e7de      	b.n	1199a <read_type_cb+0x36>
	if (!data->item) {
   119dc:	6923      	ldr	r3, [r4, #16]
   119de:	2b00      	cmp	r3, #0
   119e0:	d0db      	beq.n	1199a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   119e2:	68a0      	ldr	r0, [r4, #8]
   119e4:	f00c fbdc 	bl	1e1a0 <net_buf_frags_len>
   119e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   119ea:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   119ec:	68e3      	ldr	r3, [r4, #12]
   119ee:	781b      	ldrb	r3, [r3, #0]
   119f0:	4298      	cmp	r0, r3
   119f2:	bf94      	ite	ls
   119f4:	2000      	movls	r0, #0
   119f6:	2001      	movhi	r0, #1
   119f8:	e7d0      	b.n	1199c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   119fa:	2001      	movs	r0, #1
   119fc:	e7ce      	b.n	1199c <read_type_cb+0x38>
   119fe:	bf00      	nop
   11a00:	0001e1b1 	.word	0x0001e1b1

00011a04 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   11a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a08:	b082      	sub	sp, #8
   11a0a:	af00      	add	r7, sp, #0
   11a0c:	4604      	mov	r4, r0
   11a0e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11a10:	2200      	movs	r2, #0
   11a12:	2300      	movs	r3, #0
   11a14:	4639      	mov	r1, r7
   11a16:	4838      	ldr	r0, [pc, #224]	; (11af8 <bt_att_accept+0xf4>)
   11a18:	f007 f896 	bl	18b48 <k_mem_slab_alloc>
   11a1c:	4605      	mov	r5, r0
   11a1e:	b1a8      	cbz	r0, 11a4c <bt_att_accept+0x48>
		BT_ERR("No available ATT context for conn %p", conn);
   11a20:	466d      	mov	r5, sp
   11a22:	b088      	sub	sp, #32
   11a24:	466a      	mov	r2, sp
   11a26:	4b35      	ldr	r3, [pc, #212]	; (11afc <bt_att_accept+0xf8>)
   11a28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a2c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11a30:	2303      	movs	r3, #3
   11a32:	4833      	ldr	r0, [pc, #204]	; (11b00 <bt_att_accept+0xfc>)
   11a34:	f842 3f10 	str.w	r3, [r2, #16]!
   11a38:	f00c fc9d 	bl	1e376 <z_log_msg_static_create.constprop.0>
   11a3c:	46ad      	mov	sp, r5
		return -ENOMEM;
   11a3e:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   11a42:	4628      	mov	r0, r5
   11a44:	3708      	adds	r7, #8
   11a46:	46bd      	mov	sp, r7
   11a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   11a4c:	f009 fca4 	bl	1b398 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   11a50:	4b2c      	ldr	r3, [pc, #176]	; (11b04 <bt_att_accept+0x100>)
	(void)memset(att, 0, sizeof(*att));
   11a52:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   11a54:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   11a56:	2230      	movs	r2, #48	; 0x30
   11a58:	6838      	ldr	r0, [r7, #0]
   11a5a:	f00c f860 	bl	1db1e <memset>
	att->conn = conn;
   11a5e:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11a60:	2200      	movs	r2, #0
	att->conn = conn;
   11a62:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   11a64:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11a66:	2300      	movs	r3, #0
	list->tail = NULL;
   11a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
   11a6c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   11a70:	4825      	ldr	r0, [pc, #148]	; (11b08 <bt_att_accept+0x104>)
   11a72:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   11a74:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11a76:	f007 f867 	bl	18b48 <k_mem_slab_alloc>
   11a7a:	4605      	mov	r5, r0
   11a7c:	b180      	cbz	r0, 11aa0 <bt_att_accept+0x9c>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   11a7e:	6823      	ldr	r3, [r4, #0]
   11a80:	466c      	mov	r4, sp
   11a82:	b088      	sub	sp, #32
   11a84:	466a      	mov	r2, sp
   11a86:	4921      	ldr	r1, [pc, #132]	; (11b0c <bt_att_accept+0x108>)
   11a88:	481d      	ldr	r0, [pc, #116]	; (11b00 <bt_att_accept+0xfc>)
   11a8a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11a8e:	2303      	movs	r3, #3
   11a90:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11a94:	f842 3f10 	str.w	r3, [r2, #16]!
   11a98:	f00c fc6d 	bl	1e376 <z_log_msg_static_create.constprop.0>
   11a9c:	46a5      	mov	sp, r4
	if (!chan) {
   11a9e:	e7ce      	b.n	11a3e <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   11aa0:	4601      	mov	r1, r0
   11aa2:	22f8      	movs	r2, #248	; 0xf8
   11aa4:	6878      	ldr	r0, [r7, #4]
   11aa6:	f00c f83a 	bl	1db1e <memset>
	chan->chan.chan.ops = &ops;
   11aaa:	6878      	ldr	r0, [r7, #4]
   11aac:	4b18      	ldr	r3, [pc, #96]	; (11b10 <bt_att_accept+0x10c>)
   11aae:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   11ab0:	30a0      	adds	r0, #160	; 0xa0
   11ab2:	f00e fa99 	bl	1ffe8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11ab6:	687b      	ldr	r3, [r7, #4]
   11ab8:	3398      	adds	r3, #152	; 0x98
   11aba:	e8d3 2fef 	ldaex	r2, [r3]
   11abe:	e8c3 5fe1 	stlex	r1, r5, [r3]
   11ac2:	2900      	cmp	r1, #0
   11ac4:	d1f9      	bne.n	11aba <bt_att_accept+0xb6>
	chan->att = att;
   11ac6:	687b      	ldr	r3, [r7, #4]
   11ac8:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   11aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   11acc:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   11ad0:	b91b      	cbnz	r3, 11ada <bt_att_accept+0xd6>
   11ad2:	f104 000c 	add.w	r0, r4, #12
   11ad6:	f00e fa87 	bl	1ffe8 <z_impl_k_queue_init>
	return list->head;
   11ada:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   11adc:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   11ae0:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   11ae4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   11ae6:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   11ae8:	b902      	cbnz	r2, 11aec <bt_att_accept+0xe8>
	list->tail = node;
   11aea:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   11aec:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   11aee:	2b00      	cmp	r3, #0
   11af0:	d0a5      	beq.n	11a3e <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   11af2:	3304      	adds	r3, #4
   11af4:	6033      	str	r3, [r6, #0]
	return 0;
   11af6:	e7a4      	b.n	11a42 <bt_att_accept+0x3e>
   11af8:	20008550 	.word	0x20008550
   11afc:	00023788 	.word	0x00023788
   11b00:	00020814 	.word	0x00020814
   11b04:	20009928 	.word	0x20009928
   11b08:	20008570 	.word	0x20008570
   11b0c:	000237ad 	.word	0x000237ad
   11b10:	20008224 	.word	0x20008224

00011b14 <bt_att_chan_create_pdu>:
{
   11b14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   11b18:	b086      	sub	sp, #24
   11b1a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11b1c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   11b1e:	1c53      	adds	r3, r2, #1
   11b20:	428b      	cmp	r3, r1
{
   11b22:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11b24:	d915      	bls.n	11b52 <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   11b26:	466c      	mov	r4, sp
   11b28:	b088      	sub	sp, #32
   11b2a:	466a      	mov	r2, sp
   11b2c:	4829      	ldr	r0, [pc, #164]	; (11bd4 <bt_att_chan_create_pdu+0xc0>)
   11b2e:	61d3      	str	r3, [r2, #28]
   11b30:	2304      	movs	r3, #4
   11b32:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11b36:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11b3a:	f842 3f10 	str.w	r3, [r2, #16]!
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11b3e:	4826      	ldr	r0, [pc, #152]	; (11bd8 <bt_att_chan_create_pdu+0xc4>)
   11b40:	f00c fc19 	bl	1e376 <z_log_msg_static_create.constprop.0>
   11b44:	46a5      	mov	sp, r4
		return NULL;
   11b46:	2400      	movs	r4, #0
}
   11b48:	4620      	mov	r0, r4
   11b4a:	3718      	adds	r7, #24
   11b4c:	46bd      	mov	sp, r7
   11b4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   11b52:	4628      	mov	r0, r5
   11b54:	f7ff fc72 	bl	1143c <att_op_get_type>
   11b58:	2802      	cmp	r0, #2
   11b5a:	d019      	beq.n	11b90 <bt_att_chan_create_pdu+0x7c>
   11b5c:	2804      	cmp	r0, #4
   11b5e:	d017      	beq.n	11b90 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   11b60:	f04f 38ff 	mov.w	r8, #4294967295
   11b64:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   11b68:	2100      	movs	r1, #0
   11b6a:	4642      	mov	r2, r8
   11b6c:	464b      	mov	r3, r9
   11b6e:	4608      	mov	r0, r1
   11b70:	f00c fae6 	bl	1e140 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   11b74:	4604      	mov	r4, r0
   11b76:	b980      	cbnz	r0, 11b9a <bt_att_chan_create_pdu+0x86>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11b78:	466c      	mov	r4, sp
   11b7a:	b088      	sub	sp, #32
   11b7c:	466a      	mov	r2, sp
   11b7e:	4b17      	ldr	r3, [pc, #92]	; (11bdc <bt_att_chan_create_pdu+0xc8>)
   11b80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b84:	e9c2 3505 	strd	r3, r5, [r2, #20]
   11b88:	2303      	movs	r3, #3
   11b8a:	f842 3f10 	str.w	r3, [r2, #16]!
   11b8e:	e7d6      	b.n	11b3e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   11b90:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   11b94:	f04f 0900 	mov.w	r9, #0
   11b98:	e7e6      	b.n	11b68 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   11b9a:	4811      	ldr	r0, [pc, #68]	; (11be0 <bt_att_chan_create_pdu+0xcc>)
   11b9c:	4642      	mov	r2, r8
   11b9e:	464b      	mov	r3, r9
   11ba0:	f007 fc68 	bl	19474 <z_impl_k_queue_get>
	if (!data) {
   11ba4:	b970      	cbnz	r0, 11bc4 <bt_att_chan_create_pdu+0xb0>
		BT_WARN("Unable to allocate ATT TX meta");
   11ba6:	4b0f      	ldr	r3, [pc, #60]	; (11be4 <bt_att_chan_create_pdu+0xd0>)
   11ba8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11bac:	617b      	str	r3, [r7, #20]
   11bae:	2302      	movs	r3, #2
   11bb0:	4809      	ldr	r0, [pc, #36]	; (11bd8 <bt_att_chan_create_pdu+0xc4>)
   11bb2:	613b      	str	r3, [r7, #16]
   11bb4:	f107 0210 	add.w	r2, r7, #16
   11bb8:	f00c fbdd 	bl	1e376 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   11bbc:	4620      	mov	r0, r4
   11bbe:	f001 ffc3 	bl	13b48 <net_buf_unref>
		return NULL;
   11bc2:	e7c0      	b.n	11b46 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   11bc4:	6160      	str	r0, [r4, #20]
   11bc6:	2101      	movs	r1, #1
   11bc8:	f104 0008 	add.w	r0, r4, #8
   11bcc:	f002 f8de 	bl	13d8c <net_buf_simple_add>
	hdr->code = op;
   11bd0:	7005      	strb	r5, [r0, #0]
	return buf;
   11bd2:	e7b9      	b.n	11b48 <bt_att_chan_create_pdu+0x34>
   11bd4:	000237d2 	.word	0x000237d2
   11bd8:	00020814 	.word	0x00020814
   11bdc:	000234c3 	.word	0x000234c3
   11be0:	20008624 	.word	0x20008624
   11be4:	000237f7 	.word	0x000237f7

00011be8 <bt_att_recv>:
{
   11be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bec:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   11bee:	898b      	ldrh	r3, [r1, #12]
{
   11bf0:	4682      	mov	sl, r0
   11bf2:	460c      	mov	r4, r1
   11bf4:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   11bf6:	b97b      	cbnz	r3, 11c18 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   11bf8:	4b4c      	ldr	r3, [pc, #304]	; (11d2c <bt_att_recv+0x144>)
   11bfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11bfe:	617b      	str	r3, [r7, #20]
   11c00:	2302      	movs	r3, #2
   11c02:	f107 0210 	add.w	r2, r7, #16
   11c06:	613b      	str	r3, [r7, #16]
			BT_WARN("Ignoring unexpected request");
   11c08:	4849      	ldr	r0, [pc, #292]	; (11d30 <bt_att_recv+0x148>)
   11c0a:	f00c fbb4 	bl	1e376 <z_log_msg_static_create.constprop.0>
}
   11c0e:	2000      	movs	r0, #0
   11c10:	371c      	adds	r7, #28
   11c12:	46bd      	mov	sp, r7
   11c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   11c18:	2101      	movs	r1, #1
   11c1a:	f104 0008 	add.w	r0, r4, #8
   11c1e:	f002 f897 	bl	13d50 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11c22:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   11c26:	4605      	mov	r5, r0
   11c28:	2b00      	cmp	r3, #0
   11c2a:	d0f0      	beq.n	11c0e <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11c2c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11c2e:	7801      	ldrb	r1, [r0, #0]
   11c30:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11d34 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11c34:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   11c38:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   11c3c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   11c40:	4288      	cmp	r0, r1
   11c42:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   11c46:	d114      	bne.n	11c72 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   11c48:	f892 9002 	ldrb.w	r9, [r2, #2]
   11c4c:	f1b9 0f01 	cmp.w	r9, #1
   11c50:	d131      	bne.n	11cb6 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   11c52:	2100      	movs	r1, #0
   11c54:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   11c58:	f00c fc77 	bl	1e54a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   11c5c:	2800      	cmp	r0, #0
   11c5e:	d035      	beq.n	11ccc <bt_att_recv+0xe4>
			BT_WARN("Ignoring unexpected request");
   11c60:	4b35      	ldr	r3, [pc, #212]	; (11d38 <bt_att_recv+0x150>)
   11c62:	617b      	str	r3, [r7, #20]
   11c64:	2302      	movs	r3, #2
   11c66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11c6a:	613b      	str	r3, [r7, #16]
   11c6c:	f107 0210 	add.w	r2, r7, #16
   11c70:	e7ca      	b.n	11c08 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11c72:	3301      	adds	r3, #1
   11c74:	2b0e      	cmp	r3, #14
   11c76:	d1df      	bne.n	11c38 <bt_att_recv+0x50>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   11c78:	466c      	mov	r4, sp
   11c7a:	b088      	sub	sp, #32
   11c7c:	466a      	mov	r2, sp
   11c7e:	4b2f      	ldr	r3, [pc, #188]	; (11d3c <bt_att_recv+0x154>)
   11c80:	482b      	ldr	r0, [pc, #172]	; (11d30 <bt_att_recv+0x148>)
   11c82:	e9c2 3105 	strd	r3, r1, [r2, #20]
   11c86:	2303      	movs	r3, #3
   11c88:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11c8c:	f842 3f10 	str.w	r3, [r2, #16]!
   11c90:	f00c fb71 	bl	1e376 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   11c94:	7829      	ldrb	r1, [r5, #0]
   11c96:	46a5      	mov	sp, r4
   11c98:	4608      	mov	r0, r1
   11c9a:	f7ff fbcf 	bl	1143c <att_op_get_type>
   11c9e:	2800      	cmp	r0, #0
   11ca0:	d0b5      	beq.n	11c0e <bt_att_recv+0x26>
   11ca2:	2805      	cmp	r0, #5
   11ca4:	d0b3      	beq.n	11c0e <bt_att_recv+0x26>
	if (!req) {
   11ca6:	2900      	cmp	r1, #0
   11ca8:	d0b1      	beq.n	11c0e <bt_att_recv+0x26>
   11caa:	2306      	movs	r3, #6
   11cac:	2200      	movs	r2, #0
   11cae:	4630      	mov	r0, r6
   11cb0:	f00c fdaf 	bl	1e812 <send_err_rsp.part.0>
   11cb4:	e7ab      	b.n	11c0e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   11cb6:	f1b9 0f05 	cmp.w	r9, #5
   11cba:	d107      	bne.n	11ccc <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   11cbc:	2101      	movs	r1, #1
   11cbe:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   11cc2:	f00c fc42 	bl	1e54a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   11cc6:	b108      	cbz	r0, 11ccc <bt_att_recv+0xe4>
			BT_WARN("Ignoring unexpected indication");
   11cc8:	4b1d      	ldr	r3, [pc, #116]	; (11d40 <bt_att_recv+0x158>)
   11cca:	e7ca      	b.n	11c62 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   11ccc:	44d8      	add	r8, fp
   11cce:	89a3      	ldrh	r3, [r4, #12]
   11cd0:	f898 2001 	ldrb.w	r2, [r8, #1]
   11cd4:	429a      	cmp	r2, r3
   11cd6:	d916      	bls.n	11d06 <bt_att_recv+0x11e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   11cd8:	46e9      	mov	r9, sp
   11cda:	b088      	sub	sp, #32
   11cdc:	466a      	mov	r2, sp
   11cde:	7829      	ldrb	r1, [r5, #0]
   11ce0:	2404      	movs	r4, #4
   11ce2:	4818      	ldr	r0, [pc, #96]	; (11d44 <bt_att_recv+0x15c>)
   11ce4:	61d1      	str	r1, [r2, #28]
   11ce6:	e9c2 0305 	strd	r0, r3, [r2, #20]
   11cea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11cee:	4810      	ldr	r0, [pc, #64]	; (11d30 <bt_att_recv+0x148>)
   11cf0:	f842 4f10 	str.w	r4, [r2, #16]!
   11cf4:	f00c fb3f 	bl	1e376 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   11cf8:	f898 3002 	ldrb.w	r3, [r8, #2]
   11cfc:	46cd      	mov	sp, r9
   11cfe:	2b01      	cmp	r3, #1
   11d00:	d185      	bne.n	11c0e <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   11d02:	4623      	mov	r3, r4
   11d04:	e00c      	b.n	11d20 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   11d06:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11d0a:	4621      	mov	r1, r4
   11d0c:	4630      	mov	r0, r6
   11d0e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   11d10:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   11d14:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   11d16:	f47f af7a 	bne.w	11c0e <bt_att_recv+0x26>
   11d1a:	2800      	cmp	r0, #0
   11d1c:	f43f af77 	beq.w	11c0e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   11d20:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   11d22:	2900      	cmp	r1, #0
   11d24:	f43f af73 	beq.w	11c0e <bt_att_recv+0x26>
   11d28:	e7c0      	b.n	11cac <bt_att_recv+0xc4>
   11d2a:	bf00      	nop
   11d2c:	00023816 	.word	0x00023816
   11d30:	00020814 	.word	0x00020814
   11d34:	00020d88 	.word	0x00020d88
   11d38:	0002384b 	.word	0x0002384b
   11d3c:	00023831 	.word	0x00023831
   11d40:	00023867 	.word	0x00023867
   11d44:	00023886 	.word	0x00023886

00011d48 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d4a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11d4c:	6803      	ldr	r3, [r0, #0]
   11d4e:	460d      	mov	r5, r1
   11d50:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11d52:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11d54:	bf18      	it	ne
   11d56:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11d58:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11d5a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11d5c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11d5e:	f00d f80d 	bl	1ed7c <bt_gatt_change_aware>
   11d62:	b948      	cbnz	r0, 11d78 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11d64:	2105      	movs	r1, #5
   11d66:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11d6a:	f00c fbee 	bl	1e54a <atomic_test_and_set_bit>
   11d6e:	2800      	cmp	r0, #0
   11d70:	d048      	beq.n	11e04 <att_write_rsp.constprop.0+0xbc>
			return 0;
   11d72:	2000      	movs	r0, #0
}
   11d74:	b007      	add	sp, #28
   11d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   11d78:	2e00      	cmp	r6, #0
   11d7a:	d045      	beq.n	11e08 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   11d7c:	2218      	movs	r2, #24
   11d7e:	2100      	movs	r1, #0
   11d80:	4668      	mov	r0, sp
   11d82:	f00b fecc 	bl	1db1e <memset>
	if (rsp) {
   11d86:	bb67      	cbnz	r7, 11de2 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   11d88:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11d8a:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   11d8c:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11d8e:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   11d90:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   11d92:	2300      	movs	r3, #0
   11d94:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   11d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11d9a:	4a1c      	ldr	r2, [pc, #112]	; (11e0c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   11d9c:	9303      	str	r3, [sp, #12]
	data.len = len;
   11d9e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   11da2:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   11da6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11daa:	2301      	movs	r3, #1
   11dac:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11db0:	466b      	mov	r3, sp
   11db2:	f00c fa46 	bl	1e242 <bt_gatt_foreach_attr>
	if (data.err) {
   11db6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11dba:	b1e3      	cbz	r3, 11df6 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   11dbc:	2f00      	cmp	r7, #0
   11dbe:	d0d8      	beq.n	11d72 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11dc0:	9b01      	ldr	r3, [sp, #4]
   11dc2:	6958      	ldr	r0, [r3, #20]
   11dc4:	f7ff fb80 	bl	114c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   11dc8:	9801      	ldr	r0, [sp, #4]
   11dca:	f001 febd 	bl	13b48 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   11dce:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   11dd2:	2d00      	cmp	r5, #0
   11dd4:	d0cd      	beq.n	11d72 <att_write_rsp.constprop.0+0x2a>
   11dd6:	4632      	mov	r2, r6
   11dd8:	4629      	mov	r1, r5
   11dda:	4620      	mov	r0, r4
   11ddc:	f00c fd19 	bl	1e812 <send_err_rsp.part.0>
   11de0:	e7c7      	b.n	11d72 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   11de2:	2200      	movs	r2, #0
   11de4:	4639      	mov	r1, r7
   11de6:	4620      	mov	r0, r4
   11de8:	f7ff fe94 	bl	11b14 <bt_att_chan_create_pdu>
   11dec:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   11dee:	2800      	cmp	r0, #0
   11df0:	d1ca      	bne.n	11d88 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   11df2:	200e      	movs	r0, #14
   11df4:	e7be      	b.n	11d74 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   11df6:	9901      	ldr	r1, [sp, #4]
   11df8:	2900      	cmp	r1, #0
   11dfa:	d0ba      	beq.n	11d72 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   11dfc:	4620      	mov	r0, r4
   11dfe:	f00c faf0 	bl	1e3e2 <bt_att_chan_send_rsp>
   11e02:	e7b6      	b.n	11d72 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11e04:	2012      	movs	r0, #18
   11e06:	e7b5      	b.n	11d74 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11e08:	2001      	movs	r0, #1
   11e0a:	e7b3      	b.n	11d74 <att_write_rsp.constprop.0+0x2c>
   11e0c:	0001e1e1 	.word	0x0001e1e1

00011e10 <bt_att_create_pdu>:
{
   11e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e12:	af00      	add	r7, sp, #0
   11e14:	460e      	mov	r6, r1
   11e16:	4615      	mov	r5, r2
	att = att_get(conn);
   11e18:	f7ff fcec 	bl	117f4 <att_get>
	if (!att) {
   11e1c:	b1e0      	cbz	r0, 11e58 <bt_att_create_pdu+0x48>
	return list->head;
   11e1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11e20:	4618      	mov	r0, r3
   11e22:	b11b      	cbz	r3, 11e2c <bt_att_create_pdu+0x1c>
	return node->next;
   11e24:	f850 39f0 	ldr.w	r3, [r0], #-240
   11e28:	b103      	cbz	r3, 11e2c <bt_att_create_pdu+0x1c>
   11e2a:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11e2c:	1c6c      	adds	r4, r5, #1
   11e2e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11e30:	b118      	cbz	r0, 11e3a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11e32:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   11e34:	42a1      	cmp	r1, r4
   11e36:	d219      	bcs.n	11e6c <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11e38:	b983      	cbnz	r3, 11e5c <bt_att_create_pdu+0x4c>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   11e3a:	466d      	mov	r5, sp
   11e3c:	b088      	sub	sp, #32
   11e3e:	466a      	mov	r2, sp
   11e40:	4b0e      	ldr	r3, [pc, #56]	; (11e7c <bt_att_create_pdu+0x6c>)
   11e42:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11e46:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11e4a:	2303      	movs	r3, #3
   11e4c:	480c      	ldr	r0, [pc, #48]	; (11e80 <bt_att_create_pdu+0x70>)
   11e4e:	f842 3f10 	str.w	r3, [r2, #16]!
   11e52:	f00c fa90 	bl	1e376 <z_log_msg_static_create.constprop.0>
   11e56:	46ad      	mov	sp, r5
		return NULL;
   11e58:	2000      	movs	r0, #0
   11e5a:	e00b      	b.n	11e74 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11e5c:	4618      	mov	r0, r3
   11e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   11e62:	b14b      	cbz	r3, 11e78 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11e64:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11e66:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11e68:	428a      	cmp	r2, r1
   11e6a:	d8f7      	bhi.n	11e5c <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   11e6c:	462a      	mov	r2, r5
   11e6e:	4631      	mov	r1, r6
   11e70:	f7ff fe50 	bl	11b14 <bt_att_chan_create_pdu>
}
   11e74:	46bd      	mov	sp, r7
   11e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11e78:	4614      	mov	r4, r2
   11e7a:	e7da      	b.n	11e32 <bt_att_create_pdu+0x22>
   11e7c:	000238a5 	.word	0x000238a5
   11e80:	00020814 	.word	0x00020814

00011e84 <att_read_group_req>:
{
   11e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11e88:	898e      	ldrh	r6, [r1, #12]
{
   11e8a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11e8c:	3e04      	subs	r6, #4
   11e8e:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   11e90:	2e02      	cmp	r6, #2
{
   11e92:	4608      	mov	r0, r1
   11e94:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11e96:	d001      	beq.n	11e9c <att_read_group_req+0x18>
   11e98:	2e10      	cmp	r6, #16
   11e9a:	d16a      	bne.n	11f72 <att_read_group_req+0xee>
   11e9c:	2104      	movs	r1, #4
   11e9e:	3008      	adds	r0, #8
   11ea0:	f001 ff56 	bl	13d50 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11ea4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   11ea8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11eaa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11eac:	1d01      	adds	r1, r0, #4
   11eae:	4632      	mov	r2, r6
   11eb0:	4640      	mov	r0, r8
   11eb2:	f00b fe6e 	bl	1db92 <bt_uuid_create>
   11eb6:	2800      	cmp	r0, #0
   11eb8:	d05d      	beq.n	11f76 <att_read_group_req+0xf2>
	if (!start || !end) {
   11eba:	2d00      	cmp	r5, #0
   11ebc:	d03a      	beq.n	11f34 <att_read_group_req+0xb0>
   11ebe:	2600      	movs	r6, #0
   11ec0:	2f00      	cmp	r7, #0
   11ec2:	d036      	beq.n	11f32 <att_read_group_req+0xae>
	if (start > end) {
   11ec4:	42bd      	cmp	r5, r7
   11ec6:	d835      	bhi.n	11f34 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11ec8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11ecc:	4640      	mov	r0, r8
   11ece:	a901      	add	r1, sp, #4
   11ed0:	f88d 6004 	strb.w	r6, [sp, #4]
   11ed4:	f8ad 3006 	strh.w	r3, [sp, #6]
   11ed8:	f00b fe2d 	bl	1db36 <bt_uuid_cmp>
   11edc:	bb70      	cbnz	r0, 11f3c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   11ede:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   11ee0:	2214      	movs	r2, #20
   11ee2:	2100      	movs	r1, #0
   11ee4:	a807      	add	r0, sp, #28
   11ee6:	f00b fe1a 	bl	1db1e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   11eea:	2201      	movs	r2, #1
   11eec:	2111      	movs	r1, #17
   11eee:	4630      	mov	r0, r6
   11ef0:	f7ff ff8e 	bl	11e10 <bt_att_create_pdu>
   11ef4:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   11ef6:	2800      	cmp	r0, #0
   11ef8:	d03d      	beq.n	11f76 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   11efa:	2101      	movs	r1, #1
   11efc:	3008      	adds	r0, #8
	data.uuid = uuid;
   11efe:	e9cd 4807 	strd	r4, r8, [sp, #28]
   11f02:	f001 ff43 	bl	13d8c <net_buf_simple_add>
	data.rsp->len = 0U;
   11f06:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11f08:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11f0a:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   11f0c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11f0e:	4a1b      	ldr	r2, [pc, #108]	; (11f7c <att_read_group_req+0xf8>)
	data.group = NULL;
   11f10:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11f12:	4628      	mov	r0, r5
   11f14:	ab07      	add	r3, sp, #28
   11f16:	f00c f994 	bl	1e242 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   11f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f1c:	781b      	ldrb	r3, [r3, #0]
   11f1e:	bb1b      	cbnz	r3, 11f68 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   11f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f22:	6958      	ldr	r0, [r3, #20]
   11f24:	f7ff fad0 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   11f28:	9809      	ldr	r0, [sp, #36]	; 0x24
   11f2a:	f001 fe0d 	bl	13b48 <net_buf_unref>
	if (!req) {
   11f2e:	230a      	movs	r3, #10
   11f30:	e001      	b.n	11f36 <att_read_group_req+0xb2>
			*err = 0U;
   11f32:	463d      	mov	r5, r7
	if (!req) {
   11f34:	2301      	movs	r3, #1
   11f36:	462a      	mov	r2, r5
   11f38:	2110      	movs	r1, #16
   11f3a:	e00e      	b.n	11f5a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   11f3c:	f642 0301 	movw	r3, #10241	; 0x2801
   11f40:	4640      	mov	r0, r8
   11f42:	a907      	add	r1, sp, #28
   11f44:	f88d 601c 	strb.w	r6, [sp, #28]
   11f48:	f8ad 301e 	strh.w	r3, [sp, #30]
   11f4c:	f00b fdf3 	bl	1db36 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11f50:	2800      	cmp	r0, #0
   11f52:	d0c4      	beq.n	11ede <att_read_group_req+0x5a>
	if (!req) {
   11f54:	2310      	movs	r3, #16
   11f56:	462a      	mov	r2, r5
   11f58:	4619      	mov	r1, r3
   11f5a:	4620      	mov	r0, r4
   11f5c:	f00c fc59 	bl	1e812 <send_err_rsp.part.0>
		return 0;
   11f60:	2000      	movs	r0, #0
}
   11f62:	b00c      	add	sp, #48	; 0x30
   11f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   11f68:	4620      	mov	r0, r4
   11f6a:	9909      	ldr	r1, [sp, #36]	; 0x24
   11f6c:	f00c fa39 	bl	1e3e2 <bt_att_chan_send_rsp>
	return 0;
   11f70:	e7f6      	b.n	11f60 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   11f72:	2004      	movs	r0, #4
   11f74:	e7f5      	b.n	11f62 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   11f76:	200e      	movs	r0, #14
   11f78:	e7f3      	b.n	11f62 <att_read_group_req+0xde>
   11f7a:	bf00      	nop
   11f7c:	000118b9 	.word	0x000118b9

00011f80 <att_read_mult_vl_req>:
{
   11f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11f84:	6846      	ldr	r6, [r0, #4]
{
   11f86:	4604      	mov	r4, r0
   11f88:	460d      	mov	r5, r1
   11f8a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   11f8c:	2101      	movs	r1, #1
   11f8e:	4630      	mov	r0, r6
   11f90:	f00c fef4 	bl	1ed7c <bt_gatt_change_aware>
   11f94:	b950      	cbnz	r0, 11fac <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   11f96:	2105      	movs	r1, #5
   11f98:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11f9c:	f00c fad5 	bl	1e54a <atomic_test_and_set_bit>
   11fa0:	2800      	cmp	r0, #0
   11fa2:	d13b      	bne.n	1201c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11fa4:	2012      	movs	r0, #18
}
   11fa6:	b005      	add	sp, #20
   11fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   11fac:	2210      	movs	r2, #16
   11fae:	2100      	movs	r1, #0
   11fb0:	4668      	mov	r0, sp
   11fb2:	f00b fdb4 	bl	1db1e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   11fb6:	2200      	movs	r2, #0
   11fb8:	2121      	movs	r1, #33	; 0x21
   11fba:	4630      	mov	r0, r6
   11fbc:	f7ff ff28 	bl	11e10 <bt_att_create_pdu>
   11fc0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11fc2:	b368      	cbz	r0, 12020 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11fc4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   11fc8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12024 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   11fcc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   11fce:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   11fd2:	89ab      	ldrh	r3, [r5, #12]
   11fd4:	2b01      	cmp	r3, #1
   11fd6:	d804      	bhi.n	11fe2 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   11fd8:	4620      	mov	r0, r4
   11fda:	9902      	ldr	r1, [sp, #8]
   11fdc:	f00c fa01 	bl	1e3e2 <bt_att_chan_send_rsp>
	return 0;
   11fe0:	e01c      	b.n	1201c <att_read_mult_vl_req+0x9c>
   11fe2:	4638      	mov	r0, r7
   11fe4:	f00c ff3e 	bl	1ee64 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   11fe8:	466b      	mov	r3, sp
   11fea:	464a      	mov	r2, r9
   11fec:	4601      	mov	r1, r0
   11fee:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11ff0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   11ff4:	f00c f925 	bl	1e242 <bt_gatt_foreach_attr>
		if (data.err) {
   11ff8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11ffc:	2b00      	cmp	r3, #0
   11ffe:	d0e8      	beq.n	11fd2 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12000:	9b02      	ldr	r3, [sp, #8]
   12002:	6958      	ldr	r0, [r3, #20]
   12004:	f7ff fa60 	bl	114c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   12008:	9802      	ldr	r0, [sp, #8]
   1200a:	f001 fd9d 	bl	13b48 <net_buf_unref>
	if (!req) {
   1200e:	4632      	mov	r2, r6
   12010:	2120      	movs	r1, #32
   12012:	4620      	mov	r0, r4
   12014:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12018:	f00c fbfb 	bl	1e812 <send_err_rsp.part.0>
			return 0;
   1201c:	2000      	movs	r0, #0
   1201e:	e7c2      	b.n	11fa6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   12020:	200e      	movs	r0, #14
   12022:	e7c0      	b.n	11fa6 <att_read_mult_vl_req+0x26>
   12024:	0001e5b3 	.word	0x0001e5b3

00012028 <att_read_mult_req>:
{
   12028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1202c:	6846      	ldr	r6, [r0, #4]
{
   1202e:	4604      	mov	r4, r0
   12030:	460d      	mov	r5, r1
   12032:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   12034:	2101      	movs	r1, #1
   12036:	4630      	mov	r0, r6
   12038:	f00c fea0 	bl	1ed7c <bt_gatt_change_aware>
   1203c:	b950      	cbnz	r0, 12054 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1203e:	2105      	movs	r1, #5
   12040:	f104 0098 	add.w	r0, r4, #152	; 0x98
   12044:	f00c fa81 	bl	1e54a <atomic_test_and_set_bit>
   12048:	2800      	cmp	r0, #0
   1204a:	d13b      	bne.n	120c4 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1204c:	2012      	movs	r0, #18
}
   1204e:	b005      	add	sp, #20
   12050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   12054:	2210      	movs	r2, #16
   12056:	2100      	movs	r1, #0
   12058:	4668      	mov	r0, sp
   1205a:	f00b fd60 	bl	1db1e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1205e:	2200      	movs	r2, #0
   12060:	210f      	movs	r1, #15
   12062:	4630      	mov	r0, r6
   12064:	f7ff fed4 	bl	11e10 <bt_att_create_pdu>
   12068:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1206a:	b368      	cbz	r0, 120c8 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1206c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12070:	f8df 9058 	ldr.w	r9, [pc, #88]	; 120cc <att_read_mult_req+0xa4>
	data.chan = chan;
   12074:	9400      	str	r4, [sp, #0]
   12076:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1207a:	89ab      	ldrh	r3, [r5, #12]
   1207c:	2b01      	cmp	r3, #1
   1207e:	d804      	bhi.n	1208a <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   12080:	4620      	mov	r0, r4
   12082:	9902      	ldr	r1, [sp, #8]
   12084:	f00c f9ad 	bl	1e3e2 <bt_att_chan_send_rsp>
	return 0;
   12088:	e01c      	b.n	120c4 <att_read_mult_req+0x9c>
   1208a:	4638      	mov	r0, r7
   1208c:	f00c feea 	bl	1ee64 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12090:	466b      	mov	r3, sp
   12092:	464a      	mov	r2, r9
   12094:	4601      	mov	r1, r0
   12096:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12098:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1209c:	f00c f8d1 	bl	1e242 <bt_gatt_foreach_attr>
		if (data.err) {
   120a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   120a4:	2b00      	cmp	r3, #0
   120a6:	d0e8      	beq.n	1207a <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   120a8:	9b02      	ldr	r3, [sp, #8]
   120aa:	6958      	ldr	r0, [r3, #20]
   120ac:	f7ff fa0c 	bl	114c8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   120b0:	9802      	ldr	r0, [sp, #8]
   120b2:	f001 fd49 	bl	13b48 <net_buf_unref>
	if (!req) {
   120b6:	4632      	mov	r2, r6
   120b8:	210e      	movs	r1, #14
   120ba:	4620      	mov	r0, r4
   120bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   120c0:	f00c fba7 	bl	1e812 <send_err_rsp.part.0>
			return 0;
   120c4:	2000      	movs	r0, #0
   120c6:	e7c2      	b.n	1204e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   120c8:	200e      	movs	r0, #14
   120ca:	e7c0      	b.n	1204e <att_read_mult_req+0x26>
   120cc:	0001e56d 	.word	0x0001e56d

000120d0 <att_read_rsp>:
{
   120d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   120d4:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   120d8:	4604      	mov	r4, r0
   120da:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   120dc:	4640      	mov	r0, r8
   120de:	2101      	movs	r1, #1
{
   120e0:	4617      	mov	r7, r2
   120e2:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   120e4:	f00c fe4a 	bl	1ed7c <bt_gatt_change_aware>
   120e8:	b948      	cbnz	r0, 120fe <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   120ea:	2105      	movs	r1, #5
   120ec:	f104 0098 	add.w	r0, r4, #152	; 0x98
   120f0:	f00c fa2b 	bl	1e54a <atomic_test_and_set_bit>
   120f4:	bb78      	cbnz	r0, 12156 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   120f6:	2012      	movs	r0, #18
}
   120f8:	b004      	add	sp, #16
   120fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   120fe:	b38d      	cbz	r5, 12164 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   12100:	2210      	movs	r2, #16
   12102:	2100      	movs	r1, #0
   12104:	4668      	mov	r0, sp
   12106:	f00b fd0a 	bl	1db1e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1210a:	2200      	movs	r2, #0
   1210c:	4639      	mov	r1, r7
   1210e:	4640      	mov	r0, r8
   12110:	f7ff fe7e 	bl	11e10 <bt_att_create_pdu>
   12114:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12116:	b338      	cbz	r0, 12168 <att_read_rsp+0x98>
	data.offset = offset;
   12118:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1211c:	4629      	mov	r1, r5
	data.offset = offset;
   1211e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12122:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12124:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12126:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1212a:	4a10      	ldr	r2, [pc, #64]	; (1216c <att_read_rsp+0x9c>)
   1212c:	466b      	mov	r3, sp
	data.chan = chan;
   1212e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12130:	f00c f887 	bl	1e242 <bt_gatt_foreach_attr>
	if (data.err) {
   12134:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12138:	b17b      	cbz	r3, 1215a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1213a:	9b02      	ldr	r3, [sp, #8]
   1213c:	6958      	ldr	r0, [r3, #20]
   1213e:	f7ff f9c3 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12142:	9802      	ldr	r0, [sp, #8]
   12144:	f001 fd00 	bl	13b48 <net_buf_unref>
	if (!req) {
   12148:	462a      	mov	r2, r5
   1214a:	4631      	mov	r1, r6
   1214c:	4620      	mov	r0, r4
   1214e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12152:	f00c fb5e 	bl	1e812 <send_err_rsp.part.0>
			return 0;
   12156:	2000      	movs	r0, #0
   12158:	e7ce      	b.n	120f8 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1215a:	4620      	mov	r0, r4
   1215c:	9902      	ldr	r1, [sp, #8]
   1215e:	f00c f940 	bl	1e3e2 <bt_att_chan_send_rsp>
	return 0;
   12162:	e7f8      	b.n	12156 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   12164:	2001      	movs	r0, #1
   12166:	e7c7      	b.n	120f8 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   12168:	200e      	movs	r0, #14
   1216a:	e7c5      	b.n	120f8 <att_read_rsp+0x28>
   1216c:	0001e56d 	.word	0x0001e56d

00012170 <att_read_type_req>:
{
   12170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12174:	898d      	ldrh	r5, [r1, #12]
{
   12176:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12178:	3d04      	subs	r5, #4
   1217a:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1217c:	2d02      	cmp	r5, #2
{
   1217e:	4608      	mov	r0, r1
   12180:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12182:	d001      	beq.n	12188 <att_read_type_req+0x18>
   12184:	2d10      	cmp	r5, #16
   12186:	d150      	bne.n	1222a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12188:	2104      	movs	r1, #4
   1218a:	3008      	adds	r0, #8
   1218c:	f001 fde0 	bl	13d50 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12190:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12194:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12196:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12198:	1d01      	adds	r1, r0, #4
   1219a:	462a      	mov	r2, r5
   1219c:	4640      	mov	r0, r8
   1219e:	f00b fcf8 	bl	1db92 <bt_uuid_create>
   121a2:	b188      	cbz	r0, 121c8 <att_read_type_req+0x58>
	if (!start || !end) {
   121a4:	b19e      	cbz	r6, 121ce <att_read_type_req+0x5e>
   121a6:	b18f      	cbz	r7, 121cc <att_read_type_req+0x5c>
	if (start > end) {
   121a8:	42b7      	cmp	r7, r6
   121aa:	d310      	bcc.n	121ce <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   121ac:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   121ae:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   121b0:	2100      	movs	r1, #0
   121b2:	eb0d 0002 	add.w	r0, sp, r2
   121b6:	f00b fcb2 	bl	1db1e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   121ba:	2201      	movs	r2, #1
   121bc:	2109      	movs	r1, #9
   121be:	4628      	mov	r0, r5
   121c0:	f7ff fe26 	bl	11e10 <bt_att_create_pdu>
   121c4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   121c6:	b960      	cbnz	r0, 121e2 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   121c8:	200e      	movs	r0, #14
   121ca:	e007      	b.n	121dc <att_read_type_req+0x6c>
			*err = 0U;
   121cc:	463e      	mov	r6, r7
	if (!req) {
   121ce:	2301      	movs	r3, #1
   121d0:	4632      	mov	r2, r6
   121d2:	2108      	movs	r1, #8
   121d4:	4620      	mov	r0, r4
   121d6:	f00c fb1c 	bl	1e812 <send_err_rsp.part.0>
		return 0;
   121da:	2000      	movs	r0, #0
}
   121dc:	b00c      	add	sp, #48	; 0x30
   121de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   121e2:	2101      	movs	r1, #1
   121e4:	3008      	adds	r0, #8
	data.uuid = uuid;
   121e6:	e9cd 4806 	strd	r4, r8, [sp, #24]
   121ea:	f001 fdcf 	bl	13d8c <net_buf_simple_add>
	data.rsp->len = 0U;
   121ee:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   121f0:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   121f2:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   121f4:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   121f6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   121f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   121fc:	4630      	mov	r0, r6
   121fe:	ab06      	add	r3, sp, #24
   12200:	4a0b      	ldr	r2, [pc, #44]	; (12230 <att_read_type_req+0xc0>)
   12202:	f00c f81e 	bl	1e242 <bt_gatt_foreach_attr>
	if (data.err) {
   12206:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1220a:	b14b      	cbz	r3, 12220 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1220c:	9b08      	ldr	r3, [sp, #32]
   1220e:	6958      	ldr	r0, [r3, #20]
   12210:	f7ff f95a 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12214:	9808      	ldr	r0, [sp, #32]
   12216:	f001 fc97 	bl	13b48 <net_buf_unref>
	if (!req) {
   1221a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1221e:	e7d7      	b.n	121d0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   12220:	4620      	mov	r0, r4
   12222:	9908      	ldr	r1, [sp, #32]
   12224:	f00c f8dd 	bl	1e3e2 <bt_att_chan_send_rsp>
	return 0;
   12228:	e7d7      	b.n	121da <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1222a:	2004      	movs	r0, #4
   1222c:	e7d6      	b.n	121dc <att_read_type_req+0x6c>
   1222e:	bf00      	nop
   12230:	00011965 	.word	0x00011965

00012234 <att_find_type_req>:
{
   12234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12238:	460f      	mov	r7, r1
   1223a:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1223c:	2106      	movs	r1, #6
   1223e:	b086      	sub	sp, #24
   12240:	f107 0008 	add.w	r0, r7, #8
   12244:	f001 fd84 	bl	13d50 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12248:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1224a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1224e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   12250:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   12254:	b1c5      	cbz	r5, 12288 <att_find_type_req+0x54>
   12256:	2300      	movs	r3, #0
   12258:	f1b8 0f00 	cmp.w	r8, #0
   1225c:	d013      	beq.n	12286 <att_find_type_req+0x52>
	if (start > end) {
   1225e:	4545      	cmp	r5, r8
   12260:	d812      	bhi.n	12288 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12262:	f88d 3000 	strb.w	r3, [sp]
   12266:	f88d 3004 	strb.w	r3, [sp, #4]
   1226a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1226e:	4668      	mov	r0, sp
   12270:	a901      	add	r1, sp, #4
   12272:	f8ad 2002 	strh.w	r2, [sp, #2]
   12276:	f8ad 3006 	strh.w	r3, [sp, #6]
   1227a:	f00b fc5c 	bl	1db36 <bt_uuid_cmp>
   1227e:	4606      	mov	r6, r0
   12280:	b160      	cbz	r0, 1229c <att_find_type_req+0x68>
	if (!req) {
   12282:	230a      	movs	r3, #10
   12284:	e001      	b.n	1228a <att_find_type_req+0x56>
			*err = 0U;
   12286:	4645      	mov	r5, r8
	if (!req) {
   12288:	2301      	movs	r3, #1
   1228a:	462a      	mov	r2, r5
   1228c:	2106      	movs	r1, #6
   1228e:	4620      	mov	r0, r4
   12290:	f00c fabf 	bl	1e812 <send_err_rsp.part.0>
		return 0;
   12294:	2000      	movs	r0, #0
}
   12296:	b006      	add	sp, #24
   12298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1229c:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   122a0:	4601      	mov	r1, r0
   122a2:	2214      	movs	r2, #20
   122a4:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   122a6:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   122a8:	f00b fc39 	bl	1db1e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   122ac:	4632      	mov	r2, r6
   122ae:	2107      	movs	r1, #7
   122b0:	4650      	mov	r0, sl
   122b2:	f7ff fdad 	bl	11e10 <bt_att_create_pdu>
   122b6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   122b8:	b1f8      	cbz	r0, 122fa <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   122ba:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   122bc:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   122be:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   122c2:	4628      	mov	r0, r5
   122c4:	ab01      	add	r3, sp, #4
   122c6:	4a0e      	ldr	r2, [pc, #56]	; (12300 <att_find_type_req+0xcc>)
	data.value = value;
   122c8:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   122cc:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   122ce:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   122d2:	f00b ffb6 	bl	1e242 <bt_gatt_foreach_attr>
	if (data.err) {
   122d6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   122da:	b14b      	cbz	r3, 122f0 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   122dc:	9b02      	ldr	r3, [sp, #8]
   122de:	6958      	ldr	r0, [r3, #20]
   122e0:	f7ff f8f2 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   122e4:	9802      	ldr	r0, [sp, #8]
   122e6:	f001 fc2f 	bl	13b48 <net_buf_unref>
	if (!req) {
   122ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   122ee:	e7cc      	b.n	1228a <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   122f0:	4620      	mov	r0, r4
   122f2:	9902      	ldr	r1, [sp, #8]
   122f4:	f00c f875 	bl	1e3e2 <bt_att_chan_send_rsp>
	return 0;
   122f8:	e7cc      	b.n	12294 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   122fa:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   122fc:	e7cb      	b.n	12296 <att_find_type_req+0x62>
   122fe:	bf00      	nop
   12300:	00011509 	.word	0x00011509

00012304 <att_find_info_req>:
{
   12304:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12306:	688b      	ldr	r3, [r1, #8]
{
   12308:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1230a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1230c:	885e      	ldrh	r6, [r3, #2]
{
   1230e:	b085      	sub	sp, #20
	if (!start || !end) {
   12310:	b195      	cbz	r5, 12338 <att_find_info_req+0x34>
   12312:	b186      	cbz	r6, 12336 <att_find_info_req+0x32>
	if (start > end) {
   12314:	42b5      	cmp	r5, r6
   12316:	d80f      	bhi.n	12338 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12318:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1231a:	2210      	movs	r2, #16
   1231c:	2100      	movs	r1, #0
   1231e:	4668      	mov	r0, sp
   12320:	f00b fbfd 	bl	1db1e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12324:	2200      	movs	r2, #0
   12326:	2105      	movs	r1, #5
   12328:	4638      	mov	r0, r7
   1232a:	f7ff fd71 	bl	11e10 <bt_att_create_pdu>
   1232e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12330:	b958      	cbnz	r0, 1234a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12332:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12334:	e007      	b.n	12346 <att_find_info_req+0x42>
			*err = 0U;
   12336:	4635      	mov	r5, r6
	if (!req) {
   12338:	2301      	movs	r3, #1
   1233a:	462a      	mov	r2, r5
   1233c:	2104      	movs	r1, #4
   1233e:	4620      	mov	r0, r4
   12340:	f00c fa67 	bl	1e812 <send_err_rsp.part.0>
		return 0;
   12344:	2000      	movs	r0, #0
}
   12346:	b005      	add	sp, #20
   12348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1234a:	466b      	mov	r3, sp
   1234c:	4631      	mov	r1, r6
   1234e:	4628      	mov	r0, r5
   12350:	4a09      	ldr	r2, [pc, #36]	; (12378 <att_find_info_req+0x74>)
	data.chan = chan;
   12352:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12354:	f00b ff75 	bl	1e242 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12358:	9b02      	ldr	r3, [sp, #8]
   1235a:	b943      	cbnz	r3, 1236e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1235c:	9b01      	ldr	r3, [sp, #4]
   1235e:	6958      	ldr	r0, [r3, #20]
   12360:	f7ff f8b2 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12364:	9801      	ldr	r0, [sp, #4]
   12366:	f001 fbef 	bl	13b48 <net_buf_unref>
	if (!req) {
   1236a:	230a      	movs	r3, #10
   1236c:	e7e5      	b.n	1233a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1236e:	4620      	mov	r0, r4
   12370:	9901      	ldr	r1, [sp, #4]
   12372:	f00c f836 	bl	1e3e2 <bt_att_chan_send_rsp>
	return 0;
   12376:	e7e5      	b.n	12344 <att_find_info_req+0x40>
   12378:	0001e259 	.word	0x0001e259

0001237c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1237c:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1237e:	4c0b      	ldr	r4, [pc, #44]	; (123ac <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   12380:	4d0b      	ldr	r5, [pc, #44]	; (123b0 <bt_att_init+0x34>)
   12382:	4620      	mov	r0, r4
   12384:	f00d fe30 	bl	1ffe8 <z_impl_k_queue_init>
   12388:	4629      	mov	r1, r5
   1238a:	4620      	mov	r0, r4
   1238c:	f00d fe39 	bl	20002 <k_queue_append>
   12390:	4620      	mov	r0, r4
   12392:	f105 0114 	add.w	r1, r5, #20
   12396:	f00d fe34 	bl	20002 <k_queue_append>
   1239a:	4620      	mov	r0, r4
   1239c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   123a0:	f00d fe2f 	bl	20002 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   123a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   123a8:	f000 bb6c 	b.w	12a84 <bt_gatt_init>
   123ac:	20008624 	.word	0x20008624
   123b0:	200098ec 	.word	0x200098ec

000123b4 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   123b4:	2300      	movs	r3, #0
{
   123b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   123b8:	4605      	mov	r5, r0
   123ba:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   123bc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   123be:	f008 ffeb 	bl	1b398 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   123c2:	4b0b      	ldr	r3, [pc, #44]	; (123f0 <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   123c4:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   123c6:	681b      	ldr	r3, [r3, #0]
   123c8:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   123ca:	bf04      	itt	eq
   123cc:	2500      	moveq	r5, #0
   123ce:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   123d0:	462a      	mov	r2, r5
   123d2:	4623      	mov	r3, r4
   123d4:	4807      	ldr	r0, [pc, #28]	; (123f4 <bt_att_req_alloc+0x40>)
   123d6:	f006 fbb7 	bl	18b48 <k_mem_slab_alloc>
   123da:	4601      	mov	r1, r0
   123dc:	b930      	cbnz	r0, 123ec <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   123de:	2210      	movs	r2, #16
   123e0:	9801      	ldr	r0, [sp, #4]
   123e2:	f00b fb9c 	bl	1db1e <memset>

	return req;
   123e6:	9801      	ldr	r0, [sp, #4]
}
   123e8:	b003      	add	sp, #12
   123ea:	bd30      	pop	{r4, r5, pc}
		return NULL;
   123ec:	2000      	movs	r0, #0
   123ee:	e7fb      	b.n	123e8 <bt_att_req_alloc+0x34>
   123f0:	20009928 	.word	0x20009928
   123f4:	20008590 	.word	0x20008590

000123f8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   123f8:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   123fa:	6883      	ldr	r3, [r0, #8]
{
   123fc:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   123fe:	b14b      	cbz	r3, 12414 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   12400:	6958      	ldr	r0, [r3, #20]
   12402:	f7ff f861 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(req->buf);
   12406:	9b01      	ldr	r3, [sp, #4]
   12408:	6898      	ldr	r0, [r3, #8]
   1240a:	f001 fb9d 	bl	13b48 <net_buf_unref>
		req->buf = NULL;
   1240e:	2200      	movs	r2, #0
   12410:	9b01      	ldr	r3, [sp, #4]
   12412:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   12414:	4803      	ldr	r0, [pc, #12]	; (12424 <bt_att_req_free+0x2c>)
   12416:	a901      	add	r1, sp, #4
   12418:	f006 fc00 	bl	18c1c <k_mem_slab_free>
}
   1241c:	b003      	add	sp, #12
   1241e:	f85d fb04 	ldr.w	pc, [sp], #4
   12422:	bf00      	nop
   12424:	20008590 	.word	0x20008590

00012428 <att_handle_rsp>:
{
   12428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1242c:	4604      	mov	r4, r0
   1242e:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   12430:	30c0      	adds	r0, #192	; 0xc0
{
   12432:	460e      	mov	r6, r1
   12434:	4617      	mov	r7, r2
   12436:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   12438:	f007 fe2c 	bl	1a094 <k_work_cancel_delayable>
	if (!chan->req) {
   1243c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   12440:	b980      	cbnz	r0, 12464 <att_handle_rsp+0x3c>
		BT_WARN("No pending ATT request");
   12442:	4b1a      	ldr	r3, [pc, #104]	; (124ac <att_handle_rsp+0x84>)
   12444:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12448:	9307      	str	r3, [sp, #28]
   1244a:	2302      	movs	r3, #2
   1244c:	4818      	ldr	r0, [pc, #96]	; (124b0 <att_handle_rsp+0x88>)
   1244e:	aa06      	add	r2, sp, #24
   12450:	9306      	str	r3, [sp, #24]
   12452:	f00b ff90 	bl	1e376 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   12456:	6820      	ldr	r0, [r4, #0]
   12458:	f00c f913 	bl	1e682 <att_req_send_process>
}
   1245c:	2000      	movs	r0, #0
   1245e:	b008      	add	sp, #32
   12460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12464:	4b13      	ldr	r3, [pc, #76]	; (124b4 <att_handle_rsp+0x8c>)
   12466:	f04f 0800 	mov.w	r8, #0
   1246a:	4298      	cmp	r0, r3
   1246c:	d102      	bne.n	12474 <att_handle_rsp+0x4c>
		chan->req = NULL;
   1246e:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   12472:	e7f0      	b.n	12456 <att_handle_rsp+0x2e>
	func = chan->req->func;
   12474:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   12478:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1247c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   12480:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   12484:	f7ff ffb8 	bl	123f8 <bt_att_req_free>
	att_req_send_process(chan->att);
   12488:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1248a:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   1248e:	f00c f8f8 	bl	1e682 <att_req_send_process>
	if (func) {
   12492:	f1b9 0f00 	cmp.w	r9, #0
   12496:	d0e1      	beq.n	1245c <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   12498:	6820      	ldr	r0, [r4, #0]
   1249a:	f8cd a000 	str.w	sl, [sp]
   1249e:	463b      	mov	r3, r7
   124a0:	4632      	mov	r2, r6
   124a2:	4629      	mov	r1, r5
   124a4:	6800      	ldr	r0, [r0, #0]
   124a6:	47c8      	blx	r9
   124a8:	e7d8      	b.n	1245c <att_handle_rsp+0x34>
   124aa:	bf00      	nop
   124ac:	000238c0 	.word	0x000238c0
   124b0:	00020814 	.word	0x00020814
   124b4:	2000992c 	.word	0x2000992c

000124b8 <bt_att_disconnected>:
{
   124b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   124bc:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   124c0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   124c2:	2e00      	cmp	r6, #0
   124c4:	d056      	beq.n	12574 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   124c6:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   124ca:	f106 0028 	add.w	r0, r6, #40	; 0x28
   124ce:	f00c f821 	bl	1e514 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   124d2:	1f27      	subs	r7, r4, #4
   124d4:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   124d8:	2200      	movs	r2, #0
   124da:	2300      	movs	r3, #0
   124dc:	4640      	mov	r0, r8
   124de:	f001 f9c1 	bl	13864 <net_buf_get>
   124e2:	4605      	mov	r5, r0
   124e4:	bb28      	cbnz	r0, 12532 <bt_att_disconnected+0x7a>
	if (chan->req) {
   124e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   124ea:	b12b      	cbz	r3, 124f8 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   124ec:	4602      	mov	r2, r0
   124ee:	4601      	mov	r1, r0
   124f0:	230e      	movs	r3, #14
   124f2:	4638      	mov	r0, r7
   124f4:	f7ff ff98 	bl	12428 <att_handle_rsp>
	chan->att = NULL;
   124f8:	2300      	movs	r3, #0
   124fa:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   124fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12500:	2b00      	cmp	r3, #0
   12502:	d137      	bne.n	12574 <bt_att_disconnected+0xbc>
	att_reset(att);
   12504:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12506:	9803      	ldr	r0, [sp, #12]
   12508:	2200      	movs	r2, #0
   1250a:	2300      	movs	r3, #0
   1250c:	300c      	adds	r0, #12
   1250e:	f001 f9a9 	bl	13864 <net_buf_get>
   12512:	4605      	mov	r5, r0
   12514:	b9a0      	cbnz	r0, 12540 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   12516:	9803      	ldr	r0, [sp, #12]
	return list->head;
   12518:	6845      	ldr	r5, [r0, #4]
   1251a:	b9c5      	cbnz	r5, 1254e <bt_att_disconnected+0x96>
	att->conn = NULL;
   1251c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1251e:	a903      	add	r1, sp, #12
   12520:	4816      	ldr	r0, [pc, #88]	; (1257c <bt_att_disconnected+0xc4>)
   12522:	f006 fb7b 	bl	18c1c <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   12526:	6820      	ldr	r0, [r4, #0]
}
   12528:	b004      	add	sp, #16
   1252a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1252e:	f001 b827 	b.w	13580 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   12532:	6968      	ldr	r0, [r5, #20]
   12534:	f7fe ffc8 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(buf);
   12538:	4628      	mov	r0, r5
   1253a:	f001 fb05 	bl	13b48 <net_buf_unref>
   1253e:	e7cb      	b.n	124d8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   12540:	6968      	ldr	r0, [r5, #20]
   12542:	f7fe ffc1 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(buf);
   12546:	4628      	mov	r0, r5
   12548:	f001 fafe 	bl	13b48 <net_buf_unref>
   1254c:	e7db      	b.n	12506 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1254e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   12550:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12552:	4295      	cmp	r5, r2
	list->head = node;
   12554:	6043      	str	r3, [r0, #4]
	list->tail = node;
   12556:	bf08      	it	eq
   12558:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1255a:	686e      	ldr	r6, [r5, #4]
   1255c:	b136      	cbz	r6, 1256c <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1255e:	68eb      	ldr	r3, [r5, #12]
   12560:	210e      	movs	r1, #14
   12562:	9300      	str	r3, [sp, #0]
   12564:	2300      	movs	r3, #0
   12566:	6800      	ldr	r0, [r0, #0]
   12568:	461a      	mov	r2, r3
   1256a:	47b0      	blx	r6
		bt_att_req_free(req);
   1256c:	4628      	mov	r0, r5
   1256e:	f7ff ff43 	bl	123f8 <bt_att_req_free>
   12572:	e7d0      	b.n	12516 <bt_att_disconnected+0x5e>
}
   12574:	b004      	add	sp, #16
   12576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1257a:	bf00      	nop
   1257c:	20008550 	.word	0x20008550

00012580 <att_timeout>:
{
   12580:	b510      	push	{r4, lr}
   12582:	4604      	mov	r4, r0
   12584:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   12586:	4b08      	ldr	r3, [pc, #32]	; (125a8 <att_timeout+0x28>)
   12588:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1258c:	9305      	str	r3, [sp, #20]
   1258e:	2302      	movs	r3, #2
   12590:	4806      	ldr	r0, [pc, #24]	; (125ac <att_timeout+0x2c>)
   12592:	aa04      	add	r2, sp, #16
   12594:	9304      	str	r3, [sp, #16]
   12596:	f00b feee 	bl	1e376 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1259a:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   1259e:	b006      	add	sp, #24
   125a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   125a4:	f7ff bf88 	b.w	124b8 <bt_att_disconnected>
   125a8:	000238d7 	.word	0x000238d7
   125ac:	00020814 	.word	0x00020814

000125b0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   125b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125b2:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   125b4:	b958      	cbnz	r0, 125ce <bt_att_send+0x1e>
   125b6:	4929      	ldr	r1, [pc, #164]	; (1265c <bt_att_send+0xac>)
   125b8:	f640 63a8 	movw	r3, #3752	; 0xea8
   125bc:	4a28      	ldr	r2, [pc, #160]	; (12660 <bt_att_send+0xb0>)
   125be:	4829      	ldr	r0, [pc, #164]	; (12664 <bt_att_send+0xb4>)
   125c0:	f00a fa93 	bl	1caea <assert_print>
   125c4:	f640 61a8 	movw	r1, #3752	; 0xea8
	__ASSERT_NO_MSG(buf);
   125c8:	4825      	ldr	r0, [pc, #148]	; (12660 <bt_att_send+0xb0>)
   125ca:	f00a fa87 	bl	1cadc <assert_post_action>
   125ce:	b949      	cbnz	r1, 125e4 <bt_att_send+0x34>
   125d0:	4925      	ldr	r1, [pc, #148]	; (12668 <bt_att_send+0xb8>)
   125d2:	f640 63a9 	movw	r3, #3753	; 0xea9
   125d6:	4a22      	ldr	r2, [pc, #136]	; (12660 <bt_att_send+0xb0>)
   125d8:	4822      	ldr	r0, [pc, #136]	; (12664 <bt_att_send+0xb4>)
   125da:	f00a fa86 	bl	1caea <assert_print>
   125de:	f640 61a9 	movw	r1, #3753	; 0xea9
   125e2:	e7f1      	b.n	125c8 <bt_att_send+0x18>

	att = att_get(conn);
   125e4:	f7ff f906 	bl	117f4 <att_get>
	if (!att) {
   125e8:	4605      	mov	r5, r0
   125ea:	b940      	cbnz	r0, 125fe <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   125ec:	6960      	ldr	r0, [r4, #20]
   125ee:	f7fe ff6b 	bl	114c8 <tx_meta_data_free>
		net_buf_unref(buf);
   125f2:	4620      	mov	r0, r4
   125f4:	f001 faa8 	bl	13b48 <net_buf_unref>
		return -ENOTCONN;
   125f8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   125fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   125fe:	f100 060c 	add.w	r6, r0, #12
   12602:	4621      	mov	r1, r4
   12604:	4630      	mov	r0, r6
   12606:	f001 fa6f 	bl	13ae8 <net_buf_put>
	return list->head;
   1260a:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1260c:	b14d      	cbz	r5, 12622 <bt_att_send+0x72>
	return node->next;
   1260e:	f855 49f0 	ldr.w	r4, [r5], #-240
   12612:	b104      	cbz	r4, 12616 <bt_att_send+0x66>
   12614:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   12616:	4631      	mov	r1, r6
   12618:	4628      	mov	r0, r5
   1261a:	f00b fec9 	bl	1e3b0 <process_queue>
		if (!err) {
   1261e:	4603      	mov	r3, r0
   12620:	b980      	cbnz	r0, 12644 <bt_att_send+0x94>
	return 0;
   12622:	2000      	movs	r0, #0
   12624:	e7ea      	b.n	125fc <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   12626:	2103      	movs	r1, #3
   12628:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1262c:	f00b fdd2 	bl	1e1d4 <atomic_test_bit>
   12630:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   12632:	f105 0098 	add.w	r0, r5, #152	; 0x98
   12636:	f00b fdcd 	bl	1e1d4 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1263a:	4287      	cmp	r7, r0
   1263c:	f06f 0301 	mvn.w	r3, #1
   12640:	d107      	bne.n	12652 <bt_att_send+0xa2>
   12642:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12644:	2c00      	cmp	r4, #0
   12646:	d0ec      	beq.n	12622 <bt_att_send+0x72>
   12648:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   1264c:	b922      	cbnz	r2, 12658 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   1264e:	3302      	adds	r3, #2
   12650:	d0e9      	beq.n	12626 <bt_att_send+0x76>
{
   12652:	4625      	mov	r5, r4
   12654:	4614      	mov	r4, r2
   12656:	e7de      	b.n	12616 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12658:	3af0      	subs	r2, #240	; 0xf0
   1265a:	e7f8      	b.n	1264e <bt_att_send+0x9e>
   1265c:	00022d7b 	.word	0x00022d7b
   12660:	00023660 	.word	0x00023660
   12664:	00021547 	.word	0x00021547
   12668:	00022980 	.word	0x00022980

0001266c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1266c:	b510      	push	{r4, lr}
   1266e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   12670:	b958      	cbnz	r0, 1268a <bt_att_req_send+0x1e>
   12672:	4915      	ldr	r1, [pc, #84]	; (126c8 <bt_att_req_send+0x5c>)
   12674:	f640 63be 	movw	r3, #3774	; 0xebe
   12678:	4a14      	ldr	r2, [pc, #80]	; (126cc <bt_att_req_send+0x60>)
   1267a:	4815      	ldr	r0, [pc, #84]	; (126d0 <bt_att_req_send+0x64>)
   1267c:	f00a fa35 	bl	1caea <assert_print>
   12680:	f640 61be 	movw	r1, #3774	; 0xebe
	__ASSERT_NO_MSG(req);
   12684:	4811      	ldr	r0, [pc, #68]	; (126cc <bt_att_req_send+0x60>)
   12686:	f00a fa29 	bl	1cadc <assert_post_action>
   1268a:	b949      	cbnz	r1, 126a0 <bt_att_req_send+0x34>
   1268c:	4911      	ldr	r1, [pc, #68]	; (126d4 <bt_att_req_send+0x68>)
   1268e:	f640 63bf 	movw	r3, #3775	; 0xebf
   12692:	4a0e      	ldr	r2, [pc, #56]	; (126cc <bt_att_req_send+0x60>)
   12694:	480e      	ldr	r0, [pc, #56]	; (126d0 <bt_att_req_send+0x64>)
   12696:	f00a fa28 	bl	1caea <assert_print>
   1269a:	f640 61bf 	movw	r1, #3775	; 0xebf
   1269e:	e7f1      	b.n	12684 <bt_att_req_send+0x18>

	att = att_get(conn);
   126a0:	f7ff f8a8 	bl	117f4 <att_get>
	if (!att) {
   126a4:	b160      	cbz	r0, 126c0 <bt_att_req_send+0x54>
	parent->next = child;
   126a6:	2300      	movs	r3, #0
   126a8:	6023      	str	r3, [r4, #0]
	return list->tail;
   126aa:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   126ac:	b92b      	cbnz	r3, 126ba <bt_att_req_send+0x4e>
	list->head = node;
   126ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   126b2:	f00b ffe6 	bl	1e682 <att_req_send_process>

	return 0;
   126b6:	2000      	movs	r0, #0
}
   126b8:	bd10      	pop	{r4, pc}
	parent->next = child;
   126ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   126bc:	6084      	str	r4, [r0, #8]
}
   126be:	e7f8      	b.n	126b2 <bt_att_req_send+0x46>
		return -ENOTCONN;
   126c0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   126c4:	e7f8      	b.n	126b8 <bt_att_req_send+0x4c>
   126c6:	bf00      	nop
   126c8:	00022d7b 	.word	0x00022d7b
   126cc:	00023660 	.word	0x00023660
   126d0:	00021547 	.word	0x00021547
   126d4:	0002370f 	.word	0x0002370f

000126d8 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   126d8:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   126da:	b930      	cbnz	r0, 126ea <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   126dc:	4907      	ldr	r1, [pc, #28]	; (126fc <find_cf_cfg+0x24>)
   126de:	4808      	ldr	r0, [pc, #32]	; (12700 <find_cf_cfg+0x28>)
   126e0:	f00c f9c5 	bl	1ea6e <bt_addr_le_eq>
   126e4:	b138      	cbz	r0, 126f6 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   126e6:	4807      	ldr	r0, [pc, #28]	; (12704 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   126e8:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   126ea:	4a05      	ldr	r2, [pc, #20]	; (12700 <find_cf_cfg+0x28>)
   126ec:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   126f0:	f00b fc91 	bl	1e016 <bt_conn_is_peer_addr_le>
   126f4:	e7f6      	b.n	126e4 <find_cf_cfg+0xc>
	return NULL;
   126f6:	2000      	movs	r0, #0
   126f8:	e7f6      	b.n	126e8 <find_cf_cfg+0x10>
   126fa:	bf00      	nop
   126fc:	00022866 	.word	0x00022866
   12700:	20009955 	.word	0x20009955
   12704:	20009954 	.word	0x20009954

00012708 <find_sc_cfg>:
{
   12708:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1270a:	4c06      	ldr	r4, [pc, #24]	; (12724 <find_sc_cfg+0x1c>)
   1270c:	7823      	ldrb	r3, [r4, #0]
   1270e:	4283      	cmp	r3, r0
   12710:	d103      	bne.n	1271a <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   12712:	1c60      	adds	r0, r4, #1
   12714:	f00c f9ab 	bl	1ea6e <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   12718:	b908      	cbnz	r0, 1271e <find_sc_cfg+0x16>
	return NULL;
   1271a:	2000      	movs	r0, #0
}
   1271c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1271e:	4620      	mov	r0, r4
   12720:	e7fc      	b.n	1271c <find_sc_cfg+0x14>
   12722:	bf00      	nop
   12724:	20009c5a 	.word	0x20009c5a

00012728 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   12728:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1272a:	1c4a      	adds	r2, r1, #1
{
   1272c:	460c      	mov	r4, r1
		if (conn) {
   1272e:	b138      	cbz	r0, 12740 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   12730:	7809      	ldrb	r1, [r1, #0]
   12732:	f00b fc70 	bl	1e016 <bt_conn_is_peer_addr_le>
   12736:	b108      	cbz	r0, 1273c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   12738:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   1273a:	bd10      	pop	{r4, pc}
	return NULL;
   1273c:	2000      	movs	r0, #0
   1273e:	e7fc      	b.n	1273a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   12740:	4610      	mov	r0, r2
   12742:	4902      	ldr	r1, [pc, #8]	; (1274c <find_ccc_cfg+0x24>)
   12744:	f00c f993 	bl	1ea6e <bt_addr_le_eq>
   12748:	e7f5      	b.n	12736 <find_ccc_cfg+0xe>
   1274a:	bf00      	nop
   1274c:	00022866 	.word	0x00022866

00012750 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   12750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12754:	b087      	sub	sp, #28
   12756:	461e      	mov	r6, r3
   12758:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1275c:	4681      	mov	r9, r0
   1275e:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   12760:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   12764:	2b00      	cmp	r3, #0
   12766:	d14b      	bne.n	12800 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   12768:	1e73      	subs	r3, r6, #1
   1276a:	2b01      	cmp	r3, #1
   1276c:	d84b      	bhi.n	12806 <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1276e:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   12770:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   12772:	7815      	ldrb	r5, [r2, #0]
   12774:	bf18      	it	ne
   12776:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   12778:	f7ff ffd6 	bl	12728 <find_ccc_cfg>
	if (!cfg) {
   1277c:	4604      	mov	r4, r0
   1277e:	b9f0      	cbnz	r0, 127be <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   12780:	b91d      	cbnz	r5, 1278a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   12782:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   12784:	b007      	add	sp, #28
   12786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1278a:	4641      	mov	r1, r8
   1278c:	f7ff ffcc 	bl	12728 <find_ccc_cfg>
		if (!cfg) {
   12790:	4604      	mov	r4, r0
   12792:	b960      	cbnz	r0, 127ae <bt_gatt_attr_write_ccc+0x5e>
			BT_WARN("No space to store CCC cfg");
   12794:	4b1d      	ldr	r3, [pc, #116]	; (1280c <bt_gatt_attr_write_ccc+0xbc>)
   12796:	481e      	ldr	r0, [pc, #120]	; (12810 <bt_gatt_attr_write_ccc+0xc0>)
   12798:	9305      	str	r3, [sp, #20]
   1279a:	2302      	movs	r3, #2
   1279c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   127a0:	aa04      	add	r2, sp, #16
   127a2:	9304      	str	r3, [sp, #16]
   127a4:	f00c f96e 	bl	1ea84 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   127a8:	f06f 0010 	mvn.w	r0, #16
   127ac:	e7ea      	b.n	12784 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   127ae:	f109 0190 	add.w	r1, r9, #144	; 0x90
   127b2:	3001      	adds	r0, #1
   127b4:	f00c f963 	bl	1ea7e <bt_addr_le_copy>
		cfg->id = conn->id;
   127b8:	f899 3008 	ldrb.w	r3, [r9, #8]
   127bc:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   127be:	f8d8 3010 	ldr.w	r3, [r8, #16]
   127c2:	b98b      	cbnz	r3, 127e8 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   127c4:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   127c6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   127ca:	42ab      	cmp	r3, r5
   127cc:	d003      	beq.n	127d6 <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   127ce:	4641      	mov	r1, r8
   127d0:	4638      	mov	r0, r7
   127d2:	f00c f8d8 	bl	1e986 <gatt_ccc_changed>
	if (!value) {
   127d6:	2d00      	cmp	r5, #0
   127d8:	d1d3      	bne.n	12782 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   127da:	490e      	ldr	r1, [pc, #56]	; (12814 <bt_gatt_attr_write_ccc+0xc4>)
   127dc:	1c60      	adds	r0, r4, #1
   127de:	f00c f94e 	bl	1ea7e <bt_addr_le_copy>
	cfg->id = 0U;
   127e2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   127e4:	8125      	strh	r5, [r4, #8]
}
   127e6:	e7cc      	b.n	12782 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   127e8:	462a      	mov	r2, r5
   127ea:	4639      	mov	r1, r7
   127ec:	4648      	mov	r0, r9
   127ee:	4798      	blx	r3
		if (write < 0) {
   127f0:	2800      	cmp	r0, #0
   127f2:	dbc7      	blt.n	12784 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   127f4:	3801      	subs	r0, #1
   127f6:	2801      	cmp	r0, #1
   127f8:	d9e4      	bls.n	127c4 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   127fa:	f06f 000d 	mvn.w	r0, #13
   127fe:	e7c1      	b.n	12784 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12800:	f06f 0006 	mvn.w	r0, #6
   12804:	e7be      	b.n	12784 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12806:	f06f 000c 	mvn.w	r0, #12
   1280a:	e7bb      	b.n	12784 <bt_gatt_attr_write_ccc+0x34>
   1280c:	000238ea 	.word	0x000238ea
   12810:	00020834 	.word	0x00020834
   12814:	00022866 	.word	0x00022866

00012818 <clear_cf_cfg>:
{
   12818:	b510      	push	{r4, lr}
   1281a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1281c:	4909      	ldr	r1, [pc, #36]	; (12844 <clear_cf_cfg+0x2c>)
   1281e:	3001      	adds	r0, #1
   12820:	f00c f92d 	bl	1ea7e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   12824:	f104 0008 	add.w	r0, r4, #8
   12828:	2201      	movs	r2, #1
   1282a:	2100      	movs	r1, #0
   1282c:	f00b f977 	bl	1db1e <memset>
   12830:	2300      	movs	r3, #0
   12832:	340c      	adds	r4, #12
   12834:	e8d4 2fef 	ldaex	r2, [r4]
   12838:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1283c:	2900      	cmp	r1, #0
   1283e:	d1f9      	bne.n	12834 <clear_cf_cfg+0x1c>
}
   12840:	bd10      	pop	{r4, pc}
   12842:	bf00      	nop
   12844:	00022866 	.word	0x00022866

00012848 <sc_save>:
{
   12848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1284c:	b086      	sub	sp, #24
   1284e:	4680      	mov	r8, r0
   12850:	460f      	mov	r7, r1
   12852:	4616      	mov	r6, r2
   12854:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   12856:	f7ff ff57 	bl	12708 <find_sc_cfg>
	if (!cfg) {
   1285a:	4604      	mov	r4, r0
   1285c:	b9b0      	cbnz	r0, 1288c <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1285e:	4912      	ldr	r1, [pc, #72]	; (128a8 <sc_save+0x60>)
   12860:	f7ff ff52 	bl	12708 <find_sc_cfg>
		if (!cfg) {
   12864:	4604      	mov	r4, r0
   12866:	b960      	cbnz	r0, 12882 <sc_save+0x3a>
			BT_ERR("unable to save SC: no cfg left");
   12868:	4b10      	ldr	r3, [pc, #64]	; (128ac <sc_save+0x64>)
   1286a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1286e:	9305      	str	r3, [sp, #20]
   12870:	2302      	movs	r3, #2
   12872:	480f      	ldr	r0, [pc, #60]	; (128b0 <sc_save+0x68>)
   12874:	aa04      	add	r2, sp, #16
   12876:	9304      	str	r3, [sp, #16]
   12878:	f00c f904 	bl	1ea84 <z_log_msg_static_create.constprop.0>
}
   1287c:	b006      	add	sp, #24
   1287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   12882:	4639      	mov	r1, r7
		cfg->id = id;
   12884:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   12888:	f00c f8f9 	bl	1ea7e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1288c:	8922      	ldrh	r2, [r4, #8]
   1288e:	8963      	ldrh	r3, [r4, #10]
   12890:	b91a      	cbnz	r2, 1289a <sc_save+0x52>
   12892:	b92b      	cbnz	r3, 128a0 <sc_save+0x58>
		cfg->data.start = start;
   12894:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   12896:	8165      	strh	r5, [r4, #10]
   12898:	e7f0      	b.n	1287c <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   1289a:	4296      	cmp	r6, r2
		*start = new_start;
   1289c:	bf38      	it	cc
   1289e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   128a0:	429d      	cmp	r5, r3
   128a2:	d9eb      	bls.n	1287c <sc_save+0x34>
   128a4:	e7f7      	b.n	12896 <sc_save+0x4e>
   128a6:	bf00      	nop
   128a8:	00022866 	.word	0x00022866
   128ac:	00023904 	.word	0x00023904
   128b0:	00020834 	.word	0x00020834

000128b4 <cf_write>:
{
   128b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128b8:	b086      	sub	sp, #24
   128ba:	461f      	mov	r7, r3
   128bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   128c0:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   128c2:	2b01      	cmp	r3, #1
{
   128c4:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   128c6:	d83c      	bhi.n	12942 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   128c8:	443b      	add	r3, r7
   128ca:	2b01      	cmp	r3, #1
   128cc:	463d      	mov	r5, r7
   128ce:	dc3b      	bgt.n	12948 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   128d0:	f7ff ff02 	bl	126d8 <find_cf_cfg>
	if (!cfg) {
   128d4:	4604      	mov	r4, r0
   128d6:	b998      	cbnz	r0, 12900 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   128d8:	f7ff fefe 	bl	126d8 <find_cf_cfg>
	if (!cfg) {
   128dc:	4604      	mov	r4, r0
   128de:	b978      	cbnz	r0, 12900 <cf_write+0x4c>
		BT_WARN("No space to store Client Supported Features");
   128e0:	4b1c      	ldr	r3, [pc, #112]	; (12954 <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   128e2:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   128e6:	9305      	str	r3, [sp, #20]
   128e8:	2302      	movs	r3, #2
   128ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   128ee:	481a      	ldr	r0, [pc, #104]	; (12958 <cf_write+0xa4>)
   128f0:	aa04      	add	r2, sp, #16
   128f2:	9304      	str	r3, [sp, #16]
   128f4:	f00c f8c6 	bl	1ea84 <z_log_msg_static_create.constprop.0>
}
   128f8:	4628      	mov	r0, r5
   128fa:	b006      	add	sp, #24
   128fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   12900:	b197      	cbz	r7, 12928 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   12902:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   12904:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   12906:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1290a:	fa21 f003 	lsr.w	r0, r1, r3
   1290e:	07c7      	lsls	r7, r0, #31
   12910:	d503      	bpl.n	1291a <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   12912:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   12916:	07c0      	lsls	r0, r0, #31
   12918:	d519      	bpl.n	1294e <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1291a:	3301      	adds	r3, #1
   1291c:	2b03      	cmp	r3, #3
   1291e:	d1f4      	bne.n	1290a <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   12920:	f002 0207 	and.w	r2, r2, #7
   12924:	4311      	orrs	r1, r2
   12926:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12928:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1292c:	1c60      	adds	r0, r4, #1
   1292e:	f00c f8a6 	bl	1ea7e <bt_addr_le_copy>
	cfg->id = conn->id;
   12932:	4620      	mov	r0, r4
   12934:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   12936:	2100      	movs	r1, #0
	cfg->id = conn->id;
   12938:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1293c:	f00c f8a5 	bl	1ea8a <atomic_set_bit>
	return len;
   12940:	e7da      	b.n	128f8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12942:	f06f 0506 	mvn.w	r5, #6
   12946:	e7d7      	b.n	128f8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12948:	f06f 050c 	mvn.w	r5, #12
   1294c:	e7d4      	b.n	128f8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1294e:	f06f 0512 	mvn.w	r5, #18
   12952:	e7d1      	b.n	128f8 <cf_write+0x44>
   12954:	00023923 	.word	0x00023923
   12958:	00020834 	.word	0x00020834

0001295c <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12960:	4b23      	ldr	r3, [pc, #140]	; (129f0 <disconnected_cb+0x94>)
{
   12962:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12964:	6882      	ldr	r2, [r0, #8]
{
   12966:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12968:	429a      	cmp	r2, r3
   1296a:	d102      	bne.n	12972 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1296c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1296e:	8963      	ldrh	r3, [r4, #10]
   12970:	bb33      	cbnz	r3, 129c0 <disconnected_cb+0x64>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   12972:	2001      	movs	r0, #1
   12974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   12978:	f7fd ffa2 	bl	108c0 <bt_conn_unref>
		ccc->value = 0U;
   1297c:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1297e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   12980:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   12982:	2b00      	cmp	r3, #0
   12984:	d0f5      	beq.n	12972 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   12986:	4638      	mov	r0, r7
   12988:	4798      	blx	r3
   1298a:	e7f2      	b.n	12972 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1298c:	f105 0890 	add.w	r8, r5, #144	; 0x90
   12990:	4641      	mov	r1, r8
   12992:	7a28      	ldrb	r0, [r5, #8]
   12994:	f00b f9f4 	bl	1dd80 <bt_addr_le_is_bonded>
   12998:	b968      	cbnz	r0, 129b6 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1299a:	4b16      	ldr	r3, [pc, #88]	; (129f4 <disconnected_cb+0x98>)
   1299c:	429c      	cmp	r4, r3
   1299e:	d102      	bne.n	129a6 <disconnected_cb+0x4a>
					sc_clear(conn);
   129a0:	4628      	mov	r0, r5
   129a2:	f00c f89c 	bl	1eade <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   129a6:	4630      	mov	r0, r6
   129a8:	4913      	ldr	r1, [pc, #76]	; (129f8 <disconnected_cb+0x9c>)
   129aa:	f00c f868 	bl	1ea7e <bt_addr_le_copy>
	cfg->id = 0U;
   129ae:	2300      	movs	r3, #0
   129b0:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   129b2:	8123      	strh	r3, [r4, #8]
}
   129b4:	e7e2      	b.n	1297c <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   129b6:	4641      	mov	r1, r8
   129b8:	4630      	mov	r0, r6
   129ba:	f00c f860 	bl	1ea7e <bt_addr_le_copy>
   129be:	e7dd      	b.n	1297c <disconnected_cb+0x20>
		if (!cfg->value) {
   129c0:	8923      	ldrh	r3, [r4, #8]
   129c2:	2b00      	cmp	r3, #0
   129c4:	d0da      	beq.n	1297c <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   129c6:	4626      	mov	r6, r4
   129c8:	f816 1b01 	ldrb.w	r1, [r6], #1
   129cc:	4628      	mov	r0, r5
   129ce:	4632      	mov	r2, r6
   129d0:	f00b fb21 	bl	1e016 <bt_conn_is_peer_addr_le>
   129d4:	2800      	cmp	r0, #0
   129d6:	d1d9      	bne.n	1298c <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   129d8:	4631      	mov	r1, r6
   129da:	7820      	ldrb	r0, [r4, #0]
   129dc:	f7fe f9cc 	bl	10d78 <bt_conn_lookup_addr_le>
			if (tmp) {
   129e0:	2800      	cmp	r0, #0
   129e2:	d0cb      	beq.n	1297c <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   129e4:	7a83      	ldrb	r3, [r0, #10]
   129e6:	2b07      	cmp	r3, #7
   129e8:	d1c6      	bne.n	12978 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   129ea:	f7fd ff69 	bl	108c0 <bt_conn_unref>
	if (!value_used) {
   129ee:	e7c0      	b.n	12972 <disconnected_cb+0x16>
   129f0:	00012751 	.word	0x00012751
   129f4:	20008264 	.word	0x20008264
   129f8:	00022866 	.word	0x00022866

000129fc <read_ppcp>:
{
   129fc:	b513      	push	{r0, r1, r4, lr}
   129fe:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12a00:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   12a04:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12a08:	4c09      	ldr	r4, [pc, #36]	; (12a30 <read_ppcp+0x34>)
	if (offset > value_len) {
   12a0a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   12a0c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   12a10:	d80b      	bhi.n	12a2a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   12a12:	f1c1 0408 	rsb	r4, r1, #8
   12a16:	429c      	cmp	r4, r3
   12a18:	bfa8      	it	ge
   12a1a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   12a1c:	4469      	add	r1, sp
   12a1e:	4622      	mov	r2, r4
   12a20:	f00b f872 	bl	1db08 <memcpy>
}
   12a24:	4620      	mov	r0, r4
   12a26:	b002      	add	sp, #8
   12a28:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12a2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   12a2e:	e7f9      	b.n	12a24 <read_ppcp+0x28>
   12a30:	00280018 	.word	0x00280018

00012a34 <sc_indicate_rsp>:
{
   12a34:	b510      	push	{r4, lr}
   12a36:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12a38:	4811      	ldr	r0, [pc, #68]	; (12a80 <sc_indicate_rsp+0x4c>)
   12a3a:	e8d0 3fef 	ldaex	r3, [r0]
   12a3e:	f023 0302 	bic.w	r3, r3, #2
   12a42:	e8c0 3fe2 	stlex	r2, r3, [r0]
   12a46:	2a00      	cmp	r2, #0
   12a48:	d1f7      	bne.n	12a3a <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12a4a:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12a4e:	07da      	lsls	r2, r3, #31
   12a50:	d504      	bpl.n	12a5c <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   12a52:	2200      	movs	r2, #0
   12a54:	2300      	movs	r3, #0
   12a56:	3830      	subs	r0, #48	; 0x30
   12a58:	f007 fb16 	bl	1a088 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   12a5c:	4620      	mov	r0, r4
   12a5e:	f00b ff65 	bl	1e92c <bt_att_fixed_chan_only>
   12a62:	b160      	cbz	r0, 12a7e <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   12a64:	4620      	mov	r0, r4
   12a66:	f7ff fe37 	bl	126d8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   12a6a:	b140      	cbz	r0, 12a7e <sc_indicate_rsp+0x4a>
   12a6c:	7a03      	ldrb	r3, [r0, #8]
   12a6e:	07db      	lsls	r3, r3, #31
   12a70:	d505      	bpl.n	12a7e <sc_indicate_rsp+0x4a>
}
   12a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   12a76:	2100      	movs	r1, #0
   12a78:	300c      	adds	r0, #12
   12a7a:	f00c b806 	b.w	1ea8a <atomic_set_bit>
}
   12a7e:	bd10      	pop	{r4, pc}
   12a80:	20009508 	.word	0x20009508

00012a84 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12a84:	2201      	movs	r2, #1
{
   12a86:	b510      	push	{r4, lr}
   12a88:	4b24      	ldr	r3, [pc, #144]	; (12b1c <bt_gatt_init+0x98>)
   12a8a:	e8d3 1fef 	ldaex	r1, [r3]
   12a8e:	2900      	cmp	r1, #0
   12a90:	d103      	bne.n	12a9a <bt_gatt_init+0x16>
   12a92:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12a96:	2800      	cmp	r0, #0
   12a98:	d1f7      	bne.n	12a8a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   12a9a:	d13e      	bne.n	12b1a <bt_gatt_init+0x96>
   12a9c:	4b20      	ldr	r3, [pc, #128]	; (12b20 <bt_gatt_init+0x9c>)
   12a9e:	e8d3 1fef 	ldaex	r1, [r3]
   12aa2:	2900      	cmp	r1, #0
   12aa4:	d103      	bne.n	12aae <bt_gatt_init+0x2a>
   12aa6:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12aaa:	2800      	cmp	r0, #0
   12aac:	d1f7      	bne.n	12a9e <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   12aae:	d120      	bne.n	12af2 <bt_gatt_init+0x6e>
   12ab0:	2000      	movs	r0, #0
   12ab2:	491c      	ldr	r1, [pc, #112]	; (12b24 <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12ab4:	4a1c      	ldr	r2, [pc, #112]	; (12b28 <bt_gatt_init+0xa4>)
   12ab6:	880b      	ldrh	r3, [r1, #0]
   12ab8:	4c1c      	ldr	r4, [pc, #112]	; (12b2c <bt_gatt_init+0xa8>)
   12aba:	42a2      	cmp	r2, r4
   12abc:	d916      	bls.n	12aec <bt_gatt_init+0x68>
   12abe:	b100      	cbz	r0, 12ac2 <bt_gatt_init+0x3e>
   12ac0:	800b      	strh	r3, [r1, #0]
   12ac2:	491b      	ldr	r1, [pc, #108]	; (12b30 <bt_gatt_init+0xac>)
   12ac4:	f240 530e 	movw	r3, #1294	; 0x50e
   12ac8:	4a1a      	ldr	r2, [pc, #104]	; (12b34 <bt_gatt_init+0xb0>)
   12aca:	481b      	ldr	r0, [pc, #108]	; (12b38 <bt_gatt_init+0xb4>)
   12acc:	f00a f80d 	bl	1caea <assert_print>
   12ad0:	481a      	ldr	r0, [pc, #104]	; (12b3c <bt_gatt_init+0xb8>)
   12ad2:	f00a f80a 	bl	1caea <assert_print>
   12ad6:	f240 510e 	movw	r1, #1294	; 0x50e
   12ada:	4816      	ldr	r0, [pc, #88]	; (12b34 <bt_gatt_init+0xb0>)
   12adc:	f009 fffe 	bl	1cadc <assert_post_action>
		last_static_handle += svc->attr_count;
   12ae0:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12ae2:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   12ae4:	4403      	add	r3, r0
   12ae6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12ae8:	2001      	movs	r0, #1
   12aea:	e7e6      	b.n	12aba <bt_gatt_init+0x36>
   12aec:	d3f8      	bcc.n	12ae0 <bt_gatt_init+0x5c>
   12aee:	b100      	cbz	r0, 12af2 <bt_gatt_init+0x6e>
   12af0:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   12af2:	2200      	movs	r2, #0
   12af4:	4b12      	ldr	r3, [pc, #72]	; (12b40 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   12af6:	4913      	ldr	r1, [pc, #76]	; (12b44 <bt_gatt_init+0xc0>)
   12af8:	4813      	ldr	r0, [pc, #76]	; (12b48 <bt_gatt_init+0xc4>)
	list->tail = NULL;
   12afa:	e9c3 2200 	strd	r2, r2, [r3]
   12afe:	f007 f9a7 	bl	19e50 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   12b02:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12b06:	2300      	movs	r3, #0
   12b08:	480f      	ldr	r0, [pc, #60]	; (12b48 <bt_gatt_init+0xc4>)
   12b0a:	f7fb f909 	bl	dd20 <bt_long_wq_schedule>
}
   12b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   12b12:	490e      	ldr	r1, [pc, #56]	; (12b4c <bt_gatt_init+0xc8>)
   12b14:	480e      	ldr	r0, [pc, #56]	; (12b50 <bt_gatt_init+0xcc>)
   12b16:	f007 b99b 	b.w	19e50 <k_work_init_delayable>
}
   12b1a:	bd10      	pop	{r4, pc}
   12b1c:	20009968 	.word	0x20009968
   12b20:	20009964 	.word	0x20009964
   12b24:	20009c66 	.word	0x20009c66
   12b28:	000207ec 	.word	0x000207ec
   12b2c:	00020804 	.word	0x00020804
   12b30:	00023986 	.word	0x00023986
   12b34:	0002394f 	.word	0x0002394f
   12b38:	00021547 	.word	0x00021547
   12b3c:	00021c6a 	.word	0x00021c6a
   12b40:	2000996c 	.word	0x2000996c
   12b44:	0001ed27 	.word	0x0001ed27
   12b48:	20009460 	.word	0x20009460
   12b4c:	000131c9 	.word	0x000131c9
   12b50:	200094d8 	.word	0x200094d8

00012b54 <bt_gatt_attr_get_handle>:
	if (!attr) {
   12b54:	4603      	mov	r3, r0
{
   12b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   12b5a:	b398      	cbz	r0, 12bc4 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   12b5c:	8a00      	ldrh	r0, [r0, #16]
   12b5e:	bb88      	cbnz	r0, 12bc4 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   12b60:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12b62:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12b66:	4919      	ldr	r1, [pc, #100]	; (12bcc <bt_gatt_attr_get_handle+0x78>)
   12b68:	f8df e064 	ldr.w	lr, [pc, #100]	; 12bd0 <bt_gatt_attr_get_handle+0x7c>
   12b6c:	4571      	cmp	r1, lr
   12b6e:	d928      	bls.n	12bc2 <bt_gatt_attr_get_handle+0x6e>
   12b70:	4918      	ldr	r1, [pc, #96]	; (12bd4 <bt_gatt_attr_get_handle+0x80>)
   12b72:	f240 6365 	movw	r3, #1637	; 0x665
   12b76:	4a18      	ldr	r2, [pc, #96]	; (12bd8 <bt_gatt_attr_get_handle+0x84>)
   12b78:	4818      	ldr	r0, [pc, #96]	; (12bdc <bt_gatt_attr_get_handle+0x88>)
   12b7a:	f009 ffb6 	bl	1caea <assert_print>
   12b7e:	4818      	ldr	r0, [pc, #96]	; (12be0 <bt_gatt_attr_get_handle+0x8c>)
   12b80:	f009 ffb3 	bl	1caea <assert_print>
   12b84:	f240 6165 	movw	r1, #1637	; 0x665
   12b88:	4813      	ldr	r0, [pc, #76]	; (12bd8 <bt_gatt_attr_get_handle+0x84>)
   12b8a:	f009 ffa7 	bl	1cadc <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12b8e:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   12b92:	42bb      	cmp	r3, r7
   12b94:	d304      	bcc.n	12ba0 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   12b96:	fb0c 7206 	mla	r2, ip, r6, r7
   12b9a:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   12b9c:	4293      	cmp	r3, r2
   12b9e:	d90e      	bls.n	12bbe <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   12ba0:	4434      	add	r4, r6
   12ba2:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12ba4:	4614      	mov	r4, r2
   12ba6:	3108      	adds	r1, #8
   12ba8:	e7e0      	b.n	12b6c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   12baa:	fb0c 7805 	mla	r8, ip, r5, r7
   12bae:	4543      	cmp	r3, r8
   12bb0:	d00a      	beq.n	12bc8 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   12bb2:	3501      	adds	r5, #1
   12bb4:	1962      	adds	r2, r4, r5
   12bb6:	42b5      	cmp	r5, r6
   12bb8:	b292      	uxth	r2, r2
   12bba:	d1f6      	bne.n	12baa <bt_gatt_attr_get_handle+0x56>
   12bbc:	e7f2      	b.n	12ba4 <bt_gatt_attr_get_handle+0x50>
   12bbe:	2500      	movs	r5, #0
   12bc0:	e7f8      	b.n	12bb4 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12bc2:	d3e4      	bcc.n	12b8e <bt_gatt_attr_get_handle+0x3a>
}
   12bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bc8:	4610      	mov	r0, r2
   12bca:	e7fb      	b.n	12bc4 <bt_gatt_attr_get_handle+0x70>
   12bcc:	000207ec 	.word	0x000207ec
   12bd0:	00020804 	.word	0x00020804
   12bd4:	0002397f 	.word	0x0002397f
   12bd8:	0002394f 	.word	0x0002394f
   12bdc:	00021547 	.word	0x00021547
   12be0:	00021c6a 	.word	0x00021c6a

00012be4 <bt_gatt_foreach_attr_type>:
{
   12be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be8:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   12bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   12bee:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   12bf2:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   12bf4:	2d00      	cmp	r5, #0
   12bf6:	bf08      	it	eq
   12bf8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   12bfa:	4b2b      	ldr	r3, [pc, #172]	; (12ca8 <bt_gatt_foreach_attr_type+0xc4>)
{
   12bfc:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   12bfe:	881b      	ldrh	r3, [r3, #0]
{
   12c00:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   12c02:	4283      	cmp	r3, r0
   12c04:	d232      	bcs.n	12c6c <bt_gatt_foreach_attr_type+0x88>
}
   12c06:	b003      	add	sp, #12
   12c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12c0c:	4640      	mov	r0, r8
   12c0e:	5889      	ldr	r1, [r1, r2]
   12c10:	9301      	str	r3, [sp, #4]
   12c12:	f00a ff90 	bl	1db36 <bt_uuid_cmp>
   12c16:	9b01      	ldr	r3, [sp, #4]
   12c18:	b190      	cbz	r0, 12c40 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12c1a:	3401      	adds	r4, #1
   12c1c:	f10a 0a01 	add.w	sl, sl, #1
   12c20:	b2a4      	uxth	r4, r4
   12c22:	6873      	ldr	r3, [r6, #4]
   12c24:	4553      	cmp	r3, sl
   12c26:	d92c      	bls.n	12c82 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   12c28:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12c2a:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   12c2c:	429c      	cmp	r4, r3
   12c2e:	d8ea      	bhi.n	12c06 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   12c30:	42bc      	cmp	r4, r7
   12c32:	d3f2      	bcc.n	12c1a <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12c34:	fb0b f20a 	mul.w	r2, fp, sl
   12c38:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   12c3a:	f1b8 0f00 	cmp.w	r8, #0
   12c3e:	d1e5      	bne.n	12c0c <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   12c40:	f1b9 0f00 	cmp.w	r9, #0
   12c44:	d10b      	bne.n	12c5e <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   12c46:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   12c48:	4618      	mov	r0, r3
	*num_matches -= 1;
   12c4a:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   12c4c:	4621      	mov	r1, r4
   12c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12c52:	4798      	blx	r3
	if (!*num_matches) {
   12c54:	2d00      	cmp	r5, #0
   12c56:	d0d6      	beq.n	12c06 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12c58:	2800      	cmp	r0, #0
   12c5a:	d1de      	bne.n	12c1a <bt_gatt_foreach_attr_type+0x36>
   12c5c:	e7d3      	b.n	12c06 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   12c5e:	68da      	ldr	r2, [r3, #12]
   12c60:	4591      	cmp	r9, r2
   12c62:	d1da      	bne.n	12c1a <bt_gatt_foreach_attr_type+0x36>
   12c64:	e7ef      	b.n	12c46 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   12c66:	f04f 0a00 	mov.w	sl, #0
   12c6a:	e7da      	b.n	12c22 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   12c6c:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   12c6e:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12c72:	4e0e      	ldr	r6, [pc, #56]	; (12cac <bt_gatt_foreach_attr_type+0xc8>)
   12c74:	e006      	b.n	12c84 <bt_gatt_foreach_attr_type+0xa0>
   12c76:	d2c6      	bcs.n	12c06 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   12c78:	6873      	ldr	r3, [r6, #4]
   12c7a:	4423      	add	r3, r4
   12c7c:	42bb      	cmp	r3, r7
   12c7e:	d2f2      	bcs.n	12c66 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   12c80:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   12c82:	3608      	adds	r6, #8
   12c84:	4b0a      	ldr	r3, [pc, #40]	; (12cb0 <bt_gatt_foreach_attr_type+0xcc>)
   12c86:	429e      	cmp	r6, r3
   12c88:	d9f5      	bls.n	12c76 <bt_gatt_foreach_attr_type+0x92>
   12c8a:	490a      	ldr	r1, [pc, #40]	; (12cb4 <bt_gatt_foreach_attr_type+0xd0>)
   12c8c:	f240 7329 	movw	r3, #1833	; 0x729
   12c90:	4a09      	ldr	r2, [pc, #36]	; (12cb8 <bt_gatt_foreach_attr_type+0xd4>)
   12c92:	480a      	ldr	r0, [pc, #40]	; (12cbc <bt_gatt_foreach_attr_type+0xd8>)
   12c94:	f009 ff29 	bl	1caea <assert_print>
   12c98:	4809      	ldr	r0, [pc, #36]	; (12cc0 <bt_gatt_foreach_attr_type+0xdc>)
   12c9a:	f009 ff26 	bl	1caea <assert_print>
   12c9e:	f240 7129 	movw	r1, #1833	; 0x729
   12ca2:	4805      	ldr	r0, [pc, #20]	; (12cb8 <bt_gatt_foreach_attr_type+0xd4>)
   12ca4:	f009 ff1a 	bl	1cadc <assert_post_action>
   12ca8:	20009c66 	.word	0x20009c66
   12cac:	000207ec 	.word	0x000207ec
   12cb0:	00020804 	.word	0x00020804
   12cb4:	0002397f 	.word	0x0002397f
   12cb8:	0002394f 	.word	0x0002394f
   12cbc:	00021547 	.word	0x00021547
   12cc0:	00021c6a 	.word	0x00021c6a

00012cc4 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   12cc4:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   12cc6:	b510      	push	{r4, lr}
   12cc8:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12cca:	4669      	mov	r1, sp
   12ccc:	aa22      	add	r2, sp, #136	; 0x88
   12cce:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   12cd0:	e9cd 3300 	strd	r3, r3, [sp]
   12cd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   12cd8:	f00a fb8d 	bl	1d3f6 <tc_cmac_setup>
   12cdc:	b958      	cbnz	r0, 12cf6 <db_hash_gen.constprop.0+0x32>
		BT_ERR("Unable to setup AES CMAC");
   12cde:	4b18      	ldr	r3, [pc, #96]	; (12d40 <db_hash_gen.constprop.0+0x7c>)
		BT_ERR("Unable to calculate hash");
   12ce0:	9309      	str	r3, [sp, #36]	; 0x24
   12ce2:	2302      	movs	r3, #2
   12ce4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12ce8:	4816      	ldr	r0, [pc, #88]	; (12d44 <db_hash_gen.constprop.0+0x80>)
   12cea:	aa08      	add	r2, sp, #32
   12cec:	9308      	str	r3, [sp, #32]
   12cee:	f00b fec9 	bl	1ea84 <z_log_msg_static_create.constprop.0>
}
   12cf2:	b04e      	add	sp, #312	; 0x138
   12cf4:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   12cf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12cfa:	2001      	movs	r0, #1
   12cfc:	4a12      	ldr	r2, [pc, #72]	; (12d48 <db_hash_gen.constprop.0+0x84>)
   12cfe:	ab0a      	add	r3, sp, #40	; 0x28
   12d00:	f00c f806 	bl	1ed10 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   12d04:	4811      	ldr	r0, [pc, #68]	; (12d4c <db_hash_gen.constprop.0+0x88>)
   12d06:	a90a      	add	r1, sp, #40	; 0x28
   12d08:	f00a fc0a 	bl	1d520 <tc_cmac_final>
   12d0c:	b908      	cbnz	r0, 12d12 <db_hash_gen.constprop.0+0x4e>
		BT_ERR("Unable to calculate hash");
   12d0e:	4b10      	ldr	r3, [pc, #64]	; (12d50 <db_hash_gen.constprop.0+0x8c>)
   12d10:	e7e6      	b.n	12ce0 <db_hash_gen.constprop.0+0x1c>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   12d12:	2208      	movs	r2, #8
   12d14:	4b0d      	ldr	r3, [pc, #52]	; (12d4c <db_hash_gen.constprop.0+0x88>)
   12d16:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   12d1a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12d1c:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   12d20:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   12d22:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   12d26:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   12d28:	d1f7      	bne.n	12d1a <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12d2a:	4b0a      	ldr	r3, [pc, #40]	; (12d54 <db_hash_gen.constprop.0+0x90>)
   12d2c:	e8d3 1fef 	ldaex	r1, [r3]
   12d30:	f041 0104 	orr.w	r1, r1, #4
   12d34:	e8c3 1fe2 	stlex	r2, r1, [r3]
   12d38:	2a00      	cmp	r2, #0
   12d3a:	d0da      	beq.n	12cf2 <db_hash_gen.constprop.0+0x2e>
   12d3c:	e7f6      	b.n	12d2c <db_hash_gen.constprop.0+0x68>
   12d3e:	bf00      	nop
   12d40:	000239ae 	.word	0x000239ae
   12d44:	00020834 	.word	0x00020834
   12d48:	0001e9c9 	.word	0x0001e9c9
   12d4c:	20009450 	.word	0x20009450
   12d50:	000239c7 	.word	0x000239c7
   12d54:	20009508 	.word	0x20009508

00012d58 <db_hash_read>:
{
   12d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12d5a:	4919      	ldr	r1, [pc, #100]	; (12dc0 <db_hash_read+0x68>)
{
   12d5c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12d5e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   12d62:	4615      	mov	r5, r2
   12d64:	461f      	mov	r7, r3
   12d66:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   12d6a:	f007 f9ed 	bl	1a148 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12d6e:	4b15      	ldr	r3, [pc, #84]	; (12dc4 <db_hash_read+0x6c>)
   12d70:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   12d74:	0759      	lsls	r1, r3, #29
   12d76:	d401      	bmi.n	12d7c <db_hash_read+0x24>
		db_hash_gen(true);
   12d78:	f7ff ffa4 	bl	12cc4 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   12d7c:	4620      	mov	r0, r4
   12d7e:	f7ff fcab 	bl	126d8 <find_cf_cfg>
	if (cfg &&
   12d82:	b150      	cbz	r0, 12d9a <db_hash_read+0x42>
   12d84:	7a03      	ldrb	r3, [r0, #8]
   12d86:	07da      	lsls	r2, r3, #31
   12d88:	d507      	bpl.n	12d9a <db_hash_read+0x42>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   12d8a:	300c      	adds	r0, #12
   12d8c:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   12d90:	07db      	lsls	r3, r3, #31
   12d92:	d402      	bmi.n	12d9a <db_hash_read+0x42>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   12d94:	2101      	movs	r1, #1
   12d96:	f00b fe78 	bl	1ea8a <atomic_set_bit>
	if (offset > value_len) {
   12d9a:	2e10      	cmp	r6, #16
   12d9c:	d80c      	bhi.n	12db8 <db_hash_read+0x60>
	len = MIN(buf_len, value_len - offset);
   12d9e:	f1c6 0410 	rsb	r4, r6, #16
   12da2:	42bc      	cmp	r4, r7
   12da4:	bfa8      	it	ge
   12da6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   12da8:	4907      	ldr	r1, [pc, #28]	; (12dc8 <db_hash_read+0x70>)
   12daa:	4622      	mov	r2, r4
   12dac:	4628      	mov	r0, r5
   12dae:	4431      	add	r1, r6
   12db0:	f00a feaa 	bl	1db08 <memcpy>
}
   12db4:	4620      	mov	r0, r4
   12db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12db8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   12dbc:	e7fa      	b.n	12db4 <db_hash_read+0x5c>
   12dbe:	bf00      	nop
   12dc0:	20009490 	.word	0x20009490
   12dc4:	20009508 	.word	0x20009508
   12dc8:	20009450 	.word	0x20009450

00012dcc <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   12dcc:	2300      	movs	r3, #0
{
   12dce:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   12dd0:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   12dd2:	f7ff febf 	bl	12b54 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   12dd6:	1c41      	adds	r1, r0, #1
   12dd8:	b289      	uxth	r1, r1
   12dda:	4608      	mov	r0, r1
   12ddc:	4a03      	ldr	r2, [pc, #12]	; (12dec <bt_gatt_attr_next+0x20>)
   12dde:	ab01      	add	r3, sp, #4
   12de0:	f00b ff96 	bl	1ed10 <bt_gatt_foreach_attr>
}
   12de4:	9801      	ldr	r0, [sp, #4]
   12de6:	b003      	add	sp, #12
   12de8:	f85d fb04 	ldr.w	pc, [sp], #4
   12dec:	0001e981 	.word	0x0001e981

00012df0 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   12df0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12df4:	460c      	mov	r4, r1
   12df6:	4617      	mov	r7, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   12df8:	4605      	mov	r5, r0
   12dfa:	b970      	cbnz	r0, 12e1a <bt_gatt_is_subscribed+0x2a>
   12dfc:	495b      	ldr	r1, [pc, #364]	; (12f6c <bt_gatt_is_subscribed+0x17c>)
   12dfe:	f640 434b 	movw	r3, #3147	; 0xc4b
   12e02:	4a5b      	ldr	r2, [pc, #364]	; (12f70 <bt_gatt_is_subscribed+0x180>)
   12e04:	485b      	ldr	r0, [pc, #364]	; (12f74 <bt_gatt_is_subscribed+0x184>)
   12e06:	f009 fe70 	bl	1caea <assert_print>
   12e0a:	485b      	ldr	r0, [pc, #364]	; (12f78 <bt_gatt_is_subscribed+0x188>)
   12e0c:	f009 fe6d 	bl	1caea <assert_print>
   12e10:	f640 414b 	movw	r1, #3147	; 0xc4b
	__ASSERT(attr, "invalid parameter\n");
   12e14:	4856      	ldr	r0, [pc, #344]	; (12f70 <bt_gatt_is_subscribed+0x180>)
   12e16:	f009 fe61 	bl	1cadc <assert_post_action>
   12e1a:	b961      	cbnz	r1, 12e36 <bt_gatt_is_subscribed+0x46>
   12e1c:	4957      	ldr	r1, [pc, #348]	; (12f7c <bt_gatt_is_subscribed+0x18c>)
   12e1e:	f640 434c 	movw	r3, #3148	; 0xc4c
   12e22:	4a53      	ldr	r2, [pc, #332]	; (12f70 <bt_gatt_is_subscribed+0x180>)
   12e24:	4853      	ldr	r0, [pc, #332]	; (12f74 <bt_gatt_is_subscribed+0x184>)
   12e26:	f009 fe60 	bl	1caea <assert_print>
   12e2a:	4853      	ldr	r0, [pc, #332]	; (12f78 <bt_gatt_is_subscribed+0x188>)
   12e2c:	f009 fe5d 	bl	1caea <assert_print>
   12e30:	f640 414c 	movw	r1, #3148	; 0xc4c
   12e34:	e7ee      	b.n	12e14 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   12e36:	7a83      	ldrb	r3, [r0, #10]
   12e38:	2b07      	cmp	r3, #7
   12e3a:	d110      	bne.n	12e5e <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   12e3c:	2300      	movs	r3, #0
   12e3e:	f88d 300c 	strb.w	r3, [sp, #12]
   12e42:	f642 0303 	movw	r3, #10243	; 0x2803
   12e46:	6820      	ldr	r0, [r4, #0]
   12e48:	a903      	add	r1, sp, #12
   12e4a:	f8ad 300e 	strh.w	r3, [sp, #14]
   12e4e:	f00a fe72 	bl	1db36 <bt_uuid_cmp>
   12e52:	b9d0      	cbnz	r0, 12e8a <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   12e54:	68e3      	ldr	r3, [r4, #12]
   12e56:	799b      	ldrb	r3, [r3, #6]
   12e58:	f013 0f30 	tst.w	r3, #48	; 0x30
   12e5c:	d103      	bne.n	12e66 <bt_gatt_is_subscribed+0x76>
		return false;
   12e5e:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   12e60:	b004      	add	sp, #16
   12e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   12e66:	4620      	mov	r0, r4
   12e68:	f7ff ffb0 	bl	12dcc <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   12e6c:	4604      	mov	r4, r0
   12e6e:	b960      	cbnz	r0, 12e8a <bt_gatt_is_subscribed+0x9a>
   12e70:	4942      	ldr	r1, [pc, #264]	; (12f7c <bt_gatt_is_subscribed+0x18c>)
   12e72:	f640 435d 	movw	r3, #3165	; 0xc5d
   12e76:	4a3e      	ldr	r2, [pc, #248]	; (12f70 <bt_gatt_is_subscribed+0x180>)
   12e78:	483e      	ldr	r0, [pc, #248]	; (12f74 <bt_gatt_is_subscribed+0x184>)
   12e7a:	f009 fe36 	bl	1caea <assert_print>
   12e7e:	4840      	ldr	r0, [pc, #256]	; (12f80 <bt_gatt_is_subscribed+0x190>)
   12e80:	f009 fe33 	bl	1caea <assert_print>
   12e84:	f640 415d 	movw	r1, #3165	; 0xc5d
   12e88:	e7c4      	b.n	12e14 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   12e8a:	2300      	movs	r3, #0
   12e8c:	6820      	ldr	r0, [r4, #0]
   12e8e:	f88d 300c 	strb.w	r3, [sp, #12]
   12e92:	f642 1302 	movw	r3, #10498	; 0x2902
   12e96:	a903      	add	r1, sp, #12
   12e98:	f8ad 300e 	strh.w	r3, [sp, #14]
   12e9c:	f00a fe4b 	bl	1db36 <bt_uuid_cmp>
   12ea0:	b188      	cbz	r0, 12ec6 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   12ea2:	4620      	mov	r0, r4
   12ea4:	f7ff ff92 	bl	12dcc <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   12ea8:	4604      	mov	r4, r0
   12eaa:	b960      	cbnz	r0, 12ec6 <bt_gatt_is_subscribed+0xd6>
   12eac:	4933      	ldr	r1, [pc, #204]	; (12f7c <bt_gatt_is_subscribed+0x18c>)
   12eae:	f640 4363 	movw	r3, #3171	; 0xc63
   12eb2:	4a2f      	ldr	r2, [pc, #188]	; (12f70 <bt_gatt_is_subscribed+0x180>)
   12eb4:	482f      	ldr	r0, [pc, #188]	; (12f74 <bt_gatt_is_subscribed+0x184>)
   12eb6:	f009 fe18 	bl	1caea <assert_print>
   12eba:	4831      	ldr	r0, [pc, #196]	; (12f80 <bt_gatt_is_subscribed+0x190>)
   12ebc:	f009 fe15 	bl	1caea <assert_print>
   12ec0:	f640 4163 	movw	r1, #3171	; 0xc63
   12ec4:	e7a6      	b.n	12e14 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   12ec6:	2600      	movs	r6, #0
   12ec8:	f642 1802 	movw	r8, #10498	; 0x2902
   12ecc:	6820      	ldr	r0, [r4, #0]
   12ece:	4669      	mov	r1, sp
   12ed0:	f88d 6000 	strb.w	r6, [sp]
   12ed4:	f8ad 8002 	strh.w	r8, [sp, #2]
   12ed8:	f00a fe2d 	bl	1db36 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12edc:	b9d8      	cbnz	r0, 12f16 <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   12ede:	2300      	movs	r3, #0
   12ee0:	6820      	ldr	r0, [r4, #0]
   12ee2:	f88d 300c 	strb.w	r3, [sp, #12]
   12ee6:	f642 1302 	movw	r3, #10498	; 0x2902
   12eea:	a903      	add	r1, sp, #12
   12eec:	f8ad 300e 	strh.w	r3, [sp, #14]
   12ef0:	f00a fe21 	bl	1db36 <bt_uuid_cmp>
   12ef4:	2800      	cmp	r0, #0
   12ef6:	d1b2      	bne.n	12e5e <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   12ef8:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   12efa:	4628      	mov	r0, r5
   12efc:	4622      	mov	r2, r4
   12efe:	f812 1b01 	ldrb.w	r1, [r2], #1
   12f02:	f00b f888 	bl	1e016 <bt_conn_is_peer_addr_le>
   12f06:	2800      	cmp	r0, #0
   12f08:	d0a9      	beq.n	12e5e <bt_gatt_is_subscribed+0x6e>
   12f0a:	8923      	ldrh	r3, [r4, #8]
   12f0c:	421f      	tst	r7, r3
   12f0e:	bf14      	ite	ne
   12f10:	2001      	movne	r0, #1
   12f12:	2000      	moveq	r0, #0
   12f14:	e7a4      	b.n	12e60 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   12f16:	f642 0303 	movw	r3, #10243	; 0x2803
   12f1a:	6820      	ldr	r0, [r4, #0]
   12f1c:	a901      	add	r1, sp, #4
   12f1e:	f88d 6004 	strb.w	r6, [sp, #4]
   12f22:	f8ad 3006 	strh.w	r3, [sp, #6]
   12f26:	f00a fe06 	bl	1db36 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   12f2a:	2800      	cmp	r0, #0
   12f2c:	d0d7      	beq.n	12ede <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12f2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12f32:	6820      	ldr	r0, [r4, #0]
   12f34:	a902      	add	r1, sp, #8
   12f36:	f88d 6008 	strb.w	r6, [sp, #8]
   12f3a:	f8ad 300a 	strh.w	r3, [sp, #10]
   12f3e:	f00a fdfa 	bl	1db36 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   12f42:	2800      	cmp	r0, #0
   12f44:	d0cb      	beq.n	12ede <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12f46:	f642 0301 	movw	r3, #10241	; 0x2801
   12f4a:	6820      	ldr	r0, [r4, #0]
   12f4c:	a903      	add	r1, sp, #12
   12f4e:	f88d 600c 	strb.w	r6, [sp, #12]
   12f52:	f8ad 300e 	strh.w	r3, [sp, #14]
   12f56:	f00a fdee 	bl	1db36 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12f5a:	2800      	cmp	r0, #0
   12f5c:	d0bf      	beq.n	12ede <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   12f5e:	4620      	mov	r0, r4
   12f60:	f7ff ff34 	bl	12dcc <bt_gatt_attr_next>
		if (!attr) {
   12f64:	4604      	mov	r4, r0
   12f66:	2800      	cmp	r0, #0
   12f68:	d1b0      	bne.n	12ecc <bt_gatt_is_subscribed+0xdc>
   12f6a:	e778      	b.n	12e5e <bt_gatt_is_subscribed+0x6e>
   12f6c:	00022d7b 	.word	0x00022d7b
   12f70:	0002394f 	.word	0x0002394f
   12f74:	00021547 	.word	0x00021547
   12f78:	000239e0 	.word	0x000239e0
   12f7c:	000239f5 	.word	0x000239f5
   12f80:	000239fa 	.word	0x000239fa

00012f84 <gatt_indicate>:
{
   12f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f88:	4615      	mov	r5, r2
   12f8a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12f8c:	2294      	movs	r2, #148	; 0x94
   12f8e:	6869      	ldr	r1, [r5, #4]
{
   12f90:	b086      	sub	sp, #24
   12f92:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   12f94:	f00b fec9 	bl	1ed2a <bt_gatt_check_perm>
   12f98:	4680      	mov	r8, r0
   12f9a:	b178      	cbz	r0, 12fbc <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   12f9c:	4b34      	ldr	r3, [pc, #208]	; (13070 <gatt_indicate+0xec>)
		return -EPERM;
   12f9e:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
   12fa2:	9305      	str	r3, [sp, #20]
   12fa4:	2302      	movs	r3, #2
   12fa6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12faa:	4832      	ldr	r0, [pc, #200]	; (13074 <gatt_indicate+0xf0>)
   12fac:	aa04      	add	r2, sp, #16
   12fae:	9304      	str	r3, [sp, #16]
   12fb0:	f00b fd68 	bl	1ea84 <z_log_msg_static_create.constprop.0>
}
   12fb4:	4628      	mov	r0, r5
   12fb6:	b006      	add	sp, #24
   12fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   12fbc:	2202      	movs	r2, #2
   12fbe:	4630      	mov	r0, r6
   12fc0:	6869      	ldr	r1, [r5, #4]
   12fc2:	f7ff ff15 	bl	12df0 <bt_gatt_is_subscribed>
   12fc6:	b960      	cbnz	r0, 12fe2 <gatt_indicate+0x5e>
			BT_WARN("Device is not subscribed to characteristic");
   12fc8:	4b2b      	ldr	r3, [pc, #172]	; (13078 <gatt_indicate+0xf4>)
   12fca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12fce:	9305      	str	r3, [sp, #20]
   12fd0:	2302      	movs	r3, #2
   12fd2:	4828      	ldr	r0, [pc, #160]	; (13074 <gatt_indicate+0xf0>)
   12fd4:	aa04      	add	r2, sp, #16
   12fd6:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   12fd8:	f06f 0515 	mvn.w	r5, #21
			BT_WARN("Device is not subscribed to characteristic");
   12fdc:	f00b fd52 	bl	1ea84 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   12fe0:	e7e8      	b.n	12fb4 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12fe2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   12fe6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   12fe8:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12fea:	f7ff f9e3 	bl	123b4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   12fee:	3702      	adds	r7, #2
	if (!req) {
   12ff0:	4604      	mov	r4, r0
   12ff2:	b1b0      	cbz	r0, 13022 <gatt_indicate+0x9e>
	req->func = func;
   12ff4:	4b21      	ldr	r3, [pc, #132]	; (1307c <gatt_indicate+0xf8>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   12ff6:	463a      	mov	r2, r7
	req->func = func;
   12ff8:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   12ffa:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   12ffc:	211d      	movs	r1, #29
   12ffe:	4630      	mov	r0, r6
   13000:	f7fe ff06 	bl	11e10 <bt_att_create_pdu>
	if (!buf) {
   13004:	4607      	mov	r7, r0
   13006:	b978      	cbnz	r0, 13028 <gatt_indicate+0xa4>
		BT_WARN("No buffer available to send indication");
   13008:	4b1d      	ldr	r3, [pc, #116]	; (13080 <gatt_indicate+0xfc>)
   1300a:	481a      	ldr	r0, [pc, #104]	; (13074 <gatt_indicate+0xf0>)
   1300c:	9305      	str	r3, [sp, #20]
   1300e:	2302      	movs	r3, #2
   13010:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13014:	aa04      	add	r2, sp, #16
   13016:	9304      	str	r3, [sp, #16]
   13018:	f00b fd34 	bl	1ea84 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1301c:	4620      	mov	r0, r4
   1301e:	f7ff f9eb 	bl	123f8 <bt_att_req_free>
		return -ENOMEM;
   13022:	f06f 050b 	mvn.w	r5, #11
   13026:	e7c5      	b.n	12fb4 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   13028:	2301      	movs	r3, #1
   1302a:	4642      	mov	r2, r8
   1302c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1302e:	f107 0a08 	add.w	sl, r7, #8
   13032:	f00b fc9e 	bl	1e972 <bt_att_set_tx_meta_data>
   13036:	2102      	movs	r1, #2
   13038:	4650      	mov	r0, sl
   1303a:	f000 fea7 	bl	13d8c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1303e:	4680      	mov	r8, r0
   13040:	f828 9b02 	strh.w	r9, [r8], #2
   13044:	8aa9      	ldrh	r1, [r5, #20]
   13046:	4650      	mov	r0, sl
   13048:	f000 fea0 	bl	13d8c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1304c:	8aaa      	ldrh	r2, [r5, #20]
   1304e:	6929      	ldr	r1, [r5, #16]
   13050:	4640      	mov	r0, r8
   13052:	f00a fd59 	bl	1db08 <memcpy>
	err = bt_att_req_send(conn, req);
   13056:	4621      	mov	r1, r4
   13058:	4630      	mov	r0, r6
	req->buf = buf;
   1305a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1305c:	f7ff fb06 	bl	1266c <bt_att_req_send>
	if (err) {
   13060:	4605      	mov	r5, r0
   13062:	2800      	cmp	r0, #0
   13064:	d0a6      	beq.n	12fb4 <gatt_indicate+0x30>
		bt_att_req_free(req);
   13066:	4620      	mov	r0, r4
   13068:	f7ff f9c6 	bl	123f8 <bt_att_req_free>
   1306c:	e7a2      	b.n	12fb4 <gatt_indicate+0x30>
   1306e:	bf00      	nop
   13070:	00023a10 	.word	0x00023a10
   13074:	00020834 	.word	0x00020834
   13078:	00023a26 	.word	0x00023a26
   1307c:	0001e99b 	.word	0x0001e99b
   13080:	00023a51 	.word	0x00023a51

00013084 <bt_gatt_indicate>:
{
   13084:	b530      	push	{r4, r5, lr}
   13086:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   13088:	460c      	mov	r4, r1
{
   1308a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1308c:	b971      	cbnz	r1, 130ac <bt_gatt_indicate+0x28>
   1308e:	4946      	ldr	r1, [pc, #280]	; (131a8 <bt_gatt_indicate+0x124>)
   13090:	f640 330b 	movw	r3, #2827	; 0xb0b
   13094:	4a45      	ldr	r2, [pc, #276]	; (131ac <bt_gatt_indicate+0x128>)
   13096:	4846      	ldr	r0, [pc, #280]	; (131b0 <bt_gatt_indicate+0x12c>)
   13098:	f009 fd27 	bl	1caea <assert_print>
   1309c:	4845      	ldr	r0, [pc, #276]	; (131b4 <bt_gatt_indicate+0x130>)
   1309e:	f009 fd24 	bl	1caea <assert_print>
   130a2:	f640 310b 	movw	r1, #2827	; 0xb0b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   130a6:	4841      	ldr	r0, [pc, #260]	; (131ac <bt_gatt_indicate+0x128>)
   130a8:	f009 fd18 	bl	1cadc <assert_post_action>
   130ac:	684b      	ldr	r3, [r1, #4]
   130ae:	b973      	cbnz	r3, 130ce <bt_gatt_indicate+0x4a>
   130b0:	680b      	ldr	r3, [r1, #0]
   130b2:	b963      	cbnz	r3, 130ce <bt_gatt_indicate+0x4a>
   130b4:	4940      	ldr	r1, [pc, #256]	; (131b8 <bt_gatt_indicate+0x134>)
   130b6:	f640 330c 	movw	r3, #2828	; 0xb0c
   130ba:	4a3c      	ldr	r2, [pc, #240]	; (131ac <bt_gatt_indicate+0x128>)
   130bc:	483c      	ldr	r0, [pc, #240]	; (131b0 <bt_gatt_indicate+0x12c>)
   130be:	f009 fd14 	bl	1caea <assert_print>
   130c2:	483c      	ldr	r0, [pc, #240]	; (131b4 <bt_gatt_indicate+0x130>)
   130c4:	f009 fd11 	bl	1caea <assert_print>
   130c8:	f640 310c 	movw	r1, #2828	; 0xb0c
   130cc:	e7eb      	b.n	130a6 <bt_gatt_indicate+0x22>
   130ce:	4b3b      	ldr	r3, [pc, #236]	; (131bc <bt_gatt_indicate+0x138>)
   130d0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   130d4:	075a      	lsls	r2, r3, #29
   130d6:	d561      	bpl.n	1319c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   130d8:	b115      	cbz	r5, 130e0 <bt_gatt_indicate+0x5c>
   130da:	7aab      	ldrb	r3, [r5, #10]
   130dc:	2b07      	cmp	r3, #7
   130de:	d160      	bne.n	131a2 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   130e0:	6860      	ldr	r0, [r4, #4]
   130e2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   130e4:	f7ff fd36 	bl	12b54 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   130e8:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   130ea:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   130ee:	b33a      	cbz	r2, 13140 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   130f0:	a905      	add	r1, sp, #20
   130f2:	9102      	str	r1, [sp, #8]
   130f4:	4932      	ldr	r1, [pc, #200]	; (131c0 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   130f6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   130f8:	9101      	str	r1, [sp, #4]
   130fa:	2101      	movs	r1, #1
   130fc:	9100      	str	r1, [sp, #0]
   130fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13102:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13104:	f7ff fd6e 	bl	12be4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13108:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1310a:	b91b      	cbnz	r3, 13114 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1310c:	f06f 0001 	mvn.w	r0, #1
}
   13110:	b00b      	add	sp, #44	; 0x2c
   13112:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   13114:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13116:	9b05      	ldr	r3, [sp, #20]
   13118:	a904      	add	r1, sp, #16
   1311a:	6818      	ldr	r0, [r3, #0]
   1311c:	2300      	movs	r3, #0
   1311e:	f88d 3010 	strb.w	r3, [sp, #16]
   13122:	f642 0303 	movw	r3, #10243	; 0x2803
   13126:	f8ad 3012 	strh.w	r3, [sp, #18]
   1312a:	f00a fd04 	bl	1db36 <bt_uuid_cmp>
   1312e:	b970      	cbnz	r0, 1314e <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13130:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   13132:	68c3      	ldr	r3, [r0, #12]
   13134:	799b      	ldrb	r3, [r3, #6]
   13136:	069b      	lsls	r3, r3, #26
   13138:	d405      	bmi.n	13146 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1313a:	f06f 0015 	mvn.w	r0, #21
   1313e:	e7e7      	b.n	13110 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   13140:	2800      	cmp	r0, #0
   13142:	d1e8      	bne.n	13116 <bt_gatt_indicate+0x92>
   13144:	e7e2      	b.n	1310c <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13146:	f00b fd95 	bl	1ec74 <bt_gatt_attr_value_handle>
   1314a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1314e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13152:	b13d      	cbz	r5, 13164 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   13154:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   13156:	4601      	mov	r1, r0
   13158:	4622      	mov	r2, r4
   1315a:	4628      	mov	r0, r5
		params->_ref = 1;
   1315c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1315e:	f7ff ff11 	bl	12f84 <gatt_indicate>
   13162:	e7d5      	b.n	13110 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   13164:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   13168:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1316a:	2302      	movs	r3, #2
   1316c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13170:	f642 1302 	movw	r3, #10498	; 0x2902
   13174:	f8ad 3012 	strh.w	r3, [sp, #18]
   13178:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1317a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1317c:	9302      	str	r3, [sp, #8]
   1317e:	4b11      	ldr	r3, [pc, #68]	; (131c4 <bt_gatt_indicate+0x140>)
   13180:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13184:	9301      	str	r3, [sp, #4]
   13186:	2301      	movs	r3, #1
   13188:	aa04      	add	r2, sp, #16
   1318a:	9300      	str	r3, [sp, #0]
   1318c:	462b      	mov	r3, r5
	data.ind_params = params;
   1318e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13190:	f88d 5010 	strb.w	r5, [sp, #16]
   13194:	f7ff fd26 	bl	12be4 <bt_gatt_foreach_attr_type>
	return data.err;
   13198:	9807      	ldr	r0, [sp, #28]
   1319a:	e7b9      	b.n	13110 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1319c:	f06f 000a 	mvn.w	r0, #10
   131a0:	e7b6      	b.n	13110 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   131a2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   131a6:	e7b3      	b.n	13110 <bt_gatt_indicate+0x8c>
   131a8:	00023a78 	.word	0x00023a78
   131ac:	0002394f 	.word	0x0002394f
   131b0:	00021547 	.word	0x00021547
   131b4:	00023a7f 	.word	0x00023a7f
   131b8:	00023a95 	.word	0x00023a95
   131bc:	200080cc 	.word	0x200080cc
   131c0:	0001e9c1 	.word	0x0001e9c1
   131c4:	00013421 	.word	0x00013421

000131c8 <sc_process>:
{
   131c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   131ca:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   131cc:	f1a0 0120 	sub.w	r1, r0, #32
   131d0:	f100 0430 	add.w	r4, r0, #48	; 0x30
   131d4:	e8d4 2faf 	lda	r2, [r4]
   131d8:	f3c2 0040 	ubfx	r0, r2, #1, #1
   131dc:	0792      	lsls	r2, r2, #30
   131de:	d50e      	bpl.n	131fe <sc_process+0x36>
   131e0:	4919      	ldr	r1, [pc, #100]	; (13248 <sc_process+0x80>)
   131e2:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   131e6:	4a19      	ldr	r2, [pc, #100]	; (1324c <sc_process+0x84>)
   131e8:	4819      	ldr	r0, [pc, #100]	; (13250 <sc_process+0x88>)
   131ea:	f009 fc7e 	bl	1caea <assert_print>
   131ee:	4819      	ldr	r0, [pc, #100]	; (13254 <sc_process+0x8c>)
   131f0:	f009 fc7b 	bl	1caea <assert_print>
   131f4:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   131f8:	4814      	ldr	r0, [pc, #80]	; (1324c <sc_process+0x84>)
   131fa:	f009 fc6f 	bl	1cadc <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   131fe:	f853 2c08 	ldr.w	r2, [r3, #-8]
   13202:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13204:	e8d4 2fef 	ldaex	r2, [r4]
   13208:	f022 0201 	bic.w	r2, r2, #1
   1320c:	e8c4 2fe5 	stlex	r5, r2, [r4]
   13210:	2d00      	cmp	r5, #0
   13212:	d1f7      	bne.n	13204 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13214:	4a10      	ldr	r2, [pc, #64]	; (13258 <sc_process+0x90>)
	sc->start = 0U;
   13216:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1321a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1321e:	4a0f      	ldr	r2, [pc, #60]	; (1325c <sc_process+0x94>)
	sc->end = 0U;
   13220:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   13224:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   13228:	aa01      	add	r2, sp, #4
   1322a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1322e:	2204      	movs	r2, #4
   13230:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   13234:	f7ff ff26 	bl	13084 <bt_gatt_indicate>
   13238:	b918      	cbnz	r0, 13242 <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1323a:	2101      	movs	r1, #1
   1323c:	4620      	mov	r0, r4
   1323e:	f00b fc24 	bl	1ea8a <atomic_set_bit>
}
   13242:	b003      	add	sp, #12
   13244:	bd30      	pop	{r4, r5, pc}
   13246:	bf00      	nop
   13248:	00023ab2 	.word	0x00023ab2
   1324c:	0002394f 	.word	0x0002394f
   13250:	00021547 	.word	0x00021547
   13254:	00023ae3 	.word	0x00023ae3
   13258:	00020e20 	.word	0x00020e20
   1325c:	00012a35 	.word	0x00012a35

00013260 <update_ccc>:
{
   13260:	b5f0      	push	{r4, r5, r6, r7, lr}
   13262:	b089      	sub	sp, #36	; 0x24
	if (attr->write != bt_gatt_attr_write_ccc) {
   13264:	4b31      	ldr	r3, [pc, #196]	; (1332c <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   13266:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   13268:	6882      	ldr	r2, [r0, #8]
{
   1326a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1326c:	429a      	cmp	r2, r3
{
   1326e:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13270:	d11e      	bne.n	132b0 <update_ccc+0x50>
	ccc = attr->user_data;
   13272:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   13274:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13276:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   13278:	b1d3      	cbz	r3, 132b0 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1327a:	4628      	mov	r0, r5
   1327c:	7831      	ldrb	r1, [r6, #0]
   1327e:	f00a feca 	bl	1e016 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   13282:	b1a8      	cbz	r0, 132b0 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   13284:	f44f 7295 	mov.w	r2, #298	; 0x12a
   13288:	4621      	mov	r1, r4
   1328a:	4628      	mov	r0, r5
   1328c:	f00b fd4d 	bl	1ed2a <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   13290:	2803      	cmp	r0, #3
   13292:	d111      	bne.n	132b8 <update_ccc+0x58>
				BT_WARN("CCC %p not writable", attr);
   13294:	466d      	mov	r5, sp
   13296:	b088      	sub	sp, #32
   13298:	466a      	mov	r2, sp
   1329a:	4b25      	ldr	r3, [pc, #148]	; (13330 <update_ccc+0xd0>)
   1329c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   132a0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   132a4:	f842 0f10 	str.w	r0, [r2, #16]!
   132a8:	4822      	ldr	r0, [pc, #136]	; (13334 <update_ccc+0xd4>)
   132aa:	f00b fbeb 	bl	1ea84 <z_log_msg_static_create.constprop.0>
   132ae:	46ad      	mov	sp, r5
}
   132b0:	2001      	movs	r0, #1
   132b2:	3724      	adds	r7, #36	; 0x24
   132b4:	46bd      	mov	sp, r7
   132b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   132b8:	4631      	mov	r1, r6
   132ba:	4620      	mov	r0, r4
   132bc:	f00b fb63 	bl	1e986 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   132c0:	4b1d      	ldr	r3, [pc, #116]	; (13338 <update_ccc+0xd8>)
   132c2:	429e      	cmp	r6, r3
   132c4:	d1f4      	bne.n	132b0 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   132c6:	7a28      	ldrb	r0, [r5, #8]
   132c8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   132cc:	f7ff fa1c 	bl	12708 <find_sc_cfg>
	if (!cfg) {
   132d0:	2800      	cmp	r0, #0
   132d2:	d0ed      	beq.n	132b0 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   132d4:	8902      	ldrh	r2, [r0, #8]
   132d6:	8943      	ldrh	r3, [r0, #10]
   132d8:	ea52 0103 	orrs.w	r1, r2, r3
   132dc:	d0e8      	beq.n	132b0 <update_ccc+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   132de:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   132e0:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   132e2:	4628      	mov	r0, r5
   132e4:	f7fd fc14 	bl	10b10 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   132e8:	2318      	movs	r3, #24
   132ea:	4914      	ldr	r1, [pc, #80]	; (1333c <update_ccc+0xdc>)
   132ec:	4a14      	ldr	r2, [pc, #80]	; (13340 <update_ccc+0xe0>)
   132ee:	fb03 1300 	mla	r3, r3, r0, r1
   132f2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   132f4:	4a13      	ldr	r2, [pc, #76]	; (13344 <update_ccc+0xe4>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   132f6:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   132f8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   132fa:	1d3a      	adds	r2, r7, #4
   132fc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   132fe:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13300:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13304:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   13308:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1330a:	4628      	mov	r0, r5
   1330c:	f7ff feba 	bl	13084 <bt_gatt_indicate>
   13310:	2800      	cmp	r0, #0
   13312:	d0cd      	beq.n	132b0 <update_ccc+0x50>
		BT_ERR("SC restore indication failed");
   13314:	4b0c      	ldr	r3, [pc, #48]	; (13348 <update_ccc+0xe8>)
   13316:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1331a:	61fb      	str	r3, [r7, #28]
   1331c:	2302      	movs	r3, #2
   1331e:	4805      	ldr	r0, [pc, #20]	; (13334 <update_ccc+0xd4>)
   13320:	61bb      	str	r3, [r7, #24]
   13322:	f107 0218 	add.w	r2, r7, #24
   13326:	f00b fbad 	bl	1ea84 <z_log_msg_static_create.constprop.0>
   1332a:	e7c1      	b.n	132b0 <update_ccc+0x50>
   1332c:	00012751 	.word	0x00012751
   13330:	00023afe 	.word	0x00023afe
   13334:	00020834 	.word	0x00020834
   13338:	20008264 	.word	0x20008264
   1333c:	2000993c 	.word	0x2000993c
   13340:	00020e20 	.word	0x00020e20
   13344:	0001ea9f 	.word	0x0001ea9f
   13348:	00023b12 	.word	0x00023b12

0001334c <gatt_notify>:
{
   1334c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13350:	4614      	mov	r4, r2
   13352:	4688      	mov	r8, r1
   13354:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13356:	2294      	movs	r2, #148	; 0x94
   13358:	6861      	ldr	r1, [r4, #4]
{
   1335a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1335c:	f00b fce5 	bl	1ed2a <bt_gatt_check_perm>
   13360:	b170      	cbz	r0, 13380 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   13362:	4b2b      	ldr	r3, [pc, #172]	; (13410 <gatt_notify+0xc4>)
   13364:	482b      	ldr	r0, [pc, #172]	; (13414 <gatt_notify+0xc8>)
   13366:	9305      	str	r3, [sp, #20]
   13368:	2302      	movs	r3, #2
   1336a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1336e:	aa04      	add	r2, sp, #16
   13370:	9304      	str	r3, [sp, #16]
   13372:	f00b fb87 	bl	1ea84 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   13376:	f04f 30ff 	mov.w	r0, #4294967295
}
   1337a:	b007      	add	sp, #28
   1337c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   13380:	2201      	movs	r2, #1
   13382:	4630      	mov	r0, r6
   13384:	6861      	ldr	r1, [r4, #4]
   13386:	f7ff fd33 	bl	12df0 <bt_gatt_is_subscribed>
   1338a:	b960      	cbnz	r0, 133a6 <gatt_notify+0x5a>
			BT_WARN("Device is not subscribed to characteristic");
   1338c:	4b22      	ldr	r3, [pc, #136]	; (13418 <gatt_notify+0xcc>)
   1338e:	4821      	ldr	r0, [pc, #132]	; (13414 <gatt_notify+0xc8>)
   13390:	9305      	str	r3, [sp, #20]
   13392:	2302      	movs	r3, #2
   13394:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13398:	aa04      	add	r2, sp, #16
   1339a:	9304      	str	r3, [sp, #16]
   1339c:	f00b fb72 	bl	1ea84 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   133a0:	f06f 0015 	mvn.w	r0, #21
   133a4:	e7e9      	b.n	1337a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   133a6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   133a8:	211b      	movs	r1, #27
   133aa:	4630      	mov	r0, r6
   133ac:	3202      	adds	r2, #2
   133ae:	f7fe fd2f 	bl	11e10 <bt_att_create_pdu>
	if (!buf) {
   133b2:	4605      	mov	r5, r0
   133b4:	b960      	cbnz	r0, 133d0 <gatt_notify+0x84>
		BT_WARN("No buffer available to send notification");
   133b6:	4b19      	ldr	r3, [pc, #100]	; (1341c <gatt_notify+0xd0>)
   133b8:	4816      	ldr	r0, [pc, #88]	; (13414 <gatt_notify+0xc8>)
   133ba:	9305      	str	r3, [sp, #20]
   133bc:	2302      	movs	r3, #2
   133be:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   133c2:	aa04      	add	r2, sp, #16
   133c4:	9304      	str	r3, [sp, #16]
   133c6:	f00b fb5d 	bl	1ea84 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   133ca:	f06f 000b 	mvn.w	r0, #11
   133ce:	e7d4      	b.n	1337a <gatt_notify+0x2e>
   133d0:	f100 0908 	add.w	r9, r0, #8
   133d4:	2102      	movs	r1, #2
   133d6:	4648      	mov	r0, r9
   133d8:	f000 fcd8 	bl	13d8c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   133dc:	4607      	mov	r7, r0
   133de:	f827 8b02 	strh.w	r8, [r7], #2
   133e2:	89a1      	ldrh	r1, [r4, #12]
   133e4:	4648      	mov	r0, r9
   133e6:	f000 fcd1 	bl	13d8c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   133ea:	89a2      	ldrh	r2, [r4, #12]
   133ec:	68a1      	ldr	r1, [r4, #8]
   133ee:	4638      	mov	r0, r7
   133f0:	f00a fb8a 	bl	1db08 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   133f4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   133f8:	4628      	mov	r0, r5
   133fa:	2301      	movs	r3, #1
   133fc:	f00b fab9 	bl	1e972 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   13400:	4629      	mov	r1, r5
   13402:	4630      	mov	r0, r6
}
   13404:	b007      	add	sp, #28
   13406:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1340a:	f7ff b8d1 	b.w	125b0 <bt_att_send>
   1340e:	bf00      	nop
   13410:	00023a10 	.word	0x00023a10
   13414:	00020834 	.word	0x00020834
   13418:	00023a26 	.word	0x00023a26
   1341c:	00023b2f 	.word	0x00023b2f

00013420 <notify_cb>:
{
   13420:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13422:	4b3f      	ldr	r3, [pc, #252]	; (13520 <notify_cb+0x100>)
{
   13424:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13426:	6882      	ldr	r2, [r0, #8]
{
   13428:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1342a:	429a      	cmp	r2, r3
{
   1342c:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   1342e:	d003      	beq.n	13438 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13430:	2701      	movs	r7, #1
}
   13432:	4638      	mov	r0, r7
   13434:	b007      	add	sp, #28
   13436:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   13438:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1343a:	4b3a      	ldr	r3, [pc, #232]	; (13524 <notify_cb+0x104>)
   1343c:	429e      	cmp	r6, r3
   1343e:	d055      	beq.n	134ec <notify_cb+0xcc>
		if (cfg->value != data->type) {
   13440:	8932      	ldrh	r2, [r6, #8]
   13442:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13444:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   13446:	429a      	cmp	r2, r3
   13448:	d1f2      	bne.n	13430 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1344a:	7830      	ldrb	r0, [r6, #0]
   1344c:	f7fd fc94 	bl	10d78 <bt_conn_lookup_addr_le>
		if (!conn) {
   13450:	4604      	mov	r4, r0
   13452:	2800      	cmp	r0, #0
   13454:	d0ec      	beq.n	13430 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   13456:	7a83      	ldrb	r3, [r0, #10]
   13458:	2b07      	cmp	r3, #7
   1345a:	d005      	beq.n	13468 <notify_cb+0x48>
			bt_conn_unref(conn);
   1345c:	f7fd fa30 	bl	108c0 <bt_conn_unref>
			continue;
   13460:	e7e6      	b.n	13430 <notify_cb+0x10>
			bt_conn_unref(conn);
   13462:	f7fd fa2d 	bl	108c0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13466:	e7eb      	b.n	13440 <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13468:	6973      	ldr	r3, [r6, #20]
   1346a:	b123      	cbz	r3, 13476 <notify_cb+0x56>
   1346c:	4639      	mov	r1, r7
   1346e:	4798      	blx	r3
   13470:	b908      	cbnz	r0, 13476 <notify_cb+0x56>
			bt_conn_unref(conn);
   13472:	4620      	mov	r0, r4
   13474:	e7f2      	b.n	1345c <notify_cb+0x3c>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13476:	4639      	mov	r1, r7
   13478:	2294      	movs	r2, #148	; 0x94
   1347a:	4620      	mov	r0, r4
   1347c:	f00b fc55 	bl	1ed2a <bt_gatt_check_perm>
   13480:	4607      	mov	r7, r0
   13482:	b150      	cbz	r0, 1349a <notify_cb+0x7a>
			BT_WARN("Link is not encrypted");
   13484:	4b28      	ldr	r3, [pc, #160]	; (13528 <notify_cb+0x108>)
   13486:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1348a:	9305      	str	r3, [sp, #20]
   1348c:	2302      	movs	r3, #2
   1348e:	4827      	ldr	r0, [pc, #156]	; (1352c <notify_cb+0x10c>)
   13490:	aa04      	add	r2, sp, #16
   13492:	9304      	str	r3, [sp, #16]
   13494:	f00b faf6 	bl	1ea84 <z_log_msg_static_create.constprop.0>
   13498:	e7eb      	b.n	13472 <notify_cb+0x52>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1349a:	89ab      	ldrh	r3, [r5, #12]
   1349c:	2b02      	cmp	r3, #2
   1349e:	d114      	bne.n	134ca <notify_cb+0xaa>
   134a0:	8933      	ldrh	r3, [r6, #8]
   134a2:	079a      	lsls	r2, r3, #30
   134a4:	d405      	bmi.n	134b2 <notify_cb+0x92>
		bt_conn_unref(conn);
   134a6:	4620      	mov	r0, r4
   134a8:	f7fd fa0a 	bl	108c0 <bt_conn_unref>
		data->err = 0;
   134ac:	2300      	movs	r3, #0
   134ae:	60ab      	str	r3, [r5, #8]
   134b0:	e7be      	b.n	13430 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   134b2:	4620      	mov	r0, r4
   134b4:	692a      	ldr	r2, [r5, #16]
   134b6:	88a9      	ldrh	r1, [r5, #4]
   134b8:	f7ff fd64 	bl	12f84 <gatt_indicate>
			if (err == 0) {
   134bc:	4606      	mov	r6, r0
   134be:	b978      	cbnz	r0, 134e0 <notify_cb+0xc0>
				data->ind_params->_ref++;
   134c0:	692a      	ldr	r2, [r5, #16]
   134c2:	7d93      	ldrb	r3, [r2, #22]
   134c4:	3301      	adds	r3, #1
   134c6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   134c8:	e7ed      	b.n	134a6 <notify_cb+0x86>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   134ca:	2b01      	cmp	r3, #1
   134cc:	d1eb      	bne.n	134a6 <notify_cb+0x86>
   134ce:	8933      	ldrh	r3, [r6, #8]
   134d0:	07db      	lsls	r3, r3, #31
   134d2:	d5e8      	bpl.n	134a6 <notify_cb+0x86>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   134d4:	4620      	mov	r0, r4
   134d6:	692a      	ldr	r2, [r5, #16]
   134d8:	88a9      	ldrh	r1, [r5, #4]
   134da:	f7ff ff37 	bl	1334c <gatt_notify>
   134de:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   134e0:	4620      	mov	r0, r4
   134e2:	f7fd f9ed 	bl	108c0 <bt_conn_unref>
		if (err < 0) {
   134e6:	2e00      	cmp	r6, #0
   134e8:	dba3      	blt.n	13432 <notify_cb+0x12>
   134ea:	e7df      	b.n	134ac <notify_cb+0x8c>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   134ec:	4c10      	ldr	r4, [pc, #64]	; (13530 <notify_cb+0x110>)
   134ee:	4911      	ldr	r1, [pc, #68]	; (13534 <notify_cb+0x114>)
   134f0:	4620      	mov	r0, r4
   134f2:	f00b fabc 	bl	1ea6e <bt_addr_le_eq>
   134f6:	2800      	cmp	r0, #0
   134f8:	d1a2      	bne.n	13440 <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   134fa:	2207      	movs	r2, #7
   134fc:	4621      	mov	r1, r4
   134fe:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13502:	f7fd fc83 	bl	10e0c <bt_conn_lookup_state_le>
			if (!conn) {
   13506:	2800      	cmp	r0, #0
   13508:	d1ab      	bne.n	13462 <notify_cb+0x42>
				sc = (struct sc_data *)data->ind_params->data;
   1350a:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1350c:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1350e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13510:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13514:	8853      	ldrh	r3, [r2, #2]
   13516:	8812      	ldrh	r2, [r2, #0]
   13518:	f7ff f996 	bl	12848 <sc_save>
				continue;
   1351c:	e790      	b.n	13440 <notify_cb+0x20>
   1351e:	bf00      	nop
   13520:	00012751 	.word	0x00012751
   13524:	20008264 	.word	0x20008264
   13528:	00023a10 	.word	0x00023a10
   1352c:	00020834 	.word	0x00020834
   13530:	20009c5b 	.word	0x20009c5b
   13534:	00022866 	.word	0x00022866

00013538 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   13538:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1353a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1353c:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1353e:	466b      	mov	r3, sp
   13540:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13544:	4a03      	ldr	r2, [pc, #12]	; (13554 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   13546:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1354a:	f00b fbe1 	bl	1ed10 <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1354e:	b003      	add	sp, #12
   13550:	f85d fb04 	ldr.w	pc, [sp], #4
   13554:	00013261 	.word	0x00013261

00013558 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   13558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1355a:	4605      	mov	r5, r0
   1355c:	460e      	mov	r6, r1
   1355e:	4617      	mov	r7, r2
	return list->head;
   13560:	4b06      	ldr	r3, [pc, #24]	; (1357c <bt_gatt_att_max_mtu_changed+0x24>)
   13562:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13564:	b14c      	cbz	r4, 1357a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   13566:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1356a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1356c:	b11b      	cbz	r3, 13576 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1356e:	463a      	mov	r2, r7
   13570:	4631      	mov	r1, r6
   13572:	4628      	mov	r0, r5
   13574:	4798      	blx	r3
	return node->next;
   13576:	6864      	ldr	r4, [r4, #4]
   13578:	e7f4      	b.n	13564 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1357c:	2000996c 	.word	0x2000996c

00013580 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   13580:	b570      	push	{r4, r5, r6, lr}
   13582:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   13584:	4603      	mov	r3, r0
   13586:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1358a:	2001      	movs	r0, #1
   1358c:	4a0d      	ldr	r2, [pc, #52]	; (135c4 <bt_gatt_disconnected+0x44>)
   1358e:	f00b fbbf 	bl	1ed10 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   13592:	4620      	mov	r0, r4
   13594:	f7ff f8a0 	bl	126d8 <find_cf_cfg>
	if (!cfg) {
   13598:	4605      	mov	r5, r0
   1359a:	b188      	cbz	r0, 135c0 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1359c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   135a0:	4631      	mov	r1, r6
   135a2:	7a20      	ldrb	r0, [r4, #8]
   135a4:	f00a fbec 	bl	1dd80 <bt_addr_le_is_bonded>
   135a8:	b920      	cbnz	r0, 135b4 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   135aa:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   135ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   135b0:	f7ff b932 	b.w	12818 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   135b4:	4631      	mov	r1, r6
   135b6:	1c68      	adds	r0, r5, #1
}
   135b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   135bc:	f00b ba5f 	b.w	1ea7e <bt_addr_le_copy>
}
   135c0:	bd70      	pop	{r4, r5, r6, pc}
   135c2:	bf00      	nop
   135c4:	0001295d 	.word	0x0001295d

000135c8 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   135c8:	b580      	push	{r7, lr}
   135ca:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   135cc:	b088      	sub	sp, #32
   135ce:	466a      	mov	r2, sp
   135d0:	4b07      	ldr	r3, [pc, #28]	; (135f0 <bt_smp_accept.part.0+0x28>)
   135d2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   135d6:	2303      	movs	r3, #3
   135d8:	f842 3f10 	str.w	r3, [r2, #16]!
   135dc:	2300      	movs	r3, #0
   135de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   135e2:	4804      	ldr	r0, [pc, #16]	; (135f4 <bt_smp_accept.part.0+0x2c>)
   135e4:	f7f8 f990 	bl	b908 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   135e8:	f06f 000b 	mvn.w	r0, #11
   135ec:	46bd      	mov	sp, r7
   135ee:	bd80      	pop	{r7, pc}
   135f0:	00023b67 	.word	0x00023b67
   135f4:	0002085c 	.word	0x0002085c

000135f8 <bt_smp_accept>:
		if (smp->chan.conn) {
   135f8:	4b04      	ldr	r3, [pc, #16]	; (1360c <bt_smp_accept+0x14>)
   135fa:	681a      	ldr	r2, [r3, #0]
   135fc:	b10a      	cbz	r2, 13602 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   135fe:	f7ff bfe3 	b.w	135c8 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   13602:	4803      	ldr	r0, [pc, #12]	; (13610 <bt_smp_accept+0x18>)
   13604:	6058      	str	r0, [r3, #4]
}
   13606:	4610      	mov	r0, r2
		*chan = &smp->chan;
   13608:	600b      	str	r3, [r1, #0]
}
   1360a:	4770      	bx	lr
   1360c:	20009974 	.word	0x20009974
   13610:	00020f24 	.word	0x00020f24

00013614 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   13614:	2234      	movs	r2, #52	; 0x34
   13616:	4b02      	ldr	r3, [pc, #8]	; (13620 <net_buf_pool_get+0xc>)
   13618:	fb02 3000 	mla	r0, r2, r0, r3
   1361c:	4770      	bx	lr
   1361e:	bf00      	nop
   13620:	2000865c 	.word	0x2000865c

00013624 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13624:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13626:	7982      	ldrb	r2, [r0, #6]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13628:	4b06      	ldr	r3, [pc, #24]	; (13644 <net_buf_id+0x20>)
   1362a:	fb01 3302 	mla	r3, r1, r2, r3
   1362e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13630:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13634:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13636:	3317      	adds	r3, #23
   13638:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1363c:	fbb0 f0f3 	udiv	r0, r0, r3
   13640:	4770      	bx	lr
   13642:	bf00      	nop
   13644:	2000865c 	.word	0x2000865c

00013648 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   13648:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1364a:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1364c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1364e:	4b09      	ldr	r3, [pc, #36]	; (13674 <fixed_data_alloc+0x2c>)
   13650:	fb04 3302 	mla	r3, r4, r2, r3
   13654:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   13656:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13658:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1365a:	681a      	ldr	r2, [r3, #0]
   1365c:	4294      	cmp	r4, r2
   1365e:	bf94      	ite	ls
   13660:	600c      	strls	r4, [r1, #0]
   13662:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13664:	e9d3 5400 	ldrd	r5, r4, [r3]
   13668:	f7ff ffdc 	bl	13624 <net_buf_id>
}
   1366c:	fb05 4000 	mla	r0, r5, r0, r4
   13670:	bd38      	pop	{r3, r4, r5, pc}
   13672:	bf00      	nop
   13674:	2000865c 	.word	0x2000865c

00013678 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   13678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1367c:	b085      	sub	sp, #20
   1367e:	9103      	str	r1, [sp, #12]
   13680:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   13682:	4619      	mov	r1, r3
   13684:	4610      	mov	r0, r2
{
   13686:	4692      	mov	sl, r2
   13688:	4699      	mov	r9, r3
   1368a:	4690      	mov	r8, r2
   1368c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1368e:	f00c fd7c 	bl	2018a <sys_clock_timeout_end_calc>
   13692:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   13696:	b945      	cbnz	r5, 136aa <net_buf_alloc_len+0x32>
   13698:	4966      	ldr	r1, [pc, #408]	; (13834 <net_buf_alloc_len+0x1bc>)
   1369a:	23f4      	movs	r3, #244	; 0xf4
   1369c:	4a66      	ldr	r2, [pc, #408]	; (13838 <net_buf_alloc_len+0x1c0>)
   1369e:	4867      	ldr	r0, [pc, #412]	; (1383c <net_buf_alloc_len+0x1c4>)
   136a0:	f009 fa23 	bl	1caea <assert_print>
   136a4:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   136a6:	4864      	ldr	r0, [pc, #400]	; (13838 <net_buf_alloc_len+0x1c0>)
   136a8:	e019      	b.n	136de <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   136aa:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   136ae:	f04f 0320 	mov.w	r3, #32
   136b2:	f3ef 8b11 	mrs	fp, BASEPRI
   136b6:	f383 8812 	msr	BASEPRI_MAX, r3
   136ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   136be:	4630      	mov	r0, r6
   136c0:	f005 fc2c 	bl	18f1c <z_spin_lock_valid>
   136c4:	b968      	cbnz	r0, 136e2 <net_buf_alloc_len+0x6a>
   136c6:	2394      	movs	r3, #148	; 0x94
   136c8:	4a5d      	ldr	r2, [pc, #372]	; (13840 <net_buf_alloc_len+0x1c8>)
   136ca:	495e      	ldr	r1, [pc, #376]	; (13844 <net_buf_alloc_len+0x1cc>)
   136cc:	485b      	ldr	r0, [pc, #364]	; (1383c <net_buf_alloc_len+0x1c4>)
   136ce:	f009 fa0c 	bl	1caea <assert_print>
   136d2:	4631      	mov	r1, r6
   136d4:	485c      	ldr	r0, [pc, #368]	; (13848 <net_buf_alloc_len+0x1d0>)
   136d6:	f009 fa08 	bl	1caea <assert_print>
   136da:	2194      	movs	r1, #148	; 0x94
   136dc:	4858      	ldr	r0, [pc, #352]	; (13840 <net_buf_alloc_len+0x1c8>)
   136de:	f009 f9fd 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   136e2:	4630      	mov	r0, r6
   136e4:	f005 fc36 	bl	18f54 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   136e8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   136ea:	2b00      	cmp	r3, #0
   136ec:	d070      	beq.n	137d0 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   136ee:	8c2a      	ldrh	r2, [r5, #32]
   136f0:	429a      	cmp	r2, r3
   136f2:	d94d      	bls.n	13790 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   136f4:	2200      	movs	r2, #0
   136f6:	2300      	movs	r3, #0
   136f8:	4628      	mov	r0, r5
   136fa:	f005 febb 	bl	19474 <z_impl_k_queue_get>
			if (buf) {
   136fe:	4604      	mov	r4, r0
   13700:	2800      	cmp	r0, #0
   13702:	d045      	beq.n	13790 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13704:	4630      	mov	r0, r6
   13706:	f005 fc17 	bl	18f38 <z_spin_unlock_valid>
   1370a:	b958      	cbnz	r0, 13724 <net_buf_alloc_len+0xac>
   1370c:	23c2      	movs	r3, #194	; 0xc2
   1370e:	4a4c      	ldr	r2, [pc, #304]	; (13840 <net_buf_alloc_len+0x1c8>)
   13710:	494e      	ldr	r1, [pc, #312]	; (1384c <net_buf_alloc_len+0x1d4>)
   13712:	484a      	ldr	r0, [pc, #296]	; (1383c <net_buf_alloc_len+0x1c4>)
   13714:	f009 f9e9 	bl	1caea <assert_print>
   13718:	4631      	mov	r1, r6
   1371a:	484d      	ldr	r0, [pc, #308]	; (13850 <net_buf_alloc_len+0x1d8>)
   1371c:	f009 f9e5 	bl	1caea <assert_print>
   13720:	21c2      	movs	r1, #194	; 0xc2
   13722:	e7db      	b.n	136dc <net_buf_alloc_len+0x64>
	__asm__ volatile(
   13724:	f38b 8811 	msr	BASEPRI, fp
   13728:	f3bf 8f6f 	isb	sy
	if (size) {
   1372c:	9d03      	ldr	r5, [sp, #12]
   1372e:	2d00      	cmp	r5, #0
   13730:	d074      	beq.n	1381c <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13732:	ea59 030a 	orrs.w	r3, r9, sl
   13736:	d012      	beq.n	1375e <net_buf_alloc_len+0xe6>
   13738:	f1b9 3fff 	cmp.w	r9, #4294967295
   1373c:	bf08      	it	eq
   1373e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13742:	d00c      	beq.n	1375e <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   13744:	f008 fa16 	bl	1bb74 <sys_clock_tick_get>
   13748:	9b01      	ldr	r3, [sp, #4]
   1374a:	ebb3 0800 	subs.w	r8, r3, r0
   1374e:	9b02      	ldr	r3, [sp, #8]
   13750:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   13754:	2f00      	cmp	r7, #0
   13756:	bfbc      	itt	lt
   13758:	f04f 0800 	movlt.w	r8, #0
   1375c:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1375e:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13762:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13764:	4e3b      	ldr	r6, [pc, #236]	; (13854 <net_buf_alloc_len+0x1dc>)
   13766:	4642      	mov	r2, r8
   13768:	fb09 6303 	mla	r3, r9, r3, r6
   1376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1376e:	4620      	mov	r0, r4
   13770:	681b      	ldr	r3, [r3, #0]
   13772:	a903      	add	r1, sp, #12
   13774:	f8d3 a000 	ldr.w	sl, [r3]
   13778:	463b      	mov	r3, r7
   1377a:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1377c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1377e:	2800      	cmp	r0, #0
   13780:	d13c      	bne.n	137fc <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   13782:	79a0      	ldrb	r0, [r4, #6]
   13784:	4621      	mov	r1, r4
   13786:	fb00 6009 	mla	r0, r0, r9, r6
   1378a:	f00c fc45 	bl	20018 <k_queue_prepend>
}
   1378e:	e030      	b.n	137f2 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   13790:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   13792:	4630      	mov	r0, r6
   13794:	1e63      	subs	r3, r4, #1
   13796:	846b      	strh	r3, [r5, #34]	; 0x22
   13798:	f005 fbce 	bl	18f38 <z_spin_unlock_valid>
   1379c:	2800      	cmp	r0, #0
   1379e:	d0b5      	beq.n	1370c <net_buf_alloc_len+0x94>
   137a0:	f38b 8811 	msr	BASEPRI, fp
   137a4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   137a8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   137ac:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   137ae:	3317      	adds	r3, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   137b0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   137b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   137b4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   137b8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   137bc:	4b25      	ldr	r3, [pc, #148]	; (13854 <net_buf_alloc_len+0x1dc>)
   137be:	4a26      	ldr	r2, [pc, #152]	; (13858 <net_buf_alloc_len+0x1e0>)
   137c0:	1aeb      	subs	r3, r5, r3
   137c2:	109b      	asrs	r3, r3, #2
   137c4:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   137c6:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   137c8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   137cc:	71e3      	strb	r3, [r4, #7]
		goto success;
   137ce:	e7ad      	b.n	1372c <net_buf_alloc_len+0xb4>
   137d0:	4630      	mov	r0, r6
   137d2:	f005 fbb1 	bl	18f38 <z_spin_unlock_valid>
   137d6:	2800      	cmp	r0, #0
   137d8:	d098      	beq.n	1370c <net_buf_alloc_len+0x94>
   137da:	f38b 8811 	msr	BASEPRI, fp
   137de:	f3bf 8f6f 	isb	sy
   137e2:	4652      	mov	r2, sl
   137e4:	464b      	mov	r3, r9
   137e6:	4628      	mov	r0, r5
   137e8:	f005 fe44 	bl	19474 <z_impl_k_queue_get>
	if (!buf) {
   137ec:	4604      	mov	r4, r0
   137ee:	2800      	cmp	r0, #0
   137f0:	d19c      	bne.n	1372c <net_buf_alloc_len+0xb4>
		return NULL;
   137f2:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   137f4:	4620      	mov	r0, r4
   137f6:	b005      	add	sp, #20
   137f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   137fc:	9b03      	ldr	r3, [sp, #12]
   137fe:	429d      	cmp	r5, r3
   13800:	d90d      	bls.n	1381e <net_buf_alloc_len+0x1a6>
   13802:	4916      	ldr	r1, [pc, #88]	; (1385c <net_buf_alloc_len+0x1e4>)
   13804:	f240 1355 	movw	r3, #341	; 0x155
   13808:	4a0b      	ldr	r2, [pc, #44]	; (13838 <net_buf_alloc_len+0x1c0>)
   1380a:	480c      	ldr	r0, [pc, #48]	; (1383c <net_buf_alloc_len+0x1c4>)
   1380c:	f009 f96d 	bl	1caea <assert_print>
   13810:	4813      	ldr	r0, [pc, #76]	; (13860 <net_buf_alloc_len+0x1e8>)
   13812:	f009 f96a 	bl	1caea <assert_print>
   13816:	f240 1155 	movw	r1, #341	; 0x155
   1381a:	e744      	b.n	136a6 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1381c:	6125      	str	r5, [r4, #16]
	buf->frags = NULL;
   1381e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   13820:	2201      	movs	r2, #1
	buf->frags = NULL;
   13822:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   13824:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   13826:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   13828:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1382a:	6923      	ldr	r3, [r4, #16]
   1382c:	81e2      	strh	r2, [r4, #14]
   1382e:	60a3      	str	r3, [r4, #8]
}
   13830:	e7e0      	b.n	137f4 <net_buf_alloc_len+0x17c>
   13832:	bf00      	nop
   13834:	00023be2 	.word	0x00023be2
   13838:	00023b93 	.word	0x00023b93
   1383c:	00021547 	.word	0x00021547
   13840:	0002197b 	.word	0x0002197b
   13844:	000219d4 	.word	0x000219d4
   13848:	000219e9 	.word	0x000219e9
   1384c:	000219a8 	.word	0x000219a8
   13850:	000219bf 	.word	0x000219bf
   13854:	2000865c 	.word	0x2000865c
   13858:	c4ec4ec5 	.word	0xc4ec4ec5
   1385c:	00023be7 	.word	0x00023be7
   13860:	00023bf8 	.word	0x00023bf8

00013864 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   13864:	b570      	push	{r4, r5, r6, lr}
   13866:	4606      	mov	r6, r0
   13868:	f005 fe04 	bl	19474 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1386c:	4605      	mov	r5, r0
   1386e:	b128      	cbz	r0, 1387c <net_buf_get+0x18>
   13870:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13872:	7963      	ldrb	r3, [r4, #5]
   13874:	f013 0301 	ands.w	r3, r3, #1
   13878:	d102      	bne.n	13880 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1387a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1387c:	4628      	mov	r0, r5
   1387e:	bd70      	pop	{r4, r5, r6, pc}
   13880:	2200      	movs	r2, #0
   13882:	2300      	movs	r3, #0
   13884:	4630      	mov	r0, r6
   13886:	f005 fdf5 	bl	19474 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1388a:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1388c:	b958      	cbnz	r0, 138a6 <net_buf_get+0x42>
   1388e:	4909      	ldr	r1, [pc, #36]	; (138b4 <net_buf_get+0x50>)
   13890:	4809      	ldr	r0, [pc, #36]	; (138b8 <net_buf_get+0x54>)
   13892:	f240 13ad 	movw	r3, #429	; 0x1ad
   13896:	4a09      	ldr	r2, [pc, #36]	; (138bc <net_buf_get+0x58>)
   13898:	f009 f927 	bl	1caea <assert_print>
   1389c:	f240 11ad 	movw	r1, #429	; 0x1ad
   138a0:	4806      	ldr	r0, [pc, #24]	; (138bc <net_buf_get+0x58>)
   138a2:	f009 f91b 	bl	1cadc <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   138a6:	7963      	ldrb	r3, [r4, #5]
   138a8:	f023 0301 	bic.w	r3, r3, #1
   138ac:	7163      	strb	r3, [r4, #5]
   138ae:	4604      	mov	r4, r0
   138b0:	e7df      	b.n	13872 <net_buf_get+0xe>
   138b2:	bf00      	nop
   138b4:	00023bfb 	.word	0x00023bfb
   138b8:	00021547 	.word	0x00021547
   138bc:	00023b93 	.word	0x00023b93

000138c0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   138c0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   138c2:	b958      	cbnz	r0, 138dc <net_buf_simple_reserve+0x1c>
   138c4:	490d      	ldr	r1, [pc, #52]	; (138fc <net_buf_simple_reserve+0x3c>)
   138c6:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   138ca:	4a0d      	ldr	r2, [pc, #52]	; (13900 <net_buf_simple_reserve+0x40>)
   138cc:	480d      	ldr	r0, [pc, #52]	; (13904 <net_buf_simple_reserve+0x44>)
   138ce:	f009 f90c 	bl	1caea <assert_print>
   138d2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT_NO_MSG(buf->len == 0U);
   138d6:	480a      	ldr	r0, [pc, #40]	; (13900 <net_buf_simple_reserve+0x40>)
   138d8:	f009 f900 	bl	1cadc <assert_post_action>
   138dc:	8883      	ldrh	r3, [r0, #4]
   138de:	b14b      	cbz	r3, 138f4 <net_buf_simple_reserve+0x34>
   138e0:	4909      	ldr	r1, [pc, #36]	; (13908 <net_buf_simple_reserve+0x48>)
   138e2:	f240 13c5 	movw	r3, #453	; 0x1c5
   138e6:	4a06      	ldr	r2, [pc, #24]	; (13900 <net_buf_simple_reserve+0x40>)
   138e8:	4806      	ldr	r0, [pc, #24]	; (13904 <net_buf_simple_reserve+0x44>)
   138ea:	f009 f8fe 	bl	1caea <assert_print>
   138ee:	f240 11c5 	movw	r1, #453	; 0x1c5
   138f2:	e7f0      	b.n	138d6 <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   138f4:	6883      	ldr	r3, [r0, #8]
   138f6:	440b      	add	r3, r1
   138f8:	6003      	str	r3, [r0, #0]
}
   138fa:	bd08      	pop	{r3, pc}
   138fc:	00022980 	.word	0x00022980
   13900:	00023b93 	.word	0x00023b93
   13904:	00021547 	.word	0x00021547
   13908:	00023c07 	.word	0x00023c07

0001390c <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1390e:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   13910:	4604      	mov	r4, r0
   13912:	b958      	cbnz	r0, 1392c <net_buf_slist_put+0x20>
   13914:	492b      	ldr	r1, [pc, #172]	; (139c4 <net_buf_slist_put+0xb8>)
   13916:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1391a:	4a2b      	ldr	r2, [pc, #172]	; (139c8 <net_buf_slist_put+0xbc>)
   1391c:	482b      	ldr	r0, [pc, #172]	; (139cc <net_buf_slist_put+0xc0>)
   1391e:	f009 f8e4 	bl	1caea <assert_print>
   13922:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(buf);
   13926:	4828      	ldr	r0, [pc, #160]	; (139c8 <net_buf_slist_put+0xbc>)
   13928:	f009 f8d8 	bl	1cadc <assert_post_action>
   1392c:	bb51      	cbnz	r1, 13984 <net_buf_slist_put+0x78>
   1392e:	4928      	ldr	r1, [pc, #160]	; (139d0 <net_buf_slist_put+0xc4>)
   13930:	f240 13d3 	movw	r3, #467	; 0x1d3
   13934:	4a24      	ldr	r2, [pc, #144]	; (139c8 <net_buf_slist_put+0xbc>)
   13936:	4825      	ldr	r0, [pc, #148]	; (139cc <net_buf_slist_put+0xc0>)
   13938:	f009 f8d7 	bl	1caea <assert_print>
   1393c:	f240 11d3 	movw	r1, #467	; 0x1d3
   13940:	e7f1      	b.n	13926 <net_buf_slist_put+0x1a>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   13942:	7973      	ldrb	r3, [r6, #5]
   13944:	f043 0301 	orr.w	r3, r3, #1
   13948:	7173      	strb	r3, [r6, #5]
   1394a:	4616      	mov	r6, r2
	for (tail = buf; tail->frags; tail = tail->frags) {
   1394c:	6832      	ldr	r2, [r6, #0]
   1394e:	2a00      	cmp	r2, #0
   13950:	d1f7      	bne.n	13942 <net_buf_slist_put+0x36>
	__asm__ volatile(
   13952:	f04f 0320 	mov.w	r3, #32
   13956:	f3ef 8711 	mrs	r7, BASEPRI
   1395a:	f383 8812 	msr	BASEPRI_MAX, r3
   1395e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13962:	481c      	ldr	r0, [pc, #112]	; (139d4 <net_buf_slist_put+0xc8>)
   13964:	f005 fada 	bl	18f1c <z_spin_lock_valid>
   13968:	b970      	cbnz	r0, 13988 <net_buf_slist_put+0x7c>
   1396a:	2394      	movs	r3, #148	; 0x94
   1396c:	4a1a      	ldr	r2, [pc, #104]	; (139d8 <net_buf_slist_put+0xcc>)
   1396e:	491b      	ldr	r1, [pc, #108]	; (139dc <net_buf_slist_put+0xd0>)
   13970:	4816      	ldr	r0, [pc, #88]	; (139cc <net_buf_slist_put+0xc0>)
   13972:	f009 f8ba 	bl	1caea <assert_print>
   13976:	4917      	ldr	r1, [pc, #92]	; (139d4 <net_buf_slist_put+0xc8>)
   13978:	4819      	ldr	r0, [pc, #100]	; (139e0 <net_buf_slist_put+0xd4>)
   1397a:	f009 f8b6 	bl	1caea <assert_print>
   1397e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13980:	4815      	ldr	r0, [pc, #84]	; (139d8 <net_buf_slist_put+0xcc>)
   13982:	e7d1      	b.n	13928 <net_buf_slist_put+0x1c>
   13984:	460e      	mov	r6, r1
   13986:	e7e1      	b.n	1394c <net_buf_slist_put+0x40>
	z_spin_lock_set_owner(l);
   13988:	4812      	ldr	r0, [pc, #72]	; (139d4 <net_buf_slist_put+0xc8>)
   1398a:	f005 fae3 	bl	18f54 <z_spin_lock_set_owner>
	return list->tail;
   1398e:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   13990:	b98b      	cbnz	r3, 139b6 <net_buf_slist_put+0xaa>
	list->head = node;
   13992:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13994:	480f      	ldr	r0, [pc, #60]	; (139d4 <net_buf_slist_put+0xc8>)
	list->tail = node;
   13996:	6066      	str	r6, [r4, #4]
   13998:	f005 face 	bl	18f38 <z_spin_unlock_valid>
   1399c:	b968      	cbnz	r0, 139ba <net_buf_slist_put+0xae>
   1399e:	23c2      	movs	r3, #194	; 0xc2
   139a0:	4a0d      	ldr	r2, [pc, #52]	; (139d8 <net_buf_slist_put+0xcc>)
   139a2:	4910      	ldr	r1, [pc, #64]	; (139e4 <net_buf_slist_put+0xd8>)
   139a4:	4809      	ldr	r0, [pc, #36]	; (139cc <net_buf_slist_put+0xc0>)
   139a6:	f009 f8a0 	bl	1caea <assert_print>
   139aa:	490a      	ldr	r1, [pc, #40]	; (139d4 <net_buf_slist_put+0xc8>)
   139ac:	480e      	ldr	r0, [pc, #56]	; (139e8 <net_buf_slist_put+0xdc>)
   139ae:	f009 f89c 	bl	1caea <assert_print>
   139b2:	21c2      	movs	r1, #194	; 0xc2
   139b4:	e7e4      	b.n	13980 <net_buf_slist_put+0x74>
	parent->next = child;
   139b6:	601d      	str	r5, [r3, #0]
}
   139b8:	e7ec      	b.n	13994 <net_buf_slist_put+0x88>
	__asm__ volatile(
   139ba:	f387 8811 	msr	BASEPRI, r7
   139be:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   139c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   139c4:	00023c16 	.word	0x00023c16
   139c8:	00023b93 	.word	0x00023b93
   139cc:	00021547 	.word	0x00021547
   139d0:	00022980 	.word	0x00022980
   139d4:	20009a08 	.word	0x20009a08
   139d8:	0002197b 	.word	0x0002197b
   139dc:	000219d4 	.word	0x000219d4
   139e0:	000219e9 	.word	0x000219e9
   139e4:	000219a8 	.word	0x000219a8
   139e8:	000219bf 	.word	0x000219bf

000139ec <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   139ec:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   139ee:	4604      	mov	r4, r0
   139f0:	b950      	cbnz	r0, 13a08 <net_buf_slist_get+0x1c>
   139f2:	4933      	ldr	r1, [pc, #204]	; (13ac0 <net_buf_slist_get+0xd4>)
   139f4:	f240 13e3 	movw	r3, #483	; 0x1e3
   139f8:	4a32      	ldr	r2, [pc, #200]	; (13ac4 <net_buf_slist_get+0xd8>)
   139fa:	4833      	ldr	r0, [pc, #204]	; (13ac8 <net_buf_slist_get+0xdc>)
   139fc:	f009 f875 	bl	1caea <assert_print>
   13a00:	f240 11e3 	movw	r1, #483	; 0x1e3

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   13a04:	482f      	ldr	r0, [pc, #188]	; (13ac4 <net_buf_slist_get+0xd8>)
   13a06:	e017      	b.n	13a38 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   13a08:	f04f 0320 	mov.w	r3, #32
   13a0c:	f3ef 8611 	mrs	r6, BASEPRI
   13a10:	f383 8812 	msr	BASEPRI_MAX, r3
   13a14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13a18:	482c      	ldr	r0, [pc, #176]	; (13acc <net_buf_slist_get+0xe0>)
   13a1a:	f005 fa7f 	bl	18f1c <z_spin_lock_valid>
   13a1e:	b968      	cbnz	r0, 13a3c <net_buf_slist_get+0x50>
   13a20:	2394      	movs	r3, #148	; 0x94
   13a22:	4a2b      	ldr	r2, [pc, #172]	; (13ad0 <net_buf_slist_get+0xe4>)
   13a24:	492b      	ldr	r1, [pc, #172]	; (13ad4 <net_buf_slist_get+0xe8>)
   13a26:	4828      	ldr	r0, [pc, #160]	; (13ac8 <net_buf_slist_get+0xdc>)
   13a28:	f009 f85f 	bl	1caea <assert_print>
   13a2c:	4927      	ldr	r1, [pc, #156]	; (13acc <net_buf_slist_get+0xe0>)
   13a2e:	482a      	ldr	r0, [pc, #168]	; (13ad8 <net_buf_slist_get+0xec>)
   13a30:	f009 f85b 	bl	1caea <assert_print>
   13a34:	2194      	movs	r1, #148	; 0x94
   13a36:	4826      	ldr	r0, [pc, #152]	; (13ad0 <net_buf_slist_get+0xe4>)
   13a38:	f009 f850 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   13a3c:	4823      	ldr	r0, [pc, #140]	; (13acc <net_buf_slist_get+0xe0>)
   13a3e:	f005 fa89 	bl	18f54 <z_spin_lock_set_owner>
	return list->head;
   13a42:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   13a44:	b15d      	cbz	r5, 13a5e <net_buf_slist_get+0x72>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13a46:	6862      	ldr	r2, [r4, #4]
	return node->next;
   13a48:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13a4a:	4295      	cmp	r5, r2
	list->head = node;
   13a4c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   13a4e:	bf08      	it	eq
   13a50:	6063      	streq	r3, [r4, #4]
{
   13a52:	462b      	mov	r3, r5
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13a54:	795a      	ldrb	r2, [r3, #5]
   13a56:	f012 0201 	ands.w	r2, r2, #1
   13a5a:	d110      	bne.n	13a7e <net_buf_slist_get+0x92>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   13a5c:	601a      	str	r2, [r3, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13a5e:	481b      	ldr	r0, [pc, #108]	; (13acc <net_buf_slist_get+0xe0>)
   13a60:	f005 fa6a 	bl	18f38 <z_spin_unlock_valid>
   13a64:	bb28      	cbnz	r0, 13ab2 <net_buf_slist_get+0xc6>
   13a66:	23c2      	movs	r3, #194	; 0xc2
   13a68:	4a19      	ldr	r2, [pc, #100]	; (13ad0 <net_buf_slist_get+0xe4>)
   13a6a:	491c      	ldr	r1, [pc, #112]	; (13adc <net_buf_slist_get+0xf0>)
   13a6c:	4816      	ldr	r0, [pc, #88]	; (13ac8 <net_buf_slist_get+0xdc>)
   13a6e:	f009 f83c 	bl	1caea <assert_print>
   13a72:	4916      	ldr	r1, [pc, #88]	; (13acc <net_buf_slist_get+0xe0>)
   13a74:	481a      	ldr	r0, [pc, #104]	; (13ae0 <net_buf_slist_get+0xf4>)
   13a76:	f009 f838 	bl	1caea <assert_print>
   13a7a:	21c2      	movs	r1, #194	; 0xc2
   13a7c:	e7db      	b.n	13a36 <net_buf_slist_get+0x4a>
	return list->head;
   13a7e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_GET(slist, snode)
   13a80:	b162      	cbz	r2, 13a9c <net_buf_slist_get+0xb0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13a82:	6860      	ldr	r0, [r4, #4]
	return node->next;
   13a84:	6811      	ldr	r1, [r2, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13a86:	4282      	cmp	r2, r0
	list->head = node;
   13a88:	6021      	str	r1, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13a8a:	d100      	bne.n	13a8e <net_buf_slist_get+0xa2>
	list->tail = node;
   13a8c:	6061      	str	r1, [r4, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   13a8e:	7959      	ldrb	r1, [r3, #5]
			frag->frags = (void *)sys_slist_get(list);
   13a90:	601a      	str	r2, [r3, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   13a92:	f021 0101 	bic.w	r1, r1, #1
   13a96:	7159      	strb	r1, [r3, #5]
   13a98:	4613      	mov	r3, r2
   13a9a:	e7db      	b.n	13a54 <net_buf_slist_get+0x68>
			frag->frags = (void *)sys_slist_get(list);
   13a9c:	601a      	str	r2, [r3, #0]
			__ASSERT_NO_MSG(frag->frags);
   13a9e:	4911      	ldr	r1, [pc, #68]	; (13ae4 <net_buf_slist_get+0xf8>)
   13aa0:	f240 13ed 	movw	r3, #493	; 0x1ed
   13aa4:	4a07      	ldr	r2, [pc, #28]	; (13ac4 <net_buf_slist_get+0xd8>)
   13aa6:	4808      	ldr	r0, [pc, #32]	; (13ac8 <net_buf_slist_get+0xdc>)
   13aa8:	f009 f81f 	bl	1caea <assert_print>
   13aac:	f240 11ed 	movw	r1, #493	; 0x1ed
   13ab0:	e7a8      	b.n	13a04 <net_buf_slist_get+0x18>
	__asm__ volatile(
   13ab2:	f386 8811 	msr	BASEPRI, r6
   13ab6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   13aba:	4628      	mov	r0, r5
   13abc:	bd70      	pop	{r4, r5, r6, pc}
   13abe:	bf00      	nop
   13ac0:	00023c16 	.word	0x00023c16
   13ac4:	00023b93 	.word	0x00023b93
   13ac8:	00021547 	.word	0x00021547
   13acc:	20009a08 	.word	0x20009a08
   13ad0:	0002197b 	.word	0x0002197b
   13ad4:	000219d4 	.word	0x000219d4
   13ad8:	000219e9 	.word	0x000219e9
   13adc:	000219a8 	.word	0x000219a8
   13ae0:	000219bf 	.word	0x000219bf
   13ae4:	00023bfb 	.word	0x00023bfb

00013ae8 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   13ae8:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   13aea:	b958      	cbnz	r0, 13b04 <net_buf_put+0x1c>
   13aec:	4912      	ldr	r1, [pc, #72]	; (13b38 <net_buf_put+0x50>)
   13aee:	f44f 7300 	mov.w	r3, #512	; 0x200
   13af2:	4a12      	ldr	r2, [pc, #72]	; (13b3c <net_buf_put+0x54>)
   13af4:	4812      	ldr	r0, [pc, #72]	; (13b40 <net_buf_put+0x58>)
   13af6:	f008 fff8 	bl	1caea <assert_print>
   13afa:	f44f 7100 	mov.w	r1, #512	; 0x200
	__ASSERT_NO_MSG(buf);
   13afe:	480f      	ldr	r0, [pc, #60]	; (13b3c <net_buf_put+0x54>)
   13b00:	f008 ffec 	bl	1cadc <assert_post_action>
   13b04:	b9a9      	cbnz	r1, 13b32 <net_buf_put+0x4a>
   13b06:	490f      	ldr	r1, [pc, #60]	; (13b44 <net_buf_put+0x5c>)
   13b08:	f240 2301 	movw	r3, #513	; 0x201
   13b0c:	4a0b      	ldr	r2, [pc, #44]	; (13b3c <net_buf_put+0x54>)
   13b0e:	480c      	ldr	r0, [pc, #48]	; (13b40 <net_buf_put+0x58>)
   13b10:	f008 ffeb 	bl	1caea <assert_print>
   13b14:	f240 2101 	movw	r1, #513	; 0x201
   13b18:	e7f1      	b.n	13afe <net_buf_put+0x16>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   13b1a:	7953      	ldrb	r3, [r2, #5]
   13b1c:	f043 0301 	orr.w	r3, r3, #1
   13b20:	7153      	strb	r3, [r2, #5]
   13b22:	4622      	mov	r2, r4
	for (tail = buf; tail->frags; tail = tail->frags) {
   13b24:	6814      	ldr	r4, [r2, #0]
   13b26:	2c00      	cmp	r4, #0
   13b28:	d1f7      	bne.n	13b1a <net_buf_put+0x32>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   13b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put_list(fifo, buf, tail);
   13b2e:	f005 bc43 	b.w	193b8 <k_queue_append_list>
   13b32:	460a      	mov	r2, r1
   13b34:	e7f6      	b.n	13b24 <net_buf_put+0x3c>
   13b36:	bf00      	nop
   13b38:	00023c1b 	.word	0x00023c1b
   13b3c:	00023b93 	.word	0x00023b93
   13b40:	00021547 	.word	0x00021547
   13b44:	00022980 	.word	0x00022980

00013b48 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   13b4c:	4605      	mov	r5, r0
   13b4e:	b328      	cbz	r0, 13b9c <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13b50:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   13b52:	f04f 0834 	mov.w	r8, #52	; 0x34
   13b56:	4e1a      	ldr	r6, [pc, #104]	; (13bc0 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   13b58:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   13b5a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13b5c:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   13b5e:	3b01      	subs	r3, #1
   13b60:	b2db      	uxtb	r3, r3
   13b62:	7123      	strb	r3, [r4, #4]
   13b64:	b9c3      	cbnz	r3, 13b98 <net_buf_unref+0x50>
		if (buf->__buf) {
   13b66:	6921      	ldr	r1, [r4, #16]
   13b68:	b159      	cbz	r1, 13b82 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13b6a:	7963      	ldrb	r3, [r4, #5]
   13b6c:	079b      	lsls	r3, r3, #30
   13b6e:	d407      	bmi.n	13b80 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13b70:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   13b72:	4620      	mov	r0, r4
   13b74:	fb08 6303 	mla	r3, r8, r3, r6
   13b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13b7a:	681b      	ldr	r3, [r3, #0]
   13b7c:	689b      	ldr	r3, [r3, #8]
   13b7e:	4798      	blx	r3
			buf->__buf = NULL;
   13b80:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   13b82:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13b84:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   13b86:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   13b8a:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   13b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13b8e:	b18b      	cbz	r3, 13bb4 <net_buf_unref+0x6c>
			pool->destroy(buf);
   13b90:	4620      	mov	r0, r4
   13b92:	4798      	blx	r3
	while (buf) {
   13b94:	2d00      	cmp	r5, #0
   13b96:	d1df      	bne.n	13b58 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   13b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   13b9c:	4909      	ldr	r1, [pc, #36]	; (13bc4 <net_buf_unref+0x7c>)
   13b9e:	480a      	ldr	r0, [pc, #40]	; (13bc8 <net_buf_unref+0x80>)
   13ba0:	f44f 7304 	mov.w	r3, #528	; 0x210
   13ba4:	4a09      	ldr	r2, [pc, #36]	; (13bcc <net_buf_unref+0x84>)
   13ba6:	f008 ffa0 	bl	1caea <assert_print>
   13baa:	f44f 7104 	mov.w	r1, #528	; 0x210
   13bae:	4807      	ldr	r0, [pc, #28]	; (13bcc <net_buf_unref+0x84>)
   13bb0:	f008 ff94 	bl	1cadc <assert_post_action>
	k_lifo_put(&pool->free, buf);
   13bb4:	4621      	mov	r1, r4
   13bb6:	fb00 6008 	mla	r0, r0, r8, r6
   13bba:	f00c fa2d 	bl	20018 <k_queue_prepend>
}
   13bbe:	e7e9      	b.n	13b94 <net_buf_unref+0x4c>
   13bc0:	2000865c 	.word	0x2000865c
   13bc4:	00022980 	.word	0x00022980
   13bc8:	00021547 	.word	0x00021547
   13bcc:	00023b93 	.word	0x00023b93

00013bd0 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   13bd0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   13bd2:	b958      	cbnz	r0, 13bec <net_buf_ref+0x1c>
   13bd4:	4907      	ldr	r1, [pc, #28]	; (13bf4 <net_buf_ref+0x24>)
   13bd6:	4808      	ldr	r0, [pc, #32]	; (13bf8 <net_buf_ref+0x28>)
   13bd8:	f240 233f 	movw	r3, #575	; 0x23f
   13bdc:	4a07      	ldr	r2, [pc, #28]	; (13bfc <net_buf_ref+0x2c>)
   13bde:	f008 ff84 	bl	1caea <assert_print>
   13be2:	f240 213f 	movw	r1, #575	; 0x23f
   13be6:	4805      	ldr	r0, [pc, #20]	; (13bfc <net_buf_ref+0x2c>)
   13be8:	f008 ff78 	bl	1cadc <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13bec:	7902      	ldrb	r2, [r0, #4]
   13bee:	3201      	adds	r2, #1
   13bf0:	7102      	strb	r2, [r0, #4]
	return buf;
}
   13bf2:	bd08      	pop	{r3, pc}
   13bf4:	00022980 	.word	0x00022980
   13bf8:	00021547 	.word	0x00021547
   13bfc:	00023b93 	.word	0x00023b93

00013c00 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   13c00:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   13c02:	4603      	mov	r3, r0
   13c04:	b958      	cbnz	r0, 13c1e <net_buf_frag_last+0x1e>
   13c06:	4908      	ldr	r1, [pc, #32]	; (13c28 <net_buf_frag_last+0x28>)
   13c08:	4808      	ldr	r0, [pc, #32]	; (13c2c <net_buf_frag_last+0x2c>)
   13c0a:	f44f 731f 	mov.w	r3, #636	; 0x27c
   13c0e:	4a08      	ldr	r2, [pc, #32]	; (13c30 <net_buf_frag_last+0x30>)
   13c10:	f008 ff6b 	bl	1caea <assert_print>
   13c14:	f44f 711f 	mov.w	r1, #636	; 0x27c
   13c18:	4805      	ldr	r0, [pc, #20]	; (13c30 <net_buf_frag_last+0x30>)
   13c1a:	f008 ff5f 	bl	1cadc <assert_post_action>

	while (buf->frags) {
   13c1e:	4618      	mov	r0, r3
   13c20:	681b      	ldr	r3, [r3, #0]
   13c22:	2b00      	cmp	r3, #0
   13c24:	d1fb      	bne.n	13c1e <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   13c26:	bd08      	pop	{r3, pc}
   13c28:	00022980 	.word	0x00022980
   13c2c:	00021547 	.word	0x00021547
   13c30:	00023b93 	.word	0x00023b93

00013c34 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   13c34:	b570      	push	{r4, r5, r6, lr}
   13c36:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   13c38:	4604      	mov	r4, r0
   13c3a:	b958      	cbnz	r0, 13c54 <net_buf_frag_insert+0x20>
   13c3c:	490f      	ldr	r1, [pc, #60]	; (13c7c <net_buf_frag_insert+0x48>)
   13c3e:	f240 2387 	movw	r3, #647	; 0x287
   13c42:	4a0f      	ldr	r2, [pc, #60]	; (13c80 <net_buf_frag_insert+0x4c>)
   13c44:	480f      	ldr	r0, [pc, #60]	; (13c84 <net_buf_frag_insert+0x50>)
   13c46:	f008 ff50 	bl	1caea <assert_print>
   13c4a:	f240 2187 	movw	r1, #647	; 0x287
	__ASSERT_NO_MSG(frag);
   13c4e:	480c      	ldr	r0, [pc, #48]	; (13c80 <net_buf_frag_insert+0x4c>)
   13c50:	f008 ff44 	bl	1cadc <assert_post_action>
   13c54:	b949      	cbnz	r1, 13c6a <net_buf_frag_insert+0x36>
   13c56:	490c      	ldr	r1, [pc, #48]	; (13c88 <net_buf_frag_insert+0x54>)
   13c58:	f44f 7322 	mov.w	r3, #648	; 0x288
   13c5c:	4a08      	ldr	r2, [pc, #32]	; (13c80 <net_buf_frag_insert+0x4c>)
   13c5e:	4809      	ldr	r0, [pc, #36]	; (13c84 <net_buf_frag_insert+0x50>)
   13c60:	f008 ff43 	bl	1caea <assert_print>
   13c64:	f44f 7122 	mov.w	r1, #648	; 0x288
   13c68:	e7f1      	b.n	13c4e <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   13c6a:	6806      	ldr	r6, [r0, #0]
   13c6c:	b11e      	cbz	r6, 13c76 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   13c6e:	4608      	mov	r0, r1
   13c70:	f7ff ffc6 	bl	13c00 <net_buf_frag_last>
   13c74:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   13c76:	6025      	str	r5, [r4, #0]
}
   13c78:	bd70      	pop	{r4, r5, r6, pc}
   13c7a:	bf00      	nop
   13c7c:	00023c20 	.word	0x00023c20
   13c80:	00023b93 	.word	0x00023b93
   13c84:	00021547 	.word	0x00021547
   13c88:	00023c27 	.word	0x00023c27

00013c8c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   13c8c:	b538      	push	{r3, r4, r5, lr}
   13c8e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   13c90:	460c      	mov	r4, r1
   13c92:	b959      	cbnz	r1, 13cac <net_buf_frag_add+0x20>
   13c94:	490c      	ldr	r1, [pc, #48]	; (13cc8 <net_buf_frag_add+0x3c>)
   13c96:	480d      	ldr	r0, [pc, #52]	; (13ccc <net_buf_frag_add+0x40>)
   13c98:	f240 2393 	movw	r3, #659	; 0x293
   13c9c:	4a0c      	ldr	r2, [pc, #48]	; (13cd0 <net_buf_frag_add+0x44>)
   13c9e:	f008 ff24 	bl	1caea <assert_print>
   13ca2:	f240 2193 	movw	r1, #659	; 0x293
   13ca6:	480a      	ldr	r0, [pc, #40]	; (13cd0 <net_buf_frag_add+0x44>)
   13ca8:	f008 ff18 	bl	1cadc <assert_post_action>

	if (!head) {
   13cac:	b920      	cbnz	r0, 13cb8 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   13cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   13cb2:	4608      	mov	r0, r1
   13cb4:	f7ff bf8c 	b.w	13bd0 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   13cb8:	f7ff ffa2 	bl	13c00 <net_buf_frag_last>
   13cbc:	4621      	mov	r1, r4
   13cbe:	f7ff ffb9 	bl	13c34 <net_buf_frag_insert>
}
   13cc2:	4628      	mov	r0, r5
   13cc4:	bd38      	pop	{r3, r4, r5, pc}
   13cc6:	bf00      	nop
   13cc8:	00023c27 	.word	0x00023c27
   13ccc:	00021547 	.word	0x00021547
   13cd0:	00023b93 	.word	0x00023b93

00013cd4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   13cd4:	b508      	push	{r3, lr}
   13cd6:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13cd8:	6800      	ldr	r0, [r0, #0]
   13cda:	689a      	ldr	r2, [r3, #8]
   13cdc:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   13cde:	4291      	cmp	r1, r2
   13ce0:	d90b      	bls.n	13cfa <net_buf_simple_push+0x26>
   13ce2:	4909      	ldr	r1, [pc, #36]	; (13d08 <net_buf_simple_push+0x34>)
   13ce4:	4809      	ldr	r0, [pc, #36]	; (13d0c <net_buf_simple_push+0x38>)
   13ce6:	f240 4317 	movw	r3, #1047	; 0x417
   13cea:	4a09      	ldr	r2, [pc, #36]	; (13d10 <net_buf_simple_push+0x3c>)
   13cec:	f008 fefd 	bl	1caea <assert_print>
   13cf0:	f240 4117 	movw	r1, #1047	; 0x417
   13cf4:	4806      	ldr	r0, [pc, #24]	; (13d10 <net_buf_simple_push+0x3c>)
   13cf6:	f008 fef1 	bl	1cadc <assert_post_action>
	buf->len += len;
   13cfa:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   13cfc:	1a40      	subs	r0, r0, r1
	buf->len += len;
   13cfe:	4411      	add	r1, r2
	buf->data -= len;
   13d00:	6018      	str	r0, [r3, #0]
	buf->len += len;
   13d02:	8099      	strh	r1, [r3, #4]
}
   13d04:	bd08      	pop	{r3, pc}
   13d06:	bf00      	nop
   13d08:	00023c3c 	.word	0x00023c3c
   13d0c:	00021547 	.word	0x00021547
   13d10:	00023b93 	.word	0x00023b93

00013d14 <net_buf_simple_pull>:
{
   13d14:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   13d16:	8882      	ldrh	r2, [r0, #4]
{
   13d18:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   13d1a:	428a      	cmp	r2, r1
   13d1c:	d20b      	bcs.n	13d36 <net_buf_simple_pull+0x22>
   13d1e:	4909      	ldr	r1, [pc, #36]	; (13d44 <net_buf_simple_pull+0x30>)
   13d20:	4809      	ldr	r0, [pc, #36]	; (13d48 <net_buf_simple_pull+0x34>)
   13d22:	f240 4377 	movw	r3, #1143	; 0x477
   13d26:	4a09      	ldr	r2, [pc, #36]	; (13d4c <net_buf_simple_pull+0x38>)
   13d28:	f008 fedf 	bl	1caea <assert_print>
   13d2c:	f240 4177 	movw	r1, #1143	; 0x477
   13d30:	4806      	ldr	r0, [pc, #24]	; (13d4c <net_buf_simple_pull+0x38>)
   13d32:	f008 fed3 	bl	1cadc <assert_post_action>
	buf->len -= len;
   13d36:	1a52      	subs	r2, r2, r1
   13d38:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   13d3a:	6800      	ldr	r0, [r0, #0]
   13d3c:	4408      	add	r0, r1
   13d3e:	6018      	str	r0, [r3, #0]
}
   13d40:	bd08      	pop	{r3, pc}
   13d42:	bf00      	nop
   13d44:	00023c2c 	.word	0x00023c2c
   13d48:	00021547 	.word	0x00021547
   13d4c:	00023b93 	.word	0x00023b93

00013d50 <net_buf_simple_pull_mem>:
{
   13d50:	b508      	push	{r3, lr}
   13d52:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   13d54:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   13d56:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   13d58:	428a      	cmp	r2, r1
   13d5a:	d20b      	bcs.n	13d74 <net_buf_simple_pull_mem+0x24>
   13d5c:	4908      	ldr	r1, [pc, #32]	; (13d80 <net_buf_simple_pull_mem+0x30>)
   13d5e:	4809      	ldr	r0, [pc, #36]	; (13d84 <net_buf_simple_pull_mem+0x34>)
   13d60:	f240 4383 	movw	r3, #1155	; 0x483
   13d64:	4a08      	ldr	r2, [pc, #32]	; (13d88 <net_buf_simple_pull_mem+0x38>)
   13d66:	f008 fec0 	bl	1caea <assert_print>
   13d6a:	f240 4183 	movw	r1, #1155	; 0x483
   13d6e:	4806      	ldr	r0, [pc, #24]	; (13d88 <net_buf_simple_pull_mem+0x38>)
   13d70:	f008 feb4 	bl	1cadc <assert_post_action>
	buf->len -= len;
   13d74:	1a52      	subs	r2, r2, r1
	buf->data += len;
   13d76:	4401      	add	r1, r0
	buf->len -= len;
   13d78:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   13d7a:	6019      	str	r1, [r3, #0]
}
   13d7c:	bd08      	pop	{r3, pc}
   13d7e:	bf00      	nop
   13d80:	00023c2c 	.word	0x00023c2c
   13d84:	00021547 	.word	0x00021547
   13d88:	00023b93 	.word	0x00023b93

00013d8c <net_buf_simple_add>:
{
   13d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   13d8e:	8885      	ldrh	r5, [r0, #4]
   13d90:	6803      	ldr	r3, [r0, #0]
   13d92:	460e      	mov	r6, r1
   13d94:	4604      	mov	r4, r0
   13d96:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   13d98:	f00b f870 	bl	1ee7c <net_buf_simple_tailroom>
   13d9c:	42b0      	cmp	r0, r6
   13d9e:	d20b      	bcs.n	13db8 <net_buf_simple_add+0x2c>
   13da0:	4907      	ldr	r1, [pc, #28]	; (13dc0 <net_buf_simple_add+0x34>)
   13da2:	4808      	ldr	r0, [pc, #32]	; (13dc4 <net_buf_simple_add+0x38>)
   13da4:	f44f 734a 	mov.w	r3, #808	; 0x328
   13da8:	4a07      	ldr	r2, [pc, #28]	; (13dc8 <net_buf_simple_add+0x3c>)
   13daa:	f008 fe9e 	bl	1caea <assert_print>
   13dae:	f44f 714a 	mov.w	r1, #808	; 0x328
   13db2:	4805      	ldr	r0, [pc, #20]	; (13dc8 <net_buf_simple_add+0x3c>)
   13db4:	f008 fe92 	bl	1cadc <assert_post_action>
	buf->len += len;
   13db8:	4435      	add	r5, r6
   13dba:	80a5      	strh	r5, [r4, #4]
}
   13dbc:	4638      	mov	r0, r7
   13dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13dc0:	00023c60 	.word	0x00023c60
   13dc4:	00021547 	.word	0x00021547
   13dc8:	00023b93 	.word	0x00023b93

00013dcc <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   13dcc:	b508      	push	{r3, lr}
   13dce:	4804      	ldr	r0, [pc, #16]	; (13de0 <xoshiro128_initialize+0x14>)
   13dd0:	f00c f8ae 	bl	1ff30 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   13dd4:	2800      	cmp	r0, #0
}
   13dd6:	bf0c      	ite	eq
   13dd8:	f06f 0012 	mvneq.w	r0, #18
   13ddc:	2000      	movne	r0, #0
   13dde:	bd08      	pop	{r3, pc}
   13de0:	0002049c 	.word	0x0002049c

00013de4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13de6:	2340      	movs	r3, #64	; 0x40
{
   13de8:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13dea:	490a      	ldr	r1, [pc, #40]	; (13e14 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13dec:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   13dee:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13df0:	1149      	asrs	r1, r1, #5
{
   13df2:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13df4:	4623      	mov	r3, r4
   13df6:	4a08      	ldr	r2, [pc, #32]	; (13e18 <onoff_start+0x34>)
   13df8:	4808      	ldr	r0, [pc, #32]	; (13e1c <onoff_start+0x38>)
   13dfa:	f00b f86d 	bl	1eed8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   13dfe:	1e01      	subs	r1, r0, #0
   13e00:	da05      	bge.n	13e0e <onoff_start+0x2a>
		notify(mgr, err);
   13e02:	4628      	mov	r0, r5
   13e04:	4623      	mov	r3, r4
	}
}
   13e06:	b003      	add	sp, #12
   13e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   13e0c:	4718      	bx	r3
}
   13e0e:	b003      	add	sp, #12
   13e10:	bd30      	pop	{r4, r5, pc}
   13e12:	bf00      	nop
   13e14:	20009a20 	.word	0x20009a20
   13e18:	0001ef47 	.word	0x0001ef47
   13e1c:	0002043c 	.word	0x0002043c

00013e20 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e20:	b2c9      	uxtb	r1, r1
   13e22:	2903      	cmp	r1, #3
{
   13e24:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e26:	d909      	bls.n	13e3c <get_status+0x1c>
   13e28:	4909      	ldr	r1, [pc, #36]	; (13e50 <get_status+0x30>)
   13e2a:	480a      	ldr	r0, [pc, #40]	; (13e54 <get_status+0x34>)
   13e2c:	237a      	movs	r3, #122	; 0x7a
   13e2e:	4a0a      	ldr	r2, [pc, #40]	; (13e58 <get_status+0x38>)
   13e30:	f008 fe5b 	bl	1caea <assert_print>
   13e34:	217a      	movs	r1, #122	; 0x7a
   13e36:	4808      	ldr	r0, [pc, #32]	; (13e58 <get_status+0x38>)
   13e38:	f008 fe50 	bl	1cadc <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13e3c:	220c      	movs	r2, #12
   13e3e:	6903      	ldr	r3, [r0, #16]
   13e40:	fb01 3302 	mla	r3, r1, r2, r3
   13e44:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   13e48:	f000 0007 	and.w	r0, r0, #7
   13e4c:	bd08      	pop	{r3, pc}
   13e4e:	bf00      	nop
   13e50:	00023cc9 	.word	0x00023cc9
   13e54:	00021547 	.word	0x00021547
   13e58:	00023c8c 	.word	0x00023c8c

00013e5c <stop>:
{
   13e5c:	b570      	push	{r4, r5, r6, lr}
   13e5e:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e60:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   13e62:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e64:	d90b      	bls.n	13e7e <stop+0x22>
   13e66:	491a      	ldr	r1, [pc, #104]	; (13ed0 <stop+0x74>)
   13e68:	481a      	ldr	r0, [pc, #104]	; (13ed4 <stop+0x78>)
   13e6a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   13e6e:	4a1a      	ldr	r2, [pc, #104]	; (13ed8 <stop+0x7c>)
   13e70:	f008 fe3b 	bl	1caea <assert_print>
   13e74:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   13e78:	4817      	ldr	r0, [pc, #92]	; (13ed8 <stop+0x7c>)
   13e7a:	f008 fe2f 	bl	1cadc <assert_post_action>
	__asm__ volatile(
   13e7e:	f04f 0420 	mov.w	r4, #32
   13e82:	f3ef 8511 	mrs	r5, BASEPRI
   13e86:	f384 8812 	msr	BASEPRI_MAX, r4
   13e8a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13e8e:	260c      	movs	r6, #12
   13e90:	fb06 3401 	mla	r4, r6, r1, r3
   13e94:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13e98:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   13e9c:	d008      	beq.n	13eb0 <stop+0x54>
   13e9e:	42a2      	cmp	r2, r4
   13ea0:	d006      	beq.n	13eb0 <stop+0x54>
	__asm__ volatile(
   13ea2:	f385 8811 	msr	BASEPRI, r5
   13ea6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   13eaa:	f04f 30ff 	mov.w	r0, #4294967295
}
   13eae:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13eb0:	2201      	movs	r2, #1
   13eb2:	4371      	muls	r1, r6
   13eb4:	440b      	add	r3, r1
   13eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   13eba:	f385 8811 	msr	BASEPRI, r5
   13ebe:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   13ec2:	6843      	ldr	r3, [r0, #4]
   13ec4:	440b      	add	r3, r1
   13ec6:	685b      	ldr	r3, [r3, #4]
   13ec8:	4798      	blx	r3
	return 0;
   13eca:	2000      	movs	r0, #0
   13ecc:	e7ef      	b.n	13eae <stop+0x52>
   13ece:	bf00      	nop
   13ed0:	00023cc9 	.word	0x00023cc9
   13ed4:	00021547 	.word	0x00021547
   13ed8:	00023c8c 	.word	0x00023c8c

00013edc <onoff_stop>:
{
   13edc:	b570      	push	{r4, r5, r6, lr}
   13ede:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13ee0:	4906      	ldr	r1, [pc, #24]	; (13efc <onoff_stop+0x20>)
{
   13ee2:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13ee4:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13ee6:	1149      	asrs	r1, r1, #5
   13ee8:	2240      	movs	r2, #64	; 0x40
   13eea:	4805      	ldr	r0, [pc, #20]	; (13f00 <onoff_stop+0x24>)
   13eec:	f7ff ffb6 	bl	13e5c <stop>
	notify(mgr, res);
   13ef0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13ef2:	4601      	mov	r1, r0
	notify(mgr, res);
   13ef4:	4620      	mov	r0, r4
}
   13ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13efa:	4718      	bx	r3
   13efc:	20009a20 	.word	0x20009a20
   13f00:	0002043c 	.word	0x0002043c

00013f04 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   13f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13f08:	2200      	movs	r2, #0
   13f0a:	2101      	movs	r1, #1
{
   13f0c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13f0e:	2005      	movs	r0, #5
   13f10:	f7f8 ff76 	bl	ce00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13f14:	4811      	ldr	r0, [pc, #68]	; (13f5c <clk_init+0x58>)
   13f16:	f002 fb5b 	bl	165d0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13f1a:	4b11      	ldr	r3, [pc, #68]	; (13f60 <clk_init+0x5c>)
   13f1c:	4298      	cmp	r0, r3
   13f1e:	d119      	bne.n	13f54 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13f20:	f002 fb7a 	bl	16618 <nrfx_clock_enable>
   13f24:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13f26:	f04f 080c 	mov.w	r8, #12
   13f2a:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13f2c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 13f64 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   13f30:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13f32:	4649      	mov	r1, r9
   13f34:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   13f38:	f008 fd4c 	bl	1c9d4 <onoff_manager_init>
		if (err < 0) {
   13f3c:	2800      	cmp	r0, #0
   13f3e:	db07      	blt.n	13f50 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13f40:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13f44:	3401      	adds	r4, #1
   13f46:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13f48:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13f4c:	d1f0      	bne.n	13f30 <clk_init+0x2c>
	}

	return 0;
   13f4e:	2000      	movs	r0, #0
}
   13f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   13f54:	f06f 0004 	mvn.w	r0, #4
   13f58:	e7fa      	b.n	13f50 <clk_init+0x4c>
   13f5a:	bf00      	nop
   13f5c:	00013fa1 	.word	0x00013fa1
   13f60:	0bad0000 	.word	0x0bad0000
   13f64:	00020f58 	.word	0x00020f58

00013f68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   13f68:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   13f6a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   13f6c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   13f6e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13f70:	434b      	muls	r3, r1
   13f72:	4809      	ldr	r0, [pc, #36]	; (13f98 <clkstarted_handle.constprop.0+0x30>)
   13f74:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   13f76:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   13f78:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   13f7c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   13f7e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   13f82:	f00a ff96 	bl	1eeb2 <set_on_state>
	if (callback) {
   13f86:	b12d      	cbz	r5, 13f94 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13f88:	4632      	mov	r2, r6
   13f8a:	462b      	mov	r3, r5
}
   13f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13f90:	4802      	ldr	r0, [pc, #8]	; (13f9c <clkstarted_handle.constprop.0+0x34>)
   13f92:	4718      	bx	r3
}
   13f94:	bd70      	pop	{r4, r5, r6, pc}
   13f96:	bf00      	nop
   13f98:	20009a20 	.word	0x20009a20
   13f9c:	0002043c 	.word	0x0002043c

00013fa0 <clock_event_handler>:
{
   13fa0:	b508      	push	{r3, lr}
	switch (event) {
   13fa2:	2805      	cmp	r0, #5
   13fa4:	d820      	bhi.n	13fe8 <clock_event_handler+0x48>
   13fa6:	e8df f000 	tbb	[pc, r0]
   13faa:	1103      	.short	0x1103
   13fac:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13fb0:	4b13      	ldr	r3, [pc, #76]	; (14000 <clock_event_handler+0x60>)
   13fb2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   13fb6:	f010 0007 	ands.w	r0, r0, #7
   13fba:	d11f      	bne.n	13ffc <clock_event_handler+0x5c>
}
   13fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13fc0:	f7ff bfd2 	b.w	13f68 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   13fc4:	2002      	movs	r0, #2
   13fc6:	e7f9      	b.n	13fbc <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   13fc8:	2003      	movs	r0, #3
   13fca:	e7f7      	b.n	13fbc <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13fcc:	2001      	movs	r0, #1
   13fce:	e7f5      	b.n	13fbc <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   13fd0:	490c      	ldr	r1, [pc, #48]	; (14004 <clock_event_handler+0x64>)
   13fd2:	f240 235f 	movw	r3, #607	; 0x25f
   13fd6:	4a0c      	ldr	r2, [pc, #48]	; (14008 <clock_event_handler+0x68>)
   13fd8:	480c      	ldr	r0, [pc, #48]	; (1400c <clock_event_handler+0x6c>)
   13fda:	f008 fd86 	bl	1caea <assert_print>
   13fde:	f240 215f 	movw	r1, #607	; 0x25f
		__ASSERT_NO_MSG(0);
   13fe2:	4809      	ldr	r0, [pc, #36]	; (14008 <clock_event_handler+0x68>)
   13fe4:	f008 fd7a 	bl	1cadc <assert_post_action>
   13fe8:	4906      	ldr	r1, [pc, #24]	; (14004 <clock_event_handler+0x64>)
   13fea:	f240 2363 	movw	r3, #611	; 0x263
   13fee:	4a06      	ldr	r2, [pc, #24]	; (14008 <clock_event_handler+0x68>)
   13ff0:	4806      	ldr	r0, [pc, #24]	; (1400c <clock_event_handler+0x6c>)
   13ff2:	f008 fd7a 	bl	1caea <assert_print>
   13ff6:	f240 2163 	movw	r1, #611	; 0x263
   13ffa:	e7f2      	b.n	13fe2 <clock_event_handler+0x42>
}
   13ffc:	bd08      	pop	{r3, pc}
   13ffe:	bf00      	nop
   14000:	20009a20 	.word	0x20009a20
   14004:	00024673 	.word	0x00024673
   14008:	00023c8c 	.word	0x00023c8c
   1400c:	00021547 	.word	0x00021547

00014010 <generic_hfclk_start>:
{
   14010:	b508      	push	{r3, lr}
	__asm__ volatile(
   14012:	f04f 0320 	mov.w	r3, #32
   14016:	f3ef 8111 	mrs	r1, BASEPRI
   1401a:	f383 8812 	msr	BASEPRI_MAX, r3
   1401e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14022:	4a11      	ldr	r2, [pc, #68]	; (14068 <generic_hfclk_start+0x58>)
   14024:	6813      	ldr	r3, [r2, #0]
   14026:	f043 0002 	orr.w	r0, r3, #2
   1402a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1402c:	07da      	lsls	r2, r3, #31
   1402e:	d408      	bmi.n	14042 <generic_hfclk_start+0x32>
	__asm__ volatile(
   14030:	f381 8811 	msr	BASEPRI, r1
   14034:	f3bf 8f6f 	isb	sy
}
   14038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1403c:	2001      	movs	r0, #1
   1403e:	f002 bb15 	b.w	1666c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14042:	4b0a      	ldr	r3, [pc, #40]	; (1406c <generic_hfclk_start+0x5c>)
   14044:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14048:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1404c:	07d3      	lsls	r3, r2, #31
   1404e:	d5ef      	bpl.n	14030 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   14050:	4807      	ldr	r0, [pc, #28]	; (14070 <generic_hfclk_start+0x60>)
   14052:	f00a ff2e 	bl	1eeb2 <set_on_state>
   14056:	f381 8811 	msr	BASEPRI, r1
   1405a:	f3bf 8f6f 	isb	sy
}
   1405e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   14062:	2000      	movs	r0, #0
   14064:	f7ff bf80 	b.w	13f68 <clkstarted_handle.constprop.0>
   14068:	20009ad0 	.word	0x20009ad0
   1406c:	40005000 	.word	0x40005000
   14070:	20009aa8 	.word	0x20009aa8

00014074 <api_blocking_start>:
{
   14074:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14076:	2200      	movs	r2, #0
   14078:	2301      	movs	r3, #1
   1407a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1407e:	ab04      	add	r3, sp, #16
   14080:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14084:	4a09      	ldr	r2, [pc, #36]	; (140ac <api_blocking_start+0x38>)
   14086:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14088:	f8cd d000 	str.w	sp, [sp]
   1408c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14090:	f00a ff52 	bl	1ef38 <api_start>
	if (err < 0) {
   14094:	2800      	cmp	r0, #0
   14096:	db05      	blt.n	140a4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   14098:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1409c:	2300      	movs	r3, #0
   1409e:	4668      	mov	r0, sp
   140a0:	f005 fa96 	bl	195d0 <z_impl_k_sem_take>
}
   140a4:	b007      	add	sp, #28
   140a6:	f85d fb04 	ldr.w	pc, [sp], #4
   140aa:	bf00      	nop
   140ac:	0001ef77 	.word	0x0001ef77

000140b0 <generic_hfclk_stop>:
   140b0:	4b07      	ldr	r3, [pc, #28]	; (140d0 <generic_hfclk_stop+0x20>)
   140b2:	e8d3 2fef 	ldaex	r2, [r3]
   140b6:	f022 0102 	bic.w	r1, r2, #2
   140ba:	e8c3 1fe0 	stlex	r0, r1, [r3]
   140be:	2800      	cmp	r0, #0
   140c0:	d1f7      	bne.n	140b2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   140c2:	07d3      	lsls	r3, r2, #31
   140c4:	d402      	bmi.n	140cc <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   140c6:	2001      	movs	r0, #1
   140c8:	f002 bb4e 	b.w	16768 <nrfx_clock_stop>
}
   140cc:	4770      	bx	lr
   140ce:	bf00      	nop
   140d0:	20009ad0 	.word	0x20009ad0

000140d4 <z_nrf_clock_control_lf_on>:
{
   140d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   140d8:	2201      	movs	r2, #1
   140da:	4606      	mov	r6, r0
   140dc:	4941      	ldr	r1, [pc, #260]	; (141e4 <z_nrf_clock_control_lf_on+0x110>)
   140de:	e8d1 3fef 	ldaex	r3, [r1]
   140e2:	e8c1 2fe0 	stlex	r0, r2, [r1]
   140e6:	2800      	cmp	r0, #0
   140e8:	d1f9      	bne.n	140de <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   140ea:	b9a3      	cbnz	r3, 14116 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   140ec:	493e      	ldr	r1, [pc, #248]	; (141e8 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   140ee:	483f      	ldr	r0, [pc, #252]	; (141ec <z_nrf_clock_control_lf_on+0x118>)
   140f0:	604b      	str	r3, [r1, #4]
   140f2:	60cb      	str	r3, [r1, #12]
   140f4:	608a      	str	r2, [r1, #8]
   140f6:	f7f6 f84b 	bl	a190 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   140fa:	2800      	cmp	r0, #0
   140fc:	da0b      	bge.n	14116 <z_nrf_clock_control_lf_on+0x42>
   140fe:	493c      	ldr	r1, [pc, #240]	; (141f0 <z_nrf_clock_control_lf_on+0x11c>)
   14100:	f240 2321 	movw	r3, #545	; 0x221
   14104:	4a3b      	ldr	r2, [pc, #236]	; (141f4 <z_nrf_clock_control_lf_on+0x120>)
   14106:	483c      	ldr	r0, [pc, #240]	; (141f8 <z_nrf_clock_control_lf_on+0x124>)
   14108:	f008 fcef 	bl	1caea <assert_print>
   1410c:	f240 2121 	movw	r1, #545	; 0x221
		__ASSERT_NO_MSG(false);
   14110:	4838      	ldr	r0, [pc, #224]	; (141f4 <z_nrf_clock_control_lf_on+0x120>)
   14112:	f008 fce3 	bl	1cadc <assert_post_action>
	switch (start_mode) {
   14116:	b35e      	cbz	r6, 14170 <z_nrf_clock_control_lf_on+0x9c>
   14118:	1e73      	subs	r3, r6, #1
   1411a:	2b01      	cmp	r3, #1
   1411c:	d858      	bhi.n	141d0 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1411e:	2e01      	cmp	r6, #1
   14120:	d106      	bne.n	14130 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14122:	4b36      	ldr	r3, [pc, #216]	; (141fc <z_nrf_clock_control_lf_on+0x128>)
   14124:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14128:	f003 0303 	and.w	r3, r3, #3
   1412c:	2b02      	cmp	r3, #2
   1412e:	d01f      	beq.n	14170 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14130:	f00b ff2b 	bl	1ff8a <k_is_in_isr>
   14134:	4605      	mov	r5, r0
   14136:	b9e8      	cbnz	r0, 14174 <z_nrf_clock_control_lf_on+0xa0>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   14138:	4b31      	ldr	r3, [pc, #196]	; (14200 <z_nrf_clock_control_lf_on+0x12c>)
   1413a:	781b      	ldrb	r3, [r3, #0]
   1413c:	b1d3      	cbz	r3, 14174 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1413e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   14140:	4607      	mov	r7, r0
   14142:	4b2e      	ldr	r3, [pc, #184]	; (141fc <z_nrf_clock_control_lf_on+0x128>)
   14144:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14148:	4c2c      	ldr	r4, [pc, #176]	; (141fc <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1414a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 14204 <z_nrf_clock_control_lf_on+0x130>
   1414e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14152:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   14156:	03d2      	lsls	r2, r2, #15
   14158:	d516      	bpl.n	14188 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1415a:	f003 0303 	and.w	r3, r3, #3
   1415e:	2b02      	cmp	r3, #2
   14160:	d001      	beq.n	14166 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14162:	2e01      	cmp	r6, #1
   14164:	d110      	bne.n	14188 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   14166:	b375      	cbz	r5, 141c6 <z_nrf_clock_control_lf_on+0xf2>
   14168:	f387 8811 	msr	BASEPRI, r7
   1416c:	f3bf 8f6f 	isb	sy
}
   14170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   14174:	f04f 0320 	mov.w	r3, #32
   14178:	f3ef 8711 	mrs	r7, BASEPRI
   1417c:	f383 8812 	msr	BASEPRI_MAX, r3
   14180:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14184:	2501      	movs	r5, #1
   14186:	e7df      	b.n	14148 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14188:	b1c5      	cbz	r5, 141bc <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1418a:	4638      	mov	r0, r7
   1418c:	f7f8 fd98 	bl	ccc0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14190:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14194:	b2db      	uxtb	r3, r3
   14196:	2b01      	cmp	r3, #1
   14198:	d1d9      	bne.n	1414e <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1419a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1419e:	2a00      	cmp	r2, #0
   141a0:	d0d5      	beq.n	1414e <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   141a2:	2200      	movs	r2, #0
   141a4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   141a8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   141ac:	2202      	movs	r2, #2
   141ae:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   141b2:	2220      	movs	r2, #32
   141b4:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   141b8:	60a3      	str	r3, [r4, #8]
}
   141ba:	e7c8      	b.n	1414e <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   141bc:	2100      	movs	r1, #0
   141be:	2021      	movs	r0, #33	; 0x21
   141c0:	f007 f8b6 	bl	1b330 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   141c4:	e7e4      	b.n	14190 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   141c6:	2202      	movs	r2, #2
   141c8:	4b0c      	ldr	r3, [pc, #48]	; (141fc <z_nrf_clock_control_lf_on+0x128>)
   141ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   141ce:	e7cf      	b.n	14170 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   141d0:	490d      	ldr	r1, [pc, #52]	; (14208 <z_nrf_clock_control_lf_on+0x134>)
   141d2:	f240 2333 	movw	r3, #563	; 0x233
   141d6:	4a07      	ldr	r2, [pc, #28]	; (141f4 <z_nrf_clock_control_lf_on+0x120>)
   141d8:	4807      	ldr	r0, [pc, #28]	; (141f8 <z_nrf_clock_control_lf_on+0x124>)
   141da:	f008 fc86 	bl	1caea <assert_print>
   141de:	f240 2133 	movw	r1, #563	; 0x233
   141e2:	e795      	b.n	14110 <z_nrf_clock_control_lf_on+0x3c>
   141e4:	20009a1c 	.word	0x20009a1c
   141e8:	20009a0c 	.word	0x20009a0c
   141ec:	20009a40 	.word	0x20009a40
   141f0:	00021e1a 	.word	0x00021e1a
   141f4:	00023c8c 	.word	0x00023c8c
   141f8:	00021547 	.word	0x00021547
   141fc:	40005000 	.word	0x40005000
   14200:	20009d1c 	.word	0x20009d1c
   14204:	e000e100 	.word	0xe000e100
   14208:	00024673 	.word	0x00024673

0001420c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1420c:	b508      	push	{r3, lr}
   1420e:	4807      	ldr	r0, [pc, #28]	; (1422c <uart_console_init+0x20>)
   14210:	f00b fe8e 	bl	1ff30 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   14214:	b138      	cbz	r0, 14226 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   14216:	4806      	ldr	r0, [pc, #24]	; (14230 <uart_console_init+0x24>)
   14218:	f7f9 fcf8 	bl	dc0c <__stdout_hook_install>
	__printk_hook_install(console_out);
   1421c:	4804      	ldr	r0, [pc, #16]	; (14230 <uart_console_init+0x24>)
   1421e:	f7f5 fc35 	bl	9a8c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   14222:	2000      	movs	r0, #0
}
   14224:	bd08      	pop	{r3, pc}
		return -ENODEV;
   14226:	f06f 0012 	mvn.w	r0, #18
   1422a:	e7fb      	b.n	14224 <uart_console_init+0x18>
   1422c:	000204b4 	.word	0x000204b4
   14230:	00014235 	.word	0x00014235

00014234 <console_out>:
	if ('\n' == c) {
   14234:	280a      	cmp	r0, #10
{
   14236:	b538      	push	{r3, r4, r5, lr}
   14238:	4604      	mov	r4, r0
   1423a:	4d07      	ldr	r5, [pc, #28]	; (14258 <console_out+0x24>)
	if ('\n' == c) {
   1423c:	d104      	bne.n	14248 <console_out+0x14>
   1423e:	68ab      	ldr	r3, [r5, #8]
   14240:	210d      	movs	r1, #13
   14242:	4628      	mov	r0, r5
   14244:	685b      	ldr	r3, [r3, #4]
   14246:	4798      	blx	r3
   14248:	68ab      	ldr	r3, [r5, #8]
   1424a:	4803      	ldr	r0, [pc, #12]	; (14258 <console_out+0x24>)
   1424c:	685b      	ldr	r3, [r3, #4]
   1424e:	b2e1      	uxtb	r1, r4
   14250:	4798      	blx	r3
}
   14252:	4620      	mov	r0, r4
   14254:	bd38      	pop	{r3, r4, r5, pc}
   14256:	bf00      	nop
   14258:	000204b4 	.word	0x000204b4

0001425c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1425c:	b510      	push	{r4, lr}
	return port->data;
   1425e:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   14260:	b961      	cbnz	r1, 1427c <gpio_nrfx_manage_callback+0x20>
   14262:	4920      	ldr	r1, [pc, #128]	; (142e4 <gpio_nrfx_manage_callback+0x88>)
   14264:	232a      	movs	r3, #42	; 0x2a
   14266:	4a20      	ldr	r2, [pc, #128]	; (142e8 <gpio_nrfx_manage_callback+0x8c>)
   14268:	4820      	ldr	r0, [pc, #128]	; (142ec <gpio_nrfx_manage_callback+0x90>)
   1426a:	f008 fc3e 	bl	1caea <assert_print>
   1426e:	4820      	ldr	r0, [pc, #128]	; (142f0 <gpio_nrfx_manage_callback+0x94>)
   14270:	f008 fc3b 	bl	1caea <assert_print>
   14274:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   14276:	481c      	ldr	r0, [pc, #112]	; (142e8 <gpio_nrfx_manage_callback+0x8c>)
   14278:	f008 fc30 	bl	1cadc <assert_post_action>
   1427c:	6848      	ldr	r0, [r1, #4]
   1427e:	b950      	cbnz	r0, 14296 <gpio_nrfx_manage_callback+0x3a>
   14280:	491c      	ldr	r1, [pc, #112]	; (142f4 <gpio_nrfx_manage_callback+0x98>)
   14282:	232b      	movs	r3, #43	; 0x2b
   14284:	4a18      	ldr	r2, [pc, #96]	; (142e8 <gpio_nrfx_manage_callback+0x8c>)
   14286:	4819      	ldr	r0, [pc, #100]	; (142ec <gpio_nrfx_manage_callback+0x90>)
   14288:	f008 fc2f 	bl	1caea <assert_print>
   1428c:	481a      	ldr	r0, [pc, #104]	; (142f8 <gpio_nrfx_manage_callback+0x9c>)
   1428e:	f008 fc2c 	bl	1caea <assert_print>
   14292:	212b      	movs	r1, #43	; 0x2b
   14294:	e7ef      	b.n	14276 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   14296:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   14298:	b1f8      	cbz	r0, 142da <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1429a:	4288      	cmp	r0, r1
   1429c:	d119      	bne.n	142d2 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1429e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   142a0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   142a2:	42a1      	cmp	r1, r4
	list->head = node;
   142a4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   142a6:	d100      	bne.n	142aa <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   142a8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   142aa:	2000      	movs	r0, #0
   142ac:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   142ae:	b12a      	cbz	r2, 142bc <gpio_nrfx_manage_callback+0x60>
	return list->head;
   142b0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   142b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   142b4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   142b6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   142b8:	b902      	cbnz	r2, 142bc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   142ba:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   142bc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   142be:	e010      	b.n	142e2 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   142c0:	4281      	cmp	r1, r0
   142c2:	d106      	bne.n	142d2 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   142c4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   142c6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   142c8:	6898      	ldr	r0, [r3, #8]
   142ca:	4281      	cmp	r1, r0
   142cc:	d1ed      	bne.n	142aa <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   142ce:	609c      	str	r4, [r3, #8]
}
   142d0:	e7eb      	b.n	142aa <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   142d2:	4604      	mov	r4, r0
   142d4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   142d6:	2800      	cmp	r0, #0
   142d8:	d1f2      	bne.n	142c0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   142da:	2a00      	cmp	r2, #0
   142dc:	d1e8      	bne.n	142b0 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   142de:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   142e2:	bd10      	pop	{r4, pc}
   142e4:	00023d63 	.word	0x00023d63
   142e8:	00023d27 	.word	0x00023d27
   142ec:	00021547 	.word	0x00021547
   142f0:	00023d6c 	.word	0x00023d6c
   142f4:	00023d7b 	.word	0x00023d7b
   142f8:	00023d8d 	.word	0x00023d8d

000142fc <gpio_nrfx_pin_interrupt_configure>:
{
   142fc:	b530      	push	{r4, r5, lr}
	return port->config;
   142fe:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14300:	f001 041f 	and.w	r4, r1, #31
   14304:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   14306:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1430a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1430c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   14310:	d105      	bne.n	1431e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   14312:	4620      	mov	r0, r4
   14314:	f002 fd72 	bl	16dfc <nrfx_gpiote_trigger_disable>
		return 0;
   14318:	2000      	movs	r0, #0
}
   1431a:	b005      	add	sp, #20
   1431c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1431e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   14320:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   14324:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   14328:	d114      	bne.n	14354 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1432a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1432e:	bf0c      	ite	eq
   14330:	2304      	moveq	r3, #4
   14332:	2305      	movne	r3, #5
   14334:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14338:	2300      	movs	r3, #0
   1433a:	4620      	mov	r0, r4
   1433c:	4619      	mov	r1, r3
   1433e:	aa02      	add	r2, sp, #8
   14340:	f002 fb66 	bl	16a10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14344:	4b2a      	ldr	r3, [pc, #168]	; (143f0 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   14346:	4298      	cmp	r0, r3
   14348:	d14f      	bne.n	143ea <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1434a:	2101      	movs	r1, #1
   1434c:	4620      	mov	r0, r4
   1434e:	f002 fceb 	bl	16d28 <nrfx_gpiote_trigger_enable>
	return 0;
   14352:	e7e1      	b.n	14318 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   14354:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   14358:	d024      	beq.n	143a4 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1435a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1435e:	bf14      	ite	ne
   14360:	2301      	movne	r3, #1
   14362:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   14364:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   14368:	6883      	ldr	r3, [r0, #8]
   1436a:	40cb      	lsrs	r3, r1
   1436c:	07d8      	lsls	r0, r3, #31
   1436e:	d4e3      	bmi.n	14338 <gpio_nrfx_pin_interrupt_configure+0x3c>
   14370:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   14374:	d1e0      	bne.n	14338 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   14376:	0962      	lsrs	r2, r4, #5
   14378:	f004 031f 	and.w	r3, r4, #31
   1437c:	d014      	beq.n	143a8 <gpio_nrfx_pin_interrupt_configure+0xac>
   1437e:	2a01      	cmp	r2, #1
   14380:	d104      	bne.n	1438c <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   14382:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14386:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14388:	07d1      	lsls	r1, r2, #31
   1438a:	d414      	bmi.n	143b6 <gpio_nrfx_pin_interrupt_configure+0xba>
   1438c:	4919      	ldr	r1, [pc, #100]	; (143f4 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1438e:	481a      	ldr	r0, [pc, #104]	; (143f8 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   14390:	f240 2347 	movw	r3, #583	; 0x247
   14394:	4a19      	ldr	r2, [pc, #100]	; (143fc <gpio_nrfx_pin_interrupt_configure+0x100>)
   14396:	f008 fba8 	bl	1caea <assert_print>
   1439a:	f240 2147 	movw	r1, #583	; 0x247
   1439e:	4817      	ldr	r0, [pc, #92]	; (143fc <gpio_nrfx_pin_interrupt_configure+0x100>)
   143a0:	f008 fb9c 	bl	1cadc <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   143a4:	2303      	movs	r3, #3
   143a6:	e7dd      	b.n	14364 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   143a8:	f04f 32ff 	mov.w	r2, #4294967295
   143ac:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   143ae:	07d2      	lsls	r2, r2, #31
   143b0:	d5ec      	bpl.n	1438c <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   143b2:	4a13      	ldr	r2, [pc, #76]	; (14400 <gpio_nrfx_pin_interrupt_configure+0x104>)
   143b4:	e000      	b.n	143b8 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   143b6:	4a13      	ldr	r2, [pc, #76]	; (14404 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   143b8:	3380      	adds	r3, #128	; 0x80
   143ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   143be:	07db      	lsls	r3, r3, #31
   143c0:	d4ba      	bmi.n	14338 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   143c2:	f10d 0507 	add.w	r5, sp, #7
   143c6:	4629      	mov	r1, r5
   143c8:	4620      	mov	r0, r4
   143ca:	f002 fc47 	bl	16c5c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   143ce:	4b0e      	ldr	r3, [pc, #56]	; (14408 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   143d0:	4298      	cmp	r0, r3
   143d2:	d001      	beq.n	143d8 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   143d4:	9503      	str	r5, [sp, #12]
   143d6:	e7af      	b.n	14338 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   143d8:	4628      	mov	r0, r5
   143da:	f002 fc9f 	bl	16d1c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   143de:	4b04      	ldr	r3, [pc, #16]	; (143f0 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   143e0:	4298      	cmp	r0, r3
   143e2:	d0f7      	beq.n	143d4 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   143e4:	f06f 000b 	mvn.w	r0, #11
   143e8:	e797      	b.n	1431a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   143ea:	f06f 0015 	mvn.w	r0, #21
   143ee:	e794      	b.n	1431a <gpio_nrfx_pin_interrupt_configure+0x1e>
   143f0:	0bad0000 	.word	0x0bad0000
   143f4:	00023dd7 	.word	0x00023dd7
   143f8:	00021547 	.word	0x00021547
   143fc:	00023da4 	.word	0x00023da4
   14400:	40842500 	.word	0x40842500
   14404:	40842800 	.word	0x40842800
   14408:	0bad0004 	.word	0x0bad0004

0001440c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1440c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1440e:	f002 fc75 	bl	16cfc <nrfx_gpiote_is_init>
   14412:	4604      	mov	r4, r0
   14414:	b968      	cbnz	r0, 14432 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   14416:	f002 fc49 	bl	16cac <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1441a:	4b08      	ldr	r3, [pc, #32]	; (1443c <gpio_nrfx_init+0x30>)
   1441c:	4298      	cmp	r0, r3
   1441e:	d10a      	bne.n	14436 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   14420:	4621      	mov	r1, r4
   14422:	4807      	ldr	r0, [pc, #28]	; (14440 <gpio_nrfx_init+0x34>)
   14424:	f002 fc14 	bl	16c50 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14428:	4622      	mov	r2, r4
   1442a:	2105      	movs	r1, #5
   1442c:	202f      	movs	r0, #47	; 0x2f
   1442e:	f7f8 fce7 	bl	ce00 <z_arm_irq_priority_set>
		return 0;
   14432:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   14434:	bd10      	pop	{r4, pc}
		return -EIO;
   14436:	f06f 0004 	mvn.w	r0, #4
   1443a:	e7fb      	b.n	14434 <gpio_nrfx_init+0x28>
   1443c:	0bad0000 	.word	0x0bad0000
   14440:	00014445 	.word	0x00014445

00014444 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14444:	0942      	lsrs	r2, r0, #5
{
   14446:	4603      	mov	r3, r0
   14448:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1444a:	d002      	beq.n	14452 <nrfx_gpio_handler+0xe>
   1444c:	2a01      	cmp	r2, #1
   1444e:	d01e      	beq.n	1448e <nrfx_gpio_handler+0x4a>
}
   14450:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   14452:	4e14      	ldr	r6, [pc, #80]	; (144a4 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   14454:	6932      	ldr	r2, [r6, #16]
   14456:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14458:	2900      	cmp	r1, #0
   1445a:	d0f9      	beq.n	14450 <nrfx_gpio_handler+0xc>
   1445c:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1445e:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   14462:	680c      	ldr	r4, [r1, #0]
   14464:	409d      	lsls	r5, r3
   14466:	2900      	cmp	r1, #0
   14468:	d0f2      	beq.n	14450 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1446a:	688a      	ldr	r2, [r1, #8]
   1446c:	402a      	ands	r2, r5
   1446e:	d012      	beq.n	14496 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   14470:	684b      	ldr	r3, [r1, #4]
   14472:	b973      	cbnz	r3, 14492 <nrfx_gpio_handler+0x4e>
   14474:	490c      	ldr	r1, [pc, #48]	; (144a8 <nrfx_gpio_handler+0x64>)
   14476:	234d      	movs	r3, #77	; 0x4d
   14478:	4a0c      	ldr	r2, [pc, #48]	; (144ac <nrfx_gpio_handler+0x68>)
   1447a:	480d      	ldr	r0, [pc, #52]	; (144b0 <nrfx_gpio_handler+0x6c>)
   1447c:	f008 fb35 	bl	1caea <assert_print>
   14480:	480c      	ldr	r0, [pc, #48]	; (144b4 <nrfx_gpio_handler+0x70>)
   14482:	f008 fb32 	bl	1caea <assert_print>
   14486:	214d      	movs	r1, #77	; 0x4d
   14488:	4808      	ldr	r0, [pc, #32]	; (144ac <nrfx_gpio_handler+0x68>)
   1448a:	f008 fb27 	bl	1cadc <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1448e:	4e0a      	ldr	r6, [pc, #40]	; (144b8 <nrfx_gpio_handler+0x74>)
   14490:	e7e0      	b.n	14454 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   14492:	4630      	mov	r0, r6
   14494:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14496:	b11c      	cbz	r4, 144a0 <nrfx_gpio_handler+0x5c>
   14498:	6823      	ldr	r3, [r4, #0]
   1449a:	4621      	mov	r1, r4
   1449c:	461c      	mov	r4, r3
   1449e:	e7e2      	b.n	14466 <nrfx_gpio_handler+0x22>
   144a0:	4623      	mov	r3, r4
   144a2:	e7fa      	b.n	1449a <nrfx_gpio_handler+0x56>
   144a4:	0002046c 	.word	0x0002046c
   144a8:	00024c98 	.word	0x00024c98
   144ac:	00023d27 	.word	0x00023d27
   144b0:	00021547 	.word	0x00021547
   144b4:	00023d8d 	.word	0x00023d8d
   144b8:	00020454 	.word	0x00020454

000144bc <gpio_nrfx_pin_configure>:
{
   144bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   144c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   144c4:	f001 051f 	and.w	r5, r1, #31
   144c8:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   144cc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   144ce:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   144d2:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   144d4:	4628      	mov	r0, r5
   144d6:	f10d 0103 	add.w	r1, sp, #3
   144da:	f002 fbbf 	bl	16c5c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   144de:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   144e2:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   144e4:	d115      	bne.n	14512 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   144e6:	4628      	mov	r0, r5
   144e8:	f002 fcb2 	bl	16e50 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   144ec:	4b48      	ldr	r3, [pc, #288]	; (14610 <gpio_nrfx_pin_configure+0x154>)
   144ee:	429e      	cmp	r6, r3
   144f0:	d170      	bne.n	145d4 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   144f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   144f6:	f002 fc0b 	bl	16d10 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   144fa:	42b0      	cmp	r0, r6
   144fc:	d06a      	beq.n	145d4 <gpio_nrfx_pin_configure+0x118>
   144fe:	4945      	ldr	r1, [pc, #276]	; (14614 <gpio_nrfx_pin_configure+0x158>)
   14500:	236a      	movs	r3, #106	; 0x6a
   14502:	4a45      	ldr	r2, [pc, #276]	; (14618 <gpio_nrfx_pin_configure+0x15c>)
   14504:	4845      	ldr	r0, [pc, #276]	; (1461c <gpio_nrfx_pin_configure+0x160>)
   14506:	f008 faf0 	bl	1caea <assert_print>
   1450a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1450c:	4842      	ldr	r0, [pc, #264]	; (14618 <gpio_nrfx_pin_configure+0x15c>)
   1450e:	f008 fae5 	bl	1cadc <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   14512:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14514:	4628      	mov	r0, r5
   14516:	4619      	mov	r1, r3
   14518:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1451a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1451e:	f002 fa77 	bl	16a10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14522:	4b3b      	ldr	r3, [pc, #236]	; (14610 <gpio_nrfx_pin_configure+0x154>)
   14524:	4298      	cmp	r0, r3
   14526:	d004      	beq.n	14532 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   14528:	f06f 0015 	mvn.w	r0, #21
}
   1452c:	b004      	add	sp, #16
   1452e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   14532:	4286      	cmp	r6, r0
   14534:	d10d      	bne.n	14552 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   14536:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1453a:	f002 fbe9 	bl	16d10 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1453e:	42b0      	cmp	r0, r6
   14540:	d007      	beq.n	14552 <gpio_nrfx_pin_configure+0x96>
   14542:	4934      	ldr	r1, [pc, #208]	; (14614 <gpio_nrfx_pin_configure+0x158>)
   14544:	237c      	movs	r3, #124	; 0x7c
   14546:	4a34      	ldr	r2, [pc, #208]	; (14618 <gpio_nrfx_pin_configure+0x15c>)
   14548:	4834      	ldr	r0, [pc, #208]	; (1461c <gpio_nrfx_pin_configure+0x160>)
   1454a:	f008 face 	bl	1caea <assert_print>
   1454e:	217c      	movs	r1, #124	; 0x7c
   14550:	e7dc      	b.n	1450c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   14552:	03a6      	lsls	r6, r4, #14
   14554:	d54c      	bpl.n	145f0 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14556:	f240 3306 	movw	r3, #774	; 0x306
   1455a:	4023      	ands	r3, r4
   1455c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   14560:	d019      	beq.n	14596 <gpio_nrfx_pin_configure+0xda>
   14562:	d80c      	bhi.n	1457e <gpio_nrfx_pin_configure+0xc2>
   14564:	2b06      	cmp	r3, #6
   14566:	d017      	beq.n	14598 <gpio_nrfx_pin_configure+0xdc>
   14568:	d804      	bhi.n	14574 <gpio_nrfx_pin_configure+0xb8>
   1456a:	b1ab      	cbz	r3, 14598 <gpio_nrfx_pin_configure+0xdc>
   1456c:	2b02      	cmp	r3, #2
   1456e:	d1db      	bne.n	14528 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   14570:	2304      	movs	r3, #4
   14572:	e011      	b.n	14598 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   14574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   14578:	d1d6      	bne.n	14528 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1457a:	2301      	movs	r3, #1
   1457c:	e00c      	b.n	14598 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1457e:	f240 2202 	movw	r2, #514	; 0x202
   14582:	4293      	cmp	r3, r2
   14584:	d028      	beq.n	145d8 <gpio_nrfx_pin_configure+0x11c>
   14586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1458a:	d027      	beq.n	145dc <gpio_nrfx_pin_configure+0x120>
   1458c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14590:	d1ca      	bne.n	14528 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   14592:	2302      	movs	r3, #2
   14594:	e000      	b.n	14598 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   14596:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   14598:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1459c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   145a0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   145a4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   145a6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   145aa:	bf4c      	ite	mi
   145ac:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   145ae:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   145b2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   145b4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   145b8:	d512      	bpl.n	145e0 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   145ba:	2301      	movs	r3, #1
   145bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   145c0:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   145c2:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   145c4:	2200      	movs	r2, #0
   145c6:	4628      	mov	r0, r5
   145c8:	a901      	add	r1, sp, #4
   145ca:	f002 fac9 	bl	16b60 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   145ce:	4b10      	ldr	r3, [pc, #64]	; (14610 <gpio_nrfx_pin_configure+0x154>)
   145d0:	4298      	cmp	r0, r3
   145d2:	d1a9      	bne.n	14528 <gpio_nrfx_pin_configure+0x6c>
   145d4:	2000      	movs	r0, #0
   145d6:	e7a9      	b.n	1452c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   145d8:	2305      	movs	r3, #5
   145da:	e7dd      	b.n	14598 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   145dc:	2303      	movs	r3, #3
   145de:	e7db      	b.n	14598 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   145e0:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   145e2:	bf41      	itttt	mi
   145e4:	2301      	movmi	r3, #1
   145e6:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   145ea:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   145ec:	60d3      	strmi	r3, [r2, #12]
}
   145ee:	e7e9      	b.n	145c4 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   145f0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   145f2:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   145f6:	bf4c      	ite	mi
   145f8:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   145fa:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   145fe:	461a      	mov	r2, r3
   14600:	4628      	mov	r0, r5
   14602:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   14604:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14608:	f002 fa02 	bl	16a10 <nrfx_gpiote_input_configure>
   1460c:	e7df      	b.n	145ce <gpio_nrfx_pin_configure+0x112>
   1460e:	bf00      	nop
   14610:	0bad0000 	.word	0x0bad0000
   14614:	00021b39 	.word	0x00021b39
   14618:	00023dfa 	.word	0x00023dfa
   1461c:	00021547 	.word	0x00021547

00014620 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   14620:	2100      	movs	r1, #0
   14622:	4802      	ldr	r0, [pc, #8]	; (1462c <pwm_nrfx_get_cycles_per_sec+0xc>)
   14624:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   14628:	2000      	movs	r0, #0
   1462a:	4770      	bx	lr
   1462c:	00f42400 	.word	0x00f42400

00014630 <nrf_gpio_pin_port_decode>:
{
   14630:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14632:	6803      	ldr	r3, [r0, #0]
    switch (port)
   14634:	095a      	lsrs	r2, r3, #5
   14636:	d00d      	beq.n	14654 <nrf_gpio_pin_port_decode+0x24>
   14638:	2a01      	cmp	r2, #1
   1463a:	d013      	beq.n	14664 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1463c:	490e      	ldr	r1, [pc, #56]	; (14678 <nrf_gpio_pin_port_decode+0x48>)
   1463e:	480f      	ldr	r0, [pc, #60]	; (1467c <nrf_gpio_pin_port_decode+0x4c>)
   14640:	f240 2347 	movw	r3, #583	; 0x247
   14644:	4a0e      	ldr	r2, [pc, #56]	; (14680 <nrf_gpio_pin_port_decode+0x50>)
   14646:	f008 fa50 	bl	1caea <assert_print>
   1464a:	f240 2147 	movw	r1, #583	; 0x247
   1464e:	480c      	ldr	r0, [pc, #48]	; (14680 <nrf_gpio_pin_port_decode+0x50>)
   14650:	f008 fa44 	bl	1cadc <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   14654:	f04f 32ff 	mov.w	r2, #4294967295
   14658:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1465c:	07d9      	lsls	r1, r3, #31
   1465e:	d5ed      	bpl.n	1463c <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   14660:	4808      	ldr	r0, [pc, #32]	; (14684 <nrf_gpio_pin_port_decode+0x54>)
   14662:	e008      	b.n	14676 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   14664:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   14668:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1466c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1466e:	07d2      	lsls	r2, r2, #31
   14670:	d5e4      	bpl.n	1463c <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   14672:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   14674:	4804      	ldr	r0, [pc, #16]	; (14688 <nrf_gpio_pin_port_decode+0x58>)
}
   14676:	bd08      	pop	{r3, pc}
   14678:	00023dd7 	.word	0x00023dd7
   1467c:	00021547 	.word	0x00021547
   14680:	00023da4 	.word	0x00023da4
   14684:	40842500 	.word	0x40842500
   14688:	40842800 	.word	0x40842800

0001468c <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   1468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14690:	b082      	sub	sp, #8
	const struct pwm_nrfx_config *config = dev->config;
   14692:	6845      	ldr	r5, [r0, #4]
{
   14694:	af00      	add	r7, sp, #0
	struct pwm_nrfx_data *data = dev->data;

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   14696:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
	struct pwm_nrfx_data *data = dev->data;
   1469a:	6906      	ldr	r6, [r0, #16]
{
   1469c:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1469e:	2100      	movs	r1, #0
   146a0:	4640      	mov	r0, r8
   146a2:	1d3a      	adds	r2, r7, #4
   146a4:	f00a fd91 	bl	1f1ca <pinctrl_lookup_state>
	if (ret < 0) {
   146a8:	2800      	cmp	r0, #0
   146aa:	db59      	blt.n	14760 <pwm_nrfx_init+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   146ac:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   146ae:	f8d8 2000 	ldr.w	r2, [r8]
   146b2:	7919      	ldrb	r1, [r3, #4]
   146b4:	6818      	ldr	r0, [r3, #0]
   146b6:	f00a fd9e 	bl	1f1f6 <pinctrl_configure_pins>

	if (ret < 0) {
   146ba:	2800      	cmp	r0, #0
   146bc:	db50      	blt.n	14760 <pwm_nrfx_init+0xd4>
		return ret;
	}

	data->initially_inverted = 0;
   146be:	f04f 0800 	mov.w	r8, #0
   146c2:	f886 800e 	strb.w	r8, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
   146c6:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    return p_reg->PSEL.OUT[channel];
   146c8:	f508 72ac 	add.w	r2, r8, #344	; 0x158
   146cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   146d0:	2b00      	cmp	r3, #0
   146d2:	db10      	blt.n	146f6 <pwm_nrfx_init+0x6a>
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
   146d4:	607b      	str	r3, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   146d6:	1d38      	adds	r0, r7, #4
   146d8:	f7ff ffaa 	bl	14630 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   146dc:	687a      	ldr	r2, [r7, #4]
    return p_reg->OUT;
   146de:	6843      	ldr	r3, [r0, #4]
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   146e0:	40d3      	lsrs	r3, r2
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   146e2:	f013 0301 	ands.w	r3, r3, #1
   146e6:	bf18      	it	ne
   146e8:	2301      	movne	r3, #1
			data->initially_inverted |=
   146ea:	7bb2      	ldrb	r2, [r6, #14]
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   146ec:	bf18      	it	ne
   146ee:	fa03 f308 	lslne.w	r3, r3, r8
			data->initially_inverted |=
   146f2:	4313      	orrs	r3, r2
   146f4:	73b3      	strb	r3, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   146f6:	f108 0801 	add.w	r8, r8, #1
   146fa:	f1b8 0f04 	cmp.w	r8, #4
   146fe:	d1e2      	bne.n	146c6 <pwm_nrfx_init+0x3a>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   14700:	2300      	movs	r3, #0
		bool inverted = data->initially_inverted & BIT(i);
   14702:	2001      	movs	r0, #1
   14704:	7bb1      	ldrb	r1, [r6, #14]
   14706:	3602      	adds	r6, #2
   14708:	fa00 f203 	lsl.w	r2, r0, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   1470c:	420a      	tst	r2, r1
   1470e:	bf0c      	ite	eq
   14710:	2201      	moveq	r2, #1
   14712:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   14714:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   14716:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   14718:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   1471a:	f826 2f02 	strh.w	r2, [r6, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   1471e:	d1f3      	bne.n	14708 <pwm_nrfx_init+0x7c>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   14720:	2300      	movs	r3, #0
   14722:	4628      	mov	r0, r5
   14724:	461a      	mov	r2, r3
   14726:	f105 0108 	add.w	r1, r5, #8
   1472a:	f002 fdf7 	bl	1731c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   1472e:	4b0f      	ldr	r3, [pc, #60]	; (1476c <pwm_nrfx_init+0xe0>)
   14730:	4298      	cmp	r0, r3
   14732:	d019      	beq.n	14768 <pwm_nrfx_init+0xdc>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   14734:	6823      	ldr	r3, [r4, #0]
   14736:	466c      	mov	r4, sp
   14738:	b088      	sub	sp, #32
   1473a:	466a      	mov	r2, sp
   1473c:	490c      	ldr	r1, [pc, #48]	; (14770 <pwm_nrfx_init+0xe4>)
   1473e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14742:	f44f 7300 	mov.w	r3, #512	; 0x200
   14746:	8393      	strh	r3, [r2, #28]
   14748:	4b0a      	ldr	r3, [pc, #40]	; (14774 <pwm_nrfx_init+0xe8>)
   1474a:	f842 3f10 	str.w	r3, [r2, #16]!
   1474e:	480a      	ldr	r0, [pc, #40]	; (14778 <pwm_nrfx_init+0xec>)
   14750:	2300      	movs	r3, #0
   14752:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   14756:	f7f7 f8d7 	bl	b908 <z_impl_z_log_msg_static_create>
		return -EBUSY;
   1475a:	f06f 000f 	mvn.w	r0, #15
   1475e:	46a5      	mov	sp, r4
	}

	return 0;
}
   14760:	3708      	adds	r7, #8
   14762:	46bd      	mov	sp, r7
   14764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   14768:	2000      	movs	r0, #0
   1476a:	e7f9      	b.n	14760 <pwm_nrfx_init+0xd4>
   1476c:	0bad0000 	.word	0x0bad0000
   14770:	00023e3e 	.word	0x00023e3e
   14774:	01000003 	.word	0x01000003
   14778:	000208d4 	.word	0x000208d4

0001477c <pwm_nrfx_set_cycles>:
{
   1477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14780:	b086      	sub	sp, #24
   14782:	af00      	add	r7, sp, #0
   14784:	f8b7 c030 	ldrh.w	ip, [r7, #48]	; 0x30
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   14788:	2903      	cmp	r1, #3
{
   1478a:	4616      	mov	r6, r2
	const struct pwm_nrfx_config *config = dev->config;
   1478c:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   1478e:	6904      	ldr	r4, [r0, #16]
	bool inverted = (flags & PWM_POLARITY_INVERTED);
   14790:	f00c 0c01 	and.w	ip, ip, #1
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   14794:	d910      	bls.n	147b8 <pwm_nrfx_set_cycles+0x3c>
		LOG_ERR("Invalid channel: %u.", channel);
   14796:	466c      	mov	r4, sp
   14798:	b088      	sub	sp, #32
   1479a:	466a      	mov	r2, sp
   1479c:	4b59      	ldr	r3, [pc, #356]	; (14904 <pwm_nrfx_set_cycles+0x188>)
   1479e:	e9c2 3105 	strd	r3, r1, [r2, #20]
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   147a2:	2303      	movs	r3, #3
   147a4:	f842 3f10 	str.w	r3, [r2, #16]!
   147a8:	2300      	movs	r3, #0
   147aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   147ae:	4856      	ldr	r0, [pc, #344]	; (14908 <pwm_nrfx_set_cycles+0x18c>)
   147b0:	f7f7 f8aa 	bl	b908 <z_impl_z_log_msg_static_create>
   147b4:	46a5      	mov	sp, r4
	return false;
   147b6:	e01f      	b.n	147f8 <pwm_nrfx_set_cycles+0x7c>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   147b8:	f04f 0801 	mov.w	r8, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   147bc:	7baa      	ldrb	r2, [r5, #14]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   147be:	fa08 f801 	lsl.w	r8, r8, r1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   147c2:	2a01      	cmp	r2, #1
		pulse_cycles /= 2;
   147c4:	bf04      	itt	eq
   147c6:	085b      	lsreq	r3, r3, #1
		period_cycles /= 2;
   147c8:	0876      	lsreq	r6, r6, #1
	if (pulse_cycles == 0) {
   147ca:	2b00      	cmp	r3, #0
   147cc:	d074      	beq.n	148b8 <pwm_nrfx_set_cycles+0x13c>
	} else if (pulse_cycles >= period_cycles) {
   147ce:	429e      	cmp	r6, r3
   147d0:	d943      	bls.n	1485a <pwm_nrfx_set_cycles+0xde>
	if (period_cycles == data->period_cycles) {
   147d2:	6820      	ldr	r0, [r4, #0]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   147d4:	7b22      	ldrb	r2, [r4, #12]
	if (period_cycles == data->period_cycles) {
   147d6:	4286      	cmp	r6, r0
   147d8:	d023      	beq.n	14822 <pwm_nrfx_set_cycles+0xa6>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   147da:	ea32 0208 	bics.w	r2, r2, r8
   147de:	d011      	beq.n	14804 <pwm_nrfx_set_cycles+0x88>
		LOG_ERR("Incompatible period.");
   147e0:	4b4a      	ldr	r3, [pc, #296]	; (1490c <pwm_nrfx_set_cycles+0x190>)
   147e2:	617b      	str	r3, [r7, #20]
   147e4:	2302      	movs	r3, #2
   147e6:	613b      	str	r3, [r7, #16]
   147e8:	2300      	movs	r3, #0
   147ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   147ee:	4846      	ldr	r0, [pc, #280]	; (14908 <pwm_nrfx_set_cycles+0x18c>)
   147f0:	f107 0210 	add.w	r2, r7, #16
   147f4:	f7f7 f888 	bl	b908 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   147f8:	f06f 0015 	mvn.w	r0, #21
}
   147fc:	3718      	adds	r7, #24
   147fe:	46bd      	mov	sp, r7
   14800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14804:	4630      	mov	r0, r6
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   14806:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1480a:	d21a      	bcs.n	14842 <pwm_nrfx_set_cycles+0xc6>
			data->period_cycles = period_cycles;
   1480c:	6026      	str	r6, [r4, #0]
			data->prescaler     = prescaler;
   1480e:	7362      	strb	r2, [r4, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   14810:	682e      	ldr	r6, [r5, #0]
					  config->initial_config.count_mode,
   14812:	f895 e00e 	ldrb.w	lr, [r5, #14]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   14816:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1481a:	f8c6 e504 	str.w	lr, [r6, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1481e:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   14822:	7b62      	ldrb	r2, [r4, #13]
   14824:	40d3      	lsrs	r3, r2
   14826:	b29b      	uxth	r3, r3
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   14828:	f1bc 0f00 	cmp.w	ip, #0
   1482c:	d101      	bne.n	14832 <pwm_nrfx_set_cycles+0xb6>
   1482e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	if (!needs_pwm) {
   14832:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   14836:	808b      	strh	r3, [r1, #4]
		data->pwm_needed |= BIT(channel);
   14838:	7b23      	ldrb	r3, [r4, #12]
   1483a:	ea43 0308 	orr.w	r3, r3, r8
   1483e:	7323      	strb	r3, [r4, #12]
	if (data->pwm_needed == 0) {
   14840:	e030      	b.n	148a4 <pwm_nrfx_set_cycles+0x128>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   14842:	3201      	adds	r2, #1
   14844:	2a08      	cmp	r2, #8
		countertop >>= 1;
   14846:	ea4f 0050 	mov.w	r0, r0, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1484a:	d1dc      	bne.n	14806 <pwm_nrfx_set_cycles+0x8a>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   1484c:	466c      	mov	r4, sp
   1484e:	b088      	sub	sp, #32
   14850:	466a      	mov	r2, sp
   14852:	4b2f      	ldr	r3, [pc, #188]	; (14910 <pwm_nrfx_set_cycles+0x194>)
   14854:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14858:	e7a3      	b.n	147a2 <pwm_nrfx_set_cycles+0x26>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1485a:	004b      	lsls	r3, r1, #1
   1485c:	4423      	add	r3, r4
   1485e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   14862:	f1bc 0f00 	cmp.w	ip, #0
   14866:	d010      	beq.n	1488a <pwm_nrfx_set_cycles+0x10e>
   14868:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1486c:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   1486e:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.OUT[channel];
   14870:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14874:	2b00      	cmp	r3, #0
   14876:	db10      	blt.n	1489a <pwm_nrfx_set_cycles+0x11e>
        nrf_gpio_pin_clear(pin_number);
   14878:	603b      	str	r3, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1487a:	4638      	mov	r0, r7
   1487c:	f7ff fed8 	bl	14630 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14880:	2301      	movs	r3, #1
   14882:	683a      	ldr	r2, [r7, #0]
   14884:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   14886:	60c3      	str	r3, [r0, #12]
   14888:	e007      	b.n	1489a <pwm_nrfx_set_cycles+0x11e>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1488a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1488e:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   14890:	682b      	ldr	r3, [r5, #0]
   14892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   14896:	2b00      	cmp	r3, #0
   14898:	da1b      	bge.n	148d2 <pwm_nrfx_set_cycles+0x156>
		data->pwm_needed &= ~BIT(channel);
   1489a:	7b21      	ldrb	r1, [r4, #12]
   1489c:	ea21 0108 	bic.w	r1, r1, r8
   148a0:	7321      	strb	r1, [r4, #12]
	if (data->pwm_needed == 0) {
   148a2:	b1f9      	cbz	r1, 148e4 <pwm_nrfx_set_cycles+0x168>
		if (data->stop_requested) {
   148a4:	7be3      	ldrb	r3, [r4, #15]
   148a6:	bb23      	cbnz	r3, 148f2 <pwm_nrfx_set_cycles+0x176>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   148a8:	2300      	movs	r3, #0
   148aa:	2201      	movs	r2, #1
   148ac:	4628      	mov	r0, r5
   148ae:	f105 0118 	add.w	r1, r5, #24
   148b2:	f002 fe01 	bl	174b8 <nrfx_pwm_simple_playback>
   148b6:	e01a      	b.n	148ee <pwm_nrfx_set_cycles+0x172>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   148b8:	004a      	lsls	r2, r1, #1
   148ba:	4422      	add	r2, r4
   148bc:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   148c0:	f1bc 0f00 	cmp.w	ip, #0
   148c4:	d001      	beq.n	148ca <pwm_nrfx_set_cycles+0x14e>
   148c6:	8093      	strh	r3, [r2, #4]
   148c8:	e7e2      	b.n	14890 <pwm_nrfx_set_cycles+0x114>
   148ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   148ce:	8093      	strh	r3, [r2, #4]
   148d0:	e7cd      	b.n	1486e <pwm_nrfx_set_cycles+0xf2>
        nrf_gpio_pin_set(pin_number);
   148d2:	603b      	str	r3, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   148d4:	4638      	mov	r0, r7
   148d6:	f7ff feab 	bl	14630 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   148da:	2301      	movs	r3, #1
   148dc:	683a      	ldr	r2, [r7, #0]
   148de:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   148e0:	6083      	str	r3, [r0, #8]
   148e2:	e7da      	b.n	1489a <pwm_nrfx_set_cycles+0x11e>
		nrfx_pwm_stop(&config->pwm, false);
   148e4:	4628      	mov	r0, r5
   148e6:	f002 fe85 	bl	175f4 <nrfx_pwm_stop>
		data->stop_requested = true;
   148ea:	2301      	movs	r3, #1
   148ec:	73e3      	strb	r3, [r4, #15]
	return 0;
   148ee:	2000      	movs	r0, #0
   148f0:	e784      	b.n	147fc <pwm_nrfx_set_cycles+0x80>
			data->stop_requested = false;
   148f2:	2300      	movs	r3, #0
   148f4:	73e3      	strb	r3, [r4, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   148f6:	4628      	mov	r0, r5
   148f8:	f002 fe52 	bl	175a0 <nrfx_pwm_is_stopped>
   148fc:	2800      	cmp	r0, #0
   148fe:	d0fa      	beq.n	148f6 <pwm_nrfx_set_cycles+0x17a>
   14900:	e7d2      	b.n	148a8 <pwm_nrfx_set_cycles+0x12c>
   14902:	bf00      	nop
   14904:	00023e5e 	.word	0x00023e5e
   14908:	000208d4 	.word	0x000208d4
   1490c:	00023e73 	.word	0x00023e73
   14910:	00023e88 	.word	0x00023e88

00014914 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   14914:	4603      	mov	r3, r0
   14916:	b510      	push	{r4, lr}
   14918:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1491a:	7919      	ldrb	r1, [r3, #4]
   1491c:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1491e:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14920:	fa03 f101 	lsl.w	r1, r3, r1
   14924:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   14926:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14928:	681b      	ldr	r3, [r3, #0]
   1492a:	4219      	tst	r1, r3
   1492c:	d10e      	bne.n	1494c <gpio_pin_set_dt.isra.0+0x38>
   1492e:	490e      	ldr	r1, [pc, #56]	; (14968 <gpio_pin_set_dt.isra.0+0x54>)
   14930:	f240 5327 	movw	r3, #1319	; 0x527
   14934:	4a0d      	ldr	r2, [pc, #52]	; (1496c <gpio_pin_set_dt.isra.0+0x58>)
   14936:	480e      	ldr	r0, [pc, #56]	; (14970 <gpio_pin_set_dt.isra.0+0x5c>)
   14938:	f008 f8d7 	bl	1caea <assert_print>
   1493c:	480d      	ldr	r0, [pc, #52]	; (14974 <gpio_pin_set_dt.isra.0+0x60>)
   1493e:	f008 f8d4 	bl	1caea <assert_print>
   14942:	f240 5127 	movw	r1, #1319	; 0x527
   14946:	4809      	ldr	r0, [pc, #36]	; (1496c <gpio_pin_set_dt.isra.0+0x58>)
   14948:	f008 f8c8 	bl	1cadc <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1494c:	6823      	ldr	r3, [r4, #0]
   1494e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   14950:	bf18      	it	ne
   14952:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   14956:	b122      	cbz	r2, 14962 <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   14958:	6883      	ldr	r3, [r0, #8]
   1495a:	68db      	ldr	r3, [r3, #12]
}
   1495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   14960:	4718      	bx	r3
   14962:	6883      	ldr	r3, [r0, #8]
   14964:	691b      	ldr	r3, [r3, #16]
   14966:	e7f9      	b.n	1495c <gpio_pin_set_dt.isra.0+0x48>
   14968:	00021509 	.word	0x00021509
   1496c:	000214d8 	.word	0x000214d8
   14970:	00021547 	.word	0x00021547
   14974:	00021564 	.word	0x00021564

00014978 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   14978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1497c:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1497e:	6844      	ldr	r4, [r0, #4]
{
   14980:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   14982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   14984:	6905      	ldr	r5, [r0, #16]
	ret = pinctrl_lookup_state(config, id, &state);
   14986:	2100      	movs	r1, #0
   14988:	4630      	mov	r0, r6
   1498a:	1d3a      	adds	r2, r7, #4
   1498c:	f00a fc1d 	bl	1f1ca <pinctrl_lookup_state>
	if (ret < 0) {
   14990:	2800      	cmp	r0, #0
   14992:	db32      	blt.n	149fa <spi_nrfx_init+0x82>
	return pinctrl_apply_state_direct(config, state);
   14994:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   14996:	6832      	ldr	r2, [r6, #0]
   14998:	7919      	ldrb	r1, [r3, #4]
   1499a:	6818      	ldr	r0, [r3, #0]
   1499c:	f00a fc2b 	bl	1f1f6 <pinctrl_configure_pins>
	if (err < 0) {
   149a0:	2800      	cmp	r0, #0
   149a2:	db2a      	blt.n	149fa <spi_nrfx_init+0x82>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   149a4:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   149a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   149a8:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   149aa:	68ac      	ldr	r4, [r5, #8]
   149ac:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   149b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   149b4:	429c      	cmp	r4, r3
   149b6:	d304      	bcc.n	149c2 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   149b8:	4628      	mov	r0, r5
   149ba:	f00a fb43 	bl	1f044 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   149be:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   149c0:	e01b      	b.n	149fa <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   149c2:	6820      	ldr	r0, [r4, #0]
   149c4:	f00b fab4 	bl	1ff30 <z_device_is_ready>
   149c8:	b9d8      	cbnz	r0, 14a02 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   149ca:	6823      	ldr	r3, [r4, #0]
   149cc:	6819      	ldr	r1, [r3, #0]
   149ce:	7923      	ldrb	r3, [r4, #4]
   149d0:	466c      	mov	r4, sp
   149d2:	b08a      	sub	sp, #40	; 0x28
   149d4:	466a      	mov	r2, sp
   149d6:	61d3      	str	r3, [r2, #28]
   149d8:	f44f 7300 	mov.w	r3, #512	; 0x200
   149dc:	4833      	ldr	r0, [pc, #204]	; (14aac <spi_nrfx_init+0x134>)
   149de:	8413      	strh	r3, [r2, #32]
   149e0:	4b33      	ldr	r3, [pc, #204]	; (14ab0 <spi_nrfx_init+0x138>)
   149e2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   149e6:	4833      	ldr	r0, [pc, #204]	; (14ab4 <spi_nrfx_init+0x13c>)
   149e8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   149ec:	f842 3f10 	str.w	r3, [r2, #16]!
   149f0:	f00a fb03 	bl	1effa <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   149f4:	f06f 0012 	mvn.w	r0, #18
   149f8:	46a5      	mov	sp, r4
#endif
}
   149fa:	370c      	adds	r7, #12
   149fc:	46bd      	mov	sp, r7
   149fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   14a02:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   14a04:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   14a06:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   14a08:	f003 0230 	and.w	r2, r3, #48	; 0x30
   14a0c:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   14a0e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   14a12:	e9d0 c901 	ldrd	ip, r9, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   14a16:	d10e      	bne.n	14a36 <spi_nrfx_init+0xbe>
   14a18:	4927      	ldr	r1, [pc, #156]	; (14ab8 <spi_nrfx_init+0x140>)
   14a1a:	f240 23c1 	movw	r3, #705	; 0x2c1
   14a1e:	4a27      	ldr	r2, [pc, #156]	; (14abc <spi_nrfx_init+0x144>)
   14a20:	4827      	ldr	r0, [pc, #156]	; (14ac0 <spi_nrfx_init+0x148>)
   14a22:	f008 f862 	bl	1caea <assert_print>
   14a26:	4827      	ldr	r0, [pc, #156]	; (14ac4 <spi_nrfx_init+0x14c>)
   14a28:	f008 f85f 	bl	1caea <assert_print>
   14a2c:	f240 21c1 	movw	r1, #705	; 0x2c1
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   14a30:	4822      	ldr	r0, [pc, #136]	; (14abc <spi_nrfx_init+0x144>)
   14a32:	f008 f853 	bl	1cadc <assert_post_action>
   14a36:	f003 0206 	and.w	r2, r3, #6
   14a3a:	2a04      	cmp	r2, #4
   14a3c:	d109      	bne.n	14a52 <spi_nrfx_init+0xda>
   14a3e:	4922      	ldr	r1, [pc, #136]	; (14ac8 <spi_nrfx_init+0x150>)
   14a40:	f240 23c9 	movw	r3, #713	; 0x2c9
   14a44:	4a1d      	ldr	r2, [pc, #116]	; (14abc <spi_nrfx_init+0x144>)
   14a46:	481e      	ldr	r0, [pc, #120]	; (14ac0 <spi_nrfx_init+0x148>)
   14a48:	f008 f84f 	bl	1caea <assert_print>
   14a4c:	f240 21c9 	movw	r1, #713	; 0x2c9
   14a50:	e7ee      	b.n	14a30 <spi_nrfx_init+0xb8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14a52:	f8dc c000 	ldr.w	ip, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   14a56:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14a58:	fa06 fe01 	lsl.w	lr, r6, r1
	return gpio_pin_configure(spec->port,
   14a5c:	bf54      	ite	pl
   14a5e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   14a62:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14a66:	ea1e 0f0c 	tst.w	lr, ip
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   14a6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   14a6e:	d10c      	bne.n	14a8a <spi_nrfx_init+0x112>
   14a70:	4916      	ldr	r1, [pc, #88]	; (14acc <spi_nrfx_init+0x154>)
   14a72:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   14a76:	4a11      	ldr	r2, [pc, #68]	; (14abc <spi_nrfx_init+0x144>)
   14a78:	4811      	ldr	r0, [pc, #68]	; (14ac0 <spi_nrfx_init+0x148>)
   14a7a:	f008 f836 	bl	1caea <assert_print>
   14a7e:	4814      	ldr	r0, [pc, #80]	; (14ad0 <spi_nrfx_init+0x158>)
   14a80:	f008 f833 	bl	1caea <assert_print>
   14a84:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   14a88:	e7d2      	b.n	14a30 <spi_nrfx_init+0xb8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14a8a:	f8d8 c000 	ldr.w	ip, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   14a8e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14a90:	bf4c      	ite	mi
   14a92:	ea4c 030e 	orrmi.w	r3, ip, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   14a96:	ea2c 030e 	bicpl.w	r3, ip, lr
   14a9a:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   14a9e:	f8d9 3000 	ldr.w	r3, [r9]
   14aa2:	4798      	blx	r3
		if (ret < 0) {
   14aa4:	2800      	cmp	r0, #0
   14aa6:	dba8      	blt.n	149fa <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   14aa8:	3408      	adds	r4, #8
   14aaa:	e77f      	b.n	149ac <spi_nrfx_init+0x34>
   14aac:	00023ec5 	.word	0x00023ec5
   14ab0:	01000004 	.word	0x01000004
   14ab4:	000208ec 	.word	0x000208ec
   14ab8:	00023ee9 	.word	0x00023ee9
   14abc:	000214d8 	.word	0x000214d8
   14ac0:	00021547 	.word	0x00021547
   14ac4:	00023f22 	.word	0x00023f22
   14ac8:	00023f5f 	.word	0x00023f5f
   14acc:	00021509 	.word	0x00021509
   14ad0:	00021564 	.word	0x00021564

00014ad4 <transfer_next_chunk>:
{
   14ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   14ad6:	6904      	ldr	r4, [r0, #16]
{
   14ad8:	4606      	mov	r6, r0
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   14ada:	6e67      	ldr	r7, [r4, #100]	; 0x64
	const struct spi_nrfx_config *dev_config = dev->config;
   14adc:	6845      	ldr	r5, [r0, #4]
		return ctx->rx_len;
   14ade:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
{
   14ae0:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   14ae2:	b9af      	cbnz	r7, 14b10 <transfer_next_chunk+0x3c>
	if (chunk_len > 0) {
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d13b      	bne.n	14b60 <transfer_next_chunk+0x8c>
	int error = 0;
   14ae8:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   14aea:	2200      	movs	r2, #0
   14aec:	4620      	mov	r0, r4
   14aee:	4611      	mov	r1, r2
   14af0:	f00a fa86 	bl	1f000 <_spi_context_cs_control>
	if (!ctx->asynchronous) {
   14af4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
   14af8:	2b00      	cmp	r3, #0
   14afa:	d142      	bne.n	14b82 <transfer_next_chunk+0xae>
		ctx->sync_status = status;
   14afc:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   14afe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14b02:	f004 fd21 	bl	19548 <z_impl_k_sem_give>
	dev_data->busy = false;
   14b06:	2300      	movs	r3, #0
   14b08:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
   14b0c:	b005      	add	sp, #20
   14b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   14b10:	6e21      	ldr	r1, [r4, #96]	; 0x60
	} else if (!ctx->rx_len) {
   14b12:	bb0b      	cbnz	r3, 14b58 <transfer_next_chunk+0x84>
	return !!(ctx->tx_buf && ctx->tx_len);
   14b14:	bb39      	cbnz	r1, 14b66 <transfer_next_chunk+0x92>
		if (chunk_len > MAX_CHUNK_LEN) {
   14b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14b1a:	42ba      	cmp	r2, r7
   14b1c:	bf28      	it	cs
   14b1e:	463a      	movcs	r2, r7
   14b20:	6e23      	ldr	r3, [r4, #96]	; 0x60
		dev_data->chunk_len = chunk_len;
   14b22:	6762      	str	r2, [r4, #116]	; 0x74
		xfer.p_tx_buffer = tx_buf;
   14b24:	9100      	str	r1, [sp, #0]
   14b26:	b11b      	cbz	r3, 14b30 <transfer_next_chunk+0x5c>
   14b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   14b2a:	2b00      	cmp	r3, #0
   14b2c:	bf18      	it	ne
   14b2e:	4613      	movne	r3, r2
   14b30:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   14b32:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14b34:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   14b36:	b11b      	cbz	r3, 14b40 <transfer_next_chunk+0x6c>
   14b38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   14b3a:	2b00      	cmp	r3, #0
   14b3c:	bf18      	it	ne
   14b3e:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   14b40:	2200      	movs	r2, #0
   14b42:	4669      	mov	r1, sp
   14b44:	4628      	mov	r0, r5
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   14b46:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   14b48:	f002 ff50 	bl	179ec <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   14b4c:	4b14      	ldr	r3, [pc, #80]	; (14ba0 <transfer_next_chunk+0xcc>)
   14b4e:	4298      	cmp	r0, r3
   14b50:	d0dc      	beq.n	14b0c <transfer_next_chunk+0x38>
			error = -EIO;
   14b52:	f06f 0504 	mvn.w	r5, #4
   14b56:	e7c8      	b.n	14aea <transfer_next_chunk+0x16>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   14b58:	429f      	cmp	r7, r3
   14b5a:	bf28      	it	cs
   14b5c:	461f      	movcs	r7, r3
   14b5e:	e7d9      	b.n	14b14 <transfer_next_chunk+0x40>
		const uint8_t *tx_buf = ctx->tx_buf;
   14b60:	461f      	mov	r7, r3
   14b62:	6e21      	ldr	r1, [r4, #96]	; 0x60
	return !!(ctx->tx_buf && ctx->tx_len);
   14b64:	e7d7      	b.n	14b16 <transfer_next_chunk+0x42>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14b66:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   14b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14b6e:	d0d2      	beq.n	14b16 <transfer_next_chunk+0x42>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   14b70:	2f08      	cmp	r7, #8
   14b72:	bf28      	it	cs
   14b74:	2708      	movcs	r7, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   14b76:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   14b78:	463a      	mov	r2, r7
   14b7a:	f008 ffc5 	bl	1db08 <memcpy>
			tx_buf = dev_data->buffer;
   14b7e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   14b80:	e7c9      	b.n	14b16 <transfer_next_chunk+0x42>
		if (ctx->callback) {
   14b82:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14b84:	b11b      	cbz	r3, 14b8e <transfer_next_chunk+0xba>
			ctx->callback(dev, status, ctx->callback_data);
   14b86:	4629      	mov	r1, r5
   14b88:	4630      	mov	r0, r6
   14b8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   14b8c:	4798      	blx	r3
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
   14b8e:	6823      	ldr	r3, [r4, #0]
   14b90:	889b      	ldrh	r3, [r3, #4]
   14b92:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   14b96:	d1b6      	bne.n	14b06 <transfer_next_chunk+0x32>
			ctx->owner = NULL;
   14b98:	6063      	str	r3, [r4, #4]
   14b9a:	f104 0010 	add.w	r0, r4, #16
   14b9e:	e7b0      	b.n	14b02 <transfer_next_chunk+0x2e>
   14ba0:	0bad0000 	.word	0x0bad0000

00014ba4 <transceive>:
{
   14ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ba8:	b08b      	sub	sp, #44	; 0x2c
   14baa:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   14bac:	888b      	ldrh	r3, [r1, #4]
   14bae:	af00      	add	r7, sp, #0
   14bb0:	049b      	lsls	r3, r3, #18
   14bb2:	4680      	mov	r8, r0
   14bb4:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   14bb6:	6904      	ldr	r4, [r0, #16]
{
   14bb8:	60ba      	str	r2, [r7, #8]
   14bba:	d438      	bmi.n	14c2e <transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   14bbc:	f04f 33ff 	mov.w	r3, #4294967295
   14bc0:	f04f 32ff 	mov.w	r2, #4294967295
   14bc4:	f104 0010 	add.w	r0, r4, #16
   14bc8:	f004 fd02 	bl	195d0 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   14bcc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
	ctx->owner = spi_cfg;
   14bd0:	6066      	str	r6, [r4, #4]
	ctx->asynchronous = asynchronous;
   14bd2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	ctx->callback = callback;
   14bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14bd8:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->callback_data = callback_data;
   14bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14bdc:	64a3      	str	r3, [r4, #72]	; 0x48
	const struct spi_nrfx_config *dev_config = dev->config;
   14bde:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   14be2:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   14be6:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   14be8:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   14bea:	f899 3079 	ldrb.w	r3, [r9, #121]	; 0x79
   14bee:	607b      	str	r3, [r7, #4]
   14bf0:	b123      	cbz	r3, 14bfc <transceive+0x58>
   14bf2:	f8d9 3000 	ldr.w	r3, [r9]
   14bf6:	429e      	cmp	r6, r3
   14bf8:	f000 80e0 	beq.w	14dbc <transceive+0x218>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   14bfc:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   14c00:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   14c04:	d01a      	beq.n	14c3c <transceive+0x98>
		LOG_ERR("Half-duplex not supported");
   14c06:	4bab      	ldr	r3, [pc, #684]	; (14eb4 <transceive+0x310>)
		return -ENOTSUP;
   14c08:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   14c0c:	627b      	str	r3, [r7, #36]	; 0x24
   14c0e:	2302      	movs	r3, #2
   14c10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c14:	48a8      	ldr	r0, [pc, #672]	; (14eb8 <transceive+0x314>)
   14c16:	623b      	str	r3, [r7, #32]
   14c18:	f107 0220 	add.w	r2, r7, #32
   14c1c:	f00a f9ed 	bl	1effa <z_log_msg_static_create.constprop.0>
		ctx->owner = NULL;
   14c20:	2300      	movs	r3, #0
   14c22:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   14c24:	f104 0010 	add.w	r0, r4, #16
   14c28:	f004 fc8e 	bl	19548 <z_impl_k_sem_give>
}
   14c2c:	e13d      	b.n	14eaa <transceive+0x306>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   14c2e:	69a3      	ldr	r3, [r4, #24]
   14c30:	2b00      	cmp	r3, #0
   14c32:	d1c3      	bne.n	14bbc <transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   14c34:	6863      	ldr	r3, [r4, #4]
   14c36:	4299      	cmp	r1, r3
   14c38:	d1c0      	bne.n	14bbc <transceive+0x18>
   14c3a:	e7d0      	b.n	14bde <transceive+0x3a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   14c3c:	f01c 0f01 	tst.w	ip, #1
   14c40:	d016      	beq.n	14c70 <transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   14c42:	466d      	mov	r5, sp
   14c44:	b088      	sub	sp, #32
   14c46:	f8d8 3000 	ldr.w	r3, [r8]
   14c4a:	466a      	mov	r2, sp
   14c4c:	499b      	ldr	r1, [pc, #620]	; (14ebc <transceive+0x318>)
   14c4e:	489a      	ldr	r0, [pc, #616]	; (14eb8 <transceive+0x314>)
   14c50:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14c54:	f44f 7300 	mov.w	r3, #512	; 0x200
   14c58:	8393      	strh	r3, [r2, #28]
   14c5a:	4b99      	ldr	r3, [pc, #612]	; (14ec0 <transceive+0x31c>)
   14c5c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   14c60:	f842 3f10 	str.w	r3, [r2, #16]!
   14c64:	f00a f9c9 	bl	1effa <z_log_msg_static_create.constprop.0>
   14c68:	46ad      	mov	sp, r5
		return -EINVAL;
   14c6a:	f06f 0515 	mvn.w	r5, #21
   14c6e:	e7d7      	b.n	14c20 <transceive+0x7c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   14c70:	f01c 0f08 	tst.w	ip, #8
   14c74:	d00b      	beq.n	14c8e <transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
   14c76:	4b93      	ldr	r3, [pc, #588]	; (14ec4 <transceive+0x320>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   14c78:	627b      	str	r3, [r7, #36]	; 0x24
   14c7a:	2302      	movs	r3, #2
   14c7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c80:	488d      	ldr	r0, [pc, #564]	; (14eb8 <transceive+0x314>)
   14c82:	623b      	str	r3, [r7, #32]
   14c84:	f107 0220 	add.w	r2, r7, #32
   14c88:	f00a f9b7 	bl	1effa <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   14c8c:	e7ed      	b.n	14c6a <transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   14c8e:	f3cc 1345 	ubfx	r3, ip, #5, #6
   14c92:	2b08      	cmp	r3, #8
   14c94:	d001      	beq.n	14c9a <transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   14c96:	4b8c      	ldr	r3, [pc, #560]	; (14ec8 <transceive+0x324>)
   14c98:	e7ee      	b.n	14c78 <transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
   14c9a:	6833      	ldr	r3, [r6, #0]
   14c9c:	603b      	str	r3, [r7, #0]
   14c9e:	683a      	ldr	r2, [r7, #0]
   14ca0:	4b8a      	ldr	r3, [pc, #552]	; (14ecc <transceive+0x328>)
   14ca2:	429a      	cmp	r2, r3
   14ca4:	d801      	bhi.n	14caa <transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   14ca6:	4b8a      	ldr	r3, [pc, #552]	; (14ed0 <transceive+0x32c>)
   14ca8:	e7e6      	b.n	14c78 <transceive+0xd4>
	if (max_freq > 16000000 &&
   14caa:	4b8a      	ldr	r3, [pc, #552]	; (14ed4 <transceive+0x330>)
   14cac:	429d      	cmp	r5, r3
   14cae:	d906      	bls.n	14cbe <transceive+0x11a>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   14cb0:	4a89      	ldr	r2, [pc, #548]	; (14ed8 <transceive+0x334>)
   14cb2:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   14cb6:	f012 0f03 	tst.w	r2, #3
   14cba:	bf18      	it	ne
   14cbc:	461d      	movne	r5, r3
	config = dev_config->def_config;
   14cbe:	68fb      	ldr	r3, [r7, #12]
   14cc0:	f107 0e10 	add.w	lr, r7, #16
   14cc4:	f103 0b0c 	add.w	fp, r3, #12
   14cc8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   14ccc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   14cd0:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
   14cd2:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   14cd6:	42ab      	cmp	r3, r5
   14cd8:	bf28      	it	cs
   14cda:	462b      	movcs	r3, r5
   14cdc:	461d      	mov	r5, r3
	if (frequency < 250000) {
   14cde:	4b7f      	ldr	r3, [pc, #508]	; (14edc <transceive+0x338>)
	config = dev_config->def_config;
   14ce0:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   14ce4:	429d      	cmp	r5, r3
   14ce6:	d94b      	bls.n	14d80 <transceive+0x1dc>
	} else if (frequency < 500000) {
   14ce8:	4b7d      	ldr	r3, [pc, #500]	; (14ee0 <transceive+0x33c>)
   14cea:	429d      	cmp	r5, r3
   14cec:	d94b      	bls.n	14d86 <transceive+0x1e2>
	} else if (frequency < 1000000) {
   14cee:	4b7d      	ldr	r3, [pc, #500]	; (14ee4 <transceive+0x340>)
   14cf0:	429d      	cmp	r5, r3
   14cf2:	d94b      	bls.n	14d8c <transceive+0x1e8>
	} else if (frequency < 2000000) {
   14cf4:	4b7c      	ldr	r3, [pc, #496]	; (14ee8 <transceive+0x344>)
   14cf6:	429d      	cmp	r5, r3
   14cf8:	d94b      	bls.n	14d92 <transceive+0x1ee>
	} else if (frequency < 4000000) {
   14cfa:	4b7c      	ldr	r3, [pc, #496]	; (14eec <transceive+0x348>)
   14cfc:	429d      	cmp	r5, r3
   14cfe:	d94b      	bls.n	14d98 <transceive+0x1f4>
	} else if (frequency < 8000000) {
   14d00:	4b7b      	ldr	r3, [pc, #492]	; (14ef0 <transceive+0x34c>)
   14d02:	429d      	cmp	r5, r3
   14d04:	d34b      	bcc.n	14d9e <transceive+0x1fa>
	} else if (frequency < 16000000) {
   14d06:	4b73      	ldr	r3, [pc, #460]	; (14ed4 <transceive+0x330>)
   14d08:	429d      	cmp	r5, r3
   14d0a:	d34b      	bcc.n	14da4 <transceive+0x200>
		return NRF_SPIM_FREQ_16M;
   14d0c:	4b79      	ldr	r3, [pc, #484]	; (14ef4 <transceive+0x350>)
   14d0e:	429d      	cmp	r5, r3
   14d10:	bf2c      	ite	cs
   14d12:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   14d16:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   14d1a:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   14d1e:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   14d20:	f00c 0304 	and.w	r3, ip, #4
   14d24:	d041      	beq.n	14daa <transceive+0x206>
			return NRF_SPIM_MODE_2;
   14d26:	2b00      	cmp	r3, #0
   14d28:	bf14      	ite	ne
   14d2a:	2303      	movne	r3, #3
   14d2c:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   14d2e:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   14d30:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   14d32:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   14d36:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   14d3a:	b12b      	cbz	r3, 14d48 <transceive+0x1a4>
		nrfx_spim_uninit(&dev_config->spim);
   14d3c:	68f8      	ldr	r0, [r7, #12]
   14d3e:	f002 fdeb 	bl	17918 <nrfx_spim_uninit>
		dev_data->initialized = false;
   14d42:	2300      	movs	r3, #0
   14d44:	f889 3079 	strb.w	r3, [r9, #121]	; 0x79
	result = nrfx_spim_init(&dev_config->spim, &config,
   14d48:	464b      	mov	r3, r9
   14d4a:	4a6b      	ldr	r2, [pc, #428]	; (14ef8 <transceive+0x354>)
   14d4c:	68f8      	ldr	r0, [r7, #12]
   14d4e:	f107 0110 	add.w	r1, r7, #16
   14d52:	f002 fcaf 	bl	176b4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   14d56:	4b69      	ldr	r3, [pc, #420]	; (14efc <transceive+0x358>)
   14d58:	4298      	cmp	r0, r3
   14d5a:	d02a      	beq.n	14db2 <transceive+0x20e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   14d5c:	466d      	mov	r5, sp
   14d5e:	b088      	sub	sp, #32
   14d60:	466a      	mov	r2, sp
   14d62:	4b67      	ldr	r3, [pc, #412]	; (14f00 <transceive+0x35c>)
   14d64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d68:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14d6c:	2303      	movs	r3, #3
   14d6e:	4852      	ldr	r0, [pc, #328]	; (14eb8 <transceive+0x314>)
   14d70:	f842 3f10 	str.w	r3, [r2, #16]!
   14d74:	f00a f941 	bl	1effa <z_log_msg_static_create.constprop.0>
   14d78:	46ad      	mov	sp, r5
		return -EIO;
   14d7a:	f06f 0504 	mvn.w	r5, #4
   14d7e:	e74f      	b.n	14c20 <transceive+0x7c>
		return NRF_SPIM_FREQ_125K;
   14d80:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   14d84:	e7c9      	b.n	14d1a <transceive+0x176>
		return NRF_SPIM_FREQ_250K;
   14d86:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   14d8a:	e7c6      	b.n	14d1a <transceive+0x176>
		return NRF_SPIM_FREQ_500K;
   14d8c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   14d90:	e7c3      	b.n	14d1a <transceive+0x176>
		return NRF_SPIM_FREQ_1M;
   14d92:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   14d96:	e7c0      	b.n	14d1a <transceive+0x176>
		return NRF_SPIM_FREQ_2M;
   14d98:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   14d9c:	e7bd      	b.n	14d1a <transceive+0x176>
		return NRF_SPIM_FREQ_4M;
   14d9e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   14da2:	e7ba      	b.n	14d1a <transceive+0x176>
		return NRF_SPIM_FREQ_8M;
   14da4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   14da8:	e7b7      	b.n	14d1a <transceive+0x176>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   14daa:	3b00      	subs	r3, #0
   14dac:	bf18      	it	ne
   14dae:	2301      	movne	r3, #1
   14db0:	e7bd      	b.n	14d2e <transceive+0x18a>
	dev_data->initialized = true;
   14db2:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   14db4:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   14db8:	f889 3079 	strb.w	r3, [r9, #121]	; 0x79
		dev_data->busy = true;
   14dbc:	2301      	movs	r3, #1
   14dbe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   14dc2:	68bb      	ldr	r3, [r7, #8]
   14dc4:	2b00      	cmp	r3, #0
   14dc6:	d157      	bne.n	14e78 <transceive+0x2d4>
   14dc8:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   14dca:	2300      	movs	r3, #0
   14dcc:	6563      	str	r3, [r4, #84]	; 0x54
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   14dce:	f104 0264 	add.w	r2, r4, #100	; 0x64
   14dd2:	f104 0154 	add.w	r1, r4, #84	; 0x54
   14dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   14dda:	f00a f8fb 	bl	1efd4 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   14dde:	6620      	str	r0, [r4, #96]	; 0x60
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   14de0:	f1ba 0f00 	cmp.w	sl, #0
   14de4:	d150      	bne.n	14e88 <transceive+0x2e4>
   14de6:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   14dea:	2300      	movs	r3, #0
   14dec:	65e3      	str	r3, [r4, #92]	; 0x5c
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   14dee:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   14df2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   14df6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14dfa:	f00a f8eb 	bl	1efd4 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   14dfe:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
   14e00:	2101      	movs	r1, #1
   14e02:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
   14e04:	66a0      	str	r0, [r4, #104]	; 0x68
	ctx->sync_status = 0;
   14e06:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   14e08:	4620      	mov	r0, r4
   14e0a:	f00a f8f9 	bl	1f000 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   14e0e:	4640      	mov	r0, r8
   14e10:	f7ff fe60 	bl	14ad4 <transfer_next_chunk>
	if (!ctx->asynchronous) {
   14e14:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   14e18:	2900      	cmp	r1, #0
   14e1a:	d146      	bne.n	14eaa <transceive+0x306>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   14e1c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   14e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
			     ctx->config->frequency;
   14e20:	4626      	mov	r6, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   14e22:	429d      	cmp	r5, r3
   14e24:	bf38      	it	cc
   14e26:	461d      	movcc	r5, r3
   14e28:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   14e2c:	435d      	muls	r5, r3
			     ctx->config->frequency;
   14e2e:	f856 3b28 	ldr.w	r3, [r6], #40
   14e32:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   14e36:	681b      	ldr	r3, [r3, #0]
   14e38:	f240 30e7 	movw	r0, #999	; 0x3e7
   14e3c:	fbb5 f5f3 	udiv	r5, r5, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   14e40:	35c8      	adds	r5, #200	; 0xc8
   14e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14e46:	2300      	movs	r3, #0
   14e48:	fbe5 010c 	umlal	r0, r1, r5, ip
   14e4c:	f7f3 fd72 	bl	8934 <__aeabi_uldivmod>
   14e50:	4602      	mov	r2, r0
   14e52:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   14e54:	4630      	mov	r0, r6
   14e56:	f004 fbbb 	bl	195d0 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
   14e5a:	b1e8      	cbz	r0, 14e98 <transceive+0x2f4>
			LOG_ERR("Timeout waiting for transfer complete");
   14e5c:	4b29      	ldr	r3, [pc, #164]	; (14f04 <transceive+0x360>)
   14e5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e62:	627b      	str	r3, [r7, #36]	; 0x24
   14e64:	2302      	movs	r3, #2
   14e66:	4814      	ldr	r0, [pc, #80]	; (14eb8 <transceive+0x314>)
   14e68:	623b      	str	r3, [r7, #32]
   14e6a:	f107 0220 	add.w	r2, r7, #32
   14e6e:	f00a f8c4 	bl	1effa <z_log_msg_static_create.constprop.0>
			return -ETIMEDOUT;
   14e72:	f06f 0573 	mvn.w	r5, #115	; 0x73
   14e76:	e6d3      	b.n	14c20 <transceive+0x7c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   14e78:	68bb      	ldr	r3, [r7, #8]
   14e7a:	681b      	ldr	r3, [r3, #0]
   14e7c:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   14e7e:	2b00      	cmp	r3, #0
   14e80:	d0a3      	beq.n	14dca <transceive+0x226>
   14e82:	68bb      	ldr	r3, [r7, #8]
   14e84:	685b      	ldr	r3, [r3, #4]
   14e86:	e7a1      	b.n	14dcc <transceive+0x228>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   14e88:	f8da 3000 	ldr.w	r3, [sl]
   14e8c:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   14e8e:	2b00      	cmp	r3, #0
   14e90:	d0ab      	beq.n	14dea <transceive+0x246>
   14e92:	f8da 3004 	ldr.w	r3, [sl, #4]
   14e96:	e7a9      	b.n	14dec <transceive+0x248>
	if (!ctx->asynchronous || (status < 0)) {
   14e98:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
		status = ctx->sync_status;
   14e9c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if (!ctx->asynchronous || (status < 0)) {
   14e9e:	2b00      	cmp	r3, #0
   14ea0:	f43f aebe 	beq.w	14c20 <transceive+0x7c>
   14ea4:	2d00      	cmp	r5, #0
   14ea6:	f6ff aebb 	blt.w	14c20 <transceive+0x7c>
}
   14eaa:	4628      	mov	r0, r5
   14eac:	372c      	adds	r7, #44	; 0x2c
   14eae:	46bd      	mov	sp, r7
   14eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eb4:	00023f92 	.word	0x00023f92
   14eb8:	000208ec 	.word	0x000208ec
   14ebc:	00023fac 	.word	0x00023fac
   14ec0:	01000003 	.word	0x01000003
   14ec4:	00023fce 	.word	0x00023fce
   14ec8:	00023fed 	.word	0x00023fed
   14ecc:	0001e847 	.word	0x0001e847
   14ed0:	0002401c 	.word	0x0002401c
   14ed4:	00f42400 	.word	0x00f42400
   14ed8:	40005000 	.word	0x40005000
   14edc:	0003d08f 	.word	0x0003d08f
   14ee0:	0007a11f 	.word	0x0007a11f
   14ee4:	000f423f 	.word	0x000f423f
   14ee8:	001e847f 	.word	0x001e847f
   14eec:	003d08ff 	.word	0x003d08ff
   14ef0:	007a1200 	.word	0x007a1200
   14ef4:	01e84800 	.word	0x01e84800
   14ef8:	00014f09 	.word	0x00014f09
   14efc:	0bad0000 	.word	0x0bad0000
   14f00:	0002404d 	.word	0x0002404d
   14f04:	00024074 	.word	0x00024074

00014f08 <event_handler>:
{
   14f08:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   14f0a:	7803      	ldrb	r3, [r0, #0]
{
   14f0c:	460c      	mov	r4, r1
   14f0e:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   14f10:	2b00      	cmp	r3, #0
   14f12:	d154      	bne.n	14fbe <event_handler+0xb6>
	if (!ctx->tx_len) {
   14f14:	6e4b      	ldr	r3, [r1, #100]	; 0x64
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   14f16:	6f4a      	ldr	r2, [r1, #116]	; 0x74
   14f18:	b15b      	cbz	r3, 14f32 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   14f1a:	429a      	cmp	r2, r3
   14f1c:	d91e      	bls.n	14f5c <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   14f1e:	4b29      	ldr	r3, [pc, #164]	; (14fc4 <event_handler+0xbc>)
   14f20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f24:	9305      	str	r3, [sp, #20]
   14f26:	2302      	movs	r3, #2
   14f28:	4827      	ldr	r0, [pc, #156]	; (14fc8 <event_handler+0xc0>)
   14f2a:	aa04      	add	r2, sp, #16
   14f2c:	9304      	str	r3, [sp, #16]
   14f2e:	f00a f864 	bl	1effa <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   14f32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   14f34:	6f62      	ldr	r2, [r4, #116]	; 0x74
   14f36:	b15b      	cbz	r3, 14f50 <event_handler+0x48>
	if (len > ctx->rx_len) {
   14f38:	429a      	cmp	r2, r3
   14f3a:	d927      	bls.n	14f8c <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   14f3c:	4b21      	ldr	r3, [pc, #132]	; (14fc4 <event_handler+0xbc>)
   14f3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f42:	9305      	str	r3, [sp, #20]
   14f44:	2302      	movs	r3, #2
   14f46:	4820      	ldr	r0, [pc, #128]	; (14fc8 <event_handler+0xc0>)
   14f48:	aa04      	add	r2, sp, #16
   14f4a:	9304      	str	r3, [sp, #16]
   14f4c:	f00a f855 	bl	1effa <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   14f50:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
   14f52:	b006      	add	sp, #24
   14f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   14f58:	f7ff bdbc 	b.w	14ad4 <transfer_next_chunk>
	ctx->tx_len -= len;
   14f5c:	1a9b      	subs	r3, r3, r2
   14f5e:	664b      	str	r3, [r1, #100]	; 0x64
	if (!ctx->tx_len) {
   14f60:	b973      	cbnz	r3, 14f80 <event_handler+0x78>
		++ctx->current_tx;
   14f62:	6d0b      	ldr	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_tx,
   14f64:	f101 0264 	add.w	r2, r1, #100	; 0x64
		++ctx->current_tx;
   14f68:	3308      	adds	r3, #8
   14f6a:	650b      	str	r3, [r1, #80]	; 0x50
		--ctx->tx_count;
   14f6c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
			spi_context_get_next_buf(&ctx->current_tx,
   14f6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
		--ctx->tx_count;
   14f72:	3b01      	subs	r3, #1
   14f74:	654b      	str	r3, [r1, #84]	; 0x54
			spi_context_get_next_buf(&ctx->current_tx,
   14f76:	3154      	adds	r1, #84	; 0x54
   14f78:	f00a f82c 	bl	1efd4 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   14f7c:	6620      	str	r0, [r4, #96]	; 0x60
   14f7e:	e7d8      	b.n	14f32 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   14f80:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   14f82:	2b00      	cmp	r3, #0
   14f84:	d0d5      	beq.n	14f32 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   14f86:	4413      	add	r3, r2
   14f88:	660b      	str	r3, [r1, #96]	; 0x60
   14f8a:	e7d2      	b.n	14f32 <event_handler+0x2a>
	ctx->rx_len -= len;
   14f8c:	1a9b      	subs	r3, r3, r2
   14f8e:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (!ctx->rx_len) {
   14f90:	b97b      	cbnz	r3, 14fb2 <event_handler+0xaa>
		++ctx->current_rx;
   14f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
			spi_context_get_next_buf(&ctx->current_rx,
   14f94:	f104 026c 	add.w	r2, r4, #108	; 0x6c
		++ctx->current_rx;
   14f98:	3308      	adds	r3, #8
   14f9a:	65a3      	str	r3, [r4, #88]	; 0x58
		--ctx->rx_count;
   14f9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			spi_context_get_next_buf(&ctx->current_rx,
   14f9e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
		--ctx->rx_count;
   14fa2:	3b01      	subs	r3, #1
   14fa4:	65e3      	str	r3, [r4, #92]	; 0x5c
			spi_context_get_next_buf(&ctx->current_rx,
   14fa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14faa:	f00a f813 	bl	1efd4 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   14fae:	66a0      	str	r0, [r4, #104]	; 0x68
   14fb0:	e7ce      	b.n	14f50 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   14fb2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14fb4:	2b00      	cmp	r3, #0
   14fb6:	d0cb      	beq.n	14f50 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   14fb8:	4413      	add	r3, r2
   14fba:	66a3      	str	r3, [r4, #104]	; 0x68
   14fbc:	e7c8      	b.n	14f50 <event_handler+0x48>
}
   14fbe:	b006      	add	sp, #24
   14fc0:	bd10      	pop	{r4, pc}
   14fc2:	bf00      	nop
   14fc4:	0002409a 	.word	0x0002409a
   14fc8:	000208ec 	.word	0x000208ec

00014fcc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   14fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   14fce:	794b      	ldrb	r3, [r1, #5]
   14fd0:	2b01      	cmp	r3, #1
   14fd2:	d029      	beq.n	15028 <uarte_nrfx_configure+0x5c>
   14fd4:	2b03      	cmp	r3, #3
   14fd6:	d124      	bne.n	15022 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14fd8:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14fda:	798b      	ldrb	r3, [r1, #6]
   14fdc:	2b03      	cmp	r3, #3
   14fde:	d120      	bne.n	15022 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14fe0:	79ce      	ldrb	r6, [r1, #7]
   14fe2:	b10e      	cbz	r6, 14fe8 <uarte_nrfx_configure+0x1c>
   14fe4:	2e01      	cmp	r6, #1
   14fe6:	d11c      	bne.n	15022 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14fe8:	790a      	ldrb	r2, [r1, #4]
   14fea:	2a01      	cmp	r2, #1
   14fec:	d01e      	beq.n	1502c <uarte_nrfx_configure+0x60>
   14fee:	2a02      	cmp	r2, #2
   14ff0:	d020      	beq.n	15034 <uarte_nrfx_configure+0x68>
   14ff2:	b9b2      	cbnz	r2, 15022 <uarte_nrfx_configure+0x56>
   14ff4:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14ff6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14ff8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   14ffa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14ffe:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   15002:	d06e      	beq.n	150e2 <uarte_nrfx_configure+0x116>
   15004:	d833      	bhi.n	1506e <uarte_nrfx_configure+0xa2>
   15006:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1500a:	d06d      	beq.n	150e8 <uarte_nrfx_configure+0x11c>
   1500c:	d81c      	bhi.n	15048 <uarte_nrfx_configure+0x7c>
   1500e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15012:	d06b      	beq.n	150ec <uarte_nrfx_configure+0x120>
   15014:	d810      	bhi.n	15038 <uarte_nrfx_configure+0x6c>
   15016:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1501a:	d06a      	beq.n	150f2 <uarte_nrfx_configure+0x126>
   1501c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15020:	d06a      	beq.n	150f8 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   15022:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15026:	e05b      	b.n	150e0 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   15028:	2700      	movs	r7, #0
   1502a:	e7d6      	b.n	14fda <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1502c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15030:	220e      	movs	r2, #14
   15032:	e7e0      	b.n	14ff6 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   15034:	2400      	movs	r4, #0
   15036:	e7fb      	b.n	15030 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   15038:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1503c:	d05f      	beq.n	150fe <uarte_nrfx_configure+0x132>
   1503e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15042:	d1ee      	bne.n	15022 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15044:	4b38      	ldr	r3, [pc, #224]	; (15128 <uarte_nrfx_configure+0x15c>)
   15046:	e03c      	b.n	150c2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   15048:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1504c:	d05a      	beq.n	15104 <uarte_nrfx_configure+0x138>
   1504e:	d807      	bhi.n	15060 <uarte_nrfx_configure+0x94>
   15050:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15054:	d058      	beq.n	15108 <uarte_nrfx_configure+0x13c>
   15056:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1505a:	d1e2      	bne.n	15022 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1505c:	4b33      	ldr	r3, [pc, #204]	; (1512c <uarte_nrfx_configure+0x160>)
   1505e:	e030      	b.n	150c2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   15060:	f647 2512 	movw	r5, #31250	; 0x7a12
   15064:	42ab      	cmp	r3, r5
   15066:	d1dc      	bne.n	15022 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15068:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1506c:	e029      	b.n	150c2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1506e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15072:	d04b      	beq.n	1510c <uarte_nrfx_configure+0x140>
   15074:	d813      	bhi.n	1509e <uarte_nrfx_configure+0xd2>
   15076:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1507a:	d04a      	beq.n	15112 <uarte_nrfx_configure+0x146>
   1507c:	d809      	bhi.n	15092 <uarte_nrfx_configure+0xc6>
   1507e:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   15082:	42ab      	cmp	r3, r5
   15084:	d047      	beq.n	15116 <uarte_nrfx_configure+0x14a>
   15086:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1508a:	d1ca      	bne.n	15022 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1508c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15090:	e017      	b.n	150c2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   15092:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15096:	d1c4      	bne.n	15022 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15098:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1509c:	e011      	b.n	150c2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1509e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   150a2:	d03b      	beq.n	1511c <uarte_nrfx_configure+0x150>
   150a4:	d808      	bhi.n	150b8 <uarte_nrfx_configure+0xec>
   150a6:	4d22      	ldr	r5, [pc, #136]	; (15130 <uarte_nrfx_configure+0x164>)
   150a8:	42ab      	cmp	r3, r5
   150aa:	d03a      	beq.n	15122 <uarte_nrfx_configure+0x156>
   150ac:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   150b0:	d1b7      	bne.n	15022 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   150b2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   150b6:	e004      	b.n	150c2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   150b8:	4d1e      	ldr	r5, [pc, #120]	; (15134 <uarte_nrfx_configure+0x168>)
   150ba:	42ab      	cmp	r3, r5
   150bc:	d1b1      	bne.n	15022 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   150be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   150c2:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   150c4:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   150c8:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   150ca:	433a      	orrs	r2, r7
   150cc:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   150ce:	4334      	orrs	r4, r6
   150d0:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   150d2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   150d6:	1d2b      	adds	r3, r5, #4
   150d8:	c903      	ldmia	r1, {r0, r1}
   150da:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   150de:	2000      	movs	r0, #0
}
   150e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   150e2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   150e6:	e7ec      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   150e8:	4b13      	ldr	r3, [pc, #76]	; (15138 <uarte_nrfx_configure+0x16c>)
   150ea:	e7ea      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   150ec:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   150f0:	e7e7      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   150f2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   150f6:	e7e4      	b.n	150c2 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   150f8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   150fc:	e7e1      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   150fe:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15102:	e7de      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15104:	4b0d      	ldr	r3, [pc, #52]	; (1513c <uarte_nrfx_configure+0x170>)
   15106:	e7dc      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15108:	4b0d      	ldr	r3, [pc, #52]	; (15140 <uarte_nrfx_configure+0x174>)
   1510a:	e7da      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1510c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15110:	e7d7      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15112:	4b0c      	ldr	r3, [pc, #48]	; (15144 <uarte_nrfx_configure+0x178>)
   15114:	e7d5      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15116:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1511a:	e7d2      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1511c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15120:	e7cf      	b.n	150c2 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   15122:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15126:	e7cc      	b.n	150c2 <uarte_nrfx_configure+0xf6>
   15128:	0013b000 	.word	0x0013b000
   1512c:	004ea000 	.word	0x004ea000
   15130:	0003d090 	.word	0x0003d090
   15134:	000f4240 	.word	0x000f4240
   15138:	00275000 	.word	0x00275000
   1513c:	0075c000 	.word	0x0075c000
   15140:	003af000 	.word	0x003af000
   15144:	013a9000 	.word	0x013a9000

00015148 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1514c:	4680      	mov	r8, r0
   1514e:	b087      	sub	sp, #28
   15150:	2200      	movs	r2, #0
   15152:	2101      	movs	r1, #1
   15154:	2008      	movs	r0, #8
   15156:	f7f7 fe53 	bl	ce00 <z_arm_irq_priority_set>
   1515a:	2008      	movs	r0, #8
   1515c:	f7f7 fe20 	bl	cda0 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15160:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   15162:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   15166:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1516a:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   1516c:	466a      	mov	r2, sp
   1516e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   15172:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   15176:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1517a:	4648      	mov	r0, r9
   1517c:	f00a f825 	bl	1f1ca <pinctrl_lookup_state>
	if (ret < 0) {
   15180:	1e05      	subs	r5, r0, #0
   15182:	db25      	blt.n	151d0 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   15184:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   15186:	f8d9 2000 	ldr.w	r2, [r9]
   1518a:	7919      	ldrb	r1, [r3, #4]
   1518c:	6818      	ldr	r0, [r3, #0]
   1518e:	f00a f832 	bl	1f1f6 <pinctrl_configure_pins>
	if (err < 0) {
   15192:	1e05      	subs	r5, r0, #0
   15194:	db1c      	blt.n	151d0 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   15196:	4640      	mov	r0, r8
   15198:	1d31      	adds	r1, r6, #4
   1519a:	f7ff ff17 	bl	14fcc <uarte_nrfx_configure>
	if (err) {
   1519e:	4605      	mov	r5, r0
   151a0:	b9b0      	cbnz	r0, 151d0 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   151a2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   151a4:	0799      	lsls	r1, r3, #30
   151a6:	d533      	bpl.n	15210 <uarte_0_init+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   151a8:	f106 0018 	add.w	r0, r6, #24
   151ac:	f001 fb4e 	bl	1684c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   151b0:	4b2b      	ldr	r3, [pc, #172]	; (15260 <uarte_0_init+0x118>)
   151b2:	4298      	cmp	r0, r3
   151b4:	d010      	beq.n	151d8 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   151b6:	4b2b      	ldr	r3, [pc, #172]	; (15264 <uarte_0_init+0x11c>)
   151b8:	9305      	str	r3, [sp, #20]
   151ba:	2302      	movs	r3, #2
   151bc:	9304      	str	r3, [sp, #16]
   151be:	462b      	mov	r3, r5
		return -EIO;
   151c0:	f06f 0504 	mvn.w	r5, #4
   151c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   151c8:	4827      	ldr	r0, [pc, #156]	; (15268 <uarte_0_init+0x120>)
   151ca:	aa04      	add	r2, sp, #16
   151cc:	f7f6 fb9c 	bl	b908 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   151d0:	4628      	mov	r0, r5
   151d2:	b007      	add	sp, #28
   151d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   151d8:	7e33      	ldrb	r3, [r6, #24]
    NRFX_ASSERT(tep);
   151da:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   151de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   151e2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   151e6:	d10b      	bne.n	15200 <uarte_0_init+0xb8>
   151e8:	4920      	ldr	r1, [pc, #128]	; (1526c <uarte_0_init+0x124>)
   151ea:	4821      	ldr	r0, [pc, #132]	; (15270 <uarte_0_init+0x128>)
   151ec:	f240 234e 	movw	r3, #590	; 0x24e
   151f0:	4a20      	ldr	r2, [pc, #128]	; (15274 <uarte_0_init+0x12c>)
   151f2:	f007 fc7a 	bl	1caea <assert_print>
   151f6:	f240 214e 	movw	r1, #590	; 0x24e
   151fa:	481e      	ldr	r0, [pc, #120]	; (15274 <uarte_0_init+0x12c>)
   151fc:	f007 fc6e 	bl	1cadc <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15200:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15204:	2301      	movs	r3, #1
   15206:	7e32      	ldrb	r2, [r6, #24]
   15208:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1520a:	4a1b      	ldr	r2, [pc, #108]	; (15278 <uarte_0_init+0x130>)
   1520c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15210:	2308      	movs	r3, #8
   15212:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   15216:	7a3b      	ldrb	r3, [r7, #8]
   15218:	b953      	cbnz	r3, 15230 <uarte_0_init+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1521a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1521e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15222:	6973      	ldr	r3, [r6, #20]
   15224:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15228:	2301      	movs	r3, #1
   1522a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1522e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   15230:	687b      	ldr	r3, [r7, #4]
   15232:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   15234:	bf5c      	itt	pl
   15236:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1523a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1523e:	687b      	ldr	r3, [r7, #4]
   15240:	06db      	lsls	r3, r3, #27
   15242:	bf44      	itt	mi
   15244:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   15248:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1524c:	6933      	ldr	r3, [r6, #16]
   1524e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15252:	2300      	movs	r3, #0
   15254:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15258:	2301      	movs	r3, #1
   1525a:	60a3      	str	r3, [r4, #8]
   1525c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1525e:	e7b7      	b.n	151d0 <uarte_0_init+0x88>
   15260:	0bad0000 	.word	0x0bad0000
   15264:	000240cf 	.word	0x000240cf
   15268:	000208fc 	.word	0x000208fc
   1526c:	00021ad2 	.word	0x00021ad2
   15270:	00021547 	.word	0x00021547
   15274:	00021a9a 	.word	0x00021a9a
   15278:	40017000 	.word	0x40017000

0001527c <uarte_nrfx_poll_out>:
{
   1527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1527e:	4604      	mov	r4, r0
   15280:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   15282:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15284:	f00a fe81 	bl	1ff8a <k_is_in_isr>
   15288:	b9b0      	cbnz	r0, 152b8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1528a:	4b2e      	ldr	r3, [pc, #184]	; (15344 <uarte_nrfx_poll_out+0xc8>)
   1528c:	781b      	ldrb	r3, [r3, #0]
   1528e:	b19b      	cbz	r3, 152b8 <uarte_nrfx_poll_out+0x3c>
{
   15290:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   15292:	6860      	ldr	r0, [r4, #4]
   15294:	f009 ff2f 	bl	1f0f6 <is_tx_ready.isra.0>
   15298:	bb00      	cbnz	r0, 152dc <uarte_nrfx_poll_out+0x60>
   1529a:	2001      	movs	r0, #1
   1529c:	f00a f8c6 	bl	1f42c <nrfx_busy_wait>
   152a0:	3e01      	subs	r6, #1
   152a2:	d1f6      	bne.n	15292 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   152a4:	2100      	movs	r1, #0
   152a6:	2021      	movs	r0, #33	; 0x21
   152a8:	f006 f842 	bl	1b330 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   152ac:	e7f0      	b.n	15290 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   152ae:	f386 8811 	msr	BASEPRI, r6
   152b2:	f3bf 8f6f 	isb	sy
}
   152b6:	e7f5      	b.n	152a4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   152b8:	f04f 0320 	mov.w	r3, #32
   152bc:	f3ef 8611 	mrs	r6, BASEPRI
   152c0:	f383 8812 	msr	BASEPRI_MAX, r3
   152c4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   152c8:	6860      	ldr	r0, [r4, #4]
   152ca:	4631      	mov	r1, r6
   152cc:	f009 ff13 	bl	1f0f6 <is_tx_ready.isra.0>
   152d0:	b990      	cbnz	r0, 152f8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   152d2:	f386 8811 	msr	BASEPRI, r6
   152d6:	f3bf 8f6f 	isb	sy
}
   152da:	e7ed      	b.n	152b8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   152dc:	f04f 0320 	mov.w	r3, #32
   152e0:	f3ef 8611 	mrs	r6, BASEPRI
   152e4:	f383 8812 	msr	BASEPRI_MAX, r3
   152e8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   152ec:	6860      	ldr	r0, [r4, #4]
   152ee:	4631      	mov	r1, r6
   152f0:	f009 ff01 	bl	1f0f6 <is_tx_ready.isra.0>
   152f4:	2800      	cmp	r0, #0
   152f6:	d0da      	beq.n	152ae <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   152f8:	693b      	ldr	r3, [r7, #16]
   152fa:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   152fc:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   152fe:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   15300:	6813      	ldr	r3, [r2, #0]
   15302:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15306:	2001      	movs	r0, #1
   15308:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1530c:	2000      	movs	r0, #0
   1530e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   15312:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   15316:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1531a:	6852      	ldr	r2, [r2, #4]
   1531c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   15320:	06d2      	lsls	r2, r2, #27
   15322:	d508      	bpl.n	15336 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15324:	2008      	movs	r0, #8
	return config->uarte_regs;
   15326:	6862      	ldr	r2, [r4, #4]
   15328:	6812      	ldr	r2, [r2, #0]
   1532a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1532e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   15332:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15336:	2201      	movs	r2, #1
   15338:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1533a:	f381 8811 	msr	BASEPRI, r1
   1533e:	f3bf 8f6f 	isb	sy
}
   15342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15344:	20009d1c 	.word	0x20009d1c

00015348 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   15348:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1534a:	7d01      	ldrb	r1, [r0, #20]
   1534c:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1534e:	2902      	cmp	r1, #2
{
   15350:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   15352:	d018      	beq.n	15386 <bt_rpmsg_send+0x3e>
   15354:	2904      	cmp	r1, #4
   15356:	d015      	beq.n	15384 <bt_rpmsg_send+0x3c>
   15358:	b339      	cbz	r1, 153aa <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   1535a:	466d      	mov	r5, sp
   1535c:	b088      	sub	sp, #32
   1535e:	466a      	mov	r2, sp
   15360:	4b13      	ldr	r3, [pc, #76]	; (153b0 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   15362:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		BT_ERR("Failed to send (err %d)", err);
   15366:	2303      	movs	r3, #3
   15368:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1536c:	4811      	ldr	r0, [pc, #68]	; (153b4 <bt_rpmsg_send+0x6c>)
   1536e:	f842 3f10 	str.w	r3, [r2, #16]!
   15372:	f009 ff09 	bl	1f188 <z_log_msg_static_create.constprop.0>
   15376:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   15378:	4620      	mov	r0, r4
   1537a:	f7fe fbe5 	bl	13b48 <net_buf_unref>
	return 0;
}
   1537e:	2000      	movs	r0, #0
   15380:	46bd      	mov	sp, r7
   15382:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   15384:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   15386:	f104 0008 	add.w	r0, r4, #8
   1538a:	f009 fd64 	bl	1ee56 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1538e:	89a2      	ldrh	r2, [r4, #12]
   15390:	68a1      	ldr	r1, [r4, #8]
   15392:	4809      	ldr	r0, [pc, #36]	; (153b8 <bt_rpmsg_send+0x70>)
   15394:	f7f6 fdfc 	bl	bf90 <ipc_service_send>
	if (err < 0) {
   15398:	2800      	cmp	r0, #0
   1539a:	daed      	bge.n	15378 <bt_rpmsg_send+0x30>
		BT_ERR("Failed to send (err %d)", err);
   1539c:	466d      	mov	r5, sp
   1539e:	b088      	sub	sp, #32
   153a0:	466a      	mov	r2, sp
   153a2:	4b06      	ldr	r3, [pc, #24]	; (153bc <bt_rpmsg_send+0x74>)
   153a4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   153a8:	e7dd      	b.n	15366 <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   153aa:	2101      	movs	r1, #1
   153ac:	e7eb      	b.n	15386 <bt_rpmsg_send+0x3e>
   153ae:	bf00      	nop
   153b0:	00024108 	.word	0x00024108
   153b4:	00020844 	.word	0x00020844
   153b8:	20009afc 	.word	0x20009afc
   153bc:	00024118 	.word	0x00024118

000153c0 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   153c0:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   153c2:	480c      	ldr	r0, [pc, #48]	; (153f4 <bt_rpmsg_init+0x34>)
{
   153c4:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   153c6:	f7f9 fea9 	bl	f11c <bt_hci_driver_register>
	if (err < 0) {
   153ca:	1e04      	subs	r4, r0, #0
   153cc:	da0e      	bge.n	153ec <bt_rpmsg_init+0x2c>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   153ce:	466d      	mov	r5, sp
   153d0:	b088      	sub	sp, #32
   153d2:	466a      	mov	r2, sp
   153d4:	4b08      	ldr	r3, [pc, #32]	; (153f8 <bt_rpmsg_init+0x38>)
   153d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   153da:	e9c2 3405 	strd	r3, r4, [r2, #20]
   153de:	2303      	movs	r3, #3
   153e0:	4806      	ldr	r0, [pc, #24]	; (153fc <bt_rpmsg_init+0x3c>)
   153e2:	f842 3f10 	str.w	r3, [r2, #16]!
   153e6:	f009 fecf 	bl	1f188 <z_log_msg_static_create.constprop.0>
   153ea:	46ad      	mov	sp, r5
	}

	return err;
}
   153ec:	4620      	mov	r0, r4
   153ee:	46bd      	mov	sp, r7
   153f0:	bdb0      	pop	{r4, r5, r7, pc}
   153f2:	bf00      	nop
   153f4:	000210f0 	.word	0x000210f0
   153f8:	00024130 	.word	0x00024130
   153fc:	00020844 	.word	0x00020844

00015400 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   15400:	4801      	ldr	r0, [pc, #4]	; (15408 <hci_ept_bound+0x8>)
   15402:	f004 b8a1 	b.w	19548 <z_impl_k_sem_give>
   15406:	bf00      	nop
   15408:	200085f4 	.word	0x200085f4

0001540c <bt_rpmsg_open>:
{
   1540c:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1540e:	481a      	ldr	r0, [pc, #104]	; (15478 <bt_rpmsg_open+0x6c>)
{
   15410:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   15412:	f7f6 fd5d 	bl	bed0 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   15416:	4604      	mov	r4, r0
   15418:	b1a0      	cbz	r0, 15444 <bt_rpmsg_open+0x38>
   1541a:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1541e:	d011      	beq.n	15444 <bt_rpmsg_open+0x38>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   15420:	466d      	mov	r5, sp
   15422:	b088      	sub	sp, #32
   15424:	466a      	mov	r2, sp
   15426:	4b15      	ldr	r3, [pc, #84]	; (1547c <bt_rpmsg_open+0x70>)
		BT_ERR("Endpoint binding failed with %d", err);
   15428:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1542c:	2303      	movs	r3, #3
   1542e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15432:	4813      	ldr	r0, [pc, #76]	; (15480 <bt_rpmsg_open+0x74>)
   15434:	f842 3f10 	str.w	r3, [r2, #16]!
   15438:	f009 fea6 	bl	1f188 <z_log_msg_static_create.constprop.0>
   1543c:	46ad      	mov	sp, r5
}
   1543e:	4620      	mov	r0, r4
   15440:	46bd      	mov	sp, r7
   15442:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   15444:	4a0f      	ldr	r2, [pc, #60]	; (15484 <bt_rpmsg_open+0x78>)
   15446:	4910      	ldr	r1, [pc, #64]	; (15488 <bt_rpmsg_open+0x7c>)
   15448:	480b      	ldr	r0, [pc, #44]	; (15478 <bt_rpmsg_open+0x6c>)
   1544a:	f7f6 fd6f 	bl	bf2c <ipc_service_register_endpoint>
	if (err) {
   1544e:	4604      	mov	r4, r0
   15450:	b120      	cbz	r0, 1545c <bt_rpmsg_open+0x50>
		BT_ERR("Registering endpoint failed with %d", err);
   15452:	466d      	mov	r5, sp
   15454:	b088      	sub	sp, #32
   15456:	466a      	mov	r2, sp
   15458:	4b0c      	ldr	r3, [pc, #48]	; (1548c <bt_rpmsg_open+0x80>)
   1545a:	e7e5      	b.n	15428 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   1545c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   15460:	2300      	movs	r3, #0
   15462:	480b      	ldr	r0, [pc, #44]	; (15490 <bt_rpmsg_open+0x84>)
   15464:	f004 f8b4 	bl	195d0 <z_impl_k_sem_take>
	if (err) {
   15468:	4604      	mov	r4, r0
   1546a:	2800      	cmp	r0, #0
   1546c:	d0e7      	beq.n	1543e <bt_rpmsg_open+0x32>
		BT_ERR("Endpoint binding failed with %d", err);
   1546e:	466d      	mov	r5, sp
   15470:	b088      	sub	sp, #32
   15472:	466a      	mov	r2, sp
   15474:	4b07      	ldr	r3, [pc, #28]	; (15494 <bt_rpmsg_open+0x88>)
   15476:	e7d7      	b.n	15428 <bt_rpmsg_open+0x1c>
   15478:	000204cc 	.word	0x000204cc
   1547c:	0002415a 	.word	0x0002415a
   15480:	00020844 	.word	0x00020844
   15484:	20008330 	.word	0x20008330
   15488:	20009afc 	.word	0x20009afc
   1548c:	0002418a 	.word	0x0002418a
   15490:	200085f4 	.word	0x200085f4
   15494:	000241ae 	.word	0x000241ae

00015498 <hci_ept_recv>:
{
   15498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1549c:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   1549e:	4680      	mov	r8, r0
   154a0:	f818 9b01 	ldrb.w	r9, [r8], #1
{
   154a4:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   154a6:	f1b9 0f04 	cmp.w	r9, #4
{
   154aa:	460c      	mov	r4, r1
   154ac:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   154ae:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   154b2:	d00d      	beq.n	154d0 <hci_ept_recv+0x38>
   154b4:	f1b9 0f05 	cmp.w	r9, #5
   154b8:	f000 80a3 	beq.w	15602 <hci_ept_recv+0x16a>
   154bc:	f1b9 0f02 	cmp.w	r9, #2
   154c0:	f040 80cc 	bne.w	1565c <hci_ept_recv+0x1c4>
	if (remaining < sizeof(hdr)) {
   154c4:	2b03      	cmp	r3, #3
   154c6:	d875      	bhi.n	155b4 <hci_ept_recv+0x11c>
		BT_ERR("Not enough data for ACL header");
   154c8:	4b6c      	ldr	r3, [pc, #432]	; (1567c <hci_ept_recv+0x1e4>)
		BT_ERR("No available ACL buffers!");
   154ca:	e9c7 9306 	strd	r9, r3, [r7, #24]
   154ce:	e005      	b.n	154dc <hci_ept_recv+0x44>
	if (remaining < sizeof(hdr)) {
   154d0:	2b01      	cmp	r3, #1
   154d2:	d80e      	bhi.n	154f2 <hci_ept_recv+0x5a>
		BT_ERR("Not enough data for event header");
   154d4:	4b6a      	ldr	r3, [pc, #424]	; (15680 <hci_ept_recv+0x1e8>)
		BT_ERR("Event payload length is not correct");
   154d6:	61fb      	str	r3, [r7, #28]
   154d8:	2302      	movs	r3, #2
   154da:	61bb      	str	r3, [r7, #24]
   154dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154e0:	4868      	ldr	r0, [pc, #416]	; (15684 <hci_ept_recv+0x1ec>)
   154e2:	f107 0218 	add.w	r2, r7, #24
   154e6:	f009 fe4f 	bl	1f188 <z_log_msg_static_create.constprop.0>
}
   154ea:	3724      	adds	r7, #36	; 0x24
   154ec:	46bd      	mov	sp, r7
   154ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   154f2:	7843      	ldrb	r3, [r0, #1]
   154f4:	2b3e      	cmp	r3, #62	; 0x3e
   154f6:	d13e      	bne.n	15576 <hci_ept_recv+0xde>
		switch (subevt_type) {
   154f8:	f890 a003 	ldrb.w	sl, [r0, #3]
   154fc:	f1aa 0302 	sub.w	r3, sl, #2
   15500:	f1d3 0a00 	rsbs	sl, r3, #0
   15504:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   15508:	2202      	movs	r2, #2
   1550a:	4641      	mov	r1, r8
   1550c:	1d38      	adds	r0, r7, #4
   1550e:	f008 fafb 	bl	1db08 <memcpy>
	if (remaining != hdr.len) {
   15512:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   15514:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   15516:	429c      	cmp	r4, r3
   15518:	d133      	bne.n	15582 <hci_ept_recv+0xea>
   1551a:	f1ba 0f00 	cmp.w	sl, #0
   1551e:	d02d      	beq.n	1557c <hci_ept_recv+0xe4>
   15520:	f04f 0800 	mov.w	r8, #0
   15524:	f04f 0900 	mov.w	r9, #0
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   15528:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1552c:	4642      	mov	r2, r8
   1552e:	464b      	mov	r3, r9
   15530:	4651      	mov	r1, sl
   15532:	7938      	ldrb	r0, [r7, #4]
   15534:	f7f8 fc7e 	bl	de34 <bt_buf_get_evt>
		if (!buf) {
   15538:	4605      	mov	r5, r0
   1553a:	b320      	cbz	r0, 15586 <hci_ept_recv+0xee>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1553c:	f100 0808 	add.w	r8, r0, #8
   15540:	2202      	movs	r2, #2
   15542:	1d39      	adds	r1, r7, #4
   15544:	4640      	mov	r0, r8
   15546:	f009 fca1 	bl	1ee8c <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1554a:	4640      	mov	r0, r8
   1554c:	f009 fc96 	bl	1ee7c <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   15550:	4284      	cmp	r4, r0
   15552:	d926      	bls.n	155a2 <hci_ept_recv+0x10a>
		BT_ERR("Not enough space in buffer %zu/%zu",
   15554:	466e      	mov	r6, sp
   15556:	b088      	sub	sp, #32
   15558:	466a      	mov	r2, sp
   1555a:	4b4b      	ldr	r3, [pc, #300]	; (15688 <hci_ept_recv+0x1f0>)
   1555c:	61d0      	str	r0, [r2, #28]
   1555e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15562:	2304      	movs	r3, #4
   15564:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15568:	4846      	ldr	r0, [pc, #280]	; (15684 <hci_ept_recv+0x1ec>)
   1556a:	f842 3f10 	str.w	r3, [r2, #16]!
   1556e:	f009 fe0b 	bl	1f188 <z_log_msg_static_create.constprop.0>
   15572:	46b5      	mov	sp, r6
   15574:	e03f      	b.n	155f6 <hci_ept_recv+0x15e>
			return false;
   15576:	f04f 0a00 	mov.w	sl, #0
   1557a:	e7c5      	b.n	15508 <hci_ept_recv+0x70>
   1557c:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   15580:	e7d0      	b.n	15524 <hci_ept_recv+0x8c>
		BT_ERR("Event payload length is not correct");
   15582:	4b42      	ldr	r3, [pc, #264]	; (1568c <hci_ept_recv+0x1f4>)
   15584:	e7a7      	b.n	154d6 <hci_ept_recv+0x3e>
			if (discardable) {
   15586:	f1ba 0f00 	cmp.w	sl, #0
   1558a:	d1ae      	bne.n	154ea <hci_ept_recv+0x52>
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   1558c:	4b40      	ldr	r3, [pc, #256]	; (15690 <hci_ept_recv+0x1f8>)
   1558e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15592:	e9c7 b306 	strd	fp, r3, [r7, #24]
   15596:	483b      	ldr	r0, [pc, #236]	; (15684 <hci_ept_recv+0x1ec>)
   15598:	f107 0218 	add.w	r2, r7, #24
   1559c:	f009 fdf4 	bl	1f188 <z_log_msg_static_create.constprop.0>
	} while (!buf);
   155a0:	e7c4      	b.n	1552c <hci_ept_recv+0x94>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   155a2:	4622      	mov	r2, r4
   155a4:	1cf1      	adds	r1, r6, #3
   155a6:	4640      	mov	r0, r8
   155a8:	f009 fc70 	bl	1ee8c <net_buf_simple_add_mem>
		bt_recv(buf);
   155ac:	4628      	mov	r0, r5
   155ae:	f7f9 fd81 	bl	f0b4 <bt_recv>
}
   155b2:	e79a      	b.n	154ea <hci_ept_recv+0x52>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   155b4:	2200      	movs	r2, #0
   155b6:	2300      	movs	r3, #0
   155b8:	2003      	movs	r0, #3
   155ba:	f7f8 fbed 	bl	dd98 <bt_buf_get_rx>
	if (buf) {
   155be:	4605      	mov	r5, r0
   155c0:	b1e8      	cbz	r0, 155fe <hci_ept_recv+0x166>
		memcpy((void *)&hdr, data, sizeof(hdr));
   155c2:	2204      	movs	r2, #4
   155c4:	4641      	mov	r1, r8
   155c6:	18b8      	adds	r0, r7, r2
   155c8:	f008 fa9e 	bl	1db08 <memcpy>
   155cc:	2204      	movs	r2, #4
   155ce:	f105 0808 	add.w	r8, r5, #8
   155d2:	4640      	mov	r0, r8
   155d4:	18b9      	adds	r1, r7, r2
   155d6:	f009 fc59 	bl	1ee8c <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   155da:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   155dc:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   155de:	429c      	cmp	r4, r3
   155e0:	d033      	beq.n	1564a <hci_ept_recv+0x1b2>
		BT_ERR("ACL payload length is not correct");
   155e2:	4b2c      	ldr	r3, [pc, #176]	; (15694 <hci_ept_recv+0x1fc>)
   155e4:	e9c7 9306 	strd	r9, r3, [r7, #24]
		BT_ERR("ISO payload length is not correct");
   155e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155ec:	4825      	ldr	r0, [pc, #148]	; (15684 <hci_ept_recv+0x1ec>)
   155ee:	f107 0218 	add.w	r2, r7, #24
   155f2:	f009 fdc9 	bl	1f188 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   155f6:	4628      	mov	r0, r5
   155f8:	f7fe faa6 	bl	13b48 <net_buf_unref>
	if (buf) {
   155fc:	e775      	b.n	154ea <hci_ept_recv+0x52>
		BT_ERR("No available ACL buffers!");
   155fe:	4b26      	ldr	r3, [pc, #152]	; (15698 <hci_ept_recv+0x200>)
   15600:	e763      	b.n	154ca <hci_ept_recv+0x32>
	if (remaining < sizeof(hdr)) {
   15602:	2b03      	cmp	r3, #3
   15604:	d801      	bhi.n	1560a <hci_ept_recv+0x172>
		BT_ERR("Not enough data for ISO header");
   15606:	4b25      	ldr	r3, [pc, #148]	; (1569c <hci_ept_recv+0x204>)
   15608:	e765      	b.n	154d6 <hci_ept_recv+0x3e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1560a:	2200      	movs	r2, #0
   1560c:	2300      	movs	r3, #0
   1560e:	4648      	mov	r0, r9
   15610:	f7f8 fbc2 	bl	dd98 <bt_buf_get_rx>
	if (buf) {
   15614:	4605      	mov	r5, r0
   15616:	b1b0      	cbz	r0, 15646 <hci_ept_recv+0x1ae>
		memcpy((void *)&hdr, data, sizeof(hdr));
   15618:	2204      	movs	r2, #4
   1561a:	4641      	mov	r1, r8
   1561c:	18b8      	adds	r0, r7, r2
   1561e:	f008 fa73 	bl	1db08 <memcpy>
   15622:	2204      	movs	r2, #4
   15624:	f105 0808 	add.w	r8, r5, #8
   15628:	4640      	mov	r0, r8
   1562a:	18b9      	adds	r1, r7, r2
   1562c:	f009 fc2e 	bl	1ee8c <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   15630:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   15632:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   15634:	f3c3 030d 	ubfx	r3, r3, #0, #14
   15638:	429c      	cmp	r4, r3
   1563a:	d006      	beq.n	1564a <hci_ept_recv+0x1b2>
		BT_ERR("ISO payload length is not correct");
   1563c:	4b18      	ldr	r3, [pc, #96]	; (156a0 <hci_ept_recv+0x208>)
   1563e:	61fb      	str	r3, [r7, #28]
   15640:	2302      	movs	r3, #2
   15642:	61bb      	str	r3, [r7, #24]
   15644:	e7d0      	b.n	155e8 <hci_ept_recv+0x150>
		BT_ERR("No available ISO buffers!");
   15646:	4b17      	ldr	r3, [pc, #92]	; (156a4 <hci_ept_recv+0x20c>)
   15648:	e745      	b.n	154d6 <hci_ept_recv+0x3e>
	return net_buf_simple_tailroom(&buf->b);
   1564a:	4640      	mov	r0, r8
   1564c:	f009 fc16 	bl	1ee7c <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   15650:	4284      	cmp	r4, r0
   15652:	f63f af7f 	bhi.w	15554 <hci_ept_recv+0xbc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15656:	4622      	mov	r2, r4
   15658:	1d71      	adds	r1, r6, #5
   1565a:	e7a4      	b.n	155a6 <hci_ept_recv+0x10e>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   1565c:	466c      	mov	r4, sp
   1565e:	b088      	sub	sp, #32
   15660:	466a      	mov	r2, sp
   15662:	4b11      	ldr	r3, [pc, #68]	; (156a8 <hci_ept_recv+0x210>)
   15664:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   15668:	e9c2 3905 	strd	r3, r9, [r2, #20]
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   1566c:	2303      	movs	r3, #3
   1566e:	4805      	ldr	r0, [pc, #20]	; (15684 <hci_ept_recv+0x1ec>)
   15670:	f842 3f10 	str.w	r3, [r2, #16]!
   15674:	f009 fd88 	bl	1f188 <z_log_msg_static_create.constprop.0>
   15678:	46a5      	mov	sp, r4
   1567a:	e736      	b.n	154ea <hci_ept_recv+0x52>
   1567c:	0002426b 	.word	0x0002426b
   15680:	000241ce 	.word	0x000241ce
   15684:	00020844 	.word	0x00020844
   15688:	00024248 	.word	0x00024248
   1568c:	000241ef 	.word	0x000241ef
   15690:	00024213 	.word	0x00024213
   15694:	000242a4 	.word	0x000242a4
   15698:	0002428a 	.word	0x0002428a
   1569c:	000242c6 	.word	0x000242c6
   156a0:	000242ff 	.word	0x000242ff
   156a4:	000242e5 	.word	0x000242e5
   156a8:	00024321 	.word	0x00024321

000156ac <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   156ac:	b508      	push	{r3, lr}
   156ae:	4603      	mov	r3, r0
   156b0:	4608      	mov	r0, r1
   156b2:	4611      	mov	r1, r2
	__ASSERT_NO_MSG(dev != NULL);
   156b4:	b94b      	cbnz	r3, 156ca <entropy_cc3xx_rng_get_entropy+0x1e>
   156b6:	490c      	ldr	r1, [pc, #48]	; (156e8 <entropy_cc3xx_rng_get_entropy+0x3c>)
   156b8:	2320      	movs	r3, #32
   156ba:	4a0c      	ldr	r2, [pc, #48]	; (156ec <entropy_cc3xx_rng_get_entropy+0x40>)
   156bc:	480c      	ldr	r0, [pc, #48]	; (156f0 <entropy_cc3xx_rng_get_entropy+0x44>)
   156be:	f007 fa14 	bl	1caea <assert_print>
   156c2:	2120      	movs	r1, #32
	__ASSERT_NO_MSG(buffer != NULL);
   156c4:	4809      	ldr	r0, [pc, #36]	; (156ec <entropy_cc3xx_rng_get_entropy+0x40>)
   156c6:	f007 fa09 	bl	1cadc <assert_post_action>
   156ca:	b938      	cbnz	r0, 156dc <entropy_cc3xx_rng_get_entropy+0x30>
   156cc:	4909      	ldr	r1, [pc, #36]	; (156f4 <entropy_cc3xx_rng_get_entropy+0x48>)
   156ce:	2321      	movs	r3, #33	; 0x21
   156d0:	4a06      	ldr	r2, [pc, #24]	; (156ec <entropy_cc3xx_rng_get_entropy+0x40>)
   156d2:	4807      	ldr	r0, [pc, #28]	; (156f0 <entropy_cc3xx_rng_get_entropy+0x44>)
   156d4:	f007 fa09 	bl	1caea <assert_print>
   156d8:	2121      	movs	r1, #33	; 0x21
   156da:	e7f3      	b.n	156c4 <entropy_cc3xx_rng_get_entropy+0x18>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   156dc:	f000 fe04 	bl	162e8 <psa_generate_random>
	int err = EINVAL;
   156e0:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   156e2:	bf18      	it	ne
   156e4:	2016      	movne	r0, #22
   156e6:	bd08      	pop	{r3, pc}
   156e8:	00024393 	.word	0x00024393
   156ec:	00024363 	.word	0x00024363
   156f0:	00021547 	.word	0x00021547
   156f4:	000243a6 	.word	0x000243a6

000156f8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   156f8:	2301      	movs	r3, #1
   156fa:	4083      	lsls	r3, r0
{
   156fc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   156fe:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15700:	4a0b      	ldr	r2, [pc, #44]	; (15730 <compare_int_lock+0x38>)
   15702:	e8d2 1fef 	ldaex	r1, [r2]
   15706:	ea01 0504 	and.w	r5, r1, r4
   1570a:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1570e:	2e00      	cmp	r6, #0
   15710:	d1f7      	bne.n	15702 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15716:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   15718:	4806      	ldr	r0, [pc, #24]	; (15734 <compare_int_lock+0x3c>)
   1571a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1571e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15722:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   15726:	420b      	tst	r3, r1
}
   15728:	bf14      	ite	ne
   1572a:	2001      	movne	r0, #1
   1572c:	2000      	moveq	r0, #0
   1572e:	bd70      	pop	{r4, r5, r6, pc}
   15730:	20009b0c 	.word	0x20009b0c
   15734:	40015000 	.word	0x40015000

00015738 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   15738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1573a:	491b      	ldr	r1, [pc, #108]	; (157a8 <sys_clock_timeout_handler+0x70>)
{
   1573c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1573e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   15742:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   15744:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   15748:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1574c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1574e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   15752:	d30f      	bcc.n	15774 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   15754:	f006 f96e 	bl	1ba34 <sys_clock_announce>
    return p_reg->CC[ch];
   15758:	00a3      	lsls	r3, r4, #2
   1575a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1575e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   15762:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   15766:	4295      	cmp	r5, r2
   15768:	d11d      	bne.n	157a6 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1576a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1576e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   15772:	e012      	b.n	1579a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   15774:	4b0d      	ldr	r3, [pc, #52]	; (157ac <sys_clock_timeout_handler+0x74>)
   15776:	681b      	ldr	r3, [r3, #0]
   15778:	0a1a      	lsrs	r2, r3, #8
   1577a:	061b      	lsls	r3, r3, #24
   1577c:	195e      	adds	r6, r3, r5
   1577e:	4b0c      	ldr	r3, [pc, #48]	; (157b0 <sys_clock_timeout_handler+0x78>)
   15780:	f142 0700 	adc.w	r7, r2, #0
   15784:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   15788:	f006 f954 	bl	1ba34 <sys_clock_announce>
    return p_reg->CC[ch];
   1578c:	4a09      	ldr	r2, [pc, #36]	; (157b4 <sys_clock_timeout_handler+0x7c>)
   1578e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   15792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   15796:	429d      	cmp	r5, r3
   15798:	d105      	bne.n	157a6 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1579a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1579e:	4a05      	ldr	r2, [pc, #20]	; (157b4 <sys_clock_timeout_handler+0x7c>)
   157a0:	40a3      	lsls	r3, r4
   157a2:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   157a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157a8:	20009530 	.word	0x20009530
   157ac:	20009b10 	.word	0x20009b10
   157b0:	20009538 	.word	0x20009538
   157b4:	40015000 	.word	0x40015000

000157b8 <compare_int_unlock>:
	if (key) {
   157b8:	b1d9      	cbz	r1, 157f2 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   157ba:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   157bc:	4a0d      	ldr	r2, [pc, #52]	; (157f4 <compare_int_unlock+0x3c>)
   157be:	4083      	lsls	r3, r0
   157c0:	e8d2 cfef 	ldaex	ip, [r2]
   157c4:	ea4c 0c03 	orr.w	ip, ip, r3
   157c8:	e8c2 cfe1 	stlex	r1, ip, [r2]
   157cc:	2900      	cmp	r1, #0
   157ce:	d1f7      	bne.n	157c0 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   157d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   157d4:	4a08      	ldr	r2, [pc, #32]	; (157f8 <compare_int_unlock+0x40>)
   157d6:	4083      	lsls	r3, r0
   157d8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   157dc:	4b07      	ldr	r3, [pc, #28]	; (157fc <compare_int_unlock+0x44>)
   157de:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   157e2:	40c3      	lsrs	r3, r0
   157e4:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   157e6:	bf42      	ittt	mi
   157e8:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   157ec:	4b04      	ldrmi	r3, [pc, #16]	; (15800 <compare_int_unlock+0x48>)
   157ee:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   157f2:	4770      	bx	lr
   157f4:	20009b0c 	.word	0x20009b0c
   157f8:	40015000 	.word	0x40015000
   157fc:	20009b04 	.word	0x20009b04
   15800:	e000e100 	.word	0xe000e100

00015804 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   15804:	2801      	cmp	r0, #1
{
   15806:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   15808:	d909      	bls.n	1581e <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1580a:	4907      	ldr	r1, [pc, #28]	; (15828 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1580c:	4807      	ldr	r0, [pc, #28]	; (1582c <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1580e:	237b      	movs	r3, #123	; 0x7b
   15810:	4a07      	ldr	r2, [pc, #28]	; (15830 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   15812:	f007 f96a 	bl	1caea <assert_print>
   15816:	217b      	movs	r1, #123	; 0x7b
   15818:	4805      	ldr	r0, [pc, #20]	; (15830 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1581a:	f007 f95f 	bl	1cadc <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1581e:	0083      	lsls	r3, r0, #2
}
   15820:	4804      	ldr	r0, [pc, #16]	; (15834 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   15822:	4418      	add	r0, r3
   15824:	bd08      	pop	{r3, pc}
   15826:	bf00      	nop
   15828:	000243fb 	.word	0x000243fb
   1582c:	00021547 	.word	0x00021547
   15830:	000243ca 	.word	0x000243ca
   15834:	40015140 	.word	0x40015140

00015838 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   15838:	2801      	cmp	r0, #1
{
   1583a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1583c:	d909      	bls.n	15852 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1583e:	4907      	ldr	r1, [pc, #28]	; (1585c <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   15840:	4807      	ldr	r0, [pc, #28]	; (15860 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   15842:	2382      	movs	r3, #130	; 0x82
   15844:	4a07      	ldr	r2, [pc, #28]	; (15864 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   15846:	f007 f950 	bl	1caea <assert_print>
   1584a:	2182      	movs	r1, #130	; 0x82
   1584c:	4805      	ldr	r0, [pc, #20]	; (15864 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1584e:	f007 f945 	bl	1cadc <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   15852:	2800      	cmp	r0, #0
}
   15854:	4804      	ldr	r0, [pc, #16]	; (15868 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   15856:	bf08      	it	eq
   15858:	2000      	moveq	r0, #0
   1585a:	bd08      	pop	{r3, pc}
   1585c:	000243fb 	.word	0x000243fb
   15860:	00021547 	.word	0x00021547
   15864:	000243ca 	.word	0x000243ca
   15868:	40015044 	.word	0x40015044

0001586c <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1586c:	2801      	cmp	r0, #1
{
   1586e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   15870:	d909      	bls.n	15886 <z_nrf_rtc_timer_compare_read+0x1a>
   15872:	4908      	ldr	r1, [pc, #32]	; (15894 <z_nrf_rtc_timer_compare_read+0x28>)
   15874:	4808      	ldr	r0, [pc, #32]	; (15898 <z_nrf_rtc_timer_compare_read+0x2c>)
   15876:	23b8      	movs	r3, #184	; 0xb8
   15878:	4a08      	ldr	r2, [pc, #32]	; (1589c <z_nrf_rtc_timer_compare_read+0x30>)
   1587a:	f007 f936 	bl	1caea <assert_print>
   1587e:	21b8      	movs	r1, #184	; 0xb8
   15880:	4806      	ldr	r0, [pc, #24]	; (1589c <z_nrf_rtc_timer_compare_read+0x30>)
   15882:	f007 f92b 	bl	1cadc <assert_post_action>
    return p_reg->CC[ch];
   15886:	4b06      	ldr	r3, [pc, #24]	; (158a0 <z_nrf_rtc_timer_compare_read+0x34>)
   15888:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1588c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   15890:	bd08      	pop	{r3, pc}
   15892:	bf00      	nop
   15894:	000243fb 	.word	0x000243fb
   15898:	00021547 	.word	0x00021547
   1589c:	000243ca 	.word	0x000243ca
   158a0:	40015000 	.word	0x40015000

000158a4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   158a4:	4b0d      	ldr	r3, [pc, #52]	; (158dc <z_nrf_rtc_timer_read+0x38>)
   158a6:	6818      	ldr	r0, [r3, #0]
   158a8:	0a01      	lsrs	r1, r0, #8
   158aa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   158ac:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   158b0:	4b0b      	ldr	r3, [pc, #44]	; (158e0 <z_nrf_rtc_timer_read+0x3c>)
   158b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   158b6:	1818      	adds	r0, r3, r0
   158b8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   158bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   158c0:	d20a      	bcs.n	158d8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   158c2:	4b08      	ldr	r3, [pc, #32]	; (158e4 <z_nrf_rtc_timer_read+0x40>)
   158c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   158c8:	4290      	cmp	r0, r2
   158ca:	eb71 0303 	sbcs.w	r3, r1, r3
   158ce:	d203      	bcs.n	158d8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   158d0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   158d4:	f141 0100 	adc.w	r1, r1, #0
}
   158d8:	4770      	bx	lr
   158da:	bf00      	nop
   158dc:	20009b10 	.word	0x20009b10
   158e0:	40015000 	.word	0x40015000
   158e4:	20009538 	.word	0x20009538

000158e8 <compare_set>:
{
   158e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158ec:	4614      	mov	r4, r2
   158ee:	461d      	mov	r5, r3
   158f0:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   158f2:	f7ff ff01 	bl	156f8 <compare_int_lock>
   158f6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   158f8:	f7ff ffd4 	bl	158a4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   158fc:	42a0      	cmp	r0, r4
   158fe:	eb71 0305 	sbcs.w	r3, r1, r5
   15902:	d27a      	bcs.n	159fa <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   15904:	4b44      	ldr	r3, [pc, #272]	; (15a18 <compare_set+0x130>)
   15906:	1a20      	subs	r0, r4, r0
   15908:	eb65 0101 	sbc.w	r1, r5, r1
   1590c:	4298      	cmp	r0, r3
   1590e:	f171 0100 	sbcs.w	r1, r1, #0
   15912:	d27d      	bcs.n	15a10 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
   15914:	4b41      	ldr	r3, [pc, #260]	; (15a1c <compare_set+0x134>)
   15916:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1591a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1591e:	429d      	cmp	r5, r3
   15920:	bf08      	it	eq
   15922:	4294      	cmpeq	r4, r2
   15924:	d054      	beq.n	159d0 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1592a:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1592e:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15930:	2100      	movs	r1, #0
   15932:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15936:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1593a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1593e:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15942:	40bb      	lsls	r3, r7
   15944:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
   15948:	fa1f f888 	uxth.w	r8, r8
   1594c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   15950:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   15952:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   15956:	4b32      	ldr	r3, [pc, #200]	; (15a20 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15958:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1595c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   15960:	eba0 000a 	sub.w	r0, r0, sl
   15964:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   15968:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1596c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1596e:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
   15972:	d104      	bne.n	1597e <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
   15974:	2013      	movs	r0, #19
   15976:	f00a fc04 	bl	20182 <z_impl_k_busy_wait>
   1597a:	2100      	movs	r1, #0
   1597c:	4b28      	ldr	r3, [pc, #160]	; (15a20 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1597e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   15982:	eba6 000c 	sub.w	r0, r6, ip
   15986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1598a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1598e:	bf88      	it	hi
   15990:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15992:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
   15996:	9a01      	ldr	r2, [sp, #4]
   15998:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1599c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   159a0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   159a4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   159a8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
   159ac:	4582      	cmp	sl, r0
   159ae:	d006      	beq.n	159be <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   159b0:	1a30      	subs	r0, r6, r0
   159b2:	3802      	subs	r0, #2
   159b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   159b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   159bc:	d81b      	bhi.n	159f6 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   159be:	eba6 060b 	sub.w	r6, r6, fp
   159c2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   159c6:	1936      	adds	r6, r6, r4
   159c8:	f145 0300 	adc.w	r3, r5, #0
   159cc:	4634      	mov	r4, r6
   159ce:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   159d0:	4912      	ldr	r1, [pc, #72]	; (15a1c <compare_set+0x134>)
	cc_data[chan].callback = handler;
   159d2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   159d4:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   159d8:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   159dc:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   159de:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   159e0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   159e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   159e4:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   159e6:	4638      	mov	r0, r7
   159e8:	9900      	ldr	r1, [sp, #0]
   159ea:	f7ff fee5 	bl	157b8 <compare_int_unlock>
}
   159ee:	4620      	mov	r0, r4
   159f0:	b003      	add	sp, #12
   159f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159f6:	4630      	mov	r0, r6
   159f8:	e7b0      	b.n	1595c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   159fa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   159fc:	4a09      	ldr	r2, [pc, #36]	; (15a24 <compare_set+0x13c>)
   159fe:	40bb      	lsls	r3, r7
   15a00:	e8d2 0fef 	ldaex	r0, [r2]
   15a04:	4318      	orrs	r0, r3
   15a06:	e8c2 0fe1 	stlex	r1, r0, [r2]
   15a0a:	2900      	cmp	r1, #0
   15a0c:	d0e0      	beq.n	159d0 <compare_set+0xe8>
   15a0e:	e7f7      	b.n	15a00 <compare_set+0x118>
			return -EINVAL;
   15a10:	f06f 0415 	mvn.w	r4, #21
   15a14:	e7e7      	b.n	159e6 <compare_set+0xfe>
   15a16:	bf00      	nop
   15a18:	01000001 	.word	0x01000001
   15a1c:	20009510 	.word	0x20009510
   15a20:	40015000 	.word	0x40015000
   15a24:	20009b04 	.word	0x20009b04

00015a28 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   15a28:	2801      	cmp	r0, #1
{
   15a2a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   15a2c:	d00b      	beq.n	15a46 <z_nrf_rtc_timer_set+0x1e>
   15a2e:	4908      	ldr	r1, [pc, #32]	; (15a50 <z_nrf_rtc_timer_set+0x28>)
   15a30:	4808      	ldr	r0, [pc, #32]	; (15a54 <z_nrf_rtc_timer_set+0x2c>)
   15a32:	f240 134d 	movw	r3, #333	; 0x14d
   15a36:	4a08      	ldr	r2, [pc, #32]	; (15a58 <z_nrf_rtc_timer_set+0x30>)
   15a38:	f007 f857 	bl	1caea <assert_print>
   15a3c:	f240 114d 	movw	r1, #333	; 0x14d
   15a40:	4805      	ldr	r0, [pc, #20]	; (15a58 <z_nrf_rtc_timer_set+0x30>)
   15a42:	f007 f84b 	bl	1cadc <assert_post_action>
}
   15a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   15a4a:	f7ff bf4d 	b.w	158e8 <compare_set>
   15a4e:	bf00      	nop
   15a50:	00024417 	.word	0x00024417
   15a54:	00021547 	.word	0x00021547
   15a58:	000243ca 	.word	0x000243ca

00015a5c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   15a5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   15a62:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   15a64:	f04f 30ff 	mov.w	r0, #4294967295
   15a68:	f04f 31ff 	mov.w	r1, #4294967295
   15a6c:	4c19      	ldr	r4, [pc, #100]	; (15ad4 <sys_clock_driver_init+0x78>)
   15a6e:	4b1a      	ldr	r3, [pc, #104]	; (15ad8 <sys_clock_driver_init+0x7c>)
   15a70:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   15a74:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   15a78:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   15a7c:	e9c3 0106 	strd	r0, r1, [r3, #24]
   15a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   15a84:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15a8a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   15a8e:	4b13      	ldr	r3, [pc, #76]	; (15adc <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   15a90:	2101      	movs	r1, #1
   15a92:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   15a96:	2015      	movs	r0, #21
   15a98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15a9c:	462a      	mov	r2, r5
   15a9e:	f7f7 f9af 	bl	ce00 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   15aa2:	2015      	movs	r0, #21
   15aa4:	f7f7 f97c 	bl	cda0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15aa8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   15aaa:	2203      	movs	r2, #3
   15aac:	60a3      	str	r3, [r4, #8]
   15aae:	6023      	str	r3, [r4, #0]
   15ab0:	4b0b      	ldr	r3, [pc, #44]	; (15ae0 <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15ab2:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   15ab4:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   15ab6:	4b0b      	ldr	r3, [pc, #44]	; (15ae4 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15ab8:	4a0b      	ldr	r2, [pc, #44]	; (15ae8 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   15aba:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15abc:	4b0b      	ldr	r3, [pc, #44]	; (15aec <sys_clock_driver_init+0x90>)
   15abe:	9501      	str	r5, [sp, #4]
   15ac0:	9300      	str	r3, [sp, #0]
   15ac2:	2300      	movs	r3, #0
   15ac4:	f7ff ff10 	bl	158e8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   15ac8:	4630      	mov	r0, r6
   15aca:	f7fe fb03 	bl	140d4 <z_nrf_clock_control_lf_on>

	return 0;
}
   15ace:	4628      	mov	r0, r5
   15ad0:	b002      	add	sp, #8
   15ad2:	bd70      	pop	{r4, r5, r6, pc}
   15ad4:	40015000 	.word	0x40015000
   15ad8:	20009510 	.word	0x20009510
   15adc:	e000e100 	.word	0xe000e100
   15ae0:	20009b0c 	.word	0x20009b0c
   15ae4:	20009b08 	.word	0x20009b08
   15ae8:	007fffff 	.word	0x007fffff
   15aec:	00015739 	.word	0x00015739

00015af0 <rtc_nrf_isr>:
{
   15af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   15af4:	4b3f      	ldr	r3, [pc, #252]	; (15bf4 <rtc_nrf_isr+0x104>)
   15af6:	b085      	sub	sp, #20
   15af8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   15afc:	0792      	lsls	r2, r2, #30
   15afe:	d50b      	bpl.n	15b18 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15b00:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   15b04:	b142      	cbz	r2, 15b18 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15b06:	2200      	movs	r2, #0
   15b08:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   15b0c:	4a3a      	ldr	r2, [pc, #232]	; (15bf8 <rtc_nrf_isr+0x108>)
   15b0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   15b12:	6813      	ldr	r3, [r2, #0]
   15b14:	3301      	adds	r3, #1
   15b16:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15b18:	4d38      	ldr	r5, [pc, #224]	; (15bfc <rtc_nrf_isr+0x10c>)
   15b1a:	2400      	movs	r4, #0
   15b1c:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   15b1e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   15b22:	4e34      	ldr	r6, [pc, #208]	; (15bf4 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   15b24:	f04f 0320 	mov.w	r3, #32
   15b28:	f3ef 8211 	mrs	r2, BASEPRI
   15b2c:	f383 8812 	msr	BASEPRI_MAX, r3
   15b30:	f3bf 8f6f 	isb	sy
   15b34:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   15b38:	fa0b f904 	lsl.w	r9, fp, r4
   15b3c:	ea19 0f03 	tst.w	r9, r3
   15b40:	d10a      	bne.n	15b58 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   15b42:	f382 8811 	msr	BASEPRI, r2
   15b46:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15b4a:	3510      	adds	r5, #16
   15b4c:	b114      	cbz	r4, 15b54 <rtc_nrf_isr+0x64>
}
   15b4e:	b005      	add	sp, #20
   15b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15b54:	2401      	movs	r4, #1
   15b56:	e7e5      	b.n	15b24 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   15b58:	2301      	movs	r3, #1
   15b5a:	40a3      	lsls	r3, r4
   15b5c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15b5e:	4928      	ldr	r1, [pc, #160]	; (15c00 <rtc_nrf_isr+0x110>)
   15b60:	e8d1 0fef 	ldaex	r0, [r1]
   15b64:	ea00 0c03 	and.w	ip, r0, r3
   15b68:	e8c1 cfee 	stlex	lr, ip, [r1]
   15b6c:	f1be 0f00 	cmp.w	lr, #0
   15b70:	d1f6      	bne.n	15b60 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15b72:	4b24      	ldr	r3, [pc, #144]	; (15c04 <rtc_nrf_isr+0x114>)
   15b74:	00a1      	lsls	r1, r4, #2
   15b76:	b918      	cbnz	r0, 15b80 <rtc_nrf_isr+0x90>
   15b78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   15b7c:	2800      	cmp	r0, #0
   15b7e:	d0e0      	beq.n	15b42 <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15b80:	f04f 0a00 	mov.w	sl, #0
   15b84:	f841 a003 	str.w	sl, [r1, r3]
   15b88:	58cb      	ldr	r3, [r1, r3]
   15b8a:	f382 8811 	msr	BASEPRI, r2
   15b8e:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   15b92:	f7ff fe87 	bl	158a4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   15b96:	f04f 0320 	mov.w	r3, #32
   15b9a:	f3ef 8c11 	mrs	ip, BASEPRI
   15b9e:	f383 8812 	msr	BASEPRI_MAX, r3
   15ba2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   15ba6:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   15baa:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   15bae:	4290      	cmp	r0, r2
   15bb0:	4199      	sbcs	r1, r3
   15bb2:	d204      	bcs.n	15bbe <rtc_nrf_isr+0xce>
	__asm__ volatile(
   15bb4:	f38c 8811 	msr	BASEPRI, ip
   15bb8:	f3bf 8f6f 	isb	sy
		if (handler) {
   15bbc:	e7c5      	b.n	15b4a <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   15bbe:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15bc2:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   15bc6:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15bc8:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   15bcc:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15bd0:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   15bd4:	4907      	ldr	r1, [pc, #28]	; (15bf4 <rtc_nrf_isr+0x104>)
   15bd6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   15bda:	f38c 8811 	msr	BASEPRI, ip
   15bde:	f3bf 8f6f 	isb	sy
		if (handler) {
   15be2:	f1b8 0f00 	cmp.w	r8, #0
   15be6:	d0b0      	beq.n	15b4a <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   15be8:	9903      	ldr	r1, [sp, #12]
   15bea:	4620      	mov	r0, r4
   15bec:	9100      	str	r1, [sp, #0]
   15bee:	47c0      	blx	r8
   15bf0:	e7ab      	b.n	15b4a <rtc_nrf_isr+0x5a>
   15bf2:	bf00      	nop
   15bf4:	40015000 	.word	0x40015000
   15bf8:	20009b10 	.word	0x20009b10
   15bfc:	20009510 	.word	0x20009510
   15c00:	20009b04 	.word	0x20009b04
   15c04:	40015140 	.word	0x40015140

00015c08 <z_nrf_rtc_timer_chan_alloc>:
{
   15c08:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   15c0a:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   15c0c:	4b0c      	ldr	r3, [pc, #48]	; (15c40 <z_nrf_rtc_timer_chan_alloc+0x38>)
   15c0e:	6818      	ldr	r0, [r3, #0]
   15c10:	b190      	cbz	r0, 15c38 <z_nrf_rtc_timer_chan_alloc+0x30>
   15c12:	fab0 f080 	clz	r0, r0
   15c16:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   15c1a:	fa04 f100 	lsl.w	r1, r4, r0
   15c1e:	43c9      	mvns	r1, r1
   15c20:	e8d3 2fef 	ldaex	r2, [r3]
   15c24:	ea02 0501 	and.w	r5, r2, r1
   15c28:	e8c3 5fe6 	stlex	r6, r5, [r3]
   15c2c:	2e00      	cmp	r6, #0
   15c2e:	d1f7      	bne.n	15c20 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   15c30:	40c2      	lsrs	r2, r0
   15c32:	07d2      	lsls	r2, r2, #31
   15c34:	d5eb      	bpl.n	15c0e <z_nrf_rtc_timer_chan_alloc+0x6>
}
   15c36:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   15c38:	f06f 000b 	mvn.w	r0, #11
   15c3c:	e7fb      	b.n	15c36 <z_nrf_rtc_timer_chan_alloc+0x2e>
   15c3e:	bf00      	nop
   15c40:	20009b08 	.word	0x20009b08

00015c44 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   15c44:	2801      	cmp	r0, #1
{
   15c46:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   15c48:	d00b      	beq.n	15c62 <z_nrf_rtc_timer_chan_free+0x1e>
   15c4a:	490b      	ldr	r1, [pc, #44]	; (15c78 <z_nrf_rtc_timer_chan_free+0x34>)
   15c4c:	480b      	ldr	r0, [pc, #44]	; (15c7c <z_nrf_rtc_timer_chan_free+0x38>)
   15c4e:	f240 231b 	movw	r3, #539	; 0x21b
   15c52:	4a0b      	ldr	r2, [pc, #44]	; (15c80 <z_nrf_rtc_timer_chan_free+0x3c>)
   15c54:	f006 ff49 	bl	1caea <assert_print>
   15c58:	f240 211b 	movw	r1, #539	; 0x21b
   15c5c:	4808      	ldr	r0, [pc, #32]	; (15c80 <z_nrf_rtc_timer_chan_free+0x3c>)
   15c5e:	f006 ff3d 	bl	1cadc <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c62:	4b08      	ldr	r3, [pc, #32]	; (15c84 <z_nrf_rtc_timer_chan_free+0x40>)
   15c64:	e8d3 1fef 	ldaex	r1, [r3]
   15c68:	f041 0102 	orr.w	r1, r1, #2
   15c6c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15c70:	2a00      	cmp	r2, #0
   15c72:	d1f7      	bne.n	15c64 <z_nrf_rtc_timer_chan_free+0x20>
}
   15c74:	bd08      	pop	{r3, pc}
   15c76:	bf00      	nop
   15c78:	00024417 	.word	0x00024417
   15c7c:	00021547 	.word	0x00021547
   15c80:	000243ca 	.word	0x000243ca
   15c84:	20009b08 	.word	0x20009b08

00015c88 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15c88:	1c43      	adds	r3, r0, #1
{
   15c8a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15c8c:	d020      	beq.n	15cd0 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15c8e:	2801      	cmp	r0, #1
   15c90:	dd20      	ble.n	15cd4 <sys_clock_set_timeout+0x4c>
   15c92:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15c96:	da1f      	bge.n	15cd8 <sys_clock_set_timeout+0x50>
   15c98:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   15c9a:	f7ff fe03 	bl	158a4 <z_nrf_rtc_timer_read>
   15c9e:	4b0f      	ldr	r3, [pc, #60]	; (15cdc <sys_clock_set_timeout+0x54>)
   15ca0:	e9d3 1300 	ldrd	r1, r3, [r3]
   15ca4:	1a42      	subs	r2, r0, r1
		ticks = 0;
   15ca6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   15caa:	bf28      	it	cs
   15cac:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   15cae:	480c      	ldr	r0, [pc, #48]	; (15ce0 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   15cb0:	3201      	adds	r2, #1
   15cb2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   15cb4:	4282      	cmp	r2, r0
   15cb6:	bf28      	it	cs
   15cb8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   15cba:	2000      	movs	r0, #0
   15cbc:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15cbe:	4909      	ldr	r1, [pc, #36]	; (15ce4 <sys_clock_set_timeout+0x5c>)
   15cc0:	9001      	str	r0, [sp, #4]
   15cc2:	9100      	str	r1, [sp, #0]
   15cc4:	f143 0300 	adc.w	r3, r3, #0
   15cc8:	f7ff fe0e 	bl	158e8 <compare_set>
}
   15ccc:	b002      	add	sp, #8
   15cce:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15cd0:	4803      	ldr	r0, [pc, #12]	; (15ce0 <sys_clock_set_timeout+0x58>)
   15cd2:	e7e1      	b.n	15c98 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15cd4:	2400      	movs	r4, #0
   15cd6:	e7e0      	b.n	15c9a <sys_clock_set_timeout+0x12>
   15cd8:	4c01      	ldr	r4, [pc, #4]	; (15ce0 <sys_clock_set_timeout+0x58>)
   15cda:	e7de      	b.n	15c9a <sys_clock_set_timeout+0x12>
   15cdc:	20009530 	.word	0x20009530
   15ce0:	007fffff 	.word	0x007fffff
   15ce4:	00015739 	.word	0x00015739

00015ce8 <sys_clock_elapsed>:
{
   15ce8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   15cea:	f7ff fddb 	bl	158a4 <z_nrf_rtc_timer_read>
   15cee:	4b02      	ldr	r3, [pc, #8]	; (15cf8 <sys_clock_elapsed+0x10>)
   15cf0:	681b      	ldr	r3, [r3, #0]
}
   15cf2:	1ac0      	subs	r0, r0, r3
   15cf4:	bd08      	pop	{r3, pc}
   15cf6:	bf00      	nop
   15cf8:	20009530 	.word	0x20009530

00015cfc <nrf_gpio_pin_port_decode>:
{
   15cfc:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15cfe:	6803      	ldr	r3, [r0, #0]
    switch (port)
   15d00:	095a      	lsrs	r2, r3, #5
   15d02:	d00d      	beq.n	15d20 <nrf_gpio_pin_port_decode+0x24>
   15d04:	2a01      	cmp	r2, #1
   15d06:	d013      	beq.n	15d30 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15d08:	490e      	ldr	r1, [pc, #56]	; (15d44 <nrf_gpio_pin_port_decode+0x48>)
   15d0a:	480f      	ldr	r0, [pc, #60]	; (15d48 <nrf_gpio_pin_port_decode+0x4c>)
   15d0c:	f240 2347 	movw	r3, #583	; 0x247
   15d10:	4a0e      	ldr	r2, [pc, #56]	; (15d4c <nrf_gpio_pin_port_decode+0x50>)
   15d12:	f006 feea 	bl	1caea <assert_print>
   15d16:	f240 2147 	movw	r1, #583	; 0x247
   15d1a:	480c      	ldr	r0, [pc, #48]	; (15d4c <nrf_gpio_pin_port_decode+0x50>)
   15d1c:	f006 fede 	bl	1cadc <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   15d20:	f04f 32ff 	mov.w	r2, #4294967295
   15d24:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15d28:	07d9      	lsls	r1, r3, #31
   15d2a:	d5ed      	bpl.n	15d08 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   15d2c:	4808      	ldr	r0, [pc, #32]	; (15d50 <nrf_gpio_pin_port_decode+0x54>)
   15d2e:	e008      	b.n	15d42 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   15d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   15d34:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   15d38:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15d3a:	07d2      	lsls	r2, r2, #31
   15d3c:	d5e4      	bpl.n	15d08 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   15d3e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   15d40:	4804      	ldr	r0, [pc, #16]	; (15d54 <nrf_gpio_pin_port_decode+0x58>)
}
   15d42:	bd08      	pop	{r3, pc}
   15d44:	00023dd7 	.word	0x00023dd7
   15d48:	00021547 	.word	0x00021547
   15d4c:	00023da4 	.word	0x00023da4
   15d50:	40842500 	.word	0x40842500
   15d54:	40842800 	.word	0x40842800

00015d58 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   15d58:	b510      	push	{r4, lr}
   15d5a:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   15d5c:	6902      	ldr	r2, [r0, #16]
{
   15d5e:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   15d60:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   15d64:	4925      	ldr	r1, [pc, #148]	; (15dfc <mbox_nrf_init+0xa4>)
   15d66:	2000      	movs	r0, #0
   15d68:	f001 f974 	bl	17054 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15d6c:	2200      	movs	r2, #0
   15d6e:	2101      	movs	r1, #1
   15d70:	202a      	movs	r0, #42	; 0x2a
   15d72:	f7f7 f845 	bl	ce00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   15d76:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   15d78:	2284      	movs	r2, #132	; 0x84
   15d7a:	2100      	movs	r1, #0
   15d7c:	a807      	add	r0, sp, #28
   15d7e:	f007 fece 	bl	1db1e <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   15d82:	6863      	ldr	r3, [r4, #4]
   15d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15d88:	d30a      	bcc.n	15da0 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   15d8a:	4b1d      	ldr	r3, [pc, #116]	; (15e00 <mbox_nrf_init+0xa8>)
   15d8c:	9305      	str	r3, [sp, #20]
   15d8e:	2302      	movs	r3, #2
   15d90:	9304      	str	r3, [sp, #16]
   15d92:	2300      	movs	r3, #0
   15d94:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15d98:	481a      	ldr	r0, [pc, #104]	; (15e04 <mbox_nrf_init+0xac>)
   15d9a:	aa04      	add	r2, sp, #16
   15d9c:	f7f5 fdb4 	bl	b908 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   15da0:	6823      	ldr	r3, [r4, #0]
   15da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15da6:	d30a      	bcc.n	15dbe <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   15da8:	4b17      	ldr	r3, [pc, #92]	; (15e08 <mbox_nrf_init+0xb0>)
   15daa:	9305      	str	r3, [sp, #20]
   15dac:	2302      	movs	r3, #2
   15dae:	9304      	str	r3, [sp, #16]
   15db0:	2300      	movs	r3, #0
   15db2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15db6:	4813      	ldr	r0, [pc, #76]	; (15e04 <mbox_nrf_init+0xac>)
   15db8:	aa04      	add	r2, sp, #16
   15dba:	f7f5 fda5 	bl	b908 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   15dbe:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   15dc0:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   15dc2:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15dc4:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   15dc6:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15dc8:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   15dca:	40d9      	lsrs	r1, r3
   15dcc:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   15dce:	bf44      	itt	mi
   15dd0:	fa00 f103 	lslmi.w	r1, r0, r3
   15dd4:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   15dd8:	6821      	ldr	r1, [r4, #0]
   15dda:	40d9      	lsrs	r1, r3
   15ddc:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   15dde:	bf48      	it	mi
   15de0:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15de4:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   15de8:	bf48      	it	mi
   15dea:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   15dec:	2b10      	cmp	r3, #16
   15dee:	d1ea      	bne.n	15dc6 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   15df0:	a807      	add	r0, sp, #28
   15df2:	f001 f947 	bl	17084 <nrfx_ipc_config_load>

	return 0;
}
   15df6:	2000      	movs	r0, #0
   15df8:	b028      	add	sp, #160	; 0xa0
   15dfa:	bd10      	pop	{r4, pc}
   15dfc:	00015f01 	.word	0x00015f01
   15e00:	00024432 	.word	0x00024432
   15e04:	000208a4 	.word	0x000208a4
   15e08:	0002445e 	.word	0x0002445e

00015e0c <mbox_nrf_set_enabled>:
{
   15e0c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15e0e:	290f      	cmp	r1, #15
{
   15e10:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   15e12:	6905      	ldr	r5, [r0, #16]
{
   15e14:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15e16:	d842      	bhi.n	15e9e <mbox_nrf_set_enabled+0x92>
   15e18:	6843      	ldr	r3, [r0, #4]
   15e1a:	681b      	ldr	r3, [r3, #0]
   15e1c:	40cb      	lsrs	r3, r1
   15e1e:	07db      	lsls	r3, r3, #31
   15e20:	d53d      	bpl.n	15e9e <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   15e22:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15e26:	40cb      	lsrs	r3, r1
   15e28:	f003 0301 	and.w	r3, r3, #1
   15e2c:	b91a      	cbnz	r2, 15e36 <mbox_nrf_set_enabled+0x2a>
   15e2e:	bb13      	cbnz	r3, 15e76 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   15e30:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15e34:	e031      	b.n	15e9a <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   15e36:	2b00      	cmp	r3, #0
   15e38:	d1fa      	bne.n	15e30 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   15e3a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   15e3e:	b94b      	cbnz	r3, 15e54 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   15e40:	4a18      	ldr	r2, [pc, #96]	; (15ea4 <mbox_nrf_set_enabled+0x98>)
   15e42:	9205      	str	r2, [sp, #20]
   15e44:	2202      	movs	r2, #2
   15e46:	9204      	str	r2, [sp, #16]
   15e48:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15e4c:	4816      	ldr	r0, [pc, #88]	; (15ea8 <mbox_nrf_set_enabled+0x9c>)
   15e4e:	aa04      	add	r2, sp, #16
   15e50:	f7f5 fd5a 	bl	b908 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   15e54:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15e58:	b913      	cbnz	r3, 15e60 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   15e5a:	202a      	movs	r0, #42	; 0x2a
   15e5c:	f7f6 ffa0 	bl	cda0 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   15e60:	2201      	movs	r2, #1
   15e62:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15e66:	40a2      	lsls	r2, r4
   15e68:	4313      	orrs	r3, r2
   15e6a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   15e6e:	b2e0      	uxtb	r0, r4
   15e70:	f001 f94a 	bl	17108 <nrfx_ipc_receive_event_enable>
   15e74:	e00a      	b.n	15e8c <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   15e76:	b2c8      	uxtb	r0, r1
   15e78:	f001 f964 	bl	17144 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   15e7c:	2201      	movs	r2, #1
   15e7e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15e82:	40a2      	lsls	r2, r4
   15e84:	ea23 0302 	bic.w	r3, r3, r2
   15e88:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   15e8c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15e90:	b913      	cbnz	r3, 15e98 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   15e92:	202a      	movs	r0, #42	; 0x2a
   15e94:	f7f6 ff92 	bl	cdbc <arch_irq_disable>
	return 0;
   15e98:	2000      	movs	r0, #0
}
   15e9a:	b007      	add	sp, #28
   15e9c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   15e9e:	f06f 0015 	mvn.w	r0, #21
   15ea2:	e7fa      	b.n	15e9a <mbox_nrf_set_enabled+0x8e>
   15ea4:	0002448a 	.word	0x0002448a
   15ea8:	000208a4 	.word	0x000208a4

00015eac <mbox_nrf_send>:
{
   15eac:	b530      	push	{r4, r5, lr}
   15eae:	4605      	mov	r5, r0
   15eb0:	460c      	mov	r4, r1
   15eb2:	b087      	sub	sp, #28
	if (msg) {
   15eb4:	b152      	cbz	r2, 15ecc <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   15eb6:	4b10      	ldr	r3, [pc, #64]	; (15ef8 <mbox_nrf_send+0x4c>)
   15eb8:	9305      	str	r3, [sp, #20]
   15eba:	2302      	movs	r3, #2
   15ebc:	9304      	str	r3, [sp, #16]
   15ebe:	2300      	movs	r3, #0
   15ec0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15ec4:	480d      	ldr	r0, [pc, #52]	; (15efc <mbox_nrf_send+0x50>)
   15ec6:	aa04      	add	r2, sp, #16
   15ec8:	f7f5 fd1e 	bl	b908 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   15ecc:	2c0f      	cmp	r4, #15
   15ece:	d80f      	bhi.n	15ef0 <mbox_nrf_send+0x44>
   15ed0:	686b      	ldr	r3, [r5, #4]
   15ed2:	685b      	ldr	r3, [r3, #4]
   15ed4:	40e3      	lsrs	r3, r4
   15ed6:	07db      	lsls	r3, r3, #31
   15ed8:	d50a      	bpl.n	15ef0 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15eda:	2301      	movs	r3, #1
	return 0;
   15edc:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   15ede:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ee0:	b2e4      	uxtb	r4, r4
   15ee2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   15ee6:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   15eea:	6023      	str	r3, [r4, #0]
}
   15eec:	b007      	add	sp, #28
   15eee:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   15ef0:	f06f 0015 	mvn.w	r0, #21
   15ef4:	e7fa      	b.n	15eec <mbox_nrf_send+0x40>
   15ef6:	bf00      	nop
   15ef8:	000244ba 	.word	0x000244ba
   15efc:	000208a4 	.word	0x000208a4

00015f00 <mbox_dispatcher>:
{
   15f00:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   15f02:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15f06:	280f      	cmp	r0, #15
{
   15f08:	4604      	mov	r4, r0
   15f0a:	460d      	mov	r5, r1
   15f0c:	6873      	ldr	r3, [r6, #4]
   15f0e:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   15f10:	d803      	bhi.n	15f1a <mbox_dispatcher+0x1a>
   15f12:	681b      	ldr	r3, [r3, #0]
   15f14:	40c3      	lsrs	r3, r0
   15f16:	07db      	lsls	r3, r3, #31
   15f18:	d40a      	bmi.n	15f30 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   15f1a:	4b15      	ldr	r3, [pc, #84]	; (15f70 <mbox_dispatcher+0x70>)
   15f1c:	9305      	str	r3, [sp, #20]
   15f1e:	2302      	movs	r3, #2
   15f20:	9304      	str	r3, [sp, #16]
   15f22:	2300      	movs	r3, #0
   15f24:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15f28:	4812      	ldr	r0, [pc, #72]	; (15f74 <mbox_dispatcher+0x74>)
   15f2a:	aa04      	add	r2, sp, #16
   15f2c:	f7f5 fcec 	bl	b908 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   15f30:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   15f34:	40e3      	lsrs	r3, r4
   15f36:	f013 0301 	ands.w	r3, r3, #1
   15f3a:	d109      	bne.n	15f50 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   15f3c:	4a0e      	ldr	r2, [pc, #56]	; (15f78 <mbox_dispatcher+0x78>)
   15f3e:	9205      	str	r2, [sp, #20]
   15f40:	2202      	movs	r2, #2
   15f42:	9204      	str	r2, [sp, #16]
   15f44:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15f48:	480a      	ldr	r0, [pc, #40]	; (15f74 <mbox_dispatcher+0x74>)
   15f4a:	aa04      	add	r2, sp, #16
   15f4c:	f7f5 fcdc 	bl	b908 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   15f50:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   15f54:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   15f58:	b145      	cbz	r5, 15f6c <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   15f5a:	2300      	movs	r3, #0
   15f5c:	4621      	mov	r1, r4
   15f5e:	4630      	mov	r0, r6
   15f60:	46ac      	mov	ip, r5
   15f62:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   15f64:	b006      	add	sp, #24
   15f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   15f6a:	4760      	bx	ip
}
   15f6c:	b006      	add	sp, #24
   15f6e:	bd70      	pop	{r4, r5, r6, pc}
   15f70:	000244d5 	.word	0x000244d5
   15f74:	000208a4 	.word	0x000208a4
   15f78:	000244f1 	.word	0x000244f1

00015f7c <z_impl_gpio_pin_configure>:
{
   15f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   15f80:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   15f84:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   15f86:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   15f8a:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   15f8c:	d00e      	beq.n	15fac <z_impl_gpio_pin_configure+0x30>
   15f8e:	4942      	ldr	r1, [pc, #264]	; (16098 <z_impl_gpio_pin_configure+0x11c>)
   15f90:	f240 23be 	movw	r3, #702	; 0x2be
   15f94:	4a41      	ldr	r2, [pc, #260]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   15f96:	4842      	ldr	r0, [pc, #264]	; (160a0 <z_impl_gpio_pin_configure+0x124>)
   15f98:	f006 fda7 	bl	1caea <assert_print>
   15f9c:	4841      	ldr	r0, [pc, #260]	; (160a4 <z_impl_gpio_pin_configure+0x128>)
   15f9e:	f006 fda4 	bl	1caea <assert_print>
   15fa2:	f240 21be 	movw	r1, #702	; 0x2be
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   15fa6:	483d      	ldr	r0, [pc, #244]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   15fa8:	f006 fd98 	bl	1cadc <assert_post_action>
   15fac:	f002 0230 	and.w	r2, r2, #48	; 0x30
   15fb0:	2a30      	cmp	r2, #48	; 0x30
   15fb2:	d10c      	bne.n	15fce <z_impl_gpio_pin_configure+0x52>
   15fb4:	493c      	ldr	r1, [pc, #240]	; (160a8 <z_impl_gpio_pin_configure+0x12c>)
   15fb6:	f240 23c1 	movw	r3, #705	; 0x2c1
   15fba:	4a38      	ldr	r2, [pc, #224]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   15fbc:	4838      	ldr	r0, [pc, #224]	; (160a0 <z_impl_gpio_pin_configure+0x124>)
   15fbe:	f006 fd94 	bl	1caea <assert_print>
   15fc2:	483a      	ldr	r0, [pc, #232]	; (160ac <z_impl_gpio_pin_configure+0x130>)
   15fc4:	f006 fd91 	bl	1caea <assert_print>
   15fc8:	f240 21c1 	movw	r1, #705	; 0x2c1
   15fcc:	e7eb      	b.n	15fa6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   15fce:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   15fd2:	2a02      	cmp	r2, #2
   15fd4:	d10c      	bne.n	15ff0 <z_impl_gpio_pin_configure+0x74>
   15fd6:	4936      	ldr	r1, [pc, #216]	; (160b0 <z_impl_gpio_pin_configure+0x134>)
   15fd8:	f240 23c5 	movw	r3, #709	; 0x2c5
   15fdc:	4a2f      	ldr	r2, [pc, #188]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   15fde:	4830      	ldr	r0, [pc, #192]	; (160a0 <z_impl_gpio_pin_configure+0x124>)
   15fe0:	f006 fd83 	bl	1caea <assert_print>
   15fe4:	4833      	ldr	r0, [pc, #204]	; (160b4 <z_impl_gpio_pin_configure+0x138>)
   15fe6:	f006 fd80 	bl	1caea <assert_print>
   15fea:	f240 21c5 	movw	r1, #709	; 0x2c5
   15fee:	e7da      	b.n	15fa6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   15ff0:	f003 0206 	and.w	r2, r3, #6
   15ff4:	2a04      	cmp	r2, #4
   15ff6:	d109      	bne.n	1600c <z_impl_gpio_pin_configure+0x90>
   15ff8:	492f      	ldr	r1, [pc, #188]	; (160b8 <z_impl_gpio_pin_configure+0x13c>)
   15ffa:	f240 23c9 	movw	r3, #713	; 0x2c9
   15ffe:	4a27      	ldr	r2, [pc, #156]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   16000:	4827      	ldr	r0, [pc, #156]	; (160a0 <z_impl_gpio_pin_configure+0x124>)
   16002:	f006 fd72 	bl	1caea <assert_print>
   16006:	f240 21c9 	movw	r1, #713	; 0x2c9
   1600a:	e7cc      	b.n	15fa6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1600c:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   16010:	d016      	beq.n	16040 <z_impl_gpio_pin_configure+0xc4>
   16012:	039d      	lsls	r5, r3, #14
   16014:	d40c      	bmi.n	16030 <z_impl_gpio_pin_configure+0xb4>
   16016:	4929      	ldr	r1, [pc, #164]	; (160bc <z_impl_gpio_pin_configure+0x140>)
   16018:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1601c:	4a1f      	ldr	r2, [pc, #124]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   1601e:	4820      	ldr	r0, [pc, #128]	; (160a0 <z_impl_gpio_pin_configure+0x124>)
   16020:	f006 fd63 	bl	1caea <assert_print>
   16024:	4826      	ldr	r0, [pc, #152]	; (160c0 <z_impl_gpio_pin_configure+0x144>)
   16026:	f006 fd60 	bl	1caea <assert_print>
   1602a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1602e:	e7ba      	b.n	15fa6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   16030:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   16034:	d018      	beq.n	16068 <z_impl_gpio_pin_configure+0xec>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   16036:	4a23      	ldr	r2, [pc, #140]	; (160c4 <z_impl_gpio_pin_configure+0x148>)
   16038:	439a      	bics	r2, r3
   1603a:	d101      	bne.n	16040 <z_impl_gpio_pin_configure+0xc4>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1603c:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16040:	2501      	movs	r5, #1
   16042:	6824      	ldr	r4, [r4, #0]
   16044:	408d      	lsls	r5, r1
   16046:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   16048:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1604c:	d119      	bne.n	16082 <z_impl_gpio_pin_configure+0x106>
   1604e:	491e      	ldr	r1, [pc, #120]	; (160c8 <z_impl_gpio_pin_configure+0x14c>)
   16050:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   16054:	4a11      	ldr	r2, [pc, #68]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   16056:	4812      	ldr	r0, [pc, #72]	; (160a0 <z_impl_gpio_pin_configure+0x124>)
   16058:	f006 fd47 	bl	1caea <assert_print>
   1605c:	481b      	ldr	r0, [pc, #108]	; (160cc <z_impl_gpio_pin_configure+0x150>)
   1605e:	f006 fd44 	bl	1caea <assert_print>
   16062:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   16066:	e79e      	b.n	15fa6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   16068:	4919      	ldr	r1, [pc, #100]	; (160d0 <z_impl_gpio_pin_configure+0x154>)
   1606a:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   1606e:	4a0b      	ldr	r2, [pc, #44]	; (1609c <z_impl_gpio_pin_configure+0x120>)
   16070:	480b      	ldr	r0, [pc, #44]	; (160a0 <z_impl_gpio_pin_configure+0x124>)
   16072:	f006 fd3a 	bl	1caea <assert_print>
   16076:	4817      	ldr	r0, [pc, #92]	; (160d4 <z_impl_gpio_pin_configure+0x158>)
   16078:	f006 fd37 	bl	1caea <assert_print>
   1607c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   16080:	e791      	b.n	15fa6 <z_impl_gpio_pin_configure+0x2a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16082:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   16084:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16086:	bf4c      	ite	mi
   16088:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1608a:	43ac      	bicpl	r4, r5
   1608c:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1608e:	683b      	ldr	r3, [r7, #0]
}
   16090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   16094:	4718      	bx	r3
   16096:	bf00      	nop
   16098:	00024527 	.word	0x00024527
   1609c:	000214d8 	.word	0x000214d8
   160a0:	00021547 	.word	0x00021547
   160a4:	00024584 	.word	0x00024584
   160a8:	00023ee9 	.word	0x00023ee9
   160ac:	00023f22 	.word	0x00023f22
   160b0:	000245a8 	.word	0x000245a8
   160b4:	000245dd 	.word	0x000245dd
   160b8:	00023f5f 	.word	0x00023f5f
   160bc:	0002462f 	.word	0x0002462f
   160c0:	00024675 	.word	0x00024675
   160c4:	00100001 	.word	0x00100001
   160c8:	00021509 	.word	0x00021509
   160cc:	00021564 	.word	0x00021564
   160d0:	000246b0 	.word	0x000246b0
   160d4:	000246f1 	.word	0x000246f1

000160d8 <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   160d8:	2301      	movs	r3, #1
{
   160da:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   160dc:	fa03 f101 	lsl.w	r1, r3, r1
   160e0:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   160e2:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   160e4:	681b      	ldr	r3, [r3, #0]
   160e6:	4219      	tst	r1, r3
   160e8:	d10e      	bne.n	16108 <gpio_pin_set+0x30>
   160ea:	490e      	ldr	r1, [pc, #56]	; (16124 <gpio_pin_set+0x4c>)
   160ec:	f240 5327 	movw	r3, #1319	; 0x527
   160f0:	4a0d      	ldr	r2, [pc, #52]	; (16128 <gpio_pin_set+0x50>)
   160f2:	480e      	ldr	r0, [pc, #56]	; (1612c <gpio_pin_set+0x54>)
   160f4:	f006 fcf9 	bl	1caea <assert_print>
   160f8:	480d      	ldr	r0, [pc, #52]	; (16130 <gpio_pin_set+0x58>)
   160fa:	f006 fcf6 	bl	1caea <assert_print>
   160fe:	f240 5127 	movw	r1, #1319	; 0x527
   16102:	4809      	ldr	r0, [pc, #36]	; (16128 <gpio_pin_set+0x50>)
   16104:	f006 fcea 	bl	1cadc <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   16108:	6823      	ldr	r3, [r4, #0]
   1610a:	4219      	tst	r1, r3
   1610c:	d003      	beq.n	16116 <gpio_pin_set+0x3e>
	if (value != 0)	{
   1610e:	b122      	cbz	r2, 1611a <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   16110:	6883      	ldr	r3, [r0, #8]
   16112:	691b      	ldr	r3, [r3, #16]
   16114:	e003      	b.n	1611e <gpio_pin_set+0x46>
	if (value != 0)	{
   16116:	2a00      	cmp	r2, #0
   16118:	d0fa      	beq.n	16110 <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   1611a:	6883      	ldr	r3, [r0, #8]
   1611c:	68db      	ldr	r3, [r3, #12]
}
   1611e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   16122:	4718      	bx	r3
   16124:	00021509 	.word	0x00021509
   16128:	000214d8 	.word	0x000214d8
   1612c:	00021547 	.word	0x00021547
   16130:	00021564 	.word	0x00021564

00016134 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   16134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16138:	4607      	mov	r7, r0
   1613a:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1613c:	2500      	movs	r5, #0
   1613e:	4e14      	ldr	r6, [pc, #80]	; (16190 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   16140:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   16142:	fa27 f205 	lsr.w	r2, r7, r5
   16146:	f012 0201 	ands.w	r2, r2, #1
   1614a:	d117      	bne.n	1617c <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1614c:	fa28 f305 	lsr.w	r3, r8, r5
   16150:	07db      	lsls	r3, r3, #31
   16152:	d515      	bpl.n	16180 <dk_set_leds_state.part.0+0x4c>
	return gpio_pin_set(spec->port, spec->pin, value);
   16154:	7931      	ldrb	r1, [r6, #4]
   16156:	6830      	ldr	r0, [r6, #0]
   16158:	f7ff ffbe 	bl	160d8 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1615c:	4604      	mov	r4, r0
   1615e:	b178      	cbz	r0, 16180 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   16160:	4b0c      	ldr	r3, [pc, #48]	; (16194 <dk_set_leds_state.part.0+0x60>)
   16162:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16166:	9305      	str	r3, [sp, #20]
   16168:	2302      	movs	r3, #2
   1616a:	480b      	ldr	r0, [pc, #44]	; (16198 <dk_set_leds_state.part.0+0x64>)
   1616c:	aa04      	add	r2, sp, #16
   1616e:	9304      	str	r3, [sp, #16]
   16170:	f009 f905 	bl	1f37e <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   16174:	4620      	mov	r0, r4
   16176:	b006      	add	sp, #24
   16178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1617c:	2201      	movs	r2, #1
   1617e:	e7e9      	b.n	16154 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   16180:	3501      	adds	r5, #1
   16182:	2d04      	cmp	r5, #4
   16184:	f106 0608 	add.w	r6, r6, #8
   16188:	d1db      	bne.n	16142 <dk_set_leds_state.part.0+0xe>
	return 0;
   1618a:	2400      	movs	r4, #0
   1618c:	e7f2      	b.n	16174 <dk_set_leds_state.part.0+0x40>
   1618e:	bf00      	nop
   16190:	0002112c 	.word	0x0002112c
   16194:	0002471d 	.word	0x0002471d
   16198:	00020874 	.word	0x00020874

0001619c <dk_leds_init>:
{
   1619c:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1619e:	2600      	movs	r6, #0
   161a0:	4c11      	ldr	r4, [pc, #68]	; (161e8 <dk_leds_init+0x4c>)
{
   161a2:	b086      	sub	sp, #24
				  spec->dt_flags | extra_flags);
   161a4:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   161a6:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   161a8:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   161aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   161ae:	f7ff fee5 	bl	15f7c <z_impl_gpio_pin_configure>
		if (err) {
   161b2:	4605      	mov	r5, r0
   161b4:	b950      	cbnz	r0, 161cc <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   161b6:	3601      	adds	r6, #1
   161b8:	2e04      	cmp	r6, #4
   161ba:	f104 0408 	add.w	r4, r4, #8
   161be:	d1f1      	bne.n	161a4 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   161c0:	210f      	movs	r1, #15
}
   161c2:	b006      	add	sp, #24
   161c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   161c8:	f7ff bfb4 	b.w	16134 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   161cc:	4b07      	ldr	r3, [pc, #28]	; (161ec <dk_leds_init+0x50>)
   161ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   161d2:	9305      	str	r3, [sp, #20]
   161d4:	2302      	movs	r3, #2
   161d6:	4806      	ldr	r0, [pc, #24]	; (161f0 <dk_leds_init+0x54>)
   161d8:	aa04      	add	r2, sp, #16
   161da:	9304      	str	r3, [sp, #16]
   161dc:	f009 f8cf 	bl	1f37e <z_log_msg_static_create.constprop.0>
}
   161e0:	4628      	mov	r0, r5
   161e2:	b006      	add	sp, #24
   161e4:	bd70      	pop	{r4, r5, r6, pc}
   161e6:	bf00      	nop
   161e8:	0002112c 	.word	0x0002112c
   161ec:	00024733 	.word	0x00024733
   161f0:	00020874 	.word	0x00020874

000161f4 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   161f4:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   161f6:	2803      	cmp	r0, #3
{
   161f8:	460a      	mov	r2, r1
   161fa:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   161fc:	d90e      	bls.n	1621c <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   161fe:	4b12      	ldr	r3, [pc, #72]	; (16248 <dk_set_led+0x54>)
		return -EINVAL;
   16200:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   16204:	9305      	str	r3, [sp, #20]
   16206:	2302      	movs	r3, #2
   16208:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1620c:	480f      	ldr	r0, [pc, #60]	; (1624c <dk_set_led+0x58>)
   1620e:	aa04      	add	r2, sp, #16
   16210:	9304      	str	r3, [sp, #16]
   16212:	f009 f8b4 	bl	1f37e <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   16216:	4620      	mov	r0, r4
   16218:	b006      	add	sp, #24
   1621a:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1621c:	4b0c      	ldr	r3, [pc, #48]	; (16250 <dk_set_led+0x5c>)
   1621e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   16222:	7909      	ldrb	r1, [r1, #4]
   16224:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   16228:	f7ff ff56 	bl	160d8 <gpio_pin_set>
	if (err) {
   1622c:	4604      	mov	r4, r0
   1622e:	2800      	cmp	r0, #0
   16230:	d0f1      	beq.n	16216 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   16232:	4b08      	ldr	r3, [pc, #32]	; (16254 <dk_set_led+0x60>)
   16234:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16238:	9305      	str	r3, [sp, #20]
   1623a:	2302      	movs	r3, #2
   1623c:	4803      	ldr	r0, [pc, #12]	; (1624c <dk_set_led+0x58>)
   1623e:	aa04      	add	r2, sp, #16
   16240:	9304      	str	r3, [sp, #16]
   16242:	f009 f89c 	bl	1f37e <z_log_msg_static_create.constprop.0>
   16246:	e7e6      	b.n	16216 <dk_set_led+0x22>
   16248:	0002474d 	.word	0x0002474d
   1624c:	00020874 	.word	0x00020874
   16250:	0002112c 	.word	0x0002112c
   16254:	0002471d 	.word	0x0002471d

00016258 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   16258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1625a:	f7f5 f9ef 	bl	b63c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1625e:	4b07      	ldr	r3, [pc, #28]	; (1627c <k_sys_fatal_error_handler+0x24>)
   16260:	9305      	str	r3, [sp, #20]
   16262:	2302      	movs	r3, #2
   16264:	9304      	str	r3, [sp, #16]
   16266:	4806      	ldr	r0, [pc, #24]	; (16280 <k_sys_fatal_error_handler+0x28>)
   16268:	2300      	movs	r3, #0
   1626a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1626e:	aa04      	add	r2, sp, #16
   16270:	f7f5 fb4a 	bl	b908 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   16274:	2000      	movs	r0, #0
   16276:	f7f7 fa4b 	bl	d710 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1627a:	bf00      	nop
   1627c:	0002477c 	.word	0x0002477c
   16280:	0002087c 	.word	0x0002087c

00016284 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   16284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16288:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1628a:	4b15      	ldr	r3, [pc, #84]	; (162e0 <tfm_ns_interface_dispatch+0x5c>)
   1628c:	4604      	mov	r4, r0
   1628e:	f893 8000 	ldrb.w	r8, [r3]
   16292:	460d      	mov	r5, r1
   16294:	4616      	mov	r6, r2
   16296:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   16298:	f1b8 0f00 	cmp.w	r8, #0
   1629c:	d115      	bne.n	162ca <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1629e:	4668      	mov	r0, sp
   162a0:	f007 fbaa 	bl	1d9f8 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   162a4:	463a      	mov	r2, r7
   162a6:	4631      	mov	r1, r6
   162a8:	4628      	mov	r0, r5
   162aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   162ac:	47a0      	blx	r4
   162ae:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   162b0:	4668      	mov	r0, sp
   162b2:	f007 fba2 	bl	1d9fa <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   162b6:	f1b8 0f00 	cmp.w	r8, #0
   162ba:	d002      	beq.n	162c2 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   162bc:	4809      	ldr	r0, [pc, #36]	; (162e4 <tfm_ns_interface_dispatch+0x60>)
   162be:	f002 ff53 	bl	19168 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   162c2:	4620      	mov	r0, r4
   162c4:	b022      	add	sp, #136	; 0x88
   162c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   162ca:	f04f 32ff 	mov.w	r2, #4294967295
   162ce:	f04f 33ff 	mov.w	r3, #4294967295
   162d2:	4804      	ldr	r0, [pc, #16]	; (162e4 <tfm_ns_interface_dispatch+0x60>)
   162d4:	f002 fe78 	bl	18fc8 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   162d8:	2800      	cmp	r0, #0
   162da:	d0e0      	beq.n	1629e <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   162dc:	241f      	movs	r4, #31
   162de:	e7f0      	b.n	162c2 <tfm_ns_interface_dispatch+0x3e>
   162e0:	20009d1c 	.word	0x20009d1c
   162e4:	200085c8 	.word	0x200085c8

000162e8 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   162e8:	b530      	push	{r4, r5, lr}
   162ea:	b095      	sub	sp, #84	; 0x54
   162ec:	4605      	mov	r5, r0
   162ee:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   162f0:	2230      	movs	r2, #48	; 0x30
   162f2:	2100      	movs	r1, #0
   162f4:	a808      	add	r0, sp, #32
   162f6:	f007 fc12 	bl	1db1e <memset>
   162fa:	233f      	movs	r3, #63	; 0x3f
   162fc:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   162fe:	ab07      	add	r3, sp, #28
   16300:	9303      	str	r3, [sp, #12]
   16302:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   16304:	9406      	str	r4, [sp, #24]
   16306:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1630a:	b154      	cbz	r4, 16322 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1630c:	2301      	movs	r3, #1
   1630e:	aa05      	add	r2, sp, #20
   16310:	9200      	str	r2, [sp, #0]
   16312:	2100      	movs	r1, #0
   16314:	4804      	ldr	r0, [pc, #16]	; (16328 <psa_generate_random+0x40>)
   16316:	9301      	str	r3, [sp, #4]
   16318:	aa03      	add	r2, sp, #12
   1631a:	f000 f807 	bl	1632c <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1631e:	b015      	add	sp, #84	; 0x54
   16320:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   16322:	4620      	mov	r0, r4
   16324:	e7fb      	b.n	1631e <psa_generate_random+0x36>
   16326:	bf00      	nop
   16328:	40000100 	.word	0x40000100

0001632c <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1632c:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1632e:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   16332:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   16336:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   16338:	d20d      	bcs.n	16356 <psa_call+0x2a>
        (type < INT16_MIN) ||
   1633a:	ea43 0504 	orr.w	r5, r3, r4
   1633e:	2dff      	cmp	r5, #255	; 0xff
   16340:	d809      	bhi.n	16356 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   16342:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   16346:	4613      	mov	r3, r2
   16348:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1634c:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1634e:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   16350:	4803      	ldr	r0, [pc, #12]	; (16360 <psa_call+0x34>)
   16352:	f7ff bf97 	b.w	16284 <tfm_ns_interface_dispatch>
}
   16356:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1635a:	bc30      	pop	{r4, r5}
   1635c:	4770      	bx	lr
   1635e:	bf00      	nop
   16360:	00007c21 	.word	0x00007c21

00016364 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   16364:	2300      	movs	r3, #0
{
   16366:	b507      	push	{r0, r1, r2, lr}
   16368:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1636a:	9300      	str	r3, [sp, #0]
   1636c:	4601      	mov	r1, r0
   1636e:	4803      	ldr	r0, [pc, #12]	; (1637c <psa_connect+0x18>)
   16370:	f7ff ff88 	bl	16284 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   16374:	b003      	add	sp, #12
   16376:	f85d fb04 	ldr.w	pc, [sp], #4
   1637a:	bf00      	nop
   1637c:	00007c19 	.word	0x00007c19

00016380 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   16380:	2300      	movs	r3, #0
{
   16382:	b507      	push	{r0, r1, r2, lr}
   16384:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   16386:	461a      	mov	r2, r3
   16388:	9300      	str	r3, [sp, #0]
   1638a:	4803      	ldr	r0, [pc, #12]	; (16398 <psa_close+0x18>)
   1638c:	f7ff ff7a 	bl	16284 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   16390:	b003      	add	sp, #12
   16392:	f85d fb04 	ldr.w	pc, [sp], #4
   16396:	bf00      	nop
   16398:	00007c11 	.word	0x00007c11

0001639c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1639c:	4b04      	ldr	r3, [pc, #16]	; (163b0 <SystemCoreClockUpdate+0x14>)
   1639e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   163a2:	4b04      	ldr	r3, [pc, #16]	; (163b4 <SystemCoreClockUpdate+0x18>)
   163a4:	f002 0203 	and.w	r2, r2, #3
   163a8:	40d3      	lsrs	r3, r2
   163aa:	4a03      	ldr	r2, [pc, #12]	; (163b8 <SystemCoreClockUpdate+0x1c>)
   163ac:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   163ae:	4770      	bx	lr
   163b0:	40005000 	.word	0x40005000
   163b4:	07a12000 	.word	0x07a12000
   163b8:	20008350 	.word	0x20008350

000163bc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   163bc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   163be:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   163c0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   163c2:	fab2 f382 	clz	r3, r2
   163c6:	f1c3 031f 	rsb	r3, r3, #31
   163ca:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   163cc:	fa05 f403 	lsl.w	r4, r5, r3
   163d0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   163d4:	e8d0 6fef 	ldaex	r6, [r0]
   163d8:	4296      	cmp	r6, r2
   163da:	d104      	bne.n	163e6 <nrfx_flag32_alloc+0x2a>
   163dc:	e8c0 4fec 	stlex	ip, r4, [r0]
   163e0:	f1bc 0f00 	cmp.w	ip, #0
   163e4:	d1f6      	bne.n	163d4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   163e6:	d1eb      	bne.n	163c0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   163e8:	4801      	ldr	r0, [pc, #4]	; (163f0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   163ea:	700b      	strb	r3, [r1, #0]
}
   163ec:	bd70      	pop	{r4, r5, r6, pc}
   163ee:	bf00      	nop
   163f0:	0bad0000 	.word	0x0bad0000

000163f4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   163f4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   163f6:	6803      	ldr	r3, [r0, #0]
   163f8:	40cb      	lsrs	r3, r1
   163fa:	07db      	lsls	r3, r3, #31
   163fc:	d410      	bmi.n	16420 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   163fe:	2301      	movs	r3, #1
   16400:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   16402:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   16404:	ea43 0102 	orr.w	r1, r3, r2
   16408:	e8d0 4fef 	ldaex	r4, [r0]
   1640c:	4294      	cmp	r4, r2
   1640e:	d104      	bne.n	1641a <nrfx_flag32_free+0x26>
   16410:	e8c0 1fec 	stlex	ip, r1, [r0]
   16414:	f1bc 0f00 	cmp.w	ip, #0
   16418:	d1f6      	bne.n	16408 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1641a:	d1f2      	bne.n	16402 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1641c:	4801      	ldr	r0, [pc, #4]	; (16424 <nrfx_flag32_free+0x30>)
}
   1641e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16420:	4801      	ldr	r0, [pc, #4]	; (16428 <nrfx_flag32_free+0x34>)
   16422:	e7fc      	b.n	1641e <nrfx_flag32_free+0x2a>
   16424:	0bad0000 	.word	0x0bad0000
   16428:	0bad0004 	.word	0x0bad0004

0001642c <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1642c:	2200      	movs	r2, #0
{
   1642e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16430:	4b62      	ldr	r3, [pc, #392]	; (165bc <clock_stop+0x190>)
    switch (domain)
   16432:	2803      	cmp	r0, #3
   16434:	d838      	bhi.n	164a8 <clock_stop+0x7c>
   16436:	e8df f000 	tbb	[pc, r0]
   1643a:	0d02      	.short	0x0d02
   1643c:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1643e:	2102      	movs	r1, #2
   16440:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16444:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16448:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1644c:	2201      	movs	r2, #1
   1644e:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   16450:	2400      	movs	r4, #0
   16452:	e009      	b.n	16468 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   16454:	2101      	movs	r1, #1
   16456:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1645a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1645e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   16462:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16466:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   16468:	2301      	movs	r3, #1
   1646a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1646e:	2803      	cmp	r0, #3
   16470:	f200 8093 	bhi.w	1659a <clock_stop+0x16e>
   16474:	e8df f000 	tbb	[pc, r0]
   16478:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1647c:	f44f 7100 	mov.w	r1, #512	; 0x200
   16480:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16484:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16488:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1648c:	2201      	movs	r2, #1
   1648e:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   16490:	e7de      	b.n	16450 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   16492:	f44f 7180 	mov.w	r1, #256	; 0x100
   16496:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1649a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1649e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   164a2:	2201      	movs	r2, #1
   164a4:	61da      	str	r2, [r3, #28]
   164a6:	e7d3      	b.n	16450 <clock_stop+0x24>
            NRFX_ASSERT(0);
   164a8:	4945      	ldr	r1, [pc, #276]	; (165c0 <clock_stop+0x194>)
   164aa:	4846      	ldr	r0, [pc, #280]	; (165c4 <clock_stop+0x198>)
   164ac:	23d8      	movs	r3, #216	; 0xd8
   164ae:	4a46      	ldr	r2, [pc, #280]	; (165c8 <clock_stop+0x19c>)
   164b0:	f006 fb1b 	bl	1caea <assert_print>
   164b4:	21d8      	movs	r1, #216	; 0xd8
   164b6:	4844      	ldr	r0, [pc, #272]	; (165c8 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   164b8:	f006 fb10 	bl	1cadc <assert_post_action>
    switch (domain)
   164bc:	f242 7510 	movw	r5, #10000	; 0x2710
   164c0:	4e3e      	ldr	r6, [pc, #248]	; (165bc <clock_stop+0x190>)
            if (p_clk_src != NULL)
   164c2:	b194      	cbz	r4, 164ea <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   164c4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   164c8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   164cc:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   164ce:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   164d2:	03d9      	lsls	r1, r3, #15
   164d4:	d507      	bpl.n	164e6 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   164d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   164da:	2801      	cmp	r0, #1
   164dc:	d103      	bne.n	164e6 <clock_stop+0xba>
   164de:	f008 ffa5 	bl	1f42c <nrfx_busy_wait>
   164e2:	3d01      	subs	r5, #1
   164e4:	d1ed      	bne.n	164c2 <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   164e6:	b002      	add	sp, #8
   164e8:	bd70      	pop	{r4, r5, r6, pc}
   164ea:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   164ee:	03da      	lsls	r2, r3, #15
   164f0:	d5f9      	bpl.n	164e6 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   164f2:	2001      	movs	r0, #1
   164f4:	f008 ff9a 	bl	1f42c <nrfx_busy_wait>
   164f8:	3d01      	subs	r5, #1
   164fa:	d1f6      	bne.n	164ea <clock_stop+0xbe>
   164fc:	e7f3      	b.n	164e6 <clock_stop+0xba>
    switch (domain)
   164fe:	f242 7510 	movw	r5, #10000	; 0x2710
   16502:	4e2e      	ldr	r6, [pc, #184]	; (165bc <clock_stop+0x190>)
            if (p_clk_src != NULL)
   16504:	b18c      	cbz	r4, 1652a <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16506:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1650a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1650e:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16510:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   16514:	03db      	lsls	r3, r3, #15
   16516:	d5e6      	bpl.n	164e6 <clock_stop+0xba>
   16518:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1651c:	2801      	cmp	r0, #1
   1651e:	d1e2      	bne.n	164e6 <clock_stop+0xba>
   16520:	f008 ff84 	bl	1f42c <nrfx_busy_wait>
   16524:	3d01      	subs	r5, #1
   16526:	d1ed      	bne.n	16504 <clock_stop+0xd8>
   16528:	e7dd      	b.n	164e6 <clock_stop+0xba>
   1652a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1652e:	03d8      	lsls	r0, r3, #15
   16530:	d5d9      	bpl.n	164e6 <clock_stop+0xba>
   16532:	2001      	movs	r0, #1
   16534:	f008 ff7a 	bl	1f42c <nrfx_busy_wait>
   16538:	3d01      	subs	r5, #1
   1653a:	d1f6      	bne.n	1652a <clock_stop+0xfe>
   1653c:	e7d3      	b.n	164e6 <clock_stop+0xba>
    switch (domain)
   1653e:	f242 7510 	movw	r5, #10000	; 0x2710
   16542:	4e1e      	ldr	r6, [pc, #120]	; (165bc <clock_stop+0x190>)
            if (p_clk_src != NULL)
   16544:	b18c      	cbz	r4, 1656a <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   16546:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1654a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1654e:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16550:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   16554:	03d9      	lsls	r1, r3, #15
   16556:	d5c6      	bpl.n	164e6 <clock_stop+0xba>
   16558:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1655c:	2801      	cmp	r0, #1
   1655e:	d1c2      	bne.n	164e6 <clock_stop+0xba>
   16560:	f008 ff64 	bl	1f42c <nrfx_busy_wait>
   16564:	3d01      	subs	r5, #1
   16566:	d1ed      	bne.n	16544 <clock_stop+0x118>
   16568:	e7bd      	b.n	164e6 <clock_stop+0xba>
   1656a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1656e:	03da      	lsls	r2, r3, #15
   16570:	d5b9      	bpl.n	164e6 <clock_stop+0xba>
   16572:	2001      	movs	r0, #1
   16574:	f008 ff5a 	bl	1f42c <nrfx_busy_wait>
   16578:	3d01      	subs	r5, #1
   1657a:	d1f6      	bne.n	1656a <clock_stop+0x13e>
   1657c:	e7b3      	b.n	164e6 <clock_stop+0xba>
    switch (domain)
   1657e:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   16582:	4e0e      	ldr	r6, [pc, #56]	; (165bc <clock_stop+0x190>)
   16584:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   16588:	03db      	lsls	r3, r3, #15
   1658a:	d5ac      	bpl.n	164e6 <clock_stop+0xba>
   1658c:	b984      	cbnz	r4, 165b0 <clock_stop+0x184>
   1658e:	2001      	movs	r0, #1
   16590:	f008 ff4c 	bl	1f42c <nrfx_busy_wait>
   16594:	3d01      	subs	r5, #1
   16596:	d1f5      	bne.n	16584 <clock_stop+0x158>
   16598:	e7a5      	b.n	164e6 <clock_stop+0xba>
            NRFX_ASSERT(0);
   1659a:	4909      	ldr	r1, [pc, #36]	; (165c0 <clock_stop+0x194>)
   1659c:	4809      	ldr	r0, [pc, #36]	; (165c4 <clock_stop+0x198>)
   1659e:	f240 3347 	movw	r3, #839	; 0x347
   165a2:	4a0a      	ldr	r2, [pc, #40]	; (165cc <clock_stop+0x1a0>)
   165a4:	f006 faa1 	bl	1caea <assert_print>
   165a8:	f240 3147 	movw	r1, #839	; 0x347
   165ac:	4807      	ldr	r0, [pc, #28]	; (165cc <clock_stop+0x1a0>)
   165ae:	e783      	b.n	164b8 <clock_stop+0x8c>
   165b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   165b4:	2801      	cmp	r0, #1
   165b6:	d0eb      	beq.n	16590 <clock_stop+0x164>
   165b8:	e795      	b.n	164e6 <clock_stop+0xba>
   165ba:	bf00      	nop
   165bc:	40005000 	.word	0x40005000
   165c0:	00024673 	.word	0x00024673
   165c4:	00021547 	.word	0x00021547
   165c8:	00024799 	.word	0x00024799
   165cc:	000247d6 	.word	0x000247d6

000165d0 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   165d0:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   165d2:	b958      	cbnz	r0, 165ec <nrfx_clock_init+0x1c>
   165d4:	490a      	ldr	r1, [pc, #40]	; (16600 <nrfx_clock_init+0x30>)
   165d6:	480b      	ldr	r0, [pc, #44]	; (16604 <nrfx_clock_init+0x34>)
   165d8:	f240 1315 	movw	r3, #277	; 0x115
   165dc:	4a0a      	ldr	r2, [pc, #40]	; (16608 <nrfx_clock_init+0x38>)
   165de:	f006 fa84 	bl	1caea <assert_print>
   165e2:	f240 1115 	movw	r1, #277	; 0x115
   165e6:	4808      	ldr	r0, [pc, #32]	; (16608 <nrfx_clock_init+0x38>)
   165e8:	f006 fa78 	bl	1cadc <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   165ec:	4b07      	ldr	r3, [pc, #28]	; (1660c <nrfx_clock_init+0x3c>)
   165ee:	791a      	ldrb	r2, [r3, #4]
   165f0:	b922      	cbnz	r2, 165fc <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   165f2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   165f4:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   165f6:	4806      	ldr	r0, [pc, #24]	; (16610 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   165f8:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   165fa:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   165fc:	4805      	ldr	r0, [pc, #20]	; (16614 <nrfx_clock_init+0x44>)
    return err_code;
   165fe:	e7fc      	b.n	165fa <nrfx_clock_init+0x2a>
   16600:	0002480a 	.word	0x0002480a
   16604:	00021547 	.word	0x00021547
   16608:	00024799 	.word	0x00024799
   1660c:	20009b9c 	.word	0x20009b9c
   16610:	0bad0000 	.word	0x0bad0000
   16614:	0bad000c 	.word	0x0bad000c

00016618 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   16618:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1661a:	4b0f      	ldr	r3, [pc, #60]	; (16658 <nrfx_clock_enable+0x40>)
   1661c:	791b      	ldrb	r3, [r3, #4]
   1661e:	b95b      	cbnz	r3, 16638 <nrfx_clock_enable+0x20>
   16620:	490e      	ldr	r1, [pc, #56]	; (1665c <nrfx_clock_enable+0x44>)
   16622:	480f      	ldr	r0, [pc, #60]	; (16660 <nrfx_clock_enable+0x48>)
   16624:	f44f 7397 	mov.w	r3, #302	; 0x12e
   16628:	4a0e      	ldr	r2, [pc, #56]	; (16664 <nrfx_clock_enable+0x4c>)
   1662a:	f006 fa5e 	bl	1caea <assert_print>
   1662e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   16632:	480c      	ldr	r0, [pc, #48]	; (16664 <nrfx_clock_enable+0x4c>)
   16634:	f006 fa52 	bl	1cadc <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   16638:	2005      	movs	r0, #5
   1663a:	f7f6 fbd3 	bl	cde4 <arch_irq_is_enabled>
   1663e:	b910      	cbnz	r0, 16646 <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   16640:	2005      	movs	r0, #5
   16642:	f7f6 fbad 	bl	cda0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16646:	2201      	movs	r2, #1
   16648:	4b07      	ldr	r3, [pc, #28]	; (16668 <nrfx_clock_enable+0x50>)
   1664a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1664e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   16652:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   16656:	bd08      	pop	{r3, pc}
   16658:	20009b9c 	.word	0x20009b9c
   1665c:	00024818 	.word	0x00024818
   16660:	00021547 	.word	0x00021547
   16664:	00024799 	.word	0x00024799
   16668:	40005000 	.word	0x40005000

0001666c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1666c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1666e:	4b38      	ldr	r3, [pc, #224]	; (16750 <nrfx_clock_start+0xe4>)
   16670:	791b      	ldrb	r3, [r3, #4]
   16672:	b95b      	cbnz	r3, 1668c <nrfx_clock_start+0x20>
   16674:	4937      	ldr	r1, [pc, #220]	; (16754 <nrfx_clock_start+0xe8>)
   16676:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1667a:	4a37      	ldr	r2, [pc, #220]	; (16758 <nrfx_clock_start+0xec>)
   1667c:	4837      	ldr	r0, [pc, #220]	; (1675c <nrfx_clock_start+0xf0>)
   1667e:	f006 fa34 	bl	1caea <assert_print>
   16682:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   16686:	4834      	ldr	r0, [pc, #208]	; (16758 <nrfx_clock_start+0xec>)
   16688:	f006 fa28 	bl	1cadc <assert_post_action>
    switch (domain)
   1668c:	4b34      	ldr	r3, [pc, #208]	; (16760 <nrfx_clock_start+0xf4>)
   1668e:	2803      	cmp	r0, #3
   16690:	d853      	bhi.n	1673a <nrfx_clock_start+0xce>
   16692:	e8df f000 	tbb	[pc, r0]
   16696:	3002      	.short	0x3002
   16698:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1669a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1669e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   166a2:	03c9      	lsls	r1, r1, #15
   166a4:	d511      	bpl.n	166ca <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   166a6:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   166aa:	2b02      	cmp	r3, #2
   166ac:	d11c      	bne.n	166e8 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   166ae:	4a2c      	ldr	r2, [pc, #176]	; (16760 <nrfx_clock_start+0xf4>)
   166b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   166b4:	2300      	movs	r3, #0
   166b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   166ba:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   166be:	2302      	movs	r3, #2
   166c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   166c4:	2301      	movs	r3, #1
   166c6:	6093      	str	r3, [r2, #8]
}
   166c8:	e00d      	b.n	166e6 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   166ca:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   166ce:	07d2      	lsls	r2, r2, #31
   166d0:	d50f      	bpl.n	166f2 <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   166d2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   166d6:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   166da:	3a01      	subs	r2, #1
   166dc:	2a01      	cmp	r2, #1
   166de:	d805      	bhi.n	166ec <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   166e0:	2202      	movs	r2, #2
   166e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   166e6:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   166e8:	2b01      	cmp	r3, #1
   166ea:	d002      	beq.n	166f2 <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   166ec:	2000      	movs	r0, #0
   166ee:	f7ff fe9d 	bl	1642c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   166f2:	2301      	movs	r3, #1
   166f4:	e7db      	b.n	166ae <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   166f6:	2200      	movs	r2, #0
   166f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   166fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16700:	2201      	movs	r2, #1
   16702:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16706:	601a      	str	r2, [r3, #0]
}
   16708:	e7ed      	b.n	166e6 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1670a:	2200      	movs	r2, #0
   1670c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16710:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   16714:	f44f 7200 	mov.w	r2, #512	; 0x200
   16718:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1671c:	2201      	movs	r2, #1
   1671e:	621a      	str	r2, [r3, #32]
}
   16720:	e7e1      	b.n	166e6 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16722:	2200      	movs	r2, #0
   16724:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16728:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1672c:	f44f 7280 	mov.w	r2, #256	; 0x100
   16730:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16734:	2201      	movs	r2, #1
   16736:	619a      	str	r2, [r3, #24]
}
   16738:	e7d5      	b.n	166e6 <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1673a:	490a      	ldr	r1, [pc, #40]	; (16764 <nrfx_clock_start+0xf8>)
   1673c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   16740:	4a05      	ldr	r2, [pc, #20]	; (16758 <nrfx_clock_start+0xec>)
   16742:	4806      	ldr	r0, [pc, #24]	; (1675c <nrfx_clock_start+0xf0>)
   16744:	f006 f9d1 	bl	1caea <assert_print>
   16748:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1674c:	e79b      	b.n	16686 <nrfx_clock_start+0x1a>
   1674e:	bf00      	nop
   16750:	20009b9c 	.word	0x20009b9c
   16754:	00024818 	.word	0x00024818
   16758:	00024799 	.word	0x00024799
   1675c:	00021547 	.word	0x00021547
   16760:	40005000 	.word	0x40005000
   16764:	00024673 	.word	0x00024673

00016768 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   16768:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1676a:	4b09      	ldr	r3, [pc, #36]	; (16790 <nrfx_clock_stop+0x28>)
   1676c:	791b      	ldrb	r3, [r3, #4]
   1676e:	b95b      	cbnz	r3, 16788 <nrfx_clock_stop+0x20>
   16770:	4908      	ldr	r1, [pc, #32]	; (16794 <nrfx_clock_stop+0x2c>)
   16772:	4809      	ldr	r0, [pc, #36]	; (16798 <nrfx_clock_stop+0x30>)
   16774:	f240 13ad 	movw	r3, #429	; 0x1ad
   16778:	4a08      	ldr	r2, [pc, #32]	; (1679c <nrfx_clock_stop+0x34>)
   1677a:	f006 f9b6 	bl	1caea <assert_print>
   1677e:	f240 11ad 	movw	r1, #429	; 0x1ad
   16782:	4806      	ldr	r0, [pc, #24]	; (1679c <nrfx_clock_stop+0x34>)
   16784:	f006 f9aa 	bl	1cadc <assert_post_action>
    clock_stop(domain);
}
   16788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1678c:	f7ff be4e 	b.w	1642c <clock_stop>
   16790:	20009b9c 	.word	0x20009b9c
   16794:	00024818 	.word	0x00024818
   16798:	00021547 	.word	0x00021547
   1679c:	00024799 	.word	0x00024799

000167a0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   167a0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   167a2:	4b28      	ldr	r3, [pc, #160]	; (16844 <nrfx_power_clock_irq_handler+0xa4>)
   167a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   167a8:	b152      	cbz	r2, 167c0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167aa:	2000      	movs	r0, #0
   167ac:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   167b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   167b4:	2201      	movs	r2, #1
   167b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   167ba:	4b23      	ldr	r3, [pc, #140]	; (16848 <nrfx_power_clock_irq_handler+0xa8>)
   167bc:	681b      	ldr	r3, [r3, #0]
   167be:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   167c0:	4b20      	ldr	r3, [pc, #128]	; (16844 <nrfx_power_clock_irq_handler+0xa4>)
   167c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   167c6:	b18a      	cbz	r2, 167ec <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167c8:	2200      	movs	r2, #0
   167ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   167ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   167d2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   167d6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   167da:	f002 0203 	and.w	r2, r2, #3
   167de:	2a01      	cmp	r2, #1
   167e0:	f04f 0102 	mov.w	r1, #2
   167e4:	d126      	bne.n	16834 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   167e6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167ea:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   167ec:	4b15      	ldr	r3, [pc, #84]	; (16844 <nrfx_power_clock_irq_handler+0xa4>)
   167ee:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   167f2:	b162      	cbz	r2, 1680e <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167f4:	2200      	movs	r2, #0
   167f6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   167fa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   167fe:	f44f 7280 	mov.w	r2, #256	; 0x100
   16802:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   16806:	4b10      	ldr	r3, [pc, #64]	; (16848 <nrfx_power_clock_irq_handler+0xa8>)
   16808:	2004      	movs	r0, #4
   1680a:	681b      	ldr	r3, [r3, #0]
   1680c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1680e:	4b0d      	ldr	r3, [pc, #52]	; (16844 <nrfx_power_clock_irq_handler+0xa4>)
   16810:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   16814:	b1aa      	cbz	r2, 16842 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16816:	2200      	movs	r2, #0
   16818:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1681c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   16820:	f44f 7200 	mov.w	r2, #512	; 0x200
   16824:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16828:	4b07      	ldr	r3, [pc, #28]	; (16848 <nrfx_power_clock_irq_handler+0xa8>)
   1682a:	2005      	movs	r0, #5
    }
#endif
}
   1682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16830:	681b      	ldr	r3, [r3, #0]
   16832:	4718      	bx	r3
   16834:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16838:	4b03      	ldr	r3, [pc, #12]	; (16848 <nrfx_power_clock_irq_handler+0xa8>)
   1683a:	2001      	movs	r0, #1
   1683c:	681b      	ldr	r3, [r3, #0]
   1683e:	4798      	blx	r3
   16840:	e7d4      	b.n	167ec <nrfx_power_clock_irq_handler+0x4c>
}
   16842:	bd10      	pop	{r4, pc}
   16844:	40005000 	.word	0x40005000
   16848:	20009b9c 	.word	0x20009b9c

0001684c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1684c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1684e:	4801      	ldr	r0, [pc, #4]	; (16854 <nrfx_dppi_channel_alloc+0x8>)
   16850:	f7ff bdb4 	b.w	163bc <nrfx_flag32_alloc>
   16854:	20008354 	.word	0x20008354

00016858 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   16858:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1685a:	4a04      	ldr	r2, [pc, #16]	; (1686c <nrfx_dppi_channel_free+0x14>)
   1685c:	4083      	lsls	r3, r0
{
   1685e:	4601      	mov	r1, r0
   16860:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   16864:	4802      	ldr	r0, [pc, #8]	; (16870 <nrfx_dppi_channel_free+0x18>)
   16866:	f7ff bdc5 	b.w	163f4 <nrfx_flag32_free>
   1686a:	bf00      	nop
   1686c:	40017000 	.word	0x40017000
   16870:	20008354 	.word	0x20008354

00016874 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   16874:	4b03      	ldr	r3, [pc, #12]	; (16884 <pin_in_use_by_te+0x10>)
   16876:	3008      	adds	r0, #8
   16878:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1687c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16880:	4770      	bx	lr
   16882:	bf00      	nop
   16884:	20008358 	.word	0x20008358

00016888 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   16888:	4b04      	ldr	r3, [pc, #16]	; (1689c <pin_has_trigger+0x14>)
   1688a:	3008      	adds	r0, #8
   1688c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   16890:	f010 001c 	ands.w	r0, r0, #28
   16894:	bf18      	it	ne
   16896:	2001      	movne	r0, #1
   16898:	4770      	bx	lr
   1689a:	bf00      	nop
   1689c:	20008358 	.word	0x20008358

000168a0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   168a0:	4b03      	ldr	r3, [pc, #12]	; (168b0 <pin_is_output+0x10>)
   168a2:	3008      	adds	r0, #8
   168a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   168a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   168ac:	4770      	bx	lr
   168ae:	bf00      	nop
   168b0:	20008358 	.word	0x20008358

000168b4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   168b4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   168b6:	4c0d      	ldr	r4, [pc, #52]	; (168ec <call_handler+0x38>)
   168b8:	f100 0308 	add.w	r3, r0, #8
   168bc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   168c0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   168c2:	05da      	lsls	r2, r3, #23
{
   168c4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   168c6:	d507      	bpl.n	168d8 <call_handler+0x24>
   168c8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   168cc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   168d0:	6852      	ldr	r2, [r2, #4]
   168d2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   168d6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   168d8:	68a3      	ldr	r3, [r4, #8]
   168da:	b12b      	cbz	r3, 168e8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   168dc:	4631      	mov	r1, r6
   168de:	4628      	mov	r0, r5
   168e0:	68e2      	ldr	r2, [r4, #12]
    }
}
   168e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   168e6:	4718      	bx	r3
}
   168e8:	bd70      	pop	{r4, r5, r6, pc}
   168ea:	bf00      	nop
   168ec:	20008358 	.word	0x20008358

000168f0 <release_handler>:
{
   168f0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   168f2:	4a18      	ldr	r2, [pc, #96]	; (16954 <release_handler+0x64>)
   168f4:	3008      	adds	r0, #8
   168f6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   168fa:	05d9      	lsls	r1, r3, #23
   168fc:	d51d      	bpl.n	1693a <release_handler+0x4a>
   168fe:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   16902:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   16906:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1690a:	2000      	movs	r0, #0
   1690c:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   16910:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   16914:	f413 7f80 	tst.w	r3, #256	; 0x100
   16918:	d003      	beq.n	16922 <release_handler+0x32>
   1691a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1691e:	4299      	cmp	r1, r3
   16920:	d00b      	beq.n	1693a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   16922:	3001      	adds	r0, #1
   16924:	2830      	cmp	r0, #48	; 0x30
   16926:	d1f3      	bne.n	16910 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   16928:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1692a:	480b      	ldr	r0, [pc, #44]	; (16958 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1692c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   16930:	f7ff fd60 	bl	163f4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   16934:	4b09      	ldr	r3, [pc, #36]	; (1695c <release_handler+0x6c>)
   16936:	4298      	cmp	r0, r3
   16938:	d100      	bne.n	1693c <release_handler+0x4c>
}
   1693a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1693c:	4908      	ldr	r1, [pc, #32]	; (16960 <release_handler+0x70>)
   1693e:	4809      	ldr	r0, [pc, #36]	; (16964 <release_handler+0x74>)
   16940:	f44f 7399 	mov.w	r3, #306	; 0x132
   16944:	4a08      	ldr	r2, [pc, #32]	; (16968 <release_handler+0x78>)
   16946:	f006 f8d0 	bl	1caea <assert_print>
   1694a:	f44f 7199 	mov.w	r1, #306	; 0x132
   1694e:	4806      	ldr	r0, [pc, #24]	; (16968 <release_handler+0x78>)
   16950:	f006 f8c4 	bl	1cadc <assert_post_action>
   16954:	20008358 	.word	0x20008358
   16958:	200083cc 	.word	0x200083cc
   1695c:	0bad0000 	.word	0x0bad0000
   16960:	00021b39 	.word	0x00021b39
   16964:	00021547 	.word	0x00021547
   16968:	00024836 	.word	0x00024836

0001696c <pin_handler_trigger_uninit>:
{
   1696c:	b538      	push	{r3, r4, r5, lr}
   1696e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   16970:	f7ff ff80 	bl	16874 <pin_in_use_by_te>
   16974:	4c0b      	ldr	r4, [pc, #44]	; (169a4 <pin_handler_trigger_uninit+0x38>)
   16976:	f102 0508 	add.w	r5, r2, #8
   1697a:	b160      	cbz	r0, 16996 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1697c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1697e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   16982:	0b5b      	lsrs	r3, r3, #13
   16984:	009b      	lsls	r3, r3, #2
   16986:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1698a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1698e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   16992:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   16996:	4610      	mov	r0, r2
   16998:	f7ff ffaa 	bl	168f0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1699c:	2300      	movs	r3, #0
   1699e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   169a2:	bd38      	pop	{r3, r4, r5, pc}
   169a4:	20008358 	.word	0x20008358

000169a8 <nrf_gpio_pin_port_decode>:
{
   169a8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   169aa:	6802      	ldr	r2, [r0, #0]
{
   169ac:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   169ae:	4610      	mov	r0, r2
   169b0:	f008 fd3e 	bl	1f430 <nrf_gpio_pin_present_check>
   169b4:	b958      	cbnz	r0, 169ce <nrf_gpio_pin_port_decode+0x26>
   169b6:	4910      	ldr	r1, [pc, #64]	; (169f8 <nrf_gpio_pin_port_decode+0x50>)
   169b8:	f240 2347 	movw	r3, #583	; 0x247
   169bc:	4a0f      	ldr	r2, [pc, #60]	; (169fc <nrf_gpio_pin_port_decode+0x54>)
   169be:	4810      	ldr	r0, [pc, #64]	; (16a00 <nrf_gpio_pin_port_decode+0x58>)
   169c0:	f006 f893 	bl	1caea <assert_print>
   169c4:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   169c8:	480c      	ldr	r0, [pc, #48]	; (169fc <nrf_gpio_pin_port_decode+0x54>)
   169ca:	f006 f887 	bl	1cadc <assert_post_action>
    *p_pin = pin_number & 0x1F;
   169ce:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   169d2:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   169d4:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   169d6:	d00b      	beq.n	169f0 <nrf_gpio_pin_port_decode+0x48>
   169d8:	2a01      	cmp	r2, #1
   169da:	d00b      	beq.n	169f4 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   169dc:	4909      	ldr	r1, [pc, #36]	; (16a04 <nrf_gpio_pin_port_decode+0x5c>)
   169de:	f44f 7313 	mov.w	r3, #588	; 0x24c
   169e2:	4a06      	ldr	r2, [pc, #24]	; (169fc <nrf_gpio_pin_port_decode+0x54>)
   169e4:	4806      	ldr	r0, [pc, #24]	; (16a00 <nrf_gpio_pin_port_decode+0x58>)
   169e6:	f006 f880 	bl	1caea <assert_print>
   169ea:	f44f 7113 	mov.w	r1, #588	; 0x24c
   169ee:	e7eb      	b.n	169c8 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   169f0:	4805      	ldr	r0, [pc, #20]	; (16a08 <nrf_gpio_pin_port_decode+0x60>)
}
   169f2:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   169f4:	4805      	ldr	r0, [pc, #20]	; (16a0c <nrf_gpio_pin_port_decode+0x64>)
   169f6:	e7fc      	b.n	169f2 <nrf_gpio_pin_port_decode+0x4a>
   169f8:	00023dd7 	.word	0x00023dd7
   169fc:	00023da4 	.word	0x00023da4
   16a00:	00021547 	.word	0x00021547
   16a04:	00024673 	.word	0x00024673
   16a08:	40842500 	.word	0x40842500
   16a0c:	40842800 	.word	0x40842800

00016a10 <nrfx_gpiote_input_configure>:
{
   16a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a12:	4604      	mov	r4, r0
   16a14:	4617      	mov	r7, r2
   16a16:	461d      	mov	r5, r3
   16a18:	b085      	sub	sp, #20
    if (p_input_config)
   16a1a:	b1d9      	cbz	r1, 16a54 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   16a1c:	f008 fd19 	bl	1f452 <pin_is_task_output>
   16a20:	bb00      	cbnz	r0, 16a64 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   16a22:	460b      	mov	r3, r1
   16a24:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   16a28:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   16a2c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   16a30:	f10d 020f 	add.w	r2, sp, #15
   16a34:	f10d 010e 	add.w	r1, sp, #14
   16a38:	4620      	mov	r0, r4
   16a3a:	f008 fd15 	bl	1f468 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   16a3e:	4a44      	ldr	r2, [pc, #272]	; (16b50 <nrfx_gpiote_input_configure+0x140>)
   16a40:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   16a44:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   16a48:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   16a4c:	f043 0301 	orr.w	r3, r3, #1
   16a50:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   16a54:	b36f      	cbz	r7, 16ab2 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   16a56:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   16a58:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   16a5a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   16a5c:	f7ff ff20 	bl	168a0 <pin_is_output>
   16a60:	b110      	cbz	r0, 16a68 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   16a62:	b1da      	cbz	r2, 16a9c <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   16a64:	483b      	ldr	r0, [pc, #236]	; (16b54 <nrfx_gpiote_input_configure+0x144>)
   16a66:	e026      	b.n	16ab6 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   16a68:	4839      	ldr	r0, [pc, #228]	; (16b50 <nrfx_gpiote_input_configure+0x140>)
   16a6a:	f104 0c08 	add.w	ip, r4, #8
   16a6e:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   16a72:	f021 0120 	bic.w	r1, r1, #32
   16a76:	04c9      	lsls	r1, r1, #19
   16a78:	0cc9      	lsrs	r1, r1, #19
   16a7a:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   16a7e:	b16a      	cbz	r2, 16a9c <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   16a80:	2e03      	cmp	r6, #3
   16a82:	d8ef      	bhi.n	16a64 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   16a84:	687b      	ldr	r3, [r7, #4]
   16a86:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   16a88:	00ba      	lsls	r2, r7, #2
   16a8a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16a8e:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   16a92:	b996      	cbnz	r6, 16aba <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   16a94:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   16a98:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   16a9c:	4a2c      	ldr	r2, [pc, #176]	; (16b50 <nrfx_gpiote_input_configure+0x140>)
   16a9e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   16aa2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   16aa6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   16aaa:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   16aae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   16ab2:	bb15      	cbnz	r5, 16afa <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   16ab4:	4828      	ldr	r0, [pc, #160]	; (16b58 <nrfx_gpiote_input_configure+0x148>)
}
   16ab6:	b005      	add	sp, #20
   16ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16aba:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   16abe:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   16ac2:	f023 0303 	bic.w	r3, r3, #3
   16ac6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16aca:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   16ace:	f041 0120 	orr.w	r1, r1, #32
   16ad2:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   16ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   16ada:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16ade:	0223      	lsls	r3, r4, #8
   16ae0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   16ae4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   16ae8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   16aec:	ea43 030e 	orr.w	r3, r3, lr
   16af0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   16af4:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   16af8:	e7d0      	b.n	16a9c <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   16afa:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   16afc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   16b00:	f7ff fef6 	bl	168f0 <release_handler>
    if (!handler)
   16b04:	2e00      	cmp	r6, #0
   16b06:	d0d5      	beq.n	16ab4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16b08:	4d11      	ldr	r5, [pc, #68]	; (16b50 <nrfx_gpiote_input_configure+0x140>)
   16b0a:	e9d5 2300 	ldrd	r2, r3, [r5]
   16b0e:	4296      	cmp	r6, r2
   16b10:	d101      	bne.n	16b16 <nrfx_gpiote_input_configure+0x106>
   16b12:	429f      	cmp	r7, r3
   16b14:	d019      	beq.n	16b4a <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   16b16:	4811      	ldr	r0, [pc, #68]	; (16b5c <nrfx_gpiote_input_configure+0x14c>)
   16b18:	f10d 010f 	add.w	r1, sp, #15
   16b1c:	f7ff fc4e 	bl	163bc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   16b20:	4b0d      	ldr	r3, [pc, #52]	; (16b58 <nrfx_gpiote_input_configure+0x148>)
   16b22:	4298      	cmp	r0, r3
   16b24:	d1c7      	bne.n	16ab6 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   16b26:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   16b2a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16b2e:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   16b32:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16b34:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   16b38:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16b3c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   16b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16b44:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   16b48:	e7b4      	b.n	16ab4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16b4a:	2200      	movs	r2, #0
   16b4c:	e7ed      	b.n	16b2a <nrfx_gpiote_input_configure+0x11a>
   16b4e:	bf00      	nop
   16b50:	20008358 	.word	0x20008358
   16b54:	0bad0004 	.word	0x0bad0004
   16b58:	0bad0000 	.word	0x0bad0000
   16b5c:	200083cc 	.word	0x200083cc

00016b60 <nrfx_gpiote_output_configure>:
{
   16b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b62:	4604      	mov	r4, r0
   16b64:	4615      	mov	r5, r2
   16b66:	b085      	sub	sp, #20
    if (p_config)
   16b68:	b321      	cbz	r1, 16bb4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   16b6a:	f7ff fe99 	bl	168a0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   16b6e:	b920      	cbnz	r0, 16b7a <nrfx_gpiote_output_configure+0x1a>
   16b70:	4620      	mov	r0, r4
   16b72:	f7ff fe7f 	bl	16874 <pin_in_use_by_te>
   16b76:	2800      	cmp	r0, #0
   16b78:	d161      	bne.n	16c3e <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   16b7a:	4620      	mov	r0, r4
   16b7c:	f7ff fe84 	bl	16888 <pin_has_trigger>
   16b80:	b110      	cbz	r0, 16b88 <nrfx_gpiote_output_configure+0x28>
   16b82:	784b      	ldrb	r3, [r1, #1]
   16b84:	2b01      	cmp	r3, #1
   16b86:	d05a      	beq.n	16c3e <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   16b88:	2301      	movs	r3, #1
   16b8a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   16b8e:	2300      	movs	r3, #0
   16b90:	1c4a      	adds	r2, r1, #1
   16b92:	e9cd 1300 	strd	r1, r3, [sp]
   16b96:	4620      	mov	r0, r4
   16b98:	1c8b      	adds	r3, r1, #2
   16b9a:	f10d 010f 	add.w	r1, sp, #15
   16b9e:	f008 fc63 	bl	1f468 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   16ba2:	4a28      	ldr	r2, [pc, #160]	; (16c44 <nrfx_gpiote_output_configure+0xe4>)
   16ba4:	f104 0108 	add.w	r1, r4, #8
   16ba8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   16bac:	f043 0303 	orr.w	r3, r3, #3
   16bb0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   16bb4:	b915      	cbnz	r5, 16bbc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   16bb6:	4824      	ldr	r0, [pc, #144]	; (16c48 <nrfx_gpiote_output_configure+0xe8>)
}
   16bb8:	b005      	add	sp, #20
   16bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   16bbc:	4620      	mov	r0, r4
   16bbe:	f7ff fe6f 	bl	168a0 <pin_is_output>
        if (pin_is_input(pin))
   16bc2:	2800      	cmp	r0, #0
   16bc4:	d03b      	beq.n	16c3e <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   16bc6:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   16bca:	2300      	movs	r3, #0
   16bcc:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   16bce:	4e1d      	ldr	r6, [pc, #116]	; (16c44 <nrfx_gpiote_output_configure+0xe4>)
   16bd0:	f104 0708 	add.w	r7, r4, #8
   16bd4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   16bd8:	0089      	lsls	r1, r1, #2
   16bda:	f020 0020 	bic.w	r0, r0, #32
   16bde:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16be2:	04c0      	lsls	r0, r0, #19
   16be4:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   16be8:	0cc0      	lsrs	r0, r0, #19
   16bea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   16bee:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   16bf2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   16bf6:	786a      	ldrb	r2, [r5, #1]
   16bf8:	2a00      	cmp	r2, #0
   16bfa:	d0dc      	beq.n	16bb6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   16bfc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   16c00:	78ad      	ldrb	r5, [r5, #2]
   16c02:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   16c06:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   16c0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16c0e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   16c12:	0223      	lsls	r3, r4, #8
   16c14:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   16c18:	0412      	lsls	r2, r2, #16
   16c1a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16c1e:	ea43 030e 	orr.w	r3, r3, lr
   16c22:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   16c24:	052a      	lsls	r2, r5, #20
   16c26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   16c2a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16c2e:	4313      	orrs	r3, r2
   16c30:	f040 0020 	orr.w	r0, r0, #32
   16c34:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   16c38:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   16c3c:	e7bb      	b.n	16bb6 <nrfx_gpiote_output_configure+0x56>
{
   16c3e:	4803      	ldr	r0, [pc, #12]	; (16c4c <nrfx_gpiote_output_configure+0xec>)
   16c40:	e7ba      	b.n	16bb8 <nrfx_gpiote_output_configure+0x58>
   16c42:	bf00      	nop
   16c44:	20008358 	.word	0x20008358
   16c48:	0bad0000 	.word	0x0bad0000
   16c4c:	0bad0004 	.word	0x0bad0004

00016c50 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   16c50:	4b01      	ldr	r3, [pc, #4]	; (16c58 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   16c52:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   16c56:	4770      	bx	lr
   16c58:	20008358 	.word	0x20008358

00016c5c <nrfx_gpiote_channel_get>:
{
   16c5c:	4602      	mov	r2, r0
   16c5e:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   16c60:	b959      	cbnz	r1, 16c7a <nrfx_gpiote_channel_get+0x1e>
   16c62:	490c      	ldr	r1, [pc, #48]	; (16c94 <nrfx_gpiote_channel_get+0x38>)
   16c64:	480c      	ldr	r0, [pc, #48]	; (16c98 <nrfx_gpiote_channel_get+0x3c>)
   16c66:	f240 2335 	movw	r3, #565	; 0x235
   16c6a:	4a0c      	ldr	r2, [pc, #48]	; (16c9c <nrfx_gpiote_channel_get+0x40>)
   16c6c:	f005 ff3d 	bl	1caea <assert_print>
   16c70:	f240 2135 	movw	r1, #565	; 0x235
   16c74:	4809      	ldr	r0, [pc, #36]	; (16c9c <nrfx_gpiote_channel_get+0x40>)
   16c76:	f005 ff31 	bl	1cadc <assert_post_action>
    if (pin_in_use_by_te(pin))
   16c7a:	f7ff fdfb 	bl	16874 <pin_in_use_by_te>
   16c7e:	b138      	cbz	r0, 16c90 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16c80:	4b07      	ldr	r3, [pc, #28]	; (16ca0 <nrfx_gpiote_channel_get+0x44>)
   16c82:	3208      	adds	r2, #8
   16c84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   16c88:	4806      	ldr	r0, [pc, #24]	; (16ca4 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16c8a:	0b5b      	lsrs	r3, r3, #13
   16c8c:	700b      	strb	r3, [r1, #0]
}
   16c8e:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16c90:	4805      	ldr	r0, [pc, #20]	; (16ca8 <nrfx_gpiote_channel_get+0x4c>)
   16c92:	e7fc      	b.n	16c8e <nrfx_gpiote_channel_get+0x32>
   16c94:	00024874 	.word	0x00024874
   16c98:	00021547 	.word	0x00021547
   16c9c:	00024836 	.word	0x00024836
   16ca0:	20008358 	.word	0x20008358
   16ca4:	0bad0000 	.word	0x0bad0000
   16ca8:	0bad0004 	.word	0x0bad0004

00016cac <nrfx_gpiote_init>:
{
   16cac:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16cae:	4c0f      	ldr	r4, [pc, #60]	; (16cec <nrfx_gpiote_init+0x40>)
   16cb0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   16cb4:	b9bd      	cbnz	r5, 16ce6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   16cb6:	2260      	movs	r2, #96	; 0x60
   16cb8:	4629      	mov	r1, r5
   16cba:	f104 0010 	add.w	r0, r4, #16
   16cbe:	f006 ff2e 	bl	1db1e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   16cc2:	202f      	movs	r0, #47	; 0x2f
   16cc4:	f7f6 f86c 	bl	cda0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16cc8:	4b09      	ldr	r3, [pc, #36]	; (16cf0 <nrfx_gpiote_init+0x44>)
    return err_code;
   16cca:	480a      	ldr	r0, [pc, #40]	; (16cf4 <nrfx_gpiote_init+0x48>)
   16ccc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   16cd0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   16cd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16cd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16cdc:	2301      	movs	r3, #1
   16cde:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   16ce2:	6763      	str	r3, [r4, #116]	; 0x74
}
   16ce4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   16ce6:	4804      	ldr	r0, [pc, #16]	; (16cf8 <nrfx_gpiote_init+0x4c>)
   16ce8:	e7fc      	b.n	16ce4 <nrfx_gpiote_init+0x38>
   16cea:	bf00      	nop
   16cec:	20008358 	.word	0x20008358
   16cf0:	4002f000 	.word	0x4002f000
   16cf4:	0bad0000 	.word	0x0bad0000
   16cf8:	0bad0005 	.word	0x0bad0005

00016cfc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   16cfc:	4b03      	ldr	r3, [pc, #12]	; (16d0c <nrfx_gpiote_is_init+0x10>)
   16cfe:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   16d02:	3800      	subs	r0, #0
   16d04:	bf18      	it	ne
   16d06:	2001      	movne	r0, #1
   16d08:	4770      	bx	lr
   16d0a:	bf00      	nop
   16d0c:	20008358 	.word	0x20008358

00016d10 <nrfx_gpiote_channel_free>:
{
   16d10:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   16d12:	4801      	ldr	r0, [pc, #4]	; (16d18 <nrfx_gpiote_channel_free+0x8>)
   16d14:	f7ff bb6e 	b.w	163f4 <nrfx_flag32_free>
   16d18:	200083c8 	.word	0x200083c8

00016d1c <nrfx_gpiote_channel_alloc>:
{
   16d1c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   16d1e:	4801      	ldr	r0, [pc, #4]	; (16d24 <nrfx_gpiote_channel_alloc+0x8>)
   16d20:	f7ff bb4c 	b.w	163bc <nrfx_flag32_alloc>
   16d24:	200083c8 	.word	0x200083c8

00016d28 <nrfx_gpiote_trigger_enable>:
{
   16d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16d2a:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   16d2c:	f7ff fdac 	bl	16888 <pin_has_trigger>
   16d30:	b958      	cbnz	r0, 16d4a <nrfx_gpiote_trigger_enable+0x22>
   16d32:	492b      	ldr	r1, [pc, #172]	; (16de0 <nrfx_gpiote_trigger_enable+0xb8>)
   16d34:	f240 33df 	movw	r3, #991	; 0x3df
   16d38:	4a2a      	ldr	r2, [pc, #168]	; (16de4 <nrfx_gpiote_trigger_enable+0xbc>)
   16d3a:	482b      	ldr	r0, [pc, #172]	; (16de8 <nrfx_gpiote_trigger_enable+0xc0>)
   16d3c:	f005 fed5 	bl	1caea <assert_print>
   16d40:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   16d44:	4827      	ldr	r0, [pc, #156]	; (16de4 <nrfx_gpiote_trigger_enable+0xbc>)
   16d46:	f005 fec9 	bl	1cadc <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16d4a:	4620      	mov	r0, r4
   16d4c:	f7ff fd92 	bl	16874 <pin_in_use_by_te>
   16d50:	4a26      	ldr	r2, [pc, #152]	; (16dec <nrfx_gpiote_trigger_enable+0xc4>)
   16d52:	f104 0508 	add.w	r5, r4, #8
   16d56:	b1e0      	cbz	r0, 16d92 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   16d58:	4620      	mov	r0, r4
   16d5a:	f7ff fda1 	bl	168a0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16d5e:	b9c0      	cbnz	r0, 16d92 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16d60:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   16d64:	4c22      	ldr	r4, [pc, #136]	; (16df0 <nrfx_gpiote_trigger_enable+0xc8>)
   16d66:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   16d68:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16d6a:	50e0      	str	r0, [r4, r3]
   16d6c:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16d72:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   16d76:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   16d7a:	f040 0001 	orr.w	r0, r0, #1
   16d7e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   16d82:	b121      	cbz	r1, 16d8e <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   16d84:	2301      	movs	r3, #1
   16d86:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   16d88:	4a1a      	ldr	r2, [pc, #104]	; (16df4 <nrfx_gpiote_trigger_enable+0xcc>)
   16d8a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16d8e:	b003      	add	sp, #12
   16d90:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   16d92:	b949      	cbnz	r1, 16da8 <nrfx_gpiote_trigger_enable+0x80>
   16d94:	4918      	ldr	r1, [pc, #96]	; (16df8 <nrfx_gpiote_trigger_enable+0xd0>)
   16d96:	f240 33ee 	movw	r3, #1006	; 0x3ee
   16d9a:	4a12      	ldr	r2, [pc, #72]	; (16de4 <nrfx_gpiote_trigger_enable+0xbc>)
   16d9c:	4812      	ldr	r0, [pc, #72]	; (16de8 <nrfx_gpiote_trigger_enable+0xc0>)
   16d9e:	f005 fea4 	bl	1caea <assert_print>
   16da2:	f240 31ee 	movw	r1, #1006	; 0x3ee
   16da6:	e7cd      	b.n	16d44 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16da8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   16dac:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   16db0:	2b04      	cmp	r3, #4
   16db2:	d011      	beq.n	16dd8 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   16db4:	2b05      	cmp	r3, #5
   16db6:	d011      	beq.n	16ddc <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16db8:	a801      	add	r0, sp, #4
   16dba:	9401      	str	r4, [sp, #4]
   16dbc:	f7ff fdf4 	bl	169a8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16dc0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   16dc2:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16dc4:	40d9      	lsrs	r1, r3
   16dc6:	f001 0101 	and.w	r1, r1, #1
   16dca:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   16dcc:	4620      	mov	r0, r4
}
   16dce:	b003      	add	sp, #12
   16dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   16dd4:	f008 bb95 	b.w	1f502 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   16dd8:	2103      	movs	r1, #3
   16dda:	e7f7      	b.n	16dcc <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   16ddc:	2102      	movs	r1, #2
   16dde:	e7f5      	b.n	16dcc <nrfx_gpiote_trigger_enable+0xa4>
   16de0:	0002487e 	.word	0x0002487e
   16de4:	00024836 	.word	0x00024836
   16de8:	00021547 	.word	0x00021547
   16dec:	20008358 	.word	0x20008358
   16df0:	4002f100 	.word	0x4002f100
   16df4:	4002f000 	.word	0x4002f000
   16df8:	00024893 	.word	0x00024893

00016dfc <nrfx_gpiote_trigger_disable>:
{
   16dfc:	b508      	push	{r3, lr}
   16dfe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16e00:	f7ff fd38 	bl	16874 <pin_in_use_by_te>
   16e04:	b1c8      	cbz	r0, 16e3a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   16e06:	4610      	mov	r0, r2
   16e08:	f7ff fd4a 	bl	168a0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16e0c:	b9a8      	cbnz	r0, 16e3a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16e0e:	4b0e      	ldr	r3, [pc, #56]	; (16e48 <nrfx_gpiote_trigger_disable+0x4c>)
   16e10:	3208      	adds	r2, #8
   16e12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   16e16:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16e18:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   16e1a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   16e1c:	490b      	ldr	r1, [pc, #44]	; (16e4c <nrfx_gpiote_trigger_disable+0x50>)
   16e1e:	009b      	lsls	r3, r3, #2
   16e20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16e24:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16e28:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   16e2c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16e30:	f022 0203 	bic.w	r2, r2, #3
   16e34:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   16e38:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16e3a:	2100      	movs	r1, #0
}
   16e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16e40:	4610      	mov	r0, r2
   16e42:	f008 bb5e 	b.w	1f502 <nrf_gpio_cfg_sense_set>
   16e46:	bf00      	nop
   16e48:	20008358 	.word	0x20008358
   16e4c:	4002f000 	.word	0x4002f000

00016e50 <nrfx_gpiote_pin_uninit>:
{
   16e50:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   16e52:	4b10      	ldr	r3, [pc, #64]	; (16e94 <nrfx_gpiote_pin_uninit+0x44>)
   16e54:	f100 0208 	add.w	r2, r0, #8
   16e58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   16e5c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   16e5e:	07db      	lsls	r3, r3, #31
   16e60:	d516      	bpl.n	16e90 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   16e62:	f7ff ffcb 	bl	16dfc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   16e66:	4620      	mov	r0, r4
   16e68:	f7ff fd80 	bl	1696c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16e6c:	a801      	add	r0, sp, #4
   16e6e:	9401      	str	r4, [sp, #4]
   16e70:	f7ff fd9a 	bl	169a8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   16e74:	9b01      	ldr	r3, [sp, #4]
   16e76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16e7a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   16e7e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   16e82:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   16e86:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   16e8a:	4803      	ldr	r0, [pc, #12]	; (16e98 <nrfx_gpiote_pin_uninit+0x48>)
}
   16e8c:	b002      	add	sp, #8
   16e8e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16e90:	4802      	ldr	r0, [pc, #8]	; (16e9c <nrfx_gpiote_pin_uninit+0x4c>)
   16e92:	e7fb      	b.n	16e8c <nrfx_gpiote_pin_uninit+0x3c>
   16e94:	20008358 	.word	0x20008358
   16e98:	0bad0000 	.word	0x0bad0000
   16e9c:	0bad0004 	.word	0x0bad0004

00016ea0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   16ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   16ea4:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   16ea6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16ea8:	4634      	mov	r4, r6
{
   16eaa:	4b64      	ldr	r3, [pc, #400]	; (1703c <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   16eac:	4864      	ldr	r0, [pc, #400]	; (17040 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16eae:	4965      	ldr	r1, [pc, #404]	; (17044 <nrfx_gpiote_irq_handler+0x1a4>)
{
   16eb0:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16eb2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   16eb4:	b135      	cbz	r5, 16ec4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   16eb6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   16eba:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16ebc:	bf1e      	ittt	ne
   16ebe:	601c      	strne	r4, [r3, #0]
   16ec0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   16ec2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16ec4:	3304      	adds	r3, #4
   16ec6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   16ec8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16ecc:	d1f1      	bne.n	16eb2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16ece:	f8df a170 	ldr.w	sl, [pc, #368]	; 17040 <nrfx_gpiote_irq_handler+0x1a0>
   16ed2:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   16ed6:	2b00      	cmp	r3, #0
   16ed8:	f000 8093 	beq.w	17002 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   16edc:	f8df 8168 	ldr.w	r8, [pc, #360]	; 17048 <nrfx_gpiote_irq_handler+0x1a8>
   16ee0:	f8d8 3020 	ldr.w	r3, [r8, #32]
   16ee4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   16ee6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   16eea:	4b58      	ldr	r3, [pc, #352]	; (1704c <nrfx_gpiote_irq_handler+0x1ac>)
   16eec:	6a1a      	ldr	r2, [r3, #32]
   16eee:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   16ef0:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   16ef2:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   16ef6:	f10d 0b10 	add.w	fp, sp, #16
   16efa:	ea4f 1349 	mov.w	r3, r9, lsl #5
   16efe:	9300      	str	r3, [sp, #0]
   16f00:	e04a      	b.n	16f98 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   16f02:	fa94 f4a4 	rbit	r4, r4
   16f06:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   16f0a:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16f0c:	4a50      	ldr	r2, [pc, #320]	; (17050 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   16f0e:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16f10:	f104 0308 	add.w	r3, r4, #8
   16f14:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   16f18:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   16f1a:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   16f1c:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   16f20:	fa03 f101 	lsl.w	r1, r3, r1
   16f24:	f81b 3000 	ldrb.w	r3, [fp, r0]
   16f28:	08ba      	lsrs	r2, r7, #2
   16f2a:	ea23 0301 	bic.w	r3, r3, r1
   16f2e:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16f32:	a803      	add	r0, sp, #12
   16f34:	9201      	str	r2, [sp, #4]
   16f36:	9403      	str	r4, [sp, #12]
   16f38:	f7ff fd36 	bl	169a8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16f3c:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   16f3e:	9a01      	ldr	r2, [sp, #4]
   16f40:	3380      	adds	r3, #128	; 0x80
   16f42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16f46:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   16f4a:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16f4c:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   16f4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   16f52:	d52b      	bpl.n	16fac <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   16f54:	4639      	mov	r1, r7
   16f56:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16f58:	b2dd      	uxtb	r5, r3
   16f5a:	f7ff fcab 	bl	168b4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16f5e:	a803      	add	r0, sp, #12
   16f60:	9403      	str	r4, [sp, #12]
   16f62:	f7ff fd21 	bl	169a8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16f66:	9b03      	ldr	r3, [sp, #12]
   16f68:	3380      	adds	r3, #128	; 0x80
   16f6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   16f6e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   16f72:	429d      	cmp	r5, r3
   16f74:	d107      	bne.n	16f86 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   16f76:	2100      	movs	r1, #0
   16f78:	4620      	mov	r0, r4
   16f7a:	f008 fac2 	bl	1f502 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   16f7e:	4629      	mov	r1, r5
   16f80:	4620      	mov	r0, r4
   16f82:	f008 fabe 	bl	1f502 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16f86:	a803      	add	r0, sp, #12
   16f88:	9403      	str	r4, [sp, #12]
   16f8a:	f7ff fd0d 	bl	169a8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   16f8e:	2201      	movs	r2, #1
   16f90:	9b03      	ldr	r3, [sp, #12]
   16f92:	fa02 f303 	lsl.w	r3, r2, r3
   16f96:	6203      	str	r3, [r0, #32]
            while (latch[i])
   16f98:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   16f9c:	2c00      	cmp	r4, #0
   16f9e:	d1b0      	bne.n	16f02 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   16fa0:	f1b9 0f00 	cmp.w	r9, #0
   16fa4:	d11d      	bne.n	16fe2 <nrfx_gpiote_irq_handler+0x142>
   16fa6:	f04f 0901 	mov.w	r9, #1
   16faa:	e7a6      	b.n	16efa <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   16fac:	2b02      	cmp	r3, #2
   16fae:	d10c      	bne.n	16fca <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   16fb0:	2103      	movs	r1, #3
   16fb2:	4620      	mov	r0, r4
   16fb4:	f008 faa5 	bl	1f502 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16fb8:	f005 0305 	and.w	r3, r5, #5
   16fbc:	2b01      	cmp	r3, #1
   16fbe:	d1e2      	bne.n	16f86 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   16fc0:	4639      	mov	r1, r7
   16fc2:	4620      	mov	r0, r4
   16fc4:	f7ff fc76 	bl	168b4 <call_handler>
   16fc8:	e7dd      	b.n	16f86 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   16fca:	2102      	movs	r1, #2
   16fcc:	4620      	mov	r0, r4
   16fce:	9301      	str	r3, [sp, #4]
   16fd0:	f008 fa97 	bl	1f502 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16fd4:	2d03      	cmp	r5, #3
   16fd6:	d0f3      	beq.n	16fc0 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16fd8:	9b01      	ldr	r3, [sp, #4]
   16fda:	2b03      	cmp	r3, #3
   16fdc:	d1d3      	bne.n	16f86 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   16fde:	2d02      	cmp	r5, #2
   16fe0:	e7ed      	b.n	16fbe <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16fe2:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   16fe6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   16fea:	f8d8 3020 	ldr.w	r3, [r8, #32]
   16fee:	4917      	ldr	r1, [pc, #92]	; (1704c <nrfx_gpiote_irq_handler+0x1ac>)
   16ff0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   16ff2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   16ff6:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   16ff8:	4313      	orrs	r3, r2
   16ffa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   16ffc:	620a      	str	r2, [r1, #32]
   16ffe:	f47f af78 	bne.w	16ef2 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   17002:	2401      	movs	r4, #1
    while (mask)
   17004:	b916      	cbnz	r6, 1700c <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   17006:	b007      	add	sp, #28
   17008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1700c:	fa96 f3a6 	rbit	r3, r6
   17010:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   17014:	fa04 f203 	lsl.w	r2, r4, r3
   17018:	009b      	lsls	r3, r3, #2
   1701a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1701e:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17022:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   17026:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1702a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1702e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   17032:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   17036:	f7ff fc3d 	bl	168b4 <call_handler>
   1703a:	e7e3      	b.n	17004 <nrfx_gpiote_irq_handler+0x164>
   1703c:	4002f100 	.word	0x4002f100
   17040:	4002f000 	.word	0x4002f000
   17044:	4002f120 	.word	0x4002f120
   17048:	40842500 	.word	0x40842500
   1704c:	40842800 	.word	0x40842800
   17050:	20008358 	.word	0x20008358

00017054 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   17054:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17056:	4c08      	ldr	r4, [pc, #32]	; (17078 <nrfx_ipc_init+0x24>)
{
   17058:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1705a:	7923      	ldrb	r3, [r4, #4]
{
   1705c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1705e:	b943      	cbnz	r3, 17072 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   17060:	202a      	movs	r0, #42	; 0x2a
   17062:	f7f5 fe9d 	bl	cda0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17066:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   17068:	4804      	ldr	r0, [pc, #16]	; (1707c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1706a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1706c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1706e:	60a5      	str	r5, [r4, #8]
}
   17070:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   17072:	4803      	ldr	r0, [pc, #12]	; (17080 <nrfx_ipc_init+0x2c>)
   17074:	e7fc      	b.n	17070 <nrfx_ipc_init+0x1c>
   17076:	bf00      	nop
   17078:	20009ba4 	.word	0x20009ba4
   1707c:	0bad0000 	.word	0x0bad0000
   17080:	0bad000c 	.word	0x0bad000c

00017084 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   17084:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   17086:	b948      	cbnz	r0, 1709c <nrfx_ipc_config_load+0x18>
   17088:	4919      	ldr	r1, [pc, #100]	; (170f0 <nrfx_ipc_config_load+0x6c>)
   1708a:	2345      	movs	r3, #69	; 0x45
   1708c:	4a19      	ldr	r2, [pc, #100]	; (170f4 <nrfx_ipc_config_load+0x70>)
   1708e:	481a      	ldr	r0, [pc, #104]	; (170f8 <nrfx_ipc_config_load+0x74>)
   17090:	f005 fd2b 	bl	1caea <assert_print>
   17094:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17096:	4817      	ldr	r0, [pc, #92]	; (170f4 <nrfx_ipc_config_load+0x70>)
   17098:	f005 fd20 	bl	1cadc <assert_post_action>
   1709c:	4b17      	ldr	r3, [pc, #92]	; (170fc <nrfx_ipc_config_load+0x78>)
   1709e:	791b      	ldrb	r3, [r3, #4]
   170a0:	2b01      	cmp	r3, #1
   170a2:	d007      	beq.n	170b4 <nrfx_ipc_config_load+0x30>
   170a4:	4916      	ldr	r1, [pc, #88]	; (17100 <nrfx_ipc_config_load+0x7c>)
   170a6:	2346      	movs	r3, #70	; 0x46
   170a8:	4a12      	ldr	r2, [pc, #72]	; (170f4 <nrfx_ipc_config_load+0x70>)
   170aa:	4813      	ldr	r0, [pc, #76]	; (170f8 <nrfx_ipc_config_load+0x74>)
   170ac:	f005 fd1d 	bl	1caea <assert_print>
   170b0:	2146      	movs	r1, #70	; 0x46
   170b2:	e7f0      	b.n	17096 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   170b4:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   170b6:	4a13      	ldr	r2, [pc, #76]	; (17104 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   170b8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   170bc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   170c0:	3301      	adds	r3, #1
   170c2:	2b10      	cmp	r3, #16
   170c4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   170c8:	d1f6      	bne.n	170b8 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   170ca:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   170cc:	4a0d      	ldr	r2, [pc, #52]	; (17104 <nrfx_ipc_config_load+0x80>)
   170ce:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   170d2:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   170d6:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   170da:	3301      	adds	r3, #1
   170dc:	2b10      	cmp	r3, #16
   170de:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   170e2:	d1f6      	bne.n	170d2 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   170e4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   170e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   170ec:	bd38      	pop	{r3, r4, r5, pc}
   170ee:	bf00      	nop
   170f0:	000248d9 	.word	0x000248d9
   170f4:	0002489e 	.word	0x0002489e
   170f8:	00021547 	.word	0x00021547
   170fc:	20009ba4 	.word	0x20009ba4
   17100:	000248e2 	.word	0x000248e2
   17104:	4002a000 	.word	0x4002a000

00017108 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   17108:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1710a:	4b09      	ldr	r3, [pc, #36]	; (17130 <nrfx_ipc_receive_event_enable+0x28>)
   1710c:	791b      	ldrb	r3, [r3, #4]
   1710e:	2b01      	cmp	r3, #1
   17110:	d009      	beq.n	17126 <nrfx_ipc_receive_event_enable+0x1e>
   17112:	4908      	ldr	r1, [pc, #32]	; (17134 <nrfx_ipc_receive_event_enable+0x2c>)
   17114:	4808      	ldr	r0, [pc, #32]	; (17138 <nrfx_ipc_receive_event_enable+0x30>)
   17116:	236b      	movs	r3, #107	; 0x6b
   17118:	4a08      	ldr	r2, [pc, #32]	; (1713c <nrfx_ipc_receive_event_enable+0x34>)
   1711a:	f005 fce6 	bl	1caea <assert_print>
   1711e:	216b      	movs	r1, #107	; 0x6b
   17120:	4806      	ldr	r0, [pc, #24]	; (1713c <nrfx_ipc_receive_event_enable+0x34>)
   17122:	f005 fcdb 	bl	1cadc <assert_post_action>
   17126:	4a06      	ldr	r2, [pc, #24]	; (17140 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   17128:	4083      	lsls	r3, r0
   1712a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1712e:	bd08      	pop	{r3, pc}
   17130:	20009ba4 	.word	0x20009ba4
   17134:	000248e2 	.word	0x000248e2
   17138:	00021547 	.word	0x00021547
   1713c:	0002489e 	.word	0x0002489e
   17140:	4002a000 	.word	0x4002a000

00017144 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   17144:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17146:	4b09      	ldr	r3, [pc, #36]	; (1716c <nrfx_ipc_receive_event_disable+0x28>)
   17148:	791b      	ldrb	r3, [r3, #4]
   1714a:	2b01      	cmp	r3, #1
   1714c:	d009      	beq.n	17162 <nrfx_ipc_receive_event_disable+0x1e>
   1714e:	4908      	ldr	r1, [pc, #32]	; (17170 <nrfx_ipc_receive_event_disable+0x2c>)
   17150:	4808      	ldr	r0, [pc, #32]	; (17174 <nrfx_ipc_receive_event_disable+0x30>)
   17152:	2371      	movs	r3, #113	; 0x71
   17154:	4a08      	ldr	r2, [pc, #32]	; (17178 <nrfx_ipc_receive_event_disable+0x34>)
   17156:	f005 fcc8 	bl	1caea <assert_print>
   1715a:	2171      	movs	r1, #113	; 0x71
   1715c:	4806      	ldr	r0, [pc, #24]	; (17178 <nrfx_ipc_receive_event_disable+0x34>)
   1715e:	f005 fcbd 	bl	1cadc <assert_post_action>
    p_reg->INTENCLR = mask;
   17162:	4a06      	ldr	r2, [pc, #24]	; (1717c <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   17164:	4083      	lsls	r3, r0
   17166:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1716a:	bd08      	pop	{r3, pc}
   1716c:	20009ba4 	.word	0x20009ba4
   17170:	000248e2 	.word	0x000248e2
   17174:	00021547 	.word	0x00021547
   17178:	0002489e 	.word	0x0002489e
   1717c:	4002a000 	.word	0x4002a000

00017180 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   17180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   17182:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17184:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   17186:	4b12      	ldr	r3, [pc, #72]	; (171d0 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   17188:	4d12      	ldr	r5, [pc, #72]	; (171d4 <nrfx_ipc_irq_handler+0x54>)
   1718a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1718e:	b904      	cbnz	r4, 17192 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   17190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   17192:	fa94 f0a4 	rbit	r0, r4
   17196:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1719a:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1719e:	280f      	cmp	r0, #15
   171a0:	ea24 0403 	bic.w	r4, r4, r3
   171a4:	dd0b      	ble.n	171be <nrfx_ipc_irq_handler+0x3e>
   171a6:	490c      	ldr	r1, [pc, #48]	; (171d8 <nrfx_ipc_irq_handler+0x58>)
   171a8:	480c      	ldr	r0, [pc, #48]	; (171dc <nrfx_ipc_irq_handler+0x5c>)
   171aa:	f240 13e7 	movw	r3, #487	; 0x1e7
   171ae:	4a0c      	ldr	r2, [pc, #48]	; (171e0 <nrfx_ipc_irq_handler+0x60>)
   171b0:	f005 fc9b 	bl	1caea <assert_print>
   171b4:	f240 11e7 	movw	r1, #487	; 0x1e7
   171b8:	4809      	ldr	r0, [pc, #36]	; (171e0 <nrfx_ipc_irq_handler+0x60>)
   171ba:	f005 fc8f 	bl	1cadc <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171be:	4b09      	ldr	r3, [pc, #36]	; (171e4 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   171c0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171c2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   171c4:	682b      	ldr	r3, [r5, #0]
   171c6:	2b00      	cmp	r3, #0
   171c8:	d0e1      	beq.n	1718e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   171ca:	68a9      	ldr	r1, [r5, #8]
   171cc:	4798      	blx	r3
   171ce:	e7de      	b.n	1718e <nrfx_ipc_irq_handler+0xe>
   171d0:	4002a000 	.word	0x4002a000
   171d4:	20009ba4 	.word	0x20009ba4
   171d8:	00021a8f 	.word	0x00021a8f
   171dc:	00021547 	.word	0x00021547
   171e0:	00021a5d 	.word	0x00021a5d
   171e4:	4002a100 	.word	0x4002a100

000171e8 <nrf_gpio_pin_port_decode>:
{
   171e8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   171ea:	6803      	ldr	r3, [r0, #0]
    switch (port)
   171ec:	095a      	lsrs	r2, r3, #5
   171ee:	d00d      	beq.n	1720c <nrf_gpio_pin_port_decode+0x24>
   171f0:	2a01      	cmp	r2, #1
   171f2:	d013      	beq.n	1721c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   171f4:	490e      	ldr	r1, [pc, #56]	; (17230 <nrf_gpio_pin_port_decode+0x48>)
   171f6:	480f      	ldr	r0, [pc, #60]	; (17234 <nrf_gpio_pin_port_decode+0x4c>)
   171f8:	f240 2347 	movw	r3, #583	; 0x247
   171fc:	4a0e      	ldr	r2, [pc, #56]	; (17238 <nrf_gpio_pin_port_decode+0x50>)
   171fe:	f005 fc74 	bl	1caea <assert_print>
   17202:	f240 2147 	movw	r1, #583	; 0x247
   17206:	480c      	ldr	r0, [pc, #48]	; (17238 <nrf_gpio_pin_port_decode+0x50>)
   17208:	f005 fc68 	bl	1cadc <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1720c:	f04f 32ff 	mov.w	r2, #4294967295
   17210:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17214:	07d9      	lsls	r1, r3, #31
   17216:	d5ed      	bpl.n	171f4 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   17218:	4808      	ldr	r0, [pc, #32]	; (1723c <nrf_gpio_pin_port_decode+0x54>)
   1721a:	e008      	b.n	1722e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1721c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   17220:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   17224:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17226:	07d2      	lsls	r2, r2, #31
   17228:	d5e4      	bpl.n	171f4 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1722a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1722c:	4804      	ldr	r0, [pc, #16]	; (17240 <nrf_gpio_pin_port_decode+0x58>)
}
   1722e:	bd08      	pop	{r3, pc}
   17230:	00023dd7 	.word	0x00023dd7
   17234:	00021547 	.word	0x00021547
   17238:	00023da4 	.word	0x00023da4
   1723c:	40842500 	.word	0x40842500
   17240:	40842800 	.word	0x40842800

00017244 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
   17244:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_seq != NULL);
   17246:	b95a      	cbnz	r2, 17260 <nrf_pwm_sequence_set+0x1c>
   17248:	492c      	ldr	r1, [pc, #176]	; (172fc <nrf_pwm_sequence_set+0xb8>)
   1724a:	f44f 732c 	mov.w	r3, #688	; 0x2b0
   1724e:	4a2c      	ldr	r2, [pc, #176]	; (17300 <nrf_pwm_sequence_set+0xbc>)
   17250:	482c      	ldr	r0, [pc, #176]	; (17304 <nrf_pwm_sequence_set+0xc0>)
   17252:	f005 fc4a 	bl	1caea <assert_print>
   17256:	f44f 712c 	mov.w	r1, #688	; 0x2b0
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   1725a:	4829      	ldr	r0, [pc, #164]	; (17300 <nrf_pwm_sequence_set+0xbc>)
   1725c:	f005 fc3e 	bl	1cadc <assert_post_action>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   17260:	6813      	ldr	r3, [r2, #0]
    NRFX_ASSERT(p_values != NULL);
   17262:	b94b      	cbnz	r3, 17278 <nrf_pwm_sequence_set+0x34>
   17264:	4928      	ldr	r1, [pc, #160]	; (17308 <nrf_pwm_sequence_set+0xc4>)
   17266:	f240 23bd 	movw	r3, #701	; 0x2bd
   1726a:	4a25      	ldr	r2, [pc, #148]	; (17300 <nrf_pwm_sequence_set+0xbc>)
   1726c:	4825      	ldr	r0, [pc, #148]	; (17304 <nrf_pwm_sequence_set+0xc0>)
   1726e:	f005 fc3c 	bl	1caea <assert_print>
   17272:	f240 21bd 	movw	r1, #701	; 0x2bd
   17276:	e7f0      	b.n	1725a <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   17278:	eb00 1441 	add.w	r4, r0, r1, lsl #5
   1727c:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   17280:	8893      	ldrh	r3, [r2, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   17282:	b94b      	cbnz	r3, 17298 <nrf_pwm_sequence_set+0x54>
   17284:	4921      	ldr	r1, [pc, #132]	; (1730c <nrf_pwm_sequence_set+0xc8>)
   17286:	f240 23c6 	movw	r3, #710	; 0x2c6
   1728a:	4a1d      	ldr	r2, [pc, #116]	; (17300 <nrf_pwm_sequence_set+0xbc>)
   1728c:	481d      	ldr	r0, [pc, #116]	; (17304 <nrf_pwm_sequence_set+0xc0>)
   1728e:	f005 fc2c 	bl	1caea <assert_print>
   17292:	f240 21c6 	movw	r1, #710	; 0x2c6
   17296:	e7e0      	b.n	1725a <nrf_pwm_sequence_set+0x16>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   17298:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1729c:	d009      	beq.n	172b2 <nrf_pwm_sequence_set+0x6e>
   1729e:	491c      	ldr	r1, [pc, #112]	; (17310 <nrf_pwm_sequence_set+0xcc>)
   172a0:	f240 23c7 	movw	r3, #711	; 0x2c7
   172a4:	4a16      	ldr	r2, [pc, #88]	; (17300 <nrf_pwm_sequence_set+0xbc>)
   172a6:	4817      	ldr	r0, [pc, #92]	; (17304 <nrf_pwm_sequence_set+0xc0>)
   172a8:	f005 fc1f 	bl	1caea <assert_print>
   172ac:	f240 21c7 	movw	r1, #711	; 0x2c7
   172b0:	e7d3      	b.n	1725a <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].CNT = length;
   172b2:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   172b6:	6893      	ldr	r3, [r2, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   172b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   172bc:	d309      	bcc.n	172d2 <nrf_pwm_sequence_set+0x8e>
   172be:	4915      	ldr	r1, [pc, #84]	; (17314 <nrf_pwm_sequence_set+0xd0>)
   172c0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   172c4:	4a0e      	ldr	r2, [pc, #56]	; (17300 <nrf_pwm_sequence_set+0xbc>)
   172c6:	480f      	ldr	r0, [pc, #60]	; (17304 <nrf_pwm_sequence_set+0xc0>)
   172c8:	f005 fc0f 	bl	1caea <assert_print>
   172cc:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   172d0:	e7c3      	b.n	1725a <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   172d2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   172d6:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   172da:	68d3      	ldr	r3, [r2, #12]
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   172dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   172e0:	d309      	bcc.n	172f6 <nrf_pwm_sequence_set+0xb2>
   172e2:	490d      	ldr	r1, [pc, #52]	; (17318 <nrf_pwm_sequence_set+0xd4>)
   172e4:	f240 23d9 	movw	r3, #729	; 0x2d9
   172e8:	4a05      	ldr	r2, [pc, #20]	; (17300 <nrf_pwm_sequence_set+0xbc>)
   172ea:	4806      	ldr	r0, [pc, #24]	; (17304 <nrf_pwm_sequence_set+0xc0>)
   172ec:	f005 fbfd 	bl	1caea <assert_print>
   172f0:	f240 21d9 	movw	r1, #729	; 0x2d9
   172f4:	e7b1      	b.n	1725a <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   172f6:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
}
   172fa:	bd10      	pop	{r4, pc}
   172fc:	00024941 	.word	0x00024941
   17300:	0002490f 	.word	0x0002490f
   17304:	00021547 	.word	0x00021547
   17308:	00024956 	.word	0x00024956
   1730c:	0002496e 	.word	0x0002496e
   17310:	0002497a 	.word	0x0002497a
   17314:	00024998 	.word	0x00024998
   17318:	000249b9 	.word	0x000249b9

0001731c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   1731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17320:	4604      	mov	r4, r0
    NRFX_ASSERT(p_config);
   17322:	460d      	mov	r5, r1
{
   17324:	b087      	sub	sp, #28
    NRFX_ASSERT(p_config);
   17326:	b949      	cbnz	r1, 1733c <nrfx_pwm_init+0x20>
   17328:	495b      	ldr	r1, [pc, #364]	; (17498 <nrfx_pwm_init+0x17c>)
   1732a:	485c      	ldr	r0, [pc, #368]	; (1749c <nrfx_pwm_init+0x180>)
   1732c:	238c      	movs	r3, #140	; 0x8c
   1732e:	4a5c      	ldr	r2, [pc, #368]	; (174a0 <nrfx_pwm_init+0x184>)
   17330:	f005 fbdb 	bl	1caea <assert_print>
   17334:	218c      	movs	r1, #140	; 0x8c
   17336:	485a      	ldr	r0, [pc, #360]	; (174a0 <nrfx_pwm_init+0x184>)
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   17338:	f005 fbd0 	bl	1cadc <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1733c:	210c      	movs	r1, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1733e:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   17342:	4e58      	ldr	r6, [pc, #352]	; (174a4 <nrfx_pwm_init+0x188>)
   17344:	fb01 f108 	mul.w	r1, r1, r8
   17348:	1870      	adds	r0, r6, r1
   1734a:	7a07      	ldrb	r7, [r0, #8]
   1734c:	2f00      	cmp	r7, #0
   1734e:	f040 80a0 	bne.w	17492 <nrfx_pwm_init+0x176>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   17352:	6043      	str	r3, [r0, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   17354:	7b2b      	ldrb	r3, [r5, #12]
    p_cb->handler = handler;
   17356:	5072      	str	r2, [r6, r1]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   17358:	7283      	strb	r3, [r0, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1735a:	b1c3      	cbz	r3, 1738e <nrfx_pwm_init+0x72>
   1735c:	7b6b      	ldrb	r3, [r5, #13]
   1735e:	b1b3      	cbz	r3, 1738e <nrfx_pwm_init+0x72>
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   17360:	2201      	movs	r2, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   17362:	6823      	ldr	r3, [r4, #0]
   17364:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   17368:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    nrf_pwm_configure(p_instance->p_registers,
   1736c:	6823      	ldr	r3, [r4, #0]
   1736e:	2f00      	cmp	r7, #0
        p_config->base_clock, p_config->count_mode, p_config->top_value);
   17370:	7968      	ldrb	r0, [r5, #5]
   17372:	79a9      	ldrb	r1, [r5, #6]
   17374:	892a      	ldrh	r2, [r5, #8]
   17376:	da54      	bge.n	17422 <nrfx_pwm_init+0x106>
   17378:	494b      	ldr	r1, [pc, #300]	; (174a8 <nrfx_pwm_init+0x18c>)
   1737a:	4848      	ldr	r0, [pc, #288]	; (1749c <nrfx_pwm_init+0x180>)
   1737c:	f240 23a5 	movw	r3, #677	; 0x2a5
   17380:	4a4a      	ldr	r2, [pc, #296]	; (174ac <nrfx_pwm_init+0x190>)
   17382:	f005 fbb2 	bl	1caea <assert_print>
   17386:	f240 21a5 	movw	r1, #677	; 0x2a5
   1738a:	4848      	ldr	r0, [pc, #288]	; (174ac <nrfx_pwm_init+0x190>)
   1738c:	e7d4      	b.n	17338 <nrfx_pwm_init+0x1c>
   1738e:	f105 39ff 	add.w	r9, r5, #4294967295
   17392:	af02      	add	r7, sp, #8
   17394:	f105 0a03 	add.w	sl, r5, #3
        uint8_t output_pin = p_config->output_pins[i];
   17398:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   1739c:	2aff      	cmp	r2, #255	; 0xff
   1739e:	d03c      	beq.n	1741a <nrfx_pwm_init+0xfe>
            if (!p_config->skip_gpio_cfg)
   173a0:	7b29      	ldrb	r1, [r5, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   173a2:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
   173a6:	f8c7 b000 	str.w	fp, [r7]
            if (!p_config->skip_gpio_cfg)
   173aa:	b9d1      	cbnz	r1, 173e2 <nrfx_pwm_init+0xc6>
    if (value == 0)
   173ac:	0613      	lsls	r3, r2, #24
   173ae:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   173b2:	a801      	add	r0, sp, #4
    if (value == 0)
   173b4:	d42a      	bmi.n	1740c <nrfx_pwm_init+0xf0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   173b6:	f7ff ff17 	bl	171e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   173ba:	2201      	movs	r2, #1
   173bc:	9901      	ldr	r1, [sp, #4]
   173be:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   173c0:	60c2      	str	r2, [r0, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   173c2:	a801      	add	r0, sp, #4
   173c4:	f8cd b004 	str.w	fp, [sp, #4]
   173c8:	f7ff ff0e 	bl	171e8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   173cc:	9b01      	ldr	r3, [sp, #4]
   173ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   173d2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   173d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   173da:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   173de:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   173e2:	45ca      	cmp	sl, r9
   173e4:	f107 0704 	add.w	r7, r7, #4
   173e8:	d1d6      	bne.n	17398 <nrfx_pwm_init+0x7c>
    if (!p_config->skip_psel_cfg)
   173ea:	7b6b      	ldrb	r3, [r5, #13]
   173ec:	2b00      	cmp	r3, #0
   173ee:	d1b7      	bne.n	17360 <nrfx_pwm_init+0x44>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   173f0:	6823      	ldr	r3, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   173f2:	9a02      	ldr	r2, [sp, #8]
   173f4:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
   173f8:	9a03      	ldr	r2, [sp, #12]
   173fa:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   173fe:	9a04      	ldr	r2, [sp, #16]
   17400:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
   17404:	9a05      	ldr	r2, [sp, #20]
   17406:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1740a:	e7a9      	b.n	17360 <nrfx_pwm_init+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1740c:	f7ff feec 	bl	171e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17410:	2201      	movs	r2, #1
   17412:	9901      	ldr	r1, [sp, #4]
   17414:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   17416:	6082      	str	r2, [r0, #8]
   17418:	e7d3      	b.n	173c2 <nrfx_pwm_init+0xa6>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   1741a:	f04f 33ff 	mov.w	r3, #4294967295
   1741e:	603b      	str	r3, [r7, #0]
   17420:	e7df      	b.n	173e2 <nrfx_pwm_init+0xc6>
    p_reg->PRESCALER  = base_clock;
   17422:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
   17426:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1742a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
   1742e:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   17430:	896a      	ldrh	r2, [r5, #10]
   17432:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->SHORTS = mask;
   17436:	2300      	movs	r3, #0
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   17438:	6822      	ldr	r2, [r4, #0]
   1743a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   1743e:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
   17440:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   17444:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17446:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
   1744a:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   1744e:	6822      	ldr	r2, [r4, #0]
   17450:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
   17454:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   17458:	6822      	ldr	r2, [r4, #0]
   1745a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   1745e:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   17462:	6822      	ldr	r2, [r4, #0]
   17464:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   17468:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   1746c:	230c      	movs	r3, #12
   1746e:	fb03 f308 	mul.w	r3, r3, r8
   17472:	58f3      	ldr	r3, [r6, r3]
   17474:	b123      	cbz	r3, 17480 <nrfx_pwm_init+0x164>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   17476:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   17478:	f340 3007 	sbfx	r0, r0, #12, #8
   1747c:	f7f5 fc90 	bl	cda0 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   17480:	230c      	movs	r3, #12
   17482:	fb03 6608 	mla	r6, r3, r8, r6
   17486:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   17488:	4809      	ldr	r0, [pc, #36]	; (174b0 <nrfx_pwm_init+0x194>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1748a:	7233      	strb	r3, [r6, #8]
}
   1748c:	b007      	add	sp, #28
   1748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
   17492:	4808      	ldr	r0, [pc, #32]	; (174b4 <nrfx_pwm_init+0x198>)
   17494:	e7fa      	b.n	1748c <nrfx_pwm_init+0x170>
   17496:	bf00      	nop
   17498:	000248d9 	.word	0x000248d9
   1749c:	00021547 	.word	0x00021547
   174a0:	000249dc 	.word	0x000249dc
   174a4:	20009bb0 	.word	0x20009bb0
   174a8:	00024a17 	.word	0x00024a17
   174ac:	0002490f 	.word	0x0002490f
   174b0:	0bad0000 	.word	0x0bad0000
   174b4:	0bad0005 	.word	0x0bad0005

000174b8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   174b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174bc:	4688      	mov	r8, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   174be:	210c      	movs	r1, #12
{
   174c0:	4616      	mov	r6, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   174c2:	7902      	ldrb	r2, [r0, #4]
{
   174c4:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   174c6:	4b30      	ldr	r3, [pc, #192]	; (17588 <nrfx_pwm_simple_playback+0xd0>)
   174c8:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   174cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   174d0:	fb01 3302 	mla	r3, r1, r2, r3
   174d4:	7a1b      	ldrb	r3, [r3, #8]
{
   174d6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   174d8:	b95b      	cbnz	r3, 174f2 <nrfx_pwm_simple_playback+0x3a>
   174da:	492c      	ldr	r1, [pc, #176]	; (1758c <nrfx_pwm_simple_playback+0xd4>)
   174dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
   174e0:	4a2b      	ldr	r2, [pc, #172]	; (17590 <nrfx_pwm_simple_playback+0xd8>)
   174e2:	482c      	ldr	r0, [pc, #176]	; (17594 <nrfx_pwm_simple_playback+0xdc>)
   174e4:	f005 fb01 	bl	1caea <assert_print>
   174e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
    NRFX_ASSERT(playback_count > 0);
   174ec:	4828      	ldr	r0, [pc, #160]	; (17590 <nrfx_pwm_simple_playback+0xd8>)
   174ee:	f005 faf5 	bl	1cadc <assert_post_action>
   174f2:	b94e      	cbnz	r6, 17508 <nrfx_pwm_simple_playback+0x50>
   174f4:	4928      	ldr	r1, [pc, #160]	; (17598 <nrfx_pwm_simple_playback+0xe0>)
   174f6:	f240 132d 	movw	r3, #301	; 0x12d
   174fa:	4a25      	ldr	r2, [pc, #148]	; (17590 <nrfx_pwm_simple_playback+0xd8>)
   174fc:	4825      	ldr	r0, [pc, #148]	; (17594 <nrfx_pwm_simple_playback+0xdc>)
   174fe:	f005 faf4 	bl	1caea <assert_print>
   17502:	f240 112d 	movw	r1, #301	; 0x12d
   17506:	e7f1      	b.n	174ec <nrfx_pwm_simple_playback+0x34>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   17508:	f8d8 3000 	ldr.w	r3, [r8]
   1750c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   17510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   17514:	d009      	beq.n	1752a <nrfx_pwm_simple_playback+0x72>
   17516:	4921      	ldr	r1, [pc, #132]	; (1759c <nrfx_pwm_simple_playback+0xe4>)
   17518:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1751c:	4a1c      	ldr	r2, [pc, #112]	; (17590 <nrfx_pwm_simple_playback+0xd8>)
   1751e:	481d      	ldr	r0, [pc, #116]	; (17594 <nrfx_pwm_simple_playback+0xdc>)
   17520:	f005 fae3 	bl	1caea <assert_print>
   17524:	f44f 7197 	mov.w	r1, #302	; 0x12e
   17528:	e7e0      	b.n	174ec <nrfx_pwm_simple_playback+0x34>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   1752a:	4642      	mov	r2, r8
   1752c:	2100      	movs	r1, #0
   1752e:	6800      	ldr	r0, [r0, #0]
   17530:	f7ff fe88 	bl	17244 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   17534:	4642      	mov	r2, r8
   17536:	2101      	movs	r1, #1
   17538:	6820      	ldr	r0, [r4, #0]
   1753a:	f7ff fe83 	bl	17244 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   1753e:	6822      	ldr	r2, [r4, #0]
   17540:	f006 0301 	and.w	r3, r6, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   17544:	eb03 0656 	add.w	r6, r3, r6, lsr #1
   17548:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   1754c:	f015 0f01 	tst.w	r5, #1
   17550:	6821      	ldr	r1, [r4, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   17552:	b2ea      	uxtb	r2, r5
    if (flags & NRFX_PWM_FLAG_STOP)
   17554:	d112      	bne.n	1757c <nrfx_pwm_simple_playback+0xc4>
    else if (flags & NRFX_PWM_FLAG_LOOP)
   17556:	f015 0502 	ands.w	r5, r5, #2
   1755a:	d010      	beq.n	1757e <nrfx_pwm_simple_playback+0xc6>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   1755c:	b94b      	cbnz	r3, 17572 <nrfx_pwm_simple_playback+0xba>
    p_reg->SHORTS = mask;
   1755e:	2304      	movs	r3, #4
   17560:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   17564:	2308      	movs	r3, #8
   17566:	4639      	mov	r1, r7
   17568:	4620      	mov	r0, r4
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   1756a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   1756e:	f007 bfd7 	b.w	1f520 <start_playback>
   17572:	2308      	movs	r3, #8
   17574:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
   17578:	230c      	movs	r3, #12
   1757a:	e7f4      	b.n	17566 <nrfx_pwm_simple_playback+0xae>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   1757c:	2510      	movs	r5, #16
   1757e:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   17582:	2b00      	cmp	r3, #0
   17584:	d1f8      	bne.n	17578 <nrfx_pwm_simple_playback+0xc0>
   17586:	e7ed      	b.n	17564 <nrfx_pwm_simple_playback+0xac>
   17588:	20009bb0 	.word	0x20009bb0
   1758c:	00024a38 	.word	0x00024a38
   17590:	000249dc 	.word	0x000249dc
   17594:	00021547 	.word	0x00021547
   17598:	00024a64 	.word	0x00024a64
   1759c:	00024a77 	.word	0x00024a77

000175a0 <nrfx_pwm_is_stopped>:


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   175a0:	210c      	movs	r1, #12
{
   175a2:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   175a4:	4a0f      	ldr	r2, [pc, #60]	; (175e4 <nrfx_pwm_is_stopped+0x44>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   175a6:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   175a8:	fb01 2203 	mla	r2, r1, r3, r2
   175ac:	7a13      	ldrb	r3, [r2, #8]
   175ae:	b95b      	cbnz	r3, 175c8 <nrfx_pwm_is_stopped+0x28>
   175b0:	490d      	ldr	r1, [pc, #52]	; (175e8 <nrfx_pwm_is_stopped+0x48>)
   175b2:	480e      	ldr	r0, [pc, #56]	; (175ec <nrfx_pwm_is_stopped+0x4c>)
   175b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   175b8:	4a0d      	ldr	r2, [pc, #52]	; (175f0 <nrfx_pwm_is_stopped+0x50>)
   175ba:	f005 fa96 	bl	1caea <assert_print>
   175be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   175c2:	480b      	ldr	r0, [pc, #44]	; (175f0 <nrfx_pwm_is_stopped+0x50>)
   175c4:	f005 fa8a 	bl	1cadc <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   175c8:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   175ca:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   175cc:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   175d0:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   175d2:	b919      	cbnz	r1, 175dc <nrfx_pwm_is_stopped+0x3c>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   175d4:	1e98      	subs	r0, r3, #2
   175d6:	bf18      	it	ne
   175d8:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   175da:	bd08      	pop	{r3, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   175dc:	2001      	movs	r0, #1
   175de:	7210      	strb	r0, [r2, #8]
        ret_val = true;
   175e0:	e7fb      	b.n	175da <nrfx_pwm_is_stopped+0x3a>
   175e2:	bf00      	nop
   175e4:	20009bb0 	.word	0x20009bb0
   175e8:	00024a38 	.word	0x00024a38
   175ec:	00021547 	.word	0x00021547
   175f0:	000249dc 	.word	0x000249dc

000175f4 <nrfx_pwm_stop>:
{
   175f4:	b538      	push	{r3, r4, r5, lr}
   175f6:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   175f8:	210c      	movs	r1, #12
   175fa:	7902      	ldrb	r2, [r0, #4]
   175fc:	4b12      	ldr	r3, [pc, #72]	; (17648 <nrfx_pwm_stop+0x54>)
{
   175fe:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   17600:	fb01 3302 	mla	r3, r1, r2, r3
   17604:	7a1b      	ldrb	r3, [r3, #8]
   17606:	b95b      	cbnz	r3, 17620 <nrfx_pwm_stop+0x2c>
   17608:	4910      	ldr	r1, [pc, #64]	; (1764c <nrfx_pwm_stop+0x58>)
   1760a:	4811      	ldr	r0, [pc, #68]	; (17650 <nrfx_pwm_stop+0x5c>)
   1760c:	f240 1385 	movw	r3, #389	; 0x185
   17610:	4a10      	ldr	r2, [pc, #64]	; (17654 <nrfx_pwm_stop+0x60>)
   17612:	f005 fa6a 	bl	1caea <assert_print>
   17616:	f240 1185 	movw	r1, #389	; 0x185
   1761a:	480e      	ldr	r0, [pc, #56]	; (17654 <nrfx_pwm_stop+0x60>)
   1761c:	f005 fa5e 	bl	1cadc <assert_post_action>
    p_reg->SHORTS = mask;
   17620:	2200      	movs	r2, #0
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   17622:	6803      	ldr	r3, [r0, #0]
   17624:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17628:	2201      	movs	r2, #1
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   1762a:	6803      	ldr	r3, [r0, #0]
   1762c:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   1762e:	f7ff ffb7 	bl	175a0 <nrfx_pwm_is_stopped>
   17632:	b938      	cbnz	r0, 17644 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
   17634:	4620      	mov	r0, r4
   17636:	f7ff ffb3 	bl	175a0 <nrfx_pwm_is_stopped>
   1763a:	b918      	cbnz	r0, 17644 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
   1763c:	2d00      	cmp	r5, #0
   1763e:	d1f9      	bne.n	17634 <nrfx_pwm_stop+0x40>
}
   17640:	4628      	mov	r0, r5
   17642:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
   17644:	2501      	movs	r5, #1
   17646:	e7fb      	b.n	17640 <nrfx_pwm_stop+0x4c>
   17648:	20009bb0 	.word	0x20009bb0
   1764c:	00024aa0 	.word	0x00024aa0
   17650:	00021547 	.word	0x00021547
   17654:	000249dc 	.word	0x000249dc

00017658 <nrf_gpio_pin_port_decode>:
{
   17658:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1765a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1765c:	095a      	lsrs	r2, r3, #5
   1765e:	d00d      	beq.n	1767c <nrf_gpio_pin_port_decode+0x24>
   17660:	2a01      	cmp	r2, #1
   17662:	d013      	beq.n	1768c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17664:	490e      	ldr	r1, [pc, #56]	; (176a0 <nrf_gpio_pin_port_decode+0x48>)
   17666:	480f      	ldr	r0, [pc, #60]	; (176a4 <nrf_gpio_pin_port_decode+0x4c>)
   17668:	f240 2347 	movw	r3, #583	; 0x247
   1766c:	4a0e      	ldr	r2, [pc, #56]	; (176a8 <nrf_gpio_pin_port_decode+0x50>)
   1766e:	f005 fa3c 	bl	1caea <assert_print>
   17672:	f240 2147 	movw	r1, #583	; 0x247
   17676:	480c      	ldr	r0, [pc, #48]	; (176a8 <nrf_gpio_pin_port_decode+0x50>)
   17678:	f005 fa30 	bl	1cadc <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1767c:	f04f 32ff 	mov.w	r2, #4294967295
   17680:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17684:	07d9      	lsls	r1, r3, #31
   17686:	d5ed      	bpl.n	17664 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   17688:	4808      	ldr	r0, [pc, #32]	; (176ac <nrf_gpio_pin_port_decode+0x54>)
   1768a:	e008      	b.n	1769e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1768c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   17690:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   17694:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17696:	07d2      	lsls	r2, r2, #31
   17698:	d5e4      	bpl.n	17664 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1769a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1769c:	4804      	ldr	r0, [pc, #16]	; (176b0 <nrf_gpio_pin_port_decode+0x58>)
}
   1769e:	bd08      	pop	{r3, pc}
   176a0:	00023dd7 	.word	0x00023dd7
   176a4:	00021547 	.word	0x00021547
   176a8:	00023da4 	.word	0x00023da4
   176ac:	40842500 	.word	0x40842500
   176b0:	40842800 	.word	0x40842800

000176b4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   176b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   176b8:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   176ba:	460c      	mov	r4, r1
   176bc:	b959      	cbnz	r1, 176d6 <nrfx_spim_init+0x22>
   176be:	498d      	ldr	r1, [pc, #564]	; (178f4 <nrfx_spim_init+0x240>)
   176c0:	488d      	ldr	r0, [pc, #564]	; (178f8 <nrfx_spim_init+0x244>)
   176c2:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   176c6:	4a8d      	ldr	r2, [pc, #564]	; (178fc <nrfx_spim_init+0x248>)
   176c8:	f005 fa0f 	bl	1caea <assert_print>
   176cc:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   176d0:	488a      	ldr	r0, [pc, #552]	; (178fc <nrfx_spim_init+0x248>)
   176d2:	f005 fa03 	bl	1cadc <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   176d6:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   176d8:	4d89      	ldr	r5, [pc, #548]	; (17900 <nrfx_spim_init+0x24c>)
   176da:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   176de:	7f09      	ldrb	r1, [r1, #28]
   176e0:	2900      	cmp	r1, #0
   176e2:	f040 8100 	bne.w	178e6 <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   176e6:	2f00      	cmp	r7, #0
   176e8:	f040 80ff 	bne.w	178ea <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   176ec:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   176f0:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   176f2:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   176f4:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   176f8:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   176fa:	d027      	beq.n	1774c <nrfx_spim_init+0x98>
   176fc:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   17700:	d124      	bne.n	1774c <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   17702:	b119      	cbz	r1, 1770c <nrfx_spim_init+0x58>
   17704:	7d20      	ldrb	r0, [r4, #20]
   17706:	2800      	cmp	r0, #0
   17708:	f040 80d5 	bne.w	178b6 <nrfx_spim_init+0x202>
   1770c:	487d      	ldr	r0, [pc, #500]	; (17904 <nrfx_spim_init+0x250>)
   1770e:	4581      	cmp	r9, r0
   17710:	d11c      	bne.n	1774c <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   17712:	7820      	ldrb	r0, [r4, #0]
   17714:	28ff      	cmp	r0, #255	; 0xff
   17716:	d002      	beq.n	1771e <nrfx_spim_init+0x6a>
   17718:	2808      	cmp	r0, #8
   1771a:	f040 80e8 	bne.w	178ee <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1771e:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   17720:	28ff      	cmp	r0, #255	; 0xff
   17722:	d002      	beq.n	1772a <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   17724:	280b      	cmp	r0, #11
   17726:	f040 80e2 	bne.w	178ee <nrfx_spim_init+0x23a>
   1772a:	2eff      	cmp	r6, #255	; 0xff
   1772c:	d002      	beq.n	17734 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1772e:	2e0c      	cmp	r6, #12
   17730:	f040 80dd 	bne.w	178ee <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   17734:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   17736:	28ff      	cmp	r0, #255	; 0xff
   17738:	d002      	beq.n	17740 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1773a:	2809      	cmp	r0, #9
   1773c:	f040 80d7 	bne.w	178ee <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   17740:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   17742:	28ff      	cmp	r0, #255	; 0xff
   17744:	d002      	beq.n	1774c <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   17746:	280a      	cmp	r0, #10
   17748:	f040 80d1 	bne.w	178ee <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1774c:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   17750:	7fab      	ldrb	r3, [r5, #30]
   17752:	f361 0300 	bfi	r3, r1, #0, #1
   17756:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   17758:	7922      	ldrb	r2, [r4, #4]
   1775a:	b2db      	uxtb	r3, r3
   1775c:	f362 0341 	bfi	r3, r2, #1, #1
   17760:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   17762:	7c62      	ldrb	r2, [r4, #17]
   17764:	b2db      	uxtb	r3, r3
   17766:	f362 0382 	bfi	r3, r2, #2, #1
   1776a:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1776c:	78e3      	ldrb	r3, [r4, #3]
   1776e:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   17770:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   17772:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   17776:	2b00      	cmp	r3, #0
   17778:	d142      	bne.n	17800 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1777a:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1777c:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1777e:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   17782:	7b23      	ldrb	r3, [r4, #12]
   17784:	bf08      	it	eq
   17786:	2703      	moveq	r7, #3
   17788:	2b01      	cmp	r3, #1
   1778a:	f200 8096 	bhi.w	178ba <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1778e:	f007 feed 	bl	1f56c <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   17792:	2300      	movs	r3, #0
   17794:	9700      	str	r7, [sp, #0]
   17796:	7820      	ldrb	r0, [r4, #0]
   17798:	461a      	mov	r2, r3
   1779a:	2101      	movs	r1, #1
   1779c:	f007 ff0e 	bl	1f5bc <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   177a0:	7860      	ldrb	r0, [r4, #1]
   177a2:	28ff      	cmp	r0, #255	; 0xff
   177a4:	d008      	beq.n	177b8 <nrfx_spim_init+0x104>
   177a6:	f007 fee1 	bl	1f56c <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   177aa:	2201      	movs	r2, #1
   177ac:	9700      	str	r7, [sp, #0]
   177ae:	2300      	movs	r3, #0
   177b0:	4611      	mov	r1, r2
   177b2:	7860      	ldrb	r0, [r4, #1]
   177b4:	f007 ff02 	bl	1f5bc <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   177b8:	78a0      	ldrb	r0, [r4, #2]
   177ba:	28ff      	cmp	r0, #255	; 0xff
   177bc:	d005      	beq.n	177ca <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   177be:	2200      	movs	r2, #0
   177c0:	9700      	str	r7, [sp, #0]
   177c2:	4611      	mov	r1, r2
   177c4:	7ba3      	ldrb	r3, [r4, #14]
   177c6:	f007 fef9 	bl	1f5bc <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   177ca:	78e0      	ldrb	r0, [r4, #3]
   177cc:	28ff      	cmp	r0, #255	; 0xff
   177ce:	d00b      	beq.n	177e8 <nrfx_spim_init+0x134>
    if (value == 0)
   177d0:	7923      	ldrb	r3, [r4, #4]
   177d2:	2b00      	cmp	r3, #0
   177d4:	d074      	beq.n	178c0 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   177d6:	f007 fec9 	bl	1f56c <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   177da:	2201      	movs	r2, #1
   177dc:	9700      	str	r7, [sp, #0]
   177de:	2300      	movs	r3, #0
   177e0:	4611      	mov	r1, r2
   177e2:	78e0      	ldrb	r0, [r4, #3]
   177e4:	f007 feea 	bl	1f5bc <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   177e8:	7be0      	ldrb	r0, [r4, #15]
   177ea:	28ff      	cmp	r0, #255	; 0xff
   177ec:	d008      	beq.n	17800 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   177ee:	f007 fec9 	bl	1f584 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   177f2:	2201      	movs	r2, #1
   177f4:	9700      	str	r7, [sp, #0]
   177f6:	2300      	movs	r3, #0
   177f8:	4611      	mov	r1, r2
   177fa:	7be0      	ldrb	r0, [r4, #15]
   177fc:	f007 fede 	bl	1f5bc <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   17800:	7d23      	ldrb	r3, [r4, #20]
   17802:	bb6b      	cbnz	r3, 17860 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   17804:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   17806:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   17808:	2bff      	cmp	r3, #255	; 0xff
   1780a:	bf18      	it	ne
   1780c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1780e:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   17810:	bf08      	it	eq
   17812:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   17816:	2bff      	cmp	r3, #255	; 0xff
   17818:	bf08      	it	eq
   1781a:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1781e:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   17822:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   17826:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1782a:	f898 3004 	ldrb.w	r3, [r8, #4]
   1782e:	b9bb      	cbnz	r3, 17860 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   17830:	78e3      	ldrb	r3, [r4, #3]
   17832:	2bff      	cmp	r3, #255	; 0xff
   17834:	d047      	beq.n	178c6 <nrfx_spim_init+0x212>
   17836:	7c62      	ldrb	r2, [r4, #17]
   17838:	2a00      	cmp	r2, #0
   1783a:	d044      	beq.n	178c6 <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1783c:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1783e:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   17840:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   17844:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   17848:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1784c:	f898 3004 	ldrb.w	r3, [r8, #4]
   17850:	b933      	cbnz	r3, 17860 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   17852:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   17854:	2bff      	cmp	r3, #255	; 0xff
   17856:	bf08      	it	eq
   17858:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1785c:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   17860:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   17862:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   17866:	68a3      	ldr	r3, [r4, #8]
   17868:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1786c:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1786e:	7b22      	ldrb	r2, [r4, #12]
   17870:	3b00      	subs	r3, #0
   17872:	bf18      	it	ne
   17874:	2301      	movne	r3, #1
    switch (spi_mode)
   17876:	2a02      	cmp	r2, #2
   17878:	d02f      	beq.n	178da <nrfx_spim_init+0x226>
   1787a:	2a03      	cmp	r2, #3
   1787c:	d030      	beq.n	178e0 <nrfx_spim_init+0x22c>
   1787e:	2a01      	cmp	r2, #1
   17880:	d101      	bne.n	17886 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17882:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   17886:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1788a:	79a3      	ldrb	r3, [r4, #6]
   1788c:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   17890:	2307      	movs	r3, #7
   17892:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   17896:	682b      	ldr	r3, [r5, #0]
   17898:	b12b      	cbz	r3, 178a6 <nrfx_spim_init+0x1f2>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1789a:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1789e:	f340 3007 	sbfx	r0, r0, #12, #8
   178a2:	f7f5 fa7d 	bl	cda0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   178a6:	2300      	movs	r3, #0
   178a8:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   178aa:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   178ac:	4816      	ldr	r0, [pc, #88]	; (17908 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   178ae:	772b      	strb	r3, [r5, #28]
}
   178b0:	b003      	add	sp, #12
   178b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   178b6:	4601      	mov	r1, r0
   178b8:	e748      	b.n	1774c <nrfx_spim_init+0x98>
   178ba:	f007 fe63 	bl	1f584 <nrf_gpio_pin_set>
   178be:	e768      	b.n	17792 <nrfx_spim_init+0xde>
   178c0:	f007 fe60 	bl	1f584 <nrf_gpio_pin_set>
   178c4:	e789      	b.n	177da <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   178c6:	f04f 33ff 	mov.w	r3, #4294967295
   178ca:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   178ce:	2300      	movs	r3, #0
   178d0:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   178d4:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   178d8:	e7b8      	b.n	1784c <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   178da:	f043 0304 	orr.w	r3, r3, #4
        break;
   178de:	e7d2      	b.n	17886 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   178e0:	f043 0306 	orr.w	r3, r3, #6
        break;
   178e4:	e7cf      	b.n	17886 <nrfx_spim_init+0x1d2>
        return err_code;
   178e6:	4809      	ldr	r0, [pc, #36]	; (1790c <nrfx_spim_init+0x258>)
   178e8:	e7e2      	b.n	178b0 <nrfx_spim_init+0x1fc>
        return err_code;
   178ea:	4809      	ldr	r0, [pc, #36]	; (17910 <nrfx_spim_init+0x25c>)
   178ec:	e7e0      	b.n	178b0 <nrfx_spim_init+0x1fc>
            return err_code;
   178ee:	4809      	ldr	r0, [pc, #36]	; (17914 <nrfx_spim_init+0x260>)
   178f0:	e7de      	b.n	178b0 <nrfx_spim_init+0x1fc>
   178f2:	bf00      	nop
   178f4:	000248d9 	.word	0x000248d9
   178f8:	00021547 	.word	0x00021547
   178fc:	00024ae5 	.word	0x00024ae5
   17900:	20009bbc 	.word	0x20009bbc
   17904:	4000a000 	.word	0x4000a000
   17908:	0bad0000 	.word	0x0bad0000
   1790c:	0bad0005 	.word	0x0bad0005
   17910:	0bad0003 	.word	0x0bad0003
   17914:	0bad0004 	.word	0x0bad0004

00017918 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   17918:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1791c:	4d2e      	ldr	r5, [pc, #184]	; (179d8 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1791e:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   17922:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   17924:	ea4f 1648 	mov.w	r6, r8, lsl #5
   17928:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1792c:	f898 301c 	ldrb.w	r3, [r8, #28]
   17930:	b95b      	cbnz	r3, 1794a <nrfx_spim_uninit+0x32>
   17932:	492a      	ldr	r1, [pc, #168]	; (179dc <nrfx_spim_uninit+0xc4>)
   17934:	482a      	ldr	r0, [pc, #168]	; (179e0 <nrfx_spim_uninit+0xc8>)
   17936:	f240 230f 	movw	r3, #527	; 0x20f
   1793a:	4a2a      	ldr	r2, [pc, #168]	; (179e4 <nrfx_spim_uninit+0xcc>)
   1793c:	f005 f8d5 	bl	1caea <assert_print>
   17940:	f240 210f 	movw	r1, #527	; 0x20f
   17944:	4827      	ldr	r0, [pc, #156]	; (179e4 <nrfx_spim_uninit+0xcc>)
   17946:	f005 f8c9 	bl	1cadc <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1794a:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1794c:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1794e:	b1cb      	cbz	r3, 17984 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   17950:	f344 3007 	sbfx	r0, r4, #12, #8
   17954:	f7f5 fa32 	bl	cdbc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   17958:	4b23      	ldr	r3, [pc, #140]	; (179e8 <nrfx_spim_uninit+0xd0>)
   1795a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1795e:	f898 301d 	ldrb.w	r3, [r8, #29]
   17962:	b17b      	cbz	r3, 17984 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17964:	2301      	movs	r3, #1
   17966:	f04f 0864 	mov.w	r8, #100	; 0x64
   1796a:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1796c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   17970:	b92b      	cbnz	r3, 1797e <nrfx_spim_uninit+0x66>
   17972:	2001      	movs	r0, #1
   17974:	f007 fd5a 	bl	1f42c <nrfx_busy_wait>
   17978:	f1b8 0801 	subs.w	r8, r8, #1
   1797c:	d1f6      	bne.n	1796c <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1797e:	2200      	movs	r2, #0
   17980:	19ab      	adds	r3, r5, r6
   17982:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   17984:	2300      	movs	r3, #0
   17986:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1798a:	19ab      	adds	r3, r5, r6
   1798c:	7f9b      	ldrb	r3, [r3, #30]
   1798e:	07db      	lsls	r3, r3, #31
   17990:	d41b      	bmi.n	179ca <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   17992:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   17996:	f007 fe30 	bl	1f5fa <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1799a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1799e:	f007 fe2c 	bl	1f5fa <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   179a2:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   179a6:	f007 fe28 	bl	1f5fa <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   179aa:	793b      	ldrb	r3, [r7, #4]
   179ac:	b91b      	cbnz	r3, 179b6 <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   179ae:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   179b2:	f007 fe22 	bl	1f5fa <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   179b6:	19ab      	adds	r3, r5, r6
   179b8:	7fd8      	ldrb	r0, [r3, #31]
   179ba:	28ff      	cmp	r0, #255	; 0xff
   179bc:	d005      	beq.n	179ca <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   179be:	2300      	movs	r3, #0
   179c0:	2201      	movs	r2, #1
   179c2:	4619      	mov	r1, r3
   179c4:	9300      	str	r3, [sp, #0]
   179c6:	f007 fdf9 	bl	1f5bc <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   179ca:	2300      	movs	r3, #0
   179cc:	4435      	add	r5, r6
   179ce:	772b      	strb	r3, [r5, #28]
}
   179d0:	b002      	add	sp, #8
   179d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179d6:	bf00      	nop
   179d8:	20009bbc 	.word	0x20009bbc
   179dc:	00024a38 	.word	0x00024a38
   179e0:	00021547 	.word	0x00021547
   179e4:	00024ae5 	.word	0x00024ae5
   179e8:	00080152 	.word	0x00080152

000179ec <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   179ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   179f0:	4e60      	ldr	r6, [pc, #384]	; (17b74 <nrfx_spim_xfer+0x188>)
   179f2:	7903      	ldrb	r3, [r0, #4]
{
   179f4:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   179f6:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   179fa:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   179fe:	4607      	mov	r7, r0
   17a00:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   17a02:	b95a      	cbnz	r2, 17a1c <nrfx_spim_xfer+0x30>
   17a04:	495c      	ldr	r1, [pc, #368]	; (17b78 <nrfx_spim_xfer+0x18c>)
   17a06:	f240 23de 	movw	r3, #734	; 0x2de
   17a0a:	4a5c      	ldr	r2, [pc, #368]	; (17b7c <nrfx_spim_xfer+0x190>)
   17a0c:	485c      	ldr	r0, [pc, #368]	; (17b80 <nrfx_spim_xfer+0x194>)
   17a0e:	f005 f86c 	bl	1caea <assert_print>
   17a12:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   17a16:	4859      	ldr	r0, [pc, #356]	; (17b7c <nrfx_spim_xfer+0x190>)
   17a18:	f005 f860 	bl	1cadc <assert_post_action>
   17a1c:	680a      	ldr	r2, [r1, #0]
   17a1e:	b95a      	cbnz	r2, 17a38 <nrfx_spim_xfer+0x4c>
   17a20:	684a      	ldr	r2, [r1, #4]
   17a22:	b14a      	cbz	r2, 17a38 <nrfx_spim_xfer+0x4c>
   17a24:	4957      	ldr	r1, [pc, #348]	; (17b84 <nrfx_spim_xfer+0x198>)
   17a26:	f240 23df 	movw	r3, #735	; 0x2df
   17a2a:	4a54      	ldr	r2, [pc, #336]	; (17b7c <nrfx_spim_xfer+0x190>)
   17a2c:	4854      	ldr	r0, [pc, #336]	; (17b80 <nrfx_spim_xfer+0x194>)
   17a2e:	f005 f85c 	bl	1caea <assert_print>
   17a32:	f240 21df 	movw	r1, #735	; 0x2df
   17a36:	e7ee      	b.n	17a16 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   17a38:	68a2      	ldr	r2, [r4, #8]
   17a3a:	b96a      	cbnz	r2, 17a58 <nrfx_spim_xfer+0x6c>
   17a3c:	68e2      	ldr	r2, [r4, #12]
   17a3e:	2a00      	cmp	r2, #0
   17a40:	f000 8094 	beq.w	17b6c <nrfx_spim_xfer+0x180>
   17a44:	4950      	ldr	r1, [pc, #320]	; (17b88 <nrfx_spim_xfer+0x19c>)
   17a46:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   17a4a:	4a4c      	ldr	r2, [pc, #304]	; (17b7c <nrfx_spim_xfer+0x190>)
   17a4c:	484c      	ldr	r0, [pc, #304]	; (17b80 <nrfx_spim_xfer+0x194>)
   17a4e:	f005 f84c 	bl	1caea <assert_print>
   17a52:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   17a56:	e7de      	b.n	17a16 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   17a58:	b93b      	cbnz	r3, 17a6a <nrfx_spim_xfer+0x7e>
   17a5a:	68e3      	ldr	r3, [r4, #12]
   17a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17a60:	d203      	bcs.n	17a6a <nrfx_spim_xfer+0x7e>
   17a62:	6863      	ldr	r3, [r4, #4]
   17a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17a68:	d309      	bcc.n	17a7e <nrfx_spim_xfer+0x92>
   17a6a:	4948      	ldr	r1, [pc, #288]	; (17b8c <nrfx_spim_xfer+0x1a0>)
   17a6c:	f240 23e1 	movw	r3, #737	; 0x2e1
   17a70:	4a42      	ldr	r2, [pc, #264]	; (17b7c <nrfx_spim_xfer+0x190>)
   17a72:	4843      	ldr	r0, [pc, #268]	; (17b80 <nrfx_spim_xfer+0x194>)
   17a74:	f005 f839 	bl	1caea <assert_print>
   17a78:	f240 21e1 	movw	r1, #737	; 0x2e1
   17a7c:	e7cb      	b.n	17a16 <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   17a7e:	f015 0908 	ands.w	r9, r5, #8
   17a82:	d00f      	beq.n	17aa4 <nrfx_spim_xfer+0xb8>
   17a84:	7fb3      	ldrb	r3, [r6, #30]
   17a86:	075b      	lsls	r3, r3, #29
   17a88:	d40c      	bmi.n	17aa4 <nrfx_spim_xfer+0xb8>
   17a8a:	7ff3      	ldrb	r3, [r6, #31]
   17a8c:	2bff      	cmp	r3, #255	; 0xff
   17a8e:	d009      	beq.n	17aa4 <nrfx_spim_xfer+0xb8>
   17a90:	493f      	ldr	r1, [pc, #252]	; (17b90 <nrfx_spim_xfer+0x1a4>)
   17a92:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   17a96:	4a39      	ldr	r2, [pc, #228]	; (17b7c <nrfx_spim_xfer+0x190>)
   17a98:	4839      	ldr	r0, [pc, #228]	; (17b80 <nrfx_spim_xfer+0x194>)
   17a9a:	f005 f826 	bl	1caea <assert_print>
   17a9e:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   17aa2:	e7b8      	b.n	17a16 <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   17aa4:	7f73      	ldrb	r3, [r6, #29]
   17aa6:	2b00      	cmp	r3, #0
   17aa8:	d15e      	bne.n	17b68 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   17aaa:	6833      	ldr	r3, [r6, #0]
   17aac:	b123      	cbz	r3, 17ab8 <nrfx_spim_xfer+0xcc>
   17aae:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   17ab2:	bf04      	itt	eq
   17ab4:	2301      	moveq	r3, #1
   17ab6:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   17ab8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 17b94 <nrfx_spim_xfer+0x1a8>
   17abc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   17ac0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   17ac4:	2101      	movs	r1, #1
   17ac6:	4640      	mov	r0, r8
   17ac8:	f007 fd68 	bl	1f59c <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   17acc:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   17ace:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   17ad0:	b121      	cbz	r1, 17adc <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   17ad2:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   17ad6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   17ada:	d106      	bne.n	17aea <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   17adc:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   17ade:	b14a      	cbz	r2, 17af4 <nrfx_spim_xfer+0x108>
   17ae0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   17ae4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   17ae8:	d004      	beq.n	17af4 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   17aea:	2300      	movs	r3, #0
        return err_code;
   17aec:	482a      	ldr	r0, [pc, #168]	; (17b98 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   17aee:	7773      	strb	r3, [r6, #29]
}
   17af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   17af4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17af6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17afa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17afe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   17b02:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   17b06:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17b0a:	2200      	movs	r2, #0
   17b0c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   17b10:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   17b14:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   17b18:	bf18      	it	ne
   17b1a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   17b1c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   17b20:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   17b24:	bf18      	it	ne
   17b26:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   17b28:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   17b2c:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   17b2e:	f1b9 0f00 	cmp.w	r9, #0
   17b32:	d006      	beq.n	17b42 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   17b34:	b96a      	cbnz	r2, 17b52 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   17b36:	2100      	movs	r1, #0
   17b38:	4640      	mov	r0, r8
   17b3a:	f007 fd2f 	bl	1f59c <set_ss_pin_state>
    return err_code;
   17b3e:	4817      	ldr	r0, [pc, #92]	; (17b9c <nrfx_spim_xfer+0x1b0>)
   17b40:	e7d6      	b.n	17af0 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17b42:	2101      	movs	r1, #1
   17b44:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   17b46:	b922      	cbnz	r2, 17b52 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17b48:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   17b4c:	2a00      	cmp	r2, #0
   17b4e:	d0fb      	beq.n	17b48 <nrfx_spim_xfer+0x15c>
   17b50:	e7f1      	b.n	17b36 <nrfx_spim_xfer+0x14a>
    if (!enable)
   17b52:	f015 0f04 	tst.w	r5, #4
   17b56:	f04f 0240 	mov.w	r2, #64	; 0x40
   17b5a:	d002      	beq.n	17b62 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   17b5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   17b60:	e7ed      	b.n	17b3e <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   17b62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17b66:	e7ea      	b.n	17b3e <nrfx_spim_xfer+0x152>
        return err_code;
   17b68:	480d      	ldr	r0, [pc, #52]	; (17ba0 <nrfx_spim_xfer+0x1b4>)
   17b6a:	e7c1      	b.n	17af0 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   17b6c:	2b00      	cmp	r3, #0
   17b6e:	f43f af78 	beq.w	17a62 <nrfx_spim_xfer+0x76>
   17b72:	e77a      	b.n	17a6a <nrfx_spim_xfer+0x7e>
   17b74:	20009bbc 	.word	0x20009bbc
   17b78:	00024a38 	.word	0x00024a38
   17b7c:	00024ae5 	.word	0x00024ae5
   17b80:	00021547 	.word	0x00021547
   17b84:	00024b21 	.word	0x00024b21
   17b88:	00024b68 	.word	0x00024b68
   17b8c:	00024baf 	.word	0x00024baf
   17b90:	00024c53 	.word	0x00024c53
   17b94:	20009bc8 	.word	0x20009bc8
   17b98:	0bad000a 	.word	0x0bad000a
   17b9c:	0bad0000 	.word	0x0bad0000
   17ba0:	0bad000b 	.word	0x0bad000b

00017ba4 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   17ba4:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17ba6:	4b13      	ldr	r3, [pc, #76]	; (17bf4 <nrfx_spim_4_irq_handler+0x50>)
   17ba8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   17bac:	b302      	cbz	r2, 17bf0 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17bae:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   17bb0:	4c11      	ldr	r4, [pc, #68]	; (17bf8 <nrfx_spim_4_irq_handler+0x54>)
   17bb2:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   17bb6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   17bba:	6823      	ldr	r3, [r4, #0]
   17bbc:	b95b      	cbnz	r3, 17bd6 <nrfx_spim_4_irq_handler+0x32>
   17bbe:	490f      	ldr	r1, [pc, #60]	; (17bfc <nrfx_spim_4_irq_handler+0x58>)
   17bc0:	480f      	ldr	r0, [pc, #60]	; (17c00 <nrfx_spim_4_irq_handler+0x5c>)
   17bc2:	f240 333b 	movw	r3, #827	; 0x33b
   17bc6:	4a0f      	ldr	r2, [pc, #60]	; (17c04 <nrfx_spim_4_irq_handler+0x60>)
   17bc8:	f004 ff8f 	bl	1caea <assert_print>
   17bcc:	f240 313b 	movw	r1, #827	; 0x33b
   17bd0:	480c      	ldr	r0, [pc, #48]	; (17c04 <nrfx_spim_4_irq_handler+0x60>)
   17bd2:	f004 ff83 	bl	1cadc <assert_post_action>
    set_ss_pin_state(p_cb, false);
   17bd6:	4629      	mov	r1, r5
   17bd8:	4620      	mov	r0, r4
   17bda:	f007 fcdf 	bl	1f59c <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   17bde:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   17be2:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   17be4:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   17be6:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   17bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   17bee:	4718      	bx	r3
}
   17bf0:	bd70      	pop	{r4, r5, r6, pc}
   17bf2:	bf00      	nop
   17bf4:	4000a000 	.word	0x4000a000
   17bf8:	20009bbc 	.word	0x20009bbc
   17bfc:	00024c96 	.word	0x00024c96
   17c00:	00021547 	.word	0x00021547
   17c04:	00024ae5 	.word	0x00024ae5

00017c08 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   17c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c0c:	460e      	mov	r6, r1
   17c0e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   17c10:	4d0c      	ldr	r5, [pc, #48]	; (17c44 <metal_generic_dev_open+0x3c>)
   17c12:	f855 4f18 	ldr.w	r4, [r5, #24]!
   17c16:	42ac      	cmp	r4, r5
   17c18:	d103      	bne.n	17c22 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   17c1a:	f06f 0012 	mvn.w	r0, #18
   17c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   17c22:	4631      	mov	r1, r6
   17c24:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   17c28:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   17c2c:	f005 ff3d 	bl	1daaa <strcmp>
   17c30:	b930      	cbnz	r0, 17c40 <metal_generic_dev_open+0x38>
			*device = dev;
   17c32:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   17c36:	4640      	mov	r0, r8
}
   17c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   17c3c:	f007 bde2 	b.w	1f804 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   17c40:	6824      	ldr	r4, [r4, #0]
   17c42:	e7e8      	b.n	17c16 <metal_generic_dev_open+0xe>
   17c44:	20009bdc 	.word	0x20009bdc

00017c48 <metal_bus_unregister>:
{
   17c48:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   17c4a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   17c4e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   17c50:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   17c52:	f100 0324 	add.w	r3, r0, #36	; 0x24
   17c56:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   17c58:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   17c5c:	6843      	ldr	r3, [r0, #4]
{
   17c5e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   17c60:	b103      	cbz	r3, 17c64 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   17c62:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   17c64:	4b05      	ldr	r3, [pc, #20]	; (17c7c <metal_bus_unregister+0x34>)
   17c66:	781a      	ldrb	r2, [r3, #0]
   17c68:	2a06      	cmp	r2, #6
   17c6a:	d905      	bls.n	17c78 <metal_bus_unregister+0x30>
   17c6c:	685b      	ldr	r3, [r3, #4]
   17c6e:	b11b      	cbz	r3, 17c78 <metal_bus_unregister+0x30>
   17c70:	2007      	movs	r0, #7
   17c72:	6822      	ldr	r2, [r4, #0]
   17c74:	4902      	ldr	r1, [pc, #8]	; (17c80 <metal_bus_unregister+0x38>)
   17c76:	4798      	blx	r3
}
   17c78:	2000      	movs	r0, #0
   17c7a:	bd10      	pop	{r4, pc}
   17c7c:	20009bdc 	.word	0x20009bdc
   17c80:	00024ca4 	.word	0x00024ca4

00017c84 <metal_bus_find>:
{
   17c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c88:	4607      	mov	r7, r0
   17c8a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   17c8c:	4e0b      	ldr	r6, [pc, #44]	; (17cbc <metal_bus_find+0x38>)
   17c8e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   17c92:	42b4      	cmp	r4, r6
   17c94:	d102      	bne.n	17c9c <metal_bus_find+0x18>
	return -ENOENT;
   17c96:	f06f 0001 	mvn.w	r0, #1
   17c9a:	e00a      	b.n	17cb2 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   17c9c:	4639      	mov	r1, r7
   17c9e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   17ca2:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   17ca6:	f005 ff00 	bl	1daaa <strcmp>
   17caa:	b920      	cbnz	r0, 17cb6 <metal_bus_find+0x32>
   17cac:	b11d      	cbz	r5, 17cb6 <metal_bus_find+0x32>
			*result = bus;
   17cae:	f8c5 8000 	str.w	r8, [r5]
}
   17cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   17cb6:	6824      	ldr	r4, [r4, #0]
   17cb8:	e7eb      	b.n	17c92 <metal_bus_find+0xe>
   17cba:	bf00      	nop
   17cbc:	20009bdc 	.word	0x20009bdc

00017cc0 <metal_bus_register>:
{
   17cc0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   17cc2:	4604      	mov	r4, r0
   17cc4:	b910      	cbnz	r0, 17ccc <metal_bus_register+0xc>
		return -EINVAL;
   17cc6:	f06f 0015 	mvn.w	r0, #21
}
   17cca:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   17ccc:	6800      	ldr	r0, [r0, #0]
   17cce:	2800      	cmp	r0, #0
   17cd0:	d0f9      	beq.n	17cc6 <metal_bus_register+0x6>
   17cd2:	f005 feda 	bl	1da8a <strlen>
   17cd6:	2800      	cmp	r0, #0
   17cd8:	d0f5      	beq.n	17cc6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   17cda:	2100      	movs	r1, #0
   17cdc:	6820      	ldr	r0, [r4, #0]
   17cde:	f7ff ffd1 	bl	17c84 <metal_bus_find>
   17ce2:	b1c8      	cbz	r0, 17d18 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   17ce4:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   17ce8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   17cec:	4b0c      	ldr	r3, [pc, #48]	; (17d20 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   17cee:	f104 0224 	add.w	r2, r4, #36	; 0x24
   17cf2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   17cf4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   17cf8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   17cfa:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   17cfc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   17cfe:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   17d00:	781a      	ldrb	r2, [r3, #0]
   17d02:	2a06      	cmp	r2, #6
   17d04:	d901      	bls.n	17d0a <metal_bus_register+0x4a>
   17d06:	685b      	ldr	r3, [r3, #4]
   17d08:	b90b      	cbnz	r3, 17d0e <metal_bus_register+0x4e>
	return 0;
   17d0a:	2000      	movs	r0, #0
   17d0c:	e7dd      	b.n	17cca <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   17d0e:	2007      	movs	r0, #7
   17d10:	6822      	ldr	r2, [r4, #0]
   17d12:	4904      	ldr	r1, [pc, #16]	; (17d24 <metal_bus_register+0x64>)
   17d14:	4798      	blx	r3
   17d16:	e7f8      	b.n	17d0a <metal_bus_register+0x4a>
		return -EEXIST;
   17d18:	f06f 0010 	mvn.w	r0, #16
   17d1c:	e7d5      	b.n	17cca <metal_bus_register+0xa>
   17d1e:	bf00      	nop
   17d20:	20009bdc 	.word	0x20009bdc
   17d24:	00024ca6 	.word	0x00024ca6

00017d28 <metal_device_close>:
	metal_assert(device && device->bus);
   17d28:	4601      	mov	r1, r0
{
   17d2a:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   17d2c:	b108      	cbz	r0, 17d32 <metal_device_close+0xa>
   17d2e:	6840      	ldr	r0, [r0, #4]
   17d30:	b948      	cbnz	r0, 17d46 <metal_device_close+0x1e>
   17d32:	4908      	ldr	r1, [pc, #32]	; (17d54 <metal_device_close+0x2c>)
   17d34:	4808      	ldr	r0, [pc, #32]	; (17d58 <metal_device_close+0x30>)
   17d36:	2351      	movs	r3, #81	; 0x51
   17d38:	4a08      	ldr	r2, [pc, #32]	; (17d5c <metal_device_close+0x34>)
   17d3a:	f004 fed6 	bl	1caea <assert_print>
   17d3e:	2151      	movs	r1, #81	; 0x51
   17d40:	4806      	ldr	r0, [pc, #24]	; (17d5c <metal_device_close+0x34>)
   17d42:	f004 fecb 	bl	1cadc <assert_post_action>
	if (device->bus->ops.dev_close)
   17d46:	68c3      	ldr	r3, [r0, #12]
   17d48:	b113      	cbz	r3, 17d50 <metal_device_close+0x28>
}
   17d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   17d4e:	4718      	bx	r3
}
   17d50:	bd10      	pop	{r4, pc}
   17d52:	bf00      	nop
   17d54:	00024cf0 	.word	0x00024cf0
   17d58:	00021547 	.word	0x00021547
   17d5c:	00024cb9 	.word	0x00024cb9

00017d60 <metal_register_generic_device>:
{
   17d60:	b510      	push	{r4, lr}
   17d62:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   17d64:	6800      	ldr	r0, [r0, #0]
   17d66:	b910      	cbnz	r0, 17d6e <metal_register_generic_device+0xe>
		return -EINVAL;
   17d68:	f06f 0015 	mvn.w	r0, #21
}
   17d6c:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   17d6e:	f005 fe8c 	bl	1da8a <strlen>
   17d72:	2800      	cmp	r0, #0
   17d74:	d0f8      	beq.n	17d68 <metal_register_generic_device+0x8>
   17d76:	68a3      	ldr	r3, [r4, #8]
   17d78:	2b01      	cmp	r3, #1
   17d7a:	d8f5      	bhi.n	17d68 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   17d7c:	4b06      	ldr	r3, [pc, #24]	; (17d98 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   17d7e:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   17d82:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   17d84:	4b05      	ldr	r3, [pc, #20]	; (17d9c <metal_register_generic_device+0x3c>)
   17d86:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   17d88:	f103 0018 	add.w	r0, r3, #24
   17d8c:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   17d8e:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   17d90:	61d9      	str	r1, [r3, #28]
	return 0;
   17d92:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   17d94:	6011      	str	r1, [r2, #0]
}
   17d96:	e7e9      	b.n	17d6c <metal_register_generic_device+0xc>
   17d98:	200083d4 	.word	0x200083d4
   17d9c:	20009bdc 	.word	0x20009bdc

00017da0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   17da0:	b538      	push	{r3, r4, r5, lr}
   17da2:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   17da4:	4c0d      	ldr	r4, [pc, #52]	; (17ddc <metal_init+0x3c>)
   17da6:	2220      	movs	r2, #32
   17da8:	4620      	mov	r0, r4
   17daa:	2100      	movs	r1, #0
   17dac:	f005 feb7 	bl	1db1e <memset>

	_metal.common.log_handler   = params->log_handler;
   17db0:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   17db2:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   17db4:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   17db6:	4623      	mov	r3, r4
   17db8:	792a      	ldrb	r2, [r5, #4]
   17dba:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   17dbe:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   17dc2:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   17dc6:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   17dca:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   17dce:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   17dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   17dd6:	f000 b80f 	b.w	17df8 <metal_sys_init>
   17dda:	bf00      	nop
   17ddc:	20009bdc 	.word	0x20009bdc

00017de0 <metal_finish>:

void metal_finish(void)
{
   17de0:	b508      	push	{r3, lr}
	metal_sys_finish();
   17de2:	f000 f811 	bl	17e08 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   17de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   17dea:	2220      	movs	r2, #32
   17dec:	2100      	movs	r1, #0
   17dee:	4801      	ldr	r0, [pc, #4]	; (17df4 <metal_finish+0x14>)
   17df0:	f005 be95 	b.w	1db1e <memset>
   17df4:	20009bdc 	.word	0x20009bdc

00017df8 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17df8:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   17dfa:	4802      	ldr	r0, [pc, #8]	; (17e04 <metal_sys_init+0xc>)
   17dfc:	f7ff ff60 	bl	17cc0 <metal_bus_register>
	return 0;
}
   17e00:	2000      	movs	r0, #0
   17e02:	bd08      	pop	{r3, pc}
   17e04:	200083d4 	.word	0x200083d4

00017e08 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   17e08:	4801      	ldr	r0, [pc, #4]	; (17e10 <metal_sys_finish+0x8>)
   17e0a:	f7ff bf1d 	b.w	17c48 <metal_bus_unregister>
   17e0e:	bf00      	nop
   17e10:	200083d4 	.word	0x200083d4

00017e14 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   17e14:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   17e16:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   17e18:	2b06      	cmp	r3, #6
{
   17e1a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   17e1c:	bf88      	it	hi
   17e1e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   17e20:	4b09      	ldr	r3, [pc, #36]	; (17e48 <metal_zephyr_log_handler+0x34>)
{
   17e22:	ac05      	add	r4, sp, #20
   17e24:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   17e28:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   17e2c:	4807      	ldr	r0, [pc, #28]	; (17e4c <metal_zephyr_log_handler+0x38>)
   17e2e:	f004 fc54 	bl	1c6da <printk>

	va_start(args, format);
	vprintk(format, args);
   17e32:	4621      	mov	r1, r4
   17e34:	4628      	mov	r0, r5
	va_start(args, format);
   17e36:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   17e38:	f7f1 fe2e 	bl	9a98 <vprintk>
	va_end(args);
}
   17e3c:	b002      	add	sp, #8
   17e3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   17e42:	b003      	add	sp, #12
   17e44:	4770      	bx	lr
   17e46:	bf00      	nop
   17e48:	0002114c 	.word	0x0002114c
   17e4c:	000212a2 	.word	0x000212a2

00017e50 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   17e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e54:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   17e56:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   17e58:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   17e5a:	4293      	cmp	r3, r2
{
   17e5c:	4617      	mov	r7, r2
   17e5e:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   17e60:	d341      	bcc.n	17ee6 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   17e62:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   17e64:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   17e68:	42bd      	cmp	r5, r7
   17e6a:	d103      	bne.n	17e74 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   17e6c:	2000      	movs	r0, #0
}
   17e6e:	b007      	add	sp, #28
   17e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   17e74:	fb0b f805 	mul.w	r8, fp, r5
   17e78:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   17e7c:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   17e7e:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   17e82:	1d23      	adds	r3, r4, #4
   17e84:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   17e86:	b9ca      	cbnz	r2, 17ebc <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   17e88:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   17e8a:	6861      	ldr	r1, [r4, #4]
   17e8c:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   17e8e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   17e92:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   17e94:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   17e96:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   17e9a:	1e5c      	subs	r4, r3, #1
   17e9c:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   17ea0:	425b      	negs	r3, r3
   17ea2:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   17ea6:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   17ea8:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   17eac:	6884      	ldr	r4, [r0, #8]
   17eae:	3306      	adds	r3, #6
   17eb0:	42a1      	cmp	r1, r4
   17eb2:	bf28      	it	cs
   17eb4:	f04f 31ff 	movcs.w	r1, #4294967295
   17eb8:	f007 fc70 	bl	1f79c <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   17ebc:	f859 3008 	ldr.w	r3, [r9, r8]
   17ec0:	4630      	mov	r0, r6
   17ec2:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   17ec4:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   17ec6:	b2a9      	uxth	r1, r5
   17ec8:	6a1b      	ldr	r3, [r3, #32]
   17eca:	9301      	str	r3, [sp, #4]
   17ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17ece:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   17ed2:	9300      	str	r3, [sp, #0]
   17ed4:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   17ed8:	9b05      	ldr	r3, [sp, #20]
   17eda:	f007 fcb1 	bl	1f840 <virtqueue_create>
		if (ret)
   17ede:	2800      	cmp	r0, #0
   17ee0:	d1c5      	bne.n	17e6e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   17ee2:	3501      	adds	r5, #1
   17ee4:	e7c0      	b.n	17e68 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   17ee6:	4801      	ldr	r0, [pc, #4]	; (17eec <virtio_create_virtqueues+0x9c>)
   17ee8:	e7c1      	b.n	17e6e <virtio_create_virtqueues+0x1e>
   17eea:	bf00      	nop
   17eec:	fffff440 	.word	0xfffff440

00017ef0 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   17ef0:	b510      	push	{r4, lr}
	if (vq) {
   17ef2:	4604      	mov	r4, r0
   17ef4:	b190      	cbz	r0, 17f1c <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   17ef6:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   17ef8:	8943      	ldrh	r3, [r0, #10]
   17efa:	429a      	cmp	r2, r3
   17efc:	d009      	beq.n	17f12 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   17efe:	4b08      	ldr	r3, [pc, #32]	; (17f20 <virtqueue_free+0x30>)
   17f00:	781a      	ldrb	r2, [r3, #0]
   17f02:	2a03      	cmp	r2, #3
   17f04:	d905      	bls.n	17f12 <virtqueue_free+0x22>
   17f06:	685b      	ldr	r3, [r3, #4]
   17f08:	b11b      	cbz	r3, 17f12 <virtqueue_free+0x22>
   17f0a:	6842      	ldr	r2, [r0, #4]
   17f0c:	4905      	ldr	r1, [pc, #20]	; (17f24 <virtqueue_free+0x34>)
   17f0e:	2004      	movs	r0, #4
   17f10:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   17f12:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   17f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17f18:	f008 ba20 	b.w	2035c <k_free>
   17f1c:	bd10      	pop	{r4, pc}
   17f1e:	bf00      	nop
   17f20:	20009bdc 	.word	0x20009bdc
   17f24:	00024d9e 	.word	0x00024d9e

00017f28 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   17f28:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   17f2a:	8944      	ldrh	r4, [r0, #10]
   17f2c:	428c      	cmp	r4, r1
   17f2e:	d312      	bcc.n	17f56 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   17f30:	6a03      	ldr	r3, [r0, #32]
   17f32:	3c01      	subs	r4, #1
   17f34:	885d      	ldrh	r5, [r3, #2]
   17f36:	402c      	ands	r4, r5
   17f38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   17f3c:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   17f3e:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   17f40:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   17f44:	6a02      	ldr	r2, [r0, #32]
   17f46:	8853      	ldrh	r3, [r2, #2]
   17f48:	3301      	adds	r3, #1
   17f4a:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   17f4c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   17f4e:	3301      	adds	r3, #1
   17f50:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   17f52:	2000      	movs	r0, #0
}
   17f54:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   17f56:	4801      	ldr	r0, [pc, #4]	; (17f5c <virtqueue_add_consumed_buffer+0x34>)
   17f58:	e7fc      	b.n	17f54 <virtqueue_add_consumed_buffer+0x2c>
   17f5a:	bf00      	nop
   17f5c:	fffff441 	.word	0xfffff441

00017f60 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   17f60:	b430      	push	{r4, r5}
   17f62:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   17f64:	b148      	cbz	r0, 17f7a <rpmsg_send_offchannel_raw+0x1a>
   17f66:	6a00      	ldr	r0, [r0, #32]
   17f68:	b138      	cbz	r0, 17f7a <rpmsg_send_offchannel_raw+0x1a>
   17f6a:	b133      	cbz	r3, 17f7a <rpmsg_send_offchannel_raw+0x1a>
   17f6c:	3401      	adds	r4, #1
   17f6e:	d004      	beq.n	17f7a <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   17f70:	6f44      	ldr	r4, [r0, #116]	; 0x74
   17f72:	b114      	cbz	r4, 17f7a <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   17f74:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   17f76:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   17f78:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   17f7a:	4801      	ldr	r0, [pc, #4]	; (17f80 <rpmsg_send_offchannel_raw+0x20>)
}
   17f7c:	bc30      	pop	{r4, r5}
   17f7e:	4770      	bx	lr
   17f80:	fffff82d 	.word	0xfffff82d

00017f84 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   17f84:	b430      	push	{r4, r5}
   17f86:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   17f88:	b150      	cbz	r0, 17fa0 <rpmsg_send_offchannel_nocopy+0x1c>
   17f8a:	6a00      	ldr	r0, [r0, #32]
   17f8c:	b140      	cbz	r0, 17fa0 <rpmsg_send_offchannel_nocopy+0x1c>
   17f8e:	b13b      	cbz	r3, 17fa0 <rpmsg_send_offchannel_nocopy+0x1c>
   17f90:	3401      	adds	r4, #1
   17f92:	d005      	beq.n	17fa0 <rpmsg_send_offchannel_nocopy+0x1c>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   17f94:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
   17f98:	b114      	cbz	r4, 17fa0 <rpmsg_send_offchannel_nocopy+0x1c>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   17f9a:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   17f9c:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   17f9e:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   17fa0:	4801      	ldr	r0, [pc, #4]	; (17fa8 <rpmsg_send_offchannel_nocopy+0x24>)
}
   17fa2:	bc30      	pop	{r4, r5}
   17fa4:	4770      	bx	lr
   17fa6:	bf00      	nop
   17fa8:	fffff82d 	.word	0xfffff82d

00017fac <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   17fac:	b570      	push	{r4, r5, r6, lr}
   17fae:	460c      	mov	r4, r1
   17fb0:	4611      	mov	r1, r2
   17fb2:	4605      	mov	r5, r0
   17fb4:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   17fb6:	4b0c      	ldr	r3, [pc, #48]	; (17fe8 <rpmsg_register_endpoint+0x3c>)
   17fb8:	2220      	movs	r2, #32
   17fba:	2900      	cmp	r1, #0
   17fbc:	bf08      	it	eq
   17fbe:	4619      	moveq	r1, r3
   17fc0:	4620      	mov	r0, r4
   17fc2:	f005 fd4e 	bl	1da62 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   17fc6:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   17fc8:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   17fca:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   17fcc:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   17fce:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   17fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   17fd2:	9b06      	ldr	r3, [sp, #24]
   17fd4:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   17fd6:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   17fd8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   17fdc:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   17fe0:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   17fe2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17fe4:	6013      	str	r3, [r2, #0]
}
   17fe6:	bd70      	pop	{r4, r5, r6, pc}
   17fe8:	00023bfa 	.word	0x00023bfa

00017fec <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   17fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17ff0:	460e      	mov	r6, r1
   17ff2:	4691      	mov	r9, r2
   17ff4:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   17ff6:	4605      	mov	r5, r0
{
   17ff8:	b085      	sub	sp, #20
	if (!ept)
   17ffa:	2800      	cmp	r0, #0
   17ffc:	d068      	beq.n	180d0 <rpmsg_create_ept+0xe4>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   17ffe:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   18002:	4640      	mov	r0, r8
   18004:	f007 fdb5 	bl	1fb72 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   18008:	1c78      	adds	r0, r7, #1
   1800a:	d141      	bne.n	18090 <rpmsg_create_ept+0xa4>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1800c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
   1800e:	f106 0348 	add.w	r3, r6, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   18012:	f014 0401 	ands.w	r4, r4, #1
   18016:	d00b      	beq.n	18030 <rpmsg_create_ept+0x44>
	for (bit = start;
   18018:	2400      	movs	r4, #0
	     bit++)
   1801a:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1801c:	2c80      	cmp	r4, #128	; 0x80
   1801e:	d055      	beq.n	180cc <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   18020:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   18022:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   18026:	f004 011f 	and.w	r1, r4, #31
   1802a:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1802c:	07d1      	lsls	r1, r2, #31
   1802e:	d4f4      	bmi.n	1801a <rpmsg_create_ept+0x2e>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   18030:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   18032:	0960      	lsrs	r0, r4, #5
   18034:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   18038:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1803c:	f004 041f 	and.w	r4, r4, #31
   18040:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   18042:	430a      	orrs	r2, r1
   18044:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   18048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1804a:	464a      	mov	r2, r9
   1804c:	9302      	str	r3, [sp, #8]
   1804e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18050:	4629      	mov	r1, r5
   18052:	9301      	str	r3, [sp, #4]
   18054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18056:	4630      	mov	r0, r6
   18058:	9300      	str	r3, [sp, #0]
   1805a:	463b      	mov	r3, r7
   1805c:	f7ff ffa6 	bl	17fac <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   18060:	4640      	mov	r0, r8
   18062:	f001 fa71 	bl	19548 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   18066:	782c      	ldrb	r4, [r5, #0]
   18068:	b174      	cbz	r4, 18088 <rpmsg_create_ept+0x9c>
   1806a:	f896 4088 	ldrb.w	r4, [r6, #136]	; 0x88
   1806e:	b15c      	cbz	r4, 18088 <rpmsg_create_ept+0x9c>
   18070:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18072:	3301      	adds	r3, #1
   18074:	d12e      	bne.n	180d4 <rpmsg_create_ept+0xe8>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   18076:	2100      	movs	r1, #0
   18078:	4628      	mov	r0, r5
   1807a:	f007 fda9 	bl	1fbd0 <rpmsg_send_ns_message>

	if (status)
   1807e:	4604      	mov	r4, r0
   18080:	b110      	cbz	r0, 18088 <rpmsg_create_ept+0x9c>
		rpmsg_unregister_endpoint(ept);
   18082:	4628      	mov	r0, r5
   18084:	f007 fd7b 	bl	1fb7e <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   18088:	4620      	mov	r0, r4
   1808a:	b005      	add	sp, #20
   1808c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   18090:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   18094:	d3d8      	bcc.n	18048 <rpmsg_create_ept+0x5c>
	addr -= RPMSG_RESERVED_ADDRESSES;
   18096:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1809a:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1809c:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   180a0:	d80f      	bhi.n	180c2 <rpmsg_create_ept+0xd6>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   180a2:	0958      	lsrs	r0, r3, #5
   180a4:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   180a8:	f003 031f 	and.w	r3, r3, #31
   180ac:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   180b0:	07d2      	lsls	r2, r2, #31
   180b2:	d40b      	bmi.n	180cc <rpmsg_create_ept+0xe0>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   180b4:	2201      	movs	r2, #1
   180b6:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   180ba:	4323      	orrs	r3, r4
   180bc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   180c0:	e7c2      	b.n	18048 <rpmsg_create_ept+0x5c>
   180c2:	4c05      	ldr	r4, [pc, #20]	; (180d8 <rpmsg_create_ept+0xec>)
   180c4:	4640      	mov	r0, r8
   180c6:	f001 fa3f 	bl	19548 <z_impl_k_sem_give>
}
   180ca:	e7dd      	b.n	18088 <rpmsg_create_ept+0x9c>
			status = RPMSG_ERR_ADDR;
   180cc:	4c03      	ldr	r4, [pc, #12]	; (180dc <rpmsg_create_ept+0xf0>)
   180ce:	e7f9      	b.n	180c4 <rpmsg_create_ept+0xd8>
		return RPMSG_ERR_PARAM;
   180d0:	4c01      	ldr	r4, [pc, #4]	; (180d8 <rpmsg_create_ept+0xec>)
   180d2:	e7d9      	b.n	18088 <rpmsg_create_ept+0x9c>
   180d4:	2400      	movs	r4, #0
   180d6:	e7d7      	b.n	18088 <rpmsg_create_ept+0x9c>
   180d8:	fffff82d 	.word	0xfffff82d
   180dc:	fffff829 	.word	0xfffff829

000180e0 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   180e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   180e4:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   180e8:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   180ec:	2300      	movs	r3, #0
{
   180ee:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   180f0:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   180f2:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   180f6:	2310      	movs	r3, #16
	rp_hdr.src = src;
   180f8:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   180fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   180fe:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   18100:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	rp_hdr.len = len;
   18104:	f8ad 501c 	strh.w	r5, [sp, #28]
   18108:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1810a:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1810c:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   18110:	42b1      	cmp	r1, r6
   18112:	bf28      	it	cs
   18114:	f04f 31ff 	movcs.w	r1, #4294967295
   18118:	eb0d 0203 	add.w	r2, sp, r3
   1811c:	f007 fb04 	bl	1f728 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   18120:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   18122:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   18124:	d00b      	beq.n	1813e <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   18126:	4924      	ldr	r1, [pc, #144]	; (181b8 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   18128:	f240 138b 	movw	r3, #395	; 0x18b
   1812c:	4a23      	ldr	r2, [pc, #140]	; (181bc <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1812e:	4824      	ldr	r0, [pc, #144]	; (181c0 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   18130:	f004 fcdb 	bl	1caea <assert_print>
   18134:	f240 118b 	movw	r1, #395	; 0x18b
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   18138:	4820      	ldr	r0, [pc, #128]	; (181bc <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1813a:	f004 fccf 	bl	1cadc <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   1813e:	f104 0658 	add.w	r6, r4, #88	; 0x58
   18142:	4630      	mov	r0, r6
   18144:	f007 fdd3 	bl	1fcee <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   18148:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1814c:	699b      	ldr	r3, [r3, #24]
   1814e:	b9d3      	cbnz	r3, 18186 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   18150:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   18154:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   18158:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1815c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1815e:	b9cb      	cbnz	r3, 18194 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   18160:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   18164:	f8cd 8000 	str.w	r8, [sp]
   18168:	2201      	movs	r2, #1
   1816a:	a902      	add	r1, sp, #8
   1816c:	f007 fb95 	bl	1f89a <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   18170:	b1b0      	cbz	r0, 181a0 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   18172:	4914      	ldr	r1, [pc, #80]	; (181c4 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   18174:	f44f 73cc 	mov.w	r3, #408	; 0x198
   18178:	4a10      	ldr	r2, [pc, #64]	; (181bc <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1817a:	4811      	ldr	r0, [pc, #68]	; (181c0 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1817c:	f004 fcb5 	bl	1caea <assert_print>
   18180:	f44f 71cc 	mov.w	r1, #408	; 0x198
   18184:	e7d8      	b.n	18138 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   18186:	4639      	mov	r1, r7
   18188:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1818c:	f007 fc1b 	bl	1f9c6 <virtqueue_get_buffer_length>
   18190:	4602      	mov	r2, r0
   18192:	e7df      	b.n	18154 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   18194:	2b01      	cmp	r3, #1
   18196:	d103      	bne.n	181a0 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   18198:	4639      	mov	r1, r7
   1819a:	f7ff fec5 	bl	17f28 <virtqueue_add_consumed_buffer>
   1819e:	e7e7      	b.n	18170 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   181a0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   181a4:	f007 fc96 	bl	1fad4 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   181a8:	4630      	mov	r0, r6
   181aa:	f007 fd9e 	bl	1fcea <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   181ae:	4628      	mov	r0, r5
   181b0:	b008      	add	sp, #32
   181b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   181b6:	bf00      	nop
   181b8:	00024e03 	.word	0x00024e03
   181bc:	00024dc0 	.word	0x00024dc0
   181c0:	00021547 	.word	0x00021547
   181c4:	00024e1c 	.word	0x00024e1c

000181c8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   181c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   181cc:	6803      	ldr	r3, [r0, #0]
   181ce:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   181d0:	f107 0658 	add.w	r6, r7, #88	; 0x58
   181d4:	4630      	mov	r0, r6
   181d6:	f007 fd8a 	bl	1fcee <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   181da:	4638      	mov	r0, r7
   181dc:	f10d 020a 	add.w	r2, sp, #10
   181e0:	a903      	add	r1, sp, #12
   181e2:	f007 fdd2 	bl	1fd8a <rpmsg_virtio_get_rx_buffer>
   181e6:	4604      	mov	r4, r0
   181e8:	4630      	mov	r0, r6
   181ea:	f007 fd7e 	bl	1fcea <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   181ee:	2c00      	cmp	r4, #0
   181f0:	d04f      	beq.n	18292 <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   181f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   181f6:	4630      	mov	r0, r6
   181f8:	60a3      	str	r3, [r4, #8]
   181fa:	f007 fd78 	bl	1fcee <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   181fe:	f04f 33ff 	mov.w	r3, #4294967295
   18202:	2100      	movs	r1, #0
   18204:	4638      	mov	r0, r7
   18206:	6862      	ldr	r2, [r4, #4]
   18208:	f007 fd15 	bl	1fc36 <rpmsg_get_endpoint>
   1820c:	4605      	mov	r5, r0
   1820e:	4630      	mov	r0, r6
   18210:	f007 fd6b 	bl	1fcea <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   18214:	b1ed      	cbz	r5, 18252 <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   18216:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   18218:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1821a:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1821c:	bf08      	it	eq
   1821e:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   18220:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   18222:	bf08      	it	eq
   18224:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   18226:	6823      	ldr	r3, [r4, #0]
   18228:	89a2      	ldrh	r2, [r4, #12]
   1822a:	9100      	str	r1, [sp, #0]
   1822c:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   18230:	f104 0110 	add.w	r1, r4, #16
   18234:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   18236:	2800      	cmp	r0, #0
   18238:	da0b      	bge.n	18252 <rpmsg_virtio_rx_callback+0x8a>
   1823a:	4917      	ldr	r1, [pc, #92]	; (18298 <rpmsg_virtio_rx_callback+0xd0>)
   1823c:	4817      	ldr	r0, [pc, #92]	; (1829c <rpmsg_virtio_rx_callback+0xd4>)
   1823e:	f44f 7302 	mov.w	r3, #520	; 0x208
   18242:	4a17      	ldr	r2, [pc, #92]	; (182a0 <rpmsg_virtio_rx_callback+0xd8>)
   18244:	f004 fc51 	bl	1caea <assert_print>
   18248:	f44f 7102 	mov.w	r1, #520	; 0x208
   1824c:	4814      	ldr	r0, [pc, #80]	; (182a0 <rpmsg_virtio_rx_callback+0xd8>)
   1824e:	f004 fc45 	bl	1cadc <assert_post_action>
   18252:	4630      	mov	r0, r6
   18254:	f007 fd4b 	bl	1fcee <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   18258:	68a3      	ldr	r3, [r4, #8]
   1825a:	2b00      	cmp	r3, #0
   1825c:	db06      	blt.n	1826c <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1825e:	4621      	mov	r1, r4
   18260:	4638      	mov	r0, r7
   18262:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   18266:	9a03      	ldr	r2, [sp, #12]
   18268:	f007 fda6 	bl	1fdb8 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1826c:	4638      	mov	r0, r7
   1826e:	f10d 020a 	add.w	r2, sp, #10
   18272:	a903      	add	r1, sp, #12
   18274:	f007 fd89 	bl	1fd8a <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   18278:	4604      	mov	r4, r0
   1827a:	b118      	cbz	r0, 18284 <rpmsg_virtio_rx_callback+0xbc>
   1827c:	4630      	mov	r0, r6
   1827e:	f007 fd34 	bl	1fcea <k_sem_give>
	while (rp_hdr) {
   18282:	e7b6      	b.n	181f2 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   18284:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   18288:	f007 fc24 	bl	1fad4 <virtqueue_kick>
   1828c:	4630      	mov	r0, r6
   1828e:	f007 fd2c 	bl	1fcea <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   18292:	b004      	add	sp, #16
   18294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18298:	00024e28 	.word	0x00024e28
   1829c:	00021547 	.word	0x00021547
   182a0:	00024dc0 	.word	0x00024dc0

000182a4 <rpmsg_virtio_send_offchannel_raw>:
{
   182a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   182a8:	b085      	sub	sp, #20
   182aa:	460f      	mov	r7, r1
   182ac:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   182ae:	a903      	add	r1, sp, #12
   182b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   182b2:	4606      	mov	r6, r0
   182b4:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   182b6:	f007 fdc5 	bl	1fe44 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   182ba:	4604      	mov	r4, r0
   182bc:	b350      	cbz	r0, 18314 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   182be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   182c0:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   182c2:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
   182c6:	429d      	cmp	r5, r3
   182c8:	bfa8      	it	ge
   182ca:	461d      	movge	r5, r3
   182cc:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   182ce:	f8d0 c008 	ldr.w	ip, [r0, #8]
   182d2:	1a61      	subs	r1, r4, r1
   182d4:	4561      	cmp	r1, ip
   182d6:	bf28      	it	cs
   182d8:	f04f 31ff 	movcs.w	r1, #4294967295
   182dc:	462b      	mov	r3, r5
   182de:	464a      	mov	r2, r9
   182e0:	f007 fa22 	bl	1f728 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   182e4:	4285      	cmp	r5, r0
   182e6:	d00b      	beq.n	18300 <rpmsg_virtio_send_offchannel_raw+0x5c>
   182e8:	490b      	ldr	r1, [pc, #44]	; (18318 <rpmsg_virtio_send_offchannel_raw+0x74>)
   182ea:	480c      	ldr	r0, [pc, #48]	; (1831c <rpmsg_virtio_send_offchannel_raw+0x78>)
   182ec:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   182f0:	4a0b      	ldr	r2, [pc, #44]	; (18320 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   182f2:	f004 fbfa 	bl	1caea <assert_print>
   182f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   182fa:	4809      	ldr	r0, [pc, #36]	; (18320 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   182fc:	f004 fbee 	bl	1cadc <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   18300:	4623      	mov	r3, r4
   18302:	4642      	mov	r2, r8
   18304:	4639      	mov	r1, r7
   18306:	4630      	mov	r0, r6
   18308:	9500      	str	r5, [sp, #0]
   1830a:	f7ff fee9 	bl	180e0 <rpmsg_virtio_send_offchannel_nocopy>
}
   1830e:	b005      	add	sp, #20
   18310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   18314:	4803      	ldr	r0, [pc, #12]	; (18324 <rpmsg_virtio_send_offchannel_raw+0x80>)
   18316:	e7fa      	b.n	1830e <rpmsg_virtio_send_offchannel_raw+0x6a>
   18318:	00024e34 	.word	0x00024e34
   1831c:	00021547 	.word	0x00021547
   18320:	00024dc0 	.word	0x00024dc0
   18324:	fffff82e 	.word	0xfffff82e

00018328 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   18328:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1832a:	4604      	mov	r4, r0
   1832c:	b1e0      	cbz	r0, 18368 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1832e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   18332:	4628      	mov	r0, r5
   18334:	f007 fcdb 	bl	1fcee <__metal_mutex_acquire>
   18338:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1833c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1833e:	b953      	cbnz	r3, 18356 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   18340:	f8d4 408c 	ldr.w	r4, [r4, #140]	; 0x8c
   18344:	3c10      	subs	r4, #16
	if (length <= 0) {
   18346:	2c00      	cmp	r4, #0
   18348:	dc00      	bgt.n	1834c <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   1834a:	4c08      	ldr	r4, [pc, #32]	; (1836c <rpmsg_virtio_get_buffer_size+0x44>)
   1834c:	4628      	mov	r0, r5
   1834e:	f007 fccc 	bl	1fcea <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   18352:	4620      	mov	r0, r4
   18354:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   18356:	2b01      	cmp	r3, #1
   18358:	d1f7      	bne.n	1834a <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1835a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1835e:	f007 fbf0 	bl	1fb42 <virtqueue_get_desc_size>
   18362:	f1a0 0410 	sub.w	r4, r0, #16
   18366:	e7ee      	b.n	18346 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   18368:	4c01      	ldr	r4, [pc, #4]	; (18370 <rpmsg_virtio_get_buffer_size+0x48>)
   1836a:	e7f2      	b.n	18352 <rpmsg_virtio_get_buffer_size+0x2a>
   1836c:	fffff82e 	.word	0xfffff82e
   18370:	fffff82d 	.word	0xfffff82d

00018374 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   18374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18378:	460d      	mov	r5, r1
   1837a:	b08a      	sub	sp, #40	; 0x28
   1837c:	4690      	mov	r8, r2
   1837e:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   18382:	228c      	movs	r2, #140	; 0x8c
   18384:	2100      	movs	r1, #0
{
   18386:	4604      	mov	r4, r0
   18388:	461e      	mov	r6, r3
	memset(rdev, 0, sizeof(*rdev));
   1838a:	f005 fbc8 	bl	1db1e <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1838e:	2201      	movs	r2, #1
   18390:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18394:	4611      	mov	r1, r2
   18396:	f007 fe49 	bl	2002c <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1839a:	4b71      	ldr	r3, [pc, #452]	; (18560 <rpmsg_init_vdev_with_config+0x1ec>)
	rvdev->vdev = vdev;
   1839c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	rdev->ns_bind_cb = ns_bind_cb;
   183a0:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   183a4:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   183a6:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   183a8:	4b6e      	ldr	r3, [pc, #440]	; (18564 <rpmsg_init_vdev_with_config+0x1f0>)
   183aa:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   183ac:	4b6e      	ldr	r3, [pc, #440]	; (18568 <rpmsg_init_vdev_with_config+0x1f4>)
   183ae:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   183b0:	4b6e      	ldr	r3, [pc, #440]	; (1856c <rpmsg_init_vdev_with_config+0x1f8>)
   183b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   183b6:	4b6e      	ldr	r3, [pc, #440]	; (18570 <rpmsg_init_vdev_with_config+0x1fc>)
   183b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   183bc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   183c0:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   183c4:	f1b8 0f00 	cmp.w	r8, #0
   183c8:	d165      	bne.n	18496 <rpmsg_init_vdev_with_config+0x122>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   183ca:	b927      	cbnz	r7, 183d6 <rpmsg_init_vdev_with_config+0x62>
			return RPMSG_ERR_PARAM;
   183cc:	4f69      	ldr	r7, [pc, #420]	; (18574 <rpmsg_init_vdev_with_config+0x200>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   183ce:	4638      	mov	r0, r7
   183d0:	b00a      	add	sp, #40	; 0x28
   183d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rvdev->config = *config;
   183d6:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   183da:	e897 0003 	ldmia.w	r7, {r0, r1}
   183de:	e883 0003 	stmia.w	r3, {r0, r1}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   183e2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   183e6:	6a03      	ldr	r3, [r0, #32]
   183e8:	689b      	ldr	r3, [r3, #8]
   183ea:	4798      	blx	r3
   183ec:	2300      	movs	r3, #0
   183ee:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   183f0:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   183f4:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   183f6:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	if (role == RPMSG_HOST) {
   183fa:	f1b8 0f00 	cmp.w	r8, #0
   183fe:	d15e      	bne.n	184be <rpmsg_init_vdev_with_config+0x14a>
		if (!shpool)
   18400:	f1b9 0f00 	cmp.w	r9, #0
   18404:	d0e2      	beq.n	183cc <rpmsg_init_vdev_with_config+0x58>
		if (!shpool->size)
   18406:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1840a:	2b00      	cmp	r3, #0
   1840c:	f000 80a5 	beq.w	1855a <rpmsg_init_vdev_with_config+0x1e6>
		vq_names[0] = "rx_vq";
   18410:	4b59      	ldr	r3, [pc, #356]	; (18578 <rpmsg_init_vdev_with_config+0x204>)
		rvdev->shpool = shpool;
   18412:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
		vq_names[0] = "rx_vq";
   18416:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   18418:	4b58      	ldr	r3, [pc, #352]	; (1857c <rpmsg_init_vdev_with_config+0x208>)
   1841a:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1841c:	4b58      	ldr	r3, [pc, #352]	; (18580 <rpmsg_init_vdev_with_config+0x20c>)
   1841e:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   18420:	4b58      	ldr	r3, [pc, #352]	; (18584 <rpmsg_init_vdev_with_config+0x210>)
   18422:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   18424:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   18426:	681b      	ldr	r3, [r3, #0]
   18428:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[1].vq;
   1842c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1842e:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   18430:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   18434:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   18436:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
   1843a:	9300      	str	r3, [sp, #0]
   1843c:	2202      	movs	r2, #2
   1843e:	2100      	movs	r1, #0
   18440:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   18444:	ab04      	add	r3, sp, #16
   18446:	f7ff fd03 	bl	17e50 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   1844a:	4607      	mov	r7, r0
   1844c:	2800      	cmp	r0, #0
   1844e:	d1be      	bne.n	183ce <rpmsg_init_vdev_with_config+0x5a>
	virtqueue_disable_cb(rvdev->svq);
   18450:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   18454:	f007 fb10 	bl	1fa78 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   18458:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1845a:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   1845c:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   1845e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   18460:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   18462:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   18464:	f1b8 0f00 	cmp.w	r8, #0
   18468:	d15f      	bne.n	1852a <rpmsg_init_vdev_with_config+0x1b6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1846a:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   1846c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   18470:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   18472:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18476:	895b      	ldrh	r3, [r3, #10]
   18478:	4553      	cmp	r3, sl
   1847a:	d832      	bhi.n	184e2 <rpmsg_init_vdev_with_config+0x16e>
	if (rdev->support_ns) {
   1847c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
	list->next = list;
   18480:	e9c4 4400 	strd	r4, r4, [r4]
   18484:	2b00      	cmp	r3, #0
   18486:	d157      	bne.n	18538 <rpmsg_init_vdev_with_config+0x1c4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   18488:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1848c:	2104      	movs	r1, #4
   1848e:	6a03      	ldr	r3, [r0, #32]
   18490:	685b      	ldr	r3, [r3, #4]
   18492:	4798      	blx	r3
}
   18494:	e79b      	b.n	183ce <rpmsg_init_vdev_with_config+0x5a>
	if (role == RPMSG_REMOTE) {
   18496:	f1b8 0f01 	cmp.w	r8, #1
   1849a:	d1a2      	bne.n	183e2 <rpmsg_init_vdev_with_config+0x6e>
		status = rpmsg_virtio_get_status(rvdev);
   1849c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	return rvdev->vdev->func->get_status(rvdev->vdev);
   184a0:	6a03      	ldr	r3, [r0, #32]
   184a2:	681b      	ldr	r3, [r3, #0]
   184a4:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   184a6:	0642      	lsls	r2, r0, #25
   184a8:	d506      	bpl.n	184b8 <rpmsg_init_vdev_with_config+0x144>
			rpmsg_virtio_set_status(rvdev, 0);
   184aa:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   184ae:	2100      	movs	r1, #0
   184b0:	6a03      	ldr	r3, [r0, #32]
   184b2:	685b      	ldr	r3, [r3, #4]
   184b4:	4798      	blx	r3
}
   184b6:	e7f1      	b.n	1849c <rpmsg_init_vdev_with_config+0x128>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   184b8:	0743      	lsls	r3, r0, #29
   184ba:	d5ef      	bpl.n	1849c <rpmsg_init_vdev_with_config+0x128>
   184bc:	e791      	b.n	183e2 <rpmsg_init_vdev_with_config+0x6e>
	if (role == RPMSG_REMOTE) {
   184be:	f1b8 0f01 	cmp.w	r8, #1
   184c2:	d1b7      	bne.n	18434 <rpmsg_init_vdev_with_config+0xc0>
		vq_names[0] = "tx_vq";
   184c4:	4b2d      	ldr	r3, [pc, #180]	; (1857c <rpmsg_init_vdev_with_config+0x208>)
   184c6:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   184c8:	4b2b      	ldr	r3, [pc, #172]	; (18578 <rpmsg_init_vdev_with_config+0x204>)
   184ca:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   184cc:	4b2d      	ldr	r3, [pc, #180]	; (18584 <rpmsg_init_vdev_with_config+0x210>)
   184ce:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   184d0:	4b2b      	ldr	r3, [pc, #172]	; (18580 <rpmsg_init_vdev_with_config+0x20c>)
   184d2:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   184d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   184d6:	699b      	ldr	r3, [r3, #24]
   184d8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[0].vq;
   184dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   184de:	681b      	ldr	r3, [r3, #0]
   184e0:	e7a6      	b.n	18430 <rpmsg_init_vdev_with_config+0xbc>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   184e2:	4648      	mov	r0, r9
   184e4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   184e8:	f007 fc9e 	bl	1fe28 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   184ec:	4605      	mov	r5, r0
   184ee:	b1c8      	cbz	r0, 18524 <rpmsg_init_vdev_with_config+0x1b0>
   184f0:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   184f2:	9008      	str	r0, [sp, #32]
   184f4:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   184f6:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   184f8:	2200      	movs	r2, #0
   184fa:	4281      	cmp	r1, r0
   184fc:	bf28      	it	cs
   184fe:	f04f 31ff 	movcs.w	r1, #4294967295
   18502:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   18506:	4630      	mov	r0, r6
   18508:	f007 f948 	bl	1f79c <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1850c:	9500      	str	r5, [sp, #0]
   1850e:	2301      	movs	r3, #1
   18510:	2200      	movs	r2, #0
   18512:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   18516:	a908      	add	r1, sp, #32
   18518:	f007 f9bf 	bl	1f89a <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1851c:	b918      	cbnz	r0, 18526 <rpmsg_init_vdev_with_config+0x1b2>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1851e:	f10a 0a01 	add.w	sl, sl, #1
   18522:	e7a6      	b.n	18472 <rpmsg_init_vdev_with_config+0xfe>
				return RPMSG_ERR_NO_BUFF;
   18524:	4818      	ldr	r0, [pc, #96]	; (18588 <rpmsg_init_vdev_with_config+0x214>)
   18526:	4607      	mov	r7, r0
   18528:	e751      	b.n	183ce <rpmsg_init_vdev_with_config+0x5a>
	if (rdev->support_ns) {
   1852a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1852e:	e9c4 4400 	strd	r4, r4, [r4]
   18532:	2b00      	cmp	r3, #0
   18534:	f43f af4b 	beq.w	183ce <rpmsg_init_vdev_with_config+0x5a>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   18538:	2300      	movs	r3, #0
   1853a:	9302      	str	r3, [sp, #8]
   1853c:	4b13      	ldr	r3, [pc, #76]	; (1858c <rpmsg_init_vdev_with_config+0x218>)
   1853e:	4620      	mov	r0, r4
   18540:	9301      	str	r3, [sp, #4]
   18542:	2335      	movs	r3, #53	; 0x35
   18544:	4a12      	ldr	r2, [pc, #72]	; (18590 <rpmsg_init_vdev_with_config+0x21c>)
   18546:	9300      	str	r3, [sp, #0]
   18548:	f104 0108 	add.w	r1, r4, #8
   1854c:	f7ff fd2e 	bl	17fac <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   18550:	f1b8 0f00 	cmp.w	r8, #0
   18554:	f47f af3b 	bne.w	183ce <rpmsg_init_vdev_with_config+0x5a>
   18558:	e796      	b.n	18488 <rpmsg_init_vdev_with_config+0x114>
			return RPMSG_ERR_NO_BUFF;
   1855a:	4f0b      	ldr	r7, [pc, #44]	; (18588 <rpmsg_init_vdev_with_config+0x214>)
   1855c:	e737      	b.n	183ce <rpmsg_init_vdev_with_config+0x5a>
   1855e:	bf00      	nop
   18560:	000182a5 	.word	0x000182a5
   18564:	0001fcdb 	.word	0x0001fcdb
   18568:	0001fdf1 	.word	0x0001fdf1
   1856c:	0001fe45 	.word	0x0001fe45
   18570:	000180e1 	.word	0x000180e1
   18574:	fffff82d 	.word	0xfffff82d
   18578:	00024e42 	.word	0x00024e42
   1857c:	00024e48 	.word	0x00024e48
   18580:	000181c9 	.word	0x000181c9
   18584:	0001fce9 	.word	0x0001fce9
   18588:	fffff82e 	.word	0xfffff82e
   1858c:	0001fcfb 	.word	0x0001fcfb
   18590:	00024e4e 	.word	0x00024e4e

00018594 <rpmsg_init_vdev>:
{
   18594:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   18596:	4605      	mov	r5, r0
   18598:	460e      	mov	r6, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1859a:	4907      	ldr	r1, [pc, #28]	; (185b8 <rpmsg_init_vdev+0x24>)
   1859c:	ac02      	add	r4, sp, #8
   1859e:	c903      	ldmia	r1, {r0, r1}
   185a0:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   185a4:	9908      	ldr	r1, [sp, #32]
   185a6:	4628      	mov	r0, r5
   185a8:	9100      	str	r1, [sp, #0]
   185aa:	9401      	str	r4, [sp, #4]
   185ac:	4631      	mov	r1, r6
   185ae:	f7ff fee1 	bl	18374 <rpmsg_init_vdev_with_config>
}
   185b2:	b004      	add	sp, #16
   185b4:	bd70      	pop	{r4, r5, r6, pc}
   185b6:	bf00      	nop
   185b8:	00020968 	.word	0x00020968

000185bc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   185bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   185c0:	b086      	sub	sp, #24
   185c2:	4604      	mov	r4, r0
   185c4:	460e      	mov	r6, r1
   185c6:	af00      	add	r7, sp, #0
	__asm__ volatile(
   185c8:	f04f 0320 	mov.w	r3, #32
   185cc:	f3ef 8811 	mrs	r8, BASEPRI
   185d0:	f383 8812 	msr	BASEPRI_MAX, r3
   185d4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   185d8:	f002 fede 	bl	1b398 <z_impl_z_current_get>
   185dc:	2c04      	cmp	r4, #4
   185de:	bf98      	it	ls
   185e0:	4b34      	ldrls	r3, [pc, #208]	; (186b4 <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   185e2:	46e9      	mov	r9, sp
   185e4:	b08a      	sub	sp, #40	; 0x28
   185e6:	4605      	mov	r5, r0
   185e8:	466a      	mov	r2, sp
   185ea:	bf94      	ite	ls
   185ec:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   185f0:	4b31      	ldrhi	r3, [pc, #196]	; (186b8 <z_fatal_error+0xfc>)
   185f2:	61d3      	str	r3, [r2, #28]
   185f4:	f240 3301 	movw	r3, #769	; 0x301
   185f8:	f04f 0a00 	mov.w	sl, #0
   185fc:	8493      	strh	r3, [r2, #36]	; 0x24
   185fe:	492f      	ldr	r1, [pc, #188]	; (186bc <z_fatal_error+0x100>)
   18600:	4b2f      	ldr	r3, [pc, #188]	; (186c0 <z_fatal_error+0x104>)
   18602:	e9c2 1405 	strd	r1, r4, [r2, #20]
   18606:	f8c2 a020 	str.w	sl, [r2, #32]
   1860a:	f842 3f10 	str.w	r3, [r2, #16]!
   1860e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   18612:	4653      	mov	r3, sl
   18614:	482b      	ldr	r0, [pc, #172]	; (186c4 <z_fatal_error+0x108>)
   18616:	f7f3 f977 	bl	b908 <z_impl_z_log_msg_static_create>
   1861a:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1861c:	b17e      	cbz	r6, 1863e <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1861e:	69f3      	ldr	r3, [r6, #28]
   18620:	f3c3 0308 	ubfx	r3, r3, #0, #9
   18624:	b15b      	cbz	r3, 1863e <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   18626:	4b28      	ldr	r3, [pc, #160]	; (186c8 <z_fatal_error+0x10c>)
   18628:	617b      	str	r3, [r7, #20]
   1862a:	2302      	movs	r3, #2
   1862c:	613b      	str	r3, [r7, #16]
   1862e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18632:	4653      	mov	r3, sl
   18634:	4823      	ldr	r0, [pc, #140]	; (186c4 <z_fatal_error+0x108>)
   18636:	f107 0210 	add.w	r2, r7, #16
   1863a:	f7f3 f965 	bl	b908 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1863e:	b12d      	cbz	r5, 1864c <z_fatal_error+0x90>
   18640:	4628      	mov	r0, r5
   18642:	f007 fcab 	bl	1ff9c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   18646:	b108      	cbz	r0, 1864c <z_fatal_error+0x90>
   18648:	7803      	ldrb	r3, [r0, #0]
   1864a:	b903      	cbnz	r3, 1864e <z_fatal_error+0x92>
		thread_name = "unknown";
   1864c:	481f      	ldr	r0, [pc, #124]	; (186cc <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1864e:	46e9      	mov	r9, sp
   18650:	b08a      	sub	sp, #40	; 0x28
   18652:	466a      	mov	r2, sp
   18654:	4b1e      	ldr	r3, [pc, #120]	; (186d0 <z_fatal_error+0x114>)
   18656:	61d0      	str	r0, [r2, #28]
   18658:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1865c:	f240 3301 	movw	r3, #769	; 0x301
   18660:	8413      	strh	r3, [r2, #32]
   18662:	4b1c      	ldr	r3, [pc, #112]	; (186d4 <z_fatal_error+0x118>)
   18664:	f842 3f10 	str.w	r3, [r2, #16]!
   18668:	2300      	movs	r3, #0
   1866a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1866e:	4815      	ldr	r0, [pc, #84]	; (186c4 <z_fatal_error+0x108>)
   18670:	f7f3 f94a 	bl	b908 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   18674:	4631      	mov	r1, r6
   18676:	46cd      	mov	sp, r9
   18678:	4620      	mov	r0, r4
   1867a:	f7fd fded 	bl	16258 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1867e:	2c04      	cmp	r4, #4
   18680:	d10c      	bne.n	1869c <z_fatal_error+0xe0>
   18682:	4915      	ldr	r1, [pc, #84]	; (186d8 <z_fatal_error+0x11c>)
   18684:	2393      	movs	r3, #147	; 0x93
   18686:	4a15      	ldr	r2, [pc, #84]	; (186dc <z_fatal_error+0x120>)
   18688:	4815      	ldr	r0, [pc, #84]	; (186e0 <z_fatal_error+0x124>)
   1868a:	f004 fa2e 	bl	1caea <assert_print>
   1868e:	4815      	ldr	r0, [pc, #84]	; (186e4 <z_fatal_error+0x128>)
   18690:	f004 fa2b 	bl	1caea <assert_print>
   18694:	2193      	movs	r1, #147	; 0x93
   18696:	4811      	ldr	r0, [pc, #68]	; (186dc <z_fatal_error+0x120>)
   18698:	f004 fa20 	bl	1cadc <assert_post_action>
	__asm__ volatile(
   1869c:	f388 8811 	msr	BASEPRI, r8
   186a0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   186a4:	4628      	mov	r0, r5
   186a6:	f7f5 f87d 	bl	d7a4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   186aa:	3718      	adds	r7, #24
   186ac:	46bd      	mov	sp, r7
   186ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   186b2:	bf00      	nop
   186b4:	00021170 	.word	0x00021170
   186b8:	00024e51 	.word	0x00024e51
   186bc:	00024e67 	.word	0x00024e67
   186c0:	01000005 	.word	0x01000005
   186c4:	000208c4 	.word	0x000208c4
   186c8:	00024e8f 	.word	0x00024e8f
   186cc:	00024e5f 	.word	0x00024e5f
   186d0:	00024eb0 	.word	0x00024eb0
   186d4:	01000004 	.word	0x01000004
   186d8:	00024eea 	.word	0x00024eea
   186dc:	00024ec8 	.word	0x00024ec8
   186e0:	00021547 	.word	0x00021547
   186e4:	00024f07 	.word	0x00024f07

000186e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   186e8:	4b0f      	ldr	r3, [pc, #60]	; (18728 <z_sys_init_run_level+0x40>)
{
   186ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   186ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   186f0:	3001      	adds	r0, #1
   186f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   186f6:	42a6      	cmp	r6, r4
   186f8:	d800      	bhi.n	186fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   186fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   186fc:	e9d4 3500 	ldrd	r3, r5, [r4]
   18700:	4628      	mov	r0, r5
   18702:	4798      	blx	r3
		if (dev != NULL) {
   18704:	b16d      	cbz	r5, 18722 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   18706:	b138      	cbz	r0, 18718 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   18708:	2800      	cmp	r0, #0
   1870a:	bfb8      	it	lt
   1870c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1870e:	28ff      	cmp	r0, #255	; 0xff
   18710:	bfa8      	it	ge
   18712:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   18714:	68eb      	ldr	r3, [r5, #12]
   18716:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   18718:	68ea      	ldr	r2, [r5, #12]
   1871a:	7853      	ldrb	r3, [r2, #1]
   1871c:	f043 0301 	orr.w	r3, r3, #1
   18720:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18722:	3408      	adds	r4, #8
   18724:	e7e7      	b.n	186f6 <z_sys_init_run_level+0xe>
   18726:	bf00      	nop
   18728:	00021184 	.word	0x00021184

0001872c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1872c:	2201      	movs	r2, #1
{
   1872e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   18730:	4b09      	ldr	r3, [pc, #36]	; (18758 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   18732:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   18734:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   18736:	f7ff ffd7 	bl	186e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1873a:	f003 ff35 	bl	1c5a8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1873e:	2004      	movs	r0, #4
   18740:	f7ff ffd2 	bl	186e8 <z_sys_init_run_level>

	z_init_static_threads();
   18744:	f000 fb66 	bl	18e14 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   18748:	f7f0 fd20 	bl	918c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1874c:	4a03      	ldr	r2, [pc, #12]	; (1875c <bg_thread_main+0x30>)
   1874e:	7b13      	ldrb	r3, [r2, #12]
   18750:	f023 0301 	bic.w	r3, r3, #1
   18754:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   18756:	bd08      	pop	{r3, pc}
   18758:	20009d1c 	.word	0x20009d1c
   1875c:	200095c8 	.word	0x200095c8

00018760 <z_bss_zero>:
{
   18760:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   18762:	4803      	ldr	r0, [pc, #12]	; (18770 <z_bss_zero+0x10>)
   18764:	4a03      	ldr	r2, [pc, #12]	; (18774 <z_bss_zero+0x14>)
   18766:	2100      	movs	r1, #0
   18768:	1a12      	subs	r2, r2, r0
   1876a:	f007 fbec 	bl	1ff46 <z_early_memset>
}
   1876e:	bd08      	pop	{r3, pc}
   18770:	200087c8 	.word	0x200087c8
   18774:	20009d20 	.word	0x20009d20

00018778 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   18778:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1877a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1877c:	4e13      	ldr	r6, [pc, #76]	; (187cc <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1877e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   18780:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   18784:	2300      	movs	r3, #0
{
   18786:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   18788:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1878c:	220f      	movs	r2, #15
   1878e:	9301      	str	r3, [sp, #4]
   18790:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18794:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   18796:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1879a:	4d0d      	ldr	r5, [pc, #52]	; (187d0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1879c:	490d      	ldr	r1, [pc, #52]	; (187d4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1879e:	fb03 5500 	mla	r5, r3, r0, r5
{
   187a2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   187a4:	fb02 1100 	mla	r1, r2, r0, r1
   187a8:	4b0b      	ldr	r3, [pc, #44]	; (187d8 <z_init_cpu+0x60>)
   187aa:	4630      	mov	r0, r6
   187ac:	9500      	str	r5, [sp, #0]
   187ae:	f000 fa97 	bl	18ce0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   187b2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   187b4:	752c      	strb	r4, [r5, #20]
   187b6:	f023 0304 	bic.w	r3, r3, #4
   187ba:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   187bc:	4b07      	ldr	r3, [pc, #28]	; (187dc <z_init_cpu+0x64>)
   187be:	3401      	adds	r4, #1
   187c0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   187c4:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   187c6:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   187c8:	b006      	add	sp, #24
   187ca:	bd70      	pop	{r4, r5, r6, pc}
   187cc:	20009540 	.word	0x20009540
   187d0:	20009bfc 	.word	0x20009bfc
   187d4:	2000c3e0 	.word	0x2000c3e0
   187d8:	00018f65 	.word	0x00018f65
   187dc:	2000bbe0 	.word	0x2000bbe0

000187e0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   187e0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   187e2:	2000      	movs	r0, #0
{
   187e4:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   187e6:	f7ff ff7f 	bl	186e8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   187ea:	4b2f      	ldr	r3, [pc, #188]	; (188a8 <z_cstart+0xc8>)
	uint32_t msp =
   187ec:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   187f0:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   187f4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   187f8:	2400      	movs	r4, #0
   187fa:	23e0      	movs	r3, #224	; 0xe0
   187fc:	4d2b      	ldr	r5, [pc, #172]	; (188ac <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   187fe:	4e2c      	ldr	r6, [pc, #176]	; (188b0 <z_cstart+0xd0>)
   18800:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   18804:	77ec      	strb	r4, [r5, #31]
   18806:	762c      	strb	r4, [r5, #24]
   18808:	766c      	strb	r4, [r5, #25]
   1880a:	76ac      	strb	r4, [r5, #26]
   1880c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18810:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18812:	4f28      	ldr	r7, [pc, #160]	; (188b4 <z_cstart+0xd4>)
   18814:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18818:	626b      	str	r3, [r5, #36]	; 0x24
   1881a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1881e:	f7f4 ff25 	bl	d66c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18822:	f7f4 fa39 	bl	cc98 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18826:	f04f 33ff 	mov.w	r3, #4294967295
   1882a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1882c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1882e:	f7f5 f999 	bl	db64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18832:	f7f4 ffcd 	bl	d7d0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   18836:	f7f2 fe5d 	bl	b4f4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1883a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1883e:	ad06      	add	r5, sp, #24
   18840:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   18842:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   18846:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1884a:	f003 fe8f 	bl	1c56c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1884e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   18850:	f007 fb6d 	bl	1ff2e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   18854:	2001      	movs	r0, #1
   18856:	f7ff ff47 	bl	186e8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1885a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1885c:	4d16      	ldr	r5, [pc, #88]	; (188b8 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1885e:	f7ff ff43 	bl	186e8 <z_sys_init_run_level>
	z_sched_init();
   18862:	f002 fc1f 	bl	1b0a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18866:	4b15      	ldr	r3, [pc, #84]	; (188bc <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   18868:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1886a:	9305      	str	r3, [sp, #20]
   1886c:	2301      	movs	r3, #1
   1886e:	4914      	ldr	r1, [pc, #80]	; (188c0 <z_cstart+0xe0>)
   18870:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18874:	e9cd 4303 	strd	r4, r3, [sp, #12]
   18878:	4628      	mov	r0, r5
   1887a:	463b      	mov	r3, r7
   1887c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18880:	9400      	str	r4, [sp, #0]
   18882:	f000 fa2d 	bl	18ce0 <z_setup_new_thread>
   18886:	4606      	mov	r6, r0
   18888:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1888a:	4628      	mov	r0, r5
   1888c:	f022 0204 	bic.w	r2, r2, #4
   18890:	736a      	strb	r2, [r5, #13]
   18892:	f001 fddf 	bl	1a454 <z_ready_thread>
	z_init_cpu(0);
   18896:	4620      	mov	r0, r4
   18898:	f7ff ff6e 	bl	18778 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1889c:	463a      	mov	r2, r7
   1889e:	4631      	mov	r1, r6
   188a0:	4628      	mov	r0, r5
   188a2:	f7f4 fb79 	bl	cf98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   188a6:	bf00      	nop
   188a8:	2000bbe0 	.word	0x2000bbe0
   188ac:	e000ed00 	.word	0xe000ed00
   188b0:	20009bfc 	.word	0x20009bfc
   188b4:	0001872d 	.word	0x0001872d
   188b8:	200095c8 	.word	0x200095c8
   188bc:	00024f86 	.word	0x00024f86
   188c0:	2000c520 	.word	0x2000c520

000188c4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   188c4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   188c6:	4c0d      	ldr	r4, [pc, #52]	; (188fc <statics_init+0x38>)
   188c8:	4d0d      	ldr	r5, [pc, #52]	; (18900 <statics_init+0x3c>)
   188ca:	42ac      	cmp	r4, r5
   188cc:	d913      	bls.n	188f6 <statics_init+0x32>
   188ce:	490d      	ldr	r1, [pc, #52]	; (18904 <statics_init+0x40>)
   188d0:	2318      	movs	r3, #24
   188d2:	4a0d      	ldr	r2, [pc, #52]	; (18908 <statics_init+0x44>)
   188d4:	480d      	ldr	r0, [pc, #52]	; (1890c <statics_init+0x48>)
   188d6:	f004 f908 	bl	1caea <assert_print>
   188da:	480d      	ldr	r0, [pc, #52]	; (18910 <statics_init+0x4c>)
   188dc:	f004 f905 	bl	1caea <assert_print>
   188e0:	2118      	movs	r1, #24
   188e2:	4809      	ldr	r0, [pc, #36]	; (18908 <statics_init+0x44>)
   188e4:	f004 f8fa 	bl	1cadc <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   188e8:	4620      	mov	r0, r4
   188ea:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   188ee:	f007 fb2e 	bl	1ff4e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   188f2:	3418      	adds	r4, #24
   188f4:	e7e9      	b.n	188ca <statics_init+0x6>
   188f6:	d3f7      	bcc.n	188e8 <statics_init+0x24>
		}
	}
	return 0;
}
   188f8:	2000      	movs	r0, #0
   188fa:	bd38      	pop	{r3, r4, r5, pc}
   188fc:	200085b0 	.word	0x200085b0
   18900:	200085c8 	.word	0x200085c8
   18904:	00024fb0 	.word	0x00024fb0
   18908:	00024f8e 	.word	0x00024f8e
   1890c:	00021547 	.word	0x00021547
   18910:	00021c6a 	.word	0x00021c6a

00018914 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   18914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18918:	b085      	sub	sp, #20
   1891a:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1891e:	4680      	mov	r8, r0
   18920:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18922:	4648      	mov	r0, r9
   18924:	4659      	mov	r1, fp
{
   18926:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18928:	f007 fc2f 	bl	2018a <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1892c:	f1bb 3fff 	cmp.w	fp, #4294967295
   18930:	bf08      	it	eq
   18932:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18936:	4606      	mov	r6, r0
   18938:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1893a:	bf04      	itt	eq
   1893c:	f04f 36ff 	moveq.w	r6, #4294967295
   18940:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18944:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   18948:	f04f 0320 	mov.w	r3, #32
   1894c:	f3ef 8511 	mrs	r5, BASEPRI
   18950:	f383 8812 	msr	BASEPRI_MAX, r3
   18954:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18958:	4620      	mov	r0, r4
   1895a:	f000 fadf 	bl	18f1c <z_spin_lock_valid>
   1895e:	b960      	cbnz	r0, 1897a <k_heap_aligned_alloc+0x66>
   18960:	2394      	movs	r3, #148	; 0x94
   18962:	4a33      	ldr	r2, [pc, #204]	; (18a30 <k_heap_aligned_alloc+0x11c>)
   18964:	4933      	ldr	r1, [pc, #204]	; (18a34 <k_heap_aligned_alloc+0x120>)
   18966:	4834      	ldr	r0, [pc, #208]	; (18a38 <k_heap_aligned_alloc+0x124>)
   18968:	f004 f8bf 	bl	1caea <assert_print>
   1896c:	4621      	mov	r1, r4
   1896e:	4833      	ldr	r0, [pc, #204]	; (18a3c <k_heap_aligned_alloc+0x128>)
   18970:	f004 f8bb 	bl	1caea <assert_print>
   18974:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18976:	482e      	ldr	r0, [pc, #184]	; (18a30 <k_heap_aligned_alloc+0x11c>)
   18978:	e031      	b.n	189de <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   1897a:	4620      	mov	r0, r4
   1897c:	f000 faea 	bl	18f54 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18980:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   18984:	b113      	cbz	r3, 1898c <k_heap_aligned_alloc+0x78>
   18986:	ea5b 0909 	orrs.w	r9, fp, r9
   1898a:	d11d      	bne.n	189c8 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1898c:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   18990:	4652      	mov	r2, sl
   18992:	4640      	mov	r0, r8
   18994:	9903      	ldr	r1, [sp, #12]
   18996:	f7f1 f8e9 	bl	9b6c <sys_heap_aligned_alloc>
   1899a:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1899c:	f003 f8ea 	bl	1bb74 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   189a0:	f1b9 0f00 	cmp.w	r9, #0
   189a4:	d01d      	beq.n	189e2 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   189a6:	4620      	mov	r0, r4
   189a8:	f000 fac6 	bl	18f38 <z_spin_unlock_valid>
   189ac:	2800      	cmp	r0, #0
   189ae:	d137      	bne.n	18a20 <k_heap_aligned_alloc+0x10c>
   189b0:	23c2      	movs	r3, #194	; 0xc2
   189b2:	4a1f      	ldr	r2, [pc, #124]	; (18a30 <k_heap_aligned_alloc+0x11c>)
   189b4:	4922      	ldr	r1, [pc, #136]	; (18a40 <k_heap_aligned_alloc+0x12c>)
   189b6:	4820      	ldr	r0, [pc, #128]	; (18a38 <k_heap_aligned_alloc+0x124>)
   189b8:	f004 f897 	bl	1caea <assert_print>
   189bc:	4621      	mov	r1, r4
   189be:	4821      	ldr	r0, [pc, #132]	; (18a44 <k_heap_aligned_alloc+0x130>)
   189c0:	f004 f893 	bl	1caea <assert_print>
   189c4:	21c2      	movs	r1, #194	; 0xc2
   189c6:	e7d6      	b.n	18976 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   189c8:	491f      	ldr	r1, [pc, #124]	; (18a48 <k_heap_aligned_alloc+0x134>)
   189ca:	234c      	movs	r3, #76	; 0x4c
   189cc:	4a1f      	ldr	r2, [pc, #124]	; (18a4c <k_heap_aligned_alloc+0x138>)
   189ce:	481a      	ldr	r0, [pc, #104]	; (18a38 <k_heap_aligned_alloc+0x124>)
   189d0:	f004 f88b 	bl	1caea <assert_print>
   189d4:	481e      	ldr	r0, [pc, #120]	; (18a50 <k_heap_aligned_alloc+0x13c>)
   189d6:	f004 f888 	bl	1caea <assert_print>
   189da:	214c      	movs	r1, #76	; 0x4c
   189dc:	481b      	ldr	r0, [pc, #108]	; (18a4c <k_heap_aligned_alloc+0x138>)
   189de:	f004 f87d 	bl	1cadc <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   189e2:	1a30      	subs	r0, r6, r0
   189e4:	eb67 0101 	sbc.w	r1, r7, r1
   189e8:	2801      	cmp	r0, #1
   189ea:	f171 0300 	sbcs.w	r3, r1, #0
   189ee:	dbda      	blt.n	189a6 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   189f0:	e9cd 0100 	strd	r0, r1, [sp]
   189f4:	465a      	mov	r2, fp
   189f6:	4629      	mov	r1, r5
   189f8:	4620      	mov	r0, r4
   189fa:	f002 f885 	bl	1ab08 <z_pend_curr>
   189fe:	f04f 0320 	mov.w	r3, #32
   18a02:	f3ef 8511 	mrs	r5, BASEPRI
   18a06:	f383 8812 	msr	BASEPRI_MAX, r3
   18a0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a0e:	4620      	mov	r0, r4
   18a10:	f000 fa84 	bl	18f1c <z_spin_lock_valid>
   18a14:	2800      	cmp	r0, #0
   18a16:	d0a3      	beq.n	18960 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   18a18:	4620      	mov	r0, r4
   18a1a:	f000 fa9b 	bl	18f54 <z_spin_lock_set_owner>
	return k;
   18a1e:	e7b7      	b.n	18990 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   18a20:	f385 8811 	msr	BASEPRI, r5
   18a24:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   18a28:	4648      	mov	r0, r9
   18a2a:	b005      	add	sp, #20
   18a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a30:	0002197b 	.word	0x0002197b
   18a34:	000219d4 	.word	0x000219d4
   18a38:	00021547 	.word	0x00021547
   18a3c:	000219e9 	.word	0x000219e9
   18a40:	000219a8 	.word	0x000219a8
   18a44:	000219bf 	.word	0x000219bf
   18a48:	00024fc6 	.word	0x00024fc6
   18a4c:	00024f8e 	.word	0x00024f8e
   18a50:	00023bf8 	.word	0x00023bf8

00018a54 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   18a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a56:	4605      	mov	r5, r0
   18a58:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18a5a:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   18a5e:	f04f 0320 	mov.w	r3, #32
   18a62:	f3ef 8711 	mrs	r7, BASEPRI
   18a66:	f383 8812 	msr	BASEPRI_MAX, r3
   18a6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a6e:	4620      	mov	r0, r4
   18a70:	f000 fa54 	bl	18f1c <z_spin_lock_valid>
   18a74:	b968      	cbnz	r0, 18a92 <k_heap_free+0x3e>
   18a76:	2394      	movs	r3, #148	; 0x94
   18a78:	4a19      	ldr	r2, [pc, #100]	; (18ae0 <k_heap_free+0x8c>)
   18a7a:	491a      	ldr	r1, [pc, #104]	; (18ae4 <k_heap_free+0x90>)
   18a7c:	481a      	ldr	r0, [pc, #104]	; (18ae8 <k_heap_free+0x94>)
   18a7e:	f004 f834 	bl	1caea <assert_print>
   18a82:	4621      	mov	r1, r4
   18a84:	4819      	ldr	r0, [pc, #100]	; (18aec <k_heap_free+0x98>)
   18a86:	f004 f830 	bl	1caea <assert_print>
   18a8a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a8c:	4814      	ldr	r0, [pc, #80]	; (18ae0 <k_heap_free+0x8c>)
   18a8e:	f004 f825 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   18a92:	4620      	mov	r0, r4
   18a94:	f000 fa5e 	bl	18f54 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   18a98:	4628      	mov	r0, r5
   18a9a:	4631      	mov	r1, r6
   18a9c:	f7f1 f820 	bl	9ae0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   18aa0:	f105 000c 	add.w	r0, r5, #12
   18aa4:	f007 fb57 	bl	20156 <z_unpend_all>
   18aa8:	b128      	cbz	r0, 18ab6 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   18aaa:	4639      	mov	r1, r7
   18aac:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   18aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   18ab2:	f001 bd5b 	b.w	1a56c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ab6:	4620      	mov	r0, r4
   18ab8:	f000 fa3e 	bl	18f38 <z_spin_unlock_valid>
   18abc:	b958      	cbnz	r0, 18ad6 <k_heap_free+0x82>
   18abe:	23c2      	movs	r3, #194	; 0xc2
   18ac0:	4a07      	ldr	r2, [pc, #28]	; (18ae0 <k_heap_free+0x8c>)
   18ac2:	490b      	ldr	r1, [pc, #44]	; (18af0 <k_heap_free+0x9c>)
   18ac4:	4808      	ldr	r0, [pc, #32]	; (18ae8 <k_heap_free+0x94>)
   18ac6:	f004 f810 	bl	1caea <assert_print>
   18aca:	4621      	mov	r1, r4
   18acc:	4809      	ldr	r0, [pc, #36]	; (18af4 <k_heap_free+0xa0>)
   18ace:	f004 f80c 	bl	1caea <assert_print>
   18ad2:	21c2      	movs	r1, #194	; 0xc2
   18ad4:	e7da      	b.n	18a8c <k_heap_free+0x38>
	__asm__ volatile(
   18ad6:	f387 8811 	msr	BASEPRI, r7
   18ada:	f3bf 8f6f 	isb	sy
}
   18ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ae0:	0002197b 	.word	0x0002197b
   18ae4:	000219d4 	.word	0x000219d4
   18ae8:	00021547 	.word	0x00021547
   18aec:	000219e9 	.word	0x000219e9
   18af0:	000219a8 	.word	0x000219a8
   18af4:	000219bf 	.word	0x000219bf

00018af8 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   18af8:	2000      	movs	r0, #0
{
   18afa:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18afc:	4c0c      	ldr	r4, [pc, #48]	; (18b30 <init_mem_slab_module+0x38>)
   18afe:	4d0d      	ldr	r5, [pc, #52]	; (18b34 <init_mem_slab_module+0x3c>)
   18b00:	42ac      	cmp	r4, r5
   18b02:	d913      	bls.n	18b2c <init_mem_slab_module+0x34>
   18b04:	490c      	ldr	r1, [pc, #48]	; (18b38 <init_mem_slab_module+0x40>)
   18b06:	233d      	movs	r3, #61	; 0x3d
   18b08:	4a0c      	ldr	r2, [pc, #48]	; (18b3c <init_mem_slab_module+0x44>)
   18b0a:	480d      	ldr	r0, [pc, #52]	; (18b40 <init_mem_slab_module+0x48>)
   18b0c:	f003 ffed 	bl	1caea <assert_print>
   18b10:	480c      	ldr	r0, [pc, #48]	; (18b44 <init_mem_slab_module+0x4c>)
   18b12:	f003 ffea 	bl	1caea <assert_print>
   18b16:	213d      	movs	r1, #61	; 0x3d
   18b18:	4808      	ldr	r0, [pc, #32]	; (18b3c <init_mem_slab_module+0x44>)
   18b1a:	f003 ffdf 	bl	1cadc <assert_post_action>
		rc = create_free_list(slab);
   18b1e:	4620      	mov	r0, r4
   18b20:	f007 fa1d 	bl	1ff5e <create_free_list>
		if (rc < 0) {
   18b24:	2800      	cmp	r0, #0
   18b26:	db02      	blt.n	18b2e <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18b28:	3420      	adds	r4, #32
   18b2a:	e7e9      	b.n	18b00 <init_mem_slab_module+0x8>
   18b2c:	d3f7      	bcc.n	18b1e <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   18b2e:	bd38      	pop	{r3, r4, r5, pc}
   18b30:	20008550 	.word	0x20008550
   18b34:	200085b0 	.word	0x200085b0
   18b38:	00025031 	.word	0x00025031
   18b3c:	0002500c 	.word	0x0002500c
   18b40:	00021547 	.word	0x00021547
   18b44:	00021c6a 	.word	0x00021c6a

00018b48 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18b4c:	4604      	mov	r4, r0
   18b4e:	460e      	mov	r6, r1
   18b50:	4690      	mov	r8, r2
   18b52:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   18b54:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   18b58:	f04f 0320 	mov.w	r3, #32
   18b5c:	f3ef 8911 	mrs	r9, BASEPRI
   18b60:	f383 8812 	msr	BASEPRI_MAX, r3
   18b64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b68:	4628      	mov	r0, r5
   18b6a:	f000 f9d7 	bl	18f1c <z_spin_lock_valid>
   18b6e:	b968      	cbnz	r0, 18b8c <k_mem_slab_alloc+0x44>
   18b70:	2394      	movs	r3, #148	; 0x94
   18b72:	4a23      	ldr	r2, [pc, #140]	; (18c00 <k_mem_slab_alloc+0xb8>)
   18b74:	4923      	ldr	r1, [pc, #140]	; (18c04 <k_mem_slab_alloc+0xbc>)
   18b76:	4824      	ldr	r0, [pc, #144]	; (18c08 <k_mem_slab_alloc+0xc0>)
   18b78:	f003 ffb7 	bl	1caea <assert_print>
   18b7c:	4629      	mov	r1, r5
   18b7e:	4823      	ldr	r0, [pc, #140]	; (18c0c <k_mem_slab_alloc+0xc4>)
   18b80:	f003 ffb3 	bl	1caea <assert_print>
   18b84:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b86:	481e      	ldr	r0, [pc, #120]	; (18c00 <k_mem_slab_alloc+0xb8>)
   18b88:	f003 ffa8 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   18b8c:	4628      	mov	r0, r5
   18b8e:	f000 f9e1 	bl	18f54 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   18b92:	69a3      	ldr	r3, [r4, #24]
   18b94:	b1b3      	cbz	r3, 18bc4 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   18b96:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   18b98:	681b      	ldr	r3, [r3, #0]
   18b9a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   18b9c:	69e3      	ldr	r3, [r4, #28]
   18b9e:	3301      	adds	r3, #1
   18ba0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18ba2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ba4:	4628      	mov	r0, r5
   18ba6:	f000 f9c7 	bl	18f38 <z_spin_unlock_valid>
   18baa:	bb18      	cbnz	r0, 18bf4 <k_mem_slab_alloc+0xac>
   18bac:	23c2      	movs	r3, #194	; 0xc2
   18bae:	4a14      	ldr	r2, [pc, #80]	; (18c00 <k_mem_slab_alloc+0xb8>)
   18bb0:	4917      	ldr	r1, [pc, #92]	; (18c10 <k_mem_slab_alloc+0xc8>)
   18bb2:	4815      	ldr	r0, [pc, #84]	; (18c08 <k_mem_slab_alloc+0xc0>)
   18bb4:	f003 ff99 	bl	1caea <assert_print>
   18bb8:	4629      	mov	r1, r5
   18bba:	4816      	ldr	r0, [pc, #88]	; (18c14 <k_mem_slab_alloc+0xcc>)
   18bbc:	f003 ff95 	bl	1caea <assert_print>
   18bc0:	21c2      	movs	r1, #194	; 0xc2
   18bc2:	e7e0      	b.n	18b86 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   18bc4:	ea58 0207 	orrs.w	r2, r8, r7
   18bc8:	d103      	bne.n	18bd2 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   18bca:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   18bce:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   18bd0:	e7e8      	b.n	18ba4 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   18bd2:	4622      	mov	r2, r4
   18bd4:	4649      	mov	r1, r9
   18bd6:	4628      	mov	r0, r5
   18bd8:	e9cd 8700 	strd	r8, r7, [sp]
   18bdc:	f001 ff94 	bl	1ab08 <z_pend_curr>
		if (result == 0) {
   18be0:	4604      	mov	r4, r0
   18be2:	b918      	cbnz	r0, 18bec <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   18be4:	4b0c      	ldr	r3, [pc, #48]	; (18c18 <k_mem_slab_alloc+0xd0>)
   18be6:	689b      	ldr	r3, [r3, #8]
   18be8:	695b      	ldr	r3, [r3, #20]
   18bea:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   18bec:	4620      	mov	r0, r4
   18bee:	b003      	add	sp, #12
   18bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   18bf4:	f389 8811 	msr	BASEPRI, r9
   18bf8:	f3bf 8f6f 	isb	sy
	return result;
   18bfc:	e7f6      	b.n	18bec <k_mem_slab_alloc+0xa4>
   18bfe:	bf00      	nop
   18c00:	0002197b 	.word	0x0002197b
   18c04:	000219d4 	.word	0x000219d4
   18c08:	00021547 	.word	0x00021547
   18c0c:	000219e9 	.word	0x000219e9
   18c10:	000219a8 	.word	0x000219a8
   18c14:	000219bf 	.word	0x000219bf
   18c18:	20009bfc 	.word	0x20009bfc

00018c1c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c20:	4604      	mov	r4, r0
   18c22:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   18c24:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   18c28:	f04f 0320 	mov.w	r3, #32
   18c2c:	f3ef 8711 	mrs	r7, BASEPRI
   18c30:	f383 8812 	msr	BASEPRI_MAX, r3
   18c34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c38:	4628      	mov	r0, r5
   18c3a:	f000 f96f 	bl	18f1c <z_spin_lock_valid>
   18c3e:	b968      	cbnz	r0, 18c5c <k_mem_slab_free+0x40>
   18c40:	2394      	movs	r3, #148	; 0x94
   18c42:	4a21      	ldr	r2, [pc, #132]	; (18cc8 <k_mem_slab_free+0xac>)
   18c44:	4921      	ldr	r1, [pc, #132]	; (18ccc <k_mem_slab_free+0xb0>)
   18c46:	4822      	ldr	r0, [pc, #136]	; (18cd0 <k_mem_slab_free+0xb4>)
   18c48:	f003 ff4f 	bl	1caea <assert_print>
   18c4c:	4629      	mov	r1, r5
   18c4e:	4821      	ldr	r0, [pc, #132]	; (18cd4 <k_mem_slab_free+0xb8>)
   18c50:	f003 ff4b 	bl	1caea <assert_print>
   18c54:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c56:	481c      	ldr	r0, [pc, #112]	; (18cc8 <k_mem_slab_free+0xac>)
   18c58:	f003 ff40 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   18c5c:	4628      	mov	r0, r5
   18c5e:	f000 f979 	bl	18f54 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   18c62:	f8d4 8018 	ldr.w	r8, [r4, #24]
   18c66:	f1b8 0f00 	cmp.w	r8, #0
   18c6a:	d10f      	bne.n	18c8c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   18c6c:	4620      	mov	r0, r4
   18c6e:	f002 f9c9 	bl	1b004 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   18c72:	b158      	cbz	r0, 18c8c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18c74:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18c76:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18c7a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   18c7c:	f001 fbea 	bl	1a454 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   18c80:	4639      	mov	r1, r7
   18c82:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   18c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   18c88:	f001 bc70 	b.w	1a56c <z_reschedule>
	**(char ***) mem = slab->free_list;
   18c8c:	6833      	ldr	r3, [r6, #0]
   18c8e:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c90:	4628      	mov	r0, r5
   18c92:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   18c94:	6833      	ldr	r3, [r6, #0]
   18c96:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   18c98:	69e3      	ldr	r3, [r4, #28]
   18c9a:	3b01      	subs	r3, #1
   18c9c:	61e3      	str	r3, [r4, #28]
   18c9e:	f000 f94b 	bl	18f38 <z_spin_unlock_valid>
   18ca2:	b958      	cbnz	r0, 18cbc <k_mem_slab_free+0xa0>
   18ca4:	23c2      	movs	r3, #194	; 0xc2
   18ca6:	4a08      	ldr	r2, [pc, #32]	; (18cc8 <k_mem_slab_free+0xac>)
   18ca8:	490b      	ldr	r1, [pc, #44]	; (18cd8 <k_mem_slab_free+0xbc>)
   18caa:	4809      	ldr	r0, [pc, #36]	; (18cd0 <k_mem_slab_free+0xb4>)
   18cac:	f003 ff1d 	bl	1caea <assert_print>
   18cb0:	4629      	mov	r1, r5
   18cb2:	480a      	ldr	r0, [pc, #40]	; (18cdc <k_mem_slab_free+0xc0>)
   18cb4:	f003 ff19 	bl	1caea <assert_print>
   18cb8:	21c2      	movs	r1, #194	; 0xc2
   18cba:	e7cc      	b.n	18c56 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   18cbc:	f387 8811 	msr	BASEPRI, r7
   18cc0:	f3bf 8f6f 	isb	sy
}
   18cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18cc8:	0002197b 	.word	0x0002197b
   18ccc:	000219d4 	.word	0x000219d4
   18cd0:	00021547 	.word	0x00021547
   18cd4:	000219e9 	.word	0x000219e9
   18cd8:	000219a8 	.word	0x000219a8
   18cdc:	000219bf 	.word	0x000219bf

00018ce0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   18ce0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   18ce2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   18ce4:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   18ce6:	2e0f      	cmp	r6, #15
   18ce8:	d12a      	bne.n	18d40 <z_setup_new_thread+0x60>
   18cea:	4821      	ldr	r0, [pc, #132]	; (18d70 <z_setup_new_thread+0x90>)
   18cec:	4283      	cmp	r3, r0
   18cee:	d12b      	bne.n	18d48 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   18cf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   18cf4:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   18cf8:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   18cfa:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   18cfc:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18cfe:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18d00:	3207      	adds	r2, #7
   18d02:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   18d06:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   18d0a:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   18d0c:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   18d10:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   18d12:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   18d16:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   18d18:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   18d1a:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18d1c:	9202      	str	r2, [sp, #8]
   18d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18d20:	4620      	mov	r0, r4
   18d22:	9201      	str	r2, [sp, #4]
   18d24:	9a08      	ldr	r2, [sp, #32]
   18d26:	9200      	str	r2, [sp, #0]
   18d28:	4632      	mov	r2, r6
   18d2a:	f7f4 f915 	bl	cf58 <arch_new_thread>
	if (!_current) {
   18d2e:	4b11      	ldr	r3, [pc, #68]	; (18d74 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   18d30:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   18d32:	689b      	ldr	r3, [r3, #8]
   18d34:	b103      	cbz	r3, 18d38 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   18d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   18d38:	4630      	mov	r0, r6
   18d3a:	6763      	str	r3, [r4, #116]	; 0x74
   18d3c:	b004      	add	sp, #16
   18d3e:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   18d40:	f106 0010 	add.w	r0, r6, #16
   18d44:	281e      	cmp	r0, #30
   18d46:	d9d3      	bls.n	18cf0 <z_setup_new_thread+0x10>
   18d48:	f44f 7306 	mov.w	r3, #536	; 0x218
   18d4c:	4a0a      	ldr	r2, [pc, #40]	; (18d78 <z_setup_new_thread+0x98>)
   18d4e:	490b      	ldr	r1, [pc, #44]	; (18d7c <z_setup_new_thread+0x9c>)
   18d50:	480b      	ldr	r0, [pc, #44]	; (18d80 <z_setup_new_thread+0xa0>)
   18d52:	f003 feca 	bl	1caea <assert_print>
   18d56:	4631      	mov	r1, r6
   18d58:	480a      	ldr	r0, [pc, #40]	; (18d84 <z_setup_new_thread+0xa4>)
   18d5a:	f06f 030f 	mvn.w	r3, #15
   18d5e:	220e      	movs	r2, #14
   18d60:	f003 fec3 	bl	1caea <assert_print>
   18d64:	f44f 7106 	mov.w	r1, #536	; 0x218
   18d68:	4803      	ldr	r0, [pc, #12]	; (18d78 <z_setup_new_thread+0x98>)
   18d6a:	f003 feb7 	bl	1cadc <assert_post_action>
   18d6e:	bf00      	nop
   18d70:	00018f65 	.word	0x00018f65
   18d74:	20009bfc 	.word	0x20009bfc
   18d78:	0002504e 	.word	0x0002504e
   18d7c:	00025071 	.word	0x00025071
   18d80:	00021547 	.word	0x00021547
   18d84:	000250f1 	.word	0x000250f1

00018d88 <z_impl_k_thread_create>:
{
   18d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d8a:	b087      	sub	sp, #28
   18d8c:	4604      	mov	r4, r0
   18d8e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   18d92:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   18d96:	b175      	cbz	r5, 18db6 <z_impl_k_thread_create+0x2e>
   18d98:	4919      	ldr	r1, [pc, #100]	; (18e00 <z_impl_k_thread_create+0x78>)
   18d9a:	f240 2387 	movw	r3, #647	; 0x287
   18d9e:	4a19      	ldr	r2, [pc, #100]	; (18e04 <z_impl_k_thread_create+0x7c>)
   18da0:	4819      	ldr	r0, [pc, #100]	; (18e08 <z_impl_k_thread_create+0x80>)
   18da2:	f003 fea2 	bl	1caea <assert_print>
   18da6:	4819      	ldr	r0, [pc, #100]	; (18e0c <z_impl_k_thread_create+0x84>)
   18da8:	f003 fe9f 	bl	1caea <assert_print>
   18dac:	f240 2187 	movw	r1, #647	; 0x287
   18db0:	4814      	ldr	r0, [pc, #80]	; (18e04 <z_impl_k_thread_create+0x7c>)
   18db2:	f003 fe93 	bl	1cadc <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18db6:	9505      	str	r5, [sp, #20]
   18db8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18dba:	9504      	str	r5, [sp, #16]
   18dbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   18dbe:	9503      	str	r5, [sp, #12]
   18dc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18dc2:	9502      	str	r5, [sp, #8]
   18dc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18dc6:	9501      	str	r5, [sp, #4]
   18dc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   18dca:	9500      	str	r5, [sp, #0]
   18dcc:	f7ff ff88 	bl	18ce0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   18dd0:	f1b6 3fff 	cmp.w	r6, #4294967295
   18dd4:	bf08      	it	eq
   18dd6:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   18dda:	d005      	beq.n	18de8 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18ddc:	ea56 0307 	orrs.w	r3, r6, r7
   18de0:	d105      	bne.n	18dee <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   18de2:	4620      	mov	r0, r4
   18de4:	f001 fc04 	bl	1a5f0 <z_sched_start>
}
   18de8:	4620      	mov	r0, r4
   18dea:	b007      	add	sp, #28
   18dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18dee:	463a      	mov	r2, r7
   18df0:	4633      	mov	r3, r6
   18df2:	4907      	ldr	r1, [pc, #28]	; (18e10 <z_impl_k_thread_create+0x88>)
   18df4:	f104 0018 	add.w	r0, r4, #24
   18df8:	f002 fc74 	bl	1b6e4 <z_add_timeout>
   18dfc:	e7f4      	b.n	18de8 <z_impl_k_thread_create+0x60>
   18dfe:	bf00      	nop
   18e00:	00025122 	.word	0x00025122
   18e04:	0002504e 	.word	0x0002504e
   18e08:	00021547 	.word	0x00021547
   18e0c:	00025134 	.word	0x00025134
   18e10:	0001aebd 	.word	0x0001aebd

00018e14 <z_init_static_threads>:
{
   18e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18e18:	4c39      	ldr	r4, [pc, #228]	; (18f00 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   18e1a:	4d3a      	ldr	r5, [pc, #232]	; (18f04 <z_init_static_threads+0xf0>)
{
   18e1c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   18e1e:	42ac      	cmp	r4, r5
   18e20:	4626      	mov	r6, r4
   18e22:	d92a      	bls.n	18e7a <z_init_static_threads+0x66>
   18e24:	4938      	ldr	r1, [pc, #224]	; (18f08 <z_init_static_threads+0xf4>)
   18e26:	f240 23ee 	movw	r3, #750	; 0x2ee
   18e2a:	4a38      	ldr	r2, [pc, #224]	; (18f0c <z_init_static_threads+0xf8>)
   18e2c:	4838      	ldr	r0, [pc, #224]	; (18f10 <z_init_static_threads+0xfc>)
   18e2e:	f003 fe5c 	bl	1caea <assert_print>
   18e32:	4838      	ldr	r0, [pc, #224]	; (18f14 <z_init_static_threads+0x100>)
   18e34:	f003 fe59 	bl	1caea <assert_print>
   18e38:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   18e3c:	4833      	ldr	r0, [pc, #204]	; (18f0c <z_init_static_threads+0xf8>)
   18e3e:	f003 fe4d 	bl	1cadc <assert_post_action>
		z_setup_new_thread(
   18e42:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18e46:	9305      	str	r3, [sp, #20]
   18e48:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18e4c:	9304      	str	r3, [sp, #16]
   18e4e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18e52:	9303      	str	r3, [sp, #12]
   18e54:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18e58:	9302      	str	r3, [sp, #8]
   18e5a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18e5e:	9301      	str	r3, [sp, #4]
   18e60:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18e64:	9300      	str	r3, [sp, #0]
   18e66:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18e6a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18e6e:	f7ff ff37 	bl	18ce0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18e72:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18e76:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   18e78:	e7d1      	b.n	18e1e <z_init_static_threads+0xa>
   18e7a:	42ae      	cmp	r6, r5
   18e7c:	f104 0430 	add.w	r4, r4, #48	; 0x30
   18e80:	d3df      	bcc.n	18e42 <z_init_static_threads+0x2e>
	k_sched_lock();
   18e82:	f001 fc07 	bl	1a694 <k_sched_lock>
   18e86:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   18e8a:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   18e8e:	4c1c      	ldr	r4, [pc, #112]	; (18f00 <z_init_static_threads+0xec>)
   18e90:	f8df 9084 	ldr.w	r9, [pc, #132]	; 18f18 <z_init_static_threads+0x104>
   18e94:	42ac      	cmp	r4, r5
   18e96:	d92c      	bls.n	18ef2 <z_init_static_threads+0xde>
   18e98:	491b      	ldr	r1, [pc, #108]	; (18f08 <z_init_static_threads+0xf4>)
   18e9a:	f240 330d 	movw	r3, #781	; 0x30d
   18e9e:	4a1b      	ldr	r2, [pc, #108]	; (18f0c <z_init_static_threads+0xf8>)
   18ea0:	481b      	ldr	r0, [pc, #108]	; (18f10 <z_init_static_threads+0xfc>)
   18ea2:	f003 fe22 	bl	1caea <assert_print>
   18ea6:	481b      	ldr	r0, [pc, #108]	; (18f14 <z_init_static_threads+0x100>)
   18ea8:	f003 fe1f 	bl	1caea <assert_print>
   18eac:	f240 310d 	movw	r1, #781	; 0x30d
   18eb0:	e7c4      	b.n	18e3c <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18eb4:	1c5a      	adds	r2, r3, #1
   18eb6:	d00d      	beq.n	18ed4 <z_init_static_threads+0xc0>
   18eb8:	2100      	movs	r1, #0
   18eba:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   18ebc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18ec0:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18ec4:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   18ec8:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18ecc:	d104      	bne.n	18ed8 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   18ece:	4640      	mov	r0, r8
   18ed0:	f001 fb8e 	bl	1a5f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18ed4:	3430      	adds	r4, #48	; 0x30
   18ed6:	e7dd      	b.n	18e94 <z_init_static_threads+0x80>
   18ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18edc:	2300      	movs	r3, #0
   18ede:	f7ef fd29 	bl	8934 <__aeabi_uldivmod>
   18ee2:	4602      	mov	r2, r0
   18ee4:	460b      	mov	r3, r1
   18ee6:	f108 0018 	add.w	r0, r8, #24
   18eea:	4649      	mov	r1, r9
   18eec:	f002 fbfa 	bl	1b6e4 <z_add_timeout>
   18ef0:	e7f0      	b.n	18ed4 <z_init_static_threads+0xc0>
   18ef2:	d3de      	bcc.n	18eb2 <z_init_static_threads+0x9e>
}
   18ef4:	b007      	add	sp, #28
   18ef6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   18efa:	f001 bc37 	b.w	1a76c <k_sched_unlock>
   18efe:	bf00      	nop
   18f00:	00020754 	.word	0x00020754
   18f04:	00020784 	.word	0x00020784
   18f08:	00025159 	.word	0x00025159
   18f0c:	0002504e 	.word	0x0002504e
   18f10:	00021547 	.word	0x00021547
   18f14:	00021c6a 	.word	0x00021c6a
   18f18:	0001aebd 	.word	0x0001aebd

00018f1c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   18f1c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   18f1e:	b138      	cbz	r0, 18f30 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   18f20:	4b04      	ldr	r3, [pc, #16]	; (18f34 <z_spin_lock_valid+0x18>)
   18f22:	f000 0003 	and.w	r0, r0, #3
   18f26:	7d1b      	ldrb	r3, [r3, #20]
   18f28:	1ac0      	subs	r0, r0, r3
   18f2a:	bf18      	it	ne
   18f2c:	2001      	movne	r0, #1
   18f2e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   18f30:	2001      	movs	r0, #1
}
   18f32:	4770      	bx	lr
   18f34:	20009bfc 	.word	0x20009bfc

00018f38 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18f38:	4a05      	ldr	r2, [pc, #20]	; (18f50 <z_spin_unlock_valid+0x18>)
{
   18f3a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18f3c:	7d11      	ldrb	r1, [r2, #20]
   18f3e:	6892      	ldr	r2, [r2, #8]
   18f40:	430a      	orrs	r2, r1
   18f42:	6801      	ldr	r1, [r0, #0]
   18f44:	2000      	movs	r0, #0
   18f46:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   18f48:	bf04      	itt	eq
   18f4a:	6018      	streq	r0, [r3, #0]
	return true;
   18f4c:	2001      	moveq	r0, #1
}
   18f4e:	4770      	bx	lr
   18f50:	20009bfc 	.word	0x20009bfc

00018f54 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   18f54:	4b02      	ldr	r3, [pc, #8]	; (18f60 <z_spin_lock_set_owner+0xc>)
   18f56:	7d1a      	ldrb	r2, [r3, #20]
   18f58:	689b      	ldr	r3, [r3, #8]
   18f5a:	4313      	orrs	r3, r2
   18f5c:	6003      	str	r3, [r0, #0]
}
   18f5e:	4770      	bx	lr
   18f60:	20009bfc 	.word	0x20009bfc

00018f64 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   18f64:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   18f66:	4c13      	ldr	r4, [pc, #76]	; (18fb4 <idle+0x50>)
   18f68:	68a3      	ldr	r3, [r4, #8]
   18f6a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18f6e:	2b00      	cmp	r3, #0
   18f70:	db10      	blt.n	18f94 <idle+0x30>
   18f72:	4d11      	ldr	r5, [pc, #68]	; (18fb8 <idle+0x54>)
	__asm__ volatile(
   18f74:	f04f 0220 	mov.w	r2, #32
   18f78:	f3ef 8311 	mrs	r3, BASEPRI
   18f7c:	f382 8812 	msr	BASEPRI_MAX, r2
   18f80:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   18f84:	f002 fcc0 	bl	1b908 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18f88:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   18f8a:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18f8c:	b963      	cbnz	r3, 18fa8 <idle+0x44>
	arch_cpu_idle();
   18f8e:	f7f3 fe89 	bl	cca4 <arch_cpu_idle>
}
   18f92:	e7ef      	b.n	18f74 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   18f94:	4909      	ldr	r1, [pc, #36]	; (18fbc <idle+0x58>)
   18f96:	480a      	ldr	r0, [pc, #40]	; (18fc0 <idle+0x5c>)
   18f98:	2327      	movs	r3, #39	; 0x27
   18f9a:	4a0a      	ldr	r2, [pc, #40]	; (18fc4 <idle+0x60>)
   18f9c:	f003 fda5 	bl	1caea <assert_print>
   18fa0:	2127      	movs	r1, #39	; 0x27
   18fa2:	4808      	ldr	r0, [pc, #32]	; (18fc4 <idle+0x60>)
   18fa4:	f003 fd9a 	bl	1cadc <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   18fa8:	f7f3 fc04 	bl	c7b4 <pm_system_suspend>
   18fac:	2800      	cmp	r0, #0
   18fae:	d1e1      	bne.n	18f74 <idle+0x10>
   18fb0:	e7ed      	b.n	18f8e <idle+0x2a>
   18fb2:	bf00      	nop
   18fb4:	20009bfc 	.word	0x20009bfc
   18fb8:	20009d1c 	.word	0x20009d1c
   18fbc:	000251a7 	.word	0x000251a7
   18fc0:	00021547 	.word	0x00021547
   18fc4:	00025186 	.word	0x00025186

00018fc8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18fcc:	4604      	mov	r4, r0
   18fce:	4617      	mov	r7, r2
   18fd0:	461e      	mov	r6, r3
   18fd2:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   18fd6:	b165      	cbz	r5, 18ff2 <z_impl_k_mutex_lock+0x2a>
   18fd8:	4958      	ldr	r1, [pc, #352]	; (1913c <z_impl_k_mutex_lock+0x174>)
   18fda:	2365      	movs	r3, #101	; 0x65
   18fdc:	4a58      	ldr	r2, [pc, #352]	; (19140 <z_impl_k_mutex_lock+0x178>)
   18fde:	4859      	ldr	r0, [pc, #356]	; (19144 <z_impl_k_mutex_lock+0x17c>)
   18fe0:	f003 fd83 	bl	1caea <assert_print>
   18fe4:	4858      	ldr	r0, [pc, #352]	; (19148 <z_impl_k_mutex_lock+0x180>)
   18fe6:	f003 fd80 	bl	1caea <assert_print>
   18fea:	2165      	movs	r1, #101	; 0x65
   18fec:	4854      	ldr	r0, [pc, #336]	; (19140 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fee:	f003 fd75 	bl	1cadc <assert_post_action>
   18ff2:	f04f 0320 	mov.w	r3, #32
   18ff6:	f3ef 8811 	mrs	r8, BASEPRI
   18ffa:	f383 8812 	msr	BASEPRI_MAX, r3
   18ffe:	f3bf 8f6f 	isb	sy
   19002:	4852      	ldr	r0, [pc, #328]	; (1914c <z_impl_k_mutex_lock+0x184>)
   19004:	f7ff ff8a 	bl	18f1c <z_spin_lock_valid>
   19008:	b960      	cbnz	r0, 19024 <z_impl_k_mutex_lock+0x5c>
   1900a:	2394      	movs	r3, #148	; 0x94
   1900c:	4a50      	ldr	r2, [pc, #320]	; (19150 <z_impl_k_mutex_lock+0x188>)
   1900e:	4951      	ldr	r1, [pc, #324]	; (19154 <z_impl_k_mutex_lock+0x18c>)
   19010:	484c      	ldr	r0, [pc, #304]	; (19144 <z_impl_k_mutex_lock+0x17c>)
   19012:	f003 fd6a 	bl	1caea <assert_print>
   19016:	494d      	ldr	r1, [pc, #308]	; (1914c <z_impl_k_mutex_lock+0x184>)
   19018:	484f      	ldr	r0, [pc, #316]	; (19158 <z_impl_k_mutex_lock+0x190>)
   1901a:	f003 fd66 	bl	1caea <assert_print>
   1901e:	2194      	movs	r1, #148	; 0x94
   19020:	484b      	ldr	r0, [pc, #300]	; (19150 <z_impl_k_mutex_lock+0x188>)
   19022:	e7e4      	b.n	18fee <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   19024:	4849      	ldr	r0, [pc, #292]	; (1914c <z_impl_k_mutex_lock+0x184>)
   19026:	f7ff ff95 	bl	18f54 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1902a:	68e3      	ldr	r3, [r4, #12]
   1902c:	4a4b      	ldr	r2, [pc, #300]	; (1915c <z_impl_k_mutex_lock+0x194>)
   1902e:	b19b      	cbz	r3, 19058 <z_impl_k_mutex_lock+0x90>
   19030:	68a0      	ldr	r0, [r4, #8]
   19032:	6891      	ldr	r1, [r2, #8]
   19034:	4288      	cmp	r0, r1
   19036:	d027      	beq.n	19088 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   19038:	ea57 0306 	orrs.w	r3, r7, r6
   1903c:	d12c      	bne.n	19098 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1903e:	4843      	ldr	r0, [pc, #268]	; (1914c <z_impl_k_mutex_lock+0x184>)
   19040:	f7ff ff7a 	bl	18f38 <z_spin_unlock_valid>
   19044:	b1a0      	cbz	r0, 19070 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   19046:	f388 8811 	msr	BASEPRI, r8
   1904a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1904e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   19052:	b002      	add	sp, #8
   19054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   19058:	6891      	ldr	r1, [r2, #8]
   1905a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1905e:	3301      	adds	r3, #1
   19060:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   19062:	6893      	ldr	r3, [r2, #8]
   19064:	4839      	ldr	r0, [pc, #228]	; (1914c <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19066:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   19068:	60a3      	str	r3, [r4, #8]
   1906a:	f7ff ff65 	bl	18f38 <z_spin_unlock_valid>
   1906e:	b968      	cbnz	r0, 1908c <z_impl_k_mutex_lock+0xc4>
   19070:	23c2      	movs	r3, #194	; 0xc2
   19072:	4a37      	ldr	r2, [pc, #220]	; (19150 <z_impl_k_mutex_lock+0x188>)
   19074:	493a      	ldr	r1, [pc, #232]	; (19160 <z_impl_k_mutex_lock+0x198>)
   19076:	4833      	ldr	r0, [pc, #204]	; (19144 <z_impl_k_mutex_lock+0x17c>)
   19078:	f003 fd37 	bl	1caea <assert_print>
   1907c:	4933      	ldr	r1, [pc, #204]	; (1914c <z_impl_k_mutex_lock+0x184>)
   1907e:	4839      	ldr	r0, [pc, #228]	; (19164 <z_impl_k_mutex_lock+0x19c>)
   19080:	f003 fd33 	bl	1caea <assert_print>
   19084:	21c2      	movs	r1, #194	; 0xc2
   19086:	e7cb      	b.n	19020 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   19088:	6921      	ldr	r1, [r4, #16]
   1908a:	e7e8      	b.n	1905e <z_impl_k_mutex_lock+0x96>
   1908c:	f388 8811 	msr	BASEPRI, r8
   19090:	f3bf 8f6f 	isb	sy
		return 0;
   19094:	2000      	movs	r0, #0
   19096:	e7dc      	b.n	19052 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   19098:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1909c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   190a0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   190a4:	4299      	cmp	r1, r3
   190a6:	bfa8      	it	ge
   190a8:	4619      	movge	r1, r3
   190aa:	4291      	cmp	r1, r2
   190ac:	bfb8      	it	lt
   190ae:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   190b0:	428b      	cmp	r3, r1
   190b2:	dd02      	ble.n	190ba <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   190b4:	f006 ff7d 	bl	1ffb2 <adjust_owner_prio.isra.0>
   190b8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   190ba:	4622      	mov	r2, r4
   190bc:	4641      	mov	r1, r8
   190be:	e9cd 7600 	strd	r7, r6, [sp]
   190c2:	4822      	ldr	r0, [pc, #136]	; (1914c <z_impl_k_mutex_lock+0x184>)
   190c4:	f001 fd20 	bl	1ab08 <z_pend_curr>
	if (got_mutex == 0) {
   190c8:	2800      	cmp	r0, #0
   190ca:	d0e3      	beq.n	19094 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   190cc:	f04f 0320 	mov.w	r3, #32
   190d0:	f3ef 8611 	mrs	r6, BASEPRI
   190d4:	f383 8812 	msr	BASEPRI_MAX, r3
   190d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   190dc:	481b      	ldr	r0, [pc, #108]	; (1914c <z_impl_k_mutex_lock+0x184>)
   190de:	f7ff ff1d 	bl	18f1c <z_spin_lock_valid>
   190e2:	2800      	cmp	r0, #0
   190e4:	d091      	beq.n	1900a <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   190e6:	4819      	ldr	r0, [pc, #100]	; (1914c <z_impl_k_mutex_lock+0x184>)
   190e8:	f7ff ff34 	bl	18f54 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   190ec:	68a0      	ldr	r0, [r4, #8]
   190ee:	b1c0      	cbz	r0, 19122 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   190f0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   190f2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190f4:	429c      	cmp	r4, r3
   190f6:	d00a      	beq.n	1910e <z_impl_k_mutex_lock+0x146>
   190f8:	b14b      	cbz	r3, 1910e <z_impl_k_mutex_lock+0x146>
   190fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   190fe:	4299      	cmp	r1, r3
   19100:	bfa8      	it	ge
   19102:	4619      	movge	r1, r3
   19104:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   19108:	4299      	cmp	r1, r3
   1910a:	bfb8      	it	lt
   1910c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1910e:	f006 ff50 	bl	1ffb2 <adjust_owner_prio.isra.0>
   19112:	b130      	cbz	r0, 19122 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   19114:	4631      	mov	r1, r6
   19116:	480d      	ldr	r0, [pc, #52]	; (1914c <z_impl_k_mutex_lock+0x184>)
   19118:	f001 fa28 	bl	1a56c <z_reschedule>
	return -EAGAIN;
   1911c:	f06f 000a 	mvn.w	r0, #10
   19120:	e797      	b.n	19052 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   19122:	2d00      	cmp	r5, #0
   19124:	d1f6      	bne.n	19114 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19126:	4809      	ldr	r0, [pc, #36]	; (1914c <z_impl_k_mutex_lock+0x184>)
   19128:	f7ff ff06 	bl	18f38 <z_spin_unlock_valid>
   1912c:	2800      	cmp	r0, #0
   1912e:	d09f      	beq.n	19070 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   19130:	f386 8811 	msr	BASEPRI, r6
   19134:	f3bf 8f6f 	isb	sy
   19138:	e7f0      	b.n	1911c <z_impl_k_mutex_lock+0x154>
   1913a:	bf00      	nop
   1913c:	00025122 	.word	0x00025122
   19140:	000251cf 	.word	0x000251cf
   19144:	00021547 	.word	0x00021547
   19148:	000251f1 	.word	0x000251f1
   1914c:	20009c24 	.word	0x20009c24
   19150:	0002197b 	.word	0x0002197b
   19154:	000219d4 	.word	0x000219d4
   19158:	000219e9 	.word	0x000219e9
   1915c:	20009bfc 	.word	0x20009bfc
   19160:	000219a8 	.word	0x000219a8
   19164:	000219bf 	.word	0x000219bf

00019168 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   19168:	b570      	push	{r4, r5, r6, lr}
   1916a:	4604      	mov	r4, r0
   1916c:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   19170:	b166      	cbz	r6, 1918c <z_impl_k_mutex_unlock+0x24>
   19172:	4938      	ldr	r1, [pc, #224]	; (19254 <z_impl_k_mutex_unlock+0xec>)
   19174:	23cd      	movs	r3, #205	; 0xcd
   19176:	4a38      	ldr	r2, [pc, #224]	; (19258 <z_impl_k_mutex_unlock+0xf0>)
   19178:	4838      	ldr	r0, [pc, #224]	; (1925c <z_impl_k_mutex_unlock+0xf4>)
   1917a:	f003 fcb6 	bl	1caea <assert_print>
   1917e:	4838      	ldr	r0, [pc, #224]	; (19260 <z_impl_k_mutex_unlock+0xf8>)
   19180:	f003 fcb3 	bl	1caea <assert_print>
   19184:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   19186:	4834      	ldr	r0, [pc, #208]	; (19258 <z_impl_k_mutex_unlock+0xf0>)
   19188:	f003 fca8 	bl	1cadc <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1918c:	6883      	ldr	r3, [r0, #8]
   1918e:	2b00      	cmp	r3, #0
   19190:	d059      	beq.n	19246 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   19192:	4a34      	ldr	r2, [pc, #208]	; (19264 <z_impl_k_mutex_unlock+0xfc>)
   19194:	6892      	ldr	r2, [r2, #8]
   19196:	4293      	cmp	r3, r2
   19198:	d158      	bne.n	1924c <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1919a:	68c3      	ldr	r3, [r0, #12]
   1919c:	b93b      	cbnz	r3, 191ae <z_impl_k_mutex_unlock+0x46>
   1919e:	4932      	ldr	r1, [pc, #200]	; (19268 <z_impl_k_mutex_unlock+0x100>)
   191a0:	23e5      	movs	r3, #229	; 0xe5
   191a2:	4a2d      	ldr	r2, [pc, #180]	; (19258 <z_impl_k_mutex_unlock+0xf0>)
   191a4:	482d      	ldr	r0, [pc, #180]	; (1925c <z_impl_k_mutex_unlock+0xf4>)
   191a6:	f003 fca0 	bl	1caea <assert_print>
   191aa:	21e5      	movs	r1, #229	; 0xe5
   191ac:	e7eb      	b.n	19186 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   191ae:	2b01      	cmp	r3, #1
   191b0:	d003      	beq.n	191ba <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   191b2:	3b01      	subs	r3, #1
   191b4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   191b6:	2000      	movs	r0, #0
}
   191b8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   191ba:	f04f 0320 	mov.w	r3, #32
   191be:	f3ef 8511 	mrs	r5, BASEPRI
   191c2:	f383 8812 	msr	BASEPRI_MAX, r3
   191c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   191ca:	4828      	ldr	r0, [pc, #160]	; (1926c <z_impl_k_mutex_unlock+0x104>)
   191cc:	f7ff fea6 	bl	18f1c <z_spin_lock_valid>
   191d0:	b960      	cbnz	r0, 191ec <z_impl_k_mutex_unlock+0x84>
   191d2:	2394      	movs	r3, #148	; 0x94
   191d4:	4a26      	ldr	r2, [pc, #152]	; (19270 <z_impl_k_mutex_unlock+0x108>)
   191d6:	4927      	ldr	r1, [pc, #156]	; (19274 <z_impl_k_mutex_unlock+0x10c>)
   191d8:	4820      	ldr	r0, [pc, #128]	; (1925c <z_impl_k_mutex_unlock+0xf4>)
   191da:	f003 fc86 	bl	1caea <assert_print>
   191de:	4923      	ldr	r1, [pc, #140]	; (1926c <z_impl_k_mutex_unlock+0x104>)
   191e0:	4825      	ldr	r0, [pc, #148]	; (19278 <z_impl_k_mutex_unlock+0x110>)
   191e2:	f003 fc82 	bl	1caea <assert_print>
   191e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   191e8:	4821      	ldr	r0, [pc, #132]	; (19270 <z_impl_k_mutex_unlock+0x108>)
   191ea:	e7cd      	b.n	19188 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   191ec:	481f      	ldr	r0, [pc, #124]	; (1926c <z_impl_k_mutex_unlock+0x104>)
   191ee:	f7ff feb1 	bl	18f54 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   191f2:	6921      	ldr	r1, [r4, #16]
   191f4:	68a0      	ldr	r0, [r4, #8]
   191f6:	f006 fedc 	bl	1ffb2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   191fa:	4620      	mov	r0, r4
   191fc:	f001 ff02 	bl	1b004 <z_unpend_first_thread>
	mutex->owner = new_owner;
   19200:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   19202:	b150      	cbz	r0, 1921a <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   19204:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19208:	6122      	str	r2, [r4, #16]
   1920a:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1920c:	f001 f922 	bl	1a454 <z_ready_thread>
		z_reschedule(&lock, key);
   19210:	4629      	mov	r1, r5
   19212:	4816      	ldr	r0, [pc, #88]	; (1926c <z_impl_k_mutex_unlock+0x104>)
   19214:	f001 f9aa 	bl	1a56c <z_reschedule>
   19218:	e7cd      	b.n	191b6 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   1921a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1921c:	4813      	ldr	r0, [pc, #76]	; (1926c <z_impl_k_mutex_unlock+0x104>)
   1921e:	f7ff fe8b 	bl	18f38 <z_spin_unlock_valid>
   19222:	b958      	cbnz	r0, 1923c <z_impl_k_mutex_unlock+0xd4>
   19224:	23c2      	movs	r3, #194	; 0xc2
   19226:	4a12      	ldr	r2, [pc, #72]	; (19270 <z_impl_k_mutex_unlock+0x108>)
   19228:	4914      	ldr	r1, [pc, #80]	; (1927c <z_impl_k_mutex_unlock+0x114>)
   1922a:	480c      	ldr	r0, [pc, #48]	; (1925c <z_impl_k_mutex_unlock+0xf4>)
   1922c:	f003 fc5d 	bl	1caea <assert_print>
   19230:	490e      	ldr	r1, [pc, #56]	; (1926c <z_impl_k_mutex_unlock+0x104>)
   19232:	4813      	ldr	r0, [pc, #76]	; (19280 <z_impl_k_mutex_unlock+0x118>)
   19234:	f003 fc59 	bl	1caea <assert_print>
   19238:	21c2      	movs	r1, #194	; 0xc2
   1923a:	e7d5      	b.n	191e8 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   1923c:	f385 8811 	msr	BASEPRI, r5
   19240:	f3bf 8f6f 	isb	sy
   19244:	e7b7      	b.n	191b6 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   19246:	f06f 0015 	mvn.w	r0, #21
   1924a:	e7b5      	b.n	191b8 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   1924c:	f04f 30ff 	mov.w	r0, #4294967295
   19250:	e7b2      	b.n	191b8 <z_impl_k_mutex_unlock+0x50>
   19252:	bf00      	nop
   19254:	00025122 	.word	0x00025122
   19258:	000251cf 	.word	0x000251cf
   1925c:	00021547 	.word	0x00021547
   19260:	000251f1 	.word	0x000251f1
   19264:	20009bfc 	.word	0x20009bfc
   19268:	00025216 	.word	0x00025216
   1926c:	20009c24 	.word	0x20009c24
   19270:	0002197b 	.word	0x0002197b
   19274:	000219d4 	.word	0x000219d4
   19278:	000219e9 	.word	0x000219e9
   1927c:	000219a8 	.word	0x000219a8
   19280:	000219bf 	.word	0x000219bf

00019284 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   19284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19288:	4604      	mov	r4, r0
   1928a:	460e      	mov	r6, r1
   1928c:	4690      	mov	r8, r2
   1928e:	4699      	mov	r9, r3
   19290:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19294:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19298:	f04f 0320 	mov.w	r3, #32
   1929c:	f3ef 8711 	mrs	r7, BASEPRI
   192a0:	f383 8812 	msr	BASEPRI_MAX, r3
   192a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192a8:	4628      	mov	r0, r5
   192aa:	f7ff fe37 	bl	18f1c <z_spin_lock_valid>
   192ae:	b968      	cbnz	r0, 192cc <queue_insert+0x48>
   192b0:	2394      	movs	r3, #148	; 0x94
   192b2:	4a3b      	ldr	r2, [pc, #236]	; (193a0 <queue_insert+0x11c>)
   192b4:	493b      	ldr	r1, [pc, #236]	; (193a4 <queue_insert+0x120>)
   192b6:	483c      	ldr	r0, [pc, #240]	; (193a8 <queue_insert+0x124>)
   192b8:	f003 fc17 	bl	1caea <assert_print>
   192bc:	4629      	mov	r1, r5
   192be:	483b      	ldr	r0, [pc, #236]	; (193ac <queue_insert+0x128>)
   192c0:	f003 fc13 	bl	1caea <assert_print>
   192c4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   192c6:	4836      	ldr	r0, [pc, #216]	; (193a0 <queue_insert+0x11c>)
   192c8:	f003 fc08 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   192cc:	4628      	mov	r0, r5
   192ce:	f7ff fe41 	bl	18f54 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   192d2:	f1ba 0f00 	cmp.w	sl, #0
   192d6:	d000      	beq.n	192da <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   192d8:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   192da:	f104 000c 	add.w	r0, r4, #12
   192de:	f001 fe91 	bl	1b004 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   192e2:	b158      	cbz	r0, 192fc <queue_insert+0x78>
   192e4:	2300      	movs	r3, #0
   192e6:	f8c0 8014 	str.w	r8, [r0, #20]
   192ea:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   192ec:	f001 f8b2 	bl	1a454 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   192f0:	4628      	mov	r0, r5
   192f2:	4639      	mov	r1, r7
   192f4:	f001 f93a 	bl	1a56c <z_reschedule>
		return 0;
   192f8:	2000      	movs	r0, #0
   192fa:	e01c      	b.n	19336 <queue_insert+0xb2>
	if (alloc) {
   192fc:	f1b9 0f00 	cmp.w	r9, #0
   19300:	d02b      	beq.n	1935a <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   19302:	2108      	movs	r1, #8
   19304:	f003 f938 	bl	1c578 <z_thread_aligned_alloc>
		if (anode == NULL) {
   19308:	b9b8      	cbnz	r0, 1933a <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1930a:	4628      	mov	r0, r5
   1930c:	f7ff fe14 	bl	18f38 <z_spin_unlock_valid>
   19310:	b958      	cbnz	r0, 1932a <queue_insert+0xa6>
   19312:	23c2      	movs	r3, #194	; 0xc2
   19314:	4a22      	ldr	r2, [pc, #136]	; (193a0 <queue_insert+0x11c>)
   19316:	4926      	ldr	r1, [pc, #152]	; (193b0 <queue_insert+0x12c>)
   19318:	4823      	ldr	r0, [pc, #140]	; (193a8 <queue_insert+0x124>)
   1931a:	f003 fbe6 	bl	1caea <assert_print>
   1931e:	4629      	mov	r1, r5
   19320:	4824      	ldr	r0, [pc, #144]	; (193b4 <queue_insert+0x130>)
   19322:	f003 fbe2 	bl	1caea <assert_print>
   19326:	21c2      	movs	r1, #194	; 0xc2
   19328:	e7cd      	b.n	192c6 <queue_insert+0x42>
	__asm__ volatile(
   1932a:	f387 8811 	msr	BASEPRI, r7
   1932e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   19332:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   19336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1933a:	2201      	movs	r2, #1
		anode->data = data;
   1933c:	f8c0 8004 	str.w	r8, [r0, #4]
   19340:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19342:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19344:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   19348:	b95e      	cbnz	r6, 19362 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1934a:	6822      	ldr	r2, [r4, #0]
   1934c:	430a      	orrs	r2, r1
   1934e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19350:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   19352:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19354:	b96a      	cbnz	r2, 19372 <queue_insert+0xee>
	list->tail = node;
   19356:	6060      	str	r0, [r4, #4]
}
   19358:	e00b      	b.n	19372 <queue_insert+0xee>
}
   1935a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1935c:	f8c8 9000 	str.w	r9, [r8]
}
   19360:	e7ef      	b.n	19342 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19362:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   19364:	2a03      	cmp	r2, #3
   19366:	d810      	bhi.n	1938a <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   19368:	6001      	str	r1, [r0, #0]
	return list->tail;
   1936a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1936c:	b939      	cbnz	r1, 1937e <queue_insert+0xfa>
	list->head = node;
   1936e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   19372:	2104      	movs	r1, #4
   19374:	f104 0014 	add.w	r0, r4, #20
   19378:	f006 ffdd 	bl	20336 <z_handle_obj_poll_events>
   1937c:	e7b8      	b.n	192f0 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1937e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19380:	f002 0203 	and.w	r2, r2, #3
   19384:	4302      	orrs	r2, r0
   19386:	600a      	str	r2, [r1, #0]
   19388:	e7e5      	b.n	19356 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1938a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1938e:	430a      	orrs	r2, r1
   19390:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19392:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19394:	f002 0203 	and.w	r2, r2, #3
   19398:	ea40 0302 	orr.w	r3, r0, r2
   1939c:	6033      	str	r3, [r6, #0]
}
   1939e:	e7e8      	b.n	19372 <queue_insert+0xee>
   193a0:	0002197b 	.word	0x0002197b
   193a4:	000219d4 	.word	0x000219d4
   193a8:	00021547 	.word	0x00021547
   193ac:	000219e9 	.word	0x000219e9
   193b0:	000219a8 	.word	0x000219a8
   193b4:	000219bf 	.word	0x000219bf

000193b8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   193b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   193bc:	4605      	mov	r5, r0
   193be:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   193c0:	460c      	mov	r4, r1
   193c2:	2900      	cmp	r1, #0
   193c4:	d04a      	beq.n	1945c <k_queue_append_list+0xa4>
   193c6:	2a00      	cmp	r2, #0
   193c8:	d048      	beq.n	1945c <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   193ca:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   193ce:	f04f 0320 	mov.w	r3, #32
   193d2:	f3ef 8911 	mrs	r9, BASEPRI
   193d6:	f383 8812 	msr	BASEPRI_MAX, r3
   193da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   193de:	4630      	mov	r0, r6
   193e0:	f7ff fd9c 	bl	18f1c <z_spin_lock_valid>
   193e4:	b968      	cbnz	r0, 19402 <k_queue_append_list+0x4a>
   193e6:	2394      	movs	r3, #148	; 0x94
   193e8:	4a1e      	ldr	r2, [pc, #120]	; (19464 <k_queue_append_list+0xac>)
   193ea:	491f      	ldr	r1, [pc, #124]	; (19468 <k_queue_append_list+0xb0>)
   193ec:	481f      	ldr	r0, [pc, #124]	; (1946c <k_queue_append_list+0xb4>)
   193ee:	f003 fb7c 	bl	1caea <assert_print>
   193f2:	4631      	mov	r1, r6
   193f4:	481e      	ldr	r0, [pc, #120]	; (19470 <k_queue_append_list+0xb8>)
   193f6:	f003 fb78 	bl	1caea <assert_print>
   193fa:	2194      	movs	r1, #148	; 0x94
   193fc:	4819      	ldr	r0, [pc, #100]	; (19464 <k_queue_append_list+0xac>)
   193fe:	f003 fb6d 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   19402:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   19404:	f105 080c 	add.w	r8, r5, #12
   19408:	f7ff fda4 	bl	18f54 <z_spin_lock_set_owner>
   1940c:	4640      	mov	r0, r8
   1940e:	f001 fdf9 	bl	1b004 <z_unpend_first_thread>
	}

	while ((head != NULL) && (thread != NULL)) {
   19412:	b168      	cbz	r0, 19430 <k_queue_append_list+0x78>
   19414:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   19418:	6144      	str	r4, [r0, #20]
   1941a:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1941e:	f001 f819 	bl	1a454 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   19422:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   19424:	4640      	mov	r0, r8
   19426:	f001 fded 	bl	1b004 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1942a:	b12c      	cbz	r4, 19438 <k_queue_append_list+0x80>
   1942c:	2800      	cmp	r0, #0
   1942e:	d1f3      	bne.n	19418 <k_queue_append_list+0x60>
	return list->tail;
   19430:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   19432:	b96b      	cbnz	r3, 19450 <k_queue_append_list+0x98>
	list->head = node;
   19434:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19436:	606f      	str	r7, [r5, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   19438:	2104      	movs	r1, #4
   1943a:	f105 0014 	add.w	r0, r5, #20
   1943e:	f006 ff7a 	bl	20336 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   19442:	4630      	mov	r0, r6
   19444:	4649      	mov	r1, r9
   19446:	f001 f891 	bl	1a56c <z_reschedule>
	return 0;
   1944a:	2000      	movs	r0, #0
}
   1944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19450:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19452:	f002 0203 	and.w	r2, r2, #3
   19456:	4314      	orrs	r4, r2
   19458:	601c      	str	r4, [r3, #0]
}
   1945a:	e7ec      	b.n	19436 <k_queue_append_list+0x7e>
		return -EINVAL;
   1945c:	f06f 0015 	mvn.w	r0, #21
   19460:	e7f4      	b.n	1944c <k_queue_append_list+0x94>
   19462:	bf00      	nop
   19464:	0002197b 	.word	0x0002197b
   19468:	000219d4 	.word	0x000219d4
   1946c:	00021547 	.word	0x00021547
   19470:	000219e9 	.word	0x000219e9

00019474 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   19474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19478:	4606      	mov	r6, r0
   1947a:	4691      	mov	r9, r2
   1947c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1947e:	f100 0508 	add.w	r5, r0, #8
   19482:	f04f 0320 	mov.w	r3, #32
   19486:	f3ef 8811 	mrs	r8, BASEPRI
   1948a:	f383 8812 	msr	BASEPRI_MAX, r3
   1948e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19492:	4628      	mov	r0, r5
   19494:	f7ff fd42 	bl	18f1c <z_spin_lock_valid>
   19498:	b968      	cbnz	r0, 194b6 <z_impl_k_queue_get+0x42>
   1949a:	2394      	movs	r3, #148	; 0x94
   1949c:	4a23      	ldr	r2, [pc, #140]	; (1952c <z_impl_k_queue_get+0xb8>)
   1949e:	4924      	ldr	r1, [pc, #144]	; (19530 <z_impl_k_queue_get+0xbc>)
   194a0:	4824      	ldr	r0, [pc, #144]	; (19534 <z_impl_k_queue_get+0xc0>)
   194a2:	f003 fb22 	bl	1caea <assert_print>
   194a6:	4629      	mov	r1, r5
   194a8:	4823      	ldr	r0, [pc, #140]	; (19538 <z_impl_k_queue_get+0xc4>)
   194aa:	f003 fb1e 	bl	1caea <assert_print>
   194ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   194b0:	481e      	ldr	r0, [pc, #120]	; (1952c <z_impl_k_queue_get+0xb8>)
   194b2:	f003 fb13 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   194b6:	4628      	mov	r0, r5
   194b8:	f7ff fd4c 	bl	18f54 <z_spin_lock_set_owner>
	return list->head;
   194bc:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   194be:	b1ec      	cbz	r4, 194fc <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   194c0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   194c2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   194c4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   194c8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   194ca:	4620      	mov	r0, r4
   194cc:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   194d0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   194d2:	bf08      	it	eq
   194d4:	6073      	streq	r3, [r6, #4]
   194d6:	f006 fd7b 	bl	1ffd0 <z_queue_node_peek>
   194da:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   194dc:	4628      	mov	r0, r5
   194de:	f7ff fd2b 	bl	18f38 <z_spin_unlock_valid>
   194e2:	b9d8      	cbnz	r0, 1951c <z_impl_k_queue_get+0xa8>
   194e4:	23c2      	movs	r3, #194	; 0xc2
   194e6:	4a11      	ldr	r2, [pc, #68]	; (1952c <z_impl_k_queue_get+0xb8>)
   194e8:	4914      	ldr	r1, [pc, #80]	; (1953c <z_impl_k_queue_get+0xc8>)
   194ea:	4812      	ldr	r0, [pc, #72]	; (19534 <z_impl_k_queue_get+0xc0>)
   194ec:	f003 fafd 	bl	1caea <assert_print>
   194f0:	4629      	mov	r1, r5
   194f2:	4813      	ldr	r0, [pc, #76]	; (19540 <z_impl_k_queue_get+0xcc>)
   194f4:	f003 faf9 	bl	1caea <assert_print>
   194f8:	21c2      	movs	r1, #194	; 0xc2
   194fa:	e7d9      	b.n	194b0 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   194fc:	ea59 0307 	orrs.w	r3, r9, r7
   19500:	d0ec      	beq.n	194dc <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   19502:	4641      	mov	r1, r8
   19504:	4628      	mov	r0, r5
   19506:	e9cd 9700 	strd	r9, r7, [sp]
   1950a:	f106 020c 	add.w	r2, r6, #12
   1950e:	f001 fafb 	bl	1ab08 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   19512:	b938      	cbnz	r0, 19524 <z_impl_k_queue_get+0xb0>
   19514:	4b0b      	ldr	r3, [pc, #44]	; (19544 <z_impl_k_queue_get+0xd0>)
   19516:	689b      	ldr	r3, [r3, #8]
   19518:	695c      	ldr	r4, [r3, #20]
   1951a:	e003      	b.n	19524 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   1951c:	f388 8811 	msr	BASEPRI, r8
   19520:	f3bf 8f6f 	isb	sy
}
   19524:	4620      	mov	r0, r4
   19526:	b003      	add	sp, #12
   19528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1952c:	0002197b 	.word	0x0002197b
   19530:	000219d4 	.word	0x000219d4
   19534:	00021547 	.word	0x00021547
   19538:	000219e9 	.word	0x000219e9
   1953c:	000219a8 	.word	0x000219a8
   19540:	000219bf 	.word	0x000219bf
   19544:	20009bfc 	.word	0x20009bfc

00019548 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19548:	b538      	push	{r3, r4, r5, lr}
   1954a:	4604      	mov	r4, r0
	__asm__ volatile(
   1954c:	f04f 0320 	mov.w	r3, #32
   19550:	f3ef 8511 	mrs	r5, BASEPRI
   19554:	f383 8812 	msr	BASEPRI_MAX, r3
   19558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1955c:	4817      	ldr	r0, [pc, #92]	; (195bc <z_impl_k_sem_give+0x74>)
   1955e:	f7ff fcdd 	bl	18f1c <z_spin_lock_valid>
   19562:	b968      	cbnz	r0, 19580 <z_impl_k_sem_give+0x38>
   19564:	2394      	movs	r3, #148	; 0x94
   19566:	4a16      	ldr	r2, [pc, #88]	; (195c0 <z_impl_k_sem_give+0x78>)
   19568:	4916      	ldr	r1, [pc, #88]	; (195c4 <z_impl_k_sem_give+0x7c>)
   1956a:	4817      	ldr	r0, [pc, #92]	; (195c8 <z_impl_k_sem_give+0x80>)
   1956c:	f003 fabd 	bl	1caea <assert_print>
   19570:	4912      	ldr	r1, [pc, #72]	; (195bc <z_impl_k_sem_give+0x74>)
   19572:	4816      	ldr	r0, [pc, #88]	; (195cc <z_impl_k_sem_give+0x84>)
   19574:	f003 fab9 	bl	1caea <assert_print>
   19578:	2194      	movs	r1, #148	; 0x94
   1957a:	4811      	ldr	r0, [pc, #68]	; (195c0 <z_impl_k_sem_give+0x78>)
   1957c:	f003 faae 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   19580:	480e      	ldr	r0, [pc, #56]	; (195bc <z_impl_k_sem_give+0x74>)
   19582:	f7ff fce7 	bl	18f54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   19586:	4620      	mov	r0, r4
   19588:	f001 fd3c 	bl	1b004 <z_unpend_first_thread>

	if (thread != NULL) {
   1958c:	b148      	cbz	r0, 195a2 <z_impl_k_sem_give+0x5a>
   1958e:	2200      	movs	r2, #0
   19590:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19592:	f000 ff5f 	bl	1a454 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19596:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   19598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1959c:	4807      	ldr	r0, [pc, #28]	; (195bc <z_impl_k_sem_give+0x74>)
   1959e:	f000 bfe5 	b.w	1a56c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   195a2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   195a6:	429a      	cmp	r2, r3
   195a8:	bf18      	it	ne
   195aa:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   195ac:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   195ae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   195b0:	f104 0010 	add.w	r0, r4, #16
   195b4:	f006 febf 	bl	20336 <z_handle_obj_poll_events>
}
   195b8:	e7ed      	b.n	19596 <z_impl_k_sem_give+0x4e>
   195ba:	bf00      	nop
   195bc:	20009c28 	.word	0x20009c28
   195c0:	0002197b 	.word	0x0002197b
   195c4:	000219d4 	.word	0x000219d4
   195c8:	00021547 	.word	0x00021547
   195cc:	000219e9 	.word	0x000219e9

000195d0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   195d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   195d2:	4604      	mov	r4, r0
   195d4:	4616      	mov	r6, r2
   195d6:	461d      	mov	r5, r3
   195d8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   195dc:	b17b      	cbz	r3, 195fe <z_impl_k_sem_take+0x2e>
   195de:	ea52 0305 	orrs.w	r3, r2, r5
   195e2:	d00c      	beq.n	195fe <z_impl_k_sem_take+0x2e>
   195e4:	492d      	ldr	r1, [pc, #180]	; (1969c <z_impl_k_sem_take+0xcc>)
   195e6:	2379      	movs	r3, #121	; 0x79
   195e8:	4a2d      	ldr	r2, [pc, #180]	; (196a0 <z_impl_k_sem_take+0xd0>)
   195ea:	482e      	ldr	r0, [pc, #184]	; (196a4 <z_impl_k_sem_take+0xd4>)
   195ec:	f003 fa7d 	bl	1caea <assert_print>
   195f0:	482d      	ldr	r0, [pc, #180]	; (196a8 <z_impl_k_sem_take+0xd8>)
   195f2:	f003 fa7a 	bl	1caea <assert_print>
   195f6:	2179      	movs	r1, #121	; 0x79
   195f8:	4829      	ldr	r0, [pc, #164]	; (196a0 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   195fa:	f003 fa6f 	bl	1cadc <assert_post_action>
   195fe:	f04f 0320 	mov.w	r3, #32
   19602:	f3ef 8711 	mrs	r7, BASEPRI
   19606:	f383 8812 	msr	BASEPRI_MAX, r3
   1960a:	f3bf 8f6f 	isb	sy
   1960e:	4827      	ldr	r0, [pc, #156]	; (196ac <z_impl_k_sem_take+0xdc>)
   19610:	f7ff fc84 	bl	18f1c <z_spin_lock_valid>
   19614:	b960      	cbnz	r0, 19630 <z_impl_k_sem_take+0x60>
   19616:	2394      	movs	r3, #148	; 0x94
   19618:	4a25      	ldr	r2, [pc, #148]	; (196b0 <z_impl_k_sem_take+0xe0>)
   1961a:	4926      	ldr	r1, [pc, #152]	; (196b4 <z_impl_k_sem_take+0xe4>)
   1961c:	4821      	ldr	r0, [pc, #132]	; (196a4 <z_impl_k_sem_take+0xd4>)
   1961e:	f003 fa64 	bl	1caea <assert_print>
   19622:	4922      	ldr	r1, [pc, #136]	; (196ac <z_impl_k_sem_take+0xdc>)
   19624:	4824      	ldr	r0, [pc, #144]	; (196b8 <z_impl_k_sem_take+0xe8>)
   19626:	f003 fa60 	bl	1caea <assert_print>
   1962a:	2194      	movs	r1, #148	; 0x94
   1962c:	4820      	ldr	r0, [pc, #128]	; (196b0 <z_impl_k_sem_take+0xe0>)
   1962e:	e7e4      	b.n	195fa <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   19630:	481e      	ldr	r0, [pc, #120]	; (196ac <z_impl_k_sem_take+0xdc>)
   19632:	f7ff fc8f 	bl	18f54 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   19636:	68a3      	ldr	r3, [r4, #8]
   19638:	b1c3      	cbz	r3, 1966c <z_impl_k_sem_take+0x9c>
		sem->count--;
   1963a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1963c:	481b      	ldr	r0, [pc, #108]	; (196ac <z_impl_k_sem_take+0xdc>)
   1963e:	60a3      	str	r3, [r4, #8]
   19640:	f7ff fc7a 	bl	18f38 <z_spin_unlock_valid>
   19644:	b958      	cbnz	r0, 1965e <z_impl_k_sem_take+0x8e>
   19646:	23c2      	movs	r3, #194	; 0xc2
   19648:	4a19      	ldr	r2, [pc, #100]	; (196b0 <z_impl_k_sem_take+0xe0>)
   1964a:	491c      	ldr	r1, [pc, #112]	; (196bc <z_impl_k_sem_take+0xec>)
   1964c:	4815      	ldr	r0, [pc, #84]	; (196a4 <z_impl_k_sem_take+0xd4>)
   1964e:	f003 fa4c 	bl	1caea <assert_print>
   19652:	4916      	ldr	r1, [pc, #88]	; (196ac <z_impl_k_sem_take+0xdc>)
   19654:	481a      	ldr	r0, [pc, #104]	; (196c0 <z_impl_k_sem_take+0xf0>)
   19656:	f003 fa48 	bl	1caea <assert_print>
   1965a:	21c2      	movs	r1, #194	; 0xc2
   1965c:	e7e6      	b.n	1962c <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   1965e:	f387 8811 	msr	BASEPRI, r7
   19662:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   19666:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   19668:	b003      	add	sp, #12
   1966a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1966c:	ea56 0305 	orrs.w	r3, r6, r5
   19670:	d10b      	bne.n	1968a <z_impl_k_sem_take+0xba>
   19672:	480e      	ldr	r0, [pc, #56]	; (196ac <z_impl_k_sem_take+0xdc>)
   19674:	f7ff fc60 	bl	18f38 <z_spin_unlock_valid>
   19678:	2800      	cmp	r0, #0
   1967a:	d0e4      	beq.n	19646 <z_impl_k_sem_take+0x76>
   1967c:	f387 8811 	msr	BASEPRI, r7
   19680:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   19684:	f06f 000f 	mvn.w	r0, #15
   19688:	e7ee      	b.n	19668 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1968a:	4622      	mov	r2, r4
   1968c:	4639      	mov	r1, r7
   1968e:	e9cd 6500 	strd	r6, r5, [sp]
   19692:	4806      	ldr	r0, [pc, #24]	; (196ac <z_impl_k_sem_take+0xdc>)
   19694:	f001 fa38 	bl	1ab08 <z_pend_curr>
	return ret;
   19698:	e7e6      	b.n	19668 <z_impl_k_sem_take+0x98>
   1969a:	bf00      	nop
   1969c:	0002524d 	.word	0x0002524d
   196a0:	0002522d 	.word	0x0002522d
   196a4:	00021547 	.word	0x00021547
   196a8:	00023bf8 	.word	0x00023bf8
   196ac:	20009c28 	.word	0x20009c28
   196b0:	0002197b 	.word	0x0002197b
   196b4:	000219d4 	.word	0x000219d4
   196b8:	000219e9 	.word	0x000219e9
   196bc:	000219a8 	.word	0x000219a8
   196c0:	000219bf 	.word	0x000219bf

000196c4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   196c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   196c6:	2400      	movs	r4, #0
   196c8:	4b08      	ldr	r3, [pc, #32]	; (196ec <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   196ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   196ce:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   196d0:	ab02      	add	r3, sp, #8
   196d2:	9300      	str	r3, [sp, #0]
   196d4:	4906      	ldr	r1, [pc, #24]	; (196f0 <k_sys_work_q_init+0x2c>)
   196d6:	f04f 33ff 	mov.w	r3, #4294967295
   196da:	4806      	ldr	r0, [pc, #24]	; (196f4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   196dc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   196e0:	f000 fac0 	bl	19c64 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   196e4:	4620      	mov	r0, r4
   196e6:	b004      	add	sp, #16
   196e8:	bd10      	pop	{r4, pc}
   196ea:	bf00      	nop
   196ec:	0002529b 	.word	0x0002529b
   196f0:	2000c920 	.word	0x2000c920
   196f4:	20009650 	.word	0x20009650

000196f8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   196f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196fc:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   196fe:	4e6e      	ldr	r6, [pc, #440]	; (198b8 <work_queue_main+0x1c0>)
	return list->head;
   19700:	4f6e      	ldr	r7, [pc, #440]	; (198bc <work_queue_main+0x1c4>)
   19702:	b085      	sub	sp, #20
	__asm__ volatile(
   19704:	f04f 0320 	mov.w	r3, #32
   19708:	f3ef 8811 	mrs	r8, BASEPRI
   1970c:	f383 8812 	msr	BASEPRI_MAX, r3
   19710:	f3bf 8f6f 	isb	sy
   19714:	4630      	mov	r0, r6
   19716:	f7ff fc01 	bl	18f1c <z_spin_lock_valid>
   1971a:	b968      	cbnz	r0, 19738 <work_queue_main+0x40>
   1971c:	2394      	movs	r3, #148	; 0x94
   1971e:	4a68      	ldr	r2, [pc, #416]	; (198c0 <work_queue_main+0x1c8>)
   19720:	4968      	ldr	r1, [pc, #416]	; (198c4 <work_queue_main+0x1cc>)
   19722:	4869      	ldr	r0, [pc, #420]	; (198c8 <work_queue_main+0x1d0>)
   19724:	f003 f9e1 	bl	1caea <assert_print>
   19728:	4963      	ldr	r1, [pc, #396]	; (198b8 <work_queue_main+0x1c0>)
   1972a:	4868      	ldr	r0, [pc, #416]	; (198cc <work_queue_main+0x1d4>)
   1972c:	f003 f9dd 	bl	1caea <assert_print>
   19730:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19732:	4863      	ldr	r0, [pc, #396]	; (198c0 <work_queue_main+0x1c8>)
   19734:	f003 f9d2 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   19738:	4630      	mov	r0, r6
   1973a:	f7ff fc0b 	bl	18f54 <z_spin_lock_set_owner>
   1973e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   19742:	b9ad      	cbnz	r5, 19770 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   19744:	2102      	movs	r1, #2
   19746:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1974a:	f006 fc7f 	bl	2004c <flag_test_and_clear>
   1974e:	2800      	cmp	r0, #0
   19750:	d135      	bne.n	197be <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   19752:	2300      	movs	r3, #0
   19754:	f04f 32ff 	mov.w	r2, #4294967295
   19758:	9302      	str	r3, [sp, #8]
   1975a:	f04f 33ff 	mov.w	r3, #4294967295
   1975e:	4641      	mov	r1, r8
   19760:	e9cd 2300 	strd	r2, r3, [sp]
   19764:	4630      	mov	r0, r6
   19766:	f104 0290 	add.w	r2, r4, #144	; 0x90
   1976a:	f001 ff41 	bl	1b5f0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   1976e:	e7c9      	b.n	19704 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19770:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   19774:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19776:	4295      	cmp	r5, r2
	list->tail = node;
   19778:	bf08      	it	eq
   1977a:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   1977e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   19782:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19786:	4630      	mov	r0, r6
   19788:	f043 0302 	orr.w	r3, r3, #2
   1978c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   19790:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   19792:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   19796:	f023 0304 	bic.w	r3, r3, #4
   1979a:	f043 0301 	orr.w	r3, r3, #1
   1979e:	60eb      	str	r3, [r5, #12]
   197a0:	f7ff fbca 	bl	18f38 <z_spin_unlock_valid>
   197a4:	b9a8      	cbnz	r0, 197d2 <work_queue_main+0xda>
   197a6:	23c2      	movs	r3, #194	; 0xc2
   197a8:	4a45      	ldr	r2, [pc, #276]	; (198c0 <work_queue_main+0x1c8>)
   197aa:	4949      	ldr	r1, [pc, #292]	; (198d0 <work_queue_main+0x1d8>)
   197ac:	4846      	ldr	r0, [pc, #280]	; (198c8 <work_queue_main+0x1d0>)
   197ae:	f003 f99c 	bl	1caea <assert_print>
   197b2:	4941      	ldr	r1, [pc, #260]	; (198b8 <work_queue_main+0x1c0>)
   197b4:	4847      	ldr	r0, [pc, #284]	; (198d4 <work_queue_main+0x1dc>)
   197b6:	f003 f998 	bl	1caea <assert_print>
   197ba:	21c2      	movs	r1, #194	; 0xc2
   197bc:	e7b9      	b.n	19732 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   197be:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   197c2:	2200      	movs	r2, #0
   197c4:	2101      	movs	r1, #1
   197c6:	4628      	mov	r0, r5
   197c8:	f001 feb4 	bl	1b534 <z_sched_wake>
   197cc:	2800      	cmp	r0, #0
   197ce:	d1f8      	bne.n	197c2 <work_queue_main+0xca>
   197d0:	e7bf      	b.n	19752 <work_queue_main+0x5a>
	__asm__ volatile(
   197d2:	f388 8811 	msr	BASEPRI, r8
   197d6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   197da:	f1b9 0f00 	cmp.w	r9, #0
   197de:	d10a      	bne.n	197f6 <work_queue_main+0xfe>
   197e0:	493d      	ldr	r1, [pc, #244]	; (198d8 <work_queue_main+0x1e0>)
   197e2:	4839      	ldr	r0, [pc, #228]	; (198c8 <work_queue_main+0x1d0>)
   197e4:	f240 239b 	movw	r3, #667	; 0x29b
   197e8:	4a3c      	ldr	r2, [pc, #240]	; (198dc <work_queue_main+0x1e4>)
   197ea:	f003 f97e 	bl	1caea <assert_print>
   197ee:	f240 219b 	movw	r1, #667	; 0x29b
   197f2:	483a      	ldr	r0, [pc, #232]	; (198dc <work_queue_main+0x1e4>)
   197f4:	e79e      	b.n	19734 <work_queue_main+0x3c>
		handler(work);
   197f6:	4628      	mov	r0, r5
   197f8:	47c8      	blx	r9
	__asm__ volatile(
   197fa:	f04f 0320 	mov.w	r3, #32
   197fe:	f3ef 8a11 	mrs	sl, BASEPRI
   19802:	f383 8812 	msr	BASEPRI_MAX, r3
   19806:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1980a:	4630      	mov	r0, r6
   1980c:	f7ff fb86 	bl	18f1c <z_spin_lock_valid>
   19810:	2800      	cmp	r0, #0
   19812:	d083      	beq.n	1971c <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   19814:	4630      	mov	r0, r6
   19816:	f7ff fb9d 	bl	18f54 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1981a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1981c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1981e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19822:	d417      	bmi.n	19854 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   19824:	60ea      	str	r2, [r5, #12]
   19826:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1982a:	4630      	mov	r0, r6
   1982c:	f023 0302 	bic.w	r3, r3, #2
   19830:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   19834:	f3c3 2500 	ubfx	r5, r3, #8, #1
   19838:	f7ff fb7e 	bl	18f38 <z_spin_unlock_valid>
   1983c:	2800      	cmp	r0, #0
   1983e:	d0b2      	beq.n	197a6 <work_queue_main+0xae>
	__asm__ volatile(
   19840:	f38a 8811 	msr	BASEPRI, sl
   19844:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   19848:	2d00      	cmp	r5, #0
   1984a:	f47f af5b 	bne.w	19704 <work_queue_main+0xc>
	z_impl_k_yield();
   1984e:	f001 fc35 	bl	1b0bc <z_impl_k_yield>
}
   19852:	e757      	b.n	19704 <work_queue_main+0xc>
	return list->head;
   19854:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   19856:	f023 0303 	bic.w	r3, r3, #3
   1985a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1985c:	2800      	cmp	r0, #0
   1985e:	d0e2      	beq.n	19826 <work_queue_main+0x12e>
	return node->next;
   19860:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   19864:	46c3      	mov	fp, r8
	return node->next;
   19866:	f8d0 9000 	ldr.w	r9, [r0]
   1986a:	2800      	cmp	r0, #0
   1986c:	d0db      	beq.n	19826 <work_queue_main+0x12e>
		if (wc->work == work) {
   1986e:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   19870:	4602      	mov	r2, r0
		if (wc->work == work) {
   19872:	429d      	cmp	r5, r3
   19874:	d10d      	bne.n	19892 <work_queue_main+0x19a>
   19876:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   19878:	f1b8 0f00 	cmp.w	r8, #0
   1987c:	d112      	bne.n	198a4 <work_queue_main+0x1ac>
   1987e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   19880:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   19882:	4283      	cmp	r3, r0
   19884:	d100      	bne.n	19888 <work_queue_main+0x190>
	list->tail = node;
   19886:	607a      	str	r2, [r7, #4]
	parent->next = child;
   19888:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1988c:	f7ff fe5c 	bl	19548 <z_impl_k_sem_give>
}
   19890:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19892:	f1b9 0f00 	cmp.w	r9, #0
   19896:	d00d      	beq.n	198b4 <work_queue_main+0x1bc>
	return node->next;
   19898:	f8d9 3000 	ldr.w	r3, [r9]
   1989c:	4648      	mov	r0, r9
   1989e:	4690      	mov	r8, r2
   198a0:	4699      	mov	r9, r3
   198a2:	e7e2      	b.n	1986a <work_queue_main+0x172>
	parent->next = child;
   198a4:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   198a8:	687b      	ldr	r3, [r7, #4]
   198aa:	4283      	cmp	r3, r0
	list->tail = node;
   198ac:	bf08      	it	eq
   198ae:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   198b2:	e7e9      	b.n	19888 <work_queue_main+0x190>
   198b4:	464b      	mov	r3, r9
   198b6:	e7f1      	b.n	1989c <work_queue_main+0x1a4>
   198b8:	20009c34 	.word	0x20009c34
   198bc:	20009c2c 	.word	0x20009c2c
   198c0:	0002197b 	.word	0x0002197b
   198c4:	000219d4 	.word	0x000219d4
   198c8:	00021547 	.word	0x00021547
   198cc:	000219e9 	.word	0x000219e9
   198d0:	000219a8 	.word	0x000219a8
   198d4:	000219bf 	.word	0x000219bf
   198d8:	000252c5 	.word	0x000252c5
   198dc:	000252a4 	.word	0x000252a4

000198e0 <cancel_sync_locked>:
{
   198e0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   198e2:	68c3      	ldr	r3, [r0, #12]
{
   198e4:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   198e6:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   198ea:	079b      	lsls	r3, r3, #30
{
   198ec:	460c      	mov	r4, r1
	if (ret) {
   198ee:	d50d      	bpl.n	1990c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   198f0:	2201      	movs	r2, #1
   198f2:	2100      	movs	r1, #0
   198f4:	f104 0008 	add.w	r0, r4, #8
   198f8:	f006 fb98 	bl	2002c <z_impl_k_sem_init>
	parent->next = child;
   198fc:	2300      	movs	r3, #0
   198fe:	6023      	str	r3, [r4, #0]
	return list->tail;
   19900:	4b05      	ldr	r3, [pc, #20]	; (19918 <cancel_sync_locked+0x38>)
	canceler->work = work;
   19902:	6065      	str	r5, [r4, #4]
   19904:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   19906:	b91a      	cbnz	r2, 19910 <cancel_sync_locked+0x30>
	list->head = node;
   19908:	e9c3 4400 	strd	r4, r4, [r3]
}
   1990c:	4630      	mov	r0, r6
   1990e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   19910:	6014      	str	r4, [r2, #0]
	list->tail = node;
   19912:	605c      	str	r4, [r3, #4]
}
   19914:	e7fa      	b.n	1990c <cancel_sync_locked+0x2c>
   19916:	bf00      	nop
   19918:	20009c2c 	.word	0x20009c2c

0001991c <submit_to_queue_locked>:
{
   1991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1991e:	68c3      	ldr	r3, [r0, #12]
{
   19920:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19922:	079a      	lsls	r2, r3, #30
{
   19924:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19926:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1992a:	d439      	bmi.n	199a0 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1992c:	075b      	lsls	r3, r3, #29
   1992e:	d425      	bmi.n	1997c <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   19930:	680b      	ldr	r3, [r1, #0]
   19932:	b90b      	cbnz	r3, 19938 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   19934:	6883      	ldr	r3, [r0, #8]
   19936:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   19938:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1993a:	07dd      	lsls	r5, r3, #31
   1993c:	d521      	bpl.n	19982 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   1993e:	68a3      	ldr	r3, [r4, #8]
   19940:	b95b      	cbnz	r3, 1995a <submit_to_queue_locked+0x3e>
   19942:	4928      	ldr	r1, [pc, #160]	; (199e4 <submit_to_queue_locked+0xc8>)
   19944:	4828      	ldr	r0, [pc, #160]	; (199e8 <submit_to_queue_locked+0xcc>)
   19946:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1994a:	4a28      	ldr	r2, [pc, #160]	; (199ec <submit_to_queue_locked+0xd0>)
   1994c:	f003 f8cd 	bl	1caea <assert_print>
   19950:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   19954:	4825      	ldr	r0, [pc, #148]	; (199ec <submit_to_queue_locked+0xd0>)
   19956:	f003 f8c1 	bl	1cadc <assert_post_action>
			ret = 2;
   1995a:	2602      	movs	r6, #2
			*queuep = work->queue;
   1995c:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1995e:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   19960:	2d00      	cmp	r5, #0
   19962:	d03c      	beq.n	199de <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19964:	4b22      	ldr	r3, [pc, #136]	; (199f0 <submit_to_queue_locked+0xd4>)
   19966:	689b      	ldr	r3, [r3, #8]
   19968:	42ab      	cmp	r3, r5
   1996a:	d00c      	beq.n	19986 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1996c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19970:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   19972:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19976:	d416      	bmi.n	199a6 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   19978:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1997c:	2300      	movs	r3, #0
   1997e:	603b      	str	r3, [r7, #0]
	return ret;
   19980:	e027      	b.n	199d2 <submit_to_queue_locked+0xb6>
		ret = 1;
   19982:	2601      	movs	r6, #1
   19984:	e7eb      	b.n	1995e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19986:	f006 fb00 	bl	1ff8a <k_is_in_isr>
   1998a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   1998e:	2800      	cmp	r0, #0
   19990:	d1ee      	bne.n	19970 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19992:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   19994:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19998:	d5ee      	bpl.n	19978 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   1999a:	b152      	cbz	r2, 199b2 <submit_to_queue_locked+0x96>
   1999c:	075b      	lsls	r3, r3, #29
   1999e:	d408      	bmi.n	199b2 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   199a0:	f06f 060f 	mvn.w	r6, #15
   199a4:	e7ea      	b.n	1997c <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   199a6:	2a00      	cmp	r2, #0
   199a8:	d1fa      	bne.n	199a0 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   199aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   199ae:	2b00      	cmp	r3, #0
   199b0:	d1f6      	bne.n	199a0 <submit_to_queue_locked+0x84>
	parent->next = child;
   199b2:	2300      	movs	r3, #0
   199b4:	6023      	str	r3, [r4, #0]
	return list->tail;
   199b6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   199ba:	b963      	cbnz	r3, 199d6 <submit_to_queue_locked+0xba>
	list->head = node;
   199bc:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   199c0:	4628      	mov	r0, r5
   199c2:	f006 fb5c 	bl	2007e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   199c6:	68e3      	ldr	r3, [r4, #12]
   199c8:	f043 0304 	orr.w	r3, r3, #4
   199cc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   199ce:	683b      	ldr	r3, [r7, #0]
   199d0:	60a3      	str	r3, [r4, #8]
}
   199d2:	4630      	mov	r0, r6
   199d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   199d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   199d8:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   199dc:	e7f0      	b.n	199c0 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   199de:	f06f 0615 	mvn.w	r6, #21
   199e2:	e7cb      	b.n	1997c <submit_to_queue_locked+0x60>
   199e4:	000252dc 	.word	0x000252dc
   199e8:	00021547 	.word	0x00021547
   199ec:	000252a4 	.word	0x000252a4
   199f0:	20009bfc 	.word	0x20009bfc

000199f4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   199f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   199f6:	4604      	mov	r4, r0
	__asm__ volatile(
   199f8:	f04f 0320 	mov.w	r3, #32
   199fc:	f3ef 8511 	mrs	r5, BASEPRI
   19a00:	f383 8812 	msr	BASEPRI_MAX, r3
   19a04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19a08:	481c      	ldr	r0, [pc, #112]	; (19a7c <work_timeout+0x88>)
   19a0a:	f7ff fa87 	bl	18f1c <z_spin_lock_valid>
   19a0e:	b968      	cbnz	r0, 19a2c <work_timeout+0x38>
   19a10:	2394      	movs	r3, #148	; 0x94
   19a12:	4a1b      	ldr	r2, [pc, #108]	; (19a80 <work_timeout+0x8c>)
   19a14:	491b      	ldr	r1, [pc, #108]	; (19a84 <work_timeout+0x90>)
   19a16:	481c      	ldr	r0, [pc, #112]	; (19a88 <work_timeout+0x94>)
   19a18:	f003 f867 	bl	1caea <assert_print>
   19a1c:	4917      	ldr	r1, [pc, #92]	; (19a7c <work_timeout+0x88>)
   19a1e:	481b      	ldr	r0, [pc, #108]	; (19a8c <work_timeout+0x98>)
   19a20:	f003 f863 	bl	1caea <assert_print>
   19a24:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a26:	4816      	ldr	r0, [pc, #88]	; (19a80 <work_timeout+0x8c>)
   19a28:	f003 f858 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   19a2c:	4813      	ldr	r0, [pc, #76]	; (19a7c <work_timeout+0x88>)
   19a2e:	f7ff fa91 	bl	18f54 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   19a32:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   19a34:	2103      	movs	r1, #3
   19a36:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   19a38:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   19a3a:	f1a4 0610 	sub.w	r6, r4, #16
   19a3e:	f006 fb05 	bl	2004c <flag_test_and_clear>
   19a42:	b128      	cbz	r0, 19a50 <work_timeout+0x5c>
		queue = dw->queue;
   19a44:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   19a46:	4630      	mov	r0, r6
   19a48:	a901      	add	r1, sp, #4
		queue = dw->queue;
   19a4a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   19a4c:	f7ff ff66 	bl	1991c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a50:	480a      	ldr	r0, [pc, #40]	; (19a7c <work_timeout+0x88>)
   19a52:	f7ff fa71 	bl	18f38 <z_spin_unlock_valid>
   19a56:	b958      	cbnz	r0, 19a70 <work_timeout+0x7c>
   19a58:	23c2      	movs	r3, #194	; 0xc2
   19a5a:	4a09      	ldr	r2, [pc, #36]	; (19a80 <work_timeout+0x8c>)
   19a5c:	490c      	ldr	r1, [pc, #48]	; (19a90 <work_timeout+0x9c>)
   19a5e:	480a      	ldr	r0, [pc, #40]	; (19a88 <work_timeout+0x94>)
   19a60:	f003 f843 	bl	1caea <assert_print>
   19a64:	4905      	ldr	r1, [pc, #20]	; (19a7c <work_timeout+0x88>)
   19a66:	480b      	ldr	r0, [pc, #44]	; (19a94 <work_timeout+0xa0>)
   19a68:	f003 f83f 	bl	1caea <assert_print>
   19a6c:	21c2      	movs	r1, #194	; 0xc2
   19a6e:	e7da      	b.n	19a26 <work_timeout+0x32>
	__asm__ volatile(
   19a70:	f385 8811 	msr	BASEPRI, r5
   19a74:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   19a78:	b002      	add	sp, #8
   19a7a:	bd70      	pop	{r4, r5, r6, pc}
   19a7c:	20009c34 	.word	0x20009c34
   19a80:	0002197b 	.word	0x0002197b
   19a84:	000219d4 	.word	0x000219d4
   19a88:	00021547 	.word	0x00021547
   19a8c:	000219e9 	.word	0x000219e9
   19a90:	000219a8 	.word	0x000219a8
   19a94:	000219bf 	.word	0x000219bf

00019a98 <k_work_init>:
{
   19a98:	b538      	push	{r3, r4, r5, lr}
   19a9a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   19a9c:	4604      	mov	r4, r0
   19a9e:	b948      	cbnz	r0, 19ab4 <k_work_init+0x1c>
   19aa0:	490c      	ldr	r1, [pc, #48]	; (19ad4 <k_work_init+0x3c>)
   19aa2:	2389      	movs	r3, #137	; 0x89
   19aa4:	4a0c      	ldr	r2, [pc, #48]	; (19ad8 <k_work_init+0x40>)
   19aa6:	480d      	ldr	r0, [pc, #52]	; (19adc <k_work_init+0x44>)
   19aa8:	f003 f81f 	bl	1caea <assert_print>
   19aac:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   19aae:	480a      	ldr	r0, [pc, #40]	; (19ad8 <k_work_init+0x40>)
   19ab0:	f003 f814 	bl	1cadc <assert_post_action>
   19ab4:	b939      	cbnz	r1, 19ac6 <k_work_init+0x2e>
   19ab6:	490a      	ldr	r1, [pc, #40]	; (19ae0 <k_work_init+0x48>)
   19ab8:	238a      	movs	r3, #138	; 0x8a
   19aba:	4a07      	ldr	r2, [pc, #28]	; (19ad8 <k_work_init+0x40>)
   19abc:	4807      	ldr	r0, [pc, #28]	; (19adc <k_work_init+0x44>)
   19abe:	f003 f814 	bl	1caea <assert_print>
   19ac2:	218a      	movs	r1, #138	; 0x8a
   19ac4:	e7f3      	b.n	19aae <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   19ac6:	2210      	movs	r2, #16
   19ac8:	2100      	movs	r1, #0
   19aca:	f004 f828 	bl	1db1e <memset>
   19ace:	6065      	str	r5, [r4, #4]
}
   19ad0:	bd38      	pop	{r3, r4, r5, pc}
   19ad2:	bf00      	nop
   19ad4:	0002537b 	.word	0x0002537b
   19ad8:	000252a4 	.word	0x000252a4
   19adc:	00021547 	.word	0x00021547
   19ae0:	000252c5 	.word	0x000252c5

00019ae4 <k_work_busy_get>:
{
   19ae4:	b538      	push	{r3, r4, r5, lr}
   19ae6:	4604      	mov	r4, r0
	__asm__ volatile(
   19ae8:	f04f 0320 	mov.w	r3, #32
   19aec:	f3ef 8511 	mrs	r5, BASEPRI
   19af0:	f383 8812 	msr	BASEPRI_MAX, r3
   19af4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19af8:	4816      	ldr	r0, [pc, #88]	; (19b54 <k_work_busy_get+0x70>)
   19afa:	f7ff fa0f 	bl	18f1c <z_spin_lock_valid>
   19afe:	b968      	cbnz	r0, 19b1c <k_work_busy_get+0x38>
   19b00:	2394      	movs	r3, #148	; 0x94
   19b02:	4a15      	ldr	r2, [pc, #84]	; (19b58 <k_work_busy_get+0x74>)
   19b04:	4915      	ldr	r1, [pc, #84]	; (19b5c <k_work_busy_get+0x78>)
   19b06:	4816      	ldr	r0, [pc, #88]	; (19b60 <k_work_busy_get+0x7c>)
   19b08:	f002 ffef 	bl	1caea <assert_print>
   19b0c:	4911      	ldr	r1, [pc, #68]	; (19b54 <k_work_busy_get+0x70>)
   19b0e:	4815      	ldr	r0, [pc, #84]	; (19b64 <k_work_busy_get+0x80>)
   19b10:	f002 ffeb 	bl	1caea <assert_print>
   19b14:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b16:	4810      	ldr	r0, [pc, #64]	; (19b58 <k_work_busy_get+0x74>)
   19b18:	f002 ffe0 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   19b1c:	480d      	ldr	r0, [pc, #52]	; (19b54 <k_work_busy_get+0x70>)
   19b1e:	f7ff fa19 	bl	18f54 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   19b22:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b24:	480b      	ldr	r0, [pc, #44]	; (19b54 <k_work_busy_get+0x70>)
   19b26:	f004 040f 	and.w	r4, r4, #15
   19b2a:	f7ff fa05 	bl	18f38 <z_spin_unlock_valid>
   19b2e:	b958      	cbnz	r0, 19b48 <k_work_busy_get+0x64>
   19b30:	23c2      	movs	r3, #194	; 0xc2
   19b32:	4a09      	ldr	r2, [pc, #36]	; (19b58 <k_work_busy_get+0x74>)
   19b34:	490c      	ldr	r1, [pc, #48]	; (19b68 <k_work_busy_get+0x84>)
   19b36:	480a      	ldr	r0, [pc, #40]	; (19b60 <k_work_busy_get+0x7c>)
   19b38:	f002 ffd7 	bl	1caea <assert_print>
   19b3c:	4905      	ldr	r1, [pc, #20]	; (19b54 <k_work_busy_get+0x70>)
   19b3e:	480b      	ldr	r0, [pc, #44]	; (19b6c <k_work_busy_get+0x88>)
   19b40:	f002 ffd3 	bl	1caea <assert_print>
   19b44:	21c2      	movs	r1, #194	; 0xc2
   19b46:	e7e6      	b.n	19b16 <k_work_busy_get+0x32>
	__asm__ volatile(
   19b48:	f385 8811 	msr	BASEPRI, r5
   19b4c:	f3bf 8f6f 	isb	sy
}
   19b50:	4620      	mov	r0, r4
   19b52:	bd38      	pop	{r3, r4, r5, pc}
   19b54:	20009c34 	.word	0x20009c34
   19b58:	0002197b 	.word	0x0002197b
   19b5c:	000219d4 	.word	0x000219d4
   19b60:	00021547 	.word	0x00021547
   19b64:	000219e9 	.word	0x000219e9
   19b68:	000219a8 	.word	0x000219a8
   19b6c:	000219bf 	.word	0x000219bf

00019b70 <z_work_submit_to_queue>:
{
   19b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   19b72:	460c      	mov	r4, r1
{
   19b74:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   19b76:	b959      	cbnz	r1, 19b90 <z_work_submit_to_queue+0x20>
   19b78:	4921      	ldr	r1, [pc, #132]	; (19c00 <z_work_submit_to_queue+0x90>)
   19b7a:	4822      	ldr	r0, [pc, #136]	; (19c04 <z_work_submit_to_queue+0x94>)
   19b7c:	f44f 73ba 	mov.w	r3, #372	; 0x174
   19b80:	4a21      	ldr	r2, [pc, #132]	; (19c08 <z_work_submit_to_queue+0x98>)
   19b82:	f002 ffb2 	bl	1caea <assert_print>
   19b86:	f44f 71ba 	mov.w	r1, #372	; 0x174
   19b8a:	481f      	ldr	r0, [pc, #124]	; (19c08 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b8c:	f002 ffa6 	bl	1cadc <assert_post_action>
	__asm__ volatile(
   19b90:	f04f 0320 	mov.w	r3, #32
   19b94:	f3ef 8511 	mrs	r5, BASEPRI
   19b98:	f383 8812 	msr	BASEPRI_MAX, r3
   19b9c:	f3bf 8f6f 	isb	sy
   19ba0:	481a      	ldr	r0, [pc, #104]	; (19c0c <z_work_submit_to_queue+0x9c>)
   19ba2:	f7ff f9bb 	bl	18f1c <z_spin_lock_valid>
   19ba6:	b960      	cbnz	r0, 19bc2 <z_work_submit_to_queue+0x52>
   19ba8:	2394      	movs	r3, #148	; 0x94
   19baa:	4a19      	ldr	r2, [pc, #100]	; (19c10 <z_work_submit_to_queue+0xa0>)
   19bac:	4919      	ldr	r1, [pc, #100]	; (19c14 <z_work_submit_to_queue+0xa4>)
   19bae:	4815      	ldr	r0, [pc, #84]	; (19c04 <z_work_submit_to_queue+0x94>)
   19bb0:	f002 ff9b 	bl	1caea <assert_print>
   19bb4:	4915      	ldr	r1, [pc, #84]	; (19c0c <z_work_submit_to_queue+0x9c>)
   19bb6:	4818      	ldr	r0, [pc, #96]	; (19c18 <z_work_submit_to_queue+0xa8>)
   19bb8:	f002 ff97 	bl	1caea <assert_print>
   19bbc:	2194      	movs	r1, #148	; 0x94
   19bbe:	4814      	ldr	r0, [pc, #80]	; (19c10 <z_work_submit_to_queue+0xa0>)
   19bc0:	e7e4      	b.n	19b8c <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   19bc2:	4812      	ldr	r0, [pc, #72]	; (19c0c <z_work_submit_to_queue+0x9c>)
   19bc4:	f7ff f9c6 	bl	18f54 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   19bc8:	4620      	mov	r0, r4
   19bca:	a901      	add	r1, sp, #4
   19bcc:	f7ff fea6 	bl	1991c <submit_to_queue_locked>
   19bd0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19bd2:	480e      	ldr	r0, [pc, #56]	; (19c0c <z_work_submit_to_queue+0x9c>)
   19bd4:	f7ff f9b0 	bl	18f38 <z_spin_unlock_valid>
   19bd8:	b958      	cbnz	r0, 19bf2 <z_work_submit_to_queue+0x82>
   19bda:	23c2      	movs	r3, #194	; 0xc2
   19bdc:	4a0c      	ldr	r2, [pc, #48]	; (19c10 <z_work_submit_to_queue+0xa0>)
   19bde:	490f      	ldr	r1, [pc, #60]	; (19c1c <z_work_submit_to_queue+0xac>)
   19be0:	4808      	ldr	r0, [pc, #32]	; (19c04 <z_work_submit_to_queue+0x94>)
   19be2:	f002 ff82 	bl	1caea <assert_print>
   19be6:	4909      	ldr	r1, [pc, #36]	; (19c0c <z_work_submit_to_queue+0x9c>)
   19be8:	480d      	ldr	r0, [pc, #52]	; (19c20 <z_work_submit_to_queue+0xb0>)
   19bea:	f002 ff7e 	bl	1caea <assert_print>
   19bee:	21c2      	movs	r1, #194	; 0xc2
   19bf0:	e7e5      	b.n	19bbe <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   19bf2:	f385 8811 	msr	BASEPRI, r5
   19bf6:	f3bf 8f6f 	isb	sy
}
   19bfa:	4620      	mov	r0, r4
   19bfc:	b003      	add	sp, #12
   19bfe:	bd30      	pop	{r4, r5, pc}
   19c00:	0002537b 	.word	0x0002537b
   19c04:	00021547 	.word	0x00021547
   19c08:	000252a4 	.word	0x000252a4
   19c0c:	20009c34 	.word	0x20009c34
   19c10:	0002197b 	.word	0x0002197b
   19c14:	000219d4 	.word	0x000219d4
   19c18:	000219e9 	.word	0x000219e9
   19c1c:	000219a8 	.word	0x000219a8
   19c20:	000219bf 	.word	0x000219bf

00019c24 <k_work_submit>:
{
   19c24:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   19c26:	4801      	ldr	r0, [pc, #4]	; (19c2c <k_work_submit+0x8>)
   19c28:	f006 ba63 	b.w	200f2 <k_work_submit_to_queue>
   19c2c:	20009650 	.word	0x20009650

00019c30 <k_work_queue_init>:
{
   19c30:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   19c32:	b958      	cbnz	r0, 19c4c <k_work_queue_init+0x1c>
   19c34:	4908      	ldr	r1, [pc, #32]	; (19c58 <k_work_queue_init+0x28>)
   19c36:	4809      	ldr	r0, [pc, #36]	; (19c5c <k_work_queue_init+0x2c>)
   19c38:	f240 23b9 	movw	r3, #697	; 0x2b9
   19c3c:	4a08      	ldr	r2, [pc, #32]	; (19c60 <k_work_queue_init+0x30>)
   19c3e:	f002 ff54 	bl	1caea <assert_print>
   19c42:	f240 21b9 	movw	r1, #697	; 0x2b9
   19c46:	4806      	ldr	r0, [pc, #24]	; (19c60 <k_work_queue_init+0x30>)
   19c48:	f002 ff48 	bl	1cadc <assert_post_action>
	*queue = (struct k_work_q) {
   19c4c:	22a8      	movs	r2, #168	; 0xa8
   19c4e:	2100      	movs	r1, #0
   19c50:	f003 ff65 	bl	1db1e <memset>
}
   19c54:	bd08      	pop	{r3, pc}
   19c56:	bf00      	nop
   19c58:	000252e2 	.word	0x000252e2
   19c5c:	00021547 	.word	0x00021547
   19c60:	000252a4 	.word	0x000252a4

00019c64 <k_work_queue_start>:
{
   19c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c66:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   19c68:	4604      	mov	r4, r0
{
   19c6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   19c6c:	b958      	cbnz	r0, 19c86 <k_work_queue_start+0x22>
   19c6e:	492b      	ldr	r1, [pc, #172]	; (19d1c <k_work_queue_start+0xb8>)
   19c70:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   19c74:	4a2a      	ldr	r2, [pc, #168]	; (19d20 <k_work_queue_start+0xbc>)
   19c76:	482b      	ldr	r0, [pc, #172]	; (19d24 <k_work_queue_start+0xc0>)
   19c78:	f002 ff37 	bl	1caea <assert_print>
   19c7c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   19c80:	4827      	ldr	r0, [pc, #156]	; (19d20 <k_work_queue_start+0xbc>)
   19c82:	f002 ff2b 	bl	1cadc <assert_post_action>
   19c86:	b949      	cbnz	r1, 19c9c <k_work_queue_start+0x38>
   19c88:	4927      	ldr	r1, [pc, #156]	; (19d28 <k_work_queue_start+0xc4>)
   19c8a:	f240 23c9 	movw	r3, #713	; 0x2c9
   19c8e:	4a24      	ldr	r2, [pc, #144]	; (19d20 <k_work_queue_start+0xbc>)
   19c90:	4824      	ldr	r0, [pc, #144]	; (19d24 <k_work_queue_start+0xc0>)
   19c92:	f002 ff2a 	bl	1caea <assert_print>
   19c96:	f240 21c9 	movw	r1, #713	; 0x2c9
   19c9a:	e7f1      	b.n	19c80 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   19c9c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   19ca0:	f010 0001 	ands.w	r0, r0, #1
   19ca4:	d009      	beq.n	19cba <k_work_queue_start+0x56>
   19ca6:	4921      	ldr	r1, [pc, #132]	; (19d2c <k_work_queue_start+0xc8>)
   19ca8:	f240 23ca 	movw	r3, #714	; 0x2ca
   19cac:	4a1c      	ldr	r2, [pc, #112]	; (19d20 <k_work_queue_start+0xbc>)
   19cae:	481d      	ldr	r0, [pc, #116]	; (19d24 <k_work_queue_start+0xc0>)
   19cb0:	f002 ff1b 	bl	1caea <assert_print>
   19cb4:	f240 21ca 	movw	r1, #714	; 0x2ca
   19cb8:	e7e2      	b.n	19c80 <k_work_queue_start+0x1c>
	list->tail = NULL;
   19cba:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   19cbe:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   19cc2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   19cc6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19cca:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   19cce:	b31d      	cbz	r5, 19d18 <k_work_queue_start+0xb4>
   19cd0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   19cd2:	2800      	cmp	r0, #0
   19cd4:	f240 1001 	movw	r0, #257	; 0x101
   19cd8:	bf08      	it	eq
   19cda:	2001      	moveq	r0, #1
	*flagp = flags;
   19cdc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19ce0:	2000      	movs	r0, #0
   19ce2:	f04f 36ff 	mov.w	r6, #4294967295
   19ce6:	f04f 37ff 	mov.w	r7, #4294967295
   19cea:	e9cd 3003 	strd	r3, r0, [sp, #12]
   19cee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   19cf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19cf6:	4620      	mov	r0, r4
   19cf8:	4b0d      	ldr	r3, [pc, #52]	; (19d30 <k_work_queue_start+0xcc>)
   19cfa:	9400      	str	r4, [sp, #0]
   19cfc:	f7ff f844 	bl	18d88 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   19d00:	b125      	cbz	r5, 19d0c <k_work_queue_start+0xa8>
   19d02:	6829      	ldr	r1, [r5, #0]
   19d04:	b111      	cbz	r1, 19d0c <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   19d06:	4620      	mov	r0, r4
   19d08:	f006 f945 	bl	1ff96 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   19d0c:	4620      	mov	r0, r4
}
   19d0e:	b009      	add	sp, #36	; 0x24
   19d10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19d14:	f006 b944 	b.w	1ffa0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   19d18:	2001      	movs	r0, #1
   19d1a:	e7df      	b.n	19cdc <k_work_queue_start+0x78>
   19d1c:	0002533a 	.word	0x0002533a
   19d20:	000252a4 	.word	0x000252a4
   19d24:	00021547 	.word	0x00021547
   19d28:	00025340 	.word	0x00025340
   19d2c:	00025346 	.word	0x00025346
   19d30:	000196f9 	.word	0x000196f9

00019d34 <k_work_queue_drain>:
{
   19d34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   19d36:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   19d38:	4604      	mov	r4, r0
   19d3a:	b958      	cbnz	r0, 19d54 <k_work_queue_drain+0x20>
   19d3c:	493a      	ldr	r1, [pc, #232]	; (19e28 <k_work_queue_drain+0xf4>)
   19d3e:	f240 23ed 	movw	r3, #749	; 0x2ed
   19d42:	4a3a      	ldr	r2, [pc, #232]	; (19e2c <k_work_queue_drain+0xf8>)
   19d44:	483a      	ldr	r0, [pc, #232]	; (19e30 <k_work_queue_drain+0xfc>)
   19d46:	f002 fed0 	bl	1caea <assert_print>
   19d4a:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   19d4e:	4837      	ldr	r0, [pc, #220]	; (19e2c <k_work_queue_drain+0xf8>)
   19d50:	f002 fec4 	bl	1cadc <assert_post_action>
   19d54:	f006 f919 	bl	1ff8a <k_is_in_isr>
   19d58:	b148      	cbz	r0, 19d6e <k_work_queue_drain+0x3a>
   19d5a:	4936      	ldr	r1, [pc, #216]	; (19e34 <k_work_queue_drain+0x100>)
   19d5c:	f240 23ee 	movw	r3, #750	; 0x2ee
   19d60:	4a32      	ldr	r2, [pc, #200]	; (19e2c <k_work_queue_drain+0xf8>)
   19d62:	4833      	ldr	r0, [pc, #204]	; (19e30 <k_work_queue_drain+0xfc>)
   19d64:	f002 fec1 	bl	1caea <assert_print>
   19d68:	f240 21ee 	movw	r1, #750	; 0x2ee
   19d6c:	e7ef      	b.n	19d4e <k_work_queue_drain+0x1a>
	__asm__ volatile(
   19d6e:	f04f 0320 	mov.w	r3, #32
   19d72:	f3ef 8611 	mrs	r6, BASEPRI
   19d76:	f383 8812 	msr	BASEPRI_MAX, r3
   19d7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d7e:	482e      	ldr	r0, [pc, #184]	; (19e38 <k_work_queue_drain+0x104>)
   19d80:	f7ff f8cc 	bl	18f1c <z_spin_lock_valid>
   19d84:	b960      	cbnz	r0, 19da0 <k_work_queue_drain+0x6c>
   19d86:	2394      	movs	r3, #148	; 0x94
   19d88:	4a2c      	ldr	r2, [pc, #176]	; (19e3c <k_work_queue_drain+0x108>)
   19d8a:	492d      	ldr	r1, [pc, #180]	; (19e40 <k_work_queue_drain+0x10c>)
   19d8c:	4828      	ldr	r0, [pc, #160]	; (19e30 <k_work_queue_drain+0xfc>)
   19d8e:	f002 feac 	bl	1caea <assert_print>
   19d92:	4929      	ldr	r1, [pc, #164]	; (19e38 <k_work_queue_drain+0x104>)
   19d94:	482b      	ldr	r0, [pc, #172]	; (19e44 <k_work_queue_drain+0x110>)
   19d96:	f002 fea8 	bl	1caea <assert_print>
   19d9a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d9c:	4827      	ldr	r0, [pc, #156]	; (19e3c <k_work_queue_drain+0x108>)
   19d9e:	e7d7      	b.n	19d50 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   19da0:	4825      	ldr	r0, [pc, #148]	; (19e38 <k_work_queue_drain+0x104>)
   19da2:	f7ff f8d7 	bl	18f54 <z_spin_lock_set_owner>
	return *flagp;
   19da6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   19daa:	f013 0f06 	tst.w	r3, #6
   19dae:	d11d      	bne.n	19dec <k_work_queue_drain+0xb8>
	    || plug
   19db0:	b1b5      	cbz	r5, 19de0 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   19db2:	f043 030c 	orr.w	r3, r3, #12
   19db6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   19dba:	4620      	mov	r0, r4
   19dbc:	f006 f95f 	bl	2007e <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   19dc0:	2300      	movs	r3, #0
   19dc2:	f04f 32ff 	mov.w	r2, #4294967295
   19dc6:	9302      	str	r3, [sp, #8]
   19dc8:	f04f 33ff 	mov.w	r3, #4294967295
   19dcc:	4631      	mov	r1, r6
   19dce:	e9cd 2300 	strd	r2, r3, [sp]
   19dd2:	4819      	ldr	r0, [pc, #100]	; (19e38 <k_work_queue_drain+0x104>)
   19dd4:	f104 0298 	add.w	r2, r4, #152	; 0x98
   19dd8:	f001 fc0a 	bl	1b5f0 <z_sched_wait>
}
   19ddc:	b004      	add	sp, #16
   19dde:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   19de0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   19de4:	b14d      	cbz	r5, 19dfa <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   19de6:	f043 0304 	orr.w	r3, r3, #4
   19dea:	e7e4      	b.n	19db6 <k_work_queue_drain+0x82>
   19dec:	f043 0204 	orr.w	r2, r3, #4
   19df0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   19df4:	2d00      	cmp	r5, #0
   19df6:	d0e0      	beq.n	19dba <k_work_queue_drain+0x86>
   19df8:	e7db      	b.n	19db2 <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19dfa:	480f      	ldr	r0, [pc, #60]	; (19e38 <k_work_queue_drain+0x104>)
   19dfc:	f7ff f89c 	bl	18f38 <z_spin_unlock_valid>
   19e00:	b958      	cbnz	r0, 19e1a <k_work_queue_drain+0xe6>
   19e02:	23c2      	movs	r3, #194	; 0xc2
   19e04:	4a0d      	ldr	r2, [pc, #52]	; (19e3c <k_work_queue_drain+0x108>)
   19e06:	4910      	ldr	r1, [pc, #64]	; (19e48 <k_work_queue_drain+0x114>)
   19e08:	4809      	ldr	r0, [pc, #36]	; (19e30 <k_work_queue_drain+0xfc>)
   19e0a:	f002 fe6e 	bl	1caea <assert_print>
   19e0e:	490a      	ldr	r1, [pc, #40]	; (19e38 <k_work_queue_drain+0x104>)
   19e10:	480e      	ldr	r0, [pc, #56]	; (19e4c <k_work_queue_drain+0x118>)
   19e12:	f002 fe6a 	bl	1caea <assert_print>
   19e16:	21c2      	movs	r1, #194	; 0xc2
   19e18:	e7c0      	b.n	19d9c <k_work_queue_drain+0x68>
	__asm__ volatile(
   19e1a:	f386 8811 	msr	BASEPRI, r6
   19e1e:	f3bf 8f6f 	isb	sy
	int ret = 0;
   19e22:	4628      	mov	r0, r5
	return ret;
   19e24:	e7da      	b.n	19ddc <k_work_queue_drain+0xa8>
   19e26:	bf00      	nop
   19e28:	0002533a 	.word	0x0002533a
   19e2c:	000252a4 	.word	0x000252a4
   19e30:	00021547 	.word	0x00021547
   19e34:	000233ef 	.word	0x000233ef
   19e38:	20009c34 	.word	0x20009c34
   19e3c:	0002197b 	.word	0x0002197b
   19e40:	000219d4 	.word	0x000219d4
   19e44:	000219e9 	.word	0x000219e9
   19e48:	000219a8 	.word	0x000219a8
   19e4c:	000219bf 	.word	0x000219bf

00019e50 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   19e50:	b538      	push	{r3, r4, r5, lr}
   19e52:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   19e54:	4604      	mov	r4, r0
   19e56:	b958      	cbnz	r0, 19e70 <k_work_init_delayable+0x20>
   19e58:	490f      	ldr	r1, [pc, #60]	; (19e98 <k_work_init_delayable+0x48>)
   19e5a:	f44f 7350 	mov.w	r3, #832	; 0x340
   19e5e:	4a0f      	ldr	r2, [pc, #60]	; (19e9c <k_work_init_delayable+0x4c>)
   19e60:	480f      	ldr	r0, [pc, #60]	; (19ea0 <k_work_init_delayable+0x50>)
   19e62:	f002 fe42 	bl	1caea <assert_print>
   19e66:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   19e6a:	480c      	ldr	r0, [pc, #48]	; (19e9c <k_work_init_delayable+0x4c>)
   19e6c:	f002 fe36 	bl	1cadc <assert_post_action>
   19e70:	b949      	cbnz	r1, 19e86 <k_work_init_delayable+0x36>
   19e72:	490c      	ldr	r1, [pc, #48]	; (19ea4 <k_work_init_delayable+0x54>)
   19e74:	f240 3341 	movw	r3, #833	; 0x341
   19e78:	4a08      	ldr	r2, [pc, #32]	; (19e9c <k_work_init_delayable+0x4c>)
   19e7a:	4809      	ldr	r0, [pc, #36]	; (19ea0 <k_work_init_delayable+0x50>)
   19e7c:	f002 fe35 	bl	1caea <assert_print>
   19e80:	f240 3141 	movw	r1, #833	; 0x341
   19e84:	e7f1      	b.n	19e6a <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   19e86:	2230      	movs	r2, #48	; 0x30
   19e88:	2100      	movs	r1, #0
   19e8a:	f003 fe48 	bl	1db1e <memset>
   19e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
   19e92:	6065      	str	r5, [r4, #4]
   19e94:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   19e96:	bd38      	pop	{r3, r4, r5, pc}
   19e98:	0002537a 	.word	0x0002537a
   19e9c:	000252a4 	.word	0x000252a4
   19ea0:	00021547 	.word	0x00021547
   19ea4:	000252c5 	.word	0x000252c5

00019ea8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   19ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19eaa:	4616      	mov	r6, r2
   19eac:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   19eae:	460c      	mov	r4, r1
{
   19eb0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   19eb2:	b959      	cbnz	r1, 19ecc <k_work_schedule_for_queue+0x24>
   19eb4:	492d      	ldr	r1, [pc, #180]	; (19f6c <k_work_schedule_for_queue+0xc4>)
   19eb6:	482e      	ldr	r0, [pc, #184]	; (19f70 <k_work_schedule_for_queue+0xc8>)
   19eb8:	f240 33b7 	movw	r3, #951	; 0x3b7
   19ebc:	4a2d      	ldr	r2, [pc, #180]	; (19f74 <k_work_schedule_for_queue+0xcc>)
   19ebe:	f002 fe14 	bl	1caea <assert_print>
   19ec2:	f240 31b7 	movw	r1, #951	; 0x3b7
   19ec6:	482b      	ldr	r0, [pc, #172]	; (19f74 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ec8:	f002 fe08 	bl	1cadc <assert_post_action>
	__asm__ volatile(
   19ecc:	f04f 0320 	mov.w	r3, #32
   19ed0:	f3ef 8711 	mrs	r7, BASEPRI
   19ed4:	f383 8812 	msr	BASEPRI_MAX, r3
   19ed8:	f3bf 8f6f 	isb	sy
   19edc:	4826      	ldr	r0, [pc, #152]	; (19f78 <k_work_schedule_for_queue+0xd0>)
   19ede:	f7ff f81d 	bl	18f1c <z_spin_lock_valid>
   19ee2:	b960      	cbnz	r0, 19efe <k_work_schedule_for_queue+0x56>
   19ee4:	2394      	movs	r3, #148	; 0x94
   19ee6:	4a25      	ldr	r2, [pc, #148]	; (19f7c <k_work_schedule_for_queue+0xd4>)
   19ee8:	4925      	ldr	r1, [pc, #148]	; (19f80 <k_work_schedule_for_queue+0xd8>)
   19eea:	4821      	ldr	r0, [pc, #132]	; (19f70 <k_work_schedule_for_queue+0xc8>)
   19eec:	f002 fdfd 	bl	1caea <assert_print>
   19ef0:	4921      	ldr	r1, [pc, #132]	; (19f78 <k_work_schedule_for_queue+0xd0>)
   19ef2:	4824      	ldr	r0, [pc, #144]	; (19f84 <k_work_schedule_for_queue+0xdc>)
   19ef4:	f002 fdf9 	bl	1caea <assert_print>
   19ef8:	2194      	movs	r1, #148	; 0x94
   19efa:	4820      	ldr	r0, [pc, #128]	; (19f7c <k_work_schedule_for_queue+0xd4>)
   19efc:	e7e4      	b.n	19ec8 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   19efe:	481e      	ldr	r0, [pc, #120]	; (19f78 <k_work_schedule_for_queue+0xd0>)
   19f00:	f7ff f828 	bl	18f54 <z_spin_lock_set_owner>
	return *flagp;
   19f04:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   19f06:	f013 0f0e 	tst.w	r3, #14
   19f0a:	d125      	bne.n	19f58 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19f0c:	ea55 0206 	orrs.w	r2, r5, r6
   19f10:	d114      	bne.n	19f3c <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   19f12:	4620      	mov	r0, r4
   19f14:	a901      	add	r1, sp, #4
   19f16:	f7ff fd01 	bl	1991c <submit_to_queue_locked>
   19f1a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f1c:	4816      	ldr	r0, [pc, #88]	; (19f78 <k_work_schedule_for_queue+0xd0>)
   19f1e:	f7ff f80b 	bl	18f38 <z_spin_unlock_valid>
   19f22:	b9d8      	cbnz	r0, 19f5c <k_work_schedule_for_queue+0xb4>
   19f24:	23c2      	movs	r3, #194	; 0xc2
   19f26:	4a15      	ldr	r2, [pc, #84]	; (19f7c <k_work_schedule_for_queue+0xd4>)
   19f28:	4917      	ldr	r1, [pc, #92]	; (19f88 <k_work_schedule_for_queue+0xe0>)
   19f2a:	4811      	ldr	r0, [pc, #68]	; (19f70 <k_work_schedule_for_queue+0xc8>)
   19f2c:	f002 fddd 	bl	1caea <assert_print>
   19f30:	4911      	ldr	r1, [pc, #68]	; (19f78 <k_work_schedule_for_queue+0xd0>)
   19f32:	4816      	ldr	r0, [pc, #88]	; (19f8c <k_work_schedule_for_queue+0xe4>)
   19f34:	f002 fdd9 	bl	1caea <assert_print>
   19f38:	21c2      	movs	r1, #194	; 0xc2
   19f3a:	e7de      	b.n	19efa <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   19f3c:	f043 0308 	orr.w	r3, r3, #8
   19f40:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   19f42:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19f44:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   19f48:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19f4a:	4632      	mov	r2, r6
   19f4c:	462b      	mov	r3, r5
   19f4e:	4910      	ldr	r1, [pc, #64]	; (19f90 <k_work_schedule_for_queue+0xe8>)
   19f50:	f001 fbc8 	bl	1b6e4 <z_add_timeout>
	return ret;
   19f54:	2401      	movs	r4, #1
   19f56:	e7e1      	b.n	19f1c <k_work_schedule_for_queue+0x74>
	int ret = 0;
   19f58:	2400      	movs	r4, #0
   19f5a:	e7df      	b.n	19f1c <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   19f5c:	f387 8811 	msr	BASEPRI, r7
   19f60:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19f64:	4620      	mov	r0, r4
   19f66:	b003      	add	sp, #12
   19f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f6a:	bf00      	nop
   19f6c:	0002537a 	.word	0x0002537a
   19f70:	00021547 	.word	0x00021547
   19f74:	000252a4 	.word	0x000252a4
   19f78:	20009c34 	.word	0x20009c34
   19f7c:	0002197b 	.word	0x0002197b
   19f80:	000219d4 	.word	0x000219d4
   19f84:	000219e9 	.word	0x000219e9
   19f88:	000219a8 	.word	0x000219a8
   19f8c:	000219bf 	.word	0x000219bf
   19f90:	000199f5 	.word	0x000199f5

00019f94 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   19f94:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   19f96:	4801      	ldr	r0, [pc, #4]	; (19f9c <k_work_schedule+0x8>)
   19f98:	f7ff bf86 	b.w	19ea8 <k_work_schedule_for_queue>
   19f9c:	20009650 	.word	0x20009650

00019fa0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   19fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19fa2:	4616      	mov	r6, r2
   19fa4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   19fa6:	460c      	mov	r4, r1
{
   19fa8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   19faa:	b959      	cbnz	r1, 19fc4 <k_work_reschedule_for_queue+0x24>
   19fac:	492c      	ldr	r1, [pc, #176]	; (1a060 <k_work_reschedule_for_queue+0xc0>)
   19fae:	482d      	ldr	r0, [pc, #180]	; (1a064 <k_work_reschedule_for_queue+0xc4>)
   19fb0:	f240 33db 	movw	r3, #987	; 0x3db
   19fb4:	4a2c      	ldr	r2, [pc, #176]	; (1a068 <k_work_reschedule_for_queue+0xc8>)
   19fb6:	f002 fd98 	bl	1caea <assert_print>
   19fba:	f240 31db 	movw	r1, #987	; 0x3db
   19fbe:	482a      	ldr	r0, [pc, #168]	; (1a068 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fc0:	f002 fd8c 	bl	1cadc <assert_post_action>
	__asm__ volatile(
   19fc4:	f04f 0320 	mov.w	r3, #32
   19fc8:	f3ef 8711 	mrs	r7, BASEPRI
   19fcc:	f383 8812 	msr	BASEPRI_MAX, r3
   19fd0:	f3bf 8f6f 	isb	sy
   19fd4:	4825      	ldr	r0, [pc, #148]	; (1a06c <k_work_reschedule_for_queue+0xcc>)
   19fd6:	f7fe ffa1 	bl	18f1c <z_spin_lock_valid>
   19fda:	b960      	cbnz	r0, 19ff6 <k_work_reschedule_for_queue+0x56>
   19fdc:	2394      	movs	r3, #148	; 0x94
   19fde:	4a24      	ldr	r2, [pc, #144]	; (1a070 <k_work_reschedule_for_queue+0xd0>)
   19fe0:	4924      	ldr	r1, [pc, #144]	; (1a074 <k_work_reschedule_for_queue+0xd4>)
   19fe2:	4820      	ldr	r0, [pc, #128]	; (1a064 <k_work_reschedule_for_queue+0xc4>)
   19fe4:	f002 fd81 	bl	1caea <assert_print>
   19fe8:	4920      	ldr	r1, [pc, #128]	; (1a06c <k_work_reschedule_for_queue+0xcc>)
   19fea:	4823      	ldr	r0, [pc, #140]	; (1a078 <k_work_reschedule_for_queue+0xd8>)
   19fec:	f002 fd7d 	bl	1caea <assert_print>
   19ff0:	2194      	movs	r1, #148	; 0x94
   19ff2:	481f      	ldr	r0, [pc, #124]	; (1a070 <k_work_reschedule_for_queue+0xd0>)
   19ff4:	e7e4      	b.n	19fc0 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   19ff6:	481d      	ldr	r0, [pc, #116]	; (1a06c <k_work_reschedule_for_queue+0xcc>)
   19ff8:	f7fe ffac 	bl	18f54 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   19ffc:	4620      	mov	r0, r4
   19ffe:	f006 f830 	bl	20062 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a002:	ea55 0306 	orrs.w	r3, r5, r6
   1a006:	d114      	bne.n	1a032 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   1a008:	4620      	mov	r0, r4
   1a00a:	a901      	add	r1, sp, #4
   1a00c:	f7ff fc86 	bl	1991c <submit_to_queue_locked>
   1a010:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a012:	4816      	ldr	r0, [pc, #88]	; (1a06c <k_work_reschedule_for_queue+0xcc>)
   1a014:	f7fe ff90 	bl	18f38 <z_spin_unlock_valid>
   1a018:	b9d0      	cbnz	r0, 1a050 <k_work_reschedule_for_queue+0xb0>
   1a01a:	23c2      	movs	r3, #194	; 0xc2
   1a01c:	4a14      	ldr	r2, [pc, #80]	; (1a070 <k_work_reschedule_for_queue+0xd0>)
   1a01e:	4917      	ldr	r1, [pc, #92]	; (1a07c <k_work_reschedule_for_queue+0xdc>)
   1a020:	4810      	ldr	r0, [pc, #64]	; (1a064 <k_work_reschedule_for_queue+0xc4>)
   1a022:	f002 fd62 	bl	1caea <assert_print>
   1a026:	4911      	ldr	r1, [pc, #68]	; (1a06c <k_work_reschedule_for_queue+0xcc>)
   1a028:	4815      	ldr	r0, [pc, #84]	; (1a080 <k_work_reschedule_for_queue+0xe0>)
   1a02a:	f002 fd5e 	bl	1caea <assert_print>
   1a02e:	21c2      	movs	r1, #194	; 0xc2
   1a030:	e7df      	b.n	19ff2 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   1a032:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a034:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   1a038:	f043 0308 	orr.w	r3, r3, #8
   1a03c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a03e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a040:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   1a042:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a044:	490f      	ldr	r1, [pc, #60]	; (1a084 <k_work_reschedule_for_queue+0xe4>)
   1a046:	462b      	mov	r3, r5
   1a048:	f001 fb4c 	bl	1b6e4 <z_add_timeout>
	return ret;
   1a04c:	2401      	movs	r4, #1
   1a04e:	e7e0      	b.n	1a012 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   1a050:	f387 8811 	msr	BASEPRI, r7
   1a054:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a058:	4620      	mov	r0, r4
   1a05a:	b003      	add	sp, #12
   1a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a05e:	bf00      	nop
   1a060:	0002537a 	.word	0x0002537a
   1a064:	00021547 	.word	0x00021547
   1a068:	000252a4 	.word	0x000252a4
   1a06c:	20009c34 	.word	0x20009c34
   1a070:	0002197b 	.word	0x0002197b
   1a074:	000219d4 	.word	0x000219d4
   1a078:	000219e9 	.word	0x000219e9
   1a07c:	000219a8 	.word	0x000219a8
   1a080:	000219bf 	.word	0x000219bf
   1a084:	000199f5 	.word	0x000199f5

0001a088 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1a088:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1a08a:	4801      	ldr	r0, [pc, #4]	; (1a090 <k_work_reschedule+0x8>)
   1a08c:	f7ff bf88 	b.w	19fa0 <k_work_reschedule_for_queue>
   1a090:	20009650 	.word	0x20009650

0001a094 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1a094:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1a096:	4604      	mov	r4, r0
   1a098:	b958      	cbnz	r0, 1a0b2 <k_work_cancel_delayable+0x1e>
   1a09a:	4922      	ldr	r1, [pc, #136]	; (1a124 <k_work_cancel_delayable+0x90>)
   1a09c:	4822      	ldr	r0, [pc, #136]	; (1a128 <k_work_cancel_delayable+0x94>)
   1a09e:	f240 33fd 	movw	r3, #1021	; 0x3fd
   1a0a2:	4a22      	ldr	r2, [pc, #136]	; (1a12c <k_work_cancel_delayable+0x98>)
   1a0a4:	f002 fd21 	bl	1caea <assert_print>
   1a0a8:	f240 31fd 	movw	r1, #1021	; 0x3fd
   1a0ac:	481f      	ldr	r0, [pc, #124]	; (1a12c <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0ae:	f002 fd15 	bl	1cadc <assert_post_action>
	__asm__ volatile(
   1a0b2:	f04f 0320 	mov.w	r3, #32
   1a0b6:	f3ef 8511 	mrs	r5, BASEPRI
   1a0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1a0be:	f3bf 8f6f 	isb	sy
   1a0c2:	481b      	ldr	r0, [pc, #108]	; (1a130 <k_work_cancel_delayable+0x9c>)
   1a0c4:	f7fe ff2a 	bl	18f1c <z_spin_lock_valid>
   1a0c8:	b960      	cbnz	r0, 1a0e4 <k_work_cancel_delayable+0x50>
   1a0ca:	2394      	movs	r3, #148	; 0x94
   1a0cc:	4a19      	ldr	r2, [pc, #100]	; (1a134 <k_work_cancel_delayable+0xa0>)
   1a0ce:	491a      	ldr	r1, [pc, #104]	; (1a138 <k_work_cancel_delayable+0xa4>)
   1a0d0:	4815      	ldr	r0, [pc, #84]	; (1a128 <k_work_cancel_delayable+0x94>)
   1a0d2:	f002 fd0a 	bl	1caea <assert_print>
   1a0d6:	4916      	ldr	r1, [pc, #88]	; (1a130 <k_work_cancel_delayable+0x9c>)
   1a0d8:	4818      	ldr	r0, [pc, #96]	; (1a13c <k_work_cancel_delayable+0xa8>)
   1a0da:	f002 fd06 	bl	1caea <assert_print>
   1a0de:	2194      	movs	r1, #148	; 0x94
   1a0e0:	4814      	ldr	r0, [pc, #80]	; (1a134 <k_work_cancel_delayable+0xa0>)
   1a0e2:	e7e4      	b.n	1a0ae <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   1a0e4:	4812      	ldr	r0, [pc, #72]	; (1a130 <k_work_cancel_delayable+0x9c>)
   1a0e6:	f7fe ff35 	bl	18f54 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   1a0ea:	4620      	mov	r0, r4
   1a0ec:	f005 ffb9 	bl	20062 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a0f0:	4620      	mov	r0, r4
   1a0f2:	f005 ffcb 	bl	2008c <cancel_async_locked>
   1a0f6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0f8:	480d      	ldr	r0, [pc, #52]	; (1a130 <k_work_cancel_delayable+0x9c>)
   1a0fa:	f7fe ff1d 	bl	18f38 <z_spin_unlock_valid>
   1a0fe:	b958      	cbnz	r0, 1a118 <k_work_cancel_delayable+0x84>
   1a100:	23c2      	movs	r3, #194	; 0xc2
   1a102:	4a0c      	ldr	r2, [pc, #48]	; (1a134 <k_work_cancel_delayable+0xa0>)
   1a104:	490e      	ldr	r1, [pc, #56]	; (1a140 <k_work_cancel_delayable+0xac>)
   1a106:	4808      	ldr	r0, [pc, #32]	; (1a128 <k_work_cancel_delayable+0x94>)
   1a108:	f002 fcef 	bl	1caea <assert_print>
   1a10c:	4908      	ldr	r1, [pc, #32]	; (1a130 <k_work_cancel_delayable+0x9c>)
   1a10e:	480d      	ldr	r0, [pc, #52]	; (1a144 <k_work_cancel_delayable+0xb0>)
   1a110:	f002 fceb 	bl	1caea <assert_print>
   1a114:	21c2      	movs	r1, #194	; 0xc2
   1a116:	e7e3      	b.n	1a0e0 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   1a118:	f385 8811 	msr	BASEPRI, r5
   1a11c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1a120:	4620      	mov	r0, r4
   1a122:	bd38      	pop	{r3, r4, r5, pc}
   1a124:	0002537a 	.word	0x0002537a
   1a128:	00021547 	.word	0x00021547
   1a12c:	000252a4 	.word	0x000252a4
   1a130:	20009c34 	.word	0x20009c34
   1a134:	0002197b 	.word	0x0002197b
   1a138:	000219d4 	.word	0x000219d4
   1a13c:	000219e9 	.word	0x000219e9
   1a140:	000219a8 	.word	0x000219a8
   1a144:	000219bf 	.word	0x000219bf

0001a148 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a14c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1a14e:	4605      	mov	r5, r0
   1a150:	b958      	cbnz	r0, 1a16a <k_work_cancel_delayable_sync+0x22>
   1a152:	493a      	ldr	r1, [pc, #232]	; (1a23c <k_work_cancel_delayable_sync+0xf4>)
   1a154:	f240 430e 	movw	r3, #1038	; 0x40e
   1a158:	4a39      	ldr	r2, [pc, #228]	; (1a240 <k_work_cancel_delayable_sync+0xf8>)
   1a15a:	483a      	ldr	r0, [pc, #232]	; (1a244 <k_work_cancel_delayable_sync+0xfc>)
   1a15c:	f002 fcc5 	bl	1caea <assert_print>
   1a160:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   1a164:	4836      	ldr	r0, [pc, #216]	; (1a240 <k_work_cancel_delayable_sync+0xf8>)
   1a166:	f002 fcb9 	bl	1cadc <assert_post_action>
   1a16a:	b949      	cbnz	r1, 1a180 <k_work_cancel_delayable_sync+0x38>
   1a16c:	4936      	ldr	r1, [pc, #216]	; (1a248 <k_work_cancel_delayable_sync+0x100>)
   1a16e:	f240 430f 	movw	r3, #1039	; 0x40f
   1a172:	4a33      	ldr	r2, [pc, #204]	; (1a240 <k_work_cancel_delayable_sync+0xf8>)
   1a174:	4833      	ldr	r0, [pc, #204]	; (1a244 <k_work_cancel_delayable_sync+0xfc>)
   1a176:	f002 fcb8 	bl	1caea <assert_print>
   1a17a:	f240 410f 	movw	r1, #1039	; 0x40f
   1a17e:	e7f1      	b.n	1a164 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1a180:	f005 ff03 	bl	1ff8a <k_is_in_isr>
   1a184:	4604      	mov	r4, r0
   1a186:	b148      	cbz	r0, 1a19c <k_work_cancel_delayable_sync+0x54>
   1a188:	4930      	ldr	r1, [pc, #192]	; (1a24c <k_work_cancel_delayable_sync+0x104>)
   1a18a:	f44f 6382 	mov.w	r3, #1040	; 0x410
   1a18e:	4a2c      	ldr	r2, [pc, #176]	; (1a240 <k_work_cancel_delayable_sync+0xf8>)
   1a190:	482c      	ldr	r0, [pc, #176]	; (1a244 <k_work_cancel_delayable_sync+0xfc>)
   1a192:	f002 fcaa 	bl	1caea <assert_print>
   1a196:	f44f 6182 	mov.w	r1, #1040	; 0x410
   1a19a:	e7e3      	b.n	1a164 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   1a19c:	f04f 0320 	mov.w	r3, #32
   1a1a0:	f3ef 8811 	mrs	r8, BASEPRI
   1a1a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1a1a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1ac:	4828      	ldr	r0, [pc, #160]	; (1a250 <k_work_cancel_delayable_sync+0x108>)
   1a1ae:	f7fe feb5 	bl	18f1c <z_spin_lock_valid>
   1a1b2:	b960      	cbnz	r0, 1a1ce <k_work_cancel_delayable_sync+0x86>
   1a1b4:	2394      	movs	r3, #148	; 0x94
   1a1b6:	4a27      	ldr	r2, [pc, #156]	; (1a254 <k_work_cancel_delayable_sync+0x10c>)
   1a1b8:	4927      	ldr	r1, [pc, #156]	; (1a258 <k_work_cancel_delayable_sync+0x110>)
   1a1ba:	4822      	ldr	r0, [pc, #136]	; (1a244 <k_work_cancel_delayable_sync+0xfc>)
   1a1bc:	f002 fc95 	bl	1caea <assert_print>
   1a1c0:	4923      	ldr	r1, [pc, #140]	; (1a250 <k_work_cancel_delayable_sync+0x108>)
   1a1c2:	4826      	ldr	r0, [pc, #152]	; (1a25c <k_work_cancel_delayable_sync+0x114>)
   1a1c4:	f002 fc91 	bl	1caea <assert_print>
   1a1c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1ca:	4822      	ldr	r0, [pc, #136]	; (1a254 <k_work_cancel_delayable_sync+0x10c>)
   1a1cc:	e7cb      	b.n	1a166 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   1a1ce:	4820      	ldr	r0, [pc, #128]	; (1a250 <k_work_cancel_delayable_sync+0x108>)
   1a1d0:	f7fe fec0 	bl	18f54 <z_spin_lock_set_owner>
	return *flagp;
   1a1d4:	68eb      	ldr	r3, [r5, #12]
   1a1d6:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1a1da:	2b00      	cmp	r3, #0
   1a1dc:	bf14      	ite	ne
   1a1de:	2701      	movne	r7, #1
   1a1e0:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1a1e2:	d00a      	beq.n	1a1fa <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   1a1e4:	4628      	mov	r0, r5
   1a1e6:	f005 ff3c 	bl	20062 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a1ea:	4628      	mov	r0, r5
   1a1ec:	f005 ff4e 	bl	2008c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1a1f0:	4631      	mov	r1, r6
   1a1f2:	4628      	mov	r0, r5
   1a1f4:	f7ff fb74 	bl	198e0 <cancel_sync_locked>
   1a1f8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1fa:	4815      	ldr	r0, [pc, #84]	; (1a250 <k_work_cancel_delayable_sync+0x108>)
   1a1fc:	f7fe fe9c 	bl	18f38 <z_spin_unlock_valid>
   1a200:	b958      	cbnz	r0, 1a21a <k_work_cancel_delayable_sync+0xd2>
   1a202:	23c2      	movs	r3, #194	; 0xc2
   1a204:	4a13      	ldr	r2, [pc, #76]	; (1a254 <k_work_cancel_delayable_sync+0x10c>)
   1a206:	4916      	ldr	r1, [pc, #88]	; (1a260 <k_work_cancel_delayable_sync+0x118>)
   1a208:	480e      	ldr	r0, [pc, #56]	; (1a244 <k_work_cancel_delayable_sync+0xfc>)
   1a20a:	f002 fc6e 	bl	1caea <assert_print>
   1a20e:	4910      	ldr	r1, [pc, #64]	; (1a250 <k_work_cancel_delayable_sync+0x108>)
   1a210:	4814      	ldr	r0, [pc, #80]	; (1a264 <k_work_cancel_delayable_sync+0x11c>)
   1a212:	f002 fc6a 	bl	1caea <assert_print>
   1a216:	21c2      	movs	r1, #194	; 0xc2
   1a218:	e7d7      	b.n	1a1ca <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   1a21a:	f388 8811 	msr	BASEPRI, r8
   1a21e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1a222:	b13c      	cbz	r4, 1a234 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   1a224:	f04f 32ff 	mov.w	r2, #4294967295
   1a228:	f04f 33ff 	mov.w	r3, #4294967295
   1a22c:	f106 0008 	add.w	r0, r6, #8
   1a230:	f7ff f9ce 	bl	195d0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1a234:	4638      	mov	r0, r7
   1a236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a23a:	bf00      	nop
   1a23c:	0002537a 	.word	0x0002537a
   1a240:	000252a4 	.word	0x000252a4
   1a244:	00021547 	.word	0x00021547
   1a248:	00025326 	.word	0x00025326
   1a24c:	000233ef 	.word	0x000233ef
   1a250:	20009c34 	.word	0x20009c34
   1a254:	0002197b 	.word	0x0002197b
   1a258:	000219d4 	.word	0x000219d4
   1a25c:	000219e9 	.word	0x000219e9
   1a260:	000219a8 	.word	0x000219a8
   1a264:	000219bf 	.word	0x000219bf

0001a268 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1a268:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1a26a:	4d07      	ldr	r5, [pc, #28]	; (1a288 <z_reset_time_slice+0x20>)
   1a26c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1a26e:	b154      	cbz	r4, 1a286 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1a270:	f7fb fd3a 	bl	15ce8 <sys_clock_elapsed>
   1a274:	4b05      	ldr	r3, [pc, #20]	; (1a28c <z_reset_time_slice+0x24>)
   1a276:	4404      	add	r4, r0
   1a278:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1a27a:	6828      	ldr	r0, [r5, #0]
   1a27c:	2100      	movs	r1, #0
	}
}
   1a27e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1a282:	f001 bb87 	b.w	1b994 <z_set_timeout_expiry>
}
   1a286:	bd38      	pop	{r3, r4, r5, pc}
   1a288:	20009c40 	.word	0x20009c40
   1a28c:	20009bfc 	.word	0x20009bfc

0001a290 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1a290:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1a292:	4d14      	ldr	r5, [pc, #80]	; (1a2e4 <update_cache+0x54>)
   1a294:	462b      	mov	r3, r5
   1a296:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a29a:	429c      	cmp	r4, r3
   1a29c:	d000      	beq.n	1a2a0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1a29e:	b904      	cbnz	r4, 1a2a2 <update_cache+0x12>
   1a2a0:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   1a2a2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1a2a4:	b9a8      	cbnz	r0, 1a2d2 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   1a2a6:	b963      	cbnz	r3, 1a2c2 <update_cache+0x32>
   1a2a8:	490f      	ldr	r1, [pc, #60]	; (1a2e8 <update_cache+0x58>)
   1a2aa:	2389      	movs	r3, #137	; 0x89
   1a2ac:	4a0f      	ldr	r2, [pc, #60]	; (1a2ec <update_cache+0x5c>)
   1a2ae:	4810      	ldr	r0, [pc, #64]	; (1a2f0 <update_cache+0x60>)
   1a2b0:	f002 fc1b 	bl	1caea <assert_print>
   1a2b4:	480f      	ldr	r0, [pc, #60]	; (1a2f4 <update_cache+0x64>)
   1a2b6:	f002 fc18 	bl	1caea <assert_print>
   1a2ba:	2189      	movs	r1, #137	; 0x89
   1a2bc:	480b      	ldr	r0, [pc, #44]	; (1a2ec <update_cache+0x5c>)
   1a2be:	f002 fc0d 	bl	1cadc <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1a2c2:	7b5a      	ldrb	r2, [r3, #13]
   1a2c4:	06d2      	lsls	r2, r2, #27
   1a2c6:	d104      	bne.n	1a2d2 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a2c8:	69a2      	ldr	r2, [r4, #24]
   1a2ca:	b912      	cbnz	r2, 1a2d2 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a2cc:	89da      	ldrh	r2, [r3, #14]
   1a2ce:	2a7f      	cmp	r2, #127	; 0x7f
   1a2d0:	d805      	bhi.n	1a2de <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1a2d2:	429c      	cmp	r4, r3
   1a2d4:	d002      	beq.n	1a2dc <update_cache+0x4c>
			z_reset_time_slice(thread);
   1a2d6:	4620      	mov	r0, r4
   1a2d8:	f7ff ffc6 	bl	1a268 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1a2dc:	4623      	mov	r3, r4
   1a2de:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1a2e0:	bd38      	pop	{r3, r4, r5, pc}
   1a2e2:	bf00      	nop
   1a2e4:	20009bfc 	.word	0x20009bfc
   1a2e8:	000253b1 	.word	0x000253b1
   1a2ec:	0002538f 	.word	0x0002538f
   1a2f0:	00021547 	.word	0x00021547
   1a2f4:	00023bf8 	.word	0x00023bf8

0001a2f8 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   1a2f8:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1a2fa:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1a2fe:	7b42      	ldrb	r2, [r0, #13]
   1a300:	2b00      	cmp	r3, #0
   1a302:	db38      	blt.n	1a376 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a304:	06d3      	lsls	r3, r2, #27
   1a306:	d136      	bne.n	1a376 <ready_thread+0x7e>
	return node->next != NULL;
   1a308:	6983      	ldr	r3, [r0, #24]
   1a30a:	2b00      	cmp	r3, #0
   1a30c:	d133      	bne.n	1a376 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   1a30e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1a312:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a314:	4a18      	ldr	r2, [pc, #96]	; (1a378 <ready_thread+0x80>)
   1a316:	4290      	cmp	r0, r2
   1a318:	d109      	bne.n	1a32e <ready_thread+0x36>
   1a31a:	4918      	ldr	r1, [pc, #96]	; (1a37c <ready_thread+0x84>)
   1a31c:	4818      	ldr	r0, [pc, #96]	; (1a380 <ready_thread+0x88>)
   1a31e:	23ba      	movs	r3, #186	; 0xba
   1a320:	4a18      	ldr	r2, [pc, #96]	; (1a384 <ready_thread+0x8c>)
   1a322:	f002 fbe2 	bl	1caea <assert_print>
   1a326:	21ba      	movs	r1, #186	; 0xba
   1a328:	4816      	ldr	r0, [pc, #88]	; (1a384 <ready_thread+0x8c>)
   1a32a:	f002 fbd7 	bl	1cadc <assert_post_action>
	return list->head == list;
   1a32e:	4916      	ldr	r1, [pc, #88]	; (1a388 <ready_thread+0x90>)
   1a330:	460a      	mov	r2, r1
   1a332:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a336:	4294      	cmp	r4, r2
   1a338:	bf18      	it	ne
   1a33a:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1a33c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a33e:	b923      	cbnz	r3, 1a34a <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1a340:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   1a344:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1a346:	6248      	str	r0, [r1, #36]	; 0x24
}
   1a348:	e00c      	b.n	1a364 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   1a34a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1a34e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1a352:	42b5      	cmp	r5, r6
   1a354:	d00b      	beq.n	1a36e <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a356:	42ae      	cmp	r6, r5
   1a358:	dd09      	ble.n	1a36e <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1a35a:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1a35c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1a360:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1a362:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   1a364:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   1a366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1a36a:	f7ff bf91 	b.w	1a290 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1a36e:	42a3      	cmp	r3, r4
   1a370:	d0e6      	beq.n	1a340 <ready_thread+0x48>
   1a372:	681b      	ldr	r3, [r3, #0]
   1a374:	e7e3      	b.n	1a33e <ready_thread+0x46>
}
   1a376:	bd70      	pop	{r4, r5, r6, pc}
   1a378:	20009540 	.word	0x20009540
   1a37c:	000253d8 	.word	0x000253d8
   1a380:	00021547 	.word	0x00021547
   1a384:	0002538f 	.word	0x0002538f
   1a388:	20009bfc 	.word	0x20009bfc

0001a38c <k_sched_time_slice_set>:
{
   1a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a38e:	4604      	mov	r4, r0
   1a390:	460d      	mov	r5, r1
	__asm__ volatile(
   1a392:	f04f 0320 	mov.w	r3, #32
   1a396:	f3ef 8711 	mrs	r7, BASEPRI
   1a39a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a39e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a3a2:	4822      	ldr	r0, [pc, #136]	; (1a42c <k_sched_time_slice_set+0xa0>)
   1a3a4:	f7fe fdba 	bl	18f1c <z_spin_lock_valid>
   1a3a8:	b968      	cbnz	r0, 1a3c6 <k_sched_time_slice_set+0x3a>
   1a3aa:	2394      	movs	r3, #148	; 0x94
   1a3ac:	4a20      	ldr	r2, [pc, #128]	; (1a430 <k_sched_time_slice_set+0xa4>)
   1a3ae:	4921      	ldr	r1, [pc, #132]	; (1a434 <k_sched_time_slice_set+0xa8>)
   1a3b0:	4821      	ldr	r0, [pc, #132]	; (1a438 <k_sched_time_slice_set+0xac>)
   1a3b2:	f002 fb9a 	bl	1caea <assert_print>
   1a3b6:	491d      	ldr	r1, [pc, #116]	; (1a42c <k_sched_time_slice_set+0xa0>)
   1a3b8:	4820      	ldr	r0, [pc, #128]	; (1a43c <k_sched_time_slice_set+0xb0>)
   1a3ba:	f002 fb96 	bl	1caea <assert_print>
   1a3be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a3c0:	481b      	ldr	r0, [pc, #108]	; (1a430 <k_sched_time_slice_set+0xa4>)
   1a3c2:	f002 fb8b 	bl	1cadc <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a3c6:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   1a3c8:	4818      	ldr	r0, [pc, #96]	; (1a42c <k_sched_time_slice_set+0xa0>)
   1a3ca:	f7fe fdc3 	bl	18f54 <z_spin_lock_set_owner>
   1a3ce:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1a3d2:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a3d6:	4631      	mov	r1, r6
   1a3d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a3dc:	2300      	movs	r3, #0
   1a3de:	fbe4 010c 	umlal	r0, r1, r4, ip
   1a3e2:	f7ee faa7 	bl	8934 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1a3e6:	42b4      	cmp	r4, r6
   1a3e8:	dd02      	ble.n	1a3f0 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   1a3ea:	2802      	cmp	r0, #2
   1a3ec:	bfb8      	it	lt
   1a3ee:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1a3f0:	4a13      	ldr	r2, [pc, #76]	; (1a440 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   1a3f2:	4b14      	ldr	r3, [pc, #80]	; (1a444 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1a3f4:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1a3f6:	4a14      	ldr	r2, [pc, #80]	; (1a448 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   1a3f8:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1a3fa:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1a3fc:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1a3fe:	f7ff ff33 	bl	1a268 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a402:	480a      	ldr	r0, [pc, #40]	; (1a42c <k_sched_time_slice_set+0xa0>)
   1a404:	f7fe fd98 	bl	18f38 <z_spin_unlock_valid>
   1a408:	b958      	cbnz	r0, 1a422 <k_sched_time_slice_set+0x96>
   1a40a:	23c2      	movs	r3, #194	; 0xc2
   1a40c:	4a08      	ldr	r2, [pc, #32]	; (1a430 <k_sched_time_slice_set+0xa4>)
   1a40e:	490f      	ldr	r1, [pc, #60]	; (1a44c <k_sched_time_slice_set+0xc0>)
   1a410:	4809      	ldr	r0, [pc, #36]	; (1a438 <k_sched_time_slice_set+0xac>)
   1a412:	f002 fb6a 	bl	1caea <assert_print>
   1a416:	4905      	ldr	r1, [pc, #20]	; (1a42c <k_sched_time_slice_set+0xa0>)
   1a418:	480d      	ldr	r0, [pc, #52]	; (1a450 <k_sched_time_slice_set+0xc4>)
   1a41a:	f002 fb66 	bl	1caea <assert_print>
   1a41e:	21c2      	movs	r1, #194	; 0xc2
   1a420:	e7ce      	b.n	1a3c0 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   1a422:	f387 8811 	msr	BASEPRI, r7
   1a426:	f3bf 8f6f 	isb	sy
}
   1a42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a42c:	20009c44 	.word	0x20009c44
   1a430:	0002197b 	.word	0x0002197b
   1a434:	000219d4 	.word	0x000219d4
   1a438:	00021547 	.word	0x00021547
   1a43c:	000219e9 	.word	0x000219e9
   1a440:	20009c40 	.word	0x20009c40
   1a444:	20009bfc 	.word	0x20009bfc
   1a448:	20009c3c 	.word	0x20009c3c
   1a44c:	000219a8 	.word	0x000219a8
   1a450:	000219bf 	.word	0x000219bf

0001a454 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   1a454:	b538      	push	{r3, r4, r5, lr}
   1a456:	4604      	mov	r4, r0
	__asm__ volatile(
   1a458:	f04f 0320 	mov.w	r3, #32
   1a45c:	f3ef 8511 	mrs	r5, BASEPRI
   1a460:	f383 8812 	msr	BASEPRI_MAX, r3
   1a464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a468:	4816      	ldr	r0, [pc, #88]	; (1a4c4 <z_ready_thread+0x70>)
   1a46a:	f7fe fd57 	bl	18f1c <z_spin_lock_valid>
   1a46e:	b968      	cbnz	r0, 1a48c <z_ready_thread+0x38>
   1a470:	2394      	movs	r3, #148	; 0x94
   1a472:	4a15      	ldr	r2, [pc, #84]	; (1a4c8 <z_ready_thread+0x74>)
   1a474:	4915      	ldr	r1, [pc, #84]	; (1a4cc <z_ready_thread+0x78>)
   1a476:	4816      	ldr	r0, [pc, #88]	; (1a4d0 <z_ready_thread+0x7c>)
   1a478:	f002 fb37 	bl	1caea <assert_print>
   1a47c:	4911      	ldr	r1, [pc, #68]	; (1a4c4 <z_ready_thread+0x70>)
   1a47e:	4815      	ldr	r0, [pc, #84]	; (1a4d4 <z_ready_thread+0x80>)
   1a480:	f002 fb33 	bl	1caea <assert_print>
   1a484:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a486:	4810      	ldr	r0, [pc, #64]	; (1a4c8 <z_ready_thread+0x74>)
   1a488:	f002 fb28 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a48c:	480d      	ldr	r0, [pc, #52]	; (1a4c4 <z_ready_thread+0x70>)
   1a48e:	f7fe fd61 	bl	18f54 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   1a492:	4620      	mov	r0, r4
   1a494:	f7ff ff30 	bl	1a2f8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a498:	480a      	ldr	r0, [pc, #40]	; (1a4c4 <z_ready_thread+0x70>)
   1a49a:	f7fe fd4d 	bl	18f38 <z_spin_unlock_valid>
   1a49e:	b958      	cbnz	r0, 1a4b8 <z_ready_thread+0x64>
   1a4a0:	23c2      	movs	r3, #194	; 0xc2
   1a4a2:	4a09      	ldr	r2, [pc, #36]	; (1a4c8 <z_ready_thread+0x74>)
   1a4a4:	490c      	ldr	r1, [pc, #48]	; (1a4d8 <z_ready_thread+0x84>)
   1a4a6:	480a      	ldr	r0, [pc, #40]	; (1a4d0 <z_ready_thread+0x7c>)
   1a4a8:	f002 fb1f 	bl	1caea <assert_print>
   1a4ac:	4905      	ldr	r1, [pc, #20]	; (1a4c4 <z_ready_thread+0x70>)
   1a4ae:	480b      	ldr	r0, [pc, #44]	; (1a4dc <z_ready_thread+0x88>)
   1a4b0:	f002 fb1b 	bl	1caea <assert_print>
   1a4b4:	21c2      	movs	r1, #194	; 0xc2
   1a4b6:	e7e6      	b.n	1a486 <z_ready_thread+0x32>
	__asm__ volatile(
   1a4b8:	f385 8811 	msr	BASEPRI, r5
   1a4bc:	f3bf 8f6f 	isb	sy
		}
	}
}
   1a4c0:	bd38      	pop	{r3, r4, r5, pc}
   1a4c2:	bf00      	nop
   1a4c4:	20009c44 	.word	0x20009c44
   1a4c8:	0002197b 	.word	0x0002197b
   1a4cc:	000219d4 	.word	0x000219d4
   1a4d0:	00021547 	.word	0x00021547
   1a4d4:	000219e9 	.word	0x000219e9
   1a4d8:	000219a8 	.word	0x000219a8
   1a4dc:	000219bf 	.word	0x000219bf

0001a4e0 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   1a4e0:	b538      	push	{r3, r4, r5, lr}
   1a4e2:	4604      	mov	r4, r0
	__asm__ volatile(
   1a4e4:	f04f 0320 	mov.w	r3, #32
   1a4e8:	f3ef 8511 	mrs	r5, BASEPRI
   1a4ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4f4:	4816      	ldr	r0, [pc, #88]	; (1a550 <z_unpend_thread_no_timeout+0x70>)
   1a4f6:	f7fe fd11 	bl	18f1c <z_spin_lock_valid>
   1a4fa:	b968      	cbnz	r0, 1a518 <z_unpend_thread_no_timeout+0x38>
   1a4fc:	2394      	movs	r3, #148	; 0x94
   1a4fe:	4a15      	ldr	r2, [pc, #84]	; (1a554 <z_unpend_thread_no_timeout+0x74>)
   1a500:	4915      	ldr	r1, [pc, #84]	; (1a558 <z_unpend_thread_no_timeout+0x78>)
   1a502:	4816      	ldr	r0, [pc, #88]	; (1a55c <z_unpend_thread_no_timeout+0x7c>)
   1a504:	f002 faf1 	bl	1caea <assert_print>
   1a508:	4911      	ldr	r1, [pc, #68]	; (1a550 <z_unpend_thread_no_timeout+0x70>)
   1a50a:	4815      	ldr	r0, [pc, #84]	; (1a560 <z_unpend_thread_no_timeout+0x80>)
   1a50c:	f002 faed 	bl	1caea <assert_print>
   1a510:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a512:	4810      	ldr	r0, [pc, #64]	; (1a554 <z_unpend_thread_no_timeout+0x74>)
   1a514:	f002 fae2 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a518:	480d      	ldr	r0, [pc, #52]	; (1a550 <z_unpend_thread_no_timeout+0x70>)
   1a51a:	f7fe fd1b 	bl	18f54 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   1a51e:	4620      	mov	r0, r4
   1a520:	f000 fc62 	bl	1ade8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a524:	480a      	ldr	r0, [pc, #40]	; (1a550 <z_unpend_thread_no_timeout+0x70>)
   1a526:	f7fe fd07 	bl	18f38 <z_spin_unlock_valid>
   1a52a:	b958      	cbnz	r0, 1a544 <z_unpend_thread_no_timeout+0x64>
   1a52c:	23c2      	movs	r3, #194	; 0xc2
   1a52e:	4a09      	ldr	r2, [pc, #36]	; (1a554 <z_unpend_thread_no_timeout+0x74>)
   1a530:	490c      	ldr	r1, [pc, #48]	; (1a564 <z_unpend_thread_no_timeout+0x84>)
   1a532:	480a      	ldr	r0, [pc, #40]	; (1a55c <z_unpend_thread_no_timeout+0x7c>)
   1a534:	f002 fad9 	bl	1caea <assert_print>
   1a538:	4905      	ldr	r1, [pc, #20]	; (1a550 <z_unpend_thread_no_timeout+0x70>)
   1a53a:	480b      	ldr	r0, [pc, #44]	; (1a568 <z_unpend_thread_no_timeout+0x88>)
   1a53c:	f002 fad5 	bl	1caea <assert_print>
   1a540:	21c2      	movs	r1, #194	; 0xc2
   1a542:	e7e6      	b.n	1a512 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   1a544:	f385 8811 	msr	BASEPRI, r5
   1a548:	f3bf 8f6f 	isb	sy
	}
}
   1a54c:	bd38      	pop	{r3, r4, r5, pc}
   1a54e:	bf00      	nop
   1a550:	20009c44 	.word	0x20009c44
   1a554:	0002197b 	.word	0x0002197b
   1a558:	000219d4 	.word	0x000219d4
   1a55c:	00021547 	.word	0x00021547
   1a560:	000219e9 	.word	0x000219e9
   1a564:	000219a8 	.word	0x000219a8
   1a568:	000219bf 	.word	0x000219bf

0001a56c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1a56c:	b570      	push	{r4, r5, r6, lr}
   1a56e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a570:	460d      	mov	r5, r1
   1a572:	b9e9      	cbnz	r1, 1a5b0 <z_reschedule+0x44>
   1a574:	f3ef 8605 	mrs	r6, IPSR
   1a578:	b9d6      	cbnz	r6, 1a5b0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   1a57a:	4b18      	ldr	r3, [pc, #96]	; (1a5dc <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   1a57c:	69da      	ldr	r2, [r3, #28]
   1a57e:	689b      	ldr	r3, [r3, #8]
   1a580:	429a      	cmp	r2, r3
   1a582:	d015      	beq.n	1a5b0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a584:	f7fe fcd8 	bl	18f38 <z_spin_unlock_valid>
   1a588:	b968      	cbnz	r0, 1a5a6 <z_reschedule+0x3a>
   1a58a:	23e1      	movs	r3, #225	; 0xe1
   1a58c:	4a14      	ldr	r2, [pc, #80]	; (1a5e0 <z_reschedule+0x74>)
   1a58e:	4915      	ldr	r1, [pc, #84]	; (1a5e4 <z_reschedule+0x78>)
   1a590:	4815      	ldr	r0, [pc, #84]	; (1a5e8 <z_reschedule+0x7c>)
   1a592:	f002 faaa 	bl	1caea <assert_print>
   1a596:	4621      	mov	r1, r4
   1a598:	4814      	ldr	r0, [pc, #80]	; (1a5ec <z_reschedule+0x80>)
   1a59a:	f002 faa6 	bl	1caea <assert_print>
   1a59e:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5a0:	480f      	ldr	r0, [pc, #60]	; (1a5e0 <z_reschedule+0x74>)
   1a5a2:	f002 fa9b 	bl	1cadc <assert_post_action>
	ret = arch_swap(key);
   1a5a6:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   1a5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a5ac:	f7f2 bc7a 	b.w	cea4 <arch_swap>
   1a5b0:	4620      	mov	r0, r4
   1a5b2:	f7fe fcc1 	bl	18f38 <z_spin_unlock_valid>
   1a5b6:	b958      	cbnz	r0, 1a5d0 <z_reschedule+0x64>
   1a5b8:	23c2      	movs	r3, #194	; 0xc2
   1a5ba:	4a09      	ldr	r2, [pc, #36]	; (1a5e0 <z_reschedule+0x74>)
   1a5bc:	4909      	ldr	r1, [pc, #36]	; (1a5e4 <z_reschedule+0x78>)
   1a5be:	480a      	ldr	r0, [pc, #40]	; (1a5e8 <z_reschedule+0x7c>)
   1a5c0:	f002 fa93 	bl	1caea <assert_print>
   1a5c4:	4621      	mov	r1, r4
   1a5c6:	4809      	ldr	r0, [pc, #36]	; (1a5ec <z_reschedule+0x80>)
   1a5c8:	f002 fa8f 	bl	1caea <assert_print>
   1a5cc:	21c2      	movs	r1, #194	; 0xc2
   1a5ce:	e7e7      	b.n	1a5a0 <z_reschedule+0x34>
   1a5d0:	f385 8811 	msr	BASEPRI, r5
   1a5d4:	f3bf 8f6f 	isb	sy
   1a5d8:	bd70      	pop	{r4, r5, r6, pc}
   1a5da:	bf00      	nop
   1a5dc:	20009bfc 	.word	0x20009bfc
   1a5e0:	0002197b 	.word	0x0002197b
   1a5e4:	000219a8 	.word	0x000219a8
   1a5e8:	00021547 	.word	0x00021547
   1a5ec:	000219bf 	.word	0x000219bf

0001a5f0 <z_sched_start>:
{
   1a5f0:	b538      	push	{r3, r4, r5, lr}
   1a5f2:	4604      	mov	r4, r0
	__asm__ volatile(
   1a5f4:	f04f 0320 	mov.w	r3, #32
   1a5f8:	f3ef 8511 	mrs	r5, BASEPRI
   1a5fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a600:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a604:	481c      	ldr	r0, [pc, #112]	; (1a678 <z_sched_start+0x88>)
   1a606:	f7fe fc89 	bl	18f1c <z_spin_lock_valid>
   1a60a:	b968      	cbnz	r0, 1a628 <z_sched_start+0x38>
   1a60c:	2394      	movs	r3, #148	; 0x94
   1a60e:	4a1b      	ldr	r2, [pc, #108]	; (1a67c <z_sched_start+0x8c>)
   1a610:	491b      	ldr	r1, [pc, #108]	; (1a680 <z_sched_start+0x90>)
   1a612:	481c      	ldr	r0, [pc, #112]	; (1a684 <z_sched_start+0x94>)
   1a614:	f002 fa69 	bl	1caea <assert_print>
   1a618:	4917      	ldr	r1, [pc, #92]	; (1a678 <z_sched_start+0x88>)
   1a61a:	481b      	ldr	r0, [pc, #108]	; (1a688 <z_sched_start+0x98>)
   1a61c:	f002 fa65 	bl	1caea <assert_print>
   1a620:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a622:	4816      	ldr	r0, [pc, #88]	; (1a67c <z_sched_start+0x8c>)
   1a624:	f002 fa5a 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a628:	4813      	ldr	r0, [pc, #76]	; (1a678 <z_sched_start+0x88>)
   1a62a:	f7fe fc93 	bl	18f54 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1a62e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1a630:	075a      	lsls	r2, r3, #29
   1a632:	d414      	bmi.n	1a65e <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a634:	4810      	ldr	r0, [pc, #64]	; (1a678 <z_sched_start+0x88>)
   1a636:	f7fe fc7f 	bl	18f38 <z_spin_unlock_valid>
   1a63a:	b958      	cbnz	r0, 1a654 <z_sched_start+0x64>
   1a63c:	23c2      	movs	r3, #194	; 0xc2
   1a63e:	4a0f      	ldr	r2, [pc, #60]	; (1a67c <z_sched_start+0x8c>)
   1a640:	4912      	ldr	r1, [pc, #72]	; (1a68c <z_sched_start+0x9c>)
   1a642:	4810      	ldr	r0, [pc, #64]	; (1a684 <z_sched_start+0x94>)
   1a644:	f002 fa51 	bl	1caea <assert_print>
   1a648:	490b      	ldr	r1, [pc, #44]	; (1a678 <z_sched_start+0x88>)
   1a64a:	4811      	ldr	r0, [pc, #68]	; (1a690 <z_sched_start+0xa0>)
   1a64c:	f002 fa4d 	bl	1caea <assert_print>
   1a650:	21c2      	movs	r1, #194	; 0xc2
   1a652:	e7e6      	b.n	1a622 <z_sched_start+0x32>
	__asm__ volatile(
   1a654:	f385 8811 	msr	BASEPRI, r5
   1a658:	f3bf 8f6f 	isb	sy
}
   1a65c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a65e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1a662:	4620      	mov	r0, r4
   1a664:	7363      	strb	r3, [r4, #13]
   1a666:	f7ff fe47 	bl	1a2f8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1a66a:	4629      	mov	r1, r5
}
   1a66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1a670:	4801      	ldr	r0, [pc, #4]	; (1a678 <z_sched_start+0x88>)
   1a672:	f7ff bf7b 	b.w	1a56c <z_reschedule>
   1a676:	bf00      	nop
   1a678:	20009c44 	.word	0x20009c44
   1a67c:	0002197b 	.word	0x0002197b
   1a680:	000219d4 	.word	0x000219d4
   1a684:	00021547 	.word	0x00021547
   1a688:	000219e9 	.word	0x000219e9
   1a68c:	000219a8 	.word	0x000219a8
   1a690:	000219bf 	.word	0x000219bf

0001a694 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   1a694:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a696:	f04f 0320 	mov.w	r3, #32
   1a69a:	f3ef 8411 	mrs	r4, BASEPRI
   1a69e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a6a6:	4825      	ldr	r0, [pc, #148]	; (1a73c <k_sched_lock+0xa8>)
   1a6a8:	f7fe fc38 	bl	18f1c <z_spin_lock_valid>
   1a6ac:	b960      	cbnz	r0, 1a6c8 <k_sched_lock+0x34>
   1a6ae:	2394      	movs	r3, #148	; 0x94
   1a6b0:	4a23      	ldr	r2, [pc, #140]	; (1a740 <k_sched_lock+0xac>)
   1a6b2:	4924      	ldr	r1, [pc, #144]	; (1a744 <k_sched_lock+0xb0>)
   1a6b4:	4824      	ldr	r0, [pc, #144]	; (1a748 <k_sched_lock+0xb4>)
   1a6b6:	f002 fa18 	bl	1caea <assert_print>
   1a6ba:	4920      	ldr	r1, [pc, #128]	; (1a73c <k_sched_lock+0xa8>)
   1a6bc:	4823      	ldr	r0, [pc, #140]	; (1a74c <k_sched_lock+0xb8>)
   1a6be:	f002 fa14 	bl	1caea <assert_print>
   1a6c2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a6c4:	481e      	ldr	r0, [pc, #120]	; (1a740 <k_sched_lock+0xac>)
   1a6c6:	e010      	b.n	1a6ea <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   1a6c8:	481c      	ldr	r0, [pc, #112]	; (1a73c <k_sched_lock+0xa8>)
   1a6ca:	f7fe fc43 	bl	18f54 <z_spin_lock_set_owner>
   1a6ce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a6d2:	b163      	cbz	r3, 1a6ee <k_sched_lock+0x5a>
   1a6d4:	491e      	ldr	r1, [pc, #120]	; (1a750 <k_sched_lock+0xbc>)
   1a6d6:	23fd      	movs	r3, #253	; 0xfd
   1a6d8:	4a1e      	ldr	r2, [pc, #120]	; (1a754 <k_sched_lock+0xc0>)
   1a6da:	481b      	ldr	r0, [pc, #108]	; (1a748 <k_sched_lock+0xb4>)
   1a6dc:	f002 fa05 	bl	1caea <assert_print>
   1a6e0:	481d      	ldr	r0, [pc, #116]	; (1a758 <k_sched_lock+0xc4>)
   1a6e2:	f002 fa02 	bl	1caea <assert_print>
   1a6e6:	21fd      	movs	r1, #253	; 0xfd
   1a6e8:	481a      	ldr	r0, [pc, #104]	; (1a754 <k_sched_lock+0xc0>)
   1a6ea:	f002 f9f7 	bl	1cadc <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1a6ee:	4b1b      	ldr	r3, [pc, #108]	; (1a75c <k_sched_lock+0xc8>)
   1a6f0:	689a      	ldr	r2, [r3, #8]
   1a6f2:	7bd3      	ldrb	r3, [r2, #15]
   1a6f4:	2b01      	cmp	r3, #1
   1a6f6:	d10a      	bne.n	1a70e <k_sched_lock+0x7a>
   1a6f8:	4919      	ldr	r1, [pc, #100]	; (1a760 <k_sched_lock+0xcc>)
   1a6fa:	23fe      	movs	r3, #254	; 0xfe
   1a6fc:	4a15      	ldr	r2, [pc, #84]	; (1a754 <k_sched_lock+0xc0>)
   1a6fe:	4812      	ldr	r0, [pc, #72]	; (1a748 <k_sched_lock+0xb4>)
   1a700:	f002 f9f3 	bl	1caea <assert_print>
   1a704:	4814      	ldr	r0, [pc, #80]	; (1a758 <k_sched_lock+0xc4>)
   1a706:	f002 f9f0 	bl	1caea <assert_print>
   1a70a:	21fe      	movs	r1, #254	; 0xfe
   1a70c:	e7ec      	b.n	1a6e8 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   1a70e:	3b01      	subs	r3, #1
   1a710:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a712:	480a      	ldr	r0, [pc, #40]	; (1a73c <k_sched_lock+0xa8>)
   1a714:	f7fe fc10 	bl	18f38 <z_spin_unlock_valid>
   1a718:	b958      	cbnz	r0, 1a732 <k_sched_lock+0x9e>
   1a71a:	23c2      	movs	r3, #194	; 0xc2
   1a71c:	4a08      	ldr	r2, [pc, #32]	; (1a740 <k_sched_lock+0xac>)
   1a71e:	4911      	ldr	r1, [pc, #68]	; (1a764 <k_sched_lock+0xd0>)
   1a720:	4809      	ldr	r0, [pc, #36]	; (1a748 <k_sched_lock+0xb4>)
   1a722:	f002 f9e2 	bl	1caea <assert_print>
   1a726:	4905      	ldr	r1, [pc, #20]	; (1a73c <k_sched_lock+0xa8>)
   1a728:	480f      	ldr	r0, [pc, #60]	; (1a768 <k_sched_lock+0xd4>)
   1a72a:	f002 f9de 	bl	1caea <assert_print>
   1a72e:	21c2      	movs	r1, #194	; 0xc2
   1a730:	e7c8      	b.n	1a6c4 <k_sched_lock+0x30>
	__asm__ volatile(
   1a732:	f384 8811 	msr	BASEPRI, r4
   1a736:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1a73a:	bd10      	pop	{r4, pc}
   1a73c:	20009c44 	.word	0x20009c44
   1a740:	0002197b 	.word	0x0002197b
   1a744:	000219d4 	.word	0x000219d4
   1a748:	00021547 	.word	0x00021547
   1a74c:	000219e9 	.word	0x000219e9
   1a750:	00025122 	.word	0x00025122
   1a754:	000253f9 	.word	0x000253f9
   1a758:	00023bf8 	.word	0x00023bf8
   1a75c:	20009bfc 	.word	0x20009bfc
   1a760:	00025424 	.word	0x00025424
   1a764:	000219a8 	.word	0x000219a8
   1a768:	000219bf 	.word	0x000219bf

0001a76c <k_sched_unlock>:

void k_sched_unlock(void)
{
   1a76c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a76e:	f04f 0320 	mov.w	r3, #32
   1a772:	f3ef 8411 	mrs	r4, BASEPRI
   1a776:	f383 8812 	msr	BASEPRI_MAX, r3
   1a77a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a77e:	4829      	ldr	r0, [pc, #164]	; (1a824 <k_sched_unlock+0xb8>)
   1a780:	f7fe fbcc 	bl	18f1c <z_spin_lock_valid>
   1a784:	b960      	cbnz	r0, 1a7a0 <k_sched_unlock+0x34>
   1a786:	2394      	movs	r3, #148	; 0x94
   1a788:	4a27      	ldr	r2, [pc, #156]	; (1a828 <k_sched_unlock+0xbc>)
   1a78a:	4928      	ldr	r1, [pc, #160]	; (1a82c <k_sched_unlock+0xc0>)
   1a78c:	4828      	ldr	r0, [pc, #160]	; (1a830 <k_sched_unlock+0xc4>)
   1a78e:	f002 f9ac 	bl	1caea <assert_print>
   1a792:	4924      	ldr	r1, [pc, #144]	; (1a824 <k_sched_unlock+0xb8>)
   1a794:	4827      	ldr	r0, [pc, #156]	; (1a834 <k_sched_unlock+0xc8>)
   1a796:	f002 f9a8 	bl	1caea <assert_print>
   1a79a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a79c:	4822      	ldr	r0, [pc, #136]	; (1a828 <k_sched_unlock+0xbc>)
   1a79e:	e013      	b.n	1a7c8 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   1a7a0:	4820      	ldr	r0, [pc, #128]	; (1a824 <k_sched_unlock+0xb8>)
   1a7a2:	f7fe fbd7 	bl	18f54 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   1a7a6:	4b24      	ldr	r3, [pc, #144]	; (1a838 <k_sched_unlock+0xcc>)
   1a7a8:	689a      	ldr	r2, [r3, #8]
   1a7aa:	7bd3      	ldrb	r3, [r2, #15]
   1a7ac:	b973      	cbnz	r3, 1a7cc <k_sched_unlock+0x60>
   1a7ae:	4923      	ldr	r1, [pc, #140]	; (1a83c <k_sched_unlock+0xd0>)
   1a7b0:	f240 33e7 	movw	r3, #999	; 0x3e7
   1a7b4:	4a22      	ldr	r2, [pc, #136]	; (1a840 <k_sched_unlock+0xd4>)
   1a7b6:	481e      	ldr	r0, [pc, #120]	; (1a830 <k_sched_unlock+0xc4>)
   1a7b8:	f002 f997 	bl	1caea <assert_print>
   1a7bc:	4821      	ldr	r0, [pc, #132]	; (1a844 <k_sched_unlock+0xd8>)
   1a7be:	f002 f994 	bl	1caea <assert_print>
   1a7c2:	f240 31e7 	movw	r1, #999	; 0x3e7
   1a7c6:	481e      	ldr	r0, [pc, #120]	; (1a840 <k_sched_unlock+0xd4>)
   1a7c8:	f002 f988 	bl	1cadc <assert_post_action>
   1a7cc:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1a7d0:	b160      	cbz	r0, 1a7ec <k_sched_unlock+0x80>
   1a7d2:	491d      	ldr	r1, [pc, #116]	; (1a848 <k_sched_unlock+0xdc>)
   1a7d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a7d8:	4a19      	ldr	r2, [pc, #100]	; (1a840 <k_sched_unlock+0xd4>)
   1a7da:	4815      	ldr	r0, [pc, #84]	; (1a830 <k_sched_unlock+0xc4>)
   1a7dc:	f002 f985 	bl	1caea <assert_print>
   1a7e0:	4818      	ldr	r0, [pc, #96]	; (1a844 <k_sched_unlock+0xd8>)
   1a7e2:	f002 f982 	bl	1caea <assert_print>
   1a7e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1a7ea:	e7ec      	b.n	1a7c6 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   1a7ec:	3301      	adds	r3, #1
   1a7ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a7f0:	f7ff fd4e 	bl	1a290 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a7f4:	480b      	ldr	r0, [pc, #44]	; (1a824 <k_sched_unlock+0xb8>)
   1a7f6:	f7fe fb9f 	bl	18f38 <z_spin_unlock_valid>
   1a7fa:	b958      	cbnz	r0, 1a814 <k_sched_unlock+0xa8>
   1a7fc:	23c2      	movs	r3, #194	; 0xc2
   1a7fe:	4a0a      	ldr	r2, [pc, #40]	; (1a828 <k_sched_unlock+0xbc>)
   1a800:	4912      	ldr	r1, [pc, #72]	; (1a84c <k_sched_unlock+0xe0>)
   1a802:	480b      	ldr	r0, [pc, #44]	; (1a830 <k_sched_unlock+0xc4>)
   1a804:	f002 f971 	bl	1caea <assert_print>
   1a808:	4906      	ldr	r1, [pc, #24]	; (1a824 <k_sched_unlock+0xb8>)
   1a80a:	4811      	ldr	r0, [pc, #68]	; (1a850 <k_sched_unlock+0xe4>)
   1a80c:	f002 f96d 	bl	1caea <assert_print>
   1a810:	21c2      	movs	r1, #194	; 0xc2
   1a812:	e7c3      	b.n	1a79c <k_sched_unlock+0x30>
	__asm__ volatile(
   1a814:	f384 8811 	msr	BASEPRI, r4
   1a818:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1a81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1a820:	f005 bc8f 	b.w	20142 <z_reschedule_unlocked>
   1a824:	20009c44 	.word	0x20009c44
   1a828:	0002197b 	.word	0x0002197b
   1a82c:	000219d4 	.word	0x000219d4
   1a830:	00021547 	.word	0x00021547
   1a834:	000219e9 	.word	0x000219e9
   1a838:	20009bfc 	.word	0x20009bfc
   1a83c:	00025455 	.word	0x00025455
   1a840:	0002538f 	.word	0x0002538f
   1a844:	00023bf8 	.word	0x00023bf8
   1a848:	00025122 	.word	0x00025122
   1a84c:	000219a8 	.word	0x000219a8
   1a850:	000219bf 	.word	0x000219bf

0001a854 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   1a854:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a856:	4b0b      	ldr	r3, [pc, #44]	; (1a884 <z_priq_dumb_remove+0x30>)
   1a858:	4299      	cmp	r1, r3
   1a85a:	d10b      	bne.n	1a874 <z_priq_dumb_remove+0x20>
   1a85c:	490a      	ldr	r1, [pc, #40]	; (1a888 <z_priq_dumb_remove+0x34>)
   1a85e:	480b      	ldr	r0, [pc, #44]	; (1a88c <z_priq_dumb_remove+0x38>)
   1a860:	f240 4373 	movw	r3, #1139	; 0x473
   1a864:	4a0a      	ldr	r2, [pc, #40]	; (1a890 <z_priq_dumb_remove+0x3c>)
   1a866:	f002 f940 	bl	1caea <assert_print>
   1a86a:	f240 4173 	movw	r1, #1139	; 0x473
   1a86e:	4808      	ldr	r0, [pc, #32]	; (1a890 <z_priq_dumb_remove+0x3c>)
   1a870:	f002 f934 	bl	1cadc <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1a874:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   1a878:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a87a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a87c:	2300      	movs	r3, #0
	node->prev = NULL;
   1a87e:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a882:	bd08      	pop	{r3, pc}
   1a884:	20009540 	.word	0x20009540
   1a888:	000253d8 	.word	0x000253d8
   1a88c:	00021547 	.word	0x00021547
   1a890:	0002538f 	.word	0x0002538f

0001a894 <move_thread_to_end_of_prio_q>:
{
   1a894:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1a896:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1a89a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1a89c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1a89e:	7b43      	ldrb	r3, [r0, #13]
   1a8a0:	da06      	bge.n	1a8b0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1a8a6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a8a8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1a8aa:	481d      	ldr	r0, [pc, #116]	; (1a920 <move_thread_to_end_of_prio_q+0x8c>)
   1a8ac:	f7ff ffd2 	bl	1a854 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1a8b0:	7b63      	ldrb	r3, [r4, #13]
   1a8b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a8b6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a8b8:	4b1a      	ldr	r3, [pc, #104]	; (1a924 <move_thread_to_end_of_prio_q+0x90>)
   1a8ba:	429c      	cmp	r4, r3
   1a8bc:	d109      	bne.n	1a8d2 <move_thread_to_end_of_prio_q+0x3e>
   1a8be:	491a      	ldr	r1, [pc, #104]	; (1a928 <move_thread_to_end_of_prio_q+0x94>)
   1a8c0:	481a      	ldr	r0, [pc, #104]	; (1a92c <move_thread_to_end_of_prio_q+0x98>)
   1a8c2:	23ba      	movs	r3, #186	; 0xba
   1a8c4:	4a1a      	ldr	r2, [pc, #104]	; (1a930 <move_thread_to_end_of_prio_q+0x9c>)
   1a8c6:	f002 f910 	bl	1caea <assert_print>
   1a8ca:	21ba      	movs	r1, #186	; 0xba
   1a8cc:	4818      	ldr	r0, [pc, #96]	; (1a930 <move_thread_to_end_of_prio_q+0x9c>)
   1a8ce:	f002 f905 	bl	1cadc <assert_post_action>
	return list->head == list;
   1a8d2:	4a18      	ldr	r2, [pc, #96]	; (1a934 <move_thread_to_end_of_prio_q+0xa0>)
   1a8d4:	4611      	mov	r1, r2
   1a8d6:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   1a8da:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8dc:	428b      	cmp	r3, r1
   1a8de:	bf08      	it	eq
   1a8e0:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a8e2:	b923      	cbnz	r3, 1a8ee <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   1a8e4:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   1a8e8:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1a8ea:	6254      	str	r4, [r2, #36]	; 0x24
}
   1a8ec:	e00c      	b.n	1a908 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   1a8ee:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1a8f2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1a8f6:	42b5      	cmp	r5, r6
   1a8f8:	d00e      	beq.n	1a918 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a8fa:	42ae      	cmp	r6, r5
   1a8fc:	dd0c      	ble.n	1a918 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   1a8fe:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1a900:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1a904:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1a906:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1a908:	6890      	ldr	r0, [r2, #8]
   1a90a:	1b03      	subs	r3, r0, r4
   1a90c:	4258      	negs	r0, r3
   1a90e:	4158      	adcs	r0, r3
}
   1a910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1a914:	f7ff bcbc 	b.w	1a290 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1a918:	4298      	cmp	r0, r3
   1a91a:	d0e3      	beq.n	1a8e4 <move_thread_to_end_of_prio_q+0x50>
   1a91c:	681b      	ldr	r3, [r3, #0]
   1a91e:	e7e0      	b.n	1a8e2 <move_thread_to_end_of_prio_q+0x4e>
   1a920:	20009c1c 	.word	0x20009c1c
   1a924:	20009540 	.word	0x20009540
   1a928:	000253d8 	.word	0x000253d8
   1a92c:	00021547 	.word	0x00021547
   1a930:	0002538f 	.word	0x0002538f
   1a934:	20009bfc 	.word	0x20009bfc

0001a938 <z_time_slice>:
{
   1a938:	b570      	push	{r4, r5, r6, lr}
   1a93a:	4605      	mov	r5, r0
	__asm__ volatile(
   1a93c:	f04f 0320 	mov.w	r3, #32
   1a940:	f3ef 8611 	mrs	r6, BASEPRI
   1a944:	f383 8812 	msr	BASEPRI_MAX, r3
   1a948:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a94c:	4829      	ldr	r0, [pc, #164]	; (1a9f4 <z_time_slice+0xbc>)
   1a94e:	f7fe fae5 	bl	18f1c <z_spin_lock_valid>
   1a952:	b968      	cbnz	r0, 1a970 <z_time_slice+0x38>
   1a954:	2394      	movs	r3, #148	; 0x94
   1a956:	4a28      	ldr	r2, [pc, #160]	; (1a9f8 <z_time_slice+0xc0>)
   1a958:	4928      	ldr	r1, [pc, #160]	; (1a9fc <z_time_slice+0xc4>)
   1a95a:	4829      	ldr	r0, [pc, #164]	; (1aa00 <z_time_slice+0xc8>)
   1a95c:	f002 f8c5 	bl	1caea <assert_print>
   1a960:	4924      	ldr	r1, [pc, #144]	; (1a9f4 <z_time_slice+0xbc>)
   1a962:	4828      	ldr	r0, [pc, #160]	; (1aa04 <z_time_slice+0xcc>)
   1a964:	f002 f8c1 	bl	1caea <assert_print>
   1a968:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a96a:	4823      	ldr	r0, [pc, #140]	; (1a9f8 <z_time_slice+0xc0>)
   1a96c:	f002 f8b6 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a970:	4820      	ldr	r0, [pc, #128]	; (1a9f4 <z_time_slice+0xbc>)
   1a972:	f7fe faef 	bl	18f54 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1a976:	4b24      	ldr	r3, [pc, #144]	; (1aa08 <z_time_slice+0xd0>)
   1a978:	4a24      	ldr	r2, [pc, #144]	; (1aa0c <z_time_slice+0xd4>)
   1a97a:	689c      	ldr	r4, [r3, #8]
   1a97c:	6811      	ldr	r1, [r2, #0]
   1a97e:	428c      	cmp	r4, r1
   1a980:	d112      	bne.n	1a9a8 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   1a982:	4620      	mov	r0, r4
   1a984:	f7ff fc70 	bl	1a268 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a988:	481a      	ldr	r0, [pc, #104]	; (1a9f4 <z_time_slice+0xbc>)
   1a98a:	f7fe fad5 	bl	18f38 <z_spin_unlock_valid>
   1a98e:	bb58      	cbnz	r0, 1a9e8 <z_time_slice+0xb0>
   1a990:	23c2      	movs	r3, #194	; 0xc2
   1a992:	4a19      	ldr	r2, [pc, #100]	; (1a9f8 <z_time_slice+0xc0>)
   1a994:	491e      	ldr	r1, [pc, #120]	; (1aa10 <z_time_slice+0xd8>)
   1a996:	481a      	ldr	r0, [pc, #104]	; (1aa00 <z_time_slice+0xc8>)
   1a998:	f002 f8a7 	bl	1caea <assert_print>
   1a99c:	4915      	ldr	r1, [pc, #84]	; (1a9f4 <z_time_slice+0xbc>)
   1a99e:	481d      	ldr	r0, [pc, #116]	; (1aa14 <z_time_slice+0xdc>)
   1a9a0:	f002 f8a3 	bl	1caea <assert_print>
   1a9a4:	21c2      	movs	r1, #194	; 0xc2
   1a9a6:	e7e0      	b.n	1a96a <z_time_slice+0x32>
	pending_current = NULL;
   1a9a8:	2100      	movs	r1, #0
   1a9aa:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1a9ac:	4a1a      	ldr	r2, [pc, #104]	; (1aa18 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   1a9ae:	6812      	ldr	r2, [r2, #0]
   1a9b0:	b1c2      	cbz	r2, 1a9e4 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   1a9b2:	89e2      	ldrh	r2, [r4, #14]
   1a9b4:	2a7f      	cmp	r2, #127	; 0x7f
   1a9b6:	d815      	bhi.n	1a9e4 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   1a9b8:	7b62      	ldrb	r2, [r4, #13]
   1a9ba:	06d2      	lsls	r2, r2, #27
   1a9bc:	d112      	bne.n	1a9e4 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a9be:	4a17      	ldr	r2, [pc, #92]	; (1aa1c <z_time_slice+0xe4>)
   1a9c0:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1a9c4:	6812      	ldr	r2, [r2, #0]
   1a9c6:	4291      	cmp	r1, r2
   1a9c8:	db0c      	blt.n	1a9e4 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   1a9ca:	4a15      	ldr	r2, [pc, #84]	; (1aa20 <z_time_slice+0xe8>)
   1a9cc:	4294      	cmp	r4, r2
   1a9ce:	d009      	beq.n	1a9e4 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   1a9d0:	691a      	ldr	r2, [r3, #16]
   1a9d2:	42aa      	cmp	r2, r5
   1a9d4:	dc03      	bgt.n	1a9de <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   1a9d6:	4620      	mov	r0, r4
   1a9d8:	f7ff ff5c 	bl	1a894 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   1a9dc:	e7d1      	b.n	1a982 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   1a9de:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   1a9e0:	611a      	str	r2, [r3, #16]
   1a9e2:	e7d1      	b.n	1a988 <z_time_slice+0x50>
   1a9e4:	2200      	movs	r2, #0
   1a9e6:	e7fb      	b.n	1a9e0 <z_time_slice+0xa8>
	__asm__ volatile(
   1a9e8:	f386 8811 	msr	BASEPRI, r6
   1a9ec:	f3bf 8f6f 	isb	sy
}
   1a9f0:	bd70      	pop	{r4, r5, r6, pc}
   1a9f2:	bf00      	nop
   1a9f4:	20009c44 	.word	0x20009c44
   1a9f8:	0002197b 	.word	0x0002197b
   1a9fc:	000219d4 	.word	0x000219d4
   1aa00:	00021547 	.word	0x00021547
   1aa04:	000219e9 	.word	0x000219e9
   1aa08:	20009bfc 	.word	0x20009bfc
   1aa0c:	20009c38 	.word	0x20009c38
   1aa10:	000219a8 	.word	0x000219a8
   1aa14:	000219bf 	.word	0x000219bf
   1aa18:	20009c40 	.word	0x20009c40
   1aa1c:	20009c3c 	.word	0x20009c3c
   1aa20:	20009540 	.word	0x20009540

0001aa24 <unready_thread>:
{
   1aa24:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1aa26:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1aa2a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1aa2c:	2a00      	cmp	r2, #0
   1aa2e:	7b43      	ldrb	r3, [r0, #13]
   1aa30:	da06      	bge.n	1aa40 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1aa32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1aa36:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1aa38:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1aa3a:	4806      	ldr	r0, [pc, #24]	; (1aa54 <unready_thread+0x30>)
   1aa3c:	f7ff ff0a 	bl	1a854 <z_priq_dumb_remove>
	update_cache(thread == _current);
   1aa40:	4b05      	ldr	r3, [pc, #20]	; (1aa58 <unready_thread+0x34>)
   1aa42:	6898      	ldr	r0, [r3, #8]
   1aa44:	1b03      	subs	r3, r0, r4
   1aa46:	4258      	negs	r0, r3
   1aa48:	4158      	adcs	r0, r3
}
   1aa4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1aa4e:	f7ff bc1f 	b.w	1a290 <update_cache>
   1aa52:	bf00      	nop
   1aa54:	20009c1c 	.word	0x20009c1c
   1aa58:	20009bfc 	.word	0x20009bfc

0001aa5c <add_to_waitq_locked>:
{
   1aa5c:	b538      	push	{r3, r4, r5, lr}
   1aa5e:	4604      	mov	r4, r0
   1aa60:	460d      	mov	r5, r1
	unready_thread(thread);
   1aa62:	f7ff ffdf 	bl	1aa24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1aa66:	7b63      	ldrb	r3, [r4, #13]
   1aa68:	f043 0302 	orr.w	r3, r3, #2
   1aa6c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1aa6e:	b34d      	cbz	r5, 1aac4 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aa70:	4b15      	ldr	r3, [pc, #84]	; (1aac8 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1aa72:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aa74:	429c      	cmp	r4, r3
   1aa76:	d109      	bne.n	1aa8c <add_to_waitq_locked+0x30>
   1aa78:	4914      	ldr	r1, [pc, #80]	; (1aacc <add_to_waitq_locked+0x70>)
   1aa7a:	4815      	ldr	r0, [pc, #84]	; (1aad0 <add_to_waitq_locked+0x74>)
   1aa7c:	23ba      	movs	r3, #186	; 0xba
   1aa7e:	4a15      	ldr	r2, [pc, #84]	; (1aad4 <add_to_waitq_locked+0x78>)
   1aa80:	f002 f833 	bl	1caea <assert_print>
   1aa84:	21ba      	movs	r1, #186	; 0xba
   1aa86:	4813      	ldr	r0, [pc, #76]	; (1aad4 <add_to_waitq_locked+0x78>)
   1aa88:	f002 f828 	bl	1cadc <assert_post_action>
	return list->head == list;
   1aa8c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa8e:	429d      	cmp	r5, r3
   1aa90:	d109      	bne.n	1aaa6 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   1aa92:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1aa94:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1aa98:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1aa9a:	606c      	str	r4, [r5, #4]
}
   1aa9c:	e012      	b.n	1aac4 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   1aa9e:	686a      	ldr	r2, [r5, #4]
   1aaa0:	4293      	cmp	r3, r2
   1aaa2:	d0f6      	beq.n	1aa92 <add_to_waitq_locked+0x36>
   1aaa4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aaa6:	2b00      	cmp	r3, #0
   1aaa8:	d0f3      	beq.n	1aa92 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   1aaaa:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1aaae:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1aab2:	428a      	cmp	r2, r1
   1aab4:	d0f3      	beq.n	1aa9e <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1aab6:	4291      	cmp	r1, r2
   1aab8:	ddf1      	ble.n	1aa9e <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   1aaba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1aabc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1aac0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1aac2:	605c      	str	r4, [r3, #4]
}
   1aac4:	bd38      	pop	{r3, r4, r5, pc}
   1aac6:	bf00      	nop
   1aac8:	20009540 	.word	0x20009540
   1aacc:	000253d8 	.word	0x000253d8
   1aad0:	00021547 	.word	0x00021547
   1aad4:	0002538f 	.word	0x0002538f

0001aad8 <pend_locked>:
{
   1aad8:	b570      	push	{r4, r5, r6, lr}
   1aada:	4615      	mov	r5, r2
   1aadc:	461c      	mov	r4, r3
   1aade:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1aae0:	f7ff ffbc 	bl	1aa5c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1aae4:	f1b4 3fff 	cmp.w	r4, #4294967295
   1aae8:	bf08      	it	eq
   1aaea:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1aaee:	d008      	beq.n	1ab02 <pend_locked+0x2a>
   1aaf0:	462a      	mov	r2, r5
   1aaf2:	4623      	mov	r3, r4
   1aaf4:	f106 0018 	add.w	r0, r6, #24
   1aaf8:	4902      	ldr	r1, [pc, #8]	; (1ab04 <pend_locked+0x2c>)
}
   1aafa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1aafe:	f000 bdf1 	b.w	1b6e4 <z_add_timeout>
   1ab02:	bd70      	pop	{r4, r5, r6, pc}
   1ab04:	0001aebd 	.word	0x0001aebd

0001ab08 <z_pend_curr>:
{
   1ab08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ab0c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   1ab10:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1abc8 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   1ab14:	4c2d      	ldr	r4, [pc, #180]	; (1abcc <z_pend_curr+0xc4>)
{
   1ab16:	4617      	mov	r7, r2
	pending_current = _current;
   1ab18:	4b2d      	ldr	r3, [pc, #180]	; (1abd0 <z_pend_curr+0xc8>)
   1ab1a:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   1ab1e:	42a0      	cmp	r0, r4
{
   1ab20:	4605      	mov	r5, r0
   1ab22:	460e      	mov	r6, r1
	pending_current = _current;
   1ab24:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   1ab26:	d10b      	bne.n	1ab40 <z_pend_curr+0x38>
   1ab28:	492a      	ldr	r1, [pc, #168]	; (1abd4 <z_pend_curr+0xcc>)
   1ab2a:	482b      	ldr	r0, [pc, #172]	; (1abd8 <z_pend_curr+0xd0>)
   1ab2c:	f240 334e 	movw	r3, #846	; 0x34e
   1ab30:	4a2a      	ldr	r2, [pc, #168]	; (1abdc <z_pend_curr+0xd4>)
   1ab32:	f001 ffda 	bl	1caea <assert_print>
   1ab36:	f240 314e 	movw	r1, #846	; 0x34e
   1ab3a:	4828      	ldr	r0, [pc, #160]	; (1abdc <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab3c:	f001 ffce 	bl	1cadc <assert_post_action>
	__asm__ volatile(
   1ab40:	f04f 0220 	mov.w	r2, #32
   1ab44:	f3ef 8311 	mrs	r3, BASEPRI
   1ab48:	f382 8812 	msr	BASEPRI_MAX, r2
   1ab4c:	f3bf 8f6f 	isb	sy
   1ab50:	4620      	mov	r0, r4
   1ab52:	f7fe f9e3 	bl	18f1c <z_spin_lock_valid>
   1ab56:	b960      	cbnz	r0, 1ab72 <z_pend_curr+0x6a>
   1ab58:	2394      	movs	r3, #148	; 0x94
   1ab5a:	4a21      	ldr	r2, [pc, #132]	; (1abe0 <z_pend_curr+0xd8>)
   1ab5c:	4921      	ldr	r1, [pc, #132]	; (1abe4 <z_pend_curr+0xdc>)
   1ab5e:	481e      	ldr	r0, [pc, #120]	; (1abd8 <z_pend_curr+0xd0>)
   1ab60:	f001 ffc3 	bl	1caea <assert_print>
   1ab64:	4621      	mov	r1, r4
   1ab66:	4820      	ldr	r0, [pc, #128]	; (1abe8 <z_pend_curr+0xe0>)
   1ab68:	f001 ffbf 	bl	1caea <assert_print>
   1ab6c:	2194      	movs	r1, #148	; 0x94
   1ab6e:	481c      	ldr	r0, [pc, #112]	; (1abe0 <z_pend_curr+0xd8>)
   1ab70:	e7e4      	b.n	1ab3c <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   1ab72:	4620      	mov	r0, r4
   1ab74:	f7fe f9ee 	bl	18f54 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   1ab78:	f8da 0008 	ldr.w	r0, [sl, #8]
   1ab7c:	4642      	mov	r2, r8
   1ab7e:	464b      	mov	r3, r9
   1ab80:	4639      	mov	r1, r7
   1ab82:	f7ff ffa9 	bl	1aad8 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab86:	4628      	mov	r0, r5
   1ab88:	f7fe f9d6 	bl	18f38 <z_spin_unlock_valid>
   1ab8c:	b958      	cbnz	r0, 1aba6 <z_pend_curr+0x9e>
   1ab8e:	4917      	ldr	r1, [pc, #92]	; (1abec <z_pend_curr+0xe4>)
   1ab90:	23e1      	movs	r3, #225	; 0xe1
   1ab92:	4a13      	ldr	r2, [pc, #76]	; (1abe0 <z_pend_curr+0xd8>)
   1ab94:	4810      	ldr	r0, [pc, #64]	; (1abd8 <z_pend_curr+0xd0>)
   1ab96:	f001 ffa8 	bl	1caea <assert_print>
   1ab9a:	4629      	mov	r1, r5
   1ab9c:	4814      	ldr	r0, [pc, #80]	; (1abf0 <z_pend_curr+0xe8>)
   1ab9e:	f001 ffa4 	bl	1caea <assert_print>
   1aba2:	21e1      	movs	r1, #225	; 0xe1
   1aba4:	e7e3      	b.n	1ab6e <z_pend_curr+0x66>
   1aba6:	4620      	mov	r0, r4
   1aba8:	f7fe f9c6 	bl	18f38 <z_spin_unlock_valid>
   1abac:	b938      	cbnz	r0, 1abbe <z_pend_curr+0xb6>
   1abae:	490f      	ldr	r1, [pc, #60]	; (1abec <z_pend_curr+0xe4>)
   1abb0:	23e1      	movs	r3, #225	; 0xe1
   1abb2:	4a0b      	ldr	r2, [pc, #44]	; (1abe0 <z_pend_curr+0xd8>)
   1abb4:	4808      	ldr	r0, [pc, #32]	; (1abd8 <z_pend_curr+0xd0>)
   1abb6:	f001 ff98 	bl	1caea <assert_print>
   1abba:	4621      	mov	r1, r4
   1abbc:	e7ee      	b.n	1ab9c <z_pend_curr+0x94>
   1abbe:	4630      	mov	r0, r6
}
   1abc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1abc4:	f7f2 b96e 	b.w	cea4 <arch_swap>
   1abc8:	20009bfc 	.word	0x20009bfc
   1abcc:	20009c44 	.word	0x20009c44
   1abd0:	20009c38 	.word	0x20009c38
   1abd4:	00025486 	.word	0x00025486
   1abd8:	00021547 	.word	0x00021547
   1abdc:	0002538f 	.word	0x0002538f
   1abe0:	0002197b 	.word	0x0002197b
   1abe4:	000219d4 	.word	0x000219d4
   1abe8:	000219e9 	.word	0x000219e9
   1abec:	000219a8 	.word	0x000219a8
   1abf0:	000219bf 	.word	0x000219bf

0001abf4 <z_set_prio>:
{
   1abf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1abf8:	4604      	mov	r4, r0
   1abfa:	460e      	mov	r6, r1
   1abfc:	f04f 0320 	mov.w	r3, #32
   1ac00:	f3ef 8911 	mrs	r9, BASEPRI
   1ac04:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac0c:	4837      	ldr	r0, [pc, #220]	; (1acec <z_set_prio+0xf8>)
   1ac0e:	f7fe f985 	bl	18f1c <z_spin_lock_valid>
   1ac12:	4607      	mov	r7, r0
   1ac14:	b960      	cbnz	r0, 1ac30 <z_set_prio+0x3c>
   1ac16:	2394      	movs	r3, #148	; 0x94
   1ac18:	4a35      	ldr	r2, [pc, #212]	; (1acf0 <z_set_prio+0xfc>)
   1ac1a:	4936      	ldr	r1, [pc, #216]	; (1acf4 <z_set_prio+0x100>)
   1ac1c:	4836      	ldr	r0, [pc, #216]	; (1acf8 <z_set_prio+0x104>)
   1ac1e:	f001 ff64 	bl	1caea <assert_print>
   1ac22:	4932      	ldr	r1, [pc, #200]	; (1acec <z_set_prio+0xf8>)
   1ac24:	4835      	ldr	r0, [pc, #212]	; (1acfc <z_set_prio+0x108>)
   1ac26:	f001 ff60 	bl	1caea <assert_print>
   1ac2a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac2c:	4830      	ldr	r0, [pc, #192]	; (1acf0 <z_set_prio+0xfc>)
   1ac2e:	e021      	b.n	1ac74 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   1ac30:	482e      	ldr	r0, [pc, #184]	; (1acec <z_set_prio+0xf8>)
   1ac32:	f7fe f98f 	bl	18f54 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1ac36:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1ac38:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ac3a:	06da      	lsls	r2, r3, #27
   1ac3c:	d11c      	bne.n	1ac78 <z_set_prio+0x84>
	return node->next != NULL;
   1ac3e:	69a5      	ldr	r5, [r4, #24]
   1ac40:	b9d5      	cbnz	r5, 1ac78 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   1ac42:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1ad00 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ac46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ac4a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1ac4c:	4621      	mov	r1, r4
   1ac4e:	4640      	mov	r0, r8
   1ac50:	f7ff fe00 	bl	1a854 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ac54:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1ac56:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1ac58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ac5c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ac5e:	4b29      	ldr	r3, [pc, #164]	; (1ad04 <z_set_prio+0x110>)
   1ac60:	429c      	cmp	r4, r3
   1ac62:	d11b      	bne.n	1ac9c <z_set_prio+0xa8>
   1ac64:	4928      	ldr	r1, [pc, #160]	; (1ad08 <z_set_prio+0x114>)
   1ac66:	4824      	ldr	r0, [pc, #144]	; (1acf8 <z_set_prio+0x104>)
   1ac68:	23ba      	movs	r3, #186	; 0xba
   1ac6a:	4a28      	ldr	r2, [pc, #160]	; (1ad0c <z_set_prio+0x118>)
   1ac6c:	f001 ff3d 	bl	1caea <assert_print>
   1ac70:	21ba      	movs	r1, #186	; 0xba
   1ac72:	4826      	ldr	r0, [pc, #152]	; (1ad0c <z_set_prio+0x118>)
   1ac74:	f001 ff32 	bl	1cadc <assert_post_action>
   1ac78:	2700      	movs	r7, #0
			thread->base.prio = prio;
   1ac7a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac7c:	481b      	ldr	r0, [pc, #108]	; (1acec <z_set_prio+0xf8>)
   1ac7e:	f7fe f95b 	bl	18f38 <z_spin_unlock_valid>
   1ac82:	bb58      	cbnz	r0, 1acdc <z_set_prio+0xe8>
   1ac84:	23c2      	movs	r3, #194	; 0xc2
   1ac86:	4a1a      	ldr	r2, [pc, #104]	; (1acf0 <z_set_prio+0xfc>)
   1ac88:	4921      	ldr	r1, [pc, #132]	; (1ad10 <z_set_prio+0x11c>)
   1ac8a:	481b      	ldr	r0, [pc, #108]	; (1acf8 <z_set_prio+0x104>)
   1ac8c:	f001 ff2d 	bl	1caea <assert_print>
   1ac90:	4916      	ldr	r1, [pc, #88]	; (1acec <z_set_prio+0xf8>)
   1ac92:	4820      	ldr	r0, [pc, #128]	; (1ad14 <z_set_prio+0x120>)
   1ac94:	f001 ff29 	bl	1caea <assert_print>
   1ac98:	21c2      	movs	r1, #194	; 0xc2
   1ac9a:	e7c7      	b.n	1ac2c <z_set_prio+0x38>
	return list->head == list;
   1ac9c:	4643      	mov	r3, r8
   1ac9e:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aca2:	4542      	cmp	r2, r8
   1aca4:	bf18      	it	ne
   1aca6:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   1aca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1acaa:	b925      	cbnz	r5, 1acb6 <z_set_prio+0xc2>
	node->prev = tail;
   1acac:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   1acb0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1acb2:	625c      	str	r4, [r3, #36]	; 0x24
}
   1acb4:	e00a      	b.n	1accc <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   1acb6:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   1acba:	428e      	cmp	r6, r1
   1acbc:	d00a      	beq.n	1acd4 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1acbe:	42b1      	cmp	r1, r6
   1acc0:	dd08      	ble.n	1acd4 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   1acc2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1acc4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1acc8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1acca:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1accc:	2001      	movs	r0, #1
   1acce:	f7ff fadf 	bl	1a290 <update_cache>
   1acd2:	e7d3      	b.n	1ac7c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   1acd4:	42aa      	cmp	r2, r5
   1acd6:	d0e9      	beq.n	1acac <z_set_prio+0xb8>
   1acd8:	682d      	ldr	r5, [r5, #0]
   1acda:	e7e6      	b.n	1acaa <z_set_prio+0xb6>
	__asm__ volatile(
   1acdc:	f389 8811 	msr	BASEPRI, r9
   1ace0:	f3bf 8f6f 	isb	sy
}
   1ace4:	4638      	mov	r0, r7
   1ace6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1acea:	bf00      	nop
   1acec:	20009c44 	.word	0x20009c44
   1acf0:	0002197b 	.word	0x0002197b
   1acf4:	000219d4 	.word	0x000219d4
   1acf8:	00021547 	.word	0x00021547
   1acfc:	000219e9 	.word	0x000219e9
   1ad00:	20009c1c 	.word	0x20009c1c
   1ad04:	20009540 	.word	0x20009540
   1ad08:	000253d8 	.word	0x000253d8
   1ad0c:	0002538f 	.word	0x0002538f
   1ad10:	000219a8 	.word	0x000219a8
   1ad14:	000219bf 	.word	0x000219bf

0001ad18 <z_impl_k_thread_suspend>:
{
   1ad18:	b570      	push	{r4, r5, r6, lr}
   1ad1a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ad1c:	3018      	adds	r0, #24
   1ad1e:	f000 fda7 	bl	1b870 <z_abort_timeout>
	__asm__ volatile(
   1ad22:	f04f 0320 	mov.w	r3, #32
   1ad26:	f3ef 8611 	mrs	r6, BASEPRI
   1ad2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad32:	4824      	ldr	r0, [pc, #144]	; (1adc4 <z_impl_k_thread_suspend+0xac>)
   1ad34:	f7fe f8f2 	bl	18f1c <z_spin_lock_valid>
   1ad38:	b968      	cbnz	r0, 1ad56 <z_impl_k_thread_suspend+0x3e>
   1ad3a:	2394      	movs	r3, #148	; 0x94
   1ad3c:	4a22      	ldr	r2, [pc, #136]	; (1adc8 <z_impl_k_thread_suspend+0xb0>)
   1ad3e:	4923      	ldr	r1, [pc, #140]	; (1adcc <z_impl_k_thread_suspend+0xb4>)
   1ad40:	4823      	ldr	r0, [pc, #140]	; (1add0 <z_impl_k_thread_suspend+0xb8>)
   1ad42:	f001 fed2 	bl	1caea <assert_print>
   1ad46:	491f      	ldr	r1, [pc, #124]	; (1adc4 <z_impl_k_thread_suspend+0xac>)
   1ad48:	4822      	ldr	r0, [pc, #136]	; (1add4 <z_impl_k_thread_suspend+0xbc>)
   1ad4a:	f001 fece 	bl	1caea <assert_print>
   1ad4e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad50:	481d      	ldr	r0, [pc, #116]	; (1adc8 <z_impl_k_thread_suspend+0xb0>)
   1ad52:	f001 fec3 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad56:	481b      	ldr	r0, [pc, #108]	; (1adc4 <z_impl_k_thread_suspend+0xac>)
   1ad58:	f7fe f8fc 	bl	18f54 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1ad5c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1ad60:	7b63      	ldrb	r3, [r4, #13]
   1ad62:	2a00      	cmp	r2, #0
   1ad64:	da06      	bge.n	1ad74 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ad66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1ad6a:	4621      	mov	r1, r4
   1ad6c:	481a      	ldr	r0, [pc, #104]	; (1add8 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ad6e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1ad70:	f7ff fd70 	bl	1a854 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1ad74:	4d19      	ldr	r5, [pc, #100]	; (1addc <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ad76:	7b63      	ldrb	r3, [r4, #13]
   1ad78:	68a8      	ldr	r0, [r5, #8]
   1ad7a:	f043 0310 	orr.w	r3, r3, #16
   1ad7e:	7363      	strb	r3, [r4, #13]
   1ad80:	1b03      	subs	r3, r0, r4
   1ad82:	4258      	negs	r0, r3
   1ad84:	4158      	adcs	r0, r3
   1ad86:	f7ff fa83 	bl	1a290 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad8a:	480e      	ldr	r0, [pc, #56]	; (1adc4 <z_impl_k_thread_suspend+0xac>)
   1ad8c:	f7fe f8d4 	bl	18f38 <z_spin_unlock_valid>
   1ad90:	b958      	cbnz	r0, 1adaa <z_impl_k_thread_suspend+0x92>
   1ad92:	23c2      	movs	r3, #194	; 0xc2
   1ad94:	4a0c      	ldr	r2, [pc, #48]	; (1adc8 <z_impl_k_thread_suspend+0xb0>)
   1ad96:	4912      	ldr	r1, [pc, #72]	; (1ade0 <z_impl_k_thread_suspend+0xc8>)
   1ad98:	480d      	ldr	r0, [pc, #52]	; (1add0 <z_impl_k_thread_suspend+0xb8>)
   1ad9a:	f001 fea6 	bl	1caea <assert_print>
   1ad9e:	4909      	ldr	r1, [pc, #36]	; (1adc4 <z_impl_k_thread_suspend+0xac>)
   1ada0:	4810      	ldr	r0, [pc, #64]	; (1ade4 <z_impl_k_thread_suspend+0xcc>)
   1ada2:	f001 fea2 	bl	1caea <assert_print>
   1ada6:	21c2      	movs	r1, #194	; 0xc2
   1ada8:	e7d2      	b.n	1ad50 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   1adaa:	f386 8811 	msr	BASEPRI, r6
   1adae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1adb2:	68ab      	ldr	r3, [r5, #8]
   1adb4:	42a3      	cmp	r3, r4
   1adb6:	d103      	bne.n	1adc0 <z_impl_k_thread_suspend+0xa8>
}
   1adb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1adbc:	f005 b9c1 	b.w	20142 <z_reschedule_unlocked>
}
   1adc0:	bd70      	pop	{r4, r5, r6, pc}
   1adc2:	bf00      	nop
   1adc4:	20009c44 	.word	0x20009c44
   1adc8:	0002197b 	.word	0x0002197b
   1adcc:	000219d4 	.word	0x000219d4
   1add0:	00021547 	.word	0x00021547
   1add4:	000219e9 	.word	0x000219e9
   1add8:	20009c1c 	.word	0x20009c1c
   1addc:	20009bfc 	.word	0x20009bfc
   1ade0:	000219a8 	.word	0x000219a8
   1ade4:	000219bf 	.word	0x000219bf

0001ade8 <unpend_thread_no_timeout>:
{
   1ade8:	b510      	push	{r4, lr}
   1adea:	4604      	mov	r4, r0
   1adec:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   1adee:	b958      	cbnz	r0, 1ae08 <unpend_thread_no_timeout+0x20>
   1adf0:	490a      	ldr	r1, [pc, #40]	; (1ae1c <unpend_thread_no_timeout+0x34>)
   1adf2:	480b      	ldr	r0, [pc, #44]	; (1ae20 <unpend_thread_no_timeout+0x38>)
   1adf4:	f240 23d6 	movw	r3, #726	; 0x2d6
   1adf8:	4a0a      	ldr	r2, [pc, #40]	; (1ae24 <unpend_thread_no_timeout+0x3c>)
   1adfa:	f001 fe76 	bl	1caea <assert_print>
   1adfe:	f240 21d6 	movw	r1, #726	; 0x2d6
   1ae02:	4808      	ldr	r0, [pc, #32]	; (1ae24 <unpend_thread_no_timeout+0x3c>)
   1ae04:	f001 fe6a 	bl	1cadc <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1ae08:	4621      	mov	r1, r4
   1ae0a:	f7ff fd23 	bl	1a854 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ae0e:	7b63      	ldrb	r3, [r4, #13]
   1ae10:	f023 0302 	bic.w	r3, r3, #2
   1ae14:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1ae16:	2300      	movs	r3, #0
   1ae18:	60a3      	str	r3, [r4, #8]
}
   1ae1a:	bd10      	pop	{r4, pc}
   1ae1c:	000254bd 	.word	0x000254bd
   1ae20:	00021547 	.word	0x00021547
   1ae24:	0002538f 	.word	0x0002538f

0001ae28 <z_unpend_thread>:
{
   1ae28:	b538      	push	{r3, r4, r5, lr}
   1ae2a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ae2c:	f04f 0320 	mov.w	r3, #32
   1ae30:	f3ef 8511 	mrs	r5, BASEPRI
   1ae34:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae3c:	4818      	ldr	r0, [pc, #96]	; (1aea0 <z_unpend_thread+0x78>)
   1ae3e:	f7fe f86d 	bl	18f1c <z_spin_lock_valid>
   1ae42:	b968      	cbnz	r0, 1ae60 <z_unpend_thread+0x38>
   1ae44:	2394      	movs	r3, #148	; 0x94
   1ae46:	4a17      	ldr	r2, [pc, #92]	; (1aea4 <z_unpend_thread+0x7c>)
   1ae48:	4917      	ldr	r1, [pc, #92]	; (1aea8 <z_unpend_thread+0x80>)
   1ae4a:	4818      	ldr	r0, [pc, #96]	; (1aeac <z_unpend_thread+0x84>)
   1ae4c:	f001 fe4d 	bl	1caea <assert_print>
   1ae50:	4913      	ldr	r1, [pc, #76]	; (1aea0 <z_unpend_thread+0x78>)
   1ae52:	4817      	ldr	r0, [pc, #92]	; (1aeb0 <z_unpend_thread+0x88>)
   1ae54:	f001 fe49 	bl	1caea <assert_print>
   1ae58:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae5a:	4812      	ldr	r0, [pc, #72]	; (1aea4 <z_unpend_thread+0x7c>)
   1ae5c:	f001 fe3e 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1ae60:	480f      	ldr	r0, [pc, #60]	; (1aea0 <z_unpend_thread+0x78>)
   1ae62:	f7fe f877 	bl	18f54 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1ae66:	4620      	mov	r0, r4
   1ae68:	f7ff ffbe 	bl	1ade8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae6c:	480c      	ldr	r0, [pc, #48]	; (1aea0 <z_unpend_thread+0x78>)
   1ae6e:	f7fe f863 	bl	18f38 <z_spin_unlock_valid>
   1ae72:	b958      	cbnz	r0, 1ae8c <z_unpend_thread+0x64>
   1ae74:	23c2      	movs	r3, #194	; 0xc2
   1ae76:	4a0b      	ldr	r2, [pc, #44]	; (1aea4 <z_unpend_thread+0x7c>)
   1ae78:	490e      	ldr	r1, [pc, #56]	; (1aeb4 <z_unpend_thread+0x8c>)
   1ae7a:	480c      	ldr	r0, [pc, #48]	; (1aeac <z_unpend_thread+0x84>)
   1ae7c:	f001 fe35 	bl	1caea <assert_print>
   1ae80:	4907      	ldr	r1, [pc, #28]	; (1aea0 <z_unpend_thread+0x78>)
   1ae82:	480d      	ldr	r0, [pc, #52]	; (1aeb8 <z_unpend_thread+0x90>)
   1ae84:	f001 fe31 	bl	1caea <assert_print>
   1ae88:	21c2      	movs	r1, #194	; 0xc2
   1ae8a:	e7e6      	b.n	1ae5a <z_unpend_thread+0x32>
	__asm__ volatile(
   1ae8c:	f385 8811 	msr	BASEPRI, r5
   1ae90:	f3bf 8f6f 	isb	sy
   1ae94:	f104 0018 	add.w	r0, r4, #24
}
   1ae98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ae9c:	f000 bce8 	b.w	1b870 <z_abort_timeout>
   1aea0:	20009c44 	.word	0x20009c44
   1aea4:	0002197b 	.word	0x0002197b
   1aea8:	000219d4 	.word	0x000219d4
   1aeac:	00021547 	.word	0x00021547
   1aeb0:	000219e9 	.word	0x000219e9
   1aeb4:	000219a8 	.word	0x000219a8
   1aeb8:	000219bf 	.word	0x000219bf

0001aebc <z_thread_timeout>:
{
   1aebc:	b570      	push	{r4, r5, r6, lr}
   1aebe:	4604      	mov	r4, r0
	__asm__ volatile(
   1aec0:	f04f 0320 	mov.w	r3, #32
   1aec4:	f3ef 8611 	mrs	r6, BASEPRI
   1aec8:	f383 8812 	msr	BASEPRI_MAX, r3
   1aecc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aed0:	481f      	ldr	r0, [pc, #124]	; (1af50 <z_thread_timeout+0x94>)
   1aed2:	f7fe f823 	bl	18f1c <z_spin_lock_valid>
   1aed6:	b968      	cbnz	r0, 1aef4 <z_thread_timeout+0x38>
   1aed8:	2394      	movs	r3, #148	; 0x94
   1aeda:	4a1e      	ldr	r2, [pc, #120]	; (1af54 <z_thread_timeout+0x98>)
   1aedc:	491e      	ldr	r1, [pc, #120]	; (1af58 <z_thread_timeout+0x9c>)
   1aede:	481f      	ldr	r0, [pc, #124]	; (1af5c <z_thread_timeout+0xa0>)
   1aee0:	f001 fe03 	bl	1caea <assert_print>
   1aee4:	491a      	ldr	r1, [pc, #104]	; (1af50 <z_thread_timeout+0x94>)
   1aee6:	481e      	ldr	r0, [pc, #120]	; (1af60 <z_thread_timeout+0xa4>)
   1aee8:	f001 fdff 	bl	1caea <assert_print>
   1aeec:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aeee:	4819      	ldr	r0, [pc, #100]	; (1af54 <z_thread_timeout+0x98>)
   1aef0:	f001 fdf4 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1aef4:	4816      	ldr	r0, [pc, #88]	; (1af50 <z_thread_timeout+0x94>)
   1aef6:	f7fe f82d 	bl	18f54 <z_spin_lock_set_owner>
		if (!killed) {
   1aefa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1aefe:	f013 0f28 	tst.w	r3, #40	; 0x28
   1af02:	d110      	bne.n	1af26 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   1af04:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1af08:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1af0c:	b113      	cbz	r3, 1af14 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   1af0e:	4628      	mov	r0, r5
   1af10:	f7ff ff6a 	bl	1ade8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1af14:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   1af18:	4628      	mov	r0, r5
   1af1a:	f023 0314 	bic.w	r3, r3, #20
   1af1e:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1af22:	f7ff f9e9 	bl	1a2f8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af26:	480a      	ldr	r0, [pc, #40]	; (1af50 <z_thread_timeout+0x94>)
   1af28:	f7fe f806 	bl	18f38 <z_spin_unlock_valid>
   1af2c:	b958      	cbnz	r0, 1af46 <z_thread_timeout+0x8a>
   1af2e:	23c2      	movs	r3, #194	; 0xc2
   1af30:	4a08      	ldr	r2, [pc, #32]	; (1af54 <z_thread_timeout+0x98>)
   1af32:	490c      	ldr	r1, [pc, #48]	; (1af64 <z_thread_timeout+0xa8>)
   1af34:	4809      	ldr	r0, [pc, #36]	; (1af5c <z_thread_timeout+0xa0>)
   1af36:	f001 fdd8 	bl	1caea <assert_print>
   1af3a:	4905      	ldr	r1, [pc, #20]	; (1af50 <z_thread_timeout+0x94>)
   1af3c:	480a      	ldr	r0, [pc, #40]	; (1af68 <z_thread_timeout+0xac>)
   1af3e:	f001 fdd4 	bl	1caea <assert_print>
   1af42:	21c2      	movs	r1, #194	; 0xc2
   1af44:	e7d3      	b.n	1aeee <z_thread_timeout+0x32>
	__asm__ volatile(
   1af46:	f386 8811 	msr	BASEPRI, r6
   1af4a:	f3bf 8f6f 	isb	sy
}
   1af4e:	bd70      	pop	{r4, r5, r6, pc}
   1af50:	20009c44 	.word	0x20009c44
   1af54:	0002197b 	.word	0x0002197b
   1af58:	000219d4 	.word	0x000219d4
   1af5c:	00021547 	.word	0x00021547
   1af60:	000219e9 	.word	0x000219e9
   1af64:	000219a8 	.word	0x000219a8
   1af68:	000219bf 	.word	0x000219bf

0001af6c <z_unpend1_no_timeout>:
{
   1af6c:	b570      	push	{r4, r5, r6, lr}
   1af6e:	4605      	mov	r5, r0
	__asm__ volatile(
   1af70:	f04f 0320 	mov.w	r3, #32
   1af74:	f3ef 8611 	mrs	r6, BASEPRI
   1af78:	f383 8812 	msr	BASEPRI_MAX, r3
   1af7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1af80:	4819      	ldr	r0, [pc, #100]	; (1afe8 <z_unpend1_no_timeout+0x7c>)
   1af82:	f7fd ffcb 	bl	18f1c <z_spin_lock_valid>
   1af86:	b968      	cbnz	r0, 1afa4 <z_unpend1_no_timeout+0x38>
   1af88:	2394      	movs	r3, #148	; 0x94
   1af8a:	4a18      	ldr	r2, [pc, #96]	; (1afec <z_unpend1_no_timeout+0x80>)
   1af8c:	4918      	ldr	r1, [pc, #96]	; (1aff0 <z_unpend1_no_timeout+0x84>)
   1af8e:	4819      	ldr	r0, [pc, #100]	; (1aff4 <z_unpend1_no_timeout+0x88>)
   1af90:	f001 fdab 	bl	1caea <assert_print>
   1af94:	4914      	ldr	r1, [pc, #80]	; (1afe8 <z_unpend1_no_timeout+0x7c>)
   1af96:	4818      	ldr	r0, [pc, #96]	; (1aff8 <z_unpend1_no_timeout+0x8c>)
   1af98:	f001 fda7 	bl	1caea <assert_print>
   1af9c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af9e:	4813      	ldr	r0, [pc, #76]	; (1afec <z_unpend1_no_timeout+0x80>)
   1afa0:	f001 fd9c 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1afa4:	4810      	ldr	r0, [pc, #64]	; (1afe8 <z_unpend1_no_timeout+0x7c>)
   1afa6:	f7fd ffd5 	bl	18f54 <z_spin_lock_set_owner>
	return list->head == list;
   1afaa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afac:	42a5      	cmp	r5, r4
   1afae:	d013      	beq.n	1afd8 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   1afb0:	b114      	cbz	r4, 1afb8 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   1afb2:	4620      	mov	r0, r4
   1afb4:	f7ff ff18 	bl	1ade8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1afb8:	480b      	ldr	r0, [pc, #44]	; (1afe8 <z_unpend1_no_timeout+0x7c>)
   1afba:	f7fd ffbd 	bl	18f38 <z_spin_unlock_valid>
   1afbe:	b968      	cbnz	r0, 1afdc <z_unpend1_no_timeout+0x70>
   1afc0:	23c2      	movs	r3, #194	; 0xc2
   1afc2:	4a0a      	ldr	r2, [pc, #40]	; (1afec <z_unpend1_no_timeout+0x80>)
   1afc4:	490d      	ldr	r1, [pc, #52]	; (1affc <z_unpend1_no_timeout+0x90>)
   1afc6:	480b      	ldr	r0, [pc, #44]	; (1aff4 <z_unpend1_no_timeout+0x88>)
   1afc8:	f001 fd8f 	bl	1caea <assert_print>
   1afcc:	4906      	ldr	r1, [pc, #24]	; (1afe8 <z_unpend1_no_timeout+0x7c>)
   1afce:	480c      	ldr	r0, [pc, #48]	; (1b000 <z_unpend1_no_timeout+0x94>)
   1afd0:	f001 fd8b 	bl	1caea <assert_print>
   1afd4:	21c2      	movs	r1, #194	; 0xc2
   1afd6:	e7e2      	b.n	1af9e <z_unpend1_no_timeout+0x32>
   1afd8:	2400      	movs	r4, #0
   1afda:	e7ed      	b.n	1afb8 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   1afdc:	f386 8811 	msr	BASEPRI, r6
   1afe0:	f3bf 8f6f 	isb	sy
}
   1afe4:	4620      	mov	r0, r4
   1afe6:	bd70      	pop	{r4, r5, r6, pc}
   1afe8:	20009c44 	.word	0x20009c44
   1afec:	0002197b 	.word	0x0002197b
   1aff0:	000219d4 	.word	0x000219d4
   1aff4:	00021547 	.word	0x00021547
   1aff8:	000219e9 	.word	0x000219e9
   1affc:	000219a8 	.word	0x000219a8
   1b000:	000219bf 	.word	0x000219bf

0001b004 <z_unpend_first_thread>:
{
   1b004:	b570      	push	{r4, r5, r6, lr}
   1b006:	4605      	mov	r5, r0
	__asm__ volatile(
   1b008:	f04f 0320 	mov.w	r3, #32
   1b00c:	f3ef 8611 	mrs	r6, BASEPRI
   1b010:	f383 8812 	msr	BASEPRI_MAX, r3
   1b014:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b018:	481b      	ldr	r0, [pc, #108]	; (1b088 <z_unpend_first_thread+0x84>)
   1b01a:	f7fd ff7f 	bl	18f1c <z_spin_lock_valid>
   1b01e:	b968      	cbnz	r0, 1b03c <z_unpend_first_thread+0x38>
   1b020:	2394      	movs	r3, #148	; 0x94
   1b022:	4a1a      	ldr	r2, [pc, #104]	; (1b08c <z_unpend_first_thread+0x88>)
   1b024:	491a      	ldr	r1, [pc, #104]	; (1b090 <z_unpend_first_thread+0x8c>)
   1b026:	481b      	ldr	r0, [pc, #108]	; (1b094 <z_unpend_first_thread+0x90>)
   1b028:	f001 fd5f 	bl	1caea <assert_print>
   1b02c:	4916      	ldr	r1, [pc, #88]	; (1b088 <z_unpend_first_thread+0x84>)
   1b02e:	481a      	ldr	r0, [pc, #104]	; (1b098 <z_unpend_first_thread+0x94>)
   1b030:	f001 fd5b 	bl	1caea <assert_print>
   1b034:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b036:	4815      	ldr	r0, [pc, #84]	; (1b08c <z_unpend_first_thread+0x88>)
   1b038:	f001 fd50 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1b03c:	4812      	ldr	r0, [pc, #72]	; (1b088 <z_unpend_first_thread+0x84>)
   1b03e:	f7fd ff89 	bl	18f54 <z_spin_lock_set_owner>
	return list->head == list;
   1b042:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b044:	42a5      	cmp	r5, r4
   1b046:	d017      	beq.n	1b078 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   1b048:	b134      	cbz	r4, 1b058 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   1b04a:	4620      	mov	r0, r4
   1b04c:	f7ff fecc 	bl	1ade8 <unpend_thread_no_timeout>
   1b050:	f104 0018 	add.w	r0, r4, #24
   1b054:	f000 fc0c 	bl	1b870 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b058:	480b      	ldr	r0, [pc, #44]	; (1b088 <z_unpend_first_thread+0x84>)
   1b05a:	f7fd ff6d 	bl	18f38 <z_spin_unlock_valid>
   1b05e:	b968      	cbnz	r0, 1b07c <z_unpend_first_thread+0x78>
   1b060:	23c2      	movs	r3, #194	; 0xc2
   1b062:	4a0a      	ldr	r2, [pc, #40]	; (1b08c <z_unpend_first_thread+0x88>)
   1b064:	490d      	ldr	r1, [pc, #52]	; (1b09c <z_unpend_first_thread+0x98>)
   1b066:	480b      	ldr	r0, [pc, #44]	; (1b094 <z_unpend_first_thread+0x90>)
   1b068:	f001 fd3f 	bl	1caea <assert_print>
   1b06c:	4906      	ldr	r1, [pc, #24]	; (1b088 <z_unpend_first_thread+0x84>)
   1b06e:	480c      	ldr	r0, [pc, #48]	; (1b0a0 <z_unpend_first_thread+0x9c>)
   1b070:	f001 fd3b 	bl	1caea <assert_print>
   1b074:	21c2      	movs	r1, #194	; 0xc2
   1b076:	e7de      	b.n	1b036 <z_unpend_first_thread+0x32>
   1b078:	2400      	movs	r4, #0
   1b07a:	e7ed      	b.n	1b058 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   1b07c:	f386 8811 	msr	BASEPRI, r6
   1b080:	f3bf 8f6f 	isb	sy
}
   1b084:	4620      	mov	r0, r4
   1b086:	bd70      	pop	{r4, r5, r6, pc}
   1b088:	20009c44 	.word	0x20009c44
   1b08c:	0002197b 	.word	0x0002197b
   1b090:	000219d4 	.word	0x000219d4
   1b094:	00021547 	.word	0x00021547
   1b098:	000219e9 	.word	0x000219e9
   1b09c:	000219a8 	.word	0x000219a8
   1b0a0:	000219bf 	.word	0x000219bf

0001b0a4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b0a4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b0a6:	4b04      	ldr	r3, [pc, #16]	; (1b0b8 <z_sched_init+0x14>)
   1b0a8:	4608      	mov	r0, r1
   1b0aa:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1b0ae:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1b0b2:	f7ff b96b 	b.w	1a38c <k_sched_time_slice_set>
   1b0b6:	bf00      	nop
   1b0b8:	20009bfc 	.word	0x20009bfc

0001b0bc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0be:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1b0c2:	b16b      	cbz	r3, 1b0e0 <z_impl_k_yield+0x24>
   1b0c4:	493c      	ldr	r1, [pc, #240]	; (1b1b8 <z_impl_k_yield+0xfc>)
   1b0c6:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   1b0ca:	4a3c      	ldr	r2, [pc, #240]	; (1b1bc <z_impl_k_yield+0x100>)
   1b0cc:	483c      	ldr	r0, [pc, #240]	; (1b1c0 <z_impl_k_yield+0x104>)
   1b0ce:	f001 fd0c 	bl	1caea <assert_print>
   1b0d2:	483c      	ldr	r0, [pc, #240]	; (1b1c4 <z_impl_k_yield+0x108>)
   1b0d4:	f001 fd09 	bl	1caea <assert_print>
   1b0d8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b0dc:	4837      	ldr	r0, [pc, #220]	; (1b1bc <z_impl_k_yield+0x100>)
   1b0de:	e017      	b.n	1b110 <z_impl_k_yield+0x54>
	__asm__ volatile(
   1b0e0:	f04f 0320 	mov.w	r3, #32
   1b0e4:	f3ef 8611 	mrs	r6, BASEPRI
   1b0e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b0f0:	4835      	ldr	r0, [pc, #212]	; (1b1c8 <z_impl_k_yield+0x10c>)
   1b0f2:	f7fd ff13 	bl	18f1c <z_spin_lock_valid>
   1b0f6:	b968      	cbnz	r0, 1b114 <z_impl_k_yield+0x58>
   1b0f8:	2394      	movs	r3, #148	; 0x94
   1b0fa:	4a34      	ldr	r2, [pc, #208]	; (1b1cc <z_impl_k_yield+0x110>)
   1b0fc:	4934      	ldr	r1, [pc, #208]	; (1b1d0 <z_impl_k_yield+0x114>)
   1b0fe:	4830      	ldr	r0, [pc, #192]	; (1b1c0 <z_impl_k_yield+0x104>)
   1b100:	f001 fcf3 	bl	1caea <assert_print>
   1b104:	4930      	ldr	r1, [pc, #192]	; (1b1c8 <z_impl_k_yield+0x10c>)
   1b106:	4833      	ldr	r0, [pc, #204]	; (1b1d4 <z_impl_k_yield+0x118>)
   1b108:	f001 fcef 	bl	1caea <assert_print>
   1b10c:	2194      	movs	r1, #148	; 0x94
   1b10e:	482f      	ldr	r0, [pc, #188]	; (1b1cc <z_impl_k_yield+0x110>)
   1b110:	f001 fce4 	bl	1cadc <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1b114:	4c30      	ldr	r4, [pc, #192]	; (1b1d8 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   1b116:	482c      	ldr	r0, [pc, #176]	; (1b1c8 <z_impl_k_yield+0x10c>)
   1b118:	f7fd ff1c 	bl	18f54 <z_spin_lock_set_owner>
   1b11c:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   1b11e:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b122:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b124:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b12a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b12c:	f7ff fb92 	bl	1a854 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   1b130:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b132:	7b5a      	ldrb	r2, [r3, #13]
   1b134:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b138:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b13a:	4a28      	ldr	r2, [pc, #160]	; (1b1dc <z_impl_k_yield+0x120>)
   1b13c:	4293      	cmp	r3, r2
   1b13e:	d107      	bne.n	1b150 <z_impl_k_yield+0x94>
   1b140:	4927      	ldr	r1, [pc, #156]	; (1b1e0 <z_impl_k_yield+0x124>)
   1b142:	23ba      	movs	r3, #186	; 0xba
   1b144:	4a1d      	ldr	r2, [pc, #116]	; (1b1bc <z_impl_k_yield+0x100>)
   1b146:	481e      	ldr	r0, [pc, #120]	; (1b1c0 <z_impl_k_yield+0x104>)
   1b148:	f001 fccf 	bl	1caea <assert_print>
   1b14c:	21ba      	movs	r1, #186	; 0xba
   1b14e:	e7c5      	b.n	1b0dc <z_impl_k_yield+0x20>
	return list->head == list;
   1b150:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   1b152:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b154:	42aa      	cmp	r2, r5
   1b156:	bf08      	it	eq
   1b158:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b15a:	b922      	cbnz	r2, 1b166 <z_impl_k_yield+0xaa>
	node->prev = tail;
   1b15c:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   1b160:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1b162:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b164:	e00c      	b.n	1b180 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   1b166:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1b16a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1b16e:	42b8      	cmp	r0, r7
   1b170:	d019      	beq.n	1b1a6 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b172:	4287      	cmp	r7, r0
   1b174:	dd17      	ble.n	1b1a6 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   1b176:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b178:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1b17c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b17e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1b180:	2001      	movs	r0, #1
   1b182:	f7ff f885 	bl	1a290 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b186:	4810      	ldr	r0, [pc, #64]	; (1b1c8 <z_impl_k_yield+0x10c>)
   1b188:	f7fd fed6 	bl	18f38 <z_spin_unlock_valid>
   1b18c:	b978      	cbnz	r0, 1b1ae <z_impl_k_yield+0xf2>
   1b18e:	23e1      	movs	r3, #225	; 0xe1
   1b190:	4a0e      	ldr	r2, [pc, #56]	; (1b1cc <z_impl_k_yield+0x110>)
   1b192:	4914      	ldr	r1, [pc, #80]	; (1b1e4 <z_impl_k_yield+0x128>)
   1b194:	480a      	ldr	r0, [pc, #40]	; (1b1c0 <z_impl_k_yield+0x104>)
   1b196:	f001 fca8 	bl	1caea <assert_print>
   1b19a:	490b      	ldr	r1, [pc, #44]	; (1b1c8 <z_impl_k_yield+0x10c>)
   1b19c:	4812      	ldr	r0, [pc, #72]	; (1b1e8 <z_impl_k_yield+0x12c>)
   1b19e:	f001 fca4 	bl	1caea <assert_print>
   1b1a2:	21e1      	movs	r1, #225	; 0xe1
   1b1a4:	e7b3      	b.n	1b10e <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   1b1a6:	428a      	cmp	r2, r1
   1b1a8:	d0d8      	beq.n	1b15c <z_impl_k_yield+0xa0>
   1b1aa:	6812      	ldr	r2, [r2, #0]
   1b1ac:	e7d5      	b.n	1b15a <z_impl_k_yield+0x9e>
   1b1ae:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1b1b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b1b4:	f7f1 be76 	b.w	cea4 <arch_swap>
   1b1b8:	00025122 	.word	0x00025122
   1b1bc:	0002538f 	.word	0x0002538f
   1b1c0:	00021547 	.word	0x00021547
   1b1c4:	00023bf8 	.word	0x00023bf8
   1b1c8:	20009c44 	.word	0x20009c44
   1b1cc:	0002197b 	.word	0x0002197b
   1b1d0:	000219d4 	.word	0x000219d4
   1b1d4:	000219e9 	.word	0x000219e9
   1b1d8:	20009bfc 	.word	0x20009bfc
   1b1dc:	20009540 	.word	0x20009540
   1b1e0:	000253d8 	.word	0x000253d8
   1b1e4:	000219a8 	.word	0x000219a8
   1b1e8:	000219bf 	.word	0x000219bf

0001b1ec <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1b1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1f0:	4605      	mov	r5, r0
   1b1f2:	460e      	mov	r6, r1
   1b1f4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b1f8:	b16b      	cbz	r3, 1b216 <z_tick_sleep+0x2a>
   1b1fa:	493f      	ldr	r1, [pc, #252]	; (1b2f8 <z_tick_sleep+0x10c>)
   1b1fc:	f240 538c 	movw	r3, #1420	; 0x58c
   1b200:	4a3e      	ldr	r2, [pc, #248]	; (1b2fc <z_tick_sleep+0x110>)
   1b202:	483f      	ldr	r0, [pc, #252]	; (1b300 <z_tick_sleep+0x114>)
   1b204:	f001 fc71 	bl	1caea <assert_print>
   1b208:	483e      	ldr	r0, [pc, #248]	; (1b304 <z_tick_sleep+0x118>)
   1b20a:	f001 fc6e 	bl	1caea <assert_print>
   1b20e:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b212:	483a      	ldr	r0, [pc, #232]	; (1b2fc <z_tick_sleep+0x110>)
   1b214:	e025      	b.n	1b262 <z_tick_sleep+0x76>
	if (ticks == 0) {
   1b216:	ea50 0301 	orrs.w	r3, r0, r1
   1b21a:	d103      	bne.n	1b224 <z_tick_sleep+0x38>
	z_impl_k_yield();
   1b21c:	f7ff ff4e 	bl	1b0bc <z_impl_k_yield>
		return 0;
   1b220:	2000      	movs	r0, #0
   1b222:	e066      	b.n	1b2f2 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   1b224:	1c82      	adds	r2, r0, #2
   1b226:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1b22a:	db1c      	blt.n	1b266 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b22c:	f004 ffa3 	bl	20176 <sys_clock_tick_get_32>
   1b230:	1944      	adds	r4, r0, r5
   1b232:	f04f 0320 	mov.w	r3, #32
   1b236:	f3ef 8811 	mrs	r8, BASEPRI
   1b23a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b23e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b242:	4831      	ldr	r0, [pc, #196]	; (1b308 <z_tick_sleep+0x11c>)
   1b244:	f7fd fe6a 	bl	18f1c <z_spin_lock_valid>
   1b248:	b988      	cbnz	r0, 1b26e <z_tick_sleep+0x82>
   1b24a:	2394      	movs	r3, #148	; 0x94
   1b24c:	4a2f      	ldr	r2, [pc, #188]	; (1b30c <z_tick_sleep+0x120>)
   1b24e:	4930      	ldr	r1, [pc, #192]	; (1b310 <z_tick_sleep+0x124>)
   1b250:	482b      	ldr	r0, [pc, #172]	; (1b300 <z_tick_sleep+0x114>)
   1b252:	f001 fc4a 	bl	1caea <assert_print>
   1b256:	492c      	ldr	r1, [pc, #176]	; (1b308 <z_tick_sleep+0x11c>)
   1b258:	482e      	ldr	r0, [pc, #184]	; (1b314 <z_tick_sleep+0x128>)
   1b25a:	f001 fc46 	bl	1caea <assert_print>
   1b25e:	2194      	movs	r1, #148	; 0x94
   1b260:	482a      	ldr	r0, [pc, #168]	; (1b30c <z_tick_sleep+0x120>)
   1b262:	f001 fc3b 	bl	1cadc <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1b266:	f06f 0401 	mvn.w	r4, #1
   1b26a:	1a24      	subs	r4, r4, r0
   1b26c:	e7e1      	b.n	1b232 <z_tick_sleep+0x46>
	pending_current = _current;
   1b26e:	4f2a      	ldr	r7, [pc, #168]	; (1b318 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   1b270:	4825      	ldr	r0, [pc, #148]	; (1b308 <z_tick_sleep+0x11c>)
   1b272:	f7fd fe6f 	bl	18f54 <z_spin_lock_set_owner>
   1b276:	68b8      	ldr	r0, [r7, #8]
   1b278:	4b28      	ldr	r3, [pc, #160]	; (1b31c <z_tick_sleep+0x130>)
   1b27a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b27c:	f7ff fbd2 	bl	1aa24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b280:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b282:	462a      	mov	r2, r5
   1b284:	4633      	mov	r3, r6
   1b286:	3018      	adds	r0, #24
   1b288:	4925      	ldr	r1, [pc, #148]	; (1b320 <z_tick_sleep+0x134>)
   1b28a:	f000 fa2b 	bl	1b6e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b28e:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b290:	481d      	ldr	r0, [pc, #116]	; (1b308 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b292:	7b53      	ldrb	r3, [r2, #13]
   1b294:	f043 0310 	orr.w	r3, r3, #16
   1b298:	7353      	strb	r3, [r2, #13]
   1b29a:	f7fd fe4d 	bl	18f38 <z_spin_unlock_valid>
   1b29e:	b958      	cbnz	r0, 1b2b8 <z_tick_sleep+0xcc>
   1b2a0:	23e1      	movs	r3, #225	; 0xe1
   1b2a2:	4a1a      	ldr	r2, [pc, #104]	; (1b30c <z_tick_sleep+0x120>)
   1b2a4:	491f      	ldr	r1, [pc, #124]	; (1b324 <z_tick_sleep+0x138>)
   1b2a6:	4816      	ldr	r0, [pc, #88]	; (1b300 <z_tick_sleep+0x114>)
   1b2a8:	f001 fc1f 	bl	1caea <assert_print>
   1b2ac:	4916      	ldr	r1, [pc, #88]	; (1b308 <z_tick_sleep+0x11c>)
   1b2ae:	481e      	ldr	r0, [pc, #120]	; (1b328 <z_tick_sleep+0x13c>)
   1b2b0:	f001 fc1b 	bl	1caea <assert_print>
   1b2b4:	21e1      	movs	r1, #225	; 0xe1
   1b2b6:	e7d3      	b.n	1b260 <z_tick_sleep+0x74>
   1b2b8:	4640      	mov	r0, r8
   1b2ba:	f7f1 fdf3 	bl	cea4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1b2be:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b2c0:	7b5b      	ldrb	r3, [r3, #13]
   1b2c2:	06db      	lsls	r3, r3, #27
   1b2c4:	d50c      	bpl.n	1b2e0 <z_tick_sleep+0xf4>
   1b2c6:	4919      	ldr	r1, [pc, #100]	; (1b32c <z_tick_sleep+0x140>)
   1b2c8:	f240 53ad 	movw	r3, #1453	; 0x5ad
   1b2cc:	4a0b      	ldr	r2, [pc, #44]	; (1b2fc <z_tick_sleep+0x110>)
   1b2ce:	480c      	ldr	r0, [pc, #48]	; (1b300 <z_tick_sleep+0x114>)
   1b2d0:	f001 fc0b 	bl	1caea <assert_print>
   1b2d4:	480b      	ldr	r0, [pc, #44]	; (1b304 <z_tick_sleep+0x118>)
   1b2d6:	f001 fc08 	bl	1caea <assert_print>
   1b2da:	f240 51ad 	movw	r1, #1453	; 0x5ad
   1b2de:	e798      	b.n	1b212 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b2e0:	f004 ff49 	bl	20176 <sys_clock_tick_get_32>
   1b2e4:	1a20      	subs	r0, r4, r0
   1b2e6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1b2ea:	2801      	cmp	r0, #1
   1b2ec:	f173 0300 	sbcs.w	r3, r3, #0
   1b2f0:	db96      	blt.n	1b220 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   1b2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b2f6:	bf00      	nop
   1b2f8:	00025122 	.word	0x00025122
   1b2fc:	0002538f 	.word	0x0002538f
   1b300:	00021547 	.word	0x00021547
   1b304:	00023bf8 	.word	0x00023bf8
   1b308:	20009c44 	.word	0x20009c44
   1b30c:	0002197b 	.word	0x0002197b
   1b310:	000219d4 	.word	0x000219d4
   1b314:	000219e9 	.word	0x000219e9
   1b318:	20009bfc 	.word	0x20009bfc
   1b31c:	20009c38 	.word	0x20009c38
   1b320:	0001aebd 	.word	0x0001aebd
   1b324:	000219a8 	.word	0x000219a8
   1b328:	000219bf 	.word	0x000219bf
   1b32c:	000254d4 	.word	0x000254d4

0001b330 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b330:	b508      	push	{r3, lr}
   1b332:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b336:	b173      	cbz	r3, 1b356 <z_impl_k_sleep+0x26>
   1b338:	4912      	ldr	r1, [pc, #72]	; (1b384 <z_impl_k_sleep+0x54>)
   1b33a:	f240 53bc 	movw	r3, #1468	; 0x5bc
   1b33e:	4a12      	ldr	r2, [pc, #72]	; (1b388 <z_impl_k_sleep+0x58>)
   1b340:	4812      	ldr	r0, [pc, #72]	; (1b38c <z_impl_k_sleep+0x5c>)
   1b342:	f001 fbd2 	bl	1caea <assert_print>
   1b346:	4812      	ldr	r0, [pc, #72]	; (1b390 <z_impl_k_sleep+0x60>)
   1b348:	f001 fbcf 	bl	1caea <assert_print>
   1b34c:	f240 51bc 	movw	r1, #1468	; 0x5bc
   1b350:	480d      	ldr	r0, [pc, #52]	; (1b388 <z_impl_k_sleep+0x58>)
   1b352:	f001 fbc3 	bl	1cadc <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b356:	f1b1 3fff 	cmp.w	r1, #4294967295
   1b35a:	bf08      	it	eq
   1b35c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1b360:	d106      	bne.n	1b370 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   1b362:	4b0c      	ldr	r3, [pc, #48]	; (1b394 <z_impl_k_sleep+0x64>)
   1b364:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b366:	f7ff fcd7 	bl	1ad18 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b36a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b36e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1b370:	f7ff ff3c 	bl	1b1ec <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1b374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b378:	fb80 0303 	smull	r0, r3, r0, r3
   1b37c:	0bc0      	lsrs	r0, r0, #15
   1b37e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1b382:	e7f4      	b.n	1b36e <z_impl_k_sleep+0x3e>
   1b384:	00025122 	.word	0x00025122
   1b388:	0002538f 	.word	0x0002538f
   1b38c:	00021547 	.word	0x00021547
   1b390:	00023bf8 	.word	0x00023bf8
   1b394:	20009bfc 	.word	0x20009bfc

0001b398 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b398:	4b01      	ldr	r3, [pc, #4]	; (1b3a0 <z_impl_z_current_get+0x8>)
   1b39a:	6898      	ldr	r0, [r3, #8]
   1b39c:	4770      	bx	lr
   1b39e:	bf00      	nop
   1b3a0:	20009bfc 	.word	0x20009bfc

0001b3a4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3a8:	4604      	mov	r4, r0
   1b3aa:	f04f 0320 	mov.w	r3, #32
   1b3ae:	f3ef 8611 	mrs	r6, BASEPRI
   1b3b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3ba:	4851      	ldr	r0, [pc, #324]	; (1b500 <z_thread_abort+0x15c>)
   1b3bc:	f7fd fdae 	bl	18f1c <z_spin_lock_valid>
   1b3c0:	b968      	cbnz	r0, 1b3de <z_thread_abort+0x3a>
   1b3c2:	2394      	movs	r3, #148	; 0x94
   1b3c4:	4a4f      	ldr	r2, [pc, #316]	; (1b504 <z_thread_abort+0x160>)
   1b3c6:	4950      	ldr	r1, [pc, #320]	; (1b508 <z_thread_abort+0x164>)
   1b3c8:	4850      	ldr	r0, [pc, #320]	; (1b50c <z_thread_abort+0x168>)
   1b3ca:	f001 fb8e 	bl	1caea <assert_print>
   1b3ce:	494c      	ldr	r1, [pc, #304]	; (1b500 <z_thread_abort+0x15c>)
   1b3d0:	484f      	ldr	r0, [pc, #316]	; (1b510 <z_thread_abort+0x16c>)
   1b3d2:	f001 fb8a 	bl	1caea <assert_print>
   1b3d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b3d8:	484a      	ldr	r0, [pc, #296]	; (1b504 <z_thread_abort+0x160>)
   1b3da:	f001 fb7f 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1b3de:	4848      	ldr	r0, [pc, #288]	; (1b500 <z_thread_abort+0x15c>)
   1b3e0:	f7fd fdb8 	bl	18f54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1b3e4:	7b23      	ldrb	r3, [r4, #12]
   1b3e6:	07d9      	lsls	r1, r3, #31
   1b3e8:	d522      	bpl.n	1b430 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b3ea:	4845      	ldr	r0, [pc, #276]	; (1b500 <z_thread_abort+0x15c>)
   1b3ec:	f7fd fda4 	bl	18f38 <z_spin_unlock_valid>
   1b3f0:	b958      	cbnz	r0, 1b40a <z_thread_abort+0x66>
   1b3f2:	23c2      	movs	r3, #194	; 0xc2
   1b3f4:	4a43      	ldr	r2, [pc, #268]	; (1b504 <z_thread_abort+0x160>)
   1b3f6:	4947      	ldr	r1, [pc, #284]	; (1b514 <z_thread_abort+0x170>)
   1b3f8:	4844      	ldr	r0, [pc, #272]	; (1b50c <z_thread_abort+0x168>)
   1b3fa:	f001 fb76 	bl	1caea <assert_print>
   1b3fe:	4940      	ldr	r1, [pc, #256]	; (1b500 <z_thread_abort+0x15c>)
   1b400:	4845      	ldr	r0, [pc, #276]	; (1b518 <z_thread_abort+0x174>)
   1b402:	f001 fb72 	bl	1caea <assert_print>
   1b406:	21c2      	movs	r1, #194	; 0xc2
   1b408:	e7e6      	b.n	1b3d8 <z_thread_abort+0x34>
	__asm__ volatile(
   1b40a:	f386 8811 	msr	BASEPRI, r6
   1b40e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   1b412:	f44f 63d9 	mov.w	r3, #1736	; 0x6c8
   1b416:	4a41      	ldr	r2, [pc, #260]	; (1b51c <z_thread_abort+0x178>)
   1b418:	4941      	ldr	r1, [pc, #260]	; (1b520 <z_thread_abort+0x17c>)
   1b41a:	483c      	ldr	r0, [pc, #240]	; (1b50c <z_thread_abort+0x168>)
   1b41c:	f001 fb65 	bl	1caea <assert_print>
   1b420:	4621      	mov	r1, r4
   1b422:	4840      	ldr	r0, [pc, #256]	; (1b524 <z_thread_abort+0x180>)
   1b424:	f001 fb61 	bl	1caea <assert_print>
   1b428:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   1b42c:	483b      	ldr	r0, [pc, #236]	; (1b51c <z_thread_abort+0x178>)
   1b42e:	e7d4      	b.n	1b3da <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1b430:	7b63      	ldrb	r3, [r4, #13]
   1b432:	071a      	lsls	r2, r3, #28
   1b434:	d50a      	bpl.n	1b44c <z_thread_abort+0xa8>
   1b436:	4832      	ldr	r0, [pc, #200]	; (1b500 <z_thread_abort+0x15c>)
   1b438:	f7fd fd7e 	bl	18f38 <z_spin_unlock_valid>
   1b43c:	2800      	cmp	r0, #0
   1b43e:	d0d8      	beq.n	1b3f2 <z_thread_abort+0x4e>
   1b440:	f386 8811 	msr	BASEPRI, r6
   1b444:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b44c:	f023 0220 	bic.w	r2, r3, #32
   1b450:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1b454:	09d2      	lsrs	r2, r2, #7
   1b456:	d12c      	bne.n	1b4b2 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b458:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1b45a:	68a3      	ldr	r3, [r4, #8]
   1b45c:	b113      	cbz	r3, 1b464 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   1b45e:	4620      	mov	r0, r4
   1b460:	f7ff fcc2 	bl	1ade8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1b464:	f104 0018 	add.w	r0, r4, #24
   1b468:	f000 fa02 	bl	1b870 <z_abort_timeout>
   1b46c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b470:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1b474:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b476:	42bd      	cmp	r5, r7
   1b478:	d000      	beq.n	1b47c <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b47a:	bb25      	cbnz	r5, 1b4c6 <z_thread_abort+0x122>
		update_cache(1);
   1b47c:	2001      	movs	r0, #1
   1b47e:	f7fe ff07 	bl	1a290 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1b482:	4b29      	ldr	r3, [pc, #164]	; (1b528 <z_thread_abort+0x184>)
   1b484:	689b      	ldr	r3, [r3, #8]
   1b486:	42a3      	cmp	r3, r4
   1b488:	d1d5      	bne.n	1b436 <z_thread_abort+0x92>
   1b48a:	f3ef 8305 	mrs	r3, IPSR
   1b48e:	2b00      	cmp	r3, #0
   1b490:	d1d1      	bne.n	1b436 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b492:	481b      	ldr	r0, [pc, #108]	; (1b500 <z_thread_abort+0x15c>)
   1b494:	f7fd fd50 	bl	18f38 <z_spin_unlock_valid>
   1b498:	bb10      	cbnz	r0, 1b4e0 <z_thread_abort+0x13c>
   1b49a:	23e1      	movs	r3, #225	; 0xe1
   1b49c:	4a19      	ldr	r2, [pc, #100]	; (1b504 <z_thread_abort+0x160>)
   1b49e:	491d      	ldr	r1, [pc, #116]	; (1b514 <z_thread_abort+0x170>)
   1b4a0:	481a      	ldr	r0, [pc, #104]	; (1b50c <z_thread_abort+0x168>)
   1b4a2:	f001 fb22 	bl	1caea <assert_print>
   1b4a6:	4916      	ldr	r1, [pc, #88]	; (1b500 <z_thread_abort+0x15c>)
   1b4a8:	481b      	ldr	r0, [pc, #108]	; (1b518 <z_thread_abort+0x174>)
   1b4aa:	f001 fb1e 	bl	1caea <assert_print>
   1b4ae:	21e1      	movs	r1, #225	; 0xe1
   1b4b0:	e792      	b.n	1b3d8 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b4b2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1b4b6:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   1b4ba:	4621      	mov	r1, r4
   1b4bc:	481b      	ldr	r0, [pc, #108]	; (1b52c <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b4be:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b4c0:	f7ff f9c8 	bl	1a854 <z_priq_dumb_remove>
}
   1b4c4:	e7c9      	b.n	1b45a <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   1b4c6:	4628      	mov	r0, r5
   1b4c8:	f7ff fc8e 	bl	1ade8 <unpend_thread_no_timeout>
   1b4cc:	f105 0018 	add.w	r0, r5, #24
   1b4d0:	f000 f9ce 	bl	1b870 <z_abort_timeout>
		ready_thread(thread);
   1b4d4:	4628      	mov	r0, r5
   1b4d6:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   1b4da:	f7fe ff0d 	bl	1a2f8 <ready_thread>
   1b4de:	e7c9      	b.n	1b474 <z_thread_abort+0xd0>
   1b4e0:	4630      	mov	r0, r6
   1b4e2:	f7f1 fcdf 	bl	cea4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1b4e6:	490e      	ldr	r1, [pc, #56]	; (1b520 <z_thread_abort+0x17c>)
   1b4e8:	f240 63f7 	movw	r3, #1783	; 0x6f7
   1b4ec:	4a0b      	ldr	r2, [pc, #44]	; (1b51c <z_thread_abort+0x178>)
   1b4ee:	4807      	ldr	r0, [pc, #28]	; (1b50c <z_thread_abort+0x168>)
   1b4f0:	f001 fafb 	bl	1caea <assert_print>
   1b4f4:	480e      	ldr	r0, [pc, #56]	; (1b530 <z_thread_abort+0x18c>)
   1b4f6:	f001 faf8 	bl	1caea <assert_print>
   1b4fa:	f240 61f7 	movw	r1, #1783	; 0x6f7
   1b4fe:	e795      	b.n	1b42c <z_thread_abort+0x88>
   1b500:	20009c44 	.word	0x20009c44
   1b504:	0002197b 	.word	0x0002197b
   1b508:	000219d4 	.word	0x000219d4
   1b50c:	00021547 	.word	0x00021547
   1b510:	000219e9 	.word	0x000219e9
   1b514:	000219a8 	.word	0x000219a8
   1b518:	000219bf 	.word	0x000219bf
   1b51c:	0002538f 	.word	0x0002538f
   1b520:	00024673 	.word	0x00024673
   1b524:	00025514 	.word	0x00025514
   1b528:	20009bfc 	.word	0x20009bfc
   1b52c:	20009c1c 	.word	0x20009c1c
   1b530:	00025533 	.word	0x00025533

0001b534 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1b534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b538:	4606      	mov	r6, r0
   1b53a:	4688      	mov	r8, r1
   1b53c:	4617      	mov	r7, r2
	__asm__ volatile(
   1b53e:	f04f 0320 	mov.w	r3, #32
   1b542:	f3ef 8911 	mrs	r9, BASEPRI
   1b546:	f383 8812 	msr	BASEPRI_MAX, r3
   1b54a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b54e:	4821      	ldr	r0, [pc, #132]	; (1b5d4 <z_sched_wake+0xa0>)
   1b550:	f7fd fce4 	bl	18f1c <z_spin_lock_valid>
   1b554:	4605      	mov	r5, r0
   1b556:	b968      	cbnz	r0, 1b574 <z_sched_wake+0x40>
   1b558:	2394      	movs	r3, #148	; 0x94
   1b55a:	4a1f      	ldr	r2, [pc, #124]	; (1b5d8 <z_sched_wake+0xa4>)
   1b55c:	491f      	ldr	r1, [pc, #124]	; (1b5dc <z_sched_wake+0xa8>)
   1b55e:	4820      	ldr	r0, [pc, #128]	; (1b5e0 <z_sched_wake+0xac>)
   1b560:	f001 fac3 	bl	1caea <assert_print>
   1b564:	491b      	ldr	r1, [pc, #108]	; (1b5d4 <z_sched_wake+0xa0>)
   1b566:	481f      	ldr	r0, [pc, #124]	; (1b5e4 <z_sched_wake+0xb0>)
   1b568:	f001 fabf 	bl	1caea <assert_print>
   1b56c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b56e:	481a      	ldr	r0, [pc, #104]	; (1b5d8 <z_sched_wake+0xa4>)
   1b570:	f001 fab4 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1b574:	4817      	ldr	r0, [pc, #92]	; (1b5d4 <z_sched_wake+0xa0>)
   1b576:	f7fd fced 	bl	18f54 <z_spin_lock_set_owner>
	return list->head == list;
   1b57a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b57c:	42a6      	cmp	r6, r4
   1b57e:	d01d      	beq.n	1b5bc <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   1b580:	b1f4      	cbz	r4, 1b5c0 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1b582:	4620      	mov	r0, r4
   1b584:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   1b588:	6167      	str	r7, [r4, #20]
   1b58a:	f7ff fc2d 	bl	1ade8 <unpend_thread_no_timeout>
   1b58e:	f104 0018 	add.w	r0, r4, #24
   1b592:	f000 f96d 	bl	1b870 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1b596:	4620      	mov	r0, r4
   1b598:	f7fe feae 	bl	1a2f8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b59c:	480d      	ldr	r0, [pc, #52]	; (1b5d4 <z_sched_wake+0xa0>)
   1b59e:	f7fd fccb 	bl	18f38 <z_spin_unlock_valid>
   1b5a2:	b978      	cbnz	r0, 1b5c4 <z_sched_wake+0x90>
   1b5a4:	23c2      	movs	r3, #194	; 0xc2
   1b5a6:	4a0c      	ldr	r2, [pc, #48]	; (1b5d8 <z_sched_wake+0xa4>)
   1b5a8:	490f      	ldr	r1, [pc, #60]	; (1b5e8 <z_sched_wake+0xb4>)
   1b5aa:	480d      	ldr	r0, [pc, #52]	; (1b5e0 <z_sched_wake+0xac>)
   1b5ac:	f001 fa9d 	bl	1caea <assert_print>
   1b5b0:	4908      	ldr	r1, [pc, #32]	; (1b5d4 <z_sched_wake+0xa0>)
   1b5b2:	480e      	ldr	r0, [pc, #56]	; (1b5ec <z_sched_wake+0xb8>)
   1b5b4:	f001 fa99 	bl	1caea <assert_print>
   1b5b8:	21c2      	movs	r1, #194	; 0xc2
   1b5ba:	e7d8      	b.n	1b56e <z_sched_wake+0x3a>
	bool ret = false;
   1b5bc:	2500      	movs	r5, #0
   1b5be:	e7ed      	b.n	1b59c <z_sched_wake+0x68>
   1b5c0:	4625      	mov	r5, r4
   1b5c2:	e7eb      	b.n	1b59c <z_sched_wake+0x68>
	__asm__ volatile(
   1b5c4:	f389 8811 	msr	BASEPRI, r9
   1b5c8:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   1b5cc:	4628      	mov	r0, r5
   1b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b5d2:	bf00      	nop
   1b5d4:	20009c44 	.word	0x20009c44
   1b5d8:	0002197b 	.word	0x0002197b
   1b5dc:	000219d4 	.word	0x000219d4
   1b5e0:	00021547 	.word	0x00021547
   1b5e4:	000219e9 	.word	0x000219e9
   1b5e8:	000219a8 	.word	0x000219a8
   1b5ec:	000219bf 	.word	0x000219bf

0001b5f0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1b5f0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b5f2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1b5f6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b5f8:	e9cd 6700 	strd	r6, r7, [sp]
   1b5fc:	f7ff fa84 	bl	1ab08 <z_pend_curr>

	if (data != NULL) {
   1b600:	b11c      	cbz	r4, 1b60a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1b602:	4b03      	ldr	r3, [pc, #12]	; (1b610 <z_sched_wait+0x20>)
   1b604:	689b      	ldr	r3, [r3, #8]
   1b606:	695b      	ldr	r3, [r3, #20]
   1b608:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1b60a:	b002      	add	sp, #8
   1b60c:	bdd0      	pop	{r4, r6, r7, pc}
   1b60e:	bf00      	nop
   1b610:	20009bfc 	.word	0x20009bfc

0001b614 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1b614:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1b616:	4806      	ldr	r0, [pc, #24]	; (1b630 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1b618:	4a06      	ldr	r2, [pc, #24]	; (1b634 <z_data_copy+0x20>)
   1b61a:	4907      	ldr	r1, [pc, #28]	; (1b638 <z_data_copy+0x24>)
   1b61c:	1a12      	subs	r2, r2, r0
   1b61e:	f004 fc94 	bl	1ff4a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1b626:	4a05      	ldr	r2, [pc, #20]	; (1b63c <z_data_copy+0x28>)
   1b628:	4905      	ldr	r1, [pc, #20]	; (1b640 <z_data_copy+0x2c>)
   1b62a:	4806      	ldr	r0, [pc, #24]	; (1b644 <z_data_copy+0x30>)
   1b62c:	f004 bc8d 	b.w	1ff4a <z_early_memcpy>
   1b630:	20008000 	.word	0x20008000
   1b634:	200087c8 	.word	0x200087c8
   1b638:	000258b0 	.word	0x000258b0
   1b63c:	00000000 	.word	0x00000000
   1b640:	000258b0 	.word	0x000258b0
   1b644:	20008000 	.word	0x20008000

0001b648 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1b648:	4b03      	ldr	r3, [pc, #12]	; (1b658 <elapsed+0x10>)
   1b64a:	681b      	ldr	r3, [r3, #0]
   1b64c:	b90b      	cbnz	r3, 1b652 <elapsed+0xa>
   1b64e:	f7fa bb4b 	b.w	15ce8 <sys_clock_elapsed>
}
   1b652:	2000      	movs	r0, #0
   1b654:	4770      	bx	lr
   1b656:	bf00      	nop
   1b658:	20009c48 	.word	0x20009c48

0001b65c <next_timeout>:

static int32_t next_timeout(void)
{
   1b65c:	b510      	push	{r4, lr}
	return list->head == list;
   1b65e:	4b11      	ldr	r3, [pc, #68]	; (1b6a4 <next_timeout+0x48>)
   1b660:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b662:	429c      	cmp	r4, r3
   1b664:	d10a      	bne.n	1b67c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1b666:	f7ff ffef 	bl	1b648 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1b66a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1b66e:	4b0e      	ldr	r3, [pc, #56]	; (1b6a8 <next_timeout+0x4c>)
   1b670:	691b      	ldr	r3, [r3, #16]
   1b672:	b113      	cbz	r3, 1b67a <next_timeout+0x1e>
   1b674:	4298      	cmp	r0, r3
   1b676:	bfa8      	it	ge
   1b678:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1b67a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1b67c:	f7ff ffe4 	bl	1b648 <elapsed>
	if ((to == NULL) ||
   1b680:	2c00      	cmp	r4, #0
   1b682:	d0f2      	beq.n	1b66a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1b684:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1b688:	1a1b      	subs	r3, r3, r0
   1b68a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1b68e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1b692:	f172 0100 	sbcs.w	r1, r2, #0
   1b696:	dae8      	bge.n	1b66a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1b698:	2a00      	cmp	r2, #0
   1b69a:	bfac      	ite	ge
   1b69c:	4618      	movge	r0, r3
   1b69e:	2000      	movlt	r0, #0
   1b6a0:	e7e5      	b.n	1b66e <next_timeout+0x12>
   1b6a2:	bf00      	nop
   1b6a4:	20008400 	.word	0x20008400
   1b6a8:	20009bfc 	.word	0x20009bfc

0001b6ac <remove_timeout>:
{
   1b6ac:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b6ae:	b170      	cbz	r0, 1b6ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1b6b0:	4b0b      	ldr	r3, [pc, #44]	; (1b6e0 <remove_timeout+0x34>)
   1b6b2:	685b      	ldr	r3, [r3, #4]
   1b6b4:	4298      	cmp	r0, r3
   1b6b6:	d00a      	beq.n	1b6ce <remove_timeout+0x22>
   1b6b8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1b6ba:	b143      	cbz	r3, 1b6ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1b6bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1b6c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b6c4:	1912      	adds	r2, r2, r4
   1b6c6:	eb41 0105 	adc.w	r1, r1, r5
   1b6ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   1b6ce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1b6d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b6d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b6d6:	2300      	movs	r3, #0
	node->prev = NULL;
   1b6d8:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b6dc:	bd30      	pop	{r4, r5, pc}
   1b6de:	bf00      	nop
   1b6e0:	20008400 	.word	0x20008400

0001b6e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b6e8:	bf08      	it	eq
   1b6ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1b6ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b6f2:	4604      	mov	r4, r0
   1b6f4:	4692      	mov	sl, r2
   1b6f6:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b6f8:	f000 809e 	beq.w	1b838 <z_add_timeout+0x154>
	return node->next != NULL;
   1b6fc:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1b6fe:	b166      	cbz	r6, 1b71a <z_add_timeout+0x36>
   1b700:	494e      	ldr	r1, [pc, #312]	; (1b83c <z_add_timeout+0x158>)
   1b702:	2363      	movs	r3, #99	; 0x63
   1b704:	4a4e      	ldr	r2, [pc, #312]	; (1b840 <z_add_timeout+0x15c>)
   1b706:	484f      	ldr	r0, [pc, #316]	; (1b844 <z_add_timeout+0x160>)
   1b708:	f001 f9ef 	bl	1caea <assert_print>
   1b70c:	484e      	ldr	r0, [pc, #312]	; (1b848 <z_add_timeout+0x164>)
   1b70e:	f001 f9ec 	bl	1caea <assert_print>
   1b712:	2163      	movs	r1, #99	; 0x63
   1b714:	484a      	ldr	r0, [pc, #296]	; (1b840 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b716:	f001 f9e1 	bl	1cadc <assert_post_action>
	to->fn = fn;
   1b71a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1b71c:	f04f 0320 	mov.w	r3, #32
   1b720:	f3ef 8711 	mrs	r7, BASEPRI
   1b724:	f383 8812 	msr	BASEPRI_MAX, r3
   1b728:	f3bf 8f6f 	isb	sy
   1b72c:	4847      	ldr	r0, [pc, #284]	; (1b84c <z_add_timeout+0x168>)
   1b72e:	f7fd fbf5 	bl	18f1c <z_spin_lock_valid>
   1b732:	b960      	cbnz	r0, 1b74e <z_add_timeout+0x6a>
   1b734:	2394      	movs	r3, #148	; 0x94
   1b736:	4a46      	ldr	r2, [pc, #280]	; (1b850 <z_add_timeout+0x16c>)
   1b738:	4946      	ldr	r1, [pc, #280]	; (1b854 <z_add_timeout+0x170>)
   1b73a:	4842      	ldr	r0, [pc, #264]	; (1b844 <z_add_timeout+0x160>)
   1b73c:	f001 f9d5 	bl	1caea <assert_print>
   1b740:	4942      	ldr	r1, [pc, #264]	; (1b84c <z_add_timeout+0x168>)
   1b742:	4845      	ldr	r0, [pc, #276]	; (1b858 <z_add_timeout+0x174>)
   1b744:	f001 f9d1 	bl	1caea <assert_print>
   1b748:	2194      	movs	r1, #148	; 0x94
   1b74a:	4841      	ldr	r0, [pc, #260]	; (1b850 <z_add_timeout+0x16c>)
   1b74c:	e7e3      	b.n	1b716 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   1b74e:	483f      	ldr	r0, [pc, #252]	; (1b84c <z_add_timeout+0x168>)
   1b750:	f7fd fc00 	bl	18f54 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1b754:	f1ba 3fff 	cmp.w	sl, #4294967295
   1b758:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1b75c:	da23      	bge.n	1b7a6 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1b75e:	f06f 0301 	mvn.w	r3, #1
   1b762:	493e      	ldr	r1, [pc, #248]	; (1b85c <z_add_timeout+0x178>)
   1b764:	e9d1 2000 	ldrd	r2, r0, [r1]
   1b768:	1a9b      	subs	r3, r3, r2
   1b76a:	f04f 32ff 	mov.w	r2, #4294967295
   1b76e:	eb62 0000 	sbc.w	r0, r2, r0
   1b772:	ebb3 030a 	subs.w	r3, r3, sl
   1b776:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1b77a:	2b01      	cmp	r3, #1
   1b77c:	f170 0200 	sbcs.w	r2, r0, #0
   1b780:	da01      	bge.n	1b786 <z_add_timeout+0xa2>
   1b782:	2301      	movs	r3, #1
   1b784:	4630      	mov	r0, r6
   1b786:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   1b78a:	4b35      	ldr	r3, [pc, #212]	; (1b860 <z_add_timeout+0x17c>)
   1b78c:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   1b78e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b792:	429a      	cmp	r2, r3
   1b794:	bf18      	it	ne
   1b796:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1b798:	b986      	cbnz	r6, 1b7bc <z_add_timeout+0xd8>
	node->prev = tail;
   1b79a:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   1b79e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1b7a2:	605c      	str	r4, [r3, #4]
}
   1b7a4:	e01c      	b.n	1b7e0 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   1b7a6:	f7ff ff4f 	bl	1b648 <elapsed>
   1b7aa:	f11a 0801 	adds.w	r8, sl, #1
   1b7ae:	f145 0500 	adc.w	r5, r5, #0
   1b7b2:	eb18 0300 	adds.w	r3, r8, r0
   1b7b6:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1b7ba:	e7e4      	b.n	1b786 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   1b7bc:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   1b7c0:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   1b7c4:	428a      	cmp	r2, r1
   1b7c6:	eb70 0e05 	sbcs.w	lr, r0, r5
   1b7ca:	da28      	bge.n	1b81e <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   1b7cc:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   1b7ce:	6872      	ldr	r2, [r6, #4]
   1b7d0:	eb65 0500 	sbc.w	r5, r5, r0
   1b7d4:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   1b7d8:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   1b7dc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b7de:	6074      	str	r4, [r6, #4]
	return list->head == list;
   1b7e0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b7e2:	429a      	cmp	r2, r3
   1b7e4:	d00b      	beq.n	1b7fe <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1b7e6:	4294      	cmp	r4, r2
   1b7e8:	d109      	bne.n	1b7fe <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1b7ea:	f7ff ff37 	bl	1b65c <next_timeout>

			if (next_time == 0 ||
   1b7ee:	b118      	cbz	r0, 1b7f8 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   1b7f0:	4b1c      	ldr	r3, [pc, #112]	; (1b864 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   1b7f2:	691b      	ldr	r3, [r3, #16]
   1b7f4:	4283      	cmp	r3, r0
   1b7f6:	d002      	beq.n	1b7fe <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   1b7f8:	2100      	movs	r1, #0
   1b7fa:	f7fa fa45 	bl	15c88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b7fe:	4813      	ldr	r0, [pc, #76]	; (1b84c <z_add_timeout+0x168>)
   1b800:	f7fd fb9a 	bl	18f38 <z_spin_unlock_valid>
   1b804:	b9a0      	cbnz	r0, 1b830 <z_add_timeout+0x14c>
   1b806:	23c2      	movs	r3, #194	; 0xc2
   1b808:	4a11      	ldr	r2, [pc, #68]	; (1b850 <z_add_timeout+0x16c>)
   1b80a:	4917      	ldr	r1, [pc, #92]	; (1b868 <z_add_timeout+0x184>)
   1b80c:	480d      	ldr	r0, [pc, #52]	; (1b844 <z_add_timeout+0x160>)
   1b80e:	f001 f96c 	bl	1caea <assert_print>
   1b812:	490e      	ldr	r1, [pc, #56]	; (1b84c <z_add_timeout+0x168>)
   1b814:	4815      	ldr	r0, [pc, #84]	; (1b86c <z_add_timeout+0x188>)
   1b816:	f001 f968 	bl	1caea <assert_print>
   1b81a:	21c2      	movs	r1, #194	; 0xc2
   1b81c:	e795      	b.n	1b74a <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   1b81e:	1a52      	subs	r2, r2, r1
   1b820:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   1b824:	4566      	cmp	r6, ip
   1b826:	e9c4 2004 	strd	r2, r0, [r4, #16]
   1b82a:	d0b6      	beq.n	1b79a <z_add_timeout+0xb6>
   1b82c:	6836      	ldr	r6, [r6, #0]
   1b82e:	e7b3      	b.n	1b798 <z_add_timeout+0xb4>
	__asm__ volatile(
   1b830:	f387 8811 	msr	BASEPRI, r7
   1b834:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1b838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b83c:	00025579 	.word	0x00025579
   1b840:	00025555 	.word	0x00025555
   1b844:	00021547 	.word	0x00021547
   1b848:	00023bf8 	.word	0x00023bf8
   1b84c:	20009c4c 	.word	0x20009c4c
   1b850:	0002197b 	.word	0x0002197b
   1b854:	000219d4 	.word	0x000219d4
   1b858:	000219e9 	.word	0x000219e9
   1b85c:	200096f8 	.word	0x200096f8
   1b860:	20008400 	.word	0x20008400
   1b864:	20009bfc 	.word	0x20009bfc
   1b868:	000219a8 	.word	0x000219a8
   1b86c:	000219bf 	.word	0x000219bf

0001b870 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1b870:	b538      	push	{r3, r4, r5, lr}
   1b872:	4604      	mov	r4, r0
	__asm__ volatile(
   1b874:	f04f 0320 	mov.w	r3, #32
   1b878:	f3ef 8511 	mrs	r5, BASEPRI
   1b87c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b880:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b884:	4819      	ldr	r0, [pc, #100]	; (1b8ec <z_abort_timeout+0x7c>)
   1b886:	f7fd fb49 	bl	18f1c <z_spin_lock_valid>
   1b88a:	b968      	cbnz	r0, 1b8a8 <z_abort_timeout+0x38>
   1b88c:	2394      	movs	r3, #148	; 0x94
   1b88e:	4a18      	ldr	r2, [pc, #96]	; (1b8f0 <z_abort_timeout+0x80>)
   1b890:	4918      	ldr	r1, [pc, #96]	; (1b8f4 <z_abort_timeout+0x84>)
   1b892:	4819      	ldr	r0, [pc, #100]	; (1b8f8 <z_abort_timeout+0x88>)
   1b894:	f001 f929 	bl	1caea <assert_print>
   1b898:	4914      	ldr	r1, [pc, #80]	; (1b8ec <z_abort_timeout+0x7c>)
   1b89a:	4818      	ldr	r0, [pc, #96]	; (1b8fc <z_abort_timeout+0x8c>)
   1b89c:	f001 f925 	bl	1caea <assert_print>
   1b8a0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b8a2:	4813      	ldr	r0, [pc, #76]	; (1b8f0 <z_abort_timeout+0x80>)
   1b8a4:	f001 f91a 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1b8a8:	4810      	ldr	r0, [pc, #64]	; (1b8ec <z_abort_timeout+0x7c>)
   1b8aa:	f7fd fb53 	bl	18f54 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1b8ae:	6823      	ldr	r3, [r4, #0]
   1b8b0:	b19b      	cbz	r3, 1b8da <z_abort_timeout+0x6a>
			remove_timeout(to);
   1b8b2:	4620      	mov	r0, r4
   1b8b4:	f7ff fefa 	bl	1b6ac <remove_timeout>
			ret = 0;
   1b8b8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b8ba:	480c      	ldr	r0, [pc, #48]	; (1b8ec <z_abort_timeout+0x7c>)
   1b8bc:	f7fd fb3c 	bl	18f38 <z_spin_unlock_valid>
   1b8c0:	b970      	cbnz	r0, 1b8e0 <z_abort_timeout+0x70>
   1b8c2:	23c2      	movs	r3, #194	; 0xc2
   1b8c4:	4a0a      	ldr	r2, [pc, #40]	; (1b8f0 <z_abort_timeout+0x80>)
   1b8c6:	490e      	ldr	r1, [pc, #56]	; (1b900 <z_abort_timeout+0x90>)
   1b8c8:	480b      	ldr	r0, [pc, #44]	; (1b8f8 <z_abort_timeout+0x88>)
   1b8ca:	f001 f90e 	bl	1caea <assert_print>
   1b8ce:	4907      	ldr	r1, [pc, #28]	; (1b8ec <z_abort_timeout+0x7c>)
   1b8d0:	480c      	ldr	r0, [pc, #48]	; (1b904 <z_abort_timeout+0x94>)
   1b8d2:	f001 f90a 	bl	1caea <assert_print>
   1b8d6:	21c2      	movs	r1, #194	; 0xc2
   1b8d8:	e7e3      	b.n	1b8a2 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   1b8da:	f06f 0415 	mvn.w	r4, #21
   1b8de:	e7ec      	b.n	1b8ba <z_abort_timeout+0x4a>
	__asm__ volatile(
   1b8e0:	f385 8811 	msr	BASEPRI, r5
   1b8e4:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1b8e8:	4620      	mov	r0, r4
   1b8ea:	bd38      	pop	{r3, r4, r5, pc}
   1b8ec:	20009c4c 	.word	0x20009c4c
   1b8f0:	0002197b 	.word	0x0002197b
   1b8f4:	000219d4 	.word	0x000219d4
   1b8f8:	00021547 	.word	0x00021547
   1b8fc:	000219e9 	.word	0x000219e9
   1b900:	000219a8 	.word	0x000219a8
   1b904:	000219bf 	.word	0x000219bf

0001b908 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1b908:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b90a:	f04f 0320 	mov.w	r3, #32
   1b90e:	f3ef 8511 	mrs	r5, BASEPRI
   1b912:	f383 8812 	msr	BASEPRI_MAX, r3
   1b916:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b91a:	4817      	ldr	r0, [pc, #92]	; (1b978 <z_get_next_timeout_expiry+0x70>)
   1b91c:	f7fd fafe 	bl	18f1c <z_spin_lock_valid>
   1b920:	b968      	cbnz	r0, 1b93e <z_get_next_timeout_expiry+0x36>
   1b922:	2394      	movs	r3, #148	; 0x94
   1b924:	4a15      	ldr	r2, [pc, #84]	; (1b97c <z_get_next_timeout_expiry+0x74>)
   1b926:	4916      	ldr	r1, [pc, #88]	; (1b980 <z_get_next_timeout_expiry+0x78>)
   1b928:	4816      	ldr	r0, [pc, #88]	; (1b984 <z_get_next_timeout_expiry+0x7c>)
   1b92a:	f001 f8de 	bl	1caea <assert_print>
   1b92e:	4912      	ldr	r1, [pc, #72]	; (1b978 <z_get_next_timeout_expiry+0x70>)
   1b930:	4815      	ldr	r0, [pc, #84]	; (1b988 <z_get_next_timeout_expiry+0x80>)
   1b932:	f001 f8da 	bl	1caea <assert_print>
   1b936:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b938:	4810      	ldr	r0, [pc, #64]	; (1b97c <z_get_next_timeout_expiry+0x74>)
   1b93a:	f001 f8cf 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1b93e:	480e      	ldr	r0, [pc, #56]	; (1b978 <z_get_next_timeout_expiry+0x70>)
   1b940:	f7fd fb08 	bl	18f54 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1b944:	f7ff fe8a 	bl	1b65c <next_timeout>
   1b948:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b94a:	480b      	ldr	r0, [pc, #44]	; (1b978 <z_get_next_timeout_expiry+0x70>)
   1b94c:	f7fd faf4 	bl	18f38 <z_spin_unlock_valid>
   1b950:	b958      	cbnz	r0, 1b96a <z_get_next_timeout_expiry+0x62>
   1b952:	23c2      	movs	r3, #194	; 0xc2
   1b954:	4a09      	ldr	r2, [pc, #36]	; (1b97c <z_get_next_timeout_expiry+0x74>)
   1b956:	490d      	ldr	r1, [pc, #52]	; (1b98c <z_get_next_timeout_expiry+0x84>)
   1b958:	480a      	ldr	r0, [pc, #40]	; (1b984 <z_get_next_timeout_expiry+0x7c>)
   1b95a:	f001 f8c6 	bl	1caea <assert_print>
   1b95e:	4906      	ldr	r1, [pc, #24]	; (1b978 <z_get_next_timeout_expiry+0x70>)
   1b960:	480b      	ldr	r0, [pc, #44]	; (1b990 <z_get_next_timeout_expiry+0x88>)
   1b962:	f001 f8c2 	bl	1caea <assert_print>
   1b966:	21c2      	movs	r1, #194	; 0xc2
   1b968:	e7e6      	b.n	1b938 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   1b96a:	f385 8811 	msr	BASEPRI, r5
   1b96e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1b972:	4620      	mov	r0, r4
   1b974:	bd38      	pop	{r3, r4, r5, pc}
   1b976:	bf00      	nop
   1b978:	20009c4c 	.word	0x20009c4c
   1b97c:	0002197b 	.word	0x0002197b
   1b980:	000219d4 	.word	0x000219d4
   1b984:	00021547 	.word	0x00021547
   1b988:	000219e9 	.word	0x000219e9
   1b98c:	000219a8 	.word	0x000219a8
   1b990:	000219bf 	.word	0x000219bf

0001b994 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1b994:	b570      	push	{r4, r5, r6, lr}
   1b996:	4604      	mov	r4, r0
   1b998:	460d      	mov	r5, r1
	__asm__ volatile(
   1b99a:	f04f 0320 	mov.w	r3, #32
   1b99e:	f3ef 8611 	mrs	r6, BASEPRI
   1b9a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b9aa:	481b      	ldr	r0, [pc, #108]	; (1ba18 <z_set_timeout_expiry+0x84>)
   1b9ac:	f7fd fab6 	bl	18f1c <z_spin_lock_valid>
   1b9b0:	b968      	cbnz	r0, 1b9ce <z_set_timeout_expiry+0x3a>
   1b9b2:	2394      	movs	r3, #148	; 0x94
   1b9b4:	4a19      	ldr	r2, [pc, #100]	; (1ba1c <z_set_timeout_expiry+0x88>)
   1b9b6:	491a      	ldr	r1, [pc, #104]	; (1ba20 <z_set_timeout_expiry+0x8c>)
   1b9b8:	481a      	ldr	r0, [pc, #104]	; (1ba24 <z_set_timeout_expiry+0x90>)
   1b9ba:	f001 f896 	bl	1caea <assert_print>
   1b9be:	4916      	ldr	r1, [pc, #88]	; (1ba18 <z_set_timeout_expiry+0x84>)
   1b9c0:	4819      	ldr	r0, [pc, #100]	; (1ba28 <z_set_timeout_expiry+0x94>)
   1b9c2:	f001 f892 	bl	1caea <assert_print>
   1b9c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b9c8:	4814      	ldr	r0, [pc, #80]	; (1ba1c <z_set_timeout_expiry+0x88>)
   1b9ca:	f001 f887 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1b9ce:	4812      	ldr	r0, [pc, #72]	; (1ba18 <z_set_timeout_expiry+0x84>)
   1b9d0:	f7fd fac0 	bl	18f54 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1b9d4:	f7ff fe42 	bl	1b65c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   1b9d8:	2801      	cmp	r0, #1
   1b9da:	dd07      	ble.n	1b9ec <z_set_timeout_expiry+0x58>
   1b9dc:	42a0      	cmp	r0, r4
   1b9de:	db05      	blt.n	1b9ec <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1b9e0:	42a0      	cmp	r0, r4
   1b9e2:	4629      	mov	r1, r5
   1b9e4:	bfa8      	it	ge
   1b9e6:	4620      	movge	r0, r4
   1b9e8:	f7fa f94e 	bl	15c88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b9ec:	480a      	ldr	r0, [pc, #40]	; (1ba18 <z_set_timeout_expiry+0x84>)
   1b9ee:	f7fd faa3 	bl	18f38 <z_spin_unlock_valid>
   1b9f2:	b958      	cbnz	r0, 1ba0c <z_set_timeout_expiry+0x78>
   1b9f4:	23c2      	movs	r3, #194	; 0xc2
   1b9f6:	4a09      	ldr	r2, [pc, #36]	; (1ba1c <z_set_timeout_expiry+0x88>)
   1b9f8:	490c      	ldr	r1, [pc, #48]	; (1ba2c <z_set_timeout_expiry+0x98>)
   1b9fa:	480a      	ldr	r0, [pc, #40]	; (1ba24 <z_set_timeout_expiry+0x90>)
   1b9fc:	f001 f875 	bl	1caea <assert_print>
   1ba00:	4905      	ldr	r1, [pc, #20]	; (1ba18 <z_set_timeout_expiry+0x84>)
   1ba02:	480b      	ldr	r0, [pc, #44]	; (1ba30 <z_set_timeout_expiry+0x9c>)
   1ba04:	f001 f871 	bl	1caea <assert_print>
   1ba08:	21c2      	movs	r1, #194	; 0xc2
   1ba0a:	e7dd      	b.n	1b9c8 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   1ba0c:	f386 8811 	msr	BASEPRI, r6
   1ba10:	f3bf 8f6f 	isb	sy
		}
	}
}
   1ba14:	bd70      	pop	{r4, r5, r6, pc}
   1ba16:	bf00      	nop
   1ba18:	20009c4c 	.word	0x20009c4c
   1ba1c:	0002197b 	.word	0x0002197b
   1ba20:	000219d4 	.word	0x000219d4
   1ba24:	00021547 	.word	0x00021547
   1ba28:	000219e9 	.word	0x000219e9
   1ba2c:	000219a8 	.word	0x000219a8
   1ba30:	000219bf 	.word	0x000219bf

0001ba34 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1ba34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ba38:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1ba3a:	f7fe ff7d 	bl	1a938 <z_time_slice>
	__asm__ volatile(
   1ba3e:	f04f 0320 	mov.w	r3, #32
   1ba42:	f3ef 8711 	mrs	r7, BASEPRI
   1ba46:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ba4e:	483f      	ldr	r0, [pc, #252]	; (1bb4c <sys_clock_announce+0x118>)
   1ba50:	f7fd fa64 	bl	18f1c <z_spin_lock_valid>
   1ba54:	b968      	cbnz	r0, 1ba72 <sys_clock_announce+0x3e>
   1ba56:	2394      	movs	r3, #148	; 0x94
   1ba58:	4a3d      	ldr	r2, [pc, #244]	; (1bb50 <sys_clock_announce+0x11c>)
   1ba5a:	493e      	ldr	r1, [pc, #248]	; (1bb54 <sys_clock_announce+0x120>)
   1ba5c:	483e      	ldr	r0, [pc, #248]	; (1bb58 <sys_clock_announce+0x124>)
   1ba5e:	f001 f844 	bl	1caea <assert_print>
   1ba62:	493a      	ldr	r1, [pc, #232]	; (1bb4c <sys_clock_announce+0x118>)
   1ba64:	483d      	ldr	r0, [pc, #244]	; (1bb5c <sys_clock_announce+0x128>)
   1ba66:	f001 f840 	bl	1caea <assert_print>
   1ba6a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ba6c:	4838      	ldr	r0, [pc, #224]	; (1bb50 <sys_clock_announce+0x11c>)
   1ba6e:	f001 f835 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1ba72:	4836      	ldr	r0, [pc, #216]	; (1bb4c <sys_clock_announce+0x118>)
   1ba74:	f7fd fa6e 	bl	18f54 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1ba78:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1bb60 <sys_clock_announce+0x12c>
	return list->head == list;
   1ba7c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1bb64 <sys_clock_announce+0x130>
   1ba80:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1ba84:	4a38      	ldr	r2, [pc, #224]	; (1bb68 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba86:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   1ba88:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   1ba8c:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   1ba90:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba94:	d00b      	beq.n	1baae <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ba96:	b155      	cbz	r5, 1baae <sys_clock_announce+0x7a>
   1ba98:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   1ba9c:	42b4      	cmp	r4, r6
   1ba9e:	eb71 0e00 	sbcs.w	lr, r1, r0
   1baa2:	da1c      	bge.n	1bade <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1baa4:	1b36      	subs	r6, r6, r4
   1baa6:	eb60 0001 	sbc.w	r0, r0, r1
   1baaa:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   1baae:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   1bab0:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   1bab4:	eb4c 0101 	adc.w	r1, ip, r1
   1bab8:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1babc:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   1bac0:	f7ff fdcc 	bl	1b65c <next_timeout>
   1bac4:	4621      	mov	r1, r4
   1bac6:	f7fa f8df 	bl	15c88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1baca:	4820      	ldr	r0, [pc, #128]	; (1bb4c <sys_clock_announce+0x118>)
   1bacc:	f7fd fa34 	bl	18f38 <z_spin_unlock_valid>
   1bad0:	b1a8      	cbz	r0, 1bafe <sys_clock_announce+0xca>
	__asm__ volatile(
   1bad2:	f387 8811 	msr	BASEPRI, r7
   1bad6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1bade:	18f3      	adds	r3, r6, r3
   1bae0:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   1bae4:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1bae8:	2200      	movs	r2, #0
   1baea:	2300      	movs	r3, #0
		remove_timeout(t);
   1baec:	4628      	mov	r0, r5
		t->dticks = 0;
   1baee:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   1baf2:	f7ff fddb 	bl	1b6ac <remove_timeout>
   1baf6:	4815      	ldr	r0, [pc, #84]	; (1bb4c <sys_clock_announce+0x118>)
   1baf8:	f7fd fa1e 	bl	18f38 <z_spin_unlock_valid>
   1bafc:	b958      	cbnz	r0, 1bb16 <sys_clock_announce+0xe2>
   1bafe:	23c2      	movs	r3, #194	; 0xc2
   1bb00:	4a13      	ldr	r2, [pc, #76]	; (1bb50 <sys_clock_announce+0x11c>)
   1bb02:	491a      	ldr	r1, [pc, #104]	; (1bb6c <sys_clock_announce+0x138>)
   1bb04:	4814      	ldr	r0, [pc, #80]	; (1bb58 <sys_clock_announce+0x124>)
   1bb06:	f000 fff0 	bl	1caea <assert_print>
   1bb0a:	4910      	ldr	r1, [pc, #64]	; (1bb4c <sys_clock_announce+0x118>)
   1bb0c:	4818      	ldr	r0, [pc, #96]	; (1bb70 <sys_clock_announce+0x13c>)
   1bb0e:	f000 ffec 	bl	1caea <assert_print>
   1bb12:	21c2      	movs	r1, #194	; 0xc2
   1bb14:	e7aa      	b.n	1ba6c <sys_clock_announce+0x38>
   1bb16:	f387 8811 	msr	BASEPRI, r7
   1bb1a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bb1e:	4628      	mov	r0, r5
   1bb20:	68ab      	ldr	r3, [r5, #8]
   1bb22:	4798      	blx	r3
	__asm__ volatile(
   1bb24:	f04f 0320 	mov.w	r3, #32
   1bb28:	f3ef 8711 	mrs	r7, BASEPRI
   1bb2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bb34:	4805      	ldr	r0, [pc, #20]	; (1bb4c <sys_clock_announce+0x118>)
   1bb36:	f7fd f9f1 	bl	18f1c <z_spin_lock_valid>
   1bb3a:	2800      	cmp	r0, #0
   1bb3c:	d08b      	beq.n	1ba56 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   1bb3e:	4803      	ldr	r0, [pc, #12]	; (1bb4c <sys_clock_announce+0x118>)
   1bb40:	f7fd fa08 	bl	18f54 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   1bb44:	f8d8 4000 	ldr.w	r4, [r8]
   1bb48:	1ba4      	subs	r4, r4, r6
   1bb4a:	e799      	b.n	1ba80 <sys_clock_announce+0x4c>
   1bb4c:	20009c4c 	.word	0x20009c4c
   1bb50:	0002197b 	.word	0x0002197b
   1bb54:	000219d4 	.word	0x000219d4
   1bb58:	00021547 	.word	0x00021547
   1bb5c:	000219e9 	.word	0x000219e9
   1bb60:	20009c48 	.word	0x20009c48
   1bb64:	20008400 	.word	0x20008400
   1bb68:	200096f8 	.word	0x200096f8
   1bb6c:	000219a8 	.word	0x000219a8
   1bb70:	000219bf 	.word	0x000219bf

0001bb74 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1bb74:	b570      	push	{r4, r5, r6, lr}
   1bb76:	f04f 0320 	mov.w	r3, #32
   1bb7a:	f3ef 8611 	mrs	r6, BASEPRI
   1bb7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bb86:	481a      	ldr	r0, [pc, #104]	; (1bbf0 <sys_clock_tick_get+0x7c>)
   1bb88:	f7fd f9c8 	bl	18f1c <z_spin_lock_valid>
   1bb8c:	b968      	cbnz	r0, 1bbaa <sys_clock_tick_get+0x36>
   1bb8e:	2394      	movs	r3, #148	; 0x94
   1bb90:	4a18      	ldr	r2, [pc, #96]	; (1bbf4 <sys_clock_tick_get+0x80>)
   1bb92:	4919      	ldr	r1, [pc, #100]	; (1bbf8 <sys_clock_tick_get+0x84>)
   1bb94:	4819      	ldr	r0, [pc, #100]	; (1bbfc <sys_clock_tick_get+0x88>)
   1bb96:	f000 ffa8 	bl	1caea <assert_print>
   1bb9a:	4915      	ldr	r1, [pc, #84]	; (1bbf0 <sys_clock_tick_get+0x7c>)
   1bb9c:	4818      	ldr	r0, [pc, #96]	; (1bc00 <sys_clock_tick_get+0x8c>)
   1bb9e:	f000 ffa4 	bl	1caea <assert_print>
   1bba2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bba4:	4813      	ldr	r0, [pc, #76]	; (1bbf4 <sys_clock_tick_get+0x80>)
   1bba6:	f000 ff99 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1bbaa:	4811      	ldr	r0, [pc, #68]	; (1bbf0 <sys_clock_tick_get+0x7c>)
   1bbac:	f7fd f9d2 	bl	18f54 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1bbb0:	f7ff fd4a 	bl	1b648 <elapsed>
   1bbb4:	4a13      	ldr	r2, [pc, #76]	; (1bc04 <sys_clock_tick_get+0x90>)
   1bbb6:	e9d2 4500 	ldrd	r4, r5, [r2]
   1bbba:	1904      	adds	r4, r0, r4
   1bbbc:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bbc0:	480b      	ldr	r0, [pc, #44]	; (1bbf0 <sys_clock_tick_get+0x7c>)
   1bbc2:	f7fd f9b9 	bl	18f38 <z_spin_unlock_valid>
   1bbc6:	b958      	cbnz	r0, 1bbe0 <sys_clock_tick_get+0x6c>
   1bbc8:	23c2      	movs	r3, #194	; 0xc2
   1bbca:	4a0a      	ldr	r2, [pc, #40]	; (1bbf4 <sys_clock_tick_get+0x80>)
   1bbcc:	490e      	ldr	r1, [pc, #56]	; (1bc08 <sys_clock_tick_get+0x94>)
   1bbce:	480b      	ldr	r0, [pc, #44]	; (1bbfc <sys_clock_tick_get+0x88>)
   1bbd0:	f000 ff8b 	bl	1caea <assert_print>
   1bbd4:	4906      	ldr	r1, [pc, #24]	; (1bbf0 <sys_clock_tick_get+0x7c>)
   1bbd6:	480d      	ldr	r0, [pc, #52]	; (1bc0c <sys_clock_tick_get+0x98>)
   1bbd8:	f000 ff87 	bl	1caea <assert_print>
   1bbdc:	21c2      	movs	r1, #194	; 0xc2
   1bbde:	e7e1      	b.n	1bba4 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   1bbe0:	f386 8811 	msr	BASEPRI, r6
   1bbe4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bbe8:	4620      	mov	r0, r4
   1bbea:	4629      	mov	r1, r5
   1bbec:	bd70      	pop	{r4, r5, r6, pc}
   1bbee:	bf00      	nop
   1bbf0:	20009c4c 	.word	0x20009c4c
   1bbf4:	0002197b 	.word	0x0002197b
   1bbf8:	000219d4 	.word	0x000219d4
   1bbfc:	00021547 	.word	0x00021547
   1bc00:	000219e9 	.word	0x000219e9
   1bc04:	200096f8 	.word	0x200096f8
   1bc08:	000219a8 	.word	0x000219a8
   1bc0c:	000219bf 	.word	0x000219bf

0001bc10 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bc10:	b570      	push	{r4, r5, r6, lr}
   1bc12:	4604      	mov	r4, r0
	__asm__ volatile(
   1bc14:	f04f 0320 	mov.w	r3, #32
   1bc18:	f3ef 8511 	mrs	r5, BASEPRI
   1bc1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bc24:	4849      	ldr	r0, [pc, #292]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bc26:	f7fd f979 	bl	18f1c <z_spin_lock_valid>
   1bc2a:	b968      	cbnz	r0, 1bc48 <z_timer_expiration_handler+0x38>
   1bc2c:	2394      	movs	r3, #148	; 0x94
   1bc2e:	4a48      	ldr	r2, [pc, #288]	; (1bd50 <z_timer_expiration_handler+0x140>)
   1bc30:	4948      	ldr	r1, [pc, #288]	; (1bd54 <z_timer_expiration_handler+0x144>)
   1bc32:	4849      	ldr	r0, [pc, #292]	; (1bd58 <z_timer_expiration_handler+0x148>)
   1bc34:	f000 ff59 	bl	1caea <assert_print>
   1bc38:	4944      	ldr	r1, [pc, #272]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bc3a:	4848      	ldr	r0, [pc, #288]	; (1bd5c <z_timer_expiration_handler+0x14c>)
   1bc3c:	f000 ff55 	bl	1caea <assert_print>
   1bc40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bc42:	4843      	ldr	r0, [pc, #268]	; (1bd50 <z_timer_expiration_handler+0x140>)
   1bc44:	f000 ff4a 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1bc48:	4840      	ldr	r0, [pc, #256]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bc4a:	f7fd f983 	bl	18f54 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bc4e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1bc52:	3301      	adds	r3, #1
   1bc54:	f142 0200 	adc.w	r2, r2, #0
   1bc58:	2b02      	cmp	r3, #2
   1bc5a:	f172 0200 	sbcs.w	r2, r2, #0
   1bc5e:	d322      	bcc.n	1bca6 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   1bc60:	f004 fa8d 	bl	2017e <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1bc64:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1bc68:	3001      	adds	r0, #1
   1bc6a:	f141 0100 	adc.w	r1, r1, #0
   1bc6e:	18c0      	adds	r0, r0, r3
   1bc70:	eb41 0102 	adc.w	r1, r1, r2
   1bc74:	2801      	cmp	r0, #1
   1bc76:	f171 0100 	sbcs.w	r1, r1, #0
   1bc7a:	db29      	blt.n	1bcd0 <z_timer_expiration_handler+0xc0>
   1bc7c:	f004 fa7f 	bl	2017e <z_impl_k_uptime_ticks>
   1bc80:	3001      	adds	r0, #1
   1bc82:	f141 0300 	adc.w	r3, r1, #0
   1bc86:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   1bc8a:	1880      	adds	r0, r0, r2
   1bc8c:	f06f 0201 	mvn.w	r2, #1
   1bc90:	eb43 0301 	adc.w	r3, r3, r1
   1bc94:	f04f 31ff 	mov.w	r1, #4294967295
   1bc98:	1a12      	subs	r2, r2, r0
   1bc9a:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bc9e:	4620      	mov	r0, r4
   1bca0:	492f      	ldr	r1, [pc, #188]	; (1bd60 <z_timer_expiration_handler+0x150>)
   1bca2:	f7ff fd1f 	bl	1b6e4 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1bca6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bca8:	3301      	adds	r3, #1
   1bcaa:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bcac:	6a23      	ldr	r3, [r4, #32]
   1bcae:	b35b      	cbz	r3, 1bd08 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bcb0:	4826      	ldr	r0, [pc, #152]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bcb2:	f7fd f941 	bl	18f38 <z_spin_unlock_valid>
   1bcb6:	b980      	cbnz	r0, 1bcda <z_timer_expiration_handler+0xca>
   1bcb8:	23c2      	movs	r3, #194	; 0xc2
   1bcba:	4a25      	ldr	r2, [pc, #148]	; (1bd50 <z_timer_expiration_handler+0x140>)
   1bcbc:	4929      	ldr	r1, [pc, #164]	; (1bd64 <z_timer_expiration_handler+0x154>)
   1bcbe:	4826      	ldr	r0, [pc, #152]	; (1bd58 <z_timer_expiration_handler+0x148>)
   1bcc0:	f000 ff13 	bl	1caea <assert_print>
   1bcc4:	4921      	ldr	r1, [pc, #132]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bcc6:	4828      	ldr	r0, [pc, #160]	; (1bd68 <z_timer_expiration_handler+0x158>)
   1bcc8:	f000 ff0f 	bl	1caea <assert_print>
   1bccc:	21c2      	movs	r1, #194	; 0xc2
   1bcce:	e7b8      	b.n	1bc42 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1bcd0:	f06f 0201 	mvn.w	r2, #1
   1bcd4:	f04f 33ff 	mov.w	r3, #4294967295
   1bcd8:	e7e1      	b.n	1bc9e <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   1bcda:	f385 8811 	msr	BASEPRI, r5
   1bcde:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1bce2:	4620      	mov	r0, r4
   1bce4:	6a23      	ldr	r3, [r4, #32]
   1bce6:	4798      	blx	r3
	__asm__ volatile(
   1bce8:	f04f 0320 	mov.w	r3, #32
   1bcec:	f3ef 8511 	mrs	r5, BASEPRI
   1bcf0:	f383 8812 	msr	BASEPRI_MAX, r3
   1bcf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bcf8:	4814      	ldr	r0, [pc, #80]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bcfa:	f7fd f90f 	bl	18f1c <z_spin_lock_valid>
   1bcfe:	2800      	cmp	r0, #0
   1bd00:	d094      	beq.n	1bc2c <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   1bd02:	4812      	ldr	r0, [pc, #72]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bd04:	f7fd f926 	bl	18f54 <z_spin_lock_set_owner>
	return list->head == list;
   1bd08:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd0c:	42a6      	cmp	r6, r4
   1bd0e:	d000      	beq.n	1bd12 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bd10:	b94e      	cbnz	r6, 1bd26 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bd12:	480e      	ldr	r0, [pc, #56]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bd14:	f7fd f910 	bl	18f38 <z_spin_unlock_valid>
   1bd18:	2800      	cmp	r0, #0
   1bd1a:	d0cd      	beq.n	1bcb8 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   1bd1c:	f385 8811 	msr	BASEPRI, r5
   1bd20:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1bd24:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   1bd26:	4630      	mov	r0, r6
   1bd28:	f7fe fbda 	bl	1a4e0 <z_unpend_thread_no_timeout>
   1bd2c:	2300      	movs	r3, #0
   1bd2e:	4807      	ldr	r0, [pc, #28]	; (1bd4c <z_timer_expiration_handler+0x13c>)
   1bd30:	67f3      	str	r3, [r6, #124]	; 0x7c
   1bd32:	f7fd f901 	bl	18f38 <z_spin_unlock_valid>
   1bd36:	2800      	cmp	r0, #0
   1bd38:	d0be      	beq.n	1bcb8 <z_timer_expiration_handler+0xa8>
   1bd3a:	f385 8811 	msr	BASEPRI, r5
   1bd3e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1bd42:	4630      	mov	r0, r6
}
   1bd44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1bd48:	f7fe bb84 	b.w	1a454 <z_ready_thread>
   1bd4c:	20009c50 	.word	0x20009c50
   1bd50:	0002197b 	.word	0x0002197b
   1bd54:	000219d4 	.word	0x000219d4
   1bd58:	00021547 	.word	0x00021547
   1bd5c:	000219e9 	.word	0x000219e9
   1bd60:	0001bc11 	.word	0x0001bc11
   1bd64:	000219a8 	.word	0x000219a8
   1bd68:	000219bf 	.word	0x000219bf

0001bd6c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bd70:	bf08      	it	eq
   1bd72:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1bd76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bd7a:	4619      	mov	r1, r3
   1bd7c:	4605      	mov	r5, r0
   1bd7e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   1bd82:	4614      	mov	r4, r2
   1bd84:	4691      	mov	r9, r2
   1bd86:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bd88:	d037      	beq.n	1bdfa <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1bd8a:	f1b0 3fff 	cmp.w	r0, #4294967295
   1bd8e:	bf08      	it	eq
   1bd90:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1bd94:	4637      	mov	r7, r6
   1bd96:	4682      	mov	sl, r0
   1bd98:	d011      	beq.n	1bdbe <z_impl_k_timer_start+0x52>
   1bd9a:	ea50 0306 	orrs.w	r3, r0, r6
   1bd9e:	d00e      	beq.n	1bdbe <z_impl_k_timer_start+0x52>
   1bda0:	1c72      	adds	r2, r6, #1
   1bda2:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   1bda6:	db0a      	blt.n	1bdbe <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   1bda8:	2e02      	cmp	r6, #2
   1bdaa:	4684      	mov	ip, r0
   1bdac:	f170 0000 	sbcs.w	r0, r0, #0
   1bdb0:	bfbc      	itt	lt
   1bdb2:	2702      	movlt	r7, #2
   1bdb4:	f04f 0c00 	movlt.w	ip, #0
   1bdb8:	3f01      	subs	r7, #1
   1bdba:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bdbe:	1c63      	adds	r3, r4, #1
   1bdc0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1bdc4:	db0a      	blt.n	1bddc <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bdc6:	2c01      	cmp	r4, #1
   1bdc8:	f171 0300 	sbcs.w	r3, r1, #0
   1bdcc:	4622      	mov	r2, r4
   1bdce:	bfbc      	itt	lt
   1bdd0:	2201      	movlt	r2, #1
   1bdd2:	2100      	movlt	r1, #0
   1bdd4:	f112 39ff 	adds.w	r9, r2, #4294967295
   1bdd8:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1bddc:	4628      	mov	r0, r5
   1bdde:	f7ff fd47 	bl	1b870 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1bde2:	2300      	movs	r3, #0
	timer->period = period;
   1bde4:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   1bde8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdea:	464a      	mov	r2, r9
   1bdec:	4643      	mov	r3, r8
   1bdee:	4628      	mov	r0, r5
		     duration);
}
   1bdf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdf4:	4902      	ldr	r1, [pc, #8]	; (1be00 <z_impl_k_timer_start+0x94>)
   1bdf6:	f7ff bc75 	b.w	1b6e4 <z_add_timeout>
}
   1bdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bdfe:	bf00      	nop
   1be00:	0001bc11 	.word	0x0001bc11

0001be04 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1be04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1be08:	2600      	movs	r6, #0
{
   1be0a:	4688      	mov	r8, r1
   1be0c:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   1be0e:	4604      	mov	r4, r0
	int events_registered = 0;
   1be10:	4637      	mov	r7, r6
	event->poller = NULL;
   1be12:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be14:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 1bfd4 <register_events+0x1d0>
{
   1be18:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1be1a:	4546      	cmp	r6, r8
   1be1c:	db03      	blt.n	1be26 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1be1e:	4638      	mov	r0, r7
   1be20:	b003      	add	sp, #12
   1be22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1be26:	f04f 0320 	mov.w	r3, #32
   1be2a:	f3ef 8b11 	mrs	fp, BASEPRI
   1be2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1be32:	f3bf 8f6f 	isb	sy
   1be36:	4648      	mov	r0, r9
   1be38:	f7fd f870 	bl	18f1c <z_spin_lock_valid>
   1be3c:	b960      	cbnz	r0, 1be58 <register_events+0x54>
   1be3e:	2394      	movs	r3, #148	; 0x94
   1be40:	4a65      	ldr	r2, [pc, #404]	; (1bfd8 <register_events+0x1d4>)
   1be42:	4966      	ldr	r1, [pc, #408]	; (1bfdc <register_events+0x1d8>)
   1be44:	4866      	ldr	r0, [pc, #408]	; (1bfe0 <register_events+0x1dc>)
   1be46:	f000 fe50 	bl	1caea <assert_print>
   1be4a:	4962      	ldr	r1, [pc, #392]	; (1bfd4 <register_events+0x1d0>)
   1be4c:	4865      	ldr	r0, [pc, #404]	; (1bfe4 <register_events+0x1e0>)
   1be4e:	f000 fe4c 	bl	1caea <assert_print>
   1be52:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be54:	4860      	ldr	r0, [pc, #384]	; (1bfd8 <register_events+0x1d4>)
   1be56:	e060      	b.n	1bf1a <register_events+0x116>
	z_spin_lock_set_owner(l);
   1be58:	4648      	mov	r0, r9
   1be5a:	f7fd f87b 	bl	18f54 <z_spin_lock_set_owner>
	switch (event->type) {
   1be5e:	7b63      	ldrb	r3, [r4, #13]
   1be60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1be64:	2b08      	cmp	r3, #8
   1be66:	d84a      	bhi.n	1befe <register_events+0xfa>
   1be68:	e8df f003 	tbb	[pc, r3]
   1be6c:	49053d2b 	.word	0x49053d2b
   1be70:	49494927 	.word	0x49494927
   1be74:	43          	.byte	0x43
   1be75:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1be76:	6923      	ldr	r3, [r4, #16]
   1be78:	689b      	ldr	r3, [r3, #8]
   1be7a:	b313      	cbz	r3, 1bec2 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1be7c:	2302      	movs	r3, #2
	event->state |= state;
   1be7e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1be80:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   1be84:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1be88:	430b      	orrs	r3, r1
   1be8a:	f363 3294 	bfi	r2, r3, #14, #7
   1be8e:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1be90:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be94:	4648      	mov	r0, r9
   1be96:	f7fd f84f 	bl	18f38 <z_spin_unlock_valid>
   1be9a:	3414      	adds	r4, #20
   1be9c:	2800      	cmp	r0, #0
   1be9e:	f040 8092 	bne.w	1bfc6 <register_events+0x1c2>
   1bea2:	23c2      	movs	r3, #194	; 0xc2
   1bea4:	4a4c      	ldr	r2, [pc, #304]	; (1bfd8 <register_events+0x1d4>)
   1bea6:	4950      	ldr	r1, [pc, #320]	; (1bfe8 <register_events+0x1e4>)
   1bea8:	484d      	ldr	r0, [pc, #308]	; (1bfe0 <register_events+0x1dc>)
   1beaa:	f000 fe1e 	bl	1caea <assert_print>
   1beae:	4949      	ldr	r1, [pc, #292]	; (1bfd4 <register_events+0x1d0>)
   1beb0:	484e      	ldr	r0, [pc, #312]	; (1bfec <register_events+0x1e8>)
   1beb2:	f000 fe1a 	bl	1caea <assert_print>
   1beb6:	21c2      	movs	r1, #194	; 0xc2
   1beb8:	e7cc      	b.n	1be54 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   1beba:	6923      	ldr	r3, [r4, #16]
   1bebc:	681b      	ldr	r3, [r3, #0]
   1bebe:	2b00      	cmp	r3, #0
   1bec0:	d12d      	bne.n	1bf1e <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   1bec2:	9b01      	ldr	r3, [sp, #4]
   1bec4:	2b00      	cmp	r3, #0
   1bec6:	d1e5      	bne.n	1be94 <register_events+0x90>
   1bec8:	782b      	ldrb	r3, [r5, #0]
   1beca:	2b00      	cmp	r3, #0
   1becc:	d0e2      	beq.n	1be94 <register_events+0x90>
	switch (event->type) {
   1bece:	7b63      	ldrb	r3, [r4, #13]
   1bed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bed4:	2b08      	cmp	r3, #8
   1bed6:	d86b      	bhi.n	1bfb0 <register_events+0x1ac>
   1bed8:	e8df f003 	tbb	[pc, r3]
   1bedc:	6a234935 	.word	0x6a234935
   1bee0:	6a6a6a38 	.word	0x6a6a6a38
   1bee4:	59          	.byte	0x59
   1bee5:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1bee6:	6923      	ldr	r3, [r4, #16]
   1bee8:	689b      	ldr	r3, [r3, #8]
   1beea:	2b00      	cmp	r3, #0
   1beec:	d0e9      	beq.n	1bec2 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   1beee:	2301      	movs	r3, #1
   1bef0:	e7c5      	b.n	1be7e <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   1bef2:	6923      	ldr	r3, [r4, #16]
   1bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bef6:	2b00      	cmp	r3, #0
   1bef8:	d0e3      	beq.n	1bec2 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1befa:	2310      	movs	r3, #16
   1befc:	e7bf      	b.n	1be7e <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1befe:	2363      	movs	r3, #99	; 0x63
   1bf00:	4a3b      	ldr	r2, [pc, #236]	; (1bff0 <register_events+0x1ec>)
   1bf02:	493c      	ldr	r1, [pc, #240]	; (1bff4 <register_events+0x1f0>)
   1bf04:	4836      	ldr	r0, [pc, #216]	; (1bfe0 <register_events+0x1dc>)
   1bf06:	f000 fdf0 	bl	1caea <assert_print>
   1bf0a:	7b61      	ldrb	r1, [r4, #13]
   1bf0c:	483a      	ldr	r0, [pc, #232]	; (1bff8 <register_events+0x1f4>)
   1bf0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1bf12:	f000 fdea 	bl	1caea <assert_print>
   1bf16:	2163      	movs	r1, #99	; 0x63
   1bf18:	4835      	ldr	r0, [pc, #212]	; (1bff0 <register_events+0x1ec>)
   1bf1a:	f000 fddf 	bl	1cadc <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1bf1e:	2304      	movs	r3, #4
   1bf20:	e7ad      	b.n	1be7e <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1bf22:	6920      	ldr	r0, [r4, #16]
   1bf24:	b950      	cbnz	r0, 1bf3c <register_events+0x138>
   1bf26:	4935      	ldr	r1, [pc, #212]	; (1bffc <register_events+0x1f8>)
   1bf28:	238d      	movs	r3, #141	; 0x8d
   1bf2a:	4a31      	ldr	r2, [pc, #196]	; (1bff0 <register_events+0x1ec>)
   1bf2c:	482c      	ldr	r0, [pc, #176]	; (1bfe0 <register_events+0x1dc>)
   1bf2e:	f000 fddc 	bl	1caea <assert_print>
   1bf32:	4833      	ldr	r0, [pc, #204]	; (1c000 <register_events+0x1fc>)
   1bf34:	f000 fdd9 	bl	1caea <assert_print>
   1bf38:	218d      	movs	r1, #141	; 0x8d
   1bf3a:	e7ed      	b.n	1bf18 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   1bf3c:	462a      	mov	r2, r5
   1bf3e:	4621      	mov	r1, r4
   1bf40:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1bf42:	f004 f96d 	bl	20220 <add_event>
	event->poller = poller;
   1bf46:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   1bf48:	3701      	adds	r7, #1
   1bf4a:	e7a3      	b.n	1be94 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1bf4c:	6920      	ldr	r0, [r4, #16]
   1bf4e:	b950      	cbnz	r0, 1bf66 <register_events+0x162>
   1bf50:	492c      	ldr	r1, [pc, #176]	; (1c004 <register_events+0x200>)
   1bf52:	2391      	movs	r3, #145	; 0x91
   1bf54:	4a26      	ldr	r2, [pc, #152]	; (1bff0 <register_events+0x1ec>)
   1bf56:	4822      	ldr	r0, [pc, #136]	; (1bfe0 <register_events+0x1dc>)
   1bf58:	f000 fdc7 	bl	1caea <assert_print>
   1bf5c:	482a      	ldr	r0, [pc, #168]	; (1c008 <register_events+0x204>)
   1bf5e:	f000 fdc4 	bl	1caea <assert_print>
   1bf62:	2191      	movs	r1, #145	; 0x91
   1bf64:	e7d8      	b.n	1bf18 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   1bf66:	462a      	mov	r2, r5
   1bf68:	4621      	mov	r1, r4
   1bf6a:	3014      	adds	r0, #20
   1bf6c:	e7e9      	b.n	1bf42 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1bf6e:	6920      	ldr	r0, [r4, #16]
   1bf70:	b950      	cbnz	r0, 1bf88 <register_events+0x184>
   1bf72:	4926      	ldr	r1, [pc, #152]	; (1c00c <register_events+0x208>)
   1bf74:	2395      	movs	r3, #149	; 0x95
   1bf76:	4a1e      	ldr	r2, [pc, #120]	; (1bff0 <register_events+0x1ec>)
   1bf78:	4819      	ldr	r0, [pc, #100]	; (1bfe0 <register_events+0x1dc>)
   1bf7a:	f000 fdb6 	bl	1caea <assert_print>
   1bf7e:	4824      	ldr	r0, [pc, #144]	; (1c010 <register_events+0x20c>)
   1bf80:	f000 fdb3 	bl	1caea <assert_print>
   1bf84:	2195      	movs	r1, #149	; 0x95
   1bf86:	e7c7      	b.n	1bf18 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   1bf88:	462a      	mov	r2, r5
   1bf8a:	4621      	mov	r1, r4
   1bf8c:	e7d9      	b.n	1bf42 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1bf8e:	6920      	ldr	r0, [r4, #16]
   1bf90:	b950      	cbnz	r0, 1bfa8 <register_events+0x1a4>
   1bf92:	4920      	ldr	r1, [pc, #128]	; (1c014 <register_events+0x210>)
   1bf94:	2399      	movs	r3, #153	; 0x99
   1bf96:	4a16      	ldr	r2, [pc, #88]	; (1bff0 <register_events+0x1ec>)
   1bf98:	4811      	ldr	r0, [pc, #68]	; (1bfe0 <register_events+0x1dc>)
   1bf9a:	f000 fda6 	bl	1caea <assert_print>
   1bf9e:	481e      	ldr	r0, [pc, #120]	; (1c018 <register_events+0x214>)
   1bfa0:	f000 fda3 	bl	1caea <assert_print>
   1bfa4:	2199      	movs	r1, #153	; 0x99
   1bfa6:	e7b7      	b.n	1bf18 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   1bfa8:	462a      	mov	r2, r5
   1bfaa:	4621      	mov	r1, r4
   1bfac:	3028      	adds	r0, #40	; 0x28
   1bfae:	e7c8      	b.n	1bf42 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   1bfb0:	4910      	ldr	r1, [pc, #64]	; (1bff4 <register_events+0x1f0>)
   1bfb2:	23a6      	movs	r3, #166	; 0xa6
   1bfb4:	4a0e      	ldr	r2, [pc, #56]	; (1bff0 <register_events+0x1ec>)
   1bfb6:	480a      	ldr	r0, [pc, #40]	; (1bfe0 <register_events+0x1dc>)
   1bfb8:	f000 fd97 	bl	1caea <assert_print>
   1bfbc:	4817      	ldr	r0, [pc, #92]	; (1c01c <register_events+0x218>)
   1bfbe:	f000 fd94 	bl	1caea <assert_print>
   1bfc2:	21a6      	movs	r1, #166	; 0xa6
   1bfc4:	e7a8      	b.n	1bf18 <register_events+0x114>
	__asm__ volatile(
   1bfc6:	f38b 8811 	msr	BASEPRI, fp
   1bfca:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1bfce:	3601      	adds	r6, #1
   1bfd0:	e723      	b.n	1be1a <register_events+0x16>
   1bfd2:	bf00      	nop
   1bfd4:	20009c54 	.word	0x20009c54
   1bfd8:	0002197b 	.word	0x0002197b
   1bfdc:	000219d4 	.word	0x000219d4
   1bfe0:	00021547 	.word	0x00021547
   1bfe4:	000219e9 	.word	0x000219e9
   1bfe8:	000219a8 	.word	0x000219a8
   1bfec:	000219bf 	.word	0x000219bf
   1bff0:	00025599 	.word	0x00025599
   1bff4:	00024673 	.word	0x00024673
   1bff8:	000255ba 	.word	0x000255ba
   1bffc:	000255d7 	.word	0x000255d7
   1c000:	000255f1 	.word	0x000255f1
   1c004:	00025606 	.word	0x00025606
   1c008:	00025622 	.word	0x00025622
   1c00c:	00025633 	.word	0x00025633
   1c010:	00025650 	.word	0x00025650
   1c014:	00025667 	.word	0x00025667
   1c018:	00025682 	.word	0x00025682
   1c01c:	0002569b 	.word	0x0002569b

0001c020 <clear_event_registrations>:
{
   1c020:	2314      	movs	r3, #20
   1c022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c026:	4615      	mov	r5, r2
	while (num_events--) {
   1c028:	460c      	mov	r4, r1
	event->poller = NULL;
   1c02a:	2600      	movs	r6, #0
   1c02c:	fb03 0001 	mla	r0, r3, r1, r0
   1c030:	4f4b      	ldr	r7, [pc, #300]	; (1c160 <clear_event_registrations+0x140>)
	while (num_events--) {
   1c032:	b90c      	cbnz	r4, 1c038 <clear_event_registrations+0x18>
}
   1c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   1c038:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1c03c:	f1a0 0814 	sub.w	r8, r0, #20
   1c040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   1c044:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   1c048:	2b08      	cmp	r3, #8
   1c04a:	d842      	bhi.n	1c0d2 <clear_event_registrations+0xb2>
   1c04c:	e8df f003 	tbb	[pc, r3]
   1c050:	41052555 	.word	0x41052555
   1c054:	41414116 	.word	0x41414116
   1c058:	33          	.byte	0x33
   1c059:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c05a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1c05e:	2b00      	cmp	r3, #0
   1c060:	d142      	bne.n	1c0e8 <clear_event_registrations+0xc8>
   1c062:	4940      	ldr	r1, [pc, #256]	; (1c164 <clear_event_registrations+0x144>)
   1c064:	23b6      	movs	r3, #182	; 0xb6
   1c066:	4a40      	ldr	r2, [pc, #256]	; (1c168 <clear_event_registrations+0x148>)
   1c068:	4840      	ldr	r0, [pc, #256]	; (1c16c <clear_event_registrations+0x14c>)
   1c06a:	f000 fd3e 	bl	1caea <assert_print>
   1c06e:	4840      	ldr	r0, [pc, #256]	; (1c170 <clear_event_registrations+0x150>)
   1c070:	f000 fd3b 	bl	1caea <assert_print>
   1c074:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c076:	483c      	ldr	r0, [pc, #240]	; (1c168 <clear_event_registrations+0x148>)
   1c078:	f000 fd30 	bl	1cadc <assert_post_action>
   1c07c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1c080:	2b00      	cmp	r3, #0
   1c082:	d131      	bne.n	1c0e8 <clear_event_registrations+0xc8>
   1c084:	493b      	ldr	r1, [pc, #236]	; (1c174 <clear_event_registrations+0x154>)
   1c086:	23ba      	movs	r3, #186	; 0xba
   1c088:	4a37      	ldr	r2, [pc, #220]	; (1c168 <clear_event_registrations+0x148>)
   1c08a:	4838      	ldr	r0, [pc, #224]	; (1c16c <clear_event_registrations+0x14c>)
   1c08c:	f000 fd2d 	bl	1caea <assert_print>
   1c090:	4839      	ldr	r0, [pc, #228]	; (1c178 <clear_event_registrations+0x158>)
   1c092:	f000 fd2a 	bl	1caea <assert_print>
   1c096:	21ba      	movs	r1, #186	; 0xba
   1c098:	e7ed      	b.n	1c076 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c09a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1c09e:	bb1b      	cbnz	r3, 1c0e8 <clear_event_registrations+0xc8>
   1c0a0:	4936      	ldr	r1, [pc, #216]	; (1c17c <clear_event_registrations+0x15c>)
   1c0a2:	23be      	movs	r3, #190	; 0xbe
   1c0a4:	4a30      	ldr	r2, [pc, #192]	; (1c168 <clear_event_registrations+0x148>)
   1c0a6:	4831      	ldr	r0, [pc, #196]	; (1c16c <clear_event_registrations+0x14c>)
   1c0a8:	f000 fd1f 	bl	1caea <assert_print>
   1c0ac:	4834      	ldr	r0, [pc, #208]	; (1c180 <clear_event_registrations+0x160>)
   1c0ae:	f000 fd1c 	bl	1caea <assert_print>
   1c0b2:	21be      	movs	r1, #190	; 0xbe
   1c0b4:	e7df      	b.n	1c076 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c0b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1c0ba:	b9ab      	cbnz	r3, 1c0e8 <clear_event_registrations+0xc8>
   1c0bc:	4931      	ldr	r1, [pc, #196]	; (1c184 <clear_event_registrations+0x164>)
   1c0be:	23c2      	movs	r3, #194	; 0xc2
   1c0c0:	4a29      	ldr	r2, [pc, #164]	; (1c168 <clear_event_registrations+0x148>)
   1c0c2:	482a      	ldr	r0, [pc, #168]	; (1c16c <clear_event_registrations+0x14c>)
   1c0c4:	f000 fd11 	bl	1caea <assert_print>
   1c0c8:	482f      	ldr	r0, [pc, #188]	; (1c188 <clear_event_registrations+0x168>)
   1c0ca:	f000 fd0e 	bl	1caea <assert_print>
   1c0ce:	21c2      	movs	r1, #194	; 0xc2
   1c0d0:	e7d1      	b.n	1c076 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   1c0d2:	492e      	ldr	r1, [pc, #184]	; (1c18c <clear_event_registrations+0x16c>)
   1c0d4:	23cf      	movs	r3, #207	; 0xcf
   1c0d6:	4a24      	ldr	r2, [pc, #144]	; (1c168 <clear_event_registrations+0x148>)
   1c0d8:	4824      	ldr	r0, [pc, #144]	; (1c16c <clear_event_registrations+0x14c>)
   1c0da:	f000 fd06 	bl	1caea <assert_print>
   1c0de:	482c      	ldr	r0, [pc, #176]	; (1c190 <clear_event_registrations+0x170>)
   1c0e0:	f000 fd03 	bl	1caea <assert_print>
   1c0e4:	21cf      	movs	r1, #207	; 0xcf
   1c0e6:	e7c6      	b.n	1c076 <clear_event_registrations+0x56>
	return node->next != NULL;
   1c0e8:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c0ec:	b12b      	cbz	r3, 1c0fa <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   1c0ee:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   1c0f2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c0f4:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   1c0f6:	e940 6605 	strd	r6, r6, [r0, #-20]
   1c0fa:	4638      	mov	r0, r7
   1c0fc:	f7fc ff1c 	bl	18f38 <z_spin_unlock_valid>
   1c100:	b960      	cbnz	r0, 1c11c <clear_event_registrations+0xfc>
   1c102:	23c2      	movs	r3, #194	; 0xc2
   1c104:	4a23      	ldr	r2, [pc, #140]	; (1c194 <clear_event_registrations+0x174>)
   1c106:	4924      	ldr	r1, [pc, #144]	; (1c198 <clear_event_registrations+0x178>)
   1c108:	4818      	ldr	r0, [pc, #96]	; (1c16c <clear_event_registrations+0x14c>)
   1c10a:	f000 fcee 	bl	1caea <assert_print>
   1c10e:	4914      	ldr	r1, [pc, #80]	; (1c160 <clear_event_registrations+0x140>)
   1c110:	4822      	ldr	r0, [pc, #136]	; (1c19c <clear_event_registrations+0x17c>)
   1c112:	f000 fcea 	bl	1caea <assert_print>
   1c116:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c118:	481e      	ldr	r0, [pc, #120]	; (1c194 <clear_event_registrations+0x174>)
   1c11a:	e7ad      	b.n	1c078 <clear_event_registrations+0x58>
   1c11c:	f385 8811 	msr	BASEPRI, r5
   1c120:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c124:	f04f 0320 	mov.w	r3, #32
   1c128:	f3ef 8511 	mrs	r5, BASEPRI
   1c12c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c130:	f3bf 8f6f 	isb	sy
   1c134:	4638      	mov	r0, r7
   1c136:	f7fc fef1 	bl	18f1c <z_spin_lock_valid>
   1c13a:	3c01      	subs	r4, #1
   1c13c:	b958      	cbnz	r0, 1c156 <clear_event_registrations+0x136>
   1c13e:	2394      	movs	r3, #148	; 0x94
   1c140:	4a14      	ldr	r2, [pc, #80]	; (1c194 <clear_event_registrations+0x174>)
   1c142:	4917      	ldr	r1, [pc, #92]	; (1c1a0 <clear_event_registrations+0x180>)
   1c144:	4809      	ldr	r0, [pc, #36]	; (1c16c <clear_event_registrations+0x14c>)
   1c146:	f000 fcd0 	bl	1caea <assert_print>
   1c14a:	4905      	ldr	r1, [pc, #20]	; (1c160 <clear_event_registrations+0x140>)
   1c14c:	4815      	ldr	r0, [pc, #84]	; (1c1a4 <clear_event_registrations+0x184>)
   1c14e:	f000 fccc 	bl	1caea <assert_print>
   1c152:	2194      	movs	r1, #148	; 0x94
   1c154:	e7e0      	b.n	1c118 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   1c156:	4638      	mov	r0, r7
   1c158:	f7fc fefc 	bl	18f54 <z_spin_lock_set_owner>
	return k;
   1c15c:	4640      	mov	r0, r8
   1c15e:	e768      	b.n	1c032 <clear_event_registrations+0x12>
   1c160:	20009c54 	.word	0x20009c54
   1c164:	000255d7 	.word	0x000255d7
   1c168:	00025599 	.word	0x00025599
   1c16c:	00021547 	.word	0x00021547
   1c170:	000255f1 	.word	0x000255f1
   1c174:	00025606 	.word	0x00025606
   1c178:	00025622 	.word	0x00025622
   1c17c:	00025633 	.word	0x00025633
   1c180:	00025650 	.word	0x00025650
   1c184:	00025667 	.word	0x00025667
   1c188:	00025682 	.word	0x00025682
   1c18c:	00024673 	.word	0x00024673
   1c190:	0002569b 	.word	0x0002569b
   1c194:	0002197b 	.word	0x0002197b
   1c198:	000219a8 	.word	0x000219a8
   1c19c:	000219bf 	.word	0x000219bf
   1c1a0:	000219d4 	.word	0x000219d4
   1c1a4:	000219e9 	.word	0x000219e9

0001c1a8 <k_poll_event_init>:
{
   1c1a8:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1c1aa:	b162      	cbz	r2, 1c1c6 <k_poll_event_init+0x1e>
   1c1ac:	4917      	ldr	r1, [pc, #92]	; (1c20c <k_poll_event_init+0x64>)
   1c1ae:	232d      	movs	r3, #45	; 0x2d
   1c1b0:	4a17      	ldr	r2, [pc, #92]	; (1c210 <k_poll_event_init+0x68>)
   1c1b2:	4818      	ldr	r0, [pc, #96]	; (1c214 <k_poll_event_init+0x6c>)
   1c1b4:	f000 fc99 	bl	1caea <assert_print>
   1c1b8:	4817      	ldr	r0, [pc, #92]	; (1c218 <k_poll_event_init+0x70>)
   1c1ba:	f000 fc96 	bl	1caea <assert_print>
   1c1be:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1c1c0:	4813      	ldr	r0, [pc, #76]	; (1c210 <k_poll_event_init+0x68>)
   1c1c2:	f000 fc8b 	bl	1cadc <assert_post_action>
   1c1c6:	293f      	cmp	r1, #63	; 0x3f
   1c1c8:	d90a      	bls.n	1c1e0 <k_poll_event_init+0x38>
   1c1ca:	4914      	ldr	r1, [pc, #80]	; (1c21c <k_poll_event_init+0x74>)
   1c1cc:	232f      	movs	r3, #47	; 0x2f
   1c1ce:	4a10      	ldr	r2, [pc, #64]	; (1c210 <k_poll_event_init+0x68>)
   1c1d0:	4810      	ldr	r0, [pc, #64]	; (1c214 <k_poll_event_init+0x6c>)
   1c1d2:	f000 fc8a 	bl	1caea <assert_print>
   1c1d6:	4812      	ldr	r0, [pc, #72]	; (1c220 <k_poll_event_init+0x78>)
   1c1d8:	f000 fc87 	bl	1caea <assert_print>
   1c1dc:	212f      	movs	r1, #47	; 0x2f
   1c1de:	e7ef      	b.n	1c1c0 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   1c1e0:	b953      	cbnz	r3, 1c1f8 <k_poll_event_init+0x50>
   1c1e2:	4910      	ldr	r1, [pc, #64]	; (1c224 <k_poll_event_init+0x7c>)
   1c1e4:	2330      	movs	r3, #48	; 0x30
   1c1e6:	4a0a      	ldr	r2, [pc, #40]	; (1c210 <k_poll_event_init+0x68>)
   1c1e8:	480a      	ldr	r0, [pc, #40]	; (1c214 <k_poll_event_init+0x6c>)
   1c1ea:	f000 fc7e 	bl	1caea <assert_print>
   1c1ee:	480e      	ldr	r0, [pc, #56]	; (1c228 <k_poll_event_init+0x80>)
   1c1f0:	f000 fc7b 	bl	1caea <assert_print>
   1c1f4:	2130      	movs	r1, #48	; 0x30
   1c1f6:	e7e3      	b.n	1c1c0 <k_poll_event_init+0x18>
	event->poller = NULL;
   1c1f8:	6082      	str	r2, [r0, #8]
	event->type = type;
   1c1fa:	0209      	lsls	r1, r1, #8
   1c1fc:	7b02      	ldrb	r2, [r0, #12]
   1c1fe:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1c202:	4311      	orrs	r1, r2
	event->obj = obj;
   1c204:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   1c208:	bd08      	pop	{r3, pc}
   1c20a:	bf00      	nop
   1c20c:	000256b1 	.word	0x000256b1
   1c210:	00025599 	.word	0x00025599
   1c214:	00021547 	.word	0x00021547
   1c218:	000256d1 	.word	0x000256d1
   1c21c:	000256f7 	.word	0x000256f7
   1c220:	0002571b 	.word	0x0002571b
   1c224:	0002572b 	.word	0x0002572b
   1c228:	0002573e 	.word	0x0002573e

0001c22c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c22c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c230:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c232:	4b5c      	ldr	r3, [pc, #368]	; (1c3a4 <z_impl_k_poll+0x178>)
{
   1c234:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   1c236:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   1c23a:	2301      	movs	r3, #1
{
   1c23c:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   1c23e:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   1c242:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c246:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   1c24a:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   1c24e:	f1bb 0f00 	cmp.w	fp, #0
   1c252:	d00e      	beq.n	1c272 <z_impl_k_poll+0x46>
   1c254:	4954      	ldr	r1, [pc, #336]	; (1c3a8 <z_impl_k_poll+0x17c>)
   1c256:	f240 132d 	movw	r3, #301	; 0x12d
   1c25a:	4a54      	ldr	r2, [pc, #336]	; (1c3ac <z_impl_k_poll+0x180>)
   1c25c:	4854      	ldr	r0, [pc, #336]	; (1c3b0 <z_impl_k_poll+0x184>)
   1c25e:	f000 fc44 	bl	1caea <assert_print>
   1c262:	4854      	ldr	r0, [pc, #336]	; (1c3b4 <z_impl_k_poll+0x188>)
   1c264:	f000 fc41 	bl	1caea <assert_print>
   1c268:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   1c26c:	484f      	ldr	r0, [pc, #316]	; (1c3ac <z_impl_k_poll+0x180>)
   1c26e:	f000 fc35 	bl	1cadc <assert_post_action>
   1c272:	b960      	cbnz	r0, 1c28e <z_impl_k_poll+0x62>
   1c274:	4950      	ldr	r1, [pc, #320]	; (1c3b8 <z_impl_k_poll+0x18c>)
   1c276:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1c27a:	4a4c      	ldr	r2, [pc, #304]	; (1c3ac <z_impl_k_poll+0x180>)
   1c27c:	484c      	ldr	r0, [pc, #304]	; (1c3b0 <z_impl_k_poll+0x184>)
   1c27e:	f000 fc34 	bl	1caea <assert_print>
   1c282:	484e      	ldr	r0, [pc, #312]	; (1c3bc <z_impl_k_poll+0x190>)
   1c284:	f000 fc31 	bl	1caea <assert_print>
   1c288:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1c28c:	e7ee      	b.n	1c26c <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   1c28e:	2900      	cmp	r1, #0
   1c290:	da0c      	bge.n	1c2ac <z_impl_k_poll+0x80>
   1c292:	494b      	ldr	r1, [pc, #300]	; (1c3c0 <z_impl_k_poll+0x194>)
   1c294:	f240 132f 	movw	r3, #303	; 0x12f
   1c298:	4a44      	ldr	r2, [pc, #272]	; (1c3ac <z_impl_k_poll+0x180>)
   1c29a:	4845      	ldr	r0, [pc, #276]	; (1c3b0 <z_impl_k_poll+0x184>)
   1c29c:	f000 fc25 	bl	1caea <assert_print>
   1c2a0:	4848      	ldr	r0, [pc, #288]	; (1c3c4 <z_impl_k_poll+0x198>)
   1c2a2:	f000 fc22 	bl	1caea <assert_print>
   1c2a6:	f240 112f 	movw	r1, #303	; 0x12f
   1c2aa:	e7df      	b.n	1c26c <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c2ac:	ea57 0306 	orrs.w	r3, r7, r6
   1c2b0:	bf0c      	ite	eq
   1c2b2:	2301      	moveq	r3, #1
   1c2b4:	2300      	movne	r3, #0
   1c2b6:	f7ff fda5 	bl	1be04 <register_events>
   1c2ba:	4681      	mov	r9, r0
   1c2bc:	f04f 0320 	mov.w	r3, #32
   1c2c0:	f3ef 8a11 	mrs	sl, BASEPRI
   1c2c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c2cc:	483e      	ldr	r0, [pc, #248]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c2ce:	f7fc fe25 	bl	18f1c <z_spin_lock_valid>
   1c2d2:	b960      	cbnz	r0, 1c2ee <z_impl_k_poll+0xc2>
   1c2d4:	2394      	movs	r3, #148	; 0x94
   1c2d6:	4a3d      	ldr	r2, [pc, #244]	; (1c3cc <z_impl_k_poll+0x1a0>)
   1c2d8:	493d      	ldr	r1, [pc, #244]	; (1c3d0 <z_impl_k_poll+0x1a4>)
   1c2da:	4835      	ldr	r0, [pc, #212]	; (1c3b0 <z_impl_k_poll+0x184>)
   1c2dc:	f000 fc05 	bl	1caea <assert_print>
   1c2e0:	4939      	ldr	r1, [pc, #228]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c2e2:	483c      	ldr	r0, [pc, #240]	; (1c3d4 <z_impl_k_poll+0x1a8>)
   1c2e4:	f000 fc01 	bl	1caea <assert_print>
   1c2e8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2ea:	4838      	ldr	r0, [pc, #224]	; (1c3cc <z_impl_k_poll+0x1a0>)
   1c2ec:	e7bf      	b.n	1c26e <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   1c2ee:	4836      	ldr	r0, [pc, #216]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c2f0:	f7fc fe30 	bl	18f54 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c2f4:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   1c2f8:	b9e4      	cbnz	r4, 1c334 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   1c2fa:	4628      	mov	r0, r5
   1c2fc:	4652      	mov	r2, sl
   1c2fe:	4649      	mov	r1, r9
   1c300:	f7ff fe8e 	bl	1c020 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c304:	4830      	ldr	r0, [pc, #192]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c306:	f7fc fe17 	bl	18f38 <z_spin_unlock_valid>
   1c30a:	b958      	cbnz	r0, 1c324 <z_impl_k_poll+0xf8>
   1c30c:	23c2      	movs	r3, #194	; 0xc2
   1c30e:	4a2f      	ldr	r2, [pc, #188]	; (1c3cc <z_impl_k_poll+0x1a0>)
   1c310:	4931      	ldr	r1, [pc, #196]	; (1c3d8 <z_impl_k_poll+0x1ac>)
   1c312:	4827      	ldr	r0, [pc, #156]	; (1c3b0 <z_impl_k_poll+0x184>)
   1c314:	f000 fbe9 	bl	1caea <assert_print>
   1c318:	492b      	ldr	r1, [pc, #172]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c31a:	4830      	ldr	r0, [pc, #192]	; (1c3dc <z_impl_k_poll+0x1b0>)
   1c31c:	f000 fbe5 	bl	1caea <assert_print>
   1c320:	21c2      	movs	r1, #194	; 0xc2
   1c322:	e7e2      	b.n	1c2ea <z_impl_k_poll+0xbe>
	__asm__ volatile(
   1c324:	f38a 8811 	msr	BASEPRI, sl
   1c328:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c32c:	4620      	mov	r0, r4
   1c32e:	b003      	add	sp, #12
   1c330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c334:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   1c338:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c33c:	d10b      	bne.n	1c356 <z_impl_k_poll+0x12a>
   1c33e:	4822      	ldr	r0, [pc, #136]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c340:	f7fc fdfa 	bl	18f38 <z_spin_unlock_valid>
   1c344:	2800      	cmp	r0, #0
   1c346:	d0e1      	beq.n	1c30c <z_impl_k_poll+0xe0>
   1c348:	f38a 8811 	msr	BASEPRI, sl
   1c34c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c350:	f06f 040a 	mvn.w	r4, #10
   1c354:	e7ea      	b.n	1c32c <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c356:	4651      	mov	r1, sl
   1c358:	e9cd 7600 	strd	r7, r6, [sp]
   1c35c:	4a20      	ldr	r2, [pc, #128]	; (1c3e0 <z_impl_k_poll+0x1b4>)
   1c35e:	481a      	ldr	r0, [pc, #104]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c360:	f7fe fbd2 	bl	1ab08 <z_pend_curr>
   1c364:	4604      	mov	r4, r0
	__asm__ volatile(
   1c366:	f04f 0320 	mov.w	r3, #32
   1c36a:	f3ef 8611 	mrs	r6, BASEPRI
   1c36e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c372:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c376:	4814      	ldr	r0, [pc, #80]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c378:	f7fc fdd0 	bl	18f1c <z_spin_lock_valid>
   1c37c:	2800      	cmp	r0, #0
   1c37e:	d0a9      	beq.n	1c2d4 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   1c380:	4811      	ldr	r0, [pc, #68]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c382:	f7fc fde7 	bl	18f54 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1c386:	4628      	mov	r0, r5
   1c388:	4632      	mov	r2, r6
   1c38a:	4649      	mov	r1, r9
   1c38c:	f7ff fe48 	bl	1c020 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c390:	480d      	ldr	r0, [pc, #52]	; (1c3c8 <z_impl_k_poll+0x19c>)
   1c392:	f7fc fdd1 	bl	18f38 <z_spin_unlock_valid>
   1c396:	2800      	cmp	r0, #0
   1c398:	d0b8      	beq.n	1c30c <z_impl_k_poll+0xe0>
	__asm__ volatile(
   1c39a:	f386 8811 	msr	BASEPRI, r6
   1c39e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c3a2:	e7c3      	b.n	1c32c <z_impl_k_poll+0x100>
   1c3a4:	20009bfc 	.word	0x20009bfc
   1c3a8:	00025122 	.word	0x00025122
   1c3ac:	00025599 	.word	0x00025599
   1c3b0:	00021547 	.word	0x00021547
   1c3b4:	00023bf8 	.word	0x00023bf8
   1c3b8:	00025758 	.word	0x00025758
   1c3bc:	0002576e 	.word	0x0002576e
   1c3c0:	0002577d 	.word	0x0002577d
   1c3c4:	0002578d 	.word	0x0002578d
   1c3c8:	20009c54 	.word	0x20009c54
   1c3cc:	0002197b 	.word	0x0002197b
   1c3d0:	000219d4 	.word	0x000219d4
   1c3d4:	000219e9 	.word	0x000219e9
   1c3d8:	000219a8 	.word	0x000219a8
   1c3dc:	000219bf 	.word	0x000219bf
   1c3e0:	20008408 	.word	0x20008408

0001c3e4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c3e4:	b570      	push	{r4, r5, r6, lr}
   1c3e6:	4604      	mov	r4, r0
   1c3e8:	460d      	mov	r5, r1
	__asm__ volatile(
   1c3ea:	f04f 0320 	mov.w	r3, #32
   1c3ee:	f3ef 8611 	mrs	r6, BASEPRI
   1c3f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c3fa:	4820      	ldr	r0, [pc, #128]	; (1c47c <z_impl_k_poll_signal_raise+0x98>)
   1c3fc:	f7fc fd8e 	bl	18f1c <z_spin_lock_valid>
   1c400:	b968      	cbnz	r0, 1c41e <z_impl_k_poll_signal_raise+0x3a>
   1c402:	2394      	movs	r3, #148	; 0x94
   1c404:	4a1e      	ldr	r2, [pc, #120]	; (1c480 <z_impl_k_poll_signal_raise+0x9c>)
   1c406:	491f      	ldr	r1, [pc, #124]	; (1c484 <z_impl_k_poll_signal_raise+0xa0>)
   1c408:	481f      	ldr	r0, [pc, #124]	; (1c488 <z_impl_k_poll_signal_raise+0xa4>)
   1c40a:	f000 fb6e 	bl	1caea <assert_print>
   1c40e:	491b      	ldr	r1, [pc, #108]	; (1c47c <z_impl_k_poll_signal_raise+0x98>)
   1c410:	481e      	ldr	r0, [pc, #120]	; (1c48c <z_impl_k_poll_signal_raise+0xa8>)
   1c412:	f000 fb6a 	bl	1caea <assert_print>
   1c416:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c418:	4819      	ldr	r0, [pc, #100]	; (1c480 <z_impl_k_poll_signal_raise+0x9c>)
   1c41a:	f000 fb5f 	bl	1cadc <assert_post_action>
	z_spin_lock_set_owner(l);
   1c41e:	4817      	ldr	r0, [pc, #92]	; (1c47c <z_impl_k_poll_signal_raise+0x98>)
   1c420:	f7fc fd98 	bl	18f54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   1c424:	2101      	movs	r1, #1
	return list->head == list;
   1c426:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   1c428:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c42a:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   1c42c:	60a1      	str	r1, [r4, #8]
   1c42e:	d10f      	bne.n	1c450 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c430:	4812      	ldr	r0, [pc, #72]	; (1c47c <z_impl_k_poll_signal_raise+0x98>)
   1c432:	f7fc fd81 	bl	18f38 <z_spin_unlock_valid>
   1c436:	b9d8      	cbnz	r0, 1c470 <z_impl_k_poll_signal_raise+0x8c>
   1c438:	23c2      	movs	r3, #194	; 0xc2
   1c43a:	4a11      	ldr	r2, [pc, #68]	; (1c480 <z_impl_k_poll_signal_raise+0x9c>)
   1c43c:	4914      	ldr	r1, [pc, #80]	; (1c490 <z_impl_k_poll_signal_raise+0xac>)
   1c43e:	4812      	ldr	r0, [pc, #72]	; (1c488 <z_impl_k_poll_signal_raise+0xa4>)
   1c440:	f000 fb53 	bl	1caea <assert_print>
   1c444:	490d      	ldr	r1, [pc, #52]	; (1c47c <z_impl_k_poll_signal_raise+0x98>)
   1c446:	4813      	ldr	r0, [pc, #76]	; (1c494 <z_impl_k_poll_signal_raise+0xb0>)
   1c448:	f000 fb4f 	bl	1caea <assert_print>
   1c44c:	21c2      	movs	r1, #194	; 0xc2
   1c44e:	e7e3      	b.n	1c418 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   1c450:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c454:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c456:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c458:	2300      	movs	r3, #0
	node->prev = NULL;
   1c45a:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c45e:	f003 ff10 	bl	20282 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1c462:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c464:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c466:	4805      	ldr	r0, [pc, #20]	; (1c47c <z_impl_k_poll_signal_raise+0x98>)
   1c468:	f7fe f880 	bl	1a56c <z_reschedule>
	return rc;
}
   1c46c:	4620      	mov	r0, r4
   1c46e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1c470:	f386 8811 	msr	BASEPRI, r6
   1c474:	f3bf 8f6f 	isb	sy
		return 0;
   1c478:	2400      	movs	r4, #0
   1c47a:	e7f7      	b.n	1c46c <z_impl_k_poll_signal_raise+0x88>
   1c47c:	20009c54 	.word	0x20009c54
   1c480:	0002197b 	.word	0x0002197b
   1c484:	000219d4 	.word	0x000219d4
   1c488:	00021547 	.word	0x00021547
   1c48c:	000219e9 	.word	0x000219e9
   1c490:	000219a8 	.word	0x000219a8
   1c494:	000219bf 	.word	0x000219bf

0001c498 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1c498:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   1c49a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   1c49e:	4606      	mov	r6, r0
   1c4a0:	460d      	mov	r5, r1
   1c4a2:	d220      	bcs.n	1c4e6 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c4a4:	f04f 0800 	mov.w	r8, #0
   1c4a8:	f04f 0900 	mov.w	r9, #0
   1c4ac:	f041 0104 	orr.w	r1, r1, #4
   1c4b0:	e9cd 8900 	strd	r8, r9, [sp]
   1c4b4:	f7fc fa2e 	bl	18914 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c4b8:	4604      	mov	r4, r0
   1c4ba:	b1a0      	cbz	r0, 1c4e6 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   1c4bc:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1c4c0:	b195      	cbz	r5, 1c4e8 <z_heap_aligned_alloc+0x50>
   1c4c2:	1e6b      	subs	r3, r5, #1
   1c4c4:	421c      	tst	r4, r3
   1c4c6:	d00f      	beq.n	1c4e8 <z_heap_aligned_alloc+0x50>
   1c4c8:	2325      	movs	r3, #37	; 0x25
   1c4ca:	4a09      	ldr	r2, [pc, #36]	; (1c4f0 <z_heap_aligned_alloc+0x58>)
   1c4cc:	4909      	ldr	r1, [pc, #36]	; (1c4f4 <z_heap_aligned_alloc+0x5c>)
   1c4ce:	480a      	ldr	r0, [pc, #40]	; (1c4f8 <z_heap_aligned_alloc+0x60>)
   1c4d0:	f000 fb0b 	bl	1caea <assert_print>
   1c4d4:	4621      	mov	r1, r4
   1c4d6:	4809      	ldr	r0, [pc, #36]	; (1c4fc <z_heap_aligned_alloc+0x64>)
   1c4d8:	462a      	mov	r2, r5
   1c4da:	f000 fb06 	bl	1caea <assert_print>
   1c4de:	2125      	movs	r1, #37	; 0x25
   1c4e0:	4803      	ldr	r0, [pc, #12]	; (1c4f0 <z_heap_aligned_alloc+0x58>)
   1c4e2:	f000 fafb 	bl	1cadc <assert_post_action>
		return NULL;
   1c4e6:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   1c4e8:	4620      	mov	r0, r4
   1c4ea:	b002      	add	sp, #8
   1c4ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1c4f0:	0002579a 	.word	0x0002579a
   1c4f4:	000257be 	.word	0x000257be
   1c4f8:	00021547 	.word	0x00021547
   1c4fc:	000257f0 	.word	0x000257f0

0001c500 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1c500:	2803      	cmp	r0, #3
{
   1c502:	460a      	mov	r2, r1
   1c504:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   1c506:	d901      	bls.n	1c50c <k_aligned_alloc+0xc>
   1c508:	0783      	lsls	r3, r0, #30
   1c50a:	d00c      	beq.n	1c526 <k_aligned_alloc+0x26>
   1c50c:	4910      	ldr	r1, [pc, #64]	; (1c550 <k_aligned_alloc+0x50>)
   1c50e:	2342      	movs	r3, #66	; 0x42
   1c510:	4a10      	ldr	r2, [pc, #64]	; (1c554 <k_aligned_alloc+0x54>)
   1c512:	4811      	ldr	r0, [pc, #68]	; (1c558 <k_aligned_alloc+0x58>)
   1c514:	f000 fae9 	bl	1caea <assert_print>
   1c518:	4810      	ldr	r0, [pc, #64]	; (1c55c <k_aligned_alloc+0x5c>)
   1c51a:	f000 fae6 	bl	1caea <assert_print>
   1c51e:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1c520:	480c      	ldr	r0, [pc, #48]	; (1c554 <k_aligned_alloc+0x54>)
   1c522:	f000 fadb 	bl	1cadc <assert_post_action>
   1c526:	1e43      	subs	r3, r0, #1
   1c528:	4203      	tst	r3, r0
   1c52a:	d00a      	beq.n	1c542 <k_aligned_alloc+0x42>
   1c52c:	490c      	ldr	r1, [pc, #48]	; (1c560 <k_aligned_alloc+0x60>)
   1c52e:	2346      	movs	r3, #70	; 0x46
   1c530:	4a08      	ldr	r2, [pc, #32]	; (1c554 <k_aligned_alloc+0x54>)
   1c532:	4809      	ldr	r0, [pc, #36]	; (1c558 <k_aligned_alloc+0x58>)
   1c534:	f000 fad9 	bl	1caea <assert_print>
   1c538:	480a      	ldr	r0, [pc, #40]	; (1c564 <k_aligned_alloc+0x64>)
   1c53a:	f000 fad6 	bl	1caea <assert_print>
   1c53e:	2146      	movs	r1, #70	; 0x46
   1c540:	e7ee      	b.n	1c520 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c542:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   1c544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c548:	4807      	ldr	r0, [pc, #28]	; (1c568 <k_aligned_alloc+0x68>)
   1c54a:	f7ff bfa5 	b.w	1c498 <z_heap_aligned_alloc>
   1c54e:	bf00      	nop
   1c550:	00025818 	.word	0x00025818
   1c554:	0002579a 	.word	0x0002579a
   1c558:	00021547 	.word	0x00021547
   1c55c:	00025855 	.word	0x00025855
   1c560:	000217e5 	.word	0x000217e5
   1c564:	00021800 	.word	0x00021800
   1c568:	200085b0 	.word	0x200085b0

0001c56c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   1c56c:	4b01      	ldr	r3, [pc, #4]	; (1c574 <k_thread_system_pool_assign+0x8>)
   1c56e:	6743      	str	r3, [r0, #116]	; 0x74
}
   1c570:	4770      	bx	lr
   1c572:	bf00      	nop
   1c574:	200085b0 	.word	0x200085b0

0001c578 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c578:	b538      	push	{r3, r4, r5, lr}
   1c57a:	4604      	mov	r4, r0
   1c57c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c57e:	f003 fd04 	bl	1ff8a <k_is_in_isr>
   1c582:	b920      	cbnz	r0, 1c58e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c584:	4b06      	ldr	r3, [pc, #24]	; (1c5a0 <z_thread_aligned_alloc+0x28>)
   1c586:	689b      	ldr	r3, [r3, #8]
   1c588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1c58a:	b90b      	cbnz	r3, 1c590 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   1c58c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1c58e:	4b05      	ldr	r3, [pc, #20]	; (1c5a4 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   1c590:	462a      	mov	r2, r5
   1c592:	4621      	mov	r1, r4
   1c594:	4618      	mov	r0, r3
}
   1c596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1c59a:	f7ff bf7d 	b.w	1c498 <z_heap_aligned_alloc>
   1c59e:	bf00      	nop
   1c5a0:	20009bfc 	.word	0x20009bfc
   1c5a4:	200085b0 	.word	0x200085b0

0001c5a8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1c5a8:	4801      	ldr	r0, [pc, #4]	; (1c5b0 <boot_banner+0x8>)
   1c5aa:	f000 b896 	b.w	1c6da <printk>
   1c5ae:	bf00      	nop
   1c5b0:	00025882 	.word	0x00025882

0001c5b4 <z_log_msg_static_create.constprop.0>:
   1c5b4:	2300      	movs	r3, #0
   1c5b6:	f7ef b9a7 	b.w	b908 <z_impl_z_log_msg_static_create>

0001c5ba <dot_matrix_init>:
{
   1c5ba:	b508      	push	{r3, lr}
    dot_matrix_write(0x0C, 0x01);   // Shutdown register
   1c5bc:	2101      	movs	r1, #1
   1c5be:	200c      	movs	r0, #12
   1c5c0:	f7ec fce6 	bl	8f90 <dot_matrix_write>
    dot_matrix_write(0x0A, 0x00);   // Intensity register
   1c5c4:	2100      	movs	r1, #0
   1c5c6:	200a      	movs	r0, #10
   1c5c8:	f7ec fce2 	bl	8f90 <dot_matrix_write>
    dot_matrix_write(0x0B, 0x07);   // Scan limit register
   1c5cc:	2107      	movs	r1, #7
   1c5ce:	200b      	movs	r0, #11
   1c5d0:	f7ec fcde 	bl	8f90 <dot_matrix_write>
}
   1c5d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dot_matrix_write(0x09, 0x00);   // Decode-mode register
   1c5d8:	2100      	movs	r1, #0
   1c5da:	2009      	movs	r0, #9
   1c5dc:	f7ec bcd8 	b.w	8f90 <dot_matrix_write>

0001c5e0 <map>:
  }
  if (x > in_max)
  {
    x = in_max;
  }
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   1c5e0:	4288      	cmp	r0, r1
   1c5e2:	bf38      	it	cc
   1c5e4:	4608      	movcc	r0, r1
{
   1c5e6:	b510      	push	{r4, lr}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   1c5e8:	4290      	cmp	r0, r2
   1c5ea:	bf94      	ite	ls
   1c5ec:	ebc1 0400 	rsbls	r4, r1, r0
   1c5f0:	ebc1 0402 	rsbhi	r4, r1, r2
   1c5f4:	9802      	ldr	r0, [sp, #8]
   1c5f6:	1a52      	subs	r2, r2, r1
   1c5f8:	1ac0      	subs	r0, r0, r3
   1c5fa:	4344      	muls	r4, r0
   1c5fc:	fbb4 f2f2 	udiv	r2, r4, r2
} /* map */
   1c600:	18d0      	adds	r0, r2, r3
   1c602:	bd10      	pop	{r4, pc}

0001c604 <cbpprintf_external>:
{
   1c604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c608:	4606      	mov	r6, r0
   1c60a:	460d      	mov	r5, r1
   1c60c:	4617      	mov	r7, r2
	if (buf == NULL) {
   1c60e:	4698      	mov	r8, r3
   1c610:	b32b      	cbz	r3, 1c65e <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   1c612:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   1c616:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1c61a:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c61e:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1c620:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c622:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1c626:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1c62a:	441c      	add	r4, r3
   1c62c:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   1c62e:	45ca      	cmp	sl, r9
   1c630:	d309      	bcc.n	1c646 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1c632:	4639      	mov	r1, r7
   1c634:	4630      	mov	r0, r6
   1c636:	46ac      	mov	ip, r5
   1c638:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c63c:	f108 0308 	add.w	r3, r8, #8
}
   1c640:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1c644:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1c646:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1c64a:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   1c64e:	4620      	mov	r0, r4
		*ps = s;
   1c650:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1c654:	f001 fa19 	bl	1da8a <strlen>
   1c658:	3001      	adds	r0, #1
   1c65a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1c65c:	e7e7      	b.n	1c62e <cbpprintf_external+0x2a>
}
   1c65e:	f06f 0015 	mvn.w	r0, #21
   1c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c666 <is_ptr>:
{
   1c666:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1c668:	2500      	movs	r5, #0
{
   1c66a:	4602      	mov	r2, r0
	bool mod = false;
   1c66c:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1c66e:	4614      	mov	r4, r2
   1c670:	f814 3b01 	ldrb.w	r3, [r4], #1
   1c674:	b90b      	cbnz	r3, 1c67a <is_ptr+0x14>
					return false;
   1c676:	4618      	mov	r0, r3
   1c678:	e009      	b.n	1c68e <is_ptr+0x28>
		if (mod) {
   1c67a:	b198      	cbz	r0, 1c6a4 <is_ptr+0x3e>
			if (cnt == n) {
   1c67c:	428d      	cmp	r5, r1
   1c67e:	d107      	bne.n	1c690 <is_ptr+0x2a>
				if (c == 'p') {
   1c680:	2b70      	cmp	r3, #112	; 0x70
   1c682:	d004      	beq.n	1c68e <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   1c684:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1c688:	2a3a      	cmp	r2, #58	; 0x3a
   1c68a:	d80b      	bhi.n	1c6a4 <is_ptr+0x3e>
					return false;
   1c68c:	2000      	movs	r0, #0
}
   1c68e:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1c690:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   1c694:	2e3a      	cmp	r6, #58	; 0x3a
   1c696:	d805      	bhi.n	1c6a4 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1c698:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1c69a:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1c69c:	1c94      	adds	r4, r2, #2
   1c69e:	2b00      	cmp	r3, #0
   1c6a0:	d0e9      	beq.n	1c676 <is_ptr+0x10>
   1c6a2:	2000      	movs	r0, #0
		if (c == '%') {
   1c6a4:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   1c6a6:	4622      	mov	r2, r4
			mod = !mod;
   1c6a8:	bf08      	it	eq
   1c6aa:	f080 0001 	eoreq.w	r0, r0, #1
   1c6ae:	e7de      	b.n	1c66e <is_ptr+0x8>

0001c6b0 <arch_printk_char_out>:
}
   1c6b0:	2000      	movs	r0, #0
   1c6b2:	4770      	bx	lr

0001c6b4 <str_out>:
{
   1c6b4:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c6b6:	688a      	ldr	r2, [r1, #8]
   1c6b8:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1c6ba:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c6bc:	b114      	cbz	r4, 1c6c4 <str_out+0x10>
   1c6be:	684b      	ldr	r3, [r1, #4]
   1c6c0:	4293      	cmp	r3, r2
   1c6c2:	dc01      	bgt.n	1c6c8 <str_out+0x14>
		ctx->count++;
   1c6c4:	608d      	str	r5, [r1, #8]
}
   1c6c6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c6c8:	3b01      	subs	r3, #1
   1c6ca:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c6cc:	bf08      	it	eq
   1c6ce:	2200      	moveq	r2, #0
   1c6d0:	608d      	str	r5, [r1, #8]
   1c6d2:	bf0c      	ite	eq
   1c6d4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c6d6:	54a0      	strbne	r0, [r4, r2]
   1c6d8:	e7f5      	b.n	1c6c6 <str_out+0x12>

0001c6da <printk>:
{
   1c6da:	b40f      	push	{r0, r1, r2, r3}
   1c6dc:	b507      	push	{r0, r1, r2, lr}
   1c6de:	a904      	add	r1, sp, #16
   1c6e0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c6e4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1c6e6:	f7ed f9d7 	bl	9a98 <vprintk>
}
   1c6ea:	b003      	add	sp, #12
   1c6ec:	f85d eb04 	ldr.w	lr, [sp], #4
   1c6f0:	b004      	add	sp, #16
   1c6f2:	4770      	bx	lr

0001c6f4 <snprintk>:
{
   1c6f4:	b40c      	push	{r2, r3}
   1c6f6:	b507      	push	{r0, r1, r2, lr}
   1c6f8:	ab04      	add	r3, sp, #16
   1c6fa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c6fe:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c700:	f7ed f9d8 	bl	9ab4 <vsnprintk>
}
   1c704:	b003      	add	sp, #12
   1c706:	f85d eb04 	ldr.w	lr, [sp], #4
   1c70a:	b002      	add	sp, #8
   1c70c:	4770      	bx	lr

0001c70e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c70e:	4604      	mov	r4, r0
   1c710:	b508      	push	{r3, lr}
   1c712:	4608      	mov	r0, r1
   1c714:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1c716:	461a      	mov	r2, r3
   1c718:	47a0      	blx	r4
	return z_impl_z_current_get();
   1c71a:	f7fe fe3d 	bl	1b398 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1c71e:	f7f1 f841 	bl	d7a4 <z_impl_k_thread_abort>

0001c722 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   1c722:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1c726:	8840      	ldrh	r0, [r0, #2]
}
   1c728:	0840      	lsrs	r0, r0, #1
   1c72a:	4770      	bx	lr

0001c72c <free_list_add>:
{
   1c72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c72e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c730:	f7ff fff7 	bl	1c722 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1c734:	fab0 f080 	clz	r0, r0
   1c738:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1c73c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1c740:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   1c744:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   1c746:	1d17      	adds	r7, r2, #4
{
   1c748:	460c      	mov	r4, r1
   1c74a:	3206      	adds	r2, #6
   1c74c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1c74e:	b956      	cbnz	r6, 1c766 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1c750:	2101      	movs	r1, #1
   1c752:	fa01 f000 	lsl.w	r0, r1, r0
   1c756:	68d9      	ldr	r1, [r3, #12]
   1c758:	4301      	orrs	r1, r0
   1c75a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1c75c:	f8cc 4010 	str.w	r4, [ip, #16]
   1c760:	53dd      	strh	r5, [r3, r7]
   1c762:	529d      	strh	r5, [r3, r2]
}
   1c764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1c766:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1c768:	3104      	adds	r1, #4
   1c76a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1c76c:	53d8      	strh	r0, [r3, r7]
   1c76e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1c772:	529e      	strh	r6, [r3, r2]
   1c774:	80c5      	strh	r5, [r0, #6]
   1c776:	525d      	strh	r5, [r3, r1]
   1c778:	e7f4      	b.n	1c764 <free_list_add+0x38>

0001c77a <free_list_remove_bidx>:
{
   1c77a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1c77c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1c780:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1c782:	4299      	cmp	r1, r3
   1c784:	f102 0104 	add.w	r1, r2, #4
   1c788:	d10a      	bne.n	1c7a0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1c78a:	2301      	movs	r3, #1
   1c78c:	fa03 f202 	lsl.w	r2, r3, r2
   1c790:	68c3      	ldr	r3, [r0, #12]
   1c792:	ea23 0302 	bic.w	r3, r3, r2
   1c796:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1c798:	2300      	movs	r3, #0
   1c79a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1c79e:	bd10      	pop	{r4, pc}
   1c7a0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1c7a2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1c7a6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1c7aa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c7ae:	80cb      	strh	r3, [r1, #6]
   1c7b0:	8082      	strh	r2, [r0, #4]
}
   1c7b2:	e7f4      	b.n	1c79e <free_list_remove_bidx+0x24>

0001c7b4 <free_list_remove>:
{
   1c7b4:	b508      	push	{r3, lr}
   1c7b6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c7b8:	f7ff ffb3 	bl	1c722 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1c7bc:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1c7c0:	4618      	mov	r0, r3
}
   1c7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1c7c6:	f1c2 021f 	rsb	r2, r2, #31
   1c7ca:	f7ff bfd6 	b.w	1c77a <free_list_remove_bidx>

0001c7ce <alloc_chunk>:
{
   1c7ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c7d2:	fab1 f581 	clz	r5, r1
   1c7d6:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   1c7da:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   1c7de:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1c7e2:	4603      	mov	r3, r0
   1c7e4:	460e      	mov	r6, r1
	if (b->next) {
   1c7e6:	b1c2      	cbz	r2, 1c81a <alloc_chunk+0x4c>
   1c7e8:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1c7ea:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1c7ee:	4618      	mov	r0, r3
   1c7f0:	4621      	mov	r1, r4
   1c7f2:	f7ff ff96 	bl	1c722 <chunk_size>
   1c7f6:	42b0      	cmp	r0, r6
   1c7f8:	d306      	bcc.n	1c808 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1c7fa:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   1c7fc:	4618      	mov	r0, r3
   1c7fe:	f7ff ffbc 	bl	1c77a <free_list_remove_bidx>
}
   1c802:	4620      	mov	r0, r4
   1c804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1c808:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1c80c:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   1c80e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1c810:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1c814:	d001      	beq.n	1c81a <alloc_chunk+0x4c>
   1c816:	4282      	cmp	r2, r0
   1c818:	d1e7      	bne.n	1c7ea <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1c81a:	f04f 34ff 	mov.w	r4, #4294967295
   1c81e:	f1c5 0220 	rsb	r2, r5, #32
   1c822:	4094      	lsls	r4, r2
   1c824:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1c826:	4014      	ands	r4, r2
   1c828:	d0eb      	beq.n	1c802 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1c82a:	fa94 f2a4 	rbit	r2, r4
   1c82e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1c832:	1d11      	adds	r1, r2, #4
   1c834:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1c838:	4621      	mov	r1, r4
   1c83a:	e7df      	b.n	1c7fc <alloc_chunk+0x2e>

0001c83c <merge_chunks>:
{
   1c83c:	b538      	push	{r3, r4, r5, lr}
   1c83e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c840:	f7ff ff6f 	bl	1c722 <chunk_size>
{
   1c844:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c846:	4604      	mov	r4, r0
   1c848:	4611      	mov	r1, r2
   1c84a:	4618      	mov	r0, r3
   1c84c:	f7ff ff69 	bl	1c722 <chunk_size>
   1c850:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c852:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1c854:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1c858:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1c85a:	4618      	mov	r0, r3
   1c85c:	f7ff ff61 	bl	1c722 <chunk_size>
	void *cmem = &buf[c];
   1c860:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c862:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1c866:	bd38      	pop	{r3, r4, r5, pc}

0001c868 <split_chunks>:
{
   1c868:	b538      	push	{r3, r4, r5, lr}
   1c86a:	460c      	mov	r4, r1
   1c86c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1c86e:	f7ff ff58 	bl	1c722 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   1c872:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1c874:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1c876:	4405      	add	r5, r0
   1c878:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c87c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1c87e:	8060      	strh	r0, [r4, #2]
   1c880:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c884:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1c886:	8044      	strh	r4, [r0, #2]
   1c888:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1c88c:	4618      	mov	r0, r3
   1c88e:	4611      	mov	r1, r2
   1c890:	f7ff ff47 	bl	1c722 <chunk_size>
	void *cmem = &buf[c];
   1c894:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1c896:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1c89a:	bd38      	pop	{r3, r4, r5, pc}

0001c89c <free_chunk>:
{
   1c89c:	b538      	push	{r3, r4, r5, lr}
   1c89e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1c8a0:	f7ff ff3f 	bl	1c722 <chunk_size>
   1c8a4:	460c      	mov	r4, r1
   1c8a6:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1c8a8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c8ac:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1c8ae:	07da      	lsls	r2, r3, #31
   1c8b0:	d40a      	bmi.n	1c8c8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1c8b2:	4628      	mov	r0, r5
   1c8b4:	f7ff ff7e 	bl	1c7b4 <free_list_remove>
	return c + chunk_size(h, c);
   1c8b8:	4621      	mov	r1, r4
   1c8ba:	4628      	mov	r0, r5
   1c8bc:	f7ff ff31 	bl	1c722 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1c8c0:	1822      	adds	r2, r4, r0
   1c8c2:	4628      	mov	r0, r5
   1c8c4:	f7ff ffba 	bl	1c83c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1c8c8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c8cc:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1c8ce:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c8d2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1c8d4:	07db      	lsls	r3, r3, #31
   1c8d6:	d40c      	bmi.n	1c8f2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1c8d8:	4628      	mov	r0, r5
   1c8da:	f7ff ff6b 	bl	1c7b4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1c8de:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1c8e2:	4622      	mov	r2, r4
   1c8e4:	1a61      	subs	r1, r4, r1
   1c8e6:	4628      	mov	r0, r5
   1c8e8:	f7ff ffa8 	bl	1c83c <merge_chunks>
   1c8ec:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1c8f0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1c8f2:	4621      	mov	r1, r4
   1c8f4:	4628      	mov	r0, r5
}
   1c8f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1c8fa:	f7ff bf17 	b.w	1c72c <free_list_add>

0001c8fe <sys_heap_alloc>:
{
   1c8fe:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1c900:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1c902:	b909      	cbnz	r1, 1c908 <sys_heap_alloc+0xa>
		return NULL;
   1c904:	2000      	movs	r0, #0
}
   1c906:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1c908:	68ab      	ldr	r3, [r5, #8]
   1c90a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1c90e:	d9f9      	bls.n	1c904 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c910:	310b      	adds	r1, #11
   1c912:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1c914:	4621      	mov	r1, r4
   1c916:	4628      	mov	r0, r5
   1c918:	f7ff ff59 	bl	1c7ce <alloc_chunk>
	if (c == 0U) {
   1c91c:	4606      	mov	r6, r0
   1c91e:	2800      	cmp	r0, #0
   1c920:	d0f0      	beq.n	1c904 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1c922:	4601      	mov	r1, r0
   1c924:	4628      	mov	r0, r5
   1c926:	f7ff fefc 	bl	1c722 <chunk_size>
   1c92a:	42a0      	cmp	r0, r4
   1c92c:	d907      	bls.n	1c93e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1c92e:	4628      	mov	r0, r5
   1c930:	1932      	adds	r2, r6, r4
   1c932:	f7ff ff99 	bl	1c868 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1c936:	4611      	mov	r1, r2
   1c938:	4628      	mov	r0, r5
   1c93a:	f7ff fef7 	bl	1c72c <free_list_add>
	void *cmem = &buf[c];
   1c93e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c942:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c944:	8853      	ldrh	r3, [r2, #2]
   1c946:	3004      	adds	r0, #4
   1c948:	f043 0301 	orr.w	r3, r3, #1
   1c94c:	8053      	strh	r3, [r2, #2]
	return mem;
   1c94e:	e7da      	b.n	1c906 <sys_heap_alloc+0x8>

0001c950 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c950:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1c952:	f013 0307 	ands.w	r3, r3, #7
   1c956:	d105      	bne.n	1c964 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c958:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1c95a:	2b00      	cmp	r3, #0
   1c95c:	bf0c      	ite	eq
   1c95e:	2000      	moveq	r0, #0
   1c960:	2003      	movne	r0, #3
   1c962:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c964:	2b02      	cmp	r3, #2
   1c966:	d105      	bne.n	1c974 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c968:	8bc0      	ldrh	r0, [r0, #30]
   1c96a:	fab0 f080 	clz	r0, r0
   1c96e:	0940      	lsrs	r0, r0, #5
   1c970:	0080      	lsls	r0, r0, #2
   1c972:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c974:	2b01      	cmp	r3, #1
   1c976:	d105      	bne.n	1c984 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c978:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1c97a:	2b00      	cmp	r3, #0
   1c97c:	bf0c      	ite	eq
   1c97e:	2000      	moveq	r0, #0
   1c980:	2005      	movne	r0, #5
   1c982:	4770      	bx	lr
	int evt = EVT_NOP;
   1c984:	2000      	movs	r0, #0
}
   1c986:	4770      	bx	lr

0001c988 <validate_args>:
{
   1c988:	b510      	push	{r4, lr}
   1c98a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c98c:	b100      	cbz	r0, 1c990 <validate_args+0x8>
   1c98e:	b911      	cbnz	r1, 1c996 <validate_args+0xe>
		return -EINVAL;
   1c990:	f06f 0015 	mvn.w	r0, #21
}
   1c994:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1c996:	1d08      	adds	r0, r1, #4
   1c998:	f000 f82f 	bl	1c9fa <sys_notify_validate>
	if ((rv == 0)
   1c99c:	2800      	cmp	r0, #0
   1c99e:	d1f9      	bne.n	1c994 <validate_args+0xc>
	    && ((cli->notify.flags
   1c9a0:	68a3      	ldr	r3, [r4, #8]
   1c9a2:	2b03      	cmp	r3, #3
   1c9a4:	d9f6      	bls.n	1c994 <validate_args+0xc>
   1c9a6:	e7f3      	b.n	1c990 <validate_args+0x8>

0001c9a8 <notify_one>:
{
   1c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9ac:	460d      	mov	r5, r1
   1c9ae:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c9b0:	4619      	mov	r1, r3
   1c9b2:	1d28      	adds	r0, r5, #4
{
   1c9b4:	4690      	mov	r8, r2
   1c9b6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c9b8:	f7ed fc82 	bl	a2c0 <sys_notify_finalize>
	if (cb) {
   1c9bc:	4604      	mov	r4, r0
   1c9be:	b138      	cbz	r0, 1c9d0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c9c0:	4633      	mov	r3, r6
   1c9c2:	4642      	mov	r2, r8
   1c9c4:	4629      	mov	r1, r5
   1c9c6:	4638      	mov	r0, r7
   1c9c8:	46a4      	mov	ip, r4
}
   1c9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c9ce:	4760      	bx	ip
}
   1c9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c9d4 <onoff_manager_init>:
{
   1c9d4:	b538      	push	{r3, r4, r5, lr}
   1c9d6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c9d8:	4605      	mov	r5, r0
   1c9da:	b158      	cbz	r0, 1c9f4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c9dc:	b151      	cbz	r1, 1c9f4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c9de:	680b      	ldr	r3, [r1, #0]
   1c9e0:	b143      	cbz	r3, 1c9f4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c9e2:	684b      	ldr	r3, [r1, #4]
   1c9e4:	b133      	cbz	r3, 1c9f4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c9e6:	2220      	movs	r2, #32
   1c9e8:	2100      	movs	r1, #0
   1c9ea:	f001 f898 	bl	1db1e <memset>
	return 0;
   1c9ee:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c9f0:	612c      	str	r4, [r5, #16]
}
   1c9f2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c9f4:	f06f 0015 	mvn.w	r0, #21
   1c9f8:	e7fb      	b.n	1c9f2 <onoff_manager_init+0x1e>

0001c9fa <sys_notify_validate>:
	if (notify == NULL) {
   1c9fa:	4603      	mov	r3, r0
   1c9fc:	b140      	cbz	r0, 1ca10 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c9fe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1ca00:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1ca04:	2a02      	cmp	r2, #2
   1ca06:	d006      	beq.n	1ca16 <sys_notify_validate+0x1c>
   1ca08:	2a03      	cmp	r2, #3
   1ca0a:	d004      	beq.n	1ca16 <sys_notify_validate+0x1c>
   1ca0c:	2a01      	cmp	r2, #1
   1ca0e:	d005      	beq.n	1ca1c <sys_notify_validate+0x22>
   1ca10:	f06f 0015 	mvn.w	r0, #21
}
   1ca14:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1ca16:	681a      	ldr	r2, [r3, #0]
   1ca18:	2a00      	cmp	r2, #0
   1ca1a:	d0f9      	beq.n	1ca10 <sys_notify_validate+0x16>
		notify->result = 0;
   1ca1c:	2000      	movs	r0, #0
   1ca1e:	6098      	str	r0, [r3, #8]
   1ca20:	4770      	bx	lr

0001ca22 <encode_uint>:
{
   1ca22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca26:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1ca28:	78d3      	ldrb	r3, [r2, #3]
{
   1ca2a:	4680      	mov	r8, r0
	switch (specifier) {
   1ca2c:	2b6f      	cmp	r3, #111	; 0x6f
{
   1ca2e:	460f      	mov	r7, r1
   1ca30:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ca32:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1ca36:	d029      	beq.n	1ca8c <encode_uint+0x6a>
   1ca38:	d824      	bhi.n	1ca84 <encode_uint+0x62>
		return 10;
   1ca3a:	2b58      	cmp	r3, #88	; 0x58
   1ca3c:	bf0c      	ite	eq
   1ca3e:	2610      	moveq	r6, #16
   1ca40:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1ca42:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1ca46:	4632      	mov	r2, r6
   1ca48:	2300      	movs	r3, #0
   1ca4a:	4640      	mov	r0, r8
   1ca4c:	4639      	mov	r1, r7
   1ca4e:	f7eb ff71 	bl	8934 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca52:	2a09      	cmp	r2, #9
   1ca54:	b2d4      	uxtb	r4, r2
   1ca56:	d81e      	bhi.n	1ca96 <encode_uint+0x74>
   1ca58:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ca5a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca5c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1ca5e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca62:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1ca66:	d301      	bcc.n	1ca6c <encode_uint+0x4a>
   1ca68:	45d1      	cmp	r9, sl
   1ca6a:	d811      	bhi.n	1ca90 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1ca6c:	782b      	ldrb	r3, [r5, #0]
   1ca6e:	069b      	lsls	r3, r3, #26
   1ca70:	d505      	bpl.n	1ca7e <encode_uint+0x5c>
		if (radix == 8) {
   1ca72:	2e08      	cmp	r6, #8
   1ca74:	d115      	bne.n	1caa2 <encode_uint+0x80>
			conv->altform_0 = true;
   1ca76:	78ab      	ldrb	r3, [r5, #2]
   1ca78:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ca7c:	70ab      	strb	r3, [r5, #2]
}
   1ca7e:	4648      	mov	r0, r9
   1ca80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ca84:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1ca88:	2b70      	cmp	r3, #112	; 0x70
   1ca8a:	e7d7      	b.n	1ca3c <encode_uint+0x1a>
	switch (specifier) {
   1ca8c:	2608      	movs	r6, #8
   1ca8e:	e7d8      	b.n	1ca42 <encode_uint+0x20>
		value /= radix;
   1ca90:	4680      	mov	r8, r0
   1ca92:	460f      	mov	r7, r1
   1ca94:	e7d7      	b.n	1ca46 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ca96:	f1bb 0f19 	cmp.w	fp, #25
   1ca9a:	bf94      	ite	ls
   1ca9c:	3437      	addls	r4, #55	; 0x37
   1ca9e:	3457      	addhi	r4, #87	; 0x57
   1caa0:	e7db      	b.n	1ca5a <encode_uint+0x38>
		} else if (radix == 16) {
   1caa2:	2e10      	cmp	r6, #16
   1caa4:	d1eb      	bne.n	1ca7e <encode_uint+0x5c>
			conv->altform_0c = true;
   1caa6:	78ab      	ldrb	r3, [r5, #2]
   1caa8:	f043 0310 	orr.w	r3, r3, #16
   1caac:	e7e6      	b.n	1ca7c <encode_uint+0x5a>

0001caae <outs>:
{
   1caae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cab2:	4607      	mov	r7, r0
   1cab4:	4688      	mov	r8, r1
   1cab6:	4615      	mov	r5, r2
   1cab8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1caba:	4614      	mov	r4, r2
   1cabc:	42b4      	cmp	r4, r6
   1cabe:	d305      	bcc.n	1cacc <outs+0x1e>
   1cac0:	b10e      	cbz	r6, 1cac6 <outs+0x18>
	return (int)count;
   1cac2:	1b60      	subs	r0, r4, r5
   1cac4:	e008      	b.n	1cad8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1cac6:	7823      	ldrb	r3, [r4, #0]
   1cac8:	2b00      	cmp	r3, #0
   1caca:	d0fa      	beq.n	1cac2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1cacc:	4641      	mov	r1, r8
   1cace:	f814 0b01 	ldrb.w	r0, [r4], #1
   1cad2:	47b8      	blx	r7
		if (rc < 0) {
   1cad4:	2800      	cmp	r0, #0
   1cad6:	daf1      	bge.n	1cabc <outs+0xe>
}
   1cad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cadc <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1cadc:	4040      	eors	r0, r0
   1cade:	f380 8811 	msr	BASEPRI, r0
   1cae2:	f04f 0004 	mov.w	r0, #4
   1cae6:	df02      	svc	2
}
   1cae8:	4770      	bx	lr

0001caea <assert_print>:

void assert_print(const char *fmt, ...)
{
   1caea:	b40f      	push	{r0, r1, r2, r3}
   1caec:	b507      	push	{r0, r1, r2, lr}
   1caee:	a904      	add	r1, sp, #16
   1caf0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1caf4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1caf6:	f7ec ffcf 	bl	9a98 <vprintk>

	va_end(ap);
}
   1cafa:	b003      	add	sp, #12
   1cafc:	f85d eb04 	ldr.w	lr, [sp], #4
   1cb00:	b004      	add	sp, #16
   1cb02:	4770      	bx	lr

0001cb04 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1cb04:	68c3      	ldr	r3, [r0, #12]
   1cb06:	6802      	ldr	r2, [r0, #0]
   1cb08:	4293      	cmp	r3, r2
   1cb0a:	d904      	bls.n	1cb16 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   1cb0c:	3b01      	subs	r3, #1
   1cb0e:	1a9a      	subs	r2, r3, r2
		return false;
   1cb10:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1cb12:	600a      	str	r2, [r1, #0]
}
   1cb14:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1cb16:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   1cb18:	b913      	cbnz	r3, 1cb20 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   1cb1a:	3801      	subs	r0, #1
   1cb1c:	1a82      	subs	r2, r0, r2
		return false;
   1cb1e:	e7f7      	b.n	1cb10 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   1cb20:	1a82      	subs	r2, r0, r2
	return true;
   1cb22:	2001      	movs	r0, #1
   1cb24:	e7f5      	b.n	1cb12 <free_space+0xe>

0001cb26 <get_usage>:
{
   1cb26:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   1cb28:	a901      	add	r1, sp, #4
{
   1cb2a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1cb2c:	f7ff ffea 	bl	1cb04 <free_space>
   1cb30:	b120      	cbz	r0, 1cb3c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   1cb32:	9b01      	ldr	r3, [sp, #4]
   1cb34:	68e2      	ldr	r2, [r4, #12]
   1cb36:	3b01      	subs	r3, #1
   1cb38:	4413      	add	r3, r2
   1cb3a:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   1cb3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1cb3e:	9b01      	ldr	r3, [sp, #4]
   1cb40:	1ac0      	subs	r0, r0, r3
}
   1cb42:	3801      	subs	r0, #1
   1cb44:	b002      	add	sp, #8
   1cb46:	bd10      	pop	{r4, pc}

0001cb48 <idx_inc>:
{
   1cb48:	b510      	push	{r4, lr}
   1cb4a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1cb4c:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1cb4e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1cb50:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1cb52:	07d2      	lsls	r2, r2, #31
   1cb54:	d502      	bpl.n	1cb5c <idx_inc+0x14>
		return i & (buffer->size - 1);
   1cb56:	3b01      	subs	r3, #1
   1cb58:	4018      	ands	r0, r3
}
   1cb5a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   1cb5c:	4298      	cmp	r0, r3
   1cb5e:	bf28      	it	cs
   1cb60:	1ac0      	subcs	r0, r0, r3
   1cb62:	e7fa      	b.n	1cb5a <idx_inc+0x12>

0001cb64 <add_skip_item>:
{
   1cb64:	b538      	push	{r3, r4, r5, lr}
   1cb66:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1cb68:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   1cb6a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1cb6c:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   1cb6e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1cb72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1cb76:	6801      	ldr	r1, [r0, #0]
   1cb78:	462a      	mov	r2, r5
{
   1cb7a:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1cb7c:	f7ff ffe4 	bl	1cb48 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1cb80:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1cb82:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1cb84:	462a      	mov	r2, r5
   1cb86:	4620      	mov	r0, r4
   1cb88:	f7ff ffde 	bl	1cb48 <idx_inc>
   1cb8c:	6060      	str	r0, [r4, #4]
}
   1cb8e:	bd38      	pop	{r3, r4, r5, pc}

0001cb90 <max_utilization_update>:
{
   1cb90:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1cb92:	6903      	ldr	r3, [r0, #16]
{
   1cb94:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1cb96:	075b      	lsls	r3, r3, #29
   1cb98:	d506      	bpl.n	1cba8 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1cb9a:	6a85      	ldr	r5, [r0, #40]	; 0x28
   1cb9c:	f7ff ffc3 	bl	1cb26 <get_usage>
   1cba0:	4285      	cmp	r5, r0
   1cba2:	bf2c      	ite	cs
   1cba4:	62a5      	strcs	r5, [r4, #40]	; 0x28
   1cba6:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   1cba8:	bd38      	pop	{r3, r4, r5, pc}

0001cbaa <drop_item_locked>:
{
   1cbaa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbae:	461f      	mov	r7, r3
	*user_packet = false;
   1cbb0:	2300      	movs	r3, #0
   1cbb2:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1cbb4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1cbb8:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   1cbbc:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   1cbbe:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   1cbc2:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   1cbc4:	f003 0303 	and.w	r3, r3, #3
   1cbc8:	2b02      	cmp	r3, #2
{
   1cbca:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1cbcc:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1cbd0:	d103      	bne.n	1cbda <drop_item_locked+0x30>
		return item->skip.len;
   1cbd2:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1cbd6:	08ad      	lsrs	r5, r5, #2
   1cbd8:	d12e      	bne.n	1cc38 <drop_item_locked+0x8e>
   1cbda:	4630      	mov	r0, r6
   1cbdc:	69e3      	ldr	r3, [r4, #28]
   1cbde:	4798      	blx	r3
   1cbe0:	4605      	mov	r5, r0
	} else if (allow_drop) {
   1cbe2:	f1b8 0f00 	cmp.w	r8, #0
   1cbe6:	d038      	beq.n	1cc5a <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   1cbe8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   1cbec:	079b      	lsls	r3, r3, #30
   1cbee:	d531      	bpl.n	1cc54 <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   1cbf0:	4620      	mov	r0, r4
   1cbf2:	f10b 0101 	add.w	r1, fp, #1
   1cbf6:	f7ff ffb5 	bl	1cb64 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1cbfa:	6861      	ldr	r1, [r4, #4]
   1cbfc:	462a      	mov	r2, r5
   1cbfe:	4620      	mov	r0, r4
   1cc00:	f7ff ffa2 	bl	1cb48 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1cc04:	6821      	ldr	r1, [r4, #0]
   1cc06:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1cc08:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1cc0a:	4620      	mov	r0, r4
   1cc0c:	f7ff ff9c 	bl	1cb48 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1cc10:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   1cc12:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1cc14:	68e1      	ldr	r1, [r4, #12]
   1cc16:	4620      	mov	r0, r4
   1cc18:	f7ff ff96 	bl	1cb48 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1cc1c:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   1cc1e:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   1cc22:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   1cc26:	f002 0203 	and.w	r2, r2, #3
   1cc2a:	2a02      	cmp	r2, #2
   1cc2c:	d10e      	bne.n	1cc4c <drop_item_locked+0xa2>
		return item->skip.len;
   1cc2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   1cc32:	089b      	lsrs	r3, r3, #2
   1cc34:	d00a      	beq.n	1cc4c <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   1cc36:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   1cc38:	68e1      	ldr	r1, [r4, #12]
   1cc3a:	462a      	mov	r2, r5
   1cc3c:	4620      	mov	r0, r4
   1cc3e:	f7ff ff83 	bl	1cb48 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   1cc42:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   1cc46:	4630      	mov	r0, r6
   1cc48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   1cc4c:	4630      	mov	r0, r6
   1cc4e:	69e3      	ldr	r3, [r4, #28]
   1cc50:	4798      	blx	r3
   1cc52:	4405      	add	r5, r0
			*user_packet = true;
   1cc54:	2301      	movs	r3, #1
   1cc56:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1cc58:	e7ee      	b.n	1cc38 <drop_item_locked+0x8e>
		item = NULL;
   1cc5a:	4646      	mov	r6, r8
	return item;
   1cc5c:	e7f3      	b.n	1cc46 <drop_item_locked+0x9c>

0001cc5e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1cc5e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1cc62:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   1cc64:	bf88      	it	hi
   1cc66:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   1cc68:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1cc6a:	1e18      	subs	r0, r3, #0
   1cc6c:	bf18      	it	ne
   1cc6e:	2001      	movne	r0, #1
   1cc70:	4770      	bx	lr

0001cc72 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1cc72:	4770      	bx	lr

0001cc74 <nordicsemi_nrf53_init>:
{
   1cc74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1cc76:	f04f 0320 	mov.w	r3, #32
   1cc7a:	f3ef 8511 	mrs	r5, BASEPRI
   1cc7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc82:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   1cc86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1cc8a:	2401      	movs	r4, #1
   1cc8c:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   1cc8e:	4621      	mov	r1, r4
   1cc90:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   1cc94:	2021      	movs	r0, #33	; 0x21
   1cc96:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1cc9a:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1cc9e:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   1cca2:	f7ee fa9d 	bl	b1e0 <soc_secure_gpio_pin_mcu_select>
   1cca6:	4621      	mov	r1, r4
   1cca8:	2020      	movs	r0, #32
   1ccaa:	f7ee fa99 	bl	b1e0 <soc_secure_gpio_pin_mcu_select>
   1ccae:	4621      	mov	r1, r4
   1ccb0:	200b      	movs	r0, #11
   1ccb2:	f7ee fa95 	bl	b1e0 <soc_secure_gpio_pin_mcu_select>
   1ccb6:	4621      	mov	r1, r4
   1ccb8:	200a      	movs	r0, #10
   1ccba:	f7ee fa91 	bl	b1e0 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   1ccbe:	f385 8811 	msr	BASEPRI, r5
   1ccc2:	f3bf 8f6f 	isb	sy
}
   1ccc6:	2000      	movs	r0, #0
   1ccc8:	bd38      	pop	{r3, r4, r5, pc}

0001ccca <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1ccca:	2806      	cmp	r0, #6
   1cccc:	d108      	bne.n	1cce0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1ccce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1ccd2:	2201      	movs	r2, #1
   1ccd4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1ccd8:	f3bf 8f4f 	dsb	sy
        __WFE();
   1ccdc:	bf20      	wfe
    while (true)
   1ccde:	e7fd      	b.n	1ccdc <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1cce0:	4770      	bx	lr

0001cce2 <pm_state_exit_post_ops>:
   1cce2:	2300      	movs	r3, #0
   1cce4:	f383 8811 	msr	BASEPRI, r3
   1cce8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1ccec:	4770      	bx	lr

0001ccee <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1ccee:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1ccf0:	075b      	lsls	r3, r3, #29
   1ccf2:	d40b      	bmi.n	1cd0c <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1ccf4:	6803      	ldr	r3, [r0, #0]
   1ccf6:	8842      	ldrh	r2, [r0, #2]
   1ccf8:	f3c3 2349 	ubfx	r3, r3, #9, #10
   1ccfc:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   1cd00:	1898      	adds	r0, r3, r2
   1cd02:	3017      	adds	r0, #23
   1cd04:	f020 0007 	bic.w	r0, r0, #7
   1cd08:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   1cd0a:	4770      	bx	lr
	return 0;
   1cd0c:	2000      	movs	r0, #0
}
   1cd0e:	4770      	bx	lr

0001cd10 <dummy_timestamp>:
}
   1cd10:	2000      	movs	r0, #0
   1cd12:	4770      	bx	lr

0001cd14 <default_get_timestamp>:
   1cd14:	f002 ba55 	b.w	1f1c2 <sys_clock_cycle_get_32>

0001cd18 <atomic_inc>:
{
   1cd18:	4603      	mov	r3, r0
}
   1cd1a:	e8d3 0fef 	ldaex	r0, [r3]
   1cd1e:	1c42      	adds	r2, r0, #1
   1cd20:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1cd24:	2900      	cmp	r1, #0
   1cd26:	d1f8      	bne.n	1cd1a <atomic_inc+0x2>
   1cd28:	4770      	bx	lr

0001cd2a <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1cd2a:	2001      	movs	r0, #1
   1cd2c:	f7ee bb82 	b.w	b434 <z_log_dropped>

0001cd30 <z_log_get_tag>:
}
   1cd30:	2000      	movs	r0, #0
   1cd32:	4770      	bx	lr

0001cd34 <z_cbprintf_cpy>:
{
   1cd34:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   1cd36:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1cd3a:	1b9b      	subs	r3, r3, r6
   1cd3c:	428b      	cmp	r3, r1
{
   1cd3e:	460c      	mov	r4, r1
   1cd40:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   1cd42:	d30a      	bcc.n	1cd5a <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   1cd44:	6813      	ldr	r3, [r2, #0]
   1cd46:	460a      	mov	r2, r1
   1cd48:	4601      	mov	r1, r0
   1cd4a:	1998      	adds	r0, r3, r6
   1cd4c:	f000 fedc 	bl	1db08 <memcpy>
	return len;
   1cd50:	4620      	mov	r0, r4
	desc->off += len;
   1cd52:	68ab      	ldr	r3, [r5, #8]
   1cd54:	4423      	add	r3, r4
   1cd56:	60ab      	str	r3, [r5, #8]
}
   1cd58:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1cd5a:	f06f 001b 	mvn.w	r0, #27
   1cd5e:	e7fb      	b.n	1cd58 <z_cbprintf_cpy+0x24>

0001cd60 <z_log_msg_finalize>:
{
   1cd60:	b570      	push	{r4, r5, r6, lr}
   1cd62:	460e      	mov	r6, r1
   1cd64:	4615      	mov	r5, r2
   1cd66:	4619      	mov	r1, r3
	if (!msg) {
   1cd68:	4604      	mov	r4, r0
   1cd6a:	b918      	cbnz	r0, 1cd74 <z_log_msg_finalize+0x14>
}
   1cd6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1cd70:	f7ee bb60 	b.w	b434 <z_log_dropped>
	if (data) {
   1cd74:	b13b      	cbz	r3, 1cd86 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1cd76:	f3c2 2349 	ubfx	r3, r2, #9, #10
   1cd7a:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   1cd7c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1cd80:	4418      	add	r0, r3
   1cd82:	f000 fec1 	bl	1db08 <memcpy>
	msg->hdr.source = source;
   1cd86:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1cd8a:	4620      	mov	r0, r4
}
   1cd8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1cd90:	f7ee bd74 	b.w	b87c <z_log_msg_commit>

0001cd94 <buffer_write>:
{
   1cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd96:	4606      	mov	r6, r0
   1cd98:	460d      	mov	r5, r1
   1cd9a:	4614      	mov	r4, r2
   1cd9c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1cd9e:	4621      	mov	r1, r4
   1cda0:	4628      	mov	r0, r5
   1cda2:	463a      	mov	r2, r7
   1cda4:	47b0      	blx	r6
	} while (len != 0);
   1cda6:	1a24      	subs	r4, r4, r0
		buf += processed;
   1cda8:	4405      	add	r5, r0
	} while (len != 0);
   1cdaa:	d1f8      	bne.n	1cd9e <buffer_write+0xa>
}
   1cdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cdae <cbvprintf>:
{
   1cdae:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1cdb0:	2400      	movs	r4, #0
   1cdb2:	9400      	str	r4, [sp, #0]
   1cdb4:	f7ed fab0 	bl	a318 <z_cbvprintf_impl>
}
   1cdb8:	b002      	add	sp, #8
   1cdba:	bd10      	pop	{r4, pc}

0001cdbc <log_output_flush>:
{
   1cdbc:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1cdbe:	6842      	ldr	r2, [r0, #4]
{
   1cdc0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1cdc2:	e9d2 2300 	ldrd	r2, r3, [r2]
   1cdc6:	6881      	ldr	r1, [r0, #8]
   1cdc8:	6800      	ldr	r0, [r0, #0]
   1cdca:	f7ff ffe3 	bl	1cd94 <buffer_write>
	output->control_block->offset = 0;
   1cdce:	2200      	movs	r2, #0
   1cdd0:	6863      	ldr	r3, [r4, #4]
   1cdd2:	601a      	str	r2, [r3, #0]
}
   1cdd4:	bd10      	pop	{r4, pc}

0001cdd6 <cr_out_func>:
	if (c == '\n') {
   1cdd6:	280a      	cmp	r0, #10
{
   1cdd8:	b538      	push	{r3, r4, r5, lr}
   1cdda:	4604      	mov	r4, r0
   1cddc:	460d      	mov	r5, r1
	if (c == '\n') {
   1cdde:	d102      	bne.n	1cde6 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1cde0:	200d      	movs	r0, #13
   1cde2:	f7ee fe17 	bl	ba14 <out_func>
	out_func(c, ctx);
   1cde6:	4629      	mov	r1, r5
   1cde8:	4620      	mov	r0, r4
   1cdea:	f7ee fe13 	bl	ba14 <out_func>
}
   1cdee:	2000      	movs	r0, #0
   1cdf0:	bd38      	pop	{r3, r4, r5, pc}

0001cdf2 <z_log_msg_static_create.constprop.0>:
   1cdf2:	2300      	movs	r3, #0
   1cdf4:	f7ee bd88 	b.w	b908 <z_impl_z_log_msg_static_create>

0001cdf8 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   1cdf8:	6903      	ldr	r3, [r0, #16]
}
   1cdfa:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
   1cdfe:	4770      	bx	lr

0001ce00 <drop_tx_buffer>:
}
   1ce00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ce04:	4770      	bx	lr

0001ce06 <release_rx_buffer>:
{
   1ce06:	4608      	mov	r0, r1
   1ce08:	b508      	push	{r3, lr}
   1ce0a:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1ce0c:	b118      	cbz	r0, 1ce16 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   1ce0e:	f002 ff00 	bl	1fc12 <rpmsg_release_rx_buffer>
	return 0;
   1ce12:	2000      	movs	r0, #0
}
   1ce14:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1ce16:	f06f 0001 	mvn.w	r0, #1
   1ce1a:	e7fb      	b.n	1ce14 <release_rx_buffer+0xe>

0001ce1c <hold_rx_buffer>:
{
   1ce1c:	4608      	mov	r0, r1
   1ce1e:	b508      	push	{r3, lr}
   1ce20:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1ce22:	b118      	cbz	r0, 1ce2c <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1ce24:	f002 feed 	bl	1fc02 <rpmsg_hold_rx_buffer>
	return 0;
   1ce28:	2000      	movs	r0, #0
}
   1ce2a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1ce2c:	f06f 0001 	mvn.w	r0, #1
   1ce30:	e7fb      	b.n	1ce2a <hold_rx_buffer+0xe>

0001ce32 <send_nocopy>:
{
   1ce32:	b513      	push	{r0, r1, r4, lr}
   1ce34:	4604      	mov	r4, r0
   1ce36:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ce38:	6921      	ldr	r1, [r4, #16]
   1ce3a:	f501 7155 	add.w	r1, r1, #852	; 0x354
   1ce3e:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1ce42:	2902      	cmp	r1, #2
   1ce44:	d109      	bne.n	1ce5a <send_nocopy+0x28>
	if (len == 0) {
   1ce46:	b15b      	cbz	r3, 1ce60 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   1ce48:	b168      	cbz	r0, 1ce66 <send_nocopy+0x34>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   1ce4a:	9300      	str	r3, [sp, #0]
   1ce4c:	4613      	mov	r3, r2
   1ce4e:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1ce52:	f7fb f897 	bl	17f84 <rpmsg_send_offchannel_nocopy>
}
   1ce56:	b002      	add	sp, #8
   1ce58:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1ce5a:	f06f 000f 	mvn.w	r0, #15
   1ce5e:	e7fa      	b.n	1ce56 <send_nocopy+0x24>
		return -EBADMSG;
   1ce60:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1ce64:	e7f7      	b.n	1ce56 <send_nocopy+0x24>
		return -ENOENT;
   1ce66:	f06f 0001 	mvn.w	r0, #1
   1ce6a:	e7f4      	b.n	1ce56 <send_nocopy+0x24>

0001ce6c <get_tx_buffer>:
{
   1ce6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce70:	461c      	mov	r4, r3
   1ce72:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   1ce76:	4616      	mov	r6, r2
   1ce78:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   1ce7a:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   1ce7c:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   1ce7e:	b339      	cbz	r1, 1ced0 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   1ce80:	b34a      	cbz	r2, 1ced6 <get_tx_buffer+0x6a>
   1ce82:	b344      	cbz	r4, 1ced6 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   1ce84:	1c6a      	adds	r2, r5, #1
   1ce86:	f143 0300 	adc.w	r3, r3, #0
   1ce8a:	2a02      	cmp	r2, #2
   1ce8c:	f173 0300 	sbcs.w	r3, r3, #0
   1ce90:	d224      	bcs.n	1cedc <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   1ce92:	6822      	ldr	r2, [r4, #0]
   1ce94:	b142      	cbz	r2, 1cea8 <get_tx_buffer+0x3c>
   1ce96:	f8d0 3358 	ldr.w	r3, [r0, #856]	; 0x358
   1ce9a:	429a      	cmp	r2, r3
   1ce9c:	d904      	bls.n	1cea8 <get_tx_buffer+0x3c>
		return -ENOMEM;
   1ce9e:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   1cea2:	6023      	str	r3, [r4, #0]
}
   1cea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   1cea8:	ea05 0908 	and.w	r9, r5, r8
   1ceac:	f109 0301 	add.w	r3, r9, #1
   1ceb0:	425a      	negs	r2, r3
   1ceb2:	415a      	adcs	r2, r3
   1ceb4:	4621      	mov	r1, r4
   1ceb6:	4638      	mov	r0, r7
   1ceb8:	f002 feb3 	bl	1fc22 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   1cebc:	b988      	cbnz	r0, 1cee2 <get_tx_buffer+0x76>
   1cebe:	f1b8 3fff 	cmp.w	r8, #4294967295
   1cec2:	bf08      	it	eq
   1cec4:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1cec8:	d0f0      	beq.n	1ceac <get_tx_buffer+0x40>
		return -ENOBUFS;
   1ceca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1cece:	e7e9      	b.n	1cea4 <get_tx_buffer+0x38>
		return -ENOENT;
   1ced0:	f06f 0001 	mvn.w	r0, #1
   1ced4:	e7e6      	b.n	1cea4 <get_tx_buffer+0x38>
		return -EINVAL;
   1ced6:	f06f 0015 	mvn.w	r0, #21
   1ceda:	e7e3      	b.n	1cea4 <get_tx_buffer+0x38>
		return -ENOTSUP;
   1cedc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cee0:	e7e0      	b.n	1cea4 <get_tx_buffer+0x38>
	(*r_data) = payload;
   1cee2:	6030      	str	r0, [r6, #0]
	return 0;
   1cee4:	2000      	movs	r0, #0
   1cee6:	e7dd      	b.n	1cea4 <get_tx_buffer+0x38>

0001cee8 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1cee8:	f002 bee0 	b.w	1fcac <rpmsg_destroy_ept>

0001ceec <get_ept_slot_with_name>:
{
   1ceec:	b538      	push	{r3, r4, r5, lr}
   1ceee:	460d      	mov	r5, r1
   1cef0:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1cef2:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1cef6:	4628      	mov	r0, r5
   1cef8:	f000 fdd7 	bl	1daaa <strcmp>
   1cefc:	b130      	cbz	r0, 1cf0c <get_ept_slot_with_name+0x20>
   1cefe:	4628      	mov	r0, r5
   1cf00:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1cf04:	f000 fdd1 	bl	1daaa <strcmp>
   1cf08:	b920      	cbnz	r0, 1cf14 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1cf0a:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   1cf0c:	2370      	movs	r3, #112	; 0x70
   1cf0e:	fb03 4000 	mla	r0, r3, r0, r4
}
   1cf12:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cf14:	2000      	movs	r0, #0
   1cf16:	e7fc      	b.n	1cf12 <get_ept_slot_with_name+0x26>

0001cf18 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   1cf18:	f502 7126 	add.w	r1, r2, #664	; 0x298
   1cf1c:	f502 702a 	add.w	r0, r2, #680	; 0x2a8
   1cf20:	f003 b8e7 	b.w	200f2 <k_work_submit_to_queue>

0001cf24 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1cf24:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   1cf28:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1cf2c:	3b00      	subs	r3, #0
   1cf2e:	bf18      	it	ne
   1cf30:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1cf32:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1cf36:	f8d0 0284 	ldr.w	r0, [r0, #644]	; 0x284
   1cf3a:	f002 be14 	b.w	1fb66 <virtqueue_notification>

0001cf3e <ept_cb>:
{
   1cf3e:	b510      	push	{r4, lr}
   1cf40:	4608      	mov	r0, r1
   1cf42:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   1cf44:	4611      	mov	r1, r2
   1cf46:	b952      	cbnz	r2, 1cf5e <ept_cb+0x20>
		if (!ept->bound) {
   1cf48:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1cf4c:	b92a      	cbnz	r2, 1cf5a <ept_cb+0x1c>
			ept->bound = true;
   1cf4e:	2201      	movs	r2, #1
			bound_cb(ept);
   1cf50:	4618      	mov	r0, r3
			ept->bound = true;
   1cf52:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   1cf56:	f7ef f867 	bl	c028 <bound_cb>
}
   1cf5a:	2000      	movs	r0, #0
   1cf5c:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   1cf5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1cf60:	6854      	ldr	r4, [r2, #4]
   1cf62:	2c00      	cmp	r4, #0
   1cf64:	d0f9      	beq.n	1cf5a <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   1cf66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1cf68:	47a0      	blx	r4
   1cf6a:	e7f6      	b.n	1cf5a <ept_cb+0x1c>

0001cf6c <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   1cf6c:	68cb      	ldr	r3, [r1, #12]
   1cf6e:	b133      	cbz	r3, 1cf7e <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1cf70:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1cf72:	6883      	ldr	r3, [r0, #8]
   1cf74:	681b      	ldr	r3, [r3, #0]
   1cf76:	b113      	cbz	r3, 1cf7e <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   1cf78:	2200      	movs	r2, #0
   1cf7a:	6909      	ldr	r1, [r1, #16]
   1cf7c:	4718      	bx	r3
}
   1cf7e:	4770      	bx	lr

0001cf80 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1cf80:	f7fc b8f2 	b.w	19168 <z_impl_k_mutex_unlock>

0001cf84 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cf84:	e8d0 3fef 	ldaex	r3, [r0]
   1cf88:	e8c0 1fe2 	stlex	r2, r1, [r0]
   1cf8c:	2a00      	cmp	r2, #0
   1cf8e:	d1f9      	bne.n	1cf84 <atomic_set.isra.0>
}
   1cf90:	4770      	bx	lr

0001cf92 <backend_init>:
{
   1cf92:	b510      	push	{r4, lr}
	data->role = conf->role;
   1cf94:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   1cf96:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   1cf98:	681b      	ldr	r3, [r3, #0]
   1cf9a:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
	return z_impl_k_mutex_init(mutex);
   1cf9e:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   1cfa2:	f003 f80e 	bl	1ffc2 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   1cfa6:	2100      	movs	r1, #0
   1cfa8:	f504 7055 	add.w	r0, r4, #852	; 0x354
   1cfac:	f7ff ffea 	bl	1cf84 <atomic_set.isra.0>
}
   1cfb0:	4608      	mov	r0, r1
   1cfb2:	bd10      	pop	{r4, pc}

0001cfb4 <ns_bind_cb>:
{
   1cfb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cfb8:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   1cfba:	460d      	mov	r5, r1
   1cfbc:	b379      	cbz	r1, 1d01e <ns_bind_cb+0x6a>
   1cfbe:	780b      	ldrb	r3, [r1, #0]
   1cfc0:	b36b      	cbz	r3, 1d01e <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   1cfc2:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
   1cfc6:	f5a4 78c4 	sub.w	r8, r4, #392	; 0x188
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   1cfca:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1cfcc:	f04f 32ff 	mov.w	r2, #4294967295
   1cfd0:	f04f 33ff 	mov.w	r3, #4294967295
   1cfd4:	4620      	mov	r0, r4
   1cfd6:	f7fb fff7 	bl	18fc8 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   1cfda:	462a      	mov	r2, r5
   1cfdc:	4640      	mov	r0, r8
   1cfde:	a901      	add	r1, sp, #4
   1cfe0:	f7ef f85c 	bl	c09c <get_ept>
	if (rpmsg_ept == NULL) {
   1cfe4:	9e01      	ldr	r6, [sp, #4]
   1cfe6:	b92e      	cbnz	r6, 1cff4 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1cfe8:	4620      	mov	r0, r4
}
   1cfea:	b002      	add	sp, #8
   1cfec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   1cff0:	f7ff bfc6 	b.w	1cf80 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   1cff4:	b158      	cbz	r0, 1d00e <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1cff6:	4620      	mov	r0, r4
   1cff8:	f7ff ffc2 	bl	1cf80 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1cffc:	463b      	mov	r3, r7
   1cffe:	462a      	mov	r2, r5
   1d000:	4631      	mov	r1, r6
   1d002:	4640      	mov	r0, r8
}
   1d004:	b002      	add	sp, #8
   1d006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1d00a:	f7ef b825 	b.w	c058 <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   1d00e:	2220      	movs	r2, #32
   1d010:	4629      	mov	r1, r5
   1d012:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1d016:	f000 fd24 	bl	1da62 <strncpy>
		rpmsg_ept->dest = dest;
   1d01a:	6637      	str	r7, [r6, #96]	; 0x60
   1d01c:	e7e4      	b.n	1cfe8 <ns_bind_cb+0x34>
}
   1d01e:	b002      	add	sp, #8
   1d020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d024 <deregister_ept>:
{
   1d024:	b510      	push	{r4, lr}
   1d026:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d028:	6903      	ldr	r3, [r0, #16]
   1d02a:	f503 7355 	add.w	r3, r3, #852	; 0x354
   1d02e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1d032:	2b02      	cmp	r3, #2
   1d034:	d10a      	bne.n	1d04c <deregister_ept+0x28>
	if (!rpmsg_ept) {
   1d036:	b161      	cbz	r1, 1d052 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   1d038:	4608      	mov	r0, r1
   1d03a:	f002 fe37 	bl	1fcac <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   1d03e:	2270      	movs	r2, #112	; 0x70
   1d040:	2100      	movs	r1, #0
   1d042:	4620      	mov	r0, r4
   1d044:	f000 fd6b 	bl	1db1e <memset>
	return 0;
   1d048:	2000      	movs	r0, #0
}
   1d04a:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1d04c:	f06f 000f 	mvn.w	r0, #15
   1d050:	e7fb      	b.n	1d04a <deregister_ept+0x26>
		return -ENOENT;
   1d052:	f06f 0001 	mvn.w	r0, #1
   1d056:	e7f8      	b.n	1d04a <deregister_ept+0x26>

0001d058 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1d058:	f002 be28 	b.w	1fcac <rpmsg_destroy_ept>

0001d05c <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   1d05c:	b538      	push	{r3, r4, r5, lr}
   1d05e:	460d      	mov	r5, r1
	if (!instance) {
   1d060:	4604      	mov	r4, r0
   1d062:	b160      	cbz	r0, 1d07e <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   1d064:	30e0      	adds	r0, #224	; 0xe0
   1d066:	f002 ff55 	bl	1ff14 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   1d06a:	b10d      	cbz	r5, 1d070 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   1d06c:	2000      	movs	r0, #0
}
   1d06e:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   1d070:	220c      	movs	r2, #12
   1d072:	4629      	mov	r1, r5
   1d074:	f504 70c4 	add.w	r0, r4, #392	; 0x188
   1d078:	f000 fd51 	bl	1db1e <memset>
   1d07c:	e7f6      	b.n	1d06c <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   1d07e:	f06f 0015 	mvn.w	r0, #21
   1d082:	e7f4      	b.n	1d06e <ipc_rpmsg_deinit+0x12>

0001d084 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   1d084:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   1d086:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1d08a:	b113      	cbz	r3, 1d092 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   1d08c:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   1d090:	4718      	bx	r3
}
   1d092:	4770      	bx	lr

0001d094 <virtio_set_features>:
}
   1d094:	4770      	bx	lr

0001d096 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   1d096:	6983      	ldr	r3, [r0, #24]
   1d098:	b913      	cbnz	r3, 1d0a0 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   1d09a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1d09e:	7019      	strb	r1, [r3, #0]
}
   1d0a0:	4770      	bx	lr

0001d0a2 <virtio_get_features>:
}
   1d0a2:	2001      	movs	r0, #1
   1d0a4:	4770      	bx	lr

0001d0a6 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   1d0a6:	6983      	ldr	r3, [r0, #24]
   1d0a8:	2b01      	cmp	r3, #1
   1d0aa:	d104      	bne.n	1d0b6 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   1d0ac:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1d0b0:	7818      	ldrb	r0, [r3, #0]
   1d0b2:	b2c0      	uxtb	r0, r0
   1d0b4:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   1d0b6:	2004      	movs	r0, #4
}
   1d0b8:	4770      	bx	lr

0001d0ba <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   1d0ba:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   1d0bc:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   1d0be:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   1d0c0:	4620      	mov	r0, r4
   1d0c2:	f003 f952 	bl	2036a <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1d0c6:	4605      	mov	r5, r0
   1d0c8:	b118      	cbz	r0, 1d0d2 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   1d0ca:	4622      	mov	r2, r4
   1d0cc:	2100      	movs	r1, #0
   1d0ce:	f000 fd26 	bl	1db1e <memset>
	}

	return vqs;
}
   1d0d2:	4628      	mov	r0, r5
   1d0d4:	bd38      	pop	{r3, r4, r5, pc}

0001d0d6 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   1d0d6:	b538      	push	{r3, r4, r5, lr}
   1d0d8:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   1d0da:	2230      	movs	r2, #48	; 0x30
   1d0dc:	2100      	movs	r1, #0
   1d0de:	f000 fd1e 	bl	1db1e <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   1d0e2:	2218      	movs	r2, #24
   1d0e4:	2100      	movs	r1, #0
   1d0e6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1d0ea:	f000 fd18 	bl	1db1e <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   1d0ee:	2218      	movs	r2, #24
   1d0f0:	2100      	movs	r1, #0
   1d0f2:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1d0f6:	f000 fd12 	bl	1db1e <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   1d0fa:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1d0fe:	f7fa fef7 	bl	17ef0 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1d102:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   1d106:	f7fa fef3 	bl	17ef0 <virtqueue_free>
	vr->shm_io = 0;
   1d10a:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   1d10c:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1d110:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1d114:	f7fa fe08 	bl	17d28 <metal_device_close>
	metal_finish();
   1d118:	f7fa fe62 	bl	17de0 <metal_finish>
	if (io->ops.close)
   1d11c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   1d11e:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1d122:	b10b      	cbz	r3, 1d128 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1d124:	4628      	mov	r0, r5
   1d126:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   1d128:	2238      	movs	r2, #56	; 0x38
   1d12a:	2100      	movs	r1, #0
   1d12c:	4628      	mov	r0, r5
   1d12e:	f000 fcf6 	bl	1db1e <memset>

	return 0;
}
   1d132:	2000      	movs	r0, #0
   1d134:	bd38      	pop	{r3, r4, r5, pc}

0001d136 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d136:	b538      	push	{r3, r4, r5, lr}
   1d138:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d13a:	42ab      	cmp	r3, r5
{
   1d13c:	4611      	mov	r1, r2
   1d13e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d140:	d804      	bhi.n	1d14c <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d142:	461a      	mov	r2, r3
   1d144:	f000 fce0 	bl	1db08 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d148:	4620      	mov	r0, r4
   1d14a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d14c:	2400      	movs	r4, #0
   1d14e:	e7fb      	b.n	1d148 <_copy+0x12>

0001d150 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d150:	f000 bce5 	b.w	1db1e <memset>

0001d154 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d154:	09c3      	lsrs	r3, r0, #7
   1d156:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d15a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d15e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d162:	b2c0      	uxtb	r0, r0
   1d164:	4770      	bx	lr

0001d166 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d166:	78cb      	ldrb	r3, [r1, #3]
   1d168:	7802      	ldrb	r2, [r0, #0]
   1d16a:	4053      	eors	r3, r2
   1d16c:	7003      	strb	r3, [r0, #0]
   1d16e:	884b      	ldrh	r3, [r1, #2]
   1d170:	7842      	ldrb	r2, [r0, #1]
   1d172:	4053      	eors	r3, r2
   1d174:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d176:	680a      	ldr	r2, [r1, #0]
   1d178:	7883      	ldrb	r3, [r0, #2]
   1d17a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d17e:	7083      	strb	r3, [r0, #2]
   1d180:	680a      	ldr	r2, [r1, #0]
   1d182:	78c3      	ldrb	r3, [r0, #3]
   1d184:	4053      	eors	r3, r2
   1d186:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d188:	79cb      	ldrb	r3, [r1, #7]
   1d18a:	7902      	ldrb	r2, [r0, #4]
   1d18c:	4053      	eors	r3, r2
   1d18e:	7103      	strb	r3, [r0, #4]
   1d190:	88cb      	ldrh	r3, [r1, #6]
   1d192:	7942      	ldrb	r2, [r0, #5]
   1d194:	4053      	eors	r3, r2
   1d196:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d198:	684a      	ldr	r2, [r1, #4]
   1d19a:	7983      	ldrb	r3, [r0, #6]
   1d19c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d1a0:	7183      	strb	r3, [r0, #6]
   1d1a2:	684a      	ldr	r2, [r1, #4]
   1d1a4:	79c3      	ldrb	r3, [r0, #7]
   1d1a6:	4053      	eors	r3, r2
   1d1a8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d1aa:	7acb      	ldrb	r3, [r1, #11]
   1d1ac:	7a02      	ldrb	r2, [r0, #8]
   1d1ae:	4053      	eors	r3, r2
   1d1b0:	7203      	strb	r3, [r0, #8]
   1d1b2:	7a42      	ldrb	r2, [r0, #9]
   1d1b4:	894b      	ldrh	r3, [r1, #10]
   1d1b6:	4053      	eors	r3, r2
   1d1b8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d1ba:	688a      	ldr	r2, [r1, #8]
   1d1bc:	7a83      	ldrb	r3, [r0, #10]
   1d1be:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d1c2:	7283      	strb	r3, [r0, #10]
   1d1c4:	688a      	ldr	r2, [r1, #8]
   1d1c6:	7ac3      	ldrb	r3, [r0, #11]
   1d1c8:	4053      	eors	r3, r2
   1d1ca:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d1cc:	7bcb      	ldrb	r3, [r1, #15]
   1d1ce:	7b02      	ldrb	r2, [r0, #12]
   1d1d0:	4053      	eors	r3, r2
   1d1d2:	7303      	strb	r3, [r0, #12]
   1d1d4:	89cb      	ldrh	r3, [r1, #14]
   1d1d6:	7b42      	ldrb	r2, [r0, #13]
   1d1d8:	4053      	eors	r3, r2
   1d1da:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d1dc:	68ca      	ldr	r2, [r1, #12]
   1d1de:	7b83      	ldrb	r3, [r0, #14]
   1d1e0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d1e4:	7383      	strb	r3, [r0, #14]
   1d1e6:	68ca      	ldr	r2, [r1, #12]
   1d1e8:	7bc3      	ldrb	r3, [r0, #15]
   1d1ea:	4053      	eors	r3, r2
   1d1ec:	73c3      	strb	r3, [r0, #15]
}
   1d1ee:	4770      	bx	lr

0001d1f0 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1d1f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d1f2:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d1f4:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d1f6:	f88d 2000 	strb.w	r2, [sp]
   1d1fa:	7942      	ldrb	r2, [r0, #5]
   1d1fc:	f88d 2001 	strb.w	r2, [sp, #1]
   1d200:	7a82      	ldrb	r2, [r0, #10]
   1d202:	f88d 2002 	strb.w	r2, [sp, #2]
   1d206:	7bc2      	ldrb	r2, [r0, #15]
   1d208:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d20c:	7902      	ldrb	r2, [r0, #4]
   1d20e:	f88d 2004 	strb.w	r2, [sp, #4]
   1d212:	7a42      	ldrb	r2, [r0, #9]
   1d214:	f88d 2005 	strb.w	r2, [sp, #5]
   1d218:	7b82      	ldrb	r2, [r0, #14]
   1d21a:	f88d 2006 	strb.w	r2, [sp, #6]
   1d21e:	78c2      	ldrb	r2, [r0, #3]
   1d220:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d224:	7a02      	ldrb	r2, [r0, #8]
   1d226:	f88d 2008 	strb.w	r2, [sp, #8]
   1d22a:	7b42      	ldrb	r2, [r0, #13]
   1d22c:	f88d 2009 	strb.w	r2, [sp, #9]
   1d230:	7882      	ldrb	r2, [r0, #2]
   1d232:	f88d 200a 	strb.w	r2, [sp, #10]
   1d236:	79c2      	ldrb	r2, [r0, #7]
   1d238:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d23c:	7b02      	ldrb	r2, [r0, #12]
   1d23e:	f88d 200c 	strb.w	r2, [sp, #12]
   1d242:	7842      	ldrb	r2, [r0, #1]
   1d244:	f88d 200d 	strb.w	r2, [sp, #13]
   1d248:	7982      	ldrb	r2, [r0, #6]
   1d24a:	f88d 200e 	strb.w	r2, [sp, #14]
   1d24e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d252:	2310      	movs	r3, #16
   1d254:	466a      	mov	r2, sp
   1d256:	4619      	mov	r1, r3
   1d258:	f7ff ff6d 	bl	1d136 <_copy>
}
   1d25c:	b005      	add	sp, #20
   1d25e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d262 <mult_row_column>:
{
   1d262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d264:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d266:	7808      	ldrb	r0, [r1, #0]
{
   1d268:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d26a:	f7ff ff73 	bl	1d154 <_double_byte>
   1d26e:	4605      	mov	r5, r0
   1d270:	7860      	ldrb	r0, [r4, #1]
   1d272:	f7ff ff6f 	bl	1d154 <_double_byte>
   1d276:	78a2      	ldrb	r2, [r4, #2]
   1d278:	7863      	ldrb	r3, [r4, #1]
   1d27a:	4053      	eors	r3, r2
   1d27c:	78e2      	ldrb	r2, [r4, #3]
   1d27e:	4053      	eors	r3, r2
   1d280:	405d      	eors	r5, r3
   1d282:	4068      	eors	r0, r5
   1d284:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d286:	7860      	ldrb	r0, [r4, #1]
   1d288:	7827      	ldrb	r7, [r4, #0]
   1d28a:	f7ff ff63 	bl	1d154 <_double_byte>
   1d28e:	4605      	mov	r5, r0
   1d290:	78a0      	ldrb	r0, [r4, #2]
   1d292:	f7ff ff5f 	bl	1d154 <_double_byte>
   1d296:	78a3      	ldrb	r3, [r4, #2]
   1d298:	405f      	eors	r7, r3
   1d29a:	78e3      	ldrb	r3, [r4, #3]
   1d29c:	405f      	eors	r7, r3
   1d29e:	407d      	eors	r5, r7
   1d2a0:	4068      	eors	r0, r5
   1d2a2:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d2a4:	7863      	ldrb	r3, [r4, #1]
   1d2a6:	7827      	ldrb	r7, [r4, #0]
   1d2a8:	78a0      	ldrb	r0, [r4, #2]
   1d2aa:	405f      	eors	r7, r3
   1d2ac:	f7ff ff52 	bl	1d154 <_double_byte>
   1d2b0:	4605      	mov	r5, r0
   1d2b2:	78e0      	ldrb	r0, [r4, #3]
   1d2b4:	f7ff ff4e 	bl	1d154 <_double_byte>
   1d2b8:	78e3      	ldrb	r3, [r4, #3]
   1d2ba:	405f      	eors	r7, r3
   1d2bc:	407d      	eors	r5, r7
   1d2be:	4068      	eors	r0, r5
   1d2c0:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d2c2:	7820      	ldrb	r0, [r4, #0]
   1d2c4:	f7ff ff46 	bl	1d154 <_double_byte>
   1d2c8:	7862      	ldrb	r2, [r4, #1]
   1d2ca:	7823      	ldrb	r3, [r4, #0]
   1d2cc:	4053      	eors	r3, r2
   1d2ce:	78a2      	ldrb	r2, [r4, #2]
   1d2d0:	4053      	eors	r3, r2
   1d2d2:	ea80 0503 	eor.w	r5, r0, r3
   1d2d6:	78e0      	ldrb	r0, [r4, #3]
   1d2d8:	f7ff ff3c 	bl	1d154 <_double_byte>
   1d2dc:	b2ed      	uxtb	r5, r5
   1d2de:	4045      	eors	r5, r0
   1d2e0:	70f5      	strb	r5, [r6, #3]
}
   1d2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d2e4 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1d2e4:	b570      	push	{r4, r5, r6, lr}
   1d2e6:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1d2e8:	4605      	mov	r5, r0
{
   1d2ea:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1d2ec:	2800      	cmp	r0, #0
   1d2ee:	d049      	beq.n	1d384 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1d2f0:	2900      	cmp	r1, #0
   1d2f2:	d049      	beq.n	1d388 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1d2f4:	2a00      	cmp	r2, #0
   1d2f6:	d049      	beq.n	1d38c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1d2f8:	2310      	movs	r3, #16
   1d2fa:	460a      	mov	r2, r1
   1d2fc:	4668      	mov	r0, sp
   1d2fe:	4619      	mov	r1, r3
   1d300:	f7ff ff19 	bl	1d136 <_copy>
	add_round_key(state, s->words);
   1d304:	4621      	mov	r1, r4
   1d306:	4668      	mov	r0, sp
   1d308:	f7ff ff2d 	bl	1d166 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1d30c:	3410      	adds	r4, #16
   1d30e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1d312:	4668      	mov	r0, sp
   1d314:	f7ef fb4a 	bl	c9ac <sub_bytes>
		shift_rows(state);
   1d318:	4668      	mov	r0, sp
   1d31a:	f7ff ff69 	bl	1d1f0 <shift_rows>
	mult_row_column(t, s);
   1d31e:	4669      	mov	r1, sp
   1d320:	a804      	add	r0, sp, #16
   1d322:	f7ff ff9e 	bl	1d262 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1d326:	a901      	add	r1, sp, #4
   1d328:	a805      	add	r0, sp, #20
   1d32a:	f7ff ff9a 	bl	1d262 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1d32e:	a902      	add	r1, sp, #8
   1d330:	a806      	add	r0, sp, #24
   1d332:	f7ff ff96 	bl	1d262 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1d336:	a903      	add	r1, sp, #12
   1d338:	a807      	add	r0, sp, #28
   1d33a:	f7ff ff92 	bl	1d262 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d33e:	2310      	movs	r3, #16
   1d340:	4668      	mov	r0, sp
   1d342:	4619      	mov	r1, r3
   1d344:	eb0d 0203 	add.w	r2, sp, r3
   1d348:	f7ff fef5 	bl	1d136 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1d34c:	4621      	mov	r1, r4
   1d34e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1d350:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1d352:	f7ff ff08 	bl	1d166 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1d356:	42b4      	cmp	r4, r6
   1d358:	d1db      	bne.n	1d312 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1d35a:	f7ef fb27 	bl	c9ac <sub_bytes>
	shift_rows(state);
   1d35e:	4668      	mov	r0, sp
   1d360:	f7ff ff46 	bl	1d1f0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1d364:	4621      	mov	r1, r4
   1d366:	4668      	mov	r0, sp
   1d368:	f7ff fefd 	bl	1d166 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1d36c:	2310      	movs	r3, #16
   1d36e:	466a      	mov	r2, sp
   1d370:	4619      	mov	r1, r3
   1d372:	4628      	mov	r0, r5
   1d374:	f7ff fedf 	bl	1d136 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1d378:	4668      	mov	r0, sp
   1d37a:	2210      	movs	r2, #16
   1d37c:	2100      	movs	r1, #0
   1d37e:	f7ff fee7 	bl	1d150 <_set>

	return TC_CRYPTO_SUCCESS;
   1d382:	2001      	movs	r0, #1
}
   1d384:	b008      	add	sp, #32
   1d386:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d388:	4608      	mov	r0, r1
   1d38a:	e7fb      	b.n	1d384 <tc_aes_encrypt+0xa0>
   1d38c:	4610      	mov	r0, r2
   1d38e:	e7f9      	b.n	1d384 <tc_aes_encrypt+0xa0>

0001d390 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d390:	460a      	mov	r2, r1
{
   1d392:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d394:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1d398:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d39a:	2b00      	cmp	r3, #0
   1d39c:	bfac      	ite	ge
   1d39e:	2300      	movge	r3, #0
   1d3a0:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d3a2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d3a6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d3aa:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1d3ac:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d3b0:	d002      	beq.n	1d3b8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d3b2:	7813      	ldrb	r3, [r2, #0]
   1d3b4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d3b6:	e7f4      	b.n	1d3a2 <gf_double+0x12>
	}
}
   1d3b8:	bd10      	pop	{r4, pc}

0001d3ba <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d3ba:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d3bc:	b120      	cbz	r0, 1d3c8 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d3be:	2258      	movs	r2, #88	; 0x58
   1d3c0:	2100      	movs	r1, #0
   1d3c2:	f7ff fec5 	bl	1d150 <_set>
   1d3c6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d3c8:	bd08      	pop	{r3, pc}

0001d3ca <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d3ca:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d3cc:	4604      	mov	r4, r0
   1d3ce:	b188      	cbz	r0, 1d3f4 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d3d0:	2210      	movs	r2, #16
   1d3d2:	2100      	movs	r1, #0
   1d3d4:	f7ff febc 	bl	1d150 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d3d8:	2210      	movs	r2, #16
   1d3da:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d3de:	2100      	movs	r1, #0
   1d3e0:	f7ff feb6 	bl	1d150 <_set>
	s->leftover_offset = 0;
   1d3e4:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d3e6:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1d3e8:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1d3ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d3ee:	2001      	movs	r0, #1
   1d3f0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1d3f4:	bd10      	pop	{r4, pc}

0001d3f6 <tc_cmac_setup>:
{
   1d3f6:	b570      	push	{r4, r5, r6, lr}
   1d3f8:	4604      	mov	r4, r0
   1d3fa:	460d      	mov	r5, r1
   1d3fc:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d3fe:	b310      	cbz	r0, 1d446 <tc_cmac_setup+0x50>
   1d400:	b311      	cbz	r1, 1d448 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d402:	2258      	movs	r2, #88	; 0x58
   1d404:	2100      	movs	r1, #0
   1d406:	f7ff fea3 	bl	1d150 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d40a:	4629      	mov	r1, r5
   1d40c:	4630      	mov	r0, r6
	s->sched = sched;
   1d40e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d410:	f7ef fad8 	bl	c9c4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d414:	2210      	movs	r2, #16
   1d416:	2100      	movs	r1, #0
   1d418:	4620      	mov	r0, r4
   1d41a:	f7ff fe99 	bl	1d150 <_set>
	gf_double (s->K1, s->iv);
   1d41e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d422:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d424:	4621      	mov	r1, r4
   1d426:	4620      	mov	r0, r4
   1d428:	f7ff ff5c 	bl	1d2e4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d42c:	4621      	mov	r1, r4
   1d42e:	4628      	mov	r0, r5
   1d430:	f7ff ffae 	bl	1d390 <gf_double>
	gf_double (s->K2, s->K1);
   1d434:	4629      	mov	r1, r5
   1d436:	f104 0020 	add.w	r0, r4, #32
   1d43a:	f7ff ffa9 	bl	1d390 <gf_double>
	tc_cmac_init(s);
   1d43e:	4620      	mov	r0, r4
   1d440:	f7ff ffc3 	bl	1d3ca <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d444:	2001      	movs	r0, #1
}
   1d446:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d448:	4608      	mov	r0, r1
   1d44a:	e7fc      	b.n	1d446 <tc_cmac_setup+0x50>

0001d44c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d450:	460e      	mov	r6, r1
   1d452:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d454:	4604      	mov	r4, r0
   1d456:	2800      	cmp	r0, #0
   1d458:	d060      	beq.n	1d51c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d45a:	b1fa      	cbz	r2, 1d49c <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1d45c:	2900      	cmp	r1, #0
   1d45e:	d05d      	beq.n	1d51c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1d460:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1d464:	ea53 0102 	orrs.w	r1, r3, r2
   1d468:	d058      	beq.n	1d51c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1d46a:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1d46c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1d470:	f142 32ff 	adc.w	r2, r2, #4294967295
   1d474:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d478:	f1b8 0f00 	cmp.w	r8, #0
   1d47c:	d02c      	beq.n	1d4d8 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d47e:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d482:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1d486:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d488:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1d48a:	d20a      	bcs.n	1d4a2 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d48c:	462b      	mov	r3, r5
   1d48e:	4632      	mov	r2, r6
   1d490:	4629      	mov	r1, r5
   1d492:	f7ff fe50 	bl	1d136 <_copy>
			s->leftover_offset += data_length;
   1d496:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d498:	442b      	add	r3, r5
   1d49a:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1d49c:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1d49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1d4a2:	463b      	mov	r3, r7
   1d4a4:	4632      	mov	r2, r6
   1d4a6:	4639      	mov	r1, r7
   1d4a8:	f7ff fe45 	bl	1d136 <_copy>
		s->leftover_offset = 0;
   1d4ac:	2300      	movs	r3, #0
   1d4ae:	3d10      	subs	r5, #16
   1d4b0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d4b2:	4445      	add	r5, r8
		data += remaining_space;
   1d4b4:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d4b6:	1e63      	subs	r3, r4, #1
   1d4b8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d4bc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d4c0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d4c4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d4c6:	ea82 0200 	eor.w	r2, r2, r0
   1d4ca:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d4cc:	d1f6      	bne.n	1d4bc <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d4ce:	4621      	mov	r1, r4
   1d4d0:	4620      	mov	r0, r4
   1d4d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d4d4:	f7ff ff06 	bl	1d2e4 <tc_aes_encrypt>
   1d4d8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d4dc:	2d10      	cmp	r5, #16
   1d4de:	d80a      	bhi.n	1d4f6 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1d4e0:	2d00      	cmp	r5, #0
   1d4e2:	d0db      	beq.n	1d49c <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1d4e4:	462b      	mov	r3, r5
   1d4e6:	4632      	mov	r2, r6
   1d4e8:	4629      	mov	r1, r5
   1d4ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d4ee:	f7ff fe22 	bl	1d136 <_copy>
		s->leftover_offset = data_length;
   1d4f2:	6465      	str	r5, [r4, #68]	; 0x44
   1d4f4:	e7d2      	b.n	1d49c <tc_cmac_update+0x50>
   1d4f6:	1e63      	subs	r3, r4, #1
   1d4f8:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1d4fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d4fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d502:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d504:	ea82 0200 	eor.w	r2, r2, r0
   1d508:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d50a:	d1f6      	bne.n	1d4fa <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d50c:	4621      	mov	r1, r4
   1d50e:	4620      	mov	r0, r4
   1d510:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d512:	f7ff fee7 	bl	1d2e4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d516:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d518:	3d10      	subs	r5, #16
   1d51a:	e7df      	b.n	1d4dc <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1d51c:	2000      	movs	r0, #0
   1d51e:	e7be      	b.n	1d49e <tc_cmac_update+0x52>

0001d520 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d520:	b570      	push	{r4, r5, r6, lr}
   1d522:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d524:	4605      	mov	r5, r0
   1d526:	b1f0      	cbz	r0, 1d566 <tc_cmac_final+0x46>
   1d528:	b371      	cbz	r1, 1d588 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d52a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d52c:	2a10      	cmp	r2, #16
   1d52e:	d11b      	bne.n	1d568 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d530:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d532:	1e63      	subs	r3, r4, #1
   1d534:	3901      	subs	r1, #1
   1d536:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d53a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d53e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d542:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d544:	ea82 0206 	eor.w	r2, r2, r6
   1d548:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1d54c:	ea82 0206 	eor.w	r2, r2, r6
   1d550:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d552:	d1f2      	bne.n	1d53a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d554:	4621      	mov	r1, r4
   1d556:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d558:	4628      	mov	r0, r5
   1d55a:	f7ff fec3 	bl	1d2e4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d55e:	4620      	mov	r0, r4
   1d560:	f7ff ff2b 	bl	1d3ba <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d564:	2001      	movs	r0, #1
}
   1d566:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d568:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d56c:	2100      	movs	r1, #0
   1d56e:	f1c2 0210 	rsb	r2, r2, #16
   1d572:	4420      	add	r0, r4
   1d574:	f7ff fdec 	bl	1d150 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d578:	2280      	movs	r2, #128	; 0x80
   1d57a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1d57c:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d580:	4423      	add	r3, r4
   1d582:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d586:	e7d4      	b.n	1d532 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d588:	4608      	mov	r0, r1
   1d58a:	e7ec      	b.n	1d566 <tc_cmac_final+0x46>

0001d58c <tc_sha256_update>:
{
   1d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d58e:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1d590:	b110      	cbz	r0, 1d598 <tc_sha256_update+0xc>
   1d592:	b1f9      	cbz	r1, 1d5d4 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1d594:	b90a      	cbnz	r2, 1d59a <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1d596:	2001      	movs	r0, #1
}
   1d598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1d59a:	2700      	movs	r7, #0
   1d59c:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1d59e:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   1d5a2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1d5a4:	1c5a      	adds	r2, r3, #1
   1d5a6:	6682      	str	r2, [r0, #104]	; 0x68
   1d5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d5ac:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1d5ae:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1d5b0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1d5b4:	d90b      	bls.n	1d5ce <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   1d5b6:	4631      	mov	r1, r6
   1d5b8:	f7ef fa58 	bl	ca6c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1d5bc:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1d5c0:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1d5c4:	f142 0200 	adc.w	r2, r2, #0
   1d5c8:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1d5cc:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   1d5ce:	42a5      	cmp	r5, r4
   1d5d0:	d1e7      	bne.n	1d5a2 <tc_sha256_update+0x16>
   1d5d2:	e7e0      	b.n	1d596 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   1d5d4:	4608      	mov	r0, r1
   1d5d6:	e7df      	b.n	1d598 <tc_sha256_update+0xc>

0001d5d8 <tc_sha256_final>:
{
   1d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d5da:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1d5dc:	4605      	mov	r5, r0
   1d5de:	2800      	cmp	r0, #0
   1d5e0:	d054      	beq.n	1d68c <tc_sha256_final+0xb4>
   1d5e2:	2900      	cmp	r1, #0
   1d5e4:	d053      	beq.n	1d68e <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   1d5e6:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1d5e8:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1d5ec:	00d8      	lsls	r0, r3, #3
   1d5ee:	1812      	adds	r2, r2, r0
   1d5f0:	f141 0100 	adc.w	r1, r1, #0
   1d5f4:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1d5f8:	2280      	movs	r2, #128	; 0x80
   1d5fa:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1d5fc:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1d5fe:	4423      	add	r3, r4
   1d600:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1d602:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1d606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1d60a:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1d60e:	d90a      	bls.n	1d626 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1d610:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1d614:	4639      	mov	r1, r7
   1d616:	4430      	add	r0, r6
   1d618:	f7ff fd9a 	bl	1d150 <_set>
		compress(s->iv, s->leftover);
   1d61c:	4631      	mov	r1, r6
   1d61e:	4620      	mov	r0, r4
   1d620:	f7ef fa24 	bl	ca6c <compress>
		s->leftover_offset = 0;
   1d624:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1d626:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1d628:	2100      	movs	r1, #0
   1d62a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1d62e:	4430      	add	r0, r6
   1d630:	f7ff fd8e 	bl	1d150 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1d634:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1d636:	4631      	mov	r1, r6
   1d638:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1d63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1d63c:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1d63e:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1d640:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1d644:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1d648:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1d64a:	0e1b      	lsrs	r3, r3, #24
   1d64c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   1d650:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1d652:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1d656:	f7ef fa09 	bl	ca6c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1d65a:	1d2b      	adds	r3, r5, #4
   1d65c:	1f21      	subs	r1, r4, #4
   1d65e:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1d660:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1d664:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1d666:	0e10      	lsrs	r0, r2, #24
   1d668:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1d66c:	0c10      	lsrs	r0, r2, #16
   1d66e:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1d672:	0a10      	lsrs	r0, r2, #8
   1d674:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1d678:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1d67c:	42ab      	cmp	r3, r5
   1d67e:	d1ef      	bne.n	1d660 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   1d680:	4620      	mov	r0, r4
   1d682:	2270      	movs	r2, #112	; 0x70
   1d684:	2100      	movs	r1, #0
   1d686:	f7ff fd63 	bl	1d150 <_set>
	return TC_CRYPTO_SUCCESS;
   1d68a:	2001      	movs	r0, #1
}
   1d68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1d68e:	4608      	mov	r0, r1
   1d690:	e7fc      	b.n	1d68c <tc_sha256_final+0xb4>

0001d692 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1d692:	b530      	push	{r4, r5, lr}
   1d694:	1e43      	subs	r3, r0, #1
   1d696:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1d698:	42a9      	cmp	r1, r5
   1d69a:	d106      	bne.n	1d6aa <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1d69c:	2136      	movs	r1, #54	; 0x36
   1d69e:	245c      	movs	r4, #92	; 0x5c
   1d6a0:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1d6a2:	1a13      	subs	r3, r2, r0
   1d6a4:	2b3f      	cmp	r3, #63	; 0x3f
   1d6a6:	d90c      	bls.n	1d6c2 <rekey+0x30>
	}
}
   1d6a8:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1d6aa:	780c      	ldrb	r4, [r1, #0]
   1d6ac:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1d6b0:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1d6b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d6b8:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1d6bc:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1d6c0:	e7ea      	b.n	1d698 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1d6c2:	f802 1b01 	strb.w	r1, [r2], #1
   1d6c6:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1d6ca:	e7ea      	b.n	1d6a2 <rekey+0x10>

0001d6cc <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1d6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6ce:	460e      	mov	r6, r1
   1d6d0:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1d6d2:	4605      	mov	r5, r0
{
   1d6d4:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1d6d6:	b1b8      	cbz	r0, 1d708 <tc_hmac_set_key+0x3c>
   1d6d8:	b341      	cbz	r1, 1d72c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1d6da:	b34a      	cbz	r2, 1d730 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1d6dc:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1d6de:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1d6e2:	d813      	bhi.n	1d70c <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1d6e4:	a810      	add	r0, sp, #64	; 0x40
   1d6e6:	f7ef faab 	bl	cc40 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1d6ea:	4622      	mov	r2, r4
   1d6ec:	4669      	mov	r1, sp
   1d6ee:	a810      	add	r0, sp, #64	; 0x40
   1d6f0:	f7ff ff4c 	bl	1d58c <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1d6f4:	a910      	add	r1, sp, #64	; 0x40
   1d6f6:	a834      	add	r0, sp, #208	; 0xd0
   1d6f8:	f7ff ff6e 	bl	1d5d8 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1d6fc:	4622      	mov	r2, r4
   1d6fe:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1d700:	4638      	mov	r0, r7
   1d702:	f7ff ffc6 	bl	1d692 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1d706:	2001      	movs	r0, #1
}
   1d708:	b04d      	add	sp, #308	; 0x134
   1d70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1d70c:	f7ef fa98 	bl	cc40 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1d710:	4622      	mov	r2, r4
   1d712:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1d714:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1d718:	4628      	mov	r0, r5
   1d71a:	f7ff ff37 	bl	1d58c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1d71e:	4629      	mov	r1, r5
   1d720:	4620      	mov	r0, r4
   1d722:	f7ff ff59 	bl	1d5d8 <tc_sha256_final>
		rekey(ctx->key,
   1d726:	2220      	movs	r2, #32
   1d728:	4621      	mov	r1, r4
   1d72a:	e7e9      	b.n	1d700 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1d72c:	4608      	mov	r0, r1
   1d72e:	e7eb      	b.n	1d708 <tc_hmac_set_key+0x3c>
   1d730:	4610      	mov	r0, r2
   1d732:	e7e9      	b.n	1d708 <tc_hmac_set_key+0x3c>

0001d734 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1d734:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1d736:	4604      	mov	r4, r0
   1d738:	b140      	cbz	r0, 1d74c <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1d73a:	f7ef fa81 	bl	cc40 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1d73e:	2240      	movs	r2, #64	; 0x40
   1d740:	4620      	mov	r0, r4
   1d742:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1d746:	f7ff ff21 	bl	1d58c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1d74a:	2001      	movs	r0, #1
}
   1d74c:	bd10      	pop	{r4, pc}

0001d74e <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1d74e:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1d750:	b110      	cbz	r0, 1d758 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1d752:	f7ff ff1b 	bl	1d58c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1d756:	2001      	movs	r0, #1
}
   1d758:	bd08      	pop	{r3, pc}

0001d75a <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1d75a:	b570      	push	{r4, r5, r6, lr}
   1d75c:	460e      	mov	r6, r1
   1d75e:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d760:	4605      	mov	r5, r0
   1d762:	b1f0      	cbz	r0, 1d7a2 <tc_hmac_final+0x48>
   1d764:	2920      	cmp	r1, #32
   1d766:	d11c      	bne.n	1d7a2 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1d768:	b1ea      	cbz	r2, 1d7a6 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1d76a:	4611      	mov	r1, r2
   1d76c:	f7ff ff34 	bl	1d5d8 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1d770:	4620      	mov	r0, r4
   1d772:	f7ef fa65 	bl	cc40 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1d776:	2240      	movs	r2, #64	; 0x40
   1d778:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1d77c:	4620      	mov	r0, r4
   1d77e:	f7ff ff05 	bl	1d58c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1d782:	4632      	mov	r2, r6
   1d784:	4629      	mov	r1, r5
   1d786:	4620      	mov	r0, r4
   1d788:	f7ff ff00 	bl	1d58c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1d78c:	4621      	mov	r1, r4
   1d78e:	4628      	mov	r0, r5
   1d790:	f7ff ff22 	bl	1d5d8 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1d794:	4620      	mov	r0, r4
   1d796:	22f0      	movs	r2, #240	; 0xf0
   1d798:	2100      	movs	r1, #0
   1d79a:	f7ff fcd9 	bl	1d150 <_set>

	return TC_CRYPTO_SUCCESS;
   1d79e:	2001      	movs	r0, #1
}
   1d7a0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d7a2:	2000      	movs	r0, #0
   1d7a4:	e7fc      	b.n	1d7a0 <tc_hmac_final+0x46>
   1d7a6:	4610      	mov	r0, r2
   1d7a8:	e7fa      	b.n	1d7a0 <tc_hmac_final+0x46>

0001d7aa <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1d7aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7ae:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1d7b0:	f04f 0b01 	mov.w	fp, #1
{
   1d7b4:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1d7b6:	2300      	movs	r3, #0
{
   1d7b8:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d7ba:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1d7be:	4631      	mov	r1, r6
{
   1d7c0:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d7c2:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1d7c4:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1d7c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1d7cc:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d7d0:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d7d4:	f7ff ff7a 	bl	1d6cc <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1d7d8:	4620      	mov	r0, r4
   1d7da:	f7ff ffab 	bl	1d734 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d7de:	2220      	movs	r2, #32
   1d7e0:	4629      	mov	r1, r5
   1d7e2:	4620      	mov	r0, r4
   1d7e4:	f7ff ffb3 	bl	1d74e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1d7e8:	465a      	mov	r2, fp
   1d7ea:	4620      	mov	r0, r4
   1d7ec:	f10d 0106 	add.w	r1, sp, #6
   1d7f0:	f7ff ffad 	bl	1d74e <tc_hmac_update>

	if (data && datalen)
   1d7f4:	f1b8 0f00 	cmp.w	r8, #0
   1d7f8:	d007      	beq.n	1d80a <update+0x60>
   1d7fa:	f1b9 0f00 	cmp.w	r9, #0
   1d7fe:	d004      	beq.n	1d80a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1d800:	464a      	mov	r2, r9
   1d802:	4641      	mov	r1, r8
   1d804:	4620      	mov	r0, r4
   1d806:	f7ff ffa2 	bl	1d74e <tc_hmac_update>
	if (additional_data && additional_datalen)
   1d80a:	b13f      	cbz	r7, 1d81c <update+0x72>
   1d80c:	f1ba 0f00 	cmp.w	sl, #0
   1d810:	d004      	beq.n	1d81c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1d812:	4652      	mov	r2, sl
   1d814:	4639      	mov	r1, r7
   1d816:	4620      	mov	r0, r4
   1d818:	f7ff ff99 	bl	1d74e <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1d81c:	4622      	mov	r2, r4
   1d81e:	2120      	movs	r1, #32
   1d820:	4630      	mov	r0, r6
   1d822:	f7ff ff9a 	bl	1d75a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d826:	2220      	movs	r2, #32
   1d828:	4631      	mov	r1, r6
   1d82a:	4620      	mov	r0, r4
   1d82c:	f7ff ff4e 	bl	1d6cc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1d830:	4620      	mov	r0, r4
   1d832:	f7ff ff7f 	bl	1d734 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d836:	2220      	movs	r2, #32
   1d838:	4629      	mov	r1, r5
   1d83a:	4620      	mov	r0, r4
   1d83c:	f7ff ff87 	bl	1d74e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1d840:	4622      	mov	r2, r4
   1d842:	2120      	movs	r1, #32
   1d844:	4628      	mov	r0, r5
   1d846:	f7ff ff88 	bl	1d75a <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1d84a:	f1b8 0f00 	cmp.w	r8, #0
   1d84e:	d03a      	beq.n	1d8c6 <update+0x11c>
   1d850:	f1b9 0f00 	cmp.w	r9, #0
   1d854:	d037      	beq.n	1d8c6 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d856:	2220      	movs	r2, #32
   1d858:	4631      	mov	r1, r6
   1d85a:	4620      	mov	r0, r4
   1d85c:	f7ff ff36 	bl	1d6cc <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1d860:	4620      	mov	r0, r4
   1d862:	f7ff ff67 	bl	1d734 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d866:	2220      	movs	r2, #32
   1d868:	4629      	mov	r1, r5
   1d86a:	4620      	mov	r0, r4
   1d86c:	f7ff ff6f 	bl	1d74e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1d870:	2201      	movs	r2, #1
   1d872:	f10d 0107 	add.w	r1, sp, #7
   1d876:	4620      	mov	r0, r4
   1d878:	f7ff ff69 	bl	1d74e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1d87c:	464a      	mov	r2, r9
   1d87e:	4641      	mov	r1, r8
   1d880:	4620      	mov	r0, r4
   1d882:	f7ff ff64 	bl	1d74e <tc_hmac_update>
	if (additional_data && additional_datalen)
   1d886:	b13f      	cbz	r7, 1d898 <update+0xee>
   1d888:	f1ba 0f00 	cmp.w	sl, #0
   1d88c:	d004      	beq.n	1d898 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1d88e:	4652      	mov	r2, sl
   1d890:	4639      	mov	r1, r7
   1d892:	4620      	mov	r0, r4
   1d894:	f7ff ff5b 	bl	1d74e <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1d898:	4622      	mov	r2, r4
   1d89a:	2120      	movs	r1, #32
   1d89c:	4630      	mov	r0, r6
   1d89e:	f7ff ff5c 	bl	1d75a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d8a2:	2220      	movs	r2, #32
   1d8a4:	4631      	mov	r1, r6
   1d8a6:	4620      	mov	r0, r4
   1d8a8:	f7ff ff10 	bl	1d6cc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1d8ac:	4620      	mov	r0, r4
   1d8ae:	f7ff ff41 	bl	1d734 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d8b2:	2220      	movs	r2, #32
   1d8b4:	4629      	mov	r1, r5
   1d8b6:	4620      	mov	r0, r4
   1d8b8:	f7ff ff49 	bl	1d74e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1d8bc:	4622      	mov	r2, r4
   1d8be:	2120      	movs	r1, #32
   1d8c0:	4628      	mov	r0, r5
   1d8c2:	f7ff ff4a 	bl	1d75a <tc_hmac_final>
}
   1d8c6:	b003      	add	sp, #12
   1d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d8cc <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1d8cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d8ce:	460c      	mov	r4, r1
   1d8d0:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1d8d2:	4605      	mov	r5, r0
   1d8d4:	b1b0      	cbz	r0, 1d904 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1d8d6:	b1b9      	cbz	r1, 1d908 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1d8d8:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1d8da:	2220      	movs	r2, #32
   1d8dc:	2100      	movs	r1, #0
   1d8de:	30f0      	adds	r0, #240	; 0xf0
   1d8e0:	f7ff fc36 	bl	1d150 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1d8e4:	2220      	movs	r2, #32
   1d8e6:	2101      	movs	r1, #1
   1d8e8:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1d8ec:	f7ff fc30 	bl	1d150 <_set>
	update(prng, personalization, plen, 0, 0);
   1d8f0:	4628      	mov	r0, r5
   1d8f2:	4633      	mov	r3, r6
   1d8f4:	463a      	mov	r2, r7
   1d8f6:	4621      	mov	r1, r4
   1d8f8:	9600      	str	r6, [sp, #0]
   1d8fa:	f7ff ff56 	bl	1d7aa <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1d8fe:	2001      	movs	r0, #1
	prng->countdown = 0;
   1d900:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1d904:	b003      	add	sp, #12
   1d906:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1d908:	4608      	mov	r0, r1
   1d90a:	e7fb      	b.n	1d904 <tc_hmac_prng_init+0x38>

0001d90c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1d90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d90e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1d910:	4605      	mov	r5, r0
   1d912:	b180      	cbz	r0, 1d936 <tc_hmac_prng_reseed+0x2a>
   1d914:	b179      	cbz	r1, 1d936 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1d916:	2a1f      	cmp	r2, #31
   1d918:	d90d      	bls.n	1d936 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1d91a:	b153      	cbz	r3, 1d932 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1d91c:	b16c      	cbz	r4, 1d93a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1d91e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1d920:	f7ff ff43 	bl	1d7aa <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1d924:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1d928:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1d92a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1d92e:	b003      	add	sp, #12
   1d930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1d932:	9300      	str	r3, [sp, #0]
   1d934:	e7f4      	b.n	1d920 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1d936:	2000      	movs	r0, #0
   1d938:	e7f9      	b.n	1d92e <tc_hmac_prng_reseed+0x22>
   1d93a:	4620      	mov	r0, r4
   1d93c:	e7f7      	b.n	1d92e <tc_hmac_prng_reseed+0x22>

0001d93e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1d93e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d942:	460d      	mov	r5, r1
   1d944:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1d946:	4680      	mov	r8, r0
   1d948:	b3d8      	cbz	r0, 1d9c2 <tc_hmac_prng_generate+0x84>
   1d94a:	b3d2      	cbz	r2, 1d9c2 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1d94c:	1e4b      	subs	r3, r1, #1
   1d94e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1d952:	d236      	bcs.n	1d9c2 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1d954:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1d958:	b3ab      	cbz	r3, 1d9c6 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1d95a:	3b01      	subs	r3, #1
   1d95c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d960:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d964:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1d968:	2220      	movs	r2, #32
   1d96a:	4649      	mov	r1, r9
   1d96c:	4620      	mov	r0, r4
   1d96e:	f7ff fead 	bl	1d6cc <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1d972:	4620      	mov	r0, r4
   1d974:	f7ff fede 	bl	1d734 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1d978:	2220      	movs	r2, #32
   1d97a:	4639      	mov	r1, r7
   1d97c:	4620      	mov	r0, r4
   1d97e:	f7ff fee6 	bl	1d74e <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1d982:	4622      	mov	r2, r4
   1d984:	2120      	movs	r1, #32
   1d986:	4638      	mov	r0, r7
   1d988:	f7ff fee7 	bl	1d75a <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1d98c:	2d20      	cmp	r5, #32
   1d98e:	462e      	mov	r6, r5
   1d990:	bf28      	it	cs
   1d992:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1d994:	4640      	mov	r0, r8
   1d996:	4633      	mov	r3, r6
   1d998:	463a      	mov	r2, r7
   1d99a:	4631      	mov	r1, r6
   1d99c:	f7ff fbcb 	bl	1d136 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1d9a0:	2d20      	cmp	r5, #32
   1d9a2:	bf38      	it	cc
   1d9a4:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1d9a6:	3d20      	subs	r5, #32
		out += bufferlen;
   1d9a8:	44b0      	add	r8, r6
	while (outlen != 0) {
   1d9aa:	d1dd      	bne.n	1d968 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1d9ac:	4620      	mov	r0, r4
   1d9ae:	462b      	mov	r3, r5
   1d9b0:	462a      	mov	r2, r5
   1d9b2:	4629      	mov	r1, r5
   1d9b4:	9500      	str	r5, [sp, #0]
   1d9b6:	f7ff fef8 	bl	1d7aa <update>

	return TC_CRYPTO_SUCCESS;
   1d9ba:	2001      	movs	r0, #1
}
   1d9bc:	b003      	add	sp, #12
   1d9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1d9c2:	2000      	movs	r0, #0
   1d9c4:	e7fa      	b.n	1d9bc <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1d9c6:	f04f 30ff 	mov.w	r0, #4294967295
   1d9ca:	e7f7      	b.n	1d9bc <tc_hmac_prng_generate+0x7e>

0001d9cc <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1d9cc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1d9ce:	6800      	ldr	r0, [r0, #0]
   1d9d0:	f7ef b980 	b.w	ccd4 <z_arm_fatal_error>

0001d9d4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1d9d4:	2100      	movs	r1, #0
   1d9d6:	2001      	movs	r0, #1
   1d9d8:	f7ef b97c 	b.w	ccd4 <z_arm_fatal_error>

0001d9dc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1d9dc:	b508      	push	{r3, lr}
	handler();
   1d9de:	f7ef fa41 	bl	ce64 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1d9e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1d9e6:	f7ef bb0b 	b.w	d000 <z_arm_exc_exit>

0001d9ea <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1d9ea:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1d9ec:	f383 880b 	msr	PSPLIM, r3
}
   1d9f0:	4770      	bx	lr

0001d9f2 <z_log_msg_static_create.constprop.0>:
   1d9f2:	2300      	movs	r3, #0
   1d9f4:	f7ed bf88 	b.w	b908 <z_impl_z_log_msg_static_create>

0001d9f8 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1d9f8:	4770      	bx	lr

0001d9fa <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   1d9fa:	4770      	bx	lr

0001d9fc <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1d9fc:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1da00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1da04:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1da06:	bf08      	it	eq
   1da08:	f06f 0015 	mvneq.w	r0, #21
   1da0c:	4770      	bx	lr

0001da0e <mpu_configure_region>:
{
   1da0e:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1da10:	890a      	ldrh	r2, [r1, #8]
   1da12:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1da14:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   1da16:	684c      	ldr	r4, [r1, #4]
   1da18:	f002 021f 	and.w	r2, r2, #31
{
   1da1c:	b085      	sub	sp, #20
   1da1e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1da22:	9300      	str	r3, [sp, #0]
   1da24:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1da28:	f023 031f 	bic.w	r3, r3, #31
   1da2c:	1e62      	subs	r2, r4, #1
   1da2e:	4413      	add	r3, r2
   1da30:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1da34:	2807      	cmp	r0, #7
   1da36:	9303      	str	r3, [sp, #12]
   1da38:	d904      	bls.n	1da44 <mpu_configure_region+0x36>
}
   1da3a:	b005      	add	sp, #20
   1da3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1da40:	f7ef befc 	b.w	d83c <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   1da44:	4669      	mov	r1, sp
   1da46:	f7ef fedf 	bl	d808 <region_init>
}
   1da4a:	b005      	add	sp, #20
   1da4c:	bd30      	pop	{r4, r5, pc}

0001da4e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1da4e:	4603      	mov	r3, r0
   1da50:	3901      	subs	r1, #1
   1da52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1da56:	b90a      	cbnz	r2, 1da5c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1da58:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1da5a:	4770      	bx	lr
		*d = *s;
   1da5c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1da60:	e7f7      	b.n	1da52 <strcpy+0x4>

0001da62 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1da62:	4603      	mov	r3, r0
{
   1da64:	b510      	push	{r4, lr}
   1da66:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   1da68:	b922      	cbnz	r2, 1da74 <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1da6a:	2100      	movs	r1, #0
   1da6c:	441a      	add	r2, r3
	while (n > 0) {
   1da6e:	4293      	cmp	r3, r2
   1da70:	d108      	bne.n	1da84 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   1da72:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   1da74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1da78:	2c00      	cmp	r4, #0
   1da7a:	d0f6      	beq.n	1da6a <strncpy+0x8>
		*d = *s;
   1da7c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1da80:	3a01      	subs	r2, #1
   1da82:	e7f1      	b.n	1da68 <strncpy+0x6>
		*d = '\0';
   1da84:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1da88:	e7f1      	b.n	1da6e <strncpy+0xc>

0001da8a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1da8a:	4603      	mov	r3, r0
	size_t n = 0;
   1da8c:	2000      	movs	r0, #0

	while (*s != '\0') {
   1da8e:	5c1a      	ldrb	r2, [r3, r0]
   1da90:	b902      	cbnz	r2, 1da94 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1da92:	4770      	bx	lr
		n++;
   1da94:	3001      	adds	r0, #1
   1da96:	e7fa      	b.n	1da8e <strlen+0x4>

0001da98 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1da98:	4603      	mov	r3, r0
	size_t n = 0;
   1da9a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1da9c:	5c1a      	ldrb	r2, [r3, r0]
   1da9e:	b10a      	cbz	r2, 1daa4 <strnlen+0xc>
   1daa0:	4288      	cmp	r0, r1
   1daa2:	d100      	bne.n	1daa6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1daa4:	4770      	bx	lr
		n++;
   1daa6:	3001      	adds	r0, #1
   1daa8:	e7f8      	b.n	1da9c <strnlen+0x4>

0001daaa <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1daaa:	1e43      	subs	r3, r0, #1
   1daac:	3901      	subs	r1, #1
   1daae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dab2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1dab6:	4282      	cmp	r2, r0
   1dab8:	d101      	bne.n	1dabe <strcmp+0x14>
   1daba:	2a00      	cmp	r2, #0
   1dabc:	d1f7      	bne.n	1daae <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1dabe:	1a10      	subs	r0, r2, r0
   1dac0:	4770      	bx	lr

0001dac2 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1dac2:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1dac4:	460b      	mov	r3, r1
   1dac6:	4605      	mov	r5, r0
   1dac8:	b162      	cbz	r2, 1dae4 <strncmp+0x22>
   1daca:	f810 6b01 	ldrb.w	r6, [r0], #1
   1dace:	781c      	ldrb	r4, [r3, #0]
   1dad0:	3101      	adds	r1, #1
   1dad2:	42b4      	cmp	r4, r6
   1dad4:	d100      	bne.n	1dad8 <strncmp+0x16>
   1dad6:	b91c      	cbnz	r4, 1dae0 <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1dad8:	782a      	ldrb	r2, [r5, #0]
   1dada:	781b      	ldrb	r3, [r3, #0]
   1dadc:	1ad0      	subs	r0, r2, r3
   1dade:	e002      	b.n	1dae6 <strncmp+0x24>
		n--;
   1dae0:	3a01      	subs	r2, #1
   1dae2:	e7ef      	b.n	1dac4 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   1dae4:	4610      	mov	r0, r2
}
   1dae6:	bd70      	pop	{r4, r5, r6, pc}

0001dae8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1dae8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1daea:	b15a      	cbz	r2, 1db04 <memcmp+0x1c>
   1daec:	3901      	subs	r1, #1
   1daee:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1daf0:	f810 2b01 	ldrb.w	r2, [r0], #1
   1daf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1daf8:	42a0      	cmp	r0, r4
   1dafa:	d001      	beq.n	1db00 <memcmp+0x18>
   1dafc:	429a      	cmp	r2, r3
   1dafe:	d0f7      	beq.n	1daf0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1db00:	1ad0      	subs	r0, r2, r3
}
   1db02:	bd10      	pop	{r4, pc}
		return 0;
   1db04:	4610      	mov	r0, r2
   1db06:	e7fc      	b.n	1db02 <memcmp+0x1a>

0001db08 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1db08:	b510      	push	{r4, lr}
   1db0a:	1e43      	subs	r3, r0, #1
   1db0c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1db0e:	4291      	cmp	r1, r2
   1db10:	d100      	bne.n	1db14 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1db12:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1db14:	f811 4b01 	ldrb.w	r4, [r1], #1
   1db18:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1db1c:	e7f7      	b.n	1db0e <memcpy+0x6>

0001db1e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1db1e:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   1db20:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1db22:	4402      	add	r2, r0
   1db24:	4293      	cmp	r3, r2
   1db26:	d100      	bne.n	1db2a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1db28:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1db2a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1db2e:	e7f9      	b.n	1db24 <memset+0x6>

0001db30 <_stdout_hook_default>:
}
   1db30:	f04f 30ff 	mov.w	r0, #4294967295
   1db34:	4770      	bx	lr

0001db36 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1db36:	b510      	push	{r4, lr}
   1db38:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1db3a:	7801      	ldrb	r1, [r0, #0]
   1db3c:	7822      	ldrb	r2, [r4, #0]
{
   1db3e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1db40:	428a      	cmp	r2, r1
   1db42:	d00f      	beq.n	1db64 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1db44:	4669      	mov	r1, sp
   1db46:	f7f0 f8f1 	bl	dd2c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1db4a:	4620      	mov	r0, r4
   1db4c:	a905      	add	r1, sp, #20
   1db4e:	f7f0 f8ed 	bl	dd2c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1db52:	2210      	movs	r2, #16
   1db54:	f10d 0115 	add.w	r1, sp, #21
   1db58:	f10d 0001 	add.w	r0, sp, #1
   1db5c:	f7ff ffc4 	bl	1dae8 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1db60:	b00a      	add	sp, #40	; 0x28
   1db62:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1db64:	2a01      	cmp	r2, #1
   1db66:	d006      	beq.n	1db76 <bt_uuid_cmp+0x40>
   1db68:	2a02      	cmp	r2, #2
   1db6a:	d007      	beq.n	1db7c <bt_uuid_cmp+0x46>
   1db6c:	b972      	cbnz	r2, 1db8c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1db6e:	8840      	ldrh	r0, [r0, #2]
   1db70:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1db72:	1ac0      	subs	r0, r0, r3
   1db74:	e7f4      	b.n	1db60 <bt_uuid_cmp+0x2a>
   1db76:	6840      	ldr	r0, [r0, #4]
   1db78:	6863      	ldr	r3, [r4, #4]
   1db7a:	e7fa      	b.n	1db72 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1db7c:	2210      	movs	r2, #16
   1db7e:	1c61      	adds	r1, r4, #1
   1db80:	3001      	adds	r0, #1
}
   1db82:	b00a      	add	sp, #40	; 0x28
   1db84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1db88:	f7ff bfae 	b.w	1dae8 <memcmp>
	switch (u1->type) {
   1db8c:	f06f 0015 	mvn.w	r0, #21
   1db90:	e7e6      	b.n	1db60 <bt_uuid_cmp+0x2a>

0001db92 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1db92:	2a04      	cmp	r2, #4
{
   1db94:	b510      	push	{r4, lr}
	switch (data_len) {
   1db96:	d00a      	beq.n	1dbae <bt_uuid_create+0x1c>
   1db98:	2a10      	cmp	r2, #16
   1db9a:	d00d      	beq.n	1dbb8 <bt_uuid_create+0x26>
   1db9c:	2a02      	cmp	r2, #2
   1db9e:	f04f 0300 	mov.w	r3, #0
   1dba2:	d10f      	bne.n	1dbc4 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1dba4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1dba6:	880b      	ldrh	r3, [r1, #0]
   1dba8:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1dbaa:	2001      	movs	r0, #1
}
   1dbac:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1dbae:	2301      	movs	r3, #1
   1dbb0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1dbb2:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1dbb4:	6043      	str	r3, [r0, #4]
		break;
   1dbb6:	e7f8      	b.n	1dbaa <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1dbb8:	2302      	movs	r3, #2
   1dbba:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1dbbe:	f7ff ffa3 	bl	1db08 <memcpy>
		break;
   1dbc2:	e7f2      	b.n	1dbaa <bt_uuid_create+0x18>
	switch (data_len) {
   1dbc4:	4618      	mov	r0, r3
   1dbc6:	e7f1      	b.n	1dbac <bt_uuid_create+0x1a>

0001dbc8 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1dbc8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1dbca:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1dbcc:	2106      	movs	r1, #6
{
   1dbce:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1dbd0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1dbd4:	f7f2 fb24 	bl	10220 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1dbd8:	b918      	cbnz	r0, 1dbe2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1dbda:	79a3      	ldrb	r3, [r4, #6]
   1dbdc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1dbe0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1dbe2:	bd10      	pop	{r4, pc}

0001dbe4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1dbe4:	280f      	cmp	r0, #15
   1dbe6:	d807      	bhi.n	1dbf8 <bt_hci_evt_get_flags+0x14>
   1dbe8:	280d      	cmp	r0, #13
   1dbea:	d80b      	bhi.n	1dc04 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1dbec:	2805      	cmp	r0, #5
   1dbee:	bf08      	it	eq
   1dbf0:	2003      	moveq	r0, #3
   1dbf2:	bf18      	it	ne
   1dbf4:	2002      	movne	r0, #2
   1dbf6:	4770      	bx	lr
	switch (evt) {
   1dbf8:	2813      	cmp	r0, #19
   1dbfa:	d003      	beq.n	1dc04 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1dbfc:	281a      	cmp	r0, #26
   1dbfe:	bf08      	it	eq
   1dc00:	2001      	moveq	r0, #1
   1dc02:	e7f6      	b.n	1dbf2 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1dc04:	2001      	movs	r0, #1
	}
}
   1dc06:	4770      	bx	lr

0001dc08 <hci_vendor_event>:
}
   1dc08:	4770      	bx	lr

0001dc0a <bt_addr_le_copy>:
   1dc0a:	2207      	movs	r2, #7
   1dc0c:	f7ff bf7c 	b.w	1db08 <memcpy>

0001dc10 <atomic_or>:
{
   1dc10:	4603      	mov	r3, r0
   1dc12:	b510      	push	{r4, lr}
}
   1dc14:	e8d3 0fef 	ldaex	r0, [r3]
   1dc18:	ea40 0201 	orr.w	r2, r0, r1
   1dc1c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1dc20:	2c00      	cmp	r4, #0
   1dc22:	d1f7      	bne.n	1dc14 <atomic_or+0x4>
   1dc24:	bd10      	pop	{r4, pc}

0001dc26 <z_log_msg_static_create.constprop.0>:
   1dc26:	2300      	movs	r3, #0
   1dc28:	f7ed be6e 	b.w	b908 <z_impl_z_log_msg_static_create>

0001dc2c <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dc2c:	e8d0 3fef 	ldaex	r3, [r0]
   1dc30:	400b      	ands	r3, r1
   1dc32:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1dc36:	2a00      	cmp	r2, #0
   1dc38:	d1f8      	bne.n	1dc2c <atomic_and.isra.0>
}
   1dc3a:	4770      	bx	lr

0001dc3c <bt_hci_disconnect>:
{
   1dc3c:	b570      	push	{r4, r5, r6, lr}
   1dc3e:	4606      	mov	r6, r0
   1dc40:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1dc42:	f240 4006 	movw	r0, #1030	; 0x406
   1dc46:	2103      	movs	r1, #3
   1dc48:	f7f0 fd3a 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
   1dc4c:	4604      	mov	r4, r0
   1dc4e:	b168      	cbz	r0, 1dc6c <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1dc50:	2103      	movs	r1, #3
   1dc52:	3008      	adds	r0, #8
   1dc54:	f7f6 f89a 	bl	13d8c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1dc58:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1dc5a:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dc5c:	4621      	mov	r1, r4
}
   1dc5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dc62:	2200      	movs	r2, #0
   1dc64:	f240 4006 	movw	r0, #1030	; 0x406
   1dc68:	f7f0 bd78 	b.w	e75c <bt_hci_cmd_send_sync>
}
   1dc6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dc70:	bd70      	pop	{r4, r5, r6, pc}

0001dc72 <bt_le_set_data_len>:
{
   1dc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc74:	4607      	mov	r7, r0
   1dc76:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1dc78:	f242 0022 	movw	r0, #8226	; 0x2022
   1dc7c:	2106      	movs	r1, #6
{
   1dc7e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1dc80:	f7f0 fd1e 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
   1dc84:	4604      	mov	r4, r0
   1dc86:	b178      	cbz	r0, 1dca8 <bt_le_set_data_len+0x36>
   1dc88:	2106      	movs	r1, #6
   1dc8a:	3008      	adds	r0, #8
   1dc8c:	f7f6 f87e 	bl	13d8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dc90:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1dc92:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dc94:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1dc96:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1dc98:	4621      	mov	r1, r4
}
   1dc9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1dc9e:	2200      	movs	r2, #0
   1dca0:	f242 0022 	movw	r0, #8226	; 0x2022
   1dca4:	f7f0 bd5a 	b.w	e75c <bt_hci_cmd_send_sync>
}
   1dca8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dcac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dcae <bt_le_set_phy>:
{
   1dcae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dcb2:	4681      	mov	r9, r0
   1dcb4:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1dcb6:	f242 0032 	movw	r0, #8242	; 0x2032
   1dcba:	2107      	movs	r1, #7
{
   1dcbc:	4617      	mov	r7, r2
   1dcbe:	461e      	mov	r6, r3
   1dcc0:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1dcc4:	f7f0 fcfc 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
   1dcc8:	4605      	mov	r5, r0
   1dcca:	b1a0      	cbz	r0, 1dcf6 <bt_le_set_phy+0x48>
   1dccc:	2107      	movs	r1, #7
   1dcce:	3008      	adds	r0, #8
   1dcd0:	f7f6 f85c 	bl	13d8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dcd4:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1dcd8:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dcdc:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1dcde:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1dce0:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1dce2:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1dce6:	4629      	mov	r1, r5
}
   1dce8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1dcec:	2200      	movs	r2, #0
   1dcee:	f242 0032 	movw	r0, #8242	; 0x2032
   1dcf2:	f7f0 bd33 	b.w	e75c <bt_hci_cmd_send_sync>
}
   1dcf6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001dcfe <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1dcfe:	6880      	ldr	r0, [r0, #8]
   1dd00:	f7f0 bdfc 	b.w	e8fc <bt_hci_le_enh_conn_complete>

0001dd04 <bt_le_conn_params_valid>:
{
   1dd04:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1dd06:	8803      	ldrh	r3, [r0, #0]
   1dd08:	8842      	ldrh	r2, [r0, #2]
   1dd0a:	4293      	cmp	r3, r2
   1dd0c:	d819      	bhi.n	1dd42 <bt_le_conn_params_valid+0x3e>
   1dd0e:	2b05      	cmp	r3, #5
   1dd10:	d917      	bls.n	1dd42 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1dd12:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1dd16:	d814      	bhi.n	1dd42 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1dd18:	8883      	ldrh	r3, [r0, #4]
   1dd1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1dd1e:	d210      	bcs.n	1dd42 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1dd20:	f640 4476 	movw	r4, #3190	; 0xc76
   1dd24:	88c0      	ldrh	r0, [r0, #6]
   1dd26:	f1a0 010a 	sub.w	r1, r0, #10
   1dd2a:	b289      	uxth	r1, r1
   1dd2c:	42a1      	cmp	r1, r4
   1dd2e:	d808      	bhi.n	1dd42 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1dd30:	3301      	adds	r3, #1
   1dd32:	b29b      	uxth	r3, r3
   1dd34:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1dd36:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1dd3a:	bf34      	ite	cc
   1dd3c:	2001      	movcc	r0, #1
   1dd3e:	2000      	movcs	r0, #0
}
   1dd40:	bd10      	pop	{r4, pc}
		return false;
   1dd42:	2000      	movs	r0, #0
   1dd44:	e7fc      	b.n	1dd40 <bt_le_conn_params_valid+0x3c>

0001dd46 <le_conn_param_neg_reply>:
{
   1dd46:	b570      	push	{r4, r5, r6, lr}
   1dd48:	4606      	mov	r6, r0
   1dd4a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1dd4c:	f242 0021 	movw	r0, #8225	; 0x2021
   1dd50:	2103      	movs	r1, #3
   1dd52:	f7f0 fcb5 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
   1dd56:	4604      	mov	r4, r0
   1dd58:	b918      	cbnz	r0, 1dd62 <le_conn_param_neg_reply+0x1c>
}
   1dd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dd5e:	f7f0 b8e1 	b.w	df24 <le_conn_param_neg_reply.part.0>
   1dd62:	2103      	movs	r1, #3
   1dd64:	3008      	adds	r0, #8
   1dd66:	f7f6 f811 	bl	13d8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1dd6a:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1dd6c:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1dd6e:	4621      	mov	r1, r4
}
   1dd70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1dd74:	f242 0021 	movw	r0, #8225	; 0x2021
   1dd78:	f7f0 bf6e 	b.w	ec58 <bt_hci_cmd_send>

0001dd7c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1dd7c:	2000      	movs	r0, #0
   1dd7e:	4770      	bx	lr

0001dd80 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1dd80:	2000      	movs	r0, #0
   1dd82:	4770      	bx	lr

0001dd84 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   1dd84:	2207      	movs	r2, #7
{
   1dd86:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1dd88:	f7ff feae 	bl	1dae8 <memcmp>
}
   1dd8c:	fab0 f080 	clz	r0, r0
   1dd90:	0940      	lsrs	r0, r0, #5
   1dd92:	bd08      	pop	{r3, pc}

0001dd94 <z_log_msg_static_create.constprop.0>:
   1dd94:	2300      	movs	r3, #0
   1dd96:	f7ed bdb7 	b.w	b908 <z_impl_z_log_msg_static_create>

0001dd9a <bt_lookup_id_addr>:
	return addr;
   1dd9a:	2800      	cmp	r0, #0
}
   1dd9c:	bf0c      	ite	eq
   1dd9e:	4608      	moveq	r0, r1
   1dda0:	2000      	movne	r0, #0
   1dda2:	4770      	bx	lr

0001dda4 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1dda4:	b118      	cbz	r0, 1ddae <bt_id_set_adv_random_addr+0xa>
   1dda6:	b111      	cbz	r1, 1ddae <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1dda8:	4608      	mov	r0, r1
   1ddaa:	f7f1 bcd9 	b.w	f760 <set_random_address>
}
   1ddae:	f06f 0015 	mvn.w	r0, #21
   1ddb2:	4770      	bx	lr

0001ddb4 <bt_id_set_adv_private_addr>:
{
   1ddb4:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1ddb6:	4604      	mov	r4, r0
   1ddb8:	b180      	cbz	r0, 1dddc <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1ddba:	2106      	movs	r1, #6
   1ddbc:	4668      	mov	r0, sp
   1ddbe:	f7f2 fa2f 	bl	10220 <bt_rand>
	if (err) {
   1ddc2:	b948      	cbnz	r0, 1ddd8 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1ddc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1ddc8:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1ddca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1ddce:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1ddd0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1ddd4:	f7ff ffe6 	bl	1dda4 <bt_id_set_adv_random_addr>
}
   1ddd8:	b002      	add	sp, #8
   1ddda:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1dddc:	f06f 0015 	mvn.w	r0, #21
   1dde0:	e7fa      	b.n	1ddd8 <bt_id_set_adv_private_addr+0x24>

0001dde2 <bt_id_adv_random_addr_check>:
}
   1dde2:	3800      	subs	r0, #0
   1dde4:	bf18      	it	ne
   1dde6:	2001      	movne	r0, #1
   1dde8:	4770      	bx	lr

0001ddea <get_adv_channel_map>:
{
   1ddea:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1ddec:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1ddf0:	bf0c      	ite	eq
   1ddf2:	2007      	moveq	r0, #7
   1ddf4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1ddf6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1ddf8:	bf48      	it	mi
   1ddfa:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1ddfe:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1de00:	bf48      	it	mi
   1de02:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1de06:	4770      	bx	lr

0001de08 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1de08:	e8d0 0faf 	lda	r0, [r0]
}
   1de0c:	4770      	bx	lr

0001de0e <atomic_and>:
{
   1de0e:	4603      	mov	r3, r0
   1de10:	b510      	push	{r4, lr}
}
   1de12:	e8d3 0fef 	ldaex	r0, [r3]
   1de16:	ea00 0201 	and.w	r2, r0, r1
   1de1a:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1de1e:	2c00      	cmp	r4, #0
   1de20:	d1f7      	bne.n	1de12 <atomic_and+0x4>
   1de22:	bd10      	pop	{r4, pc}

0001de24 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1de24:	2301      	movs	r3, #1
{
   1de26:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1de28:	fa03 f101 	lsl.w	r1, r3, r1
{
   1de2c:	4604      	mov	r4, r0
	if (val) {
   1de2e:	b142      	cbz	r2, 1de42 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de30:	e8d4 3fef 	ldaex	r3, [r4]
   1de34:	430b      	orrs	r3, r1
   1de36:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1de3a:	2a00      	cmp	r2, #0
   1de3c:	d1f8      	bne.n	1de30 <atomic_set_bit_to+0xc>
	}
}
   1de3e:	bc10      	pop	{r4}
   1de40:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1de42:	43c9      	mvns	r1, r1
}
   1de44:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1de46:	f7ff bfe2 	b.w	1de0e <atomic_and>

0001de4a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1de4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de4e:	b087      	sub	sp, #28
   1de50:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1de54:	4605      	mov	r5, r0
   1de56:	460c      	mov	r4, r1
   1de58:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1de5a:	2100      	movs	r1, #0
   1de5c:	2210      	movs	r2, #16
   1de5e:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1de60:	461f      	mov	r7, r3
   1de62:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1de66:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   1de6a:	f7ff fe58 	bl	1db1e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1de6e:	b9ce      	cbnz	r6, 1dea4 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   1de70:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1de74:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1de76:	f242 0008 	movw	r0, #8200	; 0x2008
   1de7a:	a902      	add	r1, sp, #8
   1de7c:	f7f1 fe80 	bl	fb80 <hci_set_ad>
		if (err) {
   1de80:	4604      	mov	r4, r0
   1de82:	b958      	cbnz	r0, 1de9c <le_adv_update.constprop.0+0x52>
	if (scannable) {
   1de84:	f1ba 0f00 	cmp.w	sl, #0
   1de88:	d13a      	bne.n	1df00 <le_adv_update.constprop.0+0xb6>
   1de8a:	3510      	adds	r5, #16
   1de8c:	e8d5 3fef 	ldaex	r3, [r5]
   1de90:	f043 0304 	orr.w	r3, r3, #4
   1de94:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1de98:	2a00      	cmp	r2, #0
   1de9a:	d1f7      	bne.n	1de8c <le_adv_update.constprop.0+0x42>
}
   1de9c:	4620      	mov	r0, r4
   1de9e:	b007      	add	sp, #28
   1dea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1dea4:	f7f1 fc40 	bl	f728 <bt_get_name>
   1dea8:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1deaa:	b9e4      	cbnz	r4, 1dee6 <le_adv_update.constprop.0+0x9c>
   1deac:	bb37      	cbnz	r7, 1defc <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   1deae:	4658      	mov	r0, fp
   1deb0:	f7ff fdeb 	bl	1da8a <strlen>
   1deb4:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1deb6:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1deb8:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1debc:	f88d 3000 	strb.w	r3, [sp]
   1dec0:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1dec4:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1dec8:	d1d4      	bne.n	1de74 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   1deca:	2202      	movs	r2, #2
			d[1].data = &data;
   1decc:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1ded0:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1ded2:	e7d0      	b.n	1de76 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1ded4:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1ded8:	3a08      	subs	r2, #8
   1deda:	2a01      	cmp	r2, #1
   1dedc:	d924      	bls.n	1df28 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1dede:	3301      	adds	r3, #1
   1dee0:	4598      	cmp	r8, r3
   1dee2:	d1f7      	bne.n	1ded4 <le_adv_update.constprop.0+0x8a>
   1dee4:	e7e2      	b.n	1deac <le_adv_update.constprop.0+0x62>
   1dee6:	2300      	movs	r3, #0
   1dee8:	e7fa      	b.n	1dee0 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1deea:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1deee:	3a08      	subs	r2, #8
   1def0:	2a01      	cmp	r2, #1
   1def2:	d919      	bls.n	1df28 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1def4:	3301      	adds	r3, #1
   1def6:	4599      	cmp	r9, r3
   1def8:	d1f7      	bne.n	1deea <le_adv_update.constprop.0+0xa0>
   1defa:	e7d8      	b.n	1deae <le_adv_update.constprop.0+0x64>
   1defc:	2300      	movs	r3, #0
   1defe:	e7fa      	b.n	1def6 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   1df00:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   1df02:	2e02      	cmp	r6, #2
			d[1].len = 1;
   1df04:	bf08      	it	eq
   1df06:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1df08:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   1df0c:	bf08      	it	eq
   1df0e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1df10:	a902      	add	r1, sp, #8
			d[1].data = &data;
   1df12:	bf08      	it	eq
   1df14:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1df18:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1df1c:	f7f1 fe30 	bl	fb80 <hci_set_ad>
		if (err) {
   1df20:	2800      	cmp	r0, #0
   1df22:	d0b2      	beq.n	1de8a <le_adv_update.constprop.0+0x40>
   1df24:	4604      	mov	r4, r0
   1df26:	e7b9      	b.n	1de9c <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   1df28:	f06f 0415 	mvn.w	r4, #21
   1df2c:	e7b6      	b.n	1de9c <le_adv_update.constprop.0+0x52>

0001df2e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1df2e:	6843      	ldr	r3, [r0, #4]
   1df30:	f013 0008 	ands.w	r0, r3, #8
   1df34:	d00a      	beq.n	1df4c <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1df36:	035a      	lsls	r2, r3, #13
   1df38:	d407      	bmi.n	1df4a <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1df3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1df3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1df42:	bf14      	ite	ne
   1df44:	2002      	movne	r0, #2
   1df46:	2001      	moveq	r0, #1
   1df48:	4770      	bx	lr
   1df4a:	2001      	movs	r0, #1
}
   1df4c:	4770      	bx	lr

0001df4e <bt_le_adv_set_enable_legacy>:
{
   1df4e:	b570      	push	{r4, r5, r6, lr}
   1df50:	4606      	mov	r6, r0
   1df52:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1df54:	f242 000a 	movw	r0, #8202	; 0x200a
   1df58:	2101      	movs	r1, #1
{
   1df5a:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1df5c:	f7f0 fbb0 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
   1df60:	4604      	mov	r4, r0
   1df62:	b1b0      	cbz	r0, 1df92 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1df64:	3008      	adds	r0, #8
	if (enable) {
   1df66:	b195      	cbz	r5, 1df8e <bt_le_adv_set_enable_legacy+0x40>
   1df68:	2101      	movs	r1, #1
   1df6a:	f000 ff9b 	bl	1eea4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1df6e:	4620      	mov	r0, r4
   1df70:	f106 0210 	add.w	r2, r6, #16
   1df74:	a903      	add	r1, sp, #12
   1df76:	2307      	movs	r3, #7
   1df78:	9500      	str	r5, [sp, #0]
   1df7a:	f7f0 fb8f 	bl	e69c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1df7e:	2200      	movs	r2, #0
   1df80:	4621      	mov	r1, r4
   1df82:	f242 000a 	movw	r0, #8202	; 0x200a
   1df86:	f7f0 fbe9 	bl	e75c <bt_hci_cmd_send_sync>
}
   1df8a:	b006      	add	sp, #24
   1df8c:	bd70      	pop	{r4, r5, r6, pc}
   1df8e:	4629      	mov	r1, r5
   1df90:	e7eb      	b.n	1df6a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1df92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1df96:	e7f8      	b.n	1df8a <bt_le_adv_set_enable_legacy+0x3c>

0001df98 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1df98:	3018      	adds	r0, #24
   1df9a:	f7fc b87b 	b.w	1a094 <k_work_cancel_delayable>

0001df9e <z_log_msg_static_create.constprop.0>:
   1df9e:	2300      	movs	r3, #0
   1dfa0:	f7ed bcb2 	b.w	b908 <z_impl_z_log_msg_static_create>

0001dfa4 <tx_complete_work>:
	tx_notify(conn);
   1dfa4:	3828      	subs	r0, #40	; 0x28
   1dfa6:	f7f2 b98f 	b.w	102c8 <tx_notify>

0001dfaa <bt_conn_reset_rx_state>:
{
   1dfaa:	b510      	push	{r4, lr}
   1dfac:	4604      	mov	r4, r0
	if (!conn->rx) {
   1dfae:	6900      	ldr	r0, [r0, #16]
   1dfb0:	b118      	cbz	r0, 1dfba <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1dfb2:	f7f5 fdc9 	bl	13b48 <net_buf_unref>
	conn->rx = NULL;
   1dfb6:	2300      	movs	r3, #0
   1dfb8:	6123      	str	r3, [r4, #16]
}
   1dfba:	bd10      	pop	{r4, pc}

0001dfbc <conn_lookup_handle>:
{
   1dfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dfc0:	4607      	mov	r7, r0
   1dfc2:	460e      	mov	r6, r1
   1dfc4:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1dfc6:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1dfc8:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1dfcc:	42b4      	cmp	r4, r6
   1dfce:	d103      	bne.n	1dfd8 <conn_lookup_handle+0x1c>
	return NULL;
   1dfd0:	2300      	movs	r3, #0
}
   1dfd2:	4618      	mov	r0, r3
   1dfd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1dfd8:	fb09 7004 	mla	r0, r9, r4, r7
   1dfdc:	f7f2 fc48 	bl	10870 <bt_conn_ref>
   1dfe0:	4603      	mov	r3, r0
		if (!conn) {
   1dfe2:	b158      	cbz	r0, 1dffc <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1dfe4:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1dfe6:	2d01      	cmp	r5, #1
   1dfe8:	d002      	beq.n	1dff0 <conn_lookup_handle+0x34>
   1dfea:	3d07      	subs	r5, #7
   1dfec:	2d01      	cmp	r5, #1
   1dfee:	d803      	bhi.n	1dff8 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1dff0:	881a      	ldrh	r2, [r3, #0]
   1dff2:	4542      	cmp	r2, r8
   1dff4:	d0ed      	beq.n	1dfd2 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1dff6:	4618      	mov	r0, r3
   1dff8:	f7f2 fc62 	bl	108c0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1dffc:	3401      	adds	r4, #1
   1dffe:	e7e5      	b.n	1dfcc <conn_lookup_handle+0x10>

0001e000 <bt_conn_connected>:
{
   1e000:	b510      	push	{r4, lr}
   1e002:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e004:	f7f3 f8d6 	bl	111b4 <bt_l2cap_connected>
	notify_connected(conn);
   1e008:	4620      	mov	r0, r4
}
   1e00a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1e00e:	f7f2 b925 	b.w	1025c <notify_connected>

0001e012 <bt_conn_get_security>:
}
   1e012:	2001      	movs	r0, #1
   1e014:	4770      	bx	lr

0001e016 <bt_conn_is_peer_addr_le>:
{
   1e016:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e018:	7a03      	ldrb	r3, [r0, #8]
{
   1e01a:	4604      	mov	r4, r0
	if (id != conn->id) {
   1e01c:	428b      	cmp	r3, r1
{
   1e01e:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e020:	d115      	bne.n	1e04e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e022:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1e026:	2207      	movs	r2, #7
   1e028:	4628      	mov	r0, r5
   1e02a:	f7ff fd5d 	bl	1dae8 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1e02e:	b180      	cbz	r0, 1e052 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e030:	78e3      	ldrb	r3, [r4, #3]
   1e032:	2207      	movs	r2, #7
   1e034:	b943      	cbnz	r3, 1e048 <bt_conn_is_peer_addr_le+0x32>
   1e036:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   1e03a:	4628      	mov	r0, r5
   1e03c:	f7ff fd54 	bl	1dae8 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1e040:	fab0 f080 	clz	r0, r0
   1e044:	0940      	lsrs	r0, r0, #5
}
   1e046:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1e048:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1e04c:	e7f5      	b.n	1e03a <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e04e:	2000      	movs	r0, #0
   1e050:	e7f9      	b.n	1e046 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e052:	2001      	movs	r0, #1
   1e054:	e7f7      	b.n	1e046 <bt_conn_is_peer_addr_le+0x30>

0001e056 <bt_conn_le_conn_update>:
{
   1e056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e058:	4607      	mov	r7, r0
   1e05a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e05c:	f242 0013 	movw	r0, #8211	; 0x2013
   1e060:	210e      	movs	r1, #14
   1e062:	f7f0 fb2d 	bl	e6c0 <bt_hci_cmd_create>
	if (!buf) {
   1e066:	4606      	mov	r6, r0
   1e068:	b1d0      	cbz	r0, 1e0a0 <_flash_used+0x24>
	return net_buf_simple_add(&buf->b, len);
   1e06a:	210e      	movs	r1, #14
   1e06c:	3008      	adds	r0, #8
   1e06e:	f7f5 fe8d 	bl	13d8c <net_buf_simple_add>
   1e072:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e074:	220e      	movs	r2, #14
   1e076:	2100      	movs	r1, #0
   1e078:	f7ff fd51 	bl	1db1e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e07c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e07e:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e080:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e082:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e084:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e086:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e088:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e08a:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e08e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e090:	88ab      	ldrh	r3, [r5, #4]
   1e092:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e094:	88eb      	ldrh	r3, [r5, #6]
   1e096:	8123      	strh	r3, [r4, #8]
}
   1e098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e09c:	f7f0 bb5e 	b.w	e75c <bt_hci_cmd_send_sync>
}
   1e0a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e0a6 <l2cap_connected>:
}
   1e0a6:	4770      	bx	lr

0001e0a8 <z_log_msg_static_create.constprop.0>:
   1e0a8:	2300      	movs	r3, #0
   1e0aa:	f7ed bc2d 	b.w	b908 <z_impl_z_log_msg_static_create>

0001e0ae <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1e0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0b0:	4605      	mov	r5, r0
   1e0b2:	460f      	mov	r7, r1
   1e0b4:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1e0b6:	2300      	movs	r3, #0
   1e0b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e0bc:	2104      	movs	r1, #4
   1e0be:	2000      	movs	r0, #0
   1e0c0:	f7f2 fd4c 	bl	10b5c <bt_conn_create_pdu_timeout>
	if (!buf) {
   1e0c4:	4604      	mov	r4, r0
   1e0c6:	b920      	cbnz	r0, 1e0d2 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1e0c8:	4628      	mov	r0, r5
}
   1e0ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e0ce:	f7f3 b835 	b.w	1113c <l2cap_create_le_sig_pdu.part.0>
   1e0d2:	2104      	movs	r1, #4
   1e0d4:	3008      	adds	r0, #8
   1e0d6:	f7f5 fe59 	bl	13d8c <net_buf_simple_add>
	hdr->code = code;
   1e0da:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1e0dc:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1e0de:	8046      	strh	r6, [r0, #2]
}
   1e0e0:	4620      	mov	r0, r4
   1e0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e0e4 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1e0e4:	4770      	bx	lr

0001e0e6 <bt_l2cap_chan_del>:
{
   1e0e6:	b570      	push	{r4, r5, r6, lr}
   1e0e8:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e0ea:	e9d0 3500 	ldrd	r3, r5, [r0]
   1e0ee:	b123      	cbz	r3, 1e0fa <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e0f0:	686b      	ldr	r3, [r5, #4]
   1e0f2:	b103      	cbz	r3, 1e0f6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e0f4:	4798      	blx	r3
	chan->conn = NULL;
   1e0f6:	2300      	movs	r3, #0
   1e0f8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e0fa:	68e3      	ldr	r3, [r4, #12]
   1e0fc:	b10b      	cbz	r3, 1e102 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e0fe:	4620      	mov	r0, r4
   1e100:	4798      	blx	r3
	if (ops->released) {
   1e102:	6a2b      	ldr	r3, [r5, #32]
   1e104:	b11b      	cbz	r3, 1e10e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e106:	4620      	mov	r0, r4
}
   1e108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e10c:	4718      	bx	r3
}
   1e10e:	bd70      	pop	{r4, r5, r6, pc}

0001e110 <bt_l2cap_disconnected>:
{
   1e110:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1e112:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e114:	b130      	cbz	r0, 1e124 <bt_l2cap_disconnected+0x14>
	return node->next;
   1e116:	f850 4908 	ldr.w	r4, [r0], #-8
   1e11a:	b104      	cbz	r4, 1e11e <bt_l2cap_disconnected+0xe>
   1e11c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e11e:	f7ff ffe2 	bl	1e0e6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e122:	b904      	cbnz	r4, 1e126 <bt_l2cap_disconnected+0x16>
}
   1e124:	bd38      	pop	{r3, r4, r5, pc}
   1e126:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e128:	b12d      	cbz	r5, 1e136 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1e12a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e12c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1e12e:	f7ff ffda 	bl	1e0e6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e132:	462c      	mov	r4, r5
   1e134:	e7f7      	b.n	1e126 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1e136:	4620      	mov	r0, r4
}
   1e138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1e13c:	f7ff bfd3 	b.w	1e0e6 <bt_l2cap_chan_del>

0001e140 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e140:	3104      	adds	r1, #4
   1e142:	f7f2 bd0b 	b.w	10b5c <bt_conn_create_pdu_timeout>

0001e146 <bt_l2cap_send_cb>:
{
   1e146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e14a:	4614      	mov	r4, r2
   1e14c:	4605      	mov	r5, r0
   1e14e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e150:	f102 0008 	add.w	r0, r2, #8
   1e154:	2104      	movs	r1, #4
   1e156:	461e      	mov	r6, r3
   1e158:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e15c:	f7f5 fdba 	bl	13cd4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e160:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e162:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e164:	3a04      	subs	r2, #4
   1e166:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e168:	4643      	mov	r3, r8
   1e16a:	4632      	mov	r2, r6
   1e16c:	4621      	mov	r1, r4
   1e16e:	4628      	mov	r0, r5
}
   1e170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e174:	f7f2 bada 	b.w	1072c <bt_conn_send_cb>

0001e178 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1e178:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e17a:	b128      	cbz	r0, 1e188 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e17c:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e17e:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e180:	428b      	cmp	r3, r1
   1e182:	d001      	beq.n	1e188 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   1e184:	6880      	ldr	r0, [r0, #8]
   1e186:	e7f8      	b.n	1e17a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1e188:	4770      	bx	lr

0001e18a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1e18a:	4770      	bx	lr

0001e18c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e18c:	4603      	mov	r3, r0
	return list->head;
   1e18e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e190:	b128      	cbz	r0, 1e19e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e192:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1e194:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e196:	4288      	cmp	r0, r1
	list->head = node;
   1e198:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1e19a:	bf08      	it	eq
   1e19c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e19e:	4770      	bx	lr

0001e1a0 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1e1a0:	4603      	mov	r3, r0
	size_t bytes = 0;
   1e1a2:	2000      	movs	r0, #0

	while (buf) {
   1e1a4:	b903      	cbnz	r3, 1e1a8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1e1a6:	4770      	bx	lr
		bytes += buf->len;
   1e1a8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e1aa:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e1ac:	4410      	add	r0, r2
		buf = buf->frags;
   1e1ae:	e7f9      	b.n	1e1a4 <net_buf_frags_len+0x4>

0001e1b0 <attr_read_type_cb>:
{
   1e1b0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1e1b2:	68d4      	ldr	r4, [r2, #12]
   1e1b4:	3102      	adds	r1, #2
   1e1b6:	7823      	ldrb	r3, [r4, #0]
   1e1b8:	b913      	cbnz	r3, 1e1c0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1e1ba:	7021      	strb	r1, [r4, #0]
	return true;
   1e1bc:	2001      	movs	r0, #1
}
   1e1be:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1e1c0:	428b      	cmp	r3, r1
   1e1c2:	d0fb      	beq.n	1e1bc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1e1c4:	8983      	ldrh	r3, [r0, #12]
   1e1c6:	3b02      	subs	r3, #2
   1e1c8:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1e1ca:	2000      	movs	r0, #0
   1e1cc:	6110      	str	r0, [r2, #16]
		return false;
   1e1ce:	e7f6      	b.n	1e1be <attr_read_type_cb+0xe>

0001e1d0 <att_prepare_write_req>:
}
   1e1d0:	2006      	movs	r0, #6
   1e1d2:	4770      	bx	lr

0001e1d4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e1d4:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1e1d8:	4108      	asrs	r0, r1
}
   1e1da:	f000 0001 	and.w	r0, r0, #1
   1e1de:	4770      	bx	lr

0001e1e0 <write_cb>:
{
   1e1e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e1e2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e1e4:	4601      	mov	r1, r0
{
   1e1e6:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e1e8:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e1ec:	6820      	ldr	r0, [r4, #0]
   1e1ee:	f000 fd9c 	bl	1ed2a <bt_gatt_check_perm>
   1e1f2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e1f4:	bb00      	cbnz	r0, 1e238 <write_cb+0x58>
	if (!data->req) {
   1e1f6:	7a23      	ldrb	r3, [r4, #8]
   1e1f8:	b1b3      	cbz	r3, 1e228 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1e1fa:	f1a3 0218 	sub.w	r2, r3, #24
   1e1fe:	4253      	negs	r3, r2
   1e200:	4153      	adcs	r3, r2
   1e202:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e204:	9301      	str	r3, [sp, #4]
   1e206:	8a63      	ldrh	r3, [r4, #18]
   1e208:	4629      	mov	r1, r5
   1e20a:	9300      	str	r3, [sp, #0]
   1e20c:	68ae      	ldr	r6, [r5, #8]
   1e20e:	8a23      	ldrh	r3, [r4, #16]
   1e210:	68e2      	ldr	r2, [r4, #12]
   1e212:	6820      	ldr	r0, [r4, #0]
   1e214:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1e216:	2800      	cmp	r0, #0
   1e218:	db08      	blt.n	1e22c <write_cb+0x4c>
   1e21a:	8a23      	ldrh	r3, [r4, #16]
   1e21c:	4298      	cmp	r0, r3
   1e21e:	d10e      	bne.n	1e23e <write_cb+0x5e>
	data->err = 0U;
   1e220:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   1e222:	2001      	movs	r0, #1
	data->err = 0U;
   1e224:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e226:	e008      	b.n	1e23a <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e228:	2302      	movs	r3, #2
   1e22a:	e7eb      	b.n	1e204 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1e22c:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1e230:	d305      	bcc.n	1e23e <write_cb+0x5e>
		return -err;
   1e232:	4240      	negs	r0, r0
   1e234:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1e236:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1e238:	2000      	movs	r0, #0
}
   1e23a:	b002      	add	sp, #8
   1e23c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e23e:	200e      	movs	r0, #14
   1e240:	e7f9      	b.n	1e236 <write_cb+0x56>

0001e242 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1e242:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e244:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1e248:	2300      	movs	r3, #0
   1e24a:	461a      	mov	r2, r3
   1e24c:	9300      	str	r3, [sp, #0]
   1e24e:	f7f4 fcc9 	bl	12be4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1e252:	b005      	add	sp, #20
   1e254:	f85d fb04 	ldr.w	pc, [sp], #4

0001e258 <find_info_cb>:
{
   1e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e25a:	6893      	ldr	r3, [r2, #8]
{
   1e25c:	4605      	mov	r5, r0
   1e25e:	460e      	mov	r6, r1
   1e260:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1e262:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1e264:	b963      	cbnz	r3, 1e280 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1e266:	6850      	ldr	r0, [r2, #4]
   1e268:	2101      	movs	r1, #1
   1e26a:	3008      	adds	r0, #8
   1e26c:	f7f5 fd8e 	bl	13d8c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e270:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e272:	682b      	ldr	r3, [r5, #0]
   1e274:	781b      	ldrb	r3, [r3, #0]
   1e276:	2b00      	cmp	r3, #0
   1e278:	bf14      	ite	ne
   1e27a:	2302      	movne	r3, #2
   1e27c:	2301      	moveq	r3, #1
   1e27e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e280:	68a3      	ldr	r3, [r4, #8]
   1e282:	781b      	ldrb	r3, [r3, #0]
   1e284:	2b01      	cmp	r3, #1
   1e286:	d003      	beq.n	1e290 <find_info_cb+0x38>
   1e288:	2b02      	cmp	r3, #2
   1e28a:	d019      	beq.n	1e2c0 <find_info_cb+0x68>
   1e28c:	2000      	movs	r0, #0
   1e28e:	e016      	b.n	1e2be <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e290:	682b      	ldr	r3, [r5, #0]
   1e292:	781b      	ldrb	r3, [r3, #0]
   1e294:	2b00      	cmp	r3, #0
   1e296:	d1f9      	bne.n	1e28c <find_info_cb+0x34>
   1e298:	6860      	ldr	r0, [r4, #4]
   1e29a:	2104      	movs	r1, #4
   1e29c:	3008      	adds	r0, #8
   1e29e:	f7f5 fd75 	bl	13d8c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e2a2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e2a4:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e2a6:	682a      	ldr	r2, [r5, #0]
   1e2a8:	68e3      	ldr	r3, [r4, #12]
   1e2aa:	8852      	ldrh	r2, [r2, #2]
   1e2ac:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e2ae:	6863      	ldr	r3, [r4, #4]
   1e2b0:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1e2b2:	899b      	ldrh	r3, [r3, #12]
   1e2b4:	1ac0      	subs	r0, r0, r3
   1e2b6:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1e2b8:	bf94      	ite	ls
   1e2ba:	2000      	movls	r0, #0
   1e2bc:	2001      	movhi	r0, #1
}
   1e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e2c0:	682b      	ldr	r3, [r5, #0]
   1e2c2:	781b      	ldrb	r3, [r3, #0]
   1e2c4:	2b02      	cmp	r3, #2
   1e2c6:	d1e1      	bne.n	1e28c <find_info_cb+0x34>
   1e2c8:	6860      	ldr	r0, [r4, #4]
   1e2ca:	2112      	movs	r1, #18
   1e2cc:	3008      	adds	r0, #8
   1e2ce:	f7f5 fd5d 	bl	13d8c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e2d2:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1e2d4:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e2d6:	6829      	ldr	r1, [r5, #0]
   1e2d8:	68e0      	ldr	r0, [r4, #12]
   1e2da:	2210      	movs	r2, #16
   1e2dc:	3101      	adds	r1, #1
   1e2de:	3002      	adds	r0, #2
   1e2e0:	f7ff fc12 	bl	1db08 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1e2e4:	6863      	ldr	r3, [r4, #4]
   1e2e6:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1e2e8:	899b      	ldrh	r3, [r3, #12]
   1e2ea:	1ac0      	subs	r0, r0, r3
   1e2ec:	2812      	cmp	r0, #18
   1e2ee:	e7e3      	b.n	1e2b8 <find_info_cb+0x60>

0001e2f0 <att_chan_mtu_updated>:
{
   1e2f0:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1e2f2:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1e2f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e2f6:	b352      	cbz	r2, 1e34e <att_chan_mtu_updated+0x5e>
	return node->next;
   1e2f8:	6813      	ldr	r3, [r2, #0]
   1e2fa:	b103      	cbz	r3, 1e2fe <att_chan_mtu_updated+0xe>
   1e2fc:	3bf0      	subs	r3, #240	; 0xf0
   1e2fe:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   1e302:	2200      	movs	r2, #0
   1e304:	4611      	mov	r1, r2
   1e306:	e000      	b.n	1e30a <att_chan_mtu_updated+0x1a>
   1e308:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   1e30a:	4284      	cmp	r4, r0
   1e30c:	d007      	beq.n	1e31e <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e30e:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e310:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e312:	42b1      	cmp	r1, r6
   1e314:	bf38      	it	cc
   1e316:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e318:	42a2      	cmp	r2, r4
   1e31a:	bf38      	it	cc
   1e31c:	4622      	movcc	r2, r4
   1e31e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e320:	b12b      	cbz	r3, 1e32e <att_chan_mtu_updated+0x3e>
   1e322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1e326:	2b00      	cmp	r3, #0
   1e328:	d1ee      	bne.n	1e308 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1e32a:	4284      	cmp	r4, r0
   1e32c:	d1ef      	bne.n	1e30e <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e32e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1e330:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e332:	428b      	cmp	r3, r1
   1e334:	d801      	bhi.n	1e33a <att_chan_mtu_updated+0x4a>
   1e336:	4290      	cmp	r0, r2
   1e338:	d90b      	bls.n	1e352 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e33a:	4282      	cmp	r2, r0
   1e33c:	bf38      	it	cc
   1e33e:	4602      	movcc	r2, r0
   1e340:	4299      	cmp	r1, r3
   1e342:	6828      	ldr	r0, [r5, #0]
   1e344:	bf38      	it	cc
   1e346:	4619      	movcc	r1, r3
}
   1e348:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e34a:	f7f5 b905 	b.w	13558 <bt_gatt_att_max_mtu_changed>
   1e34e:	4611      	mov	r1, r2
   1e350:	e7ed      	b.n	1e32e <att_chan_mtu_updated+0x3e>
}
   1e352:	bc70      	pop	{r4, r5, r6}
   1e354:	4770      	bx	lr

0001e356 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e356:	68d0      	ldr	r0, [r2, #12]
   1e358:	3104      	adds	r1, #4
   1e35a:	7803      	ldrb	r3, [r0, #0]
   1e35c:	b913      	cbnz	r3, 1e364 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e35e:	7001      	strb	r1, [r0, #0]
	return true;
   1e360:	2001      	movs	r0, #1
   1e362:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e364:	428b      	cmp	r3, r1
   1e366:	d0fb      	beq.n	1e360 <attr_read_group_cb+0xa>
		data->group = NULL;
   1e368:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e36a:	6891      	ldr	r1, [r2, #8]
   1e36c:	898b      	ldrh	r3, [r1, #12]
   1e36e:	3b04      	subs	r3, #4
   1e370:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e372:	6110      	str	r0, [r2, #16]
}
   1e374:	4770      	bx	lr

0001e376 <z_log_msg_static_create.constprop.0>:
   1e376:	2300      	movs	r3, #0
   1e378:	f7ed bac6 	b.w	b908 <z_impl_z_log_msg_static_create>

0001e37c <chan_req_send>:
{
   1e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e37e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e380:	6888      	ldr	r0, [r1, #8]
   1e382:	f7ff ff0d 	bl	1e1a0 <net_buf_frags_len>
   1e386:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1e388:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e38a:	4283      	cmp	r3, r0
   1e38c:	d30d      	bcc.n	1e3aa <chan_req_send+0x2e>
	req->buf = NULL;
   1e38e:	2600      	movs	r6, #0
	chan->req = req;
   1e390:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   1e394:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   1e396:	4628      	mov	r0, r5
	req->buf = NULL;
   1e398:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1e39a:	4639      	mov	r1, r7
   1e39c:	f7f3 f974 	bl	11688 <chan_send>
	if (err) {
   1e3a0:	b110      	cbz	r0, 1e3a8 <chan_req_send+0x2c>
		req->buf = buf;
   1e3a2:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1e3a4:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   1e3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1e3aa:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e3ae:	e7fb      	b.n	1e3a8 <chan_req_send+0x2c>

0001e3b0 <process_queue>:
{
   1e3b0:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1e3b2:	2200      	movs	r2, #0
{
   1e3b4:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1e3b6:	2300      	movs	r3, #0
   1e3b8:	4608      	mov	r0, r1
{
   1e3ba:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1e3bc:	f7f5 fa52 	bl	13864 <net_buf_get>
	if (buf) {
   1e3c0:	4605      	mov	r5, r0
   1e3c2:	b158      	cbz	r0, 1e3dc <process_queue+0x2c>
	return chan_send(chan, buf);
   1e3c4:	4601      	mov	r1, r0
   1e3c6:	4620      	mov	r0, r4
   1e3c8:	f7f3 f95e 	bl	11688 <chan_send>
		if (err) {
   1e3cc:	4604      	mov	r4, r0
   1e3ce:	b118      	cbz	r0, 1e3d8 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1e3d0:	4629      	mov	r1, r5
   1e3d2:	4630      	mov	r0, r6
   1e3d4:	f001 fe20 	bl	20018 <k_queue_prepend>
}
   1e3d8:	4620      	mov	r0, r4
   1e3da:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e3dc:	f06f 0401 	mvn.w	r4, #1
   1e3e0:	e7fa      	b.n	1e3d8 <process_queue+0x28>

0001e3e2 <bt_att_chan_send_rsp>:
{
   1e3e2:	b538      	push	{r3, r4, r5, lr}
   1e3e4:	4604      	mov	r4, r0
   1e3e6:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1e3e8:	f7f3 f94e 	bl	11688 <chan_send>
	if (err) {
   1e3ec:	b130      	cbz	r0, 1e3fc <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1e3ee:	4629      	mov	r1, r5
   1e3f0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   1e3f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1e3f8:	f7f5 bb76 	b.w	13ae8 <net_buf_put>
}
   1e3fc:	bd38      	pop	{r3, r4, r5, pc}

0001e3fe <att_chan_read>:
{
   1e3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e402:	4680      	mov	r8, r0
   1e404:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e406:	4610      	mov	r0, r2
{
   1e408:	4699      	mov	r9, r3
   1e40a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e40c:	f7ff fec8 	bl	1e1a0 <net_buf_frags_len>
   1e410:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   1e414:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e416:	4283      	cmp	r3, r0
   1e418:	d97a      	bls.n	1e510 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e41a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1e41e:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1e420:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e422:	f7f5 fbed 	bl	13c00 <net_buf_frag_last>
	size_t len, total = 0;
   1e426:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e42a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e42c:	4630      	mov	r0, r6
   1e42e:	f7ff feb7 	bl	1e1a0 <net_buf_frags_len>
   1e432:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1e436:	f105 0708 	add.w	r7, r5, #8
   1e43a:	1a24      	subs	r4, r4, r0
   1e43c:	4638      	mov	r0, r7
   1e43e:	f000 fd1d 	bl	1ee7c <net_buf_simple_tailroom>
   1e442:	4284      	cmp	r4, r0
   1e444:	d211      	bcs.n	1e46a <att_chan_read+0x6c>
   1e446:	4630      	mov	r0, r6
   1e448:	f7ff feaa 	bl	1e1a0 <net_buf_frags_len>
   1e44c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1e450:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e452:	bb34      	cbnz	r4, 1e4a2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e454:	79b0      	ldrb	r0, [r6, #6]
   1e456:	f7f5 f8dd 	bl	13614 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e45a:	2200      	movs	r2, #0
   1e45c:	2300      	movs	r3, #0
   1e45e:	f000 fcf5 	bl	1ee4c <net_buf_alloc_fixed>
			if (!frag) {
   1e462:	4605      	mov	r5, r0
   1e464:	b930      	cbnz	r0, 1e474 <att_chan_read+0x76>
	return total;
   1e466:	4657      	mov	r7, sl
   1e468:	e02c      	b.n	1e4c4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e46a:	4638      	mov	r0, r7
   1e46c:	f000 fd06 	bl	1ee7c <net_buf_simple_tailroom>
   1e470:	4604      	mov	r4, r0
   1e472:	e7ee      	b.n	1e452 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e474:	4601      	mov	r1, r0
   1e476:	4630      	mov	r0, r6
   1e478:	f7f5 fc08 	bl	13c8c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e47c:	4630      	mov	r0, r6
   1e47e:	f7ff fe8f 	bl	1e1a0 <net_buf_frags_len>
   1e482:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1e486:	f105 0708 	add.w	r7, r5, #8
   1e48a:	1a24      	subs	r4, r4, r0
   1e48c:	4638      	mov	r0, r7
   1e48e:	f000 fcf5 	bl	1ee7c <net_buf_simple_tailroom>
   1e492:	4284      	cmp	r4, r0
   1e494:	d21a      	bcs.n	1e4cc <att_chan_read+0xce>
   1e496:	4630      	mov	r0, r6
   1e498:	f7ff fe82 	bl	1e1a0 <net_buf_frags_len>
   1e49c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1e4a0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e4a2:	68a9      	ldr	r1, [r5, #8]
   1e4a4:	89aa      	ldrh	r2, [r5, #12]
   1e4a6:	f8cd 9000 	str.w	r9, [sp]
   1e4aa:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e4ae:	440a      	add	r2, r1
   1e4b0:	9803      	ldr	r0, [sp, #12]
   1e4b2:	4659      	mov	r1, fp
   1e4b4:	b2a3      	uxth	r3, r4
   1e4b6:	47b8      	blx	r7
		if (read < 0) {
   1e4b8:	1e07      	subs	r7, r0, #0
   1e4ba:	da0c      	bge.n	1e4d6 <att_chan_read+0xd8>
				return total;
   1e4bc:	f1ba 0f00 	cmp.w	sl, #0
   1e4c0:	bf18      	it	ne
   1e4c2:	4657      	movne	r7, sl
}
   1e4c4:	4638      	mov	r0, r7
   1e4c6:	b005      	add	sp, #20
   1e4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4cc:	4638      	mov	r0, r7
   1e4ce:	f000 fcd5 	bl	1ee7c <net_buf_simple_tailroom>
   1e4d2:	4604      	mov	r4, r0
   1e4d4:	e7e5      	b.n	1e4a2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e4d8:	b993      	cbnz	r3, 1e500 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e4da:	4639      	mov	r1, r7
   1e4dc:	f105 0008 	add.w	r0, r5, #8
   1e4e0:	f7f5 fc54 	bl	13d8c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e4e4:	4630      	mov	r0, r6
   1e4e6:	f7ff fe5b 	bl	1e1a0 <net_buf_frags_len>
   1e4ea:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1e4ee:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e4f0:	4283      	cmp	r3, r0
		total += read;
   1e4f2:	44ba      	add	sl, r7
		offset += read;
   1e4f4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e4f8:	d9b5      	bls.n	1e466 <att_chan_read+0x68>
   1e4fa:	42a7      	cmp	r7, r4
   1e4fc:	d096      	beq.n	1e42c <att_chan_read+0x2e>
   1e4fe:	e7b2      	b.n	1e466 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1e500:	4639      	mov	r1, r7
   1e502:	4628      	mov	r0, r5
   1e504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e508:	4798      	blx	r3
   1e50a:	2800      	cmp	r0, #0
   1e50c:	d1e5      	bne.n	1e4da <att_chan_read+0xdc>
   1e50e:	e7aa      	b.n	1e466 <att_chan_read+0x68>
		return 0;
   1e510:	2700      	movs	r7, #0
   1e512:	e7d7      	b.n	1e4c4 <att_chan_read+0xc6>

0001e514 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e514:	2200      	movs	r2, #0
	return list->head;
   1e516:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e518:	b903      	cbnz	r3, 1e51c <sys_slist_find_and_remove.isra.0+0x8>
   1e51a:	4770      	bx	lr
   1e51c:	428b      	cmp	r3, r1
   1e51e:	d10f      	bne.n	1e540 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1e520:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e522:	b93a      	cbnz	r2, 1e534 <sys_slist_find_and_remove.isra.0+0x20>
   1e524:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1e526:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e528:	4291      	cmp	r1, r2
   1e52a:	d100      	bne.n	1e52e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1e52c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1e52e:	2300      	movs	r3, #0
   1e530:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e532:	4770      	bx	lr
	parent->next = child;
   1e534:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e536:	6843      	ldr	r3, [r0, #4]
   1e538:	4299      	cmp	r1, r3
	list->tail = node;
   1e53a:	bf08      	it	eq
   1e53c:	6042      	streq	r2, [r0, #4]
}
   1e53e:	e7f6      	b.n	1e52e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1e540:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e542:	681b      	ldr	r3, [r3, #0]
   1e544:	e7e8      	b.n	1e518 <sys_slist_find_and_remove.isra.0+0x4>

0001e546 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1e546:	2006      	movs	r0, #6
   1e548:	4770      	bx	lr

0001e54a <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e54a:	2301      	movs	r3, #1
{
   1e54c:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e54e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e552:	e8d0 3fef 	ldaex	r3, [r0]
   1e556:	ea43 0201 	orr.w	r2, r3, r1
   1e55a:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1e55e:	2c00      	cmp	r4, #0
   1e560:	d1f7      	bne.n	1e552 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   1e562:	4219      	tst	r1, r3
}
   1e564:	bf14      	ite	ne
   1e566:	2001      	movne	r0, #1
   1e568:	2000      	moveq	r0, #0
   1e56a:	bd10      	pop	{r4, pc}

0001e56c <read_cb>:
{
   1e56c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   1e56e:	2300      	movs	r3, #0
{
   1e570:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   1e572:	6816      	ldr	r6, [r2, #0]
{
   1e574:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1e576:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e578:	4629      	mov	r1, r5
	data->err = 0x00;
   1e57a:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e57c:	2295      	movs	r2, #149	; 0x95
   1e57e:	f000 fbd4 	bl	1ed2a <bt_gatt_check_perm>
   1e582:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1e584:	b980      	cbnz	r0, 1e5a8 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e586:	e9cd 0000 	strd	r0, r0, [sp]
   1e58a:	4629      	mov	r1, r5
   1e58c:	4630      	mov	r0, r6
   1e58e:	88a3      	ldrh	r3, [r4, #4]
   1e590:	68a2      	ldr	r2, [r4, #8]
   1e592:	f7ff ff34 	bl	1e3fe <att_chan_read>
	if (ret < 0) {
   1e596:	2800      	cmp	r0, #0
   1e598:	da09      	bge.n	1e5ae <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1e59a:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1e59e:	bf32      	itee	cc
   1e5a0:	200e      	movcc	r0, #14
		return -err;
   1e5a2:	4240      	negcs	r0, r0
   1e5a4:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   1e5a6:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1e5a8:	2000      	movs	r0, #0
}
   1e5aa:	b002      	add	sp, #8
   1e5ac:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1e5ae:	2001      	movs	r0, #1
   1e5b0:	e7fb      	b.n	1e5aa <read_cb+0x3e>

0001e5b2 <read_vl_cb>:
{
   1e5b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   1e5b6:	2300      	movs	r3, #0
{
   1e5b8:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   1e5ba:	f8d2 8000 	ldr.w	r8, [r2]
{
   1e5be:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1e5c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e5c4:	4631      	mov	r1, r6
	data->err = 0x00;
   1e5c6:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e5c8:	2295      	movs	r2, #149	; 0x95
   1e5ca:	f000 fbae 	bl	1ed2a <bt_gatt_check_perm>
   1e5ce:	4605      	mov	r5, r0
   1e5d0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1e5d2:	b9e0      	cbnz	r0, 1e60e <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1e5d4:	68a0      	ldr	r0, [r4, #8]
   1e5d6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1e5da:	8982      	ldrh	r2, [r0, #12]
   1e5dc:	1a9b      	subs	r3, r3, r2
   1e5de:	2b01      	cmp	r3, #1
   1e5e0:	dd15      	ble.n	1e60e <read_vl_cb+0x5c>
   1e5e2:	2102      	movs	r1, #2
   1e5e4:	3008      	adds	r0, #8
   1e5e6:	f7f5 fbd1 	bl	13d8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e5ea:	e9cd 5500 	strd	r5, r5, [sp]
   1e5ee:	4607      	mov	r7, r0
   1e5f0:	88a3      	ldrh	r3, [r4, #4]
   1e5f2:	4631      	mov	r1, r6
   1e5f4:	4640      	mov	r0, r8
   1e5f6:	68a2      	ldr	r2, [r4, #8]
   1e5f8:	f7ff ff01 	bl	1e3fe <att_chan_read>
	if (read < 0) {
   1e5fc:	1e03      	subs	r3, r0, #0
   1e5fe:	da0a      	bge.n	1e616 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1e600:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1e604:	bf32      	itee	cc
   1e606:	230e      	movcc	r3, #14
		return -err;
   1e608:	425b      	negcs	r3, r3
   1e60a:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   1e60c:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1e60e:	2000      	movs	r0, #0
}
   1e610:	b002      	add	sp, #8
   1e612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1e616:	2001      	movs	r0, #1
	rsp->len = read;
   1e618:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1e61a:	e7f9      	b.n	1e610 <read_vl_cb+0x5e>

0001e61c <bt_att_sent>:
{
   1e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e61e:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   1e620:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e624:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e626:	f100 0394 	add.w	r3, r0, #148	; 0x94
   1e62a:	e8d3 1fef 	ldaex	r1, [r3]
   1e62e:	f021 0110 	bic.w	r1, r1, #16
   1e632:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e636:	2a00      	cmp	r2, #0
   1e638:	d1f7      	bne.n	1e62a <bt_att_sent+0xe>
	if (!att) {
   1e63a:	b30c      	cbz	r4, 1e680 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1e63c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1e640:	b98b      	cbnz	r3, 1e666 <bt_att_sent+0x4a>
   1e642:	6863      	ldr	r3, [r4, #4]
   1e644:	b17b      	cbz	r3, 1e666 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e646:	1d20      	adds	r0, r4, #4
   1e648:	f7ff fda0 	bl	1e18c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e64c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e64e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e650:	4638      	mov	r0, r7
   1e652:	f7ff fe93 	bl	1e37c <chan_req_send>
   1e656:	2800      	cmp	r0, #0
   1e658:	da12      	bge.n	1e680 <bt_att_sent+0x64>
	return list->head;
   1e65a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1e65c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e65e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1e660:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e662:	b903      	cbnz	r3, 1e666 <bt_att_sent+0x4a>
	list->tail = node;
   1e664:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1e666:	4638      	mov	r0, r7
   1e668:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   1e66c:	f7ff fea0 	bl	1e3b0 <process_queue>
	if (!err) {
   1e670:	b130      	cbz	r0, 1e680 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   1e672:	4638      	mov	r0, r7
   1e674:	f104 010c 	add.w	r1, r4, #12
}
   1e678:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1e67c:	f7ff be98 	b.w	1e3b0 <process_queue>
}
   1e680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e682 <att_req_send_process>:
{
   1e682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1e686:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1e688:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e68a:	2c00      	cmp	r4, #0
   1e68c:	d03b      	beq.n	1e706 <att_req_send_process+0x84>
	return node->next;
   1e68e:	f854 69f0 	ldr.w	r6, [r4], #-240
   1e692:	b106      	cbz	r6, 1e696 <att_req_send_process+0x14>
   1e694:	3ef0      	subs	r6, #240	; 0xf0
{
   1e696:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1e698:	f108 0704 	add.w	r7, r8, #4
{
   1e69c:	461d      	mov	r5, r3
   1e69e:	e013      	b.n	1e6c8 <att_req_send_process+0x46>
		if (!req && prev &&
   1e6a0:	b1c3      	cbz	r3, 1e6d4 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1e6a2:	2103      	movs	r1, #3
   1e6a4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1e6a8:	f7ff fd94 	bl	1e1d4 <atomic_test_bit>
   1e6ac:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1e6ae:	f103 0098 	add.w	r0, r3, #152	; 0x98
   1e6b2:	f7ff fd8f 	bl	1e1d4 <atomic_test_bit>
		if (!req && prev &&
   1e6b6:	4282      	cmp	r2, r0
   1e6b8:	d10c      	bne.n	1e6d4 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e6ba:	b326      	cbz	r6, 1e706 <att_req_send_process+0x84>
   1e6bc:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   1e6c0:	b102      	cbz	r2, 1e6c4 <att_req_send_process+0x42>
   1e6c2:	3af0      	subs	r2, #240	; 0xf0
{
   1e6c4:	4634      	mov	r4, r6
   1e6c6:	4616      	mov	r6, r2
		if (chan->req) {
   1e6c8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   1e6cc:	2a00      	cmp	r2, #0
   1e6ce:	d1f4      	bne.n	1e6ba <att_req_send_process+0x38>
		if (!req && prev &&
   1e6d0:	2d00      	cmp	r5, #0
   1e6d2:	d0e5      	beq.n	1e6a0 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1e6d4:	4638      	mov	r0, r7
   1e6d6:	f7ff fd59 	bl	1e18c <sys_slist_get>
	if (node) {
   1e6da:	4605      	mov	r5, r0
   1e6dc:	b908      	cbnz	r0, 1e6e2 <att_req_send_process+0x60>
   1e6de:	4623      	mov	r3, r4
   1e6e0:	e7eb      	b.n	1e6ba <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1e6e2:	4601      	mov	r1, r0
   1e6e4:	4620      	mov	r0, r4
   1e6e6:	f7f3 f843 	bl	11770 <bt_att_chan_req_send>
   1e6ea:	2800      	cmp	r0, #0
   1e6ec:	da0b      	bge.n	1e706 <att_req_send_process+0x84>
	return list->head;
   1e6ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1e6f2:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e6f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1e6f8:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e6fc:	2b00      	cmp	r3, #0
   1e6fe:	d1ee      	bne.n	1e6de <att_req_send_process+0x5c>
	list->tail = node;
   1e700:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1e704:	e7eb      	b.n	1e6de <att_req_send_process+0x5c>
}
   1e706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e70a <bt_att_status>:
{
   1e70a:	b538      	push	{r3, r4, r5, lr}
   1e70c:	4605      	mov	r5, r0
   1e70e:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e710:	2100      	movs	r1, #0
   1e712:	f7ff fd5f 	bl	1e1d4 <atomic_test_bit>
   1e716:	b1c0      	cbz	r0, 1e74a <bt_att_status+0x40>
	if (!chan->att) {
   1e718:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1e71c:	b1a8      	cbz	r0, 1e74a <bt_att_status+0x40>
	if (chan->req) {
   1e71e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1e722:	b993      	cbnz	r3, 1e74a <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1e724:	3004      	adds	r0, #4
   1e726:	f7ff fd31 	bl	1e18c <sys_slist_get>
	if (!node) {
   1e72a:	4604      	mov	r4, r0
   1e72c:	b168      	cbz	r0, 1e74a <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e72e:	4601      	mov	r1, r0
   1e730:	1f28      	subs	r0, r5, #4
   1e732:	f7f3 f81d 	bl	11770 <bt_att_chan_req_send>
   1e736:	2800      	cmp	r0, #0
   1e738:	da07      	bge.n	1e74a <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1e73a:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1e73e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1e740:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e742:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e744:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e746:	b902      	cbnz	r2, 1e74a <bt_att_status+0x40>
	list->tail = node;
   1e748:	609c      	str	r4, [r3, #8]
}
   1e74a:	bd38      	pop	{r3, r4, r5, pc}

0001e74c <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1e74c:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1e74e:	6883      	ldr	r3, [r0, #8]
   1e750:	699b      	ldr	r3, [r3, #24]
   1e752:	b10b      	cbz	r3, 1e758 <att_sent+0xc>
		chan->ops->sent(chan);
   1e754:	3004      	adds	r0, #4
   1e756:	4718      	bx	r3
}
   1e758:	4770      	bx	lr

0001e75a <att_tx_complete>:
{
   1e75a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e75e:	4606      	mov	r6, r0
   1e760:	460d      	mov	r5, r1
	if (!err) {
   1e762:	4614      	mov	r4, r2
   1e764:	b122      	cbz	r2, 1e770 <att_tx_complete+0x16>
}
   1e766:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1e76a:	4608      	mov	r0, r1
   1e76c:	f7f2 beac 	b.w	114c8 <tx_meta_data_free>
		att_sent(conn, user_data);
   1e770:	f7ff ffec 	bl	1e74c <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1e774:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1e776:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1e778:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1e77c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1e780:	f7f2 fea2 	bl	114c8 <tx_meta_data_free>
	if (!err && func) {
   1e784:	b92f      	cbnz	r7, 1e792 <att_tx_complete+0x38>
}
   1e786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1e78a:	4649      	mov	r1, r9
   1e78c:	4630      	mov	r0, r6
   1e78e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1e790:	3401      	adds	r4, #1
   1e792:	b2a3      	uxth	r3, r4
   1e794:	4543      	cmp	r3, r8
   1e796:	d3f8      	bcc.n	1e78a <att_tx_complete+0x30>
   1e798:	e7f5      	b.n	1e786 <att_tx_complete+0x2c>

0001e79a <att_req_sent>:
{
   1e79a:	b510      	push	{r4, lr}
   1e79c:	460c      	mov	r4, r1
	if (!err) {
   1e79e:	b90a      	cbnz	r2, 1e7a4 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1e7a0:	f7ff ffd4 	bl	1e74c <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1e7a4:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1e7a6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1e7aa:	b12b      	cbz	r3, 1e7b8 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1e7ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e7b0:	2300      	movs	r3, #0
   1e7b2:	30c0      	adds	r0, #192	; 0xc0
   1e7b4:	f7fb fc68 	bl	1a088 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1e7b8:	4620      	mov	r0, r4
}
   1e7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1e7be:	f7f2 be83 	b.w	114c8 <tx_meta_data_free>

0001e7c2 <att_cfm_sent>:
{
   1e7c2:	b510      	push	{r4, lr}
   1e7c4:	460c      	mov	r4, r1
	if (!err) {
   1e7c6:	b90a      	cbnz	r2, 1e7cc <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1e7c8:	f7ff ffc0 	bl	1e74c <att_sent>
   1e7cc:	6823      	ldr	r3, [r4, #0]
   1e7ce:	3398      	adds	r3, #152	; 0x98
   1e7d0:	e8d3 1fef 	ldaex	r1, [r3]
   1e7d4:	f021 0102 	bic.w	r1, r1, #2
   1e7d8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e7dc:	2a00      	cmp	r2, #0
   1e7de:	d1f7      	bne.n	1e7d0 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   1e7e0:	4620      	mov	r0, r4
}
   1e7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1e7e6:	f7f2 be6f 	b.w	114c8 <tx_meta_data_free>

0001e7ea <att_rsp_sent>:
{
   1e7ea:	b510      	push	{r4, lr}
   1e7ec:	460c      	mov	r4, r1
	if (!err) {
   1e7ee:	b90a      	cbnz	r2, 1e7f4 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1e7f0:	f7ff ffac 	bl	1e74c <att_sent>
   1e7f4:	6823      	ldr	r3, [r4, #0]
   1e7f6:	3398      	adds	r3, #152	; 0x98
   1e7f8:	e8d3 1fef 	ldaex	r1, [r3]
   1e7fc:	f021 0101 	bic.w	r1, r1, #1
   1e800:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e804:	2a00      	cmp	r2, #0
   1e806:	d1f7      	bne.n	1e7f8 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   1e808:	4620      	mov	r0, r4
}
   1e80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1e80e:	f7f2 be5b 	b.w	114c8 <tx_meta_data_free>

0001e812 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e816:	4688      	mov	r8, r1
   1e818:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e81a:	2101      	movs	r1, #1
   1e81c:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e81e:	4605      	mov	r5, r0
   1e820:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e822:	f7f3 f977 	bl	11b14 <bt_att_chan_create_pdu>
	if (!buf) {
   1e826:	4604      	mov	r4, r0
   1e828:	b170      	cbz	r0, 1e848 <send_err_rsp.part.0+0x36>
   1e82a:	2104      	movs	r1, #4
   1e82c:	3008      	adds	r0, #8
   1e82e:	f7f5 faad 	bl	13d8c <net_buf_simple_add>
	rsp->request = req;
   1e832:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1e836:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1e83a:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1e83c:	4621      	mov	r1, r4
   1e83e:	4628      	mov	r0, r5
}
   1e840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1e844:	f7ff bdcd 	b.w	1e3e2 <bt_att_chan_send_rsp>
}
   1e848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e84c <att_write_req>:
{
   1e84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e84e:	460c      	mov	r4, r1
   1e850:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1e852:	f101 0008 	add.w	r0, r1, #8
   1e856:	f000 fb05 	bl	1ee64 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1e85a:	89a2      	ldrh	r2, [r4, #12]
   1e85c:	4603      	mov	r3, r0
   1e85e:	9201      	str	r2, [sp, #4]
   1e860:	68a2      	ldr	r2, [r4, #8]
   1e862:	2112      	movs	r1, #18
   1e864:	9200      	str	r2, [sp, #0]
   1e866:	4628      	mov	r0, r5
   1e868:	2213      	movs	r2, #19
   1e86a:	f7f3 fa6d 	bl	11d48 <att_write_rsp.constprop.0>
}
   1e86e:	b003      	add	sp, #12
   1e870:	bd30      	pop	{r4, r5, pc}

0001e872 <att_write_cmd>:
{
   1e872:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e874:	460c      	mov	r4, r1
   1e876:	4605      	mov	r5, r0
   1e878:	f101 0008 	add.w	r0, r1, #8
   1e87c:	f000 faf2 	bl	1ee64 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1e880:	89a2      	ldrh	r2, [r4, #12]
   1e882:	4603      	mov	r3, r0
   1e884:	9201      	str	r2, [sp, #4]
   1e886:	68a2      	ldr	r2, [r4, #8]
   1e888:	4628      	mov	r0, r5
   1e88a:	9200      	str	r2, [sp, #0]
   1e88c:	2200      	movs	r2, #0
   1e88e:	4611      	mov	r1, r2
   1e890:	f7f3 fa5a 	bl	11d48 <att_write_rsp.constprop.0>
}
   1e894:	b003      	add	sp, #12
   1e896:	bd30      	pop	{r4, r5, pc}

0001e898 <att_read_blob_req>:
{
   1e898:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1e89a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1e89c:	210c      	movs	r1, #12
   1e89e:	8813      	ldrh	r3, [r2, #0]
   1e8a0:	8852      	ldrh	r2, [r2, #2]
   1e8a2:	9200      	str	r2, [sp, #0]
   1e8a4:	220d      	movs	r2, #13
   1e8a6:	f7f3 fc13 	bl	120d0 <att_read_rsp>
}
   1e8aa:	b003      	add	sp, #12
   1e8ac:	f85d fb04 	ldr.w	pc, [sp], #4

0001e8b0 <att_read_req>:
{
   1e8b0:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1e8b2:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1e8b4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1e8b6:	210a      	movs	r1, #10
   1e8b8:	881b      	ldrh	r3, [r3, #0]
   1e8ba:	9200      	str	r2, [sp, #0]
   1e8bc:	220b      	movs	r2, #11
   1e8be:	f7f3 fc07 	bl	120d0 <att_read_rsp>
}
   1e8c2:	b003      	add	sp, #12
   1e8c4:	f85d fb04 	ldr.w	pc, [sp], #4

0001e8c8 <att_mtu_req>:
{
   1e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8ca:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1e8cc:	f850 2b98 	ldr.w	r2, [r0], #152
{
   1e8d0:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1e8d2:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1e8d4:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1e8d6:	f7ff fc7d 	bl	1e1d4 <atomic_test_bit>
   1e8da:	4604      	mov	r4, r0
   1e8dc:	b9d8      	cbnz	r0, 1e916 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1e8de:	689b      	ldr	r3, [r3, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1e8e0:	881b      	ldrh	r3, [r3, #0]
   1e8e2:	2b16      	cmp	r3, #22
   1e8e4:	d919      	bls.n	1e91a <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1e8e6:	4630      	mov	r0, r6
   1e8e8:	2202      	movs	r2, #2
   1e8ea:	f7f3 fa91 	bl	11e10 <bt_att_create_pdu>
	if (!pdu) {
   1e8ee:	4606      	mov	r6, r0
   1e8f0:	b1a8      	cbz	r0, 1e91e <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   1e8f2:	2102      	movs	r1, #2
   1e8f4:	3008      	adds	r0, #8
   1e8f6:	f7f5 fa49 	bl	13d8c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1e8fa:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu);
   1e8fc:	4631      	mov	r1, r6
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1e8fe:	7007      	strb	r7, [r0, #0]
   1e900:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1e902:	4628      	mov	r0, r5
   1e904:	f7ff fd6d 	bl	1e3e2 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1e908:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1e90a:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1e90c:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1e90e:	f7ff fcef 	bl	1e2f0 <att_chan_mtu_updated>
	return 0;
   1e912:	4620      	mov	r0, r4
}
   1e914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1e916:	2006      	movs	r0, #6
   1e918:	e7fc      	b.n	1e914 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   1e91a:	2004      	movs	r0, #4
   1e91c:	e7fa      	b.n	1e914 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1e91e:	200e      	movs	r0, #14
   1e920:	e7f8      	b.n	1e914 <att_mtu_req+0x4c>

0001e922 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1e922:	898a      	ldrh	r2, [r1, #12]
   1e924:	2300      	movs	r3, #0
   1e926:	6889      	ldr	r1, [r1, #8]
   1e928:	f7f3 bd7e 	b.w	12428 <att_handle_rsp>

0001e92c <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1e92c:	2001      	movs	r0, #1
   1e92e:	4770      	bx	lr

0001e930 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1e930:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1e932:	f7f2 ff5f 	bl	117f4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1e936:	b178      	cbz	r0, 1e958 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   1e938:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1e93a:	b16b      	cbz	r3, 1e958 <bt_att_clear_out_of_sync_sent+0x28>
   1e93c:	3bf0      	subs	r3, #240	; 0xf0
   1e93e:	f103 0298 	add.w	r2, r3, #152	; 0x98
   1e942:	e8d2 0fef 	ldaex	r0, [r2]
   1e946:	f020 0020 	bic.w	r0, r0, #32
   1e94a:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1e94e:	2900      	cmp	r1, #0
   1e950:	d1f7      	bne.n	1e942 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   1e952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1e956:	e7f0      	b.n	1e93a <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1e958:	bd08      	pop	{r3, pc}

0001e95a <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1e95a:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1e95c:	2104      	movs	r1, #4
   1e95e:	f7ff fc0b 	bl	1e178 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1e962:	b128      	cbz	r0, 1e970 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1e964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1e968:	2105      	movs	r1, #5
   1e96a:	3094      	adds	r0, #148	; 0x94
   1e96c:	f7ff bc32 	b.w	1e1d4 <atomic_test_bit>
}
   1e970:	bd08      	pop	{r3, pc}

0001e972 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1e972:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   1e974:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1e978:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   1e97a:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   1e97c:	8082      	strh	r2, [r0, #4]
}
   1e97e:	4770      	bx	lr

0001e980 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1e980:	6010      	str	r0, [r2, #0]
}
   1e982:	2000      	movs	r0, #0
   1e984:	4770      	bx	lr

0001e986 <gatt_ccc_changed>:
{
   1e986:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1e988:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1e98a:	895a      	ldrh	r2, [r3, #10]
   1e98c:	428a      	cmp	r2, r1
   1e98e:	d003      	beq.n	1e998 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1e990:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1e992:	68db      	ldr	r3, [r3, #12]
   1e994:	b103      	cbz	r3, 1e998 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1e996:	4718      	bx	r3
}
   1e998:	4770      	bx	lr

0001e99a <gatt_indicate_rsp>:
{
   1e99a:	b510      	push	{r4, lr}
   1e99c:	9c02      	ldr	r4, [sp, #8]
   1e99e:	460a      	mov	r2, r1
	if (params->func) {
   1e9a0:	68a3      	ldr	r3, [r4, #8]
   1e9a2:	b10b      	cbz	r3, 1e9a8 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1e9a4:	4621      	mov	r1, r4
   1e9a6:	4798      	blx	r3
	params->_ref--;
   1e9a8:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e9aa:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1e9ac:	3b01      	subs	r3, #1
   1e9ae:	b2db      	uxtb	r3, r3
   1e9b0:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e9b2:	b122      	cbz	r2, 1e9be <gatt_indicate_rsp+0x24>
   1e9b4:	b91b      	cbnz	r3, 1e9be <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1e9b6:	4620      	mov	r0, r4
}
   1e9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1e9bc:	4710      	bx	r2
}
   1e9be:	bd10      	pop	{r4, pc}

0001e9c0 <match_uuid>:
	data->attr = attr;
   1e9c0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1e9c2:	8091      	strh	r1, [r2, #4]
}
   1e9c4:	2000      	movs	r0, #0
   1e9c6:	4770      	bx	lr

0001e9c8 <gen_hash_m>:
{
   1e9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e9ca:	6807      	ldr	r7, [r0, #0]
{
   1e9cc:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e9ce:	783d      	ldrb	r5, [r7, #0]
{
   1e9d0:	4614      	mov	r4, r2
   1e9d2:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e9d4:	b9dd      	cbnz	r5, 1ea0e <gen_hash_m+0x46>
	switch (u16->val) {
   1e9d6:	887b      	ldrh	r3, [r7, #2]
   1e9d8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1e9dc:	d004      	beq.n	1e9e8 <gen_hash_m+0x20>
   1e9de:	d810      	bhi.n	1ea02 <gen_hash_m+0x3a>
   1e9e0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1e9e4:	2b03      	cmp	r3, #3
   1e9e6:	d812      	bhi.n	1ea0e <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1e9e8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e9ec:	2202      	movs	r2, #2
   1e9ee:	4620      	mov	r0, r4
   1e9f0:	f10d 010a 	add.w	r1, sp, #10
   1e9f4:	f7fe fd2a 	bl	1d44c <tc_cmac_update>
   1e9f8:	b968      	cbnz	r0, 1ea16 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1e9fa:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1e9fe:	65a2      	str	r2, [r4, #88]	; 0x58
   1ea00:	e006      	b.n	1ea10 <gen_hash_m+0x48>
	switch (u16->val) {
   1ea02:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1ea06:	33ff      	adds	r3, #255	; 0xff
   1ea08:	b29b      	uxth	r3, r3
   1ea0a:	2b04      	cmp	r3, #4
   1ea0c:	d91e      	bls.n	1ea4c <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1ea0e:	2501      	movs	r5, #1
}
   1ea10:	4628      	mov	r0, r5
   1ea12:	b009      	add	sp, #36	; 0x24
   1ea14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1ea16:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea18:	2202      	movs	r2, #2
   1ea1a:	4620      	mov	r0, r4
   1ea1c:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   1ea20:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea24:	f7fe fd12 	bl	1d44c <tc_cmac_update>
   1ea28:	2800      	cmp	r0, #0
   1ea2a:	d0e6      	beq.n	1e9fa <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ea2c:	2000      	movs	r0, #0
   1ea2e:	9000      	str	r0, [sp, #0]
   1ea30:	aa03      	add	r2, sp, #12
   1ea32:	2313      	movs	r3, #19
   1ea34:	4631      	mov	r1, r6
   1ea36:	6877      	ldr	r7, [r6, #4]
   1ea38:	47b8      	blx	r7
		if (len < 0) {
   1ea3a:	1e02      	subs	r2, r0, #0
   1ea3c:	dbdf      	blt.n	1e9fe <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1ea3e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea40:	4620      	mov	r0, r4
   1ea42:	f7fe fd03 	bl	1d44c <tc_cmac_update>
   1ea46:	2800      	cmp	r0, #0
   1ea48:	d1e1      	bne.n	1ea0e <gen_hash_m+0x46>
   1ea4a:	e7d6      	b.n	1e9fa <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1ea4c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea50:	2202      	movs	r2, #2
   1ea52:	4620      	mov	r0, r4
   1ea54:	f10d 010a 	add.w	r1, sp, #10
   1ea58:	f7fe fcf8 	bl	1d44c <tc_cmac_update>
   1ea5c:	2800      	cmp	r0, #0
   1ea5e:	d0cc      	beq.n	1e9fa <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1ea60:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea62:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1ea64:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea68:	f10d 010a 	add.w	r1, sp, #10
   1ea6c:	e7e8      	b.n	1ea40 <gen_hash_m+0x78>

0001ea6e <bt_addr_le_eq>:
   1ea6e:	2207      	movs	r2, #7
{
   1ea70:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1ea72:	f7ff f839 	bl	1dae8 <memcmp>
}
   1ea76:	fab0 f080 	clz	r0, r0
   1ea7a:	0940      	lsrs	r0, r0, #5
   1ea7c:	bd08      	pop	{r3, pc}

0001ea7e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ea7e:	2207      	movs	r2, #7
   1ea80:	f7ff b842 	b.w	1db08 <memcpy>

0001ea84 <z_log_msg_static_create.constprop.0>:
   1ea84:	2300      	movs	r3, #0
   1ea86:	f7ec bf3f 	b.w	b908 <z_impl_z_log_msg_static_create>

0001ea8a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ea8a:	2301      	movs	r3, #1
   1ea8c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ea8e:	e8d0 2fef 	ldaex	r2, [r0]
   1ea92:	431a      	orrs	r2, r3
   1ea94:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1ea98:	2900      	cmp	r1, #0
   1ea9a:	d1f8      	bne.n	1ea8e <atomic_set_bit+0x4>
}
   1ea9c:	4770      	bx	lr

0001ea9e <sc_restore_rsp>:
{
   1ea9e:	b538      	push	{r3, r4, r5, lr}
   1eaa0:	4604      	mov	r4, r0
   1eaa2:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1eaa4:	f7ff ff42 	bl	1e92c <bt_att_fixed_chan_only>
   1eaa8:	b150      	cbz	r0, 1eac0 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1eaaa:	4620      	mov	r0, r4
   1eaac:	f7f3 fe14 	bl	126d8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1eab0:	b130      	cbz	r0, 1eac0 <sc_restore_rsp+0x22>
   1eab2:	7a03      	ldrb	r3, [r0, #8]
   1eab4:	07db      	lsls	r3, r3, #31
   1eab6:	d503      	bpl.n	1eac0 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1eab8:	2100      	movs	r1, #0
   1eaba:	300c      	adds	r0, #12
   1eabc:	f7ff ffe5 	bl	1ea8a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1eac0:	b965      	cbnz	r5, 1eadc <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1eac2:	7a20      	ldrb	r0, [r4, #8]
   1eac4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1eac8:	f7f3 fe1e 	bl	12708 <find_sc_cfg>
		if (sc_cfg) {
   1eacc:	b130      	cbz	r0, 1eadc <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1eace:	4629      	mov	r1, r5
}
   1ead0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1ead4:	2204      	movs	r2, #4
   1ead6:	3008      	adds	r0, #8
   1ead8:	f7ff b821 	b.w	1db1e <memset>
}
   1eadc:	bd38      	pop	{r3, r4, r5, pc}

0001eade <sc_clear>:
{
   1eade:	b570      	push	{r4, r5, r6, lr}
   1eae0:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1eae2:	f100 0690 	add.w	r6, r0, #144	; 0x90
   1eae6:	4631      	mov	r1, r6
   1eae8:	7a00      	ldrb	r0, [r0, #8]
   1eaea:	f7ff f949 	bl	1dd80 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1eaee:	4631      	mov	r1, r6
   1eaf0:	7a20      	ldrb	r0, [r4, #8]
   1eaf2:	f7f3 fe09 	bl	12708 <find_sc_cfg>
	if (!cfg) {
   1eaf6:	b128      	cbz	r0, 1eb04 <sc_clear+0x26>
}
   1eaf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1eafc:	220c      	movs	r2, #12
   1eafe:	2100      	movs	r1, #0
   1eb00:	f7ff b80d 	b.w	1db1e <memset>
}
   1eb04:	bd70      	pop	{r4, r5, r6, pc}

0001eb06 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1eb06:	2a02      	cmp	r2, #2
{
   1eb08:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1eb0a:	d108      	bne.n	1eb1e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1eb0c:	2300      	movs	r3, #0
   1eb0e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1eb12:	461a      	mov	r2, r3
   1eb14:	7a00      	ldrb	r0, [r0, #8]
   1eb16:	f7f3 fe97 	bl	12848 <sc_save>
}
   1eb1a:	2002      	movs	r0, #2
   1eb1c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1eb1e:	f7ff ffde 	bl	1eade <sc_clear>
   1eb22:	e7fa      	b.n	1eb1a <sc_ccc_cfg_write+0x14>

0001eb24 <read_appearance>:
{
   1eb24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eb26:	4615      	mov	r5, r2
   1eb28:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1eb2c:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1eb2e:	f7ff f925 	bl	1dd7c <bt_get_appearance>
	if (offset > value_len) {
   1eb32:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1eb34:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1eb38:	d80e      	bhi.n	1eb58 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1eb3a:	f1c6 0402 	rsb	r4, r6, #2
   1eb3e:	42bc      	cmp	r4, r7
   1eb40:	bfa8      	it	ge
   1eb42:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb44:	f10d 0306 	add.w	r3, sp, #6
   1eb48:	4622      	mov	r2, r4
   1eb4a:	4628      	mov	r0, r5
   1eb4c:	1999      	adds	r1, r3, r6
   1eb4e:	f7fe ffdb 	bl	1db08 <memcpy>
}
   1eb52:	4620      	mov	r0, r4
   1eb54:	b003      	add	sp, #12
   1eb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1eb5c:	e7f9      	b.n	1eb52 <read_appearance+0x2e>

0001eb5e <read_name>:
{
   1eb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb62:	4698      	mov	r8, r3
   1eb64:	4615      	mov	r5, r2
   1eb66:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1eb6a:	f7f0 fddd 	bl	f728 <bt_get_name>
   1eb6e:	4607      	mov	r7, r0
				 strlen(name));
   1eb70:	f7fe ff8b 	bl	1da8a <strlen>
	if (offset > value_len) {
   1eb74:	b283      	uxth	r3, r0
   1eb76:	42b3      	cmp	r3, r6
   1eb78:	d30c      	bcc.n	1eb94 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1eb7a:	1b9c      	subs	r4, r3, r6
   1eb7c:	4544      	cmp	r4, r8
   1eb7e:	bfa8      	it	ge
   1eb80:	4644      	movge	r4, r8
   1eb82:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb84:	4622      	mov	r2, r4
   1eb86:	4628      	mov	r0, r5
   1eb88:	19b9      	adds	r1, r7, r6
   1eb8a:	f7fe ffbd 	bl	1db08 <memcpy>
}
   1eb8e:	4620      	mov	r0, r4
   1eb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb94:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1eb98:	e7f9      	b.n	1eb8e <read_name+0x30>

0001eb9a <cf_read>:
{
   1eb9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eb9c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1eb9e:	2300      	movs	r3, #0
{
   1eba0:	4615      	mov	r5, r2
   1eba2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1eba6:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1ebaa:	f7f3 fd95 	bl	126d8 <find_cf_cfg>
	if (cfg) {
   1ebae:	b128      	cbz	r0, 1ebbc <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1ebb0:	f100 0108 	add.w	r1, r0, #8
   1ebb4:	2201      	movs	r2, #1
   1ebb6:	a801      	add	r0, sp, #4
   1ebb8:	f7fe ffa6 	bl	1db08 <memcpy>
	if (offset > value_len) {
   1ebbc:	2e01      	cmp	r6, #1
   1ebbe:	d80d      	bhi.n	1ebdc <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1ebc0:	f1c6 0401 	rsb	r4, r6, #1
   1ebc4:	42bc      	cmp	r4, r7
   1ebc6:	bfa8      	it	ge
   1ebc8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ebca:	ab01      	add	r3, sp, #4
   1ebcc:	4622      	mov	r2, r4
   1ebce:	4628      	mov	r0, r5
   1ebd0:	1999      	adds	r1, r3, r6
   1ebd2:	f7fe ff99 	bl	1db08 <memcpy>
}
   1ebd6:	4620      	mov	r0, r4
   1ebd8:	b003      	add	sp, #12
   1ebda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ebdc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1ebe0:	e7f9      	b.n	1ebd6 <cf_read+0x3c>

0001ebe2 <bt_gatt_attr_read_service>:
{
   1ebe2:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1ebe4:	68c9      	ldr	r1, [r1, #12]
{
   1ebe6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1ebe8:	780a      	ldrb	r2, [r1, #0]
{
   1ebea:	461c      	mov	r4, r3
   1ebec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1ebf0:	b992      	cbnz	r2, 1ec18 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1ebf2:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   1ebf4:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1ebf6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1ebfa:	d818      	bhi.n	1ec2e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1ebfc:	f1c3 0202 	rsb	r2, r3, #2
   1ec00:	4294      	cmp	r4, r2
   1ec02:	bfa8      	it	ge
   1ec04:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ec06:	4622      	mov	r2, r4
   1ec08:	f10d 0106 	add.w	r1, sp, #6
   1ec0c:	4419      	add	r1, r3
   1ec0e:	f7fe ff7b 	bl	1db08 <memcpy>
}
   1ec12:	4620      	mov	r0, r4
   1ec14:	b002      	add	sp, #8
   1ec16:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   1ec18:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   1ec1a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1ec1e:	d806      	bhi.n	1ec2e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1ec20:	f1c3 0210 	rsb	r2, r3, #16
   1ec24:	4294      	cmp	r4, r2
   1ec26:	bfa8      	it	ge
   1ec28:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ec2a:	4622      	mov	r2, r4
   1ec2c:	e7ee      	b.n	1ec0c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ec2e:	f06f 0406 	mvn.w	r4, #6
   1ec32:	e7ee      	b.n	1ec12 <bt_gatt_attr_read_service+0x30>

0001ec34 <bt_gatt_attr_read_ccc>:
{
   1ec34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1ec36:	68c9      	ldr	r1, [r1, #12]
{
   1ec38:	4615      	mov	r5, r2
   1ec3a:	461f      	mov	r7, r3
   1ec3c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1ec40:	f7f3 fd72 	bl	12728 <find_ccc_cfg>
	if (cfg) {
   1ec44:	b100      	cbz	r0, 1ec48 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1ec46:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1ec48:	2e02      	cmp	r6, #2
   1ec4a:	f8ad 0006 	strh.w	r0, [sp, #6]
   1ec4e:	d80e      	bhi.n	1ec6e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1ec50:	f1c6 0402 	rsb	r4, r6, #2
   1ec54:	42bc      	cmp	r4, r7
   1ec56:	bfa8      	it	ge
   1ec58:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ec5a:	f10d 0306 	add.w	r3, sp, #6
   1ec5e:	4622      	mov	r2, r4
   1ec60:	4628      	mov	r0, r5
   1ec62:	1999      	adds	r1, r3, r6
   1ec64:	f7fe ff50 	bl	1db08 <memcpy>
}
   1ec68:	4620      	mov	r0, r4
   1ec6a:	b003      	add	sp, #12
   1ec6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ec6e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1ec72:	e7f9      	b.n	1ec68 <bt_gatt_attr_read_ccc+0x34>

0001ec74 <bt_gatt_attr_value_handle>:
{
   1ec74:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ec76:	4604      	mov	r4, r0
   1ec78:	b910      	cbnz	r0, 1ec80 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1ec7a:	2000      	movs	r0, #0
}
   1ec7c:	b002      	add	sp, #8
   1ec7e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ec80:	2300      	movs	r3, #0
   1ec82:	f88d 3004 	strb.w	r3, [sp, #4]
   1ec86:	f642 0303 	movw	r3, #10243	; 0x2803
   1ec8a:	6800      	ldr	r0, [r0, #0]
   1ec8c:	a901      	add	r1, sp, #4
   1ec8e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ec92:	f7fe ff50 	bl	1db36 <bt_uuid_cmp>
   1ec96:	2800      	cmp	r0, #0
   1ec98:	d1ef      	bne.n	1ec7a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1ec9a:	68e3      	ldr	r3, [r4, #12]
   1ec9c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1ec9e:	2800      	cmp	r0, #0
   1eca0:	d1ec      	bne.n	1ec7c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1eca2:	4620      	mov	r0, r4
   1eca4:	f7f3 ff56 	bl	12b54 <bt_gatt_attr_get_handle>
   1eca8:	3001      	adds	r0, #1
   1ecaa:	b280      	uxth	r0, r0
	return handle;
   1ecac:	e7e6      	b.n	1ec7c <bt_gatt_attr_value_handle+0x8>

0001ecae <bt_gatt_attr_read_chrc>:
{
   1ecae:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ecb0:	68cc      	ldr	r4, [r1, #12]
{
   1ecb2:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   1ecb4:	79a3      	ldrb	r3, [r4, #6]
{
   1ecb6:	b087      	sub	sp, #28
   1ecb8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1ecba:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ecbe:	4615      	mov	r5, r2
   1ecc0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ecc4:	f7ff ffd6 	bl	1ec74 <bt_gatt_attr_value_handle>
   1ecc8:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1eccc:	6821      	ldr	r1, [r4, #0]
   1ecce:	780b      	ldrb	r3, [r1, #0]
   1ecd0:	b99b      	cbnz	r3, 1ecfa <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   1ecd2:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1ecd4:	884b      	ldrh	r3, [r1, #2]
   1ecd6:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1ecda:	42b4      	cmp	r4, r6
   1ecdc:	d315      	bcc.n	1ed0a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1ecde:	1ba4      	subs	r4, r4, r6
   1ece0:	42bc      	cmp	r4, r7
   1ece2:	bfa8      	it	ge
   1ece4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ece6:	ab01      	add	r3, sp, #4
   1ece8:	b2a4      	uxth	r4, r4
   1ecea:	4622      	mov	r2, r4
   1ecec:	4628      	mov	r0, r5
   1ecee:	1999      	adds	r1, r3, r6
   1ecf0:	f7fe ff0a 	bl	1db08 <memcpy>
}
   1ecf4:	4620      	mov	r0, r4
   1ecf6:	b007      	add	sp, #28
   1ecf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1ecfa:	2210      	movs	r2, #16
   1ecfc:	3101      	adds	r1, #1
   1ecfe:	f10d 0007 	add.w	r0, sp, #7
   1ed02:	f7fe ff01 	bl	1db08 <memcpy>
		value_len += 16U;
   1ed06:	2413      	movs	r4, #19
   1ed08:	e7e7      	b.n	1ecda <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ed0a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1ed0e:	e7f1      	b.n	1ecf4 <bt_gatt_attr_read_chrc+0x46>

0001ed10 <bt_gatt_foreach_attr>:
{
   1ed10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ed12:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ed16:	2300      	movs	r3, #0
   1ed18:	461a      	mov	r2, r3
   1ed1a:	9300      	str	r3, [sp, #0]
   1ed1c:	f7f3 ff62 	bl	12be4 <bt_gatt_foreach_attr_type>
}
   1ed20:	b005      	add	sp, #20
   1ed22:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed26 <db_hash_process>:
	db_hash_gen(true);
   1ed26:	f7f3 bfcd 	b.w	12cc4 <db_hash_gen.constprop.0>

0001ed2a <bt_gatt_check_perm>:
{
   1ed2a:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1ed2c:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ed2e:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ed30:	d504      	bpl.n	1ed3c <bt_gatt_check_perm+0x12>
   1ed32:	f013 0f95 	tst.w	r3, #149	; 0x95
   1ed36:	d01d      	beq.n	1ed74 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ed38:	684c      	ldr	r4, [r1, #4]
   1ed3a:	b1dc      	cbz	r4, 1ed74 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ed3c:	0794      	lsls	r4, r2, #30
   1ed3e:	d504      	bpl.n	1ed4a <bt_gatt_check_perm+0x20>
   1ed40:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1ed44:	d018      	beq.n	1ed78 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ed46:	6889      	ldr	r1, [r1, #8]
   1ed48:	b1b1      	cbz	r1, 1ed78 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   1ed4a:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1ed4e:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1ed52:	d001      	beq.n	1ed58 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   1ed54:	2005      	movs	r0, #5
}
   1ed56:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ed58:	f014 0f30 	tst.w	r4, #48	; 0x30
   1ed5c:	d105      	bne.n	1ed6a <bt_gatt_check_perm+0x40>
	return 0;
   1ed5e:	f014 0f0c 	tst.w	r4, #12
   1ed62:	bf14      	ite	ne
   1ed64:	200f      	movne	r0, #15
   1ed66:	2000      	moveq	r0, #0
   1ed68:	e7f5      	b.n	1ed56 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1ed6a:	f7ff f952 	bl	1e012 <bt_conn_get_security>
   1ed6e:	2802      	cmp	r0, #2
   1ed70:	d8f5      	bhi.n	1ed5e <bt_gatt_check_perm+0x34>
   1ed72:	e7ef      	b.n	1ed54 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ed74:	2002      	movs	r0, #2
   1ed76:	e7ee      	b.n	1ed56 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1ed78:	2003      	movs	r0, #3
   1ed7a:	e7ec      	b.n	1ed56 <bt_gatt_check_perm+0x2c>

0001ed7c <bt_gatt_change_aware>:
{
   1ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed7e:	4606      	mov	r6, r0
   1ed80:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1ed82:	f7f3 fca9 	bl	126d8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ed86:	b1e0      	cbz	r0, 1edc2 <bt_gatt_change_aware+0x46>
   1ed88:	7a03      	ldrb	r3, [r0, #8]
   1ed8a:	07db      	lsls	r3, r3, #31
   1ed8c:	d519      	bpl.n	1edc2 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ed8e:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ed92:	e8d4 5faf 	lda	r5, [r4]
   1ed96:	f015 0501 	ands.w	r5, r5, #1
   1ed9a:	d112      	bne.n	1edc2 <bt_gatt_change_aware+0x46>
	if (!req) {
   1ed9c:	b197      	cbz	r7, 1edc4 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ed9e:	e8d4 1fef 	ldaex	r1, [r4]
   1eda2:	f021 0302 	bic.w	r3, r1, #2
   1eda6:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1edaa:	2a00      	cmp	r2, #0
   1edac:	d1f7      	bne.n	1ed9e <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1edae:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1edb2:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1edb4:	d008      	beq.n	1edc8 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   1edb6:	f7ff fdbb 	bl	1e930 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1edba:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1edbc:	4620      	mov	r0, r4
   1edbe:	f7ff fe64 	bl	1ea8a <atomic_set_bit>
		return true;
   1edc2:	2501      	movs	r5, #1
}
   1edc4:	4628      	mov	r0, r5
   1edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1edc8:	f7ff fdb0 	bl	1e92c <bt_att_fixed_chan_only>
   1edcc:	2800      	cmp	r0, #0
   1edce:	d0f9      	beq.n	1edc4 <bt_gatt_change_aware+0x48>
   1edd0:	4630      	mov	r0, r6
   1edd2:	f7ff fdc2 	bl	1e95a <bt_att_out_of_sync_sent_on_fixed>
   1edd6:	2800      	cmp	r0, #0
   1edd8:	d0f4      	beq.n	1edc4 <bt_gatt_change_aware+0x48>
   1edda:	e8d4 3fef 	ldaex	r3, [r4]
   1edde:	f023 0302 	bic.w	r3, r3, #2
   1ede2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1ede6:	2a00      	cmp	r2, #0
   1ede8:	d1f7      	bne.n	1edda <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   1edea:	4630      	mov	r0, r6
   1edec:	f7ff fda0 	bl	1e930 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1edf0:	4639      	mov	r1, r7
   1edf2:	e7e3      	b.n	1edbc <bt_gatt_change_aware+0x40>

0001edf4 <bt_smp_recv>:
{
   1edf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1edf6:	2100      	movs	r1, #0
   1edf8:	f04f 32ff 	mov.w	r2, #4294967295
   1edfc:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1ee00:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ee02:	4608      	mov	r0, r1
   1ee04:	f7ff f99c 	bl	1e140 <bt_l2cap_create_pdu_timeout>
   1ee08:	f100 0608 	add.w	r6, r0, #8
   1ee0c:	4604      	mov	r4, r0
   1ee0e:	2101      	movs	r1, #1
   1ee10:	4630      	mov	r0, r6
   1ee12:	f7f4 ffbb 	bl	13d8c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1ee16:	2505      	movs	r5, #5
   1ee18:	2101      	movs	r1, #1
   1ee1a:	7005      	strb	r5, [r0, #0]
   1ee1c:	4630      	mov	r0, r6
   1ee1e:	f7f4 ffb5 	bl	13d8c <net_buf_simple_add>
   1ee22:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1ee24:	7005      	strb	r5, [r0, #0]
   1ee26:	4622      	mov	r2, r4
   1ee28:	2106      	movs	r1, #6
   1ee2a:	4638      	mov	r0, r7
   1ee2c:	9300      	str	r3, [sp, #0]
   1ee2e:	f7ff f98a 	bl	1e146 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1ee32:	b110      	cbz	r0, 1ee3a <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1ee34:	4620      	mov	r0, r4
   1ee36:	f7f4 fe87 	bl	13b48 <net_buf_unref>
}
   1ee3a:	2000      	movs	r0, #0
   1ee3c:	b003      	add	sp, #12
   1ee3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ee40 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1ee40:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ee44:	4770      	bx	lr

0001ee46 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1ee46:	2000      	movs	r0, #0
   1ee48:	4770      	bx	lr

0001ee4a <fixed_data_unref>:
}
   1ee4a:	4770      	bx	lr

0001ee4c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ee4c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ee4e:	6849      	ldr	r1, [r1, #4]
   1ee50:	6809      	ldr	r1, [r1, #0]
   1ee52:	f7f4 bc11 	b.w	13678 <net_buf_alloc_len>

0001ee56 <net_buf_simple_push_u8>:
{
   1ee56:	b510      	push	{r4, lr}
   1ee58:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1ee5a:	2101      	movs	r1, #1
   1ee5c:	f7f4 ff3a 	bl	13cd4 <net_buf_simple_push>
	*data = val;
   1ee60:	7004      	strb	r4, [r0, #0]
}
   1ee62:	bd10      	pop	{r4, pc}

0001ee64 <net_buf_simple_pull_le16>:
{
   1ee64:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1ee66:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ee68:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1ee6a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ee6c:	f7f4 ff52 	bl	13d14 <net_buf_simple_pull>
}
   1ee70:	4620      	mov	r0, r4
   1ee72:	bd10      	pop	{r4, pc}

0001ee74 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1ee74:	6802      	ldr	r2, [r0, #0]
   1ee76:	6880      	ldr	r0, [r0, #8]
}
   1ee78:	1a10      	subs	r0, r2, r0
   1ee7a:	4770      	bx	lr

0001ee7c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ee7c:	8883      	ldrh	r3, [r0, #4]
   1ee7e:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1ee80:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ee82:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1ee84:	6803      	ldr	r3, [r0, #0]
   1ee86:	1a5b      	subs	r3, r3, r1
}
   1ee88:	1ad0      	subs	r0, r2, r3
   1ee8a:	4770      	bx	lr

0001ee8c <net_buf_simple_add_mem>:
{
   1ee8c:	b538      	push	{r3, r4, r5, lr}
   1ee8e:	460d      	mov	r5, r1
   1ee90:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1ee92:	4611      	mov	r1, r2
   1ee94:	f7f4 ff7a 	bl	13d8c <net_buf_simple_add>
   1ee98:	4622      	mov	r2, r4
   1ee9a:	4629      	mov	r1, r5
}
   1ee9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1eea0:	f7fe be32 	b.w	1db08 <memcpy>

0001eea4 <net_buf_simple_add_u8>:
{
   1eea4:	b510      	push	{r4, lr}
   1eea6:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1eea8:	2101      	movs	r1, #1
   1eeaa:	f7f4 ff6f 	bl	13d8c <net_buf_simple_add>
	*u8 = val;
   1eeae:	7004      	strb	r4, [r0, #0]
}
   1eeb0:	bd10      	pop	{r4, pc}

0001eeb2 <set_on_state>:
	__asm__ volatile(
   1eeb2:	f04f 0320 	mov.w	r3, #32
   1eeb6:	f3ef 8211 	mrs	r2, BASEPRI
   1eeba:	f383 8812 	msr	BASEPRI_MAX, r3
   1eebe:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1eec2:	6803      	ldr	r3, [r0, #0]
   1eec4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1eec8:	f043 0302 	orr.w	r3, r3, #2
   1eecc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1eece:	f382 8811 	msr	BASEPRI, r2
   1eed2:	f3bf 8f6f 	isb	sy
}
   1eed6:	4770      	bx	lr

0001eed8 <async_start>:
{
   1eed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eeda:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1eedc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1eede:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1eee0:	f04f 0520 	mov.w	r5, #32
   1eee4:	f3ef 8611 	mrs	r6, BASEPRI
   1eee8:	f385 8812 	msr	BASEPRI_MAX, r5
   1eeec:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1eef0:	250c      	movs	r5, #12
   1eef2:	4369      	muls	r1, r5
   1eef4:	440c      	add	r4, r1
   1eef6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1eefa:	f005 0c07 	and.w	ip, r5, #7
   1eefe:	f1bc 0f01 	cmp.w	ip, #1
   1ef02:	d10c      	bne.n	1ef1e <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1ef04:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   1ef08:	f386 8811 	msr	BASEPRI, r6
   1ef0c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1ef10:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1ef14:	6843      	ldr	r3, [r0, #4]
   1ef16:	585b      	ldr	r3, [r3, r1]
   1ef18:	4798      	blx	r3
	return 0;
   1ef1a:	2000      	movs	r0, #0
}
   1ef1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1ef1e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1ef22:	42af      	cmp	r7, r5
   1ef24:	f386 8811 	msr	BASEPRI, r6
   1ef28:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1ef2c:	bf0c      	ite	eq
   1ef2e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1ef32:	f04f 30ff 	movne.w	r0, #4294967295
   1ef36:	e7f1      	b.n	1ef1c <async_start+0x44>

0001ef38 <api_start>:
{
   1ef38:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1ef3a:	2480      	movs	r4, #128	; 0x80
   1ef3c:	9400      	str	r4, [sp, #0]
   1ef3e:	f7ff ffcb 	bl	1eed8 <async_start>
}
   1ef42:	b002      	add	sp, #8
   1ef44:	bd10      	pop	{r4, pc}

0001ef46 <onoff_started_callback>:
	return &data->mgr[type];
   1ef46:	6900      	ldr	r0, [r0, #16]
   1ef48:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1ef4a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1ef4e:	2100      	movs	r1, #0
   1ef50:	4710      	bx	r2

0001ef52 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1ef52:	2003      	movs	r0, #3
   1ef54:	f7f7 bb8a 	b.w	1666c <nrfx_clock_start>

0001ef58 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1ef58:	2002      	movs	r0, #2
   1ef5a:	f7f7 bb87 	b.w	1666c <nrfx_clock_start>

0001ef5e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1ef5e:	2000      	movs	r0, #0
   1ef60:	f7f7 bb84 	b.w	1666c <nrfx_clock_start>

0001ef64 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1ef64:	2003      	movs	r0, #3
   1ef66:	f7f7 bbff 	b.w	16768 <nrfx_clock_stop>

0001ef6a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1ef6a:	2002      	movs	r0, #2
   1ef6c:	f7f7 bbfc 	b.w	16768 <nrfx_clock_stop>

0001ef70 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ef70:	2000      	movs	r0, #0
   1ef72:	f7f7 bbf9 	b.w	16768 <nrfx_clock_stop>

0001ef76 <blocking_start_callback>:
{
   1ef76:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1ef78:	f7fa bae6 	b.w	19548 <z_impl_k_sem_give>

0001ef7c <api_stop>:
	return stop(dev, subsys, CTX_API);
   1ef7c:	2280      	movs	r2, #128	; 0x80
   1ef7e:	f7f4 bf6d 	b.w	13e5c <stop>

0001ef82 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ef82:	6843      	ldr	r3, [r0, #4]
}
   1ef84:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ef86:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1ef88:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1ef8a:	600b      	str	r3, [r1, #0]
}
   1ef8c:	4770      	bx	lr

0001ef8e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ef8e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   1ef90:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ef94:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1ef96:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1ef9a:	6098      	str	r0, [r3, #8]
}
   1ef9c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1ef9e:	60d9      	str	r1, [r3, #12]
   1efa0:	4770      	bx	lr

0001efa2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efa2:	6843      	ldr	r3, [r0, #4]
}
   1efa4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efa6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1efa8:	6099      	str	r1, [r3, #8]
}
   1efaa:	4770      	bx	lr

0001efac <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efac:	6843      	ldr	r3, [r0, #4]
}
   1efae:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efb0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1efb2:	60d9      	str	r1, [r3, #12]
}
   1efb4:	4770      	bx	lr

0001efb6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efb6:	6843      	ldr	r3, [r0, #4]
   1efb8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1efba:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1efbc:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1efc0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1efc2:	6090      	str	r0, [r2, #8]
}
   1efc4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1efc6:	60d3      	str	r3, [r2, #12]
   1efc8:	4770      	bx	lr

0001efca <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   1efca:	2200      	movs	r2, #0
   1efcc:	2101      	movs	r1, #1
   1efce:	200a      	movs	r0, #10
   1efd0:	f7ed bf16 	b.w	ce00 <z_arm_irq_priority_set>

0001efd4 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   1efd4:	b510      	push	{r4, lr}
	while (*count) {
   1efd6:	680b      	ldr	r3, [r1, #0]
   1efd8:	b913      	cbnz	r3, 1efe0 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   1efda:	4618      	mov	r0, r3
	*buf_len = 0;
   1efdc:	6013      	str	r3, [r2, #0]
	return NULL;
   1efde:	e005      	b.n	1efec <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   1efe0:	6803      	ldr	r3, [r0, #0]
   1efe2:	685c      	ldr	r4, [r3, #4]
   1efe4:	b11c      	cbz	r4, 1efee <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   1efe6:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   1efe8:	6803      	ldr	r3, [r0, #0]
   1efea:	6818      	ldr	r0, [r3, #0]
}
   1efec:	bd10      	pop	{r4, pc}
		++(*current);
   1efee:	3308      	adds	r3, #8
   1eff0:	6003      	str	r3, [r0, #0]
		--(*count);
   1eff2:	680b      	ldr	r3, [r1, #0]
   1eff4:	3b01      	subs	r3, #1
   1eff6:	600b      	str	r3, [r1, #0]
   1eff8:	e7ed      	b.n	1efd6 <spi_context_get_next_buf.constprop.0+0x2>

0001effa <z_log_msg_static_create.constprop.0>:
   1effa:	2300      	movs	r3, #0
   1effc:	f7ec bc84 	b.w	b908 <z_impl_z_log_msg_static_create>

0001f000 <_spi_context_cs_control>:
{
   1f000:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1f002:	6803      	ldr	r3, [r0, #0]
{
   1f004:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1f006:	b1e3      	cbz	r3, 1f042 <_spi_context_cs_control+0x42>
   1f008:	6898      	ldr	r0, [r3, #8]
   1f00a:	b1d0      	cbz	r0, 1f042 <_spi_context_cs_control+0x42>
   1f00c:	6805      	ldr	r5, [r0, #0]
   1f00e:	b1c5      	cbz	r5, 1f042 <_spi_context_cs_control+0x42>
		if (on) {
   1f010:	b149      	cbz	r1, 1f026 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   1f012:	2101      	movs	r1, #1
   1f014:	f7f5 fc7e 	bl	14914 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   1f018:	6823      	ldr	r3, [r4, #0]
   1f01a:	689b      	ldr	r3, [r3, #8]
   1f01c:	6898      	ldr	r0, [r3, #8]
}
   1f01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1f022:	f001 b8ae 	b.w	20182 <z_impl_k_busy_wait>
			if (!force_off &&
   1f026:	b912      	cbnz	r2, 1f02e <_spi_context_cs_control+0x2e>
   1f028:	889b      	ldrh	r3, [r3, #4]
   1f02a:	04db      	lsls	r3, r3, #19
   1f02c:	d409      	bmi.n	1f042 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   1f02e:	6880      	ldr	r0, [r0, #8]
   1f030:	f001 f8a7 	bl	20182 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1f034:	6823      	ldr	r3, [r4, #0]
   1f036:	2100      	movs	r1, #0
   1f038:	6898      	ldr	r0, [r3, #8]
}
   1f03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1f03e:	f7f5 bc69 	b.w	14914 <gpio_pin_set_dt.isra.0>
}
   1f042:	bd38      	pop	{r3, r4, r5, pc}

0001f044 <spi_context_unlock_unconditionally>:
{
   1f044:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1f046:	2201      	movs	r2, #1
   1f048:	2100      	movs	r1, #0
{
   1f04a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1f04c:	f7ff ffd8 	bl	1f000 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   1f050:	69a3      	ldr	r3, [r4, #24]
   1f052:	b933      	cbnz	r3, 1f062 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1f054:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1f056:	f104 0010 	add.w	r0, r4, #16
}
   1f05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f05e:	f7fa ba73 	b.w	19548 <z_impl_k_sem_give>
   1f062:	bd10      	pop	{r4, pc}

0001f064 <spi_nrfx_release>:
{
   1f064:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1f066:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1f068:	6803      	ldr	r3, [r0, #0]
   1f06a:	428b      	cmp	r3, r1
   1f06c:	d106      	bne.n	1f07c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   1f06e:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
   1f072:	b934      	cbnz	r4, 1f082 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   1f074:	f7ff ffe6 	bl	1f044 <spi_context_unlock_unconditionally>
	return 0;
   1f078:	4620      	mov	r0, r4
}
   1f07a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1f07c:	f06f 0015 	mvn.w	r0, #21
   1f080:	e7fb      	b.n	1f07a <spi_nrfx_release+0x16>
		return -EBUSY;
   1f082:	f06f 000f 	mvn.w	r0, #15
   1f086:	e7f8      	b.n	1f07a <spi_nrfx_release+0x16>

0001f088 <spi_nrfx_transceive_async>:
{
   1f088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, cb, userdata);
   1f08a:	9c07      	ldr	r4, [sp, #28]
   1f08c:	9402      	str	r4, [sp, #8]
   1f08e:	9c06      	ldr	r4, [sp, #24]
   1f090:	9401      	str	r4, [sp, #4]
   1f092:	2401      	movs	r4, #1
   1f094:	9400      	str	r4, [sp, #0]
   1f096:	f7f5 fd85 	bl	14ba4 <transceive>
}
   1f09a:	b004      	add	sp, #16
   1f09c:	bd10      	pop	{r4, pc}

0001f09e <spi_nrfx_transceive>:
{
   1f09e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   1f0a0:	2400      	movs	r4, #0
   1f0a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f0a6:	9400      	str	r4, [sp, #0]
   1f0a8:	f7f5 fd7c 	bl	14ba4 <transceive>
}
   1f0ac:	b004      	add	sp, #16
   1f0ae:	bd10      	pop	{r4, pc}

0001f0b0 <uarte_nrfx_config_get>:
{
   1f0b0:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   1f0b2:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1f0b4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f0b8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f0bc:	2000      	movs	r0, #0
   1f0be:	4770      	bx	lr

0001f0c0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f0c0:	6843      	ldr	r3, [r0, #4]
   1f0c2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f0c4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f0c8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f0cc:	4770      	bx	lr

0001f0ce <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f0ce:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1f0d0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1f0d2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f0d4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f0d8:	b150      	cbz	r0, 1f0f0 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f0da:	2000      	movs	r0, #0
	*c = *data->rx_data;
   1f0dc:	6952      	ldr	r2, [r2, #20]
   1f0de:	7812      	ldrb	r2, [r2, #0]
   1f0e0:	700a      	strb	r2, [r1, #0]
   1f0e2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f0e6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f0ea:	2201      	movs	r2, #1
   1f0ec:	601a      	str	r2, [r3, #0]
	return 0;
   1f0ee:	4770      	bx	lr
		return -1;
   1f0f0:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f0f4:	4770      	bx	lr

0001f0f6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1f0f6:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1f0f8:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f0fa:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f0fe:	b940      	cbnz	r0, 1f112 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1f100:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f102:	079b      	lsls	r3, r3, #30
   1f104:	d406      	bmi.n	1f114 <is_tx_ready.isra.0+0x1e>
   1f106:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1f10a:	3800      	subs	r0, #0
   1f10c:	bf18      	it	ne
   1f10e:	2001      	movne	r0, #1
   1f110:	4770      	bx	lr
   1f112:	2001      	movs	r0, #1
}
   1f114:	4770      	bx	lr

0001f116 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1f116:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1f118:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1f11a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1f11e:	05c9      	lsls	r1, r1, #23
   1f120:	d518      	bpl.n	1f154 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f122:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1f126:	b1a9      	cbz	r1, 1f154 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1f128:	f04f 0020 	mov.w	r0, #32
   1f12c:	f3ef 8111 	mrs	r1, BASEPRI
   1f130:	f380 8812 	msr	BASEPRI_MAX, r0
   1f134:	f3bf 8f6f 	isb	sy
   1f138:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f13c:	b130      	cbz	r0, 1f14c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f13e:	2000      	movs	r0, #0
   1f140:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1f144:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f148:	2001      	movs	r0, #1
   1f14a:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1f14c:	f381 8811 	msr	BASEPRI, r1
   1f150:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f154:	6852      	ldr	r2, [r2, #4]
   1f156:	06d2      	lsls	r2, r2, #27
   1f158:	d515      	bpl.n	1f186 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1f15a:	f04f 0120 	mov.w	r1, #32
   1f15e:	f3ef 8211 	mrs	r2, BASEPRI
   1f162:	f381 8812 	msr	BASEPRI_MAX, r1
   1f166:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f16a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1f16e:	b111      	cbz	r1, 1f176 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1f170:	2100      	movs	r1, #0
   1f172:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1f176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1f17a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1f17e:	f382 8811 	msr	BASEPRI, r2
   1f182:	f3bf 8f6f 	isb	sy
}
   1f186:	4770      	bx	lr

0001f188 <z_log_msg_static_create.constprop.0>:
   1f188:	2300      	movs	r3, #0
   1f18a:	f7ec bbbd 	b.w	b908 <z_impl_z_log_msg_static_create>

0001f18e <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1f18e:	2000      	movs	r0, #0
   1f190:	4770      	bx	lr

0001f192 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1f192:	b538      	push	{r3, r4, r5, lr}
   1f194:	460c      	mov	r4, r1
   1f196:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1f198:	f7f0 fabe 	bl	f718 <bt_is_ready>
   1f19c:	b128      	cbz	r0, 1f1aa <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1f19e:	4629      	mov	r1, r5
   1f1a0:	4620      	mov	r0, r4
}
   1f1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1f1a6:	f7ef bb7d 	b.w	e8a4 <bt_hci_le_rand>
}
   1f1aa:	f06f 000a 	mvn.w	r0, #10
   1f1ae:	bd38      	pop	{r3, r4, r5, pc}

0001f1b0 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1f1b0:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   1f1b2:	f000 f91d 	bl	1f3f0 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   1f1b6:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   1f1b8:	bf18      	it	ne
   1f1ba:	f06f 0015 	mvnne.w	r0, #21
   1f1be:	bd08      	pop	{r3, pc}

0001f1c0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1f1c0:	4770      	bx	lr

0001f1c2 <sys_clock_cycle_get_32>:
{
   1f1c2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1f1c4:	f7f6 fb6e 	bl	158a4 <z_nrf_rtc_timer_read>
}
   1f1c8:	bd08      	pop	{r3, pc}

0001f1ca <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1f1ca:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1f1cc:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   1f1d0:	6843      	ldr	r3, [r0, #4]
   1f1d2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1f1d4:	7a05      	ldrb	r5, [r0, #8]
   1f1d6:	6844      	ldr	r4, [r0, #4]
   1f1d8:	4435      	add	r5, r6
   1f1da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1f1de:	42a3      	cmp	r3, r4
   1f1e0:	d902      	bls.n	1f1e8 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   1f1e2:	f06f 0001 	mvn.w	r0, #1
}
   1f1e6:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   1f1e8:	795c      	ldrb	r4, [r3, #5]
   1f1ea:	428c      	cmp	r4, r1
   1f1ec:	d001      	beq.n	1f1f2 <pinctrl_lookup_state+0x28>
		(*state)++;
   1f1ee:	3308      	adds	r3, #8
   1f1f0:	e7ef      	b.n	1f1d2 <pinctrl_lookup_state+0x8>
			return 0;
   1f1f2:	2000      	movs	r0, #0
   1f1f4:	e7f7      	b.n	1f1e6 <pinctrl_lookup_state+0x1c>

0001f1f6 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1f1f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1fa:	4615      	mov	r5, r2
   1f1fc:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f1fe:	f04f 0901 	mov.w	r9, #1
   1f202:	b085      	sub	sp, #20
   1f204:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1f208:	45d0      	cmp	r8, sl
   1f20a:	d103      	bne.n	1f214 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1f20c:	2000      	movs	r0, #0
}
   1f20e:	b005      	add	sp, #20
   1f210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1f214:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1f218:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1f21c:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   1f220:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1f222:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   1f226:	bf08      	it	eq
   1f228:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1f22c:	2b22      	cmp	r3, #34	; 0x22
   1f22e:	f200 8091 	bhi.w	1f354 <pinctrl_configure_pins+0x15e>
   1f232:	e8df f003 	tbb	[pc, r3]
   1f236:	1e12      	.short	0x1e12
   1f238:	34263823 	.word	0x34263823
   1f23c:	8f8f8f38 	.word	0x8f8f8f38
   1f240:	8f653b8f 	.word	0x8f653b8f
   1f244:	8f8f8f8f 	.word	0x8f8f8f8f
   1f248:	8f8f8f8f 	.word	0x8f8f8f8f
   1f24c:	77747168 	.word	0x77747168
   1f250:	7a8f8f8f 	.word	0x7a8f8f8f
   1f254:	89868380 	.word	0x89868380
   1f258:	8c          	.byte	0x8c
   1f259:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1f25a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f25e:	a803      	add	r0, sp, #12
   1f260:	9403      	str	r4, [sp, #12]
   1f262:	f7f6 fd4b 	bl	15cfc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f266:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   1f268:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f26a:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   1f26e:	6083      	str	r3, [r0, #8]
   1f270:	e002      	b.n	1f278 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   1f272:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f276:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   1f278:	46b3      	mov	fp, r6
   1f27a:	e01e      	b.n	1f2ba <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1f27c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   1f280:	e7ed      	b.n	1f25e <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f282:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1f284:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f288:	a803      	add	r0, sp, #12
   1f28a:	9403      	str	r4, [sp, #12]
   1f28c:	f7f6 fd36 	bl	15cfc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f290:	9b03      	ldr	r3, [sp, #12]
   1f292:	f04f 0b01 	mov.w	fp, #1
   1f296:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   1f29a:	60c3      	str	r3, [r0, #12]
   1f29c:	e00d      	b.n	1f2ba <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1f29e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1f2a2:	2601      	movs	r6, #1
   1f2a4:	e7f0      	b.n	1f288 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1f2a6:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   1f2aa:	e7e4      	b.n	1f276 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1f2ac:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1f2b0:	2f00      	cmp	r7, #0
   1f2b2:	d1e0      	bne.n	1f276 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f2b4:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   1f2b6:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f2b8:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1f2ba:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f2be:	a803      	add	r0, sp, #12
   1f2c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f2c4:	2a00      	cmp	r2, #0
   1f2c6:	bf1c      	itt	ne
   1f2c8:	2601      	movne	r6, #1
   1f2ca:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1f2ce:	9301      	str	r3, [sp, #4]
   1f2d0:	9403      	str	r4, [sp, #12]
   1f2d2:	f7f6 fd13 	bl	15cfc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f2d6:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f2d8:	9b01      	ldr	r3, [sp, #4]
   1f2da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f2de:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f2e2:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1f2e6:	023b      	lsls	r3, r7, #8
   1f2e8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   1f2ec:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f2f0:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   1f2f4:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f2f6:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1f2fa:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1f2fe:	e783      	b.n	1f208 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1f300:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1f304:	e7d4      	b.n	1f2b0 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1f306:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1f30a:	f8da 3000 	ldr.w	r3, [sl]
   1f30e:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   1f312:	2b00      	cmp	r3, #0
   1f314:	d0c5      	beq.n	1f2a2 <pinctrl_configure_pins+0xac>
   1f316:	e7a2      	b.n	1f25e <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1f318:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1f31c:	e7f5      	b.n	1f30a <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1f31e:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1f322:	e7f2      	b.n	1f30a <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1f324:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   1f328:	e7ef      	b.n	1f30a <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1f32a:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f32e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f330:	f04f 0b00 	mov.w	fp, #0
   1f334:	e7c1      	b.n	1f2ba <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1f336:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   1f33a:	e790      	b.n	1f25e <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1f33c:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   1f340:	e7f5      	b.n	1f32e <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1f342:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   1f346:	e7f2      	b.n	1f32e <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1f348:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   1f34c:	e7ef      	b.n	1f32e <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1f34e:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   1f352:	e7ec      	b.n	1f32e <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   1f354:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f358:	e759      	b.n	1f20e <pinctrl_configure_pins+0x18>

0001f35a <mbox_nrf_register_callback>:
{
   1f35a:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1f35c:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1f35e:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   1f360:	bf9f      	itttt	ls
   1f362:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   1f366:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1f36a:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1f36c:	2000      	movls	r0, #0
		return -EINVAL;
   1f36e:	bf88      	it	hi
   1f370:	f06f 0015 	mvnhi.w	r0, #21
}
   1f374:	bd10      	pop	{r4, pc}

0001f376 <mbox_nrf_mtu_get>:
}
   1f376:	2000      	movs	r0, #0
   1f378:	4770      	bx	lr

0001f37a <mbox_nrf_max_channels_get>:
}
   1f37a:	2010      	movs	r0, #16
   1f37c:	4770      	bx	lr

0001f37e <z_log_msg_static_create.constprop.0>:
   1f37e:	2300      	movs	r3, #0
   1f380:	f7ec bac2 	b.w	b908 <z_impl_z_log_msg_static_create>

0001f384 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1f384:	2101      	movs	r1, #1
   1f386:	f7f6 bf35 	b.w	161f4 <dk_set_led>

0001f38a <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1f38a:	2100      	movs	r1, #0
   1f38c:	f7f6 bf32 	b.w	161f4 <dk_set_led>

0001f390 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1f390:	2000      	movs	r0, #0
   1f392:	4770      	bx	lr

0001f394 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   1f394:	2300      	movs	r3, #0
{
   1f396:	b570      	push	{r4, r5, r6, lr}
   1f398:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   1f39a:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   1f39e:	ab03      	add	r3, sp, #12
   1f3a0:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   1f3a2:	2304      	movs	r3, #4
{
   1f3a4:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   1f3a6:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   1f3a8:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   1f3aa:	b169      	cbz	r1, 1f3c8 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   1f3ac:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   1f3ae:	680b      	ldr	r3, [r1, #0]
   1f3b0:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   1f3b2:	684b      	ldr	r3, [r1, #4]
   1f3b4:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   1f3b6:	2101      	movs	r1, #1
   1f3b8:	2041      	movs	r0, #65	; 0x41
   1f3ba:	f7f6 ffd3 	bl	16364 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   1f3be:	1e05      	subs	r5, r0, #0
   1f3c0:	dc04      	bgt.n	1f3cc <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   1f3c2:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   1f3c4:	b008      	add	sp, #32
   1f3c6:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   1f3c8:	2601      	movs	r6, #1
   1f3ca:	e7f4      	b.n	1f3b6 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   1f3cc:	1e23      	subs	r3, r4, #0
   1f3ce:	bf18      	it	ne
   1f3d0:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   1f3d2:	2100      	movs	r1, #0
   1f3d4:	e9cd 4300 	strd	r4, r3, [sp]
   1f3d8:	aa04      	add	r2, sp, #16
   1f3da:	4633      	mov	r3, r6
   1f3dc:	f7f6 ffa6 	bl	1632c <psa_call>
   1f3e0:	4604      	mov	r4, r0
    psa_close(handle);
   1f3e2:	4628      	mov	r0, r5
   1f3e4:	f7f6 ffcc 	bl	16380 <psa_close>
    if (status < PSA_SUCCESS) {
   1f3e8:	2c00      	cmp	r4, #0
   1f3ea:	dbea      	blt.n	1f3c2 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   1f3ec:	4620      	mov	r0, r4
   1f3ee:	e7e9      	b.n	1f3c4 <tfm_platform_ioctl+0x30>

0001f3f0 <psa_crypto_init>:
}
   1f3f0:	2000      	movs	r0, #0
   1f3f2:	4770      	bx	lr

0001f3f4 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   1f3f4:	2300      	movs	r3, #0
{
   1f3f6:	b510      	push	{r4, lr}
   1f3f8:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   1f3fa:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   1f3fe:	ab05      	add	r3, sp, #20
   1f400:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   1f402:	230c      	movs	r3, #12
   1f404:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   1f406:	2304      	movs	r3, #4
{
   1f408:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   1f40a:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1f40c:	aa03      	add	r2, sp, #12
   1f40e:	eb0d 0103 	add.w	r1, sp, r3
   1f412:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   1f414:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   1f416:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1f41a:	f7ff ffbb 	bl	1f394 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   1f41e:	9b00      	ldr	r3, [sp, #0]
   1f420:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   1f422:	b008      	add	sp, #32
   1f424:	bd10      	pop	{r4, pc}

0001f426 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1f426:	f7f6 bfb9 	b.w	1639c <SystemCoreClockUpdate>

0001f42a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1f42a:	4700      	bx	r0

0001f42c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1f42c:	f000 bea9 	b.w	20182 <z_impl_k_busy_wait>

0001f430 <nrf_gpio_pin_present_check>:
    switch (port)
   1f430:	0943      	lsrs	r3, r0, #5
   1f432:	d00b      	beq.n	1f44c <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   1f434:	2b01      	cmp	r3, #1
   1f436:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f43a:	bf18      	it	ne
   1f43c:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1f43e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f442:	fa23 f000 	lsr.w	r0, r3, r0
}
   1f446:	f000 0001 	and.w	r0, r0, #1
   1f44a:	4770      	bx	lr
    switch (port)
   1f44c:	f04f 33ff 	mov.w	r3, #4294967295
   1f450:	e7f5      	b.n	1f43e <nrf_gpio_pin_present_check+0xe>

0001f452 <pin_is_task_output>:
{
   1f452:	b508      	push	{r3, lr}
   1f454:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1f456:	f7f7 fa23 	bl	168a0 <pin_is_output>
   1f45a:	b110      	cbz	r0, 1f462 <pin_is_task_output+0x10>
   1f45c:	4610      	mov	r0, r2
   1f45e:	f7f7 fa09 	bl	16874 <pin_in_use_by_te>
}
   1f462:	f000 0001 	and.w	r0, r0, #1
   1f466:	bd08      	pop	{r3, pc}

0001f468 <nrf_gpio_reconfigure>:
{
   1f468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f46c:	4617      	mov	r7, r2
   1f46e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   1f472:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f474:	a801      	add	r0, sp, #4
{
   1f476:	460c      	mov	r4, r1
   1f478:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f47a:	f7f7 fa95 	bl	169a8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f47e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1f480:	1e39      	subs	r1, r7, #0
   1f482:	bf18      	it	ne
   1f484:	2101      	movne	r1, #1
   1f486:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1f48a:	1e23      	subs	r3, r4, #0
   1f48c:	bf18      	it	ne
   1f48e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1f490:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1f492:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1f496:	bf14      	ite	ne
   1f498:	210c      	movne	r1, #12
   1f49a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1f49c:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1f49e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1f4a2:	bf14      	ite	ne
   1f4a4:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   1f4a8:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1f4aa:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1f4ae:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1f4b2:	bf14      	ite	ne
   1f4b4:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   1f4b8:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f4ba:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1f4be:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   1f4c0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1f4c4:	b104      	cbz	r4, 1f4c8 <nrf_gpio_reconfigure+0x60>
   1f4c6:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1f4c8:	b10f      	cbz	r7, 1f4ce <nrf_gpio_reconfigure+0x66>
   1f4ca:	783f      	ldrb	r7, [r7, #0]
   1f4cc:	007f      	lsls	r7, r7, #1
   1f4ce:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1f4d0:	b10e      	cbz	r6, 1f4d6 <nrf_gpio_reconfigure+0x6e>
   1f4d2:	7836      	ldrb	r6, [r6, #0]
   1f4d4:	00b6      	lsls	r6, r6, #2
   1f4d6:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1f4d8:	b18d      	cbz	r5, 1f4fe <nrf_gpio_reconfigure+0x96>
   1f4da:	7829      	ldrb	r1, [r5, #0]
   1f4dc:	0209      	lsls	r1, r1, #8
   1f4de:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1f4e0:	f1b8 0f00 	cmp.w	r8, #0
   1f4e4:	d003      	beq.n	1f4ee <nrf_gpio_reconfigure+0x86>
   1f4e6:	f898 8000 	ldrb.w	r8, [r8]
   1f4ea:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1f4ee:	4321      	orrs	r1, r4
   1f4f0:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   1f4f4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1f4f8:	b002      	add	sp, #8
   1f4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1f4fe:	4629      	mov	r1, r5
   1f500:	e7ed      	b.n	1f4de <nrf_gpio_reconfigure+0x76>

0001f502 <nrf_gpio_cfg_sense_set>:
{
   1f502:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1f504:	f10d 030f 	add.w	r3, sp, #15
   1f508:	9301      	str	r3, [sp, #4]
   1f50a:	2300      	movs	r3, #0
{
   1f50c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1f510:	461a      	mov	r2, r3
   1f512:	4619      	mov	r1, r3
   1f514:	9300      	str	r3, [sp, #0]
   1f516:	f7ff ffa7 	bl	1f468 <nrf_gpio_reconfigure>
}
   1f51a:	b005      	add	sp, #20
   1f51c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f520 <start_playback>:
{
   1f520:	b510      	push	{r4, lr}
   1f522:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1f524:	2002      	movs	r0, #2
    p_cb->flags = flags;
   1f526:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1f528:	7208      	strb	r0, [r1, #8]
    if (p_cb->handler)
   1f52a:	6809      	ldr	r1, [r1, #0]
   1f52c:	b179      	cbz	r1, 1f54e <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   1f52e:	f012 0f04 	tst.w	r2, #4
   1f532:	bf0c      	ite	eq
   1f534:	2182      	moveq	r1, #130	; 0x82
   1f536:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1f538:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1f53a:	bf48      	it	mi
   1f53c:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1f540:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   1f542:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   1f544:	bf48      	it	mi
   1f546:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1f54a:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f54e:	2000      	movs	r0, #0
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1f550:	6821      	ldr	r1, [r4, #0]
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1f552:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f556:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   1f55a:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f55e:	bf08      	it	eq
   1f560:	2101      	moveq	r1, #1
   1f562:	6822      	ldr	r2, [r4, #0]
   1f564:	bf0c      	ite	eq
   1f566:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   1f568:	18d0      	addne	r0, r2, r3
}
   1f56a:	bd10      	pop	{r4, pc}

0001f56c <nrf_gpio_pin_clear>:
{
   1f56c:	b507      	push	{r0, r1, r2, lr}
   1f56e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f570:	a801      	add	r0, sp, #4
   1f572:	f7f8 f871 	bl	17658 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f576:	2301      	movs	r3, #1
   1f578:	9a01      	ldr	r2, [sp, #4]
   1f57a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1f57c:	60c3      	str	r3, [r0, #12]
}
   1f57e:	b003      	add	sp, #12
   1f580:	f85d fb04 	ldr.w	pc, [sp], #4

0001f584 <nrf_gpio_pin_set>:
{
   1f584:	b507      	push	{r0, r1, r2, lr}
   1f586:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f588:	a801      	add	r0, sp, #4
   1f58a:	f7f8 f865 	bl	17658 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f58e:	2301      	movs	r3, #1
   1f590:	9a01      	ldr	r2, [sp, #4]
   1f592:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1f594:	6083      	str	r3, [r0, #8]
}
   1f596:	b003      	add	sp, #12
   1f598:	f85d fb04 	ldr.w	pc, [sp], #4

0001f59c <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   1f59c:	7f83      	ldrb	r3, [r0, #30]
   1f59e:	075a      	lsls	r2, r3, #29
   1f5a0:	d40b      	bmi.n	1f5ba <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f5a2:	7fc0      	ldrb	r0, [r0, #31]
   1f5a4:	28ff      	cmp	r0, #255	; 0xff
   1f5a6:	d008      	beq.n	1f5ba <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   1f5a8:	079b      	lsls	r3, r3, #30
   1f5aa:	bf58      	it	pl
   1f5ac:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   1f5b0:	b909      	cbnz	r1, 1f5b6 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   1f5b2:	f7ff bfdb 	b.w	1f56c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   1f5b6:	f7ff bfe5 	b.w	1f584 <nrf_gpio_pin_set>
}
   1f5ba:	4770      	bx	lr

0001f5bc <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1f5bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f5c0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5c2:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1f5c4:	4698      	mov	r8, r3
   1f5c6:	460f      	mov	r7, r1
   1f5c8:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5ca:	f7f8 f845 	bl	17658 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f5ce:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1f5d0:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1f5d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f5d8:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f5da:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f5de:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   1f5e2:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f5e6:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f5ea:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f5ee:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   1f5f0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   1f5f4:	b002      	add	sp, #8
   1f5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f5fa <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1f5fa:	1c43      	adds	r3, r0, #1
{
   1f5fc:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1f5fe:	d005      	beq.n	1f60c <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   1f600:	2300      	movs	r3, #0
   1f602:	2201      	movs	r2, #1
   1f604:	4619      	mov	r1, r3
   1f606:	9300      	str	r3, [sp, #0]
   1f608:	f7ff ffd8 	bl	1f5bc <nrf_gpio_cfg.constprop.0>
}
   1f60c:	b003      	add	sp, #12
   1f60e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f612 <metal_device_open>:
{
   1f612:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f614:	460c      	mov	r4, r1
   1f616:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1f618:	4606      	mov	r6, r0
   1f61a:	b918      	cbnz	r0, 1f624 <metal_device_open+0x12>
		return -EINVAL;
   1f61c:	f06f 0015 	mvn.w	r0, #21
}
   1f620:	b002      	add	sp, #8
   1f622:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1f624:	f7fe fa31 	bl	1da8a <strlen>
   1f628:	2800      	cmp	r0, #0
   1f62a:	d0f7      	beq.n	1f61c <metal_device_open+0xa>
   1f62c:	2c00      	cmp	r4, #0
   1f62e:	d0f5      	beq.n	1f61c <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1f630:	4620      	mov	r0, r4
   1f632:	f7fe fa2a 	bl	1da8a <strlen>
   1f636:	2800      	cmp	r0, #0
   1f638:	d0f0      	beq.n	1f61c <metal_device_open+0xa>
   1f63a:	2d00      	cmp	r5, #0
   1f63c:	d0ee      	beq.n	1f61c <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1f63e:	4630      	mov	r0, r6
   1f640:	a901      	add	r1, sp, #4
   1f642:	f7f8 fb1f 	bl	17c84 <metal_bus_find>
	if (error)
   1f646:	2800      	cmp	r0, #0
   1f648:	d1ea      	bne.n	1f620 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1f64a:	9801      	ldr	r0, [sp, #4]
   1f64c:	6883      	ldr	r3, [r0, #8]
   1f64e:	b12b      	cbz	r3, 1f65c <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1f650:	462a      	mov	r2, r5
   1f652:	4621      	mov	r1, r4
}
   1f654:	b002      	add	sp, #8
   1f656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1f65a:	4718      	bx	r3
		return -ENODEV;
   1f65c:	f06f 0012 	mvn.w	r0, #18
   1f660:	e7de      	b.n	1f620 <metal_device_open+0xe>

0001f662 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   1f662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f666:	b089      	sub	sp, #36	; 0x24
   1f668:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1f66a:	4604      	mov	r4, r0
   1f66c:	4689      	mov	r9, r1
   1f66e:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   1f670:	2100      	movs	r1, #0
   1f672:	2220      	movs	r2, #32
   1f674:	4668      	mov	r0, sp
{
   1f676:	461f      	mov	r7, r3
   1f678:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   1f67a:	f7fe fa50 	bl	1db1e <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1f67e:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   1f680:	bf97      	itett	ls
   1f682:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   1f684:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   1f688:	40b3      	lslls	r3, r6
   1f68a:	f103 33ff 	addls.w	r3, r3, #4294967295
   1f68e:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   1f690:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   1f692:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   1f696:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   1f69a:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   1f69c:	3418      	adds	r4, #24
   1f69e:	b145      	cbz	r5, 1f6b2 <metal_io_init+0x50>
   1f6a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f6a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f6a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1f6a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   1f6ac:	b009      	add	sp, #36	; 0x24
   1f6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   1f6b2:	466d      	mov	r5, sp
   1f6b4:	e7f4      	b.n	1f6a0 <metal_io_init+0x3e>

0001f6b6 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1f6b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1f6b8:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1f6ba:	1c66      	adds	r6, r4, #1
   1f6bc:	d031      	beq.n	1f722 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1f6be:	6885      	ldr	r5, [r0, #8]
   1f6c0:	42a9      	cmp	r1, r5
   1f6c2:	d22e      	bcs.n	1f722 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1f6c4:	1864      	adds	r4, r4, r1
   1f6c6:	d02c      	beq.n	1f722 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   1f6c8:	185e      	adds	r6, r3, r1
   1f6ca:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1f6cc:	bf88      	it	hi
   1f6ce:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1f6d0:	6a05      	ldr	r5, [r0, #32]
   1f6d2:	b135      	cbz	r5, 1f6e2 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   1f6d4:	9300      	str	r3, [sp, #0]
   1f6d6:	2305      	movs	r3, #5
   1f6d8:	47a8      	blx	r5
   1f6da:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1f6dc:	4618      	mov	r0, r3
   1f6de:	b002      	add	sp, #8
   1f6e0:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   1f6e2:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1f6e6:	4619      	mov	r1, r3
   1f6e8:	1aa4      	subs	r4, r4, r2
   1f6ea:	1910      	adds	r0, r2, r4
   1f6ec:	b119      	cbz	r1, 1f6f6 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   1f6ee:	ea40 0502 	orr.w	r5, r0, r2
   1f6f2:	07ad      	lsls	r5, r5, #30
   1f6f4:	d10a      	bne.n	1f70c <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1f6f6:	2903      	cmp	r1, #3
   1f6f8:	dc0d      	bgt.n	1f716 <metal_io_block_read+0x60>
   1f6fa:	3801      	subs	r0, #1
   1f6fc:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   1f6fe:	428a      	cmp	r2, r1
   1f700:	d0ec      	beq.n	1f6dc <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   1f702:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   1f706:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1f70a:	e7f8      	b.n	1f6fe <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   1f70c:	7800      	ldrb	r0, [r0, #0]
			len--;
   1f70e:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   1f710:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   1f714:	e7e9      	b.n	1f6ea <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1f716:	f850 4b04 	ldr.w	r4, [r0], #4
   1f71a:	3904      	subs	r1, #4
   1f71c:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   1f720:	e7e9      	b.n	1f6f6 <metal_io_block_read+0x40>
		return -ERANGE;
   1f722:	f06f 0321 	mvn.w	r3, #33	; 0x21
   1f726:	e7d9      	b.n	1f6dc <metal_io_block_read+0x26>

0001f728 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1f728:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f72a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1f72c:	1c65      	adds	r5, r4, #1
   1f72e:	d032      	beq.n	1f796 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1f730:	6885      	ldr	r5, [r0, #8]
   1f732:	42a9      	cmp	r1, r5
   1f734:	d22f      	bcs.n	1f796 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   1f736:	1864      	adds	r4, r4, r1
   1f738:	d02d      	beq.n	1f796 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1f73a:	185e      	adds	r6, r3, r1
   1f73c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1f73e:	bf88      	it	hi
   1f740:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1f742:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1f744:	b1cd      	cbz	r5, 1f77a <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   1f746:	9300      	str	r3, [sp, #0]
   1f748:	2305      	movs	r3, #5
   1f74a:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1f74c:	b002      	add	sp, #8
   1f74e:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1f750:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   1f754:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1f756:	7005      	strb	r5, [r0, #0]
			len--;
   1f758:	4615      	mov	r5, r2
   1f75a:	18a0      	adds	r0, r4, r2
		while ( len && (
   1f75c:	b119      	cbz	r1, 1f766 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   1f75e:	ea40 0602 	orr.w	r6, r0, r2
   1f762:	07b6      	lsls	r6, r6, #30
   1f764:	d1f4      	bne.n	1f750 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1f766:	2903      	cmp	r1, #3
   1f768:	dc0a      	bgt.n	1f780 <metal_io_block_write+0x58>
   1f76a:	3d01      	subs	r5, #1
   1f76c:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   1f76e:	4288      	cmp	r0, r1
   1f770:	d10c      	bne.n	1f78c <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   1f772:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1f776:	4618      	mov	r0, r3
   1f778:	e7e8      	b.n	1f74c <metal_io_block_write+0x24>
   1f77a:	4619      	mov	r1, r3
   1f77c:	1aa4      	subs	r4, r4, r2
   1f77e:	e7eb      	b.n	1f758 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1f780:	f855 2b04 	ldr.w	r2, [r5], #4
   1f784:	3904      	subs	r1, #4
   1f786:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   1f78a:	e7ec      	b.n	1f766 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   1f78c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   1f790:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   1f794:	e7eb      	b.n	1f76e <metal_io_block_write+0x46>
		return -ERANGE;
   1f796:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f79a:	e7d7      	b.n	1f74c <metal_io_block_write+0x24>

0001f79c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1f79c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f79e:	6804      	ldr	r4, [r0, #0]
   1f7a0:	461d      	mov	r5, r3
		: NULL);
   1f7a2:	1c66      	adds	r6, r4, #1
   1f7a4:	d02b      	beq.n	1f7fe <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1f7a6:	6883      	ldr	r3, [r0, #8]
   1f7a8:	4299      	cmp	r1, r3
   1f7aa:	d228      	bcs.n	1f7fe <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   1f7ac:	1864      	adds	r4, r4, r1
   1f7ae:	d026      	beq.n	1f7fe <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   1f7b0:	186e      	adds	r6, r5, r1
   1f7b2:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1f7b4:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1f7b6:	bf88      	it	hi
   1f7b8:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1f7ba:	b12e      	cbz	r6, 1f7c8 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   1f7bc:	2305      	movs	r3, #5
   1f7be:	9500      	str	r5, [sp, #0]
   1f7c0:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   1f7c2:	4628      	mov	r0, r5
}
   1f7c4:	b002      	add	sp, #8
   1f7c6:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   1f7c8:	4621      	mov	r1, r4
   1f7ca:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1f7cc:	b94b      	cbnz	r3, 1f7e2 <metal_io_block_set+0x46>
   1f7ce:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   1f7d0:	4299      	cmp	r1, r3
   1f7d2:	d111      	bne.n	1f7f8 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   1f7d4:	f3bf 8f5b 	dmb	ish
   1f7d8:	e7f3      	b.n	1f7c2 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   1f7da:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1f7de:	3b01      	subs	r3, #1
   1f7e0:	e7f4      	b.n	1f7cc <metal_io_block_set+0x30>
   1f7e2:	0788      	lsls	r0, r1, #30
   1f7e4:	d1f9      	bne.n	1f7da <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1f7e6:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   1f7ea:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1f7ec:	2b03      	cmp	r3, #3
   1f7ee:	ddee      	ble.n	1f7ce <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   1f7f0:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1f7f4:	3b04      	subs	r3, #4
   1f7f6:	e7f9      	b.n	1f7ec <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   1f7f8:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   1f7fc:	e7e8      	b.n	1f7d0 <metal_io_block_set+0x34>
		return -ERANGE;
   1f7fe:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f802:	e7df      	b.n	1f7c4 <metal_io_block_set+0x28>

0001f804 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1f804:	2000      	movs	r0, #0
   1f806:	4770      	bx	lr

0001f808 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1f808:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   1f80a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1f80c:	4602      	mov	r2, r0
   1f80e:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1f810:	b984      	cbnz	r4, 1f834 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   1f812:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   1f814:	291f      	cmp	r1, #31
   1f816:	bf98      	it	ls
   1f818:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   1f81c:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1f81e:	b161      	cbz	r1, 1f83a <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   1f820:	6880      	ldr	r0, [r0, #8]
   1f822:	4283      	cmp	r3, r0
   1f824:	d209      	bcs.n	1f83a <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   1f826:	6910      	ldr	r0, [r2, #16]
   1f828:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   1f82a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1f82e:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1f830:	bc10      	pop	{r4}
   1f832:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1f834:	4623      	mov	r3, r4
}
   1f836:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   1f838:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1f83a:	f04f 30ff 	mov.w	r0, #4294967295
   1f83e:	e7f7      	b.n	1f830 <metal_io_phys+0x28>

0001f840 <virtqueue_create>:
{
   1f840:	b530      	push	{r4, r5, lr}
   1f842:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   1f844:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   1f848:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   1f84a:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   1f84c:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   1f84e:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   1f850:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   1f852:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1f854:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   1f856:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1f858:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1f85c:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   1f860:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1f864:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1f866:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1f868:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   1f86c:	1c6a      	adds	r2, r5, #1
   1f86e:	4413      	add	r3, r2
   1f870:	426d      	negs	r5, r5
   1f872:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1f874:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1f876:	6983      	ldr	r3, [r0, #24]
   1f878:	b953      	cbnz	r3, 1f890 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   1f87a:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   1f87c:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   1f87e:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   1f880:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   1f884:	db06      	blt.n	1f894 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1f886:	2300      	movs	r3, #0
   1f888:	7393      	strb	r3, [r2, #14]
   1f88a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1f88e:	73d3      	strb	r3, [r2, #15]
}
   1f890:	2000      	movs	r0, #0
   1f892:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   1f894:	3301      	adds	r3, #1
   1f896:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1f898:	e7f0      	b.n	1f87c <virtqueue_create+0x3c>

0001f89a <virtqueue_add_buffer>:
{
   1f89a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   1f89e:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   1f8a2:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1f8a4:	4655      	mov	r5, sl
   1f8a6:	2600      	movs	r6, #0
{
   1f8a8:	b085      	sub	sp, #20
	needed = readable + writable;
   1f8aa:	eb02 0803 	add.w	r8, r2, r3
{
   1f8ae:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1f8b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f8b2:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   1f8b6:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   1f8ba:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1f8bc:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   1f8c0:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1f8c4:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1f8c6:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   1f8c8:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1f8ca:	45b0      	cmp	r8, r6
   1f8cc:	dc1a      	bgt.n	1f904 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   1f8ce:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   1f8d0:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1f8d2:	eba3 030b 	sub.w	r3, r3, fp
   1f8d6:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by slave, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1f8d8:	69e3      	ldr	r3, [r4, #28]
   1f8da:	8961      	ldrh	r1, [r4, #10]
   1f8dc:	885a      	ldrh	r2, [r3, #2]
   1f8de:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1f8e0:	400a      	ands	r2, r1
   1f8e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1f8e6:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1f8ea:	f3bf 8f5b 	dmb	ish
}
   1f8ee:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   1f8f0:	69e2      	ldr	r2, [r4, #28]
   1f8f2:	8853      	ldrh	r3, [r2, #2]
   1f8f4:	3301      	adds	r3, #1
   1f8f6:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1f8f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1f8fa:	3301      	adds	r3, #1
   1f8fc:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1f8fe:	b005      	add	sp, #20
   1f900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1f904:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1f906:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1f908:	f857 1c04 	ldr.w	r1, [r7, #-4]
   1f90c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1f910:	9302      	str	r3, [sp, #8]
   1f912:	6803      	ldr	r3, [r0, #0]
   1f914:	9203      	str	r2, [sp, #12]
   1f916:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1f918:	6883      	ldr	r3, [r0, #8]
   1f91a:	3708      	adds	r7, #8
   1f91c:	4299      	cmp	r1, r3
   1f91e:	bf28      	it	cs
   1f920:	f04f 31ff 	movcs.w	r1, #4294967295
   1f924:	f7ff ff70 	bl	1f808 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1f928:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1f92c:	5098      	str	r0, [r3, r2]
   1f92e:	2200      	movs	r2, #0
   1f930:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   1f932:	f857 2c08 	ldr.w	r2, [r7, #-8]
   1f936:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1f938:	9a01      	ldr	r2, [sp, #4]
   1f93a:	4296      	cmp	r6, r2
   1f93c:	bfac      	ite	ge
   1f93e:	2200      	movge	r2, #0
   1f940:	2201      	movlt	r2, #1
		if (i >= readable)
   1f942:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   1f944:	bfd8      	it	le
   1f946:	f042 0202 	orrle.w	r2, r2, #2
   1f94a:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1f94c:	3601      	adds	r6, #1
   1f94e:	89ed      	ldrh	r5, [r5, #14]
   1f950:	e7bb      	b.n	1f8ca <virtqueue_add_buffer+0x30>

0001f952 <virtqueue_get_buffer>:
{
   1f952:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1f954:	b350      	cbz	r0, 1f9ac <virtqueue_get_buffer+0x5a>
   1f956:	6a05      	ldr	r5, [r0, #32]
   1f958:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   1f95a:	886b      	ldrh	r3, [r5, #2]
   1f95c:	42a3      	cmp	r3, r4
   1f95e:	d030      	beq.n	1f9c2 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1f960:	1c63      	adds	r3, r4, #1
   1f962:	85c3      	strh	r3, [r0, #46]	; 0x2e
   1f964:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1f966:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1f96a:	3b01      	subs	r3, #1
   1f96c:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1f96e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1f972:	686b      	ldr	r3, [r5, #4]
   1f974:	b29e      	uxth	r6, r3
	if (len)
   1f976:	b109      	cbz	r1, 1f97c <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1f978:	68ad      	ldr	r5, [r5, #8]
   1f97a:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1f97c:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1f980:	b29b      	uxth	r3, r3
   1f982:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1f986:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1f98a:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1f98c:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1f98e:	442f      	add	r7, r5
	dxp->ndescs--;
   1f990:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1f992:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1f994:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1f996:	898d      	ldrh	r5, [r1, #12]
   1f998:	076f      	lsls	r7, r5, #29
   1f99a:	d50e      	bpl.n	1f9ba <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1f99c:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1f99e:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1f9a0:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1f9a2:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1f9a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1f9a6:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1f9a8:	b102      	cbz	r2, 1f9ac <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1f9aa:	8014      	strh	r4, [r2, #0]
}
   1f9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1f9ae:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1f9b0:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1f9b2:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1f9b4:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1f9b8:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1f9ba:	898d      	ldrh	r5, [r1, #12]
   1f9bc:	07ed      	lsls	r5, r5, #31
   1f9be:	d4f6      	bmi.n	1f9ae <virtqueue_get_buffer+0x5c>
   1f9c0:	e7ec      	b.n	1f99c <virtqueue_get_buffer+0x4a>
		return NULL;
   1f9c2:	2000      	movs	r0, #0
   1f9c4:	e7f2      	b.n	1f9ac <virtqueue_get_buffer+0x5a>

0001f9c6 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1f9c6:	6983      	ldr	r3, [r0, #24]
   1f9c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1f9cc:	6898      	ldr	r0, [r3, #8]
   1f9ce:	4770      	bx	lr

0001f9d0 <virtqueue_get_available_buffer>:
{
   1f9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1f9d4:	f3bf 8f5b 	dmb	ish
{
   1f9d8:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1f9da:	69c2      	ldr	r2, [r0, #28]
{
   1f9dc:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1f9de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1f9e0:	8851      	ldrh	r1, [r2, #2]
{
   1f9e2:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1f9e4:	4299      	cmp	r1, r3
   1f9e6:	d045      	beq.n	1fa74 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1f9e8:	1c59      	adds	r1, r3, #1
   1f9ea:	8601      	strh	r1, [r0, #48]	; 0x30
   1f9ec:	8941      	ldrh	r1, [r0, #10]
   1f9ee:	3901      	subs	r1, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1f9f0:	400b      	ands	r3, r1
   1f9f2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   1f9f6:	8892      	ldrh	r2, [r2, #4]
   1f9f8:	8032      	strh	r2, [r6, #0]
   1f9fa:	b293      	uxth	r3, r2
   1f9fc:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1fa00:	6982      	ldr	r2, [r0, #24]
   1fa02:	011b      	lsls	r3, r3, #4
   1fa04:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1fa08:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1fa0c:	bb5b      	cbnz	r3, 1fa66 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1fa0e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1fa12:	1c62      	adds	r2, r4, #1
   1fa14:	bf09      	itett	eq
   1fa16:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1fa1a:	ea09 0404 	andne.w	r4, r9, r4
   1fa1e:	681c      	ldreq	r4, [r3, #0]
   1fa20:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1fa24:	4621      	mov	r1, r4
   1fa26:	4640      	mov	r0, r8
   1fa28:	f7ff feee 	bl	1f808 <metal_io_phys>
   1fa2c:	4581      	cmp	r9, r0
   1fa2e:	d009      	beq.n	1fa44 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1fa30:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1fa34:	3301      	adds	r3, #1
   1fa36:	441c      	add	r4, r3
		} while (offset < io->size);
   1fa38:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1fa3c:	429c      	cmp	r4, r3
   1fa3e:	d3f1      	bcc.n	1fa24 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1fa40:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1fa44:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1fa48:	1c43      	adds	r3, r0, #1
   1fa4a:	d011      	beq.n	1fa70 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1fa4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1fa50:	42a3      	cmp	r3, r4
   1fa52:	d90d      	bls.n	1fa70 <virtqueue_get_available_buffer+0xa0>
		? (void *)((uintptr_t)io->virt + offset)
   1fa54:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1fa56:	8832      	ldrh	r2, [r6, #0]
   1fa58:	69ab      	ldr	r3, [r5, #24]
   1fa5a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1fa5e:	689b      	ldr	r3, [r3, #8]
   1fa60:	603b      	str	r3, [r7, #0]
}
   1fa62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1fa66:	4649      	mov	r1, r9
   1fa68:	4640      	mov	r0, r8
   1fa6a:	4798      	blx	r3
   1fa6c:	4604      	mov	r4, r0
   1fa6e:	e7e9      	b.n	1fa44 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1fa70:	2000      	movs	r0, #0
   1fa72:	e7f0      	b.n	1fa56 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1fa74:	2000      	movs	r0, #0
   1fa76:	e7f4      	b.n	1fa62 <virtqueue_get_available_buffer+0x92>

0001fa78 <virtqueue_disable_cb>:
{
   1fa78:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1fa7a:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1fa7c:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1fa7e:	6912      	ldr	r2, [r2, #16]
   1fa80:	0092      	lsls	r2, r2, #2
   1fa82:	d517      	bpl.n	1fab4 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1fa84:	b943      	cbnz	r3, 1fa98 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1fa86:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   1fa88:	69c2      	ldr	r2, [r0, #28]
   1fa8a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1fa8c:	8944      	ldrh	r4, [r0, #10]
   1fa8e:	3b01      	subs	r3, #1
   1fa90:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   1fa92:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1fa96:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1fa98:	6803      	ldr	r3, [r0, #0]
   1fa9a:	699b      	ldr	r3, [r3, #24]
   1fa9c:	2b01      	cmp	r3, #1
   1fa9e:	d108      	bne.n	1fab2 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1faa0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   1faa2:	6a02      	ldr	r2, [r0, #32]
   1faa4:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1faa6:	8940      	ldrh	r0, [r0, #10]
   1faa8:	3b01      	subs	r3, #1
   1faaa:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   1faac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1fab0:	8093      	strh	r3, [r2, #4]
}
   1fab2:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1fab4:	b923      	cbnz	r3, 1fac0 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1fab6:	69c2      	ldr	r2, [r0, #28]
   1fab8:	8813      	ldrh	r3, [r2, #0]
   1faba:	f043 0301 	orr.w	r3, r3, #1
   1fabe:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1fac0:	6803      	ldr	r3, [r0, #0]
   1fac2:	699b      	ldr	r3, [r3, #24]
   1fac4:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1fac6:	bf01      	itttt	eq
   1fac8:	6a02      	ldreq	r2, [r0, #32]
   1faca:	8813      	ldrheq	r3, [r2, #0]
   1facc:	f043 0301 	orreq.w	r3, r3, #1
   1fad0:	8013      	strheq	r3, [r2, #0]
}
   1fad2:	e7ee      	b.n	1fab2 <virtqueue_disable_cb+0x3a>

0001fad4 <virtqueue_kick>:
{
   1fad4:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1fad6:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1fada:	6803      	ldr	r3, [r0, #0]
{
   1fadc:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1fade:	691a      	ldr	r2, [r3, #16]
   1fae0:	699b      	ldr	r3, [r3, #24]
   1fae2:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1fae6:	d01a      	beq.n	1fb1e <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1fae8:	b97b      	cbnz	r3, 1fb0a <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   1faea:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   1faec:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   1faee:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1faf0:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1faf2:	3b01      	subs	r3, #1
   1faf4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   1faf8:	8892      	ldrh	r2, [r2, #4]
   1fafa:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   1fafc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1fafe:	b29b      	uxth	r3, r3
   1fb00:	429a      	cmp	r2, r3
   1fb02:	d814      	bhi.n	1fb2e <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   1fb04:	2300      	movs	r3, #0
   1fb06:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1fb08:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1fb0a:	2b01      	cmp	r3, #1
   1fb0c:	d1fa      	bne.n	1fb04 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1fb0e:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1fb10:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   1fb12:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1fb14:	6941      	ldr	r1, [r0, #20]
   1fb16:	3b01      	subs	r3, #1
   1fb18:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1fb1c:	e7ec      	b.n	1faf8 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1fb1e:	b963      	cbnz	r3, 1fb3a <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   1fb20:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   1fb22:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1fb24:	43db      	mvns	r3, r3
   1fb26:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1fb2a:	2b00      	cmp	r3, #0
   1fb2c:	d0ea      	beq.n	1fb04 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1fb2e:	6923      	ldr	r3, [r4, #16]
   1fb30:	2b00      	cmp	r3, #0
   1fb32:	d0e7      	beq.n	1fb04 <virtqueue_kick+0x30>
		vq->notify(vq);
   1fb34:	4620      	mov	r0, r4
   1fb36:	4798      	blx	r3
   1fb38:	e7e4      	b.n	1fb04 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1fb3a:	2b01      	cmp	r3, #1
   1fb3c:	d1e2      	bne.n	1fb04 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1fb3e:	69c3      	ldr	r3, [r0, #28]
   1fb40:	e7ef      	b.n	1fb22 <virtqueue_kick+0x4e>

0001fb42 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1fb42:	69c3      	ldr	r3, [r0, #28]
   1fb44:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   1fb46:	8859      	ldrh	r1, [r3, #2]
   1fb48:	4291      	cmp	r1, r2
   1fb4a:	d00a      	beq.n	1fb62 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1fb4c:	8941      	ldrh	r1, [r0, #10]
   1fb4e:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1fb50:	400a      	ands	r2, r1
   1fb52:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1fb56:	889a      	ldrh	r2, [r3, #4]
   1fb58:	6983      	ldr	r3, [r0, #24]
   1fb5a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1fb5e:	6898      	ldr	r0, [r3, #8]
	return len;
   1fb60:	4770      	bx	lr
		return 0;
   1fb62:	2000      	movs	r0, #0
}
   1fb64:	4770      	bx	lr

0001fb66 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1fb66:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1fb6a:	68c3      	ldr	r3, [r0, #12]
   1fb6c:	b103      	cbz	r3, 1fb70 <virtqueue_notification+0xa>
		vq->callback(vq);
   1fb6e:	4718      	bx	r3
}
   1fb70:	4770      	bx	lr

0001fb72 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1fb72:	f04f 32ff 	mov.w	r2, #4294967295
   1fb76:	f04f 33ff 	mov.w	r3, #4294967295
   1fb7a:	f7f9 bd29 	b.w	195d0 <z_impl_k_sem_take>

0001fb7e <rpmsg_unregister_endpoint>:
{
   1fb7e:	b570      	push	{r4, r5, r6, lr}
   1fb80:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1fb82:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1fb84:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1fb88:	4630      	mov	r0, r6
   1fb8a:	f7ff fff2 	bl	1fb72 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1fb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fb90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   1fb94:	2b7f      	cmp	r3, #127	; 0x7f
   1fb96:	d80b      	bhi.n	1fbb0 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1fb98:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1fb9a:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1fb9c:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1fb9e:	f003 031f 	and.w	r3, r3, #31
   1fba2:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1fba4:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1fba8:	ea23 0302 	bic.w	r3, r3, r2
   1fbac:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   1fbb0:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1fbb4:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1fbb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   1fbb8:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1fbbc:	6011      	str	r1, [r2, #0]
	node->next = node;
   1fbbe:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1fbc2:	2300      	movs	r3, #0
   1fbc4:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1fbc6:	4630      	mov	r0, r6
}
   1fbc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fbcc:	f7f9 bcbc 	b.w	19548 <z_impl_k_sem_give>

0001fbd0 <rpmsg_send_ns_message>:
{
   1fbd0:	b510      	push	{r4, lr}
   1fbd2:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   1fbd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1fbd6:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1fbd8:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1fbda:	2220      	movs	r2, #32
   1fbdc:	4601      	mov	r1, r0
   1fbde:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1fbe0:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1fbe2:	f7fd ff3e 	bl	1da62 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1fbe6:	2328      	movs	r3, #40	; 0x28
   1fbe8:	2201      	movs	r2, #1
   1fbea:	e9cd 3200 	strd	r3, r2, [sp]
   1fbee:	4620      	mov	r0, r4
   1fbf0:	2235      	movs	r2, #53	; 0x35
   1fbf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1fbf4:	ab02      	add	r3, sp, #8
   1fbf6:	f7f8 f9b3 	bl	17f60 <rpmsg_send_offchannel_raw>
}
   1fbfa:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1fbfe:	b00c      	add	sp, #48	; 0x30
   1fc00:	bd10      	pop	{r4, pc}

0001fc02 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1fc02:	b128      	cbz	r0, 1fc10 <rpmsg_hold_rx_buffer+0xe>
   1fc04:	6a00      	ldr	r0, [r0, #32]
   1fc06:	b118      	cbz	r0, 1fc10 <rpmsg_hold_rx_buffer+0xe>
   1fc08:	b111      	cbz	r1, 1fc10 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   1fc0a:	6f83      	ldr	r3, [r0, #120]	; 0x78
   1fc0c:	b103      	cbz	r3, 1fc10 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1fc0e:	4718      	bx	r3
}
   1fc10:	4770      	bx	lr

0001fc12 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1fc12:	b128      	cbz	r0, 1fc20 <rpmsg_release_rx_buffer+0xe>
   1fc14:	6a00      	ldr	r0, [r0, #32]
   1fc16:	b118      	cbz	r0, 1fc20 <rpmsg_release_rx_buffer+0xe>
   1fc18:	b111      	cbz	r1, 1fc20 <rpmsg_release_rx_buffer+0xe>
	if (rdev->ops.release_rx_buffer)
   1fc1a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1fc1c:	b103      	cbz	r3, 1fc20 <rpmsg_release_rx_buffer+0xe>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1fc1e:	4718      	bx	r3
}
   1fc20:	4770      	bx	lr

0001fc22 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   1fc22:	b130      	cbz	r0, 1fc32 <rpmsg_get_tx_payload_buffer+0x10>
   1fc24:	6a00      	ldr	r0, [r0, #32]
   1fc26:	b120      	cbz	r0, 1fc32 <rpmsg_get_tx_payload_buffer+0x10>
   1fc28:	b119      	cbz	r1, 1fc32 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   1fc2a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1fc2e:	b103      	cbz	r3, 1fc32 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1fc30:	4718      	bx	r3
}
   1fc32:	2000      	movs	r0, #0
   1fc34:	4770      	bx	lr

0001fc36 <rpmsg_get_endpoint>:
{
   1fc36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fc3a:	4606      	mov	r6, r0
   1fc3c:	4688      	mov	r8, r1
   1fc3e:	4617      	mov	r7, r2
   1fc40:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1fc42:	6804      	ldr	r4, [r0, #0]
   1fc44:	42a6      	cmp	r6, r4
   1fc46:	d101      	bne.n	1fc4c <rpmsg_get_endpoint+0x16>
	return NULL;
   1fc48:	2500      	movs	r5, #0
   1fc4a:	e023      	b.n	1fc94 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1fc4c:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1fc4e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1fc52:	d002      	beq.n	1fc5a <rpmsg_get_endpoint+0x24>
   1fc54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1fc56:	42bb      	cmp	r3, r7
   1fc58:	d01c      	beq.n	1fc94 <rpmsg_get_endpoint+0x5e>
		if (name)
   1fc5a:	f1b8 0f00 	cmp.w	r8, #0
   1fc5e:	d101      	bne.n	1fc64 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   1fc60:	6824      	ldr	r4, [r4, #0]
   1fc62:	e7ef      	b.n	1fc44 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   1fc64:	2220      	movs	r2, #32
   1fc66:	4641      	mov	r1, r8
   1fc68:	4628      	mov	r0, r5
   1fc6a:	f7fd ff2a 	bl	1dac2 <strncmp>
		if (!name || !name_match)
   1fc6e:	2800      	cmp	r0, #0
   1fc70:	d1f6      	bne.n	1fc60 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1fc72:	f1b9 3fff 	cmp.w	r9, #4294967295
   1fc76:	d002      	beq.n	1fc7e <rpmsg_get_endpoint+0x48>
   1fc78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1fc7a:	454b      	cmp	r3, r9
   1fc7c:	d00a      	beq.n	1fc94 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1fc7e:	1c7b      	adds	r3, r7, #1
   1fc80:	d00b      	beq.n	1fc9a <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   1fc82:	6824      	ldr	r4, [r4, #0]
   1fc84:	42b4      	cmp	r4, r6
   1fc86:	d0df      	beq.n	1fc48 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1fc88:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1fc8c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1fc90:	429f      	cmp	r7, r3
   1fc92:	d1e7      	bne.n	1fc64 <rpmsg_get_endpoint+0x2e>
}
   1fc94:	4628      	mov	r0, r5
   1fc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1fc9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1fc9c:	3301      	adds	r3, #1
   1fc9e:	d0f9      	beq.n	1fc94 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   1fca0:	6824      	ldr	r4, [r4, #0]
   1fca2:	42b4      	cmp	r4, r6
   1fca4:	d0d0      	beq.n	1fc48 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1fca6:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1fcaa:	e7d6      	b.n	1fc5a <rpmsg_get_endpoint+0x24>

0001fcac <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1fcac:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1fcae:	4604      	mov	r4, r0
   1fcb0:	b190      	cbz	r0, 1fcd8 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1fcb2:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1fcb4:	b183      	cbz	r3, 1fcd8 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1fcb6:	7802      	ldrb	r2, [r0, #0]
   1fcb8:	b14a      	cbz	r2, 1fcce <rpmsg_destroy_ept+0x22>
   1fcba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   1fcbe:	b133      	cbz	r3, 1fcce <rpmsg_destroy_ept+0x22>
   1fcc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1fcc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1fcc6:	d302      	bcc.n	1fcce <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1fcc8:	2101      	movs	r1, #1
   1fcca:	f7ff ff81 	bl	1fbd0 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1fcce:	4620      	mov	r0, r4
}
   1fcd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1fcd4:	f7ff bf53 	b.w	1fb7e <rpmsg_unregister_endpoint>
}
   1fcd8:	bd10      	pop	{r4, pc}

0001fcda <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1fcda:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1fcde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1fce2:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1fce6:	4770      	bx	lr

0001fce8 <rpmsg_virtio_tx_callback>:
}
   1fce8:	4770      	bx	lr

0001fcea <k_sem_give>:
   1fcea:	f7f9 bc2d 	b.w	19548 <z_impl_k_sem_give>

0001fcee <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1fcee:	f04f 32ff 	mov.w	r2, #4294967295
   1fcf2:	f04f 33ff 	mov.w	r3, #4294967295
   1fcf6:	f7f9 bc6b 	b.w	195d0 <z_impl_k_sem_take>

0001fcfa <rpmsg_virtio_ns_callback>:
{
   1fcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   1fcfe:	6a06      	ldr	r6, [r0, #32]
	if (len != sizeof(*ns_msg))
   1fd00:	2a28      	cmp	r2, #40	; 0x28
{
   1fd02:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   1fd04:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
{
   1fd08:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   1fd0a:	d12b      	bne.n	1fd64 <rpmsg_virtio_ns_callback+0x6a>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1fd0c:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1fd0e:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1fd10:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   1fd12:	42a1      	cmp	r1, r4
   1fd14:	bf28      	it	cs
   1fd16:	f04f 31ff 	movcs.w	r1, #4294967295
   1fd1a:	2320      	movs	r3, #32
   1fd1c:	466a      	mov	r2, sp
   1fd1e:	f7ff fcca 	bl	1f6b6 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1fd22:	f106 0558 	add.w	r5, r6, #88	; 0x58
	dest = ns_msg->addr;
   1fd26:	f8d7 8020 	ldr.w	r8, [r7, #32]
   1fd2a:	4628      	mov	r0, r5
   1fd2c:	f7ff ffdf 	bl	1fcee <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1fd30:	4643      	mov	r3, r8
   1fd32:	f04f 32ff 	mov.w	r2, #4294967295
   1fd36:	4669      	mov	r1, sp
   1fd38:	4630      	mov	r0, r6
   1fd3a:	f7ff ff7c 	bl	1fc36 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1fd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1fd40:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1fd42:	07db      	lsls	r3, r3, #31
   1fd44:	d512      	bpl.n	1fd6c <rpmsg_virtio_ns_callback+0x72>
		if (_ept)
   1fd46:	b918      	cbnz	r0, 1fd50 <rpmsg_virtio_ns_callback+0x56>
   1fd48:	4628      	mov	r0, r5
   1fd4a:	f7ff ffce 	bl	1fcea <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1fd4e:	e009      	b.n	1fd64 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1fd50:	f04f 33ff 	mov.w	r3, #4294967295
   1fd54:	6283      	str	r3, [r0, #40]	; 0x28
   1fd56:	4628      	mov	r0, r5
   1fd58:	f7ff ffc7 	bl	1fcea <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1fd5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1fd5e:	b10b      	cbz	r3, 1fd64 <rpmsg_virtio_ns_callback+0x6a>
			_ept->ns_unbind_cb(_ept);
   1fd60:	4620      	mov	r0, r4
   1fd62:	4798      	blx	r3
}
   1fd64:	2000      	movs	r0, #0
   1fd66:	b008      	add	sp, #32
   1fd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_ept) {
   1fd6c:	b950      	cbnz	r0, 1fd84 <rpmsg_virtio_ns_callback+0x8a>
   1fd6e:	4628      	mov	r0, r5
   1fd70:	f7ff ffbb 	bl	1fcea <k_sem_give>
			if (rdev->ns_bind_cb)
   1fd74:	6f33      	ldr	r3, [r6, #112]	; 0x70
   1fd76:	2b00      	cmp	r3, #0
   1fd78:	d0f4      	beq.n	1fd64 <rpmsg_virtio_ns_callback+0x6a>
				rdev->ns_bind_cb(rdev, name, dest);
   1fd7a:	4642      	mov	r2, r8
   1fd7c:	4669      	mov	r1, sp
   1fd7e:	4630      	mov	r0, r6
   1fd80:	4798      	blx	r3
   1fd82:	e7ef      	b.n	1fd64 <rpmsg_virtio_ns_callback+0x6a>
			_ept->dest_addr = dest;
   1fd84:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1fd88:	e7de      	b.n	1fd48 <rpmsg_virtio_ns_callback+0x4e>

0001fd8a <rpmsg_virtio_get_rx_buffer>:
{
   1fd8a:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1fd8c:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
   1fd90:	4613      	mov	r3, r2
   1fd92:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   1fd94:	b925      	cbnz	r5, 1fda0 <rpmsg_virtio_get_rx_buffer+0x16>
}
   1fd96:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1fd98:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1fd9c:	f7ff bdd9 	b.w	1f952 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1fda0:	2d01      	cmp	r5, #1
   1fda2:	d106      	bne.n	1fdb2 <rpmsg_virtio_get_rx_buffer+0x28>
}
   1fda4:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1fda6:	460a      	mov	r2, r1
   1fda8:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1fdac:	4619      	mov	r1, r3
   1fdae:	f7ff be0f 	b.w	1f9d0 <virtqueue_get_available_buffer>
}
   1fdb2:	2000      	movs	r0, #0
   1fdb4:	bc30      	pop	{r4, r5}
   1fdb6:	4770      	bx	lr

0001fdb8 <rpmsg_virtio_return_buffer>:
{
   1fdb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1fdba:	460c      	mov	r4, r1
   1fdbc:	4619      	mov	r1, r3
   1fdbe:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1fdc2:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1fdc4:	b95d      	cbnz	r5, 1fdde <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1fdc6:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1fdc8:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1fdcc:	2301      	movs	r3, #1
   1fdce:	462a      	mov	r2, r5
   1fdd0:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1fdd4:	a902      	add	r1, sp, #8
   1fdd6:	f7ff fd60 	bl	1f89a <virtqueue_add_buffer>
}
   1fdda:	b004      	add	sp, #16
   1fddc:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   1fdde:	2d01      	cmp	r5, #1
   1fde0:	d1fb      	bne.n	1fdda <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1fde2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
}
   1fde6:	b004      	add	sp, #16
   1fde8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1fdec:	f7f8 b89c 	b.w	17f28 <virtqueue_add_consumed_buffer>

0001fdf0 <rpmsg_virtio_release_rx_buffer>:
{
   1fdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdf2:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1fdf4:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1fdf8:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1fdfc:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1fdfe:	b2b6      	uxth	r6, r6
{
   1fe00:	460d      	mov	r5, r1
   1fe02:	f7ff ff74 	bl	1fcee <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1fe06:	4631      	mov	r1, r6
   1fe08:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1fe0c:	f7ff fddb 	bl	1f9c6 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1fe10:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1fe12:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1fe14:	f1a5 0110 	sub.w	r1, r5, #16
   1fe18:	4620      	mov	r0, r4
   1fe1a:	f7ff ffcd 	bl	1fdb8 <rpmsg_virtio_return_buffer>
   1fe1e:	4638      	mov	r0, r7
}
   1fe20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1fe24:	f7ff bf61 	b.w	1fcea <k_sem_give>

0001fe28 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1fe28:	4603      	mov	r3, r0
   1fe2a:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1fe2c:	6842      	ldr	r2, [r0, #4]
   1fe2e:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1fe30:	bf29      	itett	cs
   1fe32:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1fe34:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1fe36:	1a84      	subcs	r4, r0, r2
   1fe38:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1fe3a:	bf22      	ittt	cs
   1fe3c:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1fe3e:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1fe40:	605a      	strcs	r2, [r3, #4]
}
   1fe42:	bd10      	pop	{r4, pc}

0001fe44 <rpmsg_virtio_get_tx_payload_buffer>:
{
   1fe44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fe48:	4605      	mov	r5, r0
   1fe4a:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1fe4e:	460f      	mov	r7, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1fe50:	6a03      	ldr	r3, [r0, #32]
   1fe52:	4616      	mov	r6, r2
   1fe54:	681b      	ldr	r3, [r3, #0]
   1fe56:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1fe58:	0743      	lsls	r3, r0, #29
   1fe5a:	d403      	bmi.n	1fe64 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1fe5c:	2000      	movs	r0, #0
}
   1fe5e:	b003      	add	sp, #12
   1fe60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1fe64:	f643 2398 	movw	r3, #15000	; 0x3a98
   1fe68:	2e00      	cmp	r6, #0
   1fe6a:	bf18      	it	ne
   1fe6c:	461e      	movne	r6, r3
		metal_mutex_acquire(&rdev->lock);
   1fe6e:	f105 0858 	add.w	r8, r5, #88	; 0x58
   1fe72:	4640      	mov	r0, r8
   1fe74:	f7ff ff3b 	bl	1fcee <__metal_mutex_acquire>
	return rvdev->vdev->role;
   1fe78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1fe7c:	f8d3 9018 	ldr.w	r9, [r3, #24]
	if (role == RPMSG_HOST) {
   1fe80:	f1b9 0f00 	cmp.w	r9, #0
   1fe84:	d135      	bne.n	1fef2 <rpmsg_virtio_get_tx_payload_buffer+0xae>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1fe86:	4639      	mov	r1, r7
   1fe88:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1fe8c:	f10d 0206 	add.w	r2, sp, #6
   1fe90:	f7ff fd5f 	bl	1f952 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1fe94:	4604      	mov	r4, r0
   1fe96:	b158      	cbz	r0, 1feb0 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
   1fe98:	4640      	mov	r0, r8
   1fe9a:	f7ff ff26 	bl	1fcea <k_sem_give>
	rp_hdr->reserved = idx;
   1fe9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1fea2:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1fea6:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1fea8:	683b      	ldr	r3, [r7, #0]
   1feaa:	3b10      	subs	r3, #16
   1feac:	603b      	str	r3, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1feae:	e7d6      	b.n	1fe5e <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (!data && rvdev->svq->vq_free_cnt) {
   1feb0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   1feb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1feb6:	b953      	cbnz	r3, 1fece <rpmsg_virtio_get_tx_payload_buffer+0x8a>
   1feb8:	4640      	mov	r0, r8
   1feba:	f7ff ff16 	bl	1fcea <k_sem_give>
		if (rp_hdr || !tick_count)
   1febe:	2e00      	cmp	r6, #0
   1fec0:	d0cc      	beq.n	1fe5c <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1fec2:	2021      	movs	r0, #33	; 0x21
   1fec4:	2100      	movs	r1, #0
   1fec6:	f7fb fa33 	bl	1b330 <z_impl_k_sleep>
		tick_count--;
   1feca:	3e01      	subs	r6, #1
		metal_mutex_acquire(&rdev->lock);
   1fecc:	e7d1      	b.n	1fe72 <rpmsg_virtio_get_tx_payload_buffer+0x2e>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1fece:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   1fed2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1fed6:	f7ff ffa7 	bl	1fe28 <rpmsg_virtio_shm_pool_get_buffer>
   1feda:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1fedc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
			*idx = 0;
   1fee0:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1fee4:	603b      	str	r3, [r7, #0]
   1fee6:	4640      	mov	r0, r8
   1fee8:	f7ff feff 	bl	1fcea <k_sem_give>
		if (rp_hdr || !tick_count)
   1feec:	2c00      	cmp	r4, #0
   1feee:	d0e6      	beq.n	1febe <rpmsg_virtio_get_tx_payload_buffer+0x7a>
   1fef0:	e7d5      	b.n	1fe9e <rpmsg_virtio_get_tx_payload_buffer+0x5a>
	if (role == RPMSG_REMOTE) {
   1fef2:	f1b9 0f01 	cmp.w	r9, #1
   1fef6:	d1df      	bne.n	1feb8 <rpmsg_virtio_get_tx_payload_buffer+0x74>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1fef8:	463a      	mov	r2, r7
   1fefa:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1fefe:	f10d 0106 	add.w	r1, sp, #6
   1ff02:	f7ff fd65 	bl	1f9d0 <virtqueue_get_available_buffer>
   1ff06:	4604      	mov	r4, r0
   1ff08:	e7ed      	b.n	1fee6 <rpmsg_virtio_get_tx_payload_buffer+0xa2>

0001ff0a <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1ff0a:	b110      	cbz	r0, 1ff12 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1ff0c:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1ff10:	6001      	str	r1, [r0, #0]
}
   1ff12:	4770      	bx	lr

0001ff14 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1ff14:	b510      	push	{r4, lr}
   1ff16:	4604      	mov	r4, r0
	return list->next == list;
   1ff18:	6820      	ldr	r0, [r4, #0]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
   1ff1a:	4284      	cmp	r4, r0
   1ff1c:	d103      	bne.n	1ff26 <rpmsg_deinit_vdev+0x12>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
	}

	rvdev->rvq = 0;
   1ff1e:	2300      	movs	r3, #0
	rvdev->svq = 0;
   1ff20:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98

	metal_mutex_deinit(&rdev->lock);
}
   1ff24:	bd10      	pop	{r4, pc}
		rpmsg_destroy_ept(ept);
   1ff26:	3834      	subs	r0, #52	; 0x34
   1ff28:	f7ff fec0 	bl	1fcac <rpmsg_destroy_ept>
   1ff2c:	e7f4      	b.n	1ff18 <rpmsg_deinit_vdev+0x4>

0001ff2e <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1ff2e:	4770      	bx	lr

0001ff30 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1ff30:	b140      	cbz	r0, 1ff44 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1ff32:	68c3      	ldr	r3, [r0, #12]
   1ff34:	7858      	ldrb	r0, [r3, #1]
   1ff36:	f010 0001 	ands.w	r0, r0, #1
   1ff3a:	bf1e      	ittt	ne
   1ff3c:	7818      	ldrbne	r0, [r3, #0]
   1ff3e:	fab0 f080 	clzne	r0, r0
   1ff42:	0940      	lsrne	r0, r0, #5
}
   1ff44:	4770      	bx	lr

0001ff46 <z_early_memset>:
	(void) memset(dst, c, n);
   1ff46:	f7fd bdea 	b.w	1db1e <memset>

0001ff4a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1ff4a:	f7fd bddd 	b.w	1db08 <memcpy>

0001ff4e <k_heap_init>:
{
   1ff4e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1ff50:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1ff54:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1ff58:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1ff5a:	f7e9 be89 	b.w	9c70 <sys_heap_init>

0001ff5e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ff5e:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   1ff62:	4313      	orrs	r3, r2
   1ff64:	f013 0303 	ands.w	r3, r3, #3
   1ff68:	d10c      	bne.n	1ff84 <create_free_list+0x26>
	slab->free_list = NULL;
   1ff6a:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ff6c:	68c1      	ldr	r1, [r0, #12]
   1ff6e:	4299      	cmp	r1, r3
   1ff70:	d801      	bhi.n	1ff76 <create_free_list+0x18>
	return 0;
   1ff72:	2000      	movs	r0, #0
   1ff74:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1ff76:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ff78:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1ff7a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1ff7c:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   1ff7e:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   1ff80:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1ff82:	e7f3      	b.n	1ff6c <create_free_list+0xe>
		return -EINVAL;
   1ff84:	f06f 0015 	mvn.w	r0, #21
}
   1ff88:	4770      	bx	lr

0001ff8a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ff8a:	f3ef 8005 	mrs	r0, IPSR
}
   1ff8e:	3800      	subs	r0, #0
   1ff90:	bf18      	it	ne
   1ff92:	2001      	movne	r0, #1
   1ff94:	4770      	bx	lr

0001ff96 <z_impl_k_thread_name_set>:
}
   1ff96:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1ff9a:	4770      	bx	lr

0001ff9c <k_thread_name_get>:
}
   1ff9c:	2000      	movs	r0, #0
   1ff9e:	4770      	bx	lr

0001ffa0 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1ffa0:	f7fa bb26 	b.w	1a5f0 <z_sched_start>

0001ffa4 <z_pm_save_idle_exit>:
{
   1ffa4:	b508      	push	{r3, lr}
	pm_system_resume();
   1ffa6:	f7ec fbcd 	bl	c744 <pm_system_resume>
}
   1ffaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1ffae:	f7ff b907 	b.w	1f1c0 <sys_clock_idle_exit>

0001ffb2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1ffb2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ffb6:	428b      	cmp	r3, r1
   1ffb8:	d001      	beq.n	1ffbe <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1ffba:	f7fa be1b 	b.w	1abf4 <z_set_prio>
}
   1ffbe:	2000      	movs	r0, #0
   1ffc0:	4770      	bx	lr

0001ffc2 <z_impl_k_mutex_init>:
{
   1ffc2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1ffc4:	2000      	movs	r0, #0
   1ffc6:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1ffca:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1ffce:	4770      	bx	lr

0001ffd0 <z_queue_node_peek>:
{
   1ffd0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1ffd2:	4604      	mov	r4, r0
   1ffd4:	b130      	cbz	r0, 1ffe4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ffd6:	6802      	ldr	r2, [r0, #0]
   1ffd8:	0793      	lsls	r3, r2, #30
   1ffda:	d003      	beq.n	1ffe4 <z_queue_node_peek+0x14>
		ret = anode->data;
   1ffdc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1ffde:	b109      	cbz	r1, 1ffe4 <z_queue_node_peek+0x14>
			k_free(anode);
   1ffe0:	f000 f9bc 	bl	2035c <k_free>
}
   1ffe4:	4620      	mov	r0, r4
   1ffe6:	bd10      	pop	{r4, pc}

0001ffe8 <z_impl_k_queue_init>:
	list->head = NULL;
   1ffe8:	2300      	movs	r3, #0
	list->tail = NULL;
   1ffea:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1ffee:	6083      	str	r3, [r0, #8]
   1fff0:	f100 030c 	add.w	r3, r0, #12
   1fff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1fff8:	f100 0314 	add.w	r3, r0, #20
   1fffc:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   20000:	4770      	bx	lr

00020002 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   20002:	2301      	movs	r3, #1
{
   20004:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   20006:	9300      	str	r3, [sp, #0]
   20008:	2300      	movs	r3, #0
{
   2000a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2000c:	4619      	mov	r1, r3
   2000e:	f7f9 f939 	bl	19284 <queue_insert>
}
   20012:	b003      	add	sp, #12
   20014:	f85d fb04 	ldr.w	pc, [sp], #4

00020018 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   20018:	2300      	movs	r3, #0
{
   2001a:	b507      	push	{r0, r1, r2, lr}
   2001c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2001e:	9300      	str	r3, [sp, #0]
   20020:	4619      	mov	r1, r3
   20022:	f7f9 f92f 	bl	19284 <queue_insert>
}
   20026:	b003      	add	sp, #12
   20028:	f85d fb04 	ldr.w	pc, [sp], #4

0002002c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2002c:	b15a      	cbz	r2, 20046 <z_impl_k_sem_init+0x1a>
   2002e:	428a      	cmp	r2, r1
   20030:	d309      	bcc.n	20046 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20032:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   20036:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2003a:	e9c0 0000 	strd	r0, r0, [r0]
   2003e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20042:	2000      	movs	r0, #0
   20044:	4770      	bx	lr
		return -EINVAL;
   20046:	f06f 0015 	mvn.w	r0, #21
}
   2004a:	4770      	bx	lr

0002004c <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2004c:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2004e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   20050:	408b      	lsls	r3, r1
   20052:	ea22 0303 	bic.w	r3, r2, r3
   20056:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   20058:	fa22 f001 	lsr.w	r0, r2, r1
}
   2005c:	f000 0001 	and.w	r0, r0, #1
   20060:	4770      	bx	lr

00020062 <unschedule_locked>:
{
   20062:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20064:	2103      	movs	r1, #3
{
   20066:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20068:	300c      	adds	r0, #12
   2006a:	f7ff ffef 	bl	2004c <flag_test_and_clear>
   2006e:	4604      	mov	r4, r0
   20070:	b118      	cbz	r0, 2007a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   20072:	f105 0010 	add.w	r0, r5, #16
   20076:	f7fb fbfb 	bl	1b870 <z_abort_timeout>
}
   2007a:	4620      	mov	r0, r4
   2007c:	bd38      	pop	{r3, r4, r5, pc}

0002007e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2007e:	b120      	cbz	r0, 2008a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   20080:	2200      	movs	r2, #0
   20082:	3090      	adds	r0, #144	; 0x90
   20084:	4611      	mov	r1, r2
   20086:	f7fb ba55 	b.w	1b534 <z_sched_wake>
}
   2008a:	4770      	bx	lr

0002008c <cancel_async_locked>:
{
   2008c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2008e:	68c3      	ldr	r3, [r0, #12]
{
   20090:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20092:	f3c3 0640 	ubfx	r6, r3, #1, #1
   20096:	079b      	lsls	r3, r3, #30
   20098:	d416      	bmi.n	200c8 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2009a:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2009c:	2102      	movs	r1, #2
   2009e:	300c      	adds	r0, #12
   200a0:	f7ff ffd4 	bl	2004c <flag_test_and_clear>
   200a4:	b180      	cbz	r0, 200c8 <cancel_async_locked+0x3c>
	return list->head;
   200a6:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   200aa:	b16a      	cbz	r2, 200c8 <cancel_async_locked+0x3c>
   200ac:	4294      	cmp	r4, r2
   200ae:	d11d      	bne.n	200ec <cancel_async_locked+0x60>
	return node->next;
   200b0:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   200b2:	b99e      	cbnz	r6, 200dc <cancel_async_locked+0x50>
   200b4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   200b8:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   200bc:	429c      	cmp	r4, r3
   200be:	d101      	bne.n	200c4 <cancel_async_locked+0x38>
	list->tail = node;
   200c0:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   200c4:	2300      	movs	r3, #0
   200c6:	6023      	str	r3, [r4, #0]
	return *flagp;
   200c8:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   200ca:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   200ce:	bf1e      	ittt	ne
   200d0:	f043 0302 	orrne.w	r3, r3, #2
   200d4:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   200d6:	f040 0002 	orrne.w	r0, r0, #2
}
   200da:	bd70      	pop	{r4, r5, r6, pc}
   200dc:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   200de:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   200e2:	4294      	cmp	r4, r2
	list->tail = node;
   200e4:	bf08      	it	eq
   200e6:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   200ea:	e7eb      	b.n	200c4 <cancel_async_locked+0x38>
	return node->next;
   200ec:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   200ee:	6812      	ldr	r2, [r2, #0]
   200f0:	e7db      	b.n	200aa <cancel_async_locked+0x1e>

000200f2 <k_work_submit_to_queue>:
{
   200f2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   200f4:	f7f9 fd3c 	bl	19b70 <z_work_submit_to_queue>
	if (ret > 0) {
   200f8:	1e04      	subs	r4, r0, #0
   200fa:	dd09      	ble.n	20110 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   200fc:	f04f 0320 	mov.w	r3, #32
   20100:	f3ef 8011 	mrs	r0, BASEPRI
   20104:	f383 8812 	msr	BASEPRI_MAX, r3
   20108:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2010c:	f000 f80d 	bl	2012a <z_reschedule_irqlock>
}
   20110:	4620      	mov	r0, r4
   20112:	bd10      	pop	{r4, pc}

00020114 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   20114:	f7f9 bce6 	b.w	19ae4 <k_work_busy_get>

00020118 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   20118:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2011c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   20120:	4283      	cmp	r3, r0
		return b2 - b1;
   20122:	bf14      	ite	ne
   20124:	1ac0      	subne	r0, r0, r3
	return 0;
   20126:	2000      	moveq	r0, #0
}
   20128:	4770      	bx	lr

0002012a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2012a:	4603      	mov	r3, r0
   2012c:	b920      	cbnz	r0, 20138 <z_reschedule_irqlock+0xe>
   2012e:	f3ef 8205 	mrs	r2, IPSR
   20132:	b90a      	cbnz	r2, 20138 <z_reschedule_irqlock+0xe>
   20134:	f7ec beb6 	b.w	cea4 <arch_swap>
	__asm__ volatile(
   20138:	f383 8811 	msr	BASEPRI, r3
   2013c:	f3bf 8f6f 	isb	sy
}
   20140:	4770      	bx	lr

00020142 <z_reschedule_unlocked>:
	__asm__ volatile(
   20142:	f04f 0320 	mov.w	r3, #32
   20146:	f3ef 8011 	mrs	r0, BASEPRI
   2014a:	f383 8812 	msr	BASEPRI_MAX, r3
   2014e:	f3bf 8f6f 	isb	sy
   20152:	f7ff bfea 	b.w	2012a <z_reschedule_irqlock>

00020156 <z_unpend_all>:
{
   20156:	b538      	push	{r3, r4, r5, lr}
   20158:	4605      	mov	r5, r0
	int need_sched = 0;
   2015a:	2000      	movs	r0, #0
	return list->head == list;
   2015c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2015e:	42a5      	cmp	r5, r4
   20160:	d000      	beq.n	20164 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20162:	b904      	cbnz	r4, 20166 <z_unpend_all+0x10>
}
   20164:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   20166:	4620      	mov	r0, r4
   20168:	f7fa fe5e 	bl	1ae28 <z_unpend_thread>
		z_ready_thread(thread);
   2016c:	4620      	mov	r0, r4
   2016e:	f7fa f971 	bl	1a454 <z_ready_thread>
		need_sched = 1;
   20172:	2001      	movs	r0, #1
   20174:	e7f2      	b.n	2015c <z_unpend_all+0x6>

00020176 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   20176:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   20178:	f7fb fcfc 	bl	1bb74 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2017c:	bd08      	pop	{r3, pc}

0002017e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2017e:	f7fb bcf9 	b.w	1bb74 <sys_clock_tick_get>

00020182 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   20182:	b108      	cbz	r0, 20188 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   20184:	f7ea beb0 	b.w	aee8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   20188:	4770      	bx	lr

0002018a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2018a:	f1b1 3fff 	cmp.w	r1, #4294967295
   2018e:	bf08      	it	eq
   20190:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   20194:	b538      	push	{r3, r4, r5, lr}
   20196:	460c      	mov	r4, r1
   20198:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2019a:	d014      	beq.n	201c6 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2019c:	4308      	orrs	r0, r1
   2019e:	d103      	bne.n	201a8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   201a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   201a4:	f7fb bce6 	b.w	1bb74 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   201a8:	f06f 0001 	mvn.w	r0, #1
   201ac:	f04f 33ff 	mov.w	r3, #4294967295
   201b0:	1b40      	subs	r0, r0, r5
   201b2:	eb63 0101 	sbc.w	r1, r3, r1
   201b6:	2900      	cmp	r1, #0
   201b8:	da04      	bge.n	201c4 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   201ba:	f7fb fcdb 	bl	1bb74 <sys_clock_tick_get>
   201be:	1940      	adds	r0, r0, r5
   201c0:	eb41 0104 	adc.w	r1, r1, r4
}
   201c4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   201c6:	f04f 30ff 	mov.w	r0, #4294967295
   201ca:	4601      	mov	r1, r0
   201cc:	e7fa      	b.n	201c4 <sys_clock_timeout_end_calc+0x3a>

000201ce <k_timer_init>:
	timer->status = 0U;
   201ce:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   201d0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   201d4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   201d8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   201dc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   201e0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   201e2:	6343      	str	r3, [r0, #52]	; 0x34
}
   201e4:	4770      	bx	lr

000201e6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   201e6:	b510      	push	{r4, lr}
   201e8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   201ea:	f7fb fb41 	bl	1b870 <z_abort_timeout>

	if (inactive) {
   201ee:	b9b0      	cbnz	r0, 2021e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   201f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   201f2:	b10b      	cbz	r3, 201f8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   201f4:	4620      	mov	r0, r4
   201f6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   201f8:	f104 0018 	add.w	r0, r4, #24
   201fc:	f7fa feb6 	bl	1af6c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   20200:	b168      	cbz	r0, 2021e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   20202:	f7fa f927 	bl	1a454 <z_ready_thread>
   20206:	f04f 0320 	mov.w	r3, #32
   2020a:	f3ef 8011 	mrs	r0, BASEPRI
   2020e:	f383 8812 	msr	BASEPRI_MAX, r3
   20212:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   20216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2021a:	f7ff bf86 	b.w	2012a <z_reschedule_irqlock>
   2021e:	bd10      	pop	{r4, pc}

00020220 <add_event>:
{
   20220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20222:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20224:	e9d0 1300 	ldrd	r1, r3, [r0]
   20228:	4288      	cmp	r0, r1
   2022a:	4604      	mov	r4, r0
   2022c:	d105      	bne.n	2023a <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2022e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   20230:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   20234:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20236:	6065      	str	r5, [r4, #4]
   20238:	e01d      	b.n	20276 <add_event+0x56>
	if ((pending == NULL) ||
   2023a:	2b00      	cmp	r3, #0
   2023c:	d0f7      	beq.n	2022e <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2023e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20240:	b100      	cbz	r0, 20244 <add_event+0x24>
   20242:	3860      	subs	r0, #96	; 0x60
   20244:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20248:	4639      	mov	r1, r7
   2024a:	f7ff ff65 	bl	20118 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2024e:	2800      	cmp	r0, #0
   20250:	dced      	bgt.n	2022e <add_event+0xe>
	return list->head == list;
   20252:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20254:	42b4      	cmp	r4, r6
   20256:	d0ea      	beq.n	2022e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20258:	2e00      	cmp	r6, #0
   2025a:	d0e8      	beq.n	2022e <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2025c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2025e:	b101      	cbz	r1, 20262 <add_event+0x42>
   20260:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   20262:	4638      	mov	r0, r7
   20264:	f7ff ff58 	bl	20118 <z_sched_prio_cmp>
   20268:	2800      	cmp	r0, #0
   2026a:	dd05      	ble.n	20278 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2026c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2026e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   20272:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20274:	6075      	str	r5, [r6, #4]
}
   20276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   20278:	6863      	ldr	r3, [r4, #4]
   2027a:	429e      	cmp	r6, r3
   2027c:	d0d7      	beq.n	2022e <add_event+0xe>
   2027e:	6836      	ldr	r6, [r6, #0]
   20280:	e7ea      	b.n	20258 <add_event+0x38>

00020282 <signal_poll_event>:
{
   20282:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   20286:	6884      	ldr	r4, [r0, #8]
{
   20288:	4605      	mov	r5, r0
   2028a:	460e      	mov	r6, r1
	if (poller != NULL) {
   2028c:	b144      	cbz	r4, 202a0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2028e:	7863      	ldrb	r3, [r4, #1]
   20290:	2b01      	cmp	r3, #1
   20292:	d12e      	bne.n	202f2 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   20294:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   20298:	f013 0302 	ands.w	r3, r3, #2
   2029c:	d10a      	bne.n	202b4 <signal_poll_event+0x32>
		poller->is_polling = false;
   2029e:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   202a0:	2000      	movs	r0, #0
	event->state |= state;
   202a2:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   202a4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   202a6:	f3c3 3286 	ubfx	r2, r3, #14, #7
   202aa:	4316      	orrs	r6, r2
   202ac:	f366 3394 	bfi	r3, r6, #14, #7
   202b0:	60eb      	str	r3, [r5, #12]
	return retcode;
   202b2:	e03e      	b.n	20332 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   202b4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   202b8:	f1b3 3fff 	cmp.w	r3, #4294967295
   202bc:	bf08      	it	eq
   202be:	f112 0f02 	cmneq.w	r2, #2
   202c2:	d032      	beq.n	2032a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   202c4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   202c8:	4640      	mov	r0, r8
   202ca:	f7fa fdad 	bl	1ae28 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   202ce:	2e08      	cmp	r6, #8
   202d0:	bf0c      	ite	eq
   202d2:	f06f 0303 	mvneq.w	r3, #3
   202d6:	2300      	movne	r3, #0
   202d8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   202da:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   202de:	06db      	lsls	r3, r3, #27
   202e0:	d109      	bne.n	202f6 <signal_poll_event+0x74>
   202e2:	f854 7c48 	ldr.w	r7, [r4, #-72]
   202e6:	b937      	cbnz	r7, 202f6 <signal_poll_event+0x74>
	z_ready_thread(thread);
   202e8:	4640      	mov	r0, r8
   202ea:	f7fa f8b3 	bl	1a454 <z_ready_thread>
		poller->is_polling = false;
   202ee:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   202f0:	e7d6      	b.n	202a0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   202f2:	2b02      	cmp	r3, #2
   202f4:	d001      	beq.n	202fa <signal_poll_event+0x78>
		poller->is_polling = false;
   202f6:	2300      	movs	r3, #0
   202f8:	e7d1      	b.n	2029e <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   202fa:	7823      	ldrb	r3, [r4, #0]
   202fc:	2b00      	cmp	r3, #0
   202fe:	d0cf      	beq.n	202a0 <signal_poll_event+0x1e>
   20300:	f854 7c04 	ldr.w	r7, [r4, #-4]
   20304:	2f00      	cmp	r7, #0
   20306:	d0f2      	beq.n	202ee <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   20308:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2030c:	f1a4 0914 	sub.w	r9, r4, #20
   20310:	f104 0014 	add.w	r0, r4, #20
   20314:	f7fb faac 	bl	1b870 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   20318:	4649      	mov	r1, r9
   2031a:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2031c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   20320:	f7f9 fc26 	bl	19b70 <z_work_submit_to_queue>
		poller->is_polling = false;
   20324:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20328:	e7ba      	b.n	202a0 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2032a:	2300      	movs	r3, #0
		return -EAGAIN;
   2032c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   20330:	7023      	strb	r3, [r4, #0]
}
   20332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020336 <z_handle_obj_poll_events>:
{
   20336:	4603      	mov	r3, r0
	return list->head == list;
   20338:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2033a:	4283      	cmp	r3, r0
   2033c:	d008      	beq.n	20350 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2033e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20342:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20344:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20346:	2300      	movs	r3, #0
	node->prev = NULL;
   20348:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2034c:	f7ff bf99 	b.w	20282 <signal_poll_event>
}
   20350:	4770      	bx	lr

00020352 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   20352:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   20354:	e9c0 0000 	strd	r0, r0, [r0]
   20358:	6083      	str	r3, [r0, #8]
}
   2035a:	4770      	bx	lr

0002035c <k_free>:
	if (ptr != NULL) {
   2035c:	b120      	cbz	r0, 20368 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2035e:	1f01      	subs	r1, r0, #4
   20360:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20364:	f7f8 bb76 	b.w	18a54 <k_heap_free>
}
   20368:	4770      	bx	lr

0002036a <k_malloc>:
{
   2036a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2036c:	2004      	movs	r0, #4
   2036e:	f7fc b8c7 	b.w	1c500 <k_aligned_alloc>

00020372 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   20372:	4770      	bx	lr
