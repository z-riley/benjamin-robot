// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html

/ {
    motors_l: motors_left {
        compatible = "pwm-servo";
        pwms = <&pwm0 0 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1000)>;
        max-pulse = <PWM_USEC(2000)>;
    };
    motors_r: motors_right {
        compatible = "pwm-servo";
        pwms = <&pwm0 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1000)>;
        max-pulse = <PWM_USEC(2000)>;
    };
    motor_f: motor_front {
        compatible = "pwm-servo";
        pwms = <&pwm0 2 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
        min-pulse = <PWM_USEC(1000)>;
        max-pulse = <PWM_USEC(2000)>;
    } ;
};

my_spi_master: &spi4 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi4_default>;
    pinctrl-1 = <&spi4_sleep>;
    cs-gpios = <&gpio0 12 GPIO_ACTIVE_LOW>;         // Dot matrix
    dot_matrix: dot_matrix@0 {
        compatible = "st,lis2dw12";
        reg = <0>;
        spi-max-frequency = < 0x80000000UL >;
    };
    
};

arduino_i2c: &i2c1 {
	compatible = "nordic,nrf-twim";
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;   // default = I2C_BITRATE_FAST
    zephyr,concat-buf-size = <4096>;            // default = 4096
  
    ssd1306: ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        reg = <0x3c>;   // I2C address 0x3c for SSD1306.
        width = <128>;
        height = <64>;
        segment-offset = <0>;   // default = 0
        page-offset = <0>;      // default = 0
        display-offset = <16>;  // default = 0. correct = 16
        multiplex-ratio = <63>; //change to 63 when using the 128x64 pixel version (default = 31)
        segment-remap;
        com-invdir;
        com-sequential;
        prechargep = <0x22>;    // default = 0x22
    };
};

&pinctrl {
    pwm0_default: pwm0_default {
        group1 {
            psels = <NRF_PSEL(PWM_OUT0, 0, 4)>;   
        };
        group2 {
            psels = <NRF_PSEL(PWM_OUT1, 0, 5)>;
        };
        group3 {
            psels = <NRF_PSEL(PWM_OUT2, 0, 6)>;
        };
    };
    pwm0_sleep: pwm0_sleep {
        group1 {
            psels = <NRF_PSEL(PWM_OUT0, 0, 4)>;
        };
        group2 {
            psels = <NRF_PSEL(PWM_OUT1, 0, 5)>;
        };
        group3 {
            psels = <NRF_PSEL(PWM_OUT2, 0, 6)>;

        };
    };
    i2c1_default: i2c1_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 2)>,
                    <NRF_PSEL(TWIM_SCL, 1, 3)>;
        };
    };
        
    i2c1_sleep: i2c1_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 2)>,
                    <NRF_PSEL(TWIM_SCL, 1, 3)>;
                    low-power-enable;
            };
    };
    spi4_default: spi4_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 31)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 30)>,
                    <NRF_PSEL(SPIM_MISO, 0, 29)>;
        };
    };
    spi4_sleep: spi4_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 31)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 30)>,
                    <NRF_PSEL(SPIM_MISO, 0, 29)>;
            low-power-enable;
        };
    };

};
